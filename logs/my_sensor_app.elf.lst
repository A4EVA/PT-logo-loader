
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000080f9

Program Header:
0x70000001 off    0x00021214 vaddr 0x00021214 paddr 0x00021214 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x0002122c memsz 0x0002122c flags rwx
    LOAD off    0x000300d8 vaddr 0x200000d8 paddr 0x0002122c align 2**16
         filesz 0x0000006c memsz 0x0000006c flags rw-
    LOAD off    0x00030148 vaddr 0x20000148 paddr 0x00021298 align 2**16
         filesz 0x00000000 memsz 0x0000a5f0 flags rw-
    LOAD off    0x00040000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x000000d8 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00008000  00008000  00008000  2**0  ALLOC
  1 .text              000191f4  00008020  00008020  00008020  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  00021214  00021214  00030144  2**0  CONTENTS
  3 .ARM.exidx         00000018  00021214  00021214  00021214  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 000000d8  20000000  20000000  00040000  2**0  ALLOC
  5 .rtt               00000000  200000d8  200000d8  00030144  2**0  CONTENTS
  6 .data              0000006c  200000d8  0002122c  000300d8  2**2  CONTENTS, ALLOC, LOAD, DATA
  7 .bssnz             00000000  20000144  20000144  00030144  2**0  CONTENTS
  8 .bss               0000a5f0  20000148  00021298  00030148  2**3  ALLOC
  9 .stack_dummy       000001b0  2000a738  2000a738  00030148  2**3  CONTENTS, READONLY
 10 .ARM.attributes    0000003b  00000000  00000000  000302f8  2**0  CONTENTS, READONLY
 11 .comment           0000007f  00000000  00000000  00030333  2**0  CONTENTS, READONLY
 12 .svc_table         00000004  00000000  00000000  000303b2  2**0  CONTENTS, READONLY
 13 .debug_line        0004a517  00000000  00000000  000303b6  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_info        000891bf  00000000  00000000  0007a8cd  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev      0000ebb6  00000000  00000000  00103a8c  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges     00005e08  00000000  00000000  00112648  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_str         0005f5d2  00000000  00000000  00118450  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         00013513  00000000  00000000  00177a22  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges      0001a130  00000000  00000000  0018af35  2**0  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame       0000f398  00000000  00000000  001a5068  2**2  CONTENTS, READONLY, DEBUGGING
 21 .debug_macinfo     00000060  00000000  00000000  001b4400  2**0  CONTENTS, READONLY, DEBUGGING
 22 .debug_pubnames    00018ddd  00000000  00000000  001b4460  2**0  CONTENTS, READONLY, DEBUGGING
 23 .debug_pubtypes    00035ef2  00000000  00000000  001cd23d  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .imghdr	00000000 .imghdr
00008020 l    d  .text	00000000 .text
00021214 l    d  .ARM.extab	00000000 .ARM.extab
00021214 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
200000d8 l    d  .data	00000000 .data
20000144 l    d  .bssnz	00000000 .bssnz
20000148 l    d  .bss	00000000 .bss
2000a738 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
00008100 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
200000d8 l     O .data	00000004 sbrkBase
200000dc l     O .data	00000004 sbrkLimit
200000e0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
0000820c l     F .text	0000003c errata_16
00008248 l     F .text	0000004c errata_31
00008294 l     F .text	0000003c errata_32
000082d0 l     F .text	0000004c errata_36
0000831c l     F .text	0000003c errata_37
00008358 l     F .text	0000003c errata_57
00008394 l     F .text	0000003c errata_66
000083d0 l     F .text	0000004c errata_108
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 29v7ssp6j8vk2cgm
00000d09 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
0000ca63 l       .debug_str	00000000 
00032171 l       .debug_str	00000000 
00057dfd l       .debug_str	00000000 
00058564 l       .debug_str	00000000 
00057831 l       .debug_str	00000000 
00000e0b l       .debug_str	00000000 
0003219e l       .debug_str	00000000 
00032190 l       .debug_str	00000000 
00000e1d l       .debug_str	00000000 
00000e0f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0005aa56 l       .debug_str	00000000 
00000b83 l       .debug_str	00000000 
00000b8c l       .debug_str	00000000 
00000b90 l       .debug_str	00000000 
00000bba l       .debug_str	00000000 
000598df l       .debug_str	00000000 
00000bbf l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
0000f4a4 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
0003215d l       .debug_str	00000000 
0005d517 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2ac9yj7x9inahmak
00000d77 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
0000ca63 l       .debug_str	00000000 
0005dd4e l       .debug_str	00000000 
0005b209 l       .debug_str	00000000 
000013b3 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d1f2 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00057c37 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d2d4 l       .debug_str	00000000 
0005e02d l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010d81 l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
0000159b l       .debug_str	00000000 
000015a4 l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000015ad l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
00001605 l       .debug_str	00000000 
000015ec l       .debug_str	00000000 
0005c359 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
000073a5 l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
0000161a l       .debug_str	00000000 
00001641 l       .debug_str	00000000 
00001649 l       .debug_str	00000000 
00001650 l       .debug_str	00000000 
00001656 l       .debug_str	00000000 
0000165d l       .debug_str	00000000 
0005ad43 l       .debug_str	00000000 
00001663 l       .debug_str	00000000 
00001672 l       .debug_str	00000000 
00001680 l       .debug_str	00000000 
0000168a l       .debug_str	00000000 
0000168f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0005aa56 l       .debug_str	00000000 
0000120a l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00000e33 l       .debug_str	00000000 
00058744 l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
000159c1 l       .debug_str	00000000 
00000e37 l       .debug_str	00000000 
00000e6e l       .debug_str	00000000 
000159d8 l       .debug_str	00000000 
00000e7a l       .debug_str	00000000 
00000eb1 l       .debug_str	00000000 
00000ebc l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00000ec4 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000ecb l       .debug_str	00000000 
00000ed2 l       .debug_str	00000000 
0005e0cb l       .debug_str	00000000 
00000edb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00058907 l       .debug_str	00000000 
00000ee5 l       .debug_str	00000000 
00001632 l       .debug_str	00000000 
00000eef l       .debug_str	00000000 
000074cc l       .debug_str	00000000 
00000f25 l       .debug_str	00000000 
00000f53 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
00040335 l       .debug_str	00000000 
00000f66 l       .debug_str	00000000 
0005b57c l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000015b2 l       .debug_str	00000000 
00000f70 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000fa8 l       .debug_str	00000000 
00000fe8 l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
00001020 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001028 l       .debug_str	00000000 
000015cb l       .debug_str	00000000 
0000103f l       .debug_str	00000000 
00001076 l       .debug_str	00000000 
00058924 l       .debug_str	00000000 
0005dbff l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
0005de78 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0000107f l       .debug_str	00000000 
00001093 l       .debug_str	00000000 
000010c6 l       .debug_str	00000000 
000010d1 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000011c6 l       .debug_str	00000000 
00001204 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
0000123f l       .debug_str	00000000 
00001282 l       .debug_str	00000000 
0000129a l       .debug_str	00000000 
000012da l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
00001329 l       .debug_str	00000000 
00001338 l       .debug_str	00000000 
00001377 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
0000138b l       .debug_str	00000000 
00005d6d l       .debug_str	00000000 
00001394 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
000013a3 l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
000013ae l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
200001f8 l     O .bss	00000001 _ZN3app12touch_sensor10I2C_BUFFER17h8f3c7b5d2c207abfE
2000014c l     O .bss	00000052 _ZN3app12touch_sensor10TOUCH_DATA17h64b26c24ec50591aE
2000014c l     O .bss	00000000 _ZN3app12touch_sensor11TOUCH_DELAY17h41aa62dc06660831E
200001e0 l     O .bss	00000010 _ZN3app12touch_sensor11TOUCH_EVENT17h248d1b5995e7331aE
20000148 l     O .bss	00000004 _ZN3app12touch_sensor11TOUCH_RESET17hc6437d039f5b5b2dE
00008bc8 l     F .text	00000752 _ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E
0000931a l     F .text	0000019a _ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E
00008a8e l     F .text	0000013a _ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E
00008a42 l     F .text	0000004c _ZN3app12touch_sensor23touch_interrupt_handler17he79adf05b4785acfE
2000019e l     O .bss	0000003f _ZN3app12touch_sensor3BUF17h7dd26ed30d22a01eE
200001f0 l     O .bss	00000008 _ZN3app12touch_sensor8I2C_DATA17h66f4f9260b49f5dfE
0001d3e0 l     O .text	00000021 str.0
0001d420 l     O .text	0000001c str.1
00000000 l    df *ABS*	00000000 3av1m1so5ua992q
00005e31 l       .debug_str	00000000 
00001af4 l       .debug_str	00000000 
00003538 l       .debug_str	00000000 
00001afd l       .debug_str	00000000 
00005de6 l       .debug_str	00000000 
00001b0c l       .debug_str	00000000 
00001b19 l       .debug_str	00000000 
00001b1f l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001b2a l       .debug_str	00000000 
00001b35 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001dea7 l       .debug_str	00000000 
00001b3c l       .debug_str	00000000 
00001b49 l       .debug_str	00000000 
000327bc l       .debug_str	00000000 
0001dd48 l       .debug_str	00000000 
00018a52 l       .debug_str	00000000 
0001dc37 l       .debug_str	00000000 
00001b56 l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
00001b5f l       .debug_str	00000000 
0000777d l       .debug_str	00000000 
00001b62 l       .debug_str	00000000 
0004a9ad l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
000593bf l       .debug_str	00000000 
0005dcd8 l       .debug_str	00000000 
00024d3b l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00058924 l       .debug_str	00000000 
00001b87 l       .debug_str	00000000 
00002262 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00001b76 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
0001eaee l       .debug_str	00000000 
00001b43 l       .debug_str	00000000 
00019d26 l       .debug_str	00000000 
00001b90 l       .debug_str	00000000 
00001b99 l       .debug_str	00000000 
0004455b l       .debug_str	00000000 
0000d92f l       .debug_str	00000000 
0000d935 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0005aa56 l       .debug_str	00000000 
00001b59 l       .debug_str	00000000 
00001693 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000016a1 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
000016db l       .debug_str	00000000 
00001706 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
0000170f l       .debug_str	00000000 
00058603 l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
0003b621 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
000017c2 l       .debug_str	00000000 
00001820 l       .debug_str	00000000 
00001829 l       .debug_str	00000000 
00001887 l       .debug_str	00000000 
00001890 l       .debug_str	00000000 
000018f3 l       .debug_str	00000000 
00001900 l       .debug_str	00000000 
0000195f l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
0000196d l       .debug_str	00000000 
0000197c l       .debug_str	00000000 
000019d7 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
000019dd l       .debug_str	00000000 
00001a37 l       .debug_str	00000000 
00001a3c l       .debug_str	00000000 
000598c6 l       .debug_str	00000000 
00001a97 l       .debug_str	00000000 
00001ac7 l       .debug_str	00000000 
00001ad4 l       .debug_str	00000000 
0001890b l       .debug_str	00000000 
00001adf l       .debug_str	00000000 
00001aea l       .debug_str	00000000 
200001f9 l     O .bss	00000800 _ZN3app5chip813SCREEN_BUFFER17h6824cb449058aaa8E
0001dbf0 l     O .text	00000021 str.0
0001dc30 l     O .text	0000001c str.1
0001dc90 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 3k1rew1y0sa9p4cs
0000209d l       .debug_str	00000000 
0000338a l       .debug_str	00000000 
0000228f l       .debug_str	00000000 
000418b8 l       .debug_str	00000000 
00002287 l       .debug_str	00000000 
0000da03 l       .debug_str	00000000 
00002283 l       .debug_str	00000000 
0000227e l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00059da5 l       .debug_str	00000000 
00002253 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
000073a5 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
0000285f l       .debug_str	00000000 
00001ca7 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
0000196d l       .debug_str	00000000 
00001d33 l       .debug_str	00000000 
00001d68 l       .debug_str	00000000 
00001d82 l       .debug_str	00000000 
00001db7 l       .debug_str	00000000 
00001dd1 l       .debug_str	00000000 
00001e06 l       .debug_str	00000000 
00001e20 l       .debug_str	00000000 
00001e56 l       .debug_str	00000000 
00001e71 l       .debug_str	00000000 
00001ec5 l       .debug_str	00000000 
00001ee7 l       .debug_str	00000000 
00001f59 l       .debug_str	00000000 
00001f8f l       .debug_str	00000000 
00001faa l       .debug_str	00000000 
00001fe0 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00002244 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00002225 l       .debug_str	00000000 
00001ffb l       .debug_str	00000000 
000021eb l       .debug_str	00000000 
000021cd l       .debug_str	00000000 
00002194 l       .debug_str	00000000 
00002031 l       .debug_str	00000000 
00002178 l       .debug_str	00000000 
00002141 l       .debug_str	00000000 
0000204c l       .debug_str	00000000 
00002125 l       .debug_str	00000000 
000020ee l       .debug_str	00000000 
000020d3 l       .debug_str	00000000 
00002082 l       .debug_str	00000000 
0001ea7c l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
000022c7 l       .debug_str	00000000 
000022c3 l       .debug_str	00000000 
00058b61 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0005785d l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00001ba2 l       .debug_str	00000000 
0002144a l       .debug_str	00000000 
00001ba6 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
00032129 l       .debug_str	00000000 
00001bab l       .debug_str	00000000 
0000cc02 l       .debug_str	00000000 
0000ca0e l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00001b56 l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00001b5f l       .debug_str	00000000 
0000777d l       .debug_str	00000000 
00001b62 l       .debug_str	00000000 
0004a9ad l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
000593bf l       .debug_str	00000000 
0005dcd8 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000022bd l       .debug_str	00000000 
000022b7 l       .debug_str	00000000 
000022b1 l       .debug_str	00000000 
000022ab l       .debug_str	00000000 
0000de37 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0005ad43 l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
0000dae8 l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
00005d77 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
000022a8 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00024d3b l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00058924 l       .debug_str	00000000 
0005aa56 l       .debug_str	00000000 
00001b59 l       .debug_str	00000000 
00001b87 l       .debug_str	00000000 
00002262 l       .debug_str	00000000 
000583e5 l       .debug_str	00000000 
00001bb1 l       .debug_str	00000000 
00001bd7 l       .debug_str	00000000 
0000f38d l       .debug_str	00000000 
00001be1 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00001bed l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
00001bf5 l       .debug_str	00000000 
00001c81 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00001c9e l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
000022a4 l       .debug_str	00000000 
000594f7 l       .debug_str	00000000 
00002cb0 l       .debug_str	00000000 
00002d22 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00002299 l       .debug_str	00000000 
0001ddb0 l     O .text	0000001c str.0
0001e030 l     O .text	00000021 str.1
0001e310 l     O .text	00000039 str.2
0001e370 l     O .text	00000021 str.3
0001e3b0 l     O .text	00000023 str.4
00000000 l    df *ABS*	00000000 4g2px1fyklyi5loj
00001b71 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
000022cc l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00002325 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
000022d4 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4li2bx5hst9qmla8
00001b71 l       .debug_str	00000000 
0000239a l       .debug_str	00000000 
000023d6 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
000023df l       .debug_str	00000000 
00007aa2 l       .debug_str	00000000 
0000240a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
0003215d l       .debug_str	00000000 
00002468 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
0001eae9 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00002332 l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c9d7 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000238c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4omwjvgyphguh48u
00002587 l       .debug_str	00000000 
00002299 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00002d22 l       .debug_str	00000000 
00002cb0 l       .debug_str	00000000 
00002518 l       .debug_str	00000000 
00002559 l       .debug_str	00000000 
000025c8 l       .debug_str	00000000 
0000262b l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
0000196d l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
0000267b l       .debug_str	00000000 
000026fb l       .debug_str	00000000 
00002739 l       .debug_str	00000000 
00002750 l       .debug_str	00000000 
000027d0 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00002844 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
0000e34f l       .debug_str	00000000 
00002471 l       .debug_str	00000000 
00034330 l       .debug_str	00000000 
00001c9e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
000073a5 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
00001b56 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000f38d l       .debug_str	00000000 
00001be1 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
0000285f l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
0000247a l       .debug_str	00000000 
00002482 l       .debug_str	00000000 
00002487 l       .debug_str	00000000 
000024ca l       .debug_str	00000000 
00002287 l       .debug_str	00000000 
000418b8 l       .debug_str	00000000 
0000228f l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000338a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 52x5s6n74aarru7s
00002a3c l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
0000196d l       .debug_str	00000000 
00002739 l       .debug_str	00000000 
000029a8 l       .debug_str	00000000 
00002a85 l       .debug_str	00000000 
00002acf l       .debug_str	00000000 
00002b22 l       .debug_str	00000000 
00002bb1 l       .debug_str	00000000 
00002c14 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00002c8c l       .debug_str	00000000 
00002cfe l       .debug_str	00000000 
00002dbc l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
00002dc0 l       .debug_str	00000000 
00002844 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00001c9e l       .debug_str	00000000 
00002287 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
000418b8 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
000073a5 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
00001b56 l       .debug_str	00000000 
0000f38d l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
0000285f l       .debug_str	00000000 
0000228f l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001be1 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000338a l       .debug_str	00000000 
00002299 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00002d22 l       .debug_str	00000000 
00002cb0 l       .debug_str	00000000 
0000e34f l       .debug_str	00000000 
0000247a l       .debug_str	00000000 
0000288e l       .debug_str	00000000 
00002918 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 ltoum6qebj303de
00000d1e l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
00002dca l       .debug_str	00000000 
00002e07 l       .debug_str	00000000 
00002e18 l       .debug_str	00000000 
00002e4a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 t2faay6g6bya59u
00001b71 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
000583b6 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
000073a5 l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
00002e57 l       .debug_str	00000000 
00002ed3 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00001680 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 xuw4v3fy8tiv1h2
00003087 l       .debug_str	00000000 
00002dc0 l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
0000304c l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
000030f0 l       .debug_str	00000000 
0000315b l       .debug_str	00000000 
00003197 l       .debug_str	00000000 
000031e4 l       .debug_str	00000000 
00003220 l       .debug_str	00000000 
0000322e l       .debug_str	00000000 
00003299 l       .debug_str	00000000 
000032b4 l       .debug_str	00000000 
00003320 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
00003377 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00001c9e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
000073a5 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
00001b56 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000f38d l       .debug_str	00000000 
00001be1 l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
0000285f l       .debug_str	00000000 
00002844 l       .debug_str	00000000 
00002f00 l       .debug_str	00000000 
0000338a l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000c9d7 l       .debug_str	00000000 
0000238c l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
0000196d l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00002244 l       .debug_str	00000000 
00002f52 l       .debug_str	00000000 
00002f8b l       .debug_str	00000000 
00002739 l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
00002fb4 l       .debug_str	00000000 
00002fed l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 embedded_graphics.94s3esdv-cgu.0
00003e12 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
0000349f l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0001890b l       .debug_str	00000000 
00003538 l       .debug_str	00000000 
00001afd l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00005de6 l       .debug_str	00000000 
000034a6 l       .debug_str	00000000 
000034ac l       .debug_str	00000000 
000034b6 l       .debug_str	00000000 
000034bf l       .debug_str	00000000 
000034c7 l       .debug_str	00000000 
000034d0 l       .debug_str	00000000 
000327bc l       .debug_str	00000000 
000034dd l       .debug_str	00000000 
000034ed l       .debug_str	00000000 
000034fe l       .debug_str	00000000 
00001b2a l       .debug_str	00000000 
00001b35 l       .debug_str	00000000 
00005e31 l       .debug_str	00000000 
00001adf l       .debug_str	00000000 
0000350f l       .debug_str	00000000 
00003518 l       .debug_str	00000000 
00003526 l       .debug_str	00000000 
00005e97 l       .debug_str	00000000 
0000353e l       .debug_str	00000000 
00003544 l       .debug_str	00000000 
0000354f l       .debug_str	00000000 
00003559 l       .debug_str	00000000 
00003563 l       .debug_str	00000000 
000035ab l       .debug_str	00000000 
000035b4 l       .debug_str	00000000 
000035fc l       .debug_str	00000000 
00003605 l       .debug_str	00000000 
0000364d l       .debug_str	00000000 
00002482 l       .debug_str	00000000 
00003656 l       .debug_str	00000000 
0000367f l       .debug_str	00000000 
00003688 l       .debug_str	00000000 
000036e5 l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
0000370b l       .debug_str	00000000 
00003733 l       .debug_str	00000000 
00003765 l       .debug_str	00000000 
00003796 l       .debug_str	00000000 
000037a1 l       .debug_str	00000000 
000037fe l       .debug_str	00000000 
0000385b l       .debug_str	00000000 
000038b8 l       .debug_str	00000000 
00002e4a l       .debug_str	00000000 
000038ea l       .debug_str	00000000 
0000392f l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
0000393b l       .debug_str	00000000 
0005797d l       .debug_str	00000000 
00003977 l       .debug_str	00000000 
000039bb l       .debug_str	00000000 
000039c6 l       .debug_str	00000000 
00003a0d l       .debug_str	00000000 
00003a1b l       .debug_str	00000000 
00003a62 l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
00003ab0 l       .debug_str	00000000 
00003ab8 l       .debug_str	00000000 
00003ac5 l       .debug_str	00000000 
00003aca l       .debug_str	00000000 
00003b05 l       .debug_str	00000000 
00003b43 l       .debug_str	00000000 
00003b73 l       .debug_str	00000000 
00003b87 l       .debug_str	00000000 
00003bb7 l       .debug_str	00000000 
00003bcb l       .debug_str	00000000 
00003bfb l       .debug_str	00000000 
00003c0f l       .debug_str	00000000 
0003d63b l       .debug_str	00000000 
00003c5a l       .debug_str	00000000 
00003cb1 l       .debug_str	00000000 
00003cc0 l       .debug_str	00000000 
00003d0b l       .debug_str	00000000 
0000668d l       .debug_str	00000000 
00003d82 l       .debug_str	00000000 
00003e07 l       .debug_str	00000000 
00016531 l       .debug_str	00000000 
00003e89 l       .debug_str	00000000 
00003f0e l       .debug_str	00000000 
00003f19 l       .debug_str	00000000 
000583b6 l       .debug_str	00000000 
00003fa2 l       .debug_str	00000000 
00021f68 l       .debug_str	00000000 
00004019 l       .debug_str	00000000 
00059da4 l       .debug_str	00000000 
000040ae l       .debug_str	00000000 
00004145 l       .debug_str	00000000 
000041e0 l       .debug_str	00000000 
00004275 l       .debug_str	00000000 
0000430c l       .debug_str	00000000 
000043a7 l       .debug_str	00000000 
0000446f l       .debug_str	00000000 
0000447a l       .debug_str	00000000 
00004546 l       .debug_str	00000000 
000045d6 l       .debug_str	00000000 
000045e2 l       .debug_str	00000000 
00004688 l       .debug_str	00000000 
00004694 l       .debug_str	00000000 
00004738 l       .debug_str	00000000 
000047da l       .debug_str	00000000 
0000487e l       .debug_str	00000000 
000048d2 l       .debug_str	00000000 
00004927 l       .debug_str	00000000 
0000497c l       .debug_str	00000000 
0001eed8 l       .debug_str	00000000 
000049ff l       .debug_str	00000000 
00004a83 l       .debug_str	00000000 
00004b07 l       .debug_str	00000000 
0000de2b l       .debug_str	00000000 
00004b4e l       .debug_str	00000000 
0000de31 l       .debug_str	00000000 
00004b95 l       .debug_str	00000000 
0000de37 l       .debug_str	00000000 
00004bdc l       .debug_str	00000000 
00004c5a l       .debug_str	00000000 
00004cd9 l       .debug_str	00000000 
00004d74 l       .debug_str	00000000 
00004e08 l       .debug_str	00000000 
00004e55 l       .debug_str	00000000 
00004e61 l       .debug_str	00000000 
00004ec4 l       .debug_str	00000000 
00004f0c l       .debug_str	00000000 
00004f14 l       .debug_str	00000000 
00004f18 l       .debug_str	00000000 
00004fac l       .debug_str	00000000 
00005012 l       .debug_str	00000000 
000050a3 l       .debug_str	00000000 
00005142 l       .debug_str	00000000 
000051d3 l       .debug_str	00000000 
00005272 l       .debug_str	00000000 
00005314 l       .debug_str	00000000 
000053a5 l       .debug_str	00000000 
00005453 l       .debug_str	00000000 
00005503 l       .debug_str	00000000 
000055b7 l       .debug_str	00000000 
000056aa l       .debug_str	00000000 
000056b5 l       .debug_str	00000000 
000057ac l       .debug_str	00000000 
00005858 l       .debug_str	00000000 
00005862 l       .debug_str	00000000 
000058d4 l       .debug_str	00000000 
00005949 l       .debug_str	00000000 
000059bc l       .debug_str	00000000 
00005a2d l       .debug_str	00000000 
00005aa0 l       .debug_str	00000000 
00005b17 l       .debug_str	00000000 
00005b8c l       .debug_str	00000000 
00005c01 l       .debug_str	00000000 
00005c71 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
000013a3 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
00005cfd l       .debug_str	00000000 
00005d03 l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
00005d09 l       .debug_str	00000000 
00005d0c l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
00005d14 l       .debug_str	00000000 
00003a15 l       .debug_str	00000000 
00005d68 l       .debug_str	00000000 
00005d72 l       .debug_str	00000000 
00005d7c l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00005d86 l       .debug_str	00000000 
00005db7 l       .debug_str	00000000 
0005f498 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
00005dec l       .debug_str	00000000 
00005df6 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00005e00 l       .debug_str	00000000 
00005e09 l       .debug_str	00000000 
00005e38 l       .debug_str	00000000 
00005e45 l       .debug_str	00000000 
00005e48 l       .debug_str	00000000 
00005e4b l       .debug_str	00000000 
00005e4e l       .debug_str	00000000 
00005e51 l       .debug_str	00000000 
00005e54 l       .debug_str	00000000 
00005e57 l       .debug_str	00000000 
00005ea5 l       .debug_str	00000000 
00005eef l       .debug_str	00000000 
00005f03 l       .debug_str	00000000 
0000cc9c l       .debug_str	00000000 
00005f0c l       .debug_str	00000000 
00005f17 l       .debug_str	00000000 
00005f22 l       .debug_str	00000000 
00005f2d l       .debug_str	00000000 
00005f5e l       .debug_str	00000000 
00005f38 l       .debug_str	00000000 
00005f91 l       .debug_str	00000000 
00005f6c l       .debug_str	00000000 
00005fc2 l       .debug_str	00000000 
00005f9e l       .debug_str	00000000 
00005ff3 l       .debug_str	00000000 
00005fce l       .debug_str	00000000 
00006027 l       .debug_str	00000000 
00006000 l       .debug_str	00000000 
0000605c l       .debug_str	00000000 
00006036 l       .debug_str	00000000 
00006090 l       .debug_str	00000000 
0000606a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000033d7 l       .debug_str	00000000 
00003437 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00005d6d l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00005d77 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00005d81 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005c4e8 l       .debug_str	00000000 
000334dc l       .debug_str	00000000 
0000348c l       .debug_str	00000000 
00003491 l       .debug_str	00000000 
00003497 l       .debug_str	00000000 
00003702 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
000363cd l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
0000e0ee l     F .text	00000044 _ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE
0000e1e2 l     F .text	0000006e _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E
0000e250 l     F .text	00000038 _ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE
0000e288 l     F .text	0000001a _ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E
00000000 l    df *ABS*	00000000 hash32.79y5bd3b-cgu.0
00006d2b l       .debug_str	00000000 
00006691 l       .debug_str	00000000 
000066dc l       .debug_str	00000000 
000066ec l       .debug_str	00000000 
000066fa l       .debug_str	00000000 
00006730 l       .debug_str	00000000 
0000674b l       .debug_str	00000000 
00006785 l       .debug_str	00000000 
000067a4 l       .debug_str	00000000 
000067e0 l       .debug_str	00000000 
00006806 l       .debug_str	00000000 
00006812 l       .debug_str	00000000 
00006839 l       .debug_str	00000000 
00006846 l       .debug_str	00000000 
000092b0 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00006894 l       .debug_str	00000000 
00009320 l       .debug_str	00000000 
000068e5 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00006937 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0000698c l       .debug_str	00000000 
00006a21 l       .debug_str	00000000 
00006a2d l       .debug_str	00000000 
00006a7b l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
00006a8a l       .debug_str	00000000 
00006adb l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00006af3 l       .debug_str	00000000 
00006b48 l       .debug_str	00000000 
00006b64 l       .debug_str	00000000 
00006b6c l       .debug_str	00000000 
00006bb2 l       .debug_str	00000000 
00006bba l       .debug_str	00000000 
00006c03 l       .debug_str	00000000 
00006c0e l       .debug_str	00000000 
00059da4 l       .debug_str	00000000 
00006c7d l       .debug_str	00000000 
00006cce l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00006cda l       .debug_str	00000000 
00006d3d l       .debug_str	00000000 
00006d95 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00006dab l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00006db6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
000073a5 l       .debug_str	00000000 
00006ddf l       .debug_str	00000000 
00006e42 l       .debug_str	00000000 
00006e6c l       .debug_str	00000000 
00006ecf l       .debug_str	00000000 
00006ed8 l       .debug_str	00000000 
00006f45 l       .debug_str	00000000 
00006f57 l       .debug_str	00000000 
00006fc8 l       .debug_str	00000000 
00006fde l       .debug_str	00000000 
0001eed8 l       .debug_str	00000000 
0000703e l       .debug_str	00000000 
00007071 l       .debug_str	00000000 
000070db l       .debug_str	00000000 
0000710e l       .debug_str	00000000 
00007113 l       .debug_str	00000000 
00007177 l       .debug_str	00000000 
0005c65d l       .debug_str	00000000 
000071d2 l       .debug_str	00000000 
0000720e l       .debug_str	00000000 
0000721c l       .debug_str	00000000 
0000724b l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
000583e5 l       .debug_str	00000000 
00007253 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00058b61 l       .debug_str	00000000 
00058907 l       .debug_str	00000000 
0000725a l       .debug_str	00000000 
00007267 l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00007272 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
0000727d l       .debug_str	00000000 
0005a8ee l       .debug_str	00000000 
0000de37 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
0000d93c l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00007281 l       .debug_str	00000000 
000072bb l       .debug_str	00000000 
000072f4 l       .debug_str	00000000 
00007303 l       .debug_str	00000000 
00007346 l       .debug_str	00000000 
00059e32 l       .debug_str	00000000 
000367bd l       .debug_str	00000000 
0005b857 l       .debug_str	00000000 
00007388 l       .debug_str	00000000 
0000738e l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00001680 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
00033a4f l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
000073b2 l       .debug_str	00000000 
000073ca l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
000073e7 l       .debug_str	00000000 
00007216 l       .debug_str	00000000 
00007400 l       .debug_str	00000000 
0000741c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000609e l       .debug_str	00000000 
000060f3 l       .debug_str	00000000 
0000613d l       .debug_str	00000000 
00006144 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00005f2a l       .debug_str	00000000 
00005f35 l       .debug_str	00000000 
0000ccb7 l       .debug_str	00000000 
0000ccc2 l       .debug_str	00000000 
000073c4 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000614c l       .debug_str	00000000 
0005c4e8 l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00006157 l       .debug_str	00000000 
00006180 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000618f l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00004f14 l       .debug_str	00000000 
000061a9 l       .debug_str	00000000 
000072fd l       .debug_str	00000000 
000061ad l       .debug_str	00000000 
000061d6 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00006226 l       .debug_str	00000000 
0000623a l       .debug_str	00000000 
0000624d l       .debug_str	00000000 
00006299 l       .debug_str	00000000 
000062a7 l       .debug_str	00000000 
000062af l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
000022cc l       .debug_str	00000000 
0000e34f l       .debug_str	00000000 
0000247a l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
000062b9 l       .debug_str	00000000 
000062e2 l       .debug_str	00000000 
000062ef l       .debug_str	00000000 
000062f9 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00003a15 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000574 l       .debug_str	00000000 
000583b6 l       .debug_str	00000000 
000062fd l       .debug_str	00000000 
000588db l       .debug_str	00000000 
00007416 l       .debug_str	00000000 
000073e0 l       .debug_str	00000000 
00006307 l       .debug_str	00000000 
0000635c l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
00006366 l       .debug_str	00000000 
000063a4 l       .debug_str	00000000 
000063bc l       .debug_str	00000000 
000063fa l       .debug_str	00000000 
00006415 l       .debug_str	00000000 
00002dbd l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
0000647a l       .debug_str	00000000 
000064aa l       .debug_str	00000000 
000064d1 l       .debug_str	00000000 
000064f7 l       .debug_str	00000000 
00006503 l       .debug_str	00000000 
00006548 l       .debug_str	00000000 
00006554 l       .debug_str	00000000 
0000659a l       .debug_str	00000000 
000065a7 l       .debug_str	00000000 
000065ed l       .debug_str	00000000 
000065fa l       .debug_str	00000000 
00006638 l       .debug_str	00000000 
0000663e l       .debug_str	00000000 
00006685 l       .debug_str	00000000 
0000e438 l     F .text	00000034 _ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE
0000e4a2 l     F .text	00000018 _ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E
0000e4cc l     F .text	0000003e _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE
0000e50a l     F .text	00000040 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE
0000e5da l     F .text	0000011c _ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE
00000000 l    df *ABS*	00000000 log.9af4yuww-cgu.0
00009697 l       .debug_str	00000000 
0000776a l       .debug_str	00000000 
00007772 l       .debug_str	00000000 
00007779 l       .debug_str	00000000 
00001ba2 l       .debug_str	00000000 
0000cc02 l       .debug_str	00000000 
00001c9e l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00007780 l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
00007784 l       .debug_str	00000000 
00006bb2 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00007802 l       .debug_str	00000000 
000334b6 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00007813 l       .debug_str	00000000 
0001679c l       .debug_str	00000000 
00007824 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
0004455b l       .debug_str	00000000 
0005de01 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0000783b l       .debug_str	00000000 
00007864 l       .debug_str	00000000 
00007870 l       .debug_str	00000000 
000078a2 l       .debug_str	00000000 
0000614c l       .debug_str	00000000 
000363cd l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
0000349f l       .debug_str	00000000 
000078b4 l       .debug_str	00000000 
000078dd l       .debug_str	00000000 
0000618f l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00004f14 l       .debug_str	00000000 
000061a9 l       .debug_str	00000000 
000072fd l       .debug_str	00000000 
00007902 l       .debug_str	00000000 
000061d6 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
0000792b l       .debug_str	00000000 
00007955 l       .debug_str	00000000 
0000797e l       .debug_str	00000000 
000079ca l       .debug_str	00000000 
000062a7 l       .debug_str	00000000 
000079ee l       .debug_str	00000000 
000062af l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
000079fc l       .debug_str	00000000 
00007a3d l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
00018a52 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00007a46 l       .debug_str	00000000 
0000e34f l       .debug_str	00000000 
00002471 l       .debug_str	00000000 
00034330 l       .debug_str	00000000 
000596cc l       .debug_str	00000000 
0004c71f l       .debug_str	00000000 
0005a431 l       .debug_str	00000000 
0005bd4a l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
0000c813 l       .debug_str	00000000 
000418b8 l       .debug_str	00000000 
00036fd7 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0000cb6c l       .debug_str	00000000 
0000cacb l       .debug_str	00000000 
00007a5b l       .debug_str	00000000 
00007a65 l       .debug_str	00000000 
0000c9ab l       .debug_str	00000000 
000327bc l       .debug_str	00000000 
0000c783 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
0000a47e l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
0000cba5 l       .debug_str	00000000 
0005a8ee l       .debug_str	00000000 
0000cb84 l       .debug_str	00000000 
0000de37 l       .debug_str	00000000 
000583b6 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
0000c7d4 l       .debug_str	00000000 
00007a6e l       .debug_str	00000000 
00007a74 l       .debug_str	00000000 
00007a9d l       .debug_str	00000000 
00007aab l       .debug_str	00000000 
00007ab8 l       .debug_str	00000000 
00007acb l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00007ae4 l       .debug_str	00000000 
000022cc l       .debug_str	00000000 
0000247a l       .debug_str	00000000 
00007af9 l       .debug_str	00000000 
00007b75 l       .debug_str	00000000 
00007b0c l       .debug_str	00000000 
00007b4e l       .debug_str	00000000 
00007b63 l       .debug_str	00000000 
0005d37d l       .debug_str	00000000 
00007388 l       .debug_str	00000000 
00048c0a l       .debug_str	00000000 
00007b80 l       .debug_str	00000000 
00007b8a l       .debug_str	00000000 
00007bbc l       .debug_str	00000000 
00007bd0 l       .debug_str	00000000 
00007be5 l       .debug_str	00000000 
0000bd7e l       .debug_str	00000000 
0000bf87 l       .debug_str	00000000 
00007bec l       .debug_str	00000000 
00007bf7 l       .debug_str	00000000 
00007c7b l       .debug_str	00000000 
00007ca9 l       .debug_str	00000000 
00007d2f l       .debug_str	00000000 
000407b9 l       .debug_str	00000000 
00007d57 l       .debug_str	00000000 
00007d68 l       .debug_str	00000000 
00007df2 l       .debug_str	00000000 
00007e10 l       .debug_str	00000000 
00007e9e l       .debug_str	00000000 
00007ec5 l       .debug_str	00000000 
00007f54 l       .debug_str	00000000 
00007f9c l       .debug_str	00000000 
00007fcb l       .debug_str	00000000 
00008013 l       .debug_str	00000000 
00008032 l       .debug_str	00000000 
0000807a l       .debug_str	00000000 
0000808a l       .debug_str	00000000 
000080d2 l       .debug_str	00000000 
000080e3 l       .debug_str	00000000 
0000812b l       .debug_str	00000000 
00008133 l       .debug_str	00000000 
0000817b l       .debug_str	00000000 
00008185 l       .debug_str	00000000 
000081cd l       .debug_str	00000000 
000081e7 l       .debug_str	00000000 
0000822f l       .debug_str	00000000 
00008248 l       .debug_str	00000000 
00008290 l       .debug_str	00000000 
000082a3 l       .debug_str	00000000 
000082eb l       .debug_str	00000000 
000082f4 l       .debug_str	00000000 
000035fc l       .debug_str	00000000 
0000833c l       .debug_str	00000000 
00008386 l       .debug_str	00000000 
000083d1 l       .debug_str	00000000 
0000840f l       .debug_str	00000000 
00008440 l       .debug_str	00000000 
000063a4 l       .debug_str	00000000 
00002482 l       .debug_str	00000000 
0000847e l       .debug_str	00000000 
000084a7 l       .debug_str	00000000 
000084b2 l       .debug_str	00000000 
000084d7 l       .debug_str	00000000 
00008536 l       .debug_str	00000000 
000319ea l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
0000859d l       .debug_str	00000000 
000085c7 l       .debug_str	00000000 
000085ef l       .debug_str	00000000 
00008627 l       .debug_str	00000000 
00008658 l       .debug_str	00000000 
00008662 l       .debug_str	00000000 
000086bf l       .debug_str	00000000 
00002e4a l       .debug_str	00000000 
000086f1 l       .debug_str	00000000 
00008717 l       .debug_str	00000000 
00008739 l       .debug_str	00000000 
0000875f l       .debug_str	00000000 
00008781 l       .debug_str	00000000 
000087aa l       .debug_str	00000000 
000087cf l       .debug_str	00000000 
00008817 l       .debug_str	00000000 
00008824 l       .debug_str	00000000 
0000882d l       .debug_str	00000000 
000088b7 l       .debug_str	00000000 
00001bed l       .debug_str	00000000 
000088d4 l       .debug_str	00000000 
00008960 l       .debug_str	00000000 
0000897d l       .debug_str	00000000 
0000899d l       .debug_str	00000000 
00003ac5 l       .debug_str	00000000 
000089a4 l       .debug_str	00000000 
000089df l       .debug_str	00000000 
00008a11 l       .debug_str	00000000 
00008a22 l       .debug_str	00000000 
00008a5d l       .debug_str	00000000 
00008aa3 l       .debug_str	00000000 
00003bfb l       .debug_str	00000000 
00008ad3 l       .debug_str	00000000 
00008b03 l       .debug_str	00000000 
00008b21 l       .debug_str	00000000 
00008b51 l       .debug_str	00000000 
00008b64 l       .debug_str	00000000 
00008b94 l       .debug_str	00000000 
00008ba9 l       .debug_str	00000000 
00008bd9 l       .debug_str	00000000 
00008bf5 l       .debug_str	00000000 
00008c25 l       .debug_str	00000000 
00008c43 l       .debug_str	00000000 
00008c73 l       .debug_str	00000000 
00008c8e l       .debug_str	00000000 
00008cbe l       .debug_str	00000000 
00008ce2 l       .debug_str	00000000 
00008d12 l       .debug_str	00000000 
00008d4c l       .debug_str	00000000 
00008d7c l       .debug_str	00000000 
00008da1 l       .debug_str	00000000 
00008dd1 l       .debug_str	00000000 
00008dfb l       .debug_str	00000000 
00008e31 l       .debug_str	00000000 
00008e62 l       .debug_str	00000000 
00008e9c l       .debug_str	00000000 
00008ed1 l       .debug_str	00000000 
00008f0d l       .debug_str	00000000 
00008f33 l       .debug_str	00000000 
00008f55 l       .debug_str	00000000 
00008f7c l       .debug_str	00000000 
00008f9f l       .debug_str	00000000 
000092b0 l       .debug_str	00000000 
00008fed l       .debug_str	00000000 
00009320 l       .debug_str	00000000 
0000903e l       .debug_str	00000000 
0000908f l       .debug_str	00000000 
0000909c l       .debug_str	00000000 
000090ee l       .debug_str	00000000 
000090fc l       .debug_str	00000000 
00009147 l       .debug_str	00000000 
00009159 l       .debug_str	00000000 
000091a4 l       .debug_str	00000000 
000091b8 l       .debug_str	00000000 
000091fb l       .debug_str	00000000 
00009208 l       .debug_str	00000000 
00006c03 l       .debug_str	00000000 
0000924b l       .debug_str	00000000 
000092a7 l       .debug_str	00000000 
000092b8 l       .debug_str	00000000 
00009317 l       .debug_str	00000000 
0000932b l       .debug_str	00000000 
0000937d l       .debug_str	00000000 
000093cf l       .debug_str	00000000 
000093d9 l       .debug_str	00000000 
0000942e l       .debug_str	00000000 
00009483 l       .debug_str	00000000 
000094d9 l       .debug_str	00000000 
0000952f l       .debug_str	00000000 
0000953b l       .debug_str	00000000 
00009577 l       .debug_str	00000000 
00003a15 l       .debug_str	00000000 
000095b5 l       .debug_str	00000000 
000095f0 l       .debug_str	00000000 
00007267 l       .debug_str	00000000 
000095fb l       .debug_str	00000000 
00009642 l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
00009658 l       .debug_str	00000000 
000096e9 l       .debug_str	00000000 
000096ff l       .debug_str	00000000 
00009744 l       .debug_str	00000000 
0000975e l       .debug_str	00000000 
000097c1 l       .debug_str	00000000 
000097e1 l       .debug_str	00000000 
00009820 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00009881 l       .debug_str	00000000 
000098c0 l       .debug_str	00000000 
0000c9a6 l       .debug_str	00000000 
000098e7 l       .debug_str	00000000 
00009927 l       .debug_str	00000000 
0000995a l       .debug_str	00000000 
00009971 l       .debug_str	00000000 
000099b7 l       .debug_str	00000000 
000099d3 l       .debug_str	00000000 
00009a37 l       .debug_str	00000000 
00009a59 l       .debug_str	00000000 
00009a9b l       .debug_str	00000000 
00009abc l       .debug_str	00000000 
00009afe l       .debug_str	00000000 
0005af8a l       .debug_str	00000000 
00009b2e l       .debug_str	00000000 
00009b72 l       .debug_str	00000000 
00009bc7 l       .debug_str	00000000 
00009c0b l       .debug_str	00000000 
00009c61 l       .debug_str	00000000 
00009ca5 l       .debug_str	00000000 
00009d1d l       .debug_str	00000000 
00009d61 l       .debug_str	00000000 
00009da1 l       .debug_str	00000000 
00009dbc l       .debug_str	00000000 
00009dfd l       .debug_str	00000000 
00009e53 l       .debug_str	00000000 
00009e97 l       .debug_str	00000000 
00009ec4 l       .debug_str	00000000 
00009f09 l       .debug_str	00000000 
00009f51 l       .debug_str	00000000 
00009f62 l       .debug_str	00000000 
00009faa l       .debug_str	00000000 
00009fbb l       .debug_str	00000000 
00031ad0 l       .debug_str	00000000 
00009ff6 l       .debug_str	00000000 
0000a032 l       .debug_str	00000000 
0000a038 l       .debug_str	00000000 
0000a06e l       .debug_str	00000000 
0000a081 l       .debug_str	00000000 
0000a0b8 l       .debug_str	00000000 
0000a0cc l       .debug_str	00000000 
0000a10e l       .debug_str	00000000 
0000a12d l       .debug_str	00000000 
0000a172 l       .debug_str	00000000 
0000a18d l       .debug_str	00000000 
0000a1f2 l       .debug_str	00000000 
0000a259 l       .debug_str	00000000 
0000a264 l       .debug_str	00000000 
0000a2aa l       .debug_str	00000000 
0000a2f0 l       .debug_str	00000000 
0000a2fa l       .debug_str	00000000 
0000a341 l       .debug_str	00000000 
0000a34c l       .debug_str	00000000 
00014f55 l       .debug_str	00000000 
0000a393 l       .debug_str	00000000 
0000a3dc l       .debug_str	00000000 
0000a425 l       .debug_str	00000000 
0000a45e l       .debug_str	00000000 
0000a479 l       .debug_str	00000000 
0000a488 l       .debug_str	00000000 
0000a4c1 l       .debug_str	00000000 
0000a4e6 l       .debug_str	00000000 
0000a51f l       .debug_str	00000000 
0000a558 l       .debug_str	00000000 
0000a57e l       .debug_str	00000000 
0000a5b7 l       .debug_str	00000000 
0000a5f5 l       .debug_str	00000000 
0000a62f l       .debug_str	00000000 
0000a63b l       .debug_str	00000000 
0000a677 l       .debug_str	00000000 
0000a68a l       .debug_str	00000000 
0000a6c6 l       .debug_str	00000000 
0000a6df l       .debug_str	00000000 
0000a71c l       .debug_str	00000000 
0000a72d l       .debug_str	00000000 
00006cce l       .debug_str	00000000 
0000a77e l       .debug_str	00000000 
0000a7cf l       .debug_str	00000000 
0000a7d8 l       .debug_str	00000000 
0000a833 l       .debug_str	00000000 
0000a896 l       .debug_str	00000000 
0000a8b2 l       .debug_str	00000000 
0000a912 l       .debug_str	00000000 
0000a972 l       .debug_str	00000000 
0000a9d6 l       .debug_str	00000000 
0000a9f1 l       .debug_str	00000000 
0000aa55 l       .debug_str	00000000 
0000aa60 l       .debug_str	00000000 
0000aaca l       .debug_str	00000000 
0000aad9 l       .debug_str	00000000 
0000ab48 l       .debug_str	00000000 
0000ab60 l       .debug_str	00000000 
0000abd0 l       .debug_str	00000000 
0000abe9 l       .debug_str	00000000 
0000ac54 l       .debug_str	00000000 
0000ac69 l       .debug_str	00000000 
0000acd9 l       .debug_str	00000000 
0000acee l       .debug_str	00000000 
0000ad5e l       .debug_str	00000000 
0000ad70 l       .debug_str	00000000 
0000ade1 l       .debug_str	00000000 
0000adf4 l       .debug_str	00000000 
0000ae65 l       .debug_str	00000000 
0000ae7b l       .debug_str	00000000 
0000ae8d l       .debug_str	00000000 
0000aef9 l       .debug_str	00000000 
0000af0b l       .debug_str	00000000 
0000af77 l       .debug_str	00000000 
0000af86 l       .debug_str	00000000 
0000afee l       .debug_str	00000000 
0000aff8 l       .debug_str	00000000 
0000b06c l       .debug_str	00000000 
0000238c l       .debug_str	00000000 
0000b077 l       .debug_str	00000000 
0000b0ef l       .debug_str	00000000 
0000b108 l       .debug_str	00000000 
0000b180 l       .debug_str	00000000 
0000b216 l       .debug_str	00000000 
0000b232 l       .debug_str	00000000 
0000b2c8 l       .debug_str	00000000 
0000b35e l       .debug_str	00000000 
0000b3f4 l       .debug_str	00000000 
00006a21 l       .debug_str	00000000 
0000b469 l       .debug_str	00000000 
0000b4dd l       .debug_str	00000000 
0000b556 l       .debug_str	00000000 
0000b5d5 l       .debug_str	00000000 
0000b5e6 l       .debug_str	00000000 
0000b666 l       .debug_str	00000000 
0000b6c8 l       .debug_str	00000000 
0000cc6f l       .debug_str	00000000 
0000b719 l       .debug_str	00000000 
0000b73b l       .debug_str	00000000 
0000b768 l       .debug_str	00000000 
0000b797 l       .debug_str	00000000 
0000b7b9 l       .debug_str	00000000 
0000b7e0 l       .debug_str	00000000 
0000b809 l       .debug_str	00000000 
0000b83b l       .debug_str	00000000 
00001be1 l       .debug_str	00000000 
0000b88b l       .debug_str	00000000 
0000b8d1 l       .debug_str	00000000 
0000b8e4 l       .debug_str	00000000 
0000b938 l       .debug_str	00000000 
0000b9aa l       .debug_str	00000000 
0000ba1c l       .debug_str	00000000 
0000ba8e l       .debug_str	00000000 
0000badd l       .debug_str	00000000 
0000bb0b l       .debug_str	00000000 
0000bb16 l       .debug_str	00000000 
0000bb70 l       .debug_str	00000000 
0000bbe8 l       .debug_str	00000000 
0000bc60 l       .debug_str	00000000 
0000bcb5 l       .debug_str	00000000 
0000bcea l       .debug_str	00000000 
00005efb l       .debug_str	00000000 
0000bd15 l       .debug_str	00000000 
0003d63b l       .debug_str	00000000 
0000bd44 l       .debug_str	00000000 
0000bd74 l       .debug_str	00000000 
0000bd8c l       .debug_str	00000000 
0000bdbd l       .debug_str	00000000 
0000bdef l       .debug_str	00000000 
0000be2e l       .debug_str	00000000 
0000be41 l       .debug_str	00000000 
0000be79 l       .debug_str	00000000 
0000be85 l       .debug_str	00000000 
0000beb5 l       .debug_str	00000000 
0000bee6 l       .debug_str	00000000 
0000beec l       .debug_str	00000000 
0000bf19 l       .debug_str	00000000 
0000bf4a l       .debug_str	00000000 
0000bf7d l       .debug_str	00000000 
0000bf97 l       .debug_str	00000000 
0000bfcb l       .debug_str	00000000 
0000bffe l       .debug_str	00000000 
00057915 l       .debug_str	00000000 
0000c04b l       .debug_str	00000000 
0000c094 l       .debug_str	00000000 
000578f8 l       .debug_str	00000000 
0000c0df l       .debug_str	00000000 
0000c107 l       .debug_str	00000000 
0000c14d l       .debug_str	00000000 
0000c153 l       .debug_str	00000000 
0000c181 l       .debug_str	00000000 
0000c19d l       .debug_str	00000000 
0000c1ca l       .debug_str	00000000 
0000c1da l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
0000c28b l       .debug_str	00000000 
0000c2ae l       .debug_str	00000000 
0000c2dd l       .debug_str	00000000 
0000c2ef l       .debug_str	00000000 
0000c322 l       .debug_str	00000000 
0000c338 l       .debug_str	00000000 
0000c385 l       .debug_str	00000000 
0000c3d8 l       .debug_str	00000000 
0000c40b l       .debug_str	00000000 
0000c41b l       .debug_str	00000000 
0000c471 l       .debug_str	00000000 
0000c4cb l       .debug_str	00000000 
0000c519 l       .debug_str	00000000 
0000c56b l       .debug_str	00000000 
0000c5c0 l       .debug_str	00000000 
0000c610 l       .debug_str	00000000 
0000c664 l       .debug_str	00000000 
0000c6bb l       .debug_str	00000000 
0000c711 l       .debug_str	00000000 
0000c768 l       .debug_str	00000000 
0000c7b4 l       .debug_str	00000000 
0000c7fc l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0000c831 l       .debug_str	00000000 
0000c85d l       .debug_str	00000000 
0000c879 l       .debug_str	00000000 
0000c886 l       .debug_str	00000000 
0000c894 l       .debug_str	00000000 
0000c899 l       .debug_str	00000000 
0000c8a0 l       .debug_str	00000000 
0000c8b7 l       .debug_str	00000000 
0000c8cd l       .debug_str	00000000 
00005cfd l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0000c8dd l       .debug_str	00000000 
00058b61 l       .debug_str	00000000 
0000c900 l       .debug_str	00000000 
00058907 l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
00005d09 l       .debug_str	00000000 
0000c921 l       .debug_str	00000000 
00005d0c l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
0000c928 l       .debug_str	00000000 
0000c97b l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
0000727d l       .debug_str	00000000 
0000c9a1 l       .debug_str	00000000 
00005d7c l       .debug_str	00000000 
0000c9b5 l       .debug_str	00000000 
0000c9c9 l       .debug_str	00000000 
0000c9d2 l       .debug_str	00000000 
0000c9dd l       .debug_str	00000000 
0000c9ef l       .debug_str	00000000 
0000ca03 l       .debug_str	00000000 
0000ca14 l       .debug_str	00000000 
0000ca2e l       .debug_str	00000000 
0000ca5e l       .debug_str	00000000 
0000ca79 l       .debug_str	00000000 
0000d93c l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00007281 l       .debug_str	00000000 
000072bb l       .debug_str	00000000 
000072f4 l       .debug_str	00000000 
00007303 l       .debug_str	00000000 
00007346 l       .debug_str	00000000 
00059e32 l       .debug_str	00000000 
000367bd l       .debug_str	00000000 
0005b857 l       .debug_str	00000000 
0000ca99 l       .debug_str	00000000 
0000cab8 l       .debug_str	00000000 
0005dd87 l       .debug_str	00000000 
0000cadb l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
0000cae1 l       .debug_str	00000000 
0000cb02 l       .debug_str	00000000 
00015969 l       .debug_str	00000000 
0000cb0a l       .debug_str	00000000 
00059739 l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
0000725a l       .debug_str	00000000 
0005a1a8 l       .debug_str	00000000 
00005eef l       .debug_str	00000000 
00005f03 l       .debug_str	00000000 
0000cc9c l       .debug_str	00000000 
00005f0c l       .debug_str	00000000 
00005f17 l       .debug_str	00000000 
0000cb12 l       .debug_str	00000000 
0000cb1b l       .debug_str	00000000 
0000cb3a l       .debug_str	00000000 
0000cb44 l       .debug_str	00000000 
0000cb4f l       .debug_str	00000000 
000583e5 l       .debug_str	00000000 
0000cb59 l       .debug_str	00000000 
0000cb78 l       .debug_str	00000000 
0000cb8a l       .debug_str	00000000 
00003ab6 l       .debug_str	00000000 
00002244 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0005f498 l       .debug_str	00000000 
0005a053 l       .debug_str	00000000 
00035157 l       .debug_str	00000000 
0000cbfc l       .debug_str	00000000 
0000774b l       .debug_str	00000000 
0000cc0e l       .debug_str	00000000 
0005dd4e l       .debug_str	00000000 
0000cc22 l       .debug_str	00000000 
0000cc38 l       .debug_str	00000000 
0000cc48 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
0000cc5a l       .debug_str	00000000 
0000cc54 l       .debug_str	00000000 
0000cc69 l       .debug_str	00000000 
0000cc80 l       .debug_str	00000000 
0000cc7f l       .debug_str	00000000 
0000cc98 l       .debug_str	00000000 
0000cca3 l       .debug_str	00000000 
00005f22 l       .debug_str	00000000 
00005f2d l       .debug_str	00000000 
0000ccaf l       .debug_str	00000000 
0000ccba l       .debug_str	00000000 
0000ccc5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000074f9 l       .debug_str	00000000 
0000754b l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0005785d l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00007592 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00007599 l       .debug_str	00000000 
0000898e l       .debug_str	00000000 
0000ca19 l       .debug_str	00000000 
00005d81 l       .debug_str	00000000 
000075a2 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
0000c14e l       .debug_str	00000000 
000075a9 l       .debug_str	00000000 
000075cc l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
000075d2 l       .debug_str	00000000 
000075d7 l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
000075de l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000caa6 l       .debug_str	00000000 
0000caf6 l       .debug_str	00000000 
000075e3 l       .debug_str	00000000 
00007605 l       .debug_str	00000000 
0000761a l       .debug_str	00000000 
0000764c l       .debug_str	00000000 
0000765c l       .debug_str	00000000 
00007689 l       .debug_str	00000000 
0000769a l       .debug_str	00000000 
000076c8 l       .debug_str	00000000 
000076da l       .debug_str	00000000 
0000c9bf l       .debug_str	00000000 
0000cc4d l       .debug_str	00000000 
00007709 l       .debug_str	00000000 
0000770d l       .debug_str	00000000 
0000c9d7 l       .debug_str	00000000 
0000d384 l       .debug_str	00000000 
0002144a l       .debug_str	00000000 
00001ba6 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
00032129 l       .debug_str	00000000 
00001bab l       .debug_str	00000000 
0000ca0e l       .debug_str	00000000 
00007734 l       .debug_str	00000000 
0000c9fa l       .debug_str	00000000 
0000c9f4 l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
0000ca63 l       .debug_str	00000000 
0000ca42 l       .debug_str	00000000 
0000ca33 l       .debug_str	00000000 
0000ca8d l       .debug_str	00000000 
0000ca7e l       .debug_str	00000000 
0000773b l       .debug_str	00000000 
00007744 l       .debug_str	00000000 
00058564 l       .debug_str	00000000 
00057831 l       .debug_str	00000000 
0000c9e8 l       .debug_str	00000000 
0000c9e2 l       .debug_str	00000000 
0000ca08 l       .debug_str	00000000 
0000c9ce l       .debug_str	00000000 
0005c4e8 l       .debug_str	00000000 
000334dc l       .debug_str	00000000 
0000348c l       .debug_str	00000000 
00003491 l       .debug_str	00000000 
00003497 l       .debug_str	00000000 
00003702 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
000317dc l       .debug_str	00000000 
0005ca30 l       .debug_str	00000000 
00007750 l       .debug_str	00000000 
0000775a l       .debug_str	00000000 
00007762 l       .debug_str	00000000 
0000ec7e l     F .text	0000002a _ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E
0000ec54 l     F .text	0000002a _ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE
0000eb7a l     F .text	0000009c _ZN3log13RecordBuilder3new17haca8312579858419E
0000ec16 l     F .text	00000022 _ZN3log13RecordBuilder4args17h0d0d49873389eda9E
0000eca8 l     F .text	00000010 _ZN3log13RecordBuilder4line17h44de9f431bb34307E
0000ecb8 l     F .text	00000010 _ZN3log13RecordBuilder5build17h83529556a009112eE
0000ec38 l     F .text	0000000c _ZN3log13RecordBuilder5level17h0f95d7860f854eb5E
0000ec44 l     F .text	00000010 _ZN3log13RecordBuilder6target17hd1b0e0684e399993E
0000ee6c l     F .text	00000012 _ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E
0000ecd2 l     F .text	00000028 _ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E
0000ecfa l     F .text	00000010 _ZN3log15MetadataBuilder5build17h2478972692162fc0E
200009fc l     O .bss	00000004 _ZN3log5STATE17hc9404a0f5c97cef6E
200000e8 l     O .data	00000008 _ZN3log6LOGGER17hc33d4d9c061fc628E
0000eb70 l     F .text	0000000a _ZN3log6Record7builder17hde62ab0132265febE
0001ee80 l     O .text	00000000 _ZN3log6logger3NOP17h5a3de47970f20990E
0000ecc8 l     F .text	0000000a _ZN3log8Metadata7builder17ha56bd59835d60a3cE
0000eb66 l     F .text	0000000a _ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E
0000e900 l     F .text	00000038 _ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E
0000e938 l     F .text	00000016 _ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE
0000e94e l     F .text	00000008 _ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE
0000e95e l     F .text	00000028 _ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E
0000ea04 l     F .text	0000000a _ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E
0000ee92 l     F .text	000000aa _ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E
0000ef3c l     F .text	0000003a _ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E
0000ee7e l     F .text	00000014 _ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE
0000eaca l     F .text	00000012 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E
00000000 l    df *ABS*	00000000 16zjnp1vbo7kc1gp
00000c82 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
0000ca63 l       .debug_str	00000000 
0000ce21 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0000f264 l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005dc16 l       .debug_str	00000000 
0000cce7 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0005ebea l       .debug_str	00000000 
0000ccf4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
000211e4 l       .debug_str	00000000 
0000ccfc l       .debug_str	00000000 
0000cfa2 l       .debug_str	00000000 
0000cd04 l       .debug_str	00000000 
0000cd89 l       .debug_str	00000000 
0000cd9f l       .debug_str	00000000 
0005aa5f l       .debug_str	00000000 
0000cdc6 l       .debug_str	00000000 
0003d63b l       .debug_str	00000000 
0000cdee l       .debug_str	00000000 
0000ce1c l       .debug_str	00000000 
0000ce26 l       .debug_str	00000000 
0000ce51 l       .debug_str	00000000 
0000ce58 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
0000ce80 l       .debug_str	00000000 
0005efab l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
0000cead l       .debug_str	00000000 
0000ced9 l       .debug_str	00000000 
0000cee1 l       .debug_str	00000000 
0000cf11 l       .debug_str	00000000 
0000cf1c l       .debug_str	00000000 
0000cf49 l       .debug_str	00000000 
0000cf52 l       .debug_str	00000000 
0000cf88 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0000cf99 l       .debug_str	00000000 
0000ce20 l       .debug_str	00000000 
0005797e l       .debug_str	00000000 
0000138b l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000cfb7 l       .debug_str	00000000 
0000cfa8 l       .debug_str	00000000 
00001394 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
0000cfa7 l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
000013ae l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2d0u1dup22f6p5uq
00000d12 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
0000cfc3 l       .debug_str	00000000 
00002e4a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2q7rzzztqsy7quqz
0000e6eb l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
0000ebdc l       .debug_str	00000000 
0000ec1c l       .debug_str	00000000 
0000ec6a l       .debug_str	00000000 
0000ecaa l       .debug_str	00000000 
0000ecd1 l       .debug_str	00000000 
0000ed11 l       .debug_str	00000000 
0000ed1f l       .debug_str	00000000 
0000ed8e l       .debug_str	00000000 
0000edb9 l       .debug_str	00000000 
0000ade1 l       .debug_str	00000000 
0000ee29 l       .debug_str	00000000 
0000ee99 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0000eec5 l       .debug_str	00000000 
0000eee3 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00003ab6 l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
0000eed4 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00058924 l       .debug_str	00000000 
0000eb3a l       .debug_str	00000000 
0000cff5 l       .debug_str	00000000 
0000d343 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
00040335 l       .debug_str	00000000 
0000cffe l       .debug_str	00000000 
0000d00a l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
0000d012 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000d06c l       .debug_str	00000000 
0000d0ce l       .debug_str	00000000 
0000d0d9 l       .debug_str	00000000 
0000d120 l       .debug_str	00000000 
0000d16f l       .debug_str	00000000 
0000d179 l       .debug_str	00000000 
0000d1b6 l       .debug_str	00000000 
0000d1fb l       .debug_str	00000000 
0000d204 l       .debug_str	00000000 
0000d214 l       .debug_str	00000000 
0000d21c l       .debug_str	00000000 
0000d271 l       .debug_str	00000000 
0000d2ce l       .debug_str	00000000 
0000d2da l       .debug_str	00000000 
0000d2e3 l       .debug_str	00000000 
0000d2ef l       .debug_str	00000000 
0000d2fb l       .debug_str	00000000 
0000d304 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0000d30c l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000d314 l       .debug_str	00000000 
0000d342 l       .debug_str	00000000 
0000d329 l       .debug_str	00000000 
0000d349 l       .debug_str	00000000 
0000d350 l       .debug_str	00000000 
0000d358 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d1f2 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00057c37 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d2d4 l       .debug_str	00000000 
0005e02d l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010d81 l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
0000d362 l       .debug_str	00000000 
0004d2da l       .debug_str	00000000 
0000d379 l       .debug_str	00000000 
0000d381 l       .debug_str	00000000 
0000d38a l       .debug_str	00000000 
0000e78e l       .debug_str	00000000 
0000d393 l       .debug_str	00000000 
00016188 l       .debug_str	00000000 
0005dce0 l       .debug_str	00000000 
0000d39b l       .debug_str	00000000 
0000d3a7 l       .debug_str	00000000 
0000d3b2 l       .debug_str	00000000 
0000d3ba l       .debug_str	00000000 
0001558a l       .debug_str	00000000 
00015d8c l       .debug_str	00000000 
0000d3c2 l       .debug_str	00000000 
0000d4be l       .debug_str	00000000 
0000d5c2 l       .debug_str	00000000 
0000d5d0 l       .debug_str	00000000 
0000d5db l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000d608 l       .debug_str	00000000 
0000d5e5 l       .debug_str	00000000 
0000d613 l       .debug_str	00000000 
0000d68e l       .debug_str	00000000 
0000d711 l       .debug_str	00000000 
0000d71f l       .debug_str	00000000 
0000d77e l       .debug_str	00000000 
0000d7e5 l       .debug_str	00000000 
0000d7fb l       .debug_str	00000000 
0000d80b l       .debug_str	00000000 
0005c516 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
0000d81a l       .debug_str	00000000 
00018800 l       .debug_str	00000000 
0000d820 l       .debug_str	00000000 
0000d826 l       .debug_str	00000000 
0000d82c l       .debug_str	00000000 
0000d838 l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
0000d840 l       .debug_str	00000000 
0000d848 l       .debug_str	00000000 
0000d84e l       .debug_str	00000000 
0000d894 l       .debug_str	00000000 
0000d871 l       .debug_str	00000000 
0000d8a4 l       .debug_str	00000000 
0000d8e4 l       .debug_str	00000000 
0005c0a3 l       .debug_str	00000000 
0000d92c l       .debug_str	00000000 
0000d932 l       .debug_str	00000000 
0000d938 l       .debug_str	00000000 
0000d961 l       .debug_str	00000000 
0000d93e l       .debug_str	00000000 
0000d973 l       .debug_str	00000000 
0000d9b5 l       .debug_str	00000000 
0005bf8c l       .debug_str	00000000 
0000d9ff l       .debug_str	00000000 
0000da05 l       .debug_str	00000000 
0000da0b l       .debug_str	00000000 
0000da34 l       .debug_str	00000000 
0000da11 l       .debug_str	00000000 
0000da46 l       .debug_str	00000000 
0000da88 l       .debug_str	00000000 
0005b450 l       .debug_str	00000000 
0000dad2 l       .debug_str	00000000 
0000dad8 l       .debug_str	00000000 
0000dade l       .debug_str	00000000 
0000dae4 l       .debug_str	00000000 
0000db0d l       .debug_str	00000000 
0000daea l       .debug_str	00000000 
0000db1e l       .debug_str	00000000 
0000db5f l       .debug_str	00000000 
0000dba8 l       .debug_str	00000000 
0000dbad l       .debug_str	00000000 
0005c2da l       .debug_str	00000000 
0000dbb2 l       .debug_str	00000000 
0000dbb8 l       .debug_str	00000000 
0000dbbe l       .debug_str	00000000 
0000dbe7 l       .debug_str	00000000 
0000dbc4 l       .debug_str	00000000 
0000dbf8 l       .debug_str	00000000 
0000dc39 l       .debug_str	00000000 
0005b508 l       .debug_str	00000000 
0000dc82 l       .debug_str	00000000 
0000dcae l       .debug_str	00000000 
0000dc8b l       .debug_str	00000000 
0000dcbf l       .debug_str	00000000 
0000dd00 l       .debug_str	00000000 
0000dd49 l       .debug_str	00000000 
0005c4ae l       .debug_str	00000000 
0000dd4e l       .debug_str	00000000 
0000dd57 l       .debug_str	00000000 
0000dd5e l       .debug_str	00000000 
0000dd89 l       .debug_str	00000000 
0000dd66 l       .debug_str	00000000 
0000dd9b l       .debug_str	00000000 
0000dddd l       .debug_str	00000000 
0005c176 l       .debug_str	00000000 
0000de27 l       .debug_str	00000000 
0000de2d l       .debug_str	00000000 
0000de33 l       .debug_str	00000000 
0000de39 l       .debug_str	00000000 
0000de3f l       .debug_str	00000000 
0000de47 l       .debug_str	00000000 
0000de55 l       .debug_str	00000000 
0000de64 l       .debug_str	00000000 
0000de75 l       .debug_str	00000000 
0000de80 l       .debug_str	00000000 
0000de8b l       .debug_str	00000000 
0000de96 l       .debug_str	00000000 
0000de9d l       .debug_str	00000000 
0000dee3 l       .debug_str	00000000 
0000dec0 l       .debug_str	00000000 
0000def5 l       .debug_str	00000000 
0000df37 l       .debug_str	00000000 
0005b60b l       .debug_str	00000000 
0000df81 l       .debug_str	00000000 
0000dfae l       .debug_str	00000000 
0000df8b l       .debug_str	00000000 
0000dfc0 l       .debug_str	00000000 
0000e002 l       .debug_str	00000000 
0000e04c l       .debug_str	00000000 
0000e051 l       .debug_str	00000000 
0000e07e l       .debug_str	00000000 
0000e05b l       .debug_str	00000000 
0000e090 l       .debug_str	00000000 
0000e0d2 l       .debug_str	00000000 
0000e11c l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
0000e19b l       .debug_str	00000000 
0000e130 l       .debug_str	00000000 
0000e140 l       .debug_str	00000000 
0000e149 l       .debug_str	00000000 
0000e154 l       .debug_str	00000000 
0000e163 l       .debug_str	00000000 
0000e178 l       .debug_str	00000000 
0000e1a9 l       .debug_str	00000000 
0000e246 l       .debug_str	00000000 
0000e2eb l       .debug_str	00000000 
0000e2f6 l       .debug_str	00000000 
0000e2ff l       .debug_str	00000000 
0000e343 l       .debug_str	00000000 
0000e320 l       .debug_str	00000000 
0000e356 l       .debug_str	00000000 
0000e3d9 l       .debug_str	00000000 
0000e464 l       .debug_str	00000000 
0000e480 l       .debug_str	00000000 
0000e4cc l       .debug_str	00000000 
0000e520 l       .debug_str	00000000 
0000e53d l       .debug_str	00000000 
0000e551 l       .debug_str	00000000 
0000e59d l       .debug_str	00000000 
0000e5f1 l       .debug_str	00000000 
0000e607 l       .debug_str	00000000 
0000e61b l       .debug_str	00000000 
0000e662 l       .debug_str	00000000 
0000e6b1 l       .debug_str	00000000 
0000e6dd l       .debug_str	00000000 
0000e6ba l       .debug_str	00000000 
0000e6f1 l       .debug_str	00000000 
0000e6f9 l       .debug_str	00000000 
0000e700 l       .debug_str	00000000 
0000f387 l       .debug_str	00000000 
0000e708 l       .debug_str	00000000 
0000e710 l       .debug_str	00000000 
00031c5c l       .debug_str	00000000 
0000e71f l       .debug_str	00000000 
0000f3b9 l       .debug_str	00000000 
0000e72a l       .debug_str	00000000 
0000e735 l       .debug_str	00000000 
0000e746 l       .debug_str	00000000 
0000e74c l       .debug_str	00000000 
0000e754 l       .debug_str	00000000 
0000e75b l       .debug_str	00000000 
0000e765 l       .debug_str	00000000 
0000e76d l       .debug_str	00000000 
0000e775 l       .debug_str	00000000 
0000e797 l       .debug_str	00000000 
0000e7a2 l       .debug_str	00000000 
0000e7ae l       .debug_str	00000000 
0000e7b6 l       .debug_str	00000000 
0000e7bf l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
0000e7ca l       .debug_str	00000000 
0000e7d5 l       .debug_str	00000000 
0000e7e0 l       .debug_str	00000000 
00000f66 l       .debug_str	00000000 
0005b57c l       .debug_str	00000000 
000015b2 l       .debug_str	00000000 
00000f70 l       .debug_str	00000000 
00000fa8 l       .debug_str	00000000 
00000fe8 l       .debug_str	00000000 
00001020 l       .debug_str	00000000 
00001028 l       .debug_str	00000000 
000015cb l       .debug_str	00000000 
0000e7f0 l       .debug_str	00000000 
0000e800 l       .debug_str	00000000 
0000e80f l       .debug_str	00000000 
0000e817 l       .debug_str	00000000 
0000e81e l       .debug_str	00000000 
0000e826 l       .debug_str	00000000 
0000e867 l       .debug_str	00000000 
0000e844 l       .debug_str	00000000 
0000e877 l       .debug_str	00000000 
0000e88c l       .debug_str	00000000 
0000e895 l       .debug_str	00000000 
0000e8f2 l       .debug_str	00000000 
0000e957 l       .debug_str	00000000 
0000e961 l       .debug_str	00000000 
0000e971 l       .debug_str	00000000 
0000e986 l       .debug_str	00000000 
0000e98e l       .debug_str	00000000 
0000e9f2 l       .debug_str	00000000 
0000ea5e l       .debug_str	00000000 
0000ea65 l       .debug_str	00000000 
0000ea6d l       .debug_str	00000000 
0000eaae l       .debug_str	00000000 
0000ea8b l       .debug_str	00000000 
0000eabe l       .debug_str	00000000 
0000ead3 l       .debug_str	00000000 
0000eae6 l       .debug_str	00000000 
0000eafb l       .debug_str	00000000 
0000eb02 l       .debug_str	00000000 
0000eb17 l       .debug_str	00000000 
0000eb41 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000eb90 l       .debug_str	00000000 
0000ebcf l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2vuqh37eag1b6y30
0000f0a9 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0000f264 l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
0000f01e l       .debug_str	00000000 
0000f081 l       .debug_str	00000000 
0000f127 l       .debug_str	00000000 
00006fc8 l       .debug_str	00000000 
0000f1b7 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0000f23e l       .debug_str	00000000 
0000f24d l       .debug_str	00000000 
000583e5 l       .debug_str	00000000 
0000f26f l       .debug_str	00000000 
000073a5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0000e34f l       .debug_str	00000000 
0000247a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000eee7 l       .debug_str	00000000 
0000ef71 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00001680 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0000ef7f l       .debug_str	00000000 
0000f014 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ca8d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2xneats2au1n52xr
0000f2ca l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
000022cc l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000f279 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3l5pa7f4r4pjxp5p
0000ffb1 l       .debug_str	00000000 
0000ffde l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
0000ffe9 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000fff9 l       .debug_str	00000000 
0001002d l       .debug_str	00000000 
00010014 l       .debug_str	00000000 
00010035 l       .debug_str	00000000 
0001004b l       .debug_str	00000000 
000100b3 l       .debug_str	00000000 
0001012b l       .debug_str	00000000 
00010158 l       .debug_str	00000000 
00010170 l       .debug_str	00000000 
000101da l       .debug_str	00000000 
000101e2 l       .debug_str	00000000 
000101e8 l       .debug_str	00000000 
000101f2 l       .debug_str	00000000 
0001026c l       .debug_str	00000000 
000102d8 l       .debug_str	00000000 
00010351 l       .debug_str	00000000 
000103ca l       .debug_str	00000000 
00010435 l       .debug_str	00000000 
000104a4 l       .debug_str	00000000 
000104ab l       .debug_str	00000000 
000104b6 l       .debug_str	00000000 
000104de l       .debug_str	00000000 
00010553 l       .debug_str	00000000 
000105d0 l       .debug_str	00000000 
000104cf l       .debug_str	00000000 
000105dc l       .debug_str	00000000 
0000d362 l       .debug_str	00000000 
00010653 l       .debug_str	00000000 
0000d350 l       .debug_str	00000000 
0004d2da l       .debug_str	00000000 
0000d379 l       .debug_str	00000000 
0000d381 l       .debug_str	00000000 
0000d38a l       .debug_str	00000000 
0000e78e l       .debug_str	00000000 
000106bc l       .debug_str	00000000 
0001073a l       .debug_str	00000000 
000107aa l       .debug_str	00000000 
00010824 l       .debug_str	00000000 
0001083e l       .debug_str	00000000 
000108aa l       .debug_str	00000000 
000108b3 l       .debug_str	00000000 
000108bf l       .debug_str	00000000 
00010935 l       .debug_str	00000000 
000109ab l       .debug_str	00000000 
00010a21 l       .debug_str	00000000 
00010a89 l       .debug_str	00000000 
00000968 l       .debug_str	00000000 
00010af8 l       .debug_str	00000000 
00000a4f l       .debug_str	00000000 
00010b65 l       .debug_str	00000000 
00010bda l       .debug_str	00000000 
00010bef l       .debug_str	00000000 
00010c56 l       .debug_str	00000000 
00010c5f l       .debug_str	00000000 
00010c6a l       .debug_str	00000000 
00010c71 l       .debug_str	00000000 
000598e7 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
00010ca6 l       .debug_str	00000000 
00059320 l       .debug_str	00000000 
00010ce0 l       .debug_str	00000000 
00010d28 l       .debug_str	00000000 
000591c7 l       .debug_str	00000000 
0005e65e l       .debug_str	00000000 
00010d5b l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
00010d68 l       .debug_str	00000000 
000013ae l       .debug_str	00000000 
0005ebea l       .debug_str	00000000 
0000ccf4 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
000211e4 l       .debug_str	00000000 
0000ccfc l       .debug_str	00000000 
0000cfa2 l       .debug_str	00000000 
0000cf99 l       .debug_str	00000000 
00010d89 l       .debug_str	00000000 
00010d8e l       .debug_str	00000000 
00010d93 l       .debug_str	00000000 
00010d98 l       .debug_str	00000000 
00010d9d l       .debug_str	00000000 
00010da2 l       .debug_str	00000000 
00010dad l       .debug_str	00000000 
00010db8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
00040335 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000f2ec l       .debug_str	00000000 
0001eed8 l       .debug_str	00000000 
0000f360 l       .debug_str	00000000 
0000e6f9 l       .debug_str	00000000 
00016188 l       .debug_str	00000000 
0000e700 l       .debug_str	00000000 
0000f387 l       .debug_str	00000000 
0000f36c l       .debug_str	00000000 
0000f392 l       .debug_str	00000000 
0000e710 l       .debug_str	00000000 
00031c5c l       .debug_str	00000000 
0000e71f l       .debug_str	00000000 
0000f3b9 l       .debug_str	00000000 
0000f39e l       .debug_str	00000000 
0000f3c5 l       .debug_str	00000000 
0000f3d0 l       .debug_str	00000000 
0000f3db l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
0000f495 l       .debug_str	00000000 
0000f3ec l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000f473 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000f47a l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
0000f4a9 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000f506 l       .debug_str	00000000 
0000f56b l       .debug_str	00000000 
0000f573 l       .debug_str	00000000 
0000f595 l       .debug_str	00000000 
0000f57c l       .debug_str	00000000 
0000f5ad l       .debug_str	00000000 
0000f5d3 l       .debug_str	00000000 
0000f64b l       .debug_str	00000000 
00000f66 l       .debug_str	00000000 
0005b57c l       .debug_str	00000000 
00000f70 l       .debug_str	00000000 
00000fa8 l       .debug_str	00000000 
00000fe8 l       .debug_str	00000000 
00001020 l       .debug_str	00000000 
000015cb l       .debug_str	00000000 
000015b2 l       .debug_str	00000000 
00001028 l       .debug_str	00000000 
0000f6c2 l       .debug_str	00000000 
0000f72b l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000015ad l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
0000f7a3 l       .debug_str	00000000 
000013b3 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d1f2 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00057c37 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d2d4 l       .debug_str	00000000 
0005e02d l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010d81 l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
0000159b l       .debug_str	00000000 
000015a4 l       .debug_str	00000000 
00001605 l       .debug_str	00000000 
0000f80d l       .debug_str	00000000 
0000f886 l       .debug_str	00000000 
0005e65c l       .debug_str	00000000 
000015ec l       .debug_str	00000000 
0000f88b l       .debug_str	00000000 
00000aa4 l       .debug_str	00000000 
0000f8b1 l       .debug_str	00000000 
0000f898 l       .debug_str	00000000 
0000f893 l       .debug_str	00000000 
0000f8bc l       .debug_str	00000000 
0000f8d5 l       .debug_str	00000000 
0000f940 l       .debug_str	00000000 
00000896 l       .debug_str	00000000 
00000ad4 l       .debug_str	00000000 
0000f9b0 l       .debug_str	00000000 
0000f9c0 l       .debug_str	00000000 
0000fa38 l       .debug_str	00000000 
00058e77 l       .debug_str	00000000 
00058bd1 l       .debug_str	00000000 
0000fa42 l       .debug_str	00000000 
0000fa49 l       .debug_str	00000000 
0000fa6c l       .debug_str	00000000 
0000fa53 l       .debug_str	00000000 
0000fa4e l       .debug_str	00000000 
0000fa76 l       .debug_str	00000000 
0000fa8e l       .debug_str	00000000 
0000faf8 l       .debug_str	00000000 
0000cffe l       .debug_str	00000000 
0000d00a l       .debug_str	00000000 
0000d012 l       .debug_str	00000000 
0000d06c l       .debug_str	00000000 
0000d0ce l       .debug_str	00000000 
0000d0d9 l       .debug_str	00000000 
0000d120 l       .debug_str	00000000 
0000d16f l       .debug_str	00000000 
0000d179 l       .debug_str	00000000 
0000d1b6 l       .debug_str	00000000 
0000d1fb l       .debug_str	00000000 
0000d204 l       .debug_str	00000000 
0000d214 l       .debug_str	00000000 
0000d21c l       .debug_str	00000000 
0000d271 l       .debug_str	00000000 
0000d2ce l       .debug_str	00000000 
0000d2da l       .debug_str	00000000 
0000d2e3 l       .debug_str	00000000 
0000d2ef l       .debug_str	00000000 
0000d2fb l       .debug_str	00000000 
0000d304 l       .debug_str	00000000 
0000d30c l       .debug_str	00000000 
0000d342 l       .debug_str	00000000 
0000d329 l       .debug_str	00000000 
0000d314 l       .debug_str	00000000 
0000fb6d l       .debug_str	00000000 
0000fbd4 l       .debug_str	00000000 
0000fc4f l       .debug_str	00000000 
0000fc5f l       .debug_str	00000000 
0000fc68 l       .debug_str	00000000 
0000fc76 l       .debug_str	00000000 
0000fc84 l       .debug_str	00000000 
0000fc90 l       .debug_str	00000000 
0000fe9e l       .debug_str	00000000 
0000fc9c l       .debug_str	00000000 
0000fcab l       .debug_str	00000000 
0000fcb3 l       .debug_str	00000000 
0000fccc l       .debug_str	00000000 
0000d358 l       .debug_str	00000000 
0000fcdd l       .debug_str	00000000 
0000fce5 l       .debug_str	00000000 
0000fd18 l       .debug_str	00000000 
0000fcff l       .debug_str	00000000 
0000fd24 l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0000fd56 l       .debug_str	00000000 
0000fd3d l       .debug_str	00000000 
0000fd61 l       .debug_str	00000000 
0000fd83 l       .debug_str	00000000 
0000fd6a l       .debug_str	00000000 
0000fd90 l       .debug_str	00000000 
0000fdab l       .debug_str	00000000 
0000fe18 l       .debug_str	00000000 
0000fe95 l       .debug_str	00000000 
0000fe9d l       .debug_str	00000000 
00010149 l       .debug_str	00000000 
00010130 l       .debug_str	00000000 
0000fea7 l       .debug_str	00000000 
0000fec4 l       .debug_str	00000000 
0000ff33 l       .debug_str	00000000 
0000ffa9 l       .debug_str	00000000 
0000ffba l       .debug_str	00000000 
0000ffc8 l       .debug_str	00000000 
0000ffcf l       .debug_str	00000000 
0000ffd6 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 413mqmtb04w1hzsl
00013753 l       .debug_str	00000000 
00014747 l       .debug_str	00000000 
00014795 l       .debug_str	00000000 
00014800 l       .debug_str	00000000 
0002f298 l       .debug_str	00000000 
00023b8c l       .debug_str	00000000 
0001486a l       .debug_str	00000000 
0001489a l       .debug_str	00000000 
000148fd l       .debug_str	00000000 
0001492d l       .debug_str	00000000 
00014958 l       .debug_str	00000000 
00014b5e l       .debug_str	00000000 
00014b68 l       .debug_str	00000000 
00014bc1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00010dbd l       .debug_str	00000000 
00018bb4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005de78 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00010dc6 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00010dd4 l       .debug_str	00000000 
00010ddc l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00010de4 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
0000ffe9 l       .debug_str	00000000 
00010e00 l       .debug_str	00000000 
00010e45 l       .debug_str	00000000 
00010eb3 l       .debug_str	00000000 
00010f4a l       .debug_str	00000000 
0001100a l       .debug_str	00000000 
000110f3 l       .debug_str	00000000 
00011205 l       .debug_str	00000000 
00011340 l       .debug_str	00000000 
000114a4 l       .debug_str	00000000 
00011631 l       .debug_str	00000000 
000117e7 l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
000119d3 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000119d9 l       .debug_str	00000000 
000119dc l       .debug_str	00000000 
00011a05 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
00011a6b l       .debug_str	00000000 
00011abb l       .debug_str	00000000 
00011b18 l       .debug_str	00000000 
00011b6c l       .debug_str	00000000 
00011be3 l       .debug_str	00000000 
00011c67 l       .debug_str	00000000 
00011ce2 l       .debug_str	00000000 
00011d80 l       .debug_str	00000000 
00011e2b l       .debug_str	00000000 
00011ecd l       .debug_str	00000000 
00011f92 l       .debug_str	00000000 
00012064 l       .debug_str	00000000 
0001212d l       .debug_str	00000000 
00012219 l       .debug_str	00000000 
00012312 l       .debug_str	00000000 
00012402 l       .debug_str	00000000 
00012515 l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
0001274c l       .debug_str	00000000 
00012886 l       .debug_str	00000000 
000129cd l       .debug_str	00000000 
00012b0b l       .debug_str	00000000 
00012c6c l       .debug_str	00000000 
00012dda l       .debug_str	00000000 
00012f3f l       .debug_str	00000000 
000130c7 l       .debug_str	00000000 
0001325c l       .debug_str	00000000 
000133e8 l       .debug_str	00000000 
00013597 l       .debug_str	00000000 
00013906 l       .debug_str	00000000 
00013adc l       .debug_str	00000000 
00013cbf l       .debug_str	00000000 
00013e99 l       .debug_str	00000000 
00014094 l       .debug_str	00000000 
000142ac l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0002f30c l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00023986 l       .debug_str	00000000 
000144c3 l       .debug_str	00000000 
000144f3 l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00014b63 l       .debug_str	00000000 
00014703 l       .debug_str	00000000 
00014733 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n7qec2sa6vjglqv
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
0000ca63 l       .debug_str	00000000 
000583b6 l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
00002dc0 l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
00014fd0 l       .debug_str	00000000 
00014fd9 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00014be2 l       .debug_str	00000000 
000154d5 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00001680 l       .debug_str	00000000 
00014c19 l       .debug_str	00000000 
00014c6c l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
00014c80 l       .debug_str	00000000 
00014cc6 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000cfb7 l       .debug_str	00000000 
00014cd4 l       .debug_str	00000000 
00014d1b l       .debug_str	00000000 
00014d24 l       .debug_str	00000000 
00014d6d l       .debug_str	00000000 
00010da2 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0000f26f l       .debug_str	00000000 
00014d79 l       .debug_str	00000000 
00014df5 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0000f23e l       .debug_str	00000000 
00014e1f l       .debug_str	00000000 
00014e9b l       .debug_str	00000000 
00014eca l       .debug_str	00000000 
00014f50 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00007802 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
000334b6 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00007813 l       .debug_str	00000000 
0001679c l       .debug_str	00000000 
00014f5e l       .debug_str	00000000 
00014fc0 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
0000138b l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
00001394 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
00014fc8 l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
000013ae l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4oqy1cznfkuv6rc
0005ad42 l       .debug_str	00000000 
000151ec l       .debug_str	00000000 
000578f8 l       .debug_str	00000000 
0000eee3 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
0005f370 l       .debug_str	00000000 
0005f36f l       .debug_str	00000000 
0005ebea l       .debug_str	00000000 
0000ccf4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
000211e4 l       .debug_str	00000000 
0000ccfc l       .debug_str	00000000 
0000cfa2 l       .debug_str	00000000 
0000cf99 l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00018800 l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00014fe0 l       .debug_str	00000000 
0005781b l       .debug_str	00000000 
00014fe4 l       .debug_str	00000000 
00015015 l       .debug_str	00000000 
0001501b l       .debug_str	00000000 
0001505c l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00015071 l       .debug_str	00000000 
000150a8 l       .debug_str	00000000 
000150b3 l       .debug_str	00000000 
0005de78 l       .debug_str	00000000 
000150e5 l       .debug_str	00000000 
0005795f l       .debug_str	00000000 
00015119 l       .debug_str	00000000 
0005794e l       .debug_str	00000000 
0001514d l       .debug_str	00000000 
00057906 l       .debug_str	00000000 
00015184 l       .debug_str	00000000 
00057998 l       .debug_str	00000000 
000151bc l       .debug_str	00000000 
000577c9 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4qlpitlm4hs8kdcv
0000f3b9 l       .debug_str	00000000 
00015526 l       .debug_str	00000000 
0001554d l       .debug_str	00000000 
00015558 l       .debug_str	00000000 
0001557f l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0001558a l       .debug_str	00000000 
00015589 l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00058907 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
0000d93c l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00010da2 l       .debug_str	00000000 
0005b857 l       .debug_str	00000000 
00058b61 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001521d l       .debug_str	00000000 
000062e2 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00015246 l       .debug_str	00000000 
00015258 l       .debug_str	00000000 
00015269 l       .debug_str	00000000 
000152b5 l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
000152c1 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058924 l       .debug_str	00000000 
0000eb3a l       .debug_str	00000000 
0000cff5 l       .debug_str	00000000 
0000d343 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
00040335 l       .debug_str	00000000 
0000cffe l       .debug_str	00000000 
0000d00a l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
0000d012 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000d06c l       .debug_str	00000000 
0000d0ce l       .debug_str	00000000 
0000d0d9 l       .debug_str	00000000 
0000d120 l       .debug_str	00000000 
0000d16f l       .debug_str	00000000 
0000d179 l       .debug_str	00000000 
0000d1b6 l       .debug_str	00000000 
0000d1fb l       .debug_str	00000000 
0000d204 l       .debug_str	00000000 
0000d214 l       .debug_str	00000000 
0000d21c l       .debug_str	00000000 
0000d271 l       .debug_str	00000000 
0000d2ce l       .debug_str	00000000 
0000d2da l       .debug_str	00000000 
0000d2e3 l       .debug_str	00000000 
0000d2ef l       .debug_str	00000000 
0000d2fb l       .debug_str	00000000 
0000d304 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0000d30c l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000d314 l       .debug_str	00000000 
0000d342 l       .debug_str	00000000 
0000d329 l       .debug_str	00000000 
0000d349 l       .debug_str	00000000 
0000d350 l       .debug_str	00000000 
0000d358 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d1f2 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00057c37 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d2d4 l       .debug_str	00000000 
0005e02d l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010d81 l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
0000d362 l       .debug_str	00000000 
0004d2da l       .debug_str	00000000 
0000d379 l       .debug_str	00000000 
0000d381 l       .debug_str	00000000 
0000d38a l       .debug_str	00000000 
0000e78e l       .debug_str	00000000 
0000d393 l       .debug_str	00000000 
00016188 l       .debug_str	00000000 
0005dce0 l       .debug_str	00000000 
0000d39b l       .debug_str	00000000 
0000d3a7 l       .debug_str	00000000 
0000d3b2 l       .debug_str	00000000 
0000d3ba l       .debug_str	00000000 
000152c5 l       .debug_str	00000000 
00015d8c l       .debug_str	00000000 
0000d3c2 l       .debug_str	00000000 
0000d4be l       .debug_str	00000000 
0000d5c2 l       .debug_str	00000000 
0000d5d0 l       .debug_str	00000000 
0000d5db l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000d608 l       .debug_str	00000000 
0000d5e5 l       .debug_str	00000000 
0000d613 l       .debug_str	00000000 
0000d68e l       .debug_str	00000000 
0000d711 l       .debug_str	00000000 
0000d71f l       .debug_str	00000000 
0000d77e l       .debug_str	00000000 
0000d7e5 l       .debug_str	00000000 
0000d7fb l       .debug_str	00000000 
0000d80b l       .debug_str	00000000 
0005c516 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
0000d81a l       .debug_str	00000000 
00018800 l       .debug_str	00000000 
0000d820 l       .debug_str	00000000 
0000d826 l       .debug_str	00000000 
0000d82c l       .debug_str	00000000 
0000d838 l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
0000d840 l       .debug_str	00000000 
0000d848 l       .debug_str	00000000 
0000d84e l       .debug_str	00000000 
0000d894 l       .debug_str	00000000 
0000d871 l       .debug_str	00000000 
0000d8a4 l       .debug_str	00000000 
0000d8e4 l       .debug_str	00000000 
0005c0a3 l       .debug_str	00000000 
0000d92c l       .debug_str	00000000 
0000d932 l       .debug_str	00000000 
0000d938 l       .debug_str	00000000 
0000d961 l       .debug_str	00000000 
0000d93e l       .debug_str	00000000 
0000d973 l       .debug_str	00000000 
0000d9b5 l       .debug_str	00000000 
0005bf8c l       .debug_str	00000000 
0000d9ff l       .debug_str	00000000 
0000da05 l       .debug_str	00000000 
0000da0b l       .debug_str	00000000 
0000da34 l       .debug_str	00000000 
0000da11 l       .debug_str	00000000 
0000da46 l       .debug_str	00000000 
0000da88 l       .debug_str	00000000 
0005b450 l       .debug_str	00000000 
0000dad2 l       .debug_str	00000000 
0000dad8 l       .debug_str	00000000 
0000dade l       .debug_str	00000000 
0000dae4 l       .debug_str	00000000 
0000db0d l       .debug_str	00000000 
0000daea l       .debug_str	00000000 
0000db1e l       .debug_str	00000000 
0000db5f l       .debug_str	00000000 
0000dba8 l       .debug_str	00000000 
0000dbad l       .debug_str	00000000 
0005c2da l       .debug_str	00000000 
0000dbb2 l       .debug_str	00000000 
0000dbb8 l       .debug_str	00000000 
0000dbbe l       .debug_str	00000000 
0000dbe7 l       .debug_str	00000000 
0000dbc4 l       .debug_str	00000000 
0000dbf8 l       .debug_str	00000000 
0000dc39 l       .debug_str	00000000 
0005b508 l       .debug_str	00000000 
0000dc82 l       .debug_str	00000000 
0000dcae l       .debug_str	00000000 
0000dc8b l       .debug_str	00000000 
0000dcbf l       .debug_str	00000000 
0000dd00 l       .debug_str	00000000 
0000dd49 l       .debug_str	00000000 
0005c4ae l       .debug_str	00000000 
0000dd4e l       .debug_str	00000000 
0000dd57 l       .debug_str	00000000 
0000dd5e l       .debug_str	00000000 
0000dd89 l       .debug_str	00000000 
0000dd66 l       .debug_str	00000000 
0000dd9b l       .debug_str	00000000 
0000dddd l       .debug_str	00000000 
0005c176 l       .debug_str	00000000 
0000de27 l       .debug_str	00000000 
0000de2d l       .debug_str	00000000 
0000de33 l       .debug_str	00000000 
0000de39 l       .debug_str	00000000 
0000de3f l       .debug_str	00000000 
0000de47 l       .debug_str	00000000 
0000de55 l       .debug_str	00000000 
0000de64 l       .debug_str	00000000 
0000de75 l       .debug_str	00000000 
0000de80 l       .debug_str	00000000 
0000de8b l       .debug_str	00000000 
0000de96 l       .debug_str	00000000 
0000de9d l       .debug_str	00000000 
0000dee3 l       .debug_str	00000000 
0000dec0 l       .debug_str	00000000 
0000def5 l       .debug_str	00000000 
0000df37 l       .debug_str	00000000 
0005b60b l       .debug_str	00000000 
0000df81 l       .debug_str	00000000 
0000dfae l       .debug_str	00000000 
0000df8b l       .debug_str	00000000 
0000dfc0 l       .debug_str	00000000 
0000e002 l       .debug_str	00000000 
0000e04c l       .debug_str	00000000 
0000e051 l       .debug_str	00000000 
0000e07e l       .debug_str	00000000 
0000e05b l       .debug_str	00000000 
0000e090 l       .debug_str	00000000 
0000e0d2 l       .debug_str	00000000 
0000e11c l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
0000e19b l       .debug_str	00000000 
0000e130 l       .debug_str	00000000 
0000e140 l       .debug_str	00000000 
0000e149 l       .debug_str	00000000 
0000e154 l       .debug_str	00000000 
0000e163 l       .debug_str	00000000 
0000e178 l       .debug_str	00000000 
0000e1a9 l       .debug_str	00000000 
0000e246 l       .debug_str	00000000 
0000e2eb l       .debug_str	00000000 
0000e2f6 l       .debug_str	00000000 
0000e2ff l       .debug_str	00000000 
0000e343 l       .debug_str	00000000 
0000e320 l       .debug_str	00000000 
0000e356 l       .debug_str	00000000 
0000e3d9 l       .debug_str	00000000 
0000e464 l       .debug_str	00000000 
0000e480 l       .debug_str	00000000 
0000e4cc l       .debug_str	00000000 
0000e520 l       .debug_str	00000000 
0000e53d l       .debug_str	00000000 
0000e551 l       .debug_str	00000000 
0000e59d l       .debug_str	00000000 
0000e5f1 l       .debug_str	00000000 
0000e607 l       .debug_str	00000000 
0000e61b l       .debug_str	00000000 
0000e662 l       .debug_str	00000000 
0000e6b1 l       .debug_str	00000000 
0000e6dd l       .debug_str	00000000 
0000e6ba l       .debug_str	00000000 
0000e6eb l       .debug_str	00000000 
0000e6f1 l       .debug_str	00000000 
0000e6f9 l       .debug_str	00000000 
0000e700 l       .debug_str	00000000 
0000f387 l       .debug_str	00000000 
0000e708 l       .debug_str	00000000 
0000e710 l       .debug_str	00000000 
00031c5c l       .debug_str	00000000 
0000e71f l       .debug_str	00000000 
0000e72a l       .debug_str	00000000 
0000e735 l       .debug_str	00000000 
0000e746 l       .debug_str	00000000 
0000e74c l       .debug_str	00000000 
0000e754 l       .debug_str	00000000 
0000e75b l       .debug_str	00000000 
0000e765 l       .debug_str	00000000 
0000e76d l       .debug_str	00000000 
0000e775 l       .debug_str	00000000 
0000e797 l       .debug_str	00000000 
0000e7a2 l       .debug_str	00000000 
0000e7ae l       .debug_str	00000000 
0000e7b6 l       .debug_str	00000000 
0000e7bf l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
0000e7ca l       .debug_str	00000000 
0000e7d5 l       .debug_str	00000000 
0000e7e0 l       .debug_str	00000000 
00000f66 l       .debug_str	00000000 
0005b57c l       .debug_str	00000000 
000015b2 l       .debug_str	00000000 
00000f70 l       .debug_str	00000000 
00000fa8 l       .debug_str	00000000 
00000fe8 l       .debug_str	00000000 
00001020 l       .debug_str	00000000 
00001028 l       .debug_str	00000000 
000015cb l       .debug_str	00000000 
0000e7f0 l       .debug_str	00000000 
0000e800 l       .debug_str	00000000 
0000e80f l       .debug_str	00000000 
0000e817 l       .debug_str	00000000 
0000e81e l       .debug_str	00000000 
0000e826 l       .debug_str	00000000 
0000e867 l       .debug_str	00000000 
0000e844 l       .debug_str	00000000 
0000e877 l       .debug_str	00000000 
0000e88c l       .debug_str	00000000 
0000e895 l       .debug_str	00000000 
0000e8f2 l       .debug_str	00000000 
0000e957 l       .debug_str	00000000 
0000e961 l       .debug_str	00000000 
0000e971 l       .debug_str	00000000 
0000e986 l       .debug_str	00000000 
0000e98e l       .debug_str	00000000 
0000e9f2 l       .debug_str	00000000 
0000ea5e l       .debug_str	00000000 
0000ea65 l       .debug_str	00000000 
0000ea6d l       .debug_str	00000000 
0000eaae l       .debug_str	00000000 
0000ea8b l       .debug_str	00000000 
0000eabe l       .debug_str	00000000 
0000ead3 l       .debug_str	00000000 
0000eae6 l       .debug_str	00000000 
0000eafb l       .debug_str	00000000 
0000eb02 l       .debug_str	00000000 
0000eb17 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00018a52 l       .debug_str	00000000 
00058684 l       .debug_str	00000000 
000152d2 l       .debug_str	00000000 
0001538a l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
000153ee l       .debug_str	00000000 
00015424 l       .debug_str	00000000 
0001543d l       .debug_str	00000000 
00015477 l       .debug_str	00000000 
00015494 l       .debug_str	00000000 
000154cf l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
000154ec l       .debug_str	00000000 
000154f6 l       .debug_str	00000000 
0001551c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4z8krxbvbr97ayck
0005d3b0 l       .debug_str	00000000 
00015606 l       .debug_str	00000000 
00015642 l       .debug_str	00000000 
0000ce51 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
000079fc l       .debug_str	00000000 
00007a3d l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 53x3bckk5lzipnpa
00000c52 l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
0000ca63 l       .debug_str	00000000 
000159a9 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
000159af l       .debug_str	00000000 
000159c6 l       .debug_str	00000000 
0005b6ef l       .debug_str	00000000 
000595e1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000e33 l       .debug_str	00000000 
00015681 l       .debug_str	00000000 
0000e75e l       .debug_str	00000000 
00015956 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00058744 l       .debug_str	00000000 
000159c1 l       .debug_str	00000000 
000159d8 l       .debug_str	00000000 
00015689 l       .debug_str	00000000 
0003d63b l       .debug_str	00000000 
000156b4 l       .debug_str	00000000 
0005dd87 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
000156e0 l       .debug_str	00000000 
0005f083 l       .debug_str	00000000 
00015751 l       .debug_str	00000000 
0001577d l       .debug_str	00000000 
000157aa l       .debug_str	00000000 
00015816 l       .debug_str	00000000 
0001581e l       .debug_str	00000000 
0001588b l       .debug_str	00000000 
00015894 l       .debug_str	00000000 
000158c1 l       .debug_str	00000000 
0001593b l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00015944 l       .debug_str	00000000 
0001599c l       .debug_str	00000000 
00058924 l       .debug_str	00000000 
0001595a l       .debug_str	00000000 
00015964 l       .debug_str	00000000 
0001596f l       .debug_str	00000000 
00015979 l       .debug_str	00000000 
00015998 l       .debug_str	00000000 
00015982 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
0000138b l       .debug_str	00000000 
00005d6d l       .debug_str	00000000 
00001394 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
000013a3 l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
000013ae l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001f160 l     O .text	00000021 str.0
00000000 l    df *ABS*	00000000 54b6z89c74d8bdz1
0000e708 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
00005eef l       .debug_str	00000000 
00005f03 l       .debug_str	00000000 
0000cc9c l       .debug_str	00000000 
00005f0c l       .debug_str	00000000 
00005f17 l       .debug_str	00000000 
0000cb12 l       .debug_str	00000000 
00015d7d l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
0000cb3a l       .debug_str	00000000 
00007388 l       .debug_str	00000000 
0000cb44 l       .debug_str	00000000 
00015589 l       .debug_str	00000000 
0000cb4f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00014b63 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
0000cfb7 l       .debug_str	00000000 
000159de l       .debug_str	00000000 
00015a26 l       .debug_str	00000000 
00002dc0 l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00015a45 l       .debug_str	00000000 
00015a80 l       .debug_str	00000000 
00015aa5 l       .debug_str	00000000 
00015acc l       .debug_str	00000000 
00015b2c l       .debug_str	00000000 
00015b35 l       .debug_str	00000000 
00015ba0 l       .debug_str	00000000 
00015bb0 l       .debug_str	00000000 
00015c1c l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058924 l       .debug_str	00000000 
0000eb3a l       .debug_str	00000000 
0000cff5 l       .debug_str	00000000 
0000d343 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
00040335 l       .debug_str	00000000 
0000cffe l       .debug_str	00000000 
0000d00a l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
0000d012 l       .debug_str	00000000 
0000d06c l       .debug_str	00000000 
0000d0ce l       .debug_str	00000000 
0000d0d9 l       .debug_str	00000000 
0000d120 l       .debug_str	00000000 
0000d16f l       .debug_str	00000000 
0000d179 l       .debug_str	00000000 
0000d1b6 l       .debug_str	00000000 
0000d1fb l       .debug_str	00000000 
0000d204 l       .debug_str	00000000 
0000d214 l       .debug_str	00000000 
0000d21c l       .debug_str	00000000 
0000d271 l       .debug_str	00000000 
0000d2ce l       .debug_str	00000000 
0000d2da l       .debug_str	00000000 
0000d2e3 l       .debug_str	00000000 
0000d2ef l       .debug_str	00000000 
0000d2fb l       .debug_str	00000000 
0000d304 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0000d30c l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000d314 l       .debug_str	00000000 
0000d342 l       .debug_str	00000000 
0000d329 l       .debug_str	00000000 
0000d349 l       .debug_str	00000000 
0000d350 l       .debug_str	00000000 
0000d358 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d1f2 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00057c37 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d2d4 l       .debug_str	00000000 
0005e02d l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010d81 l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
0000d362 l       .debug_str	00000000 
0004d2da l       .debug_str	00000000 
0000d379 l       .debug_str	00000000 
0000d381 l       .debug_str	00000000 
0000d38a l       .debug_str	00000000 
0000e78e l       .debug_str	00000000 
0000d393 l       .debug_str	00000000 
00016188 l       .debug_str	00000000 
0005dce0 l       .debug_str	00000000 
0000d39b l       .debug_str	00000000 
0000d3a7 l       .debug_str	00000000 
0000d3b2 l       .debug_str	00000000 
0000d3ba l       .debug_str	00000000 
00015d8c l       .debug_str	00000000 
0000d3c2 l       .debug_str	00000000 
0000d4be l       .debug_str	00000000 
0000d5c2 l       .debug_str	00000000 
0000d5d0 l       .debug_str	00000000 
0000d5db l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000d608 l       .debug_str	00000000 
0000d5e5 l       .debug_str	00000000 
0000d613 l       .debug_str	00000000 
0000d68e l       .debug_str	00000000 
0000d711 l       .debug_str	00000000 
0000d71f l       .debug_str	00000000 
0000d77e l       .debug_str	00000000 
0000d7e5 l       .debug_str	00000000 
0000d7fb l       .debug_str	00000000 
0000d80b l       .debug_str	00000000 
0005c516 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
0000d81a l       .debug_str	00000000 
00018800 l       .debug_str	00000000 
0000d820 l       .debug_str	00000000 
0000d826 l       .debug_str	00000000 
0000d82c l       .debug_str	00000000 
0000d838 l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
0000d840 l       .debug_str	00000000 
0000d848 l       .debug_str	00000000 
0000d84e l       .debug_str	00000000 
0000d894 l       .debug_str	00000000 
0000d871 l       .debug_str	00000000 
0000d8a4 l       .debug_str	00000000 
0000d8e4 l       .debug_str	00000000 
0005c0a3 l       .debug_str	00000000 
0000d92c l       .debug_str	00000000 
0000d932 l       .debug_str	00000000 
0000d938 l       .debug_str	00000000 
0000d961 l       .debug_str	00000000 
0000d93e l       .debug_str	00000000 
0000d973 l       .debug_str	00000000 
0000d9b5 l       .debug_str	00000000 
0005bf8c l       .debug_str	00000000 
0000d9ff l       .debug_str	00000000 
0000da05 l       .debug_str	00000000 
0000da0b l       .debug_str	00000000 
0000da34 l       .debug_str	00000000 
0000da11 l       .debug_str	00000000 
0000da46 l       .debug_str	00000000 
0000da88 l       .debug_str	00000000 
0005b450 l       .debug_str	00000000 
0000dad2 l       .debug_str	00000000 
0000dad8 l       .debug_str	00000000 
0000dade l       .debug_str	00000000 
0000dae4 l       .debug_str	00000000 
0000db0d l       .debug_str	00000000 
0000daea l       .debug_str	00000000 
0000db1e l       .debug_str	00000000 
0000db5f l       .debug_str	00000000 
0000dba8 l       .debug_str	00000000 
0000dbad l       .debug_str	00000000 
0005c2da l       .debug_str	00000000 
0000dbb2 l       .debug_str	00000000 
0000dbb8 l       .debug_str	00000000 
0000dbbe l       .debug_str	00000000 
0000dbe7 l       .debug_str	00000000 
0000dbc4 l       .debug_str	00000000 
0000dbf8 l       .debug_str	00000000 
0000dc39 l       .debug_str	00000000 
0005b508 l       .debug_str	00000000 
0000dc82 l       .debug_str	00000000 
0000dcae l       .debug_str	00000000 
0000dc8b l       .debug_str	00000000 
0000dcbf l       .debug_str	00000000 
0000dd00 l       .debug_str	00000000 
0000dd49 l       .debug_str	00000000 
0005c4ae l       .debug_str	00000000 
0000dd4e l       .debug_str	00000000 
0000dd57 l       .debug_str	00000000 
0000dd5e l       .debug_str	00000000 
0000dd89 l       .debug_str	00000000 
0000dd66 l       .debug_str	00000000 
0000dd9b l       .debug_str	00000000 
0000dddd l       .debug_str	00000000 
0005c176 l       .debug_str	00000000 
0000de27 l       .debug_str	00000000 
0000de2d l       .debug_str	00000000 
0000de33 l       .debug_str	00000000 
0000de39 l       .debug_str	00000000 
0000de3f l       .debug_str	00000000 
0000de47 l       .debug_str	00000000 
0000de55 l       .debug_str	00000000 
0000de64 l       .debug_str	00000000 
0000de75 l       .debug_str	00000000 
0000de80 l       .debug_str	00000000 
0000de8b l       .debug_str	00000000 
0000de96 l       .debug_str	00000000 
0000de9d l       .debug_str	00000000 
0000dee3 l       .debug_str	00000000 
0000dec0 l       .debug_str	00000000 
0000def5 l       .debug_str	00000000 
0000df37 l       .debug_str	00000000 
0005b60b l       .debug_str	00000000 
0000df81 l       .debug_str	00000000 
0000dfae l       .debug_str	00000000 
0000df8b l       .debug_str	00000000 
0000dfc0 l       .debug_str	00000000 
0000e002 l       .debug_str	00000000 
0000e04c l       .debug_str	00000000 
0000e051 l       .debug_str	00000000 
0000e07e l       .debug_str	00000000 
0000e05b l       .debug_str	00000000 
0000e090 l       .debug_str	00000000 
0000e0d2 l       .debug_str	00000000 
0000e11c l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
0000e19b l       .debug_str	00000000 
0000e130 l       .debug_str	00000000 
0000e140 l       .debug_str	00000000 
0000e149 l       .debug_str	00000000 
0000e154 l       .debug_str	00000000 
0000e163 l       .debug_str	00000000 
0000e178 l       .debug_str	00000000 
0000e1a9 l       .debug_str	00000000 
0000e246 l       .debug_str	00000000 
0000e2eb l       .debug_str	00000000 
0000e2f6 l       .debug_str	00000000 
0000e2ff l       .debug_str	00000000 
0000e343 l       .debug_str	00000000 
0000e320 l       .debug_str	00000000 
0000e356 l       .debug_str	00000000 
0000e3d9 l       .debug_str	00000000 
0000e464 l       .debug_str	00000000 
0000e480 l       .debug_str	00000000 
0000e4cc l       .debug_str	00000000 
0000e520 l       .debug_str	00000000 
0000e53d l       .debug_str	00000000 
0000e551 l       .debug_str	00000000 
0000e59d l       .debug_str	00000000 
0000e5f1 l       .debug_str	00000000 
0000e607 l       .debug_str	00000000 
0000e61b l       .debug_str	00000000 
0000e662 l       .debug_str	00000000 
0000e6b1 l       .debug_str	00000000 
0000e6dd l       .debug_str	00000000 
0000e6ba l       .debug_str	00000000 
0000e6eb l       .debug_str	00000000 
0000e6f1 l       .debug_str	00000000 
0000e6f9 l       .debug_str	00000000 
0000e700 l       .debug_str	00000000 
0000f387 l       .debug_str	00000000 
0000e710 l       .debug_str	00000000 
00031c5c l       .debug_str	00000000 
0000e71f l       .debug_str	00000000 
0000f3b9 l       .debug_str	00000000 
0000e72a l       .debug_str	00000000 
0000e735 l       .debug_str	00000000 
0000e746 l       .debug_str	00000000 
0000e74c l       .debug_str	00000000 
0000e754 l       .debug_str	00000000 
0000e75b l       .debug_str	00000000 
0000e765 l       .debug_str	00000000 
0000e76d l       .debug_str	00000000 
0000e775 l       .debug_str	00000000 
0000e797 l       .debug_str	00000000 
0000e7a2 l       .debug_str	00000000 
0000e7ae l       .debug_str	00000000 
0000e7b6 l       .debug_str	00000000 
0000e7bf l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
0000e7ca l       .debug_str	00000000 
0000e7d5 l       .debug_str	00000000 
0000e7e0 l       .debug_str	00000000 
00000f66 l       .debug_str	00000000 
0005b57c l       .debug_str	00000000 
000015b2 l       .debug_str	00000000 
00000f70 l       .debug_str	00000000 
00000fa8 l       .debug_str	00000000 
00000fe8 l       .debug_str	00000000 
00001020 l       .debug_str	00000000 
00001028 l       .debug_str	00000000 
000015cb l       .debug_str	00000000 
0000e7f0 l       .debug_str	00000000 
0000e800 l       .debug_str	00000000 
0000e80f l       .debug_str	00000000 
0000e817 l       .debug_str	00000000 
0000e81e l       .debug_str	00000000 
0000e826 l       .debug_str	00000000 
0000e867 l       .debug_str	00000000 
0000e844 l       .debug_str	00000000 
0000e877 l       .debug_str	00000000 
0000e88c l       .debug_str	00000000 
0000e895 l       .debug_str	00000000 
0000e8f2 l       .debug_str	00000000 
0000e957 l       .debug_str	00000000 
0000e961 l       .debug_str	00000000 
0000e971 l       .debug_str	00000000 
0000e986 l       .debug_str	00000000 
0000e98e l       .debug_str	00000000 
0000e9f2 l       .debug_str	00000000 
0000ea5e l       .debug_str	00000000 
0000ea65 l       .debug_str	00000000 
0000ea6d l       .debug_str	00000000 
0000eaae l       .debug_str	00000000 
0000ea8b l       .debug_str	00000000 
0000eabe l       .debug_str	00000000 
0000ead3 l       .debug_str	00000000 
0000eae6 l       .debug_str	00000000 
0000eafb l       .debug_str	00000000 
0000eb02 l       .debug_str	00000000 
0000eb17 l       .debug_str	00000000 
0001558a l       .debug_str	00000000 
00015c2f l       .debug_str	00000000 
00015c92 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00015d12 l       .debug_str	00000000 
00015d75 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0000cfa8 l       .debug_str	00000000 
0000cfa7 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 57lqf44sdwu8qayr
00000c71 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
00016099 l       .debug_str	00000000 
000160ca l       .debug_str	00000000 
00016351 l       .debug_str	00000000 
000160e4 l       .debug_str	00000000 
00016115 l       .debug_str	00000000 
00016187 l       .debug_str	00000000 
00016145 l       .debug_str	00000000 
00016176 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
000013a3 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
00014b63 l       .debug_str	00000000 
00016180 l       .debug_str	00000000 
00005cfd l       .debug_str	00000000 
00016186 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
0001618c l       .debug_str	00000000 
000161de l       .debug_str	00000000 
0000cfa7 l       .debug_str	00000000 
00016231 l       .debug_str	00000000 
0001629a l       .debug_str	00000000 
0000ca63 l       .debug_str	00000000 
000162ed l       .debug_str	00000000 
00016350 l       .debug_str	00000000 
0001637c l       .debug_str	00000000 
000163f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005dc16 l       .debug_str	00000000 
0000cce7 l       .debug_str	00000000 
0000110c l       .debug_str	00000000 
00015e10 l       .debug_str	00000000 
00016372 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00015e1f l       .debug_str	00000000 
000035ab l       .debug_str	00000000 
00015e67 l       .debug_str	00000000 
00015eaf l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00015eb7 l       .debug_str	00000000 
00015b2c l       .debug_str	00000000 
00015eff l       .debug_str	00000000 
000035fc l       .debug_str	00000000 
00016188 l       .debug_str	00000000 
00015f47 l       .debug_str	00000000 
00015f8f l       .debug_str	00000000 
00015f98 l       .debug_str	00000000 
00015fc9 l       .debug_str	00000000 
00005d6d l       .debug_str	00000000 
00015fd2 l       .debug_str	00000000 
00016003 l       .debug_str	00000000 
0000cfb7 l       .debug_str	00000000 
0000cfa8 l       .debug_str	00000000 
0001600d l       .debug_str	00000000 
0001603e l       .debug_str	00000000 
00005d81 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
0001608f l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dmg7ylzo67ab86f
00016580 l       .debug_str	00000000 
0001648d l       .debug_str	00000000 
000066dc l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
000164d6 l       .debug_str	00000000 
000164e2 l       .debug_str	00000000 
00016529 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
00016535 l       .debug_str	00000000 
000066ec l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0000727d l       .debug_str	00000000 
0005a8ee l       .debug_str	00000000 
0000de37 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00016448 l       .debug_str	00000000 
00006685 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ca8d l       .debug_str	00000000 
0000fff0 l     F .text	00000044 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E
00000000 l    df *ABS*	00000000 num_traits.eydd4btj-cgu.0
0001796c l       .debug_str	00000000 
00016b6d l       .debug_str	00000000 
00006c03 l       .debug_str	00000000 
00016bb0 l       .debug_str	00000000 
000092a7 l       .debug_str	00000000 
00016c0c l       .debug_str	00000000 
00009317 l       .debug_str	00000000 
00016c6b l       .debug_str	00000000 
000092b0 l       .debug_str	00000000 
00016cbd l       .debug_str	00000000 
00016d12 l       .debug_str	00000000 
00016d68 l       .debug_str	00000000 
00016d96 l       .debug_str	00000000 
00016da2 l       .debug_str	00000000 
00016dd4 l       .debug_str	00000000 
00016dfb l       .debug_str	00000000 
00016e2d l       .debug_str	00000000 
00016e3d l       .debug_str	00000000 
00016e72 l       .debug_str	00000000 
00016e85 l       .debug_str	00000000 
00016ebb l       .debug_str	00000000 
00016ecf l       .debug_str	00000000 
00016f19 l       .debug_str	00000000 
00016f2a l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00016f66 l       .debug_str	00000000 
00057c63 l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
00016fa4 l       .debug_str	00000000 
00016fe2 l       .debug_str	00000000 
00016fef l       .debug_str	00000000 
00016ff4 l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00017002 l       .debug_str	00000000 
0001702a l       .debug_str	00000000 
0000ce51 l       .debug_str	00000000 
00017069 l       .debug_str	00000000 
00017097 l       .debug_str	00000000 
0001709e l       .debug_str	00000000 
00017141 l       .debug_str	00000000 
0001714f l       .debug_str	00000000 
0003eb44 l       .debug_str	00000000 
000171e7 l       .debug_str	00000000 
00017281 l       .debug_str	00000000 
00001be1 l       .debug_str	00000000 
00017339 l       .debug_str	00000000 
000319ea l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0001739c l       .debug_str	00000000 
000173ad l       .debug_str	00000000 
0001741f l       .debug_str	00000000 
00017449 l       .debug_str	00000000 
00017487 l       .debug_str	00000000 
0001749a l       .debug_str	00000000 
000174e5 l       .debug_str	00000000 
00002482 l       .debug_str	00000000 
000174ee l       .debug_str	00000000 
00017530 l       .debug_str	00000000 
00018833 l       .debug_str	00000000 
0001756a l       .debug_str	00000000 
000175af l       .debug_str	00000000 
000175cb l       .debug_str	00000000 
0001760e l       .debug_str	00000000 
00017624 l       .debug_str	00000000 
00017689 l       .debug_str	00000000 
000176ee l       .debug_str	00000000 
00017729 l       .debug_str	00000000 
00017736 l       .debug_str	00000000 
00016a60 l       .debug_str	00000000 
00017769 l       .debug_str	00000000 
00014cc6 l       .debug_str	00000000 
000177af l       .debug_str	00000000 
00006bb2 l       .debug_str	00000000 
000177f5 l       .debug_str	00000000 
00014f55 l       .debug_str	00000000 
0001783c l       .debug_str	00000000 
00017885 l       .debug_str	00000000 
000178fe l       .debug_str	00000000 
0000c9d7 l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
00004f14 l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
00017908 l       .debug_str	00000000 
0001794d l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
000179a5 l       .debug_str	00000000 
00002dc0 l       .debug_str	00000000 
000179bd l       .debug_str	00000000 
000179f8 l       .debug_str	00000000 
00017a1c l       .debug_str	00000000 
00017a42 l       .debug_str	00000000 
00017a7d l       .debug_str	00000000 
00017aa0 l       .debug_str	00000000 
00017ac5 l       .debug_str	00000000 
00017b02 l       .debug_str	00000000 
00017b19 l       .debug_str	00000000 
00017b56 l       .debug_str	00000000 
00017b6d l       .debug_str	00000000 
00017bbe l       .debug_str	00000000 
00017bdc l       .debug_str	00000000 
00003e07 l       .debug_str	00000000 
00017c37 l       .debug_str	00000000 
00017c9a l       .debug_str	00000000 
00017cdc l       .debug_str	00000000 
00017d40 l       .debug_str	00000000 
00017d4a l       .debug_str	00000000 
00006f45 l       .debug_str	00000000 
00017db7 l       .debug_str	00000000 
00014fc0 l       .debug_str	00000000 
00017e19 l       .debug_str	00000000 
00017e27 l       .debug_str	00000000 
00017e92 l       .debug_str	00000000 
00017eac l       .debug_str	00000000 
00017ec2 l       .debug_str	00000000 
00017f2d l       .debug_str	00000000 
00017f3d l       .debug_str	00000000 
00017fa9 l       .debug_str	00000000 
00017fbb l       .debug_str	00000000 
00018027 l       .debug_str	00000000 
00018038 l       .debug_str	00000000 
0001809f l       .debug_str	00000000 
000180d7 l       .debug_str	00000000 
00018141 l       .debug_str	00000000 
000181c9 l       .debug_str	00000000 
0001823d l       .debug_str	00000000 
00018246 l       .debug_str	00000000 
000182c8 l       .debug_str	00000000 
000182df l       .debug_str	00000000 
0001831d l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00031c5c l       .debug_str	00000000 
000334dc l       .debug_str	00000000 
00018330 l       .debug_str	00000000 
0001833f l       .debug_str	00000000 
0001837d l       .debug_str	00000000 
00018390 l       .debug_str	00000000 
000183bc l       .debug_str	00000000 
000183c5 l       .debug_str	00000000 
000183f1 l       .debug_str	00000000 
000183fa l       .debug_str	00000000 
0001845a l       .debug_str	00000000 
0003169d l       .debug_str	00000000 
000184ab l       .debug_str	00000000 
000184fc l       .debug_str	00000000 
00018559 l       .debug_str	00000000 
000185b7 l       .debug_str	00000000 
000188a3 l       .debug_str	00000000 
00018608 l       .debug_str	00000000 
00018631 l       .debug_str	00000000 
00018694 l       .debug_str	00000000 
000186a5 l       .debug_str	00000000 
000186b2 l       .debug_str	00000000 
000186c7 l       .debug_str	00000000 
00018718 l       .debug_str	00000000 
00018741 l       .debug_str	00000000 
000187a4 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
000187c1 l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
0000727d l       .debug_str	00000000 
000187c8 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00036fd7 l       .debug_str	00000000 
00021afa l       .debug_str	00000000 
00003a15 l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
00057937 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
0005dd87 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
0000d93c l       .debug_str	00000000 
000187e9 l       .debug_str	00000000 
0000dae8 l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
0000de37 l       .debug_str	00000000 
000187ed l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
000167bd l       .debug_str	00000000 
000187ff l       .debug_str	00000000 
00018804 l       .debug_str	00000000 
00018809 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00007272 l       .debug_str	00000000 
0001882e l       .debug_str	00000000 
0001886a l       .debug_str	00000000 
0005a8ee l       .debug_str	00000000 
0003ba03 l       .debug_str	00000000 
00018880 l       .debug_str	00000000 
00018889 l       .debug_str	00000000 
00035008 l       .debug_str	00000000 
000589d3 l       .debug_str	00000000 
0004ac1a l       .debug_str	00000000 
00018892 l       .debug_str	00000000 
00018896 l       .debug_str	00000000 
000352ce l       .debug_str	00000000 
00005eef l       .debug_str	00000000 
00005f03 l       .debug_str	00000000 
0000cc9c l       .debug_str	00000000 
00005f0c l       .debug_str	00000000 
00005f17 l       .debug_str	00000000 
0000cc98 l       .debug_str	00000000 
0000cca3 l       .debug_str	00000000 
00005f22 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
000188b8 l       .debug_str	00000000 
000188b3 l       .debug_str	00000000 
00058754 l       .debug_str	00000000 
000188bc l       .debug_str	00000000 
00036da5 l       .debug_str	00000000 
000188c5 l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0003985f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00016590 l       .debug_str	00000000 
000165ea l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00016639 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00031907 l       .debug_str	00000000 
00016644 l       .debug_str	00000000 
000187da l       .debug_str	00000000 
000187cd l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
0001664c l       .debug_str	00000000 
00016659 l       .debug_str	00000000 
00016662 l       .debug_str	00000000 
00057851 l       .debug_str	00000000 
00031cd3 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0001666c l       .debug_str	00000000 
0005c4e8 l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000062a7 l       .debug_str	00000000 
00007802 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000334b6 l       .debug_str	00000000 
000062af l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
000079fc l       .debug_str	00000000 
00007a3d l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00007813 l       .debug_str	00000000 
0001679c l       .debug_str	00000000 
0001887a l       .debug_str	00000000 
0000e34f l       .debug_str	00000000 
000583b6 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000022cc l       .debug_str	00000000 
0005a97c l       .debug_str	00000000 
00002471 l       .debug_str	00000000 
00034330 l       .debug_str	00000000 
00001c9e l       .debug_str	00000000 
00058907 l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
0001884e l       .debug_str	00000000 
00007a6e l       .debug_str	00000000 
00016672 l       .debug_str	00000000 
000166b0 l       .debug_str	00000000 
00007824 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
0004455b l       .debug_str	00000000 
0005de01 l       .debug_str	00000000 
000166bf l       .debug_str	00000000 
00007864 l       .debug_str	00000000 
000166e8 l       .debug_str	00000000 
000078a2 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00007aab l       .debug_str	00000000 
0000ca8d l       .debug_str	00000000 
0001671a l       .debug_str	00000000 
0000cfb7 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00016727 l       .debug_str	00000000 
00018818 l       .debug_str	00000000 
0000247a l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
00016735 l       .debug_str	00000000 
00016777 l       .debug_str	00000000 
0001678a l       .debug_str	00000000 
0005d37d l       .debug_str	00000000 
00007388 l       .debug_str	00000000 
00048c0a l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
000579ec l       .debug_str	00000000 
000167a5 l       .debug_str	00000000 
000167a9 l       .debug_str	00000000 
000167b4 l       .debug_str	00000000 
000167c3 l       .debug_str	00000000 
0001680b l       .debug_str	00000000 
0001682b l       .debug_str	00000000 
00037af1 l       .debug_str	00000000 
00018800 l       .debug_str	00000000 
00016876 l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
000168c1 l       .debug_str	00000000 
00016932 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00016940 l       .debug_str	00000000 
0001696e l       .debug_str	00000000 
00016980 l       .debug_str	00000000 
00008817 l       .debug_str	00000000 
000169c8 l       .debug_str	00000000 
000169f8 l       .debug_str	00000000 
00016a23 l       .debug_str	00000000 
00016a5a l       .debug_str	00000000 
00016a73 l       .debug_str	00000000 
00016a7f l       .debug_str	00000000 
00009320 l       .debug_str	00000000 
00016ad0 l       .debug_str	00000000 
0000952f l       .debug_str	00000000 
00016b22 l       .debug_str	00000000 
00009147 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2tupw4qr6cy3al7x
00000c36 l       .debug_str	00000000 
0001dea7 l       .debug_str	00000000 
00001b3c l       .debug_str	00000000 
00001b49 l       .debug_str	00000000 
000327bc l       .debug_str	00000000 
0001dd48 l       .debug_str	00000000 
00018a52 l       .debug_str	00000000 
0001dc37 l       .debug_str	00000000 
0001891d l       .debug_str	00000000 
00018966 l       .debug_str	00000000 
000022c7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018906 l       .debug_str	00000000 
000034d5 l       .debug_str	00000000 
0001890b l       .debug_str	00000000 
00001adf l       .debug_str	00000000 
00001aea l       .debug_str	00000000 
00001af4 l       .debug_str	00000000 
00003538 l       .debug_str	00000000 
00001afd l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00005de6 l       .debug_str	00000000 
00001b0c l       .debug_str	00000000 
00001b19 l       .debug_str	00000000 
00001b1f l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001b2a l       .debug_str	00000000 
00001b35 l       .debug_str	00000000 
00005e31 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2zydbnxo7qpu1b5q
00018c02 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00001b19 l       .debug_str	00000000 
00001b1f l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001b2a l       .debug_str	00000000 
00001b35 l       .debug_str	00000000 
00005e31 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001dea7 l       .debug_str	00000000 
00001b3c l       .debug_str	00000000 
00001b49 l       .debug_str	00000000 
000327bc l       .debug_str	00000000 
0001dd48 l       .debug_str	00000000 
00018c0f l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
000034ac l       .debug_str	00000000 
00005f5e l       .debug_str	00000000 
00018c15 l       .debug_str	00000000 
00018a52 l       .debug_str	00000000 
00005f99 l       .debug_str	00000000 
00018c55 l       .debug_str	00000000 
00018cc4 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
00005d77 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018906 l       .debug_str	00000000 
000034d5 l       .debug_str	00000000 
000189da l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058924 l       .debug_str	00000000 
00000e33 l       .debug_str	00000000 
0001595a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00015964 l       .debug_str	00000000 
0001596f l       .debug_str	00000000 
00015979 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00015998 l       .debug_str	00000000 
000189e7 l       .debug_str	00000000 
00018a2d l       .debug_str	00000000 
00018a35 l       .debug_str	00000000 
0005b311 l       .debug_str	00000000 
00015681 l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
0000e75e l       .debug_str	00000000 
00015956 l       .debug_str	00000000 
00018a40 l       .debug_str	00000000 
00058744 l       .debug_str	00000000 
000159c1 l       .debug_str	00000000 
0005e1ec l       .debug_str	00000000 
00018a44 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00018a48 l       .debug_str	00000000 
00001610 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
0005d628 l       .debug_str	00000000 
00018a51 l       .debug_str	00000000 
0005cc80 l       .debug_str	00000000 
0001ab76 l       .debug_str	00000000 
00018a54 l       .debug_str	00000000 
00018a94 l       .debug_str	00000000 
00018aa3 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
00018aeb l       .debug_str	00000000 
00018b32 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
00018b40 l       .debug_str	00000000 
00018b84 l       .debug_str	00000000 
00018b8f l       .debug_str	00000000 
00018b98 l       .debug_str	00000000 
00018ba0 l       .debug_str	00000000 
0005a529 l       .debug_str	00000000 
000159d8 l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00018ba9 l       .debug_str	00000000 
00018baf l       .debug_str	00000000 
00018bb8 l       .debug_str	00000000 
00018bc5 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
000418b8 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00018bc8 l       .debug_str	00000000 
00018bdf l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0001d4bd l       .debug_str	00000000 
00018bf5 l       .debug_str	00000000 
00018bfb l       .debug_str	00000000 
0001890b l       .debug_str	00000000 
000034a6 l       .debug_str	00000000 
00021895 l       .debug_str	00000000 
00003538 l       .debug_str	00000000 
00001afd l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00005de6 l       .debug_str	00000000 
0005daa9 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
200000f0 l     O .data	00000008 _ZN22piet_embedded_graphics7display12SPI_SETTINGS17h78a64d1040fbeee1E
20000a1c l     O .bss	00000004 _ZN22piet_embedded_graphics7display14BACKLIGHT_HIGH17hd6bdc29c96588211E
00000000 l    df *ABS*	00000000 32m5mr5zne5f73k7
00018a51 l       .debug_str	00000000 
00018a35 l       .debug_str	00000000 
0005b311 l       .debug_str	00000000 
00018a40 l       .debug_str	00000000 
0005e1ec l       .debug_str	00000000 
00018a44 l       .debug_str	00000000 
00018a48 l       .debug_str	00000000 
00001610 l       .debug_str	00000000 
0005d628 l       .debug_str	00000000 
0001ab76 l       .debug_str	00000000 
0001ab65 l       .debug_str	00000000 
00059ccf l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
0001abb5 l       .debug_str	00000000 
0001abc1 l       .debug_str	00000000 
0001ac5d l       .debug_str	00000000 
0001ac68 l       .debug_str	00000000 
00003518 l       .debug_str	00000000 
00003526 l       .debug_str	00000000 
00005e97 l       .debug_str	00000000 
0001ac71 l       .debug_str	00000000 
0001aca6 l       .debug_str	00000000 
0001a586 l       .debug_str	00000000 
00001b43 l       .debug_str	00000000 
0001ad00 l       .debug_str	00000000 
0001adca l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
0000e34f l       .debug_str	00000000 
0000247a l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00018906 l       .debug_str	00000000 
00018ccb l       .debug_str	00000000 
00018cd1 l       .debug_str	00000000 
0001abba l       .debug_str	00000000 
0001890b l       .debug_str	00000000 
00001adf l       .debug_str	00000000 
00001aea l       .debug_str	00000000 
00001af4 l       .debug_str	00000000 
00003538 l       .debug_str	00000000 
00001afd l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00005de6 l       .debug_str	00000000 
00001b0c l       .debug_str	00000000 
00001b19 l       .debug_str	00000000 
00001b1f l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001b2a l       .debug_str	00000000 
00001b35 l       .debug_str	00000000 
00005e31 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001dea7 l       .debug_str	00000000 
00001b3c l       .debug_str	00000000 
00001b49 l       .debug_str	00000000 
000327bc l       .debug_str	00000000 
0001dd48 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00018a52 l       .debug_str	00000000 
0001dca2 l       .debug_str	00000000 
00018cd6 l       .debug_str	00000000 
00018cdd l       .debug_str	00000000 
00018ce5 l       .debug_str	00000000 
00010dbd l       .debug_str	00000000 
00018bb4 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005de78 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00010dc6 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00010dd4 l       .debug_str	00000000 
00010ddc l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00018cec l       .debug_str	00000000 
00018d09 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00018d4f l       .debug_str	00000000 
00018d60 l       .debug_str	00000000 
00018dd0 l       .debug_str	00000000 
00018e6a l       .debug_str	00000000 
00018f2d l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
000119d3 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000119d9 l       .debug_str	00000000 
000119dc l       .debug_str	00000000 
00011a05 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
0001901a l       .debug_str	00000000 
0001906a l       .debug_str	00000000 
000190c7 l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
0001911b l       .debug_str	00000000 
00019192 l       .debug_str	00000000 
00019216 l       .debug_str	00000000 
00019291 l       .debug_str	00000000 
0001932f l       .debug_str	00000000 
000193da l       .debug_str	00000000 
0001947c l       .debug_str	00000000 
00019541 l       .debug_str	00000000 
00019613 l       .debug_str	00000000 
000196dc l       .debug_str	00000000 
000197c8 l       .debug_str	00000000 
000198c1 l       .debug_str	00000000 
000199b1 l       .debug_str	00000000 
00019ac3 l       .debug_str	00000000 
00019bf2 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0002b15c l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00027002 l       .debug_str	00000000 
00019d20 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
0001abe5 l       .debug_str	00000000 
00019d2c l       .debug_str	00000000 
00019d32 l       .debug_str	00000000 
00019d3b l       .debug_str	00000000 
00019e52 l       .debug_str	00000000 
00019f65 l       .debug_str	00000000 
0001a085 l       .debug_str	00000000 
0001a19c l       .debug_str	00000000 
0001a2d5 l       .debug_str	00000000 
0001a42b l       .debug_str	00000000 
0002b294 l       .debug_str	00000000 
0002711f l       .debug_str	00000000 
0001a580 l       .debug_str	00000000 
0005af8a l       .debug_str	00000000 
0001ad24 l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
0001a58a l       .debug_str	00000000 
0001a5ed l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00000e33 l       .debug_str	00000000 
00015681 l       .debug_str	00000000 
0000e75e l       .debug_str	00000000 
00015956 l       .debug_str	00000000 
00058744 l       .debug_str	00000000 
000159c1 l       .debug_str	00000000 
0005cc80 l       .debug_str	00000000 
0001dc37 l       .debug_str	00000000 
0001a6bd l       .debug_str	00000000 
0001a700 l       .debug_str	00000000 
0001a7a5 l       .debug_str	00000000 
0001a7e3 l       .debug_str	00000000 
0001a857 l       .debug_str	00000000 
0001a897 l       .debug_str	00000000 
0001a939 l       .debug_str	00000000 
0001a9c7 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
0001ce31 l       .debug_str	00000000 
0001ce4d l       .debug_str	00000000 
0001aa38 l       .debug_str	00000000 
0001aac8 l       .debug_str	00000000 
0001d544 l       .debug_str	00000000 
0001d4e6 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
000034d5 l       .debug_str	00000000 
0001f260 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 3eyht9wxrw4fbo0o
0001b7d1 l       .debug_str	00000000 
0001b735 l       .debug_str	00000000 
0001b77b l       .debug_str	00000000 
0001b81a l       .debug_str	00000000 
0001b860 l       .debug_str	00000000 
000159d8 l       .debug_str	00000000 
00000e74 l       .debug_str	00000000 
0001b89a l       .debug_str	00000000 
0001b8e1 l       .debug_str	00000000 
0001b92f l       .debug_str	00000000 
0001b97b l       .debug_str	00000000 
0001890b l       .debug_str	00000000 
000034a6 l       .debug_str	00000000 
00018c02 l       .debug_str	00000000 
00021895 l       .debug_str	00000000 
00003538 l       .debug_str	00000000 
00001afd l       .debug_str	00000000 
00005de6 l       .debug_str	00000000 
0005daa9 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00001b19 l       .debug_str	00000000 
00001b1f l       .debug_str	00000000 
00001b2a l       .debug_str	00000000 
00001b35 l       .debug_str	00000000 
00005e31 l       .debug_str	00000000 
0001dea7 l       .debug_str	00000000 
00001b3c l       .debug_str	00000000 
00001b49 l       .debug_str	00000000 
0001dd48 l       .debug_str	00000000 
00018c0f l       .debug_str	00000000 
000034ac l       .debug_str	00000000 
00005f5e l       .debug_str	00000000 
00018c15 l       .debug_str	00000000 
00018a52 l       .debug_str	00000000 
00005f99 l       .debug_str	00000000 
00018c55 l       .debug_str	00000000 
0001b9bb l       .debug_str	00000000 
0001ba67 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0001bb39 l       .debug_str	00000000 
0001ab65 l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
0000c9ab l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
0000a47e l       .debug_str	00000000 
0001bb52 l       .debug_str	00000000 
0003ea72 l       .debug_str	00000000 
000073c7 l       .debug_str	00000000 
0003b622 l       .debug_str	00000000 
00018ce5 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
00003a15 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
00027263 l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
00001b43 l       .debug_str	00000000 
0002443b l       .debug_str	00000000 
0001bb55 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00024d56 l       .debug_str	00000000 
0001bb5c l       .debug_str	00000000 
0005b312 l       .debug_str	00000000 
00018a41 l       .debug_str	00000000 
000034d5 l       .debug_str	00000000 
0005a529 l       .debug_str	00000000 
000159c6 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
0001bb68 l       .debug_str	00000000 
0001bb74 l       .debug_str	00000000 
0001bb80 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0001671a l       .debug_str	00000000 
0005f498 l       .debug_str	00000000 
0001bb8d l       .debug_str	00000000 
0001ac68 l       .debug_str	00000000 
00003518 l       .debug_str	00000000 
00003526 l       .debug_str	00000000 
00005e97 l       .debug_str	00000000 
0001ac71 l       .debug_str	00000000 
0001abb5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018a35 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0001add3 l       .debug_str	00000000 
0001addc l       .debug_str	00000000 
0001ade6 l       .debug_str	00000000 
0001adf6 l       .debug_str	00000000 
0001bb46 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
0001ae07 l       .debug_str	00000000 
00007709 l       .debug_str	00000000 
0001ae13 l       .debug_str	00000000 
0001ae1b l       .debug_str	00000000 
0001ae21 l       .debug_str	00000000 
0001ae27 l       .debug_str	00000000 
0001ae2d l       .debug_str	00000000 
0001ae34 l       .debug_str	00000000 
0001ae3a l       .debug_str	00000000 
0001ae40 l       .debug_str	00000000 
0001ae47 l       .debug_str	00000000 
0001ae4d l       .debug_str	00000000 
0001ae55 l       .debug_str	00000000 
0001ae5c l       .debug_str	00000000 
0001ae62 l       .debug_str	00000000 
0001ae68 l       .debug_str	00000000 
0001ae6e l       .debug_str	00000000 
0001ae74 l       .debug_str	00000000 
0001ae7a l       .debug_str	00000000 
0001ae81 l       .debug_str	00000000 
0001ae88 l       .debug_str	00000000 
0001ae90 l       .debug_str	00000000 
0001ae98 l       .debug_str	00000000 
0001aea0 l       .debug_str	00000000 
0001aea7 l       .debug_str	00000000 
0001aeaf l       .debug_str	00000000 
0001aeb6 l       .debug_str	00000000 
0001aebd l       .debug_str	00000000 
0001aec4 l       .debug_str	00000000 
0001aecb l       .debug_str	00000000 
0001aed2 l       .debug_str	00000000 
0001aed9 l       .debug_str	00000000 
0001aedf l       .debug_str	00000000 
0001aee5 l       .debug_str	00000000 
0001aeeb l       .debug_str	00000000 
0001aef1 l       .debug_str	00000000 
0001aef8 l       .debug_str	00000000 
0001af00 l       .debug_str	00000000 
0001bc86 l       .debug_str	00000000 
00016639 l       .debug_str	00000000 
0005cb85 l       .debug_str	00000000 
0001af08 l       .debug_str	00000000 
0005b311 l       .debug_str	00000000 
00000e33 l       .debug_str	00000000 
00015681 l       .debug_str	00000000 
0000e75e l       .debug_str	00000000 
00015956 l       .debug_str	00000000 
00018a40 l       .debug_str	00000000 
00058744 l       .debug_str	00000000 
000159c1 l       .debug_str	00000000 
0005e1ec l       .debug_str	00000000 
00018a44 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00018a48 l       .debug_str	00000000 
00001610 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
0005d628 l       .debug_str	00000000 
00018a51 l       .debug_str	00000000 
0005cc80 l       .debug_str	00000000 
0001ab76 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001af14 l       .debug_str	00000000 
00002482 l       .debug_str	00000000 
0001af1f l       .debug_str	00000000 
0001af5b l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bd39 l       .debug_str	00000000 
0001af7a l       .debug_str	00000000 
0001afc8 l       .debug_str	00000000 
0001b009 l       .debug_str	00000000 
0001b075 l       .debug_str	00000000 
0001b0b7 l       .debug_str	00000000 
0001b123 l       .debug_str	00000000 
00010dbd l       .debug_str	00000000 
00018bb4 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005de78 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00010dc6 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00010dd4 l       .debug_str	00000000 
00010ddc l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00018cec l       .debug_str	00000000 
00018d09 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00018d4f l       .debug_str	00000000 
00018d60 l       .debug_str	00000000 
00018dd0 l       .debug_str	00000000 
00018e6a l       .debug_str	00000000 
00018f2d l       .debug_str	00000000 
00019d3b l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
000119d3 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000119d9 l       .debug_str	00000000 
000119dc l       .debug_str	00000000 
00011a05 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
0001901a l       .debug_str	00000000 
0001906a l       .debug_str	00000000 
000190c7 l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
0001911b l       .debug_str	00000000 
00019192 l       .debug_str	00000000 
00019216 l       .debug_str	00000000 
00019291 l       .debug_str	00000000 
0001932f l       .debug_str	00000000 
000193da l       .debug_str	00000000 
0001947c l       .debug_str	00000000 
00019541 l       .debug_str	00000000 
00019613 l       .debug_str	00000000 
000196dc l       .debug_str	00000000 
000197c8 l       .debug_str	00000000 
000198c1 l       .debug_str	00000000 
00019e52 l       .debug_str	00000000 
00019f65 l       .debug_str	00000000 
0001a085 l       .debug_str	00000000 
0001a19c l       .debug_str	00000000 
0001a2d5 l       .debug_str	00000000 
0001a42b l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0002b294 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002711f l       .debug_str	00000000 
000327bc l       .debug_str	00000000 
0001b18f l       .debug_str	00000000 
0001b1dd l       .debug_str	00000000 
0001b35d l       .debug_str	00000000 
0001b3ab l       .debug_str	00000000 
0001b3ec l       .debug_str	00000000 
0001b43a l       .debug_str	00000000 
0001b47b l       .debug_str	00000000 
0001b4cb l       .debug_str	00000000 
0001b64d l       .debug_str	00000000 
0001b69e l       .debug_str	00000000 
0001b6e2 l       .debug_str	00000000 
0001f3e0 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 3sr9zgbizuzi7j5h
0001af08 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bd39 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0001bc6c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018a35 l       .debug_str	00000000 
0001ae07 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00007709 l       .debug_str	00000000 
0001ae13 l       .debug_str	00000000 
0001ae1b l       .debug_str	00000000 
0001ae21 l       .debug_str	00000000 
0001ae27 l       .debug_str	00000000 
0001ae2d l       .debug_str	00000000 
0001ae34 l       .debug_str	00000000 
0001ae3a l       .debug_str	00000000 
0001ae40 l       .debug_str	00000000 
0001ae47 l       .debug_str	00000000 
0001ae4d l       .debug_str	00000000 
0001ae55 l       .debug_str	00000000 
0001ae5c l       .debug_str	00000000 
0001ae62 l       .debug_str	00000000 
0001ae68 l       .debug_str	00000000 
0001ae6e l       .debug_str	00000000 
0001ae74 l       .debug_str	00000000 
0001ae7a l       .debug_str	00000000 
0001ae81 l       .debug_str	00000000 
0001ae88 l       .debug_str	00000000 
0001ae90 l       .debug_str	00000000 
0001ae98 l       .debug_str	00000000 
0001aea0 l       .debug_str	00000000 
0001aea7 l       .debug_str	00000000 
0001aeaf l       .debug_str	00000000 
0001aeb6 l       .debug_str	00000000 
0001aebd l       .debug_str	00000000 
0001aec4 l       .debug_str	00000000 
0001aecb l       .debug_str	00000000 
0001aed2 l       .debug_str	00000000 
0001aed9 l       .debug_str	00000000 
0001aedf l       .debug_str	00000000 
0001aee5 l       .debug_str	00000000 
0001aeeb l       .debug_str	00000000 
0001aef1 l       .debug_str	00000000 
0001aef8 l       .debug_str	00000000 
0001af00 l       .debug_str	00000000 
0001bc86 l       .debug_str	00000000 
00016639 l       .debug_str	00000000 
0005cb85 l       .debug_str	00000000 
00002482 l       .debug_str	00000000 
0001bc04 l       .debug_str	00000000 
0001bc40 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 44cnu8660c26myi6
0001bcd6 l       .debug_str	00000000 
000039bb l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
0001bd14 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001bc92 l       .debug_str	00000000 
00011b66 l     F .text	0000001e _ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E
00000000 l    df *ABS*	00000000 469um0xjm96v8cgk
0001c39a l       .debug_str	00000000 
0001c9be l       .debug_str	00000000 
0001cb11 l       .debug_str	00000000 
0001cb41 l       .debug_str	00000000 
00018baf l       .debug_str	00000000 
00018bb8 l       .debug_str	00000000 
00018bc5 l       .debug_str	00000000 
000418b8 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00018bc8 l       .debug_str	00000000 
00018bdf l       .debug_str	00000000 
0001d4bd l       .debug_str	00000000 
0001d4a0 l       .debug_str	00000000 
0001cc68 l       .debug_str	00000000 
0001cc98 l       .debug_str	00000000 
0001d544 l       .debug_str	00000000 
0001d4e6 l       .debug_str	00000000 
0001ccda l       .debug_str	00000000 
0001cd0a l       .debug_str	00000000 
0001cd59 l       .debug_str	00000000 
0001cd89 l       .debug_str	00000000 
0001cd9b l       .debug_str	00000000 
0001cdcb l       .debug_str	00000000 
0001ce04 l       .debug_str	00000000 
0001ce0d l       .debug_str	00000000 
0001ce3a l       .debug_str	00000000 
0001ce7d l       .debug_str	00000000 
0001ce93 l       .debug_str	00000000 
0001cfd7 l       .debug_str	00000000 
0001d073 l       .debug_str	00000000 
0001d13d l       .debug_str	00000000 
0001d156 l       .debug_str	00000000 
0001d235 l       .debug_str	00000000 
0001d37e l       .debug_str	00000000 
0001d49b l       .debug_str	00000000 
0001d4d3 l       .debug_str	00000000 
0001d518 l       .debug_str	00000000 
0001d520 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
0000349f l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bd39 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
0001bd1a l       .debug_str	00000000 
0001bd1f l       .debug_str	00000000 
00002482 l       .debug_str	00000000 
0001bd44 l       .debug_str	00000000 
00003ac5 l       .debug_str	00000000 
0001bd4b l       .debug_str	00000000 
0001bd86 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
0001bdbd l       .debug_str	00000000 
0001bded l       .debug_str	00000000 
00018906 l       .debug_str	00000000 
00018ccb l       .debug_str	00000000 
00018cd6 l       .debug_str	00000000 
00018cdd l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00018ce5 l       .debug_str	00000000 
00010dbd l       .debug_str	00000000 
00018bb4 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005de78 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00010dc6 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00010dd4 l       .debug_str	00000000 
00010ddc l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00018cec l       .debug_str	00000000 
00018d09 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00018d4f l       .debug_str	00000000 
00018d60 l       .debug_str	00000000 
00018dd0 l       .debug_str	00000000 
00018e6a l       .debug_str	00000000 
00018f2d l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
000119d3 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000119d9 l       .debug_str	00000000 
000119dc l       .debug_str	00000000 
00011a05 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
0001901a l       .debug_str	00000000 
0001906a l       .debug_str	00000000 
000190c7 l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
0001911b l       .debug_str	00000000 
00019192 l       .debug_str	00000000 
00019216 l       .debug_str	00000000 
00019291 l       .debug_str	00000000 
0001932f l       .debug_str	00000000 
000193da l       .debug_str	00000000 
0001947c l       .debug_str	00000000 
00019541 l       .debug_str	00000000 
00019613 l       .debug_str	00000000 
000196dc l       .debug_str	00000000 
000197c8 l       .debug_str	00000000 
000198c1 l       .debug_str	00000000 
000199b1 l       .debug_str	00000000 
00019ac3 l       .debug_str	00000000 
00019bf2 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0002b15c l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00027002 l       .debug_str	00000000 
0001ce31 l       .debug_str	00000000 
0001be00 l       .debug_str	00000000 
0001be30 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
0001ce4d l       .debug_str	00000000 
0001be67 l       .debug_str	00000000 
0001be97 l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
0002144a l       .debug_str	00000000 
0001bee4 l       .debug_str	00000000 
0001bf14 l       .debug_str	00000000 
00019d3b l       .debug_str	00000000 
00019e52 l       .debug_str	00000000 
00019f65 l       .debug_str	00000000 
0001a085 l       .debug_str	00000000 
0001a19c l       .debug_str	00000000 
0001a2d5 l       .debug_str	00000000 
0001a42b l       .debug_str	00000000 
0002b294 l       .debug_str	00000000 
0002711f l       .debug_str	00000000 
0001bf34 l       .debug_str	00000000 
0001bf64 l       .debug_str	00000000 
0001abba l       .debug_str	00000000 
0001890b l       .debug_str	00000000 
00001adf l       .debug_str	00000000 
00001aea l       .debug_str	00000000 
00001af4 l       .debug_str	00000000 
00003538 l       .debug_str	00000000 
00001afd l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00005de6 l       .debug_str	00000000 
00001b0c l       .debug_str	00000000 
00001b19 l       .debug_str	00000000 
00001b1f l       .debug_str	00000000 
00001b2a l       .debug_str	00000000 
00001b35 l       .debug_str	00000000 
00005e31 l       .debug_str	00000000 
0001dea7 l       .debug_str	00000000 
00001b3c l       .debug_str	00000000 
00001b49 l       .debug_str	00000000 
000327bc l       .debug_str	00000000 
0001dd48 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00018a52 l       .debug_str	00000000 
0001dca2 l       .debug_str	00000000 
00019d20 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
0001abe5 l       .debug_str	00000000 
0001c0b2 l       .debug_str	00000000 
0001c0e2 l       .debug_str	00000000 
00018cd1 l       .debug_str	00000000 
00019d2c l       .debug_str	00000000 
00019d32 l       .debug_str	00000000 
0001a580 l       .debug_str	00000000 
0005af8a l       .debug_str	00000000 
0001ad24 l       .debug_str	00000000 
0001c188 l       .debug_str	00000000 
0001c1b8 l       .debug_str	00000000 
0001c28c l       .debug_str	00000000 
0005c7c8 l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
00024f28 l       .debug_str	00000000 
0001c292 l       .debug_str	00000000 
0001c2c2 l       .debug_str	00000000 
0001c2e5 l       .debug_str	00000000 
0001c312 l       .debug_str	00000000 
0001c333 l       .debug_str	00000000 
0001c43a l       .debug_str	00000000 
00011a6b l       .debug_str	00000000 
00011abb l       .debug_str	00000000 
00011b18 l       .debug_str	00000000 
0001c514 l       .debug_str	00000000 
0001c58b l       .debug_str	00000000 
0001c60f l       .debug_str	00000000 
0001c68a l       .debug_str	00000000 
0001c728 l       .debug_str	00000000 
0001c7d3 l       .debug_str	00000000 
0002866e l       .debug_str	00000000 
00027da5 l       .debug_str	00000000 
000280dc l       .debug_str	00000000 
0002b062 l       .debug_str	00000000 
00026cca l       .debug_str	00000000 
0001c875 l       .debug_str	00000000 
0001c8a5 l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
00027263 l       .debug_str	00000000 
0001c98e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 49htiubyezwzqodr
000584e9 l       .debug_str	00000000 
0001d54f l       .debug_str	00000000 
0001d580 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00005d77 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
0001d589 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 53kqumdi8360wwys
0001db54 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
0001ac68 l       .debug_str	00000000 
00003518 l       .debug_str	00000000 
00003526 l       .debug_str	00000000 
00005e97 l       .debug_str	00000000 
0001ac71 l       .debug_str	00000000 
0001aca6 l       .debug_str	00000000 
0001d9d0 l       .debug_str	00000000 
0001da8d l       .debug_str	00000000 
0001dac8 l       .debug_str	00000000 
0001db21 l       .debug_str	00000000 
0001dbd7 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0001dc0c l       .debug_str	00000000 
0001dc70 l       .debug_str	00000000 
00001b43 l       .debug_str	00000000 
0001dc73 l       .debug_str	00000000 
00019d26 l       .debug_str	00000000 
00004f14 l       .debug_str	00000000 
0001dce3 l       .debug_str	00000000 
00024d73 l       .debug_str	00000000 
00057b62 l       .debug_str	00000000 
0005f482 l       .debug_str	00000000 
0001dd1d l       .debug_str	00000000 
0001dd20 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00005f22 l       .debug_str	00000000 
00005d86 l       .debug_str	00000000 
00005f2d l       .debug_str	00000000 
0000ccaf l       .debug_str	00000000 
0001dd2d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001890b l       .debug_str	00000000 
00001adf l       .debug_str	00000000 
00001aea l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
00001af4 l       .debug_str	00000000 
00003538 l       .debug_str	00000000 
00001afd l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00005de6 l       .debug_str	00000000 
00001b0c l       .debug_str	00000000 
00001b19 l       .debug_str	00000000 
00001b1f l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001b2a l       .debug_str	00000000 
00001b35 l       .debug_str	00000000 
00005e31 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001dea7 l       .debug_str	00000000 
00001b3c l       .debug_str	00000000 
00001b49 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000327bc l       .debug_str	00000000 
0001dd48 l       .debug_str	00000000 
00018a52 l       .debug_str	00000000 
0001dc37 l       .debug_str	00000000 
0001d5db l       .debug_str	00000000 
0001d678 l       .debug_str	00000000 
0001d6b1 l       .debug_str	00000000 
0001d750 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
0001dca2 l       .debug_str	00000000 
0001d789 l       .debug_str	00000000 
0001d826 l       .debug_str	00000000 
0001d85a l       .debug_str	00000000 
0001d8fd l       .debug_str	00000000 
0001d99c l       .debug_str	00000000 
0001f540 l     O .text	0000001c str.0
0001f570 l     O .text	00000021 str.1
00000000 l    df *ABS*	00000000 tool5db1zbl71ep
0001dd2d l       .debug_str	00000000 
0001dd48 l       .debug_str	00000000 
0001ddec l       .debug_str	00000000 
0001de61 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00005f22 l       .debug_str	00000000 
0001de98 l       .debug_str	00000000 
00005f2d l       .debug_str	00000000 
0000ccaf l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001890b l       .debug_str	00000000 
00001b19 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00001b2a l       .debug_str	00000000 
00001b35 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00005e31 l       .debug_str	00000000 
000327bc l       .debug_str	00000000 
0001dd7d l       .debug_str	00000000 
0001dbd7 l       .debug_str	00000000 
00001b1f l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001dea7 l       .debug_str	00000000 
00001b3c l       .debug_str	00000000 
00001b49 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1vm1jsf9206jqt1a
0001ed35 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00016188 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001dfef l       .debug_str	00000000 
0001dffb l       .debug_str	00000000 
0001e0bc l       .debug_str	00000000 
00024d3b l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0001bc6c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001dedd l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018a35 l       .debug_str	00000000 
0001ae07 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00007709 l       .debug_str	00000000 
0001ae13 l       .debug_str	00000000 
0001ae1b l       .debug_str	00000000 
0001ae21 l       .debug_str	00000000 
0001ae27 l       .debug_str	00000000 
0001ae2d l       .debug_str	00000000 
0001ae34 l       .debug_str	00000000 
0001ae3a l       .debug_str	00000000 
0001ae40 l       .debug_str	00000000 
0001ae47 l       .debug_str	00000000 
0001ae4d l       .debug_str	00000000 
0001ae55 l       .debug_str	00000000 
0001ae5c l       .debug_str	00000000 
0001ae62 l       .debug_str	00000000 
0001ae68 l       .debug_str	00000000 
0001ae6e l       .debug_str	00000000 
0001ae74 l       .debug_str	00000000 
0001ae7a l       .debug_str	00000000 
0001ae81 l       .debug_str	00000000 
0001ae88 l       .debug_str	00000000 
0001ae90 l       .debug_str	00000000 
0001ae98 l       .debug_str	00000000 
0001aea0 l       .debug_str	00000000 
0001aea7 l       .debug_str	00000000 
0001aeaf l       .debug_str	00000000 
0001aeb6 l       .debug_str	00000000 
0001aebd l       .debug_str	00000000 
0001aec4 l       .debug_str	00000000 
0001aecb l       .debug_str	00000000 
0001aed2 l       .debug_str	00000000 
0001aed9 l       .debug_str	00000000 
0001aedf l       .debug_str	00000000 
0001aee5 l       .debug_str	00000000 
0001aeeb l       .debug_str	00000000 
0001aef1 l       .debug_str	00000000 
0001aef8 l       .debug_str	00000000 
0001af00 l       .debug_str	00000000 
0001bc86 l       .debug_str	00000000 
0001df01 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001df27 l       .debug_str	00000000 
0001dfe8 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3on1efjgx1q5grpf
00024d3b l       .debug_str	00000000 
0001e0bc l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0001bb39 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001dedd l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018a35 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0001add3 l       .debug_str	00000000 
0001addc l       .debug_str	00000000 
0001ade6 l       .debug_str	00000000 
0001adf6 l       .debug_str	00000000 
0001bb46 l       .debug_str	00000000 
0001e0c3 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001e0e9 l       .debug_str	00000000 
0001dfe8 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00016188 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001dfef l       .debug_str	00000000 
0001e190 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dxw5xp80tje79rx
00001b71 l       .debug_str	00000000 
0001e287 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001dedd l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00016188 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001dfef l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00018a35 l       .debug_str	00000000 
0001ae07 l       .debug_str	00000000 
0001df01 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001e0bc l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
0001e237 l       .debug_str	00000000 
0001e270 l       .debug_str	00000000 
00024d3b l       .debug_str	00000000 
0001e0c3 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 t2y6wwi1wx5h1fq
0000d930 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001dedd l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018a35 l       .debug_str	00000000 
0001ae07 l       .debug_str	00000000 
0001df01 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00016188 l       .debug_str	00000000 
0001e0bc l       .debug_str	00000000 
0001e2c0 l       .debug_str	00000000 
00001be1 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1dj5xwzbw170pcth
00033a4f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
000022cc l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001e39f l       .debug_str	00000000 
00059da4 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1h94gy75t1lfyk2m
00000f66 l       .debug_str	00000000 
0001e40e l       .debug_str	00000000 
0001e44e l       .debug_str	00000000 
0000eee3 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00003ab6 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
00040335 l       .debug_str	00000000 
000013b3 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d1f2 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00057c37 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d2d4 l       .debug_str	00000000 
0005e02d l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010d81 l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
0000159b l       .debug_str	00000000 
000015a4 l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
0005b57c l       .debug_str	00000000 
00000f70 l       .debug_str	00000000 
00000fa8 l       .debug_str	00000000 
00000fe8 l       .debug_str	00000000 
00001020 l       .debug_str	00000000 
00001028 l       .debug_str	00000000 
000015cb l       .debug_str	00000000 
000015b2 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000015ad l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
00001605 l       .debug_str	00000000 
000015ec l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00010ce0 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 21g9i1epq5ht4p79
0000c922 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0005785d l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
0002144a l       .debug_str	00000000 
00001ba6 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
0000cbfc l       .debug_str	00000000 
00032129 l       .debug_str	00000000 
00001bab l       .debug_str	00000000 
0000ca0e l       .debug_str	00000000 
00001ba2 l       .debug_str	00000000 
0000cc02 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001e495 l       .debug_str	00000000 
0000663b l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0000ca08 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 22m4u7gnp4iz6z75
0000cae1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
000075d2 l       .debug_str	00000000 
000075d7 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000775a l       .debug_str	00000000 
00007762 l       .debug_str	00000000 
00015969 l       .debug_str	00000000 
0000776a l       .debug_str	00000000 
00007772 l       .debug_str	00000000 
00007779 l       .debug_str	00000000 
00003702 l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
000075de l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000caa6 l       .debug_str	00000000 
0000caf6 l       .debug_str	00000000 
0001e4fe l       .debug_str	00000000 
00031ad0 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2jghko95f1fcw2kw
0001e6fe l       .debug_str	00000000 
0001bd39 l       .debug_str	00000000 
0001e57d l       .debug_str	00000000 
0000659a l       .debug_str	00000000 
0001e5c2 l       .debug_str	00000000 
0001e607 l       .debug_str	00000000 
0001e614 l       .debug_str	00000000 
0001e659 l       .debug_str	00000000 
0001e666 l       .debug_str	00000000 
00008817 l       .debug_str	00000000 
0001e6ab l       .debug_str	00000000 
000066dc l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
0001e6f3 l       .debug_str	00000000 
00016580 l       .debug_str	00000000 
0001e746 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
0001e78c l       .debug_str	00000000 
0001e7d2 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0000727d l       .debug_str	00000000 
0005a8ee l       .debug_str	00000000 
0000de37 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001e539 l       .debug_str	00000000 
00006685 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2t4h7x9pofzwxo58
0001e8ad l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
0001e8ec l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
0000196d l       .debug_str	00000000 
0001e95f l       .debug_str	00000000 
0001e99e l       .debug_str	00000000 
0001ea7c l       .debug_str	00000000 
0001e9db l       .debug_str	00000000 
0001ea3e l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0001ea65 l       .debug_str	00000000 
000583e5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000e34f l       .debug_str	00000000 
00002471 l       .debug_str	00000000 
00034330 l       .debug_str	00000000 
0000247a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0001e818 l       .debug_str	00000000 
0001823d l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bd39 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
000073a5 l       .debug_str	00000000 
00002482 l       .debug_str	00000000 
00001c9e l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
00001b56 l       .debug_str	00000000 
0000f38d l       .debug_str	00000000 
00001be1 l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
0000285f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 31djkeejljxsexfi
00005f22 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001ea86 l       .debug_str	00000000 
000319ea l       .debug_str	00000000 
0001bd1a l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
0001eae9 l       .debug_str	00000000 
0001eadd l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
0001eaf0 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 44vzahdamekpfupi
00007261 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001eafb l       .debug_str	00000000 
00007253 l       .debug_str	00000000 
0000635c l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bd39 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
000583e5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 48kp7dqlhcnw98ww
0001492d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
00014bc1 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001eb4d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4jc7ajwyicjft5df
00006b64 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001eb7d l       .debug_str	00000000 
0001eba3 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 xzrg48g93icjbc1
0005a053 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
000022cc l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
0001ebac l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001ebbf l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0001ec4b l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
0001ec54 l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
0001ec64 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 cstr_core.8j8txwjh-cgu.0
0002009c l       .debug_str	00000000 
0001f190 l       .debug_str	00000000 
0001f1ba l       .debug_str	00000000 
00005d0c l       .debug_str	00000000 
0001f208 l       .debug_str	00000000 
00016531 l       .debug_str	00000000 
0001f255 l       .debug_str	00000000 
0001f2af l       .debug_str	00000000 
0001f2bd l       .debug_str	00000000 
0001f310 l       .debug_str	00000000 
0001f318 l       .debug_str	00000000 
0000635c l       .debug_str	00000000 
0001f36d l       .debug_str	00000000 
000063fa l       .debug_str	00000000 
0001f3ab l       .debug_str	00000000 
0001f40a l       .debug_str	00000000 
00002dbd l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
0001f46f l       .debug_str	00000000 
00003796 l       .debug_str	00000000 
0001f4a0 l       .debug_str	00000000 
00002e4a l       .debug_str	00000000 
0001f4d2 l       .debug_str	00000000 
0001696e l       .debug_str	00000000 
0001f500 l       .debug_str	00000000 
000064f7 l       .debug_str	00000000 
0001f526 l       .debug_str	00000000 
00006685 l       .debug_str	00000000 
0001f56d l       .debug_str	00000000 
000066dc l       .debug_str	00000000 
000066ec l       .debug_str	00000000 
0001f5b8 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0001f5be l       .debug_str	00000000 
0001f64a l       .debug_str	00000000 
0001f665 l       .debug_str	00000000 
0001f695 l       .debug_str	00000000 
0001f6ca l       .debug_str	00000000 
0001f6fa l       .debug_str	00000000 
0001f710 l       .debug_str	00000000 
00006730 l       .debug_str	00000000 
0001f746 l       .debug_str	00000000 
00006785 l       .debug_str	00000000 
0001f780 l       .debug_str	00000000 
0001f7bc l       .debug_str	00000000 
00006806 l       .debug_str	00000000 
0001f7e2 l       .debug_str	00000000 
00006839 l       .debug_str	00000000 
0001f809 l       .debug_str	00000000 
000092b0 l       .debug_str	00000000 
0001f857 l       .debug_str	00000000 
00009320 l       .debug_str	00000000 
0001f8a8 l       .debug_str	00000000 
0000952f l       .debug_str	00000000 
0001f8fa l       .debug_str	00000000 
00009147 l       .debug_str	00000000 
0001f945 l       .debug_str	00000000 
00006c03 l       .debug_str	00000000 
0001f988 l       .debug_str	00000000 
000092a7 l       .debug_str	00000000 
0001f9e4 l       .debug_str	00000000 
00009317 l       .debug_str	00000000 
0001fa43 l       .debug_str	00000000 
0001fa99 l       .debug_str	00000000 
00006a21 l       .debug_str	00000000 
0001fb2e l       .debug_str	00000000 
0001fbc8 l       .debug_str	00000000 
0001fbd9 l       .debug_str	00000000 
0001fbfe l       .debug_str	00000000 
0001fca7 l       .debug_str	00000000 
00002482 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
0001fcb8 l       .debug_str	00000000 
0001fd40 l       .debug_str	00000000 
0001fcf7 l       .debug_str	00000000 
0001fd3b l       .debug_str	00000000 
0001fd85 l       .debug_str	00000000 
0001fdc6 l       .debug_str	00000000 
0001fdeb l       .debug_str	00000000 
0001fe3c l       .debug_str	00000000 
0001fe81 l       .debug_str	00000000 
0001fed4 l       .debug_str	00000000 
0001ff35 l       .debug_str	00000000 
0001ff9c l       .debug_str	00000000 
00014f55 l       .debug_str	00000000 
0001ffe3 l       .debug_str	00000000 
0002002e l       .debug_str	00000000 
0002003b l       .debug_str	00000000 
00020115 l       .debug_str	00000000 
0002010d l       .debug_str	00000000 
0002011d l       .debug_str	00000000 
0000f23e l       .debug_str	00000000 
00020139 l       .debug_str	00000000 
000201ae l       .debug_str	00000000 
000201d9 l       .debug_str	00000000 
000178fe l       .debug_str	00000000 
00020252 l       .debug_str	00000000 
00020278 l       .debug_str	00000000 
000202b1 l       .debug_str	00000000 
00002244 l       .debug_str	00000000 
000202c9 l       .debug_str	00000000 
00020302 l       .debug_str	00000000 
0002033a l       .debug_str	00000000 
00002dc0 l       .debug_str	00000000 
00020373 l       .debug_str	00000000 
000203ae l       .debug_str	00000000 
000203f2 l       .debug_str	00000000 
00020438 l       .debug_str	00000000 
00020474 l       .debug_str	00000000 
0002049c l       .debug_str	00000000 
000204d8 l       .debug_str	00000000 
000204fc l       .debug_str	00000000 
00020559 l       .debug_str	00000000 
0002056d l       .debug_str	00000000 
00006cce l       .debug_str	00000000 
0002144a l       .debug_str	00000000 
000205be l       .debug_str	00000000 
0002060f l       .debug_str	00000000 
00020626 l       .debug_str	00000000 
00017bbe l       .debug_str	00000000 
00020677 l       .debug_str	00000000 
00006d2b l       .debug_str	00000000 
000206c8 l       .debug_str	00000000 
00006d95 l       .debug_str	00000000 
00020720 l       .debug_str	00000000 
00020783 l       .debug_str	00000000 
000207ae l       .debug_str	00000000 
00020811 l       .debug_str	00000000 
00020886 l       .debug_str	00000000 
00017d40 l       .debug_str	00000000 
000208ea l       .debug_str	00000000 
00020955 l       .debug_str	00000000 
00020964 l       .debug_str	00000000 
000209d0 l       .debug_str	00000000 
00020a02 l       .debug_str	00000000 
00020a28 l       .debug_str	00000000 
00020a97 l       .debug_str	00000000 
00020ab7 l       .debug_str	00000000 
00020b27 l       .debug_str	00000000 
00020b48 l       .debug_str	00000000 
0001823d l       .debug_str	00000000 
00020bbc l       .debug_str	00000000 
00020c3c l       .debug_str	00000000 
00020c82 l       .debug_str	00000000 
00020cab l       .debug_str	00000000 
00020cb2 l       .debug_str	00000000 
00020cea l       .debug_str	00000000 
00020d29 l       .debug_str	00000000 
00020d30 l       .debug_str	00000000 
00020da9 l       .debug_str	00000000 
00001be1 l       .debug_str	00000000 
00020e40 l       .debug_str	00000000 
00020ebe l       .debug_str	00000000 
00020ec8 l       .debug_str	00000000 
00020f56 l       .debug_str	00000000 
00021002 l       .debug_str	00000000 
00021049 l       .debug_str	00000000 
00021056 l       .debug_str	00000000 
000210a3 l       .debug_str	00000000 
000210b6 l       .debug_str	00000000 
00021108 l       .debug_str	00000000 
00021178 l       .debug_str	00000000 
0001eed8 l       .debug_str	00000000 
000211d8 l       .debug_str	00000000 
000211e9 l       .debug_str	00000000 
0002124e l       .debug_str	00000000 
0002127e l       .debug_str	00000000 
00021287 l       .debug_str	00000000 
000212c3 l       .debug_str	00000000 
000212d7 l       .debug_str	00000000 
00021312 l       .debug_str	00000000 
00021358 l       .debug_str	00000000 
00021376 l       .debug_str	00000000 
000213a6 l       .debug_str	00000000 
000213af l       .debug_str	00000000 
000213e9 l       .debug_str	00000000 
000213fb l       .debug_str	00000000 
00021429 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00021430 l       .debug_str	00000000 
0002143c l       .debug_str	00000000 
00021446 l       .debug_str	00000000 
00021450 l       .debug_str	00000000 
00021473 l       .debug_str	00000000 
000319ea l       .debug_str	00000000 
000214c8 l       .debug_str	00000000 
00021528 l       .debug_str	00000000 
00021534 l       .debug_str	00000000 
00021584 l       .debug_str	00000000 
000215e7 l       .debug_str	00000000 
0002164e l       .debug_str	00000000 
000216bd l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
00002dbc l       .debug_str	00000000 
0002174d l       .debug_str	00000000 
00059c1d l       .debug_str	00000000 
0004e17c l       .debug_str	00000000 
00015969 l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
000583e5 l       .debug_str	00000000 
00007253 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0000725a l       .debug_str	00000000 
00058b61 l       .debug_str	00000000 
00007267 l       .debug_str	00000000 
00058907 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00005d14 l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
00007272 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
0000727d l       .debug_str	00000000 
0005a8ee l       .debug_str	00000000 
0000de37 l       .debug_str	00000000 
00021774 l       .debug_str	00000000 
0002179f l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
0000d93c l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00007281 l       .debug_str	00000000 
000072bb l       .debug_str	00000000 
000072f4 l       .debug_str	00000000 
00007303 l       .debug_str	00000000 
00007346 l       .debug_str	00000000 
00059e32 l       .debug_str	00000000 
000367bd l       .debug_str	00000000 
0005b857 l       .debug_str	00000000 
0000738e l       .debug_str	00000000 
000217ab l       .debug_str	00000000 
00020ec3 l       .debug_str	00000000 
000583b6 l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
000217cb l       .debug_str	00000000 
0004455b l       .debug_str	00000000 
00021806 l       .debug_str	00000000 
0002180d l       .debug_str	00000000 
00035157 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0002184e l       .debug_str	00000000 
00021895 l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
00021afa l       .debug_str	00000000 
0002186f l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
00003a15 l       .debug_str	00000000 
00021891 l       .debug_str	00000000 
00005eef l       .debug_str	00000000 
00005f03 l       .debug_str	00000000 
0000cc98 l       .debug_str	00000000 
0000cca3 l       .debug_str	00000000 
00005f22 l       .debug_str	00000000 
0000cc9c l       .debug_str	00000000 
00005f0c l       .debug_str	00000000 
00005f17 l       .debug_str	00000000 
0000cb12 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001ec8b l       .debug_str	00000000 
0001ece3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0001ed30 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
0001ed3a l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0001ed46 l       .debug_str	00000000 
00021785 l       .debug_str	00000000 
00021779 l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005c4e8 l       .debug_str	00000000 
000334dc l       .debug_str	00000000 
0000348c l       .debug_str	00000000 
00003491 l       .debug_str	00000000 
00003497 l       .debug_str	00000000 
00003702 l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00001c9e l       .debug_str	00000000 
00002287 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0001666c l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0000614c l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0001ed57 l       .debug_str	00000000 
00006180 l       .debug_str	00000000 
0000618f l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00004f14 l       .debug_str	00000000 
000061a9 l       .debug_str	00000000 
000072fd l       .debug_str	00000000 
0001ed80 l       .debug_str	00000000 
000061d6 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00006226 l       .debug_str	00000000 
0000623a l       .debug_str	00000000 
0001eda9 l       .debug_str	00000000 
00006299 l       .debug_str	00000000 
000062a7 l       .debug_str	00000000 
00007802 l       .debug_str	00000000 
000334b6 l       .debug_str	00000000 
000062af l       .debug_str	00000000 
0000e34f l       .debug_str	00000000 
00002471 l       .debug_str	00000000 
00034330 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00007813 l       .debug_str	00000000 
0001679c l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
00021828 l       .debug_str	00000000 
000418b8 l       .debug_str	00000000 
0000228f l       .debug_str	00000000 
0001edf5 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
000073a5 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
0002026a l       .debug_str	00000000 
000217de l       .debug_str	00000000 
00002299 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
000216e1 l       .debug_str	00000000 
00021672 l       .debug_str	00000000 
00007a6e l       .debug_str	00000000 
0001edfb l       .debug_str	00000000 
00007864 l       .debug_str	00000000 
0000cfb7 l       .debug_str	00000000 
00020253 l       .debug_str	00000000 
0001ee24 l       .debug_str	00000000 
000022cc l       .debug_str	00000000 
00006dab l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00006db6 l       .debug_str	00000000 
0000247a l       .debug_str	00000000 
0001ee51 l       .debug_str	00000000 
0001ee58 l       .debug_str	00000000 
0001ee82 l       .debug_str	00000000 
000227e4 l       .debug_str	00000000 
0001ee86 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
0001ee8f l       .debug_str	00000000 
00016777 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0001678a l       .debug_str	00000000 
0005d37d l       .debug_str	00000000 
00007388 l       .debug_str	00000000 
00048c0a l       .debug_str	00000000 
0001eed1 l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
0001eee0 l       .debug_str	00000000 
00016fef l       .debug_str	00000000 
0002187b l       .debug_str	00000000 
000211e4 l       .debug_str	00000000 
0001eeea l       .debug_str	00000000 
0001ef70 l       .debug_str	00000000 
0001ef7a l       .debug_str	00000000 
0001f00c l       .debug_str	00000000 
0001bd39 l       .debug_str	00000000 
0001f052 l       .debug_str	00000000 
0001f0e6 l       .debug_str	00000000 
0001f148 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4iim1qfb3qo0ur8y
0002190b l       .debug_str	00000000 
00021909 l       .debug_str	00000000 
0002195c l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00021899 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
000022cc l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000218b8 l       .debug_str	00000000 
0000a7cf l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 memchr.2yzmedhn-cgu.0
00021fb7 l       .debug_str	00000000 
0001ee51 l       .debug_str	00000000 
00005e00 l       .debug_str	00000000 
00021a03 l       .debug_str	00000000 
00021a38 l       .debug_str	00000000 
0000de37 l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
00021a44 l       .debug_str	00000000 
00021a7c l       .debug_str	00000000 
00021a96 l       .debug_str	00000000 
00021aa0 l       .debug_str	00000000 
00021aa8 l       .debug_str	00000000 
00021ab0 l       .debug_str	00000000 
00021aec l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00021aff l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00021b07 l       .debug_str	00000000 
00021b3f l       .debug_str	00000000 
00004f14 l       .debug_str	00000000 
00021b47 l       .debug_str	00000000 
00021b7f l       .debug_str	00000000 
00021b87 l       .debug_str	00000000 
00021bbf l       .debug_str	00000000 
00021bd9 l       .debug_str	00000000 
00021be2 l       .debug_str	00000000 
00021c1a l       .debug_str	00000000 
00021c23 l       .debug_str	00000000 
00021c5b l       .debug_str	00000000 
0001ef70 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
00021ce3 l       .debug_str	00000000 
00021d2b l       .debug_str	00000000 
00021d36 l       .debug_str	00000000 
000063a4 l       .debug_str	00000000 
00002482 l       .debug_str	00000000 
00021d74 l       .debug_str	00000000 
000084a7 l       .debug_str	00000000 
00021d9d l       .debug_str	00000000 
00021dc2 l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
0000859d l       .debug_str	00000000 
00021e21 l       .debug_str	00000000 
000085ef l       .debug_str	00000000 
00021e49 l       .debug_str	00000000 
00021e7a l       .debug_str	00000000 
00021e86 l       .debug_str	00000000 
00021ee5 l       .debug_str	00000000 
00002e4a l       .debug_str	00000000 
00021f17 l       .debug_str	00000000 
00021f5f l       .debug_str	00000000 
00007388 l       .debug_str	00000000 
00021f6c l       .debug_str	00000000 
00021fc7 l       .debug_str	00000000 
00021fd5 l       .debug_str	00000000 
00008817 l       .debug_str	00000000 
00008a11 l       .debug_str	00000000 
00003ac5 l       .debug_str	00000000 
0002201d l       .debug_str	00000000 
00008a5d l       .debug_str	00000000 
00022058 l       .debug_str	00000000 
00016a5a l       .debug_str	00000000 
00016a73 l       .debug_str	00000000 
0002208f l       .debug_str	00000000 
000092b0 l       .debug_str	00000000 
000220e1 l       .debug_str	00000000 
00009320 l       .debug_str	00000000 
00022136 l       .debug_str	00000000 
00016a60 l       .debug_str	00000000 
00022169 l       .debug_str	00000000 
00006bb2 l       .debug_str	00000000 
000221af l       .debug_str	00000000 
00006c03 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0001739c l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
000221f8 l       .debug_str	00000000 
0002226d l       .debug_str	00000000 
0002229a l       .debug_str	00000000 
00006f45 l       .debug_str	00000000 
00022326 l       .debug_str	00000000 
000223a9 l       .debug_str	00000000 
000223d8 l       .debug_str	00000000 
00001be1 l       .debug_str	00000000 
00022425 l       .debug_str	00000000 
00022455 l       .debug_str	00000000 
000224a3 l       .debug_str	00000000 
000224d3 l       .debug_str	00000000 
00022521 l       .debug_str	00000000 
00022551 l       .debug_str	00000000 
0002259f l       .debug_str	00000000 
000225d0 l       .debug_str	00000000 
0002261f l       .debug_str	00000000 
00022650 l       .debug_str	00000000 
0002269f l       .debug_str	00000000 
000226cf l       .debug_str	00000000 
000226d7 l       .debug_str	00000000 
00022707 l       .debug_str	00000000 
0002270f l       .debug_str	00000000 
0002274d l       .debug_str	00000000 
00022762 l       .debug_str	00000000 
00016531 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00014fc8 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00058b61 l       .debug_str	00000000 
00058907 l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
00005d09 l       .debug_str	00000000 
00005d0c l       .debug_str	00000000 
0002278e l       .debug_str	00000000 
0000727d l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
000583b6 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
000073a5 l       .debug_str	00000000 
000227e4 l       .debug_str	00000000 
0001ee86 l       .debug_str	00000000 
000227e3 l       .debug_str	00000000 
000227e7 l       .debug_str	00000000 
000227f1 l       .debug_str	00000000 
0000138b l       .debug_str	00000000 
00001394 l       .debug_str	00000000 
0005a8ee l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
000227f7 l       .debug_str	00000000 
000227fb l       .debug_str	00000000 
00021afa l       .debug_str	00000000 
00022800 l       .debug_str	00000000 
000227ff l       .debug_str	00000000 
00022803 l       .debug_str	00000000 
00022807 l       .debug_str	00000000 
0002280c l       .debug_str	00000000 
0002280b l       .debug_str	00000000 
0002280f l       .debug_str	00000000 
00022813 l       .debug_str	00000000 
000583e5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00021964 l       .debug_str	00000000 
000219b9 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005c4e8 l       .debug_str	00000000 
000334dc l       .debug_str	00000000 
0000348c l       .debug_str	00000000 
00003491 l       .debug_str	00000000 
00003497 l       .debug_str	00000000 
00003702 l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000614c l       .debug_str	00000000 
000363cd l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
0000349f l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000062af l       .debug_str	00000000 
00013074 l     F .text	0000006e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE
00000000 l    df *ABS*	00000000 1oq54qwymghnfn7s
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00022817 l       .debug_str	00000000 
00059da4 l       .debug_str	00000000 
0002289c l       .debug_str	00000000 
00022909 l       .debug_str	00000000 
0002297b l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
000229d9 l       .debug_str	00000000 
0004c75b l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1sklumn9v47r13ke
0000c922 l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00005d81 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005c4e8 l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
000229f6 l       .debug_str	00000000 
000319ea l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00022a57 l       .debug_str	00000000 
00002dbd l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2la8qm50nrg05wyh
00022aba l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
0002301f l       .debug_str	00000000 
0002308a l       .debug_str	00000000 
000230d0 l       .debug_str	00000000 
00023142 l       .debug_str	00000000 
00001680 l       .debug_str	00000000 
00023339 l       .debug_str	00000000 
000233ab l       .debug_str	00000000 
000233f5 l       .debug_str	00000000 
0002343f l       .debug_str	00000000 
0002363e l       .debug_str	00000000 
0002367a l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
0000eed4 l       .debug_str	00000000 
000236bf l       .debug_str	00000000 
000236fc l       .debug_str	00000000 
000238ef l       .debug_str	00000000 
0002392c l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00023972 l       .debug_str	00000000 
00023b78 l       .debug_str	00000000 
00023bd1 l       .debug_str	00000000 
00023dd3 l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
000022c7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00010dbd l       .debug_str	00000000 
00018bb4 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005de78 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00010dc6 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00010dd4 l       .debug_str	00000000 
00010ddc l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00010de4 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
0000ffe9 l       .debug_str	00000000 
00010e00 l       .debug_str	00000000 
00010e45 l       .debug_str	00000000 
00010eb3 l       .debug_str	00000000 
00010f4a l       .debug_str	00000000 
0001100a l       .debug_str	00000000 
000110f3 l       .debug_str	00000000 
00011205 l       .debug_str	00000000 
00011340 l       .debug_str	00000000 
000114a4 l       .debug_str	00000000 
00011631 l       .debug_str	00000000 
000117e7 l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
000119d3 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000119d9 l       .debug_str	00000000 
000119dc l       .debug_str	00000000 
00011a05 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
00011a6b l       .debug_str	00000000 
00011abb l       .debug_str	00000000 
00011b18 l       .debug_str	00000000 
00011b6c l       .debug_str	00000000 
00011be3 l       .debug_str	00000000 
00011c67 l       .debug_str	00000000 
00011ce2 l       .debug_str	00000000 
00011d80 l       .debug_str	00000000 
00011e2b l       .debug_str	00000000 
00011ecd l       .debug_str	00000000 
00011f92 l       .debug_str	00000000 
00012064 l       .debug_str	00000000 
0001212d l       .debug_str	00000000 
00012219 l       .debug_str	00000000 
00012312 l       .debug_str	00000000 
00012402 l       .debug_str	00000000 
00012515 l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
0001274c l       .debug_str	00000000 
00012886 l       .debug_str	00000000 
000129cd l       .debug_str	00000000 
00012b0b l       .debug_str	00000000 
00012c6c l       .debug_str	00000000 
00012dda l       .debug_str	00000000 
00012f3f l       .debug_str	00000000 
000130c7 l       .debug_str	00000000 
0001325c l       .debug_str	00000000 
000133e8 l       .debug_str	00000000 
00013597 l       .debug_str	00000000 
00013753 l       .debug_str	00000000 
00013906 l       .debug_str	00000000 
00013adc l       .debug_str	00000000 
00013cbf l       .debug_str	00000000 
00013e99 l       .debug_str	00000000 
00014094 l       .debug_str	00000000 
000142ac l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0002f30c l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00023986 l       .debug_str	00000000 
00014747 l       .debug_str	00000000 
00014795 l       .debug_str	00000000 
00014800 l       .debug_str	00000000 
0002f298 l       .debug_str	00000000 
00023b8c l       .debug_str	00000000 
00022b22 l       .debug_str	00000000 
00022d14 l       .debug_str	00000000 
00022d7c l       .debug_str	00000000 
00022dc1 l       .debug_str	00000000 
00022e2c l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3hq83qlgyhwbaj1j
00000beb l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00005d6d l       .debug_str	00000000 
00016188 l       .debug_str	00000000 
00016187 l       .debug_str	00000000 
00005d81 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00023e28 l       .debug_str	00000000 
00023e84 l       .debug_str	00000000 
00023ee1 l       .debug_str	00000000 
00023f3e l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4dguvrsipkvuzwcx
0000c9d7 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00014b63 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
000187c1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005c4e8 l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
000334dc l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00023f9b l       .debug_str	00000000 
0002400c l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00024018 l       .debug_str	00000000 
000178fe l       .debug_str	00000000 
00024089 l       .debug_str	00000000 
00016932 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 501bil2zkh495ov3
000245b1 l       .debug_str	00000000 
00024556 l       .debug_str	00000000 
00024569 l       .debug_str	00000000 
000245a8 l       .debug_str	00000000 
000245c3 l       .debug_str	00000000 
000245fb l       .debug_str	00000000 
0002460f l       .debug_str	00000000 
0001593b l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
0000138b l       .debug_str	00000000 
00005d6d l       .debug_str	00000000 
00001394 l       .debug_str	00000000 
0005dd4e l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
000013a3 l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
000013ae l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
0000ca63 l       .debug_str	00000000 
00005d81 l       .debug_str	00000000 
00005cfd l       .debug_str	00000000 
00058b80 l       .debug_str	00000000 
0005dd4d l       .debug_str	00000000 
0002463b l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
00003ab6 l       .debug_str	00000000 
0002463f l       .debug_str	00000000 
0005d27b l       .debug_str	00000000 
0000ffa9 l       .debug_str	00000000 
0000ffb1 l       .debug_str	00000000 
0000ffba l       .debug_str	00000000 
0000ffc8 l       .debug_str	00000000 
0000ffcf l       .debug_str	00000000 
0000fc4f l       .debug_str	00000000 
0000fc5f l       .debug_str	00000000 
0000fc68 l       .debug_str	00000000 
0000fc76 l       .debug_str	00000000 
0000fc84 l       .debug_str	00000000 
0000fc90 l       .debug_str	00000000 
0000fe9e l       .debug_str	00000000 
0000fc9c l       .debug_str	00000000 
0000fcab l       .debug_str	00000000 
0000fcb3 l       .debug_str	00000000 
0000fccc l       .debug_str	00000000 
0000fcdd l       .debug_str	00000000 
0000fce5 l       .debug_str	00000000 
0000fd18 l       .debug_str	00000000 
0000fcff l       .debug_str	00000000 
0000fd24 l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0000fd56 l       .debug_str	00000000 
0000fd3d l       .debug_str	00000000 
0000fd90 l       .debug_str	00000000 
0000fd83 l       .debug_str	00000000 
0000fd6a l       .debug_str	00000000 
0000ffd6 l       .debug_str	00000000 
00010035 l       .debug_str	00000000 
0000ffde l       .debug_str	00000000 
0000fff9 l       .debug_str	00000000 
0001002d l       .debug_str	00000000 
00010014 l       .debug_str	00000000 
0005c359 l       .debug_str	00000000 
0004a9a6 l       .debug_str	00000000 
00016e32 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00059b6b l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00024647 l       .debug_str	00000000 
0005d3af l       .debug_str	00000000 
0005b6ef l       .debug_str	00000000 
000595e1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005b312 l       .debug_str	00000000 
000189da l       .debug_str	00000000 
00058924 l       .debug_str	00000000 
00000e33 l       .debug_str	00000000 
0001595a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00015964 l       .debug_str	00000000 
0001596f l       .debug_str	00000000 
00015979 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00015998 l       .debug_str	00000000 
000240fa l       .debug_str	00000000 
0002412b l       .debug_str	00000000 
00010dbd l       .debug_str	00000000 
00018bb4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005de78 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00010dc6 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00010dd4 l       .debug_str	00000000 
00010ddc l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00010de4 l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
000119d3 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000119d9 l       .debug_str	00000000 
000119dc l       .debug_str	00000000 
00011a05 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
00014747 l       .debug_str	00000000 
00014795 l       .debug_str	00000000 
00014800 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0002f298 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00023b8c l       .debug_str	00000000 
00024137 l       .debug_str	00000000 
00024167 l       .debug_str	00000000 
0000ffe9 l       .debug_str	00000000 
00010e00 l       .debug_str	00000000 
00010e45 l       .debug_str	00000000 
00010eb3 l       .debug_str	00000000 
00010f4a l       .debug_str	00000000 
0001100a l       .debug_str	00000000 
000110f3 l       .debug_str	00000000 
00011205 l       .debug_str	00000000 
00011340 l       .debug_str	00000000 
000114a4 l       .debug_str	00000000 
00011631 l       .debug_str	00000000 
000117e7 l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
00011a6b l       .debug_str	00000000 
00011abb l       .debug_str	00000000 
00011b18 l       .debug_str	00000000 
00011b6c l       .debug_str	00000000 
00011be3 l       .debug_str	00000000 
00011c67 l       .debug_str	00000000 
00011ce2 l       .debug_str	00000000 
00011d80 l       .debug_str	00000000 
00011e2b l       .debug_str	00000000 
00011ecd l       .debug_str	00000000 
00011f92 l       .debug_str	00000000 
00012064 l       .debug_str	00000000 
0001212d l       .debug_str	00000000 
00012219 l       .debug_str	00000000 
00012312 l       .debug_str	00000000 
00012402 l       .debug_str	00000000 
00012515 l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
0001274c l       .debug_str	00000000 
00012886 l       .debug_str	00000000 
000129cd l       .debug_str	00000000 
00012b0b l       .debug_str	00000000 
00012c6c l       .debug_str	00000000 
00012dda l       .debug_str	00000000 
00012f3f l       .debug_str	00000000 
000130c7 l       .debug_str	00000000 
0001325c l       .debug_str	00000000 
000133e8 l       .debug_str	00000000 
00013597 l       .debug_str	00000000 
00013753 l       .debug_str	00000000 
00013906 l       .debug_str	00000000 
00013adc l       .debug_str	00000000 
00013cbf l       .debug_str	00000000 
00013e99 l       .debug_str	00000000 
00014094 l       .debug_str	00000000 
000142ac l       .debug_str	00000000 
0002f30c l       .debug_str	00000000 
00023986 l       .debug_str	00000000 
00024174 l       .debug_str	00000000 
000241a5 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
00040335 l       .debug_str	00000000 
00010c56 l       .debug_str	00000000 
0000d358 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d1f2 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00057c37 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d2d4 l       .debug_str	00000000 
0005e02d l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010d81 l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
00010bda l       .debug_str	00000000 
0004d2da l       .debug_str	00000000 
00010c5f l       .debug_str	00000000 
00010c6a l       .debug_str	00000000 
000241ad l       .debug_str	00000000 
000241d8 l       .debug_str	00000000 
000241e9 l       .debug_str	00000000 
0002421e l       .debug_str	00000000 
000101da l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
0000fe95 l       .debug_str	00000000 
0000fe9d l       .debug_str	00000000 
0000fd61 l       .debug_str	00000000 
0000fea7 l       .debug_str	00000000 
00010149 l       .debug_str	00000000 
00010130 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
0001012b l       .debug_str	00000000 
00010158 l       .debug_str	00000000 
000101e2 l       .debug_str	00000000 
00000f66 l       .debug_str	00000000 
0005b57c l       .debug_str	00000000 
000015b2 l       .debug_str	00000000 
00000f70 l       .debug_str	00000000 
00000fa8 l       .debug_str	00000000 
00000fe8 l       .debug_str	00000000 
00001020 l       .debug_str	00000000 
00001028 l       .debug_str	00000000 
000015cb l       .debug_str	00000000 
000101e8 l       .debug_str	00000000 
0002422d l       .debug_str	00000000 
00024260 l       .debug_str	00000000 
000013b3 l       .debug_str	00000000 
0000159b l       .debug_str	00000000 
000015a4 l       .debug_str	00000000 
000015ad l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
00001605 l       .debug_str	00000000 
00024270 l       .debug_str	00000000 
000242a4 l       .debug_str	00000000 
000242ad l       .debug_str	00000000 
000242d9 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000242e8 l       .debug_str	00000000 
0002431b l       .debug_str	00000000 
00024328 l       .debug_str	00000000 
00024334 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00024365 l       .debug_str	00000000 
0002439a l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
000243ab l       .debug_str	00000000 
000243dd l       .debug_str	00000000 
000243eb l       .debug_str	00000000 
00024429 l       .debug_str	00000000 
00024443 l       .debug_str	00000000 
0002447e l       .debug_str	00000000 
00024495 l       .debug_str	00000000 
000244d1 l       .debug_str	00000000 
000244e9 l       .debug_str	00000000 
0002451f l       .debug_str	00000000 
20000a20 l     O .bss	00000008 _ZN6mynewt3spi11PENDING_CMD17hd08bb758c99a7708E
20000a28 l     O .bss	00000804 _ZN6mynewt3spi12PENDING_DATA17h17892bfe7f609123E
200016b4 l     O .bss	00000000 _ZN6mynewt3spi12SPI_CALLBACK17h9820a4217e4879a6E
200000f8 l     O .data	00000008 _ZN6mynewt3spi12SPI_SETTINGS17h4a4473e27299c06dE
00013e0c l     F .text	0000003a _ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E
2000123c l     O .bss	00000018 _ZN6mynewt3spi14SPI_DATA_QUEUE17h4880c24292cc1218E
200012b4 l     O .bss	00000400 _ZN6mynewt3spi14SPI_TASK_STACK17h041a1fc76b4d16c1E
20001254 l     O .bss	00000010 _ZN6mynewt3spi15SPI_EVENT_QUEUE17h4e2cf68a255fc2fdE
20001234 l     O .bss	00000008 _ZN6mynewt3spi16SPI_THROTTLE_SEM17h1f0932d6e65cb8daE
000140a0 l     F .text	000001ea _ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E
0001428a l     F .text	000002e8 _ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E
000148a8 l     F .text	00000128 _ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E
00014572 l     F .text	00000336 _ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E
2000122c l     O .bss	00000008 _ZN6mynewt3spi7SPI_SEM17hd7399e388b8e657cE
20001264 l     O .bss	00000050 _ZN6mynewt3spi8SPI_TASK17h4c45c24ee73ad430E
000149d0 l     F .text	00000054 _ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E
0001f830 l     O .text	00000021 str.0
0001f870 l     O .text	0000001c str.1
0001f8c0 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 n1xzuhnvw82wqrn
0000ffde l       .debug_str	00000000 
0000fff9 l       .debug_str	00000000 
0001002d l       .debug_str	00000000 
00024652 l       .debug_str	00000000 
000246a4 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000062a7 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
00040335 l       .debug_str	00000000 
0000ffa9 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0000ffb1 l       .debug_str	00000000 
0000ffba l       .debug_str	00000000 
0000ffc8 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
0000ffcf l       .debug_str	00000000 
0000fc4f l       .debug_str	00000000 
0000fc5f l       .debug_str	00000000 
0000fc68 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
0000fc76 l       .debug_str	00000000 
0000fc84 l       .debug_str	00000000 
0000fc90 l       .debug_str	00000000 
0000fe9e l       .debug_str	00000000 
0000fc9c l       .debug_str	00000000 
0000fcab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000fcb3 l       .debug_str	00000000 
0000fccc l       .debug_str	00000000 
0000d358 l       .debug_str	00000000 
0000fcdd l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
0000fce5 l       .debug_str	00000000 
0000fd18 l       .debug_str	00000000 
0000fcff l       .debug_str	00000000 
0000fd24 l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0000fd56 l       .debug_str	00000000 
0000fd3d l       .debug_str	00000000 
0000fd61 l       .debug_str	00000000 
0000fd90 l       .debug_str	00000000 
0000fd83 l       .debug_str	00000000 
0000fd6a l       .debug_str	00000000 
0000ffd6 l       .debug_str	00000000 
00010014 l       .debug_str	00000000 
00010035 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000ffe9 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19c5s2vweequjzfw
0001bd1a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000246c9 l       .debug_str	00000000 
000246f2 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00024783 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000246ff l       .debug_str	00000000 
00007864 l       .debug_str	00000000 
00016639 l       .debug_str	00000000 
0005cb85 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00024728 l       .debug_str	00000000 
0002477d l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bd39 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1bm86yaetip2rc3f
00024a64 l       .debug_str	00000000 
000248cc l       .debug_str	00000000 
00024908 l       .debug_str	00000000 
00024924 l       .debug_str	00000000 
00024960 l       .debug_str	00000000 
00024996 l       .debug_str	00000000 
000249d2 l       .debug_str	00000000 
000249dd l       .debug_str	00000000 
00024a19 l       .debug_str	00000000 
00024a27 l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00024a9b l       .debug_str	00000000 
00024ad8 l       .debug_str	00000000 
00024ae7 l       .debug_str	00000000 
00024b24 l       .debug_str	00000000 
00024b67 l       .debug_str	00000000 
00024ba4 l       .debug_str	00000000 
0001bd1f l       .debug_str	00000000 
00024bdb l       .debug_str	00000000 
00024c19 l       .debug_str	00000000 
00024c50 l       .debug_str	00000000 
00024c8f l       .debug_str	00000000 
00024cc8 l       .debug_str	00000000 
0001dbd7 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00024d2c l       .debug_str	00000000 
0000eee3 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001de98 l       .debug_str	00000000 
00024d47 l       .debug_str	00000000 
00024d64 l       .debug_str	00000000 
0001eed8 l       .debug_str	00000000 
00005e09 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00004f14 l       .debug_str	00000000 
0001890b l       .debug_str	00000000 
00001b2a l       .debug_str	00000000 
00001b35 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00005e31 l       .debug_str	00000000 
0001dce3 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00024d73 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00024d3b l       .debug_str	00000000 
0001c28c l       .debug_str	00000000 
0005c7c8 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00024f28 l       .debug_str	00000000 
00024787 l       .debug_str	00000000 
0001dea7 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0001bd39 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
00024d56 l       .debug_str	00000000 
0001bd1a l       .debug_str	00000000 
000247a3 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001ac68 l       .debug_str	00000000 
00003518 l       .debug_str	00000000 
00003526 l       .debug_str	00000000 
00005e97 l       .debug_str	00000000 
00018a52 l       .debug_str	00000000 
0001ac71 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00001adf l       .debug_str	00000000 
00001aea l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
000247b0 l       .debug_str	00000000 
000247e9 l       .debug_str	00000000 
0001aca6 l       .debug_str	00000000 
00024884 l       .debug_str	00000000 
000248c0 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1i10ukgv8hgyc1v7
0005c691 l       .debug_str	00000000 
00025842 l       .debug_str	00000000 
0002584d l       .debug_str	00000000 
00025854 l       .debug_str	00000000 
000258bf l       .debug_str	00000000 
000259f0 l       .debug_str	00000000 
00025a5d l       .debug_str	00000000 
00025acf l       .debug_str	00000000 
00025bdd l       .debug_str	00000000 
00025be8 l       .debug_str	00000000 
00025c5a l       .debug_str	00000000 
00025d8f l       .debug_str	00000000 
00025e01 l       .debug_str	00000000 
00025ed1 l       .debug_str	00000000 
00025eec l       .debug_str	00000000 
00025f36 l       .debug_str	00000000 
00026073 l       .debug_str	00000000 
000260ae l       .debug_str	00000000 
000261b6 l       .debug_str	00000000 
000261f1 l       .debug_str	00000000 
00026320 l       .debug_str	00000000 
0002635b l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00024787 l       .debug_str	00000000 
00026425 l       .debug_str	00000000 
00026461 l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
0002652c l       .debug_str	00000000 
0002654c l       .debug_str	00000000 
00026588 l       .debug_str	00000000 
0002c41c l       .debug_str	00000000 
00026691 l       .debug_str	00000000 
000266ce l       .debug_str	00000000 
000267d8 l       .debug_str	00000000 
00026815 l       .debug_str	00000000 
00026946 l       .debug_str	00000000 
000269c7 l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
00027263 l       .debug_str	00000000 
00026afc l       .debug_str	00000000 
00026b7a l       .debug_str	00000000 
00026caa l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00026cb6 l       .debug_str	00000000 
00026d95 l       .debug_str	00000000 
00026eae l       .debug_str	00000000 
00026fee l       .debug_str	00000000 
0002710b l       .debug_str	00000000 
0002724f l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
000022c7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00010dbd l       .debug_str	00000000 
00018bb4 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005de78 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00010dc6 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00010dd4 l       .debug_str	00000000 
00010ddc l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00018cec l       .debug_str	00000000 
00018d09 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00018d4f l       .debug_str	00000000 
00018d60 l       .debug_str	00000000 
00018dd0 l       .debug_str	00000000 
00018e6a l       .debug_str	00000000 
00018f2d l       .debug_str	00000000 
00019d3b l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
000119d3 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000119d9 l       .debug_str	00000000 
000119dc l       .debug_str	00000000 
00011a05 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
0001901a l       .debug_str	00000000 
0001906a l       .debug_str	00000000 
000190c7 l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
0001911b l       .debug_str	00000000 
00019192 l       .debug_str	00000000 
00019216 l       .debug_str	00000000 
00019291 l       .debug_str	00000000 
0001932f l       .debug_str	00000000 
000193da l       .debug_str	00000000 
0001947c l       .debug_str	00000000 
00019541 l       .debug_str	00000000 
00019613 l       .debug_str	00000000 
000196dc l       .debug_str	00000000 
000197c8 l       .debug_str	00000000 
000198c1 l       .debug_str	00000000 
00019e52 l       .debug_str	00000000 
00019f65 l       .debug_str	00000000 
0001a085 l       .debug_str	00000000 
0001a19c l       .debug_str	00000000 
0001a2d5 l       .debug_str	00000000 
0001a42b l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0002b294 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002711f l       .debug_str	00000000 
000199b1 l       .debug_str	00000000 
00019ac3 l       .debug_str	00000000 
00019bf2 l       .debug_str	00000000 
0002b15c l       .debug_str	00000000 
00027002 l       .debug_str	00000000 
0001c28c l       .debug_str	00000000 
0005c7c8 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00024f28 l       .debug_str	00000000 
0001c2e5 l       .debug_str	00000000 
0001c312 l       .debug_str	00000000 
0001c333 l       .debug_str	00000000 
0001c39a l       .debug_str	00000000 
0001c43a l       .debug_str	00000000 
00011a6b l       .debug_str	00000000 
00011abb l       .debug_str	00000000 
00011b18 l       .debug_str	00000000 
0001c514 l       .debug_str	00000000 
0001c58b l       .debug_str	00000000 
0001c60f l       .debug_str	00000000 
0001c68a l       .debug_str	00000000 
0001c728 l       .debug_str	00000000 
0001c7d3 l       .debug_str	00000000 
0002866e l       .debug_str	00000000 
00027da5 l       .debug_str	00000000 
000280dc l       .debug_str	00000000 
0002b062 l       .debug_str	00000000 
00026cca l       .debug_str	00000000 
00024db5 l       .debug_str	00000000 
00024e43 l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00007802 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00024f13 l       .debug_str	00000000 
00024f2e l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0001d13d l       .debug_str	00000000 
00024f4b l       .debug_str	00000000 
00024f64 l       .debug_str	00000000 
0002d43f l       .debug_str	00000000 
00024f8a l       .debug_str	00000000 
00024ff0 l       .debug_str	00000000 
000250fa l       .debug_str	00000000 
00025160 l       .debug_str	00000000 
00025291 l       .debug_str	00000000 
000252f9 l       .debug_str	00000000 
000253c4 l       .debug_str	00000000 
0002542c l       .debug_str	00000000 
00025535 l       .debug_str	00000000 
0002559d l       .debug_str	00000000 
000256cd l       .debug_str	00000000 
00025738 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0001fa20 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 1w4juabyv8bmed5v
00000d37 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
00027398 l       .debug_str	00000000 
000273e3 l       .debug_str	00000000 
00002e4a l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0000c9ce l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 24fd677mu7rr1lzm
00025f36 l       .debug_str	00000000 
0002969f l       .debug_str	00000000 
00029728 l       .debug_str	00000000 
00029862 l       .debug_str	00000000 
000298eb l       .debug_str	00000000 
000299fe l       .debug_str	00000000 
00029a8a l       .debug_str	00000000 
00029b16 l       .debug_str	00000000 
00029c2c l       .debug_str	00000000 
00029cb8 l       .debug_str	00000000 
00029da6 l       .debug_str	00000000 
00026461 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
0002652c l       .debug_str	00000000 
00029e24 l       .debug_str	00000000 
00026588 l       .debug_str	00000000 
0002c41c l       .debug_str	00000000 
00029ea2 l       .debug_str	00000000 
000266ce l       .debug_str	00000000 
00029f21 l       .debug_str	00000000 
00026815 l       .debug_str	00000000 
00029fa0 l       .debug_str	00000000 
00024ff0 l       .debug_str	00000000 
0002a01f l       .debug_str	00000000 
00025160 l       .debug_str	00000000 
0002a09e l       .debug_str	00000000 
0002a120 l       .debug_str	00000000 
0002584d l       .debug_str	00000000 
0002a22d l       .debug_str	00000000 
0002a2af l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
0002a394 l       .debug_str	00000000 
0002a416 l       .debug_str	00000000 
0002a4e5 l       .debug_str	00000000 
0002a4fc l       .debug_str	00000000 
0002a57e l       .debug_str	00000000 
0002a6b2 l       .debug_str	00000000 
0002a734 l       .debug_str	00000000 
0002a819 l       .debug_str	00000000 
0002a89b l       .debug_str	00000000 
0002a9a8 l       .debug_str	00000000 
0002aa2a l       .debug_str	00000000 
0002ab5e l       .debug_str	00000000 
0002abe0 l       .debug_str	00000000 
0002acaf l       .debug_str	00000000 
0002ad31 l       .debug_str	00000000 
0002ae65 l       .debug_str	00000000 
0002aee7 l       .debug_str	00000000 
0002aff4 l       .debug_str	00000000 
0002b050 l       .debug_str	00000000 
0002b14a l       .debug_str	00000000 
0002b282 l       .debug_str	00000000 
000022c7 l       .debug_str	00000000 
0002b3e1 l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00007802 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0002b4f1 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
00005d77 l       .debug_str	00000000 
0002b4fe l       .debug_str	00000000 
0002d374 l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
0002b510 l       .debug_str	00000000 
000334b6 l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00007813 l       .debug_str	00000000 
0001679c l       .debug_str	00000000 
0002b515 l       .debug_str	00000000 
0003d63b l       .debug_str	00000000 
0002b649 l       .debug_str	00000000 
0002b7a4 l       .debug_str	00000000 
0002b8b0 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00010dbd l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005de78 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00010dc6 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00010dd4 l       .debug_str	00000000 
00010ddc l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00010de4 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
0000ffe9 l       .debug_str	00000000 
00010e00 l       .debug_str	00000000 
00027415 l       .debug_str	00000000 
00027482 l       .debug_str	00000000 
00027518 l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000119d3 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000119d9 l       .debug_str	00000000 
000119dc l       .debug_str	00000000 
00011a05 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
00011a6b l       .debug_str	00000000 
00011abb l       .debug_str	00000000 
00011b18 l       .debug_str	00000000 
0001c514 l       .debug_str	00000000 
0001c58b l       .debug_str	00000000 
0001c60f l       .debug_str	00000000 
0001c68a l       .debug_str	00000000 
0001c728 l       .debug_str	00000000 
0001c7d3 l       .debug_str	00000000 
000275d7 l       .debug_str	00000000 
0002769c l       .debug_str	00000000 
0002776e l       .debug_str	00000000 
00027837 l       .debug_str	00000000 
00027921 l       .debug_str	00000000 
00027a28 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0002b3f3 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00018cec l       .debug_str	00000000 
00018d09 l       .debug_str	00000000 
00018d4f l       .debug_str	00000000 
00018d60 l       .debug_str	00000000 
00018dd0 l       .debug_str	00000000 
00018e6a l       .debug_str	00000000 
00018f2d l       .debug_str	00000000 
00019d3b l       .debug_str	00000000 
0001901a l       .debug_str	00000000 
0001906a l       .debug_str	00000000 
000190c7 l       .debug_str	00000000 
0001911b l       .debug_str	00000000 
00019192 l       .debug_str	00000000 
00019216 l       .debug_str	00000000 
00019291 l       .debug_str	00000000 
0001932f l       .debug_str	00000000 
000193da l       .debug_str	00000000 
0001947c l       .debug_str	00000000 
00019541 l       .debug_str	00000000 
00019613 l       .debug_str	00000000 
000196dc l       .debug_str	00000000 
000197c8 l       .debug_str	00000000 
000198c1 l       .debug_str	00000000 
00019e52 l       .debug_str	00000000 
00019f65 l       .debug_str	00000000 
0001a085 l       .debug_str	00000000 
0001a19c l       .debug_str	00000000 
0001a2d5 l       .debug_str	00000000 
0001a42b l       .debug_str	00000000 
0002b294 l       .debug_str	00000000 
000199b1 l       .debug_str	00000000 
00019ac3 l       .debug_str	00000000 
00019bf2 l       .debug_str	00000000 
0002b15c l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0001c28c l       .debug_str	00000000 
0005c7c8 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00024f28 l       .debug_str	00000000 
0001c2e5 l       .debug_str	00000000 
0001c312 l       .debug_str	00000000 
0001c333 l       .debug_str	00000000 
0001c39a l       .debug_str	00000000 
0001c43a l       .debug_str	00000000 
0002866e l       .debug_str	00000000 
00027b2e l       .debug_str	00000000 
00027bb0 l       .debug_str	00000000 
00027c9e l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00027da5 l       .debug_str	00000000 
00027d86 l       .debug_str	00000000 
000280dc l       .debug_str	00000000 
00027e96 l       .debug_str	00000000 
00027ee7 l       .debug_str	00000000 
00027fd6 l       .debug_str	00000000 
000280be l       .debug_str	00000000 
0002b062 l       .debug_str	00000000 
000281cc l       .debug_str	00000000 
00028247 l       .debug_str	00000000 
00028331 l       .debug_str	00000000 
00028415 l       .debug_str	00000000 
00028521 l       .debug_str	00000000 
0002856d l       .debug_str	00000000 
00028658 l       .debug_str	00000000 
00028742 l       .debug_str	00000000 
00018bb4 l       .debug_str	00000000 
0002884c l       .debug_str	00000000 
0002894d l       .debug_str	00000000 
000289a3 l       .debug_str	00000000 
00028aa1 l       .debug_str	00000000 
00028af7 l       .debug_str	00000000 
00028c44 l       .debug_str	00000000 
00028c9a l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00028dc0 l       .debug_str	00000000 
00028e47 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00024f13 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00025ed1 l       .debug_str	00000000 
00028f1a l       .debug_str	00000000 
00028fa1 l       .debug_str	00000000 
00025842 l       .debug_str	00000000 
00025bdd l       .debug_str	00000000 
000290b2 l       .debug_str	00000000 
00029139 l       .debug_str	00000000 
00029271 l       .debug_str	00000000 
000292f9 l       .debug_str	00000000 
000293cd l       .debug_str	00000000 
00029456 l       .debug_str	00000000 
0002952b l       .debug_str	00000000 
000295b4 l       .debug_str	00000000 
0001faa0 l     O .text	00000021 str.0
0001fae0 l     O .text	0000001c str.1
00000000 l    df *ABS*	00000000 2jbqb9ep0zzhh36j
0000996c l       .debug_str	00000000 
0002bcab l       .debug_str	00000000 
0002bcb8 l       .debug_str	00000000 
0002bcf8 l       .debug_str	00000000 
0002bdf5 l       .debug_str	00000000 
0002be35 l       .debug_str	00000000 
0002be44 l       .debug_str	00000000 
0002be84 l       .debug_str	00000000 
0002bea3 l       .debug_str	00000000 
0002bee3 l       .debug_str	00000000 
0002beff l       .debug_str	00000000 
0002bf3f l       .debug_str	00000000 
0002bf4d l       .debug_str	00000000 
0002bf8d l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
00018a35 l       .debug_str	00000000 
0001af14 l       .debug_str	00000000 
0000a47e l       .debug_str	00000000 
00000788 l       .debug_str	00000000 
0002bf9b l       .debug_str	00000000 
0002bfdc l       .debug_str	00000000 
00018bb8 l       .debug_str	00000000 
0002c011 l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
0002c01b l       .debug_str	00000000 
0002c05c l       .debug_str	00000000 
0000c9ab l       .debug_str	00000000 
0002c0a9 l       .debug_str	00000000 
0002c0ea l       .debug_str	00000000 
0002c11f l       .debug_str	00000000 
0002c12a l       .debug_str	00000000 
0002c16b l       .debug_str	00000000 
0002c1b8 l       .debug_str	00000000 
0002c1f9 l       .debug_str	00000000 
0002c22e l       .debug_str	00000000 
0002c29d l       .debug_str	00000000 
0002c39e l       .debug_str	00000000 
0000ad5e l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0002c40d l       .debug_str	00000000 
0002c42c l       .debug_str	00000000 
0000eee3 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00003ab6 l       .debug_str	00000000 
000587bf l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
0001c28c l       .debug_str	00000000 
0005c7c8 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00024f28 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
0002144a l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014bd6 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
0002c41c l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00010dbd l       .debug_str	00000000 
0005e82a l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
00018bb4 l       .debug_str	00000000 
0005de78 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00010dc6 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00010dd4 l       .debug_str	00000000 
00010ddc l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00010de4 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
0000ffe9 l       .debug_str	00000000 
00010e00 l       .debug_str	00000000 
00027415 l       .debug_str	00000000 
00027482 l       .debug_str	00000000 
00027518 l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
000119d3 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000119d9 l       .debug_str	00000000 
000119dc l       .debug_str	00000000 
00011a05 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
00011a6b l       .debug_str	00000000 
00011abb l       .debug_str	00000000 
00011b18 l       .debug_str	00000000 
0001c514 l       .debug_str	00000000 
0001c58b l       .debug_str	00000000 
0001c60f l       .debug_str	00000000 
0001c68a l       .debug_str	00000000 
0001c728 l       .debug_str	00000000 
0001c7d3 l       .debug_str	00000000 
000275d7 l       .debug_str	00000000 
0002769c l       .debug_str	00000000 
0002776e l       .debug_str	00000000 
00027837 l       .debug_str	00000000 
00027921 l       .debug_str	00000000 
00027a28 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0002b3f3 l       .debug_str	00000000 
0002884c l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002b9a6 l       .debug_str	00000000 
0002ba86 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
0002652c l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
00018baf l       .debug_str	00000000 
0002bb84 l       .debug_str	00000000 
0002bb8b l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0002bb93 l       .debug_str	00000000 
0002bba7 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0002bbd9 l       .debug_str	00000000 
0002bbed l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0002bc1f l       .debug_str	00000000 
0002bc5e l       .debug_str	00000000 
0002bc6c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2nk42jtdlqpdrpvo
0001c514 l       .debug_str	00000000 
0002c5b8 l       .debug_str	00000000 
000196dc l       .debug_str	00000000 
000197c8 l       .debug_str	00000000 
000198c1 l       .debug_str	00000000 
0002c6ab l       .debug_str	00000000 
0002c723 l       .debug_str	00000000 
0002c83d l       .debug_str	00000000 
0002c8b5 l       .debug_str	00000000 
0001c58b l       .debug_str	00000000 
0001c60f l       .debug_str	00000000 
0001c68a l       .debug_str	00000000 
0001c728 l       .debug_str	00000000 
0001c7d3 l       .debug_str	00000000 
0002c981 l       .debug_str	00000000 
0002c9f9 l       .debug_str	00000000 
0002cac5 l       .debug_str	00000000 
0002cb3d l       .debug_str	00000000 
0002cbe2 l       .debug_str	00000000 
0002cc5a l       .debug_str	00000000 
0002ccd8 l       .debug_str	00000000 
0002cd50 l       .debug_str	00000000 
0002cda7 l       .debug_str	00000000 
0002ce1f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000119d3 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000119d9 l       .debug_str	00000000 
000119dc l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00011a05 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
00011a6b l       .debug_str	00000000 
00011abb l       .debug_str	00000000 
00011b18 l       .debug_str	00000000 
0002c44a l       .debug_str	00000000 
0002c4c2 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0001901a l       .debug_str	00000000 
0001906a l       .debug_str	00000000 
000190c7 l       .debug_str	00000000 
0001911b l       .debug_str	00000000 
00019192 l       .debug_str	00000000 
00019216 l       .debug_str	00000000 
00019291 l       .debug_str	00000000 
0001932f l       .debug_str	00000000 
000193da l       .debug_str	00000000 
0001947c l       .debug_str	00000000 
00019541 l       .debug_str	00000000 
00019613 l       .debug_str	00000000 
0002c540 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3ulq1z5tkxz9njop
00001b71 l       .debug_str	00000000 
0002cf8d l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00005d81 l       .debug_str	00000000 
00005d77 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00007a6e l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0002cec4 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0002cf28 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4f0czol4b3uljl4v
00000d05 l       .debug_str	00000000 
0002d10b l       .debug_str	00000000 
00024f13 l       .debug_str	00000000 
00025ed1 l       .debug_str	00000000 
0002d12a l       .debug_str	00000000 
0002d1a8 l       .debug_str	00000000 
0002d238 l       .debug_str	00000000 
0002d24f l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0001739c l       .debug_str	00000000 
0000f26f l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
000073a5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002cff2 l       .debug_str	00000000 
0002d07e l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00025842 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00025bdd l       .debug_str	00000000 
0001c28c l       .debug_str	00000000 
0005c7c8 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00024f28 l       .debug_str	00000000 
0002d08d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n9jsiq8blzioqfk
0002d69f l       .debug_str	00000000 
0002d5e3 l       .debug_str	00000000 
0002d600 l       .debug_str	00000000 
0002d609 l       .debug_str	00000000 
0002d64f l       .debug_str	00000000 
0002d658 l       .debug_str	00000000 
0002d8d4 l       .debug_str	00000000 
0002d6e8 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0000f26f l       .debug_str	00000000 
0002d6f4 l       .debug_str	00000000 
0002d770 l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0001739c l       .debug_str	00000000 
0002d79b l       .debug_str	00000000 
0002d817 l       .debug_str	00000000 
0002d849 l       .debug_str	00000000 
0002d8cf l       .debug_str	00000000 
0002d8de l       .debug_str	00000000 
0002d238 l       .debug_str	00000000 
0002d94f l       .debug_str	00000000 
0002d9c3 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002d9cd l       .debug_str	00000000 
0002d9da l       .debug_str	00000000 
0002da51 l       .debug_str	00000000 
0002da6b l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
000583b6 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002d2d6 l       .debug_str	00000000 
0002d2ff l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00007802 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00025842 l       .debug_str	00000000 
0002b4f1 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00005d77 l       .debug_str	00000000 
0002b4fe l       .debug_str	00000000 
0002d374 l       .debug_str	00000000 
0002d30c l       .debug_str	00000000 
0002d34e l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0002d362 l       .debug_str	00000000 
0005d37d l       .debug_str	00000000 
00007388 l       .debug_str	00000000 
00048c0a l       .debug_str	00000000 
0001ce04 l       .debug_str	00000000 
0001c28c l       .debug_str	00000000 
0005c7c8 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00024f28 l       .debug_str	00000000 
0002d37e l       .debug_str	00000000 
0002d3a7 l       .debug_str	00000000 
00024f13 l       .debug_str	00000000 
00024f2e l       .debug_str	00000000 
0001d13d l       .debug_str	00000000 
00024f4b l       .debug_str	00000000 
00024f64 l       .debug_str	00000000 
0002d43f l       .debug_str	00000000 
0002d3c4 l       .debug_str	00000000 
0002d409 l       .debug_str	00000000 
0002d42d l       .debug_str	00000000 
0002d45c l       .debug_str	00000000 
00030e95 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
0002584d l       .debug_str	00000000 
0002d48f l       .debug_str	00000000 
00030ef3 l       .debug_str	00000000 
0002a4e5 l       .debug_str	00000000 
0002d4c2 l       .debug_str	00000000 
00030f75 l       .debug_str	00000000 
00025ed1 l       .debug_str	00000000 
0002d4f9 l       .debug_str	00000000 
00030ff9 l       .debug_str	00000000 
00025bdd l       .debug_str	00000000 
0002d530 l       .debug_str	00000000 
0002d57e l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
0002d58e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4z4uczzv8d994j8w
00001b71 l       .debug_str	00000000 
0002db9b l       .debug_str	00000000 
0002dbed l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00058907 l       .debug_str	00000000 
00007388 l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000062a7 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002da8c l       .debug_str	00000000 
0002dada l       .debug_str	00000000 
0001ce04 l       .debug_str	00000000 
0002dae3 l       .debug_str	00000000 
0002db33 l       .debug_str	00000000 
0002db3e l       .debug_str	00000000 
0002db8f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 vnkfcw75uydipan
0002dd09 l       .debug_str	00000000 
00024f28 l       .debug_str	00000000 
00024f13 l       .debug_str	00000000 
00024f2e l       .debug_str	00000000 
0002dbfa l       .debug_str	00000000 
0002dc45 l       .debug_str	00000000 
0002dc58 l       .debug_str	00000000 
0002dca3 l       .debug_str	00000000 
0002dcc6 l       .debug_str	00000000 
0001d13d l       .debug_str	00000000 
0002dd25 l       .debug_str	00000000 
0002d6e8 l       .debug_str	00000000 
0001ce04 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00007802 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00025842 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002b4f1 l       .debug_str	00000000 
0001c28c l       .debug_str	00000000 
0005c7c8 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3ik332mkg6tevaet
00016188 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001dedd l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018a35 l       .debug_str	00000000 
0001e0c3 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
0001e0bc l       .debug_str	00000000 
0002dd68 l       .debug_str	00000000 
00001be1 l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00002249 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2bp05xqc1vzz7bvb
00014b64 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005c4e8 l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
0002de2d l       .debug_str	00000000 
00002dbd l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4fx9oaepmfmbf8wt
00058907 l       .debug_str	00000000 
0002dfb8 l       .debug_str	00000000 
0002dfd4 l       .debug_str	00000000 
0002dffa l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
0000d93c l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005b857 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002de8f l       .debug_str	00000000 
00007864 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
0002deb8 l       .debug_str	00000000 
0002dec9 l       .debug_str	00000000 
0002ded9 l       .debug_str	00000000 
0002df25 l       .debug_str	00000000 
0002df30 l       .debug_str	00000000 
0002df66 l       .debug_str	00000000 
0002df7e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 13ma8mzaba1sllzw
0002343f l       .debug_str	00000000 
0003c34b l       .debug_str	00000000 
0000eed4 l       .debug_str	00000000 
0002e7bf l       .debug_str	00000000 
0002392c l       .debug_str	00000000 
0002e83e l       .debug_str	00000000 
000236fc l       .debug_str	00000000 
0002e8bd l       .debug_str	00000000 
0002e93f l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
0002eb35 l       .debug_str	00000000 
0002ebb7 l       .debug_str	00000000 
0002ec00 l       .debug_str	00000000 
0002ec82 l       .debug_str	00000000 
0002ee78 l       .debug_str	00000000 
0002eefa l       .debug_str	00000000 
0002ef43 l       .debug_str	00000000 
0002efc5 l       .debug_str	00000000 
0002f1bb l       .debug_str	00000000 
0002f23d l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
0002f286 l       .debug_str	00000000 
0002f2fa l       .debug_str	00000000 
000022c7 l       .debug_str	00000000 
0000c922 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00007802 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
000334b6 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00007813 l       .debug_str	00000000 
0001679c l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
0002b510 l       .debug_str	00000000 
0002f51b l       .debug_str	00000000 
0002f738 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00010dbd l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005de78 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00010dc6 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00010dd4 l       .debug_str	00000000 
00010ddc l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00010de4 l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000119d3 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000119d9 l       .debug_str	00000000 
000119dc l       .debug_str	00000000 
00011a05 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
00014747 l       .debug_str	00000000 
00014795 l       .debug_str	00000000 
00014800 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0002f298 l       .debug_str	00000000 
0000ffe9 l       .debug_str	00000000 
00010e00 l       .debug_str	00000000 
00010e45 l       .debug_str	00000000 
00010eb3 l       .debug_str	00000000 
00010f4a l       .debug_str	00000000 
0001100a l       .debug_str	00000000 
000110f3 l       .debug_str	00000000 
00011205 l       .debug_str	00000000 
00011340 l       .debug_str	00000000 
000114a4 l       .debug_str	00000000 
00011631 l       .debug_str	00000000 
000117e7 l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
00011a6b l       .debug_str	00000000 
00011abb l       .debug_str	00000000 
00011b18 l       .debug_str	00000000 
00011b6c l       .debug_str	00000000 
00011be3 l       .debug_str	00000000 
00011c67 l       .debug_str	00000000 
00011ce2 l       .debug_str	00000000 
00011d80 l       .debug_str	00000000 
00011e2b l       .debug_str	00000000 
00011ecd l       .debug_str	00000000 
00011f92 l       .debug_str	00000000 
00012064 l       .debug_str	00000000 
0001212d l       .debug_str	00000000 
00012219 l       .debug_str	00000000 
00012312 l       .debug_str	00000000 
00012402 l       .debug_str	00000000 
00012515 l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
0001274c l       .debug_str	00000000 
00012886 l       .debug_str	00000000 
000129cd l       .debug_str	00000000 
00012b0b l       .debug_str	00000000 
00012c6c l       .debug_str	00000000 
00012dda l       .debug_str	00000000 
00012f3f l       .debug_str	00000000 
000130c7 l       .debug_str	00000000 
0001325c l       .debug_str	00000000 
000133e8 l       .debug_str	00000000 
00013597 l       .debug_str	00000000 
00013753 l       .debug_str	00000000 
00013906 l       .debug_str	00000000 
00013adc l       .debug_str	00000000 
00013cbf l       .debug_str	00000000 
00013e99 l       .debug_str	00000000 
00014094 l       .debug_str	00000000 
000142ac l       .debug_str	00000000 
0002f30c l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002e003 l       .debug_str	00000000 
0002e08a l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00001680 l       .debug_str	00000000 
0002e0d7 l       .debug_str	00000000 
0002e15e l       .debug_str	00000000 
0002e358 l       .debug_str	00000000 
0002e3e1 l       .debug_str	00000000 
0002e5dd l       .debug_str	00000000 
0002e666 l       .debug_str	00000000 
0002e6b5 l       .debug_str	00000000 
0002e741 l       .debug_str	00000000 
0002367a l       .debug_str	00000000 
0001fbe0 l     O .text	0000001c str.0
0001fc20 l     O .text	00000021 str.1
00000000 l    df *ABS*	00000000 4miap3quw76e3k6m
00000beb l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000062a7 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0005ef2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002f7a8 l       .debug_str	00000000 
0001557f l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4yl298udq4i2eqhh
00001b71 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00007a6e l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0002f7f8 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 f8ebwo3yn0ryfmw
0002fea4 l       .debug_str	00000000 
000129cd l       .debug_str	00000000 
00012b0b l       .debug_str	00000000 
00012c6c l       .debug_str	00000000 
00012dda l       .debug_str	00000000 
0002fabd l       .debug_str	00000000 
0002fb35 l       .debug_str	00000000 
0002fcc4 l       .debug_str	00000000 
0002fd3c l       .debug_str	00000000 
0002ff1c l       .debug_str	00000000 
0002ff9a l       .debug_str	00000000 
00030012 l       .debug_str	00000000 
00012f3f l       .debug_str	00000000 
000130c7 l       .debug_str	00000000 
0001325c l       .debug_str	00000000 
000133e8 l       .debug_str	00000000 
00013597 l       .debug_str	00000000 
00013753 l       .debug_str	00000000 
00030105 l       .debug_str	00000000 
0003017d l       .debug_str	00000000 
0003035a l       .debug_str	00000000 
000303d2 l       .debug_str	00000000 
0003049e l       .debug_str	00000000 
00030516 l       .debug_str	00000000 
00030546 l       .debug_str	00000000 
000305be l       .debug_str	00000000 
00030663 l       .debug_str	00000000 
000306db l       .debug_str	00000000 
0003081c l       .debug_str	00000000 
00030894 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000119d3 l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000119d9 l       .debug_str	00000000 
000119dc l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00011a05 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
00011a3b l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
0002f85c l       .debug_str	00000000 
0002f8d4 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00011a6b l       .debug_str	00000000 
00011abb l       .debug_str	00000000 
00011b18 l       .debug_str	00000000 
00011b6c l       .debug_str	00000000 
00011be3 l       .debug_str	00000000 
00011c67 l       .debug_str	00000000 
00011ce2 l       .debug_str	00000000 
00011d80 l       .debug_str	00000000 
00011e2b l       .debug_str	00000000 
00011ecd l       .debug_str	00000000 
00011f92 l       .debug_str	00000000 
00012064 l       .debug_str	00000000 
0001212d l       .debug_str	00000000 
00012219 l       .debug_str	00000000 
00012312 l       .debug_str	00000000 
0002f92b l       .debug_str	00000000 
0002f9a3 l       .debug_str	00000000 
00012402 l       .debug_str	00000000 
00012515 l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
0001274c l       .debug_str	00000000 
00012886 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 16gyyaet005v3lvf
0002477d l       .debug_str	00000000 
00030a4a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00030aaa l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1gec8qpvo4ti2nbg
0000996c l       .debug_str	00000000 
0002db8f l       .debug_str	00000000 
00030c0e l       .debug_str	00000000 
0002dbed l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00007388 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00058907 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000062af l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00030b0a l       .debug_str	00000000 
0002dada l       .debug_str	00000000 
00025842 l       .debug_str	00000000 
00030b5c l       .debug_str	00000000 
00030baf l       .debug_str	00000000 
00030bb9 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 28buxl9xaffr9rke
000584e9 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00030c64 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00005d77 l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2leljxexqh8ze7wz
00033a4f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
000022cc l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00030cc1 l       .debug_str	00000000 
00059da4 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3cgt5uexdtuxl7pe
00031011 l       .debug_str	00000000 
00030f17 l       .debug_str	00000000 
00030f34 l       .debug_str	00000000 
00030f6f l       .debug_str	00000000 
00030f9d l       .debug_str	00000000 
00030fb8 l       .debug_str	00000000 
00030ff3 l       .debug_str	00000000 
0003101c l       .debug_str	00000000 
00030baf l       .debug_str	00000000 
00031042 l       .debug_str	00000000 
00031068 l       .debug_str	00000000 
00031082 l       .debug_str	00000000 
0002db33 l       .debug_str	00000000 
000310a9 l       .debug_str	00000000 
000310d0 l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
0001d13d l       .debug_str	00000000 
0001ce04 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0005b857 l       .debug_str	00000000 
00058b61 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00030d32 l       .debug_str	00000000 
00030d44 l       .debug_str	00000000 
00030d55 l       .debug_str	00000000 
00030da1 l       .debug_str	00000000 
0001c28c l       .debug_str	00000000 
0005c7c8 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00024f28 l       .debug_str	00000000 
00030dad l       .debug_str	00000000 
00030dcf l       .debug_str	00000000 
00030df0 l       .debug_str	00000000 
00030e3c l       .debug_str	00000000 
00030e58 l       .debug_str	00000000 
00030e8f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00025842 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00030ea9 l       .debug_str	00000000 
00030eb6 l       .debug_str	00000000 
00030eed l       .debug_str	00000000 
00024f13 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 27tt2oece7npu1p2
00007281 l       .debug_str	00000000 
000072bb l       .debug_str	00000000 
000072f4 l       .debug_str	00000000 
00007303 l       .debug_str	00000000 
00007346 l       .debug_str	00000000 
00059e32 l       .debug_str	00000000 
000367bd l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000618f l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00004f14 l       .debug_str	00000000 
000061a9 l       .debug_str	00000000 
000072fd l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000310eb l       .debug_str	00000000 
000061d6 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00031114 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19nunfeq6523tst5
0002477d l       .debug_str	00000000 
00031150 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000311b0 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
00033670 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1xpo0qpsduc6enem
0003127c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
000119ce l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00031210 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4xxoizn3g1nl6m5i
00033a4f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
000022cc l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00031285 l       .debug_str	00000000 
00059da4 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 25lz0dio8kzdubcg
00007261 l       .debug_str	00000000 
00058907 l       .debug_str	00000000 
00024f13 l       .debug_str	00000000 
0001d13d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000188d1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0000614c l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000312f6 l       .debug_str	00000000 
00031334 l       .debug_str	00000000 
0001c28c l       .debug_str	00000000 
0005c7c8 l       .debug_str	00000000 
0000d930 l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
0000d936 l       .debug_str	00000000 
00024f28 l       .debug_str	00000000 
0003134d l       .debug_str	00000000 
0003138b l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00025842 l       .debug_str	00000000 
00058b61 l       .debug_str	00000000 
0001ce04 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 core.b09zx0wt-cgu.0
00000afc l       .debug_str	00000000 
000313b4 l       .debug_str	00000000 
000313c7 l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0005c704 l       .debug_str	00000000 
000313f8 l       .debug_str	00000000 
00031400 l       .debug_str	00000000 
00031409 l       .debug_str	00000000 
00031452 l       .debug_str	00000000 
0001054f l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00031410 l       .debug_str	00000000 
0003144f l       .debug_str	00000000 
00031458 l       .debug_str	00000000 
0003149a l       .debug_str	00000000 
000314a4 l       .debug_str	00000000 
000314e7 l       .debug_str	00000000 
000314f1 l       .debug_str	00000000 
00031534 l       .debug_str	00000000 
0003153e l       .debug_str	00000000 
00031581 l       .debug_str	00000000 
0003158c l       .debug_str	00000000 
000315d1 l       .debug_str	00000000 
000315dc l       .debug_str	00000000 
00031621 l       .debug_str	00000000 
00031627 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bd1b l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00031c5c l       .debug_str	00000000 
00004f14 l       .debug_str	00000000 
00031634 l       .debug_str	00000000 
00031644 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
00001c9e l       .debug_str	00000000 
00002287 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00002e51 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00007802 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000334b6 l       .debug_str	00000000 
0005f020 l       .debug_str	00000000 
0000780b l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00014b64 l       .debug_str	00000000 
00007813 l       .debug_str	00000000 
0001679c l       .debug_str	00000000 
0001887a l       .debug_str	00000000 
0000d2f9 l       .debug_str	00000000 
0003168a l       .debug_str	00000000 
00015958 l       .debug_str	00000000 
0005d473 l       .debug_str	00000000 
00032060 l       .debug_str	00000000 
0000228f l       .debug_str	00000000 
0005d085 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000007da l       .debug_str	00000000 
000588db l       .debug_str	00000000 
0003169c l       .debug_str	00000000 
000316a1 l       .debug_str	00000000 
0005e9fb l       .debug_str	00000000 
000316ac l       .debug_str	00000000 
00000326 l       .debug_str	00000000 
000316b6 l       .debug_str	00000000 
00031d2a l       .debug_str	00000000 
000316c0 l       .debug_str	00000000 
00007261 l       .debug_str	00000000 
00031d6a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
000320a3 l       .debug_str	00000000 
00002299 l       .debug_str	00000000 
000022a2 l       .debug_str	00000000 
000316ce l       .debug_str	00000000 
00031742 l       .debug_str	00000000 
00031f84 l       .debug_str	00000000 
00031754 l       .debug_str	00000000 
00031d70 l       .debug_str	00000000 
00031d4a l       .debug_str	00000000 
0002026a l       .debug_str	00000000 
00031fc7 l       .debug_str	00000000 
00031759 l       .debug_str	00000000 
000317cd l       .debug_str	00000000 
000320dc l       .debug_str	00000000 
00032123 l       .debug_str	00000000 
00032029 l       .debug_str	00000000 
000317e5 l       .debug_str	00000000 
000418b8 l       .debug_str	00000000 
00036fd7 l       .debug_str	00000000 
0005888a l       .debug_str	00000000 
0003213e l       .debug_str	00000000 
00031ff8 l       .debug_str	00000000 
0003185d l       .debug_str	00000000 
0000f889 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c691 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
000318b5 l       .debug_str	00000000 
000318ba l       .debug_str	00000000 
000318cc l       .debug_str	00000000 
0000996c l       .debug_str	00000000 
000327bc l       .debug_str	00000000 
000318d5 l       .debug_str	00000000 
00007a5b l       .debug_str	00000000 
000318fd l       .debug_str	00000000 
0003190d l       .debug_str	00000000 
0005ad2d l       .debug_str	00000000 
00031966 l       .debug_str	00000000 
0003196e l       .debug_str	00000000 
0001ee86 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000ecb l       .debug_str	00000000 
00031976 l       .debug_str	00000000 
00021806 l       .debug_str	00000000 
00031982 l       .debug_str	00000000 
0003198c l       .debug_str	00000000 
00031999 l       .debug_str	00000000 
000319a6 l       .debug_str	00000000 
000319bb l       .debug_str	00000000 
000319cf l       .debug_str	00000000 
000319e5 l       .debug_str	00000000 
000319ed l       .debug_str	00000000 
000319fa l       .debug_str	00000000 
00031a07 l       .debug_str	00000000 
00032310 l       .debug_str	00000000 
00018a52 l       .debug_str	00000000 
00031a14 l       .debug_str	00000000 
00031a41 l       .debug_str	00000000 
00031a70 l       .debug_str	00000000 
00031a97 l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
000016d2 l       .debug_str	00000000 
00031ab6 l       .debug_str	00000000 
00031acb l       .debug_str	00000000 
00021909 l       .debug_str	00000000 
0004c75c l       .debug_str	00000000 
00005f03 l       .debug_str	00000000 
000584e9 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00031ad5 l       .debug_str	00000000 
00031afa l       .debug_str	00000000 
00031ae0 l       .debug_str	00000000 
00031b79 l       .debug_str	00000000 
00031b0a l       .debug_str	00000000 
00031b10 l       .debug_str	00000000 
00031b1f l       .debug_str	00000000 
00031b2a l       .debug_str	00000000 
00031b5f l       .debug_str	00000000 
00031b84 l       .debug_str	00000000 
00031b94 l       .debug_str	00000000 
000590f3 l       .debug_str	00000000 
00031bc6 l       .debug_str	00000000 
00031bcb l       .debug_str	00000000 
00059f96 l       .debug_str	00000000 
00033430 l       .debug_str	00000000 
00033429 l       .debug_str	00000000 
00007a6e l       .debug_str	00000000 
00033457 l       .debug_str	00000000 
0003348b l       .debug_str	00000000 
00031bd1 l       .debug_str	00000000 
00006221 l       .debug_str	00000000 
00031c0f l       .debug_str	00000000 
00033434 l       .debug_str	00000000 
00033481 l       .debug_str	00000000 
00031bf0 l       .debug_str	00000000 
00031bdd l       .debug_str	00000000 
00031bf6 l       .debug_str	00000000 
000187c1 l       .debug_str	00000000 
00016188 l       .debug_str	00000000 
00016187 l       .debug_str	00000000 
00031c1e l       .debug_str	00000000 
00031c26 l       .debug_str	00000000 
0003d0ef l       .debug_str	00000000 
00031c2c l       .debug_str	00000000 
0004ac1a l       .debug_str	00000000 
00031c53 l       .debug_str	00000000 
00031c37 l       .debug_str	00000000 
0001bd1a l       .debug_str	00000000 
00031c5b l       .debug_str	00000000 
00031907 l       .debug_str	00000000 
00016644 l       .debug_str	00000000 
000187da l       .debug_str	00000000 
00031c60 l       .debug_str	00000000 
00031c84 l       .debug_str	00000000 
00031c8a l       .debug_str	00000000 
00031c92 l       .debug_str	00000000 
0004d285 l       .debug_str	00000000 
0003cceb l       .debug_str	00000000 
00031c97 l       .debug_str	00000000 
00031cbf l       .debug_str	00000000 
00031ca1 l       .debug_str	00000000 
00025849 l       .debug_str	00000000 
00005d77 l       .debug_str	00000000 
000217a4 l       .debug_str	00000000 
0000c9ce l       .debug_str	00000000 
0001664c l       .debug_str	00000000 
00016659 l       .debug_str	00000000 
00016662 l       .debug_str	00000000 
00057851 l       .debug_str	00000000 
00031cd3 l       .debug_str	00000000 
00031cc7 l       .debug_str	00000000 
000022cc l       .debug_str	00000000 
00031ce0 l       .debug_str	00000000 
00031cec l       .debug_str	00000000 
00031d0f l       .debug_str	00000000 
00031cf9 l       .debug_str	00000000 
00031d1d l       .debug_str	00000000 
00031d3d l       .debug_str	00000000 
00031d5d l       .debug_str	00000000 
00031d78 l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
00031d99 l       .debug_str	00000000 
00031d9d l       .debug_str	00000000 
00031dae l       .debug_str	00000000 
00031da1 l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
00031dc3 l       .debug_str	00000000 
00031dbe l       .debug_str	00000000 
00031dd6 l       .debug_str	00000000 
00031e22 l       .debug_str	00000000 
00031dfb l       .debug_str	00000000 
00031e12 l       .debug_str	00000000 
00031e3c l       .debug_str	00000000 
00031e2d l       .debug_str	00000000 
00031e84 l       .debug_str	00000000 
00031e64 l       .debug_str	00000000 
00031edd l       .debug_str	00000000 
00031ebd l       .debug_str	00000000 
00057843 l       .debug_str	00000000 
00031f34 l       .debug_str	00000000 
00031f39 l       .debug_str	00000000 
00031f3f l       .debug_str	00000000 
00031f62 l       .debug_str	00000000 
00031f44 l       .debug_str	00000000 
00031f6d l       .debug_str	00000000 
00031fb8 l       .debug_str	00000000 
00031fe9 l       .debug_str	00000000 
0003201a l       .debug_str	00000000 
00032049 l       .debug_str	00000000 
00032094 l       .debug_str	00000000 
000320c5 l       .debug_str	00000000 
00007824 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00037701 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00037217 l       .debug_str	00000000 
0005a900 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0005ef3a l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0000d2fe l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001b50 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00058572 l       .debug_str	00000000 
00058473 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00058abb l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c8f2 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
0000ca63 l       .debug_str	00000000 
0000c8a0 l       .debug_str	00000000 
00032116 l       .debug_str	00000000 
0003212f l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
0003215d l       .debug_str	00000000 
0003215c l       .debug_str	00000000 
00032171 l       .debug_str	00000000 
00032162 l       .debug_str	00000000 
00058564 l       .debug_str	00000000 
00057831 l       .debug_str	00000000 
00000e0b l       .debug_str	00000000 
0003219e l       .debug_str	00000000 
00032190 l       .debug_str	00000000 
0003218f l       .debug_str	00000000 
0000c9d7 l       .debug_str	00000000 
00005d81 l       .debug_str	00000000 
0005f370 l       .debug_str	00000000 
000321a7 l       .debug_str	00000000 
000321ab l       .debug_str	00000000 
000321ae l       .debug_str	00000000 
0005de60 l       .debug_str	00000000 
00005d09 l       .debug_str	00000000 
000321b1 l       .debug_str	00000000 
00007416 l       .debug_str	00000000 
000321b5 l       .debug_str	00000000 
000321b4 l       .debug_str	00000000 
000321ba l       .debug_str	00000000 
0003228c l       .debug_str	00000000 
00000238 l       .debug_str	00000000 
000321d8 l       .debug_str	00000000 
000321c6 l       .debug_str	00000000 
000321fd l       .debug_str	00000000 
000322c5 l       .debug_str	00000000 
0003221b l       .debug_str	00000000 
00032209 l       .debug_str	00000000 
00032240 l       .debug_str	00000000 
00032259 l       .debug_str	00000000 
00032247 l       .debug_str	00000000 
00032265 l       .debug_str	00000000 
0003227d l       .debug_str	00000000 
000322b6 l       .debug_str	00000000 
0000741c l       .debug_str	00000000 
000322ef l       .debug_str	00000000 
000322fc l       .debug_str	00000000 
000322fb l       .debug_str	00000000 
00032304 l       .debug_str	00000000 
00032331 l       .debug_str	00000000 
0003231c l       .debug_str	00000000 
0003234e l       .debug_str	00000000 
0003235a l       .debug_str	00000000 
00032404 l       .debug_str	00000000 
00032366 l       .debug_str	00000000 
0003236d l       .debug_str	00000000 
00032376 l       .debug_str	00000000 
00032384 l       .debug_str	00000000 
0003238b l       .debug_str	00000000 
00032393 l       .debug_str	00000000 
0003239a l       .debug_str	00000000 
000323e0 l       .debug_str	00000000 
000323bb l       .debug_str	00000000 
000323a6 l       .debug_str	00000000 
000323cb l       .debug_str	00000000 
000323ef l       .debug_str	00000000 
0001bd39 l       .debug_str	00000000 
00032410 l       .debug_str	00000000 
000187ed l       .debug_str	00000000 
0005bd4a l       .debug_str	00000000 
0000c813 l       .debug_str	00000000 
0000c7fc l       .debug_str	00000000 
0003242a l       .debug_str	00000000 
0003244d l       .debug_str	00000000 
00032436 l       .debug_str	00000000 
00032497 l       .debug_str	00000000 
0003248b l       .debug_str	00000000 
00031902 l       .debug_str	00000000 
000324b4 l       .debug_str	00000000 
0003249d l       .debug_str	00000000 
000324fd l       .debug_str	00000000 
00032525 l       .debug_str	00000000 
0003250e l       .debug_str	00000000 
0005a8ee l       .debug_str	00000000 
0000de37 l       .debug_str	00000000 
00058979 l       .debug_str	00000000 
000325d4 l       .debug_str	00000000 
000325b6 l       .debug_str	00000000 
000326ca l       .debug_str	00000000 
000326aa l       .debug_str	00000000 
0003273d l       .debug_str	00000000 
0003271d l       .debug_str	00000000 
00048d43 l       .debug_str	00000000 
00032790 l       .debug_str	00000000 
0003279d l       .debug_str	00000000 
000327a8 l       .debug_str	00000000 
000327be l       .debug_str	00000000 
000327c8 l       .debug_str	00000000 
0003281e l       .debug_str	00000000 
00032830 l       .debug_str	00000000 
00032882 l       .debug_str	00000000 
00032896 l       .debug_str	00000000 
000328ea l       .debug_str	00000000 
000328f1 l       .debug_str	00000000 
00032937 l       .debug_str	00000000 
00032946 l       .debug_str	00000000 
000329a0 l       .debug_str	00000000 
000329f6 l       .debug_str	00000000 
00032a4e l       .debug_str	00000000 
00032a98 l       .debug_str	00000000 
00032a9e l       .debug_str	00000000 
00032aee l       .debug_str	00000000 
00032b3a l       .debug_str	00000000 
00032b88 l       .debug_str	00000000 
00018893 l       .debug_str	00000000 
00032bc8 l       .debug_str	00000000 
00032c15 l       .debug_str	00000000 
00032c5e l       .debug_str	00000000 
00032ca9 l       .debug_str	00000000 
00032ce6 l       .debug_str	00000000 
00032cf6 l       .debug_str	00000000 
00032d51 l       .debug_str	00000000 
00032da8 l       .debug_str	00000000 
00032e01 l       .debug_str	00000000 
000400d7 l       .debug_str	00000000 
00032e4c l       .debug_str	00000000 
00032ea0 l       .debug_str	00000000 
00032ef0 l       .debug_str	00000000 
00032f42 l       .debug_str	00000000 
000583e5 l       .debug_str	00000000 
00032f86 l       .debug_str	00000000 
00032fd2 l       .debug_str	00000000 
0003301a l       .debug_str	00000000 
00033064 l       .debug_str	00000000 
0003ff0d l       .debug_str	00000000 
000330a0 l       .debug_str	00000000 
000330f4 l       .debug_str	00000000 
00033144 l       .debug_str	00000000 
00033196 l       .debug_str	00000000 
000331da l       .debug_str	00000000 
000331e6 l       .debug_str	00000000 
0003323d l       .debug_str	00000000 
00033290 l       .debug_str	00000000 
000332e5 l       .debug_str	00000000 
0003332c l       .debug_str	00000000 
00033338 l       .debug_str	00000000 
0003334f l       .debug_str	00000000 
00033348 l       .debug_str	00000000 
00033361 l       .debug_str	00000000 
00033376 l       .debug_str	00000000 
000333c7 l       .debug_str	00000000 
000333d7 l       .debug_str	00000000 
00033428 l       .debug_str	00000000 
00033433 l       .debug_str	00000000 
00033456 l       .debug_str	00000000 
0003348a l       .debug_str	00000000 
000334a0 l       .debug_str	00000000 
000334ce l       .debug_str	00000000 
000334c2 l       .debug_str	00000000 
000334dc l       .debug_str	00000000 
000334db l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
00005d6d l       .debug_str	00000000 
00018800 l       .debug_str	00000000 
000187ff l       .debug_str	00000000 
00018805 l       .debug_str	00000000 
00018804 l       .debug_str	00000000 
000334df l       .debug_str	00000000 
0003351f l       .debug_str	00000000 
00033527 l       .debug_str	00000000 
00033567 l       .debug_str	00000000 
00033571 l       .debug_str	00000000 
0005797d l       .debug_str	00000000 
0005c4e8 l       .debug_str	00000000 
000335ad l       .debug_str	00000000 
000085ef l       .debug_str	00000000 
000363cd l       .debug_str	00000000 
000335d5 l       .debug_str	00000000 
000084a7 l       .debug_str	00000000 
000335fe l       .debug_str	00000000 
00033623 l       .debug_str	00000000 
0004455b l       .debug_str	00000000 
000589d3 l       .debug_str	00000000 
0003362a l       .debug_str	00000000 
00033633 l       .debug_str	00000000 
0003366c l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
00033674 l       .debug_str	00000000 
00006a21 l       .debug_str	00000000 
00033709 l       .debug_str	00000000 
000066dc l       .debug_str	00000000 
00033754 l       .debug_str	00000000 
00006685 l       .debug_str	00000000 
0003379b l       .debug_str	00000000 
0000635c l       .debug_str	00000000 
000337f0 l       .debug_str	00000000 
0003382d l       .debug_str	00000000 
000062af l       .debug_str	00000000 
00033838 l       .debug_str	00000000 
00009320 l       .debug_str	00000000 
0003388d l       .debug_str	00000000 
000092b0 l       .debug_str	00000000 
000338df l       .debug_str	00000000 
00014f55 l       .debug_str	00000000 
00033926 l       .debug_str	00000000 
00014f50 l       .debug_str	00000000 
0000e34f l       .debug_str	00000000 
00002471 l       .debug_str	00000000 
00034330 l       .debug_str	00000000 
000339ac l       .debug_str	00000000 
000339ed l       .debug_str	00000000 
00033a10 l       .debug_str	00000000 
00033a4b l       .debug_str	00000000 
00033a55 l       .debug_str	00000000 
00033adf l       .debug_str	00000000 
00033b11 l       .debug_str	00000000 
0001823d l       .debug_str	00000000 
000062a7 l       .debug_str	00000000 
00033b85 l       .debug_str	00000000 
00033bd6 l       .debug_str	00000000 
00016777 l       .debug_str	00000000 
00033c18 l       .debug_str	00000000 
00033c9f l       .debug_str	00000000 
00033cae l       .debug_str	00000000 
00033d38 l       .debug_str	00000000 
00033db4 l       .debug_str	00000000 
00033de4 l       .debug_str	00000000 
00033e1f l       .debug_str	00000000 
00033e29 l       .debug_str	00000000 
0000f014 l       .debug_str	00000000 
00033ea0 l       .debug_str	00000000 
00033ef5 l       .debug_str	00000000 
00033efe l       .debug_str	00000000 
00033f4f l       .debug_str	00000000 
00010da2 l       .debug_str	00000000 
00033f5b l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
00033f68 l       .debug_str	00000000 
00033f71 l       .debug_str	00000000 
00033f87 l       .debug_str	00000000 
00033f94 l       .debug_str	00000000 
00033fd9 l       .debug_str	00000000 
00033fed l       .debug_str	00000000 
00034042 l       .debug_str	00000000 
0003404b l       .debug_str	00000000 
0004b1fa l       .debug_str	00000000 
00034083 l       .debug_str	00000000 
000340c0 l       .debug_str	00000000 
000340cb l       .debug_str	00000000 
0003414e l       .debug_str	00000000 
00034159 l       .debug_str	00000000 
000341df l       .debug_str	00000000 
00034254 l       .debug_str	00000000 
00034280 l       .debug_str	00000000 
00034309 l       .debug_str	00000000 
00034318 l       .debug_str	00000000 
00034325 l       .debug_str	00000000 
00034339 l       .debug_str	00000000 
0003438f l       .debug_str	00000000 
000343fe l       .debug_str	00000000 
0003447e l       .debug_str	00000000 
000344ec l       .debug_str	00000000 
00034577 l       .debug_str	00000000 
000345ec l       .debug_str	00000000 
0003462c l       .debug_str	00000000 
000346af l       .debug_str	00000000 
000346f0 l       .debug_str	00000000 
00048c05 l       .debug_str	00000000 
0004c71f l       .debug_str	00000000 
00034755 l       .debug_str	00000000 
00034804 l       .debug_str	00000000 
0003484f l       .debug_str	00000000 
0001fca7 l       .debug_str	00000000 
000348f8 l       .debug_str	00000000 
00034974 l       .debug_str	00000000 
0001666c l       .debug_str	00000000 
00034999 l       .debug_str	00000000 
00016531 l       .debug_str	00000000 
000349e6 l       .debug_str	00000000 
0001f310 l       .debug_str	00000000 
00034a39 l       .debug_str	00000000 
00034a74 l       .debug_str	00000000 
00034a7f l       .debug_str	00000000 
00006f45 l       .debug_str	00000000 
00034b0b l       .debug_str	00000000 
0001ef70 l       .debug_str	00000000 
00034b8e l       .debug_str	00000000 
00034c16 l       .debug_str	00000000 
0002226d l       .debug_str	00000000 
00034c8b l       .debug_str	00000000 
00034d11 l       .debug_str	00000000 
000201ae l       .debug_str	00000000 
00034d86 l       .debug_str	00000000 
00015d75 l       .debug_str	00000000 
00034de9 l       .debug_str	00000000 
00014fc0 l       .debug_str	00000000 
00034e4b l       .debug_str	00000000 
00014cc6 l       .debug_str	00000000 
00034e91 l       .debug_str	00000000 
00034ed9 l       .debug_str	00000000 
00034ee3 l       .debug_str	00000000 
00034f24 l       .debug_str	00000000 
00034f3e l       .debug_str	00000000 
000188b8 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
00034f44 l       .debug_str	00000000 
00034f4d l       .debug_str	00000000 
00034fb2 l       .debug_str	00000000 
00034fc1 l       .debug_str	00000000 
00035003 l       .debug_str	00000000 
0003500d l       .debug_str	00000000 
00035072 l       .debug_str	00000000 
000350b4 l       .debug_str	00000000 
000350fe l       .debug_str	00000000 
0003510d l       .debug_str	00000000 
00035143 l       .debug_str	00000000 
0003514c l       .debug_str	00000000 
00003ab6 l       .debug_str	00000000 
00035156 l       .debug_str	00000000 
00035159 l       .debug_str	00000000 
00035191 l       .debug_str	00000000 
0003519b l       .debug_str	00000000 
000351df l       .debug_str	00000000 
000351f5 l       .debug_str	00000000 
0003523e l       .debug_str	00000000 
00016fef l       .debug_str	00000000 
000188a3 l       .debug_str	00000000 
00035283 l       .debug_str	00000000 
000352cc l       .debug_str	00000000 
000352da l       .debug_str	00000000 
00035322 l       .debug_str	00000000 
00016f19 l       .debug_str	00000000 
0003536c l       .debug_str	00000000 
0003eb44 l       .debug_str	00000000 
00035404 l       .debug_str	00000000 
000583b6 l       .debug_str	00000000 
0003549e l       .debug_str	00000000 
0001741f l       .debug_str	00000000 
00035510 l       .debug_str	00000000 
00017141 l       .debug_str	00000000 
000355b3 l       .debug_str	00000000 
00002e4a l       .debug_str	00000000 
000355e5 l       .debug_str	00000000 
0003562c l       .debug_str	00000000 
0003563a l       .debug_str	00000000 
00035644 l       .debug_str	00000000 
00035692 l       .debug_str	00000000 
000356a2 l       .debug_str	00000000 
000356ed l       .debug_str	00000000 
000356fb l       .debug_str	00000000 
00035789 l       .debug_str	00000000 
00035798 l       .debug_str	00000000 
00016580 l       .debug_str	00000000 
000357e1 l       .debug_str	00000000 
00016529 l       .debug_str	00000000 
00035826 l       .debug_str	00000000 
00035860 l       .debug_str	00000000 
00035869 l       .debug_str	00000000 
000358b5 l       .debug_str	00000000 
000358cd l       .debug_str	00000000 
0003592f l       .debug_str	00000000 
0000668d l       .debug_str	00000000 
00035964 l       .debug_str	00000000 
0003598c l       .debug_str	00000000 
000359c4 l       .debug_str	00000000 
000359ed l       .debug_str	00000000 
000359f8 l       .debug_str	00000000 
00007780 l       .debug_str	00000000 
00035a1d l       .debug_str	00000000 
00035aac l       .debug_str	00000000 
00035ae3 l       .debug_str	00000000 
00035b69 l       .debug_str	00000000 
00035bb7 l       .debug_str	00000000 
00035bc0 l       .debug_str	00000000 
00035c46 l       .debug_str	00000000 
00035c59 l       .debug_str	00000000 
00035ce2 l       .debug_str	00000000 
00035d3e l       .debug_str	00000000 
00035d80 l       .debug_str	00000000 
00035e32 l       .debug_str	00000000 
00035e71 l       .debug_str	00000000 
00035f16 l       .debug_str	00000000 
00035faa l       .debug_str	00000000 
00035fd0 l       .debug_str	00000000 
0003604c l       .debug_str	00000000 
00036087 l       .debug_str	00000000 
00036094 l       .debug_str	00000000 
000360cd l       .debug_str	00000000 
000360e5 l       .debug_str	00000000 
00036125 l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
00036131 l       .debug_str	00000000 
0003618e l       .debug_str	00000000 
000361eb l       .debug_str	00000000 
00036298 l       .debug_str	00000000 
000362f5 l       .debug_str	00000000 
00021528 l       .debug_str	00000000 
00036362 l       .debug_str	00000000 
000363c6 l       .debug_str	00000000 
000363d1 l       .debug_str	00000000 
00036401 l       .debug_str	00000000 
0003642d l       .debug_str	00000000 
00036499 l       .debug_str	00000000 
000364c9 l       .debug_str	00000000 
00036505 l       .debug_str	00000000 
0003654f l       .debug_str	00000000 
0003655f l       .debug_str	00000000 
00036594 l       .debug_str	00000000 
000365d9 l       .debug_str	00000000 
000365e4 l       .debug_str	00000000 
00036624 l       .debug_str	00000000 
00036632 l       .debug_str	00000000 
000366be l       .debug_str	00000000 
0003673a l       .debug_str	00000000 
0003675a l       .debug_str	00000000 
000367b4 l       .debug_str	00000000 
000367c1 l       .debug_str	00000000 
000367fa l       .debug_str	00000000 
00036802 l       .debug_str	00000000 
00036857 l       .debug_str	00000000 
000368a9 l       .debug_str	00000000 
0003578e l       .debug_str	00000000 
000368f0 l       .debug_str	00000000 
00036964 l       .debug_str	00000000 
000369a8 l       .debug_str	00000000 
000369f4 l       .debug_str	00000000 
00036a33 l       .debug_str	00000000 
00036a59 l       .debug_str	00000000 
00036a6b l       .debug_str	00000000 
00036a75 l       .debug_str	00000000 
00036ab7 l       .debug_str	00000000 
0000ef71 l       .debug_str	00000000 
00036b3e l       .debug_str	00000000 
00002ed3 l       .debug_str	00000000 
00036bba l       .debug_str	00000000 
00036c31 l       .debug_str	00000000 
00036c7f l       .debug_str	00000000 
00006fc8 l       .debug_str	00000000 
00036d0f l       .debug_str	00000000 
00036d4b l       .debug_str	00000000 
00036d58 l       .debug_str	00000000 
00036d9e l       .debug_str	00000000 
00036dab l       .debug_str	00000000 
00037af1 l       .debug_str	00000000 
00036ddd l       .debug_str	00000000 
00036e2d l       .debug_str	00000000 
00036e44 l       .debug_str	00000000 
00036ece l       .debug_str	00000000 
00014e9b l       .debug_str	00000000 
00036f4a l       .debug_str	00000000 
00036f5e l       .debug_str	00000000 
00036fbb l       .debug_str	00000000 
00036fca l       .debug_str	00000000 
00036fdb l       .debug_str	00000000 
00037035 l       .debug_str	00000000 
00037044 l       .debug_str	00000000 
000370cd l       .debug_str	00000000 
000370db l       .debug_str	00000000 
00037131 l       .debug_str	00000000 
00037185 l       .debug_str	00000000 
000371fe l       .debug_str	00000000 
00037216 l       .debug_str	00000000 
00037220 l       .debug_str	00000000 
000372b7 l       .debug_str	00000000 
000372d1 l       .debug_str	00000000 
0000a45e l       .debug_str	00000000 
0003730a l       .debug_str	00000000 
00002dbd l       .debug_str	00000000 
0003736f l       .debug_str	00000000 
00037406 l       .debug_str	00000000 
0003740a l       .debug_str	00000000 
000376ff l       .debug_str	00000000 
0003740f l       .debug_str	00000000 
0005d3b0 l       .debug_str	00000000 
0000614c l       .debug_str	00000000 
00037441 l       .debug_str	00000000 
000063a4 l       .debug_str	00000000 
0003747f l       .debug_str	00000000 
00014c6c l       .debug_str	00000000 
000374d2 l       .debug_str	00000000 
0003755e l       .debug_str	00000000 
000375da l       .debug_str	00000000 
000375f9 l       .debug_str	00000000 
00037644 l       .debug_str	00000000 
00037651 l       .debug_str	00000000 
000376c5 l       .debug_str	00000000 
0003ba03 l       .debug_str	00000000 
0004d13e l       .debug_str	00000000 
000376e4 l       .debug_str	00000000 
00037704 l       .debug_str	00000000 
00037720 l       .debug_str	00000000 
0003772a l       .debug_str	00000000 
000377b6 l       .debug_str	00000000 
00037832 l       .debug_str	00000000 
00037863 l       .debug_str	00000000 
000378e6 l       .debug_str	00000000 
00037906 l       .debug_str	00000000 
0003798c l       .debug_str	00000000 
00037a01 l       .debug_str	00000000 
0001ec54 l       .debug_str	00000000 
0005a97c l       .debug_str	00000000 
00037a42 l       .debug_str	00000000 
000174e5 l       .debug_str	00000000 
00037a8d l       .debug_str	00000000 
00037ae9 l       .debug_str	00000000 
00037af5 l       .debug_str	00000000 
00037b3e l       .debug_str	00000000 
00037b4e l       .debug_str	00000000 
00037b93 l       .debug_str	00000000 
00037bdc l       .debug_str	00000000 
00037c21 l       .debug_str	00000000 
00037c7d l       .debug_str	00000000 
00037cc8 l       .debug_str	00000000 
00037d0f l       .debug_str	00000000 
00037d6d l       .debug_str	00000000 
00037db8 l       .debug_str	00000000 
00037dff l       .debug_str	00000000 
00037e5d l       .debug_str	00000000 
00037ea8 l       .debug_str	00000000 
00037eef l       .debug_str	00000000 
00037f4d l       .debug_str	00000000 
00037f96 l       .debug_str	00000000 
00037fdb l       .debug_str	00000000 
00038037 l       .debug_str	00000000 
00038080 l       .debug_str	00000000 
000380c5 l       .debug_str	00000000 
00038121 l       .debug_str	00000000 
0003816b l       .debug_str	00000000 
000381b1 l       .debug_str	00000000 
0003820e l       .debug_str	00000000 
00038258 l       .debug_str	00000000 
0003829e l       .debug_str	00000000 
000382fb l       .debug_str	00000000 
00038356 l       .debug_str	00000000 
0003839e l       .debug_str	00000000 
000383e2 l       .debug_str	00000000 
0003842a l       .debug_str	00000000 
0003846e l       .debug_str	00000000 
000384c9 l       .debug_str	00000000 
00038512 l       .debug_str	00000000 
00038557 l       .debug_str	00000000 
000385b3 l       .debug_str	00000000 
000385fc l       .debug_str	00000000 
00038641 l       .debug_str	00000000 
0003869d l       .debug_str	00000000 
000386e6 l       .debug_str	00000000 
0003872b l       .debug_str	00000000 
00038787 l       .debug_str	00000000 
000387d1 l       .debug_str	00000000 
00038817 l       .debug_str	00000000 
00038874 l       .debug_str	00000000 
000388be l       .debug_str	00000000 
00038904 l       .debug_str	00000000 
00038961 l       .debug_str	00000000 
000389ab l       .debug_str	00000000 
000389f1 l       .debug_str	00000000 
00038a4e l       .debug_str	00000000 
00038aa9 l       .debug_str	00000000 
00038af1 l       .debug_str	00000000 
00038b35 l       .debug_str	00000000 
00038b7d l       .debug_str	00000000 
00038bc1 l       .debug_str	00000000 
00038c1c l       .debug_str	00000000 
00038c77 l       .debug_str	00000000 
00038cbf l       .debug_str	00000000 
00038d03 l       .debug_str	00000000 
00038d4c l       .debug_str	00000000 
00038d91 l       .debug_str	00000000 
00038ded l       .debug_str	00000000 
00038e49 l       .debug_str	00000000 
00038e92 l       .debug_str	00000000 
00038ed7 l       .debug_str	00000000 
00038f33 l       .debug_str	00000000 
00038f7c l       .debug_str	00000000 
00038fc1 l       .debug_str	00000000 
0003901d l       .debug_str	00000000 
00039066 l       .debug_str	00000000 
000390ab l       .debug_str	00000000 
00016ff4 l       .debug_str	00000000 
00039107 l       .debug_str	00000000 
00039146 l       .debug_str	00000000 
0003917b l       .debug_str	00000000 
00010dce l       .debug_str	00000000 
0001edf5 l       .debug_str	00000000 
0001eed1 l       .debug_str	00000000 
00039185 l       .debug_str	00000000 
00020d29 l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
000391bf l       .debug_str	00000000 
00001be1 l       .debug_str	00000000 
00039251 l       .debug_str	00000000 
000202b1 l       .debug_str	00000000 
0003928a l       .debug_str	00000000 
00006839 l       .debug_str	00000000 
000392b1 l       .debug_str	00000000 
00006785 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
000392eb l       .debug_str	00000000 
000064f7 l       .debug_str	00000000 
00039311 l       .debug_str	00000000 
0001f2af l       .debug_str	00000000 
0003936b l       .debug_str	00000000 
0001fbc8 l       .debug_str	00000000 
00039405 l       .debug_str	00000000 
0001eee0 l       .debug_str	00000000 
0003948e l       .debug_str	00000000 
00039535 l       .debug_str	00000000 
0003956e l       .debug_str	00000000 
000395e3 l       .debug_str	00000000 
0003960c l       .debug_str	00000000 
0002c011 l       .debug_str	00000000 
00039641 l       .debug_str	00000000 
0003967d l       .debug_str	00000000 
0003968e l       .debug_str	00000000 
000396c7 l       .debug_str	00000000 
000075de l       .debug_str	00000000 
000396d4 l       .debug_str	00000000 
000396e3 l       .debug_str	00000000 
00034fba l       .debug_str	00000000 
0003972c l       .debug_str	00000000 
0003975f l       .debug_str	00000000 
0003976c l       .debug_str	00000000 
0005e66f l       .debug_str	00000000 
000397b7 l       .debug_str	00000000 
0003980f l       .debug_str	00000000 
00039824 l       .debug_str	00000000 
0003985a l       .debug_str	00000000 
00039865 l       .debug_str	00000000 
0002c11f l       .debug_str	00000000 
000398c4 l       .debug_str	00000000 
00039937 l       .debug_str	00000000 
0003999e l       .debug_str	00000000 
000399be l       .debug_str	00000000 
000399fd l       .debug_str	00000000 
00039a1c l       .debug_str	00000000 
00000ad8 l       .debug_str	00000000 
00039a8f l       .debug_str	00000000 
00039b0c l       .debug_str	00000000 
00039b71 l       .debug_str	00000000 
00039bd1 l       .debug_str	00000000 
00039c44 l       .debug_str	00000000 
00039cc1 l       .debug_str	00000000 
00020ebe l       .debug_str	00000000 
00039d39 l       .debug_str	00000000 
00039dae l       .debug_str	00000000 
00039e28 l       .debug_str	00000000 
0000cc98 l       .debug_str	00000000 
0000cca3 l       .debug_str	00000000 
00039e88 l       .debug_str	00000000 
0005c65d l       .debug_str	00000000 
00039ec6 l       .debug_str	00000000 
00039f08 l       .debug_str	00000000 
00039f33 l       .debug_str	00000000 
00039f74 l       .debug_str	00000000 
00039f7e l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
0005d517 l       .debug_str	00000000 
00057dfd l       .debug_str	00000000 
00000e1d l       .debug_str	00000000 
00039fda l       .debug_str	00000000 
000023d6 l       .debug_str	00000000 
0003a016 l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
0003a05d l       .debug_str	00000000 
0003a0bb l       .debug_str	00000000 
000319ea l       .debug_str	00000000 
0003a112 l       .debug_str	00000000 
0003a16c l       .debug_str	00000000 
0003a176 l       .debug_str	00000000 
000075d2 l       .debug_str	00000000 
000075d7 l       .debug_str	00000000 
0003a1b9 l       .debug_str	00000000 
0003a1ef l       .debug_str	00000000 
0003a1ff l       .debug_str	00000000 
0003a20e l       .debug_str	00000000 
0003a219 l       .debug_str	00000000 
00031ad0 l       .debug_str	00000000 
0003a253 l       .debug_str	00000000 
0003a29c l       .debug_str	00000000 
00024d56 l       .debug_str	00000000 
0003a2e3 l       .debug_str	00000000 
0003a31e l       .debug_str	00000000 
0003a343 l       .debug_str	00000000 
0003a3af l       .debug_str	00000000 
0003a3c2 l       .debug_str	00000000 
0003a439 l       .debug_str	00000000 
0003a444 l       .debug_str	00000000 
0003a481 l       .debug_str	00000000 
0003a48c l       .debug_str	00000000 
0003a50d l       .debug_str	00000000 
0003a553 l       .debug_str	00000000 
0003a57a l       .debug_str	00000000 
0003a5a9 l       .debug_str	00000000 
0003a5ba l       .debug_str	00000000 
0001ee51 l       .debug_str	00000000 
0003a616 l       .debug_str	00000000 
0003a647 l       .debug_str	00000000 
00008817 l       .debug_str	00000000 
0003a68f l       .debug_str	00000000 
00021aec l       .debug_str	00000000 
0003a6cd l       .debug_str	00000000 
0003a711 l       .debug_str	00000000 
0003a764 l       .debug_str	00000000 
000371ff l       .debug_str	00000000 
0003a7dc l       .debug_str	00000000 
0003a82b l       .debug_str	00000000 
0003a8c1 l       .debug_str	00000000 
0003a905 l       .debug_str	00000000 
0003e643 l       .debug_str	00000000 
0003a97d l       .debug_str	00000000 
0003a9cc l       .debug_str	00000000 
0003aa62 l       .debug_str	00000000 
0003aa7c l       .debug_str	00000000 
0003aacb l       .debug_str	00000000 
0003ab04 l       .debug_str	00000000 
0003ab1f l       .debug_str	00000000 
00017d40 l       .debug_str	00000000 
0003ab83 l       .debug_str	00000000 
000178fe l       .debug_str	00000000 
0003abfc l       .debug_str	00000000 
00016932 l       .debug_str	00000000 
0003ac6d l       .debug_str	00000000 
0003ad03 l       .debug_str	00000000 
0003ad9b l       .debug_str	00000000 
0003ae0d l       .debug_str	00000000 
0003ae35 l       .debug_str	00000000 
00007aab l       .debug_str	00000000 
0003aeed l       .debug_str	00000000 
0001794d l       .debug_str	00000000 
0003af32 l       .debug_str	00000000 
0003afe8 l       .debug_str	00000000 
0003b02d l       .debug_str	00000000 
0000e12a l       .debug_str	00000000 
0003b06f l       .debug_str	00000000 
0003b0ca l       .debug_str	00000000 
0003b0cf l       .debug_str	00000000 
0003b128 l       .debug_str	00000000 
0003b15c l       .debug_str	00000000 
0003b170 l       .debug_str	00000000 
0003b1ab l       .debug_str	00000000 
0003b1ed l       .debug_str	00000000 
0003b203 l       .debug_str	00000000 
0003b26f l       .debug_str	00000000 
0000cc9c l       .debug_str	00000000 
00005f0c l       .debug_str	00000000 
00005f17 l       .debug_str	00000000 
0003b2b1 l       .debug_str	00000000 
0003b2f1 l       .debug_str	00000000 
0003b34b l       .debug_str	00000000 
0003b38d l       .debug_str	00000000 
0003b3e8 l       .debug_str	00000000 
0003b42a l       .debug_str	00000000 
0003b435 l       .debug_str	00000000 
0003b475 l       .debug_str	00000000 
0003b47b l       .debug_str	00000000 
0003b4d5 l       .debug_str	00000000 
0003b4de l       .debug_str	00000000 
0003b520 l       .debug_str	00000000 
0003b578 l       .debug_str	00000000 
0003b5ba l       .debug_str	00000000 
0003b613 l       .debug_str	00000000 
0003b61d l       .debug_str	00000000 
0003b625 l       .debug_str	00000000 
0003b62e l       .debug_str	00000000 
0003b621 l       .debug_str	00000000 
0003b670 l       .debug_str	00000000 
0003b6c5 l       .debug_str	00000000 
0003b702 l       .debug_str	00000000 
0003b744 l       .debug_str	00000000 
0003b79b l       .debug_str	00000000 
0003b7dd l       .debug_str	00000000 
0003b835 l       .debug_str	00000000 
0003b86d l       .debug_str	00000000 
0003b879 l       .debug_str	00000000 
0003b8b6 l       .debug_str	00000000 
0003b918 l       .debug_str	00000000 
0003b959 l       .debug_str	00000000 
0003b962 l       .debug_str	00000000 
0003b9c0 l       .debug_str	00000000 
0003b9f9 l       .debug_str	00000000 
0003ba08 l       .debug_str	00000000 
0003ba47 l       .debug_str	00000000 
0003ba5c l       .debug_str	00000000 
0003baa2 l       .debug_str	00000000 
0003baaf l       .debug_str	00000000 
0003bab5 l       .debug_str	00000000 
0003baee l       .debug_str	00000000 
0003bb7a l       .debug_str	00000000 
0003bbb6 l       .debug_str	00000000 
000579ec l       .debug_str	00000000 
0003bbc8 l       .debug_str	00000000 
0003bc00 l       .debug_str	00000000 
0003bc0c l       .debug_str	00000000 
0003bc49 l       .debug_str	00000000 
0003bcab l       .debug_str	00000000 
0003bcec l       .debug_str	00000000 
0003bd4a l       .debug_str	00000000 
0003bd84 l       .debug_str	00000000 
0003bdde l       .debug_str	00000000 
0003be27 l       .debug_str	00000000 
0003be37 l       .debug_str	00000000 
0003be70 l       .debug_str	00000000 
0003bef2 l       .debug_str	00000000 
0003bf2c l       .debug_str	00000000 
0003bf86 l       .debug_str	00000000 
0003bfc1 l       .debug_str	00000000 
0003c021 l       .debug_str	00000000 
0003c05c l       .debug_str	00000000 
0003c0bc l       .debug_str	00000000 
0003c0fa l       .debug_str	00000000 
0003c158 l       .debug_str	00000000 
0003c196 l       .debug_str	00000000 
0003c1f4 l       .debug_str	00000000 
0003c23f l       .debug_str	00000000 
0003c248 l       .debug_str	00000000 
0003c297 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
0003c2a3 l       .debug_str	00000000 
0003c2d4 l       .debug_str	00000000 
0003c2ff l       .debug_str	00000000 
0003c34d l       .debug_str	00000000 
0001ee82 l       .debug_str	00000000 
0003c354 l       .debug_str	00000000 
0003c3b9 l       .debug_str	00000000 
0003c3ea l       .debug_str	00000000 
0003c3f2 l       .debug_str	00000000 
00003796 l       .debug_str	00000000 
0003c423 l       .debug_str	00000000 
0003c47c l       .debug_str	00000000 
0003c50a l       .debug_str	00000000 
0003c556 l       .debug_str	00000000 
0003c57b l       .debug_str	00000000 
0003c598 l       .debug_str	00000000 
0003c5c2 l       .debug_str	00000000 
000079ee l       .debug_str	00000000 
00007af9 l       .debug_str	00000000 
00007b75 l       .debug_str	00000000 
0003c5e4 l       .debug_str	00000000 
0003c631 l       .debug_str	00000000 
0003c676 l       .debug_str	00000000 
0003c6b5 l       .debug_str	00000000 
0003c701 l       .debug_str	00000000 
0003c790 l       .debug_str	00000000 
0003c7dd l       .debug_str	00000000 
0003c863 l       .debug_str	00000000 
000598ee l       .debug_str	00000000 
0003c888 l       .debug_str	00000000 
0003c8b2 l       .debug_str	00000000 
0003c8bb l       .debug_str	00000000 
0003c8f1 l       .debug_str	00000000 
0003c8fa l       .debug_str	00000000 
0003c988 l       .debug_str	00000000 
0003c9ce l       .debug_str	00000000 
0003c9ed l       .debug_str	00000000 
0003ca04 l       .debug_str	00000000 
0003ca28 l       .debug_str	00000000 
0003ca44 l       .debug_str	00000000 
0003ca8b l       .debug_str	00000000 
0003cad0 l       .debug_str	00000000 
0003cb0f l       .debug_str	00000000 
0003cb55 l       .debug_str	00000000 
0003cbe4 l       .debug_str	00000000 
0003cc2b l       .debug_str	00000000 
0003ccb1 l       .debug_str	00000000 
0003cce6 l       .debug_str	00000000 
0003ccf0 l       .debug_str	00000000 
00058907 l       .debug_str	00000000 
0003cd5b l       .debug_str	00000000 
0003cd90 l       .debug_str	00000000 
0003cd9a l       .debug_str	00000000 
0003cdcd l       .debug_str	00000000 
0003cdd5 l       .debug_str	00000000 
0003ce09 l       .debug_str	00000000 
0003ce1b l       .debug_str	00000000 
0003ce55 l       .debug_str	00000000 
0003ce73 l       .debug_str	00000000 
0003ce99 l       .debug_str	00000000 
0003cea4 l       .debug_str	00000000 
0003cecd l       .debug_str	00000000 
0003cedb l       .debug_str	00000000 
0003cf15 l       .debug_str	00000000 
0003cf4b l       .debug_str	00000000 
0003cf71 l       .debug_str	00000000 
0003cf94 l       .debug_str	00000000 
0003cfbd l       .debug_str	00000000 
0003cfe3 l       .debug_str	00000000 
0003d021 l       .debug_str	00000000 
0003d03b l       .debug_str	00000000 
0003d079 l       .debug_str	00000000 
0003d0ab l       .debug_str	00000000 
0003d0b7 l       .debug_str	00000000 
0005f083 l       .debug_str	00000000 
0003d0eb l       .debug_str	00000000 
0003d0f8 l       .debug_str	00000000 
00016dd4 l       .debug_str	00000000 
0003d12a l       .debug_str	00000000 
0003d194 l       .debug_str	00000000 
0003d204 l       .debug_str	00000000 
0003d26b l       .debug_str	00000000 
0003d288 l       .debug_str	00000000 
0003d2c7 l       .debug_str	00000000 
0003d2e3 l       .debug_str	00000000 
00016d96 l       .debug_str	00000000 
0003d311 l       .debug_str	00000000 
00016e72 l       .debug_str	00000000 
0003d346 l       .debug_str	00000000 
0003d382 l       .debug_str	00000000 
0003d3a8 l       .debug_str	00000000 
0003d3e7 l       .debug_str	00000000 
0003d3f7 l       .debug_str	00000000 
0003d45b l       .debug_str	00000000 
0003d492 l       .debug_str	00000000 
0003d4a8 l       .debug_str	00000000 
0003d4f7 l       .debug_str	00000000 
0003d503 l       .debug_str	00000000 
0003d5d5 l       .debug_str	00000000 
0003d54a l       .debug_str	00000000 
0003d5d0 l       .debug_str	00000000 
0003d5f4 l       .debug_str	00000000 
0003d62f l       .debug_str	00000000 
0003d63f l       .debug_str	00000000 
0005efab l       .debug_str	00000000 
0003d680 l       .debug_str	00000000 
0003d6ba l       .debug_str	00000000 
0003d6c9 l       .debug_str	00000000 
0003d702 l       .debug_str	00000000 
0003d710 l       .debug_str	00000000 
0003d749 l       .debug_str	00000000 
0003d757 l       .debug_str	00000000 
0003d7a7 l       .debug_str	00000000 
0003d7b4 l       .debug_str	00000000 
0003d82a l       .debug_str	00000000 
0003d835 l       .debug_str	00000000 
0003d847 l       .debug_str	00000000 
0003d893 l       .debug_str	00000000 
0003d8b0 l       .debug_str	00000000 
0003d944 l       .debug_str	00000000 
0003d9da l       .debug_str	00000000 
0003da4c l       .debug_str	00000000 
0003da72 l       .debug_str	00000000 
0003db11 l       .debug_str	00000000 
0003db82 l       .debug_str	00000000 
0000247a l       .debug_str	00000000 
0003dbc7 l       .debug_str	00000000 
0003dc2a l       .debug_str	00000000 
0003dc4d l       .debug_str	00000000 
0003dca1 l       .debug_str	00000000 
0003dcb8 l       .debug_str	00000000 
0002477d l       .debug_str	00000000 
0003dd05 l       .debug_str	00000000 
0003dd12 l       .debug_str	00000000 
0003dd4d l       .debug_str	00000000 
0003dd75 l       .debug_str	00000000 
0003ddd7 l       .debug_str	00000000 
0003985f l       .debug_str	00000000 
0003de40 l       .debug_str	00000000 
0004066e l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006211 l       .debug_str	00000000 
00006218 l       .debug_str	00000000 
0002deb8 l       .debug_str	00000000 
0002dec9 l       .debug_str	00000000 
0003de8d l       .debug_str	00000000 
0001557f l       .debug_str	00000000 
0003ded8 l       .debug_str	00000000 
0003df5b l       .debug_str	00000000 
0003df8b l       .debug_str	00000000 
0003e013 l       .debug_str	00000000 
0003e088 l       .debug_str	00000000 
0003e0db l       .debug_str	00000000 
0003e167 l       .debug_str	00000000 
0003e19f l       .debug_str	00000000 
0003e1f4 l       .debug_str	00000000 
0003e225 l       .debug_str	00000000 
0003e277 l       .debug_str	00000000 
0003e2a5 l       .debug_str	00000000 
0003e2f9 l       .debug_str	00000000 
0003e31f l       .debug_str	00000000 
00021a38 l       .debug_str	00000000 
0003e356 l       .debug_str	00000000 
0003e3a1 l       .debug_str	00000000 
0003e3bd l       .debug_str	00000000 
0003e413 l       .debug_str	00000000 
00021b7f l       .debug_str	00000000 
0003e48c l       .debug_str	00000000 
0003e4dc l       .debug_str	00000000 
0003e573 l       .debug_str	00000000 
0003e5c9 l       .debug_str	00000000 
0003e642 l       .debug_str	00000000 
0003e65a l       .debug_str	00000000 
0003e6f1 l       .debug_str	00000000 
0003e72a l       .debug_str	00000000 
0003e95a l       .debug_str	00000000 
0003e773 l       .debug_str	00000000 
0003d63b l       .debug_str	00000000 
0003e7b0 l       .debug_str	00000000 
0003e7f4 l       .debug_str	00000000 
0003e83f l       .debug_str	00000000 
0003e87f l       .debug_str	00000000 
0003e8a9 l       .debug_str	00000000 
0003e8f2 l       .debug_str	00000000 
0003e901 l       .debug_str	00000000 
0003e952 l       .debug_str	00000000 
0003e969 l       .debug_str	00000000 
00048c09 l       .debug_str	00000000 
0005a1a8 l       .debug_str	00000000 
0003e9d0 l       .debug_str	00000000 
0003ea31 l       .debug_str	00000000 
0003ea50 l       .debug_str	00000000 
0003ea59 l       .debug_str	00000000 
0003ea65 l       .debug_str	00000000 
00003a15 l       .debug_str	00000000 
0003ea6b l       .debug_str	00000000 
0003ea75 l       .debug_str	00000000 
0003eaa7 l       .debug_str	00000000 
0003eab7 l       .debug_str	00000000 
0003eb3f l       .debug_str	00000000 
0003eb48 l       .debug_str	00000000 
0000cfb7 l       .debug_str	00000000 
0003ebb5 l       .debug_str	00000000 
0003ebf4 l       .debug_str	00000000 
00021430 l       .debug_str	00000000 
0002143c l       .debug_str	00000000 
00021446 l       .debug_str	00000000 
0003ec03 l       .debug_str	00000000 
0003ec73 l       .debug_str	00000000 
0003ec98 l       .debug_str	00000000 
0003ed07 l       .debug_str	00000000 
0003ed2d l       .debug_str	00000000 
0003ed9c l       .debug_str	00000000 
0003edc6 l       .debug_str	00000000 
0003edfd l       .debug_str	00000000 
0003ee08 l       .debug_str	00000000 
0003ee44 l       .debug_str	00000000 
0003ee63 l       .debug_str	00000000 
0003ee9d l       .debug_str	00000000 
0003eed8 l       .debug_str	00000000 
0003ef14 l       .debug_str	00000000 
0001671a l       .debug_str	00000000 
0003ef2e l       .debug_str	00000000 
0003ef6a l       .debug_str	00000000 
0003ef77 l       .debug_str	00000000 
00057c63 l       .debug_str	00000000 
0003efb5 l       .debug_str	00000000 
0003effb l       .debug_str	00000000 
0003f083 l       .debug_str	00000000 
0003f09c l       .debug_str	00000000 
0003f0f6 l       .debug_str	00000000 
0003f13c l       .debug_str	00000000 
0003f154 l       .debug_str	00000000 
0003f1d4 l       .debug_str	00000000 
0003f6a8 l       .debug_str	00000000 
0003f1e4 l       .debug_str	00000000 
0003f223 l       .debug_str	00000000 
0003f263 l       .debug_str	00000000 
0003f2ed l       .debug_str	00000000 
0003f304 l       .debug_str	00000000 
0003f355 l       .debug_str	00000000 
0003f363 l       .debug_str	00000000 
0003f368 l       .debug_str	00000000 
0003f3c3 l       .debug_str	00000000 
0003fd7d l       .debug_str	00000000 
0003f41a l       .debug_str	00000000 
0003f44d l       .debug_str	00000000 
0003f494 l       .debug_str	00000000 
0003f4ce l       .debug_str	00000000 
0003f4fd l       .debug_str	00000000 
0003f57b l       .debug_str	00000000 
0003f5ff l       .debug_str	00000000 
0003f68c l       .debug_str	00000000 
0003f6a1 l       .debug_str	00000000 
0003f6b1 l       .debug_str	00000000 
0003f6fd l       .debug_str	00000000 
0003f742 l       .debug_str	00000000 
0003f7d9 l       .debug_str	00000000 
0003f7f5 l       .debug_str	00000000 
0003f83c l       .debug_str	00000000 
0003f86a l       .debug_str	00000000 
0003f8a3 l       .debug_str	00000000 
0003f8c5 l       .debug_str	00000000 
00006bb2 l       .debug_str	00000000 
0003f943 l       .debug_str	00000000 
0003f9c3 l       .debug_str	00000000 
0003fa02 l       .debug_str	00000000 
0003fa8c l       .debug_str	00000000 
0003fad8 l       .debug_str	00000000 
0003faf6 l       .debug_str	00000000 
0003fb01 l       .debug_str	00000000 
0003fb63 l       .debug_str	00000000 
0003fbba l       .debug_str	00000000 
0003fc47 l       .debug_str	00000000 
0003fc93 l       .debug_str	00000000 
0003fd2a l       .debug_str	00000000 
0003fd74 l       .debug_str	00000000 
0003fd90 l       .debug_str	00000000 
0003fdea l       .debug_str	00000000 
0003fdf3 l       .debug_str	00000000 
0003fe52 l       .debug_str	00000000 
0003fea9 l       .debug_str	00000000 
0003ff02 l       .debug_str	00000000 
0003ff17 l       .debug_str	00000000 
0003ff64 l       .debug_str	00000000 
0003ffaf l       .debug_str	00000000 
0003ffc2 l       .debug_str	00000000 
0000b8d1 l       .debug_str	00000000 
00006b64 l       .debug_str	00000000 
0004000d l       .debug_str	00000000 
00040022 l       .debug_str	00000000 
0004002e l       .debug_str	00000000 
00040073 l       .debug_str	00000000 
000400cc l       .debug_str	00000000 
000400e1 l       .debug_str	00000000 
0004012e l       .debug_str	00000000 
00040179 l       .debug_str	00000000 
0004018c l       .debug_str	00000000 
000401d7 l       .debug_str	00000000 
000401ea l       .debug_str	00000000 
0004024e l       .debug_str	00000000 
00040287 l       .debug_str	00000000 
000402b3 l       .debug_str	00000000 
0005dcd8 l       .debug_str	00000000 
0005909d l       .debug_str	00000000 
00040332 l       .debug_str	00000000 
00040338 l       .debug_str	00000000 
00040341 l       .debug_str	00000000 
00040379 l       .debug_str	00000000 
00040396 l       .debug_str	00000000 
000403d2 l       .debug_str	00000000 
000403ef l       .debug_str	00000000 
0004044b l       .debug_str	00000000 
00040483 l       .debug_str	00000000 
000404df l       .debug_str	00000000 
00024d3b l       .debug_str	00000000 
00040517 l       .debug_str	00000000 
00040555 l       .debug_str	00000000 
00040571 l       .debug_str	00000000 
000405c7 l       .debug_str	00000000 
0004062e l       .debug_str	00000000 
00040666 l       .debug_str	00000000 
00040672 l       .debug_str	00000000 
000406d9 l       .debug_str	00000000 
00040718 l       .debug_str	00000000 
00040729 l       .debug_str	00000000 
00040762 l       .debug_str	00000000 
0004e70a l       .debug_str	00000000 
0004077d l       .debug_str	00000000 
000407b9 l       .debug_str	00000000 
000407b2 l       .debug_str	00000000 
000407c2 l       .debug_str	00000000 
000407d4 l       .debug_str	00000000 
0004081f l       .debug_str	00000000 
00040837 l       .debug_str	00000000 
00040841 l       .debug_str	00000000 
00040858 l       .debug_str	00000000 
00040867 l       .debug_str	00000000 
000408a9 l       .debug_str	00000000 
000408c2 l       .debug_str	00000000 
00040936 l       .debug_str	00000000 
00040945 l       .debug_str	00000000 
0004097e l       .debug_str	00000000 
00040994 l       .debug_str	00000000 
000409d4 l       .debug_str	00000000 
000409df l       .debug_str	00000000 
00040a5e l       .debug_str	00000000 
00058816 l       .debug_str	00000000 
00040a7d l       .debug_str	00000000 
00040a92 l       .debug_str	00000000 
00040a9c l       .debug_str	00000000 
000073c7 l       .debug_str	00000000 
00040aa1 l       .debug_str	00000000 
00040ad2 l       .debug_str	00000000 
00040ae5 l       .debug_str	00000000 
00040aef l       .debug_str	00000000 
00040b0c l       .debug_str	00000000 
00040b47 l       .debug_str	00000000 
00040b7c l       .debug_str	00000000 
00040bad l       .debug_str	00000000 
00040bc1 l       .debug_str	00000000 
00040bcc l       .debug_str	00000000 
00040bea l       .debug_str	00000000 
00040c25 l       .debug_str	00000000 
00040c5b l       .debug_str	00000000 
00040c8c l       .debug_str	00000000 
00040ca0 l       .debug_str	00000000 
00040cab l       .debug_str	00000000 
00040cc9 l       .debug_str	00000000 
00040d04 l       .debug_str	00000000 
00040d3a l       .debug_str	00000000 
00040d6b l       .debug_str	00000000 
00040d7f l       .debug_str	00000000 
00040d8a l       .debug_str	00000000 
00040da8 l       .debug_str	00000000 
00040de3 l       .debug_str	00000000 
00040e19 l       .debug_str	00000000 
00040e4a l       .debug_str	00000000 
00045697 l       .debug_str	00000000 
00040e5f l       .debug_str	00000000 
00040e6b l       .debug_str	00000000 
00040e8a l       .debug_str	00000000 
00040ec5 l       .debug_str	00000000 
00040efc l       .debug_str	00000000 
00040f2d l       .debug_str	00000000 
00040f40 l       .debug_str	00000000 
00040f4a l       .debug_str	00000000 
00040f67 l       .debug_str	00000000 
00040fa2 l       .debug_str	00000000 
00040fd7 l       .debug_str	00000000 
00041008 l       .debug_str	00000000 
0004101c l       .debug_str	00000000 
00041027 l       .debug_str	00000000 
00041045 l       .debug_str	00000000 
00041080 l       .debug_str	00000000 
000410b6 l       .debug_str	00000000 
000410e7 l       .debug_str	00000000 
000410fb l       .debug_str	00000000 
0004116a l       .debug_str	00000000 
000411a5 l       .debug_str	00000000 
000411ee l       .debug_str	00000000 
00041233 l       .debug_str	00000000 
0004128f l       .debug_str	00000000 
000412d8 l       .debug_str	00000000 
0004131d l       .debug_str	00000000 
00041379 l       .debug_str	00000000 
000413c2 l       .debug_str	00000000 
00041407 l       .debug_str	00000000 
00041463 l       .debug_str	00000000 
0004146e l       .debug_str	00000000 
0004148c l       .debug_str	00000000 
000414c7 l       .debug_str	00000000 
000414fd l       .debug_str	00000000 
0004152e l       .debug_str	00000000 
00041542 l       .debug_str	00000000 
0004154d l       .debug_str	00000000 
0004156b l       .debug_str	00000000 
000415a6 l       .debug_str	00000000 
000415dc l       .debug_str	00000000 
0004164b l       .debug_str	00000000 
00041686 l       .debug_str	00000000 
000416b7 l       .debug_str	00000000 
000416cc l       .debug_str	00000000 
000416d1 l       .debug_str	00000000 
000416dd l       .debug_str	00000000 
000416fc l       .debug_str	00000000 
00041737 l       .debug_str	00000000 
0004176e l       .debug_str	00000000 
000417dd l       .debug_str	00000000 
00041819 l       .debug_str	00000000 
00014d6d l       .debug_str	00000000 
00041862 l       .debug_str	00000000 
0004186d l       .debug_str	00000000 
000418b4 l       .debug_str	00000000 
000418be l       .debug_str	00000000 
00041940 l       .debug_str	00000000 
0004195d l       .debug_str	00000000 
00003e07 l       .debug_str	00000000 
000419b8 l       .debug_str	00000000 
00041a12 l       .debug_str	00000000 
00041a1f l       .debug_str	00000000 
00041a91 l       .debug_str	00000000 
00041af5 l       .debug_str	00000000 
00041b00 l       .debug_str	00000000 
00041b79 l       .debug_str	00000000 
00041b85 l       .debug_str	00000000 
00041c01 l       .debug_str	00000000 
00041c07 l       .debug_str	00000000 
00041c0e l       .debug_str	00000000 
00041c4a l       .debug_str	00000000 
00006c03 l       .debug_str	00000000 
00041c93 l       .debug_str	00000000 
00041cd7 l       .debug_str	00000000 
00041d22 l       .debug_str	00000000 
00041d61 l       .debug_str	00000000 
00041d86 l       .debug_str	00000000 
00041ddc l       .debug_str	00000000 
00041e4a l       .debug_str	00000000 
00041eca l       .debug_str	00000000 
00041f37 l       .debug_str	00000000 
00041fc2 l       .debug_str	00000000 
00042036 l       .debug_str	00000000 
00042076 l       .debug_str	00000000 
000420f7 l       .debug_str	00000000 
00042138 l       .debug_str	00000000 
0004219c l       .debug_str	00000000 
0004224b l       .debug_str	00000000 
00042295 l       .debug_str	00000000 
000422e2 l       .debug_str	00000000 
00042328 l       .debug_str	00000000 
00042332 l       .debug_str	00000000 
0004236b l       .debug_str	00000000 
0004239a l       .debug_str	00000000 
000423fb l       .debug_str	00000000 
0004242a l       .debug_str	00000000 
00042467 l       .debug_str	00000000 
000424f6 l       .debug_str	00000000 
0004252b l       .debug_str	00000000 
000425b1 l       .debug_str	00000000 
00042637 l       .debug_str	00000000 
0004268b l       .debug_str	00000000 
00042714 l       .debug_str	00000000 
00006a7b l       .debug_str	00000000 
00042762 l       .debug_str	00000000 
000427f0 l       .debug_str	00000000 
00042844 l       .debug_str	00000000 
00042883 l       .debug_str	00000000 
000428ce l       .debug_str	00000000 
00042950 l       .debug_str	00000000 
0004296c l       .debug_str	00000000 
000429c5 l       .debug_str	00000000 
00042a1e l       .debug_str	00000000 
00042a5b l       .debug_str	00000000 
00042a9c l       .debug_str	00000000 
00042afd l       .debug_str	00000000 
00042b6e l       .debug_str	00000000 
00042b9e l       .debug_str	00000000 
00042be4 l       .debug_str	00000000 
00042c56 l       .debug_str	00000000 
00042cea l       .debug_str	00000000 
00042d0e l       .debug_str	00000000 
00042d8a l       .debug_str	00000000 
00042dc4 l       .debug_str	00000000 
00042e06 l       .debug_str	00000000 
00042eb6 l       .debug_str	00000000 
00042ef5 l       .debug_str	00000000 
00042f98 l       .debug_str	00000000 
00042ff4 l       .debug_str	00000000 
00043051 l       .debug_str	00000000 
000430fc l       .debug_str	00000000 
00043135 l       .debug_str	00000000 
000431b1 l       .debug_str	00000000 
000431e9 l       .debug_str	00000000 
000431f5 l       .debug_str	00000000 
00043232 l       .debug_str	00000000 
0004328a l       .debug_str	00000000 
000432aa l       .debug_str	00000000 
00043303 l       .debug_str	00000000 
0004335c l       .debug_str	00000000 
000433b5 l       .debug_str	00000000 
0004340f l       .debug_str	00000000 
00043445 l       .debug_str	00000000 
00043455 l       .debug_str	00000000 
00043464 l       .debug_str	00000000 
0004346d l       .debug_str	00000000 
000434a4 l       .debug_str	00000000 
000434e0 l       .debug_str	00000000 
000434f0 l       .debug_str	00000000 
0004354c l       .debug_str	00000000 
000435ae l       .debug_str	00000000 
000367bd l       .debug_str	00000000 
000435f8 l       .debug_str	00000000 
00043633 l       .debug_str	00000000 
00043658 l       .debug_str	00000000 
000436b7 l       .debug_str	00000000 
00043701 l       .debug_str	00000000 
0004373c l       .debug_str	00000000 
00043761 l       .debug_str	00000000 
000437c0 l       .debug_str	00000000 
00043829 l       .debug_str	00000000 
00043832 l       .debug_str	00000000 
00043869 l       .debug_str	00000000 
000438c5 l       .debug_str	00000000 
00043927 l       .debug_str	00000000 
00043986 l       .debug_str	00000000 
000439e5 l       .debug_str	00000000 
00043a1b l       .debug_str	00000000 
00043a2c l       .debug_str	00000000 
00043a3c l       .debug_str	00000000 
00043a46 l       .debug_str	00000000 
00043a7e l       .debug_str	00000000 
00043adb l       .debug_str	00000000 
00043b3e l       .debug_str	00000000 
00043b89 l       .debug_str	00000000 
00043bc4 l       .debug_str	00000000 
00043bea l       .debug_str	00000000 
00043c4a l       .debug_str	00000000 
00043c95 l       .debug_str	00000000 
00043cd0 l       .debug_str	00000000 
00043cf6 l       .debug_str	00000000 
00043d56 l       .debug_str	00000000 
00043d8c l       .debug_str	00000000 
00043d9d l       .debug_str	00000000 
00043dad l       .debug_str	00000000 
00043db7 l       .debug_str	00000000 
00043def l       .debug_str	00000000 
00043e4c l       .debug_str	00000000 
00043eaf l       .debug_str	00000000 
00043f0f l       .debug_str	00000000 
00043f6f l       .debug_str	00000000 
00043fa5 l       .debug_str	00000000 
00043fb6 l       .debug_str	00000000 
00043fc6 l       .debug_str	00000000 
00043fd0 l       .debug_str	00000000 
00044008 l       .debug_str	00000000 
00044065 l       .debug_str	00000000 
000440c8 l       .debug_str	00000000 
00044113 l       .debug_str	00000000 
0004414e l       .debug_str	00000000 
00044174 l       .debug_str	00000000 
000441d4 l       .debug_str	00000000 
0004421f l       .debug_str	00000000 
0004425a l       .debug_str	00000000 
00044280 l       .debug_str	00000000 
000442e0 l       .debug_str	00000000 
00044316 l       .debug_str	00000000 
00044327 l       .debug_str	00000000 
00044337 l       .debug_str	00000000 
00044341 l       .debug_str	00000000 
00044379 l       .debug_str	00000000 
000443d6 l       .debug_str	00000000 
00044439 l       .debug_str	00000000 
00044499 l       .debug_str	00000000 
000444f9 l       .debug_str	00000000 
0004452f l       .debug_str	00000000 
00007388 l       .debug_str	00000000 
00044542 l       .debug_str	00000000 
00044554 l       .debug_str	00000000 
00044560 l       .debug_str	00000000 
0004459b l       .debug_str	00000000 
000445fa l       .debug_str	00000000 
0004465f l       .debug_str	00000000 
000446c1 l       .debug_str	00000000 
000446fc l       .debug_str	00000000 
00044724 l       .debug_str	00000000 
00044786 l       .debug_str	00000000 
0000a06e l       .debug_str	00000000 
0000caa6 l       .debug_str	00000000 
0000caf6 l       .debug_str	00000000 
000447bc l       .debug_str	00000000 
000447f7 l       .debug_str	00000000 
00044837 l       .debug_str	00000000 
00044854 l       .debug_str	00000000 
00044898 l       .debug_str	00000000 
000448b9 l       .debug_str	00000000 
000448f9 l       .debug_str	00000000 
00044916 l       .debug_str	00000000 
0004495a l       .debug_str	00000000 
0004497b l       .debug_str	00000000 
000449dd l       .debug_str	00000000 
00044a44 l       .debug_str	00000000 
00044a7f l       .debug_str	00000000 
00044aa2 l       .debug_str	00000000 
00044b08 l       .debug_str	00000000 
00044b43 l       .debug_str	00000000 
00044b65 l       .debug_str	00000000 
00044ba0 l       .debug_str	00000000 
00044bc4 l       .debug_str	00000000 
00044bff l       .debug_str	00000000 
00044c22 l       .debug_str	00000000 
00044c5d l       .debug_str	00000000 
00044c81 l       .debug_str	00000000 
00044cbc l       .debug_str	00000000 
00044cdf l       .debug_str	00000000 
00044d1a l       .debug_str	00000000 
00044d3e l       .debug_str	00000000 
00044d89 l       .debug_str	00000000 
00044deb l       .debug_str	00000000 
00044e26 l       .debug_str	00000000 
00044e49 l       .debug_str	00000000 
00044e94 l       .debug_str	00000000 
00044ecf l       .debug_str	00000000 
00044ef5 l       .debug_str	00000000 
00044f30 l       .debug_str	00000000 
00044f56 l       .debug_str	00000000 
00044fa7 l       .debug_str	00000000 
00044ff5 l       .debug_str	00000000 
00045040 l       .debug_str	00000000 
00045073 l       .debug_str	00000000 
000450ae l       .debug_str	00000000 
000450d3 l       .debug_str	00000000 
0004515f l       .debug_str	00000000 
00045193 l       .debug_str	00000000 
0004520f l       .debug_str	00000000 
00045254 l       .debug_str	00000000 
000452a0 l       .debug_str	00000000 
00045303 l       .debug_str	00000000 
0004533e l       .debug_str	00000000 
00045362 l       .debug_str	00000000 
0004539d l       .debug_str	00000000 
000453c4 l       .debug_str	00000000 
00045410 l       .debug_str	00000000 
0004544b l       .debug_str	00000000 
00045472 l       .debug_str	00000000 
000454bd l       .debug_str	00000000 
00045509 l       .debug_str	00000000 
00045555 l       .debug_str	00000000 
00045586 l       .debug_str	00000000 
0004558e l       .debug_str	00000000 
0001e0bc l       .debug_str	00000000 
000455da l       .debug_str	00000000 
0004560f l       .debug_str	00000000 
0004563d l       .debug_str	00000000 
00045646 l       .debug_str	00000000 
00045694 l       .debug_str	00000000 
0004569c l       .debug_str	00000000 
00045701 l       .debug_str	00000000 
00045754 l       .debug_str	00000000 
000457b4 l       .debug_str	00000000 
000457d3 l       .debug_str	00000000 
00045836 l       .debug_str	00000000 
00045858 l       .debug_str	00000000 
000458a3 l       .debug_str	00000000 
00045908 l       .debug_str	00000000 
0004592a l       .debug_str	00000000 
00045993 l       .debug_str	00000000 
000459d0 l       .debug_str	00000000 
00045a39 l       .debug_str	00000000 
00045ac9 l       .debug_str	00000000 
00015eaf l       .debug_str	00000000 
00045b29 l       .debug_str	00000000 
00045b8c l       .debug_str	00000000 
00045bf5 l       .debug_str	00000000 
00045c28 l       .debug_str	00000000 
00045c70 l       .debug_str	00000000 
00045cea l       .debug_str	00000000 
00045d3b l       .debug_str	00000000 
00045d92 l       .debug_str	00000000 
000081cd l       .debug_str	00000000 
00045dda l       .debug_str	00000000 
00045e38 l       .debug_str	00000000 
00045e55 l       .debug_str	00000000 
00045ec1 l       .debug_str	00000000 
00045f06 l       .debug_str	00000000 
00045f54 l       .debug_str	00000000 
00045f9c l       .debug_str	00000000 
00045fa6 l       .debug_str	00000000 
00046014 l       .debug_str	00000000 
00046050 l       .debug_str	00000000 
00046073 l       .debug_str	00000000 
000460e3 l       .debug_str	00000000 
0004612b l       .debug_str	00000000 
00046134 l       .debug_str	00000000 
00046191 l       .debug_str	00000000 
000461f4 l       .debug_str	00000000 
00046254 l       .debug_str	00000000 
000462b4 l       .debug_str	00000000 
00046310 l       .debug_str	00000000 
0004636f l       .debug_str	00000000 
000463cf l       .debug_str	00000000 
000463ea l       .debug_str	00000000 
0000812b l       .debug_str	00000000 
0004643e l       .debug_str	00000000 
000464bc l       .debug_str	00000000 
000464e6 l       .debug_str	00000000 
00046548 l       .debug_str	00000000 
000465a9 l       .debug_str	00000000 
00046603 l       .debug_str	00000000 
00046668 l       .debug_str	00000000 
000466ba l       .debug_str	00000000 
00046702 l       .debug_str	00000000 
0004671d l       .debug_str	00000000 
00046797 l       .debug_str	00000000 
000467e4 l       .debug_str	00000000 
0004685e l       .debug_str	00000000 
000468ab l       .debug_str	00000000 
000468ff l       .debug_str	00000000 
00046951 l       .debug_str	00000000 
000469b9 l       .debug_str	00000000 
00046a19 l       .debug_str	00000000 
00046a73 l       .debug_str	00000000 
00046ad2 l       .debug_str	00000000 
00046b2c l       .debug_str	00000000 
00046b89 l       .debug_str	00000000 
000166b0 l       .debug_str	00000000 
00046bc7 l       .debug_str	00000000 
00017729 l       .debug_str	00000000 
00046c02 l       .debug_str	00000000 
00046c74 l       .debug_str	00000000 
00046d47 l       .debug_str	00000000 
000082eb l       .debug_str	00000000 
00046d8f l       .debug_str	00000000 
00046ddd l       .debug_str	00000000 
00046de7 l       .debug_str	00000000 
00046e2f l       .debug_str	00000000 
00046e3b l       .debug_str	00000000 
00046eaf l       .debug_str	00000000 
00046eba l       .debug_str	00000000 
00046ef6 l       .debug_str	00000000 
00046f1d l       .debug_str	00000000 
00046f6e l       .debug_str	00000000 
00046f7b l       .debug_str	00000000 
00046f89 l       .debug_str	00000000 
00046f9c l       .debug_str	00000000 
00046fa7 l       .debug_str	00000000 
00046fe9 l       .debug_str	00000000 
00046ffe l       .debug_str	00000000 
00047068 l       .debug_str	00000000 
000470c5 l       .debug_str	00000000 
00047125 l       .debug_str	00000000 
00047185 l       .debug_str	00000000 
000471f7 l       .debug_str	00000000 
00047244 l       .debug_str	00000000 
000472a3 l       .debug_str	00000000 
000472fd l       .debug_str	00000000 
00047370 l       .debug_str	00000000 
0004737d l       .debug_str	00000000 
000473dd l       .debug_str	00000000 
000473fc l       .debug_str	00000000 
00047464 l       .debug_str	00000000 
0004747f l       .debug_str	00000000 
000474d7 l       .debug_str	00000000 
00047521 l       .debug_str	00000000 
00047585 l       .debug_str	00000000 
000475a4 l       .debug_str	00000000 
00047606 l       .debug_str	00000000 
0004766c l       .debug_str	00000000 
000476ec l       .debug_str	00000000 
0004773b l       .debug_str	00000000 
000477b1 l       .debug_str	00000000 
00047827 l       .debug_str	00000000 
000478fc l       .debug_str	00000000 
00047959 l       .debug_str	00000000 
000479b7 l       .debug_str	00000000 
00047a37 l       .debug_str	00000000 
00047aa6 l       .debug_str	00000000 
00047b24 l       .debug_str	00000000 
00047b77 l       .debug_str	00000000 
00047bdc l       .debug_str	00000000 
00047c3c l       .debug_str	00000000 
00047caa l       .debug_str	00000000 
00047d42 l       .debug_str	00000000 
00047dd1 l       .debug_str	00000000 
00047e5f l       .debug_str	00000000 
00047eed l       .debug_str	00000000 
00047ffd l       .debug_str	00000000 
00048071 l       .debug_str	00000000 
000480b3 l       .debug_str	00000000 
000480fc l       .debug_str	00000000 
00048156 l       .debug_str	00000000 
000481cf l       .debug_str	00000000 
000481dc l       .debug_str	00000000 
000481e1 l       .debug_str	00000000 
0004824d l       .debug_str	00000000 
00048294 l       .debug_str	00000000 
0004831e l       .debug_str	00000000 
0004833d l       .debug_str	00000000 
000483c7 l       .debug_str	00000000 
000483eb l       .debug_str	00000000 
0004842f l       .debug_str	00000000 
00048493 l       .debug_str	00000000 
000484d7 l       .debug_str	00000000 
00048549 l       .debug_str	00000000 
00048607 l       .debug_str	00000000 
00048669 l       .debug_str	00000000 
00048701 l       .debug_str	00000000 
000487b0 l       .debug_str	00000000 
00048846 l       .debug_str	00000000 
000488d9 l       .debug_str	00000000 
0004891d l       .debug_str	00000000 
00048970 l       .debug_str	00000000 
000489f4 l       .debug_str	00000000 
00048a82 l       .debug_str	00000000 
00048ad6 l       .debug_str	00000000 
00048ae7 l       .debug_str	00000000 
00048b6c l       .debug_str	00000000 
00048bf8 l       .debug_str	00000000 
00048c01 l       .debug_str	00000000 
00048c0e l       .debug_str	00000000 
00048c65 l       .debug_str	00000000 
00048cea l       .debug_str	00000000 
00048d3c l       .debug_str	00000000 
00048d4b l       .debug_str	00000000 
00048d92 l       .debug_str	00000000 
00048df6 l       .debug_str	00000000 
00048e17 l       .debug_str	00000000 
00048e97 l       .debug_str	00000000 
00048f02 l       .debug_str	00000000 
00048f80 l       .debug_str	00000000 
00048fcf l       .debug_str	00000000 
0004902e l       .debug_str	00000000 
000490c6 l       .debug_str	00000000 
0004916c l       .debug_str	00000000 
00049202 l       .debug_str	00000000 
0004928c l       .debug_str	00000000 
00049302 l       .debug_str	00000000 
0004934b l       .debug_str	00000000 
000493a7 l       .debug_str	00000000 
00049422 l       .debug_str	00000000 
0004948e l       .debug_str	00000000 
00049518 l       .debug_str	00000000 
0004955c l       .debug_str	00000000 
000495bd l       .debug_str	00000000 
00049601 l       .debug_str	00000000 
00049685 l       .debug_str	00000000 
0004970f l       .debug_str	00000000 
00049761 l       .debug_str	00000000 
000497df l       .debug_str	00000000 
00049864 l       .debug_str	00000000 
000498bb l       .debug_str	00000000 
0004993c l       .debug_str	00000000 
000499fa l       .debug_str	00000000 
00049a59 l       .debug_str	00000000 
00049abc l       .debug_str	00000000 
00049ae1 l       .debug_str	00000000 
00049b45 l       .debug_str	00000000 
00049b66 l       .debug_str	00000000 
00049be6 l       .debug_str	00000000 
00049c51 l       .debug_str	00000000 
00049ccf l       .debug_str	00000000 
00049d1e l       .debug_str	00000000 
00049d7d l       .debug_str	00000000 
00049e15 l       .debug_str	00000000 
00049ebb l       .debug_str	00000000 
00049f51 l       .debug_str	00000000 
00049fdb l       .debug_str	00000000 
0004a051 l       .debug_str	00000000 
0004a09a l       .debug_str	00000000 
0004a0f6 l       .debug_str	00000000 
0004a171 l       .debug_str	00000000 
0004a1dd l       .debug_str	00000000 
0004a267 l       .debug_str	00000000 
0004a2ab l       .debug_str	00000000 
0004a30c l       .debug_str	00000000 
0004a350 l       .debug_str	00000000 
0004a3d4 l       .debug_str	00000000 
0004a45e l       .debug_str	00000000 
0004a4dc l       .debug_str	00000000 
0004a561 l       .debug_str	00000000 
0004a5b8 l       .debug_str	00000000 
0004a639 l       .debug_str	00000000 
0004a6f7 l       .debug_str	00000000 
0004a756 l       .debug_str	00000000 
0004a789 l       .debug_str	00000000 
0004a7bc l       .debug_str	00000000 
0004a7ef l       .debug_str	00000000 
0004a822 l       .debug_str	00000000 
0004a855 l       .debug_str	00000000 
0004a888 l       .debug_str	00000000 
0004a8bb l       .debug_str	00000000 
0004a90f l       .debug_str	00000000 
0004a93d l       .debug_str	00000000 
0004a991 l       .debug_str	00000000 
0005d36e l       .debug_str	00000000 
00001676 l       .debug_str	00000000 
0004a9a4 l       .debug_str	00000000 
0004a9a8 l       .debug_str	00000000 
0004a9ac l       .debug_str	00000000 
0004a9b0 l       .debug_str	00000000 
0004a9b7 l       .debug_str	00000000 
0004a9bc l       .debug_str	00000000 
0004a9ec l       .debug_str	00000000 
0004aa3e l       .debug_str	00000000 
0004aa7f l       .debug_str	00000000 
0004aa8c l       .debug_str	00000000 
0004aacb l       .debug_str	00000000 
0004aad6 l       .debug_str	00000000 
0004ab12 l       .debug_str	00000000 
0004ab20 l       .debug_str	00000000 
0004ab54 l       .debug_str	00000000 
0004ab8f l       .debug_str	00000000 
0004abcd l       .debug_str	00000000 
0004abdb l       .debug_str	00000000 
0004ac14 l       .debug_str	00000000 
0004ac1e l       .debug_str	00000000 
0004ac5a l       .debug_str	00000000 
0004acb6 l       .debug_str	00000000 
0004acbd l       .debug_str	00000000 
0004ad1b l       .debug_str	00000000 
0004ad24 l       .debug_str	00000000 
0004ad8b l       .debug_str	00000000 
0004ad9c l       .debug_str	00000000 
0004adf9 l       .debug_str	00000000 
0004ae58 l       .debug_str	00000000 
0004aeb4 l       .debug_str	00000000 
0004af12 l       .debug_str	00000000 
0004af79 l       .debug_str	00000000 
0004afd6 l       .debug_str	00000000 
0004b035 l       .debug_str	00000000 
0004b06e l       .debug_str	00000000 
0004b078 l       .debug_str	00000000 
0004b0e0 l       .debug_str	00000000 
0004b113 l       .debug_str	00000000 
0004b11d l       .debug_str	00000000 
0004b153 l       .debug_str	00000000 
0004b15f l       .debug_str	00000000 
0004b196 l       .debug_str	00000000 
0004b1a3 l       .debug_str	00000000 
0004b1e7 l       .debug_str	00000000 
0004b201 l       .debug_str	00000000 
0004b272 l       .debug_str	00000000 
0004b285 l       .debug_str	00000000 
0004b2f6 l       .debug_str	00000000 
0004b339 l       .debug_str	00000000 
0004b343 l       .debug_str	00000000 
0004b38d l       .debug_str	00000000 
0004b3d4 l       .debug_str	00000000 
0004b421 l       .debug_str	00000000 
0004b46b l       .debug_str	00000000 
0004b49d l       .debug_str	00000000 
0004b4a6 l       .debug_str	00000000 
0004b4da l       .debug_str	00000000 
0004b513 l       .debug_str	00000000 
0004b54f l       .debug_str	00000000 
0004b561 l       .debug_str	00000000 
0004b5a2 l       .debug_str	00000000 
0004b601 l       .debug_str	00000000 
0004b632 l       .debug_str	00000000 
0004b648 l       .debug_str	00000000 
0004b67d l       .debug_str	00000000 
0004b6da l       .debug_str	00000000 
0004b73e l       .debug_str	00000000 
0004b79d l       .debug_str	00000000 
0004b7fd l       .debug_str	00000000 
0004b85b l       .debug_str	00000000 
00021d2b l       .debug_str	00000000 
0004b8c0 l       .debug_str	00000000 
0004b906 l       .debug_str	00000000 
0004b946 l       .debug_str	00000000 
0004b9ce l       .debug_str	00000000 
00059da4 l       .debug_str	00000000 
0004ba55 l       .debug_str	00000000 
0004ba88 l       .debug_str	00000000 
0004bafc l       .debug_str	00000000 
0004bb75 l       .debug_str	00000000 
0004bbe9 l       .debug_str	00000000 
0004bc48 l       .debug_str	00000000 
0004bca5 l       .debug_str	00000000 
0004bcff l       .debug_str	00000000 
0004bd5b l       .debug_str	00000000 
0004bdb8 l       .debug_str	00000000 
0004be17 l       .debug_str	00000000 
0004be7f l       .debug_str	00000000 
0004bee9 l       .debug_str	00000000 
0004bf52 l       .debug_str	00000000 
0004bfb0 l       .debug_str	00000000 
0004c022 l       .debug_str	00000000 
0004c026 l       .debug_str	00000000 
0004c099 l       .debug_str	00000000 
0004c0f7 l       .debug_str	00000000 
0004c153 l       .debug_str	00000000 
0004c1c4 l       .debug_str	00000000 
0004c23a l       .debug_str	00000000 
0004c271 l       .debug_str	00000000 
0004c2cd l       .debug_str	00000000 
0004c321 l       .debug_str	00000000 
0004c37f l       .debug_str	00000000 
0004c3eb l       .debug_str	00000000 
0004c440 l       .debug_str	00000000 
0004c473 l       .debug_str	00000000 
0004c481 l       .debug_str	00000000 
0004c4b9 l       .debug_str	00000000 
0004c4cc l       .debug_str	00000000 
0004c501 l       .debug_str	00000000 
0004c537 l       .debug_str	00000000 
0004c592 l       .debug_str	00000000 
0004c5c5 l       .debug_str	00000000 
0004c5cc l       .debug_str	00000000 
0004c60e l       .debug_str	00000000 
0004c63f l       .debug_str	00000000 
0004c670 l       .debug_str	00000000 
0004c6a3 l       .debug_str	00000000 
0004c6aa l       .debug_str	00000000 
0004c6d7 l       .debug_str	00000000 
0004c712 l       .debug_str	00000000 
0004c725 l       .debug_str	00000000 
0004c756 l       .debug_str	00000000 
0004c760 l       .debug_str	00000000 
0004c7c1 l       .debug_str	00000000 
0004c829 l       .debug_str	00000000 
0004c866 l       .debug_str	00000000 
0004c8b4 l       .debug_str	00000000 
0004c8f0 l       .debug_str	00000000 
0004c92c l       .debug_str	00000000 
0004c965 l       .debug_str	00000000 
0004c99f l       .debug_str	00000000 
0004c9d8 l       .debug_str	00000000 
0004ca0f l       .debug_str	00000000 
0004ca48 l       .debug_str	00000000 
0004ca82 l       .debug_str	00000000 
0004cac8 l       .debug_str	00000000 
0004caeb l       .debug_str	00000000 
0004cb31 l       .debug_str	00000000 
0004cb54 l       .debug_str	00000000 
0004cb9d l       .debug_str	00000000 
0004cbc3 l       .debug_str	00000000 
0004cc0c l       .debug_str	00000000 
0004cc32 l       .debug_str	00000000 
0004cc7c l       .debug_str	00000000 
0004cca3 l       .debug_str	00000000 
0004cced l       .debug_str	00000000 
0004cd14 l       .debug_str	00000000 
0004cd61 l       .debug_str	00000000 
0004cd8b l       .debug_str	00000000 
0004cdd8 l       .debug_str	00000000 
0004ce02 l       .debug_str	00000000 
0004ce35 l       .debug_str	00000000 
0004ce61 l       .debug_str	00000000 
0004ceb7 l       .debug_str	00000000 
0004cee2 l       .debug_str	00000000 
0004cf3a l       .debug_str	00000000 
0004cf90 l       .debug_str	00000000 
0004cfc9 l       .debug_str	00000000 
0004cfd4 l       .debug_str	00000000 
0000bb0b l       .debug_str	00000000 
0004d00d l       .debug_str	00000000 
0004d034 l       .debug_str	00000000 
0004d06d l       .debug_str	00000000 
0004d0b4 l       .debug_str	00000000 
0004d0c1 l       .debug_str	00000000 
0004d2db l       .debug_str	00000000 
0004d0f0 l       .debug_str	00000000 
0004d130 l       .debug_str	00000000 
0004d144 l       .debug_str	00000000 
0004d186 l       .debug_str	00000000 
0004d1b7 l       .debug_str	00000000 
0004d1e7 l       .debug_str	00000000 
0004d218 l       .debug_str	00000000 
0004d249 l       .debug_str	00000000 
0004d280 l       .debug_str	00000000 
0004d28b l       .debug_str	00000000 
0004d2cb l       .debug_str	00000000 
0004d2df l       .debug_str	00000000 
0004d31b l       .debug_str	00000000 
0004d32b l       .debug_str	00000000 
0004d360 l       .debug_str	00000000 
0004d36a l       .debug_str	00000000 
0004d39f l       .debug_str	00000000 
0004d3a9 l       .debug_str	00000000 
0004d3fe l       .debug_str	00000000 
0004d446 l       .debug_str	00000000 
0004d48c l       .debug_str	00000000 
0004d4d3 l       .debug_str	00000000 
0004d51c l       .debug_str	00000000 
0004d56e l       .debug_str	00000000 
0004d5c0 l       .debug_str	00000000 
0004d65e l       .debug_str	00000000 
0004d690 l       .debug_str	00000000 
0004d6c9 l       .debug_str	00000000 
0004d6de l       .debug_str	00000000 
0004d719 l       .debug_str	00000000 
0004d730 l       .debug_str	00000000 
0004d76e l       .debug_str	00000000 
0004d788 l       .debug_str	00000000 
0004d7ea l       .debug_str	00000000 
0004d80f l       .debug_str	00000000 
0004d86a l       .debug_str	00000000 
0004d879 l       .debug_str	00000000 
0004d8ee l       .debug_str	00000000 
0004d90b l       .debug_str	00000000 
0004d945 l       .debug_str	00000000 
0004d982 l       .debug_str	00000000 
0004d98d l       .debug_str	00000000 
0004d9c5 l       .debug_str	00000000 
0004d9cc l       .debug_str	00000000 
0004da4b l       .debug_str	00000000 
0004daab l       .debug_str	00000000 
0004db09 l       .debug_str	00000000 
0004db67 l       .debug_str	00000000 
0004db9f l       .debug_str	00000000 
0004dbd4 l       .debug_str	00000000 
0004dbff l       .debug_str	00000000 
0004dc09 l       .debug_str	00000000 
0004dc39 l       .debug_str	00000000 
0004dc47 l       .debug_str	00000000 
0004dca0 l       .debug_str	00000000 
0004dcf3 l       .debug_str	00000000 
0004dd6f l       .debug_str	00000000 
0004ddd3 l       .debug_str	00000000 
0004de37 l       .debug_str	00000000 
0004de6d l       .debug_str	00000000 
0004de81 l       .debug_str	00000000 
0004dec2 l       .debug_str	00000000 
0004deda l       .debug_str	00000000 
0004df8e l       .debug_str	00000000 
0004dfc1 l       .debug_str	00000000 
0004dfd2 l       .debug_str	00000000 
0004e018 l       .debug_str	00000000 
0004e025 l       .debug_str	00000000 
0004e062 l       .debug_str	00000000 
0004e0a6 l       .debug_str	00000000 
0004e0e7 l       .debug_str	00000000 
0004e129 l       .debug_str	00000000 
0004e133 l       .debug_str	00000000 
0004e177 l       .debug_str	00000000 
0004e182 l       .debug_str	00000000 
0004e1d0 l       .debug_str	00000000 
0004e21e l       .debug_str	00000000 
0004e264 l       .debug_str	00000000 
0004e2ac l       .debug_str	00000000 
0004e2f4 l       .debug_str	00000000 
0001eed8 l       .debug_str	00000000 
0004e35b l       .debug_str	00000000 
0004e3b4 l       .debug_str	00000000 
0004e41e l       .debug_str	00000000 
00003f0e l       .debug_str	00000000 
0004e488 l       .debug_str	00000000 
0004e503 l       .debug_str	00000000 
0004e578 l       .debug_str	00000000 
0004e583 l       .debug_str	00000000 
0004e5f8 l       .debug_str	00000000 
0004e603 l       .debug_str	00000000 
0004e65a l       .debug_str	00000000 
0004e6be l       .debug_str	00000000 
0004e6ca l       .debug_str	00000000 
0004e707 l       .debug_str	00000000 
0004e714 l       .debug_str	00000000 
0004e748 l       .debug_str	00000000 
0004e783 l       .debug_str	00000000 
0004e7df l       .debug_str	00000000 
0004e83a l       .debug_str	00000000 
0004e894 l       .debug_str	00000000 
000352ce l       .debug_str	00000000 
0004e8da l       .debug_str	00000000 
0004e940 l       .debug_str	00000000 
0004e977 l       .debug_str	00000000 
0004e97f l       .debug_str	00000000 
0004e9b7 l       .debug_str	00000000 
0004e9c0 l       .debug_str	00000000 
0004e9f8 l       .debug_str	00000000 
0004ea01 l       .debug_str	00000000 
0004ea38 l       .debug_str	00000000 
0004ea40 l       .debug_str	00000000 
0004ea78 l       .debug_str	00000000 
0004ea81 l       .debug_str	00000000 
0004eab9 l       .debug_str	00000000 
0004eac2 l       .debug_str	00000000 
0004eaf9 l       .debug_str	00000000 
0004eb01 l       .debug_str	00000000 
0004eb7b l       .debug_str	00000000 
0004ebf5 l       .debug_str	00000000 
0004ec6f l       .debug_str	00000000 
0004eceb l       .debug_str	00000000 
00007a65 l       .debug_str	00000000 
0004ed49 l       .debug_str	00000000 
0004eda8 l       .debug_str	00000000 
0004ee07 l       .debug_str	00000000 
0004ee66 l       .debug_str	00000000 
0004eec6 l       .debug_str	00000000 
0004ef24 l       .debug_str	00000000 
0004ef83 l       .debug_str	00000000 
0004efe2 l       .debug_str	00000000 
0004f041 l       .debug_str	00000000 
0004f0a1 l       .debug_str	00000000 
0004f0f6 l       .debug_str	00000000 
0004f14b l       .debug_str	00000000 
0004f1a5 l       .debug_str	00000000 
0004f1ff l       .debug_str	00000000 
0004f239 l       .debug_str	00000000 
0004f242 l       .debug_str	00000000 
0004f27c l       .debug_str	00000000 
0004f285 l       .debug_str	00000000 
0004f2c2 l       .debug_str	00000000 
000367b9 l       .debug_str	00000000 
0004f2fb l       .debug_str	00000000 
0004f35c l       .debug_str	00000000 
0004f3ba l       .debug_str	00000000 
0004f3fb l       .debug_str	00000000 
0004f439 l       .debug_str	00000000 
0004f472 l       .debug_str	00000000 
0004f4b1 l       .debug_str	00000000 
0004f4ef l       .debug_str	00000000 
0004f52d l       .debug_str	00000000 
0004f56e l       .debug_str	00000000 
0004f5b2 l       .debug_str	00000000 
0004f5ef l       .debug_str	00000000 
0004f655 l       .debug_str	00000000 
0004f6bc l       .debug_str	00000000 
0004f71f l       .debug_str	00000000 
0004f781 l       .debug_str	00000000 
0004f7e6 l       .debug_str	00000000 
0004f84f l       .debug_str	00000000 
0004f8b5 l       .debug_str	00000000 
0004f91b l       .debug_str	00000000 
0004f976 l       .debug_str	00000000 
0004f9dd l       .debug_str	00000000 
0004fa48 l       .debug_str	00000000 
0004faa3 l       .debug_str	00000000 
0004fafe l       .debug_str	00000000 
000167b4 l       .debug_str	00000000 
0004fb45 l       .debug_str	00000000 
0004fb8d l       .debug_str	00000000 
0004fbd5 l       .debug_str	00000000 
0004fc1d l       .debug_str	00000000 
0004fc66 l       .debug_str	00000000 
0004fcb0 l       .debug_str	00000000 
0004fcf7 l       .debug_str	00000000 
0004fd4a l       .debug_str	00000000 
0004fd65 l       .debug_str	00000000 
0004fdad l       .debug_str	00000000 
0004fe01 l       .debug_str	00000000 
0004fe49 l       .debug_str	00000000 
0004fe9d l       .debug_str	00000000 
0004fee5 l       .debug_str	00000000 
0004ff39 l       .debug_str	00000000 
0004ff82 l       .debug_str	00000000 
0004ffd7 l       .debug_str	00000000 
00050021 l       .debug_str	00000000 
00050079 l       .debug_str	00000000 
000500db l       .debug_str	00000000 
0005013a l       .debug_str	00000000 
0005019a l       .debug_str	00000000 
000501fa l       .debug_str	00000000 
0005025a l       .debug_str	00000000 
000502bb l       .debug_str	00000000 
0005031a l       .debug_str	00000000 
0005037a l       .debug_str	00000000 
000503da l       .debug_str	00000000 
0005043a l       .debug_str	00000000 
0005049b l       .debug_str	00000000 
000504f8 l       .debug_str	00000000 
00050553 l       .debug_str	00000000 
000505a9 l       .debug_str	00000000 
00050607 l       .debug_str	00000000 
0005065b l       .debug_str	00000000 
000506bc l       .debug_str	00000000 
00050722 l       .debug_str	00000000 
0005078a l       .debug_str	00000000 
000507f1 l       .debug_str	00000000 
0005084d l       .debug_str	00000000 
000508ae l       .debug_str	00000000 
00050908 l       .debug_str	00000000 
00050962 l       .debug_str	00000000 
000509c0 l       .debug_str	00000000 
00050a14 l       .debug_str	00000000 
00050a90 l       .debug_str	00000000 
00050af9 l       .debug_str	00000000 
00050b75 l       .debug_str	00000000 
00050bf1 l       .debug_str	00000000 
00050c5a l       .debug_str	00000000 
00050cd6 l       .debug_str	00000000 
00050d43 l       .debug_str	00000000 
00050d9d l       .debug_str	00000000 
00050df6 l       .debug_str	00000000 
00050e4e l       .debug_str	00000000 
00050ead l       .debug_str	00000000 
00050f0c l       .debug_str	00000000 
00050f6b l       .debug_str	00000000 
00050fcb l       .debug_str	00000000 
0005102b l       .debug_str	00000000 
0005108b l       .debug_str	00000000 
000510eb l       .debug_str	00000000 
0005114d l       .debug_str	00000000 
000511af l       .debug_str	00000000 
00051210 l       .debug_str	00000000 
00051272 l       .debug_str	00000000 
000512d4 l       .debug_str	00000000 
00051335 l       .debug_str	00000000 
00051397 l       .debug_str	00000000 
000513f9 l       .debug_str	00000000 
000367fd l       .debug_str	00000000 
00051442 l       .debug_str	00000000 
0005148e l       .debug_str	00000000 
00051496 l       .debug_str	00000000 
000514e0 l       .debug_str	00000000 
0005152b l       .debug_str	00000000 
00051532 l       .debug_str	00000000 
0005157d l       .debug_str	00000000 
000515c8 l       .debug_str	00000000 
00051614 l       .debug_str	00000000 
0005165e l       .debug_str	00000000 
000516ab l       .debug_str	00000000 
000516f6 l       .debug_str	00000000 
00051742 l       .debug_str	00000000 
0005178e l       .debug_str	00000000 
000517da l       .debug_str	00000000 
00051827 l       .debug_str	00000000 
00051871 l       .debug_str	00000000 
000518be l       .debug_str	00000000 
00051909 l       .debug_str	00000000 
00051955 l       .debug_str	00000000 
000519a1 l       .debug_str	00000000 
000519ed l       .debug_str	00000000 
00051a3a l       .debug_str	00000000 
00051a84 l       .debug_str	00000000 
00051ad1 l       .debug_str	00000000 
00051b1c l       .debug_str	00000000 
00051b68 l       .debug_str	00000000 
00051bb4 l       .debug_str	00000000 
00051c00 l       .debug_str	00000000 
00051c4d l       .debug_str	00000000 
00051c98 l       .debug_str	00000000 
00051ce6 l       .debug_str	00000000 
00051d32 l       .debug_str	00000000 
00051d7f l       .debug_str	00000000 
00051dcc l       .debug_str	00000000 
00051e19 l       .debug_str	00000000 
00051e67 l       .debug_str	00000000 
00051eb2 l       .debug_str	00000000 
00051efd l       .debug_str	00000000 
00051f49 l       .debug_str	00000000 
00051f95 l       .debug_str	00000000 
00051fe2 l       .debug_str	00000000 
0005202e l       .debug_str	00000000 
0005207b l       .debug_str	00000000 
000520c8 l       .debug_str	00000000 
00052127 l       .debug_str	00000000 
00052184 l       .debug_str	00000000 
000521e0 l       .debug_str	00000000 
0005223e l       .debug_str	00000000 
0005229b l       .debug_str	00000000 
000522f9 l       .debug_str	00000000 
00052356 l       .debug_str	00000000 
000523b4 l       .debug_str	00000000 
00052411 l       .debug_str	00000000 
00052470 l       .debug_str	00000000 
000524ce l       .debug_str	00000000 
0005252f l       .debug_str	00000000 
00052590 l       .debug_str	00000000 
000525f3 l       .debug_str	00000000 
00052624 l       .debug_str	00000000 
0005262c l       .debug_str	00000000 
0005268f l       .debug_str	00000000 
000526f2 l       .debug_str	00000000 
00052756 l       .debug_str	00000000 
000527ba l       .debug_str	00000000 
0005281e l       .debug_str	00000000 
00052882 l       .debug_str	00000000 
000528e5 l       .debug_str	00000000 
00052948 l       .debug_str	00000000 
000529ac l       .debug_str	00000000 
00052a10 l       .debug_str	00000000 
00052a74 l       .debug_str	00000000 
00052ad8 l       .debug_str	00000000 
00052b09 l       .debug_str	00000000 
00052b11 l       .debug_str	00000000 
00052b75 l       .debug_str	00000000 
00052bd9 l       .debug_str	00000000 
00052c3d l       .debug_str	00000000 
00052ca1 l       .debug_str	00000000 
00052d01 l       .debug_str	00000000 
00052d61 l       .debug_str	00000000 
00052d8f l       .debug_str	00000000 
00052d98 l       .debug_str	00000000 
00052df9 l       .debug_str	00000000 
00052e5a l       .debug_str	00000000 
00052ebb l       .debug_str	00000000 
00052f1c l       .debug_str	00000000 
00052f73 l       .debug_str	00000000 
00052fc6 l       .debug_str	00000000 
0005300e l       .debug_str	00000000 
00053036 l       .debug_str	00000000 
0005307e l       .debug_str	00000000 
00053094 l       .debug_str	00000000 
000530dc l       .debug_str	00000000 
00053111 l       .debug_str	00000000 
00053159 l       .debug_str	00000000 
00053194 l       .debug_str	00000000 
000531dc l       .debug_str	00000000 
00053224 l       .debug_str	00000000 
00053245 l       .debug_str	00000000 
0005328d l       .debug_str	00000000 
00053298 l       .debug_str	00000000 
000532e0 l       .debug_str	00000000 
0005331d l       .debug_str	00000000 
00053365 l       .debug_str	00000000 
000533be l       .debug_str	00000000 
00053406 l       .debug_str	00000000 
00053422 l       .debug_str	00000000 
0005346a l       .debug_str	00000000 
00053516 l       .debug_str	00000000 
0005355e l       .debug_str	00000000 
0005357c l       .debug_str	00000000 
000535c4 l       .debug_str	00000000 
000535ce l       .debug_str	00000000 
00053616 l       .debug_str	00000000 
00053651 l       .debug_str	00000000 
00053699 l       .debug_str	00000000 
000536e8 l       .debug_str	00000000 
00053730 l       .debug_str	00000000 
00053757 l       .debug_str	00000000 
0005379f l       .debug_str	00000000 
000537c9 l       .debug_str	00000000 
00053811 l       .debug_str	00000000 
0005388c l       .debug_str	00000000 
000538d4 l       .debug_str	00000000 
0005391c l       .debug_str	00000000 
00053932 l       .debug_str	00000000 
0000364d l       .debug_str	00000000 
0005397a l       .debug_str	00000000 
000539c2 l       .debug_str	00000000 
00053a0a l       .debug_str	00000000 
00053a3b l       .debug_str	00000000 
00053a83 l       .debug_str	00000000 
00053ae7 l       .debug_str	00000000 
00053b2f l       .debug_str	00000000 
000035ab l       .debug_str	00000000 
00053b77 l       .debug_str	00000000 
00053bbf l       .debug_str	00000000 
00053bcc l       .debug_str	00000000 
00053c14 l       .debug_str	00000000 
00053c1e l       .debug_str	00000000 
00053c66 l       .debug_str	00000000 
00053c6f l       .debug_str	00000000 
00053cb7 l       .debug_str	00000000 
00053cdf l       .debug_str	00000000 
00053d27 l       .debug_str	00000000 
00053d6f l       .debug_str	00000000 
00053d91 l       .debug_str	00000000 
00053dd9 l       .debug_str	00000000 
00053e0a l       .debug_str	00000000 
00053e52 l       .debug_str	00000000 
00053e9a l       .debug_str	00000000 
00053ed2 l       .debug_str	00000000 
00053f1a l       .debug_str	00000000 
00053f4f l       .debug_str	00000000 
00053f97 l       .debug_str	00000000 
00053fc0 l       .debug_str	00000000 
00054008 l       .debug_str	00000000 
0005402c l       .debug_str	00000000 
00054074 l       .debug_str	00000000 
00054099 l       .debug_str	00000000 
000540e1 l       .debug_str	00000000 
000540fe l       .debug_str	00000000 
00054146 l       .debug_str	00000000 
00054151 l       .debug_str	00000000 
00054199 l       .debug_str	00000000 
000541c1 l       .debug_str	00000000 
00054209 l       .debug_str	00000000 
00054218 l       .debug_str	00000000 
00054260 l       .debug_str	00000000 
000542a8 l       .debug_str	00000000 
000542c4 l       .debug_str	00000000 
0005430c l       .debug_str	00000000 
00054383 l       .debug_str	00000000 
000543cb l       .debug_str	00000000 
00054442 l       .debug_str	00000000 
0005448a l       .debug_str	00000000 
00054493 l       .debug_str	00000000 
000544db l       .debug_str	00000000 
00054501 l       .debug_str	00000000 
00054549 l       .debug_str	00000000 
0005457c l       .debug_str	00000000 
000545c4 l       .debug_str	00000000 
000545e1 l       .debug_str	00000000 
00054629 l       .debug_str	00000000 
00054632 l       .debug_str	00000000 
0005467a l       .debug_str	00000000 
000546c2 l       .debug_str	00000000 
000546e6 l       .debug_str	00000000 
000035fc l       .debug_str	00000000 
0005472e l       .debug_str	00000000 
00054776 l       .debug_str	00000000 
000547be l       .debug_str	00000000 
000548b6 l       .debug_str	00000000 
0000817b l       .debug_str	00000000 
000548fe l       .debug_str	00000000 
00054946 l       .debug_str	00000000 
0005498e l       .debug_str	00000000 
000549bb l       .debug_str	00000000 
00015f8f l       .debug_str	00000000 
00054a03 l       .debug_str	00000000 
00054a4b l       .debug_str	00000000 
00054aa8 l       .debug_str	00000000 
00054af0 l       .debug_str	00000000 
00054af9 l       .debug_str	00000000 
00054b41 l       .debug_str	00000000 
00054b5e l       .debug_str	00000000 
00054ba6 l       .debug_str	00000000 
00054bdc l       .debug_str	00000000 
00054c24 l       .debug_str	00000000 
00054c59 l       .debug_str	00000000 
00054ca1 l       .debug_str	00000000 
00054cda l       .debug_str	00000000 
00054d22 l       .debug_str	00000000 
00054d3e l       .debug_str	00000000 
00054d86 l       .debug_str	00000000 
00054d8e l       .debug_str	00000000 
00054dd6 l       .debug_str	00000000 
00054df1 l       .debug_str	00000000 
00054e39 l       .debug_str	00000000 
00054e61 l       .debug_str	00000000 
00054eab l       .debug_str	00000000 
00054ef5 l       .debug_str	00000000 
00054f54 l       .debug_str	00000000 
00054fb1 l       .debug_str	00000000 
0005500a l       .debug_str	00000000 
00055069 l       .debug_str	00000000 
000550c8 l       .debug_str	00000000 
00055129 l       .debug_str	00000000 
0005518c l       .debug_str	00000000 
000551f4 l       .debug_str	00000000 
00055256 l       .debug_str	00000000 
000552bc l       .debug_str	00000000 
0005531e l       .debug_str	00000000 
00055383 l       .debug_str	00000000 
000553e6 l       .debug_str	00000000 
00055442 l       .debug_str	00000000 
00055499 l       .debug_str	00000000 
000554f2 l       .debug_str	00000000 
00055545 l       .debug_str	00000000 
000555a1 l       .debug_str	00000000 
00055607 l       .debug_str	00000000 
0005565d l       .debug_str	00000000 
000556ba l       .debug_str	00000000 
0005571c l       .debug_str	00000000 
00055775 l       .debug_str	00000000 
000557d0 l       .debug_str	00000000 
0005582b l       .debug_str	00000000 
00055886 l       .debug_str	00000000 
000558e3 l       .debug_str	00000000 
00055940 l       .debug_str	00000000 
00055986 l       .debug_str	00000000 
000559d0 l       .debug_str	00000000 
00055a10 l       .debug_str	00000000 
00055a4d l       .debug_str	00000000 
00055a91 l       .debug_str	00000000 
00055acd l       .debug_str	00000000 
00055b11 l       .debug_str	00000000 
00055b5a l       .debug_str	00000000 
00055b63 l       .debug_str	00000000 
00055bac l       .debug_str	00000000 
00055bb5 l       .debug_str	00000000 
00055c1e l       .debug_str	00000000 
00055c7b l       .debug_str	00000000 
00055cde l       .debug_str	00000000 
00055d34 l       .debug_str	00000000 
00055d8a l       .debug_str	00000000 
00055de3 l       .debug_str	00000000 
00055e3b l       .debug_str	00000000 
00055e9f l       .debug_str	00000000 
00055f25 l       .debug_str	00000000 
00055f2b l       .debug_str	00000000 
00055fb1 l       .debug_str	00000000 
00055fb7 l       .debug_str	00000000 
00056039 l       .debug_str	00000000 
000560bb l       .debug_str	00000000 
0005613e l       .debug_str	00000000 
00056145 l       .debug_str	00000000 
000561c8 l       .debug_str	00000000 
000561cf l       .debug_str	00000000 
00056255 l       .debug_str	00000000 
000562db l       .debug_str	00000000 
0005635e l       .debug_str	00000000 
000563e1 l       .debug_str	00000000 
00056463 l       .debug_str	00000000 
000564e9 l       .debug_str	00000000 
0005656f l       .debug_str	00000000 
000565f9 l       .debug_str	00000000 
00056681 l       .debug_str	00000000 
00056709 l       .debug_str	00000000 
00056771 l       .debug_str	00000000 
000567da l       .debug_str	00000000 
00056844 l       .debug_str	00000000 
000568af l       .debug_str	00000000 
0005690d l       .debug_str	00000000 
0005696b l       .debug_str	00000000 
000569c9 l       .debug_str	00000000 
00056a28 l       .debug_str	00000000 
00056a86 l       .debug_str	00000000 
00056ae5 l       .debug_str	00000000 
00056b43 l       .debug_str	00000000 
00056ba2 l       .debug_str	00000000 
00056c01 l       .debug_str	00000000 
00056c60 l       .debug_str	00000000 
00056cbe l       .debug_str	00000000 
00056d1d l       .debug_str	00000000 
00056d7c l       .debug_str	00000000 
00056ddb l       .debug_str	00000000 
00056e3a l       .debug_str	00000000 
00056e99 l       .debug_str	00000000 
00056ef8 l       .debug_str	00000000 
00056f57 l       .debug_str	00000000 
00056fb6 l       .debug_str	00000000 
00057015 l       .debug_str	00000000 
00057074 l       .debug_str	00000000 
000570d3 l       .debug_str	00000000 
00057132 l       .debug_str	00000000 
00057191 l       .debug_str	00000000 
000571f0 l       .debug_str	00000000 
0005724f l       .debug_str	00000000 
000572ae l       .debug_str	00000000 
0005730d l       .debug_str	00000000 
0005736c l       .debug_str	00000000 
000573cb l       .debug_str	00000000 
0005742b l       .debug_str	00000000 
0005748a l       .debug_str	00000000 
000574e9 l       .debug_str	00000000 
00057548 l       .debug_str	00000000 
000575a8 l       .debug_str	00000000 
00057607 l       .debug_str	00000000 
00057666 l       .debug_str	00000000 
000576c5 l       .debug_str	00000000 
00057725 l       .debug_str	00000000 
000167e4 l     F .text	00000012 _ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE
00018804 l     F .text	0000000a _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E
0001880e l     F .text	0000000c _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E
00016e8a l     F .text	000000e4 _ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE
00017eb2 l     F .text	0000024c _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE
00016d84 l     F .text	000000b0 _ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E
00016e34 l     F .text	00000024 _ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE
000173ac l     F .text	00000032 _ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E
00016794 l     F .text	00000002 _ZN4core3ptr13drop_in_place17h000c7c147ade2111E
000167f8 l     F .text	00000114 _ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E
0002077c l     O .text	0000007b _ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E
000207f7 l     O .text	000001f0 _ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E
000209e8 l     O .text	00000458 _ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E
0001fd50 l     O .text	00000010 _ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE
00016e5e l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE
00016e64 l     F .text	00000026 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE
00016e58 l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E
00016796 l     F .text	0000004e _ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE
00000000 l    df *ABS*	00000000 semihosting_console.c
0001881c l     F .text	00000024 __semihost
00018840 l     F .text	00000010 debugger_connected
00018850 l     F .text	0000002e semihost_write
00018924 l     F .text	0000001c semihosting_console_write_ch
200016b4 l     O .bss	00000004 semihost_mbuf
20000100 l     O .data	00000001 log_enabled
00000000 l    df *ABS*	00000000 console.c
200016b8 l     O .bss	00000010 avail_queue
200016c8 l     O .bss	0000000c console_write_lock
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
200016d4 l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 sysinit.c
00018af4 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 hal_gpio.c
00018b48 l     F .text	00000050 hal_gpio_irq_handler
00018b98 l     F .text	0000002c hal_gpio_irq_setup
00018bc4 l     F .text	0000001c hal_gpio_find_empty_slot
00018be0 l     F .text	00000038 hal_gpio_find_pin
200016d8 l     O .bss	00000040 hal_gpio_irqs
20001718 l     O .bss	00000001 irq_setup.8906
00000000 l    df *ABS*	00000000 hal_i2c.c
00018d74 l     F .text	0000007a hal_i2c_delay_us
00018df0 l     F .text	00000024 hal_i2c_resolve
00018e14 l     F .text	0000001c hal_i2c_convert_status
00018e30 l     F .text	00000012 read_gpio_inbuffer
00018e42 l     F .text	000000a2 hal_i2c_clear_bus
00020e50 l     O .text	00000008 nrf52_hal_i2cs
00000000 l    df *ABS*	00000000 hal_spi.c
000191e0 l     F .text	0000006e nrf52_irqm_handler
00019268 l     F .text	00000014 hal_spi_stop_transfer
0001927c l     F .text	0000004c hal_spi_config_slave
000192c8 l     F .text	000000b8 hal_spi_init_master
00019380 l     F .text	000000e0 hal_spi_config_master
00020e58 l     O .text	0000000c nrf52_hal_spis
00000000 l    df *ABS*	00000000 hal_watchdog.c
00019764 l     F .text	0000000e nrf52_hal_wdt_default_handler
00019774 l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
0001998c l     F .text	00000016 os_main
20001820 l     O .bss	00004000 g_os_main_stack
20001720 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
00019c9c l     F .text	0000005c os_dev_add
00019cf8 l     F .text	00000026 os_dev_initialize
00019d1e l     F .text	00000020 os_dev_init
20005820 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
20005828 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mempool.c
0001a248 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
0001a35c l     F .text	00000010 os_msys_find_biggest_pool
0001a36c l     F .text	0000002c os_msys_find_pool
0001a3e4 l     F .text	00000044 os_msys_init_once
20005838 l     O .bss	00004900 os_msys_1_data
2000a138 l     O .bss	0000000c os_msys_1_mbuf_pool
2000a144 l     O .bss	0000001c os_msys_1_mempool
2000010c l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
0001a640 l     F .text	00000020 os_sanity_check_list_lock
0001a660 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
0001aad4 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
0001abc4 l     F .text	0000004c os_deltatime
0001ac10 l     F .text	0000005c os_time_tick
2000a168 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
0001af2c l       .text	00000000 SVC_User
0001af4a l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 memcmp.c
0001afec l       .text	00000000 test1
0001afe0 l       .text	00000000 loop1
0001aff2 l       .text	00000000 res1
0001b00e l       .text	00000000 test2
0001b016 l       .text	00000000 done
0001b002 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
0001b022 l       .text	00000000 test1
0001b01e l       .text	00000000 loop1
0001b030 l       .text	00000000 test2
0001b02c l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 tinyprintf.c
0001b09a l     F .text	000000c0 ui2a
0001b15a l     F .text	00000020 i2a
0001b17a l     F .text	00000030 a2d
0001b1aa l     F .text	00000036 a2i
0001b1e0 l     F .text	0000002a putf
0001b20c l     F .text	0000011c putchw
0001b328 l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 mynewt.c
0001b6ac l     F .text	00000004 stdin_read
0001b6b0 l     F .text	00000010 stdout_write
20000124 l     O .data	00000004 _stdin
20000128 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 mynewt_rust.c
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysinit-app.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001b760 l     F .text	00000028 nrf52k_flash_wait_ready
0001b788 l     F .text	00000054 nrf52k_flash_erase_sector
0001b7dc l     F .text	00000004 nrf52k_flash_init
0001b7e0 l     F .text	00000020 nrf52k_flash_sector_info
0001b800 l     F .text	000000d0 nrf52k_flash_write
0001b8d0 l     F .text	0000000e nrf52k_flash_read
00021010 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
0001b8e0 l     F .text	000000d4 nrf52_timer_handler
00000000 l    df *ABS*	00000000 hal_timer.c
0001baec l     F .text	0000000a nrf_read_timer_cntr
0001baf8 l     F .text	000000b4 nrf_timer_set_ocmp
0001bbac l     F .text	0000000a nrf_timer_disable_ocmp
0001bbb6 l     F .text	0000000a nrf_rtc_disable_ocmp
0001bbc0 l     F .text	00000054 hal_timer_read_bsptimer
0001bc14 l     F .text	00000076 hal_timer_chk_queue
0001bc8a l     F .text	0000002c hal_timer_irq_handler
0002102c l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 nrf52_periph.c
0001be50 l     F .text	00000034 nrf52_periph_create_timers
0001be84 l     F .text	00000020 nrf52_periph_create_i2c
0001bea4 l     F .text	00000020 nrf52_periph_create_spi
00021044 l     O .text	0000000c hal_i2c1_cfg
00021050 l     O .text	00000004 os_bsp_spi0m_cfg
00000000 l    df *ABS*	00000000 sensor_creator.c
00000000 l    df *ABS*	00000000 sensor.c
0001bed8 l     F .text	00000028 sensor_mgr_remove
0001bf00 l     F .text	00000060 sensor_mgr_insert
0001bf60 l     F .text	0000000a sensor_type_traits_empty
0001bf6c l     F .text	0000000c sensor_mgr_evq_set
0001bfa6 l     F .text	0000005c sensor_read_data_func
0001c004 l     F .text	00000048 sensor_base_ts_update_event
0001c04c l     F .text	00000050 sensor_up_timestamp
0001c0d4 l     F .text	000000a0 sensor_mgr_init
0001c340 l     F .text	0000007c sensor_mgr_wakeup_event
0001c19e l     F .text	00000032 sensor_update_nextrun
0001c1d0 l     F .text	0000001e sensor_calc_nextrun_delta
0001c1f0 l     F .text	00000024 sensor_find_min_nextrun_sensor
0001c2c8 l     F .text	0000004a sensor_mgr_poll_bytype
0001c312 l     F .text	0000002e sensor_poll_per_type_trait
2000a19c l     O .bss	00000078 sensor_notify_evt_area
2000a214 l     O .bss	0000001c sensor_notify_evt_pool
00000000 l    df *ABS*	00000000 sensor_coap.c
2000a230 l     O .bss	00000008 oc_sem
2000a238 l     O .bss	00000001 oc_sensor_coap_ready
00000000 l    df *ABS*	00000000 sensor_network.c
2000a23c l     O .bss	0000000c hw_id
2000a248 l     O .bss	00000004 hw_id_len
2000a250 l     O .bss	00000008 sensor_node_address
2000a258 l     O .bss	00000037 sensor_node_names_buf
20000130 l     O .data	00000014 sensor_node_names
00021068 l     O .text	0000000c COLLECTOR_NODE_HW_ID
00021074 l     O .text	0000003c SENSOR_NODE_HW_IDS
00021110 l     O .text	00000028 sensor_node_addresses
00000000 l    df *ABS*	00000000 creator.c
0001c564 l     F .text	00000050 config_device
2000a290 l     O .bss	00000014 adc_1_itf_temp_stub
2000a2a8 l     O .bss	000000c0 temp_stub_dev
00000000 l    df *ABS*	00000000 temp_stub.c
0001c610 l     F .text	00000004 temp_stub_close
0001c614 l     F .text	0000001c temp_stub_sensor_get_config
0001c630 l     F .text	00000026 temp_stub_open
0001c70c l     F .text	0000007c temp_stub_sensor_read
00021154 l     O .text	00000028 g_temp_stub_sensor_driver
00000000 l    df *ABS*	00000000 oc_buffer.c
0001c7b0 l     F .text	00000030 oc_buffer_tx
0001c7e0 l     F .text	0000002c oc_buffer_rx
2000a368 l     O .bss	00000018 oc_inq
2000a380 l     O .bss	00000018 oc_outq
00000000 l    df *ABS*	00000000 oc_ri.c
2000a398 l     O .bss	000000c8 oc_client_cb_area
2000a460 l     O .bss	0000001c oc_client_cb_pool
00000000 l    df *ABS*	00000000 adaptor.c
2000a47c l     O .bss	00000004 oc_evq
00000000 l    df *ABS*	00000000 ble_adaptor.c
00000000 l    df *ABS*	00000000 ip4_adaptor.c
00000000 l    df *ABS*	00000000 ip_adaptor.c
00000000 l    df *ABS*	00000000 lora_adaptor.c
00000000 l    df *ABS*	00000000 serial_adaptor.c
00000000 l    df *ABS*	00000000 oc_rep.c
2000a480 l     O .bss	0000001c oc_rep_objects
2000a49c l     O .bss	00000030 oc_rep_objects_area
00000000 l    df *ABS*	00000000 flash_map.c
0001c934 l     F .text	00000078 flash_map_read_mfg
2000a4cc l     O .bss	00000078 mfg_areas.9056
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 mfg.c
0001ca88 l     F .text	00000094 mfg_seek_next_aux
0001cb1c l     F .text	00000070 mfg_read_mmr
0001cb8c l     F .text	00000054 mfg_read_next_mmr
0001cbe0 l     F .text	0000003c mfg_open_flash_area
0001cc1c l     F .text	00000044 mfg_read_tlv_body
0001cce8 l     F .text	0000004e mfg_read_mmr_refs
2000a544 l     O .bss	00000001 mfg_initialized
2000a548 l     O .bss	00000018 mfg_mmrs
2000a560 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 support.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001cd4e l     F .text	0000001e hal_flash_check_addr
00000000 l    df *ABS*	00000000 nrf52_hw_id.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 aeabi_memclr.c
00000000 l    df *ABS*	00000000 aeabi_memcpy.c
00000000 l    df *ABS*	00000000 lib_a-aeabi_memset-soft.o
00000000 l    df *ABS*	00000000 libchip8.bde0u64m-cgu.0
00000afc l       .debug_str	00000000 
00007425 l       .debug_str	00000000 
0000747c l       .debug_str	00000000 
00001b56 l       .debug_str	00000000 
000074c8 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000074d0 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysflash.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
000098e0 g     F .text	00000014 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hd317927185b0114cE
0001699c g     F .text	00000004 _ZN4core5panic8Location4line17h650a566d9637c91dE
000159be g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE
00008616 g     F .text	000000ba main
000150ea g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE
00009a08 g     F .text	0000001c _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17he627156f6f8a4ed5E
00011426 g     F .text	0000070a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E
00019f6c g     F .text	00000040 os_eventq_remove
00011bbc g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h00c2f0b87edee24bE
0000d97a g     F .text	0000007a _ZN8libchip814Chip8$LT$T$GT$5setup17hf7242787e8a175a5E
000099c6 g     F .text	0000002e .hidden _ZN3app5chip812handle_touch17hb422a4f740ac0e1bE
0001adb8 g     F .text	00000018 os_arch_init
0001afd4 g     F .text	00000048 memcmp
0000ea0e g     F .text	00000012 _ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE
00016540 g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE
00011cc4 g     F .text	00000024 _ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE
00012e5a g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E
00014cce g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E
0000ed7e g     F .text	000000ee _ZN3log17__private_api_log17h076f8f4ccc99f19bE
00016280 g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE
00016108 g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E
00010034 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE
0000fc3e g     F .text	00000002 _ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E
000169cc g     F .text	00000040 _ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E
00011b9e g     F .text	0000001e .hidden _ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE
0000f71a g     F .text	00000010 _ZN4core3ptr5write17h7ef3fa6b6f80daebE
00014b9a g     F .text	0000005a _ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE
0001862c g     F .text	000000f4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$isize$GT$3fmt17hc96955e2b836ab47E
2000a680 g     O .bss	0000001c nrf52_hal_timer0
00014f36 g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E
0000f700 g     F .text	0000001a _ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE
00014dac g     F .text	00000020 _ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE
0001c194 g     F .text	0000000a sensor_unlock
000127b2 g     F .text	00000036 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E
00014eda g     F .text	0000001e _ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E
00010cae g     F .text	00000118 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E
00012eae g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E
00014ebe g     F .text	0000001c _ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE
00015dd6 g     F .text	00000008 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E
0000f56c g     F .text	0000006c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E
0001a68c g     F .text	00000024 os_sanity_check_register
0001c664 g     F .text	0000007c temp_stub_init
0001a72c g     F .text	00000054 os_sched_insert
2000a564 g     O .bss	00000001 g_silence_console
00015404 g     F .text	00000050 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E
00010582 g     F .text	0000028a _ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E
000154bc g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E
00013152 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE
00008164  w    F .text	00000002 POWER_CLOCK_IRQHandler
0001cdec g     F .text	00000034 hal_bsp_hw_id
00008164  w    F .text	00000002 NFCT_IRQHandler
00016766 g     F .text	00000004 .hidden _ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE
00009846 g     F .text	0000008e _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE
00014c92 g     F .text	00000018 _ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E
00010e38 g     F .text	00000162 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE
00015b7e g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE
0000dfb8 g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E
00012aea g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17hac8dfc997b9c24ecE
0000f2d8 g     F .text	00000012 _ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE
00015844 g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE
00018278 g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE
00016778 g     F .text	0000001c _ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E
0001514e g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE
000155a8 g     F .text	00000024 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE
0000e132 g     F .text	00000086 _ZN4core3cmp6max_by17h3c9686db40e0f078E
0000f10e g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E
20000114 g     O .data	00000008 g_os_run_list
00010066 g     F .text	0000004a _ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E
0001c870 g     F .text	00000020 oc_send_buffer
0001ae60 g     F .text	00000030 os_arch_start
0001592e g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE
00011c30 g     F .text	0000001a _ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E
0001c488 g     F .text	0000001a is_standalone_node
00019e58 g     F .text	00000010 os_eventq_init
0001788a g     F .text	00000044 _ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E
0001321a g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E
00016f6e g     F .text	00000022 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E
00012e98 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E
0000f3ce g     F .text	0000001a _ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE
00016452 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE
0001c3bc g     F .text	00000028 init_sensor_coap
0001c890 g     F .text	0000004c oc_send_multicast_message
00015b8e g     F .text	0000008c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE
00012d66 g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17hf6992577e3374dfdE
0000e734 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E
00017846 g     F .text	00000044 _ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE
2000a6a0 g     O .bss	00000034 sensor_mgr
000189c0 g     F .text	0000002c console_dump
0001a858 g     F .text	00000078 os_sched_wakeup
000130e2 g     F .text	0000001a _ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E
0001840c g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17h6ff113c3a96d4445E
0000f146 g     F .text	00000026 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E
0001cd4c g     F .text	00000002 _fini
00019c90 g     F .text	0000000a os_cputime_get32
00012f5e g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E
0000fae0 g     F .text	00000132 _ZN6mynewt3hal4GPIO4init17h54c34caf27320956E
2000a565 g     O .bss	00000001 g_console_input_ignore
000099b4 g     F .text	00000008 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17ha45cfdbdf4731cedE
0001ad48 g     F .text	00000014 os_arch_ctx_sw
00013128 g     F .text	0000001a _ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E
00012c24 g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hed5f6279c30b1a08E
00015278 g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE
0001af96 g     F .text	0000000c SysTick_Handler
0001c3fc g     F .text	00000070 get_hardware_id
00008168 g     F .text	00000010 _sbrkInit
0000eb2a g     F .text	0000003c _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E
00012ec4 g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE
0000ff88 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE
0000db86 g     F .text	0000001c _ZN4core4iter6traits8iterator8Iterator7flatten17h790b24ffb57b6bb2E
0001315c g     F .text	00000012 _ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E
0001b06e g     F .text	0000001c strcmp
00015b5a g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE
2000a598 g     O .bss	00000050 g_idle_task
00019e48 g     F .text	00000010 os_dev_reset
00016632 g     F .text	00000010 _ZN4core3ptr5write17h147d4643d861e927E
000100b0 g     F .text	00000262 _ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E
0001a9a8 g     F .text	00000010 os_sem_init
0000de20 g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117h7622a2ed78995b61E
0001319a g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc03b439e09ebac7fE
00018940 g     F .text	00000070 console_printhex
00010060 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE
00021214 g       .text	00000000 __exidx_start
0001c46c g     F .text	0000001c is_collector_node
00010532 g     F .text	00000050 _ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E
0000dabe g     F .text	0000001a _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hb195795cc886092aE
0001b036 g     F .text	00000038 memset
00008164  w    F .text	00000002 WDT_IRQHandler
0001815c g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17h096b8fea83a9dea7E
0001320a g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd10db62fd26673a3E
000188d0 g     F .text	00000054 console_buffer
00019e68 g     F .text	0000000a os_eventq_inited
00018b08 g     F .text	0000000c sysinit_end
000160b6 g     F .text	00000052 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE
00008020 g       .text	00000000 __isr_vector_start
00008164  w    F .text	00000002 TIMER3_IRQHandler
00008164  w    F .text	00000002 MWU_IRQHandler
00016944 g     F .text	0000004a _ZN4core6result13unwrap_failed17h10957bfda7d5e5f2E
2000a738 g       .bss	00000000 __HeapBase
00015454 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE
000153a2 g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E
0000ff34 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E
00011c02 g     F .text	00000012 _ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E
0000fc12 g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E
00014d16 g     F .text	00000096 _ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E
0001c9ec g     F .text	00000026 flash_area_read
00013112 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E
0001c902 g     F .text	00000002 oc_register_ip4
0000f624 g     F .text	00000046 _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E
0001c904 g     F .text	00000002 oc_register_ip6
0000842c g     F .text	000001d4 SystemInit
00012b76 g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h86687d23966cf72aE
0001cd6c g     F .text	00000028 hal_flash_init
00019e10 g     F .text	00000036 os_dev_close
000211ac g     O .text	00000048 sysflash_map_dflt
00009a24 g     F .text	000000d2 _ZN8libchip814Chip8$LT$T$GT$3new17hd62b2f9fc0ffdda2E
0001b754 g     F .text	0000000c hal_bsp_init
0000d88e g     F .text	000000ec _ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E
0000f1f2 g     F .text	00000032 _ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E
00011d70 g     F .text	000005e0 _ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE
0000e830 g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E
00008164  w    F .text	00000002 SWI0_EGU0_IRQHandler
00015e04 g     F .text	00000036 _ZN4core3ptr19swap_nonoverlapping17hd7afcc643b1b5b34E
00012bcc g     F .text	00000058 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h6530387af31222c2E
00011050 g     F .text	0000012c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE
0000e6f6 g     F .text	00000032 _ZN4core3ptr4read17h2038b0ecb0975c4fE
0001d148 g     F .text	00000004 __aeabi_memcpy4
00015caa g     F .text	000000c6 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE
000195ac g     F .text	0000002c hal_spi_set_txrx_cb
0001d140 g     F .text	00000006 __aeabi_memclr8
000086d0 g     F .text	00000102 rust_begin_unwind
2000a568 g     O .bss	00000004 console_is_midline
0001d140 g     F .text	00000006 __aeabi_memclr4
000094b4 g     F .text	000000ea .hidden _ZN3app5chip88on_start17hf865f4cce3d1fe15E
00011bf2 g     F .text	00000010 _ZN4core3ptr13drop_in_place17h22ac77b3595708cdE
000080f8 g       .text	00000000 __isr_vector_end
000190a4 g     F .text	0000013c hal_i2c_master_read
0001553c g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E
0001b38c g     F .text	0000025c tfp_format
00016422 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE
0001c260 g     F .text	00000068 sensor_read
00012b2e g     F .text	00000026 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hda13cf3283d09c50E
0000f6e6 g     F .text	00000010 _ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E
00014f46 g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E
00015ab2 g     F .text	0000006a _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE
0001d148 g     F .text	00000004 __aeabi_memcpy
0001d148 g     F .text	00000004 __aeabi_memcpy8
2000a6d4 g     O .bss	00000020 st_up_osco
0001ae90 g     F .text	0000005c os_arch_os_start
0001c242 g     F .text	0000001e sensor_init
20000000 g       .bss	00000000 _ram_start
0001acb8 g     F .text	00000026 os_time_delay
00014f56 g     F .text	0000002c _ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE
0001c900 g     F .text	00000002 oc_register_gatt
00012d7a g     F .text	00000012 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hc518c90d18182e65E
20000a00 g     O .bss	00000004 _ZN3log20MAX_LOG_LEVEL_FILTER17h20753a6176f34564E
0001cde8 g     F .text	00000004 hal_bsp_hw_id_len
00019c50 g     F .text	00000034 os_callout_wakeup_ticks
00012e0e g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h8a25dee97102e103E
00019fc6 g     F .text	00000026 os_mqueue_get
00018ee4 g     F .text	00000098 hal_i2c_init
00017718 g     F .text	0000012e _ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E
0001815c g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E
00008164  w    F .text	00000002 TIMER4_IRQHandler
0001ed48 g     O .text	00000050 _ZN8libchip87CHARBUF17h227c6d0d7e24574cE
0000e2b4 g     F .text	00000092 _ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E
00012d52 g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17h39af250ef60ec852E
00012350 g     F .text	00000048 _ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E
000163f2 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E
0001a958 g     F .text	00000022 os_sched
0000f2ea g     F .text	00000020 _ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE
00008164  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
0000e1b8 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h5567184bcc425327E
0000e876 g     F .text	00000014 _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE
00011c80 g     F .text	00000010 _ZN4core3ptr13drop_in_place17hf625580841d3425eE
2000fe50 g       *ABS*	000001b0 __StackLimit
0001bf78 g     F .text	0000002e sensor_mgr_match_bytype
0000e74a g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE
00014e5c g     F .text	00000032 _ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E
00012934 g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE
0001a494 g     F .text	00000014 os_mutex_init
0000f5d8 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E
000113e2 g     F .text	00000044 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE
2000a570 g     O .bss	00000028 nrf52_hal_spi0
00008614 g     F .text	00000002 _init
00000020 g       *ABS*	00000000 _imghdr_size
000155cc g     F .text	00000026 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E
00008164  w    F .text	00000002 RTC1_IRQHandler
0000e956 g     F .text	00000008 _ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E
00008164  w    F .text	00000002 PDM_IRQHandler
00008164  w    F .text	00000002 CCM_AAR_IRQHandler
00008164  w    F .text	00000002 SWI3_EGU3_IRQHandler
00016362 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE
20000124 g       .data	00000000 __aeabi_unwind_cpp_pr0
0000fdc4 g     F .text	0000001a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E
0000ff0a g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE
0000f1ea g     F .text	00000008 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E
00013306 g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E
0001a438 g     F .text	00000028 os_msys_get_pkthdr
0001c6e0 g     F .text	0000002c temp_stub_get_raw_temperature
0001a8d0 g     F .text	0000003c os_sched_os_timer_exp
00019d40 g     F .text	00000040 os_dev_create
00011c14 g     F .text	0000001c _ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E
000165bc g     F .text	0000001a _ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E
00008164  w    F .text	00000002 SWI4_EGU4_IRQHandler
000161a8 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE
0001a67c g     F .text	00000010 os_sanity_check_init
00016a2e g     F .text	0000022c _ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE
00008164  w    F .text	00000002 SAADC_IRQHandler
00019c84 g     F .text	0000000c os_cputime_init
00019f54 g     F .text	00000018 os_eventq_run
0000ed0a g     F .text	0000000c _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE
0001a460 g     F .text	00000034 os_msys_init
00015dde g     F .text	0000000e .hidden _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E
0001612c g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h0b01a2fd807adb5bE
00015f8c g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E
0001ad3e g     F .text	0000000a timer_handler
0000e0bc g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE
0001676a g     F .text	0000000e .hidden _ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E
0000fe9a g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E
0000f224 g     F .text	00000042 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E
00014e8e g     F .text	00000018 _ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E
00016762 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E
00016a0c g     F .text	00000022 _ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E
000080f8 g     F .text	0000005c Reset_Handler
000123f0 g     F .text	0000002c _ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE
00008020 g       .text	000000d8 __isr_vector
0001840c g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17heaf2297ac445d947E
00015030 g     F .text	0000002a .hidden _ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE
0001b5e8 g     F .text	00000008 vfprintf
00014a24 g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E
0000e8a2 g     F .text	0000000a _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E
00013028 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E
0001a066 g     F .text	00000036 os_mbuf_get_pkthdr
00008164  w    F .text	00000002 PWM0_IRQHandler
000163c2 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E
00000000 g       .svc_table	00000000 SVC_Count
00017c1a g     F .text	00000298 _ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE
00011ce8 g     F .text	00000088 _ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE
000169a0 g     F .text	0000002c _ZN4core9panicking5panic17h24d1dd0a9d540834E
0001ad6e g     F .text	0000000a os_arch_in_critical
0000dde6 g     F .text	0000003a .hidden _ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E
000154a8 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E
0001a71c g     F .text	00000010 os_sanity_init
00012a54 g     F .text	00000018 .hidden _ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE
00015dca g     F .text	0000000c _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE
0001505a g     F .text	0000001e _ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE
0001840c g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E
00014ef8 g     F .text	0000001e _ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE
00019830 g     F .text	0000004c __assert_func
00016194 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E
0001579a g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE
00008164  w    F .text	00000002 SWI1_EGU1_IRQHandler
00015078 g     F .text	0000001e _ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE
0001a306 g     F .text	0000001e os_memblock_put_from_cb
0001aef0 g     F .text	00000014 os_set_env
2000a65c g     O .bss	00000004 g_os_last_ctx_sw_time
0001316e g     F .text	0000000a _ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE
00018aa0 g     F .text	00000048 console_printf
00013184 g     F .text	00000016 .hidden _ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E
00012884 g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE
0000e776 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE
0001302e g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E
00016302 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E
0001af04 g     F .text	00000006 os_arch_init_task_stack
0001ccd8 g     F .text	00000010 mfg_open
0001840c g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$isize$GT$3fmt17hb33f6f1f0114a92bE
000099bc g     F .text	0000000a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h3c52951efd018dffE
0001c834 g     F .text	00000030 oc_ri_mem_init
00010b9e g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE
0001b744 g     F .text	00000010 hal_bsp_flash_dev
0001ca14 g     F .text	00000070 flash_map_init
2000a670 g     O .bss	00000004 g_os_time
00014e44 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E
0001080c g     F .text	00000392 _ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E
0001afa2 g     F .text	0000001e os_default_irq_asm
0001987c g     F .text	00000098 os_default_irq
200000e4 g     O .data	00000004 SystemCoreClock
000194e4 g     F .text	00000068 hal_spi_disable
00015c80 g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E
0000f6b8 g     F .text	0000002e _ZN6mynewt3sys7console6buffer17h6e460748855d110aE
0001c906 g     F .text	00000002 oc_register_lora
00018278 g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u16$GT$3fmt17hc265973c39f711faE
0001a0e8 g     F .text	000000a8 os_mbuf_append
0001c5b4 g     F .text	0000005c temp_stub_create
0001cd94 g     F .text	00000054 hal_flash_read
00018880 g     F .text	00000048 console_flush
00016514 g     F .text	00000018 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE
00014ea6 g     F .text	00000018 _ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E
00019ad0 g     F .text	0000001a os_start
0001bcc8 g     F .text	00000060 hal_timer_init
00012ed8 g     F .text	00000086 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E
0001b6c0 g     F .text	00000010 rust_sysinit
0000e034 g     F .text	00000028 _ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE
00008164  w    F .text	00000002 I2S_IRQHandler
000189b0 g     F .text	00000010 console_printint
0001a97c g     F .text	0000002c os_sched_resort
00020fec g     O .text	00000008 MemFile_methods
0001b694 g     F .text	00000018 fmemopen_w
00013f7a g     F .text	00000126 _ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E
00019460 g     F .text	00000038 hal_spi_config
0001d13c  w    F .text	00000002 .hidden __aeabi_ldiv0
0001a34c g     F .text	00000010 os_mempool_module_init
0001a94c g     F .text	0000000c os_sched_next_task
00015c24 g     F .text	0000001a _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E
00011c4a g     F .text	00000010 _ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E
00018c9e g     F .text	00000034 hal_gpio_read
00019b24 g     F .text	0000001a os_callout_init
0001a428 g     F .text	00000010 os_msys_reset
000098d4 g     F .text	0000000c _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc15bb8a8dbf2b592E
0001b5f0 g     F .text	00000024 printf
00008156  w    F .text	00000002 HardFault_Handler
0001ce40 g     F .text	00000000 .hidden __aeabi_uldivmod
0000dbd4 g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a9ff7d0c8950d97E
0001ace0 g     F .text	00000038 os_gettimeofday
00018a2c g     F .text	0000001e console_write
000164b2 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E
000176e2 g     F .text	00000008 _ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE
0000dc00 g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hac566d17e493ac47E
00010c9a g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE
000199b0 g     F .text	00000070 os_init_idle_task
0001add0 g     F .text	0000008c os_arch_os_init
0001031e g     F .text	000001b6 _ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE
0000fed2 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E
00019a20 g     F .text	000000b0 os_init
2000a648 g     O .bss	00000008 g_os_mempool_list
00010c90 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE
00008184 g     F .text	00000010 hal_debugger_connected
00011c5a g     F .text	0000001e _ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE
0000e78c g     F .text	0000009a _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E
0000dd4e g     F .text	00000038 _ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h9a887926e27564b3E
00018a28 g     F .text	00000004 semihosting_console_init
0001cc72 g     F .text	0000001a mfg_seek_next_with_type
0001a560 g     F .text	000000e0 os_mutex_pend
000131ca g     F .text	0000001c _ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h5310f2928696ef27E
00008164  w    F .text	00000002 COMP_LPCOMP_IRQHandler
00018c7c g     F .text	00000022 hal_gpio_write
00008600 g     F .text	00000014 _start
0000dc2c g     F .text	00000010 _ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5923d182d43571feE
0000e86e g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE
0000e8d6 g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE
0001cd38 g     F .text	00000014 __wrap_coap_receive
00016332 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E
2000a56c g     O .bss	00000001 sysinit_active
0001322a g     F .text	0000006e .hidden _ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E
00014b70 g     F .text	0000002a _ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE
0001b664 g     F .text	0000002e memfile_write
0001d13c  w    F .text	00000002 .hidden __aeabi_idiv0
00015d9e g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE
000199a4 g     F .text	0000000c os_started
00015a1e g     F .text	0000000a .hidden _ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE
0001c80c g     F .text	00000028 oc_buffer_init
0000fc40 g     F .text	00000056 _ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE
0000feb6 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E
2000a650 g     O .bss	0000000c g_os_sanity_check_mu
0000f72a g     F .text	0000002c .hidden _ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E
00008164  w    F .text	00000002 UARTE0_UART0_IRQHandler
0000de58 g     F .text	0000002a _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hd29a6855bf5041fdE
0001d140 g     F .text	00000006 __aeabi_memclr
000087d2 g     F .text	00000270 .hidden _ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E
0001d14c g     F .text	0000009a __aeabi_memset4
00013392 g     F .text	00000a7a _ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E
000176ea g     F .text	00000008 _ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE
0001652c g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E
0000ddd2 g     F .text	00000014 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h0a1a9897cf1e3266E
0001ac78 g     F .text	00000040 os_time_advance
00019498 g     F .text	0000004c hal_spi_enable
0000e09e g     F .text	0000000a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc2b7f3c069a746efE
0001cca0 g     F .text	00000038 mfg_init
0000f760 g     F .text	00000010 _ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E
2000a5e8 g     O .bss	00000050 g_os_main_task
0000db40 g     F .text	00000030 _ZN4core3any6TypeId2of17h8ccdaa41437c3cf9E
0001d14c g     F .text	0000009a __aeabi_memset8
000181ba g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u16$GT$3fmt17hcd88e3dc15351fceE
0000f1de g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE
0002122c g       .ARM.exidx	00000000 __exidx_end
00008164  w    F .text	00000002 PWM1_IRQHandler
20000a04 g     O .bss	00000018 _ZN22piet_embedded_graphics7display7DISPLAY17ha0ff10e671b220f2E
00016d2c g     F .text	00000058 _ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE
0000f16c g     F .text	0000004e _ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE
00018720 g     F .text	000000e4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17hea84eef47d2fd641E
00018b14 g     F .text	00000034 NVIC_Relocate
00018afc g     F .text	0000000c sysinit_start
00015d86 g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E
00015db6 g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE
00020ff8 g     O .text	00000018 nrf52k_flash_dev
00015e3a g     F .text	00000058 _ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E
0001bd28 g     F .text	000000f8 hal_timer_config
00014e2c g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E
00014c46 g     F .text	0000004c _ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E
0001b650 g     F .text	00000014 vprintf
0000f60a g     F .text	0000001a _ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E
000188c8 g     F .text	00000008 disable_buffer
0000db06 g     F .text	0000003a _ZN31_$LT$dyn$u20$core..any..Any$GT$2is17he92aef8d37797e2bE
2000a638 g     O .bss	00000004 g_os_started
00016994 g     F .text	00000008 _ZN4core5panic9PanicInfo7payload17h9302c8d957737573E
00014dec g     F .text	00000020 _ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E
20000144 g       .bssnz	00000000 __bssnz_end__
00019dac g     F .text	00000020 os_dev_lookup
0001598e g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E
0000fdb8 g     F .text	0000000c _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E
0000df1c g     F .text	0000009c _ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE
0001980c g     F .text	00000010 hal_watchdog_enable
2000a674 g     O .bss	0000000c g_hal_os_tick
0001ad68 g     F .text	00000006 os_arch_restore_sr
00019b7c g     F .text	00000078 os_callout_reset
00010ca4 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE
0001cc8c g     F .text	0000000a mfg_read_tlv_flash_area
000131e6 g     F .text	00000024 _ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E
0000815a  w    F .text	00000002 BusFault_Handler
00016642 g     F .text	0000011c .hidden _ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E
00015d70 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E
00019fb4 g     F .text	00000012 os_mqueue_init
0000e346 g     F .text	00000052 _ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE
00016392 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E
00012e16 g     F .text	00000012 _ZN4core3mem4swap17h9f9b2c00c891c39bE
00015654 g     F .text	00000052 _ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E
0000db70 g     F .text	00000016 _ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17ha534480b95c4fb6cE
0001c656 g     F .text	0000000e temp_stub_default_cfg
00008020 g       .imghdr	00000000 __text
00019b40 g     F .text	0000003c os_callout_stop
000155f2 g     F .text	00000062 _ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E
000081c0 g     F .text	0000004c hal_system_clock_start
0001a0b0 g     F .text	00000024 os_mbuf_free_chain
000098f4 g     F .text	000000c0 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E
0000f756 g     F .text	0000000a .hidden _ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E
0001b6d0 g     F .text	00000030 mem_init_mbuf_pool
0000f2d0 g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E
00013178 g     F .text	0000000c _ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E
00018f7c g     F .text	00000128 hal_i2c_master_write
000159ee g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E
00008164  w    F .text	00000002 QDEC_IRQHandler
00008164  w    F .text	00000002 SWI5_EGU5_IRQHandler
00013374 g     F .text	0000001e _ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E
0000e54a g     F .text	0000003a _ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E
0000d6b2 g     F .text	00000024 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h64cee1a3c11094e6E
00015b1c g     F .text	0000001a _ZN4core5slice14from_raw_parts17h1425df913744b73aE
00019fac g     F .text	00000008 os_eventq_dflt_get
0001c17c g     F .text	00000018 sensor_lock
00012e70 g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE
00012c46 g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hceb9f03c67b66808E
00018a54 g     F .text	0000004c console_pkg_init
20000104 g     O .data	00000004 sysinit_panic_cb
0001a0d4 g     F .text	00000014 os_mbuf_len
0001a09c g     F .text	00000014 os_mbuf_free
000104d4 g     F .text	0000005e _ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E
00014f82 g     F .text	000000ae _ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E
0000e760 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE
0000ed16 g     F .text	0000000a _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE
00008194 g     F .text	0000002c hal_system_reset
00018a4a g     F .text	00000008 console_blocking_mode
00010312 g     F .text	0000000c _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E
00015dec g     F .text	00000018 .hidden _ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17h751b32771630458fE
00011c90 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE
0001117c g     F .text	00000266 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE
00012e84 g     F .text	0000000c _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E
0001bec4 g     F .text	00000010 nrf52_periph_create
00015a70 g     F .text	00000042 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E
0001a6b0 g     F .text	0000006c os_sanity_run
00009ba0 g     F .text	00003b12 _ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E
0000dba2 g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h21a9e3dc4962ad94E
0000841c g     F .text	00000010 SystemCoreClockUpdate
00015e92 g     F .text	00000042 _ZN4core3ptr4read17h10ae8fa070723038E
00014a38 g     F .text	0000007e .hidden _ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE
00014caa g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E
000165d6 g     F .text	0000001a _ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE
0001a2c0 g     F .text	00000014 os_mempool_init
00020ff4 g     O .text	00000004 stdout
000129e4 g     F .text	0000000e .hidden _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE
00019d80 g     F .text	0000002c os_dev_initialize_all
0000f30a g     F .text	000000b4 _ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E
00014dcc g     F .text	00000020 _ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E
00016156 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE
00012a00 g     F .text	00000054 _ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E
00012b54 g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h4a79113dcdba2ecfE
00019914 g     F .text	00000078 os_idle_task
0000f3be g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h1982c2483e0a2028E
00016298 g     F .text	0000000a .hidden _ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE
00011bd4 g     F .text	0000001e _ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE
00016500 g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E
00010f9a g     F .text	000000b6 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE
0000d796 g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$4push17hdbfa3ffa7a184c4eE
000173e0 g     F .text	00000302 _ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE
0001c9ac g     F .text	00000040 flash_area_open
00015c3e g     F .text	00000028 _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E
00015a66 g     F .text	0000000a _ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E
00014cf2 g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE
0000d6fa g     F .text	00000076 _ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E
00008164 g     F .text	00000002 Default_Handler
00016992 g     F .text	00000002 _ZN4core5panic8Location6caller17h4b6b61f9498709a3E
0000fdde g     F .text	000000bc _ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E
0001a398 g     F .text	0000004c os_msys_register
00015c66 g     F .text	0000001a _ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE
0000fc96 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E
2000a160 g     O .bss	00000004 g_os_sanity_check_list
000127e8 g     F .text	00000066 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E
0000e8ac g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE
0000dc3c g     F .text	00000112 _ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E
0000e486 g     F .text	0000001c _ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E
0001954c g     F .text	00000060 hal_spi_init
00008164  w    F .text	00000002 RNG_IRQHandler
0001c0b8 g     F .text	00000010 sensor_mgr_unlock
2000a730 g     O .bss	00000004 flash_map_entries
000180fe g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17hb1f1dec5462292d8E
0000dad8 g     F .text	0000002e _ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E
000162a2 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E
000153b4 g     F .text	00000050 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE
0001c908 g     F .text	00000002 oc_register_serial
00008178 g     F .text	0000000c hal_system_init
0001611a g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h923903211635af18E
000158ee g     F .text	00000010 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E
0001241c g     F .text	00000396 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E
0001004a g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE
00015096 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E
00008164  w    F .text	00000002 GPIOTE_IRQHandler
0000ea20 g     F .text	000000aa _ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E
00008164  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
0001cc60 g     F .text	00000012 mfg_seek_next
0000d7ec g     F .text	000000a2 _ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E
000156a6 g     F .text	0000004a _ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E
0001595e g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E
0000ed20 g     F .text	00000008 _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE
000150c0 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE
2000011c g     O .data	00000008 g_os_sleep_list
00017150 g     F .text	0000025c _ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E
0001a02a g     F .text	0000000a os_mbuf_pool_init
2000a640 g     O .bss	00000008 g_callout_list
0001a7bc g     F .text	0000000c os_sched_set_current_task
00019bf4 g     F .text	0000005c os_callout_tick
0000e0a8 g     F .text	00000014 _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17habaf51e2b5499869E
0000fcb2 g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE
0000e988 g     F .text	0000007c _ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E
000164ea g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E
00019794 g     F .text	00000078 hal_watchdog_init
2000a664 g     O .bss	00000001 g_task_id
000184e2 g     F .text	0000007a _ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E
00011c78 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17hef1277471241eea2E
00019dcc g     F .text	00000044 os_dev_open
2000a660 g     O .bss	00000004 g_current_task
0001675e g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE
20000148 g       .bss	00000000 __bss_start__
00016214 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E
0000f1d2 g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE
0000e05c g     F .text	00000042 _ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E
000095a8 g     F .text	00000010 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hb8a7325968dc9595E
00019250 g     F .text	00000018 nrf52_spi0_irq_handler
0001c174 g     F .text	00000008 sensor_pkg_init
0000dbb4 g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h47809268ca43aa27E
0001c788 g     F .text	00000028 temp_stub_config
00019fec g     F .text	0000003e os_mqueue_put
00018720 g     F .text	000000e4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE
000195d8 g     F .text	000000ac hal_spi_txrx
00008164  w    F .text	00000002 RTC2_IRQHandler
0001a7b0 g     F .text	0000000c os_sched_get_current_task
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
0001304a g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E
0001ca84 g     F .text	00000002 modlog_init
00012db0 g     F .text	0000005e .hidden _ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E
0001533e g     F .text	00000052 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E
00015a28 g     F .text	0000003e _ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE
00019684 g     F .text	000000e0 hal_spi_txrx_noblock
0001690c g     F .text	00000038 _ZN4core6option13expect_failed17had6579abaad447b4E
000176f2 g     F .text	00000026 _ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE
0000f6f6 g     F .text	0000000a _ZN6mynewt3sys7console5flush17h78b2f38352f0d691E
00008164  w    F .text	00000002 TEMP_IRQHandler
0000f548 g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE
0001a780 g     F .text	00000030 os_sched_ctx_sw_hook
00009af6 g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$3pop17hb9253c18c9cf9467E
0001c214 g     F .text	0000002e sensor_mgr_register
00016944 g     F .text	0000004a _ZN4core6option18expect_none_failed17h54d938081af97677E
00012c98 g     F .text	000000ba _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E
00016f90 g     F .text	000001c0 _ZN4core3fmt5write17hd95ac78ed22a2252E
00008154  w    F .text	00000002 NMI_Handler
0000fc28 g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE
0000fd2e g     F .text	0000008a _ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE
000165ae g     F .text	0000000e .hidden _ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E
0000f3c6 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E
0000e728 g     F .text	0000000c _ZN4core3ptr5write17h4a80332de2cee3d3E
0001a034 g     F .text	00000032 os_mbuf_get
000095b8 g     F .text	0000028e _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E
2000a668 g     O .bss	00000008 g_os_task_list
0000efc2 g     F .text	0000014c _ZN6mynewt4Strn8validate17h1102378208cc75cdE
00016c5a g     F .text	000000d2 _ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E
0001b614 g     F .text	0000003a vsnprintf
0000dbc6 g     F .text	0000000e _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h150c3e461f16f651E
00013e46 g     F .text	00000090 _ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E
00012a94 g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E
0001a4a8 g     F .text	000000b8 os_mutex_release
0000ed28 g     F .text	00000056 _ZN3log6logger17hf609e7cc1c031552E
00012a6c g     F .text	00000028 .hidden _ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E
0000eadc g     F .text	0000004e _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E
0001c0c8 g     F .text	0000000c sensor_mgr_evq_get
00012d8c g     F .text	00000024 .hidden _ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h2d7145d37f608201E
0000d6d6 g     F .text	00000014 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h2454dbfe6f26a106E
00012398 g     F .text	00000058 _ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E
0000e88a g     F .text	00000018 _ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E
000154d0 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE
0000d9f4 g     F .text	000000ba _ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E
2000a63c g     O .bss	00000004 g_os_idle_ctr
00018c18 g     F .text	0000002c hal_gpio_init_in
0000e826 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE
00010dc6 g     F .text	00000036 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E
00008164  w    F .text	00000002 TIMER1_IRQHandler
0001bed4 g     F .text	00000002 sensor_dev_create
0000e398 g     F .text	0000008e _ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE
00008164  w    F .text	00000002 TIMER0_IRQHandler
0000ef76 g     F .text	00000010 _ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE
00018c44 g     F .text	00000038 hal_gpio_init_out
0000f3e8 g     F .text	00000160 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE
0000e4ba g     F .text	00000012 _ZN4core3mem4swap17hc4afbec7b5ffb125E
000164e2 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E
00015c1a g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E
0000ffb2 g     F .text	0000003e .hidden _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE
200000d8 g       .data	00000000 __data_start__
0001ac6c g     F .text	0000000c os_time_get
00016994 g     F .text	00000008 _ZN4core5panic8Location4file17h61e77cb122865fdbE
00011b30 g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E
0001a324 g     F .text	00000026 os_memblock_put
00013ed6 g     F .text	000000a4 _ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE
0001a7c8 g     F .text	00000090 os_sched_sleep
0000e864 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE
0001c09c g     F .text	0000001c sensor_mgr_lock
0001ce70 g     F .text	000002cc .hidden __udivmoddi4
00012e90 g     F .text	00000008 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E
0001ba4c g     F .text	000000a0 os_tick_init
00014bf4 g     F .text	00000052 _ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E
0001698e g     F .text	00000004 _ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E
00008164  w    F .text	00000002 RTC0_IRQHandler
0000f66a g     F .text	00000044 _ZN6mynewt3sys7console5print17hc13a6743274d87fcE
0001a90c g     F .text	00000040 os_sched_wakeup_ticks
00016180 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17haf8f4e41d032be2dE
0000daae g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$8shutdown17h04afc1517f23f57eE
0000feee g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE
0001be20 g     F .text	00000030 hal_timer_read
20000144 g       .data	00000000 __data_end__
00018d4c g     F .text	00000028 hal_gpio_irq_enable
00012e28 g     F .text	00000032 .hidden _ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE
0001c864 g     F .text	0000000c oc_evq_set
0001c3e4 g     F .text	00000018 is_sensor_node
00009b4c g     F .text	00000052 _ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E
000180fe g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE
0001c8dc g     F .text	00000024 oc_init
00018336 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u32$GT$3fmt17h54b904d9d5d295daE
00018336 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h85ec06f2c95e1ecaE
00010bd4 g     F .text	000000bc _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE
000178ce g     F .text	0000034c _ZN4core3str16slice_error_fail17h232f9181d55b3da9E
00015efe g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hf8294d47b4b1c78dE
2000a6f8 g     O .bss	00000018 sensor_base_ts
0001862c g     F .text	000000f4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E
0002122c g       .ARM.exidx	00000000 __etext
00012b0c g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17h31de2c523da77629E
000181ba g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E
00018ae8 g     F .text	0000000c console_get_ticks
00008164  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
0000f6ae g     F .text	0000000a _ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E
20000108 g     O .data	00000004 hal_twi_i2c1
000151b2 g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E
0001aaec g     F .text	000000d8 os_task_init
00011cba g     F .text	0000000a _ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E
0000f5e2 g     F .text	00000028 _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E
0000e46c g     F .text	0000001a _ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE
0000e854 g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E
000165f0 g     F .text	00000042 _ZN4core3ptr4read17h27a035d1812d8297E
00016482 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E
0000dd86 g     F .text	0000004c _ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h67d5d76d62fd1974E
0001a9b8 g     F .text	00000064 os_sem_release
0001d14c g     F .text	0000009a __aeabi_memset
0001a190 g     F .text	000000b8 os_mbuf_dup
0001af50 g     F .text	00000046 PendSV_Handler
0001af0a g     F .text	00000046 SVC_Handler
0001ad5c g     F .text	0000000c os_arch_save_sr
00014e0c g     F .text	00000020 _ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E
00008164  w    F .text	00000002 PWM2_IRQHandler
0000959e g     F .text	0000000a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17h6cf7f1058fcc9245E
0000815c  w    F .text	00000002 UsageFault_Handler
0001bcb8 g     F .text	00000010 nrf52_timer0_irq_handler
0001ad78 g     F .text	00000040 os_arch_task_stack_init
0000d770 g     F .text	00000026 _ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE
2000a738 g       .bss	00000000 __bss_end__
0001a2d4 g     F .text	00000032 os_memblock_get
2000a734 g     O .bss	00000004 flash_map
00008164  w    F .text	00000002 RADIO_IRQHandler
00015ff0 g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E
0000e584 g     F .text	00000056 _ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE
00008164  w    F .text	00000002 TIMER2_IRQHandler
00012f64 g     F .text	000000c4 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E
0001981c g     F .text	00000014 hal_watchdog_tickle
00011bc4 g     F .text	00000010 _ZN4core3ptr13drop_in_place17h0697ea54608a328fE
000158fe g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE
00019eda g     F .text	0000007a os_eventq_get
0001ce20 g     F .text	00000020 sprintf
0001ad18 g     F .text	00000026 os_time_ms_to_ticks
0000ef86 g     F .text	0000003c _ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E
000099f4 g     F .text	00000014 _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h79fbfe346516e383E
000164e6 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E
0001284e g     F .text	00000036 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE
2000a198 g     O .bss	00000004 os_flags
0001c90c g     F .text	00000028 oc_rep_init
0001b01c g     F .text	0000001a memcpy
0000de82 g     F .text	0000009a _ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E
0001b700 g     F .text	00000044 sysinit_app
00015b50 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE
00015f28 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE
000162d2 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E
0001855c g     F .text	000000d0 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E
0000f770 g     F .text	0000036c _ZN6mynewt3hal3SPI4init17h97467ea724680fb5E
000130fc g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE
000189ec g     F .text	0000003c console_out_nolock
2000a710 g     O .bss	00000020 oc_transports
00018cd4 g     F .text	00000078 hal_gpio_irq_init
00014f16 g     F .text	00000020 _ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE
0001b08a g     F .text	00000010 strlen
0001aa1c g     F .text	000000b8 os_sem_pend
0000e0d8 g     F .text	00000016 _ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE
0001b9b4 g     F .text	00000098 os_tick_idle
00013142 g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E
00008164  w    F .text	00000002 SWI2_EGU2_IRQHandler
00000000 g       .svc_table	00000000 SVC_Table
00013298 g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE
00015b36 g     F .text	0000001a _ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E
2000fe50 g       *ABS*	00000000 __HeapLimit
00019aec g     F .text	00000038 os_pkg_init
20000144 g       .bssnz	00000000 __bssnz_start__
0000ff5e g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17had883e363867a05eE
0000e426 g     F .text	00000012 _ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E
00011b84 g     F .text	0000001a .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E
000156f0 g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE
00008164  w    F .text	00000002 ECB_IRQHandler
0000fadc g     F .text	00000004 _ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E
00008158  w    F .text	00000002 MemoryManagement_Handler
00018336 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$isize$GT$3fmt17hc11e05ad6528dc14E
00014ab6 g     F .text	000000ba _ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE
0000d6ea g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$4jump17h7de77f07aa5a546bE
00019e72 g     F .text	00000068 os_eventq_put
20010000 g       .bss	00000000 __StackTop
0001547e g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E
00010dfc g     F .text	0000003c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E
0000e2a2 g     F .text	00000012 _ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE
00015390 g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE
0001cc96 g     F .text	0000000a mfg_read_tlv_mmr_ref
0000f1ba g     F .text	00000018 _ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E
00012c68 g     F .text	00000030 .hidden _ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h7cd75c3bdc89aa73E
0001c4a4 g     F .text	000000c0 sensor_network_init
00018336 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE
000129f2 g     F .text	0000000e .hidden _ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h0a450d9c4f54993fE
00015ed4 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE
0000f266 g     F .text	0000006a _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE
000131b2 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE



Disassembly of section .text:

00008020 <__isr_vector>:
    8020:	20010000 	.word	0x20010000
    8024:	000080f9 	.word	0x000080f9
    8028:	00008155 	.word	0x00008155
    802c:	00008157 	.word	0x00008157
	...
    804c:	0001af0b 	.word	0x0001af0b
	...
    8058:	0001af51 	.word	0x0001af51
    805c:	0001af97 	.word	0x0001af97
    8060:	00008165 	.word	0x00008165
    8064:	00008165 	.word	0x00008165
    8068:	00008165 	.word	0x00008165
    806c:	00008165 	.word	0x00008165
    8070:	00008165 	.word	0x00008165
    8074:	00008165 	.word	0x00008165
    8078:	00008165 	.word	0x00008165
    807c:	00008165 	.word	0x00008165
    8080:	00008165 	.word	0x00008165
    8084:	00008165 	.word	0x00008165
    8088:	00008165 	.word	0x00008165
    808c:	00008165 	.word	0x00008165
    8090:	00008165 	.word	0x00008165
    8094:	00008165 	.word	0x00008165
    8098:	00008165 	.word	0x00008165
    809c:	00008165 	.word	0x00008165
    80a0:	00008165 	.word	0x00008165
    80a4:	00008165 	.word	0x00008165
    80a8:	00008165 	.word	0x00008165
    80ac:	00008165 	.word	0x00008165
    80b0:	00008165 	.word	0x00008165
    80b4:	00008165 	.word	0x00008165
    80b8:	00008165 	.word	0x00008165
    80bc:	00008165 	.word	0x00008165
    80c0:	00008165 	.word	0x00008165
    80c4:	00008165 	.word	0x00008165
    80c8:	00008165 	.word	0x00008165
    80cc:	00008165 	.word	0x00008165
    80d0:	00008165 	.word	0x00008165
    80d4:	00008165 	.word	0x00008165
	...
    80e0:	00008165 	.word	0x00008165
    80e4:	00008165 	.word	0x00008165
    80e8:	00008165 	.word	0x00008165
    80ec:	00008165 	.word	0x00008165
    80f0:	00008165 	.word	0x00008165
    80f4:	00008165 	.word	0x00008165

000080f8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    80f8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    80fc:	4a0c      	ldr	r2, [pc, #48]	; (8130 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    80fe:	4b0d      	ldr	r3, [pc, #52]	; (8134 <.bss_zero_loop+0x34>)

00008100 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    8100:	429a      	cmp	r2, r3
    itt     lt
    8102:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    8104:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    8108:	e7fa      	blt.n	8100 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
    810a:	490b      	ldr	r1, [pc, #44]	; (8138 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    810c:	4a0b      	ldr	r2, [pc, #44]	; (813c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    810e:	4b0c      	ldr	r3, [pc, #48]	; (8140 <.bss_zero_loop+0x40>)

    subs    r3, r2
    8110:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    8112:	dd03      	ble.n	811c <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    8114:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    8116:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    8118:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    811a:	dcfb      	bgt.n	8114 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    811c:	4809      	ldr	r0, [pc, #36]	; (8144 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    811e:	490a      	ldr	r1, [pc, #40]	; (8148 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    8120:	f000 f822 	bl	8168 <_sbrkInit>

    LDR     R0, =SystemInit
    8124:	4809      	ldr	r0, [pc, #36]	; (814c <.bss_zero_loop+0x4c>)
    BLX     R0
    8126:	4780      	blx	r0

    BL      hal_system_init
    8128:	f000 f826 	bl	8178 <hal_system_init>

    LDR     R0, =_start
    812c:	4808      	ldr	r0, [pc, #32]	; (8150 <.bss_zero_loop+0x50>)
    BX      R0
    812e:	4700      	bx	r0
    ldr     r2, =__bss_start__
    8130:	20000148 	.word	0x20000148
    ldr     r3, =__bss_end__
    8134:	2000a738 	.word	0x2000a738
    ldr    r1, =__etext
    8138:	0002122c 	.word	0x0002122c
    ldr    r2, =__data_start__
    813c:	200000d8 	.word	0x200000d8
    ldr    r3, =__data_end__
    8140:	20000144 	.word	0x20000144
    LDR     R0, =__HeapBase
    8144:	2000a738 	.word	0x2000a738
    LDR     R1, =__HeapLimit
    8148:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
    814c:	0000842d 	.word	0x0000842d
    LDR     R0, =_start
    8150:	00008601 	.word	0x00008601

00008154 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    8154:	e7fe      	b.n	8154 <NMI_Handler>

00008156 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    8156:	e7fe      	b.n	8156 <HardFault_Handler>

00008158 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    8158:	e7fe      	b.n	8158 <MemoryManagement_Handler>

0000815a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    815a:	e7fe      	b.n	815a <BusFault_Handler>

0000815c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    815c:	e7fe      	b.n	815c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    815e:	e7fe      	b.n	815e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    8160:	e7fe      	b.n	8160 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    8162:	e7fe      	b.n	8162 <UsageFault_Handler+0x6>

00008164 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    8164:	e7fe      	b.n	8164 <Default_Handler>
    8166:	bf00      	nop

00008168 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
    8168:	4b02      	ldr	r3, [pc, #8]	; (8174 <_sbrkInit+0xc>)
    816a:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
    816c:	6059      	str	r1, [r3, #4]
    brk = base;
    816e:	6098      	str	r0, [r3, #8]
}
    8170:	4770      	bx	lr
    8172:	bf00      	nop
    8174:	200000d8 	.word	0x200000d8

00008178 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
    8178:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    817c:	2201      	movs	r2, #1
    817e:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
    8182:	4770      	bx	lr

00008184 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    8184:	4b02      	ldr	r3, [pc, #8]	; (8190 <hal_debugger_connected+0xc>)
    8186:	6818      	ldr	r0, [r3, #0]
}
    8188:	f000 0001 	and.w	r0, r0, #1
    818c:	4770      	bx	lr
    818e:	bf00      	nop
    8190:	e000edf0 	.word	0xe000edf0

00008194 <hal_system_reset>:
{
    8194:	b508      	push	{r3, lr}
        if (hal_debugger_connected()) {
    8196:	f7ff fff5 	bl	8184 <hal_debugger_connected>
    819a:	b100      	cbz	r0, 819e <hal_system_reset+0xa>
            asm("bkpt");
    819c:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    819e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    81a2:	4905      	ldr	r1, [pc, #20]	; (81b8 <hal_system_reset+0x24>)
    81a4:	68ca      	ldr	r2, [r1, #12]
    81a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    81aa:	4b04      	ldr	r3, [pc, #16]	; (81bc <hal_system_reset+0x28>)
    81ac:	4313      	orrs	r3, r2
    81ae:	60cb      	str	r3, [r1, #12]
    81b0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    81b4:	bf00      	nop
    81b6:	e7fd      	b.n	81b4 <hal_system_reset+0x20>
    81b8:	e000ed00 	.word	0xe000ed00
    81bc:	05fa0004 	.word	0x05fa0004

000081c0 <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
    81c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81c4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81c8:	4b0f      	ldr	r3, [pc, #60]	; (8208 <hal_system_clock_start+0x48>)
    81ca:	4013      	ands	r3, r2
    81cc:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    81d0:	d018      	beq.n	8204 <hal_system_clock_start+0x44>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    81d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81d6:	2201      	movs	r2, #1
    81d8:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    81da:	2100      	movs	r1, #0
    81dc:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
    81e0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
    81e4:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
    81e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81ea:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    81ee:	2b00      	cmp	r3, #0
    81f0:	d0f9      	beq.n	81e6 <hal_system_clock_start+0x26>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
    81f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81f6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81fa:	4b03      	ldr	r3, [pc, #12]	; (8208 <hal_system_clock_start+0x48>)
    81fc:	4013      	ands	r3, r2
    81fe:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    8202:	d1f0      	bne.n	81e6 <hal_system_clock_start+0x26>
                }
            }
        }
    }
#endif
}
    8204:	4770      	bx	lr
    8206:	bf00      	nop
    8208:	00010003 	.word	0x00010003

0000820c <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    820c:	4b0b      	ldr	r3, [pc, #44]	; (823c <errata_16+0x30>)
    820e:	781b      	ldrb	r3, [r3, #0]
    8210:	2b06      	cmp	r3, #6
    8212:	d001      	beq.n	8218 <errata_16+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8214:	2000      	movs	r0, #0
    8216:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8218:	4b09      	ldr	r3, [pc, #36]	; (8240 <errata_16+0x34>)
    821a:	681b      	ldr	r3, [r3, #0]
    821c:	f013 0f0f 	tst.w	r3, #15
    8220:	d107      	bne.n	8232 <errata_16+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8222:	4b08      	ldr	r3, [pc, #32]	; (8244 <errata_16+0x38>)
    8224:	681b      	ldr	r3, [r3, #0]
    8226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    822a:	2b30      	cmp	r3, #48	; 0x30
    822c:	d003      	beq.n	8236 <errata_16+0x2a>
    return false;
    822e:	2000      	movs	r0, #0
    8230:	4770      	bx	lr
    8232:	2000      	movs	r0, #0
    8234:	4770      	bx	lr
            return true;
    8236:	2001      	movs	r0, #1
}
    8238:	4770      	bx	lr
    823a:	bf00      	nop
    823c:	f0000fe0 	.word	0xf0000fe0
    8240:	f0000fe4 	.word	0xf0000fe4
    8244:	f0000fe8 	.word	0xf0000fe8

00008248 <errata_31>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8248:	4b0f      	ldr	r3, [pc, #60]	; (8288 <errata_31+0x40>)
    824a:	781b      	ldrb	r3, [r3, #0]
    824c:	2b06      	cmp	r3, #6
    824e:	d001      	beq.n	8254 <errata_31+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    8250:	2000      	movs	r0, #0
    8252:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8254:	4b0d      	ldr	r3, [pc, #52]	; (828c <errata_31+0x44>)
    8256:	681b      	ldr	r3, [r3, #0]
    8258:	f013 0f0f 	tst.w	r3, #15
    825c:	d10b      	bne.n	8276 <errata_31+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    825e:	4b0c      	ldr	r3, [pc, #48]	; (8290 <errata_31+0x48>)
    8260:	681b      	ldr	r3, [r3, #0]
    8262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8266:	2b30      	cmp	r3, #48	; 0x30
    8268:	d007      	beq.n	827a <errata_31+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    826a:	2b40      	cmp	r3, #64	; 0x40
    826c:	d007      	beq.n	827e <errata_31+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    826e:	2b50      	cmp	r3, #80	; 0x50
    8270:	d007      	beq.n	8282 <errata_31+0x3a>
    return false;
    8272:	2000      	movs	r0, #0
    8274:	4770      	bx	lr
    8276:	2000      	movs	r0, #0
    8278:	4770      	bx	lr
            return true;
    827a:	2001      	movs	r0, #1
    827c:	4770      	bx	lr
            return true;
    827e:	2001      	movs	r0, #1
    8280:	4770      	bx	lr
            return true;
    8282:	2001      	movs	r0, #1
}
    8284:	4770      	bx	lr
    8286:	bf00      	nop
    8288:	f0000fe0 	.word	0xf0000fe0
    828c:	f0000fe4 	.word	0xf0000fe4
    8290:	f0000fe8 	.word	0xf0000fe8

00008294 <errata_32>:

static bool errata_32(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8294:	4b0b      	ldr	r3, [pc, #44]	; (82c4 <errata_32+0x30>)
    8296:	781b      	ldrb	r3, [r3, #0]
    8298:	2b06      	cmp	r3, #6
    829a:	d001      	beq.n	82a0 <errata_32+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    829c:	2000      	movs	r0, #0
    829e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82a0:	4b09      	ldr	r3, [pc, #36]	; (82c8 <errata_32+0x34>)
    82a2:	681b      	ldr	r3, [r3, #0]
    82a4:	f013 0f0f 	tst.w	r3, #15
    82a8:	d107      	bne.n	82ba <errata_32+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82aa:	4b08      	ldr	r3, [pc, #32]	; (82cc <errata_32+0x38>)
    82ac:	681b      	ldr	r3, [r3, #0]
    82ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82b2:	2b30      	cmp	r3, #48	; 0x30
    82b4:	d003      	beq.n	82be <errata_32+0x2a>
    return false;
    82b6:	2000      	movs	r0, #0
    82b8:	4770      	bx	lr
    82ba:	2000      	movs	r0, #0
    82bc:	4770      	bx	lr
            return true;
    82be:	2001      	movs	r0, #1
}
    82c0:	4770      	bx	lr
    82c2:	bf00      	nop
    82c4:	f0000fe0 	.word	0xf0000fe0
    82c8:	f0000fe4 	.word	0xf0000fe4
    82cc:	f0000fe8 	.word	0xf0000fe8

000082d0 <errata_36>:

static bool errata_36(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82d0:	4b0f      	ldr	r3, [pc, #60]	; (8310 <errata_36+0x40>)
    82d2:	781b      	ldrb	r3, [r3, #0]
    82d4:	2b06      	cmp	r3, #6
    82d6:	d001      	beq.n	82dc <errata_36+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    82d8:	2000      	movs	r0, #0
    82da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82dc:	4b0d      	ldr	r3, [pc, #52]	; (8314 <errata_36+0x44>)
    82de:	681b      	ldr	r3, [r3, #0]
    82e0:	f013 0f0f 	tst.w	r3, #15
    82e4:	d10b      	bne.n	82fe <errata_36+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82e6:	4b0c      	ldr	r3, [pc, #48]	; (8318 <errata_36+0x48>)
    82e8:	681b      	ldr	r3, [r3, #0]
    82ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82ee:	2b30      	cmp	r3, #48	; 0x30
    82f0:	d007      	beq.n	8302 <errata_36+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    82f2:	2b40      	cmp	r3, #64	; 0x40
    82f4:	d007      	beq.n	8306 <errata_36+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    82f6:	2b50      	cmp	r3, #80	; 0x50
    82f8:	d007      	beq.n	830a <errata_36+0x3a>
    return false;
    82fa:	2000      	movs	r0, #0
    82fc:	4770      	bx	lr
    82fe:	2000      	movs	r0, #0
    8300:	4770      	bx	lr
            return true;
    8302:	2001      	movs	r0, #1
    8304:	4770      	bx	lr
            return true;
    8306:	2001      	movs	r0, #1
    8308:	4770      	bx	lr
            return true;
    830a:	2001      	movs	r0, #1
}
    830c:	4770      	bx	lr
    830e:	bf00      	nop
    8310:	f0000fe0 	.word	0xf0000fe0
    8314:	f0000fe4 	.word	0xf0000fe4
    8318:	f0000fe8 	.word	0xf0000fe8

0000831c <errata_37>:

static bool errata_37(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    831c:	4b0b      	ldr	r3, [pc, #44]	; (834c <errata_37+0x30>)
    831e:	781b      	ldrb	r3, [r3, #0]
    8320:	2b06      	cmp	r3, #6
    8322:	d001      	beq.n	8328 <errata_37+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8324:	2000      	movs	r0, #0
    8326:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8328:	4b09      	ldr	r3, [pc, #36]	; (8350 <errata_37+0x34>)
    832a:	681b      	ldr	r3, [r3, #0]
    832c:	f013 0f0f 	tst.w	r3, #15
    8330:	d107      	bne.n	8342 <errata_37+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8332:	4b08      	ldr	r3, [pc, #32]	; (8354 <errata_37+0x38>)
    8334:	681b      	ldr	r3, [r3, #0]
    8336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    833a:	2b30      	cmp	r3, #48	; 0x30
    833c:	d003      	beq.n	8346 <errata_37+0x2a>
    return false;
    833e:	2000      	movs	r0, #0
    8340:	4770      	bx	lr
    8342:	2000      	movs	r0, #0
    8344:	4770      	bx	lr
            return true;
    8346:	2001      	movs	r0, #1
}
    8348:	4770      	bx	lr
    834a:	bf00      	nop
    834c:	f0000fe0 	.word	0xf0000fe0
    8350:	f0000fe4 	.word	0xf0000fe4
    8354:	f0000fe8 	.word	0xf0000fe8

00008358 <errata_57>:

static bool errata_57(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8358:	4b0b      	ldr	r3, [pc, #44]	; (8388 <errata_57+0x30>)
    835a:	781b      	ldrb	r3, [r3, #0]
    835c:	2b06      	cmp	r3, #6
    835e:	d001      	beq.n	8364 <errata_57+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8360:	2000      	movs	r0, #0
    8362:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8364:	4b09      	ldr	r3, [pc, #36]	; (838c <errata_57+0x34>)
    8366:	681b      	ldr	r3, [r3, #0]
    8368:	f013 0f0f 	tst.w	r3, #15
    836c:	d107      	bne.n	837e <errata_57+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    836e:	4b08      	ldr	r3, [pc, #32]	; (8390 <errata_57+0x38>)
    8370:	681b      	ldr	r3, [r3, #0]
    8372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8376:	2b30      	cmp	r3, #48	; 0x30
    8378:	d003      	beq.n	8382 <errata_57+0x2a>
    return false;
    837a:	2000      	movs	r0, #0
    837c:	4770      	bx	lr
    837e:	2000      	movs	r0, #0
    8380:	4770      	bx	lr
            return true;
    8382:	2001      	movs	r0, #1
}
    8384:	4770      	bx	lr
    8386:	bf00      	nop
    8388:	f0000fe0 	.word	0xf0000fe0
    838c:	f0000fe4 	.word	0xf0000fe4
    8390:	f0000fe8 	.word	0xf0000fe8

00008394 <errata_66>:

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8394:	4b0b      	ldr	r3, [pc, #44]	; (83c4 <errata_66+0x30>)
    8396:	781b      	ldrb	r3, [r3, #0]
    8398:	2b06      	cmp	r3, #6
    839a:	d001      	beq.n	83a0 <errata_66+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    839c:	2000      	movs	r0, #0
    839e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83a0:	4b09      	ldr	r3, [pc, #36]	; (83c8 <errata_66+0x34>)
    83a2:	681b      	ldr	r3, [r3, #0]
    83a4:	f013 0f0f 	tst.w	r3, #15
    83a8:	d107      	bne.n	83ba <errata_66+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83aa:	4b08      	ldr	r3, [pc, #32]	; (83cc <errata_66+0x38>)
    83ac:	681b      	ldr	r3, [r3, #0]
    83ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83b2:	2b50      	cmp	r3, #80	; 0x50
    83b4:	d003      	beq.n	83be <errata_66+0x2a>
    return false;
    83b6:	2000      	movs	r0, #0
    83b8:	4770      	bx	lr
    83ba:	2000      	movs	r0, #0
    83bc:	4770      	bx	lr
            return true;
    83be:	2001      	movs	r0, #1
}
    83c0:	4770      	bx	lr
    83c2:	bf00      	nop
    83c4:	f0000fe0 	.word	0xf0000fe0
    83c8:	f0000fe4 	.word	0xf0000fe4
    83cc:	f0000fe8 	.word	0xf0000fe8

000083d0 <errata_108>:


static bool errata_108(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83d0:	4b0f      	ldr	r3, [pc, #60]	; (8410 <errata_108+0x40>)
    83d2:	781b      	ldrb	r3, [r3, #0]
    83d4:	2b06      	cmp	r3, #6
    83d6:	d001      	beq.n	83dc <errata_108+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    83d8:	2000      	movs	r0, #0
    83da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83dc:	4b0d      	ldr	r3, [pc, #52]	; (8414 <errata_108+0x44>)
    83de:	681b      	ldr	r3, [r3, #0]
    83e0:	f013 0f0f 	tst.w	r3, #15
    83e4:	d10b      	bne.n	83fe <errata_108+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    83e6:	4b0c      	ldr	r3, [pc, #48]	; (8418 <errata_108+0x48>)
    83e8:	681b      	ldr	r3, [r3, #0]
    83ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83ee:	2b30      	cmp	r3, #48	; 0x30
    83f0:	d007      	beq.n	8402 <errata_108+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    83f2:	2b40      	cmp	r3, #64	; 0x40
    83f4:	d007      	beq.n	8406 <errata_108+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83f6:	2b50      	cmp	r3, #80	; 0x50
    83f8:	d007      	beq.n	840a <errata_108+0x3a>
    return false;
    83fa:	2000      	movs	r0, #0
    83fc:	4770      	bx	lr
    83fe:	2000      	movs	r0, #0
    8400:	4770      	bx	lr
            return true;
    8402:	2001      	movs	r0, #1
    8404:	4770      	bx	lr
            return true;
    8406:	2001      	movs	r0, #1
    8408:	4770      	bx	lr
            return true;
    840a:	2001      	movs	r0, #1
}
    840c:	4770      	bx	lr
    840e:	bf00      	nop
    8410:	f0000fe0 	.word	0xf0000fe0
    8414:	f0000fe4 	.word	0xf0000fe4
    8418:	f0000fe8 	.word	0xf0000fe8

0000841c <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    841c:	4b01      	ldr	r3, [pc, #4]	; (8424 <SystemCoreClockUpdate+0x8>)
    841e:	4a02      	ldr	r2, [pc, #8]	; (8428 <SystemCoreClockUpdate+0xc>)
    8420:	601a      	str	r2, [r3, #0]
}
    8422:	4770      	bx	lr
    8424:	200000e4 	.word	0x200000e4
    8428:	03d09000 	.word	0x03d09000

0000842c <SystemInit>:
{
    842c:	b508      	push	{r3, lr}
    if (errata_16()){
    842e:	f7ff feed 	bl	820c <errata_16>
    8432:	b110      	cbz	r0, 843a <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    8434:	4b65      	ldr	r3, [pc, #404]	; (85cc <SystemInit+0x1a0>)
    8436:	4a66      	ldr	r2, [pc, #408]	; (85d0 <SystemInit+0x1a4>)
    8438:	601a      	str	r2, [r3, #0]
    if (errata_31()){
    843a:	f7ff ff05 	bl	8248 <errata_31>
    843e:	b128      	cbz	r0, 844c <SystemInit+0x20>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    8440:	4b64      	ldr	r3, [pc, #400]	; (85d4 <SystemInit+0x1a8>)
    8442:	681b      	ldr	r3, [r3, #0]
    8444:	f3c3 3342 	ubfx	r3, r3, #13, #3
    8448:	4a63      	ldr	r2, [pc, #396]	; (85d8 <SystemInit+0x1ac>)
    844a:	6013      	str	r3, [r2, #0]
    if (errata_32()){
    844c:	f7ff ff22 	bl	8294 <errata_32>
    8450:	b120      	cbz	r0, 845c <SystemInit+0x30>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    8452:	4a62      	ldr	r2, [pc, #392]	; (85dc <SystemInit+0x1b0>)
    8454:	68d3      	ldr	r3, [r2, #12]
    8456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    845a:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
    845c:	f7ff ff38 	bl	82d0 <errata_36>
    8460:	b140      	cbz	r0, 8474 <SystemInit+0x48>
        NRF_CLOCK->EVENTS_DONE = 0;
    8462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8466:	2200      	movs	r2, #0
    8468:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    846c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    8470:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    8474:	f7ff ff52 	bl	831c <errata_37>
    8478:	b110      	cbz	r0, 8480 <SystemInit+0x54>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    847a:	4b59      	ldr	r3, [pc, #356]	; (85e0 <SystemInit+0x1b4>)
    847c:	2203      	movs	r2, #3
    847e:	601a      	str	r2, [r3, #0]
    if (errata_57()){
    8480:	f7ff ff6a 	bl	8358 <errata_57>
    8484:	b158      	cbz	r0, 849e <SystemInit+0x72>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    8486:	4b57      	ldr	r3, [pc, #348]	; (85e4 <SystemInit+0x1b8>)
    8488:	2205      	movs	r2, #5
    848a:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    848c:	3378      	adds	r3, #120	; 0x78
    848e:	2201      	movs	r2, #1
    8490:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    8492:	3b70      	subs	r3, #112	; 0x70
    8494:	2200      	movs	r2, #0
    8496:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    8498:	3b04      	subs	r3, #4
    849a:	223f      	movs	r2, #63	; 0x3f
    849c:	601a      	str	r2, [r3, #0]
    if (errata_66()){
    849e:	f7ff ff79 	bl	8394 <errata_66>
    84a2:	2800      	cmp	r0, #0
    84a4:	d046      	beq.n	8534 <SystemInit+0x108>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    84a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    84aa:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    84ae:	4b4e      	ldr	r3, [pc, #312]	; (85e8 <SystemInit+0x1bc>)
    84b0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    84b4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    84b8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    84bc:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    84c0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    84c4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    84c8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    84cc:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    84d0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    84d4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    84d8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    84dc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    84e0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    84e4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    84e8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    84ec:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    84f0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    84f4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    84f8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    84fc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    8500:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8504:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    8508:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    850c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    8510:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8514:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    8518:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    851c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    8520:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8524:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    8528:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    852c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    8530:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    8534:	f7ff ff4c 	bl	83d0 <errata_108>
    8538:	b128      	cbz	r0, 8546 <SystemInit+0x11a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    853a:	4b2c      	ldr	r3, [pc, #176]	; (85ec <SystemInit+0x1c0>)
    853c:	681b      	ldr	r3, [r3, #0]
    853e:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    8542:	4a2b      	ldr	r2, [pc, #172]	; (85f0 <SystemInit+0x1c4>)
    8544:	6013      	str	r3, [r2, #0]
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    8546:	4a2b      	ldr	r2, [pc, #172]	; (85f4 <SystemInit+0x1c8>)
    8548:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    854c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    8550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    8554:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8558:	f3bf 8f6f 	isb	sy
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    855c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8560:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    8564:	f013 0f01 	tst.w	r3, #1
    8568:	d104      	bne.n	8574 <SystemInit+0x148>
    SystemCoreClockUpdate();
    856a:	f7ff ff57 	bl	841c <SystemCoreClockUpdate>
    NVIC_Relocate();
    856e:	f010 fad1 	bl	18b14 <NVIC_Relocate>
}
    8572:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    8574:	4b20      	ldr	r3, [pc, #128]	; (85f8 <SystemInit+0x1cc>)
    8576:	2201      	movs	r2, #1
    8578:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    857c:	4b1e      	ldr	r3, [pc, #120]	; (85f8 <SystemInit+0x1cc>)
    857e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    8582:	2b00      	cmp	r3, #0
    8584:	d0fa      	beq.n	857c <SystemInit+0x150>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    8586:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    858a:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    858e:	f023 0301 	bic.w	r3, r3, #1
    8592:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    8596:	4b18      	ldr	r3, [pc, #96]	; (85f8 <SystemInit+0x1cc>)
    8598:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    859c:	2b00      	cmp	r3, #0
    859e:	d0fa      	beq.n	8596 <SystemInit+0x16a>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    85a0:	4b15      	ldr	r3, [pc, #84]	; (85f8 <SystemInit+0x1cc>)
    85a2:	2200      	movs	r2, #0
    85a4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85a8:	4b13      	ldr	r3, [pc, #76]	; (85f8 <SystemInit+0x1cc>)
    85aa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85ae:	2b00      	cmp	r3, #0
    85b0:	d0fa      	beq.n	85a8 <SystemInit+0x17c>
  __ASM volatile ("dsb 0xF":::"memory");
    85b2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    85b6:	490f      	ldr	r1, [pc, #60]	; (85f4 <SystemInit+0x1c8>)
    85b8:	68ca      	ldr	r2, [r1, #12]
    85ba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    85be:	4b0f      	ldr	r3, [pc, #60]	; (85fc <SystemInit+0x1d0>)
    85c0:	4313      	orrs	r3, r2
    85c2:	60cb      	str	r3, [r1, #12]
    85c4:	f3bf 8f4f 	dsb	sy
    __NOP();
    85c8:	bf00      	nop
    85ca:	e7fd      	b.n	85c8 <SystemInit+0x19c>
    85cc:	4007c074 	.word	0x4007c074
    85d0:	baadf00d 	.word	0xbaadf00d
    85d4:	10000244 	.word	0x10000244
    85d8:	4000053c 	.word	0x4000053c
    85dc:	e000edf0 	.word	0xe000edf0
    85e0:	400005a0 	.word	0x400005a0
    85e4:	40005610 	.word	0x40005610
    85e8:	4000c000 	.word	0x4000c000
    85ec:	10000258 	.word	0x10000258
    85f0:	40000ee4 	.word	0x40000ee4
    85f4:	e000ed00 	.word	0xe000ed00
    85f8:	4001e000 	.word	0x4001e000
    85fc:	05fa0004 	.word	0x05fa0004

00008600 <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
    8600:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
    8602:	4803      	ldr	r0, [pc, #12]	; (8610 <_start+0x10>)
    8604:	f011 fa0c 	bl	19a20 <os_init>
    os_start();
    8608:	f011 fa62 	bl	19ad0 <os_start>
#endif
}
    860c:	bd08      	pop	{r3, pc}
    860e:	bf00      	nop
    8610:	00008617 	.word	0x00008617

00008614 <_init>:

void
_init(void)
{
}
    8614:	4770      	bx	lr

00008616 <main>:
pub fn handle_touch(_x: u16, _y: u16) { console::print("touch not handled\n"); console::flush(); }  //  Define a touch handler that does nothing

///  Main program that initialises the sensor, network driver and starts reading and sending sensor data in the background.
///  main() will be called at Mynewt startup. It replaces the C version of the main() function.
#[no_mangle]                 //  Don't mangle the name "main"
extern "C" fn main() -> ! {  //  Declare extern "C" because it will be called by Mynewt
    8616:	b088      	sub	sp, #32
    //  Initialise the Mynewt packages and internal temperature sensor driver. Any startup
    //  functions defined in pkg.yml of our custom drivers and libraries will be called by 
    //  sysinit().  Here are the startup functions consolidated by Mynewt:
    //  bin/targets/nrf52_my_sensor/generated/src/nrf52_my_sensor-sysinit-app.c
    mynewt::sysinit();
    8618:	f006 fcad 	bl	ef76 <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>
    861c:	e7ff      	b.n	861e <main+0x8>
    //  extern { fn start_ble() -> i32; }
    //  let rc = unsafe { start_ble() };
    //  assert!(rc == 0, "BLE fail");

    //  Start the display
    druid::start_display()
    861e:	f007 fd47 	bl	100b0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>
    8622:	9005      	str	r0, [sp, #20]
    8624:	e7ff      	b.n	8626 <main+0x10>
    8626:	f24d 11e6 	movw	r1, #53734	; 0xd1e6
    862a:	f2c0 0101 	movt	r1, #1
    862e:	f24d 231c 	movw	r3, #53788	; 0xd21c
    8632:	f2c0 0301 	movt	r3, #1
    8636:	2208      	movs	r2, #8
    8638:	9805      	ldr	r0, [sp, #20]
    863a:	f006 fd97 	bl	f16c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    863e:	e7ff      	b.n	8640 <main+0x2a>
    #[cfg(feature = "display_app")]  //  If graphics display app is enabled...
    display::test_display()
        .expect("DSP test fail");

    //  Start the touch sensor
    touch_sensor::start_touch_sensor()
    8640:	f000 f8c7 	bl	87d2 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E>
    8644:	9004      	str	r0, [sp, #16]
    8646:	e7ff      	b.n	8648 <main+0x32>
    8648:	f24d 11ee 	movw	r1, #53742	; 0xd1ee
    864c:	f2c0 0101 	movt	r1, #1
    8650:	f24d 232c 	movw	r3, #53804	; 0xd22c
    8654:	f2c0 0301 	movt	r3, #1
    8658:	2208      	movs	r2, #8
    865a:	9804      	ldr	r0, [sp, #16]
    865c:	f006 fd86 	bl	f16c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8660:	e7ff      	b.n	8662 <main+0x4c>
    visual::on_start()
        .expect("VIS fail");

    //  Launch the CHIP8 Emulator app
    #[cfg(feature = "chip8_app")]  //  If CHIP8 Emulator app is enabled...
    chip8::on_start()
    8662:	f000 ff27 	bl	94b4 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E>
    8666:	9003      	str	r0, [sp, #12]
    8668:	e7ff      	b.n	866a <main+0x54>
    866a:	f24d 213c 	movw	r1, #53820	; 0xd23c
    866e:	f2c0 0101 	movt	r1, #1
    8672:	f24d 2348 	movw	r3, #53832	; 0xd248
    8676:	f2c0 0301 	movt	r3, #1
    867a:	220a      	movs	r2, #10
    867c:	9803      	ldr	r0, [sp, #12]
    867e:	f006 fd75 	bl	f16c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8682:	e7ff      	b.n	8684 <main+0x6e>
        .expect("CHIP8 fail");

    //  Main event loop
    loop {                            //  Loop forever...
    8684:	e7ff      	b.n	8686 <main+0x70>
    8686:	a806      	add	r0, sp, #24
        os::eventq_run(               //  Processing events...
            os::eventq_dflt_get()     //  From default event queue.
    8688:	f006 fe2f 	bl	f2ea <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
    868c:	e7ff      	b.n	868e <main+0x78>
    868e:	f24d 11f6 	movw	r1, #53750	; 0xd1f6
    8692:	f2c0 0101 	movt	r1, #1
    8696:	f24d 2358 	movw	r3, #53848	; 0xd258
    869a:	f2c0 0301 	movt	r3, #1
    869e:	a806      	add	r0, sp, #24
    86a0:	2208      	movs	r2, #8
    86a2:	f00a f9ad 	bl	12a00 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E>
    86a6:	9002      	str	r0, [sp, #8]
    86a8:	e7ff      	b.n	86aa <main+0x94>
        os::eventq_run(               //  Processing events...
    86aa:	9802      	ldr	r0, [sp, #8]
    86ac:	f006 fe14 	bl	f2d8 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
    86b0:	9001      	str	r0, [sp, #4]
    86b2:	e7ff      	b.n	86b4 <main+0x9e>
    86b4:	f24d 11fe 	movw	r1, #53758	; 0xd1fe
    86b8:	f2c0 0101 	movt	r1, #1
    86bc:	f24d 2368 	movw	r3, #53864	; 0xd268
    86c0:	f2c0 0301 	movt	r3, #1
    86c4:	2208      	movs	r2, #8
    86c6:	9801      	ldr	r0, [sp, #4]
    86c8:	f006 fd50 	bl	f16c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    86cc:	e7ff      	b.n	86ce <main+0xb8>
    loop {                            //  Loop forever...
    86ce:	e7da      	b.n	8686 <main+0x70>

000086d0 <rust_begin_unwind>:
    //  Never comes here
}

///  This function is called on panic, like an assertion failure. We display the filename and line number and pause in the debugger. From https://os.phil-opp.com/freestanding-rust-binary/
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
    86d0:	b08e      	sub	sp, #56	; 0x38
    86d2:	900b      	str	r0, [sp, #44]	; 0x2c
    //  Display the filename and line number to the Semihosting Console.
    console::print("panic ");
    86d4:	f24d 2178 	movw	r1, #53880	; 0xd278
    86d8:	f2c0 0101 	movt	r1, #1
    86dc:	2206      	movs	r2, #6
    86de:	9007      	str	r0, [sp, #28]
    86e0:	4608      	mov	r0, r1
    86e2:	4611      	mov	r1, r2
    86e4:	f006 ffc1 	bl	f66a <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    86e8:	e7ff      	b.n	86ea <rust_begin_unwind+0x1a>
    if let Some(location) = info.location() {
    86ea:	9807      	ldr	r0, [sp, #28]
    86ec:	f00e f94f 	bl	1698e <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>
    86f0:	9008      	str	r0, [sp, #32]
    86f2:	e7ff      	b.n	86f4 <rust_begin_unwind+0x24>
    86f4:	9808      	ldr	r0, [sp, #32]
    86f6:	2800      	cmp	r0, #0
    86f8:	d108      	bne.n	870c <rust_begin_unwind+0x3c>
    86fa:	e7ff      	b.n	86fc <rust_begin_unwind+0x2c>
        let line = location.line();
        console::print("at ");       console::buffer(&file);
        console::print(" line ");    console::printint(line as i32);
        console::print("\n");        console::flush();
    } else {
        console::print("no loc\n");  console::flush();
    86fc:	f24d 207e 	movw	r0, #53886	; 0xd27e
    8700:	f2c0 0001 	movt	r0, #1
    8704:	2107      	movs	r1, #7
    8706:	f006 ffb0 	bl	f66a <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    870a:	e033      	b.n	8774 <rust_begin_unwind+0xa4>
    if let Some(location) = info.location() {
    870c:	9808      	ldr	r0, [sp, #32]
    870e:	900c      	str	r0, [sp, #48]	; 0x30
        let file = location.file();
    8710:	9006      	str	r0, [sp, #24]
    8712:	f00e f93f 	bl	16994 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8716:	910a      	str	r1, [sp, #40]	; 0x28
    8718:	9009      	str	r0, [sp, #36]	; 0x24
    871a:	e7ff      	b.n	871c <rust_begin_unwind+0x4c>
        let line = location.line();
    871c:	9806      	ldr	r0, [sp, #24]
    871e:	f00e f93d 	bl	1699c <_ZN4core5panic8Location4line17h650a566d9637c91dE>
    8722:	4601      	mov	r1, r0
    8724:	900d      	str	r0, [sp, #52]	; 0x34
    8726:	9105      	str	r1, [sp, #20]
    8728:	e7ff      	b.n	872a <rust_begin_unwind+0x5a>
        console::print("at ");       console::buffer(&file);
    872a:	f24d 2085 	movw	r0, #53893	; 0xd285
    872e:	f2c0 0001 	movt	r0, #1
    8732:	2103      	movs	r1, #3
    8734:	f006 ff99 	bl	f66a <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8738:	e7ff      	b.n	873a <rust_begin_unwind+0x6a>
    873a:	9809      	ldr	r0, [sp, #36]	; 0x24
    873c:	990a      	ldr	r1, [sp, #40]	; 0x28
    873e:	f006 ffbb 	bl	f6b8 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>
    8742:	e7ff      	b.n	8744 <rust_begin_unwind+0x74>
        console::print(" line ");    console::printint(line as i32);
    8744:	f24d 2088 	movw	r0, #53896	; 0xd288
    8748:	f2c0 0001 	movt	r0, #1
    874c:	2106      	movs	r1, #6
    874e:	f006 ff8c 	bl	f66a <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8752:	e7ff      	b.n	8754 <rust_begin_unwind+0x84>
    8754:	9805      	ldr	r0, [sp, #20]
    8756:	f006 ffc6 	bl	f6e6 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    875a:	e7ff      	b.n	875c <rust_begin_unwind+0x8c>
        console::print("\n");        console::flush();
    875c:	f24d 208e 	movw	r0, #53902	; 0xd28e
    8760:	f2c0 0001 	movt	r0, #1
    8764:	2101      	movs	r1, #1
    8766:	f006 ff80 	bl	f66a <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    876a:	e7ff      	b.n	876c <rust_begin_unwind+0x9c>
    876c:	f006 ffc3 	bl	f6f6 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8770:	e7ff      	b.n	8772 <rust_begin_unwind+0xa2>
    if let Some(location) = info.location() {
    8772:	e003      	b.n	877c <rust_begin_unwind+0xac>
        console::print("no loc\n");  console::flush();
    8774:	f006 ffbf 	bl	f6f6 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8778:	e7ff      	b.n	877a <rust_begin_unwind+0xaa>
    if let Some(location) = info.location() {
    877a:	e7ff      	b.n	877c <rust_begin_unwind+0xac>
/// exception.
#[inline(always)]
pub fn bkpt() {
    match () {
        #[cfg(all(cortex_m, feature = "inline-asm"))]
        () => unsafe { asm!("bkpt" :::: "volatile") },
    877c:	be00      	bkpt	0x0000
    }
    //  Pause in the debugger.
    bkpt();
    877e:	e7ff      	b.n	8780 <rust_begin_unwind+0xb0>
    //  Display the payload.
    console::print(info.payload().downcast_ref::<&str>().unwrap());
    8780:	9807      	ldr	r0, [sp, #28]
    8782:	f00e f907 	bl	16994 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8786:	9004      	str	r0, [sp, #16]
    8788:	9103      	str	r1, [sp, #12]
    878a:	e7ff      	b.n	878c <rust_begin_unwind+0xbc>
    878c:	9804      	ldr	r0, [sp, #16]
    878e:	9903      	ldr	r1, [sp, #12]
    8790:	f005 f9ee 	bl	db70 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17ha534480b95c4fb6cE>
    8794:	9002      	str	r0, [sp, #8]
    8796:	e7ff      	b.n	8798 <rust_begin_unwind+0xc8>
    8798:	f24d 2190 	movw	r1, #53904	; 0xd290
    879c:	f2c0 0101 	movt	r1, #1
    87a0:	9802      	ldr	r0, [sp, #8]
    87a2:	f005 fc5b 	bl	e05c <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E>
    87a6:	9001      	str	r0, [sp, #4]
    87a8:	e7ff      	b.n	87aa <rust_begin_unwind+0xda>
    87aa:	9801      	ldr	r0, [sp, #4]
    87ac:	6800      	ldr	r0, [r0, #0]
    87ae:	9901      	ldr	r1, [sp, #4]
    87b0:	6849      	ldr	r1, [r1, #4]
    87b2:	f006 ff5a 	bl	f66a <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87b6:	e7ff      	b.n	87b8 <rust_begin_unwind+0xe8>
    console::print("\n");  console::flush();
    87b8:	f24d 208e 	movw	r0, #53902	; 0xd28e
    87bc:	f2c0 0001 	movt	r0, #1
    87c0:	2101      	movs	r1, #1
    87c2:	f006 ff52 	bl	f66a <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87c6:	e7ff      	b.n	87c8 <rust_begin_unwind+0xf8>
    87c8:	f006 ff95 	bl	f6f6 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    87cc:	e7ff      	b.n	87ce <rust_begin_unwind+0xfe>
    //  Loop forever so that device won't restart.
    loop {}
    87ce:	e7ff      	b.n	87d0 <rust_begin_unwind+0x100>
    87d0:	e7fe      	b.n	87d0 <rust_begin_unwind+0x100>

000087d2 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E>:
/// ```rust
/// let peripherals = nrf52::Peripherals::take().unwrap();
/// let nfcpins = peripherals.UICR.nfcpins.read().bits();
/// console::print("nfcpins = "); console::printhex(nfcpins as u8); console::print("\n");
/// ```
pub fn start_touch_sensor() -> MynewtResult<()> {
    87d2:	b5b0      	push	{r4, r5, r7, lr}
    87d4:	b0be      	sub	sp, #248	; 0xf8
    console::print("Rust touch sensor\n");
    87d6:	f24d 20a0 	movw	r0, #53920	; 0xd2a0
    87da:	f2c0 0001 	movt	r0, #1
    87de:	2112      	movs	r1, #18
    87e0:	f006 ff43 	bl	f66a <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87e4:	e7ff      	b.n	87e6 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x14>

    //  Init GPIO for the Reset Pin
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    87e6:	f240 1048 	movw	r0, #328	; 0x148
    87ea:	f2c2 0000 	movt	r0, #8192	; 0x2000
    87ee:	210a      	movs	r1, #10
    87f0:	f007 f976 	bl	fae0 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    87f4:	9012      	str	r0, [sp, #72]	; 0x48
    87f6:	e7ff      	b.n	87f8 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x26>
    87f8:	9812      	ldr	r0, [sp, #72]	; 0x48
    87fa:	f006 fcf6 	bl	f1ea <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    87fe:	9014      	str	r0, [sp, #80]	; 0x50
    8800:	e7ff      	b.n	8802 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x30>
    8802:	9814      	ldr	r0, [sp, #80]	; 0x50
    8804:	1e41      	subs	r1, r0, #1
    8806:	bf18      	it	ne
    8808:	2101      	movne	r1, #1
    880a:	2801      	cmp	r0, #1
    880c:	d001      	beq.n	8812 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x40>
    880e:	e7ff      	b.n	8810 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x3e>
    8810:	e008      	b.n	8824 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x52>

    //  Reset the touch controller by switching the Reset Pin low then high with pauses. Based on https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L1017-L1167
    unsafe {
        TOUCH_RESET.set_low() ? ;
    8812:	f240 1048 	movw	r0, #328	; 0x148
    8816:	f2c2 0000 	movt	r0, #8192	; 0x2000
    881a:	f007 f9fa 	bl	fc12 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    881e:	9011      	str	r0, [sp, #68]	; 0x44
    8820:	e00f      	b.n	8842 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x70>
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    8822:	defe      	udf	#254	; 0xfe
    8824:	9814      	ldr	r0, [sp, #80]	; 0x50
    8826:	9036      	str	r0, [sp, #216]	; 0xd8
    8828:	f006 fd52 	bl	f2d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    882c:	9010      	str	r0, [sp, #64]	; 0x40
    882e:	e002      	b.n	8836 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x64>
    assert_eq!(rc, 0, "IRQ init fail");

    //  Start monitoring for touch controller interrupts
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
    Ok(())
}
    8830:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8832:	b03e      	add	sp, #248	; 0xf8
    8834:	bdb0      	pop	{r4, r5, r7, pc}
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    8836:	9810      	ldr	r0, [sp, #64]	; 0x40
    8838:	f006 fccb 	bl	f1d2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    883c:	9013      	str	r0, [sp, #76]	; 0x4c
    883e:	e7ff      	b.n	8840 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x6e>
    8840:	e7f6      	b.n	8830 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x5e>
        TOUCH_RESET.set_low() ? ;
    8842:	9811      	ldr	r0, [sp, #68]	; 0x44
    8844:	f006 fcd1 	bl	f1ea <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    8848:	9015      	str	r0, [sp, #84]	; 0x54
    884a:	e7ff      	b.n	884c <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x7a>
    884c:	9815      	ldr	r0, [sp, #84]	; 0x54
    884e:	1e41      	subs	r1, r0, #1
    8850:	bf18      	it	ne
    8852:	2101      	movne	r1, #1
    8854:	2801      	cmp	r0, #1
    8856:	d001      	beq.n	885c <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x8a>
    8858:	e7ff      	b.n	885a <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x88>
    885a:	e008      	b.n	886e <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x9c>
        TOUCH_DELAY.delay_ms(20);
    885c:	f240 104c 	movw	r0, #332	; 0x14c
    8860:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8864:	2114      	movs	r1, #20
    8866:	f007 f9eb 	bl	fc40 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    886a:	e00d      	b.n	8888 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xb6>
        TOUCH_RESET.set_low() ? ;
    886c:	defe      	udf	#254	; 0xfe
    886e:	9815      	ldr	r0, [sp, #84]	; 0x54
    8870:	9037      	str	r0, [sp, #220]	; 0xdc
    8872:	f006 fd2d 	bl	f2d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    8876:	900f      	str	r0, [sp, #60]	; 0x3c
    8878:	e7ff      	b.n	887a <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xa8>
    887a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    887c:	f006 fca9 	bl	f1d2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    8880:	9013      	str	r0, [sp, #76]	; 0x4c
    8882:	e7ff      	b.n	8884 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xb2>
    8884:	e7ff      	b.n	8886 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xb4>
    8886:	e7d3      	b.n	8830 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x5e>
        TOUCH_RESET.set_high() ? ;
    8888:	f240 1048 	movw	r0, #328	; 0x148
    888c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8890:	f007 f9ca 	bl	fc28 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    8894:	900e      	str	r0, [sp, #56]	; 0x38
    8896:	e7ff      	b.n	8898 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xc6>
    8898:	980e      	ldr	r0, [sp, #56]	; 0x38
    889a:	f006 fca6 	bl	f1ea <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    889e:	9016      	str	r0, [sp, #88]	; 0x58
    88a0:	e7ff      	b.n	88a2 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xd0>
    88a2:	9816      	ldr	r0, [sp, #88]	; 0x58
    88a4:	1e41      	subs	r1, r0, #1
    88a6:	bf18      	it	ne
    88a8:	2101      	movne	r1, #1
    88aa:	2801      	cmp	r0, #1
    88ac:	d001      	beq.n	88b2 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xe0>
    88ae:	e7ff      	b.n	88b0 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xde>
    88b0:	e008      	b.n	88c4 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xf2>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
    88b2:	f240 104c 	movw	r0, #332	; 0x14c
    88b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    88ba:	21c8      	movs	r1, #200	; 0xc8
    88bc:	f007 f9c0 	bl	fc40 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    88c0:	e00c      	b.n	88dc <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x10a>
        TOUCH_RESET.set_high() ? ;
    88c2:	defe      	udf	#254	; 0xfe
    88c4:	9816      	ldr	r0, [sp, #88]	; 0x58
    88c6:	9038      	str	r0, [sp, #224]	; 0xe0
    88c8:	f006 fd02 	bl	f2d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    88cc:	900d      	str	r0, [sp, #52]	; 0x34
    88ce:	e7ff      	b.n	88d0 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xfe>
    88d0:	980d      	ldr	r0, [sp, #52]	; 0x34
    88d2:	f006 fc7e 	bl	f1d2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    88d6:	9013      	str	r0, [sp, #76]	; 0x4c
    88d8:	e7ff      	b.n	88da <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x108>
    88da:	e7d4      	b.n	8886 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xb4>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
    88dc:	f240 104c 	movw	r0, #332	; 0x14c
    88e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    88e4:	21c8      	movs	r1, #200	; 0xc8
    88e6:	f007 f9ab 	bl	fc40 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    88ea:	e7ff      	b.n	88ec <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x11a>
    unsafe { TOUCH_EVENT.ev_cb = Some( touch_event_callback ) };
    88ec:	f648 208f 	movw	r0, #35471	; 0x8a8f
    88f0:	f2c0 0000 	movt	r0, #0
    88f4:	9017      	str	r0, [sp, #92]	; 0x5c
    88f6:	9817      	ldr	r0, [sp, #92]	; 0x5c
    88f8:	f240 11e0 	movw	r1, #480	; 0x1e0
    88fc:	f2c2 0100 	movt	r1, #8192	; 0x2000
    8900:	6048      	str	r0, [r1, #4]
        Some( touch_interrupt_handler ),  //  Call `touch_interrupt_handler()` upon detecting interrupt
    8902:	f648 2043 	movw	r0, #35395	; 0x8a43
    8906:	f2c0 0000 	movt	r0, #0
    890a:	9019      	str	r0, [sp, #100]	; 0x64
        core::ptr::null_mut(),            //  No arguments for `touch_interrupt_handler()`
    890c:	e7ff      	b.n	890e <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x13c>
    let rc = unsafe { hal::hal_gpio_irq_init(
    890e:	9919      	ldr	r1, [sp, #100]	; 0x64
    8910:	4668      	mov	r0, sp
    8912:	2201      	movs	r2, #1
    8914:	6002      	str	r2, [r0, #0]
    8916:	201c      	movs	r0, #28
    8918:	2200      	movs	r2, #0
    891a:	2302      	movs	r3, #2
    891c:	f010 f9da 	bl	18cd4 <hal_gpio_irq_init>
    8920:	9018      	str	r0, [sp, #96]	; 0x60
    8922:	e7ff      	b.n	8924 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x152>
    assert_eq!(rc, 0, "IRQ init fail");
    8924:	f24d 20b8 	movw	r0, #53944	; 0xd2b8
    8928:	f2c0 0001 	movt	r0, #1
    892c:	6800      	ldr	r0, [r0, #0]
    892e:	a918      	add	r1, sp, #96	; 0x60
    8930:	911a      	str	r1, [sp, #104]	; 0x68
    8932:	901b      	str	r0, [sp, #108]	; 0x6c
    8934:	981a      	ldr	r0, [sp, #104]	; 0x68
    8936:	9039      	str	r0, [sp, #228]	; 0xe4
    8938:	991b      	ldr	r1, [sp, #108]	; 0x6c
    893a:	913a      	str	r1, [sp, #232]	; 0xe8
    893c:	6802      	ldr	r2, [r0, #0]
    893e:	680b      	ldr	r3, [r1, #0]
    8940:	429a      	cmp	r2, r3
    8942:	900c      	str	r0, [sp, #48]	; 0x30
    8944:	910b      	str	r1, [sp, #44]	; 0x2c
    8946:	d104      	bne.n	8952 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x180>
    8948:	e7ff      	b.n	894a <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x178>
    894a:	201c      	movs	r0, #28
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
    894c:	f010 f9fe 	bl	18d4c <hal_gpio_irq_enable>
    8950:	e072      	b.n	8a38 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x266>
    assert_eq!(rc, 0, "IRQ init fail");
    8952:	f24d 3010 	movw	r0, #54032	; 0xd310
    8956:	f2c0 0001 	movt	r0, #1
    895a:	6801      	ldr	r1, [r0, #0]
    895c:	980c      	ldr	r0, [sp, #48]	; 0x30
    895e:	902b      	str	r0, [sp, #172]	; 0xac
    8960:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8962:	922c      	str	r2, [sp, #176]	; 0xb0
    8964:	f24d 332c 	movw	r3, #54060	; 0xd32c
    8968:	f2c0 0301 	movt	r3, #1
    896c:	681b      	ldr	r3, [r3, #0]
    896e:	f24d 3c30 	movw	ip, #54064	; 0xd330
    8972:	f2c0 0c01 	movt	ip, #1
    8976:	f8dc c000 	ldr.w	ip, [ip]
    897a:	46ee      	mov	lr, sp
    897c:	2400      	movs	r4, #0
    897e:	f8ce 4000 	str.w	r4, [lr]
    8982:	a82d      	add	r0, sp, #180	; 0xb4
    8984:	2201      	movs	r2, #1
    8986:	910a      	str	r1, [sp, #40]	; 0x28
    8988:	4619      	mov	r1, r3
    898a:	4663      	mov	r3, ip
    898c:	f005 fa48 	bl	de20 <_ZN4core3fmt9Arguments6new_v117h7622a2ed78995b61E>
    8990:	e7ff      	b.n	8992 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x1c0>
    8992:	a82b      	add	r0, sp, #172	; 0xac
    8994:	9028      	str	r0, [sp, #160]	; 0xa0
    8996:	a82c      	add	r0, sp, #176	; 0xb0
    8998:	9029      	str	r0, [sp, #164]	; 0xa4
    899a:	a82d      	add	r0, sp, #180	; 0xb4
    899c:	902a      	str	r0, [sp, #168]	; 0xa8
    899e:	9828      	ldr	r0, [sp, #160]	; 0xa0
    89a0:	903b      	str	r0, [sp, #236]	; 0xec
    89a2:	9929      	ldr	r1, [sp, #164]	; 0xa4
    89a4:	913c      	str	r1, [sp, #240]	; 0xf0
    89a6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    89a8:	923d      	str	r2, [sp, #244]	; 0xf4
    89aa:	f24e 03bd 	movw	r3, #57533	; 0xe0bd
    89ae:	f2c0 0300 	movt	r3, #0
    89b2:	9109      	str	r1, [sp, #36]	; 0x24
    89b4:	4619      	mov	r1, r3
    89b6:	9208      	str	r2, [sp, #32]
    89b8:	f007 faa7 	bl	ff0a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    89bc:	9007      	str	r0, [sp, #28]
    89be:	9106      	str	r1, [sp, #24]
    89c0:	e7ff      	b.n	89c2 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x1f0>
    89c2:	f24e 01bd 	movw	r1, #57533	; 0xe0bd
    89c6:	f2c0 0100 	movt	r1, #0
    89ca:	9809      	ldr	r0, [sp, #36]	; 0x24
    89cc:	f007 fa9d 	bl	ff0a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    89d0:	9005      	str	r0, [sp, #20]
    89d2:	9104      	str	r1, [sp, #16]
    89d4:	e7ff      	b.n	89d6 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x204>
    89d6:	f646 716f 	movw	r1, #28527	; 0x6f6f
    89da:	f2c0 0101 	movt	r1, #1
    89de:	9808      	ldr	r0, [sp, #32]
    89e0:	f007 fad2 	bl	ff88 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    89e4:	9003      	str	r0, [sp, #12]
    89e6:	9102      	str	r1, [sp, #8]
    89e8:	e7ff      	b.n	89ea <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x218>
    89ea:	9807      	ldr	r0, [sp, #28]
    89ec:	9022      	str	r0, [sp, #136]	; 0x88
    89ee:	9906      	ldr	r1, [sp, #24]
    89f0:	9123      	str	r1, [sp, #140]	; 0x8c
    89f2:	9a05      	ldr	r2, [sp, #20]
    89f4:	9224      	str	r2, [sp, #144]	; 0x90
    89f6:	9b04      	ldr	r3, [sp, #16]
    89f8:	9325      	str	r3, [sp, #148]	; 0x94
    89fa:	f8dd c00c 	ldr.w	ip, [sp, #12]
    89fe:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
    8a02:	f8dd e008 	ldr.w	lr, [sp, #8]
    8a06:	f8cd e09c 	str.w	lr, [sp, #156]	; 0x9c
    8a0a:	466c      	mov	r4, sp
    8a0c:	2503      	movs	r5, #3
    8a0e:	6025      	str	r5, [r4, #0]
    8a10:	a81c      	add	r0, sp, #112	; 0x70
    8a12:	ab22      	add	r3, sp, #136	; 0x88
    8a14:	990a      	ldr	r1, [sp, #40]	; 0x28
    8a16:	462a      	mov	r2, r5
    8a18:	f005 fa02 	bl	de20 <_ZN4core3fmt9Arguments6new_v117h7622a2ed78995b61E>
    8a1c:	e7ff      	b.n	8a1e <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x24c>
    8a1e:	f24d 3050 	movw	r0, #54096	; 0xd350
    8a22:	f2c0 0001 	movt	r0, #1
    8a26:	f00d ffb4 	bl	16992 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    8a2a:	9001      	str	r0, [sp, #4]
    8a2c:	e7ff      	b.n	8a2e <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x25c>
    8a2e:	a81c      	add	r0, sp, #112	; 0x70
    8a30:	9901      	ldr	r1, [sp, #4]
    8a32:	f00d ffeb 	bl	16a0c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    8a36:	defe      	udf	#254	; 0xfe
    8a38:	2000      	movs	r0, #0
    Ok(())
    8a3a:	9013      	str	r0, [sp, #76]	; 0x4c
    8a3c:	2001      	movs	r0, #1
    8a3e:	9013      	str	r0, [sp, #76]	; 0x4c
}
    8a40:	e6f6      	b.n	8830 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x5e>

00008a42 <_ZN3app12touch_sensor23touch_interrupt_handler17he79adf05b4785acfE>:

/// Interrupt handler for the touch controller, triggered when a touch is detected
extern "C" fn touch_interrupt_handler(arg: *mut core::ffi::c_void) {
    8a42:	b580      	push	{r7, lr}
    8a44:	b086      	sub	sp, #24
    8a46:	9004      	str	r0, [sp, #16]
    //  We forward a touch event to the Default Event Queue for deferred processing.  Don't do any processing here.
    unsafe { TOUCH_EVENT.ev_arg = arg };
    8a48:	f240 11e0 	movw	r1, #480	; 0x1e0
    8a4c:	f2c2 0100 	movt	r1, #8192	; 0x2000
    8a50:	6088      	str	r0, [r1, #8]
    8a52:	a802      	add	r0, sp, #8
    //  Fetch the Default Event Queue. TODO: Use dedicated Event Queue for higher priority processing.
    let queue = os::eventq_dflt_get()
    8a54:	f006 fc49 	bl	f2ea <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
    8a58:	e7ff      	b.n	8a5a <_ZN3app12touch_sensor23touch_interrupt_handler17he79adf05b4785acfE+0x18>
    8a5a:	f24d 11f6 	movw	r1, #53750	; 0xd1f6
    8a5e:	f2c0 0101 	movt	r1, #1
    8a62:	f24d 3368 	movw	r3, #54120	; 0xd368
    8a66:	f2c0 0301 	movt	r3, #1
    8a6a:	a802      	add	r0, sp, #8
    8a6c:	2208      	movs	r2, #8
    8a6e:	f009 ffc7 	bl	12a00 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E>
    8a72:	4601      	mov	r1, r0
    8a74:	9005      	str	r0, [sp, #20]
    8a76:	9101      	str	r1, [sp, #4]
    8a78:	e7ff      	b.n	8a7a <_ZN3app12touch_sensor23touch_interrupt_handler17he79adf05b4785acfE+0x38>
        .expect("GET fail");
    unsafe { os::os_eventq_put(queue, &mut TOUCH_EVENT) };  //  Trigger the callback function `touch_event_callback()`
    8a7a:	f240 11e0 	movw	r1, #480	; 0x1e0
    8a7e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    8a82:	9801      	ldr	r0, [sp, #4]
    8a84:	f011 f9f5 	bl	19e72 <os_eventq_put>
    8a88:	e7ff      	b.n	8a8a <_ZN3app12touch_sensor23touch_interrupt_handler17he79adf05b4785acfE+0x48>
    //console::print("touch\n"); ////
}
    8a8a:	b006      	add	sp, #24
    8a8c:	bd80      	pop	{r7, pc}

00008a8e <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E>:

/// Callback for the touch event that is triggered when a touch is detected
extern "C" fn touch_event_callback(_event: *mut os_event) {
    8a8e:	b580      	push	{r7, lr}
    8a90:	b094      	sub	sp, #80	; 0x50
    8a92:	900e      	str	r0, [sp, #56]	; 0x38
    //  console::printhex(unsafe { os::os_time_get() } as u8); console::print(" touch\n");
    unsafe { 
        //  Fetch the touch data from the touch controller
        read_touchdata(&mut TOUCH_DATA)
    8a94:	f240 104c 	movw	r0, #332	; 0x14c
    8a98:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8a9c:	f000 f894 	bl	8bc8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E>
    8aa0:	9006      	str	r0, [sp, #24]
    8aa2:	e7ff      	b.n	8aa4 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x16>
    8aa4:	f24d 3178 	movw	r1, #54136	; 0xd378
    8aa8:	f2c0 0101 	movt	r1, #1
    8aac:	f24d 3388 	movw	r3, #54152	; 0xd388
    8ab0:	f2c0 0301 	movt	r3, #1
    8ab4:	220e      	movs	r2, #14
    8ab6:	9806      	ldr	r0, [sp, #24]
    8ab8:	f006 fb58 	bl	f16c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8abc:	e7ff      	b.n	8abe <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x30>
            .expect("touchdata fail");
        //  Handle each touch data info
        for i in 0..TOUCH_DATA.count as usize {
    8abe:	f240 104c 	movw	r0, #332	; 0x14c
    8ac2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8ac6:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
    8aca:	2100      	movs	r1, #0
    8acc:	9107      	str	r1, [sp, #28]
    8ace:	9008      	str	r0, [sp, #32]
    8ad0:	9807      	ldr	r0, [sp, #28]
    8ad2:	9908      	ldr	r1, [sp, #32]
    8ad4:	f005 fee5 	bl	e8a2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    8ad8:	9005      	str	r0, [sp, #20]
    8ada:	9104      	str	r1, [sp, #16]
    8adc:	e7ff      	b.n	8ade <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x50>
    8ade:	9805      	ldr	r0, [sp, #20]
    8ae0:	9009      	str	r0, [sp, #36]	; 0x24
    8ae2:	9904      	ldr	r1, [sp, #16]
    8ae4:	910a      	str	r1, [sp, #40]	; 0x28
    8ae6:	e7ff      	b.n	8ae8 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x5a>
    8ae8:	a809      	add	r0, sp, #36	; 0x24
    8aea:	f005 fe4f 	bl	e78c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    8aee:	910c      	str	r1, [sp, #48]	; 0x30
    8af0:	900b      	str	r0, [sp, #44]	; 0x2c
    8af2:	e7ff      	b.n	8af4 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x66>
    8af4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8af6:	2800      	cmp	r0, #0
    8af8:	d001      	beq.n	8afe <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x70>
    8afa:	e7ff      	b.n	8afc <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x6e>
    8afc:	e002      	b.n	8b04 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x76>
            console::print(", x: "); console::printint(x as i32); 
            console::print(", y: "); console::printint(y as i32); console::print("\n");
        }
        console::flush();   
    } */
}
    8afe:	b014      	add	sp, #80	; 0x50
    8b00:	bd80      	pop	{r7, pc}
        for i in 0..TOUCH_DATA.count as usize {
    8b02:	defe      	udf	#254	; 0xfe
    8b04:	980c      	ldr	r0, [sp, #48]	; 0x30
    8b06:	900f      	str	r0, [sp, #60]	; 0x3c
    8b08:	9010      	str	r0, [sp, #64]	; 0x40
    8b0a:	9011      	str	r0, [sp, #68]	; 0x44
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
    8b0c:	2809      	cmp	r0, #9
    8b0e:	9003      	str	r0, [sp, #12]
    8b10:	d851      	bhi.n	8bb6 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x128>
    8b12:	e7ff      	b.n	8b14 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x86>
    8b14:	f240 104c 	movw	r0, #332	; 0x14c
    8b18:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8b1c:	9903      	ldr	r1, [sp, #12]
    8b1e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    8b22:	f830 0031 	ldrh.w	r0, [r0, r1, lsl #3]
    8b26:	4603      	mov	r3, r0
    8b28:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
    8b2c:	f8b2 c002 	ldrh.w	ip, [r2, #2]
    8b30:	46e6      	mov	lr, ip
    8b32:	f8ad c04c 	strh.w	ip, [sp, #76]	; 0x4c
    8b36:	7912      	ldrb	r2, [r2, #4]
    8b38:	4694      	mov	ip, r2
    8b3a:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
            if x == 0 && y == 0 { continue; }
    8b3e:	2800      	cmp	r0, #0
    8b40:	9302      	str	r3, [sp, #8]
    8b42:	f8cd e004 	str.w	lr, [sp, #4]
    8b46:	f8cd c000 	str.w	ip, [sp]
    8b4a:	d008      	beq.n	8b5e <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xd0>
    8b4c:	e003      	b.n	8b56 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xc8>
    8b4e:	2001      	movs	r0, #1
    8b50:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
    8b54:	e008      	b.n	8b68 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xda>
    8b56:	2000      	movs	r0, #0
    8b58:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
    8b5c:	e004      	b.n	8b68 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xda>
    8b5e:	9801      	ldr	r0, [sp, #4]
    8b60:	0401      	lsls	r1, r0, #16
    8b62:	2900      	cmp	r1, #0
    8b64:	d0f3      	beq.n	8b4e <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xc0>
    8b66:	e7f6      	b.n	8b56 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xc8>
    8b68:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
    8b6c:	07c0      	lsls	r0, r0, #31
    8b6e:	2800      	cmp	r0, #0
    8b70:	d105      	bne.n	8b7e <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xf0>
    8b72:	e7ff      	b.n	8b74 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xe6>
            if action != 0 && action != 2 { continue; }
    8b74:	9800      	ldr	r0, [sp, #0]
    8b76:	0601      	lsls	r1, r0, #24
    8b78:	2900      	cmp	r1, #0
    8b7a:	d10a      	bne.n	8b92 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x104>
    8b7c:	e005      	b.n	8b8a <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xfc>
            if x == 0 && y == 0 { continue; }
    8b7e:	e7ff      	b.n	8b80 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xf2>
    8b80:	e7b2      	b.n	8ae8 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x5a>
    8b82:	2001      	movs	r0, #1
            if action != 0 && action != 2 { continue; }
    8b84:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    8b88:	e008      	b.n	8b9c <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x10e>
    8b8a:	2000      	movs	r0, #0
    8b8c:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    8b90:	e004      	b.n	8b9c <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x10e>
    8b92:	9800      	ldr	r0, [sp, #0]
    8b94:	b2c1      	uxtb	r1, r0
    8b96:	2902      	cmp	r1, #2
    8b98:	d1f3      	bne.n	8b82 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xf4>
    8b9a:	e7f6      	b.n	8b8a <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xfc>
    8b9c:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
    8ba0:	07c0      	lsls	r0, r0, #31
    8ba2:	2800      	cmp	r0, #0
    8ba4:	d105      	bne.n	8bb2 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x124>
    8ba6:	e7ff      	b.n	8ba8 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x11a>
            super::handle_touch(x, y);
    8ba8:	9802      	ldr	r0, [sp, #8]
    8baa:	9901      	ldr	r1, [sp, #4]
    8bac:	f000 ff0b 	bl	99c6 <_ZN3app5chip812handle_touch17hb422a4f740ac0e1bE>
    8bb0:	e000      	b.n	8bb4 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x126>
            if action != 0 && action != 2 { continue; }
    8bb2:	e7e5      	b.n	8b80 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xf2>
        for i in 0..TOUCH_DATA.count as usize {
    8bb4:	e798      	b.n	8ae8 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x5a>
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
    8bb6:	f24d 3098 	movw	r0, #54168	; 0xd398
    8bba:	f2c0 0001 	movt	r0, #1
    8bbe:	220a      	movs	r2, #10
    8bc0:	9903      	ldr	r1, [sp, #12]
    8bc2:	f00d ff03 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    8bc6:	defe      	udf	#254	; 0xfe

00008bc8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E>:
/// Touch data will be populated here
static mut TOUCH_DATA: TouchEventInfo = fill_zero!(TouchEventInfo);

/// Read touch controller data. This only works when the screen has been tapped and the touch controller wakes up.
/// Ported from https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L407-L466
fn read_touchdata(data: &mut TouchEventInfo) -> MynewtResult<()> {
    8bc8:	b580      	push	{r7, lr}
    8bca:	b0de      	sub	sp, #376	; 0x178
    8bcc:	9057      	str	r0, [sp, #348]	; 0x15c
    read_register_range(           //  Read the range of I2C registers...
    8bce:	4669      	mov	r1, sp
    8bd0:	223f      	movs	r2, #63	; 0x3f
    8bd2:	600a      	str	r2, [r1, #0]
    8bd4:	f240 139e 	movw	r3, #414	; 0x19e
    8bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bdc:	2115      	movs	r1, #21
    8bde:	f04f 0c00 	mov.w	ip, #0
    8be2:	9026      	str	r0, [sp, #152]	; 0x98
    8be4:	4608      	mov	r0, r1
    8be6:	4661      	mov	r1, ip
    8be8:	f000 fb97 	bl	931a <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E>
    8bec:	9025      	str	r0, [sp, #148]	; 0x94
    8bee:	e7ff      	b.n	8bf0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x28>
    8bf0:	f24d 31a8 	movw	r1, #54184	; 0xd3a8
    8bf4:	f2c0 0101 	movt	r1, #1
    8bf8:	f24d 33bc 	movw	r3, #54204	; 0xd3bc
    8bfc:	f2c0 0301 	movt	r3, #1
    8c00:	2213      	movs	r2, #19
    8c02:	9825      	ldr	r0, [sp, #148]	; 0x94
    8c04:	f006 fab2 	bl	f16c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8c08:	e7ff      	b.n	8c0a <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x42>
    8c0a:	f10d 00ee 	add.w	r0, sp, #238	; 0xee
    8c0e:	2152      	movs	r1, #82	; 0x52
        TOUCH_CONTROLLER_ADDRESS,  //  From the touch controller
        0,                         //  Starting from register 0
        POINT_READ_BUF as u8,      //  Number of registers to read
        unsafe { &mut BUF }        //  Save the read data into `buf`
    ).expect("read touchdata fail");
    *data = fill_zero!(TouchEventInfo);
    8c10:	9024      	str	r0, [sp, #144]	; 0x90
    8c12:	9123      	str	r1, [sp, #140]	; 0x8c
    8c14:	f014 fa94 	bl	1d140 <__aeabi_memclr>
    8c18:	a827      	add	r0, sp, #156	; 0x9c
    8c1a:	9924      	ldr	r1, [sp, #144]	; 0x90
    8c1c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    8c1e:	f014 fa93 	bl	1d148 <__aeabi_memcpy>
    8c22:	e7ff      	b.n	8c24 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x5c>
    8c24:	a927      	add	r1, sp, #156	; 0x9c
    8c26:	2252      	movs	r2, #82	; 0x52
    8c28:	9826      	ldr	r0, [sp, #152]	; 0x98
    8c2a:	f014 fa8d 	bl	1d148 <__aeabi_memcpy>
    data.point_num = unsafe { BUF[FT_TOUCH_POINT_NUM] & 0x0F };
    8c2e:	f240 119e 	movw	r1, #414	; 0x19e
    8c32:	f2c2 0100 	movt	r1, #8192	; 0x2000
    8c36:	7889      	ldrb	r1, [r1, #2]
    8c38:	f001 010f 	and.w	r1, r1, #15
    8c3c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8c3e:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
    8c42:	2100      	movs	r1, #0
    data.count     = 0;
    8c44:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50

    //  Populate the first 5 touch points
    for i in 0..CFG_MAX_TOUCH_POINTS {
    8c48:	9150      	str	r1, [sp, #320]	; 0x140
    8c4a:	2105      	movs	r1, #5
    8c4c:	9151      	str	r1, [sp, #324]	; 0x144
    8c4e:	9950      	ldr	r1, [sp, #320]	; 0x140
    8c50:	9b51      	ldr	r3, [sp, #324]	; 0x144
    8c52:	9022      	str	r0, [sp, #136]	; 0x88
    8c54:	4608      	mov	r0, r1
    8c56:	4619      	mov	r1, r3
    8c58:	f005 fe23 	bl	e8a2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    8c5c:	9021      	str	r0, [sp, #132]	; 0x84
    8c5e:	9120      	str	r1, [sp, #128]	; 0x80
    8c60:	e7ff      	b.n	8c62 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x9a>
    8c62:	9821      	ldr	r0, [sp, #132]	; 0x84
    8c64:	9052      	str	r0, [sp, #328]	; 0x148
    8c66:	9920      	ldr	r1, [sp, #128]	; 0x80
    8c68:	9153      	str	r1, [sp, #332]	; 0x14c
    8c6a:	e7ff      	b.n	8c6c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xa4>
    8c6c:	a852      	add	r0, sp, #328	; 0x148
    8c6e:	f005 fd8d 	bl	e78c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    8c72:	9155      	str	r1, [sp, #340]	; 0x154
    8c74:	9054      	str	r0, [sp, #336]	; 0x150
    8c76:	e7ff      	b.n	8c78 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xb0>
    8c78:	9854      	ldr	r0, [sp, #336]	; 0x150
    8c7a:	2800      	cmp	r0, #0
    8c7c:	d001      	beq.n	8c82 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xba>
    8c7e:	e7ff      	b.n	8c80 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xb8>
    8c80:	e001      	b.n	8c86 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xbe>
    8c82:	e00d      	b.n	8ca0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xd8>
    8c84:	defe      	udf	#254	; 0xfe
    8c86:	9855      	ldr	r0, [sp, #340]	; 0x154
    8c88:	9058      	str	r0, [sp, #352]	; 0x160
    8c8a:	9059      	str	r0, [sp, #356]	; 0x164
    8c8c:	905a      	str	r0, [sp, #360]	; 0x168
    8c8e:	2106      	movs	r1, #6
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    8c90:	fba1 1200 	umull	r1, r2, r1, r0
    8c94:	2a00      	cmp	r2, #0
    8c96:	901f      	str	r0, [sp, #124]	; 0x7c
    8c98:	911e      	str	r1, [sp, #120]	; 0x78
    8c9a:	f040 81c1 	bne.w	9020 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x458>
    8c9e:	e002      	b.n	8ca6 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xde>
    8ca0:	2001      	movs	r0, #1
            && (data.point_num == 0) {
            break;
        }
    }
    Ok(())
}
    8ca2:	b05e      	add	sp, #376	; 0x178
    8ca4:	bd80      	pop	{r7, pc}
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    8ca6:	981e      	ldr	r0, [sp, #120]	; 0x78
    8ca8:	1d41      	adds	r1, r0, #5
    8caa:	460a      	mov	r2, r1
    8cac:	4281      	cmp	r1, r0
    8cae:	921d      	str	r2, [sp, #116]	; 0x74
    8cb0:	f0c0 81c2 	bcc.w	9038 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x470>
    8cb4:	e7ff      	b.n	8cb6 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xee>
    8cb6:	981d      	ldr	r0, [sp, #116]	; 0x74
    8cb8:	283e      	cmp	r0, #62	; 0x3e
    8cba:	f200 81c9 	bhi.w	9050 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x488>
    8cbe:	e7ff      	b.n	8cc0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xf8>
    8cc0:	f240 109e 	movw	r0, #414	; 0x19e
    8cc4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8cc8:	991d      	ldr	r1, [sp, #116]	; 0x74
    8cca:	5c40      	ldrb	r0, [r0, r1]
    8ccc:	0900      	lsrs	r0, r0, #4
    8cce:	901c      	str	r0, [sp, #112]	; 0x70
    8cd0:	e7ff      	b.n	8cd2 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x10a>
    8cd2:	981c      	ldr	r0, [sp, #112]	; 0x70
    8cd4:	f88d 016f 	strb.w	r0, [sp, #367]	; 0x16f
    8cd8:	b2c1      	uxtb	r1, r0
        if pointid >= HYN_MAX_ID { break; }
    8cda:	290e      	cmp	r1, #14
    8cdc:	d80b      	bhi.n	8cf6 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x12e>
    8cde:	e7ff      	b.n	8ce0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x118>
        data.count += 1;
    8ce0:	9826      	ldr	r0, [sp, #152]	; 0x98
    8ce2:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
    8ce6:	3101      	adds	r1, #1
    8ce8:	b2ca      	uxtb	r2, r1
    8cea:	460b      	mov	r3, r1
    8cec:	428a      	cmp	r2, r1
    8cee:	931b      	str	r3, [sp, #108]	; 0x6c
    8cf0:	f040 81b7 	bne.w	9062 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x49a>
    8cf4:	e001      	b.n	8cfa <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x132>
        if pointid >= HYN_MAX_ID { break; }
    8cf6:	e7ff      	b.n	8cf8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x130>
    8cf8:	e7d2      	b.n	8ca0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xd8>
        data.count += 1;
    8cfa:	981b      	ldr	r0, [sp, #108]	; 0x6c
    8cfc:	9926      	ldr	r1, [sp, #152]	; 0x98
    8cfe:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    8d02:	2206      	movs	r2, #6
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    8d04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8d06:	fba2 2c03 	umull	r2, ip, r2, r3
    8d0a:	f1bc 0f00 	cmp.w	ip, #0
    8d0e:	921a      	str	r2, [sp, #104]	; 0x68
    8d10:	f040 81b3 	bne.w	907a <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x4b2>
    8d14:	e7ff      	b.n	8d16 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x14e>
    8d16:	981a      	ldr	r0, [sp, #104]	; 0x68
    8d18:	1cc1      	adds	r1, r0, #3
    8d1a:	460a      	mov	r2, r1
    8d1c:	4281      	cmp	r1, r0
    8d1e:	9219      	str	r2, [sp, #100]	; 0x64
    8d20:	f0c0 81b7 	bcc.w	9092 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x4ca>
    8d24:	e7ff      	b.n	8d26 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x15e>
    8d26:	9819      	ldr	r0, [sp, #100]	; 0x64
    8d28:	283e      	cmp	r0, #62	; 0x3e
    8d2a:	f200 81be 	bhi.w	90aa <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x4e2>
    8d2e:	e7ff      	b.n	8d30 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x168>
    8d30:	f240 109e 	movw	r0, #414	; 0x19e
    8d34:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8d38:	9919      	ldr	r1, [sp, #100]	; 0x64
    8d3a:	5c40      	ldrb	r0, [r0, r1]
    8d3c:	f000 000f 	and.w	r0, r0, #15
    8d40:	4602      	mov	r2, r0
    8d42:	f8ad 0170 	strh.w	r0, [sp, #368]	; 0x170
    8d46:	2006      	movs	r0, #6
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
    8d48:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8d4a:	fba0 0c03 	umull	r0, ip, r0, r3
    8d4e:	f1bc 0f00 	cmp.w	ip, #0
    8d52:	9218      	str	r2, [sp, #96]	; 0x60
    8d54:	9017      	str	r0, [sp, #92]	; 0x5c
    8d56:	f040 81b1 	bne.w	90bc <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x4f4>
    8d5a:	e7ff      	b.n	8d5c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x194>
    8d5c:	9817      	ldr	r0, [sp, #92]	; 0x5c
    8d5e:	1d01      	adds	r1, r0, #4
    8d60:	460a      	mov	r2, r1
    8d62:	4281      	cmp	r1, r0
    8d64:	9216      	str	r2, [sp, #88]	; 0x58
    8d66:	f0c0 81b5 	bcc.w	90d4 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x50c>
    8d6a:	e7ff      	b.n	8d6c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x1a4>
    8d6c:	9816      	ldr	r0, [sp, #88]	; 0x58
    8d6e:	283e      	cmp	r0, #62	; 0x3e
    8d70:	f200 81bc 	bhi.w	90ec <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x524>
    8d74:	e7ff      	b.n	8d76 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x1ae>
    8d76:	f240 109e 	movw	r0, #414	; 0x19e
    8d7a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8d7e:	9916      	ldr	r1, [sp, #88]	; 0x58
    8d80:	5c40      	ldrb	r0, [r0, r1]
    8d82:	4602      	mov	r2, r0
    8d84:	f8ad 0172 	strh.w	r0, [sp, #370]	; 0x172
        data.touches[i].x  = (x_high << 8) | x_low;
    8d88:	9818      	ldr	r0, [sp, #96]	; 0x60
    8d8a:	0203      	lsls	r3, r0, #8
    8d8c:	9215      	str	r2, [sp, #84]	; 0x54
    8d8e:	9314      	str	r3, [sp, #80]	; 0x50
    8d90:	e7ff      	b.n	8d92 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x1ca>
    8d92:	981f      	ldr	r0, [sp, #124]	; 0x7c
    8d94:	2809      	cmp	r0, #9
    8d96:	f200 81b2 	bhi.w	90fe <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x536>
    8d9a:	e7ff      	b.n	8d9c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x1d4>
    8d9c:	9814      	ldr	r0, [sp, #80]	; 0x50
    8d9e:	9915      	ldr	r1, [sp, #84]	; 0x54
    8da0:	ea40 0201 	orr.w	r2, r0, r1
    8da4:	9b26      	ldr	r3, [sp, #152]	; 0x98
    8da6:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
    8daa:	f823 203c 	strh.w	r2, [r3, ip, lsl #3]
    8dae:	2206      	movs	r2, #6
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    8db0:	fba2 2e0c 	umull	r2, lr, r2, ip
    8db4:	f1be 0f00 	cmp.w	lr, #0
    8db8:	9213      	str	r2, [sp, #76]	; 0x4c
    8dba:	f040 81a9 	bne.w	9110 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x548>
    8dbe:	e7ff      	b.n	8dc0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x1f8>
    8dc0:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8dc2:	1d41      	adds	r1, r0, #5
    8dc4:	460a      	mov	r2, r1
    8dc6:	4281      	cmp	r1, r0
    8dc8:	9212      	str	r2, [sp, #72]	; 0x48
    8dca:	f0c0 81ad 	bcc.w	9128 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x560>
    8dce:	e7ff      	b.n	8dd0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x208>
    8dd0:	9812      	ldr	r0, [sp, #72]	; 0x48
    8dd2:	283e      	cmp	r0, #62	; 0x3e
    8dd4:	f200 81b4 	bhi.w	9140 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x578>
    8dd8:	e7ff      	b.n	8dda <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x212>
    8dda:	f240 109e 	movw	r0, #414	; 0x19e
    8dde:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8de2:	9912      	ldr	r1, [sp, #72]	; 0x48
    8de4:	5c40      	ldrb	r0, [r0, r1]
    8de6:	f000 000f 	and.w	r0, r0, #15
    8dea:	4602      	mov	r2, r0
    8dec:	f8ad 0174 	strh.w	r0, [sp, #372]	; 0x174
    8df0:	2006      	movs	r0, #6
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
    8df2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8df4:	fba0 0c03 	umull	r0, ip, r0, r3
    8df8:	f1bc 0f00 	cmp.w	ip, #0
    8dfc:	9211      	str	r2, [sp, #68]	; 0x44
    8dfe:	9010      	str	r0, [sp, #64]	; 0x40
    8e00:	f040 81a7 	bne.w	9152 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x58a>
    8e04:	e7ff      	b.n	8e06 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x23e>
    8e06:	9810      	ldr	r0, [sp, #64]	; 0x40
    8e08:	1d81      	adds	r1, r0, #6
    8e0a:	460a      	mov	r2, r1
    8e0c:	4281      	cmp	r1, r0
    8e0e:	920f      	str	r2, [sp, #60]	; 0x3c
    8e10:	f0c0 81ab 	bcc.w	916a <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x5a2>
    8e14:	e7ff      	b.n	8e16 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x24e>
    8e16:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8e18:	283e      	cmp	r0, #62	; 0x3e
    8e1a:	f200 81b2 	bhi.w	9182 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x5ba>
    8e1e:	e7ff      	b.n	8e20 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x258>
    8e20:	f240 109e 	movw	r0, #414	; 0x19e
    8e24:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8e28:	990f      	ldr	r1, [sp, #60]	; 0x3c
    8e2a:	5c40      	ldrb	r0, [r0, r1]
    8e2c:	4602      	mov	r2, r0
    8e2e:	f8ad 0176 	strh.w	r0, [sp, #374]	; 0x176
        data.touches[i].y  = (y_high << 8) | y_low;
    8e32:	9811      	ldr	r0, [sp, #68]	; 0x44
    8e34:	0203      	lsls	r3, r0, #8
    8e36:	920e      	str	r2, [sp, #56]	; 0x38
    8e38:	930d      	str	r3, [sp, #52]	; 0x34
    8e3a:	e7ff      	b.n	8e3c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x274>
    8e3c:	981f      	ldr	r0, [sp, #124]	; 0x7c
    8e3e:	2809      	cmp	r0, #9
    8e40:	f200 81a8 	bhi.w	9194 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x5cc>
    8e44:	e7ff      	b.n	8e46 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x27e>
    8e46:	9826      	ldr	r0, [sp, #152]	; 0x98
    8e48:	991f      	ldr	r1, [sp, #124]	; 0x7c
    8e4a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    8e4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8e50:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    8e54:	ea43 0e0c 	orr.w	lr, r3, ip
    8e58:	f8a2 e002 	strh.w	lr, [r2, #2]
    8e5c:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
    8e5e:	fba2 2e01 	umull	r2, lr, r2, r1
    8e62:	f1be 0f00 	cmp.w	lr, #0
    8e66:	920c      	str	r2, [sp, #48]	; 0x30
    8e68:	f040 819d 	bne.w	91a6 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x5de>
    8e6c:	e7ff      	b.n	8e6e <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x2a6>
    8e6e:	980c      	ldr	r0, [sp, #48]	; 0x30
    8e70:	1cc1      	adds	r1, r0, #3
    8e72:	460a      	mov	r2, r1
    8e74:	4281      	cmp	r1, r0
    8e76:	920b      	str	r2, [sp, #44]	; 0x2c
    8e78:	f0c0 81a1 	bcc.w	91be <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x5f6>
    8e7c:	e7ff      	b.n	8e7e <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x2b6>
    8e7e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8e80:	283e      	cmp	r0, #62	; 0x3e
    8e82:	f200 81a8 	bhi.w	91d6 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x60e>
    8e86:	e7ff      	b.n	8e88 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x2c0>
    8e88:	f240 109e 	movw	r0, #414	; 0x19e
    8e8c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8e90:	990b      	ldr	r1, [sp, #44]	; 0x2c
    8e92:	5c40      	ldrb	r0, [r0, r1]
    8e94:	0980      	lsrs	r0, r0, #6
    8e96:	900a      	str	r0, [sp, #40]	; 0x28
    8e98:	e7ff      	b.n	8e9a <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x2d2>
        data.touches[i].action =
    8e9a:	981f      	ldr	r0, [sp, #124]	; 0x7c
    8e9c:	2809      	cmp	r0, #9
    8e9e:	f200 81a3 	bhi.w	91e8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x620>
    8ea2:	e7ff      	b.n	8ea4 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x2dc>
    8ea4:	9826      	ldr	r0, [sp, #152]	; 0x98
    8ea6:	991f      	ldr	r1, [sp, #124]	; 0x7c
    8ea8:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    8eac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8eae:	7113      	strb	r3, [r2, #4]
    8eb0:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
    8eb2:	fba2 2c01 	umull	r2, ip, r2, r1
    8eb6:	f1bc 0f00 	cmp.w	ip, #0
    8eba:	9209      	str	r2, [sp, #36]	; 0x24
    8ebc:	f040 819d 	bne.w	91fa <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x632>
    8ec0:	e7ff      	b.n	8ec2 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x2fa>
    8ec2:	9809      	ldr	r0, [sp, #36]	; 0x24
    8ec4:	1d41      	adds	r1, r0, #5
    8ec6:	460a      	mov	r2, r1
    8ec8:	4281      	cmp	r1, r0
    8eca:	9208      	str	r2, [sp, #32]
    8ecc:	f0c0 81a1 	bcc.w	9212 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x64a>
    8ed0:	e7ff      	b.n	8ed2 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x30a>
    8ed2:	9808      	ldr	r0, [sp, #32]
    8ed4:	283e      	cmp	r0, #62	; 0x3e
    8ed6:	f200 81a8 	bhi.w	922a <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x662>
    8eda:	e7ff      	b.n	8edc <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x314>
    8edc:	f240 109e 	movw	r0, #414	; 0x19e
    8ee0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8ee4:	9908      	ldr	r1, [sp, #32]
    8ee6:	5c40      	ldrb	r0, [r0, r1]
    8ee8:	0900      	lsrs	r0, r0, #4
    8eea:	9007      	str	r0, [sp, #28]
    8eec:	e7ff      	b.n	8eee <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x326>
        data.touches[i].finger =
    8eee:	981f      	ldr	r0, [sp, #124]	; 0x7c
    8ef0:	2809      	cmp	r0, #9
    8ef2:	f200 81a3 	bhi.w	923c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x674>
    8ef6:	e7ff      	b.n	8ef8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x330>
    8ef8:	9826      	ldr	r0, [sp, #152]	; 0x98
    8efa:	991f      	ldr	r1, [sp, #124]	; 0x7c
    8efc:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    8f00:	9b07      	ldr	r3, [sp, #28]
    8f02:	7153      	strb	r3, [r2, #5]
    8f04:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
    8f06:	fba2 2c01 	umull	r2, ip, r2, r1
    8f0a:	f1bc 0f00 	cmp.w	ip, #0
    8f0e:	9206      	str	r2, [sp, #24]
    8f10:	f040 819d 	bne.w	924e <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x686>
    8f14:	e7ff      	b.n	8f16 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x34e>
    8f16:	9806      	ldr	r0, [sp, #24]
    8f18:	1dc1      	adds	r1, r0, #7
    8f1a:	460a      	mov	r2, r1
    8f1c:	4281      	cmp	r1, r0
    8f1e:	9205      	str	r2, [sp, #20]
    8f20:	f0c0 81a1 	bcc.w	9266 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x69e>
    8f24:	e7ff      	b.n	8f26 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x35e>
    8f26:	9805      	ldr	r0, [sp, #20]
    8f28:	283e      	cmp	r0, #62	; 0x3e
    8f2a:	f200 81a8 	bhi.w	927e <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x6b6>
    8f2e:	e7ff      	b.n	8f30 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x368>
    8f30:	f240 109e 	movw	r0, #414	; 0x19e
    8f34:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8f38:	9905      	ldr	r1, [sp, #20]
    8f3a:	5c40      	ldrb	r0, [r0, r1]
        data.touches[i].pressure =
    8f3c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    8f3e:	2a09      	cmp	r2, #9
    8f40:	9004      	str	r0, [sp, #16]
    8f42:	f200 81a5 	bhi.w	9290 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x6c8>
    8f46:	e7ff      	b.n	8f48 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x380>
    8f48:	9826      	ldr	r0, [sp, #152]	; 0x98
    8f4a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    8f4c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    8f50:	9b04      	ldr	r3, [sp, #16]
    8f52:	7193      	strb	r3, [r2, #6]
    8f54:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
    8f56:	fba2 2c01 	umull	r2, ip, r2, r1
    8f5a:	f1bc 0f00 	cmp.w	ip, #0
    8f5e:	9203      	str	r2, [sp, #12]
    8f60:	f040 819f 	bne.w	92a2 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x6da>
    8f64:	e7ff      	b.n	8f66 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x39e>
    8f66:	9803      	ldr	r0, [sp, #12]
    8f68:	f100 0108 	add.w	r1, r0, #8
    8f6c:	460a      	mov	r2, r1
    8f6e:	4281      	cmp	r1, r0
    8f70:	9202      	str	r2, [sp, #8]
    8f72:	f0c0 81a2 	bcc.w	92ba <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x6f2>
    8f76:	e7ff      	b.n	8f78 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3b0>
    8f78:	9802      	ldr	r0, [sp, #8]
    8f7a:	283e      	cmp	r0, #62	; 0x3e
    8f7c:	f200 81a9 	bhi.w	92d2 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x70a>
    8f80:	e7ff      	b.n	8f82 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3ba>
    8f82:	f240 109e 	movw	r0, #414	; 0x19e
    8f86:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8f8a:	9902      	ldr	r1, [sp, #8]
    8f8c:	5c40      	ldrb	r0, [r0, r1]
    8f8e:	0900      	lsrs	r0, r0, #4
    8f90:	9001      	str	r0, [sp, #4]
    8f92:	e7ff      	b.n	8f94 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3cc>
        data.touches[i].area =
    8f94:	981f      	ldr	r0, [sp, #124]	; 0x7c
    8f96:	2809      	cmp	r0, #9
    8f98:	f200 81a4 	bhi.w	92e4 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x71c>
    8f9c:	e7ff      	b.n	8f9e <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3d6>
    8f9e:	9826      	ldr	r0, [sp, #152]	; 0x98
    8fa0:	991f      	ldr	r1, [sp, #124]	; 0x7c
    8fa2:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    8fa6:	9b01      	ldr	r3, [sp, #4]
    8fa8:	71d3      	strb	r3, [r2, #7]
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    8faa:	290a      	cmp	r1, #10
    8fac:	d326      	bcc.n	8ffc <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x434>
    8fae:	e1a2      	b.n	92f6 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x72e>
    8fb0:	2001      	movs	r0, #1
    8fb2:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
    8fb6:	e009      	b.n	8fcc <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x404>
    8fb8:	2000      	movs	r0, #0
    8fba:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
    8fbe:	e005      	b.n	8fcc <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x404>
            && (data.point_num == 0) {
    8fc0:	9826      	ldr	r0, [sp, #152]	; 0x98
    8fc2:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    8fc6:	2900      	cmp	r1, #0
    8fc8:	d0f2      	beq.n	8fb0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3e8>
    8fca:	e7f5      	b.n	8fb8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3f0>
    8fcc:	f89d 015a 	ldrb.w	r0, [sp, #346]	; 0x15a
    8fd0:	07c0      	lsls	r0, r0, #31
    8fd2:	2800      	cmp	r0, #0
    8fd4:	d123      	bne.n	901e <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x456>
    8fd6:	e021      	b.n	901c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x454>
    8fd8:	2001      	movs	r0, #1
    8fda:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
    8fde:	e007      	b.n	8ff0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x428>
    8fe0:	2000      	movs	r0, #0
    8fe2:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
    8fe6:	e003      	b.n	8ff0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x428>
    8fe8:	981f      	ldr	r0, [sp, #124]	; 0x7c
    8fea:	280a      	cmp	r0, #10
    8fec:	d30e      	bcc.n	900c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x444>
    8fee:	e18b      	b.n	9308 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x740>
    8ff0:	f89d 015b 	ldrb.w	r0, [sp, #347]	; 0x15b
    8ff4:	07c0      	lsls	r0, r0, #31
    8ff6:	2800      	cmp	r0, #0
    8ff8:	d1e2      	bne.n	8fc0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3f8>
    8ffa:	e7dd      	b.n	8fb8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3f0>
    8ffc:	9826      	ldr	r0, [sp, #152]	; 0x98
    8ffe:	991f      	ldr	r1, [sp, #124]	; 0x7c
    9000:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    9004:	7912      	ldrb	r2, [r2, #4]
    9006:	2a00      	cmp	r2, #0
    9008:	d0e6      	beq.n	8fd8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x410>
    900a:	e7ed      	b.n	8fe8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x420>
    900c:	9826      	ldr	r0, [sp, #152]	; 0x98
    900e:	991f      	ldr	r1, [sp, #124]	; 0x7c
    9010:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    9014:	7912      	ldrb	r2, [r2, #4]
    9016:	2a02      	cmp	r2, #2
    9018:	d0de      	beq.n	8fd8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x410>
    901a:	e7e1      	b.n	8fe0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x418>
    for i in 0..CFG_MAX_TOUCH_POINTS {
    901c:	e626      	b.n	8c6c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xa4>
            break;
    901e:	e66b      	b.n	8cf8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x130>
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    9020:	f24d 30e0 	movw	r0, #54240	; 0xd3e0
    9024:	f2c0 0001 	movt	r0, #1
    9028:	f24d 32cc 	movw	r2, #54220	; 0xd3cc
    902c:	f2c0 0201 	movt	r2, #1
    9030:	2121      	movs	r1, #33	; 0x21
    9032:	f00d fcb5 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9036:	defe      	udf	#254	; 0xfe
    9038:	f24d 4020 	movw	r0, #54304	; 0xd420
    903c:	f2c0 0001 	movt	r0, #1
    9040:	f24d 4204 	movw	r2, #54276	; 0xd404
    9044:	f2c0 0201 	movt	r2, #1
    9048:	211c      	movs	r1, #28
    904a:	f00d fca9 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    904e:	defe      	udf	#254	; 0xfe
    9050:	f24d 403c 	movw	r0, #54332	; 0xd43c
    9054:	f2c0 0001 	movt	r0, #1
    9058:	223f      	movs	r2, #63	; 0x3f
    905a:	991d      	ldr	r1, [sp, #116]	; 0x74
    905c:	f00d fcb6 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    9060:	defe      	udf	#254	; 0xfe
        data.count += 1;
    9062:	f24d 4020 	movw	r0, #54304	; 0xd420
    9066:	f2c0 0001 	movt	r0, #1
    906a:	f24d 424c 	movw	r2, #54348	; 0xd44c
    906e:	f2c0 0201 	movt	r2, #1
    9072:	211c      	movs	r1, #28
    9074:	f00d fc94 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9078:	defe      	udf	#254	; 0xfe
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    907a:	f24d 30e0 	movw	r0, #54240	; 0xd3e0
    907e:	f2c0 0001 	movt	r0, #1
    9082:	f24d 425c 	movw	r2, #54364	; 0xd45c
    9086:	f2c0 0201 	movt	r2, #1
    908a:	2121      	movs	r1, #33	; 0x21
    908c:	f00d fc88 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9090:	defe      	udf	#254	; 0xfe
    9092:	f24d 4020 	movw	r0, #54304	; 0xd420
    9096:	f2c0 0001 	movt	r0, #1
    909a:	f24d 426c 	movw	r2, #54380	; 0xd46c
    909e:	f2c0 0201 	movt	r2, #1
    90a2:	211c      	movs	r1, #28
    90a4:	f00d fc7c 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    90a8:	defe      	udf	#254	; 0xfe
    90aa:	f24d 407c 	movw	r0, #54396	; 0xd47c
    90ae:	f2c0 0001 	movt	r0, #1
    90b2:	223f      	movs	r2, #63	; 0x3f
    90b4:	9919      	ldr	r1, [sp, #100]	; 0x64
    90b6:	f00d fc89 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    90ba:	defe      	udf	#254	; 0xfe
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
    90bc:	f24d 30e0 	movw	r0, #54240	; 0xd3e0
    90c0:	f2c0 0001 	movt	r0, #1
    90c4:	f24d 428c 	movw	r2, #54412	; 0xd48c
    90c8:	f2c0 0201 	movt	r2, #1
    90cc:	2121      	movs	r1, #33	; 0x21
    90ce:	f00d fc67 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    90d2:	defe      	udf	#254	; 0xfe
    90d4:	f24d 4020 	movw	r0, #54304	; 0xd420
    90d8:	f2c0 0001 	movt	r0, #1
    90dc:	f24d 429c 	movw	r2, #54428	; 0xd49c
    90e0:	f2c0 0201 	movt	r2, #1
    90e4:	211c      	movs	r1, #28
    90e6:	f00d fc5b 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    90ea:	defe      	udf	#254	; 0xfe
    90ec:	f24d 40ac 	movw	r0, #54444	; 0xd4ac
    90f0:	f2c0 0001 	movt	r0, #1
    90f4:	223f      	movs	r2, #63	; 0x3f
    90f6:	9916      	ldr	r1, [sp, #88]	; 0x58
    90f8:	f00d fc68 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    90fc:	defe      	udf	#254	; 0xfe
        data.touches[i].x  = (x_high << 8) | x_low;
    90fe:	f24d 40bc 	movw	r0, #54460	; 0xd4bc
    9102:	f2c0 0001 	movt	r0, #1
    9106:	220a      	movs	r2, #10
    9108:	991f      	ldr	r1, [sp, #124]	; 0x7c
    910a:	f00d fc5f 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    910e:	defe      	udf	#254	; 0xfe
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    9110:	f24d 30e0 	movw	r0, #54240	; 0xd3e0
    9114:	f2c0 0001 	movt	r0, #1
    9118:	f24d 42cc 	movw	r2, #54476	; 0xd4cc
    911c:	f2c0 0201 	movt	r2, #1
    9120:	2121      	movs	r1, #33	; 0x21
    9122:	f00d fc3d 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9126:	defe      	udf	#254	; 0xfe
    9128:	f24d 4020 	movw	r0, #54304	; 0xd420
    912c:	f2c0 0001 	movt	r0, #1
    9130:	f24d 42dc 	movw	r2, #54492	; 0xd4dc
    9134:	f2c0 0201 	movt	r2, #1
    9138:	211c      	movs	r1, #28
    913a:	f00d fc31 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    913e:	defe      	udf	#254	; 0xfe
    9140:	f24d 40ec 	movw	r0, #54508	; 0xd4ec
    9144:	f2c0 0001 	movt	r0, #1
    9148:	223f      	movs	r2, #63	; 0x3f
    914a:	9912      	ldr	r1, [sp, #72]	; 0x48
    914c:	f00d fc3e 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    9150:	defe      	udf	#254	; 0xfe
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
    9152:	f24d 30e0 	movw	r0, #54240	; 0xd3e0
    9156:	f2c0 0001 	movt	r0, #1
    915a:	f24d 42fc 	movw	r2, #54524	; 0xd4fc
    915e:	f2c0 0201 	movt	r2, #1
    9162:	2121      	movs	r1, #33	; 0x21
    9164:	f00d fc1c 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9168:	defe      	udf	#254	; 0xfe
    916a:	f24d 4020 	movw	r0, #54304	; 0xd420
    916e:	f2c0 0001 	movt	r0, #1
    9172:	f24d 520c 	movw	r2, #54540	; 0xd50c
    9176:	f2c0 0201 	movt	r2, #1
    917a:	211c      	movs	r1, #28
    917c:	f00d fc10 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9180:	defe      	udf	#254	; 0xfe
    9182:	f24d 501c 	movw	r0, #54556	; 0xd51c
    9186:	f2c0 0001 	movt	r0, #1
    918a:	223f      	movs	r2, #63	; 0x3f
    918c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    918e:	f00d fc1d 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    9192:	defe      	udf	#254	; 0xfe
        data.touches[i].y  = (y_high << 8) | y_low;
    9194:	f24d 502c 	movw	r0, #54572	; 0xd52c
    9198:	f2c0 0001 	movt	r0, #1
    919c:	220a      	movs	r2, #10
    919e:	991f      	ldr	r1, [sp, #124]	; 0x7c
    91a0:	f00d fc14 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    91a4:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
    91a6:	f24d 30e0 	movw	r0, #54240	; 0xd3e0
    91aa:	f2c0 0001 	movt	r0, #1
    91ae:	f24d 523c 	movw	r2, #54588	; 0xd53c
    91b2:	f2c0 0201 	movt	r2, #1
    91b6:	2121      	movs	r1, #33	; 0x21
    91b8:	f00d fbf2 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    91bc:	defe      	udf	#254	; 0xfe
    91be:	f24d 4020 	movw	r0, #54304	; 0xd420
    91c2:	f2c0 0001 	movt	r0, #1
    91c6:	f24d 524c 	movw	r2, #54604	; 0xd54c
    91ca:	f2c0 0201 	movt	r2, #1
    91ce:	211c      	movs	r1, #28
    91d0:	f00d fbe6 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    91d4:	defe      	udf	#254	; 0xfe
    91d6:	f24d 505c 	movw	r0, #54620	; 0xd55c
    91da:	f2c0 0001 	movt	r0, #1
    91de:	223f      	movs	r2, #63	; 0x3f
    91e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    91e2:	f00d fbf3 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    91e6:	defe      	udf	#254	; 0xfe
        data.touches[i].action =
    91e8:	f24d 506c 	movw	r0, #54636	; 0xd56c
    91ec:	f2c0 0001 	movt	r0, #1
    91f0:	220a      	movs	r2, #10
    91f2:	991f      	ldr	r1, [sp, #124]	; 0x7c
    91f4:	f00d fbea 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    91f8:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
    91fa:	f24d 30e0 	movw	r0, #54240	; 0xd3e0
    91fe:	f2c0 0001 	movt	r0, #1
    9202:	f24d 527c 	movw	r2, #54652	; 0xd57c
    9206:	f2c0 0201 	movt	r2, #1
    920a:	2121      	movs	r1, #33	; 0x21
    920c:	f00d fbc8 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9210:	defe      	udf	#254	; 0xfe
    9212:	f24d 4020 	movw	r0, #54304	; 0xd420
    9216:	f2c0 0001 	movt	r0, #1
    921a:	f24d 528c 	movw	r2, #54668	; 0xd58c
    921e:	f2c0 0201 	movt	r2, #1
    9222:	211c      	movs	r1, #28
    9224:	f00d fbbc 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9228:	defe      	udf	#254	; 0xfe
    922a:	f24d 509c 	movw	r0, #54684	; 0xd59c
    922e:	f2c0 0001 	movt	r0, #1
    9232:	223f      	movs	r2, #63	; 0x3f
    9234:	9908      	ldr	r1, [sp, #32]
    9236:	f00d fbc9 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    923a:	defe      	udf	#254	; 0xfe
        data.touches[i].finger =
    923c:	f24d 50ac 	movw	r0, #54700	; 0xd5ac
    9240:	f2c0 0001 	movt	r0, #1
    9244:	220a      	movs	r2, #10
    9246:	991f      	ldr	r1, [sp, #124]	; 0x7c
    9248:	f00d fbc0 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    924c:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
    924e:	f24d 30e0 	movw	r0, #54240	; 0xd3e0
    9252:	f2c0 0001 	movt	r0, #1
    9256:	f24d 52bc 	movw	r2, #54716	; 0xd5bc
    925a:	f2c0 0201 	movt	r2, #1
    925e:	2121      	movs	r1, #33	; 0x21
    9260:	f00d fb9e 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9264:	defe      	udf	#254	; 0xfe
    9266:	f24d 4020 	movw	r0, #54304	; 0xd420
    926a:	f2c0 0001 	movt	r0, #1
    926e:	f24d 52cc 	movw	r2, #54732	; 0xd5cc
    9272:	f2c0 0201 	movt	r2, #1
    9276:	211c      	movs	r1, #28
    9278:	f00d fb92 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    927c:	defe      	udf	#254	; 0xfe
    927e:	f24d 50dc 	movw	r0, #54748	; 0xd5dc
    9282:	f2c0 0001 	movt	r0, #1
    9286:	223f      	movs	r2, #63	; 0x3f
    9288:	9905      	ldr	r1, [sp, #20]
    928a:	f00d fb9f 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    928e:	defe      	udf	#254	; 0xfe
        data.touches[i].pressure =
    9290:	f24d 50ec 	movw	r0, #54764	; 0xd5ec
    9294:	f2c0 0001 	movt	r0, #1
    9298:	220a      	movs	r2, #10
    929a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    929c:	f00d fb96 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    92a0:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
    92a2:	f24d 30e0 	movw	r0, #54240	; 0xd3e0
    92a6:	f2c0 0001 	movt	r0, #1
    92aa:	f24d 52fc 	movw	r2, #54780	; 0xd5fc
    92ae:	f2c0 0201 	movt	r2, #1
    92b2:	2121      	movs	r1, #33	; 0x21
    92b4:	f00d fb74 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    92b8:	defe      	udf	#254	; 0xfe
    92ba:	f24d 4020 	movw	r0, #54304	; 0xd420
    92be:	f2c0 0001 	movt	r0, #1
    92c2:	f24d 620c 	movw	r2, #54796	; 0xd60c
    92c6:	f2c0 0201 	movt	r2, #1
    92ca:	211c      	movs	r1, #28
    92cc:	f00d fb68 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    92d0:	defe      	udf	#254	; 0xfe
    92d2:	f24d 601c 	movw	r0, #54812	; 0xd61c
    92d6:	f2c0 0001 	movt	r0, #1
    92da:	223f      	movs	r2, #63	; 0x3f
    92dc:	9902      	ldr	r1, [sp, #8]
    92de:	f00d fb75 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    92e2:	defe      	udf	#254	; 0xfe
        data.touches[i].area =
    92e4:	f24d 602c 	movw	r0, #54828	; 0xd62c
    92e8:	f2c0 0001 	movt	r0, #1
    92ec:	220a      	movs	r2, #10
    92ee:	991f      	ldr	r1, [sp, #124]	; 0x7c
    92f0:	f00d fb6c 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    92f4:	defe      	udf	#254	; 0xfe
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    92f6:	f24d 603c 	movw	r0, #54844	; 0xd63c
    92fa:	f2c0 0001 	movt	r0, #1
    92fe:	220a      	movs	r2, #10
    9300:	991f      	ldr	r1, [sp, #124]	; 0x7c
    9302:	f00d fb63 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    9306:	defe      	udf	#254	; 0xfe
    9308:	f24d 604c 	movw	r0, #54860	; 0xd64c
    930c:	f2c0 0001 	movt	r0, #1
    9310:	220a      	movs	r2, #10
    9312:	991f      	ldr	r1, [sp, #124]	; 0x7c
    9314:	f00d fb5a 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    9318:	defe      	udf	#254	; 0xfe

0000931a <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E>:

/// Event that will be forwarded to the Event Queue when a touch interrupt is triggered
static mut TOUCH_EVENT: os_event = fill_zero!(os_event);  //  Init all fields to 0 or NULL

/// Read a range of I2C registers from the I2C address `addr` (7-bit address), starting at `start_register` for count `num_registers`. Save into `buffer`.
fn read_register_range(addr: u8, start_register: u8, num_registers: u8, buffer: &mut[u8]) -> MynewtResult<()> {
    931a:	b5b0      	push	{r4, r5, r7, lr}
    931c:	b094      	sub	sp, #80	; 0x50
    931e:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
    9322:	4696      	mov	lr, r2
    9324:	460c      	mov	r4, r1
    9326:	4605      	mov	r5, r0
    9328:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
    932c:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
    9330:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
    9334:	9310      	str	r3, [sp, #64]	; 0x40
    9336:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
    933a:	4618      	mov	r0, r3
    933c:	4661      	mov	r1, ip
    933e:	930d      	str	r3, [sp, #52]	; 0x34
    9340:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    9344:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    9348:	940a      	str	r4, [sp, #40]	; 0x28
    934a:	9509      	str	r5, [sp, #36]	; 0x24
    934c:	f005 fa82 	bl	e854 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    9350:	9008      	str	r0, [sp, #32]
    9352:	e7ff      	b.n	9354 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x3a>
    9354:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9356:	b2c1      	uxtb	r1, r0
    9358:	9a08      	ldr	r2, [sp, #32]
    935a:	428a      	cmp	r2, r1
    935c:	d30d      	bcc.n	937a <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x60>
    935e:	e7ff      	b.n	9360 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x46>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    9360:	980a      	ldr	r0, [sp, #40]	; 0x28
    9362:	b2c1      	uxtb	r1, r0
    9364:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9366:	fa51 f182 	uxtab	r1, r1, r2
    936a:	b2cb      	uxtb	r3, r1
    936c:	468c      	mov	ip, r1
    936e:	428b      	cmp	r3, r1
    9370:	f8cd c01c 	str.w	ip, [sp, #28]
    9374:	f040 8092 	bne.w	949c <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x182>
    9378:	e00b      	b.n	9392 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x78>
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
    937a:	f24d 605c 	movw	r0, #54876	; 0xd65c
    937e:	f2c0 0001 	movt	r0, #1
    9382:	f24d 6264 	movw	r2, #54884	; 0xd664
    9386:	f2c0 0201 	movt	r2, #1
    938a:	2107      	movs	r1, #7
    938c:	f00d fb08 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9390:	defe      	udf	#254	; 0xfe
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    9392:	9807      	ldr	r0, [sp, #28]
    9394:	b241      	sxtb	r1, r0
    9396:	2900      	cmp	r1, #0
    9398:	d411      	bmi.n	93be <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0xa4>
    939a:	e7ff      	b.n	939c <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x82>
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Write Mode (1 bit, value 0)...
    //    Followed by starting Register Number (8 bits)
    unsafe { 
        I2C_BUFFER[0] = start_register;  //  I2C Packet buffer contains starting Register Number (1 byte)
    939c:	f240 10f8 	movw	r0, #504	; 0x1f8
    93a0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    93a4:	990a      	ldr	r1, [sp, #40]	; 0x28
    93a6:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;         //  I2C Packet address (7 bits)
    93a8:	f240 12f0 	movw	r2, #496	; 0x1f0
    93ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
    93b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    93b2:	7013      	strb	r3, [r2, #0]
    93b4:	2101      	movs	r1, #1
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
    93b6:	f005 fa4d 	bl	e854 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    93ba:	9006      	str	r0, [sp, #24]
    93bc:	e00b      	b.n	93d6 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0xbc>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    93be:	f24d 3060 	movw	r0, #54112	; 0xd360
    93c2:	f2c0 0001 	movt	r0, #1
    93c6:	f24d 6284 	movw	r2, #54916	; 0xd684
    93ca:	f2c0 0201 	movt	r2, #1
    93ce:	2108      	movs	r1, #8
    93d0:	f00d fae6 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    93d4:	defe      	udf	#254	; 0xfe
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
    93d6:	f240 10f0 	movw	r0, #496	; 0x1f0
    93da:	f2c2 0000 	movt	r0, #8192	; 0x2000
    93de:	9906      	ldr	r1, [sp, #24]
    93e0:	8041      	strh	r1, [r0, #2]
        I2C_DATA.buffer = I2C_BUFFER.as_mut_ptr();  //  I2C Packet data points to packet buffer
    93e2:	f240 10f8 	movw	r0, #504	; 0x1f8
    93e6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    93ea:	2101      	movs	r1, #1
    93ec:	f005 fa1b 	bl	e826 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    93f0:	9005      	str	r0, [sp, #20]
    93f2:	e7ff      	b.n	93f4 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0xda>
    93f4:	f240 10f0 	movw	r0, #496	; 0x1f0
    93f8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    93fc:	9905      	ldr	r1, [sp, #20]
    93fe:	6041      	str	r1, [r0, #4]
    9400:	2201      	movs	r2, #1
    9402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    9406:	f04f 0c00 	mov.w	ip, #0
    };
    let _rc1 = unsafe { hal::hal_i2c_master_write(1, &mut I2C_DATA, 1000, 0) };  //  No stop yet, must continue even if we hit an error
    940a:	9004      	str	r0, [sp, #16]
    940c:	4610      	mov	r0, r2
    940e:	9904      	ldr	r1, [sp, #16]
    9410:	461a      	mov	r2, r3
    9412:	4663      	mov	r3, ip
    9414:	f00f fdb2 	bl	18f7c <hal_i2c_master_write>
    9418:	9012      	str	r0, [sp, #72]	; 0x48
    941a:	e7ff      	b.n	941c <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x102>
    //  Step 3: Prepare to receive the stream of I2C Device Register values...
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Read Mode (1 bit, value 1)
    unsafe { 
        I2C_BUFFER[0] = 0x00;     //  I2C Packet buffer should be empty (provided by caller)
    941c:	f240 10f8 	movw	r0, #504	; 0x1f8
    9420:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9424:	2100      	movs	r1, #0
    9426:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;  //  I2C Packet address (7 bits)
    9428:	f240 10f0 	movw	r0, #496	; 0x1f0
    942c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9430:	9909      	ldr	r1, [sp, #36]	; 0x24
    9432:	7001      	strb	r1, [r0, #0]
        I2C_DATA.len = num_registers as u16;    //  I2C Packet data size is number of Registers to read
    9434:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9436:	b2d3      	uxtb	r3, r2
    9438:	8043      	strh	r3, [r0, #2]
        I2C_DATA.buffer = buffer.as_mut_ptr();  //  I2C Packet data points to packet buffer
    943a:	980d      	ldr	r0, [sp, #52]	; 0x34
    943c:	990c      	ldr	r1, [sp, #48]	; 0x30
    943e:	f005 f9f2 	bl	e826 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    9442:	9003      	str	r0, [sp, #12]
    9444:	e7ff      	b.n	9446 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x12c>
    9446:	f240 10f0 	movw	r0, #496	; 0x1f0
    944a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    944e:	9903      	ldr	r1, [sp, #12]
    9450:	6041      	str	r1, [r0, #4]
    9452:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9456:	2301      	movs	r3, #1
    };
    //  Step 4: Receive the requested number of Register values from I2C Device (1 byte per register)
    //  Step 5: Send the Stop Condition (Low to High SDA Transition)
    let rc2 = unsafe { hal::hal_i2c_master_read(1, &mut I2C_DATA, 1000, 1) };
    9458:	9002      	str	r0, [sp, #8]
    945a:	4618      	mov	r0, r3
    945c:	9902      	ldr	r1, [sp, #8]
    945e:	f00f fe21 	bl	190a4 <hal_i2c_master_read>
    9462:	4601      	mov	r1, r0
    9464:	9013      	str	r0, [sp, #76]	; 0x4c
    9466:	9101      	str	r1, [sp, #4]
    9468:	e7ff      	b.n	946a <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x150>
    if rc2 == hal::HAL_I2C_ERR_ADDR_NACK as i32 {
    946a:	9801      	ldr	r0, [sp, #4]
    946c:	2804      	cmp	r0, #4
    946e:	d005      	beq.n	947c <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x162>
    9470:	e7ff      	b.n	9472 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x158>
    9472:	2000      	movs	r0, #0
        ////assert!(false, "i2c fail");  //  I2C read failed
        console::print("i2c fail\n"); ////
        return Ok(());               //  TODO: Return an error
    }
    Ok(())
    9474:	900e      	str	r0, [sp, #56]	; 0x38
    9476:	2001      	movs	r0, #1
    9478:	900e      	str	r0, [sp, #56]	; 0x38
}
    947a:	e00c      	b.n	9496 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x17c>
        console::print("i2c fail\n"); ////
    947c:	f24d 6094 	movw	r0, #54932	; 0xd694
    9480:	f2c0 0001 	movt	r0, #1
    9484:	2109      	movs	r1, #9
    9486:	f006 f8f0 	bl	f66a <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    948a:	e7ff      	b.n	948c <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x172>
    948c:	2000      	movs	r0, #0
        return Ok(());               //  TODO: Return an error
    948e:	900e      	str	r0, [sp, #56]	; 0x38
    9490:	2001      	movs	r0, #1
    9492:	900e      	str	r0, [sp, #56]	; 0x38
    9494:	e7ff      	b.n	9496 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x17c>
}
    9496:	980e      	ldr	r0, [sp, #56]	; 0x38
    9498:	b014      	add	sp, #80	; 0x50
    949a:	bdb0      	pop	{r4, r5, r7, pc}
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    949c:	f24d 4020 	movw	r0, #54304	; 0xd420
    94a0:	f2c0 0001 	movt	r0, #1
    94a4:	f24d 6274 	movw	r2, #54900	; 0xd674
    94a8:	f2c0 0201 	movt	r2, #1
    94ac:	211c      	movs	r1, #28
    94ae:	f00d fa77 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    94b2:	defe      	udf	#254	; 0xfe

000094b4 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E>:
    sys::console,
    kernel::os,
};

/// Render some graphics and text to the PineTime display. `start_display()` must have been called earlier.
pub fn on_start() -> MynewtResult<()> {
    94b4:	b570      	push	{r4, r5, r6, lr}
    94b6:	f5ad 5d04 	sub.w	sp, sp, #8448	; 0x2100
    94ba:	b084      	sub	sp, #16
    console::print("Rust CHIP8\n"); console::flush();
    94bc:	f24d 609d 	movw	r0, #54941	; 0xd69d
    94c0:	f2c0 0001 	movt	r0, #1
    94c4:	210b      	movs	r1, #11
    94c6:	f006 f8d0 	bl	f66a <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    94ca:	e7ff      	b.n	94cc <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x18>
    94cc:	f006 f913 	bl	f6f6 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    94d0:	e7ff      	b.n	94d2 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x1e>
    94d2:	2000      	movs	r0, #0
    
    //  Create black background
    let background = Rectangle::<Rgb565>
        ::new( Coord::new( 0, 0 ), Coord::new( 239, 239 ) )   //  Rectangle coordinates
    94d4:	9008      	str	r0, [sp, #32]
    94d6:	9908      	ldr	r1, [sp, #32]
    94d8:	f004 fee3 	bl	e2a2 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    94dc:	9007      	str	r0, [sp, #28]
    94de:	9106      	str	r1, [sp, #24]
    94e0:	e7ff      	b.n	94e2 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x2e>
    94e2:	20ef      	movs	r0, #239	; 0xef
    94e4:	9005      	str	r0, [sp, #20]
    94e6:	9905      	ldr	r1, [sp, #20]
    94e8:	f004 fedb 	bl	e2a2 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    94ec:	9004      	str	r0, [sp, #16]
    94ee:	9103      	str	r1, [sp, #12]
    94f0:	e7ff      	b.n	94f2 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x3e>
    let background = Rectangle::<Rgb565>
    94f2:	4668      	mov	r0, sp
    94f4:	9903      	ldr	r1, [sp, #12]
    94f6:	6001      	str	r1, [r0, #0]
    94f8:	a810      	add	r0, sp, #64	; 0x40
    94fa:	9907      	ldr	r1, [sp, #28]
    94fc:	9a06      	ldr	r2, [sp, #24]
    94fe:	9b04      	ldr	r3, [sp, #16]
    9500:	f008 ff4a 	bl	12398 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>
    9504:	e7ff      	b.n	9506 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x52>
    9506:	2000      	movs	r0, #0
        .fill( Some( Rgb565::from(( 0x00, 0x00, 0x00 )) ) );  //  Black
    9508:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    950c:	f88d 0061 	strb.w	r0, [sp, #97]	; 0x61
    9510:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
    9514:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
    9518:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
    951c:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    9520:	f004 ff3a 	bl	e398 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    9524:	9002      	str	r0, [sp, #8]
    9526:	e7ff      	b.n	9528 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x74>
    9528:	9802      	ldr	r0, [sp, #8]
    952a:	f8ad 005e 	strh.w	r0, [sp, #94]	; 0x5e
    952e:	2101      	movs	r1, #1
    9530:	f8ad 105c 	strh.w	r1, [sp, #92]	; 0x5c
    let background = Rectangle::<Rgb565>
    9534:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
    9538:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
    953c:	a809      	add	r0, sp, #36	; 0x24
    953e:	a910      	add	r1, sp, #64	; 0x40
    9540:	f008 fbc0 	bl	11cc4 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>
    9544:	e7ff      	b.n	9546 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x92>
    9546:	a809      	add	r0, sp, #36	; 0x24
    9548:	a919      	add	r1, sp, #100	; 0x64


    //  Render background to display
    druid::draw_to_display(background);
    954a:	460a      	mov	r2, r1
    954c:	e8b0 5008 	ldmia.w	r0!, {r3, ip, lr}
    9550:	e8a2 5008 	stmia.w	r2!, {r3, ip, lr}
    9554:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
    9558:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
    955c:	4608      	mov	r0, r1
    955e:	f006 fd82 	bl	10066 <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E>
    9562:	e7ff      	b.n	9564 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0xb0>
    9564:	a820      	add	r0, sp, #128	; 0x80

    //  Start the emulator
    let chip8 = libchip8::Chip8::new(Hardware);
    9566:	f000 fa5d 	bl	9a24 <_ZN8libchip814Chip8$LT$T$GT$3new17hd62b2f9fc0ffdda2E>
    956a:	e7ff      	b.n	956c <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0xb8>
    956c:	f10d 0e08 	add.w	lr, sp, #8
    9570:	f50e 5086 	add.w	r0, lr, #4288	; 0x10c0
    9574:	a920      	add	r1, sp, #128	; 0x80
    9576:	f241 0248 	movw	r2, #4168	; 0x1048
    chip8.run(include_bytes!("../roms/invaders.ch8"));
    957a:	9001      	str	r0, [sp, #4]
    957c:	f013 fde4 	bl	1d148 <__aeabi_memcpy>
    9580:	f24d 61a8 	movw	r1, #54952	; 0xd6a8
    9584:	f2c0 0101 	movt	r1, #1
    9588:	f240 5215 	movw	r2, #1301	; 0x515
    958c:	9801      	ldr	r0, [sp, #4]
    958e:	f000 fadd 	bl	9b4c <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E>
    9592:	e7ff      	b.n	9594 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0xe0>
    9594:	2001      	movs	r0, #1

    //  Return success to the caller
    Ok(())
}
    9596:	f50d 5d04 	add.w	sp, sp, #8448	; 0x2100
    959a:	b004      	add	sp, #16
    959c:	bd70      	pop	{r4, r5, r6, pc}

0000959e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17h6cf7f1058fcc9245E>:
static mut SCREEN_BUFFER: [u8; SCREEN_WIDTH * SCREEN_HEIGHT] = [0; SCREEN_WIDTH * SCREEN_HEIGHT];

struct Hardware;

impl libchip8::Hardware for Hardware {
    fn rand(&mut self) -> u8 {
    959e:	b081      	sub	sp, #4
    95a0:	9000      	str	r0, [sp, #0]
    95a2:	207b      	movs	r0, #123	; 0x7b
        //  Return a random value.
        123  //  TODO
        //  self.rng.gen()
    }
    95a4:	b001      	add	sp, #4
    95a6:	4770      	bx	lr

000095a8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hb8a7325968dc9595E>:

    fn key(&mut self, _key: u8) -> bool {
    95a8:	b082      	sub	sp, #8
    95aa:	460a      	mov	r2, r1
    95ac:	9000      	str	r0, [sp, #0]
    95ae:	f88d 1007 	strb.w	r1, [sp, #7]
    95b2:	2000      	movs	r0, #0
        match &self.win {
            Some(win) => win.is_key_down(k),
            None => false,
        }
        */
    }
    95b4:	b002      	add	sp, #8
    95b6:	4770      	bx	lr

000095b8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E>:

    fn vram_set(&mut self, x: usize, y: usize, d: bool) {
    95b8:	b510      	push	{r4, lr}
    95ba:	b0b0      	sub	sp, #192	; 0xc0
    95bc:	469c      	mov	ip, r3
    95be:	9029      	str	r0, [sp, #164]	; 0xa4
    95c0:	912a      	str	r1, [sp, #168]	; 0xa8
    95c2:	922b      	str	r2, [sp, #172]	; 0xac
    95c4:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
        //  Set the state of a pixel in the screen.
        //  true for white, and false for black.
        let i = x + y * SCREEN_WIDTH;
    95c8:	0190      	lsls	r0, r2, #6
    95ca:	0e93      	lsrs	r3, r2, #26
    95cc:	2b00      	cmp	r3, #0
    95ce:	920f      	str	r2, [sp, #60]	; 0x3c
    95d0:	910e      	str	r1, [sp, #56]	; 0x38
    95d2:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    95d6:	900c      	str	r0, [sp, #48]	; 0x30
    95d8:	f040 80cb 	bne.w	9772 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x1ba>
    95dc:	e7ff      	b.n	95de <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x26>
    95de:	980e      	ldr	r0, [sp, #56]	; 0x38
    95e0:	990c      	ldr	r1, [sp, #48]	; 0x30
    95e2:	1842      	adds	r2, r0, r1
    95e4:	4613      	mov	r3, r2
    95e6:	4282      	cmp	r2, r0
    95e8:	930b      	str	r3, [sp, #44]	; 0x2c
    95ea:	f0c0 80ce 	bcc.w	978a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x1d2>
    95ee:	e7ff      	b.n	95f0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x38>
    95f0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    95f2:	902d      	str	r0, [sp, #180]	; 0xb4
        unsafe { SCREEN_BUFFER[i] = if d { 1 } else { 0 } };
    95f4:	990d      	ldr	r1, [sp, #52]	; 0x34
    95f6:	07ca      	lsls	r2, r1, #31
    95f8:	2a00      	cmp	r2, #0
    95fa:	d104      	bne.n	9606 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x4e>
    95fc:	e7ff      	b.n	95fe <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x46>
    95fe:	2000      	movs	r0, #0
    9600:	f88d 0041 	strb.w	r0, [sp, #65]	; 0x41
    9604:	e003      	b.n	960e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x56>
    9606:	2001      	movs	r0, #1
    9608:	f88d 0041 	strb.w	r0, [sp, #65]	; 0x41
    960c:	e7ff      	b.n	960e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x56>
    960e:	2000      	movs	r0, #0
    9610:	990b      	ldr	r1, [sp, #44]	; 0x2c
    9612:	ebb0 2fd1 	cmp.w	r0, r1, lsr #11
    9616:	f040 80c4 	bne.w	97a2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x1ea>
    961a:	e7ff      	b.n	961c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x64>
    961c:	f240 10f9 	movw	r0, #505	; 0x1f9
    9620:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9624:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
    9628:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    962a:	5481      	strb	r1, [r0, r2]
    962c:	2003      	movs	r0, #3
        let x_scaled: i32 = x as i32 * PIXEL_SIZE;
    962e:	990e      	ldr	r1, [sp, #56]	; 0x38
    9630:	fb81 0300 	smull	r0, r3, r1, r0
    9634:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
    9638:	ebb3 7fe0 	cmp.w	r3, r0, asr #31
    963c:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    9640:	f040 80b9 	bne.w	97b6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x1fe>
    9644:	e7ff      	b.n	9646 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x8e>
    9646:	980a      	ldr	r0, [sp, #40]	; 0x28
    9648:	902e      	str	r0, [sp, #184]	; 0xb8
    964a:	2103      	movs	r1, #3
        let y_scaled: i32 = y as i32 * PIXEL_SIZE; 
    964c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    964e:	fb82 1301 	smull	r1, r3, r2, r1
    9652:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
    9656:	ebb3 7fe1 	cmp.w	r3, r1, asr #31
    965a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    965e:	f040 80b6 	bne.w	97ce <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x216>
    9662:	e7ff      	b.n	9664 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0xac>
    9664:	9809      	ldr	r0, [sp, #36]	; 0x24
    9666:	902f      	str	r0, [sp, #188]	; 0xbc
        let color = if d { Rgb565::from(( 0x00, 0x00, 0xff )) } else { Rgb565::from(( 0x00, 0x00, 0x00 )) };
    9668:	990d      	ldr	r1, [sp, #52]	; 0x34
    966a:	07ca      	lsls	r2, r1, #31
    966c:	2a00      	cmp	r2, #0
    966e:	d112      	bne.n	9696 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0xde>
    9670:	e7ff      	b.n	9672 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0xba>
    9672:	2000      	movs	r0, #0
    9674:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
    9678:	f88d 0049 	strb.w	r0, [sp, #73]	; 0x49
    967c:	f88d 004a 	strb.w	r0, [sp, #74]	; 0x4a
    9680:	f89d 004a 	ldrb.w	r0, [sp, #74]	; 0x4a
    9684:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
    9688:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    968c:	f004 fe84 	bl	e398 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    9690:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    9694:	e013      	b.n	96be <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x106>
    9696:	2000      	movs	r0, #0
    9698:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    969c:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
    96a0:	20ff      	movs	r0, #255	; 0xff
    96a2:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    96a6:	f89d 0046 	ldrb.w	r0, [sp, #70]	; 0x46
    96aa:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
    96ae:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    96b2:	f004 fe71 	bl	e398 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    96b6:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    96ba:	e7ff      	b.n	96bc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x104>
    96bc:	e000      	b.n	96c0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x108>
    96be:	e7ff      	b.n	96c0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x108>
        let pixel = Rectangle::<Rgb565>
            ::new( Coord::new( x_scaled, y_scaled ), Coord::new( x_scaled + PIXEL_SIZE - 1, y_scaled + PIXEL_SIZE - 1 ) ) //  Square coordinates
    96c0:	980a      	ldr	r0, [sp, #40]	; 0x28
    96c2:	9909      	ldr	r1, [sp, #36]	; 0x24
    96c4:	f004 fded 	bl	e2a2 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    96c8:	9008      	str	r0, [sp, #32]
    96ca:	9107      	str	r1, [sp, #28]
    96cc:	e7ff      	b.n	96ce <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x116>
    96ce:	980a      	ldr	r0, [sp, #40]	; 0x28
    96d0:	1cc1      	adds	r1, r0, #3
    96d2:	460a      	mov	r2, r1
    96d4:	4281      	cmp	r1, r0
    96d6:	9206      	str	r2, [sp, #24]
    96d8:	f180 8085 	bvs.w	97e6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x22e>
    96dc:	e7ff      	b.n	96de <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x126>
    96de:	9806      	ldr	r0, [sp, #24]
    96e0:	1e41      	subs	r1, r0, #1
    96e2:	460a      	mov	r2, r1
    96e4:	4281      	cmp	r1, r0
    96e6:	9205      	str	r2, [sp, #20]
    96e8:	f180 8089 	bvs.w	97fe <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x246>
    96ec:	e7ff      	b.n	96ee <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x136>
    96ee:	9809      	ldr	r0, [sp, #36]	; 0x24
    96f0:	1cc1      	adds	r1, r0, #3
    96f2:	460a      	mov	r2, r1
    96f4:	4281      	cmp	r1, r0
    96f6:	9204      	str	r2, [sp, #16]
    96f8:	f180 808d 	bvs.w	9816 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x25e>
    96fc:	e7ff      	b.n	96fe <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x146>
    96fe:	9804      	ldr	r0, [sp, #16]
    9700:	1e41      	subs	r1, r0, #1
    9702:	460a      	mov	r2, r1
    9704:	4281      	cmp	r1, r0
    9706:	9203      	str	r2, [sp, #12]
    9708:	f180 8091 	bvs.w	982e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x276>
    970c:	e7ff      	b.n	970e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x156>
    970e:	9805      	ldr	r0, [sp, #20]
    9710:	9903      	ldr	r1, [sp, #12]
    9712:	f004 fdc6 	bl	e2a2 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    9716:	9002      	str	r0, [sp, #8]
    9718:	9101      	str	r1, [sp, #4]
    971a:	e7ff      	b.n	971c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x164>
        let pixel = Rectangle::<Rgb565>
    971c:	4668      	mov	r0, sp
    971e:	9901      	ldr	r1, [sp, #4]
    9720:	6001      	str	r1, [r0, #0]
    9722:	a81a      	add	r0, sp, #104	; 0x68
    9724:	9908      	ldr	r1, [sp, #32]
    9726:	9a07      	ldr	r2, [sp, #28]
    9728:	9b02      	ldr	r3, [sp, #8]
    972a:	f008 fe35 	bl	12398 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>
    972e:	e7ff      	b.n	9730 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x178>
            .fill( Some( color ) );
    9730:	f8bd 0042 	ldrh.w	r0, [sp, #66]	; 0x42
    9734:	f8ad 0086 	strh.w	r0, [sp, #134]	; 0x86
    9738:	2001      	movs	r0, #1
    973a:	f8ad 0084 	strh.w	r0, [sp, #132]	; 0x84
        let pixel = Rectangle::<Rgb565>
    973e:	f8bd 3086 	ldrh.w	r3, [sp, #134]	; 0x86
    9742:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
    9746:	a813      	add	r0, sp, #76	; 0x4c
    9748:	a91a      	add	r1, sp, #104	; 0x68
    974a:	f008 fabb 	bl	11cc4 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>
    974e:	e7ff      	b.n	9750 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x198>
    9750:	a813      	add	r0, sp, #76	; 0x4c
    9752:	a922      	add	r1, sp, #136	; 0x88
        druid::draw_to_display(pixel);
    9754:	460a      	mov	r2, r1
    9756:	e8b0 5008 	ldmia.w	r0!, {r3, ip, lr}
    975a:	e8a2 5008 	stmia.w	r2!, {r3, ip, lr}
    975e:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
    9762:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
    9766:	4608      	mov	r0, r1
    9768:	f006 fc7d 	bl	10066 <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E>
    976c:	e7ff      	b.n	976e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x1b6>

        //  trace!("Set pixel ({},{})", x, y);
        //  self.vram[(y * self.vramsz.0) + x] = d;
    }
    976e:	b030      	add	sp, #192	; 0xc0
    9770:	bd10      	pop	{r4, pc}
        let i = x + y * SCREEN_WIDTH;
    9772:	f64d 30f0 	movw	r0, #56304	; 0xdbf0
    9776:	f2c0 0001 	movt	r0, #1
    977a:	f64d 32d4 	movw	r2, #56276	; 0xdbd4
    977e:	f2c0 0201 	movt	r2, #1
    9782:	2121      	movs	r1, #33	; 0x21
    9784:	f00d f90c 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9788:	defe      	udf	#254	; 0xfe
    978a:	f64d 4030 	movw	r0, #56368	; 0xdc30
    978e:	f2c0 0001 	movt	r0, #1
    9792:	f64d 4214 	movw	r2, #56340	; 0xdc14
    9796:	f2c0 0201 	movt	r2, #1
    979a:	211c      	movs	r1, #28
    979c:	f00d f900 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    97a0:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] = if d { 1 } else { 0 } };
    97a2:	f64d 404c 	movw	r0, #56396	; 0xdc4c
    97a6:	f2c0 0001 	movt	r0, #1
    97aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
    97ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
    97b0:	f00d f90c 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    97b4:	defe      	udf	#254	; 0xfe
        let x_scaled: i32 = x as i32 * PIXEL_SIZE;
    97b6:	f64d 30f0 	movw	r0, #56304	; 0xdbf0
    97ba:	f2c0 0001 	movt	r0, #1
    97be:	f64d 425c 	movw	r2, #56412	; 0xdc5c
    97c2:	f2c0 0201 	movt	r2, #1
    97c6:	2121      	movs	r1, #33	; 0x21
    97c8:	f00d f8ea 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    97cc:	defe      	udf	#254	; 0xfe
        let y_scaled: i32 = y as i32 * PIXEL_SIZE; 
    97ce:	f64d 30f0 	movw	r0, #56304	; 0xdbf0
    97d2:	f2c0 0001 	movt	r0, #1
    97d6:	f64d 426c 	movw	r2, #56428	; 0xdc6c
    97da:	f2c0 0201 	movt	r2, #1
    97de:	2121      	movs	r1, #33	; 0x21
    97e0:	f00d f8de 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    97e4:	defe      	udf	#254	; 0xfe
            ::new( Coord::new( x_scaled, y_scaled ), Coord::new( x_scaled + PIXEL_SIZE - 1, y_scaled + PIXEL_SIZE - 1 ) ) //  Square coordinates
    97e6:	f64d 4030 	movw	r0, #56368	; 0xdc30
    97ea:	f2c0 0001 	movt	r0, #1
    97ee:	f64d 427c 	movw	r2, #56444	; 0xdc7c
    97f2:	f2c0 0201 	movt	r2, #1
    97f6:	211c      	movs	r1, #28
    97f8:	f00d f8d2 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    97fc:	defe      	udf	#254	; 0xfe
    97fe:	f64d 4090 	movw	r0, #56464	; 0xdc90
    9802:	f2c0 0001 	movt	r0, #1
    9806:	f64d 427c 	movw	r2, #56444	; 0xdc7c
    980a:	f2c0 0201 	movt	r2, #1
    980e:	2121      	movs	r1, #33	; 0x21
    9810:	f00d f8c6 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9814:	defe      	udf	#254	; 0xfe
    9816:	f64d 4030 	movw	r0, #56368	; 0xdc30
    981a:	f2c0 0001 	movt	r0, #1
    981e:	f64d 42b4 	movw	r2, #56500	; 0xdcb4
    9822:	f2c0 0201 	movt	r2, #1
    9826:	211c      	movs	r1, #28
    9828:	f00d f8ba 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    982c:	defe      	udf	#254	; 0xfe
    982e:	f64d 4090 	movw	r0, #56464	; 0xdc90
    9832:	f2c0 0001 	movt	r0, #1
    9836:	f64d 42b4 	movw	r2, #56500	; 0xdcb4
    983a:	f2c0 0201 	movt	r2, #1
    983e:	2121      	movs	r1, #33	; 0x21
    9840:	f00d f8ae 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9844:	defe      	udf	#254	; 0xfe

00009846 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE>:

    fn vram_get(&mut self, x: usize, y: usize) -> bool {
    9846:	b088      	sub	sp, #32
    9848:	9004      	str	r0, [sp, #16]
    984a:	9105      	str	r1, [sp, #20]
    984c:	9206      	str	r2, [sp, #24]
        //  Get the current state of a pixel in the screen.
        let i = x + y * SCREEN_WIDTH;
    984e:	0190      	lsls	r0, r2, #6
    9850:	0e92      	lsrs	r2, r2, #26
    9852:	2a00      	cmp	r2, #0
    9854:	9103      	str	r1, [sp, #12]
    9856:	9002      	str	r0, [sp, #8]
    9858:	d11a      	bne.n	9890 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE+0x4a>
    985a:	e7ff      	b.n	985c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE+0x16>
    985c:	9803      	ldr	r0, [sp, #12]
    985e:	9902      	ldr	r1, [sp, #8]
    9860:	1842      	adds	r2, r0, r1
    9862:	4613      	mov	r3, r2
    9864:	4282      	cmp	r2, r0
    9866:	9301      	str	r3, [sp, #4]
    9868:	d31e      	bcc.n	98a8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE+0x62>
    986a:	e7ff      	b.n	986c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE+0x26>
    986c:	9801      	ldr	r0, [sp, #4]
    986e:	9007      	str	r0, [sp, #28]
    9870:	2100      	movs	r1, #0
        unsafe { SCREEN_BUFFER[i] != 0 }
    9872:	ebb1 2fd0 	cmp.w	r1, r0, lsr #11
    9876:	d123      	bne.n	98c0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE+0x7a>
    9878:	e7ff      	b.n	987a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE+0x34>
    987a:	f240 10f9 	movw	r0, #505	; 0x1f9
    987e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9882:	9901      	ldr	r1, [sp, #4]
    9884:	5c40      	ldrb	r0, [r0, r1]
    9886:	2800      	cmp	r0, #0
    9888:	bf18      	it	ne
    988a:	2001      	movne	r0, #1
        //  self.vram[(y * self.vramsz.0) + x]
    }
    988c:	b008      	add	sp, #32
    988e:	4770      	bx	lr
        let i = x + y * SCREEN_WIDTH;
    9890:	f64d 30f0 	movw	r0, #56304	; 0xdbf0
    9894:	f2c0 0001 	movt	r0, #1
    9898:	f64d 42c4 	movw	r2, #56516	; 0xdcc4
    989c:	f2c0 0201 	movt	r2, #1
    98a0:	2121      	movs	r1, #33	; 0x21
    98a2:	f00d f87d 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    98a6:	defe      	udf	#254	; 0xfe
    98a8:	f64d 4030 	movw	r0, #56368	; 0xdc30
    98ac:	f2c0 0001 	movt	r0, #1
    98b0:	f64d 42d4 	movw	r2, #56532	; 0xdcd4
    98b4:	f2c0 0201 	movt	r2, #1
    98b8:	211c      	movs	r1, #28
    98ba:	f00d f871 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    98be:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] != 0 }
    98c0:	f64d 40e4 	movw	r0, #56548	; 0xdce4
    98c4:	f2c0 0001 	movt	r0, #1
    98c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    98cc:	9901      	ldr	r1, [sp, #4]
    98ce:	f00d f87d 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    98d2:	defe      	udf	#254	; 0xfe

000098d4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc15bb8a8dbf2b592E>:

    fn vram_setsize(&mut self, _size: (usize, usize)) {
    98d4:	b083      	sub	sp, #12
    98d6:	9000      	str	r0, [sp, #0]
    98d8:	9101      	str	r1, [sp, #4]
    98da:	9202      	str	r2, [sp, #8]
                panic!("Unable to create window {}", err);
            }
        };
        self.win = Some(win);
        */
    }
    98dc:	b003      	add	sp, #12
    98de:	4770      	bx	lr

000098e0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hd317927185b0114cE>:

    fn vram_size(&mut self) -> (usize, usize) {
    98e0:	b083      	sub	sp, #12
    98e2:	9002      	str	r0, [sp, #8]
    98e4:	2040      	movs	r0, #64	; 0x40
        //  Get the size of the screen.
        (SCREEN_WIDTH, SCREEN_HEIGHT)
    98e6:	9000      	str	r0, [sp, #0]
    98e8:	2020      	movs	r0, #32
    98ea:	9001      	str	r0, [sp, #4]
        //  self.vramsz
    }
    98ec:	9800      	ldr	r0, [sp, #0]
    98ee:	9901      	ldr	r1, [sp, #4]
    98f0:	b003      	add	sp, #12
    98f2:	4770      	bx	lr

000098f4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E>:

    fn clock(&mut self) -> u64 {
    98f4:	b5b0      	push	{r4, r5, r7, lr}
    98f6:	b086      	sub	sp, #24
    98f8:	9005      	str	r0, [sp, #20]
        //  Return the current clock value in nanoseconds.
        os::os_time_get as u64 * 1000_u64 * 1000_u64
    98fa:	f64a 406d 	movw	r0, #44141	; 0xac6d
    98fe:	f2c0 0001 	movt	r0, #1
    9902:	2100      	movs	r1, #0
    9904:	fba1 2300 	umull	r2, r3, r1, r0
    9908:	2b00      	cmp	r3, #0
    990a:	bf18      	it	ne
    990c:	2301      	movne	r3, #1
    990e:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    9912:	fba1 e40c 	umull	lr, r4, r1, ip
    9916:	2c00      	cmp	r4, #0
    9918:	bf18      	it	ne
    991a:	2401      	movne	r4, #1
    991c:	ea43 0304 	orr.w	r3, r3, r4
    9920:	4472      	add	r2, lr
    9922:	fba0 0c0c 	umull	r0, ip, r0, ip
    9926:	eb12 020c 	adds.w	r2, r2, ip
    992a:	f141 0100 	adc.w	r1, r1, #0
    992e:	ea41 0103 	orr.w	r1, r1, r3
    9932:	2900      	cmp	r1, #0
    9934:	9004      	str	r0, [sp, #16]
    9936:	9203      	str	r2, [sp, #12]
    9938:	d124      	bne.n	9984 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E+0x90>
    993a:	e7ff      	b.n	993c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E+0x48>
    993c:	2000      	movs	r0, #0
    993e:	9904      	ldr	r1, [sp, #16]
    9940:	fba0 2301 	umull	r2, r3, r0, r1
    9944:	2b00      	cmp	r3, #0
    9946:	bf18      	it	ne
    9948:	2301      	movne	r3, #1
    994a:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    994e:	f8dd e00c 	ldr.w	lr, [sp, #12]
    9952:	fbae 450c 	umull	r4, r5, lr, ip
    9956:	2d00      	cmp	r5, #0
    9958:	bf18      	it	ne
    995a:	2501      	movne	r5, #1
    995c:	ea43 0305 	orr.w	r3, r3, r5
    9960:	4422      	add	r2, r4
    9962:	fba1 c40c 	umull	ip, r4, r1, ip
    9966:	1912      	adds	r2, r2, r4
    9968:	f140 0000 	adc.w	r0, r0, #0
    996c:	ea40 0003 	orr.w	r0, r0, r3
    9970:	2800      	cmp	r0, #0
    9972:	f8cd c008 	str.w	ip, [sp, #8]
    9976:	9201      	str	r2, [sp, #4]
    9978:	d110      	bne.n	999c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E+0xa8>
    997a:	e7ff      	b.n	997c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E+0x88>
        let d = self.inst.elapsed();
        d.as_secs()
            .wrapping_mul(1000_000_000)
            .wrapping_add(d.subsec_nanos().into())
        */
    }
    997c:	9802      	ldr	r0, [sp, #8]
    997e:	9901      	ldr	r1, [sp, #4]
    9980:	b006      	add	sp, #24
    9982:	bdb0      	pop	{r4, r5, r7, pc}
        os::os_time_get as u64 * 1000_u64 * 1000_u64
    9984:	f64d 30f0 	movw	r0, #56304	; 0xdbf0
    9988:	f2c0 0001 	movt	r0, #1
    998c:	f64d 42f4 	movw	r2, #56564	; 0xdcf4
    9990:	f2c0 0201 	movt	r2, #1
    9994:	2121      	movs	r1, #33	; 0x21
    9996:	f00d f803 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    999a:	defe      	udf	#254	; 0xfe
    999c:	f64d 30f0 	movw	r0, #56304	; 0xdbf0
    99a0:	f2c0 0001 	movt	r0, #1
    99a4:	f64d 42f4 	movw	r2, #56564	; 0xdcf4
    99a8:	f2c0 0201 	movt	r2, #1
    99ac:	2121      	movs	r1, #33	; 0x21
    99ae:	f00c fff7 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    99b2:	defe      	udf	#254	; 0xfe

000099b4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17ha45cfdbdf4731cedE>:

    fn beep(&mut self) {
    99b4:	b081      	sub	sp, #4
    99b6:	9000      	str	r0, [sp, #0]
        //  Play beep sound.
    }
    99b8:	b001      	add	sp, #4
    99ba:	4770      	bx	lr

000099bc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h3c52951efd018dffE>:

    fn sched(&mut self) -> bool {
    99bc:	b081      	sub	sp, #4
    99be:	9000      	str	r0, [sp, #0]
    99c0:	2000      	movs	r0, #0
                .collect();
            win.update_with_buffer(&vram).unwrap();
        }
        */
        false
    }
    99c2:	b001      	add	sp, #4
    99c4:	4770      	bx	lr

000099c6 <_ZN3app5chip812handle_touch17hb422a4f740ac0e1bE>:
}

pub fn handle_touch(_x: u16, _y: u16) { 
    99c6:	b580      	push	{r7, lr}
    99c8:	b084      	sub	sp, #16
    99ca:	460a      	mov	r2, r1
    99cc:	4603      	mov	r3, r0
    99ce:	f8ad 000c 	strh.w	r0, [sp, #12]
    99d2:	f8ad 100e 	strh.w	r1, [sp, #14]
    console::print("CHIP8 touch not handled\n"); console::flush(); 
    99d6:	f64d 5004 	movw	r0, #56580	; 0xdd04
    99da:	f2c0 0001 	movt	r0, #1
    99de:	2118      	movs	r1, #24
    99e0:	9202      	str	r2, [sp, #8]
    99e2:	9301      	str	r3, [sp, #4]
    99e4:	f005 fe41 	bl	f66a <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    99e8:	e7ff      	b.n	99ea <_ZN3app5chip812handle_touch17hb422a4f740ac0e1bE+0x24>
    99ea:	f005 fe84 	bl	f6f6 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    99ee:	e7ff      	b.n	99f0 <_ZN3app5chip812handle_touch17hb422a4f740ac0e1bE+0x2a>
/*
    99f0:	b004      	add	sp, #16
    99f2:	bd80      	pop	{r7, pc}

000099f4 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h79fbfe346516e383E>:
    99f4:	b580      	push	{r7, lr}
    99f6:	b082      	sub	sp, #8
    99f8:	9200      	str	r2, [sp, #0]
    99fa:	9101      	str	r1, [sp, #4]
    99fc:	9a00      	ldr	r2, [sp, #0]
    99fe:	f003 fe58 	bl	d6b2 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h64cee1a3c11094e6E>
    9a02:	e7ff      	b.n	9a04 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h79fbfe346516e383E+0x10>
    9a04:	b002      	add	sp, #8
    9a06:	bd80      	pop	{r7, pc}

00009a08 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17he627156f6f8a4ed5E>:
    9a08:	b580      	push	{r7, lr}
    9a0a:	b084      	sub	sp, #16
    9a0c:	9102      	str	r1, [sp, #8]
    9a0e:	9003      	str	r0, [sp, #12]
    9a10:	9902      	ldr	r1, [sp, #8]
    9a12:	f003 fe60 	bl	d6d6 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h2454dbfe6f26a106E>
    9a16:	9001      	str	r0, [sp, #4]
    9a18:	9100      	str	r1, [sp, #0]
    9a1a:	e7ff      	b.n	9a1c <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17he627156f6f8a4ed5E+0x14>
    9a1c:	9801      	ldr	r0, [sp, #4]
    9a1e:	9900      	ldr	r1, [sp, #0]
    9a20:	b004      	add	sp, #16
    9a22:	bd80      	pop	{r7, pc}

00009a24 <_ZN8libchip814Chip8$LT$T$GT$3new17hd62b2f9fc0ffdda2E>:
    0xf0, 0x80, 0xf0, 0x80, 0x80, // f
];

impl<T: Hardware> Chip8<T> {
    /// Create an interpreter instance.
    pub fn new(hw: T) -> Self {
    9a24:	b570      	push	{r4, r5, r6, lr}
    9a26:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
    9a2a:	f10d 0e04 	add.w	lr, sp, #4
    9a2e:	f50e 5182 	add.w	r1, lr, #4160	; 0x1040
    9a32:	2200      	movs	r2, #0
        Self {
            v: [0; REGS],
    9a34:	9209      	str	r2, [sp, #36]	; 0x24
    9a36:	9208      	str	r2, [sp, #32]
    9a38:	9207      	str	r2, [sp, #28]
    9a3a:	9206      	str	r2, [sp, #24]
    9a3c:	ab0a      	add	r3, sp, #40	; 0x28
    9a3e:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
            i: 0,
            dt: 0,
            st: 0,
            pc: 0,
            sp: 0,
            mem: [0; MEMS],
    9a42:	9005      	str	r0, [sp, #20]
    9a44:	4618      	mov	r0, r3
    9a46:	9104      	str	r1, [sp, #16]
    9a48:	4661      	mov	r1, ip
    9a4a:	9203      	str	r2, [sp, #12]
    9a4c:	9302      	str	r3, [sp, #8]
    9a4e:	f8cd c004 	str.w	ip, [sp, #4]
    9a52:	f013 fb75 	bl	1d140 <__aeabi_memclr>
            stack: [0; STACKS],
    9a56:	9803      	ldr	r0, [sp, #12]
    9a58:	9904      	ldr	r1, [sp, #16]
    9a5a:	6008      	str	r0, [r1, #0]
    9a5c:	f841 0c04 	str.w	r0, [r1, #-4]
    9a60:	f841 0c08 	str.w	r0, [r1, #-8]
    9a64:	f841 0c0c 	str.w	r0, [r1, #-12]
    9a68:	f841 0c10 	str.w	r0, [r1, #-16]
    9a6c:	f841 0c14 	str.w	r0, [r1, #-20]
    9a70:	f841 0c18 	str.w	r0, [r1, #-24]
    9a74:	f841 0c1c 	str.w	r0, [r1, #-28]
            time: None,
    9a78:	6088      	str	r0, [r1, #8]
    9a7a:	6048      	str	r0, [r1, #4]
        Self {
    9a7c:	9a06      	ldr	r2, [sp, #24]
    9a7e:	9b07      	ldr	r3, [sp, #28]
    9a80:	f8dd c020 	ldr.w	ip, [sp, #32]
    9a84:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
    9a88:	9c05      	ldr	r4, [sp, #20]
    9a8a:	f8c4 e040 	str.w	lr, [r4, #64]	; 0x40
    9a8e:	f8c4 c03c 	str.w	ip, [r4, #60]	; 0x3c
    9a92:	63a3      	str	r3, [r4, #56]	; 0x38
    9a94:	6362      	str	r2, [r4, #52]	; 0x34
    9a96:	8220      	strh	r0, [r4, #16]
    9a98:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
    9a9c:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
    9aa0:	8260      	strh	r0, [r4, #18]
    9aa2:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
    9aa6:	f104 0047 	add.w	r0, r4, #71	; 0x47
    9aaa:	9902      	ldr	r1, [sp, #8]
    9aac:	9a01      	ldr	r2, [sp, #4]
    9aae:	f013 fb4b 	bl	1d148 <__aeabi_memcpy>
    9ab2:	9905      	ldr	r1, [sp, #20]
    9ab4:	f101 0214 	add.w	r2, r1, #20
    9ab8:	f10d 0e08 	add.w	lr, sp, #8
    9abc:	f50e 5181 	add.w	r1, lr, #4128	; 0x1020
    9ac0:	2320      	movs	r3, #32
    9ac2:	9000      	str	r0, [sp, #0]
    9ac4:	4610      	mov	r0, r2
    9ac6:	461a      	mov	r2, r3
    9ac8:	f013 fb3e 	bl	1d148 <__aeabi_memcpy>
    9acc:	9904      	ldr	r1, [sp, #16]
    9ace:	684a      	ldr	r2, [r1, #4]
    9ad0:	688b      	ldr	r3, [r1, #8]
    9ad2:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    9ad6:	f8d1 e010 	ldr.w	lr, [r1, #16]
    9ada:	9c05      	ldr	r4, [sp, #20]
    9adc:	6063      	str	r3, [r4, #4]
    9ade:	6022      	str	r2, [r4, #0]
    9ae0:	f8c4 e00c 	str.w	lr, [r4, #12]
    9ae4:	f8c4 c008 	str.w	ip, [r4, #8]
    9ae8:	f241 0247 	movw	r2, #4167	; 0x1047
    9aec:	9b03      	ldr	r3, [sp, #12]
    9aee:	54a3      	strb	r3, [r4, r2]
            running: false,
            hw,
        }
    }
    9af0:	f50d 5d83 	add.w	sp, sp, #4192	; 0x1060
    9af4:	bd70      	pop	{r4, r5, r6, pc}

00009af6 <_ZN8libchip814Chip8$LT$T$GT$3pop17hb9253c18c9cf9467E>:
    fn push(&mut self, item: u16) {
        self.stack[self.sp as usize] = item;
        self.sp = self.sp.wrapping_add(1);
    }

    fn pop(&mut self) -> u16 {
    9af6:	b580      	push	{r7, lr}
    9af8:	b086      	sub	sp, #24
    9afa:	9004      	str	r0, [sp, #16]
        self.sp = self.sp.wrapping_sub(1);
    9afc:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
    9b00:	2201      	movs	r2, #1
    9b02:	9003      	str	r0, [sp, #12]
    9b04:	4608      	mov	r0, r1
    9b06:	4611      	mov	r1, r2
    9b08:	f009 f824 	bl	12b54 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h4a79113dcdba2ecfE>
    9b0c:	9002      	str	r0, [sp, #8]
    9b0e:	e7ff      	b.n	9b10 <_ZN8libchip814Chip8$LT$T$GT$3pop17hb9253c18c9cf9467E+0x1a>
    9b10:	9802      	ldr	r0, [sp, #8]
    9b12:	9903      	ldr	r1, [sp, #12]
    9b14:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
        let item = self.stack[self.sp as usize];
    9b18:	f891 2046 	ldrb.w	r2, [r1, #70]	; 0x46
    9b1c:	4613      	mov	r3, r2
    9b1e:	2a0f      	cmp	r2, #15
    9b20:	9301      	str	r3, [sp, #4]
    9b22:	d80a      	bhi.n	9b3a <_ZN8libchip814Chip8$LT$T$GT$3pop17hb9253c18c9cf9467E+0x44>
    9b24:	e7ff      	b.n	9b26 <_ZN8libchip814Chip8$LT$T$GT$3pop17hb9253c18c9cf9467E+0x30>
    9b26:	9803      	ldr	r0, [sp, #12]
    9b28:	9901      	ldr	r1, [sp, #4]
    9b2a:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    9b2e:	8a92      	ldrh	r2, [r2, #20]
    9b30:	f8ad 2016 	strh.w	r2, [sp, #22]
        item
    }
    9b34:	4610      	mov	r0, r2
    9b36:	b006      	add	sp, #24
    9b38:	bd80      	pop	{r7, pc}
        let item = self.stack[self.sp as usize];
    9b3a:	f64d 5074 	movw	r0, #56692	; 0xdd74
    9b3e:	f2c0 0001 	movt	r0, #1
    9b42:	2210      	movs	r2, #16
    9b44:	9901      	ldr	r1, [sp, #4]
    9b46:	f00c ff41 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    9b4a:	defe      	udf	#254	; 0xfe

00009b4c <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E>:
    pub fn run(mut self, rom: &[u8]) {
    9b4c:	b580      	push	{r7, lr}
    9b4e:	b086      	sub	sp, #24
    9b50:	9104      	str	r1, [sp, #16]
    9b52:	9205      	str	r2, [sp, #20]
        self.setup();
    9b54:	9003      	str	r0, [sp, #12]
    9b56:	9202      	str	r2, [sp, #8]
    9b58:	9101      	str	r1, [sp, #4]
    9b5a:	f003 ff0e 	bl	d97a <_ZN8libchip814Chip8$LT$T$GT$5setup17hf7242787e8a175a5E>
    9b5e:	e7ff      	b.n	9b60 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x14>
        self.load(rom);
    9b60:	9803      	ldr	r0, [sp, #12]
    9b62:	9901      	ldr	r1, [sp, #4]
    9b64:	9a02      	ldr	r2, [sp, #8]
    9b66:	f003 fdc8 	bl	d6fa <_ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E>
    9b6a:	e7ff      	b.n	9b6c <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x20>
        while self.running {
    9b6c:	e7ff      	b.n	9b6e <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x22>
    9b6e:	f241 0047 	movw	r0, #4167	; 0x1047
    9b72:	9903      	ldr	r1, [sp, #12]
    9b74:	5c08      	ldrb	r0, [r1, r0]
    9b76:	07c0      	lsls	r0, r0, #31
    9b78:	2800      	cmp	r0, #0
    9b7a:	d101      	bne.n	9b80 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x34>
    9b7c:	e7ff      	b.n	9b7e <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x32>
    }
    9b7e:	e00c      	b.n	9b9a <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x4e>
            self.sched();
    9b80:	9803      	ldr	r0, [sp, #12]
    9b82:	f003 fe84 	bl	d88e <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E>
    9b86:	e7ff      	b.n	9b88 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x3c>
            self.eval();
    9b88:	9803      	ldr	r0, [sp, #12]
    9b8a:	f000 f809 	bl	9ba0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E>
    9b8e:	e7ff      	b.n	9b90 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x44>
            self.next();
    9b90:	9803      	ldr	r0, [sp, #12]
    9b92:	f003 fded 	bl	d770 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>
    9b96:	e7ff      	b.n	9b98 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x4c>
        while self.running {
    9b98:	e7e9      	b.n	9b6e <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x22>
    }
    9b9a:	b006      	add	sp, #24
    9b9c:	bd80      	pop	{r7, pc}
	...

00009ba0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E>:
        }

        return b' ';
    }

    fn eval(&mut self) {
    9ba0:	b570      	push	{r4, r5, r6, lr}
    9ba2:	f5ad 6d6c 	sub.w	sp, sp, #3776	; 0xec0
    9ba6:	f8cd 0c70 	str.w	r0, [sp, #3184]	; 0xc70
        let h = self.mem[self.pc as usize] as u16;
    9baa:	8a41      	ldrh	r1, [r0, #18]
    9bac:	460a      	mov	r2, r1
    9bae:	2300      	movs	r3, #0
    9bb0:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    9bb4:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
    9bb8:	f8cd 248c 	str.w	r2, [sp, #1164]	; 0x48c
    9bbc:	f043 82a9 	bne.w	d112 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3572>
    9bc0:	e7ff      	b.n	9bc2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22>
    9bc2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    9bc6:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
    9bca:	1842      	adds	r2, r0, r1
    9bcc:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    9bd0:	4613      	mov	r3, r2
    9bd2:	f8ad 2c76 	strh.w	r2, [sp, #3190]	; 0xc76
        let l = self.mem[(self.pc + 1) as usize] as u16;
    9bd6:	8a42      	ldrh	r2, [r0, #18]
    9bd8:	3201      	adds	r2, #1
    9bda:	fa1f fc82 	uxth.w	ip, r2
    9bde:	4696      	mov	lr, r2
    9be0:	4594      	cmp	ip, r2
    9be2:	f8cd 3488 	str.w	r3, [sp, #1160]	; 0x488
    9be6:	f8cd e484 	str.w	lr, [sp, #1156]	; 0x484
    9bea:	f043 829d 	bne.w	d128 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3588>
    9bee:	e7ff      	b.n	9bf0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x50>
    9bf0:	f8dd 0484 	ldr.w	r0, [sp, #1156]	; 0x484
    9bf4:	b281      	uxth	r1, r0
    9bf6:	460a      	mov	r2, r1
    9bf8:	2300      	movs	r3, #0
    9bfa:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    9bfe:	f8cd 2480 	str.w	r2, [sp, #1152]	; 0x480
    9c02:	f043 829d 	bne.w	d140 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x35a0>
    9c06:	e7ff      	b.n	9c08 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x68>
    9c08:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    9c0c:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
    9c10:	1842      	adds	r2, r0, r1
    9c12:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    9c16:	4613      	mov	r3, r2
    9c18:	f8ad 2c78 	strh.w	r2, [sp, #3192]	; 0xc78
        let inst = h << 8 | l;
    9c1c:	f8dd 2488 	ldr.w	r2, [sp, #1160]	; 0x488
    9c20:	ea4f 2c02 	mov.w	ip, r2, lsl #8
    9c24:	f8cd 347c 	str.w	r3, [sp, #1148]	; 0x47c
    9c28:	f8cd c478 	str.w	ip, [sp, #1144]	; 0x478
    9c2c:	e7ff      	b.n	9c2e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x8e>
    9c2e:	f8dd 0478 	ldr.w	r0, [sp, #1144]	; 0x478
    9c32:	f8dd 147c 	ldr.w	r1, [sp, #1148]	; 0x47c
    9c36:	ea40 0201 	orr.w	r2, r0, r1
    9c3a:	f8ad 2496 	strh.w	r2, [sp, #1174]	; 0x496

        let nnn = inst & 0xfff;
    9c3e:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    9c42:	f36f 321f 	bfc	r2, #12, #20
    9c46:	4613      	mov	r3, r2
    9c48:	f8ad 2c7a 	strh.w	r2, [sp, #3194]	; 0xc7a
        let n = (inst & 0xf) as usize;
    9c4c:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    9c50:	f002 020f 	and.w	r2, r2, #15
    9c54:	4694      	mov	ip, r2
    9c56:	f8cd 2c7c 	str.w	r2, [sp, #3196]	; 0xc7c
        let x = ((inst >> 8) & 0xf) as usize;
    9c5a:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    9c5e:	f8cd 3474 	str.w	r3, [sp, #1140]	; 0x474
    9c62:	f8cd c470 	str.w	ip, [sp, #1136]	; 0x470
    9c66:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
    9c6a:	e7ff      	b.n	9c6c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xcc>
    9c6c:	f8dd 046c 	ldr.w	r0, [sp, #1132]	; 0x46c
    9c70:	f000 010f 	and.w	r1, r0, #15
    9c74:	460a      	mov	r2, r1
    9c76:	f8cd 1c80 	str.w	r1, [sp, #3200]	; 0xc80
        let y = ((inst >> 4) & 0xf) as usize;
    9c7a:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    9c7e:	0909      	lsrs	r1, r1, #4
    9c80:	f8cd 2468 	str.w	r2, [sp, #1128]	; 0x468
    9c84:	f8cd 1464 	str.w	r1, [sp, #1124]	; 0x464
    9c88:	e7ff      	b.n	9c8a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xea>
    9c8a:	f8dd 0464 	ldr.w	r0, [sp, #1124]	; 0x464
    9c8e:	f000 010f 	and.w	r1, r0, #15
    9c92:	460a      	mov	r2, r1
    9c94:	f8cd 1c84 	str.w	r1, [sp, #3204]	; 0xc84
        let kk = (inst & 0xff) as u8;
    9c98:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    9c9c:	b2cb      	uxtb	r3, r1
    9c9e:	f88d 1c8b 	strb.w	r1, [sp, #3211]	; 0xc8b

        match (
            (inst >> 12) & 0xf,
    9ca2:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    9ca6:	0b09      	lsrs	r1, r1, #12
    9ca8:	f8cd 2460 	str.w	r2, [sp, #1120]	; 0x460
    9cac:	f8cd 345c 	str.w	r3, [sp, #1116]	; 0x45c
    9cb0:	f8cd 1458 	str.w	r1, [sp, #1112]	; 0x458
    9cb4:	e7ff      	b.n	9cb6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x116>
    9cb6:	f8dd 0458 	ldr.w	r0, [sp, #1112]	; 0x458
    9cba:	f000 010f 	and.w	r1, r0, #15
            (inst >> 8) & 0xf,
    9cbe:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    9cc2:	f8cd 1454 	str.w	r1, [sp, #1108]	; 0x454
    9cc6:	f8cd 2450 	str.w	r2, [sp, #1104]	; 0x450
    9cca:	e7ff      	b.n	9ccc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x12c>
    9ccc:	f8dd 0450 	ldr.w	r0, [sp, #1104]	; 0x450
    9cd0:	f000 010f 	and.w	r1, r0, #15
            (inst >> 4) & 0xf,
    9cd4:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    9cd8:	0912      	lsrs	r2, r2, #4
    9cda:	f8cd 144c 	str.w	r1, [sp, #1100]	; 0x44c
    9cde:	f8cd 2448 	str.w	r2, [sp, #1096]	; 0x448
    9ce2:	e7ff      	b.n	9ce4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x144>
    9ce4:	f8dd 0448 	ldr.w	r0, [sp, #1096]	; 0x448
    9ce8:	f000 010f 	and.w	r1, r0, #15
            (inst >> 0) & 0xf,
    9cec:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    9cf0:	f8cd 1444 	str.w	r1, [sp, #1092]	; 0x444
    9cf4:	f8cd 2440 	str.w	r2, [sp, #1088]	; 0x440
    9cf8:	e7ff      	b.n	9cfa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x15a>
    9cfa:	f8dd 0440 	ldr.w	r0, [sp, #1088]	; 0x440
    9cfe:	f000 010f 	and.w	r1, r0, #15
        match (
    9d02:	f8dd 2454 	ldr.w	r2, [sp, #1108]	; 0x454
    9d06:	f8ad 2498 	strh.w	r2, [sp, #1176]	; 0x498
    9d0a:	f8dd 344c 	ldr.w	r3, [sp, #1100]	; 0x44c
    9d0e:	f8ad 349a 	strh.w	r3, [sp, #1178]	; 0x49a
    9d12:	f8dd c444 	ldr.w	ip, [sp, #1092]	; 0x444
    9d16:	f8ad c49c 	strh.w	ip, [sp, #1180]	; 0x49c
    9d1a:	f8ad 149e 	strh.w	r1, [sp, #1182]	; 0x49e
        ) {
            (0, 0, 0xe, 0) => {
    9d1e:	f8bd 1498 	ldrh.w	r1, [sp, #1176]	; 0x498
    9d22:	468e      	mov	lr, r1
    9d24:	290f      	cmp	r1, #15
    9d26:	f8cd e43c 	str.w	lr, [sp, #1084]	; 0x43c
    9d2a:	d84f      	bhi.n	9dcc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
    9d2c:	f8dd 143c 	ldr.w	r1, [sp, #1084]	; 0x43c
    9d30:	e8df f011 	tbh	[pc, r1, lsl #1]
    9d34:	03010010 	.word	0x03010010
    9d38:	042d0394 	.word	0x042d0394
    9d3c:	002c04cd 	.word	0x002c04cd
    9d40:	06af061a 	.word	0x06af061a
    9d44:	00750032 	.word	0x00750032
    9d48:	0edf0e54 	.word	0x0edf0e54
    9d4c:	101e0f80 	.word	0x101e0f80
    9d50:	0095007b 	.word	0x0095007b
    9d54:	f8bd 049a 	ldrh.w	r0, [sp, #1178]	; 0x49a
    9d58:	2800      	cmp	r0, #0
    9d5a:	f040 825c 	bne.w	a216 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x676>
    9d5e:	e7ff      	b.n	9d60 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c0>
    9d60:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    9d64:	280e      	cmp	r0, #14
    9d66:	f040 8256 	bne.w	a216 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x676>
    9d6a:	e7ff      	b.n	9d6c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1cc>
    9d6c:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9d70:	4601      	mov	r1, r0
    9d72:	2800      	cmp	r0, #0
    9d74:	f8cd 1438 	str.w	r1, [sp, #1080]	; 0x438
    9d78:	f000 80c0 	beq.w	9efc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x35c>
    9d7c:	e7ff      	b.n	9d7e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1de>
    9d7e:	f8dd 0438 	ldr.w	r0, [sp, #1080]	; 0x438
    9d82:	b281      	uxth	r1, r0
    9d84:	290e      	cmp	r1, #14
    9d86:	f000 81b1 	beq.w	a0ec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x54c>
    9d8a:	e244      	b.n	a216 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x676>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
                if self.v[x] != kk {
                    self.next();
                }
            }
            (5, _, _, 0) => {
    9d8c:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9d90:	2800      	cmp	r0, #0
    9d92:	f000 853c 	beq.w	a80e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc6e>
    9d96:	e019      	b.n	9dcc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            }
            (7, _, _, _) => {
                trace!("[{:04x}] ADD Vx, kk", self.pc);
                self.v[x] = self.v[x].wrapping_add(kk);
            }
            (8, _, _, 0) => {
    9d98:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9d9c:	4601      	mov	r1, r0
    9d9e:	280e      	cmp	r0, #14
    9da0:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
    9da4:	d812      	bhi.n	9dcc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
    9da6:	f8dd 1424 	ldr.w	r1, [sp, #1060]	; 0x424
    9daa:	e8df f011 	tbh	[pc, r1, lsl #1]
    9dae:	0719      	.short	0x0719
    9db0:	086207bb 	.word	0x086207bb
    9db4:	09b00909 	.word	0x09b00909
    9db8:	0b360a72 	.word	0x0b360a72
    9dbc:	000f0beb 	.word	0x000f0beb
    9dc0:	000f000f 	.word	0x000f000f
    9dc4:	000f000f 	.word	0x000f000f
    9dc8:	0caf000f 	.word	0x0caf000f
                let x = x as usize;
                for i in 0..(x + 1) {
                    self.v[i] = self.mem[self.i as usize + i];
                }
            }
            _ => panic!("[{:04x}] Invalid op: {:04x}", self.pc, inst), // Bad ops
    9dcc:	f64e 1088 	movw	r0, #59784	; 0xe988
    9dd0:	f2c0 0001 	movt	r0, #1
    9dd4:	6801      	ldr	r1, [r0, #0]
    9dd6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    9dda:	f100 0212 	add.w	r2, r0, #18
    9dde:	f8cd 2c68 	str.w	r2, [sp, #3176]	; 0xc68
    9de2:	f20d 4296 	addw	r2, sp, #1174	; 0x496
    9de6:	f8cd 2c6c 	str.w	r2, [sp, #3180]	; 0xc6c
    9dea:	f8dd 2c68 	ldr.w	r2, [sp, #3176]	; 0xc68
    9dee:	f8cd 2d60 	str.w	r2, [sp, #3424]	; 0xd60
    9df2:	f8dd 3c6c 	ldr.w	r3, [sp, #3180]	; 0xc6c
    9df6:	f8cd 3d64 	str.w	r3, [sp, #3428]	; 0xd64
    9dfa:	f248 1cbb 	movw	ip, #33211	; 0x81bb
    9dfe:	f2c0 0c01 	movt	ip, #1
    9e02:	4610      	mov	r0, r2
    9e04:	f8cd 1434 	str.w	r1, [sp, #1076]	; 0x434
    9e08:	4661      	mov	r1, ip
    9e0a:	f8cd 3430 	str.w	r3, [sp, #1072]	; 0x430
    9e0e:	f007 ff3f 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    9e12:	f8cd 042c 	str.w	r0, [sp, #1068]	; 0x42c
    9e16:	f8cd 1428 	str.w	r1, [sp, #1064]	; 0x428
    9e1a:	f003 b938 	b.w	d08e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x34ee>
            (9, _, _, 0) => {
    9e1e:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9e22:	2800      	cmp	r0, #0
    9e24:	f001 852d 	beq.w	b882 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1ce2>
    9e28:	e7d0      	b.n	9dcc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xe, _, 9, 0xe) => {
    9e2a:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    9e2e:	4601      	mov	r1, r0
    9e30:	2809      	cmp	r0, #9
    9e32:	f8cd 1420 	str.w	r1, [sp, #1056]	; 0x420
    9e36:	d006      	beq.n	9e46 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a6>
    9e38:	e7ff      	b.n	9e3a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x29a>
    9e3a:	f8dd 0420 	ldr.w	r0, [sp, #1056]	; 0x420
    9e3e:	b281      	uxth	r1, r0
    9e40:	290a      	cmp	r1, #10
    9e42:	d006      	beq.n	9e52 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b2>
    9e44:	e7c2      	b.n	9dcc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
    9e46:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9e4a:	280e      	cmp	r0, #14
    9e4c:	f002 814a 	beq.w	c0e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2544>
    9e50:	e7bc      	b.n	9dcc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xe, _, 0xa, 0x1) => {
    9e52:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9e56:	2801      	cmp	r0, #1
    9e58:	f002 81ea 	beq.w	c230 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2690>
    9e5c:	e7b6      	b.n	9dcc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xf, _, 0, 7) => {
    9e5e:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    9e62:	4601      	mov	r1, r0
    9e64:	2806      	cmp	r0, #6
    9e66:	f8cd 141c 	str.w	r1, [sp, #1052]	; 0x41c
    9e6a:	d8af      	bhi.n	9dcc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
    9e6c:	f8dd 141c 	ldr.w	r1, [sp, #1052]	; 0x41c
    9e70:	e8df f001 	tbb	[pc, r1]
    9e74:	322c1505 	.word	0x322c1505
    9e78:	003e3804 	.word	0x003e3804
    9e7c:	e7a6      	b.n	9dcc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
    9e7e:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9e82:	4601      	mov	r1, r0
    9e84:	2807      	cmp	r0, #7
    9e86:	f8cd 1418 	str.w	r1, [sp, #1048]	; 0x418
    9e8a:	f002 8277 	beq.w	c37c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27dc>
    9e8e:	e7ff      	b.n	9e90 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f0>
    9e90:	f8dd 0418 	ldr.w	r0, [sp, #1048]	; 0x418
    9e94:	b281      	uxth	r1, r0
    9e96:	290a      	cmp	r1, #10
    9e98:	f002 8309 	beq.w	c4ae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x290e>
    9e9c:	e796      	b.n	9dcc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xf, _, 1, 5) => {
    9e9e:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9ea2:	4601      	mov	r1, r0
    9ea4:	2805      	cmp	r0, #5
    9ea6:	f8cd 1414 	str.w	r1, [sp, #1044]	; 0x414
    9eaa:	f002 839a 	beq.w	c5e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a42>
    9eae:	e7ff      	b.n	9eb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x310>
    9eb0:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    9eb4:	b281      	uxth	r1, r0
    9eb6:	2908      	cmp	r1, #8
    9eb8:	f002 8428 	beq.w	c70c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b6c>
    9ebc:	e7ff      	b.n	9ebe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x31e>
    9ebe:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    9ec2:	b281      	uxth	r1, r0
    9ec4:	290e      	cmp	r1, #14
    9ec6:	f002 84b6 	beq.w	c836 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2c96>
    9eca:	e77f      	b.n	9dcc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xf, _, 2, 9) => {
    9ecc:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9ed0:	2809      	cmp	r0, #9
    9ed2:	f002 8554 	beq.w	c97e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2dde>
    9ed6:	e779      	b.n	9dcc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xf, _, 3, 3) => {
    9ed8:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9edc:	2803      	cmp	r0, #3
    9ede:	f002 85ff 	beq.w	cae0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f40>
    9ee2:	e773      	b.n	9dcc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xf, _, 5, 5) => {
    9ee4:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9ee8:	2805      	cmp	r0, #5
    9eea:	f002 8708 	beq.w	ccfe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x315e>
    9eee:	e76d      	b.n	9dcc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xf, _, 6, 5) => {
    9ef0:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9ef4:	2805      	cmp	r0, #5
    9ef6:	f002 87e5 	beq.w	cec4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3324>
    9efa:	e767      	b.n	9dcc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
    9efc:	2005      	movs	r0, #5
    9efe:	f8cd 04a0 	str.w	r0, [sp, #1184]	; 0x4a0
    9f02:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    9f06:	f2c0 0001 	movt	r0, #1
    9f0a:	6801      	ldr	r1, [r0, #0]
    9f0c:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    9f10:	f008 fda0 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    9f14:	f8cd 0410 	str.w	r0, [sp, #1040]	; 0x410
    9f18:	e01f      	b.n	9f5a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3ba>
    9f1a:	2001      	movs	r0, #1
    9f1c:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    9f20:	e015      	b.n	9f4e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3ae>
    9f22:	2000      	movs	r0, #0
    9f24:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    9f28:	e011      	b.n	9f4e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3ae>
    9f2a:	2000      	movs	r0, #0
/// [`debug!`]: macro.debug.html
/// [`trace!`]: macro.trace.html
/// [`set_max_level`]: fn.set_max_level.html
#[inline(always)]
pub fn max_level() -> LevelFilter {
    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
    9f2c:	f88d 0dab 	strb.w	r0, [sp, #3499]	; 0xdab
    9f30:	f89d 1dab 	ldrb.w	r1, [sp, #3499]	; 0xdab
    9f34:	f640 2000 	movw	r0, #2560	; 0xa00
    9f38:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9f3c:	f008 fd96 	bl	12a6c <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    9f40:	f8cd 0dac 	str.w	r0, [sp, #3500]	; 0xdac
    9f44:	f8dd 0dac 	ldr.w	r0, [sp, #3500]	; 0xdac
    9f48:	f8cd 04a8 	str.w	r0, [sp, #1192]	; 0x4a8
    9f4c:	e00b      	b.n	9f66 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3c6>
    9f4e:	f89d 04a7 	ldrb.w	r0, [sp, #1191]	; 0x4a7
    9f52:	07c0      	lsls	r0, r0, #31
    9f54:	2800      	cmp	r0, #0
    9f56:	d115      	bne.n	9f84 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3e4>
    9f58:	e05e      	b.n	a018 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x478>
    9f5a:	f8dd 0410 	ldr.w	r0, [sp, #1040]	; 0x410
    9f5e:	07c1      	lsls	r1, r0, #31
    9f60:	2900      	cmp	r1, #0
    9f62:	d1e2      	bne.n	9f2a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x38a>
    9f64:	e7dd      	b.n	9f22 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x382>
    9f66:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    9f6a:	f50d 6195 	add.w	r1, sp, #1192	; 0x4a8
    9f6e:	f008 fd71 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    9f72:	f8cd 040c 	str.w	r0, [sp, #1036]	; 0x40c
    9f76:	e7ff      	b.n	9f78 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3d8>
    9f78:	f8dd 040c 	ldr.w	r0, [sp, #1036]	; 0x40c
    9f7c:	07c1      	lsls	r1, r0, #31
    9f7e:	2900      	cmp	r1, #0
    9f80:	d1cb      	bne.n	9f1a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x37a>
    9f82:	e7ce      	b.n	9f22 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x382>
                trace!("[{:04x}] CLS", self.pc);
    9f84:	f64e 4028 	movw	r0, #60456	; 0xec28
    9f88:	f2c0 0001 	movt	r0, #1
    9f8c:	6801      	ldr	r1, [r0, #0]
    9f8e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    9f92:	f100 0212 	add.w	r2, r0, #18
    9f96:	f8cd 24cc 	str.w	r2, [sp, #1228]	; 0x4cc
    9f9a:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
    9f9e:	f8cd 2d88 	str.w	r2, [sp, #3464]	; 0xd88
    9fa2:	f248 13bb 	movw	r3, #33211	; 0x81bb
    9fa6:	f2c0 0301 	movt	r3, #1
    9faa:	4610      	mov	r0, r2
    9fac:	f8cd 1408 	str.w	r1, [sp, #1032]	; 0x408
    9fb0:	4619      	mov	r1, r3
    9fb2:	f007 fe6d 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    9fb6:	f8cd 0404 	str.w	r0, [sp, #1028]	; 0x404
    9fba:	f8cd 1400 	str.w	r1, [sp, #1024]	; 0x400
    9fbe:	e7ff      	b.n	9fc0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x420>
    9fc0:	f8dd 0404 	ldr.w	r0, [sp, #1028]	; 0x404
    9fc4:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
    9fc8:	f8dd 1400 	ldr.w	r1, [sp, #1024]	; 0x400
    9fcc:	f8cd 14c8 	str.w	r1, [sp, #1224]	; 0x4c8
    9fd0:	f64d 6228 	movw	r2, #56872	; 0xde28
    9fd4:	f2c0 0201 	movt	r2, #1
    9fd8:	6812      	ldr	r2, [r2, #0]
    9fda:	466b      	mov	r3, sp
    9fdc:	f04f 0c01 	mov.w	ip, #1
    9fe0:	f8c3 c008 	str.w	ip, [r3, #8]
    9fe4:	605a      	str	r2, [r3, #4]
    9fe6:	f8c3 c000 	str.w	ip, [r3]
    9fea:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    9fee:	2202      	movs	r2, #2
    9ff0:	f20d 43c4 	addw	r3, sp, #1220	; 0x4c4
    9ff4:	f8dd 1408 	ldr.w	r1, [sp, #1032]	; 0x408
    9ff8:	f003 fef5 	bl	dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    9ffc:	e7ff      	b.n	9ffe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x45e>
    9ffe:	f8dd 14a0 	ldr.w	r1, [sp, #1184]	; 0x4a0
    a002:	f64e 4048 	movw	r0, #60488	; 0xec48
    a006:	f2c0 0001 	movt	r0, #1
    a00a:	6802      	ldr	r2, [r0, #0]
    a00c:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    a010:	f004 feb5 	bl	ed7e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a014:	e7ff      	b.n	a016 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x476>
    a016:	e7ff      	b.n	a018 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x478>
                let (w, h) = self.hw.vram_size();
    a018:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a01c:	f7ff fc60 	bl	98e0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hd317927185b0114cE>
    a020:	90ff      	str	r0, [sp, #1020]	; 0x3fc
    a022:	91fe      	str	r1, [sp, #1016]	; 0x3f8
    a024:	e7ff      	b.n	a026 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x486>
    a026:	98ff      	ldr	r0, [sp, #1020]	; 0x3fc
    a028:	f8cd 0d8c 	str.w	r0, [sp, #3468]	; 0xd8c
    a02c:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
    a02e:	f8cd 14d0 	str.w	r1, [sp, #1232]	; 0x4d0
    a032:	2200      	movs	r2, #0
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    a034:	f8cd 2538 	str.w	r2, [sp, #1336]	; 0x538
    a038:	f8cd 053c 	str.w	r0, [sp, #1340]	; 0x53c
    a03c:	f50d 629a 	add.w	r2, sp, #1232	; 0x4d0
    a040:	f8cd 2540 	str.w	r2, [sp, #1344]	; 0x540
    a044:	f8dd 1538 	ldr.w	r1, [sp, #1336]	; 0x538
    a048:	f8dd 253c 	ldr.w	r2, [sp, #1340]	; 0x53c
    a04c:	f8dd 3540 	ldr.w	r3, [sp, #1344]	; 0x540
    a050:	f20d 502c 	addw	r0, sp, #1324	; 0x52c
    a054:	f008 fe7d 	bl	12d52 <_ZN4core4iter6traits8iterator8Iterator3map17h39af250ef60ec852E>
    a058:	e7ff      	b.n	a05a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x4ba>
    a05a:	f50d 60a0 	add.w	r0, sp, #1280	; 0x500
    a05e:	f20d 512c 	addw	r1, sp, #1324	; 0x52c
    a062:	f003 fd90 	bl	db86 <_ZN4core4iter6traits8iterator8Iterator7flatten17h790b24ffb57b6bb2E>
    a066:	e7ff      	b.n	a068 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x4c8>
    a068:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    a06c:	f50d 61a0 	add.w	r1, sp, #1280	; 0x500
    a070:	f003 feaf 	bl	ddd2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h0a1a9897cf1e3266E>
    a074:	e7ff      	b.n	a076 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x4d6>
    a076:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    a07a:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    a07e:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
    a082:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
    a086:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
    a08a:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
    a08e:	e7ff      	b.n	a090 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x4f0>
    a090:	f50d 60ae 	add.w	r0, sp, #1392	; 0x570
    a094:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    a098:	f003 fdc8 	bl	dc2c <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5923d182d43571feE>
    a09c:	e7ff      	b.n	a09e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x4fe>
    a09e:	f8dd 0570 	ldr.w	r0, [sp, #1392]	; 0x570
    a0a2:	2800      	cmp	r0, #0
    a0a4:	d001      	beq.n	a0aa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x50a>
    a0a6:	e7ff      	b.n	a0a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x508>
    a0a8:	e002      	b.n	a0b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x510>
        match (
    a0aa:	f003 b82f 	b.w	d10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    a0ae:	defe      	udf	#254	; 0xfe
    a0b0:	f8dd 0574 	ldr.w	r0, [sp, #1396]	; 0x574
    a0b4:	f8dd 1578 	ldr.w	r1, [sp, #1400]	; 0x578
    a0b8:	f8cd 0d90 	str.w	r0, [sp, #3472]	; 0xd90
    a0bc:	f8cd 1d94 	str.w	r1, [sp, #3476]	; 0xd94
    a0c0:	f8cd 0d98 	str.w	r0, [sp, #3480]	; 0xd98
    a0c4:	f8cd 1d9c 	str.w	r1, [sp, #3484]	; 0xd9c
    a0c8:	f8cd 0da0 	str.w	r0, [sp, #3488]	; 0xda0
    a0cc:	f8cd 1da4 	str.w	r1, [sp, #3492]	; 0xda4
    a0d0:	2300      	movs	r3, #0
                    self.hw.vram_set(x, y, false);
    a0d2:	f8dd 2490 	ldr.w	r2, [sp, #1168]	; 0x490
    a0d6:	90fd      	str	r0, [sp, #1012]	; 0x3f4
    a0d8:	4610      	mov	r0, r2
    a0da:	f8dd c3f4 	ldr.w	ip, [sp, #1012]	; 0x3f4
    a0de:	91fc      	str	r1, [sp, #1008]	; 0x3f0
    a0e0:	4661      	mov	r1, ip
    a0e2:	9afc      	ldr	r2, [sp, #1008]	; 0x3f0
    a0e4:	f7ff fa68 	bl	95b8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E>
    a0e8:	e7ff      	b.n	a0ea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x54a>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    a0ea:	e7d1      	b.n	a090 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x4f0>
    a0ec:	2005      	movs	r0, #5
    a0ee:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
    a0f2:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    a0f6:	f2c0 0001 	movt	r0, #1
    a0fa:	6801      	ldr	r1, [r0, #0]
    a0fc:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    a100:	f008 fca8 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a104:	90fb      	str	r0, [sp, #1004]	; 0x3ec
    a106:	e01f      	b.n	a148 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x5a8>
    a108:	2001      	movs	r0, #1
    a10a:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    a10e:	e015      	b.n	a13c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x59c>
    a110:	2000      	movs	r0, #0
    a112:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    a116:	e011      	b.n	a13c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x59c>
    a118:	2000      	movs	r0, #0
    a11a:	f88d 0db3 	strb.w	r0, [sp, #3507]	; 0xdb3
    a11e:	f89d 1db3 	ldrb.w	r1, [sp, #3507]	; 0xdb3
    a122:	f640 2000 	movw	r0, #2560	; 0xa00
    a126:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a12a:	f008 fc9f 	bl	12a6c <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a12e:	f8cd 0db4 	str.w	r0, [sp, #3508]	; 0xdb4
    a132:	f8dd 0db4 	ldr.w	r0, [sp, #3508]	; 0xdb4
    a136:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
    a13a:	e00a      	b.n	a152 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x5b2>
    a13c:	f89d 0583 	ldrb.w	r0, [sp, #1411]	; 0x583
    a140:	07c0      	lsls	r0, r0, #31
    a142:	2800      	cmp	r0, #0
    a144:	d112      	bne.n	a16c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x5cc>
    a146:	e055      	b.n	a1f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x654>
    a148:	98fb      	ldr	r0, [sp, #1004]	; 0x3ec
    a14a:	07c1      	lsls	r1, r0, #31
    a14c:	2900      	cmp	r1, #0
    a14e:	d1e3      	bne.n	a118 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x578>
    a150:	e7de      	b.n	a110 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x570>
    a152:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    a156:	f20d 5184 	addw	r1, sp, #1412	; 0x584
    a15a:	f008 fc7b 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a15e:	90fa      	str	r0, [sp, #1000]	; 0x3e8
    a160:	e7ff      	b.n	a162 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x5c2>
    a162:	98fa      	ldr	r0, [sp, #1000]	; 0x3e8
    a164:	07c1      	lsls	r1, r0, #31
    a166:	2900      	cmp	r1, #0
    a168:	d1ce      	bne.n	a108 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x568>
    a16a:	e7d1      	b.n	a110 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x570>
                trace!("[{:04x}] RET", self.pc);
    a16c:	f64e 30ec 	movw	r0, #60396	; 0xebec
    a170:	f2c0 0001 	movt	r0, #1
    a174:	6801      	ldr	r1, [r0, #0]
    a176:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a17a:	f100 0212 	add.w	r2, r0, #18
    a17e:	f8cd 25a8 	str.w	r2, [sp, #1448]	; 0x5a8
    a182:	f8dd 25a8 	ldr.w	r2, [sp, #1448]	; 0x5a8
    a186:	f8cd 2d80 	str.w	r2, [sp, #3456]	; 0xd80
    a18a:	f248 13bb 	movw	r3, #33211	; 0x81bb
    a18e:	f2c0 0301 	movt	r3, #1
    a192:	4610      	mov	r0, r2
    a194:	91f9      	str	r1, [sp, #996]	; 0x3e4
    a196:	4619      	mov	r1, r3
    a198:	f007 fd7a 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a19c:	90f8      	str	r0, [sp, #992]	; 0x3e0
    a19e:	91f7      	str	r1, [sp, #988]	; 0x3dc
    a1a0:	e7ff      	b.n	a1a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x602>
    a1a2:	98f8      	ldr	r0, [sp, #992]	; 0x3e0
    a1a4:	f8cd 05a0 	str.w	r0, [sp, #1440]	; 0x5a0
    a1a8:	99f7      	ldr	r1, [sp, #988]	; 0x3dc
    a1aa:	f8cd 15a4 	str.w	r1, [sp, #1444]	; 0x5a4
    a1ae:	f64d 6228 	movw	r2, #56872	; 0xde28
    a1b2:	f2c0 0201 	movt	r2, #1
    a1b6:	6812      	ldr	r2, [r2, #0]
    a1b8:	466b      	mov	r3, sp
    a1ba:	f04f 0c01 	mov.w	ip, #1
    a1be:	f8c3 c008 	str.w	ip, [r3, #8]
    a1c2:	605a      	str	r2, [r3, #4]
    a1c4:	f8c3 c000 	str.w	ip, [r3]
    a1c8:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    a1cc:	2202      	movs	r2, #2
    a1ce:	f50d 63b4 	add.w	r3, sp, #1440	; 0x5a0
    a1d2:	99f9      	ldr	r1, [sp, #996]	; 0x3e4
    a1d4:	f003 fe07 	bl	dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a1d8:	e7ff      	b.n	a1da <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x63a>
    a1da:	f8dd 157c 	ldr.w	r1, [sp, #1404]	; 0x57c
    a1de:	f64e 400c 	movw	r0, #60428	; 0xec0c
    a1e2:	f2c0 0001 	movt	r0, #1
    a1e6:	6802      	ldr	r2, [r0, #0]
    a1e8:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    a1ec:	f004 fdc7 	bl	ed7e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a1f0:	e7ff      	b.n	a1f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x652>
    a1f2:	e7ff      	b.n	a1f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x654>
                let addr = self.pop();
    a1f4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a1f8:	f7ff fc7d 	bl	9af6 <_ZN8libchip814Chip8$LT$T$GT$3pop17hb9253c18c9cf9467E>
    a1fc:	4601      	mov	r1, r0
    a1fe:	f8ad 0d86 	strh.w	r0, [sp, #3462]	; 0xd86
    a202:	91f6      	str	r1, [sp, #984]	; 0x3d8
    a204:	e7ff      	b.n	a206 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x666>
                self.jump(addr);
    a206:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a20a:	99f6      	ldr	r1, [sp, #984]	; 0x3d8
    a20c:	f003 fa6d 	bl	d6ea <_ZN8libchip814Chip8$LT$T$GT$4jump17h7de77f07aa5a546bE>
    a210:	e7ff      	b.n	a212 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x672>
        match (
    a212:	f002 bf7b 	b.w	d10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    a216:	2005      	movs	r0, #5
    a218:	f8cd 05ac 	str.w	r0, [sp, #1452]	; 0x5ac
    a21c:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    a220:	f2c0 0001 	movt	r0, #1
    a224:	6801      	ldr	r1, [r0, #0]
    a226:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    a22a:	f008 fc13 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a22e:	90f5      	str	r0, [sp, #980]	; 0x3d4
    a230:	e01f      	b.n	a272 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x6d2>
    a232:	2001      	movs	r0, #1
    a234:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    a238:	e015      	b.n	a266 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x6c6>
    a23a:	2000      	movs	r0, #0
    a23c:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    a240:	e011      	b.n	a266 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x6c6>
    a242:	2000      	movs	r0, #0
    a244:	f88d 0dbb 	strb.w	r0, [sp, #3515]	; 0xdbb
    a248:	f89d 1dbb 	ldrb.w	r1, [sp, #3515]	; 0xdbb
    a24c:	f640 2000 	movw	r0, #2560	; 0xa00
    a250:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a254:	f008 fc0a 	bl	12a6c <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a258:	f8cd 0dbc 	str.w	r0, [sp, #3516]	; 0xdbc
    a25c:	f8dd 0dbc 	ldr.w	r0, [sp, #3516]	; 0xdbc
    a260:	f8cd 05b4 	str.w	r0, [sp, #1460]	; 0x5b4
    a264:	e00a      	b.n	a27c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x6dc>
    a266:	f89d 05b3 	ldrb.w	r0, [sp, #1459]	; 0x5b3
    a26a:	07c0      	lsls	r0, r0, #31
    a26c:	2800      	cmp	r0, #0
    a26e:	d112      	bne.n	a296 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x6f6>
    a270:	e055      	b.n	a31e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x77e>
    a272:	98f5      	ldr	r0, [sp, #980]	; 0x3d4
    a274:	07c1      	lsls	r1, r0, #31
    a276:	2900      	cmp	r1, #0
    a278:	d1e3      	bne.n	a242 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x6a2>
    a27a:	e7de      	b.n	a23a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x69a>
    a27c:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    a280:	f20d 51b4 	addw	r1, sp, #1460	; 0x5b4
    a284:	f008 fbe6 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a288:	90f4      	str	r0, [sp, #976]	; 0x3d0
    a28a:	e7ff      	b.n	a28c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x6ec>
    a28c:	98f4      	ldr	r0, [sp, #976]	; 0x3d0
    a28e:	07c1      	lsls	r1, r0, #31
    a290:	2900      	cmp	r1, #0
    a292:	d1ce      	bne.n	a232 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x692>
    a294:	e7d1      	b.n	a23a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x69a>
                trace!("[{:04x}] SYS nnn", self.pc);
    a296:	f64e 3090 	movw	r0, #60304	; 0xeb90
    a29a:	f2c0 0001 	movt	r0, #1
    a29e:	6801      	ldr	r1, [r0, #0]
    a2a0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a2a4:	f100 0212 	add.w	r2, r0, #18
    a2a8:	f8cd 25d8 	str.w	r2, [sp, #1496]	; 0x5d8
    a2ac:	f8dd 25d8 	ldr.w	r2, [sp, #1496]	; 0x5d8
    a2b0:	f8cd 2d7c 	str.w	r2, [sp, #3452]	; 0xd7c
    a2b4:	f248 13bb 	movw	r3, #33211	; 0x81bb
    a2b8:	f2c0 0301 	movt	r3, #1
    a2bc:	4610      	mov	r0, r2
    a2be:	91f3      	str	r1, [sp, #972]	; 0x3cc
    a2c0:	4619      	mov	r1, r3
    a2c2:	f007 fce5 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a2c6:	90f2      	str	r0, [sp, #968]	; 0x3c8
    a2c8:	91f1      	str	r1, [sp, #964]	; 0x3c4
    a2ca:	e7ff      	b.n	a2cc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x72c>
    a2cc:	98f2      	ldr	r0, [sp, #968]	; 0x3c8
    a2ce:	f8cd 05d0 	str.w	r0, [sp, #1488]	; 0x5d0
    a2d2:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
    a2d4:	f8cd 15d4 	str.w	r1, [sp, #1492]	; 0x5d4
    a2d8:	f64d 6228 	movw	r2, #56872	; 0xde28
    a2dc:	f2c0 0201 	movt	r2, #1
    a2e0:	6812      	ldr	r2, [r2, #0]
    a2e2:	466b      	mov	r3, sp
    a2e4:	f04f 0c01 	mov.w	ip, #1
    a2e8:	f8c3 c008 	str.w	ip, [r3, #8]
    a2ec:	605a      	str	r2, [r3, #4]
    a2ee:	f8c3 c000 	str.w	ip, [r3]
    a2f2:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    a2f6:	2202      	movs	r2, #2
    a2f8:	f50d 63ba 	add.w	r3, sp, #1488	; 0x5d0
    a2fc:	99f3      	ldr	r1, [sp, #972]	; 0x3cc
    a2fe:	f003 fd72 	bl	dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a302:	e7ff      	b.n	a304 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x764>
    a304:	f8dd 15ac 	ldr.w	r1, [sp, #1452]	; 0x5ac
    a308:	f64e 30b0 	movw	r0, #60336	; 0xebb0
    a30c:	f2c0 0001 	movt	r0, #1
    a310:	6802      	ldr	r2, [r0, #0]
    a312:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    a316:	f004 fd32 	bl	ed7e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a31a:	e7ff      	b.n	a31c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x77c>
    a31c:	e7ff      	b.n	a31e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x77e>
    a31e:	f64e 30b4 	movw	r0, #60340	; 0xebb4
    a322:	f2c0 0001 	movt	r0, #1
    a326:	f64e 32c4 	movw	r2, #60356	; 0xebc4
    a32a:	f2c0 0201 	movt	r2, #1
    a32e:	210f      	movs	r1, #15
    a330:	f00c fb36 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    a334:	defe      	udf	#254	; 0xfe
    a336:	2005      	movs	r0, #5
    a338:	f8cd 05dc 	str.w	r0, [sp, #1500]	; 0x5dc
    a33c:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    a340:	f2c0 0001 	movt	r0, #1
    a344:	6801      	ldr	r1, [r0, #0]
    a346:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    a34a:	f008 fb83 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a34e:	90f0      	str	r0, [sp, #960]	; 0x3c0
    a350:	e01f      	b.n	a392 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7f2>
    a352:	2001      	movs	r0, #1
    a354:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    a358:	e015      	b.n	a386 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7e6>
    a35a:	2000      	movs	r0, #0
    a35c:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    a360:	e011      	b.n	a386 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7e6>
    a362:	2000      	movs	r0, #0
    a364:	f88d 0dc3 	strb.w	r0, [sp, #3523]	; 0xdc3
    a368:	f89d 1dc3 	ldrb.w	r1, [sp, #3523]	; 0xdc3
    a36c:	f640 2000 	movw	r0, #2560	; 0xa00
    a370:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a374:	f008 fb7a 	bl	12a6c <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a378:	f8cd 0dc4 	str.w	r0, [sp, #3524]	; 0xdc4
    a37c:	f8dd 0dc4 	ldr.w	r0, [sp, #3524]	; 0xdc4
    a380:	f8cd 05e4 	str.w	r0, [sp, #1508]	; 0x5e4
    a384:	e00a      	b.n	a39c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7fc>
    a386:	f89d 05e3 	ldrb.w	r0, [sp, #1507]	; 0x5e3
    a38a:	07c0      	lsls	r0, r0, #31
    a38c:	2800      	cmp	r0, #0
    a38e:	d112      	bne.n	a3b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x816>
    a390:	e055      	b.n	a43e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x89e>
    a392:	98f0      	ldr	r0, [sp, #960]	; 0x3c0
    a394:	07c1      	lsls	r1, r0, #31
    a396:	2900      	cmp	r1, #0
    a398:	d1e3      	bne.n	a362 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7c2>
    a39a:	e7de      	b.n	a35a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7ba>
    a39c:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    a3a0:	f20d 51e4 	addw	r1, sp, #1508	; 0x5e4
    a3a4:	f008 fb56 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a3a8:	90ef      	str	r0, [sp, #956]	; 0x3bc
    a3aa:	e7ff      	b.n	a3ac <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x80c>
    a3ac:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
    a3ae:	07c1      	lsls	r1, r0, #31
    a3b0:	2900      	cmp	r1, #0
    a3b2:	d1ce      	bne.n	a352 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7b2>
    a3b4:	e7d1      	b.n	a35a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7ba>
                trace!("[{:04x}] JP nnn", self.pc);
    a3b6:	f64e 3050 	movw	r0, #60240	; 0xeb50
    a3ba:	f2c0 0001 	movt	r0, #1
    a3be:	6801      	ldr	r1, [r0, #0]
    a3c0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a3c4:	f100 0212 	add.w	r2, r0, #18
    a3c8:	f8cd 2608 	str.w	r2, [sp, #1544]	; 0x608
    a3cc:	f8dd 2608 	ldr.w	r2, [sp, #1544]	; 0x608
    a3d0:	f8cd 2d78 	str.w	r2, [sp, #3448]	; 0xd78
    a3d4:	f248 13bb 	movw	r3, #33211	; 0x81bb
    a3d8:	f2c0 0301 	movt	r3, #1
    a3dc:	4610      	mov	r0, r2
    a3de:	91ee      	str	r1, [sp, #952]	; 0x3b8
    a3e0:	4619      	mov	r1, r3
    a3e2:	f007 fc55 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a3e6:	90ed      	str	r0, [sp, #948]	; 0x3b4
    a3e8:	91ec      	str	r1, [sp, #944]	; 0x3b0
    a3ea:	e7ff      	b.n	a3ec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x84c>
    a3ec:	98ed      	ldr	r0, [sp, #948]	; 0x3b4
    a3ee:	f8cd 0600 	str.w	r0, [sp, #1536]	; 0x600
    a3f2:	99ec      	ldr	r1, [sp, #944]	; 0x3b0
    a3f4:	f8cd 1604 	str.w	r1, [sp, #1540]	; 0x604
    a3f8:	f64d 6228 	movw	r2, #56872	; 0xde28
    a3fc:	f2c0 0201 	movt	r2, #1
    a400:	6812      	ldr	r2, [r2, #0]
    a402:	466b      	mov	r3, sp
    a404:	f04f 0c01 	mov.w	ip, #1
    a408:	f8c3 c008 	str.w	ip, [r3, #8]
    a40c:	605a      	str	r2, [r3, #4]
    a40e:	f8c3 c000 	str.w	ip, [r3]
    a412:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    a416:	2202      	movs	r2, #2
    a418:	f50d 63c0 	add.w	r3, sp, #1536	; 0x600
    a41c:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
    a41e:	f003 fce2 	bl	dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a422:	e7ff      	b.n	a424 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x884>
    a424:	f8dd 15dc 	ldr.w	r1, [sp, #1500]	; 0x5dc
    a428:	f64e 3070 	movw	r0, #60272	; 0xeb70
    a42c:	f2c0 0001 	movt	r0, #1
    a430:	6802      	ldr	r2, [r0, #0]
    a432:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    a436:	f004 fca2 	bl	ed7e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a43a:	e7ff      	b.n	a43c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x89c>
    a43c:	e7ff      	b.n	a43e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x89e>
    a43e:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    a440:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    a444:	f008 fbff 	bl	12c46 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hceb9f03c67b66808E>
    a448:	90eb      	str	r0, [sp, #940]	; 0x3ac
    a44a:	e7ff      	b.n	a44c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x8ac>
    a44c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a450:	99eb      	ldr	r1, [sp, #940]	; 0x3ac
    a452:	f003 f94a 	bl	d6ea <_ZN8libchip814Chip8$LT$T$GT$4jump17h7de77f07aa5a546bE>
    a456:	e7ff      	b.n	a458 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x8b8>
        match (
    a458:	f002 be58 	b.w	d10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    a45c:	2005      	movs	r0, #5
    a45e:	f8cd 060c 	str.w	r0, [sp, #1548]	; 0x60c
    a462:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    a466:	f2c0 0001 	movt	r0, #1
    a46a:	6801      	ldr	r1, [r0, #0]
    a46c:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    a470:	f008 faf0 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a474:	90ea      	str	r0, [sp, #936]	; 0x3a8
    a476:	e01f      	b.n	a4b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x918>
    a478:	2001      	movs	r0, #1
    a47a:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    a47e:	e015      	b.n	a4ac <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x90c>
    a480:	2000      	movs	r0, #0
    a482:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    a486:	e011      	b.n	a4ac <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x90c>
    a488:	2000      	movs	r0, #0
    a48a:	f88d 0dcb 	strb.w	r0, [sp, #3531]	; 0xdcb
    a48e:	f89d 1dcb 	ldrb.w	r1, [sp, #3531]	; 0xdcb
    a492:	f640 2000 	movw	r0, #2560	; 0xa00
    a496:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a49a:	f008 fae7 	bl	12a6c <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a49e:	f8cd 0dcc 	str.w	r0, [sp, #3532]	; 0xdcc
    a4a2:	f8dd 0dcc 	ldr.w	r0, [sp, #3532]	; 0xdcc
    a4a6:	f8cd 0614 	str.w	r0, [sp, #1556]	; 0x614
    a4aa:	e00a      	b.n	a4c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x922>
    a4ac:	f89d 0613 	ldrb.w	r0, [sp, #1555]	; 0x613
    a4b0:	07c0      	lsls	r0, r0, #31
    a4b2:	2800      	cmp	r0, #0
    a4b4:	d112      	bne.n	a4dc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x93c>
    a4b6:	e055      	b.n	a564 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x9c4>
    a4b8:	98ea      	ldr	r0, [sp, #936]	; 0x3a8
    a4ba:	07c1      	lsls	r1, r0, #31
    a4bc:	2900      	cmp	r1, #0
    a4be:	d1e3      	bne.n	a488 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x8e8>
    a4c0:	e7de      	b.n	a480 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x8e0>
    a4c2:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    a4c6:	f20d 6114 	addw	r1, sp, #1556	; 0x614
    a4ca:	f008 fac3 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a4ce:	90e9      	str	r0, [sp, #932]	; 0x3a4
    a4d0:	e7ff      	b.n	a4d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x932>
    a4d2:	98e9      	ldr	r0, [sp, #932]	; 0x3a4
    a4d4:	07c1      	lsls	r1, r0, #31
    a4d6:	2900      	cmp	r1, #0
    a4d8:	d1ce      	bne.n	a478 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x8d8>
    a4da:	e7d1      	b.n	a480 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x8e0>
                trace!("[{:04x}] CALL nnn", self.pc);
    a4dc:	f64e 301c 	movw	r0, #60188	; 0xeb1c
    a4e0:	f2c0 0001 	movt	r0, #1
    a4e4:	6801      	ldr	r1, [r0, #0]
    a4e6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a4ea:	f100 0212 	add.w	r2, r0, #18
    a4ee:	f8cd 2638 	str.w	r2, [sp, #1592]	; 0x638
    a4f2:	f8dd 2638 	ldr.w	r2, [sp, #1592]	; 0x638
    a4f6:	f8cd 2d74 	str.w	r2, [sp, #3444]	; 0xd74
    a4fa:	f248 13bb 	movw	r3, #33211	; 0x81bb
    a4fe:	f2c0 0301 	movt	r3, #1
    a502:	4610      	mov	r0, r2
    a504:	91e8      	str	r1, [sp, #928]	; 0x3a0
    a506:	4619      	mov	r1, r3
    a508:	f007 fbc2 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a50c:	90e7      	str	r0, [sp, #924]	; 0x39c
    a50e:	91e6      	str	r1, [sp, #920]	; 0x398
    a510:	e7ff      	b.n	a512 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x972>
    a512:	98e7      	ldr	r0, [sp, #924]	; 0x39c
    a514:	f8cd 0630 	str.w	r0, [sp, #1584]	; 0x630
    a518:	99e6      	ldr	r1, [sp, #920]	; 0x398
    a51a:	f8cd 1634 	str.w	r1, [sp, #1588]	; 0x634
    a51e:	f64d 6228 	movw	r2, #56872	; 0xde28
    a522:	f2c0 0201 	movt	r2, #1
    a526:	6812      	ldr	r2, [r2, #0]
    a528:	466b      	mov	r3, sp
    a52a:	f04f 0c01 	mov.w	ip, #1
    a52e:	f8c3 c008 	str.w	ip, [r3, #8]
    a532:	605a      	str	r2, [r3, #4]
    a534:	f8c3 c000 	str.w	ip, [r3]
    a538:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    a53c:	2202      	movs	r2, #2
    a53e:	f50d 63c6 	add.w	r3, sp, #1584	; 0x630
    a542:	99e8      	ldr	r1, [sp, #928]	; 0x3a0
    a544:	f003 fc4f 	bl	dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a548:	e7ff      	b.n	a54a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x9aa>
    a54a:	f8dd 160c 	ldr.w	r1, [sp, #1548]	; 0x60c
    a54e:	f64e 303c 	movw	r0, #60220	; 0xeb3c
    a552:	f2c0 0001 	movt	r0, #1
    a556:	6802      	ldr	r2, [r0, #0]
    a558:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    a55c:	f004 fc0f 	bl	ed7e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a560:	e7ff      	b.n	a562 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x9c2>
    a562:	e7ff      	b.n	a564 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x9c4>
                self.push(self.pc);
    a564:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a568:	8a41      	ldrh	r1, [r0, #18]
    a56a:	f003 f914 	bl	d796 <_ZN8libchip814Chip8$LT$T$GT$4push17hdbfa3ffa7a184c4eE>
    a56e:	e7ff      	b.n	a570 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x9d0>
    a570:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    a572:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    a576:	f008 fb66 	bl	12c46 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hceb9f03c67b66808E>
    a57a:	90e5      	str	r0, [sp, #916]	; 0x394
    a57c:	e7ff      	b.n	a57e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x9de>
    a57e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a582:	99e5      	ldr	r1, [sp, #916]	; 0x394
    a584:	f003 f8b1 	bl	d6ea <_ZN8libchip814Chip8$LT$T$GT$4jump17h7de77f07aa5a546bE>
    a588:	e7ff      	b.n	a58a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x9ea>
        match (
    a58a:	f002 bdbf 	b.w	d10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    a58e:	2005      	movs	r0, #5
    a590:	f8cd 063c 	str.w	r0, [sp, #1596]	; 0x63c
    a594:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    a598:	f2c0 0001 	movt	r0, #1
    a59c:	6801      	ldr	r1, [r0, #0]
    a59e:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    a5a2:	f008 fa57 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a5a6:	90e4      	str	r0, [sp, #912]	; 0x390
    a5a8:	e01f      	b.n	a5ea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa4a>
    a5aa:	2001      	movs	r0, #1
    a5ac:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    a5b0:	e015      	b.n	a5de <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa3e>
    a5b2:	2000      	movs	r0, #0
    a5b4:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    a5b8:	e011      	b.n	a5de <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa3e>
    a5ba:	2000      	movs	r0, #0
    a5bc:	f88d 0dd3 	strb.w	r0, [sp, #3539]	; 0xdd3
    a5c0:	f89d 1dd3 	ldrb.w	r1, [sp, #3539]	; 0xdd3
    a5c4:	f640 2000 	movw	r0, #2560	; 0xa00
    a5c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a5cc:	f008 fa4e 	bl	12a6c <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a5d0:	f8cd 0dd4 	str.w	r0, [sp, #3540]	; 0xdd4
    a5d4:	f8dd 0dd4 	ldr.w	r0, [sp, #3540]	; 0xdd4
    a5d8:	f8cd 0644 	str.w	r0, [sp, #1604]	; 0x644
    a5dc:	e00a      	b.n	a5f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa54>
    a5de:	f89d 0643 	ldrb.w	r0, [sp, #1603]	; 0x643
    a5e2:	07c0      	lsls	r0, r0, #31
    a5e4:	2800      	cmp	r0, #0
    a5e6:	d112      	bne.n	a60e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa6e>
    a5e8:	e055      	b.n	a696 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xaf6>
    a5ea:	98e4      	ldr	r0, [sp, #912]	; 0x390
    a5ec:	07c1      	lsls	r1, r0, #31
    a5ee:	2900      	cmp	r1, #0
    a5f0:	d1e3      	bne.n	a5ba <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa1a>
    a5f2:	e7de      	b.n	a5b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa12>
    a5f4:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    a5f8:	f20d 6144 	addw	r1, sp, #1604	; 0x644
    a5fc:	f008 fa2a 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a600:	90e3      	str	r0, [sp, #908]	; 0x38c
    a602:	e7ff      	b.n	a604 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa64>
    a604:	98e3      	ldr	r0, [sp, #908]	; 0x38c
    a606:	07c1      	lsls	r1, r0, #31
    a608:	2900      	cmp	r1, #0
    a60a:	d1ce      	bne.n	a5aa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa0a>
    a60c:	e7d1      	b.n	a5b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa12>
                trace!("[{:04x}] SE Vx kk", self.pc);
    a60e:	f64e 20cc 	movw	r0, #60108	; 0xeacc
    a612:	f2c0 0001 	movt	r0, #1
    a616:	6801      	ldr	r1, [r0, #0]
    a618:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a61c:	f100 0212 	add.w	r2, r0, #18
    a620:	f8cd 2668 	str.w	r2, [sp, #1640]	; 0x668
    a624:	f8dd 2668 	ldr.w	r2, [sp, #1640]	; 0x668
    a628:	f8cd 2d70 	str.w	r2, [sp, #3440]	; 0xd70
    a62c:	f248 13bb 	movw	r3, #33211	; 0x81bb
    a630:	f2c0 0301 	movt	r3, #1
    a634:	4610      	mov	r0, r2
    a636:	91e2      	str	r1, [sp, #904]	; 0x388
    a638:	4619      	mov	r1, r3
    a63a:	f007 fb29 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a63e:	90e1      	str	r0, [sp, #900]	; 0x384
    a640:	91e0      	str	r1, [sp, #896]	; 0x380
    a642:	e7ff      	b.n	a644 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xaa4>
    a644:	98e1      	ldr	r0, [sp, #900]	; 0x384
    a646:	f8cd 0660 	str.w	r0, [sp, #1632]	; 0x660
    a64a:	99e0      	ldr	r1, [sp, #896]	; 0x380
    a64c:	f8cd 1664 	str.w	r1, [sp, #1636]	; 0x664
    a650:	f64d 6228 	movw	r2, #56872	; 0xde28
    a654:	f2c0 0201 	movt	r2, #1
    a658:	6812      	ldr	r2, [r2, #0]
    a65a:	466b      	mov	r3, sp
    a65c:	f04f 0c01 	mov.w	ip, #1
    a660:	f8c3 c008 	str.w	ip, [r3, #8]
    a664:	605a      	str	r2, [r3, #4]
    a666:	f8c3 c000 	str.w	ip, [r3]
    a66a:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    a66e:	2202      	movs	r2, #2
    a670:	f50d 63cc 	add.w	r3, sp, #1632	; 0x660
    a674:	99e2      	ldr	r1, [sp, #904]	; 0x388
    a676:	f003 fbb6 	bl	dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a67a:	e7ff      	b.n	a67c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xadc>
    a67c:	f8dd 163c 	ldr.w	r1, [sp, #1596]	; 0x63c
    a680:	f64e 20ec 	movw	r0, #60140	; 0xeaec
    a684:	f2c0 0001 	movt	r0, #1
    a688:	6802      	ldr	r2, [r0, #0]
    a68a:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    a68e:	f004 fb76 	bl	ed7e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a692:	e7ff      	b.n	a694 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xaf4>
    a694:	e7ff      	b.n	a696 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xaf6>
                if self.v[x] == kk {
    a696:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    a69a:	280f      	cmp	r0, #15
    a69c:	f202 87ff 	bhi.w	d69e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3afe>
    a6a0:	e7ff      	b.n	a6a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb02>
    a6a2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a6a6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    a6aa:	1842      	adds	r2, r0, r1
    a6ac:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    a6b0:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    a6b4:	fa5f fc83 	uxtb.w	ip, r3
    a6b8:	4562      	cmp	r2, ip
    a6ba:	d106      	bne.n	a6ca <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb2a>
    a6bc:	e7ff      	b.n	a6be <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb1e>
                    self.next();
    a6be:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a6c2:	f003 f855 	bl	d770 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>
    a6c6:	e7ff      	b.n	a6c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb28>
                if self.v[x] == kk {
    a6c8:	e7ff      	b.n	a6ca <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb2a>
        match (
    a6ca:	f002 bd1f 	b.w	d10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    a6ce:	2005      	movs	r0, #5
    a6d0:	f8cd 066c 	str.w	r0, [sp, #1644]	; 0x66c
    a6d4:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    a6d8:	f2c0 0001 	movt	r0, #1
    a6dc:	6801      	ldr	r1, [r0, #0]
    a6de:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    a6e2:	f008 f9b7 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a6e6:	90df      	str	r0, [sp, #892]	; 0x37c
    a6e8:	e01f      	b.n	a72a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb8a>
    a6ea:	2001      	movs	r0, #1
    a6ec:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    a6f0:	e015      	b.n	a71e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb7e>
    a6f2:	2000      	movs	r0, #0
    a6f4:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    a6f8:	e011      	b.n	a71e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb7e>
    a6fa:	2000      	movs	r0, #0
    a6fc:	f88d 0ddb 	strb.w	r0, [sp, #3547]	; 0xddb
    a700:	f89d 1ddb 	ldrb.w	r1, [sp, #3547]	; 0xddb
    a704:	f640 2000 	movw	r0, #2560	; 0xa00
    a708:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a70c:	f008 f9ae 	bl	12a6c <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a710:	f8cd 0ddc 	str.w	r0, [sp, #3548]	; 0xddc
    a714:	f8dd 0ddc 	ldr.w	r0, [sp, #3548]	; 0xddc
    a718:	f8cd 0674 	str.w	r0, [sp, #1652]	; 0x674
    a71c:	e00a      	b.n	a734 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb94>
    a71e:	f89d 0673 	ldrb.w	r0, [sp, #1651]	; 0x673
    a722:	07c0      	lsls	r0, r0, #31
    a724:	2800      	cmp	r0, #0
    a726:	d112      	bne.n	a74e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xbae>
    a728:	e055      	b.n	a7d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc36>
    a72a:	98df      	ldr	r0, [sp, #892]	; 0x37c
    a72c:	07c1      	lsls	r1, r0, #31
    a72e:	2900      	cmp	r1, #0
    a730:	d1e3      	bne.n	a6fa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb5a>
    a732:	e7de      	b.n	a6f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb52>
    a734:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    a738:	f20d 6174 	addw	r1, sp, #1652	; 0x674
    a73c:	f008 f98a 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a740:	90de      	str	r0, [sp, #888]	; 0x378
    a742:	e7ff      	b.n	a744 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xba4>
    a744:	98de      	ldr	r0, [sp, #888]	; 0x378
    a746:	07c1      	lsls	r1, r0, #31
    a748:	2900      	cmp	r1, #0
    a74a:	d1ce      	bne.n	a6ea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb4a>
    a74c:	e7d1      	b.n	a6f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb52>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
    a74e:	f64e 207c 	movw	r0, #60028	; 0xea7c
    a752:	f2c0 0001 	movt	r0, #1
    a756:	6801      	ldr	r1, [r0, #0]
    a758:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a75c:	f100 0212 	add.w	r2, r0, #18
    a760:	f8cd 2698 	str.w	r2, [sp, #1688]	; 0x698
    a764:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
    a768:	f8cd 2d6c 	str.w	r2, [sp, #3436]	; 0xd6c
    a76c:	f248 13bb 	movw	r3, #33211	; 0x81bb
    a770:	f2c0 0301 	movt	r3, #1
    a774:	4610      	mov	r0, r2
    a776:	91dd      	str	r1, [sp, #884]	; 0x374
    a778:	4619      	mov	r1, r3
    a77a:	f007 fa89 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a77e:	90dc      	str	r0, [sp, #880]	; 0x370
    a780:	91db      	str	r1, [sp, #876]	; 0x36c
    a782:	e7ff      	b.n	a784 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xbe4>
    a784:	98dc      	ldr	r0, [sp, #880]	; 0x370
    a786:	f8cd 0690 	str.w	r0, [sp, #1680]	; 0x690
    a78a:	99db      	ldr	r1, [sp, #876]	; 0x36c
    a78c:	f8cd 1694 	str.w	r1, [sp, #1684]	; 0x694
    a790:	f64d 6228 	movw	r2, #56872	; 0xde28
    a794:	f2c0 0201 	movt	r2, #1
    a798:	6812      	ldr	r2, [r2, #0]
    a79a:	466b      	mov	r3, sp
    a79c:	f04f 0c01 	mov.w	ip, #1
    a7a0:	f8c3 c008 	str.w	ip, [r3, #8]
    a7a4:	605a      	str	r2, [r3, #4]
    a7a6:	f8c3 c000 	str.w	ip, [r3]
    a7aa:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    a7ae:	2202      	movs	r2, #2
    a7b0:	f50d 63d2 	add.w	r3, sp, #1680	; 0x690
    a7b4:	99dd      	ldr	r1, [sp, #884]	; 0x374
    a7b6:	f003 fb16 	bl	dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a7ba:	e7ff      	b.n	a7bc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc1c>
    a7bc:	f8dd 166c 	ldr.w	r1, [sp, #1644]	; 0x66c
    a7c0:	f64e 209c 	movw	r0, #60060	; 0xea9c
    a7c4:	f2c0 0001 	movt	r0, #1
    a7c8:	6802      	ldr	r2, [r0, #0]
    a7ca:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    a7ce:	f004 fad6 	bl	ed7e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a7d2:	e7ff      	b.n	a7d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc34>
    a7d4:	e7ff      	b.n	a7d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc36>
                if self.v[x] != kk {
    a7d6:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    a7da:	280f      	cmp	r0, #15
    a7dc:	f202 8755 	bhi.w	d68a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3aea>
    a7e0:	e7ff      	b.n	a7e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc42>
    a7e2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a7e6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    a7ea:	1842      	adds	r2, r0, r1
    a7ec:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    a7f0:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    a7f4:	fa5f fc83 	uxtb.w	ip, r3
    a7f8:	4562      	cmp	r2, ip
    a7fa:	d006      	beq.n	a80a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc6a>
    a7fc:	e7ff      	b.n	a7fe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc5e>
                    self.next();
    a7fe:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a802:	f002 ffb5 	bl	d770 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>
    a806:	e7ff      	b.n	a808 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc68>
                if self.v[x] != kk {
    a808:	e7ff      	b.n	a80a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc6a>
        match (
    a80a:	f002 bc7f 	b.w	d10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    a80e:	2005      	movs	r0, #5
    a810:	f8cd 069c 	str.w	r0, [sp, #1692]	; 0x69c
    a814:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    a818:	f2c0 0001 	movt	r0, #1
    a81c:	6801      	ldr	r1, [r0, #0]
    a81e:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    a822:	f008 f917 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a826:	90da      	str	r0, [sp, #872]	; 0x368
    a828:	e01f      	b.n	a86a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xcca>
    a82a:	2001      	movs	r0, #1
    a82c:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    a830:	e015      	b.n	a85e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xcbe>
    a832:	2000      	movs	r0, #0
    a834:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    a838:	e011      	b.n	a85e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xcbe>
    a83a:	2000      	movs	r0, #0
    a83c:	f88d 0de3 	strb.w	r0, [sp, #3555]	; 0xde3
    a840:	f89d 1de3 	ldrb.w	r1, [sp, #3555]	; 0xde3
    a844:	f640 2000 	movw	r0, #2560	; 0xa00
    a848:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a84c:	f008 f90e 	bl	12a6c <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a850:	f8cd 0de4 	str.w	r0, [sp, #3556]	; 0xde4
    a854:	f8dd 0de4 	ldr.w	r0, [sp, #3556]	; 0xde4
    a858:	f8cd 06a4 	str.w	r0, [sp, #1700]	; 0x6a4
    a85c:	e00a      	b.n	a874 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xcd4>
    a85e:	f89d 06a3 	ldrb.w	r0, [sp, #1699]	; 0x6a3
    a862:	07c0      	lsls	r0, r0, #31
    a864:	2800      	cmp	r0, #0
    a866:	d112      	bne.n	a88e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xcee>
    a868:	e055      	b.n	a916 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xd76>
    a86a:	98da      	ldr	r0, [sp, #872]	; 0x368
    a86c:	07c1      	lsls	r1, r0, #31
    a86e:	2900      	cmp	r1, #0
    a870:	d1e3      	bne.n	a83a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc9a>
    a872:	e7de      	b.n	a832 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc92>
    a874:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    a878:	f20d 61a4 	addw	r1, sp, #1700	; 0x6a4
    a87c:	f008 f8ea 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a880:	90d9      	str	r0, [sp, #868]	; 0x364
    a882:	e7ff      	b.n	a884 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xce4>
    a884:	98d9      	ldr	r0, [sp, #868]	; 0x364
    a886:	07c1      	lsls	r1, r0, #31
    a888:	2900      	cmp	r1, #0
    a88a:	d1ce      	bne.n	a82a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc8a>
    a88c:	e7d1      	b.n	a832 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc92>
                trace!("[{:04x}] SE Vx, Vy", self.pc);
    a88e:	f64e 201c 	movw	r0, #59932	; 0xea1c
    a892:	f2c0 0001 	movt	r0, #1
    a896:	6801      	ldr	r1, [r0, #0]
    a898:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a89c:	f100 0212 	add.w	r2, r0, #18
    a8a0:	f8cd 26c8 	str.w	r2, [sp, #1736]	; 0x6c8
    a8a4:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
    a8a8:	f8cd 2d68 	str.w	r2, [sp, #3432]	; 0xd68
    a8ac:	f248 13bb 	movw	r3, #33211	; 0x81bb
    a8b0:	f2c0 0301 	movt	r3, #1
    a8b4:	4610      	mov	r0, r2
    a8b6:	91d8      	str	r1, [sp, #864]	; 0x360
    a8b8:	4619      	mov	r1, r3
    a8ba:	f007 f9e9 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a8be:	90d7      	str	r0, [sp, #860]	; 0x35c
    a8c0:	91d6      	str	r1, [sp, #856]	; 0x358
    a8c2:	e7ff      	b.n	a8c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xd24>
    a8c4:	98d7      	ldr	r0, [sp, #860]	; 0x35c
    a8c6:	f8cd 06c0 	str.w	r0, [sp, #1728]	; 0x6c0
    a8ca:	99d6      	ldr	r1, [sp, #856]	; 0x358
    a8cc:	f8cd 16c4 	str.w	r1, [sp, #1732]	; 0x6c4
    a8d0:	f64d 6228 	movw	r2, #56872	; 0xde28
    a8d4:	f2c0 0201 	movt	r2, #1
    a8d8:	6812      	ldr	r2, [r2, #0]
    a8da:	466b      	mov	r3, sp
    a8dc:	f04f 0c01 	mov.w	ip, #1
    a8e0:	f8c3 c008 	str.w	ip, [r3, #8]
    a8e4:	605a      	str	r2, [r3, #4]
    a8e6:	f8c3 c000 	str.w	ip, [r3]
    a8ea:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    a8ee:	2202      	movs	r2, #2
    a8f0:	f50d 63d8 	add.w	r3, sp, #1728	; 0x6c0
    a8f4:	99d8      	ldr	r1, [sp, #864]	; 0x360
    a8f6:	f003 fa76 	bl	dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a8fa:	e7ff      	b.n	a8fc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xd5c>
    a8fc:	f8dd 169c 	ldr.w	r1, [sp, #1692]	; 0x69c
    a900:	f64e 203c 	movw	r0, #59964	; 0xea3c
    a904:	f2c0 0001 	movt	r0, #1
    a908:	6802      	ldr	r2, [r0, #0]
    a90a:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    a90e:	f004 fa36 	bl	ed7e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a912:	e7ff      	b.n	a914 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xd74>
    a914:	e7ff      	b.n	a916 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xd76>
                if self.v[x] == self.v[y] {
    a916:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    a91a:	280f      	cmp	r0, #15
    a91c:	f202 86a1 	bhi.w	d662 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3ac2>
    a920:	e7ff      	b.n	a922 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xd82>
    a922:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a926:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    a92a:	1842      	adds	r2, r0, r1
    a92c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    a930:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    a934:	2b0f      	cmp	r3, #15
    a936:	92d5      	str	r2, [sp, #852]	; 0x354
    a938:	f202 869d 	bhi.w	d676 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3ad6>
    a93c:	e7ff      	b.n	a93e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xd9e>
    a93e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a942:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    a946:	1842      	adds	r2, r0, r1
    a948:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    a94c:	9bd5      	ldr	r3, [sp, #852]	; 0x354
    a94e:	fa5f fc83 	uxtb.w	ip, r3
    a952:	4594      	cmp	ip, r2
    a954:	d106      	bne.n	a964 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xdc4>
    a956:	e7ff      	b.n	a958 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xdb8>
                    self.next();
    a958:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a95c:	f002 ff08 	bl	d770 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>
    a960:	e7ff      	b.n	a962 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xdc2>
                if self.v[x] == self.v[y] {
    a962:	e7ff      	b.n	a964 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xdc4>
        match (
    a964:	f002 bbd2 	b.w	d10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    a968:	2005      	movs	r0, #5
    a96a:	f8cd 06cc 	str.w	r0, [sp, #1740]	; 0x6cc
    a96e:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    a972:	f2c0 0001 	movt	r0, #1
    a976:	6801      	ldr	r1, [r0, #0]
    a978:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    a97c:	f008 f86a 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a980:	90d4      	str	r0, [sp, #848]	; 0x350
    a982:	e01f      	b.n	a9c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xe24>
    a984:	2001      	movs	r0, #1
    a986:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    a98a:	e015      	b.n	a9b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xe18>
    a98c:	2000      	movs	r0, #0
    a98e:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    a992:	e011      	b.n	a9b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xe18>
    a994:	2000      	movs	r0, #0
    a996:	f88d 0deb 	strb.w	r0, [sp, #3563]	; 0xdeb
    a99a:	f89d 1deb 	ldrb.w	r1, [sp, #3563]	; 0xdeb
    a99e:	f640 2000 	movw	r0, #2560	; 0xa00
    a9a2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a9a6:	f008 f861 	bl	12a6c <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a9aa:	f8cd 0dec 	str.w	r0, [sp, #3564]	; 0xdec
    a9ae:	f8dd 0dec 	ldr.w	r0, [sp, #3564]	; 0xdec
    a9b2:	f8cd 06d4 	str.w	r0, [sp, #1748]	; 0x6d4
    a9b6:	e00a      	b.n	a9ce <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xe2e>
    a9b8:	f89d 06d3 	ldrb.w	r0, [sp, #1747]	; 0x6d3
    a9bc:	07c0      	lsls	r0, r0, #31
    a9be:	2800      	cmp	r0, #0
    a9c0:	d112      	bne.n	a9e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xe48>
    a9c2:	e055      	b.n	aa70 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xed0>
    a9c4:	98d4      	ldr	r0, [sp, #848]	; 0x350
    a9c6:	07c1      	lsls	r1, r0, #31
    a9c8:	2900      	cmp	r1, #0
    a9ca:	d1e3      	bne.n	a994 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xdf4>
    a9cc:	e7de      	b.n	a98c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xdec>
    a9ce:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    a9d2:	f20d 61d4 	addw	r1, sp, #1748	; 0x6d4
    a9d6:	f008 f83d 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a9da:	90d3      	str	r0, [sp, #844]	; 0x34c
    a9dc:	e7ff      	b.n	a9de <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xe3e>
    a9de:	98d3      	ldr	r0, [sp, #844]	; 0x34c
    a9e0:	07c1      	lsls	r1, r0, #31
    a9e2:	2900      	cmp	r1, #0
    a9e4:	d1ce      	bne.n	a984 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xde4>
    a9e6:	e7d1      	b.n	a98c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xdec>
                trace!("[{:04x}] LD Vx, kk", self.pc);
    a9e8:	f64e 1034 	movw	r0, #59700	; 0xe934
    a9ec:	f2c0 0001 	movt	r0, #1
    a9f0:	6801      	ldr	r1, [r0, #0]
    a9f2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a9f6:	f100 0212 	add.w	r2, r0, #18
    a9fa:	f8cd 26f8 	str.w	r2, [sp, #1784]	; 0x6f8
    a9fe:	f8dd 26f8 	ldr.w	r2, [sp, #1784]	; 0x6f8
    aa02:	f8cd 2d5c 	str.w	r2, [sp, #3420]	; 0xd5c
    aa06:	f248 13bb 	movw	r3, #33211	; 0x81bb
    aa0a:	f2c0 0301 	movt	r3, #1
    aa0e:	4610      	mov	r0, r2
    aa10:	91d2      	str	r1, [sp, #840]	; 0x348
    aa12:	4619      	mov	r1, r3
    aa14:	f007 f93c 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    aa18:	90d1      	str	r0, [sp, #836]	; 0x344
    aa1a:	91d0      	str	r1, [sp, #832]	; 0x340
    aa1c:	e7ff      	b.n	aa1e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xe7e>
    aa1e:	98d1      	ldr	r0, [sp, #836]	; 0x344
    aa20:	f8cd 06f0 	str.w	r0, [sp, #1776]	; 0x6f0
    aa24:	99d0      	ldr	r1, [sp, #832]	; 0x340
    aa26:	f8cd 16f4 	str.w	r1, [sp, #1780]	; 0x6f4
    aa2a:	f64d 6228 	movw	r2, #56872	; 0xde28
    aa2e:	f2c0 0201 	movt	r2, #1
    aa32:	6812      	ldr	r2, [r2, #0]
    aa34:	466b      	mov	r3, sp
    aa36:	f04f 0c01 	mov.w	ip, #1
    aa3a:	f8c3 c008 	str.w	ip, [r3, #8]
    aa3e:	605a      	str	r2, [r3, #4]
    aa40:	f8c3 c000 	str.w	ip, [r3]
    aa44:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    aa48:	2202      	movs	r2, #2
    aa4a:	f50d 63de 	add.w	r3, sp, #1776	; 0x6f0
    aa4e:	99d2      	ldr	r1, [sp, #840]	; 0x348
    aa50:	f003 f9c9 	bl	dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    aa54:	e7ff      	b.n	aa56 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xeb6>
    aa56:	f8dd 16cc 	ldr.w	r1, [sp, #1740]	; 0x6cc
    aa5a:	f64e 1054 	movw	r0, #59732	; 0xe954
    aa5e:	f2c0 0001 	movt	r0, #1
    aa62:	6802      	ldr	r2, [r0, #0]
    aa64:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    aa68:	f004 f989 	bl	ed7e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    aa6c:	e7ff      	b.n	aa6e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xece>
    aa6e:	e7ff      	b.n	aa70 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xed0>
                self.v[x] = kk;
    aa70:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    aa74:	280f      	cmp	r0, #15
    aa76:	f202 85ea 	bhi.w	d64e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3aae>
    aa7a:	e7ff      	b.n	aa7c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xedc>
    aa7c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    aa80:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    aa84:	1842      	adds	r2, r0, r1
    aa86:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    aa8a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    aa8e:	f002 bb3d 	b.w	d10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    aa92:	2005      	movs	r0, #5
    aa94:	f8cd 06fc 	str.w	r0, [sp, #1788]	; 0x6fc
    aa98:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    aa9c:	f2c0 0001 	movt	r0, #1
    aaa0:	6801      	ldr	r1, [r0, #0]
    aaa2:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    aaa6:	f007 ffd5 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    aaaa:	90cf      	str	r0, [sp, #828]	; 0x33c
    aaac:	e01f      	b.n	aaee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf4e>
    aaae:	2001      	movs	r0, #1
    aab0:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    aab4:	e015      	b.n	aae2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf42>
    aab6:	2000      	movs	r0, #0
    aab8:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    aabc:	e011      	b.n	aae2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf42>
    aabe:	2000      	movs	r0, #0
    aac0:	f88d 0df3 	strb.w	r0, [sp, #3571]	; 0xdf3
    aac4:	f89d 1df3 	ldrb.w	r1, [sp, #3571]	; 0xdf3
    aac8:	f640 2000 	movw	r0, #2560	; 0xa00
    aacc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    aad0:	f007 ffcc 	bl	12a6c <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    aad4:	f8cd 0df4 	str.w	r0, [sp, #3572]	; 0xdf4
    aad8:	f8dd 0df4 	ldr.w	r0, [sp, #3572]	; 0xdf4
    aadc:	f8cd 0704 	str.w	r0, [sp, #1796]	; 0x704
    aae0:	e00a      	b.n	aaf8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf58>
    aae2:	f89d 0703 	ldrb.w	r0, [sp, #1795]	; 0x703
    aae6:	07c0      	lsls	r0, r0, #31
    aae8:	2800      	cmp	r0, #0
    aaea:	d112      	bne.n	ab12 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf72>
    aaec:	e055      	b.n	ab9a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xffa>
    aaee:	98cf      	ldr	r0, [sp, #828]	; 0x33c
    aaf0:	07c1      	lsls	r1, r0, #31
    aaf2:	2900      	cmp	r1, #0
    aaf4:	d1e3      	bne.n	aabe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf1e>
    aaf6:	e7de      	b.n	aab6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf16>
    aaf8:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    aafc:	f20d 7104 	addw	r1, sp, #1796	; 0x704
    ab00:	f007 ffa8 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    ab04:	90ce      	str	r0, [sp, #824]	; 0x338
    ab06:	e7ff      	b.n	ab08 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf68>
    ab08:	98ce      	ldr	r0, [sp, #824]	; 0x338
    ab0a:	07c1      	lsls	r1, r0, #31
    ab0c:	2900      	cmp	r1, #0
    ab0e:	d1ce      	bne.n	aaae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf0e>
    ab10:	e7d1      	b.n	aab6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf16>
                trace!("[{:04x}] ADD Vx, kk", self.pc);
    ab12:	f64e 00d4 	movw	r0, #59604	; 0xe8d4
    ab16:	f2c0 0001 	movt	r0, #1
    ab1a:	6801      	ldr	r1, [r0, #0]
    ab1c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ab20:	f100 0212 	add.w	r2, r0, #18
    ab24:	f8cd 2728 	str.w	r2, [sp, #1832]	; 0x728
    ab28:	f8dd 2728 	ldr.w	r2, [sp, #1832]	; 0x728
    ab2c:	f8cd 2d58 	str.w	r2, [sp, #3416]	; 0xd58
    ab30:	f248 13bb 	movw	r3, #33211	; 0x81bb
    ab34:	f2c0 0301 	movt	r3, #1
    ab38:	4610      	mov	r0, r2
    ab3a:	91cd      	str	r1, [sp, #820]	; 0x334
    ab3c:	4619      	mov	r1, r3
    ab3e:	f007 f8a7 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ab42:	90cc      	str	r0, [sp, #816]	; 0x330
    ab44:	91cb      	str	r1, [sp, #812]	; 0x32c
    ab46:	e7ff      	b.n	ab48 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xfa8>
    ab48:	98cc      	ldr	r0, [sp, #816]	; 0x330
    ab4a:	f8cd 0720 	str.w	r0, [sp, #1824]	; 0x720
    ab4e:	99cb      	ldr	r1, [sp, #812]	; 0x32c
    ab50:	f8cd 1724 	str.w	r1, [sp, #1828]	; 0x724
    ab54:	f64d 6228 	movw	r2, #56872	; 0xde28
    ab58:	f2c0 0201 	movt	r2, #1
    ab5c:	6812      	ldr	r2, [r2, #0]
    ab5e:	466b      	mov	r3, sp
    ab60:	f04f 0c01 	mov.w	ip, #1
    ab64:	f8c3 c008 	str.w	ip, [r3, #8]
    ab68:	605a      	str	r2, [r3, #4]
    ab6a:	f8c3 c000 	str.w	ip, [r3]
    ab6e:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    ab72:	2202      	movs	r2, #2
    ab74:	f50d 63e4 	add.w	r3, sp, #1824	; 0x720
    ab78:	99cd      	ldr	r1, [sp, #820]	; 0x334
    ab7a:	f003 f934 	bl	dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    ab7e:	e7ff      	b.n	ab80 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xfe0>
    ab80:	f8dd 16fc 	ldr.w	r1, [sp, #1788]	; 0x6fc
    ab84:	f64e 00f4 	movw	r0, #59636	; 0xe8f4
    ab88:	f2c0 0001 	movt	r0, #1
    ab8c:	6802      	ldr	r2, [r0, #0]
    ab8e:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    ab92:	f004 f8f4 	bl	ed7e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ab96:	e7ff      	b.n	ab98 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xff8>
    ab98:	e7ff      	b.n	ab9a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xffa>
                self.v[x] = self.v[x].wrapping_add(kk);
    ab9a:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ab9e:	280f      	cmp	r0, #15
    aba0:	f202 8541 	bhi.w	d626 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a86>
    aba4:	e7ff      	b.n	aba6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1006>
    aba6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    abaa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    abae:	1842      	adds	r2, r0, r1
    abb0:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    abb4:	f8dd 145c 	ldr.w	r1, [sp, #1116]	; 0x45c
    abb8:	f007 ff97 	bl	12aea <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17hac8dfc997b9c24ecE>
    abbc:	90ca      	str	r0, [sp, #808]	; 0x328
    abbe:	e7ff      	b.n	abc0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1020>
    abc0:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    abc4:	280f      	cmp	r0, #15
    abc6:	f202 8538 	bhi.w	d63a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a9a>
    abca:	e7ff      	b.n	abcc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x102c>
    abcc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    abd0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    abd4:	1842      	adds	r2, r0, r1
    abd6:	9bca      	ldr	r3, [sp, #808]	; 0x328
    abd8:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    abdc:	f002 ba96 	b.w	d10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    abe0:	2005      	movs	r0, #5
    abe2:	f8cd 072c 	str.w	r0, [sp, #1836]	; 0x72c
    abe6:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    abea:	f2c0 0001 	movt	r0, #1
    abee:	6801      	ldr	r1, [r0, #0]
    abf0:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    abf4:	f007 ff2e 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    abf8:	90c9      	str	r0, [sp, #804]	; 0x324
    abfa:	e01f      	b.n	ac3c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x109c>
    abfc:	2001      	movs	r0, #1
    abfe:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    ac02:	e015      	b.n	ac30 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1090>
    ac04:	2000      	movs	r0, #0
    ac06:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    ac0a:	e011      	b.n	ac30 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1090>
    ac0c:	2000      	movs	r0, #0
    ac0e:	f88d 0dfb 	strb.w	r0, [sp, #3579]	; 0xdfb
    ac12:	f89d 1dfb 	ldrb.w	r1, [sp, #3579]	; 0xdfb
    ac16:	f640 2000 	movw	r0, #2560	; 0xa00
    ac1a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ac1e:	f007 ff25 	bl	12a6c <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    ac22:	f8cd 0dfc 	str.w	r0, [sp, #3580]	; 0xdfc
    ac26:	f8dd 0dfc 	ldr.w	r0, [sp, #3580]	; 0xdfc
    ac2a:	f8cd 0734 	str.w	r0, [sp, #1844]	; 0x734
    ac2e:	e00a      	b.n	ac46 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x10a6>
    ac30:	f89d 0733 	ldrb.w	r0, [sp, #1843]	; 0x733
    ac34:	07c0      	lsls	r0, r0, #31
    ac36:	2800      	cmp	r0, #0
    ac38:	d112      	bne.n	ac60 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x10c0>
    ac3a:	e055      	b.n	ace8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1148>
    ac3c:	98c9      	ldr	r0, [sp, #804]	; 0x324
    ac3e:	07c1      	lsls	r1, r0, #31
    ac40:	2900      	cmp	r1, #0
    ac42:	d1e3      	bne.n	ac0c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x106c>
    ac44:	e7de      	b.n	ac04 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1064>
    ac46:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    ac4a:	f20d 7134 	addw	r1, sp, #1844	; 0x734
    ac4e:	f007 ff01 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    ac52:	90c8      	str	r0, [sp, #800]	; 0x320
    ac54:	e7ff      	b.n	ac56 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x10b6>
    ac56:	98c8      	ldr	r0, [sp, #800]	; 0x320
    ac58:	07c1      	lsls	r1, r0, #31
    ac5a:	2900      	cmp	r1, #0
    ac5c:	d1ce      	bne.n	abfc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x105c>
    ac5e:	e7d1      	b.n	ac04 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1064>
                trace!("[{:04x}] LD Vx, Vy", self.pc);
    ac60:	f64e 0074 	movw	r0, #59508	; 0xe874
    ac64:	f2c0 0001 	movt	r0, #1
    ac68:	6801      	ldr	r1, [r0, #0]
    ac6a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ac6e:	f100 0212 	add.w	r2, r0, #18
    ac72:	f8cd 2758 	str.w	r2, [sp, #1880]	; 0x758
    ac76:	f8dd 2758 	ldr.w	r2, [sp, #1880]	; 0x758
    ac7a:	f8cd 2d54 	str.w	r2, [sp, #3412]	; 0xd54
    ac7e:	f248 13bb 	movw	r3, #33211	; 0x81bb
    ac82:	f2c0 0301 	movt	r3, #1
    ac86:	4610      	mov	r0, r2
    ac88:	91c7      	str	r1, [sp, #796]	; 0x31c
    ac8a:	4619      	mov	r1, r3
    ac8c:	f007 f800 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ac90:	90c6      	str	r0, [sp, #792]	; 0x318
    ac92:	91c5      	str	r1, [sp, #788]	; 0x314
    ac94:	e7ff      	b.n	ac96 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x10f6>
    ac96:	98c6      	ldr	r0, [sp, #792]	; 0x318
    ac98:	f8cd 0750 	str.w	r0, [sp, #1872]	; 0x750
    ac9c:	99c5      	ldr	r1, [sp, #788]	; 0x314
    ac9e:	f8cd 1754 	str.w	r1, [sp, #1876]	; 0x754
    aca2:	f64d 6228 	movw	r2, #56872	; 0xde28
    aca6:	f2c0 0201 	movt	r2, #1
    acaa:	6812      	ldr	r2, [r2, #0]
    acac:	466b      	mov	r3, sp
    acae:	f04f 0c01 	mov.w	ip, #1
    acb2:	f8c3 c008 	str.w	ip, [r3, #8]
    acb6:	605a      	str	r2, [r3, #4]
    acb8:	f8c3 c000 	str.w	ip, [r3]
    acbc:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    acc0:	2202      	movs	r2, #2
    acc2:	f50d 63ea 	add.w	r3, sp, #1872	; 0x750
    acc6:	99c7      	ldr	r1, [sp, #796]	; 0x31c
    acc8:	f003 f88d 	bl	dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    accc:	e7ff      	b.n	acce <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x112e>
    acce:	f8dd 172c 	ldr.w	r1, [sp, #1836]	; 0x72c
    acd2:	f64e 0094 	movw	r0, #59540	; 0xe894
    acd6:	f2c0 0001 	movt	r0, #1
    acda:	6802      	ldr	r2, [r0, #0]
    acdc:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    ace0:	f004 f84d 	bl	ed7e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ace4:	e7ff      	b.n	ace6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1146>
    ace6:	e7ff      	b.n	ace8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1148>
                self.v[x] = self.v[y];
    ace8:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    acec:	280f      	cmp	r0, #15
    acee:	f202 8486 	bhi.w	d5fe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a5e>
    acf2:	e7ff      	b.n	acf4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1154>
    acf4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    acf8:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    acfc:	1842      	adds	r2, r0, r1
    acfe:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ad02:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    ad06:	2b0f      	cmp	r3, #15
    ad08:	92c4      	str	r2, [sp, #784]	; 0x310
    ad0a:	f202 8482 	bhi.w	d612 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a72>
    ad0e:	e7ff      	b.n	ad10 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1170>
    ad10:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ad14:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ad18:	1842      	adds	r2, r0, r1
    ad1a:	9bc4      	ldr	r3, [sp, #784]	; 0x310
    ad1c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    ad20:	f002 b9f4 	b.w	d10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    ad24:	2005      	movs	r0, #5
    ad26:	f8cd 075c 	str.w	r0, [sp, #1884]	; 0x75c
    ad2a:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    ad2e:	f2c0 0001 	movt	r0, #1
    ad32:	6801      	ldr	r1, [r0, #0]
    ad34:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    ad38:	f007 fe8c 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    ad3c:	90c3      	str	r0, [sp, #780]	; 0x30c
    ad3e:	e01f      	b.n	ad80 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11e0>
    ad40:	2001      	movs	r0, #1
    ad42:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    ad46:	e015      	b.n	ad74 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11d4>
    ad48:	2000      	movs	r0, #0
    ad4a:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    ad4e:	e011      	b.n	ad74 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11d4>
    ad50:	2000      	movs	r0, #0
    ad52:	f88d 0e03 	strb.w	r0, [sp, #3587]	; 0xe03
    ad56:	f89d 1e03 	ldrb.w	r1, [sp, #3587]	; 0xe03
    ad5a:	f640 2000 	movw	r0, #2560	; 0xa00
    ad5e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ad62:	f007 fe83 	bl	12a6c <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    ad66:	f8cd 0e04 	str.w	r0, [sp, #3588]	; 0xe04
    ad6a:	f8dd 0e04 	ldr.w	r0, [sp, #3588]	; 0xe04
    ad6e:	f8cd 0764 	str.w	r0, [sp, #1892]	; 0x764
    ad72:	e00a      	b.n	ad8a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11ea>
    ad74:	f89d 0763 	ldrb.w	r0, [sp, #1891]	; 0x763
    ad78:	07c0      	lsls	r0, r0, #31
    ad7a:	2800      	cmp	r0, #0
    ad7c:	d112      	bne.n	ada4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1204>
    ad7e:	e055      	b.n	ae2c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x128c>
    ad80:	98c3      	ldr	r0, [sp, #780]	; 0x30c
    ad82:	07c1      	lsls	r1, r0, #31
    ad84:	2900      	cmp	r1, #0
    ad86:	d1e3      	bne.n	ad50 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11b0>
    ad88:	e7de      	b.n	ad48 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11a8>
    ad8a:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    ad8e:	f20d 7164 	addw	r1, sp, #1892	; 0x764
    ad92:	f007 fe5f 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    ad96:	90c2      	str	r0, [sp, #776]	; 0x308
    ad98:	e7ff      	b.n	ad9a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11fa>
    ad9a:	98c2      	ldr	r0, [sp, #776]	; 0x308
    ad9c:	07c1      	lsls	r1, r0, #31
    ad9e:	2900      	cmp	r1, #0
    ada0:	d1ce      	bne.n	ad40 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11a0>
    ada2:	e7d1      	b.n	ad48 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11a8>
                trace!("[{:04x}] OR Vx, Vy", self.pc);
    ada4:	f64e 0014 	movw	r0, #59412	; 0xe814
    ada8:	f2c0 0001 	movt	r0, #1
    adac:	6801      	ldr	r1, [r0, #0]
    adae:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    adb2:	f100 0212 	add.w	r2, r0, #18
    adb6:	f8cd 2788 	str.w	r2, [sp, #1928]	; 0x788
    adba:	f8dd 2788 	ldr.w	r2, [sp, #1928]	; 0x788
    adbe:	f8cd 2d50 	str.w	r2, [sp, #3408]	; 0xd50
    adc2:	f248 13bb 	movw	r3, #33211	; 0x81bb
    adc6:	f2c0 0301 	movt	r3, #1
    adca:	4610      	mov	r0, r2
    adcc:	91c1      	str	r1, [sp, #772]	; 0x304
    adce:	4619      	mov	r1, r3
    add0:	f006 ff5e 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    add4:	90c0      	str	r0, [sp, #768]	; 0x300
    add6:	91bf      	str	r1, [sp, #764]	; 0x2fc
    add8:	e7ff      	b.n	adda <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x123a>
    adda:	98c0      	ldr	r0, [sp, #768]	; 0x300
    addc:	f8cd 0780 	str.w	r0, [sp, #1920]	; 0x780
    ade0:	99bf      	ldr	r1, [sp, #764]	; 0x2fc
    ade2:	f8cd 1784 	str.w	r1, [sp, #1924]	; 0x784
    ade6:	f64d 6228 	movw	r2, #56872	; 0xde28
    adea:	f2c0 0201 	movt	r2, #1
    adee:	6812      	ldr	r2, [r2, #0]
    adf0:	466b      	mov	r3, sp
    adf2:	f04f 0c01 	mov.w	ip, #1
    adf6:	f8c3 c008 	str.w	ip, [r3, #8]
    adfa:	605a      	str	r2, [r3, #4]
    adfc:	f8c3 c000 	str.w	ip, [r3]
    ae00:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    ae04:	2202      	movs	r2, #2
    ae06:	f50d 63f0 	add.w	r3, sp, #1920	; 0x780
    ae0a:	99c1      	ldr	r1, [sp, #772]	; 0x304
    ae0c:	f002 ffeb 	bl	dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    ae10:	e7ff      	b.n	ae12 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1272>
    ae12:	f8dd 175c 	ldr.w	r1, [sp, #1884]	; 0x75c
    ae16:	f64e 0034 	movw	r0, #59444	; 0xe834
    ae1a:	f2c0 0001 	movt	r0, #1
    ae1e:	6802      	ldr	r2, [r0, #0]
    ae20:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    ae24:	f003 ffab 	bl	ed7e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ae28:	e7ff      	b.n	ae2a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x128a>
    ae2a:	e7ff      	b.n	ae2c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x128c>
                self.v[x] |= self.v[y];
    ae2c:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    ae30:	280f      	cmp	r0, #15
    ae32:	f202 83d0 	bhi.w	d5d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a36>
    ae36:	e7ff      	b.n	ae38 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1298>
    ae38:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ae3c:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    ae40:	1842      	adds	r2, r0, r1
    ae42:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ae46:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    ae4a:	2b0f      	cmp	r3, #15
    ae4c:	92be      	str	r2, [sp, #760]	; 0x2f8
    ae4e:	f202 83cc 	bhi.w	d5ea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a4a>
    ae52:	e7ff      	b.n	ae54 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x12b4>
    ae54:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ae58:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ae5c:	1842      	adds	r2, r0, r1
    ae5e:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    ae62:	f8dd c2f8 	ldr.w	ip, [sp, #760]	; 0x2f8
    ae66:	ea43 030c 	orr.w	r3, r3, ip
    ae6a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    ae6e:	f002 b94d 	b.w	d10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    ae72:	2005      	movs	r0, #5
    ae74:	f8cd 078c 	str.w	r0, [sp, #1932]	; 0x78c
    ae78:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    ae7c:	f2c0 0001 	movt	r0, #1
    ae80:	6801      	ldr	r1, [r0, #0]
    ae82:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    ae86:	f007 fde5 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    ae8a:	90bd      	str	r0, [sp, #756]	; 0x2f4
    ae8c:	e01f      	b.n	aece <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x132e>
    ae8e:	2001      	movs	r0, #1
    ae90:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    ae94:	e015      	b.n	aec2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1322>
    ae96:	2000      	movs	r0, #0
    ae98:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    ae9c:	e011      	b.n	aec2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1322>
    ae9e:	2000      	movs	r0, #0
    aea0:	f88d 0e0b 	strb.w	r0, [sp, #3595]	; 0xe0b
    aea4:	f89d 1e0b 	ldrb.w	r1, [sp, #3595]	; 0xe0b
    aea8:	f640 2000 	movw	r0, #2560	; 0xa00
    aeac:	f2c2 0000 	movt	r0, #8192	; 0x2000
    aeb0:	f007 fddc 	bl	12a6c <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    aeb4:	f8cd 0e0c 	str.w	r0, [sp, #3596]	; 0xe0c
    aeb8:	f8dd 0e0c 	ldr.w	r0, [sp, #3596]	; 0xe0c
    aebc:	f8cd 0794 	str.w	r0, [sp, #1940]	; 0x794
    aec0:	e00a      	b.n	aed8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1338>
    aec2:	f89d 0793 	ldrb.w	r0, [sp, #1939]	; 0x793
    aec6:	07c0      	lsls	r0, r0, #31
    aec8:	2800      	cmp	r0, #0
    aeca:	d112      	bne.n	aef2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1352>
    aecc:	e055      	b.n	af7a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x13da>
    aece:	98bd      	ldr	r0, [sp, #756]	; 0x2f4
    aed0:	07c1      	lsls	r1, r0, #31
    aed2:	2900      	cmp	r1, #0
    aed4:	d1e3      	bne.n	ae9e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x12fe>
    aed6:	e7de      	b.n	ae96 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x12f6>
    aed8:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    aedc:	f20d 7194 	addw	r1, sp, #1940	; 0x794
    aee0:	f007 fdb8 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    aee4:	90bc      	str	r0, [sp, #752]	; 0x2f0
    aee6:	e7ff      	b.n	aee8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1348>
    aee8:	98bc      	ldr	r0, [sp, #752]	; 0x2f0
    aeea:	07c1      	lsls	r1, r0, #31
    aeec:	2900      	cmp	r1, #0
    aeee:	d1ce      	bne.n	ae8e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x12ee>
    aef0:	e7d1      	b.n	ae96 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x12f6>
                trace!("[{:04x}] AND Vx, Vy", self.pc);
    aef2:	f24e 70b4 	movw	r0, #59316	; 0xe7b4
    aef6:	f2c0 0001 	movt	r0, #1
    aefa:	6801      	ldr	r1, [r0, #0]
    aefc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    af00:	f100 0212 	add.w	r2, r0, #18
    af04:	f8cd 27b8 	str.w	r2, [sp, #1976]	; 0x7b8
    af08:	f8dd 27b8 	ldr.w	r2, [sp, #1976]	; 0x7b8
    af0c:	f8cd 2d4c 	str.w	r2, [sp, #3404]	; 0xd4c
    af10:	f248 13bb 	movw	r3, #33211	; 0x81bb
    af14:	f2c0 0301 	movt	r3, #1
    af18:	4610      	mov	r0, r2
    af1a:	91bb      	str	r1, [sp, #748]	; 0x2ec
    af1c:	4619      	mov	r1, r3
    af1e:	f006 feb7 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    af22:	90ba      	str	r0, [sp, #744]	; 0x2e8
    af24:	91b9      	str	r1, [sp, #740]	; 0x2e4
    af26:	e7ff      	b.n	af28 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1388>
    af28:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
    af2a:	f8cd 07b0 	str.w	r0, [sp, #1968]	; 0x7b0
    af2e:	99b9      	ldr	r1, [sp, #740]	; 0x2e4
    af30:	f8cd 17b4 	str.w	r1, [sp, #1972]	; 0x7b4
    af34:	f64d 6228 	movw	r2, #56872	; 0xde28
    af38:	f2c0 0201 	movt	r2, #1
    af3c:	6812      	ldr	r2, [r2, #0]
    af3e:	466b      	mov	r3, sp
    af40:	f04f 0c01 	mov.w	ip, #1
    af44:	f8c3 c008 	str.w	ip, [r3, #8]
    af48:	605a      	str	r2, [r3, #4]
    af4a:	f8c3 c000 	str.w	ip, [r3]
    af4e:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    af52:	2202      	movs	r2, #2
    af54:	f50d 63f6 	add.w	r3, sp, #1968	; 0x7b0
    af58:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
    af5a:	f002 ff44 	bl	dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    af5e:	e7ff      	b.n	af60 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x13c0>
    af60:	f8dd 178c 	ldr.w	r1, [sp, #1932]	; 0x78c
    af64:	f24e 70d4 	movw	r0, #59348	; 0xe7d4
    af68:	f2c0 0001 	movt	r0, #1
    af6c:	6802      	ldr	r2, [r0, #0]
    af6e:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    af72:	f003 ff04 	bl	ed7e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    af76:	e7ff      	b.n	af78 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x13d8>
    af78:	e7ff      	b.n	af7a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x13da>
                self.v[x] &= self.v[y];
    af7a:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    af7e:	280f      	cmp	r0, #15
    af80:	f202 8315 	bhi.w	d5ae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a0e>
    af84:	e7ff      	b.n	af86 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x13e6>
    af86:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    af8a:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    af8e:	1842      	adds	r2, r0, r1
    af90:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    af94:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    af98:	2b0f      	cmp	r3, #15
    af9a:	92b8      	str	r2, [sp, #736]	; 0x2e0
    af9c:	f202 8311 	bhi.w	d5c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a22>
    afa0:	e7ff      	b.n	afa2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1402>
    afa2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    afa6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    afaa:	1842      	adds	r2, r0, r1
    afac:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    afb0:	f8dd c2e0 	ldr.w	ip, [sp, #736]	; 0x2e0
    afb4:	ea03 030c 	and.w	r3, r3, ip
    afb8:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    afbc:	f002 b8a6 	b.w	d10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    afc0:	2005      	movs	r0, #5
    afc2:	f8cd 07bc 	str.w	r0, [sp, #1980]	; 0x7bc
    afc6:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    afca:	f2c0 0001 	movt	r0, #1
    afce:	6801      	ldr	r1, [r0, #0]
    afd0:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    afd4:	f007 fd3e 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    afd8:	90b7      	str	r0, [sp, #732]	; 0x2dc
    afda:	e01f      	b.n	b01c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x147c>
    afdc:	2001      	movs	r0, #1
    afde:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    afe2:	e015      	b.n	b010 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1470>
    afe4:	2000      	movs	r0, #0
    afe6:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    afea:	e011      	b.n	b010 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1470>
    afec:	2000      	movs	r0, #0
    afee:	f88d 0e13 	strb.w	r0, [sp, #3603]	; 0xe13
    aff2:	f89d 1e13 	ldrb.w	r1, [sp, #3603]	; 0xe13
    aff6:	f640 2000 	movw	r0, #2560	; 0xa00
    affa:	f2c2 0000 	movt	r0, #8192	; 0x2000
    affe:	f007 fd35 	bl	12a6c <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    b002:	f8cd 0e14 	str.w	r0, [sp, #3604]	; 0xe14
    b006:	f8dd 0e14 	ldr.w	r0, [sp, #3604]	; 0xe14
    b00a:	f8cd 07c4 	str.w	r0, [sp, #1988]	; 0x7c4
    b00e:	e00a      	b.n	b026 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1486>
    b010:	f89d 07c3 	ldrb.w	r0, [sp, #1987]	; 0x7c3
    b014:	07c0      	lsls	r0, r0, #31
    b016:	2800      	cmp	r0, #0
    b018:	d112      	bne.n	b040 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x14a0>
    b01a:	e055      	b.n	b0c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1528>
    b01c:	98b7      	ldr	r0, [sp, #732]	; 0x2dc
    b01e:	07c1      	lsls	r1, r0, #31
    b020:	2900      	cmp	r1, #0
    b022:	d1e3      	bne.n	afec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x144c>
    b024:	e7de      	b.n	afe4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1444>
    b026:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    b02a:	f20d 71c4 	addw	r1, sp, #1988	; 0x7c4
    b02e:	f007 fd11 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b032:	90b6      	str	r0, [sp, #728]	; 0x2d8
    b034:	e7ff      	b.n	b036 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1496>
    b036:	98b6      	ldr	r0, [sp, #728]	; 0x2d8
    b038:	07c1      	lsls	r1, r0, #31
    b03a:	2900      	cmp	r1, #0
    b03c:	d1ce      	bne.n	afdc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x143c>
    b03e:	e7d1      	b.n	afe4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1444>
                trace!("[{:04x}] XOR Vx, Vy", self.pc);
    b040:	f24e 7054 	movw	r0, #59220	; 0xe754
    b044:	f2c0 0001 	movt	r0, #1
    b048:	6801      	ldr	r1, [r0, #0]
    b04a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b04e:	f100 0212 	add.w	r2, r0, #18
    b052:	f8cd 27e8 	str.w	r2, [sp, #2024]	; 0x7e8
    b056:	f8dd 27e8 	ldr.w	r2, [sp, #2024]	; 0x7e8
    b05a:	f8cd 2d48 	str.w	r2, [sp, #3400]	; 0xd48
    b05e:	f248 13bb 	movw	r3, #33211	; 0x81bb
    b062:	f2c0 0301 	movt	r3, #1
    b066:	4610      	mov	r0, r2
    b068:	91b5      	str	r1, [sp, #724]	; 0x2d4
    b06a:	4619      	mov	r1, r3
    b06c:	f006 fe10 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b070:	90b4      	str	r0, [sp, #720]	; 0x2d0
    b072:	91b3      	str	r1, [sp, #716]	; 0x2cc
    b074:	e7ff      	b.n	b076 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x14d6>
    b076:	98b4      	ldr	r0, [sp, #720]	; 0x2d0
    b078:	f8cd 07e0 	str.w	r0, [sp, #2016]	; 0x7e0
    b07c:	99b3      	ldr	r1, [sp, #716]	; 0x2cc
    b07e:	f8cd 17e4 	str.w	r1, [sp, #2020]	; 0x7e4
    b082:	f64d 6228 	movw	r2, #56872	; 0xde28
    b086:	f2c0 0201 	movt	r2, #1
    b08a:	6812      	ldr	r2, [r2, #0]
    b08c:	466b      	mov	r3, sp
    b08e:	f04f 0c01 	mov.w	ip, #1
    b092:	f8c3 c008 	str.w	ip, [r3, #8]
    b096:	605a      	str	r2, [r3, #4]
    b098:	f8c3 c000 	str.w	ip, [r3]
    b09c:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    b0a0:	2202      	movs	r2, #2
    b0a2:	f50d 63fc 	add.w	r3, sp, #2016	; 0x7e0
    b0a6:	99b5      	ldr	r1, [sp, #724]	; 0x2d4
    b0a8:	f002 fe9d 	bl	dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    b0ac:	e7ff      	b.n	b0ae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x150e>
    b0ae:	f8dd 17bc 	ldr.w	r1, [sp, #1980]	; 0x7bc
    b0b2:	f24e 7074 	movw	r0, #59252	; 0xe774
    b0b6:	f2c0 0001 	movt	r0, #1
    b0ba:	6802      	ldr	r2, [r0, #0]
    b0bc:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    b0c0:	f003 fe5d 	bl	ed7e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b0c4:	e7ff      	b.n	b0c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1526>
    b0c6:	e7ff      	b.n	b0c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1528>
                self.v[x] ^= self.v[y];
    b0c8:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    b0cc:	280f      	cmp	r0, #15
    b0ce:	f202 825a 	bhi.w	d586 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x39e6>
    b0d2:	e7ff      	b.n	b0d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1534>
    b0d4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b0d8:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    b0dc:	1842      	adds	r2, r0, r1
    b0de:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b0e2:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    b0e6:	2b0f      	cmp	r3, #15
    b0e8:	92b2      	str	r2, [sp, #712]	; 0x2c8
    b0ea:	f202 8256 	bhi.w	d59a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x39fa>
    b0ee:	e7ff      	b.n	b0f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1550>
    b0f0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b0f4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b0f8:	1842      	adds	r2, r0, r1
    b0fa:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    b0fe:	f8dd c2c8 	ldr.w	ip, [sp, #712]	; 0x2c8
    b102:	ea83 030c 	eor.w	r3, r3, ip
    b106:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    b10a:	f001 bfff 	b.w	d10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    b10e:	2005      	movs	r0, #5
    b110:	f8cd 07ec 	str.w	r0, [sp, #2028]	; 0x7ec
    b114:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    b118:	f2c0 0001 	movt	r0, #1
    b11c:	6801      	ldr	r1, [r0, #0]
    b11e:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    b122:	f007 fc97 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b126:	90b1      	str	r0, [sp, #708]	; 0x2c4
    b128:	e01f      	b.n	b16a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x15ca>
    b12a:	2001      	movs	r0, #1
    b12c:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    b130:	e015      	b.n	b15e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x15be>
    b132:	2000      	movs	r0, #0
    b134:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    b138:	e011      	b.n	b15e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x15be>
    b13a:	2000      	movs	r0, #0
    b13c:	f88d 0e1b 	strb.w	r0, [sp, #3611]	; 0xe1b
    b140:	f89d 1e1b 	ldrb.w	r1, [sp, #3611]	; 0xe1b
    b144:	f640 2000 	movw	r0, #2560	; 0xa00
    b148:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b14c:	f007 fc8e 	bl	12a6c <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    b150:	f8cd 0e1c 	str.w	r0, [sp, #3612]	; 0xe1c
    b154:	f8dd 0e1c 	ldr.w	r0, [sp, #3612]	; 0xe1c
    b158:	f8cd 07f4 	str.w	r0, [sp, #2036]	; 0x7f4
    b15c:	e00a      	b.n	b174 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x15d4>
    b15e:	f89d 07f3 	ldrb.w	r0, [sp, #2035]	; 0x7f3
    b162:	07c0      	lsls	r0, r0, #31
    b164:	2800      	cmp	r0, #0
    b166:	d112      	bne.n	b18e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x15ee>
    b168:	e055      	b.n	b216 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1676>
    b16a:	98b1      	ldr	r0, [sp, #708]	; 0x2c4
    b16c:	07c1      	lsls	r1, r0, #31
    b16e:	2900      	cmp	r1, #0
    b170:	d1e3      	bne.n	b13a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x159a>
    b172:	e7de      	b.n	b132 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1592>
    b174:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    b178:	f20d 71f4 	addw	r1, sp, #2036	; 0x7f4
    b17c:	f007 fc6a 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b180:	90b0      	str	r0, [sp, #704]	; 0x2c0
    b182:	e7ff      	b.n	b184 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x15e4>
    b184:	98b0      	ldr	r0, [sp, #704]	; 0x2c0
    b186:	07c1      	lsls	r1, r0, #31
    b188:	2900      	cmp	r1, #0
    b18a:	d1ce      	bne.n	b12a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x158a>
    b18c:	e7d1      	b.n	b132 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1592>
                trace!("[{:04x}] ADD Vx, Vy", self.pc);
    b18e:	f24e 60e4 	movw	r0, #59108	; 0xe6e4
    b192:	f2c0 0001 	movt	r0, #1
    b196:	6801      	ldr	r1, [r0, #0]
    b198:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b19c:	f100 0212 	add.w	r2, r0, #18
    b1a0:	f8cd 2818 	str.w	r2, [sp, #2072]	; 0x818
    b1a4:	f8dd 2818 	ldr.w	r2, [sp, #2072]	; 0x818
    b1a8:	f8cd 2d40 	str.w	r2, [sp, #3392]	; 0xd40
    b1ac:	f248 13bb 	movw	r3, #33211	; 0x81bb
    b1b0:	f2c0 0301 	movt	r3, #1
    b1b4:	4610      	mov	r0, r2
    b1b6:	91af      	str	r1, [sp, #700]	; 0x2bc
    b1b8:	4619      	mov	r1, r3
    b1ba:	f006 fd69 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b1be:	90ae      	str	r0, [sp, #696]	; 0x2b8
    b1c0:	91ad      	str	r1, [sp, #692]	; 0x2b4
    b1c2:	e7ff      	b.n	b1c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1624>
    b1c4:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
    b1c6:	f8cd 0810 	str.w	r0, [sp, #2064]	; 0x810
    b1ca:	99ad      	ldr	r1, [sp, #692]	; 0x2b4
    b1cc:	f8cd 1814 	str.w	r1, [sp, #2068]	; 0x814
    b1d0:	f64d 6228 	movw	r2, #56872	; 0xde28
    b1d4:	f2c0 0201 	movt	r2, #1
    b1d8:	6812      	ldr	r2, [r2, #0]
    b1da:	466b      	mov	r3, sp
    b1dc:	f04f 0c01 	mov.w	ip, #1
    b1e0:	f8c3 c008 	str.w	ip, [r3, #8]
    b1e4:	605a      	str	r2, [r3, #4]
    b1e6:	f8c3 c000 	str.w	ip, [r3]
    b1ea:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    b1ee:	2202      	movs	r2, #2
    b1f0:	f50d 6301 	add.w	r3, sp, #2064	; 0x810
    b1f4:	99af      	ldr	r1, [sp, #700]	; 0x2bc
    b1f6:	f002 fdf6 	bl	dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    b1fa:	e7ff      	b.n	b1fc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x165c>
    b1fc:	f8dd 17ec 	ldr.w	r1, [sp, #2028]	; 0x7ec
    b200:	f24e 7004 	movw	r0, #59140	; 0xe704
    b204:	f2c0 0001 	movt	r0, #1
    b208:	6802      	ldr	r2, [r0, #0]
    b20a:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    b20e:	f003 fdb6 	bl	ed7e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b212:	e7ff      	b.n	b214 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1674>
    b214:	e7ff      	b.n	b216 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1676>
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
    b216:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    b21a:	280f      	cmp	r0, #15
    b21c:	f202 8195 	bhi.w	d54a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x39aa>
    b220:	e7ff      	b.n	b222 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1682>
    b222:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b226:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b22a:	1842      	adds	r2, r0, r1
    b22c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b230:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    b234:	2b0f      	cmp	r3, #15
    b236:	92ac      	str	r2, [sp, #688]	; 0x2b0
    b238:	f202 8191 	bhi.w	d55e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x39be>
    b23c:	e7ff      	b.n	b23e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x169e>
    b23e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b242:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    b246:	1842      	adds	r2, r0, r1
    b248:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    b24c:	98ac      	ldr	r0, [sp, #688]	; 0x2b0
    b24e:	f007 fc92 	bl	12b76 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h86687d23966cf72aE>
    b252:	90ab      	str	r0, [sp, #684]	; 0x2ac
    b254:	91aa      	str	r1, [sp, #680]	; 0x2a8
    b256:	e7ff      	b.n	b258 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x16b8>
    b258:	98ab      	ldr	r0, [sp, #684]	; 0x2ac
    b25a:	f88d 0d46 	strb.w	r0, [sp, #3398]	; 0xd46
    b25e:	99aa      	ldr	r1, [sp, #680]	; 0x2a8
    b260:	f001 0201 	and.w	r2, r1, #1
    b264:	f88d 2d47 	strb.w	r2, [sp, #3399]	; 0xd47
                self.v[x] = v;
    b268:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    b26c:	2a0f      	cmp	r2, #15
    b26e:	f202 8180 	bhi.w	d572 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x39d2>
    b272:	e7ff      	b.n	b274 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x16d4>
    b274:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b278:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b27c:	1842      	adds	r2, r0, r1
    b27e:	9bab      	ldr	r3, [sp, #684]	; 0x2ac
    b280:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                self.v[0xf] = c as u8;
    b284:	9aaa      	ldr	r2, [sp, #680]	; 0x2a8
    b286:	f002 0c01 	and.w	ip, r2, #1
    b28a:	f880 c043 	strb.w	ip, [r0, #67]	; 0x43
        match (
    b28e:	f001 bf3d 	b.w	d10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    b292:	2005      	movs	r0, #5
    b294:	f8cd 081c 	str.w	r0, [sp, #2076]	; 0x81c
    b298:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    b29c:	f2c0 0001 	movt	r0, #1
    b2a0:	6801      	ldr	r1, [r0, #0]
    b2a2:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    b2a6:	f007 fbd5 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b2aa:	90a9      	str	r0, [sp, #676]	; 0x2a4
    b2ac:	e01f      	b.n	b2ee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x174e>
    b2ae:	2001      	movs	r0, #1
    b2b0:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    b2b4:	e015      	b.n	b2e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1742>
    b2b6:	2000      	movs	r0, #0
    b2b8:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    b2bc:	e011      	b.n	b2e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1742>
    b2be:	2000      	movs	r0, #0
    b2c0:	f88d 0e23 	strb.w	r0, [sp, #3619]	; 0xe23
    b2c4:	f89d 1e23 	ldrb.w	r1, [sp, #3619]	; 0xe23
    b2c8:	f640 2000 	movw	r0, #2560	; 0xa00
    b2cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b2d0:	f007 fbcc 	bl	12a6c <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    b2d4:	f8cd 0e24 	str.w	r0, [sp, #3620]	; 0xe24
    b2d8:	f8dd 0e24 	ldr.w	r0, [sp, #3620]	; 0xe24
    b2dc:	f8cd 0824 	str.w	r0, [sp, #2084]	; 0x824
    b2e0:	e00a      	b.n	b2f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1758>
    b2e2:	f89d 0823 	ldrb.w	r0, [sp, #2083]	; 0x823
    b2e6:	07c0      	lsls	r0, r0, #31
    b2e8:	2800      	cmp	r0, #0
    b2ea:	d112      	bne.n	b312 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1772>
    b2ec:	e055      	b.n	b39a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x17fa>
    b2ee:	98a9      	ldr	r0, [sp, #676]	; 0x2a4
    b2f0:	07c1      	lsls	r1, r0, #31
    b2f2:	2900      	cmp	r1, #0
    b2f4:	d1e3      	bne.n	b2be <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x171e>
    b2f6:	e7de      	b.n	b2b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1716>
    b2f8:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    b2fc:	f60d 0124 	addw	r1, sp, #2084	; 0x824
    b300:	f007 fba8 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b304:	90a8      	str	r0, [sp, #672]	; 0x2a0
    b306:	e7ff      	b.n	b308 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1768>
    b308:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
    b30a:	07c1      	lsls	r1, r0, #31
    b30c:	2900      	cmp	r1, #0
    b30e:	d1ce      	bne.n	b2ae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x170e>
    b310:	e7d1      	b.n	b2b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1716>
                trace!("[{:04x}] SUB Vx, Vy", self.pc);
    b312:	f24e 6074 	movw	r0, #58996	; 0xe674
    b316:	f2c0 0001 	movt	r0, #1
    b31a:	6801      	ldr	r1, [r0, #0]
    b31c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b320:	f100 0212 	add.w	r2, r0, #18
    b324:	f8cd 2848 	str.w	r2, [sp, #2120]	; 0x848
    b328:	f8dd 2848 	ldr.w	r2, [sp, #2120]	; 0x848
    b32c:	f8cd 2d38 	str.w	r2, [sp, #3384]	; 0xd38
    b330:	f248 13bb 	movw	r3, #33211	; 0x81bb
    b334:	f2c0 0301 	movt	r3, #1
    b338:	4610      	mov	r0, r2
    b33a:	91a7      	str	r1, [sp, #668]	; 0x29c
    b33c:	4619      	mov	r1, r3
    b33e:	f006 fca7 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b342:	90a6      	str	r0, [sp, #664]	; 0x298
    b344:	91a5      	str	r1, [sp, #660]	; 0x294
    b346:	e7ff      	b.n	b348 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x17a8>
    b348:	98a6      	ldr	r0, [sp, #664]	; 0x298
    b34a:	f8cd 0840 	str.w	r0, [sp, #2112]	; 0x840
    b34e:	99a5      	ldr	r1, [sp, #660]	; 0x294
    b350:	f8cd 1844 	str.w	r1, [sp, #2116]	; 0x844
    b354:	f64d 6228 	movw	r2, #56872	; 0xde28
    b358:	f2c0 0201 	movt	r2, #1
    b35c:	6812      	ldr	r2, [r2, #0]
    b35e:	466b      	mov	r3, sp
    b360:	f04f 0c01 	mov.w	ip, #1
    b364:	f8c3 c008 	str.w	ip, [r3, #8]
    b368:	605a      	str	r2, [r3, #4]
    b36a:	f8c3 c000 	str.w	ip, [r3]
    b36e:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    b372:	2202      	movs	r2, #2
    b374:	f50d 6304 	add.w	r3, sp, #2112	; 0x840
    b378:	99a7      	ldr	r1, [sp, #668]	; 0x29c
    b37a:	f002 fd34 	bl	dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    b37e:	e7ff      	b.n	b380 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x17e0>
    b380:	f8dd 181c 	ldr.w	r1, [sp, #2076]	; 0x81c
    b384:	f24e 6094 	movw	r0, #59028	; 0xe694
    b388:	f2c0 0001 	movt	r0, #1
    b38c:	6802      	ldr	r2, [r0, #0]
    b38e:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    b392:	f003 fcf4 	bl	ed7e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b396:	e7ff      	b.n	b398 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x17f8>
    b398:	e7ff      	b.n	b39a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x17fa>
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
    b39a:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    b39e:	280f      	cmp	r0, #15
    b3a0:	f202 80b5 	bhi.w	d50e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x396e>
    b3a4:	e7ff      	b.n	b3a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1806>
    b3a6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b3aa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b3ae:	1842      	adds	r2, r0, r1
    b3b0:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b3b4:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    b3b8:	2b0f      	cmp	r3, #15
    b3ba:	92a4      	str	r2, [sp, #656]	; 0x290
    b3bc:	f202 80b1 	bhi.w	d522 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3982>
    b3c0:	e7ff      	b.n	b3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1822>
    b3c2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b3c6:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    b3ca:	1842      	adds	r2, r0, r1
    b3cc:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    b3d0:	98a4      	ldr	r0, [sp, #656]	; 0x290
    b3d2:	f007 fbfb 	bl	12bcc <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h6530387af31222c2E>
    b3d6:	90a3      	str	r0, [sp, #652]	; 0x28c
    b3d8:	91a2      	str	r1, [sp, #648]	; 0x288
    b3da:	e7ff      	b.n	b3dc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x183c>
    b3dc:	98a3      	ldr	r0, [sp, #652]	; 0x28c
    b3de:	f88d 0d3e 	strb.w	r0, [sp, #3390]	; 0xd3e
    b3e2:	99a2      	ldr	r1, [sp, #648]	; 0x288
    b3e4:	f001 0201 	and.w	r2, r1, #1
    b3e8:	f88d 2d3f 	strb.w	r2, [sp, #3391]	; 0xd3f
                self.v[x] = v;
    b3ec:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    b3f0:	2a0f      	cmp	r2, #15
    b3f2:	f202 80a0 	bhi.w	d536 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3996>
    b3f6:	e7ff      	b.n	b3f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1858>
    b3f8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b3fc:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b400:	1842      	adds	r2, r0, r1
    b402:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    b404:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    b408:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    b40a:	f8dd c288 	ldr.w	ip, [sp, #648]	; 0x288
    b40e:	ea22 020c 	bic.w	r2, r2, ip
    b412:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    b416:	f001 be79 	b.w	d10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    b41a:	2005      	movs	r0, #5
    b41c:	f8cd 084c 	str.w	r0, [sp, #2124]	; 0x84c
    b420:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    b424:	f2c0 0001 	movt	r0, #1
    b428:	6801      	ldr	r1, [r0, #0]
    b42a:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    b42e:	f007 fb11 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b432:	90a1      	str	r0, [sp, #644]	; 0x284
    b434:	e01f      	b.n	b476 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x18d6>
    b436:	2001      	movs	r0, #1
    b438:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    b43c:	e015      	b.n	b46a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x18ca>
    b43e:	2000      	movs	r0, #0
    b440:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    b444:	e011      	b.n	b46a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x18ca>
    b446:	2000      	movs	r0, #0
    b448:	f88d 0e2b 	strb.w	r0, [sp, #3627]	; 0xe2b
    b44c:	f89d 1e2b 	ldrb.w	r1, [sp, #3627]	; 0xe2b
    b450:	f640 2000 	movw	r0, #2560	; 0xa00
    b454:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b458:	f007 fb08 	bl	12a6c <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    b45c:	f8cd 0e2c 	str.w	r0, [sp, #3628]	; 0xe2c
    b460:	f8dd 0e2c 	ldr.w	r0, [sp, #3628]	; 0xe2c
    b464:	f8cd 0854 	str.w	r0, [sp, #2132]	; 0x854
    b468:	e00a      	b.n	b480 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x18e0>
    b46a:	f89d 0853 	ldrb.w	r0, [sp, #2131]	; 0x853
    b46e:	07c0      	lsls	r0, r0, #31
    b470:	2800      	cmp	r0, #0
    b472:	d112      	bne.n	b49a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x18fa>
    b474:	e055      	b.n	b522 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1982>
    b476:	98a1      	ldr	r0, [sp, #644]	; 0x284
    b478:	07c1      	lsls	r1, r0, #31
    b47a:	2900      	cmp	r1, #0
    b47c:	d1e3      	bne.n	b446 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x18a6>
    b47e:	e7de      	b.n	b43e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x189e>
    b480:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    b484:	f60d 0154 	addw	r1, sp, #2132	; 0x854
    b488:	f007 fae4 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b48c:	90a0      	str	r0, [sp, #640]	; 0x280
    b48e:	e7ff      	b.n	b490 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x18f0>
    b490:	98a0      	ldr	r0, [sp, #640]	; 0x280
    b492:	07c1      	lsls	r1, r0, #31
    b494:	2900      	cmp	r1, #0
    b496:	d1ce      	bne.n	b436 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1896>
    b498:	e7d1      	b.n	b43e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x189e>
                trace!("[{:04x}] SHR Vx, Vy", self.pc);
    b49a:	f24e 6004 	movw	r0, #58884	; 0xe604
    b49e:	f2c0 0001 	movt	r0, #1
    b4a2:	6801      	ldr	r1, [r0, #0]
    b4a4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b4a8:	f100 0212 	add.w	r2, r0, #18
    b4ac:	f8cd 2878 	str.w	r2, [sp, #2168]	; 0x878
    b4b0:	f8dd 2878 	ldr.w	r2, [sp, #2168]	; 0x878
    b4b4:	f8cd 2d34 	str.w	r2, [sp, #3380]	; 0xd34
    b4b8:	f248 13bb 	movw	r3, #33211	; 0x81bb
    b4bc:	f2c0 0301 	movt	r3, #1
    b4c0:	4610      	mov	r0, r2
    b4c2:	919f      	str	r1, [sp, #636]	; 0x27c
    b4c4:	4619      	mov	r1, r3
    b4c6:	f006 fbe3 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b4ca:	909e      	str	r0, [sp, #632]	; 0x278
    b4cc:	919d      	str	r1, [sp, #628]	; 0x274
    b4ce:	e7ff      	b.n	b4d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1930>
    b4d0:	989e      	ldr	r0, [sp, #632]	; 0x278
    b4d2:	f8cd 0870 	str.w	r0, [sp, #2160]	; 0x870
    b4d6:	999d      	ldr	r1, [sp, #628]	; 0x274
    b4d8:	f8cd 1874 	str.w	r1, [sp, #2164]	; 0x874
    b4dc:	f64d 6228 	movw	r2, #56872	; 0xde28
    b4e0:	f2c0 0201 	movt	r2, #1
    b4e4:	6812      	ldr	r2, [r2, #0]
    b4e6:	466b      	mov	r3, sp
    b4e8:	f04f 0c01 	mov.w	ip, #1
    b4ec:	f8c3 c008 	str.w	ip, [r3, #8]
    b4f0:	605a      	str	r2, [r3, #4]
    b4f2:	f8c3 c000 	str.w	ip, [r3]
    b4f6:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    b4fa:	2202      	movs	r2, #2
    b4fc:	f50d 6307 	add.w	r3, sp, #2160	; 0x870
    b500:	999f      	ldr	r1, [sp, #636]	; 0x27c
    b502:	f002 fc70 	bl	dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    b506:	e7ff      	b.n	b508 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1968>
    b508:	f8dd 184c 	ldr.w	r1, [sp, #2124]	; 0x84c
    b50c:	f24e 6024 	movw	r0, #58916	; 0xe624
    b510:	f2c0 0001 	movt	r0, #1
    b514:	6802      	ldr	r2, [r0, #0]
    b516:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    b51a:	f003 fc30 	bl	ed7e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b51e:	e7ff      	b.n	b520 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1980>
    b520:	e7ff      	b.n	b522 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1982>
                self.v[0xf] = self.v[x] & 1;
    b522:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    b526:	280f      	cmp	r0, #15
    b528:	f201 87d3 	bhi.w	d4d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3932>
    b52c:	e7ff      	b.n	b52e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x198e>
    b52e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b532:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b536:	1842      	adds	r2, r0, r1
    b538:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b53c:	f002 0201 	and.w	r2, r2, #1
    b540:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shr(1);
    b544:	290f      	cmp	r1, #15
    b546:	f201 87ce 	bhi.w	d4e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3946>
    b54a:	e7ff      	b.n	b54c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x19ac>
    b54c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b550:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b554:	1842      	adds	r2, r0, r1
    b556:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    b55a:	2101      	movs	r1, #1
    b55c:	f007 fae7 	bl	12b2e <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hda13cf3283d09c50E>
    b560:	909c      	str	r0, [sp, #624]	; 0x270
    b562:	e7ff      	b.n	b564 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x19c4>
    b564:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    b568:	280f      	cmp	r0, #15
    b56a:	f201 87c6 	bhi.w	d4fa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x395a>
    b56e:	e7ff      	b.n	b570 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x19d0>
    b570:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b574:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b578:	1842      	adds	r2, r0, r1
    b57a:	9b9c      	ldr	r3, [sp, #624]	; 0x270
    b57c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    b580:	f001 bdc4 	b.w	d10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    b584:	2005      	movs	r0, #5
    b586:	f8cd 087c 	str.w	r0, [sp, #2172]	; 0x87c
    b58a:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    b58e:	f2c0 0001 	movt	r0, #1
    b592:	6801      	ldr	r1, [r0, #0]
    b594:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    b598:	f007 fa5c 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b59c:	909b      	str	r0, [sp, #620]	; 0x26c
    b59e:	e01f      	b.n	b5e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a40>
    b5a0:	2001      	movs	r0, #1
    b5a2:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    b5a6:	e015      	b.n	b5d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a34>
    b5a8:	2000      	movs	r0, #0
    b5aa:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    b5ae:	e011      	b.n	b5d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a34>
    b5b0:	2000      	movs	r0, #0
    b5b2:	f88d 0e33 	strb.w	r0, [sp, #3635]	; 0xe33
    b5b6:	f89d 1e33 	ldrb.w	r1, [sp, #3635]	; 0xe33
    b5ba:	f640 2000 	movw	r0, #2560	; 0xa00
    b5be:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b5c2:	f007 fa53 	bl	12a6c <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    b5c6:	f8cd 0e34 	str.w	r0, [sp, #3636]	; 0xe34
    b5ca:	f8dd 0e34 	ldr.w	r0, [sp, #3636]	; 0xe34
    b5ce:	f8cd 0884 	str.w	r0, [sp, #2180]	; 0x884
    b5d2:	e00a      	b.n	b5ea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a4a>
    b5d4:	f89d 0883 	ldrb.w	r0, [sp, #2179]	; 0x883
    b5d8:	07c0      	lsls	r0, r0, #31
    b5da:	2800      	cmp	r0, #0
    b5dc:	d112      	bne.n	b604 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a64>
    b5de:	e055      	b.n	b68c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1aec>
    b5e0:	989b      	ldr	r0, [sp, #620]	; 0x26c
    b5e2:	07c1      	lsls	r1, r0, #31
    b5e4:	2900      	cmp	r1, #0
    b5e6:	d1e3      	bne.n	b5b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a10>
    b5e8:	e7de      	b.n	b5a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a08>
    b5ea:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    b5ee:	f60d 0184 	addw	r1, sp, #2180	; 0x884
    b5f2:	f007 fa2f 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b5f6:	909a      	str	r0, [sp, #616]	; 0x268
    b5f8:	e7ff      	b.n	b5fa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a5a>
    b5fa:	989a      	ldr	r0, [sp, #616]	; 0x268
    b5fc:	07c1      	lsls	r1, r0, #31
    b5fe:	2900      	cmp	r1, #0
    b600:	d1ce      	bne.n	b5a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a00>
    b602:	e7d1      	b.n	b5a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a08>
                trace!("[{:04x}] SUBN Vx, Vy", self.pc);
    b604:	f24e 5094 	movw	r0, #58772	; 0xe594
    b608:	f2c0 0001 	movt	r0, #1
    b60c:	6801      	ldr	r1, [r0, #0]
    b60e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b612:	f100 0212 	add.w	r2, r0, #18
    b616:	f8cd 28a8 	str.w	r2, [sp, #2216]	; 0x8a8
    b61a:	f8dd 28a8 	ldr.w	r2, [sp, #2216]	; 0x8a8
    b61e:	f8cd 2d2c 	str.w	r2, [sp, #3372]	; 0xd2c
    b622:	f248 13bb 	movw	r3, #33211	; 0x81bb
    b626:	f2c0 0301 	movt	r3, #1
    b62a:	4610      	mov	r0, r2
    b62c:	9199      	str	r1, [sp, #612]	; 0x264
    b62e:	4619      	mov	r1, r3
    b630:	f006 fb2e 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b634:	9098      	str	r0, [sp, #608]	; 0x260
    b636:	9197      	str	r1, [sp, #604]	; 0x25c
    b638:	e7ff      	b.n	b63a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a9a>
    b63a:	9898      	ldr	r0, [sp, #608]	; 0x260
    b63c:	f8cd 08a0 	str.w	r0, [sp, #2208]	; 0x8a0
    b640:	9997      	ldr	r1, [sp, #604]	; 0x25c
    b642:	f8cd 18a4 	str.w	r1, [sp, #2212]	; 0x8a4
    b646:	f64d 6228 	movw	r2, #56872	; 0xde28
    b64a:	f2c0 0201 	movt	r2, #1
    b64e:	6812      	ldr	r2, [r2, #0]
    b650:	466b      	mov	r3, sp
    b652:	f04f 0c01 	mov.w	ip, #1
    b656:	f8c3 c008 	str.w	ip, [r3, #8]
    b65a:	605a      	str	r2, [r3, #4]
    b65c:	f8c3 c000 	str.w	ip, [r3]
    b660:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    b664:	2202      	movs	r2, #2
    b666:	f50d 630a 	add.w	r3, sp, #2208	; 0x8a0
    b66a:	9999      	ldr	r1, [sp, #612]	; 0x264
    b66c:	f002 fbbb 	bl	dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    b670:	e7ff      	b.n	b672 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1ad2>
    b672:	f8dd 187c 	ldr.w	r1, [sp, #2172]	; 0x87c
    b676:	f24e 50b4 	movw	r0, #58804	; 0xe5b4
    b67a:	f2c0 0001 	movt	r0, #1
    b67e:	6802      	ldr	r2, [r0, #0]
    b680:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    b684:	f003 fb7b 	bl	ed7e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b688:	e7ff      	b.n	b68a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1aea>
    b68a:	e7ff      	b.n	b68c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1aec>
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
    b68c:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    b690:	280f      	cmp	r0, #15
    b692:	f201 8700 	bhi.w	d496 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x38f6>
    b696:	e7ff      	b.n	b698 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1af8>
    b698:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b69c:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    b6a0:	1842      	adds	r2, r0, r1
    b6a2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b6a6:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    b6aa:	2b0f      	cmp	r3, #15
    b6ac:	9296      	str	r2, [sp, #600]	; 0x258
    b6ae:	f201 86fc 	bhi.w	d4aa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x390a>
    b6b2:	e7ff      	b.n	b6b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1b14>
    b6b4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b6b8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b6bc:	1842      	adds	r2, r0, r1
    b6be:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    b6c2:	9896      	ldr	r0, [sp, #600]	; 0x258
    b6c4:	f007 fa82 	bl	12bcc <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h6530387af31222c2E>
    b6c8:	9095      	str	r0, [sp, #596]	; 0x254
    b6ca:	9194      	str	r1, [sp, #592]	; 0x250
    b6cc:	e7ff      	b.n	b6ce <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1b2e>
    b6ce:	9895      	ldr	r0, [sp, #596]	; 0x254
    b6d0:	f88d 0d32 	strb.w	r0, [sp, #3378]	; 0xd32
    b6d4:	9994      	ldr	r1, [sp, #592]	; 0x250
    b6d6:	f001 0201 	and.w	r2, r1, #1
    b6da:	f88d 2d33 	strb.w	r2, [sp, #3379]	; 0xd33
                self.v[x] = v;
    b6de:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    b6e2:	2a0f      	cmp	r2, #15
    b6e4:	f201 86eb 	bhi.w	d4be <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x391e>
    b6e8:	e7ff      	b.n	b6ea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1b4a>
    b6ea:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b6ee:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b6f2:	1842      	adds	r2, r0, r1
    b6f4:	9b95      	ldr	r3, [sp, #596]	; 0x254
    b6f6:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    b6fa:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    b6fc:	f8dd c250 	ldr.w	ip, [sp, #592]	; 0x250
    b700:	ea22 020c 	bic.w	r2, r2, ip
    b704:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    b708:	f001 bd00 	b.w	d10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    b70c:	2005      	movs	r0, #5
    b70e:	f8cd 08ac 	str.w	r0, [sp, #2220]	; 0x8ac
    b712:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    b716:	f2c0 0001 	movt	r0, #1
    b71a:	6801      	ldr	r1, [r0, #0]
    b71c:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    b720:	f007 f998 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b724:	9093      	str	r0, [sp, #588]	; 0x24c
    b726:	e01f      	b.n	b768 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1bc8>
    b728:	2001      	movs	r0, #1
    b72a:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    b72e:	e015      	b.n	b75c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1bbc>
    b730:	2000      	movs	r0, #0
    b732:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    b736:	e011      	b.n	b75c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1bbc>
    b738:	2000      	movs	r0, #0
    b73a:	f88d 0e3b 	strb.w	r0, [sp, #3643]	; 0xe3b
    b73e:	f89d 1e3b 	ldrb.w	r1, [sp, #3643]	; 0xe3b
    b742:	f640 2000 	movw	r0, #2560	; 0xa00
    b746:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b74a:	f007 f98f 	bl	12a6c <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    b74e:	f8cd 0e3c 	str.w	r0, [sp, #3644]	; 0xe3c
    b752:	f8dd 0e3c 	ldr.w	r0, [sp, #3644]	; 0xe3c
    b756:	f8cd 08b4 	str.w	r0, [sp, #2228]	; 0x8b4
    b75a:	e00a      	b.n	b772 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1bd2>
    b75c:	f89d 08b3 	ldrb.w	r0, [sp, #2227]	; 0x8b3
    b760:	07c0      	lsls	r0, r0, #31
    b762:	2800      	cmp	r0, #0
    b764:	d112      	bne.n	b78c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1bec>
    b766:	e055      	b.n	b814 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c74>
    b768:	9893      	ldr	r0, [sp, #588]	; 0x24c
    b76a:	07c1      	lsls	r1, r0, #31
    b76c:	2900      	cmp	r1, #0
    b76e:	d1e3      	bne.n	b738 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1b98>
    b770:	e7de      	b.n	b730 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1b90>
    b772:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    b776:	f60d 01b4 	addw	r1, sp, #2228	; 0x8b4
    b77a:	f007 f96b 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b77e:	9092      	str	r0, [sp, #584]	; 0x248
    b780:	e7ff      	b.n	b782 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1be2>
    b782:	9892      	ldr	r0, [sp, #584]	; 0x248
    b784:	07c1      	lsls	r1, r0, #31
    b786:	2900      	cmp	r1, #0
    b788:	d1ce      	bne.n	b728 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1b88>
    b78a:	e7d1      	b.n	b730 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1b90>
                trace!("[{:04x}] SHL Vx, Vy", self.pc);
    b78c:	f24e 5020 	movw	r0, #58656	; 0xe520
    b790:	f2c0 0001 	movt	r0, #1
    b794:	6801      	ldr	r1, [r0, #0]
    b796:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b79a:	f100 0212 	add.w	r2, r0, #18
    b79e:	f8cd 28d8 	str.w	r2, [sp, #2264]	; 0x8d8
    b7a2:	f8dd 28d8 	ldr.w	r2, [sp, #2264]	; 0x8d8
    b7a6:	f8cd 2d28 	str.w	r2, [sp, #3368]	; 0xd28
    b7aa:	f248 13bb 	movw	r3, #33211	; 0x81bb
    b7ae:	f2c0 0301 	movt	r3, #1
    b7b2:	4610      	mov	r0, r2
    b7b4:	9191      	str	r1, [sp, #580]	; 0x244
    b7b6:	4619      	mov	r1, r3
    b7b8:	f006 fa6a 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b7bc:	9090      	str	r0, [sp, #576]	; 0x240
    b7be:	918f      	str	r1, [sp, #572]	; 0x23c
    b7c0:	e7ff      	b.n	b7c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c22>
    b7c2:	9890      	ldr	r0, [sp, #576]	; 0x240
    b7c4:	f8cd 08d0 	str.w	r0, [sp, #2256]	; 0x8d0
    b7c8:	998f      	ldr	r1, [sp, #572]	; 0x23c
    b7ca:	f8cd 18d4 	str.w	r1, [sp, #2260]	; 0x8d4
    b7ce:	f64d 6228 	movw	r2, #56872	; 0xde28
    b7d2:	f2c0 0201 	movt	r2, #1
    b7d6:	6812      	ldr	r2, [r2, #0]
    b7d8:	466b      	mov	r3, sp
    b7da:	f04f 0c01 	mov.w	ip, #1
    b7de:	f8c3 c008 	str.w	ip, [r3, #8]
    b7e2:	605a      	str	r2, [r3, #4]
    b7e4:	f8c3 c000 	str.w	ip, [r3]
    b7e8:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    b7ec:	2202      	movs	r2, #2
    b7ee:	f50d 630d 	add.w	r3, sp, #2256	; 0x8d0
    b7f2:	9991      	ldr	r1, [sp, #580]	; 0x244
    b7f4:	f002 faf7 	bl	dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    b7f8:	e7ff      	b.n	b7fa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c5a>
    b7fa:	f8dd 18ac 	ldr.w	r1, [sp, #2220]	; 0x8ac
    b7fe:	f24e 5040 	movw	r0, #58688	; 0xe540
    b802:	f2c0 0001 	movt	r0, #1
    b806:	6802      	ldr	r2, [r0, #0]
    b808:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    b80c:	f003 fab7 	bl	ed7e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b810:	e7ff      	b.n	b812 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c72>
    b812:	e7ff      	b.n	b814 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c74>
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
    b814:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    b818:	280f      	cmp	r0, #15
    b81a:	f201 861e 	bhi.w	d45a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x38ba>
    b81e:	e7ff      	b.n	b820 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c80>
    b820:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b824:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b828:	1842      	adds	r2, r0, r1
    b82a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b82e:	09d2      	lsrs	r2, r2, #7
    b830:	928e      	str	r2, [sp, #568]	; 0x238
    b832:	e7ff      	b.n	b834 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c94>
    b834:	988e      	ldr	r0, [sp, #568]	; 0x238
    b836:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    b83a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shl(1);
    b83e:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    b842:	2a0f      	cmp	r2, #15
    b844:	f201 8613 	bhi.w	d46e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x38ce>
    b848:	e7ff      	b.n	b84a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1caa>
    b84a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b84e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b852:	1842      	adds	r2, r0, r1
    b854:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    b858:	2101      	movs	r1, #1
    b85a:	f007 f957 	bl	12b0c <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17h31de2c523da77629E>
    b85e:	908d      	str	r0, [sp, #564]	; 0x234
    b860:	e7ff      	b.n	b862 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1cc2>
    b862:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    b866:	280f      	cmp	r0, #15
    b868:	f201 860b 	bhi.w	d482 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x38e2>
    b86c:	e7ff      	b.n	b86e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1cce>
    b86e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b872:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b876:	1842      	adds	r2, r0, r1
    b878:	9b8d      	ldr	r3, [sp, #564]	; 0x234
    b87a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    b87e:	f001 bc45 	b.w	d10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    b882:	2005      	movs	r0, #5
    b884:	f8cd 08dc 	str.w	r0, [sp, #2268]	; 0x8dc
    b888:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    b88c:	f2c0 0001 	movt	r0, #1
    b890:	6801      	ldr	r1, [r0, #0]
    b892:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    b896:	f007 f8dd 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b89a:	908c      	str	r0, [sp, #560]	; 0x230
    b89c:	e01f      	b.n	b8de <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d3e>
    b89e:	2001      	movs	r0, #1
    b8a0:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    b8a4:	e015      	b.n	b8d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d32>
    b8a6:	2000      	movs	r0, #0
    b8a8:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    b8ac:	e011      	b.n	b8d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d32>
    b8ae:	2000      	movs	r0, #0
    b8b0:	f88d 0e43 	strb.w	r0, [sp, #3651]	; 0xe43
    b8b4:	f89d 1e43 	ldrb.w	r1, [sp, #3651]	; 0xe43
    b8b8:	f640 2000 	movw	r0, #2560	; 0xa00
    b8bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b8c0:	f007 f8d4 	bl	12a6c <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    b8c4:	f8cd 0e44 	str.w	r0, [sp, #3652]	; 0xe44
    b8c8:	f8dd 0e44 	ldr.w	r0, [sp, #3652]	; 0xe44
    b8cc:	f8cd 08e4 	str.w	r0, [sp, #2276]	; 0x8e4
    b8d0:	e00a      	b.n	b8e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d48>
    b8d2:	f89d 08e3 	ldrb.w	r0, [sp, #2275]	; 0x8e3
    b8d6:	07c0      	lsls	r0, r0, #31
    b8d8:	2800      	cmp	r0, #0
    b8da:	d112      	bne.n	b902 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d62>
    b8dc:	e055      	b.n	b98a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1dea>
    b8de:	988c      	ldr	r0, [sp, #560]	; 0x230
    b8e0:	07c1      	lsls	r1, r0, #31
    b8e2:	2900      	cmp	r1, #0
    b8e4:	d1e3      	bne.n	b8ae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d0e>
    b8e6:	e7de      	b.n	b8a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d06>
    b8e8:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    b8ec:	f60d 01e4 	addw	r1, sp, #2276	; 0x8e4
    b8f0:	f007 f8b0 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b8f4:	908b      	str	r0, [sp, #556]	; 0x22c
    b8f6:	e7ff      	b.n	b8f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d58>
    b8f8:	988b      	ldr	r0, [sp, #556]	; 0x22c
    b8fa:	07c1      	lsls	r1, r0, #31
    b8fc:	2900      	cmp	r1, #0
    b8fe:	d1ce      	bne.n	b89e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1cfe>
    b900:	e7d1      	b.n	b8a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d06>
                trace!("[{:04x}] SNE Vx, Vy", self.pc);
    b902:	f24e 40c0 	movw	r0, #58560	; 0xe4c0
    b906:	f2c0 0001 	movt	r0, #1
    b90a:	6801      	ldr	r1, [r0, #0]
    b90c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b910:	f100 0212 	add.w	r2, r0, #18
    b914:	f8cd 2908 	str.w	r2, [sp, #2312]	; 0x908
    b918:	f8dd 2908 	ldr.w	r2, [sp, #2312]	; 0x908
    b91c:	f8cd 2d24 	str.w	r2, [sp, #3364]	; 0xd24
    b920:	f248 13bb 	movw	r3, #33211	; 0x81bb
    b924:	f2c0 0301 	movt	r3, #1
    b928:	4610      	mov	r0, r2
    b92a:	918a      	str	r1, [sp, #552]	; 0x228
    b92c:	4619      	mov	r1, r3
    b92e:	f006 f9af 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b932:	9089      	str	r0, [sp, #548]	; 0x224
    b934:	9188      	str	r1, [sp, #544]	; 0x220
    b936:	e7ff      	b.n	b938 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d98>
    b938:	9889      	ldr	r0, [sp, #548]	; 0x224
    b93a:	f8cd 0900 	str.w	r0, [sp, #2304]	; 0x900
    b93e:	9988      	ldr	r1, [sp, #544]	; 0x220
    b940:	f8cd 1904 	str.w	r1, [sp, #2308]	; 0x904
    b944:	f64d 6228 	movw	r2, #56872	; 0xde28
    b948:	f2c0 0201 	movt	r2, #1
    b94c:	6812      	ldr	r2, [r2, #0]
    b94e:	466b      	mov	r3, sp
    b950:	f04f 0c01 	mov.w	ip, #1
    b954:	f8c3 c008 	str.w	ip, [r3, #8]
    b958:	605a      	str	r2, [r3, #4]
    b95a:	f8c3 c000 	str.w	ip, [r3]
    b95e:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    b962:	2202      	movs	r2, #2
    b964:	f50d 6310 	add.w	r3, sp, #2304	; 0x900
    b968:	998a      	ldr	r1, [sp, #552]	; 0x228
    b96a:	f002 fa3c 	bl	dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    b96e:	e7ff      	b.n	b970 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1dd0>
    b970:	f8dd 18dc 	ldr.w	r1, [sp, #2268]	; 0x8dc
    b974:	f24e 40e0 	movw	r0, #58592	; 0xe4e0
    b978:	f2c0 0001 	movt	r0, #1
    b97c:	6802      	ldr	r2, [r0, #0]
    b97e:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    b982:	f003 f9fc 	bl	ed7e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b986:	e7ff      	b.n	b988 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1de8>
    b988:	e7ff      	b.n	b98a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1dea>
                if self.v[x] != self.v[y] {
    b98a:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    b98e:	280f      	cmp	r0, #15
    b990:	f201 854f 	bhi.w	d432 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3892>
    b994:	e7ff      	b.n	b996 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1df6>
    b996:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b99a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b99e:	1842      	adds	r2, r0, r1
    b9a0:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b9a4:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    b9a8:	2b0f      	cmp	r3, #15
    b9aa:	9287      	str	r2, [sp, #540]	; 0x21c
    b9ac:	f201 854b 	bhi.w	d446 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x38a6>
    b9b0:	e7ff      	b.n	b9b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e12>
    b9b2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b9b6:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    b9ba:	1842      	adds	r2, r0, r1
    b9bc:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b9c0:	9b87      	ldr	r3, [sp, #540]	; 0x21c
    b9c2:	fa5f fc83 	uxtb.w	ip, r3
    b9c6:	4594      	cmp	ip, r2
    b9c8:	d006      	beq.n	b9d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e38>
    b9ca:	e7ff      	b.n	b9cc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e2c>
                    self.next();
    b9cc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b9d0:	f001 fece 	bl	d770 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>
    b9d4:	e7ff      	b.n	b9d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e36>
                if self.v[x] != self.v[y] {
    b9d6:	e7ff      	b.n	b9d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e38>
        match (
    b9d8:	f001 bb98 	b.w	d10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    b9dc:	2005      	movs	r0, #5
    b9de:	f8cd 090c 	str.w	r0, [sp, #2316]	; 0x90c
    b9e2:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    b9e6:	f2c0 0001 	movt	r0, #1
    b9ea:	6801      	ldr	r1, [r0, #0]
    b9ec:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    b9f0:	f007 f830 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b9f4:	9086      	str	r0, [sp, #536]	; 0x218
    b9f6:	e01f      	b.n	ba38 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e98>
    b9f8:	2001      	movs	r0, #1
    b9fa:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    b9fe:	e015      	b.n	ba2c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e8c>
    ba00:	2000      	movs	r0, #0
    ba02:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    ba06:	e011      	b.n	ba2c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e8c>
    ba08:	2000      	movs	r0, #0
    ba0a:	f88d 0e4b 	strb.w	r0, [sp, #3659]	; 0xe4b
    ba0e:	f89d 1e4b 	ldrb.w	r1, [sp, #3659]	; 0xe4b
    ba12:	f640 2000 	movw	r0, #2560	; 0xa00
    ba16:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ba1a:	f007 f827 	bl	12a6c <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    ba1e:	f8cd 0e4c 	str.w	r0, [sp, #3660]	; 0xe4c
    ba22:	f8dd 0e4c 	ldr.w	r0, [sp, #3660]	; 0xe4c
    ba26:	f8cd 0914 	str.w	r0, [sp, #2324]	; 0x914
    ba2a:	e00a      	b.n	ba42 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1ea2>
    ba2c:	f89d 0913 	ldrb.w	r0, [sp, #2323]	; 0x913
    ba30:	07c0      	lsls	r0, r0, #31
    ba32:	2800      	cmp	r0, #0
    ba34:	d112      	bne.n	ba5c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1ebc>
    ba36:	e055      	b.n	bae4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f44>
    ba38:	9886      	ldr	r0, [sp, #536]	; 0x218
    ba3a:	07c1      	lsls	r1, r0, #31
    ba3c:	2900      	cmp	r1, #0
    ba3e:	d1e3      	bne.n	ba08 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e68>
    ba40:	e7de      	b.n	ba00 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e60>
    ba42:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    ba46:	f60d 1114 	addw	r1, sp, #2324	; 0x914
    ba4a:	f007 f803 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    ba4e:	9085      	str	r0, [sp, #532]	; 0x214
    ba50:	e7ff      	b.n	ba52 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1eb2>
    ba52:	9885      	ldr	r0, [sp, #532]	; 0x214
    ba54:	07c1      	lsls	r1, r0, #31
    ba56:	2900      	cmp	r1, #0
    ba58:	d1ce      	bne.n	b9f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e58>
    ba5a:	e7d1      	b.n	ba00 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e60>
                trace!("[{:04x}] LD I, nnn", self.pc);
    ba5c:	f24e 4080 	movw	r0, #58496	; 0xe480
    ba60:	f2c0 0001 	movt	r0, #1
    ba64:	6801      	ldr	r1, [r0, #0]
    ba66:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ba6a:	f100 0212 	add.w	r2, r0, #18
    ba6e:	f8cd 2938 	str.w	r2, [sp, #2360]	; 0x938
    ba72:	f8dd 2938 	ldr.w	r2, [sp, #2360]	; 0x938
    ba76:	f8cd 2d20 	str.w	r2, [sp, #3360]	; 0xd20
    ba7a:	f248 13bb 	movw	r3, #33211	; 0x81bb
    ba7e:	f2c0 0301 	movt	r3, #1
    ba82:	4610      	mov	r0, r2
    ba84:	9184      	str	r1, [sp, #528]	; 0x210
    ba86:	4619      	mov	r1, r3
    ba88:	f006 f902 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ba8c:	9083      	str	r0, [sp, #524]	; 0x20c
    ba8e:	9182      	str	r1, [sp, #520]	; 0x208
    ba90:	e7ff      	b.n	ba92 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1ef2>
    ba92:	9883      	ldr	r0, [sp, #524]	; 0x20c
    ba94:	f8cd 0930 	str.w	r0, [sp, #2352]	; 0x930
    ba98:	9982      	ldr	r1, [sp, #520]	; 0x208
    ba9a:	f8cd 1934 	str.w	r1, [sp, #2356]	; 0x934
    ba9e:	f64d 6228 	movw	r2, #56872	; 0xde28
    baa2:	f2c0 0201 	movt	r2, #1
    baa6:	6812      	ldr	r2, [r2, #0]
    baa8:	466b      	mov	r3, sp
    baaa:	f04f 0c01 	mov.w	ip, #1
    baae:	f8c3 c008 	str.w	ip, [r3, #8]
    bab2:	605a      	str	r2, [r3, #4]
    bab4:	f8c3 c000 	str.w	ip, [r3]
    bab8:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    babc:	2202      	movs	r2, #2
    babe:	f50d 6313 	add.w	r3, sp, #2352	; 0x930
    bac2:	9984      	ldr	r1, [sp, #528]	; 0x210
    bac4:	f002 f98f 	bl	dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    bac8:	e7ff      	b.n	baca <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f2a>
    baca:	f8dd 190c 	ldr.w	r1, [sp, #2316]	; 0x90c
    bace:	f24e 40a0 	movw	r0, #58528	; 0xe4a0
    bad2:	f2c0 0001 	movt	r0, #1
    bad6:	6802      	ldr	r2, [r0, #0]
    bad8:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    badc:	f003 f94f 	bl	ed7e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    bae0:	e7ff      	b.n	bae2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f42>
    bae2:	e7ff      	b.n	bae4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f44>
                self.i = nnn;
    bae4:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    bae8:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    baec:	8208      	strh	r0, [r1, #16]
        match (
    baee:	f001 bb0d 	b.w	d10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    baf2:	2005      	movs	r0, #5
    baf4:	f8cd 093c 	str.w	r0, [sp, #2364]	; 0x93c
    baf8:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    bafc:	f2c0 0001 	movt	r0, #1
    bb00:	6801      	ldr	r1, [r0, #0]
    bb02:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    bb06:	f006 ffa5 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    bb0a:	9081      	str	r0, [sp, #516]	; 0x204
    bb0c:	e01f      	b.n	bb4e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1fae>
    bb0e:	2001      	movs	r0, #1
    bb10:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    bb14:	e015      	b.n	bb42 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1fa2>
    bb16:	2000      	movs	r0, #0
    bb18:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    bb1c:	e011      	b.n	bb42 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1fa2>
    bb1e:	2000      	movs	r0, #0
    bb20:	f88d 0e53 	strb.w	r0, [sp, #3667]	; 0xe53
    bb24:	f89d 1e53 	ldrb.w	r1, [sp, #3667]	; 0xe53
    bb28:	f640 2000 	movw	r0, #2560	; 0xa00
    bb2c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bb30:	f006 ff9c 	bl	12a6c <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    bb34:	f8cd 0e54 	str.w	r0, [sp, #3668]	; 0xe54
    bb38:	f8dd 0e54 	ldr.w	r0, [sp, #3668]	; 0xe54
    bb3c:	f8cd 0944 	str.w	r0, [sp, #2372]	; 0x944
    bb40:	e00a      	b.n	bb58 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1fb8>
    bb42:	f89d 0943 	ldrb.w	r0, [sp, #2371]	; 0x943
    bb46:	07c0      	lsls	r0, r0, #31
    bb48:	2800      	cmp	r0, #0
    bb4a:	d112      	bne.n	bb72 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1fd2>
    bb4c:	e055      	b.n	bbfa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x205a>
    bb4e:	9881      	ldr	r0, [sp, #516]	; 0x204
    bb50:	07c1      	lsls	r1, r0, #31
    bb52:	2900      	cmp	r1, #0
    bb54:	d1e3      	bne.n	bb1e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f7e>
    bb56:	e7de      	b.n	bb16 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f76>
    bb58:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    bb5c:	f60d 1144 	addw	r1, sp, #2372	; 0x944
    bb60:	f006 ff78 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    bb64:	9080      	str	r0, [sp, #512]	; 0x200
    bb66:	e7ff      	b.n	bb68 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1fc8>
    bb68:	9880      	ldr	r0, [sp, #512]	; 0x200
    bb6a:	07c1      	lsls	r1, r0, #31
    bb6c:	2900      	cmp	r1, #0
    bb6e:	d1ce      	bne.n	bb0e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f6e>
    bb70:	e7d1      	b.n	bb16 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f76>
                trace!("[{:04x}] JP V0, nnn", self.pc);
    bb72:	f24e 4040 	movw	r0, #58432	; 0xe440
    bb76:	f2c0 0001 	movt	r0, #1
    bb7a:	6801      	ldr	r1, [r0, #0]
    bb7c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bb80:	f100 0212 	add.w	r2, r0, #18
    bb84:	f8cd 2968 	str.w	r2, [sp, #2408]	; 0x968
    bb88:	f8dd 2968 	ldr.w	r2, [sp, #2408]	; 0x968
    bb8c:	f8cd 2d1c 	str.w	r2, [sp, #3356]	; 0xd1c
    bb90:	f248 13bb 	movw	r3, #33211	; 0x81bb
    bb94:	f2c0 0301 	movt	r3, #1
    bb98:	4610      	mov	r0, r2
    bb9a:	917f      	str	r1, [sp, #508]	; 0x1fc
    bb9c:	4619      	mov	r1, r3
    bb9e:	f006 f877 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    bba2:	907e      	str	r0, [sp, #504]	; 0x1f8
    bba4:	917d      	str	r1, [sp, #500]	; 0x1f4
    bba6:	e7ff      	b.n	bba8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2008>
    bba8:	987e      	ldr	r0, [sp, #504]	; 0x1f8
    bbaa:	f8cd 0960 	str.w	r0, [sp, #2400]	; 0x960
    bbae:	997d      	ldr	r1, [sp, #500]	; 0x1f4
    bbb0:	f8cd 1964 	str.w	r1, [sp, #2404]	; 0x964
    bbb4:	f64d 6228 	movw	r2, #56872	; 0xde28
    bbb8:	f2c0 0201 	movt	r2, #1
    bbbc:	6812      	ldr	r2, [r2, #0]
    bbbe:	466b      	mov	r3, sp
    bbc0:	f04f 0c01 	mov.w	ip, #1
    bbc4:	f8c3 c008 	str.w	ip, [r3, #8]
    bbc8:	605a      	str	r2, [r3, #4]
    bbca:	f8c3 c000 	str.w	ip, [r3]
    bbce:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    bbd2:	2202      	movs	r2, #2
    bbd4:	f50d 6316 	add.w	r3, sp, #2400	; 0x960
    bbd8:	997f      	ldr	r1, [sp, #508]	; 0x1fc
    bbda:	f002 f904 	bl	dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    bbde:	e7ff      	b.n	bbe0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2040>
    bbe0:	f8dd 193c 	ldr.w	r1, [sp, #2364]	; 0x93c
    bbe4:	f24e 4060 	movw	r0, #58464	; 0xe460
    bbe8:	f2c0 0001 	movt	r0, #1
    bbec:	6802      	ldr	r2, [r0, #0]
    bbee:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    bbf2:	f003 f8c4 	bl	ed7e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    bbf6:	e7ff      	b.n	bbf8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2058>
    bbf8:	e7ff      	b.n	bbfa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x205a>
                self.jump(nnn.wrapping_add(self.v[0].into()).wrapping_sub(2));
    bbfa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bbfe:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    bc02:	f001 ff5c 	bl	dabe <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hb195795cc886092aE>
    bc06:	907c      	str	r0, [sp, #496]	; 0x1f0
    bc08:	e7ff      	b.n	bc0a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x206a>
    bc0a:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    bc0e:	997c      	ldr	r1, [sp, #496]	; 0x1f0
    bc10:	f007 f808 	bl	12c24 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hed5f6279c30b1a08E>
    bc14:	907b      	str	r0, [sp, #492]	; 0x1ec
    bc16:	e7ff      	b.n	bc18 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2078>
    bc18:	2102      	movs	r1, #2
    bc1a:	987b      	ldr	r0, [sp, #492]	; 0x1ec
    bc1c:	f007 f813 	bl	12c46 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hceb9f03c67b66808E>
    bc20:	907a      	str	r0, [sp, #488]	; 0x1e8
    bc22:	e7ff      	b.n	bc24 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2084>
    bc24:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bc28:	997a      	ldr	r1, [sp, #488]	; 0x1e8
    bc2a:	f001 fd5e 	bl	d6ea <_ZN8libchip814Chip8$LT$T$GT$4jump17h7de77f07aa5a546bE>
    bc2e:	e7ff      	b.n	bc30 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2090>
        match (
    bc30:	f001 ba6c 	b.w	d10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    bc34:	2005      	movs	r0, #5
    bc36:	f8cd 096c 	str.w	r0, [sp, #2412]	; 0x96c
    bc3a:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    bc3e:	f2c0 0001 	movt	r0, #1
    bc42:	6801      	ldr	r1, [r0, #0]
    bc44:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    bc48:	f006 ff04 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    bc4c:	9079      	str	r0, [sp, #484]	; 0x1e4
    bc4e:	e01f      	b.n	bc90 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20f0>
    bc50:	2001      	movs	r0, #1
    bc52:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    bc56:	e015      	b.n	bc84 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20e4>
    bc58:	2000      	movs	r0, #0
    bc5a:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    bc5e:	e011      	b.n	bc84 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20e4>
    bc60:	2000      	movs	r0, #0
    bc62:	f88d 0e5b 	strb.w	r0, [sp, #3675]	; 0xe5b
    bc66:	f89d 1e5b 	ldrb.w	r1, [sp, #3675]	; 0xe5b
    bc6a:	f640 2000 	movw	r0, #2560	; 0xa00
    bc6e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bc72:	f006 fefb 	bl	12a6c <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    bc76:	f8cd 0e5c 	str.w	r0, [sp, #3676]	; 0xe5c
    bc7a:	f8dd 0e5c 	ldr.w	r0, [sp, #3676]	; 0xe5c
    bc7e:	f8cd 0974 	str.w	r0, [sp, #2420]	; 0x974
    bc82:	e00a      	b.n	bc9a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20fa>
    bc84:	f89d 0973 	ldrb.w	r0, [sp, #2419]	; 0x973
    bc88:	07c0      	lsls	r0, r0, #31
    bc8a:	2800      	cmp	r0, #0
    bc8c:	d112      	bne.n	bcb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2114>
    bc8e:	e055      	b.n	bd3c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x219c>
    bc90:	9879      	ldr	r0, [sp, #484]	; 0x1e4
    bc92:	07c1      	lsls	r1, r0, #31
    bc94:	2900      	cmp	r1, #0
    bc96:	d1e3      	bne.n	bc60 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20c0>
    bc98:	e7de      	b.n	bc58 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20b8>
    bc9a:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    bc9e:	f60d 1174 	addw	r1, sp, #2420	; 0x974
    bca2:	f006 fed7 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    bca6:	9078      	str	r0, [sp, #480]	; 0x1e0
    bca8:	e7ff      	b.n	bcaa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x210a>
    bcaa:	9878      	ldr	r0, [sp, #480]	; 0x1e0
    bcac:	07c1      	lsls	r1, r0, #31
    bcae:	2900      	cmp	r1, #0
    bcb0:	d1ce      	bne.n	bc50 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20b0>
    bcb2:	e7d1      	b.n	bc58 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20b8>
                trace!("[{:04x}] RND Vx, kk", self.pc);
    bcb4:	f24e 30f0 	movw	r0, #58352	; 0xe3f0
    bcb8:	f2c0 0001 	movt	r0, #1
    bcbc:	6801      	ldr	r1, [r0, #0]
    bcbe:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bcc2:	f100 0212 	add.w	r2, r0, #18
    bcc6:	f8cd 2998 	str.w	r2, [sp, #2456]	; 0x998
    bcca:	f8dd 2998 	ldr.w	r2, [sp, #2456]	; 0x998
    bcce:	f8cd 2d18 	str.w	r2, [sp, #3352]	; 0xd18
    bcd2:	f248 13bb 	movw	r3, #33211	; 0x81bb
    bcd6:	f2c0 0301 	movt	r3, #1
    bcda:	4610      	mov	r0, r2
    bcdc:	9177      	str	r1, [sp, #476]	; 0x1dc
    bcde:	4619      	mov	r1, r3
    bce0:	f005 ffd6 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    bce4:	9076      	str	r0, [sp, #472]	; 0x1d8
    bce6:	9175      	str	r1, [sp, #468]	; 0x1d4
    bce8:	e7ff      	b.n	bcea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x214a>
    bcea:	9876      	ldr	r0, [sp, #472]	; 0x1d8
    bcec:	f8cd 0990 	str.w	r0, [sp, #2448]	; 0x990
    bcf0:	9975      	ldr	r1, [sp, #468]	; 0x1d4
    bcf2:	f8cd 1994 	str.w	r1, [sp, #2452]	; 0x994
    bcf6:	f64d 6228 	movw	r2, #56872	; 0xde28
    bcfa:	f2c0 0201 	movt	r2, #1
    bcfe:	6812      	ldr	r2, [r2, #0]
    bd00:	466b      	mov	r3, sp
    bd02:	f04f 0c01 	mov.w	ip, #1
    bd06:	f8c3 c008 	str.w	ip, [r3, #8]
    bd0a:	605a      	str	r2, [r3, #4]
    bd0c:	f8c3 c000 	str.w	ip, [r3]
    bd10:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    bd14:	2202      	movs	r2, #2
    bd16:	f50d 6319 	add.w	r3, sp, #2448	; 0x990
    bd1a:	9977      	ldr	r1, [sp, #476]	; 0x1dc
    bd1c:	f002 f863 	bl	dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    bd20:	e7ff      	b.n	bd22 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2182>
    bd22:	f8dd 196c 	ldr.w	r1, [sp, #2412]	; 0x96c
    bd26:	f24e 4010 	movw	r0, #58384	; 0xe410
    bd2a:	f2c0 0001 	movt	r0, #1
    bd2e:	6802      	ldr	r2, [r0, #0]
    bd30:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    bd34:	f003 f823 	bl	ed7e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    bd38:	e7ff      	b.n	bd3a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x219a>
    bd3a:	e7ff      	b.n	bd3c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x219c>
                self.v[x] = self.hw.rand() & kk;
    bd3c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bd40:	f7fd fc2d 	bl	959e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17h6cf7f1058fcc9245E>
    bd44:	9074      	str	r0, [sp, #464]	; 0x1d0
    bd46:	e7ff      	b.n	bd48 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x21a8>
    bd48:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    bd4c:	280f      	cmp	r0, #15
    bd4e:	f201 8366 	bhi.w	d41e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x387e>
    bd52:	e7ff      	b.n	bd54 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x21b4>
    bd54:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bd58:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    bd5c:	1842      	adds	r2, r0, r1
    bd5e:	9b74      	ldr	r3, [sp, #464]	; 0x1d0
    bd60:	f8dd c45c 	ldr.w	ip, [sp, #1116]	; 0x45c
    bd64:	ea03 0e0c 	and.w	lr, r3, ip
    bd68:	f882 e034 	strb.w	lr, [r2, #52]	; 0x34
        match (
    bd6c:	f001 b9ce 	b.w	d10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    bd70:	2005      	movs	r0, #5
    bd72:	f8cd 099c 	str.w	r0, [sp, #2460]	; 0x99c
    bd76:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    bd7a:	f2c0 0001 	movt	r0, #1
    bd7e:	6801      	ldr	r1, [r0, #0]
    bd80:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    bd84:	f006 fe66 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    bd88:	9073      	str	r0, [sp, #460]	; 0x1cc
    bd8a:	e01f      	b.n	bdcc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x222c>
    bd8c:	2001      	movs	r0, #1
    bd8e:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    bd92:	e015      	b.n	bdc0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2220>
    bd94:	2000      	movs	r0, #0
    bd96:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    bd9a:	e011      	b.n	bdc0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2220>
    bd9c:	2000      	movs	r0, #0
    bd9e:	f88d 0e63 	strb.w	r0, [sp, #3683]	; 0xe63
    bda2:	f89d 1e63 	ldrb.w	r1, [sp, #3683]	; 0xe63
    bda6:	f640 2000 	movw	r0, #2560	; 0xa00
    bdaa:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bdae:	f006 fe5d 	bl	12a6c <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    bdb2:	f8cd 0e64 	str.w	r0, [sp, #3684]	; 0xe64
    bdb6:	f8dd 0e64 	ldr.w	r0, [sp, #3684]	; 0xe64
    bdba:	f8cd 09a4 	str.w	r0, [sp, #2468]	; 0x9a4
    bdbe:	e00a      	b.n	bdd6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2236>
    bdc0:	f89d 09a3 	ldrb.w	r0, [sp, #2467]	; 0x9a3
    bdc4:	07c0      	lsls	r0, r0, #31
    bdc6:	2800      	cmp	r0, #0
    bdc8:	d112      	bne.n	bdf0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2250>
    bdca:	e055      	b.n	be78 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22d8>
    bdcc:	9873      	ldr	r0, [sp, #460]	; 0x1cc
    bdce:	07c1      	lsls	r1, r0, #31
    bdd0:	2900      	cmp	r1, #0
    bdd2:	d1e3      	bne.n	bd9c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x21fc>
    bdd4:	e7de      	b.n	bd94 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x21f4>
    bdd6:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    bdda:	f60d 11a4 	addw	r1, sp, #2468	; 0x9a4
    bdde:	f006 fe39 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    bde2:	9072      	str	r0, [sp, #456]	; 0x1c8
    bde4:	e7ff      	b.n	bde6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2246>
    bde6:	9872      	ldr	r0, [sp, #456]	; 0x1c8
    bde8:	07c1      	lsls	r1, r0, #31
    bdea:	2900      	cmp	r1, #0
    bdec:	d1ce      	bne.n	bd8c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x21ec>
    bdee:	e7d1      	b.n	bd94 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x21f4>
                trace!("[{:04x}] DRW Vx, Vy, n", self.pc);
    bdf0:	f24e 2094 	movw	r0, #58004	; 0xe294
    bdf4:	f2c0 0001 	movt	r0, #1
    bdf8:	6801      	ldr	r1, [r0, #0]
    bdfa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bdfe:	f100 0212 	add.w	r2, r0, #18
    be02:	f8cd 29c8 	str.w	r2, [sp, #2504]	; 0x9c8
    be06:	f8dd 29c8 	ldr.w	r2, [sp, #2504]	; 0x9c8
    be0a:	f8cd 2cdc 	str.w	r2, [sp, #3292]	; 0xcdc
    be0e:	f248 13bb 	movw	r3, #33211	; 0x81bb
    be12:	f2c0 0301 	movt	r3, #1
    be16:	4610      	mov	r0, r2
    be18:	9171      	str	r1, [sp, #452]	; 0x1c4
    be1a:	4619      	mov	r1, r3
    be1c:	f005 ff38 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    be20:	9070      	str	r0, [sp, #448]	; 0x1c0
    be22:	916f      	str	r1, [sp, #444]	; 0x1bc
    be24:	e7ff      	b.n	be26 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2286>
    be26:	9870      	ldr	r0, [sp, #448]	; 0x1c0
    be28:	f8cd 09c0 	str.w	r0, [sp, #2496]	; 0x9c0
    be2c:	996f      	ldr	r1, [sp, #444]	; 0x1bc
    be2e:	f8cd 19c4 	str.w	r1, [sp, #2500]	; 0x9c4
    be32:	f64d 6228 	movw	r2, #56872	; 0xde28
    be36:	f2c0 0201 	movt	r2, #1
    be3a:	6812      	ldr	r2, [r2, #0]
    be3c:	466b      	mov	r3, sp
    be3e:	f04f 0c01 	mov.w	ip, #1
    be42:	f8c3 c008 	str.w	ip, [r3, #8]
    be46:	605a      	str	r2, [r3, #4]
    be48:	f8c3 c000 	str.w	ip, [r3]
    be4c:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    be50:	2202      	movs	r2, #2
    be52:	f50d 631c 	add.w	r3, sp, #2496	; 0x9c0
    be56:	9971      	ldr	r1, [sp, #452]	; 0x1c4
    be58:	f001 ffc5 	bl	dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    be5c:	e7ff      	b.n	be5e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22be>
    be5e:	f8dd 199c 	ldr.w	r1, [sp, #2460]	; 0x99c
    be62:	f24e 20b4 	movw	r0, #58036	; 0xe2b4
    be66:	f2c0 0001 	movt	r0, #1
    be6a:	6802      	ldr	r2, [r0, #0]
    be6c:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    be70:	f002 ff85 	bl	ed7e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    be74:	e7ff      	b.n	be76 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22d6>
    be76:	e7ff      	b.n	be78 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22d8>
                let basex = self.v[x] as usize;
    be78:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    be7c:	280f      	cmp	r0, #15
    be7e:	f201 825c 	bhi.w	d33a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x379a>
    be82:	e7ff      	b.n	be84 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22e4>
    be84:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    be88:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    be8c:	1842      	adds	r2, r0, r1
    be8e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    be92:	4613      	mov	r3, r2
    be94:	f8cd 2ce0 	str.w	r2, [sp, #3296]	; 0xce0
                let basey = self.v[y] as usize;
    be98:	f8dd 2460 	ldr.w	r2, [sp, #1120]	; 0x460
    be9c:	2a0f      	cmp	r2, #15
    be9e:	936e      	str	r3, [sp, #440]	; 0x1b8
    bea0:	f201 8255 	bhi.w	d34e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x37ae>
    bea4:	e7ff      	b.n	bea6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2306>
    bea6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    beaa:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    beae:	1842      	adds	r2, r0, r1
    beb0:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    beb4:	4613      	mov	r3, r2
    beb6:	f8cd 2ce4 	str.w	r2, [sp, #3300]	; 0xce4
                let (w, h) = self.hw.vram_size();
    beba:	936d      	str	r3, [sp, #436]	; 0x1b4
    bebc:	f7fd fd10 	bl	98e0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hd317927185b0114cE>
    bec0:	906c      	str	r0, [sp, #432]	; 0x1b0
    bec2:	916b      	str	r1, [sp, #428]	; 0x1ac
    bec4:	e7ff      	b.n	bec6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2326>
    bec6:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    bec8:	f8cd 0ce8 	str.w	r0, [sp, #3304]	; 0xce8
    becc:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    bece:	f8cd 1cec 	str.w	r1, [sp, #3308]	; 0xcec
    bed2:	2200      	movs	r2, #0
                self.v[0xf] = 0;
    bed4:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    bed8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                for y in 0..n {
    bedc:	f8cd 29cc 	str.w	r2, [sp, #2508]	; 0x9cc
    bee0:	f8dd 2470 	ldr.w	r2, [sp, #1136]	; 0x470
    bee4:	f8cd 29d0 	str.w	r2, [sp, #2512]	; 0x9d0
    bee8:	f8dd 09cc 	ldr.w	r0, [sp, #2508]	; 0x9cc
    beec:	f8dd 19d0 	ldr.w	r1, [sp, #2512]	; 0x9d0
    bef0:	f002 fcd7 	bl	e8a2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    bef4:	906a      	str	r0, [sp, #424]	; 0x1a8
    bef6:	9169      	str	r1, [sp, #420]	; 0x1a4
    bef8:	e7ff      	b.n	befa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x235a>
    befa:	986a      	ldr	r0, [sp, #424]	; 0x1a8
    befc:	f8cd 09d4 	str.w	r0, [sp, #2516]	; 0x9d4
    bf00:	9969      	ldr	r1, [sp, #420]	; 0x1a4
    bf02:	f8cd 19d8 	str.w	r1, [sp, #2520]	; 0x9d8
    bf06:	e7ff      	b.n	bf08 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2368>
    bf08:	f60d 10d4 	addw	r0, sp, #2516	; 0x9d4
    bf0c:	f002 fc3e 	bl	e78c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    bf10:	f8cd 19e0 	str.w	r1, [sp, #2528]	; 0x9e0
    bf14:	f8cd 09dc 	str.w	r0, [sp, #2524]	; 0x9dc
    bf18:	e7ff      	b.n	bf1a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x237a>
    bf1a:	f8dd 09dc 	ldr.w	r0, [sp, #2524]	; 0x9dc
    bf1e:	2800      	cmp	r0, #0
    bf20:	d001      	beq.n	bf26 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2386>
    bf22:	e7ff      	b.n	bf24 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2384>
    bf24:	e002      	b.n	bf2c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x238c>
        match (
    bf26:	f001 b8f1 	b.w	d10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
                for y in 0..n {
    bf2a:	defe      	udf	#254	; 0xfe
    bf2c:	f8dd 09e0 	ldr.w	r0, [sp, #2528]	; 0x9e0
    bf30:	f8cd 0cf0 	str.w	r0, [sp, #3312]	; 0xcf0
    bf34:	f8cd 0cf4 	str.w	r0, [sp, #3316]	; 0xcf4
    bf38:	f8cd 0cf8 	str.w	r0, [sp, #3320]	; 0xcf8
                    let b = self.mem[self.i as usize + y];
    bf3c:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    bf40:	8a0a      	ldrh	r2, [r1, #16]
    bf42:	1813      	adds	r3, r2, r0
    bf44:	469c      	mov	ip, r3
    bf46:	4293      	cmp	r3, r2
    bf48:	9068      	str	r0, [sp, #416]	; 0x1a0
    bf4a:	f8cd c19c 	str.w	ip, [sp, #412]	; 0x19c
    bf4e:	f0c1 8208 	bcc.w	d362 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x37c2>
    bf52:	e7ff      	b.n	bf54 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x23b4>
    bf54:	2000      	movs	r0, #0
    bf56:	9967      	ldr	r1, [sp, #412]	; 0x19c
    bf58:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    bf5c:	f041 820d 	bne.w	d37a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x37da>
    bf60:	e7ff      	b.n	bf62 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x23c2>
    bf62:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bf66:	9967      	ldr	r1, [sp, #412]	; 0x19c
    bf68:	1842      	adds	r2, r0, r1
    bf6a:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    bf6e:	4613      	mov	r3, r2
    bf70:	f88d 2cff 	strb.w	r2, [sp, #3327]	; 0xcff
                    let vramy = (y + basey) % h;
    bf74:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
    bf76:	f8dd c1b4 	ldr.w	ip, [sp, #436]	; 0x1b4
    bf7a:	eb02 0e0c 	add.w	lr, r2, ip
    bf7e:	4674      	mov	r4, lr
    bf80:	4596      	cmp	lr, r2
    bf82:	9366      	str	r3, [sp, #408]	; 0x198
    bf84:	9465      	str	r4, [sp, #404]	; 0x194
    bf86:	f0c1 8202 	bcc.w	d38e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x37ee>
    bf8a:	e7ff      	b.n	bf8c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x23ec>
    bf8c:	986b      	ldr	r0, [sp, #428]	; 0x1ac
    bf8e:	2800      	cmp	r0, #0
    bf90:	f001 8209 	beq.w	d3a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3806>
    bf94:	e7ff      	b.n	bf96 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x23f6>
    bf96:	9865      	ldr	r0, [sp, #404]	; 0x194
    bf98:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    bf9a:	fbb0 f2f1 	udiv	r2, r0, r1
    bf9e:	fb02 0211 	mls	r2, r2, r1, r0
    bfa2:	4613      	mov	r3, r2
    bfa4:	f8cd 2d00 	str.w	r2, [sp, #3328]	; 0xd00
    bfa8:	2200      	movs	r2, #0
                    for x in 0..8 {
    bfaa:	f8cd 29e4 	str.w	r2, [sp, #2532]	; 0x9e4
    bfae:	2208      	movs	r2, #8
    bfb0:	f8cd 29e8 	str.w	r2, [sp, #2536]	; 0x9e8
    bfb4:	f8dd 09e4 	ldr.w	r0, [sp, #2532]	; 0x9e4
    bfb8:	f8dd 19e8 	ldr.w	r1, [sp, #2536]	; 0x9e8
    bfbc:	9364      	str	r3, [sp, #400]	; 0x190
    bfbe:	f002 fc70 	bl	e8a2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    bfc2:	9063      	str	r0, [sp, #396]	; 0x18c
    bfc4:	9162      	str	r1, [sp, #392]	; 0x188
    bfc6:	e7ff      	b.n	bfc8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2428>
    bfc8:	9863      	ldr	r0, [sp, #396]	; 0x18c
    bfca:	f8cd 09ec 	str.w	r0, [sp, #2540]	; 0x9ec
    bfce:	9962      	ldr	r1, [sp, #392]	; 0x188
    bfd0:	f8cd 19f0 	str.w	r1, [sp, #2544]	; 0x9f0
    bfd4:	e7ff      	b.n	bfd6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2436>
    bfd6:	f60d 10ec 	addw	r0, sp, #2540	; 0x9ec
    bfda:	f002 fbd7 	bl	e78c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    bfde:	f8cd 19f8 	str.w	r1, [sp, #2552]	; 0x9f8
    bfe2:	f8cd 09f4 	str.w	r0, [sp, #2548]	; 0x9f4
    bfe6:	e7ff      	b.n	bfe8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2448>
    bfe8:	f8dd 09f4 	ldr.w	r0, [sp, #2548]	; 0x9f4
    bfec:	2800      	cmp	r0, #0
    bfee:	d001      	beq.n	bff4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2454>
    bff0:	e7ff      	b.n	bff2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2452>
    bff2:	e001      	b.n	bff8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2458>
                for y in 0..n {
    bff4:	e788      	b.n	bf08 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2368>
                    for x in 0..8 {
    bff6:	defe      	udf	#254	; 0xfe
    bff8:	f8dd 09f8 	ldr.w	r0, [sp, #2552]	; 0x9f8
    bffc:	f8cd 0d04 	str.w	r0, [sp, #3332]	; 0xd04
    c000:	f8cd 0d08 	str.w	r0, [sp, #3336]	; 0xd08
    c004:	f8cd 0d0c 	str.w	r0, [sp, #3340]	; 0xd0c
                        let vramx = (x + basex) % w;
    c008:	996e      	ldr	r1, [sp, #440]	; 0x1b8
    c00a:	1842      	adds	r2, r0, r1
    c00c:	4613      	mov	r3, r2
    c00e:	4282      	cmp	r2, r0
    c010:	9061      	str	r0, [sp, #388]	; 0x184
    c012:	9360      	str	r3, [sp, #384]	; 0x180
    c014:	f0c1 81d3 	bcc.w	d3be <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x381e>
    c018:	e7ff      	b.n	c01a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x247a>
    c01a:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    c01c:	2800      	cmp	r0, #0
    c01e:	f001 81da 	beq.w	d3d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3836>
    c022:	e7ff      	b.n	c024 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2484>
    c024:	9860      	ldr	r0, [sp, #384]	; 0x180
    c026:	996c      	ldr	r1, [sp, #432]	; 0x1b0
    c028:	fbb0 f2f1 	udiv	r2, r0, r1
    c02c:	fb02 0211 	mls	r2, r2, r1, r0
    c030:	4613      	mov	r3, r2
    c032:	f8cd 2d10 	str.w	r2, [sp, #3344]	; 0xd10
                        let src = (b & 1 << (7 - x)) > 0;
    c036:	9a61      	ldr	r2, [sp, #388]	; 0x184
    c038:	f1c2 0c07 	rsb	ip, r2, #7
    c03c:	f04f 0e07 	mov.w	lr, #7
    c040:	4596      	cmp	lr, r2
    c042:	935f      	str	r3, [sp, #380]	; 0x17c
    c044:	f8cd c178 	str.w	ip, [sp, #376]	; 0x178
    c048:	f0c1 81d1 	bcc.w	d3ee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x384e>
    c04c:	e7ff      	b.n	c04e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x24ae>
    c04e:	985e      	ldr	r0, [sp, #376]	; 0x178
    c050:	f000 0107 	and.w	r1, r0, #7
    c054:	2201      	movs	r2, #1
    c056:	fa02 f101 	lsl.w	r1, r2, r1
    c05a:	08c2      	lsrs	r2, r0, #3
    c05c:	2a00      	cmp	r2, #0
    c05e:	915d      	str	r1, [sp, #372]	; 0x174
    c060:	f041 81d1 	bne.w	d406 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3866>
    c064:	e7ff      	b.n	c066 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x24c6>
    c066:	9866      	ldr	r0, [sp, #408]	; 0x198
    c068:	995d      	ldr	r1, [sp, #372]	; 0x174
    c06a:	ea00 0201 	and.w	r2, r0, r1
    c06e:	b2d2      	uxtb	r2, r2
    c070:	2a00      	cmp	r2, #0
    c072:	bf18      	it	ne
    c074:	2201      	movne	r2, #1
    c076:	4613      	mov	r3, r2
    c078:	f88d 2d16 	strb.w	r2, [sp, #3350]	; 0xd16
                        let dst = self.hw.vram_get(vramx, vramy);
    c07c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c080:	995f      	ldr	r1, [sp, #380]	; 0x17c
    c082:	9a64      	ldr	r2, [sp, #400]	; 0x190
    c084:	935c      	str	r3, [sp, #368]	; 0x170
    c086:	f7fd fbde 	bl	9846 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE>
    c08a:	4601      	mov	r1, r0
    c08c:	f88d 0d17 	strb.w	r0, [sp, #3351]	; 0xd17
    c090:	915b      	str	r1, [sp, #364]	; 0x16c
    c092:	e7ff      	b.n	c094 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x24f4>
                        self.v[0xf] |= (src && dst) as u8;
    c094:	985c      	ldr	r0, [sp, #368]	; 0x170
    c096:	07c1      	lsls	r1, r0, #31
    c098:	2900      	cmp	r1, #0
    c09a:	d108      	bne.n	c0ae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x250e>
    c09c:	e003      	b.n	c0a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2506>
    c09e:	2001      	movs	r0, #1
    c0a0:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    c0a4:	e008      	b.n	c0b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2518>
    c0a6:	2000      	movs	r0, #0
    c0a8:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    c0ac:	e004      	b.n	c0b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2518>
    c0ae:	985b      	ldr	r0, [sp, #364]	; 0x16c
    c0b0:	07c1      	lsls	r1, r0, #31
    c0b2:	2900      	cmp	r1, #0
    c0b4:	d1f3      	bne.n	c09e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x24fe>
    c0b6:	e7f6      	b.n	c0a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2506>
    c0b8:	f89d 09ff 	ldrb.w	r0, [sp, #2559]	; 0x9ff
    c0bc:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    c0c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    c0c4:	4310      	orrs	r0, r2
    c0c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
                        self.hw.vram_set(vramx, vramy, src ^ dst);
    c0ca:	985c      	ldr	r0, [sp, #368]	; 0x170
    c0cc:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
    c0ce:	ea80 0302 	eor.w	r3, r0, r2
    c0d2:	f003 0301 	and.w	r3, r3, #1
    c0d6:	4608      	mov	r0, r1
    c0d8:	995f      	ldr	r1, [sp, #380]	; 0x17c
    c0da:	9a64      	ldr	r2, [sp, #400]	; 0x190
    c0dc:	f7fd fa6c 	bl	95b8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E>
    c0e0:	e7ff      	b.n	c0e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2542>
                    for x in 0..8 {
    c0e2:	e778      	b.n	bfd6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2436>
    c0e4:	2005      	movs	r0, #5
    c0e6:	f8cd 0a00 	str.w	r0, [sp, #2560]	; 0xa00
    c0ea:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    c0ee:	f2c0 0001 	movt	r0, #1
    c0f2:	6801      	ldr	r1, [r0, #0]
    c0f4:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    c0f8:	f006 fcac 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c0fc:	905a      	str	r0, [sp, #360]	; 0x168
    c0fe:	e01f      	b.n	c140 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x25a0>
    c100:	2001      	movs	r0, #1
    c102:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    c106:	e015      	b.n	c134 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2594>
    c108:	2000      	movs	r0, #0
    c10a:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    c10e:	e011      	b.n	c134 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2594>
    c110:	2000      	movs	r0, #0
    c112:	f88d 0e6b 	strb.w	r0, [sp, #3691]	; 0xe6b
    c116:	f89d 1e6b 	ldrb.w	r1, [sp, #3691]	; 0xe6b
    c11a:	f640 2000 	movw	r0, #2560	; 0xa00
    c11e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c122:	f006 fca3 	bl	12a6c <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    c126:	f8cd 0e6c 	str.w	r0, [sp, #3692]	; 0xe6c
    c12a:	f8dd 0e6c 	ldr.w	r0, [sp, #3692]	; 0xe6c
    c12e:	f8cd 0a08 	str.w	r0, [sp, #2568]	; 0xa08
    c132:	e00a      	b.n	c14a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x25aa>
    c134:	f89d 0a07 	ldrb.w	r0, [sp, #2567]	; 0xa07
    c138:	07c0      	lsls	r0, r0, #31
    c13a:	2800      	cmp	r0, #0
    c13c:	d112      	bne.n	c164 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x25c4>
    c13e:	e055      	b.n	c1ec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x264c>
    c140:	985a      	ldr	r0, [sp, #360]	; 0x168
    c142:	07c1      	lsls	r1, r0, #31
    c144:	2900      	cmp	r1, #0
    c146:	d1e3      	bne.n	c110 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2570>
    c148:	e7de      	b.n	c108 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2568>
    c14a:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    c14e:	f60d 2108 	addw	r1, sp, #2568	; 0xa08
    c152:	f006 fc7f 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c156:	9059      	str	r0, [sp, #356]	; 0x164
    c158:	e7ff      	b.n	c15a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x25ba>
    c15a:	9859      	ldr	r0, [sp, #356]	; 0x164
    c15c:	07c1      	lsls	r1, r0, #31
    c15e:	2900      	cmp	r1, #0
    c160:	d1ce      	bne.n	c100 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2560>
    c162:	e7d1      	b.n	c108 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2568>
                trace!("[{:04x}] SKP Vx", self.pc);
    c164:	f24e 2040 	movw	r0, #57920	; 0xe240
    c168:	f2c0 0001 	movt	r0, #1
    c16c:	6801      	ldr	r1, [r0, #0]
    c16e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c172:	f100 0212 	add.w	r2, r0, #18
    c176:	f8cd 2a2c 	str.w	r2, [sp, #2604]	; 0xa2c
    c17a:	f8dd 2a2c 	ldr.w	r2, [sp, #2604]	; 0xa2c
    c17e:	f8cd 2cd8 	str.w	r2, [sp, #3288]	; 0xcd8
    c182:	f248 13bb 	movw	r3, #33211	; 0x81bb
    c186:	f2c0 0301 	movt	r3, #1
    c18a:	4610      	mov	r0, r2
    c18c:	9158      	str	r1, [sp, #352]	; 0x160
    c18e:	4619      	mov	r1, r3
    c190:	f005 fd7e 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c194:	9057      	str	r0, [sp, #348]	; 0x15c
    c196:	9156      	str	r1, [sp, #344]	; 0x158
    c198:	e7ff      	b.n	c19a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x25fa>
    c19a:	9857      	ldr	r0, [sp, #348]	; 0x15c
    c19c:	f8cd 0a24 	str.w	r0, [sp, #2596]	; 0xa24
    c1a0:	9956      	ldr	r1, [sp, #344]	; 0x158
    c1a2:	f8cd 1a28 	str.w	r1, [sp, #2600]	; 0xa28
    c1a6:	f64d 6228 	movw	r2, #56872	; 0xde28
    c1aa:	f2c0 0201 	movt	r2, #1
    c1ae:	6812      	ldr	r2, [r2, #0]
    c1b0:	466b      	mov	r3, sp
    c1b2:	f04f 0c01 	mov.w	ip, #1
    c1b6:	f8c3 c008 	str.w	ip, [r3, #8]
    c1ba:	605a      	str	r2, [r3, #4]
    c1bc:	f8c3 c000 	str.w	ip, [r3]
    c1c0:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    c1c4:	2202      	movs	r2, #2
    c1c6:	f60d 2324 	addw	r3, sp, #2596	; 0xa24
    c1ca:	9958      	ldr	r1, [sp, #352]	; 0x160
    c1cc:	f001 fe0b 	bl	dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    c1d0:	e7ff      	b.n	c1d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2632>
    c1d2:	f8dd 1a00 	ldr.w	r1, [sp, #2560]	; 0xa00
    c1d6:	f24e 2060 	movw	r0, #57952	; 0xe260
    c1da:	f2c0 0001 	movt	r0, #1
    c1de:	6802      	ldr	r2, [r0, #0]
    c1e0:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    c1e4:	f002 fdcb 	bl	ed7e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c1e8:	e7ff      	b.n	c1ea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x264a>
    c1ea:	e7ff      	b.n	c1ec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x264c>
                if self.hw.key(self.v[x]) {
    c1ec:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c1f0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c1f4:	290f      	cmp	r1, #15
    c1f6:	9055      	str	r0, [sp, #340]	; 0x154
    c1f8:	f201 8095 	bhi.w	d326 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3786>
    c1fc:	e7ff      	b.n	c1fe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x265e>
    c1fe:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c202:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c206:	1842      	adds	r2, r0, r1
    c208:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    c20c:	9855      	ldr	r0, [sp, #340]	; 0x154
    c20e:	f7fd f9cb 	bl	95a8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hb8a7325968dc9595E>
    c212:	9054      	str	r0, [sp, #336]	; 0x150
    c214:	e7ff      	b.n	c216 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2676>
    c216:	9854      	ldr	r0, [sp, #336]	; 0x150
    c218:	07c1      	lsls	r1, r0, #31
    c21a:	2900      	cmp	r1, #0
    c21c:	d006      	beq.n	c22c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x268c>
    c21e:	e7ff      	b.n	c220 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2680>
                    self.next();
    c220:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c224:	f001 faa4 	bl	d770 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>
    c228:	e7ff      	b.n	c22a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x268a>
                if self.hw.key(self.v[x]) {
    c22a:	e7ff      	b.n	c22c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x268c>
        match (
    c22c:	f000 bf6e 	b.w	d10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    c230:	2005      	movs	r0, #5
    c232:	f8cd 0a30 	str.w	r0, [sp, #2608]	; 0xa30
    c236:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    c23a:	f2c0 0001 	movt	r0, #1
    c23e:	6801      	ldr	r1, [r0, #0]
    c240:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    c244:	f006 fc06 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c248:	9053      	str	r0, [sp, #332]	; 0x14c
    c24a:	e01f      	b.n	c28c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26ec>
    c24c:	2001      	movs	r0, #1
    c24e:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    c252:	e015      	b.n	c280 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26e0>
    c254:	2000      	movs	r0, #0
    c256:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    c25a:	e011      	b.n	c280 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26e0>
    c25c:	2000      	movs	r0, #0
    c25e:	f88d 0e73 	strb.w	r0, [sp, #3699]	; 0xe73
    c262:	f89d 1e73 	ldrb.w	r1, [sp, #3699]	; 0xe73
    c266:	f640 2000 	movw	r0, #2560	; 0xa00
    c26a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c26e:	f006 fbfd 	bl	12a6c <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    c272:	f8cd 0e74 	str.w	r0, [sp, #3700]	; 0xe74
    c276:	f8dd 0e74 	ldr.w	r0, [sp, #3700]	; 0xe74
    c27a:	f8cd 0a38 	str.w	r0, [sp, #2616]	; 0xa38
    c27e:	e00a      	b.n	c296 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26f6>
    c280:	f89d 0a37 	ldrb.w	r0, [sp, #2615]	; 0xa37
    c284:	07c0      	lsls	r0, r0, #31
    c286:	2800      	cmp	r0, #0
    c288:	d112      	bne.n	c2b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2710>
    c28a:	e055      	b.n	c338 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2798>
    c28c:	9853      	ldr	r0, [sp, #332]	; 0x14c
    c28e:	07c1      	lsls	r1, r0, #31
    c290:	2900      	cmp	r1, #0
    c292:	d1e3      	bne.n	c25c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26bc>
    c294:	e7de      	b.n	c254 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26b4>
    c296:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    c29a:	f60d 2138 	addw	r1, sp, #2616	; 0xa38
    c29e:	f006 fbd9 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c2a2:	9052      	str	r0, [sp, #328]	; 0x148
    c2a4:	e7ff      	b.n	c2a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2706>
    c2a6:	9852      	ldr	r0, [sp, #328]	; 0x148
    c2a8:	07c1      	lsls	r1, r0, #31
    c2aa:	2900      	cmp	r1, #0
    c2ac:	d1ce      	bne.n	c24c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26ac>
    c2ae:	e7d1      	b.n	c254 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26b4>
                trace!("[{:04x}] SKNP Vx", self.pc);
    c2b0:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
    c2b4:	f2c0 0001 	movt	r0, #1
    c2b8:	6801      	ldr	r1, [r0, #0]
    c2ba:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c2be:	f100 0212 	add.w	r2, r0, #18
    c2c2:	f8cd 2a5c 	str.w	r2, [sp, #2652]	; 0xa5c
    c2c6:	f8dd 2a5c 	ldr.w	r2, [sp, #2652]	; 0xa5c
    c2ca:	f8cd 2cd4 	str.w	r2, [sp, #3284]	; 0xcd4
    c2ce:	f248 13bb 	movw	r3, #33211	; 0x81bb
    c2d2:	f2c0 0301 	movt	r3, #1
    c2d6:	4610      	mov	r0, r2
    c2d8:	9151      	str	r1, [sp, #324]	; 0x144
    c2da:	4619      	mov	r1, r3
    c2dc:	f005 fcd8 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c2e0:	9050      	str	r0, [sp, #320]	; 0x140
    c2e2:	914f      	str	r1, [sp, #316]	; 0x13c
    c2e4:	e7ff      	b.n	c2e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2746>
    c2e6:	9850      	ldr	r0, [sp, #320]	; 0x140
    c2e8:	f8cd 0a54 	str.w	r0, [sp, #2644]	; 0xa54
    c2ec:	994f      	ldr	r1, [sp, #316]	; 0x13c
    c2ee:	f8cd 1a58 	str.w	r1, [sp, #2648]	; 0xa58
    c2f2:	f64d 6228 	movw	r2, #56872	; 0xde28
    c2f6:	f2c0 0201 	movt	r2, #1
    c2fa:	6812      	ldr	r2, [r2, #0]
    c2fc:	466b      	mov	r3, sp
    c2fe:	f04f 0c01 	mov.w	ip, #1
    c302:	f8c3 c008 	str.w	ip, [r3, #8]
    c306:	605a      	str	r2, [r3, #4]
    c308:	f8c3 c000 	str.w	ip, [r3]
    c30c:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    c310:	2202      	movs	r2, #2
    c312:	f60d 2354 	addw	r3, sp, #2644	; 0xa54
    c316:	9951      	ldr	r1, [sp, #324]	; 0x144
    c318:	f001 fd65 	bl	dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    c31c:	e7ff      	b.n	c31e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x277e>
    c31e:	f8dd 1a30 	ldr.w	r1, [sp, #2608]	; 0xa30
    c322:	f24e 201c 	movw	r0, #57884	; 0xe21c
    c326:	f2c0 0001 	movt	r0, #1
    c32a:	6802      	ldr	r2, [r0, #0]
    c32c:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    c330:	f002 fd25 	bl	ed7e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c334:	e7ff      	b.n	c336 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2796>
    c336:	e7ff      	b.n	c338 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2798>
                if !self.hw.key(self.v[x]) {
    c338:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c33c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c340:	290f      	cmp	r1, #15
    c342:	904e      	str	r0, [sp, #312]	; 0x138
    c344:	f200 87e5 	bhi.w	d312 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3772>
    c348:	e7ff      	b.n	c34a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27aa>
    c34a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c34e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c352:	1842      	adds	r2, r0, r1
    c354:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    c358:	984e      	ldr	r0, [sp, #312]	; 0x138
    c35a:	f7fd f925 	bl	95a8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hb8a7325968dc9595E>
    c35e:	904d      	str	r0, [sp, #308]	; 0x134
    c360:	e7ff      	b.n	c362 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27c2>
    c362:	984d      	ldr	r0, [sp, #308]	; 0x134
    c364:	07c1      	lsls	r1, r0, #31
    c366:	2900      	cmp	r1, #0
    c368:	d106      	bne.n	c378 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27d8>
    c36a:	e7ff      	b.n	c36c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27cc>
                    self.next();
    c36c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c370:	f001 f9fe 	bl	d770 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>
    c374:	e7ff      	b.n	c376 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27d6>
                if !self.hw.key(self.v[x]) {
    c376:	e7ff      	b.n	c378 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27d8>
        match (
    c378:	f000 bec8 	b.w	d10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    c37c:	2005      	movs	r0, #5
    c37e:	f8cd 0a60 	str.w	r0, [sp, #2656]	; 0xa60
    c382:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    c386:	f2c0 0001 	movt	r0, #1
    c38a:	6801      	ldr	r1, [r0, #0]
    c38c:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    c390:	f006 fb60 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c394:	904c      	str	r0, [sp, #304]	; 0x130
    c396:	e01f      	b.n	c3d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2838>
    c398:	2001      	movs	r0, #1
    c39a:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    c39e:	e015      	b.n	c3cc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x282c>
    c3a0:	2000      	movs	r0, #0
    c3a2:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    c3a6:	e011      	b.n	c3cc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x282c>
    c3a8:	2000      	movs	r0, #0
    c3aa:	f88d 0e7b 	strb.w	r0, [sp, #3707]	; 0xe7b
    c3ae:	f89d 1e7b 	ldrb.w	r1, [sp, #3707]	; 0xe7b
    c3b2:	f640 2000 	movw	r0, #2560	; 0xa00
    c3b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c3ba:	f006 fb57 	bl	12a6c <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    c3be:	f8cd 0e7c 	str.w	r0, [sp, #3708]	; 0xe7c
    c3c2:	f8dd 0e7c 	ldr.w	r0, [sp, #3708]	; 0xe7c
    c3c6:	f8cd 0a68 	str.w	r0, [sp, #2664]	; 0xa68
    c3ca:	e00a      	b.n	c3e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2842>
    c3cc:	f89d 0a67 	ldrb.w	r0, [sp, #2663]	; 0xa67
    c3d0:	07c0      	lsls	r0, r0, #31
    c3d2:	2800      	cmp	r0, #0
    c3d4:	d112      	bne.n	c3fc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x285c>
    c3d6:	e055      	b.n	c484 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x28e4>
    c3d8:	984c      	ldr	r0, [sp, #304]	; 0x130
    c3da:	07c1      	lsls	r1, r0, #31
    c3dc:	2900      	cmp	r1, #0
    c3de:	d1e3      	bne.n	c3a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2808>
    c3e0:	e7de      	b.n	c3a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2800>
    c3e2:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    c3e6:	f60d 2168 	addw	r1, sp, #2664	; 0xa68
    c3ea:	f006 fb33 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c3ee:	904b      	str	r0, [sp, #300]	; 0x12c
    c3f0:	e7ff      	b.n	c3f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2852>
    c3f2:	984b      	ldr	r0, [sp, #300]	; 0x12c
    c3f4:	07c1      	lsls	r1, r0, #31
    c3f6:	2900      	cmp	r1, #0
    c3f8:	d1ce      	bne.n	c398 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27f8>
    c3fa:	e7d1      	b.n	c3a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2800>
                trace!("[{:04x}] LD Vx, DT", self.pc);
    c3fc:	f24e 10ac 	movw	r0, #57772	; 0xe1ac
    c400:	f2c0 0001 	movt	r0, #1
    c404:	6801      	ldr	r1, [r0, #0]
    c406:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c40a:	f100 0212 	add.w	r2, r0, #18
    c40e:	f8cd 2a8c 	str.w	r2, [sp, #2700]	; 0xa8c
    c412:	f8dd 2a8c 	ldr.w	r2, [sp, #2700]	; 0xa8c
    c416:	f8cd 2cd0 	str.w	r2, [sp, #3280]	; 0xcd0
    c41a:	f248 13bb 	movw	r3, #33211	; 0x81bb
    c41e:	f2c0 0301 	movt	r3, #1
    c422:	4610      	mov	r0, r2
    c424:	914a      	str	r1, [sp, #296]	; 0x128
    c426:	4619      	mov	r1, r3
    c428:	f005 fc32 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c42c:	9049      	str	r0, [sp, #292]	; 0x124
    c42e:	9148      	str	r1, [sp, #288]	; 0x120
    c430:	e7ff      	b.n	c432 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2892>
    c432:	9849      	ldr	r0, [sp, #292]	; 0x124
    c434:	f8cd 0a84 	str.w	r0, [sp, #2692]	; 0xa84
    c438:	9948      	ldr	r1, [sp, #288]	; 0x120
    c43a:	f8cd 1a88 	str.w	r1, [sp, #2696]	; 0xa88
    c43e:	f64d 6228 	movw	r2, #56872	; 0xde28
    c442:	f2c0 0201 	movt	r2, #1
    c446:	6812      	ldr	r2, [r2, #0]
    c448:	466b      	mov	r3, sp
    c44a:	f04f 0c01 	mov.w	ip, #1
    c44e:	f8c3 c008 	str.w	ip, [r3, #8]
    c452:	605a      	str	r2, [r3, #4]
    c454:	f8c3 c000 	str.w	ip, [r3]
    c458:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    c45c:	2202      	movs	r2, #2
    c45e:	f60d 2384 	addw	r3, sp, #2692	; 0xa84
    c462:	994a      	ldr	r1, [sp, #296]	; 0x128
    c464:	f001 fcbf 	bl	dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    c468:	e7ff      	b.n	c46a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x28ca>
    c46a:	f8dd 1a60 	ldr.w	r1, [sp, #2656]	; 0xa60
    c46e:	f24e 10cc 	movw	r0, #57804	; 0xe1cc
    c472:	f2c0 0001 	movt	r0, #1
    c476:	6802      	ldr	r2, [r0, #0]
    c478:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    c47c:	f002 fc7f 	bl	ed7e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c480:	e7ff      	b.n	c482 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x28e2>
    c482:	e7ff      	b.n	c484 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x28e4>
                self.v[x] = self.dt;
    c484:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c488:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    c48c:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    c490:	2a0f      	cmp	r2, #15
    c492:	9147      	str	r1, [sp, #284]	; 0x11c
    c494:	f200 8733 	bhi.w	d2fe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x375e>
    c498:	e7ff      	b.n	c49a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x28fa>
    c49a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c49e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c4a2:	1842      	adds	r2, r0, r1
    c4a4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    c4a6:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    c4aa:	f000 be2f 	b.w	d10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    c4ae:	2005      	movs	r0, #5
    c4b0:	f8cd 0a90 	str.w	r0, [sp, #2704]	; 0xa90
    c4b4:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    c4b8:	f2c0 0001 	movt	r0, #1
    c4bc:	6801      	ldr	r1, [r0, #0]
    c4be:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    c4c2:	f006 fac7 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c4c6:	9046      	str	r0, [sp, #280]	; 0x118
    c4c8:	e01f      	b.n	c50a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x296a>
    c4ca:	2001      	movs	r0, #1
    c4cc:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    c4d0:	e015      	b.n	c4fe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x295e>
    c4d2:	2000      	movs	r0, #0
    c4d4:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    c4d8:	e011      	b.n	c4fe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x295e>
    c4da:	2000      	movs	r0, #0
    c4dc:	f88d 0e83 	strb.w	r0, [sp, #3715]	; 0xe83
    c4e0:	f89d 1e83 	ldrb.w	r1, [sp, #3715]	; 0xe83
    c4e4:	f640 2000 	movw	r0, #2560	; 0xa00
    c4e8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c4ec:	f006 fabe 	bl	12a6c <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    c4f0:	f8cd 0e84 	str.w	r0, [sp, #3716]	; 0xe84
    c4f4:	f8dd 0e84 	ldr.w	r0, [sp, #3716]	; 0xe84
    c4f8:	f8cd 0a98 	str.w	r0, [sp, #2712]	; 0xa98
    c4fc:	e00a      	b.n	c514 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2974>
    c4fe:	f89d 0a97 	ldrb.w	r0, [sp, #2711]	; 0xa97
    c502:	07c0      	lsls	r0, r0, #31
    c504:	2800      	cmp	r0, #0
    c506:	d112      	bne.n	c52e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x298e>
    c508:	e055      	b.n	c5b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a16>
    c50a:	9846      	ldr	r0, [sp, #280]	; 0x118
    c50c:	07c1      	lsls	r1, r0, #31
    c50e:	2900      	cmp	r1, #0
    c510:	d1e3      	bne.n	c4da <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x293a>
    c512:	e7de      	b.n	c4d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2932>
    c514:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    c518:	f60d 2198 	addw	r1, sp, #2712	; 0xa98
    c51c:	f006 fa9a 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c520:	9045      	str	r0, [sp, #276]	; 0x114
    c522:	e7ff      	b.n	c524 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2984>
    c524:	9845      	ldr	r0, [sp, #276]	; 0x114
    c526:	07c1      	lsls	r1, r0, #31
    c528:	2900      	cmp	r1, #0
    c52a:	d1ce      	bne.n	c4ca <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x292a>
    c52c:	e7d1      	b.n	c4d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2932>
                trace!("[{:04x}] LD Vx, K", self.pc);
    c52e:	f24e 105c 	movw	r0, #57692	; 0xe15c
    c532:	f2c0 0001 	movt	r0, #1
    c536:	6801      	ldr	r1, [r0, #0]
    c538:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c53c:	f100 0212 	add.w	r2, r0, #18
    c540:	f8cd 2abc 	str.w	r2, [sp, #2748]	; 0xabc
    c544:	f8dd 2abc 	ldr.w	r2, [sp, #2748]	; 0xabc
    c548:	f8cd 2ccc 	str.w	r2, [sp, #3276]	; 0xccc
    c54c:	f248 13bb 	movw	r3, #33211	; 0x81bb
    c550:	f2c0 0301 	movt	r3, #1
    c554:	4610      	mov	r0, r2
    c556:	9144      	str	r1, [sp, #272]	; 0x110
    c558:	4619      	mov	r1, r3
    c55a:	f005 fb99 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c55e:	9043      	str	r0, [sp, #268]	; 0x10c
    c560:	9142      	str	r1, [sp, #264]	; 0x108
    c562:	e7ff      	b.n	c564 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x29c4>
    c564:	9843      	ldr	r0, [sp, #268]	; 0x10c
    c566:	f8cd 0ab4 	str.w	r0, [sp, #2740]	; 0xab4
    c56a:	9942      	ldr	r1, [sp, #264]	; 0x108
    c56c:	f8cd 1ab8 	str.w	r1, [sp, #2744]	; 0xab8
    c570:	f64d 6228 	movw	r2, #56872	; 0xde28
    c574:	f2c0 0201 	movt	r2, #1
    c578:	6812      	ldr	r2, [r2, #0]
    c57a:	466b      	mov	r3, sp
    c57c:	f04f 0c01 	mov.w	ip, #1
    c580:	f8c3 c008 	str.w	ip, [r3, #8]
    c584:	605a      	str	r2, [r3, #4]
    c586:	f8c3 c000 	str.w	ip, [r3]
    c58a:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    c58e:	2202      	movs	r2, #2
    c590:	f60d 23b4 	addw	r3, sp, #2740	; 0xab4
    c594:	9944      	ldr	r1, [sp, #272]	; 0x110
    c596:	f001 fc26 	bl	dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    c59a:	e7ff      	b.n	c59c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x29fc>
    c59c:	f8dd 1a90 	ldr.w	r1, [sp, #2704]	; 0xa90
    c5a0:	f24e 107c 	movw	r0, #57724	; 0xe17c
    c5a4:	f2c0 0001 	movt	r0, #1
    c5a8:	6802      	ldr	r2, [r0, #0]
    c5aa:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    c5ae:	f002 fbe6 	bl	ed7e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c5b2:	e7ff      	b.n	c5b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a14>
    c5b4:	e7ff      	b.n	c5b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a16>
                self.v[x] = self.waitkey();
    c5b6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c5ba:	f001 fa1b 	bl	d9f4 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E>
    c5be:	9041      	str	r0, [sp, #260]	; 0x104
    c5c0:	e7ff      	b.n	c5c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a22>
    c5c2:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c5c6:	280f      	cmp	r0, #15
    c5c8:	f200 868f 	bhi.w	d2ea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x374a>
    c5cc:	e7ff      	b.n	c5ce <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a2e>
    c5ce:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c5d2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c5d6:	1842      	adds	r2, r0, r1
    c5d8:	9b41      	ldr	r3, [sp, #260]	; 0x104
    c5da:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    c5de:	f000 bd95 	b.w	d10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    c5e2:	2005      	movs	r0, #5
    c5e4:	f8cd 0ac0 	str.w	r0, [sp, #2752]	; 0xac0
    c5e8:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    c5ec:	f2c0 0001 	movt	r0, #1
    c5f0:	6801      	ldr	r1, [r0, #0]
    c5f2:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    c5f6:	f006 fa2d 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c5fa:	9040      	str	r0, [sp, #256]	; 0x100
    c5fc:	e01f      	b.n	c63e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a9e>
    c5fe:	2001      	movs	r0, #1
    c600:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    c604:	e015      	b.n	c632 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a92>
    c606:	2000      	movs	r0, #0
    c608:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    c60c:	e011      	b.n	c632 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a92>
    c60e:	2000      	movs	r0, #0
    c610:	f88d 0e8b 	strb.w	r0, [sp, #3723]	; 0xe8b
    c614:	f89d 1e8b 	ldrb.w	r1, [sp, #3723]	; 0xe8b
    c618:	f640 2000 	movw	r0, #2560	; 0xa00
    c61c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c620:	f006 fa24 	bl	12a6c <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    c624:	f8cd 0e8c 	str.w	r0, [sp, #3724]	; 0xe8c
    c628:	f8dd 0e8c 	ldr.w	r0, [sp, #3724]	; 0xe8c
    c62c:	f8cd 0ac8 	str.w	r0, [sp, #2760]	; 0xac8
    c630:	e00a      	b.n	c648 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2aa8>
    c632:	f89d 0ac7 	ldrb.w	r0, [sp, #2759]	; 0xac7
    c636:	07c0      	lsls	r0, r0, #31
    c638:	2800      	cmp	r0, #0
    c63a:	d112      	bne.n	c662 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ac2>
    c63c:	e055      	b.n	c6ea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b4a>
    c63e:	9840      	ldr	r0, [sp, #256]	; 0x100
    c640:	07c1      	lsls	r1, r0, #31
    c642:	2900      	cmp	r1, #0
    c644:	d1e3      	bne.n	c60e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a6e>
    c646:	e7de      	b.n	c606 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a66>
    c648:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    c64c:	f60d 21c8 	addw	r1, sp, #2760	; 0xac8
    c650:	f006 fa00 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c654:	903f      	str	r0, [sp, #252]	; 0xfc
    c656:	e7ff      	b.n	c658 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ab8>
    c658:	983f      	ldr	r0, [sp, #252]	; 0xfc
    c65a:	07c1      	lsls	r1, r0, #31
    c65c:	2900      	cmp	r1, #0
    c65e:	d1ce      	bne.n	c5fe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a5e>
    c660:	e7d1      	b.n	c606 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a66>
                trace!("[{:04x}] LD DT, Vx", self.pc);
    c662:	f24e 100c 	movw	r0, #57612	; 0xe10c
    c666:	f2c0 0001 	movt	r0, #1
    c66a:	6801      	ldr	r1, [r0, #0]
    c66c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c670:	f100 0212 	add.w	r2, r0, #18
    c674:	f8cd 2aec 	str.w	r2, [sp, #2796]	; 0xaec
    c678:	f8dd 2aec 	ldr.w	r2, [sp, #2796]	; 0xaec
    c67c:	f8cd 2cc8 	str.w	r2, [sp, #3272]	; 0xcc8
    c680:	f248 13bb 	movw	r3, #33211	; 0x81bb
    c684:	f2c0 0301 	movt	r3, #1
    c688:	4610      	mov	r0, r2
    c68a:	913e      	str	r1, [sp, #248]	; 0xf8
    c68c:	4619      	mov	r1, r3
    c68e:	f005 faff 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c692:	903d      	str	r0, [sp, #244]	; 0xf4
    c694:	913c      	str	r1, [sp, #240]	; 0xf0
    c696:	e7ff      	b.n	c698 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2af8>
    c698:	983d      	ldr	r0, [sp, #244]	; 0xf4
    c69a:	f8cd 0ae4 	str.w	r0, [sp, #2788]	; 0xae4
    c69e:	993c      	ldr	r1, [sp, #240]	; 0xf0
    c6a0:	f8cd 1ae8 	str.w	r1, [sp, #2792]	; 0xae8
    c6a4:	f64d 6228 	movw	r2, #56872	; 0xde28
    c6a8:	f2c0 0201 	movt	r2, #1
    c6ac:	6812      	ldr	r2, [r2, #0]
    c6ae:	466b      	mov	r3, sp
    c6b0:	f04f 0c01 	mov.w	ip, #1
    c6b4:	f8c3 c008 	str.w	ip, [r3, #8]
    c6b8:	605a      	str	r2, [r3, #4]
    c6ba:	f8c3 c000 	str.w	ip, [r3]
    c6be:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    c6c2:	2202      	movs	r2, #2
    c6c4:	f60d 23e4 	addw	r3, sp, #2788	; 0xae4
    c6c8:	993e      	ldr	r1, [sp, #248]	; 0xf8
    c6ca:	f001 fb8c 	bl	dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    c6ce:	e7ff      	b.n	c6d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b30>
    c6d0:	f8dd 1ac0 	ldr.w	r1, [sp, #2752]	; 0xac0
    c6d4:	f24e 102c 	movw	r0, #57644	; 0xe12c
    c6d8:	f2c0 0001 	movt	r0, #1
    c6dc:	6802      	ldr	r2, [r0, #0]
    c6de:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    c6e2:	f002 fb4c 	bl	ed7e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c6e6:	e7ff      	b.n	c6e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b48>
    c6e8:	e7ff      	b.n	c6ea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b4a>
                self.dt = self.v[x];
    c6ea:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c6ee:	280f      	cmp	r0, #15
    c6f0:	f200 85f1 	bhi.w	d2d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3736>
    c6f4:	e7ff      	b.n	c6f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b56>
    c6f6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c6fa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c6fe:	1842      	adds	r2, r0, r1
    c700:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c704:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
        match (
    c708:	f000 bd00 	b.w	d10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    c70c:	2005      	movs	r0, #5
    c70e:	f8cd 0af0 	str.w	r0, [sp, #2800]	; 0xaf0
    c712:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    c716:	f2c0 0001 	movt	r0, #1
    c71a:	6801      	ldr	r1, [r0, #0]
    c71c:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    c720:	f006 f998 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c724:	903b      	str	r0, [sp, #236]	; 0xec
    c726:	e01f      	b.n	c768 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2bc8>
    c728:	2001      	movs	r0, #1
    c72a:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    c72e:	e015      	b.n	c75c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2bbc>
    c730:	2000      	movs	r0, #0
    c732:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    c736:	e011      	b.n	c75c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2bbc>
    c738:	2000      	movs	r0, #0
    c73a:	f88d 0e93 	strb.w	r0, [sp, #3731]	; 0xe93
    c73e:	f89d 1e93 	ldrb.w	r1, [sp, #3731]	; 0xe93
    c742:	f640 2000 	movw	r0, #2560	; 0xa00
    c746:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c74a:	f006 f98f 	bl	12a6c <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    c74e:	f8cd 0e94 	str.w	r0, [sp, #3732]	; 0xe94
    c752:	f8dd 0e94 	ldr.w	r0, [sp, #3732]	; 0xe94
    c756:	f8cd 0af8 	str.w	r0, [sp, #2808]	; 0xaf8
    c75a:	e00a      	b.n	c772 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2bd2>
    c75c:	f89d 0af7 	ldrb.w	r0, [sp, #2807]	; 0xaf7
    c760:	07c0      	lsls	r0, r0, #31
    c762:	2800      	cmp	r0, #0
    c764:	d112      	bne.n	c78c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2bec>
    c766:	e055      	b.n	c814 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2c74>
    c768:	983b      	ldr	r0, [sp, #236]	; 0xec
    c76a:	07c1      	lsls	r1, r0, #31
    c76c:	2900      	cmp	r1, #0
    c76e:	d1e3      	bne.n	c738 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b98>
    c770:	e7de      	b.n	c730 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b90>
    c772:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    c776:	f60d 21f8 	addw	r1, sp, #2808	; 0xaf8
    c77a:	f006 f96b 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c77e:	903a      	str	r0, [sp, #232]	; 0xe8
    c780:	e7ff      	b.n	c782 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2be2>
    c782:	983a      	ldr	r0, [sp, #232]	; 0xe8
    c784:	07c1      	lsls	r1, r0, #31
    c786:	2900      	cmp	r1, #0
    c788:	d1ce      	bne.n	c728 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b88>
    c78a:	e7d1      	b.n	c730 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b90>
                trace!("[{:04x}] LD ST, Vx", self.pc);
    c78c:	f24e 00bc 	movw	r0, #57532	; 0xe0bc
    c790:	f2c0 0001 	movt	r0, #1
    c794:	6801      	ldr	r1, [r0, #0]
    c796:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c79a:	f100 0212 	add.w	r2, r0, #18
    c79e:	f8cd 2b1c 	str.w	r2, [sp, #2844]	; 0xb1c
    c7a2:	f8dd 2b1c 	ldr.w	r2, [sp, #2844]	; 0xb1c
    c7a6:	f8cd 2cc4 	str.w	r2, [sp, #3268]	; 0xcc4
    c7aa:	f248 13bb 	movw	r3, #33211	; 0x81bb
    c7ae:	f2c0 0301 	movt	r3, #1
    c7b2:	4610      	mov	r0, r2
    c7b4:	9139      	str	r1, [sp, #228]	; 0xe4
    c7b6:	4619      	mov	r1, r3
    c7b8:	f005 fa6a 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c7bc:	9038      	str	r0, [sp, #224]	; 0xe0
    c7be:	9137      	str	r1, [sp, #220]	; 0xdc
    c7c0:	e7ff      	b.n	c7c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2c22>
    c7c2:	9838      	ldr	r0, [sp, #224]	; 0xe0
    c7c4:	f8cd 0b14 	str.w	r0, [sp, #2836]	; 0xb14
    c7c8:	9937      	ldr	r1, [sp, #220]	; 0xdc
    c7ca:	f8cd 1b18 	str.w	r1, [sp, #2840]	; 0xb18
    c7ce:	f64d 6228 	movw	r2, #56872	; 0xde28
    c7d2:	f2c0 0201 	movt	r2, #1
    c7d6:	6812      	ldr	r2, [r2, #0]
    c7d8:	466b      	mov	r3, sp
    c7da:	f04f 0c01 	mov.w	ip, #1
    c7de:	f8c3 c008 	str.w	ip, [r3, #8]
    c7e2:	605a      	str	r2, [r3, #4]
    c7e4:	f8c3 c000 	str.w	ip, [r3]
    c7e8:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    c7ec:	2202      	movs	r2, #2
    c7ee:	f60d 3314 	addw	r3, sp, #2836	; 0xb14
    c7f2:	9939      	ldr	r1, [sp, #228]	; 0xe4
    c7f4:	f001 faf7 	bl	dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    c7f8:	e7ff      	b.n	c7fa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2c5a>
    c7fa:	f8dd 1af0 	ldr.w	r1, [sp, #2800]	; 0xaf0
    c7fe:	f24e 00dc 	movw	r0, #57564	; 0xe0dc
    c802:	f2c0 0001 	movt	r0, #1
    c806:	6802      	ldr	r2, [r0, #0]
    c808:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    c80c:	f002 fab7 	bl	ed7e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c810:	e7ff      	b.n	c812 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2c72>
    c812:	e7ff      	b.n	c814 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2c74>
                self.st = self.v[x];
    c814:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c818:	280f      	cmp	r0, #15
    c81a:	f200 8552 	bhi.w	d2c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3722>
    c81e:	e7ff      	b.n	c820 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2c80>
    c820:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c824:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c828:	1842      	adds	r2, r0, r1
    c82a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c82e:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
        match (
    c832:	f000 bc6b 	b.w	d10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    c836:	2005      	movs	r0, #5
    c838:	f8cd 0b20 	str.w	r0, [sp, #2848]	; 0xb20
    c83c:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    c840:	f2c0 0001 	movt	r0, #1
    c844:	6801      	ldr	r1, [r0, #0]
    c846:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    c84a:	f006 f903 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c84e:	9036      	str	r0, [sp, #216]	; 0xd8
    c850:	e01f      	b.n	c892 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2cf2>
    c852:	2001      	movs	r0, #1
    c854:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    c858:	e015      	b.n	c886 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ce6>
    c85a:	2000      	movs	r0, #0
    c85c:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    c860:	e011      	b.n	c886 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ce6>
    c862:	2000      	movs	r0, #0
    c864:	f88d 0e9b 	strb.w	r0, [sp, #3739]	; 0xe9b
    c868:	f89d 1e9b 	ldrb.w	r1, [sp, #3739]	; 0xe9b
    c86c:	f640 2000 	movw	r0, #2560	; 0xa00
    c870:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c874:	f006 f8fa 	bl	12a6c <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    c878:	f8cd 0e9c 	str.w	r0, [sp, #3740]	; 0xe9c
    c87c:	f8dd 0e9c 	ldr.w	r0, [sp, #3740]	; 0xe9c
    c880:	f8cd 0b28 	str.w	r0, [sp, #2856]	; 0xb28
    c884:	e00a      	b.n	c89c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2cfc>
    c886:	f89d 0b27 	ldrb.w	r0, [sp, #2855]	; 0xb27
    c88a:	07c0      	lsls	r0, r0, #31
    c88c:	2800      	cmp	r0, #0
    c88e:	d112      	bne.n	c8b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2d16>
    c890:	e055      	b.n	c93e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2d9e>
    c892:	9836      	ldr	r0, [sp, #216]	; 0xd8
    c894:	07c1      	lsls	r1, r0, #31
    c896:	2900      	cmp	r1, #0
    c898:	d1e3      	bne.n	c862 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2cc2>
    c89a:	e7de      	b.n	c85a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2cba>
    c89c:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    c8a0:	f60d 3128 	addw	r1, sp, #2856	; 0xb28
    c8a4:	f006 f8d6 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c8a8:	9035      	str	r0, [sp, #212]	; 0xd4
    c8aa:	e7ff      	b.n	c8ac <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2d0c>
    c8ac:	9835      	ldr	r0, [sp, #212]	; 0xd4
    c8ae:	07c1      	lsls	r1, r0, #31
    c8b0:	2900      	cmp	r1, #0
    c8b2:	d1ce      	bne.n	c852 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2cb2>
    c8b4:	e7d1      	b.n	c85a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2cba>
                trace!("[{:04x}] ADD I, Vx", self.pc);
    c8b6:	f24e 006c 	movw	r0, #57452	; 0xe06c
    c8ba:	f2c0 0001 	movt	r0, #1
    c8be:	6801      	ldr	r1, [r0, #0]
    c8c0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c8c4:	f100 0212 	add.w	r2, r0, #18
    c8c8:	f8cd 2b4c 	str.w	r2, [sp, #2892]	; 0xb4c
    c8cc:	f8dd 2b4c 	ldr.w	r2, [sp, #2892]	; 0xb4c
    c8d0:	f8cd 2cc0 	str.w	r2, [sp, #3264]	; 0xcc0
    c8d4:	f248 13bb 	movw	r3, #33211	; 0x81bb
    c8d8:	f2c0 0301 	movt	r3, #1
    c8dc:	4610      	mov	r0, r2
    c8de:	9134      	str	r1, [sp, #208]	; 0xd0
    c8e0:	4619      	mov	r1, r3
    c8e2:	f005 f9d5 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c8e6:	9033      	str	r0, [sp, #204]	; 0xcc
    c8e8:	9132      	str	r1, [sp, #200]	; 0xc8
    c8ea:	e7ff      	b.n	c8ec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2d4c>
    c8ec:	9833      	ldr	r0, [sp, #204]	; 0xcc
    c8ee:	f8cd 0b44 	str.w	r0, [sp, #2884]	; 0xb44
    c8f2:	9932      	ldr	r1, [sp, #200]	; 0xc8
    c8f4:	f8cd 1b48 	str.w	r1, [sp, #2888]	; 0xb48
    c8f8:	f64d 6228 	movw	r2, #56872	; 0xde28
    c8fc:	f2c0 0201 	movt	r2, #1
    c900:	6812      	ldr	r2, [r2, #0]
    c902:	466b      	mov	r3, sp
    c904:	f04f 0c01 	mov.w	ip, #1
    c908:	f8c3 c008 	str.w	ip, [r3, #8]
    c90c:	605a      	str	r2, [r3, #4]
    c90e:	f8c3 c000 	str.w	ip, [r3]
    c912:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
    c916:	2202      	movs	r2, #2
    c918:	f60d 3344 	addw	r3, sp, #2884	; 0xb44
    c91c:	9934      	ldr	r1, [sp, #208]	; 0xd0
    c91e:	f001 fa62 	bl	dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    c922:	e7ff      	b.n	c924 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2d84>
    c924:	f8dd 1b20 	ldr.w	r1, [sp, #2848]	; 0xb20
    c928:	f24e 008c 	movw	r0, #57484	; 0xe08c
    c92c:	f2c0 0001 	movt	r0, #1
    c930:	6802      	ldr	r2, [r0, #0]
    c932:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
    c936:	f002 fa22 	bl	ed7e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c93a:	e7ff      	b.n	c93c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2d9c>
    c93c:	e7ff      	b.n	c93e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2d9e>
                self.i = self.i.wrapping_add(self.v[x].into());
    c93e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c942:	8a01      	ldrh	r1, [r0, #16]
    c944:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    c948:	2a0f      	cmp	r2, #15
    c94a:	9131      	str	r1, [sp, #196]	; 0xc4
    c94c:	f200 84af 	bhi.w	d2ae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x370e>
    c950:	e7ff      	b.n	c952 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2db2>
    c952:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c956:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c95a:	1842      	adds	r2, r0, r1
    c95c:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    c960:	f001 f8ad 	bl	dabe <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hb195795cc886092aE>
    c964:	9030      	str	r0, [sp, #192]	; 0xc0
    c966:	e7ff      	b.n	c968 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2dc8>
    c968:	9831      	ldr	r0, [sp, #196]	; 0xc4
    c96a:	9930      	ldr	r1, [sp, #192]	; 0xc0
    c96c:	f006 f95a 	bl	12c24 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hed5f6279c30b1a08E>
    c970:	902f      	str	r0, [sp, #188]	; 0xbc
    c972:	e7ff      	b.n	c974 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2dd4>
    c974:	982f      	ldr	r0, [sp, #188]	; 0xbc
    c976:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    c97a:	8208      	strh	r0, [r1, #16]
        match (
    c97c:	e3c6      	b.n	d10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    c97e:	2005      	movs	r0, #5
    c980:	f8cd 0b50 	str.w	r0, [sp, #2896]	; 0xb50
    c984:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    c988:	f2c0 0001 	movt	r0, #1
    c98c:	6801      	ldr	r1, [r0, #0]
    c98e:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
    c992:	f006 f85f 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c996:	902e      	str	r0, [sp, #184]	; 0xb8
    c998:	e01f      	b.n	c9da <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e3a>
    c99a:	2001      	movs	r0, #1
    c99c:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
    c9a0:	e015      	b.n	c9ce <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e2e>
    c9a2:	2000      	movs	r0, #0
    c9a4:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
    c9a8:	e011      	b.n	c9ce <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e2e>
    c9aa:	2000      	movs	r0, #0
    c9ac:	f88d 0ea3 	strb.w	r0, [sp, #3747]	; 0xea3
    c9b0:	f89d 1ea3 	ldrb.w	r1, [sp, #3747]	; 0xea3
    c9b4:	f640 2000 	movw	r0, #2560	; 0xa00
    c9b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c9bc:	f006 f856 	bl	12a6c <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    c9c0:	f8cd 0ea4 	str.w	r0, [sp, #3748]	; 0xea4
    c9c4:	f8dd 0ea4 	ldr.w	r0, [sp, #3748]	; 0xea4
    c9c8:	f8cd 0b58 	str.w	r0, [sp, #2904]	; 0xb58
    c9cc:	e00a      	b.n	c9e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e44>
    c9ce:	f89d 0b57 	ldrb.w	r0, [sp, #2903]	; 0xb57
    c9d2:	07c0      	lsls	r0, r0, #31
    c9d4:	2800      	cmp	r0, #0
    c9d6:	d112      	bne.n	c9fe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e5e>
    c9d8:	e055      	b.n	ca86 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ee6>
    c9da:	982e      	ldr	r0, [sp, #184]	; 0xb8
    c9dc:	07c1      	lsls	r1, r0, #31
    c9de:	2900      	cmp	r1, #0
    c9e0:	d1e3      	bne.n	c9aa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e0a>
    c9e2:	e7de      	b.n	c9a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e02>
    c9e4:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
    c9e8:	f60d 3158 	addw	r1, sp, #2904	; 0xb58
    c9ec:	f006 f832 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c9f0:	902d      	str	r0, [sp, #180]	; 0xb4
    c9f2:	e7ff      	b.n	c9f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e54>
    c9f4:	982d      	ldr	r0, [sp, #180]	; 0xb4
    c9f6:	07c1      	lsls	r1, r0, #31
    c9f8:	2900      	cmp	r1, #0
    c9fa:	d1ce      	bne.n	c99a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2dfa>
    c9fc:	e7d1      	b.n	c9a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e02>
                trace!("[{:04x}] LD F, Vx", self.pc);
    c9fe:	f64d 70e8 	movw	r0, #57320	; 0xdfe8
    ca02:	f2c0 0001 	movt	r0, #1
    ca06:	6801      	ldr	r1, [r0, #0]
    ca08:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ca0c:	f100 0212 	add.w	r2, r0, #18
    ca10:	f8cd 2b7c 	str.w	r2, [sp, #2940]	; 0xb7c
    ca14:	f8dd 2b7c 	ldr.w	r2, [sp, #2940]	; 0xb7c
    ca18:	f8cd 2cbc 	str.w	r2, [sp, #3260]	; 0xcbc
    ca1c:	f248 13bb 	movw	r3, #33211	; 0x81bb
    ca20:	f2c0 0301 	movt	r3, #1
    ca24:	4610      	mov	r0, r2
    ca26:	912c      	str	r1, [sp, #176]	; 0xb0
    ca28:	4619      	mov	r1, r3
    ca2a:	f005 f931 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ca2e:	902b      	str	r0, [sp, #172]	; 0xac
    ca30:	912a      	str	r1, [sp, #168]	; 0xa8
    ca32:	e7ff      	b.n	ca34 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e94>
    ca34:	982b      	ldr	r0, [sp, #172]	; 0xac
    ca36:	f8cd 0b74 	str.w	r0, [sp, #2932]	; 0xb74
    ca3a:	992a      	ldr	r1, [sp, #168]	; 0xa8
    ca3c:	f8cd 1b78 	str.w	r1, [sp, #2936]	; 0xb78
    ca40:	f64d 6228 	movw	r2, #56872	; 0xde28
    ca44:	f2c0 0201 	movt	r2, #1
    ca48:	6812      	ldr	r2, [r2, #0]
    ca4a:	466b      	mov	r3, sp
    ca4c:	f04f 0c01 	mov.w	ip, #1
    ca50:	f8c3 c008 	str.w	ip, [r3, #8]
    ca54:	605a      	str	r2, [r3, #4]
    ca56:	f8c3 c000 	str.w	ip, [r3]
    ca5a:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
    ca5e:	2202      	movs	r2, #2
    ca60:	f60d 3374 	addw	r3, sp, #2932	; 0xb74
    ca64:	992c      	ldr	r1, [sp, #176]	; 0xb0
    ca66:	f001 f9be 	bl	dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    ca6a:	e7ff      	b.n	ca6c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ecc>
    ca6c:	f8dd 1b50 	ldr.w	r1, [sp, #2896]	; 0xb50
    ca70:	f24e 0008 	movw	r0, #57352	; 0xe008
    ca74:	f2c0 0001 	movt	r0, #1
    ca78:	6802      	ldr	r2, [r0, #0]
    ca7a:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
    ca7e:	f002 f97e 	bl	ed7e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ca82:	e7ff      	b.n	ca84 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ee4>
    ca84:	e7ff      	b.n	ca86 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ee6>
                self.i = (self.v[x] * 5).into();
    ca86:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ca8a:	280f      	cmp	r0, #15
    ca8c:	f200 83f9 	bhi.w	d282 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x36e2>
    ca90:	e7ff      	b.n	ca92 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ef2>
    ca92:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ca96:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ca9a:	1842      	adds	r2, r0, r1
    ca9c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    caa0:	2305      	movs	r3, #5
    caa2:	fba2 2303 	umull	r2, r3, r2, r3
    caa6:	ea4f 2c12 	mov.w	ip, r2, lsr #8
    caaa:	f04f 0e00 	mov.w	lr, #0
    caae:	ebbe 2f12 	cmp.w	lr, r2, lsr #8
    cab2:	bf18      	it	ne
    cab4:	f04f 0c01 	movne.w	ip, #1
    cab8:	2b00      	cmp	r3, #0
    caba:	bf18      	it	ne
    cabc:	2301      	movne	r3, #1
    cabe:	ea43 030c 	orr.w	r3, r3, ip
    cac2:	2b00      	cmp	r3, #0
    cac4:	9229      	str	r2, [sp, #164]	; 0xa4
    cac6:	f040 83e6 	bne.w	d296 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x36f6>
    caca:	e7ff      	b.n	cacc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f2c>
    cacc:	9829      	ldr	r0, [sp, #164]	; 0xa4
    cace:	f000 fff6 	bl	dabe <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hb195795cc886092aE>
    cad2:	9028      	str	r0, [sp, #160]	; 0xa0
    cad4:	e7ff      	b.n	cad6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f36>
    cad6:	9828      	ldr	r0, [sp, #160]	; 0xa0
    cad8:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    cadc:	8208      	strh	r0, [r1, #16]
        match (
    cade:	e315      	b.n	d10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    cae0:	2005      	movs	r0, #5
    cae2:	f8cd 0b80 	str.w	r0, [sp, #2944]	; 0xb80
    cae6:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    caea:	f2c0 0001 	movt	r0, #1
    caee:	6801      	ldr	r1, [r0, #0]
    caf0:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
    caf4:	f005 ffae 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    caf8:	9027      	str	r0, [sp, #156]	; 0x9c
    cafa:	e01f      	b.n	cb3c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f9c>
    cafc:	2001      	movs	r0, #1
    cafe:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
    cb02:	e015      	b.n	cb30 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f90>
    cb04:	2000      	movs	r0, #0
    cb06:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
    cb0a:	e011      	b.n	cb30 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f90>
    cb0c:	2000      	movs	r0, #0
    cb0e:	f88d 0eab 	strb.w	r0, [sp, #3755]	; 0xeab
    cb12:	f89d 1eab 	ldrb.w	r1, [sp, #3755]	; 0xeab
    cb16:	f640 2000 	movw	r0, #2560	; 0xa00
    cb1a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    cb1e:	f005 ffa5 	bl	12a6c <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    cb22:	f8cd 0eac 	str.w	r0, [sp, #3756]	; 0xeac
    cb26:	f8dd 0eac 	ldr.w	r0, [sp, #3756]	; 0xeac
    cb2a:	f8cd 0b88 	str.w	r0, [sp, #2952]	; 0xb88
    cb2e:	e00a      	b.n	cb46 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2fa6>
    cb30:	f89d 0b87 	ldrb.w	r0, [sp, #2951]	; 0xb87
    cb34:	07c0      	lsls	r0, r0, #31
    cb36:	2800      	cmp	r0, #0
    cb38:	d112      	bne.n	cb60 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2fc0>
    cb3a:	e055      	b.n	cbe8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3048>
    cb3c:	9827      	ldr	r0, [sp, #156]	; 0x9c
    cb3e:	07c1      	lsls	r1, r0, #31
    cb40:	2900      	cmp	r1, #0
    cb42:	d1e3      	bne.n	cb0c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f6c>
    cb44:	e7de      	b.n	cb04 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f64>
    cb46:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
    cb4a:	f60d 3188 	addw	r1, sp, #2952	; 0xb88
    cb4e:	f005 ff81 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    cb52:	9026      	str	r0, [sp, #152]	; 0x98
    cb54:	e7ff      	b.n	cb56 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2fb6>
    cb56:	9826      	ldr	r0, [sp, #152]	; 0x98
    cb58:	07c1      	lsls	r1, r0, #31
    cb5a:	2900      	cmp	r1, #0
    cb5c:	d1ce      	bne.n	cafc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f5c>
    cb5e:	e7d1      	b.n	cb04 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f64>
                trace!("[{:04x}] LD B, Vx", self.pc);
    cb60:	f64d 7048 	movw	r0, #57160	; 0xdf48
    cb64:	f2c0 0001 	movt	r0, #1
    cb68:	6801      	ldr	r1, [r0, #0]
    cb6a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cb6e:	f100 0212 	add.w	r2, r0, #18
    cb72:	f8cd 2bac 	str.w	r2, [sp, #2988]	; 0xbac
    cb76:	f8dd 2bac 	ldr.w	r2, [sp, #2988]	; 0xbac
    cb7a:	f8cd 2cb4 	str.w	r2, [sp, #3252]	; 0xcb4
    cb7e:	f248 13bb 	movw	r3, #33211	; 0x81bb
    cb82:	f2c0 0301 	movt	r3, #1
    cb86:	4610      	mov	r0, r2
    cb88:	9125      	str	r1, [sp, #148]	; 0x94
    cb8a:	4619      	mov	r1, r3
    cb8c:	f005 f880 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    cb90:	9024      	str	r0, [sp, #144]	; 0x90
    cb92:	9123      	str	r1, [sp, #140]	; 0x8c
    cb94:	e7ff      	b.n	cb96 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ff6>
    cb96:	9824      	ldr	r0, [sp, #144]	; 0x90
    cb98:	f8cd 0ba4 	str.w	r0, [sp, #2980]	; 0xba4
    cb9c:	9923      	ldr	r1, [sp, #140]	; 0x8c
    cb9e:	f8cd 1ba8 	str.w	r1, [sp, #2984]	; 0xba8
    cba2:	f64d 6228 	movw	r2, #56872	; 0xde28
    cba6:	f2c0 0201 	movt	r2, #1
    cbaa:	6812      	ldr	r2, [r2, #0]
    cbac:	466b      	mov	r3, sp
    cbae:	f04f 0c01 	mov.w	ip, #1
    cbb2:	f8c3 c008 	str.w	ip, [r3, #8]
    cbb6:	605a      	str	r2, [r3, #4]
    cbb8:	f8c3 c000 	str.w	ip, [r3]
    cbbc:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
    cbc0:	2202      	movs	r2, #2
    cbc2:	f60d 33a4 	addw	r3, sp, #2980	; 0xba4
    cbc6:	9925      	ldr	r1, [sp, #148]	; 0x94
    cbc8:	f001 f90d 	bl	dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    cbcc:	e7ff      	b.n	cbce <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x302e>
    cbce:	f8dd 1b80 	ldr.w	r1, [sp, #2944]	; 0xb80
    cbd2:	f64d 7068 	movw	r0, #57192	; 0xdf68
    cbd6:	f2c0 0001 	movt	r0, #1
    cbda:	6802      	ldr	r2, [r0, #0]
    cbdc:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
    cbe0:	f002 f8cd 	bl	ed7e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    cbe4:	e7ff      	b.n	cbe6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3046>
    cbe6:	e7ff      	b.n	cbe8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3048>
                let bcd = self.v[x];
    cbe8:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    cbec:	280f      	cmp	r0, #15
    cbee:	f200 8308 	bhi.w	d202 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3662>
    cbf2:	e7ff      	b.n	cbf4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3054>
    cbf4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cbf8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    cbfc:	1842      	adds	r2, r0, r1
    cbfe:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    cc02:	4613      	mov	r3, r2
    cc04:	f88d 2cbb 	strb.w	r2, [sp, #3259]	; 0xcbb
    cc08:	f248 5c1f 	movw	ip, #34079	; 0x851f
    cc0c:	f2c5 1ceb 	movt	ip, #20971	; 0x51eb
                self.mem[self.i as usize] = (bcd / 100) % 10;
    cc10:	fba2 2c0c 	umull	r2, ip, r2, ip
    cc14:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    cc18:	f8b0 e010 	ldrh.w	lr, [r0, #16]
    cc1c:	4674      	mov	r4, lr
    cc1e:	2500      	movs	r5, #0
    cc20:	ebb5 3f1e 	cmp.w	r5, lr, lsr #12
    cc24:	9322      	str	r3, [sp, #136]	; 0x88
    cc26:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
    cc2a:	9420      	str	r4, [sp, #128]	; 0x80
    cc2c:	f040 82f3 	bne.w	d216 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3676>
    cc30:	e7ff      	b.n	cc32 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3092>
    cc32:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cc36:	9920      	ldr	r1, [sp, #128]	; 0x80
    cc38:	1842      	adds	r2, r0, r1
    cc3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
    cc3c:	fa5f fc83 	uxtb.w	ip, r3
    cc40:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    cc44:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    cc48:	fbac 450e 	umull	r4, r5, ip, lr
    cc4c:	08ed      	lsrs	r5, r5, #3
    cc4e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    cc52:	ebac 0c45 	sub.w	ip, ip, r5, lsl #1
    cc56:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
    cc5a:	9a22      	ldr	r2, [sp, #136]	; 0x88
    cc5c:	fa5f fc82 	uxtb.w	ip, r2
    cc60:	fbac ce0e 	umull	ip, lr, ip, lr
    cc64:	ea4f 0ede 	mov.w	lr, lr, lsr #3
    cc68:	8a05      	ldrh	r5, [r0, #16]
    cc6a:	3501      	adds	r5, #1
    cc6c:	2600      	movs	r6, #0
    cc6e:	2e00      	cmp	r6, #0
    cc70:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
    cc74:	951e      	str	r5, [sp, #120]	; 0x78
    cc76:	f040 82d8 	bne.w	d22a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x368a>
    cc7a:	e7ff      	b.n	cc7c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x30dc>
    cc7c:	2000      	movs	r0, #0
    cc7e:	991e      	ldr	r1, [sp, #120]	; 0x78
    cc80:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    cc84:	f040 82dd 	bne.w	d242 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x36a2>
    cc88:	e7ff      	b.n	cc8a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x30ea>
    cc8a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cc8e:	991e      	ldr	r1, [sp, #120]	; 0x78
    cc90:	1842      	adds	r2, r0, r1
    cc92:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    cc94:	fa5f fc83 	uxtb.w	ip, r3
    cc98:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    cc9c:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    cca0:	fbac e40e 	umull	lr, r4, ip, lr
    cca4:	08e4      	lsrs	r4, r4, #3
    cca6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    ccaa:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
    ccae:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 2] = bcd % 10;
    ccb2:	8a02      	ldrh	r2, [r0, #16]
    ccb4:	3202      	adds	r2, #2
    ccb6:	f04f 0c00 	mov.w	ip, #0
    ccba:	f1bc 0f00 	cmp.w	ip, #0
    ccbe:	921d      	str	r2, [sp, #116]	; 0x74
    ccc0:	f040 82c9 	bne.w	d256 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x36b6>
    ccc4:	e7ff      	b.n	ccc6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3126>
    ccc6:	2000      	movs	r0, #0
    ccc8:	991d      	ldr	r1, [sp, #116]	; 0x74
    ccca:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    ccce:	f040 82ce 	bne.w	d26e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x36ce>
    ccd2:	e7ff      	b.n	ccd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3134>
    ccd4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ccd8:	991d      	ldr	r1, [sp, #116]	; 0x74
    ccda:	1842      	adds	r2, r0, r1
    ccdc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ccde:	fa5f fc83 	uxtb.w	ip, r3
    cce2:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    cce6:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    ccea:	fbac e40e 	umull	lr, r4, ip, lr
    ccee:	08e4      	lsrs	r4, r4, #3
    ccf0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    ccf4:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
    ccf8:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
        match (
    ccfc:	e206      	b.n	d10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    ccfe:	2005      	movs	r0, #5
    cd00:	f8cd 0bb0 	str.w	r0, [sp, #2992]	; 0xbb0
    cd04:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    cd08:	f2c0 0001 	movt	r0, #1
    cd0c:	6801      	ldr	r1, [r0, #0]
    cd0e:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
    cd12:	f005 fe9f 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    cd16:	901c      	str	r0, [sp, #112]	; 0x70
    cd18:	e01f      	b.n	cd5a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x31ba>
    cd1a:	2001      	movs	r0, #1
    cd1c:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
    cd20:	e015      	b.n	cd4e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x31ae>
    cd22:	2000      	movs	r0, #0
    cd24:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
    cd28:	e011      	b.n	cd4e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x31ae>
    cd2a:	2000      	movs	r0, #0
    cd2c:	f88d 0eb3 	strb.w	r0, [sp, #3763]	; 0xeb3
    cd30:	f89d 1eb3 	ldrb.w	r1, [sp, #3763]	; 0xeb3
    cd34:	f640 2000 	movw	r0, #2560	; 0xa00
    cd38:	f2c2 0000 	movt	r0, #8192	; 0x2000
    cd3c:	f005 fe96 	bl	12a6c <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    cd40:	f8cd 0eb4 	str.w	r0, [sp, #3764]	; 0xeb4
    cd44:	f8dd 0eb4 	ldr.w	r0, [sp, #3764]	; 0xeb4
    cd48:	f8cd 0bb8 	str.w	r0, [sp, #3000]	; 0xbb8
    cd4c:	e00a      	b.n	cd64 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x31c4>
    cd4e:	f89d 0bb7 	ldrb.w	r0, [sp, #2999]	; 0xbb7
    cd52:	07c0      	lsls	r0, r0, #31
    cd54:	2800      	cmp	r0, #0
    cd56:	d112      	bne.n	cd7e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x31de>
    cd58:	e055      	b.n	ce06 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3266>
    cd5a:	981c      	ldr	r0, [sp, #112]	; 0x70
    cd5c:	07c1      	lsls	r1, r0, #31
    cd5e:	2900      	cmp	r1, #0
    cd60:	d1e3      	bne.n	cd2a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x318a>
    cd62:	e7de      	b.n	cd22 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3182>
    cd64:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
    cd68:	f60d 31b8 	addw	r1, sp, #3000	; 0xbb8
    cd6c:	f005 fe72 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    cd70:	901b      	str	r0, [sp, #108]	; 0x6c
    cd72:	e7ff      	b.n	cd74 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x31d4>
    cd74:	981b      	ldr	r0, [sp, #108]	; 0x6c
    cd76:	07c1      	lsls	r1, r0, #31
    cd78:	2900      	cmp	r1, #0
    cd7a:	d1ce      	bne.n	cd1a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x317a>
    cd7c:	e7d1      	b.n	cd22 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3182>
                trace!("[{:04x}] LD [I], Vx", self.pc);
    cd7e:	f64d 60c8 	movw	r0, #57032	; 0xdec8
    cd82:	f2c0 0001 	movt	r0, #1
    cd86:	6801      	ldr	r1, [r0, #0]
    cd88:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cd8c:	f100 0212 	add.w	r2, r0, #18
    cd90:	f8cd 2bdc 	str.w	r2, [sp, #3036]	; 0xbdc
    cd94:	f8dd 2bdc 	ldr.w	r2, [sp, #3036]	; 0xbdc
    cd98:	f8cd 2ca0 	str.w	r2, [sp, #3232]	; 0xca0
    cd9c:	f248 13bb 	movw	r3, #33211	; 0x81bb
    cda0:	f2c0 0301 	movt	r3, #1
    cda4:	4610      	mov	r0, r2
    cda6:	911a      	str	r1, [sp, #104]	; 0x68
    cda8:	4619      	mov	r1, r3
    cdaa:	f004 ff71 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    cdae:	9019      	str	r0, [sp, #100]	; 0x64
    cdb0:	9118      	str	r1, [sp, #96]	; 0x60
    cdb2:	e7ff      	b.n	cdb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3214>
    cdb4:	9819      	ldr	r0, [sp, #100]	; 0x64
    cdb6:	f8cd 0bd4 	str.w	r0, [sp, #3028]	; 0xbd4
    cdba:	9918      	ldr	r1, [sp, #96]	; 0x60
    cdbc:	f8cd 1bd8 	str.w	r1, [sp, #3032]	; 0xbd8
    cdc0:	f64d 6228 	movw	r2, #56872	; 0xde28
    cdc4:	f2c0 0201 	movt	r2, #1
    cdc8:	6812      	ldr	r2, [r2, #0]
    cdca:	466b      	mov	r3, sp
    cdcc:	f04f 0c01 	mov.w	ip, #1
    cdd0:	f8c3 c008 	str.w	ip, [r3, #8]
    cdd4:	605a      	str	r2, [r3, #4]
    cdd6:	f8c3 c000 	str.w	ip, [r3]
    cdda:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
    cdde:	2202      	movs	r2, #2
    cde0:	f60d 33d4 	addw	r3, sp, #3028	; 0xbd4
    cde4:	991a      	ldr	r1, [sp, #104]	; 0x68
    cde6:	f000 fffe 	bl	dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    cdea:	e7ff      	b.n	cdec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x324c>
    cdec:	f8dd 1bb0 	ldr.w	r1, [sp, #2992]	; 0xbb0
    cdf0:	f64d 60e8 	movw	r0, #57064	; 0xdee8
    cdf4:	f2c0 0001 	movt	r0, #1
    cdf8:	6802      	ldr	r2, [r0, #0]
    cdfa:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
    cdfe:	f001 ffbe 	bl	ed7e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ce02:	e7ff      	b.n	ce04 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3264>
    ce04:	e7ff      	b.n	ce06 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3266>
                let x = x as usize;
    ce06:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ce0a:	f8cd 0ca4 	str.w	r0, [sp, #3236]	; 0xca4
                for i in 0..(x + 1) {
    ce0e:	1c41      	adds	r1, r0, #1
    ce10:	460a      	mov	r2, r1
    ce12:	4281      	cmp	r1, r0
    ce14:	9217      	str	r2, [sp, #92]	; 0x5c
    ce16:	f0c0 81c9 	bcc.w	d1ac <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x360c>
    ce1a:	e7ff      	b.n	ce1c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x327c>
    ce1c:	2000      	movs	r0, #0
    ce1e:	f8cd 0be0 	str.w	r0, [sp, #3040]	; 0xbe0
    ce22:	9817      	ldr	r0, [sp, #92]	; 0x5c
    ce24:	f8cd 0be4 	str.w	r0, [sp, #3044]	; 0xbe4
    ce28:	f8dd 0be0 	ldr.w	r0, [sp, #3040]	; 0xbe0
    ce2c:	f8dd 1be4 	ldr.w	r1, [sp, #3044]	; 0xbe4
    ce30:	f001 fd37 	bl	e8a2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    ce34:	9016      	str	r0, [sp, #88]	; 0x58
    ce36:	9115      	str	r1, [sp, #84]	; 0x54
    ce38:	e7ff      	b.n	ce3a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x329a>
    ce3a:	9816      	ldr	r0, [sp, #88]	; 0x58
    ce3c:	f8cd 0be8 	str.w	r0, [sp, #3048]	; 0xbe8
    ce40:	9915      	ldr	r1, [sp, #84]	; 0x54
    ce42:	f8cd 1bec 	str.w	r1, [sp, #3052]	; 0xbec
    ce46:	e7ff      	b.n	ce48 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x32a8>
    ce48:	f60d 30e8 	addw	r0, sp, #3048	; 0xbe8
    ce4c:	f001 fc9e 	bl	e78c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    ce50:	f8cd 1bf4 	str.w	r1, [sp, #3060]	; 0xbf4
    ce54:	f8cd 0bf0 	str.w	r0, [sp, #3056]	; 0xbf0
    ce58:	e7ff      	b.n	ce5a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x32ba>
    ce5a:	f8dd 0bf0 	ldr.w	r0, [sp, #3056]	; 0xbf0
    ce5e:	2800      	cmp	r0, #0
    ce60:	d001      	beq.n	ce66 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x32c6>
    ce62:	e7ff      	b.n	ce64 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x32c4>
    ce64:	e001      	b.n	ce6a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x32ca>
        match (
    ce66:	e151      	b.n	d10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
                for i in 0..(x + 1) {
    ce68:	defe      	udf	#254	; 0xfe
    ce6a:	f8dd 0bf4 	ldr.w	r0, [sp, #3060]	; 0xbf4
    ce6e:	f8cd 0ca8 	str.w	r0, [sp, #3240]	; 0xca8
    ce72:	f8cd 0cac 	str.w	r0, [sp, #3244]	; 0xcac
    ce76:	f8cd 0cb0 	str.w	r0, [sp, #3248]	; 0xcb0
                    self.mem[self.i as usize + i] = self.v[i];
    ce7a:	280f      	cmp	r0, #15
    ce7c:	9014      	str	r0, [sp, #80]	; 0x50
    ce7e:	f200 81a1 	bhi.w	d1c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3624>
    ce82:	e7ff      	b.n	ce84 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x32e4>
    ce84:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ce88:	9914      	ldr	r1, [sp, #80]	; 0x50
    ce8a:	1842      	adds	r2, r0, r1
    ce8c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ce90:	8a03      	ldrh	r3, [r0, #16]
    ce92:	eb03 0c01 	add.w	ip, r3, r1
    ce96:	46e6      	mov	lr, ip
    ce98:	459c      	cmp	ip, r3
    ce9a:	9213      	str	r2, [sp, #76]	; 0x4c
    ce9c:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
    cea0:	f0c0 8199 	bcc.w	d1d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3636>
    cea4:	e7ff      	b.n	cea6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3306>
    cea6:	2000      	movs	r0, #0
    cea8:	9912      	ldr	r1, [sp, #72]	; 0x48
    ceaa:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    ceae:	f040 819e 	bne.w	d1ee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x364e>
    ceb2:	e7ff      	b.n	ceb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3314>
    ceb4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ceb8:	9912      	ldr	r1, [sp, #72]	; 0x48
    ceba:	1842      	adds	r2, r0, r1
    cebc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    cebe:	f882 3047 	strb.w	r3, [r2, #71]	; 0x47
                for i in 0..(x + 1) {
    cec2:	e7c1      	b.n	ce48 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x32a8>
    cec4:	2005      	movs	r0, #5
    cec6:	f8cd 0bf8 	str.w	r0, [sp, #3064]	; 0xbf8
    ceca:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    cece:	f2c0 0001 	movt	r0, #1
    ced2:	6801      	ldr	r1, [r0, #0]
    ced4:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
    ced8:	f005 fdbc 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    cedc:	9011      	str	r0, [sp, #68]	; 0x44
    cede:	e01f      	b.n	cf20 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3380>
    cee0:	2001      	movs	r0, #1
    cee2:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
    cee6:	e015      	b.n	cf14 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3374>
    cee8:	2000      	movs	r0, #0
    ceea:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
    ceee:	e011      	b.n	cf14 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3374>
    cef0:	2000      	movs	r0, #0
    cef2:	f88d 0ebb 	strb.w	r0, [sp, #3771]	; 0xebb
    cef6:	f89d 1ebb 	ldrb.w	r1, [sp, #3771]	; 0xebb
    cefa:	f640 2000 	movw	r0, #2560	; 0xa00
    cefe:	f2c2 0000 	movt	r0, #8192	; 0x2000
    cf02:	f005 fdb3 	bl	12a6c <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    cf06:	f8cd 0ebc 	str.w	r0, [sp, #3772]	; 0xebc
    cf0a:	f8dd 0ebc 	ldr.w	r0, [sp, #3772]	; 0xebc
    cf0e:	f8cd 0c00 	str.w	r0, [sp, #3072]	; 0xc00
    cf12:	e00a      	b.n	cf2a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x338a>
    cf14:	f89d 0bff 	ldrb.w	r0, [sp, #3071]	; 0xbff
    cf18:	07c0      	lsls	r0, r0, #31
    cf1a:	2800      	cmp	r0, #0
    cf1c:	d112      	bne.n	cf44 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x33a4>
    cf1e:	e055      	b.n	cfcc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x342c>
    cf20:	9811      	ldr	r0, [sp, #68]	; 0x44
    cf22:	07c1      	lsls	r1, r0, #31
    cf24:	2900      	cmp	r1, #0
    cf26:	d1e3      	bne.n	cef0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3350>
    cf28:	e7de      	b.n	cee8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3348>
    cf2a:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
    cf2e:	f50d 6140 	add.w	r1, sp, #3072	; 0xc00
    cf32:	f005 fd8f 	bl	12a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    cf36:	9010      	str	r0, [sp, #64]	; 0x40
    cf38:	e7ff      	b.n	cf3a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x339a>
    cf3a:	9810      	ldr	r0, [sp, #64]	; 0x40
    cf3c:	07c1      	lsls	r1, r0, #31
    cf3e:	2900      	cmp	r1, #0
    cf40:	d1ce      	bne.n	cee0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3340>
    cf42:	e7d1      	b.n	cee8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3348>
                trace!("[{:04x}] LD Vx, [I]", self.pc);
    cf44:	f64d 6004 	movw	r0, #56836	; 0xde04
    cf48:	f2c0 0001 	movt	r0, #1
    cf4c:	6801      	ldr	r1, [r0, #0]
    cf4e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cf52:	f100 0212 	add.w	r2, r0, #18
    cf56:	f8cd 2c24 	str.w	r2, [sp, #3108]	; 0xc24
    cf5a:	f8dd 2c24 	ldr.w	r2, [sp, #3108]	; 0xc24
    cf5e:	f8cd 2c8c 	str.w	r2, [sp, #3212]	; 0xc8c
    cf62:	f248 13bb 	movw	r3, #33211	; 0x81bb
    cf66:	f2c0 0301 	movt	r3, #1
    cf6a:	4610      	mov	r0, r2
    cf6c:	910f      	str	r1, [sp, #60]	; 0x3c
    cf6e:	4619      	mov	r1, r3
    cf70:	f004 fe8e 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    cf74:	900e      	str	r0, [sp, #56]	; 0x38
    cf76:	910d      	str	r1, [sp, #52]	; 0x34
    cf78:	e7ff      	b.n	cf7a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x33da>
    cf7a:	980e      	ldr	r0, [sp, #56]	; 0x38
    cf7c:	f8cd 0c1c 	str.w	r0, [sp, #3100]	; 0xc1c
    cf80:	990d      	ldr	r1, [sp, #52]	; 0x34
    cf82:	f8cd 1c20 	str.w	r1, [sp, #3104]	; 0xc20
    cf86:	f64d 6228 	movw	r2, #56872	; 0xde28
    cf8a:	f2c0 0201 	movt	r2, #1
    cf8e:	6812      	ldr	r2, [r2, #0]
    cf90:	466b      	mov	r3, sp
    cf92:	f04f 0c01 	mov.w	ip, #1
    cf96:	f8c3 c008 	str.w	ip, [r3, #8]
    cf9a:	605a      	str	r2, [r3, #4]
    cf9c:	f8c3 c000 	str.w	ip, [r3]
    cfa0:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
    cfa4:	2202      	movs	r2, #2
    cfa6:	f60d 431c 	addw	r3, sp, #3100	; 0xc1c
    cfaa:	990f      	ldr	r1, [sp, #60]	; 0x3c
    cfac:	f000 ff1b 	bl	dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    cfb0:	e7ff      	b.n	cfb2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3412>
    cfb2:	f8dd 1bf8 	ldr.w	r1, [sp, #3064]	; 0xbf8
    cfb6:	f64d 6068 	movw	r0, #56936	; 0xde68
    cfba:	f2c0 0001 	movt	r0, #1
    cfbe:	6802      	ldr	r2, [r0, #0]
    cfc0:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
    cfc4:	f001 fedb 	bl	ed7e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    cfc8:	e7ff      	b.n	cfca <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x342a>
    cfca:	e7ff      	b.n	cfcc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x342c>
                let x = x as usize;
    cfcc:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    cfd0:	f8cd 0c90 	str.w	r0, [sp, #3216]	; 0xc90
                for i in 0..(x + 1) {
    cfd4:	1c41      	adds	r1, r0, #1
    cfd6:	460a      	mov	r2, r1
    cfd8:	4281      	cmp	r1, r0
    cfda:	920c      	str	r2, [sp, #48]	; 0x30
    cfdc:	f0c0 80bb 	bcc.w	d156 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x35b6>
    cfe0:	e7ff      	b.n	cfe2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3442>
    cfe2:	2000      	movs	r0, #0
    cfe4:	f8cd 0c28 	str.w	r0, [sp, #3112]	; 0xc28
    cfe8:	980c      	ldr	r0, [sp, #48]	; 0x30
    cfea:	f8cd 0c2c 	str.w	r0, [sp, #3116]	; 0xc2c
    cfee:	f8dd 0c28 	ldr.w	r0, [sp, #3112]	; 0xc28
    cff2:	f8dd 1c2c 	ldr.w	r1, [sp, #3116]	; 0xc2c
    cff6:	f001 fc54 	bl	e8a2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    cffa:	900b      	str	r0, [sp, #44]	; 0x2c
    cffc:	910a      	str	r1, [sp, #40]	; 0x28
    cffe:	e7ff      	b.n	d000 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3460>
    d000:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d002:	f8cd 0c30 	str.w	r0, [sp, #3120]	; 0xc30
    d006:	990a      	ldr	r1, [sp, #40]	; 0x28
    d008:	f8cd 1c34 	str.w	r1, [sp, #3124]	; 0xc34
    d00c:	e7ff      	b.n	d00e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x346e>
    d00e:	f50d 6043 	add.w	r0, sp, #3120	; 0xc30
    d012:	f001 fbbb 	bl	e78c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    d016:	f8cd 1c3c 	str.w	r1, [sp, #3132]	; 0xc3c
    d01a:	f8cd 0c38 	str.w	r0, [sp, #3128]	; 0xc38
    d01e:	e7ff      	b.n	d020 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3480>
    d020:	f8dd 0c38 	ldr.w	r0, [sp, #3128]	; 0xc38
    d024:	2800      	cmp	r0, #0
    d026:	d001      	beq.n	d02c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x348c>
    d028:	e7ff      	b.n	d02a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x348a>
    d02a:	e001      	b.n	d030 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3490>
        match (
    d02c:	e06e      	b.n	d10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
                for i in 0..(x + 1) {
    d02e:	defe      	udf	#254	; 0xfe
    d030:	f8dd 0c3c 	ldr.w	r0, [sp, #3132]	; 0xc3c
    d034:	f8cd 0c94 	str.w	r0, [sp, #3220]	; 0xc94
    d038:	f8cd 0c98 	str.w	r0, [sp, #3224]	; 0xc98
    d03c:	f8cd 0c9c 	str.w	r0, [sp, #3228]	; 0xc9c
                    self.v[i] = self.mem[self.i as usize + i];
    d040:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    d044:	8a0a      	ldrh	r2, [r1, #16]
    d046:	1813      	adds	r3, r2, r0
    d048:	469c      	mov	ip, r3
    d04a:	4293      	cmp	r3, r2
    d04c:	9009      	str	r0, [sp, #36]	; 0x24
    d04e:	f8cd c020 	str.w	ip, [sp, #32]
    d052:	f0c0 808c 	bcc.w	d16e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x35ce>
    d056:	e7ff      	b.n	d058 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x34b8>
    d058:	2000      	movs	r0, #0
    d05a:	9908      	ldr	r1, [sp, #32]
    d05c:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    d060:	f040 8091 	bne.w	d186 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x35e6>
    d064:	e7ff      	b.n	d066 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x34c6>
    d066:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d06a:	9908      	ldr	r1, [sp, #32]
    d06c:	1842      	adds	r2, r0, r1
    d06e:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    d072:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d074:	2b0f      	cmp	r3, #15
    d076:	9207      	str	r2, [sp, #28]
    d078:	f200 808f 	bhi.w	d19a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x35fa>
    d07c:	e7ff      	b.n	d07e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x34de>
    d07e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d082:	9909      	ldr	r1, [sp, #36]	; 0x24
    d084:	1842      	adds	r2, r0, r1
    d086:	9b07      	ldr	r3, [sp, #28]
    d088:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                for i in 0..(x + 1) {
    d08c:	e7bf      	b.n	d00e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x346e>
    d08e:	f248 11bb 	movw	r1, #33211	; 0x81bb
    d092:	f2c0 0101 	movt	r1, #1
    d096:	f8dd 0430 	ldr.w	r0, [sp, #1072]	; 0x430
    d09a:	f004 fdf9 	bl	11c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d09e:	9006      	str	r0, [sp, #24]
    d0a0:	9105      	str	r1, [sp, #20]
    d0a2:	e7ff      	b.n	d0a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3504>
    d0a4:	f8dd 042c 	ldr.w	r0, [sp, #1068]	; 0x42c
    d0a8:	f8cd 0c58 	str.w	r0, [sp, #3160]	; 0xc58
    d0ac:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
    d0b0:	f8cd 1c5c 	str.w	r1, [sp, #3164]	; 0xc5c
    d0b4:	9a06      	ldr	r2, [sp, #24]
    d0b6:	f8cd 2c60 	str.w	r2, [sp, #3168]	; 0xc60
    d0ba:	9b05      	ldr	r3, [sp, #20]
    d0bc:	f8cd 3c64 	str.w	r3, [sp, #3172]	; 0xc64
    d0c0:	f64e 1ccc 	movw	ip, #59852	; 0xe9cc
    d0c4:	f2c0 0c01 	movt	ip, #1
    d0c8:	f8dc c000 	ldr.w	ip, [ip]
    d0cc:	46ee      	mov	lr, sp
    d0ce:	2402      	movs	r4, #2
    d0d0:	f8ce 4008 	str.w	r4, [lr, #8]
    d0d4:	f8ce c004 	str.w	ip, [lr, #4]
    d0d8:	f8ce 4000 	str.w	r4, [lr]
    d0dc:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
    d0e0:	f60d 4358 	addw	r3, sp, #3160	; 0xc58
    d0e4:	f8dd 1434 	ldr.w	r1, [sp, #1076]	; 0x434
    d0e8:	4622      	mov	r2, r4
    d0ea:	f000 fe7c 	bl	dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    d0ee:	e7ff      	b.n	d0f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3550>
    d0f0:	f64e 10f0 	movw	r0, #59888	; 0xe9f0
    d0f4:	f2c0 0001 	movt	r0, #1
    d0f8:	f009 fc4b 	bl	16992 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    d0fc:	9004      	str	r0, [sp, #16]
    d0fe:	e7ff      	b.n	d100 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3560>
    d100:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
    d104:	9904      	ldr	r1, [sp, #16]
    d106:	f009 fc81 	bl	16a0c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    d10a:	defe      	udf	#254	; 0xfe
        }
    }
    d10c:	f50d 6d6c 	add.w	sp, sp, #3776	; 0xec0
    d110:	bd70      	pop	{r4, r5, r6, pc}
        let h = self.mem[self.pc as usize] as u16;
    d112:	f64d 5084 	movw	r0, #56708	; 0xdd84
    d116:	f2c0 0001 	movt	r0, #1
    d11a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d11e:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
    d122:	f009 fc53 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d126:	defe      	udf	#254	; 0xfe
        let l = self.mem[(self.pc + 1) as usize] as u16;
    d128:	f64d 50b0 	movw	r0, #56752	; 0xddb0
    d12c:	f2c0 0001 	movt	r0, #1
    d130:	f64d 5294 	movw	r2, #56724	; 0xdd94
    d134:	f2c0 0201 	movt	r2, #1
    d138:	211c      	movs	r1, #28
    d13a:	f009 fc31 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d13e:	defe      	udf	#254	; 0xfe
    d140:	f64d 50cc 	movw	r0, #56780	; 0xddcc
    d144:	f2c0 0001 	movt	r0, #1
    d148:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d14c:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
    d150:	f009 fc3c 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d154:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
    d156:	f64d 50b0 	movw	r0, #56752	; 0xddb0
    d15a:	f2c0 0001 	movt	r0, #1
    d15e:	f64d 626c 	movw	r2, #56940	; 0xde6c
    d162:	f2c0 0201 	movt	r2, #1
    d166:	211c      	movs	r1, #28
    d168:	f009 fc1a 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d16c:	defe      	udf	#254	; 0xfe
                    self.v[i] = self.mem[self.i as usize + i];
    d16e:	f64d 50b0 	movw	r0, #56752	; 0xddb0
    d172:	f2c0 0001 	movt	r0, #1
    d176:	f64d 627c 	movw	r2, #56956	; 0xde7c
    d17a:	f2c0 0201 	movt	r2, #1
    d17e:	211c      	movs	r1, #28
    d180:	f009 fc0e 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d184:	defe      	udf	#254	; 0xfe
    d186:	f64d 608c 	movw	r0, #56972	; 0xde8c
    d18a:	f2c0 0001 	movt	r0, #1
    d18e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d192:	9908      	ldr	r1, [sp, #32]
    d194:	f009 fc1a 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d198:	defe      	udf	#254	; 0xfe
    d19a:	f64d 609c 	movw	r0, #56988	; 0xde9c
    d19e:	f2c0 0001 	movt	r0, #1
    d1a2:	2210      	movs	r2, #16
    d1a4:	9909      	ldr	r1, [sp, #36]	; 0x24
    d1a6:	f009 fc11 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d1aa:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
    d1ac:	f64d 50b0 	movw	r0, #56752	; 0xddb0
    d1b0:	f2c0 0001 	movt	r0, #1
    d1b4:	f64d 62ec 	movw	r2, #57068	; 0xdeec
    d1b8:	f2c0 0201 	movt	r2, #1
    d1bc:	211c      	movs	r1, #28
    d1be:	f009 fbef 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d1c2:	defe      	udf	#254	; 0xfe
                    self.mem[self.i as usize + i] = self.v[i];
    d1c4:	f64d 60fc 	movw	r0, #57084	; 0xdefc
    d1c8:	f2c0 0001 	movt	r0, #1
    d1cc:	2210      	movs	r2, #16
    d1ce:	9914      	ldr	r1, [sp, #80]	; 0x50
    d1d0:	f009 fbfc 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d1d4:	defe      	udf	#254	; 0xfe
    d1d6:	f64d 50b0 	movw	r0, #56752	; 0xddb0
    d1da:	f2c0 0001 	movt	r0, #1
    d1de:	f64d 720c 	movw	r2, #57100	; 0xdf0c
    d1e2:	f2c0 0201 	movt	r2, #1
    d1e6:	211c      	movs	r1, #28
    d1e8:	f009 fbda 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d1ec:	defe      	udf	#254	; 0xfe
    d1ee:	f64d 701c 	movw	r0, #57116	; 0xdf1c
    d1f2:	f2c0 0001 	movt	r0, #1
    d1f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d1fa:	9912      	ldr	r1, [sp, #72]	; 0x48
    d1fc:	f009 fbe6 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d200:	defe      	udf	#254	; 0xfe
                let bcd = self.v[x];
    d202:	f64d 706c 	movw	r0, #57196	; 0xdf6c
    d206:	f2c0 0001 	movt	r0, #1
    d20a:	2210      	movs	r2, #16
    d20c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d210:	f009 fbdc 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d214:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize] = (bcd / 100) % 10;
    d216:	f64d 707c 	movw	r0, #57212	; 0xdf7c
    d21a:	f2c0 0001 	movt	r0, #1
    d21e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d222:	9920      	ldr	r1, [sp, #128]	; 0x80
    d224:	f009 fbd2 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d228:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
    d22a:	f64d 50b0 	movw	r0, #56752	; 0xddb0
    d22e:	f2c0 0001 	movt	r0, #1
    d232:	f64d 728c 	movw	r2, #57228	; 0xdf8c
    d236:	f2c0 0201 	movt	r2, #1
    d23a:	211c      	movs	r1, #28
    d23c:	f009 fbb0 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d240:	defe      	udf	#254	; 0xfe
    d242:	f64d 709c 	movw	r0, #57244	; 0xdf9c
    d246:	f2c0 0001 	movt	r0, #1
    d24a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d24e:	991e      	ldr	r1, [sp, #120]	; 0x78
    d250:	f009 fbbc 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d254:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 2] = bcd % 10;
    d256:	f64d 50b0 	movw	r0, #56752	; 0xddb0
    d25a:	f2c0 0001 	movt	r0, #1
    d25e:	f64d 72ac 	movw	r2, #57260	; 0xdfac
    d262:	f2c0 0201 	movt	r2, #1
    d266:	211c      	movs	r1, #28
    d268:	f009 fb9a 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d26c:	defe      	udf	#254	; 0xfe
    d26e:	f64d 70bc 	movw	r0, #57276	; 0xdfbc
    d272:	f2c0 0001 	movt	r0, #1
    d276:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d27a:	991d      	ldr	r1, [sp, #116]	; 0x74
    d27c:	f009 fba6 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d280:	defe      	udf	#254	; 0xfe
                self.i = (self.v[x] * 5).into();
    d282:	f24e 000c 	movw	r0, #57356	; 0xe00c
    d286:	f2c0 0001 	movt	r0, #1
    d28a:	2210      	movs	r2, #16
    d28c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d290:	f009 fb9c 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d294:	defe      	udf	#254	; 0xfe
    d296:	f24e 0030 	movw	r0, #57392	; 0xe030
    d29a:	f2c0 0001 	movt	r0, #1
    d29e:	f24e 021c 	movw	r2, #57372	; 0xe01c
    d2a2:	f2c0 0201 	movt	r2, #1
    d2a6:	2121      	movs	r1, #33	; 0x21
    d2a8:	f009 fb7a 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d2ac:	defe      	udf	#254	; 0xfe
                self.i = self.i.wrapping_add(self.v[x].into());
    d2ae:	f24e 0090 	movw	r0, #57488	; 0xe090
    d2b2:	f2c0 0001 	movt	r0, #1
    d2b6:	2210      	movs	r2, #16
    d2b8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d2bc:	f009 fb86 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d2c0:	defe      	udf	#254	; 0xfe
                self.st = self.v[x];
    d2c2:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
    d2c6:	f2c0 0001 	movt	r0, #1
    d2ca:	2210      	movs	r2, #16
    d2cc:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d2d0:	f009 fb7c 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d2d4:	defe      	udf	#254	; 0xfe
                self.dt = self.v[x];
    d2d6:	f24e 1030 	movw	r0, #57648	; 0xe130
    d2da:	f2c0 0001 	movt	r0, #1
    d2de:	2210      	movs	r2, #16
    d2e0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d2e4:	f009 fb72 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d2e8:	defe      	udf	#254	; 0xfe
                self.v[x] = self.waitkey();
    d2ea:	f24e 1080 	movw	r0, #57728	; 0xe180
    d2ee:	f2c0 0001 	movt	r0, #1
    d2f2:	2210      	movs	r2, #16
    d2f4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d2f8:	f009 fb68 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d2fc:	defe      	udf	#254	; 0xfe
                self.v[x] = self.dt;
    d2fe:	f24e 10d0 	movw	r0, #57808	; 0xe1d0
    d302:	f2c0 0001 	movt	r0, #1
    d306:	2210      	movs	r2, #16
    d308:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d30c:	f009 fb5e 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d310:	defe      	udf	#254	; 0xfe
                if !self.hw.key(self.v[x]) {
    d312:	f24e 2020 	movw	r0, #57888	; 0xe220
    d316:	f2c0 0001 	movt	r0, #1
    d31a:	2210      	movs	r2, #16
    d31c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d320:	f009 fb54 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d324:	defe      	udf	#254	; 0xfe
                if self.hw.key(self.v[x]) {
    d326:	f24e 2064 	movw	r0, #57956	; 0xe264
    d32a:	f2c0 0001 	movt	r0, #1
    d32e:	2210      	movs	r2, #16
    d330:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d334:	f009 fb4a 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d338:	defe      	udf	#254	; 0xfe
                let basex = self.v[x] as usize;
    d33a:	f24e 20b8 	movw	r0, #58040	; 0xe2b8
    d33e:	f2c0 0001 	movt	r0, #1
    d342:	2210      	movs	r2, #16
    d344:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d348:	f009 fb40 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d34c:	defe      	udf	#254	; 0xfe
                let basey = self.v[y] as usize;
    d34e:	f24e 20c8 	movw	r0, #58056	; 0xe2c8
    d352:	f2c0 0001 	movt	r0, #1
    d356:	2210      	movs	r2, #16
    d358:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d35c:	f009 fb36 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d360:	defe      	udf	#254	; 0xfe
                    let b = self.mem[self.i as usize + y];
    d362:	f64d 50b0 	movw	r0, #56752	; 0xddb0
    d366:	f2c0 0001 	movt	r0, #1
    d36a:	f24e 22d8 	movw	r2, #58072	; 0xe2d8
    d36e:	f2c0 0201 	movt	r2, #1
    d372:	211c      	movs	r1, #28
    d374:	f009 fb14 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d378:	defe      	udf	#254	; 0xfe
    d37a:	f24e 20e8 	movw	r0, #58088	; 0xe2e8
    d37e:	f2c0 0001 	movt	r0, #1
    d382:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d386:	9967      	ldr	r1, [sp, #412]	; 0x19c
    d388:	f009 fb20 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d38c:	defe      	udf	#254	; 0xfe
                    let vramy = (y + basey) % h;
    d38e:	f64d 50b0 	movw	r0, #56752	; 0xddb0
    d392:	f2c0 0001 	movt	r0, #1
    d396:	f24e 22f8 	movw	r2, #58104	; 0xe2f8
    d39a:	f2c0 0201 	movt	r2, #1
    d39e:	211c      	movs	r1, #28
    d3a0:	f009 fafe 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d3a4:	defe      	udf	#254	; 0xfe
    d3a6:	f24e 3010 	movw	r0, #58128	; 0xe310
    d3aa:	f2c0 0001 	movt	r0, #1
    d3ae:	f24e 22f8 	movw	r2, #58104	; 0xe2f8
    d3b2:	f2c0 0201 	movt	r2, #1
    d3b6:	2139      	movs	r1, #57	; 0x39
    d3b8:	f009 faf2 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d3bc:	defe      	udf	#254	; 0xfe
                        let vramx = (x + basex) % w;
    d3be:	f64d 50b0 	movw	r0, #56752	; 0xddb0
    d3c2:	f2c0 0001 	movt	r0, #1
    d3c6:	f24e 324c 	movw	r2, #58188	; 0xe34c
    d3ca:	f2c0 0201 	movt	r2, #1
    d3ce:	211c      	movs	r1, #28
    d3d0:	f009 fae6 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d3d4:	defe      	udf	#254	; 0xfe
    d3d6:	f24e 3010 	movw	r0, #58128	; 0xe310
    d3da:	f2c0 0001 	movt	r0, #1
    d3de:	f24e 324c 	movw	r2, #58188	; 0xe34c
    d3e2:	f2c0 0201 	movt	r2, #1
    d3e6:	2139      	movs	r1, #57	; 0x39
    d3e8:	f009 fada 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d3ec:	defe      	udf	#254	; 0xfe
                        let src = (b & 1 << (7 - x)) > 0;
    d3ee:	f24e 3070 	movw	r0, #58224	; 0xe370
    d3f2:	f2c0 0001 	movt	r0, #1
    d3f6:	f24e 325c 	movw	r2, #58204	; 0xe35c
    d3fa:	f2c0 0201 	movt	r2, #1
    d3fe:	2121      	movs	r1, #33	; 0x21
    d400:	f009 face 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d404:	defe      	udf	#254	; 0xfe
    d406:	f24e 30b0 	movw	r0, #58288	; 0xe3b0
    d40a:	f2c0 0001 	movt	r0, #1
    d40e:	f24e 3294 	movw	r2, #58260	; 0xe394
    d412:	f2c0 0201 	movt	r2, #1
    d416:	2123      	movs	r1, #35	; 0x23
    d418:	f009 fac2 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d41c:	defe      	udf	#254	; 0xfe
                self.v[x] = self.hw.rand() & kk;
    d41e:	f24e 4014 	movw	r0, #58388	; 0xe414
    d422:	f2c0 0001 	movt	r0, #1
    d426:	2210      	movs	r2, #16
    d428:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d42c:	f009 face 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d430:	defe      	udf	#254	; 0xfe
                if self.v[x] != self.v[y] {
    d432:	f24e 40e4 	movw	r0, #58596	; 0xe4e4
    d436:	f2c0 0001 	movt	r0, #1
    d43a:	2210      	movs	r2, #16
    d43c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d440:	f009 fac4 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d444:	defe      	udf	#254	; 0xfe
    d446:	f24e 40f4 	movw	r0, #58612	; 0xe4f4
    d44a:	f2c0 0001 	movt	r0, #1
    d44e:	2210      	movs	r2, #16
    d450:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d454:	f009 faba 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d458:	defe      	udf	#254	; 0xfe
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
    d45a:	f24e 5044 	movw	r0, #58692	; 0xe544
    d45e:	f2c0 0001 	movt	r0, #1
    d462:	2210      	movs	r2, #16
    d464:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d468:	f009 fab0 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d46c:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shl(1);
    d46e:	f24e 5054 	movw	r0, #58708	; 0xe554
    d472:	f2c0 0001 	movt	r0, #1
    d476:	2210      	movs	r2, #16
    d478:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d47c:	f009 faa6 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d480:	defe      	udf	#254	; 0xfe
    d482:	f24e 5064 	movw	r0, #58724	; 0xe564
    d486:	f2c0 0001 	movt	r0, #1
    d48a:	2210      	movs	r2, #16
    d48c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d490:	f009 fa9c 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d494:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
    d496:	f24e 50b8 	movw	r0, #58808	; 0xe5b8
    d49a:	f2c0 0001 	movt	r0, #1
    d49e:	2210      	movs	r2, #16
    d4a0:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d4a4:	f009 fa92 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d4a8:	defe      	udf	#254	; 0xfe
    d4aa:	f24e 50c8 	movw	r0, #58824	; 0xe5c8
    d4ae:	f2c0 0001 	movt	r0, #1
    d4b2:	2210      	movs	r2, #16
    d4b4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d4b8:	f009 fa88 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d4bc:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
    d4be:	f24e 50d8 	movw	r0, #58840	; 0xe5d8
    d4c2:	f2c0 0001 	movt	r0, #1
    d4c6:	2210      	movs	r2, #16
    d4c8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d4cc:	f009 fa7e 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d4d0:	defe      	udf	#254	; 0xfe
                self.v[0xf] = self.v[x] & 1;
    d4d2:	f24e 6028 	movw	r0, #58920	; 0xe628
    d4d6:	f2c0 0001 	movt	r0, #1
    d4da:	2210      	movs	r2, #16
    d4dc:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d4e0:	f009 fa74 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d4e4:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shr(1);
    d4e6:	f24e 6038 	movw	r0, #58936	; 0xe638
    d4ea:	f2c0 0001 	movt	r0, #1
    d4ee:	2210      	movs	r2, #16
    d4f0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d4f4:	f009 fa6a 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d4f8:	defe      	udf	#254	; 0xfe
    d4fa:	f24e 6048 	movw	r0, #58952	; 0xe648
    d4fe:	f2c0 0001 	movt	r0, #1
    d502:	2210      	movs	r2, #16
    d504:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d508:	f009 fa60 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d50c:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
    d50e:	f24e 6098 	movw	r0, #59032	; 0xe698
    d512:	f2c0 0001 	movt	r0, #1
    d516:	2210      	movs	r2, #16
    d518:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d51c:	f009 fa56 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d520:	defe      	udf	#254	; 0xfe
    d522:	f24e 60a8 	movw	r0, #59048	; 0xe6a8
    d526:	f2c0 0001 	movt	r0, #1
    d52a:	2210      	movs	r2, #16
    d52c:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d530:	f009 fa4c 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d534:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
    d536:	f24e 60b8 	movw	r0, #59064	; 0xe6b8
    d53a:	f2c0 0001 	movt	r0, #1
    d53e:	2210      	movs	r2, #16
    d540:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d544:	f009 fa42 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d548:	defe      	udf	#254	; 0xfe
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
    d54a:	f24e 7008 	movw	r0, #59144	; 0xe708
    d54e:	f2c0 0001 	movt	r0, #1
    d552:	2210      	movs	r2, #16
    d554:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d558:	f009 fa38 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d55c:	defe      	udf	#254	; 0xfe
    d55e:	f24e 7018 	movw	r0, #59160	; 0xe718
    d562:	f2c0 0001 	movt	r0, #1
    d566:	2210      	movs	r2, #16
    d568:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d56c:	f009 fa2e 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d570:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
    d572:	f24e 7028 	movw	r0, #59176	; 0xe728
    d576:	f2c0 0001 	movt	r0, #1
    d57a:	2210      	movs	r2, #16
    d57c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d580:	f009 fa24 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d584:	defe      	udf	#254	; 0xfe
                self.v[x] ^= self.v[y];
    d586:	f24e 7078 	movw	r0, #59256	; 0xe778
    d58a:	f2c0 0001 	movt	r0, #1
    d58e:	2210      	movs	r2, #16
    d590:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d594:	f009 fa1a 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d598:	defe      	udf	#254	; 0xfe
    d59a:	f24e 7088 	movw	r0, #59272	; 0xe788
    d59e:	f2c0 0001 	movt	r0, #1
    d5a2:	2210      	movs	r2, #16
    d5a4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d5a8:	f009 fa10 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d5ac:	defe      	udf	#254	; 0xfe
                self.v[x] &= self.v[y];
    d5ae:	f24e 70d8 	movw	r0, #59352	; 0xe7d8
    d5b2:	f2c0 0001 	movt	r0, #1
    d5b6:	2210      	movs	r2, #16
    d5b8:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d5bc:	f009 fa06 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d5c0:	defe      	udf	#254	; 0xfe
    d5c2:	f24e 70e8 	movw	r0, #59368	; 0xe7e8
    d5c6:	f2c0 0001 	movt	r0, #1
    d5ca:	2210      	movs	r2, #16
    d5cc:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d5d0:	f009 f9fc 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d5d4:	defe      	udf	#254	; 0xfe
                self.v[x] |= self.v[y];
    d5d6:	f64e 0038 	movw	r0, #59448	; 0xe838
    d5da:	f2c0 0001 	movt	r0, #1
    d5de:	2210      	movs	r2, #16
    d5e0:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d5e4:	f009 f9f2 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d5e8:	defe      	udf	#254	; 0xfe
    d5ea:	f64e 0048 	movw	r0, #59464	; 0xe848
    d5ee:	f2c0 0001 	movt	r0, #1
    d5f2:	2210      	movs	r2, #16
    d5f4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d5f8:	f009 f9e8 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d5fc:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[y];
    d5fe:	f64e 0098 	movw	r0, #59544	; 0xe898
    d602:	f2c0 0001 	movt	r0, #1
    d606:	2210      	movs	r2, #16
    d608:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d60c:	f009 f9de 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d610:	defe      	udf	#254	; 0xfe
    d612:	f64e 00a8 	movw	r0, #59560	; 0xe8a8
    d616:	f2c0 0001 	movt	r0, #1
    d61a:	2210      	movs	r2, #16
    d61c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d620:	f009 f9d4 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d624:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_add(kk);
    d626:	f64e 00f8 	movw	r0, #59640	; 0xe8f8
    d62a:	f2c0 0001 	movt	r0, #1
    d62e:	2210      	movs	r2, #16
    d630:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d634:	f009 f9ca 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d638:	defe      	udf	#254	; 0xfe
    d63a:	f64e 1008 	movw	r0, #59656	; 0xe908
    d63e:	f2c0 0001 	movt	r0, #1
    d642:	2210      	movs	r2, #16
    d644:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d648:	f009 f9c0 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d64c:	defe      	udf	#254	; 0xfe
                self.v[x] = kk;
    d64e:	f64e 1058 	movw	r0, #59736	; 0xe958
    d652:	f2c0 0001 	movt	r0, #1
    d656:	2210      	movs	r2, #16
    d658:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d65c:	f009 f9b6 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d660:	defe      	udf	#254	; 0xfe
                if self.v[x] == self.v[y] {
    d662:	f64e 2040 	movw	r0, #59968	; 0xea40
    d666:	f2c0 0001 	movt	r0, #1
    d66a:	2210      	movs	r2, #16
    d66c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d670:	f009 f9ac 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d674:	defe      	udf	#254	; 0xfe
    d676:	f64e 2050 	movw	r0, #59984	; 0xea50
    d67a:	f2c0 0001 	movt	r0, #1
    d67e:	2210      	movs	r2, #16
    d680:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d684:	f009 f9a2 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d688:	defe      	udf	#254	; 0xfe
                if self.v[x] != kk {
    d68a:	f64e 20a0 	movw	r0, #60064	; 0xeaa0
    d68e:	f2c0 0001 	movt	r0, #1
    d692:	2210      	movs	r2, #16
    d694:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d698:	f009 f998 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d69c:	defe      	udf	#254	; 0xfe
                if self.v[x] == kk {
    d69e:	f64e 20f0 	movw	r0, #60144	; 0xeaf0
    d6a2:	f2c0 0001 	movt	r0, #1
    d6a6:	2210      	movs	r2, #16
    d6a8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d6ac:	f009 f98e 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d6b0:	defe      	udf	#254	; 0xfe

0000d6b2 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h64cee1a3c11094e6E>:
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    d6b2:	b580      	push	{r7, lr}
    d6b4:	b086      	sub	sp, #24
    d6b6:	9104      	str	r1, [sp, #16]
    d6b8:	9205      	str	r2, [sp, #20]
    d6ba:	6809      	ldr	r1, [r1, #0]
    d6bc:	6809      	ldr	r1, [r1, #0]
    d6be:	2300      	movs	r3, #0
    d6c0:	9301      	str	r3, [sp, #4]
    d6c2:	9102      	str	r1, [sp, #8]
    d6c4:	9203      	str	r2, [sp, #12]
    d6c6:	9901      	ldr	r1, [sp, #4]
    d6c8:	9a02      	ldr	r2, [sp, #8]
    d6ca:	9b03      	ldr	r3, [sp, #12]
    d6cc:	f005 fb4b 	bl	12d66 <_ZN4core4iter6traits8iterator8Iterator3map17hf6992577e3374dfdE>
    d6d0:	e7ff      	b.n	d6d2 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h64cee1a3c11094e6E+0x20>
    d6d2:	b006      	add	sp, #24
    d6d4:	bd80      	pop	{r7, pc}

0000d6d6 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h2454dbfe6f26a106E>:
    d6d6:	b084      	sub	sp, #16
    d6d8:	9002      	str	r0, [sp, #8]
    d6da:	9103      	str	r1, [sp, #12]
    d6dc:	6800      	ldr	r0, [r0, #0]
    d6de:	9000      	str	r0, [sp, #0]
    d6e0:	9101      	str	r1, [sp, #4]
    d6e2:	9800      	ldr	r0, [sp, #0]
    d6e4:	9901      	ldr	r1, [sp, #4]
    d6e6:	b004      	add	sp, #16
    d6e8:	4770      	bx	lr

0000d6ea <_ZN8libchip814Chip8$LT$T$GT$4jump17h7de77f07aa5a546bE>:
    fn jump(&mut self, pc: u16) {
    d6ea:	b082      	sub	sp, #8
    d6ec:	460a      	mov	r2, r1
    d6ee:	9000      	str	r0, [sp, #0]
    d6f0:	f8ad 1006 	strh.w	r1, [sp, #6]
        self.pc = pc;
    d6f4:	8241      	strh	r1, [r0, #18]
    }
    d6f6:	b002      	add	sp, #8
    d6f8:	4770      	bx	lr

0000d6fa <_ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E>:
    fn load(&mut self, rom: &[u8]) {
    d6fa:	b580      	push	{r7, lr}
    d6fc:	b08a      	sub	sp, #40	; 0x28
    d6fe:	9105      	str	r1, [sp, #20]
    d700:	9206      	str	r2, [sp, #24]
    d702:	9009      	str	r0, [sp, #36]	; 0x24
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
    d704:	3047      	adds	r0, #71	; 0x47
    d706:	9905      	ldr	r1, [sp, #20]
    d708:	9a06      	ldr	r2, [sp, #24]
    d70a:	9004      	str	r0, [sp, #16]
    d70c:	4608      	mov	r0, r1
    d70e:	4611      	mov	r1, r2
    d710:	f001 f8a0 	bl	e854 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    d714:	9003      	str	r0, [sp, #12]
    d716:	e7ff      	b.n	d718 <_ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E+0x1e>
    d718:	9803      	ldr	r0, [sp, #12]
    d71a:	f500 7100 	add.w	r1, r0, #512	; 0x200
    d71e:	460a      	mov	r2, r1
    d720:	4281      	cmp	r1, r0
    d722:	9202      	str	r2, [sp, #8]
    d724:	d318      	bcc.n	d758 <_ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E+0x5e>
    d726:	e7ff      	b.n	d728 <_ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E+0x2e>
    d728:	f44f 7000 	mov.w	r0, #512	; 0x200
    d72c:	9007      	str	r0, [sp, #28]
    d72e:	9802      	ldr	r0, [sp, #8]
    d730:	9008      	str	r0, [sp, #32]
    d732:	9a07      	ldr	r2, [sp, #28]
    d734:	9b08      	ldr	r3, [sp, #32]
    d736:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    d73a:	9804      	ldr	r0, [sp, #16]
    d73c:	f000 fb8c 	bl	de58 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hd29a6855bf5041fdE>
    d740:	9001      	str	r0, [sp, #4]
    d742:	9100      	str	r1, [sp, #0]
    d744:	e7ff      	b.n	d746 <_ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E+0x4c>
    d746:	9a05      	ldr	r2, [sp, #20]
    d748:	9b06      	ldr	r3, [sp, #24]
    d74a:	9801      	ldr	r0, [sp, #4]
    d74c:	9900      	ldr	r1, [sp, #0]
    d74e:	f001 fe4b 	bl	f3e8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
    d752:	e7ff      	b.n	d754 <_ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E+0x5a>
    }
    d754:	b00a      	add	sp, #40	; 0x28
    d756:	bd80      	pop	{r7, pc}
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
    d758:	f64d 50b0 	movw	r0, #56752	; 0xddb0
    d75c:	f2c0 0001 	movt	r0, #1
    d760:	f64e 424c 	movw	r2, #60492	; 0xec4c
    d764:	f2c0 0201 	movt	r2, #1
    d768:	211c      	movs	r1, #28
    d76a:	f009 f919 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d76e:	defe      	udf	#254	; 0xfe

0000d770 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>:
    fn next(&mut self) {
    d770:	b580      	push	{r7, lr}
    d772:	b084      	sub	sp, #16
    d774:	9003      	str	r0, [sp, #12]
        self.jump(self.pc.wrapping_add(2));
    d776:	8a41      	ldrh	r1, [r0, #18]
    d778:	2202      	movs	r2, #2
    d77a:	9002      	str	r0, [sp, #8]
    d77c:	4608      	mov	r0, r1
    d77e:	4611      	mov	r1, r2
    d780:	f005 fa50 	bl	12c24 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hed5f6279c30b1a08E>
    d784:	9001      	str	r0, [sp, #4]
    d786:	e7ff      	b.n	d788 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE+0x18>
    d788:	9802      	ldr	r0, [sp, #8]
    d78a:	9901      	ldr	r1, [sp, #4]
    d78c:	f7ff ffad 	bl	d6ea <_ZN8libchip814Chip8$LT$T$GT$4jump17h7de77f07aa5a546bE>
    d790:	e7ff      	b.n	d792 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE+0x22>
    }
    d792:	b004      	add	sp, #16
    d794:	bd80      	pop	{r7, pc}

0000d796 <_ZN8libchip814Chip8$LT$T$GT$4push17hdbfa3ffa7a184c4eE>:
    fn push(&mut self, item: u16) {
    d796:	b580      	push	{r7, lr}
    d798:	b086      	sub	sp, #24
    d79a:	460a      	mov	r2, r1
    d79c:	9004      	str	r0, [sp, #16]
    d79e:	f8ad 1016 	strh.w	r1, [sp, #22]
        self.stack[self.sp as usize] = item;
    d7a2:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
    d7a6:	460b      	mov	r3, r1
    d7a8:	290f      	cmp	r1, #15
    d7aa:	9003      	str	r0, [sp, #12]
    d7ac:	9202      	str	r2, [sp, #8]
    d7ae:	9301      	str	r3, [sp, #4]
    d7b0:	d813      	bhi.n	d7da <_ZN8libchip814Chip8$LT$T$GT$4push17hdbfa3ffa7a184c4eE+0x44>
    d7b2:	e7ff      	b.n	d7b4 <_ZN8libchip814Chip8$LT$T$GT$4push17hdbfa3ffa7a184c4eE+0x1e>
    d7b4:	9803      	ldr	r0, [sp, #12]
    d7b6:	9901      	ldr	r1, [sp, #4]
    d7b8:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    d7bc:	9b02      	ldr	r3, [sp, #8]
    d7be:	8293      	strh	r3, [r2, #20]
        self.sp = self.sp.wrapping_add(1);
    d7c0:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    d7c4:	2101      	movs	r1, #1
    d7c6:	f005 f990 	bl	12aea <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17hac8dfc997b9c24ecE>
    d7ca:	9000      	str	r0, [sp, #0]
    d7cc:	e7ff      	b.n	d7ce <_ZN8libchip814Chip8$LT$T$GT$4push17hdbfa3ffa7a184c4eE+0x38>
    d7ce:	9800      	ldr	r0, [sp, #0]
    d7d0:	9903      	ldr	r1, [sp, #12]
    d7d2:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
    }
    d7d6:	b006      	add	sp, #24
    d7d8:	bd80      	pop	{r7, pc}
        self.stack[self.sp as usize] = item;
    d7da:	f64e 405c 	movw	r0, #60508	; 0xec5c
    d7de:	f2c0 0001 	movt	r0, #1
    d7e2:	2210      	movs	r2, #16
    d7e4:	9901      	ldr	r1, [sp, #4]
    d7e6:	f009 f8f1 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d7ea:	defe      	udf	#254	; 0xfe

0000d7ec <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E>:
    fn tick(&mut self) {
    d7ec:	b580      	push	{r7, lr}
    d7ee:	b084      	sub	sp, #16
    d7f0:	9003      	str	r0, [sp, #12]
        if self.dt > 0 {
    d7f2:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    d7f6:	2900      	cmp	r1, #0
    d7f8:	9002      	str	r0, [sp, #8]
    d7fa:	d00f      	beq.n	d81c <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x30>
    d7fc:	e7ff      	b.n	d7fe <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x12>
            self.dt -= 1;
    d7fe:	9802      	ldr	r0, [sp, #8]
    d800:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    d804:	3901      	subs	r1, #1
    d806:	b2ca      	uxtb	r2, r1
    d808:	460b      	mov	r3, r1
    d80a:	428a      	cmp	r2, r1
    d80c:	9301      	str	r3, [sp, #4]
    d80e:	d126      	bne.n	d85e <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x72>
    d810:	e7ff      	b.n	d812 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x26>
    d812:	9801      	ldr	r0, [sp, #4]
    d814:	9902      	ldr	r1, [sp, #8]
    d816:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
        if self.dt > 0 {
    d81a:	e7ff      	b.n	d81c <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x30>
        if self.st > 0 {
    d81c:	9802      	ldr	r0, [sp, #8]
    d81e:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
    d822:	2900      	cmp	r1, #0
    d824:	d019      	beq.n	d85a <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x6e>
    d826:	e7ff      	b.n	d828 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x3c>
            self.st -= 1;
    d828:	9802      	ldr	r0, [sp, #8]
    d82a:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
    d82e:	3901      	subs	r1, #1
    d830:	b2ca      	uxtb	r2, r1
    d832:	460b      	mov	r3, r1
    d834:	428a      	cmp	r2, r1
    d836:	9300      	str	r3, [sp, #0]
    d838:	d11d      	bne.n	d876 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x8a>
    d83a:	e7ff      	b.n	d83c <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x50>
    d83c:	9800      	ldr	r0, [sp, #0]
    d83e:	9902      	ldr	r1, [sp, #8]
    d840:	f881 0045 	strb.w	r0, [r1, #69]	; 0x45
            if self.st == 0 {
    d844:	f891 2045 	ldrb.w	r2, [r1, #69]	; 0x45
    d848:	2a00      	cmp	r2, #0
    d84a:	d105      	bne.n	d858 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x6c>
    d84c:	e7ff      	b.n	d84e <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x62>
                self.hw.beep();
    d84e:	9802      	ldr	r0, [sp, #8]
    d850:	f7fc f8b0 	bl	99b4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17ha45cfdbdf4731cedE>
    d854:	e7ff      	b.n	d856 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x6a>
            if self.st == 0 {
    d856:	e7ff      	b.n	d858 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x6c>
        if self.st > 0 {
    d858:	e7ff      	b.n	d85a <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x6e>
    }
    d85a:	b004      	add	sp, #16
    d85c:	bd80      	pop	{r7, pc}
            self.dt -= 1;
    d85e:	f24e 3070 	movw	r0, #58224	; 0xe370
    d862:	f2c0 0001 	movt	r0, #1
    d866:	f64e 426c 	movw	r2, #60524	; 0xec6c
    d86a:	f2c0 0201 	movt	r2, #1
    d86e:	2121      	movs	r1, #33	; 0x21
    d870:	f009 f896 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d874:	defe      	udf	#254	; 0xfe
            self.st -= 1;
    d876:	f24e 3070 	movw	r0, #58224	; 0xe370
    d87a:	f2c0 0001 	movt	r0, #1
    d87e:	f64e 427c 	movw	r2, #60540	; 0xec7c
    d882:	f2c0 0201 	movt	r2, #1
    d886:	2121      	movs	r1, #33	; 0x21
    d888:	f009 f88a 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d88c:	defe      	udf	#254	; 0xfe

0000d88e <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E>:
    fn sched(&mut self) {
    d88e:	b510      	push	{r4, lr}
    d890:	b098      	sub	sp, #96	; 0x60
    d892:	9015      	str	r0, [sp, #84]	; 0x54
        if self.hw.sched() {
    d894:	900b      	str	r0, [sp, #44]	; 0x2c
    d896:	f7fc f891 	bl	99bc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h3c52951efd018dffE>
    d89a:	900a      	str	r0, [sp, #40]	; 0x28
    d89c:	e7ff      	b.n	d89e <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x10>
    d89e:	980a      	ldr	r0, [sp, #40]	; 0x28
    d8a0:	07c1      	lsls	r1, r0, #31
    d8a2:	2900      	cmp	r1, #0
    d8a4:	d005      	beq.n	d8b2 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x24>
    d8a6:	e7ff      	b.n	d8a8 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x1a>
            self.shutdown();
    d8a8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d8aa:	f000 f900 	bl	daae <_ZN8libchip814Chip8$LT$T$GT$8shutdown17h04afc1517f23f57eE>
    d8ae:	e7ff      	b.n	d8b0 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x22>
        if self.hw.sched() {
    d8b0:	e7ff      	b.n	d8b2 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x24>
        if let Some(t) = self.time {
    d8b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d8b4:	6801      	ldr	r1, [r0, #0]
    d8b6:	2901      	cmp	r1, #1
    d8b8:	d006      	beq.n	d8c8 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x3a>
    d8ba:	e7ff      	b.n	d8bc <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x2e>
            self.time = Some(self.hw.clock());
    d8bc:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d8be:	f7fc f819 	bl	98f4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E>
    d8c2:	9109      	str	r1, [sp, #36]	; 0x24
    d8c4:	9008      	str	r0, [sp, #32]
    d8c6:	e040      	b.n	d94a <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0xbc>
        if let Some(t) = self.time {
    d8c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d8ca:	6881      	ldr	r1, [r0, #8]
    d8cc:	68c2      	ldr	r2, [r0, #12]
    d8ce:	9217      	str	r2, [sp, #92]	; 0x5c
    d8d0:	9116      	str	r1, [sp, #88]	; 0x58
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
    d8d2:	9107      	str	r1, [sp, #28]
    d8d4:	9206      	str	r2, [sp, #24]
    d8d6:	f7fc f80d 	bl	98f4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E>
    d8da:	9105      	str	r1, [sp, #20]
    d8dc:	9004      	str	r0, [sp, #16]
    d8de:	e7ff      	b.n	d8e0 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x52>
    d8e0:	9804      	ldr	r0, [sp, #16]
    d8e2:	9905      	ldr	r1, [sp, #20]
    d8e4:	9a07      	ldr	r2, [sp, #28]
    d8e6:	9b06      	ldr	r3, [sp, #24]
    d8e8:	f005 f9be 	bl	12c68 <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h7cd75c3bdc89aa73E>
    d8ec:	9103      	str	r1, [sp, #12]
    d8ee:	9002      	str	r0, [sp, #8]
    d8f0:	e7ff      	b.n	d8f2 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x64>
    d8f2:	f245 002b 	movw	r0, #20523	; 0x502b
    d8f6:	f2c0 00fe 	movt	r0, #254	; 0xfe
    d8fa:	9902      	ldr	r1, [sp, #8]
    d8fc:	1a08      	subs	r0, r1, r0
    d8fe:	9a03      	ldr	r2, [sp, #12]
    d900:	f172 0300 	sbcs.w	r3, r2, #0
    d904:	d320      	bcc.n	d948 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0xba>
    d906:	e7ff      	b.n	d908 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x7a>
                self.tick();
    d908:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d90a:	f7ff ff6f 	bl	d7ec <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E>
    d90e:	e7ff      	b.n	d910 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x82>
                self.time = Some(self.hw.clock());
    d910:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d912:	f7fb ffef 	bl	98f4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E>
    d916:	9101      	str	r1, [sp, #4]
    d918:	9000      	str	r0, [sp, #0]
    d91a:	e7ff      	b.n	d91c <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x8e>
    d91c:	9800      	ldr	r0, [sp, #0]
    d91e:	900e      	str	r0, [sp, #56]	; 0x38
    d920:	9901      	ldr	r1, [sp, #4]
    d922:	910f      	str	r1, [sp, #60]	; 0x3c
    d924:	2200      	movs	r2, #0
    d926:	920d      	str	r2, [sp, #52]	; 0x34
    d928:	2201      	movs	r2, #1
    d92a:	920c      	str	r2, [sp, #48]	; 0x30
    d92c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d92e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d930:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    d934:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
    d938:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    d93a:	6063      	str	r3, [r4, #4]
    d93c:	6022      	str	r2, [r4, #0]
    d93e:	f8c4 e00c 	str.w	lr, [r4, #12]
    d942:	f8c4 c008 	str.w	ip, [r4, #8]
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
    d946:	e7ff      	b.n	d948 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0xba>
        if let Some(t) = self.time {
    d948:	e015      	b.n	d976 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0xe8>
            self.time = Some(self.hw.clock());
    d94a:	9808      	ldr	r0, [sp, #32]
    d94c:	9012      	str	r0, [sp, #72]	; 0x48
    d94e:	9909      	ldr	r1, [sp, #36]	; 0x24
    d950:	9113      	str	r1, [sp, #76]	; 0x4c
    d952:	2200      	movs	r2, #0
    d954:	9211      	str	r2, [sp, #68]	; 0x44
    d956:	2201      	movs	r2, #1
    d958:	9210      	str	r2, [sp, #64]	; 0x40
    d95a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d95c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d95e:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
    d962:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
    d966:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    d968:	6063      	str	r3, [r4, #4]
    d96a:	6022      	str	r2, [r4, #0]
    d96c:	f8c4 e00c 	str.w	lr, [r4, #12]
    d970:	f8c4 c008 	str.w	ip, [r4, #8]
        if let Some(t) = self.time {
    d974:	e7ff      	b.n	d976 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0xe8>
    }
    d976:	b018      	add	sp, #96	; 0x60
    d978:	bd10      	pop	{r4, pc}

0000d97a <_ZN8libchip814Chip8$LT$T$GT$5setup17hf7242787e8a175a5E>:
    fn setup(&mut self) {
    d97a:	b580      	push	{r7, lr}
    d97c:	b088      	sub	sp, #32
    d97e:	9007      	str	r0, [sp, #28]
    d980:	f44f 7100 	mov.w	r1, #512	; 0x200
        self.pc = ENTRY;
    d984:	8241      	strh	r1, [r0, #18]
        self.hw.vram_setsize(DISPS);
    d986:	f64d 6144 	movw	r1, #56900	; 0xde44
    d98a:	f2c0 0101 	movt	r1, #1
    d98e:	680a      	ldr	r2, [r1, #0]
    d990:	6849      	ldr	r1, [r1, #4]
    d992:	9005      	str	r0, [sp, #20]
    d994:	9104      	str	r1, [sp, #16]
    d996:	4611      	mov	r1, r2
    d998:	9a04      	ldr	r2, [sp, #16]
    d99a:	f7fb ff9b 	bl	98d4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc15bb8a8dbf2b592E>
    d99e:	e7ff      	b.n	d9a0 <_ZN8libchip814Chip8$LT$T$GT$5setup17hf7242787e8a175a5E+0x26>
        self.mem[..CHARBUF.len()].copy_from_slice(&CHARBUF);
    d9a0:	9805      	ldr	r0, [sp, #20]
    d9a2:	f100 0147 	add.w	r1, r0, #71	; 0x47
    d9a6:	f64e 5048 	movw	r0, #60744	; 0xed48
    d9aa:	f2c0 0001 	movt	r0, #1
    d9ae:	2250      	movs	r2, #80	; 0x50
    d9b0:	9103      	str	r1, [sp, #12]
    d9b2:	4611      	mov	r1, r2
    d9b4:	f000 ff4e 	bl	e854 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    d9b8:	9002      	str	r0, [sp, #8]
    d9ba:	e7ff      	b.n	d9bc <_ZN8libchip814Chip8$LT$T$GT$5setup17hf7242787e8a175a5E+0x42>
    d9bc:	9802      	ldr	r0, [sp, #8]
    d9be:	9006      	str	r0, [sp, #24]
    d9c0:	9a06      	ldr	r2, [sp, #24]
    d9c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    d9c6:	9803      	ldr	r0, [sp, #12]
    d9c8:	f001 fe0b 	bl	f5e2 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E>
    d9cc:	9001      	str	r0, [sp, #4]
    d9ce:	9100      	str	r1, [sp, #0]
    d9d0:	e7ff      	b.n	d9d2 <_ZN8libchip814Chip8$LT$T$GT$5setup17hf7242787e8a175a5E+0x58>
    d9d2:	f64e 5248 	movw	r2, #60744	; 0xed48
    d9d6:	f2c0 0201 	movt	r2, #1
    d9da:	2350      	movs	r3, #80	; 0x50
    d9dc:	9801      	ldr	r0, [sp, #4]
    d9de:	9900      	ldr	r1, [sp, #0]
    d9e0:	f001 fd02 	bl	f3e8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
    d9e4:	e7ff      	b.n	d9e6 <_ZN8libchip814Chip8$LT$T$GT$5setup17hf7242787e8a175a5E+0x6c>
    d9e6:	f241 0047 	movw	r0, #4167	; 0x1047
    d9ea:	2101      	movs	r1, #1
        self.running = true;
    d9ec:	9a05      	ldr	r2, [sp, #20]
    d9ee:	5411      	strb	r1, [r2, r0]
    }
    d9f0:	b008      	add	sp, #32
    d9f2:	bd80      	pop	{r7, pc}

0000d9f4 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E>:
    fn waitkey(&mut self) -> u8 {
    d9f4:	b580      	push	{r7, lr}
    d9f6:	b08c      	sub	sp, #48	; 0x30
    d9f8:	900a      	str	r0, [sp, #40]	; 0x28
        while self.running {
    d9fa:	9005      	str	r0, [sp, #20]
    d9fc:	e7ff      	b.n	d9fe <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0xa>
    d9fe:	f241 0047 	movw	r0, #4167	; 0x1047
    da02:	9905      	ldr	r1, [sp, #20]
    da04:	5c08      	ldrb	r0, [r1, r0]
    da06:	07c0      	lsls	r0, r0, #31
    da08:	2800      	cmp	r0, #0
    da0a:	d104      	bne.n	da16 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x22>
    da0c:	e7ff      	b.n	da0e <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x1a>
    da0e:	2020      	movs	r0, #32
        return b' ';
    da10:	f88d 001b 	strb.w	r0, [sp, #27]
    da14:	e047      	b.n	daa6 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0xb2>
            self.sched();
    da16:	9805      	ldr	r0, [sp, #20]
    da18:	f7ff ff39 	bl	d88e <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E>
    da1c:	e7ff      	b.n	da1e <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x2a>
    da1e:	2000      	movs	r0, #0
            for i in 0..0xf {
    da20:	f88d 001c 	strb.w	r0, [sp, #28]
    da24:	200f      	movs	r0, #15
    da26:	f88d 001d 	strb.w	r0, [sp, #29]
    da2a:	f89d 001c 	ldrb.w	r0, [sp, #28]
    da2e:	f89d 101d 	ldrb.w	r1, [sp, #29]
    da32:	f005 f9a2 	bl	12d7a <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hc518c90d18182e65E>
    da36:	9004      	str	r0, [sp, #16]
    da38:	9103      	str	r1, [sp, #12]
    da3a:	e7ff      	b.n	da3c <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x48>
    da3c:	9804      	ldr	r0, [sp, #16]
    da3e:	f88d 0020 	strb.w	r0, [sp, #32]
    da42:	9903      	ldr	r1, [sp, #12]
    da44:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
    da48:	e7ff      	b.n	da4a <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x56>
    da4a:	a808      	add	r0, sp, #32
    da4c:	f005 f924 	bl	12c98 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E>
    da50:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
    da54:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    da58:	e7ff      	b.n	da5a <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x66>
    da5a:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    da5e:	07c1      	lsls	r1, r0, #31
    da60:	2900      	cmp	r1, #0
    da62:	d001      	beq.n	da68 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x74>
    da64:	e7ff      	b.n	da66 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x72>
    da66:	e001      	b.n	da6c <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x78>
        while self.running {
    da68:	e7c9      	b.n	d9fe <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0xa>
            for i in 0..0xf {
    da6a:	defe      	udf	#254	; 0xfe
    da6c:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
    da70:	4601      	mov	r1, r0
    da72:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    da76:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    da7a:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if self.hw.key(i) {
    da7e:	9a05      	ldr	r2, [sp, #20]
    da80:	9002      	str	r0, [sp, #8]
    da82:	4610      	mov	r0, r2
    da84:	9b02      	ldr	r3, [sp, #8]
    da86:	9101      	str	r1, [sp, #4]
    da88:	4619      	mov	r1, r3
    da8a:	f7fb fd8d 	bl	95a8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hb8a7325968dc9595E>
    da8e:	9000      	str	r0, [sp, #0]
    da90:	e7ff      	b.n	da92 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x9e>
    da92:	9800      	ldr	r0, [sp, #0]
    da94:	07c1      	lsls	r1, r0, #31
    da96:	2900      	cmp	r1, #0
    da98:	d101      	bne.n	da9e <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0xaa>
    da9a:	e7ff      	b.n	da9c <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0xa8>
            for i in 0..0xf {
    da9c:	e7d5      	b.n	da4a <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x56>
                    return i;
    da9e:	9801      	ldr	r0, [sp, #4]
    daa0:	f88d 001b 	strb.w	r0, [sp, #27]
    daa4:	e7ff      	b.n	daa6 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0xb2>
    }
    daa6:	f89d 001b 	ldrb.w	r0, [sp, #27]
    daaa:	b00c      	add	sp, #48	; 0x30
    daac:	bd80      	pop	{r7, pc}

0000daae <_ZN8libchip814Chip8$LT$T$GT$8shutdown17h04afc1517f23f57eE>:
    fn shutdown(&mut self) {
    daae:	b081      	sub	sp, #4
    dab0:	9000      	str	r0, [sp, #0]
    dab2:	f241 0147 	movw	r1, #4167	; 0x1047
    dab6:	2200      	movs	r2, #0
        self.running = false;
    dab8:	5442      	strb	r2, [r0, r1]
    }
    daba:	b001      	add	sp, #4
    dabc:	4770      	bx	lr

0000dabe <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hb195795cc886092aE>:
    dabe:	b580      	push	{r7, lr}
    dac0:	b084      	sub	sp, #16
    dac2:	4601      	mov	r1, r0
    dac4:	f88d 000f 	strb.w	r0, [sp, #15]
    dac8:	9102      	str	r1, [sp, #8]
    daca:	f004 ff92 	bl	129f2 <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h0a450d9c4f54993fE>
    dace:	9001      	str	r0, [sp, #4]
    dad0:	e7ff      	b.n	dad2 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hb195795cc886092aE+0x14>
    dad2:	9801      	ldr	r0, [sp, #4]
    dad4:	b004      	add	sp, #16
    dad6:	bd80      	pop	{r7, pc}

0000dad8 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E>:
    dad8:	b580      	push	{r7, lr}
    dada:	b086      	sub	sp, #24
    dadc:	9004      	str	r0, [sp, #16]
    dade:	9105      	str	r1, [sp, #20]
    dae0:	9002      	str	r0, [sp, #8]
    dae2:	f000 f810 	bl	db06 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17he92aef8d37797e2bE>
    dae6:	9001      	str	r0, [sp, #4]
    dae8:	e7ff      	b.n	daea <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E+0x12>
    daea:	9801      	ldr	r0, [sp, #4]
    daec:	07c1      	lsls	r1, r0, #31
    daee:	2900      	cmp	r1, #0
    daf0:	d103      	bne.n	dafa <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E+0x22>
    daf2:	e7ff      	b.n	daf4 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E+0x1c>
    daf4:	2000      	movs	r0, #0
    daf6:	9003      	str	r0, [sp, #12]
    daf8:	e002      	b.n	db00 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E+0x28>
    dafa:	9802      	ldr	r0, [sp, #8]
    dafc:	9003      	str	r0, [sp, #12]
    dafe:	e7ff      	b.n	db00 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E+0x28>
    db00:	9803      	ldr	r0, [sp, #12]
    db02:	b006      	add	sp, #24
    db04:	bd80      	pop	{r7, pc}

0000db06 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17he92aef8d37797e2bE>:
    db06:	b580      	push	{r7, lr}
    db08:	b08a      	sub	sp, #40	; 0x28
    db0a:	9008      	str	r0, [sp, #32]
    db0c:	9109      	str	r1, [sp, #36]	; 0x24
    db0e:	9103      	str	r1, [sp, #12]
    db10:	9002      	str	r0, [sp, #8]
    db12:	f000 f815 	bl	db40 <_ZN4core3any6TypeId2of17h8ccdaa41437c3cf9E>
    db16:	9105      	str	r1, [sp, #20]
    db18:	9004      	str	r0, [sp, #16]
    db1a:	e7ff      	b.n	db1c <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17he92aef8d37797e2bE+0x16>
    db1c:	9803      	ldr	r0, [sp, #12]
    db1e:	68c1      	ldr	r1, [r0, #12]
    db20:	9802      	ldr	r0, [sp, #8]
    db22:	4788      	blx	r1
    db24:	9107      	str	r1, [sp, #28]
    db26:	9006      	str	r0, [sp, #24]
    db28:	e7ff      	b.n	db2a <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17he92aef8d37797e2bE+0x24>
    db2a:	a804      	add	r0, sp, #16
    db2c:	a906      	add	r1, sp, #24
    db2e:	f005 f92d 	bl	12d8c <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h2d7145d37f608201E>
    db32:	9001      	str	r0, [sp, #4]
    db34:	e7ff      	b.n	db36 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17he92aef8d37797e2bE+0x30>
    db36:	9801      	ldr	r0, [sp, #4]
    db38:	f000 0001 	and.w	r0, r0, #1
    db3c:	b00a      	add	sp, #40	; 0x28
    db3e:	bd80      	pop	{r7, pc}

0000db40 <_ZN4core3any6TypeId2of17h8ccdaa41437c3cf9E>:
    db40:	b086      	sub	sp, #24
    db42:	f249 40d9 	movw	r0, #38105	; 0x94d9
    db46:	f2c1 1010 	movt	r0, #4368	; 0x1110
    db4a:	9005      	str	r0, [sp, #20]
    db4c:	f249 7064 	movw	r0, #38756	; 0x9764
    db50:	f2c7 00b0 	movt	r0, #28848	; 0x70b0
    db54:	9004      	str	r0, [sp, #16]
    db56:	9804      	ldr	r0, [sp, #16]
    db58:	9905      	ldr	r1, [sp, #20]
    db5a:	9001      	str	r0, [sp, #4]
    db5c:	9100      	str	r1, [sp, #0]
    db5e:	e7ff      	b.n	db60 <_ZN4core3any6TypeId2of17h8ccdaa41437c3cf9E+0x20>
    db60:	9801      	ldr	r0, [sp, #4]
    db62:	9002      	str	r0, [sp, #8]
    db64:	9900      	ldr	r1, [sp, #0]
    db66:	9103      	str	r1, [sp, #12]
    db68:	9802      	ldr	r0, [sp, #8]
    db6a:	9903      	ldr	r1, [sp, #12]
    db6c:	b006      	add	sp, #24
    db6e:	4770      	bx	lr

0000db70 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17ha534480b95c4fb6cE>:
    db70:	b580      	push	{r7, lr}
    db72:	b084      	sub	sp, #16
    db74:	9002      	str	r0, [sp, #8]
    db76:	9103      	str	r1, [sp, #12]
    db78:	f7ff ffae 	bl	dad8 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E>
    db7c:	9001      	str	r0, [sp, #4]
    db7e:	e7ff      	b.n	db80 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17ha534480b95c4fb6cE+0x10>
    db80:	9801      	ldr	r0, [sp, #4]
    db82:	b004      	add	sp, #16
    db84:	bd80      	pop	{r7, pc}

0000db86 <_ZN4core4iter6traits8iterator8Iterator7flatten17h790b24ffb57b6bb2E>:
    db86:	b580      	push	{r7, lr}
    db88:	b084      	sub	sp, #16
    db8a:	680a      	ldr	r2, [r1, #0]
    db8c:	684b      	ldr	r3, [r1, #4]
    db8e:	6889      	ldr	r1, [r1, #8]
    db90:	9103      	str	r1, [sp, #12]
    db92:	9302      	str	r3, [sp, #8]
    db94:	9201      	str	r2, [sp, #4]
    db96:	a901      	add	r1, sp, #4
    db98:	f000 f8d9 	bl	dd4e <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h9a887926e27564b3E>
    db9c:	e7ff      	b.n	db9e <_ZN4core4iter6traits8iterator8Iterator7flatten17h790b24ffb57b6bb2E+0x18>
    db9e:	b004      	add	sp, #16
    dba0:	bd80      	pop	{r7, pc}

0000dba2 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h21a9e3dc4962ad94E>:
    dba2:	b083      	sub	sp, #12
    dba4:	9100      	str	r1, [sp, #0]
    dba6:	9201      	str	r2, [sp, #4]
    dba8:	9302      	str	r3, [sp, #8]
    dbaa:	6001      	str	r1, [r0, #0]
    dbac:	6042      	str	r2, [r0, #4]
    dbae:	6083      	str	r3, [r0, #8]
    dbb0:	b003      	add	sp, #12
    dbb2:	4770      	bx	lr

0000dbb4 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h47809268ca43aa27E>:
    dbb4:	b083      	sub	sp, #12
    dbb6:	9100      	str	r1, [sp, #0]
    dbb8:	9201      	str	r2, [sp, #4]
    dbba:	9302      	str	r3, [sp, #8]
    dbbc:	6001      	str	r1, [r0, #0]
    dbbe:	6042      	str	r2, [r0, #4]
    dbc0:	6083      	str	r3, [r0, #8]
    dbc2:	b003      	add	sp, #12
    dbc4:	4770      	bx	lr

0000dbc6 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h150c3e461f16f651E>:
    dbc6:	680a      	ldr	r2, [r1, #0]
    dbc8:	684b      	ldr	r3, [r1, #4]
    dbca:	6889      	ldr	r1, [r1, #8]
    dbcc:	6081      	str	r1, [r0, #8]
    dbce:	6043      	str	r3, [r0, #4]
    dbd0:	6002      	str	r2, [r0, #0]
    dbd2:	4770      	bx	lr

0000dbd4 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a9ff7d0c8950d97E>:
    dbd4:	b580      	push	{r7, lr}
    dbd6:	b086      	sub	sp, #24
    dbd8:	9105      	str	r1, [sp, #20]
    dbda:	9004      	str	r0, [sp, #16]
    dbdc:	4608      	mov	r0, r1
    dbde:	9103      	str	r1, [sp, #12]
    dbe0:	f000 fdd4 	bl	e78c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    dbe4:	9002      	str	r0, [sp, #8]
    dbe6:	9101      	str	r1, [sp, #4]
    dbe8:	e7ff      	b.n	dbea <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a9ff7d0c8950d97E+0x16>
    dbea:	9803      	ldr	r0, [sp, #12]
    dbec:	f100 0308 	add.w	r3, r0, #8
    dbf0:	9804      	ldr	r0, [sp, #16]
    dbf2:	9902      	ldr	r1, [sp, #8]
    dbf4:	9a01      	ldr	r2, [sp, #4]
    dbf6:	f000 f944 	bl	de82 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E>
    dbfa:	e7ff      	b.n	dbfc <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a9ff7d0c8950d97E+0x28>
    dbfc:	b006      	add	sp, #24
    dbfe:	bd80      	pop	{r7, pc}

0000dc00 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hac566d17e493ac47E>:
    dc00:	b580      	push	{r7, lr}
    dc02:	b086      	sub	sp, #24
    dc04:	9105      	str	r1, [sp, #20]
    dc06:	9004      	str	r0, [sp, #16]
    dc08:	4608      	mov	r0, r1
    dc0a:	9103      	str	r1, [sp, #12]
    dc0c:	f000 fdbe 	bl	e78c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    dc10:	9002      	str	r0, [sp, #8]
    dc12:	9101      	str	r1, [sp, #4]
    dc14:	e7ff      	b.n	dc16 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hac566d17e493ac47E+0x16>
    dc16:	9803      	ldr	r0, [sp, #12]
    dc18:	f100 0308 	add.w	r3, r0, #8
    dc1c:	9804      	ldr	r0, [sp, #16]
    dc1e:	9902      	ldr	r1, [sp, #8]
    dc20:	9a01      	ldr	r2, [sp, #4]
    dc22:	f000 f97b 	bl	df1c <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE>
    dc26:	e7ff      	b.n	dc28 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hac566d17e493ac47E+0x28>
    dc28:	b006      	add	sp, #24
    dc2a:	bd80      	pop	{r7, pc}

0000dc2c <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5923d182d43571feE>:
    dc2c:	b580      	push	{r7, lr}
    dc2e:	b082      	sub	sp, #8
    dc30:	9101      	str	r1, [sp, #4]
    dc32:	f000 f803 	bl	dc3c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E>
    dc36:	e7ff      	b.n	dc38 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5923d182d43571feE+0xc>
    dc38:	b002      	add	sp, #8
    dc3a:	bd80      	pop	{r7, pc}

0000dc3c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E>:
    dc3c:	b580      	push	{r7, lr}
    dc3e:	b0a0      	sub	sp, #128	; 0x80
    dc40:	911c      	str	r1, [sp, #112]	; 0x70
    dc42:	9103      	str	r1, [sp, #12]
    dc44:	9002      	str	r0, [sp, #8]
    dc46:	e7ff      	b.n	dc48 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xc>
    dc48:	9803      	ldr	r0, [sp, #12]
    dc4a:	68c1      	ldr	r1, [r0, #12]
    dc4c:	2901      	cmp	r1, #1
    dc4e:	d11e      	bne.n	dc8e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x52>
    dc50:	e7ff      	b.n	dc52 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x16>
    dc52:	9803      	ldr	r0, [sp, #12]
    dc54:	f100 0110 	add.w	r1, r0, #16
    dc58:	911e      	str	r1, [sp, #120]	; 0x78
    dc5a:	a804      	add	r0, sp, #16
    dc5c:	f7ff ffba 	bl	dbd4 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a9ff7d0c8950d97E>
    dc60:	e7ff      	b.n	dc62 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x26>
    dc62:	9804      	ldr	r0, [sp, #16]
    dc64:	2801      	cmp	r0, #1
    dc66:	d001      	beq.n	dc6c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x30>
    dc68:	e7ff      	b.n	dc6a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x2e>
    dc6a:	e00f      	b.n	dc8c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x50>
    dc6c:	9804      	ldr	r0, [sp, #16]
    dc6e:	9905      	ldr	r1, [sp, #20]
    dc70:	9a06      	ldr	r2, [sp, #24]
    dc72:	9209      	str	r2, [sp, #36]	; 0x24
    dc74:	9108      	str	r1, [sp, #32]
    dc76:	9007      	str	r0, [sp, #28]
    dc78:	9807      	ldr	r0, [sp, #28]
    dc7a:	9908      	ldr	r1, [sp, #32]
    dc7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    dc7e:	9b02      	ldr	r3, [sp, #8]
    dc80:	609a      	str	r2, [r3, #8]
    dc82:	6059      	str	r1, [r3, #4]
    dc84:	6018      	str	r0, [r3, #0]
    dc86:	e7ff      	b.n	dc88 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x4c>
    dc88:	b020      	add	sp, #128	; 0x80
    dc8a:	bd80      	pop	{r7, pc}
    dc8c:	e7ff      	b.n	dc8e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x52>
    dc8e:	a80a      	add	r0, sp, #40	; 0x28
    dc90:	9903      	ldr	r1, [sp, #12]
    dc92:	f7ff ffb5 	bl	dc00 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hac566d17e493ac47E>
    dc96:	e7ff      	b.n	dc98 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x5c>
    dc98:	980a      	ldr	r0, [sp, #40]	; 0x28
    dc9a:	2800      	cmp	r0, #0
    dc9c:	d012      	beq.n	dcc4 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x88>
    dc9e:	e7ff      	b.n	dca0 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x64>
    dca0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    dca2:	990c      	ldr	r1, [sp, #48]	; 0x30
    dca4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    dca6:	9211      	str	r2, [sp, #68]	; 0x44
    dca8:	9110      	str	r1, [sp, #64]	; 0x40
    dcaa:	900f      	str	r0, [sp, #60]	; 0x3c
    dcac:	980f      	ldr	r0, [sp, #60]	; 0x3c
    dcae:	9910      	ldr	r1, [sp, #64]	; 0x40
    dcb0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    dcb2:	921b      	str	r2, [sp, #108]	; 0x6c
    dcb4:	911a      	str	r1, [sp, #104]	; 0x68
    dcb6:	9019      	str	r0, [sp, #100]	; 0x64
    dcb8:	a816      	add	r0, sp, #88	; 0x58
    dcba:	a919      	add	r1, sp, #100	; 0x64
    dcbc:	f7ff ff83 	bl	dbc6 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h150c3e461f16f651E>
    dcc0:	e028      	b.n	dd14 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xd8>
    dcc2:	defe      	udf	#254	; 0xfe
    dcc4:	9803      	ldr	r0, [sp, #12]
    dcc6:	301c      	adds	r0, #28
    dcc8:	f000 f9b4 	bl	e034 <_ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE>
    dccc:	9001      	str	r0, [sp, #4]
    dcce:	e7ff      	b.n	dcd0 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x94>
    dcd0:	9801      	ldr	r0, [sp, #4]
    dcd2:	f000 f9e9 	bl	e0a8 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17habaf51e2b5499869E>
    dcd6:	900e      	str	r0, [sp, #56]	; 0x38
    dcd8:	e7ff      	b.n	dcda <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x9e>
    dcda:	980e      	ldr	r0, [sp, #56]	; 0x38
    dcdc:	fab0 f180 	clz	r1, r0
    dce0:	0949      	lsrs	r1, r1, #5
    dce2:	2800      	cmp	r0, #0
    dce4:	d101      	bne.n	dcea <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xae>
    dce6:	e7ff      	b.n	dce8 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xac>
    dce8:	e009      	b.n	dcfe <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xc2>
    dcea:	980e      	ldr	r0, [sp, #56]	; 0x38
    dcec:	901f      	str	r0, [sp, #124]	; 0x7c
    dcee:	9902      	ldr	r1, [sp, #8]
    dcf0:	9000      	str	r0, [sp, #0]
    dcf2:	4608      	mov	r0, r1
    dcf4:	9900      	ldr	r1, [sp, #0]
    dcf6:	f7ff ff6d 	bl	dbd4 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a9ff7d0c8950d97E>
    dcfa:	e00a      	b.n	dd12 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xd6>
    dcfc:	defe      	udf	#254	; 0xfe
    dcfe:	f002 f9af 	bl	10060 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>
    dd02:	e7ff      	b.n	dd04 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xc8>
    dd04:	9802      	ldr	r0, [sp, #8]
    dd06:	f000 f9ca 	bl	e09e <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc2b7f3c069a746efE>
    dd0a:	e7ff      	b.n	dd0c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xd0>
    dd0c:	e7ff      	b.n	dd0e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xd2>
    dd0e:	e7ff      	b.n	dd10 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xd4>
    dd10:	e7ba      	b.n	dc88 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x4c>
    dd12:	e7fc      	b.n	dd0e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xd2>
    dd14:	9816      	ldr	r0, [sp, #88]	; 0x58
    dd16:	9917      	ldr	r1, [sp, #92]	; 0x5c
    dd18:	9a18      	ldr	r2, [sp, #96]	; 0x60
    dd1a:	9215      	str	r2, [sp, #84]	; 0x54
    dd1c:	9114      	str	r1, [sp, #80]	; 0x50
    dd1e:	9013      	str	r0, [sp, #76]	; 0x4c
    dd20:	2001      	movs	r0, #1
    dd22:	9012      	str	r0, [sp, #72]	; 0x48
    dd24:	e7ff      	b.n	dd26 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xea>
    dd26:	9812      	ldr	r0, [sp, #72]	; 0x48
    dd28:	9913      	ldr	r1, [sp, #76]	; 0x4c
    dd2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    dd2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    dd2e:	f8dd c00c 	ldr.w	ip, [sp, #12]
    dd32:	f8cc 3018 	str.w	r3, [ip, #24]
    dd36:	f8cc 2014 	str.w	r2, [ip, #20]
    dd3a:	f8cc 1010 	str.w	r1, [ip, #16]
    dd3e:	f8cc 000c 	str.w	r0, [ip, #12]
    dd42:	980a      	ldr	r0, [sp, #40]	; 0x28
    dd44:	2801      	cmp	r0, #1
    dd46:	d101      	bne.n	dd4c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x110>
    dd48:	e7ff      	b.n	dd4a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x10e>
    dd4a:	e77d      	b.n	dc48 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xc>
    dd4c:	e7fd      	b.n	dd4a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x10e>

0000dd4e <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h9a887926e27564b3E>:
    dd4e:	b5b0      	push	{r4, r5, r7, lr}
    dd50:	b090      	sub	sp, #64	; 0x40
    dd52:	680a      	ldr	r2, [r1, #0]
    dd54:	684b      	ldr	r3, [r1, #4]
    dd56:	6889      	ldr	r1, [r1, #8]
    dd58:	910f      	str	r1, [sp, #60]	; 0x3c
    dd5a:	930e      	str	r3, [sp, #56]	; 0x38
    dd5c:	920d      	str	r2, [sp, #52]	; 0x34
    dd5e:	a902      	add	r1, sp, #8
    dd60:	aa0d      	add	r2, sp, #52	; 0x34
    dd62:	9001      	str	r0, [sp, #4]
    dd64:	4608      	mov	r0, r1
    dd66:	4611      	mov	r1, r2
    dd68:	f000 f80d 	bl	dd86 <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h67d5d76d62fd1974E>
    dd6c:	e7ff      	b.n	dd6e <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h9a887926e27564b3E+0x20>
    dd6e:	a802      	add	r0, sp, #8
    dd70:	9901      	ldr	r1, [sp, #4]
    dd72:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
    dd76:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
    dd7a:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
    dd7e:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
    dd82:	b010      	add	sp, #64	; 0x40
    dd84:	bdb0      	pop	{r4, r5, r7, pc}

0000dd86 <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h67d5d76d62fd1974E>:
    dd86:	b08b      	sub	sp, #44	; 0x2c
    dd88:	680a      	ldr	r2, [r1, #0]
    dd8a:	684b      	ldr	r3, [r1, #4]
    dd8c:	6889      	ldr	r1, [r1, #8]
    dd8e:	9102      	str	r1, [sp, #8]
    dd90:	9301      	str	r3, [sp, #4]
    dd92:	9200      	str	r2, [sp, #0]
    dd94:	2100      	movs	r1, #0
    dd96:	9103      	str	r1, [sp, #12]
    dd98:	9107      	str	r1, [sp, #28]
    dd9a:	9900      	ldr	r1, [sp, #0]
    dd9c:	9a01      	ldr	r2, [sp, #4]
    dd9e:	9b02      	ldr	r3, [sp, #8]
    dda0:	6083      	str	r3, [r0, #8]
    dda2:	6042      	str	r2, [r0, #4]
    dda4:	6001      	str	r1, [r0, #0]
    dda6:	9903      	ldr	r1, [sp, #12]
    dda8:	9a04      	ldr	r2, [sp, #16]
    ddaa:	9b05      	ldr	r3, [sp, #20]
    ddac:	f8dd c018 	ldr.w	ip, [sp, #24]
    ddb0:	f8c0 c018 	str.w	ip, [r0, #24]
    ddb4:	6143      	str	r3, [r0, #20]
    ddb6:	6102      	str	r2, [r0, #16]
    ddb8:	60c1      	str	r1, [r0, #12]
    ddba:	9907      	ldr	r1, [sp, #28]
    ddbc:	9a08      	ldr	r2, [sp, #32]
    ddbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ddc0:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    ddc4:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
    ddc8:	6243      	str	r3, [r0, #36]	; 0x24
    ddca:	6202      	str	r2, [r0, #32]
    ddcc:	61c1      	str	r1, [r0, #28]
    ddce:	b00b      	add	sp, #44	; 0x2c
    ddd0:	4770      	bx	lr

0000ddd2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h0a1a9897cf1e3266E>:
    ddd2:	b5b0      	push	{r4, r5, r7, lr}
    ddd4:	e8b1 501c 	ldmia.w	r1!, {r2, r3, r4, ip, lr}
    ddd8:	e8a0 501c 	stmia.w	r0!, {r2, r3, r4, ip, lr}
    dddc:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    dde0:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    dde4:	bdb0      	pop	{r4, r5, r7, pc}

0000dde6 <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>:
    dde6:	b510      	push	{r4, lr}
    dde8:	b088      	sub	sp, #32
    ddea:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
    ddee:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
    ddf2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    ddf4:	9102      	str	r1, [sp, #8]
    ddf6:	9203      	str	r2, [sp, #12]
    ddf8:	9304      	str	r3, [sp, #16]
    ddfa:	9405      	str	r4, [sp, #20]
    ddfc:	f8cd e018 	str.w	lr, [sp, #24]
    de00:	f8cd c01c 	str.w	ip, [sp, #28]
    de04:	f8cd e000 	str.w	lr, [sp]
    de08:	f8cd c004 	str.w	ip, [sp, #4]
    de0c:	6001      	str	r1, [r0, #0]
    de0e:	6042      	str	r2, [r0, #4]
    de10:	9900      	ldr	r1, [sp, #0]
    de12:	9a01      	ldr	r2, [sp, #4]
    de14:	6081      	str	r1, [r0, #8]
    de16:	60c2      	str	r2, [r0, #12]
    de18:	6103      	str	r3, [r0, #16]
    de1a:	6144      	str	r4, [r0, #20]
    de1c:	b008      	add	sp, #32
    de1e:	bd10      	pop	{r4, pc}

0000de20 <_ZN4core3fmt9Arguments6new_v117h7622a2ed78995b61E>:
    de20:	b580      	push	{r7, lr}
    de22:	b086      	sub	sp, #24
    de24:	f8dd c020 	ldr.w	ip, [sp, #32]
    de28:	9102      	str	r1, [sp, #8]
    de2a:	9203      	str	r2, [sp, #12]
    de2c:	9304      	str	r3, [sp, #16]
    de2e:	f8cd c014 	str.w	ip, [sp, #20]
    de32:	f04f 0e00 	mov.w	lr, #0
    de36:	f8cd e004 	str.w	lr, [sp, #4]
    de3a:	f8cd e000 	str.w	lr, [sp]
    de3e:	f8cd e000 	str.w	lr, [sp]
    de42:	6001      	str	r1, [r0, #0]
    de44:	6042      	str	r2, [r0, #4]
    de46:	9900      	ldr	r1, [sp, #0]
    de48:	9a01      	ldr	r2, [sp, #4]
    de4a:	6081      	str	r1, [r0, #8]
    de4c:	60c2      	str	r2, [r0, #12]
    de4e:	6103      	str	r3, [r0, #16]
    de50:	f8c0 c014 	str.w	ip, [r0, #20]
    de54:	b006      	add	sp, #24
    de56:	bd80      	pop	{r7, pc}

0000de58 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hd29a6855bf5041fdE>:
    de58:	b580      	push	{r7, lr}
    de5a:	b088      	sub	sp, #32
    de5c:	9004      	str	r0, [sp, #16]
    de5e:	9105      	str	r1, [sp, #20]
    de60:	9206      	str	r2, [sp, #24]
    de62:	9307      	str	r3, [sp, #28]
    de64:	9003      	str	r0, [sp, #12]
    de66:	4610      	mov	r0, r2
    de68:	9102      	str	r1, [sp, #8]
    de6a:	4619      	mov	r1, r3
    de6c:	9a03      	ldr	r2, [sp, #12]
    de6e:	9b02      	ldr	r3, [sp, #8]
    de70:	f001 f9f9 	bl	f266 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>
    de74:	9001      	str	r0, [sp, #4]
    de76:	9100      	str	r1, [sp, #0]
    de78:	e7ff      	b.n	de7a <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hd29a6855bf5041fdE+0x22>
    de7a:	9801      	ldr	r0, [sp, #4]
    de7c:	9900      	ldr	r1, [sp, #0]
    de7e:	b008      	add	sp, #32
    de80:	bd80      	pop	{r7, pc}

0000de82 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E>:
    de82:	b580      	push	{r7, lr}
    de84:	b08a      	sub	sp, #40	; 0x28
    de86:	9104      	str	r1, [sp, #16]
    de88:	9205      	str	r2, [sp, #20]
    de8a:	9308      	str	r3, [sp, #32]
    de8c:	2100      	movs	r1, #0
    de8e:	f88d 101e 	strb.w	r1, [sp, #30]
    de92:	f88d 101f 	strb.w	r1, [sp, #31]
    de96:	2101      	movs	r1, #1
    de98:	f88d 101f 	strb.w	r1, [sp, #31]
    de9c:	f88d 101e 	strb.w	r1, [sp, #30]
    dea0:	9904      	ldr	r1, [sp, #16]
    dea2:	2900      	cmp	r1, #0
    dea4:	9303      	str	r3, [sp, #12]
    dea6:	9002      	str	r0, [sp, #8]
    dea8:	d001      	beq.n	deae <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x2c>
    deaa:	e7ff      	b.n	deac <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x2a>
    deac:	e004      	b.n	deb8 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x36>
    deae:	2000      	movs	r0, #0
    deb0:	9902      	ldr	r1, [sp, #8]
    deb2:	6008      	str	r0, [r1, #0]
    deb4:	e01f      	b.n	def6 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x74>
    deb6:	defe      	udf	#254	; 0xfe
    deb8:	2000      	movs	r0, #0
    deba:	f88d 001f 	strb.w	r0, [sp, #31]
    debe:	9905      	ldr	r1, [sp, #20]
    dec0:	9109      	str	r1, [sp, #36]	; 0x24
    dec2:	f88d 001e 	strb.w	r0, [sp, #30]
    dec6:	9106      	str	r1, [sp, #24]
    dec8:	9906      	ldr	r1, [sp, #24]
    deca:	9803      	ldr	r0, [sp, #12]
    decc:	f7fb fd9c 	bl	9a08 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17he627156f6f8a4ed5E>
    ded0:	9001      	str	r0, [sp, #4]
    ded2:	9100      	str	r1, [sp, #0]
    ded4:	e7ff      	b.n	ded6 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x54>
    ded6:	9801      	ldr	r0, [sp, #4]
    ded8:	9902      	ldr	r1, [sp, #8]
    deda:	6048      	str	r0, [r1, #4]
    dedc:	9a00      	ldr	r2, [sp, #0]
    dede:	608a      	str	r2, [r1, #8]
    dee0:	2301      	movs	r3, #1
    dee2:	600b      	str	r3, [r1, #0]
    dee4:	e007      	b.n	def6 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x74>
    dee6:	9804      	ldr	r0, [sp, #16]
    dee8:	2801      	cmp	r0, #1
    deea:	d00c      	beq.n	df06 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x84>
    deec:	e015      	b.n	df1a <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x98>
    deee:	2000      	movs	r0, #0
    def0:	f88d 001e 	strb.w	r0, [sp, #30]
    def4:	e7f7      	b.n	dee6 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x64>
    def6:	f89d 001e 	ldrb.w	r0, [sp, #30]
    defa:	07c0      	lsls	r0, r0, #31
    defc:	2800      	cmp	r0, #0
    defe:	d1f6      	bne.n	deee <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x6c>
    df00:	e7f1      	b.n	dee6 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x64>
    df02:	b00a      	add	sp, #40	; 0x28
    df04:	bd80      	pop	{r7, pc}
    df06:	f89d 001f 	ldrb.w	r0, [sp, #31]
    df0a:	07c0      	lsls	r0, r0, #31
    df0c:	2800      	cmp	r0, #0
    df0e:	d0f8      	beq.n	df02 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x80>
    df10:	e7ff      	b.n	df12 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x90>
    df12:	2000      	movs	r0, #0
    df14:	f88d 001f 	strb.w	r0, [sp, #31]
    df18:	e7f3      	b.n	df02 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x80>
    df1a:	e7f2      	b.n	df02 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x80>

0000df1c <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE>:
    df1c:	b580      	push	{r7, lr}
    df1e:	b08c      	sub	sp, #48	; 0x30
    df20:	9103      	str	r1, [sp, #12]
    df22:	9204      	str	r2, [sp, #16]
    df24:	930a      	str	r3, [sp, #40]	; 0x28
    df26:	2100      	movs	r1, #0
    df28:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    df2c:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    df30:	2101      	movs	r1, #1
    df32:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    df36:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    df3a:	9903      	ldr	r1, [sp, #12]
    df3c:	2900      	cmp	r1, #0
    df3e:	9302      	str	r3, [sp, #8]
    df40:	9001      	str	r0, [sp, #4]
    df42:	d001      	beq.n	df48 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x2c>
    df44:	e7ff      	b.n	df46 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x2a>
    df46:	e004      	b.n	df52 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x36>
    df48:	2000      	movs	r0, #0
    df4a:	9901      	ldr	r1, [sp, #4]
    df4c:	6008      	str	r0, [r1, #0]
    df4e:	e020      	b.n	df92 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x76>
    df50:	defe      	udf	#254	; 0xfe
    df52:	2000      	movs	r0, #0
    df54:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    df58:	9904      	ldr	r1, [sp, #16]
    df5a:	910b      	str	r1, [sp, #44]	; 0x2c
    df5c:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    df60:	9108      	str	r1, [sp, #32]
    df62:	9a08      	ldr	r2, [sp, #32]
    df64:	a805      	add	r0, sp, #20
    df66:	9902      	ldr	r1, [sp, #8]
    df68:	f7fb fd44 	bl	99f4 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h79fbfe346516e383E>
    df6c:	e7ff      	b.n	df6e <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x52>
    df6e:	9805      	ldr	r0, [sp, #20]
    df70:	9906      	ldr	r1, [sp, #24]
    df72:	9a07      	ldr	r2, [sp, #28]
    df74:	9b01      	ldr	r3, [sp, #4]
    df76:	60da      	str	r2, [r3, #12]
    df78:	6099      	str	r1, [r3, #8]
    df7a:	6058      	str	r0, [r3, #4]
    df7c:	2001      	movs	r0, #1
    df7e:	6018      	str	r0, [r3, #0]
    df80:	e007      	b.n	df92 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x76>
    df82:	9803      	ldr	r0, [sp, #12]
    df84:	2801      	cmp	r0, #1
    df86:	d00c      	beq.n	dfa2 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x86>
    df88:	e015      	b.n	dfb6 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x9a>
    df8a:	2000      	movs	r0, #0
    df8c:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    df90:	e7f7      	b.n	df82 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x66>
    df92:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
    df96:	07c0      	lsls	r0, r0, #31
    df98:	2800      	cmp	r0, #0
    df9a:	d1f6      	bne.n	df8a <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x6e>
    df9c:	e7f1      	b.n	df82 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x66>
    df9e:	b00c      	add	sp, #48	; 0x30
    dfa0:	bd80      	pop	{r7, pc}
    dfa2:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    dfa6:	07c0      	lsls	r0, r0, #31
    dfa8:	2800      	cmp	r0, #0
    dfaa:	d0f8      	beq.n	df9e <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x82>
    dfac:	e7ff      	b.n	dfae <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x92>
    dfae:	2000      	movs	r0, #0
    dfb0:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    dfb4:	e7f3      	b.n	df9e <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x82>
    dfb6:	e7f2      	b.n	df9e <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x82>

0000dfb8 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E>:
    dfb8:	b085      	sub	sp, #20
    dfba:	9000      	str	r0, [sp, #0]
    dfbc:	2000      	movs	r0, #0
    dfbe:	f88d 000b 	strb.w	r0, [sp, #11]
    dfc2:	f88d 000a 	strb.w	r0, [sp, #10]
    dfc6:	2001      	movs	r0, #1
    dfc8:	f88d 000b 	strb.w	r0, [sp, #11]
    dfcc:	f88d 000a 	strb.w	r0, [sp, #10]
    dfd0:	9800      	ldr	r0, [sp, #0]
    dfd2:	2800      	cmp	r0, #0
    dfd4:	4601      	mov	r1, r0
    dfd6:	bf18      	it	ne
    dfd8:	2101      	movne	r1, #1
    dfda:	2800      	cmp	r0, #0
    dfdc:	d001      	beq.n	dfe2 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x2a>
    dfde:	e7ff      	b.n	dfe0 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x28>
    dfe0:	e005      	b.n	dfee <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x36>
    dfe2:	2000      	movs	r0, #0
    dfe4:	f88d 000a 	strb.w	r0, [sp, #10]
    dfe8:	9001      	str	r0, [sp, #4]
    dfea:	e007      	b.n	dffc <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x44>
    dfec:	defe      	udf	#254	; 0xfe
    dfee:	2000      	movs	r0, #0
    dff0:	f88d 000b 	strb.w	r0, [sp, #11]
    dff4:	9800      	ldr	r0, [sp, #0]
    dff6:	9004      	str	r0, [sp, #16]
    dff8:	9001      	str	r0, [sp, #4]
    dffa:	e7ff      	b.n	dffc <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x44>
    dffc:	f89d 000a 	ldrb.w	r0, [sp, #10]
    e000:	07c0      	lsls	r0, r0, #31
    e002:	2800      	cmp	r0, #0
    e004:	d104      	bne.n	e010 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x58>
    e006:	e7ff      	b.n	e008 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x50>
    e008:	9800      	ldr	r0, [sp, #0]
    e00a:	2800      	cmp	r0, #0
    e00c:	d107      	bne.n	e01e <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x66>
    e00e:	e010      	b.n	e032 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x7a>
    e010:	2000      	movs	r0, #0
    e012:	f88d 000a 	strb.w	r0, [sp, #10]
    e016:	e7f7      	b.n	e008 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x50>
    e018:	9801      	ldr	r0, [sp, #4]
    e01a:	b005      	add	sp, #20
    e01c:	4770      	bx	lr
    e01e:	f89d 000b 	ldrb.w	r0, [sp, #11]
    e022:	07c0      	lsls	r0, r0, #31
    e024:	2800      	cmp	r0, #0
    e026:	d0f7      	beq.n	e018 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x60>
    e028:	e7ff      	b.n	e02a <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x72>
    e02a:	2000      	movs	r0, #0
    e02c:	f88d 000b 	strb.w	r0, [sp, #11]
    e030:	e7f2      	b.n	e018 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x60>
    e032:	e7f1      	b.n	e018 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x60>

0000e034 <_ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE>:
    e034:	b084      	sub	sp, #16
    e036:	9002      	str	r0, [sp, #8]
    e038:	6801      	ldr	r1, [r0, #0]
    e03a:	2900      	cmp	r1, #0
    e03c:	9000      	str	r0, [sp, #0]
    e03e:	d001      	beq.n	e044 <_ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE+0x10>
    e040:	e7ff      	b.n	e042 <_ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE+0xe>
    e042:	e003      	b.n	e04c <_ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE+0x18>
    e044:	2000      	movs	r0, #0
    e046:	9001      	str	r0, [sp, #4]
    e048:	e005      	b.n	e056 <_ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE+0x22>
    e04a:	defe      	udf	#254	; 0xfe
    e04c:	9800      	ldr	r0, [sp, #0]
    e04e:	1d01      	adds	r1, r0, #4
    e050:	9103      	str	r1, [sp, #12]
    e052:	9101      	str	r1, [sp, #4]
    e054:	e7ff      	b.n	e056 <_ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE+0x22>
    e056:	9801      	ldr	r0, [sp, #4]
    e058:	b004      	add	sp, #16
    e05a:	4770      	bx	lr

0000e05c <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E>:
    e05c:	b084      	sub	sp, #16
    e05e:	9002      	str	r0, [sp, #8]
    e060:	9802      	ldr	r0, [sp, #8]
    e062:	2800      	cmp	r0, #0
    e064:	4602      	mov	r2, r0
    e066:	bf18      	it	ne
    e068:	2201      	movne	r2, #1
    e06a:	2800      	cmp	r0, #0
    e06c:	9101      	str	r1, [sp, #4]
    e06e:	d001      	beq.n	e074 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E+0x18>
    e070:	e7ff      	b.n	e072 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E+0x16>
    e072:	e009      	b.n	e088 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E+0x2c>
    e074:	f64e 408c 	movw	r0, #60556	; 0xec8c
    e078:	f2c0 0001 	movt	r0, #1
    e07c:	212b      	movs	r1, #43	; 0x2b
    e07e:	9a01      	ldr	r2, [sp, #4]
    e080:	f008 fc8e 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e084:	defe      	udf	#254	; 0xfe
    e086:	defe      	udf	#254	; 0xfe
    e088:	9802      	ldr	r0, [sp, #8]
    e08a:	9003      	str	r0, [sp, #12]
    e08c:	9902      	ldr	r1, [sp, #8]
    e08e:	2900      	cmp	r1, #0
    e090:	9000      	str	r0, [sp, #0]
    e092:	d003      	beq.n	e09c <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E+0x40>
    e094:	e7ff      	b.n	e096 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E+0x3a>
    e096:	9800      	ldr	r0, [sp, #0]
    e098:	b004      	add	sp, #16
    e09a:	4770      	bx	lr
    e09c:	e7fb      	b.n	e096 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E+0x3a>

0000e09e <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc2b7f3c069a746efE>:
    e09e:	b081      	sub	sp, #4
    e0a0:	2100      	movs	r1, #0
    e0a2:	6001      	str	r1, [r0, #0]
    e0a4:	b001      	add	sp, #4
    e0a6:	4770      	bx	lr

0000e0a8 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17habaf51e2b5499869E>:
    e0a8:	b580      	push	{r7, lr}
    e0aa:	b082      	sub	sp, #8
    e0ac:	9001      	str	r0, [sp, #4]
    e0ae:	f7ff ff83 	bl	dfb8 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E>
    e0b2:	9000      	str	r0, [sp, #0]
    e0b4:	e7ff      	b.n	e0b6 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17habaf51e2b5499869E+0xe>
    e0b6:	9800      	ldr	r0, [sp, #0]
    e0b8:	b002      	add	sp, #8
    e0ba:	bd80      	pop	{r7, pc}

0000e0bc <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE>:
    e0bc:	b580      	push	{r7, lr}
    e0be:	b084      	sub	sp, #16
    e0c0:	9002      	str	r0, [sp, #8]
    e0c2:	9103      	str	r1, [sp, #12]
    e0c4:	6800      	ldr	r0, [r0, #0]
    e0c6:	f000 f88c 	bl	e1e2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>
    e0ca:	9001      	str	r0, [sp, #4]
    e0cc:	e7ff      	b.n	e0ce <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE+0x12>
    e0ce:	9801      	ldr	r0, [sp, #4]
    e0d0:	f000 0001 	and.w	r0, r0, #1
    e0d4:	b004      	add	sp, #16
    e0d6:	bd80      	pop	{r7, pc}

0000e0d8 <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>:
    e0d8:	b580      	push	{r7, lr}
    e0da:	b084      	sub	sp, #16
    e0dc:	9002      	str	r0, [sp, #8]
    e0de:	9103      	str	r1, [sp, #12]
    e0e0:	f000 f827 	bl	e132 <_ZN4core3cmp6max_by17h3c9686db40e0f078E>
    e0e4:	9001      	str	r0, [sp, #4]
    e0e6:	e7ff      	b.n	e0e8 <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE+0x10>
    e0e8:	9801      	ldr	r0, [sp, #4]
    e0ea:	b004      	add	sp, #16
    e0ec:	bd80      	pop	{r7, pc}

0000e0ee <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE>:
    e0ee:	b085      	sub	sp, #20
    e0f0:	9003      	str	r0, [sp, #12]
    e0f2:	9104      	str	r1, [sp, #16]
    e0f4:	6802      	ldr	r2, [r0, #0]
    e0f6:	680b      	ldr	r3, [r1, #0]
    e0f8:	429a      	cmp	r2, r3
    e0fa:	9101      	str	r1, [sp, #4]
    e0fc:	9000      	str	r0, [sp, #0]
    e0fe:	db07      	blt.n	e110 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x22>
    e100:	e7ff      	b.n	e102 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x14>
    e102:	9800      	ldr	r0, [sp, #0]
    e104:	6801      	ldr	r1, [r0, #0]
    e106:	9a01      	ldr	r2, [sp, #4]
    e108:	6813      	ldr	r3, [r2, #0]
    e10a:	4299      	cmp	r1, r3
    e10c:	d008      	beq.n	e120 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x32>
    e10e:	e003      	b.n	e118 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x2a>
    e110:	20ff      	movs	r0, #255	; 0xff
    e112:	f88d 000b 	strb.w	r0, [sp, #11]
    e116:	e008      	b.n	e12a <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3c>
    e118:	2001      	movs	r0, #1
    e11a:	f88d 000b 	strb.w	r0, [sp, #11]
    e11e:	e003      	b.n	e128 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3a>
    e120:	2000      	movs	r0, #0
    e122:	f88d 000b 	strb.w	r0, [sp, #11]
    e126:	e7ff      	b.n	e128 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3a>
    e128:	e7ff      	b.n	e12a <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3c>
    e12a:	f89d 000b 	ldrb.w	r0, [sp, #11]
    e12e:	b005      	add	sp, #20
    e130:	4770      	bx	lr

0000e132 <_ZN4core3cmp6max_by17h3c9686db40e0f078E>:
    e132:	b580      	push	{r7, lr}
    e134:	b088      	sub	sp, #32
    e136:	9000      	str	r0, [sp, #0]
    e138:	9101      	str	r1, [sp, #4]
    e13a:	2000      	movs	r0, #0
    e13c:	f88d 001b 	strb.w	r0, [sp, #27]
    e140:	f88d 001a 	strb.w	r0, [sp, #26]
    e144:	2001      	movs	r0, #1
    e146:	f88d 001b 	strb.w	r0, [sp, #27]
    e14a:	f88d 001a 	strb.w	r0, [sp, #26]
    e14e:	4668      	mov	r0, sp
    e150:	9004      	str	r0, [sp, #16]
    e152:	a801      	add	r0, sp, #4
    e154:	9005      	str	r0, [sp, #20]
    e156:	9804      	ldr	r0, [sp, #16]
    e158:	9905      	ldr	r1, [sp, #20]
    e15a:	f000 f895 	bl	e288 <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E>
    e15e:	f88d 000f 	strb.w	r0, [sp, #15]
    e162:	e7ff      	b.n	e164 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x32>
    e164:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    e168:	1c41      	adds	r1, r0, #1
    e16a:	2902      	cmp	r1, #2
    e16c:	d307      	bcc.n	e17e <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x4c>
    e16e:	e7ff      	b.n	e170 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x3e>
    e170:	2000      	movs	r0, #0
    e172:	f88d 001b 	strb.w	r0, [sp, #27]
    e176:	9800      	ldr	r0, [sp, #0]
    e178:	9002      	str	r0, [sp, #8]
    e17a:	e006      	b.n	e18a <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x58>
    e17c:	defe      	udf	#254	; 0xfe
    e17e:	2000      	movs	r0, #0
    e180:	f88d 001a 	strb.w	r0, [sp, #26]
    e184:	9801      	ldr	r0, [sp, #4]
    e186:	9002      	str	r0, [sp, #8]
    e188:	e7ff      	b.n	e18a <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x58>
    e18a:	f89d 001a 	ldrb.w	r0, [sp, #26]
    e18e:	07c0      	lsls	r0, r0, #31
    e190:	2800      	cmp	r0, #0
    e192:	d109      	bne.n	e1a8 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x76>
    e194:	e7ff      	b.n	e196 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x64>
    e196:	f89d 001b 	ldrb.w	r0, [sp, #27]
    e19a:	07c0      	lsls	r0, r0, #31
    e19c:	2800      	cmp	r0, #0
    e19e:	d107      	bne.n	e1b0 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x7e>
    e1a0:	e7ff      	b.n	e1a2 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x70>
    e1a2:	9802      	ldr	r0, [sp, #8]
    e1a4:	b008      	add	sp, #32
    e1a6:	bd80      	pop	{r7, pc}
    e1a8:	2000      	movs	r0, #0
    e1aa:	f88d 001a 	strb.w	r0, [sp, #26]
    e1ae:	e7f2      	b.n	e196 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x64>
    e1b0:	2000      	movs	r0, #0
    e1b2:	f88d 001b 	strb.w	r0, [sp, #27]
    e1b6:	e7f4      	b.n	e1a2 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x70>

0000e1b8 <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E>:
    e1b8:	b089      	sub	sp, #36	; 0x24
    e1ba:	9005      	str	r0, [sp, #20]
    e1bc:	9106      	str	r1, [sp, #24]
    e1be:	9107      	str	r1, [sp, #28]
    e1c0:	9907      	ldr	r1, [sp, #28]
    e1c2:	9002      	str	r0, [sp, #8]
    e1c4:	9101      	str	r1, [sp, #4]
    e1c6:	e7ff      	b.n	e1c8 <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E+0x10>
    e1c8:	9802      	ldr	r0, [sp, #8]
    e1ca:	9008      	str	r0, [sp, #32]
    e1cc:	9908      	ldr	r1, [sp, #32]
    e1ce:	9100      	str	r1, [sp, #0]
    e1d0:	e7ff      	b.n	e1d2 <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E+0x1a>
    e1d2:	9800      	ldr	r0, [sp, #0]
    e1d4:	9003      	str	r0, [sp, #12]
    e1d6:	9901      	ldr	r1, [sp, #4]
    e1d8:	9104      	str	r1, [sp, #16]
    e1da:	9803      	ldr	r0, [sp, #12]
    e1dc:	9904      	ldr	r1, [sp, #16]
    e1de:	b009      	add	sp, #36	; 0x24
    e1e0:	4770      	bx	lr

0000e1e2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>:
    e1e2:	b580      	push	{r7, lr}
    e1e4:	b088      	sub	sp, #32
    e1e6:	9006      	str	r0, [sp, #24]
    e1e8:	9107      	str	r1, [sp, #28]
    e1ea:	9004      	str	r0, [sp, #16]
    e1ec:	4608      	mov	r0, r1
    e1ee:	9103      	str	r1, [sp, #12]
    e1f0:	f009 fa77 	bl	176e2 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
    e1f4:	9002      	str	r0, [sp, #8]
    e1f6:	e7ff      	b.n	e1f8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x16>
    e1f8:	9802      	ldr	r0, [sp, #8]
    e1fa:	07c1      	lsls	r1, r0, #31
    e1fc:	2900      	cmp	r1, #0
    e1fe:	d105      	bne.n	e20c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x2a>
    e200:	e7ff      	b.n	e202 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x20>
    e202:	9803      	ldr	r0, [sp, #12]
    e204:	f009 fa71 	bl	176ea <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
    e208:	9001      	str	r0, [sp, #4]
    e20a:	e007      	b.n	e21c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x3a>
    e20c:	9804      	ldr	r0, [sp, #16]
    e20e:	9903      	ldr	r1, [sp, #12]
    e210:	f00a f891 	bl	18336 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
    e214:	f88d 0017 	strb.w	r0, [sp, #23]
    e218:	e7ff      	b.n	e21a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x38>
    e21a:	e015      	b.n	e248 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
    e21c:	9801      	ldr	r0, [sp, #4]
    e21e:	07c1      	lsls	r1, r0, #31
    e220:	2900      	cmp	r1, #0
    e222:	d107      	bne.n	e234 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x52>
    e224:	e7ff      	b.n	e226 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x44>
    e226:	9804      	ldr	r0, [sp, #16]
    e228:	9903      	ldr	r1, [sp, #12]
    e22a:	f00a f9ff 	bl	1862c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
    e22e:	f88d 0017 	strb.w	r0, [sp, #23]
    e232:	e007      	b.n	e244 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x62>
    e234:	9804      	ldr	r0, [sp, #16]
    e236:	9903      	ldr	r1, [sp, #12]
    e238:	f00a f8e8 	bl	1840c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
    e23c:	f88d 0017 	strb.w	r0, [sp, #23]
    e240:	e7ff      	b.n	e242 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x60>
    e242:	e000      	b.n	e246 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
    e244:	e7ff      	b.n	e246 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
    e246:	e7ff      	b.n	e248 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
    e248:	f89d 0017 	ldrb.w	r0, [sp, #23]
    e24c:	b008      	add	sp, #32
    e24e:	bd80      	pop	{r7, pc}

0000e250 <_ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE>:
    e250:	b580      	push	{r7, lr}
    e252:	b086      	sub	sp, #24
    e254:	f8dd c020 	ldr.w	ip, [sp, #32]
    e258:	9102      	str	r1, [sp, #8]
    e25a:	9203      	str	r2, [sp, #12]
    e25c:	9304      	str	r3, [sp, #16]
    e25e:	f8cd c014 	str.w	ip, [sp, #20]
    e262:	f04f 0e00 	mov.w	lr, #0
    e266:	f8cd e004 	str.w	lr, [sp, #4]
    e26a:	f8cd e000 	str.w	lr, [sp]
    e26e:	f8cd e000 	str.w	lr, [sp]
    e272:	6001      	str	r1, [r0, #0]
    e274:	6042      	str	r2, [r0, #4]
    e276:	9900      	ldr	r1, [sp, #0]
    e278:	9a01      	ldr	r2, [sp, #4]
    e27a:	6081      	str	r1, [r0, #8]
    e27c:	60c2      	str	r2, [r0, #12]
    e27e:	6103      	str	r3, [r0, #16]
    e280:	f8c0 c014 	str.w	ip, [r0, #20]
    e284:	b006      	add	sp, #24
    e286:	bd80      	pop	{r7, pc}

0000e288 <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E>:
    e288:	b580      	push	{r7, lr}
    e28a:	b084      	sub	sp, #16
    e28c:	9001      	str	r0, [sp, #4]
    e28e:	9102      	str	r1, [sp, #8]
    e290:	9801      	ldr	r0, [sp, #4]
    e292:	9902      	ldr	r1, [sp, #8]
    e294:	f7ff ff2b 	bl	e0ee <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE>
    e298:	9000      	str	r0, [sp, #0]
    e29a:	e7ff      	b.n	e29c <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E+0x14>
    e29c:	9800      	ldr	r0, [sp, #0]
    e29e:	b004      	add	sp, #16
    e2a0:	bd80      	pop	{r7, pc}

0000e2a2 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>:
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct Coord(pub CoordPart, pub CoordPart);

    impl Coord {
        /// Create a new coordinate with X and Y values
        pub fn new(x: CoordPart, y: CoordPart) -> Self {
    e2a2:	b084      	sub	sp, #16
    e2a4:	9002      	str	r0, [sp, #8]
    e2a6:	9103      	str	r1, [sp, #12]
            Coord(x, y)
    e2a8:	9000      	str	r0, [sp, #0]
    e2aa:	9101      	str	r1, [sp, #4]
        }
    e2ac:	9800      	ldr	r0, [sp, #0]
    e2ae:	9901      	ldr	r1, [sp, #4]
    e2b0:	b004      	add	sp, #16
    e2b2:	4770      	bx	lr

0000e2b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>:
    }

    impl Index<usize> for Coord {
        type Output = CoordPart;

        fn index(&self, idx: usize) -> &CoordPart {
    e2b4:	b580      	push	{r7, lr}
    e2b6:	b096      	sub	sp, #88	; 0x58
    e2b8:	9109      	str	r1, [sp, #36]	; 0x24
    e2ba:	9014      	str	r0, [sp, #80]	; 0x50
            match idx {
                0 => &self.0,
    e2bc:	9909      	ldr	r1, [sp, #36]	; 0x24
    e2be:	2900      	cmp	r1, #0
    e2c0:	9008      	str	r0, [sp, #32]
    e2c2:	9107      	str	r1, [sp, #28]
    e2c4:	d018      	beq.n	e2f8 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x44>
    e2c6:	e7ff      	b.n	e2c8 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x14>
    e2c8:	9807      	ldr	r0, [sp, #28]
    e2ca:	2801      	cmp	r0, #1
    e2cc:	d017      	beq.n	e2fe <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x4a>
    e2ce:	e7ff      	b.n	e2d0 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x1c>
                1 => &self.1,
                _ => panic!("Unreachable index {}", idx),
    e2d0:	f64e 5034 	movw	r0, #60724	; 0xed34
    e2d4:	f2c0 0001 	movt	r0, #1
    e2d8:	6801      	ldr	r1, [r0, #0]
    e2da:	a809      	add	r0, sp, #36	; 0x24
    e2dc:	9013      	str	r0, [sp, #76]	; 0x4c
    e2de:	9813      	ldr	r0, [sp, #76]	; 0x4c
    e2e0:	9015      	str	r0, [sp, #84]	; 0x54
    e2e2:	f248 7221 	movw	r2, #34593	; 0x8721
    e2e6:	f2c0 0201 	movt	r2, #1
    e2ea:	9106      	str	r1, [sp, #24]
    e2ec:	4611      	mov	r1, r2
    e2ee:	f7ff ff63 	bl	e1b8 <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E>
    e2f2:	9005      	str	r0, [sp, #20]
    e2f4:	9104      	str	r1, [sp, #16]
    e2f6:	e006      	b.n	e306 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x52>
                0 => &self.0,
    e2f8:	9808      	ldr	r0, [sp, #32]
    e2fa:	900a      	str	r0, [sp, #40]	; 0x28
            match idx {
    e2fc:	e020      	b.n	e340 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x8c>
                1 => &self.1,
    e2fe:	9808      	ldr	r0, [sp, #32]
    e300:	1d01      	adds	r1, r0, #4
    e302:	910a      	str	r1, [sp, #40]	; 0x28
            match idx {
    e304:	e01c      	b.n	e340 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x8c>
                _ => panic!("Unreachable index {}", idx),
    e306:	9805      	ldr	r0, [sp, #20]
    e308:	9011      	str	r0, [sp, #68]	; 0x44
    e30a:	9904      	ldr	r1, [sp, #16]
    e30c:	9112      	str	r1, [sp, #72]	; 0x48
    e30e:	466a      	mov	r2, sp
    e310:	2301      	movs	r3, #1
    e312:	6013      	str	r3, [r2, #0]
    e314:	a80b      	add	r0, sp, #44	; 0x2c
    e316:	aa11      	add	r2, sp, #68	; 0x44
    e318:	9906      	ldr	r1, [sp, #24]
    e31a:	9203      	str	r2, [sp, #12]
    e31c:	461a      	mov	r2, r3
    e31e:	9b03      	ldr	r3, [sp, #12]
    e320:	f7ff ff96 	bl	e250 <_ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE>
    e324:	e7ff      	b.n	e326 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x72>
    e326:	f64e 5038 	movw	r0, #60728	; 0xed38
    e32a:	f2c0 0001 	movt	r0, #1
    e32e:	f008 fb30 	bl	16992 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    e332:	9002      	str	r0, [sp, #8]
    e334:	e7ff      	b.n	e336 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x82>
    e336:	a80b      	add	r0, sp, #44	; 0x2c
    e338:	9902      	ldr	r1, [sp, #8]
    e33a:	f008 fb67 	bl	16a0c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    e33e:	defe      	udf	#254	; 0xfe
            match idx {
    e340:	980a      	ldr	r0, [sp, #40]	; 0x28
            }
        }
    e342:	b016      	add	sp, #88	; 0x58
    e344:	bd80      	pop	{r7, pc}

0000e346 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE>:
    /// #
    /// let coord = Coord::new(-5, 10);
    ///
    /// assert_eq!(coord.to_unsigned(), UnsignedCoord::new(0, 10));
    /// ```
    fn to_unsigned(self) -> UnsignedCoord {
    e346:	b580      	push	{r7, lr}
    e348:	b088      	sub	sp, #32
    e34a:	9006      	str	r0, [sp, #24]
    e34c:	9107      	str	r1, [sp, #28]
    e34e:	a806      	add	r0, sp, #24
    e350:	2100      	movs	r1, #0
        UnsignedCoord::new(self[0].max(0) as u32, self[1].max(0) as u32)
    e352:	f7ff ffaf 	bl	e2b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
    e356:	9005      	str	r0, [sp, #20]
    e358:	e7ff      	b.n	e35a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x14>
    e35a:	9805      	ldr	r0, [sp, #20]
    e35c:	6800      	ldr	r0, [r0, #0]
    e35e:	2100      	movs	r1, #0
    e360:	f7ff feba 	bl	e0d8 <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>
    e364:	9004      	str	r0, [sp, #16]
    e366:	e7ff      	b.n	e368 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x22>
    e368:	a806      	add	r0, sp, #24
    e36a:	2101      	movs	r1, #1
    e36c:	f7ff ffa2 	bl	e2b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
    e370:	9003      	str	r0, [sp, #12]
    e372:	e7ff      	b.n	e374 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x2e>
    e374:	9803      	ldr	r0, [sp, #12]
    e376:	6800      	ldr	r0, [r0, #0]
    e378:	2100      	movs	r1, #0
    e37a:	f7ff fead 	bl	e0d8 <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>
    e37e:	9002      	str	r0, [sp, #8]
    e380:	e7ff      	b.n	e382 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x3c>
    e382:	9804      	ldr	r0, [sp, #16]
    e384:	9902      	ldr	r1, [sp, #8]
    e386:	f000 f84e 	bl	e426 <_ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E>
    e38a:	9001      	str	r0, [sp, #4]
    e38c:	9100      	str	r1, [sp, #0]
    e38e:	e7ff      	b.n	e390 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x4a>
    }
    e390:	9801      	ldr	r0, [sp, #4]
    e392:	9900      	ldr	r1, [sp, #0]
    e394:	b008      	add	sp, #32
    e396:	bd80      	pop	{r7, pc}

0000e398 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>:
/// Take a tuple of 8 bit `(red, green, blue)` color values and convert them to a single 16 bit
/// color
///
/// The 2 or 3 (for the green channel) least significant bits are discarded
impl From<(u8, u8, u8)> for Rgb565 {
    fn from((r, g, b): (u8, u8, u8)) -> Self {
    e398:	b08b      	sub	sp, #44	; 0x2c
    e39a:	4601      	mov	r1, r0
    e39c:	f8ad 0020 	strh.w	r0, [sp, #32]
    e3a0:	0c00      	lsrs	r0, r0, #16
    e3a2:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    e3a6:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
    e3aa:	f88d 001e 	strb.w	r0, [sp, #30]
    e3ae:	f8bd 0020 	ldrh.w	r0, [sp, #32]
    e3b2:	f8ad 001c 	strh.w	r0, [sp, #28]
    e3b6:	f89d 001c 	ldrb.w	r0, [sp, #28]
    e3ba:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    e3be:	f89d 201d 	ldrb.w	r2, [sp, #29]
    e3c2:	4613      	mov	r3, r2
    e3c4:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
    e3c8:	f89d 201e 	ldrb.w	r2, [sp, #30]
    e3cc:	4694      	mov	ip, r2
    e3ce:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
        let value =
        // Red
        (((r as u16) << 8) & RED_MASK)
    e3d2:	0200      	lsls	r0, r0, #8
    e3d4:	9306      	str	r3, [sp, #24]
    e3d6:	f8cd c014 	str.w	ip, [sp, #20]
    e3da:	9004      	str	r0, [sp, #16]
    e3dc:	e7ff      	b.n	e3de <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x46>
    e3de:	9804      	ldr	r0, [sp, #16]
    e3e0:	f400 4178 	and.w	r1, r0, #63488	; 0xf800
        // Green
        | (((g as u16) << 3) & GREEN_MASK)
    e3e4:	9a06      	ldr	r2, [sp, #24]
    e3e6:	b2d3      	uxtb	r3, r2
    e3e8:	00db      	lsls	r3, r3, #3
    e3ea:	9103      	str	r1, [sp, #12]
    e3ec:	9302      	str	r3, [sp, #8]
    e3ee:	e7ff      	b.n	e3f0 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x58>
    e3f0:	9802      	ldr	r0, [sp, #8]
    e3f2:	f400 61fc 	and.w	r1, r0, #2016	; 0x7e0
        (((r as u16) << 8) & RED_MASK)
    e3f6:	9a03      	ldr	r2, [sp, #12]
    e3f8:	4311      	orrs	r1, r2
        // Blue
        | ((b as u16) >> 3 & BLUE_MASK);
    e3fa:	9b05      	ldr	r3, [sp, #20]
    e3fc:	fa5f fc83 	uxtb.w	ip, r3
    e400:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
    e404:	9101      	str	r1, [sp, #4]
    e406:	f8cd c000 	str.w	ip, [sp]
    e40a:	e7ff      	b.n	e40c <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x74>
    e40c:	9800      	ldr	r0, [sp, #0]
    e40e:	f000 011f 	and.w	r1, r0, #31
        (((r as u16) << 8) & RED_MASK)
    e412:	9a01      	ldr	r2, [sp, #4]
    e414:	4311      	orrs	r1, r2
    e416:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a

        Self(value)
    e41a:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
    }
    e41e:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
    e422:	b00b      	add	sp, #44	; 0x2c
    e424:	4770      	bx	lr

0000e426 <_ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E>:
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct UnsignedCoord(pub UnsignedCoordPart, pub UnsignedCoordPart);

    impl UnsignedCoord {
        /// Create a new coordinate with X and Y values
        pub fn new(x: UnsignedCoordPart, y: UnsignedCoordPart) -> Self {
    e426:	b084      	sub	sp, #16
    e428:	9002      	str	r0, [sp, #8]
    e42a:	9103      	str	r1, [sp, #12]
            UnsignedCoord(x, y)
    e42c:	9000      	str	r0, [sp, #0]
    e42e:	9101      	str	r1, [sp, #4]
        }
    e430:	9800      	ldr	r0, [sp, #0]
    e432:	9901      	ldr	r1, [sp, #4]
    e434:	b004      	add	sp, #16
    e436:	4770      	bx	lr

0000e438 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>:
    e438:	b580      	push	{r7, lr}
    e43a:	b088      	sub	sp, #32
    e43c:	9005      	str	r0, [sp, #20]
    e43e:	9106      	str	r1, [sp, #24]
    e440:	9003      	str	r0, [sp, #12]
    e442:	4608      	mov	r0, r1
    e444:	f000 fa21 	bl	e88a <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>
    e448:	9004      	str	r0, [sp, #16]
    e44a:	e7ff      	b.n	e44c <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x14>
    e44c:	9804      	ldr	r0, [sp, #16]
    e44e:	9007      	str	r0, [sp, #28]
    e450:	9903      	ldr	r1, [sp, #12]
    e452:	680a      	ldr	r2, [r1, #0]
    e454:	9002      	str	r0, [sp, #8]
    e456:	4610      	mov	r0, r2
    e458:	9902      	ldr	r1, [sp, #8]
    e45a:	f000 f837 	bl	e4cc <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>
    e45e:	9001      	str	r0, [sp, #4]
    e460:	9100      	str	r1, [sp, #0]
    e462:	e7ff      	b.n	e464 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x2c>
    e464:	9801      	ldr	r0, [sp, #4]
    e466:	9900      	ldr	r1, [sp, #0]
    e468:	b008      	add	sp, #32
    e46a:	bd80      	pop	{r7, pc}

0000e46c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>:
    e46c:	b580      	push	{r7, lr}
    e46e:	b084      	sub	sp, #16
    e470:	9001      	str	r0, [sp, #4]
    e472:	9102      	str	r1, [sp, #8]
    e474:	9203      	str	r2, [sp, #12]
    e476:	9000      	str	r0, [sp, #0]
    e478:	4608      	mov	r0, r1
    e47a:	9900      	ldr	r1, [sp, #0]
    e47c:	f00e fe64 	bl	1d148 <__aeabi_memcpy>
    e480:	e7ff      	b.n	e482 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE+0x16>
    e482:	b004      	add	sp, #16
    e484:	bd80      	pop	{r7, pc}

0000e486 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>:
    e486:	b580      	push	{r7, lr}
    e488:	b084      	sub	sp, #16
    e48a:	9001      	str	r0, [sp, #4]
    e48c:	9102      	str	r1, [sp, #8]
    e48e:	9203      	str	r2, [sp, #12]
    e490:	0092      	lsls	r2, r2, #2
    e492:	9000      	str	r0, [sp, #0]
    e494:	4608      	mov	r0, r1
    e496:	9900      	ldr	r1, [sp, #0]
    e498:	f00e fe56 	bl	1d148 <__aeabi_memcpy>
    e49c:	e7ff      	b.n	e49e <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E+0x18>
    e49e:	b004      	add	sp, #16
    e4a0:	bd80      	pop	{r7, pc}

0000e4a2 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>:
    e4a2:	b082      	sub	sp, #8
    e4a4:	9000      	str	r0, [sp, #0]
    e4a6:	9101      	str	r1, [sp, #4]
    e4a8:	6800      	ldr	r0, [r0, #0]
    e4aa:	6809      	ldr	r1, [r1, #0]
    e4ac:	2200      	movs	r2, #0
    e4ae:	4288      	cmp	r0, r1
    e4b0:	bf38      	it	cc
    e4b2:	2201      	movcc	r2, #1
    e4b4:	4610      	mov	r0, r2
    e4b6:	b002      	add	sp, #8
    e4b8:	4770      	bx	lr

0000e4ba <_ZN4core3mem4swap17hc4afbec7b5ffb125E>:
    e4ba:	b580      	push	{r7, lr}
    e4bc:	b082      	sub	sp, #8
    e4be:	9000      	str	r0, [sp, #0]
    e4c0:	9101      	str	r1, [sp, #4]
    e4c2:	f000 f85f 	bl	e584 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>
    e4c6:	e7ff      	b.n	e4c8 <_ZN4core3mem4swap17hc4afbec7b5ffb125E+0xe>
    e4c8:	b002      	add	sp, #8
    e4ca:	bd80      	pop	{r7, pc}

0000e4cc <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>:
    e4cc:	b580      	push	{r7, lr}
    e4ce:	b088      	sub	sp, #32
    e4d0:	9004      	str	r0, [sp, #16]
    e4d2:	9105      	str	r1, [sp, #20]
    e4d4:	f000 f819 	bl	e50a <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>
    e4d8:	9001      	str	r0, [sp, #4]
    e4da:	9100      	str	r1, [sp, #0]
    e4dc:	e7ff      	b.n	e4de <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x12>
    e4de:	9801      	ldr	r0, [sp, #4]
    e4e0:	9006      	str	r0, [sp, #24]
    e4e2:	9900      	ldr	r1, [sp, #0]
    e4e4:	f001 0201 	and.w	r2, r1, #1
    e4e8:	f88d 201f 	strb.w	r2, [sp, #31]
    e4ec:	2a00      	cmp	r2, #0
    e4ee:	d105      	bne.n	e4fc <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x30>
    e4f0:	e7ff      	b.n	e4f2 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x26>
    e4f2:	9801      	ldr	r0, [sp, #4]
    e4f4:	9003      	str	r0, [sp, #12]
    e4f6:	2101      	movs	r1, #1
    e4f8:	9102      	str	r1, [sp, #8]
    e4fa:	e002      	b.n	e502 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
    e4fc:	2000      	movs	r0, #0
    e4fe:	9002      	str	r0, [sp, #8]
    e500:	e7ff      	b.n	e502 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
    e502:	9802      	ldr	r0, [sp, #8]
    e504:	9903      	ldr	r1, [sp, #12]
    e506:	b008      	add	sp, #32
    e508:	bd80      	pop	{r7, pc}

0000e50a <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>:
    e50a:	b08a      	sub	sp, #40	; 0x28
    e50c:	9004      	str	r0, [sp, #16]
    e50e:	9105      	str	r1, [sp, #20]
    e510:	1840      	adds	r0, r0, r1
    e512:	f04f 0100 	mov.w	r1, #0
    e516:	f141 0100 	adc.w	r1, r1, #0
    e51a:	9006      	str	r0, [sp, #24]
    e51c:	f88d 101c 	strb.w	r1, [sp, #28]
    e520:	9806      	ldr	r0, [sp, #24]
    e522:	f89d 101c 	ldrb.w	r1, [sp, #28]
    e526:	9001      	str	r0, [sp, #4]
    e528:	9100      	str	r1, [sp, #0]
    e52a:	e7ff      	b.n	e52c <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE+0x22>
    e52c:	9801      	ldr	r0, [sp, #4]
    e52e:	9008      	str	r0, [sp, #32]
    e530:	9900      	ldr	r1, [sp, #0]
    e532:	f001 0201 	and.w	r2, r1, #1
    e536:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    e53a:	9002      	str	r0, [sp, #8]
    e53c:	f88d 200c 	strb.w	r2, [sp, #12]
    e540:	9802      	ldr	r0, [sp, #8]
    e542:	f89d 100c 	ldrb.w	r1, [sp, #12]
    e546:	b00a      	add	sp, #40	; 0x28
    e548:	4770      	bx	lr

0000e54a <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>:
    e54a:	b580      	push	{r7, lr}
    e54c:	b08c      	sub	sp, #48	; 0x30
    e54e:	9005      	str	r0, [sp, #20]
    e550:	9106      	str	r1, [sp, #24]
    e552:	9207      	str	r2, [sp, #28]
    e554:	4603      	mov	r3, r0
    e556:	9008      	str	r0, [sp, #32]
    e558:	4608      	mov	r0, r1
    e55a:	9109      	str	r1, [sp, #36]	; 0x24
    e55c:	2104      	movs	r1, #4
    e55e:	910b      	str	r1, [sp, #44]	; 0x2c
    e560:	990b      	ldr	r1, [sp, #44]	; 0x2c
    e562:	9204      	str	r2, [sp, #16]
    e564:	9303      	str	r3, [sp, #12]
    e566:	9002      	str	r0, [sp, #8]
    e568:	9101      	str	r1, [sp, #4]
    e56a:	e7ff      	b.n	e56c <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x22>
    e56c:	9801      	ldr	r0, [sp, #4]
    e56e:	9904      	ldr	r1, [sp, #16]
    e570:	fb00 f201 	mul.w	r2, r0, r1
    e574:	920a      	str	r2, [sp, #40]	; 0x28
    e576:	9803      	ldr	r0, [sp, #12]
    e578:	9902      	ldr	r1, [sp, #8]
    e57a:	f000 f82e 	bl	e5da <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>
    e57e:	e7ff      	b.n	e580 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x36>
    e580:	b00c      	add	sp, #48	; 0x30
    e582:	bd80      	pop	{r7, pc}

0000e584 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>:
    e584:	b580      	push	{r7, lr}
    e586:	b088      	sub	sp, #32
    e588:	9004      	str	r0, [sp, #16]
    e58a:	9105      	str	r1, [sp, #20]
    e58c:	2204      	movs	r2, #4
    e58e:	9207      	str	r2, [sp, #28]
    e590:	9a07      	ldr	r2, [sp, #28]
    e592:	9103      	str	r1, [sp, #12]
    e594:	9002      	str	r0, [sp, #8]
    e596:	9201      	str	r2, [sp, #4]
    e598:	e7ff      	b.n	e59a <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x16>
    e59a:	9801      	ldr	r0, [sp, #4]
    e59c:	2820      	cmp	r0, #32
    e59e:	d306      	bcc.n	e5ae <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x2a>
    e5a0:	e7ff      	b.n	e5a2 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x1e>
    e5a2:	2201      	movs	r2, #1
    e5a4:	9802      	ldr	r0, [sp, #8]
    e5a6:	9903      	ldr	r1, [sp, #12]
    e5a8:	f7ff ffcf 	bl	e54a <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>
    e5ac:	e012      	b.n	e5d4 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x50>
    e5ae:	9802      	ldr	r0, [sp, #8]
    e5b0:	f000 f8a1 	bl	e6f6 <_ZN4core3ptr4read17h2038b0ecb0975c4fE>
    e5b4:	4601      	mov	r1, r0
    e5b6:	9006      	str	r0, [sp, #24]
    e5b8:	9100      	str	r1, [sp, #0]
    e5ba:	e7ff      	b.n	e5bc <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x38>
    e5bc:	2201      	movs	r2, #1
    e5be:	9803      	ldr	r0, [sp, #12]
    e5c0:	9902      	ldr	r1, [sp, #8]
    e5c2:	f7ff ff60 	bl	e486 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
    e5c6:	e7ff      	b.n	e5c8 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x44>
    e5c8:	9803      	ldr	r0, [sp, #12]
    e5ca:	9900      	ldr	r1, [sp, #0]
    e5cc:	f000 f8ac 	bl	e728 <_ZN4core3ptr5write17h4a80332de2cee3d3E>
    e5d0:	e7ff      	b.n	e5d2 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x4e>
    e5d2:	e000      	b.n	e5d6 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
    e5d4:	e7ff      	b.n	e5d6 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
    e5d6:	b008      	add	sp, #32
    e5d8:	bd80      	pop	{r7, pc}

0000e5da <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>:
    e5da:	b5d0      	push	{r4, r6, r7, lr}
    e5dc:	af02      	add	r7, sp, #8
    e5de:	b0b4      	sub	sp, #208	; 0xd0
    e5e0:	466c      	mov	r4, sp
    e5e2:	f36f 0404 	bfc	r4, #0, #5
    e5e6:	46a5      	mov	sp, r4
    e5e8:	9024      	str	r0, [sp, #144]	; 0x90
    e5ea:	9125      	str	r1, [sp, #148]	; 0x94
    e5ec:	9226      	str	r2, [sp, #152]	; 0x98
    e5ee:	2320      	movs	r3, #32
    e5f0:	932f      	str	r3, [sp, #188]	; 0xbc
    e5f2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    e5f4:	9327      	str	r3, [sp, #156]	; 0x9c
    e5f6:	920e      	str	r2, [sp, #56]	; 0x38
    e5f8:	910d      	str	r1, [sp, #52]	; 0x34
    e5fa:	900c      	str	r0, [sp, #48]	; 0x30
    e5fc:	930b      	str	r3, [sp, #44]	; 0x2c
    e5fe:	e7ff      	b.n	e600 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x26>
    e600:	2000      	movs	r0, #0
    e602:	900f      	str	r0, [sp, #60]	; 0x3c
    e604:	e7ff      	b.n	e606 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
    e606:	980f      	ldr	r0, [sp, #60]	; 0x3c
    e608:	990b      	ldr	r1, [sp, #44]	; 0x2c
    e60a:	4408      	add	r0, r1
    e60c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    e60e:	4290      	cmp	r0, r2
    e610:	d905      	bls.n	e61e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x44>
    e612:	e7ff      	b.n	e614 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x3a>
    e614:	980f      	ldr	r0, [sp, #60]	; 0x3c
    e616:	990e      	ldr	r1, [sp, #56]	; 0x38
    e618:	4288      	cmp	r0, r1
    e61a:	d334      	bcc.n	e686 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xac>
    e61c:	e067      	b.n	e6ee <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
    e61e:	e7ff      	b.n	e620 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x46>
    e620:	a810      	add	r0, sp, #64	; 0x40
    e622:	9030      	str	r0, [sp, #192]	; 0xc0
    e624:	9031      	str	r0, [sp, #196]	; 0xc4
    e626:	e7ff      	b.n	e628 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x4e>
    e628:	a810      	add	r0, sp, #64	; 0x40
    e62a:	4601      	mov	r1, r0
    e62c:	9028      	str	r0, [sp, #160]	; 0xa0
    e62e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    e630:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e632:	900a      	str	r0, [sp, #40]	; 0x28
    e634:	4610      	mov	r0, r2
    e636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e638:	9109      	str	r1, [sp, #36]	; 0x24
    e63a:	4619      	mov	r1, r3
    e63c:	f000 f87a 	bl	e734 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    e640:	4601      	mov	r1, r0
    e642:	9029      	str	r0, [sp, #164]	; 0xa4
    e644:	9108      	str	r1, [sp, #32]
    e646:	e7ff      	b.n	e648 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x6e>
    e648:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e64a:	980d      	ldr	r0, [sp, #52]	; 0x34
    e64c:	f000 f872 	bl	e734 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    e650:	4601      	mov	r1, r0
    e652:	902a      	str	r0, [sp, #168]	; 0xa8
    e654:	9107      	str	r1, [sp, #28]
    e656:	e7ff      	b.n	e658 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x7e>
    e658:	9808      	ldr	r0, [sp, #32]
    e65a:	9909      	ldr	r1, [sp, #36]	; 0x24
    e65c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e65e:	f7ff ff05 	bl	e46c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    e662:	e7ff      	b.n	e664 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x8a>
    e664:	9807      	ldr	r0, [sp, #28]
    e666:	9908      	ldr	r1, [sp, #32]
    e668:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e66a:	f7ff feff 	bl	e46c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    e66e:	e7ff      	b.n	e670 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x96>
    e670:	9809      	ldr	r0, [sp, #36]	; 0x24
    e672:	9907      	ldr	r1, [sp, #28]
    e674:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e676:	f7ff fef9 	bl	e46c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    e67a:	e7ff      	b.n	e67c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xa2>
    e67c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    e67e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    e680:	4408      	add	r0, r1
    e682:	900f      	str	r0, [sp, #60]	; 0x3c
    e684:	e7bf      	b.n	e606 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
    e686:	e7ff      	b.n	e688 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xae>
    e688:	980f      	ldr	r0, [sp, #60]	; 0x3c
    e68a:	990e      	ldr	r1, [sp, #56]	; 0x38
    e68c:	1a08      	subs	r0, r1, r0
    e68e:	4602      	mov	r2, r0
    e690:	902b      	str	r0, [sp, #172]	; 0xac
    e692:	a81c      	add	r0, sp, #112	; 0x70
    e694:	9032      	str	r0, [sp, #200]	; 0xc8
    e696:	9033      	str	r0, [sp, #204]	; 0xcc
    e698:	9206      	str	r2, [sp, #24]
    e69a:	9005      	str	r0, [sp, #20]
    e69c:	e7ff      	b.n	e69e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xc4>
    e69e:	9805      	ldr	r0, [sp, #20]
    e6a0:	9905      	ldr	r1, [sp, #20]
    e6a2:	912c      	str	r1, [sp, #176]	; 0xb0
    e6a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e6a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e6a8:	9004      	str	r0, [sp, #16]
    e6aa:	4610      	mov	r0, r2
    e6ac:	f000 f842 	bl	e734 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    e6b0:	4601      	mov	r1, r0
    e6b2:	902d      	str	r0, [sp, #180]	; 0xb4
    e6b4:	9103      	str	r1, [sp, #12]
    e6b6:	e7ff      	b.n	e6b8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xde>
    e6b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e6ba:	980d      	ldr	r0, [sp, #52]	; 0x34
    e6bc:	f000 f83a 	bl	e734 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    e6c0:	4601      	mov	r1, r0
    e6c2:	902e      	str	r0, [sp, #184]	; 0xb8
    e6c4:	9102      	str	r1, [sp, #8]
    e6c6:	e7ff      	b.n	e6c8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xee>
    e6c8:	9803      	ldr	r0, [sp, #12]
    e6ca:	9904      	ldr	r1, [sp, #16]
    e6cc:	9a06      	ldr	r2, [sp, #24]
    e6ce:	f7ff fecd 	bl	e46c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    e6d2:	e7ff      	b.n	e6d4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xfa>
    e6d4:	9802      	ldr	r0, [sp, #8]
    e6d6:	9903      	ldr	r1, [sp, #12]
    e6d8:	9a06      	ldr	r2, [sp, #24]
    e6da:	f7ff fec7 	bl	e46c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    e6de:	e7ff      	b.n	e6e0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x106>
    e6e0:	9804      	ldr	r0, [sp, #16]
    e6e2:	9902      	ldr	r1, [sp, #8]
    e6e4:	9a06      	ldr	r2, [sp, #24]
    e6e6:	f7ff fec1 	bl	e46c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    e6ea:	e7ff      	b.n	e6ec <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x112>
    e6ec:	e7ff      	b.n	e6ee <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
    e6ee:	f1a7 0408 	sub.w	r4, r7, #8
    e6f2:	46a5      	mov	sp, r4
    e6f4:	bdd0      	pop	{r4, r6, r7, pc}

0000e6f6 <_ZN4core3ptr4read17h2038b0ecb0975c4fE>:
    e6f6:	b580      	push	{r7, lr}
    e6f8:	b08a      	sub	sp, #40	; 0x28
    e6fa:	9004      	str	r0, [sp, #16]
    e6fc:	9905      	ldr	r1, [sp, #20]
    e6fe:	9103      	str	r1, [sp, #12]
    e700:	9002      	str	r0, [sp, #8]
    e702:	e7ff      	b.n	e704 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0xe>
    e704:	a803      	add	r0, sp, #12
    e706:	9008      	str	r0, [sp, #32]
    e708:	9009      	str	r0, [sp, #36]	; 0x24
    e70a:	e7ff      	b.n	e70c <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x16>
    e70c:	a903      	add	r1, sp, #12
    e70e:	2201      	movs	r2, #1
    e710:	9802      	ldr	r0, [sp, #8]
    e712:	f7ff feb8 	bl	e486 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
    e716:	e7ff      	b.n	e718 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x22>
    e718:	9803      	ldr	r0, [sp, #12]
    e71a:	9006      	str	r0, [sp, #24]
    e71c:	9007      	str	r0, [sp, #28]
    e71e:	9001      	str	r0, [sp, #4]
    e720:	e7ff      	b.n	e722 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x2c>
    e722:	9801      	ldr	r0, [sp, #4]
    e724:	b00a      	add	sp, #40	; 0x28
    e726:	bd80      	pop	{r7, pc}

0000e728 <_ZN4core3ptr5write17h4a80332de2cee3d3E>:
    e728:	b082      	sub	sp, #8
    e72a:	9000      	str	r0, [sp, #0]
    e72c:	9101      	str	r1, [sp, #4]
    e72e:	6001      	str	r1, [r0, #0]
    e730:	b002      	add	sp, #8
    e732:	4770      	bx	lr

0000e734 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>:
    e734:	b580      	push	{r7, lr}
    e736:	b084      	sub	sp, #16
    e738:	9002      	str	r0, [sp, #8]
    e73a:	9103      	str	r1, [sp, #12]
    e73c:	f000 f805 	bl	e74a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>
    e740:	9001      	str	r0, [sp, #4]
    e742:	e7ff      	b.n	e744 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E+0x10>
    e744:	9801      	ldr	r0, [sp, #4]
    e746:	b004      	add	sp, #16
    e748:	bd80      	pop	{r7, pc}

0000e74a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>:
    e74a:	b084      	sub	sp, #16
    e74c:	9001      	str	r0, [sp, #4]
    e74e:	9102      	str	r1, [sp, #8]
    e750:	4408      	add	r0, r1
    e752:	9003      	str	r0, [sp, #12]
    e754:	9803      	ldr	r0, [sp, #12]
    e756:	9000      	str	r0, [sp, #0]
    e758:	e7ff      	b.n	e75a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE+0x10>
    e75a:	9800      	ldr	r0, [sp, #0]
    e75c:	b004      	add	sp, #16
    e75e:	4770      	bx	lr

0000e760 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>:
    e760:	b580      	push	{r7, lr}
    e762:	b084      	sub	sp, #16
    e764:	9002      	str	r0, [sp, #8]
    e766:	9103      	str	r1, [sp, #12]
    e768:	f000 f805 	bl	e776 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>
    e76c:	9001      	str	r0, [sp, #4]
    e76e:	e7ff      	b.n	e770 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE+0x10>
    e770:	9801      	ldr	r0, [sp, #4]
    e772:	b004      	add	sp, #16
    e774:	bd80      	pop	{r7, pc}

0000e776 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>:
    e776:	b084      	sub	sp, #16
    e778:	9001      	str	r0, [sp, #4]
    e77a:	9102      	str	r1, [sp, #8]
    e77c:	4408      	add	r0, r1
    e77e:	9003      	str	r0, [sp, #12]
    e780:	9803      	ldr	r0, [sp, #12]
    e782:	9000      	str	r0, [sp, #0]
    e784:	e7ff      	b.n	e786 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE+0x10>
    e786:	9800      	ldr	r0, [sp, #0]
    e788:	b004      	add	sp, #16
    e78a:	4770      	bx	lr

0000e78c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>:
    e78c:	b580      	push	{r7, lr}
    e78e:	b08a      	sub	sp, #40	; 0x28
    e790:	9009      	str	r0, [sp, #36]	; 0x24
    e792:	2100      	movs	r1, #0
    e794:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
    e798:	1d01      	adds	r1, r0, #4
    e79a:	9002      	str	r0, [sp, #8]
    e79c:	f7ff fe81 	bl	e4a2 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>
    e7a0:	9001      	str	r0, [sp, #4]
    e7a2:	e7ff      	b.n	e7a4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x18>
    e7a4:	9801      	ldr	r0, [sp, #4]
    e7a6:	07c1      	lsls	r1, r0, #31
    e7a8:	2900      	cmp	r1, #0
    e7aa:	d103      	bne.n	e7b4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x28>
    e7ac:	e7ff      	b.n	e7ae <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x22>
    e7ae:	2000      	movs	r0, #0
    e7b0:	9003      	str	r0, [sp, #12]
    e7b2:	e021      	b.n	e7f8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
    e7b4:	2001      	movs	r0, #1
    e7b6:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    e7ba:	9902      	ldr	r1, [sp, #8]
    e7bc:	9000      	str	r0, [sp, #0]
    e7be:	4608      	mov	r0, r1
    e7c0:	9900      	ldr	r1, [sp, #0]
    e7c2:	f7ff fe39 	bl	e438 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>
    e7c6:	9106      	str	r1, [sp, #24]
    e7c8:	9005      	str	r0, [sp, #20]
    e7ca:	e7ff      	b.n	e7cc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x40>
    e7cc:	9805      	ldr	r0, [sp, #20]
    e7ce:	2801      	cmp	r0, #1
    e7d0:	d003      	beq.n	e7da <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x4e>
    e7d2:	e7ff      	b.n	e7d4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x48>
    e7d4:	2000      	movs	r0, #0
    e7d6:	9003      	str	r0, [sp, #12]
    e7d8:	e021      	b.n	e81e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
    e7da:	2000      	movs	r0, #0
    e7dc:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    e7e0:	9806      	ldr	r0, [sp, #24]
    e7e2:	9007      	str	r0, [sp, #28]
    e7e4:	a807      	add	r0, sp, #28
    e7e6:	9902      	ldr	r1, [sp, #8]
    e7e8:	f7ff fe67 	bl	e4ba <_ZN4core3mem4swap17hc4afbec7b5ffb125E>
    e7ec:	e7ff      	b.n	e7ee <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x62>
    e7ee:	9807      	ldr	r0, [sp, #28]
    e7f0:	9004      	str	r0, [sp, #16]
    e7f2:	2001      	movs	r0, #1
    e7f4:	9003      	str	r0, [sp, #12]
    e7f6:	e012      	b.n	e81e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
    e7f8:	9803      	ldr	r0, [sp, #12]
    e7fa:	9904      	ldr	r1, [sp, #16]
    e7fc:	b00a      	add	sp, #40	; 0x28
    e7fe:	bd80      	pop	{r7, pc}
    e800:	2000      	movs	r0, #0
    e802:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    e806:	e7f7      	b.n	e7f8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
    e808:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    e80c:	07c0      	lsls	r0, r0, #31
    e80e:	2800      	cmp	r0, #0
    e810:	d0f6      	beq.n	e800 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
    e812:	e7ff      	b.n	e814 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x88>
    e814:	2000      	movs	r0, #0
    e816:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    e81a:	e7f1      	b.n	e800 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
    e81c:	e7f0      	b.n	e800 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
    e81e:	9805      	ldr	r0, [sp, #20]
    e820:	2801      	cmp	r0, #1
    e822:	d0f1      	beq.n	e808 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x7c>
    e824:	e7fa      	b.n	e81c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x90>

0000e826 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>:
    e826:	b082      	sub	sp, #8
    e828:	9000      	str	r0, [sp, #0]
    e82a:	9101      	str	r1, [sp, #4]
    e82c:	b002      	add	sp, #8
    e82e:	4770      	bx	lr

0000e830 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>:
    e830:	b580      	push	{r7, lr}
    e832:	b086      	sub	sp, #24
    e834:	9003      	str	r0, [sp, #12]
    e836:	9104      	str	r1, [sp, #16]
    e838:	9205      	str	r2, [sp, #20]
    e83a:	9002      	str	r0, [sp, #8]
    e83c:	4610      	mov	r0, r2
    e83e:	9a02      	ldr	r2, [sp, #8]
    e840:	9101      	str	r1, [sp, #4]
    e842:	4611      	mov	r1, r2
    e844:	9a01      	ldr	r2, [sp, #4]
    e846:	f000 f846 	bl	e8d6 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>
    e84a:	9000      	str	r0, [sp, #0]
    e84c:	e7ff      	b.n	e84e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E+0x1e>
    e84e:	9800      	ldr	r0, [sp, #0]
    e850:	b006      	add	sp, #24
    e852:	bd80      	pop	{r7, pc}

0000e854 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>:
    e854:	b084      	sub	sp, #16
    e856:	9002      	str	r0, [sp, #8]
    e858:	9103      	str	r1, [sp, #12]
    e85a:	9000      	str	r0, [sp, #0]
    e85c:	9101      	str	r1, [sp, #4]
    e85e:	9801      	ldr	r0, [sp, #4]
    e860:	b004      	add	sp, #16
    e862:	4770      	bx	lr

0000e864 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>:
    e864:	b082      	sub	sp, #8
    e866:	9000      	str	r0, [sp, #0]
    e868:	9101      	str	r1, [sp, #4]
    e86a:	b002      	add	sp, #8
    e86c:	4770      	bx	lr

0000e86e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>:
    e86e:	b081      	sub	sp, #4
    e870:	9000      	str	r0, [sp, #0]
    e872:	b001      	add	sp, #4
    e874:	4770      	bx	lr

0000e876 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>:
    e876:	b580      	push	{r7, lr}
    e878:	b082      	sub	sp, #8
    e87a:	9001      	str	r0, [sp, #4]
    e87c:	f7ff fff7 	bl	e86e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>
    e880:	9000      	str	r0, [sp, #0]
    e882:	e7ff      	b.n	e884 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE+0xe>
    e884:	9800      	ldr	r0, [sp, #0]
    e886:	b002      	add	sp, #8
    e888:	bd80      	pop	{r7, pc}

0000e88a <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>:
    e88a:	b580      	push	{r7, lr}
    e88c:	b084      	sub	sp, #16
    e88e:	9003      	str	r0, [sp, #12]
    e890:	f7ff fff1 	bl	e876 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>
    e894:	9001      	str	r0, [sp, #4]
    e896:	e7ff      	b.n	e898 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E+0xe>
    e898:	9801      	ldr	r0, [sp, #4]
    e89a:	9002      	str	r0, [sp, #8]
    e89c:	9802      	ldr	r0, [sp, #8]
    e89e:	b004      	add	sp, #16
    e8a0:	bd80      	pop	{r7, pc}

0000e8a2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>:
    e8a2:	b082      	sub	sp, #8
    e8a4:	9000      	str	r0, [sp, #0]
    e8a6:	9101      	str	r1, [sp, #4]
    e8a8:	b002      	add	sp, #8
    e8aa:	4770      	bx	lr

0000e8ac <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>:
    e8ac:	b580      	push	{r7, lr}
    e8ae:	b086      	sub	sp, #24
    e8b0:	9003      	str	r0, [sp, #12]
    e8b2:	9104      	str	r1, [sp, #16]
    e8b4:	9205      	str	r2, [sp, #20]
    e8b6:	9002      	str	r0, [sp, #8]
    e8b8:	4608      	mov	r0, r1
    e8ba:	4611      	mov	r1, r2
    e8bc:	f7ff ffd2 	bl	e864 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    e8c0:	9001      	str	r0, [sp, #4]
    e8c2:	e7ff      	b.n	e8c4 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x18>
    e8c4:	9801      	ldr	r0, [sp, #4]
    e8c6:	9902      	ldr	r1, [sp, #8]
    e8c8:	f7ff ff4a 	bl	e760 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>
    e8cc:	9000      	str	r0, [sp, #0]
    e8ce:	e7ff      	b.n	e8d0 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x24>
    e8d0:	9800      	ldr	r0, [sp, #0]
    e8d2:	b006      	add	sp, #24
    e8d4:	bd80      	pop	{r7, pc}

0000e8d6 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>:
    e8d6:	b580      	push	{r7, lr}
    e8d8:	b086      	sub	sp, #24
    e8da:	9003      	str	r0, [sp, #12]
    e8dc:	9104      	str	r1, [sp, #16]
    e8de:	9205      	str	r2, [sp, #20]
    e8e0:	9002      	str	r0, [sp, #8]
    e8e2:	4608      	mov	r0, r1
    e8e4:	4611      	mov	r1, r2
    e8e6:	f7ff ff9e 	bl	e826 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    e8ea:	9001      	str	r0, [sp, #4]
    e8ec:	e7ff      	b.n	e8ee <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x18>
    e8ee:	9801      	ldr	r0, [sp, #4]
    e8f0:	9902      	ldr	r1, [sp, #8]
    e8f2:	f7ff ff1f 	bl	e734 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    e8f6:	9000      	str	r0, [sp, #0]
    e8f8:	e7ff      	b.n	e8fa <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x24>
    e8fa:	9800      	ldr	r0, [sp, #0]
    e8fc:	b006      	add	sp, #24
    e8fe:	bd80      	pop	{r7, pc}

0000e900 <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>:
    e900:	b580      	push	{r7, lr}
    e902:	b086      	sub	sp, #24
    e904:	f8dd c020 	ldr.w	ip, [sp, #32]
    e908:	9102      	str	r1, [sp, #8]
    e90a:	9203      	str	r2, [sp, #12]
    e90c:	9304      	str	r3, [sp, #16]
    e90e:	f8cd c014 	str.w	ip, [sp, #20]
    e912:	f04f 0e00 	mov.w	lr, #0
    e916:	f8cd e004 	str.w	lr, [sp, #4]
    e91a:	f8cd e000 	str.w	lr, [sp]
    e91e:	f8cd e000 	str.w	lr, [sp]
    e922:	6001      	str	r1, [r0, #0]
    e924:	6042      	str	r2, [r0, #4]
    e926:	9900      	ldr	r1, [sp, #0]
    e928:	9a01      	ldr	r2, [sp, #4]
    e92a:	6081      	str	r1, [r0, #8]
    e92c:	60c2      	str	r2, [r0, #12]
    e92e:	6103      	str	r3, [r0, #16]
    e930:	f8c0 c014 	str.w	ip, [r0, #20]
    e934:	b006      	add	sp, #24
    e936:	bd80      	pop	{r7, pc}

0000e938 <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>:
    e938:	b580      	push	{r7, lr}
    e93a:	b084      	sub	sp, #16
    e93c:	9101      	str	r1, [sp, #4]
    e93e:	9202      	str	r2, [sp, #8]
    e940:	9901      	ldr	r1, [sp, #4]
    e942:	9a02      	ldr	r2, [sp, #8]
    e944:	f000 fa92 	bl	ee6c <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>
    e948:	e7ff      	b.n	e94a <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE+0x12>
    e94a:	b004      	add	sp, #16
    e94c:	bd80      	pop	{r7, pc}

0000e94e <_ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE>:
    e94e:	b081      	sub	sp, #4
    e950:	9000      	str	r0, [sp, #0]
    e952:	b001      	add	sp, #4
    e954:	4770      	bx	lr

0000e956 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>:
    e956:	b081      	sub	sp, #4
    e958:	9000      	str	r0, [sp, #0]
    e95a:	b001      	add	sp, #4
    e95c:	4770      	bx	lr

0000e95e <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>:
    e95e:	b580      	push	{r7, lr}
    e960:	b086      	sub	sp, #24
    e962:	460a      	mov	r2, r1
    e964:	9004      	str	r0, [sp, #16]
    e966:	f88d 1017 	strb.w	r1, [sp, #23]
    e96a:	9203      	str	r2, [sp, #12]
    e96c:	f7ff fff3 	bl	e956 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
    e970:	9002      	str	r0, [sp, #8]
    e972:	e7ff      	b.n	e974 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x16>
    e974:	9802      	ldr	r0, [sp, #8]
    e976:	9903      	ldr	r1, [sp, #12]
    e978:	f000 f806 	bl	e988 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
    e97c:	9001      	str	r0, [sp, #4]
    e97e:	e7ff      	b.n	e980 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x22>
    e980:	9801      	ldr	r0, [sp, #4]
    e982:	b006      	add	sp, #24
    e984:	bd80      	pop	{r7, pc}
	...

0000e988 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>:
    e988:	b086      	sub	sp, #24
    e98a:	460a      	mov	r2, r1
    e98c:	f88d 100f 	strb.w	r1, [sp, #15]
    e990:	9005      	str	r0, [sp, #20]
    e992:	f89d 100f 	ldrb.w	r1, [sp, #15]
    e996:	9002      	str	r0, [sp, #8]
    e998:	9101      	str	r1, [sp, #4]
    e99a:	9901      	ldr	r1, [sp, #4]
    e99c:	e8df f001 	tbb	[pc, r1]
    e9a0:	03102317 	.word	0x03102317
    e9a4:	001c      	.short	0x001c
    e9a6:	f64e 5098 	movw	r0, #60824	; 0xed98
    e9aa:	f2c0 0001 	movt	r0, #1
    e9ae:	f64e 6214 	movw	r2, #60948	; 0xee14
    e9b2:	f2c0 0201 	movt	r2, #1
    e9b6:	2131      	movs	r1, #49	; 0x31
    e9b8:	f007 fff2 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e9bc:	defe      	udf	#254	; 0xfe
    e9be:	defe      	udf	#254	; 0xfe
    e9c0:	9802      	ldr	r0, [sp, #8]
    e9c2:	6801      	ldr	r1, [r0, #0]
    e9c4:	f3bf 8f5f 	dmb	sy
    e9c8:	9104      	str	r1, [sp, #16]
    e9ca:	e7ff      	b.n	e9cc <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x44>
    e9cc:	e017      	b.n	e9fe <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
    e9ce:	9802      	ldr	r0, [sp, #8]
    e9d0:	6801      	ldr	r1, [r0, #0]
    e9d2:	9104      	str	r1, [sp, #16]
    e9d4:	e7ff      	b.n	e9d6 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x4e>
    e9d6:	e012      	b.n	e9fe <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
    e9d8:	9802      	ldr	r0, [sp, #8]
    e9da:	6801      	ldr	r1, [r0, #0]
    e9dc:	f3bf 8f5f 	dmb	sy
    e9e0:	9104      	str	r1, [sp, #16]
    e9e2:	e7ff      	b.n	e9e4 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x5c>
    e9e4:	e00b      	b.n	e9fe <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
    e9e6:	f64e 6024 	movw	r0, #60964	; 0xee24
    e9ea:	f2c0 0001 	movt	r0, #1
    e9ee:	f64e 6214 	movw	r2, #60948	; 0xee14
    e9f2:	f2c0 0201 	movt	r2, #1
    e9f6:	2128      	movs	r1, #40	; 0x28
    e9f8:	f007 ffd2 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e9fc:	defe      	udf	#254	; 0xfe
    e9fe:	9804      	ldr	r0, [sp, #16]
    ea00:	b006      	add	sp, #24
    ea02:	4770      	bx	lr

0000ea04 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>:
    ea04:	b081      	sub	sp, #4
    ea06:	9000      	str	r0, [sp, #0]
    ea08:	6800      	ldr	r0, [r0, #0]
    ea0a:	b001      	add	sp, #4
    ea0c:	4770      	bx	lr

0000ea0e <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>:
    ea0e:	b082      	sub	sp, #8
    ea10:	9001      	str	r0, [sp, #4]
    ea12:	6801      	ldr	r1, [r0, #0]
    ea14:	6840      	ldr	r0, [r0, #4]
    ea16:	9000      	str	r0, [sp, #0]
    ea18:	4608      	mov	r0, r1
    ea1a:	9900      	ldr	r1, [sp, #0]
    ea1c:	b002      	add	sp, #8
    ea1e:	4770      	bx	lr

0000ea20 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>:
    ea20:	b580      	push	{r7, lr}
    ea22:	b08c      	sub	sp, #48	; 0x30
    ea24:	9101      	str	r1, [sp, #4]
    ea26:	9202      	str	r2, [sp, #8]
    ea28:	2100      	movs	r1, #0
    ea2a:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
    ea2e:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
    ea32:	2101      	movs	r1, #1
    ea34:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
    ea38:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
    ea3c:	9901      	ldr	r1, [sp, #4]
    ea3e:	2900      	cmp	r1, #0
    ea40:	460a      	mov	r2, r1
    ea42:	bf18      	it	ne
    ea44:	2201      	movne	r2, #1
    ea46:	2900      	cmp	r1, #0
    ea48:	9000      	str	r0, [sp, #0]
    ea4a:	d001      	beq.n	ea50 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x30>
    ea4c:	e7ff      	b.n	ea4e <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x2e>
    ea4e:	e008      	b.n	ea62 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x42>
    ea50:	2000      	movs	r0, #0
    ea52:	9900      	ldr	r1, [sp, #0]
    ea54:	6088      	str	r0, [r1, #8]
    ea56:	6048      	str	r0, [r1, #4]
    ea58:	6008      	str	r0, [r1, #0]
    ea5a:	2002      	movs	r0, #2
    ea5c:	6008      	str	r0, [r1, #0]
    ea5e:	e021      	b.n	eaa4 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
    ea60:	defe      	udf	#254	; 0xfe
    ea62:	2000      	movs	r0, #0
    ea64:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    ea68:	9901      	ldr	r1, [sp, #4]
    ea6a:	9a02      	ldr	r2, [sp, #8]
    ea6c:	910a      	str	r1, [sp, #40]	; 0x28
    ea6e:	920b      	str	r2, [sp, #44]	; 0x2c
    ea70:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    ea74:	9106      	str	r1, [sp, #24]
    ea76:	9207      	str	r2, [sp, #28]
    ea78:	9906      	ldr	r1, [sp, #24]
    ea7a:	9a07      	ldr	r2, [sp, #28]
    ea7c:	a803      	add	r0, sp, #12
    ea7e:	f7ff ff5b 	bl	e938 <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>
    ea82:	e7ff      	b.n	ea84 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x64>
    ea84:	9803      	ldr	r0, [sp, #12]
    ea86:	9904      	ldr	r1, [sp, #16]
    ea88:	9a05      	ldr	r2, [sp, #20]
    ea8a:	9b00      	ldr	r3, [sp, #0]
    ea8c:	609a      	str	r2, [r3, #8]
    ea8e:	6059      	str	r1, [r3, #4]
    ea90:	6018      	str	r0, [r3, #0]
    ea92:	e007      	b.n	eaa4 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
    ea94:	9801      	ldr	r0, [sp, #4]
    ea96:	2800      	cmp	r0, #0
    ea98:	d10c      	bne.n	eab4 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x94>
    ea9a:	e015      	b.n	eac8 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa8>
    ea9c:	2000      	movs	r0, #0
    ea9e:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    eaa2:	e7f7      	b.n	ea94 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
    eaa4:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
    eaa8:	07c0      	lsls	r0, r0, #31
    eaaa:	2800      	cmp	r0, #0
    eaac:	d1f6      	bne.n	ea9c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x7c>
    eaae:	e7f1      	b.n	ea94 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
    eab0:	b00c      	add	sp, #48	; 0x30
    eab2:	bd80      	pop	{r7, pc}
    eab4:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    eab8:	07c0      	lsls	r0, r0, #31
    eaba:	2800      	cmp	r0, #0
    eabc:	d0f8      	beq.n	eab0 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
    eabe:	e7ff      	b.n	eac0 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa0>
    eac0:	2000      	movs	r0, #0
    eac2:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    eac6:	e7f3      	b.n	eab0 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
    eac8:	e7f2      	b.n	eab0 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>

0000eaca <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>:
    eaca:	b5b0      	push	{r4, r5, r7, lr}
    eacc:	b081      	sub	sp, #4
    eace:	9100      	str	r1, [sp, #0]
    ead0:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    ead4:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    ead8:	b001      	add	sp, #4
    eada:	bdb0      	pop	{r4, r5, r7, pc}

0000eadc <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>:
    eadc:	b580      	push	{r7, lr}
    eade:	b088      	sub	sp, #32
    eae0:	9106      	str	r1, [sp, #24]
    eae2:	680a      	ldr	r2, [r1, #0]
    eae4:	1e93      	subs	r3, r2, #2
    eae6:	bf18      	it	ne
    eae8:	2301      	movne	r3, #1
    eaea:	2a02      	cmp	r2, #2
    eaec:	9102      	str	r1, [sp, #8]
    eaee:	9001      	str	r0, [sp, #4]
    eaf0:	d001      	beq.n	eaf6 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x1a>
    eaf2:	e7ff      	b.n	eaf4 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x18>
    eaf4:	e008      	b.n	eb08 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x2c>
    eaf6:	2000      	movs	r0, #0
    eaf8:	9901      	ldr	r1, [sp, #4]
    eafa:	6088      	str	r0, [r1, #8]
    eafc:	6048      	str	r0, [r1, #4]
    eafe:	6008      	str	r0, [r1, #0]
    eb00:	2002      	movs	r0, #2
    eb02:	6008      	str	r0, [r1, #0]
    eb04:	e00f      	b.n	eb26 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
    eb06:	defe      	udf	#254	; 0xfe
    eb08:	9802      	ldr	r0, [sp, #8]
    eb0a:	9007      	str	r0, [sp, #28]
    eb0c:	a803      	add	r0, sp, #12
    eb0e:	9902      	ldr	r1, [sp, #8]
    eb10:	f000 f9b5 	bl	ee7e <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>
    eb14:	e7ff      	b.n	eb16 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x3a>
    eb16:	9803      	ldr	r0, [sp, #12]
    eb18:	9904      	ldr	r1, [sp, #16]
    eb1a:	9a05      	ldr	r2, [sp, #20]
    eb1c:	9b01      	ldr	r3, [sp, #4]
    eb1e:	609a      	str	r2, [r3, #8]
    eb20:	6059      	str	r1, [r3, #4]
    eb22:	6018      	str	r0, [r3, #0]
    eb24:	e7ff      	b.n	eb26 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
    eb26:	b008      	add	sp, #32
    eb28:	bd80      	pop	{r7, pc}

0000eb2a <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>:
    eb2a:	b580      	push	{r7, lr}
    eb2c:	b086      	sub	sp, #24
    eb2e:	9004      	str	r0, [sp, #16]
    eb30:	6801      	ldr	r1, [r0, #0]
    eb32:	2900      	cmp	r1, #0
    eb34:	9001      	str	r0, [sp, #4]
    eb36:	d001      	beq.n	eb3c <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x12>
    eb38:	e7ff      	b.n	eb3a <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x10>
    eb3a:	e003      	b.n	eb44 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x1a>
    eb3c:	2000      	movs	r0, #0
    eb3e:	9002      	str	r0, [sp, #8]
    eb40:	e00d      	b.n	eb5e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
    eb42:	defe      	udf	#254	; 0xfe
    eb44:	9801      	ldr	r0, [sp, #4]
    eb46:	1d01      	adds	r1, r0, #4
    eb48:	9105      	str	r1, [sp, #20]
    eb4a:	4608      	mov	r0, r1
    eb4c:	f7ff ff5a 	bl	ea04 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>
    eb50:	9000      	str	r0, [sp, #0]
    eb52:	e7ff      	b.n	eb54 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x2a>
    eb54:	9800      	ldr	r0, [sp, #0]
    eb56:	9003      	str	r0, [sp, #12]
    eb58:	2101      	movs	r1, #1
    eb5a:	9102      	str	r1, [sp, #8]
    eb5c:	e7ff      	b.n	eb5e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
    eb5e:	9802      	ldr	r0, [sp, #8]
    eb60:	9903      	ldr	r1, [sp, #12]
    eb62:	b006      	add	sp, #24
    eb64:	bd80      	pop	{r7, pc}

0000eb66 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>:
    fn clone(&self) -> Level {
    eb66:	b081      	sub	sp, #4
    eb68:	9000      	str	r0, [sp, #0]
        *self
    eb6a:	6800      	ldr	r0, [r0, #0]
    }
    eb6c:	b001      	add	sp, #4
    eb6e:	4770      	bx	lr

0000eb70 <_ZN3log6Record7builder17hde62ab0132265febE>:
    pub fn builder() -> RecordBuilder<'a> {
    eb70:	b580      	push	{r7, lr}
        RecordBuilder::new()
    eb72:	f000 f802 	bl	eb7a <_ZN3log13RecordBuilder3new17haca8312579858419E>
    eb76:	e7ff      	b.n	eb78 <_ZN3log6Record7builder17hde62ab0132265febE+0x8>
    }
    eb78:	bd80      	pop	{r7, pc}

0000eb7a <_ZN3log13RecordBuilder3new17haca8312579858419E>:
    pub fn new() -> RecordBuilder<'a> {
    eb7a:	b570      	push	{r4, r5, r6, lr}
    eb7c:	b0aa      	sub	sp, #168	; 0xa8
                args: format_args!(""),
    eb7e:	f64e 6164 	movw	r1, #61028	; 0xee64
    eb82:	f2c0 0101 	movt	r1, #1
    eb86:	6809      	ldr	r1, [r1, #0]
    eb88:	466a      	mov	r2, sp
    eb8a:	2300      	movs	r3, #0
    eb8c:	6013      	str	r3, [r2, #0]
    eb8e:	aa16      	add	r2, sp, #88	; 0x58
    eb90:	9004      	str	r0, [sp, #16]
    eb92:	4610      	mov	r0, r2
    eb94:	9103      	str	r1, [sp, #12]
    eb96:	461a      	mov	r2, r3
    eb98:	9b03      	ldr	r3, [sp, #12]
    eb9a:	f7ff feb1 	bl	e900 <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>
    eb9e:	e7ff      	b.n	eba0 <_ZN3log13RecordBuilder3new17haca8312579858419E+0x26>
    eba0:	a81f      	add	r0, sp, #124	; 0x7c
                metadata: Metadata::builder().build(),
    eba2:	f000 f891 	bl	ecc8 <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>
    eba6:	e7ff      	b.n	eba8 <_ZN3log13RecordBuilder3new17haca8312579858419E+0x2e>
    eba8:	a81c      	add	r0, sp, #112	; 0x70
    ebaa:	a91f      	add	r1, sp, #124	; 0x7c
    ebac:	f000 f8a5 	bl	ecfa <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>
    ebb0:	e7ff      	b.n	ebb2 <_ZN3log13RecordBuilder3new17haca8312579858419E+0x38>
    ebb2:	2000      	movs	r0, #0
                module_path: None,
    ebb4:	9024      	str	r0, [sp, #144]	; 0x90
    ebb6:	9023      	str	r0, [sp, #140]	; 0x8c
    ebb8:	9022      	str	r0, [sp, #136]	; 0x88
    ebba:	2102      	movs	r1, #2
    ebbc:	9122      	str	r1, [sp, #136]	; 0x88
                file: None,
    ebbe:	9027      	str	r0, [sp, #156]	; 0x9c
    ebc0:	9026      	str	r0, [sp, #152]	; 0x98
    ebc2:	9025      	str	r0, [sp, #148]	; 0x94
    ebc4:	9125      	str	r1, [sp, #148]	; 0x94
                line: None,
    ebc6:	9028      	str	r0, [sp, #160]	; 0xa0
            record: Record {
    ebc8:	981c      	ldr	r0, [sp, #112]	; 0x70
    ebca:	991d      	ldr	r1, [sp, #116]	; 0x74
    ebcc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    ebce:	9207      	str	r2, [sp, #28]
    ebd0:	9106      	str	r1, [sp, #24]
    ebd2:	9005      	str	r0, [sp, #20]
    ebd4:	a805      	add	r0, sp, #20
    ebd6:	f100 010c 	add.w	r1, r0, #12
    ebda:	aa16      	add	r2, sp, #88	; 0x58
    ebdc:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
    ebe0:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
    ebe4:	9922      	ldr	r1, [sp, #136]	; 0x88
    ebe6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    ebe8:	9b24      	ldr	r3, [sp, #144]	; 0x90
    ebea:	9310      	str	r3, [sp, #64]	; 0x40
    ebec:	920f      	str	r2, [sp, #60]	; 0x3c
    ebee:	910e      	str	r1, [sp, #56]	; 0x38
    ebf0:	9925      	ldr	r1, [sp, #148]	; 0x94
    ebf2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ebf4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    ebf6:	9313      	str	r3, [sp, #76]	; 0x4c
    ebf8:	9212      	str	r2, [sp, #72]	; 0x48
    ebfa:	9111      	str	r1, [sp, #68]	; 0x44
    ebfc:	9928      	ldr	r1, [sp, #160]	; 0xa0
    ebfe:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    ec00:	9114      	str	r1, [sp, #80]	; 0x50
    ec02:	9215      	str	r2, [sp, #84]	; 0x54
    ec04:	2244      	movs	r2, #68	; 0x44
        return RecordBuilder {
    ec06:	9904      	ldr	r1, [sp, #16]
    ec08:	9002      	str	r0, [sp, #8]
    ec0a:	4608      	mov	r0, r1
    ec0c:	9902      	ldr	r1, [sp, #8]
    ec0e:	f00e fa9b 	bl	1d148 <__aeabi_memcpy>
    }
    ec12:	b02a      	add	sp, #168	; 0xa8
    ec14:	bd70      	pop	{r4, r5, r6, pc}

0000ec16 <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>:
    pub fn args(&mut self, args: fmt::Arguments<'a>) -> &mut RecordBuilder<'a> {
    ec16:	b5f0      	push	{r4, r5, r6, r7, lr}
    ec18:	b087      	sub	sp, #28
    ec1a:	9006      	str	r0, [sp, #24]
    ec1c:	466a      	mov	r2, sp
        self.record.args = args;
    ec1e:	4613      	mov	r3, r2
    ec20:	e891 50f0 	ldmia.w	r1, {r4, r5, r6, r7, ip, lr}
    ec24:	e883 50f0 	stmia.w	r3, {r4, r5, r6, r7, ip, lr}
    ec28:	f100 010c 	add.w	r1, r0, #12
    ec2c:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
    ec30:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
    }
    ec34:	b007      	add	sp, #28
    ec36:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ec38 <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>:
    pub fn level(&mut self, level: Level) -> &mut RecordBuilder<'a> {
    ec38:	b082      	sub	sp, #8
    ec3a:	9000      	str	r0, [sp, #0]
    ec3c:	9101      	str	r1, [sp, #4]
        self.record.metadata.level = level;
    ec3e:	6001      	str	r1, [r0, #0]
    }
    ec40:	b002      	add	sp, #8
    ec42:	4770      	bx	lr

0000ec44 <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>:
    pub fn target(&mut self, target: &'a str) -> &mut RecordBuilder<'a> {
    ec44:	b083      	sub	sp, #12
    ec46:	9000      	str	r0, [sp, #0]
    ec48:	9101      	str	r1, [sp, #4]
    ec4a:	9202      	str	r2, [sp, #8]
        self.record.metadata.target = target;
    ec4c:	6041      	str	r1, [r0, #4]
    ec4e:	6082      	str	r2, [r0, #8]
    }
    ec50:	b003      	add	sp, #12
    ec52:	4770      	bx	lr

0000ec54 <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>:
    pub fn module_path_static(&mut self, path: Option<&'static str>) -> &mut RecordBuilder<'a> {
    ec54:	b580      	push	{r7, lr}
    ec56:	b088      	sub	sp, #32
    ec58:	9005      	str	r0, [sp, #20]
    ec5a:	9106      	str	r1, [sp, #24]
    ec5c:	9207      	str	r2, [sp, #28]
    ec5e:	ab02      	add	r3, sp, #8
        self.record.module_path = path.map(MaybeStaticStr::Static);
    ec60:	9001      	str	r0, [sp, #4]
    ec62:	4618      	mov	r0, r3
    ec64:	f7ff fedc 	bl	ea20 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
    ec68:	e7ff      	b.n	ec6a <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE+0x16>
    ec6a:	9802      	ldr	r0, [sp, #8]
    ec6c:	9903      	ldr	r1, [sp, #12]
    ec6e:	9a04      	ldr	r2, [sp, #16]
    ec70:	9b01      	ldr	r3, [sp, #4]
    ec72:	62da      	str	r2, [r3, #44]	; 0x2c
    ec74:	6299      	str	r1, [r3, #40]	; 0x28
    ec76:	6258      	str	r0, [r3, #36]	; 0x24
    }
    ec78:	4618      	mov	r0, r3
    ec7a:	b008      	add	sp, #32
    ec7c:	bd80      	pop	{r7, pc}

0000ec7e <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>:
    pub fn file_static(&mut self, file: Option<&'static str>) -> &mut RecordBuilder<'a> {
    ec7e:	b580      	push	{r7, lr}
    ec80:	b088      	sub	sp, #32
    ec82:	9005      	str	r0, [sp, #20]
    ec84:	9106      	str	r1, [sp, #24]
    ec86:	9207      	str	r2, [sp, #28]
    ec88:	ab02      	add	r3, sp, #8
        self.record.file = file.map(MaybeStaticStr::Static);
    ec8a:	9001      	str	r0, [sp, #4]
    ec8c:	4618      	mov	r0, r3
    ec8e:	f7ff fec7 	bl	ea20 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
    ec92:	e7ff      	b.n	ec94 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E+0x16>
    ec94:	9802      	ldr	r0, [sp, #8]
    ec96:	9903      	ldr	r1, [sp, #12]
    ec98:	9a04      	ldr	r2, [sp, #16]
    ec9a:	9b01      	ldr	r3, [sp, #4]
    ec9c:	639a      	str	r2, [r3, #56]	; 0x38
    ec9e:	6359      	str	r1, [r3, #52]	; 0x34
    eca0:	6318      	str	r0, [r3, #48]	; 0x30
    }
    eca2:	4618      	mov	r0, r3
    eca4:	b008      	add	sp, #32
    eca6:	bd80      	pop	{r7, pc}

0000eca8 <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>:
    pub fn line(&mut self, line: Option<u32>) -> &mut RecordBuilder<'a> {
    eca8:	b083      	sub	sp, #12
    ecaa:	9000      	str	r0, [sp, #0]
    ecac:	9101      	str	r1, [sp, #4]
    ecae:	9202      	str	r2, [sp, #8]
        self.record.line = line;
    ecb0:	63c1      	str	r1, [r0, #60]	; 0x3c
    ecb2:	6402      	str	r2, [r0, #64]	; 0x40
    }
    ecb4:	b003      	add	sp, #12
    ecb6:	4770      	bx	lr

0000ecb8 <_ZN3log13RecordBuilder5build17h83529556a009112eE>:
    pub fn build(&self) -> Record<'a> {
    ecb8:	b580      	push	{r7, lr}
    ecba:	b082      	sub	sp, #8
    ecbc:	9101      	str	r1, [sp, #4]
        self.record.clone()
    ecbe:	f000 f8e8 	bl	ee92 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>
    ecc2:	e7ff      	b.n	ecc4 <_ZN3log13RecordBuilder5build17h83529556a009112eE+0xc>
    }
    ecc4:	b002      	add	sp, #8
    ecc6:	bd80      	pop	{r7, pc}

0000ecc8 <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>:
    pub fn builder() -> MetadataBuilder<'a> {
    ecc8:	b580      	push	{r7, lr}
        MetadataBuilder::new()
    ecca:	f000 f802 	bl	ecd2 <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>
    ecce:	e7ff      	b.n	ecd0 <_ZN3log8Metadata7builder17ha56bd59835d60a3cE+0x8>
    }
    ecd0:	bd80      	pop	{r7, pc}

0000ecd2 <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>:
    pub fn new() -> MetadataBuilder<'a> {
    ecd2:	b084      	sub	sp, #16
    ecd4:	2103      	movs	r1, #3
                level: Level::Info,
    ecd6:	9103      	str	r1, [sp, #12]
            metadata: Metadata {
    ecd8:	9903      	ldr	r1, [sp, #12]
    ecda:	9100      	str	r1, [sp, #0]
    ecdc:	f64e 614c 	movw	r1, #61004	; 0xee4c
    ece0:	f2c0 0101 	movt	r1, #1
    ece4:	9101      	str	r1, [sp, #4]
    ece6:	2100      	movs	r1, #0
    ece8:	9102      	str	r1, [sp, #8]
        MetadataBuilder {
    ecea:	9900      	ldr	r1, [sp, #0]
    ecec:	9a01      	ldr	r2, [sp, #4]
    ecee:	9b02      	ldr	r3, [sp, #8]
    ecf0:	6083      	str	r3, [r0, #8]
    ecf2:	6042      	str	r2, [r0, #4]
    ecf4:	6001      	str	r1, [r0, #0]
    }
    ecf6:	b004      	add	sp, #16
    ecf8:	4770      	bx	lr

0000ecfa <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>:
    pub fn build(&self) -> Metadata<'a> {
    ecfa:	b580      	push	{r7, lr}
    ecfc:	b082      	sub	sp, #8
    ecfe:	9101      	str	r1, [sp, #4]
        self.metadata.clone()
    ed00:	f000 f91c 	bl	ef3c <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
    ed04:	e7ff      	b.n	ed06 <_ZN3log15MetadataBuilder5build17h2478972692162fc0E+0xc>
    }
    ed06:	b002      	add	sp, #8
    ed08:	bd80      	pop	{r7, pc}

0000ed0a <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE>:
    fn enabled(&self, _: &Metadata) -> bool {
    ed0a:	b082      	sub	sp, #8
    ed0c:	9000      	str	r0, [sp, #0]
    ed0e:	9101      	str	r1, [sp, #4]
    ed10:	2000      	movs	r0, #0
    }
    ed12:	b002      	add	sp, #8
    ed14:	4770      	bx	lr

0000ed16 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE>:
    fn log(&self, _: &Record) {}
    ed16:	b082      	sub	sp, #8
    ed18:	9000      	str	r0, [sp, #0]
    ed1a:	9101      	str	r1, [sp, #4]
    ed1c:	b002      	add	sp, #8
    ed1e:	4770      	bx	lr

0000ed20 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE>:
    fn flush(&self) {}
    ed20:	b081      	sub	sp, #4
    ed22:	9000      	str	r0, [sp, #0]
    ed24:	b001      	add	sp, #4
    ed26:	4770      	bx	lr

0000ed28 <_ZN3log6logger17hf609e7cc1c031552E>:
}

/// Returns a reference to the logger.
///
/// If a logger has not been set, a no-op implementation is returned.
pub fn logger() -> &'static Log {
    ed28:	b580      	push	{r7, lr}
    ed2a:	b084      	sub	sp, #16
    ed2c:	2004      	movs	r0, #4
    unsafe {
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
    ed2e:	f88d 000f 	strb.w	r0, [sp, #15]
    ed32:	f89d 100f 	ldrb.w	r1, [sp, #15]
    ed36:	f640 10fc 	movw	r0, #2556	; 0x9fc
    ed3a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ed3e:	f7ff fe0e 	bl	e95e <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>
    ed42:	9000      	str	r0, [sp, #0]
    ed44:	e7ff      	b.n	ed46 <_ZN3log6logger17hf609e7cc1c031552E+0x1e>
    ed46:	9800      	ldr	r0, [sp, #0]
    ed48:	2802      	cmp	r0, #2
    ed4a:	d109      	bne.n	ed60 <_ZN3log6logger17hf609e7cc1c031552E+0x38>
    ed4c:	e7ff      	b.n	ed4e <_ZN3log6logger17hf609e7cc1c031552E+0x26>
            static NOP: NopLogger = NopLogger;
            &NOP
        } else {
            LOGGER
    ed4e:	f240 00e8 	movw	r0, #232	; 0xe8
    ed52:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ed56:	6801      	ldr	r1, [r0, #0]
    ed58:	6840      	ldr	r0, [r0, #4]
    ed5a:	9101      	str	r1, [sp, #4]
    ed5c:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
    ed5e:	e00a      	b.n	ed76 <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
            &NOP
    ed60:	f64e 6080 	movw	r0, #61056	; 0xee80
    ed64:	f2c0 0001 	movt	r0, #1
    ed68:	9001      	str	r0, [sp, #4]
    ed6a:	f64e 6068 	movw	r0, #61032	; 0xee68
    ed6e:	f2c0 0001 	movt	r0, #1
    ed72:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
    ed74:	e7ff      	b.n	ed76 <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
    ed76:	9801      	ldr	r0, [sp, #4]
    ed78:	9902      	ldr	r1, [sp, #8]
        }
    }
}
    ed7a:	b004      	add	sp, #16
    ed7c:	bd80      	pop	{r7, pc}

0000ed7e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>:

// WARNING: this is not part of the crate's public API and is subject to change at any time
#[doc(hidden)]
pub fn __private_api_log(
    ed7e:	b570      	push	{r4, r5, r6, lr}
    ed80:	b0ca      	sub	sp, #296	; 0x128
    ed82:	9141      	str	r1, [sp, #260]	; 0x104
    ed84:	9242      	str	r2, [sp, #264]	; 0x108
    args: fmt::Arguments,
    level: Level,
    &(target, module_path, file, line): &(&str, &'static str, &'static str, u32),
    ed86:	6813      	ldr	r3, [r2, #0]
    ed88:	f8d2 c004 	ldr.w	ip, [r2, #4]
    ed8c:	9343      	str	r3, [sp, #268]	; 0x10c
    ed8e:	f8cd c110 	str.w	ip, [sp, #272]	; 0x110
    ed92:	f8d2 e008 	ldr.w	lr, [r2, #8]
    ed96:	68d4      	ldr	r4, [r2, #12]
    ed98:	f8cd e114 	str.w	lr, [sp, #276]	; 0x114
    ed9c:	9446      	str	r4, [sp, #280]	; 0x118
    ed9e:	6915      	ldr	r5, [r2, #16]
    eda0:	6956      	ldr	r6, [r2, #20]
    eda2:	9547      	str	r5, [sp, #284]	; 0x11c
    eda4:	9648      	str	r6, [sp, #288]	; 0x120
    eda6:	6992      	ldr	r2, [r2, #24]
    eda8:	9249      	str	r2, [sp, #292]	; 0x124
) {
    logger().log(
    edaa:	9112      	str	r1, [sp, #72]	; 0x48
    edac:	9011      	str	r0, [sp, #68]	; 0x44
    edae:	9310      	str	r3, [sp, #64]	; 0x40
    edb0:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    edb4:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
    edb8:	940d      	str	r4, [sp, #52]	; 0x34
    edba:	950c      	str	r5, [sp, #48]	; 0x30
    edbc:	960b      	str	r6, [sp, #44]	; 0x2c
    edbe:	920a      	str	r2, [sp, #40]	; 0x28
    edc0:	f7ff ffb2 	bl	ed28 <_ZN3log6logger17hf609e7cc1c031552E>
    edc4:	9009      	str	r0, [sp, #36]	; 0x24
    edc6:	9108      	str	r1, [sp, #32]
    edc8:	e7ff      	b.n	edca <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x4c>
    edca:	a824      	add	r0, sp, #144	; 0x90
        &Record::builder()
    edcc:	f7ff fed0 	bl	eb70 <_ZN3log6Record7builder17hde62ab0132265febE>
    edd0:	e7ff      	b.n	edd2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x54>
    edd2:	a835      	add	r0, sp, #212	; 0xd4
            .args(args)
    edd4:	4601      	mov	r1, r0
    edd6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    edd8:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
    eddc:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
    ede0:	a924      	add	r1, sp, #144	; 0x90
        &Record::builder()
    ede2:	9007      	str	r0, [sp, #28]
    ede4:	4608      	mov	r0, r1
    ede6:	9907      	ldr	r1, [sp, #28]
    ede8:	f7ff ff15 	bl	ec16 <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>
    edec:	9006      	str	r0, [sp, #24]
    edee:	e7ff      	b.n	edf0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x72>
    edf0:	9806      	ldr	r0, [sp, #24]
    edf2:	9912      	ldr	r1, [sp, #72]	; 0x48
    edf4:	f7ff ff20 	bl	ec38 <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>
    edf8:	9005      	str	r0, [sp, #20]
    edfa:	e7ff      	b.n	edfc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x7e>
    edfc:	9805      	ldr	r0, [sp, #20]
    edfe:	9910      	ldr	r1, [sp, #64]	; 0x40
    ee00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    ee02:	f7ff ff1f 	bl	ec44 <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>
    ee06:	9004      	str	r0, [sp, #16]
    ee08:	e7ff      	b.n	ee0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x8c>
            .level(level)
            .target(target)
            .module_path_static(Some(module_path))
    ee0a:	980e      	ldr	r0, [sp, #56]	; 0x38
    ee0c:	903b      	str	r0, [sp, #236]	; 0xec
    ee0e:	990d      	ldr	r1, [sp, #52]	; 0x34
    ee10:	913c      	str	r1, [sp, #240]	; 0xf0
        &Record::builder()
    ee12:	993b      	ldr	r1, [sp, #236]	; 0xec
    ee14:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    ee16:	9804      	ldr	r0, [sp, #16]
    ee18:	f7ff ff1c 	bl	ec54 <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>
    ee1c:	9003      	str	r0, [sp, #12]
    ee1e:	e7ff      	b.n	ee20 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xa2>
            .file_static(Some(file))
    ee20:	980c      	ldr	r0, [sp, #48]	; 0x30
    ee22:	903d      	str	r0, [sp, #244]	; 0xf4
    ee24:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ee26:	913e      	str	r1, [sp, #248]	; 0xf8
        &Record::builder()
    ee28:	993d      	ldr	r1, [sp, #244]	; 0xf4
    ee2a:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    ee2c:	9803      	ldr	r0, [sp, #12]
    ee2e:	f7ff ff26 	bl	ec7e <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>
    ee32:	9002      	str	r0, [sp, #8]
    ee34:	e7ff      	b.n	ee36 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xb8>
            .line(Some(line))
    ee36:	980a      	ldr	r0, [sp, #40]	; 0x28
    ee38:	9040      	str	r0, [sp, #256]	; 0x100
    ee3a:	2101      	movs	r1, #1
    ee3c:	913f      	str	r1, [sp, #252]	; 0xfc
        &Record::builder()
    ee3e:	993f      	ldr	r1, [sp, #252]	; 0xfc
    ee40:	9a40      	ldr	r2, [sp, #256]	; 0x100
    ee42:	9802      	ldr	r0, [sp, #8]
    ee44:	f7ff ff30 	bl	eca8 <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>
    ee48:	9001      	str	r0, [sp, #4]
    ee4a:	e7ff      	b.n	ee4c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xce>
    ee4c:	a813      	add	r0, sp, #76	; 0x4c
    ee4e:	9901      	ldr	r1, [sp, #4]
    ee50:	f7ff ff32 	bl	ecb8 <_ZN3log13RecordBuilder5build17h83529556a009112eE>
    ee54:	e7ff      	b.n	ee56 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xd8>
    logger().log(
    ee56:	9808      	ldr	r0, [sp, #32]
    ee58:	6901      	ldr	r1, [r0, #16]
    ee5a:	aa13      	add	r2, sp, #76	; 0x4c
    ee5c:	9809      	ldr	r0, [sp, #36]	; 0x24
    ee5e:	9100      	str	r1, [sp, #0]
    ee60:	4611      	mov	r1, r2
    ee62:	9a00      	ldr	r2, [sp, #0]
    ee64:	4790      	blx	r2
    ee66:	e7ff      	b.n	ee68 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xea>
            .build(),
    );
}
    ee68:	b04a      	add	sp, #296	; 0x128
    ee6a:	bd70      	pop	{r4, r5, r6, pc}

0000ee6c <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>:
    Static(&'static str),
    ee6c:	b082      	sub	sp, #8
    ee6e:	9100      	str	r1, [sp, #0]
    ee70:	9201      	str	r2, [sp, #4]
    ee72:	6041      	str	r1, [r0, #4]
    ee74:	6082      	str	r2, [r0, #8]
    ee76:	2100      	movs	r1, #0
    ee78:	6001      	str	r1, [r0, #0]
    ee7a:	b002      	add	sp, #8
    ee7c:	4770      	bx	lr

0000ee7e <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>:
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
    ee7e:	b081      	sub	sp, #4
    ee80:	9100      	str	r1, [sp, #0]
    ee82:	680a      	ldr	r2, [r1, #0]
    ee84:	684b      	ldr	r3, [r1, #4]
    ee86:	6889      	ldr	r1, [r1, #8]
    ee88:	6081      	str	r1, [r0, #8]
    ee8a:	6043      	str	r3, [r0, #4]
    ee8c:	6002      	str	r2, [r0, #0]
    ee8e:	b001      	add	sp, #4
    ee90:	4770      	bx	lr

0000ee92 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>:
#[derive(Clone, Debug)]
    ee92:	b570      	push	{r4, r5, r6, lr}
    ee94:	b09c      	sub	sp, #112	; 0x70
    ee96:	9116      	str	r1, [sp, #88]	; 0x58
    metadata: Metadata<'a>,
    ee98:	9117      	str	r1, [sp, #92]	; 0x5c
    args: fmt::Arguments<'a>,
    ee9a:	f101 020c 	add.w	r2, r1, #12
    ee9e:	4613      	mov	r3, r2
    eea0:	9218      	str	r2, [sp, #96]	; 0x60
    module_path: Option<MaybeStaticStr<'a>>,
    eea2:	f101 0224 	add.w	r2, r1, #36	; 0x24
    eea6:	4694      	mov	ip, r2
    eea8:	9219      	str	r2, [sp, #100]	; 0x64
    file: Option<MaybeStaticStr<'a>>,
    eeaa:	f101 0230 	add.w	r2, r1, #48	; 0x30
    eeae:	4696      	mov	lr, r2
    eeb0:	921a      	str	r2, [sp, #104]	; 0x68
    line: Option<u32>,
    eeb2:	f101 023c 	add.w	r2, r1, #60	; 0x3c
    eeb6:	4614      	mov	r4, r2
    eeb8:	921b      	str	r2, [sp, #108]	; 0x6c
    eeba:	aa07      	add	r2, sp, #28
    metadata: Metadata<'a>,
    eebc:	9006      	str	r0, [sp, #24]
    eebe:	4610      	mov	r0, r2
    eec0:	9305      	str	r3, [sp, #20]
    eec2:	f8cd c010 	str.w	ip, [sp, #16]
    eec6:	f8cd e00c 	str.w	lr, [sp, #12]
    eeca:	9402      	str	r4, [sp, #8]
    eecc:	f000 f836 	bl	ef3c <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
    eed0:	e7ff      	b.n	eed2 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x40>
    eed2:	a80a      	add	r0, sp, #40	; 0x28
    args: fmt::Arguments<'a>,
    eed4:	9905      	ldr	r1, [sp, #20]
    eed6:	f7ff fdf8 	bl	eaca <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>
    eeda:	e7ff      	b.n	eedc <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x4a>
    eedc:	a810      	add	r0, sp, #64	; 0x40
    module_path: Option<MaybeStaticStr<'a>>,
    eede:	9904      	ldr	r1, [sp, #16]
    eee0:	f7ff fdfc 	bl	eadc <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
    eee4:	e7ff      	b.n	eee6 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x54>
    eee6:	a813      	add	r0, sp, #76	; 0x4c
    file: Option<MaybeStaticStr<'a>>,
    eee8:	9903      	ldr	r1, [sp, #12]
    eeea:	f7ff fdf7 	bl	eadc <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
    eeee:	e7ff      	b.n	eef0 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x5e>
    line: Option<u32>,
    eef0:	9802      	ldr	r0, [sp, #8]
    eef2:	f7ff fe1a 	bl	eb2a <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>
    eef6:	9001      	str	r0, [sp, #4]
    eef8:	9100      	str	r1, [sp, #0]
    eefa:	e7ff      	b.n	eefc <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x6a>
#[derive(Clone, Debug)]
    eefc:	9807      	ldr	r0, [sp, #28]
    eefe:	9908      	ldr	r1, [sp, #32]
    ef00:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ef02:	9b06      	ldr	r3, [sp, #24]
    ef04:	609a      	str	r2, [r3, #8]
    ef06:	6059      	str	r1, [r3, #4]
    ef08:	6018      	str	r0, [r3, #0]
    ef0a:	f103 000c 	add.w	r0, r3, #12
    ef0e:	a90a      	add	r1, sp, #40	; 0x28
    ef10:	e891 5074 	ldmia.w	r1, {r2, r4, r5, r6, ip, lr}
    ef14:	e880 5074 	stmia.w	r0, {r2, r4, r5, r6, ip, lr}
    ef18:	9810      	ldr	r0, [sp, #64]	; 0x40
    ef1a:	9911      	ldr	r1, [sp, #68]	; 0x44
    ef1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ef1e:	62da      	str	r2, [r3, #44]	; 0x2c
    ef20:	6299      	str	r1, [r3, #40]	; 0x28
    ef22:	6258      	str	r0, [r3, #36]	; 0x24
    ef24:	9813      	ldr	r0, [sp, #76]	; 0x4c
    ef26:	9914      	ldr	r1, [sp, #80]	; 0x50
    ef28:	9a15      	ldr	r2, [sp, #84]	; 0x54
    ef2a:	639a      	str	r2, [r3, #56]	; 0x38
    ef2c:	6359      	str	r1, [r3, #52]	; 0x34
    ef2e:	6318      	str	r0, [r3, #48]	; 0x30
    ef30:	9801      	ldr	r0, [sp, #4]
    ef32:	63d8      	str	r0, [r3, #60]	; 0x3c
    ef34:	9900      	ldr	r1, [sp, #0]
    ef36:	6419      	str	r1, [r3, #64]	; 0x40
    ef38:	b01c      	add	sp, #112	; 0x70
    ef3a:	bd70      	pop	{r4, r5, r6, pc}

0000ef3c <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>:
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
    ef3c:	b580      	push	{r7, lr}
    ef3e:	b088      	sub	sp, #32
    ef40:	9105      	str	r1, [sp, #20]
    level: Level,
    ef42:	9106      	str	r1, [sp, #24]
    target: &'a str,
    ef44:	1d0a      	adds	r2, r1, #4
    ef46:	4613      	mov	r3, r2
    ef48:	9207      	str	r2, [sp, #28]
    level: Level,
    ef4a:	9004      	str	r0, [sp, #16]
    ef4c:	4608      	mov	r0, r1
    ef4e:	9303      	str	r3, [sp, #12]
    ef50:	f7ff fe09 	bl	eb66 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>
    ef54:	9002      	str	r0, [sp, #8]
    ef56:	e7ff      	b.n	ef58 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x1c>
    target: &'a str,
    ef58:	9803      	ldr	r0, [sp, #12]
    ef5a:	f7ff fd58 	bl	ea0e <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>
    ef5e:	9001      	str	r0, [sp, #4]
    ef60:	9100      	str	r1, [sp, #0]
    ef62:	e7ff      	b.n	ef64 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x28>
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
    ef64:	9802      	ldr	r0, [sp, #8]
    ef66:	9904      	ldr	r1, [sp, #16]
    ef68:	6008      	str	r0, [r1, #0]
    ef6a:	9a01      	ldr	r2, [sp, #4]
    ef6c:	604a      	str	r2, [r1, #4]
    ef6e:	9b00      	ldr	r3, [sp, #0]
    ef70:	608b      	str	r3, [r1, #8]
    ef72:	b008      	add	sp, #32
    ef74:	bd80      	pop	{r7, pc}

0000ef76 <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>:
pub use hal::{ Delay, GPIO, SPI };  //  Export `hal` types GPIO and SPI

pub mod spi;  //  Export Non-Blocking SPI API

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
pub fn sysinit() {
    ef76:	b580      	push	{r7, lr}
    unsafe { rust_sysinit(); }
    ef78:	f00c fba2 	bl	1b6c0 <rust_sysinit>
    ef7c:	e7ff      	b.n	ef7e <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0x8>
    sys::console::flush();
    ef7e:	f000 fbba 	bl	f6f6 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    ef82:	e7ff      	b.n	ef84 <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0xe>
}
    ef84:	bd80      	pop	{r7, pc}

0000ef86 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>:
            rep: StrnRep::CStr(cstr)
        }
    }

    /// Return a pointer to the string
    pub fn as_ptr(&self) -> *const u8 {
    ef86:	b580      	push	{r7, lr}
    ef88:	b086      	sub	sp, #24
    ef8a:	9002      	str	r0, [sp, #8]
        match self.rep {
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    ef8c:	7801      	ldrb	r1, [r0, #0]
    ef8e:	07ca      	lsls	r2, r1, #31
    ef90:	2a00      	cmp	r2, #0
    ef92:	9000      	str	r0, [sp, #0]
    ef94:	d006      	beq.n	efa4 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x1e>
    ef96:	e7ff      	b.n	ef98 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x12>
            StrnRep::CStr(cstr)  => { cstr }
    ef98:	9800      	ldr	r0, [sp, #0]
    ef9a:	6841      	ldr	r1, [r0, #4]
    ef9c:	9103      	str	r1, [sp, #12]
    ef9e:	9101      	str	r1, [sp, #4]
        match self.rep {
    efa0:	e00c      	b.n	efbc <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
    efa2:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    efa4:	9800      	ldr	r0, [sp, #0]
    efa6:	6841      	ldr	r1, [r0, #4]
    efa8:	6882      	ldr	r2, [r0, #8]
    efaa:	9104      	str	r1, [sp, #16]
    efac:	9205      	str	r2, [sp, #20]
    efae:	4608      	mov	r0, r1
    efb0:	4611      	mov	r1, r2
    efb2:	f7ff fc57 	bl	e864 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    efb6:	9001      	str	r0, [sp, #4]
    efb8:	e7ff      	b.n	efba <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x34>
        match self.rep {
    efba:	e7ff      	b.n	efbc <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
        }
    }
    efbc:	9801      	ldr	r0, [sp, #4]
    efbe:	b006      	add	sp, #24
    efc0:	bd80      	pop	{r7, pc}

0000efc2 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>:
            }
        }
    }

    /// Fail if the last byte is not zero.
    pub fn validate(&self) {
    efc2:	b5b0      	push	{r4, r5, r7, lr}
    efc4:	b0b2      	sub	sp, #200	; 0xc8
    efc6:	9029      	str	r0, [sp, #164]	; 0xa4
        match self.rep {
            StrnRep::ByteStr(bs) => {         
    efc8:	7801      	ldrb	r1, [r0, #0]
    efca:	07ca      	lsls	r2, r1, #31
    efcc:	2a00      	cmp	r2, #0
    efce:	900e      	str	r0, [sp, #56]	; 0x38
    efd0:	d005      	beq.n	efde <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x1c>
    efd2:	e7ff      	b.n	efd4 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
            }
            StrnRep::CStr(_cstr)  => {}
    efd4:	980e      	ldr	r0, [sp, #56]	; 0x38
    efd6:	6841      	ldr	r1, [r0, #4]
    efd8:	912a      	str	r1, [sp, #168]	; 0xa8
        match self.rep {
    efda:	e096      	b.n	f10a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
    efdc:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => {         
    efde:	980e      	ldr	r0, [sp, #56]	; 0x38
    efe0:	6841      	ldr	r1, [r0, #4]
    efe2:	6882      	ldr	r2, [r0, #8]
    efe4:	912b      	str	r1, [sp, #172]	; 0xac
    efe6:	922c      	str	r2, [sp, #176]	; 0xb0
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    efe8:	4608      	mov	r0, r1
    efea:	4611      	mov	r1, r2
    efec:	f000 fabe 	bl	f56c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>
    eff0:	9011      	str	r0, [sp, #68]	; 0x44
    eff2:	e7ff      	b.n	eff4 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x32>
    eff4:	f64e 6088 	movw	r0, #61064	; 0xee88
    eff8:	f2c0 0001 	movt	r0, #1
    effc:	6800      	ldr	r0, [r0, #0]
    effe:	a911      	add	r1, sp, #68	; 0x44
    f000:	910f      	str	r1, [sp, #60]	; 0x3c
    f002:	9010      	str	r0, [sp, #64]	; 0x40
    f004:	980f      	ldr	r0, [sp, #60]	; 0x3c
    f006:	902d      	str	r0, [sp, #180]	; 0xb4
    f008:	9910      	ldr	r1, [sp, #64]	; 0x40
    f00a:	912e      	str	r1, [sp, #184]	; 0xb8
    f00c:	900d      	str	r0, [sp, #52]	; 0x34
    f00e:	910c      	str	r1, [sp, #48]	; 0x30
    f010:	f000 fee5 	bl	fdde <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>
    f014:	900b      	str	r0, [sp, #44]	; 0x2c
    f016:	e7ff      	b.n	f018 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x56>
    f018:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f01a:	07c1      	lsls	r1, r0, #31
    f01c:	2900      	cmp	r1, #0
    f01e:	d001      	beq.n	f024 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x62>
    f020:	e7ff      	b.n	f022 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x60>
        }
    }
    f022:	e072      	b.n	f10a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    f024:	f64e 60e0 	movw	r0, #61152	; 0xeee0
    f028:	f2c0 0001 	movt	r0, #1
    f02c:	6801      	ldr	r1, [r0, #0]
    f02e:	980d      	ldr	r0, [sp, #52]	; 0x34
    f030:	9021      	str	r0, [sp, #132]	; 0x84
    f032:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f034:	9222      	str	r2, [sp, #136]	; 0x88
    f036:	f64e 63f4 	movw	r3, #61172	; 0xeef4
    f03a:	f2c0 0301 	movt	r3, #1
    f03e:	681b      	ldr	r3, [r3, #0]
    f040:	f64e 6cf8 	movw	ip, #61176	; 0xeef8
    f044:	f2c0 0c01 	movt	ip, #1
    f048:	f8dc c000 	ldr.w	ip, [ip]
    f04c:	46ee      	mov	lr, sp
    f04e:	2400      	movs	r4, #0
    f050:	f8ce 4000 	str.w	r4, [lr]
    f054:	a823      	add	r0, sp, #140	; 0x8c
    f056:	2201      	movs	r2, #1
    f058:	910a      	str	r1, [sp, #40]	; 0x28
    f05a:	4619      	mov	r1, r3
    f05c:	4663      	mov	r3, ip
    f05e:	f000 f856 	bl	f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    f062:	e7ff      	b.n	f064 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xa2>
    f064:	a821      	add	r0, sp, #132	; 0x84
    f066:	901e      	str	r0, [sp, #120]	; 0x78
    f068:	a822      	add	r0, sp, #136	; 0x88
    f06a:	901f      	str	r0, [sp, #124]	; 0x7c
    f06c:	a823      	add	r0, sp, #140	; 0x8c
    f06e:	9020      	str	r0, [sp, #128]	; 0x80
    f070:	981e      	ldr	r0, [sp, #120]	; 0x78
    f072:	902f      	str	r0, [sp, #188]	; 0xbc
    f074:	991f      	ldr	r1, [sp, #124]	; 0x7c
    f076:	9130      	str	r1, [sp, #192]	; 0xc0
    f078:	9a20      	ldr	r2, [sp, #128]	; 0x80
    f07a:	9231      	str	r2, [sp, #196]	; 0xc4
    f07c:	f64f 4397 	movw	r3, #64663	; 0xfc97
    f080:	f2c0 0300 	movt	r3, #0
    f084:	9109      	str	r1, [sp, #36]	; 0x24
    f086:	4619      	mov	r1, r3
    f088:	9208      	str	r2, [sp, #32]
    f08a:	f000 ff53 	bl	ff34 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    f08e:	9007      	str	r0, [sp, #28]
    f090:	9106      	str	r1, [sp, #24]
    f092:	e7ff      	b.n	f094 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xd2>
    f094:	f64f 4197 	movw	r1, #64663	; 0xfc97
    f098:	f2c0 0100 	movt	r1, #0
    f09c:	9809      	ldr	r0, [sp, #36]	; 0x24
    f09e:	f000 ff49 	bl	ff34 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    f0a2:	9005      	str	r0, [sp, #20]
    f0a4:	9104      	str	r1, [sp, #16]
    f0a6:	e7ff      	b.n	f0a8 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xe6>
    f0a8:	f646 716f 	movw	r1, #28527	; 0x6f6f
    f0ac:	f2c0 0101 	movt	r1, #1
    f0b0:	9808      	ldr	r0, [sp, #32]
    f0b2:	f000 ff69 	bl	ff88 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    f0b6:	9003      	str	r0, [sp, #12]
    f0b8:	9102      	str	r1, [sp, #8]
    f0ba:	e7ff      	b.n	f0bc <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xfa>
    f0bc:	9807      	ldr	r0, [sp, #28]
    f0be:	9018      	str	r0, [sp, #96]	; 0x60
    f0c0:	9906      	ldr	r1, [sp, #24]
    f0c2:	9119      	str	r1, [sp, #100]	; 0x64
    f0c4:	9a05      	ldr	r2, [sp, #20]
    f0c6:	921a      	str	r2, [sp, #104]	; 0x68
    f0c8:	9b04      	ldr	r3, [sp, #16]
    f0ca:	931b      	str	r3, [sp, #108]	; 0x6c
    f0cc:	f8dd c00c 	ldr.w	ip, [sp, #12]
    f0d0:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
    f0d4:	f8dd e008 	ldr.w	lr, [sp, #8]
    f0d8:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
    f0dc:	466c      	mov	r4, sp
    f0de:	2503      	movs	r5, #3
    f0e0:	6025      	str	r5, [r4, #0]
    f0e2:	a812      	add	r0, sp, #72	; 0x48
    f0e4:	ab18      	add	r3, sp, #96	; 0x60
    f0e6:	990a      	ldr	r1, [sp, #40]	; 0x28
    f0e8:	462a      	mov	r2, r5
    f0ea:	f000 f810 	bl	f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    f0ee:	e7ff      	b.n	f0f0 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12e>
    f0f0:	f64e 7014 	movw	r0, #61204	; 0xef14
    f0f4:	f2c0 0001 	movt	r0, #1
    f0f8:	f007 fc4b 	bl	16992 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    f0fc:	9001      	str	r0, [sp, #4]
    f0fe:	e7ff      	b.n	f100 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x13e>
    f100:	a812      	add	r0, sp, #72	; 0x48
    f102:	9901      	ldr	r1, [sp, #4]
    f104:	f007 fc82 	bl	16a0c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    f108:	defe      	udf	#254	; 0xfe
    }
    f10a:	b032      	add	sp, #200	; 0xc8
    f10c:	bdb0      	pop	{r4, r5, r7, pc}

0000f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>:
    f10e:	b580      	push	{r7, lr}
    f110:	b086      	sub	sp, #24
    f112:	f8dd c020 	ldr.w	ip, [sp, #32]
    f116:	9102      	str	r1, [sp, #8]
    f118:	9203      	str	r2, [sp, #12]
    f11a:	9304      	str	r3, [sp, #16]
    f11c:	f8cd c014 	str.w	ip, [sp, #20]
    f120:	f04f 0e00 	mov.w	lr, #0
    f124:	f8cd e004 	str.w	lr, [sp, #4]
    f128:	f8cd e000 	str.w	lr, [sp]
    f12c:	f8cd e000 	str.w	lr, [sp]
    f130:	6001      	str	r1, [r0, #0]
    f132:	6042      	str	r2, [r0, #4]
    f134:	9900      	ldr	r1, [sp, #0]
    f136:	9a01      	ldr	r2, [sp, #4]
    f138:	6081      	str	r1, [r0, #8]
    f13a:	60c2      	str	r2, [r0, #12]
    f13c:	6103      	str	r3, [r0, #16]
    f13e:	f8c0 c014 	str.w	ip, [r0, #20]
    f142:	b006      	add	sp, #24
    f144:	bd80      	pop	{r7, pc}

0000f146 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>:
    f146:	b082      	sub	sp, #8
    f148:	9001      	str	r0, [sp, #4]
    f14a:	7800      	ldrb	r0, [r0, #0]
    f14c:	07c0      	lsls	r0, r0, #31
    f14e:	2800      	cmp	r0, #0
    f150:	d004      	beq.n	f15c <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x16>
    f152:	e7ff      	b.n	f154 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0xe>
    f154:	2000      	movs	r0, #0
    f156:	f88d 0003 	strb.w	r0, [sp, #3]
    f15a:	e003      	b.n	f164 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    f15c:	2001      	movs	r0, #1
    f15e:	f88d 0003 	strb.w	r0, [sp, #3]
    f162:	e7ff      	b.n	f164 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    f164:	f89d 0003 	ldrb.w	r0, [sp, #3]
    f168:	b002      	add	sp, #8
    f16a:	4770      	bx	lr

0000f16c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>:
    f16c:	b08a      	sub	sp, #40	; 0x28
    f16e:	9005      	str	r0, [sp, #20]
    f170:	9107      	str	r1, [sp, #28]
    f172:	9208      	str	r2, [sp, #32]
    f174:	9805      	ldr	r0, [sp, #20]
    f176:	f1b0 0c01 	subs.w	ip, r0, #1
    f17a:	bf18      	it	ne
    f17c:	f04f 0c01 	movne.w	ip, #1
    f180:	2801      	cmp	r0, #1
    f182:	9304      	str	r3, [sp, #16]
    f184:	9203      	str	r2, [sp, #12]
    f186:	9102      	str	r1, [sp, #8]
    f188:	d010      	beq.n	f1ac <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x40>
    f18a:	e7ff      	b.n	f18c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x20>
    f18c:	9805      	ldr	r0, [sp, #20]
    f18e:	9006      	str	r0, [sp, #24]
    f190:	4668      	mov	r0, sp
    f192:	9904      	ldr	r1, [sp, #16]
    f194:	6001      	str	r1, [r0, #0]
    f196:	f64e 7324 	movw	r3, #61220	; 0xef24
    f19a:	f2c0 0301 	movt	r3, #1
    f19e:	aa06      	add	r2, sp, #24
    f1a0:	9802      	ldr	r0, [sp, #8]
    f1a2:	9903      	ldr	r1, [sp, #12]
    f1a4:	f007 fbce 	bl	16944 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
    f1a8:	defe      	udf	#254	; 0xfe
    f1aa:	defe      	udf	#254	; 0xfe
    f1ac:	9805      	ldr	r0, [sp, #20]
    f1ae:	2801      	cmp	r0, #1
    f1b0:	d102      	bne.n	f1b8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x4c>
    f1b2:	e7ff      	b.n	f1b4 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>
    f1b4:	b00a      	add	sp, #40	; 0x28
    f1b6:	4770      	bx	lr
    f1b8:	e7fc      	b.n	f1b4 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>

0000f1ba <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>:
    f1ba:	b580      	push	{r7, lr}
    f1bc:	b082      	sub	sp, #8
    f1be:	9001      	str	r0, [sp, #4]
    f1c0:	f7ff ffc1 	bl	f146 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>
    f1c4:	9000      	str	r0, [sp, #0]
    f1c6:	e7ff      	b.n	f1c8 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E+0xe>
    f1c8:	2001      	movs	r0, #1
    f1ca:	9900      	ldr	r1, [sp, #0]
    f1cc:	4388      	bics	r0, r1
    f1ce:	b002      	add	sp, #8
    f1d0:	bd80      	pop	{r7, pc}

0000f1d2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>:
    f1d2:	b082      	sub	sp, #8
    f1d4:	9001      	str	r0, [sp, #4]
    f1d6:	9000      	str	r0, [sp, #0]
    f1d8:	9800      	ldr	r0, [sp, #0]
    f1da:	b002      	add	sp, #8
    f1dc:	4770      	bx	lr

0000f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>:
    f1de:	b081      	sub	sp, #4
    f1e0:	4601      	mov	r1, r0
    f1e2:	f88d 0003 	strb.w	r0, [sp, #3]
    f1e6:	b001      	add	sp, #4
    f1e8:	4770      	bx	lr

0000f1ea <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>:
    f1ea:	b081      	sub	sp, #4
    f1ec:	9000      	str	r0, [sp, #0]
    f1ee:	b001      	add	sp, #4
    f1f0:	4770      	bx	lr

0000f1f2 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E>:
    f1f2:	b580      	push	{r7, lr}
    f1f4:	b08a      	sub	sp, #40	; 0x28
    f1f6:	9007      	str	r0, [sp, #28]
    f1f8:	9108      	str	r1, [sp, #32]
    f1fa:	9209      	str	r2, [sp, #36]	; 0x24
    f1fc:	2300      	movs	r3, #0
    f1fe:	9305      	str	r3, [sp, #20]
    f200:	9006      	str	r0, [sp, #24]
    f202:	9805      	ldr	r0, [sp, #20]
    f204:	9b06      	ldr	r3, [sp, #24]
    f206:	9104      	str	r1, [sp, #16]
    f208:	4619      	mov	r1, r3
    f20a:	9b04      	ldr	r3, [sp, #16]
    f20c:	9203      	str	r2, [sp, #12]
    f20e:	461a      	mov	r2, r3
    f210:	9b03      	ldr	r3, [sp, #12]
    f212:	f000 f828 	bl	f266 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>
    f216:	9002      	str	r0, [sp, #8]
    f218:	9101      	str	r1, [sp, #4]
    f21a:	e7ff      	b.n	f21c <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E+0x2a>
    f21c:	9802      	ldr	r0, [sp, #8]
    f21e:	9901      	ldr	r1, [sp, #4]
    f220:	b00a      	add	sp, #40	; 0x28
    f222:	bd80      	pop	{r7, pc}

0000f224 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E>:
    f224:	b580      	push	{r7, lr}
    f226:	b08a      	sub	sp, #40	; 0x28
    f228:	9006      	str	r0, [sp, #24]
    f22a:	9107      	str	r1, [sp, #28]
    f22c:	9208      	str	r2, [sp, #32]
    f22e:	9309      	str	r3, [sp, #36]	; 0x24
    f230:	9005      	str	r0, [sp, #20]
    f232:	4610      	mov	r0, r2
    f234:	9104      	str	r1, [sp, #16]
    f236:	4619      	mov	r1, r3
    f238:	f7ff faf5 	bl	e826 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    f23c:	9003      	str	r0, [sp, #12]
    f23e:	e7ff      	b.n	f240 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x1c>
    f240:	9803      	ldr	r0, [sp, #12]
    f242:	9905      	ldr	r1, [sp, #20]
    f244:	f7ff fa76 	bl	e734 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    f248:	9002      	str	r0, [sp, #8]
    f24a:	e7ff      	b.n	f24c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x28>
    f24c:	9804      	ldr	r0, [sp, #16]
    f24e:	9905      	ldr	r1, [sp, #20]
    f250:	1a41      	subs	r1, r0, r1
    f252:	9802      	ldr	r0, [sp, #8]
    f254:	f000 f8bb 	bl	f3ce <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
    f258:	9001      	str	r0, [sp, #4]
    f25a:	9100      	str	r1, [sp, #0]
    f25c:	e7ff      	b.n	f25e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x3a>
    f25e:	9801      	ldr	r0, [sp, #4]
    f260:	9900      	ldr	r1, [sp, #0]
    f262:	b00a      	add	sp, #40	; 0x28
    f264:	bd80      	pop	{r7, pc}

0000f266 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>:
    f266:	b580      	push	{r7, lr}
    f268:	b08c      	sub	sp, #48	; 0x30
    f26a:	9008      	str	r0, [sp, #32]
    f26c:	9109      	str	r1, [sp, #36]	; 0x24
    f26e:	920a      	str	r2, [sp, #40]	; 0x28
    f270:	930b      	str	r3, [sp, #44]	; 0x2c
    f272:	4288      	cmp	r0, r1
    f274:	9307      	str	r3, [sp, #28]
    f276:	9206      	str	r2, [sp, #24]
    f278:	9105      	str	r1, [sp, #20]
    f27a:	9004      	str	r0, [sp, #16]
    f27c:	d806      	bhi.n	f28c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x26>
    f27e:	e7ff      	b.n	f280 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x1a>
    f280:	9806      	ldr	r0, [sp, #24]
    f282:	9907      	ldr	r1, [sp, #28]
    f284:	f7ff fae6 	bl	e854 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f288:	9003      	str	r0, [sp, #12]
    f28a:	e004      	b.n	f296 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x30>
    f28c:	9804      	ldr	r0, [sp, #16]
    f28e:	9905      	ldr	r1, [sp, #20]
    f290:	f008 fafb 	bl	1788a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
    f294:	defe      	udf	#254	; 0xfe
    f296:	9805      	ldr	r0, [sp, #20]
    f298:	9903      	ldr	r1, [sp, #12]
    f29a:	4288      	cmp	r0, r1
    f29c:	d809      	bhi.n	f2b2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x4c>
    f29e:	e7ff      	b.n	f2a0 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x3a>
    f2a0:	9804      	ldr	r0, [sp, #16]
    f2a2:	9905      	ldr	r1, [sp, #20]
    f2a4:	9a06      	ldr	r2, [sp, #24]
    f2a6:	9b07      	ldr	r3, [sp, #28]
    f2a8:	f7ff ffbc 	bl	f224 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E>
    f2ac:	9002      	str	r0, [sp, #8]
    f2ae:	9101      	str	r1, [sp, #4]
    f2b0:	e00a      	b.n	f2c8 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x62>
    f2b2:	9806      	ldr	r0, [sp, #24]
    f2b4:	9907      	ldr	r1, [sp, #28]
    f2b6:	f7ff facd 	bl	e854 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f2ba:	9000      	str	r0, [sp, #0]
    f2bc:	e7ff      	b.n	f2be <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x58>
    f2be:	9805      	ldr	r0, [sp, #20]
    f2c0:	9900      	ldr	r1, [sp, #0]
    f2c2:	f008 fac0 	bl	17846 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
    f2c6:	defe      	udf	#254	; 0xfe
    f2c8:	9802      	ldr	r0, [sp, #8]
    f2ca:	9901      	ldr	r1, [sp, #4]
    f2cc:	b00c      	add	sp, #48	; 0x30
    f2ce:	bd80      	pop	{r7, pc}

0000f2d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>:
    f2d0:	b081      	sub	sp, #4
    f2d2:	9000      	str	r0, [sp, #0]
    f2d4:	b001      	add	sp, #4
    f2d6:	4770      	bx	lr

0000f2d8 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>:
    #[doc = " - __`evq`__: The event queue to pull an event from"]
    #[doc = ""]
    #[doc = " Return: The event from the queue"]
    pub fn os_eventq_get(arg1: *mut os_eventq) -> *mut os_event;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    f2d8:	b580      	push	{r7, lr}
    f2da:	b082      	sub	sp, #8
    f2dc:	9001      	str	r0, [sp, #4]
    f2de:	f00a fe39 	bl	19f54 <os_eventq_run>
    f2e2:	e7ff      	b.n	f2e4 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE+0xc>
    f2e4:	2001      	movs	r0, #1
    f2e6:	b002      	add	sp, #8
    f2e8:	bd80      	pop	{r7, pc}

0000f2ea <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>:
    #[doc = ""]
    #[doc = " - __`evq`__: The event queue to remove the event from"]
    #[doc = " - __`ev`__:  The event to remove from the queue"]
    pub fn os_eventq_remove(arg1: *mut os_eventq, arg2: *mut os_event);
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    f2ea:	b580      	push	{r7, lr}
    f2ec:	b084      	sub	sp, #16
    f2ee:	9002      	str	r0, [sp, #8]
    f2f0:	f00a fe5c 	bl	19fac <os_eventq_dflt_get>
    f2f4:	4601      	mov	r1, r0
    f2f6:	9003      	str	r0, [sp, #12]
    f2f8:	9101      	str	r1, [sp, #4]
    f2fa:	e7ff      	b.n	f2fc <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE+0x12>
    f2fc:	9801      	ldr	r0, [sp, #4]
    f2fe:	9902      	ldr	r1, [sp, #8]
    f300:	6048      	str	r0, [r1, #4]
    f302:	2200      	movs	r2, #0
    f304:	600a      	str	r2, [r1, #0]
    f306:	b004      	add	sp, #16
    f308:	bd80      	pop	{r7, pc}

0000f30a <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>:
impl Default for os_task_stailq {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    f30a:	b570      	push	{r4, r5, r6, lr}
    f30c:	b09c      	sub	sp, #112	; 0x70
    f30e:	f8dd c090 	ldr.w	ip, [sp, #144]	; 0x90
    f312:	f8dd e08c 	ldr.w	lr, [sp, #140]	; 0x8c
    f316:	9c22      	ldr	r4, [sp, #136]	; 0x88
    f318:	9d21      	ldr	r5, [sp, #132]	; 0x84
    f31a:	9e20      	ldr	r6, [sp, #128]	; 0x80
    f31c:	9013      	str	r0, [sp, #76]	; 0x4c
    f31e:	9114      	str	r1, [sp, #80]	; 0x50
    f320:	9215      	str	r2, [sp, #84]	; 0x54
    f322:	9316      	str	r3, [sp, #88]	; 0x58
    f324:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
    f328:	9418      	str	r4, [sp, #96]	; 0x60
    f32a:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
    f32e:	f8ad c06a 	strh.w	ip, [sp, #106]	; 0x6a
    f332:	9011      	str	r0, [sp, #68]	; 0x44
    f334:	4608      	mov	r0, r1
    f336:	9310      	str	r3, [sp, #64]	; 0x40
    f338:	920f      	str	r2, [sp, #60]	; 0x3c
    f33a:	910e      	str	r1, [sp, #56]	; 0x38
    f33c:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    f340:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
    f344:	940b      	str	r4, [sp, #44]	; 0x2c
    f346:	950a      	str	r5, [sp, #40]	; 0x28
    f348:	9609      	str	r6, [sp, #36]	; 0x24
    f34a:	f7ff fe3a 	bl	efc2 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>
    f34e:	e7ff      	b.n	f350 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x46>
    f350:	980e      	ldr	r0, [sp, #56]	; 0x38
    f352:	f7ff fe18 	bl	ef86 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>
    f356:	9008      	str	r0, [sp, #32]
    f358:	e7ff      	b.n	f35a <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x50>
    f35a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f35c:	990c      	ldr	r1, [sp, #48]	; 0x30
    f35e:	f000 f93b 	bl	f5d8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>
    f362:	9007      	str	r0, [sp, #28]
    f364:	e7ff      	b.n	f366 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x5c>
    f366:	980d      	ldr	r0, [sp, #52]	; 0x34
    f368:	b281      	uxth	r1, r0
    f36a:	466a      	mov	r2, sp
    f36c:	60d1      	str	r1, [r2, #12]
    f36e:	9907      	ldr	r1, [sp, #28]
    f370:	6091      	str	r1, [r2, #8]
    f372:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f374:	6053      	str	r3, [r2, #4]
    f376:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    f37a:	fa5f fe8c 	uxtb.w	lr, ip
    f37e:	f8c2 e000 	str.w	lr, [r2]
    f382:	9811      	ldr	r0, [sp, #68]	; 0x44
    f384:	9908      	ldr	r1, [sp, #32]
    f386:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    f388:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f38a:	f00b fbaf 	bl	1aaec <os_task_init>
    f38e:	4601      	mov	r1, r0
    f390:	901b      	str	r0, [sp, #108]	; 0x6c
    f392:	9106      	str	r1, [sp, #24]
    f394:	e7ff      	b.n	f396 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x8c>
    f396:	9806      	ldr	r0, [sp, #24]
    f398:	2800      	cmp	r0, #0
    f39a:	d005      	beq.n	f3a8 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x9e>
    f39c:	e7ff      	b.n	f39e <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x94>
    f39e:	9806      	ldr	r0, [sp, #24]
    f3a0:	f003 fedc 	bl	1315c <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>
    f3a4:	9005      	str	r0, [sp, #20]
    f3a6:	e004      	b.n	f3b2 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xa8>
    f3a8:	2000      	movs	r0, #0
    f3aa:	9012      	str	r0, [sp, #72]	; 0x48
    f3ac:	2001      	movs	r0, #1
    f3ae:	9012      	str	r0, [sp, #72]	; 0x48
    f3b0:	e002      	b.n	f3b8 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    f3b2:	9805      	ldr	r0, [sp, #20]
    f3b4:	9012      	str	r0, [sp, #72]	; 0x48
    f3b6:	e7ff      	b.n	f3b8 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    f3b8:	9812      	ldr	r0, [sp, #72]	; 0x48
    f3ba:	b01c      	add	sp, #112	; 0x70
    f3bc:	bd70      	pop	{r4, r5, r6, pc}

0000f3be <_ZN4core3ptr13drop_in_place17h1982c2483e0a2028E>:
    f3be:	b081      	sub	sp, #4
    f3c0:	9000      	str	r0, [sp, #0]
    f3c2:	b001      	add	sp, #4
    f3c4:	4770      	bx	lr

0000f3c6 <_ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E>:
    f3c6:	b081      	sub	sp, #4
    f3c8:	9000      	str	r0, [sp, #0]
    f3ca:	b001      	add	sp, #4
    f3cc:	4770      	bx	lr

0000f3ce <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>:
    f3ce:	b580      	push	{r7, lr}
    f3d0:	b084      	sub	sp, #16
    f3d2:	9002      	str	r0, [sp, #8]
    f3d4:	9103      	str	r1, [sp, #12]
    f3d6:	f000 f993 	bl	f700 <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>
    f3da:	9001      	str	r0, [sp, #4]
    f3dc:	9100      	str	r1, [sp, #0]
    f3de:	e7ff      	b.n	f3e0 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE+0x12>
    f3e0:	9801      	ldr	r0, [sp, #4]
    f3e2:	9900      	ldr	r1, [sp, #0]
    f3e4:	b004      	add	sp, #16
    f3e6:	bd80      	pop	{r7, pc}

0000f3e8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>:
    f3e8:	b5b0      	push	{r4, r5, r7, lr}
    f3ea:	b0b8      	sub	sp, #224	; 0xe0
    f3ec:	902f      	str	r0, [sp, #188]	; 0xbc
    f3ee:	9130      	str	r1, [sp, #192]	; 0xc0
    f3f0:	9231      	str	r2, [sp, #196]	; 0xc4
    f3f2:	9332      	str	r3, [sp, #200]	; 0xc8
    f3f4:	9013      	str	r0, [sp, #76]	; 0x4c
    f3f6:	9112      	str	r1, [sp, #72]	; 0x48
    f3f8:	9311      	str	r3, [sp, #68]	; 0x44
    f3fa:	9210      	str	r2, [sp, #64]	; 0x40
    f3fc:	f7ff fa2a 	bl	e854 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f400:	9016      	str	r0, [sp, #88]	; 0x58
    f402:	e7ff      	b.n	f404 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x1c>
    f404:	9810      	ldr	r0, [sp, #64]	; 0x40
    f406:	9911      	ldr	r1, [sp, #68]	; 0x44
    f408:	f7ff fa24 	bl	e854 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f40c:	9017      	str	r0, [sp, #92]	; 0x5c
    f40e:	e7ff      	b.n	f410 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x28>
    f410:	a816      	add	r0, sp, #88	; 0x58
    f412:	9014      	str	r0, [sp, #80]	; 0x50
    f414:	a817      	add	r0, sp, #92	; 0x5c
    f416:	9015      	str	r0, [sp, #84]	; 0x54
    f418:	9814      	ldr	r0, [sp, #80]	; 0x50
    f41a:	9033      	str	r0, [sp, #204]	; 0xcc
    f41c:	9915      	ldr	r1, [sp, #84]	; 0x54
    f41e:	9134      	str	r1, [sp, #208]	; 0xd0
    f420:	6802      	ldr	r2, [r0, #0]
    f422:	680b      	ldr	r3, [r1, #0]
    f424:	429a      	cmp	r2, r3
    f426:	900f      	str	r0, [sp, #60]	; 0x3c
    f428:	910e      	str	r1, [sp, #56]	; 0x38
    f42a:	d106      	bne.n	f43a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x52>
    f42c:	e7ff      	b.n	f42e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x46>
    f42e:	9810      	ldr	r0, [sp, #64]	; 0x40
    f430:	9911      	ldr	r1, [sp, #68]	; 0x44
    f432:	f7ff fa17 	bl	e864 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    f436:	900d      	str	r0, [sp, #52]	; 0x34
    f438:	e072      	b.n	f520 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x138>
    f43a:	f64e 7088 	movw	r0, #61320	; 0xef88
    f43e:	f2c0 0001 	movt	r0, #1
    f442:	6801      	ldr	r1, [r0, #0]
    f444:	980f      	ldr	r0, [sp, #60]	; 0x3c
    f446:	9027      	str	r0, [sp, #156]	; 0x9c
    f448:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f44a:	9228      	str	r2, [sp, #160]	; 0xa0
    f44c:	f64e 73c8 	movw	r3, #61384	; 0xefc8
    f450:	f2c0 0301 	movt	r3, #1
    f454:	681b      	ldr	r3, [r3, #0]
    f456:	f64e 7ccc 	movw	ip, #61388	; 0xefcc
    f45a:	f2c0 0c01 	movt	ip, #1
    f45e:	f8dc c000 	ldr.w	ip, [ip]
    f462:	46ee      	mov	lr, sp
    f464:	2400      	movs	r4, #0
    f466:	f8ce 4000 	str.w	r4, [lr]
    f46a:	a829      	add	r0, sp, #164	; 0xa4
    f46c:	2201      	movs	r2, #1
    f46e:	910c      	str	r1, [sp, #48]	; 0x30
    f470:	4619      	mov	r1, r3
    f472:	4663      	mov	r3, ip
    f474:	f7ff fe4b 	bl	f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    f478:	e7ff      	b.n	f47a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x92>
    f47a:	a827      	add	r0, sp, #156	; 0x9c
    f47c:	9024      	str	r0, [sp, #144]	; 0x90
    f47e:	a828      	add	r0, sp, #160	; 0xa0
    f480:	9025      	str	r0, [sp, #148]	; 0x94
    f482:	a829      	add	r0, sp, #164	; 0xa4
    f484:	9026      	str	r0, [sp, #152]	; 0x98
    f486:	9824      	ldr	r0, [sp, #144]	; 0x90
    f488:	9035      	str	r0, [sp, #212]	; 0xd4
    f48a:	9925      	ldr	r1, [sp, #148]	; 0x94
    f48c:	9136      	str	r1, [sp, #216]	; 0xd8
    f48e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f490:	9237      	str	r2, [sp, #220]	; 0xdc
    f492:	f243 032f 	movw	r3, #12335	; 0x302f
    f496:	f2c0 0301 	movt	r3, #1
    f49a:	910b      	str	r1, [sp, #44]	; 0x2c
    f49c:	4619      	mov	r1, r3
    f49e:	920a      	str	r2, [sp, #40]	; 0x28
    f4a0:	f003 fdd3 	bl	1304a <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    f4a4:	9009      	str	r0, [sp, #36]	; 0x24
    f4a6:	9108      	str	r1, [sp, #32]
    f4a8:	e7ff      	b.n	f4aa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xc2>
    f4aa:	f243 012f 	movw	r1, #12335	; 0x302f
    f4ae:	f2c0 0101 	movt	r1, #1
    f4b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f4b4:	f003 fdc9 	bl	1304a <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    f4b8:	9007      	str	r0, [sp, #28]
    f4ba:	9106      	str	r1, [sp, #24]
    f4bc:	e7ff      	b.n	f4be <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xd6>
    f4be:	f646 716f 	movw	r1, #28527	; 0x6f6f
    f4c2:	f2c0 0101 	movt	r1, #1
    f4c6:	980a      	ldr	r0, [sp, #40]	; 0x28
    f4c8:	f000 fd5e 	bl	ff88 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    f4cc:	9005      	str	r0, [sp, #20]
    f4ce:	9104      	str	r1, [sp, #16]
    f4d0:	e7ff      	b.n	f4d2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xea>
    f4d2:	9809      	ldr	r0, [sp, #36]	; 0x24
    f4d4:	901e      	str	r0, [sp, #120]	; 0x78
    f4d6:	9908      	ldr	r1, [sp, #32]
    f4d8:	911f      	str	r1, [sp, #124]	; 0x7c
    f4da:	9a07      	ldr	r2, [sp, #28]
    f4dc:	9220      	str	r2, [sp, #128]	; 0x80
    f4de:	9b06      	ldr	r3, [sp, #24]
    f4e0:	9321      	str	r3, [sp, #132]	; 0x84
    f4e2:	f8dd c014 	ldr.w	ip, [sp, #20]
    f4e6:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    f4ea:	f8dd e010 	ldr.w	lr, [sp, #16]
    f4ee:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
    f4f2:	466c      	mov	r4, sp
    f4f4:	2503      	movs	r5, #3
    f4f6:	6025      	str	r5, [r4, #0]
    f4f8:	a818      	add	r0, sp, #96	; 0x60
    f4fa:	ab1e      	add	r3, sp, #120	; 0x78
    f4fc:	990c      	ldr	r1, [sp, #48]	; 0x30
    f4fe:	462a      	mov	r2, r5
    f500:	f7ff fe05 	bl	f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    f504:	e7ff      	b.n	f506 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x11e>
    f506:	f24f 001c 	movw	r0, #61468	; 0xf01c
    f50a:	f2c0 0001 	movt	r0, #1
    f50e:	f007 fa40 	bl	16992 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    f512:	9003      	str	r0, [sp, #12]
    f514:	e7ff      	b.n	f516 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x12e>
    f516:	a818      	add	r0, sp, #96	; 0x60
    f518:	9903      	ldr	r1, [sp, #12]
    f51a:	f007 fa77 	bl	16a0c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    f51e:	defe      	udf	#254	; 0xfe
    f520:	9813      	ldr	r0, [sp, #76]	; 0x4c
    f522:	9912      	ldr	r1, [sp, #72]	; 0x48
    f524:	f7ff f97f 	bl	e826 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    f528:	9002      	str	r0, [sp, #8]
    f52a:	e7ff      	b.n	f52c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x144>
    f52c:	9813      	ldr	r0, [sp, #76]	; 0x4c
    f52e:	9912      	ldr	r1, [sp, #72]	; 0x48
    f530:	f7ff f990 	bl	e854 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f534:	9001      	str	r0, [sp, #4]
    f536:	e7ff      	b.n	f538 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x150>
    f538:	980d      	ldr	r0, [sp, #52]	; 0x34
    f53a:	9902      	ldr	r1, [sp, #8]
    f53c:	9a01      	ldr	r2, [sp, #4]
    f53e:	f7fe ff95 	bl	e46c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    f542:	e7ff      	b.n	f544 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x15c>
    f544:	b038      	add	sp, #224	; 0xe0
    f546:	bdb0      	pop	{r4, r5, r7, pc}

0000f548 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>:
    f548:	b580      	push	{r7, lr}
    f54a:	b086      	sub	sp, #24
    f54c:	9003      	str	r0, [sp, #12]
    f54e:	9104      	str	r1, [sp, #16]
    f550:	9205      	str	r2, [sp, #20]
    f552:	9002      	str	r0, [sp, #8]
    f554:	4610      	mov	r0, r2
    f556:	9a02      	ldr	r2, [sp, #8]
    f558:	9101      	str	r1, [sp, #4]
    f55a:	4611      	mov	r1, r2
    f55c:	9a01      	ldr	r2, [sp, #4]
    f55e:	f000 f861 	bl	f624 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>
    f562:	9000      	str	r0, [sp, #0]
    f564:	e7ff      	b.n	f566 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE+0x1e>
    f566:	9800      	ldr	r0, [sp, #0]
    f568:	b006      	add	sp, #24
    f56a:	bd80      	pop	{r7, pc}

0000f56c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>:
    f56c:	b580      	push	{r7, lr}
    f56e:	b08e      	sub	sp, #56	; 0x38
    f570:	9009      	str	r0, [sp, #36]	; 0x24
    f572:	910a      	str	r1, [sp, #40]	; 0x28
    f574:	9005      	str	r0, [sp, #20]
    f576:	9104      	str	r1, [sp, #16]
    f578:	f7ff f96c 	bl	e854 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f57c:	9003      	str	r0, [sp, #12]
    f57e:	e7ff      	b.n	f580 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x14>
    f580:	2101      	movs	r1, #1
    f582:	9803      	ldr	r0, [sp, #12]
    f584:	f000 fd15 	bl	ffb2 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>
    f588:	9002      	str	r0, [sp, #8]
    f58a:	9101      	str	r1, [sp, #4]
    f58c:	e7ff      	b.n	f58e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x22>
    f58e:	9802      	ldr	r0, [sp, #8]
    f590:	9901      	ldr	r1, [sp, #4]
    f592:	f000 fc17 	bl	fdc4 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>
    f596:	9108      	str	r1, [sp, #32]
    f598:	9007      	str	r0, [sp, #28]
    f59a:	e7ff      	b.n	f59c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x30>
    f59c:	9807      	ldr	r0, [sp, #28]
    f59e:	2800      	cmp	r0, #0
    f5a0:	d001      	beq.n	f5a6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x3a>
    f5a2:	e7ff      	b.n	f5a4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x38>
    f5a4:	e00c      	b.n	f5c0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x54>
    f5a6:	9808      	ldr	r0, [sp, #32]
    f5a8:	900c      	str	r0, [sp, #48]	; 0x30
    f5aa:	900d      	str	r0, [sp, #52]	; 0x34
    f5ac:	9905      	ldr	r1, [sp, #20]
    f5ae:	9000      	str	r0, [sp, #0]
    f5b0:	4608      	mov	r0, r1
    f5b2:	9904      	ldr	r1, [sp, #16]
    f5b4:	9a00      	ldr	r2, [sp, #0]
    f5b6:	f7ff ffc7 	bl	f548 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>
    f5ba:	9006      	str	r0, [sp, #24]
    f5bc:	e00b      	b.n	f5d6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x6a>
    f5be:	defe      	udf	#254	; 0xfe
    f5c0:	f003 fccd 	bl	12f5e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>
    f5c4:	e002      	b.n	f5cc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x60>
    f5c6:	9806      	ldr	r0, [sp, #24]
    f5c8:	b00e      	add	sp, #56	; 0x38
    f5ca:	bd80      	pop	{r7, pc}
    f5cc:	f000 fbf4 	bl	fdb8 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>
    f5d0:	9006      	str	r0, [sp, #24]
    f5d2:	e7ff      	b.n	f5d4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x68>
    f5d4:	e7f7      	b.n	f5c6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>
    f5d6:	e7f6      	b.n	f5c6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>

0000f5d8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>:
    f5d8:	b082      	sub	sp, #8
    f5da:	9000      	str	r0, [sp, #0]
    f5dc:	9101      	str	r1, [sp, #4]
    f5de:	b002      	add	sp, #8
    f5e0:	4770      	bx	lr

0000f5e2 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E>:
    f5e2:	b580      	push	{r7, lr}
    f5e4:	b088      	sub	sp, #32
    f5e6:	9005      	str	r0, [sp, #20]
    f5e8:	9106      	str	r1, [sp, #24]
    f5ea:	9207      	str	r2, [sp, #28]
    f5ec:	9004      	str	r0, [sp, #16]
    f5ee:	4610      	mov	r0, r2
    f5f0:	9a04      	ldr	r2, [sp, #16]
    f5f2:	9103      	str	r1, [sp, #12]
    f5f4:	4611      	mov	r1, r2
    f5f6:	9a03      	ldr	r2, [sp, #12]
    f5f8:	f7ff fdfb 	bl	f1f2 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E>
    f5fc:	9002      	str	r0, [sp, #8]
    f5fe:	9101      	str	r1, [sp, #4]
    f600:	e7ff      	b.n	f602 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E+0x20>
    f602:	9802      	ldr	r0, [sp, #8]
    f604:	9901      	ldr	r1, [sp, #4]
    f606:	b008      	add	sp, #32
    f608:	bd80      	pop	{r7, pc}

0000f60a <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>:
    f60a:	b580      	push	{r7, lr}
    f60c:	b084      	sub	sp, #16
    f60e:	9002      	str	r0, [sp, #8]
    f610:	9103      	str	r1, [sp, #12]
    f612:	f003 fc61 	bl	12ed8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>
    f616:	9001      	str	r0, [sp, #4]
    f618:	9100      	str	r1, [sp, #0]
    f61a:	e7ff      	b.n	f61c <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E+0x12>
    f61c:	9801      	ldr	r0, [sp, #4]
    f61e:	9900      	ldr	r1, [sp, #0]
    f620:	b004      	add	sp, #16
    f622:	bd80      	pop	{r7, pc}

0000f624 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>:
    f624:	b580      	push	{r7, lr}
    f626:	b08a      	sub	sp, #40	; 0x28
    f628:	9007      	str	r0, [sp, #28]
    f62a:	9108      	str	r1, [sp, #32]
    f62c:	9209      	str	r2, [sp, #36]	; 0x24
    f62e:	9005      	str	r0, [sp, #20]
    f630:	4608      	mov	r0, r1
    f632:	9104      	str	r1, [sp, #16]
    f634:	4611      	mov	r1, r2
    f636:	9203      	str	r2, [sp, #12]
    f638:	f7ff f90c 	bl	e854 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f63c:	9002      	str	r0, [sp, #8]
    f63e:	e7ff      	b.n	f640 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x1c>
    f640:	9805      	ldr	r0, [sp, #20]
    f642:	9902      	ldr	r1, [sp, #8]
    f644:	4288      	cmp	r0, r1
    f646:	d303      	bcc.n	f650 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x2c>
    f648:	e7ff      	b.n	f64a <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x26>
    f64a:	2000      	movs	r0, #0
    f64c:	9006      	str	r0, [sp, #24]
    f64e:	e009      	b.n	f664 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    f650:	9805      	ldr	r0, [sp, #20]
    f652:	9904      	ldr	r1, [sp, #16]
    f654:	9a03      	ldr	r2, [sp, #12]
    f656:	f7ff f929 	bl	e8ac <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>
    f65a:	9001      	str	r0, [sp, #4]
    f65c:	e7ff      	b.n	f65e <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x3a>
    f65e:	9801      	ldr	r0, [sp, #4]
    f660:	9006      	str	r0, [sp, #24]
    f662:	e7ff      	b.n	f664 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    f664:	9806      	ldr	r0, [sp, #24]
    f666:	b00a      	add	sp, #40	; 0x28
    f668:	bd80      	pop	{r7, pc}

0000f66a <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>:
//! Display messages on Arm Semihosting Console (via OpenOCD)

///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn print(msg: &str) {
    f66a:	b580      	push	{r7, lr}
    f66c:	b08a      	sub	sp, #40	; 0x28
    f66e:	9004      	str	r0, [sp, #16]
    f670:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    let buf = msg.as_ptr();
    f672:	9003      	str	r0, [sp, #12]
    f674:	9102      	str	r1, [sp, #8]
    f676:	f000 f86e 	bl	f756 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    f67a:	4601      	mov	r1, r0
    f67c:	9006      	str	r0, [sp, #24]
    f67e:	9101      	str	r1, [sp, #4]
    f680:	e7ff      	b.n	f682 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x18>
    let len = msg.len() as u32;
    f682:	9803      	ldr	r0, [sp, #12]
    f684:	9902      	ldr	r1, [sp, #8]
    f686:	f000 f850 	bl	f72a <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    f68a:	9000      	str	r0, [sp, #0]
    f68c:	e7ff      	b.n	f68e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x24>
    f68e:	9800      	ldr	r0, [sp, #0]
    f690:	9007      	str	r0, [sp, #28]
    f692:	2100      	movs	r1, #0

    //  TODO: Dispatch the Mynewt C function `console_buffer`.
    //  TODO: Use a procedural macro to compute the hash of function name `console_buffer`.
    let hash = 0;  //  TODO
    f694:	9108      	str	r1, [sp, #32]
    //  TODO: Lookup the dispatch address of `console_buffer`.
    let _addr = get_dispatch_address(hash);
    f696:	4608      	mov	r0, r1
    f698:	f000 f809 	bl	f6ae <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>
    f69c:	9009      	str	r0, [sp, #36]	; 0x24
    f69e:	e7ff      	b.n	f6a0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x36>
    //  TODO: Call the `console_buffer` function using the dispatch address.
    unsafe { console_buffer(buf, len); }
    f6a0:	9801      	ldr	r0, [sp, #4]
    f6a2:	9900      	ldr	r1, [sp, #0]
    f6a4:	f009 f914 	bl	188d0 <console_buffer>
    f6a8:	e7ff      	b.n	f6aa <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x40>
}
    f6aa:	b00a      	add	sp, #40	; 0x28
    f6ac:	bd80      	pop	{r7, pc}

0000f6ae <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>:

/// Return the Dispatch Address for the OS function whose function name hashed is `hash`
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn get_dispatch_address(_hash: u32) -> u32 {
    f6ae:	b081      	sub	sp, #4
    f6b0:	9000      	str	r0, [sp, #0]
    f6b2:	2000      	movs	r0, #0
    //  TODO: Lookup the Dispatch Table for the hash of function name
    0
}
    f6b4:	b001      	add	sp, #4
    f6b6:	4770      	bx	lr

0000f6b8 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>:
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
}

///  Add the string to the output buffer.
pub fn buffer(msg: &str) {
    f6b8:	b580      	push	{r7, lr}
    f6ba:	b086      	sub	sp, #24
    f6bc:	9004      	str	r0, [sp, #16]
    f6be:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
    f6c0:	9003      	str	r0, [sp, #12]
    f6c2:	9102      	str	r1, [sp, #8]
    f6c4:	f000 f847 	bl	f756 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    f6c8:	9001      	str	r0, [sp, #4]
    f6ca:	e7ff      	b.n	f6cc <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x14>
    f6cc:	9803      	ldr	r0, [sp, #12]
    f6ce:	9902      	ldr	r1, [sp, #8]
    f6d0:	f000 f82b 	bl	f72a <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    f6d4:	9000      	str	r0, [sp, #0]
    f6d6:	e7ff      	b.n	f6d8 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x20>
    f6d8:	9801      	ldr	r0, [sp, #4]
    f6da:	9900      	ldr	r1, [sp, #0]
    f6dc:	f009 f8f8 	bl	188d0 <console_buffer>
    f6e0:	e7ff      	b.n	f6e2 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x2a>
}
    f6e2:	b006      	add	sp, #24
    f6e4:	bd80      	pop	{r7, pc}

0000f6e6 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>:
    unsafe { console_printhex(v); }
}

///  Write an int to the output buffer.
///  C API: `void console_printint(int i)`
pub fn printint(v: i32) {
    f6e6:	b580      	push	{r7, lr}
    f6e8:	b082      	sub	sp, #8
    f6ea:	9001      	str	r0, [sp, #4]
    unsafe { console_printint(v); }
    f6ec:	f009 f960 	bl	189b0 <console_printint>
    f6f0:	e7ff      	b.n	f6f2 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E+0xc>
}
    f6f2:	b002      	add	sp, #8
    f6f4:	bd80      	pop	{r7, pc}

0000f6f6 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>:
pub fn dump(buffer: *const u8, len: u32) {
    unsafe { console_dump(buffer, len); }
}

///  Flush the output buffer to the console.
pub fn flush() {
    f6f6:	b580      	push	{r7, lr}
    unsafe { console_flush(); }
    f6f8:	f009 f8c2 	bl	18880 <console_flush>
    f6fc:	e7ff      	b.n	f6fe <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E+0x8>
}
    f6fe:	bd80      	pop	{r7, pc}

0000f700 <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>:
    f700:	b086      	sub	sp, #24
    f702:	9004      	str	r0, [sp, #16]
    f704:	9105      	str	r1, [sp, #20]
    f706:	9002      	str	r0, [sp, #8]
    f708:	9103      	str	r1, [sp, #12]
    f70a:	9802      	ldr	r0, [sp, #8]
    f70c:	9903      	ldr	r1, [sp, #12]
    f70e:	9000      	str	r0, [sp, #0]
    f710:	9101      	str	r1, [sp, #4]
    f712:	9800      	ldr	r0, [sp, #0]
    f714:	9901      	ldr	r1, [sp, #4]
    f716:	b006      	add	sp, #24
    f718:	4770      	bx	lr

0000f71a <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>:
    f71a:	b082      	sub	sp, #8
    f71c:	460a      	mov	r2, r1
    f71e:	9000      	str	r0, [sp, #0]
    f720:	f88d 1007 	strb.w	r1, [sp, #7]
    f724:	7001      	strb	r1, [r0, #0]
    f726:	b002      	add	sp, #8
    f728:	4770      	bx	lr

0000f72a <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>:
    f72a:	b580      	push	{r7, lr}
    f72c:	b08a      	sub	sp, #40	; 0x28
    f72e:	9004      	str	r0, [sp, #16]
    f730:	9105      	str	r1, [sp, #20]
    f732:	9008      	str	r0, [sp, #32]
    f734:	9109      	str	r1, [sp, #36]	; 0x24
    f736:	9006      	str	r0, [sp, #24]
    f738:	9107      	str	r1, [sp, #28]
    f73a:	9806      	ldr	r0, [sp, #24]
    f73c:	9907      	ldr	r1, [sp, #28]
    f73e:	9003      	str	r0, [sp, #12]
    f740:	9102      	str	r1, [sp, #8]
    f742:	e7ff      	b.n	f744 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x1a>
    f744:	9803      	ldr	r0, [sp, #12]
    f746:	9902      	ldr	r1, [sp, #8]
    f748:	f7ff f884 	bl	e854 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f74c:	9001      	str	r0, [sp, #4]
    f74e:	e7ff      	b.n	f750 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x26>
    f750:	9801      	ldr	r0, [sp, #4]
    f752:	b00a      	add	sp, #40	; 0x28
    f754:	bd80      	pop	{r7, pc}

0000f756 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>:
    f756:	b082      	sub	sp, #8
    f758:	9000      	str	r0, [sp, #0]
    f75a:	9101      	str	r1, [sp, #4]
    f75c:	b002      	add	sp, #8
    f75e:	4770      	bx	lr

0000f760 <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>:
};

/// Rust Embedded HAL interface for Mynewt SPI
impl SPI {
    /// Create a new SPI port
    pub fn new() -> Self {
    f760:	b082      	sub	sp, #8
    f762:	2000      	movs	r0, #0
        SPI {
    f764:	9000      	str	r0, [sp, #0]
    f766:	9001      	str	r0, [sp, #4]
            spi_num: 0,
            cs_pin:  0,
        }
    }
    f768:	9800      	ldr	r0, [sp, #0]
    f76a:	9901      	ldr	r1, [sp, #4]
    f76c:	b002      	add	sp, #8
    f76e:	4770      	bx	lr

0000f770 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>:

    /// Initiaise the SPI port
    pub fn init(&mut self, spi_num: i32, cs_pin: i32, spi_settings: *mut hal::hal_spi_settings) 
    f770:	b5b0      	push	{r4, r5, r7, lr}
    f772:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
    f776:	9077      	str	r0, [sp, #476]	; 0x1dc
    f778:	9178      	str	r1, [sp, #480]	; 0x1e0
    f77a:	9279      	str	r2, [sp, #484]	; 0x1e4
    f77c:	937a      	str	r3, [sp, #488]	; 0x1e8
        -> MynewtResult<()> {
        let rc = unsafe { hal::hal_spi_config(spi_num, spi_settings) };
    f77e:	9028      	str	r0, [sp, #160]	; 0xa0
    f780:	4608      	mov	r0, r1
    f782:	9127      	str	r1, [sp, #156]	; 0x9c
    f784:	4619      	mov	r1, r3
    f786:	9226      	str	r2, [sp, #152]	; 0x98
    f788:	f009 fe6a 	bl	19460 <hal_spi_config>
    f78c:	9029      	str	r0, [sp, #164]	; 0xa4
    f78e:	e7ff      	b.n	f790 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x20>
        assert_eq!(rc, 0, "spi config fail");
    f790:	f24f 002c 	movw	r0, #61484	; 0xf02c
    f794:	f2c0 0001 	movt	r0, #1
    f798:	6800      	ldr	r0, [r0, #0]
    f79a:	a929      	add	r1, sp, #164	; 0xa4
    f79c:	912a      	str	r1, [sp, #168]	; 0xa8
    f79e:	902b      	str	r0, [sp, #172]	; 0xac
    f7a0:	982a      	ldr	r0, [sp, #168]	; 0xa8
    f7a2:	907b      	str	r0, [sp, #492]	; 0x1ec
    f7a4:	992b      	ldr	r1, [sp, #172]	; 0xac
    f7a6:	917c      	str	r1, [sp, #496]	; 0x1f0
    f7a8:	6802      	ldr	r2, [r0, #0]
    f7aa:	680b      	ldr	r3, [r1, #0]
    f7ac:	429a      	cmp	r2, r3
    f7ae:	9025      	str	r0, [sp, #148]	; 0x94
    f7b0:	9124      	str	r1, [sp, #144]	; 0x90
    f7b2:	d105      	bne.n	f7c0 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x50>
    f7b4:	e7ff      	b.n	f7b6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x46>

        let rc = unsafe { hal::hal_spi_enable(spi_num) };
    f7b6:	9827      	ldr	r0, [sp, #156]	; 0x9c
    f7b8:	f009 fe6e 	bl	19498 <hal_spi_enable>
    f7bc:	9043      	str	r0, [sp, #268]	; 0x10c
    f7be:	e072      	b.n	f8a6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x136>
        assert_eq!(rc, 0, "spi config fail");
    f7c0:	f24f 0084 	movw	r0, #61572	; 0xf084
    f7c4:	f2c0 0001 	movt	r0, #1
    f7c8:	6801      	ldr	r1, [r0, #0]
    f7ca:	9825      	ldr	r0, [sp, #148]	; 0x94
    f7cc:	903b      	str	r0, [sp, #236]	; 0xec
    f7ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
    f7d0:	923c      	str	r2, [sp, #240]	; 0xf0
    f7d2:	f24f 03a0 	movw	r3, #61600	; 0xf0a0
    f7d6:	f2c0 0301 	movt	r3, #1
    f7da:	681b      	ldr	r3, [r3, #0]
    f7dc:	f24f 0ca4 	movw	ip, #61604	; 0xf0a4
    f7e0:	f2c0 0c01 	movt	ip, #1
    f7e4:	f8dc c000 	ldr.w	ip, [ip]
    f7e8:	46ee      	mov	lr, sp
    f7ea:	2400      	movs	r4, #0
    f7ec:	f8ce 4000 	str.w	r4, [lr]
    f7f0:	a83d      	add	r0, sp, #244	; 0xf4
    f7f2:	2201      	movs	r2, #1
    f7f4:	9123      	str	r1, [sp, #140]	; 0x8c
    f7f6:	4619      	mov	r1, r3
    f7f8:	4663      	mov	r3, ip
    f7fa:	f7ff fc88 	bl	f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    f7fe:	e7ff      	b.n	f800 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x90>
    f800:	a83b      	add	r0, sp, #236	; 0xec
    f802:	9038      	str	r0, [sp, #224]	; 0xe0
    f804:	a83c      	add	r0, sp, #240	; 0xf0
    f806:	9039      	str	r0, [sp, #228]	; 0xe4
    f808:	a83d      	add	r0, sp, #244	; 0xf4
    f80a:	903a      	str	r0, [sp, #232]	; 0xe8
    f80c:	9838      	ldr	r0, [sp, #224]	; 0xe0
    f80e:	907d      	str	r0, [sp, #500]	; 0x1f4
    f810:	9939      	ldr	r1, [sp, #228]	; 0xe4
    f812:	917e      	str	r1, [sp, #504]	; 0x1f8
    f814:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    f816:	927f      	str	r2, [sp, #508]	; 0x1fc
    f818:	f64f 639b 	movw	r3, #65179	; 0xfe9b
    f81c:	f2c0 0300 	movt	r3, #0
    f820:	9122      	str	r1, [sp, #136]	; 0x88
    f822:	4619      	mov	r1, r3
    f824:	9221      	str	r2, [sp, #132]	; 0x84
    f826:	f000 fb70 	bl	ff0a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    f82a:	9020      	str	r0, [sp, #128]	; 0x80
    f82c:	911f      	str	r1, [sp, #124]	; 0x7c
    f82e:	e7ff      	b.n	f830 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xc0>
    f830:	f64f 619b 	movw	r1, #65179	; 0xfe9b
    f834:	f2c0 0100 	movt	r1, #0
    f838:	9822      	ldr	r0, [sp, #136]	; 0x88
    f83a:	f000 fb66 	bl	ff0a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    f83e:	901e      	str	r0, [sp, #120]	; 0x78
    f840:	911d      	str	r1, [sp, #116]	; 0x74
    f842:	e7ff      	b.n	f844 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xd4>
    f844:	f646 716f 	movw	r1, #28527	; 0x6f6f
    f848:	f2c0 0101 	movt	r1, #1
    f84c:	9821      	ldr	r0, [sp, #132]	; 0x84
    f84e:	f000 fb9b 	bl	ff88 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    f852:	901c      	str	r0, [sp, #112]	; 0x70
    f854:	911b      	str	r1, [sp, #108]	; 0x6c
    f856:	e7ff      	b.n	f858 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xe8>
    f858:	9820      	ldr	r0, [sp, #128]	; 0x80
    f85a:	9032      	str	r0, [sp, #200]	; 0xc8
    f85c:	991f      	ldr	r1, [sp, #124]	; 0x7c
    f85e:	9133      	str	r1, [sp, #204]	; 0xcc
    f860:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    f862:	9234      	str	r2, [sp, #208]	; 0xd0
    f864:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    f866:	9335      	str	r3, [sp, #212]	; 0xd4
    f868:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
    f86c:	f8cd c0d8 	str.w	ip, [sp, #216]	; 0xd8
    f870:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
    f874:	f8cd e0dc 	str.w	lr, [sp, #220]	; 0xdc
    f878:	466c      	mov	r4, sp
    f87a:	2503      	movs	r5, #3
    f87c:	6025      	str	r5, [r4, #0]
    f87e:	a82c      	add	r0, sp, #176	; 0xb0
    f880:	ab32      	add	r3, sp, #200	; 0xc8
    f882:	9923      	ldr	r1, [sp, #140]	; 0x8c
    f884:	462a      	mov	r2, r5
    f886:	f7ff fc42 	bl	f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    f88a:	e7ff      	b.n	f88c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x11c>
    f88c:	f24f 00c0 	movw	r0, #61632	; 0xf0c0
    f890:	f2c0 0001 	movt	r0, #1
    f894:	f007 f87d 	bl	16992 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    f898:	901a      	str	r0, [sp, #104]	; 0x68
    f89a:	e7ff      	b.n	f89c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x12c>
    f89c:	a82c      	add	r0, sp, #176	; 0xb0
    f89e:	991a      	ldr	r1, [sp, #104]	; 0x68
    f8a0:	f007 f8b4 	bl	16a0c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    f8a4:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi enable fail");
    f8a6:	f24f 002c 	movw	r0, #61484	; 0xf02c
    f8aa:	f2c0 0001 	movt	r0, #1
    f8ae:	6800      	ldr	r0, [r0, #0]
    f8b0:	a943      	add	r1, sp, #268	; 0x10c
    f8b2:	9144      	str	r1, [sp, #272]	; 0x110
    f8b4:	9045      	str	r0, [sp, #276]	; 0x114
    f8b6:	9844      	ldr	r0, [sp, #272]	; 0x110
    f8b8:	9080      	str	r0, [sp, #512]	; 0x200
    f8ba:	9945      	ldr	r1, [sp, #276]	; 0x114
    f8bc:	9181      	str	r1, [sp, #516]	; 0x204
    f8be:	6802      	ldr	r2, [r0, #0]
    f8c0:	680b      	ldr	r3, [r1, #0]
    f8c2:	429a      	cmp	r2, r3
    f8c4:	9019      	str	r0, [sp, #100]	; 0x64
    f8c6:	9118      	str	r1, [sp, #96]	; 0x60
    f8c8:	d106      	bne.n	f8d8 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x168>
    f8ca:	e7ff      	b.n	f8cc <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x15c>
    f8cc:	2101      	movs	r1, #1

        let rc = unsafe { hal::hal_gpio_init_out(cs_pin, 1) };
    f8ce:	9826      	ldr	r0, [sp, #152]	; 0x98
    f8d0:	f009 f9b8 	bl	18c44 <hal_gpio_init_out>
    f8d4:	905d      	str	r0, [sp, #372]	; 0x174
    f8d6:	e072      	b.n	f9be <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x24e>
        assert_eq!(rc, 0, "spi enable fail");
    f8d8:	f24f 0084 	movw	r0, #61572	; 0xf084
    f8dc:	f2c0 0001 	movt	r0, #1
    f8e0:	6801      	ldr	r1, [r0, #0]
    f8e2:	9819      	ldr	r0, [sp, #100]	; 0x64
    f8e4:	9055      	str	r0, [sp, #340]	; 0x154
    f8e6:	9a18      	ldr	r2, [sp, #96]	; 0x60
    f8e8:	9256      	str	r2, [sp, #344]	; 0x158
    f8ea:	f24f 03e8 	movw	r3, #61672	; 0xf0e8
    f8ee:	f2c0 0301 	movt	r3, #1
    f8f2:	681b      	ldr	r3, [r3, #0]
    f8f4:	f24f 0ca4 	movw	ip, #61604	; 0xf0a4
    f8f8:	f2c0 0c01 	movt	ip, #1
    f8fc:	f8dc c000 	ldr.w	ip, [ip]
    f900:	46ee      	mov	lr, sp
    f902:	2400      	movs	r4, #0
    f904:	f8ce 4000 	str.w	r4, [lr]
    f908:	a857      	add	r0, sp, #348	; 0x15c
    f90a:	2201      	movs	r2, #1
    f90c:	9117      	str	r1, [sp, #92]	; 0x5c
    f90e:	4619      	mov	r1, r3
    f910:	4663      	mov	r3, ip
    f912:	f7ff fbfc 	bl	f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    f916:	e7ff      	b.n	f918 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1a8>
    f918:	a855      	add	r0, sp, #340	; 0x154
    f91a:	9052      	str	r0, [sp, #328]	; 0x148
    f91c:	a856      	add	r0, sp, #344	; 0x158
    f91e:	9053      	str	r0, [sp, #332]	; 0x14c
    f920:	a857      	add	r0, sp, #348	; 0x15c
    f922:	9054      	str	r0, [sp, #336]	; 0x150
    f924:	9852      	ldr	r0, [sp, #328]	; 0x148
    f926:	9082      	str	r0, [sp, #520]	; 0x208
    f928:	9953      	ldr	r1, [sp, #332]	; 0x14c
    f92a:	9183      	str	r1, [sp, #524]	; 0x20c
    f92c:	9a54      	ldr	r2, [sp, #336]	; 0x150
    f92e:	9284      	str	r2, [sp, #528]	; 0x210
    f930:	f64f 639b 	movw	r3, #65179	; 0xfe9b
    f934:	f2c0 0300 	movt	r3, #0
    f938:	9116      	str	r1, [sp, #88]	; 0x58
    f93a:	4619      	mov	r1, r3
    f93c:	9215      	str	r2, [sp, #84]	; 0x54
    f93e:	f000 fae4 	bl	ff0a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    f942:	9014      	str	r0, [sp, #80]	; 0x50
    f944:	9113      	str	r1, [sp, #76]	; 0x4c
    f946:	e7ff      	b.n	f948 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1d8>
    f948:	f64f 619b 	movw	r1, #65179	; 0xfe9b
    f94c:	f2c0 0100 	movt	r1, #0
    f950:	9816      	ldr	r0, [sp, #88]	; 0x58
    f952:	f000 fada 	bl	ff0a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    f956:	9012      	str	r0, [sp, #72]	; 0x48
    f958:	9111      	str	r1, [sp, #68]	; 0x44
    f95a:	e7ff      	b.n	f95c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1ec>
    f95c:	f646 716f 	movw	r1, #28527	; 0x6f6f
    f960:	f2c0 0101 	movt	r1, #1
    f964:	9815      	ldr	r0, [sp, #84]	; 0x54
    f966:	f000 fb0f 	bl	ff88 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    f96a:	9010      	str	r0, [sp, #64]	; 0x40
    f96c:	910f      	str	r1, [sp, #60]	; 0x3c
    f96e:	e7ff      	b.n	f970 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x200>
    f970:	9814      	ldr	r0, [sp, #80]	; 0x50
    f972:	904c      	str	r0, [sp, #304]	; 0x130
    f974:	9913      	ldr	r1, [sp, #76]	; 0x4c
    f976:	914d      	str	r1, [sp, #308]	; 0x134
    f978:	9a12      	ldr	r2, [sp, #72]	; 0x48
    f97a:	924e      	str	r2, [sp, #312]	; 0x138
    f97c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f97e:	934f      	str	r3, [sp, #316]	; 0x13c
    f980:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    f984:	f8cd c140 	str.w	ip, [sp, #320]	; 0x140
    f988:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
    f98c:	f8cd e144 	str.w	lr, [sp, #324]	; 0x144
    f990:	466c      	mov	r4, sp
    f992:	2503      	movs	r5, #3
    f994:	6025      	str	r5, [r4, #0]
    f996:	a846      	add	r0, sp, #280	; 0x118
    f998:	ab4c      	add	r3, sp, #304	; 0x130
    f99a:	9917      	ldr	r1, [sp, #92]	; 0x5c
    f99c:	462a      	mov	r2, r5
    f99e:	f7ff fbb6 	bl	f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    f9a2:	e7ff      	b.n	f9a4 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x234>
    f9a4:	f24f 00ec 	movw	r0, #61676	; 0xf0ec
    f9a8:	f2c0 0001 	movt	r0, #1
    f9ac:	f006 fff1 	bl	16992 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    f9b0:	900e      	str	r0, [sp, #56]	; 0x38
    f9b2:	e7ff      	b.n	f9b4 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x244>
    f9b4:	a846      	add	r0, sp, #280	; 0x118
    f9b6:	990e      	ldr	r1, [sp, #56]	; 0x38
    f9b8:	f007 f828 	bl	16a0c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    f9bc:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi init fail");
    f9be:	f24f 002c 	movw	r0, #61484	; 0xf02c
    f9c2:	f2c0 0001 	movt	r0, #1
    f9c6:	6800      	ldr	r0, [r0, #0]
    f9c8:	a95d      	add	r1, sp, #372	; 0x174
    f9ca:	915e      	str	r1, [sp, #376]	; 0x178
    f9cc:	905f      	str	r0, [sp, #380]	; 0x17c
    f9ce:	985e      	ldr	r0, [sp, #376]	; 0x178
    f9d0:	9085      	str	r0, [sp, #532]	; 0x214
    f9d2:	995f      	ldr	r1, [sp, #380]	; 0x17c
    f9d4:	9186      	str	r1, [sp, #536]	; 0x218
    f9d6:	6802      	ldr	r2, [r0, #0]
    f9d8:	680b      	ldr	r3, [r1, #0]
    f9da:	429a      	cmp	r2, r3
    f9dc:	900d      	str	r0, [sp, #52]	; 0x34
    f9de:	910c      	str	r1, [sp, #48]	; 0x30
    f9e0:	d109      	bne.n	f9f6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x286>
    f9e2:	e7ff      	b.n	f9e4 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x274>
        self.spi_num = spi_num;
    f9e4:	9827      	ldr	r0, [sp, #156]	; 0x9c
    f9e6:	9928      	ldr	r1, [sp, #160]	; 0xa0
    f9e8:	6008      	str	r0, [r1, #0]
        self.cs_pin  = cs_pin;
    f9ea:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f9ec:	604a      	str	r2, [r1, #4]
    f9ee:	2001      	movs	r0, #1
        Ok(())
    }
    f9f0:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228
    f9f4:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "spi init fail");
    f9f6:	f24f 0084 	movw	r0, #61572	; 0xf084
    f9fa:	f2c0 0001 	movt	r0, #1
    f9fe:	6801      	ldr	r1, [r0, #0]
    fa00:	980d      	ldr	r0, [sp, #52]	; 0x34
    fa02:	906f      	str	r0, [sp, #444]	; 0x1bc
    fa04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    fa06:	9270      	str	r2, [sp, #448]	; 0x1c0
    fa08:	f24f 1314 	movw	r3, #61716	; 0xf114
    fa0c:	f2c0 0301 	movt	r3, #1
    fa10:	681b      	ldr	r3, [r3, #0]
    fa12:	f24f 0ca4 	movw	ip, #61604	; 0xf0a4
    fa16:	f2c0 0c01 	movt	ip, #1
    fa1a:	f8dc c000 	ldr.w	ip, [ip]
    fa1e:	46ee      	mov	lr, sp
    fa20:	2400      	movs	r4, #0
    fa22:	f8ce 4000 	str.w	r4, [lr]
    fa26:	a871      	add	r0, sp, #452	; 0x1c4
    fa28:	2201      	movs	r2, #1
    fa2a:	910b      	str	r1, [sp, #44]	; 0x2c
    fa2c:	4619      	mov	r1, r3
    fa2e:	4663      	mov	r3, ip
    fa30:	f7ff fb6d 	bl	f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    fa34:	e7ff      	b.n	fa36 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2c6>
    fa36:	a86f      	add	r0, sp, #444	; 0x1bc
    fa38:	906c      	str	r0, [sp, #432]	; 0x1b0
    fa3a:	a870      	add	r0, sp, #448	; 0x1c0
    fa3c:	906d      	str	r0, [sp, #436]	; 0x1b4
    fa3e:	a871      	add	r0, sp, #452	; 0x1c4
    fa40:	906e      	str	r0, [sp, #440]	; 0x1b8
    fa42:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    fa44:	9087      	str	r0, [sp, #540]	; 0x21c
    fa46:	996d      	ldr	r1, [sp, #436]	; 0x1b4
    fa48:	9188      	str	r1, [sp, #544]	; 0x220
    fa4a:	9a6e      	ldr	r2, [sp, #440]	; 0x1b8
    fa4c:	9289      	str	r2, [sp, #548]	; 0x224
    fa4e:	f64f 639b 	movw	r3, #65179	; 0xfe9b
    fa52:	f2c0 0300 	movt	r3, #0
    fa56:	910a      	str	r1, [sp, #40]	; 0x28
    fa58:	4619      	mov	r1, r3
    fa5a:	9209      	str	r2, [sp, #36]	; 0x24
    fa5c:	f000 fa55 	bl	ff0a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    fa60:	9008      	str	r0, [sp, #32]
    fa62:	9107      	str	r1, [sp, #28]
    fa64:	e7ff      	b.n	fa66 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2f6>
    fa66:	f64f 619b 	movw	r1, #65179	; 0xfe9b
    fa6a:	f2c0 0100 	movt	r1, #0
    fa6e:	980a      	ldr	r0, [sp, #40]	; 0x28
    fa70:	f000 fa4b 	bl	ff0a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    fa74:	9006      	str	r0, [sp, #24]
    fa76:	9105      	str	r1, [sp, #20]
    fa78:	e7ff      	b.n	fa7a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x30a>
    fa7a:	f646 716f 	movw	r1, #28527	; 0x6f6f
    fa7e:	f2c0 0101 	movt	r1, #1
    fa82:	9809      	ldr	r0, [sp, #36]	; 0x24
    fa84:	f000 fa80 	bl	ff88 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    fa88:	9004      	str	r0, [sp, #16]
    fa8a:	9103      	str	r1, [sp, #12]
    fa8c:	e7ff      	b.n	fa8e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x31e>
    fa8e:	9808      	ldr	r0, [sp, #32]
    fa90:	9066      	str	r0, [sp, #408]	; 0x198
    fa92:	9907      	ldr	r1, [sp, #28]
    fa94:	9167      	str	r1, [sp, #412]	; 0x19c
    fa96:	9a06      	ldr	r2, [sp, #24]
    fa98:	9268      	str	r2, [sp, #416]	; 0x1a0
    fa9a:	9b05      	ldr	r3, [sp, #20]
    fa9c:	9369      	str	r3, [sp, #420]	; 0x1a4
    fa9e:	f8dd c010 	ldr.w	ip, [sp, #16]
    faa2:	f8cd c1a8 	str.w	ip, [sp, #424]	; 0x1a8
    faa6:	f8dd e00c 	ldr.w	lr, [sp, #12]
    faaa:	f8cd e1ac 	str.w	lr, [sp, #428]	; 0x1ac
    faae:	466c      	mov	r4, sp
    fab0:	2503      	movs	r5, #3
    fab2:	6025      	str	r5, [r4, #0]
    fab4:	a860      	add	r0, sp, #384	; 0x180
    fab6:	ab66      	add	r3, sp, #408	; 0x198
    fab8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    faba:	462a      	mov	r2, r5
    fabc:	f7ff fb27 	bl	f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    fac0:	e7ff      	b.n	fac2 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x352>
    fac2:	f24f 1018 	movw	r0, #61720	; 0xf118
    fac6:	f2c0 0001 	movt	r0, #1
    faca:	f006 ff62 	bl	16992 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    face:	9002      	str	r0, [sp, #8]
    fad0:	e7ff      	b.n	fad2 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x362>
    fad2:	a860      	add	r0, sp, #384	; 0x180
    fad4:	9902      	ldr	r1, [sp, #8]
    fad6:	f006 ff99 	bl	16a0c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    fada:	defe      	udf	#254	; 0xfe

0000fadc <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl GPIO {
    /// Create a new output GPIO pin
    pub fn new() -> Self {
    fadc:	2000      	movs	r0, #0
        GPIO {
            pin: 0,
        }
    }
    fade:	4770      	bx	lr

0000fae0 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>:

    /// Initialise the output GPIO pin
    pub fn init(&mut self, pin: i32) -> MynewtResult<()> {
    fae0:	b5b0      	push	{r4, r5, r7, lr}
    fae2:	b0b0      	sub	sp, #192	; 0xc0
    fae4:	9029      	str	r0, [sp, #164]	; 0xa4
    fae6:	912a      	str	r1, [sp, #168]	; 0xa8
    fae8:	2200      	movs	r2, #0
        //  TODO: let dc = pins.d0.into_push_pull_output(&mut pins.port);
        //  TODO: let rst = pins.d1.into_push_pull_output(&mut pins.port);
        let rc = unsafe { hal::hal_gpio_init_out(pin, 0) };
    faea:	900e      	str	r0, [sp, #56]	; 0x38
    faec:	4608      	mov	r0, r1
    faee:	910d      	str	r1, [sp, #52]	; 0x34
    faf0:	4611      	mov	r1, r2
    faf2:	f009 f8a7 	bl	18c44 <hal_gpio_init_out>
    faf6:	900f      	str	r0, [sp, #60]	; 0x3c
    faf8:	e7ff      	b.n	fafa <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x1a>
        assert_eq!(rc, 0, "gpio fail");
    fafa:	f24f 002c 	movw	r0, #61484	; 0xf02c
    fafe:	f2c0 0001 	movt	r0, #1
    fb02:	6800      	ldr	r0, [r0, #0]
    fb04:	a90f      	add	r1, sp, #60	; 0x3c
    fb06:	9110      	str	r1, [sp, #64]	; 0x40
    fb08:	9011      	str	r0, [sp, #68]	; 0x44
    fb0a:	9810      	ldr	r0, [sp, #64]	; 0x40
    fb0c:	902b      	str	r0, [sp, #172]	; 0xac
    fb0e:	9911      	ldr	r1, [sp, #68]	; 0x44
    fb10:	912c      	str	r1, [sp, #176]	; 0xb0
    fb12:	6802      	ldr	r2, [r0, #0]
    fb14:	680b      	ldr	r3, [r1, #0]
    fb16:	429a      	cmp	r2, r3
    fb18:	900c      	str	r0, [sp, #48]	; 0x30
    fb1a:	910b      	str	r1, [sp, #44]	; 0x2c
    fb1c:	d106      	bne.n	fb2c <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x4c>
    fb1e:	e7ff      	b.n	fb20 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x40>
        self.pin = pin;
    fb20:	980d      	ldr	r0, [sp, #52]	; 0x34
    fb22:	990e      	ldr	r1, [sp, #56]	; 0x38
    fb24:	6008      	str	r0, [r1, #0]
    fb26:	2001      	movs	r0, #1
        Ok(())
    }
    fb28:	b030      	add	sp, #192	; 0xc0
    fb2a:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "gpio fail");
    fb2c:	f24f 0084 	movw	r0, #61572	; 0xf084
    fb30:	f2c0 0001 	movt	r0, #1
    fb34:	6801      	ldr	r1, [r0, #0]
    fb36:	980c      	ldr	r0, [sp, #48]	; 0x30
    fb38:	9021      	str	r0, [sp, #132]	; 0x84
    fb3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    fb3c:	9222      	str	r2, [sp, #136]	; 0x88
    fb3e:	f24f 133c 	movw	r3, #61756	; 0xf13c
    fb42:	f2c0 0301 	movt	r3, #1
    fb46:	681b      	ldr	r3, [r3, #0]
    fb48:	f24f 0ca4 	movw	ip, #61604	; 0xf0a4
    fb4c:	f2c0 0c01 	movt	ip, #1
    fb50:	f8dc c000 	ldr.w	ip, [ip]
    fb54:	46ee      	mov	lr, sp
    fb56:	2400      	movs	r4, #0
    fb58:	f8ce 4000 	str.w	r4, [lr]
    fb5c:	a823      	add	r0, sp, #140	; 0x8c
    fb5e:	2201      	movs	r2, #1
    fb60:	910a      	str	r1, [sp, #40]	; 0x28
    fb62:	4619      	mov	r1, r3
    fb64:	4663      	mov	r3, ip
    fb66:	f7ff fad2 	bl	f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    fb6a:	e7ff      	b.n	fb6c <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x8c>
    fb6c:	a821      	add	r0, sp, #132	; 0x84
    fb6e:	901e      	str	r0, [sp, #120]	; 0x78
    fb70:	a822      	add	r0, sp, #136	; 0x88
    fb72:	901f      	str	r0, [sp, #124]	; 0x7c
    fb74:	a823      	add	r0, sp, #140	; 0x8c
    fb76:	9020      	str	r0, [sp, #128]	; 0x80
    fb78:	981e      	ldr	r0, [sp, #120]	; 0x78
    fb7a:	902d      	str	r0, [sp, #180]	; 0xb4
    fb7c:	991f      	ldr	r1, [sp, #124]	; 0x7c
    fb7e:	912e      	str	r1, [sp, #184]	; 0xb8
    fb80:	9a20      	ldr	r2, [sp, #128]	; 0x80
    fb82:	922f      	str	r2, [sp, #188]	; 0xbc
    fb84:	f64f 639b 	movw	r3, #65179	; 0xfe9b
    fb88:	f2c0 0300 	movt	r3, #0
    fb8c:	9109      	str	r1, [sp, #36]	; 0x24
    fb8e:	4619      	mov	r1, r3
    fb90:	9208      	str	r2, [sp, #32]
    fb92:	f000 f9ba 	bl	ff0a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    fb96:	9007      	str	r0, [sp, #28]
    fb98:	9106      	str	r1, [sp, #24]
    fb9a:	e7ff      	b.n	fb9c <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xbc>
    fb9c:	f64f 619b 	movw	r1, #65179	; 0xfe9b
    fba0:	f2c0 0100 	movt	r1, #0
    fba4:	9809      	ldr	r0, [sp, #36]	; 0x24
    fba6:	f000 f9b0 	bl	ff0a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    fbaa:	9005      	str	r0, [sp, #20]
    fbac:	9104      	str	r1, [sp, #16]
    fbae:	e7ff      	b.n	fbb0 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xd0>
    fbb0:	f646 716f 	movw	r1, #28527	; 0x6f6f
    fbb4:	f2c0 0101 	movt	r1, #1
    fbb8:	9808      	ldr	r0, [sp, #32]
    fbba:	f000 f9e5 	bl	ff88 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    fbbe:	9003      	str	r0, [sp, #12]
    fbc0:	9102      	str	r1, [sp, #8]
    fbc2:	e7ff      	b.n	fbc4 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xe4>
    fbc4:	9807      	ldr	r0, [sp, #28]
    fbc6:	9018      	str	r0, [sp, #96]	; 0x60
    fbc8:	9906      	ldr	r1, [sp, #24]
    fbca:	9119      	str	r1, [sp, #100]	; 0x64
    fbcc:	9a05      	ldr	r2, [sp, #20]
    fbce:	921a      	str	r2, [sp, #104]	; 0x68
    fbd0:	9b04      	ldr	r3, [sp, #16]
    fbd2:	931b      	str	r3, [sp, #108]	; 0x6c
    fbd4:	f8dd c00c 	ldr.w	ip, [sp, #12]
    fbd8:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
    fbdc:	f8dd e008 	ldr.w	lr, [sp, #8]
    fbe0:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
    fbe4:	466c      	mov	r4, sp
    fbe6:	2503      	movs	r5, #3
    fbe8:	6025      	str	r5, [r4, #0]
    fbea:	a812      	add	r0, sp, #72	; 0x48
    fbec:	ab18      	add	r3, sp, #96	; 0x60
    fbee:	990a      	ldr	r1, [sp, #40]	; 0x28
    fbf0:	462a      	mov	r2, r5
    fbf2:	f7ff fa8c 	bl	f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    fbf6:	e7ff      	b.n	fbf8 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x118>
    fbf8:	f24f 1040 	movw	r0, #61760	; 0xf140
    fbfc:	f2c0 0001 	movt	r0, #1
    fc00:	f006 fec7 	bl	16992 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    fc04:	9001      	str	r0, [sp, #4]
    fc06:	e7ff      	b.n	fc08 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x128>
    fc08:	a812      	add	r0, sp, #72	; 0x48
    fc0a:	9901      	ldr	r1, [sp, #4]
    fc0c:	f006 fefe 	bl	16a0c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    fc10:	defe      	udf	#254	; 0xfe

0000fc12 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl embedded_hal::digital::v2::OutputPin for GPIO {
    /// Set the GPIO pin to low
    fn set_low(&mut self) -> Result<(), Self::Error> {
    fc12:	b580      	push	{r7, lr}
    fc14:	b082      	sub	sp, #8
    fc16:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 0) };
    fc18:	6800      	ldr	r0, [r0, #0]
    fc1a:	2100      	movs	r1, #0
    fc1c:	f009 f82e 	bl	18c7c <hal_gpio_write>
    fc20:	e7ff      	b.n	fc22 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E+0x10>
    fc22:	2001      	movs	r0, #1
        Ok(())
    }
    fc24:	b002      	add	sp, #8
    fc26:	bd80      	pop	{r7, pc}

0000fc28 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>:

    /// Set the GPIO pin to high
    fn set_high(&mut self) -> Result<(), Self::Error> {
    fc28:	b580      	push	{r7, lr}
    fc2a:	b082      	sub	sp, #8
    fc2c:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 1) };
    fc2e:	6800      	ldr	r0, [r0, #0]
    fc30:	2101      	movs	r1, #1
    fc32:	f009 f823 	bl	18c7c <hal_gpio_write>
    fc36:	e7ff      	b.n	fc38 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE+0x10>
    fc38:	2001      	movs	r0, #1
        Ok(())
    }
    fc3a:	b002      	add	sp, #8
    fc3c:	bd80      	pop	{r7, pc}

0000fc3e <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>:
impl Delay {
    /// Create a new delay
    pub fn new() -> Self {
        Delay {
        }
    }
    fc3e:	4770      	bx	lr

0000fc40 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>:
}

/// Rust Embedded HAL interface for Mynewt Delay
impl embedded_hal::blocking::delay::DelayMs<u8> for Delay {
    /// Sleep for the specified number of milliseconds
    fn delay_ms(&mut self, ms: u8) {
    fc40:	b580      	push	{r7, lr}
    fc42:	b086      	sub	sp, #24
    fc44:	460a      	mov	r2, r1
    fc46:	9003      	str	r0, [sp, #12]
    fc48:	f88d 1013 	strb.w	r1, [sp, #19]
        //  TODO: Get this constant from Mynewt
        const OS_TICKS_PER_SEC: u32 = 1000;
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
    fc4c:	b2c8      	uxtb	r0, r1
    fc4e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    fc52:	fba0 0101 	umull	r0, r1, r0, r1
    fc56:	2900      	cmp	r1, #0
    fc58:	9002      	str	r0, [sp, #8]
    fc5a:	d110      	bne.n	fc7e <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3e>
    fc5c:	e7ff      	b.n	fc5e <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x1e>
    fc5e:	f644 50d3 	movw	r0, #19923	; 0x4dd3
    fc62:	f2c1 0062 	movt	r0, #4194	; 0x1062
    fc66:	9902      	ldr	r1, [sp, #8]
    fc68:	fba1 0200 	umull	r0, r2, r1, r0
    fc6c:	0992      	lsrs	r2, r2, #6
    fc6e:	9205      	str	r2, [sp, #20]
        unsafe { os::os_time_delay(delay_ticks) };
    fc70:	9001      	str	r0, [sp, #4]
    fc72:	4610      	mov	r0, r2
    fc74:	f00b f820 	bl	1acb8 <os_time_delay>
    fc78:	e7ff      	b.n	fc7a <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3a>
    }
    fc7a:	b006      	add	sp, #24
    fc7c:	bd80      	pop	{r7, pc}
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
    fc7e:	f24f 1060 	movw	r0, #61792	; 0xf160
    fc82:	f2c0 0001 	movt	r0, #1
    fc86:	f24f 1250 	movw	r2, #61776	; 0xf150
    fc8a:	f2c0 0201 	movt	r2, #1
    fc8e:	2121      	movs	r1, #33	; 0x21
    fc90:	f006 fe86 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fc94:	defe      	udf	#254	; 0xfe

0000fc96 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E>:
    fc96:	b580      	push	{r7, lr}
    fc98:	b084      	sub	sp, #16
    fc9a:	9002      	str	r0, [sp, #8]
    fc9c:	9103      	str	r1, [sp, #12]
    fc9e:	6800      	ldr	r0, [r0, #0]
    fca0:	f000 f845 	bl	fd2e <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>
    fca4:	9001      	str	r0, [sp, #4]
    fca6:	e7ff      	b.n	fca8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E+0x12>
    fca8:	9801      	ldr	r0, [sp, #4]
    fcaa:	f000 0001 	and.w	r0, r0, #1
    fcae:	b004      	add	sp, #16
    fcb0:	bd80      	pop	{r7, pc}

0000fcb2 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>:
    fcb2:	b087      	sub	sp, #28
    fcb4:	9000      	str	r0, [sp, #0]
    fcb6:	9101      	str	r1, [sp, #4]
    fcb8:	2000      	movs	r0, #0
    fcba:	f88d 0013 	strb.w	r0, [sp, #19]
    fcbe:	f88d 0012 	strb.w	r0, [sp, #18]
    fcc2:	2001      	movs	r0, #1
    fcc4:	f88d 0013 	strb.w	r0, [sp, #19]
    fcc8:	f88d 0012 	strb.w	r0, [sp, #18]
    fccc:	9800      	ldr	r0, [sp, #0]
    fcce:	2800      	cmp	r0, #0
    fcd0:	d001      	beq.n	fcd6 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x24>
    fcd2:	e7ff      	b.n	fcd4 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x22>
    fcd4:	e006      	b.n	fce4 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x32>
    fcd6:	2000      	movs	r0, #0
    fcd8:	f88d 0012 	strb.w	r0, [sp, #18]
    fcdc:	2001      	movs	r0, #1
    fcde:	9002      	str	r0, [sp, #8]
    fce0:	e008      	b.n	fcf4 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    fce2:	defe      	udf	#254	; 0xfe
    fce4:	2000      	movs	r0, #0
    fce6:	f88d 0013 	strb.w	r0, [sp, #19]
    fcea:	9901      	ldr	r1, [sp, #4]
    fcec:	9106      	str	r1, [sp, #24]
    fcee:	9103      	str	r1, [sp, #12]
    fcf0:	9002      	str	r0, [sp, #8]
    fcf2:	e7ff      	b.n	fcf4 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    fcf4:	f89d 0012 	ldrb.w	r0, [sp, #18]
    fcf8:	07c0      	lsls	r0, r0, #31
    fcfa:	2800      	cmp	r0, #0
    fcfc:	d104      	bne.n	fd08 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x56>
    fcfe:	e7ff      	b.n	fd00 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    fd00:	9800      	ldr	r0, [sp, #0]
    fd02:	2801      	cmp	r0, #1
    fd04:	d008      	beq.n	fd18 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x66>
    fd06:	e011      	b.n	fd2c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x7a>
    fd08:	2000      	movs	r0, #0
    fd0a:	f88d 0012 	strb.w	r0, [sp, #18]
    fd0e:	e7f7      	b.n	fd00 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    fd10:	9802      	ldr	r0, [sp, #8]
    fd12:	9903      	ldr	r1, [sp, #12]
    fd14:	b007      	add	sp, #28
    fd16:	4770      	bx	lr
    fd18:	f89d 0013 	ldrb.w	r0, [sp, #19]
    fd1c:	07c0      	lsls	r0, r0, #31
    fd1e:	2800      	cmp	r0, #0
    fd20:	d0f6      	beq.n	fd10 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    fd22:	e7ff      	b.n	fd24 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x72>
    fd24:	2000      	movs	r0, #0
    fd26:	f88d 0013 	strb.w	r0, [sp, #19]
    fd2a:	e7f1      	b.n	fd10 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    fd2c:	e7f0      	b.n	fd10 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>

0000fd2e <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>:
    fd2e:	b580      	push	{r7, lr}
    fd30:	b08e      	sub	sp, #56	; 0x38
    fd32:	900b      	str	r0, [sp, #44]	; 0x2c
    fd34:	910c      	str	r1, [sp, #48]	; 0x30
    fd36:	9003      	str	r0, [sp, #12]
    fd38:	9803      	ldr	r0, [sp, #12]
    fd3a:	6800      	ldr	r0, [r0, #0]
    fd3c:	2800      	cmp	r0, #0
    fd3e:	4602      	mov	r2, r0
    fd40:	bf18      	it	ne
    fd42:	2201      	movne	r2, #1
    fd44:	2800      	cmp	r0, #0
    fd46:	9101      	str	r1, [sp, #4]
    fd48:	d00f      	beq.n	fd6a <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x3c>
    fd4a:	e7ff      	b.n	fd4c <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x1e>
    fd4c:	9803      	ldr	r0, [sp, #12]
    fd4e:	900d      	str	r0, [sp, #52]	; 0x34
    fd50:	f24f 1281 	movw	r2, #61825	; 0xf181
    fd54:	f2c0 0201 	movt	r2, #1
    fd58:	a907      	add	r1, sp, #28
    fd5a:	2304      	movs	r3, #4
    fd5c:	9000      	str	r0, [sp, #0]
    fd5e:	4608      	mov	r0, r1
    fd60:	9901      	ldr	r1, [sp, #4]
    fd62:	f007 fcc6 	bl	176f2 <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    fd66:	e011      	b.n	fd8c <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5e>
    fd68:	defe      	udf	#254	; 0xfe
    fd6a:	f24f 1285 	movw	r2, #61829	; 0xf185
    fd6e:	f2c0 0201 	movt	r2, #1
    fd72:	a804      	add	r0, sp, #16
    fd74:	2304      	movs	r3, #4
    fd76:	9901      	ldr	r1, [sp, #4]
    fd78:	f007 fcbb 	bl	176f2 <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    fd7c:	e7ff      	b.n	fd7e <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x50>
    fd7e:	a804      	add	r0, sp, #16
    fd80:	f006 ffd4 	bl	16d2c <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    fd84:	f88d 000b 	strb.w	r0, [sp, #11]
    fd88:	e7ff      	b.n	fd8a <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5c>
    fd8a:	e011      	b.n	fdb0 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    fd8c:	9800      	ldr	r0, [sp, #0]
    fd8e:	900a      	str	r0, [sp, #40]	; 0x28
    fd90:	f24f 128c 	movw	r2, #61836	; 0xf18c
    fd94:	f2c0 0201 	movt	r2, #1
    fd98:	a807      	add	r0, sp, #28
    fd9a:	a90a      	add	r1, sp, #40	; 0x28
    fd9c:	f006 ff5d 	bl	16c5a <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>
    fda0:	e7ff      	b.n	fda2 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x74>
    fda2:	a807      	add	r0, sp, #28
    fda4:	f006 ffc2 	bl	16d2c <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    fda8:	f88d 000b 	strb.w	r0, [sp, #11]
    fdac:	e7ff      	b.n	fdae <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x80>
    fdae:	e7ff      	b.n	fdb0 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    fdb0:	f89d 000b 	ldrb.w	r0, [sp, #11]
    fdb4:	b00e      	add	sp, #56	; 0x38
    fdb6:	bd80      	pop	{r7, pc}

0000fdb8 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>:
    fdb8:	b082      	sub	sp, #8
    fdba:	2000      	movs	r0, #0
    fdbc:	9000      	str	r0, [sp, #0]
    fdbe:	9800      	ldr	r0, [sp, #0]
    fdc0:	b002      	add	sp, #8
    fdc2:	4770      	bx	lr

0000fdc4 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>:
    fdc4:	b580      	push	{r7, lr}
    fdc6:	b084      	sub	sp, #16
    fdc8:	9002      	str	r0, [sp, #8]
    fdca:	9103      	str	r1, [sp, #12]
    fdcc:	f7ff ff71 	bl	fcb2 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>
    fdd0:	9001      	str	r0, [sp, #4]
    fdd2:	9100      	str	r1, [sp, #0]
    fdd4:	e7ff      	b.n	fdd6 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E+0x12>
    fdd6:	9801      	ldr	r0, [sp, #4]
    fdd8:	9900      	ldr	r1, [sp, #0]
    fdda:	b004      	add	sp, #16
    fddc:	bd80      	pop	{r7, pc}

0000fdde <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>:
    fdde:	b580      	push	{r7, lr}
    fde0:	b094      	sub	sp, #80	; 0x50
    fde2:	9008      	str	r0, [sp, #32]
    fde4:	9109      	str	r1, [sp, #36]	; 0x24
    fde6:	6802      	ldr	r2, [r0, #0]
    fde8:	2a00      	cmp	r2, #0
    fdea:	bf18      	it	ne
    fdec:	2201      	movne	r2, #1
    fdee:	f04f 0300 	mov.w	r3, #0
    fdf2:	930b      	str	r3, [sp, #44]	; 0x2c
    fdf4:	920a      	str	r2, [sp, #40]	; 0x28
    fdf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fdf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fdfa:	9104      	str	r1, [sp, #16]
    fdfc:	9003      	str	r0, [sp, #12]
    fdfe:	9202      	str	r2, [sp, #8]
    fe00:	e7ff      	b.n	fe02 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x24>
    fe02:	9802      	ldr	r0, [sp, #8]
    fe04:	9902      	ldr	r1, [sp, #8]
    fe06:	910d      	str	r1, [sp, #52]	; 0x34
    fe08:	9a04      	ldr	r2, [sp, #16]
    fe0a:	6813      	ldr	r3, [r2, #0]
    fe0c:	2b00      	cmp	r3, #0
    fe0e:	bf18      	it	ne
    fe10:	2301      	movne	r3, #1
    fe12:	f04f 0c00 	mov.w	ip, #0
    fe16:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    fe1a:	930e      	str	r3, [sp, #56]	; 0x38
    fe1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fe1e:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    fe22:	9001      	str	r0, [sp, #4]
    fe24:	9300      	str	r3, [sp, #0]
    fe26:	e7ff      	b.n	fe28 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x4a>
    fe28:	9800      	ldr	r0, [sp, #0]
    fe2a:	9011      	str	r0, [sp, #68]	; 0x44
    fe2c:	9901      	ldr	r1, [sp, #4]
    fe2e:	4281      	cmp	r1, r0
    fe30:	d104      	bne.n	fe3c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x5e>
    fe32:	e7ff      	b.n	fe34 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x56>
    fe34:	2001      	movs	r0, #1
    fe36:	f88d 0017 	strb.w	r0, [sp, #23]
    fe3a:	e003      	b.n	fe44 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    fe3c:	2000      	movs	r0, #0
    fe3e:	f88d 0017 	strb.w	r0, [sp, #23]
    fe42:	e7ff      	b.n	fe44 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    fe44:	f89d 0017 	ldrb.w	r0, [sp, #23]
    fe48:	07c0      	lsls	r0, r0, #31
    fe4a:	2800      	cmp	r0, #0
    fe4c:	d104      	bne.n	fe58 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x7a>
    fe4e:	e7ff      	b.n	fe50 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x72>
    fe50:	2000      	movs	r0, #0
    fe52:	f88d 0016 	strb.w	r0, [sp, #22]
    fe56:	e01c      	b.n	fe92 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    fe58:	9803      	ldr	r0, [sp, #12]
    fe5a:	9006      	str	r0, [sp, #24]
    fe5c:	9904      	ldr	r1, [sp, #16]
    fe5e:	9107      	str	r1, [sp, #28]
    fe60:	9a06      	ldr	r2, [sp, #24]
    fe62:	6812      	ldr	r2, [r2, #0]
    fe64:	2a00      	cmp	r2, #0
    fe66:	d104      	bne.n	fe72 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x94>
    fe68:	e7ff      	b.n	fe6a <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    fe6a:	2001      	movs	r0, #1
    fe6c:	f88d 0016 	strb.w	r0, [sp, #22]
    fe70:	e00e      	b.n	fe90 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    fe72:	9807      	ldr	r0, [sp, #28]
    fe74:	6800      	ldr	r0, [r0, #0]
    fe76:	2800      	cmp	r0, #0
    fe78:	d0f7      	beq.n	fe6a <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    fe7a:	e7ff      	b.n	fe7c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x9e>
    fe7c:	9806      	ldr	r0, [sp, #24]
    fe7e:	9012      	str	r0, [sp, #72]	; 0x48
    fe80:	9907      	ldr	r1, [sp, #28]
    fe82:	9113      	str	r1, [sp, #76]	; 0x4c
    fe84:	f003 fa76 	bl	13374 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>
    fe88:	f88d 0016 	strb.w	r0, [sp, #22]
    fe8c:	e7ff      	b.n	fe8e <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb0>
    fe8e:	e7ff      	b.n	fe90 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    fe90:	e7ff      	b.n	fe92 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    fe92:	f89d 0016 	ldrb.w	r0, [sp, #22]
    fe96:	b014      	add	sp, #80	; 0x50
    fe98:	bd80      	pop	{r7, pc}

0000fe9a <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E>:
    fe9a:	b580      	push	{r7, lr}
    fe9c:	b084      	sub	sp, #16
    fe9e:	9002      	str	r0, [sp, #8]
    fea0:	9103      	str	r1, [sp, #12]
    fea2:	6800      	ldr	r0, [r0, #0]
    fea4:	f003 f9f8 	bl	13298 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>
    fea8:	9001      	str	r0, [sp, #4]
    feaa:	e7ff      	b.n	feac <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E+0x12>
    feac:	9801      	ldr	r0, [sp, #4]
    feae:	f000 0001 	and.w	r0, r0, #1
    feb2:	b004      	add	sp, #16
    feb4:	bd80      	pop	{r7, pc}

0000feb6 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>:
    feb6:	b580      	push	{r7, lr}
    feb8:	b084      	sub	sp, #16
    feba:	9002      	str	r0, [sp, #8]
    febc:	9103      	str	r1, [sp, #12]
    febe:	6800      	ldr	r0, [r0, #0]
    fec0:	f003 f9b3 	bl	1322a <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>
    fec4:	9001      	str	r0, [sp, #4]
    fec6:	e7ff      	b.n	fec8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E+0x12>
    fec8:	9801      	ldr	r0, [sp, #4]
    feca:	f000 0001 	and.w	r0, r0, #1
    fece:	b004      	add	sp, #16
    fed0:	bd80      	pop	{r7, pc}

0000fed2 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E>:
    fed2:	b580      	push	{r7, lr}
    fed4:	b084      	sub	sp, #16
    fed6:	9002      	str	r0, [sp, #8]
    fed8:	9103      	str	r1, [sp, #12]
    feda:	6800      	ldr	r0, [r0, #0]
    fedc:	f7ff ffeb 	bl	feb6 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>
    fee0:	9001      	str	r0, [sp, #4]
    fee2:	e7ff      	b.n	fee4 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E+0x12>
    fee4:	9801      	ldr	r0, [sp, #4]
    fee6:	f000 0001 	and.w	r0, r0, #1
    feea:	b004      	add	sp, #16
    feec:	bd80      	pop	{r7, pc}

0000feee <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE>:
    feee:	b580      	push	{r7, lr}
    fef0:	b084      	sub	sp, #16
    fef2:	9002      	str	r0, [sp, #8]
    fef4:	9103      	str	r1, [sp, #12]
    fef6:	6800      	ldr	r0, [r0, #0]
    fef8:	f003 fa05 	bl	13306 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>
    fefc:	9001      	str	r0, [sp, #4]
    fefe:	e7ff      	b.n	ff00 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE+0x12>
    ff00:	9801      	ldr	r0, [sp, #4]
    ff02:	f000 0001 	and.w	r0, r0, #1
    ff06:	b004      	add	sp, #16
    ff08:	bd80      	pop	{r7, pc}

0000ff0a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>:
    ff0a:	b089      	sub	sp, #36	; 0x24
    ff0c:	9005      	str	r0, [sp, #20]
    ff0e:	9106      	str	r1, [sp, #24]
    ff10:	9107      	str	r1, [sp, #28]
    ff12:	9907      	ldr	r1, [sp, #28]
    ff14:	9002      	str	r0, [sp, #8]
    ff16:	9101      	str	r1, [sp, #4]
    ff18:	e7ff      	b.n	ff1a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x10>
    ff1a:	9802      	ldr	r0, [sp, #8]
    ff1c:	9008      	str	r0, [sp, #32]
    ff1e:	9908      	ldr	r1, [sp, #32]
    ff20:	9100      	str	r1, [sp, #0]
    ff22:	e7ff      	b.n	ff24 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x1a>
    ff24:	9800      	ldr	r0, [sp, #0]
    ff26:	9003      	str	r0, [sp, #12]
    ff28:	9901      	ldr	r1, [sp, #4]
    ff2a:	9104      	str	r1, [sp, #16]
    ff2c:	9803      	ldr	r0, [sp, #12]
    ff2e:	9904      	ldr	r1, [sp, #16]
    ff30:	b009      	add	sp, #36	; 0x24
    ff32:	4770      	bx	lr

0000ff34 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>:
    ff34:	b089      	sub	sp, #36	; 0x24
    ff36:	9005      	str	r0, [sp, #20]
    ff38:	9106      	str	r1, [sp, #24]
    ff3a:	9107      	str	r1, [sp, #28]
    ff3c:	9907      	ldr	r1, [sp, #28]
    ff3e:	9002      	str	r0, [sp, #8]
    ff40:	9101      	str	r1, [sp, #4]
    ff42:	e7ff      	b.n	ff44 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x10>
    ff44:	9802      	ldr	r0, [sp, #8]
    ff46:	9008      	str	r0, [sp, #32]
    ff48:	9908      	ldr	r1, [sp, #32]
    ff4a:	9100      	str	r1, [sp, #0]
    ff4c:	e7ff      	b.n	ff4e <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x1a>
    ff4e:	9800      	ldr	r0, [sp, #0]
    ff50:	9003      	str	r0, [sp, #12]
    ff52:	9901      	ldr	r1, [sp, #4]
    ff54:	9104      	str	r1, [sp, #16]
    ff56:	9803      	ldr	r0, [sp, #12]
    ff58:	9904      	ldr	r1, [sp, #16]
    ff5a:	b009      	add	sp, #36	; 0x24
    ff5c:	4770      	bx	lr

0000ff5e <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>:
    ff5e:	b089      	sub	sp, #36	; 0x24
    ff60:	9005      	str	r0, [sp, #20]
    ff62:	9106      	str	r1, [sp, #24]
    ff64:	9107      	str	r1, [sp, #28]
    ff66:	9907      	ldr	r1, [sp, #28]
    ff68:	9002      	str	r0, [sp, #8]
    ff6a:	9101      	str	r1, [sp, #4]
    ff6c:	e7ff      	b.n	ff6e <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x10>
    ff6e:	9802      	ldr	r0, [sp, #8]
    ff70:	9008      	str	r0, [sp, #32]
    ff72:	9908      	ldr	r1, [sp, #32]
    ff74:	9100      	str	r1, [sp, #0]
    ff76:	e7ff      	b.n	ff78 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x1a>
    ff78:	9800      	ldr	r0, [sp, #0]
    ff7a:	9003      	str	r0, [sp, #12]
    ff7c:	9901      	ldr	r1, [sp, #4]
    ff7e:	9104      	str	r1, [sp, #16]
    ff80:	9803      	ldr	r0, [sp, #12]
    ff82:	9904      	ldr	r1, [sp, #16]
    ff84:	b009      	add	sp, #36	; 0x24
    ff86:	4770      	bx	lr

0000ff88 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>:
    ff88:	b089      	sub	sp, #36	; 0x24
    ff8a:	9005      	str	r0, [sp, #20]
    ff8c:	9106      	str	r1, [sp, #24]
    ff8e:	9107      	str	r1, [sp, #28]
    ff90:	9907      	ldr	r1, [sp, #28]
    ff92:	9002      	str	r0, [sp, #8]
    ff94:	9101      	str	r1, [sp, #4]
    ff96:	e7ff      	b.n	ff98 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x10>
    ff98:	9802      	ldr	r0, [sp, #8]
    ff9a:	9008      	str	r0, [sp, #32]
    ff9c:	9908      	ldr	r1, [sp, #32]
    ff9e:	9100      	str	r1, [sp, #0]
    ffa0:	e7ff      	b.n	ffa2 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x1a>
    ffa2:	9800      	ldr	r0, [sp, #0]
    ffa4:	9003      	str	r0, [sp, #12]
    ffa6:	9901      	ldr	r1, [sp, #4]
    ffa8:	9104      	str	r1, [sp, #16]
    ffaa:	9803      	ldr	r0, [sp, #12]
    ffac:	9904      	ldr	r1, [sp, #16]
    ffae:	b009      	add	sp, #36	; 0x24
    ffb0:	4770      	bx	lr

0000ffb2 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>:
    ffb2:	b580      	push	{r7, lr}
    ffb4:	b088      	sub	sp, #32
    ffb6:	9004      	str	r0, [sp, #16]
    ffb8:	9105      	str	r1, [sp, #20]
    ffba:	f000 f819 	bl	fff0 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>
    ffbe:	9001      	str	r0, [sp, #4]
    ffc0:	9100      	str	r1, [sp, #0]
    ffc2:	e7ff      	b.n	ffc4 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x12>
    ffc4:	9801      	ldr	r0, [sp, #4]
    ffc6:	9006      	str	r0, [sp, #24]
    ffc8:	9900      	ldr	r1, [sp, #0]
    ffca:	f001 0201 	and.w	r2, r1, #1
    ffce:	f88d 201f 	strb.w	r2, [sp, #31]
    ffd2:	2a00      	cmp	r2, #0
    ffd4:	d105      	bne.n	ffe2 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x30>
    ffd6:	e7ff      	b.n	ffd8 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x26>
    ffd8:	9801      	ldr	r0, [sp, #4]
    ffda:	9003      	str	r0, [sp, #12]
    ffdc:	2101      	movs	r1, #1
    ffde:	9102      	str	r1, [sp, #8]
    ffe0:	e002      	b.n	ffe8 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
    ffe2:	2000      	movs	r0, #0
    ffe4:	9002      	str	r0, [sp, #8]
    ffe6:	e7ff      	b.n	ffe8 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
    ffe8:	9802      	ldr	r0, [sp, #8]
    ffea:	9903      	ldr	r1, [sp, #12]
    ffec:	b008      	add	sp, #32
    ffee:	bd80      	pop	{r7, pc}

0000fff0 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>:
    fff0:	b08a      	sub	sp, #40	; 0x28
    fff2:	9004      	str	r0, [sp, #16]
    fff4:	9105      	str	r1, [sp, #20]
    fff6:	1a40      	subs	r0, r0, r1
    fff8:	f04f 0100 	mov.w	r1, #0
    fffc:	f141 0100 	adc.w	r1, r1, #0
   10000:	f1c1 0101 	rsb	r1, r1, #1
   10004:	9006      	str	r0, [sp, #24]
   10006:	f88d 101c 	strb.w	r1, [sp, #28]
   1000a:	9806      	ldr	r0, [sp, #24]
   1000c:	f89d 101c 	ldrb.w	r1, [sp, #28]
   10010:	9001      	str	r0, [sp, #4]
   10012:	9100      	str	r1, [sp, #0]
   10014:	e7ff      	b.n	10016 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E+0x26>
   10016:	9801      	ldr	r0, [sp, #4]
   10018:	9008      	str	r0, [sp, #32]
   1001a:	9900      	ldr	r1, [sp, #0]
   1001c:	f001 0201 	and.w	r2, r1, #1
   10020:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   10024:	9002      	str	r0, [sp, #8]
   10026:	f88d 200c 	strb.w	r2, [sp, #12]
   1002a:	9802      	ldr	r0, [sp, #8]
   1002c:	f89d 100c 	ldrb.w	r1, [sp, #12]
   10030:	b00a      	add	sp, #40	; 0x28
   10032:	4770      	bx	lr

00010034 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE>:
   10034:	b580      	push	{r7, lr}
   10036:	b084      	sub	sp, #16
   10038:	9002      	str	r0, [sp, #8]
   1003a:	9103      	str	r1, [sp, #12]
   1003c:	f000 f805 	bl	1004a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>
   10040:	9001      	str	r0, [sp, #4]
   10042:	e7ff      	b.n	10044 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE+0x10>
   10044:	9801      	ldr	r0, [sp, #4]
   10046:	b004      	add	sp, #16
   10048:	bd80      	pop	{r7, pc}

0001004a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>:
   1004a:	b084      	sub	sp, #16
   1004c:	9001      	str	r0, [sp, #4]
   1004e:	9102      	str	r1, [sp, #8]
   10050:	4408      	add	r0, r1
   10052:	9003      	str	r0, [sp, #12]
   10054:	9803      	ldr	r0, [sp, #12]
   10056:	9000      	str	r0, [sp, #0]
   10058:	e7ff      	b.n	1005a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE+0x10>
   1005a:	9800      	ldr	r0, [sp, #0]
   1005c:	b004      	add	sp, #16
   1005e:	4770      	bx	lr

00010060 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>:
   10060:	b081      	sub	sp, #4
   10062:	b001      	add	sp, #4
   10064:	4770      	bx	lr

00010066 <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E>:
    }
    Ok(())
}

/// Draw the item to the display
pub fn draw_to_display<T>(item: T)
   10066:	b510      	push	{r4, lr}
   10068:	b088      	sub	sp, #32
   1006a:	a901      	add	r1, sp, #4
    unsafe { DISPLAY.draw(item) };        //  Draw text or graphics the usual slow way

    #[cfg(feature = "noblock_spi")]       //  If batching is enabled...
    super::batch::draw_blocks(            //  Draw text or graphics the new faster way, as pixel blocks
        unsafe { &mut DISPLAY },
        item
   1006c:	460a      	mov	r2, r1
   1006e:	e8b0 5008 	ldmia.w	r0!, {r3, ip, lr}
   10072:	e8a2 5008 	stmia.w	r2!, {r3, ip, lr}
   10076:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
   1007a:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
    super::batch::draw_blocks(            //  Draw text or graphics the new faster way, as pixel blocks
   1007e:	f640 2004 	movw	r0, #2564	; 0xa04
   10082:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10086:	f000 f94a 	bl	1031e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE>
   1008a:	9000      	str	r0, [sp, #0]
   1008c:	e7ff      	b.n	1008e <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E+0x28>
   1008e:	9800      	ldr	r0, [sp, #0]
   10090:	f000 0001 	and.w	r0, r0, #1
   10094:	f24f 119c 	movw	r1, #61852	; 0xf19c
   10098:	f2c0 0101 	movt	r1, #1
   1009c:	f24f 13e4 	movw	r3, #61924	; 0xf1e4
   100a0:	f2c0 0301 	movt	r3, #1
   100a4:	2210      	movs	r2, #16
   100a6:	f005 fad5 	bl	15654 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   100aa:	e7ff      	b.n	100ac <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E+0x46>
    ).expect("draw blocks fail");
}
   100ac:	b008      	add	sp, #32
   100ae:	bd10      	pop	{r4, pc}

000100b0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>:
pub fn start_display() -> MynewtResult<()> {
   100b0:	b5b0      	push	{r4, r5, r7, lr}
   100b2:	b0b2      	sub	sp, #200	; 0xc8
    let mut spi_port = mynewt::SPI::new();
   100b4:	f7ff fb54 	bl	f760 <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>
   100b8:	9115      	str	r1, [sp, #84]	; 0x54
   100ba:	9014      	str	r0, [sp, #80]	; 0x50
   100bc:	e7ff      	b.n	100be <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe>
    let mut dc_gpio =  mynewt::GPIO::new();
   100be:	f7ff fd0d 	bl	fadc <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
   100c2:	9016      	str	r0, [sp, #88]	; 0x58
   100c4:	e7ff      	b.n	100c6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16>
    let mut rst_gpio = mynewt::GPIO::new();
   100c6:	f7ff fd09 	bl	fadc <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
   100ca:	9017      	str	r0, [sp, #92]	; 0x5c
   100cc:	e7ff      	b.n	100ce <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e>
    spi_port.init(
   100ce:	f240 03f0 	movw	r3, #240	; 0xf0
   100d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100d6:	a814      	add	r0, sp, #80	; 0x50
   100d8:	2100      	movs	r1, #0
   100da:	2219      	movs	r2, #25
   100dc:	f7ff fb48 	bl	f770 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>
   100e0:	9012      	str	r0, [sp, #72]	; 0x48
   100e2:	e7ff      	b.n	100e4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x34>
   100e4:	9812      	ldr	r0, [sp, #72]	; 0x48
   100e6:	f7ff f880 	bl	f1ea <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   100ea:	9018      	str	r0, [sp, #96]	; 0x60
   100ec:	e7ff      	b.n	100ee <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x3e>
    ) ? ;
   100ee:	9818      	ldr	r0, [sp, #96]	; 0x60
   100f0:	1e41      	subs	r1, r0, #1
   100f2:	bf18      	it	ne
   100f4:	2101      	movne	r1, #1
   100f6:	2801      	cmp	r0, #1
   100f8:	d001      	beq.n	100fe <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4e>
   100fa:	e7ff      	b.n	100fc <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4c>
   100fc:	e006      	b.n	1010c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x5c>
   100fe:	a816      	add	r0, sp, #88	; 0x58
   10100:	2112      	movs	r1, #18
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
   10102:	f7ff fced 	bl	fae0 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
   10106:	9011      	str	r0, [sp, #68]	; 0x44
   10108:	e010      	b.n	1012c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7c>
    spi_port.init(
   1010a:	defe      	udf	#254	; 0xfe
    ) ? ;
   1010c:	9818      	ldr	r0, [sp, #96]	; 0x60
   1010e:	902d      	str	r0, [sp, #180]	; 0xb4
   10110:	f7ff f8de 	bl	f2d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   10114:	9010      	str	r0, [sp, #64]	; 0x40
   10116:	e002      	b.n	1011e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x6e>
}
   10118:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1011a:	b032      	add	sp, #200	; 0xc8
   1011c:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;
   1011e:	9810      	ldr	r0, [sp, #64]	; 0x40
   10120:	f7ff f857 	bl	f1d2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   10124:	9013      	str	r0, [sp, #76]	; 0x4c
   10126:	e7ff      	b.n	10128 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x78>
   10128:	e7ff      	b.n	1012a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
   1012a:	e7f5      	b.n	10118 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
   1012c:	9811      	ldr	r0, [sp, #68]	; 0x44
   1012e:	f7ff f85c 	bl	f1ea <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   10132:	9019      	str	r0, [sp, #100]	; 0x64
   10134:	e7ff      	b.n	10136 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x86>
   10136:	9819      	ldr	r0, [sp, #100]	; 0x64
   10138:	1e41      	subs	r1, r0, #1
   1013a:	bf18      	it	ne
   1013c:	2101      	movne	r1, #1
   1013e:	2801      	cmp	r0, #1
   10140:	d001      	beq.n	10146 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x96>
   10142:	e7ff      	b.n	10144 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x94>
   10144:	e006      	b.n	10154 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xa4>
   10146:	a817      	add	r0, sp, #92	; 0x5c
   10148:	211a      	movs	r1, #26
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
   1014a:	f7ff fcc9 	bl	fae0 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
   1014e:	900f      	str	r0, [sp, #60]	; 0x3c
   10150:	e00c      	b.n	1016c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xbc>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
   10152:	defe      	udf	#254	; 0xfe
   10154:	9819      	ldr	r0, [sp, #100]	; 0x64
   10156:	902e      	str	r0, [sp, #184]	; 0xb8
   10158:	f7ff f8ba 	bl	f2d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   1015c:	900e      	str	r0, [sp, #56]	; 0x38
   1015e:	e7ff      	b.n	10160 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xb0>
   10160:	980e      	ldr	r0, [sp, #56]	; 0x38
   10162:	f7ff f836 	bl	f1d2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   10166:	9013      	str	r0, [sp, #76]	; 0x4c
   10168:	e7ff      	b.n	1016a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xba>
   1016a:	e7de      	b.n	1012a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
   1016c:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1016e:	f7ff f83c 	bl	f1ea <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   10172:	901a      	str	r0, [sp, #104]	; 0x68
   10174:	e7ff      	b.n	10176 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xc6>
   10176:	981a      	ldr	r0, [sp, #104]	; 0x68
   10178:	1e41      	subs	r1, r0, #1
   1017a:	bf18      	it	ne
   1017c:	2101      	movne	r1, #1
   1017e:	2801      	cmp	r0, #1
   10180:	d001      	beq.n	10186 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd6>
   10182:	e7ff      	b.n	10184 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd4>
   10184:	e004      	b.n	10190 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe0>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
   10186:	f7ff fca9 	bl	fadc <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
   1018a:	900d      	str	r0, [sp, #52]	; 0x34
   1018c:	e00c      	b.n	101a8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf8>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
   1018e:	defe      	udf	#254	; 0xfe
   10190:	981a      	ldr	r0, [sp, #104]	; 0x68
   10192:	902f      	str	r0, [sp, #188]	; 0xbc
   10194:	f7ff f89c 	bl	f2d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   10198:	900c      	str	r0, [sp, #48]	; 0x30
   1019a:	e7ff      	b.n	1019c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xec>
   1019c:	980c      	ldr	r0, [sp, #48]	; 0x30
   1019e:	f7ff f818 	bl	f1d2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   101a2:	9013      	str	r0, [sp, #76]	; 0x4c
   101a4:	e7ff      	b.n	101a6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf6>
   101a6:	e7c0      	b.n	1012a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
   101a8:	f640 201c 	movw	r0, #2588	; 0xa1c
   101ac:	f2c2 0000 	movt	r0, #8192	; 0x2000
   101b0:	990d      	ldr	r1, [sp, #52]	; 0x34
   101b2:	6001      	str	r1, [r0, #0]
   101b4:	2117      	movs	r1, #23
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
   101b6:	f7ff fc93 	bl	fae0 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
   101ba:	900b      	str	r0, [sp, #44]	; 0x2c
   101bc:	e7ff      	b.n	101be <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x10e>
   101be:	980b      	ldr	r0, [sp, #44]	; 0x2c
   101c0:	f7ff f813 	bl	f1ea <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   101c4:	901b      	str	r0, [sp, #108]	; 0x6c
   101c6:	e7ff      	b.n	101c8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x118>
   101c8:	981b      	ldr	r0, [sp, #108]	; 0x6c
   101ca:	1e41      	subs	r1, r0, #1
   101cc:	bf18      	it	ne
   101ce:	2101      	movne	r1, #1
   101d0:	2801      	cmp	r0, #1
   101d2:	d001      	beq.n	101d8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x128>
   101d4:	e7ff      	b.n	101d6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x126>
   101d6:	e008      	b.n	101ea <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x13a>
        BACKLIGHT_HIGH.set_low() ? ;    
   101d8:	f640 201c 	movw	r0, #2588	; 0xa1c
   101dc:	f2c2 0000 	movt	r0, #8192	; 0x2000
   101e0:	f7ff fd17 	bl	fc12 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
   101e4:	900a      	str	r0, [sp, #40]	; 0x28
   101e6:	e00d      	b.n	10204 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x154>
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
   101e8:	defe      	udf	#254	; 0xfe
   101ea:	981b      	ldr	r0, [sp, #108]	; 0x6c
   101ec:	9030      	str	r0, [sp, #192]	; 0xc0
   101ee:	f7ff f86f 	bl	f2d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   101f2:	9009      	str	r0, [sp, #36]	; 0x24
   101f4:	e7ff      	b.n	101f6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x146>
   101f6:	9809      	ldr	r0, [sp, #36]	; 0x24
   101f8:	f7fe ffeb 	bl	f1d2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   101fc:	9013      	str	r0, [sp, #76]	; 0x4c
   101fe:	e7ff      	b.n	10200 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x150>
   10200:	e7ff      	b.n	10202 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
   10202:	e792      	b.n	1012a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH.set_low() ? ;    
   10204:	980a      	ldr	r0, [sp, #40]	; 0x28
   10206:	f7fe fff0 	bl	f1ea <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   1020a:	901c      	str	r0, [sp, #112]	; 0x70
   1020c:	e7ff      	b.n	1020e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x15e>
   1020e:	981c      	ldr	r0, [sp, #112]	; 0x70
   10210:	1e41      	subs	r1, r0, #1
   10212:	bf18      	it	ne
   10214:	2101      	movne	r1, #1
   10216:	2801      	cmp	r0, #1
   10218:	d001      	beq.n	1021e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16e>
   1021a:	e7ff      	b.n	1021c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16c>
   1021c:	e011      	b.n	10242 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x192>
        spi_port,    //  SPI Port
   1021e:	9914      	ldr	r1, [sp, #80]	; 0x50
   10220:	9a15      	ldr	r2, [sp, #84]	; 0x54
        dc_gpio,     //  GPIO Pin for DC
   10222:	9b16      	ldr	r3, [sp, #88]	; 0x58
        rst_gpio,    //  GPIO Pin for RST
   10224:	9817      	ldr	r0, [sp, #92]	; 0x5c
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
   10226:	46ec      	mov	ip, sp
   10228:	f04f 0e01 	mov.w	lr, #1
   1022c:	f8cc e008 	str.w	lr, [ip, #8]
   10230:	f8cc e004 	str.w	lr, [ip, #4]
   10234:	f8cc 0000 	str.w	r0, [ip]
   10238:	a81d      	add	r0, sp, #116	; 0x74
   1023a:	f001 f8d2 	bl	113e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>
   1023e:	e00c      	b.n	1025a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1aa>
        BACKLIGHT_HIGH.set_low() ? ;    
   10240:	defe      	udf	#254	; 0xfe
   10242:	981c      	ldr	r0, [sp, #112]	; 0x70
   10244:	9031      	str	r0, [sp, #196]	; 0xc4
   10246:	f7ff f843 	bl	f2d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   1024a:	9008      	str	r0, [sp, #32]
   1024c:	e7ff      	b.n	1024e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x19e>
   1024e:	9808      	ldr	r0, [sp, #32]
   10250:	f7fe ffbf 	bl	f1d2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   10254:	9013      	str	r0, [sp, #76]	; 0x4c
   10256:	e7ff      	b.n	10258 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1a8>
   10258:	e7d3      	b.n	10202 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
   1025a:	f640 2004 	movw	r0, #2564	; 0xa04
   1025e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10262:	a91d      	add	r1, sp, #116	; 0x74
   10264:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   10268:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    let mut delay = mynewt::Delay::new();
   1026c:	f7ff fce7 	bl	fc3e <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>
   10270:	e7ff      	b.n	10272 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1c2>
        DISPLAY.init(&mut delay) ? ;
   10272:	f640 2004 	movw	r0, #2564	; 0xa04
   10276:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1027a:	a923      	add	r1, sp, #140	; 0x8c
   1027c:	f001 f8d3 	bl	11426 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>
   10280:	9007      	str	r0, [sp, #28]
   10282:	e7ff      	b.n	10284 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1d4>
   10284:	9807      	ldr	r0, [sp, #28]
   10286:	f000 0001 	and.w	r0, r0, #1
   1028a:	f7fe ffa8 	bl	f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1028e:	f88d 008e 	strb.w	r0, [sp, #142]	; 0x8e
   10292:	e7ff      	b.n	10294 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e4>
   10294:	f89d 008e 	ldrb.w	r0, [sp, #142]	; 0x8e
   10298:	07c1      	lsls	r1, r0, #31
   1029a:	2900      	cmp	r1, #0
   1029c:	d001      	beq.n	102a2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f2>
   1029e:	e7ff      	b.n	102a0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f0>
   102a0:	e00d      	b.n	102be <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x20e>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
   102a2:	f24f 10f8 	movw	r0, #61944	; 0xf1f8
   102a6:	f2c0 0001 	movt	r0, #1
   102aa:	6801      	ldr	r1, [r0, #0]
   102ac:	f640 2004 	movw	r0, #2564	; 0xa04
   102b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
   102b4:	f000 fecc 	bl	11050 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>
   102b8:	9006      	str	r0, [sp, #24]
   102ba:	e00b      	b.n	102d4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x224>
        DISPLAY.init(&mut delay) ? ;
   102bc:	defe      	udf	#254	; 0xfe
   102be:	f002 ff56 	bl	1316e <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
   102c2:	9005      	str	r0, [sp, #20]
   102c4:	e7ff      	b.n	102c6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x216>
   102c6:	9805      	ldr	r0, [sp, #20]
   102c8:	f7fe ff83 	bl	f1d2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   102cc:	9013      	str	r0, [sp, #76]	; 0x4c
   102ce:	e7ff      	b.n	102d0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x220>
   102d0:	e7ff      	b.n	102d2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>
   102d2:	e72a      	b.n	1012a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
   102d4:	9806      	ldr	r0, [sp, #24]
   102d6:	f000 0001 	and.w	r0, r0, #1
   102da:	f7fe ff80 	bl	f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   102de:	f88d 008f 	strb.w	r0, [sp, #143]	; 0x8f
   102e2:	e7ff      	b.n	102e4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x234>
   102e4:	f89d 008f 	ldrb.w	r0, [sp, #143]	; 0x8f
   102e8:	07c1      	lsls	r1, r0, #31
   102ea:	2900      	cmp	r1, #0
   102ec:	d001      	beq.n	102f2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x242>
   102ee:	e7ff      	b.n	102f0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x240>
   102f0:	e005      	b.n	102fe <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x24e>
   102f2:	2000      	movs	r0, #0
    Ok(())
   102f4:	9013      	str	r0, [sp, #76]	; 0x4c
   102f6:	2001      	movs	r0, #1
   102f8:	9013      	str	r0, [sp, #76]	; 0x4c
}
   102fa:	e70d      	b.n	10118 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
   102fc:	defe      	udf	#254	; 0xfe
   102fe:	f002 ff36 	bl	1316e <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
   10302:	9004      	str	r0, [sp, #16]
   10304:	e7ff      	b.n	10306 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x256>
   10306:	9804      	ldr	r0, [sp, #16]
   10308:	f7fe ff63 	bl	f1d2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   1030c:	9013      	str	r0, [sp, #76]	; 0x4c
   1030e:	e7ff      	b.n	10310 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x260>
   10310:	e7df      	b.n	102d2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>

00010312 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E>:
   10312:	b580      	push	{r7, lr}
   10314:	f44f 72b6 	mov.w	r2, #364	; 0x16c
   10318:	f00c ff16 	bl	1d148 <__aeabi_memcpy>
   1031c:	bd80      	pop	{r7, pc}

0001031e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE>:
    pub colors:   BlockColors,
}

/// Draw the pixels in the item as Pixel Blocks of contiguous Pixel Rows. The pixels are grouped by row then by block.
#[allow(dead_code)]
pub fn draw_blocks<SPI, DC, RST, T>(display: &mut ST7735<SPI, DC, RST>, item_pixels: T) -> Result<(),()>
   1031e:	b5b0      	push	{r4, r5, r7, lr}
   10320:	f5ad 6d48 	sub.w	sp, sp, #3200	; 0xc80
   10324:	f8cd 0c6c 	str.w	r0, [sp, #3180]	; 0xc6c
   10328:	aa19      	add	r2, sp, #100	; 0x64
    SPI: spi::Write<u8>,
    DC: OutputPin,
    RST: OutputPin,
    T: IntoIterator<Item = Pixel<Rgb565>>, {
    //  Get the pixels for the item to be rendered.
    let pixels = item_pixels.into_iter();
   1032a:	4613      	mov	r3, r2
   1032c:	e8b1 5010 	ldmia.w	r1!, {r4, ip, lr}
   10330:	e8a3 5010 	stmia.w	r3!, {r4, ip, lr}
   10334:	e891 5030 	ldmia.w	r1, {r4, r5, ip, lr}
   10338:	e883 5030 	stmia.w	r3, {r4, r5, ip, lr}
   1033c:	a910      	add	r1, sp, #64	; 0x40
   1033e:	900e      	str	r0, [sp, #56]	; 0x38
   10340:	4608      	mov	r0, r1
   10342:	4611      	mov	r1, r2
   10344:	f001 fcb9 	bl	11cba <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E>
   10348:	e7ff      	b.n	1034a <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x2c>
   1034a:	a810      	add	r0, sp, #64	; 0x40
   1034c:	a945      	add	r1, sp, #276	; 0x114
    //  Batch the pixels into Pixel Rows.
    let rows = to_rows(pixels);
   1034e:	460a      	mov	r2, r1
   10350:	e8b0 5018 	ldmia.w	r0!, {r3, r4, ip, lr}
   10354:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
   10358:	e890 5038 	ldmia.w	r0, {r3, r4, r5, ip, lr}
   1035c:	e882 5038 	stmia.w	r2, {r3, r4, r5, ip, lr}
   10360:	a820      	add	r0, sp, #128	; 0x80
   10362:	f000 f8b7 	bl	104d4 <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E>
   10366:	e7ff      	b.n	10368 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x4a>
   10368:	a8a9      	add	r0, sp, #676	; 0x2a4
   1036a:	a920      	add	r1, sp, #128	; 0x80
   1036c:	2294      	movs	r2, #148	; 0x94
    //  Batch the Pixel Rows into Pixel Blocks.
    let blocks = to_blocks(rows);
   1036e:	900d      	str	r0, [sp, #52]	; 0x34
   10370:	f00c feea 	bl	1d148 <__aeabi_memcpy>
   10374:	a84e      	add	r0, sp, #312	; 0x138
   10376:	990d      	ldr	r1, [sp, #52]	; 0x34
   10378:	f000 f8db 	bl	10532 <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E>
   1037c:	e7ff      	b.n	1037e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x60>
   1037e:	f20d 40a4 	addw	r0, sp, #1188	; 0x4a4
   10382:	a94e      	add	r1, sp, #312	; 0x138
   10384:	f44f 72b6 	mov.w	r2, #364	; 0x16c
    //  For each Pixel Block...
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   10388:	900c      	str	r0, [sp, #48]	; 0x30
   1038a:	f00c fedd 	bl	1d148 <__aeabi_memcpy>
   1038e:	a8ce      	add	r0, sp, #824	; 0x338
   10390:	990c      	ldr	r1, [sp, #48]	; 0x30
   10392:	f7ff ffbe 	bl	10312 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E>
   10396:	e7ff      	b.n	10398 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x7a>
   10398:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
   1039c:	a9ce      	add	r1, sp, #824	; 0x338
   1039e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
   103a2:	f00c fed1 	bl	1d148 <__aeabi_memcpy>
   103a6:	e7ff      	b.n	103a8 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x8a>
   103a8:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
   103ac:	f50d 61c2 	add.w	r1, sp, #1552	; 0x610
   103b0:	f000 fa2c 	bl	1080c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E>
   103b4:	e7ff      	b.n	103b6 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x98>
   103b6:	f8dd 0850 	ldr.w	r0, [sp, #2128]	; 0x850
   103ba:	2800      	cmp	r0, #0
   103bc:	d001      	beq.n	103c2 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xa4>
   103be:	e7ff      	b.n	103c0 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xa2>
   103c0:	e005      	b.n	103ce <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xb0>
   103c2:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
   103c6:	f001 fc48 	bl	11c5a <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>
   103ca:	e01c      	b.n	10406 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xe8>
   103cc:	defe      	udf	#254	; 0xfe
   103ce:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
   103d2:	1d01      	adds	r1, r0, #4
   103d4:	f60d 1028 	addw	r0, sp, #2344	; 0x928
   103d8:	22d4      	movs	r2, #212	; 0xd4
   103da:	900b      	str	r0, [sp, #44]	; 0x2c
   103dc:	920a      	str	r2, [sp, #40]	; 0x28
   103de:	f00c feb3 	bl	1d148 <__aeabi_memcpy>
   103e2:	f60d 10fc 	addw	r0, sp, #2556	; 0x9fc
   103e6:	9009      	str	r0, [sp, #36]	; 0x24
   103e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   103ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   103ec:	f00c feac 	bl	1d148 <__aeabi_memcpy>
   103f0:	f20d 707c 	addw	r0, sp, #1916	; 0x77c
   103f4:	9909      	ldr	r1, [sp, #36]	; 0x24
   103f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   103f8:	f00c fea6 	bl	1d148 <__aeabi_memcpy>
   103fc:	f8dd 0850 	ldr.w	r0, [sp, #2128]	; 0x850
   10400:	2801      	cmp	r0, #1
   10402:	d02c      	beq.n	1045e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x140>
   10404:	e061      	b.n	104ca <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x1ac>
   10406:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
        //  Dump out the Pixel Blocks for the square in test_display()
        /* if x_left >= 60 && x_left <= 150 && x_right >= 60 && x_right <= 150 && y_top >= 60 && y_top <= 150 && y_bottom >= 60 && y_bottom <= 150 {
            console::print("pixel block ("); console::printint(x_left as i32); console::print(", "); console::printint(y_top as i32); ////
            console::print("), ("); console::printint(x_right as i32); console::print(", "); console::printint(y_bottom as i32); console::print(")\n"); ////    
        } */
    }
   1040a:	f001 fc03 	bl	11c14 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>
   1040e:	e022      	b.n	10456 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x138>
        display.set_pixels(
   10410:	f89d 0b9f 	ldrb.w	r0, [sp, #2975]	; 0xb9f
   10414:	f7fe fee3 	bl	f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   10418:	f88d 0b9e 	strb.w	r0, [sp, #2974]	; 0xb9e
   1041c:	e7ff      	b.n	1041e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x100>
            colors) ? ;
   1041e:	f89d 0b9e 	ldrb.w	r0, [sp, #2974]	; 0xb9e
   10422:	07c1      	lsls	r1, r0, #31
   10424:	2900      	cmp	r1, #0
   10426:	d001      	beq.n	1042c <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x10e>
   10428:	e7ff      	b.n	1042a <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x10c>
   1042a:	e001      	b.n	10430 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x112>
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   1042c:	e7bc      	b.n	103a8 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x8a>
        display.set_pixels(
   1042e:	defe      	udf	#254	; 0xfe
            colors) ? ;
   10430:	f002 fdfa 	bl	13028 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   10434:	e004      	b.n	10440 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x122>
    Ok(())
}
   10436:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
   1043a:	f50d 6d48 	add.w	sp, sp, #3200	; 0xc80
   1043e:	bdb0      	pop	{r4, r5, r7, pc}
            colors) ? ;
   10440:	f005 fa55 	bl	158ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   10444:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
   10448:	e7ff      	b.n	1044a <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x12c>
   1044a:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
    }
   1044e:	f001 fbe1 	bl	11c14 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>
   10452:	e7ff      	b.n	10454 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x136>
}
   10454:	e7ef      	b.n	10436 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x118>
   10456:	2000      	movs	r0, #0
    Ok(())
   10458:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
}
   1045c:	e7eb      	b.n	10436 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x118>
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   1045e:	f8bd 0848 	ldrh.w	r0, [sp, #2120]	; 0x848
   10462:	f8ad 0c78 	strh.w	r0, [sp, #3192]	; 0xc78
   10466:	f8bd 184a 	ldrh.w	r1, [sp, #2122]	; 0x84a
   1046a:	f8ad 1c7a 	strh.w	r1, [sp, #3194]	; 0xc7a
   1046e:	f8bd 284c 	ldrh.w	r2, [sp, #2124]	; 0x84c
   10472:	f8ad 2c7c 	strh.w	r2, [sp, #3196]	; 0xc7c
   10476:	f8bd 384e 	ldrh.w	r3, [sp, #2126]	; 0x84e
   1047a:	f8ad 3c7e 	strh.w	r3, [sp, #3198]	; 0xc7e
   1047e:	f50d 6c2d 	add.w	ip, sp, #2768	; 0xad0
   10482:	f20d 7e7c 	addw	lr, sp, #1916	; 0x77c
   10486:	24cc      	movs	r4, #204	; 0xcc
   10488:	9008      	str	r0, [sp, #32]
   1048a:	4660      	mov	r0, ip
   1048c:	9107      	str	r1, [sp, #28]
   1048e:	4671      	mov	r1, lr
   10490:	9206      	str	r2, [sp, #24]
   10492:	4622      	mov	r2, r4
   10494:	9305      	str	r3, [sp, #20]
   10496:	f8cd c010 	str.w	ip, [sp, #16]
   1049a:	9403      	str	r4, [sp, #12]
   1049c:	f00c fe54 	bl	1d148 <__aeabi_memcpy>
   104a0:	f50d 603a 	add.w	r0, sp, #2976	; 0xba0
            colors) ? ;
   104a4:	9002      	str	r0, [sp, #8]
   104a6:	9904      	ldr	r1, [sp, #16]
   104a8:	9a03      	ldr	r2, [sp, #12]
   104aa:	f00c fe4d 	bl	1d148 <__aeabi_memcpy>
        display.set_pixels(
   104ae:	4668      	mov	r0, sp
   104b0:	9902      	ldr	r1, [sp, #8]
   104b2:	6041      	str	r1, [r0, #4]
   104b4:	9a05      	ldr	r2, [sp, #20]
   104b6:	6002      	str	r2, [r0, #0]
   104b8:	980e      	ldr	r0, [sp, #56]	; 0x38
   104ba:	9908      	ldr	r1, [sp, #32]
   104bc:	9a06      	ldr	r2, [sp, #24]
   104be:	9b07      	ldr	r3, [sp, #28]
   104c0:	f000 fbf5 	bl	10cae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E>
   104c4:	f88d 0b9f 	strb.w	r0, [sp, #2975]	; 0xb9f
   104c8:	e7a2      	b.n	10410 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xf2>
   104ca:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   104ce:	f001 fbc4 	bl	11c5a <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>
   104d2:	e7c4      	b.n	1045e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x140>

000104d4 <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E>:

/// Batch the pixels into Pixel Rows, which are contiguous pixels on the same row.
/// P can be any Pixel Iterator (e.g. a rectangle).
fn to_rows<P>(pixels: P) -> RowIterator<P>
   104d4:	b5b0      	push	{r4, r5, r7, lr}
   104d6:	b0a4      	sub	sp, #144	; 0x90
   104d8:	aa01      	add	r2, sp, #4
where
    P: Iterator<Item = Pixel<Rgb565>>, {
    RowIterator::<P> {
        pixels,
   104da:	e8b1 5018 	ldmia.w	r1!, {r3, r4, ip, lr}
   104de:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
   104e2:	e891 5038 	ldmia.w	r1, {r3, r4, r5, ip, lr}
   104e6:	e882 5038 	stmia.w	r2, {r3, r4, r5, ip, lr}
   104ea:	a90a      	add	r1, sp, #40	; 0x28
        x_left: 0,
        x_right: 0,
        y: 0,
        colors: RowColors::new(),
   104ec:	9000      	str	r0, [sp, #0]
   104ee:	4608      	mov	r0, r1
   104f0:	f004 fcf3 	bl	14eda <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E>
   104f4:	e7ff      	b.n	104f6 <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E+0x22>
   104f6:	a801      	add	r0, sp, #4
    RowIterator::<P> {
   104f8:	9900      	ldr	r1, [sp, #0]
   104fa:	e8b0 500c 	ldmia.w	r0!, {r2, r3, ip, lr}
   104fe:	e8a1 500c 	stmia.w	r1!, {r2, r3, ip, lr}
   10502:	e890 501c 	ldmia.w	r0, {r2, r3, r4, ip, lr}
   10506:	e881 501c 	stmia.w	r1, {r2, r3, r4, ip, lr}
   1050a:	2000      	movs	r0, #0
   1050c:	9900      	ldr	r1, [sp, #0]
   1050e:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
   10512:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
   10516:	f8a1 0090 	strh.w	r0, [r1, #144]	; 0x90
   1051a:	f101 0024 	add.w	r0, r1, #36	; 0x24
   1051e:	a90a      	add	r1, sp, #40	; 0x28
   10520:	2268      	movs	r2, #104	; 0x68
   10522:	f00c fe11 	bl	1d148 <__aeabi_memcpy>
   10526:	2001      	movs	r0, #1
   10528:	9900      	ldr	r1, [sp, #0]
   1052a:	f881 0092 	strb.w	r0, [r1, #146]	; 0x92
        first_pixel: true,
    }
}
   1052e:	b024      	add	sp, #144	; 0x90
   10530:	bdb0      	pop	{r4, r5, r7, pc}

00010532 <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E>:

/// Batch the Pixel Rows into Pixel Blocks, which are contiguous Pixel Rows with the same start and end column number
/// R can be any Pixel Row Iterator.
fn to_blocks<R>(rows: R) -> BlockIterator<R>
   10532:	b580      	push	{r7, lr}
   10534:	b0da      	sub	sp, #360	; 0x168
   10536:	aa02      	add	r2, sp, #8
   10538:	2394      	movs	r3, #148	; 0x94
where
    R: Iterator<Item = PixelRow>, {
    BlockIterator::<R> {
        rows,
   1053a:	9001      	str	r0, [sp, #4]
   1053c:	4610      	mov	r0, r2
   1053e:	461a      	mov	r2, r3
   10540:	f00c fe02 	bl	1d148 <__aeabi_memcpy>
   10544:	a827      	add	r0, sp, #156	; 0x9c
        x_left: 0,
        x_right: 0,
        y_top: 0,
        y_bottom: 0,
        colors: BlockColors::new(),
   10546:	f004 fcd7 	bl	14ef8 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE>
   1054a:	e7ff      	b.n	1054c <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E+0x1a>
   1054c:	a902      	add	r1, sp, #8
   1054e:	2294      	movs	r2, #148	; 0x94
    BlockIterator::<R> {
   10550:	9801      	ldr	r0, [sp, #4]
   10552:	f00c fdf9 	bl	1d148 <__aeabi_memcpy>
   10556:	2000      	movs	r0, #0
   10558:	9901      	ldr	r1, [sp, #4]
   1055a:	f8a1 0160 	strh.w	r0, [r1, #352]	; 0x160
   1055e:	f8a1 0162 	strh.w	r0, [r1, #354]	; 0x162
   10562:	f8a1 0164 	strh.w	r0, [r1, #356]	; 0x164
   10566:	f8a1 0166 	strh.w	r0, [r1, #358]	; 0x166
   1056a:	f101 0094 	add.w	r0, r1, #148	; 0x94
   1056e:	a927      	add	r1, sp, #156	; 0x9c
   10570:	22cc      	movs	r2, #204	; 0xcc
   10572:	f00c fde9 	bl	1d148 <__aeabi_memcpy>
   10576:	2001      	movs	r0, #1
   10578:	9901      	ldr	r1, [sp, #4]
   1057a:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
        first_row: true,
    }
}    
   1057e:	b05a      	add	sp, #360	; 0x168
   10580:	bd80      	pop	{r7, pc}

00010582 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E>:
impl<P: Iterator<Item = Pixel<Rgb565>>> Iterator for RowIterator<P> {
    /// This Iterator returns Pixel Rows
    type Item = PixelRow;

    /// Return the next Pixel Row of contiguous pixels on the same row
    fn next(&mut self) -> Option<Self::Item> {
   10582:	b580      	push	{r7, lr}
   10584:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
   10588:	91c1      	str	r1, [sp, #772]	; 0x304
        //  Loop over all pixels until we have composed a Pixel Row, or we have run out of pixels.
        loop {
   1058a:	9116      	str	r1, [sp, #88]	; 0x58
   1058c:	9015      	str	r0, [sp, #84]	; 0x54
   1058e:	e7ff      	b.n	10590 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xe>
   10590:	a817      	add	r0, sp, #92	; 0x5c
            //  Get the next pixel.
            let next_pixel = self.pixels.next();
   10592:	9916      	ldr	r1, [sp, #88]	; 0x58
   10594:	f001 fbec 	bl	11d70 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE>
   10598:	e7ff      	b.n	1059a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x18>
            match next_pixel {
                None => {  //  If no more pixels...
   1059a:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1059c:	2800      	cmp	r0, #0
   1059e:	d01c      	beq.n	105da <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x58>
   105a0:	e7ff      	b.n	105a2 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x20>
                    };
                    self.colors.clear();
                    self.first_pixel = true;
                    return Some(row);
                }
                Some(Pixel(coord, color)) => {  //  If there is a pixel...
   105a2:	9818      	ldr	r0, [sp, #96]	; 0x60
   105a4:	9919      	ldr	r1, [sp, #100]	; 0x64
   105a6:	90c2      	str	r0, [sp, #776]	; 0x308
   105a8:	91c3      	str	r1, [sp, #780]	; 0x30c
   105aa:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   105ae:	4613      	mov	r3, r2
   105b0:	f8ad 2310 	strh.w	r2, [sp, #784]	; 0x310
                    let x = coord.0 as u16;
   105b4:	f8ad 0312 	strh.w	r0, [sp, #786]	; 0x312
                    let y = coord.1 as u16;
   105b8:	f8ad 1314 	strh.w	r1, [sp, #788]	; 0x314
                    let color = color.0;
   105bc:	f8ad 2316 	strh.w	r2, [sp, #790]	; 0x316
                    //  Save the first pixel as the row start and handle next pixel.
                    if self.first_pixel {
   105c0:	9a16      	ldr	r2, [sp, #88]	; 0x58
   105c2:	f892 c092 	ldrb.w	ip, [r2, #146]	; 0x92
   105c6:	ea4f 7ccc 	mov.w	ip, ip, lsl #31
   105ca:	f1bc 0f00 	cmp.w	ip, #0
   105ce:	9014      	str	r0, [sp, #80]	; 0x50
   105d0:	9113      	str	r1, [sp, #76]	; 0x4c
   105d2:	9312      	str	r3, [sp, #72]	; 0x48
   105d4:	d156      	bne.n	10684 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x102>
   105d6:	e04a      	b.n	1066e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xec>
            match next_pixel {
   105d8:	defe      	udf	#254	; 0xfe
                    if self.first_pixel {
   105da:	9816      	ldr	r0, [sp, #88]	; 0x58
   105dc:	f890 1092 	ldrb.w	r1, [r0, #146]	; 0x92
   105e0:	07c9      	lsls	r1, r1, #31
   105e2:	2900      	cmp	r1, #0
   105e4:	d111      	bne.n	1060a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x88>
   105e6:	e7ff      	b.n	105e8 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x66>
                        x_left: self.x_left,
   105e8:	9816      	ldr	r0, [sp, #88]	; 0x58
   105ea:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
                        x_right: self.x_right,
   105ee:	f8b0 208e 	ldrh.w	r2, [r0, #142]	; 0x8e
                        y: self.y,
   105f2:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
                        colors: self.colors.clone(),
   105f6:	f100 0c24 	add.w	ip, r0, #36	; 0x24
   105fa:	a837      	add	r0, sp, #220	; 0xdc
   105fc:	9111      	str	r1, [sp, #68]	; 0x44
   105fe:	4661      	mov	r1, ip
   10600:	9210      	str	r2, [sp, #64]	; 0x40
   10602:	930f      	str	r3, [sp, #60]	; 0x3c
   10604:	f004 fbd2 	bl	14dac <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>
   10608:	e006      	b.n	10618 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x96>
   1060a:	2000      	movs	r0, #0
                        return None;  //  No pixels to group
   1060c:	9915      	ldr	r1, [sp, #84]	; 0x54
   1060e:	6008      	str	r0, [r1, #0]
   10610:	e7ff      	b.n	10612 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                        .expect("never");
                    return Some(row);
                }
            }
        }
    }
   10612:	f50d 7d46 	add.w	sp, sp, #792	; 0x318
   10616:	bd80      	pop	{r7, pc}
                    let row = PixelRow {
   10618:	9811      	ldr	r0, [sp, #68]	; 0x44
   1061a:	f8ad 00d4 	strh.w	r0, [sp, #212]	; 0xd4
   1061e:	9910      	ldr	r1, [sp, #64]	; 0x40
   10620:	f8ad 10d6 	strh.w	r1, [sp, #214]	; 0xd6
   10624:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   10626:	f8ad 20d8 	strh.w	r2, [sp, #216]	; 0xd8
   1062a:	a81b      	add	r0, sp, #108	; 0x6c
   1062c:	a937      	add	r1, sp, #220	; 0xdc
   1062e:	2268      	movs	r2, #104	; 0x68
   10630:	f00c fd8a 	bl	1d148 <__aeabi_memcpy>
                    self.colors.clear();
   10634:	9816      	ldr	r0, [sp, #88]	; 0x58
   10636:	3024      	adds	r0, #36	; 0x24
   10638:	f004 fc7d 	bl	14f36 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   1063c:	e7ff      	b.n	1063e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xbc>
   1063e:	2001      	movs	r0, #1
                    self.first_pixel = true;
   10640:	9916      	ldr	r1, [sp, #88]	; 0x58
   10642:	f881 0092 	strb.w	r0, [r1, #146]	; 0x92
   10646:	aa51      	add	r2, sp, #324	; 0x144
   10648:	a91b      	add	r1, sp, #108	; 0x6c
   1064a:	2370      	movs	r3, #112	; 0x70
                    return Some(row);
   1064c:	900e      	str	r0, [sp, #56]	; 0x38
   1064e:	4610      	mov	r0, r2
   10650:	920d      	str	r2, [sp, #52]	; 0x34
   10652:	461a      	mov	r2, r3
   10654:	930c      	str	r3, [sp, #48]	; 0x30
   10656:	f00c fd77 	bl	1d148 <__aeabi_memcpy>
   1065a:	9815      	ldr	r0, [sp, #84]	; 0x54
   1065c:	3004      	adds	r0, #4
   1065e:	990d      	ldr	r1, [sp, #52]	; 0x34
   10660:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10662:	f00c fd71 	bl	1d148 <__aeabi_memcpy>
   10666:	980e      	ldr	r0, [sp, #56]	; 0x38
   10668:	9915      	ldr	r1, [sp, #84]	; 0x54
   1066a:	6008      	str	r0, [r1, #0]
   1066c:	e7d1      	b.n	10612 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                    if x == self.x_right + 1 && y == self.y {
   1066e:	9816      	ldr	r0, [sp, #88]	; 0x58
   10670:	f8b0 108e 	ldrh.w	r1, [r0, #142]	; 0x8e
   10674:	3101      	adds	r1, #1
   10676:	b28a      	uxth	r2, r1
   10678:	460b      	mov	r3, r1
   1067a:	428a      	cmp	r2, r1
   1067c:	930b      	str	r3, [sp, #44]	; 0x2c
   1067e:	f040 80b9 	bne.w	107f4 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x272>
   10682:	e040      	b.n	10706 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x184>
   10684:	2000      	movs	r0, #0
                        self.first_pixel = false;
   10686:	9916      	ldr	r1, [sp, #88]	; 0x58
   10688:	f881 0092 	strb.w	r0, [r1, #146]	; 0x92
                        self.x_left = x;
   1068c:	9814      	ldr	r0, [sp, #80]	; 0x50
   1068e:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
                        self.x_right = x;
   10692:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
                        self.y = y;
   10696:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   10698:	f8a1 2090 	strh.w	r2, [r1, #144]	; 0x90
                        self.colors.clear();
   1069c:	f101 0024 	add.w	r0, r1, #36	; 0x24
   106a0:	f004 fc49 	bl	14f36 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   106a4:	e7ff      	b.n	106a6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x124>
                        self.colors.push(color)
   106a6:	9816      	ldr	r0, [sp, #88]	; 0x58
   106a8:	3024      	adds	r0, #36	; 0x24
   106aa:	9912      	ldr	r1, [sp, #72]	; 0x48
   106ac:	f004 fc33 	bl	14f16 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   106b0:	900a      	str	r0, [sp, #40]	; 0x28
   106b2:	9109      	str	r1, [sp, #36]	; 0x24
   106b4:	e7ff      	b.n	106b6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x134>
   106b6:	f24f 2038 	movw	r0, #62008	; 0xf238
   106ba:	f2c0 0001 	movt	r0, #1
   106be:	4669      	mov	r1, sp
   106c0:	6008      	str	r0, [r1, #0]
   106c2:	f24f 12fc 	movw	r2, #61948	; 0xf1fc
   106c6:	f2c0 0201 	movt	r2, #1
   106ca:	2305      	movs	r3, #5
   106cc:	980a      	ldr	r0, [sp, #40]	; 0x28
   106ce:	9909      	ldr	r1, [sp, #36]	; 0x24
   106d0:	f004 ff8f 	bl	155f2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>
   106d4:	e7ff      	b.n	106d6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x154>
                        continue;
   106d6:	e7ff      	b.n	106d8 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x156>
   106d8:	e75a      	b.n	10590 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xe>
   106da:	2001      	movs	r0, #1
                    if x == self.x_right + 1 && y == self.y {
   106dc:	f88d 01b7 	strb.w	r0, [sp, #439]	; 0x1b7
   106e0:	e00b      	b.n	106fa <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x178>
   106e2:	2000      	movs	r0, #0
   106e4:	f88d 01b7 	strb.w	r0, [sp, #439]	; 0x1b7
   106e8:	e007      	b.n	106fa <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x178>
   106ea:	9816      	ldr	r0, [sp, #88]	; 0x58
   106ec:	f8b0 1090 	ldrh.w	r1, [r0, #144]	; 0x90
   106f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   106f2:	b293      	uxth	r3, r2
   106f4:	428b      	cmp	r3, r1
   106f6:	d0f0      	beq.n	106da <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x158>
   106f8:	e7f3      	b.n	106e2 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x160>
   106fa:	f89d 01b7 	ldrb.w	r0, [sp, #439]	; 0x1b7
   106fe:	07c0      	lsls	r0, r0, #31
   10700:	2800      	cmp	r0, #0
   10702:	d107      	bne.n	10714 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x192>
   10704:	e020      	b.n	10748 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1c6>
   10706:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10708:	b281      	uxth	r1, r0
   1070a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1070c:	b293      	uxth	r3, r2
   1070e:	428b      	cmp	r3, r1
   10710:	d0eb      	beq.n	106ea <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x168>
   10712:	e7e6      	b.n	106e2 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x160>
                        if self.colors.push(color).is_ok() {
   10714:	9816      	ldr	r0, [sp, #88]	; 0x58
   10716:	3024      	adds	r0, #36	; 0x24
   10718:	9912      	ldr	r1, [sp, #72]	; 0x48
   1071a:	f004 fbfc 	bl	14f16 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   1071e:	f8ad 11ba 	strh.w	r1, [sp, #442]	; 0x1ba
   10722:	f8ad 01b8 	strh.w	r0, [sp, #440]	; 0x1b8
   10726:	e7ff      	b.n	10728 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1a6>
   10728:	a86e      	add	r0, sp, #440	; 0x1b8
   1072a:	f004 ff3d 	bl	155a8 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE>
   1072e:	9008      	str	r0, [sp, #32]
   10730:	e7ff      	b.n	10732 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1b0>
   10732:	9808      	ldr	r0, [sp, #32]
   10734:	07c1      	lsls	r1, r0, #31
   10736:	2900      	cmp	r1, #0
   10738:	d101      	bne.n	1073e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1bc>
   1073a:	e7ff      	b.n	1073c <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1ba>
                    if x == self.x_right + 1 && y == self.y {
   1073c:	e004      	b.n	10748 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1c6>
                            self.x_right = x;
   1073e:	9814      	ldr	r0, [sp, #80]	; 0x50
   10740:	9916      	ldr	r1, [sp, #88]	; 0x58
   10742:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
                            continue;
   10746:	e7c7      	b.n	106d8 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x156>
                        x_left: self.x_left,
   10748:	9816      	ldr	r0, [sp, #88]	; 0x58
   1074a:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
                        x_right: self.x_right,
   1074e:	f8b0 208e 	ldrh.w	r2, [r0, #142]	; 0x8e
                        y: self.y,
   10752:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
                        colors: self.colors.clone(),
   10756:	f100 0c24 	add.w	ip, r0, #36	; 0x24
   1075a:	a88b      	add	r0, sp, #556	; 0x22c
   1075c:	9107      	str	r1, [sp, #28]
   1075e:	4661      	mov	r1, ip
   10760:	9206      	str	r2, [sp, #24]
   10762:	9305      	str	r3, [sp, #20]
   10764:	f004 fb22 	bl	14dac <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>
   10768:	e7ff      	b.n	1076a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1e8>
                    let row = PixelRow {
   1076a:	9807      	ldr	r0, [sp, #28]
   1076c:	f8ad 0224 	strh.w	r0, [sp, #548]	; 0x224
   10770:	9906      	ldr	r1, [sp, #24]
   10772:	f8ad 1226 	strh.w	r1, [sp, #550]	; 0x226
   10776:	9a05      	ldr	r2, [sp, #20]
   10778:	f8ad 2228 	strh.w	r2, [sp, #552]	; 0x228
   1077c:	a86f      	add	r0, sp, #444	; 0x1bc
   1077e:	a98b      	add	r1, sp, #556	; 0x22c
   10780:	2268      	movs	r2, #104	; 0x68
   10782:	f00c fce1 	bl	1d148 <__aeabi_memcpy>
                    self.x_left = x;
   10786:	9814      	ldr	r0, [sp, #80]	; 0x50
   10788:	9916      	ldr	r1, [sp, #88]	; 0x58
   1078a:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
                    self.x_right = x;
   1078e:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
                    self.y = y;
   10792:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   10794:	f8a1 2090 	strh.w	r2, [r1, #144]	; 0x90
                    self.colors.clear();
   10798:	f101 0024 	add.w	r0, r1, #36	; 0x24
   1079c:	f004 fbcb 	bl	14f36 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   107a0:	e7ff      	b.n	107a2 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x220>
                    self.colors.push(color)
   107a2:	9816      	ldr	r0, [sp, #88]	; 0x58
   107a4:	3024      	adds	r0, #36	; 0x24
   107a6:	9912      	ldr	r1, [sp, #72]	; 0x48
   107a8:	f004 fbb5 	bl	14f16 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   107ac:	9004      	str	r0, [sp, #16]
   107ae:	9103      	str	r1, [sp, #12]
   107b0:	e7ff      	b.n	107b2 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x230>
   107b2:	f24f 207c 	movw	r0, #62076	; 0xf27c
   107b6:	f2c0 0001 	movt	r0, #1
   107ba:	4669      	mov	r1, sp
   107bc:	6008      	str	r0, [r1, #0]
   107be:	f24f 12fc 	movw	r2, #61948	; 0xf1fc
   107c2:	f2c0 0201 	movt	r2, #1
   107c6:	2305      	movs	r3, #5
   107c8:	9804      	ldr	r0, [sp, #16]
   107ca:	9903      	ldr	r1, [sp, #12]
   107cc:	f004 ff11 	bl	155f2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>
   107d0:	e7ff      	b.n	107d2 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x250>
   107d2:	a8a5      	add	r0, sp, #660	; 0x294
   107d4:	a96f      	add	r1, sp, #444	; 0x1bc
   107d6:	2270      	movs	r2, #112	; 0x70
                    return Some(row);
   107d8:	9002      	str	r0, [sp, #8]
   107da:	9201      	str	r2, [sp, #4]
   107dc:	f00c fcb4 	bl	1d148 <__aeabi_memcpy>
   107e0:	9815      	ldr	r0, [sp, #84]	; 0x54
   107e2:	3004      	adds	r0, #4
   107e4:	9902      	ldr	r1, [sp, #8]
   107e6:	9a01      	ldr	r2, [sp, #4]
   107e8:	f00c fcae 	bl	1d148 <__aeabi_memcpy>
   107ec:	2001      	movs	r0, #1
   107ee:	9915      	ldr	r1, [sp, #84]	; 0x54
   107f0:	6008      	str	r0, [r1, #0]
   107f2:	e70e      	b.n	10612 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                    if x == self.x_right + 1 && y == self.y {
   107f4:	f24f 2060 	movw	r0, #62048	; 0xf260
   107f8:	f2c0 0001 	movt	r0, #1
   107fc:	f24f 2248 	movw	r2, #62024	; 0xf248
   10800:	f2c0 0201 	movt	r2, #1
   10804:	211c      	movs	r1, #28
   10806:	f006 f8cb 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1080a:	defe      	udf	#254	; 0xfe

0001080c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E>:
impl<R: Iterator<Item = PixelRow>> Iterator for BlockIterator<R> {
    /// This Iterator returns Pixel Blocks
    type Item = PixelBlock;

    /// Return the next Pixel Block of contiguous Pixel Rows with the same start and end column number
    fn next(&mut self) -> Option<Self::Item> {
   1080c:	b580      	push	{r7, lr}
   1080e:	f5ad 6dcb 	sub.w	sp, sp, #1624	; 0x658
   10812:	f8cd 164c 	str.w	r1, [sp, #1612]	; 0x64c
   10816:	2200      	movs	r2, #0
        //  Loop over all Pixel Rows until we have composed a Pixel Block, or we have run out of Pixel Rows.
        loop {
   10818:	f88d 264b 	strb.w	r2, [sp, #1611]	; 0x64b
   1081c:	911f      	str	r1, [sp, #124]	; 0x7c
   1081e:	901e      	str	r0, [sp, #120]	; 0x78
   10820:	e7ff      	b.n	10822 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x16>
   10822:	2001      	movs	r0, #1
            //  Get the next Pixel Row.
            let next_row = self.rows.next();
   10824:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
   10828:	a820      	add	r0, sp, #128	; 0x80
   1082a:	991f      	ldr	r1, [sp, #124]	; 0x7c
   1082c:	f7ff fea9 	bl	10582 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E>
   10830:	e7ff      	b.n	10832 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x26>
            match next_row {
                None => {  //  If no more Pixel Rows...
   10832:	9820      	ldr	r0, [sp, #128]	; 0x80
   10834:	2800      	cmp	r0, #0
   10836:	d026      	beq.n	10886 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x7a>
   10838:	e7ff      	b.n	1083a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2e>
   1083a:	a820      	add	r0, sp, #128	; 0x80
                    };
                    self.colors.clear();
                    self.first_row = true;
                    return Some(row);
                }
                Some(PixelRow { x_left, x_right, y, colors, .. }) => {  //  If there is a Pixel Row...
   1083c:	1d01      	adds	r1, r0, #4
   1083e:	f8bd 00ec 	ldrh.w	r0, [sp, #236]	; 0xec
   10842:	4602      	mov	r2, r0
   10844:	f8ad 0652 	strh.w	r0, [sp, #1618]	; 0x652
   10848:	f8bd 00ee 	ldrh.w	r0, [sp, #238]	; 0xee
   1084c:	4603      	mov	r3, r0
   1084e:	f8ad 0654 	strh.w	r0, [sp, #1620]	; 0x654
   10852:	f8bd 00f0 	ldrh.w	r0, [sp, #240]	; 0xf0
   10856:	4684      	mov	ip, r0
   10858:	f8ad 0656 	strh.w	r0, [sp, #1622]	; 0x656
   1085c:	2000      	movs	r0, #0
   1085e:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
   10862:	a8da      	add	r0, sp, #872	; 0x368
   10864:	f04f 0e68 	mov.w	lr, #104	; 0x68
   10868:	921d      	str	r2, [sp, #116]	; 0x74
   1086a:	4672      	mov	r2, lr
   1086c:	931c      	str	r3, [sp, #112]	; 0x70
   1086e:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
   10872:	f00c fc69 	bl	1d148 <__aeabi_memcpy>
                    //  Save the first row as the block start and handle next block.
                    if self.first_row {
   10876:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10878:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
   1087c:	07c9      	lsls	r1, r1, #31
   1087e:	2900      	cmp	r1, #0
   10880:	d15a      	bne.n	10938 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x12c>
   10882:	e04e      	b.n	10922 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x116>
            match next_row {
   10884:	defe      	udf	#254	; 0xfe
                    if self.first_row {
   10886:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10888:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
   1088c:	07c9      	lsls	r1, r1, #31
   1088e:	2900      	cmp	r1, #0
   10890:	d115      	bne.n	108be <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xb2>
   10892:	e7ff      	b.n	10894 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x88>
                        x_left: self.x_left,
   10894:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10896:	f8b0 1160 	ldrh.w	r1, [r0, #352]	; 0x160
                        x_right: self.x_right,
   1089a:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
                        y_top: self.y_top,
   1089e:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
                        y_bottom: self.y_bottom,
   108a2:	f8b0 c166 	ldrh.w	ip, [r0, #358]	; 0x166
                        colors: self.colors.clone(),
   108a6:	f100 0e94 	add.w	lr, r0, #148	; 0x94
   108aa:	a872      	add	r0, sp, #456	; 0x1c8
   108ac:	911a      	str	r1, [sp, #104]	; 0x68
   108ae:	4671      	mov	r1, lr
   108b0:	9219      	str	r2, [sp, #100]	; 0x64
   108b2:	9318      	str	r3, [sp, #96]	; 0x60
   108b4:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
   108b8:	f004 fa88 	bl	14dcc <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>
   108bc:	e003      	b.n	108c6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xba>
   108be:	2000      	movs	r0, #0
                        return None;  //  No rows to group
   108c0:	991e      	ldr	r1, [sp, #120]	; 0x78
   108c2:	6008      	str	r0, [r1, #0]
   108c4:	e153      	b.n	10b6e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
                    let row = PixelBlock {
   108c6:	981a      	ldr	r0, [sp, #104]	; 0x68
   108c8:	f8ad 01c0 	strh.w	r0, [sp, #448]	; 0x1c0
   108cc:	9919      	ldr	r1, [sp, #100]	; 0x64
   108ce:	f8ad 11c2 	strh.w	r1, [sp, #450]	; 0x1c2
   108d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   108d4:	f8ad 21c4 	strh.w	r2, [sp, #452]	; 0x1c4
   108d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   108da:	f8ad 31c6 	strh.w	r3, [sp, #454]	; 0x1c6
   108de:	a83d      	add	r0, sp, #244	; 0xf4
   108e0:	a972      	add	r1, sp, #456	; 0x1c8
   108e2:	22cc      	movs	r2, #204	; 0xcc
   108e4:	f00c fc30 	bl	1d148 <__aeabi_memcpy>
                    self.colors.clear();
   108e8:	981f      	ldr	r0, [sp, #124]	; 0x7c
   108ea:	3094      	adds	r0, #148	; 0x94
   108ec:	f004 fb2b 	bl	14f46 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   108f0:	e7ff      	b.n	108f2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xe6>
   108f2:	2001      	movs	r0, #1
                    self.first_row = true;
   108f4:	991f      	ldr	r1, [sp, #124]	; 0x7c
   108f6:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
   108fa:	aaa5      	add	r2, sp, #660	; 0x294
   108fc:	a93d      	add	r1, sp, #244	; 0xf4
   108fe:	23d4      	movs	r3, #212	; 0xd4
                    return Some(row);
   10900:	9016      	str	r0, [sp, #88]	; 0x58
   10902:	4610      	mov	r0, r2
   10904:	9215      	str	r2, [sp, #84]	; 0x54
   10906:	461a      	mov	r2, r3
   10908:	9314      	str	r3, [sp, #80]	; 0x50
   1090a:	f00c fc1d 	bl	1d148 <__aeabi_memcpy>
   1090e:	981e      	ldr	r0, [sp, #120]	; 0x78
   10910:	3004      	adds	r0, #4
   10912:	9915      	ldr	r1, [sp, #84]	; 0x54
   10914:	9a14      	ldr	r2, [sp, #80]	; 0x50
   10916:	f00c fc17 	bl	1d148 <__aeabi_memcpy>
   1091a:	9816      	ldr	r0, [sp, #88]	; 0x58
   1091c:	991e      	ldr	r1, [sp, #120]	; 0x78
   1091e:	6008      	str	r0, [r1, #0]
   10920:	e125      	b.n	10b6e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
                        self.colors.extend_from_slice(&colors)
                            .expect("never");
                        continue;
                    }
                    //  If this row is adjacent to the previous row and same size, add to the block.
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   10922:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10924:	f8b0 1166 	ldrh.w	r1, [r0, #358]	; 0x166
   10928:	3101      	adds	r1, #1
   1092a:	b28a      	uxth	r2, r1
   1092c:	460b      	mov	r3, r1
   1092e:	428a      	cmp	r2, r1
   10930:	9313      	str	r3, [sp, #76]	; 0x4c
   10932:	f040 8128 	bne.w	10b86 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x37a>
   10936:	e069      	b.n	10a0c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x200>
   10938:	2000      	movs	r0, #0
                        self.first_row = false;
   1093a:	991f      	ldr	r1, [sp, #124]	; 0x7c
   1093c:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
                        self.x_left = x_left;
   10940:	981d      	ldr	r0, [sp, #116]	; 0x74
   10942:	f8a1 0160 	strh.w	r0, [r1, #352]	; 0x160
                        self.x_right = x_right;
   10946:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   10948:	f8a1 2162 	strh.w	r2, [r1, #354]	; 0x162
                        self.y_top = y;
   1094c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1094e:	f8a1 3164 	strh.w	r3, [r1, #356]	; 0x164
                        self.y_bottom = y;
   10952:	f8a1 3166 	strh.w	r3, [r1, #358]	; 0x166
                        self.colors.clear();
   10956:	f101 0094 	add.w	r0, r1, #148	; 0x94
   1095a:	f004 faf4 	bl	14f46 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   1095e:	e7ff      	b.n	10960 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x154>
                        self.colors.extend_from_slice(&colors)
   10960:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10962:	f100 0194 	add.w	r1, r0, #148	; 0x94
   10966:	a8da      	add	r0, sp, #872	; 0x368
   10968:	9112      	str	r1, [sp, #72]	; 0x48
   1096a:	f004 fa5f 	bl	14e2c <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   1096e:	9011      	str	r0, [sp, #68]	; 0x44
   10970:	9110      	str	r1, [sp, #64]	; 0x40
   10972:	e7ff      	b.n	10974 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x168>
   10974:	9812      	ldr	r0, [sp, #72]	; 0x48
   10976:	9911      	ldr	r1, [sp, #68]	; 0x44
   10978:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1097a:	f004 faa0 	bl	14ebe <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   1097e:	900f      	str	r0, [sp, #60]	; 0x3c
   10980:	e7ff      	b.n	10982 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x176>
   10982:	980f      	ldr	r0, [sp, #60]	; 0x3c
   10984:	f000 0001 	and.w	r0, r0, #1
   10988:	f24f 11fc 	movw	r1, #61948	; 0xf1fc
   1098c:	f2c0 0101 	movt	r1, #1
   10990:	f24f 238c 	movw	r3, #62092	; 0xf28c
   10994:	f2c0 0301 	movt	r3, #1
   10998:	2205      	movs	r2, #5
   1099a:	f004 fe5b 	bl	15654 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   1099e:	e7ff      	b.n	109a0 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x194>
                        continue;
   109a0:	e7ff      	b.n	109a2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x196>
   109a2:	a8da      	add	r0, sp, #872	; 0x368
                    self.colors.clear();
                    self.colors.extend_from_slice(&colors)
                        .expect("never");
                    return Some(row);
                }
            }
   109a4:	f001 f951 	bl	11c4a <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   109a8:	e7ff      	b.n	109aa <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x19e>
        }
   109aa:	9820      	ldr	r0, [sp, #128]	; 0x80
   109ac:	2801      	cmp	r0, #1
   109ae:	f000 80e2 	beq.w	10b76 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x36a>
   109b2:	e0e4      	b.n	10b7e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x372>
   109b4:	2001      	movs	r0, #1
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   109b6:	f88d 03d1 	strb.w	r0, [sp, #977]	; 0x3d1
   109ba:	e00b      	b.n	109d4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1c8>
   109bc:	2000      	movs	r0, #0
   109be:	f88d 03d1 	strb.w	r0, [sp, #977]	; 0x3d1
   109c2:	e007      	b.n	109d4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1c8>
   109c4:	981f      	ldr	r0, [sp, #124]	; 0x7c
   109c6:	f8b0 1162 	ldrh.w	r1, [r0, #354]	; 0x162
   109ca:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   109cc:	b293      	uxth	r3, r2
   109ce:	428b      	cmp	r3, r1
   109d0:	d0f0      	beq.n	109b4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1a8>
   109d2:	e7f3      	b.n	109bc <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b0>
   109d4:	f89d 03d1 	ldrb.w	r0, [sp, #977]	; 0x3d1
   109d8:	07c0      	lsls	r0, r0, #31
   109da:	2800      	cmp	r0, #0
   109dc:	d11d      	bne.n	10a1a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x20e>
   109de:	e03f      	b.n	10a60 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x254>
   109e0:	2001      	movs	r0, #1
   109e2:	f88d 03d2 	strb.w	r0, [sp, #978]	; 0x3d2
   109e6:	e00b      	b.n	10a00 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1f4>
   109e8:	2000      	movs	r0, #0
   109ea:	f88d 03d2 	strb.w	r0, [sp, #978]	; 0x3d2
   109ee:	e007      	b.n	10a00 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1f4>
   109f0:	981f      	ldr	r0, [sp, #124]	; 0x7c
   109f2:	f8b0 1160 	ldrh.w	r1, [r0, #352]	; 0x160
   109f6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   109f8:	b293      	uxth	r3, r2
   109fa:	428b      	cmp	r3, r1
   109fc:	d0f0      	beq.n	109e0 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1d4>
   109fe:	e7f3      	b.n	109e8 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1dc>
   10a00:	f89d 03d2 	ldrb.w	r0, [sp, #978]	; 0x3d2
   10a04:	07c0      	lsls	r0, r0, #31
   10a06:	2800      	cmp	r0, #0
   10a08:	d1dc      	bne.n	109c4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b8>
   10a0a:	e7d7      	b.n	109bc <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b0>
   10a0c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   10a0e:	b281      	uxth	r1, r0
   10a10:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   10a12:	b293      	uxth	r3, r2
   10a14:	428b      	cmp	r3, r1
   10a16:	d0eb      	beq.n	109f0 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1e4>
   10a18:	e7e6      	b.n	109e8 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1dc>
                        if self.colors.extend_from_slice(&colors).is_ok() {
   10a1a:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10a1c:	f100 0194 	add.w	r1, r0, #148	; 0x94
   10a20:	a8da      	add	r0, sp, #872	; 0x368
   10a22:	910e      	str	r1, [sp, #56]	; 0x38
   10a24:	f004 fa02 	bl	14e2c <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   10a28:	900d      	str	r0, [sp, #52]	; 0x34
   10a2a:	910c      	str	r1, [sp, #48]	; 0x30
   10a2c:	e7ff      	b.n	10a2e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x222>
   10a2e:	980e      	ldr	r0, [sp, #56]	; 0x38
   10a30:	990d      	ldr	r1, [sp, #52]	; 0x34
   10a32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10a34:	f004 fa43 	bl	14ebe <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   10a38:	f88d 03d3 	strb.w	r0, [sp, #979]	; 0x3d3
   10a3c:	e7ff      	b.n	10a3e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x232>
   10a3e:	f20d 30d3 	addw	r0, sp, #979	; 0x3d3
   10a42:	f004 fdc3 	bl	155cc <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E>
   10a46:	900b      	str	r0, [sp, #44]	; 0x2c
   10a48:	e7ff      	b.n	10a4a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x23e>
   10a4a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10a4c:	07c1      	lsls	r1, r0, #31
   10a4e:	2900      	cmp	r1, #0
   10a50:	d101      	bne.n	10a56 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x24a>
   10a52:	e7ff      	b.n	10a54 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x248>
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   10a54:	e004      	b.n	10a60 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x254>
                            self.y_bottom = y;
   10a56:	981b      	ldr	r0, [sp, #108]	; 0x6c
   10a58:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10a5a:	f8a1 0166 	strh.w	r0, [r1, #358]	; 0x166
                            continue;    
   10a5e:	e7a0      	b.n	109a2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x196>
                        x_left: self.x_left,
   10a60:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10a62:	f8b0 1160 	ldrh.w	r1, [r0, #352]	; 0x160
                        x_right: self.x_right,
   10a66:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
                        y_top: self.y_top,
   10a6a:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
                        y_bottom: self.y_bottom,
   10a6e:	f8b0 c166 	ldrh.w	ip, [r0, #358]	; 0x166
                        colors: self.colors.clone(),
   10a72:	f100 0e94 	add.w	lr, r0, #148	; 0x94
   10a76:	f50d 6095 	add.w	r0, sp, #1192	; 0x4a8
   10a7a:	910a      	str	r1, [sp, #40]	; 0x28
   10a7c:	4671      	mov	r1, lr
   10a7e:	9209      	str	r2, [sp, #36]	; 0x24
   10a80:	9308      	str	r3, [sp, #32]
   10a82:	f8cd c01c 	str.w	ip, [sp, #28]
   10a86:	f004 f9a1 	bl	14dcc <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>
   10a8a:	e7ff      	b.n	10a8c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x280>
                    let row = PixelBlock {
   10a8c:	980a      	ldr	r0, [sp, #40]	; 0x28
   10a8e:	f8ad 04a0 	strh.w	r0, [sp, #1184]	; 0x4a0
   10a92:	9909      	ldr	r1, [sp, #36]	; 0x24
   10a94:	f8ad 14a2 	strh.w	r1, [sp, #1186]	; 0x4a2
   10a98:	9a08      	ldr	r2, [sp, #32]
   10a9a:	f8ad 24a4 	strh.w	r2, [sp, #1188]	; 0x4a4
   10a9e:	9b07      	ldr	r3, [sp, #28]
   10aa0:	f8ad 34a6 	strh.w	r3, [sp, #1190]	; 0x4a6
   10aa4:	a8f5      	add	r0, sp, #980	; 0x3d4
   10aa6:	f50d 6195 	add.w	r1, sp, #1192	; 0x4a8
   10aaa:	22cc      	movs	r2, #204	; 0xcc
   10aac:	f00c fb4c 	bl	1d148 <__aeabi_memcpy>
                    self.x_left = x_left;
   10ab0:	981d      	ldr	r0, [sp, #116]	; 0x74
   10ab2:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10ab4:	f8a1 0160 	strh.w	r0, [r1, #352]	; 0x160
                    self.x_right = x_right;
   10ab8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   10aba:	f8a1 2162 	strh.w	r2, [r1, #354]	; 0x162
                    self.y_top = y;
   10abe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   10ac0:	f8a1 3164 	strh.w	r3, [r1, #356]	; 0x164
                    self.y_bottom = y;
   10ac4:	f8a1 3166 	strh.w	r3, [r1, #358]	; 0x166
                    self.colors.clear();
   10ac8:	f101 0094 	add.w	r0, r1, #148	; 0x94
   10acc:	f004 fa3b 	bl	14f46 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   10ad0:	e7ff      	b.n	10ad2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2c6>
                    self.colors.extend_from_slice(&colors)
   10ad2:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10ad4:	f100 0194 	add.w	r1, r0, #148	; 0x94
   10ad8:	a8da      	add	r0, sp, #872	; 0x368
   10ada:	9106      	str	r1, [sp, #24]
   10adc:	f004 f9a6 	bl	14e2c <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   10ae0:	9005      	str	r0, [sp, #20]
   10ae2:	9104      	str	r1, [sp, #16]
   10ae4:	e7ff      	b.n	10ae6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2da>
   10ae6:	9806      	ldr	r0, [sp, #24]
   10ae8:	9905      	ldr	r1, [sp, #20]
   10aea:	9a04      	ldr	r2, [sp, #16]
   10aec:	f004 f9e7 	bl	14ebe <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   10af0:	9003      	str	r0, [sp, #12]
   10af2:	e7ff      	b.n	10af4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2e8>
   10af4:	9803      	ldr	r0, [sp, #12]
   10af6:	f000 0001 	and.w	r0, r0, #1
   10afa:	f24f 11fc 	movw	r1, #61948	; 0xf1fc
   10afe:	f2c0 0101 	movt	r1, #1
   10b02:	f24f 23ac 	movw	r3, #62124	; 0xf2ac
   10b06:	f2c0 0301 	movt	r3, #1
   10b0a:	2205      	movs	r2, #5
   10b0c:	f004 fda2 	bl	15654 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   10b10:	e7ff      	b.n	10b12 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x306>
   10b12:	f20d 5074 	addw	r0, sp, #1396	; 0x574
   10b16:	a9f5      	add	r1, sp, #980	; 0x3d4
   10b18:	22d4      	movs	r2, #212	; 0xd4
                    return Some(row);
   10b1a:	9002      	str	r0, [sp, #8]
   10b1c:	9201      	str	r2, [sp, #4]
   10b1e:	f00c fb13 	bl	1d148 <__aeabi_memcpy>
   10b22:	981e      	ldr	r0, [sp, #120]	; 0x78
   10b24:	3004      	adds	r0, #4
   10b26:	9902      	ldr	r1, [sp, #8]
   10b28:	9a01      	ldr	r2, [sp, #4]
   10b2a:	f00c fb0d 	bl	1d148 <__aeabi_memcpy>
   10b2e:	2001      	movs	r0, #1
   10b30:	991e      	ldr	r1, [sp, #120]	; 0x78
   10b32:	6008      	str	r0, [r1, #0]
   10b34:	a8da      	add	r0, sp, #872	; 0x368
            }
   10b36:	f001 f888 	bl	11c4a <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   10b3a:	e7ff      	b.n	10b3c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x330>
                    return Some(row);
   10b3c:	e017      	b.n	10b6e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
   10b3e:	2000      	movs	r0, #0
        }
   10b40:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
    }
   10b44:	f50d 6dcb 	add.w	sp, sp, #1624	; 0x658
   10b48:	bd80      	pop	{r7, pc}
        }
   10b4a:	f89d 064b 	ldrb.w	r0, [sp, #1611]	; 0x64b
   10b4e:	07c0      	lsls	r0, r0, #31
   10b50:	2800      	cmp	r0, #0
   10b52:	d0f4      	beq.n	10b3e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   10b54:	e7ff      	b.n	10b56 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x34a>
   10b56:	2000      	movs	r0, #0
   10b58:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
   10b5c:	a820      	add	r0, sp, #128	; 0x80
   10b5e:	3004      	adds	r0, #4
   10b60:	f001 f873 	bl	11c4a <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   10b64:	e7eb      	b.n	10b3e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   10b66:	a820      	add	r0, sp, #128	; 0x80
   10b68:	f001 f834 	bl	11bd4 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>
   10b6c:	e7e7      	b.n	10b3e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   10b6e:	9820      	ldr	r0, [sp, #128]	; 0x80
   10b70:	2801      	cmp	r0, #1
   10b72:	d0ea      	beq.n	10b4a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x33e>
   10b74:	e7f7      	b.n	10b66 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x35a>
   10b76:	2000      	movs	r0, #0
   10b78:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
                        continue;
   10b7c:	e651      	b.n	10822 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x16>
   10b7e:	a820      	add	r0, sp, #128	; 0x80
        }
   10b80:	f001 f828 	bl	11bd4 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>
   10b84:	e7f7      	b.n	10b76 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x36a>
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   10b86:	f24f 2060 	movw	r0, #62048	; 0xf260
   10b8a:	f2c0 0001 	movt	r0, #1
   10b8e:	f24f 229c 	movw	r2, #62108	; 0xf29c
   10b92:	f2c0 0201 	movt	r2, #1
   10b96:	211c      	movs	r1, #28
   10b98:	f005 ff02 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10b9c:	defe      	udf	#254	; 0xfe

00010b9e <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>:
    }

    /// Converts the value of `self` to a `u8`. If the value cannot be
    /// represented by a `u8`, then `None` is returned.
    #[inline]
    fn to_u8(&self) -> Option<u8> {
   10b9e:	b580      	push	{r7, lr}
   10ba0:	b08a      	sub	sp, #40	; 0x28
   10ba2:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
   10ba4:	f001 fe53 	bl	1284e <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>
   10ba8:	9307      	str	r3, [sp, #28]
   10baa:	9206      	str	r2, [sp, #24]
   10bac:	9105      	str	r1, [sp, #20]
   10bae:	9004      	str	r0, [sp, #16]
   10bb0:	e7ff      	b.n	10bb2 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x14>
   10bb2:	a804      	add	r0, sp, #16
   10bb4:	f003 ffdc 	bl	14b70 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
   10bb8:	9003      	str	r0, [sp, #12]
   10bba:	e7ff      	b.n	10bbc <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x1e>
   10bbc:	9803      	ldr	r0, [sp, #12]
   10bbe:	f004 f8aa 	bl	14d16 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
   10bc2:	9002      	str	r0, [sp, #8]
   10bc4:	9101      	str	r1, [sp, #4]
   10bc6:	e7ff      	b.n	10bc8 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x2a>
    }
   10bc8:	9802      	ldr	r0, [sp, #8]
   10bca:	f000 0001 	and.w	r0, r0, #1
   10bce:	9901      	ldr	r1, [sp, #4]
   10bd0:	b00a      	add	sp, #40	; 0x28
   10bd2:	bd80      	pop	{r7, pc}

00010bd4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>:
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }

    pub fn hard_reset(&mut self) -> Result<(), ()>
   10bd4:	b580      	push	{r7, lr}
   10bd6:	b090      	sub	sp, #64	; 0x40
   10bd8:	900b      	str	r0, [sp, #44]	; 0x2c
    {
        self.rst.set_high().map_err(|_| ())?;
   10bda:	f100 010c 	add.w	r1, r0, #12
   10bde:	9006      	str	r0, [sp, #24]
   10be0:	4608      	mov	r0, r1
   10be2:	f7ff f821 	bl	fc28 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
   10be6:	9005      	str	r0, [sp, #20]
   10be8:	e7ff      	b.n	10bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x16>
   10bea:	9805      	ldr	r0, [sp, #20]
   10bec:	f004 fe2a 	bl	15844 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>
   10bf0:	9004      	str	r0, [sp, #16]
   10bf2:	e7ff      	b.n	10bf4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x20>
   10bf4:	9804      	ldr	r0, [sp, #16]
   10bf6:	f000 0001 	and.w	r0, r0, #1
   10bfa:	f7fe faf0 	bl	f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   10bfe:	f88d 001f 	strb.w	r0, [sp, #31]
   10c02:	e7ff      	b.n	10c04 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x30>
   10c04:	f89d 001f 	ldrb.w	r0, [sp, #31]
   10c08:	07c1      	lsls	r1, r0, #31
   10c0a:	2900      	cmp	r1, #0
   10c0c:	d001      	beq.n	10c12 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3e>
   10c0e:	e7ff      	b.n	10c10 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3c>
   10c10:	e006      	b.n	10c20 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x4c>
        self.rst.set_low().map_err(|_| ())?;
   10c12:	9806      	ldr	r0, [sp, #24]
   10c14:	300c      	adds	r0, #12
   10c16:	f7fe fffc 	bl	fc12 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
   10c1a:	9003      	str	r0, [sp, #12]
   10c1c:	e00d      	b.n	10c3a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x66>
        self.rst.set_high().map_err(|_| ())?;
   10c1e:	defe      	udf	#254	; 0xfe
   10c20:	f002 fa02 	bl	13028 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   10c24:	e003      	b.n	10c2e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x5a>
        self.rst.set_high().map_err(|_| ())
    }
   10c26:	f89d 001e 	ldrb.w	r0, [sp, #30]
   10c2a:	b010      	add	sp, #64	; 0x40
   10c2c:	bd80      	pop	{r7, pc}
        self.rst.set_high().map_err(|_| ())?;
   10c2e:	f004 fe5e 	bl	158ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   10c32:	f88d 001e 	strb.w	r0, [sp, #30]
   10c36:	e7ff      	b.n	10c38 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x64>
   10c38:	e7f5      	b.n	10c26 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_low().map_err(|_| ())?;
   10c3a:	9803      	ldr	r0, [sp, #12]
   10c3c:	f004 fdad 	bl	1579a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>
   10c40:	9002      	str	r0, [sp, #8]
   10c42:	e7ff      	b.n	10c44 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x70>
   10c44:	9802      	ldr	r0, [sp, #8]
   10c46:	f000 0001 	and.w	r0, r0, #1
   10c4a:	f7fe fac8 	bl	f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   10c4e:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   10c52:	e7ff      	b.n	10c54 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x80>
   10c54:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   10c58:	07c1      	lsls	r1, r0, #31
   10c5a:	2900      	cmp	r1, #0
   10c5c:	d001      	beq.n	10c62 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8e>
   10c5e:	e7ff      	b.n	10c60 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8c>
   10c60:	e006      	b.n	10c70 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x9c>
        self.rst.set_high().map_err(|_| ())
   10c62:	9806      	ldr	r0, [sp, #24]
   10c64:	300c      	adds	r0, #12
   10c66:	f7fe ffdf 	bl	fc28 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
   10c6a:	9001      	str	r0, [sp, #4]
   10c6c:	e009      	b.n	10c82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xae>
        self.rst.set_low().map_err(|_| ())?;
   10c6e:	defe      	udf	#254	; 0xfe
   10c70:	f002 f9da 	bl	13028 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   10c74:	e7ff      	b.n	10c76 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xa2>
   10c76:	f004 fe3a 	bl	158ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   10c7a:	f88d 001e 	strb.w	r0, [sp, #30]
   10c7e:	e7ff      	b.n	10c80 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xac>
   10c80:	e7d1      	b.n	10c26 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_high().map_err(|_| ())
   10c82:	9801      	ldr	r0, [sp, #4]
   10c84:	f004 fd34 	bl	156f0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>
   10c88:	f88d 001e 	strb.w	r0, [sp, #30]
   10c8c:	e7ff      	b.n	10c8e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xba>
    }
   10c8e:	e7ca      	b.n	10c26 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>

00010c90 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>:
        self.rst.set_low().map_err(|_| ())?;
   10c90:	b082      	sub	sp, #8
   10c92:	9001      	str	r0, [sp, #4]
   10c94:	e7ff      	b.n	10c96 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE+0x6>
   10c96:	b002      	add	sp, #8
   10c98:	4770      	bx	lr

00010c9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>:
        self.rst.set_high().map_err(|_| ())?;
   10c9a:	b082      	sub	sp, #8
   10c9c:	9001      	str	r0, [sp, #4]
   10c9e:	e7ff      	b.n	10ca0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE+0x6>
   10ca0:	b002      	add	sp, #8
   10ca2:	4770      	bx	lr

00010ca4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>:
        self.rst.set_high().map_err(|_| ())
   10ca4:	b082      	sub	sp, #8
   10ca6:	9001      	str	r0, [sp, #4]
   10ca8:	e7ff      	b.n	10caa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE+0x6>
   10caa:	b002      	add	sp, #8
   10cac:	4770      	bx	lr

00010cae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E>:
            .expect("spi flush fail");
        Ok(())
    }

    /// Sets pixel colors at the given drawing window
    pub fn set_pixels<P: IntoIterator<Item = u16>>(&mut self, sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
   10cae:	b5f0      	push	{r4, r5, r6, r7, lr}
   10cb0:	b0c7      	sub	sp, #284	; 0x11c
   10cb2:	f8dd c134 	ldr.w	ip, [sp, #308]	; 0x134
   10cb6:	f8dd e130 	ldr.w	lr, [sp, #304]	; 0x130
   10cba:	461c      	mov	r4, r3
   10cbc:	4615      	mov	r5, r2
   10cbe:	460e      	mov	r6, r1
   10cc0:	9040      	str	r0, [sp, #256]	; 0x100
   10cc2:	f8ad 1104 	strh.w	r1, [sp, #260]	; 0x104
   10cc6:	f8ad 2106 	strh.w	r2, [sp, #262]	; 0x106
   10cca:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
   10cce:	f8ad e10a 	strh.w	lr, [sp, #266]	; 0x10a
   10cd2:	2700      	movs	r7, #0
        self.set_address_window(sx, sy, ex, ey)?;
   10cd4:	f88d 70ff 	strb.w	r7, [sp, #255]	; 0xff
   10cd8:	2701      	movs	r7, #1
   10cda:	f88d 70ff 	strb.w	r7, [sp, #255]	; 0xff
   10cde:	466f      	mov	r7, sp
   10ce0:	f8c7 e000 	str.w	lr, [r7]
   10ce4:	900a      	str	r0, [sp, #40]	; 0x28
   10ce6:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   10cea:	9408      	str	r4, [sp, #32]
   10cec:	9507      	str	r5, [sp, #28]
   10cee:	9606      	str	r6, [sp, #24]
   10cf0:	f000 fa44 	bl	1117c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>
   10cf4:	9005      	str	r0, [sp, #20]
   10cf6:	e7ff      	b.n	10cf8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x4a>
   10cf8:	9805      	ldr	r0, [sp, #20]
   10cfa:	f000 0001 	and.w	r0, r0, #1
   10cfe:	f7fe fa6e 	bl	f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   10d02:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
   10d06:	e7ff      	b.n	10d08 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x5a>
   10d08:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   10d0c:	07c1      	lsls	r1, r0, #31
   10d0e:	2900      	cmp	r1, #0
   10d10:	d001      	beq.n	10d16 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x68>
   10d12:	e7ff      	b.n	10d14 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x66>
   10d14:	e00f      	b.n	10d36 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x88>
   10d16:	2000      	movs	r0, #0
        self.write_pixels(colors) ? ;
   10d18:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
   10d1c:	a80c      	add	r0, sp, #48	; 0x30
   10d1e:	22cc      	movs	r2, #204	; 0xcc
   10d20:	9004      	str	r0, [sp, #16]
   10d22:	9909      	ldr	r1, [sp, #36]	; 0x24
   10d24:	f00c fa10 	bl	1d148 <__aeabi_memcpy>
   10d28:	980a      	ldr	r0, [sp, #40]	; 0x28
   10d2a:	9904      	ldr	r1, [sp, #16]
   10d2c:	f000 f884 	bl	10e38 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE>
   10d30:	9003      	str	r0, [sp, #12]
   10d32:	e00d      	b.n	10d50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xa2>
        self.set_address_window(sx, sy, ex, ey)?;
   10d34:	defe      	udf	#254	; 0xfe
   10d36:	f002 f977 	bl	13028 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   10d3a:	e003      	b.n	10d44 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x96>

        #[cfg(feature = "noblock_spi")]         //  If non-blocking SPI is enabled...
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }
   10d3c:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
   10d40:	b047      	add	sp, #284	; 0x11c
   10d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
        self.set_address_window(sx, sy, ex, ey)?;
   10d44:	f004 fdd3 	bl	158ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   10d48:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
   10d4c:	e7ff      	b.n	10d4e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xa0>
   10d4e:	e034      	b.n	10dba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x10c>
        self.write_pixels(colors) ? ;
   10d50:	9803      	ldr	r0, [sp, #12]
   10d52:	f000 0001 	and.w	r0, r0, #1
   10d56:	f7fe fa42 	bl	f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   10d5a:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   10d5e:	e7ff      	b.n	10d60 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xb2>
   10d60:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   10d64:	07c1      	lsls	r1, r0, #31
   10d66:	2900      	cmp	r1, #0
   10d68:	d001      	beq.n	10d6e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xc0>
   10d6a:	e7ff      	b.n	10d6c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xbe>
   10d6c:	e004      	b.n	10d78 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xca>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
   10d6e:	f003 f904 	bl	13f7a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   10d72:	9002      	str	r0, [sp, #8]
   10d74:	e009      	b.n	10d8a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xdc>
        self.write_pixels(colors) ? ;
   10d76:	defe      	udf	#254	; 0xfe
   10d78:	f002 f956 	bl	13028 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   10d7c:	e7ff      	b.n	10d7e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xd0>
   10d7e:	f004 fdb6 	bl	158ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   10d82:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
   10d86:	e7ff      	b.n	10d88 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xda>
   10d88:	e017      	b.n	10dba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x10c>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
   10d8a:	f24f 21bc 	movw	r1, #62140	; 0xf2bc
   10d8e:	f2c0 0101 	movt	r1, #1
   10d92:	f24f 3318 	movw	r3, #62232	; 0xf318
   10d96:	f2c0 0301 	movt	r3, #1
   10d9a:	220e      	movs	r2, #14
   10d9c:	9802      	ldr	r0, [sp, #8]
   10d9e:	f7fe f9e5 	bl	f16c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   10da2:	e7ff      	b.n	10da4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xf6>
   10da4:	2000      	movs	r0, #0
        Ok(())
   10da6:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    }
   10daa:	e7c7      	b.n	10d3c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>
   10dac:	2000      	movs	r0, #0
   10dae:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
   10db2:	9809      	ldr	r0, [sp, #36]	; 0x24
   10db4:	f000 ff1d 	bl	11bf2 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
   10db8:	e7c0      	b.n	10d3c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>
   10dba:	f89d 00ff 	ldrb.w	r0, [sp, #255]	; 0xff
   10dbe:	07c0      	lsls	r0, r0, #31
   10dc0:	2800      	cmp	r0, #0
   10dc2:	d1f3      	bne.n	10dac <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xfe>
   10dc4:	e7ba      	b.n	10d3c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>

00010dc6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>:
    fn write_data(&mut self, data: &[u8]) -> Result<(), ()> {
   10dc6:	b580      	push	{r7, lr}
   10dc8:	b084      	sub	sp, #16
   10dca:	9001      	str	r0, [sp, #4]
   10dcc:	9102      	str	r1, [sp, #8]
   10dce:	9203      	str	r2, [sp, #12]
        mynewt::spi::spi_noblock_write_data(
   10dd0:	4608      	mov	r0, r1
   10dd2:	4611      	mov	r1, r2
   10dd4:	f003 f87f 	bl	13ed6 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
   10dd8:	9000      	str	r0, [sp, #0]
   10dda:	e7ff      	b.n	10ddc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x16>
   10ddc:	f24f 3128 	movw	r1, #62248	; 0xf328
   10de0:	f2c0 0101 	movt	r1, #1
   10de4:	f24f 3338 	movw	r3, #62264	; 0xf338
   10de8:	f2c0 0301 	movt	r3, #1
   10dec:	220d      	movs	r2, #13
   10dee:	9800      	ldr	r0, [sp, #0]
   10df0:	f7fe f9bc 	bl	f16c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   10df4:	e7ff      	b.n	10df6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x30>
   10df6:	2000      	movs	r0, #0
    }
   10df8:	b004      	add	sp, #16
   10dfa:	bd80      	pop	{r7, pc}

00010dfc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>:
    fn write_word(&mut self, value: u16) -> Result<(), ()> {
   10dfc:	b580      	push	{r7, lr}
   10dfe:	b088      	sub	sp, #32
   10e00:	460a      	mov	r2, r1
   10e02:	9006      	str	r0, [sp, #24]
   10e04:	f8ad 101e 	strh.w	r1, [sp, #30]
        let bytes: [u8; 2] = unsafe { transmute(value.to_be()) };
   10e08:	9004      	str	r0, [sp, #16]
   10e0a:	4608      	mov	r0, r1
   10e0c:	9203      	str	r2, [sp, #12]
   10e0e:	f000 feb9 	bl	11b84 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>
   10e12:	9002      	str	r0, [sp, #8]
   10e14:	e7ff      	b.n	10e16 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x1a>
   10e16:	9802      	ldr	r0, [sp, #8]
   10e18:	f8ad 0016 	strh.w	r0, [sp, #22]
   10e1c:	e7ff      	b.n	10e1e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x22>
   10e1e:	f10d 0116 	add.w	r1, sp, #22
   10e22:	2202      	movs	r2, #2
        self.write_data(&bytes)
   10e24:	9804      	ldr	r0, [sp, #16]
   10e26:	f7ff ffce 	bl	10dc6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>
   10e2a:	9001      	str	r0, [sp, #4]
   10e2c:	e7ff      	b.n	10e2e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x32>
    }
   10e2e:	9801      	ldr	r0, [sp, #4]
   10e30:	f000 0001 	and.w	r0, r0, #1
   10e34:	b008      	add	sp, #32
   10e36:	bd80      	pop	{r7, pc}

00010e38 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE>:
    pub fn write_pixels<P: IntoIterator<Item = u16>>(&mut self, colors: P) -> Result <(), ()> {
   10e38:	b580      	push	{r7, lr}
   10e3a:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
   10e3e:	90a8      	str	r0, [sp, #672]	; 0x2a0
   10e40:	2200      	movs	r2, #0
        self.write_command(Instruction::RAMWR, None)?;
   10e42:	f88d 229f 	strb.w	r2, [sp, #671]	; 0x29f
   10e46:	2301      	movs	r3, #1
   10e48:	f88d 329f 	strb.w	r3, [sp, #671]	; 0x29f
   10e4c:	232c      	movs	r3, #44	; 0x2c
   10e4e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
   10e52:	920a      	str	r2, [sp, #40]	; 0x28
   10e54:	9209      	str	r2, [sp, #36]	; 0x24
   10e56:	9209      	str	r2, [sp, #36]	; 0x24
   10e58:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10e5c:	f89d c023 	ldrb.w	ip, [sp, #35]	; 0x23
   10e60:	9007      	str	r0, [sp, #28]
   10e62:	9106      	str	r1, [sp, #24]
   10e64:	4661      	mov	r1, ip
   10e66:	f000 f898 	bl	10f9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   10e6a:	9005      	str	r0, [sp, #20]
   10e6c:	e7ff      	b.n	10e6e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x36>
   10e6e:	9805      	ldr	r0, [sp, #20]
   10e70:	f000 0001 	and.w	r0, r0, #1
   10e74:	f7fe f9b3 	bl	f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   10e78:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   10e7c:	e7ff      	b.n	10e7e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x46>
   10e7e:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   10e82:	07c1      	lsls	r1, r0, #31
   10e84:	2900      	cmp	r1, #0
   10e86:	d001      	beq.n	10e8c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x54>
   10e88:	e7ff      	b.n	10e8a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x52>
   10e8a:	e00e      	b.n	10eaa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x72>
   10e8c:	2000      	movs	r0, #0
        for color in colors {
   10e8e:	f88d 029f 	strb.w	r0, [sp, #671]	; 0x29f
   10e92:	a83f      	add	r0, sp, #252	; 0xfc
   10e94:	22cc      	movs	r2, #204	; 0xcc
   10e96:	9004      	str	r0, [sp, #16]
   10e98:	9906      	ldr	r1, [sp, #24]
   10e9a:	f00c f955 	bl	1d148 <__aeabi_memcpy>
   10e9e:	a80b      	add	r0, sp, #44	; 0x2c
   10ea0:	9904      	ldr	r1, [sp, #16]
   10ea2:	f004 f858 	bl	14f56 <_ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE>
   10ea6:	e00e      	b.n	10ec6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x8e>
        self.write_command(Instruction::RAMWR, None)?;
   10ea8:	defe      	udf	#254	; 0xfe
   10eaa:	f002 f8bd 	bl	13028 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   10eae:	e004      	b.n	10eba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x82>
    }
   10eb0:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
   10eb4:	f50d 7d2e 	add.w	sp, sp, #696	; 0x2b8
   10eb8:	bd80      	pop	{r7, pc}
        self.write_command(Instruction::RAMWR, None)?;
   10eba:	f004 fd18 	bl	158ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   10ebe:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
   10ec2:	e7ff      	b.n	10ec4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x8c>
   10ec4:	e063      	b.n	10f8e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x156>
   10ec6:	a872      	add	r0, sp, #456	; 0x1c8
   10ec8:	a90b      	add	r1, sp, #44	; 0x2c
   10eca:	22d0      	movs	r2, #208	; 0xd0
        for color in colors {
   10ecc:	f00c f93c 	bl	1d148 <__aeabi_memcpy>
   10ed0:	e7ff      	b.n	10ed2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x9a>
   10ed2:	a872      	add	r0, sp, #456	; 0x1c8
   10ed4:	f004 f855 	bl	14f82 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E>
   10ed8:	f8ad 129a 	strh.w	r1, [sp, #666]	; 0x29a
   10edc:	f8ad 0298 	strh.w	r0, [sp, #664]	; 0x298
   10ee0:	e7ff      	b.n	10ee2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xaa>
   10ee2:	f8bd 0298 	ldrh.w	r0, [sp, #664]	; 0x298
   10ee6:	4601      	mov	r1, r0
   10ee8:	2800      	cmp	r0, #0
   10eea:	d001      	beq.n	10ef0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xb8>
   10eec:	e7ff      	b.n	10eee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xb6>
   10eee:	e004      	b.n	10efa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xc2>
   10ef0:	a872      	add	r0, sp, #456	; 0x1c8
        }
   10ef2:	f000 fe9d 	bl	11c30 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>
   10ef6:	e02e      	b.n	10f56 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x11e>
        for color in colors {
   10ef8:	defe      	udf	#254	; 0xfe
   10efa:	f8bd 029a 	ldrh.w	r0, [sp, #666]	; 0x29a
   10efe:	f8ad 02b2 	strh.w	r0, [sp, #690]	; 0x2b2
   10f02:	f8ad 02b4 	strh.w	r0, [sp, #692]	; 0x2b4
   10f06:	f8ad 02b6 	strh.w	r0, [sp, #694]	; 0x2b6
            self.write_word(color)?;
   10f0a:	9907      	ldr	r1, [sp, #28]
   10f0c:	9003      	str	r0, [sp, #12]
   10f0e:	4608      	mov	r0, r1
   10f10:	9903      	ldr	r1, [sp, #12]
   10f12:	f7ff ff73 	bl	10dfc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
   10f16:	9002      	str	r0, [sp, #8]
   10f18:	e7ff      	b.n	10f1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xe2>
   10f1a:	9802      	ldr	r0, [sp, #8]
   10f1c:	f000 0001 	and.w	r0, r0, #1
   10f20:	f7fe f95d 	bl	f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   10f24:	f88d 029e 	strb.w	r0, [sp, #670]	; 0x29e
   10f28:	e7ff      	b.n	10f2a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xf2>
   10f2a:	f89d 029e 	ldrb.w	r0, [sp, #670]	; 0x29e
   10f2e:	07c1      	lsls	r1, r0, #31
   10f30:	2900      	cmp	r1, #0
   10f32:	d001      	beq.n	10f38 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x100>
   10f34:	e7ff      	b.n	10f36 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xfe>
   10f36:	e001      	b.n	10f3c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x104>
        for color in colors {
   10f38:	e7cb      	b.n	10ed2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x9a>
            self.write_word(color)?;
   10f3a:	defe      	udf	#254	; 0xfe
   10f3c:	f002 f874 	bl	13028 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   10f40:	e7ff      	b.n	10f42 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x10a>
   10f42:	f004 fcd4 	bl	158ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   10f46:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
   10f4a:	e7ff      	b.n	10f4c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x114>
   10f4c:	a872      	add	r0, sp, #456	; 0x1c8
        }
   10f4e:	f000 fe6f 	bl	11c30 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>
   10f52:	e7ff      	b.n	10f54 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x11c>
    }
   10f54:	e01b      	b.n	10f8e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x156>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
   10f56:	f003 f810 	bl	13f7a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   10f5a:	9001      	str	r0, [sp, #4]
   10f5c:	e7ff      	b.n	10f5e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x126>
   10f5e:	f24f 21bc 	movw	r1, #62140	; 0xf2bc
   10f62:	f2c0 0101 	movt	r1, #1
   10f66:	f24f 3348 	movw	r3, #62280	; 0xf348
   10f6a:	f2c0 0301 	movt	r3, #1
   10f6e:	220e      	movs	r2, #14
   10f70:	9801      	ldr	r0, [sp, #4]
   10f72:	f7fe f8fb 	bl	f16c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   10f76:	e7ff      	b.n	10f78 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x140>
   10f78:	2000      	movs	r0, #0
        Ok(())
   10f7a:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    }
   10f7e:	e797      	b.n	10eb0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>
   10f80:	2000      	movs	r0, #0
   10f82:	f88d 029f 	strb.w	r0, [sp, #671]	; 0x29f
   10f86:	9806      	ldr	r0, [sp, #24]
   10f88:	f000 fe33 	bl	11bf2 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
   10f8c:	e790      	b.n	10eb0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>
   10f8e:	f89d 029f 	ldrb.w	r0, [sp, #671]	; 0x29f
   10f92:	07c0      	lsls	r0, r0, #31
   10f94:	2800      	cmp	r0, #0
   10f96:	d1f3      	bne.n	10f80 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x148>
   10f98:	e78a      	b.n	10eb0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>

00010f9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>:
    fn write_command(&mut self, command: Instruction, params: Option<&[u8]>) -> Result<(), ()> {
   10f9a:	b580      	push	{r7, lr}
   10f9c:	b08e      	sub	sp, #56	; 0x38
   10f9e:	468c      	mov	ip, r1
   10fa0:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
   10fa4:	920b      	str	r2, [sp, #44]	; 0x2c
   10fa6:	930c      	str	r3, [sp, #48]	; 0x30
   10fa8:	900d      	str	r0, [sp, #52]	; 0x34
   10faa:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
            command.to_u8().unwrap()
   10fae:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   10fb2:	f000 fdbd 	bl	11b30 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>
   10fb6:	9008      	str	r0, [sp, #32]
   10fb8:	9107      	str	r1, [sp, #28]
   10fba:	e7ff      	b.n	10fbc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x22>
   10fbc:	9808      	ldr	r0, [sp, #32]
   10fbe:	f000 0001 	and.w	r0, r0, #1
   10fc2:	f24f 3258 	movw	r2, #62296	; 0xf358
   10fc6:	f2c0 0201 	movt	r2, #1
   10fca:	9907      	ldr	r1, [sp, #28]
   10fcc:	f003 fe12 	bl	14bf4 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
   10fd0:	9006      	str	r0, [sp, #24]
   10fd2:	e7ff      	b.n	10fd4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x3a>
        mynewt::spi::spi_noblock_write_command(
   10fd4:	9806      	ldr	r0, [sp, #24]
   10fd6:	f002 ff36 	bl	13e46 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>
   10fda:	9005      	str	r0, [sp, #20]
   10fdc:	e7ff      	b.n	10fde <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x44>
   10fde:	f24f 3168 	movw	r1, #62312	; 0xf368
   10fe2:	f2c0 0101 	movt	r1, #1
   10fe6:	f24f 3374 	movw	r3, #62324	; 0xf374
   10fea:	f2c0 0301 	movt	r3, #1
   10fee:	220c      	movs	r2, #12
   10ff0:	9805      	ldr	r0, [sp, #20]
   10ff2:	f7fe f8bb 	bl	f16c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   10ff6:	e7ff      	b.n	10ff8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x5e>
   10ff8:	a80b      	add	r0, sp, #44	; 0x2c
        if params.is_some() {
   10ffa:	f003 fe56 	bl	14caa <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>
   10ffe:	9004      	str	r0, [sp, #16]
   11000:	e7ff      	b.n	11002 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x68>
   11002:	9804      	ldr	r0, [sp, #16]
   11004:	07c1      	lsls	r1, r0, #31
   11006:	2900      	cmp	r1, #0
   11008:	d01f      	beq.n	1104a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
   1100a:	e7ff      	b.n	1100c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x72>
                params.unwrap()
   1100c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1100e:	990c      	ldr	r1, [sp, #48]	; 0x30
   11010:	f24f 3284 	movw	r2, #62340	; 0xf384
   11014:	f2c0 0201 	movt	r2, #1
   11018:	f003 fe15 	bl	14c46 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>
   1101c:	9003      	str	r0, [sp, #12]
   1101e:	9102      	str	r1, [sp, #8]
   11020:	e7ff      	b.n	11022 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x88>
            mynewt::spi::spi_noblock_write_data(
   11022:	9803      	ldr	r0, [sp, #12]
   11024:	9902      	ldr	r1, [sp, #8]
   11026:	f002 ff56 	bl	13ed6 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
   1102a:	9001      	str	r0, [sp, #4]
   1102c:	e7ff      	b.n	1102e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x94>
   1102e:	f24f 3128 	movw	r1, #62248	; 0xf328
   11032:	f2c0 0101 	movt	r1, #1
   11036:	f24f 3394 	movw	r3, #62356	; 0xf394
   1103a:	f2c0 0301 	movt	r3, #1
   1103e:	220d      	movs	r2, #13
   11040:	9801      	ldr	r0, [sp, #4]
   11042:	f7fe f893 	bl	f16c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   11046:	e7ff      	b.n	11048 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xae>
        if params.is_some() {
   11048:	e7ff      	b.n	1104a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
   1104a:	2000      	movs	r0, #0
    }
   1104c:	b00e      	add	sp, #56	; 0x38
   1104e:	bd80      	pop	{r7, pc}

00011050 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>:
    pub fn set_orientation(&mut self, orientation: &Orientation) -> Result<(), ()> {
   11050:	b580      	push	{r7, lr}
   11052:	b098      	sub	sp, #96	; 0x60
   11054:	9012      	str	r0, [sp, #72]	; 0x48
   11056:	9113      	str	r1, [sp, #76]	; 0x4c
        if self.rgb {
   11058:	7d02      	ldrb	r2, [r0, #20]
   1105a:	07d2      	lsls	r2, r2, #31
   1105c:	2a00      	cmp	r2, #0
   1105e:	910a      	str	r1, [sp, #40]	; 0x28
   11060:	9009      	str	r0, [sp, #36]	; 0x24
   11062:	d109      	bne.n	11078 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x28>
   11064:	e7ff      	b.n	11066 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x16>
   11066:	2036      	movs	r0, #54	; 0x36
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
   11068:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
   1106c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1106e:	f7ff fd96 	bl	10b9e <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
   11072:	9008      	str	r0, [sp, #32]
   11074:	9107      	str	r1, [sp, #28]
   11076:	e044      	b.n	11102 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb2>
   11078:	2036      	movs	r0, #54	; 0x36
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap()]
   1107a:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   1107e:	980a      	ldr	r0, [sp, #40]	; 0x28
   11080:	f7ff fd8d 	bl	10b9e <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
   11084:	9006      	str	r0, [sp, #24]
   11086:	9105      	str	r1, [sp, #20]
   11088:	e7ff      	b.n	1108a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x3a>
   1108a:	9806      	ldr	r0, [sp, #24]
   1108c:	f000 0001 	and.w	r0, r0, #1
   11090:	f24f 32a4 	movw	r2, #62372	; 0xf3a4
   11094:	f2c0 0201 	movt	r2, #1
   11098:	9905      	ldr	r1, [sp, #20]
   1109a:	f003 fdab 	bl	14bf4 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
   1109e:	9004      	str	r0, [sp, #16]
   110a0:	e7ff      	b.n	110a2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x52>
   110a2:	9804      	ldr	r0, [sp, #16]
   110a4:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
   110a8:	f10d 0139 	add.w	r1, sp, #57	; 0x39
   110ac:	910c      	str	r1, [sp, #48]	; 0x30
   110ae:	2101      	movs	r1, #1
   110b0:	910d      	str	r1, [sp, #52]	; 0x34
            self.write_command(
   110b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   110b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   110b6:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
   110ba:	9809      	ldr	r0, [sp, #36]	; 0x24
   110bc:	f7ff ff6d 	bl	10f9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   110c0:	9003      	str	r0, [sp, #12]
   110c2:	e7ff      	b.n	110c4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x74>
   110c4:	9803      	ldr	r0, [sp, #12]
   110c6:	f000 0001 	and.w	r0, r0, #1
   110ca:	f7fe f888 	bl	f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   110ce:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
   110d2:	e7ff      	b.n	110d4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x84>
            ))?;
   110d4:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   110d8:	07c1      	lsls	r1, r0, #31
   110da:	2900      	cmp	r1, #0
   110dc:	d001      	beq.n	110e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x92>
   110de:	e7ff      	b.n	110e0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x90>
   110e0:	e001      	b.n	110e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x96>
        if self.rgb {
   110e2:	e047      	b.n	11174 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
   110e4:	defe      	udf	#254	; 0xfe
            ))?;
   110e6:	f001 ff9f 	bl	13028 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   110ea:	e003      	b.n	110f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xa4>
    }
   110ec:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
   110f0:	b018      	add	sp, #96	; 0x60
   110f2:	bd80      	pop	{r7, pc}
            ))?;
   110f4:	f004 fbfb 	bl	158ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   110f8:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
   110fc:	e7ff      	b.n	110fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xae>
   110fe:	e7ff      	b.n	11100 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
   11100:	e7f4      	b.n	110ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
   11102:	9808      	ldr	r0, [sp, #32]
   11104:	f000 0001 	and.w	r0, r0, #1
   11108:	f24f 32b4 	movw	r2, #62388	; 0xf3b4
   1110c:	f2c0 0201 	movt	r2, #1
   11110:	9907      	ldr	r1, [sp, #28]
   11112:	f003 fd6f 	bl	14bf4 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
   11116:	9002      	str	r0, [sp, #8]
   11118:	e7ff      	b.n	1111a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xca>
   1111a:	9802      	ldr	r0, [sp, #8]
   1111c:	f040 0108 	orr.w	r1, r0, #8
   11120:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   11124:	f10d 0147 	add.w	r1, sp, #71	; 0x47
   11128:	910f      	str	r1, [sp, #60]	; 0x3c
   1112a:	2101      	movs	r1, #1
   1112c:	9110      	str	r1, [sp, #64]	; 0x40
            self.write_command(
   1112e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   11130:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11132:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
   11136:	9809      	ldr	r0, [sp, #36]	; 0x24
   11138:	f7ff ff2f 	bl	10f9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   1113c:	9001      	str	r0, [sp, #4]
   1113e:	e7ff      	b.n	11140 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xf0>
   11140:	9801      	ldr	r0, [sp, #4]
   11142:	f000 0001 	and.w	r0, r0, #1
   11146:	f7fe f84a 	bl	f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1114a:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
   1114e:	e7ff      	b.n	11150 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x100>
            ))?;
   11150:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
   11154:	07c1      	lsls	r1, r0, #31
   11156:	2900      	cmp	r1, #0
   11158:	d001      	beq.n	1115e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10e>
   1115a:	e7ff      	b.n	1115c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10c>
   1115c:	e001      	b.n	11162 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x112>
        if self.rgb {
   1115e:	e009      	b.n	11174 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
   11160:	defe      	udf	#254	; 0xfe
            ))?;
   11162:	f001 ff61 	bl	13028 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11166:	e7ff      	b.n	11168 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x118>
   11168:	f004 fbc1 	bl	158ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   1116c:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
   11170:	e7ff      	b.n	11172 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x122>
   11172:	e7c5      	b.n	11100 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
   11174:	2000      	movs	r0, #0
        Ok(())
   11176:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    }
   1117a:	e7b7      	b.n	110ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>

0001117c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>:
    fn set_address_window(&mut self, sx: u16, sy: u16, ex: u16, ey: u16) -> Result<(), ()> {
   1117c:	b5b0      	push	{r4, r5, r7, lr}
   1117e:	b0a2      	sub	sp, #136	; 0x88
   11180:	f8dd c098 	ldr.w	ip, [sp, #152]	; 0x98
   11184:	469e      	mov	lr, r3
   11186:	4614      	mov	r4, r2
   11188:	460d      	mov	r5, r1
   1118a:	9015      	str	r0, [sp, #84]	; 0x54
   1118c:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
   11190:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
   11194:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
   11198:	f8ad c05e 	strh.w	ip, [sp, #94]	; 0x5e
   1119c:	212a      	movs	r1, #42	; 0x2a
        self.write_command(Instruction::CASET, None)?;
   1119e:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
   111a2:	2100      	movs	r1, #0
   111a4:	9110      	str	r1, [sp, #64]	; 0x40
   111a6:	910f      	str	r1, [sp, #60]	; 0x3c
   111a8:	910f      	str	r1, [sp, #60]	; 0x3c
   111aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   111ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
   111ae:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
   111b2:	900d      	str	r0, [sp, #52]	; 0x34
   111b4:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
   111b8:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
   111bc:	940a      	str	r4, [sp, #40]	; 0x28
   111be:	9509      	str	r5, [sp, #36]	; 0x24
   111c0:	f7ff feeb 	bl	10f9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   111c4:	9008      	str	r0, [sp, #32]
   111c6:	e7ff      	b.n	111c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x4c>
   111c8:	9808      	ldr	r0, [sp, #32]
   111ca:	f000 0001 	and.w	r0, r0, #1
   111ce:	f7fe f806 	bl	f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   111d2:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
   111d6:	e7ff      	b.n	111d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x5c>
   111d8:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
   111dc:	07c1      	lsls	r1, r0, #31
   111de:	2900      	cmp	r1, #0
   111e0:	d001      	beq.n	111e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x6a>
   111e2:	e7ff      	b.n	111e4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x68>
   111e4:	e00d      	b.n	11202 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x86>
        self.write_word(sx + self.dx)?;
   111e6:	980d      	ldr	r0, [sp, #52]	; 0x34
   111e8:	8a01      	ldrh	r1, [r0, #16]
   111ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
   111ec:	fa11 f182 	uxtah	r1, r1, r2
   111f0:	b28b      	uxth	r3, r1
   111f2:	468c      	mov	ip, r1
   111f4:	428b      	cmp	r3, r1
   111f6:	f8cd c01c 	str.w	ip, [sp, #28]
   111fa:	f040 80c2 	bne.w	11382 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x206>
   111fe:	e00d      	b.n	1121c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xa0>
        self.write_command(Instruction::CASET, None)?;
   11200:	defe      	udf	#254	; 0xfe
   11202:	f001 ff11 	bl	13028 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11206:	e003      	b.n	11210 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x94>
    }
   11208:	f89d 0039 	ldrb.w	r0, [sp, #57]	; 0x39
   1120c:	b022      	add	sp, #136	; 0x88
   1120e:	bdb0      	pop	{r4, r5, r7, pc}
        self.write_command(Instruction::CASET, None)?;
   11210:	f004 fb6d 	bl	158ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11214:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
   11218:	e7ff      	b.n	1121a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x9e>
   1121a:	e7f5      	b.n	11208 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
   1121c:	980d      	ldr	r0, [sp, #52]	; 0x34
   1121e:	9907      	ldr	r1, [sp, #28]
   11220:	f7ff fdec 	bl	10dfc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
   11224:	9006      	str	r0, [sp, #24]
   11226:	e7ff      	b.n	11228 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xac>
   11228:	9806      	ldr	r0, [sp, #24]
   1122a:	f000 0001 	and.w	r0, r0, #1
   1122e:	f7fd ffd6 	bl	f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11232:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
   11236:	e7ff      	b.n	11238 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xbc>
   11238:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   1123c:	07c1      	lsls	r1, r0, #31
   1123e:	2900      	cmp	r1, #0
   11240:	d001      	beq.n	11246 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xca>
   11242:	e7ff      	b.n	11244 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xc8>
   11244:	e00d      	b.n	11262 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xe6>
        self.write_word(ex + self.dx)?;
   11246:	980d      	ldr	r0, [sp, #52]	; 0x34
   11248:	8a01      	ldrh	r1, [r0, #16]
   1124a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1124c:	fa11 f182 	uxtah	r1, r1, r2
   11250:	b28b      	uxth	r3, r1
   11252:	468c      	mov	ip, r1
   11254:	428b      	cmp	r3, r1
   11256:	f8cd c014 	str.w	ip, [sp, #20]
   1125a:	f040 809e 	bne.w	1139a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x21e>
   1125e:	e009      	b.n	11274 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf8>
        self.write_word(sx + self.dx)?;
   11260:	defe      	udf	#254	; 0xfe
   11262:	f001 fee1 	bl	13028 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11266:	e7ff      	b.n	11268 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xec>
   11268:	f004 fb41 	bl	158ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   1126c:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
   11270:	e7ff      	b.n	11272 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf6>
   11272:	e7c9      	b.n	11208 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ex + self.dx)?;
   11274:	980d      	ldr	r0, [sp, #52]	; 0x34
   11276:	9905      	ldr	r1, [sp, #20]
   11278:	f7ff fdc0 	bl	10dfc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
   1127c:	9004      	str	r0, [sp, #16]
   1127e:	e7ff      	b.n	11280 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x104>
   11280:	9804      	ldr	r0, [sp, #16]
   11282:	f000 0001 	and.w	r0, r0, #1
   11286:	f7fd ffaa 	bl	f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1128a:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
   1128e:	e7ff      	b.n	11290 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x114>
   11290:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
   11294:	07c1      	lsls	r1, r0, #31
   11296:	2900      	cmp	r1, #0
   11298:	d001      	beq.n	1129e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x122>
   1129a:	e7ff      	b.n	1129c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x120>
   1129c:	e010      	b.n	112c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x144>
   1129e:	202b      	movs	r0, #43	; 0x2b
        self.write_command(Instruction::RASET, None)?;
   112a0:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   112a4:	2000      	movs	r0, #0
   112a6:	9013      	str	r0, [sp, #76]	; 0x4c
   112a8:	9012      	str	r0, [sp, #72]	; 0x48
   112aa:	9012      	str	r0, [sp, #72]	; 0x48
   112ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
   112ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   112b0:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
   112b4:	980d      	ldr	r0, [sp, #52]	; 0x34
   112b6:	f7ff fe70 	bl	10f9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   112ba:	9003      	str	r0, [sp, #12]
   112bc:	e009      	b.n	112d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x156>
        self.write_word(ex + self.dx)?;
   112be:	defe      	udf	#254	; 0xfe
   112c0:	f001 feb2 	bl	13028 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   112c4:	e7ff      	b.n	112c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x14a>
   112c6:	f004 fb12 	bl	158ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   112ca:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
   112ce:	e7ff      	b.n	112d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x154>
   112d0:	e79a      	b.n	11208 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_command(Instruction::RASET, None)?;
   112d2:	9803      	ldr	r0, [sp, #12]
   112d4:	f000 0001 	and.w	r0, r0, #1
   112d8:	f7fd ff81 	bl	f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   112dc:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
   112e0:	e7ff      	b.n	112e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x166>
   112e2:	f89d 0046 	ldrb.w	r0, [sp, #70]	; 0x46
   112e6:	07c1      	lsls	r1, r0, #31
   112e8:	2900      	cmp	r1, #0
   112ea:	d001      	beq.n	112f0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x174>
   112ec:	e7ff      	b.n	112ee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x172>
   112ee:	e00c      	b.n	1130a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x18e>
        self.write_word(sy + self.dy)?;
   112f0:	980d      	ldr	r0, [sp, #52]	; 0x34
   112f2:	8a41      	ldrh	r1, [r0, #18]
   112f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   112f6:	fa11 f182 	uxtah	r1, r1, r2
   112fa:	b28b      	uxth	r3, r1
   112fc:	468c      	mov	ip, r1
   112fe:	428b      	cmp	r3, r1
   11300:	f8cd c008 	str.w	ip, [sp, #8]
   11304:	d155      	bne.n	113b2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x236>
   11306:	e009      	b.n	1131c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1a0>
        self.write_command(Instruction::RASET, None)?;
   11308:	defe      	udf	#254	; 0xfe
   1130a:	f001 fe8d 	bl	13028 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   1130e:	e7ff      	b.n	11310 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x194>
   11310:	f004 faed 	bl	158ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11314:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
   11318:	e7ff      	b.n	1131a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x19e>
   1131a:	e775      	b.n	11208 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sy + self.dy)?;
   1131c:	980d      	ldr	r0, [sp, #52]	; 0x34
   1131e:	9902      	ldr	r1, [sp, #8]
   11320:	f7ff fd6c 	bl	10dfc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
   11324:	9001      	str	r0, [sp, #4]
   11326:	e7ff      	b.n	11328 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ac>
   11328:	9801      	ldr	r0, [sp, #4]
   1132a:	f000 0001 	and.w	r0, r0, #1
   1132e:	f7fd ff56 	bl	f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11332:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
   11336:	e7ff      	b.n	11338 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1bc>
   11338:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
   1133c:	07c1      	lsls	r1, r0, #31
   1133e:	2900      	cmp	r1, #0
   11340:	d001      	beq.n	11346 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ca>
   11342:	e7ff      	b.n	11344 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1c8>
   11344:	e00c      	b.n	11360 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1e4>
        self.write_word(ey + self.dy)
   11346:	980d      	ldr	r0, [sp, #52]	; 0x34
   11348:	8a41      	ldrh	r1, [r0, #18]
   1134a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1134c:	fa11 f182 	uxtah	r1, r1, r2
   11350:	b28b      	uxth	r3, r1
   11352:	468c      	mov	ip, r1
   11354:	428b      	cmp	r3, r1
   11356:	f8cd c000 	str.w	ip, [sp]
   1135a:	d136      	bne.n	113ca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x24e>
   1135c:	e009      	b.n	11372 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f6>
        self.write_word(sy + self.dy)?;
   1135e:	defe      	udf	#254	; 0xfe
   11360:	f001 fe62 	bl	13028 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11364:	e7ff      	b.n	11366 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ea>
   11366:	f004 fac2 	bl	158ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   1136a:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
   1136e:	e7ff      	b.n	11370 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f4>
   11370:	e74a      	b.n	11208 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ey + self.dy)
   11372:	980d      	ldr	r0, [sp, #52]	; 0x34
   11374:	9900      	ldr	r1, [sp, #0]
   11376:	f7ff fd41 	bl	10dfc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
   1137a:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
   1137e:	e7ff      	b.n	11380 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x204>
    }
   11380:	e742      	b.n	11208 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
   11382:	f24f 30e0 	movw	r0, #62432	; 0xf3e0
   11386:	f2c0 0001 	movt	r0, #1
   1138a:	f24f 32c4 	movw	r2, #62404	; 0xf3c4
   1138e:	f2c0 0201 	movt	r2, #1
   11392:	211c      	movs	r1, #28
   11394:	f005 fb04 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11398:	defe      	udf	#254	; 0xfe
        self.write_word(ex + self.dx)?;
   1139a:	f24f 30e0 	movw	r0, #62432	; 0xf3e0
   1139e:	f2c0 0001 	movt	r0, #1
   113a2:	f24f 32fc 	movw	r2, #62460	; 0xf3fc
   113a6:	f2c0 0201 	movt	r2, #1
   113aa:	211c      	movs	r1, #28
   113ac:	f005 faf8 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   113b0:	defe      	udf	#254	; 0xfe
        self.write_word(sy + self.dy)?;
   113b2:	f24f 30e0 	movw	r0, #62432	; 0xf3e0
   113b6:	f2c0 0001 	movt	r0, #1
   113ba:	f24f 420c 	movw	r2, #62476	; 0xf40c
   113be:	f2c0 0201 	movt	r2, #1
   113c2:	211c      	movs	r1, #28
   113c4:	f005 faec 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   113c8:	defe      	udf	#254	; 0xfe
        self.write_word(ey + self.dy)
   113ca:	f24f 30e0 	movw	r0, #62432	; 0xf3e0
   113ce:	f2c0 0001 	movt	r0, #1
   113d2:	f24f 421c 	movw	r2, #62492	; 0xf41c
   113d6:	f2c0 0201 	movt	r2, #1
   113da:	211c      	movs	r1, #28
   113dc:	f005 fae0 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   113e0:	defe      	udf	#254	; 0xfe

000113e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>:
    pub fn new(
   113e2:	b5b0      	push	{r4, r5, r7, lr}
   113e4:	b08a      	sub	sp, #40	; 0x28
   113e6:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   113ea:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
   113ee:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   113f0:	9106      	str	r1, [sp, #24]
   113f2:	9207      	str	r2, [sp, #28]
   113f4:	9308      	str	r3, [sp, #32]
   113f6:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
   113fa:	f88d c027 	strb.w	ip, [sp, #39]	; 0x27
        let display = ST7735 {
   113fe:	9100      	str	r1, [sp, #0]
   11400:	9201      	str	r2, [sp, #4]
   11402:	9302      	str	r3, [sp, #8]
   11404:	9403      	str	r4, [sp, #12]
   11406:	f88d e014 	strb.w	lr, [sp, #20]
   1140a:	f88d c015 	strb.w	ip, [sp, #21]
   1140e:	2100      	movs	r1, #0
   11410:	f8ad 1010 	strh.w	r1, [sp, #16]
   11414:	f8ad 1012 	strh.w	r1, [sp, #18]
   11418:	4669      	mov	r1, sp
        display
   1141a:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   1141e:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    }
   11422:	b00a      	add	sp, #40	; 0x28
   11424:	bdb0      	pop	{r4, r5, r7, pc}

00011426 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>:
    pub fn init<DELAY>(&mut self, delay: &mut DELAY) -> Result<(), ()>
   11426:	b580      	push	{r7, lr}
   11428:	b0f6      	sub	sp, #472	; 0x1d8
   1142a:	904e      	str	r0, [sp, #312]	; 0x138
   1142c:	914f      	str	r1, [sp, #316]	; 0x13c
        mynewt::spi::spi_noblock_init()  //  Init the SPI queue
   1142e:	9117      	str	r1, [sp, #92]	; 0x5c
   11430:	9016      	str	r0, [sp, #88]	; 0x58
   11432:	f001 ffae 	bl	13392 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>
   11436:	9015      	str	r0, [sp, #84]	; 0x54
   11438:	e7ff      	b.n	1143a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x14>
   1143a:	f24f 412c 	movw	r1, #62508	; 0xf42c
   1143e:	f2c0 0101 	movt	r1, #1
   11442:	f24f 433c 	movw	r3, #62524	; 0xf43c
   11446:	f2c0 0301 	movt	r3, #1
   1144a:	220d      	movs	r2, #13
   1144c:	9815      	ldr	r0, [sp, #84]	; 0x54
   1144e:	f7fd fe8d 	bl	f16c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   11452:	e7ff      	b.n	11454 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2e>
        self.hard_reset()?;
   11454:	9816      	ldr	r0, [sp, #88]	; 0x58
   11456:	f7ff fbbd 	bl	10bd4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>
   1145a:	9014      	str	r0, [sp, #80]	; 0x50
   1145c:	e7ff      	b.n	1145e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38>
   1145e:	9814      	ldr	r0, [sp, #80]	; 0x50
   11460:	f000 0001 	and.w	r0, r0, #1
   11464:	f7fd febb 	bl	f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11468:	f88d 0061 	strb.w	r0, [sp, #97]	; 0x61
   1146c:	e7ff      	b.n	1146e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48>
   1146e:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
   11472:	07c1      	lsls	r1, r0, #31
   11474:	2900      	cmp	r1, #0
   11476:	d001      	beq.n	1147c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x56>
   11478:	e7ff      	b.n	1147a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54>
   1147a:	e010      	b.n	1149e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x78>
   1147c:	2001      	movs	r0, #1
        self.write_command(Instruction::SWRESET, None)?;
   1147e:	f88d 0063 	strb.w	r0, [sp, #99]	; 0x63
   11482:	2000      	movs	r0, #0
   11484:	901a      	str	r0, [sp, #104]	; 0x68
   11486:	9019      	str	r0, [sp, #100]	; 0x64
   11488:	9019      	str	r0, [sp, #100]	; 0x64
   1148a:	9a19      	ldr	r2, [sp, #100]	; 0x64
   1148c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1148e:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
   11492:	9816      	ldr	r0, [sp, #88]	; 0x58
   11494:	f7ff fd81 	bl	10f9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11498:	9013      	str	r0, [sp, #76]	; 0x4c
   1149a:	e00d      	b.n	114b8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x92>
        self.hard_reset()?;
   1149c:	defe      	udf	#254	; 0xfe
   1149e:	f001 fdc3 	bl	13028 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   114a2:	e003      	b.n	114ac <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x86>
    }
   114a4:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   114a8:	b076      	add	sp, #472	; 0x1d8
   114aa:	bd80      	pop	{r7, pc}
        self.hard_reset()?;
   114ac:	f004 fa1f 	bl	158ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   114b0:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   114b4:	e7ff      	b.n	114b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x90>
   114b6:	e7f5      	b.n	114a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::SWRESET, None)?;
   114b8:	9813      	ldr	r0, [sp, #76]	; 0x4c
   114ba:	f000 0001 	and.w	r0, r0, #1
   114be:	f7fd fe8e 	bl	f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   114c2:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
   114c6:	e7ff      	b.n	114c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xa2>
   114c8:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
   114cc:	07c1      	lsls	r1, r0, #31
   114ce:	2900      	cmp	r1, #0
   114d0:	d001      	beq.n	114d6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xb0>
   114d2:	e7ff      	b.n	114d4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xae>
   114d4:	e005      	b.n	114e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xbc>
   114d6:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
   114d8:	9817      	ldr	r0, [sp, #92]	; 0x5c
   114da:	f7fe fbb1 	bl	fc40 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
   114de:	e009      	b.n	114f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xce>
        self.write_command(Instruction::SWRESET, None)?;
   114e0:	defe      	udf	#254	; 0xfe
   114e2:	f001 fda1 	bl	13028 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   114e6:	e7ff      	b.n	114e8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xc2>
   114e8:	f004 fa01 	bl	158ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   114ec:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   114f0:	e7ff      	b.n	114f2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xcc>
   114f2:	e7d7      	b.n	114a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
   114f4:	2011      	movs	r0, #17
        self.write_command(Instruction::SLPOUT, None)?;
   114f6:	f88d 006f 	strb.w	r0, [sp, #111]	; 0x6f
   114fa:	2000      	movs	r0, #0
   114fc:	901d      	str	r0, [sp, #116]	; 0x74
   114fe:	901c      	str	r0, [sp, #112]	; 0x70
   11500:	901c      	str	r0, [sp, #112]	; 0x70
   11502:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   11504:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   11506:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
   1150a:	9816      	ldr	r0, [sp, #88]	; 0x58
   1150c:	f7ff fd45 	bl	10f9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11510:	9012      	str	r0, [sp, #72]	; 0x48
   11512:	e7ff      	b.n	11514 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xee>
   11514:	9812      	ldr	r0, [sp, #72]	; 0x48
   11516:	f000 0001 	and.w	r0, r0, #1
   1151a:	f7fd fe60 	bl	f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1151e:	f88d 006e 	strb.w	r0, [sp, #110]	; 0x6e
   11522:	e7ff      	b.n	11524 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xfe>
   11524:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
   11528:	07c1      	lsls	r1, r0, #31
   1152a:	2900      	cmp	r1, #0
   1152c:	d001      	beq.n	11532 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10c>
   1152e:	e7ff      	b.n	11530 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10a>
   11530:	e005      	b.n	1153e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x118>
   11532:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
   11534:	9817      	ldr	r0, [sp, #92]	; 0x5c
   11536:	f7fe fb83 	bl	fc40 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
   1153a:	e009      	b.n	11550 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x12a>
        self.write_command(Instruction::SLPOUT, None)?;
   1153c:	defe      	udf	#254	; 0xfe
   1153e:	f001 fd73 	bl	13028 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11542:	e7ff      	b.n	11544 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x11e>
   11544:	f004 f9d3 	bl	158ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11548:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   1154c:	e7ff      	b.n	1154e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x128>
   1154e:	e7a9      	b.n	114a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
   11550:	20b1      	movs	r0, #177	; 0xb1
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
   11552:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
   11556:	f24f 4050 	movw	r0, #62544	; 0xf450
   1155a:	f2c0 0001 	movt	r0, #1
   1155e:	6800      	ldr	r0, [r0, #0]
   11560:	901f      	str	r0, [sp, #124]	; 0x7c
   11562:	2003      	movs	r0, #3
   11564:	9020      	str	r0, [sp, #128]	; 0x80
   11566:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   11568:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1156a:	f89d 107b 	ldrb.w	r1, [sp, #123]	; 0x7b
   1156e:	9816      	ldr	r0, [sp, #88]	; 0x58
   11570:	f7ff fd13 	bl	10f9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11574:	9011      	str	r0, [sp, #68]	; 0x44
   11576:	e7ff      	b.n	11578 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x152>
   11578:	9811      	ldr	r0, [sp, #68]	; 0x44
   1157a:	f000 0001 	and.w	r0, r0, #1
   1157e:	f7fd fe2e 	bl	f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11582:	f88d 007a 	strb.w	r0, [sp, #122]	; 0x7a
   11586:	e7ff      	b.n	11588 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x162>
   11588:	f89d 007a 	ldrb.w	r0, [sp, #122]	; 0x7a
   1158c:	07c1      	lsls	r1, r0, #31
   1158e:	2900      	cmp	r1, #0
   11590:	d001      	beq.n	11596 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x170>
   11592:	e7ff      	b.n	11594 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x16e>
   11594:	e014      	b.n	115c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x19a>
   11596:	20b2      	movs	r0, #178	; 0xb2
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
   11598:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   1159c:	f24f 4050 	movw	r0, #62544	; 0xf450
   115a0:	f2c0 0001 	movt	r0, #1
   115a4:	6800      	ldr	r0, [r0, #0]
   115a6:	9022      	str	r0, [sp, #136]	; 0x88
   115a8:	2003      	movs	r0, #3
   115aa:	9023      	str	r0, [sp, #140]	; 0x8c
   115ac:	9a22      	ldr	r2, [sp, #136]	; 0x88
   115ae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   115b0:	f89d 1087 	ldrb.w	r1, [sp, #135]	; 0x87
   115b4:	9816      	ldr	r0, [sp, #88]	; 0x58
   115b6:	f7ff fcf0 	bl	10f9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   115ba:	9010      	str	r0, [sp, #64]	; 0x40
   115bc:	e009      	b.n	115d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ac>
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
   115be:	defe      	udf	#254	; 0xfe
   115c0:	f001 fd32 	bl	13028 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   115c4:	e7ff      	b.n	115c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1a0>
   115c6:	f004 f992 	bl	158ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   115ca:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   115ce:	e7ff      	b.n	115d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1aa>
   115d0:	e768      	b.n	114a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
   115d2:	9810      	ldr	r0, [sp, #64]	; 0x40
   115d4:	f000 0001 	and.w	r0, r0, #1
   115d8:	f7fd fe01 	bl	f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   115dc:	f88d 0086 	strb.w	r0, [sp, #134]	; 0x86
   115e0:	e7ff      	b.n	115e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1bc>
   115e2:	f89d 0086 	ldrb.w	r0, [sp, #134]	; 0x86
   115e6:	07c1      	lsls	r1, r0, #31
   115e8:	2900      	cmp	r1, #0
   115ea:	d001      	beq.n	115f0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ca>
   115ec:	e7ff      	b.n	115ee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1c8>
   115ee:	e014      	b.n	1161a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1f4>
   115f0:	20b3      	movs	r0, #179	; 0xb3
        self.write_command(Instruction::FRMCTR3,
   115f2:	f88d 0093 	strb.w	r0, [sp, #147]	; 0x93
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
   115f6:	f24f 405c 	movw	r0, #62556	; 0xf45c
   115fa:	f2c0 0001 	movt	r0, #1
   115fe:	6800      	ldr	r0, [r0, #0]
   11600:	9025      	str	r0, [sp, #148]	; 0x94
   11602:	2006      	movs	r0, #6
   11604:	9026      	str	r0, [sp, #152]	; 0x98
        self.write_command(Instruction::FRMCTR3,
   11606:	9a25      	ldr	r2, [sp, #148]	; 0x94
   11608:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1160a:	f89d 1093 	ldrb.w	r1, [sp, #147]	; 0x93
   1160e:	9816      	ldr	r0, [sp, #88]	; 0x58
   11610:	f7ff fcc3 	bl	10f9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11614:	900f      	str	r0, [sp, #60]	; 0x3c
   11616:	e009      	b.n	1162c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x206>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
   11618:	defe      	udf	#254	; 0xfe
   1161a:	f001 fd05 	bl	13028 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   1161e:	e7ff      	b.n	11620 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1fa>
   11620:	f004 f965 	bl	158ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11624:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11628:	e7ff      	b.n	1162a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x204>
   1162a:	e73b      	b.n	114a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR3,
   1162c:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1162e:	f000 0001 	and.w	r0, r0, #1
   11632:	f7fd fdd4 	bl	f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11636:	f88d 0092 	strb.w	r0, [sp, #146]	; 0x92
   1163a:	e7ff      	b.n	1163c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x216>
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
   1163c:	f89d 0092 	ldrb.w	r0, [sp, #146]	; 0x92
   11640:	07c1      	lsls	r1, r0, #31
   11642:	2900      	cmp	r1, #0
   11644:	d001      	beq.n	1164a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x224>
   11646:	e7ff      	b.n	11648 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x222>
   11648:	e014      	b.n	11674 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x24e>
   1164a:	20b4      	movs	r0, #180	; 0xb4
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
   1164c:	f88d 009f 	strb.w	r0, [sp, #159]	; 0x9f
   11650:	f24f 4064 	movw	r0, #62564	; 0xf464
   11654:	f2c0 0001 	movt	r0, #1
   11658:	6800      	ldr	r0, [r0, #0]
   1165a:	9028      	str	r0, [sp, #160]	; 0xa0
   1165c:	2001      	movs	r0, #1
   1165e:	9029      	str	r0, [sp, #164]	; 0xa4
   11660:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   11662:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   11664:	f89d 109f 	ldrb.w	r1, [sp, #159]	; 0x9f
   11668:	9816      	ldr	r0, [sp, #88]	; 0x58
   1166a:	f7ff fc96 	bl	10f9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   1166e:	900e      	str	r0, [sp, #56]	; 0x38
   11670:	e009      	b.n	11686 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x260>
        self.write_command(Instruction::FRMCTR3,
   11672:	defe      	udf	#254	; 0xfe
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
   11674:	f001 fcd8 	bl	13028 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11678:	e7ff      	b.n	1167a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x254>
   1167a:	f004 f938 	bl	158ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   1167e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11682:	e7ff      	b.n	11684 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x25e>
   11684:	e70e      	b.n	114a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
   11686:	980e      	ldr	r0, [sp, #56]	; 0x38
   11688:	f000 0001 	and.w	r0, r0, #1
   1168c:	f7fd fda7 	bl	f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11690:	f88d 009e 	strb.w	r0, [sp, #158]	; 0x9e
   11694:	e7ff      	b.n	11696 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x270>
   11696:	f89d 009e 	ldrb.w	r0, [sp, #158]	; 0x9e
   1169a:	07c1      	lsls	r1, r0, #31
   1169c:	2900      	cmp	r1, #0
   1169e:	d001      	beq.n	116a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27e>
   116a0:	e7ff      	b.n	116a2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27c>
   116a2:	e014      	b.n	116ce <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2a8>
   116a4:	20c0      	movs	r0, #192	; 0xc0
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
   116a6:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
   116aa:	f24f 406c 	movw	r0, #62572	; 0xf46c
   116ae:	f2c0 0001 	movt	r0, #1
   116b2:	6800      	ldr	r0, [r0, #0]
   116b4:	902b      	str	r0, [sp, #172]	; 0xac
   116b6:	2003      	movs	r0, #3
   116b8:	902c      	str	r0, [sp, #176]	; 0xb0
   116ba:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   116bc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   116be:	f89d 10ab 	ldrb.w	r1, [sp, #171]	; 0xab
   116c2:	9816      	ldr	r0, [sp, #88]	; 0x58
   116c4:	f7ff fc69 	bl	10f9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   116c8:	900d      	str	r0, [sp, #52]	; 0x34
   116ca:	e009      	b.n	116e0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ba>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
   116cc:	defe      	udf	#254	; 0xfe
   116ce:	f001 fcab 	bl	13028 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   116d2:	e7ff      	b.n	116d4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ae>
   116d4:	f004 f90b 	bl	158ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   116d8:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   116dc:	e7ff      	b.n	116de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2b8>
   116de:	e6e1      	b.n	114a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
   116e0:	980d      	ldr	r0, [sp, #52]	; 0x34
   116e2:	f000 0001 	and.w	r0, r0, #1
   116e6:	f7fd fd7a 	bl	f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   116ea:	f88d 00aa 	strb.w	r0, [sp, #170]	; 0xaa
   116ee:	e7ff      	b.n	116f0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ca>
   116f0:	f89d 00aa 	ldrb.w	r0, [sp, #170]	; 0xaa
   116f4:	07c1      	lsls	r1, r0, #31
   116f6:	2900      	cmp	r1, #0
   116f8:	d001      	beq.n	116fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d8>
   116fa:	e7ff      	b.n	116fc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d6>
   116fc:	e014      	b.n	11728 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x302>
   116fe:	20c1      	movs	r0, #193	; 0xc1
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
   11700:	f88d 00b7 	strb.w	r0, [sp, #183]	; 0xb7
   11704:	f24f 4074 	movw	r0, #62580	; 0xf474
   11708:	f2c0 0001 	movt	r0, #1
   1170c:	6800      	ldr	r0, [r0, #0]
   1170e:	902e      	str	r0, [sp, #184]	; 0xb8
   11710:	2001      	movs	r0, #1
   11712:	902f      	str	r0, [sp, #188]	; 0xbc
   11714:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
   11716:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   11718:	f89d 10b7 	ldrb.w	r1, [sp, #183]	; 0xb7
   1171c:	9816      	ldr	r0, [sp, #88]	; 0x58
   1171e:	f7ff fc3c 	bl	10f9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11722:	900c      	str	r0, [sp, #48]	; 0x30
   11724:	e009      	b.n	1173a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x314>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
   11726:	defe      	udf	#254	; 0xfe
   11728:	f001 fc7e 	bl	13028 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   1172c:	e7ff      	b.n	1172e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x308>
   1172e:	f004 f8de 	bl	158ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11732:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11736:	e7ff      	b.n	11738 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x312>
   11738:	e6b4      	b.n	114a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
   1173a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1173c:	f000 0001 	and.w	r0, r0, #1
   11740:	f7fd fd4d 	bl	f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11744:	f88d 00b6 	strb.w	r0, [sp, #182]	; 0xb6
   11748:	e7ff      	b.n	1174a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x324>
   1174a:	f89d 00b6 	ldrb.w	r0, [sp, #182]	; 0xb6
   1174e:	07c1      	lsls	r1, r0, #31
   11750:	2900      	cmp	r1, #0
   11752:	d001      	beq.n	11758 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x332>
   11754:	e7ff      	b.n	11756 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x330>
   11756:	e014      	b.n	11782 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x35c>
   11758:	20c2      	movs	r0, #194	; 0xc2
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
   1175a:	f88d 00c3 	strb.w	r0, [sp, #195]	; 0xc3
   1175e:	f24f 407c 	movw	r0, #62588	; 0xf47c
   11762:	f2c0 0001 	movt	r0, #1
   11766:	6800      	ldr	r0, [r0, #0]
   11768:	9031      	str	r0, [sp, #196]	; 0xc4
   1176a:	2002      	movs	r0, #2
   1176c:	9032      	str	r0, [sp, #200]	; 0xc8
   1176e:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   11770:	9b32      	ldr	r3, [sp, #200]	; 0xc8
   11772:	f89d 10c3 	ldrb.w	r1, [sp, #195]	; 0xc3
   11776:	9816      	ldr	r0, [sp, #88]	; 0x58
   11778:	f7ff fc0f 	bl	10f9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   1177c:	900b      	str	r0, [sp, #44]	; 0x2c
   1177e:	e009      	b.n	11794 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
   11780:	defe      	udf	#254	; 0xfe
   11782:	f001 fc51 	bl	13028 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11786:	e7ff      	b.n	11788 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x362>
   11788:	f004 f8b1 	bl	158ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   1178c:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11790:	e7ff      	b.n	11792 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36c>
   11792:	e687      	b.n	114a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
   11794:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11796:	f000 0001 	and.w	r0, r0, #1
   1179a:	f7fd fd20 	bl	f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1179e:	f88d 00c2 	strb.w	r0, [sp, #194]	; 0xc2
   117a2:	e7ff      	b.n	117a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x37e>
   117a4:	f89d 00c2 	ldrb.w	r0, [sp, #194]	; 0xc2
   117a8:	07c1      	lsls	r1, r0, #31
   117aa:	2900      	cmp	r1, #0
   117ac:	d001      	beq.n	117b2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38c>
   117ae:	e7ff      	b.n	117b0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38a>
   117b0:	e014      	b.n	117dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3b6>
   117b2:	20c3      	movs	r0, #195	; 0xc3
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
   117b4:	f88d 00cf 	strb.w	r0, [sp, #207]	; 0xcf
   117b8:	f24f 4084 	movw	r0, #62596	; 0xf484
   117bc:	f2c0 0001 	movt	r0, #1
   117c0:	6800      	ldr	r0, [r0, #0]
   117c2:	9034      	str	r0, [sp, #208]	; 0xd0
   117c4:	2002      	movs	r0, #2
   117c6:	9035      	str	r0, [sp, #212]	; 0xd4
   117c8:	9a34      	ldr	r2, [sp, #208]	; 0xd0
   117ca:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   117cc:	f89d 10cf 	ldrb.w	r1, [sp, #207]	; 0xcf
   117d0:	9816      	ldr	r0, [sp, #88]	; 0x58
   117d2:	f7ff fbe2 	bl	10f9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   117d6:	900a      	str	r0, [sp, #40]	; 0x28
   117d8:	e009      	b.n	117ee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c8>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
   117da:	defe      	udf	#254	; 0xfe
   117dc:	f001 fc24 	bl	13028 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   117e0:	e7ff      	b.n	117e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3bc>
   117e2:	f004 f884 	bl	158ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   117e6:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   117ea:	e7ff      	b.n	117ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c6>
   117ec:	e65a      	b.n	114a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
   117ee:	980a      	ldr	r0, [sp, #40]	; 0x28
   117f0:	f000 0001 	and.w	r0, r0, #1
   117f4:	f7fd fcf3 	bl	f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   117f8:	f88d 00ce 	strb.w	r0, [sp, #206]	; 0xce
   117fc:	e7ff      	b.n	117fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3d8>
   117fe:	f89d 00ce 	ldrb.w	r0, [sp, #206]	; 0xce
   11802:	07c1      	lsls	r1, r0, #31
   11804:	2900      	cmp	r1, #0
   11806:	d001      	beq.n	1180c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e6>
   11808:	e7ff      	b.n	1180a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e4>
   1180a:	e014      	b.n	11836 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x410>
   1180c:	20c4      	movs	r0, #196	; 0xc4
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
   1180e:	f88d 00db 	strb.w	r0, [sp, #219]	; 0xdb
   11812:	f24f 408c 	movw	r0, #62604	; 0xf48c
   11816:	f2c0 0001 	movt	r0, #1
   1181a:	6800      	ldr	r0, [r0, #0]
   1181c:	9037      	str	r0, [sp, #220]	; 0xdc
   1181e:	2002      	movs	r0, #2
   11820:	9038      	str	r0, [sp, #224]	; 0xe0
   11822:	9a37      	ldr	r2, [sp, #220]	; 0xdc
   11824:	9b38      	ldr	r3, [sp, #224]	; 0xe0
   11826:	f89d 10db 	ldrb.w	r1, [sp, #219]	; 0xdb
   1182a:	9816      	ldr	r0, [sp, #88]	; 0x58
   1182c:	f7ff fbb5 	bl	10f9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11830:	9009      	str	r0, [sp, #36]	; 0x24
   11832:	e009      	b.n	11848 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x422>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
   11834:	defe      	udf	#254	; 0xfe
   11836:	f001 fbf7 	bl	13028 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   1183a:	e7ff      	b.n	1183c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x416>
   1183c:	f004 f857 	bl	158ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11840:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11844:	e7ff      	b.n	11846 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x420>
   11846:	e62d      	b.n	114a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
   11848:	9809      	ldr	r0, [sp, #36]	; 0x24
   1184a:	f000 0001 	and.w	r0, r0, #1
   1184e:	f7fd fcc6 	bl	f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11852:	f88d 00da 	strb.w	r0, [sp, #218]	; 0xda
   11856:	e7ff      	b.n	11858 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x432>
   11858:	f89d 00da 	ldrb.w	r0, [sp, #218]	; 0xda
   1185c:	07c1      	lsls	r1, r0, #31
   1185e:	2900      	cmp	r1, #0
   11860:	d001      	beq.n	11866 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x440>
   11862:	e7ff      	b.n	11864 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x43e>
   11864:	e014      	b.n	11890 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x46a>
   11866:	20c5      	movs	r0, #197	; 0xc5
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
   11868:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
   1186c:	f24f 4094 	movw	r0, #62612	; 0xf494
   11870:	f2c0 0001 	movt	r0, #1
   11874:	6800      	ldr	r0, [r0, #0]
   11876:	903a      	str	r0, [sp, #232]	; 0xe8
   11878:	2001      	movs	r0, #1
   1187a:	903b      	str	r0, [sp, #236]	; 0xec
   1187c:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
   1187e:	9b3b      	ldr	r3, [sp, #236]	; 0xec
   11880:	f89d 10e7 	ldrb.w	r1, [sp, #231]	; 0xe7
   11884:	9816      	ldr	r0, [sp, #88]	; 0x58
   11886:	f7ff fb88 	bl	10f9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   1188a:	9008      	str	r0, [sp, #32]
   1188c:	e009      	b.n	118a2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47c>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
   1188e:	defe      	udf	#254	; 0xfe
   11890:	f001 fbca 	bl	13028 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11894:	e7ff      	b.n	11896 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x470>
   11896:	f004 f82a 	bl	158ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   1189a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   1189e:	e7ff      	b.n	118a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47a>
   118a0:	e600      	b.n	114a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
   118a2:	9808      	ldr	r0, [sp, #32]
   118a4:	f000 0001 	and.w	r0, r0, #1
   118a8:	f7fd fc99 	bl	f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   118ac:	f88d 00e6 	strb.w	r0, [sp, #230]	; 0xe6
   118b0:	e7ff      	b.n	118b2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48c>
   118b2:	f89d 00e6 	ldrb.w	r0, [sp, #230]	; 0xe6
   118b6:	07c1      	lsls	r1, r0, #31
   118b8:	2900      	cmp	r1, #0
   118ba:	d001      	beq.n	118c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x49a>
   118bc:	e7ff      	b.n	118be <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x498>
   118be:	e006      	b.n	118ce <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4a8>
        if self.inverted {
   118c0:	9816      	ldr	r0, [sp, #88]	; 0x58
   118c2:	7d41      	ldrb	r1, [r0, #21]
   118c4:	07c9      	lsls	r1, r1, #31
   118c6:	2900      	cmp	r1, #0
   118c8:	d11a      	bne.n	11900 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4da>
   118ca:	e009      	b.n	118e0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ba>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
   118cc:	defe      	udf	#254	; 0xfe
   118ce:	f001 fbab 	bl	13028 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   118d2:	e7ff      	b.n	118d4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ae>
   118d4:	f004 f80b 	bl	158ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   118d8:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   118dc:	e7ff      	b.n	118de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4b8>
   118de:	e5e1      	b.n	114a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
   118e0:	2020      	movs	r0, #32
            self.write_command(Instruction::INVOFF, None)?;
   118e2:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
   118e6:	2000      	movs	r0, #0
   118e8:	9041      	str	r0, [sp, #260]	; 0x104
   118ea:	9040      	str	r0, [sp, #256]	; 0x100
   118ec:	9040      	str	r0, [sp, #256]	; 0x100
   118ee:	9a40      	ldr	r2, [sp, #256]	; 0x100
   118f0:	9b41      	ldr	r3, [sp, #260]	; 0x104
   118f2:	f89d 10ff 	ldrb.w	r1, [sp, #255]	; 0xff
   118f6:	9816      	ldr	r0, [sp, #88]	; 0x58
   118f8:	f7ff fb4f 	bl	10f9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   118fc:	9007      	str	r0, [sp, #28]
   118fe:	e02a      	b.n	11956 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x530>
   11900:	2021      	movs	r0, #33	; 0x21
            self.write_command(Instruction::INVON, None)?;
   11902:	f88d 00f3 	strb.w	r0, [sp, #243]	; 0xf3
   11906:	2000      	movs	r0, #0
   11908:	903e      	str	r0, [sp, #248]	; 0xf8
   1190a:	903d      	str	r0, [sp, #244]	; 0xf4
   1190c:	903d      	str	r0, [sp, #244]	; 0xf4
   1190e:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
   11910:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
   11912:	f89d 10f3 	ldrb.w	r1, [sp, #243]	; 0xf3
   11916:	9816      	ldr	r0, [sp, #88]	; 0x58
   11918:	f7ff fb3f 	bl	10f9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   1191c:	9006      	str	r0, [sp, #24]
   1191e:	e7ff      	b.n	11920 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4fa>
   11920:	9806      	ldr	r0, [sp, #24]
   11922:	f000 0001 	and.w	r0, r0, #1
   11926:	f7fd fc5a 	bl	f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1192a:	f88d 00f2 	strb.w	r0, [sp, #242]	; 0xf2
   1192e:	e7ff      	b.n	11930 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x50a>
   11930:	f89d 00f2 	ldrb.w	r0, [sp, #242]	; 0xf2
   11934:	07c1      	lsls	r1, r0, #31
   11936:	2900      	cmp	r1, #0
   11938:	d001      	beq.n	1193e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x518>
   1193a:	e7ff      	b.n	1193c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x516>
   1193c:	e001      	b.n	11942 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x51c>
        if self.inverted {
   1193e:	e024      	b.n	1198a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVON, None)?;
   11940:	defe      	udf	#254	; 0xfe
   11942:	f001 fb71 	bl	13028 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11946:	e7ff      	b.n	11948 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x522>
   11948:	f003 ffd1 	bl	158ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   1194c:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11950:	e7ff      	b.n	11952 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52c>
   11952:	e7ff      	b.n	11954 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
   11954:	e5a6      	b.n	114a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::INVOFF, None)?;
   11956:	9807      	ldr	r0, [sp, #28]
   11958:	f000 0001 	and.w	r0, r0, #1
   1195c:	f7fd fc3f 	bl	f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11960:	f88d 00fe 	strb.w	r0, [sp, #254]	; 0xfe
   11964:	e7ff      	b.n	11966 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x540>
   11966:	f89d 00fe 	ldrb.w	r0, [sp, #254]	; 0xfe
   1196a:	07c1      	lsls	r1, r0, #31
   1196c:	2900      	cmp	r1, #0
   1196e:	d001      	beq.n	11974 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54e>
   11970:	e7ff      	b.n	11972 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54c>
   11972:	e001      	b.n	11978 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x552>
        if self.inverted {
   11974:	e009      	b.n	1198a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVOFF, None)?;
   11976:	defe      	udf	#254	; 0xfe
   11978:	f001 fb56 	bl	13028 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   1197c:	e7ff      	b.n	1197e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x558>
   1197e:	f003 ffb6 	bl	158ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11982:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11986:	e7ff      	b.n	11988 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x562>
   11988:	e7e4      	b.n	11954 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
        if self.rgb {
   1198a:	9816      	ldr	r0, [sp, #88]	; 0x58
   1198c:	7d01      	ldrb	r1, [r0, #20]
   1198e:	07c9      	lsls	r1, r1, #31
   11990:	2900      	cmp	r1, #0
   11992:	d114      	bne.n	119be <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x598>
   11994:	e7ff      	b.n	11996 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x570>
   11996:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
   11998:	f88d 0117 	strb.w	r0, [sp, #279]	; 0x117
   1199c:	f24f 40a4 	movw	r0, #62628	; 0xf4a4
   119a0:	f2c0 0001 	movt	r0, #1
   119a4:	6800      	ldr	r0, [r0, #0]
   119a6:	9046      	str	r0, [sp, #280]	; 0x118
   119a8:	2001      	movs	r0, #1
   119aa:	9047      	str	r0, [sp, #284]	; 0x11c
   119ac:	9a46      	ldr	r2, [sp, #280]	; 0x118
   119ae:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   119b0:	f89d 1117 	ldrb.w	r1, [sp, #279]	; 0x117
   119b4:	9816      	ldr	r0, [sp, #88]	; 0x58
   119b6:	f7ff faf0 	bl	10f9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   119ba:	9005      	str	r0, [sp, #20]
   119bc:	e02e      	b.n	11a1c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f6>
   119be:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
   119c0:	f88d 010b 	strb.w	r0, [sp, #267]	; 0x10b
   119c4:	f24f 409c 	movw	r0, #62620	; 0xf49c
   119c8:	f2c0 0001 	movt	r0, #1
   119cc:	6800      	ldr	r0, [r0, #0]
   119ce:	9043      	str	r0, [sp, #268]	; 0x10c
   119d0:	2001      	movs	r0, #1
   119d2:	9044      	str	r0, [sp, #272]	; 0x110
   119d4:	9a43      	ldr	r2, [sp, #268]	; 0x10c
   119d6:	9b44      	ldr	r3, [sp, #272]	; 0x110
   119d8:	f89d 110b 	ldrb.w	r1, [sp, #267]	; 0x10b
   119dc:	9816      	ldr	r0, [sp, #88]	; 0x58
   119de:	f7ff fadc 	bl	10f9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   119e2:	9004      	str	r0, [sp, #16]
   119e4:	e7ff      	b.n	119e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5c0>
   119e6:	9804      	ldr	r0, [sp, #16]
   119e8:	f000 0001 	and.w	r0, r0, #1
   119ec:	f7fd fbf7 	bl	f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   119f0:	f88d 010a 	strb.w	r0, [sp, #266]	; 0x10a
   119f4:	e7ff      	b.n	119f6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5d0>
   119f6:	f89d 010a 	ldrb.w	r0, [sp, #266]	; 0x10a
   119fa:	07c1      	lsls	r1, r0, #31
   119fc:	2900      	cmp	r1, #0
   119fe:	d001      	beq.n	11a04 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5de>
   11a00:	e7ff      	b.n	11a02 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5dc>
   11a02:	e001      	b.n	11a08 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e2>
        if self.rgb {
   11a04:	e024      	b.n	11a50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
   11a06:	defe      	udf	#254	; 0xfe
   11a08:	f001 fb0e 	bl	13028 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11a0c:	e7ff      	b.n	11a0e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e8>
   11a0e:	f003 ff6e 	bl	158ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11a12:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11a16:	e7ff      	b.n	11a18 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f2>
   11a18:	e7ff      	b.n	11a1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
   11a1a:	e543      	b.n	114a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
   11a1c:	9805      	ldr	r0, [sp, #20]
   11a1e:	f000 0001 	and.w	r0, r0, #1
   11a22:	f7fd fbdc 	bl	f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11a26:	f88d 0116 	strb.w	r0, [sp, #278]	; 0x116
   11a2a:	e7ff      	b.n	11a2c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x606>
   11a2c:	f89d 0116 	ldrb.w	r0, [sp, #278]	; 0x116
   11a30:	07c1      	lsls	r1, r0, #31
   11a32:	2900      	cmp	r1, #0
   11a34:	d001      	beq.n	11a3a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x614>
   11a36:	e7ff      	b.n	11a38 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x612>
   11a38:	e001      	b.n	11a3e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x618>
        if self.rgb {
   11a3a:	e009      	b.n	11a50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
   11a3c:	defe      	udf	#254	; 0xfe
   11a3e:	f001 faf3 	bl	13028 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11a42:	e7ff      	b.n	11a44 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x61e>
   11a44:	f003 ff53 	bl	158ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11a48:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11a4c:	e7ff      	b.n	11a4e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x628>
   11a4e:	e7e4      	b.n	11a1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
   11a50:	203a      	movs	r0, #58	; 0x3a
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
   11a52:	f88d 0123 	strb.w	r0, [sp, #291]	; 0x123
   11a56:	f24f 40ac 	movw	r0, #62636	; 0xf4ac
   11a5a:	f2c0 0001 	movt	r0, #1
   11a5e:	6800      	ldr	r0, [r0, #0]
   11a60:	9049      	str	r0, [sp, #292]	; 0x124
   11a62:	2001      	movs	r0, #1
   11a64:	904a      	str	r0, [sp, #296]	; 0x128
   11a66:	9a49      	ldr	r2, [sp, #292]	; 0x124
   11a68:	9b4a      	ldr	r3, [sp, #296]	; 0x128
   11a6a:	f89d 1123 	ldrb.w	r1, [sp, #291]	; 0x123
   11a6e:	9816      	ldr	r0, [sp, #88]	; 0x58
   11a70:	f7ff fa93 	bl	10f9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11a74:	9003      	str	r0, [sp, #12]
   11a76:	e7ff      	b.n	11a78 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x652>
   11a78:	9803      	ldr	r0, [sp, #12]
   11a7a:	f000 0001 	and.w	r0, r0, #1
   11a7e:	f7fd fbae 	bl	f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11a82:	f88d 0122 	strb.w	r0, [sp, #290]	; 0x122
   11a86:	e7ff      	b.n	11a88 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x662>
   11a88:	f89d 0122 	ldrb.w	r0, [sp, #290]	; 0x122
   11a8c:	07c1      	lsls	r1, r0, #31
   11a8e:	2900      	cmp	r1, #0
   11a90:	d001      	beq.n	11a96 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x670>
   11a92:	e7ff      	b.n	11a94 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x66e>
   11a94:	e010      	b.n	11ab8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x692>
   11a96:	2029      	movs	r0, #41	; 0x29
        self.write_command(Instruction::DISPON, None)?;
   11a98:	f88d 012f 	strb.w	r0, [sp, #303]	; 0x12f
   11a9c:	2000      	movs	r0, #0
   11a9e:	904d      	str	r0, [sp, #308]	; 0x134
   11aa0:	904c      	str	r0, [sp, #304]	; 0x130
   11aa2:	904c      	str	r0, [sp, #304]	; 0x130
   11aa4:	9a4c      	ldr	r2, [sp, #304]	; 0x130
   11aa6:	9b4d      	ldr	r3, [sp, #308]	; 0x134
   11aa8:	f89d 112f 	ldrb.w	r1, [sp, #303]	; 0x12f
   11aac:	9816      	ldr	r0, [sp, #88]	; 0x58
   11aae:	f7ff fa74 	bl	10f9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11ab2:	9002      	str	r0, [sp, #8]
   11ab4:	e009      	b.n	11aca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a4>
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
   11ab6:	defe      	udf	#254	; 0xfe
   11ab8:	f001 fab6 	bl	13028 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11abc:	e7ff      	b.n	11abe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x698>
   11abe:	f003 ff16 	bl	158ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11ac2:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11ac6:	e7ff      	b.n	11ac8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a2>
   11ac8:	e4ec      	b.n	114a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::DISPON, None)?;
   11aca:	9802      	ldr	r0, [sp, #8]
   11acc:	f000 0001 	and.w	r0, r0, #1
   11ad0:	f7fd fb85 	bl	f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11ad4:	f88d 012e 	strb.w	r0, [sp, #302]	; 0x12e
   11ad8:	e7ff      	b.n	11ada <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6b4>
   11ada:	f89d 012e 	ldrb.w	r0, [sp, #302]	; 0x12e
   11ade:	07c1      	lsls	r1, r0, #31
   11ae0:	2900      	cmp	r1, #0
   11ae2:	d001      	beq.n	11ae8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c2>
   11ae4:	e7ff      	b.n	11ae6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c0>
   11ae6:	e005      	b.n	11af4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6ce>
   11ae8:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
   11aea:	9817      	ldr	r0, [sp, #92]	; 0x5c
   11aec:	f7fe f8a8 	bl	fc40 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
   11af0:	e009      	b.n	11b06 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e0>
        self.write_command(Instruction::DISPON, None)?;
   11af2:	defe      	udf	#254	; 0xfe
   11af4:	f001 fa98 	bl	13028 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11af8:	e7ff      	b.n	11afa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6d4>
   11afa:	f003 fef8 	bl	158ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11afe:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11b02:	e7ff      	b.n	11b04 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6de>
   11b04:	e4ce      	b.n	114a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
   11b06:	f002 fa38 	bl	13f7a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   11b0a:	9001      	str	r0, [sp, #4]
   11b0c:	e7ff      	b.n	11b0e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e8>
   11b0e:	f24f 21bc 	movw	r1, #62140	; 0xf2bc
   11b12:	f2c0 0101 	movt	r1, #1
   11b16:	f24f 43b0 	movw	r3, #62640	; 0xf4b0
   11b1a:	f2c0 0301 	movt	r3, #1
   11b1e:	220e      	movs	r2, #14
   11b20:	9801      	ldr	r0, [sp, #4]
   11b22:	f7fd fb23 	bl	f16c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   11b26:	e7ff      	b.n	11b28 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x702>
   11b28:	2000      	movs	r0, #0
        Ok(())
   11b2a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    }
   11b2e:	e4b9      	b.n	114a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>

00011b30 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>:
    fn to_u8(&self) -> Option<u8> {
   11b30:	b580      	push	{r7, lr}
   11b32:	b08a      	sub	sp, #40	; 0x28
   11b34:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
   11b36:	f000 fe3c 	bl	127b2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>
   11b3a:	9307      	str	r3, [sp, #28]
   11b3c:	9206      	str	r2, [sp, #24]
   11b3e:	9105      	str	r1, [sp, #20]
   11b40:	9004      	str	r0, [sp, #16]
   11b42:	e7ff      	b.n	11b44 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x14>
   11b44:	a804      	add	r0, sp, #16
   11b46:	f003 f813 	bl	14b70 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
   11b4a:	9003      	str	r0, [sp, #12]
   11b4c:	e7ff      	b.n	11b4e <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x1e>
   11b4e:	9803      	ldr	r0, [sp, #12]
   11b50:	f003 f8e1 	bl	14d16 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
   11b54:	9002      	str	r0, [sp, #8]
   11b56:	9101      	str	r1, [sp, #4]
   11b58:	e7ff      	b.n	11b5a <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x2a>
    }
   11b5a:	9802      	ldr	r0, [sp, #8]
   11b5c:	f000 0001 	and.w	r0, r0, #1
   11b60:	9901      	ldr	r1, [sp, #4]
   11b62:	b00a      	add	sp, #40	; 0x28
   11b64:	bd80      	pop	{r7, pc}

00011b66 <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>:
   11b66:	b082      	sub	sp, #8
   11b68:	4601      	mov	r1, r0
   11b6a:	f8ad 0004 	strh.w	r0, [sp, #4]
   11b6e:	ba00      	rev	r0, r0
   11b70:	0c00      	lsrs	r0, r0, #16
   11b72:	f8ad 0006 	strh.w	r0, [sp, #6]
   11b76:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   11b7a:	9000      	str	r0, [sp, #0]
   11b7c:	e7ff      	b.n	11b7e <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E+0x18>
   11b7e:	9800      	ldr	r0, [sp, #0]
   11b80:	b002      	add	sp, #8
   11b82:	4770      	bx	lr

00011b84 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>:
   11b84:	b580      	push	{r7, lr}
   11b86:	b084      	sub	sp, #16
   11b88:	4601      	mov	r1, r0
   11b8a:	f8ad 000e 	strh.w	r0, [sp, #14]
   11b8e:	9102      	str	r1, [sp, #8]
   11b90:	f7ff ffe9 	bl	11b66 <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>
   11b94:	9001      	str	r0, [sp, #4]
   11b96:	e7ff      	b.n	11b98 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E+0x14>
   11b98:	9801      	ldr	r0, [sp, #4]
   11b9a:	b004      	add	sp, #16
   11b9c:	bd80      	pop	{r7, pc}

00011b9e <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>:
   11b9e:	b580      	push	{r7, lr}
   11ba0:	b084      	sub	sp, #16
   11ba2:	9002      	str	r0, [sp, #8]
   11ba4:	9802      	ldr	r0, [sp, #8]
   11ba6:	f002 ff47 	bl	14a38 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>
   11baa:	9001      	str	r0, [sp, #4]
   11bac:	9100      	str	r1, [sp, #0]
   11bae:	e7ff      	b.n	11bb0 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE+0x12>
   11bb0:	9801      	ldr	r0, [sp, #4]
   11bb2:	f000 0001 	and.w	r0, r0, #1
   11bb6:	9900      	ldr	r1, [sp, #0]
   11bb8:	b004      	add	sp, #16
   11bba:	bd80      	pop	{r7, pc}

00011bbc <_ZN4core3ptr13drop_in_place17h00c2f0b87edee24bE>:
   11bbc:	b081      	sub	sp, #4
   11bbe:	9000      	str	r0, [sp, #0]
   11bc0:	b001      	add	sp, #4
   11bc2:	4770      	bx	lr

00011bc4 <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE>:
   11bc4:	b580      	push	{r7, lr}
   11bc6:	b082      	sub	sp, #8
   11bc8:	9001      	str	r0, [sp, #4]
   11bca:	f000 f83e 	bl	11c4a <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   11bce:	e7ff      	b.n	11bd0 <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE+0xc>
   11bd0:	b002      	add	sp, #8
   11bd2:	bd80      	pop	{r7, pc}

00011bd4 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>:
   11bd4:	b580      	push	{r7, lr}
   11bd6:	b082      	sub	sp, #8
   11bd8:	9001      	str	r0, [sp, #4]
   11bda:	6801      	ldr	r1, [r0, #0]
   11bdc:	2900      	cmp	r1, #0
   11bde:	9000      	str	r0, [sp, #0]
   11be0:	d102      	bne.n	11be8 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x14>
   11be2:	e7ff      	b.n	11be4 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x10>
   11be4:	b002      	add	sp, #8
   11be6:	bd80      	pop	{r7, pc}
   11be8:	9800      	ldr	r0, [sp, #0]
   11bea:	3004      	adds	r0, #4
   11bec:	f7ff ffea 	bl	11bc4 <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE>
   11bf0:	e7f8      	b.n	11be4 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x10>

00011bf2 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>:
   11bf2:	b580      	push	{r7, lr}
   11bf4:	b082      	sub	sp, #8
   11bf6:	9001      	str	r0, [sp, #4]
   11bf8:	f003 f908 	bl	14e0c <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E>
   11bfc:	e7ff      	b.n	11bfe <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE+0xc>
   11bfe:	b002      	add	sp, #8
   11c00:	bd80      	pop	{r7, pc}

00011c02 <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E>:
   11c02:	b580      	push	{r7, lr}
   11c04:	b082      	sub	sp, #8
   11c06:	9001      	str	r0, [sp, #4]
   11c08:	3024      	adds	r0, #36	; 0x24
   11c0a:	f000 f81e 	bl	11c4a <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   11c0e:	e7ff      	b.n	11c10 <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E+0xe>
   11c10:	b002      	add	sp, #8
   11c12:	bd80      	pop	{r7, pc}

00011c14 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>:
   11c14:	b580      	push	{r7, lr}
   11c16:	b082      	sub	sp, #8
   11c18:	9001      	str	r0, [sp, #4]
   11c1a:	9000      	str	r0, [sp, #0]
   11c1c:	f7ff fff1 	bl	11c02 <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E>
   11c20:	e001      	b.n	11c26 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E+0x12>
   11c22:	b002      	add	sp, #8
   11c24:	bd80      	pop	{r7, pc}
   11c26:	9800      	ldr	r0, [sp, #0]
   11c28:	3094      	adds	r0, #148	; 0x94
   11c2a:	f7ff ffe2 	bl	11bf2 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
   11c2e:	e7f8      	b.n	11c22 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E+0xe>

00011c30 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>:
   11c30:	b580      	push	{r7, lr}
   11c32:	b082      	sub	sp, #8
   11c34:	9001      	str	r0, [sp, #4]
   11c36:	9000      	str	r0, [sp, #0]
   11c38:	f003 f910 	bl	14e5c <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E>
   11c3c:	e001      	b.n	11c42 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E+0x12>
   11c3e:	b002      	add	sp, #8
   11c40:	bd80      	pop	{r7, pc}
   11c42:	9800      	ldr	r0, [sp, #0]
   11c44:	f7ff ffd5 	bl	11bf2 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
   11c48:	e7f9      	b.n	11c3e <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E+0xe>

00011c4a <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>:
   11c4a:	b580      	push	{r7, lr}
   11c4c:	b082      	sub	sp, #8
   11c4e:	9001      	str	r0, [sp, #4]
   11c50:	f003 f8cc 	bl	14dec <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E>
   11c54:	e7ff      	b.n	11c56 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E+0xc>
   11c56:	b002      	add	sp, #8
   11c58:	bd80      	pop	{r7, pc}

00011c5a <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>:
   11c5a:	b580      	push	{r7, lr}
   11c5c:	b082      	sub	sp, #8
   11c5e:	9001      	str	r0, [sp, #4]
   11c60:	6801      	ldr	r1, [r0, #0]
   11c62:	2900      	cmp	r1, #0
   11c64:	9000      	str	r0, [sp, #0]
   11c66:	d102      	bne.n	11c6e <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x14>
   11c68:	e7ff      	b.n	11c6a <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x10>
   11c6a:	b002      	add	sp, #8
   11c6c:	bd80      	pop	{r7, pc}
   11c6e:	9800      	ldr	r0, [sp, #0]
   11c70:	3004      	adds	r0, #4
   11c72:	f000 f805 	bl	11c80 <_ZN4core3ptr13drop_in_place17hf625580841d3425eE>
   11c76:	e7f8      	b.n	11c6a <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x10>

00011c78 <_ZN4core3ptr13drop_in_place17hef1277471241eea2E>:
   11c78:	b081      	sub	sp, #4
   11c7a:	9000      	str	r0, [sp, #0]
   11c7c:	b001      	add	sp, #4
   11c7e:	4770      	bx	lr

00011c80 <_ZN4core3ptr13drop_in_place17hf625580841d3425eE>:
   11c80:	b580      	push	{r7, lr}
   11c82:	b082      	sub	sp, #8
   11c84:	9001      	str	r0, [sp, #4]
   11c86:	f7ff ffb4 	bl	11bf2 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
   11c8a:	e7ff      	b.n	11c8c <_ZN4core3ptr13drop_in_place17hf625580841d3425eE+0xc>
   11c8c:	b002      	add	sp, #8
   11c8e:	bd80      	pop	{r7, pc}

00011c90 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>:
   11c90:	b089      	sub	sp, #36	; 0x24
   11c92:	9005      	str	r0, [sp, #20]
   11c94:	9106      	str	r1, [sp, #24]
   11c96:	9107      	str	r1, [sp, #28]
   11c98:	9907      	ldr	r1, [sp, #28]
   11c9a:	9002      	str	r0, [sp, #8]
   11c9c:	9101      	str	r1, [sp, #4]
   11c9e:	e7ff      	b.n	11ca0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x10>
   11ca0:	9802      	ldr	r0, [sp, #8]
   11ca2:	9008      	str	r0, [sp, #32]
   11ca4:	9908      	ldr	r1, [sp, #32]
   11ca6:	9100      	str	r1, [sp, #0]
   11ca8:	e7ff      	b.n	11caa <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x1a>
   11caa:	9800      	ldr	r0, [sp, #0]
   11cac:	9003      	str	r0, [sp, #12]
   11cae:	9901      	ldr	r1, [sp, #4]
   11cb0:	9104      	str	r1, [sp, #16]
   11cb2:	9803      	ldr	r0, [sp, #12]
   11cb4:	9904      	ldr	r1, [sp, #16]
   11cb6:	b009      	add	sp, #36	; 0x24
   11cb8:	4770      	bx	lr

00011cba <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E>:
    C: PixelColor,
{
    type Item = Pixel<C>;
    type IntoIter = RectangleIterator<C>;

    fn into_iter(self) -> Self::IntoIter {
   11cba:	b580      	push	{r7, lr}
        (&self).into_iter()
   11cbc:	f000 f814 	bl	11ce8 <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE>
   11cc0:	e7ff      	b.n	11cc2 <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E+0x8>
    }
   11cc2:	bd80      	pop	{r7, pc}

00011cc4 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>:
    fn fill(mut self, color: Option<C>) -> Self {
   11cc4:	b5b0      	push	{r4, r5, r7, lr}
   11cc6:	b081      	sub	sp, #4
   11cc8:	469c      	mov	ip, r3
   11cca:	4696      	mov	lr, r2
   11ccc:	f8ad 2000 	strh.w	r2, [sp]
   11cd0:	f8ad 3002 	strh.w	r3, [sp, #2]
        self.style.fill_color = color;
   11cd4:	820a      	strh	r2, [r1, #16]
   11cd6:	824b      	strh	r3, [r1, #18]
        self
   11cd8:	c91c      	ldmia	r1!, {r2, r3, r4}
   11cda:	c01c      	stmia	r0!, {r2, r3, r4}
   11cdc:	e891 003c 	ldmia.w	r1, {r2, r3, r4, r5}
   11ce0:	e880 003c 	stmia.w	r0, {r2, r3, r4, r5}
    }
   11ce4:	b001      	add	sp, #4
   11ce6:	bdb0      	pop	{r4, r5, r7, pc}

00011ce8 <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE>:
    C: PixelColor,
{
    type Item = Pixel<C>;
    type IntoIter = RectangleIterator<C>;

    fn into_iter(self) -> Self::IntoIter {
   11ce8:	b570      	push	{r4, r5, r6, lr}
   11cea:	b08e      	sub	sp, #56	; 0x38
   11cec:	910d      	str	r1, [sp, #52]	; 0x34
        RectangleIterator {
            top_left: self.top_left,
   11cee:	680a      	ldr	r2, [r1, #0]
   11cf0:	684b      	ldr	r3, [r1, #4]
            bottom_right: self.bottom_right,
   11cf2:	f8d1 c008 	ldr.w	ip, [r1, #8]
   11cf6:	f8d1 e00c 	ldr.w	lr, [r1, #12]
            style: self.style,
   11cfa:	8b0c      	ldrh	r4, [r1, #24]
   11cfc:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
   11d00:	690c      	ldr	r4, [r1, #16]
   11d02:	694d      	ldr	r5, [r1, #20]
   11d04:	950b      	str	r5, [sp, #44]	; 0x2c
   11d06:	940a      	str	r4, [sp, #40]	; 0x28
   11d08:	2400      	movs	r4, #0
            x: self.top_left[0],
   11d0a:	9009      	str	r0, [sp, #36]	; 0x24
   11d0c:	4608      	mov	r0, r1
   11d0e:	9108      	str	r1, [sp, #32]
   11d10:	4621      	mov	r1, r4
   11d12:	9207      	str	r2, [sp, #28]
   11d14:	9306      	str	r3, [sp, #24]
   11d16:	f8cd c014 	str.w	ip, [sp, #20]
   11d1a:	f8cd e010 	str.w	lr, [sp, #16]
   11d1e:	f7fc fac9 	bl	e2b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11d22:	9003      	str	r0, [sp, #12]
   11d24:	e7ff      	b.n	11d26 <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE+0x3e>
   11d26:	9803      	ldr	r0, [sp, #12]
   11d28:	6801      	ldr	r1, [r0, #0]
   11d2a:	2201      	movs	r2, #1
            y: self.top_left[1],
   11d2c:	9808      	ldr	r0, [sp, #32]
   11d2e:	9102      	str	r1, [sp, #8]
   11d30:	4611      	mov	r1, r2
   11d32:	f7fc fabf 	bl	e2b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11d36:	9001      	str	r0, [sp, #4]
   11d38:	e7ff      	b.n	11d3a <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE+0x52>
   11d3a:	9801      	ldr	r0, [sp, #4]
   11d3c:	6801      	ldr	r1, [r0, #0]
        RectangleIterator {
   11d3e:	9a07      	ldr	r2, [sp, #28]
   11d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11d42:	601a      	str	r2, [r3, #0]
   11d44:	f8dd c018 	ldr.w	ip, [sp, #24]
   11d48:	f8c3 c004 	str.w	ip, [r3, #4]
   11d4c:	f8dd e014 	ldr.w	lr, [sp, #20]
   11d50:	f8c3 e008 	str.w	lr, [r3, #8]
   11d54:	9c04      	ldr	r4, [sp, #16]
   11d56:	60dc      	str	r4, [r3, #12]
   11d58:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   11d5c:	841d      	strh	r5, [r3, #32]
   11d5e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   11d60:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   11d62:	61de      	str	r6, [r3, #28]
   11d64:	619d      	str	r5, [r3, #24]
   11d66:	9d02      	ldr	r5, [sp, #8]
   11d68:	611d      	str	r5, [r3, #16]
   11d6a:	6159      	str	r1, [r3, #20]
        }
    }
   11d6c:	b00e      	add	sp, #56	; 0x38
   11d6e:	bd70      	pop	{r4, r5, r6, pc}

00011d70 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE>:
where
    C: PixelColor,
{
    type Item = Pixel<C>;

    fn next(&mut self) -> Option<Self::Item> {
   11d70:	b510      	push	{r4, lr}
   11d72:	b0d2      	sub	sp, #328	; 0x148
   11d74:	914f      	str	r1, [sp, #316]	; 0x13c
   11d76:	2200      	movs	r2, #0
        // If entire object is off the top left of the screen or has no border or fill colour,
        // don't render anything
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   11d78:	902a      	str	r0, [sp, #168]	; 0xa8
   11d7a:	4608      	mov	r0, r1
   11d7c:	9129      	str	r1, [sp, #164]	; 0xa4
   11d7e:	4611      	mov	r1, r2
   11d80:	f7fc fa98 	bl	e2b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11d84:	9028      	str	r0, [sp, #160]	; 0xa0
   11d86:	e03c      	b.n	11e02 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x92>
   11d88:	2001      	movs	r0, #1
   11d8a:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
   11d8e:	e009      	b.n	11da4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34>
   11d90:	2000      	movs	r0, #0
   11d92:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
   11d96:	e005      	b.n	11da4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   11d98:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11d9a:	301c      	adds	r0, #28
   11d9c:	f002 ff79 	bl	14c92 <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>
   11da0:	9027      	str	r0, [sp, #156]	; 0x9c
   11da2:	e06c      	b.n	11e7e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x10e>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   11da4:	f89d 00af 	ldrb.w	r0, [sp, #175]	; 0xaf
   11da8:	07c0      	lsls	r0, r0, #31
   11daa:	2800      	cmp	r0, #0
   11dac:	d172      	bne.n	11e94 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x124>
   11dae:	e070      	b.n	11e92 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x122>
   11db0:	2001      	movs	r0, #1
   11db2:	f88d 00b0 	strb.w	r0, [sp, #176]	; 0xb0
   11db6:	e00a      	b.n	11dce <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5e>
   11db8:	2000      	movs	r0, #0
   11dba:	f88d 00b0 	strb.w	r0, [sp, #176]	; 0xb0
   11dbe:	e006      	b.n	11dce <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5e>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   11dc0:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11dc2:	3008      	adds	r0, #8
   11dc4:	2100      	movs	r1, #0
   11dc6:	f7fc fa75 	bl	e2b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11dca:	9026      	str	r0, [sp, #152]	; 0x98
   11dcc:	e038      	b.n	11e40 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xd0>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   11dce:	f89d 00b0 	ldrb.w	r0, [sp, #176]	; 0xb0
   11dd2:	07c0      	lsls	r0, r0, #31
   11dd4:	2800      	cmp	r0, #0
   11dd6:	d1d7      	bne.n	11d88 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x18>
   11dd8:	e7de      	b.n	11d98 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x28>
   11dda:	2001      	movs	r0, #1
   11ddc:	f88d 00b1 	strb.w	r0, [sp, #177]	; 0xb1
   11de0:	e009      	b.n	11df6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x86>
   11de2:	2000      	movs	r0, #0
   11de4:	f88d 00b1 	strb.w	r0, [sp, #177]	; 0xb1
   11de8:	e005      	b.n	11df6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x86>
   11dea:	2101      	movs	r1, #1
   11dec:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11dee:	f7fc fa61 	bl	e2b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11df2:	9025      	str	r0, [sp, #148]	; 0x94
   11df4:	e00a      	b.n	11e0c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x9c>
   11df6:	f89d 00b1 	ldrb.w	r0, [sp, #177]	; 0xb1
   11dfa:	07c0      	lsls	r0, r0, #31
   11dfc:	2800      	cmp	r0, #0
   11dfe:	d1df      	bne.n	11dc0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x50>
   11e00:	e7da      	b.n	11db8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48>
   11e02:	9828      	ldr	r0, [sp, #160]	; 0xa0
   11e04:	6801      	ldr	r1, [r0, #0]
   11e06:	2900      	cmp	r1, #0
   11e08:	d4e7      	bmi.n	11dda <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x6a>
   11e0a:	e7ee      	b.n	11dea <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x7a>
   11e0c:	9825      	ldr	r0, [sp, #148]	; 0x94
   11e0e:	6801      	ldr	r1, [r0, #0]
   11e10:	2900      	cmp	r1, #0
   11e12:	d4e2      	bmi.n	11dda <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x6a>
   11e14:	e7e5      	b.n	11de2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x72>
   11e16:	2001      	movs	r0, #1
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   11e18:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
   11e1c:	e00a      	b.n	11e34 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xc4>
   11e1e:	2000      	movs	r0, #0
   11e20:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
   11e24:	e006      	b.n	11e34 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xc4>
   11e26:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11e28:	3008      	adds	r0, #8
   11e2a:	2101      	movs	r1, #1
   11e2c:	f7fc fa42 	bl	e2b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11e30:	9024      	str	r0, [sp, #144]	; 0x90
   11e32:	e00a      	b.n	11e4a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xda>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   11e34:	f89d 00b2 	ldrb.w	r0, [sp, #178]	; 0xb2
   11e38:	07c0      	lsls	r0, r0, #31
   11e3a:	2800      	cmp	r0, #0
   11e3c:	d1b8      	bne.n	11db0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x40>
   11e3e:	e7bb      	b.n	11db8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   11e40:	9826      	ldr	r0, [sp, #152]	; 0x98
   11e42:	6801      	ldr	r1, [r0, #0]
   11e44:	2900      	cmp	r1, #0
   11e46:	d4e6      	bmi.n	11e16 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xa6>
   11e48:	e7ed      	b.n	11e26 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xb6>
   11e4a:	9824      	ldr	r0, [sp, #144]	; 0x90
   11e4c:	6801      	ldr	r1, [r0, #0]
   11e4e:	2900      	cmp	r1, #0
   11e50:	d4e1      	bmi.n	11e16 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xa6>
   11e52:	e7e4      	b.n	11e1e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xae>
   11e54:	2001      	movs	r0, #1
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   11e56:	f88d 00b3 	strb.w	r0, [sp, #179]	; 0xb3
   11e5a:	e009      	b.n	11e70 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x100>
   11e5c:	2000      	movs	r0, #0
   11e5e:	f88d 00b3 	strb.w	r0, [sp, #179]	; 0xb3
   11e62:	e005      	b.n	11e70 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x100>
   11e64:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11e66:	3018      	adds	r0, #24
   11e68:	f002 ff13 	bl	14c92 <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>
   11e6c:	9023      	str	r0, [sp, #140]	; 0x8c
   11e6e:	e00b      	b.n	11e88 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x118>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   11e70:	f89d 00b3 	ldrb.w	r0, [sp, #179]	; 0xb3
   11e74:	07c0      	lsls	r0, r0, #31
   11e76:	2800      	cmp	r0, #0
   11e78:	f47f af86 	bne.w	11d88 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x18>
   11e7c:	e788      	b.n	11d90 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x20>
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   11e7e:	9827      	ldr	r0, [sp, #156]	; 0x9c
   11e80:	07c1      	lsls	r1, r0, #31
   11e82:	2900      	cmp	r1, #0
   11e84:	d1ee      	bne.n	11e64 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xf4>
   11e86:	e7e9      	b.n	11e5c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xec>
   11e88:	9823      	ldr	r0, [sp, #140]	; 0x8c
   11e8a:	07c1      	lsls	r1, r0, #31
   11e8c:	2900      	cmp	r1, #0
   11e8e:	d1e1      	bne.n	11e54 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xe4>
   11e90:	e7e4      	b.n	11e5c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xec>
        {
            return None;
        }

        let pixel = loop {
   11e92:	e012      	b.n	11eba <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x14a>
   11e94:	2000      	movs	r0, #0
            return None;
   11e96:	992a      	ldr	r1, [sp, #168]	; 0xa8
   11e98:	6008      	str	r0, [r1, #0]
   11e9a:	e7ff      	b.n	11e9c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x12c>
                break out;
            }
        };

        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
    }
   11e9c:	b052      	add	sp, #328	; 0x148
   11e9e:	bd10      	pop	{r4, pc}
        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
   11ea0:	982d      	ldr	r0, [sp, #180]	; 0xb4
   11ea2:	992e      	ldr	r1, [sp, #184]	; 0xb8
   11ea4:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
   11ea6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   11ea8:	934d      	str	r3, [sp, #308]	; 0x134
   11eaa:	924c      	str	r2, [sp, #304]	; 0x130
   11eac:	914b      	str	r1, [sp, #300]	; 0x12c
   11eae:	904a      	str	r0, [sp, #296]	; 0x128
   11eb0:	a94a      	add	r1, sp, #296	; 0x128
   11eb2:	982a      	ldr	r0, [sp, #168]	; 0xa8
   11eb4:	f002 fdff 	bl	14ab6 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE>
   11eb8:	e201      	b.n	122be <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x54e>
   11eba:	2000      	movs	r0, #0
            let mut out = None;
   11ebc:	9031      	str	r0, [sp, #196]	; 0xc4
            if self.y > self.bottom_right[1] {
   11ebe:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11ec0:	6941      	ldr	r1, [r0, #20]
   11ec2:	3008      	adds	r0, #8
   11ec4:	2201      	movs	r2, #1
   11ec6:	9122      	str	r1, [sp, #136]	; 0x88
   11ec8:	4611      	mov	r1, r2
   11eca:	f7fc f9f3 	bl	e2b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11ece:	9021      	str	r0, [sp, #132]	; 0x84
   11ed0:	e7ff      	b.n	11ed2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x162>
   11ed2:	9821      	ldr	r0, [sp, #132]	; 0x84
   11ed4:	6801      	ldr	r1, [r0, #0]
   11ed6:	9a22      	ldr	r2, [sp, #136]	; 0x88
   11ed8:	428a      	cmp	r2, r1
   11eda:	dc13      	bgt.n	11f04 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x194>
   11edc:	e7ff      	b.n	11ede <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x16e>
            let border_width = self.style.stroke_width as i32;
   11ede:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11ee0:	f890 1020 	ldrb.w	r1, [r0, #32]
   11ee4:	460a      	mov	r2, r1
   11ee6:	9150      	str	r1, [sp, #320]	; 0x140
            let tl = self.top_left;
   11ee8:	6801      	ldr	r1, [r0, #0]
   11eea:	6843      	ldr	r3, [r0, #4]
   11eec:	9135      	str	r1, [sp, #212]	; 0xd4
   11eee:	9336      	str	r3, [sp, #216]	; 0xd8
            let br = self.bottom_right;
   11ef0:	6881      	ldr	r1, [r0, #8]
   11ef2:	68c3      	ldr	r3, [r0, #12]
   11ef4:	9137      	str	r1, [sp, #220]	; 0xdc
   11ef6:	9338      	str	r3, [sp, #224]	; 0xe0
            if self.x >= 0 && self.y >= 0 {
   11ef8:	6901      	ldr	r1, [r0, #16]
   11efa:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   11efe:	9220      	str	r2, [sp, #128]	; 0x80
   11f00:	dc0b      	bgt.n	11f1a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1aa>
   11f02:	e006      	b.n	11f12 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1a2>
   11f04:	2000      	movs	r0, #0
                break None;
   11f06:	902d      	str	r0, [sp, #180]	; 0xb4
   11f08:	e7ca      	b.n	11ea0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x130>
   11f0a:	2001      	movs	r0, #1
            if self.x >= 0 && self.y >= 0 {
   11f0c:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
   11f10:	e009      	b.n	11f26 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1b6>
   11f12:	2000      	movs	r0, #0
   11f14:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
   11f18:	e005      	b.n	11f26 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1b6>
   11f1a:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11f1c:	6941      	ldr	r1, [r0, #20]
   11f1e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   11f22:	dcf2      	bgt.n	11f0a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x19a>
   11f24:	e7f5      	b.n	11f12 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1a2>
   11f26:	f89d 00e7 	ldrb.w	r0, [sp, #231]	; 0xe7
   11f2a:	07c0      	lsls	r0, r0, #31
   11f2c:	2800      	cmp	r0, #0
   11f2e:	f000 8182 	beq.w	12236 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c6>
   11f32:	e7ff      	b.n	11f34 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1c4>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   11f34:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11f36:	6941      	ldr	r1, [r0, #20]
   11f38:	a835      	add	r0, sp, #212	; 0xd4
   11f3a:	2201      	movs	r2, #1
   11f3c:	911f      	str	r1, [sp, #124]	; 0x7c
   11f3e:	4611      	mov	r1, r2
   11f40:	f7fc f9b8 	bl	e2b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11f44:	901e      	str	r0, [sp, #120]	; 0x78
   11f46:	e074      	b.n	12032 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2c2>
   11f48:	2001      	movs	r0, #1
                if (
   11f4a:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
   11f4e:	e009      	b.n	11f64 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1f4>
   11f50:	2000      	movs	r0, #0
   11f52:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
   11f56:	e005      	b.n	11f64 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1f4>
                ) && self.style.stroke_color.is_some()
   11f58:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11f5a:	301c      	adds	r0, #28
   11f5c:	f002 fec9 	bl	14cf2 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>
   11f60:	901d      	str	r0, [sp, #116]	; 0x74
   11f62:	e104      	b.n	1216e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3fe>
                if (
   11f64:	f89d 00e8 	ldrb.w	r0, [sp, #232]	; 0xe8
   11f68:	07c0      	lsls	r0, r0, #31
   11f6a:	2800      	cmp	r0, #0
   11f6c:	f040 810a 	bne.w	12184 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x414>
   11f70:	e103      	b.n	1217a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x40a>
   11f72:	2001      	movs	r0, #1
   11f74:	f88d 00e9 	strb.w	r0, [sp, #233]	; 0xe9
   11f78:	e00d      	b.n	11f96 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x226>
   11f7a:	2000      	movs	r0, #0
   11f7c:	f88d 00e9 	strb.w	r0, [sp, #233]	; 0xe9
   11f80:	e009      	b.n	11f96 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x226>
                || (self.x <= br[0] && self.x > br[0] - border_width)
   11f82:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11f84:	6901      	ldr	r1, [r0, #16]
   11f86:	a837      	add	r0, sp, #220	; 0xdc
   11f88:	2200      	movs	r2, #0
   11f8a:	911c      	str	r1, [sp, #112]	; 0x70
   11f8c:	4611      	mov	r1, r2
   11f8e:	f7fc f991 	bl	e2b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11f92:	901b      	str	r0, [sp, #108]	; 0x6c
   11f94:	e0d7      	b.n	12146 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3d6>
                if (
   11f96:	f89d 00e9 	ldrb.w	r0, [sp, #233]	; 0xe9
   11f9a:	07c0      	lsls	r0, r0, #31
   11f9c:	2800      	cmp	r0, #0
   11f9e:	d1db      	bne.n	11f58 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e8>
   11fa0:	e7d6      	b.n	11f50 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e0>
   11fa2:	2001      	movs	r0, #1
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   11fa4:	f88d 00ea 	strb.w	r0, [sp, #234]	; 0xea
   11fa8:	e00d      	b.n	11fc6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x256>
   11faa:	2000      	movs	r0, #0
   11fac:	f88d 00ea 	strb.w	r0, [sp, #234]	; 0xea
   11fb0:	e009      	b.n	11fc6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x256>
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   11fb2:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11fb4:	6901      	ldr	r1, [r0, #16]
   11fb6:	a835      	add	r0, sp, #212	; 0xd4
   11fb8:	2200      	movs	r2, #0
   11fba:	911a      	str	r1, [sp, #104]	; 0x68
   11fbc:	4611      	mov	r1, r2
   11fbe:	f7fc f979 	bl	e2b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11fc2:	9019      	str	r0, [sp, #100]	; 0x64
   11fc4:	e090      	b.n	120e8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x378>
                if (
   11fc6:	f89d 00ea 	ldrb.w	r0, [sp, #234]	; 0xea
   11fca:	07c0      	lsls	r0, r0, #31
   11fcc:	2800      	cmp	r0, #0
   11fce:	d1d0      	bne.n	11f72 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x202>
   11fd0:	e7d7      	b.n	11f82 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x212>
   11fd2:	2001      	movs	r0, #1
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   11fd4:	f88d 00eb 	strb.w	r0, [sp, #235]	; 0xeb
   11fd8:	e00d      	b.n	11ff6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x286>
   11fda:	2000      	movs	r0, #0
   11fdc:	f88d 00eb 	strb.w	r0, [sp, #235]	; 0xeb
   11fe0:	e009      	b.n	11ff6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x286>
                || (self.y <= br[1] && self.y > br[1] - border_width)
   11fe2:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11fe4:	6941      	ldr	r1, [r0, #20]
   11fe6:	a837      	add	r0, sp, #220	; 0xdc
   11fe8:	2201      	movs	r2, #1
   11fea:	9118      	str	r1, [sp, #96]	; 0x60
   11fec:	4611      	mov	r1, r2
   11fee:	f7fc f961 	bl	e2b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11ff2:	9017      	str	r0, [sp, #92]	; 0x5c
   11ff4:	e04b      	b.n	1208e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x31e>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   11ff6:	f89d 00eb 	ldrb.w	r0, [sp, #235]	; 0xeb
   11ffa:	07c0      	lsls	r0, r0, #31
   11ffc:	2800      	cmp	r0, #0
   11ffe:	d1d0      	bne.n	11fa2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x232>
   12000:	e7d7      	b.n	11fb2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x242>
   12002:	2001      	movs	r0, #1
   12004:	f88d 00ec 	strb.w	r0, [sp, #236]	; 0xec
   12008:	e00d      	b.n	12026 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2b6>
   1200a:	2000      	movs	r0, #0
   1200c:	f88d 00ec 	strb.w	r0, [sp, #236]	; 0xec
   12010:	e009      	b.n	12026 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2b6>
   12012:	9829      	ldr	r0, [sp, #164]	; 0xa4
   12014:	6941      	ldr	r1, [r0, #20]
   12016:	a835      	add	r0, sp, #212	; 0xd4
   12018:	2201      	movs	r2, #1
   1201a:	9116      	str	r1, [sp, #88]	; 0x58
   1201c:	4611      	mov	r1, r2
   1201e:	f7fc f949 	bl	e2b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   12022:	9015      	str	r0, [sp, #84]	; 0x54
   12024:	e00b      	b.n	1203e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2ce>
   12026:	f89d 00ec 	ldrb.w	r0, [sp, #236]	; 0xec
   1202a:	07c0      	lsls	r0, r0, #31
   1202c:	2800      	cmp	r0, #0
   1202e:	d1d0      	bne.n	11fd2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x262>
   12030:	e7d7      	b.n	11fe2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x272>
   12032:	981e      	ldr	r0, [sp, #120]	; 0x78
   12034:	6801      	ldr	r1, [r0, #0]
   12036:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   12038:	428a      	cmp	r2, r1
   1203a:	daea      	bge.n	12012 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2a2>
   1203c:	e7e5      	b.n	1200a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x29a>
   1203e:	9815      	ldr	r0, [sp, #84]	; 0x54
   12040:	6801      	ldr	r1, [r0, #0]
   12042:	9a20      	ldr	r2, [sp, #128]	; 0x80
   12044:	188b      	adds	r3, r1, r2
   12046:	469c      	mov	ip, r3
   12048:	428b      	cmp	r3, r1
   1204a:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
   1204e:	f180 8137 	bvs.w	122c0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x550>
   12052:	e7ff      	b.n	12054 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2e4>
   12054:	9816      	ldr	r0, [sp, #88]	; 0x58
   12056:	9914      	ldr	r1, [sp, #80]	; 0x50
   12058:	4288      	cmp	r0, r1
   1205a:	dbd2      	blt.n	12002 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x292>
   1205c:	e7d5      	b.n	1200a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x29a>
   1205e:	2001      	movs	r0, #1
                || (self.y <= br[1] && self.y > br[1] - border_width)
   12060:	f88d 00ed 	strb.w	r0, [sp, #237]	; 0xed
   12064:	e00d      	b.n	12082 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x312>
   12066:	2000      	movs	r0, #0
   12068:	f88d 00ed 	strb.w	r0, [sp, #237]	; 0xed
   1206c:	e009      	b.n	12082 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x312>
   1206e:	9829      	ldr	r0, [sp, #164]	; 0xa4
   12070:	6941      	ldr	r1, [r0, #20]
   12072:	a837      	add	r0, sp, #220	; 0xdc
   12074:	2201      	movs	r2, #1
   12076:	9113      	str	r1, [sp, #76]	; 0x4c
   12078:	4611      	mov	r1, r2
   1207a:	f7fc f91b 	bl	e2b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   1207e:	9012      	str	r0, [sp, #72]	; 0x48
   12080:	e00b      	b.n	1209a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x32a>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   12082:	f89d 00ed 	ldrb.w	r0, [sp, #237]	; 0xed
   12086:	07c0      	lsls	r0, r0, #31
   12088:	2800      	cmp	r0, #0
   1208a:	d1a2      	bne.n	11fd2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x262>
   1208c:	e7a5      	b.n	11fda <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x26a>
                || (self.y <= br[1] && self.y > br[1] - border_width)
   1208e:	9817      	ldr	r0, [sp, #92]	; 0x5c
   12090:	6801      	ldr	r1, [r0, #0]
   12092:	9a18      	ldr	r2, [sp, #96]	; 0x60
   12094:	428a      	cmp	r2, r1
   12096:	ddea      	ble.n	1206e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2fe>
   12098:	e7e5      	b.n	12066 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2f6>
   1209a:	9812      	ldr	r0, [sp, #72]	; 0x48
   1209c:	6801      	ldr	r1, [r0, #0]
   1209e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   120a0:	1a8b      	subs	r3, r1, r2
   120a2:	4291      	cmp	r1, r2
   120a4:	9311      	str	r3, [sp, #68]	; 0x44
   120a6:	f180 8117 	bvs.w	122d8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x568>
   120aa:	e7ff      	b.n	120ac <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x33c>
   120ac:	9813      	ldr	r0, [sp, #76]	; 0x4c
   120ae:	9911      	ldr	r1, [sp, #68]	; 0x44
   120b0:	4288      	cmp	r0, r1
   120b2:	dcd4      	bgt.n	1205e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2ee>
   120b4:	e7d7      	b.n	12066 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2f6>
   120b6:	2001      	movs	r0, #1
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   120b8:	f88d 00ee 	strb.w	r0, [sp, #238]	; 0xee
   120bc:	e00d      	b.n	120da <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x36a>
   120be:	2000      	movs	r0, #0
   120c0:	f88d 00ee 	strb.w	r0, [sp, #238]	; 0xee
   120c4:	e009      	b.n	120da <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x36a>
   120c6:	9829      	ldr	r0, [sp, #164]	; 0xa4
   120c8:	6901      	ldr	r1, [r0, #16]
   120ca:	a835      	add	r0, sp, #212	; 0xd4
   120cc:	2200      	movs	r2, #0
   120ce:	9110      	str	r1, [sp, #64]	; 0x40
   120d0:	4611      	mov	r1, r2
   120d2:	f7fc f8ef 	bl	e2b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   120d6:	900f      	str	r0, [sp, #60]	; 0x3c
   120d8:	e00c      	b.n	120f4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x384>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   120da:	f89d 00ee 	ldrb.w	r0, [sp, #238]	; 0xee
   120de:	07c0      	lsls	r0, r0, #31
   120e0:	2800      	cmp	r0, #0
   120e2:	f47f af5e 	bne.w	11fa2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x232>
   120e6:	e760      	b.n	11faa <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x23a>
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   120e8:	9819      	ldr	r0, [sp, #100]	; 0x64
   120ea:	6801      	ldr	r1, [r0, #0]
   120ec:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   120ee:	428a      	cmp	r2, r1
   120f0:	dae9      	bge.n	120c6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x356>
   120f2:	e7e4      	b.n	120be <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34e>
   120f4:	980f      	ldr	r0, [sp, #60]	; 0x3c
   120f6:	6801      	ldr	r1, [r0, #0]
   120f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
   120fa:	188b      	adds	r3, r1, r2
   120fc:	469c      	mov	ip, r3
   120fe:	428b      	cmp	r3, r1
   12100:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   12104:	f180 80f4 	bvs.w	122f0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x580>
   12108:	e7ff      	b.n	1210a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x39a>
   1210a:	9810      	ldr	r0, [sp, #64]	; 0x40
   1210c:	990e      	ldr	r1, [sp, #56]	; 0x38
   1210e:	4288      	cmp	r0, r1
   12110:	dbd1      	blt.n	120b6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x346>
   12112:	e7d4      	b.n	120be <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34e>
   12114:	2001      	movs	r0, #1
                || (self.x <= br[0] && self.x > br[0] - border_width)
   12116:	f88d 00ef 	strb.w	r0, [sp, #239]	; 0xef
   1211a:	e00d      	b.n	12138 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3c8>
   1211c:	2000      	movs	r0, #0
   1211e:	f88d 00ef 	strb.w	r0, [sp, #239]	; 0xef
   12122:	e009      	b.n	12138 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3c8>
   12124:	9829      	ldr	r0, [sp, #164]	; 0xa4
   12126:	6901      	ldr	r1, [r0, #16]
   12128:	a837      	add	r0, sp, #220	; 0xdc
   1212a:	2200      	movs	r2, #0
   1212c:	910d      	str	r1, [sp, #52]	; 0x34
   1212e:	4611      	mov	r1, r2
   12130:	f7fc f8c0 	bl	e2b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   12134:	900c      	str	r0, [sp, #48]	; 0x30
   12136:	e00c      	b.n	12152 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3e2>
                if (
   12138:	f89d 00ef 	ldrb.w	r0, [sp, #239]	; 0xef
   1213c:	07c0      	lsls	r0, r0, #31
   1213e:	2800      	cmp	r0, #0
   12140:	f47f af17 	bne.w	11f72 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x202>
   12144:	e719      	b.n	11f7a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x20a>
                || (self.x <= br[0] && self.x > br[0] - border_width)
   12146:	981b      	ldr	r0, [sp, #108]	; 0x6c
   12148:	6801      	ldr	r1, [r0, #0]
   1214a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1214c:	428a      	cmp	r2, r1
   1214e:	dde9      	ble.n	12124 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3b4>
   12150:	e7e4      	b.n	1211c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3ac>
   12152:	980c      	ldr	r0, [sp, #48]	; 0x30
   12154:	6801      	ldr	r1, [r0, #0]
   12156:	9a20      	ldr	r2, [sp, #128]	; 0x80
   12158:	1a8b      	subs	r3, r1, r2
   1215a:	4291      	cmp	r1, r2
   1215c:	930b      	str	r3, [sp, #44]	; 0x2c
   1215e:	f180 80d3 	bvs.w	12308 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x598>
   12162:	e7ff      	b.n	12164 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3f4>
   12164:	980d      	ldr	r0, [sp, #52]	; 0x34
   12166:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12168:	4288      	cmp	r0, r1
   1216a:	dcd3      	bgt.n	12114 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3a4>
   1216c:	e7d6      	b.n	1211c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3ac>
                if (
   1216e:	981d      	ldr	r0, [sp, #116]	; 0x74
   12170:	07c1      	lsls	r1, r0, #31
   12172:	2900      	cmp	r1, #0
   12174:	f47f aee8 	bne.w	11f48 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1d8>
   12178:	e6ea      	b.n	11f50 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e0>
                else if let Some(fill) = self.style.fill_color {
   1217a:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1217c:	8b01      	ldrh	r1, [r0, #24]
   1217e:	2901      	cmp	r1, #1
   12180:	d03b      	beq.n	121fa <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48a>
   12182:	e057      	b.n	12234 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
                        self.x,
   12184:	9829      	ldr	r0, [sp, #164]	; 0xa4
   12186:	6901      	ldr	r1, [r0, #16]
                        self.y,
   12188:	6942      	ldr	r2, [r0, #20]
                        self.style.stroke_color.expect("Expected stroke"),
   1218a:	8bc3      	ldrh	r3, [r0, #30]
   1218c:	8b80      	ldrh	r0, [r0, #28]
   1218e:	f24f 5cc4 	movw	ip, #62916	; 0xf5c4
   12192:	f2c0 0c01 	movt	ip, #1
   12196:	46ee      	mov	lr, sp
   12198:	f8ce c000 	str.w	ip, [lr]
   1219c:	f24f 5cb4 	movw	ip, #62900	; 0xf5b4
   121a0:	f2c0 0c01 	movt	ip, #1
   121a4:	f04f 0e0f 	mov.w	lr, #15
   121a8:	910a      	str	r1, [sp, #40]	; 0x28
   121aa:	4619      	mov	r1, r3
   121ac:	9209      	str	r2, [sp, #36]	; 0x24
   121ae:	4662      	mov	r2, ip
   121b0:	4673      	mov	r3, lr
   121b2:	f002 fcf2 	bl	14b9a <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE>
   121b6:	9008      	str	r0, [sp, #32]
   121b8:	e7ff      	b.n	121ba <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x44a>
                    out = Some((
   121ba:	980a      	ldr	r0, [sp, #40]	; 0x28
   121bc:	9040      	str	r0, [sp, #256]	; 0x100
   121be:	9909      	ldr	r1, [sp, #36]	; 0x24
   121c0:	9141      	str	r1, [sp, #260]	; 0x104
   121c2:	9a08      	ldr	r2, [sp, #32]
   121c4:	f8ad 2108 	strh.w	r2, [sp, #264]	; 0x108
   121c8:	9b40      	ldr	r3, [sp, #256]	; 0x100
   121ca:	f8dd c104 	ldr.w	ip, [sp, #260]	; 0x104
   121ce:	f8dd e108 	ldr.w	lr, [sp, #264]	; 0x108
   121d2:	f8cd e0fc 	str.w	lr, [sp, #252]	; 0xfc
   121d6:	f8cd c0f8 	str.w	ip, [sp, #248]	; 0xf8
   121da:	933d      	str	r3, [sp, #244]	; 0xf4
   121dc:	2301      	movs	r3, #1
   121de:	933c      	str	r3, [sp, #240]	; 0xf0
   121e0:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
   121e2:	f8dd c0f4 	ldr.w	ip, [sp, #244]	; 0xf4
   121e6:	f8dd e0f8 	ldr.w	lr, [sp, #248]	; 0xf8
   121ea:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
   121ec:	9434      	str	r4, [sp, #208]	; 0xd0
   121ee:	f8cd e0cc 	str.w	lr, [sp, #204]	; 0xcc
   121f2:	f8cd c0c8 	str.w	ip, [sp, #200]	; 0xc8
   121f6:	9331      	str	r3, [sp, #196]	; 0xc4
                if (
   121f8:	e01c      	b.n	12234 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
                else if let Some(fill) = self.style.fill_color {
   121fa:	9829      	ldr	r0, [sp, #164]	; 0xa4
   121fc:	8b41      	ldrh	r1, [r0, #26]
   121fe:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
                    out = Some((self.x, self.y, fill));
   12202:	6902      	ldr	r2, [r0, #16]
   12204:	6943      	ldr	r3, [r0, #20]
   12206:	9247      	str	r2, [sp, #284]	; 0x11c
   12208:	9348      	str	r3, [sp, #288]	; 0x120
   1220a:	f8ad 1124 	strh.w	r1, [sp, #292]	; 0x124
   1220e:	9947      	ldr	r1, [sp, #284]	; 0x11c
   12210:	9a48      	ldr	r2, [sp, #288]	; 0x120
   12212:	9b49      	ldr	r3, [sp, #292]	; 0x124
   12214:	9346      	str	r3, [sp, #280]	; 0x118
   12216:	9245      	str	r2, [sp, #276]	; 0x114
   12218:	9144      	str	r1, [sp, #272]	; 0x110
   1221a:	2101      	movs	r1, #1
   1221c:	9143      	str	r1, [sp, #268]	; 0x10c
   1221e:	9943      	ldr	r1, [sp, #268]	; 0x10c
   12220:	9a44      	ldr	r2, [sp, #272]	; 0x110
   12222:	9b45      	ldr	r3, [sp, #276]	; 0x114
   12224:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
   12228:	f8cd c0d0 	str.w	ip, [sp, #208]	; 0xd0
   1222c:	9333      	str	r3, [sp, #204]	; 0xcc
   1222e:	9232      	str	r2, [sp, #200]	; 0xc8
   12230:	9131      	str	r1, [sp, #196]	; 0xc4
                else if let Some(fill) = self.style.fill_color {
   12232:	e7ff      	b.n	12234 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
            if self.x >= 0 && self.y >= 0 {
   12234:	e7ff      	b.n	12236 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c6>
            self.x += 1;
   12236:	9829      	ldr	r0, [sp, #164]	; 0xa4
   12238:	6901      	ldr	r1, [r0, #16]
   1223a:	1c4a      	adds	r2, r1, #1
   1223c:	4613      	mov	r3, r2
   1223e:	428a      	cmp	r2, r1
   12240:	9307      	str	r3, [sp, #28]
   12242:	d66d      	bvs.n	12320 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5b0>
   12244:	e7ff      	b.n	12246 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4d6>
   12246:	9807      	ldr	r0, [sp, #28]
   12248:	9929      	ldr	r1, [sp, #164]	; 0xa4
   1224a:	6108      	str	r0, [r1, #16]
            if self.x > self.bottom_right[0] {
   1224c:	690a      	ldr	r2, [r1, #16]
   1224e:	f101 0008 	add.w	r0, r1, #8
   12252:	2100      	movs	r1, #0
   12254:	9206      	str	r2, [sp, #24]
   12256:	f7fc f82d 	bl	e2b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   1225a:	9005      	str	r0, [sp, #20]
   1225c:	e7ff      	b.n	1225e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4ee>
   1225e:	9805      	ldr	r0, [sp, #20]
   12260:	6801      	ldr	r1, [r0, #0]
   12262:	9a06      	ldr	r2, [sp, #24]
   12264:	428a      	cmp	r2, r1
   12266:	dd16      	ble.n	12296 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x526>
   12268:	e7ff      	b.n	1226a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4fa>
   1226a:	2100      	movs	r1, #0
                self.x = self.top_left[0];
   1226c:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1226e:	f7fc f821 	bl	e2b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   12272:	9004      	str	r0, [sp, #16]
   12274:	e7ff      	b.n	12276 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x506>
   12276:	9804      	ldr	r0, [sp, #16]
   12278:	6801      	ldr	r1, [r0, #0]
   1227a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1227c:	6111      	str	r1, [r2, #16]
                self.y += 1;
   1227e:	6951      	ldr	r1, [r2, #20]
   12280:	1c4b      	adds	r3, r1, #1
   12282:	469c      	mov	ip, r3
   12284:	428b      	cmp	r3, r1
   12286:	f8cd c00c 	str.w	ip, [sp, #12]
   1228a:	d655      	bvs.n	12338 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5c8>
   1228c:	e7ff      	b.n	1228e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x51e>
   1228e:	9803      	ldr	r0, [sp, #12]
   12290:	9929      	ldr	r1, [sp, #164]	; 0xa4
   12292:	6148      	str	r0, [r1, #20]
            if self.x > self.bottom_right[0] {
   12294:	e7ff      	b.n	12296 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x526>
   12296:	a831      	add	r0, sp, #196	; 0xc4
            if out.is_some() {
   12298:	f002 fd19 	bl	14cce <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E>
   1229c:	9002      	str	r0, [sp, #8]
   1229e:	e7ff      	b.n	122a0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x530>
   122a0:	9802      	ldr	r0, [sp, #8]
   122a2:	07c1      	lsls	r1, r0, #31
   122a4:	2900      	cmp	r1, #0
   122a6:	d101      	bne.n	122ac <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x53c>
   122a8:	e7ff      	b.n	122aa <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x53a>
        let pixel = loop {
   122aa:	e606      	b.n	11eba <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x14a>
                break out;
   122ac:	9831      	ldr	r0, [sp, #196]	; 0xc4
   122ae:	9932      	ldr	r1, [sp, #200]	; 0xc8
   122b0:	9a33      	ldr	r2, [sp, #204]	; 0xcc
   122b2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   122b4:	9330      	str	r3, [sp, #192]	; 0xc0
   122b6:	922f      	str	r2, [sp, #188]	; 0xbc
   122b8:	912e      	str	r1, [sp, #184]	; 0xb8
   122ba:	902d      	str	r0, [sp, #180]	; 0xb4
   122bc:	e5f0      	b.n	11ea0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x130>
    }
   122be:	e5ed      	b.n	11e9c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x12c>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   122c0:	f24f 5040 	movw	r0, #62784	; 0xf540
   122c4:	f2c0 0001 	movt	r0, #1
   122c8:	f24f 5230 	movw	r2, #62768	; 0xf530
   122cc:	f2c0 0201 	movt	r2, #1
   122d0:	211c      	movs	r1, #28
   122d2:	f004 fb65 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   122d6:	defe      	udf	#254	; 0xfe
                || (self.y <= br[1] && self.y > br[1] - border_width)
   122d8:	f24f 5070 	movw	r0, #62832	; 0xf570
   122dc:	f2c0 0001 	movt	r0, #1
   122e0:	f24f 525c 	movw	r2, #62812	; 0xf55c
   122e4:	f2c0 0201 	movt	r2, #1
   122e8:	2121      	movs	r1, #33	; 0x21
   122ea:	f004 fb59 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   122ee:	defe      	udf	#254	; 0xfe
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   122f0:	f24f 5040 	movw	r0, #62784	; 0xf540
   122f4:	f2c0 0001 	movt	r0, #1
   122f8:	f24f 5294 	movw	r2, #62868	; 0xf594
   122fc:	f2c0 0201 	movt	r2, #1
   12300:	211c      	movs	r1, #28
   12302:	f004 fb4d 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12306:	defe      	udf	#254	; 0xfe
                || (self.x <= br[0] && self.x > br[0] - border_width)
   12308:	f24f 5070 	movw	r0, #62832	; 0xf570
   1230c:	f2c0 0001 	movt	r0, #1
   12310:	f24f 52a4 	movw	r2, #62884	; 0xf5a4
   12314:	f2c0 0201 	movt	r2, #1
   12318:	2121      	movs	r1, #33	; 0x21
   1231a:	f004 fb41 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1231e:	defe      	udf	#254	; 0xfe
            self.x += 1;
   12320:	f24f 5040 	movw	r0, #62784	; 0xf540
   12324:	f2c0 0001 	movt	r0, #1
   12328:	f24f 52d4 	movw	r2, #62932	; 0xf5d4
   1232c:	f2c0 0201 	movt	r2, #1
   12330:	211c      	movs	r1, #28
   12332:	f004 fb35 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12336:	defe      	udf	#254	; 0xfe
                self.y += 1;
   12338:	f24f 5040 	movw	r0, #62784	; 0xf540
   1233c:	f2c0 0001 	movt	r0, #1
   12340:	f24f 52e4 	movw	r2, #62948	; 0xf5e4
   12344:	f2c0 0201 	movt	r2, #1
   12348:	211c      	movs	r1, #28
   1234a:	f004 fb29 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1234e:	defe      	udf	#254	; 0xfe

00012350 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E>:
        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
   12350:	b580      	push	{r7, lr}
   12352:	b08a      	sub	sp, #40	; 0x28
   12354:	680a      	ldr	r2, [r1, #0]
   12356:	9207      	str	r2, [sp, #28]
   12358:	684b      	ldr	r3, [r1, #4]
   1235a:	9308      	str	r3, [sp, #32]
   1235c:	8909      	ldrh	r1, [r1, #8]
   1235e:	468c      	mov	ip, r1
   12360:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
   12364:	9005      	str	r0, [sp, #20]
   12366:	4610      	mov	r0, r2
   12368:	4619      	mov	r1, r3
   1236a:	f8cd c010 	str.w	ip, [sp, #16]
   1236e:	f7fb ff98 	bl	e2a2 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
   12372:	9003      	str	r0, [sp, #12]
   12374:	9102      	str	r1, [sp, #8]
   12376:	e7ff      	b.n	12378 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E+0x28>
   12378:	9803      	ldr	r0, [sp, #12]
   1237a:	9902      	ldr	r1, [sp, #8]
   1237c:	f7fb ffe3 	bl	e346 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE>
   12380:	9001      	str	r0, [sp, #4]
   12382:	9100      	str	r1, [sp, #0]
   12384:	e7ff      	b.n	12386 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E+0x36>
   12386:	9801      	ldr	r0, [sp, #4]
   12388:	9905      	ldr	r1, [sp, #20]
   1238a:	6008      	str	r0, [r1, #0]
   1238c:	9a00      	ldr	r2, [sp, #0]
   1238e:	604a      	str	r2, [r1, #4]
   12390:	9b04      	ldr	r3, [sp, #16]
   12392:	810b      	strh	r3, [r1, #8]
   12394:	b00a      	add	sp, #40	; 0x28
   12396:	bd80      	pop	{r7, pc}

00012398 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>:
    pub fn new(top_left: Coord, bottom_right: Coord) -> Self {
   12398:	b510      	push	{r4, lr}
   1239a:	b08c      	sub	sp, #48	; 0x30
   1239c:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   123a0:	9108      	str	r1, [sp, #32]
   123a2:	9209      	str	r2, [sp, #36]	; 0x24
   123a4:	930a      	str	r3, [sp, #40]	; 0x28
   123a6:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   123aa:	f10d 0e14 	add.w	lr, sp, #20
            style: Style::default(),
   123ae:	9004      	str	r0, [sp, #16]
   123b0:	4670      	mov	r0, lr
   123b2:	9303      	str	r3, [sp, #12]
   123b4:	9202      	str	r2, [sp, #8]
   123b6:	9101      	str	r1, [sp, #4]
   123b8:	f8cd c000 	str.w	ip, [sp]
   123bc:	f000 f818 	bl	123f0 <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>
   123c0:	e7ff      	b.n	123c2 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E+0x2a>
        Rectangle {
   123c2:	9801      	ldr	r0, [sp, #4]
   123c4:	9904      	ldr	r1, [sp, #16]
   123c6:	6008      	str	r0, [r1, #0]
   123c8:	9a02      	ldr	r2, [sp, #8]
   123ca:	604a      	str	r2, [r1, #4]
   123cc:	9b03      	ldr	r3, [sp, #12]
   123ce:	608b      	str	r3, [r1, #8]
   123d0:	f8dd c000 	ldr.w	ip, [sp]
   123d4:	f8c1 c00c 	str.w	ip, [r1, #12]
   123d8:	f8bd e01c 	ldrh.w	lr, [sp, #28]
   123dc:	f8a1 e018 	strh.w	lr, [r1, #24]
   123e0:	f8dd e014 	ldr.w	lr, [sp, #20]
   123e4:	9c06      	ldr	r4, [sp, #24]
   123e6:	614c      	str	r4, [r1, #20]
   123e8:	f8c1 e010 	str.w	lr, [r1, #16]
    }
   123ec:	b00c      	add	sp, #48	; 0x30
   123ee:	bd10      	pop	{r4, pc}

000123f0 <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>:

impl<P> Default for Style<P>
where
    P: PixelColor,
{
    fn default() -> Self {
   123f0:	b082      	sub	sp, #8
   123f2:	2100      	movs	r1, #0
        Self {
            fill_color: None,
   123f4:	f8ad 1000 	strh.w	r1, [sp]
            stroke_color: None,
   123f8:	f8ad 1004 	strh.w	r1, [sp, #4]
        Self {
   123fc:	f8bd 1000 	ldrh.w	r1, [sp]
   12400:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   12404:	8001      	strh	r1, [r0, #0]
   12406:	8042      	strh	r2, [r0, #2]
   12408:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   1240c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   12410:	8081      	strh	r1, [r0, #4]
   12412:	80c2      	strh	r2, [r0, #6]
   12414:	2101      	movs	r1, #1
   12416:	7201      	strb	r1, [r0, #8]
            stroke_width: 1,
        }
    }
   12418:	b002      	add	sp, #8
   1241a:	4770      	bx	lr

0001241c <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>:
use num_derive::ToPrimitive;

/// ST7735 instructions.
#[derive(ToPrimitive)]
   1241c:	b08a      	sub	sp, #40	; 0x28
   1241e:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Instruction {
   12420:	7800      	ldrb	r0, [r0, #0]
   12422:	9001      	str	r0, [sp, #4]
   12424:	9901      	ldr	r1, [sp, #4]
   12426:	e8df f011 	tbh	[pc, r1, lsl #1]
   1242a:	0103      	.short	0x0103
   1242c:	01020107 	.word	0x01020107
   12430:	010c0102 	.word	0x010c0102
   12434:	01020102 	.word	0x01020102
   12438:	01020102 	.word	0x01020102
   1243c:	01020111 	.word	0x01020111
   12440:	01020102 	.word	0x01020102
   12444:	01020102 	.word	0x01020102
   12448:	01160102 	.word	0x01160102
   1244c:	0120011b 	.word	0x0120011b
   12450:	01020125 	.word	0x01020125
   12454:	01020102 	.word	0x01020102
   12458:	01020102 	.word	0x01020102
   1245c:	01020102 	.word	0x01020102
   12460:	01020102 	.word	0x01020102
   12464:	01020102 	.word	0x01020102
   12468:	012a0102 	.word	0x012a0102
   1246c:	0102012f 	.word	0x0102012f
   12470:	01020102 	.word	0x01020102
   12474:	01020102 	.word	0x01020102
   12478:	01340102 	.word	0x01340102
   1247c:	013e0139 	.word	0x013e0139
   12480:	01480143 	.word	0x01480143
   12484:	014d0102 	.word	0x014d0102
   12488:	01520102 	.word	0x01520102
   1248c:	01020102 	.word	0x01020102
   12490:	01020102 	.word	0x01020102
   12494:	015c0102 	.word	0x015c0102
   12498:	01020102 	.word	0x01020102
   1249c:	01570102 	.word	0x01570102
   124a0:	01020102 	.word	0x01020102
   124a4:	01020102 	.word	0x01020102
   124a8:	01020102 	.word	0x01020102
   124ac:	01020102 	.word	0x01020102
   124b0:	01020102 	.word	0x01020102
   124b4:	01020102 	.word	0x01020102
   124b8:	01020102 	.word	0x01020102
   124bc:	01020102 	.word	0x01020102
   124c0:	01020102 	.word	0x01020102
   124c4:	01020102 	.word	0x01020102
   124c8:	01020102 	.word	0x01020102
   124cc:	01020102 	.word	0x01020102
   124d0:	01020102 	.word	0x01020102
   124d4:	01020102 	.word	0x01020102
   124d8:	01020102 	.word	0x01020102
   124dc:	01020102 	.word	0x01020102
   124e0:	01020102 	.word	0x01020102
   124e4:	01020102 	.word	0x01020102
   124e8:	01020102 	.word	0x01020102
   124ec:	01020102 	.word	0x01020102
   124f0:	01020102 	.word	0x01020102
   124f4:	01020102 	.word	0x01020102
   124f8:	01020102 	.word	0x01020102
   124fc:	01020102 	.word	0x01020102
   12500:	01020102 	.word	0x01020102
   12504:	01020102 	.word	0x01020102
   12508:	01020102 	.word	0x01020102
   1250c:	01020102 	.word	0x01020102
   12510:	01020102 	.word	0x01020102
   12514:	01020102 	.word	0x01020102
   12518:	01020102 	.word	0x01020102
   1251c:	01020102 	.word	0x01020102
   12520:	01020102 	.word	0x01020102
   12524:	01020102 	.word	0x01020102
   12528:	01020102 	.word	0x01020102
   1252c:	01020102 	.word	0x01020102
   12530:	01020102 	.word	0x01020102
   12534:	01020102 	.word	0x01020102
   12538:	01020102 	.word	0x01020102
   1253c:	01020102 	.word	0x01020102
   12540:	01020102 	.word	0x01020102
   12544:	01020102 	.word	0x01020102
   12548:	01020102 	.word	0x01020102
   1254c:	01020102 	.word	0x01020102
   12550:	01020102 	.word	0x01020102
   12554:	01020102 	.word	0x01020102
   12558:	01020102 	.word	0x01020102
   1255c:	01020102 	.word	0x01020102
   12560:	01020102 	.word	0x01020102
   12564:	01020102 	.word	0x01020102
   12568:	01020102 	.word	0x01020102
   1256c:	01020102 	.word	0x01020102
   12570:	01020102 	.word	0x01020102
   12574:	01020102 	.word	0x01020102
   12578:	01020102 	.word	0x01020102
   1257c:	01020102 	.word	0x01020102
   12580:	01020102 	.word	0x01020102
   12584:	01020102 	.word	0x01020102
   12588:	01020102 	.word	0x01020102
   1258c:	01660161 	.word	0x01660161
   12590:	0170016b 	.word	0x0170016b
   12594:	01750102 	.word	0x01750102
   12598:	01020102 	.word	0x01020102
   1259c:	01020102 	.word	0x01020102
   125a0:	01020102 	.word	0x01020102
   125a4:	01020102 	.word	0x01020102
   125a8:	017a0102 	.word	0x017a0102
   125ac:	0184017f 	.word	0x0184017f
   125b0:	018e0189 	.word	0x018e0189
   125b4:	01020193 	.word	0x01020193
   125b8:	01020102 	.word	0x01020102
   125bc:	01020102 	.word	0x01020102
   125c0:	01020102 	.word	0x01020102
   125c4:	01020102 	.word	0x01020102
   125c8:	01020102 	.word	0x01020102
   125cc:	01020102 	.word	0x01020102
   125d0:	01020102 	.word	0x01020102
   125d4:	01020102 	.word	0x01020102
   125d8:	01020102 	.word	0x01020102
   125dc:	01980102 	.word	0x01980102
   125e0:	01a2019d 	.word	0x01a2019d
   125e4:	010201a7 	.word	0x010201a7
   125e8:	01b10102 	.word	0x01b10102
   125ec:	010200fd 	.word	0x010200fd
   125f0:	01020102 	.word	0x01020102
   125f4:	01020102 	.word	0x01020102
   125f8:	01020102 	.word	0x01020102
   125fc:	01020102 	.word	0x01020102
   12600:	01020102 	.word	0x01020102
   12604:	01020102 	.word	0x01020102
   12608:	01020102 	.word	0x01020102
   1260c:	01020102 	.word	0x01020102
   12610:	01020102 	.word	0x01020102
   12614:	01020102 	.word	0x01020102
   12618:	01020102 	.word	0x01020102
   1261c:	01020102 	.word	0x01020102
   12620:	01ac0102 	.word	0x01ac0102
   12624:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
   12626:	9007      	str	r0, [sp, #28]
   12628:	20e1      	movs	r0, #225	; 0xe1
   1262a:	9006      	str	r0, [sp, #24]
   1262c:	e0b3      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1262e:	defe      	udf	#254	; 0xfe
   12630:	2000      	movs	r0, #0
   12632:	9007      	str	r0, [sp, #28]
   12634:	9006      	str	r0, [sp, #24]
   12636:	e0ae      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12638:	2000      	movs	r0, #0
   1263a:	9007      	str	r0, [sp, #28]
   1263c:	2001      	movs	r0, #1
   1263e:	9006      	str	r0, [sp, #24]
   12640:	e0a9      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12642:	2000      	movs	r0, #0
   12644:	9007      	str	r0, [sp, #28]
   12646:	2004      	movs	r0, #4
   12648:	9006      	str	r0, [sp, #24]
   1264a:	e0a4      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1264c:	2000      	movs	r0, #0
   1264e:	9007      	str	r0, [sp, #28]
   12650:	2009      	movs	r0, #9
   12652:	9006      	str	r0, [sp, #24]
   12654:	e09f      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12656:	2000      	movs	r0, #0
   12658:	9007      	str	r0, [sp, #28]
   1265a:	2010      	movs	r0, #16
   1265c:	9006      	str	r0, [sp, #24]
   1265e:	e09a      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12660:	2000      	movs	r0, #0
   12662:	9007      	str	r0, [sp, #28]
   12664:	2011      	movs	r0, #17
   12666:	9006      	str	r0, [sp, #24]
   12668:	e095      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1266a:	2000      	movs	r0, #0
   1266c:	9007      	str	r0, [sp, #28]
   1266e:	2012      	movs	r0, #18
   12670:	9006      	str	r0, [sp, #24]
   12672:	e090      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12674:	2000      	movs	r0, #0
   12676:	9007      	str	r0, [sp, #28]
   12678:	2013      	movs	r0, #19
   1267a:	9006      	str	r0, [sp, #24]
   1267c:	e08b      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1267e:	2000      	movs	r0, #0
   12680:	9007      	str	r0, [sp, #28]
   12682:	2020      	movs	r0, #32
   12684:	9006      	str	r0, [sp, #24]
   12686:	e086      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12688:	2000      	movs	r0, #0
   1268a:	9007      	str	r0, [sp, #28]
   1268c:	2021      	movs	r0, #33	; 0x21
   1268e:	9006      	str	r0, [sp, #24]
   12690:	e081      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12692:	2000      	movs	r0, #0
   12694:	9007      	str	r0, [sp, #28]
   12696:	2028      	movs	r0, #40	; 0x28
   12698:	9006      	str	r0, [sp, #24]
   1269a:	e07c      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1269c:	2000      	movs	r0, #0
   1269e:	9007      	str	r0, [sp, #28]
   126a0:	2029      	movs	r0, #41	; 0x29
   126a2:	9006      	str	r0, [sp, #24]
   126a4:	e077      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   126a6:	2000      	movs	r0, #0
   126a8:	9007      	str	r0, [sp, #28]
   126aa:	202a      	movs	r0, #42	; 0x2a
   126ac:	9006      	str	r0, [sp, #24]
   126ae:	e072      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   126b0:	2000      	movs	r0, #0
   126b2:	9007      	str	r0, [sp, #28]
   126b4:	202b      	movs	r0, #43	; 0x2b
   126b6:	9006      	str	r0, [sp, #24]
   126b8:	e06d      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   126ba:	2000      	movs	r0, #0
   126bc:	9007      	str	r0, [sp, #28]
   126be:	202c      	movs	r0, #44	; 0x2c
   126c0:	9006      	str	r0, [sp, #24]
   126c2:	e068      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   126c4:	2000      	movs	r0, #0
   126c6:	9007      	str	r0, [sp, #28]
   126c8:	202e      	movs	r0, #46	; 0x2e
   126ca:	9006      	str	r0, [sp, #24]
   126cc:	e063      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   126ce:	2000      	movs	r0, #0
   126d0:	9007      	str	r0, [sp, #28]
   126d2:	2030      	movs	r0, #48	; 0x30
   126d4:	9006      	str	r0, [sp, #24]
   126d6:	e05e      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   126d8:	2000      	movs	r0, #0
   126da:	9007      	str	r0, [sp, #28]
   126dc:	203a      	movs	r0, #58	; 0x3a
   126de:	9006      	str	r0, [sp, #24]
   126e0:	e059      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   126e2:	2000      	movs	r0, #0
   126e4:	9007      	str	r0, [sp, #28]
   126e6:	2036      	movs	r0, #54	; 0x36
   126e8:	9006      	str	r0, [sp, #24]
   126ea:	e054      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   126ec:	2000      	movs	r0, #0
   126ee:	9007      	str	r0, [sp, #28]
   126f0:	20b1      	movs	r0, #177	; 0xb1
   126f2:	9006      	str	r0, [sp, #24]
   126f4:	e04f      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   126f6:	2000      	movs	r0, #0
   126f8:	9007      	str	r0, [sp, #28]
   126fa:	20b2      	movs	r0, #178	; 0xb2
   126fc:	9006      	str	r0, [sp, #24]
   126fe:	e04a      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12700:	2000      	movs	r0, #0
   12702:	9007      	str	r0, [sp, #28]
   12704:	20b3      	movs	r0, #179	; 0xb3
   12706:	9006      	str	r0, [sp, #24]
   12708:	e045      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1270a:	2000      	movs	r0, #0
   1270c:	9007      	str	r0, [sp, #28]
   1270e:	20b4      	movs	r0, #180	; 0xb4
   12710:	9006      	str	r0, [sp, #24]
   12712:	e040      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12714:	2000      	movs	r0, #0
   12716:	9007      	str	r0, [sp, #28]
   12718:	20b6      	movs	r0, #182	; 0xb6
   1271a:	9006      	str	r0, [sp, #24]
   1271c:	e03b      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1271e:	2000      	movs	r0, #0
   12720:	9007      	str	r0, [sp, #28]
   12722:	20c0      	movs	r0, #192	; 0xc0
   12724:	9006      	str	r0, [sp, #24]
   12726:	e036      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12728:	2000      	movs	r0, #0
   1272a:	9007      	str	r0, [sp, #28]
   1272c:	20c1      	movs	r0, #193	; 0xc1
   1272e:	9006      	str	r0, [sp, #24]
   12730:	e031      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12732:	2000      	movs	r0, #0
   12734:	9007      	str	r0, [sp, #28]
   12736:	20c2      	movs	r0, #194	; 0xc2
   12738:	9006      	str	r0, [sp, #24]
   1273a:	e02c      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1273c:	2000      	movs	r0, #0
   1273e:	9007      	str	r0, [sp, #28]
   12740:	20c3      	movs	r0, #195	; 0xc3
   12742:	9006      	str	r0, [sp, #24]
   12744:	e027      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12746:	2000      	movs	r0, #0
   12748:	9007      	str	r0, [sp, #28]
   1274a:	20c4      	movs	r0, #196	; 0xc4
   1274c:	9006      	str	r0, [sp, #24]
   1274e:	e022      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12750:	2000      	movs	r0, #0
   12752:	9007      	str	r0, [sp, #28]
   12754:	20c5      	movs	r0, #197	; 0xc5
   12756:	9006      	str	r0, [sp, #24]
   12758:	e01d      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1275a:	2000      	movs	r0, #0
   1275c:	9007      	str	r0, [sp, #28]
   1275e:	20da      	movs	r0, #218	; 0xda
   12760:	9006      	str	r0, [sp, #24]
   12762:	e018      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12764:	2000      	movs	r0, #0
   12766:	9007      	str	r0, [sp, #28]
   12768:	20db      	movs	r0, #219	; 0xdb
   1276a:	9006      	str	r0, [sp, #24]
   1276c:	e013      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1276e:	2000      	movs	r0, #0
   12770:	9007      	str	r0, [sp, #28]
   12772:	20dc      	movs	r0, #220	; 0xdc
   12774:	9006      	str	r0, [sp, #24]
   12776:	e00e      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12778:	2000      	movs	r0, #0
   1277a:	9007      	str	r0, [sp, #28]
   1277c:	20dd      	movs	r0, #221	; 0xdd
   1277e:	9006      	str	r0, [sp, #24]
   12780:	e009      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12782:	2000      	movs	r0, #0
   12784:	9007      	str	r0, [sp, #28]
   12786:	20fc      	movs	r0, #252	; 0xfc
   12788:	9006      	str	r0, [sp, #24]
   1278a:	e004      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1278c:	2000      	movs	r0, #0
   1278e:	9007      	str	r0, [sp, #28]
   12790:	20e0      	movs	r0, #224	; 0xe0
   12792:	9006      	str	r0, [sp, #24]
   12794:	e7ff      	b.n	12796 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12796:	9806      	ldr	r0, [sp, #24]
   12798:	9907      	ldr	r1, [sp, #28]
   1279a:	9105      	str	r1, [sp, #20]
   1279c:	9004      	str	r0, [sp, #16]
   1279e:	2000      	movs	r0, #0
   127a0:	9003      	str	r0, [sp, #12]
   127a2:	2001      	movs	r0, #1
   127a4:	9002      	str	r0, [sp, #8]
   127a6:	9802      	ldr	r0, [sp, #8]
   127a8:	9903      	ldr	r1, [sp, #12]
   127aa:	9a04      	ldr	r2, [sp, #16]
   127ac:	9b05      	ldr	r3, [sp, #20]
   127ae:	b00a      	add	sp, #40	; 0x28
   127b0:	4770      	bx	lr

000127b2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>:
   127b2:	b580      	push	{r7, lr}
   127b4:	b08a      	sub	sp, #40	; 0x28
   127b6:	9009      	str	r0, [sp, #36]	; 0x24
   127b8:	f7ff fe30 	bl	1241c <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>
   127bc:	9108      	str	r1, [sp, #32]
   127be:	9007      	str	r0, [sp, #28]
   127c0:	9306      	str	r3, [sp, #24]
   127c2:	9205      	str	r2, [sp, #20]
   127c4:	e7ff      	b.n	127c6 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x14>
   127c6:	9807      	ldr	r0, [sp, #28]
   127c8:	9908      	ldr	r1, [sp, #32]
   127ca:	9a05      	ldr	r2, [sp, #20]
   127cc:	9b06      	ldr	r3, [sp, #24]
   127ce:	f000 f859 	bl	12884 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>
   127d2:	9104      	str	r1, [sp, #16]
   127d4:	9003      	str	r0, [sp, #12]
   127d6:	9302      	str	r3, [sp, #8]
   127d8:	9201      	str	r2, [sp, #4]
   127da:	e7ff      	b.n	127dc <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x2a>
   127dc:	9803      	ldr	r0, [sp, #12]
   127de:	9904      	ldr	r1, [sp, #16]
   127e0:	9a01      	ldr	r2, [sp, #4]
   127e2:	9b02      	ldr	r3, [sp, #8]
   127e4:	b00a      	add	sp, #40	; 0x28
   127e6:	bd80      	pop	{r7, pc}

000127e8 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>:
#[derive(ToPrimitive)]
   127e8:	b08a      	sub	sp, #40	; 0x28
   127ea:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Orientation {
   127ec:	7800      	ldrb	r0, [r0, #0]
   127ee:	4601      	mov	r1, r0
   127f0:	2800      	cmp	r0, #0
   127f2:	9101      	str	r1, [sp, #4]
   127f4:	d00f      	beq.n	12816 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x2e>
   127f6:	e7ff      	b.n	127f8 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x10>
   127f8:	9801      	ldr	r0, [sp, #4]
   127fa:	2860      	cmp	r0, #96	; 0x60
   127fc:	d00f      	beq.n	1281e <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x36>
   127fe:	e7ff      	b.n	12800 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x18>
   12800:	9801      	ldr	r0, [sp, #4]
   12802:	28a0      	cmp	r0, #160	; 0xa0
   12804:	d001      	beq.n	1280a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x22>
   12806:	e7ff      	b.n	12808 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x20>
   12808:	e00e      	b.n	12828 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x40>
   1280a:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
   1280c:	9007      	str	r0, [sp, #28]
   1280e:	20a0      	movs	r0, #160	; 0xa0
   12810:	9006      	str	r0, [sp, #24]
   12812:	e00e      	b.n	12832 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
   12814:	defe      	udf	#254	; 0xfe
   12816:	2000      	movs	r0, #0
   12818:	9007      	str	r0, [sp, #28]
   1281a:	9006      	str	r0, [sp, #24]
   1281c:	e009      	b.n	12832 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
   1281e:	2000      	movs	r0, #0
   12820:	9007      	str	r0, [sp, #28]
   12822:	2060      	movs	r0, #96	; 0x60
   12824:	9006      	str	r0, [sp, #24]
   12826:	e004      	b.n	12832 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
   12828:	2000      	movs	r0, #0
   1282a:	9007      	str	r0, [sp, #28]
   1282c:	20c0      	movs	r0, #192	; 0xc0
   1282e:	9006      	str	r0, [sp, #24]
   12830:	e7ff      	b.n	12832 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
   12832:	9806      	ldr	r0, [sp, #24]
   12834:	9907      	ldr	r1, [sp, #28]
   12836:	9105      	str	r1, [sp, #20]
   12838:	9004      	str	r0, [sp, #16]
   1283a:	2000      	movs	r0, #0
   1283c:	9003      	str	r0, [sp, #12]
   1283e:	2001      	movs	r0, #1
   12840:	9002      	str	r0, [sp, #8]
   12842:	9802      	ldr	r0, [sp, #8]
   12844:	9903      	ldr	r1, [sp, #12]
   12846:	9a04      	ldr	r2, [sp, #16]
   12848:	9b05      	ldr	r3, [sp, #20]
   1284a:	b00a      	add	sp, #40	; 0x28
   1284c:	4770      	bx	lr

0001284e <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>:
   1284e:	b580      	push	{r7, lr}
   12850:	b08a      	sub	sp, #40	; 0x28
   12852:	9009      	str	r0, [sp, #36]	; 0x24
   12854:	f7ff ffc8 	bl	127e8 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>
   12858:	9108      	str	r1, [sp, #32]
   1285a:	9007      	str	r0, [sp, #28]
   1285c:	9306      	str	r3, [sp, #24]
   1285e:	9205      	str	r2, [sp, #20]
   12860:	e7ff      	b.n	12862 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x14>
   12862:	9807      	ldr	r0, [sp, #28]
   12864:	9908      	ldr	r1, [sp, #32]
   12866:	9a05      	ldr	r2, [sp, #20]
   12868:	9b06      	ldr	r3, [sp, #24]
   1286a:	f000 f863 	bl	12934 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>
   1286e:	9104      	str	r1, [sp, #16]
   12870:	9003      	str	r0, [sp, #12]
   12872:	9302      	str	r3, [sp, #8]
   12874:	9201      	str	r2, [sp, #4]
   12876:	e7ff      	b.n	12878 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x2a>
   12878:	9803      	ldr	r0, [sp, #12]
   1287a:	9904      	ldr	r1, [sp, #16]
   1287c:	9a01      	ldr	r2, [sp, #4]
   1287e:	9b02      	ldr	r3, [sp, #8]
   12880:	b00a      	add	sp, #40	; 0x28
   12882:	bd80      	pop	{r7, pc}

00012884 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>:
   12884:	b5b0      	push	{r4, r5, r7, lr}
   12886:	b090      	sub	sp, #64	; 0x40
   12888:	469c      	mov	ip, r3
   1288a:	4696      	mov	lr, r2
   1288c:	460c      	mov	r4, r1
   1288e:	4605      	mov	r5, r0
   12890:	9103      	str	r1, [sp, #12]
   12892:	9002      	str	r0, [sp, #8]
   12894:	9305      	str	r3, [sp, #20]
   12896:	9204      	str	r2, [sp, #16]
   12898:	2000      	movs	r0, #0
   1289a:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   1289e:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   128a2:	2001      	movs	r0, #1
   128a4:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   128a8:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   128ac:	9802      	ldr	r0, [sp, #8]
   128ae:	2800      	cmp	r0, #0
   128b0:	d001      	beq.n	128b6 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x32>
   128b2:	e7ff      	b.n	128b4 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x30>
   128b4:	e004      	b.n	128c0 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x3c>
   128b6:	2000      	movs	r0, #0
   128b8:	9007      	str	r0, [sp, #28]
   128ba:	9006      	str	r0, [sp, #24]
   128bc:	e023      	b.n	12906 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
   128be:	defe      	udf	#254	; 0xfe
   128c0:	2000      	movs	r0, #0
   128c2:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   128c6:	9904      	ldr	r1, [sp, #16]
   128c8:	9a05      	ldr	r2, [sp, #20]
   128ca:	920f      	str	r2, [sp, #60]	; 0x3c
   128cc:	910e      	str	r1, [sp, #56]	; 0x38
   128ce:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   128d2:	920b      	str	r2, [sp, #44]	; 0x2c
   128d4:	910a      	str	r1, [sp, #40]	; 0x28
   128d6:	980a      	ldr	r0, [sp, #40]	; 0x28
   128d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   128da:	f000 f883 	bl	129e4 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>
   128de:	9101      	str	r1, [sp, #4]
   128e0:	9000      	str	r0, [sp, #0]
   128e2:	e7ff      	b.n	128e4 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x60>
   128e4:	9800      	ldr	r0, [sp, #0]
   128e6:	9008      	str	r0, [sp, #32]
   128e8:	9901      	ldr	r1, [sp, #4]
   128ea:	9109      	str	r1, [sp, #36]	; 0x24
   128ec:	2200      	movs	r2, #0
   128ee:	9207      	str	r2, [sp, #28]
   128f0:	2201      	movs	r2, #1
   128f2:	9206      	str	r2, [sp, #24]
   128f4:	e007      	b.n	12906 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
   128f6:	9802      	ldr	r0, [sp, #8]
   128f8:	2801      	cmp	r0, #1
   128fa:	d010      	beq.n	1291e <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x9a>
   128fc:	e019      	b.n	12932 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xae>
   128fe:	2000      	movs	r0, #0
   12900:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   12904:	e7f7      	b.n	128f6 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
   12906:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
   1290a:	07c0      	lsls	r0, r0, #31
   1290c:	2800      	cmp	r0, #0
   1290e:	d1f6      	bne.n	128fe <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x7a>
   12910:	e7f1      	b.n	128f6 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
   12912:	9806      	ldr	r0, [sp, #24]
   12914:	9907      	ldr	r1, [sp, #28]
   12916:	9a08      	ldr	r2, [sp, #32]
   12918:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1291a:	b010      	add	sp, #64	; 0x40
   1291c:	bdb0      	pop	{r4, r5, r7, pc}
   1291e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   12922:	07c0      	lsls	r0, r0, #31
   12924:	2800      	cmp	r0, #0
   12926:	d0f4      	beq.n	12912 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
   12928:	e7ff      	b.n	1292a <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xa6>
   1292a:	2000      	movs	r0, #0
   1292c:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   12930:	e7ef      	b.n	12912 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
   12932:	e7ee      	b.n	12912 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>

00012934 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>:
   12934:	b5b0      	push	{r4, r5, r7, lr}
   12936:	b090      	sub	sp, #64	; 0x40
   12938:	469c      	mov	ip, r3
   1293a:	4696      	mov	lr, r2
   1293c:	460c      	mov	r4, r1
   1293e:	4605      	mov	r5, r0
   12940:	9103      	str	r1, [sp, #12]
   12942:	9002      	str	r0, [sp, #8]
   12944:	9305      	str	r3, [sp, #20]
   12946:	9204      	str	r2, [sp, #16]
   12948:	2000      	movs	r0, #0
   1294a:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   1294e:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   12952:	2001      	movs	r0, #1
   12954:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   12958:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   1295c:	9802      	ldr	r0, [sp, #8]
   1295e:	2800      	cmp	r0, #0
   12960:	d001      	beq.n	12966 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x32>
   12962:	e7ff      	b.n	12964 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x30>
   12964:	e004      	b.n	12970 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x3c>
   12966:	2000      	movs	r0, #0
   12968:	9007      	str	r0, [sp, #28]
   1296a:	9006      	str	r0, [sp, #24]
   1296c:	e023      	b.n	129b6 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
   1296e:	defe      	udf	#254	; 0xfe
   12970:	2000      	movs	r0, #0
   12972:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   12976:	9904      	ldr	r1, [sp, #16]
   12978:	9a05      	ldr	r2, [sp, #20]
   1297a:	920f      	str	r2, [sp, #60]	; 0x3c
   1297c:	910e      	str	r1, [sp, #56]	; 0x38
   1297e:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   12982:	920b      	str	r2, [sp, #44]	; 0x2c
   12984:	910a      	str	r1, [sp, #40]	; 0x28
   12986:	980a      	ldr	r0, [sp, #40]	; 0x28
   12988:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1298a:	f003 fa28 	bl	15dde <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>
   1298e:	9101      	str	r1, [sp, #4]
   12990:	9000      	str	r0, [sp, #0]
   12992:	e7ff      	b.n	12994 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x60>
   12994:	9800      	ldr	r0, [sp, #0]
   12996:	9008      	str	r0, [sp, #32]
   12998:	9901      	ldr	r1, [sp, #4]
   1299a:	9109      	str	r1, [sp, #36]	; 0x24
   1299c:	2200      	movs	r2, #0
   1299e:	9207      	str	r2, [sp, #28]
   129a0:	2201      	movs	r2, #1
   129a2:	9206      	str	r2, [sp, #24]
   129a4:	e007      	b.n	129b6 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
   129a6:	9802      	ldr	r0, [sp, #8]
   129a8:	2801      	cmp	r0, #1
   129aa:	d010      	beq.n	129ce <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x9a>
   129ac:	e019      	b.n	129e2 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xae>
   129ae:	2000      	movs	r0, #0
   129b0:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   129b4:	e7f7      	b.n	129a6 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
   129b6:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
   129ba:	07c0      	lsls	r0, r0, #31
   129bc:	2800      	cmp	r0, #0
   129be:	d1f6      	bne.n	129ae <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x7a>
   129c0:	e7f1      	b.n	129a6 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
   129c2:	9806      	ldr	r0, [sp, #24]
   129c4:	9907      	ldr	r1, [sp, #28]
   129c6:	9a08      	ldr	r2, [sp, #32]
   129c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   129ca:	b010      	add	sp, #64	; 0x40
   129cc:	bdb0      	pop	{r4, r5, r7, pc}
   129ce:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   129d2:	07c0      	lsls	r0, r0, #31
   129d4:	2800      	cmp	r0, #0
   129d6:	d0f4      	beq.n	129c2 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
   129d8:	e7ff      	b.n	129da <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xa6>
   129da:	2000      	movs	r0, #0
   129dc:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   129e0:	e7ef      	b.n	129c2 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
   129e2:	e7ee      	b.n	129c2 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>

000129e4 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>:
   129e4:	b084      	sub	sp, #16
   129e6:	460a      	mov	r2, r1
   129e8:	4603      	mov	r3, r0
   129ea:	9103      	str	r1, [sp, #12]
   129ec:	9002      	str	r0, [sp, #8]
   129ee:	b004      	add	sp, #16
   129f0:	4770      	bx	lr

000129f2 <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h0a450d9c4f54993fE>:
   129f2:	b081      	sub	sp, #4
   129f4:	4601      	mov	r1, r0
   129f6:	f88d 0003 	strb.w	r0, [sp, #3]
   129fa:	b2c0      	uxtb	r0, r0
   129fc:	b001      	add	sp, #4
   129fe:	4770      	bx	lr

00012a00 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E>:
   12a00:	b08a      	sub	sp, #40	; 0x28
   12a02:	9107      	str	r1, [sp, #28]
   12a04:	9208      	str	r2, [sp, #32]
   12a06:	f8d0 c000 	ldr.w	ip, [r0]
   12a0a:	f1bc 0f00 	cmp.w	ip, #0
   12a0e:	9305      	str	r3, [sp, #20]
   12a10:	9204      	str	r2, [sp, #16]
   12a12:	9103      	str	r1, [sp, #12]
   12a14:	9002      	str	r0, [sp, #8]
   12a16:	d011      	beq.n	12a3c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E+0x3c>
   12a18:	e7ff      	b.n	12a1a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E+0x1a>
   12a1a:	9802      	ldr	r0, [sp, #8]
   12a1c:	6841      	ldr	r1, [r0, #4]
   12a1e:	9106      	str	r1, [sp, #24]
   12a20:	4669      	mov	r1, sp
   12a22:	9a05      	ldr	r2, [sp, #20]
   12a24:	600a      	str	r2, [r1, #0]
   12a26:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
   12a2a:	f2c0 0301 	movt	r3, #1
   12a2e:	aa06      	add	r2, sp, #24
   12a30:	9803      	ldr	r0, [sp, #12]
   12a32:	9904      	ldr	r1, [sp, #16]
   12a34:	f003 ff86 	bl	16944 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   12a38:	defe      	udf	#254	; 0xfe
   12a3a:	defe      	udf	#254	; 0xfe
   12a3c:	9802      	ldr	r0, [sp, #8]
   12a3e:	6841      	ldr	r1, [r0, #4]
   12a40:	9109      	str	r1, [sp, #36]	; 0x24
   12a42:	6802      	ldr	r2, [r0, #0]
   12a44:	2a00      	cmp	r2, #0
   12a46:	9101      	str	r1, [sp, #4]
   12a48:	d103      	bne.n	12a52 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E+0x52>
   12a4a:	e7ff      	b.n	12a4c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E+0x4c>
   12a4c:	9801      	ldr	r0, [sp, #4]
   12a4e:	b00a      	add	sp, #40	; 0x28
   12a50:	4770      	bx	lr
   12a52:	e7fb      	b.n	12a4c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E+0x4c>

00012a54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>:
    fn le(&self, other: &LevelFilter) -> bool {
   12a54:	b082      	sub	sp, #8
   12a56:	9000      	str	r0, [sp, #0]
   12a58:	9101      	str	r1, [sp, #4]
        *self as usize <= *other as usize
   12a5a:	6800      	ldr	r0, [r0, #0]
   12a5c:	6809      	ldr	r1, [r1, #0]
   12a5e:	2200      	movs	r2, #0
   12a60:	4288      	cmp	r0, r1
   12a62:	bf98      	it	ls
   12a64:	2201      	movls	r2, #1
    }
   12a66:	4610      	mov	r0, r2
   12a68:	b002      	add	sp, #8
   12a6a:	4770      	bx	lr

00012a6c <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>:
   12a6c:	b580      	push	{r7, lr}
   12a6e:	b086      	sub	sp, #24
   12a70:	460a      	mov	r2, r1
   12a72:	9004      	str	r0, [sp, #16]
   12a74:	f88d 1017 	strb.w	r1, [sp, #23]
   12a78:	9203      	str	r2, [sp, #12]
   12a7a:	f7fb ff6c 	bl	e956 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
   12a7e:	9002      	str	r0, [sp, #8]
   12a80:	e7ff      	b.n	12a82 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E+0x16>
   12a82:	9802      	ldr	r0, [sp, #8]
   12a84:	9903      	ldr	r1, [sp, #12]
   12a86:	f7fb ff7f 	bl	e988 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
   12a8a:	9001      	str	r0, [sp, #4]
   12a8c:	e7ff      	b.n	12a8e <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E+0x22>
   12a8e:	9801      	ldr	r0, [sp, #4]
   12a90:	b006      	add	sp, #24
   12a92:	bd80      	pop	{r7, pc}

00012a94 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E>:
   12a94:	b580      	push	{r7, lr}
   12a96:	b086      	sub	sp, #24
   12a98:	460a      	mov	r2, r1
   12a9a:	4603      	mov	r3, r0
   12a9c:	f88d 0014 	strb.w	r0, [sp, #20]
   12aa0:	f88d 1015 	strb.w	r1, [sp, #21]
   12aa4:	9203      	str	r2, [sp, #12]
   12aa6:	9302      	str	r3, [sp, #8]
   12aa8:	f000 f865 	bl	12b76 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h86687d23966cf72aE>
   12aac:	9001      	str	r0, [sp, #4]
   12aae:	9100      	str	r1, [sp, #0]
   12ab0:	e7ff      	b.n	12ab2 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E+0x1e>
   12ab2:	9801      	ldr	r0, [sp, #4]
   12ab4:	f88d 0016 	strb.w	r0, [sp, #22]
   12ab8:	9900      	ldr	r1, [sp, #0]
   12aba:	f001 0201 	and.w	r2, r1, #1
   12abe:	f88d 2017 	strb.w	r2, [sp, #23]
   12ac2:	2a00      	cmp	r2, #0
   12ac4:	d107      	bne.n	12ad6 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E+0x42>
   12ac6:	e7ff      	b.n	12ac8 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E+0x34>
   12ac8:	9801      	ldr	r0, [sp, #4]
   12aca:	f88d 0011 	strb.w	r0, [sp, #17]
   12ace:	2101      	movs	r1, #1
   12ad0:	f88d 1010 	strb.w	r1, [sp, #16]
   12ad4:	e003      	b.n	12ade <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E+0x4a>
   12ad6:	2000      	movs	r0, #0
   12ad8:	f88d 0010 	strb.w	r0, [sp, #16]
   12adc:	e7ff      	b.n	12ade <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E+0x4a>
   12ade:	f89d 0010 	ldrb.w	r0, [sp, #16]
   12ae2:	f89d 1011 	ldrb.w	r1, [sp, #17]
   12ae6:	b006      	add	sp, #24
   12ae8:	bd80      	pop	{r7, pc}

00012aea <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17hac8dfc997b9c24ecE>:
   12aea:	b082      	sub	sp, #8
   12aec:	460a      	mov	r2, r1
   12aee:	4603      	mov	r3, r0
   12af0:	f88d 0005 	strb.w	r0, [sp, #5]
   12af4:	f88d 1006 	strb.w	r1, [sp, #6]
   12af8:	4408      	add	r0, r1
   12afa:	f88d 0007 	strb.w	r0, [sp, #7]
   12afe:	f89d 0007 	ldrb.w	r0, [sp, #7]
   12b02:	9000      	str	r0, [sp, #0]
   12b04:	e7ff      	b.n	12b06 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17hac8dfc997b9c24ecE+0x1c>
   12b06:	9800      	ldr	r0, [sp, #0]
   12b08:	b002      	add	sp, #8
   12b0a:	4770      	bx	lr

00012b0c <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17h31de2c523da77629E>:
   12b0c:	b084      	sub	sp, #16
   12b0e:	4602      	mov	r2, r0
   12b10:	f88d 0007 	strb.w	r0, [sp, #7]
   12b14:	9102      	str	r1, [sp, #8]
   12b16:	f001 0107 	and.w	r1, r1, #7
   12b1a:	4088      	lsls	r0, r1
   12b1c:	f88d 000f 	strb.w	r0, [sp, #15]
   12b20:	f89d 000f 	ldrb.w	r0, [sp, #15]
   12b24:	9000      	str	r0, [sp, #0]
   12b26:	e7ff      	b.n	12b28 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17h31de2c523da77629E+0x1c>
   12b28:	9800      	ldr	r0, [sp, #0]
   12b2a:	b004      	add	sp, #16
   12b2c:	4770      	bx	lr

00012b2e <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hda13cf3283d09c50E>:
   12b2e:	b084      	sub	sp, #16
   12b30:	b2c2      	uxtb	r2, r0
   12b32:	4603      	mov	r3, r0
   12b34:	f88d 0007 	strb.w	r0, [sp, #7]
   12b38:	9102      	str	r1, [sp, #8]
   12b3a:	f001 0007 	and.w	r0, r1, #7
   12b3e:	fa22 f000 	lsr.w	r0, r2, r0
   12b42:	f88d 000f 	strb.w	r0, [sp, #15]
   12b46:	f89d 000f 	ldrb.w	r0, [sp, #15]
   12b4a:	9000      	str	r0, [sp, #0]
   12b4c:	e7ff      	b.n	12b4e <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hda13cf3283d09c50E+0x20>
   12b4e:	9800      	ldr	r0, [sp, #0]
   12b50:	b004      	add	sp, #16
   12b52:	4770      	bx	lr

00012b54 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h4a79113dcdba2ecfE>:
   12b54:	b082      	sub	sp, #8
   12b56:	460a      	mov	r2, r1
   12b58:	4603      	mov	r3, r0
   12b5a:	f88d 0005 	strb.w	r0, [sp, #5]
   12b5e:	f88d 1006 	strb.w	r1, [sp, #6]
   12b62:	1a40      	subs	r0, r0, r1
   12b64:	f88d 0007 	strb.w	r0, [sp, #7]
   12b68:	f89d 0007 	ldrb.w	r0, [sp, #7]
   12b6c:	9000      	str	r0, [sp, #0]
   12b6e:	e7ff      	b.n	12b70 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h4a79113dcdba2ecfE+0x1c>
   12b70:	9800      	ldr	r0, [sp, #0]
   12b72:	b002      	add	sp, #8
   12b74:	4770      	bx	lr

00012b76 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h86687d23966cf72aE>:
   12b76:	b084      	sub	sp, #16
   12b78:	b2c2      	uxtb	r2, r0
   12b7a:	460b      	mov	r3, r1
   12b7c:	4684      	mov	ip, r0
   12b7e:	f88d 000a 	strb.w	r0, [sp, #10]
   12b82:	f88d 100b 	strb.w	r1, [sp, #11]
   12b86:	fa52 f081 	uxtab	r0, r2, r1
   12b8a:	b2c1      	uxtb	r1, r0
   12b8c:	1a09      	subs	r1, r1, r0
   12b8e:	bf18      	it	ne
   12b90:	2101      	movne	r1, #1
   12b92:	f88d 000c 	strb.w	r0, [sp, #12]
   12b96:	f88d 100d 	strb.w	r1, [sp, #13]
   12b9a:	f89d 000c 	ldrb.w	r0, [sp, #12]
   12b9e:	f89d 100d 	ldrb.w	r1, [sp, #13]
   12ba2:	9001      	str	r0, [sp, #4]
   12ba4:	9100      	str	r1, [sp, #0]
   12ba6:	e7ff      	b.n	12ba8 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h86687d23966cf72aE+0x32>
   12ba8:	9801      	ldr	r0, [sp, #4]
   12baa:	f88d 000e 	strb.w	r0, [sp, #14]
   12bae:	9900      	ldr	r1, [sp, #0]
   12bb0:	f001 0201 	and.w	r2, r1, #1
   12bb4:	f88d 200f 	strb.w	r2, [sp, #15]
   12bb8:	f88d 0008 	strb.w	r0, [sp, #8]
   12bbc:	f88d 2009 	strb.w	r2, [sp, #9]
   12bc0:	f89d 0008 	ldrb.w	r0, [sp, #8]
   12bc4:	f89d 1009 	ldrb.w	r1, [sp, #9]
   12bc8:	b004      	add	sp, #16
   12bca:	4770      	bx	lr

00012bcc <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h6530387af31222c2E>:
   12bcc:	b580      	push	{r7, lr}
   12bce:	b084      	sub	sp, #16
   12bd0:	b2ca      	uxtb	r2, r1
   12bd2:	b2c3      	uxtb	r3, r0
   12bd4:	468c      	mov	ip, r1
   12bd6:	4686      	mov	lr, r0
   12bd8:	f88d 000a 	strb.w	r0, [sp, #10]
   12bdc:	f88d 100b 	strb.w	r1, [sp, #11]
   12be0:	1a98      	subs	r0, r3, r2
   12be2:	b2c1      	uxtb	r1, r0
   12be4:	1a09      	subs	r1, r1, r0
   12be6:	bf18      	it	ne
   12be8:	2101      	movne	r1, #1
   12bea:	f88d 000c 	strb.w	r0, [sp, #12]
   12bee:	f88d 100d 	strb.w	r1, [sp, #13]
   12bf2:	f89d 000c 	ldrb.w	r0, [sp, #12]
   12bf6:	f89d 100d 	ldrb.w	r1, [sp, #13]
   12bfa:	9001      	str	r0, [sp, #4]
   12bfc:	9100      	str	r1, [sp, #0]
   12bfe:	e7ff      	b.n	12c00 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h6530387af31222c2E+0x34>
   12c00:	9801      	ldr	r0, [sp, #4]
   12c02:	f88d 000e 	strb.w	r0, [sp, #14]
   12c06:	9900      	ldr	r1, [sp, #0]
   12c08:	f001 0201 	and.w	r2, r1, #1
   12c0c:	f88d 200f 	strb.w	r2, [sp, #15]
   12c10:	f88d 0008 	strb.w	r0, [sp, #8]
   12c14:	f88d 2009 	strb.w	r2, [sp, #9]
   12c18:	f89d 0008 	ldrb.w	r0, [sp, #8]
   12c1c:	f89d 1009 	ldrb.w	r1, [sp, #9]
   12c20:	b004      	add	sp, #16
   12c22:	bd80      	pop	{r7, pc}

00012c24 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hed5f6279c30b1a08E>:
   12c24:	b083      	sub	sp, #12
   12c26:	460a      	mov	r2, r1
   12c28:	4603      	mov	r3, r0
   12c2a:	f8ad 0006 	strh.w	r0, [sp, #6]
   12c2e:	f8ad 1008 	strh.w	r1, [sp, #8]
   12c32:	4408      	add	r0, r1
   12c34:	f8ad 000a 	strh.w	r0, [sp, #10]
   12c38:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   12c3c:	9000      	str	r0, [sp, #0]
   12c3e:	e7ff      	b.n	12c40 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hed5f6279c30b1a08E+0x1c>
   12c40:	9800      	ldr	r0, [sp, #0]
   12c42:	b003      	add	sp, #12
   12c44:	4770      	bx	lr

00012c46 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hceb9f03c67b66808E>:
   12c46:	b083      	sub	sp, #12
   12c48:	460a      	mov	r2, r1
   12c4a:	4603      	mov	r3, r0
   12c4c:	f8ad 0006 	strh.w	r0, [sp, #6]
   12c50:	f8ad 1008 	strh.w	r1, [sp, #8]
   12c54:	1a40      	subs	r0, r0, r1
   12c56:	f8ad 000a 	strh.w	r0, [sp, #10]
   12c5a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   12c5e:	9000      	str	r0, [sp, #0]
   12c60:	e7ff      	b.n	12c62 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hceb9f03c67b66808E+0x1c>
   12c62:	9800      	ldr	r0, [sp, #0]
   12c64:	b003      	add	sp, #12
   12c66:	4770      	bx	lr

00012c68 <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h7cd75c3bdc89aa73E>:
   12c68:	b5b0      	push	{r4, r5, r7, lr}
   12c6a:	b088      	sub	sp, #32
   12c6c:	469c      	mov	ip, r3
   12c6e:	4696      	mov	lr, r2
   12c70:	460c      	mov	r4, r1
   12c72:	4605      	mov	r5, r0
   12c74:	9103      	str	r1, [sp, #12]
   12c76:	9002      	str	r0, [sp, #8]
   12c78:	9305      	str	r3, [sp, #20]
   12c7a:	9204      	str	r2, [sp, #16]
   12c7c:	1a80      	subs	r0, r0, r2
   12c7e:	eb61 0103 	sbc.w	r1, r1, r3
   12c82:	9107      	str	r1, [sp, #28]
   12c84:	9006      	str	r0, [sp, #24]
   12c86:	9806      	ldr	r0, [sp, #24]
   12c88:	9907      	ldr	r1, [sp, #28]
   12c8a:	9001      	str	r0, [sp, #4]
   12c8c:	9100      	str	r1, [sp, #0]
   12c8e:	e7ff      	b.n	12c90 <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h7cd75c3bdc89aa73E+0x28>
   12c90:	9801      	ldr	r0, [sp, #4]
   12c92:	9900      	ldr	r1, [sp, #0]
   12c94:	b008      	add	sp, #32
   12c96:	bdb0      	pop	{r4, r5, r7, pc}

00012c98 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E>:
   12c98:	b580      	push	{r7, lr}
   12c9a:	b086      	sub	sp, #24
   12c9c:	9005      	str	r0, [sp, #20]
   12c9e:	2100      	movs	r1, #0
   12ca0:	f88d 1013 	strb.w	r1, [sp, #19]
   12ca4:	1c41      	adds	r1, r0, #1
   12ca6:	9002      	str	r0, [sp, #8]
   12ca8:	f003 f8a0 	bl	15dec <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17h751b32771630458fE>
   12cac:	9001      	str	r0, [sp, #4]
   12cae:	e7ff      	b.n	12cb0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x18>
   12cb0:	9801      	ldr	r0, [sp, #4]
   12cb2:	07c1      	lsls	r1, r0, #31
   12cb4:	2900      	cmp	r1, #0
   12cb6:	d104      	bne.n	12cc2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x2a>
   12cb8:	e7ff      	b.n	12cba <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x22>
   12cba:	2000      	movs	r0, #0
   12cbc:	f88d 000c 	strb.w	r0, [sp, #12]
   12cc0:	e02c      	b.n	12d1c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x84>
   12cc2:	2001      	movs	r0, #1
   12cc4:	f88d 0013 	strb.w	r0, [sp, #19]
   12cc8:	9902      	ldr	r1, [sp, #8]
   12cca:	9000      	str	r0, [sp, #0]
   12ccc:	4608      	mov	r0, r1
   12cce:	9900      	ldr	r1, [sp, #0]
   12cd0:	f000 f86e 	bl	12db0 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E>
   12cd4:	f88d 1011 	strb.w	r1, [sp, #17]
   12cd8:	f88d 0010 	strb.w	r0, [sp, #16]
   12cdc:	e7ff      	b.n	12cde <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x46>
   12cde:	f89d 0010 	ldrb.w	r0, [sp, #16]
   12ce2:	07c0      	lsls	r0, r0, #31
   12ce4:	2800      	cmp	r0, #0
   12ce6:	d104      	bne.n	12cf2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x5a>
   12ce8:	e7ff      	b.n	12cea <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x52>
   12cea:	2000      	movs	r0, #0
   12cec:	f88d 000c 	strb.w	r0, [sp, #12]
   12cf0:	e029      	b.n	12d46 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0xae>
   12cf2:	2000      	movs	r0, #0
   12cf4:	f88d 0013 	strb.w	r0, [sp, #19]
   12cf8:	f89d 0011 	ldrb.w	r0, [sp, #17]
   12cfc:	f88d 0012 	strb.w	r0, [sp, #18]
   12d00:	f10d 0012 	add.w	r0, sp, #18
   12d04:	9902      	ldr	r1, [sp, #8]
   12d06:	f000 f886 	bl	12e16 <_ZN4core3mem4swap17h9f9b2c00c891c39bE>
   12d0a:	e7ff      	b.n	12d0c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x74>
   12d0c:	f89d 0012 	ldrb.w	r0, [sp, #18]
   12d10:	f88d 000d 	strb.w	r0, [sp, #13]
   12d14:	2001      	movs	r0, #1
   12d16:	f88d 000c 	strb.w	r0, [sp, #12]
   12d1a:	e014      	b.n	12d46 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0xae>
   12d1c:	f89d 000c 	ldrb.w	r0, [sp, #12]
   12d20:	f89d 100d 	ldrb.w	r1, [sp, #13]
   12d24:	b006      	add	sp, #24
   12d26:	bd80      	pop	{r7, pc}
   12d28:	2000      	movs	r0, #0
   12d2a:	f88d 0013 	strb.w	r0, [sp, #19]
   12d2e:	e7f5      	b.n	12d1c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x84>
   12d30:	f89d 0013 	ldrb.w	r0, [sp, #19]
   12d34:	07c0      	lsls	r0, r0, #31
   12d36:	2800      	cmp	r0, #0
   12d38:	d0f6      	beq.n	12d28 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x90>
   12d3a:	e7ff      	b.n	12d3c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0xa4>
   12d3c:	2000      	movs	r0, #0
   12d3e:	f88d 0013 	strb.w	r0, [sp, #19]
   12d42:	e7f1      	b.n	12d28 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x90>
   12d44:	e7f0      	b.n	12d28 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x90>
   12d46:	f89d 0010 	ldrb.w	r0, [sp, #16]
   12d4a:	07c0      	lsls	r0, r0, #31
   12d4c:	2800      	cmp	r0, #0
   12d4e:	d1ef      	bne.n	12d30 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x98>
   12d50:	e7f8      	b.n	12d44 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0xac>

00012d52 <_ZN4core4iter6traits8iterator8Iterator3map17h39af250ef60ec852E>:
   12d52:	b580      	push	{r7, lr}
   12d54:	b084      	sub	sp, #16
   12d56:	9101      	str	r1, [sp, #4]
   12d58:	9202      	str	r2, [sp, #8]
   12d5a:	9303      	str	r3, [sp, #12]
   12d5c:	f7fa ff2a 	bl	dbb4 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h47809268ca43aa27E>
   12d60:	e7ff      	b.n	12d62 <_ZN4core4iter6traits8iterator8Iterator3map17h39af250ef60ec852E+0x10>
   12d62:	b004      	add	sp, #16
   12d64:	bd80      	pop	{r7, pc}

00012d66 <_ZN4core4iter6traits8iterator8Iterator3map17hf6992577e3374dfdE>:
   12d66:	b580      	push	{r7, lr}
   12d68:	b084      	sub	sp, #16
   12d6a:	9101      	str	r1, [sp, #4]
   12d6c:	9202      	str	r2, [sp, #8]
   12d6e:	9303      	str	r3, [sp, #12]
   12d70:	f7fa ff17 	bl	dba2 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h21a9e3dc4962ad94E>
   12d74:	e7ff      	b.n	12d76 <_ZN4core4iter6traits8iterator8Iterator3map17hf6992577e3374dfdE+0x10>
   12d76:	b004      	add	sp, #16
   12d78:	bd80      	pop	{r7, pc}

00012d7a <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hc518c90d18182e65E>:
   12d7a:	b081      	sub	sp, #4
   12d7c:	460a      	mov	r2, r1
   12d7e:	4603      	mov	r3, r0
   12d80:	f88d 0000 	strb.w	r0, [sp]
   12d84:	f88d 1001 	strb.w	r1, [sp, #1]
   12d88:	b001      	add	sp, #4
   12d8a:	4770      	bx	lr

00012d8c <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h2d7145d37f608201E>:
   12d8c:	b084      	sub	sp, #16
   12d8e:	9000      	str	r0, [sp, #0]
   12d90:	9101      	str	r1, [sp, #4]
   12d92:	9102      	str	r1, [sp, #8]
   12d94:	9003      	str	r0, [sp, #12]
   12d96:	6802      	ldr	r2, [r0, #0]
   12d98:	6840      	ldr	r0, [r0, #4]
   12d9a:	680b      	ldr	r3, [r1, #0]
   12d9c:	6849      	ldr	r1, [r1, #4]
   12d9e:	4048      	eors	r0, r1
   12da0:	ea82 0103 	eor.w	r1, r2, r3
   12da4:	4308      	orrs	r0, r1
   12da6:	fab0 f080 	clz	r0, r0
   12daa:	0940      	lsrs	r0, r0, #5
   12dac:	b004      	add	sp, #16
   12dae:	4770      	bx	lr

00012db0 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E>:
   12db0:	b580      	push	{r7, lr}
   12db2:	b088      	sub	sp, #32
   12db4:	9005      	str	r0, [sp, #20]
   12db6:	9106      	str	r1, [sp, #24]
   12db8:	9002      	str	r0, [sp, #8]
   12dba:	4608      	mov	r0, r1
   12dbc:	f000 f834 	bl	12e28 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE>
   12dc0:	f88d 1011 	strb.w	r1, [sp, #17]
   12dc4:	f88d 0010 	strb.w	r0, [sp, #16]
   12dc8:	e7ff      	b.n	12dca <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E+0x1a>
   12dca:	f89d 0010 	ldrb.w	r0, [sp, #16]
   12dce:	07c1      	lsls	r1, r0, #31
   12dd0:	2900      	cmp	r1, #0
   12dd2:	d005      	beq.n	12de0 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E+0x30>
   12dd4:	e7ff      	b.n	12dd6 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E+0x26>
   12dd6:	2000      	movs	r0, #0
   12dd8:	f88d 000c 	strb.w	r0, [sp, #12]
   12ddc:	e011      	b.n	12e02 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E+0x52>
   12dde:	defe      	udf	#254	; 0xfe
   12de0:	f89d 0011 	ldrb.w	r0, [sp, #17]
   12de4:	f88d 001f 	strb.w	r0, [sp, #31]
   12de8:	9902      	ldr	r1, [sp, #8]
   12dea:	780a      	ldrb	r2, [r1, #0]
   12dec:	9001      	str	r0, [sp, #4]
   12dee:	4610      	mov	r0, r2
   12df0:	9901      	ldr	r1, [sp, #4]
   12df2:	f7ff fe4f 	bl	12a94 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E>
   12df6:	f88d 100d 	strb.w	r1, [sp, #13]
   12dfa:	f88d 000c 	strb.w	r0, [sp, #12]
   12dfe:	e7ff      	b.n	12e00 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E+0x50>
   12e00:	e7ff      	b.n	12e02 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E+0x52>
   12e02:	f89d 000c 	ldrb.w	r0, [sp, #12]
   12e06:	f89d 100d 	ldrb.w	r1, [sp, #13]
   12e0a:	b008      	add	sp, #32
   12e0c:	bd80      	pop	{r7, pc}

00012e0e <_ZN4core3ptr13drop_in_place17h8a25dee97102e103E>:
   12e0e:	b081      	sub	sp, #4
   12e10:	9000      	str	r0, [sp, #0]
   12e12:	b001      	add	sp, #4
   12e14:	4770      	bx	lr

00012e16 <_ZN4core3mem4swap17h9f9b2c00c891c39bE>:
   12e16:	b580      	push	{r7, lr}
   12e18:	b082      	sub	sp, #8
   12e1a:	9000      	str	r0, [sp, #0]
   12e1c:	9101      	str	r1, [sp, #4]
   12e1e:	f003 f80c 	bl	15e3a <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E>
   12e22:	e7ff      	b.n	12e24 <_ZN4core3mem4swap17h9f9b2c00c891c39bE+0xe>
   12e24:	b002      	add	sp, #8
   12e26:	bd80      	pop	{r7, pc}

00012e28 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE>:
   12e28:	b083      	sub	sp, #12
   12e2a:	9002      	str	r0, [sp, #8]
   12e2c:	9000      	str	r0, [sp, #0]
   12e2e:	e7ff      	b.n	12e30 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE+0x8>
   12e30:	9800      	ldr	r0, [sp, #0]
   12e32:	28ff      	cmp	r0, #255	; 0xff
   12e34:	d807      	bhi.n	12e46 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE+0x1e>
   12e36:	e7ff      	b.n	12e38 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE+0x10>
   12e38:	9800      	ldr	r0, [sp, #0]
   12e3a:	f88d 0005 	strb.w	r0, [sp, #5]
   12e3e:	2100      	movs	r1, #0
   12e40:	f88d 1004 	strb.w	r1, [sp, #4]
   12e44:	e003      	b.n	12e4e <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE+0x26>
   12e46:	2001      	movs	r0, #1
   12e48:	f88d 0004 	strb.w	r0, [sp, #4]
   12e4c:	e7ff      	b.n	12e4e <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE+0x26>
   12e4e:	f89d 0004 	ldrb.w	r0, [sp, #4]
   12e52:	f89d 1005 	ldrb.w	r1, [sp, #5]
   12e56:	b003      	add	sp, #12
   12e58:	4770      	bx	lr

00012e5a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>:
   12e5a:	b084      	sub	sp, #16
   12e5c:	9001      	str	r0, [sp, #4]
   12e5e:	9102      	str	r1, [sp, #8]
   12e60:	4408      	add	r0, r1
   12e62:	9003      	str	r0, [sp, #12]
   12e64:	9803      	ldr	r0, [sp, #12]
   12e66:	9000      	str	r0, [sp, #0]
   12e68:	e7ff      	b.n	12e6a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E+0x10>
   12e6a:	9800      	ldr	r0, [sp, #0]
   12e6c:	b004      	add	sp, #16
   12e6e:	4770      	bx	lr

00012e70 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>:
   12e70:	b082      	sub	sp, #8
   12e72:	9001      	str	r0, [sp, #4]
   12e74:	9000      	str	r0, [sp, #0]
   12e76:	e7ff      	b.n	12e78 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE+0x8>
   12e78:	9800      	ldr	r0, [sp, #0]
   12e7a:	fab0 f180 	clz	r1, r0
   12e7e:	0948      	lsrs	r0, r1, #5
   12e80:	b002      	add	sp, #8
   12e82:	4770      	bx	lr

00012e84 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>:
   12e84:	b082      	sub	sp, #8
   12e86:	9001      	str	r0, [sp, #4]
   12e88:	9000      	str	r0, [sp, #0]
   12e8a:	9800      	ldr	r0, [sp, #0]
   12e8c:	b002      	add	sp, #8
   12e8e:	4770      	bx	lr

00012e90 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>:
   12e90:	b081      	sub	sp, #4
   12e92:	9000      	str	r0, [sp, #0]
   12e94:	b001      	add	sp, #4
   12e96:	4770      	bx	lr

00012e98 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>:
   12e98:	b580      	push	{r7, lr}
   12e9a:	b084      	sub	sp, #16
   12e9c:	9002      	str	r0, [sp, #8]
   12e9e:	9103      	str	r1, [sp, #12]
   12ea0:	f000 f805 	bl	12eae <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   12ea4:	9001      	str	r0, [sp, #4]
   12ea6:	e7ff      	b.n	12ea8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E+0x10>
   12ea8:	9801      	ldr	r0, [sp, #4]
   12eaa:	b004      	add	sp, #16
   12eac:	bd80      	pop	{r7, pc}

00012eae <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>:
   12eae:	b084      	sub	sp, #16
   12eb0:	9001      	str	r0, [sp, #4]
   12eb2:	9102      	str	r1, [sp, #8]
   12eb4:	4408      	add	r0, r1
   12eb6:	9003      	str	r0, [sp, #12]
   12eb8:	9803      	ldr	r0, [sp, #12]
   12eba:	9000      	str	r0, [sp, #0]
   12ebc:	e7ff      	b.n	12ebe <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E+0x10>
   12ebe:	9800      	ldr	r0, [sp, #0]
   12ec0:	b004      	add	sp, #16
   12ec2:	4770      	bx	lr

00012ec4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>:
   12ec4:	b082      	sub	sp, #8
   12ec6:	9001      	str	r0, [sp, #4]
   12ec8:	9000      	str	r0, [sp, #0]
   12eca:	e7ff      	b.n	12ecc <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE+0x8>
   12ecc:	9800      	ldr	r0, [sp, #0]
   12ece:	fab0 f180 	clz	r1, r0
   12ed2:	0948      	lsrs	r0, r1, #5
   12ed4:	b002      	add	sp, #8
   12ed6:	4770      	bx	lr

00012ed8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>:
   12ed8:	b580      	push	{r7, lr}
   12eda:	b090      	sub	sp, #64	; 0x40
   12edc:	900c      	str	r0, [sp, #48]	; 0x30
   12ede:	910d      	str	r1, [sp, #52]	; 0x34
   12ee0:	9007      	str	r0, [sp, #28]
   12ee2:	9106      	str	r1, [sp, #24]
   12ee4:	f000 f935 	bl	13152 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>
   12ee8:	4601      	mov	r1, r0
   12eea:	900e      	str	r0, [sp, #56]	; 0x38
   12eec:	9105      	str	r1, [sp, #20]
   12eee:	e7ff      	b.n	12ef0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x18>
   12ef0:	9805      	ldr	r0, [sp, #20]
   12ef2:	f7ff ffe7 	bl	12ec4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   12ef6:	e7ff      	b.n	12ef8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x20>
   12ef8:	e7ff      	b.n	12efa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x22>
   12efa:	2001      	movs	r0, #1
   12efc:	900f      	str	r0, [sp, #60]	; 0x3c
   12efe:	980f      	ldr	r0, [sp, #60]	; 0x3c
   12f00:	9004      	str	r0, [sp, #16]
   12f02:	e7ff      	b.n	12f04 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x2c>
   12f04:	9804      	ldr	r0, [sp, #16]
   12f06:	2800      	cmp	r0, #0
   12f08:	d006      	beq.n	12f18 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x40>
   12f0a:	e7ff      	b.n	12f0c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x34>
   12f0c:	9807      	ldr	r0, [sp, #28]
   12f0e:	9906      	ldr	r1, [sp, #24]
   12f10:	f000 f917 	bl	13142 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   12f14:	9003      	str	r0, [sp, #12]
   12f16:	e00e      	b.n	12f36 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x5e>
   12f18:	9807      	ldr	r0, [sp, #28]
   12f1a:	9906      	ldr	r1, [sp, #24]
   12f1c:	f000 f911 	bl	13142 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   12f20:	9002      	str	r0, [sp, #8]
   12f22:	e7ff      	b.n	12f24 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x4c>
   12f24:	9805      	ldr	r0, [sp, #20]
   12f26:	9902      	ldr	r1, [sp, #8]
   12f28:	f7ff ffb6 	bl	12e98 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>
   12f2c:	9001      	str	r0, [sp, #4]
   12f2e:	e7ff      	b.n	12f30 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x58>
   12f30:	9801      	ldr	r0, [sp, #4]
   12f32:	900a      	str	r0, [sp, #40]	; 0x28
   12f34:	e006      	b.n	12f44 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   12f36:	9805      	ldr	r0, [sp, #20]
   12f38:	9903      	ldr	r1, [sp, #12]
   12f3a:	f000 f8df 	bl	130fc <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>
   12f3e:	900a      	str	r0, [sp, #40]	; 0x28
   12f40:	e7ff      	b.n	12f42 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6a>
   12f42:	e7ff      	b.n	12f44 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   12f44:	9805      	ldr	r0, [sp, #20]
   12f46:	f7ff ff9d 	bl	12e84 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   12f4a:	9000      	str	r0, [sp, #0]
   12f4c:	e7ff      	b.n	12f4e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x76>
   12f4e:	980a      	ldr	r0, [sp, #40]	; 0x28
   12f50:	9900      	ldr	r1, [sp, #0]
   12f52:	9108      	str	r1, [sp, #32]
   12f54:	9009      	str	r0, [sp, #36]	; 0x24
   12f56:	9808      	ldr	r0, [sp, #32]
   12f58:	9909      	ldr	r1, [sp, #36]	; 0x24
   12f5a:	b010      	add	sp, #64	; 0x40
   12f5c:	bd80      	pop	{r7, pc}

00012f5e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>:
   12f5e:	b081      	sub	sp, #4
   12f60:	b001      	add	sp, #4
   12f62:	4770      	bx	lr

00012f64 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>:
   12f64:	b580      	push	{r7, lr}
   12f66:	b08e      	sub	sp, #56	; 0x38
   12f68:	9007      	str	r0, [sp, #28]
   12f6a:	6801      	ldr	r1, [r0, #0]
   12f6c:	9005      	str	r0, [sp, #20]
   12f6e:	4608      	mov	r0, r1
   12f70:	f7ff ff8e 	bl	12e90 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   12f74:	9004      	str	r0, [sp, #16]
   12f76:	e7ff      	b.n	12f78 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x14>
   12f78:	9804      	ldr	r0, [sp, #16]
   12f7a:	f7ff ff79 	bl	12e70 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>
   12f7e:	e7ff      	b.n	12f80 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1c>
   12f80:	e7ff      	b.n	12f82 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1e>
   12f82:	2001      	movs	r0, #1
   12f84:	9008      	str	r0, [sp, #32]
   12f86:	9808      	ldr	r0, [sp, #32]
   12f88:	9003      	str	r0, [sp, #12]
   12f8a:	e7ff      	b.n	12f8c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x28>
   12f8c:	9803      	ldr	r0, [sp, #12]
   12f8e:	2800      	cmp	r0, #0
   12f90:	d007      	beq.n	12fa2 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   12f92:	e7ff      	b.n	12f94 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x30>
   12f94:	9805      	ldr	r0, [sp, #20]
   12f96:	6840      	ldr	r0, [r0, #4]
   12f98:	f7ff ff94 	bl	12ec4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   12f9c:	e7ff      	b.n	12f9e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3a>
   12f9e:	e7ff      	b.n	12fa0 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3c>
   12fa0:	e7ff      	b.n	12fa2 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   12fa2:	9805      	ldr	r0, [sp, #20]
   12fa4:	6800      	ldr	r0, [r0, #0]
   12fa6:	f7ff ff73 	bl	12e90 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   12faa:	9002      	str	r0, [sp, #8]
   12fac:	e7ff      	b.n	12fae <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x4a>
   12fae:	9805      	ldr	r0, [sp, #20]
   12fb0:	6841      	ldr	r1, [r0, #4]
   12fb2:	9a02      	ldr	r2, [sp, #8]
   12fb4:	428a      	cmp	r2, r1
   12fb6:	d02e      	beq.n	13016 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb2>
   12fb8:	e7ff      	b.n	12fba <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x56>
   12fba:	9805      	ldr	r0, [sp, #20]
   12fbc:	900a      	str	r0, [sp, #40]	; 0x28
   12fbe:	2101      	movs	r1, #1
   12fc0:	910b      	str	r1, [sp, #44]	; 0x2c
   12fc2:	910d      	str	r1, [sp, #52]	; 0x34
   12fc4:	990d      	ldr	r1, [sp, #52]	; 0x34
   12fc6:	2900      	cmp	r1, #0
   12fc8:	d015      	beq.n	12ff6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x92>
   12fca:	e7ff      	b.n	12fcc <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x68>
   12fcc:	9805      	ldr	r0, [sp, #20]
   12fce:	6800      	ldr	r0, [r0, #0]
   12fd0:	f7ff ff5e 	bl	12e90 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   12fd4:	900c      	str	r0, [sp, #48]	; 0x30
   12fd6:	9905      	ldr	r1, [sp, #20]
   12fd8:	680a      	ldr	r2, [r1, #0]
   12fda:	9001      	str	r0, [sp, #4]
   12fdc:	4610      	mov	r0, r2
   12fde:	f7ff ff57 	bl	12e90 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   12fe2:	2101      	movs	r1, #1
   12fe4:	f7ff ff39 	bl	12e5a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>
   12fe8:	f7ff ff4c 	bl	12e84 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   12fec:	9905      	ldr	r1, [sp, #20]
   12fee:	6008      	str	r0, [r1, #0]
   12ff0:	9801      	ldr	r0, [sp, #4]
   12ff2:	9009      	str	r0, [sp, #36]	; 0x24
   12ff4:	e00c      	b.n	13010 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   12ff6:	9805      	ldr	r0, [sp, #20]
   12ff8:	6840      	ldr	r0, [r0, #4]
   12ffa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12ffe:	f7ff ff56 	bl	12eae <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   13002:	9905      	ldr	r1, [sp, #20]
   13004:	6048      	str	r0, [r1, #4]
   13006:	6808      	ldr	r0, [r1, #0]
   13008:	f7ff ff42 	bl	12e90 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   1300c:	9009      	str	r0, [sp, #36]	; 0x24
   1300e:	e7ff      	b.n	13010 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   13010:	9809      	ldr	r0, [sp, #36]	; 0x24
   13012:	9000      	str	r0, [sp, #0]
   13014:	e002      	b.n	1301c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb8>
   13016:	2000      	movs	r0, #0
   13018:	9006      	str	r0, [sp, #24]
   1301a:	e002      	b.n	13022 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   1301c:	9800      	ldr	r0, [sp, #0]
   1301e:	9006      	str	r0, [sp, #24]
   13020:	e7ff      	b.n	13022 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   13022:	9806      	ldr	r0, [sp, #24]
   13024:	b00e      	add	sp, #56	; 0x38
   13026:	bd80      	pop	{r7, pc}

00013028 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>:
   13028:	b081      	sub	sp, #4
   1302a:	b001      	add	sp, #4
   1302c:	4770      	bx	lr

0001302e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E>:
   1302e:	b580      	push	{r7, lr}
   13030:	b084      	sub	sp, #16
   13032:	9002      	str	r0, [sp, #8]
   13034:	9103      	str	r1, [sp, #12]
   13036:	6800      	ldr	r0, [r0, #0]
   13038:	f000 f81c 	bl	13074 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>
   1303c:	9001      	str	r0, [sp, #4]
   1303e:	e7ff      	b.n	13040 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E+0x12>
   13040:	9801      	ldr	r0, [sp, #4]
   13042:	f000 0001 	and.w	r0, r0, #1
   13046:	b004      	add	sp, #16
   13048:	bd80      	pop	{r7, pc}

0001304a <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>:
   1304a:	b089      	sub	sp, #36	; 0x24
   1304c:	9005      	str	r0, [sp, #20]
   1304e:	9106      	str	r1, [sp, #24]
   13050:	9107      	str	r1, [sp, #28]
   13052:	9907      	ldr	r1, [sp, #28]
   13054:	9002      	str	r0, [sp, #8]
   13056:	9101      	str	r1, [sp, #4]
   13058:	e7ff      	b.n	1305a <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x10>
   1305a:	9802      	ldr	r0, [sp, #8]
   1305c:	9008      	str	r0, [sp, #32]
   1305e:	9908      	ldr	r1, [sp, #32]
   13060:	9100      	str	r1, [sp, #0]
   13062:	e7ff      	b.n	13064 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x1a>
   13064:	9800      	ldr	r0, [sp, #0]
   13066:	9003      	str	r0, [sp, #12]
   13068:	9901      	ldr	r1, [sp, #4]
   1306a:	9104      	str	r1, [sp, #16]
   1306c:	9803      	ldr	r0, [sp, #12]
   1306e:	9904      	ldr	r1, [sp, #16]
   13070:	b009      	add	sp, #36	; 0x24
   13072:	4770      	bx	lr

00013074 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>:
   13074:	b580      	push	{r7, lr}
   13076:	b088      	sub	sp, #32
   13078:	9006      	str	r0, [sp, #24]
   1307a:	9107      	str	r1, [sp, #28]
   1307c:	9004      	str	r0, [sp, #16]
   1307e:	4608      	mov	r0, r1
   13080:	9103      	str	r1, [sp, #12]
   13082:	f004 fb2e 	bl	176e2 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   13086:	9002      	str	r0, [sp, #8]
   13088:	e7ff      	b.n	1308a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x16>
   1308a:	9802      	ldr	r0, [sp, #8]
   1308c:	07c1      	lsls	r1, r0, #31
   1308e:	2900      	cmp	r1, #0
   13090:	d105      	bne.n	1309e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x2a>
   13092:	e7ff      	b.n	13094 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x20>
   13094:	9803      	ldr	r0, [sp, #12]
   13096:	f004 fb28 	bl	176ea <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   1309a:	9001      	str	r0, [sp, #4]
   1309c:	e007      	b.n	130ae <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x3a>
   1309e:	9804      	ldr	r0, [sp, #16]
   130a0:	9903      	ldr	r1, [sp, #12]
   130a2:	f005 f948 	bl	18336 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   130a6:	f88d 0017 	strb.w	r0, [sp, #23]
   130aa:	e7ff      	b.n	130ac <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x38>
   130ac:	e015      	b.n	130da <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   130ae:	9801      	ldr	r0, [sp, #4]
   130b0:	07c1      	lsls	r1, r0, #31
   130b2:	2900      	cmp	r1, #0
   130b4:	d107      	bne.n	130c6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x52>
   130b6:	e7ff      	b.n	130b8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x44>
   130b8:	9804      	ldr	r0, [sp, #16]
   130ba:	9903      	ldr	r1, [sp, #12]
   130bc:	f005 fb30 	bl	18720 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   130c0:	f88d 0017 	strb.w	r0, [sp, #23]
   130c4:	e007      	b.n	130d6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x62>
   130c6:	9804      	ldr	r0, [sp, #16]
   130c8:	9903      	ldr	r1, [sp, #12]
   130ca:	f005 f99f 	bl	1840c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   130ce:	f88d 0017 	strb.w	r0, [sp, #23]
   130d2:	e7ff      	b.n	130d4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x60>
   130d4:	e000      	b.n	130d8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   130d6:	e7ff      	b.n	130d8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   130d8:	e7ff      	b.n	130da <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   130da:	f89d 0017 	ldrb.w	r0, [sp, #23]
   130de:	b008      	add	sp, #32
   130e0:	bd80      	pop	{r7, pc}

000130e2 <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>:
   130e2:	b086      	sub	sp, #24
   130e4:	9004      	str	r0, [sp, #16]
   130e6:	9105      	str	r1, [sp, #20]
   130e8:	9002      	str	r0, [sp, #8]
   130ea:	9103      	str	r1, [sp, #12]
   130ec:	9802      	ldr	r0, [sp, #8]
   130ee:	9903      	ldr	r1, [sp, #12]
   130f0:	9000      	str	r0, [sp, #0]
   130f2:	9101      	str	r1, [sp, #4]
   130f4:	9800      	ldr	r0, [sp, #0]
   130f6:	9901      	ldr	r1, [sp, #4]
   130f8:	b006      	add	sp, #24
   130fa:	4770      	bx	lr

000130fc <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>:
   130fc:	b580      	push	{r7, lr}
   130fe:	b084      	sub	sp, #16
   13100:	9002      	str	r0, [sp, #8]
   13102:	9103      	str	r1, [sp, #12]
   13104:	f000 f805 	bl	13112 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>
   13108:	9001      	str	r0, [sp, #4]
   1310a:	e7ff      	b.n	1310c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE+0x10>
   1310c:	9801      	ldr	r0, [sp, #4]
   1310e:	b004      	add	sp, #16
   13110:	bd80      	pop	{r7, pc}

00013112 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>:
   13112:	b084      	sub	sp, #16
   13114:	9001      	str	r0, [sp, #4]
   13116:	9102      	str	r1, [sp, #8]
   13118:	4408      	add	r0, r1
   1311a:	9003      	str	r0, [sp, #12]
   1311c:	9803      	ldr	r0, [sp, #12]
   1311e:	9000      	str	r0, [sp, #0]
   13120:	e7ff      	b.n	13122 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E+0x10>
   13122:	9800      	ldr	r0, [sp, #0]
   13124:	b004      	add	sp, #16
   13126:	4770      	bx	lr

00013128 <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>:
   13128:	b580      	push	{r7, lr}
   1312a:	b084      	sub	sp, #16
   1312c:	9002      	str	r0, [sp, #8]
   1312e:	9103      	str	r1, [sp, #12]
   13130:	f7ff ffd7 	bl	130e2 <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>
   13134:	9001      	str	r0, [sp, #4]
   13136:	9100      	str	r1, [sp, #0]
   13138:	e7ff      	b.n	1313a <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E+0x12>
   1313a:	9801      	ldr	r0, [sp, #4]
   1313c:	9900      	ldr	r1, [sp, #0]
   1313e:	b004      	add	sp, #16
   13140:	bd80      	pop	{r7, pc}

00013142 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>:
   13142:	b084      	sub	sp, #16
   13144:	9002      	str	r0, [sp, #8]
   13146:	9103      	str	r1, [sp, #12]
   13148:	9000      	str	r0, [sp, #0]
   1314a:	9101      	str	r1, [sp, #4]
   1314c:	9801      	ldr	r0, [sp, #4]
   1314e:	b004      	add	sp, #16
   13150:	4770      	bx	lr

00013152 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>:
   13152:	b082      	sub	sp, #8
   13154:	9000      	str	r0, [sp, #0]
   13156:	9101      	str	r1, [sp, #4]
   13158:	b002      	add	sp, #8
   1315a:	4770      	bx	lr

0001315c <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>:
        fn from(num: i32) -> Self {
   1315c:	b083      	sub	sp, #12
   1315e:	9001      	str	r0, [sp, #4]
                ::core::mem::transmute::
   13160:	9002      	str	r0, [sp, #8]
   13162:	9802      	ldr	r0, [sp, #8]
   13164:	9000      	str	r0, [sp, #0]
   13166:	e7ff      	b.n	13168 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E+0xc>
        }
   13168:	9800      	ldr	r0, [sp, #0]
   1316a:	b003      	add	sp, #12
   1316c:	4770      	bx	lr

0001316e <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>:
        fn from(_: ()) -> Self {
   1316e:	b081      	sub	sp, #4
   13170:	f06f 000c 	mvn.w	r0, #12
        }
   13174:	b001      	add	sp, #4
   13176:	4770      	bx	lr

00013178 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E>:
        fn fmt(&self, _fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
   13178:	b082      	sub	sp, #8
   1317a:	9000      	str	r0, [sp, #0]
   1317c:	9101      	str	r1, [sp, #4]
   1317e:	2000      	movs	r0, #0
        }
   13180:	b002      	add	sp, #8
   13182:	4770      	bx	lr

00013184 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>:
   13184:	b082      	sub	sp, #8
   13186:	9000      	str	r0, [sp, #0]
   13188:	9101      	str	r1, [sp, #4]
   1318a:	7800      	ldrb	r0, [r0, #0]
   1318c:	7809      	ldrb	r1, [r1, #0]
   1318e:	1a40      	subs	r0, r0, r1
   13190:	fab0 f080 	clz	r0, r0
   13194:	0940      	lsrs	r0, r0, #5
   13196:	b002      	add	sp, #8
   13198:	4770      	bx	lr

0001319a <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc03b439e09ebac7fE>:
where
    N: ArrayLength<T>,
{
    type Target = [T];

    fn deref(&self) -> &[T] {
   1319a:	b580      	push	{r7, lr}
   1319c:	b084      	sub	sp, #16
   1319e:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   131a0:	f002 ffc4 	bl	1612c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h0b01a2fd807adb5bE>
   131a4:	9002      	str	r0, [sp, #8]
   131a6:	9101      	str	r1, [sp, #4]
   131a8:	e7ff      	b.n	131aa <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc03b439e09ebac7fE+0x10>
    }
   131aa:	9802      	ldr	r0, [sp, #8]
   131ac:	9901      	ldr	r1, [sp, #4]
   131ae:	b004      	add	sp, #16
   131b0:	bd80      	pop	{r7, pc}

000131b2 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>:
    fn deref(&self) -> &[T] {
   131b2:	b580      	push	{r7, lr}
   131b4:	b084      	sub	sp, #16
   131b6:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   131b8:	f002 ffcd 	bl	16156 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>
   131bc:	9002      	str	r0, [sp, #8]
   131be:	9101      	str	r1, [sp, #4]
   131c0:	e7ff      	b.n	131c2 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE+0x10>
    }
   131c2:	9802      	ldr	r0, [sp, #8]
   131c4:	9901      	ldr	r1, [sp, #4]
   131c6:	b004      	add	sp, #16
   131c8:	bd80      	pop	{r7, pc}

000131ca <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h5310f2928696ef27E>:
    pub fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   131ca:	b580      	push	{r7, lr}
   131cc:	b084      	sub	sp, #16
   131ce:	9001      	str	r0, [sp, #4]
   131d0:	9102      	str	r1, [sp, #8]
   131d2:	9203      	str	r2, [sp, #12]
        self.0.extend_from_slice(other)
   131d4:	f002 ff0c 	bl	15ff0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E>
   131d8:	9000      	str	r0, [sp, #0]
   131da:	e7ff      	b.n	131dc <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h5310f2928696ef27E+0x12>
    }
   131dc:	9800      	ldr	r0, [sp, #0]
   131de:	f000 0001 	and.w	r0, r0, #1
   131e2:	b004      	add	sp, #16
   131e4:	bd80      	pop	{r7, pc}

000131e6 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>:
    pub fn push(&mut self, item: T) -> Result<(), T> {
   131e6:	b580      	push	{r7, lr}
   131e8:	b086      	sub	sp, #24
   131ea:	460a      	mov	r2, r1
   131ec:	9004      	str	r0, [sp, #16]
   131ee:	f88d 1017 	strb.w	r1, [sp, #23]
        self.0.push(item)
   131f2:	9203      	str	r2, [sp, #12]
   131f4:	f002 ff5f 	bl	160b6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>
   131f8:	9002      	str	r0, [sp, #8]
   131fa:	9101      	str	r1, [sp, #4]
   131fc:	e7ff      	b.n	131fe <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E+0x18>
    }
   131fe:	9802      	ldr	r0, [sp, #8]
   13200:	f000 0001 	and.w	r0, r0, #1
   13204:	9901      	ldr	r1, [sp, #4]
   13206:	b006      	add	sp, #24
   13208:	bd80      	pop	{r7, pc}

0001320a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd10db62fd26673a3E>:
    pub fn clear(&mut self) {
   1320a:	b580      	push	{r7, lr}
   1320c:	b082      	sub	sp, #8
   1320e:	9001      	str	r0, [sp, #4]
        self.0.clear()
   13210:	f002 ff83 	bl	1611a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h923903211635af18E>
   13214:	e7ff      	b.n	13216 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd10db62fd26673a3E+0xc>
    }
   13216:	b002      	add	sp, #8
   13218:	bd80      	pop	{r7, pc}

0001321a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>:
    pub fn clear(&mut self) {
   1321a:	b580      	push	{r7, lr}
   1321c:	b082      	sub	sp, #8
   1321e:	9001      	str	r0, [sp, #4]
        self.0.clear()
   13220:	f002 ff72 	bl	16108 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>
   13224:	e7ff      	b.n	13226 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E+0xc>
    }
   13226:	b002      	add	sp, #8
   13228:	bd80      	pop	{r7, pc}

0001322a <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>:
   1322a:	b580      	push	{r7, lr}
   1322c:	b088      	sub	sp, #32
   1322e:	9006      	str	r0, [sp, #24]
   13230:	9107      	str	r1, [sp, #28]
   13232:	9004      	str	r0, [sp, #16]
   13234:	4608      	mov	r0, r1
   13236:	9103      	str	r1, [sp, #12]
   13238:	f004 fa53 	bl	176e2 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   1323c:	9002      	str	r0, [sp, #8]
   1323e:	e7ff      	b.n	13240 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x16>
   13240:	9802      	ldr	r0, [sp, #8]
   13242:	07c1      	lsls	r1, r0, #31
   13244:	2900      	cmp	r1, #0
   13246:	d105      	bne.n	13254 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x2a>
   13248:	e7ff      	b.n	1324a <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x20>
   1324a:	9803      	ldr	r0, [sp, #12]
   1324c:	f004 fa4d 	bl	176ea <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   13250:	9001      	str	r0, [sp, #4]
   13252:	e007      	b.n	13264 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x3a>
   13254:	9804      	ldr	r0, [sp, #16]
   13256:	9903      	ldr	r1, [sp, #12]
   13258:	f004 ff51 	bl	180fe <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>
   1325c:	f88d 0017 	strb.w	r0, [sp, #23]
   13260:	e7ff      	b.n	13262 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x38>
   13262:	e015      	b.n	13290 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
   13264:	9801      	ldr	r0, [sp, #4]
   13266:	07c1      	lsls	r1, r0, #31
   13268:	2900      	cmp	r1, #0
   1326a:	d107      	bne.n	1327c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x52>
   1326c:	e7ff      	b.n	1326e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x44>
   1326e:	9804      	ldr	r0, [sp, #16]
   13270:	9903      	ldr	r1, [sp, #12]
   13272:	f005 f936 	bl	184e2 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>
   13276:	f88d 0017 	strb.w	r0, [sp, #23]
   1327a:	e007      	b.n	1328c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x62>
   1327c:	9804      	ldr	r0, [sp, #16]
   1327e:	9903      	ldr	r1, [sp, #12]
   13280:	f004 ff6c 	bl	1815c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>
   13284:	f88d 0017 	strb.w	r0, [sp, #23]
   13288:	e7ff      	b.n	1328a <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x60>
   1328a:	e000      	b.n	1328e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
   1328c:	e7ff      	b.n	1328e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
   1328e:	e7ff      	b.n	13290 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
   13290:	f89d 0017 	ldrb.w	r0, [sp, #23]
   13294:	b008      	add	sp, #32
   13296:	bd80      	pop	{r7, pc}

00013298 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>:
   13298:	b580      	push	{r7, lr}
   1329a:	b088      	sub	sp, #32
   1329c:	9006      	str	r0, [sp, #24]
   1329e:	9107      	str	r1, [sp, #28]
   132a0:	9004      	str	r0, [sp, #16]
   132a2:	4608      	mov	r0, r1
   132a4:	9103      	str	r1, [sp, #12]
   132a6:	f004 fa1c 	bl	176e2 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   132aa:	9002      	str	r0, [sp, #8]
   132ac:	e7ff      	b.n	132ae <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x16>
   132ae:	9802      	ldr	r0, [sp, #8]
   132b0:	07c1      	lsls	r1, r0, #31
   132b2:	2900      	cmp	r1, #0
   132b4:	d105      	bne.n	132c2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x2a>
   132b6:	e7ff      	b.n	132b8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x20>
   132b8:	9803      	ldr	r0, [sp, #12]
   132ba:	f004 fa16 	bl	176ea <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   132be:	9001      	str	r0, [sp, #4]
   132c0:	e007      	b.n	132d2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x3a>
   132c2:	9804      	ldr	r0, [sp, #16]
   132c4:	9903      	ldr	r1, [sp, #12]
   132c6:	f005 f836 	bl	18336 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   132ca:	f88d 0017 	strb.w	r0, [sp, #23]
   132ce:	e7ff      	b.n	132d0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x38>
   132d0:	e015      	b.n	132fe <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   132d2:	9801      	ldr	r0, [sp, #4]
   132d4:	07c1      	lsls	r1, r0, #31
   132d6:	2900      	cmp	r1, #0
   132d8:	d107      	bne.n	132ea <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x52>
   132da:	e7ff      	b.n	132dc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x44>
   132dc:	9804      	ldr	r0, [sp, #16]
   132de:	9903      	ldr	r1, [sp, #12]
   132e0:	f005 f9a4 	bl	1862c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
   132e4:	f88d 0017 	strb.w	r0, [sp, #23]
   132e8:	e007      	b.n	132fa <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x62>
   132ea:	9804      	ldr	r0, [sp, #16]
   132ec:	9903      	ldr	r1, [sp, #12]
   132ee:	f005 f88d 	bl	1840c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   132f2:	f88d 0017 	strb.w	r0, [sp, #23]
   132f6:	e7ff      	b.n	132f8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x60>
   132f8:	e000      	b.n	132fc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   132fa:	e7ff      	b.n	132fc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   132fc:	e7ff      	b.n	132fe <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   132fe:	f89d 0017 	ldrb.w	r0, [sp, #23]
   13302:	b008      	add	sp, #32
   13304:	bd80      	pop	{r7, pc}

00013306 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>:
   13306:	b580      	push	{r7, lr}
   13308:	b088      	sub	sp, #32
   1330a:	9006      	str	r0, [sp, #24]
   1330c:	9107      	str	r1, [sp, #28]
   1330e:	9004      	str	r0, [sp, #16]
   13310:	4608      	mov	r0, r1
   13312:	9103      	str	r1, [sp, #12]
   13314:	f004 f9e5 	bl	176e2 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   13318:	9002      	str	r0, [sp, #8]
   1331a:	e7ff      	b.n	1331c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x16>
   1331c:	9802      	ldr	r0, [sp, #8]
   1331e:	07c1      	lsls	r1, r0, #31
   13320:	2900      	cmp	r1, #0
   13322:	d105      	bne.n	13330 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x2a>
   13324:	e7ff      	b.n	13326 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x20>
   13326:	9803      	ldr	r0, [sp, #12]
   13328:	f004 f9df 	bl	176ea <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   1332c:	9001      	str	r0, [sp, #4]
   1332e:	e007      	b.n	13340 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x3a>
   13330:	9804      	ldr	r0, [sp, #16]
   13332:	9903      	ldr	r1, [sp, #12]
   13334:	f004 ffff 	bl	18336 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   13338:	f88d 0017 	strb.w	r0, [sp, #23]
   1333c:	e7ff      	b.n	1333e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x38>
   1333e:	e015      	b.n	1336c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
   13340:	9801      	ldr	r0, [sp, #4]
   13342:	07c1      	lsls	r1, r0, #31
   13344:	2900      	cmp	r1, #0
   13346:	d107      	bne.n	13358 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x52>
   13348:	e7ff      	b.n	1334a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x44>
   1334a:	9804      	ldr	r0, [sp, #16]
   1334c:	9903      	ldr	r1, [sp, #12]
   1334e:	f005 f9e7 	bl	18720 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   13352:	f88d 0017 	strb.w	r0, [sp, #23]
   13356:	e007      	b.n	13368 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x62>
   13358:	9804      	ldr	r0, [sp, #16]
   1335a:	9903      	ldr	r1, [sp, #12]
   1335c:	f005 f856 	bl	1840c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   13360:	f88d 0017 	strb.w	r0, [sp, #23]
   13364:	e7ff      	b.n	13366 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x60>
   13366:	e000      	b.n	1336a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
   13368:	e7ff      	b.n	1336a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
   1336a:	e7ff      	b.n	1336c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
   1336c:	f89d 0017 	ldrb.w	r0, [sp, #23]
   13370:	b008      	add	sp, #32
   13372:	bd80      	pop	{r7, pc}

00013374 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>:
   13374:	b580      	push	{r7, lr}
   13376:	b084      	sub	sp, #16
   13378:	9002      	str	r0, [sp, #8]
   1337a:	9103      	str	r1, [sp, #12]
   1337c:	6800      	ldr	r0, [r0, #0]
   1337e:	6809      	ldr	r1, [r1, #0]
   13380:	f7ff ff00 	bl	13184 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>
   13384:	9001      	str	r0, [sp, #4]
   13386:	e7ff      	b.n	13388 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E+0x14>
   13388:	9801      	ldr	r0, [sp, #4]
   1338a:	f000 0001 	and.w	r0, r0, #1
   1338e:	b004      	add	sp, #16
   13390:	bd80      	pop	{r7, pc}

00013392 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>:

/// Non-blocking SPI transfer callback values (not used)
static mut SPI_CALLBACK: SpiCallback = SpiCallback {};

/// Init non-blocking SPI transfer
pub fn spi_noblock_init() -> MynewtResult<()> {
   13392:	b5b0      	push	{r4, r5, r7, lr}
   13394:	f5ad 6db5 	sub.w	sp, sp, #1448	; 0x5a8
   13398:	2000      	movs	r0, #0
    //  Disable SPI port
    unsafe { hal::hal_spi_disable(SPI_NUM) };
   1339a:	f006 f8a3 	bl	194e4 <hal_spi_disable>
   1339e:	e7ff      	b.n	133a0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xe>

    //  Configure SPI port for non-blocking SPI
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   133a0:	f240 01f8 	movw	r1, #248	; 0xf8
   133a4:	f2c2 0100 	movt	r1, #8192	; 0x2000
   133a8:	2000      	movs	r0, #0
   133aa:	f006 f859 	bl	19460 <hal_spi_config>
   133ae:	906a      	str	r0, [sp, #424]	; 0x1a8
   133b0:	e7ff      	b.n	133b2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x20>
   133b2:	f24f 6008 	movw	r0, #62984	; 0xf608
   133b6:	f2c0 0001 	movt	r0, #1
   133ba:	6800      	ldr	r0, [r0, #0]
   133bc:	a96a      	add	r1, sp, #424	; 0x1a8
   133be:	916b      	str	r1, [sp, #428]	; 0x1ac
   133c0:	906c      	str	r0, [sp, #432]	; 0x1b0
   133c2:	986b      	ldr	r0, [sp, #428]	; 0x1ac
   133c4:	f8cd 04fc 	str.w	r0, [sp, #1276]	; 0x4fc
   133c8:	996c      	ldr	r1, [sp, #432]	; 0x1b0
   133ca:	f8cd 1500 	str.w	r1, [sp, #1280]	; 0x500
   133ce:	6802      	ldr	r2, [r0, #0]
   133d0:	680b      	ldr	r3, [r1, #0]
   133d2:	429a      	cmp	r2, r3
   133d4:	9068      	str	r0, [sp, #416]	; 0x1a0
   133d6:	9167      	str	r1, [sp, #412]	; 0x19c
   133d8:	d10c      	bne.n	133f4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x62>
   133da:	e7ff      	b.n	133dc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4a>
    let arg = unsafe { core::mem::transmute(&mut SPI_CALLBACK) };
   133dc:	f241 60b4 	movw	r0, #5812	; 0x16b4
   133e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
   133e4:	f8cd 0510 	str.w	r0, [sp, #1296]	; 0x510
   133e8:	f8dd 0510 	ldr.w	r0, [sp, #1296]	; 0x510
   133ec:	f8cd 0514 	str.w	r0, [sp, #1300]	; 0x514
   133f0:	9066      	str	r0, [sp, #408]	; 0x198
   133f2:	e075      	b.n	134e0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x14e>
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   133f4:	f24f 6060 	movw	r0, #63072	; 0xf660
   133f8:	f2c0 0001 	movt	r0, #1
   133fc:	6801      	ldr	r1, [r0, #0]
   133fe:	9868      	ldr	r0, [sp, #416]	; 0x1a0
   13400:	907c      	str	r0, [sp, #496]	; 0x1f0
   13402:	9a67      	ldr	r2, [sp, #412]	; 0x19c
   13404:	927d      	str	r2, [sp, #500]	; 0x1f4
   13406:	f24f 637c 	movw	r3, #63100	; 0xf67c
   1340a:	f2c0 0301 	movt	r3, #1
   1340e:	681b      	ldr	r3, [r3, #0]
   13410:	f24f 6c80 	movw	ip, #63104	; 0xf680
   13414:	f2c0 0c01 	movt	ip, #1
   13418:	f8dc c000 	ldr.w	ip, [ip]
   1341c:	46ee      	mov	lr, sp
   1341e:	2400      	movs	r4, #0
   13420:	f8ce 4000 	str.w	r4, [lr]
   13424:	a87e      	add	r0, sp, #504	; 0x1f8
   13426:	2201      	movs	r2, #1
   13428:	9165      	str	r1, [sp, #404]	; 0x194
   1342a:	4619      	mov	r1, r3
   1342c:	4663      	mov	r3, ip
   1342e:	f7fb fe6e 	bl	f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13432:	e7ff      	b.n	13434 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2>
   13434:	a87c      	add	r0, sp, #496	; 0x1f0
   13436:	9079      	str	r0, [sp, #484]	; 0x1e4
   13438:	a87d      	add	r0, sp, #500	; 0x1f4
   1343a:	907a      	str	r0, [sp, #488]	; 0x1e8
   1343c:	a87e      	add	r0, sp, #504	; 0x1f8
   1343e:	907b      	str	r0, [sp, #492]	; 0x1ec
   13440:	9879      	ldr	r0, [sp, #484]	; 0x1e4
   13442:	f8cd 0504 	str.w	r0, [sp, #1284]	; 0x504
   13446:	997a      	ldr	r1, [sp, #488]	; 0x1e8
   13448:	f8cd 1508 	str.w	r1, [sp, #1288]	; 0x508
   1344c:	9a7b      	ldr	r2, [sp, #492]	; 0x1ec
   1344e:	f8cd 250c 	str.w	r2, [sp, #1292]	; 0x50c
   13452:	f64f 639b 	movw	r3, #65179	; 0xfe9b
   13456:	f2c0 0300 	movt	r3, #0
   1345a:	9164      	str	r1, [sp, #400]	; 0x190
   1345c:	4619      	mov	r1, r3
   1345e:	9263      	str	r2, [sp, #396]	; 0x18c
   13460:	f7fc fd53 	bl	ff0a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13464:	9062      	str	r0, [sp, #392]	; 0x188
   13466:	9161      	str	r1, [sp, #388]	; 0x184
   13468:	e7ff      	b.n	1346a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xd8>
   1346a:	f64f 619b 	movw	r1, #65179	; 0xfe9b
   1346e:	f2c0 0100 	movt	r1, #0
   13472:	9864      	ldr	r0, [sp, #400]	; 0x190
   13474:	f7fc fd49 	bl	ff0a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13478:	9060      	str	r0, [sp, #384]	; 0x180
   1347a:	915f      	str	r1, [sp, #380]	; 0x17c
   1347c:	e7ff      	b.n	1347e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xec>
   1347e:	f646 716f 	movw	r1, #28527	; 0x6f6f
   13482:	f2c0 0101 	movt	r1, #1
   13486:	9863      	ldr	r0, [sp, #396]	; 0x18c
   13488:	f7fc fd7e 	bl	ff88 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1348c:	905e      	str	r0, [sp, #376]	; 0x178
   1348e:	915d      	str	r1, [sp, #372]	; 0x174
   13490:	e7ff      	b.n	13492 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x100>
   13492:	9862      	ldr	r0, [sp, #392]	; 0x188
   13494:	9073      	str	r0, [sp, #460]	; 0x1cc
   13496:	9961      	ldr	r1, [sp, #388]	; 0x184
   13498:	9174      	str	r1, [sp, #464]	; 0x1d0
   1349a:	9a60      	ldr	r2, [sp, #384]	; 0x180
   1349c:	9275      	str	r2, [sp, #468]	; 0x1d4
   1349e:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
   134a0:	9376      	str	r3, [sp, #472]	; 0x1d8
   134a2:	f8dd c178 	ldr.w	ip, [sp, #376]	; 0x178
   134a6:	f8cd c1dc 	str.w	ip, [sp, #476]	; 0x1dc
   134aa:	f8dd e174 	ldr.w	lr, [sp, #372]	; 0x174
   134ae:	f8cd e1e0 	str.w	lr, [sp, #480]	; 0x1e0
   134b2:	466c      	mov	r4, sp
   134b4:	2503      	movs	r5, #3
   134b6:	6025      	str	r5, [r4, #0]
   134b8:	a86d      	add	r0, sp, #436	; 0x1b4
   134ba:	ab73      	add	r3, sp, #460	; 0x1cc
   134bc:	9965      	ldr	r1, [sp, #404]	; 0x194
   134be:	462a      	mov	r2, r5
   134c0:	f7fb fe25 	bl	f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   134c4:	e7ff      	b.n	134c6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x134>
   134c6:	f24f 609c 	movw	r0, #63132	; 0xf69c
   134ca:	f2c0 0001 	movt	r0, #1
   134ce:	f003 fa60 	bl	16992 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   134d2:	905c      	str	r0, [sp, #368]	; 0x170
   134d4:	e7ff      	b.n	134d6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x144>
   134d6:	a86d      	add	r0, sp, #436	; 0x1b4
   134d8:	995c      	ldr	r1, [sp, #368]	; 0x170
   134da:	f003 fa97 	bl	16a0c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   134de:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
        SPI_NUM, 
        Some(spi_noblock_handler), 
   134e0:	f644 00a9 	movw	r0, #18601	; 0x48a9
   134e4:	f2c0 0001 	movt	r0, #1
   134e8:	9085      	str	r0, [sp, #532]	; 0x214
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
   134ea:	9985      	ldr	r1, [sp, #532]	; 0x214
   134ec:	2000      	movs	r0, #0
   134ee:	9a66      	ldr	r2, [sp, #408]	; 0x198
   134f0:	f006 f85c 	bl	195ac <hal_spi_set_txrx_cb>
   134f4:	9084      	str	r0, [sp, #528]	; 0x210
   134f6:	e7ff      	b.n	134f8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x166>
        arg
    ) };
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   134f8:	f24f 6008 	movw	r0, #62984	; 0xf608
   134fc:	f2c0 0001 	movt	r0, #1
   13500:	6800      	ldr	r0, [r0, #0]
   13502:	a984      	add	r1, sp, #528	; 0x210
   13504:	9186      	str	r1, [sp, #536]	; 0x218
   13506:	9087      	str	r0, [sp, #540]	; 0x21c
   13508:	9886      	ldr	r0, [sp, #536]	; 0x218
   1350a:	f8cd 0518 	str.w	r0, [sp, #1304]	; 0x518
   1350e:	9987      	ldr	r1, [sp, #540]	; 0x21c
   13510:	f8cd 151c 	str.w	r1, [sp, #1308]	; 0x51c
   13514:	6802      	ldr	r2, [r0, #0]
   13516:	680b      	ldr	r3, [r1, #0]
   13518:	429a      	cmp	r2, r3
   1351a:	905b      	str	r0, [sp, #364]	; 0x16c
   1351c:	915a      	str	r1, [sp, #360]	; 0x168
   1351e:	d105      	bne.n	1352c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x19a>
   13520:	e7ff      	b.n	13522 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x190>
   13522:	2000      	movs	r0, #0

    //  Enable SPI port and set SS to high to disable SPI device
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   13524:	f005 ffb8 	bl	19498 <hal_spi_enable>
   13528:	909f      	str	r0, [sp, #636]	; 0x27c
   1352a:	e075      	b.n	13618 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x286>
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   1352c:	f24f 6060 	movw	r0, #63072	; 0xf660
   13530:	f2c0 0001 	movt	r0, #1
   13534:	6801      	ldr	r1, [r0, #0]
   13536:	985b      	ldr	r0, [sp, #364]	; 0x16c
   13538:	9097      	str	r0, [sp, #604]	; 0x25c
   1353a:	9a5a      	ldr	r2, [sp, #360]	; 0x168
   1353c:	9298      	str	r2, [sp, #608]	; 0x260
   1353e:	f24f 63c0 	movw	r3, #63168	; 0xf6c0
   13542:	f2c0 0301 	movt	r3, #1
   13546:	681b      	ldr	r3, [r3, #0]
   13548:	f24f 6c80 	movw	ip, #63104	; 0xf680
   1354c:	f2c0 0c01 	movt	ip, #1
   13550:	f8dc c000 	ldr.w	ip, [ip]
   13554:	46ee      	mov	lr, sp
   13556:	2400      	movs	r4, #0
   13558:	f8ce 4000 	str.w	r4, [lr]
   1355c:	a899      	add	r0, sp, #612	; 0x264
   1355e:	2201      	movs	r2, #1
   13560:	9159      	str	r1, [sp, #356]	; 0x164
   13562:	4619      	mov	r1, r3
   13564:	4663      	mov	r3, ip
   13566:	f7fb fdd2 	bl	f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1356a:	e7ff      	b.n	1356c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x1da>
   1356c:	a897      	add	r0, sp, #604	; 0x25c
   1356e:	9094      	str	r0, [sp, #592]	; 0x250
   13570:	a898      	add	r0, sp, #608	; 0x260
   13572:	9095      	str	r0, [sp, #596]	; 0x254
   13574:	a899      	add	r0, sp, #612	; 0x264
   13576:	9096      	str	r0, [sp, #600]	; 0x258
   13578:	9894      	ldr	r0, [sp, #592]	; 0x250
   1357a:	f8cd 0520 	str.w	r0, [sp, #1312]	; 0x520
   1357e:	9995      	ldr	r1, [sp, #596]	; 0x254
   13580:	f8cd 1524 	str.w	r1, [sp, #1316]	; 0x524
   13584:	9a96      	ldr	r2, [sp, #600]	; 0x258
   13586:	f8cd 2528 	str.w	r2, [sp, #1320]	; 0x528
   1358a:	f64f 639b 	movw	r3, #65179	; 0xfe9b
   1358e:	f2c0 0300 	movt	r3, #0
   13592:	9158      	str	r1, [sp, #352]	; 0x160
   13594:	4619      	mov	r1, r3
   13596:	9257      	str	r2, [sp, #348]	; 0x15c
   13598:	f7fc fcb7 	bl	ff0a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1359c:	9056      	str	r0, [sp, #344]	; 0x158
   1359e:	9155      	str	r1, [sp, #340]	; 0x154
   135a0:	e7ff      	b.n	135a2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x210>
   135a2:	f64f 619b 	movw	r1, #65179	; 0xfe9b
   135a6:	f2c0 0100 	movt	r1, #0
   135aa:	9858      	ldr	r0, [sp, #352]	; 0x160
   135ac:	f7fc fcad 	bl	ff0a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   135b0:	9054      	str	r0, [sp, #336]	; 0x150
   135b2:	9153      	str	r1, [sp, #332]	; 0x14c
   135b4:	e7ff      	b.n	135b6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x224>
   135b6:	f646 716f 	movw	r1, #28527	; 0x6f6f
   135ba:	f2c0 0101 	movt	r1, #1
   135be:	9857      	ldr	r0, [sp, #348]	; 0x15c
   135c0:	f7fc fce2 	bl	ff88 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   135c4:	9052      	str	r0, [sp, #328]	; 0x148
   135c6:	9151      	str	r1, [sp, #324]	; 0x144
   135c8:	e7ff      	b.n	135ca <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x238>
   135ca:	9856      	ldr	r0, [sp, #344]	; 0x158
   135cc:	908e      	str	r0, [sp, #568]	; 0x238
   135ce:	9955      	ldr	r1, [sp, #340]	; 0x154
   135d0:	918f      	str	r1, [sp, #572]	; 0x23c
   135d2:	9a54      	ldr	r2, [sp, #336]	; 0x150
   135d4:	9290      	str	r2, [sp, #576]	; 0x240
   135d6:	9b53      	ldr	r3, [sp, #332]	; 0x14c
   135d8:	9391      	str	r3, [sp, #580]	; 0x244
   135da:	f8dd c148 	ldr.w	ip, [sp, #328]	; 0x148
   135de:	f8cd c248 	str.w	ip, [sp, #584]	; 0x248
   135e2:	f8dd e144 	ldr.w	lr, [sp, #324]	; 0x144
   135e6:	f8cd e24c 	str.w	lr, [sp, #588]	; 0x24c
   135ea:	466c      	mov	r4, sp
   135ec:	2503      	movs	r5, #3
   135ee:	6025      	str	r5, [r4, #0]
   135f0:	a888      	add	r0, sp, #544	; 0x220
   135f2:	ab8e      	add	r3, sp, #568	; 0x238
   135f4:	9959      	ldr	r1, [sp, #356]	; 0x164
   135f6:	462a      	mov	r2, r5
   135f8:	f7fb fd89 	bl	f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   135fc:	e7ff      	b.n	135fe <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x26c>
   135fe:	f24f 60c4 	movw	r0, #63172	; 0xf6c4
   13602:	f2c0 0001 	movt	r0, #1
   13606:	f003 f9c4 	bl	16992 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1360a:	9050      	str	r0, [sp, #320]	; 0x140
   1360c:	e7ff      	b.n	1360e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x27c>
   1360e:	a888      	add	r0, sp, #544	; 0x220
   13610:	9950      	ldr	r1, [sp, #320]	; 0x140
   13612:	f003 f9fb 	bl	16a0c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13616:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   13618:	f24f 6008 	movw	r0, #62984	; 0xf608
   1361c:	f2c0 0001 	movt	r0, #1
   13620:	6800      	ldr	r0, [r0, #0]
   13622:	a99f      	add	r1, sp, #636	; 0x27c
   13624:	91a0      	str	r1, [sp, #640]	; 0x280
   13626:	90a1      	str	r0, [sp, #644]	; 0x284
   13628:	98a0      	ldr	r0, [sp, #640]	; 0x280
   1362a:	f8cd 052c 	str.w	r0, [sp, #1324]	; 0x52c
   1362e:	99a1      	ldr	r1, [sp, #644]	; 0x284
   13630:	f8cd 1530 	str.w	r1, [sp, #1328]	; 0x530
   13634:	6802      	ldr	r2, [r0, #0]
   13636:	680b      	ldr	r3, [r1, #0]
   13638:	429a      	cmp	r2, r3
   1363a:	904f      	str	r0, [sp, #316]	; 0x13c
   1363c:	914e      	str	r1, [sp, #312]	; 0x138
   1363e:	d106      	bne.n	1364e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2bc>
   13640:	e7ff      	b.n	13642 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2b0>
   13642:	2019      	movs	r0, #25
   13644:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   13646:	f005 fafd 	bl	18c44 <hal_gpio_init_out>
   1364a:	90b9      	str	r0, [sp, #740]	; 0x2e4
   1364c:	e075      	b.n	1373a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3a8>
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   1364e:	f24f 6060 	movw	r0, #63072	; 0xf660
   13652:	f2c0 0001 	movt	r0, #1
   13656:	6801      	ldr	r1, [r0, #0]
   13658:	984f      	ldr	r0, [sp, #316]	; 0x13c
   1365a:	90b1      	str	r0, [sp, #708]	; 0x2c4
   1365c:	9a4e      	ldr	r2, [sp, #312]	; 0x138
   1365e:	92b2      	str	r2, [sp, #712]	; 0x2c8
   13660:	f24f 63ec 	movw	r3, #63212	; 0xf6ec
   13664:	f2c0 0301 	movt	r3, #1
   13668:	681b      	ldr	r3, [r3, #0]
   1366a:	f24f 6c80 	movw	ip, #63104	; 0xf680
   1366e:	f2c0 0c01 	movt	ip, #1
   13672:	f8dc c000 	ldr.w	ip, [ip]
   13676:	46ee      	mov	lr, sp
   13678:	2400      	movs	r4, #0
   1367a:	f8ce 4000 	str.w	r4, [lr]
   1367e:	a8b3      	add	r0, sp, #716	; 0x2cc
   13680:	2201      	movs	r2, #1
   13682:	914d      	str	r1, [sp, #308]	; 0x134
   13684:	4619      	mov	r1, r3
   13686:	4663      	mov	r3, ip
   13688:	f7fb fd41 	bl	f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1368c:	e7ff      	b.n	1368e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2fc>
   1368e:	a8b1      	add	r0, sp, #708	; 0x2c4
   13690:	90ae      	str	r0, [sp, #696]	; 0x2b8
   13692:	a8b2      	add	r0, sp, #712	; 0x2c8
   13694:	90af      	str	r0, [sp, #700]	; 0x2bc
   13696:	a8b3      	add	r0, sp, #716	; 0x2cc
   13698:	90b0      	str	r0, [sp, #704]	; 0x2c0
   1369a:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
   1369c:	f8cd 0534 	str.w	r0, [sp, #1332]	; 0x534
   136a0:	99af      	ldr	r1, [sp, #700]	; 0x2bc
   136a2:	f8cd 1538 	str.w	r1, [sp, #1336]	; 0x538
   136a6:	9ab0      	ldr	r2, [sp, #704]	; 0x2c0
   136a8:	f8cd 253c 	str.w	r2, [sp, #1340]	; 0x53c
   136ac:	f64f 639b 	movw	r3, #65179	; 0xfe9b
   136b0:	f2c0 0300 	movt	r3, #0
   136b4:	914c      	str	r1, [sp, #304]	; 0x130
   136b6:	4619      	mov	r1, r3
   136b8:	924b      	str	r2, [sp, #300]	; 0x12c
   136ba:	f7fc fc26 	bl	ff0a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   136be:	904a      	str	r0, [sp, #296]	; 0x128
   136c0:	9149      	str	r1, [sp, #292]	; 0x124
   136c2:	e7ff      	b.n	136c4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x332>
   136c4:	f64f 619b 	movw	r1, #65179	; 0xfe9b
   136c8:	f2c0 0100 	movt	r1, #0
   136cc:	984c      	ldr	r0, [sp, #304]	; 0x130
   136ce:	f7fc fc1c 	bl	ff0a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   136d2:	9048      	str	r0, [sp, #288]	; 0x120
   136d4:	9147      	str	r1, [sp, #284]	; 0x11c
   136d6:	e7ff      	b.n	136d8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x346>
   136d8:	f646 716f 	movw	r1, #28527	; 0x6f6f
   136dc:	f2c0 0101 	movt	r1, #1
   136e0:	984b      	ldr	r0, [sp, #300]	; 0x12c
   136e2:	f7fc fc51 	bl	ff88 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   136e6:	9046      	str	r0, [sp, #280]	; 0x118
   136e8:	9145      	str	r1, [sp, #276]	; 0x114
   136ea:	e7ff      	b.n	136ec <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x35a>
   136ec:	984a      	ldr	r0, [sp, #296]	; 0x128
   136ee:	90a8      	str	r0, [sp, #672]	; 0x2a0
   136f0:	9949      	ldr	r1, [sp, #292]	; 0x124
   136f2:	91a9      	str	r1, [sp, #676]	; 0x2a4
   136f4:	9a48      	ldr	r2, [sp, #288]	; 0x120
   136f6:	92aa      	str	r2, [sp, #680]	; 0x2a8
   136f8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   136fa:	93ab      	str	r3, [sp, #684]	; 0x2ac
   136fc:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
   13700:	f8cd c2b0 	str.w	ip, [sp, #688]	; 0x2b0
   13704:	f8dd e114 	ldr.w	lr, [sp, #276]	; 0x114
   13708:	f8cd e2b4 	str.w	lr, [sp, #692]	; 0x2b4
   1370c:	466c      	mov	r4, sp
   1370e:	2503      	movs	r5, #3
   13710:	6025      	str	r5, [r4, #0]
   13712:	a8a2      	add	r0, sp, #648	; 0x288
   13714:	aba8      	add	r3, sp, #672	; 0x2a0
   13716:	994d      	ldr	r1, [sp, #308]	; 0x134
   13718:	462a      	mov	r2, r5
   1371a:	f7fb fcf8 	bl	f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1371e:	e7ff      	b.n	13720 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x38e>
   13720:	f24f 60f0 	movw	r0, #63216	; 0xf6f0
   13724:	f2c0 0001 	movt	r0, #1
   13728:	f003 f933 	bl	16992 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1372c:	9044      	str	r0, [sp, #272]	; 0x110
   1372e:	e7ff      	b.n	13730 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x39e>
   13730:	a8a2      	add	r0, sp, #648	; 0x288
   13732:	9944      	ldr	r1, [sp, #272]	; 0x110
   13734:	f003 f96a 	bl	16a0c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13738:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   1373a:	f24f 6008 	movw	r0, #62984	; 0xf608
   1373e:	f2c0 0001 	movt	r0, #1
   13742:	6800      	ldr	r0, [r0, #0]
   13744:	a9b9      	add	r1, sp, #740	; 0x2e4
   13746:	91ba      	str	r1, [sp, #744]	; 0x2e8
   13748:	90bb      	str	r0, [sp, #748]	; 0x2ec
   1374a:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
   1374c:	f8cd 0540 	str.w	r0, [sp, #1344]	; 0x540
   13750:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
   13752:	f8cd 1544 	str.w	r1, [sp, #1348]	; 0x544
   13756:	6802      	ldr	r2, [r0, #0]
   13758:	680b      	ldr	r3, [r1, #0]
   1375a:	429a      	cmp	r2, r3
   1375c:	9043      	str	r0, [sp, #268]	; 0x10c
   1375e:	9142      	str	r1, [sp, #264]	; 0x108
   13760:	d106      	bne.n	13770 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3de>
   13762:	e7ff      	b.n	13764 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3d2>
   13764:	2012      	movs	r0, #18
   13766:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   13768:	f005 fa6c 	bl	18c44 <hal_gpio_init_out>
   1376c:	90d3      	str	r0, [sp, #844]	; 0x34c
   1376e:	e075      	b.n	1385c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4ca>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   13770:	f24f 6060 	movw	r0, #63072	; 0xf660
   13774:	f2c0 0001 	movt	r0, #1
   13778:	6801      	ldr	r1, [r0, #0]
   1377a:	9843      	ldr	r0, [sp, #268]	; 0x10c
   1377c:	90cb      	str	r0, [sp, #812]	; 0x32c
   1377e:	9a42      	ldr	r2, [sp, #264]	; 0x108
   13780:	92cc      	str	r2, [sp, #816]	; 0x330
   13782:	f24f 7314 	movw	r3, #63252	; 0xf714
   13786:	f2c0 0301 	movt	r3, #1
   1378a:	681b      	ldr	r3, [r3, #0]
   1378c:	f24f 6c80 	movw	ip, #63104	; 0xf680
   13790:	f2c0 0c01 	movt	ip, #1
   13794:	f8dc c000 	ldr.w	ip, [ip]
   13798:	46ee      	mov	lr, sp
   1379a:	2400      	movs	r4, #0
   1379c:	f8ce 4000 	str.w	r4, [lr]
   137a0:	a8cd      	add	r0, sp, #820	; 0x334
   137a2:	2201      	movs	r2, #1
   137a4:	9141      	str	r1, [sp, #260]	; 0x104
   137a6:	4619      	mov	r1, r3
   137a8:	4663      	mov	r3, ip
   137aa:	f7fb fcb0 	bl	f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   137ae:	e7ff      	b.n	137b0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x41e>
   137b0:	a8cb      	add	r0, sp, #812	; 0x32c
   137b2:	90c8      	str	r0, [sp, #800]	; 0x320
   137b4:	a8cc      	add	r0, sp, #816	; 0x330
   137b6:	90c9      	str	r0, [sp, #804]	; 0x324
   137b8:	a8cd      	add	r0, sp, #820	; 0x334
   137ba:	90ca      	str	r0, [sp, #808]	; 0x328
   137bc:	98c8      	ldr	r0, [sp, #800]	; 0x320
   137be:	f8cd 0548 	str.w	r0, [sp, #1352]	; 0x548
   137c2:	99c9      	ldr	r1, [sp, #804]	; 0x324
   137c4:	f8cd 154c 	str.w	r1, [sp, #1356]	; 0x54c
   137c8:	9aca      	ldr	r2, [sp, #808]	; 0x328
   137ca:	f8cd 2550 	str.w	r2, [sp, #1360]	; 0x550
   137ce:	f64f 639b 	movw	r3, #65179	; 0xfe9b
   137d2:	f2c0 0300 	movt	r3, #0
   137d6:	9140      	str	r1, [sp, #256]	; 0x100
   137d8:	4619      	mov	r1, r3
   137da:	923f      	str	r2, [sp, #252]	; 0xfc
   137dc:	f7fc fb95 	bl	ff0a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   137e0:	903e      	str	r0, [sp, #248]	; 0xf8
   137e2:	913d      	str	r1, [sp, #244]	; 0xf4
   137e4:	e7ff      	b.n	137e6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x454>
   137e6:	f64f 619b 	movw	r1, #65179	; 0xfe9b
   137ea:	f2c0 0100 	movt	r1, #0
   137ee:	9840      	ldr	r0, [sp, #256]	; 0x100
   137f0:	f7fc fb8b 	bl	ff0a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   137f4:	903c      	str	r0, [sp, #240]	; 0xf0
   137f6:	913b      	str	r1, [sp, #236]	; 0xec
   137f8:	e7ff      	b.n	137fa <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x468>
   137fa:	f646 716f 	movw	r1, #28527	; 0x6f6f
   137fe:	f2c0 0101 	movt	r1, #1
   13802:	983f      	ldr	r0, [sp, #252]	; 0xfc
   13804:	f7fc fbc0 	bl	ff88 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13808:	903a      	str	r0, [sp, #232]	; 0xe8
   1380a:	9139      	str	r1, [sp, #228]	; 0xe4
   1380c:	e7ff      	b.n	1380e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x47c>
   1380e:	983e      	ldr	r0, [sp, #248]	; 0xf8
   13810:	90c2      	str	r0, [sp, #776]	; 0x308
   13812:	993d      	ldr	r1, [sp, #244]	; 0xf4
   13814:	91c3      	str	r1, [sp, #780]	; 0x30c
   13816:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
   13818:	92c4      	str	r2, [sp, #784]	; 0x310
   1381a:	9b3b      	ldr	r3, [sp, #236]	; 0xec
   1381c:	93c5      	str	r3, [sp, #788]	; 0x314
   1381e:	f8dd c0e8 	ldr.w	ip, [sp, #232]	; 0xe8
   13822:	f8cd c318 	str.w	ip, [sp, #792]	; 0x318
   13826:	f8dd e0e4 	ldr.w	lr, [sp, #228]	; 0xe4
   1382a:	f8cd e31c 	str.w	lr, [sp, #796]	; 0x31c
   1382e:	466c      	mov	r4, sp
   13830:	2503      	movs	r5, #3
   13832:	6025      	str	r5, [r4, #0]
   13834:	a8bc      	add	r0, sp, #752	; 0x2f0
   13836:	abc2      	add	r3, sp, #776	; 0x308
   13838:	9941      	ldr	r1, [sp, #260]	; 0x104
   1383a:	462a      	mov	r2, r5
   1383c:	f7fb fc67 	bl	f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13840:	e7ff      	b.n	13842 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4b0>
   13842:	f24f 7018 	movw	r0, #63256	; 0xf718
   13846:	f2c0 0001 	movt	r0, #1
   1384a:	f003 f8a2 	bl	16992 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1384e:	9038      	str	r0, [sp, #224]	; 0xe0
   13850:	e7ff      	b.n	13852 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4c0>
   13852:	a8bc      	add	r0, sp, #752	; 0x2f0
   13854:	9938      	ldr	r1, [sp, #224]	; 0xe0
   13856:	f003 f8d9 	bl	16a0c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1385a:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   1385c:	f24f 6008 	movw	r0, #62984	; 0xf608
   13860:	f2c0 0001 	movt	r0, #1
   13864:	6800      	ldr	r0, [r0, #0]
   13866:	a9d3      	add	r1, sp, #844	; 0x34c
   13868:	91d4      	str	r1, [sp, #848]	; 0x350
   1386a:	90d5      	str	r0, [sp, #852]	; 0x354
   1386c:	98d4      	ldr	r0, [sp, #848]	; 0x350
   1386e:	f8cd 0554 	str.w	r0, [sp, #1364]	; 0x554
   13872:	99d5      	ldr	r1, [sp, #852]	; 0x354
   13874:	f8cd 1558 	str.w	r1, [sp, #1368]	; 0x558
   13878:	6802      	ldr	r2, [r0, #0]
   1387a:	680b      	ldr	r3, [r1, #0]
   1387c:	429a      	cmp	r2, r3
   1387e:	9037      	str	r0, [sp, #220]	; 0xdc
   13880:	9136      	str	r1, [sp, #216]	; 0xd8
   13882:	d107      	bne.n	13894 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x502>
   13884:	e7ff      	b.n	13886 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4f4>

    //  Create Event Queue and Mbuf (Data) Queue that will store the SPI requests
    unsafe { os::os_eventq_init(&mut SPI_EVENT_QUEUE) };
   13886:	f241 2054 	movw	r0, #4692	; 0x1254
   1388a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1388e:	f006 fae3 	bl	19e58 <os_eventq_init>
   13892:	e075      	b.n	13980 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5ee>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   13894:	f24f 6060 	movw	r0, #63072	; 0xf660
   13898:	f2c0 0001 	movt	r0, #1
   1389c:	6801      	ldr	r1, [r0, #0]
   1389e:	9837      	ldr	r0, [sp, #220]	; 0xdc
   138a0:	90e5      	str	r0, [sp, #916]	; 0x394
   138a2:	9a36      	ldr	r2, [sp, #216]	; 0xd8
   138a4:	92e6      	str	r2, [sp, #920]	; 0x398
   138a6:	f24f 7314 	movw	r3, #63252	; 0xf714
   138aa:	f2c0 0301 	movt	r3, #1
   138ae:	681b      	ldr	r3, [r3, #0]
   138b0:	f24f 6c80 	movw	ip, #63104	; 0xf680
   138b4:	f2c0 0c01 	movt	ip, #1
   138b8:	f8dc c000 	ldr.w	ip, [ip]
   138bc:	46ee      	mov	lr, sp
   138be:	2400      	movs	r4, #0
   138c0:	f8ce 4000 	str.w	r4, [lr]
   138c4:	a8e7      	add	r0, sp, #924	; 0x39c
   138c6:	2201      	movs	r2, #1
   138c8:	9135      	str	r1, [sp, #212]	; 0xd4
   138ca:	4619      	mov	r1, r3
   138cc:	4663      	mov	r3, ip
   138ce:	f7fb fc1e 	bl	f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   138d2:	e7ff      	b.n	138d4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x542>
   138d4:	a8e5      	add	r0, sp, #916	; 0x394
   138d6:	90e2      	str	r0, [sp, #904]	; 0x388
   138d8:	a8e6      	add	r0, sp, #920	; 0x398
   138da:	90e3      	str	r0, [sp, #908]	; 0x38c
   138dc:	a8e7      	add	r0, sp, #924	; 0x39c
   138de:	90e4      	str	r0, [sp, #912]	; 0x390
   138e0:	98e2      	ldr	r0, [sp, #904]	; 0x388
   138e2:	f8cd 055c 	str.w	r0, [sp, #1372]	; 0x55c
   138e6:	99e3      	ldr	r1, [sp, #908]	; 0x38c
   138e8:	f8cd 1560 	str.w	r1, [sp, #1376]	; 0x560
   138ec:	9ae4      	ldr	r2, [sp, #912]	; 0x390
   138ee:	f8cd 2564 	str.w	r2, [sp, #1380]	; 0x564
   138f2:	f64f 639b 	movw	r3, #65179	; 0xfe9b
   138f6:	f2c0 0300 	movt	r3, #0
   138fa:	9134      	str	r1, [sp, #208]	; 0xd0
   138fc:	4619      	mov	r1, r3
   138fe:	9233      	str	r2, [sp, #204]	; 0xcc
   13900:	f7fc fb03 	bl	ff0a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13904:	9032      	str	r0, [sp, #200]	; 0xc8
   13906:	9131      	str	r1, [sp, #196]	; 0xc4
   13908:	e7ff      	b.n	1390a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x578>
   1390a:	f64f 619b 	movw	r1, #65179	; 0xfe9b
   1390e:	f2c0 0100 	movt	r1, #0
   13912:	9834      	ldr	r0, [sp, #208]	; 0xd0
   13914:	f7fc faf9 	bl	ff0a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13918:	9030      	str	r0, [sp, #192]	; 0xc0
   1391a:	912f      	str	r1, [sp, #188]	; 0xbc
   1391c:	e7ff      	b.n	1391e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x58c>
   1391e:	f646 716f 	movw	r1, #28527	; 0x6f6f
   13922:	f2c0 0101 	movt	r1, #1
   13926:	9833      	ldr	r0, [sp, #204]	; 0xcc
   13928:	f7fc fb2e 	bl	ff88 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1392c:	902e      	str	r0, [sp, #184]	; 0xb8
   1392e:	912d      	str	r1, [sp, #180]	; 0xb4
   13930:	e7ff      	b.n	13932 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5a0>
   13932:	9832      	ldr	r0, [sp, #200]	; 0xc8
   13934:	90dc      	str	r0, [sp, #880]	; 0x370
   13936:	9931      	ldr	r1, [sp, #196]	; 0xc4
   13938:	91dd      	str	r1, [sp, #884]	; 0x374
   1393a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
   1393c:	92de      	str	r2, [sp, #888]	; 0x378
   1393e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   13940:	93df      	str	r3, [sp, #892]	; 0x37c
   13942:	f8dd c0b8 	ldr.w	ip, [sp, #184]	; 0xb8
   13946:	f8cd c380 	str.w	ip, [sp, #896]	; 0x380
   1394a:	f8dd e0b4 	ldr.w	lr, [sp, #180]	; 0xb4
   1394e:	f8cd e384 	str.w	lr, [sp, #900]	; 0x384
   13952:	466c      	mov	r4, sp
   13954:	2503      	movs	r5, #3
   13956:	6025      	str	r5, [r4, #0]
   13958:	a8d6      	add	r0, sp, #856	; 0x358
   1395a:	abdc      	add	r3, sp, #880	; 0x370
   1395c:	9935      	ldr	r1, [sp, #212]	; 0xd4
   1395e:	462a      	mov	r2, r5
   13960:	f7fb fbd5 	bl	f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13964:	e7ff      	b.n	13966 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5d4>
   13966:	f24f 7028 	movw	r0, #63272	; 0xf728
   1396a:	f2c0 0001 	movt	r0, #1
   1396e:	f003 f810 	bl	16992 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13972:	902c      	str	r0, [sp, #176]	; 0xb0
   13974:	e7ff      	b.n	13976 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5e4>
   13976:	a8d6      	add	r0, sp, #856	; 0x358
   13978:	992c      	ldr	r1, [sp, #176]	; 0xb0
   1397a:	f003 f847 	bl	16a0c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1397e:	defe      	udf	#254	; 0xfe
    let rc = unsafe { os::os_mqueue_init(
        &mut SPI_DATA_QUEUE, 
        Some(spi_event_callback), 
   13980:	f244 208b 	movw	r0, #17035	; 0x428b
   13984:	f2c0 0001 	movt	r0, #1
   13988:	90ee      	str	r0, [sp, #952]	; 0x3b8
    let rc = unsafe { os::os_mqueue_init(
   1398a:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
   1398c:	f241 203c 	movw	r0, #4668	; 0x123c
   13990:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13994:	2200      	movs	r2, #0
   13996:	f006 fb0d 	bl	19fb4 <os_mqueue_init>
   1399a:	90ed      	str	r0, [sp, #948]	; 0x3b4
   1399c:	e7ff      	b.n	1399e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x60c>
        NULL
    ) };
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   1399e:	f24f 6008 	movw	r0, #62984	; 0xf608
   139a2:	f2c0 0001 	movt	r0, #1
   139a6:	6800      	ldr	r0, [r0, #0]
   139a8:	a9ed      	add	r1, sp, #948	; 0x3b4
   139aa:	91ef      	str	r1, [sp, #956]	; 0x3bc
   139ac:	90f0      	str	r0, [sp, #960]	; 0x3c0
   139ae:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
   139b0:	f8cd 0568 	str.w	r0, [sp, #1384]	; 0x568
   139b4:	99f0      	ldr	r1, [sp, #960]	; 0x3c0
   139b6:	f8cd 156c 	str.w	r1, [sp, #1388]	; 0x56c
   139ba:	6802      	ldr	r2, [r0, #0]
   139bc:	680b      	ldr	r3, [r1, #0]
   139be:	429a      	cmp	r2, r3
   139c0:	902b      	str	r0, [sp, #172]	; 0xac
   139c2:	912a      	str	r1, [sp, #168]	; 0xa8
   139c4:	d10a      	bne.n	139dc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x64a>
   139c6:	e7ff      	b.n	139c8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x636>

    //  Create the Semaphore that will signal whether the SPI request has completed
    let rc = unsafe { os::os_sem_init(&mut SPI_SEM, 0) };  //  Init to 0 tokens, so caller will block until SPI request is completed.
   139c8:	f241 202c 	movw	r0, #4652	; 0x122c
   139cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
   139d0:	2100      	movs	r1, #0
   139d2:	f006 ffe9 	bl	1a9a8 <os_sem_init>
   139d6:	f8cd 0420 	str.w	r0, [sp, #1056]	; 0x420
   139da:	e07b      	b.n	13ad4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x742>
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   139dc:	f24f 6060 	movw	r0, #63072	; 0xf660
   139e0:	f2c0 0001 	movt	r0, #1
   139e4:	6801      	ldr	r1, [r0, #0]
   139e6:	982b      	ldr	r0, [sp, #172]	; 0xac
   139e8:	f8cd 0400 	str.w	r0, [sp, #1024]	; 0x400
   139ec:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   139ee:	f8cd 2404 	str.w	r2, [sp, #1028]	; 0x404
   139f2:	f24f 734c 	movw	r3, #63308	; 0xf74c
   139f6:	f2c0 0301 	movt	r3, #1
   139fa:	681b      	ldr	r3, [r3, #0]
   139fc:	f24f 6c80 	movw	ip, #63104	; 0xf680
   13a00:	f2c0 0c01 	movt	ip, #1
   13a04:	f8dc c000 	ldr.w	ip, [ip]
   13a08:	46ee      	mov	lr, sp
   13a0a:	2400      	movs	r4, #0
   13a0c:	f8ce 4000 	str.w	r4, [lr]
   13a10:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   13a14:	2201      	movs	r2, #1
   13a16:	9129      	str	r1, [sp, #164]	; 0xa4
   13a18:	4619      	mov	r1, r3
   13a1a:	4663      	mov	r3, ip
   13a1c:	f7fb fb77 	bl	f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13a20:	e7ff      	b.n	13a22 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x690>
   13a22:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
   13a26:	90fd      	str	r0, [sp, #1012]	; 0x3f4
   13a28:	f20d 4004 	addw	r0, sp, #1028	; 0x404
   13a2c:	90fe      	str	r0, [sp, #1016]	; 0x3f8
   13a2e:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   13a32:	90ff      	str	r0, [sp, #1020]	; 0x3fc
   13a34:	98fd      	ldr	r0, [sp, #1012]	; 0x3f4
   13a36:	f8cd 0570 	str.w	r0, [sp, #1392]	; 0x570
   13a3a:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
   13a3c:	f8cd 1574 	str.w	r1, [sp, #1396]	; 0x574
   13a40:	9aff      	ldr	r2, [sp, #1020]	; 0x3fc
   13a42:	f8cd 2578 	str.w	r2, [sp, #1400]	; 0x578
   13a46:	f64f 639b 	movw	r3, #65179	; 0xfe9b
   13a4a:	f2c0 0300 	movt	r3, #0
   13a4e:	9128      	str	r1, [sp, #160]	; 0xa0
   13a50:	4619      	mov	r1, r3
   13a52:	9227      	str	r2, [sp, #156]	; 0x9c
   13a54:	f7fc fa59 	bl	ff0a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13a58:	9026      	str	r0, [sp, #152]	; 0x98
   13a5a:	9125      	str	r1, [sp, #148]	; 0x94
   13a5c:	e7ff      	b.n	13a5e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6cc>
   13a5e:	f64f 619b 	movw	r1, #65179	; 0xfe9b
   13a62:	f2c0 0100 	movt	r1, #0
   13a66:	9828      	ldr	r0, [sp, #160]	; 0xa0
   13a68:	f7fc fa4f 	bl	ff0a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13a6c:	9024      	str	r0, [sp, #144]	; 0x90
   13a6e:	9123      	str	r1, [sp, #140]	; 0x8c
   13a70:	e7ff      	b.n	13a72 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6e0>
   13a72:	f646 716f 	movw	r1, #28527	; 0x6f6f
   13a76:	f2c0 0101 	movt	r1, #1
   13a7a:	9827      	ldr	r0, [sp, #156]	; 0x9c
   13a7c:	f7fc fa84 	bl	ff88 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13a80:	9022      	str	r0, [sp, #136]	; 0x88
   13a82:	9121      	str	r1, [sp, #132]	; 0x84
   13a84:	e7ff      	b.n	13a86 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6f4>
   13a86:	9826      	ldr	r0, [sp, #152]	; 0x98
   13a88:	90f7      	str	r0, [sp, #988]	; 0x3dc
   13a8a:	9925      	ldr	r1, [sp, #148]	; 0x94
   13a8c:	91f8      	str	r1, [sp, #992]	; 0x3e0
   13a8e:	9a24      	ldr	r2, [sp, #144]	; 0x90
   13a90:	92f9      	str	r2, [sp, #996]	; 0x3e4
   13a92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   13a94:	93fa      	str	r3, [sp, #1000]	; 0x3e8
   13a96:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
   13a9a:	f8cd c3ec 	str.w	ip, [sp, #1004]	; 0x3ec
   13a9e:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
   13aa2:	f8cd e3f0 	str.w	lr, [sp, #1008]	; 0x3f0
   13aa6:	466c      	mov	r4, sp
   13aa8:	2503      	movs	r5, #3
   13aaa:	6025      	str	r5, [r4, #0]
   13aac:	a8f1      	add	r0, sp, #964	; 0x3c4
   13aae:	abf7      	add	r3, sp, #988	; 0x3dc
   13ab0:	9929      	ldr	r1, [sp, #164]	; 0xa4
   13ab2:	462a      	mov	r2, r5
   13ab4:	f7fb fb2b 	bl	f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13ab8:	e7ff      	b.n	13aba <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x728>
   13aba:	f24f 7050 	movw	r0, #63312	; 0xf750
   13abe:	f2c0 0001 	movt	r0, #1
   13ac2:	f002 ff66 	bl	16992 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13ac6:	9020      	str	r0, [sp, #128]	; 0x80
   13ac8:	e7ff      	b.n	13aca <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x738>
   13aca:	a8f1      	add	r0, sp, #964	; 0x3c4
   13acc:	9920      	ldr	r1, [sp, #128]	; 0x80
   13ace:	f002 ff9d 	bl	16a0c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13ad2:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   13ad4:	f24f 6008 	movw	r0, #62984	; 0xf608
   13ad8:	f2c0 0001 	movt	r0, #1
   13adc:	6800      	ldr	r0, [r0, #0]
   13ade:	f50d 6184 	add.w	r1, sp, #1056	; 0x420
   13ae2:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
   13ae6:	f8cd 0428 	str.w	r0, [sp, #1064]	; 0x428
   13aea:	f8dd 0424 	ldr.w	r0, [sp, #1060]	; 0x424
   13aee:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
   13af2:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
   13af6:	f8cd 1580 	str.w	r1, [sp, #1408]	; 0x580
   13afa:	6802      	ldr	r2, [r0, #0]
   13afc:	680b      	ldr	r3, [r1, #0]
   13afe:	429a      	cmp	r2, r3
   13b00:	901f      	str	r0, [sp, #124]	; 0x7c
   13b02:	911e      	str	r1, [sp, #120]	; 0x78
   13b04:	d10a      	bne.n	13b1c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x78a>
   13b06:	e7ff      	b.n	13b08 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x776>

    //  Create the Semaphore that will throttle the number of queued SPI requests
    let rc = unsafe { os::os_sem_init(&mut SPI_THROTTLE_SEM, 2) };  //  Only max 2 requests queued, the next request will block
   13b08:	f241 2034 	movw	r0, #4660	; 0x1234
   13b0c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13b10:	2102      	movs	r1, #2
   13b12:	f006 ff49 	bl	1a9a8 <os_sem_init>
   13b16:	f8cd 0488 	str.w	r0, [sp, #1160]	; 0x488
   13b1a:	e088      	b.n	13c2e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x89c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   13b1c:	f24f 6060 	movw	r0, #63072	; 0xf660
   13b20:	f2c0 0001 	movt	r0, #1
   13b24:	6801      	ldr	r1, [r0, #0]
   13b26:	981f      	ldr	r0, [sp, #124]	; 0x7c
   13b28:	f8cd 0468 	str.w	r0, [sp, #1128]	; 0x468
   13b2c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13b2e:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
   13b32:	f24f 7378 	movw	r3, #63352	; 0xf778
   13b36:	f2c0 0301 	movt	r3, #1
   13b3a:	681b      	ldr	r3, [r3, #0]
   13b3c:	f24f 6c80 	movw	ip, #63104	; 0xf680
   13b40:	f2c0 0c01 	movt	ip, #1
   13b44:	f8dc c000 	ldr.w	ip, [ip]
   13b48:	46ee      	mov	lr, sp
   13b4a:	2400      	movs	r4, #0
   13b4c:	f8ce 4000 	str.w	r4, [lr]
   13b50:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   13b54:	2201      	movs	r2, #1
   13b56:	911d      	str	r1, [sp, #116]	; 0x74
   13b58:	4619      	mov	r1, r3
   13b5a:	4663      	mov	r3, ip
   13b5c:	f7fb fad7 	bl	f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13b60:	e7ff      	b.n	13b62 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x7d0>
   13b62:	f50d 608d 	add.w	r0, sp, #1128	; 0x468
   13b66:	f8cd 045c 	str.w	r0, [sp, #1116]	; 0x45c
   13b6a:	f20d 406c 	addw	r0, sp, #1132	; 0x46c
   13b6e:	f8cd 0460 	str.w	r0, [sp, #1120]	; 0x460
   13b72:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   13b76:	f8cd 0464 	str.w	r0, [sp, #1124]	; 0x464
   13b7a:	f8dd 045c 	ldr.w	r0, [sp, #1116]	; 0x45c
   13b7e:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
   13b82:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   13b86:	f8cd 1588 	str.w	r1, [sp, #1416]	; 0x588
   13b8a:	f8dd 2464 	ldr.w	r2, [sp, #1124]	; 0x464
   13b8e:	f8cd 258c 	str.w	r2, [sp, #1420]	; 0x58c
   13b92:	f64f 63ef 	movw	r3, #65263	; 0xfeef
   13b96:	f2c0 0300 	movt	r3, #0
   13b9a:	911c      	str	r1, [sp, #112]	; 0x70
   13b9c:	4619      	mov	r1, r3
   13b9e:	921b      	str	r2, [sp, #108]	; 0x6c
   13ba0:	f7fc f9dd 	bl	ff5e <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13ba4:	901a      	str	r0, [sp, #104]	; 0x68
   13ba6:	9119      	str	r1, [sp, #100]	; 0x64
   13ba8:	e7ff      	b.n	13baa <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x818>
   13baa:	f64f 61ef 	movw	r1, #65263	; 0xfeef
   13bae:	f2c0 0100 	movt	r1, #0
   13bb2:	981c      	ldr	r0, [sp, #112]	; 0x70
   13bb4:	f7fc f9d3 	bl	ff5e <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13bb8:	9018      	str	r0, [sp, #96]	; 0x60
   13bba:	9117      	str	r1, [sp, #92]	; 0x5c
   13bbc:	e7ff      	b.n	13bbe <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x82c>
   13bbe:	f646 716f 	movw	r1, #28527	; 0x6f6f
   13bc2:	f2c0 0101 	movt	r1, #1
   13bc6:	981b      	ldr	r0, [sp, #108]	; 0x6c
   13bc8:	f7fc f9de 	bl	ff88 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13bcc:	9016      	str	r0, [sp, #88]	; 0x58
   13bce:	9115      	str	r1, [sp, #84]	; 0x54
   13bd0:	e7ff      	b.n	13bd2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x840>
   13bd2:	981a      	ldr	r0, [sp, #104]	; 0x68
   13bd4:	f8cd 0444 	str.w	r0, [sp, #1092]	; 0x444
   13bd8:	9919      	ldr	r1, [sp, #100]	; 0x64
   13bda:	f8cd 1448 	str.w	r1, [sp, #1096]	; 0x448
   13bde:	9a18      	ldr	r2, [sp, #96]	; 0x60
   13be0:	f8cd 244c 	str.w	r2, [sp, #1100]	; 0x44c
   13be4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   13be6:	f8cd 3450 	str.w	r3, [sp, #1104]	; 0x450
   13bea:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
   13bee:	f8cd c454 	str.w	ip, [sp, #1108]	; 0x454
   13bf2:	f8dd e054 	ldr.w	lr, [sp, #84]	; 0x54
   13bf6:	f8cd e458 	str.w	lr, [sp, #1112]	; 0x458
   13bfa:	466c      	mov	r4, sp
   13bfc:	2503      	movs	r5, #3
   13bfe:	6025      	str	r5, [r4, #0]
   13c00:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   13c04:	f20d 4344 	addw	r3, sp, #1092	; 0x444
   13c08:	991d      	ldr	r1, [sp, #116]	; 0x74
   13c0a:	462a      	mov	r2, r5
   13c0c:	f7fb fa7f 	bl	f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13c10:	e7ff      	b.n	13c12 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x880>
   13c12:	f24f 707c 	movw	r0, #63356	; 0xf77c
   13c16:	f2c0 0001 	movt	r0, #1
   13c1a:	f002 feba 	bl	16992 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13c1e:	9014      	str	r0, [sp, #80]	; 0x50
   13c20:	e7ff      	b.n	13c22 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x890>
   13c22:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   13c26:	9914      	ldr	r1, [sp, #80]	; 0x50
   13c28:	f002 fef0 	bl	16a0c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13c2c:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   13c2e:	f24f 6008 	movw	r0, #62984	; 0xf608
   13c32:	f2c0 0001 	movt	r0, #1
   13c36:	6800      	ldr	r0, [r0, #0]
   13c38:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
   13c3c:	f8cd 148c 	str.w	r1, [sp, #1164]	; 0x48c
   13c40:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
   13c44:	f8dd 048c 	ldr.w	r0, [sp, #1164]	; 0x48c
   13c48:	f8cd 0590 	str.w	r0, [sp, #1424]	; 0x590
   13c4c:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   13c50:	f8cd 1594 	str.w	r1, [sp, #1428]	; 0x594
   13c54:	6802      	ldr	r2, [r0, #0]
   13c56:	680b      	ldr	r3, [r1, #0]
   13c58:	429a      	cmp	r2, r3
   13c5a:	9013      	str	r0, [sp, #76]	; 0x4c
   13c5c:	9112      	str	r1, [sp, #72]	; 0x48
   13c5e:	d125      	bne.n	13cac <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x91a>
   13c60:	e7ff      	b.n	13c62 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x8d0>
    
    //  Create a task to send SPI requests sequentially from the SPI Event Queue and Mbuf Queue
    os::task_init(                //  Create a new task and start it...
        unsafe { &mut SPI_TASK }, //  Task object will be saved here
        &init_strn!( "spi" ),     //  Name of task
   13c62:	f24f 70a8 	movw	r0, #63400	; 0xf7a8
   13c66:	f2c0 0001 	movt	r0, #1
   13c6a:	6801      	ldr	r1, [r0, #0]
        Some( spi_task_func ),    //  Function to execute when task starts
   13c6c:	f643 600d 	movw	r0, #15885	; 0x3e0d
   13c70:	f2c0 0001 	movt	r0, #1
   13c74:	f8cd 04f4 	str.w	r0, [sp, #1268]	; 0x4f4
    os::task_init(                //  Create a new task and start it...
   13c78:	f8dd 24f4 	ldr.w	r2, [sp, #1268]	; 0x4f4
   13c7c:	4668      	mov	r0, sp
   13c7e:	f44f 7380 	mov.w	r3, #256	; 0x100
   13c82:	6103      	str	r3, [r0, #16]
   13c84:	60c3      	str	r3, [r0, #12]
   13c86:	f241 23b4 	movw	r3, #4788	; 0x12b4
   13c8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c8e:	6083      	str	r3, [r0, #8]
   13c90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13c94:	6043      	str	r3, [r0, #4]
   13c96:	230a      	movs	r3, #10
   13c98:	6003      	str	r3, [r0, #0]
   13c9a:	f241 2064 	movw	r0, #4708	; 0x1264
   13c9e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13ca2:	2300      	movs	r3, #0
   13ca4:	f7fb fb31 	bl	f30a <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>
   13ca8:	9011      	str	r0, [sp, #68]	; 0x44
   13caa:	e088      	b.n	13dbe <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   13cac:	f24f 6060 	movw	r0, #63072	; 0xf660
   13cb0:	f2c0 0001 	movt	r0, #1
   13cb4:	6801      	ldr	r1, [r0, #0]
   13cb6:	9813      	ldr	r0, [sp, #76]	; 0x4c
   13cb8:	f8cd 04d0 	str.w	r0, [sp, #1232]	; 0x4d0
   13cbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
   13cbe:	f8cd 24d4 	str.w	r2, [sp, #1236]	; 0x4d4
   13cc2:	f24f 7378 	movw	r3, #63352	; 0xf778
   13cc6:	f2c0 0301 	movt	r3, #1
   13cca:	681b      	ldr	r3, [r3, #0]
   13ccc:	f24f 6c80 	movw	ip, #63104	; 0xf680
   13cd0:	f2c0 0c01 	movt	ip, #1
   13cd4:	f8dc c000 	ldr.w	ip, [ip]
   13cd8:	46ee      	mov	lr, sp
   13cda:	2400      	movs	r4, #0
   13cdc:	f8ce 4000 	str.w	r4, [lr]
   13ce0:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   13ce4:	2201      	movs	r2, #1
   13ce6:	9110      	str	r1, [sp, #64]	; 0x40
   13ce8:	4619      	mov	r1, r3
   13cea:	4663      	mov	r3, ip
   13cec:	f7fb fa0f 	bl	f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13cf0:	e7ff      	b.n	13cf2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x960>
   13cf2:	f50d 609a 	add.w	r0, sp, #1232	; 0x4d0
   13cf6:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
   13cfa:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
   13cfe:	f8cd 04c8 	str.w	r0, [sp, #1224]	; 0x4c8
   13d02:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   13d06:	f8cd 04cc 	str.w	r0, [sp, #1228]	; 0x4cc
   13d0a:	f8dd 04c4 	ldr.w	r0, [sp, #1220]	; 0x4c4
   13d0e:	f8cd 0598 	str.w	r0, [sp, #1432]	; 0x598
   13d12:	f8dd 14c8 	ldr.w	r1, [sp, #1224]	; 0x4c8
   13d16:	f8cd 159c 	str.w	r1, [sp, #1436]	; 0x59c
   13d1a:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
   13d1e:	f8cd 25a0 	str.w	r2, [sp, #1440]	; 0x5a0
   13d22:	f64f 63ef 	movw	r3, #65263	; 0xfeef
   13d26:	f2c0 0300 	movt	r3, #0
   13d2a:	910f      	str	r1, [sp, #60]	; 0x3c
   13d2c:	4619      	mov	r1, r3
   13d2e:	920e      	str	r2, [sp, #56]	; 0x38
   13d30:	f7fc f915 	bl	ff5e <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13d34:	900d      	str	r0, [sp, #52]	; 0x34
   13d36:	910c      	str	r1, [sp, #48]	; 0x30
   13d38:	e7ff      	b.n	13d3a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9a8>
   13d3a:	f64f 61ef 	movw	r1, #65263	; 0xfeef
   13d3e:	f2c0 0100 	movt	r1, #0
   13d42:	980f      	ldr	r0, [sp, #60]	; 0x3c
   13d44:	f7fc f90b 	bl	ff5e <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13d48:	900b      	str	r0, [sp, #44]	; 0x2c
   13d4a:	910a      	str	r1, [sp, #40]	; 0x28
   13d4c:	e7ff      	b.n	13d4e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9bc>
   13d4e:	f646 716f 	movw	r1, #28527	; 0x6f6f
   13d52:	f2c0 0101 	movt	r1, #1
   13d56:	980e      	ldr	r0, [sp, #56]	; 0x38
   13d58:	f7fc f916 	bl	ff88 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13d5c:	9009      	str	r0, [sp, #36]	; 0x24
   13d5e:	9108      	str	r1, [sp, #32]
   13d60:	e7ff      	b.n	13d62 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9d0>
   13d62:	980d      	ldr	r0, [sp, #52]	; 0x34
   13d64:	f8cd 04ac 	str.w	r0, [sp, #1196]	; 0x4ac
   13d68:	990c      	ldr	r1, [sp, #48]	; 0x30
   13d6a:	f8cd 14b0 	str.w	r1, [sp, #1200]	; 0x4b0
   13d6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13d70:	f8cd 24b4 	str.w	r2, [sp, #1204]	; 0x4b4
   13d74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13d76:	f8cd 34b8 	str.w	r3, [sp, #1208]	; 0x4b8
   13d7a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   13d7e:	f8cd c4bc 	str.w	ip, [sp, #1212]	; 0x4bc
   13d82:	f8dd e020 	ldr.w	lr, [sp, #32]
   13d86:	f8cd e4c0 	str.w	lr, [sp, #1216]	; 0x4c0
   13d8a:	466c      	mov	r4, sp
   13d8c:	2503      	movs	r5, #3
   13d8e:	6025      	str	r5, [r4, #0]
   13d90:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   13d94:	f20d 43ac 	addw	r3, sp, #1196	; 0x4ac
   13d98:	9910      	ldr	r1, [sp, #64]	; 0x40
   13d9a:	462a      	mov	r2, r5
   13d9c:	f7fb f9b7 	bl	f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13da0:	e7ff      	b.n	13da2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa10>
   13da2:	f24f 708c 	movw	r0, #63372	; 0xf78c
   13da6:	f2c0 0001 	movt	r0, #1
   13daa:	f002 fdf2 	bl	16992 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13dae:	9007      	str	r0, [sp, #28]
   13db0:	e7ff      	b.n	13db2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa20>
   13db2:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   13db6:	9907      	ldr	r1, [sp, #28]
   13db8:	f002 fe28 	bl	16a0c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13dbc:	defe      	udf	#254	; 0xfe
    os::task_init(                //  Create a new task and start it...
   13dbe:	9811      	ldr	r0, [sp, #68]	; 0x44
   13dc0:	f7fb fa13 	bl	f1ea <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   13dc4:	f8cd 04f0 	str.w	r0, [sp, #1264]	; 0x4f0
   13dc8:	e7ff      	b.n	13dca <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa38>
        NULL,  //  Argument to be passed to above function
        10,    //  Task priority: highest is 0, lowest is 255 (main task is 127)
        os::OS_WAIT_FOREVER as u32,     //  Don't do sanity / watchdog checking
        unsafe { &mut SPI_TASK_STACK }, //  Stack space for the task
        SPI_TASK_STACK_SIZE as u16      //  Size of the stack (in 4-byte units)
    ) ? ;                               //  `?` means check for error
   13dca:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   13dce:	1e41      	subs	r1, r0, #1
   13dd0:	bf18      	it	ne
   13dd2:	2101      	movne	r1, #1
   13dd4:	2801      	cmp	r0, #1
   13dd6:	d001      	beq.n	13ddc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa4a>
   13dd8:	e7ff      	b.n	13dda <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa48>
   13dda:	e005      	b.n	13de8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa56>
   13ddc:	2000      	movs	r0, #0
    Ok(())
   13dde:	9069      	str	r0, [sp, #420]	; 0x1a4
   13de0:	2001      	movs	r0, #1
   13de2:	9069      	str	r0, [sp, #420]	; 0x1a4
}
   13de4:	e008      	b.n	13df8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>
    os::task_init(                //  Create a new task and start it...
   13de6:	defe      	udf	#254	; 0xfe
    ) ? ;                               //  `?` means check for error
   13de8:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   13dec:	f8cd 05a4 	str.w	r0, [sp, #1444]	; 0x5a4
   13df0:	f7fb fa6e 	bl	f2d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   13df4:	9006      	str	r0, [sp, #24]
   13df6:	e003      	b.n	13e00 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa6e>
}
   13df8:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   13dfa:	f50d 6db5 	add.w	sp, sp, #1448	; 0x5a8
   13dfe:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;                               //  `?` means check for error
   13e00:	9806      	ldr	r0, [sp, #24]
   13e02:	f7fb f9e6 	bl	f1d2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   13e06:	9069      	str	r0, [sp, #420]	; 0x1a4
   13e08:	e7ff      	b.n	13e0a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa78>
   13e0a:	e7f5      	b.n	13df8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>

00013e0c <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E>:

/// SPI Task Function.  Execute sequentially each SPI request posted to our Event Queue.  When there are no requests to process, block until one arrives.
extern "C" fn spi_task_func(_arg: Ptr) {
   13e0c:	b580      	push	{r7, lr}
   13e0e:	b082      	sub	sp, #8
   13e10:	9001      	str	r0, [sp, #4]
    loop {
   13e12:	e7ff      	b.n	13e14 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>
        //  Forever read SPI requests and execute them. Will call spi_event_callback().
        os::eventq_run(
   13e14:	f241 2054 	movw	r0, #4692	; 0x1254
   13e18:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13e1c:	f7fb fa5c 	bl	f2d8 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
   13e20:	9000      	str	r0, [sp, #0]
   13e22:	e7ff      	b.n	13e24 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x18>
   13e24:	f24f 71ac 	movw	r1, #63404	; 0xf7ac
   13e28:	f2c0 0101 	movt	r1, #1
   13e2c:	f24f 73b8 	movw	r3, #63416	; 0xf7b8
   13e30:	f2c0 0301 	movt	r3, #1
   13e34:	220b      	movs	r2, #11
   13e36:	9800      	ldr	r0, [sp, #0]
   13e38:	f7fb f998 	bl	f16c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   13e3c:	e7ff      	b.n	13e3e <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x32>
            unsafe { &mut SPI_EVENT_QUEUE }
        ).expect("eventq fail");

        //  Tickle the watchdog so that the Watchdog Timer doesn't expire. Mynewt assumes the process is hung if we don't tickle the watchdog.
        unsafe { hal_watchdog_tickle() };
   13e3e:	f005 fced 	bl	1981c <hal_watchdog_tickle>
   13e42:	e7ff      	b.n	13e44 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x38>
    loop {
   13e44:	e7e6      	b.n	13e14 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>

00013e46 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>:
    }
}

/// Set pending request for non-blocking SPI write for Command Byte. Returns without waiting for write to complete.
pub fn spi_noblock_write_command(cmd: u8) -> MynewtResult<()> {
   13e46:	b580      	push	{r7, lr}
   13e48:	b08c      	sub	sp, #48	; 0x30
   13e4a:	4601      	mov	r1, r0
   13e4c:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    //  If there is a pending Command Byte, enqueue it.
    spi_noblock_write_flush() ? ;
   13e50:	9104      	str	r1, [sp, #16]
   13e52:	f000 f892 	bl	13f7a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   13e56:	9003      	str	r0, [sp, #12]
   13e58:	e7ff      	b.n	13e5a <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x14>
   13e5a:	9803      	ldr	r0, [sp, #12]
   13e5c:	f7fb f9c5 	bl	f1ea <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   13e60:	9006      	str	r0, [sp, #24]
   13e62:	e7ff      	b.n	13e64 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x1e>
   13e64:	9806      	ldr	r0, [sp, #24]
   13e66:	1e41      	subs	r1, r0, #1
   13e68:	bf18      	it	ne
   13e6a:	2101      	movne	r1, #1
   13e6c:	2801      	cmp	r0, #1
   13e6e:	d001      	beq.n	13e74 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2e>
   13e70:	e7ff      	b.n	13e72 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2c>
   13e72:	e00c      	b.n	13e8e <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x48>
    //  Set the pending Command Byte.
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   13e74:	f640 2020 	movw	r0, #2592	; 0xa20
   13e78:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13e7c:	9904      	ldr	r1, [sp, #16]
   13e7e:	f7ff f9b2 	bl	131e6 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>
   13e82:	f88d 101d 	strb.w	r1, [sp, #29]
   13e86:	f88d 001c 	strb.w	r0, [sp, #28]
   13e8a:	e00f      	b.n	13eac <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x66>
    spi_noblock_write_flush() ? ;
   13e8c:	defe      	udf	#254	; 0xfe
   13e8e:	9806      	ldr	r0, [sp, #24]
   13e90:	900b      	str	r0, [sp, #44]	; 0x2c
   13e92:	f7fb fa1d 	bl	f2d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   13e96:	9002      	str	r0, [sp, #8]
   13e98:	e002      	b.n	13ea0 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x5a>
        return Err(MynewtError::SYS_EINVAL);
    }
    Ok(())
}
   13e9a:	9805      	ldr	r0, [sp, #20]
   13e9c:	b00c      	add	sp, #48	; 0x30
   13e9e:	bd80      	pop	{r7, pc}
    spi_noblock_write_flush() ? ;
   13ea0:	9802      	ldr	r0, [sp, #8]
   13ea2:	f7fb f996 	bl	f1d2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   13ea6:	9005      	str	r0, [sp, #20]
   13ea8:	e7ff      	b.n	13eaa <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x64>
   13eaa:	e7f6      	b.n	13e9a <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   13eac:	a807      	add	r0, sp, #28
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   13eae:	f7fb f984 	bl	f1ba <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>
   13eb2:	9001      	str	r0, [sp, #4]
   13eb4:	e7ff      	b.n	13eb6 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x70>
   13eb6:	9801      	ldr	r0, [sp, #4]
   13eb8:	07c1      	lsls	r1, r0, #31
   13eba:	2900      	cmp	r1, #0
   13ebc:	d105      	bne.n	13eca <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x84>
   13ebe:	e7ff      	b.n	13ec0 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x7a>
   13ec0:	2000      	movs	r0, #0
    Ok(())
   13ec2:	9005      	str	r0, [sp, #20]
   13ec4:	2001      	movs	r0, #1
   13ec6:	9005      	str	r0, [sp, #20]
}
   13ec8:	e7e7      	b.n	13e9a <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   13eca:	f06f 0001 	mvn.w	r0, #1
        return Err(MynewtError::SYS_EINVAL);
   13ece:	9008      	str	r0, [sp, #32]
   13ed0:	9808      	ldr	r0, [sp, #32]
   13ed2:	9005      	str	r0, [sp, #20]
   13ed4:	e7e1      	b.n	13e9a <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>

00013ed6 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>:

/// Set pending request for non-blocking SPI write for Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_data(data: &[u8]) -> MynewtResult<()> {
   13ed6:	b580      	push	{r7, lr}
   13ed8:	b08e      	sub	sp, #56	; 0x38
   13eda:	900a      	str	r0, [sp, #40]	; 0x28
   13edc:	910b      	str	r1, [sp, #44]	; 0x2c
    assert!(unsafe { PENDING_CMD.len() } > 0);  //  Must have Command Byte before Data Bytes
   13ede:	f640 2220 	movw	r2, #2592	; 0xa20
   13ee2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13ee6:	9007      	str	r0, [sp, #28]
   13ee8:	4610      	mov	r0, r2
   13eea:	9106      	str	r1, [sp, #24]
   13eec:	f7ff f961 	bl	131b2 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   13ef0:	9005      	str	r0, [sp, #20]
   13ef2:	9104      	str	r1, [sp, #16]
   13ef4:	e7ff      	b.n	13ef6 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x20>
   13ef6:	9805      	ldr	r0, [sp, #20]
   13ef8:	9904      	ldr	r1, [sp, #16]
   13efa:	f7fa fcab 	bl	e854 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   13efe:	9003      	str	r0, [sp, #12]
   13f00:	e7ff      	b.n	13f02 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x2c>
   13f02:	9803      	ldr	r0, [sp, #12]
   13f04:	2800      	cmp	r0, #0
   13f06:	d00a      	beq.n	13f1e <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x48>
   13f08:	e7ff      	b.n	13f0a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x34>
    //  Append Data Bytes to Pending Data Bytes.
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   13f0a:	f640 2028 	movw	r0, #2600	; 0xa28
   13f0e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13f12:	9907      	ldr	r1, [sp, #28]
   13f14:	9a06      	ldr	r2, [sp, #24]
   13f16:	f7ff f958 	bl	131ca <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h5310f2928696ef27E>
   13f1a:	9002      	str	r0, [sp, #8]
   13f1c:	e00b      	b.n	13f36 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x60>
    assert!(unsafe { PENDING_CMD.len() } > 0);  //  Must have Command Byte before Data Bytes
   13f1e:	f24f 70c8 	movw	r0, #63432	; 0xf7c8
   13f22:	f2c0 0001 	movt	r0, #1
   13f26:	f24f 72fc 	movw	r2, #63484	; 0xf7fc
   13f2a:	f2c0 0201 	movt	r2, #1
   13f2e:	2132      	movs	r1, #50	; 0x32
   13f30:	f002 fd36 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13f34:	defe      	udf	#254	; 0xfe
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   13f36:	9802      	ldr	r0, [sp, #8]
   13f38:	f000 0001 	and.w	r0, r0, #1
   13f3c:	f7fb f94f 	bl	f1de <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   13f40:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   13f44:	e7ff      	b.n	13f46 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x70>
   13f46:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
   13f4a:	07c1      	lsls	r1, r0, #31
   13f4c:	2900      	cmp	r1, #0
   13f4e:	d001      	beq.n	13f54 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x7e>
   13f50:	e7ff      	b.n	13f52 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x7c>
   13f52:	e005      	b.n	13f60 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x8a>
   13f54:	2000      	movs	r0, #0
    Ok(())
   13f56:	9008      	str	r0, [sp, #32]
   13f58:	2001      	movs	r0, #1
   13f5a:	9008      	str	r0, [sp, #32]
}
   13f5c:	e004      	b.n	13f68 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x92>
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   13f5e:	defe      	udf	#254	; 0xfe
   13f60:	f7ff f905 	bl	1316e <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
   13f64:	9001      	str	r0, [sp, #4]
   13f66:	e002      	b.n	13f6e <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x98>
}
   13f68:	9808      	ldr	r0, [sp, #32]
   13f6a:	b00e      	add	sp, #56	; 0x38
   13f6c:	bd80      	pop	{r7, pc}
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   13f6e:	9801      	ldr	r0, [sp, #4]
   13f70:	f7fb f92f 	bl	f1d2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   13f74:	9008      	str	r0, [sp, #32]
   13f76:	e7ff      	b.n	13f78 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xa2>
   13f78:	e7f6      	b.n	13f68 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x92>

00013f7a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>:

/// Enqueue any pending request for non-blocking SPI write for Command Byte and Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_flush() -> MynewtResult<()> {
   13f7a:	b580      	push	{r7, lr}
   13f7c:	b090      	sub	sp, #64	; 0x40
    //  If no pending request, quit.
    if unsafe { PENDING_CMD.len() } == 0 &&
   13f7e:	f640 2020 	movw	r0, #2592	; 0xa20
   13f82:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13f86:	f7ff f914 	bl	131b2 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   13f8a:	900b      	str	r0, [sp, #44]	; 0x2c
   13f8c:	910a      	str	r1, [sp, #40]	; 0x28
   13f8e:	e016      	b.n	13fbe <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x44>
   13f90:	2001      	movs	r0, #1
   13f92:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   13f96:	e00c      	b.n	13fb2 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
   13f98:	2000      	movs	r0, #0
   13f9a:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   13f9e:	e008      	b.n	13fb2 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
        unsafe { PENDING_DATA.len() } == 0 {
   13fa0:	f640 2028 	movw	r0, #2600	; 0xa28
   13fa4:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13fa8:	f7ff f8f7 	bl	1319a <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc03b439e09ebac7fE>
   13fac:	9009      	str	r0, [sp, #36]	; 0x24
   13fae:	9108      	str	r1, [sp, #32]
   13fb0:	e00f      	b.n	13fd2 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x58>
    if unsafe { PENDING_CMD.len() } == 0 &&
   13fb2:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   13fb6:	07c0      	lsls	r0, r0, #31
   13fb8:	2800      	cmp	r0, #0
   13fba:	d11d      	bne.n	13ff8 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x7e>
   13fbc:	e013      	b.n	13fe6 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x6c>
   13fbe:	980b      	ldr	r0, [sp, #44]	; 0x2c
   13fc0:	990a      	ldr	r1, [sp, #40]	; 0x28
   13fc2:	f7fa fc47 	bl	e854 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   13fc6:	9007      	str	r0, [sp, #28]
   13fc8:	e7ff      	b.n	13fca <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x50>
   13fca:	9807      	ldr	r0, [sp, #28]
   13fcc:	2800      	cmp	r0, #0
   13fce:	d0e7      	beq.n	13fa0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x26>
   13fd0:	e7e2      	b.n	13f98 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        unsafe { PENDING_DATA.len() } == 0 {
   13fd2:	9809      	ldr	r0, [sp, #36]	; 0x24
   13fd4:	9908      	ldr	r1, [sp, #32]
   13fd6:	f7fa fc3d 	bl	e854 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   13fda:	9006      	str	r0, [sp, #24]
   13fdc:	e7ff      	b.n	13fde <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x64>
    if unsafe { PENDING_CMD.len() } == 0 &&
   13fde:	9806      	ldr	r0, [sp, #24]
   13fe0:	2800      	cmp	r0, #0
   13fe2:	d0d5      	beq.n	13f90 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x16>
   13fe4:	e7d8      	b.n	13f98 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        return Ok(());
    }
    //  Enqueue the pending SPI request into the Mbuf Queue
    if let Err(e) = spi_noblock_write(
        unsafe { PENDING_CMD[0] },  //  Command Byte
   13fe6:	f640 2020 	movw	r0, #2592	; 0xa20
   13fea:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13fee:	f7ff f8e0 	bl	131b2 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   13ff2:	9005      	str	r0, [sp, #20]
   13ff4:	9104      	str	r1, [sp, #16]
   13ff6:	e007      	b.n	14008 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x8e>
   13ff8:	2000      	movs	r0, #0
        return Ok(());
   13ffa:	900c      	str	r0, [sp, #48]	; 0x30
   13ffc:	2001      	movs	r0, #1
   13ffe:	900c      	str	r0, [sp, #48]	; 0x30
   14000:	e7ff      	b.n	14002 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    }
    //  Else clear the pending request and return Ok.
    unsafe { PENDING_CMD.clear() };
    unsafe { PENDING_DATA.clear() };
    Ok(())
}
   14002:	980c      	ldr	r0, [sp, #48]	; 0x30
   14004:	b010      	add	sp, #64	; 0x40
   14006:	bd80      	pop	{r7, pc}
        unsafe { PENDING_CMD[0] },  //  Command Byte
   14008:	9804      	ldr	r0, [sp, #16]
   1400a:	2800      	cmp	r0, #0
   1400c:	d03f      	beq.n	1408e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x114>
   1400e:	e7ff      	b.n	14010 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x96>
   14010:	9805      	ldr	r0, [sp, #20]
   14012:	7801      	ldrb	r1, [r0, #0]
        unsafe { &PENDING_DATA }    //  Data Bytes
   14014:	f640 2028 	movw	r0, #2600	; 0xa28
   14018:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1401c:	9103      	str	r1, [sp, #12]
   1401e:	f7ff f8bc 	bl	1319a <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc03b439e09ebac7fE>
   14022:	9002      	str	r0, [sp, #8]
   14024:	9101      	str	r1, [sp, #4]
   14026:	e7ff      	b.n	14028 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xae>
    if let Err(e) = spi_noblock_write(
   14028:	9803      	ldr	r0, [sp, #12]
   1402a:	9902      	ldr	r1, [sp, #8]
   1402c:	9a01      	ldr	r2, [sp, #4]
   1402e:	f000 f837 	bl	140a0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>
   14032:	900e      	str	r0, [sp, #56]	; 0x38
   14034:	e7ff      	b.n	14036 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xbc>
   14036:	980e      	ldr	r0, [sp, #56]	; 0x38
   14038:	2801      	cmp	r0, #1
   1403a:	d107      	bne.n	1404c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xd2>
   1403c:	e7ff      	b.n	1403e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xc4>
    unsafe { PENDING_CMD.clear() };
   1403e:	f640 2020 	movw	r0, #2592	; 0xa20
   14042:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14046:	f7ff f8e8 	bl	1321a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   1404a:	e014      	b.n	14076 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xfc>
    if let Err(e) = spi_noblock_write(
   1404c:	980e      	ldr	r0, [sp, #56]	; 0x38
   1404e:	900f      	str	r0, [sp, #60]	; 0x3c
        unsafe { PENDING_CMD.clear() };
   14050:	f640 2120 	movw	r1, #2592	; 0xa20
   14054:	f2c2 0100 	movt	r1, #8192	; 0x2000
   14058:	9000      	str	r0, [sp, #0]
   1405a:	4608      	mov	r0, r1
   1405c:	f7ff f8dd 	bl	1321a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   14060:	e7ff      	b.n	14062 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xe8>
        unsafe { PENDING_DATA.clear() };    
   14062:	f640 2028 	movw	r0, #2600	; 0xa28
   14066:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1406a:	f7ff f8ce 	bl	1320a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd10db62fd26673a3E>
   1406e:	e7ff      	b.n	14070 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xf6>
        return Err(e);
   14070:	9800      	ldr	r0, [sp, #0]
   14072:	900c      	str	r0, [sp, #48]	; 0x30
   14074:	e7c5      	b.n	14002 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    unsafe { PENDING_DATA.clear() };
   14076:	f640 2028 	movw	r0, #2600	; 0xa28
   1407a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1407e:	f7ff f8c4 	bl	1320a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd10db62fd26673a3E>
   14082:	e7ff      	b.n	14084 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x10a>
   14084:	2000      	movs	r0, #0
    Ok(())
   14086:	900c      	str	r0, [sp, #48]	; 0x30
   14088:	2001      	movs	r0, #1
   1408a:	900c      	str	r0, [sp, #48]	; 0x30
}
   1408c:	e7b9      	b.n	14002 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
        unsafe { PENDING_CMD[0] },  //  Command Byte
   1408e:	f64f 000c 	movw	r0, #63500	; 0xf80c
   14092:	f2c0 0001 	movt	r0, #1
   14096:	2100      	movs	r1, #0
   14098:	9a04      	ldr	r2, [sp, #16]
   1409a:	f002 fc97 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1409e:	defe      	udf	#254	; 0xfe

000140a0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>:

/// Enqueue request for non-blocking SPI write. Returns without waiting for write to complete.
/// Request must have a Command Byte, followed by optional Data Bytes.
fn spi_noblock_write(cmd: u8, data: &[u8]) -> MynewtResult<()> {
   140a0:	b580      	push	{r7, lr}
   140a2:	b0a0      	sub	sp, #128	; 0x80
   140a4:	4603      	mov	r3, r0
   140a6:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   140aa:	9116      	str	r1, [sp, #88]	; 0x58
   140ac:	9217      	str	r2, [sp, #92]	; 0x5c
   140ae:	f247 5030 	movw	r0, #30000	; 0x7530
    console::print("spi data "); ////
    console::dump(data.as_ptr(), data.len() as u32); console::print("\n"); ////
    console::flush(); */

    //  Throttle the number of queued SPI requests.
    let timeout = 30_000;
   140b2:	9018      	str	r0, [sp, #96]	; 0x60
   140b4:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   140b8:	fba0 0c0c 	umull	r0, ip, r0, ip
   140bc:	f1bc 0f00 	cmp.w	ip, #0
   140c0:	920f      	str	r2, [sp, #60]	; 0x3c
   140c2:	910e      	str	r1, [sp, #56]	; 0x38
   140c4:	900d      	str	r0, [sp, #52]	; 0x34
   140c6:	f040 80c8 	bne.w	1425a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ba>
   140ca:	e7ff      	b.n	140cc <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x2c>
   140cc:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   140d0:	f2c1 0062 	movt	r0, #4194	; 0x1062
   140d4:	990d      	ldr	r1, [sp, #52]	; 0x34
   140d6:	fba1 0200 	umull	r0, r2, r1, r0
   140da:	0991      	lsrs	r1, r2, #6
   140dc:	f241 2234 	movw	r2, #4660	; 0x1234
   140e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   140e4:	900c      	str	r0, [sp, #48]	; 0x30
   140e6:	4610      	mov	r0, r2
   140e8:	f006 fc98 	bl	1aa1c <os_sem_pend>
   140ec:	e7ff      	b.n	140ee <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x4e>

    //  Allocate a new mbuf chain to copy the data to be sent.
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   140ee:	980e      	ldr	r0, [sp, #56]	; 0x38
   140f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   140f2:	f7fa fbaf 	bl	e854 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   140f6:	900b      	str	r0, [sp, #44]	; 0x2c
   140f8:	e7ff      	b.n	140fa <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x5a>
   140fa:	2001      	movs	r0, #1
   140fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   140fe:	fa10 f081 	uxtah	r0, r0, r1
   14102:	b282      	uxth	r2, r0
   14104:	4603      	mov	r3, r0
   14106:	4282      	cmp	r2, r0
   14108:	930a      	str	r3, [sp, #40]	; 0x28
   1410a:	f040 80b2 	bne.w	14272 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1d2>
   1410e:	e7ff      	b.n	14110 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x70>
   14110:	980a      	ldr	r0, [sp, #40]	; 0x28
   14112:	f8ad 0066 	strh.w	r0, [sp, #102]	; 0x66
    let mbuf = unsafe { os::os_msys_get_pkthdr(len, 0) };
   14116:	b280      	uxth	r0, r0
   14118:	2100      	movs	r1, #0
   1411a:	f006 f98d 	bl	1a438 <os_msys_get_pkthdr>
   1411e:	4601      	mov	r1, r0
   14120:	901a      	str	r0, [sp, #104]	; 0x68
   14122:	9109      	str	r1, [sp, #36]	; 0x24
   14124:	e7ff      	b.n	14126 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x86>
    if mbuf.is_null() {  //  If out of memory, quit.
   14126:	9809      	ldr	r0, [sp, #36]	; 0x24
   14128:	f000 fc7c 	bl	14a24 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   1412c:	9008      	str	r0, [sp, #32]
   1412e:	e7ff      	b.n	14130 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x90>
   14130:	9808      	ldr	r0, [sp, #32]
   14132:	07c1      	lsls	r1, r0, #31
   14134:	2900      	cmp	r1, #0
   14136:	d106      	bne.n	14146 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xa6>
   14138:	e7ff      	b.n	1413a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x9a>
   1413a:	f10d 0043 	add.w	r0, sp, #67	; 0x43
    }

    //  Append the Command Byte to the mbuf chain.
    let rc = unsafe { os::os_mbuf_append(
        mbuf, 
        core::mem::transmute(&cmd), 
   1413e:	901b      	str	r0, [sp, #108]	; 0x6c
   14140:	991b      	ldr	r1, [sp, #108]	; 0x6c
   14142:	9107      	str	r1, [sp, #28]
   14144:	e010      	b.n	14168 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc8>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   14146:	f241 2034 	movw	r0, #4660	; 0x1234
   1414a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1414e:	f006 fc33 	bl	1a9b8 <os_sem_release>
   14152:	e7ff      	b.n	14154 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xb4>
   14154:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   14158:	9012      	str	r0, [sp, #72]	; 0x48
   1415a:	9812      	ldr	r0, [sp, #72]	; 0x48
   1415c:	9011      	str	r0, [sp, #68]	; 0x44
   1415e:	e002      	b.n	14166 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
        return Err(MynewtError::SYS_EUNKNOWN); 
    }
    Ok(())
}
   14160:	9811      	ldr	r0, [sp, #68]	; 0x44
   14162:	b020      	add	sp, #128	; 0x80
   14164:	bd80      	pop	{r7, pc}
        return Err(MynewtError::SYS_ENOMEM); 
   14166:	e7fb      	b.n	14160 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
   14168:	2201      	movs	r2, #1
    let rc = unsafe { os::os_mbuf_append(
   1416a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1416c:	9907      	ldr	r1, [sp, #28]
   1416e:	f005 ffbb 	bl	1a0e8 <os_mbuf_append>
   14172:	4601      	mov	r1, r0
   14174:	901c      	str	r0, [sp, #112]	; 0x70
   14176:	9106      	str	r1, [sp, #24]
   14178:	e7ff      	b.n	1417a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xda>
    if rc != 0 {  //  If out of memory, quit.
   1417a:	9806      	ldr	r0, [sp, #24]
   1417c:	2800      	cmp	r0, #0
   1417e:	d106      	bne.n	1418e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xee>
   14180:	e7ff      	b.n	14182 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xe2>
        core::mem::transmute(data.as_ptr()), 
   14182:	980e      	ldr	r0, [sp, #56]	; 0x38
   14184:	990f      	ldr	r1, [sp, #60]	; 0x3c
   14186:	f7fa fb6d 	bl	e864 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
   1418a:	9005      	str	r0, [sp, #20]
   1418c:	e011      	b.n	141b2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x112>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   1418e:	9809      	ldr	r0, [sp, #36]	; 0x24
   14190:	f005 ff8e 	bl	1a0b0 <os_mbuf_free_chain>
   14194:	e7ff      	b.n	14196 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xf6>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   14196:	f241 2034 	movw	r0, #4660	; 0x1234
   1419a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1419e:	f006 fc0b 	bl	1a9b8 <os_sem_release>
   141a2:	e7ff      	b.n	141a4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x104>
   141a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   141a8:	9013      	str	r0, [sp, #76]	; 0x4c
   141aa:	9813      	ldr	r0, [sp, #76]	; 0x4c
   141ac:	9011      	str	r0, [sp, #68]	; 0x44
   141ae:	e7ff      	b.n	141b0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
   141b0:	e7d9      	b.n	14166 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        core::mem::transmute(data.as_ptr()), 
   141b2:	9805      	ldr	r0, [sp, #20]
   141b4:	901d      	str	r0, [sp, #116]	; 0x74
   141b6:	991d      	ldr	r1, [sp, #116]	; 0x74
   141b8:	9104      	str	r1, [sp, #16]
   141ba:	e7ff      	b.n	141bc <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x11c>
        data.len() as u16
   141bc:	980e      	ldr	r0, [sp, #56]	; 0x38
   141be:	990f      	ldr	r1, [sp, #60]	; 0x3c
   141c0:	f7fa fb48 	bl	e854 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   141c4:	9003      	str	r0, [sp, #12]
   141c6:	e7ff      	b.n	141c8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x128>
    let rc = unsafe { os::os_mbuf_append(
   141c8:	9803      	ldr	r0, [sp, #12]
   141ca:	b282      	uxth	r2, r0
   141cc:	9809      	ldr	r0, [sp, #36]	; 0x24
   141ce:	9904      	ldr	r1, [sp, #16]
   141d0:	f005 ff8a 	bl	1a0e8 <os_mbuf_append>
   141d4:	4601      	mov	r1, r0
   141d6:	901e      	str	r0, [sp, #120]	; 0x78
   141d8:	9102      	str	r1, [sp, #8]
   141da:	e7ff      	b.n	141dc <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x13c>
    if rc != 0 {  //  If out of memory, quit.
   141dc:	9802      	ldr	r0, [sp, #8]
   141de:	2800      	cmp	r0, #0
   141e0:	d10f      	bne.n	14202 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x162>
   141e2:	e7ff      	b.n	141e4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x144>
    let rc = unsafe { os::os_mqueue_put(
   141e4:	f241 203c 	movw	r0, #4668	; 0x123c
   141e8:	f2c2 0000 	movt	r0, #8192	; 0x2000
   141ec:	f241 2154 	movw	r1, #4692	; 0x1254
   141f0:	f2c2 0100 	movt	r1, #8192	; 0x2000
   141f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   141f6:	f005 fef9 	bl	19fec <os_mqueue_put>
   141fa:	4601      	mov	r1, r0
   141fc:	901f      	str	r0, [sp, #124]	; 0x7c
   141fe:	9101      	str	r1, [sp, #4]
   14200:	e011      	b.n	14226 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x186>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   14202:	9809      	ldr	r0, [sp, #36]	; 0x24
   14204:	f005 ff54 	bl	1a0b0 <os_mbuf_free_chain>
   14208:	e7ff      	b.n	1420a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x16a>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   1420a:	f241 2034 	movw	r0, #4660	; 0x1234
   1420e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14212:	f006 fbd1 	bl	1a9b8 <os_sem_release>
   14216:	e7ff      	b.n	14218 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x178>
   14218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   1421c:	9014      	str	r0, [sp, #80]	; 0x50
   1421e:	9814      	ldr	r0, [sp, #80]	; 0x50
   14220:	9011      	str	r0, [sp, #68]	; 0x44
   14222:	e7ff      	b.n	14224 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
   14224:	e7c4      	b.n	141b0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
    if rc != 0 {  //  If out of memory, quit.
   14226:	9801      	ldr	r0, [sp, #4]
   14228:	2800      	cmp	r0, #0
   1422a:	d105      	bne.n	14238 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x198>
   1422c:	e7ff      	b.n	1422e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x18e>
   1422e:	2000      	movs	r0, #0
    Ok(())
   14230:	9011      	str	r0, [sp, #68]	; 0x44
   14232:	2001      	movs	r0, #1
   14234:	9011      	str	r0, [sp, #68]	; 0x44
}
   14236:	e793      	b.n	14160 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   14238:	9809      	ldr	r0, [sp, #36]	; 0x24
   1423a:	f005 ff39 	bl	1a0b0 <os_mbuf_free_chain>
   1423e:	e7ff      	b.n	14240 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1a0>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   14240:	f241 2034 	movw	r0, #4660	; 0x1234
   14244:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14248:	f006 fbb6 	bl	1a9b8 <os_sem_release>
   1424c:	e7ff      	b.n	1424e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ae>
   1424e:	f06f 000c 	mvn.w	r0, #12
        return Err(MynewtError::SYS_EUNKNOWN); 
   14252:	9015      	str	r0, [sp, #84]	; 0x54
   14254:	9815      	ldr	r0, [sp, #84]	; 0x54
   14256:	9011      	str	r0, [sp, #68]	; 0x44
   14258:	e7e4      	b.n	14224 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   1425a:	f64f 0030 	movw	r0, #63536	; 0xf830
   1425e:	f2c0 0001 	movt	r0, #1
   14262:	f64f 021c 	movw	r2, #63516	; 0xf81c
   14266:	f2c0 0201 	movt	r2, #1
   1426a:	2121      	movs	r1, #33	; 0x21
   1426c:	f002 fb98 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14270:	defe      	udf	#254	; 0xfe
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   14272:	f64f 0070 	movw	r0, #63600	; 0xf870
   14276:	f2c0 0001 	movt	r0, #1
   1427a:	f64f 0254 	movw	r2, #63572	; 0xf854
   1427e:	f2c0 0201 	movt	r2, #1
   14282:	211c      	movs	r1, #28
   14284:	f002 fb8c 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14288:	defe      	udf	#254	; 0xfe

0001428a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E>:

/// Callback for the event that is triggered when an SPI request is added to the queue.
extern "C" fn spi_event_callback(_event: *mut os::os_event) {    
   1428a:	b5b0      	push	{r4, r5, r7, lr}
   1428c:	b0c4      	sub	sp, #272	; 0x110
   1428e:	9038      	str	r0, [sp, #224]	; 0xe0
   14290:	e7ff      	b.n	14292 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
    loop {  //  For each mbuf chain found...
        //  Get the next SPI request, stored as an mbuf chain.
        let om = unsafe { os::os_mqueue_get(&mut SPI_DATA_QUEUE) };
   14292:	f241 203c 	movw	r0, #4668	; 0x123c
   14296:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1429a:	f005 fe94 	bl	19fc6 <os_mqueue_get>
   1429e:	4601      	mov	r1, r0
   142a0:	9039      	str	r0, [sp, #228]	; 0xe4
   142a2:	911b      	str	r1, [sp, #108]	; 0x6c
   142a4:	e7ff      	b.n	142a6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c>
        if om.is_null() { break; }
   142a6:	981b      	ldr	r0, [sp, #108]	; 0x6c
   142a8:	f000 fbbc 	bl	14a24 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   142ac:	901a      	str	r0, [sp, #104]	; 0x68
   142ae:	e7ff      	b.n	142b0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26>
   142b0:	981a      	ldr	r0, [sp, #104]	; 0x68
   142b2:	07c1      	lsls	r1, r0, #31
   142b4:	2900      	cmp	r1, #0
   142b6:	d106      	bne.n	142c6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x3c>
   142b8:	e7ff      	b.n	142ba <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x30>

        //  Send the mbuf chain.
        let mut m = om;
   142ba:	981b      	ldr	r0, [sp, #108]	; 0x6c
   142bc:	901c      	str	r0, [sp, #112]	; 0x70
   142be:	2101      	movs	r1, #1
        let mut first_byte = true;
   142c0:	f88d 1075 	strb.w	r1, [sp, #117]	; 0x75
        while !m.is_null() {  //  For each mbuf in the chain...
   142c4:	e001      	b.n	142ca <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>

        //  Release the throttle semaphore to allow next request to be queued.
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
        assert_eq!(rc, 0, "sem fail");    
    }
}
   142c6:	b044      	add	sp, #272	; 0x110
   142c8:	bdb0      	pop	{r4, r5, r7, pc}
        while !m.is_null() {  //  For each mbuf in the chain...
   142ca:	981c      	ldr	r0, [sp, #112]	; 0x70
   142cc:	f000 fbaa 	bl	14a24 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   142d0:	9019      	str	r0, [sp, #100]	; 0x64
   142d2:	e7ff      	b.n	142d4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x4a>
   142d4:	9819      	ldr	r0, [sp, #100]	; 0x64
   142d6:	07c1      	lsls	r1, r0, #31
   142d8:	2900      	cmp	r1, #0
   142da:	d004      	beq.n	142e6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x5c>
   142dc:	e7ff      	b.n	142de <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x54>
        unsafe { os::os_mbuf_free_chain(om) };
   142de:	981b      	ldr	r0, [sp, #108]	; 0x6c
   142e0:	f005 fee6 	bl	1a0b0 <os_mbuf_free_chain>
   142e4:	e0aa      	b.n	1443c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1b2>
            let data = unsafe { (*m).om_data };  //  Fetch the data
   142e6:	981c      	ldr	r0, [sp, #112]	; 0x70
   142e8:	6800      	ldr	r0, [r0, #0]
   142ea:	903a      	str	r0, [sp, #232]	; 0xe8
            let len = unsafe { (*m).om_len };    //  Fetch the length
   142ec:	991c      	ldr	r1, [sp, #112]	; 0x70
   142ee:	88c9      	ldrh	r1, [r1, #6]
   142f0:	460a      	mov	r2, r1
   142f2:	f8ad 10ee 	strh.w	r1, [sp, #238]	; 0xee
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   142f6:	f89d 1075 	ldrb.w	r1, [sp, #117]	; 0x75
   142fa:	07c9      	lsls	r1, r1, #31
   142fc:	2900      	cmp	r1, #0
   142fe:	9018      	str	r0, [sp, #96]	; 0x60
   14300:	9217      	str	r2, [sp, #92]	; 0x5c
   14302:	d105      	bne.n	14310 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x86>
   14304:	e7ff      	b.n	14306 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x7c>
                    unsafe { core::mem::transmute(data) }, 
   14306:	9818      	ldr	r0, [sp, #96]	; 0x60
   14308:	903e      	str	r0, [sp, #248]	; 0xf8
   1430a:	983e      	ldr	r0, [sp, #248]	; 0xf8
   1430c:	9016      	str	r0, [sp, #88]	; 0x58
   1430e:	e07b      	b.n	14408 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17e>
   14310:	2000      	movs	r0, #0
                first_byte = false;
   14312:	f88d 0075 	strb.w	r0, [sp, #117]	; 0x75
                    unsafe { core::mem::transmute(data) }, 
   14316:	9818      	ldr	r0, [sp, #96]	; 0x60
   14318:	903c      	str	r0, [sp, #240]	; 0xf0
   1431a:	983c      	ldr	r0, [sp, #240]	; 0xf0
   1431c:	9015      	str	r0, [sp, #84]	; 0x54
   1431e:	e7ff      	b.n	14320 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x96>
   14320:	2001      	movs	r0, #1
                internal_spi_noblock_write(
   14322:	9915      	ldr	r1, [sp, #84]	; 0x54
   14324:	9014      	str	r0, [sp, #80]	; 0x50
   14326:	4608      	mov	r0, r1
   14328:	9914      	ldr	r1, [sp, #80]	; 0x50
   1432a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1432c:	f000 f921 	bl	14572 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   14330:	9013      	str	r0, [sp, #76]	; 0x4c
   14332:	e7ff      	b.n	14334 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xaa>
   14334:	f64f 018c 	movw	r1, #63628	; 0xf88c
   14338:	f2c0 0101 	movt	r1, #1
   1433c:	f64f 0398 	movw	r3, #63640	; 0xf898
   14340:	f2c0 0301 	movt	r3, #1
   14344:	220c      	movs	r2, #12
   14346:	9813      	ldr	r0, [sp, #76]	; 0x4c
   14348:	f7fa ff10 	bl	f16c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   1434c:	e7ff      	b.n	1434e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xc4>
                if  unsafe { *data } == 0x01 || //  SWRESET
   1434e:	9818      	ldr	r0, [sp, #96]	; 0x60
   14350:	7801      	ldrb	r1, [r0, #0]
   14352:	2901      	cmp	r1, #1
   14354:	d013      	beq.n	1437e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   14356:	e01a      	b.n	1438e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x104>
   14358:	2001      	movs	r0, #1
   1435a:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   1435e:	e008      	b.n	14372 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
   14360:	2000      	movs	r0, #0
   14362:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   14366:	e004      	b.n	14372 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
                    unsafe { *data } == 0x29 {  //  DISPON
   14368:	9818      	ldr	r0, [sp, #96]	; 0x60
   1436a:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   1436c:	2929      	cmp	r1, #41	; 0x29
   1436e:	d0f3      	beq.n	14358 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   14370:	e7f6      	b.n	14360 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xd6>
   14372:	f89d 0076 	ldrb.w	r0, [sp, #118]	; 0x76
   14376:	07c0      	lsls	r0, r0, #31
   14378:	2800      	cmp	r0, #0
   1437a:	d113      	bne.n	143a4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x11a>
   1437c:	e017      	b.n	143ae <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   1437e:	2001      	movs	r0, #1
   14380:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   14384:	e008      	b.n	14398 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
   14386:	2000      	movs	r0, #0
   14388:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   1438c:	e004      	b.n	14398 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
                    unsafe { *data } == 0x11 || //  SLPOUT
   1438e:	9818      	ldr	r0, [sp, #96]	; 0x60
   14390:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   14392:	2911      	cmp	r1, #17
   14394:	d0f3      	beq.n	1437e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   14396:	e7f6      	b.n	14386 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xfc>
   14398:	f89d 0077 	ldrb.w	r0, [sp, #119]	; 0x77
   1439c:	07c0      	lsls	r0, r0, #31
   1439e:	2800      	cmp	r0, #0
   143a0:	d1da      	bne.n	14358 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   143a2:	e7e1      	b.n	14368 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xde>
   143a4:	20c8      	movs	r0, #200	; 0xc8
                    delay_ms(200);
   143a6:	f000 fb13 	bl	149d0 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>
   143aa:	e7ff      	b.n	143ac <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x122>
                if  unsafe { *data } == 0x01 || //  SWRESET
   143ac:	e7ff      	b.n	143ae <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   143ae:	2101      	movs	r1, #1
                    unsafe { core::mem::transmute(data.add(1)) }, 
   143b0:	9818      	ldr	r0, [sp, #96]	; 0x60
   143b2:	f7fa f9bf 	bl	e734 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   143b6:	9012      	str	r0, [sp, #72]	; 0x48
   143b8:	e7ff      	b.n	143ba <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x130>
   143ba:	9812      	ldr	r0, [sp, #72]	; 0x48
   143bc:	903d      	str	r0, [sp, #244]	; 0xf4
   143be:	983d      	ldr	r0, [sp, #244]	; 0xf4
   143c0:	9011      	str	r0, [sp, #68]	; 0x44
   143c2:	e7ff      	b.n	143c4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x13a>
   143c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   143c8:	9917      	ldr	r1, [sp, #92]	; 0x5c
   143ca:	fa10 f081 	uxtah	r0, r0, r1
   143ce:	b282      	uxth	r2, r0
   143d0:	4603      	mov	r3, r0
   143d2:	4282      	cmp	r2, r0
   143d4:	9310      	str	r3, [sp, #64]	; 0x40
   143d6:	f040 80c0 	bne.w	1455a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2d0>
   143da:	e7ff      	b.n	143dc <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x152>
   143dc:	9810      	ldr	r0, [sp, #64]	; 0x40
   143de:	b281      	uxth	r1, r0
   143e0:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   143e2:	9811      	ldr	r0, [sp, #68]	; 0x44
   143e4:	f000 f8c5 	bl	14572 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   143e8:	900f      	str	r0, [sp, #60]	; 0x3c
   143ea:	e7ff      	b.n	143ec <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x162>
   143ec:	f64f 018c 	movw	r1, #63628	; 0xf88c
   143f0:	f2c0 0101 	movt	r1, #1
   143f4:	f64f 03e4 	movw	r3, #63716	; 0xf8e4
   143f8:	f2c0 0301 	movt	r3, #1
   143fc:	220c      	movs	r2, #12
   143fe:	980f      	ldr	r0, [sp, #60]	; 0x3c
   14400:	f7fa feb4 	bl	f16c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   14404:	e7ff      	b.n	14406 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17c>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   14406:	e015      	b.n	14434 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
                    len as i32,  //  Write all Data Bytes
   14408:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1440a:	b281      	uxth	r1, r0
   1440c:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   1440e:	9816      	ldr	r0, [sp, #88]	; 0x58
   14410:	f000 f8af 	bl	14572 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   14414:	900e      	str	r0, [sp, #56]	; 0x38
   14416:	e7ff      	b.n	14418 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x18e>
   14418:	f64f 018c 	movw	r1, #63628	; 0xf88c
   1441c:	f2c0 0101 	movt	r1, #1
   14420:	f64f 03f4 	movw	r3, #63732	; 0xf8f4
   14424:	f2c0 0301 	movt	r3, #1
   14428:	220c      	movs	r2, #12
   1442a:	980e      	ldr	r0, [sp, #56]	; 0x38
   1442c:	f7fa fe9e 	bl	f16c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   14430:	e7ff      	b.n	14432 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1a8>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   14432:	e7ff      	b.n	14434 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
            m = unsafe { (*m).om_next.sle_next };  //  Fetch next mbuf in the chain.
   14434:	981c      	ldr	r0, [sp, #112]	; 0x70
   14436:	68c0      	ldr	r0, [r0, #12]
   14438:	901c      	str	r0, [sp, #112]	; 0x70
        while !m.is_null() {  //  For each mbuf in the chain...
   1443a:	e746      	b.n	142ca <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
   1443c:	f241 2034 	movw	r0, #4660	; 0x1234
   14440:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14444:	f006 fab8 	bl	1a9b8 <os_sem_release>
   14448:	901e      	str	r0, [sp, #120]	; 0x78
   1444a:	e7ff      	b.n	1444c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c2>
        assert_eq!(rc, 0, "sem fail");    
   1444c:	f24f 6008 	movw	r0, #62984	; 0xf608
   14450:	f2c0 0001 	movt	r0, #1
   14454:	6800      	ldr	r0, [r0, #0]
   14456:	a91e      	add	r1, sp, #120	; 0x78
   14458:	911f      	str	r1, [sp, #124]	; 0x7c
   1445a:	9020      	str	r0, [sp, #128]	; 0x80
   1445c:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1445e:	903f      	str	r0, [sp, #252]	; 0xfc
   14460:	9920      	ldr	r1, [sp, #128]	; 0x80
   14462:	9140      	str	r1, [sp, #256]	; 0x100
   14464:	6802      	ldr	r2, [r0, #0]
   14466:	680b      	ldr	r3, [r1, #0]
   14468:	429a      	cmp	r2, r3
   1446a:	900d      	str	r0, [sp, #52]	; 0x34
   1446c:	910c      	str	r1, [sp, #48]	; 0x30
   1446e:	d101      	bne.n	14474 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1ea>
   14470:	e7ff      	b.n	14472 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1e8>
    loop {  //  For each mbuf chain found...
   14472:	e70e      	b.n	14292 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
        assert_eq!(rc, 0, "sem fail");    
   14474:	f24f 6060 	movw	r0, #63072	; 0xf660
   14478:	f2c0 0001 	movt	r0, #1
   1447c:	6801      	ldr	r1, [r0, #0]
   1447e:	980d      	ldr	r0, [sp, #52]	; 0x34
   14480:	9030      	str	r0, [sp, #192]	; 0xc0
   14482:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14484:	9231      	str	r2, [sp, #196]	; 0xc4
   14486:	f24f 7378 	movw	r3, #63352	; 0xf778
   1448a:	f2c0 0301 	movt	r3, #1
   1448e:	681b      	ldr	r3, [r3, #0]
   14490:	f24f 6c80 	movw	ip, #63104	; 0xf680
   14494:	f2c0 0c01 	movt	ip, #1
   14498:	f8dc c000 	ldr.w	ip, [ip]
   1449c:	46ee      	mov	lr, sp
   1449e:	2400      	movs	r4, #0
   144a0:	f8ce 4000 	str.w	r4, [lr]
   144a4:	a832      	add	r0, sp, #200	; 0xc8
   144a6:	2201      	movs	r2, #1
   144a8:	910b      	str	r1, [sp, #44]	; 0x2c
   144aa:	4619      	mov	r1, r3
   144ac:	4663      	mov	r3, ip
   144ae:	f7fa fe2e 	bl	f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   144b2:	e7ff      	b.n	144b4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x22a>
   144b4:	a830      	add	r0, sp, #192	; 0xc0
   144b6:	902d      	str	r0, [sp, #180]	; 0xb4
   144b8:	a831      	add	r0, sp, #196	; 0xc4
   144ba:	902e      	str	r0, [sp, #184]	; 0xb8
   144bc:	a832      	add	r0, sp, #200	; 0xc8
   144be:	902f      	str	r0, [sp, #188]	; 0xbc
   144c0:	982d      	ldr	r0, [sp, #180]	; 0xb4
   144c2:	9041      	str	r0, [sp, #260]	; 0x104
   144c4:	992e      	ldr	r1, [sp, #184]	; 0xb8
   144c6:	9142      	str	r1, [sp, #264]	; 0x108
   144c8:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
   144ca:	9243      	str	r2, [sp, #268]	; 0x10c
   144cc:	f64f 63ef 	movw	r3, #65263	; 0xfeef
   144d0:	f2c0 0300 	movt	r3, #0
   144d4:	910a      	str	r1, [sp, #40]	; 0x28
   144d6:	4619      	mov	r1, r3
   144d8:	9209      	str	r2, [sp, #36]	; 0x24
   144da:	f7fb fd40 	bl	ff5e <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   144de:	9008      	str	r0, [sp, #32]
   144e0:	9107      	str	r1, [sp, #28]
   144e2:	e7ff      	b.n	144e4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x25a>
   144e4:	f64f 61ef 	movw	r1, #65263	; 0xfeef
   144e8:	f2c0 0100 	movt	r1, #0
   144ec:	980a      	ldr	r0, [sp, #40]	; 0x28
   144ee:	f7fb fd36 	bl	ff5e <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   144f2:	9006      	str	r0, [sp, #24]
   144f4:	9105      	str	r1, [sp, #20]
   144f6:	e7ff      	b.n	144f8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26e>
   144f8:	f646 716f 	movw	r1, #28527	; 0x6f6f
   144fc:	f2c0 0101 	movt	r1, #1
   14500:	9809      	ldr	r0, [sp, #36]	; 0x24
   14502:	f7fb fd41 	bl	ff88 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   14506:	9004      	str	r0, [sp, #16]
   14508:	9103      	str	r1, [sp, #12]
   1450a:	e7ff      	b.n	1450c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x282>
   1450c:	9808      	ldr	r0, [sp, #32]
   1450e:	9027      	str	r0, [sp, #156]	; 0x9c
   14510:	9907      	ldr	r1, [sp, #28]
   14512:	9128      	str	r1, [sp, #160]	; 0xa0
   14514:	9a06      	ldr	r2, [sp, #24]
   14516:	9229      	str	r2, [sp, #164]	; 0xa4
   14518:	9b05      	ldr	r3, [sp, #20]
   1451a:	932a      	str	r3, [sp, #168]	; 0xa8
   1451c:	f8dd c010 	ldr.w	ip, [sp, #16]
   14520:	f8cd c0ac 	str.w	ip, [sp, #172]	; 0xac
   14524:	f8dd e00c 	ldr.w	lr, [sp, #12]
   14528:	f8cd e0b0 	str.w	lr, [sp, #176]	; 0xb0
   1452c:	466c      	mov	r4, sp
   1452e:	2503      	movs	r5, #3
   14530:	6025      	str	r5, [r4, #0]
   14532:	a821      	add	r0, sp, #132	; 0x84
   14534:	ab27      	add	r3, sp, #156	; 0x9c
   14536:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14538:	462a      	mov	r2, r5
   1453a:	f7fa fde8 	bl	f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1453e:	e7ff      	b.n	14540 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2b6>
   14540:	f64f 1004 	movw	r0, #63748	; 0xf904
   14544:	f2c0 0001 	movt	r0, #1
   14548:	f002 fa23 	bl	16992 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1454c:	9002      	str	r0, [sp, #8]
   1454e:	e7ff      	b.n	14550 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2c6>
   14550:	a821      	add	r0, sp, #132	; 0x84
   14552:	9902      	ldr	r1, [sp, #8]
   14554:	f002 fa5a 	bl	16a0c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14558:	defe      	udf	#254	; 0xfe
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   1455a:	f64f 00c0 	movw	r0, #63680	; 0xf8c0
   1455e:	f2c0 0001 	movt	r0, #1
   14562:	f64f 02a8 	movw	r2, #63656	; 0xf8a8
   14566:	f2c0 0201 	movt	r2, #1
   1456a:	2121      	movs	r1, #33	; 0x21
   1456c:	f002 fa18 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14570:	defe      	udf	#254	; 0xfe

00014572 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>:

/// Perform non-blocking SPI write in Mynewt OS.  Blocks until SPI write completes.
fn internal_spi_noblock_write(buf: &'static u8, len: i32, is_command: bool) -> MynewtResult<()> {
   14572:	b5b0      	push	{r4, r5, r7, lr}
   14574:	b0e8      	sub	sp, #416	; 0x1a0
   14576:	4613      	mov	r3, r2
   14578:	9058      	str	r0, [sp, #352]	; 0x160
   1457a:	9159      	str	r1, [sp, #356]	; 0x164
   1457c:	f88d 216b 	strb.w	r2, [sp, #363]	; 0x16b
    if len == 0 { return Ok(()); }
   14580:	2900      	cmp	r1, #0
   14582:	9121      	str	r1, [sp, #132]	; 0x84
   14584:	9020      	str	r0, [sp, #128]	; 0x80
   14586:	931f      	str	r3, [sp, #124]	; 0x7c
   14588:	d004      	beq.n	14594 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x22>
   1458a:	e7ff      	b.n	1458c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a>
    assert!(len > 0, "bad spi len");
   1458c:	9821      	ldr	r0, [sp, #132]	; 0x84
   1458e:	2801      	cmp	r0, #1
   14590:	db0d      	blt.n	145ae <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x3c>
   14592:	e007      	b.n	145a4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x32>
   14594:	2000      	movs	r0, #0
    if len == 0 { return Ok(()); }
   14596:	9022      	str	r0, [sp, #136]	; 0x88
   14598:	2001      	movs	r0, #1
   1459a:	9022      	str	r0, [sp, #136]	; 0x88
   1459c:	e7ff      	b.n	1459e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
    }

    //  Set SS Pin to high to stop the transfer.
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
    Ok(())
}
   1459e:	9822      	ldr	r0, [sp, #136]	; 0x88
   145a0:	b068      	add	sp, #416	; 0x1a0
   145a2:	bdb0      	pop	{r4, r5, r7, pc}
        if is_command { 0 }
   145a4:	981f      	ldr	r0, [sp, #124]	; 0x7c
   145a6:	07c1      	lsls	r1, r0, #31
   145a8:	2900      	cmp	r1, #0
   145aa:	d10f      	bne.n	145cc <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x5a>
   145ac:	e00b      	b.n	145c6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x54>
    assert!(len > 0, "bad spi len");
   145ae:	f64f 1014 	movw	r0, #63764	; 0xf914
   145b2:	f2c0 0001 	movt	r0, #1
   145b6:	f64f 1220 	movw	r2, #63776	; 0xf920
   145ba:	f2c0 0201 	movt	r2, #1
   145be:	210b      	movs	r1, #11
   145c0:	f002 f9ee 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   145c4:	defe      	udf	#254	; 0xfe
   145c6:	2001      	movs	r0, #1
        else { 1 }
   145c8:	9023      	str	r0, [sp, #140]	; 0x8c
        if is_command { 0 }
   145ca:	e002      	b.n	145d2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
   145cc:	2000      	movs	r0, #0
   145ce:	9023      	str	r0, [sp, #140]	; 0x8c
   145d0:	e7ff      	b.n	145d2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
    unsafe { hal::hal_gpio_write(
   145d2:	9923      	ldr	r1, [sp, #140]	; 0x8c
   145d4:	2012      	movs	r0, #18
   145d6:	f004 fb51 	bl	18c7c <hal_gpio_write>
   145da:	e7ff      	b.n	145dc <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x6a>
   145dc:	2019      	movs	r0, #25
   145de:	2100      	movs	r1, #0
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 0) };
   145e0:	f004 fb4c 	bl	18c7c <hal_gpio_write>
   145e4:	e7ff      	b.n	145e6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x74>
    if len == 1 {  //  If writing only 1 byte...
   145e6:	9821      	ldr	r0, [sp, #132]	; 0x84
   145e8:	2801      	cmp	r0, #1
   145ea:	d005      	beq.n	145f8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x86>
   145ec:	e7ff      	b.n	145ee <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x7c>
            core::mem::transmute(buf), //  TX Buffer
   145ee:	9820      	ldr	r0, [sp, #128]	; 0x80
   145f0:	9061      	str	r0, [sp, #388]	; 0x184
   145f2:	9961      	ldr	r1, [sp, #388]	; 0x184
   145f4:	911e      	str	r1, [sp, #120]	; 0x78
   145f6:	e094      	b.n	14722 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1b0>
            core::mem::transmute(buf), //  TX Buffer
   145f8:	9820      	ldr	r0, [sp, #128]	; 0x80
   145fa:	905b      	str	r0, [sp, #364]	; 0x16c
   145fc:	995b      	ldr	r1, [sp, #364]	; 0x16c
   145fe:	911d      	str	r1, [sp, #116]	; 0x74
   14600:	e7ff      	b.n	14602 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x90>
   14602:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx(
   14604:	901c      	str	r0, [sp, #112]	; 0x70
   14606:	991d      	ldr	r1, [sp, #116]	; 0x74
   14608:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1460a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1460c:	f004 ffe4 	bl	195d8 <hal_spi_txrx>
   14610:	9024      	str	r0, [sp, #144]	; 0x90
   14612:	e7ff      	b.n	14614 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xa2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   14614:	f24f 6008 	movw	r0, #62984	; 0xf608
   14618:	f2c0 0001 	movt	r0, #1
   1461c:	6800      	ldr	r0, [r0, #0]
   1461e:	a924      	add	r1, sp, #144	; 0x90
   14620:	9125      	str	r1, [sp, #148]	; 0x94
   14622:	9026      	str	r0, [sp, #152]	; 0x98
   14624:	9825      	ldr	r0, [sp, #148]	; 0x94
   14626:	905c      	str	r0, [sp, #368]	; 0x170
   14628:	9926      	ldr	r1, [sp, #152]	; 0x98
   1462a:	915d      	str	r1, [sp, #372]	; 0x174
   1462c:	6802      	ldr	r2, [r0, #0]
   1462e:	680b      	ldr	r3, [r1, #0]
   14630:	429a      	cmp	r2, r3
   14632:	901b      	str	r0, [sp, #108]	; 0x6c
   14634:	911a      	str	r1, [sp, #104]	; 0x68
   14636:	d101      	bne.n	1463c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xca>
   14638:	e7ff      	b.n	1463a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xc8>
    if len == 1 {  //  If writing only 1 byte...
   1463a:	e11f      	b.n	1487c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   1463c:	f24f 6060 	movw	r0, #63072	; 0xf660
   14640:	f2c0 0001 	movt	r0, #1
   14644:	6801      	ldr	r1, [r0, #0]
   14646:	981b      	ldr	r0, [sp, #108]	; 0x6c
   14648:	9036      	str	r0, [sp, #216]	; 0xd8
   1464a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1464c:	9237      	str	r2, [sp, #220]	; 0xdc
   1464e:	f64f 1338 	movw	r3, #63800	; 0xf938
   14652:	f2c0 0301 	movt	r3, #1
   14656:	681b      	ldr	r3, [r3, #0]
   14658:	f24f 6c80 	movw	ip, #63104	; 0xf680
   1465c:	f2c0 0c01 	movt	ip, #1
   14660:	f8dc c000 	ldr.w	ip, [ip]
   14664:	46ee      	mov	lr, sp
   14666:	2400      	movs	r4, #0
   14668:	f8ce 4000 	str.w	r4, [lr]
   1466c:	a838      	add	r0, sp, #224	; 0xe0
   1466e:	2201      	movs	r2, #1
   14670:	9119      	str	r1, [sp, #100]	; 0x64
   14672:	4619      	mov	r1, r3
   14674:	4663      	mov	r3, ip
   14676:	f7fa fd4a 	bl	f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1467a:	e7ff      	b.n	1467c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x10a>
   1467c:	a836      	add	r0, sp, #216	; 0xd8
   1467e:	9033      	str	r0, [sp, #204]	; 0xcc
   14680:	a837      	add	r0, sp, #220	; 0xdc
   14682:	9034      	str	r0, [sp, #208]	; 0xd0
   14684:	a838      	add	r0, sp, #224	; 0xe0
   14686:	9035      	str	r0, [sp, #212]	; 0xd4
   14688:	9833      	ldr	r0, [sp, #204]	; 0xcc
   1468a:	905e      	str	r0, [sp, #376]	; 0x178
   1468c:	9934      	ldr	r1, [sp, #208]	; 0xd0
   1468e:	915f      	str	r1, [sp, #380]	; 0x17c
   14690:	9a35      	ldr	r2, [sp, #212]	; 0xd4
   14692:	9260      	str	r2, [sp, #384]	; 0x180
   14694:	f64f 639b 	movw	r3, #65179	; 0xfe9b
   14698:	f2c0 0300 	movt	r3, #0
   1469c:	9118      	str	r1, [sp, #96]	; 0x60
   1469e:	4619      	mov	r1, r3
   146a0:	9217      	str	r2, [sp, #92]	; 0x5c
   146a2:	f7fb fc32 	bl	ff0a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   146a6:	9016      	str	r0, [sp, #88]	; 0x58
   146a8:	9115      	str	r1, [sp, #84]	; 0x54
   146aa:	e7ff      	b.n	146ac <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x13a>
   146ac:	f64f 619b 	movw	r1, #65179	; 0xfe9b
   146b0:	f2c0 0100 	movt	r1, #0
   146b4:	9818      	ldr	r0, [sp, #96]	; 0x60
   146b6:	f7fb fc28 	bl	ff0a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   146ba:	9014      	str	r0, [sp, #80]	; 0x50
   146bc:	9113      	str	r1, [sp, #76]	; 0x4c
   146be:	e7ff      	b.n	146c0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x14e>
   146c0:	f646 716f 	movw	r1, #28527	; 0x6f6f
   146c4:	f2c0 0101 	movt	r1, #1
   146c8:	9817      	ldr	r0, [sp, #92]	; 0x5c
   146ca:	f7fb fc5d 	bl	ff88 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   146ce:	9012      	str	r0, [sp, #72]	; 0x48
   146d0:	9111      	str	r1, [sp, #68]	; 0x44
   146d2:	e7ff      	b.n	146d4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x162>
   146d4:	9816      	ldr	r0, [sp, #88]	; 0x58
   146d6:	902d      	str	r0, [sp, #180]	; 0xb4
   146d8:	9915      	ldr	r1, [sp, #84]	; 0x54
   146da:	912e      	str	r1, [sp, #184]	; 0xb8
   146dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   146de:	922f      	str	r2, [sp, #188]	; 0xbc
   146e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   146e2:	9330      	str	r3, [sp, #192]	; 0xc0
   146e4:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   146e8:	f8cd c0c4 	str.w	ip, [sp, #196]	; 0xc4
   146ec:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
   146f0:	f8cd e0c8 	str.w	lr, [sp, #200]	; 0xc8
   146f4:	466c      	mov	r4, sp
   146f6:	2503      	movs	r5, #3
   146f8:	6025      	str	r5, [r4, #0]
   146fa:	a827      	add	r0, sp, #156	; 0x9c
   146fc:	ab2d      	add	r3, sp, #180	; 0xb4
   146fe:	9919      	ldr	r1, [sp, #100]	; 0x64
   14700:	462a      	mov	r2, r5
   14702:	f7fa fd04 	bl	f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14706:	e7ff      	b.n	14708 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x196>
   14708:	f64f 103c 	movw	r0, #63804	; 0xf93c
   1470c:	f2c0 0001 	movt	r0, #1
   14710:	f002 f93f 	bl	16992 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14714:	9010      	str	r0, [sp, #64]	; 0x40
   14716:	e7ff      	b.n	14718 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a6>
   14718:	a827      	add	r0, sp, #156	; 0x9c
   1471a:	9910      	ldr	r1, [sp, #64]	; 0x40
   1471c:	f002 f976 	bl	16a0c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14720:	defe      	udf	#254	; 0xfe
   14722:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx_noblock(
   14724:	900f      	str	r0, [sp, #60]	; 0x3c
   14726:	991e      	ldr	r1, [sp, #120]	; 0x78
   14728:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1472a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1472c:	f004 ffaa 	bl	19684 <hal_spi_txrx_noblock>
   14730:	903e      	str	r0, [sp, #248]	; 0xf8
   14732:	e7ff      	b.n	14734 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1c2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   14734:	f24f 6008 	movw	r0, #62984	; 0xf608
   14738:	f2c0 0001 	movt	r0, #1
   1473c:	6800      	ldr	r0, [r0, #0]
   1473e:	a93e      	add	r1, sp, #248	; 0xf8
   14740:	913f      	str	r1, [sp, #252]	; 0xfc
   14742:	9040      	str	r0, [sp, #256]	; 0x100
   14744:	983f      	ldr	r0, [sp, #252]	; 0xfc
   14746:	9062      	str	r0, [sp, #392]	; 0x188
   14748:	9940      	ldr	r1, [sp, #256]	; 0x100
   1474a:	9163      	str	r1, [sp, #396]	; 0x18c
   1474c:	6802      	ldr	r2, [r0, #0]
   1474e:	680b      	ldr	r3, [r1, #0]
   14750:	429a      	cmp	r2, r3
   14752:	900e      	str	r0, [sp, #56]	; 0x38
   14754:	910d      	str	r1, [sp, #52]	; 0x34
   14756:	d10c      	bne.n	14772 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x200>
   14758:	e7ff      	b.n	1475a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1e8>
   1475a:	f247 5030 	movw	r0, #30000	; 0x7530
        let timeout = 30_000;
   1475e:	9067      	str	r0, [sp, #412]	; 0x19c
   14760:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   14764:	fba0 0101 	umull	r0, r1, r0, r1
   14768:	2900      	cmp	r1, #0
   1476a:	900c      	str	r0, [sp, #48]	; 0x30
   1476c:	f040 8090 	bne.w	14890 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x31e>
   14770:	e072      	b.n	14858 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2e6>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   14772:	f24f 6060 	movw	r0, #63072	; 0xf660
   14776:	f2c0 0001 	movt	r0, #1
   1477a:	6801      	ldr	r1, [r0, #0]
   1477c:	980e      	ldr	r0, [sp, #56]	; 0x38
   1477e:	9050      	str	r0, [sp, #320]	; 0x140
   14780:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   14782:	9251      	str	r2, [sp, #324]	; 0x144
   14784:	f64f 1338 	movw	r3, #63800	; 0xf938
   14788:	f2c0 0301 	movt	r3, #1
   1478c:	681b      	ldr	r3, [r3, #0]
   1478e:	f24f 6c80 	movw	ip, #63104	; 0xf680
   14792:	f2c0 0c01 	movt	ip, #1
   14796:	f8dc c000 	ldr.w	ip, [ip]
   1479a:	46ee      	mov	lr, sp
   1479c:	2400      	movs	r4, #0
   1479e:	f8ce 4000 	str.w	r4, [lr]
   147a2:	a852      	add	r0, sp, #328	; 0x148
   147a4:	2201      	movs	r2, #1
   147a6:	910b      	str	r1, [sp, #44]	; 0x2c
   147a8:	4619      	mov	r1, r3
   147aa:	4663      	mov	r3, ip
   147ac:	f7fa fcaf 	bl	f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   147b0:	e7ff      	b.n	147b2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x240>
   147b2:	a850      	add	r0, sp, #320	; 0x140
   147b4:	904d      	str	r0, [sp, #308]	; 0x134
   147b6:	a851      	add	r0, sp, #324	; 0x144
   147b8:	904e      	str	r0, [sp, #312]	; 0x138
   147ba:	a852      	add	r0, sp, #328	; 0x148
   147bc:	904f      	str	r0, [sp, #316]	; 0x13c
   147be:	984d      	ldr	r0, [sp, #308]	; 0x134
   147c0:	9064      	str	r0, [sp, #400]	; 0x190
   147c2:	994e      	ldr	r1, [sp, #312]	; 0x138
   147c4:	9165      	str	r1, [sp, #404]	; 0x194
   147c6:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
   147c8:	9266      	str	r2, [sp, #408]	; 0x198
   147ca:	f64f 639b 	movw	r3, #65179	; 0xfe9b
   147ce:	f2c0 0300 	movt	r3, #0
   147d2:	910a      	str	r1, [sp, #40]	; 0x28
   147d4:	4619      	mov	r1, r3
   147d6:	9209      	str	r2, [sp, #36]	; 0x24
   147d8:	f7fb fb97 	bl	ff0a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   147dc:	9008      	str	r0, [sp, #32]
   147de:	9107      	str	r1, [sp, #28]
   147e0:	e7ff      	b.n	147e2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x270>
   147e2:	f64f 619b 	movw	r1, #65179	; 0xfe9b
   147e6:	f2c0 0100 	movt	r1, #0
   147ea:	980a      	ldr	r0, [sp, #40]	; 0x28
   147ec:	f7fb fb8d 	bl	ff0a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   147f0:	9006      	str	r0, [sp, #24]
   147f2:	9105      	str	r1, [sp, #20]
   147f4:	e7ff      	b.n	147f6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x284>
   147f6:	f646 716f 	movw	r1, #28527	; 0x6f6f
   147fa:	f2c0 0101 	movt	r1, #1
   147fe:	9809      	ldr	r0, [sp, #36]	; 0x24
   14800:	f7fb fbc2 	bl	ff88 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   14804:	9004      	str	r0, [sp, #16]
   14806:	9103      	str	r1, [sp, #12]
   14808:	e7ff      	b.n	1480a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x298>
   1480a:	9808      	ldr	r0, [sp, #32]
   1480c:	9047      	str	r0, [sp, #284]	; 0x11c
   1480e:	9907      	ldr	r1, [sp, #28]
   14810:	9148      	str	r1, [sp, #288]	; 0x120
   14812:	9a06      	ldr	r2, [sp, #24]
   14814:	9249      	str	r2, [sp, #292]	; 0x124
   14816:	9b05      	ldr	r3, [sp, #20]
   14818:	934a      	str	r3, [sp, #296]	; 0x128
   1481a:	f8dd c010 	ldr.w	ip, [sp, #16]
   1481e:	f8cd c12c 	str.w	ip, [sp, #300]	; 0x12c
   14822:	f8dd e00c 	ldr.w	lr, [sp, #12]
   14826:	f8cd e130 	str.w	lr, [sp, #304]	; 0x130
   1482a:	466c      	mov	r4, sp
   1482c:	2503      	movs	r5, #3
   1482e:	6025      	str	r5, [r4, #0]
   14830:	a841      	add	r0, sp, #260	; 0x104
   14832:	ab47      	add	r3, sp, #284	; 0x11c
   14834:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14836:	462a      	mov	r2, r5
   14838:	f7fa fc69 	bl	f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1483c:	e7ff      	b.n	1483e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2cc>
   1483e:	f64f 104c 	movw	r0, #63820	; 0xf94c
   14842:	f2c0 0001 	movt	r0, #1
   14846:	f002 f8a4 	bl	16992 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1484a:	9002      	str	r0, [sp, #8]
   1484c:	e7ff      	b.n	1484e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2dc>
   1484e:	a841      	add	r0, sp, #260	; 0x104
   14850:	9902      	ldr	r1, [sp, #8]
   14852:	f002 f8db 	bl	16a0c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14856:	defe      	udf	#254	; 0xfe
   14858:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   1485c:	f2c1 0062 	movt	r0, #4194	; 0x1062
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   14860:	990c      	ldr	r1, [sp, #48]	; 0x30
   14862:	fba1 0200 	umull	r0, r2, r1, r0
   14866:	0991      	lsrs	r1, r2, #6
   14868:	f241 222c 	movw	r2, #4652	; 0x122c
   1486c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14870:	9001      	str	r0, [sp, #4]
   14872:	4610      	mov	r0, r2
   14874:	f006 f8d2 	bl	1aa1c <os_sem_pend>
   14878:	e7ff      	b.n	1487a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x308>
    if len == 1 {  //  If writing only 1 byte...
   1487a:	e7ff      	b.n	1487c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
   1487c:	2019      	movs	r0, #25
   1487e:	2101      	movs	r1, #1
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
   14880:	f004 f9fc 	bl	18c7c <hal_gpio_write>
   14884:	e7ff      	b.n	14886 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x314>
   14886:	2000      	movs	r0, #0
    Ok(())
   14888:	9022      	str	r0, [sp, #136]	; 0x88
   1488a:	2001      	movs	r0, #1
   1488c:	9022      	str	r0, [sp, #136]	; 0x88
}
   1488e:	e686      	b.n	1459e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   14890:	f64f 0030 	movw	r0, #63536	; 0xf830
   14894:	f2c0 0001 	movt	r0, #1
   14898:	f64f 125c 	movw	r2, #63836	; 0xf95c
   1489c:	f2c0 0201 	movt	r2, #1
   148a0:	2121      	movs	r1, #33	; 0x21
   148a2:	f002 f87d 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   148a6:	defe      	udf	#254	; 0xfe

000148a8 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E>:

/// Called by interrupt handler after Non-blocking SPI transfer has completed
extern "C" fn spi_noblock_handler(_arg: Ptr, _len: i32) {
   148a8:	b5b0      	push	{r4, r5, r7, lr}
   148aa:	b0ae      	sub	sp, #184	; 0xb8
   148ac:	9027      	str	r0, [sp, #156]	; 0x9c
   148ae:	9128      	str	r1, [sp, #160]	; 0xa0
    //  Signal to internal_spi_noblock_write() that SPI request has been completed.
    let rc = unsafe { os::os_sem_release(&mut SPI_SEM) };
   148b0:	f241 202c 	movw	r0, #4652	; 0x122c
   148b4:	f2c2 0000 	movt	r0, #8192	; 0x2000
   148b8:	f006 f87e 	bl	1a9b8 <os_sem_release>
   148bc:	900d      	str	r0, [sp, #52]	; 0x34
   148be:	e7ff      	b.n	148c0 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x18>
    assert_eq!(rc, 0, "sem fail");
   148c0:	f24f 6008 	movw	r0, #62984	; 0xf608
   148c4:	f2c0 0001 	movt	r0, #1
   148c8:	6800      	ldr	r0, [r0, #0]
   148ca:	a90d      	add	r1, sp, #52	; 0x34
   148cc:	910e      	str	r1, [sp, #56]	; 0x38
   148ce:	900f      	str	r0, [sp, #60]	; 0x3c
   148d0:	980e      	ldr	r0, [sp, #56]	; 0x38
   148d2:	9029      	str	r0, [sp, #164]	; 0xa4
   148d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
   148d6:	912a      	str	r1, [sp, #168]	; 0xa8
   148d8:	6802      	ldr	r2, [r0, #0]
   148da:	680b      	ldr	r3, [r1, #0]
   148dc:	429a      	cmp	r2, r3
   148de:	900c      	str	r0, [sp, #48]	; 0x30
   148e0:	910b      	str	r1, [sp, #44]	; 0x2c
   148e2:	d102      	bne.n	148ea <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x42>
   148e4:	e7ff      	b.n	148e6 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x3e>
}
   148e6:	b02e      	add	sp, #184	; 0xb8
   148e8:	bdb0      	pop	{r4, r5, r7, pc}
    assert_eq!(rc, 0, "sem fail");
   148ea:	f24f 6060 	movw	r0, #63072	; 0xf660
   148ee:	f2c0 0001 	movt	r0, #1
   148f2:	6801      	ldr	r1, [r0, #0]
   148f4:	980c      	ldr	r0, [sp, #48]	; 0x30
   148f6:	901f      	str	r0, [sp, #124]	; 0x7c
   148f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   148fa:	9220      	str	r2, [sp, #128]	; 0x80
   148fc:	f24f 7378 	movw	r3, #63352	; 0xf778
   14900:	f2c0 0301 	movt	r3, #1
   14904:	681b      	ldr	r3, [r3, #0]
   14906:	f24f 6c80 	movw	ip, #63104	; 0xf680
   1490a:	f2c0 0c01 	movt	ip, #1
   1490e:	f8dc c000 	ldr.w	ip, [ip]
   14912:	46ee      	mov	lr, sp
   14914:	2400      	movs	r4, #0
   14916:	f8ce 4000 	str.w	r4, [lr]
   1491a:	a821      	add	r0, sp, #132	; 0x84
   1491c:	2201      	movs	r2, #1
   1491e:	910a      	str	r1, [sp, #40]	; 0x28
   14920:	4619      	mov	r1, r3
   14922:	4663      	mov	r3, ip
   14924:	f7fa fbf3 	bl	f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14928:	e7ff      	b.n	1492a <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x82>
   1492a:	a81f      	add	r0, sp, #124	; 0x7c
   1492c:	901c      	str	r0, [sp, #112]	; 0x70
   1492e:	a820      	add	r0, sp, #128	; 0x80
   14930:	901d      	str	r0, [sp, #116]	; 0x74
   14932:	a821      	add	r0, sp, #132	; 0x84
   14934:	901e      	str	r0, [sp, #120]	; 0x78
   14936:	981c      	ldr	r0, [sp, #112]	; 0x70
   14938:	902b      	str	r0, [sp, #172]	; 0xac
   1493a:	991d      	ldr	r1, [sp, #116]	; 0x74
   1493c:	912c      	str	r1, [sp, #176]	; 0xb0
   1493e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   14940:	922d      	str	r2, [sp, #180]	; 0xb4
   14942:	f64f 63ef 	movw	r3, #65263	; 0xfeef
   14946:	f2c0 0300 	movt	r3, #0
   1494a:	9109      	str	r1, [sp, #36]	; 0x24
   1494c:	4619      	mov	r1, r3
   1494e:	9208      	str	r2, [sp, #32]
   14950:	f7fb fb05 	bl	ff5e <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   14954:	9007      	str	r0, [sp, #28]
   14956:	9106      	str	r1, [sp, #24]
   14958:	e7ff      	b.n	1495a <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xb2>
   1495a:	f64f 61ef 	movw	r1, #65263	; 0xfeef
   1495e:	f2c0 0100 	movt	r1, #0
   14962:	9809      	ldr	r0, [sp, #36]	; 0x24
   14964:	f7fb fafb 	bl	ff5e <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   14968:	9005      	str	r0, [sp, #20]
   1496a:	9104      	str	r1, [sp, #16]
   1496c:	e7ff      	b.n	1496e <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xc6>
   1496e:	f646 716f 	movw	r1, #28527	; 0x6f6f
   14972:	f2c0 0101 	movt	r1, #1
   14976:	9808      	ldr	r0, [sp, #32]
   14978:	f7fb fb06 	bl	ff88 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1497c:	9003      	str	r0, [sp, #12]
   1497e:	9102      	str	r1, [sp, #8]
   14980:	e7ff      	b.n	14982 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xda>
   14982:	9807      	ldr	r0, [sp, #28]
   14984:	9016      	str	r0, [sp, #88]	; 0x58
   14986:	9906      	ldr	r1, [sp, #24]
   14988:	9117      	str	r1, [sp, #92]	; 0x5c
   1498a:	9a05      	ldr	r2, [sp, #20]
   1498c:	9218      	str	r2, [sp, #96]	; 0x60
   1498e:	9b04      	ldr	r3, [sp, #16]
   14990:	9319      	str	r3, [sp, #100]	; 0x64
   14992:	f8dd c00c 	ldr.w	ip, [sp, #12]
   14996:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
   1499a:	f8dd e008 	ldr.w	lr, [sp, #8]
   1499e:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
   149a2:	466c      	mov	r4, sp
   149a4:	2503      	movs	r5, #3
   149a6:	6025      	str	r5, [r4, #0]
   149a8:	a810      	add	r0, sp, #64	; 0x40
   149aa:	ab16      	add	r3, sp, #88	; 0x58
   149ac:	990a      	ldr	r1, [sp, #40]	; 0x28
   149ae:	462a      	mov	r2, r5
   149b0:	f7fa fbad 	bl	f10e <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   149b4:	e7ff      	b.n	149b6 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x10e>
   149b6:	f64f 106c 	movw	r0, #63852	; 0xf96c
   149ba:	f2c0 0001 	movt	r0, #1
   149be:	f001 ffe8 	bl	16992 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   149c2:	9001      	str	r0, [sp, #4]
   149c4:	e7ff      	b.n	149c6 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x11e>
   149c6:	a810      	add	r0, sp, #64	; 0x40
   149c8:	9901      	ldr	r1, [sp, #4]
   149ca:	f002 f81f 	bl	16a0c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   149ce:	defe      	udf	#254	; 0xfe

000149d0 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>:

/// Sleep for the specified number of milliseconds
fn delay_ms(ms: u8) {
   149d0:	b580      	push	{r7, lr}
   149d2:	b084      	sub	sp, #16
   149d4:	4601      	mov	r1, r0
   149d6:	f88d 000b 	strb.w	r0, [sp, #11]
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   149da:	b2c0      	uxtb	r0, r0
   149dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   149e0:	fba0 0202 	umull	r0, r2, r0, r2
   149e4:	2a00      	cmp	r2, #0
   149e6:	9001      	str	r0, [sp, #4]
   149e8:	d110      	bne.n	14a0c <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x3c>
   149ea:	e7ff      	b.n	149ec <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x1c>
   149ec:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   149f0:	f2c1 0062 	movt	r0, #4194	; 0x1062
   149f4:	9901      	ldr	r1, [sp, #4]
   149f6:	fba1 0200 	umull	r0, r2, r1, r0
   149fa:	0992      	lsrs	r2, r2, #6
   149fc:	9203      	str	r2, [sp, #12]
    unsafe { os::os_time_delay(delay_ticks) };
   149fe:	9000      	str	r0, [sp, #0]
   14a00:	4610      	mov	r0, r2
   14a02:	f006 f959 	bl	1acb8 <os_time_delay>
   14a06:	e7ff      	b.n	14a08 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x38>
}
   14a08:	b004      	add	sp, #16
   14a0a:	bd80      	pop	{r7, pc}
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   14a0c:	f64f 0030 	movw	r0, #63536	; 0xf830
   14a10:	f2c0 0001 	movt	r0, #1
   14a14:	f64f 127c 	movw	r2, #63868	; 0xf97c
   14a18:	f2c0 0201 	movt	r2, #1
   14a1c:	2121      	movs	r1, #33	; 0x21
   14a1e:	f001 ffbf 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14a22:	defe      	udf	#254	; 0xfe

00014a24 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>:
   14a24:	b082      	sub	sp, #8
   14a26:	9001      	str	r0, [sp, #4]
   14a28:	9000      	str	r0, [sp, #0]
   14a2a:	e7ff      	b.n	14a2c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E+0x8>
   14a2c:	9800      	ldr	r0, [sp, #0]
   14a2e:	fab0 f180 	clz	r1, r0
   14a32:	0948      	lsrs	r0, r1, #5
   14a34:	b002      	add	sp, #8
   14a36:	4770      	bx	lr

00014a38 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>:

macro_rules! impl_to_primitive_uint_to_uint {
    ($SrcT:ident : $( $(#[$cfg:meta])* fn $method:ident -> $DstT:ident ; )*) => {$(
        #[inline]
        $(#[$cfg])*
        fn $method(&self) -> Option<$DstT> {
   14a38:	b08a      	sub	sp, #40	; 0x28
   14a3a:	9005      	str	r0, [sp, #20]
   14a3c:	2100      	movs	r1, #0
            let max = $DstT::MAX as $SrcT;
   14a3e:	9107      	str	r1, [sp, #28]
   14a40:	21ff      	movs	r1, #255	; 0xff
   14a42:	9106      	str	r1, [sp, #24]
   14a44:	2108      	movs	r1, #8
   14a46:	9108      	str	r1, [sp, #32]
   14a48:	9908      	ldr	r1, [sp, #32]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   14a4a:	9003      	str	r0, [sp, #12]
   14a4c:	9102      	str	r1, [sp, #8]
   14a4e:	e016      	b.n	14a7e <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x46>
   14a50:	2001      	movs	r0, #1
   14a52:	f88d 0013 	strb.w	r0, [sp, #19]
   14a56:	e00c      	b.n	14a72 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   14a58:	2000      	movs	r0, #0
   14a5a:	f88d 0013 	strb.w	r0, [sp, #19]
   14a5e:	e008      	b.n	14a72 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   14a60:	9803      	ldr	r0, [sp, #12]
   14a62:	6801      	ldr	r1, [r0, #0]
   14a64:	6842      	ldr	r2, [r0, #4]
   14a66:	f5b1 7180 	subs.w	r1, r1, #256	; 0x100
   14a6a:	f172 0200 	sbcs.w	r2, r2, #0
   14a6e:	d3ef      	bcc.n	14a50 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   14a70:	e7f2      	b.n	14a58 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x20>
   14a72:	f89d 0013 	ldrb.w	r0, [sp, #19]
   14a76:	07c0      	lsls	r0, r0, #31
   14a78:	2800      	cmp	r0, #0
   14a7a:	d10e      	bne.n	14a9a <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x62>
   14a7c:	e009      	b.n	14a92 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x5a>
   14a7e:	2001      	movs	r0, #1
   14a80:	9009      	str	r0, [sp, #36]	; 0x24
   14a82:	9809      	ldr	r0, [sp, #36]	; 0x24
   14a84:	9001      	str	r0, [sp, #4]
   14a86:	e7ff      	b.n	14a88 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x50>
   14a88:	9802      	ldr	r0, [sp, #8]
   14a8a:	9901      	ldr	r1, [sp, #4]
   14a8c:	4288      	cmp	r0, r1
   14a8e:	d9df      	bls.n	14a50 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   14a90:	e7e6      	b.n	14a60 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x28>
   14a92:	2000      	movs	r0, #0
                Some(*self as $DstT)
            } else {
                None
   14a94:	f88d 0010 	strb.w	r0, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   14a98:	e007      	b.n	14aaa <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
                Some(*self as $DstT)
   14a9a:	9803      	ldr	r0, [sp, #12]
   14a9c:	7801      	ldrb	r1, [r0, #0]
   14a9e:	f88d 1011 	strb.w	r1, [sp, #17]
   14aa2:	2101      	movs	r1, #1
   14aa4:	f88d 1010 	strb.w	r1, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   14aa8:	e7ff      	b.n	14aaa <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
            }
        }
   14aaa:	f89d 0010 	ldrb.w	r0, [sp, #16]
   14aae:	f89d 1011 	ldrb.w	r1, [sp, #17]
   14ab2:	b00a      	add	sp, #40	; 0x28
   14ab4:	4770      	bx	lr

00014ab6 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE>:
   14ab6:	b580      	push	{r7, lr}
   14ab8:	b090      	sub	sp, #64	; 0x40
   14aba:	2200      	movs	r2, #0
   14abc:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
   14ac0:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   14ac4:	2201      	movs	r2, #1
   14ac6:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   14aca:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
   14ace:	680a      	ldr	r2, [r1, #0]
   14ad0:	2a00      	cmp	r2, #0
   14ad2:	9101      	str	r1, [sp, #4]
   14ad4:	9000      	str	r0, [sp, #0]
   14ad6:	d001      	beq.n	14adc <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x26>
   14ad8:	e7ff      	b.n	14ada <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x24>
   14ada:	e004      	b.n	14ae6 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x30>
   14adc:	2000      	movs	r0, #0
   14ade:	9900      	ldr	r1, [sp, #0]
   14ae0:	6008      	str	r0, [r1, #0]
   14ae2:	e032      	b.n	14b4a <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x94>
   14ae4:	defe      	udf	#254	; 0xfe
   14ae6:	2000      	movs	r0, #0
   14ae8:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
   14aec:	9901      	ldr	r1, [sp, #4]
   14aee:	684a      	ldr	r2, [r1, #4]
   14af0:	688b      	ldr	r3, [r1, #8]
   14af2:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   14af6:	f8cd c010 	str.w	ip, [sp, #16]
   14afa:	9303      	str	r3, [sp, #12]
   14afc:	9202      	str	r2, [sp, #8]
   14afe:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
   14b02:	9802      	ldr	r0, [sp, #8]
   14b04:	9a03      	ldr	r2, [sp, #12]
   14b06:	9b04      	ldr	r3, [sp, #16]
   14b08:	930d      	str	r3, [sp, #52]	; 0x34
   14b0a:	920c      	str	r2, [sp, #48]	; 0x30
   14b0c:	900b      	str	r0, [sp, #44]	; 0x2c
   14b0e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   14b10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14b12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14b14:	930a      	str	r3, [sp, #40]	; 0x28
   14b16:	9209      	str	r2, [sp, #36]	; 0x24
   14b18:	9008      	str	r0, [sp, #32]
   14b1a:	a805      	add	r0, sp, #20
   14b1c:	a908      	add	r1, sp, #32
   14b1e:	f7fd fc17 	bl	12350 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E>
   14b22:	e7ff      	b.n	14b24 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x6e>
   14b24:	9805      	ldr	r0, [sp, #20]
   14b26:	9906      	ldr	r1, [sp, #24]
   14b28:	9a07      	ldr	r2, [sp, #28]
   14b2a:	9b00      	ldr	r3, [sp, #0]
   14b2c:	60da      	str	r2, [r3, #12]
   14b2e:	6099      	str	r1, [r3, #8]
   14b30:	6058      	str	r0, [r3, #4]
   14b32:	2001      	movs	r0, #1
   14b34:	6018      	str	r0, [r3, #0]
   14b36:	e008      	b.n	14b4a <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x94>
   14b38:	9801      	ldr	r0, [sp, #4]
   14b3a:	6801      	ldr	r1, [r0, #0]
   14b3c:	2901      	cmp	r1, #1
   14b3e:	d00c      	beq.n	14b5a <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa4>
   14b40:	e015      	b.n	14b6e <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xb8>
   14b42:	2000      	movs	r0, #0
   14b44:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
   14b48:	e7f6      	b.n	14b38 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x82>
   14b4a:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
   14b4e:	07c0      	lsls	r0, r0, #31
   14b50:	2800      	cmp	r0, #0
   14b52:	d1f6      	bne.n	14b42 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x8c>
   14b54:	e7f0      	b.n	14b38 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x82>
   14b56:	b010      	add	sp, #64	; 0x40
   14b58:	bd80      	pop	{r7, pc}
   14b5a:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   14b5e:	07c0      	lsls	r0, r0, #31
   14b60:	2800      	cmp	r0, #0
   14b62:	d0f8      	beq.n	14b56 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>
   14b64:	e7ff      	b.n	14b66 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xb0>
   14b66:	2000      	movs	r0, #0
   14b68:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
   14b6c:	e7f3      	b.n	14b56 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>
   14b6e:	e7f2      	b.n	14b56 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>

00014b70 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>:
   14b70:	b084      	sub	sp, #16
   14b72:	9002      	str	r0, [sp, #8]
   14b74:	6801      	ldr	r1, [r0, #0]
   14b76:	2900      	cmp	r1, #0
   14b78:	9000      	str	r0, [sp, #0]
   14b7a:	d001      	beq.n	14b80 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x10>
   14b7c:	e7ff      	b.n	14b7e <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0xe>
   14b7e:	e003      	b.n	14b88 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x18>
   14b80:	2000      	movs	r0, #0
   14b82:	9001      	str	r0, [sp, #4]
   14b84:	e006      	b.n	14b94 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   14b86:	defe      	udf	#254	; 0xfe
   14b88:	9800      	ldr	r0, [sp, #0]
   14b8a:	f100 0108 	add.w	r1, r0, #8
   14b8e:	9103      	str	r1, [sp, #12]
   14b90:	9101      	str	r1, [sp, #4]
   14b92:	e7ff      	b.n	14b94 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   14b94:	9801      	ldr	r0, [sp, #4]
   14b96:	b004      	add	sp, #16
   14b98:	4770      	bx	lr

00014b9a <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE>:
   14b9a:	b510      	push	{r4, lr}
   14b9c:	b088      	sub	sp, #32
   14b9e:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   14ba2:	468e      	mov	lr, r1
   14ba4:	4604      	mov	r4, r0
   14ba6:	f8ad 0010 	strh.w	r0, [sp, #16]
   14baa:	f8ad 1012 	strh.w	r1, [sp, #18]
   14bae:	9205      	str	r2, [sp, #20]
   14bb0:	9306      	str	r3, [sp, #24]
   14bb2:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   14bb6:	4601      	mov	r1, r0
   14bb8:	2800      	cmp	r0, #0
   14bba:	9303      	str	r3, [sp, #12]
   14bbc:	9202      	str	r2, [sp, #8]
   14bbe:	f8cd c004 	str.w	ip, [sp, #4]
   14bc2:	d001      	beq.n	14bc8 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x2e>
   14bc4:	e7ff      	b.n	14bc6 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x2c>
   14bc6:	e006      	b.n	14bd6 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x3c>
   14bc8:	9802      	ldr	r0, [sp, #8]
   14bca:	9903      	ldr	r1, [sp, #12]
   14bcc:	9a01      	ldr	r2, [sp, #4]
   14bce:	f001 fe9d 	bl	1690c <_ZN4core6option13expect_failed17had6579abaad447b4E>
   14bd2:	defe      	udf	#254	; 0xfe
   14bd4:	defe      	udf	#254	; 0xfe
   14bd6:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   14bda:	4601      	mov	r1, r0
   14bdc:	f8ad 001e 	strh.w	r0, [sp, #30]
   14be0:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   14be4:	2801      	cmp	r0, #1
   14be6:	9100      	str	r1, [sp, #0]
   14be8:	d103      	bne.n	14bf2 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x58>
   14bea:	e7ff      	b.n	14bec <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x52>
   14bec:	9800      	ldr	r0, [sp, #0]
   14bee:	b008      	add	sp, #32
   14bf0:	bd10      	pop	{r4, pc}
   14bf2:	e7fb      	b.n	14bec <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x52>

00014bf4 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>:
   14bf4:	b084      	sub	sp, #16
   14bf6:	460b      	mov	r3, r1
   14bf8:	4684      	mov	ip, r0
   14bfa:	f88d 000c 	strb.w	r0, [sp, #12]
   14bfe:	f88d 100d 	strb.w	r1, [sp, #13]
   14c02:	f89d 000c 	ldrb.w	r0, [sp, #12]
   14c06:	07c1      	lsls	r1, r0, #31
   14c08:	2900      	cmp	r1, #0
   14c0a:	9202      	str	r2, [sp, #8]
   14c0c:	d001      	beq.n	14c12 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1e>
   14c0e:	e7ff      	b.n	14c10 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1c>
   14c10:	e009      	b.n	14c26 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x32>
   14c12:	f64f 108c 	movw	r0, #63884	; 0xf98c
   14c16:	f2c0 0001 	movt	r0, #1
   14c1a:	212b      	movs	r1, #43	; 0x2b
   14c1c:	9a02      	ldr	r2, [sp, #8]
   14c1e:	f001 febf 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14c22:	defe      	udf	#254	; 0xfe
   14c24:	defe      	udf	#254	; 0xfe
   14c26:	f89d 000d 	ldrb.w	r0, [sp, #13]
   14c2a:	4601      	mov	r1, r0
   14c2c:	f88d 000f 	strb.w	r0, [sp, #15]
   14c30:	f89d 000c 	ldrb.w	r0, [sp, #12]
   14c34:	07c0      	lsls	r0, r0, #31
   14c36:	2800      	cmp	r0, #0
   14c38:	9101      	str	r1, [sp, #4]
   14c3a:	d003      	beq.n	14c44 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x50>
   14c3c:	e7ff      	b.n	14c3e <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>
   14c3e:	9801      	ldr	r0, [sp, #4]
   14c40:	b004      	add	sp, #16
   14c42:	4770      	bx	lr
   14c44:	e7fb      	b.n	14c3e <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>

00014c46 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>:
   14c46:	b088      	sub	sp, #32
   14c48:	9004      	str	r0, [sp, #16]
   14c4a:	9105      	str	r1, [sp, #20]
   14c4c:	9804      	ldr	r0, [sp, #16]
   14c4e:	2800      	cmp	r0, #0
   14c50:	4601      	mov	r1, r0
   14c52:	bf18      	it	ne
   14c54:	2101      	movne	r1, #1
   14c56:	2800      	cmp	r0, #0
   14c58:	9203      	str	r2, [sp, #12]
   14c5a:	d001      	beq.n	14c60 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x1a>
   14c5c:	e7ff      	b.n	14c5e <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x18>
   14c5e:	e009      	b.n	14c74 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x2e>
   14c60:	f64f 108c 	movw	r0, #63884	; 0xf98c
   14c64:	f2c0 0001 	movt	r0, #1
   14c68:	212b      	movs	r1, #43	; 0x2b
   14c6a:	9a03      	ldr	r2, [sp, #12]
   14c6c:	f001 fe98 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14c70:	defe      	udf	#254	; 0xfe
   14c72:	defe      	udf	#254	; 0xfe
   14c74:	9804      	ldr	r0, [sp, #16]
   14c76:	9905      	ldr	r1, [sp, #20]
   14c78:	9006      	str	r0, [sp, #24]
   14c7a:	9107      	str	r1, [sp, #28]
   14c7c:	9a04      	ldr	r2, [sp, #16]
   14c7e:	2a00      	cmp	r2, #0
   14c80:	9002      	str	r0, [sp, #8]
   14c82:	9101      	str	r1, [sp, #4]
   14c84:	d004      	beq.n	14c90 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x4a>
   14c86:	e7ff      	b.n	14c88 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>
   14c88:	9802      	ldr	r0, [sp, #8]
   14c8a:	9901      	ldr	r1, [sp, #4]
   14c8c:	b008      	add	sp, #32
   14c8e:	4770      	bx	lr
   14c90:	e7fa      	b.n	14c88 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>

00014c92 <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>:
   14c92:	b580      	push	{r7, lr}
   14c94:	b082      	sub	sp, #8
   14c96:	9001      	str	r0, [sp, #4]
   14c98:	f000 f82b 	bl	14cf2 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>
   14c9c:	9000      	str	r0, [sp, #0]
   14c9e:	e7ff      	b.n	14ca0 <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E+0xe>
   14ca0:	2001      	movs	r0, #1
   14ca2:	9900      	ldr	r1, [sp, #0]
   14ca4:	4388      	bics	r0, r1
   14ca6:	b002      	add	sp, #8
   14ca8:	bd80      	pop	{r7, pc}

00014caa <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>:
   14caa:	b082      	sub	sp, #8
   14cac:	9001      	str	r0, [sp, #4]
   14cae:	6800      	ldr	r0, [r0, #0]
   14cb0:	2800      	cmp	r0, #0
   14cb2:	d104      	bne.n	14cbe <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x14>
   14cb4:	e7ff      	b.n	14cb6 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0xc>
   14cb6:	2000      	movs	r0, #0
   14cb8:	f88d 0003 	strb.w	r0, [sp, #3]
   14cbc:	e003      	b.n	14cc6 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   14cbe:	2001      	movs	r0, #1
   14cc0:	f88d 0003 	strb.w	r0, [sp, #3]
   14cc4:	e7ff      	b.n	14cc6 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   14cc6:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14cca:	b002      	add	sp, #8
   14ccc:	4770      	bx	lr

00014cce <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E>:
   14cce:	b082      	sub	sp, #8
   14cd0:	9001      	str	r0, [sp, #4]
   14cd2:	6800      	ldr	r0, [r0, #0]
   14cd4:	2801      	cmp	r0, #1
   14cd6:	d004      	beq.n	14ce2 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x14>
   14cd8:	e7ff      	b.n	14cda <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0xc>
   14cda:	2000      	movs	r0, #0
   14cdc:	f88d 0003 	strb.w	r0, [sp, #3]
   14ce0:	e003      	b.n	14cea <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x1c>
   14ce2:	2001      	movs	r0, #1
   14ce4:	f88d 0003 	strb.w	r0, [sp, #3]
   14ce8:	e7ff      	b.n	14cea <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x1c>
   14cea:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14cee:	b002      	add	sp, #8
   14cf0:	4770      	bx	lr

00014cf2 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>:
   14cf2:	b082      	sub	sp, #8
   14cf4:	9001      	str	r0, [sp, #4]
   14cf6:	8800      	ldrh	r0, [r0, #0]
   14cf8:	2801      	cmp	r0, #1
   14cfa:	d004      	beq.n	14d06 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x14>
   14cfc:	e7ff      	b.n	14cfe <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0xc>
   14cfe:	2000      	movs	r0, #0
   14d00:	f88d 0003 	strb.w	r0, [sp, #3]
   14d04:	e003      	b.n	14d0e <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x1c>
   14d06:	2001      	movs	r0, #1
   14d08:	f88d 0003 	strb.w	r0, [sp, #3]
   14d0c:	e7ff      	b.n	14d0e <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x1c>
   14d0e:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14d12:	b002      	add	sp, #8
   14d14:	4770      	bx	lr

00014d16 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>:
   14d16:	b580      	push	{r7, lr}
   14d18:	b086      	sub	sp, #24
   14d1a:	9000      	str	r0, [sp, #0]
   14d1c:	2000      	movs	r0, #0
   14d1e:	f88d 000f 	strb.w	r0, [sp, #15]
   14d22:	f88d 000e 	strb.w	r0, [sp, #14]
   14d26:	2001      	movs	r0, #1
   14d28:	f88d 000f 	strb.w	r0, [sp, #15]
   14d2c:	f88d 000e 	strb.w	r0, [sp, #14]
   14d30:	9800      	ldr	r0, [sp, #0]
   14d32:	2800      	cmp	r0, #0
   14d34:	4601      	mov	r1, r0
   14d36:	bf18      	it	ne
   14d38:	2101      	movne	r1, #1
   14d3a:	2800      	cmp	r0, #0
   14d3c:	d001      	beq.n	14d42 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2c>
   14d3e:	e7ff      	b.n	14d40 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2a>
   14d40:	e004      	b.n	14d4c <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x36>
   14d42:	2000      	movs	r0, #0
   14d44:	f88d 0004 	strb.w	r0, [sp, #4]
   14d48:	e019      	b.n	14d7e <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   14d4a:	defe      	udf	#254	; 0xfe
   14d4c:	2000      	movs	r0, #0
   14d4e:	f88d 000f 	strb.w	r0, [sp, #15]
   14d52:	9900      	ldr	r1, [sp, #0]
   14d54:	9105      	str	r1, [sp, #20]
   14d56:	f88d 000e 	strb.w	r0, [sp, #14]
   14d5a:	9102      	str	r1, [sp, #8]
   14d5c:	9802      	ldr	r0, [sp, #8]
   14d5e:	f7fc ff1e 	bl	11b9e <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>
   14d62:	f88d 1005 	strb.w	r1, [sp, #5]
   14d66:	f88d 0004 	strb.w	r0, [sp, #4]
   14d6a:	e7ff      	b.n	14d6c <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x56>
   14d6c:	e007      	b.n	14d7e <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   14d6e:	9800      	ldr	r0, [sp, #0]
   14d70:	2800      	cmp	r0, #0
   14d72:	d110      	bne.n	14d96 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x80>
   14d74:	e019      	b.n	14daa <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x94>
   14d76:	2000      	movs	r0, #0
   14d78:	f88d 000e 	strb.w	r0, [sp, #14]
   14d7c:	e7f7      	b.n	14d6e <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   14d7e:	f89d 000e 	ldrb.w	r0, [sp, #14]
   14d82:	07c0      	lsls	r0, r0, #31
   14d84:	2800      	cmp	r0, #0
   14d86:	d1f6      	bne.n	14d76 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x60>
   14d88:	e7f1      	b.n	14d6e <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   14d8a:	f89d 0004 	ldrb.w	r0, [sp, #4]
   14d8e:	f89d 1005 	ldrb.w	r1, [sp, #5]
   14d92:	b006      	add	sp, #24
   14d94:	bd80      	pop	{r7, pc}
   14d96:	f89d 000f 	ldrb.w	r0, [sp, #15]
   14d9a:	07c0      	lsls	r0, r0, #31
   14d9c:	2800      	cmp	r0, #0
   14d9e:	d0f4      	beq.n	14d8a <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   14da0:	e7ff      	b.n	14da2 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x8c>
   14da2:	2000      	movs	r0, #0
   14da4:	f88d 000f 	strb.w	r0, [sp, #15]
   14da8:	e7ef      	b.n	14d8a <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   14daa:	e7ee      	b.n	14d8a <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>

00014dac <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>:
    fn clone(&self) -> Self {
   14dac:	b580      	push	{r7, lr}
   14dae:	b09c      	sub	sp, #112	; 0x70
   14db0:	911b      	str	r1, [sp, #108]	; 0x6c
   14db2:	aa01      	add	r2, sp, #4
        Vec(self.0.clone())
   14db4:	9000      	str	r0, [sp, #0]
   14db6:	4610      	mov	r0, r2
   14db8:	f000 fafc 	bl	153b4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE>
   14dbc:	e7ff      	b.n	14dbe <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE+0x12>
   14dbe:	a901      	add	r1, sp, #4
   14dc0:	2268      	movs	r2, #104	; 0x68
   14dc2:	9800      	ldr	r0, [sp, #0]
   14dc4:	f008 f9c0 	bl	1d148 <__aeabi_memcpy>
    }
   14dc8:	b01c      	add	sp, #112	; 0x70
   14dca:	bd80      	pop	{r7, pc}

00014dcc <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>:
    fn clone(&self) -> Self {
   14dcc:	b580      	push	{r7, lr}
   14dce:	b0b6      	sub	sp, #216	; 0xd8
   14dd0:	9135      	str	r1, [sp, #212]	; 0xd4
   14dd2:	aa02      	add	r2, sp, #8
        Vec(self.0.clone())
   14dd4:	9001      	str	r0, [sp, #4]
   14dd6:	4610      	mov	r0, r2
   14dd8:	f000 fb14 	bl	15404 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E>
   14ddc:	e7ff      	b.n	14dde <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E+0x12>
   14dde:	a902      	add	r1, sp, #8
   14de0:	22cc      	movs	r2, #204	; 0xcc
   14de2:	9801      	ldr	r0, [sp, #4]
   14de4:	f008 f9b0 	bl	1d148 <__aeabi_memcpy>
    }
   14de8:	b036      	add	sp, #216	; 0xd8
   14dea:	bd80      	pop	{r7, pc}

00014dec <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E>:
    fn drop(&mut self) {
   14dec:	b580      	push	{r7, lr}
   14dee:	b084      	sub	sp, #16
   14df0:	9003      	str	r0, [sp, #12]
        unsafe { ptr::drop_in_place(&mut self[..]) }
   14df2:	f000 f84c 	bl	14e8e <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E>
   14df6:	9002      	str	r0, [sp, #8]
   14df8:	9101      	str	r1, [sp, #4]
   14dfa:	e7ff      	b.n	14dfc <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x10>
   14dfc:	9802      	ldr	r0, [sp, #8]
   14dfe:	9901      	ldr	r1, [sp, #4]
   14e00:	f000 ff10 	bl	15c24 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>
   14e04:	e7ff      	b.n	14e06 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x1a>
   14e06:	e7ff      	b.n	14e08 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x1c>
    }
   14e08:	b004      	add	sp, #16
   14e0a:	bd80      	pop	{r7, pc}

00014e0c <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E>:
    fn drop(&mut self) {
   14e0c:	b580      	push	{r7, lr}
   14e0e:	b084      	sub	sp, #16
   14e10:	9003      	str	r0, [sp, #12]
        unsafe { ptr::drop_in_place(&mut self[..]) }
   14e12:	f000 f848 	bl	14ea6 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>
   14e16:	9002      	str	r0, [sp, #8]
   14e18:	9101      	str	r1, [sp, #4]
   14e1a:	e7ff      	b.n	14e1c <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x10>
   14e1c:	9802      	ldr	r0, [sp, #8]
   14e1e:	9901      	ldr	r1, [sp, #4]
   14e20:	f000 ff00 	bl	15c24 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>
   14e24:	e7ff      	b.n	14e26 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x1a>
   14e26:	e7ff      	b.n	14e28 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x1c>
    }
   14e28:	b004      	add	sp, #16
   14e2a:	bd80      	pop	{r7, pc}

00014e2c <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>:
    fn deref(&self) -> &[T] {
   14e2c:	b580      	push	{r7, lr}
   14e2e:	b084      	sub	sp, #16
   14e30:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   14e32:	f000 fb0f 	bl	15454 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>
   14e36:	9002      	str	r0, [sp, #8]
   14e38:	9101      	str	r1, [sp, #4]
   14e3a:	e7ff      	b.n	14e3c <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E+0x10>
    }
   14e3c:	9802      	ldr	r0, [sp, #8]
   14e3e:	9901      	ldr	r1, [sp, #4]
   14e40:	b004      	add	sp, #16
   14e42:	bd80      	pop	{r7, pc}

00014e44 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E>:
    fn deref(&self) -> &[T] {
   14e44:	b580      	push	{r7, lr}
   14e46:	b084      	sub	sp, #16
   14e48:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   14e4a:	f000 fb18 	bl	1547e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>
   14e4e:	9002      	str	r0, [sp, #8]
   14e50:	9101      	str	r1, [sp, #4]
   14e52:	e7ff      	b.n	14e54 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E+0x10>
    }
   14e54:	9802      	ldr	r0, [sp, #8]
   14e56:	9901      	ldr	r1, [sp, #4]
   14e58:	b004      	add	sp, #16
   14e5a:	bd80      	pop	{r7, pc}

00014e5c <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E>:
    fn drop(&mut self) {
   14e5c:	b580      	push	{r7, lr}
   14e5e:	b086      	sub	sp, #24
   14e60:	9005      	str	r0, [sp, #20]
            ptr::drop_in_place(&mut self.vec[self.next..]);
   14e62:	9003      	str	r0, [sp, #12]
   14e64:	f000 f81f 	bl	14ea6 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>
   14e68:	9002      	str	r0, [sp, #8]
   14e6a:	9101      	str	r1, [sp, #4]
   14e6c:	e7ff      	b.n	14e6e <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x12>
   14e6e:	9803      	ldr	r0, [sp, #12]
   14e70:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   14e74:	9104      	str	r1, [sp, #16]
   14e76:	9a04      	ldr	r2, [sp, #16]
   14e78:	9802      	ldr	r0, [sp, #8]
   14e7a:	9901      	ldr	r1, [sp, #4]
   14e7c:	f000 fedf 	bl	15c3e <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E>
   14e80:	e7ff      	b.n	14e82 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x26>
   14e82:	e7ff      	b.n	14e84 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x28>
   14e84:	2000      	movs	r0, #0
            self.vec.0.len = 0;
   14e86:	9903      	ldr	r1, [sp, #12]
   14e88:	6008      	str	r0, [r1, #0]
    }
   14e8a:	b006      	add	sp, #24
   14e8c:	bd80      	pop	{r7, pc}

00014e8e <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E>:

impl<T, N> ops::DerefMut for Vec<T, N>
where
    N: ArrayLength<T>,
{
    fn deref_mut(&mut self) -> &mut [T] {
   14e8e:	b580      	push	{r7, lr}
   14e90:	b084      	sub	sp, #16
   14e92:	9003      	str	r0, [sp, #12]
        self.0.as_mut_slice()
   14e94:	f000 f8ff 	bl	15096 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>
   14e98:	9002      	str	r0, [sp, #8]
   14e9a:	9101      	str	r1, [sp, #4]
   14e9c:	e7ff      	b.n	14e9e <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E+0x10>
    }
   14e9e:	9802      	ldr	r0, [sp, #8]
   14ea0:	9901      	ldr	r1, [sp, #4]
   14ea2:	b004      	add	sp, #16
   14ea4:	bd80      	pop	{r7, pc}

00014ea6 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>:
    fn deref_mut(&mut self) -> &mut [T] {
   14ea6:	b580      	push	{r7, lr}
   14ea8:	b084      	sub	sp, #16
   14eaa:	9003      	str	r0, [sp, #12]
        self.0.as_mut_slice()
   14eac:	f000 f908 	bl	150c0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>
   14eb0:	9002      	str	r0, [sp, #8]
   14eb2:	9101      	str	r1, [sp, #4]
   14eb4:	e7ff      	b.n	14eb6 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E+0x10>
    }
   14eb6:	9802      	ldr	r0, [sp, #8]
   14eb8:	9901      	ldr	r1, [sp, #4]
   14eba:	b004      	add	sp, #16
   14ebc:	bd80      	pop	{r7, pc}

00014ebe <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>:
    pub fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   14ebe:	b580      	push	{r7, lr}
   14ec0:	b084      	sub	sp, #16
   14ec2:	9001      	str	r0, [sp, #4]
   14ec4:	9102      	str	r1, [sp, #8]
   14ec6:	9203      	str	r2, [sp, #12]
        self.0.extend_from_slice(other)
   14ec8:	f000 f973 	bl	151b2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>
   14ecc:	9000      	str	r0, [sp, #0]
   14ece:	e7ff      	b.n	14ed0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE+0x12>
    }
   14ed0:	9800      	ldr	r0, [sp, #0]
   14ed2:	f000 0001 	and.w	r0, r0, #1
   14ed6:	b004      	add	sp, #16
   14ed8:	bd80      	pop	{r7, pc}

00014eda <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E>:
    pub fn new() -> Self {
   14eda:	b580      	push	{r7, lr}
   14edc:	b09c      	sub	sp, #112	; 0x70
   14ede:	a902      	add	r1, sp, #8
        Vec(crate::i::Vec::new())
   14ee0:	9001      	str	r0, [sp, #4]
   14ee2:	4608      	mov	r0, r1
   14ee4:	f000 f8c8 	bl	15078 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>
   14ee8:	e7ff      	b.n	14eea <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E+0x10>
   14eea:	a902      	add	r1, sp, #8
   14eec:	2268      	movs	r2, #104	; 0x68
   14eee:	9801      	ldr	r0, [sp, #4]
   14ef0:	f008 f92a 	bl	1d148 <__aeabi_memcpy>
    }
   14ef4:	b01c      	add	sp, #112	; 0x70
   14ef6:	bd80      	pop	{r7, pc}

00014ef8 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE>:
    pub fn new() -> Self {
   14ef8:	b580      	push	{r7, lr}
   14efa:	b0b4      	sub	sp, #208	; 0xd0
   14efc:	a901      	add	r1, sp, #4
        Vec(crate::i::Vec::new())
   14efe:	9000      	str	r0, [sp, #0]
   14f00:	4608      	mov	r0, r1
   14f02:	f000 f8aa 	bl	1505a <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>
   14f06:	e7ff      	b.n	14f08 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE+0x10>
   14f08:	a901      	add	r1, sp, #4
   14f0a:	22cc      	movs	r2, #204	; 0xcc
   14f0c:	9800      	ldr	r0, [sp, #0]
   14f0e:	f008 f91b 	bl	1d148 <__aeabi_memcpy>
    }
   14f12:	b034      	add	sp, #208	; 0xd0
   14f14:	bd80      	pop	{r7, pc}

00014f16 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>:
    pub fn push(&mut self, item: T) -> Result<(), T> {
   14f16:	b580      	push	{r7, lr}
   14f18:	b086      	sub	sp, #24
   14f1a:	460a      	mov	r2, r1
   14f1c:	9004      	str	r0, [sp, #16]
   14f1e:	f8ad 1016 	strh.w	r1, [sp, #22]
        self.0.push(item)
   14f22:	9203      	str	r2, [sp, #12]
   14f24:	f000 fa0b 	bl	1533e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E>
   14f28:	9002      	str	r0, [sp, #8]
   14f2a:	9101      	str	r1, [sp, #4]
   14f2c:	e7ff      	b.n	14f2e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE+0x18>
    }
   14f2e:	9802      	ldr	r0, [sp, #8]
   14f30:	9901      	ldr	r1, [sp, #4]
   14f32:	b006      	add	sp, #24
   14f34:	bd80      	pop	{r7, pc}

00014f36 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>:
    pub fn clear(&mut self) {
   14f36:	b580      	push	{r7, lr}
   14f38:	b082      	sub	sp, #8
   14f3a:	9001      	str	r0, [sp, #4]
        self.0.clear()
   14f3c:	f000 fa28 	bl	15390 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE>
   14f40:	e7ff      	b.n	14f42 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E+0xc>
    }
   14f42:	b002      	add	sp, #8
   14f44:	bd80      	pop	{r7, pc}

00014f46 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>:
    pub fn clear(&mut self) {
   14f46:	b580      	push	{r7, lr}
   14f48:	b082      	sub	sp, #8
   14f4a:	9001      	str	r0, [sp, #4]
        self.0.clear()
   14f4c:	f000 fa29 	bl	153a2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E>
   14f50:	e7ff      	b.n	14f52 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E+0xc>
    }
   14f52:	b002      	add	sp, #8
   14f54:	bd80      	pop	{r7, pc}

00014f56 <_ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE>:
    fn into_iter(self) -> Self::IntoIter {
   14f56:	b580      	push	{r7, lr}
   14f58:	b0b6      	sub	sp, #216	; 0xd8
   14f5a:	aa03      	add	r2, sp, #12
   14f5c:	23cc      	movs	r3, #204	; 0xcc
        IntoIter { vec: self, next: 0 }
   14f5e:	9002      	str	r0, [sp, #8]
   14f60:	4610      	mov	r0, r2
   14f62:	9201      	str	r2, [sp, #4]
   14f64:	461a      	mov	r2, r3
   14f66:	9300      	str	r3, [sp, #0]
   14f68:	f008 f8ee 	bl	1d148 <__aeabi_memcpy>
   14f6c:	9802      	ldr	r0, [sp, #8]
   14f6e:	9901      	ldr	r1, [sp, #4]
   14f70:	9a00      	ldr	r2, [sp, #0]
   14f72:	f008 f8e9 	bl	1d148 <__aeabi_memcpy>
   14f76:	2000      	movs	r0, #0
   14f78:	9902      	ldr	r1, [sp, #8]
   14f7a:	f8c1 00cc 	str.w	r0, [r1, #204]	; 0xcc
    }
   14f7e:	b036      	add	sp, #216	; 0xd8
   14f80:	bd80      	pop	{r7, pc}

00014f82 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E>:
    fn next(&mut self) -> Option<Self::Item> {
   14f82:	b580      	push	{r7, lr}
   14f84:	b08e      	sub	sp, #56	; 0x38
   14f86:	900a      	str	r0, [sp, #40]	; 0x28
        if self.next < self.vec.len() {
   14f88:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   14f8c:	9008      	str	r0, [sp, #32]
   14f8e:	9107      	str	r1, [sp, #28]
   14f90:	f7ff ff58 	bl	14e44 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E>
   14f94:	9006      	str	r0, [sp, #24]
   14f96:	9105      	str	r1, [sp, #20]
   14f98:	e7ff      	b.n	14f9a <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x18>
   14f9a:	9806      	ldr	r0, [sp, #24]
   14f9c:	9905      	ldr	r1, [sp, #20]
   14f9e:	f000 fdee 	bl	15b7e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   14fa2:	9004      	str	r0, [sp, #16]
   14fa4:	e7ff      	b.n	14fa6 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x24>
   14fa6:	9807      	ldr	r0, [sp, #28]
   14fa8:	9904      	ldr	r1, [sp, #16]
   14faa:	4288      	cmp	r0, r1
   14fac:	d304      	bcc.n	14fb8 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x36>
   14fae:	e7ff      	b.n	14fb0 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x2e>
   14fb0:	2000      	movs	r0, #0
            None
   14fb2:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
        if self.next < self.vec.len() {
   14fb6:	e029      	b.n	1500c <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x8a>
                (self.vec.0.buffer.as_ptr() as *const T)
   14fb8:	9808      	ldr	r0, [sp, #32]
   14fba:	1d01      	adds	r1, r0, #4
   14fbc:	910c      	str	r1, [sp, #48]	; 0x30
   14fbe:	910d      	str	r1, [sp, #52]	; 0x34
   14fc0:	9103      	str	r1, [sp, #12]
   14fc2:	e7ff      	b.n	14fc4 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x42>
                    .add(self.next)
   14fc4:	9808      	ldr	r0, [sp, #32]
   14fc6:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
                (self.vec.0.buffer.as_ptr() as *const T)
   14fca:	9803      	ldr	r0, [sp, #12]
   14fcc:	f001 fa8d 	bl	164ea <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>
   14fd0:	9002      	str	r0, [sp, #8]
   14fd2:	e7ff      	b.n	14fd4 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x52>
   14fd4:	9802      	ldr	r0, [sp, #8]
   14fd6:	f001 fa93 	bl	16500 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E>
   14fda:	4601      	mov	r1, r0
   14fdc:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
   14fe0:	9101      	str	r1, [sp, #4]
   14fe2:	e7ff      	b.n	14fe4 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x62>
            self.next += 1;
   14fe4:	9808      	ldr	r0, [sp, #32]
   14fe6:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   14fea:	1c4a      	adds	r2, r1, #1
   14fec:	4613      	mov	r3, r2
   14fee:	428a      	cmp	r2, r1
   14ff0:	9300      	str	r3, [sp, #0]
   14ff2:	d311      	bcc.n	15018 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x96>
   14ff4:	e7ff      	b.n	14ff6 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x74>
   14ff6:	9800      	ldr	r0, [sp, #0]
   14ff8:	9908      	ldr	r1, [sp, #32]
   14ffa:	f8c1 00cc 	str.w	r0, [r1, #204]	; 0xcc
            Some(item)
   14ffe:	9a01      	ldr	r2, [sp, #4]
   15000:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
   15004:	2301      	movs	r3, #1
   15006:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        if self.next < self.vec.len() {
   1500a:	e7ff      	b.n	1500c <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x8a>
    }
   1500c:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   15010:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
   15014:	b00e      	add	sp, #56	; 0x38
   15016:	bd80      	pop	{r7, pc}
            self.next += 1;
   15018:	f64f 2020 	movw	r0, #64032	; 0xfa20
   1501c:	f2c0 0001 	movt	r0, #1
   15020:	f64f 2210 	movw	r2, #64016	; 0xfa10
   15024:	f2c0 0201 	movt	r2, #1
   15028:	211c      	movs	r1, #28
   1502a:	f001 fcb9 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1502e:	defe      	udf	#254	; 0xfe

00015030 <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE>:
   15030:	b580      	push	{r7, lr}
   15032:	b084      	sub	sp, #16
   15034:	9002      	str	r0, [sp, #8]
   15036:	9103      	str	r1, [sp, #12]
   15038:	f64f 203c 	movw	r0, #64060	; 0xfa3c
   1503c:	f2c0 0001 	movt	r0, #1
   15040:	2202      	movs	r2, #2
   15042:	9001      	str	r0, [sp, #4]
   15044:	4608      	mov	r0, r1
   15046:	9901      	ldr	r1, [sp, #4]
   15048:	f002 f9ca 	bl	173e0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>
   1504c:	9000      	str	r0, [sp, #0]
   1504e:	e7ff      	b.n	15050 <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE+0x20>
   15050:	9800      	ldr	r0, [sp, #0]
   15052:	f000 0001 	and.w	r0, r0, #1
   15056:	b004      	add	sp, #16
   15058:	bd80      	pop	{r7, pc}

0001505a <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>:
    pub const fn new() -> Self {
   1505a:	b580      	push	{r7, lr}
   1505c:	b0b4      	sub	sp, #208	; 0xd0
            buffer: MaybeUninit::uninit(),
   1505e:	9001      	str	r0, [sp, #4]
   15060:	e7ff      	b.n	15062 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE+0x8>
        Self {
   15062:	9801      	ldr	r0, [sp, #4]
   15064:	3004      	adds	r0, #4
   15066:	a902      	add	r1, sp, #8
   15068:	22c8      	movs	r2, #200	; 0xc8
   1506a:	f008 f86d 	bl	1d148 <__aeabi_memcpy>
   1506e:	2100      	movs	r1, #0
   15070:	9a01      	ldr	r2, [sp, #4]
   15072:	6011      	str	r1, [r2, #0]
    }
   15074:	b034      	add	sp, #208	; 0xd0
   15076:	bd80      	pop	{r7, pc}

00015078 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>:
    pub const fn new() -> Self {
   15078:	b580      	push	{r7, lr}
   1507a:	b09a      	sub	sp, #104	; 0x68
            buffer: MaybeUninit::uninit(),
   1507c:	9000      	str	r0, [sp, #0]
   1507e:	e7ff      	b.n	15080 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE+0x8>
        Self {
   15080:	9800      	ldr	r0, [sp, #0]
   15082:	3004      	adds	r0, #4
   15084:	a901      	add	r1, sp, #4
   15086:	2264      	movs	r2, #100	; 0x64
   15088:	f008 f85e 	bl	1d148 <__aeabi_memcpy>
   1508c:	2100      	movs	r1, #0
   1508e:	9a00      	ldr	r2, [sp, #0]
   15090:	6011      	str	r1, [r2, #0]
    }
   15092:	b01a      	add	sp, #104	; 0x68
   15094:	bd80      	pop	{r7, pc}

00015096 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   15096:	b580      	push	{r7, lr}
   15098:	b088      	sub	sp, #32
   1509a:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   1509c:	1d01      	adds	r1, r0, #4
   1509e:	9106      	str	r1, [sp, #24]
   150a0:	9107      	str	r1, [sp, #28]
   150a2:	9004      	str	r0, [sp, #16]
   150a4:	9103      	str	r1, [sp, #12]
   150a6:	e7ff      	b.n	150a8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E+0x12>
   150a8:	9804      	ldr	r0, [sp, #16]
   150aa:	6801      	ldr	r1, [r0, #0]
   150ac:	9803      	ldr	r0, [sp, #12]
   150ae:	f000 fd42 	bl	15b36 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   150b2:	9002      	str	r0, [sp, #8]
   150b4:	9101      	str	r1, [sp, #4]
   150b6:	e7ff      	b.n	150b8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E+0x22>
    }
   150b8:	9802      	ldr	r0, [sp, #8]
   150ba:	9901      	ldr	r1, [sp, #4]
   150bc:	b008      	add	sp, #32
   150be:	bd80      	pop	{r7, pc}

000150c0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   150c0:	b580      	push	{r7, lr}
   150c2:	b088      	sub	sp, #32
   150c4:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   150c6:	1d01      	adds	r1, r0, #4
   150c8:	9106      	str	r1, [sp, #24]
   150ca:	9107      	str	r1, [sp, #28]
   150cc:	9004      	str	r0, [sp, #16]
   150ce:	9103      	str	r1, [sp, #12]
   150d0:	e7ff      	b.n	150d2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE+0x12>
   150d2:	9804      	ldr	r0, [sp, #16]
   150d4:	6801      	ldr	r1, [r0, #0]
   150d6:	9803      	ldr	r0, [sp, #12]
   150d8:	f000 fd2d 	bl	15b36 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   150dc:	9002      	str	r0, [sp, #8]
   150de:	9101      	str	r1, [sp, #4]
   150e0:	e7ff      	b.n	150e2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE+0x22>
    }
   150e2:	9802      	ldr	r0, [sp, #8]
   150e4:	9901      	ldr	r1, [sp, #4]
   150e6:	b008      	add	sp, #32
   150e8:	bd80      	pop	{r7, pc}

000150ea <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   150ea:	b580      	push	{r7, lr}
   150ec:	b08a      	sub	sp, #40	; 0x28
   150ee:	460a      	mov	r2, r1
   150f0:	9006      	str	r0, [sp, #24]
   150f2:	f8ad 101e 	strh.w	r1, [sp, #30]
        (self.buffer.as_mut_ptr() as *mut T)
   150f6:	1d01      	adds	r1, r0, #4
   150f8:	9108      	str	r1, [sp, #32]
   150fa:	9109      	str	r1, [sp, #36]	; 0x24
   150fc:	9005      	str	r0, [sp, #20]
   150fe:	9204      	str	r2, [sp, #16]
   15100:	9103      	str	r1, [sp, #12]
   15102:	e7ff      	b.n	15104 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x1a>
            .add(self.len)
   15104:	9805      	ldr	r0, [sp, #20]
   15106:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   15108:	9803      	ldr	r0, [sp, #12]
   1510a:	f000 fe31 	bl	15d70 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   1510e:	9002      	str	r0, [sp, #8]
   15110:	e7ff      	b.n	15112 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x28>
   15112:	9802      	ldr	r0, [sp, #8]
   15114:	9904      	ldr	r1, [sp, #16]
   15116:	f000 fe36 	bl	15d86 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>
   1511a:	e7ff      	b.n	1511c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x32>
        self.len += 1;
   1511c:	9805      	ldr	r0, [sp, #20]
   1511e:	6801      	ldr	r1, [r0, #0]
   15120:	1c4a      	adds	r2, r1, #1
   15122:	4613      	mov	r3, r2
   15124:	428a      	cmp	r2, r1
   15126:	9301      	str	r3, [sp, #4]
   15128:	d305      	bcc.n	15136 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x4c>
   1512a:	e7ff      	b.n	1512c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x42>
   1512c:	9801      	ldr	r0, [sp, #4]
   1512e:	9905      	ldr	r1, [sp, #20]
   15130:	6008      	str	r0, [r1, #0]
    }
   15132:	b00a      	add	sp, #40	; 0x28
   15134:	bd80      	pop	{r7, pc}
        self.len += 1;
   15136:	f64f 20e0 	movw	r0, #64224	; 0xfae0
   1513a:	f2c0 0001 	movt	r0, #1
   1513e:	f64f 22c4 	movw	r2, #64196	; 0xfac4
   15142:	f2c0 0201 	movt	r2, #1
   15146:	211c      	movs	r1, #28
   15148:	f001 fc2a 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1514c:	defe      	udf	#254	; 0xfe

0001514e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   1514e:	b580      	push	{r7, lr}
   15150:	b08a      	sub	sp, #40	; 0x28
   15152:	460a      	mov	r2, r1
   15154:	9006      	str	r0, [sp, #24]
   15156:	f8ad 101e 	strh.w	r1, [sp, #30]
        (self.buffer.as_mut_ptr() as *mut T)
   1515a:	1d01      	adds	r1, r0, #4
   1515c:	9108      	str	r1, [sp, #32]
   1515e:	9109      	str	r1, [sp, #36]	; 0x24
   15160:	9005      	str	r0, [sp, #20]
   15162:	9204      	str	r2, [sp, #16]
   15164:	9103      	str	r1, [sp, #12]
   15166:	e7ff      	b.n	15168 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x1a>
            .add(self.len)
   15168:	9805      	ldr	r0, [sp, #20]
   1516a:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   1516c:	9803      	ldr	r0, [sp, #12]
   1516e:	f000 fdff 	bl	15d70 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   15172:	9002      	str	r0, [sp, #8]
   15174:	e7ff      	b.n	15176 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x28>
   15176:	9802      	ldr	r0, [sp, #8]
   15178:	9904      	ldr	r1, [sp, #16]
   1517a:	f000 fe04 	bl	15d86 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>
   1517e:	e7ff      	b.n	15180 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x32>
        self.len += 1;
   15180:	9805      	ldr	r0, [sp, #20]
   15182:	6801      	ldr	r1, [r0, #0]
   15184:	1c4a      	adds	r2, r1, #1
   15186:	4613      	mov	r3, r2
   15188:	428a      	cmp	r2, r1
   1518a:	9301      	str	r3, [sp, #4]
   1518c:	d305      	bcc.n	1519a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x4c>
   1518e:	e7ff      	b.n	15190 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x42>
   15190:	9801      	ldr	r0, [sp, #4]
   15192:	9905      	ldr	r1, [sp, #20]
   15194:	6008      	str	r0, [r1, #0]
    }
   15196:	b00a      	add	sp, #40	; 0x28
   15198:	bd80      	pop	{r7, pc}
        self.len += 1;
   1519a:	f64f 20e0 	movw	r0, #64224	; 0xfae0
   1519e:	f2c0 0001 	movt	r0, #1
   151a2:	f64f 22c4 	movw	r2, #64196	; 0xfac4
   151a6:	f2c0 0201 	movt	r2, #1
   151aa:	211c      	movs	r1, #28
   151ac:	f001 fbf8 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   151b0:	defe      	udf	#254	; 0xfe

000151b2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   151b2:	b580      	push	{r7, lr}
   151b4:	b094      	sub	sp, #80	; 0x50
   151b6:	900e      	str	r0, [sp, #56]	; 0x38
   151b8:	910f      	str	r1, [sp, #60]	; 0x3c
   151ba:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   151bc:	6803      	ldr	r3, [r0, #0]
   151be:	9009      	str	r0, [sp, #36]	; 0x24
   151c0:	4608      	mov	r0, r1
   151c2:	9108      	str	r1, [sp, #32]
   151c4:	4611      	mov	r1, r2
   151c6:	9207      	str	r2, [sp, #28]
   151c8:	9306      	str	r3, [sp, #24]
   151ca:	f000 fcd8 	bl	15b7e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   151ce:	9005      	str	r0, [sp, #20]
   151d0:	e7ff      	b.n	151d2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x20>
   151d2:	9806      	ldr	r0, [sp, #24]
   151d4:	9905      	ldr	r1, [sp, #20]
   151d6:	1842      	adds	r2, r0, r1
   151d8:	4613      	mov	r3, r2
   151da:	4282      	cmp	r2, r0
   151dc:	9304      	str	r3, [sp, #16]
   151de:	d33f      	bcc.n	15260 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xae>
   151e0:	e7ff      	b.n	151e2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x30>
   151e2:	9809      	ldr	r0, [sp, #36]	; 0x24
   151e4:	f000 f96a 	bl	154bc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E>
   151e8:	9003      	str	r0, [sp, #12]
   151ea:	e7ff      	b.n	151ec <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x3a>
   151ec:	9804      	ldr	r0, [sp, #16]
   151ee:	9903      	ldr	r1, [sp, #12]
   151f0:	4288      	cmp	r0, r1
   151f2:	d807      	bhi.n	15204 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x52>
   151f4:	e7ff      	b.n	151f6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x44>
            for elem in other {
   151f6:	9808      	ldr	r0, [sp, #32]
   151f8:	9907      	ldr	r1, [sp, #28]
   151fa:	f000 fd34 	bl	15c66 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>
   151fe:	9002      	str	r0, [sp, #8]
   15200:	9101      	str	r1, [sp, #4]
   15202:	e003      	b.n	1520c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x5a>
   15204:	2001      	movs	r0, #1
            Err(())
   15206:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   1520a:	e025      	b.n	15258 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa6>
            for elem in other {
   1520c:	9802      	ldr	r0, [sp, #8]
   1520e:	900b      	str	r0, [sp, #44]	; 0x2c
   15210:	9901      	ldr	r1, [sp, #4]
   15212:	910c      	str	r1, [sp, #48]	; 0x30
   15214:	e7ff      	b.n	15216 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x64>
   15216:	a80b      	add	r0, sp, #44	; 0x2c
   15218:	f000 fd47 	bl	15caa <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>
   1521c:	900d      	str	r0, [sp, #52]	; 0x34
   1521e:	e7ff      	b.n	15220 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x6e>
   15220:	980d      	ldr	r0, [sp, #52]	; 0x34
   15222:	2800      	cmp	r0, #0
   15224:	4601      	mov	r1, r0
   15226:	bf18      	it	ne
   15228:	2101      	movne	r1, #1
   1522a:	2800      	cmp	r0, #0
   1522c:	d001      	beq.n	15232 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x80>
   1522e:	e7ff      	b.n	15230 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x7e>
   15230:	e004      	b.n	1523c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x8a>
   15232:	2000      	movs	r0, #0
            Ok(())
   15234:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   15238:	e00e      	b.n	15258 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa6>
            for elem in other {
   1523a:	defe      	udf	#254	; 0xfe
   1523c:	980d      	ldr	r0, [sp, #52]	; 0x34
   1523e:	9011      	str	r0, [sp, #68]	; 0x44
   15240:	9012      	str	r0, [sp, #72]	; 0x48
   15242:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   15244:	f000 fbeb 	bl	15a1e <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>
   15248:	9000      	str	r0, [sp, #0]
   1524a:	e7ff      	b.n	1524c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x9a>
   1524c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1524e:	9900      	ldr	r1, [sp, #0]
   15250:	f7ff ff4b 	bl	150ea <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE>
   15254:	e7ff      	b.n	15256 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa4>
            for elem in other {
   15256:	e7de      	b.n	15216 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x64>
    }
   15258:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   1525c:	b014      	add	sp, #80	; 0x50
   1525e:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   15260:	f64f 20e0 	movw	r0, #64224	; 0xfae0
   15264:	f2c0 0001 	movt	r0, #1
   15268:	f64f 22fc 	movw	r2, #64252	; 0xfafc
   1526c:	f2c0 0201 	movt	r2, #1
   15270:	211c      	movs	r1, #28
   15272:	f001 fb95 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15276:	defe      	udf	#254	; 0xfe

00015278 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   15278:	b580      	push	{r7, lr}
   1527a:	b094      	sub	sp, #80	; 0x50
   1527c:	900e      	str	r0, [sp, #56]	; 0x38
   1527e:	910f      	str	r1, [sp, #60]	; 0x3c
   15280:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   15282:	6803      	ldr	r3, [r0, #0]
   15284:	9009      	str	r0, [sp, #36]	; 0x24
   15286:	4608      	mov	r0, r1
   15288:	9108      	str	r1, [sp, #32]
   1528a:	4611      	mov	r1, r2
   1528c:	9207      	str	r2, [sp, #28]
   1528e:	9306      	str	r3, [sp, #24]
   15290:	f000 fc75 	bl	15b7e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15294:	9005      	str	r0, [sp, #20]
   15296:	e7ff      	b.n	15298 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x20>
   15298:	9806      	ldr	r0, [sp, #24]
   1529a:	9905      	ldr	r1, [sp, #20]
   1529c:	1842      	adds	r2, r0, r1
   1529e:	4613      	mov	r3, r2
   152a0:	4282      	cmp	r2, r0
   152a2:	9304      	str	r3, [sp, #16]
   152a4:	d33f      	bcc.n	15326 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xae>
   152a6:	e7ff      	b.n	152a8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x30>
   152a8:	9809      	ldr	r0, [sp, #36]	; 0x24
   152aa:	f000 f8fd 	bl	154a8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>
   152ae:	9003      	str	r0, [sp, #12]
   152b0:	e7ff      	b.n	152b2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x3a>
   152b2:	9804      	ldr	r0, [sp, #16]
   152b4:	9903      	ldr	r1, [sp, #12]
   152b6:	4288      	cmp	r0, r1
   152b8:	d807      	bhi.n	152ca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x52>
   152ba:	e7ff      	b.n	152bc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x44>
            for elem in other {
   152bc:	9808      	ldr	r0, [sp, #32]
   152be:	9907      	ldr	r1, [sp, #28]
   152c0:	f000 fcd1 	bl	15c66 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>
   152c4:	9002      	str	r0, [sp, #8]
   152c6:	9101      	str	r1, [sp, #4]
   152c8:	e003      	b.n	152d2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x5a>
   152ca:	2001      	movs	r0, #1
            Err(())
   152cc:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   152d0:	e025      	b.n	1531e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa6>
            for elem in other {
   152d2:	9802      	ldr	r0, [sp, #8]
   152d4:	900b      	str	r0, [sp, #44]	; 0x2c
   152d6:	9901      	ldr	r1, [sp, #4]
   152d8:	910c      	str	r1, [sp, #48]	; 0x30
   152da:	e7ff      	b.n	152dc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x64>
   152dc:	a80b      	add	r0, sp, #44	; 0x2c
   152de:	f000 fce4 	bl	15caa <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>
   152e2:	900d      	str	r0, [sp, #52]	; 0x34
   152e4:	e7ff      	b.n	152e6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x6e>
   152e6:	980d      	ldr	r0, [sp, #52]	; 0x34
   152e8:	2800      	cmp	r0, #0
   152ea:	4601      	mov	r1, r0
   152ec:	bf18      	it	ne
   152ee:	2101      	movne	r1, #1
   152f0:	2800      	cmp	r0, #0
   152f2:	d001      	beq.n	152f8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x80>
   152f4:	e7ff      	b.n	152f6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x7e>
   152f6:	e004      	b.n	15302 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x8a>
   152f8:	2000      	movs	r0, #0
            Ok(())
   152fa:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   152fe:	e00e      	b.n	1531e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa6>
            for elem in other {
   15300:	defe      	udf	#254	; 0xfe
   15302:	980d      	ldr	r0, [sp, #52]	; 0x34
   15304:	9011      	str	r0, [sp, #68]	; 0x44
   15306:	9012      	str	r0, [sp, #72]	; 0x48
   15308:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   1530a:	f000 fb88 	bl	15a1e <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>
   1530e:	9000      	str	r0, [sp, #0]
   15310:	e7ff      	b.n	15312 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x9a>
   15312:	9809      	ldr	r0, [sp, #36]	; 0x24
   15314:	9900      	ldr	r1, [sp, #0]
   15316:	f7ff ff1a 	bl	1514e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>
   1531a:	e7ff      	b.n	1531c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa4>
            for elem in other {
   1531c:	e7de      	b.n	152dc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x64>
    }
   1531e:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   15322:	b014      	add	sp, #80	; 0x50
   15324:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   15326:	f64f 20e0 	movw	r0, #64224	; 0xfae0
   1532a:	f2c0 0001 	movt	r0, #1
   1532e:	f64f 22fc 	movw	r2, #64252	; 0xfafc
   15332:	f2c0 0201 	movt	r2, #1
   15336:	211c      	movs	r1, #28
   15338:	f001 fb32 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1533c:	defe      	udf	#254	; 0xfe

0001533e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E>:
    pub(crate) fn push(&mut self, item: T) -> Result<(), T> {
   1533e:	b580      	push	{r7, lr}
   15340:	b088      	sub	sp, #32
   15342:	460a      	mov	r2, r1
   15344:	9006      	str	r0, [sp, #24]
   15346:	f8ad 101e 	strh.w	r1, [sp, #30]
        if self.len < self.capacity() {
   1534a:	6801      	ldr	r1, [r0, #0]
   1534c:	9004      	str	r0, [sp, #16]
   1534e:	9203      	str	r2, [sp, #12]
   15350:	9102      	str	r1, [sp, #8]
   15352:	f000 f8a9 	bl	154a8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>
   15356:	9001      	str	r0, [sp, #4]
   15358:	e7ff      	b.n	1535a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x1c>
   1535a:	9802      	ldr	r0, [sp, #8]
   1535c:	9901      	ldr	r1, [sp, #4]
   1535e:	4288      	cmp	r0, r1
   15360:	d307      	bcc.n	15372 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x34>
   15362:	e7ff      	b.n	15364 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x26>
            Err(item)
   15364:	9803      	ldr	r0, [sp, #12]
   15366:	f8ad 0016 	strh.w	r0, [sp, #22]
   1536a:	2101      	movs	r1, #1
   1536c:	f8ad 1014 	strh.w	r1, [sp, #20]
        if self.len < self.capacity() {
   15370:	e008      	b.n	15384 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x46>
            unsafe { self.push_unchecked(item) }
   15372:	9804      	ldr	r0, [sp, #16]
   15374:	9903      	ldr	r1, [sp, #12]
   15376:	f7ff feea 	bl	1514e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>
   1537a:	e7ff      	b.n	1537c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x3e>
   1537c:	2000      	movs	r0, #0
            Ok(())
   1537e:	f8ad 0014 	strh.w	r0, [sp, #20]
        if self.len < self.capacity() {
   15382:	e7ff      	b.n	15384 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x46>
    }
   15384:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   15388:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   1538c:	b008      	add	sp, #32
   1538e:	bd80      	pop	{r7, pc}

00015390 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE>:
    pub(crate) fn clear(&mut self) {
   15390:	b580      	push	{r7, lr}
   15392:	b082      	sub	sp, #8
   15394:	9001      	str	r0, [sp, #4]
   15396:	2100      	movs	r1, #0
        self.truncate(0);
   15398:	f000 f8d0 	bl	1553c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E>
   1539c:	e7ff      	b.n	1539e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE+0xe>
    }
   1539e:	b002      	add	sp, #8
   153a0:	bd80      	pop	{r7, pc}

000153a2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E>:
    pub(crate) fn clear(&mut self) {
   153a2:	b580      	push	{r7, lr}
   153a4:	b082      	sub	sp, #8
   153a6:	9001      	str	r0, [sp, #4]
   153a8:	2100      	movs	r1, #0
        self.truncate(0);
   153aa:	f000 f891 	bl	154d0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE>
   153ae:	e7ff      	b.n	153b0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E+0xe>
    }
   153b0:	b002      	add	sp, #8
   153b2:	bd80      	pop	{r7, pc}

000153b4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE>:
    pub(crate) fn clone(&self) -> Self
   153b4:	b580      	push	{r7, lr}
   153b6:	b0a0      	sub	sp, #128	; 0x80
   153b8:	911f      	str	r1, [sp, #124]	; 0x7c
   153ba:	aa05      	add	r2, sp, #20
        let mut new = Self::new();
   153bc:	9004      	str	r0, [sp, #16]
   153be:	4610      	mov	r0, r2
   153c0:	9103      	str	r1, [sp, #12]
   153c2:	f7ff fe59 	bl	15078 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>
   153c6:	e7ff      	b.n	153c8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x14>
        new.extend_from_slice(self.as_slice()).unwrap();
   153c8:	9803      	ldr	r0, [sp, #12]
   153ca:	f000 f843 	bl	15454 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>
   153ce:	9002      	str	r0, [sp, #8]
   153d0:	9101      	str	r1, [sp, #4]
   153d2:	e7ff      	b.n	153d4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x20>
   153d4:	a805      	add	r0, sp, #20
   153d6:	9902      	ldr	r1, [sp, #8]
   153d8:	9a01      	ldr	r2, [sp, #4]
   153da:	f7ff ff4d 	bl	15278 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE>
   153de:	9000      	str	r0, [sp, #0]
   153e0:	e7ff      	b.n	153e2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x2e>
   153e2:	9800      	ldr	r0, [sp, #0]
   153e4:	f000 0001 	and.w	r0, r0, #1
   153e8:	f64f 310c 	movw	r1, #64268	; 0xfb0c
   153ec:	f2c0 0101 	movt	r1, #1
   153f0:	f000 f959 	bl	156a6 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>
   153f4:	e7ff      	b.n	153f6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x42>
   153f6:	a905      	add	r1, sp, #20
   153f8:	2268      	movs	r2, #104	; 0x68
        new
   153fa:	9804      	ldr	r0, [sp, #16]
   153fc:	f007 fea4 	bl	1d148 <__aeabi_memcpy>
    }
   15400:	b020      	add	sp, #128	; 0x80
   15402:	bd80      	pop	{r7, pc}

00015404 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E>:
    pub(crate) fn clone(&self) -> Self
   15404:	b580      	push	{r7, lr}
   15406:	b0ba      	sub	sp, #232	; 0xe8
   15408:	9139      	str	r1, [sp, #228]	; 0xe4
   1540a:	aa06      	add	r2, sp, #24
        let mut new = Self::new();
   1540c:	9005      	str	r0, [sp, #20]
   1540e:	4610      	mov	r0, r2
   15410:	9104      	str	r1, [sp, #16]
   15412:	f7ff fe22 	bl	1505a <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>
   15416:	e7ff      	b.n	15418 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x14>
        new.extend_from_slice(self.as_slice()).unwrap();
   15418:	9804      	ldr	r0, [sp, #16]
   1541a:	f000 f830 	bl	1547e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>
   1541e:	9003      	str	r0, [sp, #12]
   15420:	9102      	str	r1, [sp, #8]
   15422:	e7ff      	b.n	15424 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x20>
   15424:	a806      	add	r0, sp, #24
   15426:	9903      	ldr	r1, [sp, #12]
   15428:	9a02      	ldr	r2, [sp, #8]
   1542a:	f7ff fec2 	bl	151b2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>
   1542e:	9001      	str	r0, [sp, #4]
   15430:	e7ff      	b.n	15432 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x2e>
   15432:	9801      	ldr	r0, [sp, #4]
   15434:	f000 0001 	and.w	r0, r0, #1
   15438:	f64f 310c 	movw	r1, #64268	; 0xfb0c
   1543c:	f2c0 0101 	movt	r1, #1
   15440:	f000 f931 	bl	156a6 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>
   15444:	e7ff      	b.n	15446 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x42>
   15446:	a906      	add	r1, sp, #24
   15448:	22cc      	movs	r2, #204	; 0xcc
        new
   1544a:	9805      	ldr	r0, [sp, #20]
   1544c:	f007 fe7c 	bl	1d148 <__aeabi_memcpy>
    }
   15450:	b03a      	add	sp, #232	; 0xe8
   15452:	bd80      	pop	{r7, pc}

00015454 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   15454:	b580      	push	{r7, lr}
   15456:	b088      	sub	sp, #32
   15458:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   1545a:	1d01      	adds	r1, r0, #4
   1545c:	9106      	str	r1, [sp, #24]
   1545e:	9107      	str	r1, [sp, #28]
   15460:	9004      	str	r0, [sp, #16]
   15462:	9103      	str	r1, [sp, #12]
   15464:	e7ff      	b.n	15466 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE+0x12>
   15466:	9804      	ldr	r0, [sp, #16]
   15468:	6801      	ldr	r1, [r0, #0]
   1546a:	9803      	ldr	r0, [sp, #12]
   1546c:	f000 fb56 	bl	15b1c <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>
   15470:	9002      	str	r0, [sp, #8]
   15472:	9101      	str	r1, [sp, #4]
   15474:	e7ff      	b.n	15476 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE+0x22>
    }
   15476:	9802      	ldr	r0, [sp, #8]
   15478:	9901      	ldr	r1, [sp, #4]
   1547a:	b008      	add	sp, #32
   1547c:	bd80      	pop	{r7, pc}

0001547e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>:
    pub(crate) fn as_slice(&self) -> &[T] {
   1547e:	b580      	push	{r7, lr}
   15480:	b088      	sub	sp, #32
   15482:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   15484:	1d01      	adds	r1, r0, #4
   15486:	9106      	str	r1, [sp, #24]
   15488:	9107      	str	r1, [sp, #28]
   1548a:	9004      	str	r0, [sp, #16]
   1548c:	9103      	str	r1, [sp, #12]
   1548e:	e7ff      	b.n	15490 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E+0x12>
   15490:	9804      	ldr	r0, [sp, #16]
   15492:	6801      	ldr	r1, [r0, #0]
   15494:	9803      	ldr	r0, [sp, #12]
   15496:	f000 fb41 	bl	15b1c <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>
   1549a:	9002      	str	r0, [sp, #8]
   1549c:	9101      	str	r1, [sp, #4]
   1549e:	e7ff      	b.n	154a0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E+0x22>
    }
   154a0:	9802      	ldr	r0, [sp, #8]
   154a2:	9901      	ldr	r1, [sp, #4]
   154a4:	b008      	add	sp, #32
   154a6:	bd80      	pop	{r7, pc}

000154a8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>:
    pub(crate) fn capacity(&self) -> usize {
   154a8:	b580      	push	{r7, lr}
   154aa:	b082      	sub	sp, #8
   154ac:	9001      	str	r0, [sp, #4]
        N::to_usize()
   154ae:	f000 fa26 	bl	158fe <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>
   154b2:	9000      	str	r0, [sp, #0]
   154b4:	e7ff      	b.n	154b6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E+0xe>
    }
   154b6:	9800      	ldr	r0, [sp, #0]
   154b8:	b002      	add	sp, #8
   154ba:	bd80      	pop	{r7, pc}

000154bc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E>:
    pub(crate) fn capacity(&self) -> usize {
   154bc:	b580      	push	{r7, lr}
   154be:	b082      	sub	sp, #8
   154c0:	9001      	str	r0, [sp, #4]
        N::to_usize()
   154c2:	f000 fa34 	bl	1592e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE>
   154c6:	9000      	str	r0, [sp, #0]
   154c8:	e7ff      	b.n	154ca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E+0xe>
    }
   154ca:	9800      	ldr	r0, [sp, #0]
   154cc:	b002      	add	sp, #8
   154ce:	bd80      	pop	{r7, pc}

000154d0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE>:
    pub(crate) fn truncate(&mut self, len: usize) {
   154d0:	b580      	push	{r7, lr}
   154d2:	b08a      	sub	sp, #40	; 0x28
   154d4:	9007      	str	r0, [sp, #28]
   154d6:	9108      	str	r1, [sp, #32]
   154d8:	9106      	str	r1, [sp, #24]
   154da:	9005      	str	r0, [sp, #20]
   154dc:	e7ff      	b.n	154de <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0xe>
            while len < self.len {
   154de:	9805      	ldr	r0, [sp, #20]
   154e0:	6801      	ldr	r1, [r0, #0]
   154e2:	9a06      	ldr	r2, [sp, #24]
   154e4:	428a      	cmp	r2, r1
   154e6:	d302      	bcc.n	154ee <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x1e>
   154e8:	e7ff      	b.n	154ea <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x1a>
    }
   154ea:	b00a      	add	sp, #40	; 0x28
   154ec:	bd80      	pop	{r7, pc}
                self.len -= 1;
   154ee:	9805      	ldr	r0, [sp, #20]
   154f0:	6801      	ldr	r1, [r0, #0]
   154f2:	1e4a      	subs	r2, r1, #1
   154f4:	2901      	cmp	r1, #1
   154f6:	9204      	str	r2, [sp, #16]
   154f8:	d314      	bcc.n	15524 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x54>
   154fa:	e7ff      	b.n	154fc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x2c>
   154fc:	9804      	ldr	r0, [sp, #16]
   154fe:	9905      	ldr	r1, [sp, #20]
   15500:	6008      	str	r0, [r1, #0]
                let len = self.len;
   15502:	680a      	ldr	r2, [r1, #0]
   15504:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   15506:	4608      	mov	r0, r1
   15508:	9203      	str	r2, [sp, #12]
   1550a:	f7ff fdd9 	bl	150c0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>
   1550e:	9002      	str	r0, [sp, #8]
   15510:	9101      	str	r1, [sp, #4]
   15512:	e7ff      	b.n	15514 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x44>
   15514:	9802      	ldr	r0, [sp, #8]
   15516:	9901      	ldr	r1, [sp, #4]
   15518:	9a03      	ldr	r2, [sp, #12]
   1551a:	f000 fb1e 	bl	15b5a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>
   1551e:	e7ff      	b.n	15520 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x50>
   15520:	e7ff      	b.n	15522 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x52>
            while len < self.len {
   15522:	e7dc      	b.n	154de <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0xe>
                self.len -= 1;
   15524:	f64f 20a0 	movw	r0, #64160	; 0xfaa0
   15528:	f2c0 0001 	movt	r0, #1
   1552c:	f64f 321c 	movw	r2, #64284	; 0xfb1c
   15530:	f2c0 0201 	movt	r2, #1
   15534:	2121      	movs	r1, #33	; 0x21
   15536:	f001 fa33 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1553a:	defe      	udf	#254	; 0xfe

0001553c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   1553c:	b580      	push	{r7, lr}
   1553e:	b08a      	sub	sp, #40	; 0x28
   15540:	9007      	str	r0, [sp, #28]
   15542:	9108      	str	r1, [sp, #32]
   15544:	9106      	str	r1, [sp, #24]
   15546:	9005      	str	r0, [sp, #20]
   15548:	e7ff      	b.n	1554a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0xe>
            while len < self.len {
   1554a:	9805      	ldr	r0, [sp, #20]
   1554c:	6801      	ldr	r1, [r0, #0]
   1554e:	9a06      	ldr	r2, [sp, #24]
   15550:	428a      	cmp	r2, r1
   15552:	d302      	bcc.n	1555a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x1e>
   15554:	e7ff      	b.n	15556 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x1a>
    }
   15556:	b00a      	add	sp, #40	; 0x28
   15558:	bd80      	pop	{r7, pc}
                self.len -= 1;
   1555a:	9805      	ldr	r0, [sp, #20]
   1555c:	6801      	ldr	r1, [r0, #0]
   1555e:	1e4a      	subs	r2, r1, #1
   15560:	2901      	cmp	r1, #1
   15562:	9204      	str	r2, [sp, #16]
   15564:	d314      	bcc.n	15590 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x54>
   15566:	e7ff      	b.n	15568 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x2c>
   15568:	9804      	ldr	r0, [sp, #16]
   1556a:	9905      	ldr	r1, [sp, #20]
   1556c:	6008      	str	r0, [r1, #0]
                let len = self.len;
   1556e:	680a      	ldr	r2, [r1, #0]
   15570:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   15572:	4608      	mov	r0, r1
   15574:	9203      	str	r2, [sp, #12]
   15576:	f7ff fd8e 	bl	15096 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>
   1557a:	9002      	str	r0, [sp, #8]
   1557c:	9101      	str	r1, [sp, #4]
   1557e:	e7ff      	b.n	15580 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x44>
   15580:	9802      	ldr	r0, [sp, #8]
   15582:	9901      	ldr	r1, [sp, #4]
   15584:	9a03      	ldr	r2, [sp, #12]
   15586:	f000 fae8 	bl	15b5a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>
   1558a:	e7ff      	b.n	1558c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x50>
   1558c:	e7ff      	b.n	1558e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x52>
            while len < self.len {
   1558e:	e7dc      	b.n	1554a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0xe>
                self.len -= 1;
   15590:	f64f 20a0 	movw	r0, #64160	; 0xfaa0
   15594:	f2c0 0001 	movt	r0, #1
   15598:	f64f 321c 	movw	r2, #64284	; 0xfb1c
   1559c:	f2c0 0201 	movt	r2, #1
   155a0:	2121      	movs	r1, #33	; 0x21
   155a2:	f001 f9fd 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   155a6:	defe      	udf	#254	; 0xfe

000155a8 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE>:
   155a8:	b082      	sub	sp, #8
   155aa:	9001      	str	r0, [sp, #4]
   155ac:	8800      	ldrh	r0, [r0, #0]
   155ae:	2800      	cmp	r0, #0
   155b0:	d004      	beq.n	155bc <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x14>
   155b2:	e7ff      	b.n	155b4 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0xc>
   155b4:	2000      	movs	r0, #0
   155b6:	f88d 0003 	strb.w	r0, [sp, #3]
   155ba:	e003      	b.n	155c4 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x1c>
   155bc:	2001      	movs	r0, #1
   155be:	f88d 0003 	strb.w	r0, [sp, #3]
   155c2:	e7ff      	b.n	155c4 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x1c>
   155c4:	f89d 0003 	ldrb.w	r0, [sp, #3]
   155c8:	b002      	add	sp, #8
   155ca:	4770      	bx	lr

000155cc <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E>:
   155cc:	b082      	sub	sp, #8
   155ce:	9001      	str	r0, [sp, #4]
   155d0:	7800      	ldrb	r0, [r0, #0]
   155d2:	07c0      	lsls	r0, r0, #31
   155d4:	2800      	cmp	r0, #0
   155d6:	d004      	beq.n	155e2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x16>
   155d8:	e7ff      	b.n	155da <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0xe>
   155da:	2000      	movs	r0, #0
   155dc:	f88d 0003 	strb.w	r0, [sp, #3]
   155e0:	e003      	b.n	155ea <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x1e>
   155e2:	2001      	movs	r0, #1
   155e4:	f88d 0003 	strb.w	r0, [sp, #3]
   155e8:	e7ff      	b.n	155ea <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x1e>
   155ea:	f89d 0003 	ldrb.w	r0, [sp, #3]
   155ee:	b002      	add	sp, #8
   155f0:	4770      	bx	lr

000155f2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>:
   155f2:	b510      	push	{r4, lr}
   155f4:	b08a      	sub	sp, #40	; 0x28
   155f6:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   155fa:	468e      	mov	lr, r1
   155fc:	4604      	mov	r4, r0
   155fe:	f8ad 0014 	strh.w	r0, [sp, #20]
   15602:	f8ad 1016 	strh.w	r1, [sp, #22]
   15606:	9207      	str	r2, [sp, #28]
   15608:	9308      	str	r3, [sp, #32]
   1560a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   1560e:	4601      	mov	r1, r0
   15610:	2800      	cmp	r0, #0
   15612:	9304      	str	r3, [sp, #16]
   15614:	9203      	str	r2, [sp, #12]
   15616:	f8cd c008 	str.w	ip, [sp, #8]
   1561a:	d013      	beq.n	15644 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x52>
   1561c:	e7ff      	b.n	1561e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x2c>
   1561e:	f8bd 0016 	ldrh.w	r0, [sp, #22]
   15622:	f8ad 001a 	strh.w	r0, [sp, #26]
   15626:	4668      	mov	r0, sp
   15628:	9902      	ldr	r1, [sp, #8]
   1562a:	6001      	str	r1, [r0, #0]
   1562c:	f64f 333c 	movw	r3, #64316	; 0xfb3c
   15630:	f2c0 0301 	movt	r3, #1
   15634:	f10d 021a 	add.w	r2, sp, #26
   15638:	9803      	ldr	r0, [sp, #12]
   1563a:	9904      	ldr	r1, [sp, #16]
   1563c:	f001 f982 	bl	16944 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   15640:	defe      	udf	#254	; 0xfe
   15642:	defe      	udf	#254	; 0xfe
   15644:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   15648:	2800      	cmp	r0, #0
   1564a:	d102      	bne.n	15652 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x60>
   1564c:	e7ff      	b.n	1564e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x5c>
   1564e:	b00a      	add	sp, #40	; 0x28
   15650:	bd10      	pop	{r4, pc}
   15652:	e7fc      	b.n	1564e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x5c>

00015654 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>:
   15654:	b580      	push	{r7, lr}
   15656:	b08a      	sub	sp, #40	; 0x28
   15658:	4684      	mov	ip, r0
   1565a:	f88d 0017 	strb.w	r0, [sp, #23]
   1565e:	9107      	str	r1, [sp, #28]
   15660:	9208      	str	r2, [sp, #32]
   15662:	f89d 0017 	ldrb.w	r0, [sp, #23]
   15666:	ea4f 7ec0 	mov.w	lr, r0, lsl #31
   1566a:	f1be 0f00 	cmp.w	lr, #0
   1566e:	9304      	str	r3, [sp, #16]
   15670:	9203      	str	r2, [sp, #12]
   15672:	9102      	str	r1, [sp, #8]
   15674:	d00e      	beq.n	15694 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x40>
   15676:	e7ff      	b.n	15678 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x24>
   15678:	4668      	mov	r0, sp
   1567a:	9904      	ldr	r1, [sp, #16]
   1567c:	6001      	str	r1, [r0, #0]
   1567e:	f64f 332c 	movw	r3, #64300	; 0xfb2c
   15682:	f2c0 0301 	movt	r3, #1
   15686:	aa06      	add	r2, sp, #24
   15688:	9802      	ldr	r0, [sp, #8]
   1568a:	9903      	ldr	r1, [sp, #12]
   1568c:	f001 f95a 	bl	16944 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   15690:	defe      	udf	#254	; 0xfe
   15692:	defe      	udf	#254	; 0xfe
   15694:	f89d 0017 	ldrb.w	r0, [sp, #23]
   15698:	07c0      	lsls	r0, r0, #31
   1569a:	2800      	cmp	r0, #0
   1569c:	d102      	bne.n	156a4 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x50>
   1569e:	e7ff      	b.n	156a0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>
   156a0:	b00a      	add	sp, #40	; 0x28
   156a2:	bd80      	pop	{r7, pc}
   156a4:	e7fc      	b.n	156a0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>

000156a6 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>:
   156a6:	b086      	sub	sp, #24
   156a8:	4602      	mov	r2, r0
   156aa:	f88d 000f 	strb.w	r0, [sp, #15]
   156ae:	f89d 000f 	ldrb.w	r0, [sp, #15]
   156b2:	07c3      	lsls	r3, r0, #31
   156b4:	2b00      	cmp	r3, #0
   156b6:	9102      	str	r1, [sp, #8]
   156b8:	d011      	beq.n	156de <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x38>
   156ba:	e7ff      	b.n	156bc <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x16>
   156bc:	4668      	mov	r0, sp
   156be:	9902      	ldr	r1, [sp, #8]
   156c0:	6001      	str	r1, [r0, #0]
   156c2:	f64f 304c 	movw	r0, #64332	; 0xfb4c
   156c6:	f2c0 0001 	movt	r0, #1
   156ca:	f64f 332c 	movw	r3, #64300	; 0xfb2c
   156ce:	f2c0 0301 	movt	r3, #1
   156d2:	212b      	movs	r1, #43	; 0x2b
   156d4:	aa04      	add	r2, sp, #16
   156d6:	f001 f935 	bl	16944 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   156da:	defe      	udf	#254	; 0xfe
   156dc:	defe      	udf	#254	; 0xfe
   156de:	f89d 000f 	ldrb.w	r0, [sp, #15]
   156e2:	07c0      	lsls	r0, r0, #31
   156e4:	2800      	cmp	r0, #0
   156e6:	d102      	bne.n	156ee <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x48>
   156e8:	e7ff      	b.n	156ea <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x44>
   156ea:	b006      	add	sp, #24
   156ec:	4770      	bx	lr
   156ee:	e7fc      	b.n	156ea <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x44>

000156f0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>:
   156f0:	b580      	push	{r7, lr}
   156f2:	b088      	sub	sp, #32
   156f4:	9001      	str	r0, [sp, #4]
   156f6:	2000      	movs	r0, #0
   156f8:	f88d 0013 	strb.w	r0, [sp, #19]
   156fc:	f88d 0011 	strb.w	r0, [sp, #17]
   15700:	f88d 0012 	strb.w	r0, [sp, #18]
   15704:	2001      	movs	r0, #1
   15706:	f88d 0012 	strb.w	r0, [sp, #18]
   1570a:	f88d 0013 	strb.w	r0, [sp, #19]
   1570e:	f88d 0011 	strb.w	r0, [sp, #17]
   15712:	9801      	ldr	r0, [sp, #4]
   15714:	1e41      	subs	r1, r0, #1
   15716:	bf18      	it	ne
   15718:	2101      	movne	r1, #1
   1571a:	2801      	cmp	r0, #1
   1571c:	d00d      	beq.n	1573a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x4a>
   1571e:	e7ff      	b.n	15720 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x30>
   15720:	2000      	movs	r0, #0
   15722:	f88d 0013 	strb.w	r0, [sp, #19]
   15726:	9901      	ldr	r1, [sp, #4]
   15728:	9107      	str	r1, [sp, #28]
   1572a:	f88d 0011 	strb.w	r0, [sp, #17]
   1572e:	9103      	str	r1, [sp, #12]
   15730:	9803      	ldr	r0, [sp, #12]
   15732:	f7fb fab7 	bl	10ca4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>
   15736:	e006      	b.n	15746 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x56>
   15738:	defe      	udf	#254	; 0xfe
   1573a:	2000      	movs	r0, #0
   1573c:	f88d 0012 	strb.w	r0, [sp, #18]
   15740:	f88d 000b 	strb.w	r0, [sp, #11]
   15744:	e003      	b.n	1574e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   15746:	2001      	movs	r0, #1
   15748:	f88d 000b 	strb.w	r0, [sp, #11]
   1574c:	e7ff      	b.n	1574e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   1574e:	f89d 0011 	ldrb.w	r0, [sp, #17]
   15752:	07c0      	lsls	r0, r0, #31
   15754:	2800      	cmp	r0, #0
   15756:	d104      	bne.n	15762 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x72>
   15758:	e7ff      	b.n	1575a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   1575a:	9801      	ldr	r0, [sp, #4]
   1575c:	2801      	cmp	r0, #1
   1575e:	d008      	beq.n	15772 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x82>
   15760:	e011      	b.n	15786 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x96>
   15762:	2000      	movs	r0, #0
   15764:	f88d 0011 	strb.w	r0, [sp, #17]
   15768:	e7f7      	b.n	1575a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   1576a:	f89d 000b 	ldrb.w	r0, [sp, #11]
   1576e:	b008      	add	sp, #32
   15770:	bd80      	pop	{r7, pc}
   15772:	f89d 0012 	ldrb.w	r0, [sp, #18]
   15776:	07c0      	lsls	r0, r0, #31
   15778:	2800      	cmp	r0, #0
   1577a:	d0f6      	beq.n	1576a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   1577c:	e7ff      	b.n	1577e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x8e>
   1577e:	2000      	movs	r0, #0
   15780:	f88d 0012 	strb.w	r0, [sp, #18]
   15784:	e7f1      	b.n	1576a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   15786:	f89d 0013 	ldrb.w	r0, [sp, #19]
   1578a:	07c0      	lsls	r0, r0, #31
   1578c:	2800      	cmp	r0, #0
   1578e:	d0ec      	beq.n	1576a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   15790:	e7ff      	b.n	15792 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0xa2>
   15792:	2000      	movs	r0, #0
   15794:	f88d 0013 	strb.w	r0, [sp, #19]
   15798:	e7e7      	b.n	1576a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>

0001579a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>:
   1579a:	b580      	push	{r7, lr}
   1579c:	b088      	sub	sp, #32
   1579e:	9001      	str	r0, [sp, #4]
   157a0:	2000      	movs	r0, #0
   157a2:	f88d 0013 	strb.w	r0, [sp, #19]
   157a6:	f88d 0011 	strb.w	r0, [sp, #17]
   157aa:	f88d 0012 	strb.w	r0, [sp, #18]
   157ae:	2001      	movs	r0, #1
   157b0:	f88d 0012 	strb.w	r0, [sp, #18]
   157b4:	f88d 0013 	strb.w	r0, [sp, #19]
   157b8:	f88d 0011 	strb.w	r0, [sp, #17]
   157bc:	9801      	ldr	r0, [sp, #4]
   157be:	1e41      	subs	r1, r0, #1
   157c0:	bf18      	it	ne
   157c2:	2101      	movne	r1, #1
   157c4:	2801      	cmp	r0, #1
   157c6:	d00d      	beq.n	157e4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x4a>
   157c8:	e7ff      	b.n	157ca <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x30>
   157ca:	2000      	movs	r0, #0
   157cc:	f88d 0013 	strb.w	r0, [sp, #19]
   157d0:	9901      	ldr	r1, [sp, #4]
   157d2:	9107      	str	r1, [sp, #28]
   157d4:	f88d 0011 	strb.w	r0, [sp, #17]
   157d8:	9103      	str	r1, [sp, #12]
   157da:	9803      	ldr	r0, [sp, #12]
   157dc:	f7fb fa58 	bl	10c90 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>
   157e0:	e006      	b.n	157f0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x56>
   157e2:	defe      	udf	#254	; 0xfe
   157e4:	2000      	movs	r0, #0
   157e6:	f88d 0012 	strb.w	r0, [sp, #18]
   157ea:	f88d 000b 	strb.w	r0, [sp, #11]
   157ee:	e003      	b.n	157f8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   157f0:	2001      	movs	r0, #1
   157f2:	f88d 000b 	strb.w	r0, [sp, #11]
   157f6:	e7ff      	b.n	157f8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   157f8:	f89d 0011 	ldrb.w	r0, [sp, #17]
   157fc:	07c0      	lsls	r0, r0, #31
   157fe:	2800      	cmp	r0, #0
   15800:	d104      	bne.n	1580c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x72>
   15802:	e7ff      	b.n	15804 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   15804:	9801      	ldr	r0, [sp, #4]
   15806:	2801      	cmp	r0, #1
   15808:	d008      	beq.n	1581c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x82>
   1580a:	e011      	b.n	15830 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x96>
   1580c:	2000      	movs	r0, #0
   1580e:	f88d 0011 	strb.w	r0, [sp, #17]
   15812:	e7f7      	b.n	15804 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   15814:	f89d 000b 	ldrb.w	r0, [sp, #11]
   15818:	b008      	add	sp, #32
   1581a:	bd80      	pop	{r7, pc}
   1581c:	f89d 0012 	ldrb.w	r0, [sp, #18]
   15820:	07c0      	lsls	r0, r0, #31
   15822:	2800      	cmp	r0, #0
   15824:	d0f6      	beq.n	15814 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   15826:	e7ff      	b.n	15828 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x8e>
   15828:	2000      	movs	r0, #0
   1582a:	f88d 0012 	strb.w	r0, [sp, #18]
   1582e:	e7f1      	b.n	15814 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   15830:	f89d 0013 	ldrb.w	r0, [sp, #19]
   15834:	07c0      	lsls	r0, r0, #31
   15836:	2800      	cmp	r0, #0
   15838:	d0ec      	beq.n	15814 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   1583a:	e7ff      	b.n	1583c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0xa2>
   1583c:	2000      	movs	r0, #0
   1583e:	f88d 0013 	strb.w	r0, [sp, #19]
   15842:	e7e7      	b.n	15814 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>

00015844 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>:
   15844:	b580      	push	{r7, lr}
   15846:	b088      	sub	sp, #32
   15848:	9001      	str	r0, [sp, #4]
   1584a:	2000      	movs	r0, #0
   1584c:	f88d 0013 	strb.w	r0, [sp, #19]
   15850:	f88d 0011 	strb.w	r0, [sp, #17]
   15854:	f88d 0012 	strb.w	r0, [sp, #18]
   15858:	2001      	movs	r0, #1
   1585a:	f88d 0012 	strb.w	r0, [sp, #18]
   1585e:	f88d 0013 	strb.w	r0, [sp, #19]
   15862:	f88d 0011 	strb.w	r0, [sp, #17]
   15866:	9801      	ldr	r0, [sp, #4]
   15868:	1e41      	subs	r1, r0, #1
   1586a:	bf18      	it	ne
   1586c:	2101      	movne	r1, #1
   1586e:	2801      	cmp	r0, #1
   15870:	d00d      	beq.n	1588e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x4a>
   15872:	e7ff      	b.n	15874 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x30>
   15874:	2000      	movs	r0, #0
   15876:	f88d 0013 	strb.w	r0, [sp, #19]
   1587a:	9901      	ldr	r1, [sp, #4]
   1587c:	9107      	str	r1, [sp, #28]
   1587e:	f88d 0011 	strb.w	r0, [sp, #17]
   15882:	9103      	str	r1, [sp, #12]
   15884:	9803      	ldr	r0, [sp, #12]
   15886:	f7fb fa08 	bl	10c9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>
   1588a:	e006      	b.n	1589a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x56>
   1588c:	defe      	udf	#254	; 0xfe
   1588e:	2000      	movs	r0, #0
   15890:	f88d 0012 	strb.w	r0, [sp, #18]
   15894:	f88d 000b 	strb.w	r0, [sp, #11]
   15898:	e003      	b.n	158a2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   1589a:	2001      	movs	r0, #1
   1589c:	f88d 000b 	strb.w	r0, [sp, #11]
   158a0:	e7ff      	b.n	158a2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   158a2:	f89d 0011 	ldrb.w	r0, [sp, #17]
   158a6:	07c0      	lsls	r0, r0, #31
   158a8:	2800      	cmp	r0, #0
   158aa:	d104      	bne.n	158b6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x72>
   158ac:	e7ff      	b.n	158ae <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   158ae:	9801      	ldr	r0, [sp, #4]
   158b0:	2801      	cmp	r0, #1
   158b2:	d008      	beq.n	158c6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x82>
   158b4:	e011      	b.n	158da <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x96>
   158b6:	2000      	movs	r0, #0
   158b8:	f88d 0011 	strb.w	r0, [sp, #17]
   158bc:	e7f7      	b.n	158ae <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   158be:	f89d 000b 	ldrb.w	r0, [sp, #11]
   158c2:	b008      	add	sp, #32
   158c4:	bd80      	pop	{r7, pc}
   158c6:	f89d 0012 	ldrb.w	r0, [sp, #18]
   158ca:	07c0      	lsls	r0, r0, #31
   158cc:	2800      	cmp	r0, #0
   158ce:	d0f6      	beq.n	158be <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   158d0:	e7ff      	b.n	158d2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x8e>
   158d2:	2000      	movs	r0, #0
   158d4:	f88d 0012 	strb.w	r0, [sp, #18]
   158d8:	e7f1      	b.n	158be <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   158da:	f89d 0013 	ldrb.w	r0, [sp, #19]
   158de:	07c0      	lsls	r0, r0, #31
   158e0:	2800      	cmp	r0, #0
   158e2:	d0ec      	beq.n	158be <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   158e4:	e7ff      	b.n	158e6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0xa2>
   158e6:	2000      	movs	r0, #0
   158e8:	f88d 0013 	strb.w	r0, [sp, #19]
   158ec:	e7e7      	b.n	158be <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>

000158ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>:
   158ee:	b082      	sub	sp, #8
   158f0:	2001      	movs	r0, #1
   158f2:	f88d 0003 	strb.w	r0, [sp, #3]
   158f6:	f89d 0003 	ldrb.w	r0, [sp, #3]
   158fa:	b002      	add	sp, #8
   158fc:	4770      	bx	lr

000158fe <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>:
    #[inline]
    fn to_u128() -> u128 {
        u128::from(B::to_u8()) | U::to_u128() << 1
    }
    #[inline]
    fn to_usize() -> usize {
   158fe:	b580      	push	{r7, lr}
   15900:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15902:	f000 fdee 	bl	164e2 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   15906:	9003      	str	r0, [sp, #12]
   15908:	e7ff      	b.n	1590a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0xc>
   1590a:	9803      	ldr	r0, [sp, #12]
   1590c:	f000 fe4f 	bl	165ae <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   15910:	9002      	str	r0, [sp, #8]
   15912:	e7ff      	b.n	15914 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x16>
   15914:	f000 f823 	bl	1595e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E>
   15918:	9001      	str	r0, [sp, #4]
   1591a:	e7ff      	b.n	1591c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x1e>
   1591c:	9801      	ldr	r0, [sp, #4]
   1591e:	0041      	lsls	r1, r0, #1
   15920:	9100      	str	r1, [sp, #0]
   15922:	e7ff      	b.n	15924 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x26>
   15924:	9802      	ldr	r0, [sp, #8]
   15926:	9900      	ldr	r1, [sp, #0]
   15928:	4308      	orrs	r0, r1
    }
   1592a:	b004      	add	sp, #16
   1592c:	bd80      	pop	{r7, pc}

0001592e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE>:
    fn to_usize() -> usize {
   1592e:	b580      	push	{r7, lr}
   15930:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15932:	f000 fdd6 	bl	164e2 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   15936:	9003      	str	r0, [sp, #12]
   15938:	e7ff      	b.n	1593a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0xc>
   1593a:	9803      	ldr	r0, [sp, #12]
   1593c:	f000 fe37 	bl	165ae <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   15940:	9002      	str	r0, [sp, #8]
   15942:	e7ff      	b.n	15944 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x16>
   15944:	f7ff ffdb 	bl	158fe <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>
   15948:	9001      	str	r0, [sp, #4]
   1594a:	e7ff      	b.n	1594c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x1e>
   1594c:	9801      	ldr	r0, [sp, #4]
   1594e:	0041      	lsls	r1, r0, #1
   15950:	9100      	str	r1, [sp, #0]
   15952:	e7ff      	b.n	15954 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x26>
   15954:	9802      	ldr	r0, [sp, #8]
   15956:	9900      	ldr	r1, [sp, #0]
   15958:	4308      	orrs	r0, r1
    }
   1595a:	b004      	add	sp, #16
   1595c:	bd80      	pop	{r7, pc}

0001595e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E>:
    fn to_usize() -> usize {
   1595e:	b580      	push	{r7, lr}
   15960:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15962:	f000 fdc0 	bl	164e6 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>
   15966:	9003      	str	r0, [sp, #12]
   15968:	e7ff      	b.n	1596a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0xc>
   1596a:	9803      	ldr	r0, [sp, #12]
   1596c:	f000 fe1f 	bl	165ae <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   15970:	9002      	str	r0, [sp, #8]
   15972:	e7ff      	b.n	15974 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x16>
   15974:	f000 f83b 	bl	159ee <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E>
   15978:	9001      	str	r0, [sp, #4]
   1597a:	e7ff      	b.n	1597c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x1e>
   1597c:	9801      	ldr	r0, [sp, #4]
   1597e:	0041      	lsls	r1, r0, #1
   15980:	9100      	str	r1, [sp, #0]
   15982:	e7ff      	b.n	15984 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x26>
   15984:	9802      	ldr	r0, [sp, #8]
   15986:	9900      	ldr	r1, [sp, #0]
   15988:	4308      	orrs	r0, r1
    }
   1598a:	b004      	add	sp, #16
   1598c:	bd80      	pop	{r7, pc}

0001598e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E>:
    fn to_usize() -> usize {
   1598e:	b580      	push	{r7, lr}
   15990:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15992:	f000 fda6 	bl	164e2 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   15996:	9003      	str	r0, [sp, #12]
   15998:	e7ff      	b.n	1599a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0xc>
   1599a:	9803      	ldr	r0, [sp, #12]
   1599c:	f000 fe07 	bl	165ae <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   159a0:	9002      	str	r0, [sp, #8]
   159a2:	e7ff      	b.n	159a4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x16>
   159a4:	f000 f80b 	bl	159be <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE>
   159a8:	9001      	str	r0, [sp, #4]
   159aa:	e7ff      	b.n	159ac <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x1e>
   159ac:	9801      	ldr	r0, [sp, #4]
   159ae:	0041      	lsls	r1, r0, #1
   159b0:	9100      	str	r1, [sp, #0]
   159b2:	e7ff      	b.n	159b4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x26>
   159b4:	9802      	ldr	r0, [sp, #8]
   159b6:	9900      	ldr	r1, [sp, #0]
   159b8:	4308      	orrs	r0, r1
    }
   159ba:	b004      	add	sp, #16
   159bc:	bd80      	pop	{r7, pc}

000159be <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE>:
    fn to_usize() -> usize {
   159be:	b580      	push	{r7, lr}
   159c0:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   159c2:	f000 fd90 	bl	164e6 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>
   159c6:	9003      	str	r0, [sp, #12]
   159c8:	e7ff      	b.n	159ca <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0xc>
   159ca:	9803      	ldr	r0, [sp, #12]
   159cc:	f000 fdef 	bl	165ae <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   159d0:	9002      	str	r0, [sp, #8]
   159d2:	e7ff      	b.n	159d4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x16>
   159d4:	f000 fd25 	bl	16422 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   159d8:	9001      	str	r0, [sp, #4]
   159da:	e7ff      	b.n	159dc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x1e>
   159dc:	9801      	ldr	r0, [sp, #4]
   159de:	0041      	lsls	r1, r0, #1
   159e0:	9100      	str	r1, [sp, #0]
   159e2:	e7ff      	b.n	159e4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x26>
   159e4:	9802      	ldr	r0, [sp, #8]
   159e6:	9900      	ldr	r1, [sp, #0]
   159e8:	4308      	orrs	r0, r1
    }
   159ea:	b004      	add	sp, #16
   159ec:	bd80      	pop	{r7, pc}

000159ee <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E>:
    fn to_usize() -> usize {
   159ee:	b580      	push	{r7, lr}
   159f0:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   159f2:	f000 fd76 	bl	164e2 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   159f6:	9003      	str	r0, [sp, #12]
   159f8:	e7ff      	b.n	159fa <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0xc>
   159fa:	9803      	ldr	r0, [sp, #12]
   159fc:	f000 fdd7 	bl	165ae <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   15a00:	9002      	str	r0, [sp, #8]
   15a02:	e7ff      	b.n	15a04 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x16>
   15a04:	f7ff ffc3 	bl	1598e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E>
   15a08:	9001      	str	r0, [sp, #4]
   15a0a:	e7ff      	b.n	15a0c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x1e>
   15a0c:	9801      	ldr	r0, [sp, #4]
   15a0e:	0041      	lsls	r1, r0, #1
   15a10:	9100      	str	r1, [sp, #0]
   15a12:	e7ff      	b.n	15a14 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x26>
   15a14:	9802      	ldr	r0, [sp, #8]
   15a16:	9900      	ldr	r1, [sp, #0]
   15a18:	4308      	orrs	r0, r1
    }
   15a1a:	b004      	add	sp, #16
   15a1c:	bd80      	pop	{r7, pc}

00015a1e <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>:
   15a1e:	b081      	sub	sp, #4
   15a20:	9000      	str	r0, [sp, #0]
   15a22:	8800      	ldrh	r0, [r0, #0]
   15a24:	b001      	add	sp, #4
   15a26:	4770      	bx	lr

00015a28 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE>:
   15a28:	b580      	push	{r7, lr}
   15a2a:	b08c      	sub	sp, #48	; 0x30
   15a2c:	9009      	str	r0, [sp, #36]	; 0x24
   15a2e:	910a      	str	r1, [sp, #40]	; 0x28
   15a30:	920b      	str	r2, [sp, #44]	; 0x2c
   15a32:	9006      	str	r0, [sp, #24]
   15a34:	4608      	mov	r0, r1
   15a36:	9105      	str	r1, [sp, #20]
   15a38:	4611      	mov	r1, r2
   15a3a:	9204      	str	r2, [sp, #16]
   15a3c:	f000 f89f 	bl	15b7e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15a40:	9003      	str	r0, [sp, #12]
   15a42:	e7ff      	b.n	15a44 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE+0x1c>
   15a44:	9806      	ldr	r0, [sp, #24]
   15a46:	9007      	str	r0, [sp, #28]
   15a48:	9903      	ldr	r1, [sp, #12]
   15a4a:	9108      	str	r1, [sp, #32]
   15a4c:	9807      	ldr	r0, [sp, #28]
   15a4e:	9908      	ldr	r1, [sp, #32]
   15a50:	9a05      	ldr	r2, [sp, #20]
   15a52:	9b04      	ldr	r3, [sp, #16]
   15a54:	f000 f82d 	bl	15ab2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE>
   15a58:	9002      	str	r0, [sp, #8]
   15a5a:	9101      	str	r1, [sp, #4]
   15a5c:	e7ff      	b.n	15a5e <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE+0x36>
   15a5e:	9802      	ldr	r0, [sp, #8]
   15a60:	9901      	ldr	r1, [sp, #4]
   15a62:	b00c      	add	sp, #48	; 0x30
   15a64:	bd80      	pop	{r7, pc}

00015a66 <_ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E>:
   15a66:	b083      	sub	sp, #12
   15a68:	9001      	str	r0, [sp, #4]
   15a6a:	9102      	str	r1, [sp, #8]
   15a6c:	b003      	add	sp, #12
   15a6e:	4770      	bx	lr

00015a70 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E>:
   15a70:	b580      	push	{r7, lr}
   15a72:	b08a      	sub	sp, #40	; 0x28
   15a74:	9006      	str	r0, [sp, #24]
   15a76:	9107      	str	r1, [sp, #28]
   15a78:	9208      	str	r2, [sp, #32]
   15a7a:	9309      	str	r3, [sp, #36]	; 0x24
   15a7c:	9005      	str	r0, [sp, #20]
   15a7e:	4610      	mov	r0, r2
   15a80:	9104      	str	r1, [sp, #16]
   15a82:	4619      	mov	r1, r3
   15a84:	f000 f864 	bl	15b50 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>
   15a88:	9003      	str	r0, [sp, #12]
   15a8a:	e7ff      	b.n	15a8c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x1c>
   15a8c:	9803      	ldr	r0, [sp, #12]
   15a8e:	9905      	ldr	r1, [sp, #20]
   15a90:	f000 f96e 	bl	15d70 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   15a94:	9002      	str	r0, [sp, #8]
   15a96:	e7ff      	b.n	15a98 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x28>
   15a98:	9804      	ldr	r0, [sp, #16]
   15a9a:	9905      	ldr	r1, [sp, #20]
   15a9c:	1a41      	subs	r1, r0, r1
   15a9e:	9802      	ldr	r0, [sp, #8]
   15aa0:	f000 f849 	bl	15b36 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   15aa4:	9001      	str	r0, [sp, #4]
   15aa6:	9100      	str	r1, [sp, #0]
   15aa8:	e7ff      	b.n	15aaa <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x3a>
   15aaa:	9801      	ldr	r0, [sp, #4]
   15aac:	9900      	ldr	r1, [sp, #0]
   15aae:	b00a      	add	sp, #40	; 0x28
   15ab0:	bd80      	pop	{r7, pc}

00015ab2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE>:
   15ab2:	b580      	push	{r7, lr}
   15ab4:	b08c      	sub	sp, #48	; 0x30
   15ab6:	9008      	str	r0, [sp, #32]
   15ab8:	9109      	str	r1, [sp, #36]	; 0x24
   15aba:	920a      	str	r2, [sp, #40]	; 0x28
   15abc:	930b      	str	r3, [sp, #44]	; 0x2c
   15abe:	4288      	cmp	r0, r1
   15ac0:	9307      	str	r3, [sp, #28]
   15ac2:	9206      	str	r2, [sp, #24]
   15ac4:	9105      	str	r1, [sp, #20]
   15ac6:	9004      	str	r0, [sp, #16]
   15ac8:	d806      	bhi.n	15ad8 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x26>
   15aca:	e7ff      	b.n	15acc <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x1a>
   15acc:	9806      	ldr	r0, [sp, #24]
   15ace:	9907      	ldr	r1, [sp, #28]
   15ad0:	f000 f855 	bl	15b7e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15ad4:	9003      	str	r0, [sp, #12]
   15ad6:	e004      	b.n	15ae2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x30>
   15ad8:	9804      	ldr	r0, [sp, #16]
   15ada:	9905      	ldr	r1, [sp, #20]
   15adc:	f001 fed5 	bl	1788a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   15ae0:	defe      	udf	#254	; 0xfe
   15ae2:	9805      	ldr	r0, [sp, #20]
   15ae4:	9903      	ldr	r1, [sp, #12]
   15ae6:	4288      	cmp	r0, r1
   15ae8:	d809      	bhi.n	15afe <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x4c>
   15aea:	e7ff      	b.n	15aec <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x3a>
   15aec:	9804      	ldr	r0, [sp, #16]
   15aee:	9905      	ldr	r1, [sp, #20]
   15af0:	9a06      	ldr	r2, [sp, #24]
   15af2:	9b07      	ldr	r3, [sp, #28]
   15af4:	f7ff ffbc 	bl	15a70 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E>
   15af8:	9002      	str	r0, [sp, #8]
   15afa:	9101      	str	r1, [sp, #4]
   15afc:	e00a      	b.n	15b14 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x62>
   15afe:	9806      	ldr	r0, [sp, #24]
   15b00:	9907      	ldr	r1, [sp, #28]
   15b02:	f000 f83c 	bl	15b7e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15b06:	9000      	str	r0, [sp, #0]
   15b08:	e7ff      	b.n	15b0a <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x58>
   15b0a:	9805      	ldr	r0, [sp, #20]
   15b0c:	9900      	ldr	r1, [sp, #0]
   15b0e:	f001 fe9a 	bl	17846 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   15b12:	defe      	udf	#254	; 0xfe
   15b14:	9802      	ldr	r0, [sp, #8]
   15b16:	9901      	ldr	r1, [sp, #4]
   15b18:	b00c      	add	sp, #48	; 0x30
   15b1a:	bd80      	pop	{r7, pc}

00015b1c <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>:
   15b1c:	b580      	push	{r7, lr}
   15b1e:	b084      	sub	sp, #16
   15b20:	9002      	str	r0, [sp, #8]
   15b22:	9103      	str	r1, [sp, #12]
   15b24:	f000 fd4a 	bl	165bc <_ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E>
   15b28:	9001      	str	r0, [sp, #4]
   15b2a:	9100      	str	r1, [sp, #0]
   15b2c:	e7ff      	b.n	15b2e <_ZN4core5slice14from_raw_parts17h1425df913744b73aE+0x12>
   15b2e:	9801      	ldr	r0, [sp, #4]
   15b30:	9900      	ldr	r1, [sp, #0]
   15b32:	b004      	add	sp, #16
   15b34:	bd80      	pop	{r7, pc}

00015b36 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>:
   15b36:	b580      	push	{r7, lr}
   15b38:	b084      	sub	sp, #16
   15b3a:	9002      	str	r0, [sp, #8]
   15b3c:	9103      	str	r1, [sp, #12]
   15b3e:	f000 fd4a 	bl	165d6 <_ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE>
   15b42:	9001      	str	r0, [sp, #4]
   15b44:	9100      	str	r1, [sp, #0]
   15b46:	e7ff      	b.n	15b48 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E+0x12>
   15b48:	9801      	ldr	r0, [sp, #4]
   15b4a:	9900      	ldr	r1, [sp, #0]
   15b4c:	b004      	add	sp, #16
   15b4e:	bd80      	pop	{r7, pc}

00015b50 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>:
   15b50:	b082      	sub	sp, #8
   15b52:	9000      	str	r0, [sp, #0]
   15b54:	9101      	str	r1, [sp, #4]
   15b56:	b002      	add	sp, #8
   15b58:	4770      	bx	lr

00015b5a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>:
   15b5a:	b580      	push	{r7, lr}
   15b5c:	b086      	sub	sp, #24
   15b5e:	9003      	str	r0, [sp, #12]
   15b60:	9104      	str	r1, [sp, #16]
   15b62:	9205      	str	r2, [sp, #20]
   15b64:	9002      	str	r0, [sp, #8]
   15b66:	4610      	mov	r0, r2
   15b68:	9a02      	ldr	r2, [sp, #8]
   15b6a:	9101      	str	r1, [sp, #4]
   15b6c:	4611      	mov	r1, r2
   15b6e:	9a01      	ldr	r2, [sp, #4]
   15b70:	f000 f886 	bl	15c80 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E>
   15b74:	9000      	str	r0, [sp, #0]
   15b76:	e7ff      	b.n	15b78 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE+0x1e>
   15b78:	9800      	ldr	r0, [sp, #0]
   15b7a:	b006      	add	sp, #24
   15b7c:	bd80      	pop	{r7, pc}

00015b7e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>:
   15b7e:	b084      	sub	sp, #16
   15b80:	9002      	str	r0, [sp, #8]
   15b82:	9103      	str	r1, [sp, #12]
   15b84:	9000      	str	r0, [sp, #0]
   15b86:	9101      	str	r1, [sp, #4]
   15b88:	9801      	ldr	r0, [sp, #4]
   15b8a:	b004      	add	sp, #16
   15b8c:	4770      	bx	lr

00015b8e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE>:
   15b8e:	b580      	push	{r7, lr}
   15b90:	b092      	sub	sp, #72	; 0x48
   15b92:	900e      	str	r0, [sp, #56]	; 0x38
   15b94:	910f      	str	r1, [sp, #60]	; 0x3c
   15b96:	9009      	str	r0, [sp, #36]	; 0x24
   15b98:	9108      	str	r1, [sp, #32]
   15b9a:	f000 f83e 	bl	15c1a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E>
   15b9e:	4601      	mov	r1, r0
   15ba0:	9010      	str	r0, [sp, #64]	; 0x40
   15ba2:	9107      	str	r1, [sp, #28]
   15ba4:	e7ff      	b.n	15ba6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x18>
   15ba6:	9807      	ldr	r0, [sp, #28]
   15ba8:	f000 fcc0 	bl	1652c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>
   15bac:	e7ff      	b.n	15bae <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x20>
   15bae:	e7ff      	b.n	15bb0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x22>
   15bb0:	2002      	movs	r0, #2
   15bb2:	9011      	str	r0, [sp, #68]	; 0x44
   15bb4:	9811      	ldr	r0, [sp, #68]	; 0x44
   15bb6:	9006      	str	r0, [sp, #24]
   15bb8:	e7ff      	b.n	15bba <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x2c>
   15bba:	9806      	ldr	r0, [sp, #24]
   15bbc:	2800      	cmp	r0, #0
   15bbe:	d006      	beq.n	15bce <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x40>
   15bc0:	e7ff      	b.n	15bc2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x34>
   15bc2:	9809      	ldr	r0, [sp, #36]	; 0x24
   15bc4:	9908      	ldr	r1, [sp, #32]
   15bc6:	f7ff ffda 	bl	15b7e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15bca:	9005      	str	r0, [sp, #20]
   15bcc:	e011      	b.n	15bf2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x64>
   15bce:	9807      	ldr	r0, [sp, #28]
   15bd0:	9909      	ldr	r1, [sp, #36]	; 0x24
   15bd2:	9004      	str	r0, [sp, #16]
   15bd4:	4608      	mov	r0, r1
   15bd6:	9908      	ldr	r1, [sp, #32]
   15bd8:	f7ff ffd1 	bl	15b7e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15bdc:	9003      	str	r0, [sp, #12]
   15bde:	e7ff      	b.n	15be0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x52>
   15be0:	9804      	ldr	r0, [sp, #16]
   15be2:	9903      	ldr	r1, [sp, #12]
   15be4:	f7fa fa26 	bl	10034 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE>
   15be8:	9002      	str	r0, [sp, #8]
   15bea:	e7ff      	b.n	15bec <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x5e>
   15bec:	9802      	ldr	r0, [sp, #8]
   15bee:	900c      	str	r0, [sp, #48]	; 0x30
   15bf0:	e006      	b.n	15c00 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x72>
   15bf2:	9807      	ldr	r0, [sp, #28]
   15bf4:	9905      	ldr	r1, [sp, #20]
   15bf6:	f000 fc78 	bl	164ea <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>
   15bfa:	900c      	str	r0, [sp, #48]	; 0x30
   15bfc:	e7ff      	b.n	15bfe <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x70>
   15bfe:	e7ff      	b.n	15c00 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x72>
   15c00:	9807      	ldr	r0, [sp, #28]
   15c02:	f000 f8e2 	bl	15dca <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>
   15c06:	9001      	str	r0, [sp, #4]
   15c08:	e7ff      	b.n	15c0a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x7c>
   15c0a:	980c      	ldr	r0, [sp, #48]	; 0x30
   15c0c:	9901      	ldr	r1, [sp, #4]
   15c0e:	910a      	str	r1, [sp, #40]	; 0x28
   15c10:	900b      	str	r0, [sp, #44]	; 0x2c
   15c12:	980a      	ldr	r0, [sp, #40]	; 0x28
   15c14:	990b      	ldr	r1, [sp, #44]	; 0x2c
   15c16:	b012      	add	sp, #72	; 0x48
   15c18:	bd80      	pop	{r7, pc}

00015c1a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E>:
   15c1a:	b082      	sub	sp, #8
   15c1c:	9000      	str	r0, [sp, #0]
   15c1e:	9101      	str	r1, [sp, #4]
   15c20:	b002      	add	sp, #8
   15c22:	4770      	bx	lr

00015c24 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>:
   15c24:	b580      	push	{r7, lr}
   15c26:	b086      	sub	sp, #24
   15c28:	9003      	str	r0, [sp, #12]
   15c2a:	9104      	str	r1, [sp, #16]
   15c2c:	f7ff ff1b 	bl	15a66 <_ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E>
   15c30:	9002      	str	r0, [sp, #8]
   15c32:	9101      	str	r1, [sp, #4]
   15c34:	e7ff      	b.n	15c36 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E+0x12>
   15c36:	9802      	ldr	r0, [sp, #8]
   15c38:	9901      	ldr	r1, [sp, #4]
   15c3a:	b006      	add	sp, #24
   15c3c:	bd80      	pop	{r7, pc}

00015c3e <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E>:
   15c3e:	b580      	push	{r7, lr}
   15c40:	b088      	sub	sp, #32
   15c42:	9005      	str	r0, [sp, #20]
   15c44:	9106      	str	r1, [sp, #24]
   15c46:	9207      	str	r2, [sp, #28]
   15c48:	9004      	str	r0, [sp, #16]
   15c4a:	4610      	mov	r0, r2
   15c4c:	9a04      	ldr	r2, [sp, #16]
   15c4e:	9103      	str	r1, [sp, #12]
   15c50:	4611      	mov	r1, r2
   15c52:	9a03      	ldr	r2, [sp, #12]
   15c54:	f7ff fee8 	bl	15a28 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE>
   15c58:	9002      	str	r0, [sp, #8]
   15c5a:	9101      	str	r1, [sp, #4]
   15c5c:	e7ff      	b.n	15c5e <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E+0x20>
   15c5e:	9802      	ldr	r0, [sp, #8]
   15c60:	9901      	ldr	r1, [sp, #4]
   15c62:	b008      	add	sp, #32
   15c64:	bd80      	pop	{r7, pc}

00015c66 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>:
   15c66:	b580      	push	{r7, lr}
   15c68:	b084      	sub	sp, #16
   15c6a:	9002      	str	r0, [sp, #8]
   15c6c:	9103      	str	r1, [sp, #12]
   15c6e:	f7ff ff8e 	bl	15b8e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE>
   15c72:	9001      	str	r0, [sp, #4]
   15c74:	9100      	str	r1, [sp, #0]
   15c76:	e7ff      	b.n	15c78 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE+0x12>
   15c78:	9801      	ldr	r0, [sp, #4]
   15c7a:	9900      	ldr	r1, [sp, #0]
   15c7c:	b004      	add	sp, #16
   15c7e:	bd80      	pop	{r7, pc}

00015c80 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E>:
   15c80:	b580      	push	{r7, lr}
   15c82:	b086      	sub	sp, #24
   15c84:	9003      	str	r0, [sp, #12]
   15c86:	9104      	str	r1, [sp, #16]
   15c88:	9205      	str	r2, [sp, #20]
   15c8a:	9002      	str	r0, [sp, #8]
   15c8c:	4608      	mov	r0, r1
   15c8e:	4611      	mov	r1, r2
   15c90:	f7ff ff5e 	bl	15b50 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>
   15c94:	9001      	str	r0, [sp, #4]
   15c96:	e7ff      	b.n	15c98 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E+0x18>
   15c98:	9801      	ldr	r0, [sp, #4]
   15c9a:	9902      	ldr	r1, [sp, #8]
   15c9c:	f000 f868 	bl	15d70 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   15ca0:	9000      	str	r0, [sp, #0]
   15ca2:	e7ff      	b.n	15ca4 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E+0x24>
   15ca4:	9800      	ldr	r0, [sp, #0]
   15ca6:	b006      	add	sp, #24
   15ca8:	bd80      	pop	{r7, pc}

00015caa <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>:
   15caa:	b580      	push	{r7, lr}
   15cac:	b08e      	sub	sp, #56	; 0x38
   15cae:	9007      	str	r0, [sp, #28]
   15cb0:	6801      	ldr	r1, [r0, #0]
   15cb2:	9005      	str	r0, [sp, #20]
   15cb4:	4608      	mov	r0, r1
   15cb6:	f000 f88e 	bl	15dd6 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   15cba:	9004      	str	r0, [sp, #16]
   15cbc:	e7ff      	b.n	15cbe <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x14>
   15cbe:	9804      	ldr	r0, [sp, #16]
   15cc0:	f000 f879 	bl	15db6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE>
   15cc4:	e7ff      	b.n	15cc6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x1c>
   15cc6:	e7ff      	b.n	15cc8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x1e>
   15cc8:	2002      	movs	r0, #2
   15cca:	9008      	str	r0, [sp, #32]
   15ccc:	9808      	ldr	r0, [sp, #32]
   15cce:	9003      	str	r0, [sp, #12]
   15cd0:	e7ff      	b.n	15cd2 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x28>
   15cd2:	9803      	ldr	r0, [sp, #12]
   15cd4:	2800      	cmp	r0, #0
   15cd6:	d007      	beq.n	15ce8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3e>
   15cd8:	e7ff      	b.n	15cda <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x30>
   15cda:	9805      	ldr	r0, [sp, #20]
   15cdc:	6840      	ldr	r0, [r0, #4]
   15cde:	f000 fc25 	bl	1652c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>
   15ce2:	e7ff      	b.n	15ce4 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3a>
   15ce4:	e7ff      	b.n	15ce6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3c>
   15ce6:	e7ff      	b.n	15ce8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3e>
   15ce8:	9805      	ldr	r0, [sp, #20]
   15cea:	6800      	ldr	r0, [r0, #0]
   15cec:	f000 f873 	bl	15dd6 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   15cf0:	9002      	str	r0, [sp, #8]
   15cf2:	e7ff      	b.n	15cf4 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x4a>
   15cf4:	9805      	ldr	r0, [sp, #20]
   15cf6:	6841      	ldr	r1, [r0, #4]
   15cf8:	9a02      	ldr	r2, [sp, #8]
   15cfa:	428a      	cmp	r2, r1
   15cfc:	d02f      	beq.n	15d5e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xb4>
   15cfe:	e7ff      	b.n	15d00 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x56>
   15d00:	9805      	ldr	r0, [sp, #20]
   15d02:	900a      	str	r0, [sp, #40]	; 0x28
   15d04:	2101      	movs	r1, #1
   15d06:	910b      	str	r1, [sp, #44]	; 0x2c
   15d08:	2102      	movs	r1, #2
   15d0a:	910d      	str	r1, [sp, #52]	; 0x34
   15d0c:	990d      	ldr	r1, [sp, #52]	; 0x34
   15d0e:	2900      	cmp	r1, #0
   15d10:	d015      	beq.n	15d3e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x94>
   15d12:	e7ff      	b.n	15d14 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x6a>
   15d14:	9805      	ldr	r0, [sp, #20]
   15d16:	6800      	ldr	r0, [r0, #0]
   15d18:	f000 f85d 	bl	15dd6 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   15d1c:	900c      	str	r0, [sp, #48]	; 0x30
   15d1e:	9905      	ldr	r1, [sp, #20]
   15d20:	680a      	ldr	r2, [r1, #0]
   15d22:	9001      	str	r0, [sp, #4]
   15d24:	4610      	mov	r0, r2
   15d26:	f000 f856 	bl	15dd6 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   15d2a:	2101      	movs	r1, #1
   15d2c:	f000 f837 	bl	15d9e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>
   15d30:	f000 f84b 	bl	15dca <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>
   15d34:	9905      	ldr	r1, [sp, #20]
   15d36:	6008      	str	r0, [r1, #0]
   15d38:	9801      	ldr	r0, [sp, #4]
   15d3a:	9009      	str	r0, [sp, #36]	; 0x24
   15d3c:	e00c      	b.n	15d58 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xae>
   15d3e:	9805      	ldr	r0, [sp, #20]
   15d40:	6840      	ldr	r0, [r0, #4]
   15d42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15d46:	f7fa f980 	bl	1004a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>
   15d4a:	9905      	ldr	r1, [sp, #20]
   15d4c:	6048      	str	r0, [r1, #4]
   15d4e:	6808      	ldr	r0, [r1, #0]
   15d50:	f000 f841 	bl	15dd6 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   15d54:	9009      	str	r0, [sp, #36]	; 0x24
   15d56:	e7ff      	b.n	15d58 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xae>
   15d58:	9809      	ldr	r0, [sp, #36]	; 0x24
   15d5a:	9000      	str	r0, [sp, #0]
   15d5c:	e002      	b.n	15d64 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xba>
   15d5e:	2000      	movs	r0, #0
   15d60:	9006      	str	r0, [sp, #24]
   15d62:	e002      	b.n	15d6a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xc0>
   15d64:	9800      	ldr	r0, [sp, #0]
   15d66:	9006      	str	r0, [sp, #24]
   15d68:	e7ff      	b.n	15d6a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xc0>
   15d6a:	9806      	ldr	r0, [sp, #24]
   15d6c:	b00e      	add	sp, #56	; 0x38
   15d6e:	bd80      	pop	{r7, pc}

00015d70 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>:
   15d70:	b580      	push	{r7, lr}
   15d72:	b084      	sub	sp, #16
   15d74:	9002      	str	r0, [sp, #8]
   15d76:	9103      	str	r1, [sp, #12]
   15d78:	f000 f811 	bl	15d9e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>
   15d7c:	9001      	str	r0, [sp, #4]
   15d7e:	e7ff      	b.n	15d80 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E+0x10>
   15d80:	9801      	ldr	r0, [sp, #4]
   15d82:	b004      	add	sp, #16
   15d84:	bd80      	pop	{r7, pc}

00015d86 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>:
   15d86:	b580      	push	{r7, lr}
   15d88:	b084      	sub	sp, #16
   15d8a:	460a      	mov	r2, r1
   15d8c:	9002      	str	r0, [sp, #8]
   15d8e:	f8ad 100e 	strh.w	r1, [sp, #14]
   15d92:	9201      	str	r2, [sp, #4]
   15d94:	f000 fc4d 	bl	16632 <_ZN4core3ptr5write17h147d4643d861e927E>
   15d98:	e7ff      	b.n	15d9a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E+0x14>
   15d9a:	b004      	add	sp, #16
   15d9c:	bd80      	pop	{r7, pc}

00015d9e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>:
   15d9e:	b084      	sub	sp, #16
   15da0:	9001      	str	r0, [sp, #4]
   15da2:	9102      	str	r1, [sp, #8]
   15da4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   15da8:	9003      	str	r0, [sp, #12]
   15daa:	9803      	ldr	r0, [sp, #12]
   15dac:	9000      	str	r0, [sp, #0]
   15dae:	e7ff      	b.n	15db0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE+0x12>
   15db0:	9800      	ldr	r0, [sp, #0]
   15db2:	b004      	add	sp, #16
   15db4:	4770      	bx	lr

00015db6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE>:
   15db6:	b082      	sub	sp, #8
   15db8:	9001      	str	r0, [sp, #4]
   15dba:	9000      	str	r0, [sp, #0]
   15dbc:	e7ff      	b.n	15dbe <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE+0x8>
   15dbe:	9800      	ldr	r0, [sp, #0]
   15dc0:	fab0 f180 	clz	r1, r0
   15dc4:	0948      	lsrs	r0, r1, #5
   15dc6:	b002      	add	sp, #8
   15dc8:	4770      	bx	lr

00015dca <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>:
   15dca:	b082      	sub	sp, #8
   15dcc:	9001      	str	r0, [sp, #4]
   15dce:	9000      	str	r0, [sp, #0]
   15dd0:	9800      	ldr	r0, [sp, #0]
   15dd2:	b002      	add	sp, #8
   15dd4:	4770      	bx	lr

00015dd6 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>:
   15dd6:	b081      	sub	sp, #4
   15dd8:	9000      	str	r0, [sp, #0]
   15dda:	b001      	add	sp, #4
   15ddc:	4770      	bx	lr

00015dde <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>:
   15dde:	b084      	sub	sp, #16
   15de0:	460a      	mov	r2, r1
   15de2:	4603      	mov	r3, r0
   15de4:	9103      	str	r1, [sp, #12]
   15de6:	9002      	str	r0, [sp, #8]
   15de8:	b004      	add	sp, #16
   15dea:	4770      	bx	lr

00015dec <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17h751b32771630458fE>:
   15dec:	b082      	sub	sp, #8
   15dee:	9000      	str	r0, [sp, #0]
   15df0:	9101      	str	r1, [sp, #4]
   15df2:	7800      	ldrb	r0, [r0, #0]
   15df4:	7809      	ldrb	r1, [r1, #0]
   15df6:	2200      	movs	r2, #0
   15df8:	4288      	cmp	r0, r1
   15dfa:	bf38      	it	cc
   15dfc:	2201      	movcc	r2, #1
   15dfe:	4610      	mov	r0, r2
   15e00:	b002      	add	sp, #8
   15e02:	4770      	bx	lr

00015e04 <_ZN4core3ptr19swap_nonoverlapping17hd7afcc643b1b5b34E>:
   15e04:	b580      	push	{r7, lr}
   15e06:	b08c      	sub	sp, #48	; 0x30
   15e08:	9005      	str	r0, [sp, #20]
   15e0a:	9106      	str	r1, [sp, #24]
   15e0c:	9207      	str	r2, [sp, #28]
   15e0e:	9008      	str	r0, [sp, #32]
   15e10:	9109      	str	r1, [sp, #36]	; 0x24
   15e12:	2301      	movs	r3, #1
   15e14:	930b      	str	r3, [sp, #44]	; 0x2c
   15e16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15e18:	9204      	str	r2, [sp, #16]
   15e1a:	9103      	str	r1, [sp, #12]
   15e1c:	9002      	str	r0, [sp, #8]
   15e1e:	9301      	str	r3, [sp, #4]
   15e20:	e7ff      	b.n	15e22 <_ZN4core3ptr19swap_nonoverlapping17hd7afcc643b1b5b34E+0x1e>
   15e22:	9801      	ldr	r0, [sp, #4]
   15e24:	9904      	ldr	r1, [sp, #16]
   15e26:	fb00 f201 	mul.w	r2, r0, r1
   15e2a:	920a      	str	r2, [sp, #40]	; 0x28
   15e2c:	9802      	ldr	r0, [sp, #8]
   15e2e:	9903      	ldr	r1, [sp, #12]
   15e30:	f000 fc07 	bl	16642 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E>
   15e34:	e7ff      	b.n	15e36 <_ZN4core3ptr19swap_nonoverlapping17hd7afcc643b1b5b34E+0x32>
   15e36:	b00c      	add	sp, #48	; 0x30
   15e38:	bd80      	pop	{r7, pc}

00015e3a <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E>:
   15e3a:	b580      	push	{r7, lr}
   15e3c:	b088      	sub	sp, #32
   15e3e:	9004      	str	r0, [sp, #16]
   15e40:	9105      	str	r1, [sp, #20]
   15e42:	2201      	movs	r2, #1
   15e44:	9207      	str	r2, [sp, #28]
   15e46:	9a07      	ldr	r2, [sp, #28]
   15e48:	9103      	str	r1, [sp, #12]
   15e4a:	9002      	str	r0, [sp, #8]
   15e4c:	9201      	str	r2, [sp, #4]
   15e4e:	e7ff      	b.n	15e50 <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x16>
   15e50:	9801      	ldr	r0, [sp, #4]
   15e52:	2820      	cmp	r0, #32
   15e54:	d306      	bcc.n	15e64 <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x2a>
   15e56:	e7ff      	b.n	15e58 <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x1e>
   15e58:	2201      	movs	r2, #1
   15e5a:	9802      	ldr	r0, [sp, #8]
   15e5c:	9903      	ldr	r1, [sp, #12]
   15e5e:	f7ff ffd1 	bl	15e04 <_ZN4core3ptr19swap_nonoverlapping17hd7afcc643b1b5b34E>
   15e62:	e013      	b.n	15e8c <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x52>
   15e64:	9802      	ldr	r0, [sp, #8]
   15e66:	f000 f814 	bl	15e92 <_ZN4core3ptr4read17h10ae8fa070723038E>
   15e6a:	4601      	mov	r1, r0
   15e6c:	f88d 001b 	strb.w	r0, [sp, #27]
   15e70:	9100      	str	r1, [sp, #0]
   15e72:	e7ff      	b.n	15e74 <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x3a>
   15e74:	2201      	movs	r2, #1
   15e76:	9803      	ldr	r0, [sp, #12]
   15e78:	9902      	ldr	r1, [sp, #8]
   15e7a:	f7f8 faf7 	bl	e46c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   15e7e:	e7ff      	b.n	15e80 <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x46>
   15e80:	9803      	ldr	r0, [sp, #12]
   15e82:	9900      	ldr	r1, [sp, #0]
   15e84:	f7f9 fc49 	bl	f71a <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   15e88:	e7ff      	b.n	15e8a <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x50>
   15e8a:	e000      	b.n	15e8e <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x54>
   15e8c:	e7ff      	b.n	15e8e <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x54>
   15e8e:	b008      	add	sp, #32
   15e90:	bd80      	pop	{r7, pc}

00015e92 <_ZN4core3ptr4read17h10ae8fa070723038E>:
   15e92:	b580      	push	{r7, lr}
   15e94:	b088      	sub	sp, #32
   15e96:	9004      	str	r0, [sp, #16]
   15e98:	f89d 1015 	ldrb.w	r1, [sp, #21]
   15e9c:	f88d 100f 	strb.w	r1, [sp, #15]
   15ea0:	9002      	str	r0, [sp, #8]
   15ea2:	e7ff      	b.n	15ea4 <_ZN4core3ptr4read17h10ae8fa070723038E+0x12>
   15ea4:	f10d 000f 	add.w	r0, sp, #15
   15ea8:	9006      	str	r0, [sp, #24]
   15eaa:	9007      	str	r0, [sp, #28]
   15eac:	e7ff      	b.n	15eae <_ZN4core3ptr4read17h10ae8fa070723038E+0x1c>
   15eae:	f10d 010f 	add.w	r1, sp, #15
   15eb2:	2201      	movs	r2, #1
   15eb4:	9802      	ldr	r0, [sp, #8]
   15eb6:	f7f8 fad9 	bl	e46c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   15eba:	e7ff      	b.n	15ebc <_ZN4core3ptr4read17h10ae8fa070723038E+0x2a>
   15ebc:	f89d 000f 	ldrb.w	r0, [sp, #15]
   15ec0:	4601      	mov	r1, r0
   15ec2:	f88d 0016 	strb.w	r0, [sp, #22]
   15ec6:	f88d 0017 	strb.w	r0, [sp, #23]
   15eca:	9101      	str	r1, [sp, #4]
   15ecc:	e7ff      	b.n	15ece <_ZN4core3ptr4read17h10ae8fa070723038E+0x3c>
   15ece:	9801      	ldr	r0, [sp, #4]
   15ed0:	b008      	add	sp, #32
   15ed2:	bd80      	pop	{r7, pc}

00015ed4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   15ed4:	b580      	push	{r7, lr}
   15ed6:	b088      	sub	sp, #32
   15ed8:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   15eda:	1d01      	adds	r1, r0, #4
   15edc:	9106      	str	r1, [sp, #24]
   15ede:	9107      	str	r1, [sp, #28]
   15ee0:	9004      	str	r0, [sp, #16]
   15ee2:	9103      	str	r1, [sp, #12]
   15ee4:	e7ff      	b.n	15ee6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x12>
   15ee6:	9804      	ldr	r0, [sp, #16]
   15ee8:	6801      	ldr	r1, [r0, #0]
   15eea:	9803      	ldr	r0, [sp, #12]
   15eec:	f7f9 fa6f 	bl	f3ce <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   15ef0:	9002      	str	r0, [sp, #8]
   15ef2:	9101      	str	r1, [sp, #4]
   15ef4:	e7ff      	b.n	15ef6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x22>
    }
   15ef6:	9802      	ldr	r0, [sp, #8]
   15ef8:	9901      	ldr	r1, [sp, #4]
   15efa:	b008      	add	sp, #32
   15efc:	bd80      	pop	{r7, pc}

00015efe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hf8294d47b4b1c78dE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   15efe:	b580      	push	{r7, lr}
   15f00:	b088      	sub	sp, #32
   15f02:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   15f04:	1d01      	adds	r1, r0, #4
   15f06:	9106      	str	r1, [sp, #24]
   15f08:	9107      	str	r1, [sp, #28]
   15f0a:	9004      	str	r0, [sp, #16]
   15f0c:	9103      	str	r1, [sp, #12]
   15f0e:	e7ff      	b.n	15f10 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hf8294d47b4b1c78dE+0x12>
   15f10:	9804      	ldr	r0, [sp, #16]
   15f12:	6801      	ldr	r1, [r0, #0]
   15f14:	9803      	ldr	r0, [sp, #12]
   15f16:	f7f9 fa5a 	bl	f3ce <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   15f1a:	9002      	str	r0, [sp, #8]
   15f1c:	9101      	str	r1, [sp, #4]
   15f1e:	e7ff      	b.n	15f20 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hf8294d47b4b1c78dE+0x22>
    }
   15f20:	9802      	ldr	r0, [sp, #8]
   15f22:	9901      	ldr	r1, [sp, #4]
   15f24:	b008      	add	sp, #32
   15f26:	bd80      	pop	{r7, pc}

00015f28 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   15f28:	b580      	push	{r7, lr}
   15f2a:	b08a      	sub	sp, #40	; 0x28
   15f2c:	460a      	mov	r2, r1
   15f2e:	9006      	str	r0, [sp, #24]
   15f30:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   15f34:	1d01      	adds	r1, r0, #4
   15f36:	9108      	str	r1, [sp, #32]
   15f38:	9109      	str	r1, [sp, #36]	; 0x24
   15f3a:	9005      	str	r0, [sp, #20]
   15f3c:	9204      	str	r2, [sp, #16]
   15f3e:	9103      	str	r1, [sp, #12]
   15f40:	e7ff      	b.n	15f42 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE+0x1a>
            .add(self.len)
   15f42:	9805      	ldr	r0, [sp, #20]
   15f44:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   15f46:	9803      	ldr	r0, [sp, #12]
   15f48:	f7f8 fbf4 	bl	e734 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   15f4c:	9002      	str	r0, [sp, #8]
   15f4e:	e7ff      	b.n	15f50 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE+0x28>
   15f50:	9802      	ldr	r0, [sp, #8]
   15f52:	9904      	ldr	r1, [sp, #16]
   15f54:	f000 f994 	bl	16280 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   15f58:	e7ff      	b.n	15f5a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE+0x32>
        self.len += 1;
   15f5a:	9805      	ldr	r0, [sp, #20]
   15f5c:	6801      	ldr	r1, [r0, #0]
   15f5e:	1c4a      	adds	r2, r1, #1
   15f60:	4613      	mov	r3, r2
   15f62:	428a      	cmp	r2, r1
   15f64:	9301      	str	r3, [sp, #4]
   15f66:	d305      	bcc.n	15f74 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE+0x4c>
   15f68:	e7ff      	b.n	15f6a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE+0x42>
   15f6a:	9801      	ldr	r0, [sp, #4]
   15f6c:	9905      	ldr	r1, [sp, #20]
   15f6e:	6008      	str	r0, [r1, #0]
    }
   15f70:	b00a      	add	sp, #40	; 0x28
   15f72:	bd80      	pop	{r7, pc}
        self.len += 1;
   15f74:	f64f 30e0 	movw	r0, #64480	; 0xfbe0
   15f78:	f2c0 0001 	movt	r0, #1
   15f7c:	f64f 32d0 	movw	r2, #64464	; 0xfbd0
   15f80:	f2c0 0201 	movt	r2, #1
   15f84:	211c      	movs	r1, #28
   15f86:	f000 fd0b 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15f8a:	defe      	udf	#254	; 0xfe

00015f8c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   15f8c:	b580      	push	{r7, lr}
   15f8e:	b08a      	sub	sp, #40	; 0x28
   15f90:	460a      	mov	r2, r1
   15f92:	9006      	str	r0, [sp, #24]
   15f94:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   15f98:	1d01      	adds	r1, r0, #4
   15f9a:	9108      	str	r1, [sp, #32]
   15f9c:	9109      	str	r1, [sp, #36]	; 0x24
   15f9e:	9005      	str	r0, [sp, #20]
   15fa0:	9204      	str	r2, [sp, #16]
   15fa2:	9103      	str	r1, [sp, #12]
   15fa4:	e7ff      	b.n	15fa6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x1a>
            .add(self.len)
   15fa6:	9805      	ldr	r0, [sp, #20]
   15fa8:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   15faa:	9803      	ldr	r0, [sp, #12]
   15fac:	f7f8 fbc2 	bl	e734 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   15fb0:	9002      	str	r0, [sp, #8]
   15fb2:	e7ff      	b.n	15fb4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x28>
   15fb4:	9802      	ldr	r0, [sp, #8]
   15fb6:	9904      	ldr	r1, [sp, #16]
   15fb8:	f000 f962 	bl	16280 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   15fbc:	e7ff      	b.n	15fbe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x32>
        self.len += 1;
   15fbe:	9805      	ldr	r0, [sp, #20]
   15fc0:	6801      	ldr	r1, [r0, #0]
   15fc2:	1c4a      	adds	r2, r1, #1
   15fc4:	4613      	mov	r3, r2
   15fc6:	428a      	cmp	r2, r1
   15fc8:	9301      	str	r3, [sp, #4]
   15fca:	d305      	bcc.n	15fd8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x4c>
   15fcc:	e7ff      	b.n	15fce <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x42>
   15fce:	9801      	ldr	r0, [sp, #4]
   15fd0:	9905      	ldr	r1, [sp, #20]
   15fd2:	6008      	str	r0, [r1, #0]
    }
   15fd4:	b00a      	add	sp, #40	; 0x28
   15fd6:	bd80      	pop	{r7, pc}
        self.len += 1;
   15fd8:	f64f 30e0 	movw	r0, #64480	; 0xfbe0
   15fdc:	f2c0 0001 	movt	r0, #1
   15fe0:	f64f 32d0 	movw	r2, #64464	; 0xfbd0
   15fe4:	f2c0 0201 	movt	r2, #1
   15fe8:	211c      	movs	r1, #28
   15fea:	f000 fcd9 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15fee:	defe      	udf	#254	; 0xfe

00015ff0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   15ff0:	b580      	push	{r7, lr}
   15ff2:	b094      	sub	sp, #80	; 0x50
   15ff4:	900e      	str	r0, [sp, #56]	; 0x38
   15ff6:	910f      	str	r1, [sp, #60]	; 0x3c
   15ff8:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   15ffa:	6803      	ldr	r3, [r0, #0]
   15ffc:	9009      	str	r0, [sp, #36]	; 0x24
   15ffe:	4608      	mov	r0, r1
   16000:	9108      	str	r1, [sp, #32]
   16002:	4611      	mov	r1, r2
   16004:	9207      	str	r2, [sp, #28]
   16006:	9306      	str	r3, [sp, #24]
   16008:	f7f8 fc24 	bl	e854 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   1600c:	9005      	str	r0, [sp, #20]
   1600e:	e7ff      	b.n	16010 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x20>
   16010:	9806      	ldr	r0, [sp, #24]
   16012:	9905      	ldr	r1, [sp, #20]
   16014:	1842      	adds	r2, r0, r1
   16016:	4613      	mov	r3, r2
   16018:	4282      	cmp	r2, r0
   1601a:	9304      	str	r3, [sp, #16]
   1601c:	d33f      	bcc.n	1609e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0xae>
   1601e:	e7ff      	b.n	16020 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x30>
   16020:	9809      	ldr	r0, [sp, #36]	; 0x24
   16022:	f000 f8ad 	bl	16180 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17haf8f4e41d032be2dE>
   16026:	9003      	str	r0, [sp, #12]
   16028:	e7ff      	b.n	1602a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x3a>
   1602a:	9804      	ldr	r0, [sp, #16]
   1602c:	9903      	ldr	r1, [sp, #12]
   1602e:	4288      	cmp	r0, r1
   16030:	d807      	bhi.n	16042 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x52>
   16032:	e7ff      	b.n	16034 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x44>
            for elem in other {
   16034:	9808      	ldr	r0, [sp, #32]
   16036:	9907      	ldr	r1, [sp, #28]
   16038:	f7f9 fae7 	bl	f60a <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>
   1603c:	9002      	str	r0, [sp, #8]
   1603e:	9101      	str	r1, [sp, #4]
   16040:	e003      	b.n	1604a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x5a>
   16042:	2001      	movs	r0, #1
            Err(())
   16044:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   16048:	e025      	b.n	16096 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0xa6>
            for elem in other {
   1604a:	9802      	ldr	r0, [sp, #8]
   1604c:	900b      	str	r0, [sp, #44]	; 0x2c
   1604e:	9901      	ldr	r1, [sp, #4]
   16050:	910c      	str	r1, [sp, #48]	; 0x30
   16052:	e7ff      	b.n	16054 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x64>
   16054:	a80b      	add	r0, sp, #44	; 0x2c
   16056:	f7fc ff85 	bl	12f64 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>
   1605a:	900d      	str	r0, [sp, #52]	; 0x34
   1605c:	e7ff      	b.n	1605e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x6e>
   1605e:	980d      	ldr	r0, [sp, #52]	; 0x34
   16060:	2800      	cmp	r0, #0
   16062:	4601      	mov	r1, r0
   16064:	bf18      	it	ne
   16066:	2101      	movne	r1, #1
   16068:	2800      	cmp	r0, #0
   1606a:	d001      	beq.n	16070 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x80>
   1606c:	e7ff      	b.n	1606e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x7e>
   1606e:	e004      	b.n	1607a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x8a>
   16070:	2000      	movs	r0, #0
            Ok(())
   16072:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   16076:	e00e      	b.n	16096 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0xa6>
            for elem in other {
   16078:	defe      	udf	#254	; 0xfe
   1607a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1607c:	9011      	str	r0, [sp, #68]	; 0x44
   1607e:	9012      	str	r0, [sp, #72]	; 0x48
   16080:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   16082:	f000 f909 	bl	16298 <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>
   16086:	9000      	str	r0, [sp, #0]
   16088:	e7ff      	b.n	1608a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x9a>
   1608a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1608c:	9900      	ldr	r1, [sp, #0]
   1608e:	f7ff ff4b 	bl	15f28 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE>
   16092:	e7ff      	b.n	16094 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0xa4>
            for elem in other {
   16094:	e7de      	b.n	16054 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x64>
    }
   16096:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   1609a:	b014      	add	sp, #80	; 0x50
   1609c:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   1609e:	f64f 30e0 	movw	r0, #64480	; 0xfbe0
   160a2:	f2c0 0001 	movt	r0, #1
   160a6:	f64f 32fc 	movw	r2, #64508	; 0xfbfc
   160aa:	f2c0 0201 	movt	r2, #1
   160ae:	211c      	movs	r1, #28
   160b0:	f000 fc76 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   160b4:	defe      	udf	#254	; 0xfe

000160b6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>:
    pub(crate) fn push(&mut self, item: T) -> Result<(), T> {
   160b6:	b580      	push	{r7, lr}
   160b8:	b088      	sub	sp, #32
   160ba:	460a      	mov	r2, r1
   160bc:	9006      	str	r0, [sp, #24]
   160be:	f88d 101f 	strb.w	r1, [sp, #31]
        if self.len < self.capacity() {
   160c2:	6801      	ldr	r1, [r0, #0]
   160c4:	9004      	str	r0, [sp, #16]
   160c6:	9203      	str	r2, [sp, #12]
   160c8:	9102      	str	r1, [sp, #8]
   160ca:	f000 f863 	bl	16194 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>
   160ce:	9001      	str	r0, [sp, #4]
   160d0:	e7ff      	b.n	160d2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x1c>
   160d2:	9802      	ldr	r0, [sp, #8]
   160d4:	9901      	ldr	r1, [sp, #4]
   160d6:	4288      	cmp	r0, r1
   160d8:	d307      	bcc.n	160ea <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x34>
   160da:	e7ff      	b.n	160dc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x26>
            Err(item)
   160dc:	9803      	ldr	r0, [sp, #12]
   160de:	f88d 0015 	strb.w	r0, [sp, #21]
   160e2:	2101      	movs	r1, #1
   160e4:	f88d 1014 	strb.w	r1, [sp, #20]
        if self.len < self.capacity() {
   160e8:	e008      	b.n	160fc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
            unsafe { self.push_unchecked(item) }
   160ea:	9804      	ldr	r0, [sp, #16]
   160ec:	9903      	ldr	r1, [sp, #12]
   160ee:	f7ff ff4d 	bl	15f8c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>
   160f2:	e7ff      	b.n	160f4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x3e>
   160f4:	2000      	movs	r0, #0
            Ok(())
   160f6:	f88d 0014 	strb.w	r0, [sp, #20]
        if self.len < self.capacity() {
   160fa:	e7ff      	b.n	160fc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
    }
   160fc:	f89d 0014 	ldrb.w	r0, [sp, #20]
   16100:	f89d 1015 	ldrb.w	r1, [sp, #21]
   16104:	b008      	add	sp, #32
   16106:	bd80      	pop	{r7, pc}

00016108 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>:
    pub(crate) fn clear(&mut self) {
   16108:	b580      	push	{r7, lr}
   1610a:	b082      	sub	sp, #8
   1610c:	9001      	str	r0, [sp, #4]
   1610e:	2100      	movs	r1, #0
        self.truncate(0);
   16110:	f000 f880 	bl	16214 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>
   16114:	e7ff      	b.n	16116 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E+0xe>
    }
   16116:	b002      	add	sp, #8
   16118:	bd80      	pop	{r7, pc}

0001611a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h923903211635af18E>:
    pub(crate) fn clear(&mut self) {
   1611a:	b580      	push	{r7, lr}
   1611c:	b082      	sub	sp, #8
   1611e:	9001      	str	r0, [sp, #4]
   16120:	2100      	movs	r1, #0
        self.truncate(0);
   16122:	f000 f841 	bl	161a8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE>
   16126:	e7ff      	b.n	16128 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h923903211635af18E+0xe>
    }
   16128:	b002      	add	sp, #8
   1612a:	bd80      	pop	{r7, pc}

0001612c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h0b01a2fd807adb5bE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   1612c:	b580      	push	{r7, lr}
   1612e:	b088      	sub	sp, #32
   16130:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   16132:	1d01      	adds	r1, r0, #4
   16134:	9106      	str	r1, [sp, #24]
   16136:	9107      	str	r1, [sp, #28]
   16138:	9004      	str	r0, [sp, #16]
   1613a:	9103      	str	r1, [sp, #12]
   1613c:	e7ff      	b.n	1613e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h0b01a2fd807adb5bE+0x12>
   1613e:	9804      	ldr	r0, [sp, #16]
   16140:	6801      	ldr	r1, [r0, #0]
   16142:	9803      	ldr	r0, [sp, #12]
   16144:	f7fc fff0 	bl	13128 <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   16148:	9002      	str	r0, [sp, #8]
   1614a:	9101      	str	r1, [sp, #4]
   1614c:	e7ff      	b.n	1614e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h0b01a2fd807adb5bE+0x22>
    }
   1614e:	9802      	ldr	r0, [sp, #8]
   16150:	9901      	ldr	r1, [sp, #4]
   16152:	b008      	add	sp, #32
   16154:	bd80      	pop	{r7, pc}

00016156 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   16156:	b580      	push	{r7, lr}
   16158:	b088      	sub	sp, #32
   1615a:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   1615c:	1d01      	adds	r1, r0, #4
   1615e:	9106      	str	r1, [sp, #24]
   16160:	9107      	str	r1, [sp, #28]
   16162:	9004      	str	r0, [sp, #16]
   16164:	9103      	str	r1, [sp, #12]
   16166:	e7ff      	b.n	16168 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x12>
   16168:	9804      	ldr	r0, [sp, #16]
   1616a:	6801      	ldr	r1, [r0, #0]
   1616c:	9803      	ldr	r0, [sp, #12]
   1616e:	f7fc ffdb 	bl	13128 <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   16172:	9002      	str	r0, [sp, #8]
   16174:	9101      	str	r1, [sp, #4]
   16176:	e7ff      	b.n	16178 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x22>
    }
   16178:	9802      	ldr	r0, [sp, #8]
   1617a:	9901      	ldr	r1, [sp, #4]
   1617c:	b008      	add	sp, #32
   1617e:	bd80      	pop	{r7, pc}

00016180 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17haf8f4e41d032be2dE>:
    pub(crate) fn capacity(&self) -> usize {
   16180:	b580      	push	{r7, lr}
   16182:	b082      	sub	sp, #8
   16184:	9001      	str	r0, [sp, #4]
        N::to_usize()
   16186:	f000 f91c 	bl	163c2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>
   1618a:	9000      	str	r0, [sp, #0]
   1618c:	e7ff      	b.n	1618e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17haf8f4e41d032be2dE+0xe>
    }
   1618e:	9800      	ldr	r0, [sp, #0]
   16190:	b002      	add	sp, #8
   16192:	bd80      	pop	{r7, pc}

00016194 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>:
    pub(crate) fn capacity(&self) -> usize {
   16194:	b580      	push	{r7, lr}
   16196:	b082      	sub	sp, #8
   16198:	9001      	str	r0, [sp, #4]
        N::to_usize()
   1619a:	f000 f942 	bl	16422 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   1619e:	9000      	str	r0, [sp, #0]
   161a0:	e7ff      	b.n	161a2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E+0xe>
    }
   161a2:	9800      	ldr	r0, [sp, #0]
   161a4:	b002      	add	sp, #8
   161a6:	bd80      	pop	{r7, pc}

000161a8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE>:
    pub(crate) fn truncate(&mut self, len: usize) {
   161a8:	b580      	push	{r7, lr}
   161aa:	b08a      	sub	sp, #40	; 0x28
   161ac:	9007      	str	r0, [sp, #28]
   161ae:	9108      	str	r1, [sp, #32]
   161b0:	9106      	str	r1, [sp, #24]
   161b2:	9005      	str	r0, [sp, #20]
   161b4:	e7ff      	b.n	161b6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0xe>
            while len < self.len {
   161b6:	9805      	ldr	r0, [sp, #20]
   161b8:	6801      	ldr	r1, [r0, #0]
   161ba:	9a06      	ldr	r2, [sp, #24]
   161bc:	428a      	cmp	r2, r1
   161be:	d302      	bcc.n	161c6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x1e>
   161c0:	e7ff      	b.n	161c2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x1a>
    }
   161c2:	b00a      	add	sp, #40	; 0x28
   161c4:	bd80      	pop	{r7, pc}
                self.len -= 1;
   161c6:	9805      	ldr	r0, [sp, #20]
   161c8:	6801      	ldr	r1, [r0, #0]
   161ca:	1e4a      	subs	r2, r1, #1
   161cc:	2901      	cmp	r1, #1
   161ce:	9204      	str	r2, [sp, #16]
   161d0:	d314      	bcc.n	161fc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x54>
   161d2:	e7ff      	b.n	161d4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x2c>
   161d4:	9804      	ldr	r0, [sp, #16]
   161d6:	9905      	ldr	r1, [sp, #20]
   161d8:	6008      	str	r0, [r1, #0]
                let len = self.len;
   161da:	680a      	ldr	r2, [r1, #0]
   161dc:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   161de:	4608      	mov	r0, r1
   161e0:	9203      	str	r2, [sp, #12]
   161e2:	f7ff fe8c 	bl	15efe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hf8294d47b4b1c78dE>
   161e6:	9002      	str	r0, [sp, #8]
   161e8:	9101      	str	r1, [sp, #4]
   161ea:	e7ff      	b.n	161ec <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x44>
   161ec:	9802      	ldr	r0, [sp, #8]
   161ee:	9901      	ldr	r1, [sp, #4]
   161f0:	9a03      	ldr	r2, [sp, #12]
   161f2:	f7f8 fb1d 	bl	e830 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   161f6:	e7ff      	b.n	161f8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x50>
   161f8:	e7ff      	b.n	161fa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x52>
            while len < self.len {
   161fa:	e7dc      	b.n	161b6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0xe>
                self.len -= 1;
   161fc:	f64f 4020 	movw	r0, #64544	; 0xfc20
   16200:	f2c0 0001 	movt	r0, #1
   16204:	f64f 420c 	movw	r2, #64524	; 0xfc0c
   16208:	f2c0 0201 	movt	r2, #1
   1620c:	2121      	movs	r1, #33	; 0x21
   1620e:	f000 fbc7 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16212:	defe      	udf	#254	; 0xfe

00016214 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   16214:	b580      	push	{r7, lr}
   16216:	b08a      	sub	sp, #40	; 0x28
   16218:	9007      	str	r0, [sp, #28]
   1621a:	9108      	str	r1, [sp, #32]
   1621c:	9106      	str	r1, [sp, #24]
   1621e:	9005      	str	r0, [sp, #20]
   16220:	e7ff      	b.n	16222 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
            while len < self.len {
   16222:	9805      	ldr	r0, [sp, #20]
   16224:	6801      	ldr	r1, [r0, #0]
   16226:	9a06      	ldr	r2, [sp, #24]
   16228:	428a      	cmp	r2, r1
   1622a:	d302      	bcc.n	16232 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1e>
   1622c:	e7ff      	b.n	1622e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1a>
    }
   1622e:	b00a      	add	sp, #40	; 0x28
   16230:	bd80      	pop	{r7, pc}
                self.len -= 1;
   16232:	9805      	ldr	r0, [sp, #20]
   16234:	6801      	ldr	r1, [r0, #0]
   16236:	1e4a      	subs	r2, r1, #1
   16238:	2901      	cmp	r1, #1
   1623a:	9204      	str	r2, [sp, #16]
   1623c:	d314      	bcc.n	16268 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x54>
   1623e:	e7ff      	b.n	16240 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x2c>
   16240:	9804      	ldr	r0, [sp, #16]
   16242:	9905      	ldr	r1, [sp, #20]
   16244:	6008      	str	r0, [r1, #0]
                let len = self.len;
   16246:	680a      	ldr	r2, [r1, #0]
   16248:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   1624a:	4608      	mov	r0, r1
   1624c:	9203      	str	r2, [sp, #12]
   1624e:	f7ff fe41 	bl	15ed4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>
   16252:	9002      	str	r0, [sp, #8]
   16254:	9101      	str	r1, [sp, #4]
   16256:	e7ff      	b.n	16258 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x44>
   16258:	9802      	ldr	r0, [sp, #8]
   1625a:	9901      	ldr	r1, [sp, #4]
   1625c:	9a03      	ldr	r2, [sp, #12]
   1625e:	f7f8 fae7 	bl	e830 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   16262:	e7ff      	b.n	16264 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x50>
   16264:	e7ff      	b.n	16266 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x52>
            while len < self.len {
   16266:	e7dc      	b.n	16222 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
                self.len -= 1;
   16268:	f64f 4020 	movw	r0, #64544	; 0xfc20
   1626c:	f2c0 0001 	movt	r0, #1
   16270:	f64f 420c 	movw	r2, #64524	; 0xfc0c
   16274:	f2c0 0201 	movt	r2, #1
   16278:	2121      	movs	r1, #33	; 0x21
   1627a:	f000 fb91 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1627e:	defe      	udf	#254	; 0xfe

00016280 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>:
   16280:	b580      	push	{r7, lr}
   16282:	b084      	sub	sp, #16
   16284:	460a      	mov	r2, r1
   16286:	9002      	str	r0, [sp, #8]
   16288:	f88d 100f 	strb.w	r1, [sp, #15]
   1628c:	9201      	str	r2, [sp, #4]
   1628e:	f7f9 fa44 	bl	f71a <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   16292:	e7ff      	b.n	16294 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE+0x14>
   16294:	b004      	add	sp, #16
   16296:	bd80      	pop	{r7, pc}

00016298 <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>:
   16298:	b081      	sub	sp, #4
   1629a:	9000      	str	r0, [sp, #0]
   1629c:	7800      	ldrb	r0, [r0, #0]
   1629e:	b001      	add	sp, #4
   162a0:	4770      	bx	lr

000162a2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>:
    fn to_usize() -> usize {
   162a2:	b580      	push	{r7, lr}
   162a4:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   162a6:	f000 fa5a 	bl	1675e <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   162aa:	9003      	str	r0, [sp, #12]
   162ac:	e7ff      	b.n	162ae <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0xc>
   162ae:	9803      	ldr	r0, [sp, #12]
   162b0:	f000 fa5b 	bl	1676a <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   162b4:	9002      	str	r0, [sp, #8]
   162b6:	e7ff      	b.n	162b8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x16>
   162b8:	f000 f8b3 	bl	16422 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   162bc:	9001      	str	r0, [sp, #4]
   162be:	e7ff      	b.n	162c0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x1e>
   162c0:	9801      	ldr	r0, [sp, #4]
   162c2:	0041      	lsls	r1, r0, #1
   162c4:	9100      	str	r1, [sp, #0]
   162c6:	e7ff      	b.n	162c8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x26>
   162c8:	9802      	ldr	r0, [sp, #8]
   162ca:	9900      	ldr	r1, [sp, #0]
   162cc:	4308      	orrs	r0, r1
    }
   162ce:	b004      	add	sp, #16
   162d0:	bd80      	pop	{r7, pc}

000162d2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>:
    fn to_usize() -> usize {
   162d2:	b580      	push	{r7, lr}
   162d4:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   162d6:	f000 fa42 	bl	1675e <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   162da:	9003      	str	r0, [sp, #12]
   162dc:	e7ff      	b.n	162de <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0xc>
   162de:	9803      	ldr	r0, [sp, #12]
   162e0:	f000 fa43 	bl	1676a <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   162e4:	9002      	str	r0, [sp, #8]
   162e6:	e7ff      	b.n	162e8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x16>
   162e8:	f000 f853 	bl	16392 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>
   162ec:	9001      	str	r0, [sp, #4]
   162ee:	e7ff      	b.n	162f0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x1e>
   162f0:	9801      	ldr	r0, [sp, #4]
   162f2:	0041      	lsls	r1, r0, #1
   162f4:	9100      	str	r1, [sp, #0]
   162f6:	e7ff      	b.n	162f8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x26>
   162f8:	9802      	ldr	r0, [sp, #8]
   162fa:	9900      	ldr	r1, [sp, #0]
   162fc:	4308      	orrs	r0, r1
    }
   162fe:	b004      	add	sp, #16
   16300:	bd80      	pop	{r7, pc}

00016302 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>:
    fn to_usize() -> usize {
   16302:	b580      	push	{r7, lr}
   16304:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   16306:	f000 fa2a 	bl	1675e <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1630a:	9003      	str	r0, [sp, #12]
   1630c:	e7ff      	b.n	1630e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0xc>
   1630e:	9803      	ldr	r0, [sp, #12]
   16310:	f000 fa2b 	bl	1676a <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16314:	9002      	str	r0, [sp, #8]
   16316:	e7ff      	b.n	16318 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x16>
   16318:	f000 f80b 	bl	16332 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>
   1631c:	9001      	str	r0, [sp, #4]
   1631e:	e7ff      	b.n	16320 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x1e>
   16320:	9801      	ldr	r0, [sp, #4]
   16322:	0041      	lsls	r1, r0, #1
   16324:	9100      	str	r1, [sp, #0]
   16326:	e7ff      	b.n	16328 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x26>
   16328:	9802      	ldr	r0, [sp, #8]
   1632a:	9900      	ldr	r1, [sp, #0]
   1632c:	4308      	orrs	r0, r1
    }
   1632e:	b004      	add	sp, #16
   16330:	bd80      	pop	{r7, pc}

00016332 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>:
    fn to_usize() -> usize {
   16332:	b580      	push	{r7, lr}
   16334:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   16336:	f000 fa12 	bl	1675e <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1633a:	9003      	str	r0, [sp, #12]
   1633c:	e7ff      	b.n	1633e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0xc>
   1633e:	9803      	ldr	r0, [sp, #12]
   16340:	f000 fa13 	bl	1676a <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16344:	9002      	str	r0, [sp, #8]
   16346:	e7ff      	b.n	16348 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x16>
   16348:	f000 f89b 	bl	16482 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>
   1634c:	9001      	str	r0, [sp, #4]
   1634e:	e7ff      	b.n	16350 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x1e>
   16350:	9801      	ldr	r0, [sp, #4]
   16352:	0041      	lsls	r1, r0, #1
   16354:	9100      	str	r1, [sp, #0]
   16356:	e7ff      	b.n	16358 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x26>
   16358:	9802      	ldr	r0, [sp, #8]
   1635a:	9900      	ldr	r1, [sp, #0]
   1635c:	4308      	orrs	r0, r1
    }
   1635e:	b004      	add	sp, #16
   16360:	bd80      	pop	{r7, pc}

00016362 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>:
    fn to_usize() -> usize {
   16362:	b580      	push	{r7, lr}
   16364:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   16366:	f000 f9fa 	bl	1675e <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1636a:	9003      	str	r0, [sp, #12]
   1636c:	e7ff      	b.n	1636e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0xc>
   1636e:	9803      	ldr	r0, [sp, #12]
   16370:	f000 f9fb 	bl	1676a <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16374:	9002      	str	r0, [sp, #8]
   16376:	e7ff      	b.n	16378 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x16>
   16378:	f7ff ff93 	bl	162a2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>
   1637c:	9001      	str	r0, [sp, #4]
   1637e:	e7ff      	b.n	16380 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x1e>
   16380:	9801      	ldr	r0, [sp, #4]
   16382:	0041      	lsls	r1, r0, #1
   16384:	9100      	str	r1, [sp, #0]
   16386:	e7ff      	b.n	16388 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x26>
   16388:	9802      	ldr	r0, [sp, #8]
   1638a:	9900      	ldr	r1, [sp, #0]
   1638c:	4308      	orrs	r0, r1
    }
   1638e:	b004      	add	sp, #16
   16390:	bd80      	pop	{r7, pc}

00016392 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>:
    fn to_usize() -> usize {
   16392:	b580      	push	{r7, lr}
   16394:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   16396:	f000 f9e2 	bl	1675e <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1639a:	9003      	str	r0, [sp, #12]
   1639c:	e7ff      	b.n	1639e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0xc>
   1639e:	9803      	ldr	r0, [sp, #12]
   163a0:	f000 f9e3 	bl	1676a <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   163a4:	9002      	str	r0, [sp, #8]
   163a6:	e7ff      	b.n	163a8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x16>
   163a8:	f000 f823 	bl	163f2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>
   163ac:	9001      	str	r0, [sp, #4]
   163ae:	e7ff      	b.n	163b0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x1e>
   163b0:	9801      	ldr	r0, [sp, #4]
   163b2:	0041      	lsls	r1, r0, #1
   163b4:	9100      	str	r1, [sp, #0]
   163b6:	e7ff      	b.n	163b8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x26>
   163b8:	9802      	ldr	r0, [sp, #8]
   163ba:	9900      	ldr	r1, [sp, #0]
   163bc:	4308      	orrs	r0, r1
    }
   163be:	b004      	add	sp, #16
   163c0:	bd80      	pop	{r7, pc}

000163c2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>:
    fn to_usize() -> usize {
   163c2:	b580      	push	{r7, lr}
   163c4:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   163c6:	f000 f9ca 	bl	1675e <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   163ca:	9003      	str	r0, [sp, #12]
   163cc:	e7ff      	b.n	163ce <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0xc>
   163ce:	9803      	ldr	r0, [sp, #12]
   163d0:	f000 f9cb 	bl	1676a <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   163d4:	9002      	str	r0, [sp, #8]
   163d6:	e7ff      	b.n	163d8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x16>
   163d8:	f000 f86b 	bl	164b2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>
   163dc:	9001      	str	r0, [sp, #4]
   163de:	e7ff      	b.n	163e0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x1e>
   163e0:	9801      	ldr	r0, [sp, #4]
   163e2:	0041      	lsls	r1, r0, #1
   163e4:	9100      	str	r1, [sp, #0]
   163e6:	e7ff      	b.n	163e8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x26>
   163e8:	9802      	ldr	r0, [sp, #8]
   163ea:	9900      	ldr	r1, [sp, #0]
   163ec:	4308      	orrs	r0, r1
    }
   163ee:	b004      	add	sp, #16
   163f0:	bd80      	pop	{r7, pc}

000163f2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>:
    fn to_usize() -> usize {
   163f2:	b580      	push	{r7, lr}
   163f4:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   163f6:	f000 f9b2 	bl	1675e <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   163fa:	9003      	str	r0, [sp, #12]
   163fc:	e7ff      	b.n	163fe <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0xc>
   163fe:	9803      	ldr	r0, [sp, #12]
   16400:	f000 f9b3 	bl	1676a <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16404:	9002      	str	r0, [sp, #8]
   16406:	e7ff      	b.n	16408 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x16>
   16408:	f000 f823 	bl	16452 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>
   1640c:	9001      	str	r0, [sp, #4]
   1640e:	e7ff      	b.n	16410 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x1e>
   16410:	9801      	ldr	r0, [sp, #4]
   16412:	0041      	lsls	r1, r0, #1
   16414:	9100      	str	r1, [sp, #0]
   16416:	e7ff      	b.n	16418 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x26>
   16418:	9802      	ldr	r0, [sp, #8]
   1641a:	9900      	ldr	r1, [sp, #0]
   1641c:	4308      	orrs	r0, r1
    }
   1641e:	b004      	add	sp, #16
   16420:	bd80      	pop	{r7, pc}

00016422 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>:
    fn to_usize() -> usize {
   16422:	b580      	push	{r7, lr}
   16424:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   16426:	f000 f99c 	bl	16762 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>
   1642a:	9003      	str	r0, [sp, #12]
   1642c:	e7ff      	b.n	1642e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0xc>
   1642e:	9803      	ldr	r0, [sp, #12]
   16430:	f000 f99b 	bl	1676a <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16434:	9002      	str	r0, [sp, #8]
   16436:	e7ff      	b.n	16438 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x16>
   16438:	f000 f995 	bl	16766 <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>
   1643c:	9001      	str	r0, [sp, #4]
   1643e:	e7ff      	b.n	16440 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x1e>
   16440:	9801      	ldr	r0, [sp, #4]
   16442:	0041      	lsls	r1, r0, #1
   16444:	9100      	str	r1, [sp, #0]
   16446:	e7ff      	b.n	16448 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x26>
   16448:	9802      	ldr	r0, [sp, #8]
   1644a:	9900      	ldr	r1, [sp, #0]
   1644c:	4308      	orrs	r0, r1
    }
   1644e:	b004      	add	sp, #16
   16450:	bd80      	pop	{r7, pc}

00016452 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>:
    fn to_usize() -> usize {
   16452:	b580      	push	{r7, lr}
   16454:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   16456:	f000 f982 	bl	1675e <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1645a:	9003      	str	r0, [sp, #12]
   1645c:	e7ff      	b.n	1645e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0xc>
   1645e:	9803      	ldr	r0, [sp, #12]
   16460:	f000 f983 	bl	1676a <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16464:	9002      	str	r0, [sp, #8]
   16466:	e7ff      	b.n	16468 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x16>
   16468:	f7ff ff7b 	bl	16362 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>
   1646c:	9001      	str	r0, [sp, #4]
   1646e:	e7ff      	b.n	16470 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x1e>
   16470:	9801      	ldr	r0, [sp, #4]
   16472:	0041      	lsls	r1, r0, #1
   16474:	9100      	str	r1, [sp, #0]
   16476:	e7ff      	b.n	16478 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x26>
   16478:	9802      	ldr	r0, [sp, #8]
   1647a:	9900      	ldr	r1, [sp, #0]
   1647c:	4308      	orrs	r0, r1
    }
   1647e:	b004      	add	sp, #16
   16480:	bd80      	pop	{r7, pc}

00016482 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>:
    fn to_usize() -> usize {
   16482:	b580      	push	{r7, lr}
   16484:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   16486:	f000 f96a 	bl	1675e <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1648a:	9003      	str	r0, [sp, #12]
   1648c:	e7ff      	b.n	1648e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0xc>
   1648e:	9803      	ldr	r0, [sp, #12]
   16490:	f000 f96b 	bl	1676a <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16494:	9002      	str	r0, [sp, #8]
   16496:	e7ff      	b.n	16498 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x16>
   16498:	f7ff ff1b 	bl	162d2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>
   1649c:	9001      	str	r0, [sp, #4]
   1649e:	e7ff      	b.n	164a0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x1e>
   164a0:	9801      	ldr	r0, [sp, #4]
   164a2:	0041      	lsls	r1, r0, #1
   164a4:	9100      	str	r1, [sp, #0]
   164a6:	e7ff      	b.n	164a8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x26>
   164a8:	9802      	ldr	r0, [sp, #8]
   164aa:	9900      	ldr	r1, [sp, #0]
   164ac:	4308      	orrs	r0, r1
    }
   164ae:	b004      	add	sp, #16
   164b0:	bd80      	pop	{r7, pc}

000164b2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>:
    fn to_usize() -> usize {
   164b2:	b580      	push	{r7, lr}
   164b4:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   164b6:	f000 f952 	bl	1675e <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   164ba:	9003      	str	r0, [sp, #12]
   164bc:	e7ff      	b.n	164be <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0xc>
   164be:	9803      	ldr	r0, [sp, #12]
   164c0:	f000 f953 	bl	1676a <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   164c4:	9002      	str	r0, [sp, #8]
   164c6:	e7ff      	b.n	164c8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x16>
   164c8:	f7ff ff1b 	bl	16302 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>
   164cc:	9001      	str	r0, [sp, #4]
   164ce:	e7ff      	b.n	164d0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x1e>
   164d0:	9801      	ldr	r0, [sp, #4]
   164d2:	0041      	lsls	r1, r0, #1
   164d4:	9100      	str	r1, [sp, #0]
   164d6:	e7ff      	b.n	164d8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x26>
   164d8:	9802      	ldr	r0, [sp, #8]
   164da:	9900      	ldr	r1, [sp, #0]
   164dc:	4308      	orrs	r0, r1
    }
   164de:	b004      	add	sp, #16
   164e0:	bd80      	pop	{r7, pc}

000164e2 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>:
impl Bit for B0 {
    const U8: u8 = 0;
    const BOOL: bool = false;

    #[inline]
    fn to_u8() -> u8 {
   164e2:	2000      	movs	r0, #0
        0
    }
   164e4:	4770      	bx	lr

000164e6 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>:
impl Bit for B1 {
    const U8: u8 = 1;
    const BOOL: bool = true;

    #[inline]
    fn to_u8() -> u8 {
   164e6:	2001      	movs	r0, #1
        1
    }
   164e8:	4770      	bx	lr

000164ea <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>:
   164ea:	b580      	push	{r7, lr}
   164ec:	b084      	sub	sp, #16
   164ee:	9002      	str	r0, [sp, #8]
   164f0:	9103      	str	r1, [sp, #12]
   164f2:	f000 f80f 	bl	16514 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE>
   164f6:	9001      	str	r0, [sp, #4]
   164f8:	e7ff      	b.n	164fa <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E+0x10>
   164fa:	9801      	ldr	r0, [sp, #4]
   164fc:	b004      	add	sp, #16
   164fe:	bd80      	pop	{r7, pc}

00016500 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E>:
   16500:	b580      	push	{r7, lr}
   16502:	b082      	sub	sp, #8
   16504:	9001      	str	r0, [sp, #4]
   16506:	f000 f873 	bl	165f0 <_ZN4core3ptr4read17h27a035d1812d8297E>
   1650a:	9000      	str	r0, [sp, #0]
   1650c:	e7ff      	b.n	1650e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E+0xe>
   1650e:	9800      	ldr	r0, [sp, #0]
   16510:	b002      	add	sp, #8
   16512:	bd80      	pop	{r7, pc}

00016514 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE>:
   16514:	b084      	sub	sp, #16
   16516:	9001      	str	r0, [sp, #4]
   16518:	9102      	str	r1, [sp, #8]
   1651a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   1651e:	9003      	str	r0, [sp, #12]
   16520:	9803      	ldr	r0, [sp, #12]
   16522:	9000      	str	r0, [sp, #0]
   16524:	e7ff      	b.n	16526 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE+0x12>
   16526:	9800      	ldr	r0, [sp, #0]
   16528:	b004      	add	sp, #16
   1652a:	4770      	bx	lr

0001652c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>:
   1652c:	b082      	sub	sp, #8
   1652e:	9001      	str	r0, [sp, #4]
   16530:	9000      	str	r0, [sp, #0]
   16532:	e7ff      	b.n	16534 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E+0x8>
   16534:	9800      	ldr	r0, [sp, #0]
   16536:	fab0 f180 	clz	r1, r0
   1653a:	0948      	lsrs	r0, r1, #5
   1653c:	b002      	add	sp, #8
   1653e:	4770      	bx	lr

00016540 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE>:
   16540:	b580      	push	{r7, lr}
   16542:	b088      	sub	sp, #32
   16544:	9006      	str	r0, [sp, #24]
   16546:	9107      	str	r1, [sp, #28]
   16548:	9004      	str	r0, [sp, #16]
   1654a:	4608      	mov	r0, r1
   1654c:	9103      	str	r1, [sp, #12]
   1654e:	f001 f8c8 	bl	176e2 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   16552:	9002      	str	r0, [sp, #8]
   16554:	e7ff      	b.n	16556 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x16>
   16556:	9802      	ldr	r0, [sp, #8]
   16558:	07c1      	lsls	r1, r0, #31
   1655a:	2900      	cmp	r1, #0
   1655c:	d105      	bne.n	1656a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x2a>
   1655e:	e7ff      	b.n	16560 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x20>
   16560:	9803      	ldr	r0, [sp, #12]
   16562:	f001 f8c2 	bl	176ea <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   16566:	9001      	str	r0, [sp, #4]
   16568:	e007      	b.n	1657a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x3a>
   1656a:	9804      	ldr	r0, [sp, #16]
   1656c:	9903      	ldr	r1, [sp, #12]
   1656e:	f001 fe24 	bl	181ba <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E>
   16572:	f88d 0017 	strb.w	r0, [sp, #23]
   16576:	e7ff      	b.n	16578 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x38>
   16578:	e015      	b.n	165a6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x66>
   1657a:	9801      	ldr	r0, [sp, #4]
   1657c:	07c1      	lsls	r1, r0, #31
   1657e:	2900      	cmp	r1, #0
   16580:	d107      	bne.n	16592 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x52>
   16582:	e7ff      	b.n	16584 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x44>
   16584:	9804      	ldr	r0, [sp, #16]
   16586:	9903      	ldr	r1, [sp, #12]
   16588:	f001 ffe8 	bl	1855c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E>
   1658c:	f88d 0017 	strb.w	r0, [sp, #23]
   16590:	e007      	b.n	165a2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x62>
   16592:	9804      	ldr	r0, [sp, #16]
   16594:	9903      	ldr	r1, [sp, #12]
   16596:	f001 fe6f 	bl	18278 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE>
   1659a:	f88d 0017 	strb.w	r0, [sp, #23]
   1659e:	e7ff      	b.n	165a0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x60>
   165a0:	e000      	b.n	165a4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x64>
   165a2:	e7ff      	b.n	165a4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x64>
   165a4:	e7ff      	b.n	165a6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x66>
   165a6:	f89d 0017 	ldrb.w	r0, [sp, #23]
   165aa:	b008      	add	sp, #32
   165ac:	bd80      	pop	{r7, pc}

000165ae <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>:
   165ae:	b081      	sub	sp, #4
   165b0:	4601      	mov	r1, r0
   165b2:	f88d 0003 	strb.w	r0, [sp, #3]
   165b6:	b2c0      	uxtb	r0, r0
   165b8:	b001      	add	sp, #4
   165ba:	4770      	bx	lr

000165bc <_ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E>:
   165bc:	b086      	sub	sp, #24
   165be:	9004      	str	r0, [sp, #16]
   165c0:	9105      	str	r1, [sp, #20]
   165c2:	9002      	str	r0, [sp, #8]
   165c4:	9103      	str	r1, [sp, #12]
   165c6:	9802      	ldr	r0, [sp, #8]
   165c8:	9903      	ldr	r1, [sp, #12]
   165ca:	9000      	str	r0, [sp, #0]
   165cc:	9101      	str	r1, [sp, #4]
   165ce:	9800      	ldr	r0, [sp, #0]
   165d0:	9901      	ldr	r1, [sp, #4]
   165d2:	b006      	add	sp, #24
   165d4:	4770      	bx	lr

000165d6 <_ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE>:
   165d6:	b086      	sub	sp, #24
   165d8:	9004      	str	r0, [sp, #16]
   165da:	9105      	str	r1, [sp, #20]
   165dc:	9002      	str	r0, [sp, #8]
   165de:	9103      	str	r1, [sp, #12]
   165e0:	9802      	ldr	r0, [sp, #8]
   165e2:	9903      	ldr	r1, [sp, #12]
   165e4:	9000      	str	r0, [sp, #0]
   165e6:	9101      	str	r1, [sp, #4]
   165e8:	9800      	ldr	r0, [sp, #0]
   165ea:	9901      	ldr	r1, [sp, #4]
   165ec:	b006      	add	sp, #24
   165ee:	4770      	bx	lr

000165f0 <_ZN4core3ptr4read17h27a035d1812d8297E>:
   165f0:	b580      	push	{r7, lr}
   165f2:	b088      	sub	sp, #32
   165f4:	9003      	str	r0, [sp, #12]
   165f6:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   165fa:	f8ad 100a 	strh.w	r1, [sp, #10]
   165fe:	9001      	str	r0, [sp, #4]
   16600:	e7ff      	b.n	16602 <_ZN4core3ptr4read17h27a035d1812d8297E+0x12>
   16602:	f10d 000a 	add.w	r0, sp, #10
   16606:	9006      	str	r0, [sp, #24]
   16608:	9007      	str	r0, [sp, #28]
   1660a:	e7ff      	b.n	1660c <_ZN4core3ptr4read17h27a035d1812d8297E+0x1c>
   1660c:	f10d 010a 	add.w	r1, sp, #10
   16610:	2201      	movs	r2, #1
   16612:	9801      	ldr	r0, [sp, #4]
   16614:	f000 f8b0 	bl	16778 <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E>
   16618:	e7ff      	b.n	1661a <_ZN4core3ptr4read17h27a035d1812d8297E+0x2a>
   1661a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   1661e:	4601      	mov	r1, r0
   16620:	f8ad 0014 	strh.w	r0, [sp, #20]
   16624:	f8ad 0016 	strh.w	r0, [sp, #22]
   16628:	9100      	str	r1, [sp, #0]
   1662a:	e7ff      	b.n	1662c <_ZN4core3ptr4read17h27a035d1812d8297E+0x3c>
   1662c:	9800      	ldr	r0, [sp, #0]
   1662e:	b008      	add	sp, #32
   16630:	bd80      	pop	{r7, pc}

00016632 <_ZN4core3ptr5write17h147d4643d861e927E>:
   16632:	b082      	sub	sp, #8
   16634:	460a      	mov	r2, r1
   16636:	9000      	str	r0, [sp, #0]
   16638:	f8ad 1006 	strh.w	r1, [sp, #6]
   1663c:	8001      	strh	r1, [r0, #0]
   1663e:	b002      	add	sp, #8
   16640:	4770      	bx	lr

00016642 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E>:
   16642:	b5d0      	push	{r4, r6, r7, lr}
   16644:	af02      	add	r7, sp, #8
   16646:	b0b4      	sub	sp, #208	; 0xd0
   16648:	466c      	mov	r4, sp
   1664a:	f36f 0404 	bfc	r4, #0, #5
   1664e:	46a5      	mov	sp, r4
   16650:	9024      	str	r0, [sp, #144]	; 0x90
   16652:	9125      	str	r1, [sp, #148]	; 0x94
   16654:	9226      	str	r2, [sp, #152]	; 0x98
   16656:	2320      	movs	r3, #32
   16658:	932f      	str	r3, [sp, #188]	; 0xbc
   1665a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   1665c:	9327      	str	r3, [sp, #156]	; 0x9c
   1665e:	920e      	str	r2, [sp, #56]	; 0x38
   16660:	910d      	str	r1, [sp, #52]	; 0x34
   16662:	900c      	str	r0, [sp, #48]	; 0x30
   16664:	930b      	str	r3, [sp, #44]	; 0x2c
   16666:	e7ff      	b.n	16668 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x26>
   16668:	2000      	movs	r0, #0
   1666a:	900f      	str	r0, [sp, #60]	; 0x3c
   1666c:	e7ff      	b.n	1666e <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x2c>
   1666e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   16670:	990b      	ldr	r1, [sp, #44]	; 0x2c
   16672:	4408      	add	r0, r1
   16674:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16676:	4290      	cmp	r0, r2
   16678:	d905      	bls.n	16686 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x44>
   1667a:	e7ff      	b.n	1667c <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x3a>
   1667c:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1667e:	990e      	ldr	r1, [sp, #56]	; 0x38
   16680:	4288      	cmp	r0, r1
   16682:	d334      	bcc.n	166ee <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0xac>
   16684:	e067      	b.n	16756 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x114>
   16686:	e7ff      	b.n	16688 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x46>
   16688:	a810      	add	r0, sp, #64	; 0x40
   1668a:	9032      	str	r0, [sp, #200]	; 0xc8
   1668c:	9033      	str	r0, [sp, #204]	; 0xcc
   1668e:	e7ff      	b.n	16690 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x4e>
   16690:	a810      	add	r0, sp, #64	; 0x40
   16692:	4601      	mov	r1, r0
   16694:	9028      	str	r0, [sp, #160]	; 0xa0
   16696:	980f      	ldr	r0, [sp, #60]	; 0x3c
   16698:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1669a:	900a      	str	r0, [sp, #40]	; 0x28
   1669c:	4610      	mov	r0, r2
   1669e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   166a0:	9109      	str	r1, [sp, #36]	; 0x24
   166a2:	4619      	mov	r1, r3
   166a4:	f7f8 f846 	bl	e734 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   166a8:	4601      	mov	r1, r0
   166aa:	9029      	str	r0, [sp, #164]	; 0xa4
   166ac:	9108      	str	r1, [sp, #32]
   166ae:	e7ff      	b.n	166b0 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x6e>
   166b0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   166b2:	980d      	ldr	r0, [sp, #52]	; 0x34
   166b4:	f7f8 f83e 	bl	e734 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   166b8:	4601      	mov	r1, r0
   166ba:	902a      	str	r0, [sp, #168]	; 0xa8
   166bc:	9107      	str	r1, [sp, #28]
   166be:	e7ff      	b.n	166c0 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x7e>
   166c0:	9808      	ldr	r0, [sp, #32]
   166c2:	9909      	ldr	r1, [sp, #36]	; 0x24
   166c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   166c6:	f7f7 fed1 	bl	e46c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   166ca:	e7ff      	b.n	166cc <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x8a>
   166cc:	9807      	ldr	r0, [sp, #28]
   166ce:	9908      	ldr	r1, [sp, #32]
   166d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   166d2:	f7f7 fecb 	bl	e46c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   166d6:	e7ff      	b.n	166d8 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x96>
   166d8:	9809      	ldr	r0, [sp, #36]	; 0x24
   166da:	9907      	ldr	r1, [sp, #28]
   166dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   166de:	f7f7 fec5 	bl	e46c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   166e2:	e7ff      	b.n	166e4 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0xa2>
   166e4:	980f      	ldr	r0, [sp, #60]	; 0x3c
   166e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   166e8:	4408      	add	r0, r1
   166ea:	900f      	str	r0, [sp, #60]	; 0x3c
   166ec:	e7bf      	b.n	1666e <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x2c>
   166ee:	e7ff      	b.n	166f0 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0xae>
   166f0:	980f      	ldr	r0, [sp, #60]	; 0x3c
   166f2:	990e      	ldr	r1, [sp, #56]	; 0x38
   166f4:	1a08      	subs	r0, r1, r0
   166f6:	4602      	mov	r2, r0
   166f8:	902b      	str	r0, [sp, #172]	; 0xac
   166fa:	a81c      	add	r0, sp, #112	; 0x70
   166fc:	9030      	str	r0, [sp, #192]	; 0xc0
   166fe:	9031      	str	r0, [sp, #196]	; 0xc4
   16700:	9206      	str	r2, [sp, #24]
   16702:	9005      	str	r0, [sp, #20]
   16704:	e7ff      	b.n	16706 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0xc4>
   16706:	9805      	ldr	r0, [sp, #20]
   16708:	9905      	ldr	r1, [sp, #20]
   1670a:	912c      	str	r1, [sp, #176]	; 0xb0
   1670c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1670e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16710:	9004      	str	r0, [sp, #16]
   16712:	4610      	mov	r0, r2
   16714:	f7f8 f80e 	bl	e734 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   16718:	4601      	mov	r1, r0
   1671a:	902d      	str	r0, [sp, #180]	; 0xb4
   1671c:	9103      	str	r1, [sp, #12]
   1671e:	e7ff      	b.n	16720 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0xde>
   16720:	990f      	ldr	r1, [sp, #60]	; 0x3c
   16722:	980d      	ldr	r0, [sp, #52]	; 0x34
   16724:	f7f8 f806 	bl	e734 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   16728:	4601      	mov	r1, r0
   1672a:	902e      	str	r0, [sp, #184]	; 0xb8
   1672c:	9102      	str	r1, [sp, #8]
   1672e:	e7ff      	b.n	16730 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0xee>
   16730:	9803      	ldr	r0, [sp, #12]
   16732:	9904      	ldr	r1, [sp, #16]
   16734:	9a06      	ldr	r2, [sp, #24]
   16736:	f7f7 fe99 	bl	e46c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1673a:	e7ff      	b.n	1673c <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0xfa>
   1673c:	9802      	ldr	r0, [sp, #8]
   1673e:	9903      	ldr	r1, [sp, #12]
   16740:	9a06      	ldr	r2, [sp, #24]
   16742:	f7f7 fe93 	bl	e46c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   16746:	e7ff      	b.n	16748 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x106>
   16748:	9804      	ldr	r0, [sp, #16]
   1674a:	9902      	ldr	r1, [sp, #8]
   1674c:	9a06      	ldr	r2, [sp, #24]
   1674e:	f7f7 fe8d 	bl	e46c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   16752:	e7ff      	b.n	16754 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x112>
   16754:	e7ff      	b.n	16756 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x114>
   16756:	f1a7 0408 	sub.w	r4, r7, #8
   1675a:	46a5      	mov	sp, r4
   1675c:	bdd0      	pop	{r4, r6, r7, pc}

0001675e <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>:
    fn to_u8() -> u8 {
   1675e:	2000      	movs	r0, #0
    }
   16760:	4770      	bx	lr

00016762 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>:
    fn to_u8() -> u8 {
   16762:	2001      	movs	r0, #1
    }
   16764:	4770      	bx	lr

00016766 <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>:
    fn to_usize() -> usize {
   16766:	2000      	movs	r0, #0
    }
   16768:	4770      	bx	lr

0001676a <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>:
   1676a:	b081      	sub	sp, #4
   1676c:	4601      	mov	r1, r0
   1676e:	f88d 0003 	strb.w	r0, [sp, #3]
   16772:	b2c0      	uxtb	r0, r0
   16774:	b001      	add	sp, #4
   16776:	4770      	bx	lr

00016778 <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E>:
   16778:	b580      	push	{r7, lr}
   1677a:	b084      	sub	sp, #16
   1677c:	9001      	str	r0, [sp, #4]
   1677e:	9102      	str	r1, [sp, #8]
   16780:	9203      	str	r2, [sp, #12]
   16782:	0052      	lsls	r2, r2, #1
   16784:	9000      	str	r0, [sp, #0]
   16786:	4608      	mov	r0, r1
   16788:	9900      	ldr	r1, [sp, #0]
   1678a:	f006 fcdd 	bl	1d148 <__aeabi_memcpy>
   1678e:	e7ff      	b.n	16790 <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E+0x18>
   16790:	b004      	add	sp, #16
   16792:	bd80      	pop	{r7, pc}

00016794 <_ZN4core3ptr13drop_in_place17h000c7c147ade2111E>:
   16794:	4770      	bx	lr

00016796 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE>:
   16796:	b5b0      	push	{r4, r5, r7, lr}
   16798:	b086      	sub	sp, #24
   1679a:	460c      	mov	r4, r1
   1679c:	4605      	mov	r5, r0
   1679e:	f001 fb88 	bl	17eb2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>
   167a2:	b9a8      	cbnz	r0, 167d0 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x3a>
   167a4:	f64f 4344 	movw	r3, #64580	; 0xfc44
   167a8:	2200      	movs	r2, #0
   167aa:	f2c0 0301 	movt	r3, #1
   167ae:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   167b2:	9205      	str	r2, [sp, #20]
   167b4:	9304      	str	r3, [sp, #16]
   167b6:	e9cd 2202 	strd	r2, r2, [sp, #8]
   167ba:	2201      	movs	r2, #1
   167bc:	9201      	str	r2, [sp, #4]
   167be:	f64f 5208 	movw	r2, #64776	; 0xfd08
   167c2:	f2c0 0201 	movt	r2, #1
   167c6:	9200      	str	r2, [sp, #0]
   167c8:	466a      	mov	r2, sp
   167ca:	f000 fbe1 	bl	16f90 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   167ce:	b110      	cbz	r0, 167d6 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x40>
   167d0:	2001      	movs	r0, #1
   167d2:	b006      	add	sp, #24
   167d4:	bdb0      	pop	{r4, r5, r7, pc}
   167d6:	1d28      	adds	r0, r5, #4
   167d8:	4621      	mov	r1, r4
   167da:	b006      	add	sp, #24
   167dc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
   167e0:	f001 bb67 	b.w	17eb2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>

000167e4 <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE>:
   167e4:	f642 20e1 	movw	r0, #10977	; 0x2ae1
   167e8:	f243 6134 	movw	r1, #13876	; 0x3634
   167ec:	f6c9 405d 	movt	r0, #40029	; 0x9c5d
   167f0:	f6cd 0131 	movt	r1, #55345	; 0xd831
   167f4:	4770      	bx	lr
	...

000167f8 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>:
   167f8:	b570      	push	{r4, r5, r6, lr}
   167fa:	460e      	mov	r6, r1
   167fc:	3909      	subs	r1, #9
   167fe:	4604      	mov	r4, r0
   16800:	291e      	cmp	r1, #30
   16802:	d818      	bhi.n	16836 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x3e>
   16804:	2002      	movs	r0, #2
   16806:	2574      	movs	r5, #116	; 0x74
   16808:	e8df f001 	tbb	[pc, r1]
   1680c:	1c1c1019 	.word	0x1c1c1019
   16810:	1c1c1c29 	.word	0x1c1c1c29
   16814:	1c1c1c1c 	.word	0x1c1c1c1c
   16818:	1c1c1c1c 	.word	0x1c1c1c1c
   1681c:	1c1c1c1c 	.word	0x1c1c1c1c
   16820:	1c1c1c1c 	.word	0x1c1c1c1c
   16824:	1c1c171c 	.word	0x1c1c171c
   16828:	00171c1c 	.word	0x00171c1c
   1682c:	2002      	movs	r0, #2
   1682e:	256e      	movs	r5, #110	; 0x6e
   16830:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   16834:	bd70      	pop	{r4, r5, r6, pc}
   16836:	2e5c      	cmp	r6, #92	; 0x5c
   16838:	d104      	bne.n	16844 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x4c>
   1683a:	2002      	movs	r0, #2
   1683c:	4635      	mov	r5, r6
   1683e:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   16842:	bd70      	pop	{r4, r5, r6, pc}
   16844:	2a00      	cmp	r2, #0
   16846:	d040      	beq.n	168ca <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   16848:	f3c6 1083 	ubfx	r0, r6, #6, #4
   1684c:	0ab1      	lsrs	r1, r6, #10
   1684e:	f5b6 3ff6 	cmp.w	r6, #125952	; 0x1ec00
   16852:	d309      	bcc.n	16868 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x70>
   16854:	f5b1 7f60 	cmp.w	r1, #896	; 0x380
   16858:	d137      	bne.n	168ca <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   1685a:	211e      	movs	r1, #30
   1685c:	e00b      	b.n	16876 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x7e>
   1685e:	2002      	movs	r0, #2
   16860:	2572      	movs	r5, #114	; 0x72
   16862:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   16866:	bd70      	pop	{r4, r5, r6, pc}
   16868:	f240 727c 	movw	r2, #1916	; 0x77c
   1686c:	f2c0 0202 	movt	r2, #2
   16870:	5c51      	ldrb	r1, [r2, r1]
   16872:	291e      	cmp	r1, #30
   16874:	d842      	bhi.n	168fc <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x104>
   16876:	f240 72f7 	movw	r2, #2039	; 0x7f7
   1687a:	f2c0 0202 	movt	r2, #2
   1687e:	eb02 1101 	add.w	r1, r2, r1, lsl #4
   16882:	5c09      	ldrb	r1, [r1, r0]
   16884:	298b      	cmp	r1, #139	; 0x8b
   16886:	d231      	bcs.n	168ec <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xf4>
   16888:	f640 10e8 	movw	r0, #2536	; 0x9e8
   1688c:	2301      	movs	r3, #1
   1688e:	f2c0 0002 	movt	r0, #2
   16892:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   16896:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
   1689a:	f006 013f 	and.w	r1, r6, #63	; 0x3f
   1689e:	f8d2 c004 	ldr.w	ip, [r2, #4]
   168a2:	fa03 f501 	lsl.w	r5, r3, r1
   168a6:	f1b1 0220 	subs.w	r2, r1, #32
   168aa:	f1c1 0120 	rsb	r1, r1, #32
   168ae:	bf58      	it	pl
   168b0:	2500      	movpl	r5, #0
   168b2:	2a00      	cmp	r2, #0
   168b4:	ea00 0005 	and.w	r0, r0, r5
   168b8:	fa23 f101 	lsr.w	r1, r3, r1
   168bc:	bf58      	it	pl
   168be:	fa03 f102 	lslpl.w	r1, r3, r2
   168c2:	ea01 010c 	and.w	r1, r1, ip
   168c6:	4308      	orrs	r0, r1
   168c8:	d105      	bne.n	168d6 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   168ca:	4630      	mov	r0, r6
   168cc:	f001 f9a5 	bl	17c1a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>
   168d0:	b108      	cbz	r0, 168d6 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   168d2:	2001      	movs	r0, #1
   168d4:	e7b2      	b.n	1683c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   168d6:	f046 0001 	orr.w	r0, r6, #1
   168da:	2107      	movs	r1, #7
   168dc:	fab0 f080 	clz	r0, r0
   168e0:	f04f 0e05 	mov.w	lr, #5
   168e4:	ea81 0c90 	eor.w	ip, r1, r0, lsr #2
   168e8:	2003      	movs	r0, #3
   168ea:	e7a7      	b.n	1683c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   168ec:	f240 706c 	movw	r0, #1900	; 0x76c
   168f0:	228b      	movs	r2, #139	; 0x8b
   168f2:	f2c0 0002 	movt	r0, #2
   168f6:	f000 f869 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   168fa:	defe      	udf	#254	; 0xfe
   168fc:	f240 705c 	movw	r0, #1884	; 0x75c
   16900:	221f      	movs	r2, #31
   16902:	f2c0 0002 	movt	r0, #2
   16906:	f000 f861 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1690a:	defe      	udf	#254	; 0xfe

0001690c <_ZN4core6option13expect_failed17had6579abaad447b4E>:
   1690c:	b08a      	sub	sp, #40	; 0x28
   1690e:	e9cd 0100 	strd	r0, r1, [sp]
   16912:	2001      	movs	r0, #1
   16914:	a908      	add	r1, sp, #32
   16916:	9007      	str	r0, [sp, #28]
   16918:	9106      	str	r1, [sp, #24]
   1691a:	2100      	movs	r1, #0
   1691c:	9105      	str	r1, [sp, #20]
   1691e:	e9cd 0103 	strd	r0, r1, [sp, #12]
   16922:	f64f 600c 	movw	r0, #65036	; 0xfe0c
   16926:	f2c0 0001 	movt	r0, #1
   1692a:	4611      	mov	r1, r2
   1692c:	9002      	str	r0, [sp, #8]
   1692e:	f648 000f 	movw	r0, #34831	; 0x880f
   16932:	f2c0 0001 	movt	r0, #1
   16936:	9009      	str	r0, [sp, #36]	; 0x24
   16938:	4668      	mov	r0, sp
   1693a:	9008      	str	r0, [sp, #32]
   1693c:	a802      	add	r0, sp, #8
   1693e:	f000 f865 	bl	16a0c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   16942:	defe      	udf	#254	; 0xfe

00016944 <_ZN4core6option18expect_none_failed17h54d938081af97677E>:
   16944:	b08e      	sub	sp, #56	; 0x38
   16946:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   1694a:	2002      	movs	r0, #2
   1694c:	a90a      	add	r1, sp, #40	; 0x28
   1694e:	9009      	str	r0, [sp, #36]	; 0x24
   16950:	9108      	str	r1, [sp, #32]
   16952:	2100      	movs	r1, #0
   16954:	9107      	str	r1, [sp, #28]
   16956:	e9cd 0105 	strd	r0, r1, [sp, #20]
   1695a:	f64f 6018 	movw	r0, #65048	; 0xfe18
   1695e:	f2c0 0001 	movt	r0, #1
   16962:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   16966:	9004      	str	r0, [sp, #16]
   16968:	f648 0005 	movw	r0, #34821	; 0x8805
   1696c:	f2c0 0001 	movt	r0, #1
   16970:	900d      	str	r0, [sp, #52]	; 0x34
   16972:	a802      	add	r0, sp, #8
   16974:	900c      	str	r0, [sp, #48]	; 0x30
   16976:	f648 000f 	movw	r0, #34831	; 0x880f
   1697a:	f2c0 0001 	movt	r0, #1
   1697e:	4661      	mov	r1, ip
   16980:	900b      	str	r0, [sp, #44]	; 0x2c
   16982:	4668      	mov	r0, sp
   16984:	900a      	str	r0, [sp, #40]	; 0x28
   16986:	a804      	add	r0, sp, #16
   16988:	f000 f840 	bl	16a0c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1698c:	defe      	udf	#254	; 0xfe

0001698e <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>:
   1698e:	68c0      	ldr	r0, [r0, #12]
   16990:	4770      	bx	lr

00016992 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>:
   16992:	4770      	bx	lr

00016994 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>:
   16994:	e9d0 2100 	ldrd	r2, r1, [r0]
   16998:	4610      	mov	r0, r2
   1699a:	4770      	bx	lr

0001699c <_ZN4core5panic8Location4line17h650a566d9637c91dE>:
   1699c:	6880      	ldr	r0, [r0, #8]
   1699e:	4770      	bx	lr

000169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>:
   169a0:	b088      	sub	sp, #32
   169a2:	4694      	mov	ip, r2
   169a4:	f64f 4244 	movw	r2, #64580	; 0xfc44
   169a8:	2300      	movs	r3, #0
   169aa:	f2c0 0201 	movt	r2, #1
   169ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
   169b2:	4668      	mov	r0, sp
   169b4:	9305      	str	r3, [sp, #20]
   169b6:	4661      	mov	r1, ip
   169b8:	9204      	str	r2, [sp, #16]
   169ba:	2201      	movs	r2, #1
   169bc:	e9cd 3302 	strd	r3, r3, [sp, #8]
   169c0:	9201      	str	r2, [sp, #4]
   169c2:	aa06      	add	r2, sp, #24
   169c4:	9200      	str	r2, [sp, #0]
   169c6:	f000 f821 	bl	16a0c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   169ca:	defe      	udf	#254	; 0xfe

000169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>:
   169cc:	b08c      	sub	sp, #48	; 0x30
   169ce:	4603      	mov	r3, r0
   169d0:	e9cd 1200 	strd	r1, r2, [sp]
   169d4:	2002      	movs	r0, #2
   169d6:	a908      	add	r1, sp, #32
   169d8:	9007      	str	r0, [sp, #28]
   169da:	9106      	str	r1, [sp, #24]
   169dc:	2100      	movs	r1, #0
   169de:	9105      	str	r1, [sp, #20]
   169e0:	e9cd 0103 	strd	r0, r1, [sp, #12]
   169e4:	f64f 604c 	movw	r0, #65100	; 0xfe4c
   169e8:	f2c0 0001 	movt	r0, #1
   169ec:	4669      	mov	r1, sp
   169ee:	9002      	str	r0, [sp, #8]
   169f0:	f248 7021 	movw	r0, #34593	; 0x8721
   169f4:	f2c0 0001 	movt	r0, #1
   169f8:	900b      	str	r0, [sp, #44]	; 0x2c
   169fa:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   169fe:	a801      	add	r0, sp, #4
   16a00:	9008      	str	r0, [sp, #32]
   16a02:	a802      	add	r0, sp, #8
   16a04:	4619      	mov	r1, r3
   16a06:	f000 f801 	bl	16a0c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   16a0a:	defe      	udf	#254	; 0xfe

00016a0c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>:
   16a0c:	b084      	sub	sp, #16
   16a0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   16a12:	f64f 6028 	movw	r0, #65064	; 0xfe28
   16a16:	f2c0 0001 	movt	r0, #1
   16a1a:	9001      	str	r0, [sp, #4]
   16a1c:	f64f 4044 	movw	r0, #64580	; 0xfc44
   16a20:	f2c0 0001 	movt	r0, #1
   16a24:	9000      	str	r0, [sp, #0]
   16a26:	4668      	mov	r0, sp
   16a28:	f7f1 fe52 	bl	86d0 <rust_begin_unwind>
   16a2c:	defe      	udf	#254	; 0xfe

00016a2e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>:
   16a2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a32:	b081      	sub	sp, #4
   16a34:	2a00      	cmp	r2, #0
   16a36:	f000 80fe 	beq.w	16c36 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   16a3a:	4690      	mov	r8, r2
   16a3c:	468a      	mov	sl, r1
   16a3e:	4681      	mov	r9, r0
   16a40:	f8d9 0008 	ldr.w	r0, [r9, #8]
   16a44:	7800      	ldrb	r0, [r0, #0]
   16a46:	b948      	cbnz	r0, 16a5c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x2e>
   16a48:	e014      	b.n	16a74 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   16a4a:	44da      	add	sl, fp
   16a4c:	2c00      	cmp	r4, #0
   16a4e:	46a0      	mov	r8, r4
   16a50:	f000 80f1 	beq.w	16c36 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   16a54:	f8d9 0008 	ldr.w	r0, [r9, #8]
   16a58:	7800      	ldrb	r0, [r0, #0]
   16a5a:	b158      	cbz	r0, 16a74 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   16a5c:	e9d9 0100 	ldrd	r0, r1, [r9]
   16a60:	2204      	movs	r2, #4
   16a62:	68cb      	ldr	r3, [r1, #12]
   16a64:	f64f 5164 	movw	r1, #64868	; 0xfd64
   16a68:	f2c0 0101 	movt	r1, #1
   16a6c:	4798      	blx	r3
   16a6e:	2800      	cmp	r0, #0
   16a70:	f040 80e5 	bne.w	16c3e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   16a74:	f04f 0b00 	mov.w	fp, #0
   16a78:	4641      	mov	r1, r8
   16a7a:	e008      	b.n	16a8e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x60>
   16a7c:	ebb8 010b 	subs.w	r1, r8, fp
   16a80:	f04f 0000 	mov.w	r0, #0
   16a84:	bf38      	it	cc
   16a86:	4601      	movcc	r1, r0
   16a88:	45c3      	cmp	fp, r8
   16a8a:	f200 80a5 	bhi.w	16bd8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1aa>
   16a8e:	eb0a 0e0b 	add.w	lr, sl, fp
   16a92:	2000      	movs	r0, #0
   16a94:	f01e 0203 	ands.w	r2, lr, #3
   16a98:	bf18      	it	ne
   16a9a:	f1d2 0c04 	rsbsne	ip, r2, #4
   16a9e:	d120      	bne.n	16ae2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xb4>
   16aa0:	2908      	cmp	r1, #8
   16aa2:	d357      	bcc.n	16b54 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   16aa4:	f1a1 0208 	sub.w	r2, r1, #8
   16aa8:	4290      	cmp	r0, r2
   16aaa:	d853      	bhi.n	16b54 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   16aac:	f85e 3000 	ldr.w	r3, [lr, r0]
   16ab0:	eb0e 0700 	add.w	r7, lr, r0
   16ab4:	687f      	ldr	r7, [r7, #4]
   16ab6:	f083 360a 	eor.w	r6, r3, #168430090	; 0xa0a0a0a
   16aba:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   16abe:	ea26 0303 	bic.w	r3, r6, r3
   16ac2:	f087 360a 	eor.w	r6, r7, #168430090	; 0xa0a0a0a
   16ac6:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   16aca:	ea26 0707 	bic.w	r7, r6, r7
   16ace:	433b      	orrs	r3, r7
   16ad0:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   16ad4:	d102      	bne.n	16adc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xae>
   16ad6:	3008      	adds	r0, #8
   16ad8:	4290      	cmp	r0, r2
   16ada:	d9e7      	bls.n	16aac <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x7e>
   16adc:	4288      	cmp	r0, r1
   16ade:	d939      	bls.n	16b54 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   16ae0:	e0b1      	b.n	16c46 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x218>
   16ae2:	458c      	cmp	ip, r1
   16ae4:	bf88      	it	hi
   16ae6:	468c      	movhi	ip, r1
   16ae8:	eb0e 060c 	add.w	r6, lr, ip
   16aec:	2000      	movs	r0, #0
   16aee:	4663      	mov	r3, ip
   16af0:	4677      	mov	r7, lr
   16af2:	b363      	cbz	r3, 16b4e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   16af4:	463a      	mov	r2, r7
   16af6:	f812 4b01 	ldrb.w	r4, [r2], #1
   16afa:	f1b4 050a 	subs.w	r5, r4, #10
   16afe:	bf18      	it	ne
   16b00:	2501      	movne	r5, #1
   16b02:	4428      	add	r0, r5
   16b04:	2c0a      	cmp	r4, #10
   16b06:	d059      	beq.n	16bbc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   16b08:	42b2      	cmp	r2, r6
   16b0a:	d020      	beq.n	16b4e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   16b0c:	787a      	ldrb	r2, [r7, #1]
   16b0e:	f1b2 040a 	subs.w	r4, r2, #10
   16b12:	bf18      	it	ne
   16b14:	2401      	movne	r4, #1
   16b16:	4420      	add	r0, r4
   16b18:	2a0a      	cmp	r2, #10
   16b1a:	d04f      	beq.n	16bbc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   16b1c:	1cba      	adds	r2, r7, #2
   16b1e:	42b2      	cmp	r2, r6
   16b20:	d015      	beq.n	16b4e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   16b22:	78ba      	ldrb	r2, [r7, #2]
   16b24:	f1b2 040a 	subs.w	r4, r2, #10
   16b28:	bf18      	it	ne
   16b2a:	2401      	movne	r4, #1
   16b2c:	4420      	add	r0, r4
   16b2e:	2a0a      	cmp	r2, #10
   16b30:	d044      	beq.n	16bbc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   16b32:	1cfa      	adds	r2, r7, #3
   16b34:	42b2      	cmp	r2, r6
   16b36:	d00a      	beq.n	16b4e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   16b38:	78fa      	ldrb	r2, [r7, #3]
   16b3a:	3b04      	subs	r3, #4
   16b3c:	3704      	adds	r7, #4
   16b3e:	f1b2 040a 	subs.w	r4, r2, #10
   16b42:	bf18      	it	ne
   16b44:	2401      	movne	r4, #1
   16b46:	4420      	add	r0, r4
   16b48:	2a0a      	cmp	r2, #10
   16b4a:	d1d2      	bne.n	16af2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xc4>
   16b4c:	e036      	b.n	16bbc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   16b4e:	4660      	mov	r0, ip
   16b50:	2908      	cmp	r1, #8
   16b52:	d2a7      	bcs.n	16aa4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x76>
   16b54:	eb0e 0700 	add.w	r7, lr, r0
   16b58:	eb0e 0201 	add.w	r2, lr, r1
   16b5c:	1a0e      	subs	r6, r1, r0
   16b5e:	2100      	movs	r1, #0
   16b60:	b3ce      	cbz	r6, 16bd6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   16b62:	463b      	mov	r3, r7
   16b64:	f813 5b01 	ldrb.w	r5, [r3], #1
   16b68:	f1b5 040a 	subs.w	r4, r5, #10
   16b6c:	bf18      	it	ne
   16b6e:	2401      	movne	r4, #1
   16b70:	4421      	add	r1, r4
   16b72:	2d0a      	cmp	r5, #10
   16b74:	d021      	beq.n	16bba <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   16b76:	4293      	cmp	r3, r2
   16b78:	d02d      	beq.n	16bd6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   16b7a:	787b      	ldrb	r3, [r7, #1]
   16b7c:	f1b3 050a 	subs.w	r5, r3, #10
   16b80:	bf18      	it	ne
   16b82:	2501      	movne	r5, #1
   16b84:	4429      	add	r1, r5
   16b86:	2b0a      	cmp	r3, #10
   16b88:	d017      	beq.n	16bba <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   16b8a:	1cbb      	adds	r3, r7, #2
   16b8c:	4293      	cmp	r3, r2
   16b8e:	d022      	beq.n	16bd6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   16b90:	78bb      	ldrb	r3, [r7, #2]
   16b92:	f1b3 050a 	subs.w	r5, r3, #10
   16b96:	bf18      	it	ne
   16b98:	2501      	movne	r5, #1
   16b9a:	4429      	add	r1, r5
   16b9c:	2b0a      	cmp	r3, #10
   16b9e:	d00c      	beq.n	16bba <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   16ba0:	1cfb      	adds	r3, r7, #3
   16ba2:	4293      	cmp	r3, r2
   16ba4:	d017      	beq.n	16bd6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   16ba6:	78fb      	ldrb	r3, [r7, #3]
   16ba8:	3e04      	subs	r6, #4
   16baa:	3704      	adds	r7, #4
   16bac:	f1b3 050a 	subs.w	r5, r3, #10
   16bb0:	bf18      	it	ne
   16bb2:	2501      	movne	r5, #1
   16bb4:	4429      	add	r1, r5
   16bb6:	2b0a      	cmp	r3, #10
   16bb8:	d1d2      	bne.n	16b60 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x132>
   16bba:	4408      	add	r0, r1
   16bbc:	4458      	add	r0, fp
   16bbe:	f100 0b01 	add.w	fp, r0, #1
   16bc2:	4540      	cmp	r0, r8
   16bc4:	f4bf af5a 	bcs.w	16a7c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   16bc8:	f81a 0000 	ldrb.w	r0, [sl, r0]
   16bcc:	280a      	cmp	r0, #10
   16bce:	f47f af55 	bne.w	16a7c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   16bd2:	2001      	movs	r0, #1
   16bd4:	e001      	b.n	16bda <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1ac>
   16bd6:	2000      	movs	r0, #0
   16bd8:	46c3      	mov	fp, r8
   16bda:	f8d9 1008 	ldr.w	r1, [r9, #8]
   16bde:	eba8 040b 	sub.w	r4, r8, fp
   16be2:	7008      	strb	r0, [r1, #0]
   16be4:	fab4 f084 	clz	r0, r4
   16be8:	0942      	lsrs	r2, r0, #5
   16bea:	fabb f08b 	clz	r0, fp
   16bee:	0943      	lsrs	r3, r0, #5
   16bf0:	e9d9 0100 	ldrd	r0, r1, [r9]
   16bf4:	ea53 0602 	orrs.w	r6, r3, r2
   16bf8:	d106      	bne.n	16c08 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1da>
   16bfa:	45d8      	cmp	r8, fp
   16bfc:	d926      	bls.n	16c4c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   16bfe:	f91a 200b 	ldrsb.w	r2, [sl, fp]
   16c02:	f112 0f41 	cmn.w	r2, #65	; 0x41
   16c06:	dd21      	ble.n	16c4c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   16c08:	68cb      	ldr	r3, [r1, #12]
   16c0a:	4651      	mov	r1, sl
   16c0c:	465a      	mov	r2, fp
   16c0e:	4798      	blx	r3
   16c10:	b9a8      	cbnz	r0, 16c3e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   16c12:	2e00      	cmp	r6, #0
   16c14:	f47f af19 	bne.w	16a4a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   16c18:	45d8      	cmp	r8, fp
   16c1a:	d905      	bls.n	16c28 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1fa>
   16c1c:	f91a 000b 	ldrsb.w	r0, [sl, fp]
   16c20:	f110 0f41 	cmn.w	r0, #65	; 0x41
   16c24:	f73f af11 	bgt.w	16a4a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   16c28:	4650      	mov	r0, sl
   16c2a:	4641      	mov	r1, r8
   16c2c:	465a      	mov	r2, fp
   16c2e:	4643      	mov	r3, r8
   16c30:	f000 fe4d 	bl	178ce <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   16c34:	defe      	udf	#254	; 0xfe
   16c36:	2000      	movs	r0, #0
   16c38:	b001      	add	sp, #4
   16c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c3e:	2001      	movs	r0, #1
   16c40:	b001      	add	sp, #4
   16c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c46:	f000 fe20 	bl	1788a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   16c4a:	defe      	udf	#254	; 0xfe
   16c4c:	4650      	mov	r0, sl
   16c4e:	4641      	mov	r1, r8
   16c50:	2200      	movs	r2, #0
   16c52:	465b      	mov	r3, fp
   16c54:	f000 fe3b 	bl	178ce <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   16c58:	defe      	udf	#254	; 0xfe

00016c5a <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>:
   16c5a:	b5f0      	push	{r4, r5, r6, r7, lr}
   16c5c:	b08d      	sub	sp, #52	; 0x34
   16c5e:	4604      	mov	r4, r0
   16c60:	7a00      	ldrb	r0, [r0, #8]
   16c62:	b138      	cbz	r0, 16c74 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x1a>
   16c64:	2001      	movs	r0, #1
   16c66:	6861      	ldr	r1, [r4, #4]
   16c68:	7220      	strb	r0, [r4, #8]
   16c6a:	1c48      	adds	r0, r1, #1
   16c6c:	6060      	str	r0, [r4, #4]
   16c6e:	4620      	mov	r0, r4
   16c70:	b00d      	add	sp, #52	; 0x34
   16c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16c74:	4616      	mov	r6, r2
   16c76:	460d      	mov	r5, r1
   16c78:	e9d4 1200 	ldrd	r1, r2, [r4]
   16c7c:	7808      	ldrb	r0, [r1, #0]
   16c7e:	0740      	lsls	r0, r0, #29
   16c80:	d419      	bmi.n	16cb6 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x5c>
   16c82:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
   16c86:	f64f 6176 	movw	r1, #65142	; 0xfe76
   16c8a:	f64f 6c7a 	movw	ip, #65146	; 0xfe7a
   16c8e:	f2c0 0101 	movt	r1, #1
   16c92:	2a00      	cmp	r2, #0
   16c94:	f2c0 0c01 	movt	ip, #1
   16c98:	bf08      	it	eq
   16c9a:	4661      	moveq	r1, ip
   16c9c:	68db      	ldr	r3, [r3, #12]
   16c9e:	f04f 0202 	mov.w	r2, #2
   16ca2:	bf08      	it	eq
   16ca4:	2201      	moveq	r2, #1
   16ca6:	4798      	blx	r3
   16ca8:	2800      	cmp	r0, #0
   16caa:	d1db      	bne.n	16c64 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   16cac:	68f2      	ldr	r2, [r6, #12]
   16cae:	4628      	mov	r0, r5
   16cb0:	6821      	ldr	r1, [r4, #0]
   16cb2:	4790      	blx	r2
   16cb4:	e7d7      	b.n	16c66 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>
   16cb6:	b95a      	cbnz	r2, 16cd0 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x76>
   16cb8:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   16cbc:	2202      	movs	r2, #2
   16cbe:	68cb      	ldr	r3, [r1, #12]
   16cc0:	f64f 6178 	movw	r1, #65144	; 0xfe78
   16cc4:	f2c0 0101 	movt	r1, #1
   16cc8:	4798      	blx	r3
   16cca:	2800      	cmp	r0, #0
   16ccc:	d1ca      	bne.n	16c64 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   16cce:	6821      	ldr	r1, [r4, #0]
   16cd0:	2001      	movs	r0, #1
   16cd2:	f10d 030f 	add.w	r3, sp, #15
   16cd6:	f88d 000f 	strb.w	r0, [sp, #15]
   16cda:	e9d1 0206 	ldrd	r0, r2, [r1, #24]
   16cde:	e88d 000d 	stmia.w	sp, {r0, r2, r3}
   16ce2:	e891 5005 	ldmia.w	r1, {r0, r2, ip, lr}
   16ce6:	e9d1 3704 	ldrd	r3, r7, [r1, #16]
   16cea:	f891 1020 	ldrb.w	r1, [r1, #32]
   16cee:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   16cf2:	a904      	add	r1, sp, #16
   16cf4:	e9cd 0204 	strd	r0, r2, [sp, #16]
   16cf8:	f64f 605c 	movw	r0, #65116	; 0xfe5c
   16cfc:	f2c0 0001 	movt	r0, #1
   16d00:	68f2      	ldr	r2, [r6, #12]
   16d02:	900b      	str	r0, [sp, #44]	; 0x2c
   16d04:	4668      	mov	r0, sp
   16d06:	900a      	str	r0, [sp, #40]	; 0x28
   16d08:	4628      	mov	r0, r5
   16d0a:	e9cd 3708 	strd	r3, r7, [sp, #32]
   16d0e:	e9cd ce06 	strd	ip, lr, [sp, #24]
   16d12:	4790      	blx	r2
   16d14:	2800      	cmp	r0, #0
   16d16:	d1a5      	bne.n	16c64 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   16d18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   16d1c:	2202      	movs	r2, #2
   16d1e:	68cb      	ldr	r3, [r1, #12]
   16d20:	f64f 6174 	movw	r1, #65140	; 0xfe74
   16d24:	f2c0 0101 	movt	r1, #1
   16d28:	4798      	blx	r3
   16d2a:	e79c      	b.n	16c66 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>

00016d2c <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>:
   16d2c:	b5b0      	push	{r4, r5, r7, lr}
   16d2e:	4604      	mov	r4, r0
   16d30:	7a05      	ldrb	r5, [r0, #8]
   16d32:	6840      	ldr	r0, [r0, #4]
   16d34:	b308      	cbz	r0, 16d7a <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4e>
   16d36:	b10d      	cbz	r5, 16d3c <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x10>
   16d38:	2501      	movs	r5, #1
   16d3a:	e01d      	b.n	16d78 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   16d3c:	2801      	cmp	r0, #1
   16d3e:	d110      	bne.n	16d62 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   16d40:	7a60      	ldrb	r0, [r4, #9]
   16d42:	b170      	cbz	r0, 16d62 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   16d44:	6821      	ldr	r1, [r4, #0]
   16d46:	7808      	ldrb	r0, [r1, #0]
   16d48:	0740      	lsls	r0, r0, #29
   16d4a:	d40a      	bmi.n	16d62 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   16d4c:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   16d50:	2201      	movs	r2, #1
   16d52:	68cb      	ldr	r3, [r1, #12]
   16d54:	f64f 617b 	movw	r1, #65147	; 0xfe7b
   16d58:	f2c0 0101 	movt	r1, #1
   16d5c:	2501      	movs	r5, #1
   16d5e:	4798      	blx	r3
   16d60:	b950      	cbnz	r0, 16d78 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   16d62:	6821      	ldr	r1, [r4, #0]
   16d64:	2201      	movs	r2, #1
   16d66:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   16d6a:	68cb      	ldr	r3, [r1, #12]
   16d6c:	f64f 617c 	movw	r1, #65148	; 0xfe7c
   16d70:	f2c0 0101 	movt	r1, #1
   16d74:	4798      	blx	r3
   16d76:	4605      	mov	r5, r0
   16d78:	7225      	strb	r5, [r4, #8]
   16d7a:	2d00      	cmp	r5, #0
   16d7c:	bf18      	it	ne
   16d7e:	2501      	movne	r5, #1
   16d80:	4628      	mov	r0, r5
   16d82:	bdb0      	pop	{r4, r5, r7, pc}

00016d84 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>:
   16d84:	b580      	push	{r7, lr}
   16d86:	b082      	sub	sp, #8
   16d88:	468c      	mov	ip, r1
   16d8a:	2100      	movs	r1, #0
   16d8c:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
   16d90:	9101      	str	r1, [sp, #4]
   16d92:	d207      	bcs.n	16da4 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x20>
   16d94:	f88d c004 	strb.w	ip, [sp, #4]
   16d98:	a901      	add	r1, sp, #4
   16d9a:	2201      	movs	r2, #1
   16d9c:	f7ff fe47 	bl	16a2e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   16da0:	b002      	add	sp, #8
   16da2:	bd80      	pop	{r7, pc}
   16da4:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
   16da8:	d210      	bcs.n	16dcc <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x48>
   16daa:	ea4f 119c 	mov.w	r1, ip, lsr #6
   16dae:	2306      	movs	r3, #6
   16db0:	2202      	movs	r2, #2
   16db2:	f363 115f 	bfi	r1, r3, #5, #27
   16db6:	f362 1c9f 	bfi	ip, r2, #6, #26
   16dba:	f88d c005 	strb.w	ip, [sp, #5]
   16dbe:	f88d 1004 	strb.w	r1, [sp, #4]
   16dc2:	a901      	add	r1, sp, #4
   16dc4:	f7ff fe33 	bl	16a2e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   16dc8:	b002      	add	sp, #8
   16dca:	bd80      	pop	{r7, pc}
   16dcc:	2202      	movs	r2, #2
   16dce:	4663      	mov	r3, ip
   16dd0:	a901      	add	r1, sp, #4
   16dd2:	f362 139f 	bfi	r3, r2, #6, #26
   16dd6:	f5bc 3f80 	cmp.w	ip, #65536	; 0x10000
   16dda:	d213      	bcs.n	16e04 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x80>
   16ddc:	f88d 3006 	strb.w	r3, [sp, #6]
   16de0:	ea4f 139c 	mov.w	r3, ip, lsr #6
   16de4:	f362 139f 	bfi	r3, r2, #6, #26
   16de8:	f88d 3005 	strb.w	r3, [sp, #5]
   16dec:	ea4f 321c 	mov.w	r2, ip, lsr #12
   16df0:	230e      	movs	r3, #14
   16df2:	f363 121f 	bfi	r2, r3, #4, #28
   16df6:	f88d 2004 	strb.w	r2, [sp, #4]
   16dfa:	2203      	movs	r2, #3
   16dfc:	f7ff fe17 	bl	16a2e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   16e00:	b002      	add	sp, #8
   16e02:	bd80      	pop	{r7, pc}
   16e04:	f88d 3007 	strb.w	r3, [sp, #7]
   16e08:	ea4f 139c 	mov.w	r3, ip, lsr #6
   16e0c:	f362 139f 	bfi	r3, r2, #6, #26
   16e10:	f88d 3006 	strb.w	r3, [sp, #6]
   16e14:	ea4f 331c 	mov.w	r3, ip, lsr #12
   16e18:	f362 139f 	bfi	r3, r2, #6, #26
   16e1c:	22f0      	movs	r2, #240	; 0xf0
   16e1e:	ea42 429c 	orr.w	r2, r2, ip, lsr #18
   16e22:	f88d 3005 	strb.w	r3, [sp, #5]
   16e26:	f88d 2004 	strb.w	r2, [sp, #4]
   16e2a:	2204      	movs	r2, #4
   16e2c:	f7ff fdff 	bl	16a2e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   16e30:	b002      	add	sp, #8
   16e32:	bd80      	pop	{r7, pc}

00016e34 <_ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE>:
   16e34:	b570      	push	{r4, r5, r6, lr}
   16e36:	b088      	sub	sp, #32
   16e38:	9001      	str	r0, [sp, #4]
   16e3a:	aa02      	add	r2, sp, #8
   16e3c:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   16e40:	f64f 7148 	movw	r1, #65352	; 0xff48
   16e44:	4610      	mov	r0, r2
   16e46:	f2c0 0101 	movt	r1, #1
   16e4a:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   16e4e:	a801      	add	r0, sp, #4
   16e50:	f000 f89e 	bl	16f90 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   16e54:	b008      	add	sp, #32
   16e56:	bd70      	pop	{r4, r5, r6, pc}

00016e58 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E>:
   16e58:	6800      	ldr	r0, [r0, #0]
   16e5a:	f7ff bde8 	b.w	16a2e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>

00016e5e <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE>:
   16e5e:	6800      	ldr	r0, [r0, #0]
   16e60:	f7ff bf90 	b.w	16d84 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>

00016e64 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE>:
   16e64:	b570      	push	{r4, r5, r6, lr}
   16e66:	b088      	sub	sp, #32
   16e68:	6800      	ldr	r0, [r0, #0]
   16e6a:	aa02      	add	r2, sp, #8
   16e6c:	9001      	str	r0, [sp, #4]
   16e6e:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   16e72:	4610      	mov	r0, r2
   16e74:	f64f 7148 	movw	r1, #65352	; 0xff48
   16e78:	f2c0 0101 	movt	r1, #1
   16e7c:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   16e80:	a801      	add	r0, sp, #4
   16e82:	f000 f885 	bl	16f90 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   16e86:	b008      	add	sp, #32
   16e88:	bd70      	pop	{r4, r5, r6, pc}

00016e8a <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE>:
   16e8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e8e:	b08d      	sub	sp, #52	; 0x34
   16e90:	468c      	mov	ip, r1
   16e92:	6801      	ldr	r1, [r0, #0]
   16e94:	f248 5e1f 	movw	lr, #34079	; 0x851f
   16e98:	f64f 607f 	movw	r0, #65151	; 0xfe7f
   16e9c:	f242 7810 	movw	r8, #10000	; 0x2710
   16ea0:	4541      	cmp	r1, r8
   16ea2:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   16ea6:	f2c0 0001 	movt	r0, #1
   16eaa:	d337      	bcc.n	16f1c <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x92>
   16eac:	f241 7959 	movw	r9, #5977	; 0x1759
   16eb0:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   16eb4:	f10d 0b0c 	add.w	fp, sp, #12
   16eb8:	2300      	movs	r3, #0
   16eba:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   16ebe:	f04f 0a64 	mov.w	sl, #100	; 0x64
   16ec2:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   16ec6:	fba1 2409 	umull	r2, r4, r1, r9
   16eca:	42b9      	cmp	r1, r7
   16ecc:	ea4f 3254 	mov.w	r2, r4, lsr #13
   16ed0:	fb02 1418 	mls	r4, r2, r8, r1
   16ed4:	4611      	mov	r1, r2
   16ed6:	b2a5      	uxth	r5, r4
   16ed8:	fba5 560e 	umull	r5, r6, r5, lr
   16edc:	ea4f 1556 	mov.w	r5, r6, lsr #5
   16ee0:	eb0b 0603 	add.w	r6, fp, r3
   16ee4:	fb05 441a 	mls	r4, r5, sl, r4
   16ee8:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   16eec:	f1a3 0304 	sub.w	r3, r3, #4
   16ef0:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   16ef4:	b2a4      	uxth	r4, r4
   16ef6:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   16efa:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   16efe:	d8e2      	bhi.n	16ec6 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x3c>
   16f00:	f103 0427 	add.w	r4, r3, #39	; 0x27
   16f04:	4611      	mov	r1, r2
   16f06:	2963      	cmp	r1, #99	; 0x63
   16f08:	dc0b      	bgt.n	16f22 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x98>
   16f0a:	460b      	mov	r3, r1
   16f0c:	2b0a      	cmp	r3, #10
   16f0e:	db17      	blt.n	16f40 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xb6>
   16f10:	1ea1      	subs	r1, r4, #2
   16f12:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   16f16:	aa03      	add	r2, sp, #12
   16f18:	5250      	strh	r0, [r2, r1]
   16f1a:	e016      	b.n	16f4a <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xc0>
   16f1c:	2427      	movs	r4, #39	; 0x27
   16f1e:	2963      	cmp	r1, #99	; 0x63
   16f20:	ddf3      	ble.n	16f0a <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x80>
   16f22:	b28a      	uxth	r2, r1
   16f24:	3c02      	subs	r4, #2
   16f26:	fba2 230e 	umull	r2, r3, r2, lr
   16f2a:	2264      	movs	r2, #100	; 0x64
   16f2c:	095b      	lsrs	r3, r3, #5
   16f2e:	fb03 1112 	mls	r1, r3, r2, r1
   16f32:	aa03      	add	r2, sp, #12
   16f34:	b289      	uxth	r1, r1
   16f36:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   16f3a:	5311      	strh	r1, [r2, r4]
   16f3c:	2b0a      	cmp	r3, #10
   16f3e:	dae7      	bge.n	16f10 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x86>
   16f40:	1e61      	subs	r1, r4, #1
   16f42:	aa03      	add	r2, sp, #12
   16f44:	f103 0030 	add.w	r0, r3, #48	; 0x30
   16f48:	5450      	strb	r0, [r2, r1]
   16f4a:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   16f4e:	aa03      	add	r2, sp, #12
   16f50:	4411      	add	r1, r2
   16f52:	f64f 4244 	movw	r2, #64580	; 0xfc44
   16f56:	e9cd 1000 	strd	r1, r0, [sp]
   16f5a:	f2c0 0201 	movt	r2, #1
   16f5e:	4660      	mov	r0, ip
   16f60:	2101      	movs	r1, #1
   16f62:	2300      	movs	r3, #0
   16f64:	f000 f8f4 	bl	17150 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16f68:	b00d      	add	sp, #52	; 0x34
   16f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016f6e <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E>:
   16f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16f72:	b086      	sub	sp, #24
   16f74:	e9d1 c106 	ldrd	ip, r1, [r1, #24]
   16f78:	466a      	mov	r2, sp
   16f7a:	e890 41f0 	ldmia.w	r0, {r4, r5, r6, r7, r8, lr}
   16f7e:	4613      	mov	r3, r2
   16f80:	4660      	mov	r0, ip
   16f82:	e883 41f0 	stmia.w	r3, {r4, r5, r6, r7, r8, lr}
   16f86:	f000 f803 	bl	16f90 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   16f8a:	b006      	add	sp, #24
   16f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00016f90 <_ZN4core3fmt5write17hd95ac78ed22a2252E>:
   16f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f94:	b08b      	sub	sp, #44	; 0x2c
   16f96:	2303      	movs	r3, #3
   16f98:	6897      	ldr	r7, [r2, #8]
   16f9a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   16f9e:	2320      	movs	r3, #32
   16fa0:	9303      	str	r3, [sp, #12]
   16fa2:	2300      	movs	r3, #0
   16fa4:	2f00      	cmp	r7, #0
   16fa6:	9302      	str	r3, [sp, #8]
   16fa8:	e9cd 0108 	strd	r0, r1, [sp, #32]
   16fac:	9306      	str	r3, [sp, #24]
   16fae:	9304      	str	r3, [sp, #16]
   16fb0:	d07c      	beq.n	170ac <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x11c>
   16fb2:	f8d2 b00c 	ldr.w	fp, [r2, #12]
   16fb6:	e9d2 9400 	ldrd	r9, r4, [r2]
   16fba:	45a3      	cmp	fp, r4
   16fbc:	bf88      	it	hi
   16fbe:	46a3      	movhi	fp, r4
   16fc0:	f1bb 0f00 	cmp.w	fp, #0
   16fc4:	f000 809b 	beq.w	170fe <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   16fc8:	e9d2 6204 	ldrd	r6, r2, [r2, #16]
   16fcc:	68cd      	ldr	r5, [r1, #12]
   16fce:	9201      	str	r2, [sp, #4]
   16fd0:	e9d9 3200 	ldrd	r3, r2, [r9]
   16fd4:	4619      	mov	r1, r3
   16fd6:	47a8      	blx	r5
   16fd8:	2800      	cmp	r0, #0
   16fda:	f040 809e 	bne.w	1711a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   16fde:	464d      	mov	r5, r9
   16fe0:	f04f 0a01 	mov.w	sl, #1
   16fe4:	f04f 0800 	mov.w	r8, #0
   16fe8:	f04f 0910 	mov.w	r9, #16
   16fec:	eb07 0088 	add.w	r0, r7, r8, lsl #2
   16ff0:	6841      	ldr	r1, [r0, #4]
   16ff2:	9103      	str	r1, [sp, #12]
   16ff4:	7f01      	ldrb	r1, [r0, #28]
   16ff6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   16ffa:	6881      	ldr	r1, [r0, #8]
   16ffc:	9102      	str	r1, [sp, #8]
   16ffe:	e9d0 2105 	ldrd	r2, r1, [r0, #20]
   17002:	b18a      	cbz	r2, 17028 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x98>
   17004:	2a02      	cmp	r2, #2
   17006:	d011      	beq.n	1702c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   17008:	9a01      	ldr	r2, [sp, #4]
   1700a:	4291      	cmp	r1, r2
   1700c:	f080 8098 	bcs.w	17140 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   17010:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
   17014:	f646 638b 	movw	r3, #28299	; 0x6e8b
   17018:	f2c0 0301 	movt	r3, #1
   1701c:	6852      	ldr	r2, [r2, #4]
   1701e:	429a      	cmp	r2, r3
   17020:	d104      	bne.n	1702c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   17022:	f856 1031 	ldr.w	r1, [r6, r1, lsl #3]
   17026:	6809      	ldr	r1, [r1, #0]
   17028:	2201      	movs	r2, #1
   1702a:	e000      	b.n	1702e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9e>
   1702c:	2200      	movs	r2, #0
   1702e:	e9cd 2104 	strd	r2, r1, [sp, #16]
   17032:	f857 1009 	ldr.w	r1, [r7, r9]
   17036:	68c0      	ldr	r0, [r0, #12]
   17038:	b180      	cbz	r0, 1705c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xcc>
   1703a:	2802      	cmp	r0, #2
   1703c:	d010      	beq.n	17060 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   1703e:	9801      	ldr	r0, [sp, #4]
   17040:	4281      	cmp	r1, r0
   17042:	d27d      	bcs.n	17140 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   17044:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
   17048:	f646 628b 	movw	r2, #28299	; 0x6e8b
   1704c:	f2c0 0201 	movt	r2, #1
   17050:	6840      	ldr	r0, [r0, #4]
   17052:	4290      	cmp	r0, r2
   17054:	d104      	bne.n	17060 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   17056:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   1705a:	6801      	ldr	r1, [r0, #0]
   1705c:	2001      	movs	r0, #1
   1705e:	e000      	b.n	17062 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd2>
   17060:	2000      	movs	r0, #0
   17062:	eb07 0209 	add.w	r2, r7, r9
   17066:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1706a:	9801      	ldr	r0, [sp, #4]
   1706c:	f852 1c10 	ldr.w	r1, [r2, #-16]
   17070:	4281      	cmp	r1, r0
   17072:	d25d      	bcs.n	17130 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1a0>
   17074:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   17078:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
   1707c:	684a      	ldr	r2, [r1, #4]
   1707e:	a902      	add	r1, sp, #8
   17080:	4790      	blx	r2
   17082:	2800      	cmp	r0, #0
   17084:	d149      	bne.n	1711a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   17086:	45da      	cmp	sl, fp
   17088:	d24b      	bcs.n	17122 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x192>
   1708a:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   1708e:	eb05 0208 	add.w	r2, r5, r8
   17092:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   17096:	68db      	ldr	r3, [r3, #12]
   17098:	4798      	blx	r3
   1709a:	f109 0920 	add.w	r9, r9, #32
   1709e:	f108 0808 	add.w	r8, r8, #8
   170a2:	f10a 0a01 	add.w	sl, sl, #1
   170a6:	2800      	cmp	r0, #0
   170a8:	d0a0      	beq.n	16fec <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x5c>
   170aa:	e036      	b.n	1711a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   170ac:	6956      	ldr	r6, [r2, #20]
   170ae:	e9d2 9400 	ldrd	r9, r4, [r2]
   170b2:	42a6      	cmp	r6, r4
   170b4:	bf88      	it	hi
   170b6:	4626      	movhi	r6, r4
   170b8:	b30e      	cbz	r6, 170fe <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   170ba:	6917      	ldr	r7, [r2, #16]
   170bc:	e9d9 3200 	ldrd	r3, r2, [r9]
   170c0:	68cd      	ldr	r5, [r1, #12]
   170c2:	4619      	mov	r1, r3
   170c4:	47a8      	blx	r5
   170c6:	bb40      	cbnz	r0, 1711a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   170c8:	f10d 0808 	add.w	r8, sp, #8
   170cc:	2500      	movs	r5, #0
   170ce:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
   170d2:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   170d6:	684a      	ldr	r2, [r1, #4]
   170d8:	4641      	mov	r1, r8
   170da:	4790      	blx	r2
   170dc:	b9e8      	cbnz	r0, 1711a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   170de:	f105 0a01 	add.w	sl, r5, #1
   170e2:	45b2      	cmp	sl, r6
   170e4:	d20d      	bcs.n	17102 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x172>
   170e6:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   170ea:	eb09 02c5 	add.w	r2, r9, r5, lsl #3
   170ee:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   170f2:	68db      	ldr	r3, [r3, #12]
   170f4:	4798      	blx	r3
   170f6:	2800      	cmp	r0, #0
   170f8:	4655      	mov	r5, sl
   170fa:	d0e8      	beq.n	170ce <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x13e>
   170fc:	e00d      	b.n	1711a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   170fe:	f04f 0a00 	mov.w	sl, #0
   17102:	4554      	cmp	r4, sl
   17104:	d910      	bls.n	17128 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   17106:	eb09 02ca 	add.w	r2, r9, sl, lsl #3
   1710a:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   1710e:	f859 103a 	ldr.w	r1, [r9, sl, lsl #3]
   17112:	6852      	ldr	r2, [r2, #4]
   17114:	68db      	ldr	r3, [r3, #12]
   17116:	4798      	blx	r3
   17118:	b130      	cbz	r0, 17128 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   1711a:	2001      	movs	r0, #1
   1711c:	b00b      	add	sp, #44	; 0x2c
   1711e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17122:	46a9      	mov	r9, r5
   17124:	4554      	cmp	r4, sl
   17126:	d8ee      	bhi.n	17106 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x176>
   17128:	2000      	movs	r0, #0
   1712a:	b00b      	add	sp, #44	; 0x2c
   1712c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17130:	f64f 7078 	movw	r0, #65400	; 0xff78
   17134:	f2c0 0001 	movt	r0, #1
   17138:	9a01      	ldr	r2, [sp, #4]
   1713a:	f7ff fc47 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1713e:	defe      	udf	#254	; 0xfe
   17140:	f64f 7088 	movw	r0, #65416	; 0xff88
   17144:	f2c0 0001 	movt	r0, #1
   17148:	9a01      	ldr	r2, [sp, #4]
   1714a:	f7ff fc3f 	bl	169cc <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1714e:	defe      	udf	#254	; 0xfe

00017150 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>:
   17150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17154:	b083      	sub	sp, #12
   17156:	e9dd 570c 	ldrd	r5, r7, [sp, #48]	; 0x30
   1715a:	469a      	mov	sl, r3
   1715c:	4604      	mov	r4, r0
   1715e:	b1e1      	cbz	r1, 1719a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x4a>
   17160:	f8d4 e000 	ldr.w	lr, [r4]
   17164:	f04f 082b 	mov.w	r8, #43	; 0x2b
   17168:	f01e 0101 	ands.w	r1, lr, #1
   1716c:	bf08      	it	eq
   1716e:	f44f 1888 	moveq.w	r8, #1114112	; 0x110000
   17172:	eb01 0907 	add.w	r9, r1, r7
   17176:	ea5f 714e 	movs.w	r1, lr, lsl #29
   1717a:	d517      	bpl.n	171ac <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x5c>
   1717c:	f1ba 0f00 	cmp.w	sl, #0
   17180:	d033      	beq.n	171ea <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9a>
   17182:	f1aa 0101 	sub.w	r1, sl, #1
   17186:	f00a 0c03 	and.w	ip, sl, #3
   1718a:	2903      	cmp	r1, #3
   1718c:	d22f      	bcs.n	171ee <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9e>
   1718e:	2100      	movs	r1, #0
   17190:	4613      	mov	r3, r2
   17192:	f1bc 0f00 	cmp.w	ip, #0
   17196:	d152      	bne.n	1723e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xee>
   17198:	e069      	b.n	1726e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   1719a:	f8d4 e000 	ldr.w	lr, [r4]
   1719e:	f107 0901 	add.w	r9, r7, #1
   171a2:	f04f 082d 	mov.w	r8, #45	; 0x2d
   171a6:	ea5f 714e 	movs.w	r1, lr, lsl #29
   171aa:	d4e7      	bmi.n	1717c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x2c>
   171ac:	f04f 0a00 	mov.w	sl, #0
   171b0:	2200      	movs	r2, #0
   171b2:	68a0      	ldr	r0, [r4, #8]
   171b4:	2801      	cmp	r0, #1
   171b6:	d161      	bne.n	1727c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   171b8:	f8d4 b00c 	ldr.w	fp, [r4, #12]
   171bc:	45cb      	cmp	fp, r9
   171be:	d95d      	bls.n	1727c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   171c0:	ea5f 700e 	movs.w	r0, lr, lsl #28
   171c4:	d46e      	bmi.n	172a4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x154>
   171c6:	9202      	str	r2, [sp, #8]
   171c8:	ebab 0109 	sub.w	r1, fp, r9
   171cc:	f894 2020 	ldrb.w	r2, [r4, #32]
   171d0:	2000      	movs	r0, #0
   171d2:	46a9      	mov	r9, r5
   171d4:	460e      	mov	r6, r1
   171d6:	2a03      	cmp	r2, #3
   171d8:	bf08      	it	eq
   171da:	2201      	moveq	r2, #1
   171dc:	e8df f002 	tbb	[pc, r2]
   171e0:	02840287 	.word	0x02840287
   171e4:	2600      	movs	r6, #0
   171e6:	4608      	mov	r0, r1
   171e8:	e081      	b.n	172ee <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x19e>
   171ea:	2100      	movs	r1, #0
   171ec:	e03f      	b.n	1726e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   171ee:	ebac 060a 	sub.w	r6, ip, sl
   171f2:	2100      	movs	r1, #0
   171f4:	4693      	mov	fp, r2
   171f6:	4613      	mov	r3, r2
   171f8:	e9cd 7501 	strd	r7, r5, [sp, #4]
   171fc:	781a      	ldrb	r2, [r3, #0]
   171fe:	785d      	ldrb	r5, [r3, #1]
   17200:	7898      	ldrb	r0, [r3, #2]
   17202:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   17206:	78df      	ldrb	r7, [r3, #3]
   17208:	2a80      	cmp	r2, #128	; 0x80
   1720a:	f005 02c0 	and.w	r2, r5, #192	; 0xc0
   1720e:	bf08      	it	eq
   17210:	3101      	addeq	r1, #1
   17212:	2a80      	cmp	r2, #128	; 0x80
   17214:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   17218:	bf08      	it	eq
   1721a:	3101      	addeq	r1, #1
   1721c:	2880      	cmp	r0, #128	; 0x80
   1721e:	f007 00c0 	and.w	r0, r7, #192	; 0xc0
   17222:	bf08      	it	eq
   17224:	3101      	addeq	r1, #1
   17226:	2880      	cmp	r0, #128	; 0x80
   17228:	bf08      	it	eq
   1722a:	3101      	addeq	r1, #1
   1722c:	3304      	adds	r3, #4
   1722e:	3604      	adds	r6, #4
   17230:	d1e4      	bne.n	171fc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xac>
   17232:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   17236:	465a      	mov	r2, fp
   17238:	f1bc 0f00 	cmp.w	ip, #0
   1723c:	d017      	beq.n	1726e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   1723e:	7818      	ldrb	r0, [r3, #0]
   17240:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   17244:	2880      	cmp	r0, #128	; 0x80
   17246:	bf08      	it	eq
   17248:	3101      	addeq	r1, #1
   1724a:	f1bc 0f01 	cmp.w	ip, #1
   1724e:	d00e      	beq.n	1726e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   17250:	7858      	ldrb	r0, [r3, #1]
   17252:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   17256:	2880      	cmp	r0, #128	; 0x80
   17258:	bf08      	it	eq
   1725a:	3101      	addeq	r1, #1
   1725c:	f1bc 0f02 	cmp.w	ip, #2
   17260:	d005      	beq.n	1726e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   17262:	7898      	ldrb	r0, [r3, #2]
   17264:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   17268:	2880      	cmp	r0, #128	; 0x80
   1726a:	bf08      	it	eq
   1726c:	3101      	addeq	r1, #1
   1726e:	eb09 000a 	add.w	r0, r9, sl
   17272:	eba0 0901 	sub.w	r9, r0, r1
   17276:	68a0      	ldr	r0, [r4, #8]
   17278:	2801      	cmp	r0, #1
   1727a:	d09d      	beq.n	171b8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x68>
   1727c:	4620      	mov	r0, r4
   1727e:	4641      	mov	r1, r8
   17280:	4653      	mov	r3, sl
   17282:	f000 f893 	bl	173ac <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   17286:	b120      	cbz	r0, 17292 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x142>
   17288:	2601      	movs	r6, #1
   1728a:	4630      	mov	r0, r6
   1728c:	b003      	add	sp, #12
   1728e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17292:	69e1      	ldr	r1, [r4, #28]
   17294:	463a      	mov	r2, r7
   17296:	69a0      	ldr	r0, [r4, #24]
   17298:	68cb      	ldr	r3, [r1, #12]
   1729a:	4629      	mov	r1, r5
   1729c:	b003      	add	sp, #12
   1729e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172a2:	4718      	bx	r3
   172a4:	6860      	ldr	r0, [r4, #4]
   172a6:	2601      	movs	r6, #1
   172a8:	9002      	str	r0, [sp, #8]
   172aa:	2030      	movs	r0, #48	; 0x30
   172ac:	f894 1020 	ldrb.w	r1, [r4, #32]
   172b0:	4653      	mov	r3, sl
   172b2:	6060      	str	r0, [r4, #4]
   172b4:	4620      	mov	r0, r4
   172b6:	9101      	str	r1, [sp, #4]
   172b8:	4641      	mov	r1, r8
   172ba:	f884 6020 	strb.w	r6, [r4, #32]
   172be:	f000 f875 	bl	173ac <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   172c2:	2800      	cmp	r0, #0
   172c4:	d1e1      	bne.n	1728a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   172c6:	f894 2020 	ldrb.w	r2, [r4, #32]
   172ca:	ebab 0109 	sub.w	r1, fp, r9
   172ce:	2000      	movs	r0, #0
   172d0:	46a9      	mov	r9, r5
   172d2:	2a03      	cmp	r2, #3
   172d4:	bf08      	it	eq
   172d6:	2201      	moveq	r2, #1
   172d8:	460e      	mov	r6, r1
   172da:	e8df f002 	tbb	[pc, r2]
   172de:	0235      	.short	0x0235
   172e0:	0232      	.short	0x0232
   172e2:	2600      	movs	r6, #0
   172e4:	4608      	mov	r0, r1
   172e6:	e02f      	b.n	17348 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1f8>
   172e8:	0848      	lsrs	r0, r1, #1
   172ea:	3101      	adds	r1, #1
   172ec:	084e      	lsrs	r6, r1, #1
   172ee:	1c45      	adds	r5, r0, #1
   172f0:	3d01      	subs	r5, #1
   172f2:	d007      	beq.n	17304 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1b4>
   172f4:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   172f8:	6861      	ldr	r1, [r4, #4]
   172fa:	6912      	ldr	r2, [r2, #16]
   172fc:	4790      	blx	r2
   172fe:	2800      	cmp	r0, #0
   17300:	d0f6      	beq.n	172f0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1a0>
   17302:	e7c1      	b.n	17288 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   17304:	9a02      	ldr	r2, [sp, #8]
   17306:	4620      	mov	r0, r4
   17308:	4641      	mov	r1, r8
   1730a:	4653      	mov	r3, sl
   1730c:	f8d4 b004 	ldr.w	fp, [r4, #4]
   17310:	f000 f84c 	bl	173ac <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   17314:	2800      	cmp	r0, #0
   17316:	d1b7      	bne.n	17288 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   17318:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   1731c:	463a      	mov	r2, r7
   1731e:	68cb      	ldr	r3, [r1, #12]
   17320:	4649      	mov	r1, r9
   17322:	4798      	blx	r3
   17324:	2800      	cmp	r0, #0
   17326:	d1af      	bne.n	17288 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   17328:	e9d4 5406 	ldrd	r5, r4, [r4, #24]
   1732c:	1c77      	adds	r7, r6, #1
   1732e:	2601      	movs	r6, #1
   17330:	3f01      	subs	r7, #1
   17332:	d02c      	beq.n	1738e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x23e>
   17334:	6922      	ldr	r2, [r4, #16]
   17336:	4628      	mov	r0, r5
   17338:	4659      	mov	r1, fp
   1733a:	4790      	blx	r2
   1733c:	2800      	cmp	r0, #0
   1733e:	d0f7      	beq.n	17330 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1e0>
   17340:	e7a3      	b.n	1728a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   17342:	0848      	lsrs	r0, r1, #1
   17344:	3101      	adds	r1, #1
   17346:	084e      	lsrs	r6, r1, #1
   17348:	1c45      	adds	r5, r0, #1
   1734a:	3d01      	subs	r5, #1
   1734c:	d007      	beq.n	1735e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x20e>
   1734e:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   17352:	6861      	ldr	r1, [r4, #4]
   17354:	6912      	ldr	r2, [r2, #16]
   17356:	4790      	blx	r2
   17358:	2800      	cmp	r0, #0
   1735a:	d0f6      	beq.n	1734a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1fa>
   1735c:	e794      	b.n	17288 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   1735e:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   17362:	463a      	mov	r2, r7
   17364:	68cb      	ldr	r3, [r1, #12]
   17366:	4649      	mov	r1, r9
   17368:	f8d4 8004 	ldr.w	r8, [r4, #4]
   1736c:	4798      	blx	r3
   1736e:	2800      	cmp	r0, #0
   17370:	f47f af8a 	bne.w	17288 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   17374:	e9d4 9506 	ldrd	r9, r5, [r4, #24]
   17378:	1c77      	adds	r7, r6, #1
   1737a:	2601      	movs	r6, #1
   1737c:	3f01      	subs	r7, #1
   1737e:	d00b      	beq.n	17398 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x248>
   17380:	692a      	ldr	r2, [r5, #16]
   17382:	4648      	mov	r0, r9
   17384:	4641      	mov	r1, r8
   17386:	4790      	blx	r2
   17388:	2800      	cmp	r0, #0
   1738a:	d0f7      	beq.n	1737c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x22c>
   1738c:	e77d      	b.n	1728a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   1738e:	2600      	movs	r6, #0
   17390:	4630      	mov	r0, r6
   17392:	b003      	add	sp, #12
   17394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17398:	9801      	ldr	r0, [sp, #4]
   1739a:	2600      	movs	r6, #0
   1739c:	f884 0020 	strb.w	r0, [r4, #32]
   173a0:	9802      	ldr	r0, [sp, #8]
   173a2:	6060      	str	r0, [r4, #4]
   173a4:	4630      	mov	r0, r6
   173a6:	b003      	add	sp, #12
   173a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000173ac <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>:
   173ac:	b570      	push	{r4, r5, r6, lr}
   173ae:	461c      	mov	r4, r3
   173b0:	4615      	mov	r5, r2
   173b2:	4606      	mov	r6, r0
   173b4:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
   173b8:	d006      	beq.n	173c8 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   173ba:	e9d6 0206 	ldrd	r0, r2, [r6, #24]
   173be:	6912      	ldr	r2, [r2, #16]
   173c0:	4790      	blx	r2
   173c2:	b108      	cbz	r0, 173c8 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   173c4:	2001      	movs	r0, #1
   173c6:	bd70      	pop	{r4, r5, r6, pc}
   173c8:	b13d      	cbz	r5, 173da <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x2e>
   173ca:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
   173ce:	4622      	mov	r2, r4
   173d0:	68cb      	ldr	r3, [r1, #12]
   173d2:	4629      	mov	r1, r5
   173d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   173d8:	4718      	bx	r3
   173da:	2000      	movs	r0, #0
   173dc:	bd70      	pop	{r4, r5, r6, pc}
	...

000173e0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>:
   173e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173e4:	b081      	sub	sp, #4
   173e6:	f8d0 e008 	ldr.w	lr, [r0, #8]
   173ea:	4682      	mov	sl, r0
   173ec:	6900      	ldr	r0, [r0, #16]
   173ee:	4691      	mov	r9, r2
   173f0:	4688      	mov	r8, r1
   173f2:	f1be 0f01 	cmp.w	lr, #1
   173f6:	d111      	bne.n	1741c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x3c>
   173f8:	2801      	cmp	r0, #1
   173fa:	d012      	beq.n	17422 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x42>
   173fc:	f1b9 0f00 	cmp.w	r9, #0
   17400:	f000 80c5 	beq.w	1758e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1ae>
   17404:	f1a9 0101 	sub.w	r1, r9, #1
   17408:	f009 0003 	and.w	r0, r9, #3
   1740c:	2903      	cmp	r1, #3
   1740e:	d267      	bcs.n	174e0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x100>
   17410:	2100      	movs	r1, #0
   17412:	4642      	mov	r2, r8
   17414:	2800      	cmp	r0, #0
   17416:	f040 8083 	bne.w	17520 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x140>
   1741a:	e097      	b.n	1754c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   1741c:	2801      	cmp	r0, #1
   1741e:	f040 80bd 	bne.w	1759c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   17422:	f1b9 0f00 	cmp.w	r9, #0
   17426:	d054      	beq.n	174d2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xf2>
   17428:	f8da 0014 	ldr.w	r0, [sl, #20]
   1742c:	eb08 0109 	add.w	r1, r8, r9
   17430:	2200      	movs	r2, #0
   17432:	4647      	mov	r7, r8
   17434:	1c43      	adds	r3, r0, #1
   17436:	4646      	mov	r6, r8
   17438:	463c      	mov	r4, r7
   1743a:	f914 5b01 	ldrsb.w	r5, [r4], #1
   1743e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   17442:	b2e8      	uxtb	r0, r5
   17444:	dc2e      	bgt.n	174a4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   17446:	428c      	cmp	r4, r1
   17448:	d01a      	beq.n	17480 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xa0>
   1744a:	787d      	ldrb	r5, [r7, #1]
   1744c:	1cbc      	adds	r4, r7, #2
   1744e:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   17452:	4627      	mov	r7, r4
   17454:	f000 0b1f 	and.w	fp, r0, #31
   17458:	28df      	cmp	r0, #223	; 0xdf
   1745a:	d917      	bls.n	1748c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xac>
   1745c:	428f      	cmp	r7, r1
   1745e:	d018      	beq.n	17492 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xb2>
   17460:	f817 4b01 	ldrb.w	r4, [r7], #1
   17464:	f004 0c3f 	and.w	ip, r4, #63	; 0x3f
   17468:	463c      	mov	r4, r7
   1746a:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   1746e:	28f0      	cmp	r0, #240	; 0xf0
   17470:	d316      	bcc.n	174a0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc0>
   17472:	428f      	cmp	r7, r1
   17474:	d020      	beq.n	174b8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xd8>
   17476:	f817 0b01 	ldrb.w	r0, [r7], #1
   1747a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1747e:	e01d      	b.n	174bc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xdc>
   17480:	2500      	movs	r5, #0
   17482:	460f      	mov	r7, r1
   17484:	f000 0b1f 	and.w	fp, r0, #31
   17488:	28df      	cmp	r0, #223	; 0xdf
   1748a:	d8e7      	bhi.n	1745c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x7c>
   1748c:	ea45 108b 	orr.w	r0, r5, fp, lsl #6
   17490:	e008      	b.n	174a4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   17492:	f04f 0c00 	mov.w	ip, #0
   17496:	460f      	mov	r7, r1
   17498:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   1749c:	28f0      	cmp	r0, #240	; 0xf0
   1749e:	d2e8      	bcs.n	17472 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x92>
   174a0:	ea45 300b 	orr.w	r0, r5, fp, lsl #12
   174a4:	4627      	mov	r7, r4
   174a6:	3b01      	subs	r3, #1
   174a8:	d065      	beq.n	17576 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x196>
   174aa:	1b90      	subs	r0, r2, r6
   174ac:	42b9      	cmp	r1, r7
   174ae:	eb00 0207 	add.w	r2, r0, r7
   174b2:	463e      	mov	r6, r7
   174b4:	d1c0      	bne.n	17438 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x58>
   174b6:	e061      	b.n	1757c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   174b8:	2000      	movs	r0, #0
   174ba:	4627      	mov	r7, r4
   174bc:	f44f 14e0 	mov.w	r4, #1835008	; 0x1c0000
   174c0:	ea04 448b 	and.w	r4, r4, fp, lsl #18
   174c4:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   174c8:	4428      	add	r0, r5
   174ca:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   174ce:	d1ea      	bne.n	174a6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc6>
   174d0:	e054      	b.n	1757c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   174d2:	2200      	movs	r2, #0
   174d4:	f1be 0f01 	cmp.w	lr, #1
   174d8:	d054      	beq.n	17584 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   174da:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   174de:	e062      	b.n	175a6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1c6>
   174e0:	eba0 0309 	sub.w	r3, r0, r9
   174e4:	2100      	movs	r1, #0
   174e6:	4642      	mov	r2, r8
   174e8:	7817      	ldrb	r7, [r2, #0]
   174ea:	7856      	ldrb	r6, [r2, #1]
   174ec:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
   174f0:	7895      	ldrb	r5, [r2, #2]
   174f2:	78d4      	ldrb	r4, [r2, #3]
   174f4:	2f80      	cmp	r7, #128	; 0x80
   174f6:	f006 07c0 	and.w	r7, r6, #192	; 0xc0
   174fa:	bf08      	it	eq
   174fc:	3101      	addeq	r1, #1
   174fe:	2f80      	cmp	r7, #128	; 0x80
   17500:	f005 07c0 	and.w	r7, r5, #192	; 0xc0
   17504:	bf08      	it	eq
   17506:	3101      	addeq	r1, #1
   17508:	2f80      	cmp	r7, #128	; 0x80
   1750a:	f004 07c0 	and.w	r7, r4, #192	; 0xc0
   1750e:	bf08      	it	eq
   17510:	3101      	addeq	r1, #1
   17512:	2f80      	cmp	r7, #128	; 0x80
   17514:	bf08      	it	eq
   17516:	3101      	addeq	r1, #1
   17518:	3204      	adds	r2, #4
   1751a:	3304      	adds	r3, #4
   1751c:	d1e4      	bne.n	174e8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x108>
   1751e:	b1a8      	cbz	r0, 1754c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   17520:	7813      	ldrb	r3, [r2, #0]
   17522:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   17526:	2b80      	cmp	r3, #128	; 0x80
   17528:	bf08      	it	eq
   1752a:	3101      	addeq	r1, #1
   1752c:	2801      	cmp	r0, #1
   1752e:	d00d      	beq.n	1754c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   17530:	7853      	ldrb	r3, [r2, #1]
   17532:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   17536:	2b80      	cmp	r3, #128	; 0x80
   17538:	bf08      	it	eq
   1753a:	3101      	addeq	r1, #1
   1753c:	2802      	cmp	r0, #2
   1753e:	d005      	beq.n	1754c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   17540:	7890      	ldrb	r0, [r2, #2]
   17542:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   17546:	2880      	cmp	r0, #128	; 0x80
   17548:	bf08      	it	eq
   1754a:	3101      	addeq	r1, #1
   1754c:	f8da 000c 	ldr.w	r0, [sl, #12]
   17550:	eba9 0101 	sub.w	r1, r9, r1
   17554:	4281      	cmp	r1, r0
   17556:	d221      	bcs.n	1759c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   17558:	f1b9 0f00 	cmp.w	r9, #0
   1755c:	d029      	beq.n	175b2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d2>
   1755e:	f1a9 0101 	sub.w	r1, r9, #1
   17562:	f009 0c03 	and.w	ip, r9, #3
   17566:	2903      	cmp	r1, #3
   17568:	d225      	bcs.n	175b6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d6>
   1756a:	2100      	movs	r1, #0
   1756c:	4643      	mov	r3, r8
   1756e:	f1bc 0f00 	cmp.w	ip, #0
   17572:	d142      	bne.n	175fa <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x21a>
   17574:	e059      	b.n	1762a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   17576:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   1757a:	d167      	bne.n	1764c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x26c>
   1757c:	464a      	mov	r2, r9
   1757e:	f1be 0f01 	cmp.w	lr, #1
   17582:	d1aa      	bne.n	174da <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   17584:	4691      	mov	r9, r2
   17586:	f1b9 0f00 	cmp.w	r9, #0
   1758a:	f47f af3b 	bne.w	17404 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24>
   1758e:	2100      	movs	r1, #0
   17590:	f8da 000c 	ldr.w	r0, [sl, #12]
   17594:	eba9 0101 	sub.w	r1, r9, r1
   17598:	4281      	cmp	r1, r0
   1759a:	d3dd      	bcc.n	17558 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x178>
   1759c:	f8da 101c 	ldr.w	r1, [sl, #28]
   175a0:	464a      	mov	r2, r9
   175a2:	f8da 0018 	ldr.w	r0, [sl, #24]
   175a6:	68cb      	ldr	r3, [r1, #12]
   175a8:	4641      	mov	r1, r8
   175aa:	b001      	add	sp, #4
   175ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   175b0:	4718      	bx	r3
   175b2:	2100      	movs	r1, #0
   175b4:	e039      	b.n	1762a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   175b6:	ebac 0709 	sub.w	r7, ip, r9
   175ba:	2100      	movs	r1, #0
   175bc:	4643      	mov	r3, r8
   175be:	781e      	ldrb	r6, [r3, #0]
   175c0:	785d      	ldrb	r5, [r3, #1]
   175c2:	f006 06c0 	and.w	r6, r6, #192	; 0xc0
   175c6:	789c      	ldrb	r4, [r3, #2]
   175c8:	78da      	ldrb	r2, [r3, #3]
   175ca:	2e80      	cmp	r6, #128	; 0x80
   175cc:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
   175d0:	bf08      	it	eq
   175d2:	3101      	addeq	r1, #1
   175d4:	2e80      	cmp	r6, #128	; 0x80
   175d6:	f004 06c0 	and.w	r6, r4, #192	; 0xc0
   175da:	bf08      	it	eq
   175dc:	3101      	addeq	r1, #1
   175de:	2e80      	cmp	r6, #128	; 0x80
   175e0:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   175e4:	bf08      	it	eq
   175e6:	3101      	addeq	r1, #1
   175e8:	2a80      	cmp	r2, #128	; 0x80
   175ea:	bf08      	it	eq
   175ec:	3101      	addeq	r1, #1
   175ee:	3304      	adds	r3, #4
   175f0:	3704      	adds	r7, #4
   175f2:	d1e4      	bne.n	175be <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1de>
   175f4:	f1bc 0f00 	cmp.w	ip, #0
   175f8:	d017      	beq.n	1762a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   175fa:	781a      	ldrb	r2, [r3, #0]
   175fc:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   17600:	2a80      	cmp	r2, #128	; 0x80
   17602:	bf08      	it	eq
   17604:	3101      	addeq	r1, #1
   17606:	f1bc 0f01 	cmp.w	ip, #1
   1760a:	d00e      	beq.n	1762a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   1760c:	785a      	ldrb	r2, [r3, #1]
   1760e:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   17612:	2a80      	cmp	r2, #128	; 0x80
   17614:	bf08      	it	eq
   17616:	3101      	addeq	r1, #1
   17618:	f1bc 0f02 	cmp.w	ip, #2
   1761c:	d005      	beq.n	1762a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   1761e:	789a      	ldrb	r2, [r3, #2]
   17620:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   17624:	2a80      	cmp	r2, #128	; 0x80
   17626:	bf08      	it	eq
   17628:	3101      	addeq	r1, #1
   1762a:	f89a 3020 	ldrb.w	r3, [sl, #32]
   1762e:	eba1 0109 	sub.w	r1, r1, r9
   17632:	4401      	add	r1, r0
   17634:	2000      	movs	r0, #0
   17636:	1eda      	subs	r2, r3, #3
   17638:	bf18      	it	ne
   1763a:	461a      	movne	r2, r3
   1763c:	460e      	mov	r6, r1
   1763e:	e8df f002 	tbb	[pc, r2]
   17642:	0216      	.short	0x0216
   17644:	0213      	.short	0x0213
   17646:	2600      	movs	r6, #0
   17648:	4608      	mov	r0, r1
   1764a:	e010      	b.n	1766e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x28e>
   1764c:	2a00      	cmp	r2, #0
   1764e:	bf18      	it	ne
   17650:	454a      	cmpne	r2, r9
   17652:	d134      	bne.n	176be <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2de>
   17654:	4640      	mov	r0, r8
   17656:	2800      	cmp	r0, #0
   17658:	bf0c      	ite	eq
   1765a:	464a      	moveq	r2, r9
   1765c:	4680      	movne	r8, r0
   1765e:	f1be 0f01 	cmp.w	lr, #1
   17662:	f43f af8f 	beq.w	17584 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   17666:	e738      	b.n	174da <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   17668:	0848      	lsrs	r0, r1, #1
   1766a:	3101      	adds	r1, #1
   1766c:	084e      	lsrs	r6, r1, #1
   1766e:	1c44      	adds	r4, r0, #1
   17670:	3c01      	subs	r4, #1
   17672:	d008      	beq.n	17686 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2a6>
   17674:	e9da 0206 	ldrd	r0, r2, [sl, #24]
   17678:	f8da 1004 	ldr.w	r1, [sl, #4]
   1767c:	6912      	ldr	r2, [r2, #16]
   1767e:	4790      	blx	r2
   17680:	2800      	cmp	r0, #0
   17682:	d0f5      	beq.n	17670 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x290>
   17684:	e013      	b.n	176ae <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   17686:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   1768a:	464a      	mov	r2, r9
   1768c:	68cb      	ldr	r3, [r1, #12]
   1768e:	4641      	mov	r1, r8
   17690:	f8da 7004 	ldr.w	r7, [sl, #4]
   17694:	4798      	blx	r3
   17696:	b950      	cbnz	r0, 176ae <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   17698:	e9da 4506 	ldrd	r4, r5, [sl, #24]
   1769c:	3601      	adds	r6, #1
   1769e:	3e01      	subs	r6, #1
   176a0:	d009      	beq.n	176b6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2d6>
   176a2:	692a      	ldr	r2, [r5, #16]
   176a4:	4620      	mov	r0, r4
   176a6:	4639      	mov	r1, r7
   176a8:	4790      	blx	r2
   176aa:	2800      	cmp	r0, #0
   176ac:	d0f7      	beq.n	1769e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2be>
   176ae:	2001      	movs	r0, #1
   176b0:	b001      	add	sp, #4
   176b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176b6:	2000      	movs	r0, #0
   176b8:	b001      	add	sp, #4
   176ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176be:	454a      	cmp	r2, r9
   176c0:	d204      	bcs.n	176cc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ec>
   176c2:	f918 0002 	ldrsb.w	r0, [r8, r2]
   176c6:	f110 0f40 	cmn.w	r0, #64	; 0x40
   176ca:	dac3      	bge.n	17654 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x274>
   176cc:	2000      	movs	r0, #0
   176ce:	2200      	movs	r2, #0
   176d0:	2800      	cmp	r0, #0
   176d2:	bf0c      	ite	eq
   176d4:	464a      	moveq	r2, r9
   176d6:	4680      	movne	r8, r0
   176d8:	f1be 0f01 	cmp.w	lr, #1
   176dc:	f43f af52 	beq.w	17584 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   176e0:	e6fb      	b.n	174da <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>

000176e2 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>:
   176e2:	7800      	ldrb	r0, [r0, #0]
   176e4:	f3c0 1000 	ubfx	r0, r0, #4, #1
   176e8:	4770      	bx	lr

000176ea <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>:
   176ea:	7800      	ldrb	r0, [r0, #0]
   176ec:	f3c0 1040 	ubfx	r0, r0, #5, #1
   176f0:	4770      	bx	lr

000176f2 <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>:
   176f2:	b570      	push	{r4, r5, r6, lr}
   176f4:	460d      	mov	r5, r1
   176f6:	4606      	mov	r6, r0
   176f8:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   176fc:	461c      	mov	r4, r3
   176fe:	68cb      	ldr	r3, [r1, #12]
   17700:	4611      	mov	r1, r2
   17702:	4622      	mov	r2, r4
   17704:	4798      	blx	r3
   17706:	7230      	strb	r0, [r6, #8]
   17708:	fab4 f084 	clz	r0, r4
   1770c:	0940      	lsrs	r0, r0, #5
   1770e:	7270      	strb	r0, [r6, #9]
   17710:	2000      	movs	r0, #0
   17712:	e9c6 5000 	strd	r5, r0, [r6]
   17716:	bd70      	pop	{r4, r5, r6, pc}

00017718 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E>:
   17718:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1771c:	b085      	sub	sp, #20
   1771e:	460c      	mov	r4, r1
   17720:	4605      	mov	r5, r0
   17722:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   17726:	690a      	ldr	r2, [r1, #16]
   17728:	2127      	movs	r1, #39	; 0x27
   1772a:	4790      	blx	r2
   1772c:	b118      	cbz	r0, 17736 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x1e>
   1772e:	2001      	movs	r0, #1
   17730:	b005      	add	sp, #20
   17732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17736:	6829      	ldr	r1, [r5, #0]
   17738:	a801      	add	r0, sp, #4
   1773a:	2201      	movs	r2, #1
   1773c:	f7ff f85c 	bl	167f8 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>
   17740:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   17744:	f04f 091c 	mov.w	r9, #28
   17748:	f8dd 800c 	ldr.w	r8, [sp, #12]
   1774c:	f5b5 1f88 	cmp.w	r5, #1114112	; 0x110000
   17750:	f89d 6010 	ldrb.w	r6, [sp, #16]
   17754:	d139      	bne.n	177ca <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xb2>
   17756:	f44f 1588 	mov.w	r5, #1114112	; 0x110000
   1775a:	2f02      	cmp	r7, #2
   1775c:	f0c0 806b 	bcc.w	17836 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x11e>
   17760:	d00c      	beq.n	1777c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x64>
   17762:	b2f0      	uxtb	r0, r6
   17764:	2604      	movs	r6, #4
   17766:	2703      	movs	r7, #3
   17768:	215c      	movs	r1, #92	; 0x5c
   1776a:	e8df f000 	tbb	[pc, r0]
   1776e:	0364      	.short	0x0364
   17770:	09242010 	.word	0x09242010
   17774:	2600      	movs	r6, #0
   17776:	2703      	movs	r7, #3
   17778:	217d      	movs	r1, #125	; 0x7d
   1777a:	e001      	b.n	17780 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   1777c:	2701      	movs	r7, #1
   1777e:	215c      	movs	r1, #92	; 0x5c
   17780:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   17784:	6912      	ldr	r2, [r2, #16]
   17786:	4790      	blx	r2
   17788:	2800      	cmp	r0, #0
   1778a:	d0e6      	beq.n	1775a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x42>
   1778c:	e7cf      	b.n	1772e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   1778e:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   17792:	2602      	movs	r6, #2
   17794:	2703      	movs	r7, #3
   17796:	f1b8 0f00 	cmp.w	r8, #0
   1779a:	fa25 f100 	lsr.w	r1, r5, r0
   1779e:	bf08      	it	eq
   177a0:	2601      	moveq	r6, #1
   177a2:	bf18      	it	ne
   177a4:	f1a8 0801 	subne.w	r8, r8, #1
   177a8:	f367 111f 	bfi	r1, r7, #4, #28
   177ac:	e7e8      	b.n	17780 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   177ae:	2602      	movs	r6, #2
   177b0:	2703      	movs	r7, #3
   177b2:	217b      	movs	r1, #123	; 0x7b
   177b4:	e7e4      	b.n	17780 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   177b6:	2703      	movs	r7, #3
   177b8:	2175      	movs	r1, #117	; 0x75
   177ba:	2603      	movs	r6, #3
   177bc:	e7e0      	b.n	17780 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   177be:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   177c2:	6912      	ldr	r2, [r2, #16]
   177c4:	4790      	blx	r2
   177c6:	2800      	cmp	r0, #0
   177c8:	d1b1      	bne.n	1772e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   177ca:	4638      	mov	r0, r7
   177cc:	2701      	movs	r7, #1
   177ce:	215c      	movs	r1, #92	; 0x5c
   177d0:	e8df f000 	tbb	[pc, r0]
   177d4:	06020331 	.word	0x06020331
   177d8:	e7f1      	b.n	177be <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   177da:	2700      	movs	r7, #0
   177dc:	4629      	mov	r1, r5
   177de:	e7ee      	b.n	177be <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   177e0:	b2f0      	uxtb	r0, r6
   177e2:	2604      	movs	r6, #4
   177e4:	2703      	movs	r7, #3
   177e6:	215c      	movs	r1, #92	; 0x5c
   177e8:	e8df f000 	tbb	[pc, r0]
   177ec:	1d080425 	.word	0x1d080425
   177f0:	0321      	.short	0x0321
   177f2:	e7e4      	b.n	177be <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   177f4:	2600      	movs	r6, #0
   177f6:	2703      	movs	r7, #3
   177f8:	217d      	movs	r1, #125	; 0x7d
   177fa:	e7e0      	b.n	177be <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   177fc:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   17800:	2602      	movs	r6, #2
   17802:	2703      	movs	r7, #3
   17804:	fa25 f000 	lsr.w	r0, r5, r0
   17808:	f000 000f 	and.w	r0, r0, #15
   1780c:	f100 0157 	add.w	r1, r0, #87	; 0x57
   17810:	280a      	cmp	r0, #10
   17812:	bf38      	it	cc
   17814:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   17818:	f1b8 0f00 	cmp.w	r8, #0
   1781c:	bf0c      	ite	eq
   1781e:	2601      	moveq	r6, #1
   17820:	f1a8 0801 	subne.w	r8, r8, #1
   17824:	e7cb      	b.n	177be <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   17826:	2602      	movs	r6, #2
   17828:	2703      	movs	r7, #3
   1782a:	217b      	movs	r1, #123	; 0x7b
   1782c:	e7c7      	b.n	177be <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   1782e:	2703      	movs	r7, #3
   17830:	2175      	movs	r1, #117	; 0x75
   17832:	2603      	movs	r6, #3
   17834:	e7c3      	b.n	177be <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   17836:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   1783a:	690a      	ldr	r2, [r1, #16]
   1783c:	2127      	movs	r1, #39	; 0x27
   1783e:	b005      	add	sp, #20
   17840:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17844:	4710      	bx	r2

00017846 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>:
   17846:	b08c      	sub	sp, #48	; 0x30
   17848:	e9cd 0100 	strd	r0, r1, [sp]
   1784c:	2002      	movs	r0, #2
   1784e:	a908      	add	r1, sp, #32
   17850:	9007      	str	r0, [sp, #28]
   17852:	9106      	str	r1, [sp, #24]
   17854:	2100      	movs	r1, #0
   17856:	9105      	str	r1, [sp, #20]
   17858:	e9cd 0103 	strd	r0, r1, [sp, #12]
   1785c:	f64f 70d8 	movw	r0, #65496	; 0xffd8
   17860:	f2c0 0001 	movt	r0, #1
   17864:	a901      	add	r1, sp, #4
   17866:	9002      	str	r0, [sp, #8]
   17868:	f248 7021 	movw	r0, #34593	; 0x8721
   1786c:	f2c0 0001 	movt	r0, #1
   17870:	900b      	str	r0, [sp, #44]	; 0x2c
   17872:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   17876:	4668      	mov	r0, sp
   17878:	f64f 71e8 	movw	r1, #65512	; 0xffe8
   1787c:	9008      	str	r0, [sp, #32]
   1787e:	a802      	add	r0, sp, #8
   17880:	f2c0 0101 	movt	r1, #1
   17884:	f7ff f8c2 	bl	16a0c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   17888:	defe      	udf	#254	; 0xfe

0001788a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>:
   1788a:	b08c      	sub	sp, #48	; 0x30
   1788c:	e9cd 0100 	strd	r0, r1, [sp]
   17890:	2002      	movs	r0, #2
   17892:	a908      	add	r1, sp, #32
   17894:	9007      	str	r0, [sp, #28]
   17896:	9106      	str	r1, [sp, #24]
   17898:	2100      	movs	r1, #0
   1789a:	9105      	str	r1, [sp, #20]
   1789c:	e9cd 0103 	strd	r0, r1, [sp, #12]
   178a0:	f240 001c 	movw	r0, #28
   178a4:	f2c0 0002 	movt	r0, #2
   178a8:	a901      	add	r1, sp, #4
   178aa:	9002      	str	r0, [sp, #8]
   178ac:	f248 7021 	movw	r0, #34593	; 0x8721
   178b0:	f2c0 0001 	movt	r0, #1
   178b4:	900b      	str	r0, [sp, #44]	; 0x2c
   178b6:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   178ba:	4668      	mov	r0, sp
   178bc:	f240 012c 	movw	r1, #44	; 0x2c
   178c0:	9008      	str	r0, [sp, #32]
   178c2:	a802      	add	r0, sp, #8
   178c4:	f2c0 0102 	movt	r1, #2
   178c8:	f7ff f8a0 	bl	16a0c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   178cc:	defe      	udf	#254	; 0xfe

000178ce <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>:
   178ce:	b09a      	sub	sp, #104	; 0x68
   178d0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   178d4:	e9cd 2300 	strd	r2, r3, [sp]
   178d8:	d802      	bhi.n	178e0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12>
   178da:	2501      	movs	r5, #1
   178dc:	468c      	mov	ip, r1
   178de:	e03e      	b.n	1795e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   178e0:	f1c1 0e00 	rsb	lr, r1, #0
   178e4:	f44f 7c80 	mov.w	ip, #256	; 0x100
   178e8:	458c      	cmp	ip, r1
   178ea:	d205      	bcs.n	178f8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2a>
   178ec:	f910 400c 	ldrsb.w	r4, [r0, ip]
   178f0:	f114 0f41 	cmn.w	r4, #65	; 0x41
   178f4:	f300 8108 	bgt.w	17b08 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23a>
   178f8:	eb0e 040c 	add.w	r4, lr, ip
   178fc:	f1ac 0601 	sub.w	r6, ip, #1
   17900:	2c01      	cmp	r4, #1
   17902:	d02a      	beq.n	1795a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   17904:	428e      	cmp	r6, r1
   17906:	d206      	bcs.n	17916 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x48>
   17908:	eb00 050c 	add.w	r5, r0, ip
   1790c:	f915 5c01 	ldrsb.w	r5, [r5, #-1]
   17910:	f115 0f41 	cmn.w	r5, #65	; 0x41
   17914:	dc21      	bgt.n	1795a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   17916:	f1ac 0602 	sub.w	r6, ip, #2
   1791a:	2c02      	cmp	r4, #2
   1791c:	d01d      	beq.n	1795a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   1791e:	428e      	cmp	r6, r1
   17920:	d206      	bcs.n	17930 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x62>
   17922:	eb00 050c 	add.w	r5, r0, ip
   17926:	f915 5c02 	ldrsb.w	r5, [r5, #-2]
   1792a:	f115 0f41 	cmn.w	r5, #65	; 0x41
   1792e:	dc14      	bgt.n	1795a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   17930:	f1ac 0603 	sub.w	r6, ip, #3
   17934:	2c03      	cmp	r4, #3
   17936:	d010      	beq.n	1795a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   17938:	428e      	cmp	r6, r1
   1793a:	d206      	bcs.n	1794a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x7c>
   1793c:	eb00 050c 	add.w	r5, r0, ip
   17940:	f915 5c03 	ldrsb.w	r5, [r5, #-3]
   17944:	f115 0f41 	cmn.w	r5, #65	; 0x41
   17948:	dc07      	bgt.n	1795a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   1794a:	f1bc 0c04 	subs.w	ip, ip, #4
   1794e:	f04f 0500 	mov.w	r5, #0
   17952:	d004      	beq.n	1795e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   17954:	2c04      	cmp	r4, #4
   17956:	d1c7      	bne.n	178e8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1a>
   17958:	e001      	b.n	1795e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   1795a:	2500      	movs	r5, #0
   1795c:	46b4      	mov	ip, r6
   1795e:	2605      	movs	r6, #5
   17960:	2d00      	cmp	r5, #0
   17962:	f240 05fa 	movw	r5, #250	; 0xfa
   17966:	e9cd 0c02 	strd	r0, ip, [sp, #8]
   1796a:	bf18      	it	ne
   1796c:	2600      	movne	r6, #0
   1796e:	9605      	str	r6, [sp, #20]
   17970:	f64f 4644 	movw	r6, #64580	; 0xfc44
   17974:	f2c0 0502 	movt	r5, #2
   17978:	f2c0 0601 	movt	r6, #1
   1797c:	bf18      	it	ne
   1797e:	4635      	movne	r5, r6
   17980:	428a      	cmp	r2, r1
   17982:	9504      	str	r5, [sp, #16]
   17984:	bf98      	it	ls
   17986:	428b      	cmpls	r3, r1
   17988:	d92a      	bls.n	179e0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x112>
   1798a:	428a      	cmp	r2, r1
   1798c:	f04f 0003 	mov.w	r0, #3
   17990:	a910      	add	r1, sp, #64	; 0x40
   17992:	bf88      	it	hi
   17994:	4613      	movhi	r3, r2
   17996:	900f      	str	r0, [sp, #60]	; 0x3c
   17998:	910e      	str	r1, [sp, #56]	; 0x38
   1799a:	2100      	movs	r1, #0
   1799c:	910d      	str	r1, [sp, #52]	; 0x34
   1799e:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   179a2:	f240 1020 	movw	r0, #288	; 0x120
   179a6:	f2c0 0002 	movt	r0, #2
   179aa:	a904      	add	r1, sp, #16
   179ac:	900a      	str	r0, [sp, #40]	; 0x28
   179ae:	f648 000f 	movw	r0, #34831	; 0x880f
   179b2:	f2c0 0001 	movt	r0, #1
   179b6:	9308      	str	r3, [sp, #32]
   179b8:	9015      	str	r0, [sp, #84]	; 0x54
   179ba:	e9cd 0113 	strd	r0, r1, [sp, #76]	; 0x4c
   179be:	a802      	add	r0, sp, #8
   179c0:	f240 1138 	movw	r1, #312	; 0x138
   179c4:	9012      	str	r0, [sp, #72]	; 0x48
   179c6:	f248 7021 	movw	r0, #34593	; 0x8721
   179ca:	f2c0 0102 	movt	r1, #2
   179ce:	f2c0 0001 	movt	r0, #1
   179d2:	9011      	str	r0, [sp, #68]	; 0x44
   179d4:	a808      	add	r0, sp, #32
   179d6:	9010      	str	r0, [sp, #64]	; 0x40
   179d8:	a80a      	add	r0, sp, #40	; 0x28
   179da:	f7ff f817 	bl	16a0c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   179de:	defe      	udf	#254	; 0xfe
   179e0:	429a      	cmp	r2, r3
   179e2:	f200 80f1 	bhi.w	17bc8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2fa>
   179e6:	2a00      	cmp	r2, #0
   179e8:	bf18      	it	ne
   179ea:	4291      	cmpne	r1, r2
   179ec:	d109      	bne.n	17a02 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x134>
   179ee:	461a      	mov	r2, r3
   179f0:	2a00      	cmp	r2, #0
   179f2:	9206      	str	r2, [sp, #24]
   179f4:	bf18      	it	ne
   179f6:	428a      	cmpne	r2, r1
   179f8:	d10e      	bne.n	17a18 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x14a>
   179fa:	4613      	mov	r3, r2
   179fc:	428b      	cmp	r3, r1
   179fe:	d047      	beq.n	17a90 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   17a00:	e052      	b.n	17aa8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   17a02:	d9f5      	bls.n	179f0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x122>
   17a04:	5686      	ldrsb	r6, [r0, r2]
   17a06:	f116 0f40 	cmn.w	r6, #64	; 0x40
   17a0a:	bfa8      	it	ge
   17a0c:	461a      	movge	r2, r3
   17a0e:	2a00      	cmp	r2, #0
   17a10:	9206      	str	r2, [sp, #24]
   17a12:	bf18      	it	ne
   17a14:	428a      	cmpne	r2, r1
   17a16:	d0f0      	beq.n	179fa <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   17a18:	f1a0 0c01 	sub.w	ip, r0, #1
   17a1c:	f101 0e02 	add.w	lr, r1, #2
   17a20:	1ccc      	adds	r4, r1, #3
   17a22:	1c4d      	adds	r5, r1, #1
   17a24:	1d0e      	adds	r6, r1, #4
   17a26:	428a      	cmp	r2, r1
   17a28:	d206      	bcs.n	17a38 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x16a>
   17a2a:	eb0c 0302 	add.w	r3, ip, r2
   17a2e:	f993 3001 	ldrsb.w	r3, [r3, #1]
   17a32:	f113 0f41 	cmn.w	r3, #65	; 0x41
   17a36:	dce0      	bgt.n	179fa <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   17a38:	1e53      	subs	r3, r2, #1
   17a3a:	bf18      	it	ne
   17a3c:	4295      	cmpne	r5, r2
   17a3e:	d025      	beq.n	17a8c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   17a40:	428b      	cmp	r3, r1
   17a42:	d204      	bcs.n	17a4e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x180>
   17a44:	f91c 7002 	ldrsb.w	r7, [ip, r2]
   17a48:	f117 0f41 	cmn.w	r7, #65	; 0x41
   17a4c:	dc1e      	bgt.n	17a8c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   17a4e:	1e93      	subs	r3, r2, #2
   17a50:	bf18      	it	ne
   17a52:	4596      	cmpne	lr, r2
   17a54:	d01a      	beq.n	17a8c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   17a56:	428b      	cmp	r3, r1
   17a58:	d206      	bcs.n	17a68 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x19a>
   17a5a:	eb0c 0702 	add.w	r7, ip, r2
   17a5e:	f917 7c01 	ldrsb.w	r7, [r7, #-1]
   17a62:	f117 0f41 	cmn.w	r7, #65	; 0x41
   17a66:	dc11      	bgt.n	17a8c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   17a68:	1ed3      	subs	r3, r2, #3
   17a6a:	bf18      	it	ne
   17a6c:	4294      	cmpne	r4, r2
   17a6e:	d00d      	beq.n	17a8c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   17a70:	428b      	cmp	r3, r1
   17a72:	d206      	bcs.n	17a82 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1b4>
   17a74:	eb0c 0702 	add.w	r7, ip, r2
   17a78:	f917 7c02 	ldrsb.w	r7, [r7, #-2]
   17a7c:	f117 0f41 	cmn.w	r7, #65	; 0x41
   17a80:	dc04      	bgt.n	17a8c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   17a82:	1f13      	subs	r3, r2, #4
   17a84:	d002      	beq.n	17a8c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   17a86:	4296      	cmp	r6, r2
   17a88:	461a      	mov	r2, r3
   17a8a:	d1cc      	bne.n	17a26 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x158>
   17a8c:	428b      	cmp	r3, r1
   17a8e:	d10b      	bne.n	17aa8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   17a90:	f64f 50e0 	movw	r0, #64992	; 0xfde0
   17a94:	f240 1288 	movw	r2, #392	; 0x188
   17a98:	f2c0 0001 	movt	r0, #1
   17a9c:	f2c0 0202 	movt	r2, #2
   17aa0:	212b      	movs	r1, #43	; 0x2b
   17aa2:	f7fe ff7d 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   17aa6:	defe      	udf	#254	; 0xfe
   17aa8:	18c5      	adds	r5, r0, r3
   17aaa:	462e      	mov	r6, r5
   17aac:	f916 4b01 	ldrsb.w	r4, [r6], #1
   17ab0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   17ab4:	b2e2      	uxtb	r2, r4
   17ab6:	dd02      	ble.n	17abe <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1f0>
   17ab8:	9207      	str	r2, [sp, #28]
   17aba:	2101      	movs	r1, #1
   17abc:	e04d      	b.n	17b5a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   17abe:	4408      	add	r0, r1
   17ac0:	4286      	cmp	r6, r0
   17ac2:	d10b      	bne.n	17adc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x20e>
   17ac4:	2500      	movs	r5, #0
   17ac6:	4606      	mov	r6, r0
   17ac8:	f002 011f 	and.w	r1, r2, #31
   17acc:	2adf      	cmp	r2, #223	; 0xdf
   17ace:	d80d      	bhi.n	17aec <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x21e>
   17ad0:	ea45 1081 	orr.w	r0, r5, r1, lsl #6
   17ad4:	2880      	cmp	r0, #128	; 0x80
   17ad6:	9007      	str	r0, [sp, #28]
   17ad8:	d333      	bcc.n	17b42 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   17ada:	e034      	b.n	17b46 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   17adc:	7869      	ldrb	r1, [r5, #1]
   17ade:	1cae      	adds	r6, r5, #2
   17ae0:	f001 053f 	and.w	r5, r1, #63	; 0x3f
   17ae4:	f002 011f 	and.w	r1, r2, #31
   17ae8:	2adf      	cmp	r2, #223	; 0xdf
   17aea:	d9f1      	bls.n	17ad0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x202>
   17aec:	4286      	cmp	r6, r0
   17aee:	d10d      	bne.n	17b0c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23e>
   17af0:	2400      	movs	r4, #0
   17af2:	4606      	mov	r6, r0
   17af4:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   17af8:	2af0      	cmp	r2, #240	; 0xf0
   17afa:	d20f      	bcs.n	17b1c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x24e>
   17afc:	ea45 3001 	orr.w	r0, r5, r1, lsl #12
   17b00:	2880      	cmp	r0, #128	; 0x80
   17b02:	9007      	str	r0, [sp, #28]
   17b04:	d31d      	bcc.n	17b42 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   17b06:	e01e      	b.n	17b46 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   17b08:	2500      	movs	r5, #0
   17b0a:	e728      	b.n	1795e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   17b0c:	f816 4b01 	ldrb.w	r4, [r6], #1
   17b10:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   17b14:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   17b18:	2af0      	cmp	r2, #240	; 0xf0
   17b1a:	d3ef      	bcc.n	17afc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x22e>
   17b1c:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
   17b20:	ea02 4181 	and.w	r1, r2, r1, lsl #18
   17b24:	4286      	cmp	r6, r0
   17b26:	bf1a      	itte	ne
   17b28:	7830      	ldrbne	r0, [r6, #0]
   17b2a:	f000 003f 	andne.w	r0, r0, #63	; 0x3f
   17b2e:	2000      	moveq	r0, #0
   17b30:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
   17b34:	4408      	add	r0, r1
   17b36:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   17b3a:	d0a9      	beq.n	17a90 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   17b3c:	2880      	cmp	r0, #128	; 0x80
   17b3e:	9007      	str	r0, [sp, #28]
   17b40:	d201      	bcs.n	17b46 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   17b42:	2101      	movs	r1, #1
   17b44:	e009      	b.n	17b5a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   17b46:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   17b4a:	d201      	bcs.n	17b50 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x282>
   17b4c:	2102      	movs	r1, #2
   17b4e:	e004      	b.n	17b5a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   17b50:	2104      	movs	r1, #4
   17b52:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   17b56:	bf38      	it	cc
   17b58:	2103      	movcc	r1, #3
   17b5a:	4419      	add	r1, r3
   17b5c:	aa10      	add	r2, sp, #64	; 0x40
   17b5e:	a808      	add	r0, sp, #32
   17b60:	e9cd 3108 	strd	r3, r1, [sp, #32]
   17b64:	2105      	movs	r1, #5
   17b66:	910f      	str	r1, [sp, #60]	; 0x3c
   17b68:	920e      	str	r2, [sp, #56]	; 0x38
   17b6a:	2200      	movs	r2, #0
   17b6c:	920d      	str	r2, [sp, #52]	; 0x34
   17b6e:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
   17b72:	f240 11c4 	movw	r1, #452	; 0x1c4
   17b76:	f2c0 0102 	movt	r1, #2
   17b7a:	aa04      	add	r2, sp, #16
   17b7c:	910a      	str	r1, [sp, #40]	; 0x28
   17b7e:	f648 010f 	movw	r1, #34831	; 0x880f
   17b82:	f2c0 0101 	movt	r1, #1
   17b86:	9119      	str	r1, [sp, #100]	; 0x64
   17b88:	e9cd 1217 	strd	r1, r2, [sp, #92]	; 0x5c
   17b8c:	a902      	add	r1, sp, #8
   17b8e:	9116      	str	r1, [sp, #88]	; 0x58
   17b90:	f246 7197 	movw	r1, #26519	; 0x6797
   17b94:	f2c0 0101 	movt	r1, #1
   17b98:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   17b9c:	f247 7019 	movw	r0, #30489	; 0x7719
   17ba0:	f2c0 0001 	movt	r0, #1
   17ba4:	f240 11ec 	movw	r1, #492	; 0x1ec
   17ba8:	9013      	str	r0, [sp, #76]	; 0x4c
   17baa:	a807      	add	r0, sp, #28
   17bac:	9012      	str	r0, [sp, #72]	; 0x48
   17bae:	f248 7021 	movw	r0, #34593	; 0x8721
   17bb2:	f2c0 0001 	movt	r0, #1
   17bb6:	f2c0 0102 	movt	r1, #2
   17bba:	9011      	str	r0, [sp, #68]	; 0x44
   17bbc:	a806      	add	r0, sp, #24
   17bbe:	9010      	str	r0, [sp, #64]	; 0x40
   17bc0:	a80a      	add	r0, sp, #40	; 0x28
   17bc2:	f7fe ff23 	bl	16a0c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   17bc6:	defe      	udf	#254	; 0xfe
   17bc8:	2004      	movs	r0, #4
   17bca:	a910      	add	r1, sp, #64	; 0x40
   17bcc:	900f      	str	r0, [sp, #60]	; 0x3c
   17bce:	910e      	str	r1, [sp, #56]	; 0x38
   17bd0:	2100      	movs	r1, #0
   17bd2:	910d      	str	r1, [sp, #52]	; 0x34
   17bd4:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   17bd8:	f240 1058 	movw	r0, #344	; 0x158
   17bdc:	f2c0 0002 	movt	r0, #2
   17be0:	a904      	add	r1, sp, #16
   17be2:	900a      	str	r0, [sp, #40]	; 0x28
   17be4:	f648 000f 	movw	r0, #34831	; 0x880f
   17be8:	f2c0 0001 	movt	r0, #1
   17bec:	9017      	str	r0, [sp, #92]	; 0x5c
   17bee:	e9cd 0115 	strd	r0, r1, [sp, #84]	; 0x54
   17bf2:	a802      	add	r0, sp, #8
   17bf4:	9014      	str	r0, [sp, #80]	; 0x50
   17bf6:	f248 7021 	movw	r0, #34593	; 0x8721
   17bfa:	a901      	add	r1, sp, #4
   17bfc:	f2c0 0001 	movt	r0, #1
   17c00:	9013      	str	r0, [sp, #76]	; 0x4c
   17c02:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
   17c06:	f240 1178 	movw	r1, #376	; 0x178
   17c0a:	4668      	mov	r0, sp
   17c0c:	f2c0 0102 	movt	r1, #2
   17c10:	9010      	str	r0, [sp, #64]	; 0x40
   17c12:	a80a      	add	r0, sp, #40	; 0x28
   17c14:	f7fe fefa 	bl	16a0c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   17c18:	defe      	udf	#254	; 0xfe

00017c1a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>:
   17c1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17c1e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   17c22:	d270      	bcs.n	17d06 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xec>
   17c24:	f240 2e0c 	movw	lr, #524	; 0x20c
   17c28:	f240 285e 	movw	r8, #606	; 0x25e
   17c2c:	fa1f f980 	uxth.w	r9, r0
   17c30:	f2c0 0e02 	movt	lr, #2
   17c34:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   17c38:	f04f 0a00 	mov.w	sl, #0
   17c3c:	f2c0 0802 	movt	r8, #2
   17c40:	4675      	mov	r5, lr
   17c42:	786e      	ldrb	r6, [r5, #1]
   17c44:	4652      	mov	r2, sl
   17c46:	782b      	ldrb	r3, [r5, #0]
   17c48:	3502      	adds	r5, #2
   17c4a:	44b2      	add	sl, r6
   17c4c:	4563      	cmp	r3, ip
   17c4e:	d129      	bne.n	17ca4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x8a>
   17c50:	4592      	cmp	sl, r2
   17c52:	f0c0 8112 	bcc.w	17e7a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   17c56:	ea4f 035a 	mov.w	r3, sl, lsr #1
   17c5a:	2b92      	cmp	r3, #146	; 0x92
   17c5c:	f200 8112 	bhi.w	17e84 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x26a>
   17c60:	eb08 0302 	add.w	r3, r8, r2
   17c64:	199a      	adds	r2, r3, r6
   17c66:	b31e      	cbz	r6, 17cb0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   17c68:	461f      	mov	r7, r3
   17c6a:	b2c4      	uxtb	r4, r0
   17c6c:	f817 1b01 	ldrb.w	r1, [r7], #1
   17c70:	42a1      	cmp	r1, r4
   17c72:	f000 80b6 	beq.w	17de2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17c76:	4297      	cmp	r7, r2
   17c78:	d01a      	beq.n	17cb0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   17c7a:	7859      	ldrb	r1, [r3, #1]
   17c7c:	42a1      	cmp	r1, r4
   17c7e:	f000 80b0 	beq.w	17de2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17c82:	1c99      	adds	r1, r3, #2
   17c84:	4291      	cmp	r1, r2
   17c86:	d013      	beq.n	17cb0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   17c88:	7899      	ldrb	r1, [r3, #2]
   17c8a:	42a1      	cmp	r1, r4
   17c8c:	f000 80a9 	beq.w	17de2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17c90:	1cd9      	adds	r1, r3, #3
   17c92:	4291      	cmp	r1, r2
   17c94:	d00c      	beq.n	17cb0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   17c96:	1d19      	adds	r1, r3, #4
   17c98:	78db      	ldrb	r3, [r3, #3]
   17c9a:	3e04      	subs	r6, #4
   17c9c:	42a3      	cmp	r3, r4
   17c9e:	460b      	mov	r3, r1
   17ca0:	d1e1      	bne.n	17c66 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x4c>
   17ca2:	e09e      	b.n	17de2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17ca4:	d808      	bhi.n	17cb8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   17ca6:	f10e 0252 	add.w	r2, lr, #82	; 0x52
   17caa:	4295      	cmp	r5, r2
   17cac:	d1c9      	bne.n	17c42 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   17cae:	e003      	b.n	17cb8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   17cb0:	f10e 0152 	add.w	r1, lr, #82	; 0x52
   17cb4:	428d      	cmp	r5, r1
   17cb6:	d1c4      	bne.n	17c42 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   17cb8:	f240 3583 	movw	r5, #899	; 0x383
   17cbc:	2101      	movs	r1, #1
   17cbe:	f2c0 0502 	movt	r5, #2
   17cc2:	4628      	mov	r0, r5
   17cc4:	4602      	mov	r2, r0
   17cc6:	f812 7b01 	ldrb.w	r7, [r2], #1
   17cca:	b27e      	sxtb	r6, r7
   17ccc:	2e00      	cmp	r6, #0
   17cce:	d404      	bmi.n	17cda <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xc0>
   17cd0:	4610      	mov	r0, r2
   17cd2:	ebb9 0907 	subs.w	r9, r9, r7
   17cd6:	d50f      	bpl.n	17cf8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xde>
   17cd8:	e0bd      	b.n	17e56 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17cda:	f505 739d 	add.w	r3, r5, #314	; 0x13a
   17cde:	429a      	cmp	r2, r3
   17ce0:	f000 80db 	beq.w	17e9a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   17ce4:	7842      	ldrb	r2, [r0, #1]
   17ce6:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   17cea:	3002      	adds	r0, #2
   17cec:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   17cf0:	ebb9 0907 	subs.w	r9, r9, r7
   17cf4:	f100 80af 	bmi.w	17e56 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17cf8:	f505 729d 	add.w	r2, r5, #314	; 0x13a
   17cfc:	f081 0101 	eor.w	r1, r1, #1
   17d00:	4290      	cmp	r0, r2
   17d02:	d1df      	bne.n	17cc4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xaa>
   17d04:	e0a7      	b.n	17e56 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17d06:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
   17d0a:	d26f      	bcs.n	17dec <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1d2>
   17d0c:	f240 4ebd 	movw	lr, #1213	; 0x4bd
   17d10:	f240 5803 	movw	r8, #1283	; 0x503
   17d14:	fa1f f980 	uxth.w	r9, r0
   17d18:	f2c0 0e02 	movt	lr, #2
   17d1c:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   17d20:	f04f 0a00 	mov.w	sl, #0
   17d24:	f2c0 0802 	movt	r8, #2
   17d28:	4675      	mov	r5, lr
   17d2a:	786e      	ldrb	r6, [r5, #1]
   17d2c:	4652      	mov	r2, sl
   17d2e:	782b      	ldrb	r3, [r5, #0]
   17d30:	3502      	adds	r5, #2
   17d32:	44b2      	add	sl, r6
   17d34:	4563      	cmp	r3, ip
   17d36:	d125      	bne.n	17d84 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x16a>
   17d38:	4592      	cmp	sl, r2
   17d3a:	f0c0 809e 	bcc.w	17e7a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   17d3e:	f1ba 0fa6 	cmp.w	sl, #166	; 0xa6
   17d42:	f200 80a5 	bhi.w	17e90 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x276>
   17d46:	eb08 0302 	add.w	r3, r8, r2
   17d4a:	199a      	adds	r2, r3, r6
   17d4c:	b306      	cbz	r6, 17d90 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   17d4e:	461f      	mov	r7, r3
   17d50:	b2c4      	uxtb	r4, r0
   17d52:	f817 1b01 	ldrb.w	r1, [r7], #1
   17d56:	42a1      	cmp	r1, r4
   17d58:	d043      	beq.n	17de2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17d5a:	4297      	cmp	r7, r2
   17d5c:	d018      	beq.n	17d90 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   17d5e:	7859      	ldrb	r1, [r3, #1]
   17d60:	42a1      	cmp	r1, r4
   17d62:	d03e      	beq.n	17de2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17d64:	1c99      	adds	r1, r3, #2
   17d66:	4291      	cmp	r1, r2
   17d68:	d012      	beq.n	17d90 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   17d6a:	7899      	ldrb	r1, [r3, #2]
   17d6c:	42a1      	cmp	r1, r4
   17d6e:	d038      	beq.n	17de2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17d70:	1cd9      	adds	r1, r3, #3
   17d72:	4291      	cmp	r1, r2
   17d74:	d00c      	beq.n	17d90 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   17d76:	1d19      	adds	r1, r3, #4
   17d78:	78db      	ldrb	r3, [r3, #3]
   17d7a:	3e04      	subs	r6, #4
   17d7c:	42a3      	cmp	r3, r4
   17d7e:	460b      	mov	r3, r1
   17d80:	d1e4      	bne.n	17d4c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x132>
   17d82:	e02e      	b.n	17de2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17d84:	d808      	bhi.n	17d98 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   17d86:	f10e 0246 	add.w	r2, lr, #70	; 0x46
   17d8a:	4295      	cmp	r5, r2
   17d8c:	d1cd      	bne.n	17d2a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   17d8e:	e003      	b.n	17d98 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   17d90:	f10e 0146 	add.w	r1, lr, #70	; 0x46
   17d94:	428d      	cmp	r5, r1
   17d96:	d1c8      	bne.n	17d2a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   17d98:	f240 55a9 	movw	r5, #1449	; 0x5a9
   17d9c:	2101      	movs	r1, #1
   17d9e:	f2c0 0502 	movt	r5, #2
   17da2:	4628      	mov	r0, r5
   17da4:	4602      	mov	r2, r0
   17da6:	f812 7b01 	ldrb.w	r7, [r2], #1
   17daa:	b27e      	sxtb	r6, r7
   17dac:	2e00      	cmp	r6, #0
   17dae:	d40a      	bmi.n	17dc6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1ac>
   17db0:	4610      	mov	r0, r2
   17db2:	ebb9 0907 	subs.w	r9, r9, r7
   17db6:	d44e      	bmi.n	17e56 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17db8:	f505 72cc 	add.w	r2, r5, #408	; 0x198
   17dbc:	f081 0101 	eor.w	r1, r1, #1
   17dc0:	4290      	cmp	r0, r2
   17dc2:	d1ef      	bne.n	17da4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x18a>
   17dc4:	e047      	b.n	17e56 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17dc6:	f505 73cc 	add.w	r3, r5, #408	; 0x198
   17dca:	429a      	cmp	r2, r3
   17dcc:	d065      	beq.n	17e9a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   17dce:	7842      	ldrb	r2, [r0, #1]
   17dd0:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   17dd4:	3002      	adds	r0, #2
   17dd6:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   17dda:	ebb9 0907 	subs.w	r9, r9, r7
   17dde:	d5eb      	bpl.n	17db8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x19e>
   17de0:	e039      	b.n	17e56 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17de2:	2100      	movs	r1, #0
   17de4:	f001 0001 	and.w	r0, r1, #1
   17de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17dec:	f240 51e2 	movw	r1, #1506	; 0x5e2
   17df0:	f240 63e2 	movw	r3, #1762	; 0x6e2
   17df4:	f6cf 71fd 	movt	r1, #65533	; 0xfffd
   17df8:	1842      	adds	r2, r0, r1
   17dfa:	f2c0 030b 	movt	r3, #11
   17dfe:	2100      	movs	r1, #0
   17e00:	429a      	cmp	r2, r3
   17e02:	d328      	bcc.n	17e56 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17e04:	f241 421f 	movw	r2, #5151	; 0x141f
   17e08:	f640 431f 	movw	r3, #3103	; 0xc1f
   17e0c:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   17e10:	4402      	add	r2, r0
   17e12:	429a      	cmp	r2, r3
   17e14:	bf21      	itttt	cs
   17e16:	f243 125e 	movwcs	r2, #12638	; 0x315e
   17e1a:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   17e1e:	4402      	addcs	r2, r0
   17e20:	2a0e      	cmpcs	r2, #14
   17e22:	d318      	bcc.n	17e56 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17e24:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   17e28:	f64b 031e 	movw	r3, #47134	; 0xb81e
   17e2c:	f2c0 021f 	movt	r2, #31
   17e30:	f2c0 0302 	movt	r3, #2
   17e34:	4002      	ands	r2, r0
   17e36:	429a      	cmp	r2, r3
   17e38:	d00d      	beq.n	17e56 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17e3a:	f645 1229 	movw	r2, #22825	; 0x5929
   17e3e:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   17e42:	4402      	add	r2, r0
   17e44:	2a29      	cmp	r2, #41	; 0x29
   17e46:	bf21      	itttt	cs
   17e48:	f644 02cb 	movwcs	r2, #18635	; 0x48cb
   17e4c:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   17e50:	4402      	addcs	r2, r0
   17e52:	2a0b      	cmpcs	r2, #11
   17e54:	d203      	bcs.n	17e5e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x244>
   17e56:	f001 0001 	and.w	r0, r1, #1
   17e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17e5e:	f5a0 2060 	sub.w	r0, r0, #917504	; 0xe0000
   17e62:	f64f 620f 	movw	r2, #65039	; 0xfe0f
   17e66:	f5a0 71f8 	sub.w	r1, r0, #496	; 0x1f0
   17e6a:	2000      	movs	r0, #0
   17e6c:	f2c0 0202 	movt	r2, #2
   17e70:	4291      	cmp	r1, r2
   17e72:	bf88      	it	hi
   17e74:	2001      	movhi	r0, #1
   17e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17e7a:	4610      	mov	r0, r2
   17e7c:	4651      	mov	r1, sl
   17e7e:	f7ff fd04 	bl	1788a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   17e82:	defe      	udf	#254	; 0xfe
   17e84:	4650      	mov	r0, sl
   17e86:	f240 1125 	movw	r1, #293	; 0x125
   17e8a:	f7ff fcdc 	bl	17846 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   17e8e:	defe      	udf	#254	; 0xfe
   17e90:	4650      	mov	r0, sl
   17e92:	21a6      	movs	r1, #166	; 0xa6
   17e94:	f7ff fcd7 	bl	17846 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   17e98:	defe      	udf	#254	; 0xfe
   17e9a:	f64f 50e0 	movw	r0, #64992	; 0xfde0
   17e9e:	f240 12fc 	movw	r2, #508	; 0x1fc
   17ea2:	f2c0 0001 	movt	r0, #1
   17ea6:	f2c0 0202 	movt	r2, #2
   17eaa:	212b      	movs	r1, #43	; 0x2b
   17eac:	f7fe fd78 	bl	169a0 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   17eb0:	defe      	udf	#254	; 0xfe

00017eb2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>:
   17eb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17eb6:	b0a3      	sub	sp, #140	; 0x8c
   17eb8:	468c      	mov	ip, r1
   17eba:	6809      	ldr	r1, [r1, #0]
   17ebc:	06ca      	lsls	r2, r1, #27
   17ebe:	d44a      	bmi.n	17f56 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xa4>
   17ec0:	6804      	ldr	r4, [r0, #0]
   17ec2:	0688      	lsls	r0, r1, #26
   17ec4:	f100 8089 	bmi.w	17fda <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x128>
   17ec8:	f248 5e1f 	movw	lr, #34079	; 0x851f
   17ecc:	f64f 627f 	movw	r2, #65151	; 0xfe7f
   17ed0:	f242 7810 	movw	r8, #10000	; 0x2710
   17ed4:	4544      	cmp	r4, r8
   17ed6:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   17eda:	f2c0 0201 	movt	r2, #1
   17ede:	f0c0 80e3 	bcc.w	180a8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1f6>
   17ee2:	f241 7959 	movw	r9, #5977	; 0x1759
   17ee6:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   17eea:	f10d 0b0c 	add.w	fp, sp, #12
   17eee:	2300      	movs	r3, #0
   17ef0:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   17ef4:	f04f 0a64 	mov.w	sl, #100	; 0x64
   17ef8:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   17efc:	fba4 0109 	umull	r0, r1, r4, r9
   17f00:	42bc      	cmp	r4, r7
   17f02:	ea4f 3051 	mov.w	r0, r1, lsr #13
   17f06:	fb00 4118 	mls	r1, r0, r8, r4
   17f0a:	4604      	mov	r4, r0
   17f0c:	b28d      	uxth	r5, r1
   17f0e:	fba5 560e 	umull	r5, r6, r5, lr
   17f12:	ea4f 1556 	mov.w	r5, r6, lsr #5
   17f16:	eb0b 0603 	add.w	r6, fp, r3
   17f1a:	fb05 111a 	mls	r1, r5, sl, r1
   17f1e:	f832 5015 	ldrh.w	r5, [r2, r5, lsl #1]
   17f22:	f1a3 0304 	sub.w	r3, r3, #4
   17f26:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   17f2a:	b289      	uxth	r1, r1
   17f2c:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   17f30:	f8a6 1025 	strh.w	r1, [r6, #37]	; 0x25
   17f34:	d8e2      	bhi.n	17efc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x4a>
   17f36:	f103 0127 	add.w	r1, r3, #39	; 0x27
   17f3a:	4604      	mov	r4, r0
   17f3c:	2c63      	cmp	r4, #99	; 0x63
   17f3e:	f300 80b7 	bgt.w	180b0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1fe>
   17f42:	4623      	mov	r3, r4
   17f44:	2b0a      	cmp	r3, #10
   17f46:	f2c0 80c3 	blt.w	180d0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x21e>
   17f4a:	1e88      	subs	r0, r1, #2
   17f4c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   17f50:	aa03      	add	r2, sp, #12
   17f52:	5211      	strh	r1, [r2, r0]
   17f54:	e0c1      	b.n	180da <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x228>
   17f56:	6800      	ldr	r0, [r0, #0]
   17f58:	f10d 0e0c 	add.w	lr, sp, #12
   17f5c:	2381      	movs	r3, #129	; 0x81
   17f5e:	2100      	movs	r1, #0
   17f60:	f000 020f 	and.w	r2, r0, #15
   17f64:	f102 0457 	add.w	r4, r2, #87	; 0x57
   17f68:	2a0a      	cmp	r2, #10
   17f6a:	bf38      	it	cc
   17f6c:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   17f70:	eb0e 0203 	add.w	r2, lr, r3
   17f74:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   17f78:	f802 4c02 	strb.w	r4, [r2, #-2]
   17f7c:	d071      	beq.n	18062 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   17f7e:	0904      	lsrs	r4, r0, #4
   17f80:	f004 040f 	and.w	r4, r4, #15
   17f84:	f104 0557 	add.w	r5, r4, #87	; 0x57
   17f88:	2c0a      	cmp	r4, #10
   17f8a:	bf38      	it	cc
   17f8c:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   17f90:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   17f94:	f802 5c03 	strb.w	r5, [r2, #-3]
   17f98:	d079      	beq.n	1808e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   17f9a:	0a04      	lsrs	r4, r0, #8
   17f9c:	f004 040f 	and.w	r4, r4, #15
   17fa0:	f104 0557 	add.w	r5, r4, #87	; 0x57
   17fa4:	2c0a      	cmp	r4, #10
   17fa6:	bf38      	it	cc
   17fa8:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   17fac:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   17fb0:	f802 5c04 	strb.w	r5, [r2, #-4]
   17fb4:	d073      	beq.n	1809e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   17fb6:	0b04      	lsrs	r4, r0, #12
   17fb8:	3b04      	subs	r3, #4
   17fba:	f004 040f 	and.w	r4, r4, #15
   17fbe:	f104 0557 	add.w	r5, r4, #87	; 0x57
   17fc2:	2c0a      	cmp	r4, #10
   17fc4:	bf38      	it	cc
   17fc6:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   17fca:	f802 5c05 	strb.w	r5, [r2, #-5]
   17fce:	0c02      	lsrs	r2, r0, #16
   17fd0:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   17fd4:	4610      	mov	r0, r2
   17fd6:	d1c3      	bne.n	17f60 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xae>
   17fd8:	e03f      	b.n	1805a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1a8>
   17fda:	f10d 0e0c 	add.w	lr, sp, #12
   17fde:	2381      	movs	r3, #129	; 0x81
   17fe0:	2100      	movs	r1, #0
   17fe2:	f004 000f 	and.w	r0, r4, #15
   17fe6:	eb0e 0203 	add.w	r2, lr, r3
   17fea:	f100 0537 	add.w	r5, r0, #55	; 0x37
   17fee:	280a      	cmp	r0, #10
   17ff0:	bf38      	it	cc
   17ff2:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   17ff6:	ebb1 1f14 	cmp.w	r1, r4, lsr #4
   17ffa:	f802 5c02 	strb.w	r5, [r2, #-2]
   17ffe:	d030      	beq.n	18062 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   18000:	0920      	lsrs	r0, r4, #4
   18002:	f000 000f 	and.w	r0, r0, #15
   18006:	f100 0537 	add.w	r5, r0, #55	; 0x37
   1800a:	280a      	cmp	r0, #10
   1800c:	bf38      	it	cc
   1800e:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   18012:	ebb1 2f14 	cmp.w	r1, r4, lsr #8
   18016:	f802 5c03 	strb.w	r5, [r2, #-3]
   1801a:	d038      	beq.n	1808e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   1801c:	0a20      	lsrs	r0, r4, #8
   1801e:	f000 000f 	and.w	r0, r0, #15
   18022:	f100 0537 	add.w	r5, r0, #55	; 0x37
   18026:	280a      	cmp	r0, #10
   18028:	bf38      	it	cc
   1802a:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   1802e:	ebb1 3f14 	cmp.w	r1, r4, lsr #12
   18032:	f802 5c04 	strb.w	r5, [r2, #-4]
   18036:	d032      	beq.n	1809e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   18038:	0b20      	lsrs	r0, r4, #12
   1803a:	3b04      	subs	r3, #4
   1803c:	f000 000f 	and.w	r0, r0, #15
   18040:	f100 0537 	add.w	r5, r0, #55	; 0x37
   18044:	280a      	cmp	r0, #10
   18046:	bf38      	it	cc
   18048:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   1804c:	0c20      	lsrs	r0, r4, #16
   1804e:	ebb1 4f14 	cmp.w	r1, r4, lsr #16
   18052:	4604      	mov	r4, r0
   18054:	f802 5c05 	strb.w	r5, [r2, #-5]
   18058:	d1c3      	bne.n	17fe2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x130>
   1805a:	1e58      	subs	r0, r3, #1
   1805c:	2881      	cmp	r0, #129	; 0x81
   1805e:	d305      	bcc.n	1806c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   18060:	e019      	b.n	18096 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   18062:	1e59      	subs	r1, r3, #1
   18064:	1e98      	subs	r0, r3, #2
   18066:	460b      	mov	r3, r1
   18068:	2881      	cmp	r0, #129	; 0x81
   1806a:	d214      	bcs.n	18096 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   1806c:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   18070:	f64f 627d 	movw	r2, #65149	; 0xfe7d
   18074:	4470      	add	r0, lr
   18076:	f2c0 0201 	movt	r2, #1
   1807a:	e9cd 0100 	strd	r0, r1, [sp]
   1807e:	4660      	mov	r0, ip
   18080:	2101      	movs	r1, #1
   18082:	2302      	movs	r3, #2
   18084:	f7ff f864 	bl	17150 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   18088:	b023      	add	sp, #140	; 0x8c
   1808a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1808e:	1ed8      	subs	r0, r3, #3
   18090:	3b02      	subs	r3, #2
   18092:	2881      	cmp	r0, #129	; 0x81
   18094:	d3ea      	bcc.n	1806c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   18096:	2180      	movs	r1, #128	; 0x80
   18098:	f7ff fbf7 	bl	1788a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   1809c:	defe      	udf	#254	; 0xfe
   1809e:	1f18      	subs	r0, r3, #4
   180a0:	3b03      	subs	r3, #3
   180a2:	2881      	cmp	r0, #129	; 0x81
   180a4:	d3e2      	bcc.n	1806c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   180a6:	e7f6      	b.n	18096 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   180a8:	2127      	movs	r1, #39	; 0x27
   180aa:	2c63      	cmp	r4, #99	; 0x63
   180ac:	f77f af49 	ble.w	17f42 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x90>
   180b0:	b2a0      	uxth	r0, r4
   180b2:	3902      	subs	r1, #2
   180b4:	fba0 030e 	umull	r0, r3, r0, lr
   180b8:	af03      	add	r7, sp, #12
   180ba:	2064      	movs	r0, #100	; 0x64
   180bc:	095b      	lsrs	r3, r3, #5
   180be:	fb03 4010 	mls	r0, r3, r0, r4
   180c2:	b280      	uxth	r0, r0
   180c4:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   180c8:	5278      	strh	r0, [r7, r1]
   180ca:	2b0a      	cmp	r3, #10
   180cc:	f6bf af3d 	bge.w	17f4a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x98>
   180d0:	1e48      	subs	r0, r1, #1
   180d2:	aa03      	add	r2, sp, #12
   180d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
   180d8:	5411      	strb	r1, [r2, r0]
   180da:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   180de:	aa03      	add	r2, sp, #12
   180e0:	4410      	add	r0, r2
   180e2:	f64f 4244 	movw	r2, #64580	; 0xfc44
   180e6:	e9cd 0100 	strd	r0, r1, [sp]
   180ea:	f2c0 0201 	movt	r2, #1
   180ee:	4660      	mov	r0, ip
   180f0:	2101      	movs	r1, #1
   180f2:	2300      	movs	r3, #0
   180f4:	f7ff f82c 	bl	17150 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   180f8:	b023      	add	sp, #140	; 0x8c
   180fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000180fe <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>:
   180fe:	b580      	push	{r7, lr}
   18100:	b0a2      	sub	sp, #136	; 0x88
   18102:	7802      	ldrb	r2, [r0, #0]
   18104:	468c      	mov	ip, r1
   18106:	f002 030f 	and.w	r3, r2, #15
   1810a:	f103 0057 	add.w	r0, r3, #87	; 0x57
   1810e:	2b0a      	cmp	r3, #10
   18110:	bf38      	it	cc
   18112:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   18116:	2300      	movs	r3, #0
   18118:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   1811c:	d00b      	beq.n	18136 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x38>
   1811e:	0913      	lsrs	r3, r2, #4
   18120:	f103 0157 	add.w	r1, r3, #87	; 0x57
   18124:	2aa0      	cmp	r2, #160	; 0xa0
   18126:	bf38      	it	cc
   18128:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   1812c:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   18130:	227e      	movs	r2, #126	; 0x7e
   18132:	2302      	movs	r3, #2
   18134:	e001      	b.n	1813a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x3c>
   18136:	227f      	movs	r2, #127	; 0x7f
   18138:	2301      	movs	r3, #1
   1813a:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   1813e:	a802      	add	r0, sp, #8
   18140:	4410      	add	r0, r2
   18142:	f64f 627d 	movw	r2, #65149	; 0xfe7d
   18146:	e9cd 0300 	strd	r0, r3, [sp]
   1814a:	f2c0 0201 	movt	r2, #1
   1814e:	4660      	mov	r0, ip
   18150:	2101      	movs	r1, #1
   18152:	2302      	movs	r3, #2
   18154:	f7fe fffc 	bl	17150 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   18158:	b022      	add	sp, #136	; 0x88
   1815a:	bd80      	pop	{r7, pc}

0001815c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>:
   1815c:	b580      	push	{r7, lr}
   1815e:	b0a2      	sub	sp, #136	; 0x88
   18160:	7802      	ldrb	r2, [r0, #0]
   18162:	468c      	mov	ip, r1
   18164:	f002 030f 	and.w	r3, r2, #15
   18168:	f103 0037 	add.w	r0, r3, #55	; 0x37
   1816c:	2b0a      	cmp	r3, #10
   1816e:	bf38      	it	cc
   18170:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   18174:	2300      	movs	r3, #0
   18176:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   1817a:	d00b      	beq.n	18194 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x38>
   1817c:	0913      	lsrs	r3, r2, #4
   1817e:	f103 0137 	add.w	r1, r3, #55	; 0x37
   18182:	2aa0      	cmp	r2, #160	; 0xa0
   18184:	bf38      	it	cc
   18186:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   1818a:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   1818e:	227e      	movs	r2, #126	; 0x7e
   18190:	2302      	movs	r3, #2
   18192:	e001      	b.n	18198 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x3c>
   18194:	227f      	movs	r2, #127	; 0x7f
   18196:	2301      	movs	r3, #1
   18198:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   1819c:	a802      	add	r0, sp, #8
   1819e:	4410      	add	r0, r2
   181a0:	f64f 627d 	movw	r2, #65149	; 0xfe7d
   181a4:	e9cd 0300 	strd	r0, r3, [sp]
   181a8:	f2c0 0201 	movt	r2, #1
   181ac:	4660      	mov	r0, ip
   181ae:	2101      	movs	r1, #1
   181b0:	2302      	movs	r3, #2
   181b2:	f7fe ffcd 	bl	17150 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   181b6:	b022      	add	sp, #136	; 0x88
   181b8:	bd80      	pop	{r7, pc}

000181ba <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E>:
   181ba:	b580      	push	{r7, lr}
   181bc:	b0a2      	sub	sp, #136	; 0x88
   181be:	8800      	ldrh	r0, [r0, #0]
   181c0:	468c      	mov	ip, r1
   181c2:	f000 020f 	and.w	r2, r0, #15
   181c6:	f102 0357 	add.w	r3, r2, #87	; 0x57
   181ca:	2a0a      	cmp	r2, #10
   181cc:	bf38      	it	cc
   181ce:	f102 0330 	addcc.w	r3, r2, #48	; 0x30
   181d2:	2200      	movs	r2, #0
   181d4:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
   181d8:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   181dc:	d02a      	beq.n	18234 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x7a>
   181de:	0903      	lsrs	r3, r0, #4
   181e0:	f003 030f 	and.w	r3, r3, #15
   181e4:	f103 0157 	add.w	r1, r3, #87	; 0x57
   181e8:	2b0a      	cmp	r3, #10
   181ea:	bf38      	it	cc
   181ec:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   181f0:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   181f4:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   181f8:	d031      	beq.n	1825e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xa4>
   181fa:	0a01      	lsrs	r1, r0, #8
   181fc:	f001 010f 	and.w	r1, r1, #15
   18200:	f101 0257 	add.w	r2, r1, #87	; 0x57
   18204:	290a      	cmp	r1, #10
   18206:	bf38      	it	cc
   18208:	f101 0230 	addcc.w	r2, r1, #48	; 0x30
   1820c:	2100      	movs	r1, #0
   1820e:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   18212:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   18216:	d027      	beq.n	18268 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xae>
   18218:	0b00      	lsrs	r0, r0, #12
   1821a:	f100 0157 	add.w	r1, r0, #87	; 0x57
   1821e:	280a      	cmp	r0, #10
   18220:	bf38      	it	cc
   18222:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   18226:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
   1822a:	227d      	movs	r2, #125	; 0x7d
   1822c:	207c      	movs	r0, #124	; 0x7c
   1822e:	2881      	cmp	r0, #129	; 0x81
   18230:	d304      	bcc.n	1823c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   18232:	e01d      	b.n	18270 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   18234:	2280      	movs	r2, #128	; 0x80
   18236:	207f      	movs	r0, #127	; 0x7f
   18238:	2881      	cmp	r0, #129	; 0x81
   1823a:	d219      	bcs.n	18270 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   1823c:	f1c2 0281 	rsb	r2, r2, #129	; 0x81
   18240:	ab02      	add	r3, sp, #8
   18242:	4418      	add	r0, r3
   18244:	2101      	movs	r1, #1
   18246:	e9cd 0200 	strd	r0, r2, [sp]
   1824a:	f64f 627d 	movw	r2, #65149	; 0xfe7d
   1824e:	f2c0 0201 	movt	r2, #1
   18252:	4660      	mov	r0, ip
   18254:	2302      	movs	r3, #2
   18256:	f7fe ff7b 	bl	17150 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1825a:	b022      	add	sp, #136	; 0x88
   1825c:	bd80      	pop	{r7, pc}
   1825e:	207e      	movs	r0, #126	; 0x7e
   18260:	227f      	movs	r2, #127	; 0x7f
   18262:	2881      	cmp	r0, #129	; 0x81
   18264:	d3ea      	bcc.n	1823c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   18266:	e003      	b.n	18270 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   18268:	207d      	movs	r0, #125	; 0x7d
   1826a:	227e      	movs	r2, #126	; 0x7e
   1826c:	2881      	cmp	r0, #129	; 0x81
   1826e:	d3e5      	bcc.n	1823c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   18270:	2180      	movs	r1, #128	; 0x80
   18272:	f7ff fb0a 	bl	1788a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   18276:	defe      	udf	#254	; 0xfe

00018278 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE>:
   18278:	b580      	push	{r7, lr}
   1827a:	b0a2      	sub	sp, #136	; 0x88
   1827c:	8800      	ldrh	r0, [r0, #0]
   1827e:	468c      	mov	ip, r1
   18280:	f000 020f 	and.w	r2, r0, #15
   18284:	f102 0337 	add.w	r3, r2, #55	; 0x37
   18288:	2a0a      	cmp	r2, #10
   1828a:	bf38      	it	cc
   1828c:	f102 0330 	addcc.w	r3, r2, #48	; 0x30
   18290:	2200      	movs	r2, #0
   18292:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
   18296:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   1829a:	d02a      	beq.n	182f2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x7a>
   1829c:	0903      	lsrs	r3, r0, #4
   1829e:	f003 030f 	and.w	r3, r3, #15
   182a2:	f103 0137 	add.w	r1, r3, #55	; 0x37
   182a6:	2b0a      	cmp	r3, #10
   182a8:	bf38      	it	cc
   182aa:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   182ae:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   182b2:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   182b6:	d031      	beq.n	1831c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xa4>
   182b8:	0a01      	lsrs	r1, r0, #8
   182ba:	f001 010f 	and.w	r1, r1, #15
   182be:	f101 0237 	add.w	r2, r1, #55	; 0x37
   182c2:	290a      	cmp	r1, #10
   182c4:	bf38      	it	cc
   182c6:	f101 0230 	addcc.w	r2, r1, #48	; 0x30
   182ca:	2100      	movs	r1, #0
   182cc:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   182d0:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   182d4:	d027      	beq.n	18326 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xae>
   182d6:	0b00      	lsrs	r0, r0, #12
   182d8:	f100 0137 	add.w	r1, r0, #55	; 0x37
   182dc:	280a      	cmp	r0, #10
   182de:	bf38      	it	cc
   182e0:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   182e4:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
   182e8:	227d      	movs	r2, #125	; 0x7d
   182ea:	207c      	movs	r0, #124	; 0x7c
   182ec:	2881      	cmp	r0, #129	; 0x81
   182ee:	d304      	bcc.n	182fa <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   182f0:	e01d      	b.n	1832e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   182f2:	2280      	movs	r2, #128	; 0x80
   182f4:	207f      	movs	r0, #127	; 0x7f
   182f6:	2881      	cmp	r0, #129	; 0x81
   182f8:	d219      	bcs.n	1832e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   182fa:	f1c2 0281 	rsb	r2, r2, #129	; 0x81
   182fe:	ab02      	add	r3, sp, #8
   18300:	4418      	add	r0, r3
   18302:	2101      	movs	r1, #1
   18304:	e9cd 0200 	strd	r0, r2, [sp]
   18308:	f64f 627d 	movw	r2, #65149	; 0xfe7d
   1830c:	f2c0 0201 	movt	r2, #1
   18310:	4660      	mov	r0, ip
   18312:	2302      	movs	r3, #2
   18314:	f7fe ff1c 	bl	17150 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   18318:	b022      	add	sp, #136	; 0x88
   1831a:	bd80      	pop	{r7, pc}
   1831c:	207e      	movs	r0, #126	; 0x7e
   1831e:	227f      	movs	r2, #127	; 0x7f
   18320:	2881      	cmp	r0, #129	; 0x81
   18322:	d3ea      	bcc.n	182fa <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   18324:	e003      	b.n	1832e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   18326:	207d      	movs	r0, #125	; 0x7d
   18328:	227e      	movs	r2, #126	; 0x7e
   1832a:	2881      	cmp	r0, #129	; 0x81
   1832c:	d3e5      	bcc.n	182fa <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   1832e:	2180      	movs	r1, #128	; 0x80
   18330:	f7ff faab 	bl	1788a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   18334:	defe      	udf	#254	; 0xfe

00018336 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>:
   18336:	b5b0      	push	{r4, r5, r7, lr}
   18338:	b0a2      	sub	sp, #136	; 0x88
   1833a:	6800      	ldr	r0, [r0, #0]
   1833c:	f10d 0e08 	add.w	lr, sp, #8
   18340:	468c      	mov	ip, r1
   18342:	2381      	movs	r3, #129	; 0x81
   18344:	2100      	movs	r1, #0
   18346:	f000 020f 	and.w	r2, r0, #15
   1834a:	f102 0457 	add.w	r4, r2, #87	; 0x57
   1834e:	2a0a      	cmp	r2, #10
   18350:	bf38      	it	cc
   18352:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   18356:	eb0e 0203 	add.w	r2, lr, r3
   1835a:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   1835e:	f802 4c02 	strb.w	r4, [r2, #-2]
   18362:	d030      	beq.n	183c6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x90>
   18364:	0904      	lsrs	r4, r0, #4
   18366:	f004 040f 	and.w	r4, r4, #15
   1836a:	f104 0557 	add.w	r5, r4, #87	; 0x57
   1836e:	2c0a      	cmp	r4, #10
   18370:	bf38      	it	cc
   18372:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   18376:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   1837a:	f802 5c03 	strb.w	r5, [r2, #-3]
   1837e:	d028      	beq.n	183d2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x9c>
   18380:	0a04      	lsrs	r4, r0, #8
   18382:	f004 040f 	and.w	r4, r4, #15
   18386:	f104 0557 	add.w	r5, r4, #87	; 0x57
   1838a:	2c0a      	cmp	r4, #10
   1838c:	bf38      	it	cc
   1838e:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   18392:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   18396:	f802 5c04 	strb.w	r5, [r2, #-4]
   1839a:	d01f      	beq.n	183dc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xa6>
   1839c:	0b04      	lsrs	r4, r0, #12
   1839e:	3b04      	subs	r3, #4
   183a0:	f004 040f 	and.w	r4, r4, #15
   183a4:	f104 0557 	add.w	r5, r4, #87	; 0x57
   183a8:	2c0a      	cmp	r4, #10
   183aa:	bf38      	it	cc
   183ac:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   183b0:	f802 5c05 	strb.w	r5, [r2, #-5]
   183b4:	0c02      	lsrs	r2, r0, #16
   183b6:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   183ba:	4610      	mov	r0, r2
   183bc:	d1c3      	bne.n	18346 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x10>
   183be:	1e58      	subs	r0, r3, #1
   183c0:	2881      	cmp	r0, #129	; 0x81
   183c2:	d30f      	bcc.n	183e4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   183c4:	e01e      	b.n	18404 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   183c6:	1e59      	subs	r1, r3, #1
   183c8:	1e98      	subs	r0, r3, #2
   183ca:	460b      	mov	r3, r1
   183cc:	2881      	cmp	r0, #129	; 0x81
   183ce:	d309      	bcc.n	183e4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   183d0:	e018      	b.n	18404 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   183d2:	1ed8      	subs	r0, r3, #3
   183d4:	3b02      	subs	r3, #2
   183d6:	2881      	cmp	r0, #129	; 0x81
   183d8:	d304      	bcc.n	183e4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   183da:	e013      	b.n	18404 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   183dc:	1f18      	subs	r0, r3, #4
   183de:	3b03      	subs	r3, #3
   183e0:	2881      	cmp	r0, #129	; 0x81
   183e2:	d20f      	bcs.n	18404 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   183e4:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   183e8:	f64f 627d 	movw	r2, #65149	; 0xfe7d
   183ec:	4470      	add	r0, lr
   183ee:	f2c0 0201 	movt	r2, #1
   183f2:	e9cd 0100 	strd	r0, r1, [sp]
   183f6:	4660      	mov	r0, ip
   183f8:	2101      	movs	r1, #1
   183fa:	2302      	movs	r3, #2
   183fc:	f7fe fea8 	bl	17150 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   18400:	b022      	add	sp, #136	; 0x88
   18402:	bdb0      	pop	{r4, r5, r7, pc}
   18404:	2180      	movs	r1, #128	; 0x80
   18406:	f7ff fa40 	bl	1788a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   1840a:	defe      	udf	#254	; 0xfe

0001840c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>:
   1840c:	b5b0      	push	{r4, r5, r7, lr}
   1840e:	b0a2      	sub	sp, #136	; 0x88
   18410:	6800      	ldr	r0, [r0, #0]
   18412:	f10d 0e08 	add.w	lr, sp, #8
   18416:	468c      	mov	ip, r1
   18418:	2381      	movs	r3, #129	; 0x81
   1841a:	2100      	movs	r1, #0
   1841c:	f000 020f 	and.w	r2, r0, #15
   18420:	f102 0437 	add.w	r4, r2, #55	; 0x37
   18424:	2a0a      	cmp	r2, #10
   18426:	bf38      	it	cc
   18428:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   1842c:	eb0e 0203 	add.w	r2, lr, r3
   18430:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   18434:	f802 4c02 	strb.w	r4, [r2, #-2]
   18438:	d030      	beq.n	1849c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x90>
   1843a:	0904      	lsrs	r4, r0, #4
   1843c:	f004 040f 	and.w	r4, r4, #15
   18440:	f104 0537 	add.w	r5, r4, #55	; 0x37
   18444:	2c0a      	cmp	r4, #10
   18446:	bf38      	it	cc
   18448:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   1844c:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   18450:	f802 5c03 	strb.w	r5, [r2, #-3]
   18454:	d028      	beq.n	184a8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x9c>
   18456:	0a04      	lsrs	r4, r0, #8
   18458:	f004 040f 	and.w	r4, r4, #15
   1845c:	f104 0537 	add.w	r5, r4, #55	; 0x37
   18460:	2c0a      	cmp	r4, #10
   18462:	bf38      	it	cc
   18464:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   18468:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   1846c:	f802 5c04 	strb.w	r5, [r2, #-4]
   18470:	d01f      	beq.n	184b2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xa6>
   18472:	0b04      	lsrs	r4, r0, #12
   18474:	3b04      	subs	r3, #4
   18476:	f004 040f 	and.w	r4, r4, #15
   1847a:	f104 0537 	add.w	r5, r4, #55	; 0x37
   1847e:	2c0a      	cmp	r4, #10
   18480:	bf38      	it	cc
   18482:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   18486:	f802 5c05 	strb.w	r5, [r2, #-5]
   1848a:	0c02      	lsrs	r2, r0, #16
   1848c:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   18490:	4610      	mov	r0, r2
   18492:	d1c3      	bne.n	1841c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x10>
   18494:	1e58      	subs	r0, r3, #1
   18496:	2881      	cmp	r0, #129	; 0x81
   18498:	d30f      	bcc.n	184ba <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   1849a:	e01e      	b.n	184da <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   1849c:	1e59      	subs	r1, r3, #1
   1849e:	1e98      	subs	r0, r3, #2
   184a0:	460b      	mov	r3, r1
   184a2:	2881      	cmp	r0, #129	; 0x81
   184a4:	d309      	bcc.n	184ba <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   184a6:	e018      	b.n	184da <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   184a8:	1ed8      	subs	r0, r3, #3
   184aa:	3b02      	subs	r3, #2
   184ac:	2881      	cmp	r0, #129	; 0x81
   184ae:	d304      	bcc.n	184ba <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   184b0:	e013      	b.n	184da <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   184b2:	1f18      	subs	r0, r3, #4
   184b4:	3b03      	subs	r3, #3
   184b6:	2881      	cmp	r0, #129	; 0x81
   184b8:	d20f      	bcs.n	184da <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   184ba:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   184be:	f64f 627d 	movw	r2, #65149	; 0xfe7d
   184c2:	4470      	add	r0, lr
   184c4:	f2c0 0201 	movt	r2, #1
   184c8:	e9cd 0100 	strd	r0, r1, [sp]
   184cc:	4660      	mov	r0, ip
   184ce:	2101      	movs	r1, #1
   184d0:	2302      	movs	r3, #2
   184d2:	f7fe fe3d 	bl	17150 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   184d6:	b022      	add	sp, #136	; 0x88
   184d8:	bdb0      	pop	{r4, r5, r7, pc}
   184da:	2180      	movs	r1, #128	; 0x80
   184dc:	f7ff f9d5 	bl	1788a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   184e0:	defe      	udf	#254	; 0xfe

000184e2 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>:
   184e2:	b580      	push	{r7, lr}
   184e4:	b08c      	sub	sp, #48	; 0x30
   184e6:	7802      	ldrb	r2, [r0, #0]
   184e8:	2a64      	cmp	r2, #100	; 0x64
   184ea:	d314      	bcc.n	18516 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x34>
   184ec:	f248 501f 	movw	r0, #34079	; 0x851f
   184f0:	f2c5 10eb 	movt	r0, #20971	; 0x51eb
   184f4:	fba2 0300 	umull	r0, r3, r2, r0
   184f8:	2064      	movs	r0, #100	; 0x64
   184fa:	095b      	lsrs	r3, r3, #5
   184fc:	fb03 2010 	mls	r0, r3, r0, r2
   18500:	f64f 627f 	movw	r2, #65151	; 0xfe7f
   18504:	f2c0 0201 	movt	r2, #1
   18508:	b2c0      	uxtb	r0, r0
   1850a:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   1850e:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   18512:	2024      	movs	r0, #36	; 0x24
   18514:	e003      	b.n	1851e <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x3c>
   18516:	2a0a      	cmp	r2, #10
   18518:	d206      	bcs.n	18528 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x46>
   1851a:	2026      	movs	r0, #38	; 0x26
   1851c:	4613      	mov	r3, r2
   1851e:	f103 0230 	add.w	r2, r3, #48	; 0x30
   18522:	ab02      	add	r3, sp, #8
   18524:	541a      	strb	r2, [r3, r0]
   18526:	e008      	b.n	1853a <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x58>
   18528:	f64f 607f 	movw	r0, #65151	; 0xfe7f
   1852c:	f2c0 0001 	movt	r0, #1
   18530:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
   18534:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   18538:	2025      	movs	r0, #37	; 0x25
   1853a:	f1c0 0227 	rsb	r2, r0, #39	; 0x27
   1853e:	ab02      	add	r3, sp, #8
   18540:	4418      	add	r0, r3
   18542:	2300      	movs	r3, #0
   18544:	e9cd 0200 	strd	r0, r2, [sp]
   18548:	f64f 4244 	movw	r2, #64580	; 0xfc44
   1854c:	4608      	mov	r0, r1
   1854e:	f2c0 0201 	movt	r2, #1
   18552:	2101      	movs	r1, #1
   18554:	f7fe fdfc 	bl	17150 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   18558:	b00c      	add	sp, #48	; 0x30
   1855a:	bd80      	pop	{r7, pc}

0001855c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E>:
   1855c:	b580      	push	{r7, lr}
   1855e:	b08c      	sub	sp, #48	; 0x30
   18560:	8800      	ldrh	r0, [r0, #0]
   18562:	f242 720f 	movw	r2, #9999	; 0x270f
   18566:	468e      	mov	lr, r1
   18568:	4290      	cmp	r0, r2
   1856a:	d924      	bls.n	185b6 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x5a>
   1856c:	f241 7259 	movw	r2, #5977	; 0x1759
   18570:	f248 511f 	movw	r1, #34079	; 0x851f
   18574:	f2cd 12b7 	movt	r2, #53687	; 0xd1b7
   18578:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
   1857c:	fba0 2302 	umull	r2, r3, r0, r2
   18580:	0b5a      	lsrs	r2, r3, #13
   18582:	f242 7310 	movw	r3, #10000	; 0x2710
   18586:	fb02 0013 	mls	r0, r2, r3, r0
   1858a:	b283      	uxth	r3, r0
   1858c:	fba3 1301 	umull	r1, r3, r3, r1
   18590:	0959      	lsrs	r1, r3, #5
   18592:	2364      	movs	r3, #100	; 0x64
   18594:	fb01 0013 	mls	r0, r1, r3, r0
   18598:	f64f 637f 	movw	r3, #65151	; 0xfe7f
   1859c:	f2c0 0301 	movt	r3, #1
   185a0:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   185a4:	f8ad 102b 	strh.w	r1, [sp, #43]	; 0x2b
   185a8:	b280      	uxth	r0, r0
   185aa:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   185ae:	2323      	movs	r3, #35	; 0x23
   185b0:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   185b4:	e024      	b.n	18600 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xa4>
   185b6:	f64f 6c7f 	movw	ip, #65151	; 0xfe7f
   185ba:	2863      	cmp	r0, #99	; 0x63
   185bc:	f2c0 0c01 	movt	ip, #1
   185c0:	d919      	bls.n	185f6 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x9a>
   185c2:	f248 511f 	movw	r1, #34079	; 0x851f
   185c6:	2325      	movs	r3, #37	; 0x25
   185c8:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
   185cc:	fba0 1201 	umull	r1, r2, r0, r1
   185d0:	0951      	lsrs	r1, r2, #5
   185d2:	2264      	movs	r2, #100	; 0x64
   185d4:	fb01 0012 	mls	r0, r1, r2, r0
   185d8:	b280      	uxth	r0, r0
   185da:	f83c 0010 	ldrh.w	r0, [ip, r0, lsl #1]
   185de:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   185e2:	4608      	mov	r0, r1
   185e4:	b282      	uxth	r2, r0
   185e6:	2a0a      	cmp	r2, #10
   185e8:	d309      	bcc.n	185fe <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xa2>
   185ea:	f83c 1012 	ldrh.w	r1, [ip, r2, lsl #1]
   185ee:	1e98      	subs	r0, r3, #2
   185f0:	aa02      	add	r2, sp, #8
   185f2:	5211      	strh	r1, [r2, r0]
   185f4:	e009      	b.n	1860a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xae>
   185f6:	2327      	movs	r3, #39	; 0x27
   185f8:	b282      	uxth	r2, r0
   185fa:	2a0a      	cmp	r2, #10
   185fc:	d2f5      	bcs.n	185ea <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x8e>
   185fe:	4602      	mov	r2, r0
   18600:	1e58      	subs	r0, r3, #1
   18602:	f102 0130 	add.w	r1, r2, #48	; 0x30
   18606:	aa02      	add	r2, sp, #8
   18608:	5411      	strb	r1, [r2, r0]
   1860a:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   1860e:	aa02      	add	r2, sp, #8
   18610:	4410      	add	r0, r2
   18612:	f64f 4244 	movw	r2, #64580	; 0xfc44
   18616:	e9cd 0100 	strd	r0, r1, [sp]
   1861a:	f2c0 0201 	movt	r2, #1
   1861e:	4670      	mov	r0, lr
   18620:	2101      	movs	r1, #1
   18622:	2300      	movs	r3, #0
   18624:	f7fe fd94 	bl	17150 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   18628:	b00c      	add	sp, #48	; 0x30
   1862a:	bd80      	pop	{r7, pc}

0001862c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>:
   1862c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18630:	b08f      	sub	sp, #60	; 0x3c
   18632:	6805      	ldr	r5, [r0, #0]
   18634:	f248 581f 	movw	r8, #34079	; 0x851f
   18638:	460e      	mov	r6, r1
   1863a:	f64f 617f 	movw	r1, #65151	; 0xfe7f
   1863e:	2d00      	cmp	r5, #0
   18640:	f242 7910 	movw	r9, #10000	; 0x2710
   18644:	462b      	mov	r3, r5
   18646:	f2c5 18eb 	movt	r8, #20971	; 0x51eb
   1864a:	bf48      	it	mi
   1864c:	426b      	negmi	r3, r5
   1864e:	454b      	cmp	r3, r9
   18650:	f2c0 0101 	movt	r1, #1
   18654:	d33a      	bcc.n	186cc <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa0>
   18656:	f241 7a59 	movw	sl, #5977	; 0x1759
   1865a:	f24e 00ff 	movw	r0, #57599	; 0xe0ff
   1865e:	f10d 0e14 	add.w	lr, sp, #20
   18662:	2400      	movs	r4, #0
   18664:	f2cd 1ab7 	movt	sl, #53687	; 0xd1b7
   18668:	f04f 0b64 	mov.w	fp, #100	; 0x64
   1866c:	f2c0 50f5 	movt	r0, #1525	; 0x5f5
   18670:	e9cd 5603 	strd	r5, r6, [sp, #12]
   18674:	fba3 250a 	umull	r2, r5, r3, sl
   18678:	eb0e 0704 	add.w	r7, lr, r4
   1867c:	3c04      	subs	r4, #4
   1867e:	4283      	cmp	r3, r0
   18680:	ea4f 3255 	mov.w	r2, r5, lsr #13
   18684:	fb02 3519 	mls	r5, r2, r9, r3
   18688:	4613      	mov	r3, r2
   1868a:	b2ae      	uxth	r6, r5
   1868c:	fba6 6c08 	umull	r6, ip, r6, r8
   18690:	ea4f 165c 	mov.w	r6, ip, lsr #5
   18694:	fb06 551b 	mls	r5, r6, fp, r5
   18698:	f831 6016 	ldrh.w	r6, [r1, r6, lsl #1]
   1869c:	f8a7 6023 	strh.w	r6, [r7, #35]	; 0x23
   186a0:	b2ad      	uxth	r5, r5
   186a2:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
   186a6:	f8a7 5025 	strh.w	r5, [r7, #37]	; 0x25
   186aa:	d8e3      	bhi.n	18674 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x48>
   186ac:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
   186b0:	f104 0027 	add.w	r0, r4, #39	; 0x27
   186b4:	4613      	mov	r3, r2
   186b6:	2b63      	cmp	r3, #99	; 0x63
   186b8:	dc0b      	bgt.n	186d2 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa6>
   186ba:	461a      	mov	r2, r3
   186bc:	2a0a      	cmp	r2, #10
   186be:	db17      	blt.n	186f0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xc4>
   186c0:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
   186c4:	3802      	subs	r0, #2
   186c6:	aa05      	add	r2, sp, #20
   186c8:	5211      	strh	r1, [r2, r0]
   186ca:	e016      	b.n	186fa <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xce>
   186cc:	2027      	movs	r0, #39	; 0x27
   186ce:	2b63      	cmp	r3, #99	; 0x63
   186d0:	ddf3      	ble.n	186ba <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x8e>
   186d2:	b29a      	uxth	r2, r3
   186d4:	3802      	subs	r0, #2
   186d6:	fba2 2708 	umull	r2, r7, r2, r8
   186da:	097a      	lsrs	r2, r7, #5
   186dc:	2764      	movs	r7, #100	; 0x64
   186de:	fb02 3317 	mls	r3, r2, r7, r3
   186e2:	af05      	add	r7, sp, #20
   186e4:	b29b      	uxth	r3, r3
   186e6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   186ea:	523b      	strh	r3, [r7, r0]
   186ec:	2a0a      	cmp	r2, #10
   186ee:	dae7      	bge.n	186c0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x94>
   186f0:	3801      	subs	r0, #1
   186f2:	f102 0130 	add.w	r1, r2, #48	; 0x30
   186f6:	aa05      	add	r2, sp, #20
   186f8:	5411      	strb	r1, [r2, r0]
   186fa:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   186fe:	aa05      	add	r2, sp, #20
   18700:	4410      	add	r0, r2
   18702:	f64f 4244 	movw	r2, #64580	; 0xfc44
   18706:	e9cd 0100 	strd	r0, r1, [sp]
   1870a:	43e8      	mvns	r0, r5
   1870c:	0fc1      	lsrs	r1, r0, #31
   1870e:	f2c0 0201 	movt	r2, #1
   18712:	4630      	mov	r0, r6
   18714:	2300      	movs	r3, #0
   18716:	f7fe fd1b 	bl	17150 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1871a:	b00f      	add	sp, #60	; 0x3c
   1871c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018720 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>:
   18720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18724:	b08d      	sub	sp, #52	; 0x34
   18726:	468c      	mov	ip, r1
   18728:	6801      	ldr	r1, [r0, #0]
   1872a:	f248 5e1f 	movw	lr, #34079	; 0x851f
   1872e:	f64f 607f 	movw	r0, #65151	; 0xfe7f
   18732:	f242 7810 	movw	r8, #10000	; 0x2710
   18736:	4541      	cmp	r1, r8
   18738:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   1873c:	f2c0 0001 	movt	r0, #1
   18740:	d337      	bcc.n	187b2 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x92>
   18742:	f241 7959 	movw	r9, #5977	; 0x1759
   18746:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   1874a:	f10d 0b0c 	add.w	fp, sp, #12
   1874e:	2300      	movs	r3, #0
   18750:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   18754:	f04f 0a64 	mov.w	sl, #100	; 0x64
   18758:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   1875c:	fba1 2409 	umull	r2, r4, r1, r9
   18760:	42b9      	cmp	r1, r7
   18762:	ea4f 3254 	mov.w	r2, r4, lsr #13
   18766:	fb02 1418 	mls	r4, r2, r8, r1
   1876a:	4611      	mov	r1, r2
   1876c:	b2a5      	uxth	r5, r4
   1876e:	fba5 560e 	umull	r5, r6, r5, lr
   18772:	ea4f 1556 	mov.w	r5, r6, lsr #5
   18776:	eb0b 0603 	add.w	r6, fp, r3
   1877a:	fb05 441a 	mls	r4, r5, sl, r4
   1877e:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   18782:	f1a3 0304 	sub.w	r3, r3, #4
   18786:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   1878a:	b2a4      	uxth	r4, r4
   1878c:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   18790:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   18794:	d8e2      	bhi.n	1875c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x3c>
   18796:	f103 0427 	add.w	r4, r3, #39	; 0x27
   1879a:	4611      	mov	r1, r2
   1879c:	2963      	cmp	r1, #99	; 0x63
   1879e:	dc0b      	bgt.n	187b8 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x98>
   187a0:	460b      	mov	r3, r1
   187a2:	2b0a      	cmp	r3, #10
   187a4:	db17      	blt.n	187d6 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xb6>
   187a6:	1ea1      	subs	r1, r4, #2
   187a8:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   187ac:	aa03      	add	r2, sp, #12
   187ae:	5250      	strh	r0, [r2, r1]
   187b0:	e016      	b.n	187e0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xc0>
   187b2:	2427      	movs	r4, #39	; 0x27
   187b4:	2963      	cmp	r1, #99	; 0x63
   187b6:	ddf3      	ble.n	187a0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x80>
   187b8:	b28a      	uxth	r2, r1
   187ba:	3c02      	subs	r4, #2
   187bc:	fba2 230e 	umull	r2, r3, r2, lr
   187c0:	2264      	movs	r2, #100	; 0x64
   187c2:	095b      	lsrs	r3, r3, #5
   187c4:	fb03 1112 	mls	r1, r3, r2, r1
   187c8:	aa03      	add	r2, sp, #12
   187ca:	b289      	uxth	r1, r1
   187cc:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   187d0:	5311      	strh	r1, [r2, r4]
   187d2:	2b0a      	cmp	r3, #10
   187d4:	dae7      	bge.n	187a6 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x86>
   187d6:	1e61      	subs	r1, r4, #1
   187d8:	aa03      	add	r2, sp, #12
   187da:	f103 0030 	add.w	r0, r3, #48	; 0x30
   187de:	5450      	strb	r0, [r2, r1]
   187e0:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   187e4:	aa03      	add	r2, sp, #12
   187e6:	4411      	add	r1, r2
   187e8:	f64f 4244 	movw	r2, #64580	; 0xfc44
   187ec:	e9cd 1000 	strd	r1, r0, [sp]
   187f0:	f2c0 0201 	movt	r2, #1
   187f4:	4660      	mov	r0, ip
   187f6:	2101      	movs	r1, #1
   187f8:	2300      	movs	r3, #0
   187fa:	f7fe fca9 	bl	17150 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   187fe:	b00d      	add	sp, #52	; 0x34
   18800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018804 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E>:
   18804:	e9d0 2000 	ldrd	r2, r0, [r0]
   18808:	68c3      	ldr	r3, [r0, #12]
   1880a:	4610      	mov	r0, r2
   1880c:	4718      	bx	r3

0001880e <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E>:
   1880e:	460b      	mov	r3, r1
   18810:	e9d0 1200 	ldrd	r1, r2, [r0]
   18814:	4618      	mov	r0, r3
   18816:	f7fe bde3 	b.w	173e0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>
	...

0001881c <__semihost>:
	//    openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -f scripts/debug.ocd

	//  Warning: This code will trigger a breakpoint and hang unless a debugger is connected.
	//  That's how ARM Semihosting sends a command to the debugger to print a message.
	//  This code MUST be disabled on production devices.
    if (!log_enabled) return -1;
   1881c:	4b07      	ldr	r3, [pc, #28]	; (1883c <__semihost+0x20>)
   1881e:	781b      	ldrb	r3, [r3, #0]
   18820:	b14b      	cbz	r3, 18836 <__semihost+0x1a>
static int __semihost(int command, void* message) {
   18822:	b410      	push	{r4}
   18824:	4602      	mov	r2, r0
   18826:	460c      	mov	r4, r1
    __asm( 
   18828:	4610      	mov	r0, r2
   1882a:	4621      	mov	r1, r4
   1882c:	beab      	bkpt	0x00ab
		[cmd] "r" (command), 
		[msg] "r" (message)
	:  //  Clobbered register list:
		"r0", "r1", "memory"
	);
	return 0;  //  TODO
   1882e:	2000      	movs	r0, #0
}
   18830:	f85d 4b04 	ldr.w	r4, [sp], #4
   18834:	4770      	bx	lr
    if (!log_enabled) return -1;
   18836:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1883a:	4770      	bx	lr
   1883c:	20000100 	.word	0x20000100

00018840 <debugger_connected>:
// #define SYS_RENAME (0xf)
// #define SYS_EXIT   (0x18)

static int debugger_connected(void) {
    //  Return non-zero if debugger is connected. From repos/apache-mynewt-core/hw/mcu/ambiq/apollo2/src/hal_system.c
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
   18840:	4b02      	ldr	r3, [pc, #8]	; (1884c <debugger_connected+0xc>)
   18842:	6818      	ldr	r0, [r3, #0]
}
   18844:	f000 0001 	and.w	r0, r0, #1
   18848:	4770      	bx	lr
   1884a:	bf00      	nop
   1884c:	e000edf0 	.word	0xe000edf0

00018850 <semihost_write>:
#endif  //  !DISABLE_SEMIHOSTING

// We normally set the file handle to 2 to write to the debugger's stderr output.
#define SEMIHOST_HANDLE 2

static int semihost_write(uint32_t fh, const unsigned char *buffer, unsigned int length) {
   18850:	b570      	push	{r4, r5, r6, lr}
   18852:	b084      	sub	sp, #16
   18854:	4606      	mov	r6, r0
   18856:	460d      	mov	r5, r1
   18858:	4614      	mov	r4, r2
    //  Write "length" number of bytes from "buffer" to the debugger's file handle fh.
    //  We normally set fh=2 to write to the debugger's stderr output.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return 0;               //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    if (!debugger_connected()) { return 0; }  //  If debugger is not connected, quit.
   1885a:	f7ff fff1 	bl	18840 <debugger_connected>
   1885e:	4603      	mov	r3, r0
   18860:	b108      	cbz	r0, 18866 <semihost_write+0x16>
    if (length == 0) { return 0; }
   18862:	b91c      	cbnz	r4, 1886c <semihost_write+0x1c>
   18864:	2300      	movs	r3, #0
    args[0] = (uint32_t)fh;
    args[1] = (uint32_t)buffer;
    args[2] = (uint32_t)length;
    return __semihost(SYS_WRITE, args);
#endif  //  DISABLE_SEMIHOSTING
}
   18866:	4618      	mov	r0, r3
   18868:	b004      	add	sp, #16
   1886a:	bd70      	pop	{r4, r5, r6, pc}
    args[0] = (uint32_t)fh;
   1886c:	9601      	str	r6, [sp, #4]
    args[1] = (uint32_t)buffer;
   1886e:	9502      	str	r5, [sp, #8]
    args[2] = (uint32_t)length;
   18870:	9403      	str	r4, [sp, #12]
    return __semihost(SYS_WRITE, args);
   18872:	a901      	add	r1, sp, #4
   18874:	2005      	movs	r0, #5
   18876:	f7ff ffd1 	bl	1881c <__semihost>
   1887a:	4603      	mov	r3, r0
   1887c:	e7f3      	b.n	18866 <semihost_write+0x16>
	...

00018880 <console_flush>:

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
   18880:	b538      	push	{r3, r4, r5, lr}
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }       //  Skip if log not enabled.
   18882:	4b0e      	ldr	r3, [pc, #56]	; (188bc <console_flush+0x3c>)
   18884:	781b      	ldrb	r3, [r3, #0]
   18886:	b1bb      	cbz	r3, 188b8 <console_flush+0x38>
    if (!semihost_mbuf) { return; }     //  Buffer is empty, nothing to write.
   18888:	4b0d      	ldr	r3, [pc, #52]	; (188c0 <console_flush+0x40>)
   1888a:	681d      	ldr	r5, [r3, #0]
   1888c:	b1a5      	cbz	r5, 188b8 <console_flush+0x38>
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   1888e:	4b0d      	ldr	r3, [pc, #52]	; (188c4 <console_flush+0x44>)
   18890:	685b      	ldr	r3, [r3, #4]
   18892:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) { return; }   //  Don't flush if we are called during an interrupt.
   18896:	b97b      	cbnz	r3, 188b8 <console_flush+0x38>

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
   18898:	4b09      	ldr	r3, [pc, #36]	; (188c0 <console_flush+0x40>)
   1889a:	2200      	movs	r2, #0
   1889c:	601a      	str	r2, [r3, #0]

    struct os_mbuf *m = old;
   1889e:	462c      	mov	r4, r5
    while (m) {  //  For each mbuf in the chain...
   188a0:	e005      	b.n	188ae <console_flush+0x2e>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
   188a2:	88e2      	ldrh	r2, [r4, #6]
   188a4:	6821      	ldr	r1, [r4, #0]
   188a6:	2002      	movs	r0, #2
   188a8:	f7ff ffd2 	bl	18850 <semihost_write>
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
   188ac:	68e4      	ldr	r4, [r4, #12]
    while (m) {  //  For each mbuf in the chain...
   188ae:	2c00      	cmp	r4, #0
   188b0:	d1f7      	bne.n	188a2 <console_flush+0x22>
    }
    if (old) { os_mbuf_free_chain(old); }  //  Deallocate the old chain.
   188b2:	4628      	mov	r0, r5
   188b4:	f001 fbfc 	bl	1a0b0 <os_mbuf_free_chain>
}
   188b8:	bd38      	pop	{r3, r4, r5, pc}
   188ba:	bf00      	nop
   188bc:	20000100 	.word	0x20000100
   188c0:	200016b4 	.word	0x200016b4
   188c4:	e000ed00 	.word	0xe000ed00

000188c8 <disable_buffer>:
void disable_buffer(void) { buffer_enabled = false; console_flush(); }  //  Disable buffering.
   188c8:	b508      	push	{r3, lr}
   188ca:	f7ff ffd9 	bl	18880 <console_flush>
   188ce:	bd08      	pop	{r3, pc}

000188d0 <console_buffer>:

void console_buffer(const char *buffer, unsigned int length) {
   188d0:	b538      	push	{r3, r4, r5, lr}
    //  Append "length" number of bytes from "buffer" to the output buffer.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return;                 //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    int rc;
    if (!log_enabled) { return; }           //  Skip if log not enabled.
   188d2:	4b12      	ldr	r3, [pc, #72]	; (1891c <console_buffer+0x4c>)
   188d4:	781b      	ldrb	r3, [r3, #0]
   188d6:	b903      	cbnz	r3, 188da <console_buffer+0xa>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
    //  Append the data to the mbuf chain.  This may increase the numbere of mbufs in the chain.
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    if (rc) { return; }  //  If out of memory, quit.
#endif  //  DISABLE_SEMIHOSTING
}
   188d8:	bd38      	pop	{r3, r4, r5, pc}
   188da:	460d      	mov	r5, r1
   188dc:	4604      	mov	r4, r0
    if (!debugger_connected()) { return; }  //  If debugger is not connected, quit.
   188de:	f7ff ffaf 	bl	18840 <debugger_connected>
   188e2:	2800      	cmp	r0, #0
   188e4:	d0f8      	beq.n	188d8 <console_buffer+0x8>
    if (!semihost_mbuf) {                   //  Allocate mbuf if not already allocated.
   188e6:	4b0e      	ldr	r3, [pc, #56]	; (18920 <console_buffer+0x50>)
   188e8:	681b      	ldr	r3, [r3, #0]
   188ea:	b173      	cbz	r3, 1890a <console_buffer+0x3a>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
   188ec:	4b0c      	ldr	r3, [pc, #48]	; (18920 <console_buffer+0x50>)
   188ee:	6818      	ldr	r0, [r3, #0]
   188f0:	f001 fbf0 	bl	1a0d4 <os_mbuf_len>
   188f4:	4428      	add	r0, r5
   188f6:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   188fa:	d2ed      	bcs.n	188d8 <console_buffer+0x8>
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
   188fc:	b2aa      	uxth	r2, r5
   188fe:	4621      	mov	r1, r4
   18900:	4b07      	ldr	r3, [pc, #28]	; (18920 <console_buffer+0x50>)
   18902:	6818      	ldr	r0, [r3, #0]
   18904:	f001 fbf0 	bl	1a0e8 <os_mbuf_append>
   18908:	e7e6      	b.n	188d8 <console_buffer+0x8>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
   1890a:	2100      	movs	r1, #0
   1890c:	b2a8      	uxth	r0, r5
   1890e:	f001 fd93 	bl	1a438 <os_msys_get_pkthdr>
   18912:	4b03      	ldr	r3, [pc, #12]	; (18920 <console_buffer+0x50>)
   18914:	6018      	str	r0, [r3, #0]
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
   18916:	2800      	cmp	r0, #0
   18918:	d1e8      	bne.n	188ec <console_buffer+0x1c>
   1891a:	e7dd      	b.n	188d8 <console_buffer+0x8>
   1891c:	20000100 	.word	0x20000100
   18920:	200016b4 	.word	0x200016b4

00018924 <semihosting_console_write_ch>:
    float f_abs = *neg ? -f : f;          //  Absolute value of f
    *i = (int) f_abs;                     //  Integer part
    *d = ((int) (1000000.0f * f_abs)) % 1000000;  //  6 decimal places
}

static void semihosting_console_write_ch(char c) {
   18924:	b500      	push	{lr}
   18926:	b083      	sub	sp, #12
   18928:	f88d 0007 	strb.w	r0, [sp, #7]
    if (c == '\r') { return; }  //  Don't display \r.
   1892c:	280d      	cmp	r0, #13
   1892e:	d004      	beq.n	1893a <semihosting_console_write_ch+0x16>
    console_buffer(&c, 1);  //  Append the char to the output buffer.
   18930:	2101      	movs	r1, #1
   18932:	f10d 0007 	add.w	r0, sp, #7
   18936:	f7ff ffcb 	bl	188d0 <console_buffer>
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}
   1893a:	b003      	add	sp, #12
   1893c:	f85d fb04 	ldr.w	pc, [sp], #4

00018940 <console_printhex>:
void console_printhex(uint8_t v) {
   18940:	b510      	push	{r4, lr}
   18942:	b082      	sub	sp, #8
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   18944:	2310      	movs	r3, #16
    int length = 0;
   18946:	2200      	movs	r2, #0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   18948:	e005      	b.n	18956 <console_printhex+0x16>
        v = v % divisor;
   1894a:	fbb0 f1f3 	udiv	r1, r0, r3
   1894e:	fb03 0011 	mls	r0, r3, r1, r0
   18952:	b2c0      	uxtb	r0, r0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   18954:	091b      	lsrs	r3, r3, #4
   18956:	b18b      	cbz	r3, 1897c <console_printhex+0x3c>
        char digit = '0' + (char)(v / divisor);
   18958:	fbb0 f4f3 	udiv	r4, r0, r3
   1895c:	f104 0130 	add.w	r1, r4, #48	; 0x30
   18960:	b2c9      	uxtb	r1, r1
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
   18962:	2939      	cmp	r1, #57	; 0x39
   18964:	d902      	bls.n	1896c <console_printhex+0x2c>
   18966:	f104 0157 	add.w	r1, r4, #87	; 0x57
   1896a:	b2c9      	uxtb	r1, r1
            if (length < size) {
   1896c:	2a02      	cmp	r2, #2
   1896e:	dcec      	bgt.n	1894a <console_printhex+0xa>
                buffer[length++] = digit;
   18970:	ac02      	add	r4, sp, #8
   18972:	4414      	add	r4, r2
   18974:	f804 1c04 	strb.w	r1, [r4, #-4]
   18978:	3201      	adds	r2, #1
   1897a:	e7e6      	b.n	1894a <console_printhex+0xa>
    if (length == 0) { buffer[length++] = '0'; };
   1897c:	b92a      	cbnz	r2, 1898a <console_printhex+0x4a>
   1897e:	ab02      	add	r3, sp, #8
   18980:	4413      	add	r3, r2
   18982:	2130      	movs	r1, #48	; 0x30
   18984:	f803 1c04 	strb.w	r1, [r3, #-4]
   18988:	3201      	adds	r2, #1
    if (length < size) buffer[length] = 0;
   1898a:	2a02      	cmp	r2, #2
   1898c:	dc04      	bgt.n	18998 <console_printhex+0x58>
   1898e:	ab02      	add	r3, sp, #8
   18990:	441a      	add	r2, r3
   18992:	2300      	movs	r3, #0
   18994:	f802 3c04 	strb.w	r3, [r2, #-4]
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
   18998:	2300      	movs	r3, #0
   1899a:	f88d 3006 	strb.w	r3, [sp, #6]
    console_buffer(buffer, strlen(buffer));
   1899e:	a801      	add	r0, sp, #4
   189a0:	f002 fb73 	bl	1b08a <strlen>
   189a4:	4601      	mov	r1, r0
   189a6:	a801      	add	r0, sp, #4
   189a8:	f7ff ff92 	bl	188d0 <console_buffer>
}
   189ac:	b002      	add	sp, #8
   189ae:	bd10      	pop	{r4, pc}

000189b0 <console_printint>:
void console_printint(int i) {
   189b0:	b508      	push	{r3, lr}
    console_printf("%d", i);
   189b2:	4601      	mov	r1, r0
   189b4:	4801      	ldr	r0, [pc, #4]	; (189bc <console_printint+0xc>)
   189b6:	f000 f873 	bl	18aa0 <console_printf>
}
   189ba:	bd08      	pop	{r3, pc}
   189bc:	00020e44 	.word	0x00020e44

000189c0 <console_dump>:
    if (buffer == NULL || len == 0) { return; }
   189c0:	b180      	cbz	r0, 189e4 <console_dump+0x24>
void console_dump(const uint8_t *buffer, unsigned int len) {
   189c2:	b570      	push	{r4, r5, r6, lr}
   189c4:	4606      	mov	r6, r0
    if (buffer == NULL || len == 0) { return; }
   189c6:	b161      	cbz	r1, 189e2 <console_dump+0x22>
   189c8:	460d      	mov	r5, r1
	for (int i = 0; i < len; i++) { console_printhex(buffer[i]); console_buffer(" ", 1); } 
   189ca:	2400      	movs	r4, #0
   189cc:	e007      	b.n	189de <console_dump+0x1e>
   189ce:	5d30      	ldrb	r0, [r6, r4]
   189d0:	f7ff ffb6 	bl	18940 <console_printhex>
   189d4:	2101      	movs	r1, #1
   189d6:	4804      	ldr	r0, [pc, #16]	; (189e8 <console_dump+0x28>)
   189d8:	f7ff ff7a 	bl	188d0 <console_buffer>
   189dc:	3401      	adds	r4, #1
   189de:	42ac      	cmp	r4, r5
   189e0:	d3f5      	bcc.n	189ce <console_dump+0xe>
}
   189e2:	bd70      	pop	{r4, r5, r6, pc}
   189e4:	4770      	bx	lr
   189e6:	bf00      	nop
   189e8:	00020e40 	.word	0x00020e40

000189ec <console_out_nolock>:

int console_out_nolock(int character) {
   189ec:	b538      	push	{r3, r4, r5, lr}
    char c = (char)character;
   189ee:	b2c5      	uxtb	r5, r0
    if (g_silence_console) { return c; }
   189f0:	4b0b      	ldr	r3, [pc, #44]	; (18a20 <console_out_nolock+0x34>)
   189f2:	781b      	ldrb	r3, [r3, #0]
   189f4:	b953      	cbnz	r3, 18a0c <console_out_nolock+0x20>
   189f6:	4604      	mov	r4, r0
    if ('\n' == c) {
   189f8:	2d0a      	cmp	r5, #10
   189fa:	d009      	beq.n	18a10 <console_out_nolock+0x24>
        semihosting_console_write_ch('\r');
        console_is_midline = 0;
    } else {
        console_is_midline = 1;
   189fc:	4b09      	ldr	r3, [pc, #36]	; (18a24 <console_out_nolock+0x38>)
   189fe:	2201      	movs	r2, #1
   18a00:	601a      	str	r2, [r3, #0]
    }
    semihosting_console_write_ch(c);
   18a02:	4628      	mov	r0, r5
   18a04:	f7ff ff8e 	bl	18924 <semihosting_console_write_ch>
    return character;
   18a08:	4620      	mov	r0, r4
}
   18a0a:	bd38      	pop	{r3, r4, r5, pc}
   18a0c:	4628      	mov	r0, r5
    if (g_silence_console) { return c; }
   18a0e:	e7fc      	b.n	18a0a <console_out_nolock+0x1e>
        semihosting_console_write_ch('\r');
   18a10:	200d      	movs	r0, #13
   18a12:	f7ff ff87 	bl	18924 <semihosting_console_write_ch>
        console_is_midline = 0;
   18a16:	4b03      	ldr	r3, [pc, #12]	; (18a24 <console_out_nolock+0x38>)
   18a18:	2200      	movs	r2, #0
   18a1a:	601a      	str	r2, [r3, #0]
   18a1c:	e7f1      	b.n	18a02 <console_out_nolock+0x16>
   18a1e:	bf00      	nop
   18a20:	2000a564 	.word	0x2000a564
   18a24:	2000a568 	.word	0x2000a568

00018a28 <semihosting_console_init>:

void console_rx_restart(void) {}

int semihosting_console_is_init(void) { return 1; }

int semihosting_console_init(void) { return 0; }
   18a28:	2000      	movs	r0, #0
   18a2a:	4770      	bx	lr

00018a2c <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
   18a2c:	b570      	push	{r4, r5, r6, lr}
   18a2e:	4606      	mov	r6, r0
   18a30:	460d      	mov	r5, r1
    int i;
    for (i = 0; i < cnt; i++) {
   18a32:	2400      	movs	r4, #0
   18a34:	42ac      	cmp	r4, r5
   18a36:	da07      	bge.n	18a48 <console_write+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
   18a38:	5d30      	ldrb	r0, [r6, r4]
   18a3a:	f7ff ffd7 	bl	189ec <console_out_nolock>
   18a3e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   18a42:	d001      	beq.n	18a48 <console_write+0x1c>
    for (i = 0; i < cnt; i++) {
   18a44:	3401      	adds	r4, #1
   18a46:	e7f5      	b.n	18a34 <console_write+0x8>
    }
}
   18a48:	bd70      	pop	{r4, r5, r6, pc}

00018a4a <console_blocking_mode>:

void console_blocking_mode(void) {
   18a4a:	b508      	push	{r3, lr}
    disable_buffer();
   18a4c:	f7ff ff3c 	bl	188c8 <disable_buffer>
}
   18a50:	bd08      	pop	{r3, pc}
	...

00018a54 <console_pkg_init>:

void console_deinit(void) {}

void console_reinit(void) {}

void console_pkg_init(void) {
   18a54:	b510      	push	{r4, lr}
   18a56:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   18a58:	4b0d      	ldr	r3, [pc, #52]	; (18a90 <console_pkg_init+0x3c>)
   18a5a:	781b      	ldrb	r3, [r3, #0]
   18a5c:	b193      	cbz	r3, 18a84 <console_pkg_init+0x30>

    os_eventq_init(&avail_queue);
   18a5e:	480d      	ldr	r0, [pc, #52]	; (18a94 <console_pkg_init+0x40>)
   18a60:	f001 f9fa 	bl	19e58 <os_eventq_init>
    os_mutex_init(&console_write_lock);
   18a64:	480c      	ldr	r0, [pc, #48]	; (18a98 <console_pkg_init+0x44>)
   18a66:	f001 fd15 	bl	1a494 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_SEMIHOSTING)
    rc = semihosting_console_init();
   18a6a:	f7ff ffdd 	bl	18a28 <semihosting_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
   18a6e:	b138      	cbz	r0, 18a80 <console_pkg_init+0x2c>
   18a70:	2000      	movs	r0, #0
   18a72:	9000      	str	r0, [sp, #0]
   18a74:	4b09      	ldr	r3, [pc, #36]	; (18a9c <console_pkg_init+0x48>)
   18a76:	681c      	ldr	r4, [r3, #0]
   18a78:	4603      	mov	r3, r0
   18a7a:	4602      	mov	r2, r0
   18a7c:	4601      	mov	r1, r0
   18a7e:	47a0      	blx	r4
}
   18a80:	b002      	add	sp, #8
   18a82:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   18a84:	461a      	mov	r2, r3
   18a86:	4619      	mov	r1, r3
   18a88:	4618      	mov	r0, r3
   18a8a:	f000 fed1 	bl	19830 <__assert_func>
   18a8e:	bf00      	nop
   18a90:	2000a56c 	.word	0x2000a56c
   18a94:	200016b8 	.word	0x200016b8
   18a98:	200016c8 	.word	0x200016c8
   18a9c:	20000104 	.word	0x20000104

00018aa0 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
   18aa0:	b40f      	push	{r0, r1, r2, r3}
   18aa2:	b510      	push	{r4, lr}
   18aa4:	b082      	sub	sp, #8
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
   18aa6:	f000 f81f 	bl	18ae8 <console_get_ticks>
   18aaa:	b160      	cbz	r0, 18ac6 <console_printf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
   18aac:	4b0c      	ldr	r3, [pc, #48]	; (18ae0 <console_printf+0x40>)
   18aae:	681b      	ldr	r3, [r3, #0]
   18ab0:	b10b      	cbz	r3, 18ab6 <console_printf+0x16>
    num_chars = 0;
   18ab2:	2400      	movs	r4, #0
   18ab4:	e008      	b.n	18ac8 <console_printf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
   18ab6:	f002 f8d9 	bl	1ac6c <os_time_get>
   18aba:	4601      	mov	r1, r0
   18abc:	4809      	ldr	r0, [pc, #36]	; (18ae4 <console_printf+0x44>)
   18abe:	f002 fd97 	bl	1b5f0 <printf>
   18ac2:	4604      	mov	r4, r0
   18ac4:	e000      	b.n	18ac8 <console_printf+0x28>
    num_chars = 0;
   18ac6:	2400      	movs	r4, #0
        }
    }

    va_start(args, fmt);
   18ac8:	a905      	add	r1, sp, #20
   18aca:	9101      	str	r1, [sp, #4]
    num_chars += vprintf(fmt, args);
   18acc:	9804      	ldr	r0, [sp, #16]
   18ace:	f002 fdbf 	bl	1b650 <vprintf>
    va_end(args);

    return num_chars;
}
   18ad2:	4420      	add	r0, r4
   18ad4:	b002      	add	sp, #8
   18ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18ada:	b004      	add	sp, #16
   18adc:	4770      	bx	lr
   18ade:	bf00      	nop
   18ae0:	2000a568 	.word	0x2000a568
   18ae4:	00020e48 	.word	0x00020e48

00018ae8 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
   18ae8:	4b01      	ldr	r3, [pc, #4]	; (18af0 <console_get_ticks+0x8>)
   18aea:	7818      	ldrb	r0, [r3, #0]
   18aec:	4770      	bx	lr
   18aee:	bf00      	nop
   18af0:	200016d4 	.word	0x200016d4

00018af4 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   18af4:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   18af6:	f000 fe9b 	bl	19830 <__assert_func>
	...

00018afc <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   18afc:	4b01      	ldr	r3, [pc, #4]	; (18b04 <sysinit_start+0x8>)
   18afe:	2201      	movs	r2, #1
   18b00:	701a      	strb	r2, [r3, #0]
}
   18b02:	4770      	bx	lr
   18b04:	2000a56c 	.word	0x2000a56c

00018b08 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   18b08:	4b01      	ldr	r3, [pc, #4]	; (18b10 <sysinit_end+0x8>)
   18b0a:	2200      	movs	r2, #0
   18b0c:	701a      	strb	r2, [r3, #0]
}
   18b0e:	4770      	bx	lr
   18b10:	2000a56c 	.word	0x2000a56c

00018b14 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
   18b14:	4a09      	ldr	r2, [pc, #36]	; (18b3c <NVIC_Relocate+0x28>)
   18b16:	4b0a      	ldr	r3, [pc, #40]	; (18b40 <NVIC_Relocate+0x2c>)
   18b18:	429a      	cmp	r2, r3
   18b1a:	d00a      	beq.n	18b32 <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   18b1c:	2300      	movs	r3, #0
   18b1e:	e006      	b.n	18b2e <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
   18b20:	4a07      	ldr	r2, [pc, #28]	; (18b40 <NVIC_Relocate+0x2c>)
   18b22:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   18b26:	4a05      	ldr	r2, [pc, #20]	; (18b3c <NVIC_Relocate+0x28>)
   18b28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   18b2c:	3301      	adds	r3, #1
   18b2e:	2b35      	cmp	r3, #53	; 0x35
   18b30:	ddf6      	ble.n	18b20 <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
   18b32:	4a02      	ldr	r2, [pc, #8]	; (18b3c <NVIC_Relocate+0x28>)
   18b34:	4b03      	ldr	r3, [pc, #12]	; (18b44 <NVIC_Relocate+0x30>)
   18b36:	609a      	str	r2, [r3, #8]
#endif
}
   18b38:	4770      	bx	lr
   18b3a:	bf00      	nop
   18b3c:	20000000 	.word	0x20000000
   18b40:	00008020 	.word	0x00008020
   18b44:	e000ed00 	.word	0xe000ed00

00018b48 <hal_gpio_irq_handler>:
 *
 * @param index
 */
static void
hal_gpio_irq_handler(void)
{
   18b48:	b510      	push	{r4, lr}
#if NRF52840_XXAA
    gpio_state |= (uint64_t)NRF_P1->IN << 32;
#endif
#endif

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   18b4a:	2400      	movs	r4, #0
   18b4c:	e000      	b.n	18b50 <hal_gpio_irq_handler+0x8>
   18b4e:	3401      	adds	r4, #1
   18b50:	2c07      	cmp	r4, #7
   18b52:	dc1c      	bgt.n	18b8e <hal_gpio_irq_handler+0x46>
        if ((hal_gpio_irqs[i].sense_trig == HAL_GPIO_SENSE_TRIG_BOTH) ||
            (hal_gpio_irqs[i].sense_trig == sense_trig)) {
            hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
        }
#else
        if (NRF_GPIOTE->EVENTS_IN[i] && (NRF_GPIOTE->INTENSET & (1 << i))) {
   18b54:	f104 0340 	add.w	r3, r4, #64	; 0x40
   18b58:	4a0d      	ldr	r2, [pc, #52]	; (18b90 <hal_gpio_irq_handler+0x48>)
   18b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   18b5e:	2b00      	cmp	r3, #0
   18b60:	d0f5      	beq.n	18b4e <hal_gpio_irq_handler+0x6>
   18b62:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   18b66:	2301      	movs	r3, #1
   18b68:	40a3      	lsls	r3, r4
   18b6a:	421a      	tst	r2, r3
   18b6c:	d0ef      	beq.n	18b4e <hal_gpio_irq_handler+0x6>
            NRF_GPIOTE->EVENTS_IN[i] = 0;
   18b6e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   18b72:	4a07      	ldr	r2, [pc, #28]	; (18b90 <hal_gpio_irq_handler+0x48>)
   18b74:	2100      	movs	r1, #0
   18b76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            if (hal_gpio_irqs[i].func) {
   18b7a:	4b06      	ldr	r3, [pc, #24]	; (18b94 <hal_gpio_irq_handler+0x4c>)
   18b7c:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   18b80:	2a00      	cmp	r2, #0
   18b82:	d0e4      	beq.n	18b4e <hal_gpio_irq_handler+0x6>
                hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
   18b84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   18b88:	6858      	ldr	r0, [r3, #4]
   18b8a:	4790      	blx	r2
   18b8c:	e7df      	b.n	18b4e <hal_gpio_irq_handler+0x6>
        }
#endif
    }

    os_trace_isr_exit();
}
   18b8e:	bd10      	pop	{r4, pc}
   18b90:	40006000 	.word	0x40006000
   18b94:	200016d8 	.word	0x200016d8

00018b98 <hal_gpio_irq_setup>:
static void
hal_gpio_irq_setup(void)
{
    static uint8_t irq_setup = 0;

    if (!irq_setup) {
   18b98:	4b06      	ldr	r3, [pc, #24]	; (18bb4 <hal_gpio_irq_setup+0x1c>)
   18b9a:	781b      	ldrb	r3, [r3, #0]
   18b9c:	b94b      	cbnz	r3, 18bb2 <hal_gpio_irq_setup+0x1a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   18b9e:	4b06      	ldr	r3, [pc, #24]	; (18bb8 <hal_gpio_irq_setup+0x20>)
   18ba0:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   18ba2:	4a06      	ldr	r2, [pc, #24]	; (18bbc <hal_gpio_irq_setup+0x24>)
   18ba4:	659a      	str	r2, [r3, #88]	; 0x58
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18ba6:	4b06      	ldr	r3, [pc, #24]	; (18bc0 <hal_gpio_irq_setup+0x28>)
   18ba8:	2240      	movs	r2, #64	; 0x40
   18baa:	601a      	str	r2, [r3, #0]
        NVIC_SetVector(GPIOTE_IRQn, (uint32_t)hal_gpio_irq_handler);
        NVIC_EnableIRQ(GPIOTE_IRQn);
        irq_setup = 1;
   18bac:	4b01      	ldr	r3, [pc, #4]	; (18bb4 <hal_gpio_irq_setup+0x1c>)
   18bae:	2201      	movs	r2, #1
   18bb0:	701a      	strb	r2, [r3, #0]
#if MYNEWT_VAL(MCU_GPIO_USE_PORT_EVENT)
        NRF_GPIOTE->INTENCLR = GPIOTE_INTENCLR_PORT_Msk;
        NRF_GPIOTE->EVENTS_PORT = 0;
#endif
    }
}
   18bb2:	4770      	bx	lr
   18bb4:	20001718 	.word	0x20001718
   18bb8:	e000ed00 	.word	0xe000ed00
   18bbc:	00018b49 	.word	0x00018b49
   18bc0:	e000e100 	.word	0xe000e100

00018bc4 <hal_gpio_find_empty_slot>:
static int
hal_gpio_find_empty_slot(void)
{
    int i;

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   18bc4:	2000      	movs	r0, #0
   18bc6:	2807      	cmp	r0, #7
   18bc8:	dc05      	bgt.n	18bd6 <hal_gpio_find_empty_slot+0x12>
        if (hal_gpio_irqs[i].func == NULL) {
   18bca:	4b04      	ldr	r3, [pc, #16]	; (18bdc <hal_gpio_find_empty_slot+0x18>)
   18bcc:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   18bd0:	b11b      	cbz	r3, 18bda <hal_gpio_find_empty_slot+0x16>
    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   18bd2:	3001      	adds	r0, #1
   18bd4:	e7f7      	b.n	18bc6 <hal_gpio_find_empty_slot+0x2>
            return i;
        }
    }
    return -1;
   18bd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   18bda:	4770      	bx	lr
   18bdc:	200016d8 	.word	0x200016d8

00018be0 <hal_gpio_find_pin>:
        if (hal_gpio_irqs[i].func && hal_gpio_irqs[i].pin == pin) {
            return i;
        }
    }
#else
    pin = pin << GPIOTE_CONFIG_PSEL_Pos;
   18be0:	0201      	lsls	r1, r0, #8

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   18be2:	2000      	movs	r0, #0
   18be4:	e000      	b.n	18be8 <hal_gpio_find_pin+0x8>
   18be6:	3001      	adds	r0, #1
   18be8:	2807      	cmp	r0, #7
   18bea:	dc0e      	bgt.n	18c0a <hal_gpio_find_pin+0x2a>
        if (hal_gpio_irqs[i].func &&
   18bec:	4b08      	ldr	r3, [pc, #32]	; (18c10 <hal_gpio_find_pin+0x30>)
   18bee:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   18bf2:	2b00      	cmp	r3, #0
   18bf4:	d0f7      	beq.n	18be6 <hal_gpio_find_pin+0x6>
           (NRF_GPIOTE->CONFIG[i] & HAL_GPIOTE_PIN_MASK) == pin) {
   18bf6:	f500 73a2 	add.w	r3, r0, #324	; 0x144
   18bfa:	4a06      	ldr	r2, [pc, #24]	; (18c14 <hal_gpio_find_pin+0x34>)
   18bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   18c00:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
        if (hal_gpio_irqs[i].func &&
   18c04:	428b      	cmp	r3, r1
   18c06:	d1ee      	bne.n	18be6 <hal_gpio_find_pin+0x6>
   18c08:	e001      	b.n	18c0e <hal_gpio_find_pin+0x2e>
            return i;
        }
    }
#endif

    return -1;
   18c0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   18c0e:	4770      	bx	lr
   18c10:	200016d8 	.word	0x200016d8
   18c14:	40006000 	.word	0x40006000

00018c18 <hal_gpio_init_in>:
    switch (pull) {
   18c18:	2901      	cmp	r1, #1
   18c1a:	d003      	beq.n	18c24 <hal_gpio_init_in+0xc>
   18c1c:	2902      	cmp	r1, #2
   18c1e:	d00f      	beq.n	18c40 <hal_gpio_init_in+0x28>
        conf = 0;
   18c20:	2100      	movs	r1, #0
        break;
   18c22:	e000      	b.n	18c26 <hal_gpio_init_in+0xe>
        conf = GPIO_PIN_CNF_PULL_Pullup << GPIO_PIN_CNF_PULL_Pos;
   18c24:	210c      	movs	r1, #12
    port->PIN_CNF[pin_index] = conf;
   18c26:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   18c2a:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   18c2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRCLR = HAL_GPIO_MASK(pin);
   18c32:	2301      	movs	r3, #1
   18c34:	fa03 f000 	lsl.w	r0, r3, r0
   18c38:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
}
   18c3c:	2000      	movs	r0, #0
   18c3e:	4770      	bx	lr
        conf = GPIO_PIN_CNF_PULL_Pulldown << GPIO_PIN_CNF_PULL_Pos;
   18c40:	2104      	movs	r1, #4
   18c42:	e7f0      	b.n	18c26 <hal_gpio_init_in+0xe>

00018c44 <hal_gpio_init_out>:
    if (val) {
   18c44:	b999      	cbnz	r1, 18c6e <hal_gpio_init_out+0x2a>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   18c46:	2301      	movs	r3, #1
   18c48:	4083      	lsls	r3, r0
   18c4a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   18c4e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
   18c52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   18c56:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   18c5a:	2103      	movs	r1, #3
   18c5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRSET = HAL_GPIO_MASK(pin);
   18c60:	2301      	movs	r3, #1
   18c62:	fa03 f000 	lsl.w	r0, r3, r0
   18c66:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
}
   18c6a:	2000      	movs	r0, #0
   18c6c:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   18c6e:	2301      	movs	r3, #1
   18c70:	4083      	lsls	r3, r0
   18c72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   18c76:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   18c7a:	e7ea      	b.n	18c52 <hal_gpio_init_out+0xe>

00018c7c <hal_gpio_write>:
    if (val) {
   18c7c:	b939      	cbnz	r1, 18c8e <hal_gpio_write+0x12>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   18c7e:	2301      	movs	r3, #1
   18c80:	fa03 f000 	lsl.w	r0, r3, r0
   18c84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18c88:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   18c8c:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   18c8e:	2301      	movs	r3, #1
   18c90:	fa03 f000 	lsl.w	r0, r3, r0
   18c94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18c98:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   18c9c:	4770      	bx	lr

00018c9e <hal_gpio_read>:
    return (port->DIR & HAL_GPIO_MASK(pin)) ?
   18c9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18ca2:	f8d3 2514 	ldr.w	r2, [r3, #1300]	; 0x514
   18ca6:	2301      	movs	r3, #1
   18ca8:	4083      	lsls	r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   18caa:	421a      	tst	r2, r3
   18cac:	d108      	bne.n	18cc0 <hal_gpio_read+0x22>
        (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   18cae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18cb2:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   18cb6:	fa23 f000 	lsr.w	r0, r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   18cba:	f000 0001 	and.w	r0, r0, #1
}
   18cbe:	4770      	bx	lr
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   18cc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18cc4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
   18cc8:	fa23 f000 	lsr.w	r0, r3, r0
   18ccc:	f000 0001 	and.w	r0, r0, #1
   18cd0:	4770      	bx	lr
	...

00018cd4 <hal_gpio_irq_init>:
 * @return int
 */
int
hal_gpio_irq_init(int pin, hal_gpio_irq_handler_t handler, void *arg,
                  hal_gpio_irq_trig_t trig, hal_gpio_pull_t pull)
{
   18cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18cd8:	4680      	mov	r8, r0
   18cda:	460f      	mov	r7, r1
   18cdc:	4616      	mov	r6, r2
   18cde:	461c      	mov	r4, r3
    uint32_t conf;
    int i;

    hal_gpio_irq_setup();
   18ce0:	f7ff ff5a 	bl	18b98 <hal_gpio_irq_setup>
    i = hal_gpio_find_empty_slot();
   18ce4:	f7ff ff6e 	bl	18bc4 <hal_gpio_find_empty_slot>
    if (i < 0) {
   18ce8:	1e05      	subs	r5, r0, #0
   18cea:	db27      	blt.n	18d3c <hal_gpio_irq_init+0x68>
        return -1;
    }
    hal_gpio_init_in(pin, pull);
   18cec:	f89d 1018 	ldrb.w	r1, [sp, #24]
   18cf0:	4640      	mov	r0, r8
   18cf2:	f7ff ff91 	bl	18c18 <hal_gpio_init_in>
    default:
        hal_gpio_irqs[i].sense_trig = HAL_GPIO_SENSE_TRIG_NONE;
        return -1;
    }
#else
    switch (trig) {
   18cf6:	2c02      	cmp	r4, #2
   18cf8:	d01d      	beq.n	18d36 <hal_gpio_irq_init+0x62>
   18cfa:	2c03      	cmp	r4, #3
   18cfc:	d018      	beq.n	18d30 <hal_gpio_irq_init+0x5c>
   18cfe:	2c01      	cmp	r4, #1
   18d00:	d002      	beq.n	18d08 <hal_gpio_irq_init+0x34>
        break;
    case HAL_GPIO_TRIG_BOTH:
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
        break;
    default:
        return -1;
   18d02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18d06:	e011      	b.n	18d2c <hal_gpio_irq_init+0x58>
        conf = GPIOTE_CONFIG_POLARITY_LoToHi << GPIOTE_CONFIG_POLARITY_Pos;
   18d08:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    }

    conf |= pin << GPIOTE_CONFIG_PSEL_Pos;
   18d0c:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
    conf |= GPIOTE_CONFIG_MODE_Event << GPIOTE_CONFIG_MODE_Pos;
   18d10:	f040 0001 	orr.w	r0, r0, #1

    NRF_GPIOTE->CONFIG[i] = conf;
   18d14:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   18d18:	4b0a      	ldr	r3, [pc, #40]	; (18d44 <hal_gpio_irq_init+0x70>)
   18d1a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
#endif

    hal_gpio_irqs[i].func = handler;
   18d1e:	4b0a      	ldr	r3, [pc, #40]	; (18d48 <hal_gpio_irq_init+0x74>)
   18d20:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
    hal_gpio_irqs[i].arg = arg;
   18d24:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   18d28:	605e      	str	r6, [r3, #4]

    return 0;
   18d2a:	2000      	movs	r0, #0
}
   18d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
   18d30:	f44f 3040 	mov.w	r0, #196608	; 0x30000
        break;
   18d34:	e7ea      	b.n	18d0c <hal_gpio_irq_init+0x38>
        conf = GPIOTE_CONFIG_POLARITY_HiToLo << GPIOTE_CONFIG_POLARITY_Pos;
   18d36:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   18d3a:	e7e7      	b.n	18d0c <hal_gpio_irq_init+0x38>
        return -1;
   18d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18d40:	e7f4      	b.n	18d2c <hal_gpio_irq_init+0x58>
   18d42:	bf00      	nop
   18d44:	40006000 	.word	0x40006000
   18d48:	200016d8 	.word	0x200016d8

00018d4c <hal_gpio_irq_enable>:
 *
 * @param pin
 */
void
hal_gpio_irq_enable(int pin)
{
   18d4c:	b508      	push	{r3, lr}
    NRF_GPIO_Type *nrf_gpio;
    int pin_index;
#endif
    int i;

    i = hal_gpio_find_pin(pin);
   18d4e:	f7ff ff47 	bl	18be0 <hal_gpio_find_pin>
    if (i < 0) {
   18d52:	2800      	cmp	r0, #0
   18d54:	db0a      	blt.n	18d6c <hal_gpio_irq_enable+0x20>
        nrf_gpio->PIN_CNF[pin_index] |= GPIO_PIN_CNF_SENSE_High << GPIO_PIN_CNF_SENSE_Pos;
    }

    NRF_GPIOTE->INTENSET = GPIOTE_INTENSET_PORT_Msk;
#else
    NRF_GPIOTE->EVENTS_IN[i] = 0;
   18d56:	4a06      	ldr	r2, [pc, #24]	; (18d70 <hal_gpio_irq_enable+0x24>)
   18d58:	f100 0340 	add.w	r3, r0, #64	; 0x40
   18d5c:	2100      	movs	r1, #0
   18d5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NRF_GPIOTE->INTENSET = 1 << i;
   18d62:	2301      	movs	r3, #1
   18d64:	fa03 f000 	lsl.w	r0, r3, r0
   18d68:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
#endif
}
   18d6c:	bd08      	pop	{r3, pc}
   18d6e:	bf00      	nop
   18d70:	40006000 	.word	0x40006000

00018d74 <hal_i2c_delay_us>:

static void
hal_i2c_delay_us(uint32_t number_of_us)
{
register uint32_t delay __ASM ("r0") = number_of_us;
__ASM volatile (
   18d74:	3801      	subs	r0, #1
   18d76:	bf00      	nop
   18d78:	bf00      	nop
   18d7a:	bf00      	nop
   18d7c:	bf00      	nop
   18d7e:	bf00      	nop
   18d80:	bf00      	nop
   18d82:	bf00      	nop
   18d84:	bf00      	nop
   18d86:	bf00      	nop
   18d88:	bf00      	nop
   18d8a:	bf00      	nop
   18d8c:	bf00      	nop
   18d8e:	bf00      	nop
   18d90:	bf00      	nop
   18d92:	bf00      	nop
   18d94:	bf00      	nop
   18d96:	bf00      	nop
   18d98:	bf00      	nop
   18d9a:	bf00      	nop
   18d9c:	bf00      	nop
   18d9e:	bf00      	nop
   18da0:	bf00      	nop
   18da2:	bf00      	nop
   18da4:	bf00      	nop
   18da6:	bf00      	nop
   18da8:	bf00      	nop
   18daa:	bf00      	nop
   18dac:	bf00      	nop
   18dae:	bf00      	nop
   18db0:	bf00      	nop
   18db2:	bf00      	nop
   18db4:	bf00      	nop
   18db6:	bf00      	nop
   18db8:	bf00      	nop
   18dba:	bf00      	nop
   18dbc:	bf00      	nop
   18dbe:	bf00      	nop
   18dc0:	bf00      	nop
   18dc2:	bf00      	nop
   18dc4:	bf00      	nop
   18dc6:	bf00      	nop
   18dc8:	bf00      	nop
   18dca:	bf00      	nop
   18dcc:	bf00      	nop
   18dce:	bf00      	nop
   18dd0:	bf00      	nop
   18dd2:	bf00      	nop
   18dd4:	bf00      	nop
   18dd6:	bf00      	nop
   18dd8:	bf00      	nop
   18dda:	bf00      	nop
   18ddc:	bf00      	nop
   18dde:	bf00      	nop
   18de0:	bf00      	nop
   18de2:	bf00      	nop
   18de4:	bf00      	nop
   18de6:	bf00      	nop
   18de8:	bf00      	nop
   18dea:	d1c3      	bne.n	18d74 <hal_i2c_delay_us>
    " BNE 1b\n"
#ifdef NRF51
    ".syntax divided\n"
#endif
    : "+r" (delay));
}
   18dec:	4770      	bx	lr
	...

00018df0 <hal_i2c_resolve>:

static int
hal_i2c_resolve(uint8_t i2c_num, struct nrf52_hal_i2c **out_i2c)
{
    if (i2c_num >= NRF52_HAL_I2C_MAX) {
   18df0:	2801      	cmp	r0, #1
   18df2:	d806      	bhi.n	18e02 <hal_i2c_resolve+0x12>
        *out_i2c = NULL;
        return HAL_I2C_ERR_INVAL;
    }

    *out_i2c = nrf52_hal_i2cs[i2c_num];
   18df4:	4b06      	ldr	r3, [pc, #24]	; (18e10 <hal_i2c_resolve+0x20>)
   18df6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   18dfa:	600b      	str	r3, [r1, #0]
    if (*out_i2c == NULL) {
   18dfc:	b12b      	cbz	r3, 18e0a <hal_i2c_resolve+0x1a>
        return HAL_I2C_ERR_INVAL;
    }

    return 0;
   18dfe:	2000      	movs	r0, #0
}
   18e00:	4770      	bx	lr
        *out_i2c = NULL;
   18e02:	2300      	movs	r3, #0
   18e04:	600b      	str	r3, [r1, #0]
        return HAL_I2C_ERR_INVAL;
   18e06:	2002      	movs	r0, #2
   18e08:	4770      	bx	lr
        return HAL_I2C_ERR_INVAL;
   18e0a:	2002      	movs	r0, #2
   18e0c:	4770      	bx	lr
   18e0e:	bf00      	nop
   18e10:	00020e50 	.word	0x00020e50

00018e14 <hal_i2c_convert_status>:
 * Converts an nRF SDK I2C status to a HAL I2C error code.
 */
static int
hal_i2c_convert_status(int nrf_status)
{
    if (nrf_status == 0) {
   18e14:	b148      	cbz	r0, 18e2a <hal_i2c_convert_status+0x16>
        return 0;
    } else if (nrf_status & NRF_TWIM_ERROR_DATA_NACK) {
   18e16:	f010 0f04 	tst.w	r0, #4
   18e1a:	d107      	bne.n	18e2c <hal_i2c_convert_status+0x18>
        return HAL_I2C_ERR_DATA_NACK;
    } else if (nrf_status & NRF_TWIM_ERROR_ADDRESS_NACK) {
   18e1c:	f010 0f02 	tst.w	r0, #2
   18e20:	d101      	bne.n	18e26 <hal_i2c_convert_status+0x12>
        return HAL_I2C_ERR_ADDR_NACK;
    } else {
        return HAL_I2C_ERR_UNKNOWN;
   18e22:	2001      	movs	r0, #1
    }
}
   18e24:	4770      	bx	lr
        return HAL_I2C_ERR_ADDR_NACK;
   18e26:	2004      	movs	r0, #4
   18e28:	4770      	bx	lr
   18e2a:	4770      	bx	lr
        return HAL_I2C_ERR_DATA_NACK;
   18e2c:	2005      	movs	r0, #5
   18e2e:	4770      	bx	lr

00018e30 <read_gpio_inbuffer>:
read_gpio_inbuffer(int pin)
{
    NRF_GPIO_Type *port;
    port = HAL_GPIO_PORT(pin);

    return (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   18e30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18e34:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   18e38:	fa23 f000 	lsr.w	r0, r3, r0
}
   18e3c:	f000 0001 	and.w	r0, r0, #1
   18e40:	4770      	bx	lr

00018e42 <hal_i2c_clear_bus>:
 * Clear the bus after reset by clocking 9 bits manually.
 * This should reset state from (most of) the devices on the other end.
 */
static void
hal_i2c_clear_bus(int scl_pin, int sda_pin)
{
   18e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18e46:	4605      	mov	r5, r0
   18e48:	460e      	mov	r6, r1
    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(scl_pin);
    sda_port = HAL_GPIO_PORT(sda_pin);

    /* Input connected, standard-low disconnected-high, pull-ups */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   18e4a:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   18e4e:	f500 78e0 	add.w	r8, r0, #448	; 0x1c0
   18e52:	f240 630c 	movw	r3, #1548	; 0x60c
   18e56:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   18e5a:	f501 77e0 	add.w	r7, r1, #448	; 0x1c0
   18e5e:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_gpio_write(scl_pin, 1);
   18e62:	2101      	movs	r1, #1
   18e64:	f7ff ff0a 	bl	18c7c <hal_gpio_write>
    hal_gpio_write(sda_pin, 1);
   18e68:	2101      	movs	r1, #1
   18e6a:	4630      	mov	r0, r6
   18e6c:	f7ff ff06 	bl	18c7c <hal_gpio_write>

    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF_CLR;
   18e70:	f240 630d 	movw	r3, #1549	; 0x60d
   18e74:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF_CLR;
   18e78:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_i2c_delay_us(4);
   18e7c:	2004      	movs	r0, #4
   18e7e:	f7ff ff79 	bl	18d74 <hal_i2c_delay_us>

    for (i = 0; i < 9; i++) {
   18e82:	2400      	movs	r4, #0
   18e84:	2c08      	cmp	r4, #8
   18e86:	dc14      	bgt.n	18eb2 <hal_i2c_clear_bus+0x70>
        if (read_gpio_inbuffer(sda_pin)) {
   18e88:	4630      	mov	r0, r6
   18e8a:	f7ff ffd1 	bl	18e30 <read_gpio_inbuffer>
   18e8e:	b978      	cbnz	r0, 18eb0 <hal_i2c_clear_bus+0x6e>
                goto ret;
            } else {
                break;
            }
        }
        hal_gpio_write(scl_pin, 0);
   18e90:	2100      	movs	r1, #0
   18e92:	4628      	mov	r0, r5
   18e94:	f7ff fef2 	bl	18c7c <hal_gpio_write>
        hal_i2c_delay_us(4);
   18e98:	2004      	movs	r0, #4
   18e9a:	f7ff ff6b 	bl	18d74 <hal_i2c_delay_us>
        hal_gpio_write(scl_pin, 1);
   18e9e:	2101      	movs	r1, #1
   18ea0:	4628      	mov	r0, r5
   18ea2:	f7ff feeb 	bl	18c7c <hal_gpio_write>
        hal_i2c_delay_us(4);
   18ea6:	2004      	movs	r0, #4
   18ea8:	f7ff ff64 	bl	18d74 <hal_i2c_delay_us>
    for (i = 0; i < 9; i++) {
   18eac:	3401      	adds	r4, #1
   18eae:	e7e9      	b.n	18e84 <hal_i2c_clear_bus+0x42>
            if (i == 0) {
   18eb0:	b154      	cbz	r4, 18ec8 <hal_i2c_clear_bus+0x86>
    }

    /*
     * Send STOP.
     */
    hal_gpio_write(sda_pin, 0);
   18eb2:	2100      	movs	r1, #0
   18eb4:	4630      	mov	r0, r6
   18eb6:	f7ff fee1 	bl	18c7c <hal_gpio_write>
    hal_i2c_delay_us(4);
   18eba:	2004      	movs	r0, #4
   18ebc:	f7ff ff5a 	bl	18d74 <hal_i2c_delay_us>
    hal_gpio_write(sda_pin, 1);
   18ec0:	2101      	movs	r1, #1
   18ec2:	4630      	mov	r0, r6
   18ec4:	f7ff feda 	bl	18c7c <hal_gpio_write>

ret:
    /* Restore GPIO config */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   18ec8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18ecc:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   18ed0:	f240 620c 	movw	r2, #1548	; 0x60c
   18ed4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   18ed8:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   18edc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   18ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018ee4 <hal_i2c_init>:

int
hal_i2c_init(uint8_t i2c_num, void *usercfg)
{
   18ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
   18ee6:	b083      	sub	sp, #12
    struct nrf52_hal_i2c_cfg *cfg;
    uint32_t freq;
    int rc;
    NRF_GPIO_Type *scl_port, *sda_port;

    assert(usercfg != NULL);
   18ee8:	b1a1      	cbz	r1, 18f14 <hal_i2c_init+0x30>
   18eea:	460c      	mov	r4, r1

    rc = hal_i2c_resolve(i2c_num, &i2c);
   18eec:	a901      	add	r1, sp, #4
   18eee:	f7ff ff7f 	bl	18df0 <hal_i2c_resolve>
    if (rc != 0) {
   18ef2:	4606      	mov	r6, r0
   18ef4:	bba8      	cbnz	r0, 18f62 <hal_i2c_init+0x7e>
        goto err;
    }

    cfg = (struct nrf52_hal_i2c_cfg *) usercfg;
    regs = i2c->nhi_regs;
   18ef6:	9b01      	ldr	r3, [sp, #4]
   18ef8:	681d      	ldr	r5, [r3, #0]

    switch (cfg->i2c_frequency) {
   18efa:	68a3      	ldr	r3, [r4, #8]
   18efc:	2bfa      	cmp	r3, #250	; 0xfa
   18efe:	d035      	beq.n	18f6c <hal_i2c_init+0x88>
   18f00:	d90e      	bls.n	18f20 <hal_i2c_init+0x3c>
   18f02:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
   18f06:	d02f      	beq.n	18f68 <hal_i2c_init+0x84>
   18f08:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   18f0c:	d131      	bne.n	18f72 <hal_i2c_init+0x8e>
        break;
    case 380:
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
        break;
    case 400:
        freq = TWI_FREQUENCY_FREQUENCY_K400;
   18f0e:	f04f 67cd 	mov.w	r7, #107479040	; 0x6680000
        break;
   18f12:	e009      	b.n	18f28 <hal_i2c_init+0x44>
    assert(usercfg != NULL);
   18f14:	2300      	movs	r3, #0
   18f16:	461a      	mov	r2, r3
   18f18:	4619      	mov	r1, r3
   18f1a:	4618      	mov	r0, r3
   18f1c:	f000 fc88 	bl	19830 <__assert_func>
    switch (cfg->i2c_frequency) {
   18f20:	2b64      	cmp	r3, #100	; 0x64
   18f22:	d126      	bne.n	18f72 <hal_i2c_init+0x8e>
        freq = TWI_FREQUENCY_FREQUENCY_K100;
   18f24:	f04f 77cc 	mov.w	r7, #26738688	; 0x1980000
    default:
        rc = HAL_I2C_ERR_INVAL;
        goto err;
    }

    hal_i2c_clear_bus(cfg->scl_pin, cfg->sda_pin);
   18f28:	6861      	ldr	r1, [r4, #4]
   18f2a:	6820      	ldr	r0, [r4, #0]
   18f2c:	f7ff ff89 	bl	18e42 <hal_i2c_clear_bus>

    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(cfg->scl_pin);
    sda_port = HAL_GPIO_PORT(cfg->sda_pin);

    scl_port->PIN_CNF[HAL_GPIO_INDEX(cfg->scl_pin)] = NRF52_SCL_PIN_CONF;
   18f30:	6823      	ldr	r3, [r4, #0]
   18f32:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   18f36:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   18f3a:	f240 610c 	movw	r1, #1548	; 0x60c
   18f3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    sda_port->PIN_CNF[HAL_GPIO_INDEX(cfg->sda_pin)] = NRF52_SDA_PIN_CONF;
   18f42:	6863      	ldr	r3, [r4, #4]
   18f44:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   18f48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    regs->PSELSCL = cfg->scl_pin;
   18f4c:	6823      	ldr	r3, [r4, #0]
   18f4e:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    regs->PSELSDA = cfg->sda_pin;
   18f52:	6863      	ldr	r3, [r4, #4]
   18f54:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    regs->FREQUENCY = freq;
   18f58:	f8c5 7524 	str.w	r7, [r5, #1316]	; 0x524
    regs->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   18f5c:	2305      	movs	r3, #5
   18f5e:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    return (0);
err:
    return (rc);
}
   18f62:	4630      	mov	r0, r6
   18f64:	b003      	add	sp, #12
   18f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
   18f68:	4f03      	ldr	r7, [pc, #12]	; (18f78 <hal_i2c_init+0x94>)
        break;
   18f6a:	e7dd      	b.n	18f28 <hal_i2c_init+0x44>
        freq = TWI_FREQUENCY_FREQUENCY_K250;
   18f6c:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
   18f70:	e7da      	b.n	18f28 <hal_i2c_init+0x44>
        rc = HAL_I2C_ERR_INVAL;
   18f72:	2602      	movs	r6, #2
   18f74:	e7f5      	b.n	18f62 <hal_i2c_init+0x7e>
   18f76:	bf00      	nop
   18f78:	06147ae9 	.word	0x06147ae9

00018f7c <hal_i2c_master_write>:
}

int
hal_i2c_master_write(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                     uint32_t timo, uint8_t last_op)
{
   18f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f80:	b083      	sub	sp, #12
   18f82:	4688      	mov	r8, r1
   18f84:	4615      	mov	r5, r2
   18f86:	469a      	mov	sl, r3
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   18f88:	a901      	add	r1, sp, #4
   18f8a:	f7ff ff31 	bl	18df0 <hal_i2c_resolve>
    if (rc != 0) {
   18f8e:	4681      	mov	r9, r0
   18f90:	b118      	cbz	r0, 18f9a <hal_i2c_master_write+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   18f92:	4648      	mov	r0, r9
   18f94:	b003      	add	sp, #12
   18f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   18f9a:	9b01      	ldr	r3, [sp, #4]
   18f9c:	681c      	ldr	r4, [r3, #0]
    regs->ADDRESS = pdata->address;
   18f9e:	f898 3000 	ldrb.w	r3, [r8]
   18fa2:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    regs->EVENTS_ERROR = 0;
   18fa6:	2300      	movs	r3, #0
   18fa8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   18fac:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   18fb0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->SHORTS = 0;
   18fb4:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTTX);
   18fb8:	f104 0708 	add.w	r7, r4, #8
    int retry = 2;
   18fbc:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   18fc0:	2300      	movs	r3, #0
   18fc2:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   18fc6:	2301      	movs	r3, #1
   18fc8:	603b      	str	r3, [r7, #0]
        end_ticks = os_cputime_get32() +
   18fca:	f000 fe61 	bl	19c90 <os_cputime_get32>
   18fce:	f100 0664 	add.w	r6, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   18fd2:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   18fd6:	f7ff fe62 	bl	18c9e <hal_gpio_read>
   18fda:	b1b0      	cbz	r0, 1900a <hal_i2c_master_write+0x8e>
   18fdc:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   18fe0:	b99b      	cbnz	r3, 1900a <hal_i2c_master_write+0x8e>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   18fe2:	f000 fe55 	bl	19c90 <os_cputime_get32>
   18fe6:	1b80      	subs	r0, r0, r6
   18fe8:	2800      	cmp	r0, #0
   18fea:	dbf2      	blt.n	18fd2 <hal_i2c_master_write+0x56>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   18fec:	2300      	movs	r3, #0
   18fee:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   18ff2:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   18ff6:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   18ffa:	f7ff ff22 	bl	18e42 <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   18ffe:	2305      	movs	r3, #5
   19000:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   19004:	f1bb 0b01 	subs.w	fp, fp, #1
   19008:	d1da      	bne.n	18fc0 <hal_i2c_master_write+0x44>
    start = os_time_get();
   1900a:	f001 fe2f 	bl	1ac6c <os_time_get>
   1900e:	4606      	mov	r6, r0
    for (i = 0; i < pdata->len; i++) {
   19010:	464f      	mov	r7, r9
   19012:	e003      	b.n	1901c <hal_i2c_master_write+0xa0>
        if (regs->EVENTS_ERROR) {
   19014:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19018:	b9db      	cbnz	r3, 19052 <hal_i2c_master_write+0xd6>
    for (i = 0; i < pdata->len; i++) {
   1901a:	3701      	adds	r7, #1
   1901c:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   19020:	42bb      	cmp	r3, r7
   19022:	dd24      	ble.n	1906e <hal_i2c_master_write+0xf2>
        regs->EVENTS_TXDSENT = 0;
   19024:	2300      	movs	r3, #0
   19026:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
        regs->TXD = pdata->buffer[i];
   1902a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1902e:	5ddb      	ldrb	r3, [r3, r7]
   19030:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
        while (!regs->EVENTS_TXDSENT && !regs->EVENTS_ERROR) {
   19034:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   19038:	2b00      	cmp	r3, #0
   1903a:	d1eb      	bne.n	19014 <hal_i2c_master_write+0x98>
   1903c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19040:	2b00      	cmp	r3, #0
   19042:	d1e7      	bne.n	19014 <hal_i2c_master_write+0x98>
            if (os_time_get() - start > timo) {
   19044:	f001 fe12 	bl	1ac6c <os_time_get>
   19048:	1b80      	subs	r0, r0, r6
   1904a:	42a8      	cmp	r0, r5
   1904c:	d9f2      	bls.n	19034 <hal_i2c_master_write+0xb8>
                rc = HAL_I2C_ERR_TIMEOUT;
   1904e:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   19052:	2301      	movs	r3, #1
   19054:	6163      	str	r3, [r4, #20]
    if (regs->EVENTS_ERROR) {
   19056:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1905a:	2b00      	cmp	r3, #0
   1905c:	d099      	beq.n	18f92 <hal_i2c_master_write+0x16>
        nrf_status = regs->ERRORSRC;
   1905e:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   19062:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   19066:	f7ff fed5 	bl	18e14 <hal_i2c_convert_status>
   1906a:	4681      	mov	r9, r0
   1906c:	e791      	b.n	18f92 <hal_i2c_master_write+0x16>
    if (last_op) {
   1906e:	f1ba 0f00 	cmp.w	sl, #0
   19072:	d08e      	beq.n	18f92 <hal_i2c_master_write+0x16>
        regs->EVENTS_STOPPED = 0;
   19074:	2300      	movs	r3, #0
   19076:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        regs->TASKS_STOP = 1;
   1907a:	2301      	movs	r3, #1
   1907c:	6163      	str	r3, [r4, #20]
        while (!regs->EVENTS_STOPPED && !regs->EVENTS_ERROR) {
   1907e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   19082:	b953      	cbnz	r3, 1909a <hal_i2c_master_write+0x11e>
   19084:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19088:	b93b      	cbnz	r3, 1909a <hal_i2c_master_write+0x11e>
            if (os_time_get() - start > timo) {
   1908a:	f001 fdef 	bl	1ac6c <os_time_get>
   1908e:	1b80      	subs	r0, r0, r6
   19090:	42a8      	cmp	r0, r5
   19092:	d9f4      	bls.n	1907e <hal_i2c_master_write+0x102>
                rc = HAL_I2C_ERR_TIMEOUT;
   19094:	f04f 0903 	mov.w	r9, #3
   19098:	e7db      	b.n	19052 <hal_i2c_master_write+0xd6>
        if (regs->EVENTS_ERROR) {
   1909a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1909e:	2b00      	cmp	r3, #0
   190a0:	d1d7      	bne.n	19052 <hal_i2c_master_write+0xd6>
   190a2:	e776      	b.n	18f92 <hal_i2c_master_write+0x16>

000190a4 <hal_i2c_master_read>:

int
hal_i2c_master_read(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                    uint32_t timo, uint8_t last_op)
{
   190a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   190a8:	b085      	sub	sp, #20
   190aa:	460f      	mov	r7, r1
   190ac:	4615      	mov	r5, r2
   190ae:	9301      	str	r3, [sp, #4]
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   190b0:	a903      	add	r1, sp, #12
   190b2:	f7ff fe9d 	bl	18df0 <hal_i2c_resolve>
    if (rc != 0) {
   190b6:	4681      	mov	r9, r0
   190b8:	b118      	cbz	r0, 190c2 <hal_i2c_master_read+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   190ba:	4648      	mov	r0, r9
   190bc:	b005      	add	sp, #20
   190be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   190c2:	9b03      	ldr	r3, [sp, #12]
   190c4:	681c      	ldr	r4, [r3, #0]
    start = os_time_get();
   190c6:	f001 fdd1 	bl	1ac6c <os_time_get>
   190ca:	4606      	mov	r6, r0
    if (regs->EVENTS_RXDREADY) {
   190cc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   190d0:	b11b      	cbz	r3, 190da <hal_i2c_master_read+0x36>
        (void)regs->RXD;
   190d2:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
        (void)regs->RXD;
   190d6:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
    regs->EVENTS_ERROR = 0;
   190da:	2300      	movs	r3, #0
   190dc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   190e0:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   190e4:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->EVENTS_RXDREADY = 0;
   190e8:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    regs->ADDRESS = pdata->address;
   190ec:	783b      	ldrb	r3, [r7, #0]
   190ee:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    if (pdata->len == 1 && last_op) {
   190f2:	887b      	ldrh	r3, [r7, #2]
   190f4:	2b01      	cmp	r3, #1
   190f6:	d02e      	beq.n	19156 <hal_i2c_master_read+0xb2>
        regs->SHORTS = TWI_SHORTS_BB_SUSPEND_Msk;
   190f8:	2301      	movs	r3, #1
   190fa:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTRX);
   190fe:	46a2      	mov	sl, r4
    int retry = 2;
   19100:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   19104:	2300      	movs	r3, #0
   19106:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   1910a:	2301      	movs	r3, #1
   1910c:	f8ca 3000 	str.w	r3, [sl]
        end_ticks = os_cputime_get32() +
   19110:	f000 fdbe 	bl	19c90 <os_cputime_get32>
   19114:	f100 0864 	add.w	r8, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   19118:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1911c:	f7ff fdbf 	bl	18c9e <hal_gpio_read>
   19120:	b1b8      	cbz	r0, 19152 <hal_i2c_master_read+0xae>
   19122:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   19126:	b9a3      	cbnz	r3, 19152 <hal_i2c_master_read+0xae>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   19128:	f000 fdb2 	bl	19c90 <os_cputime_get32>
   1912c:	eba0 0008 	sub.w	r0, r0, r8
   19130:	2800      	cmp	r0, #0
   19132:	dbf1      	blt.n	19118 <hal_i2c_master_read+0x74>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   19134:	2300      	movs	r3, #0
   19136:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   1913a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1913e:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   19142:	f7ff fe7e 	bl	18e42 <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   19146:	2305      	movs	r3, #5
   19148:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   1914c:	f1bb 0b01 	subs.w	fp, fp, #1
   19150:	d1d8      	bne.n	19104 <hal_i2c_master_read+0x60>
    int retry = 2;
   19152:	46c8      	mov	r8, r9
   19154:	e017      	b.n	19186 <hal_i2c_master_read+0xe2>
    if (pdata->len == 1 && last_op) {
   19156:	9b01      	ldr	r3, [sp, #4]
   19158:	2b00      	cmp	r3, #0
   1915a:	d0cd      	beq.n	190f8 <hal_i2c_master_read+0x54>
        regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   1915c:	2302      	movs	r3, #2
   1915e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   19162:	e7cc      	b.n	190fe <hal_i2c_master_read+0x5a>
        if (regs->EVENTS_ERROR) {
   19164:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19168:	bb0b      	cbnz	r3, 191ae <hal_i2c_master_read+0x10a>
        pdata->buffer[i] = regs->RXD;
   1916a:	f8d4 2518 	ldr.w	r2, [r4, #1304]	; 0x518
   1916e:	687b      	ldr	r3, [r7, #4]
   19170:	f803 2008 	strb.w	r2, [r3, r8]
        if (i == pdata->len - 2) {
   19174:	887b      	ldrh	r3, [r7, #2]
   19176:	3b02      	subs	r3, #2
   19178:	4543      	cmp	r3, r8
   1917a:	d02a      	beq.n	191d2 <hal_i2c_master_read+0x12e>
        regs->EVENTS_RXDREADY = 0;
   1917c:	2300      	movs	r3, #0
   1917e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    for (i = 0; i < pdata->len; i++) {
   19182:	f108 0801 	add.w	r8, r8, #1
   19186:	887b      	ldrh	r3, [r7, #2]
   19188:	4543      	cmp	r3, r8
   1918a:	dd96      	ble.n	190ba <hal_i2c_master_read+0x16>
        regs->TASKS_RESUME = 1;
   1918c:	2301      	movs	r3, #1
   1918e:	6223      	str	r3, [r4, #32]
        while (!regs->EVENTS_RXDREADY && !regs->EVENTS_ERROR) {
   19190:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19194:	2b00      	cmp	r3, #0
   19196:	d1e5      	bne.n	19164 <hal_i2c_master_read+0xc0>
   19198:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1919c:	2b00      	cmp	r3, #0
   1919e:	d1e1      	bne.n	19164 <hal_i2c_master_read+0xc0>
            if (os_time_get() - start > timo) {
   191a0:	f001 fd64 	bl	1ac6c <os_time_get>
   191a4:	1b80      	subs	r0, r0, r6
   191a6:	42a8      	cmp	r0, r5
   191a8:	d9f2      	bls.n	19190 <hal_i2c_master_read+0xec>
                rc = HAL_I2C_ERR_TIMEOUT;
   191aa:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   191ae:	2301      	movs	r3, #1
   191b0:	6163      	str	r3, [r4, #20]
    regs->SHORTS = 0;
   191b2:	2300      	movs	r3, #0
   191b4:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    if (regs->EVENTS_ERROR) {
   191b8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   191bc:	2b00      	cmp	r3, #0
   191be:	f43f af7c 	beq.w	190ba <hal_i2c_master_read+0x16>
        nrf_status = regs->ERRORSRC;
   191c2:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   191c6:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   191ca:	f7ff fe23 	bl	18e14 <hal_i2c_convert_status>
   191ce:	4681      	mov	r9, r0
   191d0:	e773      	b.n	190ba <hal_i2c_master_read+0x16>
            if (last_op) {
   191d2:	9b01      	ldr	r3, [sp, #4]
   191d4:	2b00      	cmp	r3, #0
   191d6:	d0d1      	beq.n	1917c <hal_i2c_master_read+0xd8>
                regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   191d8:	2302      	movs	r3, #2
   191da:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   191de:	e7cd      	b.n	1917c <hal_i2c_master_read+0xd8>

000191e0 <nrf52_irqm_handler>:
    }

#if (MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_1_MASTER) || MYNEWT_VAL(SPI_2_MASTER))
static void
nrf52_irqm_handler(struct nrf52_hal_spi *spi)
{
   191e0:	b538      	push	{r3, r4, r5, lr}
    NRF_SPIM_Type *spim;
    uint16_t xfr_bytes;
    uint16_t len;

    spim = spi->nhs_spi.spim;
   191e2:	6905      	ldr	r5, [r0, #16]
    if (spim->EVENTS_END) {
   191e4:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   191e8:	b32b      	cbz	r3, 19236 <nrf52_irqm_handler+0x56>
        spim->EVENTS_END = 0;
   191ea:	2300      	movs	r3, #0
   191ec:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118

        /* Should not occur but if no transfer just leave  */
        if (spi->spi_xfr_flag == 0) {
   191f0:	7843      	ldrb	r3, [r0, #1]
   191f2:	b303      	cbz	r3, 19236 <nrf52_irqm_handler+0x56>
            return;
        }

        /* Are there more bytes to send? */
        xfr_bytes = spim->TXD.AMOUNT;
   191f4:	f8d5 254c 	ldr.w	r2, [r5, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
   191f8:	88c3      	ldrh	r3, [r0, #6]
   191fa:	fa13 f382 	uxtah	r3, r3, r2
   191fe:	b29b      	uxth	r3, r3
   19200:	80c3      	strh	r3, [r0, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
   19202:	8881      	ldrh	r1, [r0, #4]
   19204:	428b      	cmp	r3, r1
   19206:	d217      	bcs.n	19238 <nrf52_irqm_handler+0x58>
   19208:	b292      	uxth	r2, r2
            spi->nhs_txbuf += xfr_bytes;
   1920a:	6984      	ldr	r4, [r0, #24]
   1920c:	4414      	add	r4, r2
   1920e:	6184      	str	r4, [r0, #24]
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
   19210:	1acb      	subs	r3, r1, r3
   19212:	b29b      	uxth	r3, r3
            len = min(SPIM_TXD_MAXCNT_MAX, len);
   19214:	2bff      	cmp	r3, #255	; 0xff
   19216:	bf28      	it	cs
   19218:	23ff      	movcs	r3, #255	; 0xff
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
   1921a:	f8c5 4544 	str.w	r4, [r5, #1348]	; 0x544
            spim->TXD.MAXCNT = len;
   1921e:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548

            /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
            if (spi->nhs_rxbuf) {
   19222:	69c1      	ldr	r1, [r0, #28]
   19224:	b129      	cbz	r1, 19232 <nrf52_irqm_handler+0x52>
                spi->nhs_rxbuf += xfr_bytes;
   19226:	440a      	add	r2, r1
   19228:	61c2      	str	r2, [r0, #28]
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
   1922a:	f8c5 2534 	str.w	r2, [r5, #1332]	; 0x534
                spim->RXD.MAXCNT = len;
   1922e:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
            }
            spim->TASKS_START = 1;
   19232:	2301      	movs	r3, #1
   19234:	612b      	str	r3, [r5, #16]
            }
            spi->spi_xfr_flag = 0;
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
        }
    }
}
   19236:	bd38      	pop	{r3, r4, r5, pc}
   19238:	4604      	mov	r4, r0
            if (spi->txrx_cb_func) {
   1923a:	6a03      	ldr	r3, [r0, #32]
   1923c:	b10b      	cbz	r3, 19242 <nrf52_irqm_handler+0x62>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
   1923e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   19240:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
   19242:	2300      	movs	r3, #0
   19244:	7063      	strb	r3, [r4, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
   19246:	2340      	movs	r3, #64	; 0x40
   19248:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   1924c:	e7f3      	b.n	19236 <nrf52_irqm_handler+0x56>
	...

00019250 <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
   19250:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
   19252:	4b04      	ldr	r3, [pc, #16]	; (19264 <nrf52_spi0_irq_handler+0x14>)
   19254:	781b      	ldrb	r3, [r3, #0]
   19256:	b103      	cbz	r3, 1925a <nrf52_spi0_irq_handler+0xa>
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
   19258:	bd08      	pop	{r3, pc}
        nrf52_irqm_handler(&nrf52_hal_spi0);
   1925a:	4802      	ldr	r0, [pc, #8]	; (19264 <nrf52_spi0_irq_handler+0x14>)
   1925c:	f7ff ffc0 	bl	191e0 <nrf52_irqm_handler>
}
   19260:	e7fa      	b.n	19258 <nrf52_spi0_irq_handler+0x8>
   19262:	bf00      	nop
   19264:	2000a570 	.word	0x2000a570

00019268 <hal_spi_stop_transfer>:
#endif

static void
hal_spi_stop_transfer(NRF_SPIM_Type *spim)
{
    spim->TASKS_STOP = 1;
   19268:	2301      	movs	r3, #1
   1926a:	6143      	str	r3, [r0, #20]
    while (!spim->EVENTS_STOPPED) {}
   1926c:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
   19270:	2b00      	cmp	r3, #0
   19272:	d0fb      	beq.n	1926c <hal_spi_stop_transfer+0x4>
    spim->EVENTS_STOPPED = 0;
   19274:	2300      	movs	r3, #0
   19276:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
}
   1927a:	4770      	bx	lr

0001927c <hal_spi_config_slave>:
}

static int
hal_spi_config_slave(struct nrf52_hal_spi *spi,
                     struct hal_spi_settings *settings)
{
   1927c:	b410      	push	{r4}
    int rc;
    uint32_t nrf_config;
    NRF_SPIS_Type *spis;

    spis = spi->nhs_spi.spis;
   1927e:	6902      	ldr	r2, [r0, #16]

    rc = 0;
    switch (settings->data_mode) {
   19280:	780b      	ldrb	r3, [r1, #0]
   19282:	2b03      	cmp	r3, #3
   19284:	d80c      	bhi.n	192a0 <hal_spi_config_slave+0x24>
   19286:	e8df f003 	tbb	[pc, r3]
   1928a:	0e02      	.short	0x0e02
   1928c:	0805      	.short	0x0805
        case HAL_SPI_MODE0:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   1928e:	2300      	movs	r3, #0
    rc = 0;
   19290:	4618      	mov	r0, r3
   19292:	e00a      	b.n	192aa <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE1:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
        case HAL_SPI_MODE2:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   19294:	2304      	movs	r3, #4
    rc = 0;
   19296:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Leading << SPIS_CONFIG_CPHA_Pos);
            break;
   19298:	e007      	b.n	192aa <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE3:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   1929a:	2306      	movs	r3, #6
    rc = 0;
   1929c:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
   1929e:	e004      	b.n	192aa <hal_spi_config_slave+0x2e>
        default:
            nrf_config = 0;
   192a0:	2300      	movs	r3, #0
            rc = EINVAL;
   192a2:	2016      	movs	r0, #22
            break;
   192a4:	e001      	b.n	192aa <hal_spi_config_slave+0x2e>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   192a6:	2302      	movs	r3, #2
    rc = 0;
   192a8:	2000      	movs	r0, #0
    }

    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   192aa:	784c      	ldrb	r4, [r1, #1]
   192ac:	2c01      	cmp	r4, #1
   192ae:	d006      	beq.n	192be <hal_spi_config_slave+0x42>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
    }
    spis->CONFIG = nrf_config;
   192b0:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554

    /* Only 8-bit word sizes supported. */
    switch (settings->word_size) {
   192b4:	788b      	ldrb	r3, [r1, #2]
   192b6:	b92b      	cbnz	r3, 192c4 <hal_spi_config_slave+0x48>
            rc = EINVAL;
            break;
    }

    return rc;
}
   192b8:	f85d 4b04 	ldr.w	r4, [sp], #4
   192bc:	4770      	bx	lr
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
   192be:	f043 0301 	orr.w	r3, r3, #1
   192c2:	e7f5      	b.n	192b0 <hal_spi_config_slave+0x34>
            rc = EINVAL;
   192c4:	2016      	movs	r0, #22
    return rc;
   192c6:	e7f7      	b.n	192b8 <hal_spi_config_slave+0x3c>

000192c8 <hal_spi_init_master>:

static int
hal_spi_init_master(struct nrf52_hal_spi *spi,
                    struct nrf52_hal_spi_cfg *cfg,
                    nrf52_spi_irq_handler_t handler)
{
   192c8:	b430      	push	{r4, r5}
    NRF_GPIO_Type *port;
    uint32_t pin;

    /*  Configure MOSI */
    port = HAL_GPIO_PORT(cfg->mosi_pin);
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
   192ca:	784b      	ldrb	r3, [r1, #1]
    port->OUTCLR = (1UL << pin);
   192cc:	2501      	movs	r5, #1
   192ce:	409d      	lsls	r5, r3
   192d0:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   192d4:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    port->PIN_CNF[pin] =
   192d8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   192dc:	2503      	movs	r5, #3
   192de:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);

    /* Configure MISO */
    port = HAL_GPIO_PORT(cfg->miso_pin);
    pin = HAL_GPIO_INDEX(cfg->miso_pin);
   192e2:	788b      	ldrb	r3, [r1, #2]
    port->PIN_CNF[pin] =
   192e4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   192e8:	2500      	movs	r5, #0
   192ea:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos);

    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
   192ee:	6903      	ldr	r3, [r0, #16]
    spim->PSEL.SCK = cfg->sck_pin;
   192f0:	780c      	ldrb	r4, [r1, #0]
   192f2:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
   192f6:	784c      	ldrb	r4, [r1, #1]
   192f8:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
    spim->PSEL.MISO = cfg->miso_pin;
   192fc:	7889      	ldrb	r1, [r1, #2]
   192fe:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   19302:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19306:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
   1930a:	f990 3014 	ldrsb.w	r3, [r0, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1930e:	4919      	ldr	r1, [pc, #100]	; (19374 <hal_spi_init_master+0xac>)
   19310:	6889      	ldr	r1, [r1, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   19312:	3310      	adds	r3, #16
   19314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_SetPriority(spi->irq_num, (1 << __NVIC_PRIO_BITS) - 1);
   19318:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1931c:	42ab      	cmp	r3, r5
   1931e:	db22      	blt.n	19366 <hal_spi_init_master+0x9e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   19320:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   19324:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   19328:	22e0      	movs	r2, #224	; 0xe0
   1932a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NVIC_ClearPendingIRQ(spi->irq_num);
   1932e:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   19332:	2b00      	cmp	r3, #0
   19334:	db08      	blt.n	19348 <hal_spi_init_master+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19336:	f003 011f 	and.w	r1, r3, #31
   1933a:	095b      	lsrs	r3, r3, #5
   1933c:	2201      	movs	r2, #1
   1933e:	408a      	lsls	r2, r1
   19340:	3360      	adds	r3, #96	; 0x60
   19342:	490d      	ldr	r1, [pc, #52]	; (19378 <hal_spi_init_master+0xb0>)
   19344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_EnableIRQ(spi->irq_num);
   19348:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1934c:	2b00      	cmp	r3, #0
   1934e:	db07      	blt.n	19360 <hal_spi_init_master+0x98>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19350:	f003 011f 	and.w	r1, r3, #31
   19354:	095b      	lsrs	r3, r3, #5
   19356:	2201      	movs	r2, #1
   19358:	408a      	lsls	r2, r1
   1935a:	4907      	ldr	r1, [pc, #28]	; (19378 <hal_spi_init_master+0xb0>)
   1935c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return 0;
}
   19360:	2000      	movs	r0, #0
   19362:	bc30      	pop	{r4, r5}
   19364:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   19366:	f003 030f 	and.w	r3, r3, #15
   1936a:	4a04      	ldr	r2, [pc, #16]	; (1937c <hal_spi_init_master+0xb4>)
   1936c:	441a      	add	r2, r3
   1936e:	23e0      	movs	r3, #224	; 0xe0
   19370:	7613      	strb	r3, [r2, #24]
   19372:	e7dc      	b.n	1932e <hal_spi_init_master+0x66>
   19374:	e000ed00 	.word	0xe000ed00
   19378:	e000e100 	.word	0xe000e100
   1937c:	e000ecfc 	.word	0xe000ecfc

00019380 <hal_spi_config_master>:
{
   19380:	b410      	push	{r4}
    spim = spi->nhs_spi.spim;
   19382:	6902      	ldr	r2, [r0, #16]
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
   19384:	680c      	ldr	r4, [r1, #0]
   19386:	684b      	ldr	r3, [r1, #4]
   19388:	6084      	str	r4, [r0, #8]
   1938a:	60c3      	str	r3, [r0, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
   1938c:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
   19390:	f003 031f 	and.w	r3, r3, #31
    if (settings->data_mode <= HAL_SPI_MODE1) {
   19394:	7808      	ldrb	r0, [r1, #0]
   19396:	2801      	cmp	r0, #1
   19398:	d916      	bls.n	193c8 <hal_spi_config_master+0x48>
        port->OUTSET = (1UL << pin);
   1939a:	2001      	movs	r0, #1
   1939c:	4098      	lsls	r0, r3
   1939e:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   193a2:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    port->PIN_CNF[pin] =
   193a6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   193aa:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   193ae:	2403      	movs	r4, #3
   193b0:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    switch (settings->word_size) {
   193b4:	788b      	ldrb	r3, [r1, #2]
   193b6:	b973      	cbnz	r3, 193d6 <hal_spi_config_master+0x56>
    rc = 0;
   193b8:	2000      	movs	r0, #0
    switch (settings->data_mode) {
   193ba:	780b      	ldrb	r3, [r1, #0]
   193bc:	2b03      	cmp	r3, #3
   193be:	d812      	bhi.n	193e6 <hal_spi_config_master+0x66>
   193c0:	e8df f003 	tbb	[pc, r3]
   193c4:	0f0d140b 	.word	0x0f0d140b
        port->OUTCLR = (1UL << pin);
   193c8:	2001      	movs	r0, #1
   193ca:	4098      	lsls	r0, r3
   193cc:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   193d0:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
   193d4:	e7e7      	b.n	193a6 <hal_spi_config_master+0x26>
            rc = EINVAL;
   193d6:	2016      	movs	r0, #22
   193d8:	e7ef      	b.n	193ba <hal_spi_config_master+0x3a>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   193da:	2300      	movs	r3, #0
   193dc:	e007      	b.n	193ee <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   193de:	2304      	movs	r3, #4
            break;
   193e0:	e005      	b.n	193ee <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   193e2:	2306      	movs	r3, #6
            break;
   193e4:	e003      	b.n	193ee <hal_spi_config_master+0x6e>
            nrf_config = 0;
   193e6:	2300      	movs	r3, #0
            rc = EINVAL;
   193e8:	2016      	movs	r0, #22
            break;
   193ea:	e000      	b.n	193ee <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   193ec:	2302      	movs	r3, #2
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   193ee:	784c      	ldrb	r4, [r1, #1]
   193f0:	2c01      	cmp	r4, #1
   193f2:	d010      	beq.n	19416 <hal_spi_config_master+0x96>
    spim->CONFIG = nrf_config;
   193f4:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
    switch (settings->baudrate) {
   193f8:	684b      	ldr	r3, [r1, #4]
   193fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   193fe:	d023      	beq.n	19448 <hal_spi_config_master+0xc8>
   19400:	d80c      	bhi.n	1941c <hal_spi_config_master+0x9c>
   19402:	2bfa      	cmp	r3, #250	; 0xfa
   19404:	d029      	beq.n	1945a <hal_spi_config_master+0xda>
   19406:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1940a:	d01a      	beq.n	19442 <hal_spi_config_master+0xc2>
   1940c:	2b7d      	cmp	r3, #125	; 0x7d
   1940e:	d011      	beq.n	19434 <hal_spi_config_master+0xb4>
            frequency = 0;
   19410:	2300      	movs	r3, #0
            rc = EINVAL;
   19412:	2016      	movs	r0, #22
            break;
   19414:	e010      	b.n	19438 <hal_spi_config_master+0xb8>
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
   19416:	f043 0301 	orr.w	r3, r3, #1
   1941a:	e7eb      	b.n	193f4 <hal_spi_config_master+0x74>
    switch (settings->baudrate) {
   1941c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
   19420:	d015      	beq.n	1944e <hal_spi_config_master+0xce>
   19422:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
   19426:	d015      	beq.n	19454 <hal_spi_config_master+0xd4>
   19428:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   1942c:	d1f0      	bne.n	19410 <hal_spi_config_master+0x90>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
   1942e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
            break;
   19432:	e001      	b.n	19438 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K125;
   19434:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    spim->FREQUENCY = frequency;
   19438:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
}
   1943c:	f85d 4b04 	ldr.w	r4, [sp], #4
   19440:	4770      	bx	lr
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
   19442:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
            break;
   19446:	e7f7      	b.n	19438 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
   19448:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            break;
   1944c:	e7f4      	b.n	19438 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
   1944e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
            break;
   19452:	e7f1      	b.n	19438 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
   19454:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
            break;
   19458:	e7ee      	b.n	19438 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K250;
   1945a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1945e:	e7eb      	b.n	19438 <hal_spi_config_master+0xb8>

00019460 <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19460:	2802      	cmp	r0, #2
   19462:	dc10      	bgt.n	19486 <hal_spi_config+0x26>
{
   19464:	b508      	push	{r3, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19466:	4b0b      	ldr	r3, [pc, #44]	; (19494 <hal_spi_config+0x34>)
   19468:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1946c:	b168      	cbz	r0, 1948a <hal_spi_config+0x2a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   1946e:	6903      	ldr	r3, [r0, #16]
    if (spim->ENABLE != 0) {
   19470:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   19474:	b95b      	cbnz	r3, 1948e <hal_spi_config+0x2e>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   19476:	7803      	ldrb	r3, [r0, #0]
   19478:	b113      	cbz	r3, 19480 <hal_spi_config+0x20>
        rc = hal_spi_config_master(spi, settings);
    } else {
        rc = hal_spi_config_slave(spi, settings);
   1947a:	f7ff feff 	bl	1927c <hal_spi_config_slave>
    }

err:
    return (rc);
}
   1947e:	bd08      	pop	{r3, pc}
        rc = hal_spi_config_master(spi, settings);
   19480:	f7ff ff7e 	bl	19380 <hal_spi_config_master>
   19484:	e7fb      	b.n	1947e <hal_spi_config+0x1e>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19486:	2016      	movs	r0, #22
}
   19488:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1948a:	2016      	movs	r0, #22
   1948c:	e7f7      	b.n	1947e <hal_spi_config+0x1e>
        return -1;
   1948e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19492:	e7f4      	b.n	1947e <hal_spi_config+0x1e>
   19494:	00020e58 	.word	0x00020e58

00019498 <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19498:	2802      	cmp	r0, #2
   1949a:	dc1b      	bgt.n	194d4 <hal_spi_enable+0x3c>
   1949c:	4b10      	ldr	r3, [pc, #64]	; (194e0 <hal_spi_enable+0x48>)
   1949e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   194a2:	b1cb      	cbz	r3, 194d8 <hal_spi_enable+0x40>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   194a4:	781a      	ldrb	r2, [r3, #0]
   194a6:	b17a      	cbz	r2, 194c8 <hal_spi_enable+0x30>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    } else {
        if (spi->txrx_cb_func == NULL) {
   194a8:	6a1a      	ldr	r2, [r3, #32]
   194aa:	b1ba      	cbz	r2, 194dc <hal_spi_enable+0x44>
            rc = EINVAL;
            goto err;
        }

        spis = spi->nhs_spi.spis;
   194ac:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
   194ae:	2000      	movs	r0, #0
   194b0:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   194b4:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
   194b8:	f240 4202 	movw	r2, #1026	; 0x402
   194bc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
   194c0:	2202      	movs	r2, #2
   194c2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   194c6:	4770      	bx	lr
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
   194c8:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   194ca:	2201      	movs	r2, #1
   194cc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    }
    rc = 0;
   194d0:	2000      	movs	r0, #0
   194d2:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   194d4:	2016      	movs	r0, #22
   194d6:	4770      	bx	lr
   194d8:	2016      	movs	r0, #22
   194da:	4770      	bx	lr
            rc = EINVAL;
   194dc:	2016      	movs	r0, #22

err:
    return rc;
}
   194de:	4770      	bx	lr
   194e0:	00020e58 	.word	0x00020e58

000194e4 <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   194e4:	2802      	cmp	r0, #2
   194e6:	dc2a      	bgt.n	1953e <hal_spi_disable+0x5a>
{
   194e8:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   194ea:	4b17      	ldr	r3, [pc, #92]	; (19548 <hal_spi_disable+0x64>)
   194ec:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   194f0:	b33c      	cbz	r4, 19542 <hal_spi_disable+0x5e>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   194f2:	7823      	ldrb	r3, [r4, #0]
   194f4:	b9ab      	cbnz	r3, 19522 <hal_spi_disable+0x3e>
        spim = spi->nhs_spi.spim;
   194f6:	6925      	ldr	r5, [r4, #16]
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   194f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   194fc:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308

        if (spi->spi_xfr_flag) {
   19500:	7863      	ldrb	r3, [r4, #1]
   19502:	b943      	cbnz	r3, 19516 <hal_spi_disable+0x32>
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
        }
        spim->ENABLE = 0;
   19504:	2300      	movs	r3, #0
   19506:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
   1950a:	2000      	movs	r0, #0
   1950c:	61a0      	str	r0, [r4, #24]
    spi->nhs_rxbuf = NULL;
   1950e:	61e0      	str	r0, [r4, #28]
    spi->nhs_buflen = 0;
   19510:	80a0      	strh	r0, [r4, #4]
    spi->nhs_bytes_txd = 0;
   19512:	80e0      	strh	r0, [r4, #6]

    rc = 0;

err:
    return rc;
}
   19514:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_stop_transfer(spim);
   19516:	4628      	mov	r0, r5
   19518:	f7ff fea6 	bl	19268 <hal_spi_stop_transfer>
            spi->spi_xfr_flag = 0;
   1951c:	2300      	movs	r3, #0
   1951e:	7063      	strb	r3, [r4, #1]
   19520:	e7f0      	b.n	19504 <hal_spi_disable+0x20>
        spis = spi->nhs_spi.spis;
   19522:	6922      	ldr	r2, [r4, #16]
        spis->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   19524:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19528:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        spis->EVENTS_END = 0;
   1952c:	2300      	movs	r3, #0
   1952e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   19532:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
        spis->ENABLE = 0;
   19536:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
   1953a:	70e3      	strb	r3, [r4, #3]
   1953c:	e7e5      	b.n	1950a <hal_spi_disable+0x26>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1953e:	2016      	movs	r0, #22
}
   19540:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19542:	2016      	movs	r0, #22
    return rc;
   19544:	e7e6      	b.n	19514 <hal_spi_disable+0x30>
   19546:	bf00      	nop
   19548:	00020e58 	.word	0x00020e58

0001954c <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1954c:	2802      	cmp	r0, #2
   1954e:	dc1d      	bgt.n	1958c <hal_spi_init+0x40>
{
   19550:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19552:	4b13      	ldr	r3, [pc, #76]	; (195a0 <hal_spi_init+0x54>)
   19554:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   19558:	b1d4      	cbz	r4, 19590 <hal_spi_init+0x44>
    if (cfg == NULL) {
   1955a:	b1d9      	cbz	r1, 19594 <hal_spi_init+0x48>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
   1955c:	2a01      	cmp	r2, #1
   1955e:	d81b      	bhi.n	19598 <hal_spi_init+0x4c>
    spi->spi_type  = spi_type;
   19560:	7022      	strb	r2, [r4, #0]
    if (spi_num == 0) {
   19562:	b9d8      	cbnz	r0, 1959c <hal_spi_init+0x50>
   19564:	460d      	mov	r5, r1
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
   19566:	2303      	movs	r3, #3
   19568:	7523      	strb	r3, [r4, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
   1956a:	b94a      	cbnz	r2, 19580 <hal_spi_init+0x34>
            spi->nhs_spi.spim = NRF_SPIM0;
   1956c:	4b0d      	ldr	r3, [pc, #52]	; (195a4 <hal_spi_init+0x58>)
   1956e:	6123      	str	r3, [r4, #16]
    hal_spi_disable(spi_num);
   19570:	f7ff ffb8 	bl	194e4 <hal_spi_disable>
        rc = hal_spi_init_master(spi, (struct nrf52_hal_spi_cfg *)cfg,
   19574:	4a0c      	ldr	r2, [pc, #48]	; (195a8 <hal_spi_init+0x5c>)
   19576:	4629      	mov	r1, r5
   19578:	4620      	mov	r0, r4
   1957a:	f7ff fea5 	bl	192c8 <hal_spi_init_master>
   1957e:	e00c      	b.n	1959a <hal_spi_init+0x4e>
            assert(0);
   19580:	2300      	movs	r3, #0
   19582:	461a      	mov	r2, r3
   19584:	4619      	mov	r1, r3
   19586:	4618      	mov	r0, r3
   19588:	f000 f952 	bl	19830 <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1958c:	2016      	movs	r0, #22
}
   1958e:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19590:	2016      	movs	r0, #22
   19592:	e002      	b.n	1959a <hal_spi_init+0x4e>
    rc = EINVAL;
   19594:	2016      	movs	r0, #22
   19596:	e000      	b.n	1959a <hal_spi_init+0x4e>
   19598:	2016      	movs	r0, #22
}
   1959a:	bd38      	pop	{r3, r4, r5, pc}
    rc = EINVAL;
   1959c:	2016      	movs	r0, #22
    return (rc);
   1959e:	e7fc      	b.n	1959a <hal_spi_init+0x4e>
   195a0:	00020e58 	.word	0x00020e58
   195a4:	40003000 	.word	0x40003000
   195a8:	00019251 	.word	0x00019251

000195ac <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   195ac:	2802      	cmp	r0, #2
   195ae:	dc0a      	bgt.n	195c6 <hal_spi_set_txrx_cb+0x1a>
   195b0:	4b08      	ldr	r3, [pc, #32]	; (195d4 <hal_spi_set_txrx_cb+0x28>)
   195b2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   195b6:	b143      	cbz	r3, 195ca <hal_spi_set_txrx_cb+0x1e>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   195b8:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
   195ba:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
   195be:	b930      	cbnz	r0, 195ce <hal_spi_set_txrx_cb+0x22>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
   195c0:	6219      	str	r1, [r3, #32]
        spi->txrx_cb_arg = arg;
   195c2:	625a      	str	r2, [r3, #36]	; 0x24
   195c4:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   195c6:	2016      	movs	r0, #22
   195c8:	4770      	bx	lr
   195ca:	2016      	movs	r0, #22
   195cc:	4770      	bx	lr
        rc = -1;
   195ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        rc = 0;
    }

err:
    return rc;
}
   195d2:	4770      	bx	lr
   195d4:	00020e58 	.word	0x00020e58

000195d8 <hal_spi_txrx>:
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
   195d8:	2b00      	cmp	r3, #0
   195da:	d046      	beq.n	1966a <hal_spi_txrx+0x92>
{
   195dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   195de:	460d      	mov	r5, r1
   195e0:	4617      	mov	r7, r2
   195e2:	461e      	mov	r6, r3
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
   195e4:	2802      	cmp	r0, #2
   195e6:	dc42      	bgt.n	1966e <hal_spi_txrx+0x96>
   195e8:	4b25      	ldr	r3, [pc, #148]	; (19680 <hal_spi_txrx+0xa8>)
   195ea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   195ee:	2b00      	cmp	r3, #0
   195f0:	d03f      	beq.n	19672 <hal_spi_txrx+0x9a>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   195f2:	781a      	ldrb	r2, [r3, #0]
   195f4:	2a00      	cmp	r2, #0
   195f6:	d13e      	bne.n	19676 <hal_spi_txrx+0x9e>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   195f8:	2900      	cmp	r1, #0
   195fa:	d03e      	beq.n	1967a <hal_spi_txrx+0xa2>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
   195fc:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
   195fe:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
   19602:	2b07      	cmp	r3, #7
   19604:	d004      	beq.n	19610 <hal_spi_txrx+0x38>
            hal_spi_disable(spi_num);
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
   19606:	b95b      	cbnz	r3, 19620 <hal_spi_txrx+0x48>
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   19608:	2301      	movs	r3, #1
   1960a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   1960e:	e007      	b.n	19620 <hal_spi_txrx+0x48>
            hal_spi_disable(spi_num);
   19610:	f7ff ff68 	bl	194e4 <hal_spi_disable>
   19614:	e7f8      	b.n	19608 <hal_spi_txrx+0x30>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
   19616:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
   1961a:	2300      	movs	r3, #0
   1961c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        while (spi->EVENTS_READY) {
   19620:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19624:	2b00      	cmp	r3, #0
   19626:	d1f6      	bne.n	19616 <hal_spi_txrx+0x3e>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
   19628:	782b      	ldrb	r3, [r5, #0]
   1962a:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
   1962e:	1e71      	subs	r1, r6, #1
        rxd = (uint8_t *)rxbuf;
   19630:	4638      	mov	r0, r7
        for (i = 0; i < len; ++i) {
   19632:	2200      	movs	r2, #0
   19634:	e00d      	b.n	19652 <hal_spi_txrx+0x7a>
            if (txcnt) {
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
   19636:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1963a:	2b00      	cmp	r3, #0
   1963c:	d0fb      	beq.n	19636 <hal_spi_txrx+0x5e>
            spi->EVENTS_READY = 0;
   1963e:	2300      	movs	r3, #0
   19640:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
   19644:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
   19648:	b2db      	uxtb	r3, r3
            if (rxbuf) {
   1964a:	b10f      	cbz	r7, 19650 <hal_spi_txrx+0x78>
                *rxd = rxval;
   1964c:	f800 3b01 	strb.w	r3, [r0], #1
        for (i = 0; i < len; ++i) {
   19650:	3201      	adds	r2, #1
   19652:	42b2      	cmp	r2, r6
   19654:	da07      	bge.n	19666 <hal_spi_txrx+0x8e>
            if (txcnt) {
   19656:	2900      	cmp	r1, #0
   19658:	d0ed      	beq.n	19636 <hal_spi_txrx+0x5e>
                spi->TXD = *txd;
   1965a:	786b      	ldrb	r3, [r5, #1]
   1965c:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
                --txcnt;
   19660:	3901      	subs	r1, #1
                ++txd;
   19662:	3501      	adds	r5, #1
   19664:	e7e7      	b.n	19636 <hal_spi_txrx+0x5e>
                ++rxd;
            }
        }
        return 0;
   19666:	2000      	movs	r0, #0
    }

err:
    return rc;
}
   19668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return rc;
   1966a:	2016      	movs	r0, #22
}
   1966c:	4770      	bx	lr
    return rc;
   1966e:	2016      	movs	r0, #22
   19670:	e7fa      	b.n	19668 <hal_spi_txrx+0x90>
   19672:	2016      	movs	r0, #22
   19674:	e7f8      	b.n	19668 <hal_spi_txrx+0x90>
   19676:	2016      	movs	r0, #22
   19678:	e7f6      	b.n	19668 <hal_spi_txrx+0x90>
   1967a:	2016      	movs	r0, #22
   1967c:	e7f4      	b.n	19668 <hal_spi_txrx+0x90>
   1967e:	bf00      	nop
   19680:	00020e58 	.word	0x00020e58

00019684 <hal_spi_txrx_noblock>:
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    rc = EINVAL;
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19684:	2802      	cmp	r0, #2
   19686:	dc57      	bgt.n	19738 <hal_spi_txrx_noblock+0xb4>
{
   19688:	b430      	push	{r4, r5}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1968a:	4c35      	ldr	r4, [pc, #212]	; (19760 <hal_spi_txrx_noblock+0xdc>)
   1968c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   19690:	2800      	cmp	r0, #0
   19692:	d053      	beq.n	1973c <hal_spi_txrx_noblock+0xb8>

    if ((spi->txrx_cb_func == NULL) || (len == 0)) {
   19694:	6a04      	ldr	r4, [r0, #32]
   19696:	2c00      	cmp	r4, #0
   19698:	d052      	beq.n	19740 <hal_spi_txrx_noblock+0xbc>
   1969a:	2b00      	cmp	r3, #0
   1969c:	d052      	beq.n	19744 <hal_spi_txrx_noblock+0xc0>
        }
        return rc;
    }
#endif

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1969e:	7804      	ldrb	r4, [r0, #0]
   196a0:	2c00      	cmp	r4, #0
   196a2:	d137      	bne.n	19714 <hal_spi_txrx_noblock+0x90>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   196a4:	2900      	cmp	r1, #0
   196a6:	d050      	beq.n	1974a <hal_spi_txrx_noblock+0xc6>
            goto err;
        }

        /* Not allowed if transfer in progress */
        if (spi->spi_xfr_flag) {
   196a8:	7844      	ldrb	r4, [r0, #1]
   196aa:	2c00      	cmp	r4, #0
   196ac:	d14f      	bne.n	1974e <hal_spi_txrx_noblock+0xca>
            rc = -1;
            goto err;
        }
        spim = spi->nhs_spi.spim;
   196ae:	6904      	ldr	r4, [r0, #16]
        spim->INTENCLR = SPIM_INTENCLR_END_Msk;
   196b0:	2540      	movs	r5, #64	; 0x40
   196b2:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
        spi->spi_xfr_flag = 1;
   196b6:	2501      	movs	r5, #1
   196b8:	7045      	strb	r5, [r0, #1]

        /* Must be enabled for SPIM as opposed to SPI */
        if (spim->ENABLE != SPIM_ENABLE_ENABLE_Enabled) {
   196ba:	f8d4 5500 	ldr.w	r5, [r4, #1280]	; 0x500
   196be:	2d07      	cmp	r5, #7
   196c0:	d005      	beq.n	196ce <hal_spi_txrx_noblock+0x4a>
            spim->ENABLE = 0;
   196c2:	2500      	movs	r5, #0
   196c4:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
            spim->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   196c8:	2507      	movs	r5, #7
   196ca:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
        }

        /* Set internal data structure information */
        spi->nhs_bytes_txd = 0;
   196ce:	2500      	movs	r5, #0
   196d0:	80c5      	strh	r5, [r0, #6]
        spi->nhs_buflen = len;
   196d2:	8083      	strh	r3, [r0, #4]
        spi->nhs_txbuf = txbuf;
   196d4:	6181      	str	r1, [r0, #24]

        len = min(SPIM_TXD_MAXCNT_MAX, len);
   196d6:	2bff      	cmp	r3, #255	; 0xff
   196d8:	bfa8      	it	ge
   196da:	23ff      	movge	r3, #255	; 0xff

        /* Set chip registers */
        spim->TXD.PTR = (uint32_t)txbuf;
   196dc:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        spim->TXD.MAXCNT = len;
   196e0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548

        /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
        spi->nhs_rxbuf = rxbuf;
   196e4:	61c2      	str	r2, [r0, #28]
        if (rxbuf == NULL) {
   196e6:	b172      	cbz	r2, 19706 <hal_spi_txrx_noblock+0x82>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
            spim->RXD.MAXCNT = 1;
        } else {
            spim->RXD.PTR = (uint32_t)rxbuf;
   196e8:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = len;
   196ec:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
        }

        spim->EVENTS_END = 0;
   196f0:	2000      	movs	r0, #0
   196f2:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
        spim->EVENTS_STOPPED = 0;
   196f6:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
        spim->TASKS_START = 1;
   196fa:	2301      	movs	r3, #1
   196fc:	6123      	str	r3, [r4, #16]
        spim->INTENSET = SPIM_INTENSET_END_Msk;
   196fe:	2340      	movs	r3, #64	; 0x40
   19700:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   19704:	e01f      	b.n	19746 <hal_spi_txrx_noblock+0xc2>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
   19706:	3002      	adds	r0, #2
   19708:	f8c4 0534 	str.w	r0, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = 1;
   1970c:	2301      	movs	r3, #1
   1970e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
   19712:	e7ed      	b.n	196f0 <hal_spi_txrx_noblock+0x6c>
    } else {
        /* Must have txbuf or rxbuf */
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   19714:	b161      	cbz	r1, 19730 <hal_spi_txrx_noblock+0xac>
            goto err;
        }

        /* XXX: what to do here? */
        if (len > 255) {
   19716:	2bff      	cmp	r3, #255	; 0xff
   19718:	dc1c      	bgt.n	19754 <hal_spi_txrx_noblock+0xd0>
        /*
         * Ready the slave for a transfer. Do not allow this to be called
         * if the slave has already been readied or is requesting the
         * semaphore
         */
        if (spi->slave_state != HAL_SPI_SLAVE_STATE_IDLE) {
   1971a:	78c4      	ldrb	r4, [r0, #3]
   1971c:	b9e4      	cbnz	r4, 19758 <hal_spi_txrx_noblock+0xd4>
            rc = -1;
            goto err;
        }

        spi->nhs_rxbuf = rxbuf;
   1971e:	61c2      	str	r2, [r0, #28]
        spi->nhs_txbuf = txbuf;
   19720:	6181      	str	r1, [r0, #24]
        spi->nhs_buflen = len;
   19722:	8083      	strh	r3, [r0, #4]
        spi->slave_state = HAL_SPI_SLAVE_STATE_ACQ_SEM;
   19724:	2301      	movs	r3, #1
   19726:	70c3      	strb	r3, [r0, #3]
        spi->nhs_spi.spis->TASKS_ACQUIRE = 1;
   19728:	6902      	ldr	r2, [r0, #16]
   1972a:	6253      	str	r3, [r2, #36]	; 0x24
    }
    return 0;
   1972c:	2000      	movs	r0, #0
   1972e:	e00a      	b.n	19746 <hal_spi_txrx_noblock+0xc2>
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   19730:	2a00      	cmp	r2, #0
   19732:	d1f0      	bne.n	19716 <hal_spi_txrx_noblock+0x92>
    rc = EINVAL;
   19734:	2016      	movs	r0, #22
   19736:	e006      	b.n	19746 <hal_spi_txrx_noblock+0xc2>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19738:	2016      	movs	r0, #22

err:
    return rc;
}
   1973a:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1973c:	2016      	movs	r0, #22
   1973e:	e002      	b.n	19746 <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   19740:	2016      	movs	r0, #22
   19742:	e000      	b.n	19746 <hal_spi_txrx_noblock+0xc2>
   19744:	2016      	movs	r0, #22
}
   19746:	bc30      	pop	{r4, r5}
   19748:	4770      	bx	lr
    rc = EINVAL;
   1974a:	2016      	movs	r0, #22
   1974c:	e7fb      	b.n	19746 <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   1974e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19752:	e7f8      	b.n	19746 <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   19754:	2016      	movs	r0, #22
   19756:	e7f6      	b.n	19746 <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   19758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1975c:	e7f3      	b.n	19746 <hal_spi_txrx_noblock+0xc2>
   1975e:	bf00      	nop
   19760:	00020e58 	.word	0x00020e58

00019764 <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
   19764:	b508      	push	{r3, lr}
    assert(0);
   19766:	2300      	movs	r3, #0
   19768:	461a      	mov	r2, r3
   1976a:	4619      	mov	r1, r3
   1976c:	4618      	mov	r0, r3
   1976e:	f000 f85f 	bl	19830 <__assert_func>
	...

00019774 <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
   19774:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
   19776:	4b06      	ldr	r3, [pc, #24]	; (19790 <nrf52_wdt_irq_handler+0x1c>)
   19778:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   1977c:	f013 0f01 	tst.w	r3, #1
   19780:	d100      	bne.n	19784 <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
   19782:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
   19784:	4b02      	ldr	r3, [pc, #8]	; (19790 <nrf52_wdt_irq_handler+0x1c>)
   19786:	2200      	movs	r2, #0
   19788:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
   1978c:	f7ff ffea 	bl	19764 <nrf52_hal_wdt_default_handler>
   19790:	40010000 	.word	0x40010000

00019794 <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
   19794:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
   19796:	4b17      	ldr	r3, [pc, #92]	; (197f4 <hal_watchdog_init+0x60>)
   19798:	2201      	movs	r2, #1
   1979a:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
   1979e:	4b16      	ldr	r3, [pc, #88]	; (197f8 <hal_watchdog_init+0x64>)
   197a0:	4298      	cmp	r0, r3
   197a2:	d821      	bhi.n	197e8 <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
   197a4:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   197a8:	0153      	lsls	r3, r2, #5
   197aa:	4a14      	ldr	r2, [pc, #80]	; (197fc <hal_watchdog_init+0x68>)
   197ac:	fba2 2303 	umull	r2, r3, r2, r3
   197b0:	08db      	lsrs	r3, r3, #3
   197b2:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   197b6:	4b0f      	ldr	r3, [pc, #60]	; (197f4 <hal_watchdog_init+0x60>)
   197b8:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
   197bc:	4a10      	ldr	r2, [pc, #64]	; (19800 <hal_watchdog_init+0x6c>)
   197be:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   197c0:	4910      	ldr	r1, [pc, #64]	; (19804 <hal_watchdog_init+0x70>)
   197c2:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   197c6:	4a10      	ldr	r2, [pc, #64]	; (19808 <hal_watchdog_init+0x74>)
   197c8:	21e0      	movs	r1, #224	; 0xe0
   197ca:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   197ce:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   197d2:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   197d6:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
   197d8:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
   197dc:	f042 0201 	orr.w	r2, r2, #1
   197e0:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
   197e4:	2000      	movs	r0, #0
   197e6:	bd08      	pop	{r3, pc}
        assert(0);
   197e8:	2300      	movs	r3, #0
   197ea:	461a      	mov	r2, r3
   197ec:	4619      	mov	r1, r3
   197ee:	4618      	mov	r0, r3
   197f0:	f000 f81e 	bl	19830 <__assert_func>
   197f4:	40010000 	.word	0x40010000
   197f8:	02aaaaaa 	.word	0x02aaaaaa
   197fc:	10624dd3 	.word	0x10624dd3
   19800:	e000ed00 	.word	0xe000ed00
   19804:	00019775 	.word	0x00019775
   19808:	e000e100 	.word	0xe000e100

0001980c <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    NRF_WDT->INTENSET = WDT_INTENSET_TIMEOUT_Msk;
   1980c:	4b02      	ldr	r3, [pc, #8]	; (19818 <hal_watchdog_enable+0xc>)
   1980e:	2201      	movs	r2, #1
   19810:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NRF_WDT->TASKS_START = 1;
   19814:	601a      	str	r2, [r3, #0]
}
   19816:	4770      	bx	lr
   19818:	40010000 	.word	0x40010000

0001981c <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    NRF_WDT->RR[0] = WDT_RR_RR_Reload;
   1981c:	4b02      	ldr	r3, [pc, #8]	; (19828 <hal_watchdog_tickle+0xc>)
   1981e:	4a03      	ldr	r2, [pc, #12]	; (1982c <hal_watchdog_tickle+0x10>)
   19820:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
   19824:	4770      	bx	lr
   19826:	bf00      	nop
   19828:	40010000 	.word	0x40010000
   1982c:	6e524635 	.word	0x6e524635

00019830 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
   19830:	b508      	push	{r3, lr}
   19832:	4675      	mov	r5, lr
   19834:	4604      	mov	r4, r0
   19836:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
   19838:	f001 fa90 	bl	1ad5c <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
   1983c:	f7ff f905 	bl	18a4a <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
   19840:	b18c      	cbz	r4, 19866 <__assert_func+0x36>
   19842:	4633      	mov	r3, r6
   19844:	4622      	mov	r2, r4
   19846:	4629      	mov	r1, r5
   19848:	4809      	ldr	r0, [pc, #36]	; (19870 <__assert_func+0x40>)
   1984a:	f7ff f929 	bl	18aa0 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
   1984e:	f7ee fc99 	bl	8184 <hal_debugger_connected>
   19852:	b100      	cbz	r0, 19856 <__assert_func+0x26>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
   19854:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
   19856:	4b07      	ldr	r3, [pc, #28]	; (19874 <__assert_func+0x44>)
   19858:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1985c:	605a      	str	r2, [r3, #4]
    asm("isb");
   1985e:	f3bf 8f6f 	isb	sy
    hal_system_reset();
   19862:	f7ee fc97 	bl	8194 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
   19866:	4629      	mov	r1, r5
   19868:	4803      	ldr	r0, [pc, #12]	; (19878 <__assert_func+0x48>)
   1986a:	f7ff f919 	bl	18aa0 <console_printf>
   1986e:	e7ee      	b.n	1984e <__assert_func+0x1e>
   19870:	00020e74 	.word	0x00020e74
   19874:	e000ed00 	.word	0xe000ed00
   19878:	00020e64 	.word	0x00020e64

0001987c <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
   1987c:	b500      	push	{lr}
   1987e:	b083      	sub	sp, #12
   19880:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
   19882:	f7ff f8e2 	bl	18a4a <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
   19886:	4d1b      	ldr	r5, [pc, #108]	; (198f4 <os_default_irq+0x78>)
   19888:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
   1988a:	6822      	ldr	r2, [r4, #0]
   1988c:	f3c1 0108 	ubfx	r1, r1, #0, #9
   19890:	4819      	ldr	r0, [pc, #100]	; (198f8 <os_default_irq+0x7c>)
   19892:	f7ff f905 	bl	18aa0 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
   19896:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
   19898:	6883      	ldr	r3, [r0, #8]
   1989a:	6842      	ldr	r2, [r0, #4]
   1989c:	6801      	ldr	r1, [r0, #0]
   1989e:	68c0      	ldr	r0, [r0, #12]
   198a0:	9000      	str	r0, [sp, #0]
   198a2:	4816      	ldr	r0, [pc, #88]	; (198fc <os_default_irq+0x80>)
   198a4:	f7ff f8fc 	bl	18aa0 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
   198a8:	6923      	ldr	r3, [r4, #16]
   198aa:	9300      	str	r3, [sp, #0]
   198ac:	68e3      	ldr	r3, [r4, #12]
   198ae:	68a2      	ldr	r2, [r4, #8]
   198b0:	6861      	ldr	r1, [r4, #4]
   198b2:	4813      	ldr	r0, [pc, #76]	; (19900 <os_default_irq+0x84>)
   198b4:	f7ff f8f4 	bl	18aa0 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
   198b8:	6a23      	ldr	r3, [r4, #32]
   198ba:	9300      	str	r3, [sp, #0]
   198bc:	69e3      	ldr	r3, [r4, #28]
   198be:	69a2      	ldr	r2, [r4, #24]
   198c0:	6961      	ldr	r1, [r4, #20]
   198c2:	4810      	ldr	r0, [pc, #64]	; (19904 <os_default_irq+0x88>)
   198c4:	f7ff f8ec 	bl	18aa0 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
   198c8:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
   198ca:	6983      	ldr	r3, [r0, #24]
   198cc:	6942      	ldr	r2, [r0, #20]
   198ce:	6901      	ldr	r1, [r0, #16]
   198d0:	69c0      	ldr	r0, [r0, #28]
   198d2:	9000      	str	r0, [sp, #0]
   198d4:	480c      	ldr	r0, [pc, #48]	; (19908 <os_default_irq+0x8c>)
   198d6:	f7ff f8e3 	bl	18aa0 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
   198da:	6869      	ldr	r1, [r5, #4]
   198dc:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   198de:	6aab      	ldr	r3, [r5, #40]	; 0x28
   198e0:	480a      	ldr	r0, [pc, #40]	; (1990c <os_default_irq+0x90>)
   198e2:	f7ff f8dd 	bl	18aa0 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
   198e6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   198e8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   198ea:	4809      	ldr	r0, [pc, #36]	; (19910 <os_default_irq+0x94>)
   198ec:	f7ff f8d8 	bl	18aa0 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
   198f0:	f7ee fc50 	bl	8194 <hal_system_reset>
   198f4:	e000ed00 	.word	0xe000ed00
   198f8:	00020e8c 	.word	0x00020e8c
   198fc:	00020ec0 	.word	0x00020ec0
   19900:	00020ef4 	.word	0x00020ef4
   19904:	00020f28 	.word	0x00020f28
   19908:	00020f5c 	.word	0x00020f5c
   1990c:	00020f90 	.word	0x00020f90
   19910:	00020fb8 	.word	0x00020fb8

00019914 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
   19914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_time_t sanity_itvl_ticks;

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

    hal_watchdog_tickle();
   19916:	f7ff ff81 	bl	1981c <hal_watchdog_tickle>
    sanity_last = 0;
   1991a:	2500      	movs	r5, #0
   1991c:	e00b      	b.n	19936 <os_idle_task+0x22>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
   1991e:	f000 fec7 	bl	1a6b0 <os_sanity_run>
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
   19922:	f7ff ff7b 	bl	1981c <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
            sanity_last = now;
   19926:	4625      	mov	r5, r4
   19928:	e011      	b.n	1994e <os_idle_task+0x3a>
         * as the idle task does not schedule itself.
         */
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
   1992a:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
   1992c:	f002 f842 	bl	1b9b4 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
   19930:	4638      	mov	r0, r7
   19932:	f001 fa19 	bl	1ad68 <os_arch_restore_sr>
        ++g_os_idle_ctr;
   19936:	4a14      	ldr	r2, [pc, #80]	; (19988 <os_idle_task+0x74>)
   19938:	6813      	ldr	r3, [r2, #0]
   1993a:	3301      	adds	r3, #1
   1993c:	6013      	str	r3, [r2, #0]
        now = os_time_get();
   1993e:	f001 f995 	bl	1ac6c <os_time_get>
   19942:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
   19944:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   19948:	1ac3      	subs	r3, r0, r3
   1994a:	2b00      	cmp	r3, #0
   1994c:	dce7      	bgt.n	1991e <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
   1994e:	f001 fa05 	bl	1ad5c <os_arch_save_sr>
   19952:	4607      	mov	r7, r0
        now = os_time_get();
   19954:	f001 f98a 	bl	1ac6c <os_time_get>
   19958:	4606      	mov	r6, r0
        sticks = os_sched_wakeup_ticks(now);
   1995a:	f000 ffd7 	bl	1a90c <os_sched_wakeup_ticks>
   1995e:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
   19960:	4630      	mov	r0, r6
   19962:	f000 f975 	bl	19c50 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
   19966:	42a0      	cmp	r0, r4
   19968:	bf28      	it	cs
   1996a:	4620      	movcs	r0, r4
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
   1996c:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   19970:	1b9b      	subs	r3, r3, r6
   19972:	4298      	cmp	r0, r3
   19974:	bf28      	it	cs
   19976:	4618      	movcs	r0, r3
        if (iticks < MIN_IDLE_TICKS) {
   19978:	280b      	cmp	r0, #11
   1997a:	d9d6      	bls.n	1992a <os_idle_task+0x16>
        } else if (iticks > MAX_IDLE_TICKS) {
   1997c:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   19980:	d9d4      	bls.n	1992c <os_idle_task+0x18>
            iticks = MAX_IDLE_TICKS;
   19982:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
   19986:	e7d1      	b.n	1992c <os_idle_task+0x18>
   19988:	2000a63c 	.word	0x2000a63c

0001998c <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
   1998c:	b508      	push	{r3, lr}
   1998e:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
   19990:	2100      	movs	r1, #0
   19992:	4608      	mov	r0, r1
   19994:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
   19996:	2300      	movs	r3, #0
   19998:	461a      	mov	r2, r3
   1999a:	4619      	mov	r1, r3
   1999c:	4618      	mov	r0, r3
   1999e:	f7ff ff47 	bl	19830 <__assert_func>
	...

000199a4 <os_started>:
}
   199a4:	4b01      	ldr	r3, [pc, #4]	; (199ac <os_started+0x8>)
   199a6:	6818      	ldr	r0, [r3, #0]
   199a8:	4770      	bx	lr
   199aa:	bf00      	nop
   199ac:	2000a638 	.word	0x2000a638

000199b0 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
   199b0:	b500      	push	{lr}
   199b2:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
   199b4:	2340      	movs	r3, #64	; 0x40
   199b6:	9303      	str	r3, [sp, #12]
   199b8:	4b15      	ldr	r3, [pc, #84]	; (19a10 <os_init_idle_task+0x60>)
   199ba:	9302      	str	r3, [sp, #8]
   199bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   199c0:	9301      	str	r3, [sp, #4]
   199c2:	23ff      	movs	r3, #255	; 0xff
   199c4:	9300      	str	r3, [sp, #0]
   199c6:	2300      	movs	r3, #0
   199c8:	4a12      	ldr	r2, [pc, #72]	; (19a14 <os_init_idle_task+0x64>)
   199ca:	4913      	ldr	r1, [pc, #76]	; (19a18 <os_init_idle_task+0x68>)
   199cc:	4813      	ldr	r0, [pc, #76]	; (19a1c <os_init_idle_task+0x6c>)
   199ce:	f001 f88d 	bl	1aaec <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
   199d2:	b950      	cbnz	r0, 199ea <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
   199d4:	f000 fea2 	bl	1a71c <os_sanity_init>
    assert(rc == 0);
   199d8:	b968      	cbnz	r0, 199f6 <os_init_idle_task+0x46>

    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
   199da:	f247 5030 	movw	r0, #30000	; 0x7530
   199de:	f7ff fed9 	bl	19794 <hal_watchdog_init>
    assert(rc == 0);
   199e2:	b970      	cbnz	r0, 19a02 <os_init_idle_task+0x52>

#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
}
   199e4:	b005      	add	sp, #20
   199e6:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   199ea:	2300      	movs	r3, #0
   199ec:	461a      	mov	r2, r3
   199ee:	4619      	mov	r1, r3
   199f0:	4618      	mov	r0, r3
   199f2:	f7ff ff1d 	bl	19830 <__assert_func>
    assert(rc == 0);
   199f6:	2300      	movs	r3, #0
   199f8:	461a      	mov	r2, r3
   199fa:	4619      	mov	r1, r3
   199fc:	4618      	mov	r0, r3
   199fe:	f7ff ff17 	bl	19830 <__assert_func>
    assert(rc == 0);
   19a02:	2300      	movs	r3, #0
   19a04:	461a      	mov	r2, r3
   19a06:	4619      	mov	r1, r3
   19a08:	4618      	mov	r0, r3
   19a0a:	f7ff ff11 	bl	19830 <__assert_func>
   19a0e:	bf00      	nop
   19a10:	20001720 	.word	0x20001720
   19a14:	00019915 	.word	0x00019915
   19a18:	00020fdc 	.word	0x00020fdc
   19a1c:	2000a598 	.word	0x2000a598

00019a20 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
   19a20:	b510      	push	{r4, lr}
   19a22:	b084      	sub	sp, #16
   19a24:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
   19a26:	4b24      	ldr	r3, [pc, #144]	; (19ab8 <os_init+0x98>)
   19a28:	2200      	movs	r2, #0
   19a2a:	601a      	str	r2, [r3, #0]
   19a2c:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
   19a2e:	4b23      	ldr	r3, [pc, #140]	; (19abc <os_init+0x9c>)
   19a30:	601a      	str	r2, [r3, #0]
   19a32:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
   19a34:	f000 faba 	bl	19fac <os_eventq_dflt_get>
   19a38:	f000 fa0e 	bl	19e58 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
   19a3c:	f000 fa04 	bl	19e48 <os_dev_reset>

    err = os_arch_os_init();
   19a40:	f001 f9c6 	bl	1add0 <os_arch_os_init>
    assert(err == OS_OK);
   19a44:	bb00      	cbnz	r0, 19a88 <os_init+0x68>

    if (main_fn) {
   19a46:	b18c      	cbz	r4, 19a6c <os_init+0x4c>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
   19a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   19a4c:	9303      	str	r3, [sp, #12]
   19a4e:	4b1c      	ldr	r3, [pc, #112]	; (19ac0 <os_init+0xa0>)
   19a50:	9302      	str	r3, [sp, #8]
   19a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19a56:	9301      	str	r3, [sp, #4]
   19a58:	237f      	movs	r3, #127	; 0x7f
   19a5a:	9300      	str	r3, [sp, #0]
   19a5c:	4623      	mov	r3, r4
   19a5e:	4a19      	ldr	r2, [pc, #100]	; (19ac4 <os_init+0xa4>)
   19a60:	4919      	ldr	r1, [pc, #100]	; (19ac8 <os_init+0xa8>)
   19a62:	481a      	ldr	r0, [pc, #104]	; (19acc <os_init+0xac>)
   19a64:	f001 f842 	bl	1aaec <os_task_init>
   19a68:	b2c0      	uxtb	r0, r0
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
   19a6a:	b998      	cbnz	r0, 19a94 <os_init+0x74>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
   19a6c:	f001 fe72 	bl	1b754 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
   19a70:	2001      	movs	r0, #1
   19a72:	f000 f985 	bl	19d80 <os_dev_initialize_all>
   19a76:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   19a78:	b990      	cbnz	r0, 19aa0 <os_init+0x80>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
   19a7a:	2002      	movs	r0, #2
   19a7c:	f000 f980 	bl	19d80 <os_dev_initialize_all>
   19a80:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   19a82:	b998      	cbnz	r0, 19aac <os_init+0x8c>
}
   19a84:	b004      	add	sp, #16
   19a86:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
   19a88:	2300      	movs	r3, #0
   19a8a:	461a      	mov	r2, r3
   19a8c:	4619      	mov	r1, r3
   19a8e:	4618      	mov	r0, r3
   19a90:	f7ff fece 	bl	19830 <__assert_func>
        assert(err == 0);
   19a94:	2300      	movs	r3, #0
   19a96:	461a      	mov	r2, r3
   19a98:	4619      	mov	r1, r3
   19a9a:	4618      	mov	r0, r3
   19a9c:	f7ff fec8 	bl	19830 <__assert_func>
    assert(err == OS_OK);
   19aa0:	2300      	movs	r3, #0
   19aa2:	461a      	mov	r2, r3
   19aa4:	4619      	mov	r1, r3
   19aa6:	4618      	mov	r0, r3
   19aa8:	f7ff fec2 	bl	19830 <__assert_func>
    assert(err == OS_OK);
   19aac:	2300      	movs	r3, #0
   19aae:	461a      	mov	r2, r3
   19ab0:	4619      	mov	r1, r3
   19ab2:	4618      	mov	r0, r3
   19ab4:	f7ff febc 	bl	19830 <__assert_func>
   19ab8:	2000a640 	.word	0x2000a640
   19abc:	2000a668 	.word	0x2000a668
   19ac0:	20001820 	.word	0x20001820
   19ac4:	0001998d 	.word	0x0001998d
   19ac8:	00020fd4 	.word	0x00020fd4
   19acc:	2000a5e8 	.word	0x2000a5e8

00019ad0 <os_start>:

void
os_start(void)
{
   19ad0:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
   19ad2:	f7ff fe9b 	bl	1980c <hal_watchdog_enable>

    err = os_arch_os_start();
   19ad6:	f001 f9db 	bl	1ae90 <os_arch_os_start>
    assert(err == OS_OK);
   19ada:	b900      	cbnz	r0, 19ade <os_start+0xe>
#else
    assert(0);
#endif
}
   19adc:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
   19ade:	2300      	movs	r3, #0
   19ae0:	461a      	mov	r2, r3
   19ae2:	4619      	mov	r1, r3
   19ae4:	4618      	mov	r0, r3
   19ae6:	f7ff fea3 	bl	19830 <__assert_func>
	...

00019aec <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
   19aec:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   19aee:	4b0c      	ldr	r3, [pc, #48]	; (19b20 <os_pkg_init+0x34>)
   19af0:	781b      	ldrb	r3, [r3, #0]
   19af2:	b14b      	cbz	r3, 19b08 <os_pkg_init+0x1c>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
   19af4:	2003      	movs	r0, #3
   19af6:	f000 f943 	bl	19d80 <os_dev_initialize_all>
   19afa:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   19afc:	b948      	cbnz	r0, 19b12 <os_pkg_init+0x26>

    os_mempool_module_init();
   19afe:	f000 fc25 	bl	1a34c <os_mempool_module_init>
    os_msys_init();
   19b02:	f000 fcad 	bl	1a460 <os_msys_init>
}
   19b06:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   19b08:	461a      	mov	r2, r3
   19b0a:	4619      	mov	r1, r3
   19b0c:	4618      	mov	r0, r3
   19b0e:	f7ff fe8f 	bl	19830 <__assert_func>
    assert(err == OS_OK);
   19b12:	2300      	movs	r3, #0
   19b14:	461a      	mov	r2, r3
   19b16:	4619      	mov	r1, r3
   19b18:	4618      	mov	r0, r3
   19b1a:	f7ff fe89 	bl	19830 <__assert_func>
   19b1e:	bf00      	nop
   19b20:	2000a56c 	.word	0x2000a56c

00019b24 <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
   19b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19b26:	4604      	mov	r4, r0
   19b28:	460d      	mov	r5, r1
   19b2a:	4617      	mov	r7, r2
   19b2c:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
   19b2e:	2220      	movs	r2, #32
   19b30:	2100      	movs	r1, #0
   19b32:	f001 fa80 	bl	1b036 <memset>
    c->c_ev.ev_cb = ev_cb;
   19b36:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
   19b38:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
   19b3a:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
   19b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00019b40 <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
   19b40:	b538      	push	{r3, r4, r5, lr}
   19b42:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
   19b44:	f001 f90a 	bl	1ad5c <os_arch_save_sr>
   19b48:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
   19b4a:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
   19b4c:	b13b      	cbz	r3, 19b5e <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   19b4e:	69a2      	ldr	r2, [r4, #24]
   19b50:	b172      	cbz	r2, 19b70 <os_callout_stop+0x30>
   19b52:	61d3      	str	r3, [r2, #28]
   19b54:	69e3      	ldr	r3, [r4, #28]
   19b56:	69a2      	ldr	r2, [r4, #24]
   19b58:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
   19b5a:	2300      	movs	r3, #0
   19b5c:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
   19b5e:	6920      	ldr	r0, [r4, #16]
   19b60:	b110      	cbz	r0, 19b68 <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
   19b62:	4621      	mov	r1, r4
   19b64:	f000 fa02 	bl	19f6c <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
   19b68:	4628      	mov	r0, r5
   19b6a:	f001 f8fd 	bl	1ad68 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
   19b6e:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   19b70:	4a01      	ldr	r2, [pc, #4]	; (19b78 <os_callout_stop+0x38>)
   19b72:	6053      	str	r3, [r2, #4]
   19b74:	e7ee      	b.n	19b54 <os_callout_stop+0x14>
   19b76:	bf00      	nop
   19b78:	2000a640 	.word	0x2000a640

00019b7c <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
   19b7c:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
   19b7e:	6903      	ldr	r3, [r0, #16]
   19b80:	b1c3      	cbz	r3, 19bb4 <os_callout_reset+0x38>
   19b82:	4605      	mov	r5, r0
   19b84:	460c      	mov	r4, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
   19b86:	2900      	cmp	r1, #0
   19b88:	db2f      	blt.n	19bea <os_callout_reset+0x6e>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
   19b8a:	f001 f8e7 	bl	1ad5c <os_arch_save_sr>
   19b8e:	4606      	mov	r6, r0

    os_callout_stop(c);
   19b90:	4628      	mov	r0, r5
   19b92:	f7ff ffd5 	bl	19b40 <os_callout_stop>

    if (ticks == 0) {
   19b96:	b904      	cbnz	r4, 19b9a <os_callout_reset+0x1e>
        ticks = 1;
   19b98:	2401      	movs	r4, #1
    }

    c->c_ticks = os_time_get() + ticks;
   19b9a:	f001 f867 	bl	1ac6c <os_time_get>
   19b9e:	4420      	add	r0, r4
   19ba0:	6168      	str	r0, [r5, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   19ba2:	4b13      	ldr	r3, [pc, #76]	; (19bf0 <os_callout_reset+0x74>)
   19ba4:	681b      	ldr	r3, [r3, #0]
   19ba6:	b153      	cbz	r3, 19bbe <os_callout_reset+0x42>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
   19ba8:	695a      	ldr	r2, [r3, #20]
   19baa:	1a82      	subs	r2, r0, r2
   19bac:	2a00      	cmp	r2, #0
   19bae:	db06      	blt.n	19bbe <os_callout_reset+0x42>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   19bb0:	699b      	ldr	r3, [r3, #24]
   19bb2:	e7f8      	b.n	19ba6 <os_callout_reset+0x2a>
    assert(c->c_evq != NULL);
   19bb4:	461a      	mov	r2, r3
   19bb6:	4619      	mov	r1, r3
   19bb8:	4618      	mov	r0, r3
   19bba:	f7ff fe39 	bl	19830 <__assert_func>
            break;
        }
    }

    if (entry) {
   19bbe:	b15b      	cbz	r3, 19bd8 <os_callout_reset+0x5c>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
   19bc0:	69da      	ldr	r2, [r3, #28]
   19bc2:	61ea      	str	r2, [r5, #28]
   19bc4:	61ab      	str	r3, [r5, #24]
   19bc6:	69da      	ldr	r2, [r3, #28]
   19bc8:	6015      	str	r5, [r2, #0]
   19bca:	3518      	adds	r5, #24
   19bcc:	61dd      	str	r5, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
   19bce:	4630      	mov	r0, r6
   19bd0:	f001 f8ca 	bl	1ad68 <os_arch_restore_sr>

    ret = OS_OK;
   19bd4:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
   19bd6:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
   19bd8:	2300      	movs	r3, #0
   19bda:	61ab      	str	r3, [r5, #24]
   19bdc:	4b04      	ldr	r3, [pc, #16]	; (19bf0 <os_callout_reset+0x74>)
   19bde:	685a      	ldr	r2, [r3, #4]
   19be0:	61ea      	str	r2, [r5, #28]
   19be2:	6015      	str	r5, [r2, #0]
   19be4:	3518      	adds	r5, #24
   19be6:	605d      	str	r5, [r3, #4]
   19be8:	e7f1      	b.n	19bce <os_callout_reset+0x52>
        ret = OS_EINVAL;
   19bea:	2002      	movs	r0, #2
    return ret;
   19bec:	e7f3      	b.n	19bd6 <os_callout_reset+0x5a>
   19bee:	bf00      	nop
   19bf0:	2000a640 	.word	0x2000a640

00019bf4 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
   19bf4:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
   19bf6:	f001 f839 	bl	1ac6c <os_time_get>
   19bfa:	4605      	mov	r5, r0
   19bfc:	e00f      	b.n	19c1e <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   19bfe:	69e2      	ldr	r2, [r4, #28]
   19c00:	4b12      	ldr	r3, [pc, #72]	; (19c4c <os_callout_tick+0x58>)
   19c02:	605a      	str	r2, [r3, #4]
   19c04:	69e3      	ldr	r3, [r4, #28]
   19c06:	69a2      	ldr	r2, [r4, #24]
   19c08:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
   19c0a:	2300      	movs	r3, #0
   19c0c:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
   19c0e:	f001 f8ab 	bl	1ad68 <os_arch_restore_sr>

        if (c) {
   19c12:	b1d4      	cbz	r4, 19c4a <os_callout_tick+0x56>
            if (c->c_evq) {
   19c14:	6920      	ldr	r0, [r4, #16]
   19c16:	b9a0      	cbnz	r0, 19c42 <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
            } else {
                c->c_ev.ev_cb(&c->c_ev);
   19c18:	6863      	ldr	r3, [r4, #4]
   19c1a:	4620      	mov	r0, r4
   19c1c:	4798      	blx	r3
        OS_ENTER_CRITICAL(sr);
   19c1e:	f001 f89d 	bl	1ad5c <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
   19c22:	4b0a      	ldr	r3, [pc, #40]	; (19c4c <os_callout_tick+0x58>)
   19c24:	681c      	ldr	r4, [r3, #0]
        if (c) {
   19c26:	2c00      	cmp	r4, #0
   19c28:	d0f1      	beq.n	19c0e <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
   19c2a:	6963      	ldr	r3, [r4, #20]
   19c2c:	1aeb      	subs	r3, r5, r3
   19c2e:	2b00      	cmp	r3, #0
   19c30:	db05      	blt.n	19c3e <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   19c32:	69a3      	ldr	r3, [r4, #24]
   19c34:	2b00      	cmp	r3, #0
   19c36:	d0e2      	beq.n	19bfe <os_callout_tick+0xa>
   19c38:	69e2      	ldr	r2, [r4, #28]
   19c3a:	61da      	str	r2, [r3, #28]
   19c3c:	e7e2      	b.n	19c04 <os_callout_tick+0x10>
                c = NULL;
   19c3e:	2400      	movs	r4, #0
   19c40:	e7e5      	b.n	19c0e <os_callout_tick+0x1a>
                os_eventq_put(c->c_evq, &c->c_ev);
   19c42:	4621      	mov	r1, r4
   19c44:	f000 f915 	bl	19e72 <os_eventq_put>
   19c48:	e7e9      	b.n	19c1e <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
   19c4a:	bd38      	pop	{r3, r4, r5, pc}
   19c4c:	2000a640 	.word	0x2000a640

00019c50 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
   19c50:	b510      	push	{r4, lr}
   19c52:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
   19c54:	f001 f88b 	bl	1ad6e <os_arch_in_critical>
   19c58:	b130      	cbz	r0, 19c68 <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
   19c5a:	4b09      	ldr	r3, [pc, #36]	; (19c80 <os_callout_wakeup_ticks+0x30>)
   19c5c:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
   19c5e:	b15b      	cbz	r3, 19c78 <os_callout_wakeup_ticks+0x28>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
   19c60:	6958      	ldr	r0, [r3, #20]
   19c62:	1b00      	subs	r0, r0, r4
   19c64:	d406      	bmi.n	19c74 <os_callout_wakeup_ticks+0x24>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
   19c66:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   19c68:	2300      	movs	r3, #0
   19c6a:	461a      	mov	r2, r3
   19c6c:	4619      	mov	r1, r3
   19c6e:	4618      	mov	r0, r3
   19c70:	f7ff fdde 	bl	19830 <__assert_func>
            rt = 0;     /* callout time is in the past */
   19c74:	2000      	movs	r0, #0
   19c76:	e7f6      	b.n	19c66 <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
   19c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   19c7c:	e7f3      	b.n	19c66 <os_callout_wakeup_ticks+0x16>
   19c7e:	bf00      	nop
   19c80:	2000a640 	.word	0x2000a640

00019c84 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   19c84:	b508      	push	{r3, lr}

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   19c86:	4601      	mov	r1, r0
   19c88:	2000      	movs	r0, #0
   19c8a:	f002 f84d 	bl	1bd28 <hal_timer_config>
    return rc;
}
   19c8e:	bd08      	pop	{r3, pc}

00019c90 <os_cputime_get32>:
    hal_timer_stop(timer);
}

uint32_t
os_cputime_get32(void)
{
   19c90:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
   19c92:	2000      	movs	r0, #0
   19c94:	f002 f8c4 	bl	1be20 <hal_timer_read>
    return cpu_time;
}
   19c98:	bd08      	pop	{r3, pc}
	...

00019c9c <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
   19c9c:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
   19c9e:	4b15      	ldr	r3, [pc, #84]	; (19cf4 <os_dev_add+0x58>)
   19ca0:	681d      	ldr	r5, [r3, #0]
   19ca2:	b115      	cbz	r5, 19caa <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   19ca4:	462b      	mov	r3, r5
    prev_dev = NULL;
   19ca6:	2400      	movs	r4, #0
   19ca8:	e008      	b.n	19cbc <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   19caa:	4603      	mov	r3, r0
   19cac:	f843 5f20 	str.w	r5, [r3, #32]!
   19cb0:	4a10      	ldr	r2, [pc, #64]	; (19cf4 <os_dev_add+0x58>)
   19cb2:	6053      	str	r3, [r2, #4]
   19cb4:	6010      	str	r0, [r2, #0]
        return (0);
   19cb6:	e010      	b.n	19cda <os_dev_add+0x3e>
        if (dev->od_stage < cur_dev->od_stage ||
            ((dev->od_stage == cur_dev->od_stage) &&
             (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
   19cb8:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   19cba:	6a1b      	ldr	r3, [r3, #32]
   19cbc:	b143      	cbz	r3, 19cd0 <os_dev_add+0x34>
        if (dev->od_stage < cur_dev->od_stage ||
   19cbe:	7e01      	ldrb	r1, [r0, #24]
   19cc0:	7e1a      	ldrb	r2, [r3, #24]
   19cc2:	4291      	cmp	r1, r2
   19cc4:	d304      	bcc.n	19cd0 <os_dev_add+0x34>
   19cc6:	d1f7      	bne.n	19cb8 <os_dev_add+0x1c>
             (dev->od_priority < cur_dev->od_priority))) {
   19cc8:	7e41      	ldrb	r1, [r0, #25]
   19cca:	7e5a      	ldrb	r2, [r3, #25]
            ((dev->od_stage == cur_dev->od_stage) &&
   19ccc:	4291      	cmp	r1, r2
   19cce:	d2f3      	bcs.n	19cb8 <os_dev_add+0x1c>
    }

    if (prev_dev) {
   19cd0:	b15c      	cbz	r4, 19cea <os_dev_add+0x4e>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   19cd2:	6a23      	ldr	r3, [r4, #32]
   19cd4:	6203      	str	r3, [r0, #32]
   19cd6:	b11b      	cbz	r3, 19ce0 <os_dev_add+0x44>
   19cd8:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
   19cda:	2000      	movs	r0, #0
   19cdc:	bc30      	pop	{r4, r5}
   19cde:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   19ce0:	f100 0320 	add.w	r3, r0, #32
   19ce4:	4a03      	ldr	r2, [pc, #12]	; (19cf4 <os_dev_add+0x58>)
   19ce6:	6053      	str	r3, [r2, #4]
   19ce8:	e7f6      	b.n	19cd8 <os_dev_add+0x3c>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   19cea:	6205      	str	r5, [r0, #32]
   19cec:	4b01      	ldr	r3, [pc, #4]	; (19cf4 <os_dev_add+0x58>)
   19cee:	6018      	str	r0, [r3, #0]
   19cf0:	e7f3      	b.n	19cda <os_dev_add+0x3e>
   19cf2:	bf00      	nop
   19cf4:	20005820 	.word	0x20005820

00019cf8 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
   19cf8:	b510      	push	{r4, lr}
   19cfa:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
   19cfc:	6903      	ldr	r3, [r0, #16]
   19cfe:	6941      	ldr	r1, [r0, #20]
   19d00:	4798      	blx	r3
    if (rc != 0) {
   19d02:	4603      	mov	r3, r0
   19d04:	b128      	cbz	r0, 19d12 <os_dev_initialize+0x1a>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
   19d06:	7ee2      	ldrb	r2, [r4, #27]
   19d08:	f012 0f08 	tst.w	r2, #8
   19d0c:	d105      	bne.n	19d1a <os_dev_initialize+0x22>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
   19d0e:	2300      	movs	r3, #0
   19d10:	e003      	b.n	19d1a <os_dev_initialize+0x22>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
   19d12:	7ee2      	ldrb	r2, [r4, #27]
   19d14:	f042 0201 	orr.w	r2, r2, #1
   19d18:	76e2      	strb	r2, [r4, #27]
err:
    return rc;
}
   19d1a:	4618      	mov	r0, r3
   19d1c:	bd10      	pop	{r4, pc}

00019d1e <os_dev_init>:
    dev->od_name = name;
   19d1e:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
   19d20:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
   19d22:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
   19d24:	2300      	movs	r3, #0
   19d26:	76c3      	strb	r3, [r0, #27]
    dev->od_open_ref = 0;
   19d28:	7683      	strb	r3, [r0, #26]
    dev->od_init = od_init;
   19d2a:	9a00      	ldr	r2, [sp, #0]
   19d2c:	6102      	str	r2, [r0, #16]
    dev->od_init_arg = arg;
   19d2e:	9a01      	ldr	r2, [sp, #4]
   19d30:	6142      	str	r2, [r0, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
   19d32:	6003      	str	r3, [r0, #0]
   19d34:	6043      	str	r3, [r0, #4]
   19d36:	6083      	str	r3, [r0, #8]
   19d38:	60c3      	str	r3, [r0, #12]
}
   19d3a:	4618      	mov	r0, r3
   19d3c:	4770      	bx	lr
	...

00019d40 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
   19d40:	b530      	push	{r4, r5, lr}
   19d42:	b083      	sub	sp, #12
   19d44:	4605      	mov	r5, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
   19d46:	9c07      	ldr	r4, [sp, #28]
   19d48:	9401      	str	r4, [sp, #4]
   19d4a:	9c06      	ldr	r4, [sp, #24]
   19d4c:	9400      	str	r4, [sp, #0]
   19d4e:	f7ff ffe6 	bl	19d1e <os_dev_init>
    if (rc != 0) {
   19d52:	4603      	mov	r3, r0
   19d54:	b110      	cbz	r0, 19d5c <os_dev_create+0x1c>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
   19d56:	4618      	mov	r0, r3
   19d58:	b003      	add	sp, #12
   19d5a:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
   19d5c:	4628      	mov	r0, r5
   19d5e:	f7ff ff9d 	bl	19c9c <os_dev_add>
    if (rc != 0) {
   19d62:	4603      	mov	r3, r0
   19d64:	2800      	cmp	r0, #0
   19d66:	d1f6      	bne.n	19d56 <os_dev_create+0x16>
    if (g_os_started) {
   19d68:	4a04      	ldr	r2, [pc, #16]	; (19d7c <os_dev_create+0x3c>)
   19d6a:	6812      	ldr	r2, [r2, #0]
   19d6c:	2a00      	cmp	r2, #0
   19d6e:	d0f2      	beq.n	19d56 <os_dev_create+0x16>
        rc = os_dev_initialize(dev);
   19d70:	4628      	mov	r0, r5
   19d72:	f7ff ffc1 	bl	19cf8 <os_dev_initialize>
   19d76:	4603      	mov	r3, r0
    return (rc);
   19d78:	e7ed      	b.n	19d56 <os_dev_create+0x16>
   19d7a:	bf00      	nop
   19d7c:	2000a638 	.word	0x2000a638

00019d80 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
   19d80:	b538      	push	{r3, r4, r5, lr}
   19d82:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   19d84:	4b08      	ldr	r3, [pc, #32]	; (19da8 <os_dev_initialize_all+0x28>)
   19d86:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
   19d88:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   19d8a:	e000      	b.n	19d8e <os_dev_initialize_all+0xe>
   19d8c:	6a24      	ldr	r4, [r4, #32]
   19d8e:	b144      	cbz	r4, 19da2 <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
   19d90:	7e23      	ldrb	r3, [r4, #24]
   19d92:	42ab      	cmp	r3, r5
   19d94:	d1fa      	bne.n	19d8c <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
   19d96:	4620      	mov	r0, r4
   19d98:	f7ff ffae 	bl	19cf8 <os_dev_initialize>
            if (rc) {
   19d9c:	4602      	mov	r2, r0
   19d9e:	2800      	cmp	r0, #0
   19da0:	d0f4      	beq.n	19d8c <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
   19da2:	4610      	mov	r0, r2
   19da4:	bd38      	pop	{r3, r4, r5, pc}
   19da6:	bf00      	nop
   19da8:	20005820 	.word	0x20005820

00019dac <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
   19dac:	b538      	push	{r3, r4, r5, lr}
   19dae:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   19db0:	4b05      	ldr	r3, [pc, #20]	; (19dc8 <os_dev_lookup+0x1c>)
   19db2:	681c      	ldr	r4, [r3, #0]
   19db4:	b134      	cbz	r4, 19dc4 <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
   19db6:	4629      	mov	r1, r5
   19db8:	69e0      	ldr	r0, [r4, #28]
   19dba:	f001 f958 	bl	1b06e <strcmp>
   19dbe:	b108      	cbz	r0, 19dc4 <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   19dc0:	6a24      	ldr	r4, [r4, #32]
   19dc2:	e7f7      	b.n	19db4 <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
   19dc4:	4620      	mov	r0, r4
   19dc6:	bd38      	pop	{r3, r4, r5, pc}
   19dc8:	20005820 	.word	0x20005820

00019dcc <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
   19dcc:	b570      	push	{r4, r5, r6, lr}
   19dce:	460d      	mov	r5, r1
   19dd0:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
   19dd2:	f7ff ffeb 	bl	19dac <os_dev_lookup>
    if (dev == NULL) {
   19dd6:	4604      	mov	r4, r0
   19dd8:	b1a0      	cbz	r0, 19e04 <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
   19dda:	7ec3      	ldrb	r3, [r0, #27]
   19ddc:	f013 0f01 	tst.w	r3, #1
   19de0:	d012      	beq.n	19e08 <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
   19de2:	6803      	ldr	r3, [r0, #0]
   19de4:	b11b      	cbz	r3, 19dee <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
   19de6:	4632      	mov	r2, r6
   19de8:	4629      	mov	r1, r5
   19dea:	4798      	blx	r3
        if (rc != 0) {
   19dec:	b970      	cbnz	r0, 19e0c <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   19dee:	f000 ffb5 	bl	1ad5c <os_arch_save_sr>
    ++dev->od_open_ref;
   19df2:	7ea3      	ldrb	r3, [r4, #26]
   19df4:	3301      	adds	r3, #1
   19df6:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
   19df8:	7ee3      	ldrb	r3, [r4, #27]
   19dfa:	f043 0302 	orr.w	r3, r3, #2
   19dfe:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
   19e00:	f000 ffb2 	bl	1ad68 <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
   19e04:	4620      	mov	r0, r4
   19e06:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
   19e08:	2400      	movs	r4, #0
   19e0a:	e7fb      	b.n	19e04 <os_dev_open+0x38>
    return (NULL);
   19e0c:	2400      	movs	r4, #0
   19e0e:	e7f9      	b.n	19e04 <os_dev_open+0x38>

00019e10 <os_dev_close>:
os_dev_close(struct os_dev *dev)
{
    int rc;
    os_sr_t sr;

    if (dev == NULL) {
   19e10:	b1b0      	cbz	r0, 19e40 <os_dev_close+0x30>
{
   19e12:	b510      	push	{r4, lr}
   19e14:	4604      	mov	r4, r0
        rc = OS_EINVAL;
        goto err;
    }

    if (dev->od_handlers.od_close) {
   19e16:	68c3      	ldr	r3, [r0, #12]
   19e18:	b113      	cbz	r3, 19e20 <os_dev_close+0x10>
        rc = dev->od_handlers.od_close(dev);
   19e1a:	4798      	blx	r3
        if (rc != 0) {
   19e1c:	4603      	mov	r3, r0
   19e1e:	b968      	cbnz	r0, 19e3c <os_dev_close+0x2c>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   19e20:	f000 ff9c 	bl	1ad5c <os_arch_save_sr>
    if (--dev->od_open_ref == 0) {
   19e24:	7ea3      	ldrb	r3, [r4, #26]
   19e26:	3b01      	subs	r3, #1
   19e28:	b2db      	uxtb	r3, r3
   19e2a:	76a3      	strb	r3, [r4, #26]
   19e2c:	b91b      	cbnz	r3, 19e36 <os_dev_close+0x26>
        dev->od_flags &= ~(OS_DEV_F_STATUS_OPEN | OS_DEV_F_STATUS_SUSPENDED);
   19e2e:	7ee3      	ldrb	r3, [r4, #27]
   19e30:	f023 0306 	bic.w	r3, r3, #6
   19e34:	76e3      	strb	r3, [r4, #27]
    }
    OS_EXIT_CRITICAL(sr);
   19e36:	f000 ff97 	bl	1ad68 <os_arch_restore_sr>

    return (0);
   19e3a:	2300      	movs	r3, #0
err:
    return (rc);
}
   19e3c:	4618      	mov	r0, r3
   19e3e:	bd10      	pop	{r4, pc}
        rc = OS_EINVAL;
   19e40:	2302      	movs	r3, #2
}
   19e42:	4618      	mov	r0, r3
   19e44:	4770      	bx	lr
	...

00019e48 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
   19e48:	4b02      	ldr	r3, [pc, #8]	; (19e54 <os_dev_reset+0xc>)
   19e4a:	2200      	movs	r2, #0
   19e4c:	601a      	str	r2, [r3, #0]
   19e4e:	605b      	str	r3, [r3, #4]
}
   19e50:	4770      	bx	lr
   19e52:	bf00      	nop
   19e54:	20005820 	.word	0x20005820

00019e58 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
   19e58:	2200      	movs	r2, #0
   19e5a:	6002      	str	r2, [r0, #0]
   19e5c:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
   19e5e:	4603      	mov	r3, r0
   19e60:	f843 2f08 	str.w	r2, [r3, #8]!
   19e64:	60c3      	str	r3, [r0, #12]
}
   19e66:	4770      	bx	lr

00019e68 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
   19e68:	68c0      	ldr	r0, [r0, #12]
}
   19e6a:	3000      	adds	r0, #0
   19e6c:	bf18      	it	ne
   19e6e:	2001      	movne	r0, #1
   19e70:	4770      	bx	lr

00019e72 <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
   19e72:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
   19e74:	b1f0      	cbz	r0, 19eb4 <os_eventq_put+0x42>
   19e76:	460c      	mov	r4, r1
   19e78:	4605      	mov	r5, r0
   19e7a:	f7ff fff5 	bl	19e68 <os_eventq_inited>
   19e7e:	b1c8      	cbz	r0, 19eb4 <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   19e80:	f000 ff6c 	bl	1ad5c <os_arch_save_sr>
   19e84:	4606      	mov	r6, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
   19e86:	7823      	ldrb	r3, [r4, #0]
   19e88:	b9d3      	cbnz	r3, 19ec0 <os_eventq_put+0x4e>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
   19e8a:	2301      	movs	r3, #1
   19e8c:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
   19e8e:	2300      	movs	r3, #0
   19e90:	60e3      	str	r3, [r4, #12]
   19e92:	68eb      	ldr	r3, [r5, #12]
   19e94:	601c      	str	r4, [r3, #0]
   19e96:	340c      	adds	r4, #12
   19e98:	60ec      	str	r4, [r5, #12]

    resched = 0;
    if (evq->evq_task) {
   19e9a:	6868      	ldr	r0, [r5, #4]
   19e9c:	b1b8      	cbz	r0, 19ece <os_eventq_put+0x5c>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
   19e9e:	7b03      	ldrb	r3, [r0, #12]
   19ea0:	2b02      	cmp	r3, #2
   19ea2:	d010      	beq.n	19ec6 <os_eventq_put+0x54>
    resched = 0;
   19ea4:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
   19ea6:	2300      	movs	r3, #0
   19ea8:	606b      	str	r3, [r5, #4]
    }

    OS_EXIT_CRITICAL(sr);
   19eaa:	4630      	mov	r0, r6
   19eac:	f000 ff5c 	bl	1ad68 <os_arch_restore_sr>

    if (resched) {
   19eb0:	b97c      	cbnz	r4, 19ed2 <os_eventq_put+0x60>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
   19eb2:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
   19eb4:	2300      	movs	r3, #0
   19eb6:	461a      	mov	r2, r3
   19eb8:	4619      	mov	r1, r3
   19eba:	4618      	mov	r0, r3
   19ebc:	f7ff fcb8 	bl	19830 <__assert_func>
        OS_EXIT_CRITICAL(sr);
   19ec0:	f000 ff52 	bl	1ad68 <os_arch_restore_sr>
   19ec4:	e7f5      	b.n	19eb2 <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
   19ec6:	f000 fcc7 	bl	1a858 <os_sched_wakeup>
            resched = 1;
   19eca:	2401      	movs	r4, #1
   19ecc:	e7eb      	b.n	19ea6 <os_eventq_put+0x34>
    resched = 0;
   19ece:	2400      	movs	r4, #0
   19ed0:	e7eb      	b.n	19eaa <os_eventq_put+0x38>
        os_sched(NULL);
   19ed2:	2000      	movs	r0, #0
   19ed4:	f000 fd40 	bl	1a958 <os_sched>
   19ed8:	e7eb      	b.n	19eb2 <os_eventq_put+0x40>

00019eda <os_eventq_get>:
    return ev;
}

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
   19eda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19edc:	4605      	mov	r5, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
   19ede:	f000 fc67 	bl	1a7b0 <os_sched_get_current_task>
   19ee2:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
   19ee4:	682b      	ldr	r3, [r5, #0]
   19ee6:	4283      	cmp	r3, r0
   19ee8:	d001      	beq.n	19eee <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
   19eea:	b9db      	cbnz	r3, 19f24 <os_eventq_get+0x4a>
            evq->evq_owner = t;
   19eec:	6028      	str	r0, [r5, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
   19eee:	f000 ff35 	bl	1ad5c <os_arch_save_sr>
   19ef2:	4607      	mov	r7, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
   19ef4:	68ae      	ldr	r6, [r5, #8]
    if (ev) {
   19ef6:	b9de      	cbnz	r6, 19f30 <os_eventq_get+0x56>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
   19ef8:	606c      	str	r4, [r5, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
   19efa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19efe:	4620      	mov	r0, r4
   19f00:	f000 fc62 	bl	1a7c8 <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
   19f04:	7b63      	ldrb	r3, [r4, #13]
   19f06:	f043 0308 	orr.w	r3, r3, #8
   19f0a:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
   19f0c:	4638      	mov	r0, r7
   19f0e:	f000 ff2b 	bl	1ad68 <os_arch_restore_sr>

        os_sched(NULL);
   19f12:	2000      	movs	r0, #0
   19f14:	f000 fd20 	bl	1a958 <os_sched>

        OS_ENTER_CRITICAL(sr);
   19f18:	f000 ff20 	bl	1ad5c <os_arch_save_sr>
   19f1c:	4607      	mov	r7, r0
        evq->evq_task = NULL;
   19f1e:	2300      	movs	r3, #0
   19f20:	606b      	str	r3, [r5, #4]
        goto pull_one;
   19f22:	e7e7      	b.n	19ef4 <os_eventq_get+0x1a>
            assert(0);
   19f24:	2300      	movs	r3, #0
   19f26:	461a      	mov	r2, r3
   19f28:	4619      	mov	r1, r3
   19f2a:	4618      	mov	r0, r3
   19f2c:	f7ff fc80 	bl	19830 <__assert_func>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   19f30:	68f3      	ldr	r3, [r6, #12]
   19f32:	60ab      	str	r3, [r5, #8]
   19f34:	b153      	cbz	r3, 19f4c <os_eventq_get+0x72>
        ev->ev_queued = 0;
   19f36:	2300      	movs	r3, #0
   19f38:	7033      	strb	r3, [r6, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
   19f3a:	7b63      	ldrb	r3, [r4, #13]
   19f3c:	f023 0308 	bic.w	r3, r3, #8
   19f40:	7363      	strb	r3, [r4, #13]
    }
    OS_EXIT_CRITICAL(sr);
   19f42:	4638      	mov	r0, r7
   19f44:	f000 ff10 	bl	1ad68 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
   19f48:	4630      	mov	r0, r6
   19f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   19f4c:	f105 0308 	add.w	r3, r5, #8
   19f50:	60eb      	str	r3, [r5, #12]
   19f52:	e7f0      	b.n	19f36 <os_eventq_get+0x5c>

00019f54 <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
   19f54:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
   19f56:	f7ff ffc0 	bl	19eda <os_eventq_get>
    assert(ev->ev_cb != NULL);
   19f5a:	6843      	ldr	r3, [r0, #4]
   19f5c:	b10b      	cbz	r3, 19f62 <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
   19f5e:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
   19f60:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
   19f62:	461a      	mov	r2, r3
   19f64:	4619      	mov	r1, r3
   19f66:	4618      	mov	r0, r3
   19f68:	f7ff fc62 	bl	19830 <__assert_func>

00019f6c <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
   19f6c:	b538      	push	{r3, r4, r5, lr}
   19f6e:	4605      	mov	r5, r0
   19f70:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   19f72:	f000 fef3 	bl	1ad5c <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
   19f76:	7823      	ldrb	r3, [r4, #0]
   19f78:	b183      	cbz	r3, 19f9c <os_eventq_remove+0x30>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   19f7a:	68aa      	ldr	r2, [r5, #8]
   19f7c:	42a2      	cmp	r2, r4
   19f7e:	d107      	bne.n	19f90 <os_eventq_remove+0x24>
   19f80:	68d3      	ldr	r3, [r2, #12]
   19f82:	60ab      	str	r3, [r5, #8]
   19f84:	b953      	cbnz	r3, 19f9c <os_eventq_remove+0x30>
   19f86:	f105 0308 	add.w	r3, r5, #8
   19f8a:	60eb      	str	r3, [r5, #12]
   19f8c:	e006      	b.n	19f9c <os_eventq_remove+0x30>
   19f8e:	461a      	mov	r2, r3
   19f90:	68d3      	ldr	r3, [r2, #12]
   19f92:	42a3      	cmp	r3, r4
   19f94:	d1fb      	bne.n	19f8e <os_eventq_remove+0x22>
   19f96:	68db      	ldr	r3, [r3, #12]
   19f98:	60d3      	str	r3, [r2, #12]
   19f9a:	b123      	cbz	r3, 19fa6 <os_eventq_remove+0x3a>
    }
    ev->ev_queued = 0;
   19f9c:	2300      	movs	r3, #0
   19f9e:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
   19fa0:	f000 fee2 	bl	1ad68 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
   19fa4:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   19fa6:	320c      	adds	r2, #12
   19fa8:	60ea      	str	r2, [r5, #12]
   19faa:	e7f7      	b.n	19f9c <os_eventq_remove+0x30>

00019fac <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
   19fac:	4800      	ldr	r0, [pc, #0]	; (19fb0 <os_eventq_dflt_get+0x4>)
   19fae:	4770      	bx	lr
   19fb0:	20005828 	.word	0x20005828

00019fb4 <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
   19fb4:	4603      	mov	r3, r0
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
   19fb6:	2000      	movs	r0, #0
   19fb8:	6018      	str	r0, [r3, #0]
   19fba:	605b      	str	r3, [r3, #4]

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
   19fbc:	6098      	str	r0, [r3, #8]
   19fbe:	6158      	str	r0, [r3, #20]
    ev->ev_cb = ev_cb;
   19fc0:	60d9      	str	r1, [r3, #12]
    ev->ev_arg = arg;
   19fc2:	611a      	str	r2, [r3, #16]

    return (0);
}
   19fc4:	4770      	bx	lr

00019fc6 <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
   19fc6:	b538      	push	{r3, r4, r5, lr}
   19fc8:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   19fca:	f000 fec7 	bl	1ad5c <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
   19fce:	682c      	ldr	r4, [r5, #0]
    if (mp) {
   19fd0:	b114      	cbz	r4, 19fd8 <os_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   19fd2:	6863      	ldr	r3, [r4, #4]
   19fd4:	602b      	str	r3, [r5, #0]
   19fd6:	b12b      	cbz	r3, 19fe4 <os_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
   19fd8:	f000 fec6 	bl	1ad68 <os_arch_restore_sr>

    if (mp) {
   19fdc:	b124      	cbz	r4, 19fe8 <os_mqueue_get+0x22>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
   19fde:	f1a4 0010 	sub.w	r0, r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
   19fe2:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   19fe4:	606d      	str	r5, [r5, #4]
   19fe6:	e7f7      	b.n	19fd8 <os_mqueue_get+0x12>
        m = NULL;
   19fe8:	2000      	movs	r0, #0
    return (m);
   19fea:	e7fa      	b.n	19fe2 <os_mqueue_get+0x1c>

00019fec <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
   19fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
   19fee:	7953      	ldrb	r3, [r2, #5]
   19ff0:	2b07      	cmp	r3, #7
   19ff2:	d916      	bls.n	1a022 <os_mqueue_put+0x36>
   19ff4:	4614      	mov	r4, r2
   19ff6:	460e      	mov	r6, r1
   19ff8:	4605      	mov	r5, r0
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);
   19ffa:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
   19ffe:	f000 fead 	bl	1ad5c <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
   1a002:	2300      	movs	r3, #0
   1a004:	f844 3f14 	str.w	r3, [r4, #20]!
   1a008:	686b      	ldr	r3, [r5, #4]
   1a00a:	601f      	str	r7, [r3, #0]
   1a00c:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
   1a00e:	f000 feab 	bl	1ad68 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
   1a012:	b146      	cbz	r6, 1a026 <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
   1a014:	f105 0108 	add.w	r1, r5, #8
   1a018:	4630      	mov	r0, r6
   1a01a:	f7ff ff2a 	bl	19e72 <os_eventq_put>
    }

    return (0);
   1a01e:	2000      	movs	r0, #0
   1a020:	e000      	b.n	1a024 <os_mqueue_put+0x38>
err:
    return (rc);
   1a022:	2002      	movs	r0, #2
}
   1a024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
   1a026:	2000      	movs	r0, #0
   1a028:	e7fc      	b.n	1a024 <os_mqueue_put+0x38>

0001a02a <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
   1a02a:	3a10      	subs	r2, #16
   1a02c:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   1a02e:	6041      	str	r1, [r0, #4]

    return (0);
}
   1a030:	2000      	movs	r0, #0
   1a032:	4770      	bx	lr

0001a034 <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
   1a034:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
   1a036:	8803      	ldrh	r3, [r0, #0]
   1a038:	428b      	cmp	r3, r1
   1a03a:	d312      	bcc.n	1a062 <os_mbuf_get+0x2e>
   1a03c:	460d      	mov	r5, r1
   1a03e:	4604      	mov	r4, r0
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
   1a040:	6840      	ldr	r0, [r0, #4]
   1a042:	f000 f947 	bl	1a2d4 <os_memblock_get>
    if (!om) {
   1a046:	4603      	mov	r3, r0
   1a048:	b148      	cbz	r0, 1a05e <os_mbuf_get+0x2a>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
   1a04a:	2200      	movs	r2, #0
   1a04c:	60c2      	str	r2, [r0, #12]
    om->om_flags = 0;
   1a04e:	7102      	strb	r2, [r0, #4]
    om->om_pkthdr_len = 0;
   1a050:	7142      	strb	r2, [r0, #5]
    om->om_len = 0;
   1a052:	80c2      	strh	r2, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
   1a054:	f100 0110 	add.w	r1, r0, #16
   1a058:	4429      	add	r1, r5
   1a05a:	6001      	str	r1, [r0, #0]
    om->om_omp = omp;
   1a05c:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
   1a05e:	4618      	mov	r0, r3
   1a060:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   1a062:	2300      	movs	r3, #0
    return om;
   1a064:	e7fb      	b.n	1a05e <os_mbuf_get+0x2a>

0001a066 <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
   1a066:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
   1a068:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
   1a06c:	8803      	ldrh	r3, [r0, #0]
   1a06e:	42ab      	cmp	r3, r5
   1a070:	d310      	bcc.n	1a094 <os_mbuf_get_pkthdr+0x2e>
   1a072:	2dff      	cmp	r5, #255	; 0xff
   1a074:	d810      	bhi.n	1a098 <os_mbuf_get_pkthdr+0x32>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
   1a076:	2100      	movs	r1, #0
   1a078:	f7ff ffdc 	bl	1a034 <os_mbuf_get>
    if (om) {
   1a07c:	4603      	mov	r3, r0
   1a07e:	b138      	cbz	r0, 1a090 <os_mbuf_get_pkthdr+0x2a>
        om->om_pkthdr_len = pkthdr_len;
   1a080:	715d      	strb	r5, [r3, #5]
        om->om_data += pkthdr_len;
   1a082:	6802      	ldr	r2, [r0, #0]
   1a084:	4415      	add	r5, r2
   1a086:	6005      	str	r5, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
   1a088:	2200      	movs	r2, #0
   1a08a:	8202      	strh	r2, [r0, #16]
        pkthdr->omp_flags = 0;
   1a08c:	8242      	strh	r2, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
   1a08e:	6142      	str	r2, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
   1a090:	4618      	mov	r0, r3
   1a092:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   1a094:	2300      	movs	r3, #0
   1a096:	e7fb      	b.n	1a090 <os_mbuf_get_pkthdr+0x2a>
   1a098:	2300      	movs	r3, #0
    return om;
   1a09a:	e7f9      	b.n	1a090 <os_mbuf_get_pkthdr+0x2a>

0001a09c <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
   1a09c:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
   1a09e:	6883      	ldr	r3, [r0, #8]
   1a0a0:	b123      	cbz	r3, 1a0ac <os_mbuf_free+0x10>
   1a0a2:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
   1a0a4:	6858      	ldr	r0, [r3, #4]
   1a0a6:	f000 f93d 	bl	1a324 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
   1a0aa:	bd08      	pop	{r3, pc}
    rc = 0;
   1a0ac:	2000      	movs	r0, #0
    return (rc);
   1a0ae:	e7fc      	b.n	1a0aa <os_mbuf_free+0xe>

0001a0b0 <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
   1a0b0:	4603      	mov	r3, r0
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
   1a0b2:	b160      	cbz	r0, 1a0ce <os_mbuf_free_chain+0x1e>
{
   1a0b4:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
   1a0b6:	68dc      	ldr	r4, [r3, #12]

        rc = os_mbuf_free(om);
   1a0b8:	4618      	mov	r0, r3
   1a0ba:	f7ff ffef 	bl	1a09c <os_mbuf_free>
        if (rc != 0) {
            goto done;
        }

        om = next;
   1a0be:	4623      	mov	r3, r4
        if (rc != 0) {
   1a0c0:	4602      	mov	r2, r0
   1a0c2:	b910      	cbnz	r0, 1a0ca <os_mbuf_free_chain+0x1a>
    while (om != NULL) {
   1a0c4:	2c00      	cmp	r4, #0
   1a0c6:	d1f6      	bne.n	1a0b6 <os_mbuf_free_chain+0x6>
    }

    rc = 0;
   1a0c8:	2200      	movs	r2, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
   1a0ca:	4610      	mov	r0, r2
   1a0cc:	bd10      	pop	{r4, pc}
    rc = 0;
   1a0ce:	2200      	movs	r2, #0
}
   1a0d0:	4610      	mov	r0, r2
   1a0d2:	4770      	bx	lr

0001a0d4 <os_mbuf_len>:
uint16_t
os_mbuf_len(const struct os_mbuf *om)
{
    uint16_t len;

    len = 0;
   1a0d4:	2300      	movs	r3, #0
    while (om != NULL) {
   1a0d6:	e003      	b.n	1a0e0 <os_mbuf_len+0xc>
        len += om->om_len;
   1a0d8:	88c2      	ldrh	r2, [r0, #6]
   1a0da:	4413      	add	r3, r2
   1a0dc:	b29b      	uxth	r3, r3
        om = SLIST_NEXT(om, om_next);
   1a0de:	68c0      	ldr	r0, [r0, #12]
    while (om != NULL) {
   1a0e0:	2800      	cmp	r0, #0
   1a0e2:	d1f9      	bne.n	1a0d8 <os_mbuf_len+0x4>
    }

    return len;
}
   1a0e4:	4618      	mov	r0, r3
   1a0e6:	4770      	bx	lr

0001a0e8 <os_mbuf_append>:

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
   1a0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
   1a0ec:	2800      	cmp	r0, #0
   1a0ee:	d04d      	beq.n	1a18c <os_mbuf_append+0xa4>
   1a0f0:	460f      	mov	r7, r1
   1a0f2:	4691      	mov	r9, r2
   1a0f4:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
   1a0f6:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
   1a0fa:	4605      	mov	r5, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
   1a0fc:	e000      	b.n	1a100 <os_mbuf_append+0x18>
        last = SLIST_NEXT(last, om_next);
   1a0fe:	461d      	mov	r5, r3
    while (SLIST_NEXT(last, om_next) != NULL) {
   1a100:	68eb      	ldr	r3, [r5, #12]
   1a102:	2b00      	cmp	r3, #0
   1a104:	d1fb      	bne.n	1a0fe <os_mbuf_append+0x16>
    }

    remainder = len;
   1a106:	464e      	mov	r6, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
   1a108:	68ab      	ldr	r3, [r5, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   1a10a:	f105 0410 	add.w	r4, r5, #16
   1a10e:	881b      	ldrh	r3, [r3, #0]
   1a110:	441c      	add	r4, r3
      (om->om_data + om->om_len);
   1a112:	6828      	ldr	r0, [r5, #0]
   1a114:	88eb      	ldrh	r3, [r5, #6]
   1a116:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   1a118:	1a24      	subs	r4, r4, r0
   1a11a:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
   1a11c:	b164      	cbz	r4, 1a138 <os_mbuf_append+0x50>
        if (space > remainder) {
   1a11e:	454c      	cmp	r4, r9
   1a120:	dd00      	ble.n	1a124 <os_mbuf_append+0x3c>
            space = remainder;
   1a122:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
   1a124:	4622      	mov	r2, r4
   1a126:	4639      	mov	r1, r7
   1a128:	f000 ff78 	bl	1b01c <memcpy>

        last->om_len += space;
   1a12c:	88eb      	ldrh	r3, [r5, #6]
   1a12e:	4423      	add	r3, r4
   1a130:	80eb      	strh	r3, [r5, #6]
        data += space;
   1a132:	4427      	add	r7, r4
        remainder -= space;
   1a134:	eba9 0604 	sub.w	r6, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
   1a138:	2e00      	cmp	r6, #0
   1a13a:	dd16      	ble.n	1a16a <os_mbuf_append+0x82>
        new = os_mbuf_get(omp, 0);
   1a13c:	2100      	movs	r1, #0
   1a13e:	4640      	mov	r0, r8
   1a140:	f7ff ff78 	bl	1a034 <os_mbuf_get>
        if (!new) {
   1a144:	4604      	mov	r4, r0
   1a146:	b180      	cbz	r0, 1a16a <os_mbuf_append+0x82>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
   1a148:	f8b8 2000 	ldrh.w	r2, [r8]
   1a14c:	42b2      	cmp	r2, r6
   1a14e:	bfa8      	it	ge
   1a150:	4632      	movge	r2, r6
   1a152:	b292      	uxth	r2, r2
   1a154:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
   1a156:	4639      	mov	r1, r7
   1a158:	6800      	ldr	r0, [r0, #0]
   1a15a:	f000 ff5f 	bl	1b01c <memcpy>
        data += new->om_len;
   1a15e:	88e3      	ldrh	r3, [r4, #6]
   1a160:	441f      	add	r7, r3
        remainder -= new->om_len;
   1a162:	1af6      	subs	r6, r6, r3
        SLIST_NEXT(last, om_next) = new;
   1a164:	60ec      	str	r4, [r5, #12]
        last = new;
   1a166:	4625      	mov	r5, r4
   1a168:	e7e6      	b.n	1a138 <os_mbuf_append+0x50>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
   1a16a:	f89a 3005 	ldrb.w	r3, [sl, #5]
   1a16e:	2b07      	cmp	r3, #7
   1a170:	d907      	bls.n	1a182 <os_mbuf_append+0x9a>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
   1a172:	eba9 0906 	sub.w	r9, r9, r6
   1a176:	f8ba 3010 	ldrh.w	r3, [sl, #16]
   1a17a:	fa13 f989 	uxtah	r9, r3, r9
   1a17e:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
   1a182:	b106      	cbz	r6, 1a186 <os_mbuf_append+0x9e>
        rc = OS_ENOMEM;
   1a184:	2601      	movs	r6, #1


    return (0);
err:
    return (rc);
}
   1a186:	4630      	mov	r0, r6
   1a188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
   1a18c:	2602      	movs	r6, #2
   1a18e:	e7fa      	b.n	1a186 <os_mbuf_append+0x9e>

0001a190 <os_mbuf_dup>:
    return 0;
}

struct os_mbuf *
os_mbuf_dup(struct os_mbuf *om)
{
   1a190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a194:	4604      	mov	r4, r0
    struct os_mbuf_pool *omp;
    struct os_mbuf *head;
    struct os_mbuf *copy;

    omp = om->om_omp;
   1a196:	f8d0 8008 	ldr.w	r8, [r0, #8]

    head = NULL;
    copy = NULL;
   1a19a:	2700      	movs	r7, #0
    head = NULL;
   1a19c:	463e      	mov	r6, r7

    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   1a19e:	e017      	b.n	1a1d0 <os_mbuf_dup+0x40>
    startoff = 0;
   1a1a0:	2100      	movs	r1, #0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1a1a2:	4623      	mov	r3, r4
   1a1a4:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1a1a8:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1a1aa:	1ad3      	subs	r3, r2, r3
        if (head) {
            SLIST_NEXT(copy, om_next) = os_mbuf_get(omp,
   1a1ac:	b299      	uxth	r1, r3
   1a1ae:	4640      	mov	r0, r8
   1a1b0:	f7ff ff40 	bl	1a034 <os_mbuf_get>
   1a1b4:	4605      	mov	r5, r0
   1a1b6:	60f8      	str	r0, [r7, #12]
                    OS_MBUF_LEADINGSPACE(om));
            if (!SLIST_NEXT(copy, om_next)) {
   1a1b8:	b188      	cbz	r0, 1a1de <os_mbuf_dup+0x4e>
            if (OS_MBUF_IS_PKTHDR(om)) {
                _os_mbuf_copypkthdr(head, om);
            }
            copy = head;
        }
        copy->om_flags = om->om_flags;
   1a1ba:	7923      	ldrb	r3, [r4, #4]
   1a1bc:	712b      	strb	r3, [r5, #4]
        copy->om_len = om->om_len;
   1a1be:	88e3      	ldrh	r3, [r4, #6]
   1a1c0:	80eb      	strh	r3, [r5, #6]
        memcpy(OS_MBUF_DATA(copy, uint8_t *), OS_MBUF_DATA(om, uint8_t *),
   1a1c2:	88e2      	ldrh	r2, [r4, #6]
   1a1c4:	6821      	ldr	r1, [r4, #0]
   1a1c6:	6828      	ldr	r0, [r5, #0]
   1a1c8:	f000 ff28 	bl	1b01c <memcpy>
    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   1a1cc:	68e4      	ldr	r4, [r4, #12]
   1a1ce:	462f      	mov	r7, r5
   1a1d0:	b14c      	cbz	r4, 1a1e6 <os_mbuf_dup+0x56>
        if (head) {
   1a1d2:	b15e      	cbz	r6, 1a1ec <os_mbuf_dup+0x5c>
    if (OS_MBUF_IS_PKTHDR(om)) {
   1a1d4:	7963      	ldrb	r3, [r4, #5]
   1a1d6:	2b07      	cmp	r3, #7
   1a1d8:	d9e2      	bls.n	1a1a0 <os_mbuf_dup+0x10>
        startoff = om->om_pkthdr_len;
   1a1da:	b299      	uxth	r1, r3
   1a1dc:	e7e1      	b.n	1a1a2 <os_mbuf_dup+0x12>
                os_mbuf_free_chain(head);
   1a1de:	4630      	mov	r0, r6
   1a1e0:	f7ff ff66 	bl	1a0b0 <os_mbuf_free_chain>
                om->om_len);
    }

    return (head);
err:
    return (NULL);
   1a1e4:	462e      	mov	r6, r5
}
   1a1e6:	4630      	mov	r0, r6
   1a1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (OS_MBUF_IS_PKTHDR(om)) {
   1a1ec:	7963      	ldrb	r3, [r4, #5]
   1a1ee:	2b07      	cmp	r3, #7
   1a1f0:	d911      	bls.n	1a216 <os_mbuf_dup+0x86>
        startoff = om->om_pkthdr_len;
   1a1f2:	b299      	uxth	r1, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1a1f4:	4623      	mov	r3, r4
   1a1f6:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1a1fa:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1a1fc:	1ad3      	subs	r3, r2, r3
            head = os_mbuf_get(omp, OS_MBUF_LEADINGSPACE(om));
   1a1fe:	b299      	uxth	r1, r3
   1a200:	4640      	mov	r0, r8
   1a202:	f7ff ff17 	bl	1a034 <os_mbuf_get>
            if (!head) {
   1a206:	4606      	mov	r6, r0
   1a208:	2800      	cmp	r0, #0
   1a20a:	d0ec      	beq.n	1a1e6 <os_mbuf_dup+0x56>
            if (OS_MBUF_IS_PKTHDR(om)) {
   1a20c:	7963      	ldrb	r3, [r4, #5]
   1a20e:	2b07      	cmp	r3, #7
   1a210:	d803      	bhi.n	1a21a <os_mbuf_dup+0x8a>
            copy = head;
   1a212:	4605      	mov	r5, r0
   1a214:	e7d1      	b.n	1a1ba <os_mbuf_dup+0x2a>
    startoff = 0;
   1a216:	2100      	movs	r1, #0
   1a218:	e7ec      	b.n	1a1f4 <os_mbuf_dup+0x64>
    assert(new_buf->om_len == 0);
   1a21a:	88c3      	ldrh	r3, [r0, #6]
   1a21c:	b973      	cbnz	r3, 1a23c <os_mbuf_dup+0xac>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
   1a21e:	f100 0510 	add.w	r5, r0, #16
   1a222:	7962      	ldrb	r2, [r4, #5]
   1a224:	f104 0110 	add.w	r1, r4, #16
   1a228:	4628      	mov	r0, r5
   1a22a:	f000 fef7 	bl	1b01c <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
   1a22e:	7963      	ldrb	r3, [r4, #5]
   1a230:	7173      	strb	r3, [r6, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
   1a232:	7963      	ldrb	r3, [r4, #5]
   1a234:	441d      	add	r5, r3
   1a236:	6035      	str	r5, [r6, #0]
            copy = head;
   1a238:	4635      	mov	r5, r6
   1a23a:	e7be      	b.n	1a1ba <os_mbuf_dup+0x2a>
    assert(new_buf->om_len == 0);
   1a23c:	2300      	movs	r3, #0
   1a23e:	461a      	mov	r2, r3
   1a240:	4619      	mov	r1, r3
   1a242:	4618      	mov	r0, r3
   1a244:	f7ff faf4 	bl	19830 <__assert_func>

0001a248 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   1a248:	2800      	cmp	r0, #0
   1a24a:	d031      	beq.n	1a2b0 <os_mempool_init_internal+0x68>
{
   1a24c:	b430      	push	{r4, r5}
   1a24e:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
   1a250:	2a00      	cmp	r2, #0
   1a252:	d02f      	beq.n	1a2b4 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
   1a254:	b1bb      	cbz	r3, 1a286 <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
   1a256:	b113      	cbz	r3, 1a25e <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
   1a258:	f013 0f03 	tst.w	r3, #3
   1a25c:	d12c      	bne.n	1a2b8 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
   1a25e:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
   1a260:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
   1a262:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
   1a264:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1a268:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
   1a26a:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
   1a26c:	60e3      	str	r3, [r4, #12]
    mp->name = name;
   1a26e:	9802      	ldr	r0, [sp, #8]
   1a270:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
   1a272:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
   1a274:	b199      	cbz	r1, 1a29e <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   1a276:	f012 0f03 	tst.w	r2, #3
   1a27a:	d002      	beq.n	1a282 <os_mempool_init_internal+0x3a>
   1a27c:	f022 0203 	bic.w	r2, r2, #3
   1a280:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
   1a282:	2001      	movs	r0, #1
   1a284:	e007      	b.n	1a296 <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
   1a286:	2900      	cmp	r1, #0
   1a288:	d0e5      	beq.n	1a256 <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
   1a28a:	2003      	movs	r0, #3
   1a28c:	e00e      	b.n	1a2ac <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
   1a28e:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
   1a290:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
   1a292:	3001      	adds	r0, #1
            block_addr += true_block_size;
   1a294:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
   1a296:	4281      	cmp	r1, r0
   1a298:	dcf9      	bgt.n	1a28e <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
   1a29a:	2200      	movs	r2, #0
   1a29c:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
   1a29e:	2000      	movs	r0, #0
   1a2a0:	6120      	str	r0, [r4, #16]
   1a2a2:	4b06      	ldr	r3, [pc, #24]	; (1a2bc <os_mempool_init_internal+0x74>)
   1a2a4:	685a      	ldr	r2, [r3, #4]
   1a2a6:	6014      	str	r4, [r2, #0]
   1a2a8:	3410      	adds	r4, #16
   1a2aa:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
   1a2ac:	bc30      	pop	{r4, r5}
   1a2ae:	4770      	bx	lr
        return OS_INVALID_PARM;
   1a2b0:	2003      	movs	r0, #3
}
   1a2b2:	4770      	bx	lr
        return OS_INVALID_PARM;
   1a2b4:	2003      	movs	r0, #3
   1a2b6:	e7f9      	b.n	1a2ac <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
   1a2b8:	2004      	movs	r0, #4
   1a2ba:	e7f7      	b.n	1a2ac <os_mempool_init_internal+0x64>
   1a2bc:	2000a648 	.word	0x2000a648

0001a2c0 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
   1a2c0:	b510      	push	{r4, lr}
   1a2c2:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
   1a2c4:	2400      	movs	r4, #0
   1a2c6:	9401      	str	r4, [sp, #4]
   1a2c8:	9c04      	ldr	r4, [sp, #16]
   1a2ca:	9400      	str	r4, [sp, #0]
   1a2cc:	f7ff ffbc 	bl	1a248 <os_mempool_init_internal>
}
   1a2d0:	b002      	add	sp, #8
   1a2d2:	bd10      	pop	{r4, pc}

0001a2d4 <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
   1a2d4:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
   1a2d6:	b1a0      	cbz	r0, 1a302 <os_memblock_get+0x2e>
   1a2d8:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   1a2da:	f000 fd3f 	bl	1ad5c <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
   1a2de:	88e3      	ldrh	r3, [r4, #6]
   1a2e0:	b153      	cbz	r3, 1a2f8 <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
   1a2e2:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
   1a2e4:	682a      	ldr	r2, [r5, #0]
   1a2e6:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
   1a2e8:	3b01      	subs	r3, #1
   1a2ea:	b29b      	uxth	r3, r3
   1a2ec:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
   1a2ee:	8922      	ldrh	r2, [r4, #8]
   1a2f0:	4293      	cmp	r3, r2
   1a2f2:	d202      	bcs.n	1a2fa <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
   1a2f4:	8123      	strh	r3, [r4, #8]
   1a2f6:	e000      	b.n	1a2fa <os_memblock_get+0x26>
    block = NULL;
   1a2f8:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
   1a2fa:	f000 fd35 	bl	1ad68 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
   1a2fe:	4628      	mov	r0, r5
   1a300:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
   1a302:	2500      	movs	r5, #0
    return (void *)block;
   1a304:	e7fb      	b.n	1a2fe <os_memblock_get+0x2a>

0001a306 <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
   1a306:	b538      	push	{r3, r4, r5, lr}
   1a308:	4604      	mov	r4, r0
   1a30a:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
   1a30c:	f000 fd26 	bl	1ad5c <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
   1a310:	6963      	ldr	r3, [r4, #20]
   1a312:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
   1a314:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
   1a316:	88e3      	ldrh	r3, [r4, #6]
   1a318:	3301      	adds	r3, #1
   1a31a:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
   1a31c:	f000 fd24 	bl	1ad68 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
   1a320:	2000      	movs	r0, #0
   1a322:	bd38      	pop	{r3, r4, r5, pc}

0001a324 <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
   1a324:	b168      	cbz	r0, 1a342 <os_memblock_put+0x1e>
{
   1a326:	b508      	push	{r3, lr}
    if ((mp == NULL) || (block_addr == NULL)) {
   1a328:	b169      	cbz	r1, 1a346 <os_memblock_put+0x22>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
   1a32a:	7a83      	ldrb	r3, [r0, #10]
   1a32c:	f013 0f01 	tst.w	r3, #1
   1a330:	d004      	beq.n	1a33c <os_memblock_put+0x18>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
   1a332:	69c3      	ldr	r3, [r0, #28]
   1a334:	b113      	cbz	r3, 1a33c <os_memblock_put+0x18>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
   1a336:	6a02      	ldr	r2, [r0, #32]
   1a338:	4798      	blx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
   1a33a:	bd08      	pop	{r3, pc}
    ret = os_memblock_put_from_cb(mp, block_addr);
   1a33c:	f7ff ffe3 	bl	1a306 <os_memblock_put_from_cb>
   1a340:	e7fb      	b.n	1a33a <os_memblock_put+0x16>
        ret = OS_INVALID_PARM;
   1a342:	2003      	movs	r0, #3
}
   1a344:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1a346:	2003      	movs	r0, #3
   1a348:	e7f7      	b.n	1a33a <os_memblock_put+0x16>
	...

0001a34c <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
   1a34c:	4b02      	ldr	r3, [pc, #8]	; (1a358 <os_mempool_module_init+0xc>)
   1a34e:	2200      	movs	r2, #0
   1a350:	601a      	str	r2, [r3, #0]
   1a352:	605b      	str	r3, [r3, #4]
}
   1a354:	4770      	bx	lr
   1a356:	bf00      	nop
   1a358:	2000a648 	.word	0x2000a648

0001a35c <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   1a35c:	4b02      	ldr	r3, [pc, #8]	; (1a368 <os_msys_find_biggest_pool+0xc>)
   1a35e:	6818      	ldr	r0, [r3, #0]
   1a360:	b108      	cbz	r0, 1a366 <os_msys_find_biggest_pool+0xa>
   1a362:	6858      	ldr	r0, [r3, #4]
   1a364:	3808      	subs	r0, #8
}
   1a366:	4770      	bx	lr
   1a368:	2000010c 	.word	0x2000010c

0001a36c <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1a36c:	4b09      	ldr	r3, [pc, #36]	; (1a394 <os_msys_find_pool+0x28>)
   1a36e:	6819      	ldr	r1, [r3, #0]
   1a370:	460b      	mov	r3, r1
   1a372:	b123      	cbz	r3, 1a37e <os_msys_find_pool+0x12>
        if (dsize <= pool->omp_databuf_len) {
   1a374:	881a      	ldrh	r2, [r3, #0]
   1a376:	4282      	cmp	r2, r0
   1a378:	d201      	bcs.n	1a37e <os_msys_find_pool+0x12>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1a37a:	689b      	ldr	r3, [r3, #8]
   1a37c:	e7f9      	b.n	1a372 <os_msys_find_pool+0x6>
            break;
        }
    }

    if (!pool) {
   1a37e:	b10b      	cbz	r3, 1a384 <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
   1a380:	4618      	mov	r0, r3
   1a382:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   1a384:	b119      	cbz	r1, 1a38e <os_msys_find_pool+0x22>
   1a386:	4b03      	ldr	r3, [pc, #12]	; (1a394 <os_msys_find_pool+0x28>)
   1a388:	685b      	ldr	r3, [r3, #4]
   1a38a:	3b08      	subs	r3, #8
   1a38c:	e7f8      	b.n	1a380 <os_msys_find_pool+0x14>
   1a38e:	460b      	mov	r3, r1
    return (pool);
   1a390:	e7f6      	b.n	1a380 <os_msys_find_pool+0x14>
   1a392:	bf00      	nop
   1a394:	2000010c 	.word	0x2000010c

0001a398 <os_msys_register>:
{
   1a398:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1a39a:	4b11      	ldr	r3, [pc, #68]	; (1a3e0 <os_msys_register+0x48>)
   1a39c:	681d      	ldr	r5, [r3, #0]
   1a39e:	462b      	mov	r3, r5
    prev = NULL;
   1a3a0:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1a3a2:	b133      	cbz	r3, 1a3b2 <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
   1a3a4:	8801      	ldrh	r1, [r0, #0]
   1a3a6:	881a      	ldrh	r2, [r3, #0]
   1a3a8:	4291      	cmp	r1, r2
   1a3aa:	d302      	bcc.n	1a3b2 <os_msys_register+0x1a>
        prev = pool;
   1a3ac:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1a3ae:	689b      	ldr	r3, [r3, #8]
   1a3b0:	e7f7      	b.n	1a3a2 <os_msys_register+0xa>
    if (prev) {
   1a3b2:	b15c      	cbz	r4, 1a3cc <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   1a3b4:	68a3      	ldr	r3, [r4, #8]
   1a3b6:	6083      	str	r3, [r0, #8]
   1a3b8:	b11b      	cbz	r3, 1a3c2 <os_msys_register+0x2a>
   1a3ba:	60a0      	str	r0, [r4, #8]
}
   1a3bc:	2000      	movs	r0, #0
   1a3be:	bc30      	pop	{r4, r5}
   1a3c0:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   1a3c2:	f100 0308 	add.w	r3, r0, #8
   1a3c6:	4a06      	ldr	r2, [pc, #24]	; (1a3e0 <os_msys_register+0x48>)
   1a3c8:	6053      	str	r3, [r2, #4]
   1a3ca:	e7f6      	b.n	1a3ba <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
   1a3cc:	6085      	str	r5, [r0, #8]
   1a3ce:	b115      	cbz	r5, 1a3d6 <os_msys_register+0x3e>
   1a3d0:	4b03      	ldr	r3, [pc, #12]	; (1a3e0 <os_msys_register+0x48>)
   1a3d2:	6018      	str	r0, [r3, #0]
   1a3d4:	e7f2      	b.n	1a3bc <os_msys_register+0x24>
   1a3d6:	f100 0308 	add.w	r3, r0, #8
   1a3da:	4a01      	ldr	r2, [pc, #4]	; (1a3e0 <os_msys_register+0x48>)
   1a3dc:	6053      	str	r3, [r2, #4]
   1a3de:	e7f7      	b.n	1a3d0 <os_msys_register+0x38>
   1a3e0:	2000010c 	.word	0x2000010c

0001a3e4 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
   1a3e4:	b530      	push	{r4, r5, lr}
   1a3e6:	b083      	sub	sp, #12
   1a3e8:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
   1a3ea:	9d07      	ldr	r5, [sp, #28]
   1a3ec:	9501      	str	r5, [sp, #4]
   1a3ee:	9d06      	ldr	r5, [sp, #24]
   1a3f0:	9500      	str	r5, [sp, #0]
   1a3f2:	f001 f96d 	bl	1b6d0 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
   1a3f6:	b138      	cbz	r0, 1a408 <os_msys_init_once+0x24>
   1a3f8:	2000      	movs	r0, #0
   1a3fa:	9000      	str	r0, [sp, #0]
   1a3fc:	4b09      	ldr	r3, [pc, #36]	; (1a424 <os_msys_init_once+0x40>)
   1a3fe:	681d      	ldr	r5, [r3, #0]
   1a400:	4603      	mov	r3, r0
   1a402:	4602      	mov	r2, r0
   1a404:	4601      	mov	r1, r0
   1a406:	47a8      	blx	r5

    rc = os_msys_register(mbuf_pool);
   1a408:	4620      	mov	r0, r4
   1a40a:	f7ff ffc5 	bl	1a398 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1a40e:	b138      	cbz	r0, 1a420 <os_msys_init_once+0x3c>
   1a410:	2000      	movs	r0, #0
   1a412:	9000      	str	r0, [sp, #0]
   1a414:	4b03      	ldr	r3, [pc, #12]	; (1a424 <os_msys_init_once+0x40>)
   1a416:	681c      	ldr	r4, [r3, #0]
   1a418:	4603      	mov	r3, r0
   1a41a:	4602      	mov	r2, r0
   1a41c:	4601      	mov	r1, r0
   1a41e:	47a0      	blx	r4
}
   1a420:	b003      	add	sp, #12
   1a422:	bd30      	pop	{r4, r5, pc}
   1a424:	20000104 	.word	0x20000104

0001a428 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
   1a428:	4b02      	ldr	r3, [pc, #8]	; (1a434 <os_msys_reset+0xc>)
   1a42a:	2200      	movs	r2, #0
   1a42c:	601a      	str	r2, [r3, #0]
   1a42e:	605b      	str	r3, [r3, #4]
}
   1a430:	4770      	bx	lr
   1a432:	bf00      	nop
   1a434:	2000010c 	.word	0x2000010c

0001a438 <os_msys_get_pkthdr>:
{
   1a438:	b510      	push	{r4, lr}
   1a43a:	460c      	mov	r4, r1
    if (dsize == 0) {
   1a43c:	b930      	cbnz	r0, 1a44c <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
   1a43e:	f7ff ff8d 	bl	1a35c <os_msys_find_biggest_pool>
    if (!pool) {
   1a442:	b158      	cbz	r0, 1a45c <os_msys_get_pkthdr+0x24>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
   1a444:	b2e1      	uxtb	r1, r4
   1a446:	f7ff fe0e 	bl	1a066 <os_mbuf_get_pkthdr>
}
   1a44a:	bd10      	pop	{r4, pc}
   1a44c:	f101 0308 	add.w	r3, r1, #8
   1a450:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
   1a452:	4403      	add	r3, r0
   1a454:	b298      	uxth	r0, r3
   1a456:	f7ff ff89 	bl	1a36c <os_msys_find_pool>
   1a45a:	e7f2      	b.n	1a442 <os_msys_get_pkthdr+0xa>
    return (NULL);
   1a45c:	2000      	movs	r0, #0
   1a45e:	e7f4      	b.n	1a44a <os_msys_get_pkthdr+0x12>

0001a460 <os_msys_init>:

void
os_msys_init(void)
{
   1a460:	b500      	push	{lr}
   1a462:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
   1a464:	f7ff ffe0 	bl	1a428 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
   1a468:	4b06      	ldr	r3, [pc, #24]	; (1a484 <os_msys_init+0x24>)
   1a46a:	9301      	str	r3, [sp, #4]
   1a46c:	f44f 7392 	mov.w	r3, #292	; 0x124
   1a470:	9300      	str	r3, [sp, #0]
   1a472:	2340      	movs	r3, #64	; 0x40
   1a474:	4a04      	ldr	r2, [pc, #16]	; (1a488 <os_msys_init+0x28>)
   1a476:	4905      	ldr	r1, [pc, #20]	; (1a48c <os_msys_init+0x2c>)
   1a478:	4805      	ldr	r0, [pc, #20]	; (1a490 <os_msys_init+0x30>)
   1a47a:	f7ff ffb3 	bl	1a3e4 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
   1a47e:	b003      	add	sp, #12
   1a480:	f85d fb04 	ldr.w	pc, [sp], #4
   1a484:	00020fe4 	.word	0x00020fe4
   1a488:	2000a138 	.word	0x2000a138
   1a48c:	2000a144 	.word	0x2000a144
   1a490:	20005838 	.word	0x20005838

0001a494 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
   1a494:	4603      	mov	r3, r0
   1a496:	b128      	cbz	r0, 1a4a4 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
   1a498:	2000      	movs	r0, #0
   1a49a:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
   1a49c:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
   1a49e:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
   1a4a0:	6018      	str	r0, [r3, #0]
   1a4a2:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1a4a4:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
   1a4a6:	4770      	bx	lr

0001a4a8 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
   1a4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
   1a4aa:	4b2c      	ldr	r3, [pc, #176]	; (1a55c <os_mutex_release+0xb4>)
   1a4ac:	681b      	ldr	r3, [r3, #0]
   1a4ae:	2b00      	cmp	r3, #0
   1a4b0:	d04d      	beq.n	1a54e <os_mutex_release+0xa6>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   1a4b2:	2800      	cmp	r0, #0
   1a4b4:	d04d      	beq.n	1a552 <os_mutex_release+0xaa>
   1a4b6:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
   1a4b8:	f000 f97a 	bl	1a7b0 <os_sched_get_current_task>
   1a4bc:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
   1a4be:	88e3      	ldrh	r3, [r4, #6]
   1a4c0:	2b00      	cmp	r3, #0
   1a4c2:	d048      	beq.n	1a556 <os_mutex_release+0xae>
   1a4c4:	68a2      	ldr	r2, [r4, #8]
   1a4c6:	4282      	cmp	r2, r0
   1a4c8:	d001      	beq.n	1a4ce <os_mutex_release+0x26>
        ret = OS_BAD_MUTEX;
   1a4ca:	2005      	movs	r0, #5
   1a4cc:	e040      	b.n	1a550 <os_mutex_release+0xa8>
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
   1a4ce:	2b01      	cmp	r3, #1
   1a4d0:	d003      	beq.n	1a4da <os_mutex_release+0x32>
        --mu->mu_level;
   1a4d2:	3b01      	subs	r3, #1
   1a4d4:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   1a4d6:	2000      	movs	r0, #0
        goto done;
   1a4d8:	e03a      	b.n	1a550 <os_mutex_release+0xa8>
    }

    OS_ENTER_CRITICAL(sr);
   1a4da:	f000 fc3f 	bl	1ad5c <os_arch_save_sr>
   1a4de:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
   1a4e0:	88e3      	ldrh	r3, [r4, #6]
   1a4e2:	3b01      	subs	r3, #1
   1a4e4:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
   1a4e6:	7aea      	ldrb	r2, [r5, #11]
   1a4e8:	7963      	ldrb	r3, [r4, #5]
   1a4ea:	429a      	cmp	r2, r3
   1a4ec:	d11e      	bne.n	1a52c <os_mutex_release+0x84>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
   1a4ee:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
   1a4f0:	b146      	cbz	r6, 1a504 <os_mutex_release+0x5c>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
   1a4f2:	69f3      	ldr	r3, [r6, #28]
   1a4f4:	b1fb      	cbz	r3, 1a536 <os_mutex_release+0x8e>
        os_sched_wakeup(rdy);
   1a4f6:	4630      	mov	r0, r6
   1a4f8:	f000 f9ae 	bl	1a858 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
   1a4fc:	2301      	movs	r3, #1
   1a4fe:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
   1a500:	7af3      	ldrb	r3, [r6, #11]
   1a502:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
   1a504:	60a6      	str	r6, [r4, #8]
    if (rdy) {
   1a506:	b116      	cbz	r6, 1a50e <os_mutex_release+0x66>
        rdy->t_lockcnt++;
   1a508:	7bb3      	ldrb	r3, [r6, #14]
   1a50a:	3301      	adds	r3, #1
   1a50c:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
   1a50e:	7bab      	ldrb	r3, [r5, #14]
   1a510:	3b01      	subs	r3, #1
   1a512:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
   1a514:	f000 fa1a 	bl	1a94c <os_sched_next_task>
   1a518:	4604      	mov	r4, r0
    if (rdy != current) {
   1a51a:	4285      	cmp	r5, r0
   1a51c:	d010      	beq.n	1a540 <os_mutex_release+0x98>
        resched = 1;
   1a51e:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
   1a520:	4638      	mov	r0, r7
   1a522:	f000 fc21 	bl	1ad68 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   1a526:	b96d      	cbnz	r5, 1a544 <os_mutex_release+0x9c>
        os_sched(rdy);
    }

    ret = OS_OK;
   1a528:	2000      	movs	r0, #0
   1a52a:	e011      	b.n	1a550 <os_mutex_release+0xa8>
        current->t_prio = mu->mu_prio;
   1a52c:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
   1a52e:	4628      	mov	r0, r5
   1a530:	f000 fa24 	bl	1a97c <os_sched_resort>
   1a534:	e7db      	b.n	1a4ee <os_mutex_release+0x46>
        assert(rdy->t_obj);
   1a536:	461a      	mov	r2, r3
   1a538:	4619      	mov	r1, r3
   1a53a:	4618      	mov	r0, r3
   1a53c:	f7ff f978 	bl	19830 <__assert_func>
    resched = 0;
   1a540:	2500      	movs	r5, #0
   1a542:	e7ed      	b.n	1a520 <os_mutex_release+0x78>
        os_sched(rdy);
   1a544:	4620      	mov	r0, r4
   1a546:	f000 fa07 	bl	1a958 <os_sched>
    ret = OS_OK;
   1a54a:	2000      	movs	r0, #0
   1a54c:	e000      	b.n	1a550 <os_mutex_release+0xa8>
        ret = OS_NOT_STARTED;
   1a54e:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
   1a550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
   1a552:	2003      	movs	r0, #3
   1a554:	e7fc      	b.n	1a550 <os_mutex_release+0xa8>
        ret = OS_BAD_MUTEX;
   1a556:	2005      	movs	r0, #5
   1a558:	e7fa      	b.n	1a550 <os_mutex_release+0xa8>
   1a55a:	bf00      	nop
   1a55c:	2000a638 	.word	0x2000a638

0001a560 <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
   1a560:	4b36      	ldr	r3, [pc, #216]	; (1a63c <os_mutex_pend+0xdc>)
   1a562:	681b      	ldr	r3, [r3, #0]
   1a564:	2b00      	cmp	r3, #0
   1a566:	d065      	beq.n	1a634 <os_mutex_pend+0xd4>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   1a568:	2800      	cmp	r0, #0
   1a56a:	d065      	beq.n	1a638 <os_mutex_pend+0xd8>
{
   1a56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a570:	460f      	mov	r7, r1
   1a572:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
   1a574:	f000 fbf2 	bl	1ad5c <os_arch_save_sr>
   1a578:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
   1a57a:	f000 f919 	bl	1a7b0 <os_sched_get_current_task>
   1a57e:	4605      	mov	r5, r0
    if (mu->mu_level == 0) {
   1a580:	88e3      	ldrh	r3, [r4, #6]
   1a582:	b19b      	cbz	r3, 1a5ac <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
   1a584:	68a2      	ldr	r2, [r4, #8]
   1a586:	4282      	cmp	r2, r0
   1a588:	d01e      	beq.n	1a5c8 <os_mutex_pend+0x68>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
   1a58a:	b327      	cbz	r7, 1a5d6 <os_mutex_pend+0x76>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
   1a58c:	7ad1      	ldrb	r1, [r2, #11]
   1a58e:	7ac3      	ldrb	r3, [r0, #11]
   1a590:	4299      	cmp	r1, r3
   1a592:	d825      	bhi.n	1a5e0 <os_mutex_pend+0x80>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
   1a594:	6821      	ldr	r1, [r4, #0]
   1a596:	b369      	cbz	r1, 1a5f4 <os_mutex_pend+0x94>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1a598:	460b      	mov	r3, r1
    last = NULL;
   1a59a:	2600      	movs	r6, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1a59c:	b32b      	cbz	r3, 1a5ea <os_mutex_pend+0x8a>
            if (current->t_prio < entry->t_prio) {
   1a59e:	7ae8      	ldrb	r0, [r5, #11]
   1a5a0:	7ada      	ldrb	r2, [r3, #11]
   1a5a2:	4290      	cmp	r0, r2
   1a5a4:	d321      	bcc.n	1a5ea <os_mutex_pend+0x8a>
                break;
            }
            last = entry;
   1a5a6:	461e      	mov	r6, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1a5a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1a5aa:	e7f7      	b.n	1a59c <os_mutex_pend+0x3c>
        mu->mu_owner = current;
   1a5ac:	60a0      	str	r0, [r4, #8]
        mu->mu_prio  = current->t_prio;
   1a5ae:	7ac3      	ldrb	r3, [r0, #11]
   1a5b0:	7163      	strb	r3, [r4, #5]
        current->t_lockcnt++;
   1a5b2:	7b83      	ldrb	r3, [r0, #14]
   1a5b4:	3301      	adds	r3, #1
   1a5b6:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
   1a5b8:	2301      	movs	r3, #1
   1a5ba:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   1a5bc:	4640      	mov	r0, r8
   1a5be:	f000 fbd3 	bl	1ad68 <os_arch_restore_sr>
        ret = OS_OK;
   1a5c2:	2000      	movs	r0, #0
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
   1a5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ++mu->mu_level;
   1a5c8:	3301      	adds	r3, #1
   1a5ca:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   1a5cc:	4640      	mov	r0, r8
   1a5ce:	f000 fbcb 	bl	1ad68 <os_arch_restore_sr>
        ret = OS_OK;
   1a5d2:	2000      	movs	r0, #0
        goto done;
   1a5d4:	e7f6      	b.n	1a5c4 <os_mutex_pend+0x64>
        OS_EXIT_CRITICAL(sr);
   1a5d6:	4640      	mov	r0, r8
   1a5d8:	f000 fbc6 	bl	1ad68 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
   1a5dc:	2006      	movs	r0, #6
        goto done;
   1a5de:	e7f1      	b.n	1a5c4 <os_mutex_pend+0x64>
        mu->mu_owner->t_prio = current->t_prio;
   1a5e0:	72d3      	strb	r3, [r2, #11]
        os_sched_resort(mu->mu_owner);
   1a5e2:	68a0      	ldr	r0, [r4, #8]
   1a5e4:	f000 f9ca 	bl	1a97c <os_sched_resort>
   1a5e8:	e7d4      	b.n	1a594 <os_mutex_pend+0x34>
    if (last) {
   1a5ea:	b11e      	cbz	r6, 1a5f4 <os_mutex_pend+0x94>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
   1a5ec:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
   1a5ee:	64eb      	str	r3, [r5, #76]	; 0x4c
   1a5f0:	64f5      	str	r5, [r6, #76]	; 0x4c
   1a5f2:	e001      	b.n	1a5f8 <os_mutex_pend+0x98>
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
   1a5f4:	64e9      	str	r1, [r5, #76]	; 0x4c
   1a5f6:	6025      	str	r5, [r4, #0]
    current->t_obj = mu;
   1a5f8:	61ec      	str	r4, [r5, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
   1a5fa:	7b6b      	ldrb	r3, [r5, #13]
   1a5fc:	f043 0304 	orr.w	r3, r3, #4
   1a600:	736b      	strb	r3, [r5, #13]
    os_sched_sleep(current, timeout);
   1a602:	4639      	mov	r1, r7
   1a604:	4628      	mov	r0, r5
   1a606:	f000 f8df 	bl	1a7c8 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
   1a60a:	4640      	mov	r0, r8
   1a60c:	f000 fbac 	bl	1ad68 <os_arch_restore_sr>
    os_sched(NULL);
   1a610:	2000      	movs	r0, #0
   1a612:	f000 f9a1 	bl	1a958 <os_sched>
    OS_ENTER_CRITICAL(sr);
   1a616:	f000 fba1 	bl	1ad5c <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
   1a61a:	7b6b      	ldrb	r3, [r5, #13]
   1a61c:	f023 0304 	bic.w	r3, r3, #4
   1a620:	736b      	strb	r3, [r5, #13]
    OS_EXIT_CRITICAL(sr);
   1a622:	f000 fba1 	bl	1ad68 <os_arch_restore_sr>
    if (mu->mu_owner == current) {
   1a626:	68a3      	ldr	r3, [r4, #8]
   1a628:	42ab      	cmp	r3, r5
   1a62a:	d001      	beq.n	1a630 <os_mutex_pend+0xd0>
        ret = OS_TIMEOUT;
   1a62c:	2006      	movs	r0, #6
   1a62e:	e7c9      	b.n	1a5c4 <os_mutex_pend+0x64>
        ret = OS_OK;
   1a630:	2000      	movs	r0, #0
   1a632:	e7c7      	b.n	1a5c4 <os_mutex_pend+0x64>
        ret = OS_NOT_STARTED;
   1a634:	2009      	movs	r0, #9
   1a636:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1a638:	2003      	movs	r0, #3
}
   1a63a:	4770      	bx	lr
   1a63c:	2000a638 	.word	0x2000a638

0001a640 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
   1a640:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   1a642:	4b05      	ldr	r3, [pc, #20]	; (1a658 <os_sanity_check_list_lock+0x18>)
   1a644:	6818      	ldr	r0, [r3, #0]
   1a646:	b900      	cbnz	r0, 1a64a <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1a648:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
   1a64a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a64e:	4803      	ldr	r0, [pc, #12]	; (1a65c <os_sanity_check_list_lock+0x1c>)
   1a650:	f7ff ff86 	bl	1a560 <os_mutex_pend>
err:
   1a654:	e7f8      	b.n	1a648 <os_sanity_check_list_lock+0x8>
   1a656:	bf00      	nop
   1a658:	2000a638 	.word	0x2000a638
   1a65c:	2000a650 	.word	0x2000a650

0001a660 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
   1a660:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   1a662:	4b04      	ldr	r3, [pc, #16]	; (1a674 <os_sanity_check_list_unlock+0x14>)
   1a664:	6818      	ldr	r0, [r3, #0]
   1a666:	b900      	cbnz	r0, 1a66a <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1a668:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
   1a66a:	4803      	ldr	r0, [pc, #12]	; (1a678 <os_sanity_check_list_unlock+0x18>)
   1a66c:	f7ff ff1c 	bl	1a4a8 <os_mutex_release>
err:
   1a670:	e7fa      	b.n	1a668 <os_sanity_check_list_unlock+0x8>
   1a672:	bf00      	nop
   1a674:	2000a638 	.word	0x2000a638
   1a678:	2000a650 	.word	0x2000a650

0001a67c <os_sanity_check_init>:
    memset(sc, 0, sizeof(*sc));
   1a67c:	2300      	movs	r3, #0
   1a67e:	6003      	str	r3, [r0, #0]
   1a680:	6043      	str	r3, [r0, #4]
   1a682:	6083      	str	r3, [r0, #8]
   1a684:	60c3      	str	r3, [r0, #12]
   1a686:	6103      	str	r3, [r0, #16]
}
   1a688:	4618      	mov	r0, r3
   1a68a:	4770      	bx	lr

0001a68c <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
   1a68c:	b510      	push	{r4, lr}
   1a68e:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
   1a690:	f7ff ffd6 	bl	1a640 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
   1a694:	4603      	mov	r3, r0
   1a696:	b108      	cbz	r0, 1a69c <os_sanity_check_register+0x10>
    }

    return (0);
err:
    return (rc);
}
   1a698:	4618      	mov	r0, r3
   1a69a:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
   1a69c:	4b03      	ldr	r3, [pc, #12]	; (1a6ac <os_sanity_check_register+0x20>)
   1a69e:	681a      	ldr	r2, [r3, #0]
   1a6a0:	6122      	str	r2, [r4, #16]
   1a6a2:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
   1a6a4:	f7ff ffdc 	bl	1a660 <os_sanity_check_list_unlock>
   1a6a8:	4603      	mov	r3, r0
err:
   1a6aa:	e7f5      	b.n	1a698 <os_sanity_check_register+0xc>
   1a6ac:	2000a160 	.word	0x2000a160

0001a6b0 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
   1a6b0:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
   1a6b2:	f7ff ffc5 	bl	1a640 <os_sanity_check_list_lock>
    if (rc != 0) {
   1a6b6:	b910      	cbnz	r0, 1a6be <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1a6b8:	4b17      	ldr	r3, [pc, #92]	; (1a718 <os_sanity_run+0x68>)
   1a6ba:	681c      	ldr	r4, [r3, #0]
   1a6bc:	e00e      	b.n	1a6dc <os_sanity_run+0x2c>
        assert(0);
   1a6be:	2300      	movs	r3, #0
   1a6c0:	461a      	mov	r2, r3
   1a6c2:	4619      	mov	r1, r3
   1a6c4:	4618      	mov	r0, r3
   1a6c6:	f7ff f8b3 	bl	19830 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
   1a6ca:	f000 facf 	bl	1ac6c <os_time_get>
   1a6ce:	6823      	ldr	r3, [r4, #0]
   1a6d0:	6862      	ldr	r2, [r4, #4]
   1a6d2:	4413      	add	r3, r2
   1a6d4:	1ac3      	subs	r3, r0, r3
   1a6d6:	2b00      	cmp	r3, #0
   1a6d8:	dc0d      	bgt.n	1a6f6 <os_sanity_run+0x46>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1a6da:	6924      	ldr	r4, [r4, #16]
   1a6dc:	b18c      	cbz	r4, 1a702 <os_sanity_run+0x52>
        if (sc->sc_func) {
   1a6de:	68a3      	ldr	r3, [r4, #8]
   1a6e0:	2b00      	cmp	r3, #0
   1a6e2:	d0f2      	beq.n	1a6ca <os_sanity_run+0x1a>
            rc = sc->sc_func(sc, sc->sc_arg);
   1a6e4:	68e1      	ldr	r1, [r4, #12]
   1a6e6:	4620      	mov	r0, r4
   1a6e8:	4798      	blx	r3
            if (rc == OS_OK) {
   1a6ea:	2800      	cmp	r0, #0
   1a6ec:	d1ed      	bne.n	1a6ca <os_sanity_run+0x1a>
                sc->sc_checkin_last = os_time_get();
   1a6ee:	f000 fabd 	bl	1ac6c <os_time_get>
   1a6f2:	6020      	str	r0, [r4, #0]
                continue;
   1a6f4:	e7f1      	b.n	1a6da <os_sanity_run+0x2a>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
   1a6f6:	2300      	movs	r3, #0
   1a6f8:	461a      	mov	r2, r3
   1a6fa:	4619      	mov	r1, r3
   1a6fc:	4618      	mov	r0, r3
   1a6fe:	f7ff f897 	bl	19830 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
   1a702:	f7ff ffad 	bl	1a660 <os_sanity_check_list_unlock>
    if (rc != 0) {
   1a706:	b900      	cbnz	r0, 1a70a <os_sanity_run+0x5a>
        assert(0);
    }
}
   1a708:	bd10      	pop	{r4, pc}
        assert(0);
   1a70a:	2300      	movs	r3, #0
   1a70c:	461a      	mov	r2, r3
   1a70e:	4619      	mov	r1, r3
   1a710:	4618      	mov	r0, r3
   1a712:	f7ff f88d 	bl	19830 <__assert_func>
   1a716:	bf00      	nop
   1a718:	2000a160 	.word	0x2000a160

0001a71c <os_sanity_init>:

int
os_sanity_init(void)
{
   1a71c:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
   1a71e:	4802      	ldr	r0, [pc, #8]	; (1a728 <os_sanity_init+0xc>)
   1a720:	f7ff feb8 	bl	1a494 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
   1a724:	bd08      	pop	{r3, pc}
   1a726:	bf00      	nop
   1a728:	2000a650 	.word	0x2000a650

0001a72c <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
   1a72c:	7b03      	ldrb	r3, [r0, #12]
   1a72e:	2b01      	cmp	r3, #1
   1a730:	d001      	beq.n	1a736 <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
   1a732:	2002      	movs	r0, #2
}
   1a734:	4770      	bx	lr
{
   1a736:	b510      	push	{r4, lr}
   1a738:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1a73a:	f000 fb0f 	bl	1ad5c <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   1a73e:	4b0f      	ldr	r3, [pc, #60]	; (1a77c <os_sched_insert+0x50>)
   1a740:	681b      	ldr	r3, [r3, #0]
   1a742:	b12b      	cbz	r3, 1a750 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
   1a744:	7ae1      	ldrb	r1, [r4, #11]
   1a746:	7ada      	ldrb	r2, [r3, #11]
   1a748:	4291      	cmp	r1, r2
   1a74a:	d301      	bcc.n	1a750 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   1a74c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a74e:	e7f8      	b.n	1a742 <os_sched_insert+0x16>
    if (entry) {
   1a750:	b153      	cbz	r3, 1a768 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
   1a752:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1a754:	64a2      	str	r2, [r4, #72]	; 0x48
   1a756:	6463      	str	r3, [r4, #68]	; 0x44
   1a758:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1a75a:	6014      	str	r4, [r2, #0]
   1a75c:	3444      	adds	r4, #68	; 0x44
   1a75e:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
   1a760:	f000 fb02 	bl	1ad68 <os_arch_restore_sr>
    return (0);
   1a764:	2000      	movs	r0, #0
}
   1a766:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
   1a768:	2300      	movs	r3, #0
   1a76a:	6463      	str	r3, [r4, #68]	; 0x44
   1a76c:	4b03      	ldr	r3, [pc, #12]	; (1a77c <os_sched_insert+0x50>)
   1a76e:	685a      	ldr	r2, [r3, #4]
   1a770:	64a2      	str	r2, [r4, #72]	; 0x48
   1a772:	6014      	str	r4, [r2, #0]
   1a774:	3444      	adds	r4, #68	; 0x44
   1a776:	605c      	str	r4, [r3, #4]
   1a778:	e7f2      	b.n	1a760 <os_sched_insert+0x34>
   1a77a:	bf00      	nop
   1a77c:	20000114 	.word	0x20000114

0001a780 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
   1a780:	b410      	push	{r4}
    top = g_current_task->t_stacktop - g_current_task->t_stacksize;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(top[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
   1a782:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1a784:	3301      	adds	r3, #1
   1a786:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
   1a788:	4b06      	ldr	r3, [pc, #24]	; (1a7a4 <os_sched_ctx_sw_hook+0x24>)
   1a78a:	681c      	ldr	r4, [r3, #0]
   1a78c:	4b06      	ldr	r3, [pc, #24]	; (1a7a8 <os_sched_ctx_sw_hook+0x28>)
   1a78e:	6818      	ldr	r0, [r3, #0]
   1a790:	4906      	ldr	r1, [pc, #24]	; (1a7ac <os_sched_ctx_sw_hook+0x2c>)
   1a792:	680b      	ldr	r3, [r1, #0]
   1a794:	1ac2      	subs	r2, r0, r3
   1a796:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1a798:	4413      	add	r3, r2
   1a79a:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = g_os_time;
   1a79c:	6008      	str	r0, [r1, #0]
}
   1a79e:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a7a2:	4770      	bx	lr
   1a7a4:	2000a660 	.word	0x2000a660
   1a7a8:	2000a670 	.word	0x2000a670
   1a7ac:	2000a65c 	.word	0x2000a65c

0001a7b0 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
   1a7b0:	4b01      	ldr	r3, [pc, #4]	; (1a7b8 <os_sched_get_current_task+0x8>)
   1a7b2:	6818      	ldr	r0, [r3, #0]
   1a7b4:	4770      	bx	lr
   1a7b6:	bf00      	nop
   1a7b8:	2000a660 	.word	0x2000a660

0001a7bc <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
   1a7bc:	4b01      	ldr	r3, [pc, #4]	; (1a7c4 <os_sched_set_current_task+0x8>)
   1a7be:	6018      	str	r0, [r3, #0]
}
   1a7c0:	4770      	bx	lr
   1a7c2:	bf00      	nop
   1a7c4:	2000a660 	.word	0x2000a660

0001a7c8 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
   1a7c8:	b538      	push	{r3, r4, r5, lr}
   1a7ca:	4604      	mov	r4, r0
   1a7cc:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1a7ce:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1a7d0:	b1d3      	cbz	r3, 1a808 <os_sched_sleep+0x40>
   1a7d2:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1a7d4:	649a      	str	r2, [r3, #72]	; 0x48
   1a7d6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1a7d8:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1a7da:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
   1a7dc:	2302      	movs	r3, #2
   1a7de:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
   1a7e0:	f000 fa44 	bl	1ac6c <os_time_get>
   1a7e4:	4428      	add	r0, r5
   1a7e6:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
   1a7e8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1a7ec:	d010      	beq.n	1a810 <os_sched_sleep+0x48>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   1a7ee:	4b18      	ldr	r3, [pc, #96]	; (1a850 <os_sched_sleep+0x88>)
   1a7f0:	681b      	ldr	r3, [r3, #0]
   1a7f2:	b1d3      	cbz	r3, 1a82a <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   1a7f4:	7b5a      	ldrb	r2, [r3, #13]
   1a7f6:	f012 0f01 	tst.w	r2, #1
   1a7fa:	d116      	bne.n	1a82a <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
   1a7fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1a7fe:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   1a800:	2a00      	cmp	r2, #0
   1a802:	dc12      	bgt.n	1a82a <os_sched_sleep+0x62>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   1a804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a806:	e7f4      	b.n	1a7f2 <os_sched_sleep+0x2a>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1a808:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1a80a:	4b12      	ldr	r3, [pc, #72]	; (1a854 <os_sched_sleep+0x8c>)
   1a80c:	605a      	str	r2, [r3, #4]
   1a80e:	e7e2      	b.n	1a7d6 <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
   1a810:	7b63      	ldrb	r3, [r4, #13]
   1a812:	f043 0301 	orr.w	r3, r3, #1
   1a816:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   1a818:	2300      	movs	r3, #0
   1a81a:	6463      	str	r3, [r4, #68]	; 0x44
   1a81c:	4b0c      	ldr	r3, [pc, #48]	; (1a850 <os_sched_sleep+0x88>)
   1a81e:	685a      	ldr	r2, [r3, #4]
   1a820:	64a2      	str	r2, [r4, #72]	; 0x48
   1a822:	6014      	str	r4, [r2, #0]
   1a824:	3444      	adds	r4, #68	; 0x44
   1a826:	605c      	str	r4, [r3, #4]
   1a828:	e007      	b.n	1a83a <os_sched_sleep+0x72>
                break;
            }
        }
        if (entry) {
   1a82a:	b143      	cbz	r3, 1a83e <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
   1a82c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1a82e:	64a2      	str	r2, [r4, #72]	; 0x48
   1a830:	6463      	str	r3, [r4, #68]	; 0x44
   1a832:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1a834:	6014      	str	r4, [r2, #0]
   1a836:	3444      	adds	r4, #68	; 0x44
   1a838:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
   1a83a:	2000      	movs	r0, #0
   1a83c:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   1a83e:	2300      	movs	r3, #0
   1a840:	6463      	str	r3, [r4, #68]	; 0x44
   1a842:	4b03      	ldr	r3, [pc, #12]	; (1a850 <os_sched_sleep+0x88>)
   1a844:	685a      	ldr	r2, [r3, #4]
   1a846:	64a2      	str	r2, [r4, #72]	; 0x48
   1a848:	6014      	str	r4, [r2, #0]
   1a84a:	3444      	adds	r4, #68	; 0x44
   1a84c:	605c      	str	r4, [r3, #4]
   1a84e:	e7f4      	b.n	1a83a <os_sched_sleep+0x72>
   1a850:	2000011c 	.word	0x2000011c
   1a854:	20000114 	.word	0x20000114

0001a858 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
   1a858:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
   1a85a:	7b03      	ldrb	r3, [r0, #12]
   1a85c:	2b02      	cmp	r3, #2
   1a85e:	d108      	bne.n	1a872 <os_sched_wakeup+0x1a>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
   1a860:	69c3      	ldr	r3, [r0, #28]
   1a862:	b1db      	cbz	r3, 1a89c <os_sched_wakeup+0x44>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   1a864:	681a      	ldr	r2, [r3, #0]
   1a866:	b152      	cbz	r2, 1a87e <os_sched_wakeup+0x26>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   1a868:	4282      	cmp	r2, r0
   1a86a:	d10f      	bne.n	1a88c <os_sched_wakeup+0x34>
   1a86c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   1a86e:	601a      	str	r2, [r3, #0]
   1a870:	e011      	b.n	1a896 <os_sched_wakeup+0x3e>
    assert(t->t_state == OS_TASK_SLEEP);
   1a872:	2300      	movs	r3, #0
   1a874:	461a      	mov	r2, r3
   1a876:	4619      	mov	r1, r3
   1a878:	4618      	mov	r0, r3
   1a87a:	f7fe ffd9 	bl	19830 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   1a87e:	2300      	movs	r3, #0
   1a880:	461a      	mov	r2, r3
   1a882:	4619      	mov	r1, r3
   1a884:	4618      	mov	r0, r3
   1a886:	f7fe ffd3 	bl	19830 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   1a88a:	461a      	mov	r2, r3
   1a88c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1a88e:	4283      	cmp	r3, r0
   1a890:	d1fb      	bne.n	1a88a <os_sched_wakeup+0x32>
   1a892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1a894:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
   1a896:	2300      	movs	r3, #0
   1a898:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
   1a89a:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
   1a89c:	2301      	movs	r3, #1
   1a89e:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
   1a8a0:	2300      	movs	r3, #0
   1a8a2:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
   1a8a4:	7b43      	ldrb	r3, [r0, #13]
   1a8a6:	f023 0301 	bic.w	r3, r3, #1
   1a8aa:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1a8ac:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1a8ae:	b143      	cbz	r3, 1a8c2 <os_sched_wakeup+0x6a>
   1a8b0:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1a8b2:	649a      	str	r2, [r3, #72]	; 0x48
   1a8b4:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1a8b6:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1a8b8:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
   1a8ba:	f7ff ff37 	bl	1a72c <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
   1a8be:	2000      	movs	r0, #0
   1a8c0:	bd08      	pop	{r3, pc}
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1a8c2:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1a8c4:	4b01      	ldr	r3, [pc, #4]	; (1a8cc <os_sched_wakeup+0x74>)
   1a8c6:	605a      	str	r2, [r3, #4]
   1a8c8:	e7f4      	b.n	1a8b4 <os_sched_wakeup+0x5c>
   1a8ca:	bf00      	nop
   1a8cc:	2000011c 	.word	0x2000011c

0001a8d0 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
   1a8d0:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
   1a8d2:	f000 f9cb 	bl	1ac6c <os_time_get>
   1a8d6:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   1a8d8:	f000 fa40 	bl	1ad5c <os_arch_save_sr>
   1a8dc:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
   1a8de:	4b0a      	ldr	r3, [pc, #40]	; (1a908 <os_sched_os_timer_exp+0x38>)
   1a8e0:	6818      	ldr	r0, [r3, #0]
    while (t) {
   1a8e2:	b160      	cbz	r0, 1a8fe <os_sched_os_timer_exp+0x2e>
        /* If task waiting forever, do not check next wakeup time */
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
   1a8e4:	7b43      	ldrb	r3, [r0, #13]
   1a8e6:	f013 0f01 	tst.w	r3, #1
   1a8ea:	d108      	bne.n	1a8fe <os_sched_os_timer_exp+0x2e>
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
   1a8ec:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
   1a8ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1a8f0:	1aeb      	subs	r3, r5, r3
   1a8f2:	2b00      	cmp	r3, #0
   1a8f4:	db03      	blt.n	1a8fe <os_sched_os_timer_exp+0x2e>
            os_sched_wakeup(t);
   1a8f6:	f7ff ffaf 	bl	1a858 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
   1a8fa:	4620      	mov	r0, r4
   1a8fc:	e7f1      	b.n	1a8e2 <os_sched_os_timer_exp+0x12>
    }

    OS_EXIT_CRITICAL(sr);
   1a8fe:	4630      	mov	r0, r6
   1a900:	f000 fa32 	bl	1ad68 <os_arch_restore_sr>
}
   1a904:	bd70      	pop	{r4, r5, r6, pc}
   1a906:	bf00      	nop
   1a908:	2000011c 	.word	0x2000011c

0001a90c <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
   1a90c:	b510      	push	{r4, lr}
   1a90e:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
   1a910:	f000 fa2d 	bl	1ad6e <os_arch_in_critical>
   1a914:	b150      	cbz	r0, 1a92c <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
   1a916:	4b0c      	ldr	r3, [pc, #48]	; (1a948 <os_sched_wakeup_ticks+0x3c>)
   1a918:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
   1a91a:	b17b      	cbz	r3, 1a93c <os_sched_wakeup_ticks+0x30>
   1a91c:	7b5a      	ldrb	r2, [r3, #13]
   1a91e:	f012 0f01 	tst.w	r2, #1
   1a922:	d10e      	bne.n	1a942 <os_sched_wakeup_ticks+0x36>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
   1a924:	6b58      	ldr	r0, [r3, #52]	; 0x34
   1a926:	1b00      	subs	r0, r0, r4
   1a928:	d406      	bmi.n	1a938 <os_sched_wakeup_ticks+0x2c>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
   1a92a:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   1a92c:	2300      	movs	r3, #0
   1a92e:	461a      	mov	r2, r3
   1a930:	4619      	mov	r1, r3
   1a932:	4618      	mov	r0, r3
   1a934:	f7fe ff7c 	bl	19830 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
   1a938:	2000      	movs	r0, #0
   1a93a:	e7f6      	b.n	1a92a <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
   1a93c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a940:	e7f3      	b.n	1a92a <os_sched_wakeup_ticks+0x1e>
   1a942:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   1a946:	e7f0      	b.n	1a92a <os_sched_wakeup_ticks+0x1e>
   1a948:	2000011c 	.word	0x2000011c

0001a94c <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
   1a94c:	4b01      	ldr	r3, [pc, #4]	; (1a954 <os_sched_next_task+0x8>)
   1a94e:	6818      	ldr	r0, [r3, #0]
   1a950:	4770      	bx	lr
   1a952:	bf00      	nop
   1a954:	20000114 	.word	0x20000114

0001a958 <os_sched>:
{
   1a958:	b538      	push	{r3, r4, r5, lr}
   1a95a:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1a95c:	f000 f9fe 	bl	1ad5c <os_arch_save_sr>
   1a960:	4605      	mov	r5, r0
    if (!next_t) {
   1a962:	b134      	cbz	r4, 1a972 <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
   1a964:	4620      	mov	r0, r4
   1a966:	f000 f9ef 	bl	1ad48 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
   1a96a:	4628      	mov	r0, r5
   1a96c:	f000 f9fc 	bl	1ad68 <os_arch_restore_sr>
}
   1a970:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
   1a972:	f7ff ffeb 	bl	1a94c <os_sched_next_task>
   1a976:	4604      	mov	r4, r0
   1a978:	e7f4      	b.n	1a964 <os_sched+0xc>
	...

0001a97c <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
   1a97c:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
   1a97e:	7b03      	ldrb	r3, [r0, #12]
   1a980:	2b01      	cmp	r3, #1
   1a982:	d000      	beq.n	1a986 <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
   1a984:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1a986:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1a988:	b13b      	cbz	r3, 1a99a <os_sched_resort+0x1e>
   1a98a:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1a98c:	649a      	str	r2, [r3, #72]	; 0x48
   1a98e:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1a990:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1a992:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
   1a994:	f7ff feca 	bl	1a72c <os_sched_insert>
}
   1a998:	e7f4      	b.n	1a984 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1a99a:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1a99c:	4b01      	ldr	r3, [pc, #4]	; (1a9a4 <os_sched_resort+0x28>)
   1a99e:	605a      	str	r2, [r3, #4]
   1a9a0:	e7f5      	b.n	1a98e <os_sched_resort+0x12>
   1a9a2:	bf00      	nop
   1a9a4:	20000114 	.word	0x20000114

0001a9a8 <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
   1a9a8:	4603      	mov	r3, r0
   1a9aa:	b118      	cbz	r0, 1a9b4 <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
   1a9ac:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
   1a9ae:	2000      	movs	r0, #0
   1a9b0:	6018      	str	r0, [r3, #0]
   1a9b2:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1a9b4:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
   1a9b6:	4770      	bx	lr

0001a9b8 <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
   1a9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
   1a9ba:	4b17      	ldr	r3, [pc, #92]	; (1aa18 <os_sem_release+0x60>)
   1a9bc:	681b      	ldr	r3, [r3, #0]
   1a9be:	b33b      	cbz	r3, 1aa10 <os_sem_release+0x58>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   1a9c0:	b340      	cbz	r0, 1aa14 <os_sem_release+0x5c>
   1a9c2:	4604      	mov	r4, r0
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
   1a9c4:	f7ff fef4 	bl	1a7b0 <os_sched_get_current_task>
   1a9c8:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
   1a9ca:	f000 f9c7 	bl	1ad5c <os_arch_save_sr>
   1a9ce:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
   1a9d0:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
   1a9d2:	b165      	cbz	r5, 1a9ee <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   1a9d4:	7b6b      	ldrb	r3, [r5, #13]
   1a9d6:	f023 0302 	bic.w	r3, r3, #2
   1a9da:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
   1a9dc:	4628      	mov	r0, r5
   1a9de:	f7ff ff3b 	bl	1a858 <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
   1a9e2:	7afa      	ldrb	r2, [r7, #11]
   1a9e4:	7aeb      	ldrb	r3, [r5, #11]
   1a9e6:	429a      	cmp	r2, r3
   1a9e8:	d80b      	bhi.n	1aa02 <os_sem_release+0x4a>
    resched = 0;
   1a9ea:	2400      	movs	r4, #0
   1a9ec:	e003      	b.n	1a9f6 <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
   1a9ee:	88e3      	ldrh	r3, [r4, #6]
   1a9f0:	3301      	adds	r3, #1
   1a9f2:	80e3      	strh	r3, [r4, #6]
    resched = 0;
   1a9f4:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
   1a9f6:	4630      	mov	r0, r6
   1a9f8:	f000 f9b6 	bl	1ad68 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   1a9fc:	b91c      	cbnz	r4, 1aa06 <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
   1a9fe:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
   1aa00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
   1aa02:	2401      	movs	r4, #1
   1aa04:	e7f7      	b.n	1a9f6 <os_sem_release+0x3e>
        os_sched(rdy);
   1aa06:	4628      	mov	r0, r5
   1aa08:	f7ff ffa6 	bl	1a958 <os_sched>
    ret = OS_OK;
   1aa0c:	2000      	movs	r0, #0
   1aa0e:	e7f7      	b.n	1aa00 <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
   1aa10:	2009      	movs	r0, #9
   1aa12:	e7f5      	b.n	1aa00 <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
   1aa14:	2003      	movs	r0, #3
   1aa16:	e7f3      	b.n	1aa00 <os_sem_release+0x48>
   1aa18:	2000a638 	.word	0x2000a638

0001aa1c <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
   1aa1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
   1aa1e:	4b2c      	ldr	r3, [pc, #176]	; (1aad0 <os_sem_pend+0xb4>)
   1aa20:	681b      	ldr	r3, [r3, #0]
   1aa22:	2b00      	cmp	r3, #0
   1aa24:	d04f      	beq.n	1aac6 <os_sem_pend+0xaa>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   1aa26:	2800      	cmp	r0, #0
   1aa28:	d04f      	beq.n	1aaca <os_sem_pend+0xae>
   1aa2a:	460d      	mov	r5, r1
   1aa2c:	4604      	mov	r4, r0
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
   1aa2e:	f7ff febf 	bl	1a7b0 <os_sched_get_current_task>
   1aa32:	4606      	mov	r6, r0

    OS_ENTER_CRITICAL(sr);
   1aa34:	f000 f992 	bl	1ad5c <os_arch_save_sr>
   1aa38:	4607      	mov	r7, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
   1aa3a:	88e3      	ldrh	r3, [r4, #6]
   1aa3c:	b14b      	cbz	r3, 1aa52 <os_sem_pend+0x36>
        sem->sem_tokens--;
   1aa3e:	3b01      	subs	r3, #1
   1aa40:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   1aa42:	2400      	movs	r4, #0
    sched = 0;
   1aa44:	4625      	mov	r5, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
   1aa46:	4638      	mov	r0, r7
   1aa48:	f000 f98e 	bl	1ad68 <os_arch_restore_sr>

    if (sched) {
   1aa4c:	bb45      	cbnz	r5, 1aaa0 <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
   1aa4e:	4620      	mov	r0, r4
   1aa50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
   1aa52:	b315      	cbz	r5, 1aa9a <os_sem_pend+0x7e>
        current->t_obj = sem;
   1aa54:	61f4      	str	r4, [r6, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
   1aa56:	7b73      	ldrb	r3, [r6, #13]
   1aa58:	f043 0302 	orr.w	r3, r3, #2
   1aa5c:	7373      	strb	r3, [r6, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
   1aa5e:	f8d4 c000 	ldr.w	ip, [r4]
   1aa62:	f1bc 0f00 	cmp.w	ip, #0
   1aa66:	d00e      	beq.n	1aa86 <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1aa68:	4663      	mov	r3, ip
        last = NULL;
   1aa6a:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1aa6c:	b133      	cbz	r3, 1aa7c <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
   1aa6e:	7af1      	ldrb	r1, [r6, #11]
   1aa70:	7ada      	ldrb	r2, [r3, #11]
   1aa72:	4291      	cmp	r1, r2
   1aa74:	d302      	bcc.n	1aa7c <os_sem_pend+0x60>
                last = entry;
   1aa76:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1aa78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1aa7a:	e7f7      	b.n	1aa6c <os_sem_pend+0x50>
        if (last) {
   1aa7c:	b118      	cbz	r0, 1aa86 <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
   1aa7e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1aa80:	64f3      	str	r3, [r6, #76]	; 0x4c
   1aa82:	64c6      	str	r6, [r0, #76]	; 0x4c
   1aa84:	e002      	b.n	1aa8c <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
   1aa86:	f8c6 c04c 	str.w	ip, [r6, #76]	; 0x4c
   1aa8a:	6026      	str	r6, [r4, #0]
        os_sched_sleep(current, timeout);
   1aa8c:	4629      	mov	r1, r5
   1aa8e:	4630      	mov	r0, r6
   1aa90:	f7ff fe9a 	bl	1a7c8 <os_sched_sleep>
        ret = OS_OK;
   1aa94:	2400      	movs	r4, #0
        sched = 1;
   1aa96:	2501      	movs	r5, #1
   1aa98:	e7d5      	b.n	1aa46 <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
   1aa9a:	2406      	movs	r4, #6
    sched = 0;
   1aa9c:	2500      	movs	r5, #0
   1aa9e:	e7d2      	b.n	1aa46 <os_sem_pend+0x2a>
        os_sched(NULL);
   1aaa0:	2000      	movs	r0, #0
   1aaa2:	f7ff ff59 	bl	1a958 <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
   1aaa6:	7b73      	ldrb	r3, [r6, #13]
   1aaa8:	f013 0f02 	tst.w	r3, #2
   1aaac:	d101      	bne.n	1aab2 <os_sem_pend+0x96>
            ret = OS_OK;
   1aaae:	2400      	movs	r4, #0
   1aab0:	e7cd      	b.n	1aa4e <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
   1aab2:	f000 f953 	bl	1ad5c <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   1aab6:	7b73      	ldrb	r3, [r6, #13]
   1aab8:	f023 0302 	bic.w	r3, r3, #2
   1aabc:	7373      	strb	r3, [r6, #13]
            OS_EXIT_CRITICAL(sr);
   1aabe:	f000 f953 	bl	1ad68 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
   1aac2:	2406      	movs	r4, #6
   1aac4:	e7c3      	b.n	1aa4e <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
   1aac6:	2409      	movs	r4, #9
   1aac8:	e7c1      	b.n	1aa4e <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
   1aaca:	2403      	movs	r4, #3
   1aacc:	e7bf      	b.n	1aa4e <os_sem_pend+0x32>
   1aace:	bf00      	nop
   1aad0:	2000a638 	.word	0x2000a638

0001aad4 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
   1aad4:	2300      	movs	r3, #0
   1aad6:	e003      	b.n	1aae0 <_clear_stack+0xc>
        stack_bottom[i] = OS_STACK_PATTERN;
   1aad8:	4a03      	ldr	r2, [pc, #12]	; (1aae8 <_clear_stack+0x14>)
   1aada:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
   1aade:	3301      	adds	r3, #1
   1aae0:	428b      	cmp	r3, r1
   1aae2:	dbf9      	blt.n	1aad8 <_clear_stack+0x4>
    }
}
   1aae4:	4770      	bx	lr
   1aae6:	bf00      	nop
   1aae8:	deadbeef 	.word	0xdeadbeef

0001aaec <os_task_init>:

int
os_task_init(struct os_task *t, const char *name, os_task_func_t func,
        void *arg, uint8_t prio, os_time_t sanity_itvl,
        os_stack_t *stack_bottom, uint16_t stack_size)
{
   1aaec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aaf0:	4604      	mov	r4, r0
   1aaf2:	460f      	mov	r7, r1
   1aaf4:	4690      	mov	r8, r2
   1aaf6:	461d      	mov	r5, r3
   1aaf8:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    struct os_sanity_check *sc;
    int rc;
    struct os_task *task;

    memset(t, 0, sizeof(*t));
   1aafc:	2250      	movs	r2, #80	; 0x50
   1aafe:	2100      	movs	r1, #0
   1ab00:	f000 fa99 	bl	1b036 <memset>

    t->t_func = func;
   1ab04:	f8c4 8014 	str.w	r8, [r4, #20]
    t->t_arg = arg;
   1ab08:	61a5      	str	r5, [r4, #24]
    OS_ENTER_CRITICAL(sr);
   1ab0a:	f000 f927 	bl	1ad5c <os_arch_save_sr>
    rc = g_task_id;
   1ab0e:	4b2b      	ldr	r3, [pc, #172]	; (1abbc <os_task_init+0xd0>)
   1ab10:	781d      	ldrb	r5, [r3, #0]
    g_task_id++;
   1ab12:	1c6a      	adds	r2, r5, #1
   1ab14:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   1ab16:	f000 f927 	bl	1ad68 <os_arch_restore_sr>

    t->t_taskid = os_task_next_id();
   1ab1a:	72a5      	strb	r5, [r4, #10]
    t->t_prio = prio;
   1ab1c:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1ab20:	72e3      	strb	r3, [r4, #11]

    t->t_state = OS_TASK_READY;
   1ab22:	2301      	movs	r3, #1
   1ab24:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
   1ab26:	6127      	str	r7, [r4, #16]
    t->t_next_wakeup = 0;
   1ab28:	2300      	movs	r3, #0
   1ab2a:	6363      	str	r3, [r4, #52]	; 0x34

    rc = os_sanity_check_init(&t->t_sanity_check);
   1ab2c:	f104 0720 	add.w	r7, r4, #32
   1ab30:	4638      	mov	r0, r7
   1ab32:	f7ff fda3 	bl	1a67c <os_sanity_check_init>
    if (rc != OS_OK) {
   1ab36:	4605      	mov	r5, r0
   1ab38:	2800      	cmp	r0, #0
   1ab3a:	d132      	bne.n	1aba2 <os_task_init+0xb6>
        goto err;
    }

    if (sanity_itvl != OS_WAIT_FOREVER) {
   1ab3c:	9b07      	ldr	r3, [sp, #28]
   1ab3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1ab42:	d005      	beq.n	1ab50 <os_task_init+0x64>
        sc = (struct os_sanity_check *) &t->t_sanity_check;
        sc->sc_checkin_itvl = sanity_itvl;
   1ab44:	6263      	str	r3, [r4, #36]	; 0x24

        rc = os_sanity_check_register(sc);
   1ab46:	4638      	mov	r0, r7
   1ab48:	f7ff fda0 	bl	1a68c <os_sanity_check_register>
        if (rc != OS_OK) {
   1ab4c:	4605      	mov	r5, r0
   1ab4e:	bb40      	cbnz	r0, 1aba2 <os_task_init+0xb6>
            goto err;
        }
    }

    _clear_stack(stack_bottom, stack_size);
   1ab50:	4631      	mov	r1, r6
   1ab52:	9808      	ldr	r0, [sp, #32]
   1ab54:	f7ff ffbe 	bl	1aad4 <_clear_stack>
    t->t_stacktop = &stack_bottom[stack_size];
   1ab58:	9b08      	ldr	r3, [sp, #32]
   1ab5a:	eb03 0186 	add.w	r1, r3, r6, lsl #2
   1ab5e:	6061      	str	r1, [r4, #4]
    t->t_stacksize = stack_size;
   1ab60:	8126      	strh	r6, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
   1ab62:	4632      	mov	r2, r6
   1ab64:	4620      	mov	r0, r4
   1ab66:	f000 f907 	bl	1ad78 <os_arch_task_stack_init>
   1ab6a:	6020      	str	r0, [r4, #0]
            t->t_stacksize);

    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1ab6c:	4b14      	ldr	r3, [pc, #80]	; (1abc0 <os_task_init+0xd4>)
   1ab6e:	681b      	ldr	r3, [r3, #0]
   1ab70:	b15b      	cbz	r3, 1ab8a <os_task_init+0x9e>
        assert(t->t_prio != task->t_prio);
   1ab72:	7ae1      	ldrb	r1, [r4, #11]
   1ab74:	7ada      	ldrb	r2, [r3, #11]
   1ab76:	4291      	cmp	r1, r2
   1ab78:	d001      	beq.n	1ab7e <os_task_init+0x92>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1ab7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ab7c:	e7f8      	b.n	1ab70 <os_task_init+0x84>
        assert(t->t_prio != task->t_prio);
   1ab7e:	2300      	movs	r3, #0
   1ab80:	461a      	mov	r2, r3
   1ab82:	4619      	mov	r1, r3
   1ab84:	4618      	mov	r0, r3
   1ab86:	f7fe fe53 	bl	19830 <__assert_func>
    }

    /* insert this task into the task list */
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
   1ab8a:	6423      	str	r3, [r4, #64]	; 0x40
   1ab8c:	4b0c      	ldr	r3, [pc, #48]	; (1abc0 <os_task_init+0xd4>)
   1ab8e:	685a      	ldr	r2, [r3, #4]
   1ab90:	6014      	str	r4, [r2, #0]
   1ab92:	f104 0240 	add.w	r2, r4, #64	; 0x40
   1ab96:	605a      	str	r2, [r3, #4]

    /* insert this task into the scheduler list */
    rc = os_sched_insert(t);
   1ab98:	4620      	mov	r0, r4
   1ab9a:	f7ff fdc7 	bl	1a72c <os_sched_insert>
   1ab9e:	4605      	mov	r5, r0
    if (rc != OS_OK) {
   1aba0:	b110      	cbz	r0, 1aba8 <os_task_init+0xbc>
    }

    return (0);
err:
    return (rc);
}
   1aba2:	4628      	mov	r0, r5
   1aba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (os_started()) {
   1aba8:	f7fe fefc 	bl	199a4 <os_started>
   1abac:	b908      	cbnz	r0, 1abb2 <os_task_init+0xc6>
    return (0);
   1abae:	4605      	mov	r5, r0
   1abb0:	e7f7      	b.n	1aba2 <os_task_init+0xb6>
        os_sched(NULL);
   1abb2:	2000      	movs	r0, #0
   1abb4:	f7ff fed0 	bl	1a958 <os_sched>
   1abb8:	e7f3      	b.n	1aba2 <os_task_init+0xb6>
   1abba:	bf00      	nop
   1abbc:	2000a664 	.word	0x2000a664
   1abc0:	2000a668 	.word	0x2000a668

0001abc4 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
   1abc4:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
   1abc8:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
   1abca:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
   1abce:	e9d1 4500 	ldrd	r4, r5, [r1]
   1abd2:	eb14 0b03 	adds.w	fp, r4, r3
   1abd6:	f145 0c00 	adc.w	ip, r5, #0
   1abda:	e9c2 bc00 	strd	fp, ip, [r2]
   1abde:	688b      	ldr	r3, [r1, #8]
   1abe0:	f641 6184 	movw	r1, #7812	; 0x1e84
   1abe4:	fb01 3000 	mla	r0, r1, r0, r3
   1abe8:	6090      	str	r0, [r2, #8]
   1abea:	4b08      	ldr	r3, [pc, #32]	; (1ac0c <os_deltatime+0x48>)
   1abec:	4298      	cmp	r0, r3
   1abee:	dd0a      	ble.n	1ac06 <os_deltatime+0x42>
   1abf0:	f11b 0401 	adds.w	r4, fp, #1
   1abf4:	f14c 0500 	adc.w	r5, ip, #0
   1abf8:	e9c2 4500 	strd	r4, r5, [r2]
   1abfc:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
   1ac00:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
   1ac04:	6090      	str	r0, [r2, #8]
}
   1ac06:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1ac0a:	4770      	bx	lr
   1ac0c:	000f423f 	.word	0x000f423f

0001ac10 <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
   1ac10:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
   1ac12:	1e04      	subs	r4, r0, #0
   1ac14:	db0d      	blt.n	1ac32 <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
   1ac16:	f000 f8a1 	bl	1ad5c <os_arch_save_sr>
   1ac1a:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
   1ac1c:	4a11      	ldr	r2, [pc, #68]	; (1ac64 <os_time_tick+0x54>)
   1ac1e:	6813      	ldr	r3, [r2, #0]
    g_os_time += ticks;
   1ac20:	18e0      	adds	r0, r4, r3
   1ac22:	6010      	str	r0, [r2, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
   1ac24:	ea90 0f03 	teq	r0, r3
   1ac28:	d409      	bmi.n	1ac3e <os_time_tick+0x2e>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
   1ac2a:	4628      	mov	r0, r5
   1ac2c:	f000 f89c 	bl	1ad68 <os_arch_restore_sr>
}
   1ac30:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
   1ac32:	2300      	movs	r3, #0
   1ac34:	461a      	mov	r2, r3
   1ac36:	4619      	mov	r1, r3
   1ac38:	4618      	mov	r0, r3
   1ac3a:	f7fe fdf9 	bl	19830 <__assert_func>
        delta = g_os_time - basetod.ostime;
   1ac3e:	4e0a      	ldr	r6, [pc, #40]	; (1ac68 <os_time_tick+0x58>)
   1ac40:	4631      	mov	r1, r6
   1ac42:	f851 4b08 	ldr.w	r4, [r1], #8
   1ac46:	1b04      	subs	r4, r0, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
   1ac48:	460a      	mov	r2, r1
   1ac4a:	4620      	mov	r0, r4
   1ac4c:	f7ff ffba 	bl	1abc4 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
   1ac50:	f106 0118 	add.w	r1, r6, #24
   1ac54:	460a      	mov	r2, r1
   1ac56:	4620      	mov	r0, r4
   1ac58:	f7ff ffb4 	bl	1abc4 <os_deltatime>
        basetod.ostime = g_os_time;
   1ac5c:	4b01      	ldr	r3, [pc, #4]	; (1ac64 <os_time_tick+0x54>)
   1ac5e:	681b      	ldr	r3, [r3, #0]
   1ac60:	6033      	str	r3, [r6, #0]
   1ac62:	e7e2      	b.n	1ac2a <os_time_tick+0x1a>
   1ac64:	2000a670 	.word	0x2000a670
   1ac68:	2000a168 	.word	0x2000a168

0001ac6c <os_time_get>:
}
   1ac6c:	4b01      	ldr	r3, [pc, #4]	; (1ac74 <os_time_get+0x8>)
   1ac6e:	6818      	ldr	r0, [r3, #0]
   1ac70:	4770      	bx	lr
   1ac72:	bf00      	nop
   1ac74:	2000a670 	.word	0x2000a670

0001ac78 <os_time_advance>:

void
os_time_advance(int ticks)
{
   1ac78:	b510      	push	{r4, lr}
    assert(ticks >= 0);
   1ac7a:	1e04      	subs	r4, r0, #0
   1ac7c:	db09      	blt.n	1ac92 <os_time_advance+0x1a>

    if (ticks > 0) {
   1ac7e:	2c00      	cmp	r4, #0
   1ac80:	dd06      	ble.n	1ac90 <os_time_advance+0x18>
        if (!os_started()) {
   1ac82:	f7fe fe8f 	bl	199a4 <os_started>
   1ac86:	b950      	cbnz	r0, 1ac9e <os_time_advance+0x26>
            g_os_time += ticks;
   1ac88:	4a0a      	ldr	r2, [pc, #40]	; (1acb4 <os_time_advance+0x3c>)
   1ac8a:	6813      	ldr	r3, [r2, #0]
   1ac8c:	441c      	add	r4, r3
   1ac8e:	6014      	str	r4, [r2, #0]
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
   1ac90:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
   1ac92:	2300      	movs	r3, #0
   1ac94:	461a      	mov	r2, r3
   1ac96:	4619      	mov	r1, r3
   1ac98:	4618      	mov	r0, r3
   1ac9a:	f7fe fdc9 	bl	19830 <__assert_func>
            os_time_tick(ticks);
   1ac9e:	4620      	mov	r0, r4
   1aca0:	f7ff ffb6 	bl	1ac10 <os_time_tick>
            os_callout_tick();
   1aca4:	f7fe ffa6 	bl	19bf4 <os_callout_tick>
            os_sched_os_timer_exp();
   1aca8:	f7ff fe12 	bl	1a8d0 <os_sched_os_timer_exp>
            os_sched(NULL);
   1acac:	2000      	movs	r0, #0
   1acae:	f7ff fe53 	bl	1a958 <os_sched>
}
   1acb2:	e7ed      	b.n	1ac90 <os_time_advance+0x18>
   1acb4:	2000a670 	.word	0x2000a670

0001acb8 <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
   1acb8:	b900      	cbnz	r0, 1acbc <os_time_delay+0x4>
   1acba:	4770      	bx	lr
{
   1acbc:	b538      	push	{r3, r4, r5, lr}
   1acbe:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   1acc0:	f000 f84c 	bl	1ad5c <os_arch_save_sr>
   1acc4:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
   1acc6:	f7ff fd73 	bl	1a7b0 <os_sched_get_current_task>
   1acca:	4621      	mov	r1, r4
   1accc:	f7ff fd7c 	bl	1a7c8 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
   1acd0:	4628      	mov	r0, r5
   1acd2:	f000 f849 	bl	1ad68 <os_arch_restore_sr>
        os_sched(NULL);
   1acd6:	2000      	movs	r0, #0
   1acd8:	f7ff fe3e 	bl	1a958 <os_sched>
    }
}
   1acdc:	bd38      	pop	{r3, r4, r5, pc}
	...

0001ace0 <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
   1ace0:	b570      	push	{r4, r5, r6, lr}
   1ace2:	4605      	mov	r5, r0
   1ace4:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
   1ace6:	f000 f839 	bl	1ad5c <os_arch_save_sr>
   1acea:	4606      	mov	r6, r0
    if (tv != NULL) {
   1acec:	b145      	cbz	r5, 1ad00 <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
   1acee:	f7ff ffbd 	bl	1ac6c <os_time_get>
   1acf2:	4908      	ldr	r1, [pc, #32]	; (1ad14 <os_gettimeofday+0x34>)
   1acf4:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
   1acf8:	462a      	mov	r2, r5
   1acfa:	1ac0      	subs	r0, r0, r3
   1acfc:	f7ff ff62 	bl	1abc4 <os_deltatime>
    }

    if (tz != NULL) {
   1ad00:	b114      	cbz	r4, 1ad08 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
   1ad02:	4b04      	ldr	r3, [pc, #16]	; (1ad14 <os_gettimeofday+0x34>)
   1ad04:	6a98      	ldr	r0, [r3, #40]	; 0x28
   1ad06:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
   1ad08:	4630      	mov	r0, r6
   1ad0a:	f000 f82d 	bl	1ad68 <os_arch_restore_sr>

    return (0);
}
   1ad0e:	2000      	movs	r0, #0
   1ad10:	bd70      	pop	{r4, r5, r6, pc}
   1ad12:	bf00      	nop
   1ad14:	2000a168 	.word	0x2000a168

0001ad18 <os_time_ms_to_ticks>:
  return (tv.tv_sec * 1000000 + tv.tv_usec);
}

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
   1ad18:	b538      	push	{r3, r4, r5, lr}
   1ad1a:	4604      	mov	r4, r0
   1ad1c:	460d      	mov	r5, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
   1ad1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ad22:	2300      	movs	r3, #0
   1ad24:	01c0      	lsls	r0, r0, #7
   1ad26:	0e61      	lsrs	r1, r4, #25
   1ad28:	f002 f88a 	bl	1ce40 <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
   1ad2c:	2901      	cmp	r1, #1
   1ad2e:	bf08      	it	eq
   1ad30:	2800      	cmpeq	r0, #0
   1ad32:	d202      	bcs.n	1ad3a <os_time_ms_to_ticks+0x22>
        return OS_EINVAL;
    }

    *out_ticks = ticks;
   1ad34:	6028      	str	r0, [r5, #0]
    return 0;
   1ad36:	2000      	movs	r0, #0
}
   1ad38:	bd38      	pop	{r3, r4, r5, pc}
        return OS_EINVAL;
   1ad3a:	2002      	movs	r0, #2
   1ad3c:	e7fc      	b.n	1ad38 <os_time_ms_to_ticks+0x20>

0001ad3e <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
   1ad3e:	b508      	push	{r3, lr}
    os_time_advance(1);
   1ad40:	2001      	movs	r0, #1
   1ad42:	f7ff ff99 	bl	1ac78 <os_time_advance>
}
   1ad46:	bd08      	pop	{r3, pc}

0001ad48 <os_arch_ctx_sw>:

void
os_arch_ctx_sw(struct os_task *t)
{
   1ad48:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
   1ad4a:	f7ff fd19 	bl	1a780 <os_sched_ctx_sw_hook>

    /* Set PendSV interrupt pending bit to force context switch */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
   1ad4e:	4b02      	ldr	r3, [pc, #8]	; (1ad58 <os_arch_ctx_sw+0x10>)
   1ad50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1ad54:	605a      	str	r2, [r3, #4]
}
   1ad56:	bd08      	pop	{r3, pc}
   1ad58:	e000ed00 	.word	0xe000ed00

0001ad5c <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1ad5c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1ad60:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
   1ad62:	f000 0001 	and.w	r0, r0, #1
   1ad66:	4770      	bx	lr

0001ad68 <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
   1ad68:	b900      	cbnz	r0, 1ad6c <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
   1ad6a:	b662      	cpsie	i
        __enable_irq();
    }
}
   1ad6c:	4770      	bx	lr

0001ad6e <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1ad6e:	f3ef 8010 	mrs	r0, PRIMASK
{
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    return (isr_ctx & 1);
}
   1ad72:	f000 0001 	and.w	r0, r0, #1
   1ad76:	4770      	bx	lr

0001ad78 <os_arch_task_stack_init>:

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
   1ad78:	b570      	push	{r4, r5, r6, lr}
   1ad7a:	4606      	mov	r6, r0
   1ad7c:	460d      	mov	r5, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
   1ad7e:	f1a1 0444 	sub.w	r4, r1, #68	; 0x44

    /* Zero out R1-R3, R12, LR */
    for (i = 9; i < 14; ++i) {
   1ad82:	2309      	movs	r3, #9
   1ad84:	e003      	b.n	1ad8e <os_arch_task_stack_init+0x16>
        s[i] = 0;
   1ad86:	2200      	movs	r2, #0
   1ad88:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (i = 9; i < 14; ++i) {
   1ad8c:	3301      	adds	r3, #1
   1ad8e:	2b0d      	cmp	r3, #13
   1ad90:	ddf9      	ble.n	1ad86 <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
   1ad92:	4620      	mov	r0, r4
   1ad94:	f000 f8b6 	bl	1af04 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
   1ad98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1ad9c:	f845 3c04 	str.w	r3, [r5, #-4]
    sf->pc = (uint32_t)t->t_func;
   1ada0:	6973      	ldr	r3, [r6, #20]
   1ada2:	f845 3c08 	str.w	r3, [r5, #-8]
    sf->r0 = (uint32_t)t->t_arg;
   1ada6:	69b3      	ldr	r3, [r6, #24]
   1ada8:	f845 3c20 	str.w	r3, [r5, #-32]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
   1adac:	f06f 0302 	mvn.w	r3, #2
   1adb0:	f845 3c24 	str.w	r3, [r5, #-36]
#endif

    return (s);
}
   1adb4:	4620      	mov	r0, r4
   1adb6:	bd70      	pop	{r4, r5, r6, pc}

0001adb8 <os_arch_init>:

void
os_arch_init(void)
{
   1adb8:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1adba:	4a04      	ldr	r2, [pc, #16]	; (1adcc <os_arch_init+0x14>)
   1adbc:	6953      	ldr	r3, [r2, #20]
   1adbe:	f043 0310 	orr.w	r3, r3, #16
   1adc2:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
   1adc4:	f7fe fdf4 	bl	199b0 <os_init_idle_task>
}
   1adc8:	bd08      	pop	{r3, pc}
   1adca:	bf00      	nop
   1adcc:	e000ed00 	.word	0xe000ed00

0001add0 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
   1add0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1add2:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1add6:	b90c      	cbnz	r4, 1addc <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1add8:	2400      	movs	r4, #0
   1adda:	e009      	b.n	1adf0 <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
   1addc:	2007      	movs	r0, #7
   1adde:	e02e      	b.n	1ae3e <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
   1ade0:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
   1ade4:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
   1ade8:	26ff      	movs	r6, #255	; 0xff
   1adea:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1adee:	3401      	adds	r4, #1
   1adf0:	2cef      	cmp	r4, #239	; 0xef
   1adf2:	d9f5      	bls.n	1ade0 <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   1adf4:	f06f 040d 	mvn.w	r4, #13
   1adf8:	e007      	b.n	1ae0a <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
   1adfa:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1adfc:	4e12      	ldr	r6, [pc, #72]	; (1ae48 <os_arch_os_init+0x78>)
   1adfe:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1ae00:	3510      	adds	r5, #16
   1ae02:	4f12      	ldr	r7, [pc, #72]	; (1ae4c <os_arch_os_init+0x7c>)
   1ae04:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
   1ae08:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   1ae0a:	2c25      	cmp	r4, #37	; 0x25
   1ae0c:	ddf5      	ble.n	1adfa <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1ae0e:	4c0e      	ldr	r4, [pc, #56]	; (1ae48 <os_arch_os_init+0x78>)
   1ae10:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1ae12:	4e0f      	ldr	r6, [pc, #60]	; (1ae50 <os_arch_os_init+0x80>)
   1ae14:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1ae16:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1ae18:	4e0e      	ldr	r6, [pc, #56]	; (1ae54 <os_arch_os_init+0x84>)
   1ae1a:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1ae1c:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1ae1e:	4e0e      	ldr	r6, [pc, #56]	; (1ae58 <os_arch_os_init+0x88>)
   1ae20:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1ae22:	25e0      	movs	r5, #224	; 0xe0
   1ae24:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
   1ae28:	2520      	movs	r5, #32
   1ae2a:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1ae2c:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
   1ae30:	f014 0f01 	tst.w	r4, #1
   1ae34:	d004      	beq.n	1ae40 <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
   1ae36:	f8df c024 	ldr.w	ip, [pc, #36]	; 1ae5c <os_arch_os_init+0x8c>
   1ae3a:	df00      	svc	0
        err = OS_OK;
   1ae3c:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
   1ae3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
   1ae40:	f7ff ffba 	bl	1adb8 <os_arch_init>
        err = OS_OK;
   1ae44:	2000      	movs	r0, #0
   1ae46:	e7fa      	b.n	1ae3e <os_arch_os_init+0x6e>
   1ae48:	e000ed00 	.word	0xe000ed00
   1ae4c:	0001afa3 	.word	0x0001afa3
   1ae50:	0001af0b 	.word	0x0001af0b
   1ae54:	0001af51 	.word	0x0001af51
   1ae58:	0001af97 	.word	0x0001af97
   1ae5c:	0001adb9 	.word	0x0001adb9

0001ae60 <os_arch_start>:

uint32_t
os_arch_start(void)
{
   1ae60:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
   1ae62:	f7ff fd73 	bl	1a94c <os_sched_next_task>
   1ae66:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
   1ae68:	f7ff fca8 	bl	1a7bc <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
   1ae6c:	6823      	ldr	r3, [r4, #0]
   1ae6e:	3324      	adds	r3, #36	; 0x24
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1ae70:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
   1ae74:	2106      	movs	r1, #6
   1ae76:	2080      	movs	r0, #128	; 0x80
   1ae78:	f000 fde8 	bl	1ba4c <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
   1ae7c:	4b03      	ldr	r3, [pc, #12]	; (1ae8c <os_arch_start+0x2c>)
   1ae7e:	2201      	movs	r2, #1
   1ae80:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
   1ae82:	4620      	mov	r0, r4
   1ae84:	f7ff ff60 	bl	1ad48 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
   1ae88:	69a0      	ldr	r0, [r4, #24]
   1ae8a:	bd10      	pop	{r4, pc}
   1ae8c:	2000a638 	.word	0x2000a638

0001ae90 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
   1ae90:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
   1ae92:	4814      	ldr	r0, [pc, #80]	; (1aee4 <os_arch_os_start+0x54>)
   1ae94:	6800      	ldr	r0, [r0, #0]
   1ae96:	3804      	subs	r0, #4
   1ae98:	f000 f82a 	bl	1aef0 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1ae9c:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1aea0:	b9d4      	cbnz	r4, 1aed8 <os_arch_os_start+0x48>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1aea2:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
   1aea6:	f004 0403 	and.w	r4, r4, #3
   1aeaa:	2c03      	cmp	r4, #3
   1aeac:	d808      	bhi.n	1aec0 <os_arch_os_start+0x30>
   1aeae:	e8df f004 	tbb	[pc, r4]
   1aeb2:	1515      	.short	0x1515
   1aeb4:	0c02      	.short	0x0c02
        case 0x02:
            /*
             * We are running in Privileged Thread mode w/SP = PSP but we
             * are supposed to be un-privileged.
             */
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
   1aeb6:	4c0c      	ldr	r4, [pc, #48]	; (1aee8 <os_arch_os_start+0x58>)
   1aeb8:	6824      	ldr	r4, [r4, #0]
   1aeba:	f014 0f01 	tst.w	r4, #1
   1aebe:	d10f      	bne.n	1aee0 <os_arch_os_start+0x50>
    SVC_Call(os_arch_start);
   1aec0:	f8df c028 	ldr.w	ip, [pc, #40]	; 1aeec <os_arch_os_start+0x5c>
   1aec4:	df00      	svc	0
   1aec6:	2000      	movs	r0, #0
            svc_os_arch_start();
        }
    }

    return err;
}
   1aec8:	bd10      	pop	{r4, pc}
            if  ((os_flags & 1) == OS_RUN_PRIV) {
   1aeca:	4c07      	ldr	r4, [pc, #28]	; (1aee8 <os_arch_os_start+0x58>)
   1aecc:	6824      	ldr	r4, [r4, #0]
   1aece:	f014 0f01 	tst.w	r4, #1
   1aed2:	d1f5      	bne.n	1aec0 <os_arch_os_start+0x30>
                err = OS_ERR_PRIV;
   1aed4:	2008      	movs	r0, #8
   1aed6:	e7f7      	b.n	1aec8 <os_arch_os_start+0x38>
    err = OS_ERR_IN_ISR;
   1aed8:	2007      	movs	r0, #7
   1aeda:	e7f5      	b.n	1aec8 <os_arch_os_start+0x38>
            err = OS_ERR_PRIV;
   1aedc:	2008      	movs	r0, #8
   1aede:	e7f3      	b.n	1aec8 <os_arch_os_start+0x38>
                err = OS_ERR_PRIV;
   1aee0:	2008      	movs	r0, #8
   1aee2:	e7f1      	b.n	1aec8 <os_arch_os_start+0x38>
   1aee4:	2000a598 	.word	0x2000a598
   1aee8:	2000a198 	.word	0x2000a198
   1aeec:	0001ae61 	.word	0x0001ae61

0001aef0 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
   1aef0:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
   1aef4:	4832      	ldr	r0, [pc, #200]	; (1afc0 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
   1aef6:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
   1aef8:	3002      	adds	r0, #2
        MSR     CONTROL,R0
   1aefa:	f380 8814 	msr	CONTROL, r0
        ISB
   1aefe:	f3bf 8f6f 	isb	sy
        BX      LR
   1af02:	4770      	bx	lr

0001af04 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
   1af04:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
   1af08:	4770      	bx	lr

0001af0a <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
   1af0a:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
   1af0e:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
   1af10:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
   1af14:	b951      	cbnz	r1, 1af2c <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   1af16:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1af1a:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
   1af1c:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1af1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
   1af22:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
   1af26:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
   1af2a:	4770      	bx	lr

0001af2c <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1af2c:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
   1af2e:	4a25      	ldr	r2, [pc, #148]	; (1afc4 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
   1af30:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
   1af32:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
   1af34:	d809      	bhi.n	1af4a <SVC_Done>

        LDR     R4,=SVC_Table-4
   1af36:	4c24      	ldr	r4, [pc, #144]	; (1afc8 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
   1af38:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   1af3c:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
   1af40:	47a0      	blx	r4

        MRS     R12,PSP
   1af42:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
   1af46:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

0001af4a <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1af4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
   1af4e:	4770      	bx	lr

0001af50 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   1af50:	4b1e      	ldr	r3, [pc, #120]	; (1afcc <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
   1af52:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
   1af54:	4b1e      	ldr	r3, [pc, #120]	; (1afd0 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
   1af56:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
   1af58:	4291      	cmp	r1, r2
        IT      EQ
   1af5a:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
   1af5c:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
   1af5e:	f3ef 8c09 	mrs	ip, PSP
#if MYNEWT_VAL(HARDFLOAT)
        TST     LR,#0x10                /* is it extended frame? */
   1af62:	f01e 0f10 	tst.w	lr, #16
        IT      EQ
   1af66:	bf08      	it	eq
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
   1af68:	ed2c 8a10 	vstmdbeq	ip!, {s16-s31}
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
   1af6c:	e92c 4ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
   1af70:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
   1af74:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
   1af76:	f8d2 c000 	ldr.w	ip, [r2]
#if MYNEWT_VAL(HARDFLOAT)
        LDMIA   R12!,{R4-R11,LR}        /* Restore New Context */
   1af7a:	e8bc 4ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        TST     LR,#0x10                /* is it extended frame? */
   1af7e:	f01e 0f10 	tst.w	lr, #16
        ITTE    EQ
   1af82:	bf06      	itte	eq
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
   1af84:	ecbc 8a10 	vldmiaeq	ip!, {s16-s31}
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
   1af88:	f06f 0e12 	mvneq.w	lr, #18
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
   1af8c:	f06f 0e02 	mvnne.w	lr, #2
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
#endif
        MSR     PSP,R12                 /* Write PSP */
   1af90:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
   1af94:	4770      	bx	lr

0001af96 <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1af96:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
   1af98:	f7ff fed1 	bl	1ad3e <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1af9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
   1afa0:	4770      	bx	lr

0001afa2 <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
   1afa2:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
   1afa6:	bf0c      	ite	eq
        MRSEQ   R3,MSP
   1afa8:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
   1afac:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
   1afb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
   1afb4:	4668      	mov	r0, sp
        BL      os_default_irq
   1afb6:	f7fe fc61 	bl	1987c <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
   1afba:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
   1afbe:	4770      	bx	lr
        LDR     R0,=os_flags
   1afc0:	2000a198 	.word	0x2000a198
        LDR     R2,=SVC_Count
   1afc4:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
   1afc8:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   1afcc:	20000114 	.word	0x20000114
        LDR     R3,=g_current_task      /* Get current task */
   1afd0:	2000a660 	.word	0x2000a660

0001afd4 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
   1afd4:	b470      	push	{r4, r5, r6}
   1afd6:	f04f 0500 	mov.w	r5, #0
   1afda:	f022 0603 	bic.w	r6, r2, #3
   1afde:	e005      	b.n	1afec <test1>

0001afe0 <loop1>:
   1afe0:	5943      	ldr	r3, [r0, r5]
   1afe2:	594c      	ldr	r4, [r1, r5]
   1afe4:	42a3      	cmp	r3, r4
   1afe6:	d104      	bne.n	1aff2 <res1>
   1afe8:	f105 0504 	add.w	r5, r5, #4

0001afec <test1>:
   1afec:	42b5      	cmp	r5, r6
   1afee:	d1f7      	bne.n	1afe0 <loop1>
   1aff0:	e00d      	b.n	1b00e <test2>

0001aff2 <res1>:
   1aff2:	ba1b      	rev	r3, r3
   1aff4:	ba24      	rev	r4, r4
   1aff6:	1b1b      	subs	r3, r3, r4
   1aff8:	bf8c      	ite	hi
   1affa:	2301      	movhi	r3, #1
   1affc:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
   1b000:	e009      	b.n	1b016 <done>

0001b002 <loop2>:
   1b002:	5d43      	ldrb	r3, [r0, r5]
   1b004:	5d4c      	ldrb	r4, [r1, r5]
   1b006:	1b1b      	subs	r3, r3, r4
   1b008:	d105      	bne.n	1b016 <done>
   1b00a:	f105 0501 	add.w	r5, r5, #1

0001b00e <test2>:
   1b00e:	4295      	cmp	r5, r2
   1b010:	d1f7      	bne.n	1b002 <loop2>
   1b012:	f04f 0300 	mov.w	r3, #0

0001b016 <done>:
   1b016:	4618      	mov	r0, r3
   1b018:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
   1b01a:	4770      	bx	lr

0001b01c <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   1b01c:	e001      	b.n	1b022 <test1>

0001b01e <loop1>:
   1b01e:	588b      	ldr	r3, [r1, r2]
   1b020:	5083      	str	r3, [r0, r2]

0001b022 <test1>:
   1b022:	3a04      	subs	r2, #4
   1b024:	d5fb      	bpl.n	1b01e <loop1>
   1b026:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   1b02a:	e001      	b.n	1b030 <test2>

0001b02c <loop2>:
   1b02c:	5c8b      	ldrb	r3, [r1, r2]
   1b02e:	5483      	strb	r3, [r0, r2]

0001b030 <test2>:
   1b030:	3a01      	subs	r2, #1
   1b032:	d5fb      	bpl.n	1b02c <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   1b034:	4770      	bx	lr

0001b036 <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   1b036:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   1b038:	4605      	mov	r5, r0
   1b03a:	b2c9      	uxtb	r1, r1
   1b03c:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1b040:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1b044:	18ab      	adds	r3, r5, r2
   1b046:	2403      	movs	r4, #3
   1b048:	4023      	ands	r3, r4
   1b04a:	1ad3      	subs	r3, r2, r3
   1b04c:	d40b      	bmi.n	1b066 <memset+0x30>
   1b04e:	e001      	b.n	1b054 <memset+0x1e>
   1b050:	3a01      	subs	r2, #1
   1b052:	54a9      	strb	r1, [r5, r2]
   1b054:	429a      	cmp	r2, r3
   1b056:	d1fb      	bne.n	1b050 <memset+0x1a>
   1b058:	e000      	b.n	1b05c <memset+0x26>
   1b05a:	50a9      	str	r1, [r5, r2]
   1b05c:	3a04      	subs	r2, #4
   1b05e:	d5fc      	bpl.n	1b05a <memset+0x24>
   1b060:	3204      	adds	r2, #4
   1b062:	e000      	b.n	1b066 <memset+0x30>
   1b064:	54a9      	strb	r1, [r5, r2]
   1b066:	3a01      	subs	r2, #1
   1b068:	d5fc      	bpl.n	1b064 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
   1b06a:	bc30      	pop	{r4, r5}
   1b06c:	4770      	bx	lr

0001b06e <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
   1b06e:	b430      	push	{r4, r5}
   1b070:	4602      	mov	r2, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
   1b072:	1c55      	adds	r5, r2, #1
   1b074:	7813      	ldrb	r3, [r2, #0]
   1b076:	1c4c      	adds	r4, r1, #1
   1b078:	7808      	ldrb	r0, [r1, #0]
		if (d || !ch)
   1b07a:	1a18      	subs	r0, r3, r0
   1b07c:	d103      	bne.n	1b086 <strcmp+0x18>
		d = (int)(ch = *c1++) - (int)*c2++;
   1b07e:	462a      	mov	r2, r5
   1b080:	4621      	mov	r1, r4
		if (d || !ch)
   1b082:	2b00      	cmp	r3, #0
   1b084:	d1f5      	bne.n	1b072 <strcmp+0x4>
			break;
	}

	return d;
}
   1b086:	bc30      	pop	{r4, r5}
   1b088:	4770      	bx	lr

0001b08a <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
   1b08a:	4603      	mov	r3, r0
	while (*ss)
   1b08c:	e000      	b.n	1b090 <strlen+0x6>
		ss++;
   1b08e:	3301      	adds	r3, #1
	while (*ss)
   1b090:	781a      	ldrb	r2, [r3, #0]
   1b092:	2a00      	cmp	r2, #0
   1b094:	d1fb      	bne.n	1b08e <strlen+0x4>
	return ss - s;
}
   1b096:	1a18      	subs	r0, r3, r0
   1b098:	4770      	bx	lr

0001b09a <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
   1b09a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b09e:	b082      	sub	sp, #8
   1b0a0:	e9cd 0100 	strd	r0, r1, [sp]
   1b0a4:	4691      	mov	r9, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
   1b0a6:	f8d2 8004 	ldr.w	r8, [r2, #4]
    unsigned long long int d = 1;
   1b0aa:	2401      	movs	r4, #1
   1b0ac:	2500      	movs	r5, #0
    while (num / d >= p->base)
   1b0ae:	e004      	b.n	1b0ba <ui2a+0x20>
        d *= p->base;
   1b0b0:	fb06 f305 	mul.w	r3, r6, r5
   1b0b4:	fba4 4506 	umull	r4, r5, r4, r6
   1b0b8:	441d      	add	r5, r3
    while (num / d >= p->base)
   1b0ba:	4622      	mov	r2, r4
   1b0bc:	462b      	mov	r3, r5
   1b0be:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b0c2:	f001 febd 	bl	1ce40 <__aeabi_uldivmod>
   1b0c6:	f899 6003 	ldrb.w	r6, [r9, #3]
   1b0ca:	2700      	movs	r7, #0
   1b0cc:	42b9      	cmp	r1, r7
   1b0ce:	bf08      	it	eq
   1b0d0:	42b0      	cmpeq	r0, r6
   1b0d2:	d2ed      	bcs.n	1b0b0 <ui2a+0x16>
    int n = 0;
   1b0d4:	f04f 0a00 	mov.w	sl, #0
   1b0d8:	e007      	b.n	1b0ea <ui2a+0x50>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1b0da:	2330      	movs	r3, #48	; 0x30
   1b0dc:	441e      	add	r6, r3
   1b0de:	f888 6000 	strb.w	r6, [r8]
            ++n;
   1b0e2:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1b0e6:	f108 0801 	add.w	r8, r8, #1
    while (d != 0) {
   1b0ea:	ea54 0305 	orrs.w	r3, r4, r5
   1b0ee:	d02e      	beq.n	1b14e <ui2a+0xb4>
        unsigned long long  dgt = num / d;
   1b0f0:	4622      	mov	r2, r4
   1b0f2:	462b      	mov	r3, r5
   1b0f4:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b0f8:	f001 fea2 	bl	1ce40 <__aeabi_uldivmod>
   1b0fc:	4606      	mov	r6, r0
   1b0fe:	460f      	mov	r7, r1
        num %= d;
   1b100:	4622      	mov	r2, r4
   1b102:	462b      	mov	r3, r5
   1b104:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b108:	f001 fe9a 	bl	1ce40 <__aeabi_uldivmod>
   1b10c:	e9cd 2300 	strd	r2, r3, [sp]
        d /= p->base;
   1b110:	f899 2003 	ldrb.w	r2, [r9, #3]
   1b114:	2300      	movs	r3, #0
   1b116:	4620      	mov	r0, r4
   1b118:	4629      	mov	r1, r5
   1b11a:	f001 fe91 	bl	1ce40 <__aeabi_uldivmod>
   1b11e:	4604      	mov	r4, r0
   1b120:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
   1b122:	f1ba 0f00 	cmp.w	sl, #0
   1b126:	d105      	bne.n	1b134 <ui2a+0x9a>
   1b128:	ea56 0307 	orrs.w	r3, r6, r7
   1b12c:	d102      	bne.n	1b134 <ui2a+0x9a>
   1b12e:	ea54 0305 	orrs.w	r3, r4, r5
   1b132:	d1da      	bne.n	1b0ea <ui2a+0x50>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1b134:	2f00      	cmp	r7, #0
   1b136:	bf08      	it	eq
   1b138:	2e0a      	cmpeq	r6, #10
   1b13a:	d3ce      	bcc.n	1b0da <ui2a+0x40>
   1b13c:	f899 3002 	ldrb.w	r3, [r9, #2]
   1b140:	f013 0f04 	tst.w	r3, #4
   1b144:	d001      	beq.n	1b14a <ui2a+0xb0>
   1b146:	2337      	movs	r3, #55	; 0x37
   1b148:	e7c8      	b.n	1b0dc <ui2a+0x42>
   1b14a:	2357      	movs	r3, #87	; 0x57
   1b14c:	e7c6      	b.n	1b0dc <ui2a+0x42>
        }
    }
    *bf = 0;
   1b14e:	2300      	movs	r3, #0
   1b150:	f888 3000 	strb.w	r3, [r8]
}
   1b154:	b002      	add	sp, #8
   1b156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001b15a <i2a>:

static void i2a(long long int num, struct param *p)
{
   1b15a:	b508      	push	{r3, lr}
    if (num < 0) {
   1b15c:	2800      	cmp	r0, #0
   1b15e:	f171 0300 	sbcs.w	r3, r1, #0
   1b162:	db02      	blt.n	1b16a <i2a+0x10>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
   1b164:	f7ff ff99 	bl	1b09a <ui2a>
}
   1b168:	bd08      	pop	{r3, pc}
        num = -num;
   1b16a:	4240      	negs	r0, r0
   1b16c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
   1b170:	7893      	ldrb	r3, [r2, #2]
   1b172:	f043 0301 	orr.w	r3, r3, #1
   1b176:	7093      	strb	r3, [r2, #2]
   1b178:	e7f4      	b.n	1b164 <i2a+0xa>

0001b17a <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
   1b17a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1b17e:	b2db      	uxtb	r3, r3
   1b180:	2b09      	cmp	r3, #9
   1b182:	d90b      	bls.n	1b19c <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
   1b184:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1b188:	b2db      	uxtb	r3, r3
   1b18a:	2b05      	cmp	r3, #5
   1b18c:	d908      	bls.n	1b1a0 <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
   1b18e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1b192:	b2db      	uxtb	r3, r3
   1b194:	2b05      	cmp	r3, #5
   1b196:	d805      	bhi.n	1b1a4 <a2d+0x2a>
        return ch - 'A' + 10;
   1b198:	3837      	subs	r0, #55	; 0x37
   1b19a:	4770      	bx	lr
        return ch - '0';
   1b19c:	3830      	subs	r0, #48	; 0x30
   1b19e:	4770      	bx	lr
        return ch - 'a' + 10;
   1b1a0:	3857      	subs	r0, #87	; 0x57
   1b1a2:	4770      	bx	lr
    else
        return -1;
   1b1a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1b1a8:	4770      	bx	lr

0001b1aa <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
   1b1aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b1ae:	4605      	mov	r5, r0
   1b1b0:	4688      	mov	r8, r1
   1b1b2:	4617      	mov	r7, r2
   1b1b4:	4699      	mov	r9, r3
    const char *p = *src;
   1b1b6:	680c      	ldr	r4, [r1, #0]
    int num = 0;
   1b1b8:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
   1b1ba:	4628      	mov	r0, r5
   1b1bc:	f7ff ffdd 	bl	1b17a <a2d>
   1b1c0:	2800      	cmp	r0, #0
   1b1c2:	db06      	blt.n	1b1d2 <a2i+0x28>
        if (digit > base)
   1b1c4:	42b8      	cmp	r0, r7
   1b1c6:	dc04      	bgt.n	1b1d2 <a2i+0x28>
            break;
        num = num * base + digit;
   1b1c8:	fb07 0606 	mla	r6, r7, r6, r0
        ch = *p++;
   1b1cc:	7825      	ldrb	r5, [r4, #0]
   1b1ce:	3401      	adds	r4, #1
   1b1d0:	e7f3      	b.n	1b1ba <a2i+0x10>
    }
    *src = p;
   1b1d2:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
   1b1d6:	f889 6000 	strb.w	r6, [r9]
    return ch;
}
   1b1da:	4628      	mov	r0, r5
   1b1dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001b1e0 <putf>:

static int putf(FILE *putp, char c)
{
   1b1e0:	b500      	push	{lr}
   1b1e2:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
   1b1e4:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
   1b1e8:	6803      	ldr	r3, [r0, #0]
   1b1ea:	681b      	ldr	r3, [r3, #0]
   1b1ec:	b14b      	cbz	r3, 1b202 <putf+0x22>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   1b1ee:	2201      	movs	r2, #1
   1b1f0:	f10d 0107 	add.w	r1, sp, #7
   1b1f4:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
   1b1f6:	2801      	cmp	r0, #1
   1b1f8:	d005      	beq.n	1b206 <putf+0x26>
    if (fputc(c, putp) == EOF)
        return 0;
   1b1fa:	2000      	movs	r0, #0
    else
        return 1;
}
   1b1fc:	b003      	add	sp, #12
   1b1fe:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
   1b202:	2000      	movs	r0, #0
   1b204:	e7fa      	b.n	1b1fc <putf+0x1c>
        return 1;
   1b206:	2001      	movs	r0, #1
   1b208:	e7f8      	b.n	1b1fc <putf+0x1c>
	...

0001b20c <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
   1b20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b210:	4606      	mov	r6, r0
   1b212:	460f      	mov	r7, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
   1b214:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
   1b216:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
   1b218:	e001      	b.n	1b21e <putchw+0x12>
        n--;
   1b21a:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
   1b21c:	4613      	mov	r3, r2
   1b21e:	1c5a      	adds	r2, r3, #1
   1b220:	781b      	ldrb	r3, [r3, #0]
   1b222:	b10b      	cbz	r3, 1b228 <putchw+0x1c>
   1b224:	2c00      	cmp	r4, #0
   1b226:	dcf8      	bgt.n	1b21a <putchw+0xe>
    if (p->sign)
   1b228:	78bb      	ldrb	r3, [r7, #2]
   1b22a:	f013 0f01 	tst.w	r3, #1
   1b22e:	d000      	beq.n	1b232 <putchw+0x26>
        n--;
   1b230:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
   1b232:	887b      	ldrh	r3, [r7, #2]
   1b234:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1b238:	b29b      	uxth	r3, r3
   1b23a:	f241 0202 	movw	r2, #4098	; 0x1002
   1b23e:	4293      	cmp	r3, r2
   1b240:	d01c      	beq.n	1b27c <putchw+0x70>
        n -= 2;
    else if (p->alt && p->base == 8)
   1b242:	f640 0202 	movw	r2, #2050	; 0x802
   1b246:	4293      	cmp	r3, r2
   1b248:	d01a      	beq.n	1b280 <putchw+0x74>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
   1b24a:	683b      	ldr	r3, [r7, #0]
   1b24c:	4d35      	ldr	r5, [pc, #212]	; (1b324 <putchw+0x118>)
   1b24e:	401d      	ands	r5, r3
   1b250:	b1f5      	cbz	r5, 1b290 <putchw+0x84>
    unsigned written = 0;
   1b252:	2500      	movs	r5, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
   1b254:	78bb      	ldrb	r3, [r7, #2]
   1b256:	f013 0f01 	tst.w	r3, #1
   1b25a:	d11f      	bne.n	1b29c <putchw+0x90>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
   1b25c:	887b      	ldrh	r3, [r7, #2]
   1b25e:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1b262:	b29b      	uxth	r3, r3
   1b264:	f241 0202 	movw	r2, #4098	; 0x1002
   1b268:	4293      	cmp	r3, r2
   1b26a:	d01d      	beq.n	1b2a8 <putchw+0x9c>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
   1b26c:	f640 0202 	movw	r2, #2050	; 0x802
   1b270:	4293      	cmp	r3, r2
   1b272:	d02a      	beq.n	1b2ca <putchw+0xbe>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
   1b274:	787b      	ldrb	r3, [r7, #1]
   1b276:	bba3      	cbnz	r3, 1b2e2 <putchw+0xd6>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
   1b278:	687b      	ldr	r3, [r7, #4]
    while ((ch = *bf++))
   1b27a:	e03d      	b.n	1b2f8 <putchw+0xec>
        n -= 2;
   1b27c:	3c02      	subs	r4, #2
   1b27e:	e7e4      	b.n	1b24a <putchw+0x3e>
        n--;
   1b280:	3c01      	subs	r4, #1
   1b282:	e7e2      	b.n	1b24a <putchw+0x3e>
            written += putf(putp, ' ');
   1b284:	2120      	movs	r1, #32
   1b286:	4630      	mov	r0, r6
   1b288:	f7ff ffaa 	bl	1b1e0 <putf>
   1b28c:	4405      	add	r5, r0
        while (n-- > 0)
   1b28e:	4644      	mov	r4, r8
   1b290:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   1b294:	2c00      	cmp	r4, #0
   1b296:	dcf5      	bgt.n	1b284 <putchw+0x78>
   1b298:	4644      	mov	r4, r8
   1b29a:	e7db      	b.n	1b254 <putchw+0x48>
        written += putf(putp, '-');
   1b29c:	212d      	movs	r1, #45	; 0x2d
   1b29e:	4630      	mov	r0, r6
   1b2a0:	f7ff ff9e 	bl	1b1e0 <putf>
   1b2a4:	4405      	add	r5, r0
   1b2a6:	e7d9      	b.n	1b25c <putchw+0x50>
        written += putf(putp, '0');
   1b2a8:	2130      	movs	r1, #48	; 0x30
   1b2aa:	4630      	mov	r0, r6
   1b2ac:	f7ff ff98 	bl	1b1e0 <putf>
   1b2b0:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
   1b2b2:	78bb      	ldrb	r3, [r7, #2]
   1b2b4:	f013 0f04 	tst.w	r3, #4
   1b2b8:	d005      	beq.n	1b2c6 <putchw+0xba>
   1b2ba:	2158      	movs	r1, #88	; 0x58
   1b2bc:	4630      	mov	r0, r6
   1b2be:	f7ff ff8f 	bl	1b1e0 <putf>
   1b2c2:	4405      	add	r5, r0
   1b2c4:	e7d6      	b.n	1b274 <putchw+0x68>
   1b2c6:	2178      	movs	r1, #120	; 0x78
   1b2c8:	e7f8      	b.n	1b2bc <putchw+0xb0>
        written += putf(putp, '0');
   1b2ca:	2130      	movs	r1, #48	; 0x30
   1b2cc:	4630      	mov	r0, r6
   1b2ce:	f7ff ff87 	bl	1b1e0 <putf>
   1b2d2:	4405      	add	r5, r0
   1b2d4:	e7ce      	b.n	1b274 <putchw+0x68>
            written += putf(putp, '0');
   1b2d6:	2130      	movs	r1, #48	; 0x30
   1b2d8:	4630      	mov	r0, r6
   1b2da:	f7ff ff81 	bl	1b1e0 <putf>
   1b2de:	4405      	add	r5, r0
        while (n-- > 0)
   1b2e0:	4644      	mov	r4, r8
   1b2e2:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   1b2e6:	2c00      	cmp	r4, #0
   1b2e8:	dcf5      	bgt.n	1b2d6 <putchw+0xca>
   1b2ea:	4644      	mov	r4, r8
   1b2ec:	e7c4      	b.n	1b278 <putchw+0x6c>
        written += putf(putp, ch);
   1b2ee:	4630      	mov	r0, r6
   1b2f0:	f7ff ff76 	bl	1b1e0 <putf>
   1b2f4:	4405      	add	r5, r0
    while ((ch = *bf++))
   1b2f6:	4643      	mov	r3, r8
   1b2f8:	f103 0801 	add.w	r8, r3, #1
   1b2fc:	7819      	ldrb	r1, [r3, #0]
   1b2fe:	2900      	cmp	r1, #0
   1b300:	d1f5      	bne.n	1b2ee <putchw+0xe2>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
   1b302:	78bb      	ldrb	r3, [r7, #2]
   1b304:	f013 0f08 	tst.w	r3, #8
   1b308:	d106      	bne.n	1b318 <putchw+0x10c>
   1b30a:	e008      	b.n	1b31e <putchw+0x112>
        while (n-- > 0)
            written += putf(putp, ' ');
   1b30c:	2120      	movs	r1, #32
   1b30e:	4630      	mov	r0, r6
   1b310:	f7ff ff66 	bl	1b1e0 <putf>
   1b314:	4405      	add	r5, r0
        while (n-- > 0)
   1b316:	463c      	mov	r4, r7
   1b318:	1e67      	subs	r7, r4, #1
   1b31a:	2c00      	cmp	r4, #0
   1b31c:	dcf6      	bgt.n	1b30c <putchw+0x100>
    }
    
    return written;
}
   1b31e:	4628      	mov	r0, r5
   1b320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b324:	0008ff00 	.word	0x0008ff00

0001b328 <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
   1b328:	b160      	cbz	r0, 1b344 <intarg+0x1c>
   1b32a:	2801      	cmp	r0, #1
   1b32c:	d017      	beq.n	1b35e <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
   1b32e:	bb19      	cbnz	r1, 1b378 <intarg+0x50>
            val = va_arg(*va, long long);
        } else {
            val = va_arg(*va, unsigned long long);
   1b330:	6813      	ldr	r3, [r2, #0]
   1b332:	3307      	adds	r3, #7
   1b334:	f023 0307 	bic.w	r3, r3, #7
   1b338:	f103 0108 	add.w	r1, r3, #8
   1b33c:	6011      	str	r1, [r2, #0]
   1b33e:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
   1b342:	4770      	bx	lr
        if (sign) {
   1b344:	b129      	cbz	r1, 1b352 <intarg+0x2a>
            val = va_arg(*va, int);
   1b346:	6813      	ldr	r3, [r2, #0]
   1b348:	1d19      	adds	r1, r3, #4
   1b34a:	6011      	str	r1, [r2, #0]
   1b34c:	6818      	ldr	r0, [r3, #0]
   1b34e:	17c1      	asrs	r1, r0, #31
   1b350:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
   1b352:	6813      	ldr	r3, [r2, #0]
   1b354:	1d19      	adds	r1, r3, #4
   1b356:	6011      	str	r1, [r2, #0]
   1b358:	6818      	ldr	r0, [r3, #0]
   1b35a:	2100      	movs	r1, #0
   1b35c:	4770      	bx	lr
        if (sign) {
   1b35e:	b129      	cbz	r1, 1b36c <intarg+0x44>
            val = va_arg(*va, long);
   1b360:	6813      	ldr	r3, [r2, #0]
   1b362:	1d19      	adds	r1, r3, #4
   1b364:	6011      	str	r1, [r2, #0]
   1b366:	6818      	ldr	r0, [r3, #0]
   1b368:	17c1      	asrs	r1, r0, #31
   1b36a:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
   1b36c:	6813      	ldr	r3, [r2, #0]
   1b36e:	1d19      	adds	r1, r3, #4
   1b370:	6011      	str	r1, [r2, #0]
   1b372:	6818      	ldr	r0, [r3, #0]
   1b374:	2100      	movs	r1, #0
   1b376:	4770      	bx	lr
            val = va_arg(*va, long long);
   1b378:	6813      	ldr	r3, [r2, #0]
   1b37a:	3307      	adds	r3, #7
   1b37c:	f023 0307 	bic.w	r3, r3, #7
   1b380:	f103 0108 	add.w	r1, r3, #8
   1b384:	6011      	str	r1, [r2, #0]
   1b386:	e9d3 0100 	ldrd	r0, r1, [r3]
   1b38a:	4770      	bx	lr

0001b38c <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
   1b38c:	b570      	push	{r4, r5, r6, lr}
   1b38e:	b08a      	sub	sp, #40	; 0x28
   1b390:	4605      	mov	r5, r0
   1b392:	9101      	str	r1, [sp, #4]
   1b394:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
   1b396:	ab02      	add	r3, sp, #8
   1b398:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
   1b39a:	2400      	movs	r4, #0

    while ((ch = *(fmt++))) {
   1b39c:	9b01      	ldr	r3, [sp, #4]
   1b39e:	1c5a      	adds	r2, r3, #1
   1b3a0:	9201      	str	r2, [sp, #4]
   1b3a2:	7819      	ldrb	r1, [r3, #0]
   1b3a4:	2900      	cmp	r1, #0
   1b3a6:	f000 811c 	beq.w	1b5e2 <tfp_format+0x256>
        if (ch != '%') {
   1b3aa:	2925      	cmp	r1, #37	; 0x25
   1b3ac:	d004      	beq.n	1b3b8 <tfp_format+0x2c>
            written += putf(putp, ch);
   1b3ae:	4628      	mov	r0, r5
   1b3b0:	f7ff ff16 	bl	1b1e0 <putf>
   1b3b4:	4404      	add	r4, r0
   1b3b6:	e7f1      	b.n	1b39c <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
   1b3b8:	2200      	movs	r2, #0
   1b3ba:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
   1b3be:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
   1b3c2:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
   1b3c6:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
   1b3ca:	f362 0382 	bfi	r3, r2, #2, #1
   1b3ce:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
   1b3d2:	9b01      	ldr	r3, [sp, #4]
   1b3d4:	1c5a      	adds	r2, r3, #1
   1b3d6:	9201      	str	r2, [sp, #4]
   1b3d8:	7818      	ldrb	r0, [r3, #0]
   1b3da:	b128      	cbz	r0, 1b3e8 <tfp_format+0x5c>
                switch (ch) {
   1b3dc:	282d      	cmp	r0, #45	; 0x2d
   1b3de:	d04e      	beq.n	1b47e <tfp_format+0xf2>
   1b3e0:	2830      	cmp	r0, #48	; 0x30
   1b3e2:	d03c      	beq.n	1b45e <tfp_format+0xd2>
   1b3e4:	2823      	cmp	r0, #35	; 0x23
   1b3e6:	d043      	beq.n	1b470 <tfp_format+0xe4>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
   1b3e8:	282a      	cmp	r0, #42	; 0x2a
   1b3ea:	d052      	beq.n	1b492 <tfp_format+0x106>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
   1b3ec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1b3f0:	b2db      	uxtb	r3, r3
   1b3f2:	2b09      	cmp	r3, #9
   1b3f4:	d961      	bls.n	1b4ba <tfp_format+0x12e>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
   1b3f6:	286c      	cmp	r0, #108	; 0x6c
   1b3f8:	d065      	beq.n	1b4c6 <tfp_format+0x13a>
            lng = 0;
   1b3fa:	2600      	movs	r6, #0
                    ch = *(fmt++);
                    lng = 2;
                }
            }

            if (ch == 'z') {
   1b3fc:	287a      	cmp	r0, #122	; 0x7a
   1b3fe:	d06f      	beq.n	1b4e0 <tfp_format+0x154>
                ch = *(fmt++);
            }

            switch (ch) {
   1b400:	2869      	cmp	r0, #105	; 0x69
   1b402:	f000 808e 	beq.w	1b522 <tfp_format+0x196>
   1b406:	d970      	bls.n	1b4ea <tfp_format+0x15e>
   1b408:	2873      	cmp	r0, #115	; 0x73
   1b40a:	f000 80dd 	beq.w	1b5c8 <tfp_format+0x23c>
   1b40e:	f200 8099 	bhi.w	1b544 <tfp_format+0x1b8>
   1b412:	286f      	cmp	r0, #111	; 0x6f
   1b414:	f000 80c7 	beq.w	1b5a6 <tfp_format+0x21a>
   1b418:	2870      	cmp	r0, #112	; 0x70
   1b41a:	d1bf      	bne.n	1b39c <tfp_format+0x10>
                p.base = 8;
                ui2a(intarg(lng, 0, &va), &p);
                written += putchw(putp, &p);
                break;
            case 'p':
                v = va_arg(va, void *);
   1b41c:	9b00      	ldr	r3, [sp, #0]
   1b41e:	1d1a      	adds	r2, r3, #4
   1b420:	9200      	str	r2, [sp, #0]
   1b422:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
   1b424:	2310      	movs	r3, #16
   1b426:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
   1b42a:	aa08      	add	r2, sp, #32
   1b42c:	2100      	movs	r1, #0
   1b42e:	f7ff fe34 	bl	1b09a <ui2a>
                p.width = 2 * sizeof(void*);
   1b432:	2308      	movs	r3, #8
   1b434:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
   1b438:	2301      	movs	r3, #1
   1b43a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
   1b43e:	2130      	movs	r1, #48	; 0x30
   1b440:	4628      	mov	r0, r5
   1b442:	f7ff fecd 	bl	1b1e0 <putf>
   1b446:	4404      	add	r4, r0
                written += putf(putp, 'x');
   1b448:	2178      	movs	r1, #120	; 0x78
   1b44a:	4628      	mov	r0, r5
   1b44c:	f7ff fec8 	bl	1b1e0 <putf>
   1b450:	4404      	add	r4, r0
                written += putchw(putp, &p);
   1b452:	a908      	add	r1, sp, #32
   1b454:	4628      	mov	r0, r5
   1b456:	f7ff fed9 	bl	1b20c <putchw>
   1b45a:	4404      	add	r4, r0
                break;
   1b45c:	e79e      	b.n	1b39c <tfp_format+0x10>
                    if (!p.left) {
   1b45e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1b462:	f013 0f08 	tst.w	r3, #8
   1b466:	d1b4      	bne.n	1b3d2 <tfp_format+0x46>
                        p.lz = 1;
   1b468:	2301      	movs	r3, #1
   1b46a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1b46e:	e7b0      	b.n	1b3d2 <tfp_format+0x46>
                    p.alt = 1;
   1b470:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1b474:	f043 0302 	orr.w	r3, r3, #2
   1b478:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
   1b47c:	e7a9      	b.n	1b3d2 <tfp_format+0x46>
                    p.left = 1;
   1b47e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1b482:	f043 0308 	orr.w	r3, r3, #8
   1b486:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
   1b48a:	2300      	movs	r3, #0
   1b48c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1b490:	e79f      	b.n	1b3d2 <tfp_format+0x46>
                i = intarg(0, 1, &va);
   1b492:	466a      	mov	r2, sp
   1b494:	2101      	movs	r1, #1
   1b496:	2000      	movs	r0, #0
   1b498:	f7ff ff46 	bl	1b328 <intarg>
                if (i > UCHAR_MAX) {
   1b49c:	28ff      	cmp	r0, #255	; 0xff
   1b49e:	dd07      	ble.n	1b4b0 <tfp_format+0x124>
                    p.width = UCHAR_MAX;
   1b4a0:	23ff      	movs	r3, #255	; 0xff
   1b4a2:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
   1b4a6:	9b01      	ldr	r3, [sp, #4]
   1b4a8:	1c5a      	adds	r2, r3, #1
   1b4aa:	9201      	str	r2, [sp, #4]
   1b4ac:	7818      	ldrb	r0, [r3, #0]
   1b4ae:	e7a2      	b.n	1b3f6 <tfp_format+0x6a>
                } else if (i > 0) {
   1b4b0:	2800      	cmp	r0, #0
   1b4b2:	ddf8      	ble.n	1b4a6 <tfp_format+0x11a>
                    p.width = i;
   1b4b4:	f88d 0020 	strb.w	r0, [sp, #32]
   1b4b8:	e7f5      	b.n	1b4a6 <tfp_format+0x11a>
                ch = a2i(ch, &fmt, 10, &(p.width));
   1b4ba:	ab08      	add	r3, sp, #32
   1b4bc:	220a      	movs	r2, #10
   1b4be:	a901      	add	r1, sp, #4
   1b4c0:	f7ff fe73 	bl	1b1aa <a2i>
   1b4c4:	e797      	b.n	1b3f6 <tfp_format+0x6a>
                ch = *(fmt++);
   1b4c6:	9b01      	ldr	r3, [sp, #4]
   1b4c8:	1c5a      	adds	r2, r3, #1
   1b4ca:	9201      	str	r2, [sp, #4]
   1b4cc:	7818      	ldrb	r0, [r3, #0]
                if (ch == 'l') {
   1b4ce:	286c      	cmp	r0, #108	; 0x6c
   1b4d0:	d001      	beq.n	1b4d6 <tfp_format+0x14a>
                lng = 1;
   1b4d2:	2601      	movs	r6, #1
   1b4d4:	e792      	b.n	1b3fc <tfp_format+0x70>
                    ch = *(fmt++);
   1b4d6:	1c9a      	adds	r2, r3, #2
   1b4d8:	9201      	str	r2, [sp, #4]
   1b4da:	7858      	ldrb	r0, [r3, #1]
                    lng = 2;
   1b4dc:	2602      	movs	r6, #2
   1b4de:	e78d      	b.n	1b3fc <tfp_format+0x70>
                ch = *(fmt++);
   1b4e0:	9b01      	ldr	r3, [sp, #4]
   1b4e2:	1c5a      	adds	r2, r3, #1
   1b4e4:	9201      	str	r2, [sp, #4]
   1b4e6:	7818      	ldrb	r0, [r3, #0]
   1b4e8:	e78a      	b.n	1b400 <tfp_format+0x74>
            switch (ch) {
   1b4ea:	2858      	cmp	r0, #88	; 0x58
   1b4ec:	d040      	beq.n	1b570 <tfp_format+0x1e4>
   1b4ee:	d80a      	bhi.n	1b506 <tfp_format+0x17a>
   1b4f0:	2800      	cmp	r0, #0
   1b4f2:	d076      	beq.n	1b5e2 <tfp_format+0x256>
   1b4f4:	2825      	cmp	r0, #37	; 0x25
   1b4f6:	f47f af51 	bne.w	1b39c <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
   1b4fa:	4601      	mov	r1, r0
   1b4fc:	4628      	mov	r0, r5
   1b4fe:	f7ff fe6f 	bl	1b1e0 <putf>
   1b502:	4404      	add	r4, r0
                break;
   1b504:	e74a      	b.n	1b39c <tfp_format+0x10>
            switch (ch) {
   1b506:	2863      	cmp	r0, #99	; 0x63
   1b508:	d108      	bne.n	1b51c <tfp_format+0x190>
                written += putf(putp, (char)(va_arg(va, int)));
   1b50a:	9b00      	ldr	r3, [sp, #0]
   1b50c:	1d1a      	adds	r2, r3, #4
   1b50e:	9200      	str	r2, [sp, #0]
   1b510:	7819      	ldrb	r1, [r3, #0]
   1b512:	4628      	mov	r0, r5
   1b514:	f7ff fe64 	bl	1b1e0 <putf>
   1b518:	4404      	add	r4, r0
                break;
   1b51a:	e73f      	b.n	1b39c <tfp_format+0x10>
            switch (ch) {
   1b51c:	2864      	cmp	r0, #100	; 0x64
   1b51e:	f47f af3d 	bne.w	1b39c <tfp_format+0x10>
                p.base = 10;
   1b522:	230a      	movs	r3, #10
   1b524:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
   1b528:	466a      	mov	r2, sp
   1b52a:	2101      	movs	r1, #1
   1b52c:	4630      	mov	r0, r6
   1b52e:	f7ff fefb 	bl	1b328 <intarg>
   1b532:	aa08      	add	r2, sp, #32
   1b534:	f7ff fe11 	bl	1b15a <i2a>
                written += putchw(putp, &p);
   1b538:	a908      	add	r1, sp, #32
   1b53a:	4628      	mov	r0, r5
   1b53c:	f7ff fe66 	bl	1b20c <putchw>
   1b540:	4404      	add	r4, r0
                break;
   1b542:	e72b      	b.n	1b39c <tfp_format+0x10>
            switch (ch) {
   1b544:	2875      	cmp	r0, #117	; 0x75
   1b546:	d110      	bne.n	1b56a <tfp_format+0x1de>
                p.base = 10;
   1b548:	230a      	movs	r3, #10
   1b54a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1b54e:	466a      	mov	r2, sp
   1b550:	2100      	movs	r1, #0
   1b552:	4630      	mov	r0, r6
   1b554:	f7ff fee8 	bl	1b328 <intarg>
   1b558:	aa08      	add	r2, sp, #32
   1b55a:	f7ff fd9e 	bl	1b09a <ui2a>
                written += putchw(putp, &p);
   1b55e:	a908      	add	r1, sp, #32
   1b560:	4628      	mov	r0, r5
   1b562:	f7ff fe53 	bl	1b20c <putchw>
   1b566:	4404      	add	r4, r0
                break;
   1b568:	e718      	b.n	1b39c <tfp_format+0x10>
            switch (ch) {
   1b56a:	2878      	cmp	r0, #120	; 0x78
   1b56c:	f47f af16 	bne.w	1b39c <tfp_format+0x10>
                p.base = 16;
   1b570:	2310      	movs	r3, #16
   1b572:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
   1b576:	2858      	cmp	r0, #88	; 0x58
   1b578:	bf14      	ite	ne
   1b57a:	2300      	movne	r3, #0
   1b57c:	2301      	moveq	r3, #1
   1b57e:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   1b582:	f363 0282 	bfi	r2, r3, #2, #1
   1b586:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
   1b58a:	466a      	mov	r2, sp
   1b58c:	2100      	movs	r1, #0
   1b58e:	4630      	mov	r0, r6
   1b590:	f7ff feca 	bl	1b328 <intarg>
   1b594:	aa08      	add	r2, sp, #32
   1b596:	f7ff fd80 	bl	1b09a <ui2a>
                written += putchw(putp, &p);
   1b59a:	a908      	add	r1, sp, #32
   1b59c:	4628      	mov	r0, r5
   1b59e:	f7ff fe35 	bl	1b20c <putchw>
   1b5a2:	4404      	add	r4, r0
                break;
   1b5a4:	e6fa      	b.n	1b39c <tfp_format+0x10>
                p.base = 8;
   1b5a6:	2308      	movs	r3, #8
   1b5a8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1b5ac:	466a      	mov	r2, sp
   1b5ae:	2100      	movs	r1, #0
   1b5b0:	4630      	mov	r0, r6
   1b5b2:	f7ff feb9 	bl	1b328 <intarg>
   1b5b6:	aa08      	add	r2, sp, #32
   1b5b8:	f7ff fd6f 	bl	1b09a <ui2a>
                written += putchw(putp, &p);
   1b5bc:	a908      	add	r1, sp, #32
   1b5be:	4628      	mov	r0, r5
   1b5c0:	f7ff fe24 	bl	1b20c <putchw>
   1b5c4:	4404      	add	r4, r0
                break;
   1b5c6:	e6e9      	b.n	1b39c <tfp_format+0x10>
                p.bf = va_arg(va, char *);
   1b5c8:	9b00      	ldr	r3, [sp, #0]
   1b5ca:	1d1a      	adds	r2, r3, #4
   1b5cc:	9200      	str	r2, [sp, #0]
   1b5ce:	681b      	ldr	r3, [r3, #0]
   1b5d0:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
   1b5d2:	a908      	add	r1, sp, #32
   1b5d4:	4628      	mov	r0, r5
   1b5d6:	f7ff fe19 	bl	1b20c <putchw>
   1b5da:	4404      	add	r4, r0
                p.bf = bf;
   1b5dc:	ab02      	add	r3, sp, #8
   1b5de:	9309      	str	r3, [sp, #36]	; 0x24
                break;
   1b5e0:	e6dc      	b.n	1b39c <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
   1b5e2:	4620      	mov	r0, r4
   1b5e4:	b00a      	add	sp, #40	; 0x28
   1b5e6:	bd70      	pop	{r4, r5, r6, pc}

0001b5e8 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
   1b5e8:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
   1b5ea:	f7ff fecf 	bl	1b38c <tfp_format>
}
   1b5ee:	bd08      	pop	{r3, pc}

0001b5f0 <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
   1b5f0:	b40f      	push	{r0, r1, r2, r3}
   1b5f2:	b500      	push	{lr}
   1b5f4:	b083      	sub	sp, #12
   1b5f6:	aa04      	add	r2, sp, #16
   1b5f8:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   1b5fc:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
   1b5fe:	4b04      	ldr	r3, [pc, #16]	; (1b610 <printf+0x20>)
   1b600:	6818      	ldr	r0, [r3, #0]
   1b602:	f7ff fff1 	bl	1b5e8 <vfprintf>
    va_end(va);
    return rv;
}
   1b606:	b003      	add	sp, #12
   1b608:	f85d eb04 	ldr.w	lr, [sp], #4
   1b60c:	b004      	add	sp, #16
   1b60e:	4770      	bx	lr
   1b610:	00020ff4 	.word	0x00020ff4

0001b614 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
   1b614:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b616:	b085      	sub	sp, #20
   1b618:	4605      	mov	r5, r0
   1b61a:	460c      	mov	r4, r1
   1b61c:	4616      	mov	r6, r2
   1b61e:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
   1b620:	460a      	mov	r2, r1
   1b622:	4601      	mov	r1, r0
   1b624:	4668      	mov	r0, sp
   1b626:	f000 f835 	bl	1b694 <fmemopen_w>
    tfp_format(f, fmt, va);
   1b62a:	463a      	mov	r2, r7
   1b62c:	4631      	mov	r1, r6
   1b62e:	f7ff fead 	bl	1b38c <tfp_format>
    if (size > 0) {
   1b632:	b12c      	cbz	r4, 1b640 <vsnprintf+0x2c>
        if (state.bytes_written < size) {
   1b634:	9b02      	ldr	r3, [sp, #8]
   1b636:	42a3      	cmp	r3, r4
   1b638:	d305      	bcc.n	1b646 <vsnprintf+0x32>
            *(state.buffer) = '\0';
        } else {
            str[size - 1] = '\0';
   1b63a:	3c01      	subs	r4, #1
   1b63c:	2300      	movs	r3, #0
   1b63e:	552b      	strb	r3, [r5, r4]
        }
    }
    return state.bytes_written;
}
   1b640:	9802      	ldr	r0, [sp, #8]
   1b642:	b005      	add	sp, #20
   1b644:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(state.buffer) = '\0';
   1b646:	9b01      	ldr	r3, [sp, #4]
   1b648:	2200      	movs	r2, #0
   1b64a:	701a      	strb	r2, [r3, #0]
   1b64c:	e7f8      	b.n	1b640 <vsnprintf+0x2c>
	...

0001b650 <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   1b650:	b508      	push	{r3, lr}
	return vfprintf(stdout, format, ap);
   1b652:	460a      	mov	r2, r1
   1b654:	4601      	mov	r1, r0
   1b656:	4b02      	ldr	r3, [pc, #8]	; (1b660 <vprintf+0x10>)
   1b658:	6818      	ldr	r0, [r3, #0]
   1b65a:	f7ff ffc5 	bl	1b5e8 <vfprintf>
}
   1b65e:	bd08      	pop	{r3, pc}
   1b660:	00020ff4 	.word	0x00020ff4

0001b664 <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
   1b664:	b430      	push	{r4, r5}
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
   1b666:	2500      	movs	r5, #0
    
    while (n--)
   1b668:	e000      	b.n	1b66c <memfile_write+0x8>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
   1b66a:	4622      	mov	r2, r4
    while (n--)
   1b66c:	1e54      	subs	r4, r2, #1
   1b66e:	b16a      	cbz	r2, 1b68c <memfile_write+0x28>
        f->bytes_written++;
   1b670:	6883      	ldr	r3, [r0, #8]
   1b672:	3301      	adds	r3, #1
   1b674:	6083      	str	r3, [r0, #8]
        if (f->bytes_written <= f->size)
   1b676:	68c2      	ldr	r2, [r0, #12]
   1b678:	4293      	cmp	r3, r2
   1b67a:	d8f6      	bhi.n	1b66a <memfile_write+0x6>
            *f->buffer++ = *bp++;
   1b67c:	6843      	ldr	r3, [r0, #4]
   1b67e:	1c5a      	adds	r2, r3, #1
   1b680:	6042      	str	r2, [r0, #4]
   1b682:	780a      	ldrb	r2, [r1, #0]
   1b684:	701a      	strb	r2, [r3, #0]
            i++;
   1b686:	3501      	adds	r5, #1
            *f->buffer++ = *bp++;
   1b688:	3101      	adds	r1, #1
   1b68a:	e7ee      	b.n	1b66a <memfile_write+0x6>
        }
    }
    
    return i;
}
   1b68c:	4628      	mov	r0, r5
   1b68e:	bc30      	pop	{r4, r5}
   1b690:	4770      	bx	lr
	...

0001b694 <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
   1b694:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
   1b696:	4c04      	ldr	r4, [pc, #16]	; (1b6a8 <fmemopen_w+0x14>)
   1b698:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
   1b69a:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
   1b69c:	2100      	movs	r1, #0
   1b69e:	6081      	str	r1, [r0, #8]
    storage->size = size;
   1b6a0:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
   1b6a2:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b6a6:	4770      	bx	lr
   1b6a8:	00020fec 	.word	0x00020fec

0001b6ac <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
   1b6ac:	2000      	movs	r0, #0
   1b6ae:	4770      	bx	lr

0001b6b0 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
   1b6b0:	b510      	push	{r4, lr}
   1b6b2:	4608      	mov	r0, r1
   1b6b4:	4614      	mov	r4, r2
    console_write(bp, n);
   1b6b6:	4611      	mov	r1, r2
   1b6b8:	f7fd f9b8 	bl	18a2c <console_write>
    return n;
}
   1b6bc:	4620      	mov	r0, r4
   1b6be:	bd10      	pop	{r4, pc}

0001b6c0 <rust_sysinit>:
#include <mynewt_rust/mynewt_rust.h>
#include <mynewt_rust/sensor_helper.h>
#include <mynewt_rust/json_helper.h>

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
void rust_sysinit() {
   1b6c0:	b508      	push	{r3, lr}
    sysinit();
   1b6c2:	f7fd fa1b 	bl	18afc <sysinit_start>
   1b6c6:	f000 f81b 	bl	1b700 <sysinit_app>
   1b6ca:	f7fd fa1d 	bl	18b08 <sysinit_end>
}
   1b6ce:	bd08      	pop	{r3, pc}

0001b6d0 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   1b6d0:	b570      	push	{r4, r5, r6, lr}
   1b6d2:	b082      	sub	sp, #8
   1b6d4:	460c      	mov	r4, r1
   1b6d6:	4616      	mov	r6, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   1b6d8:	b29d      	uxth	r5, r3
   1b6da:	9b07      	ldr	r3, [sp, #28]
   1b6dc:	9300      	str	r3, [sp, #0]
   1b6de:	4603      	mov	r3, r0
   1b6e0:	9a06      	ldr	r2, [sp, #24]
   1b6e2:	4629      	mov	r1, r5
   1b6e4:	4620      	mov	r0, r4
   1b6e6:	f7fe fdeb 	bl	1a2c0 <os_mempool_init>
    if (rc != 0) {
   1b6ea:	b108      	cbz	r0, 1b6f0 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1b6ec:	b002      	add	sp, #8
   1b6ee:	bd70      	pop	{r4, r5, r6, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   1b6f0:	462b      	mov	r3, r5
   1b6f2:	9a06      	ldr	r2, [sp, #24]
   1b6f4:	b292      	uxth	r2, r2
   1b6f6:	4621      	mov	r1, r4
   1b6f8:	4630      	mov	r0, r6
   1b6fa:	f7fe fc96 	bl	1a02a <os_mbuf_pool_init>
   1b6fe:	e7f5      	b.n	1b6ec <mem_init_mbuf_pool+0x1c>

0001b700 <sysinit_app>:
void sensor_network_init(void);
void init_sensor_coap(void);

void
sysinit_app(void)
{
   1b700:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   1b702:	f7fe f9f3 	bl	19aec <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   1b706:	f001 f985 	bl	1ca14 <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (libs/semihosting_console) */
    console_pkg_init();
   1b70a:	f7fd f9a3 	bl	18a54 <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: mfg_init (sys/mfg) */
    mfg_init();
   1b70e:	f001 fac7 	bl	1cca0 <mfg_init>
    /* 100.1: modlog_init (sys/log/modlog) */
    modlog_init();
   1b712:	f001 f9b7 	bl	1ca84 <modlog_init>

    /*** Stage 300 */
    /* 300.0: oc_init (net/oic) */
    oc_init();
   1b716:	f001 f8e1 	bl	1c8dc <oc_init>

    /*** Stage 301 */
    /* 301.0: oc_register_gatt (net/oic) */
    oc_register_gatt();
   1b71a:	f001 f8f1 	bl	1c900 <oc_register_gatt>
    /* 301.1: oc_register_ip4 (net/oic) */
    oc_register_ip4();
   1b71e:	f001 f8f0 	bl	1c902 <oc_register_ip4>
    /* 301.2: oc_register_ip6 (net/oic) */
    oc_register_ip6();
   1b722:	f001 f8ef 	bl	1c904 <oc_register_ip6>
    /* 301.3: oc_register_lora (net/oic) */
    oc_register_lora();
   1b726:	f001 f8ee 	bl	1c906 <oc_register_lora>
    /* 301.4: oc_register_serial (net/oic) */
    oc_register_serial();
   1b72a:	f001 f8ed 	bl	1c908 <oc_register_serial>

    /*** Stage 500 */
    /* 500.0: sensor_dev_create (hw/sensor/creator) */
    sensor_dev_create();
   1b72e:	f000 fbd1 	bl	1bed4 <sensor_dev_create>

    /*** Stage 501 */
    /* 501.0: sensor_pkg_init (hw/sensor) */
    sensor_pkg_init();
   1b732:	f000 fd1f 	bl	1c174 <sensor_pkg_init>

    /*** Stage 620 */
    /* 620.0: temp_stub_create (libs/temp_stub) */
    temp_stub_create();
   1b736:	f000 ff3d 	bl	1c5b4 <temp_stub_create>

    /*** Stage 640 */
    /* 640.0: sensor_network_init (libs/sensor_network) */
    sensor_network_init();
   1b73a:	f000 feb3 	bl	1c4a4 <sensor_network_init>

    /*** Stage 660 */
    /* 660.0: init_sensor_coap (libs/sensor_coap) */
    init_sensor_coap();
   1b73e:	f000 fe3d 	bl	1c3bc <init_sensor_coap>
}
   1b742:	bd08      	pop	{r3, pc}

0001b744 <hal_bsp_flash_dev>:
hal_bsp_flash_dev(uint8_t id)
{
    /*
     * Internal flash mapped to id 0.
     */
    if (id == 0) {
   1b744:	b908      	cbnz	r0, 1b74a <hal_bsp_flash_dev+0x6>
        return &nrf52k_flash_dev;
   1b746:	4802      	ldr	r0, [pc, #8]	; (1b750 <hal_bsp_flash_dev+0xc>)
   1b748:	4770      	bx	lr
    }

    return NULL;
   1b74a:	2000      	movs	r0, #0
}
   1b74c:	4770      	bx	lr
   1b74e:	bf00      	nop
   1b750:	00020ff8 	.word	0x00020ff8

0001b754 <hal_bsp_init>:
    return cfg_pri;
}

void
hal_bsp_init(void)
{
   1b754:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
   1b756:	f7ec fd33 	bl	81c0 <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
   1b75a:	f000 fbb3 	bl	1bec4 <nrf52_periph_create>
}
   1b75e:	bd08      	pop	{r3, pc}

0001b760 <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
   1b760:	2300      	movs	r3, #0
   1b762:	4a07      	ldr	r2, [pc, #28]	; (1b780 <nrf52k_flash_wait_ready+0x20>)
   1b764:	4293      	cmp	r3, r2
   1b766:	dc06      	bgt.n	1b776 <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
   1b768:	4a06      	ldr	r2, [pc, #24]	; (1b784 <nrf52k_flash_wait_ready+0x24>)
   1b76a:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   1b76e:	2a01      	cmp	r2, #1
   1b770:	d004      	beq.n	1b77c <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
   1b772:	3301      	adds	r3, #1
   1b774:	e7f5      	b.n	1b762 <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
   1b776:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b77a:	4770      	bx	lr
            return 0;
   1b77c:	2000      	movs	r0, #0
}
   1b77e:	4770      	bx	lr
   1b780:	0001869f 	.word	0x0001869f
   1b784:	4001e000 	.word	0x4001e000

0001b788 <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
   1b788:	b538      	push	{r3, r4, r5, lr}
   1b78a:	460d      	mov	r5, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
   1b78c:	f7ff ffe8 	bl	1b760 <nrf52k_flash_wait_ready>
   1b790:	b9f0      	cbnz	r0, 1b7d0 <nrf52k_flash_erase_sector+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1b792:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1b796:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
   1b798:	4b0f      	ldr	r3, [pc, #60]	; (1b7d8 <nrf52k_flash_erase_sector+0x50>)
   1b79a:	2202      	movs	r2, #2
   1b79c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
   1b7a0:	f7ff ffde 	bl	1b760 <nrf52k_flash_wait_ready>
   1b7a4:	b148      	cbz	r0, 1b7ba <nrf52k_flash_erase_sector+0x32>
    int rc = -1;
   1b7a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
   1b7aa:	4a0b      	ldr	r2, [pc, #44]	; (1b7d8 <nrf52k_flash_erase_sector+0x50>)
   1b7ac:	2100      	movs	r1, #0
   1b7ae:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1b7b2:	b904      	cbnz	r4, 1b7b6 <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
   1b7b4:	b662      	cpsie	i
    return rc;
}
   1b7b6:	4618      	mov	r0, r3
   1b7b8:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
   1b7ba:	4b07      	ldr	r3, [pc, #28]	; (1b7d8 <nrf52k_flash_erase_sector+0x50>)
   1b7bc:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
   1b7c0:	f7ff ffce 	bl	1b760 <nrf52k_flash_wait_ready>
   1b7c4:	4603      	mov	r3, r0
   1b7c6:	2800      	cmp	r0, #0
   1b7c8:	d0ef      	beq.n	1b7aa <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
   1b7ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b7ce:	e7ec      	b.n	1b7aa <nrf52k_flash_erase_sector+0x22>
        return -1;
   1b7d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b7d4:	e7ef      	b.n	1b7b6 <nrf52k_flash_erase_sector+0x2e>
   1b7d6:	bf00      	nop
   1b7d8:	4001e000 	.word	0x4001e000

0001b7dc <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
   1b7dc:	2000      	movs	r0, #0
   1b7de:	4770      	bx	lr

0001b7e0 <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1b7e0:	297f      	cmp	r1, #127	; 0x7f
   1b7e2:	dc06      	bgt.n	1b7f2 <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
   1b7e4:	0309      	lsls	r1, r1, #12
   1b7e6:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
   1b7e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1b7ec:	601a      	str	r2, [r3, #0]
}
   1b7ee:	2000      	movs	r0, #0
   1b7f0:	4770      	bx	lr
{
   1b7f2:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1b7f4:	2300      	movs	r3, #0
   1b7f6:	461a      	mov	r2, r3
   1b7f8:	4619      	mov	r1, r3
   1b7fa:	4618      	mov	r0, r3
   1b7fc:	f7fe f818 	bl	19830 <__assert_func>

0001b800 <nrf52k_flash_write>:
{
   1b800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b804:	b082      	sub	sp, #8
   1b806:	460d      	mov	r5, r1
   1b808:	4616      	mov	r6, r2
   1b80a:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
   1b80c:	f7ff ffa8 	bl	1b760 <nrf52k_flash_wait_ready>
   1b810:	2800      	cmp	r0, #0
   1b812:	d158      	bne.n	1b8c6 <nrf52k_flash_write+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1b814:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1b818:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
   1b81a:	4b2c      	ldr	r3, [pc, #176]	; (1b8cc <nrf52k_flash_write+0xcc>)
   1b81c:	2201      	movs	r2, #1
   1b81e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
   1b822:	f015 0803 	ands.w	r8, r5, #3
   1b826:	d10b      	bne.n	1b840 <nrf52k_flash_write+0x40>
    while (num_bytes >= sizeof(uint32_t)) {
   1b828:	2c03      	cmp	r4, #3
   1b82a:	d925      	bls.n	1b878 <nrf52k_flash_write+0x78>
        if (nrf52k_flash_wait_ready()) {
   1b82c:	f7ff ff98 	bl	1b760 <nrf52k_flash_wait_ready>
   1b830:	2800      	cmp	r0, #0
   1b832:	d139      	bne.n	1b8a8 <nrf52k_flash_write+0xa8>
        *(uint32_t *)address = *(uint32_t *)src;
   1b834:	f856 3b04 	ldr.w	r3, [r6], #4
   1b838:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
   1b83c:	3c04      	subs	r4, #4
   1b83e:	e7f3      	b.n	1b828 <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
   1b840:	f7ff ff8e 	bl	1b760 <nrf52k_flash_wait_ready>
   1b844:	bb68      	cbnz	r0, 1b8a2 <nrf52k_flash_write+0xa2>
        val = *(uint32_t *)(address & ~0x3);
   1b846:	f025 0a03 	bic.w	sl, r5, #3
   1b84a:	f8da 3000 	ldr.w	r3, [sl]
   1b84e:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
   1b850:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
   1b854:	45a1      	cmp	r9, r4
   1b856:	d900      	bls.n	1b85a <nrf52k_flash_write+0x5a>
            cnt = num_bytes;
   1b858:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
   1b85a:	464a      	mov	r2, r9
   1b85c:	4631      	mov	r1, r6
   1b85e:	ab01      	add	r3, sp, #4
   1b860:	eb03 0008 	add.w	r0, r3, r8
   1b864:	f7ff fbda 	bl	1b01c <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
   1b868:	9b01      	ldr	r3, [sp, #4]
   1b86a:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
   1b86e:	444d      	add	r5, r9
        num_bytes -= cnt;
   1b870:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
   1b874:	444e      	add	r6, r9
   1b876:	e7d7      	b.n	1b828 <nrf52k_flash_write+0x28>
    if (num_bytes) {
   1b878:	b164      	cbz	r4, 1b894 <nrf52k_flash_write+0x94>
        val = *(uint32_t *)address;
   1b87a:	682b      	ldr	r3, [r5, #0]
   1b87c:	a802      	add	r0, sp, #8
   1b87e:	f840 3d04 	str.w	r3, [r0, #-4]!
        memcpy(&val, src, num_bytes);
   1b882:	4622      	mov	r2, r4
   1b884:	4631      	mov	r1, r6
   1b886:	f7ff fbc9 	bl	1b01c <memcpy>
        if (nrf52k_flash_wait_ready()) {
   1b88a:	f7ff ff69 	bl	1b760 <nrf52k_flash_wait_ready>
   1b88e:	b9b8      	cbnz	r0, 1b8c0 <nrf52k_flash_write+0xc0>
        *(uint32_t *)address = val;
   1b890:	9b01      	ldr	r3, [sp, #4]
   1b892:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
   1b894:	f7ff ff64 	bl	1b760 <nrf52k_flash_wait_ready>
   1b898:	4603      	mov	r3, r0
   1b89a:	b138      	cbz	r0, 1b8ac <nrf52k_flash_write+0xac>
        rc = -1;
   1b89c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b8a0:	e004      	b.n	1b8ac <nrf52k_flash_write+0xac>
    int rc = -1;
   1b8a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b8a6:	e001      	b.n	1b8ac <nrf52k_flash_write+0xac>
   1b8a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
   1b8ac:	4a07      	ldr	r2, [pc, #28]	; (1b8cc <nrf52k_flash_write+0xcc>)
   1b8ae:	2100      	movs	r1, #0
   1b8b0:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1b8b4:	b907      	cbnz	r7, 1b8b8 <nrf52k_flash_write+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
   1b8b6:	b662      	cpsie	i
}
   1b8b8:	4618      	mov	r0, r3
   1b8ba:	b002      	add	sp, #8
   1b8bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
   1b8c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b8c4:	e7f2      	b.n	1b8ac <nrf52k_flash_write+0xac>
        return -1;
   1b8c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b8ca:	e7f5      	b.n	1b8b8 <nrf52k_flash_write+0xb8>
   1b8cc:	4001e000 	.word	0x4001e000

0001b8d0 <nrf52k_flash_read>:
{
   1b8d0:	b508      	push	{r3, lr}
   1b8d2:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
   1b8d4:	461a      	mov	r2, r3
   1b8d6:	f7ff fba1 	bl	1b01c <memcpy>
}
   1b8da:	2000      	movs	r0, #0
   1b8dc:	bd08      	pop	{r3, pc}
	...

0001b8e0 <nrf52_timer_handler>:
    }
}

static void
nrf52_timer_handler(void)
{
   1b8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ticks;
    os_sr_t sr;
    uint32_t counter;

    os_trace_isr_enter();
    OS_ENTER_CRITICAL(sr);
   1b8e2:	f7ff fa3b 	bl	1ad5c <os_arch_save_sr>
    return OS_TICK_TIMER->COUNTER;
   1b8e6:	4b31      	ldr	r3, [pc, #196]	; (1b9ac <nrf52_timer_handler+0xcc>)
   1b8e8:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504

    /* Calculate elapsed ticks and advance OS time. */

    counter = nrf52_os_tick_counter();
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   1b8ec:	4b30      	ldr	r3, [pc, #192]	; (1b9b0 <nrf52_timer_handler+0xd0>)
   1b8ee:	689b      	ldr	r3, [r3, #8]
    assert(x <= 0xffffff);
   1b8f0:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
   1b8f4:	d225      	bcs.n	1b942 <nrf52_timer_handler+0x62>
   1b8f6:	4606      	mov	r6, r0
    assert(y <= 0xffffff);
   1b8f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1b8fc:	d227      	bcs.n	1b94e <nrf52_timer_handler+0x6e>
    result = x - y;
   1b8fe:	1aed      	subs	r5, r5, r3
    if (result & 0x800000) {
   1b900:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
   1b904:	d129      	bne.n	1b95a <nrf52_timer_handler+0x7a>
        return (result & 0x007fffff);
   1b906:	f3c5 0516 	ubfx	r5, r5, #0, #23
    ticks = delta / g_hal_os_tick.ticks_per_ostick;
   1b90a:	4f29      	ldr	r7, [pc, #164]	; (1b9b0 <nrf52_timer_handler+0xd0>)
   1b90c:	683c      	ldr	r4, [r7, #0]
   1b90e:	fb95 f5f4 	sdiv	r5, r5, r4
    os_time_advance(ticks);
   1b912:	4628      	mov	r0, r5
   1b914:	f7ff f9b0 	bl	1ac78 <os_time_advance>

    /* Clear timer interrupt */
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1b918:	4b24      	ldr	r3, [pc, #144]	; (1b9ac <nrf52_timer_handler+0xcc>)
   1b91a:	2200      	movs	r2, #0
   1b91c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Update the time associated with the most recent tick */
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1b920:	68bb      	ldr	r3, [r7, #8]
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1b922:	683c      	ldr	r4, [r7, #0]
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1b924:	fb05 3304 	mla	r3, r5, r4, r3
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1b928:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1b92c:	60bb      	str	r3, [r7, #8]

    /* Update the output compare to interrupt at the next tick */
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
   1b92e:	441c      	add	r4, r3
    OS_ASSERT_CRITICAL();
   1b930:	f7ff fa1d 	bl	1ad6e <os_arch_in_critical>
   1b934:	bb28      	cbnz	r0, 1b982 <nrf52_timer_handler+0xa2>
   1b936:	2300      	movs	r3, #0
   1b938:	461a      	mov	r2, r3
   1b93a:	4619      	mov	r1, r3
   1b93c:	4618      	mov	r0, r3
   1b93e:	f7fd ff77 	bl	19830 <__assert_func>
    assert(x <= 0xffffff);
   1b942:	2300      	movs	r3, #0
   1b944:	461a      	mov	r2, r3
   1b946:	4619      	mov	r1, r3
   1b948:	4618      	mov	r0, r3
   1b94a:	f7fd ff71 	bl	19830 <__assert_func>
    assert(y <= 0xffffff);
   1b94e:	2300      	movs	r3, #0
   1b950:	461a      	mov	r2, r3
   1b952:	4619      	mov	r1, r3
   1b954:	4618      	mov	r0, r3
   1b956:	f7fd ff6b 	bl	19830 <__assert_func>
        return (result | 0xff800000);
   1b95a:	ea6f 2545 	mvn.w	r5, r5, lsl #9
   1b95e:	ea6f 2555 	mvn.w	r5, r5, lsr #9
   1b962:	e7d2      	b.n	1b90a <nrf52_timer_handler+0x2a>
    assert(y <= 0xffffff);
   1b964:	2300      	movs	r3, #0
   1b966:	461a      	mov	r2, r3
   1b968:	4619      	mov	r1, r3
   1b96a:	4618      	mov	r0, r3
   1b96c:	f7fd ff60 	bl	19830 <__assert_func>
        return (result | 0xff800000);
   1b970:	ea6f 2242 	mvn.w	r2, r2, lsl #9
   1b974:	ea6f 2252 	mvn.w	r2, r2, lsr #9
        if (delta > 2) {
   1b978:	2a02      	cmp	r2, #2
   1b97a:	dc13      	bgt.n	1b9a4 <nrf52_timer_handler+0xc4>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1b97c:	4a0c      	ldr	r2, [pc, #48]	; (1b9b0 <nrf52_timer_handler+0xd0>)
   1b97e:	6814      	ldr	r4, [r2, #0]
   1b980:	441c      	add	r4, r3
        ocmp &= 0xffffff;
   1b982:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1b986:	4a09      	ldr	r2, [pc, #36]	; (1b9ac <nrf52_timer_handler+0xcc>)
   1b988:	f8c2 354c 	str.w	r3, [r2, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1b98c:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
    assert(y <= 0xffffff);
   1b990:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   1b994:	d2e6      	bcs.n	1b964 <nrf52_timer_handler+0x84>
    result = x - y;
   1b996:	1a9a      	subs	r2, r3, r2
    if (result & 0x800000) {
   1b998:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   1b99c:	d1e8      	bne.n	1b970 <nrf52_timer_handler+0x90>
        return (result & 0x007fffff);
   1b99e:	f3c2 0216 	ubfx	r2, r2, #0, #23
   1b9a2:	e7e9      	b.n	1b978 <nrf52_timer_handler+0x98>

    OS_EXIT_CRITICAL(sr);
   1b9a4:	4630      	mov	r0, r6
   1b9a6:	f7ff f9df 	bl	1ad68 <os_arch_restore_sr>
    os_trace_isr_exit();
}
   1b9aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b9ac:	40011000 	.word	0x40011000
   1b9b0:	2000a674 	.word	0x2000a674

0001b9b4 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   1b9b4:	b538      	push	{r3, r4, r5, lr}
   1b9b6:	4605      	mov	r5, r0
    uint32_t ocmp;

    OS_ASSERT_CRITICAL();
   1b9b8:	f7ff f9d9 	bl	1ad6e <os_arch_in_critical>
   1b9bc:	b1a0      	cbz	r0, 1b9e8 <os_tick_idle+0x34>

    if (ticks > 0) {
   1b9be:	2d00      	cmp	r5, #0
   1b9c0:	d038      	beq.n	1ba34 <os_tick_idle+0x80>
        /*
         * Enter tickless regime during long idle durations.
         */
        if (ticks > g_hal_os_tick.max_idle_ticks) {
   1b9c2:	4b20      	ldr	r3, [pc, #128]	; (1ba44 <os_tick_idle+0x90>)
   1b9c4:	685b      	ldr	r3, [r3, #4]
   1b9c6:	42ab      	cmp	r3, r5
   1b9c8:	d200      	bcs.n	1b9cc <os_tick_idle+0x18>
            ticks = g_hal_os_tick.max_idle_ticks;
   1b9ca:	461d      	mov	r5, r3
        }
        ocmp = g_hal_os_tick.lastocmp + (ticks*g_hal_os_tick.ticks_per_ostick);
   1b9cc:	4b1d      	ldr	r3, [pc, #116]	; (1ba44 <os_tick_idle+0x90>)
   1b9ce:	689c      	ldr	r4, [r3, #8]
   1b9d0:	681a      	ldr	r2, [r3, #0]
   1b9d2:	fb05 4402 	mla	r4, r5, r2, r4
    OS_ASSERT_CRITICAL();
   1b9d6:	f7ff f9ca 	bl	1ad6e <os_arch_in_critical>
   1b9da:	b9d0      	cbnz	r0, 1ba12 <os_tick_idle+0x5e>
   1b9dc:	2300      	movs	r3, #0
   1b9de:	461a      	mov	r2, r3
   1b9e0:	4619      	mov	r1, r3
   1b9e2:	4618      	mov	r0, r3
   1b9e4:	f7fd ff24 	bl	19830 <__assert_func>
    OS_ASSERT_CRITICAL();
   1b9e8:	2300      	movs	r3, #0
   1b9ea:	461a      	mov	r2, r3
   1b9ec:	4619      	mov	r1, r3
   1b9ee:	4618      	mov	r0, r3
   1b9f0:	f7fd ff1e 	bl	19830 <__assert_func>
    assert(y <= 0xffffff);
   1b9f4:	2300      	movs	r3, #0
   1b9f6:	461a      	mov	r2, r3
   1b9f8:	4619      	mov	r1, r3
   1b9fa:	4618      	mov	r0, r3
   1b9fc:	f7fd ff18 	bl	19830 <__assert_func>
        return (result | 0xff800000);
   1ba00:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1ba04:	ea6f 2353 	mvn.w	r3, r3, lsr #9
        if (delta > 2) {
   1ba08:	2b02      	cmp	r3, #2
   1ba0a:	dc13      	bgt.n	1ba34 <os_tick_idle+0x80>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1ba0c:	4b0d      	ldr	r3, [pc, #52]	; (1ba44 <os_tick_idle+0x90>)
   1ba0e:	681c      	ldr	r4, [r3, #0]
   1ba10:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   1ba12:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1ba16:	4b0c      	ldr	r3, [pc, #48]	; (1ba48 <os_tick_idle+0x94>)
   1ba18:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1ba1c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   1ba20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1ba24:	d2e6      	bcs.n	1b9f4 <os_tick_idle+0x40>
    result = x - y;
   1ba26:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   1ba28:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   1ba2c:	d1e8      	bne.n	1ba00 <os_tick_idle+0x4c>
        return (result & 0x007fffff);
   1ba2e:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1ba32:	e7e9      	b.n	1ba08 <os_tick_idle+0x54>
  __ASM volatile ("dsb 0xF":::"memory");
   1ba34:	f3bf 8f4f 	dsb	sy
        nrf52_os_tick_set_ocmp(ocmp);
    }

    __DSB();
    __WFI();
   1ba38:	bf30      	wfi

    if (ticks > 0) {
   1ba3a:	b905      	cbnz	r5, 1ba3e <os_tick_idle+0x8a>
         * Update OS time before anything else when coming out of
         * the tickless regime.
         */
        nrf52_timer_handler();
    }
}
   1ba3c:	bd38      	pop	{r3, r4, r5, pc}
        nrf52_timer_handler();
   1ba3e:	f7ff ff4f 	bl	1b8e0 <nrf52_timer_handler>
}
   1ba42:	e7fb      	b.n	1ba3c <os_tick_idle+0x88>
   1ba44:	2000a674 	.word	0x2000a674
   1ba48:	40011000 	.word	0x40011000

0001ba4c <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   1ba4c:	b570      	push	{r4, r5, r6, lr}
    uint32_t sr;

    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1ba4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1ba52:	fbb3 f3f0 	udiv	r3, r3, r0
   1ba56:	fb00 f303 	mul.w	r3, r0, r3
   1ba5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1ba5e:	d136      	bne.n	1bace <os_tick_init+0x82>
   1ba60:	460c      	mov	r4, r1

    g_hal_os_tick.lastocmp = 0;
   1ba62:	4d1e      	ldr	r5, [pc, #120]	; (1badc <os_tick_init+0x90>)
   1ba64:	2600      	movs	r6, #0
   1ba66:	60ae      	str	r6, [r5, #8]
    g_hal_os_tick.ticks_per_ostick = RTC_FREQ / os_ticks_per_sec;
   1ba68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1ba6c:	fbb3 f0f0 	udiv	r0, r3, r0
   1ba70:	6028      	str	r0, [r5, #0]
    /*
     * The maximum number of OS ticks allowed to elapse during idle is
     * limited to 1/4th the number of timer ticks before the 24-bit counter
     * rolls over.
     */
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
   1ba72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1ba76:	fbb3 f0f0 	udiv	r0, r3, r0
   1ba7a:	6068      	str	r0, [r5, #4]

    /* disable interrupts */
    OS_ENTER_CRITICAL(sr);
   1ba7c:	f7ff f96e 	bl	1ad5c <os_arch_save_sr>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1ba80:	0164      	lsls	r4, r4, #5
   1ba82:	b2e4      	uxtb	r4, r4
   1ba84:	4b16      	ldr	r3, [pc, #88]	; (1bae0 <os_tick_init+0x94>)
   1ba86:	f883 4311 	strb.w	r4, [r3, #785]	; 0x311
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1ba8a:	4a16      	ldr	r2, [pc, #88]	; (1bae4 <os_tick_init+0x98>)
   1ba8c:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1ba8e:	4916      	ldr	r1, [pc, #88]	; (1bae8 <os_tick_init+0x9c>)
   1ba90:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ba94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1ba98:	601a      	str	r2, [r3, #0]

    /*
     * Program the OS_TICK_TIMER to operate at 32KHz and trigger an output
     * compare interrupt at a rate of 'os_ticks_per_sec'.
     */
    OS_TICK_TIMER->TASKS_STOP = 1;
   1ba9a:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   1ba9e:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
   1baa2:	2201      	movs	r2, #1
   1baa4:	605a      	str	r2, [r3, #4]
    OS_TICK_TIMER->TASKS_CLEAR = 1;
   1baa6:	609a      	str	r2, [r3, #8]

    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
   1baa8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1baac:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
    OS_TICK_TIMER->INTENCLR = 0xffffffff;
   1bab0:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    OS_TICK_TIMER->INTENSET = RTC_COMPARE_INT_MASK(OS_TICK_CMPREG);
   1bab4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   1bab8:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1babc:	f8c3 614c 	str.w	r6, [r3, #332]	; 0x14c
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
   1bac0:	6829      	ldr	r1, [r5, #0]
   1bac2:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c

    OS_TICK_TIMER->TASKS_START = 1;
   1bac6:	601a      	str	r2, [r3, #0]

    OS_EXIT_CRITICAL(sr);
   1bac8:	f7ff f94e 	bl	1ad68 <os_arch_restore_sr>
}
   1bacc:	bd70      	pop	{r4, r5, r6, pc}
    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1bace:	2300      	movs	r3, #0
   1bad0:	461a      	mov	r2, r3
   1bad2:	4619      	mov	r1, r3
   1bad4:	4618      	mov	r0, r3
   1bad6:	f7fd feab 	bl	19830 <__assert_func>
   1bada:	bf00      	nop
   1badc:	2000a674 	.word	0x2000a674
   1bae0:	e000e100 	.word	0xe000e100
   1bae4:	e000ed00 	.word	0xe000ed00
   1bae8:	0001b8e1 	.word	0x0001b8e1

0001baec <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   1baec:	2301      	movs	r3, #1
   1baee:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   1baf0:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
   1baf4:	4770      	bx	lr
	...

0001baf8 <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
   1baf8:	b538      	push	{r3, r4, r5, lr}
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
   1bafa:	7883      	ldrb	r3, [r0, #2]
   1bafc:	b393      	cbz	r3, 1bb64 <nrf_timer_set_ocmp+0x6c>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1bafe:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1bb00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1bb04:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
   1bb08:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
   1bb0a:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
   1bb0e:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1bb12:	b11d      	cbz	r5, 1bb1c <nrf_timer_set_ocmp+0x24>
            temp += (1UL << 24);
   1bb14:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
   1bb18:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        }
        temp |= cntr;
   1bb1c:	4323      	orrs	r3, r4
        delta_t = (int32_t)(expiry - temp);
   1bb1e:	1acb      	subs	r3, r1, r3
         * The nrf documentation states that you must set the output
         * compare to 2 greater than the counter to guarantee an interrupt.
         * Since the counter can tick once while we check, we make sure
         * it is greater than 2.
         */
        if (delta_t < 3) {
   1bb20:	2b02      	cmp	r3, #2
   1bb22:	dc0e      	bgt.n	1bb42 <nrf_timer_set_ocmp+0x4a>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1bb24:	7842      	ldrb	r2, [r0, #1]
   1bb26:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1bb28:	2b00      	cmp	r3, #0
   1bb2a:	db15      	blt.n	1bb58 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bb2c:	f002 021f 	and.w	r2, r2, #31
   1bb30:	095b      	lsrs	r3, r3, #5
   1bb32:	2101      	movs	r1, #1
   1bb34:	fa01 f202 	lsl.w	r2, r1, r2
   1bb38:	3340      	adds	r3, #64	; 0x40
   1bb3a:	491b      	ldr	r1, [pc, #108]	; (1bba8 <nrf_timer_set_ocmp+0xb0>)
   1bb3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   1bb40:	e00a      	b.n	1bb58 <nrf_timer_set_ocmp+0x60>
        } else  {
            if (delta_t < (1UL << 24)) {
   1bb42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1bb46:	d208      	bcs.n	1bb5a <nrf_timer_set_ocmp+0x62>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
   1bb48:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1bb4c:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1bb50:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1bb54:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
   1bb58:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
   1bb5a:	f504 0400 	add.w	r4, r4, #8388608	; 0x800000
   1bb5e:	f8c2 4548 	str.w	r4, [r2, #1352]	; 0x548
   1bb62:	e7f5      	b.n	1bb50 <nrf_timer_set_ocmp+0x58>
   1bb64:	460d      	mov	r5, r1
   1bb66:	4604      	mov	r4, r0
        hwtimer = bsptimer->tmr_reg;
   1bb68:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1bb6a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1bb6e:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
   1bb72:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1bb76:	2200      	movs	r2, #0
   1bb78:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1bb7c:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
   1bb80:	f7ff ffb4 	bl	1baec <nrf_read_timer_cntr>
   1bb84:	1b40      	subs	r0, r0, r5
   1bb86:	2800      	cmp	r0, #0
   1bb88:	dbe6      	blt.n	1bb58 <nrf_timer_set_ocmp+0x60>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1bb8a:	7862      	ldrb	r2, [r4, #1]
   1bb8c:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1bb8e:	2b00      	cmp	r3, #0
   1bb90:	dbe2      	blt.n	1bb58 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bb92:	f002 021f 	and.w	r2, r2, #31
   1bb96:	095b      	lsrs	r3, r3, #5
   1bb98:	2101      	movs	r1, #1
   1bb9a:	fa01 f202 	lsl.w	r2, r1, r2
   1bb9e:	3340      	adds	r3, #64	; 0x40
   1bba0:	4901      	ldr	r1, [pc, #4]	; (1bba8 <nrf_timer_set_ocmp+0xb0>)
   1bba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1bba6:	e7d7      	b.n	1bb58 <nrf_timer_set_ocmp+0x60>
   1bba8:	e000e100 	.word	0xe000e100

0001bbac <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1bbac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1bbb0:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1bbb4:	4770      	bx	lr

0001bbb6 <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1bbb6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1bbba:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1bbbe:	4770      	bx	lr

0001bbc0 <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
   1bbc0:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1bbc2:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1bbc4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1bbc8:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
   1bbca:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
   1bbcc:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
   1bbd0:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1bbd4:	b1ad      	cbz	r5, 1bc02 <hal_timer_read_bsptimer+0x42>
        tcntr += (1UL << 24);
   1bbd6:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
   1bbda:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
   1bbdc:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
   1bbe0:	2500      	movs	r5, #0
   1bbe2:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1bbe6:	7840      	ldrb	r0, [r0, #1]
   1bbe8:	b242      	sxtb	r2, r0
  if ((int32_t)(IRQn) >= 0)
   1bbea:	42aa      	cmp	r2, r5
   1bbec:	db09      	blt.n	1bc02 <hal_timer_read_bsptimer+0x42>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bbee:	f000 001f 	and.w	r0, r0, #31
   1bbf2:	0952      	lsrs	r2, r2, #5
   1bbf4:	2501      	movs	r5, #1
   1bbf6:	fa05 f000 	lsl.w	r0, r5, r0
   1bbfa:	3240      	adds	r2, #64	; 0x40
   1bbfc:	4d04      	ldr	r5, [pc, #16]	; (1bc10 <hal_timer_read_bsptimer+0x50>)
   1bbfe:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    }
    tcntr |= low32;
   1bc02:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
   1bc06:	b904      	cbnz	r4, 1bc0a <hal_timer_read_bsptimer+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
   1bc08:	b662      	cpsie	i

    return tcntr;
}
   1bc0a:	bc30      	pop	{r4, r5}
   1bc0c:	4770      	bx	lr
   1bc0e:	bf00      	nop
   1bc10:	e000e100 	.word	0xe000e100

0001bc14 <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
   1bc14:	b570      	push	{r4, r5, r6, lr}
   1bc16:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1bc18:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1bc1c:	b672      	cpsid	i
   1bc1e:	e013      	b.n	1bc48 <hal_timer_chk_queue+0x34>
             * If we are within 3 ticks of RTC, we wont be able to set compare.
             * Thus, we have to service this timer early.
             */
            delta = -3;
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1bc20:	6928      	ldr	r0, [r5, #16]
   1bc22:	f7ff ff63 	bl	1baec <nrf_read_timer_cntr>
            delta = 0;
   1bc26:	2200      	movs	r2, #0
        }
        if ((int32_t)(tcntr - timer->expiry) >= delta) {
   1bc28:	68e3      	ldr	r3, [r4, #12]
   1bc2a:	1ac0      	subs	r0, r0, r3
   1bc2c:	4290      	cmp	r0, r2
   1bc2e:	db19      	blt.n	1bc64 <hal_timer_chk_queue+0x50>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1bc30:	6923      	ldr	r3, [r4, #16]
   1bc32:	b1a3      	cbz	r3, 1bc5e <hal_timer_chk_queue+0x4a>
   1bc34:	6962      	ldr	r2, [r4, #20]
   1bc36:	615a      	str	r2, [r3, #20]
   1bc38:	6963      	ldr	r3, [r4, #20]
   1bc3a:	6922      	ldr	r2, [r4, #16]
   1bc3c:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   1bc3e:	2300      	movs	r3, #0
   1bc40:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   1bc42:	6863      	ldr	r3, [r4, #4]
   1bc44:	68a0      	ldr	r0, [r4, #8]
   1bc46:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
   1bc48:	696c      	ldr	r4, [r5, #20]
   1bc4a:	b15c      	cbz	r4, 1bc64 <hal_timer_chk_queue+0x50>
        if (bsptimer->tmr_rtc) {
   1bc4c:	78ab      	ldrb	r3, [r5, #2]
   1bc4e:	2b00      	cmp	r3, #0
   1bc50:	d0e6      	beq.n	1bc20 <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
   1bc52:	4628      	mov	r0, r5
   1bc54:	f7ff ffb4 	bl	1bbc0 <hal_timer_read_bsptimer>
            delta = -3;
   1bc58:	f06f 0202 	mvn.w	r2, #2
   1bc5c:	e7e4      	b.n	1bc28 <hal_timer_chk_queue+0x14>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1bc5e:	6963      	ldr	r3, [r4, #20]
   1bc60:	61ab      	str	r3, [r5, #24]
   1bc62:	e7e9      	b.n	1bc38 <hal_timer_chk_queue+0x24>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
   1bc64:	696b      	ldr	r3, [r5, #20]
    if (timer) {
   1bc66:	b133      	cbz	r3, 1bc76 <hal_timer_chk_queue+0x62>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   1bc68:	68d9      	ldr	r1, [r3, #12]
   1bc6a:	4628      	mov	r0, r5
   1bc6c:	f7ff ff44 	bl	1baf8 <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   1bc70:	b906      	cbnz	r6, 1bc74 <hal_timer_chk_queue+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   1bc72:	b662      	cpsie	i
}
   1bc74:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
   1bc76:	78ab      	ldrb	r3, [r5, #2]
   1bc78:	b11b      	cbz	r3, 1bc82 <hal_timer_chk_queue+0x6e>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   1bc7a:	6928      	ldr	r0, [r5, #16]
   1bc7c:	f7ff ff9b 	bl	1bbb6 <nrf_rtc_disable_ocmp>
   1bc80:	e7f6      	b.n	1bc70 <hal_timer_chk_queue+0x5c>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   1bc82:	6928      	ldr	r0, [r5, #16]
   1bc84:	f7ff ff92 	bl	1bbac <nrf_timer_disable_ocmp>
   1bc88:	e7f2      	b.n	1bc70 <hal_timer_chk_queue+0x5c>

0001bc8a <hal_timer_irq_handler>:
#if (MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2) || \
     MYNEWT_VAL(TIMER_3) || MYNEWT_VAL(TIMER_4))

static void
hal_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
   1bc8a:	b510      	push	{r4, lr}
    NRF_TIMER_Type *hwtimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    hwtimer = bsptimer->tmr_reg;
   1bc8c:	6904      	ldr	r4, [r0, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1bc8e:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    if (compare) {
   1bc92:	b113      	cbz	r3, 1bc9a <hal_timer_irq_handler+0x10>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1bc94:	2300      	movs	r3, #0
   1bc96:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    }

    /* XXX: make these stats? */
    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
   1bc9a:	6883      	ldr	r3, [r0, #8]
   1bc9c:	3301      	adds	r3, #1
   1bc9e:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
   1bca0:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
   1bca4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   1bca8:	d100      	bne.n	1bcac <hal_timer_irq_handler+0x22>
        /* XXX: Recommended by nordic to make sure interrupts are cleared */
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    }

    os_trace_isr_exit();
}
   1bcaa:	bd10      	pop	{r4, pc}
        hal_timer_chk_queue(bsptimer);
   1bcac:	f7ff ffb2 	bl	1bc14 <hal_timer_chk_queue>
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1bcb0:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
}
   1bcb4:	e7f9      	b.n	1bcaa <hal_timer_irq_handler+0x20>
	...

0001bcb8 <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
   1bcb8:	b508      	push	{r3, lr}
    hal_timer_irq_handler(&nrf52_hal_timer0);
   1bcba:	4802      	ldr	r0, [pc, #8]	; (1bcc4 <nrf52_timer0_irq_handler+0xc>)
   1bcbc:	f7ff ffe5 	bl	1bc8a <hal_timer_irq_handler>
}
   1bcc0:	bd08      	pop	{r3, pc}
   1bcc2:	bf00      	nop
   1bcc4:	2000a680 	.word	0x2000a680

0001bcc8 <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1bcc8:	2805      	cmp	r0, #5
   1bcca:	dc1c      	bgt.n	1bd06 <hal_timer_init+0x3e>
   1bccc:	4b12      	ldr	r3, [pc, #72]	; (1bd18 <hal_timer_init+0x50>)
   1bcce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1bcd2:	b1d3      	cbz	r3, 1bd0a <hal_timer_init+0x42>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
   1bcd4:	781a      	ldrb	r2, [r3, #0]
   1bcd6:	b9d2      	cbnz	r2, 1bd0e <hal_timer_init+0x46>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
   1bcd8:	b9d8      	cbnz	r0, 1bd12 <hal_timer_init+0x4a>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
   1bcda:	4a10      	ldr	r2, [pc, #64]	; (1bd1c <hal_timer_init+0x54>)
   1bcdc:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
   1bcde:	2208      	movs	r2, #8
   1bce0:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bce2:	4b0f      	ldr	r3, [pc, #60]	; (1bd20 <hal_timer_init+0x58>)
   1bce4:	f44f 7280 	mov.w	r2, #256	; 0x100
   1bce8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   1bcec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1bcf0:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1bcf4:	22e0      	movs	r2, #224	; 0xe0
   1bcf6:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1bcfa:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   1bcfe:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1bd00:	4a08      	ldr	r2, [pc, #32]	; (1bd24 <hal_timer_init+0x5c>)
   1bd02:	661a      	str	r2, [r3, #96]	; 0x60
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
   1bd04:	4770      	bx	lr

err:
    return rc;
   1bd06:	2016      	movs	r0, #22
   1bd08:	4770      	bx	lr
   1bd0a:	2016      	movs	r0, #22
   1bd0c:	4770      	bx	lr
   1bd0e:	2016      	movs	r0, #22
   1bd10:	4770      	bx	lr
   1bd12:	2016      	movs	r0, #22
}
   1bd14:	4770      	bx	lr
   1bd16:	bf00      	nop
   1bd18:	0002102c 	.word	0x0002102c
   1bd1c:	40008000 	.word	0x40008000
   1bd20:	e000e100 	.word	0xe000e100
   1bd24:	0001bcb9 	.word	0x0001bcb9

0001bd28 <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1bd28:	2805      	cmp	r0, #5
   1bd2a:	dc65      	bgt.n	1bdf8 <hal_timer_config+0xd0>
   1bd2c:	4b39      	ldr	r3, [pc, #228]	; (1be14 <hal_timer_config+0xec>)
   1bd2e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1bd32:	2800      	cmp	r0, #0
   1bd34:	d062      	beq.n	1bdfc <hal_timer_config+0xd4>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
   1bd36:	4b38      	ldr	r3, [pc, #224]	; (1be18 <hal_timer_config+0xf0>)
   1bd38:	fbb3 f1f1 	udiv	r1, r3, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1bd3c:	7803      	ldrb	r3, [r0, #0]
   1bd3e:	2b00      	cmp	r3, #0
   1bd40:	d15e      	bne.n	1be00 <hal_timer_config+0xd8>
   1bd42:	2900      	cmp	r1, #0
   1bd44:	d05e      	beq.n	1be04 <hal_timer_config+0xdc>
   1bd46:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1bd4a:	d85d      	bhi.n	1be08 <hal_timer_config+0xe0>
        (bsptimer->tmr_reg == NULL)) {
   1bd4c:	6902      	ldr	r2, [r0, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1bd4e:	2a00      	cmp	r2, #0
   1bd50:	d05c      	beq.n	1be0c <hal_timer_config+0xe4>
{
   1bd52:	b430      	push	{r4, r5}
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
   1bd54:	2901      	cmp	r1, #1
   1bd56:	d013      	beq.n	1bd80 <hal_timer_config+0x58>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1bd58:	2301      	movs	r3, #1
   1bd5a:	2b09      	cmp	r3, #9
   1bd5c:	d810      	bhi.n	1bd80 <hal_timer_config+0x58>
            if (div <= (1 << prescaler)) {
   1bd5e:	2201      	movs	r2, #1
   1bd60:	409a      	lsls	r2, r3
   1bd62:	428a      	cmp	r2, r1
   1bd64:	d202      	bcs.n	1bd6c <hal_timer_config+0x44>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1bd66:	3301      	adds	r3, #1
   1bd68:	b2db      	uxtb	r3, r3
   1bd6a:	e7f6      	b.n	1bd5a <hal_timer_config+0x32>
                min_delta = div - (1 << (prescaler - 1));
   1bd6c:	1e5c      	subs	r4, r3, #1
   1bd6e:	2501      	movs	r5, #1
   1bd70:	fa05 f404 	lsl.w	r4, r5, r4
   1bd74:	1b0c      	subs	r4, r1, r4
                max_delta = (1 << prescaler) - div;
   1bd76:	1a51      	subs	r1, r2, r1
                if (min_delta < max_delta) {
   1bd78:	428c      	cmp	r4, r1
   1bd7a:	d201      	bcs.n	1bd80 <hal_timer_config+0x58>
                    prescaler -= 1;
   1bd7c:	3b01      	subs	r3, #1
   1bd7e:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
   1bd80:	4a25      	ldr	r2, [pc, #148]	; (1be18 <hal_timer_config+0xf0>)
   1bd82:	411a      	asrs	r2, r3
   1bd84:	60c2      	str	r2, [r0, #12]
    bsptimer->tmr_enabled = 1;
   1bd86:	2201      	movs	r2, #1
   1bd88:	7002      	strb	r2, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1bd8a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1bd8e:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
   1bd90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1bd94:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
   1bd98:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
   1bd9c:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
   1bda0:	d00c      	beq.n	1bdbc <hal_timer_config+0x94>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   1bda2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1bda6:	2100      	movs	r1, #0
   1bda8:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   1bdac:	2101      	movs	r1, #1
   1bdae:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
   1bdb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1bdb4:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   1bdb8:	2a00      	cmp	r2, #0
   1bdba:	d0f9      	beq.n	1bdb0 <hal_timer_config+0x88>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
   1bdbc:	6902      	ldr	r2, [r0, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
   1bdbe:	2101      	movs	r1, #1
   1bdc0:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
   1bdc2:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
   1bdc4:	2500      	movs	r5, #0
   1bdc6:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
   1bdca:	2503      	movs	r5, #3
   1bdcc:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
   1bdd0:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
   1bdd4:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   1bdd6:	7842      	ldrb	r2, [r0, #1]
   1bdd8:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1bdda:	2b00      	cmp	r3, #0
   1bddc:	db07      	blt.n	1bdee <hal_timer_config+0xc6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bdde:	f002 021f 	and.w	r2, r2, #31
   1bde2:	095b      	lsrs	r3, r3, #5
   1bde4:	fa01 f202 	lsl.w	r2, r1, r2
   1bde8:	490c      	ldr	r1, [pc, #48]	; (1be1c <hal_timer_config+0xf4>)
   1bdea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
   1bdee:	b97c      	cbnz	r4, 1be10 <hal_timer_config+0xe8>
  __ASM volatile ("cpsie i" : : : "memory");
   1bdf0:	b662      	cpsie	i

    return 0;
   1bdf2:	2000      	movs	r0, #0

err:
    return rc;
}
   1bdf4:	bc30      	pop	{r4, r5}
   1bdf6:	4770      	bx	lr
    return rc;
   1bdf8:	2016      	movs	r0, #22
   1bdfa:	4770      	bx	lr
   1bdfc:	2016      	movs	r0, #22
   1bdfe:	4770      	bx	lr
   1be00:	2016      	movs	r0, #22
   1be02:	4770      	bx	lr
   1be04:	2016      	movs	r0, #22
   1be06:	4770      	bx	lr
   1be08:	2016      	movs	r0, #22
   1be0a:	4770      	bx	lr
   1be0c:	2016      	movs	r0, #22
}
   1be0e:	4770      	bx	lr
    return 0;
   1be10:	2000      	movs	r0, #0
   1be12:	e7ef      	b.n	1bdf4 <hal_timer_config+0xcc>
   1be14:	0002102c 	.word	0x0002102c
   1be18:	00f42400 	.word	0x00f42400
   1be1c:	e000e100 	.word	0xe000e100

0001be20 <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
   1be20:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1be22:	2805      	cmp	r0, #5
   1be24:	dc0c      	bgt.n	1be40 <hal_timer_read+0x20>
   1be26:	4b09      	ldr	r3, [pc, #36]	; (1be4c <hal_timer_read+0x2c>)
   1be28:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1be2c:	b140      	cbz	r0, 1be40 <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
   1be2e:	7883      	ldrb	r3, [r0, #2]
   1be30:	b91b      	cbnz	r3, 1be3a <hal_timer_read+0x1a>
        tcntr = hal_timer_read_bsptimer(bsptimer);
    } else {
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1be32:	6900      	ldr	r0, [r0, #16]
   1be34:	f7ff fe5a 	bl	1baec <nrf_read_timer_cntr>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
   1be38:	bd08      	pop	{r3, pc}
        tcntr = hal_timer_read_bsptimer(bsptimer);
   1be3a:	f7ff fec1 	bl	1bbc0 <hal_timer_read_bsptimer>
   1be3e:	e7fb      	b.n	1be38 <hal_timer_read+0x18>
    assert(0);
   1be40:	2300      	movs	r3, #0
   1be42:	461a      	mov	r2, r3
   1be44:	4619      	mov	r1, r3
   1be46:	4618      	mov	r0, r3
   1be48:	f7fd fcf2 	bl	19830 <__assert_func>
   1be4c:	0002102c 	.word	0x0002102c

0001be50 <nrf52_periph_create_timers>:
};
#endif

static void
nrf52_periph_create_timers(void)
{
   1be50:	b508      	push	{r3, lr}
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
   1be52:	2100      	movs	r1, #0
   1be54:	4608      	mov	r0, r1
   1be56:	f7ff ff37 	bl	1bcc8 <hal_timer_init>
    assert(rc == 0);
   1be5a:	b920      	cbnz	r0, 1be66 <nrf52_periph_create_timers+0x16>
    rc = hal_timer_init(5, NULL);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   1be5c:	4808      	ldr	r0, [pc, #32]	; (1be80 <nrf52_periph_create_timers+0x30>)
   1be5e:	f7fd ff11 	bl	19c84 <os_cputime_init>
    assert(rc == 0);
   1be62:	b930      	cbnz	r0, 1be72 <nrf52_periph_create_timers+0x22>
#endif
}
   1be64:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1be66:	2300      	movs	r3, #0
   1be68:	461a      	mov	r2, r3
   1be6a:	4619      	mov	r1, r3
   1be6c:	4618      	mov	r0, r3
   1be6e:	f7fd fcdf 	bl	19830 <__assert_func>
    assert(rc == 0);
   1be72:	2300      	movs	r3, #0
   1be74:	461a      	mov	r2, r3
   1be76:	4619      	mov	r1, r3
   1be78:	4618      	mov	r0, r3
   1be7a:	f7fd fcd9 	bl	19830 <__assert_func>
   1be7e:	bf00      	nop
   1be80:	000f4240 	.word	0x000f4240

0001be84 <nrf52_periph_create_i2c>:
#endif
}

static void
nrf52_periph_create_i2c(void)
{
   1be84:	b508      	push	{r3, lr}
    rc = bus_i2c_hal_dev_create("i2c1", &i2c1_bus,
                                (struct bus_i2c_dev_cfg *)&i2c1_cfg);
    assert(rc == 0);
#endif
#else
    rc = hal_i2c_init(1, (void *)&hal_i2c1_cfg);
   1be86:	4906      	ldr	r1, [pc, #24]	; (1bea0 <nrf52_periph_create_i2c+0x1c>)
   1be88:	2001      	movs	r0, #1
   1be8a:	f7fd f82b 	bl	18ee4 <hal_i2c_init>
    assert(rc == 0);
   1be8e:	b900      	cbnz	r0, 1be92 <nrf52_periph_create_i2c+0xe>
#endif
#endif
}
   1be90:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1be92:	2300      	movs	r3, #0
   1be94:	461a      	mov	r2, r3
   1be96:	4619      	mov	r1, r3
   1be98:	4618      	mov	r0, r3
   1be9a:	f7fd fcc9 	bl	19830 <__assert_func>
   1be9e:	bf00      	nop
   1bea0:	00021044 	.word	0x00021044

0001bea4 <nrf52_periph_create_spi>:

static void
nrf52_periph_create_spi(void)
{
   1bea4:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BUS_DRIVER_PRESENT)
    rc = bus_spi_hal_dev_create("spi0",
                                &spi0_bus, (struct bus_spi_dev_cfg *)&spi0_cfg);
    assert(rc == 0);
#else
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
   1bea6:	2200      	movs	r2, #0
   1bea8:	4905      	ldr	r1, [pc, #20]	; (1bec0 <nrf52_periph_create_spi+0x1c>)
   1beaa:	4610      	mov	r0, r2
   1beac:	f7fd fb4e 	bl	1954c <hal_spi_init>
    assert(rc == 0);
   1beb0:	b900      	cbnz	r0, 1beb4 <nrf52_periph_create_spi+0x10>
#endif
#if MYNEWT_VAL(SPI_2_SLAVE)
    rc = hal_spi_init(2, (void *)&os_bsp_spi2s_cfg, HAL_SPI_TYPE_SLAVE);
    assert(rc == 0);
#endif
}
   1beb2:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1beb4:	2300      	movs	r3, #0
   1beb6:	461a      	mov	r2, r3
   1beb8:	4619      	mov	r1, r3
   1beba:	4618      	mov	r0, r3
   1bebc:	f7fd fcb8 	bl	19830 <__assert_func>
   1bec0:	00021050 	.word	0x00021050

0001bec4 <nrf52_periph_create>:

void
nrf52_periph_create(void)
{
   1bec4:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
   1bec6:	f7ff ffc3 	bl	1be50 <nrf52_periph_create_timers>
    nrf52_periph_create_adc();
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
   1beca:	f7ff ffdb 	bl	1be84 <nrf52_periph_create_i2c>
    nrf52_periph_create_spi();
   1bece:	f7ff ffe9 	bl	1bea4 <nrf52_periph_create_spi>
}
   1bed2:	bd08      	pop	{r3, pc}

0001bed4 <sensor_dev_create>:
    assert(rc == 0);

    rc = config_icp10114_sensor();
    assert(rc == 0);
#endif
}
   1bed4:	4770      	bx	lr
	...

0001bed8 <sensor_mgr_remove>:
}

static void
sensor_mgr_remove(struct sensor *sensor)
{
    SLIST_REMOVE(&sensor_mgr.mgr_sensor_list, sensor, sensor, s_next);
   1bed8:	4b08      	ldr	r3, [pc, #32]	; (1befc <sensor_mgr_remove+0x24>)
   1beda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1bedc:	4282      	cmp	r2, r0
   1bede:	d104      	bne.n	1beea <sensor_mgr_remove+0x12>
   1bee0:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
   1bee4:	631a      	str	r2, [r3, #48]	; 0x30
   1bee6:	4770      	bx	lr
   1bee8:	461a      	mov	r2, r3
   1beea:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1beee:	4283      	cmp	r3, r0
   1bef0:	d1fa      	bne.n	1bee8 <sensor_mgr_remove+0x10>
   1bef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1bef6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
   1befa:	4770      	bx	lr
   1befc:	2000a6a0 	.word	0x2000a6a0

0001bf00 <sensor_mgr_insert>:

static void
sensor_mgr_insert(struct sensor *sensor)
{
   1bf00:	b410      	push	{r4}
    struct sensor *cursor, *prev;

    prev = cursor = NULL;
    if (!sensor->s_poll_rate) {
   1bf02:	6a03      	ldr	r3, [r0, #32]
   1bf04:	b993      	cbnz	r3, 1bf2c <sensor_mgr_insert+0x2c>
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1bf06:	4b15      	ldr	r3, [pc, #84]	; (1bf5c <sensor_mgr_insert+0x5c>)
   1bf08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1bf0a:	2100      	movs	r1, #0
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1bf0c:	e002      	b.n	1bf14 <sensor_mgr_insert+0x14>
            prev = cursor;
   1bf0e:	4619      	mov	r1, r3
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1bf10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1bf14:	2b00      	cmp	r3, #0
   1bf16:	d1fa      	bne.n	1bf0e <sensor_mgr_insert+0xe>

        prev = cursor;
    }

insert:
    if (prev == NULL) {
   1bf18:	b1c9      	cbz	r1, 1bf4e <sensor_mgr_insert+0x4e>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
    } else {
        SLIST_INSERT_AFTER(prev, sensor, s_next);
   1bf1a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
   1bf1e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
   1bf22:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
    }
}
   1bf26:	f85d 4b04 	ldr.w	r4, [sp], #4
   1bf2a:	4770      	bx	lr
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1bf2c:	4b0b      	ldr	r3, [pc, #44]	; (1bf5c <sensor_mgr_insert+0x5c>)
   1bf2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1bf30:	2100      	movs	r1, #0
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1bf32:	2b00      	cmp	r3, #0
   1bf34:	d0f0      	beq.n	1bf18 <sensor_mgr_insert+0x18>
        if (!cursor->s_poll_rate) {
   1bf36:	6a1a      	ldr	r2, [r3, #32]
   1bf38:	2a00      	cmp	r2, #0
   1bf3a:	d0ed      	beq.n	1bf18 <sensor_mgr_insert+0x18>
        if (OS_TIME_TICK_LT(sensor->s_next_run, cursor->s_next_run)) {
   1bf3c:	6a42      	ldr	r2, [r0, #36]	; 0x24
   1bf3e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   1bf40:	1b12      	subs	r2, r2, r4
   1bf42:	2a00      	cmp	r2, #0
   1bf44:	dbe8      	blt.n	1bf18 <sensor_mgr_insert+0x18>
        prev = cursor;
   1bf46:	4619      	mov	r1, r3
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1bf48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1bf4c:	e7f1      	b.n	1bf32 <sensor_mgr_insert+0x32>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
   1bf4e:	4b03      	ldr	r3, [pc, #12]	; (1bf5c <sensor_mgr_insert+0x5c>)
   1bf50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1bf52:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   1bf56:	6318      	str	r0, [r3, #48]	; 0x30
   1bf58:	e7e5      	b.n	1bf26 <sensor_mgr_insert+0x26>
   1bf5a:	bf00      	nop
   1bf5c:	2000a6a0 	.word	0x2000a6a0

0001bf60 <sensor_type_traits_empty>:
}

static uint8_t
sensor_type_traits_empty(struct sensor *sensor)
{
    return SLIST_EMPTY(&sensor->s_type_traits_list);
   1bf60:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
}
   1bf62:	fab0 f080 	clz	r0, r0
   1bf66:	0940      	lsrs	r0, r0, #5
   1bf68:	4770      	bx	lr
	...

0001bf6c <sensor_mgr_evq_set>:
}

static void
sensor_mgr_evq_set(struct os_eventq *evq)
{
    sensor_mgr.mgr_eventq = evq;
   1bf6c:	4b01      	ldr	r3, [pc, #4]	; (1bf74 <sensor_mgr_evq_set+0x8>)
   1bf6e:	62d8      	str	r0, [r3, #44]	; 0x2c
}
   1bf70:	4770      	bx	lr
   1bf72:	bf00      	nop
   1bf74:	2000a6a0 	.word	0x2000a6a0

0001bf78 <sensor_mgr_match_bytype>:
 *
 * @return 1 if matches, 0 if it doesn't match.
 */
int
sensor_mgr_match_bytype(struct sensor *sensor, void *arg)
{
   1bf78:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
     * sensor, and type is the bitmask we're searching for. We also look at
     * the mask as the driver might be configured to work in a mode where only
     * some of the sensors are supported but not all. Compare the three,
     * and if there is a match, return 1. If it is not supported, return 0.
     */
    return (*type & sensor->s_types & sensor->s_mask) ? 1 : 0;
   1bf7c:	e9d1 2300 	ldrd	r2, r3, [r1]
   1bf80:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1bf84:	ea02 0b04 	and.w	fp, r2, r4
   1bf88:	ea03 0c05 	and.w	ip, r3, r5
   1bf8c:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
   1bf90:	ea0b 0200 	and.w	r2, fp, r0
   1bf94:	ea0c 0301 	and.w	r3, ip, r1
   1bf98:	4313      	orrs	r3, r2
}
   1bf9a:	bf14      	ite	ne
   1bf9c:	2001      	movne	r0, #1
   1bf9e:	2000      	moveq	r0, #0
   1bfa0:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1bfa4:	4770      	bx	lr

0001bfa6 <sensor_read_data_func>:
}

static int
sensor_read_data_func(struct sensor *sensor, void *arg, void *data,
                      sensor_type_t type)
{
   1bfa6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bfaa:	b083      	sub	sp, #12
   1bfac:	4605      	mov	r5, r0
   1bfae:	4689      	mov	r9, r1
   1bfb0:	4690      	mov	r8, r2
   1bfb2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    struct sensor_listener *listener;
    struct sensor_read_ctx *ctx;

    ctx = (struct sensor_read_ctx *) arg;

    if ((uint8_t)(uintptr_t)(ctx->user_arg) != SENSOR_IGN_LISTENER) {
   1bfb6:	790b      	ldrb	r3, [r1, #4]
   1bfb8:	2b01      	cmp	r3, #1
   1bfba:	d013      	beq.n	1bfe4 <sensor_read_data_func+0x3e>
        /* Notify all listeners first */
        SLIST_FOREACH(listener, &sensor->s_listener_list, sl_next) {
   1bfbc:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
   1bfbe:	e000      	b.n	1bfc2 <sensor_read_data_func+0x1c>
   1bfc0:	6924      	ldr	r4, [r4, #16]
   1bfc2:	b17c      	cbz	r4, 1bfe4 <sensor_read_data_func+0x3e>
            if (listener->sl_sensor_type & type) {
   1bfc4:	e9d4 0100 	ldrd	r0, r1, [r4]
   1bfc8:	ea00 0206 	and.w	r2, r0, r6
   1bfcc:	ea01 0307 	and.w	r3, r1, r7
   1bfd0:	4313      	orrs	r3, r2
   1bfd2:	d0f5      	beq.n	1bfc0 <sensor_read_data_func+0x1a>
                listener->sl_func(sensor, listener->sl_arg, data, type);
   1bfd4:	68a3      	ldr	r3, [r4, #8]
   1bfd6:	68e1      	ldr	r1, [r4, #12]
   1bfd8:	e9cd 6700 	strd	r6, r7, [sp]
   1bfdc:	4642      	mov	r2, r8
   1bfde:	4628      	mov	r0, r5
   1bfe0:	4798      	blx	r3
   1bfe2:	e7ed      	b.n	1bfc0 <sensor_read_data_func+0x1a>
            }
        }
    }

    /* Call data function */
    if (ctx->user_func != NULL) {
   1bfe4:	f8d9 3000 	ldr.w	r3, [r9]
   1bfe8:	b14b      	cbz	r3, 1bffe <sensor_read_data_func+0x58>
        return (ctx->user_func(sensor, ctx->user_arg, data, type));
   1bfea:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1bfee:	e9cd 6700 	strd	r6, r7, [sp]
   1bff2:	4642      	mov	r2, r8
   1bff4:	4628      	mov	r0, r5
   1bff6:	4798      	blx	r3
    }

    return (0);
}
   1bff8:	b003      	add	sp, #12
   1bffa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (0);
   1bffe:	2000      	movs	r0, #0
   1c000:	e7fa      	b.n	1bff8 <sensor_read_data_func+0x52>
	...

0001c004 <sensor_base_ts_update_event>:
{
   1c004:	b530      	push	{r4, r5, lr}
   1c006:	b087      	sub	sp, #28
    ticks = os_time_get();
   1c008:	f7fe fe30 	bl	1ac6c <os_time_get>
   1c00c:	4604      	mov	r4, r0
    rc = os_gettimeofday(&ostv, &ostz);
   1c00e:	a901      	add	r1, sp, #4
   1c010:	a802      	add	r0, sp, #8
   1c012:	f7fe fe65 	bl	1ace0 <os_gettimeofday>
    if (rc) {
   1c016:	b138      	cbz	r0, 1c028 <sensor_base_ts_update_event+0x24>
        ticks += OS_TICKS_PER_SEC * 600;
   1c018:	f504 3496 	add.w	r4, r4, #76800	; 0x12c00
    os_callout_reset(&st_up_osco, ticks);
   1c01c:	4621      	mov	r1, r4
   1c01e:	4809      	ldr	r0, [pc, #36]	; (1c044 <sensor_base_ts_update_event+0x40>)
   1c020:	f7fd fdac 	bl	19b7c <os_callout_reset>
}
   1c024:	b007      	add	sp, #28
   1c026:	bd30      	pop	{r4, r5, pc}
    ticks += OS_TICKS_PER_SEC * 2000;
   1c028:	f504 347a 	add.w	r4, r4, #256000	; 0x3e800
    sensor_base_ts.st_ostv = ostv;
   1c02c:	4d06      	ldr	r5, [pc, #24]	; (1c048 <sensor_base_ts_update_event+0x44>)
   1c02e:	ab06      	add	r3, sp, #24
   1c030:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1c034:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1c038:	9b01      	ldr	r3, [sp, #4]
   1c03a:	612b      	str	r3, [r5, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1c03c:	f7fd fe28 	bl	19c90 <os_cputime_get32>
   1c040:	6168      	str	r0, [r5, #20]
   1c042:	e7eb      	b.n	1c01c <sensor_base_ts_update_event+0x18>
   1c044:	2000a6d4 	.word	0x2000a6d4
   1c048:	2000a6f8 	.word	0x2000a6f8

0001c04c <sensor_up_timestamp>:
    assert(rc == 0);
}

static void
sensor_up_timestamp(struct sensor *sensor)
{
   1c04c:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   1c050:	4604      	mov	r4, r0
    uint32_t curr_ts_ticks;
    uint32_t ts;

    curr_ts_ticks = os_cputime_get32();
   1c052:	f7fd fe1d 	bl	19c90 <os_cputime_get32>

    ts = os_cputime_ticks_to_usecs(curr_ts_ticks -
   1c056:	4a0e      	ldr	r2, [pc, #56]	; (1c090 <sensor_up_timestamp+0x44>)
   1c058:	6955      	ldr	r5, [r2, #20]
   1c05a:	1b43      	subs	r3, r0, r5
             sensor_base_ts.st_cputime);

    /* Updating cputime */
    sensor_base_ts.st_cputime = sensor->s_sts.st_cputime = curr_ts_ticks;
   1c05c:	6460      	str	r0, [r4, #68]	; 0x44
   1c05e:	6150      	str	r0, [r2, #20]

    /* Updating seconds */
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1c060:	e9d2 0100 	ldrd	r0, r1, [r2]
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1c064:	6895      	ldr	r5, [r2, #8]
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1c066:	441d      	add	r5, r3
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1c068:	4b0a      	ldr	r3, [pc, #40]	; (1c094 <sensor_up_timestamp+0x48>)
   1c06a:	fba3 c305 	umull	ip, r3, r3, r5
   1c06e:	0c9b      	lsrs	r3, r3, #18
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1c070:	eb10 0b03 	adds.w	fp, r0, r3
   1c074:	f141 0c00 	adc.w	ip, r1, #0
   1c078:	e9c2 bc00 	strd	fp, ip, [r2]
    sensor->s_sts.st_ostv.tv_sec = sensor_base_ts.st_ostv.tv_sec;
   1c07c:	e9c4 bc0c 	strd	fp, ip, [r4, #48]	; 0x30

    /* Updating Micro seconds */
    sensor_base_ts.st_ostv.tv_usec  =
        (sensor_base_ts.st_ostv.tv_usec + ts)%1000000;
   1c080:	4905      	ldr	r1, [pc, #20]	; (1c098 <sensor_up_timestamp+0x4c>)
   1c082:	fb01 5113 	mls	r1, r1, r3, r5
    sensor_base_ts.st_ostv.tv_usec  =
   1c086:	6091      	str	r1, [r2, #8]
    sensor->s_sts.st_ostv.tv_usec = sensor_base_ts.st_ostv.tv_usec;
   1c088:	63a1      	str	r1, [r4, #56]	; 0x38

}
   1c08a:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   1c08e:	bf00      	nop
   1c090:	2000a6f8 	.word	0x2000a6f8
   1c094:	431bde83 	.word	0x431bde83
   1c098:	000f4240 	.word	0x000f4240

0001c09c <sensor_mgr_lock>:
{
   1c09c:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor_mgr.mgr_lock, OS_TIMEOUT_NEVER);
   1c09e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c0a2:	4804      	ldr	r0, [pc, #16]	; (1c0b4 <sensor_mgr_lock+0x18>)
   1c0a4:	f7fe fa5c 	bl	1a560 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1c0a8:	b108      	cbz	r0, 1c0ae <sensor_mgr_lock+0x12>
   1c0aa:	2809      	cmp	r0, #9
   1c0ac:	d000      	beq.n	1c0b0 <sensor_mgr_lock+0x14>
}
   1c0ae:	bd08      	pop	{r3, pc}
        return (0);
   1c0b0:	2000      	movs	r0, #0
   1c0b2:	e7fc      	b.n	1c0ae <sensor_mgr_lock+0x12>
   1c0b4:	2000a6a0 	.word	0x2000a6a0

0001c0b8 <sensor_mgr_unlock>:
{
   1c0b8:	b508      	push	{r3, lr}
    (void) os_mutex_release(&sensor_mgr.mgr_lock);
   1c0ba:	4802      	ldr	r0, [pc, #8]	; (1c0c4 <sensor_mgr_unlock+0xc>)
   1c0bc:	f7fe f9f4 	bl	1a4a8 <os_mutex_release>
}
   1c0c0:	bd08      	pop	{r3, pc}
   1c0c2:	bf00      	nop
   1c0c4:	2000a6a0 	.word	0x2000a6a0

0001c0c8 <sensor_mgr_evq_get>:
}
   1c0c8:	4b01      	ldr	r3, [pc, #4]	; (1c0d0 <sensor_mgr_evq_get+0x8>)
   1c0ca:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   1c0cc:	4770      	bx	lr
   1c0ce:	bf00      	nop
   1c0d0:	2000a6a0 	.word	0x2000a6a0

0001c0d4 <sensor_mgr_init>:
{
   1c0d4:	b570      	push	{r4, r5, r6, lr}
   1c0d6:	b088      	sub	sp, #32
    sensor_mgr_evq_set(os_eventq_dflt_get());
   1c0d8:	f7fd ff68 	bl	19fac <os_eventq_dflt_get>
   1c0dc:	f7ff ff46 	bl	1bf6c <sensor_mgr_evq_set>
    rc = os_mempool_init(&sensor_notify_evt_pool,
   1c0e0:	4b1c      	ldr	r3, [pc, #112]	; (1c154 <sensor_mgr_init+0x80>)
   1c0e2:	9300      	str	r3, [sp, #0]
   1c0e4:	4b1c      	ldr	r3, [pc, #112]	; (1c158 <sensor_mgr_init+0x84>)
   1c0e6:	2218      	movs	r2, #24
   1c0e8:	2105      	movs	r1, #5
   1c0ea:	481c      	ldr	r0, [pc, #112]	; (1c15c <sensor_mgr_init+0x88>)
   1c0ec:	f7fe f8e8 	bl	1a2c0 <os_mempool_init>
    assert(rc == OS_OK);
   1c0f0:	bb50      	cbnz	r0, 1c148 <sensor_mgr_init+0x74>
    os_callout_init(&sensor_mgr.mgr_wakeup_callout, sensor_mgr_evq_get(),
   1c0f2:	f7ff ffe9 	bl	1c0c8 <sensor_mgr_evq_get>
   1c0f6:	4e1a      	ldr	r6, [pc, #104]	; (1c160 <sensor_mgr_init+0x8c>)
   1c0f8:	2300      	movs	r3, #0
   1c0fa:	4a1a      	ldr	r2, [pc, #104]	; (1c164 <sensor_mgr_init+0x90>)
   1c0fc:	4601      	mov	r1, r0
   1c0fe:	4630      	mov	r0, r6
   1c100:	f7fd fd10 	bl	19b24 <os_callout_init>
    os_gettimeofday(&ostv, &ostz);
   1c104:	ad04      	add	r5, sp, #16
   1c106:	a903      	add	r1, sp, #12
   1c108:	4628      	mov	r0, r5
   1c10a:	f7fe fde9 	bl	1ace0 <os_gettimeofday>
    sensor_base_ts.st_ostv = ostv;
   1c10e:	4c16      	ldr	r4, [pc, #88]	; (1c168 <sensor_mgr_init+0x94>)
   1c110:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1c114:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1c118:	9b03      	ldr	r3, [sp, #12]
   1c11a:	6123      	str	r3, [r4, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1c11c:	f7fd fdb8 	bl	19c90 <os_cputime_get32>
   1c120:	6160      	str	r0, [r4, #20]
    os_callout_init(&st_up_osco, sensor_mgr_evq_get(),
   1c122:	f7ff ffd1 	bl	1c0c8 <sensor_mgr_evq_get>
   1c126:	4c11      	ldr	r4, [pc, #68]	; (1c16c <sensor_mgr_init+0x98>)
   1c128:	2300      	movs	r3, #0
   1c12a:	4a11      	ldr	r2, [pc, #68]	; (1c170 <sensor_mgr_init+0x9c>)
   1c12c:	4601      	mov	r1, r0
   1c12e:	4620      	mov	r0, r4
   1c130:	f7fd fcf8 	bl	19b24 <os_callout_init>
    os_callout_reset(&st_up_osco, OS_TICKS_PER_SEC);
   1c134:	2180      	movs	r1, #128	; 0x80
   1c136:	4620      	mov	r0, r4
   1c138:	f7fd fd20 	bl	19b7c <os_callout_reset>
    os_mutex_init(&sensor_mgr.mgr_lock);
   1c13c:	f1a6 000c 	sub.w	r0, r6, #12
   1c140:	f7fe f9a8 	bl	1a494 <os_mutex_init>
}
   1c144:	b008      	add	sp, #32
   1c146:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == OS_OK);
   1c148:	2300      	movs	r3, #0
   1c14a:	461a      	mov	r2, r3
   1c14c:	4619      	mov	r1, r3
   1c14e:	4618      	mov	r0, r3
   1c150:	f7fd fb6e 	bl	19830 <__assert_func>
   1c154:	00021054 	.word	0x00021054
   1c158:	2000a19c 	.word	0x2000a19c
   1c15c:	2000a214 	.word	0x2000a214
   1c160:	2000a6ac 	.word	0x2000a6ac
   1c164:	0001c341 	.word	0x0001c341
   1c168:	2000a6f8 	.word	0x2000a6f8
   1c16c:	2000a6d4 	.word	0x2000a6d4
   1c170:	0001c005 	.word	0x0001c005

0001c174 <sensor_pkg_init>:
{
   1c174:	b508      	push	{r3, lr}
    sensor_mgr_init();
   1c176:	f7ff ffad 	bl	1c0d4 <sensor_mgr_init>
}
   1c17a:	bd08      	pop	{r3, pc}

0001c17c <sensor_lock>:
{
   1c17c:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor->s_lock, OS_TIMEOUT_NEVER);
   1c17e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c182:	3004      	adds	r0, #4
   1c184:	f7fe f9ec 	bl	1a560 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1c188:	b108      	cbz	r0, 1c18e <sensor_lock+0x12>
   1c18a:	2809      	cmp	r0, #9
   1c18c:	d000      	beq.n	1c190 <sensor_lock+0x14>
}
   1c18e:	bd08      	pop	{r3, pc}
        return (0);
   1c190:	2000      	movs	r0, #0
   1c192:	e7fc      	b.n	1c18e <sensor_lock+0x12>

0001c194 <sensor_unlock>:
{
   1c194:	b508      	push	{r3, lr}
    os_mutex_release(&sensor->s_lock);
   1c196:	3004      	adds	r0, #4
   1c198:	f7fe f986 	bl	1a4a8 <os_mutex_release>
}
   1c19c:	bd08      	pop	{r3, pc}

0001c19e <sensor_update_nextrun>:
{
   1c19e:	b530      	push	{r4, r5, lr}
   1c1a0:	b083      	sub	sp, #12
   1c1a2:	4604      	mov	r4, r0
   1c1a4:	460d      	mov	r5, r1
    os_time_ms_to_ticks(sensor->s_poll_rate, &sensor_ticks);
   1c1a6:	a901      	add	r1, sp, #4
   1c1a8:	6a00      	ldr	r0, [r0, #32]
   1c1aa:	f7fe fdb5 	bl	1ad18 <os_time_ms_to_ticks>
    sensor_lock(sensor);
   1c1ae:	4620      	mov	r0, r4
   1c1b0:	f7ff ffe4 	bl	1c17c <sensor_lock>
    sensor_mgr_remove(sensor);
   1c1b4:	4620      	mov	r0, r4
   1c1b6:	f7ff fe8f 	bl	1bed8 <sensor_mgr_remove>
    sensor->s_next_run = sensor_ticks + now;
   1c1ba:	9b01      	ldr	r3, [sp, #4]
   1c1bc:	441d      	add	r5, r3
   1c1be:	6265      	str	r5, [r4, #36]	; 0x24
    sensor_mgr_insert(sensor);
   1c1c0:	4620      	mov	r0, r4
   1c1c2:	f7ff fe9d 	bl	1bf00 <sensor_mgr_insert>
    sensor_unlock(sensor);
   1c1c6:	4620      	mov	r0, r4
   1c1c8:	f7ff ffe4 	bl	1c194 <sensor_unlock>
}
   1c1cc:	b003      	add	sp, #12
   1c1ce:	bd30      	pop	{r4, r5, pc}

0001c1d0 <sensor_calc_nextrun_delta>:
{
   1c1d0:	b538      	push	{r3, r4, r5, lr}
   1c1d2:	4605      	mov	r5, r0
   1c1d4:	460c      	mov	r4, r1
    sensor_lock(sensor);
   1c1d6:	f7ff ffd1 	bl	1c17c <sensor_lock>
    delta = (int32_t)(sensor->s_next_run - now);
   1c1da:	6a69      	ldr	r1, [r5, #36]	; 0x24
    if (delta < 0) {
   1c1dc:	1b0c      	subs	r4, r1, r4
   1c1de:	d404      	bmi.n	1c1ea <sensor_calc_nextrun_delta+0x1a>
    sensor_unlock(sensor);
   1c1e0:	4628      	mov	r0, r5
   1c1e2:	f7ff ffd7 	bl	1c194 <sensor_unlock>
}
   1c1e6:	4620      	mov	r0, r4
   1c1e8:	bd38      	pop	{r3, r4, r5, pc}
        sensor_ticks = 0;
   1c1ea:	2400      	movs	r4, #0
   1c1ec:	e7f8      	b.n	1c1e0 <sensor_calc_nextrun_delta+0x10>
	...

0001c1f0 <sensor_find_min_nextrun_sensor>:
{
   1c1f0:	b570      	push	{r4, r5, r6, lr}
   1c1f2:	4606      	mov	r6, r0
   1c1f4:	460d      	mov	r5, r1
    sensor_mgr_lock();
   1c1f6:	f7ff ff51 	bl	1c09c <sensor_mgr_lock>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
   1c1fa:	4b05      	ldr	r3, [pc, #20]	; (1c210 <sensor_find_min_nextrun_sensor+0x20>)
   1c1fc:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    *min_nextrun = sensor_calc_nextrun_delta(head, now);
   1c1fe:	4631      	mov	r1, r6
   1c200:	4620      	mov	r0, r4
   1c202:	f7ff ffe5 	bl	1c1d0 <sensor_calc_nextrun_delta>
   1c206:	6028      	str	r0, [r5, #0]
    sensor_mgr_unlock();
   1c208:	f7ff ff56 	bl	1c0b8 <sensor_mgr_unlock>
}
   1c20c:	4620      	mov	r0, r4
   1c20e:	bd70      	pop	{r4, r5, r6, pc}
   1c210:	2000a6a0 	.word	0x2000a6a0

0001c214 <sensor_mgr_register>:
{
   1c214:	b538      	push	{r3, r4, r5, lr}
   1c216:	4605      	mov	r5, r0
    rc = sensor_mgr_lock();
   1c218:	f7ff ff40 	bl	1c09c <sensor_mgr_lock>
    if (rc != 0) {
   1c21c:	4604      	mov	r4, r0
   1c21e:	b108      	cbz	r0, 1c224 <sensor_mgr_register+0x10>
}
   1c220:	4620      	mov	r0, r4
   1c222:	bd38      	pop	{r3, r4, r5, pc}
    rc = sensor_lock(sensor);
   1c224:	4628      	mov	r0, r5
   1c226:	f7ff ffa9 	bl	1c17c <sensor_lock>
    if (rc != 0) {
   1c22a:	4604      	mov	r4, r0
   1c22c:	2800      	cmp	r0, #0
   1c22e:	d1f7      	bne.n	1c220 <sensor_mgr_register+0xc>
    sensor_mgr_insert(sensor);
   1c230:	4628      	mov	r0, r5
   1c232:	f7ff fe65 	bl	1bf00 <sensor_mgr_insert>
    sensor_unlock(sensor);
   1c236:	4628      	mov	r0, r5
   1c238:	f7ff ffac 	bl	1c194 <sensor_unlock>
    sensor_mgr_unlock();
   1c23c:	f7ff ff3c 	bl	1c0b8 <sensor_mgr_unlock>
    return (0);
   1c240:	e7ee      	b.n	1c220 <sensor_mgr_register+0xc>

0001c242 <sensor_init>:
{
   1c242:	b538      	push	{r3, r4, r5, lr}
   1c244:	4604      	mov	r4, r0
   1c246:	460d      	mov	r5, r1
    memset(sensor, 0, sizeof(*sensor));
   1c248:	2288      	movs	r2, #136	; 0x88
   1c24a:	2100      	movs	r1, #0
   1c24c:	f7fe fef3 	bl	1b036 <memset>
    rc = os_mutex_init(&sensor->s_lock);
   1c250:	1d20      	adds	r0, r4, #4
   1c252:	f7fe f91f 	bl	1a494 <os_mutex_init>
    if (rc != 0) {
   1c256:	4603      	mov	r3, r0
   1c258:	b900      	cbnz	r0, 1c25c <sensor_init+0x1a>
    sensor->s_dev = dev;
   1c25a:	6025      	str	r5, [r4, #0]
}
   1c25c:	4618      	mov	r0, r3
   1c25e:	bd38      	pop	{r3, r4, r5, pc}

0001c260 <sensor_read>:
 * @return 0 on success, non-zero on failure.
 */
int
sensor_read(struct sensor *sensor, sensor_type_t type,
        sensor_data_func_t data_func, void *arg, uint32_t timeout)
{
   1c260:	b530      	push	{r4, r5, lr}
   1c262:	b089      	sub	sp, #36	; 0x24
   1c264:	4604      	mov	r4, r0
   1c266:	e9cd 2304 	strd	r2, r3, [sp, #16]
    struct sensor_read_ctx src;
    int rc;

    rc = sensor_lock(sensor);
   1c26a:	f7ff ff87 	bl	1c17c <sensor_lock>
    if (rc) {
   1c26e:	4605      	mov	r5, r0
   1c270:	b9f8      	cbnz	r0, 1c2b2 <sensor_read+0x52>
        goto err;
    }

    src.user_func = data_func;
   1c272:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c274:	9306      	str	r3, [sp, #24]
    src.user_arg = arg;
   1c276:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1c278:	9307      	str	r3, [sp, #28]

    if (!sensor_mgr_match_bytype(sensor, (void *)&type)) {
   1c27a:	a904      	add	r1, sp, #16
   1c27c:	4620      	mov	r0, r4
   1c27e:	f7ff fe7b 	bl	1bf78 <sensor_mgr_match_bytype>
   1c282:	b1e0      	cbz	r0, 1c2be <sensor_read+0x5e>
        rc = SYS_ENOENT;
        goto err;
    }

    sensor_up_timestamp(sensor);
   1c284:	4620      	mov	r0, r4
   1c286:	f7ff fee1 	bl	1c04c <sensor_up_timestamp>

    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
   1c28a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c28c:	6819      	ldr	r1, [r3, #0]
   1c28e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c290:	9302      	str	r3, [sp, #8]
   1c292:	ab06      	add	r3, sp, #24
   1c294:	9301      	str	r3, [sp, #4]
   1c296:	4b0b      	ldr	r3, [pc, #44]	; (1c2c4 <sensor_read+0x64>)
   1c298:	9300      	str	r3, [sp, #0]
   1c29a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1c29e:	4620      	mov	r0, r4
   1c2a0:	4788      	blx	r1
                                  timeout);
    if (rc) {
   1c2a2:	4605      	mov	r5, r0
   1c2a4:	b128      	cbz	r0, 1c2b2 <sensor_read+0x52>
        if (sensor->s_err_fn != NULL) {
   1c2a6:	6f23      	ldr	r3, [r4, #112]	; 0x70
   1c2a8:	b11b      	cbz	r3, 1c2b2 <sensor_read+0x52>
            sensor->s_err_fn(sensor, sensor->s_err_arg, rc);
   1c2aa:	4602      	mov	r2, r0
   1c2ac:	6f61      	ldr	r1, [r4, #116]	; 0x74
   1c2ae:	4620      	mov	r0, r4
   1c2b0:	4798      	blx	r3
        }
        goto err;
    }

err:
    sensor_unlock(sensor);
   1c2b2:	4620      	mov	r0, r4
   1c2b4:	f7ff ff6e 	bl	1c194 <sensor_unlock>
    return (rc);
}
   1c2b8:	4628      	mov	r0, r5
   1c2ba:	b009      	add	sp, #36	; 0x24
   1c2bc:	bd30      	pop	{r4, r5, pc}
        rc = SYS_ENOENT;
   1c2be:	f06f 0503 	mvn.w	r5, #3
   1c2c2:	e7f6      	b.n	1c2b2 <sensor_read+0x52>
   1c2c4:	0001bfa7 	.word	0x0001bfa7

0001c2c8 <sensor_mgr_poll_bytype>:
{
   1c2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c2ca:	b085      	sub	sp, #20
   1c2cc:	4616      	mov	r6, r2
   1c2ce:	461f      	mov	r7, r3
   1c2d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (!stt || !stt->stt_polls_left) {
   1c2d2:	b10c      	cbz	r4, 1c2d8 <sensor_mgr_poll_bytype+0x10>
   1c2d4:	8aa3      	ldrh	r3, [r4, #20]
   1c2d6:	b9cb      	cbnz	r3, 1c30c <sensor_mgr_poll_bytype+0x44>
   1c2d8:	4632      	mov	r2, r6
   1c2da:	463b      	mov	r3, r7
   1c2dc:	4605      	mov	r5, r0
        sensor_read(sensor, type, NULL, NULL, OS_TIMEOUT_NEVER);
   1c2de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c2e2:	9102      	str	r1, [sp, #8]
   1c2e4:	2100      	movs	r1, #0
   1c2e6:	9101      	str	r1, [sp, #4]
   1c2e8:	9100      	str	r1, [sp, #0]
   1c2ea:	f7ff ffb9 	bl	1c260 <sensor_read>
        sensor_lock(sensor);
   1c2ee:	4628      	mov	r0, r5
   1c2f0:	f7ff ff44 	bl	1c17c <sensor_lock>
        if (stt) {
   1c2f4:	b12c      	cbz	r4, 1c302 <sensor_mgr_poll_bytype+0x3a>
            if (!stt->stt_polls_left && stt->stt_poll_n) {
   1c2f6:	8aa3      	ldrh	r3, [r4, #20]
   1c2f8:	b91b      	cbnz	r3, 1c302 <sensor_mgr_poll_bytype+0x3a>
   1c2fa:	8a63      	ldrh	r3, [r4, #18]
   1c2fc:	b10b      	cbz	r3, 1c302 <sensor_mgr_poll_bytype+0x3a>
                stt->stt_polls_left--;
   1c2fe:	3b01      	subs	r3, #1
   1c300:	82a3      	strh	r3, [r4, #20]
        sensor_unlock(sensor);
   1c302:	4628      	mov	r0, r5
   1c304:	f7ff ff46 	bl	1c194 <sensor_unlock>
}
   1c308:	b005      	add	sp, #20
   1c30a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        stt->stt_polls_left--;
   1c30c:	3b01      	subs	r3, #1
   1c30e:	82a3      	strh	r3, [r4, #20]
}
   1c310:	e7fa      	b.n	1c308 <sensor_mgr_poll_bytype+0x40>

0001c312 <sensor_poll_per_type_trait>:
{
   1c312:	b570      	push	{r4, r5, r6, lr}
   1c314:	b082      	sub	sp, #8
   1c316:	4605      	mov	r5, r0
   1c318:	460e      	mov	r6, r1
    sensor_lock(sensor);
   1c31a:	f7ff ff2f 	bl	1c17c <sensor_lock>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1c31e:	6fec      	ldr	r4, [r5, #124]	; 0x7c
   1c320:	e007      	b.n	1c332 <sensor_poll_per_type_trait+0x20>
        sensor_mgr_poll_bytype(sensor, stt->stt_sensor_type, stt,
   1c322:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c326:	9601      	str	r6, [sp, #4]
   1c328:	9400      	str	r4, [sp, #0]
   1c32a:	4628      	mov	r0, r5
   1c32c:	f7ff ffcc 	bl	1c2c8 <sensor_mgr_poll_bytype>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1c330:	6a24      	ldr	r4, [r4, #32]
   1c332:	2c00      	cmp	r4, #0
   1c334:	d1f5      	bne.n	1c322 <sensor_poll_per_type_trait+0x10>
    sensor_unlock(sensor);
   1c336:	4628      	mov	r0, r5
   1c338:	f7ff ff2c 	bl	1c194 <sensor_unlock>
}
   1c33c:	b002      	add	sp, #8
   1c33e:	bd70      	pop	{r4, r5, r6, pc}

0001c340 <sensor_mgr_wakeup_event>:
{
   1c340:	b570      	push	{r4, r5, r6, lr}
   1c342:	b084      	sub	sp, #16
    now = os_time_get();
   1c344:	f7fe fc92 	bl	1ac6c <os_time_get>
   1c348:	4605      	mov	r5, r0
    sensor_mgr_lock();
   1c34a:	f7ff fea7 	bl	1c09c <sensor_mgr_lock>
   1c34e:	e012      	b.n	1c376 <sensor_mgr_wakeup_event+0x36>
            sensor_unlock(cursor);
   1c350:	4620      	mov	r0, r4
   1c352:	f7ff ff1f 	bl	1c194 <sensor_unlock>
            sensor_mgr_unlock();
   1c356:	f7ff feaf 	bl	1c0b8 <sensor_mgr_unlock>
}
   1c35a:	b004      	add	sp, #16
   1c35c:	bd70      	pop	{r4, r5, r6, pc}
            sensor_poll_per_type_trait(cursor, now, next_wakeup);
   1c35e:	4632      	mov	r2, r6
   1c360:	4629      	mov	r1, r5
   1c362:	4620      	mov	r0, r4
   1c364:	f7ff ffd5 	bl	1c312 <sensor_poll_per_type_trait>
        sensor_update_nextrun(cursor, now);
   1c368:	4629      	mov	r1, r5
   1c36a:	4620      	mov	r0, r4
   1c36c:	f7ff ff17 	bl	1c19e <sensor_update_nextrun>
        sensor_unlock(cursor);
   1c370:	4620      	mov	r0, r4
   1c372:	f7ff ff0f 	bl	1c194 <sensor_unlock>
        cursor = sensor_find_min_nextrun_sensor(now, &next_wakeup);
   1c376:	a903      	add	r1, sp, #12
   1c378:	4628      	mov	r0, r5
   1c37a:	f7ff ff39 	bl	1c1f0 <sensor_find_min_nextrun_sensor>
   1c37e:	4604      	mov	r4, r0
        sensor_lock(cursor);
   1c380:	f7ff fefc 	bl	1c17c <sensor_lock>
        if (!cursor->s_poll_rate) {
   1c384:	6a23      	ldr	r3, [r4, #32]
   1c386:	2b00      	cmp	r3, #0
   1c388:	d0e2      	beq.n	1c350 <sensor_mgr_wakeup_event+0x10>
        if (next_wakeup > 0) {
   1c38a:	9e03      	ldr	r6, [sp, #12]
   1c38c:	b96e      	cbnz	r6, 1c3aa <sensor_mgr_wakeup_event+0x6a>
        if (sensor_type_traits_empty(cursor)) {
   1c38e:	4620      	mov	r0, r4
   1c390:	f7ff fde6 	bl	1bf60 <sensor_type_traits_empty>
   1c394:	2800      	cmp	r0, #0
   1c396:	d0e2      	beq.n	1c35e <sensor_mgr_wakeup_event+0x1e>
            sensor_mgr_poll_bytype(cursor, cursor->s_mask, NULL, now);
   1c398:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   1c39c:	9501      	str	r5, [sp, #4]
   1c39e:	2100      	movs	r1, #0
   1c3a0:	9100      	str	r1, [sp, #0]
   1c3a2:	4620      	mov	r0, r4
   1c3a4:	f7ff ff90 	bl	1c2c8 <sensor_mgr_poll_bytype>
   1c3a8:	e7de      	b.n	1c368 <sensor_mgr_wakeup_event+0x28>
    sensor_mgr_unlock();
   1c3aa:	f7ff fe85 	bl	1c0b8 <sensor_mgr_unlock>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
   1c3ae:	9903      	ldr	r1, [sp, #12]
   1c3b0:	4801      	ldr	r0, [pc, #4]	; (1c3b8 <sensor_mgr_wakeup_event+0x78>)
   1c3b2:	f7fd fbe3 	bl	19b7c <os_callout_reset>
   1c3b6:	e7d0      	b.n	1c35a <sensor_mgr_wakeup_event+0x1a>
   1c3b8:	2000a6ac 	.word	0x2000a6ac

0001c3bc <init_sensor_coap>:

///////////////////////////////////////////////////////////////////////////////
//  CoAP Functions

///  Init the Sensor CoAP module. Called by sysinit() during startup, defined in pkg.yml.
void init_sensor_coap(void) {
   1c3bc:	b508      	push	{r3, lr}
    os_error_t rc = os_sem_init(&oc_sem, 1);  //  Init to 1 token, so only 1 caller will be allowed.
   1c3be:	2101      	movs	r1, #1
   1c3c0:	4806      	ldr	r0, [pc, #24]	; (1c3dc <init_sensor_coap+0x20>)
   1c3c2:	f7fe faf1 	bl	1a9a8 <os_sem_init>
    assert(rc == OS_OK);
   1c3c6:	b918      	cbnz	r0, 1c3d0 <init_sensor_coap+0x14>
    oc_sensor_coap_ready = true;
   1c3c8:	4b05      	ldr	r3, [pc, #20]	; (1c3e0 <init_sensor_coap+0x24>)
   1c3ca:	2201      	movs	r2, #1
   1c3cc:	701a      	strb	r2, [r3, #0]
}
   1c3ce:	bd08      	pop	{r3, pc}
    assert(rc == OS_OK);
   1c3d0:	2300      	movs	r3, #0
   1c3d2:	461a      	mov	r2, r3
   1c3d4:	4619      	mov	r1, r3
   1c3d6:	4618      	mov	r0, r3
   1c3d8:	f7fd fa2a 	bl	19830 <__assert_func>
   1c3dc:	2000a230 	.word	0x2000a230
   1c3e0:	2000a238 	.word	0x2000a238

0001c3e4 <is_sensor_node>:
}

bool is_sensor_node(void) {
    //  Return true if this is a Sensor Node.
    //  This is a Sensor Node if the Hardware ID matches one of the Sensor Node Hardware IDs.
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1c3e4:	4b04      	ldr	r3, [pc, #16]	; (1c3f8 <is_sensor_node+0x14>)
   1c3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c3ea:	4313      	orrs	r3, r2
   1c3ec:	d101      	bne.n	1c3f2 <is_sensor_node+0xe>
    return false;
   1c3ee:	2000      	movs	r0, #0
}
   1c3f0:	4770      	bx	lr
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1c3f2:	2001      	movs	r0, #1
   1c3f4:	4770      	bx	lr
   1c3f6:	bf00      	nop
   1c3f8:	2000a250 	.word	0x2000a250

0001c3fc <get_hardware_id>:
}

/////////////////////////////////////////////////////////
//  Sensor Network Addresses

const uint8_t *get_hardware_id(void) {
   1c3fc:	b508      	push	{r3, lr}
    //  Return the Hardware ID, which is unique across all microcontrollers.
    if (hw_id_len == 0) {
   1c3fe:	4b16      	ldr	r3, [pc, #88]	; (1c458 <get_hardware_id+0x5c>)
   1c400:	681b      	ldr	r3, [r3, #0]
   1c402:	b10b      	cbz	r3, 1c408 <get_hardware_id+0xc>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
    }
    return hw_id;
}
   1c404:	4815      	ldr	r0, [pc, #84]	; (1c45c <get_hardware_id+0x60>)
   1c406:	bd08      	pop	{r3, pc}
        hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
   1c408:	f000 fcee 	bl	1cde8 <hal_bsp_hw_id_len>
   1c40c:	4b12      	ldr	r3, [pc, #72]	; (1c458 <get_hardware_id+0x5c>)
   1c40e:	6018      	str	r0, [r3, #0]
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1c410:	280b      	cmp	r0, #11
   1c412:	d914      	bls.n	1c43e <get_hardware_id+0x42>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1c414:	210c      	movs	r1, #12
   1c416:	4811      	ldr	r0, [pc, #68]	; (1c45c <get_hardware_id+0x60>)
   1c418:	f000 fce8 	bl	1cdec <hal_bsp_hw_id>
   1c41c:	4b0e      	ldr	r3, [pc, #56]	; (1c458 <get_hardware_id+0x5c>)
   1c41e:	6018      	str	r0, [r3, #0]
   1c420:	2800      	cmp	r0, #0
   1c422:	dd12      	ble.n	1c44a <get_hardware_id+0x4e>
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
   1c424:	490e      	ldr	r1, [pc, #56]	; (1c460 <get_hardware_id+0x64>)
   1c426:	480f      	ldr	r0, [pc, #60]	; (1c464 <get_hardware_id+0x68>)
   1c428:	f7fc fb3a 	bl	18aa0 <console_printf>
   1c42c:	4b0a      	ldr	r3, [pc, #40]	; (1c458 <get_hardware_id+0x5c>)
   1c42e:	6819      	ldr	r1, [r3, #0]
   1c430:	480a      	ldr	r0, [pc, #40]	; (1c45c <get_hardware_id+0x60>)
   1c432:	f7fc fac5 	bl	189c0 <console_dump>
   1c436:	480c      	ldr	r0, [pc, #48]	; (1c468 <get_hardware_id+0x6c>)
   1c438:	f7fc fb32 	bl	18aa0 <console_printf>
   1c43c:	e7e2      	b.n	1c404 <get_hardware_id+0x8>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1c43e:	2300      	movs	r3, #0
   1c440:	461a      	mov	r2, r3
   1c442:	4619      	mov	r1, r3
   1c444:	4618      	mov	r0, r3
   1c446:	f7fd f9f3 	bl	19830 <__assert_func>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1c44a:	2300      	movs	r3, #0
   1c44c:	461a      	mov	r2, r3
   1c44e:	4619      	mov	r1, r3
   1c450:	4618      	mov	r0, r3
   1c452:	f7fd f9ed 	bl	19830 <__assert_func>
   1c456:	bf00      	nop
   1c458:	2000a248 	.word	0x2000a248
   1c45c:	2000a23c 	.word	0x2000a23c
   1c460:	000210f8 	.word	0x000210f8
   1c464:	000210b0 	.word	0x000210b0
   1c468:	00021210 	.word	0x00021210

0001c46c <is_collector_node>:
bool is_collector_node(void) {
   1c46c:	b508      	push	{r3, lr}
    const uint8_t *hardware_id = get_hardware_id();
   1c46e:	f7ff ffc5 	bl	1c3fc <get_hardware_id>
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1c472:	220c      	movs	r2, #12
   1c474:	4903      	ldr	r1, [pc, #12]	; (1c484 <is_collector_node+0x18>)
   1c476:	f7fe fdad 	bl	1afd4 <memcmp>
   1c47a:	b108      	cbz	r0, 1c480 <is_collector_node+0x14>
    return false; 
   1c47c:	2000      	movs	r0, #0
}
   1c47e:	bd08      	pop	{r3, pc}
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1c480:	2001      	movs	r0, #1
   1c482:	e7fc      	b.n	1c47e <is_collector_node+0x12>
   1c484:	00021068 	.word	0x00021068

0001c488 <is_standalone_node>:
bool is_standalone_node(void) {
   1c488:	b510      	push	{r4, lr}
    if (!is_collector_node() && !is_sensor_node()) { return true; }
   1c48a:	f7ff ffef 	bl	1c46c <is_collector_node>
   1c48e:	b928      	cbnz	r0, 1c49c <is_standalone_node+0x14>
   1c490:	4604      	mov	r4, r0
   1c492:	f7ff ffa7 	bl	1c3e4 <is_sensor_node>
   1c496:	b910      	cbnz	r0, 1c49e <is_standalone_node+0x16>
   1c498:	2401      	movs	r4, #1
   1c49a:	e000      	b.n	1c49e <is_standalone_node+0x16>
    return false;
   1c49c:	2400      	movs	r4, #0
}
   1c49e:	4620      	mov	r0, r4
   1c4a0:	bd10      	pop	{r4, pc}
	...

0001c4a4 <sensor_network_init>:
const char **get_sensor_node_names(void) { return sensor_node_names; }

/////////////////////////////////////////////////////////
//  Sensor Network Configuration

void sensor_network_init(void) {
   1c4a4:	b538      	push	{r3, r4, r5, lr}
    //  Allocate Sensor Node address for this node.

    //  Set the Sensor Node names for remote_sensor_create().
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1c4a6:	2400      	movs	r4, #0
   1c4a8:	2c04      	cmp	r4, #4
   1c4aa:	dc15      	bgt.n	1c4d8 <sensor_network_init+0x34>
        int len = sprintf((char *) sensor_node_names[i], "%010llx", sensor_node_addresses[i]);
   1c4ac:	4b23      	ldr	r3, [pc, #140]	; (1c53c <sensor_network_init+0x98>)
   1c4ae:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1c4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c4b6:	4922      	ldr	r1, [pc, #136]	; (1c540 <sensor_network_init+0x9c>)
   1c4b8:	4822      	ldr	r0, [pc, #136]	; (1c544 <sensor_network_init+0xa0>)
   1c4ba:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   1c4be:	f000 fcaf 	bl	1ce20 <sprintf>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1c4c2:	3001      	adds	r0, #1
   1c4c4:	280b      	cmp	r0, #11
   1c4c6:	dc01      	bgt.n	1c4cc <sensor_network_init+0x28>
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1c4c8:	3401      	adds	r4, #1
   1c4ca:	e7ed      	b.n	1c4a8 <sensor_network_init+0x4>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1c4cc:	2300      	movs	r3, #0
   1c4ce:	461a      	mov	r2, r3
   1c4d0:	4619      	mov	r1, r3
   1c4d2:	4618      	mov	r0, r3
   1c4d4:	f7fd f9ac 	bl	19830 <__assert_func>
    }
    //  Get Sensor Node address if applicable.
    const uint8_t *hardware_id = get_hardware_id();
   1c4d8:	f7ff ff90 	bl	1c3fc <get_hardware_id>
   1c4dc:	4605      	mov	r5, r0
    int i;
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1c4de:	2400      	movs	r4, #0
   1c4e0:	2c04      	cmp	r4, #4
   1c4e2:	dc19      	bgt.n	1c518 <sensor_network_init+0x74>
        if (memcmp(hardware_id, SENSOR_NODE_HW_IDS[i], HARDWARE_ID_LENGTH) == 0) {
   1c4e4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1c4e8:	0093      	lsls	r3, r2, #2
   1c4ea:	220c      	movs	r2, #12
   1c4ec:	4916      	ldr	r1, [pc, #88]	; (1c548 <sensor_network_init+0xa4>)
   1c4ee:	4419      	add	r1, r3
   1c4f0:	4628      	mov	r0, r5
   1c4f2:	f7fe fd6f 	bl	1afd4 <memcmp>
   1c4f6:	b108      	cbz	r0, 1c4fc <sensor_network_init+0x58>
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1c4f8:	3401      	adds	r4, #1
   1c4fa:	e7f1      	b.n	1c4e0 <sensor_network_init+0x3c>
            sensor_node_address = sensor_node_addresses[i];
   1c4fc:	4b0f      	ldr	r3, [pc, #60]	; (1c53c <sensor_network_init+0x98>)
   1c4fe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1c502:	e9d3 0100 	ldrd	r0, r1, [r3]
   1c506:	4b11      	ldr	r3, [pc, #68]	; (1c54c <sensor_network_init+0xa8>)
   1c508:	e9c3 0100 	strd	r0, r1, [r3]
            console_printf("%ssensor%s#%d\n", _net, _node, i + 1);
   1c50c:	1c63      	adds	r3, r4, #1
   1c50e:	4a10      	ldr	r2, [pc, #64]	; (1c550 <sensor_network_init+0xac>)
   1c510:	4910      	ldr	r1, [pc, #64]	; (1c554 <sensor_network_init+0xb0>)
   1c512:	4811      	ldr	r0, [pc, #68]	; (1c558 <sensor_network_init+0xb4>)
   1c514:	f7fc fac4 	bl	18aa0 <console_printf>
            break;
        }
    }
    //  Display the type of node.
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1c518:	f7ff ffa8 	bl	1c46c <is_collector_node>
   1c51c:	b940      	cbnz	r0, 1c530 <sensor_network_init+0x8c>
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
   1c51e:	f7ff ffb3 	bl	1c488 <is_standalone_node>
   1c522:	b150      	cbz	r0, 1c53a <sensor_network_init+0x96>
   1c524:	4a0a      	ldr	r2, [pc, #40]	; (1c550 <sensor_network_init+0xac>)
   1c526:	490b      	ldr	r1, [pc, #44]	; (1c554 <sensor_network_init+0xb0>)
   1c528:	480c      	ldr	r0, [pc, #48]	; (1c55c <sensor_network_init+0xb8>)
   1c52a:	f7fc fab9 	bl	18aa0 <console_printf>
}
   1c52e:	e004      	b.n	1c53a <sensor_network_init+0x96>
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1c530:	4a07      	ldr	r2, [pc, #28]	; (1c550 <sensor_network_init+0xac>)
   1c532:	4908      	ldr	r1, [pc, #32]	; (1c554 <sensor_network_init+0xb0>)
   1c534:	480a      	ldr	r0, [pc, #40]	; (1c560 <sensor_network_init+0xbc>)
   1c536:	f7fc fab3 	bl	18aa0 <console_printf>
}
   1c53a:	bd38      	pop	{r3, r4, r5, pc}
   1c53c:	00021110 	.word	0x00021110
   1c540:	000210b8 	.word	0x000210b8
   1c544:	20000130 	.word	0x20000130
   1c548:	00021074 	.word	0x00021074
   1c54c:	2000a250 	.word	0x2000a250
   1c550:	000210c0 	.word	0x000210c0
   1c554:	000210f8 	.word	0x000210f8
   1c558:	000210c8 	.word	0x000210c8
   1c55c:	000210e8 	.word	0x000210e8
   1c560:	000210d8 	.word	0x000210d8

0001c564 <config_device>:

///////////////////////////////////////////////////////////////////////////////
//  Generic Device Creator Code based on repos\apache-mynewt-core\hw\sensor\creator\src\sensor_creator.c

//  Device configuration
static int config_device(void) {
   1c564:	b530      	push	{r4, r5, lr}
   1c566:	b083      	sub	sp, #12
    int rc;
    struct os_dev *dev;
    struct DEVICE_CFG cfg;

    //  Fetch the device.
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
   1c568:	2200      	movs	r2, #0
   1c56a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c56e:	4810      	ldr	r0, [pc, #64]	; (1c5b0 <config_device+0x4c>)
   1c570:	f7fd fc2c 	bl	19dcc <os_dev_open>
    assert(dev != NULL);
   1c574:	b178      	cbz	r0, 1c596 <config_device+0x32>
   1c576:	4604      	mov	r4, r0

    //  Get the default config for the device.
    rc = DEVICE_CFG_DEFAULT(&cfg);
   1c578:	4668      	mov	r0, sp
   1c57a:	f000 f86c 	bl	1c656 <temp_stub_default_cfg>
    assert(rc == 0);
   1c57e:	b980      	cbnz	r0, 1c5a2 <config_device+0x3e>

    //  Apply the device config.
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
   1c580:	4669      	mov	r1, sp
   1c582:	4620      	mov	r0, r4
   1c584:	f000 f900 	bl	1c788 <temp_stub_config>
   1c588:	4605      	mov	r5, r0
    os_dev_close(dev);
   1c58a:	4620      	mov	r0, r4
   1c58c:	f7fd fc40 	bl	19e10 <os_dev_close>
    return rc;
}
   1c590:	4628      	mov	r0, r5
   1c592:	b003      	add	sp, #12
   1c594:	bd30      	pop	{r4, r5, pc}
    assert(dev != NULL);
   1c596:	2300      	movs	r3, #0
   1c598:	461a      	mov	r2, r3
   1c59a:	4619      	mov	r1, r3
   1c59c:	4618      	mov	r0, r3
   1c59e:	f7fd f947 	bl	19830 <__assert_func>
    assert(rc == 0);
   1c5a2:	2300      	movs	r3, #0
   1c5a4:	461a      	mov	r2, r3
   1c5a6:	4619      	mov	r1, r3
   1c5a8:	4618      	mov	r0, r3
   1c5aa:	f7fd f941 	bl	19830 <__assert_func>
   1c5ae:	bf00      	nop
   1c5b0:	00021138 	.word	0x00021138

0001c5b4 <temp_stub_create>:

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
   1c5b4:	b510      	push	{r4, lr}
   1c5b6:	b082      	sub	sp, #8
    console_printf("TMP create %s\n", DEVICE_NAME);
   1c5b8:	4c10      	ldr	r4, [pc, #64]	; (1c5fc <temp_stub_create+0x48>)
   1c5ba:	4621      	mov	r1, r4
   1c5bc:	4810      	ldr	r0, [pc, #64]	; (1c600 <temp_stub_create+0x4c>)
   1c5be:	f7fc fa6f 	bl	18aa0 <console_printf>

    //  Create the device.
    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
   1c5c2:	4b10      	ldr	r3, [pc, #64]	; (1c604 <temp_stub_create+0x50>)
   1c5c4:	9301      	str	r3, [sp, #4]
   1c5c6:	4b10      	ldr	r3, [pc, #64]	; (1c608 <temp_stub_create+0x54>)
   1c5c8:	9300      	str	r3, [sp, #0]
   1c5ca:	2300      	movs	r3, #0
   1c5cc:	2201      	movs	r2, #1
   1c5ce:	4621      	mov	r1, r4
   1c5d0:	480e      	ldr	r0, [pc, #56]	; (1c60c <temp_stub_create+0x58>)
   1c5d2:	f7fd fbb5 	bl	19d40 <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0, 
        DEVICE_INIT, (void *) &DEVICE_ITF);
    assert(rc == 0);
   1c5d6:	b920      	cbnz	r0, 1c5e2 <temp_stub_create+0x2e>

    //  Configure the device.
    rc = config_device();
   1c5d8:	f7ff ffc4 	bl	1c564 <config_device>
    assert(rc == 0);
   1c5dc:	b938      	cbnz	r0, 1c5ee <temp_stub_create+0x3a>
}
   1c5de:	b002      	add	sp, #8
   1c5e0:	bd10      	pop	{r4, pc}
    assert(rc == 0);
   1c5e2:	2300      	movs	r3, #0
   1c5e4:	461a      	mov	r2, r3
   1c5e6:	4619      	mov	r1, r3
   1c5e8:	4618      	mov	r0, r3
   1c5ea:	f7fd f921 	bl	19830 <__assert_func>
    assert(rc == 0);
   1c5ee:	2300      	movs	r3, #0
   1c5f0:	461a      	mov	r2, r3
   1c5f2:	4619      	mov	r1, r3
   1c5f4:	4618      	mov	r0, r3
   1c5f6:	f7fd f91b 	bl	19830 <__assert_func>
   1c5fa:	bf00      	nop
   1c5fc:	00021138 	.word	0x00021138
   1c600:	00021144 	.word	0x00021144
   1c604:	2000a290 	.word	0x2000a290
   1c608:	0001c665 	.word	0x0001c665
   1c60c:	2000a2a8 	.word	0x2000a2a8

0001c610 <temp_stub_close>:
}

static int temp_stub_close(struct os_dev *dev0) {
    //  Close the sensor.  Return 0 if successful.
    return 0;
}
   1c610:	2000      	movs	r0, #0
   1c612:	4770      	bx	lr

0001c614 <temp_stub_sensor_get_config>:

static int temp_stub_sensor_get_config(struct sensor *sensor, sensor_type_t type,
    struct sensor_cfg *cfg) {
    //  Return the type of the sensor value returned by the sensor.
    int rc;
    if (!(type & TEMP_SENSOR_TYPE)) {
   1c614:	f002 6080 	and.w	r0, r2, #67108864	; 0x4000000
   1c618:	2100      	movs	r1, #0
   1c61a:	ea50 0301 	orrs.w	r3, r0, r1
   1c61e:	d004      	beq.n	1c62a <temp_stub_sensor_get_config+0x16>
        rc = SYS_EINVAL;
        goto err;
    }
    cfg->sc_valtype = TEMP_SENSOR_VALUE_TYPE;  //  We return float (computed values) or int (raw values).
   1c620:	9b00      	ldr	r3, [sp, #0]
   1c622:	2201      	movs	r2, #1
   1c624:	701a      	strb	r2, [r3, #0]
    return (0);
   1c626:	2000      	movs	r0, #0
   1c628:	4770      	bx	lr
err:
    return (rc);
   1c62a:	f06f 0001 	mvn.w	r0, #1
}
   1c62e:	4770      	bx	lr

0001c630 <temp_stub_open>:
static int temp_stub_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
   1c630:	b508      	push	{r3, lr}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1c632:	b120      	cbz	r0, 1c63e <temp_stub_open+0xe>
    cfg = &dev->cfg; assert(cfg);
   1c634:	f110 0fb0 	cmn.w	r0, #176	; 0xb0
   1c638:	d007      	beq.n	1c64a <temp_stub_open+0x1a>
}
   1c63a:	2000      	movs	r0, #0
   1c63c:	bd08      	pop	{r3, pc}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1c63e:	2300      	movs	r3, #0
   1c640:	461a      	mov	r2, r3
   1c642:	4619      	mov	r1, r3
   1c644:	4618      	mov	r0, r3
   1c646:	f7fd f8f3 	bl	19830 <__assert_func>
    cfg = &dev->cfg; assert(cfg);
   1c64a:	2300      	movs	r3, #0
   1c64c:	461a      	mov	r2, r3
   1c64e:	4619      	mov	r1, r3
   1c650:	4618      	mov	r0, r3
   1c652:	f7fd f8ed 	bl	19830 <__assert_func>

0001c656 <temp_stub_default_cfg>:
    cfg->bc_s_mask       = SENSOR_TYPE_ALL;         //  Return all sensor values, i.e. temperature.
   1c656:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c65a:	2300      	movs	r3, #0
   1c65c:	e9c0 2300 	strd	r2, r3, [r0]
}
   1c660:	2000      	movs	r0, #0
   1c662:	4770      	bx	lr

0001c664 <temp_stub_init>:
int temp_stub_init(struct os_dev *dev0, void *arg) {
   1c664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1c666:	b379      	cbz	r1, 1c6c8 <temp_stub_init+0x64>
   1c668:	460d      	mov	r5, r1
   1c66a:	b380      	cbz	r0, 1c6ce <temp_stub_init+0x6a>
   1c66c:	4604      	mov	r4, r0
    rc = temp_stub_default_cfg(&dev->cfg);
   1c66e:	30b0      	adds	r0, #176	; 0xb0
   1c670:	f7ff fff1 	bl	1c656 <temp_stub_default_cfg>
    if (rc) { goto err; }
   1c674:	4603      	mov	r3, r0
   1c676:	b108      	cbz	r0, 1c67c <temp_stub_init+0x18>
}
   1c678:	4618      	mov	r0, r3
   1c67a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sensor = &dev->sensor;
   1c67c:	f104 0628 	add.w	r6, r4, #40	; 0x28
    rc = sensor_init(sensor, dev0);
   1c680:	4621      	mov	r1, r4
   1c682:	4630      	mov	r0, r6
   1c684:	f7ff fddd 	bl	1c242 <sensor_init>
    if (rc != 0) { goto err; }
   1c688:	4603      	mov	r3, r0
   1c68a:	2800      	cmp	r0, #0
   1c68c:	d1f4      	bne.n	1c678 <temp_stub_init+0x14>
 */
static inline int
sensor_set_driver(struct sensor *sensor, sensor_type_t type,
        struct sensor_driver *driver)
{
    sensor->s_funcs = driver;
   1c68e:	4b11      	ldr	r3, [pc, #68]	; (1c6d4 <temp_stub_init+0x70>)
   1c690:	6523      	str	r3, [r4, #80]	; 0x50
    sensor->s_types = type;
   1c692:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1c696:	2300      	movs	r3, #0
   1c698:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 * @param s_itf The interface type to set
 */
static inline int
sensor_set_interface(struct sensor *sensor, struct sensor_itf *s_itf)
{
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
   1c69c:	682a      	ldr	r2, [r5, #0]
   1c69e:	686f      	ldr	r7, [r5, #4]
   1c6a0:	68a8      	ldr	r0, [r5, #8]
   1c6a2:	68e9      	ldr	r1, [r5, #12]
   1c6a4:	6722      	str	r2, [r4, #112]	; 0x70
   1c6a6:	6767      	str	r7, [r4, #116]	; 0x74
   1c6a8:	67a0      	str	r0, [r4, #120]	; 0x78
   1c6aa:	67e1      	str	r1, [r4, #124]	; 0x7c
   1c6ac:	692a      	ldr	r2, [r5, #16]
   1c6ae:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    rc = sensor_mgr_register(sensor);
   1c6b2:	4630      	mov	r0, r6
   1c6b4:	f7ff fdae 	bl	1c214 <sensor_mgr_register>
    if (rc != 0) { goto err; }
   1c6b8:	4603      	mov	r3, r0
   1c6ba:	2800      	cmp	r0, #0
   1c6bc:	d1dc      	bne.n	1c678 <temp_stub_init+0x14>
    OS_DEV_SETHANDLERS(dev0, temp_stub_open, temp_stub_close);
   1c6be:	4a06      	ldr	r2, [pc, #24]	; (1c6d8 <temp_stub_init+0x74>)
   1c6c0:	6022      	str	r2, [r4, #0]
   1c6c2:	4a06      	ldr	r2, [pc, #24]	; (1c6dc <temp_stub_init+0x78>)
   1c6c4:	60e2      	str	r2, [r4, #12]
    return (0);
   1c6c6:	e7d7      	b.n	1c678 <temp_stub_init+0x14>
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1c6c8:	f06f 0308 	mvn.w	r3, #8
   1c6cc:	e7d4      	b.n	1c678 <temp_stub_init+0x14>
   1c6ce:	f06f 0308 	mvn.w	r3, #8
   1c6d2:	e7d1      	b.n	1c678 <temp_stub_init+0x14>
   1c6d4:	00021154 	.word	0x00021154
   1c6d8:	0001c631 	.word	0x0001c631
   1c6dc:	0001c611 	.word	0x0001c611

0001c6e0 <temp_stub_get_raw_temperature>:
int temp_stub_get_raw_temperature(struct temp_stub *dev, int num_readings, int *temp_sum, uint8_t *temp_diff) {
   1c6e0:	b538      	push	{r3, r4, r5, lr}
   1c6e2:	460d      	mov	r5, r1
   1c6e4:	4614      	mov	r4, r2
    console_printf("STB read temp sensor\n");  ////
   1c6e6:	4808      	ldr	r0, [pc, #32]	; (1c708 <temp_stub_get_raw_temperature+0x28>)
   1c6e8:	f7fc f9da 	bl	18aa0 <console_printf>
    assert(temp_sum);
   1c6ec:	b134      	cbz	r4, 1c6fc <temp_stub_get_raw_temperature+0x1c>
    *temp_sum = 1757 * num_readings;
   1c6ee:	f240 61dd 	movw	r1, #1757	; 0x6dd
   1c6f2:	fb01 f105 	mul.w	r1, r1, r5
   1c6f6:	6021      	str	r1, [r4, #0]
}
   1c6f8:	2000      	movs	r0, #0
   1c6fa:	bd38      	pop	{r3, r4, r5, pc}
    assert(temp_sum);
   1c6fc:	2300      	movs	r3, #0
   1c6fe:	461a      	mov	r2, r3
   1c700:	4619      	mov	r1, r3
   1c702:	4618      	mov	r0, r3
   1c704:	f7fd f894 	bl	19830 <__assert_func>
   1c708:	0002117c 	.word	0x0002117c

0001c70c <temp_stub_sensor_read>:
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
   1c70c:	b530      	push	{r4, r5, lr}
   1c70e:	b087      	sub	sp, #28
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1c710:	f002 6480 	and.w	r4, r2, #67108864	; 0x4000000
   1c714:	2500      	movs	r5, #0
   1c716:	ea54 0305 	orrs.w	r3, r4, r5
   1c71a:	d032      	beq.n	1c782 <temp_stub_sensor_read+0x76>
   1c71c:	4604      	mov	r4, r0
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1c71e:	6805      	ldr	r5, [r0, #0]
   1c720:	b165      	cbz	r5, 1c73c <temp_stub_sensor_read+0x30>
    rawtemp = -1;
   1c722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c726:	9303      	str	r3, [sp, #12]
        rc = temp_stub_open((struct os_dev *) dev, 0, NULL);
   1c728:	2200      	movs	r2, #0
   1c72a:	4611      	mov	r1, r2
   1c72c:	4628      	mov	r0, r5
   1c72e:	f7ff ff7f 	bl	1c630 <temp_stub_open>
        if (rc) { goto err; }
   1c732:	4603      	mov	r3, r0
   1c734:	b140      	cbz	r0, 1c748 <temp_stub_sensor_read+0x3c>
}
   1c736:	4618      	mov	r0, r3
   1c738:	b007      	add	sp, #28
   1c73a:	bd30      	pop	{r4, r5, pc}
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1c73c:	2300      	movs	r3, #0
   1c73e:	461a      	mov	r2, r3
   1c740:	4619      	mov	r1, r3
   1c742:	4618      	mov	r0, r3
   1c744:	f7fd f874 	bl	19830 <__assert_func>
        rc = temp_stub_get_raw_temperature(dev, 1, &rawtemp, NULL);
   1c748:	2300      	movs	r3, #0
   1c74a:	aa03      	add	r2, sp, #12
   1c74c:	2101      	movs	r1, #1
   1c74e:	4628      	mov	r0, r5
   1c750:	f7ff ffc6 	bl	1c6e0 <temp_stub_get_raw_temperature>
    if (rc) { goto err; }  //  console_printf("rawtemp: %d\n", rawtemp);  ////
   1c754:	4603      	mov	r3, r0
   1c756:	2800      	cmp	r0, #0
   1c758:	d1ed      	bne.n	1c736 <temp_stub_sensor_read+0x2a>
    temp_data->strd_temp_raw = rawtemp;  //  rawtemp must be between 0 and 4,095 (based on 12-bit ADC)
   1c75a:	9a03      	ldr	r2, [sp, #12]
   1c75c:	9204      	str	r2, [sp, #16]
    temp_data->strd_temp_raw_is_valid = 1;
   1c75e:	2201      	movs	r2, #1
   1c760:	f88d 2014 	strb.w	r2, [sp, #20]
    if (data_func) {  //  Call the Listener Function to process the sensor data.
   1c764:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c766:	2a00      	cmp	r2, #0
   1c768:	d0e5      	beq.n	1c736 <temp_stub_sensor_read+0x2a>
        rc = data_func(sensor, data_arg, temp_data, TEMP_SENSOR_TYPE);
   1c76a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1c76e:	2300      	movs	r3, #0
   1c770:	e9cd 2300 	strd	r2, r3, [sp]
   1c774:	aa04      	add	r2, sp, #16
   1c776:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1c778:	4620      	mov	r0, r4
   1c77a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c77c:	4798      	blx	r3
   1c77e:	4603      	mov	r3, r0
   1c780:	e7d9      	b.n	1c736 <temp_stub_sensor_read+0x2a>
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1c782:	f06f 0301 	mvn.w	r3, #1
   1c786:	e7d6      	b.n	1c736 <temp_stub_sensor_read+0x2a>

0001c788 <temp_stub_config>:
 * @param Sensor device temp_stub structure
 * @param Sensor device temp_stub_cfg config
 *
 * @return 0 on success, and non-zero error code on failure
 */
int temp_stub_config(struct temp_stub *dev, struct temp_stub_cfg *cfg) {
   1c788:	b508      	push	{r3, lr}
    struct sensor_itf *itf;
    int rc;
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1c78a:	f110 0f70 	cmn.w	r0, #112	; 0x70
   1c78e:	d009      	beq.n	1c7a4 <temp_stub_config+0x1c>
    rc = sensor_set_type_mask(&(dev->sensor),  cfg->bc_s_mask);
   1c790:	e9d1 2300 	ldrd	r2, r3, [r1]
    sensor->s_mask = mask;
   1c794:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    if (rc) { goto err; }

    dev->cfg.bc_s_mask = cfg->bc_s_mask;
   1c798:	e9d1 2300 	ldrd	r2, r3, [r1]
   1c79c:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
    return 0;
err:
    return (rc);
}
   1c7a0:	2000      	movs	r0, #0
   1c7a2:	bd08      	pop	{r3, pc}
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1c7a4:	2300      	movs	r3, #0
   1c7a6:	461a      	mov	r2, r3
   1c7a8:	4619      	mov	r1, r3
   1c7aa:	4618      	mov	r0, r3
   1c7ac:	f7fd f840 	bl	19830 <__assert_func>

0001c7b0 <oc_buffer_tx>:
    assert(rc == 0);
}

static void
oc_buffer_tx(struct os_event *ev)
{
   1c7b0:	b508      	push	{r3, lr}
    struct os_mbuf *m;

    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1c7b2:	e002      	b.n	1c7ba <oc_buffer_tx+0xa>
                                    oc_events[RI_TO_DTLS_EVENT], m);
                }
            } else
#endif
            {
                oc_send_buffer(m);
   1c7b4:	4618      	mov	r0, r3
   1c7b6:	f000 f85b 	bl	1c870 <oc_send_buffer>
    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1c7ba:	4808      	ldr	r0, [pc, #32]	; (1c7dc <oc_buffer_tx+0x2c>)
   1c7bc:	f7fd fc03 	bl	19fc6 <os_mqueue_get>
   1c7c0:	4603      	mov	r3, r0
   1c7c2:	b148      	cbz	r0, 1c7d8 <oc_buffer_tx+0x28>
        STAILQ_NEXT(OS_MBUF_PKTHDR(m), omp_next) = NULL;
   1c7c4:	2200      	movs	r2, #0
   1c7c6:	615a      	str	r2, [r3, #20]
        if (OC_MBUF_ENDPOINT(m)->ep.oe_flags & OC_ENDPOINT_MULTICAST) {
   1c7c8:	7e1a      	ldrb	r2, [r3, #24]
   1c7ca:	f012 0f08 	tst.w	r2, #8
   1c7ce:	d0f1      	beq.n	1c7b4 <oc_buffer_tx+0x4>
            oc_send_multicast_message(m);
   1c7d0:	4618      	mov	r0, r3
   1c7d2:	f000 f85d 	bl	1c890 <oc_send_multicast_message>
   1c7d6:	e7f0      	b.n	1c7ba <oc_buffer_tx+0xa>
            }
#ifdef OC_CLIENT
        }
#endif
    }
}
   1c7d8:	bd08      	pop	{r3, pc}
   1c7da:	bf00      	nop
   1c7dc:	2000a380 	.word	0x2000a380

0001c7e0 <oc_buffer_rx>:

static void
oc_buffer_rx(struct os_event *ev)
{
   1c7e0:	b500      	push	{lr}
   1c7e2:	b083      	sub	sp, #12
    struct os_mbuf *m;
#if defined(OC_SECURITY)
    uint8_t b;
#endif

    while ((m = os_mqueue_get(&oc_inq)) != NULL) {
   1c7e4:	4808      	ldr	r0, [pc, #32]	; (1c808 <oc_buffer_rx+0x28>)
   1c7e6:	f7fd fbee 	bl	19fc6 <os_mqueue_get>
   1c7ea:	9001      	str	r0, [sp, #4]
   1c7ec:	b140      	cbz	r0, 1c800 <oc_buffer_rx+0x20>
            oc_process_post(&oc_dtls_handler, oc_events[UDP_TO_DTLS_EVENT], m);
        } else {
            coap_receive(m);
        }
#else
        coap_receive(&m);
   1c7ee:	a801      	add	r0, sp, #4
   1c7f0:	f000 faa2 	bl	1cd38 <__wrap_coap_receive>
#endif
        if (m) {
   1c7f4:	9801      	ldr	r0, [sp, #4]
   1c7f6:	2800      	cmp	r0, #0
   1c7f8:	d0f4      	beq.n	1c7e4 <oc_buffer_rx+0x4>
            os_mbuf_free_chain(m);
   1c7fa:	f7fd fc59 	bl	1a0b0 <os_mbuf_free_chain>
   1c7fe:	e7f1      	b.n	1c7e4 <oc_buffer_rx+0x4>
        }
    }
}
   1c800:	b003      	add	sp, #12
   1c802:	f85d fb04 	ldr.w	pc, [sp], #4
   1c806:	bf00      	nop
   1c808:	2000a368 	.word	0x2000a368

0001c80c <oc_buffer_init>:

void
oc_buffer_init(void)
{
   1c80c:	b508      	push	{r3, lr}
    os_mqueue_init(&oc_inq, oc_buffer_rx, NULL);
   1c80e:	2200      	movs	r2, #0
   1c810:	4904      	ldr	r1, [pc, #16]	; (1c824 <oc_buffer_init+0x18>)
   1c812:	4805      	ldr	r0, [pc, #20]	; (1c828 <oc_buffer_init+0x1c>)
   1c814:	f7fd fbce 	bl	19fb4 <os_mqueue_init>
    os_mqueue_init(&oc_outq, oc_buffer_tx, NULL);
   1c818:	2200      	movs	r2, #0
   1c81a:	4904      	ldr	r1, [pc, #16]	; (1c82c <oc_buffer_init+0x20>)
   1c81c:	4804      	ldr	r0, [pc, #16]	; (1c830 <oc_buffer_init+0x24>)
   1c81e:	f7fd fbc9 	bl	19fb4 <os_mqueue_init>
}
   1c822:	bd08      	pop	{r3, pc}
   1c824:	0001c7e1 	.word	0x0001c7e1
   1c828:	2000a368 	.word	0x2000a368
   1c82c:	0001c7b1 	.word	0x0001c7b1
   1c830:	2000a380 	.word	0x2000a380

0001c834 <oc_ri_mem_init>:
}
#endif

void
oc_ri_mem_init(void)
{
   1c834:	b500      	push	{lr}
   1c836:	b083      	sub	sp, #12
#ifdef OC_SERVER
  os_mempool_init(&oc_resource_pool, MAX_APP_RESOURCES, sizeof(oc_resource_t),
                  oc_resource_area, "oc_res");
#endif
#ifdef OC_CLIENT
    os_mempool_init(&oc_client_cb_pool, MAX_NUM_CONCURRENT_REQUESTS,
   1c838:	4b07      	ldr	r3, [pc, #28]	; (1c858 <oc_ri_mem_init+0x24>)
   1c83a:	9300      	str	r3, [sp, #0]
   1c83c:	4b07      	ldr	r3, [pc, #28]	; (1c85c <oc_ri_mem_init+0x28>)
   1c83e:	2264      	movs	r2, #100	; 0x64
   1c840:	2102      	movs	r1, #2
   1c842:	4807      	ldr	r0, [pc, #28]	; (1c860 <oc_ri_mem_init+0x2c>)
   1c844:	f7fd fd3c 	bl	1a2c0 <os_mempool_init>
      sizeof(oc_client_cb_t), oc_client_cb_area, "oc_cl_cbs");
    oc_rep_init();
   1c848:	f000 f860 	bl	1c90c <oc_rep_init>
#endif
    oc_buffer_init();
   1c84c:	f7ff ffde 	bl	1c80c <oc_buffer_init>
}
   1c850:	b003      	add	sp, #12
   1c852:	f85d fb04 	ldr.w	pc, [sp], #4
   1c856:	bf00      	nop
   1c858:	00021194 	.word	0x00021194
   1c85c:	2000a398 	.word	0x2000a398
   1c860:	2000a460 	.word	0x2000a460

0001c864 <oc_evq_set>:
}

void
oc_evq_set(struct os_eventq *evq)
{
    oc_evq = evq;
   1c864:	4b01      	ldr	r3, [pc, #4]	; (1c86c <oc_evq_set+0x8>)
   1c866:	6018      	str	r0, [r3, #0]
}
   1c868:	4770      	bx	lr
   1c86a:	bf00      	nop
   1c86c:	2000a47c 	.word	0x2000a47c

0001c870 <oc_send_buffer>:
    }
}

void
oc_send_buffer(struct os_mbuf *m)
{
   1c870:	b508      	push	{r3, lr}
    struct oc_endpoint *oe;
    const struct oc_transport *ot;

    oe = OC_MBUF_ENDPOINT(m);

    ot = oc_transports[oe->ep.oe_type];
   1c872:	7e03      	ldrb	r3, [r0, #24]
   1c874:	f003 0307 	and.w	r3, r3, #7
   1c878:	4a04      	ldr	r2, [pc, #16]	; (1c88c <oc_send_buffer+0x1c>)
   1c87a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (ot) {
   1c87e:	b113      	cbz	r3, 1c886 <oc_send_buffer+0x16>
        ot->ot_tx_ucast(m);
   1c880:	68db      	ldr	r3, [r3, #12]
   1c882:	4798      	blx	r3
    } else {
        OC_LOG(ERROR, "Unknown transport option %u\n", oe->ep.oe_type);
        os_mbuf_free_chain(m);
    }
}
   1c884:	bd08      	pop	{r3, pc}
        os_mbuf_free_chain(m);
   1c886:	f7fd fc13 	bl	1a0b0 <os_mbuf_free_chain>
}
   1c88a:	e7fb      	b.n	1c884 <oc_send_buffer+0x14>
   1c88c:	2000a710 	.word	0x2000a710

0001c890 <oc_send_multicast_message>:
/*
 * Send on all the transports.
 */
void
oc_send_multicast_message(struct os_mbuf *m)
{
   1c890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c894:	4607      	mov	r7, r0
    const struct oc_transport *ot;
    const struct oc_transport *prev = NULL;
    struct os_mbuf *n;
    int i;

    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1c896:	2400      	movs	r4, #0
    const struct oc_transport *prev = NULL;
   1c898:	4626      	mov	r6, r4
    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1c89a:	e002      	b.n	1c8a2 <oc_send_multicast_message+0x12>
   1c89c:	4635      	mov	r5, r6
   1c89e:	3401      	adds	r4, #1
   1c8a0:	462e      	mov	r6, r5
   1c8a2:	2c07      	cmp	r4, #7
   1c8a4:	dc12      	bgt.n	1c8cc <oc_send_multicast_message+0x3c>
        if (!oc_transports[i]) {
   1c8a6:	4b0c      	ldr	r3, [pc, #48]	; (1c8d8 <oc_send_multicast_message+0x48>)
   1c8a8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   1c8ac:	2d00      	cmp	r5, #0
   1c8ae:	d0f5      	beq.n	1c89c <oc_send_multicast_message+0xc>
            continue;
        }

        ot = oc_transports[i];
        if (prev) {
   1c8b0:	2e00      	cmp	r6, #0
   1c8b2:	d0f4      	beq.n	1c89e <oc_send_multicast_message+0xe>
            n = os_mbuf_dup(m);
   1c8b4:	4638      	mov	r0, r7
   1c8b6:	f7fd fc6b 	bl	1a190 <os_mbuf_dup>
   1c8ba:	4680      	mov	r8, r0
            prev->ot_tx_mcast(m);
   1c8bc:	6933      	ldr	r3, [r6, #16]
   1c8be:	4638      	mov	r0, r7
   1c8c0:	4798      	blx	r3
            if (!n) {
   1c8c2:	f1b8 0f00 	cmp.w	r8, #0
   1c8c6:	d005      	beq.n	1c8d4 <oc_send_multicast_message+0x44>
                return;
            }
            m = n;
   1c8c8:	4647      	mov	r7, r8
   1c8ca:	e7e8      	b.n	1c89e <oc_send_multicast_message+0xe>
        }
        prev = ot;
    }
    if (prev) {
   1c8cc:	b116      	cbz	r6, 1c8d4 <oc_send_multicast_message+0x44>
        prev->ot_tx_mcast(m);
   1c8ce:	6933      	ldr	r3, [r6, #16]
   1c8d0:	4638      	mov	r0, r7
   1c8d2:	4798      	blx	r3
    }
}
   1c8d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c8d8:	2000a710 	.word	0x2000a710

0001c8dc <oc_init>:
    return rc;
}

void
oc_init(void)
{
   1c8dc:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
   1c8de:	4b07      	ldr	r3, [pc, #28]	; (1c8fc <oc_init+0x20>)
   1c8e0:	781b      	ldrb	r3, [r3, #0]
   1c8e2:	b133      	cbz	r3, 1c8f2 <oc_init+0x16>
    oc_ri_mem_init();
   1c8e4:	f7ff ffa6 	bl	1c834 <oc_ri_mem_init>
    oc_evq_set(os_eventq_dflt_get());
   1c8e8:	f7fd fb60 	bl	19fac <os_eventq_dflt_get>
   1c8ec:	f7ff ffba 	bl	1c864 <oc_evq_set>
}
   1c8f0:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1c8f2:	461a      	mov	r2, r3
   1c8f4:	4619      	mov	r1, r3
   1c8f6:	4618      	mov	r0, r3
   1c8f8:	f7fc ff9a 	bl	19830 <__assert_func>
   1c8fc:	2000a56c 	.word	0x2000a56c

0001c900 <oc_register_gatt>:
oc_register_gatt(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_GATT) == 1)
    oc_gatt_transport_id = oc_transport_register(&oc_gatt_transport);
#endif
}
   1c900:	4770      	bx	lr

0001c902 <oc_register_ip4>:
oc_register_ip4(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV4) == 1)
    oc_ip4_transport_id = oc_transport_register(&oc_ip4_transport);
#endif
}
   1c902:	4770      	bx	lr

0001c904 <oc_register_ip6>:
oc_register_ip6(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV6) == 1)
    oc_ip6_transport_id = oc_transport_register(&oc_ip6_transport);
#endif
}
   1c904:	4770      	bx	lr

0001c906 <oc_register_lora>:
oc_register_lora(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_LORA) == 1)
    oc_lora_transport_id = oc_transport_register(&oc_lora_transport);
#endif
}
   1c906:	4770      	bx	lr

0001c908 <oc_register_serial>:
oc_register_serial(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_SERIAL) == 1)
    oc_serial_transport_id = oc_transport_register(&oc_serial_transport);
#endif
}
   1c908:	4770      	bx	lr
	...

0001c90c <oc_rep_init>:
  return (uint16_t)err;
}

void
oc_rep_init(void)
{
   1c90c:	b500      	push	{lr}
   1c90e:	b083      	sub	sp, #12
    os_mempool_init(&oc_rep_objects, EST_NUM_REP_OBJECTS,
   1c910:	4b05      	ldr	r3, [pc, #20]	; (1c928 <oc_rep_init+0x1c>)
   1c912:	9300      	str	r3, [sp, #0]
   1c914:	4b05      	ldr	r3, [pc, #20]	; (1c92c <oc_rep_init+0x20>)
   1c916:	2218      	movs	r2, #24
   1c918:	2102      	movs	r1, #2
   1c91a:	4805      	ldr	r0, [pc, #20]	; (1c930 <oc_rep_init+0x24>)
   1c91c:	f7fd fcd0 	bl	1a2c0 <os_mempool_init>
                    sizeof(oc_rep_t), oc_rep_objects_area, "oc_rep_o");
}
   1c920:	b003      	add	sp, #12
   1c922:	f85d fb04 	ldr.w	pc, [sp], #4
   1c926:	bf00      	nop
   1c928:	000211a0 	.word	0x000211a0
   1c92c:	2000a49c 	.word	0x2000a49c
   1c930:	2000a480 	.word	0x2000a480

0001c934 <flash_map_read_mfg>:
 * @return                      0 on success; nonzero on failure.
 */
static int
flash_map_read_mfg(int max_areas,
                   struct flash_area *out_areas, int *out_num_areas)
{
   1c934:	b570      	push	{r4, r5, r6, lr}
   1c936:	b086      	sub	sp, #24
   1c938:	4605      	mov	r5, r0
   1c93a:	460e      	mov	r6, r1
   1c93c:	4614      	mov	r4, r2
    struct mfg_meta_flash_area meta_flash_area;
    struct mfg_reader reader;
    struct flash_area *fap;
    int rc;

    *out_num_areas = 0;
   1c93e:	2300      	movs	r3, #0
   1c940:	6013      	str	r3, [r2, #0]

    /* Ensure manufacturing meta region has been located in flash. */
    mfg_init();
   1c942:	f000 f9ad 	bl	1cca0 <mfg_init>

    mfg_open(&reader);
   1c946:	a801      	add	r0, sp, #4
   1c948:	f000 f9c6 	bl	1ccd8 <mfg_open>

    while (1) {
        if (*out_num_areas >= max_areas) {
   1c94c:	6823      	ldr	r3, [r4, #0]
   1c94e:	42ab      	cmp	r3, r5
   1c950:	da29      	bge.n	1c9a6 <flash_map_read_mfg+0x72>
            return -1;
        }

        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
   1c952:	2102      	movs	r1, #2
   1c954:	a801      	add	r0, sp, #4
   1c956:	f000 f98c 	bl	1cc72 <mfg_seek_next_with_type>
   1c95a:	4603      	mov	r3, r0
        switch (rc) {
   1c95c:	f110 0f0f 	cmn.w	r0, #15
   1c960:	d003      	beq.n	1c96a <flash_map_read_mfg+0x36>
   1c962:	b120      	cbz	r0, 1c96e <flash_map_read_mfg+0x3a>
        fap->fa_off = meta_flash_area.offset;
        fap->fa_size = meta_flash_area.size;

        (*out_num_areas)++;
    }
}
   1c964:	4618      	mov	r0, r3
   1c966:	b006      	add	sp, #24
   1c968:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
   1c96a:	2300      	movs	r3, #0
   1c96c:	e7fa      	b.n	1c964 <flash_map_read_mfg+0x30>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
   1c96e:	a903      	add	r1, sp, #12
   1c970:	a801      	add	r0, sp, #4
   1c972:	f000 f98b 	bl	1cc8c <mfg_read_tlv_flash_area>
        if (rc != 0) {
   1c976:	4603      	mov	r3, r0
   1c978:	2800      	cmp	r0, #0
   1c97a:	d1f3      	bne.n	1c964 <flash_map_read_mfg+0x30>
        fap = out_areas + *out_num_areas;
   1c97c:	6823      	ldr	r3, [r4, #0]
   1c97e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1c982:	009a      	lsls	r2, r3, #2
   1c984:	18b3      	adds	r3, r6, r2
        fap->fa_id = meta_flash_area.area_id;
   1c986:	f89d 100c 	ldrb.w	r1, [sp, #12]
   1c98a:	54b1      	strb	r1, [r6, r2]
        fap->fa_device_id = meta_flash_area.device_id;
   1c98c:	f89d 200d 	ldrb.w	r2, [sp, #13]
   1c990:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
   1c992:	f8dd 200e 	ldr.w	r2, [sp, #14]
   1c996:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
   1c998:	f8dd 2012 	ldr.w	r2, [sp, #18]
   1c99c:	609a      	str	r2, [r3, #8]
        (*out_num_areas)++;
   1c99e:	6823      	ldr	r3, [r4, #0]
   1c9a0:	3301      	adds	r3, #1
   1c9a2:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
   1c9a4:	e7d2      	b.n	1c94c <flash_map_read_mfg+0x18>
            return -1;
   1c9a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c9aa:	e7db      	b.n	1c964 <flash_map_read_mfg+0x30>

0001c9ac <flash_area_open>:
{
   1c9ac:	b430      	push	{r4, r5}
    if (flash_map == NULL) {
   1c9ae:	4b0d      	ldr	r3, [pc, #52]	; (1c9e4 <flash_area_open+0x38>)
   1c9b0:	681d      	ldr	r5, [r3, #0]
   1c9b2:	b1a5      	cbz	r5, 1c9de <flash_area_open+0x32>
    for (i = 0; i < flash_map_entries; i++) {
   1c9b4:	2300      	movs	r3, #0
   1c9b6:	4a0c      	ldr	r2, [pc, #48]	; (1c9e8 <flash_area_open+0x3c>)
   1c9b8:	6812      	ldr	r2, [r2, #0]
   1c9ba:	429a      	cmp	r2, r3
   1c9bc:	dd0b      	ble.n	1c9d6 <flash_area_open+0x2a>
        area = flash_map + i;
   1c9be:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   1c9c2:	00a2      	lsls	r2, r4, #2
   1c9c4:	18ac      	adds	r4, r5, r2
        if (area->fa_id == id) {
   1c9c6:	5caa      	ldrb	r2, [r5, r2]
   1c9c8:	4282      	cmp	r2, r0
   1c9ca:	d001      	beq.n	1c9d0 <flash_area_open+0x24>
    for (i = 0; i < flash_map_entries; i++) {
   1c9cc:	3301      	adds	r3, #1
   1c9ce:	e7f2      	b.n	1c9b6 <flash_area_open+0xa>
            *fap = area;
   1c9d0:	600c      	str	r4, [r1, #0]
            return 0;
   1c9d2:	2000      	movs	r0, #0
   1c9d4:	e001      	b.n	1c9da <flash_area_open+0x2e>
    return SYS_ENOENT;
   1c9d6:	f06f 0003 	mvn.w	r0, #3
}
   1c9da:	bc30      	pop	{r4, r5}
   1c9dc:	4770      	bx	lr
        return SYS_EACCES;
   1c9de:	f06f 0006 	mvn.w	r0, #6
   1c9e2:	e7fa      	b.n	1c9da <flash_area_open+0x2e>
   1c9e4:	2000a734 	.word	0x2000a734
   1c9e8:	2000a730 	.word	0x2000a730

0001c9ec <flash_area_read>:
{
   1c9ec:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1c9ee:	6884      	ldr	r4, [r0, #8]
   1c9f0:	428c      	cmp	r4, r1
   1c9f2:	d308      	bcc.n	1ca06 <flash_area_read+0x1a>
   1c9f4:	18cd      	adds	r5, r1, r3
   1c9f6:	42ac      	cmp	r4, r5
   1c9f8:	d308      	bcc.n	1ca0c <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   1c9fa:	6844      	ldr	r4, [r0, #4]
   1c9fc:	4421      	add	r1, r4
   1c9fe:	7840      	ldrb	r0, [r0, #1]
   1ca00:	f000 f9c8 	bl	1cd94 <hal_flash_read>
}
   1ca04:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   1ca06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ca0a:	e7fb      	b.n	1ca04 <flash_area_read+0x18>
   1ca0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ca10:	e7f8      	b.n	1ca04 <flash_area_read+0x18>
	...

0001ca14 <flash_map_init>:

void
flash_map_init(void)
{
   1ca14:	b510      	push	{r4, lr}
   1ca16:	b084      	sub	sp, #16

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1ca18:	4b14      	ldr	r3, [pc, #80]	; (1ca6c <flash_map_init+0x58>)
   1ca1a:	781b      	ldrb	r3, [r3, #0]
   1ca1c:	b303      	cbz	r3, 1ca60 <flash_map_init+0x4c>

    rc = hal_flash_init();
   1ca1e:	f000 f9a5 	bl	1cd6c <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1ca22:	b138      	cbz	r0, 1ca34 <flash_map_init+0x20>
   1ca24:	2000      	movs	r0, #0
   1ca26:	9000      	str	r0, [sp, #0]
   1ca28:	4b11      	ldr	r3, [pc, #68]	; (1ca70 <flash_map_init+0x5c>)
   1ca2a:	681c      	ldr	r4, [r3, #0]
   1ca2c:	4603      	mov	r3, r0
   1ca2e:	4602      	mov	r2, r0
   1ca30:	4601      	mov	r1, r0
   1ca32:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   1ca34:	4b0f      	ldr	r3, [pc, #60]	; (1ca74 <flash_map_init+0x60>)
   1ca36:	4a10      	ldr	r2, [pc, #64]	; (1ca78 <flash_map_init+0x64>)
   1ca38:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   1ca3a:	4b10      	ldr	r3, [pc, #64]	; (1ca7c <flash_map_init+0x68>)
   1ca3c:	2206      	movs	r2, #6
   1ca3e:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
   1ca40:	aa03      	add	r2, sp, #12
   1ca42:	490f      	ldr	r1, [pc, #60]	; (1ca80 <flash_map_init+0x6c>)
   1ca44:	200a      	movs	r0, #10
   1ca46:	f7ff ff75 	bl	1c934 <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
   1ca4a:	b938      	cbnz	r0, 1ca5c <flash_map_init+0x48>
   1ca4c:	9b03      	ldr	r3, [sp, #12]
   1ca4e:	2b00      	cmp	r3, #0
   1ca50:	dd04      	ble.n	1ca5c <flash_map_init+0x48>
        flash_map = mfg_areas;
   1ca52:	4a08      	ldr	r2, [pc, #32]	; (1ca74 <flash_map_init+0x60>)
   1ca54:	490a      	ldr	r1, [pc, #40]	; (1ca80 <flash_map_init+0x6c>)
   1ca56:	6011      	str	r1, [r2, #0]
        flash_map_entries = num_areas;
   1ca58:	4a08      	ldr	r2, [pc, #32]	; (1ca7c <flash_map_init+0x68>)
   1ca5a:	6013      	str	r3, [r2, #0]
    }
}
   1ca5c:	b004      	add	sp, #16
   1ca5e:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1ca60:	461a      	mov	r2, r3
   1ca62:	4619      	mov	r1, r3
   1ca64:	4618      	mov	r0, r3
   1ca66:	f7fc fee3 	bl	19830 <__assert_func>
   1ca6a:	bf00      	nop
   1ca6c:	2000a56c 	.word	0x2000a56c
   1ca70:	20000104 	.word	0x20000104
   1ca74:	2000a734 	.word	0x2000a734
   1ca78:	000211ac 	.word	0x000211ac
   1ca7c:	2000a730 	.word	0x2000a730
   1ca80:	2000a4cc 	.word	0x2000a4cc

0001ca84 <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
   1ca84:	4770      	bx	lr
	...

0001ca88 <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
   1ca88:	b530      	push	{r4, r5, lr}
   1ca8a:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
   1ca8c:	7885      	ldrb	r5, [r0, #2]
   1ca8e:	4b21      	ldr	r3, [pc, #132]	; (1cb14 <mfg_seek_next_aux+0x8c>)
   1ca90:	681b      	ldr	r3, [r3, #0]
   1ca92:	429d      	cmp	r5, r3
   1ca94:	da32      	bge.n	1cafc <mfg_seek_next_aux+0x74>
   1ca96:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
   1ca98:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   1ca9c:	0093      	lsls	r3, r2, #2
   1ca9e:	a901      	add	r1, sp, #4
   1caa0:	4a1d      	ldr	r2, [pc, #116]	; (1cb18 <mfg_seek_next_aux+0x90>)
   1caa2:	5cd0      	ldrb	r0, [r2, r3]
   1caa4:	f7ff ff82 	bl	1c9ac <flash_area_open>
    if (rc != 0) {
   1caa8:	bb58      	cbnz	r0, 1cb02 <mfg_seek_next_aux+0x7a>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
   1caaa:	6862      	ldr	r2, [r4, #4]
   1caac:	b9c2      	cbnz	r2, 1cae0 <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
   1caae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1cab2:	00aa      	lsls	r2, r5, #2
   1cab4:	4b18      	ldr	r3, [pc, #96]	; (1cb18 <mfg_seek_next_aux+0x90>)
   1cab6:	4413      	add	r3, r2
   1cab8:	685b      	ldr	r3, [r3, #4]
   1caba:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
   1cabc:	6861      	ldr	r1, [r4, #4]
   1cabe:	9801      	ldr	r0, [sp, #4]
   1cac0:	6883      	ldr	r3, [r0, #8]
   1cac2:	3b08      	subs	r3, #8
   1cac4:	4299      	cmp	r1, r3
   1cac6:	d310      	bcc.n	1caea <mfg_seek_next_aux+0x62>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
   1cac8:	78a3      	ldrb	r3, [r4, #2]
   1caca:	1c59      	adds	r1, r3, #1
   1cacc:	4a11      	ldr	r2, [pc, #68]	; (1cb14 <mfg_seek_next_aux+0x8c>)
   1cace:	6812      	ldr	r2, [r2, #0]
   1cad0:	4291      	cmp	r1, r2
   1cad2:	da19      	bge.n	1cb08 <mfg_seek_next_aux+0x80>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
   1cad4:	2200      	movs	r2, #0
   1cad6:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
   1cad8:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
   1cada:	f06f 0305 	mvn.w	r3, #5
   1cade:	e015      	b.n	1cb0c <mfg_seek_next_aux+0x84>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
   1cae0:	7863      	ldrb	r3, [r4, #1]
   1cae2:	4413      	add	r3, r2
   1cae4:	3302      	adds	r3, #2
   1cae6:	6063      	str	r3, [r4, #4]
   1cae8:	e7e8      	b.n	1cabc <mfg_seek_next_aux+0x34>
        }
        goto done;
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
   1caea:	2302      	movs	r3, #2
   1caec:	4622      	mov	r2, r4
   1caee:	f7ff ff7d 	bl	1c9ec <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
   1caf2:	4603      	mov	r3, r0
   1caf4:	b150      	cbz	r0, 1cb0c <mfg_seek_next_aux+0x84>
        rc = SYS_EIO;
   1caf6:	f06f 0304 	mvn.w	r3, #4
   1cafa:	e007      	b.n	1cb0c <mfg_seek_next_aux+0x84>
        return SYS_EINVAL;
   1cafc:	f06f 0301 	mvn.w	r3, #1
   1cb00:	e004      	b.n	1cb0c <mfg_seek_next_aux+0x84>
        return SYS_EIO;
   1cb02:	f06f 0304 	mvn.w	r3, #4
   1cb06:	e001      	b.n	1cb0c <mfg_seek_next_aux+0x84>
            rc = SYS_EDONE;
   1cb08:	f06f 030e 	mvn.w	r3, #14
    }

done:
    flash_area_close(fap);
    return rc;
}
   1cb0c:	4618      	mov	r0, r3
   1cb0e:	b003      	add	sp, #12
   1cb10:	bd30      	pop	{r4, r5, pc}
   1cb12:	bf00      	nop
   1cb14:	2000a560 	.word	0x2000a560
   1cb18:	2000a548 	.word	0x2000a548

0001cb1c <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
   1cb1c:	b530      	push	{r4, r5, lr}
   1cb1e:	b085      	sub	sp, #20
   1cb20:	4605      	mov	r5, r0
   1cb22:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
   1cb24:	a903      	add	r1, sp, #12
   1cb26:	f7ff ff41 	bl	1c9ac <flash_area_open>
    if (rc != 0) {
   1cb2a:	b9e8      	cbnz	r0, 1cb68 <mfg_read_mmr+0x4c>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
   1cb2c:	9803      	ldr	r0, [sp, #12]
   1cb2e:	6881      	ldr	r1, [r0, #8]
   1cb30:	2308      	movs	r3, #8
   1cb32:	aa01      	add	r2, sp, #4
   1cb34:	3908      	subs	r1, #8
   1cb36:	f7ff ff59 	bl	1c9ec <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
   1cb3a:	4601      	mov	r1, r0
   1cb3c:	b9b8      	cbnz	r0, 1cb6e <mfg_read_mmr+0x52>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
   1cb3e:	9a02      	ldr	r2, [sp, #8]
   1cb40:	4b11      	ldr	r3, [pc, #68]	; (1cb88 <mfg_read_mmr+0x6c>)
   1cb42:	429a      	cmp	r2, r3
   1cb44:	d116      	bne.n	1cb74 <mfg_read_mmr+0x58>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
   1cb46:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1cb4a:	2b02      	cmp	r3, #2
   1cb4c:	d115      	bne.n	1cb7a <mfg_read_mmr+0x5e>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
   1cb4e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1cb52:	9b03      	ldr	r3, [sp, #12]
   1cb54:	689b      	ldr	r3, [r3, #8]
   1cb56:	429a      	cmp	r2, r3
   1cb58:	d812      	bhi.n	1cb80 <mfg_read_mmr+0x64>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
   1cb5a:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
   1cb5c:	7025      	strb	r5, [r4, #0]
   1cb5e:	6063      	str	r3, [r4, #4]
   1cb60:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
   1cb62:	4608      	mov	r0, r1
   1cb64:	b005      	add	sp, #20
   1cb66:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
   1cb68:	f06f 0104 	mvn.w	r1, #4
   1cb6c:	e7f9      	b.n	1cb62 <mfg_read_mmr+0x46>
        return SYS_EIO;
   1cb6e:	f06f 0104 	mvn.w	r1, #4
   1cb72:	e7f6      	b.n	1cb62 <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1cb74:	f06f 0108 	mvn.w	r1, #8
   1cb78:	e7f3      	b.n	1cb62 <mfg_read_mmr+0x46>
        return SYS_ENOTSUP;
   1cb7a:	f06f 010b 	mvn.w	r1, #11
   1cb7e:	e7f0      	b.n	1cb62 <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1cb80:	f06f 0108 	mvn.w	r1, #8
   1cb84:	e7ed      	b.n	1cb62 <mfg_read_mmr+0x46>
   1cb86:	bf00      	nop
   1cb88:	3bb2a269 	.word	0x3bb2a269

0001cb8c <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
   1cb8c:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
   1cb8e:	2300      	movs	r3, #0
   1cb90:	4a11      	ldr	r2, [pc, #68]	; (1cbd8 <mfg_read_next_mmr+0x4c>)
   1cb92:	6812      	ldr	r2, [r2, #0]
   1cb94:	429a      	cmp	r2, r3
   1cb96:	dd08      	ble.n	1cbaa <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
   1cb98:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   1cb9c:	008a      	lsls	r2, r1, #2
   1cb9e:	490f      	ldr	r1, [pc, #60]	; (1cbdc <mfg_read_next_mmr+0x50>)
   1cba0:	5c8a      	ldrb	r2, [r1, r2]
   1cba2:	4282      	cmp	r2, r0
   1cba4:	d011      	beq.n	1cbca <mfg_read_next_mmr+0x3e>
    for (i = 0; i < mfg_num_mmrs; i++) {
   1cba6:	3301      	adds	r3, #1
   1cba8:	e7f2      	b.n	1cb90 <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
   1cbaa:	2a01      	cmp	r2, #1
   1cbac:	dc11      	bgt.n	1cbd2 <mfg_read_next_mmr+0x46>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
   1cbae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1cbb2:	0093      	lsls	r3, r2, #2
   1cbb4:	4909      	ldr	r1, [pc, #36]	; (1cbdc <mfg_read_next_mmr+0x50>)
   1cbb6:	4419      	add	r1, r3
   1cbb8:	f7ff ffb0 	bl	1cb1c <mfg_read_mmr>
    if (rc != 0) {
   1cbbc:	4603      	mov	r3, r0
   1cbbe:	b930      	cbnz	r0, 1cbce <mfg_read_next_mmr+0x42>
        return rc;
    }

    mfg_num_mmrs++;
   1cbc0:	4905      	ldr	r1, [pc, #20]	; (1cbd8 <mfg_read_next_mmr+0x4c>)
   1cbc2:	680a      	ldr	r2, [r1, #0]
   1cbc4:	3201      	adds	r2, #1
   1cbc6:	600a      	str	r2, [r1, #0]
    return 0;
   1cbc8:	e001      	b.n	1cbce <mfg_read_next_mmr+0x42>
            return SYS_EALREADY;
   1cbca:	f06f 030a 	mvn.w	r3, #10
}
   1cbce:	4618      	mov	r0, r3
   1cbd0:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
   1cbd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1cbd6:	e7fa      	b.n	1cbce <mfg_read_next_mmr+0x42>
   1cbd8:	2000a560 	.word	0x2000a560
   1cbdc:	2000a548 	.word	0x2000a548

0001cbe0 <mfg_open_flash_area>:
{
   1cbe0:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1cbe2:	7883      	ldrb	r3, [r0, #2]
   1cbe4:	4a0b      	ldr	r2, [pc, #44]	; (1cc14 <mfg_open_flash_area+0x34>)
   1cbe6:	6812      	ldr	r2, [r2, #0]
   1cbe8:	4293      	cmp	r3, r2
   1cbea:	da0a      	bge.n	1cc02 <mfg_open_flash_area+0x22>
    rc = flash_area_open(mmr->area_id, fap);
   1cbec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1cbf0:	009a      	lsls	r2, r3, #2
   1cbf2:	4b09      	ldr	r3, [pc, #36]	; (1cc18 <mfg_open_flash_area+0x38>)
   1cbf4:	5c98      	ldrb	r0, [r3, r2]
   1cbf6:	f7ff fed9 	bl	1c9ac <flash_area_open>
    if (rc != 0) {
   1cbfa:	4603      	mov	r3, r0
   1cbfc:	b938      	cbnz	r0, 1cc0e <mfg_open_flash_area+0x2e>
}
   1cbfe:	4618      	mov	r0, r3
   1cc00:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1cc02:	2300      	movs	r3, #0
   1cc04:	461a      	mov	r2, r3
   1cc06:	4619      	mov	r1, r3
   1cc08:	4618      	mov	r0, r3
   1cc0a:	f7fc fe11 	bl	19830 <__assert_func>
        return SYS_EIO;
   1cc0e:	f06f 0304 	mvn.w	r3, #4
   1cc12:	e7f4      	b.n	1cbfe <mfg_open_flash_area+0x1e>
   1cc14:	2000a560 	.word	0x2000a560
   1cc18:	2000a548 	.word	0x2000a548

0001cc1c <mfg_read_tlv_body>:
{
   1cc1c:	b570      	push	{r4, r5, r6, lr}
   1cc1e:	b082      	sub	sp, #8
   1cc20:	4606      	mov	r6, r0
   1cc22:	460c      	mov	r4, r1
   1cc24:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
   1cc26:	a901      	add	r1, sp, #4
   1cc28:	f7ff ffda 	bl	1cbe0 <mfg_open_flash_area>
    if (rc != 0) {
   1cc2c:	4603      	mov	r3, r0
   1cc2e:	b110      	cbz	r0, 1cc36 <mfg_read_tlv_body+0x1a>
}
   1cc30:	4618      	mov	r0, r3
   1cc32:	b002      	add	sp, #8
   1cc34:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
   1cc36:	462a      	mov	r2, r5
   1cc38:	2100      	movs	r1, #0
   1cc3a:	4620      	mov	r0, r4
   1cc3c:	f7fe f9fb 	bl	1b036 <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
   1cc40:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
   1cc42:	6871      	ldr	r1, [r6, #4]
   1cc44:	42ab      	cmp	r3, r5
   1cc46:	bfa8      	it	ge
   1cc48:	462b      	movge	r3, r5
   1cc4a:	4622      	mov	r2, r4
   1cc4c:	3102      	adds	r1, #2
   1cc4e:	9801      	ldr	r0, [sp, #4]
   1cc50:	f7ff fecc 	bl	1c9ec <flash_area_read>
    if (rc != 0) {
   1cc54:	4603      	mov	r3, r0
   1cc56:	2800      	cmp	r0, #0
   1cc58:	d0ea      	beq.n	1cc30 <mfg_read_tlv_body+0x14>
        return SYS_EIO;
   1cc5a:	f06f 0304 	mvn.w	r3, #4
   1cc5e:	e7e7      	b.n	1cc30 <mfg_read_tlv_body+0x14>

0001cc60 <mfg_seek_next>:
{
   1cc60:	b510      	push	{r4, lr}
   1cc62:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
   1cc64:	4620      	mov	r0, r4
   1cc66:	f7ff ff0f 	bl	1ca88 <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
   1cc6a:	f110 0f06 	cmn.w	r0, #6
   1cc6e:	d0f9      	beq.n	1cc64 <mfg_seek_next+0x4>
}
   1cc70:	bd10      	pop	{r4, pc}

0001cc72 <mfg_seek_next_with_type>:
{
   1cc72:	b538      	push	{r3, r4, r5, lr}
   1cc74:	4604      	mov	r4, r0
   1cc76:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
   1cc78:	4620      	mov	r0, r4
   1cc7a:	f7ff fff1 	bl	1cc60 <mfg_seek_next>
        if (rc != 0) {
   1cc7e:	4602      	mov	r2, r0
   1cc80:	b910      	cbnz	r0, 1cc88 <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
   1cc82:	7823      	ldrb	r3, [r4, #0]
   1cc84:	42ab      	cmp	r3, r5
   1cc86:	d1f7      	bne.n	1cc78 <mfg_seek_next_with_type+0x6>
}
   1cc88:	4610      	mov	r0, r2
   1cc8a:	bd38      	pop	{r3, r4, r5, pc}

0001cc8c <mfg_read_tlv_flash_area>:
{
   1cc8c:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
   1cc8e:	220a      	movs	r2, #10
   1cc90:	f7ff ffc4 	bl	1cc1c <mfg_read_tlv_body>
}
   1cc94:	bd08      	pop	{r3, pc}

0001cc96 <mfg_read_tlv_mmr_ref>:
{
   1cc96:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
   1cc98:	2201      	movs	r2, #1
   1cc9a:	f7ff ffbf 	bl	1cc1c <mfg_read_tlv_body>
}
   1cc9e:	bd08      	pop	{r3, pc}

0001cca0 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
   1cca0:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
   1cca2:	4b0b      	ldr	r3, [pc, #44]	; (1ccd0 <mfg_init+0x30>)
   1cca4:	781b      	ldrb	r3, [r3, #0]
   1cca6:	b94b      	cbnz	r3, 1ccbc <mfg_init+0x1c>
        return;
    }
    mfg_initialized = true;
   1cca8:	4b09      	ldr	r3, [pc, #36]	; (1ccd0 <mfg_init+0x30>)
   1ccaa:	2201      	movs	r2, #1
   1ccac:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1ccae:	4b09      	ldr	r3, [pc, #36]	; (1ccd4 <mfg_init+0x34>)
   1ccb0:	781b      	ldrb	r3, [r3, #0]
   1ccb2:	b123      	cbz	r3, 1ccbe <mfg_init+0x1e>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
   1ccb4:	2000      	movs	r0, #0
   1ccb6:	f7ff ff69 	bl	1cb8c <mfg_read_next_mmr>
    if (rc != 0) {
   1ccba:	b128      	cbz	r0, 1ccc8 <mfg_init+0x28>

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
}
   1ccbc:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1ccbe:	461a      	mov	r2, r3
   1ccc0:	4619      	mov	r1, r3
   1ccc2:	4618      	mov	r0, r3
   1ccc4:	f7fc fdb4 	bl	19830 <__assert_func>
    rc = mfg_read_mmr_refs();
   1ccc8:	f000 f80e 	bl	1cce8 <mfg_read_mmr_refs>
err:
   1cccc:	e7f6      	b.n	1ccbc <mfg_init+0x1c>
   1ccce:	bf00      	nop
   1ccd0:	2000a544 	.word	0x2000a544
   1ccd4:	2000a56c 	.word	0x2000a56c

0001ccd8 <mfg_open>:
{
   1ccd8:	b510      	push	{r4, lr}
   1ccda:	4604      	mov	r4, r0
    mfg_init();
   1ccdc:	f7ff ffe0 	bl	1cca0 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
   1cce0:	2300      	movs	r3, #0
   1cce2:	6023      	str	r3, [r4, #0]
   1cce4:	6063      	str	r3, [r4, #4]
}
   1cce6:	bd10      	pop	{r4, pc}

0001cce8 <mfg_read_mmr_refs>:
{
   1cce8:	b500      	push	{lr}
   1ccea:	b085      	sub	sp, #20
    mfg_open(&reader);
   1ccec:	a801      	add	r0, sp, #4
   1ccee:	f7ff fff3 	bl	1ccd8 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
   1ccf2:	2104      	movs	r1, #4
   1ccf4:	eb0d 0001 	add.w	r0, sp, r1
   1ccf8:	f7ff ffbb 	bl	1cc72 <mfg_seek_next_with_type>
   1ccfc:	4603      	mov	r3, r0
        switch (rc) {
   1ccfe:	f110 0f0f 	cmn.w	r0, #15
   1cd02:	d004      	beq.n	1cd0e <mfg_read_mmr_refs+0x26>
   1cd04:	b128      	cbz	r0, 1cd12 <mfg_read_mmr_refs+0x2a>
}
   1cd06:	4618      	mov	r0, r3
   1cd08:	b005      	add	sp, #20
   1cd0a:	f85d fb04 	ldr.w	pc, [sp], #4
            return 0;
   1cd0e:	2300      	movs	r3, #0
   1cd10:	e7f9      	b.n	1cd06 <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
   1cd12:	a903      	add	r1, sp, #12
   1cd14:	a801      	add	r0, sp, #4
   1cd16:	f7ff ffbe 	bl	1cc96 <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
   1cd1a:	4603      	mov	r3, r0
   1cd1c:	2800      	cmp	r0, #0
   1cd1e:	d1f2      	bne.n	1cd06 <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
   1cd20:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1cd24:	f7ff ff32 	bl	1cb8c <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
   1cd28:	4603      	mov	r3, r0
   1cd2a:	2800      	cmp	r0, #0
   1cd2c:	d0e1      	beq.n	1ccf2 <mfg_read_mmr_refs+0xa>
   1cd2e:	f110 0f0b 	cmn.w	r0, #11
   1cd32:	d0de      	beq.n	1ccf2 <mfg_read_mmr_refs+0xa>
   1cd34:	e7e7      	b.n	1cd06 <mfg_read_mmr_refs+0x1e>
	...

0001cd38 <__wrap_coap_receive>:
}

///////////////////////////////////////////////////////////////////////////////
//  Other Functions

int __wrap_coap_receive(/* struct os_mbuf **mp */) {
   1cd38:	b508      	push	{r3, lr}
    //  We override the default coap_receive() with an empty function so that we will 
    //  NOT link in any modules for receiving and parsing CoAP requests, to save ROM space.
    //  We only need to transmit CoAP requests.  The overriding is done via the Linker Flag
    //  "-Wl,-wrap,coap_receive" in apps/my_sensor_app/pkg.yml
    console_printf("coap_receive NOT IMPLEMENTED\n");
   1cd3a:	4803      	ldr	r0, [pc, #12]	; (1cd48 <__wrap_coap_receive+0x10>)
   1cd3c:	f7fb feb0 	bl	18aa0 <console_printf>
    return -1;
}
   1cd40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1cd44:	bd08      	pop	{r3, pc}
   1cd46:	bf00      	nop
   1cd48:	000211f4 	.word	0x000211f4

0001cd4c <_fini>:
//  From https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/static.html.
void* __dso_handle = NULL;
int __aeabi_atexit(void *object, void (*destructor)(void *), void *dso_handle) { return 0; }

#ifndef ARCH_rv32imac  //  If not RISC-V...
void _fini(void) { }   //  Define the function to be called when main() exits
   1cd4c:	4770      	bx	lr

0001cd4e <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
   1cd4e:	6843      	ldr	r3, [r0, #4]
   1cd50:	428b      	cmp	r3, r1
   1cd52:	d808      	bhi.n	1cd66 <hal_flash_check_addr+0x18>
   1cd54:	6882      	ldr	r2, [r0, #8]
   1cd56:	4413      	add	r3, r2
   1cd58:	428b      	cmp	r3, r1
   1cd5a:	d301      	bcc.n	1cd60 <hal_flash_check_addr+0x12>
        return SYS_EINVAL;
    }
    return 0;
   1cd5c:	2000      	movs	r0, #0
}
   1cd5e:	4770      	bx	lr
        return SYS_EINVAL;
   1cd60:	f06f 0001 	mvn.w	r0, #1
   1cd64:	4770      	bx	lr
   1cd66:	f06f 0001 	mvn.w	r0, #1
   1cd6a:	4770      	bx	lr

0001cd6c <hal_flash_init>:
{
   1cd6c:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
   1cd6e:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
   1cd70:	462c      	mov	r4, r5
   1cd72:	e001      	b.n	1cd78 <hal_flash_init+0xc>
   1cd74:	3401      	adds	r4, #1
   1cd76:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
   1cd78:	4620      	mov	r0, r4
   1cd7a:	f7fe fce3 	bl	1b744 <hal_bsp_flash_dev>
        if (!hf) {
   1cd7e:	b138      	cbz	r0, 1cd90 <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
   1cd80:	6802      	ldr	r2, [r0, #0]
   1cd82:	6952      	ldr	r2, [r2, #20]
   1cd84:	4790      	blx	r2
   1cd86:	2800      	cmp	r0, #0
   1cd88:	d0f4      	beq.n	1cd74 <hal_flash_init+0x8>
            rc = SYS_EIO;
   1cd8a:	f06f 0504 	mvn.w	r5, #4
   1cd8e:	e7f1      	b.n	1cd74 <hal_flash_init+0x8>
}
   1cd90:	4628      	mov	r0, r5
   1cd92:	bd38      	pop	{r3, r4, r5, pc}

0001cd94 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   1cd94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cd98:	460d      	mov	r5, r1
   1cd9a:	4690      	mov	r8, r2
   1cd9c:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1cd9e:	f7fe fcd1 	bl	1b744 <hal_bsp_flash_dev>
    if (!hf) {
   1cda2:	b1c0      	cbz	r0, 1cdd6 <hal_flash_read+0x42>
   1cda4:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1cda6:	4629      	mov	r1, r5
   1cda8:	f7ff ffd1 	bl	1cd4e <hal_flash_check_addr>
   1cdac:	b9b0      	cbnz	r0, 1cddc <hal_flash_read+0x48>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1cdae:	19a9      	adds	r1, r5, r6
   1cdb0:	4620      	mov	r0, r4
   1cdb2:	f7ff ffcc 	bl	1cd4e <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1cdb6:	b9a0      	cbnz	r0, 1cde2 <hal_flash_read+0x4e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   1cdb8:	6823      	ldr	r3, [r4, #0]
   1cdba:	681f      	ldr	r7, [r3, #0]
   1cdbc:	4633      	mov	r3, r6
   1cdbe:	4642      	mov	r2, r8
   1cdc0:	4629      	mov	r1, r5
   1cdc2:	4620      	mov	r0, r4
   1cdc4:	47b8      	blx	r7
    if (rc != 0) {
   1cdc6:	4603      	mov	r3, r0
   1cdc8:	b910      	cbnz	r0, 1cdd0 <hal_flash_read+0x3c>
        return SYS_EIO;
    }

    return 0;
}
   1cdca:	4618      	mov	r0, r3
   1cdcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
   1cdd0:	f06f 0304 	mvn.w	r3, #4
   1cdd4:	e7f9      	b.n	1cdca <hal_flash_read+0x36>
        return SYS_EINVAL;
   1cdd6:	f06f 0301 	mvn.w	r3, #1
   1cdda:	e7f6      	b.n	1cdca <hal_flash_read+0x36>
        return SYS_EINVAL;
   1cddc:	f06f 0301 	mvn.w	r3, #1
   1cde0:	e7f3      	b.n	1cdca <hal_flash_read+0x36>
   1cde2:	f06f 0301 	mvn.w	r3, #1
   1cde6:	e7f0      	b.n	1cdca <hal_flash_read+0x36>

0001cde8 <hal_bsp_hw_id_len>:

int
hal_bsp_hw_id_len(void)
{
    return sizeof(NRF_FICR->DEVICEID) + sizeof(NRF_FICR->DEVICEADDR);
}
   1cde8:	2010      	movs	r0, #16
   1cdea:	4770      	bx	lr

0001cdec <hal_bsp_hw_id>:
 * These values are generated at random.
 * DEVICEID[0-1] and DEVICEADDR[0-1].
 */
int
hal_bsp_hw_id(uint8_t *id, int max_len)
{
   1cdec:	b570      	push	{r4, r5, r6, lr}
   1cdee:	4606      	mov	r6, r0
   1cdf0:	460c      	mov	r4, r1
    int len, cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEID), max_len);
   1cdf2:	460d      	mov	r5, r1
   1cdf4:	2908      	cmp	r1, #8
   1cdf6:	bf28      	it	cs
   1cdf8:	2508      	movcs	r5, #8
    memcpy(id, (void *)NRF_FICR->DEVICEID, cnt);
   1cdfa:	462a      	mov	r2, r5
   1cdfc:	4906      	ldr	r1, [pc, #24]	; (1ce18 <hal_bsp_hw_id+0x2c>)
   1cdfe:	f7fe f90d 	bl	1b01c <memcpy>
    len = cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEADDR), max_len - len);
   1ce02:	1b64      	subs	r4, r4, r5
   1ce04:	2c08      	cmp	r4, #8
   1ce06:	bf28      	it	cs
   1ce08:	2408      	movcs	r4, #8
    memcpy(id + len, (void *)NRF_FICR->DEVICEADDR, cnt);
   1ce0a:	4622      	mov	r2, r4
   1ce0c:	4903      	ldr	r1, [pc, #12]	; (1ce1c <hal_bsp_hw_id+0x30>)
   1ce0e:	1970      	adds	r0, r6, r5
   1ce10:	f7fe f904 	bl	1b01c <memcpy>

    return len + cnt;
}
   1ce14:	1928      	adds	r0, r5, r4
   1ce16:	bd70      	pop	{r4, r5, r6, pc}
   1ce18:	10000060 	.word	0x10000060
   1ce1c:	100000a4 	.word	0x100000a4

0001ce20 <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   1ce20:	b40e      	push	{r1, r2, r3}
   1ce22:	b500      	push	{lr}
   1ce24:	b082      	sub	sp, #8
   1ce26:	ab03      	add	r3, sp, #12
   1ce28:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
   1ce2c:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   1ce2e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1ce32:	f7fe fbef 	bl	1b614 <vsnprintf>
	va_end(ap);

	return rv;
}
   1ce36:	b002      	add	sp, #8
   1ce38:	f85d eb04 	ldr.w	lr, [sp], #4
   1ce3c:	b003      	add	sp, #12
   1ce3e:	4770      	bx	lr

0001ce40 <__aeabi_uldivmod>:
   1ce40:	b953      	cbnz	r3, 1ce58 <__aeabi_uldivmod+0x18>
   1ce42:	b94a      	cbnz	r2, 1ce58 <__aeabi_uldivmod+0x18>
   1ce44:	2900      	cmp	r1, #0
   1ce46:	bf08      	it	eq
   1ce48:	2800      	cmpeq	r0, #0
   1ce4a:	bf1c      	itt	ne
   1ce4c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1ce50:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1ce54:	f000 b972 	b.w	1d13c <__aeabi_idiv0>
   1ce58:	f1ad 0c08 	sub.w	ip, sp, #8
   1ce5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1ce60:	f000 f806 	bl	1ce70 <__udivmoddi4>
   1ce64:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ce68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ce6c:	b004      	add	sp, #16
   1ce6e:	4770      	bx	lr

0001ce70 <__udivmoddi4>:
   1ce70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ce74:	9e08      	ldr	r6, [sp, #32]
   1ce76:	4604      	mov	r4, r0
   1ce78:	4688      	mov	r8, r1
   1ce7a:	2b00      	cmp	r3, #0
   1ce7c:	d14b      	bne.n	1cf16 <__udivmoddi4+0xa6>
   1ce7e:	428a      	cmp	r2, r1
   1ce80:	4615      	mov	r5, r2
   1ce82:	d967      	bls.n	1cf54 <__udivmoddi4+0xe4>
   1ce84:	fab2 f282 	clz	r2, r2
   1ce88:	b14a      	cbz	r2, 1ce9e <__udivmoddi4+0x2e>
   1ce8a:	f1c2 0720 	rsb	r7, r2, #32
   1ce8e:	fa01 f302 	lsl.w	r3, r1, r2
   1ce92:	fa20 f707 	lsr.w	r7, r0, r7
   1ce96:	4095      	lsls	r5, r2
   1ce98:	ea47 0803 	orr.w	r8, r7, r3
   1ce9c:	4094      	lsls	r4, r2
   1ce9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1cea2:	0c23      	lsrs	r3, r4, #16
   1cea4:	fbb8 f7fe 	udiv	r7, r8, lr
   1cea8:	fa1f fc85 	uxth.w	ip, r5
   1ceac:	fb0e 8817 	mls	r8, lr, r7, r8
   1ceb0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   1ceb4:	fb07 f10c 	mul.w	r1, r7, ip
   1ceb8:	4299      	cmp	r1, r3
   1ceba:	d909      	bls.n	1ced0 <__udivmoddi4+0x60>
   1cebc:	18eb      	adds	r3, r5, r3
   1cebe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   1cec2:	f080 811b 	bcs.w	1d0fc <__udivmoddi4+0x28c>
   1cec6:	4299      	cmp	r1, r3
   1cec8:	f240 8118 	bls.w	1d0fc <__udivmoddi4+0x28c>
   1cecc:	3f02      	subs	r7, #2
   1cece:	442b      	add	r3, r5
   1ced0:	1a5b      	subs	r3, r3, r1
   1ced2:	b2a4      	uxth	r4, r4
   1ced4:	fbb3 f0fe 	udiv	r0, r3, lr
   1ced8:	fb0e 3310 	mls	r3, lr, r0, r3
   1cedc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1cee0:	fb00 fc0c 	mul.w	ip, r0, ip
   1cee4:	45a4      	cmp	ip, r4
   1cee6:	d909      	bls.n	1cefc <__udivmoddi4+0x8c>
   1cee8:	192c      	adds	r4, r5, r4
   1ceea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1ceee:	f080 8107 	bcs.w	1d100 <__udivmoddi4+0x290>
   1cef2:	45a4      	cmp	ip, r4
   1cef4:	f240 8104 	bls.w	1d100 <__udivmoddi4+0x290>
   1cef8:	3802      	subs	r0, #2
   1cefa:	442c      	add	r4, r5
   1cefc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   1cf00:	eba4 040c 	sub.w	r4, r4, ip
   1cf04:	2700      	movs	r7, #0
   1cf06:	b11e      	cbz	r6, 1cf10 <__udivmoddi4+0xa0>
   1cf08:	40d4      	lsrs	r4, r2
   1cf0a:	2300      	movs	r3, #0
   1cf0c:	e9c6 4300 	strd	r4, r3, [r6]
   1cf10:	4639      	mov	r1, r7
   1cf12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1cf16:	428b      	cmp	r3, r1
   1cf18:	d909      	bls.n	1cf2e <__udivmoddi4+0xbe>
   1cf1a:	2e00      	cmp	r6, #0
   1cf1c:	f000 80eb 	beq.w	1d0f6 <__udivmoddi4+0x286>
   1cf20:	2700      	movs	r7, #0
   1cf22:	e9c6 0100 	strd	r0, r1, [r6]
   1cf26:	4638      	mov	r0, r7
   1cf28:	4639      	mov	r1, r7
   1cf2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1cf2e:	fab3 f783 	clz	r7, r3
   1cf32:	2f00      	cmp	r7, #0
   1cf34:	d147      	bne.n	1cfc6 <__udivmoddi4+0x156>
   1cf36:	428b      	cmp	r3, r1
   1cf38:	d302      	bcc.n	1cf40 <__udivmoddi4+0xd0>
   1cf3a:	4282      	cmp	r2, r0
   1cf3c:	f200 80fa 	bhi.w	1d134 <__udivmoddi4+0x2c4>
   1cf40:	1a84      	subs	r4, r0, r2
   1cf42:	eb61 0303 	sbc.w	r3, r1, r3
   1cf46:	2001      	movs	r0, #1
   1cf48:	4698      	mov	r8, r3
   1cf4a:	2e00      	cmp	r6, #0
   1cf4c:	d0e0      	beq.n	1cf10 <__udivmoddi4+0xa0>
   1cf4e:	e9c6 4800 	strd	r4, r8, [r6]
   1cf52:	e7dd      	b.n	1cf10 <__udivmoddi4+0xa0>
   1cf54:	b902      	cbnz	r2, 1cf58 <__udivmoddi4+0xe8>
   1cf56:	deff      	udf	#255	; 0xff
   1cf58:	fab2 f282 	clz	r2, r2
   1cf5c:	2a00      	cmp	r2, #0
   1cf5e:	f040 808f 	bne.w	1d080 <__udivmoddi4+0x210>
   1cf62:	1b49      	subs	r1, r1, r5
   1cf64:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1cf68:	fa1f f885 	uxth.w	r8, r5
   1cf6c:	2701      	movs	r7, #1
   1cf6e:	fbb1 fcfe 	udiv	ip, r1, lr
   1cf72:	0c23      	lsrs	r3, r4, #16
   1cf74:	fb0e 111c 	mls	r1, lr, ip, r1
   1cf78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1cf7c:	fb08 f10c 	mul.w	r1, r8, ip
   1cf80:	4299      	cmp	r1, r3
   1cf82:	d907      	bls.n	1cf94 <__udivmoddi4+0x124>
   1cf84:	18eb      	adds	r3, r5, r3
   1cf86:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   1cf8a:	d202      	bcs.n	1cf92 <__udivmoddi4+0x122>
   1cf8c:	4299      	cmp	r1, r3
   1cf8e:	f200 80cd 	bhi.w	1d12c <__udivmoddi4+0x2bc>
   1cf92:	4684      	mov	ip, r0
   1cf94:	1a59      	subs	r1, r3, r1
   1cf96:	b2a3      	uxth	r3, r4
   1cf98:	fbb1 f0fe 	udiv	r0, r1, lr
   1cf9c:	fb0e 1410 	mls	r4, lr, r0, r1
   1cfa0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   1cfa4:	fb08 f800 	mul.w	r8, r8, r0
   1cfa8:	45a0      	cmp	r8, r4
   1cfaa:	d907      	bls.n	1cfbc <__udivmoddi4+0x14c>
   1cfac:	192c      	adds	r4, r5, r4
   1cfae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1cfb2:	d202      	bcs.n	1cfba <__udivmoddi4+0x14a>
   1cfb4:	45a0      	cmp	r8, r4
   1cfb6:	f200 80b6 	bhi.w	1d126 <__udivmoddi4+0x2b6>
   1cfba:	4618      	mov	r0, r3
   1cfbc:	eba4 0408 	sub.w	r4, r4, r8
   1cfc0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1cfc4:	e79f      	b.n	1cf06 <__udivmoddi4+0x96>
   1cfc6:	f1c7 0c20 	rsb	ip, r7, #32
   1cfca:	40bb      	lsls	r3, r7
   1cfcc:	fa22 fe0c 	lsr.w	lr, r2, ip
   1cfd0:	ea4e 0e03 	orr.w	lr, lr, r3
   1cfd4:	fa01 f407 	lsl.w	r4, r1, r7
   1cfd8:	fa20 f50c 	lsr.w	r5, r0, ip
   1cfdc:	fa21 f30c 	lsr.w	r3, r1, ip
   1cfe0:	ea4f 481e 	mov.w	r8, lr, lsr #16
   1cfe4:	4325      	orrs	r5, r4
   1cfe6:	fbb3 f9f8 	udiv	r9, r3, r8
   1cfea:	0c2c      	lsrs	r4, r5, #16
   1cfec:	fb08 3319 	mls	r3, r8, r9, r3
   1cff0:	fa1f fa8e 	uxth.w	sl, lr
   1cff4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   1cff8:	fb09 f40a 	mul.w	r4, r9, sl
   1cffc:	429c      	cmp	r4, r3
   1cffe:	fa02 f207 	lsl.w	r2, r2, r7
   1d002:	fa00 f107 	lsl.w	r1, r0, r7
   1d006:	d90b      	bls.n	1d020 <__udivmoddi4+0x1b0>
   1d008:	eb1e 0303 	adds.w	r3, lr, r3
   1d00c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   1d010:	f080 8087 	bcs.w	1d122 <__udivmoddi4+0x2b2>
   1d014:	429c      	cmp	r4, r3
   1d016:	f240 8084 	bls.w	1d122 <__udivmoddi4+0x2b2>
   1d01a:	f1a9 0902 	sub.w	r9, r9, #2
   1d01e:	4473      	add	r3, lr
   1d020:	1b1b      	subs	r3, r3, r4
   1d022:	b2ad      	uxth	r5, r5
   1d024:	fbb3 f0f8 	udiv	r0, r3, r8
   1d028:	fb08 3310 	mls	r3, r8, r0, r3
   1d02c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   1d030:	fb00 fa0a 	mul.w	sl, r0, sl
   1d034:	45a2      	cmp	sl, r4
   1d036:	d908      	bls.n	1d04a <__udivmoddi4+0x1da>
   1d038:	eb1e 0404 	adds.w	r4, lr, r4
   1d03c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1d040:	d26b      	bcs.n	1d11a <__udivmoddi4+0x2aa>
   1d042:	45a2      	cmp	sl, r4
   1d044:	d969      	bls.n	1d11a <__udivmoddi4+0x2aa>
   1d046:	3802      	subs	r0, #2
   1d048:	4474      	add	r4, lr
   1d04a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1d04e:	fba0 8902 	umull	r8, r9, r0, r2
   1d052:	eba4 040a 	sub.w	r4, r4, sl
   1d056:	454c      	cmp	r4, r9
   1d058:	46c2      	mov	sl, r8
   1d05a:	464b      	mov	r3, r9
   1d05c:	d354      	bcc.n	1d108 <__udivmoddi4+0x298>
   1d05e:	d051      	beq.n	1d104 <__udivmoddi4+0x294>
   1d060:	2e00      	cmp	r6, #0
   1d062:	d069      	beq.n	1d138 <__udivmoddi4+0x2c8>
   1d064:	ebb1 050a 	subs.w	r5, r1, sl
   1d068:	eb64 0403 	sbc.w	r4, r4, r3
   1d06c:	fa04 fc0c 	lsl.w	ip, r4, ip
   1d070:	40fd      	lsrs	r5, r7
   1d072:	40fc      	lsrs	r4, r7
   1d074:	ea4c 0505 	orr.w	r5, ip, r5
   1d078:	e9c6 5400 	strd	r5, r4, [r6]
   1d07c:	2700      	movs	r7, #0
   1d07e:	e747      	b.n	1cf10 <__udivmoddi4+0xa0>
   1d080:	f1c2 0320 	rsb	r3, r2, #32
   1d084:	fa20 f703 	lsr.w	r7, r0, r3
   1d088:	4095      	lsls	r5, r2
   1d08a:	fa01 f002 	lsl.w	r0, r1, r2
   1d08e:	fa21 f303 	lsr.w	r3, r1, r3
   1d092:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1d096:	4338      	orrs	r0, r7
   1d098:	0c01      	lsrs	r1, r0, #16
   1d09a:	fbb3 f7fe 	udiv	r7, r3, lr
   1d09e:	fa1f f885 	uxth.w	r8, r5
   1d0a2:	fb0e 3317 	mls	r3, lr, r7, r3
   1d0a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1d0aa:	fb07 f308 	mul.w	r3, r7, r8
   1d0ae:	428b      	cmp	r3, r1
   1d0b0:	fa04 f402 	lsl.w	r4, r4, r2
   1d0b4:	d907      	bls.n	1d0c6 <__udivmoddi4+0x256>
   1d0b6:	1869      	adds	r1, r5, r1
   1d0b8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   1d0bc:	d22f      	bcs.n	1d11e <__udivmoddi4+0x2ae>
   1d0be:	428b      	cmp	r3, r1
   1d0c0:	d92d      	bls.n	1d11e <__udivmoddi4+0x2ae>
   1d0c2:	3f02      	subs	r7, #2
   1d0c4:	4429      	add	r1, r5
   1d0c6:	1acb      	subs	r3, r1, r3
   1d0c8:	b281      	uxth	r1, r0
   1d0ca:	fbb3 f0fe 	udiv	r0, r3, lr
   1d0ce:	fb0e 3310 	mls	r3, lr, r0, r3
   1d0d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1d0d6:	fb00 f308 	mul.w	r3, r0, r8
   1d0da:	428b      	cmp	r3, r1
   1d0dc:	d907      	bls.n	1d0ee <__udivmoddi4+0x27e>
   1d0de:	1869      	adds	r1, r5, r1
   1d0e0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   1d0e4:	d217      	bcs.n	1d116 <__udivmoddi4+0x2a6>
   1d0e6:	428b      	cmp	r3, r1
   1d0e8:	d915      	bls.n	1d116 <__udivmoddi4+0x2a6>
   1d0ea:	3802      	subs	r0, #2
   1d0ec:	4429      	add	r1, r5
   1d0ee:	1ac9      	subs	r1, r1, r3
   1d0f0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   1d0f4:	e73b      	b.n	1cf6e <__udivmoddi4+0xfe>
   1d0f6:	4637      	mov	r7, r6
   1d0f8:	4630      	mov	r0, r6
   1d0fa:	e709      	b.n	1cf10 <__udivmoddi4+0xa0>
   1d0fc:	4607      	mov	r7, r0
   1d0fe:	e6e7      	b.n	1ced0 <__udivmoddi4+0x60>
   1d100:	4618      	mov	r0, r3
   1d102:	e6fb      	b.n	1cefc <__udivmoddi4+0x8c>
   1d104:	4541      	cmp	r1, r8
   1d106:	d2ab      	bcs.n	1d060 <__udivmoddi4+0x1f0>
   1d108:	ebb8 0a02 	subs.w	sl, r8, r2
   1d10c:	eb69 020e 	sbc.w	r2, r9, lr
   1d110:	3801      	subs	r0, #1
   1d112:	4613      	mov	r3, r2
   1d114:	e7a4      	b.n	1d060 <__udivmoddi4+0x1f0>
   1d116:	4660      	mov	r0, ip
   1d118:	e7e9      	b.n	1d0ee <__udivmoddi4+0x27e>
   1d11a:	4618      	mov	r0, r3
   1d11c:	e795      	b.n	1d04a <__udivmoddi4+0x1da>
   1d11e:	4667      	mov	r7, ip
   1d120:	e7d1      	b.n	1d0c6 <__udivmoddi4+0x256>
   1d122:	4681      	mov	r9, r0
   1d124:	e77c      	b.n	1d020 <__udivmoddi4+0x1b0>
   1d126:	3802      	subs	r0, #2
   1d128:	442c      	add	r4, r5
   1d12a:	e747      	b.n	1cfbc <__udivmoddi4+0x14c>
   1d12c:	f1ac 0c02 	sub.w	ip, ip, #2
   1d130:	442b      	add	r3, r5
   1d132:	e72f      	b.n	1cf94 <__udivmoddi4+0x124>
   1d134:	4638      	mov	r0, r7
   1d136:	e708      	b.n	1cf4a <__udivmoddi4+0xda>
   1d138:	4637      	mov	r7, r6
   1d13a:	e6e9      	b.n	1cf10 <__udivmoddi4+0xa0>

0001d13c <__aeabi_idiv0>:
   1d13c:	4770      	bx	lr
   1d13e:	bf00      	nop

0001d140 <__aeabi_memclr>:
   1d140:	2200      	movs	r2, #0
   1d142:	f000 b803 	b.w	1d14c <__aeabi_memset>
   1d146:	bf00      	nop

0001d148 <__aeabi_memcpy>:
   1d148:	f7fd bf68 	b.w	1b01c <memcpy>

0001d14c <__aeabi_memset>:
   1d14c:	b470      	push	{r4, r5, r6}
   1d14e:	0784      	lsls	r4, r0, #30
   1d150:	d046      	beq.n	1d1e0 <__aeabi_memset+0x94>
   1d152:	1e4c      	subs	r4, r1, #1
   1d154:	2900      	cmp	r1, #0
   1d156:	d041      	beq.n	1d1dc <__aeabi_memset+0x90>
   1d158:	b2d5      	uxtb	r5, r2
   1d15a:	4603      	mov	r3, r0
   1d15c:	e002      	b.n	1d164 <__aeabi_memset+0x18>
   1d15e:	1e61      	subs	r1, r4, #1
   1d160:	b3e4      	cbz	r4, 1d1dc <__aeabi_memset+0x90>
   1d162:	460c      	mov	r4, r1
   1d164:	f803 5b01 	strb.w	r5, [r3], #1
   1d168:	0799      	lsls	r1, r3, #30
   1d16a:	d1f8      	bne.n	1d15e <__aeabi_memset+0x12>
   1d16c:	2c03      	cmp	r4, #3
   1d16e:	d92e      	bls.n	1d1ce <__aeabi_memset+0x82>
   1d170:	b2d5      	uxtb	r5, r2
   1d172:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1d176:	2c0f      	cmp	r4, #15
   1d178:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1d17c:	d919      	bls.n	1d1b2 <__aeabi_memset+0x66>
   1d17e:	4626      	mov	r6, r4
   1d180:	f103 0110 	add.w	r1, r3, #16
   1d184:	3e10      	subs	r6, #16
   1d186:	2e0f      	cmp	r6, #15
   1d188:	f841 5c10 	str.w	r5, [r1, #-16]
   1d18c:	f841 5c0c 	str.w	r5, [r1, #-12]
   1d190:	f841 5c08 	str.w	r5, [r1, #-8]
   1d194:	f841 5c04 	str.w	r5, [r1, #-4]
   1d198:	f101 0110 	add.w	r1, r1, #16
   1d19c:	d8f2      	bhi.n	1d184 <__aeabi_memset+0x38>
   1d19e:	f1a4 0110 	sub.w	r1, r4, #16
   1d1a2:	f021 010f 	bic.w	r1, r1, #15
   1d1a6:	f004 040f 	and.w	r4, r4, #15
   1d1aa:	3110      	adds	r1, #16
   1d1ac:	2c03      	cmp	r4, #3
   1d1ae:	440b      	add	r3, r1
   1d1b0:	d90d      	bls.n	1d1ce <__aeabi_memset+0x82>
   1d1b2:	461e      	mov	r6, r3
   1d1b4:	4621      	mov	r1, r4
   1d1b6:	3904      	subs	r1, #4
   1d1b8:	2903      	cmp	r1, #3
   1d1ba:	f846 5b04 	str.w	r5, [r6], #4
   1d1be:	d8fa      	bhi.n	1d1b6 <__aeabi_memset+0x6a>
   1d1c0:	1f21      	subs	r1, r4, #4
   1d1c2:	f021 0103 	bic.w	r1, r1, #3
   1d1c6:	3104      	adds	r1, #4
   1d1c8:	440b      	add	r3, r1
   1d1ca:	f004 0403 	and.w	r4, r4, #3
   1d1ce:	b12c      	cbz	r4, 1d1dc <__aeabi_memset+0x90>
   1d1d0:	b2d2      	uxtb	r2, r2
   1d1d2:	441c      	add	r4, r3
   1d1d4:	f803 2b01 	strb.w	r2, [r3], #1
   1d1d8:	42a3      	cmp	r3, r4
   1d1da:	d1fb      	bne.n	1d1d4 <__aeabi_memset+0x88>
   1d1dc:	bc70      	pop	{r4, r5, r6}
   1d1de:	4770      	bx	lr
   1d1e0:	460c      	mov	r4, r1
   1d1e2:	4603      	mov	r3, r0
   1d1e4:	e7c2      	b.n	1d16c <__aeabi_memset+0x20>
   1d1e6:	5344      	.short	0x5344
   1d1e8:	61662050 	.word	0x61662050
   1d1ec:	43546c69 	.word	0x43546c69
   1d1f0:	61662048 	.word	0x61662048
   1d1f4:	45476c69 	.word	0x45476c69
   1d1f8:	61662054 	.word	0x61662054
   1d1fc:	55526c69 	.word	0x55526c69
   1d200:	6166204e 	.word	0x6166204e
   1d204:	6c69      	.short	0x6c69
   1d206:	7572      	.short	0x7572
   1d208:	612f7473 	.word	0x612f7473
   1d20c:	732f7070 	.word	0x732f7070
   1d210:	6c2f6372 	.word	0x6c2f6372
   1d214:	722e6269 	.word	0x722e6269
   1d218:	00000073 	.word	0x00000073
   1d21c:	0001d206 	.word	0x0001d206
   1d220:	00000013 	.word	0x00000013
   1d224:	0000005b 	.word	0x0000005b
   1d228:	00000005 	.word	0x00000005
   1d22c:	0001d206 	.word	0x0001d206
   1d230:	00000013 	.word	0x00000013
   1d234:	00000064 	.word	0x00000064
   1d238:	00000005 	.word	0x00000005
   1d23c:	50494843 	.word	0x50494843
   1d240:	61662038 	.word	0x61662038
   1d244:	00006c69 	.word	0x00006c69
   1d248:	0001d206 	.word	0x0001d206
   1d24c:	00000013 	.word	0x00000013
   1d250:	00000076 	.word	0x00000076
   1d254:	00000005 	.word	0x00000005
   1d258:	0001d206 	.word	0x0001d206
   1d25c:	00000013 	.word	0x00000013
   1d260:	0000007c 	.word	0x0000007c
   1d264:	0000000d 	.word	0x0000000d
   1d268:	0001d206 	.word	0x0001d206
   1d26c:	00000013 	.word	0x00000013
   1d270:	0000007b 	.word	0x0000007b
   1d274:	00000009 	.word	0x00000009
   1d278:	696e6170 	.word	0x696e6170
   1d27c:	2063      	.short	0x2063
   1d27e:	6f6e      	.short	0x6f6e
   1d280:	636f6c20 	.word	0x636f6c20
   1d284:	0a          	.byte	0x0a
   1d285:	61          	.byte	0x61
   1d286:	2074      	.short	0x2074
   1d288:	6e696c20 	.word	0x6e696c20
   1d28c:	2065      	.short	0x2065
   1d28e:	000a      	.short	0x000a
   1d290:	0001d206 	.word	0x0001d206
   1d294:	00000013 	.word	0x00000013
   1d298:	00000094 	.word	0x00000094
   1d29c:	00000014 	.word	0x00000014
   1d2a0:	74737552 	.word	0x74737552
   1d2a4:	756f7420 	.word	0x756f7420
   1d2a8:	73206863 	.word	0x73206863
   1d2ac:	6f736e65 	.word	0x6f736e65
   1d2b0:	00000a72 	.word	0x00000a72
   1d2b4:	00000000 	.word	0x00000000
   1d2b8:	0001d2b4 	.word	0x0001d2b4
   1d2bc:	65737361 	.word	0x65737361
   1d2c0:	6f697472 	.word	0x6f697472
   1d2c4:	6166206e 	.word	0x6166206e
   1d2c8:	64656c69 	.word	0x64656c69
   1d2cc:	2860203a 	.word	0x2860203a
   1d2d0:	7466656c 	.word	0x7466656c
   1d2d4:	203d3d20 	.word	0x203d3d20
   1d2d8:	68676972 	.word	0x68676972
   1d2dc:	0a602974 	.word	0x0a602974
   1d2e0:	656c2020 	.word	0x656c2020
   1d2e4:	203a7466 	.word	0x203a7466
   1d2e8:	60          	.byte	0x60
   1d2e9:	60          	.byte	0x60
   1d2ea:	0a2c      	.short	0x0a2c
   1d2ec:	67697220 	.word	0x67697220
   1d2f0:	203a7468 	.word	0x203a7468
   1d2f4:	60          	.byte	0x60
   1d2f5:	60          	.byte	0x60
   1d2f6:	203a      	.short	0x203a
   1d2f8:	0001d2bc 	.word	0x0001d2bc
   1d2fc:	0000002d 	.word	0x0000002d
   1d300:	0001d2e9 	.word	0x0001d2e9
   1d304:	0000000c 	.word	0x0000000c
   1d308:	0001d2f5 	.word	0x0001d2f5
   1d30c:	00000003 	.word	0x00000003
   1d310:	0001d2f8 	.word	0x0001d2f8
   1d314:	20515249 	.word	0x20515249
   1d318:	74696e69 	.word	0x74696e69
   1d31c:	69616620 	.word	0x69616620
   1d320:	0000006c 	.word	0x0000006c
   1d324:	0001d314 	.word	0x0001d314
   1d328:	0000000d 	.word	0x0000000d
   1d32c:	0001d324 	.word	0x0001d324
   1d330:	0001d330 	.word	0x0001d330
   1d334:	74737572 	.word	0x74737572
   1d338:	7070612f 	.word	0x7070612f
   1d33c:	6372732f 	.word	0x6372732f
   1d340:	756f742f 	.word	0x756f742f
   1d344:	735f6863 	.word	0x735f6863
   1d348:	6f736e65 	.word	0x6f736e65
   1d34c:	73722e72 	.word	0x73722e72
   1d350:	0001d334 	.word	0x0001d334
   1d354:	0000001c 	.word	0x0000001c
   1d358:	0000003f 	.word	0x0000003f
   1d35c:	00000005 	.word	0x00000005
   1d360:	20633269 	.word	0x20633269
   1d364:	72646461 	.word	0x72646461
   1d368:	0001d334 	.word	0x0001d334
   1d36c:	0000001c 	.word	0x0000001c
   1d370:	0000004b 	.word	0x0000004b
   1d374:	00000011 	.word	0x00000011
   1d378:	63756f74 	.word	0x63756f74
   1d37c:	74616468 	.word	0x74616468
   1d380:	61662061 	.word	0x61662061
   1d384:	00006c69 	.word	0x00006c69
   1d388:	0001d334 	.word	0x0001d334
   1d38c:	0000001c 	.word	0x0000001c
   1d390:	00000056 	.word	0x00000056
   1d394:	00000009 	.word	0x00000009
   1d398:	0001d334 	.word	0x0001d334
   1d39c:	0000001c 	.word	0x0000001c
   1d3a0:	0000005a 	.word	0x0000005a
   1d3a4:	00000031 	.word	0x00000031
   1d3a8:	64616572 	.word	0x64616572
   1d3ac:	756f7420 	.word	0x756f7420
   1d3b0:	61646863 	.word	0x61646863
   1d3b4:	66206174 	.word	0x66206174
   1d3b8:	006c6961 	.word	0x006c6961
   1d3bc:	0001d334 	.word	0x0001d334
   1d3c0:	0000001c 	.word	0x0000001c
   1d3c4:	00000089 	.word	0x00000089
   1d3c8:	00000005 	.word	0x00000005
   1d3cc:	0001d334 	.word	0x0001d334
   1d3d0:	0000001c 	.word	0x0000001c
   1d3d4:	00000095 	.word	0x00000095
   1d3d8:	00000037 	.word	0x00000037
   1d3dc:	00000000 	.word	0x00000000

0001d3e0 <str.0>:
   1d3e0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1d3f0:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1d400:	00000077 0001d334 0000001c 00000095     w...4...........
   1d410:	00000024 00000000 00000000 00000000     $...............

0001d420 <str.1>:
   1d420:	65747461 2074706d 61206f74 77206464     attempt to add w
   1d430:	20687469 7265766f 776f6c66 0001d334     ith overflow4...
   1d440:	0000001c 00000095 00000020 0001d334     ........ ...4...
   1d450:	0000001c 00000099 00000009 0001d334     ............4...
   1d460:	0000001c 0000009a 00000037 0001d334     ........7...4...
   1d470:	0000001c 0000009a 00000023 0001d334     ........#...4...
   1d480:	0000001c 0000009a 0000001f 0001d334     ............4...
   1d490:	0000001c 0000009b 00000037 0001d334     ........7...4...
   1d4a0:	0000001c 0000009b 00000023 0001d334     ........#...4...
   1d4b0:	0000001c 0000009b 0000001f 0001d334     ............4...
   1d4c0:	0000001c 0000009c 00000009 0001d334     ............4...
   1d4d0:	0000001c 0000009e 00000037 0001d334     ........7...4...
   1d4e0:	0000001c 0000009e 00000023 0001d334     ........#...4...
   1d4f0:	0000001c 0000009e 0000001f 0001d334     ............4...
   1d500:	0000001c 0000009f 00000037 0001d334     ........7...4...
   1d510:	0000001c 0000009f 00000023 0001d334     ........#...4...
   1d520:	0000001c 0000009f 0000001f 0001d334     ............4...
   1d530:	0000001c 000000a0 00000009 0001d334     ............4...
   1d540:	0000001c 000000a4 00000030 0001d334     ........0...4...
   1d550:	0000001c 000000a4 0000001a 0001d334     ............4...
   1d560:	0000001c 000000a4 00000016 0001d334     ............4...
   1d570:	0000001c 000000a3 00000009 0001d334     ............4...
   1d580:	0000001c 000000a6 00000030 0001d334     ........0...4...
   1d590:	0000001c 000000a6 0000001a 0001d334     ............4...
   1d5a0:	0000001c 000000a6 00000016 0001d334     ............4...
   1d5b0:	0000001c 000000a5 00000009 0001d334     ............4...
   1d5c0:	0000001c 000000aa 0000002d 0001d334     ........-...4...
   1d5d0:	0000001c 000000aa 0000001a 0001d334     ............4...
   1d5e0:	0000001c 000000aa 00000016 0001d334     ............4...
   1d5f0:	0000001c 000000a9 00000009 0001d334     ............4...
   1d600:	0000001c 000000ac 0000002d 0001d334     ........-...4...
   1d610:	0000001c 000000ac 0000001a 0001d334     ............4...
   1d620:	0000001c 000000ac 00000016 0001d334     ............4...
   1d630:	0000001c 000000ab 00000009 0001d334     ............4...
   1d640:	0000001c 000000af 0000000d 0001d334     ............4...
   1d650:	0000001c 000000af 0000002c 20633269     ........,...i2c 
   1d660:	00667562 0001d334 0000001c 000000f1     buf.4...........
   1d670:	00000005 0001d334 0000001c 000000f2     ....4...........
   1d680:	0000000d 0001d334 0000001c 000000f2     ....4...........
   1d690:	00000005 20633269 6c696166 7375520a     ....i2c fail.Rus
   1d6a0:	48432074 0a385049 50532512 20454341     t CHIP8..%SPACE 
   1d6b0:	41564e49 53524544 392e3020 79422031     INVADERS 0.91 By
   1d6c0:	76614420 57206469 45544e49 61006052      David WINTER`.a
   1d6d0:	a3086200 7118d0dd 311ef208 702d1220     .b.....q...1 .-p
   1d6e0:	30006108 692d1240 6e156c05 60912300     .a.0@.-i.l.n.#.`
   1d6f0:	f015f00a 12003007 7e91234b 66451201     .....0..K#.~..Ef
   1d700:	691c6800 6b046a00 6d046c0a 000f6e3c     .h.i.j.k.l.m<n..
   1d710:	237523e0 6015fd51 129ee004 3875237d     .#u#Q..`....}#u8
   1d720:	23ff7800 e0066075 238b129e 78393875     .x.#u`.....#u89x
   1d730:	36752301 609f1200 129ee005 650166e9     .#u6...`.....f.e
   1d740:	a380841b a351d4d9 7551d4d9 12ff35ff     ......Q...Qu.5..
   1d750:	120066ad 3f51d4e9 d4e91201 83006651     .f....Q?....Qf..
   1d760:	83037340 83f862b5 33086222 23c91200     @s...b.."b.3...#
   1d770:	4306827d 33d31208 23d51210 3306827d     }..C...3...#}..3
   1d780:	23dd1218 4306827d 33e71220 23e91228     ...#}..C ..3(..#
   1d790:	13003e7d 49067907 6a006918 6c0a6b04     }>...y.I.i.j.k.l
   1d7a0:	6ef47d04 23e0000f fd752351 f76f1215     .}.n...#Q#u...o.
   1d7b0:	12003707 2315fd6f 3ba48b51 7c1b1312     .7..o..#Q..;...|
   1d7c0:	3bfc6a02 7c231302 23046a02 12183c51     .j.;..#|.j.#Q<..
   1d7d0:	a4e0006f 611460dd d00f6208 f208701f     o....`.a.b...p..
   1d7e0:	132c301e f0ff6033 3007f015 f0411300     .0,.3`.....0..A.
   1d7f0:	a7e0000a 1265fe06 f9c1a325 2308611e     ......e.%....a.#
   1d800:	23068169 23068169 23068169 00d07b69     i..#i..#i..#i{..
   1d810:	80e080ee db003012 000c7bc6 60d9a3ee     .....0...{.....`
   1d820:	0004d81c 8e5123ee 60512323 f018f005     .....#Q.##Q`....
   1d830:	3007f015 00891300 8d006aee e9046be0     ...0.....j...k..
   1d840:	a65712a1 f01efd0c 13ff3065 6b006aaf     ..W.....e0...j.k
   1d850:	6e016d04 a5971301 db1ef00a 7d087bc6     .m.n.........{.}
   1d860:	3a017a01 00971307 ff7e3cee 7e9999ff     .z.:.....<~....~
   1d870:	2424ffff 3cff7ee7 81db7e3c ff7e3c42     ..$$.~.<<~..B<~.
   1d880:	7c3810db 7f0000fe 7f003f00 01000000     ..8|.....?......
   1d890:	03030101 00000303 2020203f 20202020     ........?       
   1d8a0:	08083f20 fe0000ff fe00fc00 7e000000      ?.............~
   1d8b0:	62624242 00006262 000000ff 00000000     BBbbbb..........
   1d8c0:	0000ff00 007d00ff 7d057d41 c200007d     ......}.A}.}}...
   1d8d0:	6c44c6c2 00003828 000000ff 00000000     ..Dl(8..........
   1d8e0:	0000ff00 10f700ff 04f7f714 7c000004     ...............|
   1d8f0:	c2c2fe44 0000c2c2 000000ff 00000000     D...............
   1d900:	0000ff00 20ef00ff 2fe8e828 f900002f     ....... (..//...
   1d910:	c5c5c585 0000f9c5 000000ff 00000000     ................
   1d920:	0000ff00 00be00ff be203020 f70000be     ........ 0 .....
   1d930:	8585e704 0000f484 000000ff 00000000     ................
   1d940:	0000ff00 7f0000ff 7f003f00 ef000000     .........?......
   1d950:	e000ef28 00006f60 000000ff 00000000     (...`o..........
   1d960:	0000ff00 fe0000ff fe00fc00 c0000000     ................
   1d970:	c0c0c000 0000c0c0 040404fc 04040404     ................
   1d980:	1010fc04 b981f9ff fa9a9a8b 9a8afa00     ................
   1d990:	f8999b9a f42525e6 00343434 37341417     .....%%.444...47
   1d9a0:	dfc72636 d85c5050 df00dfd8 1b121f11     6&..PP\.........
   1d9b0:	447cd919 868686fe 82fe84fc 80fefe82     ..|D............
   1d9c0:	fec0c0c0 c2c282fc 80fefcc2 fec0c0f8     ................
   1d9d0:	c0f080fe 80fec0c0 fe8686be 86fe8686     ................
   1d9e0:	10108686 10101010 48181818 909c7848     ...........HHx..
   1d9f0:	9cb0c0b0 c0c08080 92eefec0 86868692     ................
   1da00:	868682fe 827c8686 7c868686 c0fe82fe     ......|....|....
   1da10:	827cc0c0 7ac4cac2 90fe86fe c0fe849c     ..|....z........
   1da20:	fe0202fe 303010fe 82823030 fec2c2c2     ......0000......
   1da30:	ee828282 86861038 ee929296 38384482     ....8........D88
   1da40:	82828244 303030fe f01e02fe 0000fe80     D....000........
   1da50:	06060000 60000000 0000c060 00000000     .......``.......
   1da60:	18181818 c67c1800 1800180c fefe0000     ......|.........
   1da70:	82fe0000 fe868686 18080808 02fe1818     ................
   1da80:	fec0c0fe 061e02fe c484fe06 0404fec4     ................
   1da90:	06fe80fe c0c0fe06 fe82fec0 060202fe     ................
   1daa0:	447c0606 fe8686fe 06fe82fe fe440606     ..|D..........D.
   1dab0:	44fe4444 a8a8a8a8 6ca8a8a8 180c005a     DD.D.......lZ...
   1dac0:	7e4e30a8 66181200 665aa86c 00662454     .0N~...fl.ZfT$f.
   1dad0:	12184848 a89006a8 307e0012 3084a812     HH........~0...0
   1dae0:	6618724e a8a8a8a8 5490a8a8 7848a878     Nr.f.......Tx.Hx
   1daf0:	12a8726c 66726c18 72a89054 30a8182a     lr...lrfT..r*..0
   1db00:	12007e4e a86c6618 5aa85472 187e1866     N~...fl.rT.Zf.~.
   1db10:	72a8724e 6630182a 7e4e30a8 54306c00     Nr.r*.0f.0N~.l0T
   1db20:	a8a89c4e a8a8a8a8 7e5448a8 5490a818     N........HT~...T
   1db30:	6ca86678 a85a302a 2a723084 00a8d8a8     xf.l*0Z..0r*....
   1db40:	e4a8124e 4e00a8a2 2a6ca812 a8725454     N......N..l*TTr.
   1db50:	2a723084 a89cdea8 a8182a72 5a48540c     .0r*....r*...THZ
   1db60:	66187278 5a1866a8 6c726654 002a72a8     xr.f.f.ZTfrl.r*.
   1db70:	2a72a872 4e30a818 1812007e 00a86c66     r.r*..0N~...fl..
   1db80:	30a81866 18660c4e 4e306c00 2a72a824     f..0N.f..l0N$.r*
   1db90:	a8663018 0c66541e 24a89c18 a8125454     .0f..Tf....$TT..
   1dba0:	3c0c7842 a8a8aea8 a8a8a8a8 0000ffa8     Bx.<............
	...
   1dbbc:	73757200 70612f74 72732f70 68632f63     .rust/app/src/ch
   1dbcc:	2e387069 00007372 0001dbbd 00000015     ip8.rs..........
   1dbdc:	00000054 00000015 00000000 00000000     T...............
   1dbec:	00000000                                ....

0001dbf0 <str.0>:
   1dbf0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1dc00:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1dc10:	00000077 0001dbbd 00000015 00000054     w...........T...
   1dc20:	00000011 00000000 00000000 00000000     ................

0001dc30 <str.1>:
   1dc30:	65747461 2074706d 61206f74 77206464     attempt to add w
   1dc40:	20687469 7265766f 776f6c66 0001dbbd     ith overflow....
   1dc50:	00000015 00000055 00000012 0001dbbd     ....U...........
   1dc60:	00000015 00000056 0000001d 0001dbbd     ....V...........
   1dc70:	00000015 00000057 0000001d 0001dbbd     ....W...........
   1dc80:	00000015 0000005a 00000042 00000000     ....Z...B.......

0001dc90 <str.2>:
   1dc90:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1dca0:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1dcb0:	00000077 0001dbbd 00000015 0000005a     w...........Z...
   1dcc0:	0000005d 0001dbbd 00000015 00000064     ]...........d...
   1dcd0:	00000015 0001dbbd 00000015 00000064     ............d...
   1dce0:	00000011 0001dbbd 00000015 00000065     ............e...
   1dcf0:	00000012 0001dbbd 00000015 0000008a     ................
   1dd00:	00000009 50494843 6f742038 20686375     ....CHIP8 touch 
   1dd10:	20746f6e 646e6168 0a64656c 6573552f     not handled./Use
   1dd20:	4c2f7372 79707075 61632e2f 2f6f6772     rs/Luppy/.cargo/
   1dd30:	69676572 79727473 6372732f 7469672f     registry/src/git
   1dd40:	2e627568 2d6d6f63 63636531 39393236     hub.com-1ecc6299
   1dd50:	65396264 33323863 62696c2f 70696863     db9ec823/libchip
   1dd60:	2e302d38 2f322e31 2f637273 2e62696c     8-0.1.2/src/lib.
   1dd70:	00007372 0001dd1c 00000056 0000009d     rs......V.......
   1dd80:	00000014 0001dd1c 00000056 000000d4     ........V.......
   1dd90:	00000011 0001dd1c 00000056 000000d5     ........V.......
   1dda0:	0000001a 00000000 00000000 00000000     ................

0001ddb0 <str.0>:
   1ddb0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1ddc0:	20687469 7265766f 776f6c66 0001dd1c     ith overflow....
   1ddd0:	00000056 000000d5 00000011 00000005     V...............
   1dde0:	0001dddc 4c205d5b 78562044 495b202c     ....[] LD Vx, [I
   1ddf0:	0000005d 0001dde4 00000001 0001dde5     ]...............
   1de00:	0000000c 0001ddf4 00000000 00000020     ............ ...
   1de10:	00000008 00000002 00000000 00000000     ................
   1de20:	00000004 00000003 0001de08 6362696c     ............libc
   1de30:	38706968 4b53205d 78562050 504a205d     hip8] SKP Vx] JP
   1de40:	6e6e6e20 00000040 00000020 0001de2c      nnn@... ...,...
   1de50:	00000008 0001de2c 00000008 0001dd1c     ....,...........
   1de60:	00000056 000001a1 0001de4c 0001dd1c     V.......L.......
   1de70:	00000056 000001a3 0000001d 0001dd1c     V...............
   1de80:	00000056 000001a4 0000002a 0001dd1c     V.......*.......
   1de90:	00000056 000001a4 00000021 0001dd1c     V.......!.......
   1dea0:	00000056 000001a4 00000015 444c205d     V...........] LD
   1deb0:	5d495b20 7856202c 0001dde4 00000001      [I], Vx........
   1dec0:	0001deac 0000000c 0001deb8 0001de2c     ............,...
   1ded0:	00000008 0001de2c 00000008 0001dd1c     ....,...........
   1dee0:	00000056 0000019a 0001decc 0001dd1c     V...............
   1def0:	00000056 0000019c 0000001d 0001dd1c     V...............
   1df00:	00000056 0000019d 00000035 0001dd1c     V.......5.......
   1df10:	00000056 0000019d 0000001e 0001dd1c     V...............
   1df20:	00000056 0000019d 00000015 444c205d     V...........] LD
   1df30:	202c4220 00007856 0001dde4 00000001      B, Vx..........
   1df40:	0001df2c 0000000a 0001df38 0001de2c     ,.......8...,...
   1df50:	00000008 0001de2c 00000008 0001dd1c     ....,...........
   1df60:	00000056 00000193 0001df4c 0001dd1c     V.......L.......
   1df70:	00000056 00000194 0000001b 0001dd1c     V...............
   1df80:	00000056 00000195 00000011 0001dd1c     V...............
   1df90:	00000056 00000196 0000001a 0001dd1c     V...............
   1dfa0:	00000056 00000196 00000011 0001dd1c     V...............
   1dfb0:	00000056 00000197 0000001a 0001dd1c     V...............
   1dfc0:	00000056 00000197 00000011 444c205d     V...........] LD
   1dfd0:	202c4620 00007856 0001dde4 00000001      F, Vx..........
   1dfe0:	0001dfcc 0000000a 0001dfd8 0001de2c     ............,...
   1dff0:	00000008 0001de2c 00000008 0001dd1c     ....,...........
   1e000:	00000056 0000018f 0001dfec 0001dd1c     V...............
   1e010:	00000056 00000190 0000001b 0001dd1c     V...............
   1e020:	00000056 00000190 0000001a 00000000     V...............

0001e030 <str.1>:
   1e030:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1e040:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1e050:	41205d77 49204444 7856202c 0001dde4     w] ADD I, Vx....
   1e060:	00000001 0001e051 0000000b 0001e05c     ....Q.......\...
   1e070:	0001de2c 00000008 0001de2c 00000008     ,.......,.......
   1e080:	0001dd1c 00000056 0000018b 0001e070     ....V.......p...
   1e090:	0001dd1c 00000056 0000018c 0000002e     ....V...........
   1e0a0:	444c205d 2c545320 00785620 0001dde4     ] LD ST, Vx.....
   1e0b0:	00000001 0001e0a0 0000000b 0001e0ac     ................
   1e0c0:	0001de2c 00000008 0001de2c 00000008     ,.......,.......
   1e0d0:	0001dd1c 00000056 00000187 0001e0c0     ....V...........
   1e0e0:	0001dd1c 00000056 00000188 0000001b     ....V...........
   1e0f0:	444c205d 2c544420 00785620 0001dde4     ] LD DT, Vx.....
   1e100:	00000001 0001e0f0 0000000b 0001e0fc     ................
   1e110:	0001de2c 00000008 0001de2c 00000008     ,.......,.......
   1e120:	0001dd1c 00000056 00000183 0001e110     ....V...........
   1e130:	0001dd1c 00000056 00000184 0000001b     ....V...........
   1e140:	444c205d 2c785620 00004b20 0001dde4     ] LD Vx, K......
   1e150:	00000001 0001e140 0000000a 0001e14c     ....@.......L...
   1e160:	0001de2c 00000008 0001de2c 00000008     ,.......,.......
   1e170:	0001dd1c 00000056 0000017f 0001e160     ....V.......`...
   1e180:	0001dd1c 00000056 00000180 00000011     ....V...........
   1e190:	444c205d 2c785620 00544420 0001dde4     ] LD Vx, DT.....
   1e1a0:	00000001 0001e190 0000000b 0001e19c     ................
   1e1b0:	0001de2c 00000008 0001de2c 00000008     ,.......,.......
   1e1c0:	0001dd1c 00000056 0000017b 0001e1b0     ....V...{.......
   1e1d0:	0001dd1c 00000056 0000017c 00000011     ....V...|.......
   1e1e0:	4b53205d 5620504e 00000078 0001dde4     ] SKNP Vx.......
   1e1f0:	00000001 0001e1e0 00000009 0001e1ec     ................
   1e200:	0001de2c 00000008 0001de2c 00000008     ,.......,.......
   1e210:	0001dd1c 00000056 00000175 0001e200     ....V...u.......
   1e220:	0001dd1c 00000056 00000176 00000021     ....V...v...!...
   1e230:	0001dde4 00000001 0001de34 00000008     ........4.......
   1e240:	0001e230 0001de2c 00000008 0001de2c     0...,.......,...
   1e250:	00000008 0001dd1c 00000056 0000016f     ........V...o...
   1e260:	0001e244 0001dd1c 00000056 00000170     D.......V...p...
   1e270:	00000020 5244205d 78562057 7956202c      ...] DRW Vx, Vy
   1e280:	006e202c 0001dde4 00000001 0001e274     , n.........t...
   1e290:	0000000f 0001e284 0001de2c 00000008     ........,.......
   1e2a0:	0001de2c 00000008 0001dd1c 00000056     ,...........V...
   1e2b0:	00000156 0001e298 0001dd1c 00000056     V...........V...
   1e2c0:	00000157 0000001d 0001dd1c 00000056     W...........V...
   1e2d0:	00000158 0000001d 0001dd1c 00000056     X...........V...
   1e2e0:	0000015e 00000026 0001dd1c 00000056     ^...&.......V...
   1e2f0:	0000015e 0000001d 0001dd1c 00000056     ^...........V...
   1e300:	00000160 00000021 00000000 00000000     `...!...........

0001e310 <str.2>:
   1e310:	65747461 2074706d 63206f74 75636c61     attempt to calcu
   1e320:	6574616c 65687420 6d657220 646e6961     late the remaind
   1e330:	77207265 20687469 69642061 6f736976     er with a diviso
   1e340:	666f2072 72657a20 0000006f 0001dd1c     r of zero.......
   1e350:	00000056 00000163 00000025 0001dd1c     V...c...%.......
   1e360:	00000056 00000165 0000002d 00000000     V...e...-.......

0001e370 <str.3>:
   1e370:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1e380:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1e390:	00000077 0001dd1c 00000056 00000165     w.......V...e...
   1e3a0:	00000028 00000000 00000000 00000000     (...............

0001e3b0 <str.4>:
   1e3b0:	65747461 2074706d 73206f74 74666968     attempt to shift
   1e3c0:	66656c20 69772074 6f206874 66726576      left with overf
   1e3d0:	5d776f6c 444e5220 2c785620 006b6b20     low] RND Vx, kk.
   1e3e0:	0001dde4 00000001 0001e3d3 0000000c     ................
   1e3f0:	0001e3e0 0001de2c 00000008 0001de2c     ....,.......,...
   1e400:	00000008 0001dd1c 00000056 00000152     ........V...R...
   1e410:	0001e3f4 0001dd1c 00000056 00000153     ........V...S...
   1e420:	00000011 504a205d 2c305620 6e6e6e20     ....] JP V0, nnn
   1e430:	0001dde4 00000001 0001e424 0000000c     ........$.......
   1e440:	0001e430 0001de2c 00000008 0001de2c     0...,.......,...
   1e450:	00000008 0001dd1c 00000056 0000014e     ........V...N...
   1e460:	0001e444 444c205d 202c4920 006e6e6e     D...] LD I, nnn.
   1e470:	0001dde4 00000001 0001e464 0000000b     ........d.......
   1e480:	0001e470 0001de2c 00000008 0001de2c     p...,.......,...
   1e490:	00000008 0001dd1c 00000056 0000014a     ........V...J...
   1e4a0:	0001e484 4e53205d 78562045 7956202c     ....] SNE Vx, Vy
   1e4b0:	0001dde4 00000001 0001e4a4 0000000c     ................
   1e4c0:	0001e4b0 0001de2c 00000008 0001de2c     ....,.......,...
   1e4d0:	00000008 0001dd1c 00000056 00000144     ........V...D...
   1e4e0:	0001e4c4 0001dd1c 00000056 00000145     ........V...E...
   1e4f0:	00000014 0001dd1c 00000056 00000145     ........V...E...
   1e500:	00000021 4853205d 7856204c 7956202c     !...] SHL Vx, Vy
   1e510:	0001dde4 00000001 0001e504 0000000c     ................
   1e520:	0001e510 0001de2c 00000008 0001de2c     ....,.......,...
   1e530:	00000008 0001dd1c 00000056 0000013f     ........V...?...
   1e540:	0001e524 0001dd1c 00000056 00000140     $.......V...@...
   1e550:	00000020 0001dd1c 00000056 00000141      .......V...A...
   1e560:	0000001d 0001dd1c 00000056 00000141     ........V...A...
   1e570:	00000011 5553205d 56204e42 56202c78     ....] SUBN Vx, V
   1e580:	00000079 0001dde4 00000001 0001e574     y...........t...
   1e590:	0000000d 0001e584 0001de2c 00000008     ........,.......
   1e5a0:	0001de2c 00000008 0001dd1c 00000056     ,...........V...
   1e5b0:	00000139 0001e598 0001dd1c 00000056     9...........V...
   1e5c0:	0000013a 0000001e 0001dd1c 00000056     :...........V...
   1e5d0:	0000013a 00000038 0001dd1c 00000056     :...8.......V...
   1e5e0:	0000013b 00000011 4853205d 78562052     ;.......] SHR Vx
   1e5f0:	7956202c 0001dde4 00000001 0001e5e8     , Vy............
   1e600:	0000000c 0001e5f4 0001de2c 00000008     ........,.......
   1e610:	0001de2c 00000008 0001dd1c 00000056     ,...........V...
   1e620:	00000134 0001e608 0001dd1c 00000056     4...........V...
   1e630:	00000135 0000001f 0001dd1c 00000056     5...........V...
   1e640:	00000136 0000001d 0001dd1c 00000056     6...........V...
   1e650:	00000136 00000011 5553205d 78562042     6.......] SUB Vx
   1e660:	7956202c 0001dde4 00000001 0001e658     , Vy........X...
   1e670:	0000000c 0001e664 0001de2c 00000008     ....d...,.......
   1e680:	0001de2c 00000008 0001dd1c 00000056     ,...........V...
   1e690:	0000012e 0001e678 0001dd1c 00000056     ....x.......V...
   1e6a0:	0000012f 0000001e 0001dd1c 00000056     /...........V...
   1e6b0:	0000012f 00000038 0001dd1c 00000056     /...8.......V...
   1e6c0:	00000130 00000011 4441205d 78562044     0.......] ADD Vx
   1e6d0:	7956202c 0001dde4 00000001 0001e6c8     , Vy............
   1e6e0:	0000000c 0001e6d4 0001de2c 00000008     ........,.......
   1e6f0:	0001de2c 00000008 0001dd1c 00000056     ,...........V...
   1e700:	00000128 0001e6e8 0001dd1c 00000056     (...........V...
   1e710:	00000129 0000001e 0001dd1c 00000056     )...........V...
   1e720:	00000129 00000038 0001dd1c 00000056     )...8.......V...
   1e730:	0000012a 00000011 4f58205d 78562052     *.......] XOR Vx
   1e740:	7956202c 0001dde4 00000001 0001e738     , Vy........8...
   1e750:	0000000c 0001e744 0001de2c 00000008     ....D...,.......
   1e760:	0001de2c 00000008 0001dd1c 00000056     ,...........V...
   1e770:	00000124 0001e758 0001dd1c 00000056     $...X.......V...
   1e780:	00000125 0000001e 0001dd1c 00000056     %...........V...
   1e790:	00000125 00000011 4e41205d 78562044     %.......] AND Vx
   1e7a0:	7956202c 0001dde4 00000001 0001e798     , Vy............
   1e7b0:	0000000c 0001e7a4 0001de2c 00000008     ........,.......
   1e7c0:	0001de2c 00000008 0001dd1c 00000056     ,...........V...
   1e7d0:	00000120 0001e7b8 0001dd1c 00000056      ...........V...
   1e7e0:	00000121 0000001e 0001dd1c 00000056     !...........V...
   1e7f0:	00000121 00000011 524f205d 2c785620     !.......] OR Vx,
   1e800:	00795620 0001dde4 00000001 0001e7f8      Vy.............
   1e810:	0000000b 0001e804 0001de2c 00000008     ........,.......
   1e820:	0001de2c 00000008 0001dd1c 00000056     ,...........V...
   1e830:	0000011c 0001e818 0001dd1c 00000056     ............V...
   1e840:	0000011d 0000001e 0001dd1c 00000056     ............V...
   1e850:	0000011d 00000011 444c205d 2c785620     ........] LD Vx,
   1e860:	00795620 0001dde4 00000001 0001e858      Vy.........X...
   1e870:	0000000b 0001e864 0001de2c 00000008     ....d...,.......
   1e880:	0001de2c 00000008 0001dd1c 00000056     ,...........V...
   1e890:	00000118 0001e878 0001dd1c 00000056     ....x.......V...
   1e8a0:	00000119 0000001d 0001dd1c 00000056     ............V...
   1e8b0:	00000119 00000011 4441205d 78562044     ........] ADD Vx
   1e8c0:	6b6b202c 0001dde4 00000001 0001e8b8     , kk............
   1e8d0:	0000000c 0001e8c4 0001de2c 00000008     ........,.......
   1e8e0:	0001de2c 00000008 0001dd1c 00000056     ,...........V...
   1e8f0:	00000114 0001e8d8 0001dd1c 00000056     ............V...
   1e900:	00000115 0000001d 0001dd1c 00000056     ............V...
   1e910:	00000115 00000011 444c205d 2c785620     ........] LD Vx,
   1e920:	006b6b20 0001dde4 00000001 0001e918      kk.............
   1e930:	0000000b 0001e924 0001de2c 00000008     ....$...,.......
   1e940:	0001de2c 00000008 0001dd1c 00000056     ,...........V...
   1e950:	00000110 0001e938 0001dd1c 00000056     ....8.......V...
   1e960:	00000111 00000011 6e49205d 696c6176     ........] Invali
   1e970:	706f2064 0000203a 0001dde4 00000001     d op: ..........
   1e980:	0001e968 0000000e 0001e978 00000000     h.......x.......
   1e990:	00000020 00000008 00000002 00000000      ...............
   1e9a0:	00000000 00000004 00000003 00000001     ................
   1e9b0:	00000020 00000008 00000002 00000000      ...............
   1e9c0:	00000000 00000004 00000003 0001e98c     ................
   1e9d0:	633a3a3c 3a65726f 63616d3a 3a736f72     <::core::macros:
   1e9e0:	6e61703a 6d206369 6f726361 00003e73     :panic macros>..
   1e9f0:	0001e9d0 0000001e 00000005 00000032     ............2...
   1ea00:	4553205d 2c785620 00795620 0001dde4     ] SE Vx, Vy.....
   1ea10:	00000001 0001ea00 0000000b 0001ea0c     ................
   1ea20:	0001de2c 00000008 0001de2c 00000008     ,.......,.......
   1ea30:	0001dd1c 00000056 0000010a 0001ea20     ....V....... ...
   1ea40:	0001dd1c 00000056 0000010b 00000014     ....V...........
   1ea50:	0001dd1c 00000056 0000010b 00000021     ....V.......!...
   1ea60:	4e53205d 78562045 6b6b202c 0001dde4     ] SNE Vx, kk....
   1ea70:	00000001 0001ea60 0000000c 0001ea6c     ....`.......l...
   1ea80:	0001de2c 00000008 0001de2c 00000008     ,.......,.......
   1ea90:	0001dd1c 00000056 00000104 0001ea80     ....V...........
   1eaa0:	0001dd1c 00000056 00000105 00000014     ....V...........
   1eab0:	4553205d 20785620 00006b6b 0001dde4     ] SE Vx kk......
   1eac0:	00000001 0001eab0 0000000a 0001eabc     ................
   1ead0:	0001de2c 00000008 0001de2c 00000008     ,.......,.......
   1eae0:	0001dd1c 00000056 000000fe 0001ead0     ....V...........
   1eaf0:	0001dd1c 00000056 000000ff 00000014     ....V...........
   1eb00:	4143205d 6e204c4c 00006e6e 0001dde4     ] CALL nnn......
   1eb10:	00000001 0001eb00 0000000a 0001eb0c     ................
   1eb20:	0001de2c 00000008 0001de2c 00000008     ,.......,.......
   1eb30:	0001dd1c 00000056 000000f9 0001eb20     ....V....... ...
   1eb40:	0001dde4 00000001 0001de3c 00000008     ........<.......
   1eb50:	0001eb40 0001de2c 00000008 0001de2c     @...,.......,...
   1eb60:	00000008 0001dd1c 00000056 000000f5     ........V.......
   1eb70:	0001eb54 5953205d 6e6e2053 0000006e     T...] SYS nnn...
   1eb80:	0001dde4 00000001 0001eb74 00000009     ........t.......
   1eb90:	0001eb80 0001de2c 00000008 0001de2c     ....,.......,...
   1eba0:	00000008 0001dd1c 00000056 000000f1     ........V.......
   1ebb0:	0001eb94 20746f6e 6c706d69 6e656d65     ....not implemen
   1ebc0:	00646574 0001e9d0 0000001e 00000002     ted.............
   1ebd0:	00000002 4552205d 00000054 0001dde4     ....] RET.......
   1ebe0:	00000001 0001ebd4 00000005 0001ebdc     ................
   1ebf0:	0001de2c 00000008 0001de2c 00000008     ,.......,.......
   1ec00:	0001dd1c 00000056 000000ec 0001ebf0     ....V...........
   1ec10:	4c43205d 00000053 0001dde4 00000001     ] CLS...........
   1ec20:	0001ec10 00000005 0001ec18 0001de2c     ............,...
   1ec30:	00000008 0001de2c 00000008 0001dd1c     ....,...........
   1ec40:	00000056 000000e5 0001ec2c 0001dd1c     V.......,.......
   1ec50:	00000056 00000093 0000001b 0001dd1c     V...............
   1ec60:	00000056 00000097 00000009 0001dd1c     V...............
   1ec70:	00000056 000000bb 0000000d 0001dd1c     V...............
   1ec80:	00000056 000000be 0000000d 6c6c6163     V...........call
   1ec90:	60206465 6974704f 3a3a6e6f 72776e75     ed `Option::unwr
   1eca0:	29287061 6e6f2060 60206120 656e6f4e     ap()` on a `None
   1ecb0:	61762060 2f65756c 72657355 754c2f73     ` value/Users/Lu
   1ecc0:	2f797070 7261632e 722f6f67 73696765     ppy/.cargo/regis
   1ecd0:	2f797274 2f637273 68746967 632e6275     try/src/github.c
   1ece0:	312d6d6f 36636365 64393932 63653962     om-1ecc6299db9ec
   1ecf0:	2f333238 65626d65 64656464 6172672d     823/embedded-gra
   1ed00:	63696870 2e302d73 2f322e35 2f637273     phics-0.5.2/src/
   1ed10:	726f6f63 73722e64 65726e55 61686361     coord.rsUnreacha
   1ed20:	20656c62 65646e69 00002078 0001ed18     ble index ......
   1ed30:	00000012 0001ed2c 0001ecb7 00000061     ....,.......a...
   1ed40:	00000070 00000016                       p.......

0001ed48 <_ZN8libchip87CHARBUF17h227c6d0d7e24574cE>:
   1ed48:	909090f0 206020f0 10f07020 f0f080f0     ..... `  p......
   1ed58:	f010f010 10f09090 f080f010 80f0f010     ................
   1ed68:	f0f090f0 40402010 90f090f0 f090f0f0     ..... @@........
   1ed78:	90f0f010 e09090f0 e090e090 808080f0     ................
   1ed88:	9090e0f0 80f0e090 f0f080f0 8080f080     ................
   1ed98:	72656874 73692065 206f6e20 68637573     there is no such
   1eda8:	69687420 6120676e 6e612073 71636120      thing as an acq
   1edb8:	65726975 6c65722f 65736165 616f6c20     uire/release loa
   1edc8:	75722f64 2f637473 61376535 36363466     d/rustc/5e7af466
   1edd8:	30386639 36663565 34313238 35306631     9f80e5f682141f05
   1ede8:	33393130 37366261 64666139 31623462     0193ab679afdb4b1
   1edf8:	6372732f 62696c2f 65726f63 63616d2f     /src/libcore/mac
   1ee08:	2f736f72 2e646f6d 00007372 0001edc9     ros/mod.rs......
   1ee18:	00000049 0000000a 00000009 72656874     I...........ther
   1ee28:	73692065 206f6e20 68637573 69687420     e is no such thi
   1ee38:	6120676e 20612073 656c6572 20657361     ng as a release 
   1ee48:	64616f6c 0000e94f 00000000 00000001     loadO...........
   1ee58:	0000ed0b 0000ed17 0000ed21 0001ee4c     ........!...L...
   1ee68:	0000e94f 00000000 00000001 0000ed0b     O...............
   1ee78:	0000ed17 0000ed21                       ....!...

0001ee80 <_ZN3log6logger3NOP17h5a3de47970f20990E>:
   1ee80:	00000000 0001ee80 0001ee84 65737361     ............asse
   1ee90:	6f697472 6166206e 64656c69 2860203a     rtion failed: `(
   1eea0:	7466656c 203d3d20 68676972 0a602974     left == right)`.
   1eeb0:	656c2020 203a7466 0a2c6060 67697220       left: ``,. rig
   1eec0:	203a7468 203a6060 0001ee8c 0000002d     ht: ``: ....-...
   1eed0:	0001eeb9 0000000c 0001eec5 00000003     ................
   1eee0:	0001eec8 6e206f6e 006c6c75 0001eee4     ....no null.....
   1eef0:	00000007 0001eeec 0001eef8 74737572     ............rust
   1ef00:	6e796d2f 2f747765 2f637273 2e62696c     /mynewt/src/lib.
   1ef10:	00007372 0001eefc 00000016 000000db     rs..............
   1ef20:	00000011 0000f3c7 00000004 00000004     ................
   1ef30:	00013179 65737361 6f697472 6166206e     y1..assertion fa
   1ef40:	64656c69 2860203a 7466656c 203d3d20     iled: `(left == 
   1ef50:	68676972 0a602974 656c2020 203a7466     right)`.  left: 
   1ef60:	0a2c6060 67697220 203a7468 203a6060     ``,. right: ``: 
   1ef70:	0001ef34 0000002d 0001ef61 0000000c     4...-...a.......
   1ef80:	0001ef6d 00000003 0001ef70 74736564     m.......p...dest
   1ef90:	74616e69 206e6f69 20646e61 72756f73     ination and sour
   1efa0:	73206563 6563696c 61682073 64206576     ce slices have d
   1efb0:	65666669 746e6572 6e656c20 73687467     ifferent lengths
   1efc0:	0001ef8c 00000034 0001efc0 0001efcc     ....4...........
   1efd0:	7375722f 352f6374 66613765 39363634     /rustc/5e7af4669
   1efe0:	65303866 38366635 31343132 30353066     f80e5f682141f050
   1eff0:	61333931 39373662 62646661 2f316234     193ab679afdb4b1/
   1f000:	2f637273 6362696c 2f65726f 7263616d     src/libcore/macr
   1f010:	6d2f736f 722e646f 00000073 0001efd0     os/mod.rs.......
   1f020:	00000049 00000012 0000000d 0001d2b4     I...............
   1f030:	65737361 6f697472 6166206e 64656c69     assertion failed
   1f040:	2860203a 7466656c 203d3d20 68676972     : `(left == righ
   1f050:	0a602974 656c2020 203a7466 0a2c6060     t)`.  left: ``,.
   1f060:	67697220 203a7468 203a6060 0001f030      right: ``: 0...
   1f070:	0000002d 0001f05d 0000000c 0001f069     -...].......i...
   1f080:	00000003 0001f06c 20697073 666e6f63     ....l...spi conf
   1f090:	66206769 006c6961 0001f088 0000000f     ig fail.........
   1f0a0:	0001f098 0001f0a4 74737572 6e796d2f     ........rust/myn
   1f0b0:	2f747765 2f637273 2e6c6168 00007372     ewt/src/hal.rs..
   1f0c0:	0001f0a8 00000016 00000016 00000009     ................
   1f0d0:	20697073 62616e65 6620656c 006c6961     spi enable fail.
   1f0e0:	0001f0d0 0000000f 0001f0e0 0001f0a8     ................
   1f0f0:	00000016 00000019 00000009 20697073     ............spi 
   1f100:	74696e69 69616620 0000006c 0001f0fc     init fail.......
   1f110:	0000000d 0001f10c 0001f0a8 00000016     ................
   1f120:	0000001c 00000009 6f697067 69616620     ........gpio fai
   1f130:	0000006c 0001f128 00000009 0001f134     l...(.......4...
   1f140:	0001f0a8 00000016 00000045 00000009     ........E.......
   1f150:	0001f0a8 00000016 0000006c 0000001b     ........l.......

0001f160 <str.0>:
   1f160:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1f170:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1f180:	6d6f5377 6e6f4e65 00000065 0000f3bf     wSomeNone.......
   1f190:	00000004 00000004 0000fed3 77617264     ............draw
   1f1a0:	6f6c6220 20736b63 6c696166 74737572      blocks failrust
   1f1b0:	6569702f 6d652d74 64646562 702f6465     /piet-embedded/p
   1f1c0:	2d746569 65626d65 64656464 6172672d     iet-embedded-gra
   1f1d0:	63696870 72732f73 69642f63 616c7073     phics/src/displa
   1f1e0:	73722e79 0001f1ac 00000038 00000080     y.rs....8.......
   1f1f0:	00000005 00000060 0001f1f4 6576656e     ....`.......neve
   1f200:	73757272 69702f74 652d7465 6465626d     rrust/piet-embed
   1f210:	2f646564 74656970 626d652d 65646465     ded/piet-embedde
   1f220:	72672d64 69687061 732f7363 622f6372     d-graphics/src/b
   1f230:	68637461 0073722e 0001f201 00000036     atch.rs.....6...
   1f240:	000000be 00000019 0001f201 00000036     ............6...
   1f250:	000000c3 0000001d 00000000 00000000     ................

0001f260 <str.0>:
   1f260:	65747461 2074706d 61206f74 77206464     attempt to add w
   1f270:	20687469 7265766f 776f6c66 0001f201     ith overflow....
   1f280:	00000036 000000d5 00000015 0001f201     6...............
   1f290:	00000036 00000104 00000019 0001f201     6...............
   1f2a0:	00000036 00000109 0000001d 0001f201     6...............
   1f2b0:	00000036 0000011d 00000015 20697073     6...........spi 
   1f2c0:	73756c66 61662068 552f6c69 73726573     flush fail/Users
   1f2d0:	70754c2f 502f7970 54656e69 2f656d69     /Luppy/PineTime/
   1f2e0:	656e6970 656d6974 7375722d 796d2d74     pinetime-rust-my
   1f2f0:	7477656e 7375722f 74732f74 35333737     newt/rust/st7735
   1f300:	64636c2d 7461622d 722d6863 72732f73     -lcd-batch-rs/sr
   1f310:	696c2f63 73722e62 0001f2ca 0000004e     c/lib.rs....N...
   1f320:	000000fe 00000009 20697073 61746164     ........spi data
   1f330:	69616620 0000006c 0001f2ca 0000004e      fail.......N...
   1f340:	000000b0 00000009 0001f2ca 0000004e     ............N...
   1f350:	000000f3 00000009 0001f2ca 0000004e     ............N...
   1f360:	00000098 0000000d 20697073 20646d63     ........spi cmd 
   1f370:	6c696166 0001f2ca 0000004e 00000097     fail....N.......
   1f380:	00000009 0001f2ca 0000004e 0000009d     ........N.......
   1f390:	00000011 0001f2ca 0000004e 0000009c     ........N.......
   1f3a0:	0000000d 0001f2ca 0000004e 000000c5     ........N.......
   1f3b0:	0000002d 0001f2ca 0000004e 000000c9     -.......N.......
   1f3c0:	0000002d 0001f2ca 0000004e 000000d8     -.......N.......
   1f3d0:	00000019 00000000 00000000 00000000     ................

0001f3e0 <str.0>:
   1f3e0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1f3f0:	20687469 7265766f 776f6c66 0001f2ca     ith overflow....
   1f400:	0000004e 000000d9 00000019 0001f2ca     N...............
   1f410:	0000004e 000000db 00000019 0001f2ca     N...............
   1f420:	0000004e 000000dc 00000019 20697073     N...........spi 
   1f430:	74696e69 69616620 0000006c 0001f2ca     init fail.......
   1f440:	0000004e 00000066 00000009 002d2c01     N...f........,-.
   1f450:	0001f44c 012d2c01 00002d2c 0001f454     L....,-.,-..T...
   1f460:	00000007 0001f460 008402a2 0001f468     ....`.......h...
   1f470:	000000c5 0001f470 0000000a 0001f478     ....p.......x...
   1f480:	00002a8a 0001f480 0000ee8a 0001f488     .*..............
   1f490:	0000000e 0001f490 00000000 0001f498     ................
   1f4a0:	00000008 0001f4a0 00000005 0001f4a8     ................
   1f4b0:	0001f2ca 0000004e 00000088 00000009     ....N...........
   1f4c0:	6573552f 4c2f7372 79707075 61632e2f     /Users/Luppy/.ca
   1f4d0:	2f6f6772 69676572 79727473 6372732f     rgo/registry/src
   1f4e0:	7469672f 2e627568 2d6d6f63 63636531     /github.com-1ecc
   1f4f0:	39393236 65396264 33323863 626d652f     6299db9ec823/emb
   1f500:	65646465 72672d64 69687061 302d7363     edded-graphics-0
   1f510:	322e352e 6372732f 6972702f 6974696d     .5.2/src/primiti
   1f520:	2f736576 74636572 6c676e61 73722e65     ves/rectangle.rs
   1f530:	0001f4c0 00000070 000000c0 00000032     ....p.......2...

0001f540 <str.0>:
   1f540:	65747461 2074706d 61206f74 77206464     attempt to add w
   1f550:	20687469 7265766f 776f6c66 0001f4c0     ith overflow....
   1f560:	00000070 000000c2 00000031 00000000     p.......1.......

0001f570 <str.1>:
   1f570:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1f580:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1f590:	00000077 0001f4c0 00000070 000000c4     w.......p.......
   1f5a0:	00000031 0001f4c0 00000070 000000c6     1.......p.......
   1f5b0:	00000031 65707845 64657463 72747320     1...Expected str
   1f5c0:	00656b6f 0001f4c0 00000070 000000cc     oke.....p.......
   1f5d0:	00000019 0001f4c0 00000070 000000d5     ........p.......
   1f5e0:	0000000d 0001f4c0 00000070 000000da     ........p.......
   1f5f0:	00000011 00012e0f 00000004 00000004     ................
   1f600:	00013179 00697073 0001d2b4 65737361     y1..spi.....asse
   1f610:	6f697472 6166206e 64656c69 2860203a     rtion failed: `(
   1f620:	7466656c 203d3d20 68676972 0a602974     left == right)`.
   1f630:	656c2020 203a7466 0a2c6060 67697220       left: ``,. rig
   1f640:	203a7468 203a6060 0001f60c 0000002d     ht: ``: ....-...
   1f650:	0001f639 0000000c 0001f645 00000003     9.......E.......
   1f660:	0001f648 20697073 666e6f63 66206769     H...spi config f
   1f670:	006c6961 0001f664 0000000f 0001f674     ail.d.......t...
   1f680:	0001f680 74737572 6e796d2f 2f747765     ....rust/mynewt/
   1f690:	2f637273 2e697073 00007372 0001f684     src/spi.rs......
   1f6a0:	00000016 00000050 0000004a 20697073     ....P...J...spi 
   1f6b0:	66206263 006c6961 0001f6ac 0000000b     cb fail.........
   1f6c0:	0001f6b8 0001f684 00000016 00000057     ............W...
   1f6d0:	00000005 20697073 62616e65 6620656c     ....spi enable f
   1f6e0:	006c6961 0001f6d4 0000000f 0001f6e4     ail.............
   1f6f0:	0001f684 00000016 0000005a 00000037     ........Z...7...
   1f700:	6f697067 69616620 0000006c 0001f700     gpio fail.......
   1f710:	00000009 0001f70c 0001f684 00000016     ................
   1f720:	0000005b 00000040 0001f684 00000016     [...@...........
   1f730:	0000005c 00000040 6575716d 66206575     \...@...mqueue f
   1f740:	006c6961 0001f738 0000000b 0001f744     ail.8.......D...
   1f750:	0001f684 00000016 00000065 00000005     ........e.......
   1f760:	206d6573 6c696166 20697073 6c696166     sem failspi fail
   1f770:	0001f760 00000008 0001f770 0001f684     `.......p.......
   1f780:	00000016 00000069 00000005 0001f684     ....i...........
   1f790:	00000016 0000006d 00000005 00000000     ....m...........
   1f7a0:	0001f604 00000004 0001f79c 6e657665     ............even
   1f7b0:	66207174 006c6961 0001f684 00000016     tq fail.........
   1f7c0:	00000081 00000009 65737361 6f697472     ........assertio
   1f7d0:	6166206e 64656c69 6e75203a 65666173     n failed: unsafe
   1f7e0:	50207b20 49444e45 435f474e 6c2e444d      { PENDING_CMD.l
   1f7f0:	29286e65 3e207d20 00003020 0001f684     en() } > 0......
   1f800:	00000016 00000097 00000005 0001f684     ................
   1f810:	00000016 000000a6 00000012 0001f684     ................
   1f820:	00000016 000000bf 00000035 00000000     ........5.......

0001f830 <str.0>:
   1f830:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1f840:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1f850:	00000077 0001f684 00000016 000000c2     w...............
   1f860:	0000000f 00000000 00000000 00000000     ................

0001f870 <str.1>:
   1f870:	65747461 2074706d 61206f74 77206464     attempt to add w
   1f880:	20687469 7265766f 776f6c66 20746e69     ith overflowint 
   1f890:	20697073 6c696166 0001f684 00000016     spi fail........
   1f8a0:	000000ff 00000011 0001f684 00000016     ................
   1f8b0:	0000010f 00000015 00000000 00000000     ................

0001f8c0 <str.2>:
   1f8c0:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1f8d0:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1f8e0:	00000077 0001f684 00000016 0000010d     w...............
   1f8f0:	00000011 0001f684 00000016 00000115     ................
   1f900:	00000011 0001f684 00000016 00000122     ............"...
   1f910:	00000009 20646162 20697073 006e656c     ....bad spi len.
   1f920:	0001f684 00000016 00000129 00000005     ........).......
   1f930:	0001f768 00000008 0001f930 0001f684     h.......0.......
   1f940:	00000016 0000013f 00000009 0001f684     ....?...........
   1f950:	00000016 00000148 00000009 0001f684     ....H...........
   1f960:	00000016 0000014c 00000030 0001f684     ....L...0.......
   1f970:	00000016 00000158 00000005 0001f684     ....X...........
   1f980:	00000016 0000015d 00000017 6c6c6163     ....].......call
   1f990:	60206465 6974704f 3a3a6e6f 72776e75     ed `Option::unwr
   1f9a0:	29287061 6e6f2060 60206120 656e6f4e     ap()` on a `None
   1f9b0:	61762060 2f65756c 72657355 754c2f73     ` value/Users/Lu
   1f9c0:	2f797070 7261632e 722f6f67 73696765     ppy/.cargo/regis
   1f9d0:	2f797274 2f637273 68746967 632e6275     try/src/github.c
   1f9e0:	312d6d6f 36636365 64393932 63653962     om-1ecc6299db9ec
   1f9f0:	2f333238 70616568 7373656c 352e302d     823/heapless-0.5
   1fa00:	732f312e 762f6372 722e6365 00000073     .1/src/vec.rs...
   1fa10:	0001f9b7 00000056 000001e8 0000000d     ....V...........

0001fa20 <str.0>:
   1fa20:	65747461 2074706d 61206f74 77206464     attempt to add w
   1fa30:	20687469 7265766f 776f6c66 552f2928     ith overflow()/U
   1fa40:	73726573 70754c2f 2e2f7970 67726163     sers/Luppy/.carg
   1fa50:	65722f6f 74736967 732f7972 672f6372     o/registry/src/g
   1fa60:	75687469 6f632e62 65312d6d 32366363     ithub.com-1ecc62
   1fa70:	62643939 38636539 682f3332 6c706165     99db9ec823/heapl
   1fa80:	2d737365 2e352e30 72732f31 65762f63     ess-0.5.1/src/ve
   1fa90:	73722e63 00000000 00000000 00000000     c.rs............

0001faa0 <str.0>:
   1faa0:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1fab0:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1fac0:	00000077 0001fa3e 00000056 00000066     w...>...V...f...
   1fad0:	00000009 00000000 00000000 00000000     ................

0001fae0 <str.1>:
   1fae0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1faf0:	20687469 7265766f 776f6c66 0001fa3e     ith overflow>...
   1fb00:	00000056 0000003e 0000000c 0001fa3e     V...>.......>...
   1fb10:	00000056 0000002d 00000009 0001fa3e     V...-.......>...
   1fb20:	00000056 0000007e 00000011 00011c79     V...~.......y...
   1fb30:	00000000 00000001 00015031 00011bbd     ........1P......
   1fb40:	00000002 00000002 00016541 6c6c6163     ........Ae..call
   1fb50:	60206465 75736552 3a3a746c 72776e75     ed `Result::unwr
   1fb60:	29287061 6e6f2060 206e6120 72724560     ap()` on an `Err
   1fb70:	61762060 2f65756c 72657355 754c2f73     ` value/Users/Lu
   1fb80:	2f797070 7261632e 722f6f67 73696765     ppy/.cargo/regis
   1fb90:	2f797274 2f637273 68746967 632e6275     try/src/github.c
   1fba0:	312d6d6f 36636365 64393932 63653962     om-1ecc6299db9ec
   1fbb0:	2f333238 70616568 7373656c 352e302d     823/heapless-0.5
   1fbc0:	732f312e 762f6372 722e6365 00000073     .1/src/vec.rs...
   1fbd0:	0001fb77 00000056 00000066 00000009     w...V...f.......

0001fbe0 <str.0>:
   1fbe0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1fbf0:	20687469 7265766f 776f6c66 0001fb77     ith overfloww...
   1fc00:	00000056 0000003e 0000000c 0001fb77     V...>.......w...
   1fc10:	00000056 0000007e 00000011 00000000     V...~...........

0001fc20 <str.1>:
   1fc20:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1fc30:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1fc40:	00000077 2f637273 6362696c 2f65726f     w...src/libcore/
   1fc50:	2f6d756e 32636564 2f746c66 66776172     num/dec2flt/rawf
   1fc60:	73722e70 65646e69 756f2078 666f2074     p.rsindex out of
   1fc70:	756f6220 3a73646e 65687420 6e656c20      bounds: the len
   1fc80:	20736920 00000000 00000020 00000008      is .... .......
   1fc90:	00000002 00000000 00000000 00000002     ................
   1fca0:	00000003 2f637273 6362696c 2f65726f     ....src/libcore/
   1fcb0:	63696e75 2f65646f 6e697270 6c626174     unicode/printabl
   1fcc0:	73722e65 00000000 00000020 00000004     e.rs.... .......
   1fcd0:	00000002 00000000 00000002 00000000     ................
   1fce0:	00000003 00000000 00000020 00000008     ........ .......
   1fcf0:	00000002 00000000 00000001 00000001     ................
   1fd00:	00000003 002e2e60 0001fd05 00000002     ....`...........
   1fd10:	65726c61 20796461 72726f62 6465776f     already borrowed
   1fd20:	68772029 73206e65 6963696c 6020676e     ) when slicing `
   1fd30:	72616843 46797254 456d6f72 726f7272     CharTryFromError
   1fd40:	6f636544 74556564 45363166 726f7272     DecodeUtf16Error

0001fd50 <_ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE>:
   1fd50:	00010201 00000000 00000000 00000000     ................
   1fd60:	72657469 20202020 2e2e202c 65757274     iter    , ..true
   1fd70:	72657449 203d3c20 61746164 646e696b     Iter <= datakind
   1fd80:	746e616d 73756c70 6f72655a 79706f43     mantplusZeroCopy
   1fd90:	7373654c 65646f63 65707954 656e6f44     LesscodeTypeDone
   1fda0:	72616843 6b636142 68746f42 6d657449     CharBackBothItem
   1fdb0:	656c6966 656e696c 7466654c 6c696174     filelineLefttail
   1fdc0:	656b6177 706f7264 32783875 32783869     wakedropu8x2i8x2
   1fdd0:	34783875 34783869 38783875 38783869     u8x4i8x4u8x8i8x8
   1fde0:	6c6c6163 60206465 6974704f 3a3a6e6f     called `Option::
   1fdf0:	72776e75 29287061 6e6f2060 60206120     unwrap()` on a `
   1fe00:	656e6f4e 61762060 0065756c 0001fc44     None` value.D...
   1fe10:	00000000 0000203a 0001fc44 00000000     ....: ..D.......
   1fe20:	0001fe14 00000002 00016795 00000000     .........g......
   1fe30:	00000001 000167e5 74756220 65687420     .....g.. but the
   1fe40:	646e6920 69207865 00002073 0001fc64      index is ..d...
   1fe50:	00000020 0001fe38 00000012 00016795      ...8........g..
   1fe60:	0000000c 00000004 00016a2f 00016d85     ......../j...m..
   1fe70:	00016e35 202c0a2c 2c280a28 30783029     5n..,., (.(,)0x0
   1fe80:	30313030 30333032 30353034 30373036     0010203040506070
   1fe90:	31393038 31313130 31333132 31353134     8091011121314151
   1fea0:	31373136 32393138 32313230 32333232     6171819202122232
   1feb0:	32353234 32373236 33393238 33313330     4252627282930313
   1fec0:	33333332 33353334 33373336 34393338     2333435363738394
   1fed0:	34313430 34333432 34353434 34373436     0414243444546474
   1fee0:	35393438 35313530 35333532 35353534     8495051525354555
   1fef0:	35373536 36393538 36313630 36333632     6575859606162636
   1ff00:	36353634 36373636 37393638 37313730     4656667686970717
   1ff10:	37333732 37353734 37373736 38393738     2737475767778798
   1ff20:	38313830 38333832 38353834 38373836     0818283848586878
   1ff30:	39393838 39313930 39333932 39353934     8899091929394959
   1ff40:	39373936 00393938 00016795 00000004     6979899..g......
   1ff50:	00000004 00016e59 00016e5f 00016e65     ....Yn.._n..en..
   1ff60:	2f637273 6362696c 2f65726f 2f746d66     src/libcore/fmt/
   1ff70:	2e646f6d 00007372 0001ff60 00000016     mod.rs..`.......
   1ff80:	0000043b 00000011 0001ff60 00000016     ;.......`.......
   1ff90:	00000445 00000024 2f637273 6362696c     E...$...src/libc
   1ffa0:	2f65726f 63696c73 6f6d2f65 73722e64     ore/slice/mod.rs
   1ffb0:	65646e69 6f202078 6f207475 61722066     index  out of ra
   1ffc0:	2065676e 20726f66 63696c73 666f2065     nge for slice of
   1ffd0:	6e656c20 20687467 0001ffb0 00000006      length ........
   1ffe0:	0001ffb6 00000022 0001ff98 00000018     ...."...........
   1fff0:	00000a72 00000005 63696c73 6e692065     r.......slice in
   20000:	20786564 72617473 61207374 62202074     dex starts at  b
   20010:	65207475 2073646e 00207461 0001fff8     ut ends at .....
   20020:	00000016 0002000e 0000000d 0001ff98     ................
   20030:	00000018 00000a78 00000005 696e6966     ....x.......fini
   20040:	64656873 73796168 6b636174 79622820     shedhaystack (by
   20050:	20736574 6167654e 65766974 69736f50     tes NegativePosi
   20060:	65766974 65746e69 6c617267 61706e55     tiveintegralUnpa
   20070:	64656b63 69666e49 6574696e 756e694d     ckedInfiniteMinu
   20080:	77615273 7265764f 776f6c66 6b636162     sRawOverflowback
   20090:	72657469 6f746e49 72657449 61636f6c     iterIntoIterloca
   200a0:	6e6f6974 61636f4c 6e6f6974 72616573     tionLocationsear
   200b0:	72656863 69736f70 6e6f6974 74697263     cherpositioncrit
   200c0:	736f705f 656e694c 796e4173 57776152     _posLinesAnyRawW
   200d0:	72656b61 6f6c6c41 72724563 38746e69     akerAllocErrint8
   200e0:	745f3478 2f637273 6362696c 2f65726f     x4_tsrc/libcore/
   200f0:	2f727473 2e646f6d 2e5b7372 625d2e2e     str/mod.rs[...]b
   20100:	20657479 65646e69 69202078 756f2073     yte index  is ou
   20110:	666f2074 756f6220 2073646e 6020666f     t of bounds of `
   20120:	000200ff 0000000b 0002010a 00000016     ................
   20130:	0001fd04 00000001 000200e4 00000016     ................
   20140:	00000853 00000009 69676562 3d3c206e     S.......begin <=
   20150:	646e6520 00002820 00020148 0000000e      end (..H.......
   20160:	0001fd74 00000004 0001fd20 00000010     t....... .......
   20170:	0001fd04 00000001 000200e4 00000016     ................
   20180:	00000857 00000005 000200e4 00000016     W...............
   20190:	00000868 0000000e 20736920 20746f6e     h....... is not 
   201a0:	68632061 62207261 646e756f 3b797261     a char boundary;
   201b0:	20746920 69207369 6469736e 20292065      it is inside ) 
   201c0:	6020666f 000200ff 0000000b 00020198     of `............
   201d0:	00000026 0002004c 00000008 000201be     &...L...........
   201e0:	00000006 0001fd04 00000001 000200e4     ................
   201f0:	00000016 0000086a 00000005 0001fca4     ....j...........
   20200:	00000020 0000001a 00000028 05030100      .......(.......
   20210:	03060605 08080607 1c0a1109 140c190b     ................
   20220:	0d0e120d 0310040f 09131212 05170116     ................
   20230:	03190218 021c071a 161f011d 042b0320     ............ .+.
   20240:	0b2d022c 0330012e 01320231 02a902a7     ,.-...0.1.2.....
   20250:	08ab04aa 05fb02fa 03fe04fd 78ad09ff     ...............x
   20260:	a28d8b79 8b585730 1d1c908c 4b0f0edd     y...0WX........K
   20270:	2efcfb4c 5d5c3f2f 84e2b55f 92918e8d     L.../?\]_.......
   20280:	bbbab1a9 cac9c6c5 ffe5e4de 12110400     ................
   20290:	37343129 493d3b3a 8e845d4a b4b1a992     )147:;=IJ]......
   202a0:	cac6bbba e5e4cfce 0e0d0400 31291211     ..............)1
   202b0:	453b3a34 5e4a4946 91846564 cec99d9b     4:;EFIJ^de......
   202c0:	29110dcf 64574945 a9918d65 c5bbbab4     ...)EIWde.......
   202d0:	e5e4dfc9 110d04f0 65644945 b2848180     ........EIde....
   202e0:	d5bfbebc 83f1f0d7 a6a48b85 c7c5bfbe     ................
   202f0:	dbdacfce cdbd9848 49cfcec6 59574f4e     ....H......INOWY
   20300:	8e895f5e b7b6b18f c7c6c1bf 171611d7     ^_..............
   20310:	f7f65c5b 0d80fffe dfde716d 6e1f0f0e     [\......mq.....n
   20320:	5f1d1c6f afae7e7d 16fabcbb 461f1e17     o.._}~.........F
   20330:	584f4e47 7e5e5c5a d4c5b57f f1f0dcd5     GNOXZ\^~........
   20340:	8f7372f5 97967574 2e265f2f b7afa72f     .rs.tu../_&./...
   20350:	d7cfc7bf 97409adf 1f8f3098 ffcec1c0     ......@..0......
   20360:	5b5a4f4e 100f0807 efee2f27 3d376f6e     NOZ[....'/..no7=
   20370:	9045423f 53fffe91 c9c87567 d9d8d1d0     ?BE....Sgu......
   20380:	00fffee7 82225f20 448204df 06041b08     .... _"....D....
   20390:	0eac8111 1e35ab80 03e08015 04010819     ......5.........
   203a0:	0434042f 07010307 0a110706 07120f50     /.4.........P...
   203b0:	04020855 03090a1c 03070308 03030302     U...............
   203c0:	0305040c 0e01060b 033a0515 05060711     ..........:.....
   203d0:	07570710 0d150702 03430450 0401032d     ..W.....P.C.-...
   203e0:	0c0f0611 251d043a 046d205f c880256a     ....:..%_ m.j%..
   203f0:	03b08205 fd82061a 15075903 1409170b     .........Y......
   20400:	6a0c140c 1a060a06 2b075906 2c0a4605     ...j.....Y.+.F.,
   20410:	01040c04 2c0b3103 0b061a04 06ac8003     .....1.,........
   20420:	411f060a 032d044c 033c0874 073c030f     ...AL.-.t.<...<.
   20430:	052b0838 1811ff82 2d112f08 21102003     8.+....../.-. .!
   20440:	048c800f 0b199782 05948815 073b052f     ............/.;.
   20450:	09180e02 7430b080 1ad6800c ff80050c     ......0t........
   20460:	05b68005 c69b0c24 1030d20a 37038d84     ....$.....0....7
   20470:	145c8109 8008b880 043530c7 0838060a     ..\......05...8.
   20480:	060c0846 031e0b74 0959045a 1c188380     F...t...Z.Y.....
   20490:	4809160a 068a8008 170ca4ab 04a13104     ...H.........1..
   204a0:	0726da81 8005050c 6d8111a5 2a287810     ..&........m.x(*
   204b0:	80044c06 be80048d 0f031b03 0106000d     .L..............
   204c0:	04010301 09080802 0b050a02 11011002     ................
   204d0:	13051204 15021411 19021702 1d051c04     ................
   204e0:	6a012408 bc026b03 d402d102 d609d50c     .$.j.k..........
   204f0:	da02d702 e105e001 ee02e802 f904f020     ............ ...
   20500:	0c02fa06 4e3e3b27 9e9e8f4f 0907069f     ....';>NO.......
   20510:	563e3d36 04d1d0f3 37361814 35bd5756     6=>V......67VW.5
   20520:	12e0cfce 9e8e8987 110e0d04 34312912     .............)14
   20530:	4946453a 644f4e4a b65c5a65 a81c1bb7     :EFIJNOdeZ\.....
   20540:	09d9d8a9 a8919037 3e3b0a07 928f6966     ....7.....;>fi..
   20550:	efee5f6f 9b9a625a 9d552827 a4a3a1a0     o_..Zb..'(U.....
   20560:	baada8a7 0b06c4bc 3a1d150c a651453f     ...........:?EQ.
   20570:	a0cdcca7 221a1907 c53f3e25 232004c6     ......."%>?... #
   20580:	33282625 4a483a38 5553504c 5c5a5856     %&(38:HJLPSUVXZ\
   20590:	6563605e 78736b66 a48a7f7d c0b0afaa     ^`cefksx}.......
   205a0:	a3720cd0 6ecccba4 7b225e6f 2d040305     ..r....no^"{...-
   205b0:	01046503 82802e2f 0f31031d 0924041c     .e../.....1...$.
   205c0:	052b051e 2a0e0444 2406aa80 28042404     ..+.D..*...$.$.(
   205d0:	010b3408 37819080 080a1609 03399880     .4.....7......9.
   205e0:	30090863 03210516 4001051b 054b0438     c..0..!....@8.K.
   205f0:	070a042f 20400709 090c0427 053a0336     /.....@ '...6.:.
   20600:	0c04071a 37495007 07330d33 810a082e     .....PI73.3.....
   20610:	81801f26 802a0828 4e091786 430f1e04     &...(.*....N...C
   20620:	0a07190e 27094706 3f0b7509 3b062a41     .....G.'.u.?A*.;
   20630:	51060a05 10050106 8b800503 08482060     ...Q........` H.
   20640:	5ea6800a 0a0b4522 39130d06 2c360a07     ...^"E.....9..6,
   20650:	c0801004 0c53643c 45a08001 5308481b     ....<dS....E.H.S
   20660:	0781391d 031d0a46 03374947 060a080e     .9..F...GI7.....
   20670:	810a0739 c7801936 9b830d32 800b7566     9...6...2...fu..
   20680:	84bc8ac4 82d18f2f 82b9a147 042a0739     ..../...G...9.*.
   20690:	0a266002 05280a46 5bb08213 39044b65     .`&.F.(....[eK.9
   206a0:	04401107 08f8971c 0da5f382 03311f81     ..@...........1.
   206b0:	81080411 6b04898c 09030d05 60931007     .......k.......`
   206c0:	730af680 46176e08 0c149a80 80190957     ...s.n.F....W...
   206d0:	03478187 150f4285 802b5085 1a032dd5     ..G..B...P+..-..
   206e0:	70810204 8501053a 29d78000 040a044c     ...p:......)L...
   206f0:	44118302 c2803d4c 0401063c 341b0555     ...DL=..<...U..4
   20700:	2c0e8102 560c6404 5d030d0a 1d393d03     ...,.d.V...].=9.
   20710:	09042c0d 060e0207 d6839a80 0b030d0a     .,..............
   20720:	590c7405 0c140c07 0a083804 1e082806     .t.Y.....8...(..
   20730:	31037752 0ca68003 05030414 85060d03     Rw.1............
   20740:	6372736a 62696c2f 65726f63 696e752f     jsrc/libcore/uni
   20750:	65646f63 646f6d2f 0073722e 00020741     code/mod.rs.A...
   20760:	0000001a 00000038 0000000f 00020741     ....8.......A...
   20770:	0000001a 00000039 00000010              ....9.......

0002077c <_ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E>:
   2077c:	1b150f04 17120319 0e000011 00000016     ................
	...
   207a4:	00130600 00000000 00000000 00000000     ................
   207b4:	00000000 07020000 0c08000a 1a181c1d     ................
	...
   207d4:	01050000 00000000 00000000 00000000     ................
   207e4:	00000000 10000000 00000000 0009000b     ................
   207f4:	                                         ...

000207f7 <_ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E>:
	...
   20813:	00120f00 00000000 00000000 00000000     ................
   20823:	0000001f 00000000 00000000 00000000     ................
   20833:	1d664649 00000000 00000000 00000000     IFf.............
   20843:	00003e8a 00000000 00000000 4b000000     .>.............K
   20853:	00000053 00000000 00000000 42236700     S............g#B
	...
   2086f:	0000003d 00230000 00000000 00000000     =.....#.........
   2087f:	2d000075 00000000 00000000 00000000     u..-............
   2088f:	003c4e82 00000000 00000000 63000000     .N<............c
   2089f:	25000000 00005a00 00000000 00368100     ...%.Z........6.
   208af:	00000300 00000000 00000000 0000002f     ............/...
   208bf:	00000000 00001000 13000000 00000800     ................
	...
   208d7:	43000000 89007200 00000000 00000000     ...C.r..........
   208e7:	00070000 057d0000 37003f18 64400987     ......}..?.7..@d
   208f7:	00210000 00000000 00000000 00000000     ..!.............
   20907:	4100000a 00000000 00000000 00000000     ...A............
   20917:	0030000c 0000005c 00717719 44354760     ..0.\....wq.`G5D
   20927:	7400002e 2c651139 507f5e51 34000000     ...t9.e,Q^.P...4
   20937:	00000031 00000053 3a000000 00000000     1...S......:....
   20947:	88001a38 696b2b5f 845d4f5d 14682a80     8..._+ki]O]..*h.
   20957:	0017003b 00000000 00000000 00000000     ;...............
   20967:	57000055 83000000 00000000 00000000     U..W............
   20977:	00000059 26000000 00161b6e 00000000     Y......&n.......
   20987:	001c4a6d 00000000 00000000 00002400     mJ...........$..
   20997:	0052007c 0015067b 48000000 00000000     |.R.{......H....
   209a7:	2776287e 2200296c 0d610e5b 04627056     ~(v'l)."[.a.Vpb.
   209b7:	02782085 1e7a0000 00540179 00000033     . x...z.y.T.3...
   209c7:	00587386 0b6f454d 3200006a 00004c6c     .sX.MEo.j..2lL..
   209d7:	00008a89 3e8a8a8a 00000000 00000000     .......>........
	...

000209e8 <_ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E>:
	...
   209f0:	00000001 00000000 0000000d 00000000     ................
   20a00:	0000001c 00000000 00000040 00000000     ........@.......
   20a10:	000000b6 00000000 000000bf 00000000     ................
   20a20:	000003f8 00000000 000007f0 00000000     ................
   20a30:	000007ff 00000000 00001000 00000000     ................
   20a40:	00001e00 00000000 00003800 00000000     .........8......
   20a50:	00003f00 00000000 00007f80 00000000     .?..............
   20a60:	00008000 00000000 0001ffc0 00000000     ................
   20a70:	0003ff80 00000000 00078000 00000000     ................
   20a80:	007f0000 00000000 00802001 00000000     ......... ......
   20a90:	00a30000 00000000 037ffc00 00000000     ................
   20aa0:	06000000 00000000 07ff0000 00000000     ................
   20ab0:	09800000 00000000 0e000000 00000000     ................
   20ac0:	0e7e0080 00000000 20002064 00000000     ..~.....d . ....
   20ad0:	200ffe40 00000000 30000001 00000000     @.. .......0....
   20ae0:	40000000 00000000 4000005c 00000000     ...@....\..@....
   20af0:	60000000 00000000 805c8400 00000000     ...`......\.....
   20b00:	c0000000 00000000 e0000000 00000000     ................
   20b10:	00000000 00000001 0cf00000 00000001     ................
   20b20:	00603044 0000000c 00603dc1 0000000c     D0`......=`.....
   20b30:	0080201e 0000000c 00c0201e 0000000c     . ....... ......
   20b40:	00fe21fe 0000000c 00000000 00000020     .!.......... ...
   20b50:	00000000 00000060 00000844 00000060     ....`...D...`...
   20b60:	00000000 000000f0 00000060 00000200     ........`.......
   20b70:	f9ffff7f 000007db 80000000 000007f8     ................
   20b80:	e0000000 00000fbc 00000000 00002120     ............ !..
   20b90:	00000003 00003b3c 00000fe7 00003c00     ....<;.......<..
   20ba0:	9fc00000 00003d9f fbc00000 00003eef     .....=.......>..
   20bb0:	00000000 00003fc0 00000000 0000f000     .....?..........
   20bc0:	00000000 0000fc00 f8000010 0000fffe     ................
   20bd0:	0000ffff 0000ffff ffffffff 0000ffff     ................
   20be0:	fffff800 00010000 00000000 0001ffc0     ................
   20bf0:	ffff0000 0001ffff 00000000 00030000     ................
   20c00:	00000000 00038000 00000000 0003a340     ............@...
   20c10:	00000000 00080000 000c0000 000c0000     ................
   20c20:	00000004 000ff800 00000000 00180000     ................
   20c30:	001c0000 001c0000 c3000000 001e0001     ................
   20c40:	00000000 001f0000 00800001 001f1fc0     ................
   20c50:	00000007 001fef80 ffffffff 00201fff     .............. .
   20c60:	00023986 00230000 00000002 00403000     .9....#......0@.
   20c70:	00000000 00667e00 fffc0000 006dfcff     .....~f.......m.
   20c80:	00000000 007f0000 00000000 00bf2800     .............(..
   20c90:	00000000 00cff000 03000000 02a00000     ................
   20ca0:	fff70000 031021fd 00000003 06780000     .....!........x.
   20cb0:	00000000 06ff8000 00000000 07c00000     ................
   20cc0:	00000000 07f20000 00000000 0e040187     ................
   20cd0:	00000006 10000000 00001008 10000000     ................
   20ce0:	00000007 14000000 0000000f 17f00000     ................
   20cf0:	00000000 1ff20000 feffe0df 1fffffff     ................
   20d00:	00000000 20000000 00000000 200ff800     ....... ....... 
   20d10:	00000007 33c80000 00000000 3fb00000     .......3.......?
   20d20:	00000000 3ff78000 00000004 40000000     .......?.......@
   20d30:	0080201e 4000000c 00000000 40d38000     . .....@.......@
   20d40:	00000002 50000000 00000003 58000000     .......P.......X
   20d50:	00000000 66fde000 000007fe 79f80000     .......f.......y
   20d60:	00000003 7fc00000 00000000 7ffe0000     ................
   20d70:	00000000 7fff0000 00000000 80000000     ................
   20d80:	0000007f 80000000 00000030 8003ffff     ........0.......
   20d90:	0000f06e 87000000 00000002 90000000     n...............
   20da0:	7f400000 9ff81fe5 00000000 a5f90000     ..@.............
   20db0:	00000000 a7f80000 00000000 b03c8000     ..............<.
   20dc0:	00000000 b47e0000 00000000 bf7f0000     ......~.........
   20dd0:	fffe0000 bfffffff 00000011 c0000000     ................
   20de0:	00000000 c19d0000 00000002 d0000000     ................
   20df0:	00000000 f807c3a0 ffffffff f87fffff     ................
   20e00:	ffffffff fbffffff 000021be fc00000c     .........!......
   20e10:	00000000 ff000000 00000002 ff000000     ................
   20e20:	00020000 ffff0000 fff80000 fffffffb     ................
   20e30:	00000000 ffffffff ffffffff ffffffff     ................
   20e40:	00000020 00006425 6c363025 00002075      ...%d..%06lu ..

00020e50 <nrf52_hal_i2cs>:
   20e50:	00000000 20000108                       ....... 

00020e58 <nrf52_hal_spis>:
   20e58:	2000a570 00000000 00000000 65737341     p.. ........Asse
   20e68:	40207472 25783020 00000a78 65737341     rt @ 0x%x...Asse
   20e78:	40207472 25783020 202d2078 253a7325     rt @ 0x%x - %s:%
   20e88:	00000a64 61686e55 656c646e 6e692064     d...Unhandled in
   20e98:	72726574 20747075 646c2528 65202c29     terrupt (%ld), e
   20ea8:	70656378 6e6f6974 20707320 30257830     xception sp 0x%0
   20eb8:	0a786c38 00000000 3a307220 30257830     8lx..... r0:0x%0
   20ec8:	20786c38 3a317220 30257830 20786c38     8lx  r1:0x%08lx 
   20ed8:	3a327220 30257830 20786c38 3a337220      r2:0x%08lx  r3:
   20ee8:	30257830 0a786c38 00000000 3a347220     0x%08lx..... r4:
   20ef8:	30257830 20786c38 3a357220 30257830     0x%08lx  r5:0x%0
   20f08:	20786c38 3a367220 30257830 20786c38     8lx  r6:0x%08lx 
   20f18:	3a377220 30257830 0a786c38 00000000      r7:0x%08lx.....
   20f28:	3a387220 30257830 20786c38 3a397220      r8:0x%08lx  r9:
   20f38:	30257830 20786c38 3a303172 30257830     0x%08lx r10:0x%0
   20f48:	20786c38 3a313172 30257830 0a786c38     8lx r11:0x%08lx.
   20f58:	00000000 3a323172 30257830 20786c38     ....r12:0x%08lx 
   20f68:	3a726c20 30257830 20786c38 3a637020      lr:0x%08lx  pc:
   20f78:	30257830 20786c38 3a727370 30257830     0x%08lx psr:0x%0
   20f88:	0a786c38 00000000 52534349 2578303a     8lx.....ICSR:0x%
   20f98:	786c3830 53464820 78303a52 6c383025     08lx HFSR:0x%08l
   20fa8:	46432078 303a5253 38302578 000a786c     x CFSR:0x%08lx..
   20fb8:	52414642 2578303a 786c3830 464d4d20     BFAR:0x%08lx MMF
   20fc8:	303a5241 38302578 000a786c 6e69616d     AR:0x%08lx..main
   20fd8:	00000000 656c6469 00000000 7379736d     ....idle....msys
   20fe8:	0000315f                                _1..

00020fec <MemFile_methods>:
   20fec:	0001b665 00000000                       e.......

00020ff4 <stdout>:
   20ff4:	20000124                                $.. 

00020ff8 <nrf52k_flash_dev>:
   20ff8:	00021010 00000000 00080000 00000080     ................
   21008:	00000001 000000ff                       ........

00021010 <nrf52k_flash_funcs>:
   21010:	0001b8d1 0001b801 0001b789 0001b7e1     ................
   21020:	00000000 0001b7dd 00000000              ............

0002102c <nrf52_hal_timers>:
   2102c:	2000a680 00000000 00000000 00000000     ... ............
	...

00021044 <hal_i2c1_cfg>:
   21044:	00000007 00000006 00000064              ........d...

00021050 <os_bsp_spi0m_cfg>:
   21050:	001d0302 736e6573 6e5f726f 6669746f     ....sensor_notif
   21060:	7476655f 00000073                       _evts...

00021068 <COLLECTOR_NODE_HW_ID>:
   21068:	066aff57 50547878 67242949              W.j.xxTPI)$g

00021074 <SENSOR_NODE_HW_IDS>:
   21074:	066dff38 3634574e 43085825 04030201     8.m.NW46%X.C....
   21084:	08070605 020b0a09 04030201 08070605     ................
   21094:	030b0a09 04030201 08070605 040b0a09     ................
   210a4:	04030201 08070605 050b0a09 77687325     ............%shw
   210b4:	00206469 30313025 00786c6c 646f6e20     id .%010llx. nod
   210c4:	00002065 65737325 726f736e 25237325     e ..%ssensor%s#%
   210d4:	00000a64 6f637325 63656c6c 25726f74     d...%scollector%
   210e4:	00000a73 74737325 61646e61 656e6f6c     s...%sstandalone
   210f4:	000a7325 2054454e 00000000 73257325     %s..NET ....%s%s
   21104:	0a732520 00000000 00000000               %s.........

00021110 <sensor_node_addresses>:
   21110:	b4b5b6f1 000000b3 b4b5b6cd 000000b3     ................
   21120:	b4b5b6a3 000000b3 b4b5b60f 000000b3     ................
   21130:	b4b5b605 000000b3 706d6574 7574735f     ........temp_stu
   21140:	00305f62 20504d54 61657263 25206574     b_0.TMP create %
   21150:	00000a73                                s...

00021154 <g_temp_stub_sensor_driver>:
   21154:	0001c70d 0001c615 00000000 00000000     ................
	...
   2117c:	20425453 64616572 6d657420 65732070     STB read temp se
   2118c:	726f736e 0000000a 635f636f 62635f6c     nsor....oc_cl_cb
   2119c:	00000073 725f636f 6f5f7065 00000000     s...oc_rep_o....

000211ac <sysflash_map_dflt>:
	...
   211b4:	00004000 00000001 00008000 00073c00     .@...........<..
   211c4:	00000002 0007bc00 00000400 00000003     ................
   211d4:	0007c000 00001000 00000010 00004000     .............@..
   211e4:	00004000 00000011 0007d000 00003000     .@...........0..
   211f4:	70616f63 6365725f 65766965 544f4e20     coap_receive NOT
   21204:	504d4920 454d454c 4445544e 0000000a      IMPLEMENTED....

/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
 102924	    108	  42728	 145760	  23960	/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
