
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000080f9

Program Header:
0x70000001 off    0x00022924 vaddr 0x00022924 paddr 0x00022924 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x0002293c memsz 0x0002293c flags rwx
    LOAD off    0x000300d8 vaddr 0x200000d8 paddr 0x0002293c align 2**16
         filesz 0x0000006c memsz 0x0000006c flags rw-
    LOAD off    0x00030148 vaddr 0x20000148 paddr 0x000229a8 align 2**16
         filesz 0x00000000 memsz 0x0000de40 flags rw-
    LOAD off    0x00040000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x000000d8 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00008000  00008000  00008000  2**0  ALLOC
  1 .text              0001a904  00008020  00008020  00008020  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  00022924  00022924  00030144  2**0  CONTENTS
  3 .ARM.exidx         00000018  00022924  00022924  00022924  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 000000d8  20000000  20000000  00040000  2**0  ALLOC
  5 .rtt               00000000  200000d8  200000d8  00030144  2**0  CONTENTS
  6 .data              0000006c  200000d8  0002293c  000300d8  2**2  CONTENTS, ALLOC, LOAD, DATA
  7 .bssnz             00000000  20000144  20000144  00030144  2**0  CONTENTS
  8 .bss               0000de40  20000148  000229a8  00030148  2**3  ALLOC
  9 .stack_dummy       000001b0  2000df88  2000df88  00030148  2**3  CONTENTS, READONLY
 10 .ARM.attributes    0000003b  00000000  00000000  000302f8  2**0  CONTENTS, READONLY
 11 .comment           0000007f  00000000  00000000  00030333  2**0  CONTENTS, READONLY
 12 .svc_table         00000004  00000000  00000000  000303b2  2**0  CONTENTS, READONLY
 13 .debug_line        0004ae53  00000000  00000000  000303b6  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_info        0008a7eb  00000000  00000000  0007b209  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev      0000ee82  00000000  00000000  001059f4  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges     00005ef0  00000000  00000000  00114878  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_str         00061895  00000000  00000000  0011a768  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         00013534  00000000  00000000  0017bffd  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges      0001a398  00000000  00000000  0018f531  2**0  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame       0000f5b8  00000000  00000000  001a98cc  2**2  CONTENTS, READONLY, DEBUGGING
 21 .debug_macinfo     00000063  00000000  00000000  001b8e84  2**0  CONTENTS, READONLY, DEBUGGING
 22 .debug_pubnames    00019c37  00000000  00000000  001b8ee7  2**0  CONTENTS, READONLY, DEBUGGING
 23 .debug_pubtypes    0003bb53  00000000  00000000  001d2b1e  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .imghdr	00000000 .imghdr
00008020 l    d  .text	00000000 .text
00022924 l    d  .ARM.extab	00000000 .ARM.extab
00022924 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
200000d8 l    d  .data	00000000 .data
20000144 l    d  .bssnz	00000000 .bssnz
20000148 l    d  .bss	00000000 .bss
2000df88 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
00008100 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
200000d8 l     O .data	00000004 sbrkBase
200000dc l     O .data	00000004 sbrkLimit
200000e0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
0000820c l     F .text	0000003c errata_16
00008248 l     F .text	0000004c errata_31
00008294 l     F .text	0000003c errata_32
000082d0 l     F .text	0000004c errata_36
0000831c l     F .text	0000003c errata_37
00008358 l     F .text	0000003c errata_57
00008394 l     F .text	0000003c errata_66
000083d0 l     F .text	0000004c errata_108
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 3592ao74dt466zwu
00000d09 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f339 l       .debug_str	00000000 
0005a7ac l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4b6 l       .debug_str	00000000 
0001f4aa l       .debug_str	00000000 
00034434 l       .debug_str	00000000 
0005a0c0 l       .debug_str	00000000 
0005a827 l       .debug_str	00000000 
00059af4 l       .debug_str	00000000 
00000e0b l       .debug_str	00000000 
00034461 l       .debug_str	00000000 
00034453 l       .debug_str	00000000 
00000e1d l       .debug_str	00000000 
00000e0f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0004ea1f l       .debug_str	00000000 
000399c4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0005cd19 l       .debug_str	00000000 
00000b83 l       .debug_str	00000000 
00000b8c l       .debug_str	00000000 
00000b90 l       .debug_str	00000000 
00000bba l       .debug_str	00000000 
0005bba2 l       .debug_str	00000000 
00000bbf l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
00003ee3 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00034420 l       .debug_str	00000000 
0005f7da l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000394da l       .debug_str	00000000 
0005cbc3 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611fd l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a835 l       .debug_str	00000000 
0005a736 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3cz1tg82iqprprj5
00001118 l       .debug_str	00000000 
0000126a l       .debug_str	00000000 
000012aa l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00016973 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000425f8 l       .debug_str	00000000 
00000f07 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f4b5 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00059efa l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
000602f0 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001106 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
0005d83f l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000011c0 l       .debug_str	00000000 
000011e7 l       .debug_str	00000000 
00001218 l       .debug_str	00000000 
000011ff l       .debug_str	00000000 
0003e60e l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00001222 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 40zocxwjz4ckzrhd
000012fa l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000132a l       .debug_str	00000000 
0000133d l       .debug_str	00000000 
0000136d l       .debug_str	00000000 
00001398 l       .debug_str	00000000 
000013a1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 5k460cii92qewjl
000012f5 l       .debug_str	00000000 
00001433 l       .debug_str	00000000 
0000146f l       .debug_str	00000000 
0001c3cf l       .debug_str	00000000 
00001478 l       .debug_str	00000000 
0001a548 l       .debug_str	00000000 
000014a3 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00034420 l       .debug_str	00000000 
00001501 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00010a77 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00001412 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001f41e l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001425 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 16zjnp1vbo7kc1gp
00000c82 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000394da l       .debug_str	00000000 
0005cbc3 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611fd l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a835 l       .debug_str	00000000 
0005a736 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f339 l       .debug_str	00000000 
0005a7ac l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4b6 l       .debug_str	00000000 
0001f4aa l       .debug_str	00000000 
0000165b l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0005cff0 l       .debug_str	00000000 
000612e3 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00003d16 l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0004ea1f l       .debug_str	00000000 
000399c4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005fed9 l       .debug_str	00000000 
00001521 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00060ead l       .debug_str	00000000 
0000152e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
000221ab l       .debug_str	00000000 
00015aae l       .debug_str	00000000 
00001536 l       .debug_str	00000000 
000017dc l       .debug_str	00000000 
0000153e l       .debug_str	00000000 
000015c3 l       .debug_str	00000000 
000015d9 l       .debug_str	00000000 
0005cd22 l       .debug_str	00000000 
00001600 l       .debug_str	00000000 
0003f8fe l       .debug_str	00000000 
00001628 l       .debug_str	00000000 
00001656 l       .debug_str	00000000 
00001660 l       .debug_str	00000000 
0000168b l       .debug_str	00000000 
00001692 l       .debug_str	00000000 
0005f673 l       .debug_str	00000000 
000016ba l       .debug_str	00000000 
0006126e l       .debug_str	00000000 
0001c3cf l       .debug_str	00000000 
000016e7 l       .debug_str	00000000 
00001713 l       .debug_str	00000000 
0000171b l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
00001783 l       .debug_str	00000000 
0000178c l       .debug_str	00000000 
000017c2 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000017d3 l       .debug_str	00000000 
0000165a l       .debug_str	00000000 
00059c41 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
000017fa l       .debug_str	00000000 
000017ea l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
000017f9 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1oq54qwymghnfn7s
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f339 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005a7ac l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea1f l       .debug_str	00000000 
000399c4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000182a l       .debug_str	00000000 
0005c067 l       .debug_str	00000000 
000018af l       .debug_str	00000000 
0000191c l       .debug_str	00000000 
0000198e l       .debug_str	00000000 
0005ae43 l       .debug_str	00000000 
0005e9c7 l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000019ec l       .debug_str	00000000 
0004ea1e l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611fd l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2d0u1dup22f6p5uq
00000d12 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4b6 l       .debug_str	00000000 
00001a09 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0004ea1f l       .debug_str	00000000 
000399c4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000394da l       .debug_str	00000000 
0005cbc3 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611fd l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a835 l       .debug_str	00000000 
0005a736 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f339 l       .debug_str	00000000 
0005a7ac l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2q7rzzztqsy7quqz
00003138 l       .debug_str	00000000 
0001c3cf l       .debug_str	00000000 
00003651 l       .debug_str	00000000 
00003691 l       .debug_str	00000000 
000036df l       .debug_str	00000000 
0000371f l       .debug_str	00000000 
00003746 l       .debug_str	00000000 
00003786 l       .debug_str	00000000 
00003794 l       .debug_str	00000000 
00003803 l       .debug_str	00000000 
0000382e l       .debug_str	00000000 
0000389e l       .debug_str	00000000 
000038b1 l       .debug_str	00000000 
00003921 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000394d l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00016973 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003e60e l       .debug_str	00000000 
0000395c l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0005abe7 l       .debug_str	00000000 
00003587 l       .debug_str	00000000 
00001a42 l       .debug_str	00000000 
00001d90 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000425f8 l       .debug_str	00000000 
00001a4b l       .debug_str	00000000 
00001a57 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00001a5f l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00001ab9 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00001b6d l       .debug_str	00000000 
00001bbc l       .debug_str	00000000 
00001bc6 l       .debug_str	00000000 
00001c03 l       .debug_str	00000000 
00001c48 l       .debug_str	00000000 
00001c51 l       .debug_str	00000000 
00001c61 l       .debug_str	00000000 
00001c69 l       .debug_str	00000000 
00001cbe l       .debug_str	00000000 
00001d1b l       .debug_str	00000000 
00001d27 l       .debug_str	00000000 
00001d30 l       .debug_str	00000000 
00001d3c l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00001d51 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00001d59 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001d61 l       .debug_str	00000000 
00001d8f l       .debug_str	00000000 
00001d76 l       .debug_str	00000000 
00001d96 l       .debug_str	00000000 
00001d9d l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f4b5 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00059efa l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
000602f0 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001daf l       .debug_str	00000000 
0004f59d l       .debug_str	00000000 
00001dc6 l       .debug_str	00000000 
00001dce l       .debug_str	00000000 
00001dd7 l       .debug_str	00000000 
000031db l       .debug_str	00000000 
00001de0 l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
0005ffa3 l       .debug_str	00000000 
00001de8 l       .debug_str	00000000 
00001df4 l       .debug_str	00000000 
00001dff l       .debug_str	00000000 
00001e07 l       .debug_str	00000000 
0000b1d7 l       .debug_str	00000000 
0000b702 l       .debug_str	00000000 
00001e0f l       .debug_str	00000000 
00001f0b l       .debug_str	00000000 
0000200f l       .debug_str	00000000 
0000201d l       .debug_str	00000000 
00002028 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00002055 l       .debug_str	00000000 
00002032 l       .debug_str	00000000 
00002060 l       .debug_str	00000000 
000020db l       .debug_str	00000000 
0000215e l       .debug_str	00000000 
0000216c l       .debug_str	00000000 
000021cb l       .debug_str	00000000 
00002232 l       .debug_str	00000000 
00002248 l       .debug_str	00000000 
00002258 l       .debug_str	00000000 
0005e7d9 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00002267 l       .debug_str	00000000 
00024c1c l       .debug_str	00000000 
0000226d l       .debug_str	00000000 
00002273 l       .debug_str	00000000 
00002279 l       .debug_str	00000000 
00002285 l       .debug_str	00000000 
000611fd l       .debug_str	00000000 
0000228d l       .debug_str	00000000 
00002295 l       .debug_str	00000000 
0000229b l       .debug_str	00000000 
000022e1 l       .debug_str	00000000 
000022be l       .debug_str	00000000 
000022f1 l       .debug_str	00000000 
00002331 l       .debug_str	00000000 
0005e366 l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
0000237f l       .debug_str	00000000 
00002385 l       .debug_str	00000000 
000023ae l       .debug_str	00000000 
0000238b l       .debug_str	00000000 
000023c0 l       .debug_str	00000000 
00002402 l       .debug_str	00000000 
0005e24f l       .debug_str	00000000 
0000244c l       .debug_str	00000000 
00002452 l       .debug_str	00000000 
00002458 l       .debug_str	00000000 
00002481 l       .debug_str	00000000 
0000245e l       .debug_str	00000000 
00002493 l       .debug_str	00000000 
000024d5 l       .debug_str	00000000 
0005d713 l       .debug_str	00000000 
0000251f l       .debug_str	00000000 
00002525 l       .debug_str	00000000 
0000252b l       .debug_str	00000000 
00002531 l       .debug_str	00000000 
0000255a l       .debug_str	00000000 
00002537 l       .debug_str	00000000 
0000256b l       .debug_str	00000000 
000025ac l       .debug_str	00000000 
000025f5 l       .debug_str	00000000 
000025fa l       .debug_str	00000000 
0005e59d l       .debug_str	00000000 
000025ff l       .debug_str	00000000 
00002605 l       .debug_str	00000000 
0000260b l       .debug_str	00000000 
00002634 l       .debug_str	00000000 
00002611 l       .debug_str	00000000 
00002645 l       .debug_str	00000000 
00002686 l       .debug_str	00000000 
0005d7cb l       .debug_str	00000000 
000026cf l       .debug_str	00000000 
000026fb l       .debug_str	00000000 
000026d8 l       .debug_str	00000000 
0000270c l       .debug_str	00000000 
0000274d l       .debug_str	00000000 
00002796 l       .debug_str	00000000 
0005e771 l       .debug_str	00000000 
0000279b l       .debug_str	00000000 
000027a4 l       .debug_str	00000000 
000027ab l       .debug_str	00000000 
000027d6 l       .debug_str	00000000 
000027b3 l       .debug_str	00000000 
000027e8 l       .debug_str	00000000 
0000282a l       .debug_str	00000000 
0005e439 l       .debug_str	00000000 
00002874 l       .debug_str	00000000 
0000287a l       .debug_str	00000000 
00002880 l       .debug_str	00000000 
00002886 l       .debug_str	00000000 
0000288c l       .debug_str	00000000 
00002894 l       .debug_str	00000000 
000028a2 l       .debug_str	00000000 
000028b1 l       .debug_str	00000000 
000028c2 l       .debug_str	00000000 
000028cd l       .debug_str	00000000 
000028d8 l       .debug_str	00000000 
000028e3 l       .debug_str	00000000 
000028ea l       .debug_str	00000000 
00002930 l       .debug_str	00000000 
0000290d l       .debug_str	00000000 
00002942 l       .debug_str	00000000 
00002984 l       .debug_str	00000000 
0005d8ce l       .debug_str	00000000 
000029ce l       .debug_str	00000000 
000029fb l       .debug_str	00000000 
000029d8 l       .debug_str	00000000 
00002a0d l       .debug_str	00000000 
00002a4f l       .debug_str	00000000 
00002a99 l       .debug_str	00000000 
00002a9e l       .debug_str	00000000 
00002acb l       .debug_str	00000000 
00002aa8 l       .debug_str	00000000 
00002add l       .debug_str	00000000 
00002b1f l       .debug_str	00000000 
00002b69 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00002be8 l       .debug_str	00000000 
00002b7d l       .debug_str	00000000 
00002b8d l       .debug_str	00000000 
00002b96 l       .debug_str	00000000 
00002ba1 l       .debug_str	00000000 
00002bb0 l       .debug_str	00000000 
00002bc5 l       .debug_str	00000000 
00002bf6 l       .debug_str	00000000 
00002c93 l       .debug_str	00000000 
00002d38 l       .debug_str	00000000 
00002d43 l       .debug_str	00000000 
00002d4c l       .debug_str	00000000 
00002d90 l       .debug_str	00000000 
00002d6d l       .debug_str	00000000 
00002da3 l       .debug_str	00000000 
00002e26 l       .debug_str	00000000 
00002eb1 l       .debug_str	00000000 
00002ecd l       .debug_str	00000000 
00002f19 l       .debug_str	00000000 
00002f6d l       .debug_str	00000000 
00002f8a l       .debug_str	00000000 
00002f9e l       .debug_str	00000000 
00002fea l       .debug_str	00000000 
0000303e l       .debug_str	00000000 
00003054 l       .debug_str	00000000 
00003068 l       .debug_str	00000000 
000030af l       .debug_str	00000000 
000030fe l       .debug_str	00000000 
0000312a l       .debug_str	00000000 
00003107 l       .debug_str	00000000 
0000313e l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000314d l       .debug_str	00000000 
00003dc6 l       .debug_str	00000000 
00003155 l       .debug_str	00000000 
0000315d l       .debug_str	00000000 
00033f1f l       .debug_str	00000000 
0000316c l       .debug_str	00000000 
00003df8 l       .debug_str	00000000 
00003177 l       .debug_str	00000000 
00003182 l       .debug_str	00000000 
00003193 l       .debug_str	00000000 
00003199 l       .debug_str	00000000 
000031a1 l       .debug_str	00000000 
000031a8 l       .debug_str	00000000 
000031b2 l       .debug_str	00000000 
000031ba l       .debug_str	00000000 
000031c2 l       .debug_str	00000000 
000031e4 l       .debug_str	00000000 
000031ef l       .debug_str	00000000 
000031fb l       .debug_str	00000000 
00003203 l       .debug_str	00000000 
0000320c l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
00003217 l       .debug_str	00000000 
00003222 l       .debug_str	00000000 
0000322d l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
0005d83f l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
0000323d l       .debug_str	00000000 
0000324d l       .debug_str	00000000 
0000325c l       .debug_str	00000000 
00003264 l       .debug_str	00000000 
0000326b l       .debug_str	00000000 
00003273 l       .debug_str	00000000 
000032b4 l       .debug_str	00000000 
00003291 l       .debug_str	00000000 
000032c4 l       .debug_str	00000000 
000032d9 l       .debug_str	00000000 
000032e2 l       .debug_str	00000000 
0000333f l       .debug_str	00000000 
000033a4 l       .debug_str	00000000 
000033ae l       .debug_str	00000000 
000033be l       .debug_str	00000000 
000033d3 l       .debug_str	00000000 
000033db l       .debug_str	00000000 
0000343f l       .debug_str	00000000 
000034ab l       .debug_str	00000000 
000034b2 l       .debug_str	00000000 
000034ba l       .debug_str	00000000 
000034fb l       .debug_str	00000000 
000034d8 l       .debug_str	00000000 
0000350b l       .debug_str	00000000 
00003520 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00003548 l       .debug_str	00000000 
0000354f l       .debug_str	00000000 
00003564 l       .debug_str	00000000 
0000358e l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00003605 l       .debug_str	00000000 
00003644 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2vuqh37eag1b6y30
00003b45 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005cff0 l       .debug_str	00000000 
000612e3 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00003d16 l       .debug_str	00000000 
000229d8 l       .debug_str	00000000 
00003aba l       .debug_str	00000000 
00003b1d l       .debug_str	00000000 
00003bc3 l       .debug_str	00000000 
00003c53 l       .debug_str	00000000 
00003c69 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00003cf0 l       .debug_str	00000000 
00003cff l       .debug_str	00000000 
0005a6a8 l       .debug_str	00000000 
00003d21 l       .debug_str	00000000 
00016211 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00003979 l       .debug_str	00000000 
00003a03 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0005ab4d l       .debug_str	00000000 
00003a1b l       .debug_str	00000000 
00003ab0 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f4d4 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3l5pa7f4r4pjxp5p
000049f0 l       .debug_str	00000000 
00004a1d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00004a3c l       .debug_str	00000000 
00004a70 l       .debug_str	00000000 
00004a57 l       .debug_str	00000000 
00004a78 l       .debug_str	00000000 
00004a8e l       .debug_str	00000000 
00004af6 l       .debug_str	00000000 
00004b6e l       .debug_str	00000000 
00004b9b l       .debug_str	00000000 
00004bb3 l       .debug_str	00000000 
00004c1d l       .debug_str	00000000 
00004c25 l       .debug_str	00000000 
00004c2b l       .debug_str	00000000 
00004c35 l       .debug_str	00000000 
00004caf l       .debug_str	00000000 
00004d1b l       .debug_str	00000000 
00004d94 l       .debug_str	00000000 
00004e0d l       .debug_str	00000000 
00004e78 l       .debug_str	00000000 
00004ee7 l       .debug_str	00000000 
00004eee l       .debug_str	00000000 
00004ef9 l       .debug_str	00000000 
00004f21 l       .debug_str	00000000 
00004f96 l       .debug_str	00000000 
00005013 l       .debug_str	00000000 
00004f12 l       .debug_str	00000000 
0000501f l       .debug_str	00000000 
00001daf l       .debug_str	00000000 
00005096 l       .debug_str	00000000 
00001d9d l       .debug_str	00000000 
0004f59d l       .debug_str	00000000 
00001dc6 l       .debug_str	00000000 
00001dce l       .debug_str	00000000 
00001dd7 l       .debug_str	00000000 
000031db l       .debug_str	00000000 
000050ff l       .debug_str	00000000 
0000517d l       .debug_str	00000000 
000051ed l       .debug_str	00000000 
00005267 l       .debug_str	00000000 
00005281 l       .debug_str	00000000 
000052ed l       .debug_str	00000000 
000052f6 l       .debug_str	00000000 
00005302 l       .debug_str	00000000 
00005378 l       .debug_str	00000000 
000053ee l       .debug_str	00000000 
00005464 l       .debug_str	00000000 
000054cc l       .debug_str	00000000 
00000968 l       .debug_str	00000000 
0000553b l       .debug_str	00000000 
00000a4f l       .debug_str	00000000 
000055a8 l       .debug_str	00000000 
0000561d l       .debug_str	00000000 
00005632 l       .debug_str	00000000 
00005699 l       .debug_str	00000000 
000056a2 l       .debug_str	00000000 
000056ad l       .debug_str	00000000 
000056b4 l       .debug_str	00000000 
0005bbaa l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
0003e60e l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
000056e9 l       .debug_str	00000000 
0005b5e3 l       .debug_str	00000000 
00001222 l       .debug_str	00000000 
00005723 l       .debug_str	00000000 
0005b48a l       .debug_str	00000000 
00060921 l       .debug_str	00000000 
00005756 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
00005763 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00060ead l       .debug_str	00000000 
0000152e l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
000221ab l       .debug_str	00000000 
00015aae l       .debug_str	00000000 
00001536 l       .debug_str	00000000 
000017dc l       .debug_str	00000000 
000017d3 l       .debug_str	00000000 
00005784 l       .debug_str	00000000 
00005789 l       .debug_str	00000000 
0000578e l       .debug_str	00000000 
00005793 l       .debug_str	00000000 
00005798 l       .debug_str	00000000 
0000579d l       .debug_str	00000000 
000057a8 l       .debug_str	00000000 
000057b3 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000425f8 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00003d2b l       .debug_str	00000000 
00013634 l       .debug_str	00000000 
00003d9f l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
0000314d l       .debug_str	00000000 
00003dc6 l       .debug_str	00000000 
00003dab l       .debug_str	00000000 
00003dd1 l       .debug_str	00000000 
0000315d l       .debug_str	00000000 
00033f1f l       .debug_str	00000000 
0000316c l       .debug_str	00000000 
00003df8 l       .debug_str	00000000 
00003ddd l       .debug_str	00000000 
00003e04 l       .debug_str	00000000 
00003e0f l       .debug_str	00000000 
00003e1a l       .debug_str	00000000 
0001c3cf l       .debug_str	00000000 
00003ed4 l       .debug_str	00000000 
00003e2b l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00003eb2 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00003eb9 l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00003ee8 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00003f45 l       .debug_str	00000000 
00003faa l       .debug_str	00000000 
00003fb2 l       .debug_str	00000000 
00003fd4 l       .debug_str	00000000 
00003fbb l       .debug_str	00000000 
00003fec l       .debug_str	00000000 
00004012 l       .debug_str	00000000 
0000408a l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
0005d83f l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
00004101 l       .debug_str	00000000 
0000416a l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000011c0 l       .debug_str	00000000 
000011e7 l       .debug_str	00000000 
000041e2 l       .debug_str	00000000 
00000f07 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f4b5 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00059efa l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
000602f0 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001106 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
00001218 l       .debug_str	00000000 
0000424c l       .debug_str	00000000 
000042c5 l       .debug_str	00000000 
0006091f l       .debug_str	00000000 
000011ff l       .debug_str	00000000 
000042ca l       .debug_str	00000000 
00000aa4 l       .debug_str	00000000 
000042f0 l       .debug_str	00000000 
000042d7 l       .debug_str	00000000 
000042d2 l       .debug_str	00000000 
000042fb l       .debug_str	00000000 
00004314 l       .debug_str	00000000 
0000437f l       .debug_str	00000000 
00000896 l       .debug_str	00000000 
00000ad4 l       .debug_str	00000000 
000043ef l       .debug_str	00000000 
000043ff l       .debug_str	00000000 
00004477 l       .debug_str	00000000 
0005b13a l       .debug_str	00000000 
0005ae94 l       .debug_str	00000000 
00004481 l       .debug_str	00000000 
00004488 l       .debug_str	00000000 
000044ab l       .debug_str	00000000 
00004492 l       .debug_str	00000000 
0000448d l       .debug_str	00000000 
000044b5 l       .debug_str	00000000 
000044cd l       .debug_str	00000000 
00004537 l       .debug_str	00000000 
00001a4b l       .debug_str	00000000 
00001a57 l       .debug_str	00000000 
00001a5f l       .debug_str	00000000 
00001ab9 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00001b6d l       .debug_str	00000000 
00001bbc l       .debug_str	00000000 
00001bc6 l       .debug_str	00000000 
00001c03 l       .debug_str	00000000 
00001c48 l       .debug_str	00000000 
00001c51 l       .debug_str	00000000 
00001c61 l       .debug_str	00000000 
00001c69 l       .debug_str	00000000 
00001cbe l       .debug_str	00000000 
00001d1b l       .debug_str	00000000 
00001d27 l       .debug_str	00000000 
00001d30 l       .debug_str	00000000 
00001d3c l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00001d51 l       .debug_str	00000000 
00001d59 l       .debug_str	00000000 
00001d8f l       .debug_str	00000000 
00001d76 l       .debug_str	00000000 
00001d61 l       .debug_str	00000000 
000045ac l       .debug_str	00000000 
00004613 l       .debug_str	00000000 
0000468e l       .debug_str	00000000 
0000469e l       .debug_str	00000000 
000046a7 l       .debug_str	00000000 
000046b5 l       .debug_str	00000000 
000046c3 l       .debug_str	00000000 
000046cf l       .debug_str	00000000 
000048dd l       .debug_str	00000000 
000046db l       .debug_str	00000000 
000046ea l       .debug_str	00000000 
000046f2 l       .debug_str	00000000 
0000470b l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
0000471c l       .debug_str	00000000 
00004724 l       .debug_str	00000000 
00004757 l       .debug_str	00000000 
0000473e l       .debug_str	00000000 
00004763 l       .debug_str	00000000 
00001d54 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00004795 l       .debug_str	00000000 
0000477c l       .debug_str	00000000 
000047a0 l       .debug_str	00000000 
000047c2 l       .debug_str	00000000 
000047a9 l       .debug_str	00000000 
000047cf l       .debug_str	00000000 
000047ea l       .debug_str	00000000 
00004857 l       .debug_str	00000000 
000048d4 l       .debug_str	00000000 
000048dc l       .debug_str	00000000 
00004b8c l       .debug_str	00000000 
00004b73 l       .debug_str	00000000 
000048e6 l       .debug_str	00000000 
00004903 l       .debug_str	00000000 
00004972 l       .debug_str	00000000 
000049e8 l       .debug_str	00000000 
000049f9 l       .debug_str	00000000 
00004a07 l       .debug_str	00000000 
00004a0e l       .debug_str	00000000 
00004a15 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 413mqmtb04w1hzsl
000077a3 l       .debug_str	00000000 
00009b75 l       .debug_str	00000000 
00009dbe l       .debug_str	00000000 
0000a024 l       .debug_str	00000000 
00030dc1 l       .debug_str	00000000 
00021919 l       .debug_str	00000000 
0000a289 l       .debug_str	00000000 
0000a2b9 l       .debug_str	00000000 
0000a517 l       .debug_str	00000000 
0000136d l       .debug_str	00000000 
0000a547 l       .debug_str	00000000 
0000a551 l       .debug_str	00000000 
0000a5aa l       .debug_str	00000000 
000013a1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000a54c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000057b8 l       .debug_str	00000000 
000057e8 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0006013b l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
0005a736 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c259 l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035933 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac3c l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000590a l       .debug_str	00000000 
00005958 l       .debug_str	00000000 
000059c3 l       .debug_str	00000000 
0005f673 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
0005ab4d l       .debug_str	00000000 
00030d4d l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00021b6d l       .debug_str	00000000 
00005a2d l       .debug_str	00000000 
00005a5d l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00005ac0 l       .debug_str	00000000 
00005b05 l       .debug_str	00000000 
00005b73 l       .debug_str	00000000 
00005c0a l       .debug_str	00000000 
00005cca l       .debug_str	00000000 
00005db3 l       .debug_str	00000000 
00005ec5 l       .debug_str	00000000 
00006000 l       .debug_str	00000000 
00006164 l       .debug_str	00000000 
000062f1 l       .debug_str	00000000 
000064a7 l       .debug_str	00000000 
00006686 l       .debug_str	00000000 
0000688e l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
00006bc3 l       .debug_str	00000000 
00006c3a l       .debug_str	00000000 
00006cbe l       .debug_str	00000000 
00006d39 l       .debug_str	00000000 
00006dd7 l       .debug_str	00000000 
00006e82 l       .debug_str	00000000 
00006f24 l       .debug_str	00000000 
00006fe9 l       .debug_str	00000000 
000070bb l       .debug_str	00000000 
00007184 l       .debug_str	00000000 
00007270 l       .debug_str	00000000 
00007369 l       .debug_str	00000000 
00007459 l       .debug_str	00000000 
0000756c l       .debug_str	00000000 
0000768c l       .debug_str	00000000 
000078dd l       .debug_str	00000000 
00007a24 l       .debug_str	00000000 
00007b62 l       .debug_str	00000000 
00007cc3 l       .debug_str	00000000 
00007e31 l       .debug_str	00000000 
00007f96 l       .debug_str	00000000 
0000811e l       .debug_str	00000000 
000082b3 l       .debug_str	00000000 
0000843f l       .debug_str	00000000 
000085ee l       .debug_str	00000000 
000087aa l       .debug_str	00000000 
0000895d l       .debug_str	00000000 
00008b33 l       .debug_str	00000000 
00008d16 l       .debug_str	00000000 
00008ef0 l       .debug_str	00000000 
000090ed l       .debug_str	00000000 
000092f7 l       .debug_str	00000000 
000094f8 l       .debug_str	00000000 
0000971c l       .debug_str	00000000 
0000994d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n7qec2sa6vjglqv
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a835 l       .debug_str	00000000 
0005a736 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f339 l       .debug_str	00000000 
0005a7ac l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4b6 l       .debug_str	00000000 
0001f4aa l       .debug_str	00000000 
0005a679 l       .debug_str	00000000 
0005ae43 l       .debug_str	00000000 
0000ac06 l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
0000ac10 l       .debug_str	00000000 
0000ac19 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0004ea1f l       .debug_str	00000000 
000399c4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000a7fe l       .debug_str	00000000 
0000b122 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
0000a835 l       .debug_str	00000000 
0000a888 l       .debug_str	00000000 
000229d8 l       .debug_str	00000000 
0000a89c l       .debug_str	00000000 
0000a8e2 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
0000a8f0 l       .debug_str	00000000 
0000a937 l       .debug_str	00000000 
0000a940 l       .debug_str	00000000 
0000a989 l       .debug_str	00000000 
0000579d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
00003d21 l       .debug_str	00000000 
0000a995 l       .debug_str	00000000 
0000aa11 l       .debug_str	00000000 
000612e3 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00003cf0 l       .debug_str	00000000 
0000aa3b l       .debug_str	00000000 
0000aab7 l       .debug_str	00000000 
0000aae6 l       .debug_str	00000000 
0000ab6c l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00035779 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013624 l       .debug_str	00000000 
0000ab94 l       .debug_str	00000000 
0000abf6 l       .debug_str	00000000 
0005c259 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005f673 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
000221ab l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
000160ec l       .debug_str	00000000 
000017ea l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
0000abfe l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000394da l       .debug_str	00000000 
0005cbc3 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611fd l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4oqy1cznfkuv6rc
0005d005 l       .debug_str	00000000 
0000ae2c l       .debug_str	00000000 
00059bbb l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0005a7ac l       .debug_str	00000000 
0005f673 l       .debug_str	00000000 
00061633 l       .debug_str	00000000 
00061632 l       .debug_str	00000000 
00060ead l       .debug_str	00000000 
0000152e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000221ab l       .debug_str	00000000 
00015aae l       .debug_str	00000000 
00001536 l       .debug_str	00000000 
000017dc l       .debug_str	00000000 
000017d3 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00024c1c l       .debug_str	00000000 
00024c21 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000ac20 l       .debug_str	00000000 
00059ade l       .debug_str	00000000 
0000ac24 l       .debug_str	00000000 
0000ac55 l       .debug_str	00000000 
0000ac5b l       .debug_str	00000000 
0000ac9c l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0000acb1 l       .debug_str	00000000 
0000ace8 l       .debug_str	00000000 
0000acf3 l       .debug_str	00000000 
0006013b l       .debug_str	00000000 
0000ad25 l       .debug_str	00000000 
00059c22 l       .debug_str	00000000 
0000ad59 l       .debug_str	00000000 
00059c11 l       .debug_str	00000000 
0000ad8d l       .debug_str	00000000 
00059bc9 l       .debug_str	00000000 
0000adc4 l       .debug_str	00000000 
00059c5b l       .debug_str	00000000 
0000adfc l       .debug_str	00000000 
00059a8c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4qlpitlm4hs8kdcv
00003df8 l       .debug_str	00000000 
0000b173 l       .debug_str	00000000 
0000b19a l       .debug_str	00000000 
0000b1a5 l       .debug_str	00000000 
0000b1cc l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000b1d7 l       .debug_str	00000000 
0000b1d6 l       .debug_str	00000000 
0001f369 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0005abca l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005f673 l       .debug_str	00000000 
00002389 l       .debug_str	00000000 
0005c259 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0000579d l       .debug_str	00000000 
0005db1a l       .debug_str	00000000 
0005ae24 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000ae5d l       .debug_str	00000000 
0000ae86 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
0005a736 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
0000ae93 l       .debug_str	00000000 
0000aea5 l       .debug_str	00000000 
0000aeb6 l       .debug_str	00000000 
0000af02 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
0000af0e l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005abe7 l       .debug_str	00000000 
00003587 l       .debug_str	00000000 
00001a42 l       .debug_str	00000000 
00001d90 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000425f8 l       .debug_str	00000000 
00001a4b l       .debug_str	00000000 
00001a57 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00001a5f l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001ab9 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00001b6d l       .debug_str	00000000 
00001bbc l       .debug_str	00000000 
00001bc6 l       .debug_str	00000000 
00001c03 l       .debug_str	00000000 
00001c48 l       .debug_str	00000000 
00001c51 l       .debug_str	00000000 
00001c61 l       .debug_str	00000000 
00001c69 l       .debug_str	00000000 
00001cbe l       .debug_str	00000000 
00001d1b l       .debug_str	00000000 
00001d27 l       .debug_str	00000000 
00001d30 l       .debug_str	00000000 
00001d3c l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00001d51 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00001d59 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001d61 l       .debug_str	00000000 
00001d8f l       .debug_str	00000000 
00001d76 l       .debug_str	00000000 
00001d96 l       .debug_str	00000000 
00001d9d l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f4b5 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00059efa l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
000602f0 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001daf l       .debug_str	00000000 
0004f59d l       .debug_str	00000000 
00001dc6 l       .debug_str	00000000 
00001dce l       .debug_str	00000000 
00001dd7 l       .debug_str	00000000 
000031db l       .debug_str	00000000 
00001de0 l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
0005ffa3 l       .debug_str	00000000 
00001de8 l       .debug_str	00000000 
00001df4 l       .debug_str	00000000 
00001dff l       .debug_str	00000000 
00001e07 l       .debug_str	00000000 
0000af12 l       .debug_str	00000000 
0000b702 l       .debug_str	00000000 
00001e0f l       .debug_str	00000000 
00001f0b l       .debug_str	00000000 
0000200f l       .debug_str	00000000 
0000201d l       .debug_str	00000000 
00002028 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00002055 l       .debug_str	00000000 
00002032 l       .debug_str	00000000 
00002060 l       .debug_str	00000000 
000020db l       .debug_str	00000000 
0000215e l       .debug_str	00000000 
0000216c l       .debug_str	00000000 
000021cb l       .debug_str	00000000 
00002232 l       .debug_str	00000000 
00002248 l       .debug_str	00000000 
00002258 l       .debug_str	00000000 
0005e7d9 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00002267 l       .debug_str	00000000 
00024c1c l       .debug_str	00000000 
0000226d l       .debug_str	00000000 
00002273 l       .debug_str	00000000 
00002279 l       .debug_str	00000000 
00002285 l       .debug_str	00000000 
000611fd l       .debug_str	00000000 
0000228d l       .debug_str	00000000 
00002295 l       .debug_str	00000000 
0000229b l       .debug_str	00000000 
000022e1 l       .debug_str	00000000 
000022be l       .debug_str	00000000 
000022f1 l       .debug_str	00000000 
00002331 l       .debug_str	00000000 
0005e366 l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
0000237f l       .debug_str	00000000 
00002385 l       .debug_str	00000000 
000023ae l       .debug_str	00000000 
0000238b l       .debug_str	00000000 
000023c0 l       .debug_str	00000000 
00002402 l       .debug_str	00000000 
0005e24f l       .debug_str	00000000 
0000244c l       .debug_str	00000000 
00002452 l       .debug_str	00000000 
00002458 l       .debug_str	00000000 
00002481 l       .debug_str	00000000 
0000245e l       .debug_str	00000000 
00002493 l       .debug_str	00000000 
000024d5 l       .debug_str	00000000 
0005d713 l       .debug_str	00000000 
0000251f l       .debug_str	00000000 
00002525 l       .debug_str	00000000 
0000252b l       .debug_str	00000000 
00002531 l       .debug_str	00000000 
0000255a l       .debug_str	00000000 
00002537 l       .debug_str	00000000 
0000256b l       .debug_str	00000000 
000025ac l       .debug_str	00000000 
000025f5 l       .debug_str	00000000 
000025fa l       .debug_str	00000000 
0005e59d l       .debug_str	00000000 
000025ff l       .debug_str	00000000 
00002605 l       .debug_str	00000000 
0000260b l       .debug_str	00000000 
00002634 l       .debug_str	00000000 
00002611 l       .debug_str	00000000 
00002645 l       .debug_str	00000000 
00002686 l       .debug_str	00000000 
0005d7cb l       .debug_str	00000000 
000026cf l       .debug_str	00000000 
000026fb l       .debug_str	00000000 
000026d8 l       .debug_str	00000000 
0000270c l       .debug_str	00000000 
0000274d l       .debug_str	00000000 
00002796 l       .debug_str	00000000 
0005e771 l       .debug_str	00000000 
0000279b l       .debug_str	00000000 
000027a4 l       .debug_str	00000000 
000027ab l       .debug_str	00000000 
000027d6 l       .debug_str	00000000 
000027b3 l       .debug_str	00000000 
000027e8 l       .debug_str	00000000 
0000282a l       .debug_str	00000000 
0005e439 l       .debug_str	00000000 
00002874 l       .debug_str	00000000 
0000287a l       .debug_str	00000000 
00002880 l       .debug_str	00000000 
00002886 l       .debug_str	00000000 
0000288c l       .debug_str	00000000 
00002894 l       .debug_str	00000000 
000028a2 l       .debug_str	00000000 
000028b1 l       .debug_str	00000000 
000028c2 l       .debug_str	00000000 
000028cd l       .debug_str	00000000 
000028d8 l       .debug_str	00000000 
000028e3 l       .debug_str	00000000 
000028ea l       .debug_str	00000000 
00002930 l       .debug_str	00000000 
0000290d l       .debug_str	00000000 
00002942 l       .debug_str	00000000 
00002984 l       .debug_str	00000000 
0005d8ce l       .debug_str	00000000 
000029ce l       .debug_str	00000000 
000029fb l       .debug_str	00000000 
000029d8 l       .debug_str	00000000 
00002a0d l       .debug_str	00000000 
00002a4f l       .debug_str	00000000 
00002a99 l       .debug_str	00000000 
00002a9e l       .debug_str	00000000 
00002acb l       .debug_str	00000000 
00002aa8 l       .debug_str	00000000 
00002add l       .debug_str	00000000 
00002b1f l       .debug_str	00000000 
00002b69 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00002be8 l       .debug_str	00000000 
00002b7d l       .debug_str	00000000 
00002b8d l       .debug_str	00000000 
00002b96 l       .debug_str	00000000 
00002ba1 l       .debug_str	00000000 
00002bb0 l       .debug_str	00000000 
00002bc5 l       .debug_str	00000000 
00002bf6 l       .debug_str	00000000 
00002c93 l       .debug_str	00000000 
00002d38 l       .debug_str	00000000 
00002d43 l       .debug_str	00000000 
00002d4c l       .debug_str	00000000 
00002d90 l       .debug_str	00000000 
00002d6d l       .debug_str	00000000 
00002da3 l       .debug_str	00000000 
00002e26 l       .debug_str	00000000 
00002eb1 l       .debug_str	00000000 
00002ecd l       .debug_str	00000000 
00002f19 l       .debug_str	00000000 
00002f6d l       .debug_str	00000000 
00002f8a l       .debug_str	00000000 
00002f9e l       .debug_str	00000000 
00002fea l       .debug_str	00000000 
0000303e l       .debug_str	00000000 
00003054 l       .debug_str	00000000 
00003068 l       .debug_str	00000000 
000030af l       .debug_str	00000000 
000030fe l       .debug_str	00000000 
0000312a l       .debug_str	00000000 
00003107 l       .debug_str	00000000 
00003138 l       .debug_str	00000000 
0000313e l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000314d l       .debug_str	00000000 
00003dc6 l       .debug_str	00000000 
00003155 l       .debug_str	00000000 
0000315d l       .debug_str	00000000 
00033f1f l       .debug_str	00000000 
0000316c l       .debug_str	00000000 
00003177 l       .debug_str	00000000 
00003182 l       .debug_str	00000000 
00003193 l       .debug_str	00000000 
00003199 l       .debug_str	00000000 
000031a1 l       .debug_str	00000000 
000031a8 l       .debug_str	00000000 
000031b2 l       .debug_str	00000000 
000031ba l       .debug_str	00000000 
000031c2 l       .debug_str	00000000 
000031e4 l       .debug_str	00000000 
000031ef l       .debug_str	00000000 
000031fb l       .debug_str	00000000 
00003203 l       .debug_str	00000000 
0000320c l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
00003217 l       .debug_str	00000000 
00003222 l       .debug_str	00000000 
0000322d l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
0005d83f l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
0000323d l       .debug_str	00000000 
0000324d l       .debug_str	00000000 
0000325c l       .debug_str	00000000 
00003264 l       .debug_str	00000000 
0000326b l       .debug_str	00000000 
00003273 l       .debug_str	00000000 
000032b4 l       .debug_str	00000000 
00003291 l       .debug_str	00000000 
000032c4 l       .debug_str	00000000 
000032d9 l       .debug_str	00000000 
000032e2 l       .debug_str	00000000 
0000333f l       .debug_str	00000000 
000033a4 l       .debug_str	00000000 
000033ae l       .debug_str	00000000 
000033be l       .debug_str	00000000 
000033d3 l       .debug_str	00000000 
000033db l       .debug_str	00000000 
0000343f l       .debug_str	00000000 
000034ab l       .debug_str	00000000 
000034b2 l       .debug_str	00000000 
000034ba l       .debug_str	00000000 
000034fb l       .debug_str	00000000 
000034d8 l       .debug_str	00000000 
0000350b l       .debug_str	00000000 
00003520 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00003548 l       .debug_str	00000000 
0000354f l       .debug_str	00000000 
00003564 l       .debug_str	00000000 
0005ab4d l       .debug_str	00000000 
0005ac3c l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0005a947 l       .debug_str	00000000 
0000af1f l       .debug_str	00000000 
0000afd7 l       .debug_str	00000000 
0001c3cf l       .debug_str	00000000 
0000b03b l       .debug_str	00000000 
0000b071 l       .debug_str	00000000 
0000b08a l       .debug_str	00000000 
0000b0c4 l       .debug_str	00000000 
0000b0e1 l       .debug_str	00000000 
0000b11c l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
0000b139 l       .debug_str	00000000 
0000b143 l       .debug_str	00000000 
0000b169 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4z8krxbvbr97ayck
0005f673 l       .debug_str	00000000 
0000b29d l       .debug_str	00000000 
0000b2d9 l       .debug_str	00000000 
0000168b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000b253 l       .debug_str	00000000 
0000b294 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
000221ab l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 54b6z89c74d8bdz1
00003155 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005a7ac l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0005ae43 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
0001168e l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
0000b6ea l       .debug_str	00000000 
0000b6f3 l       .debug_str	00000000 
0001f369 l       .debug_str	00000000 
0000b786 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
0000b796 l       .debug_str	00000000 
0000b1d6 l       .debug_str	00000000 
0000b7a1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000a54c l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea1f l       .debug_str	00000000 
000399c4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f339 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
0000b318 l       .debug_str	00000000 
0000b360 l       .debug_str	00000000 
0000ac06 l       .debug_str	00000000 
0003e60e l       .debug_str	00000000 
0000b37f l       .debug_str	00000000 
0000b3ba l       .debug_str	00000000 
0000b3df l       .debug_str	00000000 
0000b406 l       .debug_str	00000000 
0000b466 l       .debug_str	00000000 
0000b46f l       .debug_str	00000000 
0000b4da l       .debug_str	00000000 
0000b4ea l       .debug_str	00000000 
0000b556 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005abe7 l       .debug_str	00000000 
00003587 l       .debug_str	00000000 
00001a42 l       .debug_str	00000000 
00001d90 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000425f8 l       .debug_str	00000000 
00001a4b l       .debug_str	00000000 
00001a57 l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00001a5f l       .debug_str	00000000 
00001ab9 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00001b6d l       .debug_str	00000000 
00001bbc l       .debug_str	00000000 
00001bc6 l       .debug_str	00000000 
00001c03 l       .debug_str	00000000 
00001c48 l       .debug_str	00000000 
00001c51 l       .debug_str	00000000 
00001c61 l       .debug_str	00000000 
00001c69 l       .debug_str	00000000 
00001cbe l       .debug_str	00000000 
00001d1b l       .debug_str	00000000 
00001d27 l       .debug_str	00000000 
00001d30 l       .debug_str	00000000 
00001d3c l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00001d51 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00001d59 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001d61 l       .debug_str	00000000 
00001d8f l       .debug_str	00000000 
00001d76 l       .debug_str	00000000 
00001d96 l       .debug_str	00000000 
00001d9d l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f4b5 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00059efa l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
000602f0 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001daf l       .debug_str	00000000 
0004f59d l       .debug_str	00000000 
00001dc6 l       .debug_str	00000000 
00001dce l       .debug_str	00000000 
00001dd7 l       .debug_str	00000000 
000031db l       .debug_str	00000000 
00001de0 l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
0005ffa3 l       .debug_str	00000000 
00001de8 l       .debug_str	00000000 
00001df4 l       .debug_str	00000000 
00001dff l       .debug_str	00000000 
00001e07 l       .debug_str	00000000 
0000b702 l       .debug_str	00000000 
00001e0f l       .debug_str	00000000 
00001f0b l       .debug_str	00000000 
0000200f l       .debug_str	00000000 
0000201d l       .debug_str	00000000 
00002028 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00002055 l       .debug_str	00000000 
00002032 l       .debug_str	00000000 
00002060 l       .debug_str	00000000 
000020db l       .debug_str	00000000 
0000215e l       .debug_str	00000000 
0000216c l       .debug_str	00000000 
000021cb l       .debug_str	00000000 
00002232 l       .debug_str	00000000 
00002248 l       .debug_str	00000000 
00002258 l       .debug_str	00000000 
0005e7d9 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00002267 l       .debug_str	00000000 
00024c1c l       .debug_str	00000000 
0000226d l       .debug_str	00000000 
00002273 l       .debug_str	00000000 
00002279 l       .debug_str	00000000 
00002285 l       .debug_str	00000000 
000611fd l       .debug_str	00000000 
0000228d l       .debug_str	00000000 
00002295 l       .debug_str	00000000 
0000229b l       .debug_str	00000000 
000022e1 l       .debug_str	00000000 
000022be l       .debug_str	00000000 
000022f1 l       .debug_str	00000000 
00002331 l       .debug_str	00000000 
0005e366 l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
0000237f l       .debug_str	00000000 
00002385 l       .debug_str	00000000 
000023ae l       .debug_str	00000000 
0000238b l       .debug_str	00000000 
000023c0 l       .debug_str	00000000 
00002402 l       .debug_str	00000000 
0005e24f l       .debug_str	00000000 
0000244c l       .debug_str	00000000 
00002452 l       .debug_str	00000000 
00002458 l       .debug_str	00000000 
00002481 l       .debug_str	00000000 
0000245e l       .debug_str	00000000 
00002493 l       .debug_str	00000000 
000024d5 l       .debug_str	00000000 
0005d713 l       .debug_str	00000000 
0000251f l       .debug_str	00000000 
00002525 l       .debug_str	00000000 
0000252b l       .debug_str	00000000 
00002531 l       .debug_str	00000000 
0000255a l       .debug_str	00000000 
00002537 l       .debug_str	00000000 
0000256b l       .debug_str	00000000 
000025ac l       .debug_str	00000000 
000025f5 l       .debug_str	00000000 
000025fa l       .debug_str	00000000 
0005e59d l       .debug_str	00000000 
000025ff l       .debug_str	00000000 
00002605 l       .debug_str	00000000 
0000260b l       .debug_str	00000000 
00002634 l       .debug_str	00000000 
00002611 l       .debug_str	00000000 
00002645 l       .debug_str	00000000 
00002686 l       .debug_str	00000000 
0005d7cb l       .debug_str	00000000 
000026cf l       .debug_str	00000000 
000026fb l       .debug_str	00000000 
000026d8 l       .debug_str	00000000 
0000270c l       .debug_str	00000000 
0000274d l       .debug_str	00000000 
00002796 l       .debug_str	00000000 
0005e771 l       .debug_str	00000000 
0000279b l       .debug_str	00000000 
000027a4 l       .debug_str	00000000 
000027ab l       .debug_str	00000000 
000027d6 l       .debug_str	00000000 
000027b3 l       .debug_str	00000000 
000027e8 l       .debug_str	00000000 
0000282a l       .debug_str	00000000 
0005e439 l       .debug_str	00000000 
00002874 l       .debug_str	00000000 
0000287a l       .debug_str	00000000 
00002880 l       .debug_str	00000000 
00002886 l       .debug_str	00000000 
0000288c l       .debug_str	00000000 
00002894 l       .debug_str	00000000 
000028a2 l       .debug_str	00000000 
000028b1 l       .debug_str	00000000 
000028c2 l       .debug_str	00000000 
000028cd l       .debug_str	00000000 
000028d8 l       .debug_str	00000000 
000028e3 l       .debug_str	00000000 
000028ea l       .debug_str	00000000 
00002930 l       .debug_str	00000000 
0000290d l       .debug_str	00000000 
00002942 l       .debug_str	00000000 
00002984 l       .debug_str	00000000 
0005d8ce l       .debug_str	00000000 
000029ce l       .debug_str	00000000 
000029fb l       .debug_str	00000000 
000029d8 l       .debug_str	00000000 
00002a0d l       .debug_str	00000000 
00002a4f l       .debug_str	00000000 
00002a99 l       .debug_str	00000000 
00002a9e l       .debug_str	00000000 
00002acb l       .debug_str	00000000 
00002aa8 l       .debug_str	00000000 
00002add l       .debug_str	00000000 
00002b1f l       .debug_str	00000000 
00002b69 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00002be8 l       .debug_str	00000000 
00002b7d l       .debug_str	00000000 
00002b8d l       .debug_str	00000000 
00002b96 l       .debug_str	00000000 
00002ba1 l       .debug_str	00000000 
00002bb0 l       .debug_str	00000000 
00002bc5 l       .debug_str	00000000 
00002bf6 l       .debug_str	00000000 
00002c93 l       .debug_str	00000000 
00002d38 l       .debug_str	00000000 
00002d43 l       .debug_str	00000000 
00002d4c l       .debug_str	00000000 
00002d90 l       .debug_str	00000000 
00002d6d l       .debug_str	00000000 
00002da3 l       .debug_str	00000000 
00002e26 l       .debug_str	00000000 
00002eb1 l       .debug_str	00000000 
00002ecd l       .debug_str	00000000 
00002f19 l       .debug_str	00000000 
00002f6d l       .debug_str	00000000 
00002f8a l       .debug_str	00000000 
00002f9e l       .debug_str	00000000 
00002fea l       .debug_str	00000000 
0000303e l       .debug_str	00000000 
00003054 l       .debug_str	00000000 
00003068 l       .debug_str	00000000 
000030af l       .debug_str	00000000 
000030fe l       .debug_str	00000000 
0000312a l       .debug_str	00000000 
00003107 l       .debug_str	00000000 
00003138 l       .debug_str	00000000 
0000313e l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000314d l       .debug_str	00000000 
00003dc6 l       .debug_str	00000000 
0000315d l       .debug_str	00000000 
00033f1f l       .debug_str	00000000 
0000316c l       .debug_str	00000000 
00003df8 l       .debug_str	00000000 
00003177 l       .debug_str	00000000 
00003182 l       .debug_str	00000000 
00003193 l       .debug_str	00000000 
00003199 l       .debug_str	00000000 
000031a1 l       .debug_str	00000000 
000031a8 l       .debug_str	00000000 
000031b2 l       .debug_str	00000000 
000031ba l       .debug_str	00000000 
000031c2 l       .debug_str	00000000 
000031e4 l       .debug_str	00000000 
000031ef l       .debug_str	00000000 
000031fb l       .debug_str	00000000 
00003203 l       .debug_str	00000000 
0000320c l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
00003217 l       .debug_str	00000000 
00003222 l       .debug_str	00000000 
0000322d l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
0005d83f l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
0000323d l       .debug_str	00000000 
0000324d l       .debug_str	00000000 
0000325c l       .debug_str	00000000 
00003264 l       .debug_str	00000000 
0000326b l       .debug_str	00000000 
00003273 l       .debug_str	00000000 
000032b4 l       .debug_str	00000000 
00003291 l       .debug_str	00000000 
000032c4 l       .debug_str	00000000 
000032d9 l       .debug_str	00000000 
000032e2 l       .debug_str	00000000 
0000333f l       .debug_str	00000000 
000033a4 l       .debug_str	00000000 
000033ae l       .debug_str	00000000 
000033be l       .debug_str	00000000 
000033d3 l       .debug_str	00000000 
000033db l       .debug_str	00000000 
0000343f l       .debug_str	00000000 
000034ab l       .debug_str	00000000 
000034b2 l       .debug_str	00000000 
000034ba l       .debug_str	00000000 
000034fb l       .debug_str	00000000 
000034d8 l       .debug_str	00000000 
0000350b l       .debug_str	00000000 
00003520 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00003548 l       .debug_str	00000000 
0000354f l       .debug_str	00000000 
00003564 l       .debug_str	00000000 
0000b1d7 l       .debug_str	00000000 
0000b569 l       .debug_str	00000000 
0000b5cc l       .debug_str	00000000 
0001c3cf l       .debug_str	00000000 
0000b64c l       .debug_str	00000000 
0000b6af l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000017fa l       .debug_str	00000000 
000017f9 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 57lqf44sdwu8qayr
00000c71 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4b6 l       .debug_str	00000000 
0000ba46 l       .debug_str	00000000 
0000ba77 l       .debug_str	00000000 
0000bd0a l       .debug_str	00000000 
0000ba91 l       .debug_str	00000000 
0000bac2 l       .debug_str	00000000 
0000bb40 l       .debug_str	00000000 
0000baf2 l       .debug_str	00000000 
0000bb23 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000bb2d l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0000a54c l       .debug_str	00000000 
0000bb33 l       .debug_str	00000000 
0000bb39 l       .debug_str	00000000 
0000bb3f l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0000bb45 l       .debug_str	00000000 
0000bb97 l       .debug_str	00000000 
000017f9 l       .debug_str	00000000 
0000bbea l       .debug_str	00000000 
0000bc53 l       .debug_str	00000000 
0001f4aa l       .debug_str	00000000 
0000bca6 l       .debug_str	00000000 
0000bd09 l       .debug_str	00000000 
0000bd35 l       .debug_str	00000000 
0000bdae l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea1f l       .debug_str	00000000 
000399c4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005fed9 l       .debug_str	00000000 
00001521 l       .debug_str	00000000 
00000e2c l       .debug_str	00000000 
0000b7ab l       .debug_str	00000000 
0000bd2b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0005a736 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611fd l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f339 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005a7ac l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
0000b7ba l       .debug_str	00000000 
0000b802 l       .debug_str	00000000 
0000b80b l       .debug_str	00000000 
0000b853 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000b85b l       .debug_str	00000000 
0000b466 l       .debug_str	00000000 
0000b8a3 l       .debug_str	00000000 
0000b8eb l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
0000b8f4 l       .debug_str	00000000 
0000b93c l       .debug_str	00000000 
0000b945 l       .debug_str	00000000 
0000b976 l       .debug_str	00000000 
00018bbf l       .debug_str	00000000 
0000b97f l       .debug_str	00000000 
0000b9b0 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
000017fa l       .debug_str	00000000 
0000b9ba l       .debug_str	00000000 
0000b9eb l       .debug_str	00000000 
00018bd3 l       .debug_str	00000000 
0000ba0b l       .debug_str	00000000 
0000ba3c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000394da l       .debug_str	00000000 
0005cbc3 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a835 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dmg7ylzo67ab86f
0000bf55 l       .debug_str	00000000 
0000be52 l       .debug_str	00000000 
0000be9b l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
0001c3cf l       .debug_str	00000000 
0000beab l       .debug_str	00000000 
0000beb7 l       .debug_str	00000000 
0000befe l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
0001f339 l       .debug_str	00000000 
0000bf0a l       .debug_str	00000000 
0000bf65 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
0005cbb1 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0005e9c7 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000be01 l       .debug_str	00000000 
0000be46 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f4d4 l       .debug_str	00000000 
00009440 l     F .text	00000044 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E
00000000 l    df *ABS*	00000000 2zydbnxo7qpu1b5q
0000c225 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00018c83 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00025443 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
00034a7f l       .debug_str	00000000 
0002f230 l       .debug_str	00000000 
0000c27e l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000c284 l       .debug_str	00000000 
00018d67 l       .debug_str	00000000 
0000c28e l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
00018da2 l       .debug_str	00000000 
0000c2ce l       .debug_str	00000000 
0000c33d l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
00018bc9 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000bfac l       .debug_str	00000000 
000163e0 l       .debug_str	00000000 
0000bfc3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005abe7 l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0000bfd4 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000bfde l       .debug_str	00000000 
0000bfe9 l       .debug_str	00000000 
0000bff3 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
000229f0 l       .debug_str	00000000 
0000bffc l       .debug_str	00000000 
0000c042 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0005d5d4 l       .debug_str	00000000 
0000c055 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
000031ab l       .debug_str	00000000 
000229d6 l       .debug_str	00000000 
0000c05d l       .debug_str	00000000 
0005aa07 l       .debug_str	00000000 
00022a19 l       .debug_str	00000000 
000604af l       .debug_str	00000000 
0000c061 l       .debug_str	00000000 
0001c3cf l       .debug_str	00000000 
0000c065 l       .debug_str	00000000 
00001820 l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
0005f8eb l       .debug_str	00000000 
0000c06e l       .debug_str	00000000 
0005ef43 l       .debug_str	00000000 
0000e5f2 l       .debug_str	00000000 
0000c071 l       .debug_str	00000000 
0000c0b1 l       .debug_str	00000000 
0000c0c0 l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
0000c108 l       .debug_str	00000000 
0000c14f l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003e60e l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
0000c15d l       .debug_str	00000000 
0000c1a1 l       .debug_str	00000000 
0000c1ac l       .debug_str	00000000 
0000c1b5 l       .debug_str	00000000 
0000c1bd l       .debug_str	00000000 
0005c7ec l       .debug_str	00000000 
0000e660 l       .debug_str	00000000 
0005ae43 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000c1c6 l       .debug_str	00000000 
0000c1cc l       .debug_str	00000000 
0000c1d5 l       .debug_str	00000000 
0000c1e2 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
00043b7b l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
0005a736 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000c1e5 l       .debug_str	00000000 
0000c1fc l       .debug_str	00000000 
0005f673 l       .debug_str	00000000 
0005ab4d l       .debug_str	00000000 
00010428 l       .debug_str	00000000 
0000c212 l       .debug_str	00000000 
0000c218 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000c21f l       .debug_str	00000000 
00016308 l       .debug_str	00000000 
0000e738 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00018c38 l       .debug_str	00000000 
0005fd6c l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
200000e8 l     O .data	00000008 _ZN22piet_embedded_graphics7display12SPI_SETTINGS17h78a64d1040fbeee1E
20000160 l     O .bss	00000004 _ZN22piet_embedded_graphics7display14BACKLIGHT_HIGH17hd6bdc29c96588211E
00000000 l    df *ABS*	00000000 3eyht9wxrw4fbo0o
0000e260 l       .debug_str	00000000 
0000e1c4 l       .debug_str	00000000 
0000e20a l       .debug_str	00000000 
0000e2a9 l       .debug_str	00000000 
0000e2ef l       .debug_str	00000000 
0000e660 l       .debug_str	00000000 
00010add l       .debug_str	00000000 
0000e329 l       .debug_str	00000000 
0000e370 l       .debug_str	00000000 
0000e3be l       .debug_str	00000000 
0000e40a l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000c21f l       .debug_str	00000000 
0000c225 l       .debug_str	00000000 
00016308 l       .debug_str	00000000 
0000e738 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00018c38 l       .debug_str	00000000 
0005fd6c l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00018c83 l       .debug_str	00000000 
00025443 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
0002f230 l       .debug_str	00000000 
0000c27e l       .debug_str	00000000 
0000c284 l       .debug_str	00000000 
00018d67 l       .debug_str	00000000 
0000c28e l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
00018da2 l       .debug_str	00000000 
0000c2ce l       .debug_str	00000000 
0000e44a l       .debug_str	00000000 
0000e4f6 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000e5c8 l       .debug_str	00000000 
0000e5e1 l       .debug_str	00000000 
0005ae43 l       .debug_str	00000000 
0001f3f2 l       .debug_str	00000000 
00011798 l       .debug_str	00000000 
0001cee1 l       .debug_str	00000000 
0000e631 l       .debug_str	00000000 
00040d35 l       .debug_str	00000000 
00019e52 l       .debug_str	00000000 
0003d8e5 l       .debug_str	00000000 
0000e634 l       .debug_str	00000000 
000221ab l       .debug_str	00000000 
000168d2 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
00027989 l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
0000c26b l       .debug_str	00000000 
000224f2 l       .debug_str	00000000 
0000e63b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00025488 l       .debug_str	00000000 
0000e642 l       .debug_str	00000000 
0005d5d5 l       .debug_str	00000000 
0000c05e l       .debug_str	00000000 
000163e0 l       .debug_str	00000000 
0005c7ec l       .debug_str	00000000 
0000e64e l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000e666 l       .debug_str	00000000 
0000e672 l       .debug_str	00000000 
0000e67e l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0000e68b l       .debug_str	00000000 
0006175b l       .debug_str	00000000 
0000e698 l       .debug_str	00000000 
0000e70f l       .debug_str	00000000 
0000e718 l       .debug_str	00000000 
0000e726 l       .debug_str	00000000 
00018ce9 l       .debug_str	00000000 
0000e73e l       .debug_str	00000000 
0000e773 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c344 l       .debug_str	00000000 
0000c34d l       .debug_str	00000000 
0000c357 l       .debug_str	00000000 
0000c367 l       .debug_str	00000000 
0000e5d5 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
0000c378 l       .debug_str	00000000 
0000c384 l       .debug_str	00000000 
0000c388 l       .debug_str	00000000 
0000c390 l       .debug_str	00000000 
0000c396 l       .debug_str	00000000 
0000c39c l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a9 l       .debug_str	00000000 
0000c3af l       .debug_str	00000000 
0000c3b5 l       .debug_str	00000000 
0000c3bc l       .debug_str	00000000 
0000c3c2 l       .debug_str	00000000 
0000c3ca l       .debug_str	00000000 
0000c3d1 l       .debug_str	00000000 
0000c3d7 l       .debug_str	00000000 
0000c3dd l       .debug_str	00000000 
0000c3e3 l       .debug_str	00000000 
0000c3e9 l       .debug_str	00000000 
0000c3ef l       .debug_str	00000000 
0000c3f6 l       .debug_str	00000000 
0000c3fd l       .debug_str	00000000 
0000c405 l       .debug_str	00000000 
0000c40d l       .debug_str	00000000 
0000c415 l       .debug_str	00000000 
0000c41c l       .debug_str	00000000 
0000c424 l       .debug_str	00000000 
0000c42b l       .debug_str	00000000 
0000c432 l       .debug_str	00000000 
0000c439 l       .debug_str	00000000 
0000c440 l       .debug_str	00000000 
0000c447 l       .debug_str	00000000 
0000c44e l       .debug_str	00000000 
0000c454 l       .debug_str	00000000 
0000c45a l       .debug_str	00000000 
0000c460 l       .debug_str	00000000 
0000c466 l       .debug_str	00000000 
0000c46d l       .debug_str	00000000 
0000c475 l       .debug_str	00000000 
0000e801 l       .debug_str	00000000 
0000c47d l       .debug_str	00000000 
0005ee48 l       .debug_str	00000000 
0000c488 l       .debug_str	00000000 
0005d5d4 l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0000c055 l       .debug_str	00000000 
000031ab l       .debug_str	00000000 
000229d6 l       .debug_str	00000000 
0000c05d l       .debug_str	00000000 
0005aa07 l       .debug_str	00000000 
00022a19 l       .debug_str	00000000 
000604af l       .debug_str	00000000 
0000c061 l       .debug_str	00000000 
0001c3cf l       .debug_str	00000000 
0000c065 l       .debug_str	00000000 
00001820 l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
0005f8eb l       .debug_str	00000000 
0000c06e l       .debug_str	00000000 
0005ef43 l       .debug_str	00000000 
0000e5f2 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000c494 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0000c4a4 l       .debug_str	00000000 
0000c4e0 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
0000c4ff l       .debug_str	00000000 
0000c54d l       .debug_str	00000000 
0000c58e l       .debug_str	00000000 
0000c5fa l       .debug_str	00000000 
0000c63c l       .debug_str	00000000 
0000c6a8 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0006013b l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
0005a736 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c259 l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0000c714 l       .debug_str	00000000 
0000c731 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000c777 l       .debug_str	00000000 
0000c788 l       .debug_str	00000000 
0000c7f8 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000c955 l       .debug_str	00000000 
0000ca42 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035933 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac3c l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000cb59 l       .debug_str	00000000 
0000cba9 l       .debug_str	00000000 
0000cc06 l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
0000cc5a l       .debug_str	00000000 
0000ccd1 l       .debug_str	00000000 
0000cd55 l       .debug_str	00000000 
0000cdd0 l       .debug_str	00000000 
0000ce6e l       .debug_str	00000000 
0000cf19 l       .debug_str	00000000 
0000cfbb l       .debug_str	00000000 
0000d080 l       .debug_str	00000000 
0000d152 l       .debug_str	00000000 
0000d21b l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0000d400 l       .debug_str	00000000 
0000d4f0 l       .debug_str	00000000 
0000d603 l       .debug_str	00000000 
0000d723 l       .debug_str	00000000 
0000d83a l       .debug_str	00000000 
0000d973 l       .debug_str	00000000 
0000dac9 l       .debug_str	00000000 
0005f673 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
0005ab4d l       .debug_str	00000000 
0002b9ba l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00027845 l       .debug_str	00000000 
00034a7f l       .debug_str	00000000 
0000dc1e l       .debug_str	00000000 
0000dc6c l       .debug_str	00000000 
0000ddec l       .debug_str	00000000 
0000de3a l       .debug_str	00000000 
0000de7b l       .debug_str	00000000 
0000dec9 l       .debug_str	00000000 
0000df0a l       .debug_str	00000000 
0000df5a l       .debug_str	00000000 
0000e0dc l       .debug_str	00000000 
0000e12d l       .debug_str	00000000 
0000e171 l       .debug_str	00000000 
0001e5b0 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 3sr9zgbizuzi7j5h
0000c488 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000e7e7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0000c378 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c384 l       .debug_str	00000000 
0000c388 l       .debug_str	00000000 
0000c390 l       .debug_str	00000000 
0000c396 l       .debug_str	00000000 
0000c39c l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a9 l       .debug_str	00000000 
0000c3af l       .debug_str	00000000 
0000c3b5 l       .debug_str	00000000 
0000c3bc l       .debug_str	00000000 
0000c3c2 l       .debug_str	00000000 
0000c3ca l       .debug_str	00000000 
0000c3d1 l       .debug_str	00000000 
0000c3d7 l       .debug_str	00000000 
0000c3dd l       .debug_str	00000000 
0000c3e3 l       .debug_str	00000000 
0000c3e9 l       .debug_str	00000000 
0000c3ef l       .debug_str	00000000 
0000c3f6 l       .debug_str	00000000 
0000c3fd l       .debug_str	00000000 
0000c405 l       .debug_str	00000000 
0000c40d l       .debug_str	00000000 
0000c415 l       .debug_str	00000000 
0000c41c l       .debug_str	00000000 
0000c424 l       .debug_str	00000000 
0000c42b l       .debug_str	00000000 
0000c432 l       .debug_str	00000000 
0000c439 l       .debug_str	00000000 
0000c440 l       .debug_str	00000000 
0000c447 l       .debug_str	00000000 
0000c44e l       .debug_str	00000000 
0000c454 l       .debug_str	00000000 
0000c45a l       .debug_str	00000000 
0000c460 l       .debug_str	00000000 
0000c466 l       .debug_str	00000000 
0000c46d l       .debug_str	00000000 
0000c475 l       .debug_str	00000000 
0000e801 l       .debug_str	00000000 
0000c47d l       .debug_str	00000000 
0005ee48 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0000e77f l       .debug_str	00000000 
0000e7bb l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 44cnu8660c26myi6
0000e85c l       .debug_str	00000000 
0000e851 l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
0000e89a l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0005e9c7 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000e80d l       .debug_str	00000000 
0000a6ae l     F .text	0000001e _ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E
00000000 l    df *ABS*	00000000 469um0xjm96v8cgk
0000f305 l       .debug_str	00000000 
0000f929 l       .debug_str	00000000 
0000fa7c l       .debug_str	00000000 
0000faac l       .debug_str	00000000 
0000c1cc l       .debug_str	00000000 
0000c1d5 l       .debug_str	00000000 
0000c1e2 l       .debug_str	00000000 
00043b7b l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000c1e5 l       .debug_str	00000000 
0000c1fc l       .debug_str	00000000 
00010428 l       .debug_str	00000000 
0001040b l       .debug_str	00000000 
0000fbd3 l       .debug_str	00000000 
0000fc03 l       .debug_str	00000000 
000104af l       .debug_str	00000000 
00010451 l       .debug_str	00000000 
0000fc45 l       .debug_str	00000000 
0000fc75 l       .debug_str	00000000 
0000fcc4 l       .debug_str	00000000 
0000fcf4 l       .debug_str	00000000 
0000fd06 l       .debug_str	00000000 
0000fd36 l       .debug_str	00000000 
0000fd6f l       .debug_str	00000000 
0000fd78 l       .debug_str	00000000 
0000fda5 l       .debug_str	00000000 
0000fde8 l       .debug_str	00000000 
0000fdfe l       .debug_str	00000000 
0000ff42 l       .debug_str	00000000 
0000ffde l       .debug_str	00000000 
000100a8 l       .debug_str	00000000 
000100c1 l       .debug_str	00000000 
000101a0 l       .debug_str	00000000 
000102e9 l       .debug_str	00000000 
00010406 l       .debug_str	00000000 
0001043e l       .debug_str	00000000 
00010483 l       .debug_str	00000000 
0001048b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
0000e8a0 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
0000e8a7 l       .debug_str	00000000 
0000e8ac l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0000e8d1 l       .debug_str	00000000 
0000e8d8 l       .debug_str	00000000 
0000e8dd l       .debug_str	00000000 
0000e918 l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
0000e94f l       .debug_str	00000000 
0000e97f l       .debug_str	00000000 
0000bfac l       .debug_str	00000000 
0000e992 l       .debug_str	00000000 
0000e998 l       .debug_str	00000000 
0000e99f l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000e634 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0006013b l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
0005a736 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c259 l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0000c714 l       .debug_str	00000000 
0000c731 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000c777 l       .debug_str	00000000 
0000c788 l       .debug_str	00000000 
0000c7f8 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000c955 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035933 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac3c l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000cb59 l       .debug_str	00000000 
0000cba9 l       .debug_str	00000000 
0000cc06 l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
0000cc5a l       .debug_str	00000000 
0000ccd1 l       .debug_str	00000000 
0000cd55 l       .debug_str	00000000 
0000cdd0 l       .debug_str	00000000 
0000ce6e l       .debug_str	00000000 
0000cf19 l       .debug_str	00000000 
0000cfbb l       .debug_str	00000000 
0000d080 l       .debug_str	00000000 
0000d152 l       .debug_str	00000000 
0000d21b l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0000d400 l       .debug_str	00000000 
0000e9a7 l       .debug_str	00000000 
0000eab9 l       .debug_str	00000000 
0000ebe8 l       .debug_str	00000000 
0005f673 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
0005ab4d l       .debug_str	00000000 
0002b882 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00027728 l       .debug_str	00000000 
0000fd9c l       .debug_str	00000000 
0000ed16 l       .debug_str	00000000 
0000ed46 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0000fdb8 l       .debug_str	00000000 
0000ed7d l       .debug_str	00000000 
0000edad l       .debug_str	00000000 
0004ea1f l       .debug_str	00000000 
00015d14 l       .debug_str	00000000 
0000edfa l       .debug_str	00000000 
0000ee2a l       .debug_str	00000000 
0000ca42 l       .debug_str	00000000 
0000d4f0 l       .debug_str	00000000 
0000d603 l       .debug_str	00000000 
0000d723 l       .debug_str	00000000 
0000d83a l       .debug_str	00000000 
0000d973 l       .debug_str	00000000 
0000dac9 l       .debug_str	00000000 
0002b9ba l       .debug_str	00000000 
00027845 l       .debug_str	00000000 
0000ee4a l       .debug_str	00000000 
0000ee7a l       .debug_str	00000000 
0000e778 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000efc8 l       .debug_str	00000000 
0000efd3 l       .debug_str	00000000 
0000efdd l       .debug_str	00000000 
0000e738 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00018c38 l       .debug_str	00000000 
0000efe6 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00018c83 l       .debug_str	00000000 
00025443 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
00034a7f l       .debug_str	00000000 
0002f230 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0002f1c4 l       .debug_str	00000000 
0000eff3 l       .debug_str	00000000 
0001c3cf l       .debug_str	00000000 
0002dca6 l       .debug_str	00000000 
0000efff l       .debug_str	00000000 
0000f02f l       .debug_str	00000000 
0000f0d5 l       .debug_str	00000000 
0000f0da l       .debug_str	00000000 
0000f0e0 l       .debug_str	00000000 
0000f0e9 l       .debug_str	00000000 
0005d24d l       .debug_str	00000000 
0002dd4d l       .debug_str	00000000 
0000f0f3 l       .debug_str	00000000 
0000f123 l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea8b l       .debug_str	00000000 
00024c21 l       .debug_str	00000000 
0002565a l       .debug_str	00000000 
0000f1fd l       .debug_str	00000000 
0000f22d l       .debug_str	00000000 
0000f250 l       .debug_str	00000000 
0000f27d l       .debug_str	00000000 
0000f29e l       .debug_str	00000000 
0000f3a5 l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
0000f47f l       .debug_str	00000000 
0000f4f6 l       .debug_str	00000000 
0000f57a l       .debug_str	00000000 
0000f5f5 l       .debug_str	00000000 
0000f693 l       .debug_str	00000000 
0000f73e l       .debug_str	00000000 
00028d94 l       .debug_str	00000000 
000284cb l       .debug_str	00000000 
00028802 l       .debug_str	00000000 
0002b788 l       .debug_str	00000000 
000273f0 l       .debug_str	00000000 
0000f7e0 l       .debug_str	00000000 
0000f810 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
00027989 l       .debug_str	00000000 
0000f8f9 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 49htiubyezwzqodr
0005a7ac l       .debug_str	00000000 
000104ba l       .debug_str	00000000 
000104eb l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00018bc9 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
000104f4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea1f l       .debug_str	00000000 
000399c4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005a736 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611fd l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f339 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1vm1jsf9206jqt1a
00013354 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00010658 l       .debug_str	00000000 
00010664 l       .debug_str	00000000 
00010725 l       .debug_str	00000000 
00025428 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000e7e7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010546 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0000c378 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c384 l       .debug_str	00000000 
0000c388 l       .debug_str	00000000 
0000c390 l       .debug_str	00000000 
0000c396 l       .debug_str	00000000 
0000c39c l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a9 l       .debug_str	00000000 
0000c3af l       .debug_str	00000000 
0000c3b5 l       .debug_str	00000000 
0000c3bc l       .debug_str	00000000 
0000c3c2 l       .debug_str	00000000 
0000c3ca l       .debug_str	00000000 
0000c3d1 l       .debug_str	00000000 
0000c3d7 l       .debug_str	00000000 
0000c3dd l       .debug_str	00000000 
0000c3e3 l       .debug_str	00000000 
0000c3e9 l       .debug_str	00000000 
0000c3ef l       .debug_str	00000000 
0000c3f6 l       .debug_str	00000000 
0000c3fd l       .debug_str	00000000 
0000c405 l       .debug_str	00000000 
0000c40d l       .debug_str	00000000 
0000c415 l       .debug_str	00000000 
0000c41c l       .debug_str	00000000 
0000c424 l       .debug_str	00000000 
0000c42b l       .debug_str	00000000 
0000c432 l       .debug_str	00000000 
0000c439 l       .debug_str	00000000 
0000c440 l       .debug_str	00000000 
0000c447 l       .debug_str	00000000 
0000c44e l       .debug_str	00000000 
0000c454 l       .debug_str	00000000 
0000c45a l       .debug_str	00000000 
0000c460 l       .debug_str	00000000 
0000c466 l       .debug_str	00000000 
0000c46d l       .debug_str	00000000 
0000c475 l       .debug_str	00000000 
0000e801 l       .debug_str	00000000 
0001056a l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00010590 l       .debug_str	00000000 
00010651 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3on1efjgx1q5grpf
00025428 l       .debug_str	00000000 
00010725 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000e5c8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010546 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c344 l       .debug_str	00000000 
0000c34d l       .debug_str	00000000 
0000c357 l       .debug_str	00000000 
0000c367 l       .debug_str	00000000 
0000e5d5 l       .debug_str	00000000 
0001072c l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00010752 l       .debug_str	00000000 
00010651 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00010658 l       .debug_str	00000000 
000107f9 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dxw5xp80tje79rx
000012f5 l       .debug_str	00000000 
000108f0 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010546 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00010658 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0000c378 l       .debug_str	00000000 
0001056a l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00010725 l       .debug_str	00000000 
00011798 l       .debug_str	00000000 
0005f736 l       .debug_str	00000000 
000108a0 l       .debug_str	00000000 
000108d9 l       .debug_str	00000000 
00025428 l       .debug_str	00000000 
0001072c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 t2y6wwi1wx5h1fq
0000237d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010546 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0000c378 l       .debug_str	00000000 
0001056a l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
00010725 l       .debug_str	00000000 
00010929 l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00011798 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1ai0eloc31rxz52x
00010a89 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00010a14 l       .debug_str	00000000 
00033cad l       .debug_str	00000000 
0000e8a7 l       .debug_str	00000000 
0001c3cf l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00010a77 l       .debug_str	00000000 
00010a6b l       .debug_str	00000000 
0001f369 l       .debug_str	00000000 
00010a7e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1v17h907p30pylh6
00000d77 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f339 l       .debug_str	00000000 
0005a7ac l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4b6 l       .debug_str	00000000 
0001f4aa l       .debug_str	00000000 
00060011 l       .debug_str	00000000 
0005d4cc l       .debug_str	00000000 
00000f07 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f4b5 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00059efa l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
000602f0 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001106 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000011c0 l       .debug_str	00000000 
000011e7 l       .debug_str	00000000 
00001218 l       .debug_str	00000000 
000011ff l       .debug_str	00000000 
0005e61c l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0005cff0 l       .debug_str	00000000 
000612e3 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016211 l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0005c259 l       .debug_str	00000000 
00010e2d l       .debug_str	00000000 
00010e54 l       .debug_str	00000000 
00010e5c l       .debug_str	00000000 
00010e63 l       .debug_str	00000000 
00010e69 l       .debug_str	00000000 
00010e70 l       .debug_str	00000000 
0005d006 l       .debug_str	00000000 
00010e76 l       .debug_str	00000000 
00010e85 l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
00010e93 l       .debug_str	00000000 
00010e98 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0005cd19 l       .debug_str	00000000 
00010cd4 l       .debug_str	00000000 
00010a94 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0005aa07 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00022a19 l       .debug_str	00000000 
00010aa0 l       .debug_str	00000000 
00010ad7 l       .debug_str	00000000 
0000e660 l       .debug_str	00000000 
00010ae3 l       .debug_str	00000000 
00010b1a l       .debug_str	00000000 
00010b25 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00010b2d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00010b34 l       .debug_str	00000000 
00010b3b l       .debug_str	00000000 
0006038e l       .debug_str	00000000 
00010b44 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0005abca l       .debug_str	00000000 
00010b4e l       .debug_str	00000000 
00010e45 l       .debug_str	00000000 
00010b58 l       .debug_str	00000000 
0001a02b l       .debug_str	00000000 
00010b8e l       .debug_str	00000000 
00010bbc l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000425f8 l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
0005d83f l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
00010bc8 l       .debug_str	00000000 
00010bff l       .debug_str	00000000 
0005abe7 l       .debug_str	00000000 
0005fec2 l       .debug_str	00000000 
0005f673 l       .debug_str	00000000 
0006013b l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00010c08 l       .debug_str	00000000 
00010c1c l       .debug_str	00000000 
00010c4f l       .debug_str	00000000 
00010c5a l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
0004ea1f l       .debug_str	00000000 
000399c4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00010c90 l       .debug_str	00000000 
00010cce l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
0003e60e l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
00010ce1 l       .debug_str	00000000 
00010d24 l       .debug_str	00000000 
00010d3c l       .debug_str	00000000 
00010d7c l       .debug_str	00000000 
00010d91 l       .debug_str	00000000 
00010dcb l       .debug_str	00000000 
00010dda l       .debug_str	00000000 
00010e19 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
0005ae43 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00018bbf l       .debug_str	00000000 
000017ea l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
0000bb2d l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000394da l       .debug_str	00000000 
0005cbc3 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611fd l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a835 l       .debug_str	00000000 
0005a736 l       .debug_str	00000000 
20000214 l     O .bss	00000001 _ZN3app12touch_sensor10I2C_BUFFER17h8c3d62e53c42ce39E
20000168 l     O .bss	00000052 _ZN3app12touch_sensor10TOUCH_DATA17h1dd6b74134f2575dE
20000168 l     O .bss	00000000 _ZN3app12touch_sensor11TOUCH_DELAY17h6bb1c96a489889baE
200001fc l     O .bss	00000010 _ZN3app12touch_sensor11TOUCH_EVENT17hb169e5084280c5b1E
20000164 l     O .bss	00000004 _ZN3app12touch_sensor11TOUCH_RESET17h950734ac5f86de57E
0000b1f4 l     F .text	00000752 _ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E
0000b946 l     F .text	0000019a _ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E
0000b0ba l     F .text	0000013a _ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E
0000b06e l     F .text	0000004c _ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE
200001ba l     O .bss	0000003f _ZN3app12touch_sensor3BUF17h9edf4dcfe692b5b1E
2000020c l     O .bss	00000008 _ZN3app12touch_sensor8I2C_DATA17hb66b2debc1d16188E
0001e7d0 l     O .text	00000021 str.0
0001e810 l     O .text	0000001c str.1
00000000 l    df *ABS*	00000000 25jm3tkgfnhczjfh
000114e6 l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
0003e60e l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
0001100e l       .debug_str	00000000 
00022498 l       .debug_str	00000000 
0001103a l       .debug_str	00000000 
0003f8fe l       .debug_str	00000000 
00011069 l       .debug_str	00000000 
0005a8c6 l       .debug_str	00000000 
000110c3 l       .debug_str	00000000 
0003d8e4 l       .debug_str	00000000 
0001111c l       .debug_str	00000000 
0001117a l       .debug_str	00000000 
00011183 l       .debug_str	00000000 
000111e1 l       .debug_str	00000000 
000111ea l       .debug_str	00000000 
0001124d l       .debug_str	00000000 
0001125a l       .debug_str	00000000 
000112b9 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000112c3 l       .debug_str	00000000 
000112d2 l       .debug_str	00000000 
0001132d l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00011333 l       .debug_str	00000000 
0001138d l       .debug_str	00000000 
00011392 l       .debug_str	00000000 
0005bb89 l       .debug_str	00000000 
000113ed l       .debug_str	00000000 
0001141e l       .debug_str	00000000 
0001142c l       .debug_str	00000000 
0001145c l       .debug_str	00000000 
00011469 l       .debug_str	00000000 
0001149e l       .debug_str	00000000 
000114db l       .debug_str	00000000 
000114ea l       .debug_str	00000000 
000114ee l       .debug_str	00000000 
000114ff l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
00011572 l       .debug_str	00000000 
0001157e l       .debug_str	00000000 
000115ae l       .debug_str	00000000 
000115bb l       .debug_str	00000000 
00011617 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000efc8 l       .debug_str	00000000 
0000efd3 l       .debug_str	00000000 
0000efdd l       .debug_str	00000000 
0000e738 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00018c38 l       .debug_str	00000000 
0000efe6 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00018c83 l       .debug_str	00000000 
00025443 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
00034a7f l       .debug_str	00000000 
0002f230 l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0002f159 l       .debug_str	00000000 
0005ae43 l       .debug_str	00000000 
00060010 l       .debug_str	00000000 
00011622 l       .debug_str	00000000 
0001162b l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
00011634 l       .debug_str	00000000 
00012c29 l       .debug_str	00000000 
00011637 l       .debug_str	00000000 
0004cc70 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0005b682 l       .debug_str	00000000 
0005ff9b l       .debug_str	00000000 
00025428 l       .debug_str	00000000 
0001163a l       .debug_str	00000000 
0005abe7 l       .debug_str	00000000 
000125fa l       .debug_str	00000000 
0005c068 l       .debug_str	00000000 
00011642 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0001164e l       .debug_str	00000000 
0003d8e3 l       .debug_str	00000000 
00010a7c l       .debug_str	00000000 
0004681e l       .debug_str	00000000 
0005bee0 l       .debug_str	00000000 
00010f6c l       .debug_str	00000000 
00010f77 l       .debug_str	00000000 
00010f84 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00011668 l       .debug_str	00000000 
00011463 l       .debug_str	00000000 
0001166f l       .debug_str	00000000 
00011f3f l       .debug_str	00000000 
0000c26b l       .debug_str	00000000 
0000237c l       .debug_str	00000000 
00002382 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611fd l       .debug_str	00000000 
0001f339 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005a7ac l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
0001168a l       .debug_str	00000000 
00011695 l       .debug_str	00000000 
00010a89 l       .debug_str	00000000 
000116a1 l       .debug_str	00000000 
000116ac l       .debug_str	00000000 
000116b7 l       .debug_str	00000000 
000116c2 l       .debug_str	00000000 
000116cd l       .debug_str	00000000 
000116d8 l       .debug_str	00000000 
000116e3 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0005cd19 l       .debug_str	00000000 
0001162e l       .debug_str	00000000 
00010e9c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000425f8 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f4b5 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00059efa l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
000602f0 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
00010ea7 l       .debug_str	00000000 
00010ed5 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00010ee6 l       .debug_str	00000000 
00010f1a l       .debug_str	00000000 
00010f28 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea1f l       .debug_str	00000000 
000399c4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00010f59 l       .debug_str	00000000 
00010f65 l       .debug_str	00000000 
00010f70 l       .debug_str	00000000 
00010f7d l       .debug_str	00000000 
00010f8b l       .debug_str	00000000 
0001c3cf l       .debug_str	00000000 
0001165f l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00010f9a l       .debug_str	00000000 
00010fa3 l       .debug_str	00000000 
00010fac l       .debug_str	00000000 
00010fb7 l       .debug_str	00000000 
00010fc3 l       .debug_str	00000000 
00010fcd l       .debug_str	00000000 
00011f50 l       .debug_str	00000000 
00000b83 l       .debug_str	00000000 
00000b8c l       .debug_str	00000000 
00000b90 l       .debug_str	00000000 
00000bba l       .debug_str	00000000 
00010fda l       .debug_str	00000000 
00011005 l       .debug_str	00000000 
20000218 l     O .bss	00000050 _ZN3app5chip810CHIP8_TASK17hdc3e015a60662be5E
0000c542 l     F .text	000000a8 _ZN3app5chip812render_block17hf14dcded684223a2E
0000c620 l     F .text	00000364 _ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE
0000c5ea l     F .text	00000036 _ZN3app5chip813PixelIterator3new17h822e2c1da3bbcd7bE
20004268 l     O .bss	00000800 _ZN3app5chip813SCREEN_BUFFER17hf6360141ad32453fE
0000c240 l     F .text	00000302 _ZN3app5chip813render_region17h63a2f42595e40485E
20000268 l     O .bss	00004000 _ZN3app5chip816CHIP8_TASK_STACK17hb31f2a0cca07481dE
0000bccc l     F .text	0000000e _ZN3app5chip88Hardware3new17h96952bcb3fb4d968E
0000bc16 l     F .text	000000b6 _ZN3app5chip89task_func17h385831a0096277b5E
0001f490 l     O .text	00000021 str.0
0001f4d0 l     O .text	0000001c str.1
0001f5b0 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 2c6bdy6rt6z3zh1y
000118ee l       .debug_str	00000000 
0000ac06 l       .debug_str	00000000 
0003e60e l       .debug_str	00000000 
000118b3 l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00011957 l       .debug_str	00000000 
000119c2 l       .debug_str	00000000 
000119fe l       .debug_str	00000000 
00011a4b l       .debug_str	00000000 
00011a87 l       .debug_str	00000000 
00011a95 l       .debug_str	00000000 
00011b00 l       .debug_str	00000000 
00011b1b l       .debug_str	00000000 
00011b87 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0005ae43 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00011bde l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f339 l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
000116ee l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0005cff0 l       .debug_str	00000000 
000612e3 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016211 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0001162b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00003dcc l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
00011798 l       .debug_str	00000000 
000229d8 l       .debug_str	00000000 
0005f736 l       .debug_str	00000000 
00011712 l       .debug_str	00000000 
000116f7 l       .debug_str	00000000 
00011741 l       .debug_str	00000000 
00011bf1 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001f41e l       .debug_str	00000000 
00001425 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
000160ec l       .debug_str	00000000 
00011793 l       .debug_str	00000000 
000117a2 l       .debug_str	00000000 
000117db l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000112c3 l       .debug_str	00000000 
0001183a l       .debug_str	00000000 
00011873 l       .debug_str	00000000 
0001189c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2xbkmlpi4vyn2qbv
0003d8e5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000bfac l       .debug_str	00000000 
000163e0 l       .debug_str	00000000 
0000e634 l       .debug_str	00000000 
0005cd19 l       .debug_str	00000000 
0001162e l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00010f9a l       .debug_str	00000000 
00010fa3 l       .debug_str	00000000 
00010fac l       .debug_str	00000000 
00010fb7 l       .debug_str	00000000 
00010fc3 l       .debug_str	00000000 
00010fcd l       .debug_str	00000000 
00011f50 l       .debug_str	00000000 
00011f3f l       .debug_str	00000000 
00034a7f l       .debug_str	00000000 
00011c3e l       .debug_str	00000000 
00011c8a l       .debug_str	00000000 
0000e631 l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
00040d35 l       .debug_str	00000000 
00019e52 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 36ol61x1a5do2305
00011dbb l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000e5e1 l       .debug_str	00000000 
0000e631 l       .debug_str	00000000 
00040d35 l       .debug_str	00000000 
00019e52 l       .debug_str	00000000 
0003d8e5 l       .debug_str	00000000 
0000e634 l       .debug_str	00000000 
0005ae43 l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
0000c26b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0005d5d4 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0000c055 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
000031ab l       .debug_str	00000000 
000229d6 l       .debug_str	00000000 
0000c05d l       .debug_str	00000000 
0005aa07 l       .debug_str	00000000 
00022a19 l       .debug_str	00000000 
000604af l       .debug_str	00000000 
0000c061 l       .debug_str	00000000 
0001c3cf l       .debug_str	00000000 
0000c065 l       .debug_str	00000000 
00001820 l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
0005f8eb l       .debug_str	00000000 
0000c06e l       .debug_str	00000000 
0005ef43 l       .debug_str	00000000 
0000e5f2 l       .debug_str	00000000 
0005cd19 l       .debug_str	00000000 
0001162e l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00010f9a l       .debug_str	00000000 
00010fa3 l       .debug_str	00000000 
00010fac l       .debug_str	00000000 
00010fb7 l       .debug_str	00000000 
00010fc3 l       .debug_str	00000000 
00010fcd l       .debug_str	00000000 
00011f50 l       .debug_str	00000000 
00011f3f l       .debug_str	00000000 
00034a7f l       .debug_str	00000000 
00011cbd l       .debug_str	00000000 
00011d0b l       .debug_str	00000000 
00011d6b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4ae8jurj2cyz895o
000002a2 l       .debug_str	00000000 
00011f1a l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00011572 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00011f3a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00011e1d l       .debug_str	00000000 
0005cd19 l       .debug_str	00000000 
0001162e l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00010f9a l       .debug_str	00000000 
00010fa3 l       .debug_str	00000000 
00010fac l       .debug_str	00000000 
00010fb7 l       .debug_str	00000000 
00010fc3 l       .debug_str	00000000 
00010fcd l       .debug_str	00000000 
00011f50 l       .debug_str	00000000 
00011f3f l       .debug_str	00000000 
000229d8 l       .debug_str	00000000 
00011e26 l       .debug_str	00000000 
00011e89 l       .debug_str	00000000 
00011eb3 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4vqyywb7xxbk2fnk
00012300 l       .debug_str	00000000 
00012627 l       .debug_str	00000000 
00043b7b l       .debug_str	00000000 
0001261f l       .debug_str	00000000 
00002450 l       .debug_str	00000000 
0001261b l       .debug_str	00000000 
00012616 l       .debug_str	00000000 
000221ab l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c068 l       .debug_str	00000000 
0005f736 l       .debug_str	00000000 
00011fa5 l       .debug_str	00000000 
00012031 l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
000116ee l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0005cff0 l       .debug_str	00000000 
000612e3 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016211 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
000229d8 l       .debug_str	00000000 
00011712 l       .debug_str	00000000 
0001204e l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000112c3 l       .debug_str	00000000 
000120da l       .debug_str	00000000 
0001210f l       .debug_str	00000000 
00012129 l       .debug_str	00000000 
0001215e l       .debug_str	00000000 
00012178 l       .debug_str	00000000 
000125eb l       .debug_str	00000000 
0005a835 l       .debug_str	00000000 
00011793 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000121ad l       .debug_str	00000000 
000125cc l       .debug_str	00000000 
00012592 l       .debug_str	00000000 
000121c7 l       .debug_str	00000000 
00012574 l       .debug_str	00000000 
000121fd l       .debug_str	00000000 
00012218 l       .debug_str	00000000 
0001253b l       .debug_str	00000000 
0001251f l       .debug_str	00000000 
0001226c l       .debug_str	00000000 
000124e8 l       .debug_str	00000000 
000124cc l       .debug_str	00000000 
00012495 l       .debug_str	00000000 
0001247a l       .debug_str	00000000 
00012444 l       .debug_str	00000000 
00012429 l       .debug_str	00000000 
000123f3 l       .debug_str	00000000 
000123d8 l       .debug_str	00000000 
000123a2 l       .debug_str	00000000 
00012387 l       .debug_str	00000000 
00012351 l       .debug_str	00000000 
00012336 l       .debug_str	00000000 
0001228e l       .debug_str	00000000 
000132a0 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0001265d l       .debug_str	00000000 
00012659 l       .debug_str	00000000 
0005ae24 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00059b20 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00011f5e l       .debug_str	00000000 
00015d14 l       .debug_str	00000000 
00011f62 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
000343ec l       .debug_str	00000000 
00011f67 l       .debug_str	00000000 
0001f600 l       .debug_str	00000000 
0001f455 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00033341 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0001162b l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
00011634 l       .debug_str	00000000 
00012c29 l       .debug_str	00000000 
00011637 l       .debug_str	00000000 
0004cc70 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0005b682 l       .debug_str	00000000 
0005ff9b l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00012653 l       .debug_str	00000000 
0001264d l       .debug_str	00000000 
00012647 l       .debug_str	00000000 
00012641 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0005d006 l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
00002535 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
00018bc9 l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
0001263e l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00025428 l       .debug_str	00000000 
0001163a l       .debug_str	00000000 
0001c3cf l       .debug_str	00000000 
0005abe7 l       .debug_str	00000000 
0005cd19 l       .debug_str	00000000 
0005a6a8 l       .debug_str	00000000 
0001162e l       .debug_str	00000000 
00010f59 l       .debug_str	00000000 
00010f65 l       .debug_str	00000000 
00010f70 l       .debug_str	00000000 
00010f7d l       .debug_str	00000000 
00010f8b l       .debug_str	00000000 
0001165f l       .debug_str	00000000 
000125fa l       .debug_str	00000000 
00011f6d l       .debug_str	00000000 
00011f93 l       .debug_str	00000000 
00003dcc l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
00011f9d l       .debug_str	00000000 
0005ab4d l       .debug_str	00000000 
000160ec l       .debug_str	00000000 
00011798 l       .debug_str	00000000 
0001263a l       .debug_str	00000000 
0005b7ba l       .debug_str	00000000 
00012a84 l       .debug_str	00000000 
00012af6 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00012631 l       .debug_str	00000000 
00011bf1 l       .debug_str	00000000 
0001f8c0 l     O .text	0000001c str.0
0001fb40 l     O .text	00000021 str.1
0001fe20 l     O .text	00000039 str.2
0001fe80 l     O .text	00000021 str.3
0001fec0 l     O .text	00000023 str.4
00000000 l    df *ABS*	00000000 5amxpeuxwufgc2g7
00012810 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000112c3 l       .debug_str	00000000 
0001189c l       .debug_str	00000000 
0001277c l       .debug_str	00000000 
00012859 l       .debug_str	00000000 
000128a3 l       .debug_str	00000000 
000128f6 l       .debug_str	00000000 
00012985 l       .debug_str	00000000 
000129e8 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00012a60 l       .debug_str	00000000 
00012ad2 l       .debug_str	00000000 
00012b90 l       .debug_str	00000000 
0005ae43 l       .debug_str	00000000 
0000ac06 l       .debug_str	00000000 
000116f7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
000116ee l       .debug_str	00000000 
0001261f l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00043b7b l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0005cff0 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
000612e3 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016211 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0001162b l       .debug_str	00000000 
00003dcc l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000160ec l       .debug_str	00000000 
00011798 l       .debug_str	00000000 
000229d8 l       .debug_str	00000000 
0005f736 l       .debug_str	00000000 
00011712 l       .debug_str	00000000 
00012627 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00011bf1 l       .debug_str	00000000 
00012631 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00012af6 l       .debug_str	00000000 
00012a84 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
00012662 l       .debug_str	00000000 
000126ec l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 5eukf9ymd90dvsi0
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00012b94 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00012bed l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00012b9c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 5fcitodfeuns782f
00012c6c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00012bfa l       .debug_str	00000000 
00012bff l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00012c06 l       .debug_str	00000000 
00012c0e l       .debug_str	00000000 
0000bfe3 l       .debug_str	00000000 
00012c16 l       .debug_str	00000000 
00012c1e l       .debug_str	00000000 
00012c25 l       .debug_str	00000000 
000165d5 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00012c2c l       .debug_str	00000000 
0005a736 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001f4ed l       .debug_str	00000000 
00012c81 l       .debug_str	00000000 
00012c31 l       .debug_str	00000000 
00033d93 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 tdisvxegs4w5usn
00012d8d l       .debug_str	00000000 
00012631 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00012af6 l       .debug_str	00000000 
00012a84 l       .debug_str	00000000 
00012d1e l       .debug_str	00000000 
00012d5f l       .debug_str	00000000 
00012dce l       .debug_str	00000000 
00012e31 l       .debug_str	00000000 
0005ac3c l       .debug_str	00000000 
00012e81 l       .debug_str	00000000 
00012f01 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000112c3 l       .debug_str	00000000 
00012f75 l       .debug_str	00000000 
00012ff5 l       .debug_str	00000000 
0001189c l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000116f7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00011e1d l       .debug_str	00000000 
000365f3 l       .debug_str	00000000 
000116ee l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0005cff0 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
000612e3 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016211 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0001162b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00003dcc l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000160ec l       .debug_str	00000000 
00011798 l       .debug_str	00000000 
000229d8 l       .debug_str	00000000 
0005f736 l       .debug_str	00000000 
00011712 l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
00012c8d l       .debug_str	00000000 
00012cd0 l       .debug_str	00000000 
0001261f l       .debug_str	00000000 
00043b7b l       .debug_str	00000000 
00012627 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00011bf1 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 u3mfxzl87iwp64s
000130d1 l       .debug_str	00000000 
0005ac3c l       .debug_str	00000000 
000160ec l       .debug_str	00000000 
00013110 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000112c3 l       .debug_str	00000000 
00013183 l       .debug_str	00000000 
000131c2 l       .debug_str	00000000 
000132a0 l       .debug_str	00000000 
000131ff l       .debug_str	00000000 
00013262 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00013289 l       .debug_str	00000000 
0005a6a8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00011e1d l       .debug_str	00000000 
000365f3 l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0005ab4d l       .debug_str	00000000 
00013033 l       .debug_str	00000000 
000130c8 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005cff0 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
000612e3 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016211 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
000116ee l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0001162b l       .debug_str	00000000 
00003dcc l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
00011798 l       .debug_str	00000000 
000229d8 l       .debug_str	00000000 
0005f736 l       .debug_str	00000000 
00011712 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 cstr_core.8j8txwjh-cgu.0
00014900 l       .debug_str	00000000 
000138f1 l       .debug_str	00000000 
0001391b l       .debug_str	00000000 
00013969 l       .debug_str	00000000 
00013971 l       .debug_str	00000000 
0000bf06 l       .debug_str	00000000 
000139be l       .debug_str	00000000 
00013a18 l       .debug_str	00000000 
00013a26 l       .debug_str	00000000 
00013a79 l       .debug_str	00000000 
00013a81 l       .debug_str	00000000 
00013ad6 l       .debug_str	00000000 
00013ae0 l       .debug_str	00000000 
00013b1e l       .debug_str	00000000 
00013b39 l       .debug_str	00000000 
00013b98 l       .debug_str	00000000 
00012b91 l       .debug_str	00000000 
0001c3cf l       .debug_str	00000000 
00013bfd l       .debug_str	00000000 
00013c2e l       .debug_str	00000000 
00013c39 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
00013c6b l       .debug_str	00000000 
00013c99 l       .debug_str	00000000 
00013cab l       .debug_str	00000000 
00013cd1 l       .debug_str	00000000 
00013cdd l       .debug_str	00000000 
0000be46 l       .debug_str	00000000 
00013d24 l       .debug_str	00000000 
0000be9b l       .debug_str	00000000 
0000bf65 l       .debug_str	00000000 
00013d6f l       .debug_str	00000000 
0005ab4d l       .debug_str	00000000 
00013d75 l       .debug_str	00000000 
00013e01 l       .debug_str	00000000 
00013e1c l       .debug_str	00000000 
00013e4c l       .debug_str	00000000 
00013e81 l       .debug_str	00000000 
00013eb1 l       .debug_str	00000000 
00013ec7 l       .debug_str	00000000 
00013efd l       .debug_str	00000000 
00013f18 l       .debug_str	00000000 
00013f52 l       .debug_str	00000000 
00013f71 l       .debug_str	00000000 
00013fad l       .debug_str	00000000 
00013fd3 l       .debug_str	00000000 
00013fdf l       .debug_str	00000000 
00014006 l       .debug_str	00000000 
00014013 l       .debug_str	00000000 
00014220 l       .debug_str	00000000 
00014061 l       .debug_str	00000000 
00014290 l       .debug_str	00000000 
000140b2 l       .debug_str	00000000 
00014104 l       .debug_str	00000000 
00014110 l       .debug_str	00000000 
0001415b l       .debug_str	00000000 
0001416d l       .debug_str	00000000 
000141b0 l       .debug_str	00000000 
000141bb l       .debug_str	00000000 
00014217 l       .debug_str	00000000 
00014228 l       .debug_str	00000000 
00014287 l       .debug_str	00000000 
0001429b l       .debug_str	00000000 
000142f1 l       .debug_str	00000000 
00014386 l       .debug_str	00000000 
00014392 l       .debug_str	00000000 
0001442c l       .debug_str	00000000 
0001443d l       .debug_str	00000000 
00014462 l       .debug_str	00000000 
0001450b l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0005ac3c l       .debug_str	00000000 
0001451c l       .debug_str	00000000 
000145a4 l       .debug_str	00000000 
0001455b l       .debug_str	00000000 
0001459f l       .debug_str	00000000 
000145e9 l       .debug_str	00000000 
0001462a l       .debug_str	00000000 
0001464f l       .debug_str	00000000 
000146a0 l       .debug_str	00000000 
000146e5 l       .debug_str	00000000 
00014738 l       .debug_str	00000000 
00014799 l       .debug_str	00000000 
00014800 l       .debug_str	00000000 
0000ab71 l       .debug_str	00000000 
00014847 l       .debug_str	00000000 
00014892 l       .debug_str	00000000 
0001489f l       .debug_str	00000000 
00014979 l       .debug_str	00000000 
00014971 l       .debug_str	00000000 
00014981 l       .debug_str	00000000 
00003cf0 l       .debug_str	00000000 
0001499d l       .debug_str	00000000 
00014a12 l       .debug_str	00000000 
00014a3d l       .debug_str	00000000 
00014ab6 l       .debug_str	00000000 
00014ac0 l       .debug_str	00000000 
00014ae6 l       .debug_str	00000000 
00014b1f l       .debug_str	00000000 
00011793 l       .debug_str	00000000 
00014b37 l       .debug_str	00000000 
00014b70 l       .debug_str	00000000 
00014ba8 l       .debug_str	00000000 
0000ac06 l       .debug_str	00000000 
00014be1 l       .debug_str	00000000 
00014c1c l       .debug_str	00000000 
00014c60 l       .debug_str	00000000 
00014ca6 l       .debug_str	00000000 
00014ce2 l       .debug_str	00000000 
00014d0a l       .debug_str	00000000 
00014d46 l       .debug_str	00000000 
00014d6a l       .debug_str	00000000 
00014dc7 l       .debug_str	00000000 
00014ddb l       .debug_str	00000000 
00014e2c l       .debug_str	00000000 
00015d14 l       .debug_str	00000000 
00014e38 l       .debug_str	00000000 
00014e89 l       .debug_str	00000000 
00014ea0 l       .debug_str	00000000 
00014ef1 l       .debug_str	00000000 
00014f0f l       .debug_str	00000000 
00014f60 l       .debug_str	00000000 
00014f72 l       .debug_str	00000000 
00014fca l       .debug_str	00000000 
00014fe0 l       .debug_str	00000000 
00015043 l       .debug_str	00000000 
0001506e l       .debug_str	00000000 
000150d1 l       .debug_str	00000000 
00015146 l       .debug_str	00000000 
000151aa l       .debug_str	00000000 
000151b4 l       .debug_str	00000000 
0001521f l       .debug_str	00000000 
0001522e l       .debug_str	00000000 
0001529a l       .debug_str	00000000 
000152cc l       .debug_str	00000000 
000152f2 l       .debug_str	00000000 
00015361 l       .debug_str	00000000 
00015381 l       .debug_str	00000000 
000153f1 l       .debug_str	00000000 
00015412 l       .debug_str	00000000 
000130c8 l       .debug_str	00000000 
00015486 l       .debug_str	00000000 
00015506 l       .debug_str	00000000 
0001554c l       .debug_str	00000000 
00015575 l       .debug_str	00000000 
0001557c l       .debug_str	00000000 
000155b4 l       .debug_str	00000000 
000155f3 l       .debug_str	00000000 
000155fa l       .debug_str	00000000 
00015673 l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
0001570a l       .debug_str	00000000 
00015788 l       .debug_str	00000000 
00015792 l       .debug_str	00000000 
00015820 l       .debug_str	00000000 
000158cc l       .debug_str	00000000 
00015913 l       .debug_str	00000000 
00015920 l       .debug_str	00000000 
0001596d l       .debug_str	00000000 
00015980 l       .debug_str	00000000 
000159d2 l       .debug_str	00000000 
00015a42 l       .debug_str	00000000 
00013634 l       .debug_str	00000000 
00015aa2 l       .debug_str	00000000 
00015ab3 l       .debug_str	00000000 
00015b18 l       .debug_str	00000000 
00015b48 l       .debug_str	00000000 
00015b51 l       .debug_str	00000000 
00015b8d l       .debug_str	00000000 
00015ba1 l       .debug_str	00000000 
00015bdc l       .debug_str	00000000 
00015c22 l       .debug_str	00000000 
00015c40 l       .debug_str	00000000 
00015c70 l       .debug_str	00000000 
00015c79 l       .debug_str	00000000 
00015cb3 l       .debug_str	00000000 
00015cc5 l       .debug_str	00000000 
00015cf3 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00015cfa l       .debug_str	00000000 
00015d06 l       .debug_str	00000000 
00015d10 l       .debug_str	00000000 
00015d1a l       .debug_str	00000000 
00015d3d l       .debug_str	00000000 
00033cad l       .debug_str	00000000 
00015d92 l       .debug_str	00000000 
00015df2 l       .debug_str	00000000 
00015dfe l       .debug_str	00000000 
00015e4e l       .debug_str	00000000 
00015eb1 l       .debug_str	00000000 
00015f18 l       .debug_str	00000000 
00015f87 l       .debug_str	00000000 
0005ae43 l       .debug_str	00000000 
00012b90 l       .debug_str	00000000 
00016017 l       .debug_str	00000000 
0005bee0 l       .debug_str	00000000 
00010f77 l       .debug_str	00000000 
0000bfe3 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
0001f369 l       .debug_str	00000000 
0005a6a8 l       .debug_str	00000000 
0001603e l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00016045 l       .debug_str	00000000 
0005ae24 l       .debug_str	00000000 
00016052 l       .debug_str	00000000 
0005abca l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0001605d l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
000160b1 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
0005cbb1 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
000160bc l       .debug_str	00000000 
000160e7 l       .debug_str	00000000 
0005f673 l       .debug_str	00000000 
00002389 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
000160f3 l       .debug_str	00000000 
0001612d l       .debug_str	00000000 
00016166 l       .debug_str	00000000 
00016175 l       .debug_str	00000000 
000161b8 l       .debug_str	00000000 
0005c0f5 l       .debug_str	00000000 
00038a80 l       .debug_str	00000000 
0005db1a l       .debug_str	00000000 
000161fa l       .debug_str	00000000 
0001621e l       .debug_str	00000000 
0001578d l       .debug_str	00000000 
0005a679 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
0001623e l       .debug_str	00000000 
0004681e l       .debug_str	00000000 
00016279 l       .debug_str	00000000 
00016280 l       .debug_str	00000000 
0003741a l       .debug_str	00000000 
000007da l       .debug_str	00000000 
000162c1 l       .debug_str	00000000 
00016308 l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
0001f82c l       .debug_str	00000000 
000162e2 l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
000168d2 l       .debug_str	00000000 
00016304 l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
0001168a l       .debug_str	00000000 
00011695 l       .debug_str	00000000 
00010a89 l       .debug_str	00000000 
0001168e l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
0000b6ea l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000132aa l       .debug_str	00000000 
00013302 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0001334f l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00013359 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
00013365 l       .debug_str	00000000 
000160cd l       .debug_str	00000000 
000160c1 l       .debug_str	00000000 
000160ec l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea1f l       .debug_str	00000000 
000399c4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005e7ab l       .debug_str	00000000 
0003579f l       .debug_str	00000000 
00013376 l       .debug_str	00000000 
0001337b l       .debug_str	00000000 
00013381 l       .debug_str	00000000 
000165d5 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
000116ee l       .debug_str	00000000 
0001261f l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00013389 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0001338f l       .debug_str	00000000 
00033341 l       .debug_str	00000000 
0005a736 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611fd l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001f339 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005a7ac l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000394da l       .debug_str	00000000 
0005cbc3 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a835 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4b6 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0005e9c7 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0001339a l       .debug_str	00000000 
000133c3 l       .debug_str	00000000 
000133d2 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000114e6 l       .debug_str	00000000 
000114ea l       .debug_str	00000000 
0001616f l       .debug_str	00000000 
000133ec l       .debug_str	00000000 
00013415 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
0001344a l       .debug_str	00000000 
0001345e l       .debug_str	00000000 
00013471 l       .debug_str	00000000 
000134bd l       .debug_str	00000000 
000134cb l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00035779 l       .debug_str	00000000 
000134d3 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00011e1d l       .debug_str	00000000 
000365f3 l       .debug_str	00000000 
000612e3 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013624 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00011798 l       .debug_str	00000000 
000229d8 l       .debug_str	00000000 
0005f736 l       .debug_str	00000000 
0001629b l       .debug_str	00000000 
00043b7b l       .debug_str	00000000 
00012627 l       .debug_str	00000000 
000134dd l       .debug_str	00000000 
0005cff0 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016211 l       .debug_str	00000000 
0005c259 l       .debug_str	00000000 
00014ad8 l       .debug_str	00000000 
00016251 l       .debug_str	00000000 
00012631 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00015fab l       .debug_str	00000000 
00015f3c l       .debug_str	00000000 
000134e3 l       .debug_str	00000000 
000134e9 l       .debug_str	00000000 
00013512 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00014ac1 l       .debug_str	00000000 
0001351e l       .debug_str	00000000 
00012b94 l       .debug_str	00000000 
0001354b l       .debug_str	00000000 
0003e60e l       .debug_str	00000000 
00013556 l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
0001357f l       .debug_str	00000000 
00013586 l       .debug_str	00000000 
000135b0 l       .debug_str	00000000 
0002054c l       .debug_str	00000000 
000135b4 l       .debug_str	00000000 
000221ab l       .debug_str	00000000 
000135bd l       .debug_str	00000000 
000135ff l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00013612 l       .debug_str	00000000 
0005f640 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
0004aecd l       .debug_str	00000000 
0001362d l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
0001363c l       .debug_str	00000000 
00013646 l       .debug_str	00000000 
000162ee l       .debug_str	00000000 
00015aae l       .debug_str	00000000 
0001364b l       .debug_str	00000000 
000136d1 l       .debug_str	00000000 
000136db l       .debug_str	00000000 
0001376d l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
000137b3 l       .debug_str	00000000 
00013847 l       .debug_str	00000000 
000138a9 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 embedded_graphics.94s3esdv-cgu.0
00016cca l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
0005e9c7 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000394da l       .debug_str	00000000 
0005cbc3 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a835 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4b6 l       .debug_str	00000000 
0000e8a0 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000e738 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00018c38 l       .debug_str	00000000 
0000c21f l       .debug_str	00000000 
0000c284 l       .debug_str	00000000 
000163c1 l       .debug_str	00000000 
000163ca l       .debug_str	00000000 
000163d2 l       .debug_str	00000000 
000163db l       .debug_str	00000000 
00034a7f l       .debug_str	00000000 
000163e8 l       .debug_str	00000000 
000163f8 l       .debug_str	00000000 
00016409 l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00018c83 l       .debug_str	00000000 
0000efc8 l       .debug_str	00000000 
0001641a l       .debug_str	00000000 
0000e718 l       .debug_str	00000000 
0000e726 l       .debug_str	00000000 
00018ce9 l       .debug_str	00000000 
00016423 l       .debug_str	00000000 
00016429 l       .debug_str	00000000 
00016434 l       .debug_str	00000000 
0001643e l       .debug_str	00000000 
00016448 l       .debug_str	00000000 
0000b802 l       .debug_str	00000000 
00016490 l       .debug_str	00000000 
0000b8eb l       .debug_str	00000000 
000164d8 l       .debug_str	00000000 
00016520 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
00016529 l       .debug_str	00000000 
00016552 l       .debug_str	00000000 
0001655b l       .debug_str	00000000 
000165b8 l       .debug_str	00000000 
0005f736 l       .debug_str	00000000 
000165de l       .debug_str	00000000 
00016606 l       .debug_str	00000000 
00016638 l       .debug_str	00000000 
00013c2e l       .debug_str	00000000 
00016669 l       .debug_str	00000000 
000166c6 l       .debug_str	00000000 
00016723 l       .debug_str	00000000 
00016780 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
000167b2 l       .debug_str	00000000 
000167f7 l       .debug_str	00000000 
0001c3cf l       .debug_str	00000000 
00016803 l       .debug_str	00000000 
00059c40 l       .debug_str	00000000 
0001683f l       .debug_str	00000000 
0000e851 l       .debug_str	00000000 
00016883 l       .debug_str	00000000 
000168ca l       .debug_str	00000000 
000168d8 l       .debug_str	00000000 
0001691f l       .debug_str	00000000 
0001692d l       .debug_str	00000000 
0001696d l       .debug_str	00000000 
00016975 l       .debug_str	00000000 
0000e8d8 l       .debug_str	00000000 
00016982 l       .debug_str	00000000 
000169bd l       .debug_str	00000000 
000169fb l       .debug_str	00000000 
00016a2b l       .debug_str	00000000 
00016a3f l       .debug_str	00000000 
00016a6f l       .debug_str	00000000 
00016a83 l       .debug_str	00000000 
00016ab3 l       .debug_str	00000000 
00016ac7 l       .debug_str	00000000 
0003f8fe l       .debug_str	00000000 
00016b12 l       .debug_str	00000000 
00016b69 l       .debug_str	00000000 
00016b78 l       .debug_str	00000000 
00016bc3 l       .debug_str	00000000 
0000be4e l       .debug_str	00000000 
00016c3a l       .debug_str	00000000 
00016cbf l       .debug_str	00000000 
0000bf06 l       .debug_str	00000000 
00016d41 l       .debug_str	00000000 
00016dc6 l       .debug_str	00000000 
00016dd1 l       .debug_str	00000000 
0005a679 l       .debug_str	00000000 
00016e5a l       .debug_str	00000000 
0001fc9a l       .debug_str	00000000 
00016ed1 l       .debug_str	00000000 
0005c067 l       .debug_str	00000000 
00016f66 l       .debug_str	00000000 
00016ffd l       .debug_str	00000000 
00017098 l       .debug_str	00000000 
0001712d l       .debug_str	00000000 
000171c4 l       .debug_str	00000000 
0001725f l       .debug_str	00000000 
00017327 l       .debug_str	00000000 
00017332 l       .debug_str	00000000 
000173fe l       .debug_str	00000000 
0001748e l       .debug_str	00000000 
0001749a l       .debug_str	00000000 
00017540 l       .debug_str	00000000 
0001754c l       .debug_str	00000000 
000175f0 l       .debug_str	00000000 
00017692 l       .debug_str	00000000 
00017736 l       .debug_str	00000000 
0001778a l       .debug_str	00000000 
000177df l       .debug_str	00000000 
00017834 l       .debug_str	00000000 
00013634 l       .debug_str	00000000 
000178b7 l       .debug_str	00000000 
0001793b l       .debug_str	00000000 
000179bf l       .debug_str	00000000 
00002878 l       .debug_str	00000000 
00017a06 l       .debug_str	00000000 
0000287e l       .debug_str	00000000 
00017a4d l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
00017a94 l       .debug_str	00000000 
00017b12 l       .debug_str	00000000 
00017b91 l       .debug_str	00000000 
00017c2c l       .debug_str	00000000 
00017cc0 l       .debug_str	00000000 
00017d0d l       .debug_str	00000000 
00017d19 l       .debug_str	00000000 
00017d7c l       .debug_str	00000000 
00017dc4 l       .debug_str	00000000 
000114e6 l       .debug_str	00000000 
00017dcc l       .debug_str	00000000 
00017e60 l       .debug_str	00000000 
00017ec6 l       .debug_str	00000000 
00017f57 l       .debug_str	00000000 
00017ff6 l       .debug_str	00000000 
00018087 l       .debug_str	00000000 
00018126 l       .debug_str	00000000 
000181c8 l       .debug_str	00000000 
00018259 l       .debug_str	00000000 
00018307 l       .debug_str	00000000 
000183b7 l       .debug_str	00000000 
0001846b l       .debug_str	00000000 
0001855e l       .debug_str	00000000 
00018569 l       .debug_str	00000000 
00018660 l       .debug_str	00000000 
0001870c l       .debug_str	00000000 
00018716 l       .debug_str	00000000 
00018788 l       .debug_str	00000000 
000187fd l       .debug_str	00000000 
00018870 l       .debug_str	00000000 
000188e1 l       .debug_str	00000000 
00018954 l       .debug_str	00000000 
000189cb l       .debug_str	00000000 
00018a40 l       .debug_str	00000000 
00018ab5 l       .debug_str	00000000 
00018b25 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000bb2d l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0000bb39 l       .debug_str	00000000 
00018bb1 l       .debug_str	00000000 
0001f369 l       .debug_str	00000000 
00018bb7 l       .debug_str	00000000 
00013969 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
000160ec l       .debug_str	00000000 
0001605d l       .debug_str	00000000 
000168d2 l       .debug_str	00000000 
00018bba l       .debug_str	00000000 
00018bc4 l       .debug_str	00000000 
00018bce l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00018bd8 l       .debug_str	00000000 
00018c09 l       .debug_str	00000000 
0006175b l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
00018c3e l       .debug_str	00000000 
00018c48 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00018c52 l       .debug_str	00000000 
00018c5b l       .debug_str	00000000 
00018c8a l       .debug_str	00000000 
00018c97 l       .debug_str	00000000 
00018c9a l       .debug_str	00000000 
00018c9d l       .debug_str	00000000 
00018ca0 l       .debug_str	00000000 
00018ca3 l       .debug_str	00000000 
00018ca6 l       .debug_str	00000000 
00018ca9 l       .debug_str	00000000 
00018cf7 l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
0001168e l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
00010a89 l       .debug_str	00000000 
000116a1 l       .debug_str	00000000 
00018d67 l       .debug_str	00000000 
00018d41 l       .debug_str	00000000 
00018d9a l       .debug_str	00000000 
00018d75 l       .debug_str	00000000 
00018dcb l       .debug_str	00000000 
00018da7 l       .debug_str	00000000 
00018dfc l       .debug_str	00000000 
00018dd7 l       .debug_str	00000000 
00018e30 l       .debug_str	00000000 
00018e09 l       .debug_str	00000000 
00018e65 l       .debug_str	00000000 
00018e3f l       .debug_str	00000000 
00018e99 l       .debug_str	00000000 
00018e73 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001630c l       .debug_str	00000000 
0001636c l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00018bbf l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
00018bc9 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00018bd3 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea1f l       .debug_str	00000000 
000399c4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005e7ab l       .debug_str	00000000 
0003579f l       .debug_str	00000000 
00013376 l       .debug_str	00000000 
0001337b l       .debug_str	00000000 
00013381 l       .debug_str	00000000 
000165d5 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00038690 l       .debug_str	00000000 
00033341 l       .debug_str	00000000 
0005a736 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611fd l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f339 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005a7ac l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
000117d0 l     F .text	00000044 _ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE
000118c4 l     F .text	0000006e _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E
00011932 l     F .text	00000038 _ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE
0001196a l     F .text	0000001a _ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E
00000000 l    df *ABS*	00000000 hash32.79y5bd3b-cgu.0
00014f60 l       .debug_str	00000000 
00019381 l       .debug_str	00000000 
0000be9b l       .debug_str	00000000 
0000bf65 l       .debug_str	00000000 
000193cc l       .debug_str	00000000 
00013efd l       .debug_str	00000000 
00019402 l       .debug_str	00000000 
00013f52 l       .debug_str	00000000 
0001943c l       .debug_str	00000000 
00019478 l       .debug_str	00000000 
00013fd3 l       .debug_str	00000000 
0001949e l       .debug_str	00000000 
00014006 l       .debug_str	00000000 
000194c5 l       .debug_str	00000000 
00014220 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00019513 l       .debug_str	00000000 
00014290 l       .debug_str	00000000 
00019564 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000195b6 l       .debug_str	00000000 
0005ab4d l       .debug_str	00000000 
0001960b l       .debug_str	00000000 
00014386 l       .debug_str	00000000 
000196a0 l       .debug_str	00000000 
000196ee l       .debug_str	00000000 
000229d8 l       .debug_str	00000000 
000196fd l       .debug_str	00000000 
0001974e l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00019766 l       .debug_str	00000000 
000197bb l       .debug_str	00000000 
000197d7 l       .debug_str	00000000 
000197df l       .debug_str	00000000 
00019825 l       .debug_str	00000000 
0001982d l       .debug_str	00000000 
000141b0 l       .debug_str	00000000 
00019876 l       .debug_str	00000000 
0005c067 l       .debug_str	00000000 
000198e5 l       .debug_str	00000000 
00014e2c l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00019936 l       .debug_str	00000000 
00019987 l       .debug_str	00000000 
00014fca l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
0001354b l       .debug_str	00000000 
0003e60e l       .debug_str	00000000 
00013556 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005cff0 l       .debug_str	00000000 
000612e3 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016211 l       .debug_str	00000000 
000199df l       .debug_str	00000000 
00019a42 l       .debug_str	00000000 
00019a6c l       .debug_str	00000000 
00019acf l       .debug_str	00000000 
00019ad8 l       .debug_str	00000000 
00019b45 l       .debug_str	00000000 
00019b57 l       .debug_str	00000000 
00003c53 l       .debug_str	00000000 
00019bc8 l       .debug_str	00000000 
00013634 l       .debug_str	00000000 
00019c28 l       .debug_str	00000000 
00019c5b l       .debug_str	00000000 
00019cc5 l       .debug_str	00000000 
00019cf8 l       .debug_str	00000000 
00019cfd l       .debug_str	00000000 
00019d61 l       .debug_str	00000000 
0005e920 l       .debug_str	00000000 
00019dbc l       .debug_str	00000000 
00019df8 l       .debug_str	00000000 
00019e06 l       .debug_str	00000000 
00019e35 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000160ec l       .debug_str	00000000 
0005a6a8 l       .debug_str	00000000 
0001603e l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0005ae24 l       .debug_str	00000000 
0005abca l       .debug_str	00000000 
00016045 l       .debug_str	00000000 
00016052 l       .debug_str	00000000 
0001f369 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
000160b1 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
0005cbb1 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
0005f673 l       .debug_str	00000000 
00002389 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
000160f3 l       .debug_str	00000000 
0001612d l       .debug_str	00000000 
00016166 l       .debug_str	00000000 
00016175 l       .debug_str	00000000 
000161b8 l       .debug_str	00000000 
0005c0f5 l       .debug_str	00000000 
00038a80 l       .debug_str	00000000 
0005db1a l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
000161fa l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
000221ab l       .debug_str	00000000 
00035d12 l       .debug_str	00000000 
0005c259 l       .debug_str	00000000 
00019e3d l       .debug_str	00000000 
00019e55 l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
00019e72 l       .debug_str	00000000 
00011463 l       .debug_str	00000000 
00019e8b l       .debug_str	00000000 
00019ea7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00018ea7 l       .debug_str	00000000 
00018efc l       .debug_str	00000000 
00018f46 l       .debug_str	00000000 
00018f4d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00010a91 l       .debug_str	00000000 
000116a9 l       .debug_str	00000000 
000116b4 l       .debug_str	00000000 
000116bf l       .debug_str	00000000 
00019e4f l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0001338f l       .debug_str	00000000 
0005e7ab l       .debug_str	00000000 
00033341 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0005e9c7 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00018f55 l       .debug_str	00000000 
000133c3 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000133d2 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000114e6 l       .debug_str	00000000 
000114ea l       .debug_str	00000000 
0001616f l       .debug_str	00000000 
00018f7e l       .debug_str	00000000 
00013415 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
0005a736 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
0001344a l       .debug_str	00000000 
0001345e l       .debug_str	00000000 
00018fa7 l       .debug_str	00000000 
000134bd l       .debug_str	00000000 
000134cb l       .debug_str	00000000 
000134d3 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
00012b94 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00018ff3 l       .debug_str	00000000 
0000ae86 l       .debug_str	00000000 
0001901c l       .debug_str	00000000 
00019026 l       .debug_str	00000000 
0005a7ac l       .debug_str	00000000 
000168d2 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000574 l       .debug_str	00000000 
0005a679 l       .debug_str	00000000 
0001902a l       .debug_str	00000000 
0005ab9e l       .debug_str	00000000 
00019ea1 l       .debug_str	00000000 
00019e6b l       .debug_str	00000000 
00019034 l       .debug_str	00000000 
00013ad6 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001f339 l       .debug_str	00000000 
00019089 l       .debug_str	00000000 
000190c7 l       .debug_str	00000000 
000190df l       .debug_str	00000000 
00013b1e l       .debug_str	00000000 
0001911d l       .debug_str	00000000 
00012b91 l       .debug_str	00000000 
0001c3cf l       .debug_str	00000000 
00019182 l       .debug_str	00000000 
000191b2 l       .debug_str	00000000 
000191d9 l       .debug_str	00000000 
00013cd1 l       .debug_str	00000000 
000191ff l       .debug_str	00000000 
00019244 l       .debug_str	00000000 
00019250 l       .debug_str	00000000 
00019296 l       .debug_str	00000000 
000192a3 l       .debug_str	00000000 
000192e9 l       .debug_str	00000000 
000192f6 l       .debug_str	00000000 
00019334 l       .debug_str	00000000 
0001933a l       .debug_str	00000000 
0000be46 l       .debug_str	00000000 
00011b1a l     F .text	00000034 _ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE
00011b84 l     F .text	00000018 _ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E
00011bae l     F .text	0000003e _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE
00011bec l     F .text	00000040 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE
00011cbc l     F .text	0000011c _ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE
00000000 l    df *ABS*	00000000 4iim1qfb3qo0ur8y
00019f2b l       .debug_str	00000000 
00019f29 l       .debug_str	00000000 
00019f7c l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00019eb0 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00012b94 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00019ecf l       .debug_str	00000000 
00019f20 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 log.9af4yuww-cgu.0
0001c0fa l       .debug_str	00000000 
00012c16 l       .debug_str	00000000 
00012c1e l       .debug_str	00000000 
00012c25 l       .debug_str	00000000 
00011f5e l       .debug_str	00000000 
0001f600 l       .debug_str	00000000 
000116ee l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0001a2a4 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
0001a2a8 l       .debug_str	00000000 
00019825 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00035779 l       .debug_str	00000000 
000612e3 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013624 l       .debug_str	00000000 
0001a326 l       .debug_str	00000000 
0005cff0 l       .debug_str	00000000 
0004681e l       .debug_str	00000000 
000600c4 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0001a33d l       .debug_str	00000000 
00013512 l       .debug_str	00000000 
0001a366 l       .debug_str	00000000 
0001a398 l       .debug_str	00000000 
0001338f l       .debug_str	00000000 
00038690 l       .debug_str	00000000 
00033341 l       .debug_str	00000000 
0005e9c7 l       .debug_str	00000000 
0000e8a0 l       .debug_str	00000000 
0001a3aa l       .debug_str	00000000 
0001a3d3 l       .debug_str	00000000 
000133d2 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000114e6 l       .debug_str	00000000 
000114ea l       .debug_str	00000000 
0001616f l       .debug_str	00000000 
0001a3f8 l       .debug_str	00000000 
00013415 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
0001a421 l       .debug_str	00000000 
0001a44b l       .debug_str	00000000 
0001a474 l       .debug_str	00000000 
0001a4c0 l       .debug_str	00000000 
000134cb l       .debug_str	00000000 
0001a4e4 l       .debug_str	00000000 
000134d3 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
0000b253 l       .debug_str	00000000 
0000b294 l       .debug_str	00000000 
000221ab l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0005ac3c l       .debug_str	00000000 
0001a4f2 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00011e1d l       .debug_str	00000000 
000365f3 l       .debug_str	00000000 
0005b98f l       .debug_str	00000000 
0004e9e2 l       .debug_str	00000000 
0005c6f4 l       .debug_str	00000000 
0005e00d l       .debug_str	00000000 
000229d8 l       .debug_str	00000000 
0001f25a l       .debug_str	00000000 
00043b7b l       .debug_str	00000000 
0003929a l       .debug_str	00000000 
0005ab4d l       .debug_str	00000000 
0001f56a l       .debug_str	00000000 
0001f512 l       .debug_str	00000000 
0001a507 l       .debug_str	00000000 
0001a511 l       .debug_str	00000000 
0001f3f2 l       .debug_str	00000000 
00034a7f l       .debug_str	00000000 
0001f1ca l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0001cee1 l       .debug_str	00000000 
0005f736 l       .debug_str	00000000 
0001f5a3 l       .debug_str	00000000 
0005cbb1 l       .debug_str	00000000 
0001f582 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
0005a679 l       .debug_str	00000000 
0005f673 l       .debug_str	00000000 
0001f21b l       .debug_str	00000000 
000134e3 l       .debug_str	00000000 
0001a51a l       .debug_str	00000000 
0001a543 l       .debug_str	00000000 
0001a551 l       .debug_str	00000000 
0001a55e l       .debug_str	00000000 
0001a571 l       .debug_str	00000000 
0003e60e l       .debug_str	00000000 
0001a58a l       .debug_str	00000000 
00012b94 l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
0001a59f l       .debug_str	00000000 
0001a61b l       .debug_str	00000000 
0001a5b2 l       .debug_str	00000000 
0001a5f4 l       .debug_str	00000000 
0001a609 l       .debug_str	00000000 
0005f640 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
0004aecd l       .debug_str	00000000 
0001a626 l       .debug_str	00000000 
0001a630 l       .debug_str	00000000 
0001a662 l       .debug_str	00000000 
0001a676 l       .debug_str	00000000 
0001a68b l       .debug_str	00000000 
0001e7c5 l       .debug_str	00000000 
0001e9ce l       .debug_str	00000000 
0001a692 l       .debug_str	00000000 
0001a69d l       .debug_str	00000000 
0001a721 l       .debug_str	00000000 
0001a74f l       .debug_str	00000000 
0001a7d5 l       .debug_str	00000000 
00042a7c l       .debug_str	00000000 
0001a7fd l       .debug_str	00000000 
0001a80e l       .debug_str	00000000 
0001a898 l       .debug_str	00000000 
0001a8b6 l       .debug_str	00000000 
0001a944 l       .debug_str	00000000 
0001a96b l       .debug_str	00000000 
0001a9fa l       .debug_str	00000000 
0001aa42 l       .debug_str	00000000 
0001aa71 l       .debug_str	00000000 
0001aab9 l       .debug_str	00000000 
0001aad8 l       .debug_str	00000000 
0001ab20 l       .debug_str	00000000 
0001ab30 l       .debug_str	00000000 
0001ab78 l       .debug_str	00000000 
0001ab89 l       .debug_str	00000000 
0001abd1 l       .debug_str	00000000 
0001abd9 l       .debug_str	00000000 
0001ac21 l       .debug_str	00000000 
0001ac2b l       .debug_str	00000000 
0001ac73 l       .debug_str	00000000 
0001ac8d l       .debug_str	00000000 
0001acd5 l       .debug_str	00000000 
0001acee l       .debug_str	00000000 
0001ad36 l       .debug_str	00000000 
0001ad49 l       .debug_str	00000000 
0001ad91 l       .debug_str	00000000 
0001ad9a l       .debug_str	00000000 
0000b8eb l       .debug_str	00000000 
0001ade2 l       .debug_str	00000000 
0001ae2c l       .debug_str	00000000 
0001ae77 l       .debug_str	00000000 
0001aeb5 l       .debug_str	00000000 
0001aee6 l       .debug_str	00000000 
000190c7 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0001af24 l       .debug_str	00000000 
0001af4d l       .debug_str	00000000 
0001af58 l       .debug_str	00000000 
0001af7d l       .debug_str	00000000 
0001afdc l       .debug_str	00000000 
00033cad l       .debug_str	00000000 
0001c3cf l       .debug_str	00000000 
000160ec l       .debug_str	00000000 
0001b043 l       .debug_str	00000000 
0001b06d l       .debug_str	00000000 
0001b095 l       .debug_str	00000000 
0001b0cd l       .debug_str	00000000 
0001b0fe l       .debug_str	00000000 
0001b108 l       .debug_str	00000000 
0001b165 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
0001b197 l       .debug_str	00000000 
0001b1bd l       .debug_str	00000000 
0001b1df l       .debug_str	00000000 
0001b205 l       .debug_str	00000000 
0001b227 l       .debug_str	00000000 
0001b250 l       .debug_str	00000000 
0001b275 l       .debug_str	00000000 
0001b2bd l       .debug_str	00000000 
0001b2ca l       .debug_str	00000000 
0001b2d3 l       .debug_str	00000000 
0001b35d l       .debug_str	00000000 
00011f9d l       .debug_str	00000000 
0001b37a l       .debug_str	00000000 
0001b406 l       .debug_str	00000000 
0001b423 l       .debug_str	00000000 
0001b443 l       .debug_str	00000000 
0000e8d8 l       .debug_str	00000000 
0001b44a l       .debug_str	00000000 
0001b485 l       .debug_str	00000000 
0001b4b7 l       .debug_str	00000000 
0001b4c8 l       .debug_str	00000000 
0001b503 l       .debug_str	00000000 
0001b549 l       .debug_str	00000000 
00016ab3 l       .debug_str	00000000 
0001b579 l       .debug_str	00000000 
0001b5a9 l       .debug_str	00000000 
0001b5c7 l       .debug_str	00000000 
0001b5f7 l       .debug_str	00000000 
0001b60a l       .debug_str	00000000 
0001b63a l       .debug_str	00000000 
0001b64f l       .debug_str	00000000 
0001b67f l       .debug_str	00000000 
0001b69b l       .debug_str	00000000 
0001b6cb l       .debug_str	00000000 
0001b6e9 l       .debug_str	00000000 
0001b719 l       .debug_str	00000000 
0001b734 l       .debug_str	00000000 
0001b764 l       .debug_str	00000000 
0001b788 l       .debug_str	00000000 
0001b7b8 l       .debug_str	00000000 
0001b7f2 l       .debug_str	00000000 
0001b822 l       .debug_str	00000000 
0001b847 l       .debug_str	00000000 
0001b877 l       .debug_str	00000000 
0001b8a1 l       .debug_str	00000000 
0001b8d7 l       .debug_str	00000000 
0001b908 l       .debug_str	00000000 
0001b942 l       .debug_str	00000000 
0001b977 l       .debug_str	00000000 
0001b9b3 l       .debug_str	00000000 
0001b9d9 l       .debug_str	00000000 
0001b9fb l       .debug_str	00000000 
0001ba22 l       .debug_str	00000000 
0001ba45 l       .debug_str	00000000 
00014220 l       .debug_str	00000000 
0001ba93 l       .debug_str	00000000 
00014290 l       .debug_str	00000000 
0001bae4 l       .debug_str	00000000 
0001bb35 l       .debug_str	00000000 
0001bb42 l       .debug_str	00000000 
0001bb94 l       .debug_str	00000000 
0001bba2 l       .debug_str	00000000 
0001415b l       .debug_str	00000000 
0001bbed l       .debug_str	00000000 
0001bc38 l       .debug_str	00000000 
0001bc4c l       .debug_str	00000000 
0001bc8f l       .debug_str	00000000 
0001bc9c l       .debug_str	00000000 
000141b0 l       .debug_str	00000000 
0001bcdf l       .debug_str	00000000 
00014217 l       .debug_str	00000000 
0001bd3b l       .debug_str	00000000 
00014287 l       .debug_str	00000000 
0001bd9a l       .debug_str	00000000 
0001bdec l       .debug_str	00000000 
0001be3e l       .debug_str	00000000 
0001be48 l       .debug_str	00000000 
0001be9d l       .debug_str	00000000 
0001bef2 l       .debug_str	00000000 
0001bf48 l       .debug_str	00000000 
00014104 l       .debug_str	00000000 
0001bf9e l       .debug_str	00000000 
0001bfda l       .debug_str	00000000 
000168d2 l       .debug_str	00000000 
0001c018 l       .debug_str	00000000 
0001c053 l       .debug_str	00000000 
00016052 l       .debug_str	00000000 
0001c05e l       .debug_str	00000000 
0001c0a5 l       .debug_str	00000000 
00011798 l       .debug_str	00000000 
0001c0bb l       .debug_str	00000000 
0001c14c l       .debug_str	00000000 
0001c162 l       .debug_str	00000000 
0001c1a7 l       .debug_str	00000000 
0001c1c1 l       .debug_str	00000000 
0001c224 l       .debug_str	00000000 
0001c244 l       .debug_str	00000000 
0001c283 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0001c2e4 l       .debug_str	00000000 
0001c323 l       .debug_str	00000000 
0001f3ed l       .debug_str	00000000 
0001c34a l       .debug_str	00000000 
0001c38a l       .debug_str	00000000 
0001c3bd l       .debug_str	00000000 
0001c3d4 l       .debug_str	00000000 
0001c41a l       .debug_str	00000000 
0001c436 l       .debug_str	00000000 
0001c49a l       .debug_str	00000000 
0001c4bc l       .debug_str	00000000 
0001c4fe l       .debug_str	00000000 
0001c51f l       .debug_str	00000000 
0001c561 l       .debug_str	00000000 
0005d24d l       .debug_str	00000000 
0001c591 l       .debug_str	00000000 
0001c5d5 l       .debug_str	00000000 
0001c62a l       .debug_str	00000000 
0001c66e l       .debug_str	00000000 
0001c6c4 l       .debug_str	00000000 
0001c708 l       .debug_str	00000000 
0001c780 l       .debug_str	00000000 
0001c7c4 l       .debug_str	00000000 
0001c804 l       .debug_str	00000000 
0001c81f l       .debug_str	00000000 
0001c860 l       .debug_str	00000000 
0001c8b6 l       .debug_str	00000000 
0001c8fa l       .debug_str	00000000 
0001c927 l       .debug_str	00000000 
0001c96c l       .debug_str	00000000 
0001c9b4 l       .debug_str	00000000 
0001c9c5 l       .debug_str	00000000 
0001ca0d l       .debug_str	00000000 
0001ca1e l       .debug_str	00000000 
00033d93 l       .debug_str	00000000 
0001ca59 l       .debug_str	00000000 
0001ca95 l       .debug_str	00000000 
0001ca9b l       .debug_str	00000000 
0001cad1 l       .debug_str	00000000 
0001cae4 l       .debug_str	00000000 
0001cb1b l       .debug_str	00000000 
0001cb2f l       .debug_str	00000000 
0001cb71 l       .debug_str	00000000 
0001cb90 l       .debug_str	00000000 
0001cbd5 l       .debug_str	00000000 
0001cbf0 l       .debug_str	00000000 
0001cc55 l       .debug_str	00000000 
0001ccbc l       .debug_str	00000000 
0001ccc7 l       .debug_str	00000000 
0001cd0d l       .debug_str	00000000 
0001cd53 l       .debug_str	00000000 
0001cd5d l       .debug_str	00000000 
0001cda4 l       .debug_str	00000000 
0001cdaf l       .debug_str	00000000 
0000ab71 l       .debug_str	00000000 
0001cdf6 l       .debug_str	00000000 
0001ce3f l       .debug_str	00000000 
0001ce88 l       .debug_str	00000000 
0001cec1 l       .debug_str	00000000 
0001cedc l       .debug_str	00000000 
0001ceeb l       .debug_str	00000000 
0001cf24 l       .debug_str	00000000 
0001cf49 l       .debug_str	00000000 
0001cf82 l       .debug_str	00000000 
0001cfbb l       .debug_str	00000000 
0001cfe1 l       .debug_str	00000000 
0001d01a l       .debug_str	00000000 
0001d058 l       .debug_str	00000000 
0001d092 l       .debug_str	00000000 
0001d09e l       .debug_str	00000000 
0001d0da l       .debug_str	00000000 
0001d0ed l       .debug_str	00000000 
0001d129 l       .debug_str	00000000 
0001d142 l       .debug_str	00000000 
0001d17f l       .debug_str	00000000 
0001d190 l       .debug_str	00000000 
00014e2c l       .debug_str	00000000 
0001d1e1 l       .debug_str	00000000 
00019f20 l       .debug_str	00000000 
0001d232 l       .debug_str	00000000 
0001d28d l       .debug_str	00000000 
0001d2f0 l       .debug_str	00000000 
0001d30c l       .debug_str	00000000 
0001d36c l       .debug_str	00000000 
0001d3cc l       .debug_str	00000000 
0001d430 l       .debug_str	00000000 
0001d44b l       .debug_str	00000000 
0001d4af l       .debug_str	00000000 
0001d4ba l       .debug_str	00000000 
0001d524 l       .debug_str	00000000 
0001d533 l       .debug_str	00000000 
0001d5a2 l       .debug_str	00000000 
0001d5ba l       .debug_str	00000000 
0001d62a l       .debug_str	00000000 
0001d643 l       .debug_str	00000000 
0001d6ae l       .debug_str	00000000 
0001d6c3 l       .debug_str	00000000 
0001d733 l       .debug_str	00000000 
0001d748 l       .debug_str	00000000 
0001d7b8 l       .debug_str	00000000 
0001d7ca l       .debug_str	00000000 
0000389e l       .debug_str	00000000 
0001d83b l       .debug_str	00000000 
0001d8ac l       .debug_str	00000000 
0001d8c2 l       .debug_str	00000000 
0001d8d4 l       .debug_str	00000000 
0001d940 l       .debug_str	00000000 
0001d952 l       .debug_str	00000000 
0001d9be l       .debug_str	00000000 
0001d9cd l       .debug_str	00000000 
0001da35 l       .debug_str	00000000 
0001da3f l       .debug_str	00000000 
0001dab3 l       .debug_str	00000000 
00001425 l       .debug_str	00000000 
0001dabe l       .debug_str	00000000 
0001db36 l       .debug_str	00000000 
0001db4f l       .debug_str	00000000 
0001dbc7 l       .debug_str	00000000 
0001dc5d l       .debug_str	00000000 
0001dc79 l       .debug_str	00000000 
0001dd0f l       .debug_str	00000000 
0001dda5 l       .debug_str	00000000 
0001de3b l       .debug_str	00000000 
00014386 l       .debug_str	00000000 
0001deb0 l       .debug_str	00000000 
0001df24 l       .debug_str	00000000 
0001df9d l       .debug_str	00000000 
0001e01c l       .debug_str	00000000 
0001e02d l       .debug_str	00000000 
0001e0ad l       .debug_str	00000000 
0001e10f l       .debug_str	00000000 
0001f66d l       .debug_str	00000000 
0001e160 l       .debug_str	00000000 
0001e182 l       .debug_str	00000000 
0001e1af l       .debug_str	00000000 
0001e1de l       .debug_str	00000000 
0001e200 l       .debug_str	00000000 
0001e227 l       .debug_str	00000000 
0001e250 l       .debug_str	00000000 
0001e282 l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
0001e2d2 l       .debug_str	00000000 
0001e318 l       .debug_str	00000000 
0001e32b l       .debug_str	00000000 
0001e37f l       .debug_str	00000000 
0001e3f1 l       .debug_str	00000000 
0001e463 l       .debug_str	00000000 
0001e4d5 l       .debug_str	00000000 
0001e524 l       .debug_str	00000000 
0001e552 l       .debug_str	00000000 
0001e55d l       .debug_str	00000000 
0001e5b7 l       .debug_str	00000000 
0001e62f l       .debug_str	00000000 
0001e6a7 l       .debug_str	00000000 
0001e6fc l       .debug_str	00000000 
0001e731 l       .debug_str	00000000 
0000b6c3 l       .debug_str	00000000 
0001e75c l       .debug_str	00000000 
0003f8fe l       .debug_str	00000000 
0001e78b l       .debug_str	00000000 
0001e7bb l       .debug_str	00000000 
0001e7d3 l       .debug_str	00000000 
0001e804 l       .debug_str	00000000 
0001e836 l       .debug_str	00000000 
0001e875 l       .debug_str	00000000 
0001e888 l       .debug_str	00000000 
0001e8c0 l       .debug_str	00000000 
0001e8cc l       .debug_str	00000000 
0001e8fc l       .debug_str	00000000 
0001e92d l       .debug_str	00000000 
0001e933 l       .debug_str	00000000 
0001e960 l       .debug_str	00000000 
0001e991 l       .debug_str	00000000 
0001e9c4 l       .debug_str	00000000 
0001e9de l       .debug_str	00000000 
0001ea12 l       .debug_str	00000000 
0001ea45 l       .debug_str	00000000 
00059bd8 l       .debug_str	00000000 
0001ea92 l       .debug_str	00000000 
0001eadb l       .debug_str	00000000 
00059bbb l       .debug_str	00000000 
0001eb26 l       .debug_str	00000000 
0001eb4e l       .debug_str	00000000 
0001eb94 l       .debug_str	00000000 
0001eb9a l       .debug_str	00000000 
0001ebc8 l       .debug_str	00000000 
0001ebe4 l       .debug_str	00000000 
0001ec11 l       .debug_str	00000000 
0001ec21 l       .debug_str	00000000 
0001ec79 l       .debug_str	00000000 
0001ecd2 l       .debug_str	00000000 
0001ecf5 l       .debug_str	00000000 
0001ed24 l       .debug_str	00000000 
0001ed36 l       .debug_str	00000000 
0001ed69 l       .debug_str	00000000 
0001ed7f l       .debug_str	00000000 
0001edcc l       .debug_str	00000000 
0001ee1f l       .debug_str	00000000 
0001ee52 l       .debug_str	00000000 
0001ee62 l       .debug_str	00000000 
0001eeb8 l       .debug_str	00000000 
0001ef12 l       .debug_str	00000000 
0001ef60 l       .debug_str	00000000 
0001efb2 l       .debug_str	00000000 
0001f007 l       .debug_str	00000000 
0001f057 l       .debug_str	00000000 
0001f0ab l       .debug_str	00000000 
0001f102 l       .debug_str	00000000 
0001f158 l       .debug_str	00000000 
0001f1af l       .debug_str	00000000 
0001f1fb l       .debug_str	00000000 
0001f243 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0001f278 l       .debug_str	00000000 
0001f2a4 l       .debug_str	00000000 
0001f2c0 l       .debug_str	00000000 
0001f2cd l       .debug_str	00000000 
0001f2db l       .debug_str	00000000 
0001f2e0 l       .debug_str	00000000 
0001f2e7 l       .debug_str	00000000 
0001f2fe l       .debug_str	00000000 
0001f314 l       .debug_str	00000000 
0000bb39 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0001f324 l       .debug_str	00000000 
0005ae24 l       .debug_str	00000000 
0001f347 l       .debug_str	00000000 
0005abca l       .debug_str	00000000 
0001f369 l       .debug_str	00000000 
00018bb7 l       .debug_str	00000000 
0001f368 l       .debug_str	00000000 
00013969 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0001f36f l       .debug_str	00000000 
0001f3c2 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0001f3e3 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
0001f3e8 l       .debug_str	00000000 
00018bce l       .debug_str	00000000 
0001f3fc l       .debug_str	00000000 
0001f410 l       .debug_str	00000000 
0001f419 l       .debug_str	00000000 
0001f424 l       .debug_str	00000000 
0001f436 l       .debug_str	00000000 
0001f44a l       .debug_str	00000000 
0001f45b l       .debug_str	00000000 
0001f475 l       .debug_str	00000000 
0001f4a5 l       .debug_str	00000000 
0001f4c0 l       .debug_str	00000000 
00002389 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
000160f3 l       .debug_str	00000000 
0001612d l       .debug_str	00000000 
00016166 l       .debug_str	00000000 
00016175 l       .debug_str	00000000 
000161b8 l       .debug_str	00000000 
0005c0f5 l       .debug_str	00000000 
00038a80 l       .debug_str	00000000 
0005db1a l       .debug_str	00000000 
0001f4e0 l       .debug_str	00000000 
0001f4ff l       .debug_str	00000000 
0006004a l       .debug_str	00000000 
0001f522 l       .debug_str	00000000 
0005ae43 l       .debug_str	00000000 
00012c6c l       .debug_str	00000000 
0001f528 l       .debug_str	00000000 
0000bfe3 l       .debug_str	00000000 
0001f530 l       .debug_str	00000000 
0005b9fc l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
00016045 l       .debug_str	00000000 
0005c46b l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
0001168e l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
0000b6ea l       .debug_str	00000000 
0001f538 l       .debug_str	00000000 
0000b786 l       .debug_str	00000000 
0000b796 l       .debug_str	00000000 
0000b7a1 l       .debug_str	00000000 
0005a6a8 l       .debug_str	00000000 
0001f557 l       .debug_str	00000000 
0001f576 l       .debug_str	00000000 
0001f588 l       .debug_str	00000000 
00016973 l       .debug_str	00000000 
00011793 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00001d54 l       .debug_str	00000000 
0006175b l       .debug_str	00000000 
0005c316 l       .debug_str	00000000 
0003741a l       .debug_str	00000000 
0001f5fa l       .debug_str	00000000 
0001a295 l       .debug_str	00000000 
0001f60c l       .debug_str	00000000 
00060011 l       .debug_str	00000000 
0001f620 l       .debug_str	00000000 
0001f636 l       .debug_str	00000000 
0001f646 l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
0001f658 l       .debug_str	00000000 
0001f652 l       .debug_str	00000000 
0001f667 l       .debug_str	00000000 
0001f67e l       .debug_str	00000000 
0001f67d l       .debug_str	00000000 
0001168a l       .debug_str	00000000 
00011695 l       .debug_str	00000000 
00010a89 l       .debug_str	00000000 
000116a1 l       .debug_str	00000000 
000116ac l       .debug_str	00000000 
000116b7 l       .debug_str	00000000 
000116c2 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001a058 l       .debug_str	00000000 
0001a0aa l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00059b20 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0001a0f1 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001a0f8 l       .debug_str	00000000 
0001b434 l       .debug_str	00000000 
0001f460 l       .debug_str	00000000 
00018bd3 l       .debug_str	00000000 
0001a101 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
0001eb95 l       .debug_str	00000000 
0001a108 l       .debug_str	00000000 
0001a12b l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00012bfa l       .debug_str	00000000 
00012bff l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00012c2c l       .debug_str	00000000 
0005a736 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001f4ed l       .debug_str	00000000 
00012c81 l       .debug_str	00000000 
0001a131 l       .debug_str	00000000 
0001a153 l       .debug_str	00000000 
0001a168 l       .debug_str	00000000 
0001a19a l       .debug_str	00000000 
0001a1aa l       .debug_str	00000000 
0001a1d7 l       .debug_str	00000000 
0001a1e8 l       .debug_str	00000000 
0001a216 l       .debug_str	00000000 
0001a228 l       .debug_str	00000000 
0001f406 l       .debug_str	00000000 
0001f64b l       .debug_str	00000000 
0000c384 l       .debug_str	00000000 
0001a257 l       .debug_str	00000000 
0001f41e l       .debug_str	00000000 
00001dd1 l       .debug_str	00000000 
00015d14 l       .debug_str	00000000 
00011f62 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
000343ec l       .debug_str	00000000 
00011f67 l       .debug_str	00000000 
0001f455 l       .debug_str	00000000 
0001a27e l       .debug_str	00000000 
0001f441 l       .debug_str	00000000 
0001f43b l       .debug_str	00000000 
0004ea1f l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000399c4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
000394da l       .debug_str	00000000 
0005cbc3 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611fd l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a835 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0001f339 l       .debug_str	00000000 
0005a7ac l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4b6 l       .debug_str	00000000 
0001f4aa l       .debug_str	00000000 
0001f489 l       .debug_str	00000000 
0001f47a l       .debug_str	00000000 
0001f4d4 l       .debug_str	00000000 
0001f4c5 l       .debug_str	00000000 
0001a285 l       .debug_str	00000000 
0001a28e l       .debug_str	00000000 
0005a827 l       .debug_str	00000000 
00059af4 l       .debug_str	00000000 
0001f42f l       .debug_str	00000000 
0001f429 l       .debug_str	00000000 
0001f44f l       .debug_str	00000000 
0001f415 l       .debug_str	00000000 
0005e7ab l       .debug_str	00000000 
0003579f l       .debug_str	00000000 
00013376 l       .debug_str	00000000 
0001337b l       .debug_str	00000000 
00013381 l       .debug_str	00000000 
000165d5 l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
00033a9f l       .debug_str	00000000 
0005ecf3 l       .debug_str	00000000 
0001a29a l       .debug_str	00000000 
00012c06 l       .debug_str	00000000 
00012c0e l       .debug_str	00000000 
0001236c l     F .text	0000002a _ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E
00012342 l     F .text	0000002a _ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE
00012268 l     F .text	0000009c _ZN3log13RecordBuilder3new17haca8312579858419E
00012304 l     F .text	00000022 _ZN3log13RecordBuilder4args17h0d0d49873389eda9E
00012396 l     F .text	00000010 _ZN3log13RecordBuilder4line17h44de9f431bb34307E
000123a6 l     F .text	00000010 _ZN3log13RecordBuilder5build17h83529556a009112eE
00012326 l     F .text	0000000c _ZN3log13RecordBuilder5level17h0f95d7860f854eb5E
00012332 l     F .text	00000010 _ZN3log13RecordBuilder6target17hd1b0e0684e399993E
0001255a l     F .text	00000012 _ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E
000123c0 l     F .text	00000028 _ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E
000123e8 l     F .text	00000010 _ZN3log15MetadataBuilder5build17h2478972692162fc0E
20004a68 l     O .bss	00000004 _ZN3log5STATE17hc9404a0f5c97cef6E
200000f0 l     O .data	00000008 _ZN3log6LOGGER17hc33d4d9c061fc628E
0001225e l     F .text	0000000a _ZN3log6Record7builder17hde62ab0132265febE
00020964 l     O .text	00000000 _ZN3log6logger3NOP17h5a3de47970f20990E
000123b6 l     F .text	0000000a _ZN3log8Metadata7builder17ha56bd59835d60a3cE
00012254 l     F .text	0000000a _ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E
00011fe8 l     F .text	00000038 _ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E
00012020 l     F .text	00000016 _ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE
00012036 l     F .text	00000008 _ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE
00012046 l     F .text	00000028 _ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E
000120ec l     F .text	0000000a _ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E
00012580 l     F .text	000000aa _ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E
0001262a l     F .text	0000003a _ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E
0001256c l     F .text	00000014 _ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE
000121b8 l     F .text	00000012 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E
00000000 l    df *ABS*	00000000 memchr.2yzmedhn-cgu.0
0001fce9 l       .debug_str	00000000 
0001357f l       .debug_str	00000000 
00018c52 l       .debug_str	00000000 
0001f735 l       .debug_str	00000000 
0001f76a l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00011798 l       .debug_str	00000000 
0005f736 l       .debug_str	00000000 
0001f776 l       .debug_str	00000000 
0001f7ae l       .debug_str	00000000 
0001f7c8 l       .debug_str	00000000 
0001f7d2 l       .debug_str	00000000 
0001f7da l       .debug_str	00000000 
0001f7e2 l       .debug_str	00000000 
0001f81e l       .debug_str	00000000 
0001c3cf l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0001f831 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
0001f839 l       .debug_str	00000000 
0001f871 l       .debug_str	00000000 
000114e6 l       .debug_str	00000000 
0001f879 l       .debug_str	00000000 
0001f8b1 l       .debug_str	00000000 
0001f8b9 l       .debug_str	00000000 
0001f8f1 l       .debug_str	00000000 
0001f90b l       .debug_str	00000000 
0001f914 l       .debug_str	00000000 
0001f94c l       .debug_str	00000000 
0001f955 l       .debug_str	00000000 
0001f98d l       .debug_str	00000000 
000136d1 l       .debug_str	00000000 
000221ab l       .debug_str	00000000 
0001fa15 l       .debug_str	00000000 
0001fa5d l       .debug_str	00000000 
0001fa68 l       .debug_str	00000000 
000190c7 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0001faa6 l       .debug_str	00000000 
0001af4d l       .debug_str	00000000 
0001facf l       .debug_str	00000000 
0001faf4 l       .debug_str	00000000 
000160ec l       .debug_str	00000000 
0001b043 l       .debug_str	00000000 
0001fb53 l       .debug_str	00000000 
0001b095 l       .debug_str	00000000 
0001fb7b l       .debug_str	00000000 
0001fbac l       .debug_str	00000000 
0001fbb8 l       .debug_str	00000000 
0001fc17 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
0001fc49 l       .debug_str	00000000 
0001fc91 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
0001fc9e l       .debug_str	00000000 
0001fcf9 l       .debug_str	00000000 
0001fd07 l       .debug_str	00000000 
0001b2bd l       .debug_str	00000000 
0001b4b7 l       .debug_str	00000000 
0000e8d8 l       .debug_str	00000000 
0001fd4f l       .debug_str	00000000 
0001b503 l       .debug_str	00000000 
0001fd8a l       .debug_str	00000000 
0001fdc1 l       .debug_str	00000000 
0001fdda l       .debug_str	00000000 
0001fde6 l       .debug_str	00000000 
00014220 l       .debug_str	00000000 
0001fe38 l       .debug_str	00000000 
00014290 l       .debug_str	00000000 
0001fe8d l       .debug_str	00000000 
0001fdc7 l       .debug_str	00000000 
0001fec0 l       .debug_str	00000000 
00019825 l       .debug_str	00000000 
0001ff06 l       .debug_str	00000000 
000141b0 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0005cff0 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
0001ff4f l       .debug_str	00000000 
000229d8 l       .debug_str	00000000 
0001ff60 l       .debug_str	00000000 
0001ffd5 l       .debug_str	00000000 
00020002 l       .debug_str	00000000 
00019b45 l       .debug_str	00000000 
0002008e l       .debug_str	00000000 
00020111 l       .debug_str	00000000 
00020140 l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
0002018d l       .debug_str	00000000 
000201bd l       .debug_str	00000000 
0002020b l       .debug_str	00000000 
0002023b l       .debug_str	00000000 
00020289 l       .debug_str	00000000 
000202b9 l       .debug_str	00000000 
00020307 l       .debug_str	00000000 
00020338 l       .debug_str	00000000 
00020387 l       .debug_str	00000000 
000203b8 l       .debug_str	00000000 
00020407 l       .debug_str	00000000 
00020437 l       .debug_str	00000000 
0002043f l       .debug_str	00000000 
0002046f l       .debug_str	00000000 
00020477 l       .debug_str	00000000 
000204b5 l       .debug_str	00000000 
000204ca l       .debug_str	00000000 
0000bf06 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000abfe l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0005ae24 l       .debug_str	00000000 
0005abca l       .debug_str	00000000 
0001f369 l       .debug_str	00000000 
00018bb7 l       .debug_str	00000000 
00013969 l       .debug_str	00000000 
000204f6 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
0005c259 l       .debug_str	00000000 
0005f673 l       .debug_str	00000000 
0005a679 l       .debug_str	00000000 
000612e3 l       .debug_str	00000000 
00016211 l       .debug_str	00000000 
0002054c l       .debug_str	00000000 
000135b4 l       .debug_str	00000000 
0002054b l       .debug_str	00000000 
0002054f l       .debug_str	00000000 
00020559 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
000017ea l       .debug_str	00000000 
0005cbb1 l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0002055f l       .debug_str	00000000 
00020563 l       .debug_str	00000000 
0001f82c l       .debug_str	00000000 
00020568 l       .debug_str	00000000 
00020567 l       .debug_str	00000000 
0002056b l       .debug_str	00000000 
0002056f l       .debug_str	00000000 
00020574 l       .debug_str	00000000 
00020573 l       .debug_str	00000000 
00020577 l       .debug_str	00000000 
0002057b l       .debug_str	00000000 
0005a6a8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001f696 l       .debug_str	00000000 
0001f6eb l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea1f l       .debug_str	00000000 
000399c4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005e7ab l       .debug_str	00000000 
0003579f l       .debug_str	00000000 
00013376 l       .debug_str	00000000 
0001337b l       .debug_str	00000000 
00013381 l       .debug_str	00000000 
000165d5 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0001338f l       .debug_str	00000000 
00038690 l       .debug_str	00000000 
00033341 l       .debug_str	00000000 
0005a736 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611fd l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f339 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005a7ac l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
0005e9c7 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000394da l       .debug_str	00000000 
0005cbc3 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a835 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4b6 l       .debug_str	00000000 
0000e8a0 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000134d3 l       .debug_str	00000000 
000126aa l     F .text	0000006e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE
00000000 l    df *ABS*	00000000 1sklumn9v47r13ke
0001f369 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00018bd3 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0005e7ab l       .debug_str	00000000 
00033341 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002057f l       .debug_str	00000000 
00033cad l       .debug_str	00000000 
0001c3cf l       .debug_str	00000000 
000205e0 l       .debug_str	00000000 
00012b91 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2la8qm50nrg05wyh
00030d4d l       .debug_str	00000000 
000221ab l       .debug_str	00000000 
00020c44 l       .debug_str	00000000 
00020caf l       .debug_str	00000000 
00020cf5 l       .debug_str	00000000 
00020d67 l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
00020fac l       .debug_str	00000000 
0002101e l       .debug_str	00000000 
00021068 l       .debug_str	00000000 
000210b2 l       .debug_str	00000000 
000212ff l       .debug_str	00000000 
0002133b l       .debug_str	00000000 
0003e60e l       .debug_str	00000000 
0000395c l       .debug_str	00000000 
00021380 l       .debug_str	00000000 
000213bd l       .debug_str	00000000 
00021403 l       .debug_str	00000000 
00021440 l       .debug_str	00000000 
00021681 l       .debug_str	00000000 
000216c1 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00021905 l       .debug_str	00000000 
00021b59 l       .debug_str	00000000 
00021bb2 l       .debug_str	00000000 
00021e02 l       .debug_str	00000000 
0001f369 l       .debug_str	00000000 
0001265d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0006013b l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
0005a736 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c259 l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00005ac0 l       .debug_str	00000000 
00005b05 l       .debug_str	00000000 
00005b73 l       .debug_str	00000000 
00005c0a l       .debug_str	00000000 
00005cca l       .debug_str	00000000 
00005db3 l       .debug_str	00000000 
00005ec5 l       .debug_str	00000000 
00006000 l       .debug_str	00000000 
00006164 l       .debug_str	00000000 
000062f1 l       .debug_str	00000000 
000064a7 l       .debug_str	00000000 
00006686 l       .debug_str	00000000 
0000688e l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035933 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac3c l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
00006bc3 l       .debug_str	00000000 
00006c3a l       .debug_str	00000000 
00006cbe l       .debug_str	00000000 
00006d39 l       .debug_str	00000000 
00006dd7 l       .debug_str	00000000 
00006e82 l       .debug_str	00000000 
00006f24 l       .debug_str	00000000 
00006fe9 l       .debug_str	00000000 
000070bb l       .debug_str	00000000 
00007184 l       .debug_str	00000000 
00007270 l       .debug_str	00000000 
00007369 l       .debug_str	00000000 
00007459 l       .debug_str	00000000 
0000756c l       .debug_str	00000000 
0000768c l       .debug_str	00000000 
000077a3 l       .debug_str	00000000 
000078dd l       .debug_str	00000000 
00007a24 l       .debug_str	00000000 
00007b62 l       .debug_str	00000000 
00007cc3 l       .debug_str	00000000 
00007e31 l       .debug_str	00000000 
00007f96 l       .debug_str	00000000 
0000811e l       .debug_str	00000000 
000082b3 l       .debug_str	00000000 
0000843f l       .debug_str	00000000 
000085ee l       .debug_str	00000000 
000087aa l       .debug_str	00000000 
0000895d l       .debug_str	00000000 
00008b33 l       .debug_str	00000000 
00008d16 l       .debug_str	00000000 
00008ef0 l       .debug_str	00000000 
000090ed l       .debug_str	00000000 
000092f7 l       .debug_str	00000000 
000094f8 l       .debug_str	00000000 
0000971c l       .debug_str	00000000 
0000994d l       .debug_str	00000000 
00009b75 l       .debug_str	00000000 
00009dbe l       .debug_str	00000000 
0000a024 l       .debug_str	00000000 
0005f673 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
0005ab4d l       .debug_str	00000000 
00030dc1 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00021919 l       .debug_str	00000000 
0000590a l       .debug_str	00000000 
00005958 l       .debug_str	00000000 
000059c3 l       .debug_str	00000000 
00021b6d l       .debug_str	00000000 
00020643 l       .debug_str	00000000 
000206ab l       .debug_str	00000000 
000208eb l       .debug_str	00000000 
00020953 l       .debug_str	00000000 
00020998 l       .debug_str	00000000 
00020a03 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2xneats2au1n52xr
00021ea8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00012b94 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00021e57 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3hq83qlgyhwbaj1j
00000beb l       .debug_str	00000000 
0005a7ac l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00018bbf l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
0000bb40 l       .debug_str	00000000 
00018bd3 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea1f l       .debug_str	00000000 
000399c4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005e9c7 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00021eca l       .debug_str	00000000 
00021f26 l       .debug_str	00000000 
00021f83 l       .debug_str	00000000 
00021fe0 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611fd l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f339 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4dguvrsipkvuzwcx
0001f41e l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001f369 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000a54c l       .debug_str	00000000 
000221ab l       .debug_str	00000000 
000221aa l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0005e7ab l       .debug_str	00000000 
00033341 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0003579f l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0005ab4d l       .debug_str	00000000 
0005ac3c l       .debug_str	00000000 
0002203d l       .debug_str	00000000 
000220ae l       .debug_str	00000000 
0001c3cf l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000220ba l       .debug_str	00000000 
00014ab6 l       .debug_str	00000000 
0002212b l       .debug_str	00000000 
0002219c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 501bil2zkh495ov3
00022535 l       .debug_str	00000000 
000225a0 l       .debug_str	00000000 
00022668 l       .debug_str	00000000 
000225d6 l       .debug_str	00000000 
0002260d l       .debug_str	00000000 
00022620 l       .debug_str	00000000 
0002265f l       .debug_str	00000000 
0002267a l       .debug_str	00000000 
000226b2 l       .debug_str	00000000 
000226c6 l       .debug_str	00000000 
000226f2 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00018bbf l       .debug_str	00000000 
000017ea l       .debug_str	00000000 
00060011 l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
0000bb2d l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000394da l       .debug_str	00000000 
0005cbc3 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611fd l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a835 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f339 l       .debug_str	00000000 
0005a7ac l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4b6 l       .debug_str	00000000 
0001f4aa l       .debug_str	00000000 
00018bd3 l       .debug_str	00000000 
0000bb39 l       .debug_str	00000000 
0005ae43 l       .debug_str	00000000 
00060010 l       .debug_str	00000000 
000226fb l       .debug_str	00000000 
000221ab l       .debug_str	00000000 
00016973 l       .debug_str	00000000 
000226ff l       .debug_str	00000000 
0005f53e l       .debug_str	00000000 
000049e8 l       .debug_str	00000000 
000049f0 l       .debug_str	00000000 
000049f9 l       .debug_str	00000000 
00004a07 l       .debug_str	00000000 
00004a0e l       .debug_str	00000000 
0000468e l       .debug_str	00000000 
0000469e l       .debug_str	00000000 
000046a7 l       .debug_str	00000000 
000046b5 l       .debug_str	00000000 
000046c3 l       .debug_str	00000000 
000046cf l       .debug_str	00000000 
000048dd l       .debug_str	00000000 
000046db l       .debug_str	00000000 
000046ea l       .debug_str	00000000 
000046f2 l       .debug_str	00000000 
0000470b l       .debug_str	00000000 
0000471c l       .debug_str	00000000 
00004724 l       .debug_str	00000000 
00004757 l       .debug_str	00000000 
0000473e l       .debug_str	00000000 
00004763 l       .debug_str	00000000 
00001d54 l       .debug_str	00000000 
00004795 l       .debug_str	00000000 
0000477c l       .debug_str	00000000 
000047cf l       .debug_str	00000000 
000047c2 l       .debug_str	00000000 
000047a9 l       .debug_str	00000000 
00004a15 l       .debug_str	00000000 
00004a78 l       .debug_str	00000000 
00004a1d l       .debug_str	00000000 
00004a3c l       .debug_str	00000000 
00004a70 l       .debug_str	00000000 
00004a57 l       .debug_str	00000000 
0005e61c l       .debug_str	00000000 
0004cc69 l       .debug_str	00000000 
000232a6 l       .debug_str	00000000 
0001c3cf l       .debug_str	00000000 
0005be2e l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00022707 l       .debug_str	00000000 
0005f672 l       .debug_str	00000000 
0005d9b2 l       .debug_str	00000000 
0005b8a4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005d5d5 l       .debug_str	00000000 
0000bfc3 l       .debug_str	00000000 
0005abe7 l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0000bfd4 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000bfde l       .debug_str	00000000 
0000bfe9 l       .debug_str	00000000 
0000bff3 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
000229f0 l       .debug_str	00000000 
000221b1 l       .debug_str	00000000 
000221e2 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0006013b l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
0005a736 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c259 l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035933 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac3c l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000590a l       .debug_str	00000000 
00005958 l       .debug_str	00000000 
000059c3 l       .debug_str	00000000 
0005f673 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
0005ab4d l       .debug_str	00000000 
00030d4d l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00021b6d l       .debug_str	00000000 
000221ee l       .debug_str	00000000 
0002221e l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00005ac0 l       .debug_str	00000000 
00005b05 l       .debug_str	00000000 
00005b73 l       .debug_str	00000000 
00005c0a l       .debug_str	00000000 
00005cca l       .debug_str	00000000 
00005db3 l       .debug_str	00000000 
00005ec5 l       .debug_str	00000000 
00006000 l       .debug_str	00000000 
00006164 l       .debug_str	00000000 
000062f1 l       .debug_str	00000000 
000064a7 l       .debug_str	00000000 
00006686 l       .debug_str	00000000 
0000688e l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
00006bc3 l       .debug_str	00000000 
00006c3a l       .debug_str	00000000 
00006cbe l       .debug_str	00000000 
00006d39 l       .debug_str	00000000 
00006dd7 l       .debug_str	00000000 
00006e82 l       .debug_str	00000000 
00006f24 l       .debug_str	00000000 
00006fe9 l       .debug_str	00000000 
000070bb l       .debug_str	00000000 
00007184 l       .debug_str	00000000 
00007270 l       .debug_str	00000000 
00007369 l       .debug_str	00000000 
00007459 l       .debug_str	00000000 
0000756c l       .debug_str	00000000 
0000768c l       .debug_str	00000000 
000077a3 l       .debug_str	00000000 
000078dd l       .debug_str	00000000 
00007a24 l       .debug_str	00000000 
00007b62 l       .debug_str	00000000 
00007cc3 l       .debug_str	00000000 
00007e31 l       .debug_str	00000000 
00007f96 l       .debug_str	00000000 
0000811e l       .debug_str	00000000 
000082b3 l       .debug_str	00000000 
0000843f l       .debug_str	00000000 
000085ee l       .debug_str	00000000 
000087aa l       .debug_str	00000000 
0000895d l       .debug_str	00000000 
00008b33 l       .debug_str	00000000 
00008d16 l       .debug_str	00000000 
00008ef0 l       .debug_str	00000000 
000090ed l       .debug_str	00000000 
000092f7 l       .debug_str	00000000 
000094f8 l       .debug_str	00000000 
0000971c l       .debug_str	00000000 
0000994d l       .debug_str	00000000 
00009b75 l       .debug_str	00000000 
00009dbe l       .debug_str	00000000 
0000a024 l       .debug_str	00000000 
00030dc1 l       .debug_str	00000000 
00021919 l       .debug_str	00000000 
0002222b l       .debug_str	00000000 
0002225c l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000425f8 l       .debug_str	00000000 
00005699 l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f4b5 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00059efa l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
000602f0 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
0000561d l       .debug_str	00000000 
0004f59d l       .debug_str	00000000 
000056a2 l       .debug_str	00000000 
000056ad l       .debug_str	00000000 
00022264 l       .debug_str	00000000 
0002228f l       .debug_str	00000000 
000222a0 l       .debug_str	00000000 
000222d5 l       .debug_str	00000000 
00004c1d l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
000048d4 l       .debug_str	00000000 
000048dc l       .debug_str	00000000 
000047a0 l       .debug_str	00000000 
000048e6 l       .debug_str	00000000 
00004b8c l       .debug_str	00000000 
00004b73 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
00004b6e l       .debug_str	00000000 
00004b9b l       .debug_str	00000000 
00004c25 l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
0005d83f l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
00004c2b l       .debug_str	00000000 
000222e4 l       .debug_str	00000000 
00022317 l       .debug_str	00000000 
00000f07 l       .debug_str	00000000 
00001106 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
000011c0 l       .debug_str	00000000 
000011e7 l       .debug_str	00000000 
00001218 l       .debug_str	00000000 
00022327 l       .debug_str	00000000 
0002235b l       .debug_str	00000000 
00022364 l       .debug_str	00000000 
00022390 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0002239f l       .debug_str	00000000 
000223d2 l       .debug_str	00000000 
000223df l       .debug_str	00000000 
000223eb l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
0004ea1f l       .debug_str	00000000 
000399c4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0002241c l       .debug_str	00000000 
00022451 l       .debug_str	00000000 
0003e60e l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
00022462 l       .debug_str	00000000 
00022494 l       .debug_str	00000000 
000224a2 l       .debug_str	00000000 
000224e0 l       .debug_str	00000000 
000224fa l       .debug_str	00000000 
0002254c l       .debug_str	00000000 
00022588 l       .debug_str	00000000 
20004a70 l     O .bss	00000008 _ZN6mynewt3spi11PENDING_CMD17hd08bb758c99a7708E
20004a78 l     O .bss	00002004 _ZN6mynewt3spi12PENDING_DATA17hf749c482f1fd6e90E
20006f04 l     O .bss	00000000 _ZN6mynewt3spi12SPI_CALLBACK17h9820a4217e4879a6E
200000f8 l     O .data	00000008 _ZN6mynewt3spi12SPI_SETTINGS17h4a4473e27299c06dE
00013436 l     F .text	0000003a _ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E
20006a8c l     O .bss	00000018 _ZN6mynewt3spi14SPI_DATA_QUEUE17h4880c24292cc1218E
20006b04 l     O .bss	00000400 _ZN6mynewt3spi14SPI_TASK_STACK17h041a1fc76b4d16c1E
20006aa4 l     O .bss	00000010 _ZN6mynewt3spi15SPI_EVENT_QUEUE17h4e2cf68a255fc2fdE
20006a84 l     O .bss	00000008 _ZN6mynewt3spi16SPI_THROTTLE_SEM17h1f0932d6e65cb8daE
0001374e l     F .text	000001ea _ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E
00013938 l     F .text	000002e8 _ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E
00013f56 l     F .text	00000128 _ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E
00013c20 l     F .text	00000336 _ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E
20006a7c l     O .bss	00000008 _ZN6mynewt3spi7SPI_SEM17hd7399e388b8e657cE
20006ab4 l     O .bss	00000050 _ZN6mynewt3spi8SPI_TASK17h4c45c24ee73ad430E
0001407e l     F .text	00000054 _ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E
00020b60 l     O .text	0000001c str.0
00020bc0 l     O .text	00000021 str.1
00020c20 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 53x3bckk5lzipnpa
00000c52 l       .debug_str	00000000 
000394da l       .debug_str	00000000 
0005cbc3 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611fd l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a835 l       .debug_str	00000000 
0005a736 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f339 l       .debug_str	00000000 
0005a7ac l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4b6 l       .debug_str	00000000 
0001f4aa l       .debug_str	00000000 
00022a01 l       .debug_str	00000000 
000221ab l       .debug_str	00000000 
00022a07 l       .debug_str	00000000 
0000e64e l       .debug_str	00000000 
0005d9b2 l       .debug_str	00000000 
0005b8a4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
0004ea1f l       .debug_str	00000000 
000399c4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0000c055 l       .debug_str	00000000 
000031ab l       .debug_str	00000000 
000229d6 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0005aa07 l       .debug_str	00000000 
00022a19 l       .debug_str	00000000 
0000e660 l       .debug_str	00000000 
00022712 l       .debug_str	00000000 
0003f8fe l       .debug_str	00000000 
0002273d l       .debug_str	00000000 
0006004a l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003e60e l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
00022769 l       .debug_str	00000000 
00061346 l       .debug_str	00000000 
000227da l       .debug_str	00000000 
00022806 l       .debug_str	00000000 
00022833 l       .debug_str	00000000 
0002289f l       .debug_str	00000000 
000228a7 l       .debug_str	00000000 
00022914 l       .debug_str	00000000 
0002291d l       .debug_str	00000000 
0002294a l       .debug_str	00000000 
000226f2 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000229c4 l       .debug_str	00000000 
000229f4 l       .debug_str	00000000 
0005abe7 l       .debug_str	00000000 
0000bfd4 l       .debug_str	00000000 
0000bfde l       .debug_str	00000000 
0000bfe9 l       .debug_str	00000000 
0000bff3 l       .debug_str	00000000 
000229f0 l       .debug_str	00000000 
000229da l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00018bbf l       .debug_str	00000000 
000017ea l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
0000bb2d l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00020e20 l     O .text	00000021 str.0
00000000 l    df *ABS*	00000000 n1xzuhnvw82wqrn
00004a1d l       .debug_str	00000000 
00004a3c l       .debug_str	00000000 
00004a70 l       .debug_str	00000000 
00022a1e l       .debug_str	00000000 
00022a70 l       .debug_str	00000000 
0001c3cf l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000134cb l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000425f8 l       .debug_str	00000000 
000049e8 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
000049f0 l       .debug_str	00000000 
000049f9 l       .debug_str	00000000 
00004a07 l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
00004a0e l       .debug_str	00000000 
0000468e l       .debug_str	00000000 
0000469e l       .debug_str	00000000 
000046a7 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
000046b5 l       .debug_str	00000000 
000046c3 l       .debug_str	00000000 
000046cf l       .debug_str	00000000 
000048dd l       .debug_str	00000000 
000046db l       .debug_str	00000000 
000046ea l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
000046f2 l       .debug_str	00000000 
0000470b l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
0000471c l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00004724 l       .debug_str	00000000 
00004757 l       .debug_str	00000000 
0000473e l       .debug_str	00000000 
00004763 l       .debug_str	00000000 
00001d54 l       .debug_str	00000000 
00004795 l       .debug_str	00000000 
0000477c l       .debug_str	00000000 
000047a0 l       .debug_str	00000000 
000047cf l       .debug_str	00000000 
000047c2 l       .debug_str	00000000 
000047a9 l       .debug_str	00000000 
00004a15 l       .debug_str	00000000 
00004a57 l       .debug_str	00000000 
00004a78 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 num_traits.eydd4btj-cgu.0
00023dc0 l       .debug_str	00000000 
00022fe1 l       .debug_str	00000000 
000141b0 l       .debug_str	00000000 
00023024 l       .debug_str	00000000 
00014217 l       .debug_str	00000000 
00023080 l       .debug_str	00000000 
00014287 l       .debug_str	00000000 
000230df l       .debug_str	00000000 
00014220 l       .debug_str	00000000 
00023131 l       .debug_str	00000000 
00023186 l       .debug_str	00000000 
000231dc l       .debug_str	00000000 
0002320a l       .debug_str	00000000 
00023216 l       .debug_str	00000000 
00023248 l       .debug_str	00000000 
0002326f l       .debug_str	00000000 
000232a1 l       .debug_str	00000000 
000232b1 l       .debug_str	00000000 
000232e6 l       .debug_str	00000000 
000232f9 l       .debug_str	00000000 
0002332f l       .debug_str	00000000 
00023343 l       .debug_str	00000000 
0002338d l       .debug_str	00000000 
0002339e l       .debug_str	00000000 
0005f673 l       .debug_str	00000000 
000233da l       .debug_str	00000000 
00059f26 l       .debug_str	00000000 
0005f736 l       .debug_str	00000000 
00023418 l       .debug_str	00000000 
00023456 l       .debug_str	00000000 
00013646 l       .debug_str	00000000 
00023463 l       .debug_str	00000000 
0003e60e l       .debug_str	00000000 
00023471 l       .debug_str	00000000 
00023499 l       .debug_str	00000000 
0000168b l       .debug_str	00000000 
000234d8 l       .debug_str	00000000 
00023506 l       .debug_str	00000000 
0002350d l       .debug_str	00000000 
000235b0 l       .debug_str	00000000 
000235be l       .debug_str	00000000 
00040e07 l       .debug_str	00000000 
00023656 l       .debug_str	00000000 
000236f0 l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
000237a8 l       .debug_str	00000000 
00033cad l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
0001ff4f l       .debug_str	00000000 
0002380b l       .debug_str	00000000 
0002387d l       .debug_str	00000000 
000238a7 l       .debug_str	00000000 
000238e5 l       .debug_str	00000000 
000238f8 l       .debug_str	00000000 
00023943 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0002394c l       .debug_str	00000000 
0002398e l       .debug_str	00000000 
00024c4f l       .debug_str	00000000 
000239c8 l       .debug_str	00000000 
00023a0d l       .debug_str	00000000 
00023a29 l       .debug_str	00000000 
00023a6c l       .debug_str	00000000 
00023a82 l       .debug_str	00000000 
00023ae7 l       .debug_str	00000000 
00023b4c l       .debug_str	00000000 
00023b87 l       .debug_str	00000000 
00023b94 l       .debug_str	00000000 
0001fdc7 l       .debug_str	00000000 
00023bc7 l       .debug_str	00000000 
0000a8e2 l       .debug_str	00000000 
00023c0d l       .debug_str	00000000 
00019825 l       .debug_str	00000000 
00023c53 l       .debug_str	00000000 
0000ab71 l       .debug_str	00000000 
00023c9a l       .debug_str	00000000 
00023ce3 l       .debug_str	00000000 
00014ab6 l       .debug_str	00000000 
0001f41e l       .debug_str	00000000 
000160ec l       .debug_str	00000000 
000114e6 l       .debug_str	00000000 
00011798 l       .debug_str	00000000 
00023d5c l       .debug_str	00000000 
00023da1 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00023df9 l       .debug_str	00000000 
0000ac06 l       .debug_str	00000000 
00023e11 l       .debug_str	00000000 
00023e4c l       .debug_str	00000000 
00023e70 l       .debug_str	00000000 
00023e96 l       .debug_str	00000000 
00023ed1 l       .debug_str	00000000 
00023ef4 l       .debug_str	00000000 
00023f19 l       .debug_str	00000000 
00023f56 l       .debug_str	00000000 
00023f6d l       .debug_str	00000000 
00023faa l       .debug_str	00000000 
00023fc1 l       .debug_str	00000000 
00014ef1 l       .debug_str	00000000 
00024012 l       .debug_str	00000000 
00016cbf l       .debug_str	00000000 
0002406d l       .debug_str	00000000 
000240d0 l       .debug_str	00000000 
00024112 l       .debug_str	00000000 
000151aa l       .debug_str	00000000 
00024176 l       .debug_str	00000000 
00019b45 l       .debug_str	00000000 
000241e3 l       .debug_str	00000000 
0000abf6 l       .debug_str	00000000 
00024245 l       .debug_str	00000000 
00024253 l       .debug_str	00000000 
000242be l       .debug_str	00000000 
000242d8 l       .debug_str	00000000 
000242ee l       .debug_str	00000000 
00024359 l       .debug_str	00000000 
00024369 l       .debug_str	00000000 
000243d5 l       .debug_str	00000000 
000243e7 l       .debug_str	00000000 
00024453 l       .debug_str	00000000 
00024464 l       .debug_str	00000000 
000244cb l       .debug_str	00000000 
00024503 l       .debug_str	00000000 
0002456d l       .debug_str	00000000 
000245f5 l       .debug_str	00000000 
000130c8 l       .debug_str	00000000 
00024669 l       .debug_str	00000000 
000246eb l       .debug_str	00000000 
00024702 l       .debug_str	00000000 
00024740 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00033f1f l       .debug_str	00000000 
0003579f l       .debug_str	00000000 
00024753 l       .debug_str	00000000 
00024762 l       .debug_str	00000000 
000247a0 l       .debug_str	00000000 
000247b3 l       .debug_str	00000000 
000247df l       .debug_str	00000000 
000247e8 l       .debug_str	00000000 
00024814 l       .debug_str	00000000 
0002481d l       .debug_str	00000000 
0002487d l       .debug_str	00000000 
00033960 l       .debug_str	00000000 
000248ce l       .debug_str	00000000 
0002491f l       .debug_str	00000000 
0002497c l       .debug_str	00000000 
000249da l       .debug_str	00000000 
00024cbf l       .debug_str	00000000 
00024a2b l       .debug_str	00000000 
00024a54 l       .debug_str	00000000 
00024ab7 l       .debug_str	00000000 
00024ac8 l       .debug_str	00000000 
00024ad5 l       .debug_str	00000000 
00024aea l       .debug_str	00000000 
00024b3b l       .debug_str	00000000 
00024b64 l       .debug_str	00000000 
00024bc7 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
000611fd l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0001f339 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005a7ac l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0001f369 l       .debug_str	00000000 
000221aa l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
00024be4 l       .debug_str	00000000 
0005c259 l       .debug_str	00000000 
0003929a l       .debug_str	00000000 
0001f82c l       .debug_str	00000000 
000168d2 l       .debug_str	00000000 
0005ae43 l       .debug_str	00000000 
00059bfa l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0006004a l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00002389 l       .debug_str	00000000 
00024c05 l       .debug_str	00000000 
00002535 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
00024c09 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
00022c76 l       .debug_str	00000000 
00024c1b l       .debug_str	00000000 
00024c20 l       .debug_str	00000000 
00024c25 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
000160b1 l       .debug_str	00000000 
00024c4a l       .debug_str	00000000 
00024c86 l       .debug_str	00000000 
0005cbb1 l       .debug_str	00000000 
0003dcc6 l       .debug_str	00000000 
00024c9c l       .debug_str	00000000 
00024ca5 l       .debug_str	00000000 
000372cb l       .debug_str	00000000 
0005ac96 l       .debug_str	00000000 
0004cedd l       .debug_str	00000000 
00024cae l       .debug_str	00000000 
00024cb2 l       .debug_str	00000000 
00037591 l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
0001168e l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
0001168a l       .debug_str	00000000 
00011695 l       .debug_str	00000000 
00010a89 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00024cd4 l       .debug_str	00000000 
00024ccf l       .debug_str	00000000 
0005aa17 l       .debug_str	00000000 
00024cd8 l       .debug_str	00000000 
00039068 l       .debug_str	00000000 
00024ce1 l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0003bb22 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00022a95 l       .debug_str	00000000 
00022aef l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000c47d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00033bca l       .debug_str	00000000 
00022b3e l       .debug_str	00000000 
00024bf6 l       .debug_str	00000000 
00024be9 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea1f l       .debug_str	00000000 
000399c4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005e9c7 l       .debug_str	00000000 
00022b46 l       .debug_str	00000000 
00022b53 l       .debug_str	00000000 
00022b5c l       .debug_str	00000000 
00059b14 l       .debug_str	00000000 
00033f96 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00013389 l       .debug_str	00000000 
0005e7ab l       .debug_str	00000000 
00033341 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000134cb l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00035779 l       .debug_str	00000000 
000134d3 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
0000b253 l       .debug_str	00000000 
0000b294 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
000221ab l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000612e3 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013624 l       .debug_str	00000000 
00024c96 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
0005a679 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00012b94 l       .debug_str	00000000 
0005cc3f l       .debug_str	00000000 
00011e1d l       .debug_str	00000000 
000365f3 l       .debug_str	00000000 
000116ee l       .debug_str	00000000 
0005abca l       .debug_str	00000000 
000229d8 l       .debug_str	00000000 
00024c6a l       .debug_str	00000000 
000134e3 l       .debug_str	00000000 
00022b66 l       .debug_str	00000000 
00022ba4 l       .debug_str	00000000 
0001a326 l       .debug_str	00000000 
0005cff0 l       .debug_str	00000000 
0004681e l       .debug_str	00000000 
000600c4 l       .debug_str	00000000 
00022bb3 l       .debug_str	00000000 
00013512 l       .debug_str	00000000 
00022bdc l       .debug_str	00000000 
0001a398 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001a551 l       .debug_str	00000000 
0001f4d4 l       .debug_str	00000000 
0000e68b l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00022c0e l       .debug_str	00000000 
00024c34 l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
00022c1c l       .debug_str	00000000 
000135ff l       .debug_str	00000000 
00013612 l       .debug_str	00000000 
0005f640 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
0004aecd l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00059caf l       .debug_str	00000000 
00022c5e l       .debug_str	00000000 
00022c62 l       .debug_str	00000000 
00022c6d l       .debug_str	00000000 
00022c7c l       .debug_str	00000000 
00022cc4 l       .debug_str	00000000 
00022ce4 l       .debug_str	00000000 
00039db4 l       .debug_str	00000000 
00024c1c l       .debug_str	00000000 
00022d2f l       .debug_str	00000000 
00024c21 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0005ab4d l       .debug_str	00000000 
0005ac3c l       .debug_str	00000000 
00022d7a l       .debug_str	00000000 
0002219c l       .debug_str	00000000 
0001c3cf l       .debug_str	00000000 
00022deb l       .debug_str	00000000 
00013c99 l       .debug_str	00000000 
00022e19 l       .debug_str	00000000 
0001b2bd l       .debug_str	00000000 
00022e61 l       .debug_str	00000000 
00022e91 l       .debug_str	00000000 
00022ebc l       .debug_str	00000000 
0001fdc1 l       .debug_str	00000000 
0001fdda l       .debug_str	00000000 
00022ef3 l       .debug_str	00000000 
00014290 l       .debug_str	00000000 
00022f44 l       .debug_str	00000000 
00014104 l       .debug_str	00000000 
00022f96 l       .debug_str	00000000 
0001415b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19c5s2vweequjzfw
0000e8a7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00024ced l       .debug_str	00000000 
00024d16 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
00024da7 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00024d23 l       .debug_str	00000000 
00013512 l       .debug_str	00000000 
0000c47d l       .debug_str	00000000 
0005ee48 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00024d4c l       .debug_str	00000000 
00024da1 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1bm86yaetip2rc3f
0002511c l       .debug_str	00000000 
00024f84 l       .debug_str	00000000 
00024fc0 l       .debug_str	00000000 
00024fdc l       .debug_str	00000000 
00025018 l       .debug_str	00000000 
0002504e l       .debug_str	00000000 
0002508a l       .debug_str	00000000 
00025095 l       .debug_str	00000000 
000250d1 l       .debug_str	00000000 
000250df l       .debug_str	00000000 
0001c3cf l       .debug_str	00000000 
00025153 l       .debug_str	00000000 
00025190 l       .debug_str	00000000 
0002519f l       .debug_str	00000000 
000251dc l       .debug_str	00000000 
0002521f l       .debug_str	00000000 
0002525c l       .debug_str	00000000 
0000e8ac l       .debug_str	00000000 
00025293 l       .debug_str	00000000 
000252d1 l       .debug_str	00000000 
00025308 l       .debug_str	00000000 
00025347 l       .debug_str	00000000 
00025380 l       .debug_str	00000000 
000253e4 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00025419 l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00025434 l       .debug_str	00000000 
00025479 l       .debug_str	00000000 
00025496 l       .debug_str	00000000 
00013634 l       .debug_str	00000000 
00018c5b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000114e6 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
00018c83 l       .debug_str	00000000 
00024dab l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
000254a5 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00025428 l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea8b l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00024c21 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0002565a l       .debug_str	00000000 
00024de5 l       .debug_str	00000000 
00025443 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
000221ab l       .debug_str	00000000 
00025488 l       .debug_str	00000000 
0000e8a7 l       .debug_str	00000000 
00024e01 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000e70f l       .debug_str	00000000 
0000e718 l       .debug_str	00000000 
0000e726 l       .debug_str	00000000 
00018ce9 l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0000e73e l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0000efc8 l       .debug_str	00000000 
0000efd3 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
00011798 l       .debug_str	00000000 
0005f736 l       .debug_str	00000000 
00024e0e l       .debug_str	00000000 
00024e47 l       .debug_str	00000000 
00024ee2 l       .debug_str	00000000 
00024f3c l       .debug_str	00000000 
00024f78 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1i10ukgv8hgyc1v7
0005e954 l       .debug_str	00000000 
00025f74 l       .debug_str	00000000 
00025f7f l       .debug_str	00000000 
00025f86 l       .debug_str	00000000 
00025ff1 l       .debug_str	00000000 
00026122 l       .debug_str	00000000 
0002618f l       .debug_str	00000000 
00026201 l       .debug_str	00000000 
0002630f l       .debug_str	00000000 
0002631a l       .debug_str	00000000 
0002638c l       .debug_str	00000000 
000264c1 l       .debug_str	00000000 
00026533 l       .debug_str	00000000 
00026603 l       .debug_str	00000000 
0002661e l       .debug_str	00000000 
00026668 l       .debug_str	00000000 
000267a5 l       .debug_str	00000000 
000267e0 l       .debug_str	00000000 
000268e8 l       .debug_str	00000000 
00026923 l       .debug_str	00000000 
00026a52 l       .debug_str	00000000 
00026a8d l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00024de5 l       .debug_str	00000000 
00026b57 l       .debug_str	00000000 
00026b93 l       .debug_str	00000000 
0003e60e l       .debug_str	00000000 
00026c5e l       .debug_str	00000000 
00026c7e l       .debug_str	00000000 
00026cba l       .debug_str	00000000 
0002cb42 l       .debug_str	00000000 
00026dc3 l       .debug_str	00000000 
00026e00 l       .debug_str	00000000 
00026f0a l       .debug_str	00000000 
00026f47 l       .debug_str	00000000 
00027078 l       .debug_str	00000000 
000270f9 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
00027989 l       .debug_str	00000000 
0002722e l       .debug_str	00000000 
000272ac l       .debug_str	00000000 
00011572 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000273dc l       .debug_str	00000000 
000274bb l       .debug_str	00000000 
000275d4 l       .debug_str	00000000 
00027714 l       .debug_str	00000000 
00027831 l       .debug_str	00000000 
00027975 l       .debug_str	00000000 
0001f369 l       .debug_str	00000000 
0001265d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0006013b l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
0005a736 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c259 l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0000c714 l       .debug_str	00000000 
0000c731 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000c777 l       .debug_str	00000000 
0000c788 l       .debug_str	00000000 
0000c7f8 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000c955 l       .debug_str	00000000 
0000ca42 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035933 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac3c l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000cb59 l       .debug_str	00000000 
0000cba9 l       .debug_str	00000000 
0000cc06 l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
0000cc5a l       .debug_str	00000000 
0000ccd1 l       .debug_str	00000000 
0000cd55 l       .debug_str	00000000 
0000cdd0 l       .debug_str	00000000 
0000ce6e l       .debug_str	00000000 
0000cf19 l       .debug_str	00000000 
0000cfbb l       .debug_str	00000000 
0000d080 l       .debug_str	00000000 
0000d152 l       .debug_str	00000000 
0000d21b l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0000d400 l       .debug_str	00000000 
0000d4f0 l       .debug_str	00000000 
0000d603 l       .debug_str	00000000 
0000d723 l       .debug_str	00000000 
0000d83a l       .debug_str	00000000 
0000d973 l       .debug_str	00000000 
0000dac9 l       .debug_str	00000000 
0005f673 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
0005ab4d l       .debug_str	00000000 
0002b9ba l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00027845 l       .debug_str	00000000 
0000e9a7 l       .debug_str	00000000 
0000eab9 l       .debug_str	00000000 
0000ebe8 l       .debug_str	00000000 
0002b882 l       .debug_str	00000000 
00027728 l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea8b l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00024c21 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0002565a l       .debug_str	00000000 
0000f250 l       .debug_str	00000000 
0000f27d l       .debug_str	00000000 
0000f29e l       .debug_str	00000000 
0000f305 l       .debug_str	00000000 
0000f3a5 l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
0000f47f l       .debug_str	00000000 
0000f4f6 l       .debug_str	00000000 
0000f57a l       .debug_str	00000000 
0000f5f5 l       .debug_str	00000000 
0000f693 l       .debug_str	00000000 
0000f73e l       .debug_str	00000000 
00028d94 l       .debug_str	00000000 
000284cb l       .debug_str	00000000 
00028802 l       .debug_str	00000000 
0002b788 l       .debug_str	00000000 
000273f0 l       .debug_str	00000000 
000254e7 l       .debug_str	00000000 
00025575 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00025645 l       .debug_str	00000000 
00025660 l       .debug_str	00000000 
000612e3 l       .debug_str	00000000 
000100a8 l       .debug_str	00000000 
0002567d l       .debug_str	00000000 
00025696 l       .debug_str	00000000 
0002e377 l       .debug_str	00000000 
000256bc l       .debug_str	00000000 
00025722 l       .debug_str	00000000 
0002582c l       .debug_str	00000000 
00025892 l       .debug_str	00000000 
000259c3 l       .debug_str	00000000 
00025a2b l       .debug_str	00000000 
00025af6 l       .debug_str	00000000 
00025b5e l       .debug_str	00000000 
00025c67 l       .debug_str	00000000 
00025ccf l       .debug_str	00000000 
00025dff l       .debug_str	00000000 
00025e6a l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00020ee0 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 1w4juabyv8bmed5v
00000d37 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4b6 l       .debug_str	00000000 
00027abe l       .debug_str	00000000 
00027b09 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0001f415 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea1f l       .debug_str	00000000 
000399c4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000394da l       .debug_str	00000000 
0005cbc3 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611fd l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a835 l       .debug_str	00000000 
0005a736 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f339 l       .debug_str	00000000 
0005a7ac l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 24fd677mu7rr1lzm
00026668 l       .debug_str	00000000 
00029dc5 l       .debug_str	00000000 
00029e4e l       .debug_str	00000000 
00029f88 l       .debug_str	00000000 
0002a011 l       .debug_str	00000000 
0002a124 l       .debug_str	00000000 
0002a1b0 l       .debug_str	00000000 
0002a23c l       .debug_str	00000000 
0002a352 l       .debug_str	00000000 
0002a3de l       .debug_str	00000000 
0002a4cc l       .debug_str	00000000 
00026b93 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
0003e60e l       .debug_str	00000000 
00026c5e l       .debug_str	00000000 
0002a54a l       .debug_str	00000000 
00026cba l       .debug_str	00000000 
0002cb42 l       .debug_str	00000000 
0002a5c8 l       .debug_str	00000000 
00026e00 l       .debug_str	00000000 
0002a647 l       .debug_str	00000000 
00026f47 l       .debug_str	00000000 
0002a6c6 l       .debug_str	00000000 
00025722 l       .debug_str	00000000 
0002a745 l       .debug_str	00000000 
00025892 l       .debug_str	00000000 
0002a7c4 l       .debug_str	00000000 
0002a846 l       .debug_str	00000000 
00025f7f l       .debug_str	00000000 
0002a953 l       .debug_str	00000000 
0002a9d5 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000221ab l       .debug_str	00000000 
0002aaba l       .debug_str	00000000 
0002ab3c l       .debug_str	00000000 
0002ac0b l       .debug_str	00000000 
0002ac22 l       .debug_str	00000000 
0002aca4 l       .debug_str	00000000 
0002add8 l       .debug_str	00000000 
0002ae5a l       .debug_str	00000000 
0002af3f l       .debug_str	00000000 
0002afc1 l       .debug_str	00000000 
0002b0ce l       .debug_str	00000000 
0002b150 l       .debug_str	00000000 
0002b284 l       .debug_str	00000000 
0002b306 l       .debug_str	00000000 
0002b3d5 l       .debug_str	00000000 
0002b457 l       .debug_str	00000000 
0002b58b l       .debug_str	00000000 
0002b60d l       .debug_str	00000000 
0002b71a l       .debug_str	00000000 
0002b776 l       .debug_str	00000000 
0002b870 l       .debug_str	00000000 
0002b9a8 l       .debug_str	00000000 
0001265d l       .debug_str	00000000 
0002bb07 l       .debug_str	00000000 
0001f369 l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0002bc17 l       .debug_str	00000000 
000612e3 l       .debug_str	00000000 
00018bc9 l       .debug_str	00000000 
0002bc24 l       .debug_str	00000000 
0002e2ac l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
0002bc36 l       .debug_str	00000000 
00035779 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013624 l       .debug_str	00000000 
0002bc3b l       .debug_str	00000000 
0003f8fe l       .debug_str	00000000 
0002bd6f l       .debug_str	00000000 
0002beca l       .debug_str	00000000 
0002bfd6 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0006013b l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
0005a736 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c259 l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00005ac0 l       .debug_str	00000000 
00027b3b l       .debug_str	00000000 
00027ba8 l       .debug_str	00000000 
00027c3e l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035933 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac3c l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
0000f47f l       .debug_str	00000000 
0000f4f6 l       .debug_str	00000000 
0000f57a l       .debug_str	00000000 
0000f5f5 l       .debug_str	00000000 
0000f693 l       .debug_str	00000000 
0000f73e l       .debug_str	00000000 
00027cfd l       .debug_str	00000000 
00027dc2 l       .debug_str	00000000 
00027e94 l       .debug_str	00000000 
00027f5d l       .debug_str	00000000 
00028047 l       .debug_str	00000000 
0002814e l       .debug_str	00000000 
0005f673 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
0005ab4d l       .debug_str	00000000 
0002bb19 l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
0000c714 l       .debug_str	00000000 
0000c731 l       .debug_str	00000000 
0000c777 l       .debug_str	00000000 
0000c788 l       .debug_str	00000000 
0000c7f8 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000c955 l       .debug_str	00000000 
0000ca42 l       .debug_str	00000000 
0000cb59 l       .debug_str	00000000 
0000cba9 l       .debug_str	00000000 
0000cc06 l       .debug_str	00000000 
0000cc5a l       .debug_str	00000000 
0000ccd1 l       .debug_str	00000000 
0000cd55 l       .debug_str	00000000 
0000cdd0 l       .debug_str	00000000 
0000ce6e l       .debug_str	00000000 
0000cf19 l       .debug_str	00000000 
0000cfbb l       .debug_str	00000000 
0000d080 l       .debug_str	00000000 
0000d152 l       .debug_str	00000000 
0000d21b l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0000d400 l       .debug_str	00000000 
0000d4f0 l       .debug_str	00000000 
0000d603 l       .debug_str	00000000 
0000d723 l       .debug_str	00000000 
0000d83a l       .debug_str	00000000 
0000d973 l       .debug_str	00000000 
0000dac9 l       .debug_str	00000000 
0002b9ba l       .debug_str	00000000 
0000e9a7 l       .debug_str	00000000 
0000eab9 l       .debug_str	00000000 
0000ebe8 l       .debug_str	00000000 
0002b882 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea8b l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00024c21 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0002565a l       .debug_str	00000000 
0000f250 l       .debug_str	00000000 
0000f27d l       .debug_str	00000000 
0000f29e l       .debug_str	00000000 
0000f305 l       .debug_str	00000000 
0000f3a5 l       .debug_str	00000000 
00028d94 l       .debug_str	00000000 
00028254 l       .debug_str	00000000 
000282d6 l       .debug_str	00000000 
000283c4 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000284cb l       .debug_str	00000000 
000284ac l       .debug_str	00000000 
00028802 l       .debug_str	00000000 
000285bc l       .debug_str	00000000 
0002860d l       .debug_str	00000000 
000286fc l       .debug_str	00000000 
000287e4 l       .debug_str	00000000 
0002b788 l       .debug_str	00000000 
000288f2 l       .debug_str	00000000 
0002896d l       .debug_str	00000000 
00028a57 l       .debug_str	00000000 
00028b3b l       .debug_str	00000000 
00028c47 l       .debug_str	00000000 
00028c93 l       .debug_str	00000000 
00028d7e l       .debug_str	00000000 
00028e68 l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
00028f72 l       .debug_str	00000000 
00029073 l       .debug_str	00000000 
000290c9 l       .debug_str	00000000 
000291c7 l       .debug_str	00000000 
0002921d l       .debug_str	00000000 
0002936a l       .debug_str	00000000 
000293c0 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
000294e6 l       .debug_str	00000000 
0002956d l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00025645 l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
00026603 l       .debug_str	00000000 
00029640 l       .debug_str	00000000 
000296c7 l       .debug_str	00000000 
00025f74 l       .debug_str	00000000 
0002630f l       .debug_str	00000000 
000297d8 l       .debug_str	00000000 
0002985f l       .debug_str	00000000 
00029997 l       .debug_str	00000000 
00029a1f l       .debug_str	00000000 
00029af3 l       .debug_str	00000000 
00029b7c l       .debug_str	00000000 
00029c51 l       .debug_str	00000000 
00029cda l       .debug_str	00000000 
00020f60 l     O .text	00000021 str.0
00020fa0 l     O .text	0000001c str.1
00000000 l    df *ABS*	00000000 2jbqb9ep0zzhh36j
0001c3cf l       .debug_str	00000000 
0002c3d1 l       .debug_str	00000000 
0002c3de l       .debug_str	00000000 
0002c41e l       .debug_str	00000000 
0002c51b l       .debug_str	00000000 
0002c55b l       .debug_str	00000000 
0002c56a l       .debug_str	00000000 
0002c5aa l       .debug_str	00000000 
0002c5c9 l       .debug_str	00000000 
0002c609 l       .debug_str	00000000 
0002c625 l       .debug_str	00000000 
0002c665 l       .debug_str	00000000 
0002c673 l       .debug_str	00000000 
0002c6b3 l       .debug_str	00000000 
0005f736 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0000c494 l       .debug_str	00000000 
0001cee1 l       .debug_str	00000000 
00000788 l       .debug_str	00000000 
0002c6c1 l       .debug_str	00000000 
0002c702 l       .debug_str	00000000 
0000c1d5 l       .debug_str	00000000 
0002c737 l       .debug_str	00000000 
00011798 l       .debug_str	00000000 
0002c741 l       .debug_str	00000000 
0002c782 l       .debug_str	00000000 
0001f3f2 l       .debug_str	00000000 
0002c7cf l       .debug_str	00000000 
0002c810 l       .debug_str	00000000 
0002c845 l       .debug_str	00000000 
0002c850 l       .debug_str	00000000 
0002c891 l       .debug_str	00000000 
0002c8de l       .debug_str	00000000 
0002c91f l       .debug_str	00000000 
0002c954 l       .debug_str	00000000 
0002c9c3 l       .debug_str	00000000 
0002cac4 l       .debug_str	00000000 
0001d7b8 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0002cb33 l       .debug_str	00000000 
0002cb52 l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00016973 l       .debug_str	00000000 
0005aa82 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea8b l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00024c21 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0002565a l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0004ea1f l       .debug_str	00000000 
00015d14 l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003e60e l       .debug_str	00000000 
0002cb42 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
00060aed l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
0006013b l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
0005a736 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c259 l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00005ac0 l       .debug_str	00000000 
00027b3b l       .debug_str	00000000 
00027ba8 l       .debug_str	00000000 
00027c3e l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035933 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac3c l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
0000f47f l       .debug_str	00000000 
0000f4f6 l       .debug_str	00000000 
0000f57a l       .debug_str	00000000 
0000f5f5 l       .debug_str	00000000 
0000f693 l       .debug_str	00000000 
0000f73e l       .debug_str	00000000 
00027cfd l       .debug_str	00000000 
00027dc2 l       .debug_str	00000000 
00027e94 l       .debug_str	00000000 
00027f5d l       .debug_str	00000000 
00028047 l       .debug_str	00000000 
0002814e l       .debug_str	00000000 
0005f673 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
0005ab4d l       .debug_str	00000000 
0002bb19 l       .debug_str	00000000 
00028f72 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002c0cc l       .debug_str	00000000 
0002c1ac l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00026c5e l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
0000c1cc l       .debug_str	00000000 
0002c2aa l       .debug_str	00000000 
0002c2b1 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0002c2b9 l       .debug_str	00000000 
0002c2cd l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0002c2ff l       .debug_str	00000000 
0002c313 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002c345 l       .debug_str	00000000 
0002c384 l       .debug_str	00000000 
0002c392 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2nk42jtdlqpdrpvo
0000f47f l       .debug_str	00000000 
0002ccde l       .debug_str	00000000 
0000d21b l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0000d400 l       .debug_str	00000000 
0002cdd1 l       .debug_str	00000000 
0002ce49 l       .debug_str	00000000 
0002cf63 l       .debug_str	00000000 
0002cfdb l       .debug_str	00000000 
0000f4f6 l       .debug_str	00000000 
0000f57a l       .debug_str	00000000 
0000f5f5 l       .debug_str	00000000 
0000f693 l       .debug_str	00000000 
0000f73e l       .debug_str	00000000 
0002d0a7 l       .debug_str	00000000 
0002d11f l       .debug_str	00000000 
0002d1eb l       .debug_str	00000000 
0002d263 l       .debug_str	00000000 
0002d308 l       .debug_str	00000000 
0002d380 l       .debug_str	00000000 
0002d3fe l       .debug_str	00000000 
0002d476 l       .debug_str	00000000 
0002d4cd l       .debug_str	00000000 
0002d545 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035933 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0005ac3c l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
0002cb70 l       .debug_str	00000000 
0002cbe8 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
0000cb59 l       .debug_str	00000000 
0000cba9 l       .debug_str	00000000 
0000cc06 l       .debug_str	00000000 
0000cc5a l       .debug_str	00000000 
0000ccd1 l       .debug_str	00000000 
0000cd55 l       .debug_str	00000000 
0000cdd0 l       .debug_str	00000000 
0000ce6e l       .debug_str	00000000 
0000cf19 l       .debug_str	00000000 
0000cfbb l       .debug_str	00000000 
0000d080 l       .debug_str	00000000 
0000d152 l       .debug_str	00000000 
0002cc66 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2tupw4qr6cy3al7x
00000c36 l       .debug_str	00000000 
00025443 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
00034a7f l       .debug_str	00000000 
0002f230 l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0002f159 l       .debug_str	00000000 
0002d5ea l       .debug_str	00000000 
0002d633 l       .debug_str	00000000 
0001265d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000bfac l       .debug_str	00000000 
000163e0 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000efc8 l       .debug_str	00000000 
0000efd3 l       .debug_str	00000000 
0000efdd l       .debug_str	00000000 
0000e738 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00018c38 l       .debug_str	00000000 
0000efe6 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00018c83 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 32m5mr5zne5f73k7
0000c06e l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0005d5d4 l       .debug_str	00000000 
0000c05d l       .debug_str	00000000 
000604af l       .debug_str	00000000 
0000c061 l       .debug_str	00000000 
0000c065 l       .debug_str	00000000 
00001820 l       .debug_str	00000000 
0005f8eb l       .debug_str	00000000 
0000e5f2 l       .debug_str	00000000 
0000e5e1 l       .debug_str	00000000 
0005bf92 l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
0005ae43 l       .debug_str	00000000 
0000e773 l       .debug_str	00000000 
0002dc82 l       .debug_str	00000000 
0002dd1e l       .debug_str	00000000 
0000e70f l       .debug_str	00000000 
0000e718 l       .debug_str	00000000 
0000e726 l       .debug_str	00000000 
00018ce9 l       .debug_str	00000000 
0000e73e l       .debug_str	00000000 
00024ee2 l       .debug_str	00000000 
0000f0ef l       .debug_str	00000000 
0000c26b l       .debug_str	00000000 
0002dd29 l       .debug_str	00000000 
0002ddf3 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000bfac l       .debug_str	00000000 
0000e992 l       .debug_str	00000000 
0000f0d5 l       .debug_str	00000000 
0000e778 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000efc8 l       .debug_str	00000000 
0000efd3 l       .debug_str	00000000 
0000efdd l       .debug_str	00000000 
0000e738 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00018c38 l       .debug_str	00000000 
0000efe6 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00018c83 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00025443 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
00034a7f l       .debug_str	00000000 
0002f230 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0002f1c4 l       .debug_str	00000000 
0000e998 l       .debug_str	00000000 
0000e99f l       .debug_str	00000000 
0000e634 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0006013b l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
0005a736 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c259 l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0000c714 l       .debug_str	00000000 
0000c731 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000c777 l       .debug_str	00000000 
0000c788 l       .debug_str	00000000 
0000c7f8 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000c955 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00035933 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac3c l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000cb59 l       .debug_str	00000000 
0000cba9 l       .debug_str	00000000 
0000cc06 l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
0000cc5a l       .debug_str	00000000 
0000ccd1 l       .debug_str	00000000 
0000cd55 l       .debug_str	00000000 
0000cdd0 l       .debug_str	00000000 
0000ce6e l       .debug_str	00000000 
0000cf19 l       .debug_str	00000000 
0000cfbb l       .debug_str	00000000 
0000d080 l       .debug_str	00000000 
0000d152 l       .debug_str	00000000 
0000d21b l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0000d400 l       .debug_str	00000000 
0000e9a7 l       .debug_str	00000000 
0000eab9 l       .debug_str	00000000 
0000ebe8 l       .debug_str	00000000 
0005f673 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
0005ab4d l       .debug_str	00000000 
0002b882 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00027728 l       .debug_str	00000000 
0000eff3 l       .debug_str	00000000 
0001c3cf l       .debug_str	00000000 
0002dca6 l       .debug_str	00000000 
0000f0da l       .debug_str	00000000 
0000f0e0 l       .debug_str	00000000 
0000ca42 l       .debug_str	00000000 
0000d4f0 l       .debug_str	00000000 
0000d603 l       .debug_str	00000000 
0000d723 l       .debug_str	00000000 
0000d83a l       .debug_str	00000000 
0000d973 l       .debug_str	00000000 
0000dac9 l       .debug_str	00000000 
0002b9ba l       .debug_str	00000000 
00027845 l       .debug_str	00000000 
0000f0e9 l       .debug_str	00000000 
0005d24d l       .debug_str	00000000 
0002dd4d l       .debug_str	00000000 
000229d8 l       .debug_str	00000000 
0002d6a7 l       .debug_str	00000000 
0002d70a l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0000c055 l       .debug_str	00000000 
000031ab l       .debug_str	00000000 
000229d6 l       .debug_str	00000000 
0005aa07 l       .debug_str	00000000 
00022a19 l       .debug_str	00000000 
0005ef43 l       .debug_str	00000000 
0002f159 l       .debug_str	00000000 
0002d7da l       .debug_str	00000000 
0002d81d l       .debug_str	00000000 
0002d8c2 l       .debug_str	00000000 
0002d900 l       .debug_str	00000000 
0002d974 l       .debug_str	00000000 
0002d9b4 l       .debug_str	00000000 
0002da56 l       .debug_str	00000000 
0002dae4 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0000fd9c l       .debug_str	00000000 
0000fdb8 l       .debug_str	00000000 
0002db55 l       .debug_str	00000000 
0002dbe5 l       .debug_str	00000000 
000104af l       .debug_str	00000000 
00010451 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000163e0 l       .debug_str	00000000 
000210f0 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 3ulq1z5tkxz9njop
000012f5 l       .debug_str	00000000 
0002dec5 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00018bd3 l       .debug_str	00000000 
00018bc9 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
000134e3 l       .debug_str	00000000 
00033341 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002ddfc l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0002de60 l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4f0czol4b3uljl4v
00000d05 l       .debug_str	00000000 
0002e043 l       .debug_str	00000000 
00025645 l       .debug_str	00000000 
00026603 l       .debug_str	00000000 
0002e062 l       .debug_str	00000000 
0002e0e0 l       .debug_str	00000000 
0002e170 l       .debug_str	00000000 
0002e187 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0005cff0 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
0001ff4f l       .debug_str	00000000 
00003d21 l       .debug_str	00000000 
000612e3 l       .debug_str	00000000 
00016211 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002df2a l       .debug_str	00000000 
0002dfb6 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00025f74 l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
0002630f l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea8b l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00024c21 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0002565a l       .debug_str	00000000 
0002dfc5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n9jsiq8blzioqfk
0002e5d7 l       .debug_str	00000000 
0002e51b l       .debug_str	00000000 
0002e538 l       .debug_str	00000000 
0002e541 l       .debug_str	00000000 
0002e587 l       .debug_str	00000000 
0002e590 l       .debug_str	00000000 
0002e80c l       .debug_str	00000000 
0002e620 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
00003d21 l       .debug_str	00000000 
0002e62c l       .debug_str	00000000 
0002e6a8 l       .debug_str	00000000 
0005cff0 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
0001ff4f l       .debug_str	00000000 
0002e6d3 l       .debug_str	00000000 
0002e74f l       .debug_str	00000000 
0002e781 l       .debug_str	00000000 
0002e807 l       .debug_str	00000000 
0002e816 l       .debug_str	00000000 
0002e170 l       .debug_str	00000000 
0002e887 l       .debug_str	00000000 
0002e8fb l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002e905 l       .debug_str	00000000 
0002e912 l       .debug_str	00000000 
0002e989 l       .debug_str	00000000 
0002e9a3 l       .debug_str	00000000 
0005c259 l       .debug_str	00000000 
0005f673 l       .debug_str	00000000 
0005a679 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002e20e l       .debug_str	00000000 
0002e237 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00025f74 l       .debug_str	00000000 
0002bc17 l       .debug_str	00000000 
000612e3 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00018bc9 l       .debug_str	00000000 
0002bc24 l       .debug_str	00000000 
0002e2ac l       .debug_str	00000000 
0002e244 l       .debug_str	00000000 
0002e286 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0002e29a l       .debug_str	00000000 
0005f640 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
0004aecd l       .debug_str	00000000 
0000fd6f l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea8b l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00024c21 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0002565a l       .debug_str	00000000 
0002e2b6 l       .debug_str	00000000 
0002e2df l       .debug_str	00000000 
00025645 l       .debug_str	00000000 
00025660 l       .debug_str	00000000 
000100a8 l       .debug_str	00000000 
0002567d l       .debug_str	00000000 
00025696 l       .debug_str	00000000 
0002e377 l       .debug_str	00000000 
0002e2fc l       .debug_str	00000000 
0002e341 l       .debug_str	00000000 
0002e365 l       .debug_str	00000000 
0002e394 l       .debug_str	00000000 
00032f05 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
00025f7f l       .debug_str	00000000 
0002e3c7 l       .debug_str	00000000 
00032f63 l       .debug_str	00000000 
0002ac0b l       .debug_str	00000000 
0002e3fa l       .debug_str	00000000 
00032fe5 l       .debug_str	00000000 
00026603 l       .debug_str	00000000 
0002e431 l       .debug_str	00000000 
00033069 l       .debug_str	00000000 
0002630f l       .debug_str	00000000 
0002e468 l       .debug_str	00000000 
0002e4b6 l       .debug_str	00000000 
000229d8 l       .debug_str	00000000 
0002e4c6 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4z4uczzv8d994j8w
000012f5 l       .debug_str	00000000 
0002ead3 l       .debug_str	00000000 
0002eb25 l       .debug_str	00000000 
0001c3cf l       .debug_str	00000000 
0005abca l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000134cb l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002e9c4 l       .debug_str	00000000 
0002ea12 l       .debug_str	00000000 
0000fd6f l       .debug_str	00000000 
0002ea1b l       .debug_str	00000000 
0002ea6b l       .debug_str	00000000 
0002ea76 l       .debug_str	00000000 
0002eac7 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 53kqumdi8360wwys
0002f0ab l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0000e70f l       .debug_str	00000000 
0000e718 l       .debug_str	00000000 
0000e726 l       .debug_str	00000000 
00018ce9 l       .debug_str	00000000 
0000e73e l       .debug_str	00000000 
00024ee2 l       .debug_str	00000000 
0002ef27 l       .debug_str	00000000 
0002efe4 l       .debug_str	00000000 
0002f01f l       .debug_str	00000000 
0002f078 l       .debug_str	00000000 
000253e4 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0002f12e l       .debug_str	00000000 
0002f192 l       .debug_str	00000000 
0000c26b l       .debug_str	00000000 
0002f195 l       .debug_str	00000000 
0000eff9 l       .debug_str	00000000 
000114e6 l       .debug_str	00000000 
00024dab l       .debug_str	00000000 
000254a5 l       .debug_str	00000000 
00059e25 l       .debug_str	00000000 
00061745 l       .debug_str	00000000 
0002f205 l       .debug_str	00000000 
0002f208 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
00011798 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00010a89 l       .debug_str	00000000 
00018bd8 l       .debug_str	00000000 
000116a1 l       .debug_str	00000000 
000116ac l       .debug_str	00000000 
0002f215 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000efc8 l       .debug_str	00000000 
0000efd3 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
0000efdd l       .debug_str	00000000 
0000e738 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00018c38 l       .debug_str	00000000 
0000efe6 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00018c83 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00025443 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00034a7f l       .debug_str	00000000 
0002f230 l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0002f159 l       .debug_str	00000000 
0002eb32 l       .debug_str	00000000 
0002ebcf l       .debug_str	00000000 
0002ec08 l       .debug_str	00000000 
0002eca7 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0002f1c4 l       .debug_str	00000000 
0002ece0 l       .debug_str	00000000 
0002ed7d l       .debug_str	00000000 
0002edb1 l       .debug_str	00000000 
0002ee54 l       .debug_str	00000000 
0002eef3 l       .debug_str	00000000 
000211d0 l     O .text	0000001c str.0
00021200 l     O .text	00000021 str.1
00000000 l    df *ABS*	00000000 tool5db1zbl71ep
0002f215 l       .debug_str	00000000 
0002f230 l       .debug_str	00000000 
0002f2d4 l       .debug_str	00000000 
0002f349 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00010a89 l       .debug_str	00000000 
00025434 l       .debug_str	00000000 
000116a1 l       .debug_str	00000000 
000116ac l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
00018c83 l       .debug_str	00000000 
00034a7f l       .debug_str	00000000 
0002f265 l       .debug_str	00000000 
000253e4 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00025443 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 vnkfcw75uydipan
0002f48f l       .debug_str	00000000 
0002565a l       .debug_str	00000000 
00025645 l       .debug_str	00000000 
00025660 l       .debug_str	00000000 
0002f380 l       .debug_str	00000000 
0002f3cb l       .debug_str	00000000 
0002f3de l       .debug_str	00000000 
0002f429 l       .debug_str	00000000 
0002f44c l       .debug_str	00000000 
000100a8 l       .debug_str	00000000 
0002f4ab l       .debug_str	00000000 
0002e620 l       .debug_str	00000000 
0000fd6f l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
00025f74 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002bc17 l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea8b l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00024c21 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3ik332mkg6tevaet
0000bb41 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010546 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0001072c l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00010725 l       .debug_str	00000000 
0002f4ee l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00011798 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1d7thnxtm1658vov
00000d1e l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4b6 l       .debug_str	00000000 
0002f5b3 l       .debug_str	00000000 
0002f5f0 l       .debug_str	00000000 
0002f601 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0004ea1f l       .debug_str	00000000 
000399c4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000394da l       .debug_str	00000000 
0005cbc3 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611fd l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a835 l       .debug_str	00000000 
0005a736 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f339 l       .debug_str	00000000 
0005a7ac l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1mpt8t9sy9fl5s1y
0002f7f8 l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
0002f677 l       .debug_str	00000000 
00019296 l       .debug_str	00000000 
0002f6bc l       .debug_str	00000000 
0002f701 l       .debug_str	00000000 
0002f70e l       .debug_str	00000000 
0002f753 l       .debug_str	00000000 
0002f760 l       .debug_str	00000000 
0001b2bd l       .debug_str	00000000 
0002f7a5 l       .debug_str	00000000 
0000be9b l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
0001c3cf l       .debug_str	00000000 
0002f7ed l       .debug_str	00000000 
0000bf55 l       .debug_str	00000000 
0002f840 l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
0002f886 l       .debug_str	00000000 
0002f8cc l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
0005cbb1 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0005e9c7 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002f633 l       .debug_str	00000000 
0000be46 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1yr11byuhnx447wf
0001f369 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00059b20 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00015d14 l       .debug_str	00000000 
00011f62 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
0001f5fa l       .debug_str	00000000 
000343ec l       .debug_str	00000000 
00011f67 l       .debug_str	00000000 
0001f455 l       .debug_str	00000000 
00011f5e l       .debug_str	00000000 
0001f600 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002f912 l       .debug_str	00000000 
00019337 l       .debug_str	00000000 
0001c3cf l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0001f44f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2c4l9zx47vkj1m82
00035d12 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00012b94 l       .debug_str	00000000 
0005e9c7 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002f97b l       .debug_str	00000000 
0005c067 l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2zdnjadro4igct6r
000197d7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002f9ea l       .debug_str	00000000 
0002fa10 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3w7pruxfhz9uhnv5
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005a679 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0005cff0 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
000612e3 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016211 l       .debug_str	00000000 
000229d8 l       .debug_str	00000000 
0002fa19 l       .debug_str	00000000 
0002fa95 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4wduwt141qumn59z
0000139d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0005e7ab l       .debug_str	00000000 
00033341 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0001f369 l       .debug_str	00000000 
0002fac2 l       .debug_str	00000000 
00012b91 l       .debug_str	00000000 
0001c3cf l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 pcinnba97cylogg
0001604c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002fb24 l       .debug_str	00000000 
0001603e l       .debug_str	00000000 
00013ad6 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0005a6a8 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 13ma8mzaba1sllzw
0003007a l       .debug_str	00000000 
0003e60e l       .debug_str	00000000 
0000395c l       .debug_str	00000000 
000303ce l       .debug_str	00000000 
000213bd l       .debug_str	00000000 
0003044d l       .debug_str	00000000 
00021440 l       .debug_str	00000000 
000304cc l       .debug_str	00000000 
0003054e l       .debug_str	00000000 
000221ab l       .debug_str	00000000 
00030792 l       .debug_str	00000000 
00030814 l       .debug_str	00000000 
0003085d l       .debug_str	00000000 
000308df l       .debug_str	00000000 
00030928 l       .debug_str	00000000 
000216c1 l       .debug_str	00000000 
000309aa l       .debug_str	00000000 
00030a2c l       .debug_str	00000000 
00030c70 l       .debug_str	00000000 
00030cf2 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00030d3b l       .debug_str	00000000 
00030daf l       .debug_str	00000000 
0001265d l       .debug_str	00000000 
0001f369 l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00035779 l       .debug_str	00000000 
000612e3 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013624 l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
0002bc36 l       .debug_str	00000000 
0003101e l       .debug_str	00000000 
00031289 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0006013b l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
0005a736 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c259 l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035933 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac3c l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000590a l       .debug_str	00000000 
00005958 l       .debug_str	00000000 
000059c3 l       .debug_str	00000000 
0005f673 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
0005ab4d l       .debug_str	00000000 
00030d4d l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00005ac0 l       .debug_str	00000000 
00005b05 l       .debug_str	00000000 
00005b73 l       .debug_str	00000000 
00005c0a l       .debug_str	00000000 
00005cca l       .debug_str	00000000 
00005db3 l       .debug_str	00000000 
00005ec5 l       .debug_str	00000000 
00006000 l       .debug_str	00000000 
00006164 l       .debug_str	00000000 
000062f1 l       .debug_str	00000000 
000064a7 l       .debug_str	00000000 
00006686 l       .debug_str	00000000 
0000688e l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
00006bc3 l       .debug_str	00000000 
00006c3a l       .debug_str	00000000 
00006cbe l       .debug_str	00000000 
00006d39 l       .debug_str	00000000 
00006dd7 l       .debug_str	00000000 
00006e82 l       .debug_str	00000000 
00006f24 l       .debug_str	00000000 
00006fe9 l       .debug_str	00000000 
000070bb l       .debug_str	00000000 
00007184 l       .debug_str	00000000 
00007270 l       .debug_str	00000000 
00007369 l       .debug_str	00000000 
00007459 l       .debug_str	00000000 
0000756c l       .debug_str	00000000 
0000768c l       .debug_str	00000000 
000077a3 l       .debug_str	00000000 
000078dd l       .debug_str	00000000 
00007a24 l       .debug_str	00000000 
00007b62 l       .debug_str	00000000 
00007cc3 l       .debug_str	00000000 
00007e31 l       .debug_str	00000000 
00007f96 l       .debug_str	00000000 
0000811e l       .debug_str	00000000 
000082b3 l       .debug_str	00000000 
0000843f l       .debug_str	00000000 
000085ee l       .debug_str	00000000 
000087aa l       .debug_str	00000000 
0000895d l       .debug_str	00000000 
00008b33 l       .debug_str	00000000 
00008d16 l       .debug_str	00000000 
00008ef0 l       .debug_str	00000000 
000090ed l       .debug_str	00000000 
000092f7 l       .debug_str	00000000 
000094f8 l       .debug_str	00000000 
0000971c l       .debug_str	00000000 
0000994d l       .debug_str	00000000 
00009b75 l       .debug_str	00000000 
00009dbe l       .debug_str	00000000 
0000a024 l       .debug_str	00000000 
00030dc1 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002fb76 l       .debug_str	00000000 
0002fbfd l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
0002fc4a l       .debug_str	00000000 
0002fcd1 l       .debug_str	00000000 
0002ff19 l       .debug_str	00000000 
0002ffa2 l       .debug_str	00000000 
0002fff1 l       .debug_str	00000000 
000302c4 l       .debug_str	00000000 
000210b2 l       .debug_str	00000000 
00030350 l       .debug_str	00000000 
0002133b l       .debug_str	00000000 
000212f0 l     O .text	0000001c str.0
00021330 l     O .text	00000021 str.1
00000000 l    df *ABS*	00000000 4miap3quw76e3k6m
00000beb l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000134cb l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000312f9 l       .debug_str	00000000 
0000b1cc l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4yl298udq4i2eqhh
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
000134e3 l       .debug_str	00000000 
00033341 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00031349 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 f8ebwo3yn0ryfmw
0003160e l       .debug_str	00000000 
000082b3 l       .debug_str	00000000 
0000843f l       .debug_str	00000000 
000085ee l       .debug_str	00000000 
000087aa l       .debug_str	00000000 
0000895d l       .debug_str	00000000 
00008b33 l       .debug_str	00000000 
00008d16 l       .debug_str	00000000 
00008ef0 l       .debug_str	00000000 
000090ed l       .debug_str	00000000 
000092f7 l       .debug_str	00000000 
00031686 l       .debug_str	00000000 
000318b1 l       .debug_str	00000000 
00031929 l       .debug_str	00000000 
00031ab8 l       .debug_str	00000000 
00031b30 l       .debug_str	00000000 
00031c98 l       .debug_str	00000000 
00031d10 l       .debug_str	00000000 
00031d8e l       .debug_str	00000000 
00031e06 l       .debug_str	00000000 
00031ef9 l       .debug_str	00000000 
00031f71 l       .debug_str	00000000 
0003214e l       .debug_str	00000000 
000321c6 l       .debug_str	00000000 
00032292 l       .debug_str	00000000 
0003230a l       .debug_str	00000000 
0003233a l       .debug_str	00000000 
000323b2 l       .debug_str	00000000 
00032457 l       .debug_str	00000000 
000324cf l       .debug_str	00000000 
00032610 l       .debug_str	00000000 
00032688 l       .debug_str	00000000 
0003283e l       .debug_str	00000000 
000328b6 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035933 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0005ac3c l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
000313ad l       .debug_str	00000000 
00031425 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
00006bc3 l       .debug_str	00000000 
00006c3a l       .debug_str	00000000 
00006cbe l       .debug_str	00000000 
00006d39 l       .debug_str	00000000 
00006dd7 l       .debug_str	00000000 
00006e82 l       .debug_str	00000000 
00006f24 l       .debug_str	00000000 
00006fe9 l       .debug_str	00000000 
000070bb l       .debug_str	00000000 
00007184 l       .debug_str	00000000 
00007270 l       .debug_str	00000000 
00007369 l       .debug_str	00000000 
0003147c l       .debug_str	00000000 
000314f4 l       .debug_str	00000000 
00007459 l       .debug_str	00000000 
0000756c l       .debug_str	00000000 
0000768c l       .debug_str	00000000 
000077a3 l       .debug_str	00000000 
000078dd l       .debug_str	00000000 
00007a24 l       .debug_str	00000000 
00007b62 l       .debug_str	00000000 
00007cc3 l       .debug_str	00000000 
00007e31 l       .debug_str	00000000 
00007f96 l       .debug_str	00000000 
0000811e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 16gyyaet005v3lvf
00024da1 l       .debug_str	00000000 
00032aba l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00032b1a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00035933 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1gec8qpvo4ti2nbg
0001c3cf l       .debug_str	00000000 
0002eac7 l       .debug_str	00000000 
00032c7e l       .debug_str	00000000 
0002eb25 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
0005abca l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000134d3 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00032b7a l       .debug_str	00000000 
0002ea12 l       .debug_str	00000000 
00025f74 l       .debug_str	00000000 
00032bcc l       .debug_str	00000000 
00032c1f l       .debug_str	00000000 
00032c29 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 28buxl9xaffr9rke
0005a7ac l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea1f l       .debug_str	00000000 
000399c4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005e9c7 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00032cd4 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
00018bc9 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611fd l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f339 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2leljxexqh8ze7wz
00035d12 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00012b94 l       .debug_str	00000000 
0005e9c7 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00032d31 l       .debug_str	00000000 
0005c067 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3cgt5uexdtuxl7pe
00033081 l       .debug_str	00000000 
00032f87 l       .debug_str	00000000 
00032fa4 l       .debug_str	00000000 
00032fdf l       .debug_str	00000000 
0003300d l       .debug_str	00000000 
00033028 l       .debug_str	00000000 
00033063 l       .debug_str	00000000 
0003308c l       .debug_str	00000000 
00032c1f l       .debug_str	00000000 
000330b2 l       .debug_str	00000000 
000330d8 l       .debug_str	00000000 
000330f2 l       .debug_str	00000000 
0002ea6b l       .debug_str	00000000 
00033119 l       .debug_str	00000000 
00033140 l       .debug_str	00000000 
0005c259 l       .debug_str	00000000 
0005f673 l       .debug_str	00000000 
000100a8 l       .debug_str	00000000 
0000fd6f l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0005db1a l       .debug_str	00000000 
0005ae24 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
0005a736 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00032da2 l       .debug_str	00000000 
00032db4 l       .debug_str	00000000 
00032dc5 l       .debug_str	00000000 
00032e11 l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea8b l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00024c21 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0002565a l       .debug_str	00000000 
00032e1d l       .debug_str	00000000 
00032e3f l       .debug_str	00000000 
00032e60 l       .debug_str	00000000 
00032eac l       .debug_str	00000000 
00032ec8 l       .debug_str	00000000 
00032eff l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00025f74 l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
00032f19 l       .debug_str	00000000 
00032f26 l       .debug_str	00000000 
00032f5d l       .debug_str	00000000 
00025645 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 26y0fjfhtczgcip1
0005abca l       .debug_str	00000000 
00033284 l       .debug_str	00000000 
000332a0 l       .debug_str	00000000 
000332c6 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0005f673 l       .debug_str	00000000 
00002389 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005db1a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003315b l       .debug_str	00000000 
00013512 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
0005a736 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00033184 l       .debug_str	00000000 
00033195 l       .debug_str	00000000 
000331a5 l       .debug_str	00000000 
000331f1 l       .debug_str	00000000 
000331fc l       .debug_str	00000000 
00033232 l       .debug_str	00000000 
0003324a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3529eu2hb2fyibnd
000160f3 l       .debug_str	00000000 
0001612d l       .debug_str	00000000 
00016166 l       .debug_str	00000000 
00016175 l       .debug_str	00000000 
000161b8 l       .debug_str	00000000 
0005c0f5 l       .debug_str	00000000 
00038a80 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000133d2 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000114e6 l       .debug_str	00000000 
000114ea l       .debug_str	00000000 
0001616f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000332cf l       .debug_str	00000000 
00013415 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
000332f8 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0005f673 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
0005a736 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3cyvbl47c30y60eb
0005c316 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00012b94 l       .debug_str	00000000 
0005e9c7 l       .debug_str	00000000 
00033334 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00033347 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
000333d3 l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
000333dc l       .debug_str	00000000 
0003e60e l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
000333ec l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19nunfeq6523tst5
00024da1 l       .debug_str	00000000 
00033413 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00033473 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00035933 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1xpo0qpsduc6enem
0003353f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
000334d3 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4xxoizn3g1nl6m5i
00035d12 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
00012b94 l       .debug_str	00000000 
0005e9c7 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00033548 l       .debug_str	00000000 
0005c067 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 25lz0dio8kzdubcg
0001604c l       .debug_str	00000000 
0005abca l       .debug_str	00000000 
00025645 l       .debug_str	00000000 
000100a8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0001338f l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000335b9 l       .debug_str	00000000 
000335f7 l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea8b l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00024c21 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0002565a l       .debug_str	00000000 
00033610 l       .debug_str	00000000 
0003364e l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00025f74 l       .debug_str	00000000 
0005ae24 l       .debug_str	00000000 
0000fd6f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 core.b09zx0wt-cgu.0
00000afc l       .debug_str	00000000 
00033677 l       .debug_str	00000000 
0003368a l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0005e9c7 l       .debug_str	00000000 
000336bb l       .debug_str	00000000 
000336c3 l       .debug_str	00000000 
000336cc l       .debug_str	00000000 
00033715 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000336d3 l       .debug_str	00000000 
00033712 l       .debug_str	00000000 
0003371b l       .debug_str	00000000 
0003375d l       .debug_str	00000000 
00033767 l       .debug_str	00000000 
000337aa l       .debug_str	00000000 
000337b4 l       .debug_str	00000000 
000337f7 l       .debug_str	00000000 
00033801 l       .debug_str	00000000 
00033844 l       .debug_str	00000000 
0003384f l       .debug_str	00000000 
00033894 l       .debug_str	00000000 
0003389f l       .debug_str	00000000 
000338e4 l       .debug_str	00000000 
000338ea l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00033f1f l       .debug_str	00000000 
000114e6 l       .debug_str	00000000 
000338f7 l       .debug_str	00000000 
00033907 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
000116ee l       .debug_str	00000000 
0001261f l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00035779 l       .debug_str	00000000 
000612e3 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013624 l       .debug_str	00000000 
00024c96 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0003394d l       .debug_str	00000000 
000229d8 l       .debug_str	00000000 
0005f736 l       .debug_str	00000000 
00034323 l       .debug_str	00000000 
00012627 l       .debug_str	00000000 
0005f348 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0005ab9e l       .debug_str	00000000 
0003395f l       .debug_str	00000000 
00033964 l       .debug_str	00000000 
00060cbe l       .debug_str	00000000 
0003396f l       .debug_str	00000000 
00000326 l       .debug_str	00000000 
00033979 l       .debug_str	00000000 
00033fed l       .debug_str	00000000 
00033983 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
0003402d l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00034366 l       .debug_str	00000000 
00012631 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00033991 l       .debug_str	00000000 
00033a05 l       .debug_str	00000000 
00034247 l       .debug_str	00000000 
00033a17 l       .debug_str	00000000 
00034033 l       .debug_str	00000000 
0003400d l       .debug_str	00000000 
00014ad8 l       .debug_str	00000000 
0003428a l       .debug_str	00000000 
00033a1c l       .debug_str	00000000 
00033a90 l       .debug_str	00000000 
0003439f l       .debug_str	00000000 
000343e6 l       .debug_str	00000000 
000342ec l       .debug_str	00000000 
00033aa8 l       .debug_str	00000000 
00043b7b l       .debug_str	00000000 
0003929a l       .debug_str	00000000 
0005ab4d l       .debug_str	00000000 
00034401 l       .debug_str	00000000 
000342bb l       .debug_str	00000000 
00033b20 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005e954 l       .debug_str	00000000 
000221ab l       .debug_str	00000000 
00033b78 l       .debug_str	00000000 
00033b7d l       .debug_str	00000000 
00033b8f l       .debug_str	00000000 
0001c3cf l       .debug_str	00000000 
00034a7f l       .debug_str	00000000 
00033b98 l       .debug_str	00000000 
0001a507 l       .debug_str	00000000 
00033bc0 l       .debug_str	00000000 
00033bd0 l       .debug_str	00000000 
0005cff0 l       .debug_str	00000000 
00033c29 l       .debug_str	00000000 
00033c31 l       .debug_str	00000000 
000135b4 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00010b34 l       .debug_str	00000000 
00033c39 l       .debug_str	00000000 
00016279 l       .debug_str	00000000 
00033c45 l       .debug_str	00000000 
00033c4f l       .debug_str	00000000 
00033c5c l       .debug_str	00000000 
00033c69 l       .debug_str	00000000 
00033c7e l       .debug_str	00000000 
00033c92 l       .debug_str	00000000 
00033ca8 l       .debug_str	00000000 
00033cb0 l       .debug_str	00000000 
00033cbd l       .debug_str	00000000 
00033cca l       .debug_str	00000000 
000345d3 l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
00033cd7 l       .debug_str	00000000 
00033d04 l       .debug_str	00000000 
00033d33 l       .debug_str	00000000 
00033d5a l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00033d79 l       .debug_str	00000000 
00033d8e l       .debug_str	00000000 
00019f29 l       .debug_str	00000000 
0004ea1f l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
0005a7ac l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00033d98 l       .debug_str	00000000 
00033dbd l       .debug_str	00000000 
00033da3 l       .debug_str	00000000 
00033e3c l       .debug_str	00000000 
00033dcd l       .debug_str	00000000 
00033dd3 l       .debug_str	00000000 
00033de2 l       .debug_str	00000000 
00033ded l       .debug_str	00000000 
00033e22 l       .debug_str	00000000 
00033e47 l       .debug_str	00000000 
00033e57 l       .debug_str	00000000 
0005b3b6 l       .debug_str	00000000 
00033e89 l       .debug_str	00000000 
00033e8e l       .debug_str	00000000 
0005c259 l       .debug_str	00000000 
000356f3 l       .debug_str	00000000 
000356ec l       .debug_str	00000000 
000134e3 l       .debug_str	00000000 
0003571a l       .debug_str	00000000 
0003574e l       .debug_str	00000000 
00033e94 l       .debug_str	00000000 
0000581f l       .debug_str	00000000 
00033ed2 l       .debug_str	00000000 
000356f7 l       .debug_str	00000000 
00035744 l       .debug_str	00000000 
00033eb3 l       .debug_str	00000000 
00033ea0 l       .debug_str	00000000 
00033eb9 l       .debug_str	00000000 
000221aa l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
0000bb40 l       .debug_str	00000000 
00033ee1 l       .debug_str	00000000 
00033ee9 l       .debug_str	00000000 
0003f3b2 l       .debug_str	00000000 
00033eef l       .debug_str	00000000 
0004cedd l       .debug_str	00000000 
00033f16 l       .debug_str	00000000 
00033efa l       .debug_str	00000000 
0000e8a7 l       .debug_str	00000000 
00033f1e l       .debug_str	00000000 
00033bca l       .debug_str	00000000 
00022b3e l       .debug_str	00000000 
00024bf6 l       .debug_str	00000000 
00033f23 l       .debug_str	00000000 
00033f47 l       .debug_str	00000000 
00033f4d l       .debug_str	00000000 
00033f55 l       .debug_str	00000000 
0004f548 l       .debug_str	00000000 
0003efae l       .debug_str	00000000 
00033f5a l       .debug_str	00000000 
00033f82 l       .debug_str	00000000 
00033f64 l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
00018bc9 l       .debug_str	00000000 
000160ec l       .debug_str	00000000 
0001f415 l       .debug_str	00000000 
00022b46 l       .debug_str	00000000 
00022b53 l       .debug_str	00000000 
00022b5c l       .debug_str	00000000 
00059b14 l       .debug_str	00000000 
00033f96 l       .debug_str	00000000 
00033f8a l       .debug_str	00000000 
00012b94 l       .debug_str	00000000 
00033fa3 l       .debug_str	00000000 
00033faf l       .debug_str	00000000 
00033fd2 l       .debug_str	00000000 
00033fbc l       .debug_str	00000000 
00033fe0 l       .debug_str	00000000 
00034000 l       .debug_str	00000000 
00034020 l       .debug_str	00000000 
0003403b l       .debug_str	00000000 
00034056 l       .debug_str	00000000 
0003405c l       .debug_str	00000000 
00034060 l       .debug_str	00000000 
00034071 l       .debug_str	00000000 
00034064 l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00034086 l       .debug_str	00000000 
00034081 l       .debug_str	00000000 
00034099 l       .debug_str	00000000 
000340e5 l       .debug_str	00000000 
000340be l       .debug_str	00000000 
000340d5 l       .debug_str	00000000 
000340ff l       .debug_str	00000000 
000340f0 l       .debug_str	00000000 
00034147 l       .debug_str	00000000 
00034127 l       .debug_str	00000000 
000341a0 l       .debug_str	00000000 
00034180 l       .debug_str	00000000 
00059b06 l       .debug_str	00000000 
000341f7 l       .debug_str	00000000 
000341fc l       .debug_str	00000000 
00034202 l       .debug_str	00000000 
00034225 l       .debug_str	00000000 
00034207 l       .debug_str	00000000 
00034230 l       .debug_str	00000000 
0003427b l       .debug_str	00000000 
000342ac l       .debug_str	00000000 
000342dd l       .debug_str	00000000 
0003430c l       .debug_str	00000000 
00034357 l       .debug_str	00000000 
00034388 l       .debug_str	00000000 
0001a326 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000399c4 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
000394da l       .debug_str	00000000 
0005cbc3 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
000611fd l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a835 l       .debug_str	00000000 
0005a736 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0005ad7e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0001f339 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4b6 l       .debug_str	00000000 
0001f4aa l       .debug_str	00000000 
0001f2e7 l       .debug_str	00000000 
000343d9 l       .debug_str	00000000 
000343f2 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00034420 l       .debug_str	00000000 
0003441f l       .debug_str	00000000 
00034434 l       .debug_str	00000000 
00034425 l       .debug_str	00000000 
0005a827 l       .debug_str	00000000 
00059af4 l       .debug_str	00000000 
00000e0b l       .debug_str	00000000 
00034461 l       .debug_str	00000000 
00034453 l       .debug_str	00000000 
00034452 l       .debug_str	00000000 
0001f41e l       .debug_str	00000000 
00018bd3 l       .debug_str	00000000 
00061633 l       .debug_str	00000000 
0003446a l       .debug_str	00000000 
0003446e l       .debug_str	00000000 
00034471 l       .debug_str	00000000 
00060123 l       .debug_str	00000000 
00018bb7 l       .debug_str	00000000 
00034474 l       .debug_str	00000000 
00019ea1 l       .debug_str	00000000 
00034478 l       .debug_str	00000000 
00034477 l       .debug_str	00000000 
0003447d l       .debug_str	00000000 
0003454f l       .debug_str	00000000 
00000238 l       .debug_str	00000000 
0003449b l       .debug_str	00000000 
00034489 l       .debug_str	00000000 
000344c0 l       .debug_str	00000000 
00034588 l       .debug_str	00000000 
000344de l       .debug_str	00000000 
000344cc l       .debug_str	00000000 
00034503 l       .debug_str	00000000 
0003451c l       .debug_str	00000000 
0003450a l       .debug_str	00000000 
00034528 l       .debug_str	00000000 
00034540 l       .debug_str	00000000 
00034579 l       .debug_str	00000000 
00019ea7 l       .debug_str	00000000 
000345b2 l       .debug_str	00000000 
000345bf l       .debug_str	00000000 
000345be l       .debug_str	00000000 
000345c7 l       .debug_str	00000000 
000345f4 l       .debug_str	00000000 
000345df l       .debug_str	00000000 
00034611 l       .debug_str	00000000 
0003461d l       .debug_str	00000000 
000346c7 l       .debug_str	00000000 
00034629 l       .debug_str	00000000 
00034630 l       .debug_str	00000000 
00034639 l       .debug_str	00000000 
00034647 l       .debug_str	00000000 
0003464e l       .debug_str	00000000 
00034656 l       .debug_str	00000000 
0003465d l       .debug_str	00000000 
000346a3 l       .debug_str	00000000 
0003467e l       .debug_str	00000000 
00034669 l       .debug_str	00000000 
0003468e l       .debug_str	00000000 
000346b2 l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
000346d3 l       .debug_str	00000000 
00024c09 l       .debug_str	00000000 
0005e00d l       .debug_str	00000000 
0001f25a l       .debug_str	00000000 
0001f243 l       .debug_str	00000000 
000346ed l       .debug_str	00000000 
00034710 l       .debug_str	00000000 
000346f9 l       .debug_str	00000000 
0003475a l       .debug_str	00000000 
0003474e l       .debug_str	00000000 
00033bc5 l       .debug_str	00000000 
00034777 l       .debug_str	00000000 
00034760 l       .debug_str	00000000 
000347c0 l       .debug_str	00000000 
000347e8 l       .debug_str	00000000 
000347d1 l       .debug_str	00000000 
0005cbb1 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
0005ac3c l       .debug_str	00000000 
00034897 l       .debug_str	00000000 
00034879 l       .debug_str	00000000 
0003498d l       .debug_str	00000000 
0003496d l       .debug_str	00000000 
00034a00 l       .debug_str	00000000 
000349e0 l       .debug_str	00000000 
0004b006 l       .debug_str	00000000 
00034a53 l       .debug_str	00000000 
00034a60 l       .debug_str	00000000 
00034a6b l       .debug_str	00000000 
00034a81 l       .debug_str	00000000 
00034a8b l       .debug_str	00000000 
00034ae1 l       .debug_str	00000000 
00034af3 l       .debug_str	00000000 
00034b45 l       .debug_str	00000000 
00034b59 l       .debug_str	00000000 
00034bad l       .debug_str	00000000 
00034bb4 l       .debug_str	00000000 
00034bfa l       .debug_str	00000000 
00034c09 l       .debug_str	00000000 
00034c63 l       .debug_str	00000000 
00034cb9 l       .debug_str	00000000 
00034d11 l       .debug_str	00000000 
00034d5b l       .debug_str	00000000 
00034d61 l       .debug_str	00000000 
00034db1 l       .debug_str	00000000 
00034dfd l       .debug_str	00000000 
00034e4b l       .debug_str	00000000 
00024caf l       .debug_str	00000000 
00034e8b l       .debug_str	00000000 
00034ed8 l       .debug_str	00000000 
00034f21 l       .debug_str	00000000 
00034f6c l       .debug_str	00000000 
00034fa9 l       .debug_str	00000000 
00034fb9 l       .debug_str	00000000 
00035014 l       .debug_str	00000000 
0003506b l       .debug_str	00000000 
000350c4 l       .debug_str	00000000 
0004239a l       .debug_str	00000000 
0003510f l       .debug_str	00000000 
00035163 l       .debug_str	00000000 
000351b3 l       .debug_str	00000000 
00035205 l       .debug_str	00000000 
0005a6a8 l       .debug_str	00000000 
00035249 l       .debug_str	00000000 
00035295 l       .debug_str	00000000 
000352dd l       .debug_str	00000000 
00035327 l       .debug_str	00000000 
000421d0 l       .debug_str	00000000 
00035363 l       .debug_str	00000000 
000353b7 l       .debug_str	00000000 
00035407 l       .debug_str	00000000 
00035459 l       .debug_str	00000000 
0003549d l       .debug_str	00000000 
000354a9 l       .debug_str	00000000 
00035500 l       .debug_str	00000000 
00035553 l       .debug_str	00000000 
000355a8 l       .debug_str	00000000 
000355ef l       .debug_str	00000000 
000355fb l       .debug_str	00000000 
00035612 l       .debug_str	00000000 
0003560b l       .debug_str	00000000 
00035624 l       .debug_str	00000000 
00035639 l       .debug_str	00000000 
0003568a l       .debug_str	00000000 
0003569a l       .debug_str	00000000 
000356eb l       .debug_str	00000000 
000356f6 l       .debug_str	00000000 
00035719 l       .debug_str	00000000 
0003574d l       .debug_str	00000000 
00035763 l       .debug_str	00000000 
00035791 l       .debug_str	00000000 
00035785 l       .debug_str	00000000 
0003579f l       .debug_str	00000000 
0003579e l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00018bbf l       .debug_str	00000000 
00024c1c l       .debug_str	00000000 
00024c1b l       .debug_str	00000000 
00024c21 l       .debug_str	00000000 
00024c20 l       .debug_str	00000000 
000357a2 l       .debug_str	00000000 
000357e2 l       .debug_str	00000000 
000357ea l       .debug_str	00000000 
0003582a l       .debug_str	00000000 
00035834 l       .debug_str	00000000 
00059c40 l       .debug_str	00000000 
0005e7ab l       .debug_str	00000000 
00035870 l       .debug_str	00000000 
0001b095 l       .debug_str	00000000 
00038690 l       .debug_str	00000000 
00035898 l       .debug_str	00000000 
0001af4d l       .debug_str	00000000 
000358c1 l       .debug_str	00000000 
000358e6 l       .debug_str	00000000 
0004681e l       .debug_str	00000000 
0005ac96 l       .debug_str	00000000 
000358ed l       .debug_str	00000000 
000358f6 l       .debug_str	00000000 
0003592f l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
00035937 l       .debug_str	00000000 
00014386 l       .debug_str	00000000 
000359cc l       .debug_str	00000000 
0000be9b l       .debug_str	00000000 
00035a17 l       .debug_str	00000000 
0000be46 l       .debug_str	00000000 
00035a5e l       .debug_str	00000000 
00013ad6 l       .debug_str	00000000 
00035ab3 l       .debug_str	00000000 
00035af0 l       .debug_str	00000000 
000134d3 l       .debug_str	00000000 
00035afb l       .debug_str	00000000 
00014290 l       .debug_str	00000000 
00035b50 l       .debug_str	00000000 
00014220 l       .debug_str	00000000 
00035ba2 l       .debug_str	00000000 
0000ab71 l       .debug_str	00000000 
00035be9 l       .debug_str	00000000 
0000ab6c l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00011e1d l       .debug_str	00000000 
000365f3 l       .debug_str	00000000 
00035c6f l       .debug_str	00000000 
00035cb0 l       .debug_str	00000000 
00035cd3 l       .debug_str	00000000 
00035d0e l       .debug_str	00000000 
00035d18 l       .debug_str	00000000 
00035da2 l       .debug_str	00000000 
00035dd4 l       .debug_str	00000000 
000130c8 l       .debug_str	00000000 
000134cb l       .debug_str	00000000 
00035e48 l       .debug_str	00000000 
00035e99 l       .debug_str	00000000 
000135ff l       .debug_str	00000000 
00035edb l       .debug_str	00000000 
00035f62 l       .debug_str	00000000 
00035f71 l       .debug_str	00000000 
00035ffb l       .debug_str	00000000 
00036077 l       .debug_str	00000000 
000360a7 l       .debug_str	00000000 
000360e2 l       .debug_str	00000000 
000360ec l       .debug_str	00000000 
00003ab0 l       .debug_str	00000000 
00036163 l       .debug_str	00000000 
000361b8 l       .debug_str	00000000 
000361c1 l       .debug_str	00000000 
00036212 l       .debug_str	00000000 
0000579d l       .debug_str	00000000 
0003621e l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0003622b l       .debug_str	00000000 
00036234 l       .debug_str	00000000 
0003624a l       .debug_str	00000000 
00036257 l       .debug_str	00000000 
0003629c l       .debug_str	00000000 
000362b0 l       .debug_str	00000000 
00036305 l       .debug_str	00000000 
0003630e l       .debug_str	00000000 
0004d4bd l       .debug_str	00000000 
00036346 l       .debug_str	00000000 
00036383 l       .debug_str	00000000 
0003638e l       .debug_str	00000000 
00036411 l       .debug_str	00000000 
0003641c l       .debug_str	00000000 
000364a2 l       .debug_str	00000000 
00036517 l       .debug_str	00000000 
00036543 l       .debug_str	00000000 
000365cc l       .debug_str	00000000 
000365db l       .debug_str	00000000 
000365e8 l       .debug_str	00000000 
000365fc l       .debug_str	00000000 
00036652 l       .debug_str	00000000 
000366c1 l       .debug_str	00000000 
00036741 l       .debug_str	00000000 
000367af l       .debug_str	00000000 
0003683a l       .debug_str	00000000 
000368af l       .debug_str	00000000 
000368ef l       .debug_str	00000000 
00036972 l       .debug_str	00000000 
000369b3 l       .debug_str	00000000 
0004aec8 l       .debug_str	00000000 
0004e9e2 l       .debug_str	00000000 
00036a18 l       .debug_str	00000000 
00036ac7 l       .debug_str	00000000 
00036b12 l       .debug_str	00000000 
0001450b l       .debug_str	00000000 
00036bbb l       .debug_str	00000000 
00036c37 l       .debug_str	00000000 
00013389 l       .debug_str	00000000 
00036c5c l       .debug_str	00000000 
0000bf06 l       .debug_str	00000000 
00036ca9 l       .debug_str	00000000 
00013a79 l       .debug_str	00000000 
00036cfc l       .debug_str	00000000 
00036d37 l       .debug_str	00000000 
00036d42 l       .debug_str	00000000 
00019b45 l       .debug_str	00000000 
00036dce l       .debug_str	00000000 
000136d1 l       .debug_str	00000000 
00036e51 l       .debug_str	00000000 
00036ed9 l       .debug_str	00000000 
0001ffd5 l       .debug_str	00000000 
00036f4e l       .debug_str	00000000 
00036fd4 l       .debug_str	00000000 
00014a12 l       .debug_str	00000000 
00037049 l       .debug_str	00000000 
0000b6af l       .debug_str	00000000 
000370ac l       .debug_str	00000000 
0000abf6 l       .debug_str	00000000 
0003710e l       .debug_str	00000000 
0000a8e2 l       .debug_str	00000000 
00037154 l       .debug_str	00000000 
0003719c l       .debug_str	00000000 
000371a6 l       .debug_str	00000000 
000371e7 l       .debug_str	00000000 
00037201 l       .debug_str	00000000 
00024cd4 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
00037207 l       .debug_str	00000000 
00037210 l       .debug_str	00000000 
00037275 l       .debug_str	00000000 
00037284 l       .debug_str	00000000 
000372c6 l       .debug_str	00000000 
000372d0 l       .debug_str	00000000 
00037335 l       .debug_str	00000000 
00037377 l       .debug_str	00000000 
000373c1 l       .debug_str	00000000 
000373d0 l       .debug_str	00000000 
00037406 l       .debug_str	00000000 
0003740f l       .debug_str	00000000 
00016973 l       .debug_str	00000000 
00037419 l       .debug_str	00000000 
0003741c l       .debug_str	00000000 
00037454 l       .debug_str	00000000 
0003745e l       .debug_str	00000000 
000374a2 l       .debug_str	00000000 
000374b8 l       .debug_str	00000000 
00037501 l       .debug_str	00000000 
00013646 l       .debug_str	00000000 
00024cbf l       .debug_str	00000000 
00037546 l       .debug_str	00000000 
0003758f l       .debug_str	00000000 
0003759d l       .debug_str	00000000 
000375e5 l       .debug_str	00000000 
0002338d l       .debug_str	00000000 
0003762f l       .debug_str	00000000 
00040e07 l       .debug_str	00000000 
000376c7 l       .debug_str	00000000 
0005a679 l       .debug_str	00000000 
00037761 l       .debug_str	00000000 
0002387d l       .debug_str	00000000 
000377d3 l       .debug_str	00000000 
000235b0 l       .debug_str	00000000 
00037876 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
000378a8 l       .debug_str	00000000 
000378ef l       .debug_str	00000000 
000378fd l       .debug_str	00000000 
00037907 l       .debug_str	00000000 
00037955 l       .debug_str	00000000 
00037965 l       .debug_str	00000000 
000379b0 l       .debug_str	00000000 
000379be l       .debug_str	00000000 
00037a4c l       .debug_str	00000000 
00037a5b l       .debug_str	00000000 
0000bf55 l       .debug_str	00000000 
00037aa4 l       .debug_str	00000000 
0000befe l       .debug_str	00000000 
00037ae9 l       .debug_str	00000000 
00037b23 l       .debug_str	00000000 
00037b2c l       .debug_str	00000000 
00037b78 l       .debug_str	00000000 
00037b90 l       .debug_str	00000000 
00037bf2 l       .debug_str	00000000 
0000be4e l       .debug_str	00000000 
00037c27 l       .debug_str	00000000 
00037c4f l       .debug_str	00000000 
00037c87 l       .debug_str	00000000 
00037cb0 l       .debug_str	00000000 
00037cbb l       .debug_str	00000000 
0001a2a4 l       .debug_str	00000000 
00037ce0 l       .debug_str	00000000 
00037d6f l       .debug_str	00000000 
00037da6 l       .debug_str	00000000 
00037e2c l       .debug_str	00000000 
00037e7a l       .debug_str	00000000 
00037e83 l       .debug_str	00000000 
00037f09 l       .debug_str	00000000 
00037f1c l       .debug_str	00000000 
00037fa5 l       .debug_str	00000000 
00038001 l       .debug_str	00000000 
00038043 l       .debug_str	00000000 
000380f5 l       .debug_str	00000000 
00038134 l       .debug_str	00000000 
000381d9 l       .debug_str	00000000 
0003826d l       .debug_str	00000000 
00038293 l       .debug_str	00000000 
0003830f l       .debug_str	00000000 
0003834a l       .debug_str	00000000 
00038357 l       .debug_str	00000000 
00038390 l       .debug_str	00000000 
000383a8 l       .debug_str	00000000 
000383e8 l       .debug_str	00000000 
00033341 l       .debug_str	00000000 
000383f4 l       .debug_str	00000000 
00038451 l       .debug_str	00000000 
000384ae l       .debug_str	00000000 
0003855b l       .debug_str	00000000 
000385b8 l       .debug_str	00000000 
00015df2 l       .debug_str	00000000 
00038625 l       .debug_str	00000000 
00038689 l       .debug_str	00000000 
00038694 l       .debug_str	00000000 
000386c4 l       .debug_str	00000000 
000386f0 l       .debug_str	00000000 
0003875c l       .debug_str	00000000 
0003878c l       .debug_str	00000000 
000387c8 l       .debug_str	00000000 
00038812 l       .debug_str	00000000 
00038822 l       .debug_str	00000000 
00038857 l       .debug_str	00000000 
0003889c l       .debug_str	00000000 
000388a7 l       .debug_str	00000000 
000388e7 l       .debug_str	00000000 
000388f5 l       .debug_str	00000000 
00038981 l       .debug_str	00000000 
000389fd l       .debug_str	00000000 
00038a1d l       .debug_str	00000000 
00038a77 l       .debug_str	00000000 
00038a84 l       .debug_str	00000000 
00038abd l       .debug_str	00000000 
00038ac5 l       .debug_str	00000000 
00038b1a l       .debug_str	00000000 
00038b6c l       .debug_str	00000000 
00037a51 l       .debug_str	00000000 
00038bb3 l       .debug_str	00000000 
00038c27 l       .debug_str	00000000 
00038c6b l       .debug_str	00000000 
00038cb7 l       .debug_str	00000000 
00038cf6 l       .debug_str	00000000 
00038d1c l       .debug_str	00000000 
00038d2e l       .debug_str	00000000 
00038d38 l       .debug_str	00000000 
00038d7a l       .debug_str	00000000 
00003a03 l       .debug_str	00000000 
00038e01 l       .debug_str	00000000 
0002fa95 l       .debug_str	00000000 
00038e7d l       .debug_str	00000000 
00038ef4 l       .debug_str	00000000 
00038f42 l       .debug_str	00000000 
00003c53 l       .debug_str	00000000 
00038fd2 l       .debug_str	00000000 
0003900e l       .debug_str	00000000 
0003901b l       .debug_str	00000000 
00039061 l       .debug_str	00000000 
0003906e l       .debug_str	00000000 
00039db4 l       .debug_str	00000000 
000390a0 l       .debug_str	00000000 
000390f0 l       .debug_str	00000000 
00039107 l       .debug_str	00000000 
00039191 l       .debug_str	00000000 
0000aab7 l       .debug_str	00000000 
0003920d l       .debug_str	00000000 
00039221 l       .debug_str	00000000 
0003927e l       .debug_str	00000000 
0003928d l       .debug_str	00000000 
0003929e l       .debug_str	00000000 
000392f8 l       .debug_str	00000000 
00039307 l       .debug_str	00000000 
00039390 l       .debug_str	00000000 
0003939e l       .debug_str	00000000 
000393f4 l       .debug_str	00000000 
00039448 l       .debug_str	00000000 
000394c1 l       .debug_str	00000000 
000394d9 l       .debug_str	00000000 
000394e3 l       .debug_str	00000000 
0003957a l       .debug_str	00000000 
00039594 l       .debug_str	00000000 
0001cec1 l       .debug_str	00000000 
000395cd l       .debug_str	00000000 
00012b91 l       .debug_str	00000000 
00039632 l       .debug_str	00000000 
000396c9 l       .debug_str	00000000 
000396cd l       .debug_str	00000000 
000399c2 l       .debug_str	00000000 
000396d2 l       .debug_str	00000000 
0005f673 l       .debug_str	00000000 
0001338f l       .debug_str	00000000 
00039704 l       .debug_str	00000000 
000190c7 l       .debug_str	00000000 
00039742 l       .debug_str	00000000 
0000a888 l       .debug_str	00000000 
00039795 l       .debug_str	00000000 
00039821 l       .debug_str	00000000 
0003989d l       .debug_str	00000000 
000398bc l       .debug_str	00000000 
00039907 l       .debug_str	00000000 
00039914 l       .debug_str	00000000 
00039988 l       .debug_str	00000000 
0003dcc6 l       .debug_str	00000000 
0004f401 l       .debug_str	00000000 
000399a7 l       .debug_str	00000000 
000399c7 l       .debug_str	00000000 
000399e3 l       .debug_str	00000000 
000399ed l       .debug_str	00000000 
00039a79 l       .debug_str	00000000 
00039af5 l       .debug_str	00000000 
00039b26 l       .debug_str	00000000 
00039ba9 l       .debug_str	00000000 
00039bc9 l       .debug_str	00000000 
00039c4f l       .debug_str	00000000 
00039cc4 l       .debug_str	00000000 
000333dc l       .debug_str	00000000 
0005cc3f l       .debug_str	00000000 
00039d05 l       .debug_str	00000000 
00023943 l       .debug_str	00000000 
00039d50 l       .debug_str	00000000 
00039dac l       .debug_str	00000000 
00039db8 l       .debug_str	00000000 
00039e01 l       .debug_str	00000000 
00039e11 l       .debug_str	00000000 
00039e56 l       .debug_str	00000000 
00039e9f l       .debug_str	00000000 
00039ee4 l       .debug_str	00000000 
00039f40 l       .debug_str	00000000 
00039f8b l       .debug_str	00000000 
00039fd2 l       .debug_str	00000000 
0003a030 l       .debug_str	00000000 
0003a07b l       .debug_str	00000000 
0003a0c2 l       .debug_str	00000000 
0003a120 l       .debug_str	00000000 
0003a16b l       .debug_str	00000000 
0003a1b2 l       .debug_str	00000000 
0003a210 l       .debug_str	00000000 
0003a259 l       .debug_str	00000000 
0003a29e l       .debug_str	00000000 
0003a2fa l       .debug_str	00000000 
0003a343 l       .debug_str	00000000 
0003a388 l       .debug_str	00000000 
0003a3e4 l       .debug_str	00000000 
0003a42e l       .debug_str	00000000 
0003a474 l       .debug_str	00000000 
0003a4d1 l       .debug_str	00000000 
0003a51b l       .debug_str	00000000 
0003a561 l       .debug_str	00000000 
0003a5be l       .debug_str	00000000 
0003a619 l       .debug_str	00000000 
0003a661 l       .debug_str	00000000 
0003a6a5 l       .debug_str	00000000 
0003a6ed l       .debug_str	00000000 
0003a731 l       .debug_str	00000000 
0003a78c l       .debug_str	00000000 
0003a7d5 l       .debug_str	00000000 
0003a81a l       .debug_str	00000000 
0003a876 l       .debug_str	00000000 
0003a8bf l       .debug_str	00000000 
0003a904 l       .debug_str	00000000 
0003a960 l       .debug_str	00000000 
0003a9a9 l       .debug_str	00000000 
0003a9ee l       .debug_str	00000000 
0003aa4a l       .debug_str	00000000 
0003aa94 l       .debug_str	00000000 
0003aada l       .debug_str	00000000 
0003ab37 l       .debug_str	00000000 
0003ab81 l       .debug_str	00000000 
0003abc7 l       .debug_str	00000000 
0003ac24 l       .debug_str	00000000 
0003ac6e l       .debug_str	00000000 
0003acb4 l       .debug_str	00000000 
0003ad11 l       .debug_str	00000000 
0003ad6c l       .debug_str	00000000 
0003adb4 l       .debug_str	00000000 
0003adf8 l       .debug_str	00000000 
0003ae40 l       .debug_str	00000000 
0003ae84 l       .debug_str	00000000 
0003aedf l       .debug_str	00000000 
0003af3a l       .debug_str	00000000 
0003af82 l       .debug_str	00000000 
0003afc6 l       .debug_str	00000000 
0003b00f l       .debug_str	00000000 
0003b054 l       .debug_str	00000000 
0003b0b0 l       .debug_str	00000000 
0003b10c l       .debug_str	00000000 
0003b155 l       .debug_str	00000000 
0003b19a l       .debug_str	00000000 
0003b1f6 l       .debug_str	00000000 
0003b23f l       .debug_str	00000000 
0003b284 l       .debug_str	00000000 
0003b2e0 l       .debug_str	00000000 
0003b329 l       .debug_str	00000000 
0003b36e l       .debug_str	00000000 
00023463 l       .debug_str	00000000 
0003b3ca l       .debug_str	00000000 
0003b409 l       .debug_str	00000000 
0003b43e l       .debug_str	00000000 
0000582c l       .debug_str	00000000 
000134dd l       .debug_str	00000000 
0001362d l       .debug_str	00000000 
0003b448 l       .debug_str	00000000 
000155f3 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
0003b482 l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
0003b514 l       .debug_str	00000000 
00014b1f l       .debug_str	00000000 
0003b54d l       .debug_str	00000000 
00014006 l       .debug_str	00000000 
0003b574 l       .debug_str	00000000 
00013f52 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0003b5ae l       .debug_str	00000000 
00013cd1 l       .debug_str	00000000 
0003b5d4 l       .debug_str	00000000 
00013a18 l       .debug_str	00000000 
0003b62e l       .debug_str	00000000 
0001442c l       .debug_str	00000000 
0003b6c8 l       .debug_str	00000000 
0001363c l       .debug_str	00000000 
0003b751 l       .debug_str	00000000 
0003b7f8 l       .debug_str	00000000 
0003b831 l       .debug_str	00000000 
0003b8a6 l       .debug_str	00000000 
0003b8cf l       .debug_str	00000000 
0002c737 l       .debug_str	00000000 
0003b904 l       .debug_str	00000000 
0003b940 l       .debug_str	00000000 
0003b951 l       .debug_str	00000000 
0003b98a l       .debug_str	00000000 
00012c2c l       .debug_str	00000000 
0003b997 l       .debug_str	00000000 
0003b9a6 l       .debug_str	00000000 
0003727d l       .debug_str	00000000 
0003b9ef l       .debug_str	00000000 
0003ba22 l       .debug_str	00000000 
0003ba2f l       .debug_str	00000000 
00060932 l       .debug_str	00000000 
0003ba7a l       .debug_str	00000000 
0003bad2 l       .debug_str	00000000 
0003bae7 l       .debug_str	00000000 
0003bb1d l       .debug_str	00000000 
0003bb28 l       .debug_str	00000000 
0002c845 l       .debug_str	00000000 
0003bb87 l       .debug_str	00000000 
0003bbfa l       .debug_str	00000000 
0003bc61 l       .debug_str	00000000 
0003bc81 l       .debug_str	00000000 
0003bcc0 l       .debug_str	00000000 
0003bcdf l       .debug_str	00000000 
00000ad8 l       .debug_str	00000000 
0003bd52 l       .debug_str	00000000 
0003bdcf l       .debug_str	00000000 
0003be34 l       .debug_str	00000000 
0003be94 l       .debug_str	00000000 
0003bf07 l       .debug_str	00000000 
0003bf84 l       .debug_str	00000000 
00015788 l       .debug_str	00000000 
0003bffc l       .debug_str	00000000 
0003c071 l       .debug_str	00000000 
0003c0eb l       .debug_str	00000000 
0001168a l       .debug_str	00000000 
00011695 l       .debug_str	00000000 
0003c14b l       .debug_str	00000000 
0005e920 l       .debug_str	00000000 
0003c189 l       .debug_str	00000000 
0003c1cb l       .debug_str	00000000 
0003c1f6 l       .debug_str	00000000 
0003c237 l       .debug_str	00000000 
0003c241 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
0005f7da l       .debug_str	00000000 
0005a0c0 l       .debug_str	00000000 
00000e1d l       .debug_str	00000000 
0003c29d l       .debug_str	00000000 
0000146f l       .debug_str	00000000 
0003c2d9 l       .debug_str	00000000 
00001412 l       .debug_str	00000000 
0003c320 l       .debug_str	00000000 
0003c37e l       .debug_str	00000000 
00033cad l       .debug_str	00000000 
0003c3d5 l       .debug_str	00000000 
0003c42f l       .debug_str	00000000 
0003c439 l       .debug_str	00000000 
00012bfa l       .debug_str	00000000 
00012bff l       .debug_str	00000000 
0003c47c l       .debug_str	00000000 
0003c4b2 l       .debug_str	00000000 
0003c4c2 l       .debug_str	00000000 
0003c4d1 l       .debug_str	00000000 
0003c4dc l       .debug_str	00000000 
00033d93 l       .debug_str	00000000 
0003c516 l       .debug_str	00000000 
0003c55f l       .debug_str	00000000 
00025488 l       .debug_str	00000000 
0003c5a6 l       .debug_str	00000000 
0003c5e1 l       .debug_str	00000000 
0003c606 l       .debug_str	00000000 
0003c672 l       .debug_str	00000000 
0003c685 l       .debug_str	00000000 
0003c6fc l       .debug_str	00000000 
0003c707 l       .debug_str	00000000 
0003c744 l       .debug_str	00000000 
0003c74f l       .debug_str	00000000 
0003c7d0 l       .debug_str	00000000 
0003c816 l       .debug_str	00000000 
0003c83d l       .debug_str	00000000 
0003c86c l       .debug_str	00000000 
0003c87d l       .debug_str	00000000 
0001357f l       .debug_str	00000000 
0003c8d9 l       .debug_str	00000000 
0003c90a l       .debug_str	00000000 
0001b2bd l       .debug_str	00000000 
0003c952 l       .debug_str	00000000 
0001f81e l       .debug_str	00000000 
0003c990 l       .debug_str	00000000 
0003c9d4 l       .debug_str	00000000 
0003ca27 l       .debug_str	00000000 
000394c2 l       .debug_str	00000000 
0003ca9f l       .debug_str	00000000 
0003caee l       .debug_str	00000000 
0003cb84 l       .debug_str	00000000 
0003cbc8 l       .debug_str	00000000 
00040906 l       .debug_str	00000000 
0003cc40 l       .debug_str	00000000 
0003cc8f l       .debug_str	00000000 
0003cd25 l       .debug_str	00000000 
0003cd3f l       .debug_str	00000000 
0003cd8e l       .debug_str	00000000 
0003cdc7 l       .debug_str	00000000 
0003cde2 l       .debug_str	00000000 
000151aa l       .debug_str	00000000 
0003ce46 l       .debug_str	00000000 
00014ab6 l       .debug_str	00000000 
0003cebf l       .debug_str	00000000 
0002219c l       .debug_str	00000000 
0003cf30 l       .debug_str	00000000 
0003cfc6 l       .debug_str	00000000 
0003d05e l       .debug_str	00000000 
0003d0d0 l       .debug_str	00000000 
0003d0f8 l       .debug_str	00000000 
0001a551 l       .debug_str	00000000 
0003d1b0 l       .debug_str	00000000 
00023da1 l       .debug_str	00000000 
0003d1f5 l       .debug_str	00000000 
0003d2ab l       .debug_str	00000000 
0003d2f0 l       .debug_str	00000000 
00002b77 l       .debug_str	00000000 
0003d332 l       .debug_str	00000000 
0003d38d l       .debug_str	00000000 
0003d392 l       .debug_str	00000000 
0003d3eb l       .debug_str	00000000 
0003d41f l       .debug_str	00000000 
0003d433 l       .debug_str	00000000 
0003d46e l       .debug_str	00000000 
0003d4b0 l       .debug_str	00000000 
0003d4c6 l       .debug_str	00000000 
0003d532 l       .debug_str	00000000 
0001168e l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
0003d574 l       .debug_str	00000000 
0003d5b4 l       .debug_str	00000000 
0003d60e l       .debug_str	00000000 
0003d650 l       .debug_str	00000000 
0003d6ab l       .debug_str	00000000 
0003d6ed l       .debug_str	00000000 
0003d6f8 l       .debug_str	00000000 
0003d738 l       .debug_str	00000000 
0003d73e l       .debug_str	00000000 
0003d798 l       .debug_str	00000000 
0003d7a1 l       .debug_str	00000000 
0003d7e3 l       .debug_str	00000000 
0003d83b l       .debug_str	00000000 
0003d87d l       .debug_str	00000000 
0003d8d6 l       .debug_str	00000000 
0003d8e0 l       .debug_str	00000000 
0003d8e8 l       .debug_str	00000000 
0003d8f1 l       .debug_str	00000000 
0003d8e4 l       .debug_str	00000000 
0003d933 l       .debug_str	00000000 
0003d988 l       .debug_str	00000000 
0003d9c5 l       .debug_str	00000000 
0003da07 l       .debug_str	00000000 
0003da5e l       .debug_str	00000000 
0003daa0 l       .debug_str	00000000 
0003daf8 l       .debug_str	00000000 
0003db30 l       .debug_str	00000000 
0003db3c l       .debug_str	00000000 
0003db79 l       .debug_str	00000000 
0003dbdb l       .debug_str	00000000 
0003dc1c l       .debug_str	00000000 
0003dc25 l       .debug_str	00000000 
0003dc83 l       .debug_str	00000000 
0003dcbc l       .debug_str	00000000 
0003dccb l       .debug_str	00000000 
0003dd0a l       .debug_str	00000000 
0003dd1f l       .debug_str	00000000 
0003dd65 l       .debug_str	00000000 
0003dd72 l       .debug_str	00000000 
0003dd78 l       .debug_str	00000000 
0003ddb1 l       .debug_str	00000000 
0003de3d l       .debug_str	00000000 
0003de79 l       .debug_str	00000000 
00059caf l       .debug_str	00000000 
0003de8b l       .debug_str	00000000 
0003dec3 l       .debug_str	00000000 
0003decf l       .debug_str	00000000 
0003df0c l       .debug_str	00000000 
0003df6e l       .debug_str	00000000 
0003dfaf l       .debug_str	00000000 
0003e00d l       .debug_str	00000000 
0003e047 l       .debug_str	00000000 
0003e0a1 l       .debug_str	00000000 
0003e0ea l       .debug_str	00000000 
0003e0fa l       .debug_str	00000000 
0003e133 l       .debug_str	00000000 
0003e1b5 l       .debug_str	00000000 
0003e1ef l       .debug_str	00000000 
0003e249 l       .debug_str	00000000 
0003e284 l       .debug_str	00000000 
0003e2e4 l       .debug_str	00000000 
0003e31f l       .debug_str	00000000 
0003e37f l       .debug_str	00000000 
0003e3bd l       .debug_str	00000000 
0003e41b l       .debug_str	00000000 
0003e459 l       .debug_str	00000000 
0003e4b7 l       .debug_str	00000000 
0003e502 l       .debug_str	00000000 
0003e50b l       .debug_str	00000000 
0003e55a l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
0003e566 l       .debug_str	00000000 
0003e597 l       .debug_str	00000000 
0003e5c2 l       .debug_str	00000000 
0003e610 l       .debug_str	00000000 
000135b0 l       .debug_str	00000000 
0003e617 l       .debug_str	00000000 
0003e67c l       .debug_str	00000000 
0003e6ad l       .debug_str	00000000 
0003e6b5 l       .debug_str	00000000 
00013c2e l       .debug_str	00000000 
0003e6e6 l       .debug_str	00000000 
0003e73f l       .debug_str	00000000 
0003e7cd l       .debug_str	00000000 
0003e819 l       .debug_str	00000000 
0003e83e l       .debug_str	00000000 
0003e85b l       .debug_str	00000000 
0003e885 l       .debug_str	00000000 
0001a4e4 l       .debug_str	00000000 
0001a59f l       .debug_str	00000000 
0001a61b l       .debug_str	00000000 
0003e8a7 l       .debug_str	00000000 
0003e8f4 l       .debug_str	00000000 
0003e939 l       .debug_str	00000000 
0003e978 l       .debug_str	00000000 
0003e9c4 l       .debug_str	00000000 
0003ea53 l       .debug_str	00000000 
0003eaa0 l       .debug_str	00000000 
0003eb26 l       .debug_str	00000000 
0005bbb1 l       .debug_str	00000000 
0003eb4b l       .debug_str	00000000 
0003eb75 l       .debug_str	00000000 
0003eb7e l       .debug_str	00000000 
0003ebb4 l       .debug_str	00000000 
0003ebbd l       .debug_str	00000000 
0003ec4b l       .debug_str	00000000 
0003ec91 l       .debug_str	00000000 
0003ecb0 l       .debug_str	00000000 
0003ecc7 l       .debug_str	00000000 
0003eceb l       .debug_str	00000000 
0003ed07 l       .debug_str	00000000 
0003ed4e l       .debug_str	00000000 
0003ed93 l       .debug_str	00000000 
0003edd2 l       .debug_str	00000000 
0003ee18 l       .debug_str	00000000 
0003eea7 l       .debug_str	00000000 
0003eeee l       .debug_str	00000000 
0003ef74 l       .debug_str	00000000 
0003efa9 l       .debug_str	00000000 
0003efb3 l       .debug_str	00000000 
0005abca l       .debug_str	00000000 
0003f01e l       .debug_str	00000000 
0003f053 l       .debug_str	00000000 
0003f05d l       .debug_str	00000000 
0003f090 l       .debug_str	00000000 
0003f098 l       .debug_str	00000000 
0003f0cc l       .debug_str	00000000 
0003f0de l       .debug_str	00000000 
0003f118 l       .debug_str	00000000 
0003f136 l       .debug_str	00000000 
0003f15c l       .debug_str	00000000 
0003f167 l       .debug_str	00000000 
0003f190 l       .debug_str	00000000 
0003f19e l       .debug_str	00000000 
0003f1d8 l       .debug_str	00000000 
0003f20e l       .debug_str	00000000 
0003f234 l       .debug_str	00000000 
0003f257 l       .debug_str	00000000 
0003f280 l       .debug_str	00000000 
0003f2a6 l       .debug_str	00000000 
0003f2e4 l       .debug_str	00000000 
0003f2fe l       .debug_str	00000000 
0003f33c l       .debug_str	00000000 
0003f36e l       .debug_str	00000000 
0003f37a l       .debug_str	00000000 
00061346 l       .debug_str	00000000 
0003f3ae l       .debug_str	00000000 
0003f3bb l       .debug_str	00000000 
00023248 l       .debug_str	00000000 
0003f3ed l       .debug_str	00000000 
0003f457 l       .debug_str	00000000 
0003f4c7 l       .debug_str	00000000 
0003f52e l       .debug_str	00000000 
0003f54b l       .debug_str	00000000 
0003f58a l       .debug_str	00000000 
0003f5a6 l       .debug_str	00000000 
0002320a l       .debug_str	00000000 
0003f5d4 l       .debug_str	00000000 
000232e6 l       .debug_str	00000000 
0003f609 l       .debug_str	00000000 
0003f645 l       .debug_str	00000000 
0003f66b l       .debug_str	00000000 
0003f6aa l       .debug_str	00000000 
0003f6ba l       .debug_str	00000000 
0003f71e l       .debug_str	00000000 
0003f755 l       .debug_str	00000000 
0003f76b l       .debug_str	00000000 
0003f7ba l       .debug_str	00000000 
0003f7c6 l       .debug_str	00000000 
0003f898 l       .debug_str	00000000 
0003f80d l       .debug_str	00000000 
0003f893 l       .debug_str	00000000 
0003f8b7 l       .debug_str	00000000 
0003f8f2 l       .debug_str	00000000 
0003f902 l       .debug_str	00000000 
0006126e l       .debug_str	00000000 
0003f943 l       .debug_str	00000000 
0003f97d l       .debug_str	00000000 
0003f98c l       .debug_str	00000000 
0003f9c5 l       .debug_str	00000000 
0003f9d3 l       .debug_str	00000000 
0003fa0c l       .debug_str	00000000 
0003fa1a l       .debug_str	00000000 
0003fa6a l       .debug_str	00000000 
0003fa77 l       .debug_str	00000000 
0003faed l       .debug_str	00000000 
0003faf8 l       .debug_str	00000000 
0003fb0a l       .debug_str	00000000 
0003fb56 l       .debug_str	00000000 
0003fb73 l       .debug_str	00000000 
0003fc07 l       .debug_str	00000000 
0003fc9d l       .debug_str	00000000 
0003fd0f l       .debug_str	00000000 
0003fd35 l       .debug_str	00000000 
0003fdd4 l       .debug_str	00000000 
0003fe45 l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
0003fe8a l       .debug_str	00000000 
0003feed l       .debug_str	00000000 
0003ff10 l       .debug_str	00000000 
0003ff64 l       .debug_str	00000000 
0003ff7b l       .debug_str	00000000 
00024da1 l       .debug_str	00000000 
0003ffc8 l       .debug_str	00000000 
0003ffd5 l       .debug_str	00000000 
00040010 l       .debug_str	00000000 
00040038 l       .debug_str	00000000 
0004009a l       .debug_str	00000000 
0003bb22 l       .debug_str	00000000 
00040103 l       .debug_str	00000000 
00042931 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00033184 l       .debug_str	00000000 
00033195 l       .debug_str	00000000 
00040150 l       .debug_str	00000000 
0000b1cc l       .debug_str	00000000 
0004019b l       .debug_str	00000000 
0004021e l       .debug_str	00000000 
0004024e l       .debug_str	00000000 
000402d6 l       .debug_str	00000000 
0004034b l       .debug_str	00000000 
0004039e l       .debug_str	00000000 
0004042a l       .debug_str	00000000 
00040462 l       .debug_str	00000000 
000404b7 l       .debug_str	00000000 
000404e8 l       .debug_str	00000000 
0004053a l       .debug_str	00000000 
00040568 l       .debug_str	00000000 
000405bc l       .debug_str	00000000 
000405e2 l       .debug_str	00000000 
0001f76a l       .debug_str	00000000 
00040619 l       .debug_str	00000000 
00040664 l       .debug_str	00000000 
00040680 l       .debug_str	00000000 
000406d6 l       .debug_str	00000000 
0001f8b1 l       .debug_str	00000000 
0004074f l       .debug_str	00000000 
0004079f l       .debug_str	00000000 
00040836 l       .debug_str	00000000 
0004088c l       .debug_str	00000000 
00040905 l       .debug_str	00000000 
0004091d l       .debug_str	00000000 
000409b4 l       .debug_str	00000000 
000409ed l       .debug_str	00000000 
00040c1d l       .debug_str	00000000 
00040a36 l       .debug_str	00000000 
0003f8fe l       .debug_str	00000000 
00040a73 l       .debug_str	00000000 
00040ab7 l       .debug_str	00000000 
00040b02 l       .debug_str	00000000 
00040b42 l       .debug_str	00000000 
00040b6c l       .debug_str	00000000 
00040bb5 l       .debug_str	00000000 
00040bc4 l       .debug_str	00000000 
00040c15 l       .debug_str	00000000 
00040c2c l       .debug_str	00000000 
0004aecc l       .debug_str	00000000 
0005c46b l       .debug_str	00000000 
00040c93 l       .debug_str	00000000 
00040cf4 l       .debug_str	00000000 
00040d13 l       .debug_str	00000000 
00040d1c l       .debug_str	00000000 
00040d28 l       .debug_str	00000000 
000168d2 l       .debug_str	00000000 
00040d2e l       .debug_str	00000000 
00040d38 l       .debug_str	00000000 
00040d6a l       .debug_str	00000000 
00040d7a l       .debug_str	00000000 
00040e02 l       .debug_str	00000000 
00040e0b l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00040e78 l       .debug_str	00000000 
00040eb7 l       .debug_str	00000000 
00015cfa l       .debug_str	00000000 
00015d06 l       .debug_str	00000000 
00015d10 l       .debug_str	00000000 
00040ec6 l       .debug_str	00000000 
00040f36 l       .debug_str	00000000 
00040f5b l       .debug_str	00000000 
00040fca l       .debug_str	00000000 
00040ff0 l       .debug_str	00000000 
0004105f l       .debug_str	00000000 
00041089 l       .debug_str	00000000 
000410c0 l       .debug_str	00000000 
000410cb l       .debug_str	00000000 
00041107 l       .debug_str	00000000 
00041126 l       .debug_str	00000000 
00041160 l       .debug_str	00000000 
0004119b l       .debug_str	00000000 
000411d7 l       .debug_str	00000000 
0000e68b l       .debug_str	00000000 
000411f1 l       .debug_str	00000000 
0004122d l       .debug_str	00000000 
0004123a l       .debug_str	00000000 
00059f26 l       .debug_str	00000000 
00041278 l       .debug_str	00000000 
000412be l       .debug_str	00000000 
00041346 l       .debug_str	00000000 
0004135f l       .debug_str	00000000 
000413b9 l       .debug_str	00000000 
000413ff l       .debug_str	00000000 
00041417 l       .debug_str	00000000 
00041497 l       .debug_str	00000000 
0004196b l       .debug_str	00000000 
000414a7 l       .debug_str	00000000 
000414e6 l       .debug_str	00000000 
00041526 l       .debug_str	00000000 
000415b0 l       .debug_str	00000000 
000415c7 l       .debug_str	00000000 
00041618 l       .debug_str	00000000 
00041626 l       .debug_str	00000000 
0004162b l       .debug_str	00000000 
00041686 l       .debug_str	00000000 
00042040 l       .debug_str	00000000 
000416dd l       .debug_str	00000000 
00041710 l       .debug_str	00000000 
00041757 l       .debug_str	00000000 
00041791 l       .debug_str	00000000 
000417c0 l       .debug_str	00000000 
0004183e l       .debug_str	00000000 
000418c2 l       .debug_str	00000000 
0004194f l       .debug_str	00000000 
00041964 l       .debug_str	00000000 
00041974 l       .debug_str	00000000 
000419c0 l       .debug_str	00000000 
00041a05 l       .debug_str	00000000 
00041a9c l       .debug_str	00000000 
00041ab8 l       .debug_str	00000000 
00041aff l       .debug_str	00000000 
00041b2d l       .debug_str	00000000 
00041b66 l       .debug_str	00000000 
00041b88 l       .debug_str	00000000 
00019825 l       .debug_str	00000000 
00041c06 l       .debug_str	00000000 
00041c86 l       .debug_str	00000000 
00041cc5 l       .debug_str	00000000 
00041d4f l       .debug_str	00000000 
00041d9b l       .debug_str	00000000 
00041db9 l       .debug_str	00000000 
00041dc4 l       .debug_str	00000000 
00041e26 l       .debug_str	00000000 
00041e7d l       .debug_str	00000000 
00041f0a l       .debug_str	00000000 
00041f56 l       .debug_str	00000000 
00041fed l       .debug_str	00000000 
00042037 l       .debug_str	00000000 
00042053 l       .debug_str	00000000 
000420ad l       .debug_str	00000000 
000420b6 l       .debug_str	00000000 
00042115 l       .debug_str	00000000 
0004216c l       .debug_str	00000000 
000421c5 l       .debug_str	00000000 
000421da l       .debug_str	00000000 
00042227 l       .debug_str	00000000 
00042272 l       .debug_str	00000000 
00042285 l       .debug_str	00000000 
0001e318 l       .debug_str	00000000 
000197d7 l       .debug_str	00000000 
000422d0 l       .debug_str	00000000 
000422e5 l       .debug_str	00000000 
000422f1 l       .debug_str	00000000 
00042336 l       .debug_str	00000000 
0004238f l       .debug_str	00000000 
000423a4 l       .debug_str	00000000 
000423f1 l       .debug_str	00000000 
0004243c l       .debug_str	00000000 
0004244f l       .debug_str	00000000 
0004249a l       .debug_str	00000000 
000424ad l       .debug_str	00000000 
00042511 l       .debug_str	00000000 
0004254a l       .debug_str	00000000 
00042576 l       .debug_str	00000000 
0005ff9b l       .debug_str	00000000 
0005b360 l       .debug_str	00000000 
000425f5 l       .debug_str	00000000 
000425fb l       .debug_str	00000000 
00042604 l       .debug_str	00000000 
0004263c l       .debug_str	00000000 
00042659 l       .debug_str	00000000 
00042695 l       .debug_str	00000000 
000426b2 l       .debug_str	00000000 
0004270e l       .debug_str	00000000 
00042746 l       .debug_str	00000000 
000427a2 l       .debug_str	00000000 
00025428 l       .debug_str	00000000 
000427da l       .debug_str	00000000 
00042818 l       .debug_str	00000000 
00042834 l       .debug_str	00000000 
0004288a l       .debug_str	00000000 
000428f1 l       .debug_str	00000000 
00042929 l       .debug_str	00000000 
00042935 l       .debug_str	00000000 
0004299c l       .debug_str	00000000 
000429db l       .debug_str	00000000 
000429ec l       .debug_str	00000000 
00042a25 l       .debug_str	00000000 
000509cd l       .debug_str	00000000 
00042a40 l       .debug_str	00000000 
00042a7c l       .debug_str	00000000 
00042a75 l       .debug_str	00000000 
00042a85 l       .debug_str	00000000 
00042a97 l       .debug_str	00000000 
00042ae2 l       .debug_str	00000000 
00042afa l       .debug_str	00000000 
00042b04 l       .debug_str	00000000 
00042b1b l       .debug_str	00000000 
00042b2a l       .debug_str	00000000 
00042b6c l       .debug_str	00000000 
00042b85 l       .debug_str	00000000 
00042bf9 l       .debug_str	00000000 
00042c08 l       .debug_str	00000000 
00042c41 l       .debug_str	00000000 
00042c57 l       .debug_str	00000000 
00042c97 l       .debug_str	00000000 
00042ca2 l       .debug_str	00000000 
00042d21 l       .debug_str	00000000 
0005aad9 l       .debug_str	00000000 
00042d40 l       .debug_str	00000000 
00042d55 l       .debug_str	00000000 
00042d5f l       .debug_str	00000000 
00019e52 l       .debug_str	00000000 
00042d64 l       .debug_str	00000000 
00042d95 l       .debug_str	00000000 
00042da8 l       .debug_str	00000000 
00042db2 l       .debug_str	00000000 
00042dcf l       .debug_str	00000000 
00042e0a l       .debug_str	00000000 
00042e3f l       .debug_str	00000000 
00042e70 l       .debug_str	00000000 
00042e84 l       .debug_str	00000000 
00042e8f l       .debug_str	00000000 
00042ead l       .debug_str	00000000 
00042ee8 l       .debug_str	00000000 
00042f1e l       .debug_str	00000000 
00042f4f l       .debug_str	00000000 
00042f63 l       .debug_str	00000000 
00042f6e l       .debug_str	00000000 
00042f8c l       .debug_str	00000000 
00042fc7 l       .debug_str	00000000 
00042ffd l       .debug_str	00000000 
0004302e l       .debug_str	00000000 
00043042 l       .debug_str	00000000 
0004304d l       .debug_str	00000000 
0004306b l       .debug_str	00000000 
000430a6 l       .debug_str	00000000 
000430dc l       .debug_str	00000000 
0004310d l       .debug_str	00000000 
0004795a l       .debug_str	00000000 
00043122 l       .debug_str	00000000 
0004312e l       .debug_str	00000000 
0004314d l       .debug_str	00000000 
00043188 l       .debug_str	00000000 
000431bf l       .debug_str	00000000 
000431f0 l       .debug_str	00000000 
00043203 l       .debug_str	00000000 
0004320d l       .debug_str	00000000 
0004322a l       .debug_str	00000000 
00043265 l       .debug_str	00000000 
0004329a l       .debug_str	00000000 
000432cb l       .debug_str	00000000 
000432df l       .debug_str	00000000 
000432ea l       .debug_str	00000000 
00043308 l       .debug_str	00000000 
00043343 l       .debug_str	00000000 
00043379 l       .debug_str	00000000 
000433aa l       .debug_str	00000000 
000433be l       .debug_str	00000000 
0004342d l       .debug_str	00000000 
00043468 l       .debug_str	00000000 
000434b1 l       .debug_str	00000000 
000434f6 l       .debug_str	00000000 
00043552 l       .debug_str	00000000 
0004359b l       .debug_str	00000000 
000435e0 l       .debug_str	00000000 
0004363c l       .debug_str	00000000 
00043685 l       .debug_str	00000000 
000436ca l       .debug_str	00000000 
00043726 l       .debug_str	00000000 
00043731 l       .debug_str	00000000 
0004374f l       .debug_str	00000000 
0004378a l       .debug_str	00000000 
000437c0 l       .debug_str	00000000 
000437f1 l       .debug_str	00000000 
00043805 l       .debug_str	00000000 
00043810 l       .debug_str	00000000 
0004382e l       .debug_str	00000000 
00043869 l       .debug_str	00000000 
0004389f l       .debug_str	00000000 
0004390e l       .debug_str	00000000 
00043949 l       .debug_str	00000000 
0004397a l       .debug_str	00000000 
0004398f l       .debug_str	00000000 
00043994 l       .debug_str	00000000 
000439a0 l       .debug_str	00000000 
000439bf l       .debug_str	00000000 
000439fa l       .debug_str	00000000 
00043a31 l       .debug_str	00000000 
00043aa0 l       .debug_str	00000000 
00043adc l       .debug_str	00000000 
0000a989 l       .debug_str	00000000 
00043b25 l       .debug_str	00000000 
00043b30 l       .debug_str	00000000 
00043b77 l       .debug_str	00000000 
00043b81 l       .debug_str	00000000 
00043c03 l       .debug_str	00000000 
00043c20 l       .debug_str	00000000 
00016cbf l       .debug_str	00000000 
00043c7b l       .debug_str	00000000 
00043cd5 l       .debug_str	00000000 
00043ce2 l       .debug_str	00000000 
00043d54 l       .debug_str	00000000 
00043db8 l       .debug_str	00000000 
00043dc3 l       .debug_str	00000000 
00043e3c l       .debug_str	00000000 
00043e48 l       .debug_str	00000000 
00043ec4 l       .debug_str	00000000 
00043eca l       .debug_str	00000000 
00043ed1 l       .debug_str	00000000 
00043f0d l       .debug_str	00000000 
000141b0 l       .debug_str	00000000 
00043f56 l       .debug_str	00000000 
00043f9a l       .debug_str	00000000 
00043fe5 l       .debug_str	00000000 
00044024 l       .debug_str	00000000 
00044049 l       .debug_str	00000000 
0004409f l       .debug_str	00000000 
0004410d l       .debug_str	00000000 
0004418d l       .debug_str	00000000 
000441fa l       .debug_str	00000000 
00044285 l       .debug_str	00000000 
000442f9 l       .debug_str	00000000 
00044339 l       .debug_str	00000000 
000443ba l       .debug_str	00000000 
000443fb l       .debug_str	00000000 
0004445f l       .debug_str	00000000 
0004450e l       .debug_str	00000000 
00044558 l       .debug_str	00000000 
000445a5 l       .debug_str	00000000 
000445eb l       .debug_str	00000000 
000445f5 l       .debug_str	00000000 
0004462e l       .debug_str	00000000 
0004465d l       .debug_str	00000000 
000446be l       .debug_str	00000000 
000446ed l       .debug_str	00000000 
0004472a l       .debug_str	00000000 
000447b9 l       .debug_str	00000000 
000447ee l       .debug_str	00000000 
00044874 l       .debug_str	00000000 
000448fa l       .debug_str	00000000 
0004494e l       .debug_str	00000000 
000449d7 l       .debug_str	00000000 
000196ee l       .debug_str	00000000 
00044a25 l       .debug_str	00000000 
00044ab3 l       .debug_str	00000000 
00044b07 l       .debug_str	00000000 
00044b46 l       .debug_str	00000000 
00044b91 l       .debug_str	00000000 
00044c13 l       .debug_str	00000000 
00044c2f l       .debug_str	00000000 
00044c88 l       .debug_str	00000000 
00044ce1 l       .debug_str	00000000 
00044d1e l       .debug_str	00000000 
00044d5f l       .debug_str	00000000 
00044dc0 l       .debug_str	00000000 
00044e31 l       .debug_str	00000000 
00044e61 l       .debug_str	00000000 
00044ea7 l       .debug_str	00000000 
00044f19 l       .debug_str	00000000 
00044fad l       .debug_str	00000000 
00044fd1 l       .debug_str	00000000 
0004504d l       .debug_str	00000000 
00045087 l       .debug_str	00000000 
000450c9 l       .debug_str	00000000 
00045179 l       .debug_str	00000000 
000451b8 l       .debug_str	00000000 
0004525b l       .debug_str	00000000 
000452b7 l       .debug_str	00000000 
00045314 l       .debug_str	00000000 
000453bf l       .debug_str	00000000 
000453f8 l       .debug_str	00000000 
00045474 l       .debug_str	00000000 
000454ac l       .debug_str	00000000 
000454b8 l       .debug_str	00000000 
000454f5 l       .debug_str	00000000 
0004554d l       .debug_str	00000000 
0004556d l       .debug_str	00000000 
000455c6 l       .debug_str	00000000 
0004561f l       .debug_str	00000000 
00045678 l       .debug_str	00000000 
000456d2 l       .debug_str	00000000 
00045708 l       .debug_str	00000000 
00045718 l       .debug_str	00000000 
00045727 l       .debug_str	00000000 
00045730 l       .debug_str	00000000 
00045767 l       .debug_str	00000000 
000457a3 l       .debug_str	00000000 
000457b3 l       .debug_str	00000000 
0004580f l       .debug_str	00000000 
00045871 l       .debug_str	00000000 
00038a80 l       .debug_str	00000000 
000458bb l       .debug_str	00000000 
000458f6 l       .debug_str	00000000 
0004591b l       .debug_str	00000000 
0004597a l       .debug_str	00000000 
000459c4 l       .debug_str	00000000 
000459ff l       .debug_str	00000000 
00045a24 l       .debug_str	00000000 
00045a83 l       .debug_str	00000000 
00045aec l       .debug_str	00000000 
00045af5 l       .debug_str	00000000 
00045b2c l       .debug_str	00000000 
00045b88 l       .debug_str	00000000 
00045bea l       .debug_str	00000000 
00045c49 l       .debug_str	00000000 
00045ca8 l       .debug_str	00000000 
00045cde l       .debug_str	00000000 
00045cef l       .debug_str	00000000 
00045cff l       .debug_str	00000000 
00045d09 l       .debug_str	00000000 
00045d41 l       .debug_str	00000000 
00045d9e l       .debug_str	00000000 
00045e01 l       .debug_str	00000000 
00045e4c l       .debug_str	00000000 
00045e87 l       .debug_str	00000000 
00045ead l       .debug_str	00000000 
00045f0d l       .debug_str	00000000 
00045f58 l       .debug_str	00000000 
00045f93 l       .debug_str	00000000 
00045fb9 l       .debug_str	00000000 
00046019 l       .debug_str	00000000 
0004604f l       .debug_str	00000000 
00046060 l       .debug_str	00000000 
00046070 l       .debug_str	00000000 
0004607a l       .debug_str	00000000 
000460b2 l       .debug_str	00000000 
0004610f l       .debug_str	00000000 
00046172 l       .debug_str	00000000 
000461d2 l       .debug_str	00000000 
00046232 l       .debug_str	00000000 
00046268 l       .debug_str	00000000 
00046279 l       .debug_str	00000000 
00046289 l       .debug_str	00000000 
00046293 l       .debug_str	00000000 
000462cb l       .debug_str	00000000 
00046328 l       .debug_str	00000000 
0004638b l       .debug_str	00000000 
000463d6 l       .debug_str	00000000 
00046411 l       .debug_str	00000000 
00046437 l       .debug_str	00000000 
00046497 l       .debug_str	00000000 
000464e2 l       .debug_str	00000000 
0004651d l       .debug_str	00000000 
00046543 l       .debug_str	00000000 
000465a3 l       .debug_str	00000000 
000465d9 l       .debug_str	00000000 
000465ea l       .debug_str	00000000 
000465fa l       .debug_str	00000000 
00046604 l       .debug_str	00000000 
0004663c l       .debug_str	00000000 
00046699 l       .debug_str	00000000 
000466fc l       .debug_str	00000000 
0004675c l       .debug_str	00000000 
000467bc l       .debug_str	00000000 
000467f2 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
00046805 l       .debug_str	00000000 
00046817 l       .debug_str	00000000 
00046823 l       .debug_str	00000000 
0004685e l       .debug_str	00000000 
000468bd l       .debug_str	00000000 
00046922 l       .debug_str	00000000 
00046984 l       .debug_str	00000000 
000469bf l       .debug_str	00000000 
000469e7 l       .debug_str	00000000 
00046a49 l       .debug_str	00000000 
0001cad1 l       .debug_str	00000000 
0001f4ed l       .debug_str	00000000 
00012c81 l       .debug_str	00000000 
00046a7f l       .debug_str	00000000 
00046aba l       .debug_str	00000000 
00046afa l       .debug_str	00000000 
00046b17 l       .debug_str	00000000 
00046b5b l       .debug_str	00000000 
00046b7c l       .debug_str	00000000 
00046bbc l       .debug_str	00000000 
00046bd9 l       .debug_str	00000000 
00046c1d l       .debug_str	00000000 
00046c3e l       .debug_str	00000000 
00046ca0 l       .debug_str	00000000 
00046d07 l       .debug_str	00000000 
00046d42 l       .debug_str	00000000 
00046d65 l       .debug_str	00000000 
00046dcb l       .debug_str	00000000 
00046e06 l       .debug_str	00000000 
00046e28 l       .debug_str	00000000 
00046e63 l       .debug_str	00000000 
00046e87 l       .debug_str	00000000 
00046ec2 l       .debug_str	00000000 
00046ee5 l       .debug_str	00000000 
00046f20 l       .debug_str	00000000 
00046f44 l       .debug_str	00000000 
00046f7f l       .debug_str	00000000 
00046fa2 l       .debug_str	00000000 
00046fdd l       .debug_str	00000000 
00047001 l       .debug_str	00000000 
0004704c l       .debug_str	00000000 
000470ae l       .debug_str	00000000 
000470e9 l       .debug_str	00000000 
0004710c l       .debug_str	00000000 
00047157 l       .debug_str	00000000 
00047192 l       .debug_str	00000000 
000471b8 l       .debug_str	00000000 
000471f3 l       .debug_str	00000000 
00047219 l       .debug_str	00000000 
0004726a l       .debug_str	00000000 
000472b8 l       .debug_str	00000000 
00047303 l       .debug_str	00000000 
00047336 l       .debug_str	00000000 
00047371 l       .debug_str	00000000 
00047396 l       .debug_str	00000000 
00047422 l       .debug_str	00000000 
00047456 l       .debug_str	00000000 
000474d2 l       .debug_str	00000000 
00047517 l       .debug_str	00000000 
00047563 l       .debug_str	00000000 
000475c6 l       .debug_str	00000000 
00047601 l       .debug_str	00000000 
00047625 l       .debug_str	00000000 
00047660 l       .debug_str	00000000 
00047687 l       .debug_str	00000000 
000476d3 l       .debug_str	00000000 
0004770e l       .debug_str	00000000 
00047735 l       .debug_str	00000000 
00047780 l       .debug_str	00000000 
000477cc l       .debug_str	00000000 
00047818 l       .debug_str	00000000 
00047849 l       .debug_str	00000000 
00047851 l       .debug_str	00000000 
00010725 l       .debug_str	00000000 
0004789d l       .debug_str	00000000 
000478d2 l       .debug_str	00000000 
00047900 l       .debug_str	00000000 
00047909 l       .debug_str	00000000 
00047957 l       .debug_str	00000000 
0004795f l       .debug_str	00000000 
000479c4 l       .debug_str	00000000 
00047a17 l       .debug_str	00000000 
00047a77 l       .debug_str	00000000 
00047a96 l       .debug_str	00000000 
00047af9 l       .debug_str	00000000 
00047b1b l       .debug_str	00000000 
00047b66 l       .debug_str	00000000 
00047bcb l       .debug_str	00000000 
00047bed l       .debug_str	00000000 
00047c56 l       .debug_str	00000000 
00047c93 l       .debug_str	00000000 
00047cfc l       .debug_str	00000000 
00047d8c l       .debug_str	00000000 
0000b853 l       .debug_str	00000000 
00047dec l       .debug_str	00000000 
00047e4f l       .debug_str	00000000 
00047eb8 l       .debug_str	00000000 
00047eeb l       .debug_str	00000000 
00047f33 l       .debug_str	00000000 
00047fad l       .debug_str	00000000 
00047ffe l       .debug_str	00000000 
00048055 l       .debug_str	00000000 
0001ac73 l       .debug_str	00000000 
0004809d l       .debug_str	00000000 
000480fb l       .debug_str	00000000 
00048118 l       .debug_str	00000000 
00048184 l       .debug_str	00000000 
000481c9 l       .debug_str	00000000 
00048217 l       .debug_str	00000000 
0004825f l       .debug_str	00000000 
00048269 l       .debug_str	00000000 
000482d7 l       .debug_str	00000000 
00048313 l       .debug_str	00000000 
00048336 l       .debug_str	00000000 
000483a6 l       .debug_str	00000000 
000483ee l       .debug_str	00000000 
000483f7 l       .debug_str	00000000 
00048454 l       .debug_str	00000000 
000484b7 l       .debug_str	00000000 
00048517 l       .debug_str	00000000 
00048577 l       .debug_str	00000000 
000485d3 l       .debug_str	00000000 
00048632 l       .debug_str	00000000 
00048692 l       .debug_str	00000000 
000486ad l       .debug_str	00000000 
0001abd1 l       .debug_str	00000000 
00048701 l       .debug_str	00000000 
0004877f l       .debug_str	00000000 
000487a9 l       .debug_str	00000000 
0004880b l       .debug_str	00000000 
0004886c l       .debug_str	00000000 
000488c6 l       .debug_str	00000000 
0004892b l       .debug_str	00000000 
0004897d l       .debug_str	00000000 
000489c5 l       .debug_str	00000000 
000489e0 l       .debug_str	00000000 
00048a5a l       .debug_str	00000000 
00048aa7 l       .debug_str	00000000 
00048b21 l       .debug_str	00000000 
00048b6e l       .debug_str	00000000 
00048bc2 l       .debug_str	00000000 
00048c14 l       .debug_str	00000000 
00048c7c l       .debug_str	00000000 
00048cdc l       .debug_str	00000000 
00048d36 l       .debug_str	00000000 
00048d95 l       .debug_str	00000000 
00048def l       .debug_str	00000000 
00048e4c l       .debug_str	00000000 
00022ba4 l       .debug_str	00000000 
00048e8a l       .debug_str	00000000 
00023b87 l       .debug_str	00000000 
00048ec5 l       .debug_str	00000000 
00048f37 l       .debug_str	00000000 
0004900a l       .debug_str	00000000 
0001ad91 l       .debug_str	00000000 
00049052 l       .debug_str	00000000 
000490a0 l       .debug_str	00000000 
000490aa l       .debug_str	00000000 
000490f2 l       .debug_str	00000000 
000490fe l       .debug_str	00000000 
00049172 l       .debug_str	00000000 
0004917d l       .debug_str	00000000 
000491b9 l       .debug_str	00000000 
000491e0 l       .debug_str	00000000 
00049231 l       .debug_str	00000000 
0004923e l       .debug_str	00000000 
0004924c l       .debug_str	00000000 
0004925f l       .debug_str	00000000 
0004926a l       .debug_str	00000000 
000492ac l       .debug_str	00000000 
000492c1 l       .debug_str	00000000 
0004932b l       .debug_str	00000000 
00049388 l       .debug_str	00000000 
000493e8 l       .debug_str	00000000 
00049448 l       .debug_str	00000000 
000494ba l       .debug_str	00000000 
00049507 l       .debug_str	00000000 
00049566 l       .debug_str	00000000 
000495c0 l       .debug_str	00000000 
00049633 l       .debug_str	00000000 
00049640 l       .debug_str	00000000 
000496a0 l       .debug_str	00000000 
000496bf l       .debug_str	00000000 
00049727 l       .debug_str	00000000 
00049742 l       .debug_str	00000000 
0004979a l       .debug_str	00000000 
000497e4 l       .debug_str	00000000 
00049848 l       .debug_str	00000000 
00049867 l       .debug_str	00000000 
000498c9 l       .debug_str	00000000 
0004992f l       .debug_str	00000000 
000499af l       .debug_str	00000000 
000499fe l       .debug_str	00000000 
00049a74 l       .debug_str	00000000 
00049aea l       .debug_str	00000000 
00049bbf l       .debug_str	00000000 
00049c1c l       .debug_str	00000000 
00049c7a l       .debug_str	00000000 
00049cfa l       .debug_str	00000000 
00049d69 l       .debug_str	00000000 
00049de7 l       .debug_str	00000000 
00049e3a l       .debug_str	00000000 
00049e9f l       .debug_str	00000000 
00049eff l       .debug_str	00000000 
00049f6d l       .debug_str	00000000 
0004a005 l       .debug_str	00000000 
0004a094 l       .debug_str	00000000 
0004a122 l       .debug_str	00000000 
0004a1b0 l       .debug_str	00000000 
0004a2c0 l       .debug_str	00000000 
0004a334 l       .debug_str	00000000 
0004a376 l       .debug_str	00000000 
0004a3bf l       .debug_str	00000000 
0004a419 l       .debug_str	00000000 
0004a492 l       .debug_str	00000000 
0004a49f l       .debug_str	00000000 
0004a4a4 l       .debug_str	00000000 
0004a510 l       .debug_str	00000000 
0004a557 l       .debug_str	00000000 
0004a5e1 l       .debug_str	00000000 
0004a600 l       .debug_str	00000000 
0004a68a l       .debug_str	00000000 
0004a6ae l       .debug_str	00000000 
0004a6f2 l       .debug_str	00000000 
0004a756 l       .debug_str	00000000 
0004a79a l       .debug_str	00000000 
0004a80c l       .debug_str	00000000 
0004a8ca l       .debug_str	00000000 
0004a92c l       .debug_str	00000000 
0004a9c4 l       .debug_str	00000000 
0004aa73 l       .debug_str	00000000 
0004ab09 l       .debug_str	00000000 
0004ab9c l       .debug_str	00000000 
0004abe0 l       .debug_str	00000000 
0004ac33 l       .debug_str	00000000 
0004acb7 l       .debug_str	00000000 
0004ad45 l       .debug_str	00000000 
0004ad99 l       .debug_str	00000000 
0004adaa l       .debug_str	00000000 
0004ae2f l       .debug_str	00000000 
0004aebb l       .debug_str	00000000 
0004aec4 l       .debug_str	00000000 
0004aed1 l       .debug_str	00000000 
0004af28 l       .debug_str	00000000 
0004afad l       .debug_str	00000000 
0004afff l       .debug_str	00000000 
0004b00e l       .debug_str	00000000 
0004b055 l       .debug_str	00000000 
0004b0b9 l       .debug_str	00000000 
0004b0da l       .debug_str	00000000 
0004b15a l       .debug_str	00000000 
0004b1c5 l       .debug_str	00000000 
0004b243 l       .debug_str	00000000 
0004b292 l       .debug_str	00000000 
0004b2f1 l       .debug_str	00000000 
0004b389 l       .debug_str	00000000 
0004b42f l       .debug_str	00000000 
0004b4c5 l       .debug_str	00000000 
0004b54f l       .debug_str	00000000 
0004b5c5 l       .debug_str	00000000 
0004b60e l       .debug_str	00000000 
0004b66a l       .debug_str	00000000 
0004b6e5 l       .debug_str	00000000 
0004b751 l       .debug_str	00000000 
0004b7db l       .debug_str	00000000 
0004b81f l       .debug_str	00000000 
0004b880 l       .debug_str	00000000 
0004b8c4 l       .debug_str	00000000 
0004b948 l       .debug_str	00000000 
0004b9d2 l       .debug_str	00000000 
0004ba24 l       .debug_str	00000000 
0004baa2 l       .debug_str	00000000 
0004bb27 l       .debug_str	00000000 
0004bb7e l       .debug_str	00000000 
0004bbff l       .debug_str	00000000 
0004bcbd l       .debug_str	00000000 
0004bd1c l       .debug_str	00000000 
0004bd7f l       .debug_str	00000000 
0004bda4 l       .debug_str	00000000 
0004be08 l       .debug_str	00000000 
0004be29 l       .debug_str	00000000 
0004bea9 l       .debug_str	00000000 
0004bf14 l       .debug_str	00000000 
0004bf92 l       .debug_str	00000000 
0004bfe1 l       .debug_str	00000000 
0004c040 l       .debug_str	00000000 
0004c0d8 l       .debug_str	00000000 
0004c17e l       .debug_str	00000000 
0004c214 l       .debug_str	00000000 
0004c29e l       .debug_str	00000000 
0004c314 l       .debug_str	00000000 
0004c35d l       .debug_str	00000000 
0004c3b9 l       .debug_str	00000000 
0004c434 l       .debug_str	00000000 
0004c4a0 l       .debug_str	00000000 
0004c52a l       .debug_str	00000000 
0004c56e l       .debug_str	00000000 
0004c5cf l       .debug_str	00000000 
0004c613 l       .debug_str	00000000 
0004c697 l       .debug_str	00000000 
0004c721 l       .debug_str	00000000 
0004c79f l       .debug_str	00000000 
0004c824 l       .debug_str	00000000 
0004c87b l       .debug_str	00000000 
0004c8fc l       .debug_str	00000000 
0004c9ba l       .debug_str	00000000 
0004ca19 l       .debug_str	00000000 
0004ca4c l       .debug_str	00000000 
0004ca7f l       .debug_str	00000000 
0004cab2 l       .debug_str	00000000 
0004cae5 l       .debug_str	00000000 
0004cb18 l       .debug_str	00000000 
0004cb4b l       .debug_str	00000000 
0004cb7e l       .debug_str	00000000 
0004cbd2 l       .debug_str	00000000 
0004cc00 l       .debug_str	00000000 
0004cc54 l       .debug_str	00000000 
0005f631 l       .debug_str	00000000 
00010e89 l       .debug_str	00000000 
0004cc67 l       .debug_str	00000000 
0004cc6b l       .debug_str	00000000 
0004cc6f l       .debug_str	00000000 
0004cc73 l       .debug_str	00000000 
0004cc7a l       .debug_str	00000000 
0004cc7f l       .debug_str	00000000 
0004ccaf l       .debug_str	00000000 
0004cd01 l       .debug_str	00000000 
0004cd42 l       .debug_str	00000000 
0004cd4f l       .debug_str	00000000 
0004cd8e l       .debug_str	00000000 
0004cd99 l       .debug_str	00000000 
0004cdd5 l       .debug_str	00000000 
0004cde3 l       .debug_str	00000000 
0004ce17 l       .debug_str	00000000 
0004ce52 l       .debug_str	00000000 
0004ce90 l       .debug_str	00000000 
0004ce9e l       .debug_str	00000000 
0004ced7 l       .debug_str	00000000 
0004cee1 l       .debug_str	00000000 
0004cf1d l       .debug_str	00000000 
0004cf79 l       .debug_str	00000000 
0004cf80 l       .debug_str	00000000 
0004cfde l       .debug_str	00000000 
0004cfe7 l       .debug_str	00000000 
0004d04e l       .debug_str	00000000 
0004d05f l       .debug_str	00000000 
0004d0bc l       .debug_str	00000000 
0004d11b l       .debug_str	00000000 
0004d177 l       .debug_str	00000000 
0004d1d5 l       .debug_str	00000000 
0004d23c l       .debug_str	00000000 
0004d299 l       .debug_str	00000000 
0004d2f8 l       .debug_str	00000000 
0004d331 l       .debug_str	00000000 
0004d33b l       .debug_str	00000000 
0004d3a3 l       .debug_str	00000000 
0004d3d6 l       .debug_str	00000000 
0004d3e0 l       .debug_str	00000000 
0004d416 l       .debug_str	00000000 
0004d422 l       .debug_str	00000000 
0004d459 l       .debug_str	00000000 
0004d466 l       .debug_str	00000000 
0004d4aa l       .debug_str	00000000 
0004d4c4 l       .debug_str	00000000 
0004d535 l       .debug_str	00000000 
0004d548 l       .debug_str	00000000 
0004d5b9 l       .debug_str	00000000 
0004d5fc l       .debug_str	00000000 
0004d606 l       .debug_str	00000000 
0004d650 l       .debug_str	00000000 
0004d697 l       .debug_str	00000000 
0004d6e4 l       .debug_str	00000000 
0004d72e l       .debug_str	00000000 
0004d760 l       .debug_str	00000000 
0004d769 l       .debug_str	00000000 
0004d79d l       .debug_str	00000000 
0004d7d6 l       .debug_str	00000000 
0004d812 l       .debug_str	00000000 
0004d824 l       .debug_str	00000000 
0004d865 l       .debug_str	00000000 
0004d8c4 l       .debug_str	00000000 
0004d8f5 l       .debug_str	00000000 
0004d90b l       .debug_str	00000000 
0004d940 l       .debug_str	00000000 
0004d99d l       .debug_str	00000000 
0004da01 l       .debug_str	00000000 
0004da60 l       .debug_str	00000000 
0004dac0 l       .debug_str	00000000 
0004db1e l       .debug_str	00000000 
0001fa5d l       .debug_str	00000000 
0004db83 l       .debug_str	00000000 
0004dbc9 l       .debug_str	00000000 
0004dc09 l       .debug_str	00000000 
0004dc91 l       .debug_str	00000000 
0005c067 l       .debug_str	00000000 
0004dd18 l       .debug_str	00000000 
0004dd4b l       .debug_str	00000000 
0004ddbf l       .debug_str	00000000 
0004de38 l       .debug_str	00000000 
0004deac l       .debug_str	00000000 
0004df0b l       .debug_str	00000000 
0004df68 l       .debug_str	00000000 
0004dfc2 l       .debug_str	00000000 
0004e01e l       .debug_str	00000000 
0004e07b l       .debug_str	00000000 
0004e0da l       .debug_str	00000000 
0004e142 l       .debug_str	00000000 
0004e1ac l       .debug_str	00000000 
0004e215 l       .debug_str	00000000 
0004e273 l       .debug_str	00000000 
0004e2e5 l       .debug_str	00000000 
0004e2e9 l       .debug_str	00000000 
0004e35c l       .debug_str	00000000 
0004e3ba l       .debug_str	00000000 
0004e416 l       .debug_str	00000000 
0004e487 l       .debug_str	00000000 
0004e4fd l       .debug_str	00000000 
0004e534 l       .debug_str	00000000 
0004e590 l       .debug_str	00000000 
0004e5e4 l       .debug_str	00000000 
0004e642 l       .debug_str	00000000 
0004e6ae l       .debug_str	00000000 
0004e703 l       .debug_str	00000000 
0004e736 l       .debug_str	00000000 
0004e744 l       .debug_str	00000000 
0004e77c l       .debug_str	00000000 
0004e78f l       .debug_str	00000000 
0004e7c4 l       .debug_str	00000000 
0004e7fa l       .debug_str	00000000 
0004e855 l       .debug_str	00000000 
0004e888 l       .debug_str	00000000 
0004e88f l       .debug_str	00000000 
0004e8d1 l       .debug_str	00000000 
0004e902 l       .debug_str	00000000 
0004e933 l       .debug_str	00000000 
0004e966 l       .debug_str	00000000 
0004e96d l       .debug_str	00000000 
0004e99a l       .debug_str	00000000 
0004e9d5 l       .debug_str	00000000 
0004e9e8 l       .debug_str	00000000 
0004ea19 l       .debug_str	00000000 
0004ea23 l       .debug_str	00000000 
0004ea84 l       .debug_str	00000000 
0004eaec l       .debug_str	00000000 
0004eb29 l       .debug_str	00000000 
0004eb77 l       .debug_str	00000000 
0004ebb3 l       .debug_str	00000000 
0004ebef l       .debug_str	00000000 
0004ec28 l       .debug_str	00000000 
0004ec62 l       .debug_str	00000000 
0004ec9b l       .debug_str	00000000 
0004ecd2 l       .debug_str	00000000 
0004ed0b l       .debug_str	00000000 
0004ed45 l       .debug_str	00000000 
0004ed8b l       .debug_str	00000000 
0004edae l       .debug_str	00000000 
0004edf4 l       .debug_str	00000000 
0004ee17 l       .debug_str	00000000 
0004ee60 l       .debug_str	00000000 
0004ee86 l       .debug_str	00000000 
0004eecf l       .debug_str	00000000 
0004eef5 l       .debug_str	00000000 
0004ef3f l       .debug_str	00000000 
0004ef66 l       .debug_str	00000000 
0004efb0 l       .debug_str	00000000 
0004efd7 l       .debug_str	00000000 
0004f024 l       .debug_str	00000000 
0004f04e l       .debug_str	00000000 
0004f09b l       .debug_str	00000000 
0004f0c5 l       .debug_str	00000000 
0004f0f8 l       .debug_str	00000000 
0004f124 l       .debug_str	00000000 
0004f17a l       .debug_str	00000000 
0004f1a5 l       .debug_str	00000000 
0004f1fd l       .debug_str	00000000 
0004f253 l       .debug_str	00000000 
0004f28c l       .debug_str	00000000 
0004f297 l       .debug_str	00000000 
0001e552 l       .debug_str	00000000 
0004f2d0 l       .debug_str	00000000 
0004f2f7 l       .debug_str	00000000 
0004f330 l       .debug_str	00000000 
0004f377 l       .debug_str	00000000 
0004f384 l       .debug_str	00000000 
0004f59e l       .debug_str	00000000 
0004f3b3 l       .debug_str	00000000 
0004f3f3 l       .debug_str	00000000 
0004f407 l       .debug_str	00000000 
0004f449 l       .debug_str	00000000 
0004f47a l       .debug_str	00000000 
0004f4aa l       .debug_str	00000000 
0004f4db l       .debug_str	00000000 
0004f50c l       .debug_str	00000000 
0004f543 l       .debug_str	00000000 
0004f54e l       .debug_str	00000000 
0004f58e l       .debug_str	00000000 
0004f5a2 l       .debug_str	00000000 
0004f5de l       .debug_str	00000000 
0004f5ee l       .debug_str	00000000 
0004f623 l       .debug_str	00000000 
0004f62d l       .debug_str	00000000 
0004f662 l       .debug_str	00000000 
0004f66c l       .debug_str	00000000 
0004f6c1 l       .debug_str	00000000 
0004f709 l       .debug_str	00000000 
0004f74f l       .debug_str	00000000 
0004f796 l       .debug_str	00000000 
0004f7df l       .debug_str	00000000 
0004f831 l       .debug_str	00000000 
0004f883 l       .debug_str	00000000 
0004f921 l       .debug_str	00000000 
0004f953 l       .debug_str	00000000 
0004f98c l       .debug_str	00000000 
0004f9a1 l       .debug_str	00000000 
0004f9dc l       .debug_str	00000000 
0004f9f3 l       .debug_str	00000000 
0004fa31 l       .debug_str	00000000 
0004fa4b l       .debug_str	00000000 
0004faad l       .debug_str	00000000 
0004fad2 l       .debug_str	00000000 
0004fb2d l       .debug_str	00000000 
0004fb3c l       .debug_str	00000000 
0004fbb1 l       .debug_str	00000000 
0004fbce l       .debug_str	00000000 
0004fc08 l       .debug_str	00000000 
0004fc45 l       .debug_str	00000000 
0004fc50 l       .debug_str	00000000 
0004fc88 l       .debug_str	00000000 
0004fc8f l       .debug_str	00000000 
0004fd0e l       .debug_str	00000000 
0004fd6e l       .debug_str	00000000 
0004fdcc l       .debug_str	00000000 
0004fe2a l       .debug_str	00000000 
0004fe62 l       .debug_str	00000000 
0004fe97 l       .debug_str	00000000 
0004fec2 l       .debug_str	00000000 
0004fecc l       .debug_str	00000000 
0004fefc l       .debug_str	00000000 
0004ff0a l       .debug_str	00000000 
0004ff63 l       .debug_str	00000000 
0004ffb6 l       .debug_str	00000000 
00050032 l       .debug_str	00000000 
00050096 l       .debug_str	00000000 
000500fa l       .debug_str	00000000 
00050130 l       .debug_str	00000000 
00050144 l       .debug_str	00000000 
00050185 l       .debug_str	00000000 
0005019d l       .debug_str	00000000 
00050251 l       .debug_str	00000000 
00050284 l       .debug_str	00000000 
00050295 l       .debug_str	00000000 
000502db l       .debug_str	00000000 
000502e8 l       .debug_str	00000000 
00050325 l       .debug_str	00000000 
00050369 l       .debug_str	00000000 
000503aa l       .debug_str	00000000 
000503ec l       .debug_str	00000000 
000503f6 l       .debug_str	00000000 
0005043a l       .debug_str	00000000 
00050445 l       .debug_str	00000000 
00050493 l       .debug_str	00000000 
000504e1 l       .debug_str	00000000 
00050527 l       .debug_str	00000000 
0005056f l       .debug_str	00000000 
000505b7 l       .debug_str	00000000 
00013634 l       .debug_str	00000000 
0005061e l       .debug_str	00000000 
00050677 l       .debug_str	00000000 
000506e1 l       .debug_str	00000000 
00016dc6 l       .debug_str	00000000 
0005074b l       .debug_str	00000000 
000507c6 l       .debug_str	00000000 
0005083b l       .debug_str	00000000 
00050846 l       .debug_str	00000000 
000508bb l       .debug_str	00000000 
000508c6 l       .debug_str	00000000 
0005091d l       .debug_str	00000000 
00050981 l       .debug_str	00000000 
0005098d l       .debug_str	00000000 
000509ca l       .debug_str	00000000 
000509d7 l       .debug_str	00000000 
00050a0b l       .debug_str	00000000 
00050a46 l       .debug_str	00000000 
00050aa2 l       .debug_str	00000000 
00050afd l       .debug_str	00000000 
00050b57 l       .debug_str	00000000 
00037591 l       .debug_str	00000000 
00050b9d l       .debug_str	00000000 
00050c03 l       .debug_str	00000000 
00050c3a l       .debug_str	00000000 
00050c42 l       .debug_str	00000000 
00050c7a l       .debug_str	00000000 
00050c83 l       .debug_str	00000000 
00050cbb l       .debug_str	00000000 
00050cc4 l       .debug_str	00000000 
00050cfb l       .debug_str	00000000 
00050d03 l       .debug_str	00000000 
00050d3b l       .debug_str	00000000 
00050d44 l       .debug_str	00000000 
00050d7c l       .debug_str	00000000 
00050d85 l       .debug_str	00000000 
00050dbc l       .debug_str	00000000 
00050dc4 l       .debug_str	00000000 
00050e3e l       .debug_str	00000000 
00050eb8 l       .debug_str	00000000 
00050f32 l       .debug_str	00000000 
00050fae l       .debug_str	00000000 
0001a511 l       .debug_str	00000000 
0005100c l       .debug_str	00000000 
0005106b l       .debug_str	00000000 
000510ca l       .debug_str	00000000 
00051129 l       .debug_str	00000000 
00051189 l       .debug_str	00000000 
000511e7 l       .debug_str	00000000 
00051246 l       .debug_str	00000000 
000512a5 l       .debug_str	00000000 
00051304 l       .debug_str	00000000 
00051364 l       .debug_str	00000000 
000513b9 l       .debug_str	00000000 
0005140e l       .debug_str	00000000 
00051468 l       .debug_str	00000000 
000514c2 l       .debug_str	00000000 
000514fc l       .debug_str	00000000 
00051505 l       .debug_str	00000000 
0005153f l       .debug_str	00000000 
00051548 l       .debug_str	00000000 
00051585 l       .debug_str	00000000 
00038a7c l       .debug_str	00000000 
000515be l       .debug_str	00000000 
0005161f l       .debug_str	00000000 
0005167d l       .debug_str	00000000 
000516be l       .debug_str	00000000 
000516fc l       .debug_str	00000000 
00051735 l       .debug_str	00000000 
00051774 l       .debug_str	00000000 
000517b2 l       .debug_str	00000000 
000517f0 l       .debug_str	00000000 
00051831 l       .debug_str	00000000 
00051875 l       .debug_str	00000000 
000518b2 l       .debug_str	00000000 
00051918 l       .debug_str	00000000 
0005197f l       .debug_str	00000000 
000519e2 l       .debug_str	00000000 
00051a44 l       .debug_str	00000000 
00051aa9 l       .debug_str	00000000 
00051b12 l       .debug_str	00000000 
00051b78 l       .debug_str	00000000 
00051bde l       .debug_str	00000000 
00051c39 l       .debug_str	00000000 
00051ca0 l       .debug_str	00000000 
00051d0b l       .debug_str	00000000 
00051d66 l       .debug_str	00000000 
00051dc1 l       .debug_str	00000000 
00022c6d l       .debug_str	00000000 
00051e08 l       .debug_str	00000000 
00051e50 l       .debug_str	00000000 
00051e98 l       .debug_str	00000000 
00051ee0 l       .debug_str	00000000 
00051f29 l       .debug_str	00000000 
00051f73 l       .debug_str	00000000 
00051fba l       .debug_str	00000000 
0005200d l       .debug_str	00000000 
00052028 l       .debug_str	00000000 
00052070 l       .debug_str	00000000 
000520c4 l       .debug_str	00000000 
0005210c l       .debug_str	00000000 
00052160 l       .debug_str	00000000 
000521a8 l       .debug_str	00000000 
000521fc l       .debug_str	00000000 
00052245 l       .debug_str	00000000 
0005229a l       .debug_str	00000000 
000522e4 l       .debug_str	00000000 
0005233c l       .debug_str	00000000 
0005239e l       .debug_str	00000000 
000523fd l       .debug_str	00000000 
0005245d l       .debug_str	00000000 
000524bd l       .debug_str	00000000 
0005251d l       .debug_str	00000000 
0005257e l       .debug_str	00000000 
000525dd l       .debug_str	00000000 
0005263d l       .debug_str	00000000 
0005269d l       .debug_str	00000000 
000526fd l       .debug_str	00000000 
0005275e l       .debug_str	00000000 
000527bb l       .debug_str	00000000 
00052816 l       .debug_str	00000000 
0005286c l       .debug_str	00000000 
000528ca l       .debug_str	00000000 
0005291e l       .debug_str	00000000 
0005297f l       .debug_str	00000000 
000529e5 l       .debug_str	00000000 
00052a4d l       .debug_str	00000000 
00052ab4 l       .debug_str	00000000 
00052b10 l       .debug_str	00000000 
00052b71 l       .debug_str	00000000 
00052bcb l       .debug_str	00000000 
00052c25 l       .debug_str	00000000 
00052c83 l       .debug_str	00000000 
00052cd7 l       .debug_str	00000000 
00052d53 l       .debug_str	00000000 
00052dbc l       .debug_str	00000000 
00052e38 l       .debug_str	00000000 
00052eb4 l       .debug_str	00000000 
00052f1d l       .debug_str	00000000 
00052f99 l       .debug_str	00000000 
00053006 l       .debug_str	00000000 
00053060 l       .debug_str	00000000 
000530b9 l       .debug_str	00000000 
00053111 l       .debug_str	00000000 
00053170 l       .debug_str	00000000 
000531cf l       .debug_str	00000000 
0005322e l       .debug_str	00000000 
0005328e l       .debug_str	00000000 
000532ee l       .debug_str	00000000 
0005334e l       .debug_str	00000000 
000533ae l       .debug_str	00000000 
00053410 l       .debug_str	00000000 
00053472 l       .debug_str	00000000 
000534d3 l       .debug_str	00000000 
00053535 l       .debug_str	00000000 
00053597 l       .debug_str	00000000 
000535f8 l       .debug_str	00000000 
0005365a l       .debug_str	00000000 
000536bc l       .debug_str	00000000 
00038ac0 l       .debug_str	00000000 
00053705 l       .debug_str	00000000 
00053751 l       .debug_str	00000000 
00053759 l       .debug_str	00000000 
000537a3 l       .debug_str	00000000 
000537ee l       .debug_str	00000000 
000537f5 l       .debug_str	00000000 
00053840 l       .debug_str	00000000 
0005388b l       .debug_str	00000000 
000538d7 l       .debug_str	00000000 
00053921 l       .debug_str	00000000 
0005396e l       .debug_str	00000000 
000539b9 l       .debug_str	00000000 
00053a05 l       .debug_str	00000000 
00053a51 l       .debug_str	00000000 
00053a9d l       .debug_str	00000000 
00053aea l       .debug_str	00000000 
00053b34 l       .debug_str	00000000 
00053b81 l       .debug_str	00000000 
00053bcc l       .debug_str	00000000 
00053c18 l       .debug_str	00000000 
00053c64 l       .debug_str	00000000 
00053cb0 l       .debug_str	00000000 
00053cfd l       .debug_str	00000000 
00053d47 l       .debug_str	00000000 
00053d94 l       .debug_str	00000000 
00053ddf l       .debug_str	00000000 
00053e2b l       .debug_str	00000000 
00053e77 l       .debug_str	00000000 
00053ec3 l       .debug_str	00000000 
00053f10 l       .debug_str	00000000 
00053f5b l       .debug_str	00000000 
00053fa9 l       .debug_str	00000000 
00053ff5 l       .debug_str	00000000 
00054042 l       .debug_str	00000000 
0005408f l       .debug_str	00000000 
000540dc l       .debug_str	00000000 
0005412a l       .debug_str	00000000 
00054175 l       .debug_str	00000000 
000541c0 l       .debug_str	00000000 
0005420c l       .debug_str	00000000 
00054258 l       .debug_str	00000000 
000542a5 l       .debug_str	00000000 
000542f1 l       .debug_str	00000000 
0005433e l       .debug_str	00000000 
0005438b l       .debug_str	00000000 
000543ea l       .debug_str	00000000 
00054447 l       .debug_str	00000000 
000544a3 l       .debug_str	00000000 
00054501 l       .debug_str	00000000 
0005455e l       .debug_str	00000000 
000545bc l       .debug_str	00000000 
00054619 l       .debug_str	00000000 
00054677 l       .debug_str	00000000 
000546d4 l       .debug_str	00000000 
00054733 l       .debug_str	00000000 
00054791 l       .debug_str	00000000 
000547f2 l       .debug_str	00000000 
00054853 l       .debug_str	00000000 
000548b6 l       .debug_str	00000000 
000548e7 l       .debug_str	00000000 
000548ef l       .debug_str	00000000 
00054952 l       .debug_str	00000000 
000549b5 l       .debug_str	00000000 
00054a19 l       .debug_str	00000000 
00054a7d l       .debug_str	00000000 
00054ae1 l       .debug_str	00000000 
00054b45 l       .debug_str	00000000 
00054ba8 l       .debug_str	00000000 
00054c0b l       .debug_str	00000000 
00054c6f l       .debug_str	00000000 
00054cd3 l       .debug_str	00000000 
00054d37 l       .debug_str	00000000 
00054d9b l       .debug_str	00000000 
00054dcc l       .debug_str	00000000 
00054dd4 l       .debug_str	00000000 
00054e38 l       .debug_str	00000000 
00054e9c l       .debug_str	00000000 
00054f00 l       .debug_str	00000000 
00054f64 l       .debug_str	00000000 
00054fc4 l       .debug_str	00000000 
00055024 l       .debug_str	00000000 
00055052 l       .debug_str	00000000 
0005505b l       .debug_str	00000000 
000550bc l       .debug_str	00000000 
0005511d l       .debug_str	00000000 
0005517e l       .debug_str	00000000 
000551df l       .debug_str	00000000 
00055236 l       .debug_str	00000000 
00055289 l       .debug_str	00000000 
000552d1 l       .debug_str	00000000 
000552f9 l       .debug_str	00000000 
00055341 l       .debug_str	00000000 
00055357 l       .debug_str	00000000 
0005539f l       .debug_str	00000000 
000553d4 l       .debug_str	00000000 
0005541c l       .debug_str	00000000 
00055457 l       .debug_str	00000000 
0005549f l       .debug_str	00000000 
000554e7 l       .debug_str	00000000 
00055508 l       .debug_str	00000000 
00055550 l       .debug_str	00000000 
0005555b l       .debug_str	00000000 
000555a3 l       .debug_str	00000000 
000555e0 l       .debug_str	00000000 
00055628 l       .debug_str	00000000 
00055681 l       .debug_str	00000000 
000556c9 l       .debug_str	00000000 
000556e5 l       .debug_str	00000000 
0005572d l       .debug_str	00000000 
000557d9 l       .debug_str	00000000 
00055821 l       .debug_str	00000000 
0005583f l       .debug_str	00000000 
00055887 l       .debug_str	00000000 
00055891 l       .debug_str	00000000 
000558d9 l       .debug_str	00000000 
00055914 l       .debug_str	00000000 
0005595c l       .debug_str	00000000 
000559ab l       .debug_str	00000000 
000559f3 l       .debug_str	00000000 
00055a1a l       .debug_str	00000000 
00055a62 l       .debug_str	00000000 
00055a8c l       .debug_str	00000000 
00055ad4 l       .debug_str	00000000 
00055b4f l       .debug_str	00000000 
00055b97 l       .debug_str	00000000 
00055bdf l       .debug_str	00000000 
00055bf5 l       .debug_str	00000000 
00016520 l       .debug_str	00000000 
00055c3d l       .debug_str	00000000 
00055c85 l       .debug_str	00000000 
00055ccd l       .debug_str	00000000 
00055cfe l       .debug_str	00000000 
00055d46 l       .debug_str	00000000 
00055daa l       .debug_str	00000000 
00055df2 l       .debug_str	00000000 
0000b802 l       .debug_str	00000000 
00055e3a l       .debug_str	00000000 
00055e82 l       .debug_str	00000000 
00055e8f l       .debug_str	00000000 
00055ed7 l       .debug_str	00000000 
00055ee1 l       .debug_str	00000000 
00055f29 l       .debug_str	00000000 
00055f32 l       .debug_str	00000000 
00055f7a l       .debug_str	00000000 
00055fa2 l       .debug_str	00000000 
00055fea l       .debug_str	00000000 
00056032 l       .debug_str	00000000 
00056054 l       .debug_str	00000000 
0005609c l       .debug_str	00000000 
000560cd l       .debug_str	00000000 
00056115 l       .debug_str	00000000 
0005615d l       .debug_str	00000000 
00056195 l       .debug_str	00000000 
000561dd l       .debug_str	00000000 
00056212 l       .debug_str	00000000 
0005625a l       .debug_str	00000000 
00056283 l       .debug_str	00000000 
000562cb l       .debug_str	00000000 
000562ef l       .debug_str	00000000 
00056337 l       .debug_str	00000000 
0005635c l       .debug_str	00000000 
000563a4 l       .debug_str	00000000 
000563c1 l       .debug_str	00000000 
00056409 l       .debug_str	00000000 
00056414 l       .debug_str	00000000 
0005645c l       .debug_str	00000000 
00056484 l       .debug_str	00000000 
000564cc l       .debug_str	00000000 
000564db l       .debug_str	00000000 
00056523 l       .debug_str	00000000 
0005656b l       .debug_str	00000000 
00056587 l       .debug_str	00000000 
000565cf l       .debug_str	00000000 
00056646 l       .debug_str	00000000 
0005668e l       .debug_str	00000000 
00056705 l       .debug_str	00000000 
0005674d l       .debug_str	00000000 
00056756 l       .debug_str	00000000 
0005679e l       .debug_str	00000000 
000567c4 l       .debug_str	00000000 
0005680c l       .debug_str	00000000 
0005683f l       .debug_str	00000000 
00056887 l       .debug_str	00000000 
000568a4 l       .debug_str	00000000 
000568ec l       .debug_str	00000000 
000568f5 l       .debug_str	00000000 
0005693d l       .debug_str	00000000 
00056985 l       .debug_str	00000000 
000569a9 l       .debug_str	00000000 
0000b8eb l       .debug_str	00000000 
000569f1 l       .debug_str	00000000 
00056a39 l       .debug_str	00000000 
00056a81 l       .debug_str	00000000 
00056b79 l       .debug_str	00000000 
0001ac21 l       .debug_str	00000000 
00056bc1 l       .debug_str	00000000 
00056c09 l       .debug_str	00000000 
00056c51 l       .debug_str	00000000 
00056c7e l       .debug_str	00000000 
0000b93c l       .debug_str	00000000 
00056cc6 l       .debug_str	00000000 
00056d0e l       .debug_str	00000000 
00056d6b l       .debug_str	00000000 
00056db3 l       .debug_str	00000000 
00056dbc l       .debug_str	00000000 
00056e04 l       .debug_str	00000000 
00056e21 l       .debug_str	00000000 
00056e69 l       .debug_str	00000000 
00056e9f l       .debug_str	00000000 
00056ee7 l       .debug_str	00000000 
00056f1c l       .debug_str	00000000 
00056f64 l       .debug_str	00000000 
00056f9d l       .debug_str	00000000 
00056fe5 l       .debug_str	00000000 
00057001 l       .debug_str	00000000 
00057049 l       .debug_str	00000000 
00057051 l       .debug_str	00000000 
00057099 l       .debug_str	00000000 
000570b4 l       .debug_str	00000000 
000570fc l       .debug_str	00000000 
00057124 l       .debug_str	00000000 
0005716e l       .debug_str	00000000 
000571b8 l       .debug_str	00000000 
00057217 l       .debug_str	00000000 
00057274 l       .debug_str	00000000 
000572cd l       .debug_str	00000000 
0005732c l       .debug_str	00000000 
0005738b l       .debug_str	00000000 
000573ec l       .debug_str	00000000 
0005744f l       .debug_str	00000000 
000574b7 l       .debug_str	00000000 
00057519 l       .debug_str	00000000 
0005757f l       .debug_str	00000000 
000575e1 l       .debug_str	00000000 
00057646 l       .debug_str	00000000 
000576a9 l       .debug_str	00000000 
00057705 l       .debug_str	00000000 
0005775c l       .debug_str	00000000 
000577b5 l       .debug_str	00000000 
00057808 l       .debug_str	00000000 
00057864 l       .debug_str	00000000 
000578ca l       .debug_str	00000000 
00057920 l       .debug_str	00000000 
0005797d l       .debug_str	00000000 
000579df l       .debug_str	00000000 
00057a38 l       .debug_str	00000000 
00057a93 l       .debug_str	00000000 
00057aee l       .debug_str	00000000 
00057b49 l       .debug_str	00000000 
00057ba6 l       .debug_str	00000000 
00057c03 l       .debug_str	00000000 
00057c49 l       .debug_str	00000000 
00057c93 l       .debug_str	00000000 
00057cd3 l       .debug_str	00000000 
00057d10 l       .debug_str	00000000 
00057d54 l       .debug_str	00000000 
00057d90 l       .debug_str	00000000 
00057dd4 l       .debug_str	00000000 
00057e1d l       .debug_str	00000000 
00057e26 l       .debug_str	00000000 
00057e6f l       .debug_str	00000000 
00057e78 l       .debug_str	00000000 
00057ee1 l       .debug_str	00000000 
00057f3e l       .debug_str	00000000 
00057fa1 l       .debug_str	00000000 
00057ff7 l       .debug_str	00000000 
0005804d l       .debug_str	00000000 
000580a6 l       .debug_str	00000000 
000580fe l       .debug_str	00000000 
00058162 l       .debug_str	00000000 
000581e8 l       .debug_str	00000000 
000581ee l       .debug_str	00000000 
00058274 l       .debug_str	00000000 
0005827a l       .debug_str	00000000 
000582fc l       .debug_str	00000000 
0005837e l       .debug_str	00000000 
00058401 l       .debug_str	00000000 
00058408 l       .debug_str	00000000 
0005848b l       .debug_str	00000000 
00058492 l       .debug_str	00000000 
00058518 l       .debug_str	00000000 
0005859e l       .debug_str	00000000 
00058621 l       .debug_str	00000000 
000586a4 l       .debug_str	00000000 
00058726 l       .debug_str	00000000 
000587ac l       .debug_str	00000000 
00058832 l       .debug_str	00000000 
000588bc l       .debug_str	00000000 
00058944 l       .debug_str	00000000 
000589cc l       .debug_str	00000000 
00058a34 l       .debug_str	00000000 
00058a9d l       .debug_str	00000000 
00058b07 l       .debug_str	00000000 
00058b72 l       .debug_str	00000000 
00058bd0 l       .debug_str	00000000 
00058c2e l       .debug_str	00000000 
00058c8c l       .debug_str	00000000 
00058ceb l       .debug_str	00000000 
00058d49 l       .debug_str	00000000 
00058da8 l       .debug_str	00000000 
00058e06 l       .debug_str	00000000 
00058e65 l       .debug_str	00000000 
00058ec4 l       .debug_str	00000000 
00058f23 l       .debug_str	00000000 
00058f81 l       .debug_str	00000000 
00058fe0 l       .debug_str	00000000 
0005903f l       .debug_str	00000000 
0005909e l       .debug_str	00000000 
000590fd l       .debug_str	00000000 
0005915c l       .debug_str	00000000 
000591bb l       .debug_str	00000000 
0005921a l       .debug_str	00000000 
00059279 l       .debug_str	00000000 
000592d8 l       .debug_str	00000000 
00059337 l       .debug_str	00000000 
00059396 l       .debug_str	00000000 
000593f5 l       .debug_str	00000000 
00059454 l       .debug_str	00000000 
000594b3 l       .debug_str	00000000 
00059512 l       .debug_str	00000000 
00059571 l       .debug_str	00000000 
000595d0 l       .debug_str	00000000 
0005962f l       .debug_str	00000000 
0005968e l       .debug_str	00000000 
000596ee l       .debug_str	00000000 
0005974d l       .debug_str	00000000 
000597ac l       .debug_str	00000000 
0005980b l       .debug_str	00000000 
0005986b l       .debug_str	00000000 
000598ca l       .debug_str	00000000 
00059929 l       .debug_str	00000000 
00059988 l       .debug_str	00000000 
000599e8 l       .debug_str	00000000 
000177fa l     F .text	00000012 _ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE
00019818 l     F .text	0000000a _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E
00019822 l     F .text	0000000c _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E
00017e9e l     F .text	000000e4 _ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE
00018ec6 l     F .text	0000024c _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE
00017d98 l     F .text	000000b0 _ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E
00017e48 l     F .text	00000024 _ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE
000183c0 l     F .text	00000032 _ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E
000177aa l     F .text	00000002 _ZN4core3ptr13drop_in_place17h000c7c147ade2111E
0001780c l     F .text	00000114 _ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E
00021e8c l     O .text	0000007b _ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E
00021f07 l     O .text	000001f0 _ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E
000220f8 l     O .text	00000458 _ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E
00021460 l     O .text	00000010 _ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE
00017e72 l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE
00017e78 l     F .text	00000026 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE
00017e6c l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E
000177ac l     F .text	0000004e _ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE
00000000 l    df *ABS*	00000000 semihosting_console.c
00019830 l     F .text	00000024 __semihost
00019854 l     F .text	00000010 debugger_connected
00019864 l     F .text	0000002e semihost_write
00019938 l     F .text	0000001c semihosting_console_write_ch
20006f04 l     O .bss	00000004 semihost_mbuf
20000100 l     O .data	00000001 log_enabled
00000000 l    df *ABS*	00000000 console.c
20006f08 l     O .bss	00000010 avail_queue
20006f18 l     O .bss	0000000c console_write_lock
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
20006f24 l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 sysinit.c
00019b08 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 hal_gpio.c
00019b5c l     F .text	00000050 hal_gpio_irq_handler
00019bac l     F .text	0000002c hal_gpio_irq_setup
00019bd8 l     F .text	0000001c hal_gpio_find_empty_slot
00019bf4 l     F .text	00000038 hal_gpio_find_pin
20006f28 l     O .bss	00000040 hal_gpio_irqs
20006f68 l     O .bss	00000001 irq_setup.8906
00000000 l    df *ABS*	00000000 hal_i2c.c
00019d88 l     F .text	0000007a hal_i2c_delay_us
00019e04 l     F .text	00000024 hal_i2c_resolve
00019e28 l     F .text	0000001c hal_i2c_convert_status
00019e44 l     F .text	00000012 read_gpio_inbuffer
00019e56 l     F .text	000000a2 hal_i2c_clear_bus
00022560 l     O .text	00000008 nrf52_hal_i2cs
00000000 l    df *ABS*	00000000 hal_spi.c
0001a1f4 l     F .text	0000006e nrf52_irqm_handler
0001a27c l     F .text	00000014 hal_spi_stop_transfer
0001a290 l     F .text	0000004c hal_spi_config_slave
0001a2dc l     F .text	000000b8 hal_spi_init_master
0001a394 l     F .text	000000e0 hal_spi_config_master
00022568 l     O .text	0000000c nrf52_hal_spis
00000000 l    df *ABS*	00000000 hal_watchdog.c
0001a778 l     F .text	0000000e nrf52_hal_wdt_default_handler
0001a788 l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
0001a9a0 l     F .text	00000016 os_main
20007070 l     O .bss	00002000 g_os_main_stack
20006f70 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
0001acb0 l     F .text	0000005c os_dev_add
0001ad0c l     F .text	00000026 os_dev_initialize
0001ad32 l     F .text	00000020 os_dev_init
20009070 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
20009078 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mempool.c
0001b25c l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
0001b370 l     F .text	00000010 os_msys_find_biggest_pool
0001b380 l     F .text	0000002c os_msys_find_pool
0001b3f8 l     F .text	00000044 os_msys_init_once
20009088 l     O .bss	00004900 os_msys_1_data
2000d988 l     O .bss	0000000c os_msys_1_mbuf_pool
2000d994 l     O .bss	0000001c os_msys_1_mempool
2000010c l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
0001b654 l     F .text	00000020 os_sanity_check_list_lock
0001b674 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
0001bae8 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
0001bbd8 l     F .text	0000004c os_deltatime
0001bc24 l     F .text	0000005c os_time_tick
2000d9b8 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
0001bf40 l       .text	00000000 SVC_User
0001bf5e l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 memcmp.c
0001c000 l       .text	00000000 test1
0001bff4 l       .text	00000000 loop1
0001c006 l       .text	00000000 res1
0001c022 l       .text	00000000 test2
0001c02a l       .text	00000000 done
0001c016 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
0001c036 l       .text	00000000 test1
0001c032 l       .text	00000000 loop1
0001c044 l       .text	00000000 test2
0001c040 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 tinyprintf.c
0001c0ae l     F .text	000000c0 ui2a
0001c16e l     F .text	00000020 i2a
0001c18e l     F .text	00000030 a2d
0001c1be l     F .text	00000036 a2i
0001c1f4 l     F .text	0000002a putf
0001c220 l     F .text	0000011c putchw
0001c33c l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 mynewt.c
0001c6c0 l     F .text	00000004 stdin_read
0001c6c4 l     F .text	00000010 stdout_write
20000124 l     O .data	00000004 _stdin
20000128 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 mynewt_rust.c
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysinit-app.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001c774 l     F .text	00000028 nrf52k_flash_wait_ready
0001c79c l     F .text	00000054 nrf52k_flash_erase_sector
0001c7f0 l     F .text	00000004 nrf52k_flash_init
0001c7f4 l     F .text	00000020 nrf52k_flash_sector_info
0001c814 l     F .text	000000d0 nrf52k_flash_write
0001c8e4 l     F .text	0000000e nrf52k_flash_read
00022720 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
0001c8f4 l     F .text	000000d4 nrf52_timer_handler
00000000 l    df *ABS*	00000000 hal_timer.c
0001cb00 l     F .text	0000000a nrf_read_timer_cntr
0001cb0c l     F .text	000000b4 nrf_timer_set_ocmp
0001cbc0 l     F .text	0000000a nrf_timer_disable_ocmp
0001cbca l     F .text	0000000a nrf_rtc_disable_ocmp
0001cbd4 l     F .text	00000054 hal_timer_read_bsptimer
0001cc28 l     F .text	00000076 hal_timer_chk_queue
0001cc9e l     F .text	0000002c hal_timer_irq_handler
0002273c l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 nrf52_periph.c
0001ce64 l     F .text	00000034 nrf52_periph_create_timers
0001ce98 l     F .text	00000020 nrf52_periph_create_i2c
0001ceb8 l     F .text	00000020 nrf52_periph_create_spi
00022754 l     O .text	0000000c hal_i2c1_cfg
00022760 l     O .text	00000004 os_bsp_spi0m_cfg
00000000 l    df *ABS*	00000000 sensor_creator.c
00000000 l    df *ABS*	00000000 sensor.c
0001ceec l     F .text	00000028 sensor_mgr_remove
0001cf14 l     F .text	00000060 sensor_mgr_insert
0001cf74 l     F .text	0000000a sensor_type_traits_empty
0001cf80 l     F .text	0000000c sensor_mgr_evq_set
0001cfba l     F .text	0000005c sensor_read_data_func
0001d018 l     F .text	00000048 sensor_base_ts_update_event
0001d060 l     F .text	00000050 sensor_up_timestamp
0001d0e8 l     F .text	000000a0 sensor_mgr_init
0001d354 l     F .text	0000007c sensor_mgr_wakeup_event
0001d1b2 l     F .text	00000032 sensor_update_nextrun
0001d1e4 l     F .text	0000001e sensor_calc_nextrun_delta
0001d204 l     F .text	00000024 sensor_find_min_nextrun_sensor
0001d2dc l     F .text	0000004a sensor_mgr_poll_bytype
0001d326 l     F .text	0000002e sensor_poll_per_type_trait
2000d9ec l     O .bss	00000078 sensor_notify_evt_area
2000da64 l     O .bss	0000001c sensor_notify_evt_pool
00000000 l    df *ABS*	00000000 sensor_coap.c
2000da80 l     O .bss	00000008 oc_sem
2000da88 l     O .bss	00000001 oc_sensor_coap_ready
00000000 l    df *ABS*	00000000 sensor_network.c
2000da8c l     O .bss	0000000c hw_id
2000da98 l     O .bss	00000004 hw_id_len
2000daa0 l     O .bss	00000008 sensor_node_address
2000daa8 l     O .bss	00000037 sensor_node_names_buf
20000130 l     O .data	00000014 sensor_node_names
00022778 l     O .text	0000000c COLLECTOR_NODE_HW_ID
00022784 l     O .text	0000003c SENSOR_NODE_HW_IDS
00022820 l     O .text	00000028 sensor_node_addresses
00000000 l    df *ABS*	00000000 creator.c
0001d578 l     F .text	00000050 config_device
2000dae0 l     O .bss	00000014 adc_1_itf_temp_stub
2000daf8 l     O .bss	000000c0 temp_stub_dev
00000000 l    df *ABS*	00000000 temp_stub.c
0001d624 l     F .text	00000004 temp_stub_close
0001d628 l     F .text	0000001c temp_stub_sensor_get_config
0001d644 l     F .text	00000026 temp_stub_open
0001d720 l     F .text	0000007c temp_stub_sensor_read
00022864 l     O .text	00000028 g_temp_stub_sensor_driver
00000000 l    df *ABS*	00000000 oc_buffer.c
0001d7c4 l     F .text	00000030 oc_buffer_tx
0001d7f4 l     F .text	0000002c oc_buffer_rx
2000dbb8 l     O .bss	00000018 oc_inq
2000dbd0 l     O .bss	00000018 oc_outq
00000000 l    df *ABS*	00000000 oc_ri.c
2000dbe8 l     O .bss	000000c8 oc_client_cb_area
2000dcb0 l     O .bss	0000001c oc_client_cb_pool
00000000 l    df *ABS*	00000000 adaptor.c
2000dccc l     O .bss	00000004 oc_evq
00000000 l    df *ABS*	00000000 ble_adaptor.c
00000000 l    df *ABS*	00000000 ip4_adaptor.c
00000000 l    df *ABS*	00000000 ip_adaptor.c
00000000 l    df *ABS*	00000000 lora_adaptor.c
00000000 l    df *ABS*	00000000 serial_adaptor.c
00000000 l    df *ABS*	00000000 oc_rep.c
2000dcd0 l     O .bss	0000001c oc_rep_objects
2000dcec l     O .bss	00000030 oc_rep_objects_area
00000000 l    df *ABS*	00000000 flash_map.c
0001d948 l     F .text	00000078 flash_map_read_mfg
2000dd1c l     O .bss	00000078 mfg_areas.9056
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 mfg.c
0001da9c l     F .text	00000094 mfg_seek_next_aux
0001db30 l     F .text	00000070 mfg_read_mmr
0001dba0 l     F .text	00000054 mfg_read_next_mmr
0001dbf4 l     F .text	0000003c mfg_open_flash_area
0001dc30 l     F .text	00000044 mfg_read_tlv_body
0001dcfc l     F .text	0000004e mfg_read_mmr_refs
2000dd94 l     O .bss	00000001 mfg_initialized
2000dd98 l     O .bss	00000018 mfg_mmrs
2000ddb0 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 support.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001dd62 l     F .text	0000001e hal_flash_check_addr
00000000 l    df *ABS*	00000000 nrf52_hw_id.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 aeabi_memclr.c
00000000 l    df *ABS*	00000000 aeabi_memcpy.c
00000000 l    df *ABS*	00000000 lib_a-aeabi_memset-soft.o
00000000 l    df *ABS*	00000000 libchip8.bde0u64m-cgu.0
00000afc l       .debug_str	00000000 
00019f84 l       .debug_str	00000000 
00019fdb l       .debug_str	00000000 
0001162b l       .debug_str	00000000 
0001a027 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0001a02f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysflash.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
000179b0 g     F .text	00000004 _ZN4core5panic8Location4line17h650a566d9637c91dE
000155d4 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE
00008616 g     F .text	000000ba main
00014d00 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE
00009f6e g     F .text	0000070a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E
0001af80 g     F .text	00000040 os_eventq_remove
0000a704 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h00c2f0b87edee24bE
0001bdcc g     F .text	00000018 os_arch_init
0001bfe8 g     F .text	00000048 memcmp
000120f6 g     F .text	00000012 _ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE
00017454 g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE
000162c0 g     F .text	00000024 _ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE
000115d0 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E
000148e4 g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E
0001246c g     F .text	000000ee _ZN3log17__private_api_log17h076f8f4ccc99f19bE
00017134 g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE
00016fbc g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E
0001461c g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE
000145b0 g     F .text	00000002 _ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E
000179e0 g     F .text	00000040 _ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E
0000a6e6 g     F .text	0000001e .hidden _ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE
000090a0 g     F .text	00000010 _ZN4core3ptr5write17h7ef3fa6b6f80daebE
000147b0 g     F .text	0000005a _ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE
00019640 g     F .text	000000f4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$isize$GT$3fmt17hc96955e2b836ab47E
2000ded0 g     O .bss	0000001c nrf52_hal_timer0
00014b4c g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E
00009086 g     F .text	0000001a _ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE
000149c2 g     F .text	00000020 _ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE
0001d1a8 g     F .text	0000000a sensor_unlock
0000ab9a g     F .text	00000036 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E
00014af0 g     F .text	0000001e _ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E
000097f6 g     F .text	00000118 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E
00011624 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E
00014ad4 g     F .text	0000001c _ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE
00016a24 g     F .text	00000008 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E
00008ef2 g     F .text	0000006c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E
0001b6a0 g     F .text	00000024 os_sanity_check_register
0001d678 g     F .text	0000007c temp_stub_init
0001b740 g     F .text	00000054 os_sched_insert
2000ddb4 g     O .bss	00000001 g_silence_console
0001501a g     F .text	00000050 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E
000158ee g     F .text	0000028a _ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E
000150d2 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E
00012788 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE
00016db2 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE
00008164  w    F .text	00000002 POWER_CLOCK_IRQHandler
0001de00 g     F .text	00000034 hal_bsp_hw_id
00008164  w    F .text	00000002 NFCT_IRQHandler
0001777c g     F .text	00000004 .hidden _ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE
0000d272 g     F .text	00000052 _ZN8libchip814Chip8$LT$T$GT$3run17h13983ef8bbdf8d15E
000148a8 g     F .text	00000018 _ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E
00016a74 g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117hdc09c81c55dd3f27E
00009980 g     F .text	00000162 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE
0001606a g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE
00008c5e g     F .text	00000012 _ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE
0001545a g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE
0001928c g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE
0001778e g     F .text	0000001c _ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E
00014d64 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE
000151be g     F .text	00000024 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE
00011814 g     F .text	00000086 _ZN4core3cmp6max_by17h3c9686db40e0f078E
00008a9c g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E
20000114 g     O .data	00000008 g_os_run_list
00015634 g     F .text	0000004a _ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E
0001d884 g     F .text	00000020 oc_send_buffer
0001be74 g     F .text	00000030 os_arch_start
00015544 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE
0000a778 g     F .text	0000001a _ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E
0001d49c g     F .text	0000001a is_standalone_node
000087d2 g     F .text	00000054 _ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE
0001ae6c g     F .text	00000010 os_eventq_init
0001889e g     F .text	00000044 _ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E
00012818 g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E
00017f82 g     F .text	00000022 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E
0001160e g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E
00008d54 g     F .text	0000001a _ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE
00017336 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE
0001d3d0 g     F .text	00000028 init_sensor_coap
00017048 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE
0001d8a4 g     F .text	0000004c oc_send_multicast_message
0001607a g     F .text	0000008c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE
00011e16 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E
0001885a g     F .text	00000044 _ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE
2000def0 g     O .bss	00000034 sensor_mgr
0000ce80 g     F .text	00000106 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E
000199d4 g     F .text	0000002c console_dump
0001b86c g     F .text	00000078 os_sched_wakeup
00017626 g     F .text	0000011c .hidden _ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE
00012718 g     F .text	0000001a _ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E
00019420 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17h6ff113c3a96d4445E
00008ad4 g     F .text	00000026 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E
0001dd60 g     F .text	00000002 _fini
0001aca4 g     F .text	0000000a os_cputime_get32
000116d4 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E
00014452 g     F .text	00000132 _ZN6mynewt3hal4GPIO4init17h54c34caf27320956E
2000ddb5 g     O .bss	00000001 g_console_input_ignore
0000bfea g     F .text	0000009a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc05aa4c9ca2355e9E
0001bd5c g     F .text	00000014 os_arch_ctx_sw
0001140e g     F .text	00000028 .hidden _ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E
0001275e g     F .text	0000001a _ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E
00014e8e g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE
0001bfaa g     F .text	0000000c SysTick_Handler
0000c098 g     F .text	000000c4 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17ha2f93e171d68b34dE
0001d410 g     F .text	00000070 get_hardware_id
00008168 g     F .text	00000010 _sbrkInit
00012218 g     F .text	0000003c _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E
0001163a g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE
000093d8 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE
00011394 g     F .text	0000004c _ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h78483ea72c740878E
00008a74 g     F .text	00000012 _ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E
0001c082 g     F .text	0000001c strcmp
0000bae0 g     F .text	00000136 .hidden _ZN3app5chip88on_start17h473d234c4f7ef3a3E
00016046 g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE
2000dde8 g     O .bss	00000050 g_idle_task
0001ae5c g     F .text	00000010 os_dev_reset
00017546 g     F .text	00000010 _ZN4core3ptr5write17h147d4643d861e927E
00009484 g     F .text	00000262 _ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E
0001b9bc g     F .text	00000010 os_sem_init
0000ce0c g     F .text	00000014 _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hae3f210639d0333dE
00016b8e g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E
00019954 g     F .text	00000070 console_printhex
0000adfe g     F .text	00000270 .hidden _ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E
0000885c g     F .text	0000003a _ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE
00014648 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE
00022924 g       .text	00000000 __exidx_start
0001d480 g     F .text	0000001c is_collector_node
00010fe6 g     F .text	00000106 _ZN8libchip814Chip8$LT$T$GT$5sched17h92ff4f7288c44a1cE
00017556 g     F .text	00000036 _ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE
0001589e g     F .text	00000050 _ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E
0001c04a g     F .text	00000038 memset
00008164  w    F .text	00000002 WDT_IRQHandler
00019170 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17h096b8fea83a9dea7E
000115aa g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17hc90e18db8965d900E
000198e4 g     F .text	00000054 console_buffer
0001ae7c g     F .text	0000000a os_eventq_inited
00019b1c g     F .text	0000000c sysinit_end
00016f6a g     F .text	00000052 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE
000173c6 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE
0000d0e4 g     F .text	00000014 _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h0cf1484d4454de12E
00008020 g       .text	00000000 __isr_vector_start
00008164  w    F .text	00000002 TIMER3_IRQHandler
00008164  w    F .text	00000002 MWU_IRQHandler
00017958 g     F .text	0000004a _ZN4core6result13unwrap_failed17h10957bfda7d5e5f2E
2000df88 g       .bss	00000000 __HeapBase
00011476 g     F .text	0000000e _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hfd187d35ce50ccf5E
0001506a g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE
00014fb8 g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E
00009384 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E
0000882e g     F .text	0000002e _ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E
0000a74a g     F .text	00000012 _ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E
00014584 g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E
0000bd20 g     F .text	000001f6 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E
0001492c g     F .text	00000096 _ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E
0001da00 g     F .text	00000026 flash_area_read
00012748 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E
0001d916 g     F .text	00000002 oc_register_ip4
00008faa g     F .text	00000046 _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E
0001d918 g     F .text	00000002 oc_register_ip6
0000842c g     F .text	000001d4 SystemInit
00016e40 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE
0001dd80 g     F .text	00000028 hal_flash_init
0001ae24 g     F .text	00000036 os_dev_close
000228bc g     O .text	00000048 sysflash_map_dflt
000110ec g     F .text	0000007e _ZN8libchip814Chip8$LT$T$GT$5setup17h497508a9d15b56c5E
0001c768 g     F .text	0000000c hal_bsp_init
00008b80 g     F .text	00000032 _ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E
0001636c g     F .text	000005e0 _ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE
00011f12 g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E
00008164  w    F .text	00000002 SWI0_EGU0_IRQHandler
00010e3c g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$4jump17h6461abfe105496f2E
00009b98 g     F .text	0000012c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE
00011dd8 g     F .text	00000032 _ZN4core3ptr4read17h2038b0ecb0975c4fE
0001e15c g     F .text	00000004 __aeabi_memcpy4
00016196 g     F .text	000000c6 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE
0001a5c0 g     F .text	0000002c hal_spi_set_txrx_cb
0001e154 g     F .text	00000006 __aeabi_memclr8
000086d0 g     F .text	00000102 rust_begin_unwind
2000ddb8 g     O .bss	00000004 console_is_midline
0001e154 g     F .text	00000006 __aeabi_memclr4
0000a73a g     F .text	00000010 _ZN4core3ptr13drop_in_place17h22ac77b3595708cdE
000080f8 g       .text	00000000 __isr_vector_end
0001a0b8 g     F .text	0000013c hal_i2c_master_read
00015152 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E
00011596 g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17h176187f37aedb66cE
0001c3a0 g     F .text	0000025c tfp_format
00017306 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE
0001d274 g     F .text	00000068 sensor_read
00016be4 g     F .text	00000058 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E
0000906c g     F .text	00000010 _ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E
00014b5c g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E
00015f9e g     F .text	0000006a _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE
0001e15c g     F .text	00000004 __aeabi_memcpy
0001e15c g     F .text	00000004 __aeabi_memcpy8
2000df24 g     O .bss	00000020 st_up_osco
0001bea4 g     F .text	0000005c os_arch_os_start
0001d256 g     F .text	0000001e sensor_init
00017742 g     F .text	00000032 .hidden _ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE
20000000 g       .bss	00000000 _ram_start
0001bccc g     F .text	00000026 os_time_delay
00014b6c g     F .text	0000002c _ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE
0000d114 g     F .text	00000108 _ZN8libchip814Chip8$LT$T$GT$3new17he723acd5a1e30b39E
0001d914 g     F .text	00000002 oc_register_gatt
20004a6c g     O .bss	00000004 _ZN3log20MAX_LOG_LEVEL_FILTER17h20753a6176f34564E
0001ddfc g     F .text	00000004 hal_bsp_hw_id_len
0001ac64 g     F .text	00000034 os_callout_wakeup_ticks
0001afda g     F .text	00000026 os_mqueue_get
00019ef8 g     F .text	00000098 hal_i2c_init
0001872c g     F .text	0000012e _ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E
00019170 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E
00008164  w    F .text	00000002 TIMER4_IRQHandler
0002082c g     O .text	00000050 _ZN8libchip87CHARBUF17h227c6d0d7e24574cE
00011996 g     F .text	00000092 _ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E
0001694c g     F .text	00000048 _ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E
000172d6 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E
0001b96c g     F .text	00000022 os_sched
00008c70 g     F .text	00000020 _ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE
00008164  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
000113f4 g     F .text	0000001a _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E
0001189a g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h5567184bcc425327E
00011f58 g     F .text	00000014 _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE
0000a7c8 g     F .text	00000010 _ZN4core3ptr13drop_in_place17hf625580841d3425eE
2000fe50 g       *ABS*	000001b0 __StackLimit
0001cf8c g     F .text	0000002e sensor_mgr_match_bytype
00011e2c g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE
00014a72 g     F .text	00000032 _ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E
0000ad1c g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE
0001b4a8 g     F .text	00000014 os_mutex_init
00008f5e g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E
00009f2a g     F .text	00000044 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE
2000ddc0 g     O .bss	00000028 nrf52_hal_spi0
0001135c g     F .text	00000038 _ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h7ad96dcc625b0805E
00008614 g     F .text	00000002 _init
00000020 g       *ABS*	00000000 _imghdr_size
000151e2 g     F .text	00000026 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E
00008164  w    F .text	00000002 RTC1_IRQHandler
0001203e g     F .text	00000008 _ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E
00008164  w    F .text	00000002 PDM_IRQHandler
00008164  w    F .text	00000002 CCM_AAR_IRQHandler
00008164  w    F .text	00000002 SWI3_EGU3_IRQHandler
00017246 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE
20000124 g       .data	00000000 __aeabi_unwind_cpp_pr0
00009214 g     F .text	0000001a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E
0000935a g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE
00008b78 g     F .text	00000008 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E
00012930 g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E
0001b44c g     F .text	00000028 os_msys_get_pkthdr
0001d6f4 g     F .text	0000002c temp_stub_get_raw_temperature
0001b8e4 g     F .text	0000003c os_sched_os_timer_exp
0001ad54 g     F .text	00000040 os_dev_create
0000a75c g     F .text	0000001c _ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E
000174d0 g     F .text	0000001a _ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E
00008164  w    F .text	00000002 SWI4_EGU4_IRQHandler
0001b690 g     F .text	00000010 os_sanity_check_init
00017a42 g     F .text	0000022c _ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE
00008164  w    F .text	00000002 SAADC_IRQHandler
0001ac98 g     F .text	0000000c os_cputime_init
0001af68 g     F .text	00000018 os_eventq_run
000123f8 g     F .text	0000000c _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE
0001b474 g     F .text	00000034 os_msys_init
00016a2c g     F .text	0000000e .hidden _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E
00016ddc g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E
0001bd52 g     F .text	0000000a timer_handler
0001179e g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE
00017780 g     F .text	0000000e .hidden _ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E
000092ea g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E
00008bb2 g     F .text	00000042 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E
00014aa4 g     F .text	00000018 _ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E
00017778 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E
00017a20 g     F .text	00000022 _ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E
000080f8 g     F .text	0000005c Reset_Handler
0000cbb8 g     F .text	0000002e .hidden _ZN3app5chip812handle_touch17habca32c74e5cefadE
000169ec g     F .text	0000002c _ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE
00008020 g       .text	000000d8 __isr_vector
00019420 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17heaf2297ac445d947E
00014c46 g     F .text	0000002a .hidden _ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE
0001c5fc g     F .text	00000008 vfprintf
00014608 g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E
00011f84 g     F .text	0000000a _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E
00011fe2 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E
0001b07a g     F .text	00000036 os_mbuf_get_pkthdr
00008164  w    F .text	00000002 PWM0_IRQHandler
000172a6 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E
00000000 g       .svc_table	00000000 SVC_Count
0000bce4 g     F .text	0000003c _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd1688355d8a270c9E
00011464 g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17hd96dff9de838f04eE
00018c2e g     F .text	00000298 _ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE
0000c984 g     F .text	00000234 _ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE
000162e4 g     F .text	00000088 _ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE
000179b4 g     F .text	0000002c _ZN4core9panicking5panic17h24d1dd0a9d540834E
0001bd82 g     F .text	0000000a os_arch_in_critical
000150be g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E
0001b730 g     F .text	00000010 os_sanity_init
000114dc g     F .text	000000ba _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E
00016a18 g     F .text	0000000c _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE
00014c70 g     F .text	0000001e _ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE
00019420 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E
00016d12 g     F .text	00000018 .hidden _ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17hc283e26c72ff63bbE
00014b0e g     F .text	0000001e _ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE
0001a844 g     F .text	0000004c __assert_func
00017034 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E
000153b0 g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE
00008164  w    F .text	00000002 SWI1_EGU1_IRQHandler
00014c8e g     F .text	0000001e _ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE
0001b31a g     F .text	0000001e os_memblock_put_from_cb
0001bf04 g     F .text	00000014 os_set_env
2000deac g     O .bss	00000004 g_os_last_ctx_sw_time
00008a86 g     F .text	0000000a _ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE
00019ab4 g     F .text	00000048 console_printf
00012792 g     F .text	00000016 .hidden _ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E
0000ac6c g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE
00011e58 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE
00012664 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E
000171e6 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E
0001bf18 g     F .text	00000006 os_arch_init_task_stack
0000c164 g     F .text	000000dc _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hee40d1bd360ff8d9E
0001dcec g     F .text	00000010 mfg_open
00019420 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$isize$GT$3fmt17hb33f6f1f0114a92bE
00016d2a g     F .text	0000005e .hidden _ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE
0001d848 g     F .text	00000030 oc_ri_mem_init
000096e6 g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE
0001c758 g     F .text	00000010 hal_bsp_flash_dev
0001da28 g     F .text	00000070 flash_map_init
2000dec0 g     O .bss	00000004 g_os_time
00014a5a g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E
00011452 g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h22a7212d28136f26E
0000ce02 g     F .text	0000000a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h430caac74862e039E
00015b78 g     F .text	00000392 _ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E
0001bfb6 g     F .text	0000001e os_default_irq_asm
0001a890 g     F .text	00000098 os_default_irq
200000e4 g     O .data	00000004 SystemCoreClock
0001a4f8 g     F .text	00000068 hal_spi_disable
0001616c g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E
000127d8 g     F .text	0000001c _ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E
0000903e g     F .text	0000002e _ZN6mynewt3sys7console6buffer17h6e460748855d110aE
0001d91a g     F .text	00000002 oc_register_lora
0001928c g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u16$GT$3fmt17hc265973c39f711faE
0001b0fc g     F .text	000000a8 os_mbuf_append
0001d5c8 g     F .text	0000005c temp_stub_create
0001dda8 g     F .text	00000054 hal_flash_read
00019894 g     F .text	00000048 console_flush
00017428 g     F .text	00000018 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE
00014abc g     F .text	00000018 _ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E
00010f3e g     F .text	000000a8 _ZN8libchip814Chip8$LT$T$GT$4tick17hbbabaa40bbcbc140E
0001aae4 g     F .text	0000001a os_start
0001ccdc g     F .text	00000060 hal_timer_init
0001164e g     F .text	00000086 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E
0001c6d4 g     F .text	00000010 rust_sysinit
00008164  w    F .text	00000002 I2S_IRQHandler
000199c4 g     F .text	00000010 console_printint
0001b990 g     F .text	0000002c os_sched_resort
000226fc g     O .text	00000008 MemFile_methods
0001c6a8 g     F .text	00000018 fmemopen_w
00013628 g     F .text	00000126 _ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E
0001a474 g     F .text	00000038 hal_spi_config
0001e150  w    F .text	00000002 .hidden __aeabi_ldiv0
0001b360 g     F .text	00000010 os_mempool_module_init
0001b960 g     F .text	0000000c os_sched_next_task
00016110 g     F .text	0000001a _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E
0000a792 g     F .text	00000010 _ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E
00019cb2 g     F .text	00000034 hal_gpio_read
0001ab38 g     F .text	0000001a os_callout_init
0001b43c g     F .text	00000010 os_msys_reset
0001c604 g     F .text	00000024 printf
00008156  w    F .text	00000002 HardFault_Handler
0001de54 g     F .text	00000000 .hidden __aeabi_uldivmod
0001bcf4 g     F .text	00000038 os_gettimeofday
00019a40 g     F .text	0000001e console_write
00017396 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E
000186f6 g     F .text	00000008 _ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE
000097e2 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE
0001a9c4 g     F .text	00000070 os_init_idle_task
0001bde4 g     F .text	0000008c os_arch_os_init
0001568a g     F .text	000001b6 _ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE
00009322 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E
0001122a g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$8shutdown17h099cb83aa147e3f4E
0001aa34 g     F .text	000000b0 os_init
2000de98 g     O .bss	00000008 g_os_mempool_list
000097d8 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE
00008184 g     F .text	00000010 hal_debugger_connected
0000a7a2 g     F .text	0000001e _ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE
00011e6e g     F .text	0000009a _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E
00019a3c g     F .text	00000004 semihosting_console_init
0001dc86 g     F .text	0000001a mfg_seek_next_with_type
0001b574 g     F .text	000000e0 os_mutex_pend
00008164  w    F .text	00000002 COMP_LPCOMP_IRQHandler
00016b46 g     F .text	00000026 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17h0b64f2ebc21519c0E
00019c90 g     F .text	00000022 hal_gpio_write
00008600 g     F .text	00000014 _start
00011f50 g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE
00011fb8 g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE
0001dd4c g     F .text	00000014 __wrap_coap_receive
00017216 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E
2000ddbc g     O .bss	00000001 sysinit_active
00016cd6 g     F .text	00000012 _ZN4core3mem4swap17h206518364108b51fE
00012854 g     F .text	0000006e .hidden _ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E
00014786 g     F .text	0000002a _ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE
0001c678 g     F .text	0000002e memfile_write
00010e28 g     F .text	00000014 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h6f4e867a15b2a6b1E
0001e150  w    F .text	00000002 .hidden __aeabi_idiv0
00016c80 g     F .text	00000030 .hidden _ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h91461b58eecc5a2aE
0001628a g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE
0001a9b8 g     F .text	0000000c os_started
00015f0a g     F .text	0000000a .hidden _ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE
0001d820 g     F .text	00000028 oc_buffer_init
000145b2 g     F .text	00000056 _ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE
00009306 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E
2000dea0 g     O .bss	0000000c g_os_sanity_check_mu
000090b0 g     F .text	0000002c .hidden _ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E
00016c5e g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E
00008164  w    F .text	00000002 UARTE0_UART0_IRQHandler
0001e154 g     F .text	00000006 __aeabi_memclr
0001e160 g     F .text	0000009a __aeabi_memset4
000129bc g     F .text	00000a7a _ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E
000186fe g     F .text	00000008 _ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE
00017440 g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E
000127a8 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E
0001bc8c g     F .text	00000040 os_time_advance
0001a4ac g     F .text	0000004c hal_spi_enable
0000cd1c g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17he08fd88bb8f02d0aE
0001dcb4 g     F .text	00000038 mfg_init
000140d2 g     F .text	00000010 _ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E
2000de38 g     O .bss	00000050 g_os_main_task
0000cd98 g     F .text	00000028 _ZN4core6option15Option$LT$T$GT$6as_mut17hb9c3376e35bf83bbE
0001e160 g     F .text	0000009a __aeabi_memset8
0001124a g     F .text	00000112 _ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4b335b02e3894d0aE
000191ce g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u16$GT$3fmt17hcd88e3dc15351fceE
00008b6c g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE
0002293c g       .ARM.exidx	00000000 __exidx_end
00008164  w    F .text	00000002 PWM1_IRQHandler
20000148 g     O .bss	00000018 _ZN22piet_embedded_graphics7display7DISPLAY17ha0ff10e671b220f2E
00017d40 g     F .text	00000058 _ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE
00008afa g     F .text	0000004e _ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE
00019734 g     F .text	000000e4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17hea84eef47d2fd641E
00019b28 g     F .text	00000034 NVIC_Relocate
00019b10 g     F .text	0000000c sysinit_start
00016272 g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E
000162a2 g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE
00022708 g     O .text	00000018 nrf52k_flash_dev
0001cd3c g     F .text	000000f8 hal_timer_config
00014a42 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E
0001485c g     F .text	0000004c _ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E
0001c664 g     F .text	00000014 vprintf
00008f90 g     F .text	0000001a _ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E
000198dc g     F .text	00000008 disable_buffer
0001705c g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E
2000de88 g     O .bss	00000004 g_os_started
000179a8 g     F .text	00000008 _ZN4core5panic9PanicInfo7payload17h9302c8d957737573E
00014a02 g     F .text	00000020 _ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E
20000144 g       .bssnz	00000000 __bssnz_end__
0001adc0 g     F .text	00000020 os_dev_lookup
000155a4 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E
00009208 g     F .text	0000000c _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E
0001a820 g     F .text	00000010 hal_watchdog_enable
2000dec4 g     O .bss	0000000c g_hal_os_tick
0001123a g     F .text	00000010 _ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha6283b9e8d8dfa4aE
00016fce g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E
0001bd7c g     F .text	00000006 os_arch_restore_sr
0001ab90 g     F .text	00000078 os_callout_reset
000097ec g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE
0001dca0 g     F .text	0000000a mfg_read_tlv_flash_area
000127f4 g     F .text	00000024 _ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E
0000815a  w    F .text	00000002 BusFault_Handler
0001625c g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E
0001afc8 g     F .text	00000012 os_mqueue_init
00011a28 g     F .text	00000052 _ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE
00017276 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E
0001526a g     F .text	00000052 _ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E
0001d66a g     F .text	0000000e temp_stub_default_cfg
00012828 g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E
00008020 g       .imghdr	00000000 __text
0001ab54 g     F .text	0000003c os_callout_stop
00015208 g     F .text	00000062 _ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E
000081c0 g     F .text	0000004c hal_system_clock_start
0001b0c4 g     F .text	00000024 os_mbuf_free_chain
000090dc g     F .text	0000000a .hidden _ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E
0001c6e4 g     F .text	00000030 mem_init_mbuf_pool
0001284c g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E
00008a90 g     F .text	0000000c _ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E
00016fe0 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E
00019f90 g     F .text	00000128 hal_i2c_master_write
00015604 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E
0000c15c g     F .text	00000008 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17h49979d340fb4b88bE
00008164  w    F .text	00000002 QDEC_IRQHandler
00008164  w    F .text	00000002 SWI5_EGU5_IRQHandler
00016b24 g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17hd4e34d1323470418E
0001299e g     F .text	0000001e _ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E
00011c2c g     F .text	0000003a _ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E
00016008 g     F .text	0000001a _ZN4core5slice14from_raw_parts17h1425df913744b73aE
0001afc0 g     F .text	00000008 os_eventq_dflt_get
0001d190 g     F .text	00000018 sensor_lock
000115e6 g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE
000088c6 g     F .text	00000016 _ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17he532d8d46bba5cdfE
00019a68 g     F .text	0000004c console_pkg_init
20000104 g     O .data	00000004 sysinit_panic_cb
0001b0e8 g     F .text	00000014 os_mbuf_len
0001b0b0 g     F .text	00000014 os_mbuf_free
00015840 g     F .text	0000005e _ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E
00014b98 g     F .text	000000ae _ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E
00011e42 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE
00012404 g     F .text	0000000a _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE
00008194 g     F .text	0000002c hal_system_reset
00019a5e g     F .text	00000008 console_blocking_mode
0001567e g     F .text	0000000c _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E
0000c084 g     F .text	00000014 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hed066ffbd9b90541E
0000a7d8 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE
00009cc4 g     F .text	00000266 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE
000115fa g     F .text	0000000c _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E
0001ced8 g     F .text	00000010 nrf52_periph_create
00015f5c g     F .text	00000042 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E
0001b6c4 g     F .text	0000006c os_sanity_run
00016a3a g     F .text	0000003a .hidden _ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE
00016cc8 g     F .text	0000000e .hidden _ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h32b550ec8df70192E
0000841c g     F .text	00000010 SystemCoreClockUpdate
0001464e g     F .text	0000007e .hidden _ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE
000148c0 g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E
000174ea g     F .text	0000001a _ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE
00008896 g     F .text	00000030 _ZN4core3any6TypeId2of17haae5124a9f275cb8E
0001b2d4 g     F .text	00000014 os_mempool_init
00022704 g     O .text	00000004 stdout
0000adcc g     F .text	0000000e .hidden _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE
0000cdc0 g     F .text	00000042 _ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E
0001ad94 g     F .text	0000002c os_dev_initialize_all
00008c90 g     F .text	000000b4 _ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E
000149e2 g     F .text	00000020 _ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E
0000bf16 g     F .text	000000d4 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7d82f7c01359a92aE
0001700a g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE
0001a928 g     F .text	00000078 os_idle_task
00010e04 g     F .text	00000024 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h49e76ed73fb545efE
00008d44 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h1982c2483e0a2028E
0001714c g     F .text	0000000a .hidden _ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE
0000a71c g     F .text	0000001e _ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE
00017414 g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E
00009ae2 g     F .text	000000b6 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE
000183f4 g     F .text	00000302 _ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE
0001d9c0 g     F .text	00000040 flash_area_open
0001612a g     F .text	00000028 _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E
00015f52 g     F .text	0000000a _ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E
00014908 g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE
00008164 g     F .text	00000002 Default_Handler
000179a6 g     F .text	00000002 _ZN4core5panic8Location6caller17h4b6b61f9498709a3E
0000922e g     F .text	000000bc _ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E
0001b3ac g     F .text	0000004c os_msys_register
00016152 g     F .text	0000001a _ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE
000090e6 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E
2000d9b0 g     O .bss	00000004 g_os_sanity_check_list
0000abd0 g     F .text	00000066 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E
00011f8e g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE
00011b68 g     F .text	0000001c _ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E
0001a560 g     F .text	00000060 hal_spi_init
00008164  w    F .text	00000002 RNG_IRQHandler
0001d0cc g     F .text	00000010 sensor_mgr_unlock
2000df80 g     O .bss	00000004 flash_map_entries
00019112 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17hb1f1dec5462292d8E
00017156 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E
00014fca g     F .text	00000050 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE
0001d91c g     F .text	00000002 oc_register_serial
00008178 g     F .text	0000000c hal_system_init
00010ec2 g     F .text	00000026 _ZN8libchip814Chip8$LT$T$GT$4next17hcff432de15657423E
00015504 g     F .text	00000010 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E
0000a804 g     F .text	00000396 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E
00014632 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE
00014cac g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E
00008164  w    F .text	00000002 GPIOTE_IRQHandler
00012108 g     F .text	000000aa _ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E
00008164  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
0001dc74 g     F .text	00000012 mfg_seek_next
0000bcda g     F .text	0000000a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17h1f2d81332a8bf311E
0000d21c g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$3pop17h6d2ddb52680323d8E
000152bc g     F .text	0000004a _ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E
00015574 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E
0001240e g     F .text	00000008 _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE
00014cd6 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE
2000011c g     O .data	00000008 g_os_sleep_list
00018164 g     F .text	0000025c _ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E
0000cf86 g     F .text	0000013c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E
0001758c g     F .text	00000058 _ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE
0001b03e g     F .text	0000000a os_mbuf_pool_init
2000de90 g     O .bss	00000008 g_callout_list
0001b7d0 g     F .text	0000000c os_sched_set_current_task
0001ac08 g     F .text	0000005c os_callout_tick
000175e4 g     F .text	00000042 _ZN4core3ptr4read17h38cf3848f1a0f2ccE
00009102 g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE
00012070 g     F .text	0000007c _ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E
000173fe g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E
0000cc82 g     F .text	0000009a _ZN4core6option15Option$LT$T$GT$3map17h777637a15c6c2d41E
0001a7a8 g     F .text	00000078 hal_watchdog_init
2000deb4 g     O .bss	00000001 g_task_id
000194f6 g     F .text	0000007a _ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E
0000a7c0 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17hef1277471241eea2E
0000adda g     F .text	00000024 .hidden _ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h44bec417aa74de39E
0001ade0 g     F .text	00000044 os_dev_open
2000deb0 g     O .bss	00000004 g_current_task
00017774 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE
20000148 g       .bss	00000000 __bss_start__
000170c8 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E
00008b60 g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE
0001a264 g     F .text	00000018 nrf52_spi0_irq_handler
0001d188 g     F .text	00000008 sensor_pkg_init
00016ce8 g     F .text	0000002a _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h7f385561cf81b0ffE
0001d79c g     F .text	00000028 temp_stub_config
0001b000 g     F .text	0000003e os_mqueue_put
00019734 g     F .text	000000e4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE
0001a5ec g     F .text	000000ac hal_spi_txrx
00008164  w    F .text	00000002 RTC2_IRQHandler
0001b7c4 g     F .text	0000000c os_sched_get_current_task
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
00012680 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E
0001da98 g     F .text	00000002 modlog_init
00014f54 g     F .text	00000052 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E
00015f14 g     F .text	0000003e _ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE
0001a698 g     F .text	000000e0 hal_spi_txrx_noblock
00017920 g     F .text	00000038 _ZN4core6option13expect_failed17had6579abaad447b4E
00018706 g     F .text	00000026 _ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE
0000907c g     F .text	0000000a _ZN6mynewt3sys7console5flush17h78b2f38352f0d691E
00008164  w    F .text	00000002 TEMP_IRQHandler
00008ece g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE
0001b794 g     F .text	00000030 os_sched_ctx_sw_hook
0001d228 g     F .text	0000002e sensor_mgr_register
00017958 g     F .text	0000004a _ZN4core6option18expect_none_failed17h54d938081af97677E
00017fa4 g     F .text	000001c0 _ZN4core3fmt5write17hd95ac78ed22a2252E
0000d0c2 g     F .text	00000008 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcdf096192109e52aE
00008154  w    F .text	00000002 NMI_Handler
0001459a g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE
0000917e g     F .text	0000008a _ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE
000174c2 g     F .text	0000000e .hidden _ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E
00010ee8 g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$4push17h7ae96cacff0c5af9E
00008d4c g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E
00011e0a g     F .text	0000000c _ZN4core3ptr5write17h4a80332de2cee3d3E
00016b6c g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h84bf0bac3f755209E
0001b048 g     F .text	00000032 os_mbuf_get
2000deb8 g     O .bss	00000008 g_os_task_list
00008928 g     F .text	0000014c _ZN6mynewt4Strn8validate17h1102378208cc75cdE
00017c6e g     F .text	000000d2 _ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E
0001c628 g     F .text	0000003a vsnprintf
00013470 g     F .text	00000090 _ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E
0000ce20 g     F .text	00000060 _ZN22piet_embedded_graphics7display18set_display_pixels17hd0f20e3b4184e9a6E
0001b4bc g     F .text	000000b8 os_mutex_release
00012416 g     F .text	00000056 _ZN3log6logger17hf609e7cc1c031552E
000121ca g     F .text	0000004e _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E
0001d0dc g     F .text	0000000c sensor_mgr_evq_get
00016994 g     F .text	00000058 _ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E
00011f6c g     F .text	00000018 _ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E
000150e6 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE
2000de8c g     O .bss	00000004 g_os_idle_ctr
00019c2c g     F .text	0000002c hal_gpio_init_in
00011f08 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE
00010e4c g     F .text	00000076 _ZN8libchip814Chip8$LT$T$GT$4load17h579031262a124884E
0000990e g     F .text	00000036 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E
0000cbe6 g     F .text	0000009c _ZN4core6option15Option$LT$T$GT$3map17h4590aa2e515a0418E
00008164  w    F .text	00000002 TIMER1_IRQHandler
0001cee8 g     F .text	00000002 sensor_dev_create
00011a7a g     F .text	0000008e _ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE
00008164  w    F .text	00000002 TIMER0_IRQHandler
000088dc g     F .text	00000010 _ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE
00019c58 g     F .text	00000038 hal_gpio_init_out
00008d6e g     F .text	00000160 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE
00011b9c g     F .text	00000012 _ZN4core3mem4swap17hc4afbec7b5ffb125E
000173f6 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E
00016106 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E
00016aac g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E
00009402 g     F .text	0000003e .hidden _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE
200000d8 g       .data	00000000 __data_start__
0001bc80 g     F .text	0000000c os_time_get
000179a8 g     F .text	00000008 _ZN4core5panic8Location4file17h61e77cb122865fdbE
0000a678 g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E
0001b338 g     F .text	00000026 os_memblock_put
00013500 g     F .text	00000128 _ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE
0001b7dc g     F .text	00000090 os_sched_sleep
00011f46 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE
0001d0b0 g     F .text	0000001c sensor_mgr_lock
0001116a g     F .text	000000c0 _ZN8libchip814Chip8$LT$T$GT$7waitkey17h0d68791b70d8fb4dE
0001de84 g     F .text	000002cc .hidden __udivmoddi4
00011606 g     F .text	00000008 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E
0001ca60 g     F .text	000000a0 os_tick_init
0001480a g     F .text	00000052 _ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E
000179a2 g     F .text	00000004 _ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E
00008164  w    F .text	00000002 RTC0_IRQHandler
00008ff0 g     F .text	00000044 _ZN6mynewt3sys7console5print17hc13a6743274d87fcE
0001b920 g     F .text	00000040 os_sched_wakeup_ticks
0000933e g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE
0001ce34 g     F .text	00000030 hal_timer_read
20000144 g       .data	00000000 __data_end__
00019d60 g     F .text	00000028 hal_gpio_irq_enable
0001d878 g     F .text	0000000c oc_evq_set
0001d3f8 g     F .text	00000018 is_sensor_node
00019112 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE
00011484 g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h16a139f0e332dd27E
0001d8f0 g     F .text	00000024 oc_init
0001934a g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u32$GT$3fmt17h54b904d9d5d295daE
0001934a g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h85ec06f2c95e1ecaE
0000971c g     F .text	000000bc _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE
000188e2 g     F .text	0000034c _ZN4core3str16slice_error_fail17h232f9181d55b3da9E
000171b6 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E
2000df48 g     O .bss	00000018 sensor_base_ts
00019640 g     F .text	000000f4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E
00016ea4 g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E
0002293c g       .ARM.exidx	00000000 __etext
000115be g     F .text	00000012 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h179b2f35245cc0dcE
000191ce g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E
00019afc g     F .text	0000000c console_get_ticks
00008164  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
00009034 g     F .text	0000000a _ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E
20000108 g     O .data	00000004 hal_twi_i2c1
00014dc8 g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E
0001bb00 g     F .text	000000d8 os_task_init
000162b6 g     F .text	0000000a _ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E
00008f68 g     F .text	00000028 _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E
00011b4e g     F .text	0000001a _ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE
00011f36 g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E
00017504 g     F .text	00000042 _ZN4core3ptr4read17h27a035d1812d8297E
000114b0 g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc3d267302cee5855E
00017366 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E
0001b9cc g     F .text	00000064 os_sem_release
0001e160 g     F .text	0000009a __aeabi_memset
0001b1a4 g     F .text	000000b8 os_mbuf_dup
0001bf64 g     F .text	00000046 PendSV_Handler
00012838 g     F .text	00000014 _ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E
0001bf1e g     F .text	00000046 SVC_Handler
00008826 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17he6c5bffce3c304d4E
0001bd70 g     F .text	0000000c os_arch_save_sr
00014a22 g     F .text	00000020 _ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E
00008164  w    F .text	00000002 PWM2_IRQHandler
0000815c  w    F .text	00000002 UsageFault_Handler
0001cccc g     F .text	00000010 nrf52_timer0_irq_handler
0001bd8c g     F .text	00000040 os_arch_task_stack_init
2000df88 g       .bss	00000000 __bss_end__
00016c3c g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E
0001b2e8 g     F .text	00000032 os_memblock_get
2000df84 g     O .bss	00000004 flash_map
00008164  w    F .text	00000002 RADIO_IRQHandler
00011c66 g     F .text	00000056 _ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE
00008164  w    F .text	00000002 TIMER2_IRQHandler
000116da g     F .text	000000c4 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E
0001a830 g     F .text	00000014 hal_watchdog_tickle
0000a70c g     F .text	00000010 _ZN4core3ptr13drop_in_place17h0697ea54608a328fE
00015514 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE
0001aeee g     F .text	0000007a os_eventq_get
0001de34 g     F .text	00000020 sprintf
0000d0ca g     F .text	0000001a _ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4e486716e9c6f20bE
0001bd2c g     F .text	00000026 os_time_ms_to_ticks
000088ec g     F .text	0000003c _ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E
000173fa g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E
0000ac36 g     F .text	00000036 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE
2000d9e8 g     O .bss	00000004 os_flags
0001d920 g     F .text	00000028 oc_rep_init
0001c030 g     F .text	0000001a memcpy
0001c714 g     F .text	00000044 sysinit_app
0001603c g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE
0000d2c4 g     F .text	00003b40 _ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E
000121b2 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E
00017186 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E
00019570 g     F .text	000000d0 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E
000140e2 g     F .text	0000036c _ZN6mynewt3hal3SPI4init17h97467ea724680fb5E
00012732 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE
00019a00 g     F .text	0000003c console_out_nolock
2000df60 g     O .bss	00000020 oc_transports
00019ce8 g     F .text	00000078 hal_gpio_irq_init
00014b2c g     F .text	00000020 _ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE
0001c09e g     F .text	00000010 strlen
0001ba30 g     F .text	000000b8 os_sem_pend
000117ba g     F .text	00000016 _ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE
0001c9c8 g     F .text	00000098 os_tick_idle
00012778 g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E
00016b02 g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE
00008164  w    F .text	00000002 SWI2_EGU2_IRQHandler
00000000 g       .svc_table	00000000 SVC_Table
000128c2 g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE
00016022 g     F .text	0000001a _ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E
2000fe50 g       *ABS*	00000000 __HeapLimit
0001ab00 g     F .text	00000038 os_pkg_init
20000144 g       .bssnz	00000000 __bssnz_start__
000093ae g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17had883e363867a05eE
000113e0 g     F .text	00000014 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h6c13765855842655E
00011b08 g     F .text	00000012 _ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E
0000a6cc g     F .text	0000001a .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E
00011436 g     F .text	0000001c _ZN4core4iter6traits8iterator8Iterator7flatten17ha4622b417599751bE
00015306 g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE
00008164  w    F .text	00000002 ECB_IRQHandler
0001444e g     F .text	00000004 _ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E
00016cb0 g     F .text	00000018 .hidden _ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E
00008158  w    F .text	00000002 MemoryManagement_Handler
0001934a g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$isize$GT$3fmt17hc11e05ad6528dc14E
000146cc g     F .text	000000ba _ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE
0001ae86 g     F .text	00000068 os_eventq_put
20010000 g       .bss	00000000 __StackTop
00015094 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E
00009944 g     F .text	0000003c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E
00011984 g     F .text	00000012 _ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE
00014fa6 g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE
0001dcaa g     F .text	0000000a mfg_read_tlv_mmr_ref
00008b48 g     F .text	00000018 _ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E
0001d4b8 g     F .text	000000c0 sensor_network_init
0001934a g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE
00016d88 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE
0000d0f8 g     F .text	0000001c _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h3b730fc436db22b7E
00008bf4 g     F .text	0000006a _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE
000127c0 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE



Disassembly of section .text:

00008020 <__isr_vector>:
    8020:	20010000 	.word	0x20010000
    8024:	000080f9 	.word	0x000080f9
    8028:	00008155 	.word	0x00008155
    802c:	00008157 	.word	0x00008157
	...
    804c:	0001bf1f 	.word	0x0001bf1f
	...
    8058:	0001bf65 	.word	0x0001bf65
    805c:	0001bfab 	.word	0x0001bfab
    8060:	00008165 	.word	0x00008165
    8064:	00008165 	.word	0x00008165
    8068:	00008165 	.word	0x00008165
    806c:	00008165 	.word	0x00008165
    8070:	00008165 	.word	0x00008165
    8074:	00008165 	.word	0x00008165
    8078:	00008165 	.word	0x00008165
    807c:	00008165 	.word	0x00008165
    8080:	00008165 	.word	0x00008165
    8084:	00008165 	.word	0x00008165
    8088:	00008165 	.word	0x00008165
    808c:	00008165 	.word	0x00008165
    8090:	00008165 	.word	0x00008165
    8094:	00008165 	.word	0x00008165
    8098:	00008165 	.word	0x00008165
    809c:	00008165 	.word	0x00008165
    80a0:	00008165 	.word	0x00008165
    80a4:	00008165 	.word	0x00008165
    80a8:	00008165 	.word	0x00008165
    80ac:	00008165 	.word	0x00008165
    80b0:	00008165 	.word	0x00008165
    80b4:	00008165 	.word	0x00008165
    80b8:	00008165 	.word	0x00008165
    80bc:	00008165 	.word	0x00008165
    80c0:	00008165 	.word	0x00008165
    80c4:	00008165 	.word	0x00008165
    80c8:	00008165 	.word	0x00008165
    80cc:	00008165 	.word	0x00008165
    80d0:	00008165 	.word	0x00008165
    80d4:	00008165 	.word	0x00008165
	...
    80e0:	00008165 	.word	0x00008165
    80e4:	00008165 	.word	0x00008165
    80e8:	00008165 	.word	0x00008165
    80ec:	00008165 	.word	0x00008165
    80f0:	00008165 	.word	0x00008165
    80f4:	00008165 	.word	0x00008165

000080f8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    80f8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    80fc:	4a0c      	ldr	r2, [pc, #48]	; (8130 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    80fe:	4b0d      	ldr	r3, [pc, #52]	; (8134 <.bss_zero_loop+0x34>)

00008100 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    8100:	429a      	cmp	r2, r3
    itt     lt
    8102:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    8104:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    8108:	e7fa      	blt.n	8100 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
    810a:	490b      	ldr	r1, [pc, #44]	; (8138 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    810c:	4a0b      	ldr	r2, [pc, #44]	; (813c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    810e:	4b0c      	ldr	r3, [pc, #48]	; (8140 <.bss_zero_loop+0x40>)

    subs    r3, r2
    8110:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    8112:	dd03      	ble.n	811c <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    8114:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    8116:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    8118:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    811a:	dcfb      	bgt.n	8114 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    811c:	4809      	ldr	r0, [pc, #36]	; (8144 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    811e:	490a      	ldr	r1, [pc, #40]	; (8148 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    8120:	f000 f822 	bl	8168 <_sbrkInit>

    LDR     R0, =SystemInit
    8124:	4809      	ldr	r0, [pc, #36]	; (814c <.bss_zero_loop+0x4c>)
    BLX     R0
    8126:	4780      	blx	r0

    BL      hal_system_init
    8128:	f000 f826 	bl	8178 <hal_system_init>

    LDR     R0, =_start
    812c:	4808      	ldr	r0, [pc, #32]	; (8150 <.bss_zero_loop+0x50>)
    BX      R0
    812e:	4700      	bx	r0
    ldr     r2, =__bss_start__
    8130:	20000148 	.word	0x20000148
    ldr     r3, =__bss_end__
    8134:	2000df88 	.word	0x2000df88
    ldr    r1, =__etext
    8138:	0002293c 	.word	0x0002293c
    ldr    r2, =__data_start__
    813c:	200000d8 	.word	0x200000d8
    ldr    r3, =__data_end__
    8140:	20000144 	.word	0x20000144
    LDR     R0, =__HeapBase
    8144:	2000df88 	.word	0x2000df88
    LDR     R1, =__HeapLimit
    8148:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
    814c:	0000842d 	.word	0x0000842d
    LDR     R0, =_start
    8150:	00008601 	.word	0x00008601

00008154 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    8154:	e7fe      	b.n	8154 <NMI_Handler>

00008156 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    8156:	e7fe      	b.n	8156 <HardFault_Handler>

00008158 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    8158:	e7fe      	b.n	8158 <MemoryManagement_Handler>

0000815a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    815a:	e7fe      	b.n	815a <BusFault_Handler>

0000815c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    815c:	e7fe      	b.n	815c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    815e:	e7fe      	b.n	815e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    8160:	e7fe      	b.n	8160 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    8162:	e7fe      	b.n	8162 <UsageFault_Handler+0x6>

00008164 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    8164:	e7fe      	b.n	8164 <Default_Handler>
    8166:	bf00      	nop

00008168 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
    8168:	4b02      	ldr	r3, [pc, #8]	; (8174 <_sbrkInit+0xc>)
    816a:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
    816c:	6059      	str	r1, [r3, #4]
    brk = base;
    816e:	6098      	str	r0, [r3, #8]
}
    8170:	4770      	bx	lr
    8172:	bf00      	nop
    8174:	200000d8 	.word	0x200000d8

00008178 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
    8178:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    817c:	2201      	movs	r2, #1
    817e:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
    8182:	4770      	bx	lr

00008184 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    8184:	4b02      	ldr	r3, [pc, #8]	; (8190 <hal_debugger_connected+0xc>)
    8186:	6818      	ldr	r0, [r3, #0]
}
    8188:	f000 0001 	and.w	r0, r0, #1
    818c:	4770      	bx	lr
    818e:	bf00      	nop
    8190:	e000edf0 	.word	0xe000edf0

00008194 <hal_system_reset>:
{
    8194:	b508      	push	{r3, lr}
        if (hal_debugger_connected()) {
    8196:	f7ff fff5 	bl	8184 <hal_debugger_connected>
    819a:	b100      	cbz	r0, 819e <hal_system_reset+0xa>
            asm("bkpt");
    819c:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    819e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    81a2:	4905      	ldr	r1, [pc, #20]	; (81b8 <hal_system_reset+0x24>)
    81a4:	68ca      	ldr	r2, [r1, #12]
    81a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    81aa:	4b04      	ldr	r3, [pc, #16]	; (81bc <hal_system_reset+0x28>)
    81ac:	4313      	orrs	r3, r2
    81ae:	60cb      	str	r3, [r1, #12]
    81b0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    81b4:	bf00      	nop
    81b6:	e7fd      	b.n	81b4 <hal_system_reset+0x20>
    81b8:	e000ed00 	.word	0xe000ed00
    81bc:	05fa0004 	.word	0x05fa0004

000081c0 <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
    81c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81c4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81c8:	4b0f      	ldr	r3, [pc, #60]	; (8208 <hal_system_clock_start+0x48>)
    81ca:	4013      	ands	r3, r2
    81cc:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    81d0:	d018      	beq.n	8204 <hal_system_clock_start+0x44>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    81d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81d6:	2201      	movs	r2, #1
    81d8:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    81da:	2100      	movs	r1, #0
    81dc:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
    81e0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
    81e4:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
    81e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81ea:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    81ee:	2b00      	cmp	r3, #0
    81f0:	d0f9      	beq.n	81e6 <hal_system_clock_start+0x26>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
    81f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81f6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81fa:	4b03      	ldr	r3, [pc, #12]	; (8208 <hal_system_clock_start+0x48>)
    81fc:	4013      	ands	r3, r2
    81fe:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    8202:	d1f0      	bne.n	81e6 <hal_system_clock_start+0x26>
                }
            }
        }
    }
#endif
}
    8204:	4770      	bx	lr
    8206:	bf00      	nop
    8208:	00010003 	.word	0x00010003

0000820c <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    820c:	4b0b      	ldr	r3, [pc, #44]	; (823c <errata_16+0x30>)
    820e:	781b      	ldrb	r3, [r3, #0]
    8210:	2b06      	cmp	r3, #6
    8212:	d001      	beq.n	8218 <errata_16+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8214:	2000      	movs	r0, #0
    8216:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8218:	4b09      	ldr	r3, [pc, #36]	; (8240 <errata_16+0x34>)
    821a:	681b      	ldr	r3, [r3, #0]
    821c:	f013 0f0f 	tst.w	r3, #15
    8220:	d107      	bne.n	8232 <errata_16+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8222:	4b08      	ldr	r3, [pc, #32]	; (8244 <errata_16+0x38>)
    8224:	681b      	ldr	r3, [r3, #0]
    8226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    822a:	2b30      	cmp	r3, #48	; 0x30
    822c:	d003      	beq.n	8236 <errata_16+0x2a>
    return false;
    822e:	2000      	movs	r0, #0
    8230:	4770      	bx	lr
    8232:	2000      	movs	r0, #0
    8234:	4770      	bx	lr
            return true;
    8236:	2001      	movs	r0, #1
}
    8238:	4770      	bx	lr
    823a:	bf00      	nop
    823c:	f0000fe0 	.word	0xf0000fe0
    8240:	f0000fe4 	.word	0xf0000fe4
    8244:	f0000fe8 	.word	0xf0000fe8

00008248 <errata_31>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8248:	4b0f      	ldr	r3, [pc, #60]	; (8288 <errata_31+0x40>)
    824a:	781b      	ldrb	r3, [r3, #0]
    824c:	2b06      	cmp	r3, #6
    824e:	d001      	beq.n	8254 <errata_31+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    8250:	2000      	movs	r0, #0
    8252:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8254:	4b0d      	ldr	r3, [pc, #52]	; (828c <errata_31+0x44>)
    8256:	681b      	ldr	r3, [r3, #0]
    8258:	f013 0f0f 	tst.w	r3, #15
    825c:	d10b      	bne.n	8276 <errata_31+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    825e:	4b0c      	ldr	r3, [pc, #48]	; (8290 <errata_31+0x48>)
    8260:	681b      	ldr	r3, [r3, #0]
    8262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8266:	2b30      	cmp	r3, #48	; 0x30
    8268:	d007      	beq.n	827a <errata_31+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    826a:	2b40      	cmp	r3, #64	; 0x40
    826c:	d007      	beq.n	827e <errata_31+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    826e:	2b50      	cmp	r3, #80	; 0x50
    8270:	d007      	beq.n	8282 <errata_31+0x3a>
    return false;
    8272:	2000      	movs	r0, #0
    8274:	4770      	bx	lr
    8276:	2000      	movs	r0, #0
    8278:	4770      	bx	lr
            return true;
    827a:	2001      	movs	r0, #1
    827c:	4770      	bx	lr
            return true;
    827e:	2001      	movs	r0, #1
    8280:	4770      	bx	lr
            return true;
    8282:	2001      	movs	r0, #1
}
    8284:	4770      	bx	lr
    8286:	bf00      	nop
    8288:	f0000fe0 	.word	0xf0000fe0
    828c:	f0000fe4 	.word	0xf0000fe4
    8290:	f0000fe8 	.word	0xf0000fe8

00008294 <errata_32>:

static bool errata_32(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8294:	4b0b      	ldr	r3, [pc, #44]	; (82c4 <errata_32+0x30>)
    8296:	781b      	ldrb	r3, [r3, #0]
    8298:	2b06      	cmp	r3, #6
    829a:	d001      	beq.n	82a0 <errata_32+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    829c:	2000      	movs	r0, #0
    829e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82a0:	4b09      	ldr	r3, [pc, #36]	; (82c8 <errata_32+0x34>)
    82a2:	681b      	ldr	r3, [r3, #0]
    82a4:	f013 0f0f 	tst.w	r3, #15
    82a8:	d107      	bne.n	82ba <errata_32+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82aa:	4b08      	ldr	r3, [pc, #32]	; (82cc <errata_32+0x38>)
    82ac:	681b      	ldr	r3, [r3, #0]
    82ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82b2:	2b30      	cmp	r3, #48	; 0x30
    82b4:	d003      	beq.n	82be <errata_32+0x2a>
    return false;
    82b6:	2000      	movs	r0, #0
    82b8:	4770      	bx	lr
    82ba:	2000      	movs	r0, #0
    82bc:	4770      	bx	lr
            return true;
    82be:	2001      	movs	r0, #1
}
    82c0:	4770      	bx	lr
    82c2:	bf00      	nop
    82c4:	f0000fe0 	.word	0xf0000fe0
    82c8:	f0000fe4 	.word	0xf0000fe4
    82cc:	f0000fe8 	.word	0xf0000fe8

000082d0 <errata_36>:

static bool errata_36(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82d0:	4b0f      	ldr	r3, [pc, #60]	; (8310 <errata_36+0x40>)
    82d2:	781b      	ldrb	r3, [r3, #0]
    82d4:	2b06      	cmp	r3, #6
    82d6:	d001      	beq.n	82dc <errata_36+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    82d8:	2000      	movs	r0, #0
    82da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82dc:	4b0d      	ldr	r3, [pc, #52]	; (8314 <errata_36+0x44>)
    82de:	681b      	ldr	r3, [r3, #0]
    82e0:	f013 0f0f 	tst.w	r3, #15
    82e4:	d10b      	bne.n	82fe <errata_36+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82e6:	4b0c      	ldr	r3, [pc, #48]	; (8318 <errata_36+0x48>)
    82e8:	681b      	ldr	r3, [r3, #0]
    82ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82ee:	2b30      	cmp	r3, #48	; 0x30
    82f0:	d007      	beq.n	8302 <errata_36+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    82f2:	2b40      	cmp	r3, #64	; 0x40
    82f4:	d007      	beq.n	8306 <errata_36+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    82f6:	2b50      	cmp	r3, #80	; 0x50
    82f8:	d007      	beq.n	830a <errata_36+0x3a>
    return false;
    82fa:	2000      	movs	r0, #0
    82fc:	4770      	bx	lr
    82fe:	2000      	movs	r0, #0
    8300:	4770      	bx	lr
            return true;
    8302:	2001      	movs	r0, #1
    8304:	4770      	bx	lr
            return true;
    8306:	2001      	movs	r0, #1
    8308:	4770      	bx	lr
            return true;
    830a:	2001      	movs	r0, #1
}
    830c:	4770      	bx	lr
    830e:	bf00      	nop
    8310:	f0000fe0 	.word	0xf0000fe0
    8314:	f0000fe4 	.word	0xf0000fe4
    8318:	f0000fe8 	.word	0xf0000fe8

0000831c <errata_37>:

static bool errata_37(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    831c:	4b0b      	ldr	r3, [pc, #44]	; (834c <errata_37+0x30>)
    831e:	781b      	ldrb	r3, [r3, #0]
    8320:	2b06      	cmp	r3, #6
    8322:	d001      	beq.n	8328 <errata_37+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8324:	2000      	movs	r0, #0
    8326:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8328:	4b09      	ldr	r3, [pc, #36]	; (8350 <errata_37+0x34>)
    832a:	681b      	ldr	r3, [r3, #0]
    832c:	f013 0f0f 	tst.w	r3, #15
    8330:	d107      	bne.n	8342 <errata_37+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8332:	4b08      	ldr	r3, [pc, #32]	; (8354 <errata_37+0x38>)
    8334:	681b      	ldr	r3, [r3, #0]
    8336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    833a:	2b30      	cmp	r3, #48	; 0x30
    833c:	d003      	beq.n	8346 <errata_37+0x2a>
    return false;
    833e:	2000      	movs	r0, #0
    8340:	4770      	bx	lr
    8342:	2000      	movs	r0, #0
    8344:	4770      	bx	lr
            return true;
    8346:	2001      	movs	r0, #1
}
    8348:	4770      	bx	lr
    834a:	bf00      	nop
    834c:	f0000fe0 	.word	0xf0000fe0
    8350:	f0000fe4 	.word	0xf0000fe4
    8354:	f0000fe8 	.word	0xf0000fe8

00008358 <errata_57>:

static bool errata_57(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8358:	4b0b      	ldr	r3, [pc, #44]	; (8388 <errata_57+0x30>)
    835a:	781b      	ldrb	r3, [r3, #0]
    835c:	2b06      	cmp	r3, #6
    835e:	d001      	beq.n	8364 <errata_57+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8360:	2000      	movs	r0, #0
    8362:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8364:	4b09      	ldr	r3, [pc, #36]	; (838c <errata_57+0x34>)
    8366:	681b      	ldr	r3, [r3, #0]
    8368:	f013 0f0f 	tst.w	r3, #15
    836c:	d107      	bne.n	837e <errata_57+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    836e:	4b08      	ldr	r3, [pc, #32]	; (8390 <errata_57+0x38>)
    8370:	681b      	ldr	r3, [r3, #0]
    8372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8376:	2b30      	cmp	r3, #48	; 0x30
    8378:	d003      	beq.n	8382 <errata_57+0x2a>
    return false;
    837a:	2000      	movs	r0, #0
    837c:	4770      	bx	lr
    837e:	2000      	movs	r0, #0
    8380:	4770      	bx	lr
            return true;
    8382:	2001      	movs	r0, #1
}
    8384:	4770      	bx	lr
    8386:	bf00      	nop
    8388:	f0000fe0 	.word	0xf0000fe0
    838c:	f0000fe4 	.word	0xf0000fe4
    8390:	f0000fe8 	.word	0xf0000fe8

00008394 <errata_66>:

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8394:	4b0b      	ldr	r3, [pc, #44]	; (83c4 <errata_66+0x30>)
    8396:	781b      	ldrb	r3, [r3, #0]
    8398:	2b06      	cmp	r3, #6
    839a:	d001      	beq.n	83a0 <errata_66+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    839c:	2000      	movs	r0, #0
    839e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83a0:	4b09      	ldr	r3, [pc, #36]	; (83c8 <errata_66+0x34>)
    83a2:	681b      	ldr	r3, [r3, #0]
    83a4:	f013 0f0f 	tst.w	r3, #15
    83a8:	d107      	bne.n	83ba <errata_66+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83aa:	4b08      	ldr	r3, [pc, #32]	; (83cc <errata_66+0x38>)
    83ac:	681b      	ldr	r3, [r3, #0]
    83ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83b2:	2b50      	cmp	r3, #80	; 0x50
    83b4:	d003      	beq.n	83be <errata_66+0x2a>
    return false;
    83b6:	2000      	movs	r0, #0
    83b8:	4770      	bx	lr
    83ba:	2000      	movs	r0, #0
    83bc:	4770      	bx	lr
            return true;
    83be:	2001      	movs	r0, #1
}
    83c0:	4770      	bx	lr
    83c2:	bf00      	nop
    83c4:	f0000fe0 	.word	0xf0000fe0
    83c8:	f0000fe4 	.word	0xf0000fe4
    83cc:	f0000fe8 	.word	0xf0000fe8

000083d0 <errata_108>:


static bool errata_108(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83d0:	4b0f      	ldr	r3, [pc, #60]	; (8410 <errata_108+0x40>)
    83d2:	781b      	ldrb	r3, [r3, #0]
    83d4:	2b06      	cmp	r3, #6
    83d6:	d001      	beq.n	83dc <errata_108+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    83d8:	2000      	movs	r0, #0
    83da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83dc:	4b0d      	ldr	r3, [pc, #52]	; (8414 <errata_108+0x44>)
    83de:	681b      	ldr	r3, [r3, #0]
    83e0:	f013 0f0f 	tst.w	r3, #15
    83e4:	d10b      	bne.n	83fe <errata_108+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    83e6:	4b0c      	ldr	r3, [pc, #48]	; (8418 <errata_108+0x48>)
    83e8:	681b      	ldr	r3, [r3, #0]
    83ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83ee:	2b30      	cmp	r3, #48	; 0x30
    83f0:	d007      	beq.n	8402 <errata_108+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    83f2:	2b40      	cmp	r3, #64	; 0x40
    83f4:	d007      	beq.n	8406 <errata_108+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83f6:	2b50      	cmp	r3, #80	; 0x50
    83f8:	d007      	beq.n	840a <errata_108+0x3a>
    return false;
    83fa:	2000      	movs	r0, #0
    83fc:	4770      	bx	lr
    83fe:	2000      	movs	r0, #0
    8400:	4770      	bx	lr
            return true;
    8402:	2001      	movs	r0, #1
    8404:	4770      	bx	lr
            return true;
    8406:	2001      	movs	r0, #1
    8408:	4770      	bx	lr
            return true;
    840a:	2001      	movs	r0, #1
}
    840c:	4770      	bx	lr
    840e:	bf00      	nop
    8410:	f0000fe0 	.word	0xf0000fe0
    8414:	f0000fe4 	.word	0xf0000fe4
    8418:	f0000fe8 	.word	0xf0000fe8

0000841c <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    841c:	4b01      	ldr	r3, [pc, #4]	; (8424 <SystemCoreClockUpdate+0x8>)
    841e:	4a02      	ldr	r2, [pc, #8]	; (8428 <SystemCoreClockUpdate+0xc>)
    8420:	601a      	str	r2, [r3, #0]
}
    8422:	4770      	bx	lr
    8424:	200000e4 	.word	0x200000e4
    8428:	03d09000 	.word	0x03d09000

0000842c <SystemInit>:
{
    842c:	b508      	push	{r3, lr}
    if (errata_16()){
    842e:	f7ff feed 	bl	820c <errata_16>
    8432:	b110      	cbz	r0, 843a <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    8434:	4b65      	ldr	r3, [pc, #404]	; (85cc <SystemInit+0x1a0>)
    8436:	4a66      	ldr	r2, [pc, #408]	; (85d0 <SystemInit+0x1a4>)
    8438:	601a      	str	r2, [r3, #0]
    if (errata_31()){
    843a:	f7ff ff05 	bl	8248 <errata_31>
    843e:	b128      	cbz	r0, 844c <SystemInit+0x20>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    8440:	4b64      	ldr	r3, [pc, #400]	; (85d4 <SystemInit+0x1a8>)
    8442:	681b      	ldr	r3, [r3, #0]
    8444:	f3c3 3342 	ubfx	r3, r3, #13, #3
    8448:	4a63      	ldr	r2, [pc, #396]	; (85d8 <SystemInit+0x1ac>)
    844a:	6013      	str	r3, [r2, #0]
    if (errata_32()){
    844c:	f7ff ff22 	bl	8294 <errata_32>
    8450:	b120      	cbz	r0, 845c <SystemInit+0x30>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    8452:	4a62      	ldr	r2, [pc, #392]	; (85dc <SystemInit+0x1b0>)
    8454:	68d3      	ldr	r3, [r2, #12]
    8456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    845a:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
    845c:	f7ff ff38 	bl	82d0 <errata_36>
    8460:	b140      	cbz	r0, 8474 <SystemInit+0x48>
        NRF_CLOCK->EVENTS_DONE = 0;
    8462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8466:	2200      	movs	r2, #0
    8468:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    846c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    8470:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    8474:	f7ff ff52 	bl	831c <errata_37>
    8478:	b110      	cbz	r0, 8480 <SystemInit+0x54>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    847a:	4b59      	ldr	r3, [pc, #356]	; (85e0 <SystemInit+0x1b4>)
    847c:	2203      	movs	r2, #3
    847e:	601a      	str	r2, [r3, #0]
    if (errata_57()){
    8480:	f7ff ff6a 	bl	8358 <errata_57>
    8484:	b158      	cbz	r0, 849e <SystemInit+0x72>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    8486:	4b57      	ldr	r3, [pc, #348]	; (85e4 <SystemInit+0x1b8>)
    8488:	2205      	movs	r2, #5
    848a:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    848c:	3378      	adds	r3, #120	; 0x78
    848e:	2201      	movs	r2, #1
    8490:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    8492:	3b70      	subs	r3, #112	; 0x70
    8494:	2200      	movs	r2, #0
    8496:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    8498:	3b04      	subs	r3, #4
    849a:	223f      	movs	r2, #63	; 0x3f
    849c:	601a      	str	r2, [r3, #0]
    if (errata_66()){
    849e:	f7ff ff79 	bl	8394 <errata_66>
    84a2:	2800      	cmp	r0, #0
    84a4:	d046      	beq.n	8534 <SystemInit+0x108>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    84a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    84aa:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    84ae:	4b4e      	ldr	r3, [pc, #312]	; (85e8 <SystemInit+0x1bc>)
    84b0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    84b4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    84b8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    84bc:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    84c0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    84c4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    84c8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    84cc:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    84d0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    84d4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    84d8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    84dc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    84e0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    84e4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    84e8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    84ec:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    84f0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    84f4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    84f8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    84fc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    8500:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8504:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    8508:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    850c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    8510:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8514:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    8518:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    851c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    8520:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8524:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    8528:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    852c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    8530:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    8534:	f7ff ff4c 	bl	83d0 <errata_108>
    8538:	b128      	cbz	r0, 8546 <SystemInit+0x11a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    853a:	4b2c      	ldr	r3, [pc, #176]	; (85ec <SystemInit+0x1c0>)
    853c:	681b      	ldr	r3, [r3, #0]
    853e:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    8542:	4a2b      	ldr	r2, [pc, #172]	; (85f0 <SystemInit+0x1c4>)
    8544:	6013      	str	r3, [r2, #0]
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    8546:	4a2b      	ldr	r2, [pc, #172]	; (85f4 <SystemInit+0x1c8>)
    8548:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    854c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    8550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    8554:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8558:	f3bf 8f6f 	isb	sy
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    855c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8560:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    8564:	f013 0f01 	tst.w	r3, #1
    8568:	d104      	bne.n	8574 <SystemInit+0x148>
    SystemCoreClockUpdate();
    856a:	f7ff ff57 	bl	841c <SystemCoreClockUpdate>
    NVIC_Relocate();
    856e:	f011 fadb 	bl	19b28 <NVIC_Relocate>
}
    8572:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    8574:	4b20      	ldr	r3, [pc, #128]	; (85f8 <SystemInit+0x1cc>)
    8576:	2201      	movs	r2, #1
    8578:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    857c:	4b1e      	ldr	r3, [pc, #120]	; (85f8 <SystemInit+0x1cc>)
    857e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    8582:	2b00      	cmp	r3, #0
    8584:	d0fa      	beq.n	857c <SystemInit+0x150>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    8586:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    858a:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    858e:	f023 0301 	bic.w	r3, r3, #1
    8592:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    8596:	4b18      	ldr	r3, [pc, #96]	; (85f8 <SystemInit+0x1cc>)
    8598:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    859c:	2b00      	cmp	r3, #0
    859e:	d0fa      	beq.n	8596 <SystemInit+0x16a>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    85a0:	4b15      	ldr	r3, [pc, #84]	; (85f8 <SystemInit+0x1cc>)
    85a2:	2200      	movs	r2, #0
    85a4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85a8:	4b13      	ldr	r3, [pc, #76]	; (85f8 <SystemInit+0x1cc>)
    85aa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85ae:	2b00      	cmp	r3, #0
    85b0:	d0fa      	beq.n	85a8 <SystemInit+0x17c>
  __ASM volatile ("dsb 0xF":::"memory");
    85b2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    85b6:	490f      	ldr	r1, [pc, #60]	; (85f4 <SystemInit+0x1c8>)
    85b8:	68ca      	ldr	r2, [r1, #12]
    85ba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    85be:	4b0f      	ldr	r3, [pc, #60]	; (85fc <SystemInit+0x1d0>)
    85c0:	4313      	orrs	r3, r2
    85c2:	60cb      	str	r3, [r1, #12]
    85c4:	f3bf 8f4f 	dsb	sy
    __NOP();
    85c8:	bf00      	nop
    85ca:	e7fd      	b.n	85c8 <SystemInit+0x19c>
    85cc:	4007c074 	.word	0x4007c074
    85d0:	baadf00d 	.word	0xbaadf00d
    85d4:	10000244 	.word	0x10000244
    85d8:	4000053c 	.word	0x4000053c
    85dc:	e000edf0 	.word	0xe000edf0
    85e0:	400005a0 	.word	0x400005a0
    85e4:	40005610 	.word	0x40005610
    85e8:	4000c000 	.word	0x4000c000
    85ec:	10000258 	.word	0x10000258
    85f0:	40000ee4 	.word	0x40000ee4
    85f4:	e000ed00 	.word	0xe000ed00
    85f8:	4001e000 	.word	0x4001e000
    85fc:	05fa0004 	.word	0x05fa0004

00008600 <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
    8600:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
    8602:	4803      	ldr	r0, [pc, #12]	; (8610 <_start+0x10>)
    8604:	f012 fa16 	bl	1aa34 <os_init>
    os_start();
    8608:	f012 fa6c 	bl	1aae4 <os_start>
#endif
}
    860c:	bd08      	pop	{r3, pc}
    860e:	bf00      	nop
    8610:	00008617 	.word	0x00008617

00008614 <_init>:

void
_init(void)
{
}
    8614:	4770      	bx	lr

00008616 <main>:
pub fn handle_touch(_x: u16, _y: u16) { console::print("touch not handled\n"); console::flush(); }  //  Define a touch handler that does nothing

///  Main program that initialises the sensor, network driver and starts reading and sending sensor data in the background.
///  main() will be called at Mynewt startup. It replaces the C version of the main() function.
#[no_mangle]                 //  Don't mangle the name "main"
extern "C" fn main() -> ! {  //  Declare extern "C" because it will be called by Mynewt
    8616:	b088      	sub	sp, #32
    //  Initialise the Mynewt packages and internal temperature sensor driver. Any startup
    //  functions defined in pkg.yml of our custom drivers and libraries will be called by 
    //  sysinit().  Here are the startup functions consolidated by Mynewt:
    //  bin/targets/nrf52_my_sensor/generated/src/nrf52_my_sensor-sysinit-app.c
    mynewt::sysinit();
    8618:	f000 f960 	bl	88dc <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>
    861c:	e7ff      	b.n	861e <main+0x8>
    //  extern { fn start_ble() -> i32; }
    //  let rc = unsafe { start_ble() };
    //  assert!(rc == 0, "BLE fail");

    //  Start the display
    druid::start_display()
    861e:	f000 ff31 	bl	9484 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>
    8622:	9005      	str	r0, [sp, #20]
    8624:	e7ff      	b.n	8626 <main+0x10>
    8626:	f24e 11fa 	movw	r1, #57850	; 0xe1fa
    862a:	f2c0 0101 	movt	r1, #1
    862e:	f24e 2330 	movw	r3, #57904	; 0xe230
    8632:	f2c0 0301 	movt	r3, #1
    8636:	2208      	movs	r2, #8
    8638:	9805      	ldr	r0, [sp, #20]
    863a:	f000 fa5e 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    863e:	e7ff      	b.n	8640 <main+0x2a>
    #[cfg(feature = "display_app")]  //  If graphics display app is enabled...
    display::test_display()
        .expect("DSP test fail");

    //  Start the touch sensor
    touch_sensor::start_touch_sensor()
    8640:	f002 fbdd 	bl	adfe <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E>
    8644:	9004      	str	r0, [sp, #16]
    8646:	e7ff      	b.n	8648 <main+0x32>
    8648:	f24e 2102 	movw	r1, #57858	; 0xe202
    864c:	f2c0 0101 	movt	r1, #1
    8650:	f24e 2340 	movw	r3, #57920	; 0xe240
    8654:	f2c0 0301 	movt	r3, #1
    8658:	2208      	movs	r2, #8
    865a:	9804      	ldr	r0, [sp, #16]
    865c:	f000 fa4d 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8660:	e7ff      	b.n	8662 <main+0x4c>
    visual::on_start()
        .expect("VIS fail");

    //  Launch the CHIP8 Emulator app
    #[cfg(feature = "chip8_app")]  //  If CHIP8 Emulator app is enabled...
    chip8::on_start()
    8662:	f003 fa3d 	bl	bae0 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E>
    8666:	9003      	str	r0, [sp, #12]
    8668:	e7ff      	b.n	866a <main+0x54>
    866a:	f24e 2150 	movw	r1, #57936	; 0xe250
    866e:	f2c0 0101 	movt	r1, #1
    8672:	f24e 235c 	movw	r3, #57948	; 0xe25c
    8676:	f2c0 0301 	movt	r3, #1
    867a:	220a      	movs	r2, #10
    867c:	9803      	ldr	r0, [sp, #12]
    867e:	f000 fa3c 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8682:	e7ff      	b.n	8684 <main+0x6e>
        .expect("CHIP8 fail");

    //  Main event loop
    loop {                            //  Loop forever...
    8684:	e7ff      	b.n	8686 <main+0x70>
    8686:	a806      	add	r0, sp, #24
        os::eventq_run(               //  Processing events...
            os::eventq_dflt_get()     //  From default event queue.
    8688:	f000 faf2 	bl	8c70 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
    868c:	e7ff      	b.n	868e <main+0x78>
    868e:	f24e 210a 	movw	r1, #57866	; 0xe20a
    8692:	f2c0 0101 	movt	r1, #1
    8696:	f24e 236c 	movw	r3, #57964	; 0xe26c
    869a:	f2c0 0301 	movt	r3, #1
    869e:	a806      	add	r0, sp, #24
    86a0:	2208      	movs	r2, #8
    86a2:	f000 f896 	bl	87d2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE>
    86a6:	9002      	str	r0, [sp, #8]
    86a8:	e7ff      	b.n	86aa <main+0x94>
        os::eventq_run(               //  Processing events...
    86aa:	9802      	ldr	r0, [sp, #8]
    86ac:	f000 fad7 	bl	8c5e <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
    86b0:	9001      	str	r0, [sp, #4]
    86b2:	e7ff      	b.n	86b4 <main+0x9e>
    86b4:	f24e 2112 	movw	r1, #57874	; 0xe212
    86b8:	f2c0 0101 	movt	r1, #1
    86bc:	f24e 237c 	movw	r3, #57980	; 0xe27c
    86c0:	f2c0 0301 	movt	r3, #1
    86c4:	2208      	movs	r2, #8
    86c6:	9801      	ldr	r0, [sp, #4]
    86c8:	f000 fa17 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    86cc:	e7ff      	b.n	86ce <main+0xb8>
    loop {                            //  Loop forever...
    86ce:	e7da      	b.n	8686 <main+0x70>

000086d0 <rust_begin_unwind>:
    //  Never comes here
}

///  This function is called on panic, like an assertion failure. We display the filename and line number and pause in the debugger. From https://os.phil-opp.com/freestanding-rust-binary/
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
    86d0:	b08e      	sub	sp, #56	; 0x38
    86d2:	900b      	str	r0, [sp, #44]	; 0x2c
    //  Display the filename and line number to the Semihosting Console.
    console::print("panic ");
    86d4:	f24e 218c 	movw	r1, #57996	; 0xe28c
    86d8:	f2c0 0101 	movt	r1, #1
    86dc:	2206      	movs	r2, #6
    86de:	9007      	str	r0, [sp, #28]
    86e0:	4608      	mov	r0, r1
    86e2:	4611      	mov	r1, r2
    86e4:	f000 fc84 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    86e8:	e7ff      	b.n	86ea <rust_begin_unwind+0x1a>
    if let Some(location) = info.location() {
    86ea:	9807      	ldr	r0, [sp, #28]
    86ec:	f00f f959 	bl	179a2 <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>
    86f0:	9008      	str	r0, [sp, #32]
    86f2:	e7ff      	b.n	86f4 <rust_begin_unwind+0x24>
    86f4:	9808      	ldr	r0, [sp, #32]
    86f6:	2800      	cmp	r0, #0
    86f8:	d108      	bne.n	870c <rust_begin_unwind+0x3c>
    86fa:	e7ff      	b.n	86fc <rust_begin_unwind+0x2c>
        let line = location.line();
        console::print("at ");       console::buffer(&file);
        console::print(" line ");    console::printint(line as i32);
        console::print("\n");        console::flush();
    } else {
        console::print("no loc\n");  console::flush();
    86fc:	f24e 2092 	movw	r0, #58002	; 0xe292
    8700:	f2c0 0001 	movt	r0, #1
    8704:	2107      	movs	r1, #7
    8706:	f000 fc73 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    870a:	e033      	b.n	8774 <rust_begin_unwind+0xa4>
    if let Some(location) = info.location() {
    870c:	9808      	ldr	r0, [sp, #32]
    870e:	900c      	str	r0, [sp, #48]	; 0x30
        let file = location.file();
    8710:	9006      	str	r0, [sp, #24]
    8712:	f00f f949 	bl	179a8 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8716:	910a      	str	r1, [sp, #40]	; 0x28
    8718:	9009      	str	r0, [sp, #36]	; 0x24
    871a:	e7ff      	b.n	871c <rust_begin_unwind+0x4c>
        let line = location.line();
    871c:	9806      	ldr	r0, [sp, #24]
    871e:	f00f f947 	bl	179b0 <_ZN4core5panic8Location4line17h650a566d9637c91dE>
    8722:	4601      	mov	r1, r0
    8724:	900d      	str	r0, [sp, #52]	; 0x34
    8726:	9105      	str	r1, [sp, #20]
    8728:	e7ff      	b.n	872a <rust_begin_unwind+0x5a>
        console::print("at ");       console::buffer(&file);
    872a:	f24e 2099 	movw	r0, #58009	; 0xe299
    872e:	f2c0 0001 	movt	r0, #1
    8732:	2103      	movs	r1, #3
    8734:	f000 fc5c 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8738:	e7ff      	b.n	873a <rust_begin_unwind+0x6a>
    873a:	9809      	ldr	r0, [sp, #36]	; 0x24
    873c:	990a      	ldr	r1, [sp, #40]	; 0x28
    873e:	f000 fc7e 	bl	903e <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>
    8742:	e7ff      	b.n	8744 <rust_begin_unwind+0x74>
        console::print(" line ");    console::printint(line as i32);
    8744:	f24e 209c 	movw	r0, #58012	; 0xe29c
    8748:	f2c0 0001 	movt	r0, #1
    874c:	2106      	movs	r1, #6
    874e:	f000 fc4f 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8752:	e7ff      	b.n	8754 <rust_begin_unwind+0x84>
    8754:	9805      	ldr	r0, [sp, #20]
    8756:	f000 fc89 	bl	906c <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    875a:	e7ff      	b.n	875c <rust_begin_unwind+0x8c>
        console::print("\n");        console::flush();
    875c:	f24e 20a2 	movw	r0, #58018	; 0xe2a2
    8760:	f2c0 0001 	movt	r0, #1
    8764:	2101      	movs	r1, #1
    8766:	f000 fc43 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    876a:	e7ff      	b.n	876c <rust_begin_unwind+0x9c>
    876c:	f000 fc86 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8770:	e7ff      	b.n	8772 <rust_begin_unwind+0xa2>
    if let Some(location) = info.location() {
    8772:	e003      	b.n	877c <rust_begin_unwind+0xac>
        console::print("no loc\n");  console::flush();
    8774:	f000 fc82 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8778:	e7ff      	b.n	877a <rust_begin_unwind+0xaa>
    if let Some(location) = info.location() {
    877a:	e7ff      	b.n	877c <rust_begin_unwind+0xac>
/// exception.
#[inline(always)]
pub fn bkpt() {
    match () {
        #[cfg(all(cortex_m, feature = "inline-asm"))]
        () => unsafe { asm!("bkpt" :::: "volatile") },
    877c:	be00      	bkpt	0x0000
    }
    //  Pause in the debugger.
    bkpt();
    877e:	e7ff      	b.n	8780 <rust_begin_unwind+0xb0>
    //  Display the payload.
    console::print(info.payload().downcast_ref::<&str>().unwrap());
    8780:	9807      	ldr	r0, [sp, #28]
    8782:	f00f f911 	bl	179a8 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8786:	9004      	str	r0, [sp, #16]
    8788:	9103      	str	r1, [sp, #12]
    878a:	e7ff      	b.n	878c <rust_begin_unwind+0xbc>
    878c:	9804      	ldr	r0, [sp, #16]
    878e:	9903      	ldr	r1, [sp, #12]
    8790:	f000 f899 	bl	88c6 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17he532d8d46bba5cdfE>
    8794:	9002      	str	r0, [sp, #8]
    8796:	e7ff      	b.n	8798 <rust_begin_unwind+0xc8>
    8798:	f24e 21a4 	movw	r1, #58020	; 0xe2a4
    879c:	f2c0 0101 	movt	r1, #1
    87a0:	9802      	ldr	r0, [sp, #8]
    87a2:	f004 fb0d 	bl	cdc0 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E>
    87a6:	9001      	str	r0, [sp, #4]
    87a8:	e7ff      	b.n	87aa <rust_begin_unwind+0xda>
    87aa:	9801      	ldr	r0, [sp, #4]
    87ac:	6800      	ldr	r0, [r0, #0]
    87ae:	9901      	ldr	r1, [sp, #4]
    87b0:	6849      	ldr	r1, [r1, #4]
    87b2:	f000 fc1d 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87b6:	e7ff      	b.n	87b8 <rust_begin_unwind+0xe8>
    console::print("\n");  console::flush();
    87b8:	f24e 20a2 	movw	r0, #58018	; 0xe2a2
    87bc:	f2c0 0001 	movt	r0, #1
    87c0:	2101      	movs	r1, #1
    87c2:	f000 fc15 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87c6:	e7ff      	b.n	87c8 <rust_begin_unwind+0xf8>
    87c8:	f000 fc58 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    87cc:	e7ff      	b.n	87ce <rust_begin_unwind+0xfe>
    //  Loop forever so that device won't restart.
    loop {}
    87ce:	e7ff      	b.n	87d0 <rust_begin_unwind+0x100>
    87d0:	e7fe      	b.n	87d0 <rust_begin_unwind+0x100>

000087d2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE>:
    87d2:	b08a      	sub	sp, #40	; 0x28
    87d4:	9107      	str	r1, [sp, #28]
    87d6:	9208      	str	r2, [sp, #32]
    87d8:	f8d0 c000 	ldr.w	ip, [r0]
    87dc:	f1bc 0f00 	cmp.w	ip, #0
    87e0:	9305      	str	r3, [sp, #20]
    87e2:	9204      	str	r2, [sp, #16]
    87e4:	9103      	str	r1, [sp, #12]
    87e6:	9002      	str	r0, [sp, #8]
    87e8:	d011      	beq.n	880e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x3c>
    87ea:	e7ff      	b.n	87ec <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x1a>
    87ec:	9802      	ldr	r0, [sp, #8]
    87ee:	6841      	ldr	r1, [r0, #4]
    87f0:	9106      	str	r1, [sp, #24]
    87f2:	4669      	mov	r1, sp
    87f4:	9a05      	ldr	r2, [sp, #20]
    87f6:	600a      	str	r2, [r1, #0]
    87f8:	f24e 23b4 	movw	r3, #58036	; 0xe2b4
    87fc:	f2c0 0301 	movt	r3, #1
    8800:	aa06      	add	r2, sp, #24
    8802:	9803      	ldr	r0, [sp, #12]
    8804:	9904      	ldr	r1, [sp, #16]
    8806:	f00f f8a7 	bl	17958 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
    880a:	defe      	udf	#254	; 0xfe
    880c:	defe      	udf	#254	; 0xfe
    880e:	9802      	ldr	r0, [sp, #8]
    8810:	6841      	ldr	r1, [r0, #4]
    8812:	9109      	str	r1, [sp, #36]	; 0x24
    8814:	6802      	ldr	r2, [r0, #0]
    8816:	2a00      	cmp	r2, #0
    8818:	9101      	str	r1, [sp, #4]
    881a:	d103      	bne.n	8824 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x52>
    881c:	e7ff      	b.n	881e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x4c>
    881e:	9801      	ldr	r0, [sp, #4]
    8820:	b00a      	add	sp, #40	; 0x28
    8822:	4770      	bx	lr
    8824:	e7fb      	b.n	881e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x4c>

00008826 <_ZN4core3ptr13drop_in_place17he6c5bffce3c304d4E>:
    8826:	b081      	sub	sp, #4
    8828:	9000      	str	r0, [sp, #0]
    882a:	b001      	add	sp, #4
    882c:	4770      	bx	lr

0000882e <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E>:
    882e:	b580      	push	{r7, lr}
    8830:	b086      	sub	sp, #24
    8832:	9004      	str	r0, [sp, #16]
    8834:	9105      	str	r1, [sp, #20]
    8836:	9002      	str	r0, [sp, #8]
    8838:	f000 f810 	bl	885c <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE>
    883c:	9001      	str	r0, [sp, #4]
    883e:	e7ff      	b.n	8840 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x12>
    8840:	9801      	ldr	r0, [sp, #4]
    8842:	07c1      	lsls	r1, r0, #31
    8844:	2900      	cmp	r1, #0
    8846:	d103      	bne.n	8850 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x22>
    8848:	e7ff      	b.n	884a <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x1c>
    884a:	2000      	movs	r0, #0
    884c:	9003      	str	r0, [sp, #12]
    884e:	e002      	b.n	8856 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x28>
    8850:	9802      	ldr	r0, [sp, #8]
    8852:	9003      	str	r0, [sp, #12]
    8854:	e7ff      	b.n	8856 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x28>
    8856:	9803      	ldr	r0, [sp, #12]
    8858:	b006      	add	sp, #24
    885a:	bd80      	pop	{r7, pc}

0000885c <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE>:
    885c:	b580      	push	{r7, lr}
    885e:	b08a      	sub	sp, #40	; 0x28
    8860:	9008      	str	r0, [sp, #32]
    8862:	9109      	str	r1, [sp, #36]	; 0x24
    8864:	9103      	str	r1, [sp, #12]
    8866:	9002      	str	r0, [sp, #8]
    8868:	f000 f815 	bl	8896 <_ZN4core3any6TypeId2of17haae5124a9f275cb8E>
    886c:	9105      	str	r1, [sp, #20]
    886e:	9004      	str	r0, [sp, #16]
    8870:	e7ff      	b.n	8872 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE+0x16>
    8872:	9803      	ldr	r0, [sp, #12]
    8874:	68c1      	ldr	r1, [r0, #12]
    8876:	9802      	ldr	r0, [sp, #8]
    8878:	4788      	blx	r1
    887a:	9107      	str	r1, [sp, #28]
    887c:	9006      	str	r0, [sp, #24]
    887e:	e7ff      	b.n	8880 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE+0x24>
    8880:	a804      	add	r0, sp, #16
    8882:	a906      	add	r1, sp, #24
    8884:	f002 faa9 	bl	adda <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h44bec417aa74de39E>
    8888:	9001      	str	r0, [sp, #4]
    888a:	e7ff      	b.n	888c <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE+0x30>
    888c:	9801      	ldr	r0, [sp, #4]
    888e:	f000 0001 	and.w	r0, r0, #1
    8892:	b00a      	add	sp, #40	; 0x28
    8894:	bd80      	pop	{r7, pc}

00008896 <_ZN4core3any6TypeId2of17haae5124a9f275cb8E>:
    8896:	b086      	sub	sp, #24
    8898:	f249 40d9 	movw	r0, #38105	; 0x94d9
    889c:	f2c1 1010 	movt	r0, #4368	; 0x1110
    88a0:	9005      	str	r0, [sp, #20]
    88a2:	f249 7064 	movw	r0, #38756	; 0x9764
    88a6:	f2c7 00b0 	movt	r0, #28848	; 0x70b0
    88aa:	9004      	str	r0, [sp, #16]
    88ac:	9804      	ldr	r0, [sp, #16]
    88ae:	9905      	ldr	r1, [sp, #20]
    88b0:	9001      	str	r0, [sp, #4]
    88b2:	9100      	str	r1, [sp, #0]
    88b4:	e7ff      	b.n	88b6 <_ZN4core3any6TypeId2of17haae5124a9f275cb8E+0x20>
    88b6:	9801      	ldr	r0, [sp, #4]
    88b8:	9002      	str	r0, [sp, #8]
    88ba:	9900      	ldr	r1, [sp, #0]
    88bc:	9103      	str	r1, [sp, #12]
    88be:	9802      	ldr	r0, [sp, #8]
    88c0:	9903      	ldr	r1, [sp, #12]
    88c2:	b006      	add	sp, #24
    88c4:	4770      	bx	lr

000088c6 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17he532d8d46bba5cdfE>:
    88c6:	b580      	push	{r7, lr}
    88c8:	b084      	sub	sp, #16
    88ca:	9002      	str	r0, [sp, #8]
    88cc:	9103      	str	r1, [sp, #12]
    88ce:	f7ff ffae 	bl	882e <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E>
    88d2:	9001      	str	r0, [sp, #4]
    88d4:	e7ff      	b.n	88d6 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17he532d8d46bba5cdfE+0x10>
    88d6:	9801      	ldr	r0, [sp, #4]
    88d8:	b004      	add	sp, #16
    88da:	bd80      	pop	{r7, pc}

000088dc <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>:
pub use hal::{ Delay, GPIO, SPI };  //  Export `hal` types GPIO and SPI

pub mod spi;  //  Export Non-Blocking SPI API

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
pub fn sysinit() {
    88dc:	b580      	push	{r7, lr}
    unsafe { rust_sysinit(); }
    88de:	f013 fef9 	bl	1c6d4 <rust_sysinit>
    88e2:	e7ff      	b.n	88e4 <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0x8>
    sys::console::flush();
    88e4:	f000 fbca 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    88e8:	e7ff      	b.n	88ea <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0xe>
}
    88ea:	bd80      	pop	{r7, pc}

000088ec <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>:
            rep: StrnRep::CStr(cstr)
        }
    }

    /// Return a pointer to the string
    pub fn as_ptr(&self) -> *const u8 {
    88ec:	b580      	push	{r7, lr}
    88ee:	b086      	sub	sp, #24
    88f0:	9002      	str	r0, [sp, #8]
        match self.rep {
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    88f2:	7801      	ldrb	r1, [r0, #0]
    88f4:	07ca      	lsls	r2, r1, #31
    88f6:	2a00      	cmp	r2, #0
    88f8:	9000      	str	r0, [sp, #0]
    88fa:	d006      	beq.n	890a <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x1e>
    88fc:	e7ff      	b.n	88fe <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x12>
            StrnRep::CStr(cstr)  => { cstr }
    88fe:	9800      	ldr	r0, [sp, #0]
    8900:	6841      	ldr	r1, [r0, #4]
    8902:	9103      	str	r1, [sp, #12]
    8904:	9101      	str	r1, [sp, #4]
        match self.rep {
    8906:	e00c      	b.n	8922 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
    8908:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    890a:	9800      	ldr	r0, [sp, #0]
    890c:	6841      	ldr	r1, [r0, #4]
    890e:	6882      	ldr	r2, [r0, #8]
    8910:	9104      	str	r1, [sp, #16]
    8912:	9205      	str	r2, [sp, #20]
    8914:	4608      	mov	r0, r1
    8916:	4611      	mov	r1, r2
    8918:	f009 fb15 	bl	11f46 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    891c:	9001      	str	r0, [sp, #4]
    891e:	e7ff      	b.n	8920 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x34>
        match self.rep {
    8920:	e7ff      	b.n	8922 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
        }
    }
    8922:	9801      	ldr	r0, [sp, #4]
    8924:	b006      	add	sp, #24
    8926:	bd80      	pop	{r7, pc}

00008928 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>:
            }
        }
    }

    /// Fail if the last byte is not zero.
    pub fn validate(&self) {
    8928:	b5b0      	push	{r4, r5, r7, lr}
    892a:	b0b2      	sub	sp, #200	; 0xc8
    892c:	9029      	str	r0, [sp, #164]	; 0xa4
        match self.rep {
            StrnRep::ByteStr(bs) => {         
    892e:	7801      	ldrb	r1, [r0, #0]
    8930:	07ca      	lsls	r2, r1, #31
    8932:	2a00      	cmp	r2, #0
    8934:	900e      	str	r0, [sp, #56]	; 0x38
    8936:	d005      	beq.n	8944 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x1c>
    8938:	e7ff      	b.n	893a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
            }
            StrnRep::CStr(_cstr)  => {}
    893a:	980e      	ldr	r0, [sp, #56]	; 0x38
    893c:	6841      	ldr	r1, [r0, #4]
    893e:	912a      	str	r1, [sp, #168]	; 0xa8
        match self.rep {
    8940:	e096      	b.n	8a70 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
    8942:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => {         
    8944:	980e      	ldr	r0, [sp, #56]	; 0x38
    8946:	6841      	ldr	r1, [r0, #4]
    8948:	6882      	ldr	r2, [r0, #8]
    894a:	912b      	str	r1, [sp, #172]	; 0xac
    894c:	922c      	str	r2, [sp, #176]	; 0xb0
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    894e:	4608      	mov	r0, r1
    8950:	4611      	mov	r1, r2
    8952:	f000 face 	bl	8ef2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>
    8956:	9011      	str	r0, [sp, #68]	; 0x44
    8958:	e7ff      	b.n	895a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x32>
    895a:	f24e 20cc 	movw	r0, #58060	; 0xe2cc
    895e:	f2c0 0001 	movt	r0, #1
    8962:	6800      	ldr	r0, [r0, #0]
    8964:	a911      	add	r1, sp, #68	; 0x44
    8966:	910f      	str	r1, [sp, #60]	; 0x3c
    8968:	9010      	str	r0, [sp, #64]	; 0x40
    896a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    896c:	902d      	str	r0, [sp, #180]	; 0xb4
    896e:	9910      	ldr	r1, [sp, #64]	; 0x40
    8970:	912e      	str	r1, [sp, #184]	; 0xb8
    8972:	900d      	str	r0, [sp, #52]	; 0x34
    8974:	910c      	str	r1, [sp, #48]	; 0x30
    8976:	f000 fc5a 	bl	922e <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>
    897a:	900b      	str	r0, [sp, #44]	; 0x2c
    897c:	e7ff      	b.n	897e <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x56>
    897e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8980:	07c1      	lsls	r1, r0, #31
    8982:	2900      	cmp	r1, #0
    8984:	d001      	beq.n	898a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x62>
    8986:	e7ff      	b.n	8988 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x60>
        }
    }
    8988:	e072      	b.n	8a70 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    898a:	f24e 3024 	movw	r0, #58148	; 0xe324
    898e:	f2c0 0001 	movt	r0, #1
    8992:	6801      	ldr	r1, [r0, #0]
    8994:	980d      	ldr	r0, [sp, #52]	; 0x34
    8996:	9021      	str	r0, [sp, #132]	; 0x84
    8998:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    899a:	9222      	str	r2, [sp, #136]	; 0x88
    899c:	f24e 3338 	movw	r3, #58168	; 0xe338
    89a0:	f2c0 0301 	movt	r3, #1
    89a4:	681b      	ldr	r3, [r3, #0]
    89a6:	f24e 3c3c 	movw	ip, #58172	; 0xe33c
    89aa:	f2c0 0c01 	movt	ip, #1
    89ae:	f8dc c000 	ldr.w	ip, [ip]
    89b2:	46ee      	mov	lr, sp
    89b4:	2400      	movs	r4, #0
    89b6:	f8ce 4000 	str.w	r4, [lr]
    89ba:	a823      	add	r0, sp, #140	; 0x8c
    89bc:	2201      	movs	r2, #1
    89be:	910a      	str	r1, [sp, #40]	; 0x28
    89c0:	4619      	mov	r1, r3
    89c2:	4663      	mov	r3, ip
    89c4:	f000 f86a 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    89c8:	e7ff      	b.n	89ca <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xa2>
    89ca:	a821      	add	r0, sp, #132	; 0x84
    89cc:	901e      	str	r0, [sp, #120]	; 0x78
    89ce:	a822      	add	r0, sp, #136	; 0x88
    89d0:	901f      	str	r0, [sp, #124]	; 0x7c
    89d2:	a823      	add	r0, sp, #140	; 0x8c
    89d4:	9020      	str	r0, [sp, #128]	; 0x80
    89d6:	981e      	ldr	r0, [sp, #120]	; 0x78
    89d8:	902f      	str	r0, [sp, #188]	; 0xbc
    89da:	991f      	ldr	r1, [sp, #124]	; 0x7c
    89dc:	9130      	str	r1, [sp, #192]	; 0xc0
    89de:	9a20      	ldr	r2, [sp, #128]	; 0x80
    89e0:	9231      	str	r2, [sp, #196]	; 0xc4
    89e2:	f249 03e7 	movw	r3, #37095	; 0x90e7
    89e6:	f2c0 0300 	movt	r3, #0
    89ea:	9109      	str	r1, [sp, #36]	; 0x24
    89ec:	4619      	mov	r1, r3
    89ee:	9208      	str	r2, [sp, #32]
    89f0:	f000 fcc8 	bl	9384 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    89f4:	9007      	str	r0, [sp, #28]
    89f6:	9106      	str	r1, [sp, #24]
    89f8:	e7ff      	b.n	89fa <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xd2>
    89fa:	f249 01e7 	movw	r1, #37095	; 0x90e7
    89fe:	f2c0 0100 	movt	r1, #0
    8a02:	9809      	ldr	r0, [sp, #36]	; 0x24
    8a04:	f000 fcbe 	bl	9384 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    8a08:	9005      	str	r0, [sp, #20]
    8a0a:	9104      	str	r1, [sp, #16]
    8a0c:	e7ff      	b.n	8a0e <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xe6>
    8a0e:	f647 7183 	movw	r1, #32643	; 0x7f83
    8a12:	f2c0 0101 	movt	r1, #1
    8a16:	9808      	ldr	r0, [sp, #32]
    8a18:	f000 fcde 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    8a1c:	9003      	str	r0, [sp, #12]
    8a1e:	9102      	str	r1, [sp, #8]
    8a20:	e7ff      	b.n	8a22 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xfa>
    8a22:	9807      	ldr	r0, [sp, #28]
    8a24:	9018      	str	r0, [sp, #96]	; 0x60
    8a26:	9906      	ldr	r1, [sp, #24]
    8a28:	9119      	str	r1, [sp, #100]	; 0x64
    8a2a:	9a05      	ldr	r2, [sp, #20]
    8a2c:	921a      	str	r2, [sp, #104]	; 0x68
    8a2e:	9b04      	ldr	r3, [sp, #16]
    8a30:	931b      	str	r3, [sp, #108]	; 0x6c
    8a32:	f8dd c00c 	ldr.w	ip, [sp, #12]
    8a36:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
    8a3a:	f8dd e008 	ldr.w	lr, [sp, #8]
    8a3e:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
    8a42:	466c      	mov	r4, sp
    8a44:	2503      	movs	r5, #3
    8a46:	6025      	str	r5, [r4, #0]
    8a48:	a812      	add	r0, sp, #72	; 0x48
    8a4a:	ab18      	add	r3, sp, #96	; 0x60
    8a4c:	990a      	ldr	r1, [sp, #40]	; 0x28
    8a4e:	462a      	mov	r2, r5
    8a50:	f000 f824 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8a54:	e7ff      	b.n	8a56 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12e>
    8a56:	f24e 3058 	movw	r0, #58200	; 0xe358
    8a5a:	f2c0 0001 	movt	r0, #1
    8a5e:	f00e ffa2 	bl	179a6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    8a62:	9001      	str	r0, [sp, #4]
    8a64:	e7ff      	b.n	8a66 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x13e>
    8a66:	a812      	add	r0, sp, #72	; 0x48
    8a68:	9901      	ldr	r1, [sp, #4]
    8a6a:	f00e ffd9 	bl	17a20 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    8a6e:	defe      	udf	#254	; 0xfe
    }
    8a70:	b032      	add	sp, #200	; 0xc8
    8a72:	bdb0      	pop	{r4, r5, r7, pc}

00008a74 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>:
        fn from(num: i32) -> Self {
    8a74:	b083      	sub	sp, #12
    8a76:	9001      	str	r0, [sp, #4]
                ::core::mem::transmute::
    8a78:	9002      	str	r0, [sp, #8]
    8a7a:	9802      	ldr	r0, [sp, #8]
    8a7c:	9000      	str	r0, [sp, #0]
    8a7e:	e7ff      	b.n	8a80 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E+0xc>
        }
    8a80:	9800      	ldr	r0, [sp, #0]
    8a82:	b003      	add	sp, #12
    8a84:	4770      	bx	lr

00008a86 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>:
        fn from(_: ()) -> Self {
    8a86:	b081      	sub	sp, #4
    8a88:	f06f 000c 	mvn.w	r0, #12
        }
    8a8c:	b001      	add	sp, #4
    8a8e:	4770      	bx	lr

00008a90 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E>:
        fn fmt(&self, _fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
    8a90:	b082      	sub	sp, #8
    8a92:	9000      	str	r0, [sp, #0]
    8a94:	9101      	str	r1, [sp, #4]
    8a96:	2000      	movs	r0, #0
        }
    8a98:	b002      	add	sp, #8
    8a9a:	4770      	bx	lr

00008a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>:
    8a9c:	b580      	push	{r7, lr}
    8a9e:	b086      	sub	sp, #24
    8aa0:	f8dd c020 	ldr.w	ip, [sp, #32]
    8aa4:	9102      	str	r1, [sp, #8]
    8aa6:	9203      	str	r2, [sp, #12]
    8aa8:	9304      	str	r3, [sp, #16]
    8aaa:	f8cd c014 	str.w	ip, [sp, #20]
    8aae:	f04f 0e00 	mov.w	lr, #0
    8ab2:	f8cd e004 	str.w	lr, [sp, #4]
    8ab6:	f8cd e000 	str.w	lr, [sp]
    8aba:	f8cd e000 	str.w	lr, [sp]
    8abe:	6001      	str	r1, [r0, #0]
    8ac0:	6042      	str	r2, [r0, #4]
    8ac2:	9900      	ldr	r1, [sp, #0]
    8ac4:	9a01      	ldr	r2, [sp, #4]
    8ac6:	6081      	str	r1, [r0, #8]
    8ac8:	60c2      	str	r2, [r0, #12]
    8aca:	6103      	str	r3, [r0, #16]
    8acc:	f8c0 c014 	str.w	ip, [r0, #20]
    8ad0:	b006      	add	sp, #24
    8ad2:	bd80      	pop	{r7, pc}

00008ad4 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>:
    8ad4:	b082      	sub	sp, #8
    8ad6:	9001      	str	r0, [sp, #4]
    8ad8:	7800      	ldrb	r0, [r0, #0]
    8ada:	07c0      	lsls	r0, r0, #31
    8adc:	2800      	cmp	r0, #0
    8ade:	d004      	beq.n	8aea <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x16>
    8ae0:	e7ff      	b.n	8ae2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0xe>
    8ae2:	2000      	movs	r0, #0
    8ae4:	f88d 0003 	strb.w	r0, [sp, #3]
    8ae8:	e003      	b.n	8af2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    8aea:	2001      	movs	r0, #1
    8aec:	f88d 0003 	strb.w	r0, [sp, #3]
    8af0:	e7ff      	b.n	8af2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    8af2:	f89d 0003 	ldrb.w	r0, [sp, #3]
    8af6:	b002      	add	sp, #8
    8af8:	4770      	bx	lr

00008afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>:
    8afa:	b08a      	sub	sp, #40	; 0x28
    8afc:	9005      	str	r0, [sp, #20]
    8afe:	9107      	str	r1, [sp, #28]
    8b00:	9208      	str	r2, [sp, #32]
    8b02:	9805      	ldr	r0, [sp, #20]
    8b04:	f1b0 0c01 	subs.w	ip, r0, #1
    8b08:	bf18      	it	ne
    8b0a:	f04f 0c01 	movne.w	ip, #1
    8b0e:	2801      	cmp	r0, #1
    8b10:	9304      	str	r3, [sp, #16]
    8b12:	9203      	str	r2, [sp, #12]
    8b14:	9102      	str	r1, [sp, #8]
    8b16:	d010      	beq.n	8b3a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x40>
    8b18:	e7ff      	b.n	8b1a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x20>
    8b1a:	9805      	ldr	r0, [sp, #20]
    8b1c:	9006      	str	r0, [sp, #24]
    8b1e:	4668      	mov	r0, sp
    8b20:	9904      	ldr	r1, [sp, #16]
    8b22:	6001      	str	r1, [r0, #0]
    8b24:	f24e 3368 	movw	r3, #58216	; 0xe368
    8b28:	f2c0 0301 	movt	r3, #1
    8b2c:	aa06      	add	r2, sp, #24
    8b2e:	9802      	ldr	r0, [sp, #8]
    8b30:	9903      	ldr	r1, [sp, #12]
    8b32:	f00e ff11 	bl	17958 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
    8b36:	defe      	udf	#254	; 0xfe
    8b38:	defe      	udf	#254	; 0xfe
    8b3a:	9805      	ldr	r0, [sp, #20]
    8b3c:	2801      	cmp	r0, #1
    8b3e:	d102      	bne.n	8b46 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x4c>
    8b40:	e7ff      	b.n	8b42 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>
    8b42:	b00a      	add	sp, #40	; 0x28
    8b44:	4770      	bx	lr
    8b46:	e7fc      	b.n	8b42 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>

00008b48 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>:
    8b48:	b580      	push	{r7, lr}
    8b4a:	b082      	sub	sp, #8
    8b4c:	9001      	str	r0, [sp, #4]
    8b4e:	f7ff ffc1 	bl	8ad4 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>
    8b52:	9000      	str	r0, [sp, #0]
    8b54:	e7ff      	b.n	8b56 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E+0xe>
    8b56:	2001      	movs	r0, #1
    8b58:	9900      	ldr	r1, [sp, #0]
    8b5a:	4388      	bics	r0, r1
    8b5c:	b002      	add	sp, #8
    8b5e:	bd80      	pop	{r7, pc}

00008b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>:
    8b60:	b082      	sub	sp, #8
    8b62:	9001      	str	r0, [sp, #4]
    8b64:	9000      	str	r0, [sp, #0]
    8b66:	9800      	ldr	r0, [sp, #0]
    8b68:	b002      	add	sp, #8
    8b6a:	4770      	bx	lr

00008b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>:
    8b6c:	b081      	sub	sp, #4
    8b6e:	4601      	mov	r1, r0
    8b70:	f88d 0003 	strb.w	r0, [sp, #3]
    8b74:	b001      	add	sp, #4
    8b76:	4770      	bx	lr

00008b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>:
    8b78:	b081      	sub	sp, #4
    8b7a:	9000      	str	r0, [sp, #0]
    8b7c:	b001      	add	sp, #4
    8b7e:	4770      	bx	lr

00008b80 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E>:
    8b80:	b580      	push	{r7, lr}
    8b82:	b08a      	sub	sp, #40	; 0x28
    8b84:	9007      	str	r0, [sp, #28]
    8b86:	9108      	str	r1, [sp, #32]
    8b88:	9209      	str	r2, [sp, #36]	; 0x24
    8b8a:	2300      	movs	r3, #0
    8b8c:	9305      	str	r3, [sp, #20]
    8b8e:	9006      	str	r0, [sp, #24]
    8b90:	9805      	ldr	r0, [sp, #20]
    8b92:	9b06      	ldr	r3, [sp, #24]
    8b94:	9104      	str	r1, [sp, #16]
    8b96:	4619      	mov	r1, r3
    8b98:	9b04      	ldr	r3, [sp, #16]
    8b9a:	9203      	str	r2, [sp, #12]
    8b9c:	461a      	mov	r2, r3
    8b9e:	9b03      	ldr	r3, [sp, #12]
    8ba0:	f000 f828 	bl	8bf4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>
    8ba4:	9002      	str	r0, [sp, #8]
    8ba6:	9101      	str	r1, [sp, #4]
    8ba8:	e7ff      	b.n	8baa <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E+0x2a>
    8baa:	9802      	ldr	r0, [sp, #8]
    8bac:	9901      	ldr	r1, [sp, #4]
    8bae:	b00a      	add	sp, #40	; 0x28
    8bb0:	bd80      	pop	{r7, pc}

00008bb2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E>:
    8bb2:	b580      	push	{r7, lr}
    8bb4:	b08a      	sub	sp, #40	; 0x28
    8bb6:	9006      	str	r0, [sp, #24]
    8bb8:	9107      	str	r1, [sp, #28]
    8bba:	9208      	str	r2, [sp, #32]
    8bbc:	9309      	str	r3, [sp, #36]	; 0x24
    8bbe:	9005      	str	r0, [sp, #20]
    8bc0:	4610      	mov	r0, r2
    8bc2:	9104      	str	r1, [sp, #16]
    8bc4:	4619      	mov	r1, r3
    8bc6:	f009 f99f 	bl	11f08 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    8bca:	9003      	str	r0, [sp, #12]
    8bcc:	e7ff      	b.n	8bce <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x1c>
    8bce:	9803      	ldr	r0, [sp, #12]
    8bd0:	9905      	ldr	r1, [sp, #20]
    8bd2:	f009 f920 	bl	11e16 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    8bd6:	9002      	str	r0, [sp, #8]
    8bd8:	e7ff      	b.n	8bda <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x28>
    8bda:	9804      	ldr	r0, [sp, #16]
    8bdc:	9905      	ldr	r1, [sp, #20]
    8bde:	1a41      	subs	r1, r0, r1
    8be0:	9802      	ldr	r0, [sp, #8]
    8be2:	f000 f8b7 	bl	8d54 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
    8be6:	9001      	str	r0, [sp, #4]
    8be8:	9100      	str	r1, [sp, #0]
    8bea:	e7ff      	b.n	8bec <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x3a>
    8bec:	9801      	ldr	r0, [sp, #4]
    8bee:	9900      	ldr	r1, [sp, #0]
    8bf0:	b00a      	add	sp, #40	; 0x28
    8bf2:	bd80      	pop	{r7, pc}

00008bf4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>:
    8bf4:	b580      	push	{r7, lr}
    8bf6:	b08c      	sub	sp, #48	; 0x30
    8bf8:	9008      	str	r0, [sp, #32]
    8bfa:	9109      	str	r1, [sp, #36]	; 0x24
    8bfc:	920a      	str	r2, [sp, #40]	; 0x28
    8bfe:	930b      	str	r3, [sp, #44]	; 0x2c
    8c00:	4288      	cmp	r0, r1
    8c02:	9307      	str	r3, [sp, #28]
    8c04:	9206      	str	r2, [sp, #24]
    8c06:	9105      	str	r1, [sp, #20]
    8c08:	9004      	str	r0, [sp, #16]
    8c0a:	d806      	bhi.n	8c1a <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x26>
    8c0c:	e7ff      	b.n	8c0e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x1a>
    8c0e:	9806      	ldr	r0, [sp, #24]
    8c10:	9907      	ldr	r1, [sp, #28]
    8c12:	f009 f990 	bl	11f36 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8c16:	9003      	str	r0, [sp, #12]
    8c18:	e004      	b.n	8c24 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x30>
    8c1a:	9804      	ldr	r0, [sp, #16]
    8c1c:	9905      	ldr	r1, [sp, #20]
    8c1e:	f00f fe3e 	bl	1889e <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
    8c22:	defe      	udf	#254	; 0xfe
    8c24:	9805      	ldr	r0, [sp, #20]
    8c26:	9903      	ldr	r1, [sp, #12]
    8c28:	4288      	cmp	r0, r1
    8c2a:	d809      	bhi.n	8c40 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x4c>
    8c2c:	e7ff      	b.n	8c2e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x3a>
    8c2e:	9804      	ldr	r0, [sp, #16]
    8c30:	9905      	ldr	r1, [sp, #20]
    8c32:	9a06      	ldr	r2, [sp, #24]
    8c34:	9b07      	ldr	r3, [sp, #28]
    8c36:	f7ff ffbc 	bl	8bb2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E>
    8c3a:	9002      	str	r0, [sp, #8]
    8c3c:	9101      	str	r1, [sp, #4]
    8c3e:	e00a      	b.n	8c56 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x62>
    8c40:	9806      	ldr	r0, [sp, #24]
    8c42:	9907      	ldr	r1, [sp, #28]
    8c44:	f009 f977 	bl	11f36 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8c48:	9000      	str	r0, [sp, #0]
    8c4a:	e7ff      	b.n	8c4c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x58>
    8c4c:	9805      	ldr	r0, [sp, #20]
    8c4e:	9900      	ldr	r1, [sp, #0]
    8c50:	f00f fe03 	bl	1885a <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
    8c54:	defe      	udf	#254	; 0xfe
    8c56:	9802      	ldr	r0, [sp, #8]
    8c58:	9901      	ldr	r1, [sp, #4]
    8c5a:	b00c      	add	sp, #48	; 0x30
    8c5c:	bd80      	pop	{r7, pc}

00008c5e <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>:
    #[doc = " - __`evq`__: The event queue to pull an event from"]
    #[doc = ""]
    #[doc = " Return: The event from the queue"]
    pub fn os_eventq_get(arg1: *mut os_eventq) -> *mut os_event;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8c5e:	b580      	push	{r7, lr}
    8c60:	b082      	sub	sp, #8
    8c62:	9001      	str	r0, [sp, #4]
    8c64:	f012 f980 	bl	1af68 <os_eventq_run>
    8c68:	e7ff      	b.n	8c6a <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE+0xc>
    8c6a:	2001      	movs	r0, #1
    8c6c:	b002      	add	sp, #8
    8c6e:	bd80      	pop	{r7, pc}

00008c70 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>:
    #[doc = ""]
    #[doc = " - __`evq`__: The event queue to remove the event from"]
    #[doc = " - __`ev`__:  The event to remove from the queue"]
    pub fn os_eventq_remove(arg1: *mut os_eventq, arg2: *mut os_event);
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8c70:	b580      	push	{r7, lr}
    8c72:	b084      	sub	sp, #16
    8c74:	9002      	str	r0, [sp, #8]
    8c76:	f012 f9a3 	bl	1afc0 <os_eventq_dflt_get>
    8c7a:	4601      	mov	r1, r0
    8c7c:	9003      	str	r0, [sp, #12]
    8c7e:	9101      	str	r1, [sp, #4]
    8c80:	e7ff      	b.n	8c82 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE+0x12>
    8c82:	9801      	ldr	r0, [sp, #4]
    8c84:	9902      	ldr	r1, [sp, #8]
    8c86:	6048      	str	r0, [r1, #4]
    8c88:	2200      	movs	r2, #0
    8c8a:	600a      	str	r2, [r1, #0]
    8c8c:	b004      	add	sp, #16
    8c8e:	bd80      	pop	{r7, pc}

00008c90 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>:
impl Default for os_task_stailq {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8c90:	b570      	push	{r4, r5, r6, lr}
    8c92:	b09c      	sub	sp, #112	; 0x70
    8c94:	f8dd c090 	ldr.w	ip, [sp, #144]	; 0x90
    8c98:	f8dd e08c 	ldr.w	lr, [sp, #140]	; 0x8c
    8c9c:	9c22      	ldr	r4, [sp, #136]	; 0x88
    8c9e:	9d21      	ldr	r5, [sp, #132]	; 0x84
    8ca0:	9e20      	ldr	r6, [sp, #128]	; 0x80
    8ca2:	9013      	str	r0, [sp, #76]	; 0x4c
    8ca4:	9114      	str	r1, [sp, #80]	; 0x50
    8ca6:	9215      	str	r2, [sp, #84]	; 0x54
    8ca8:	9316      	str	r3, [sp, #88]	; 0x58
    8caa:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
    8cae:	9418      	str	r4, [sp, #96]	; 0x60
    8cb0:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
    8cb4:	f8ad c06a 	strh.w	ip, [sp, #106]	; 0x6a
    8cb8:	9011      	str	r0, [sp, #68]	; 0x44
    8cba:	4608      	mov	r0, r1
    8cbc:	9310      	str	r3, [sp, #64]	; 0x40
    8cbe:	920f      	str	r2, [sp, #60]	; 0x3c
    8cc0:	910e      	str	r1, [sp, #56]	; 0x38
    8cc2:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    8cc6:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
    8cca:	940b      	str	r4, [sp, #44]	; 0x2c
    8ccc:	950a      	str	r5, [sp, #40]	; 0x28
    8cce:	9609      	str	r6, [sp, #36]	; 0x24
    8cd0:	f7ff fe2a 	bl	8928 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>
    8cd4:	e7ff      	b.n	8cd6 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x46>
    8cd6:	980e      	ldr	r0, [sp, #56]	; 0x38
    8cd8:	f7ff fe08 	bl	88ec <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>
    8cdc:	9008      	str	r0, [sp, #32]
    8cde:	e7ff      	b.n	8ce0 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x50>
    8ce0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8ce2:	990c      	ldr	r1, [sp, #48]	; 0x30
    8ce4:	f000 f93b 	bl	8f5e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>
    8ce8:	9007      	str	r0, [sp, #28]
    8cea:	e7ff      	b.n	8cec <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x5c>
    8cec:	980d      	ldr	r0, [sp, #52]	; 0x34
    8cee:	b281      	uxth	r1, r0
    8cf0:	466a      	mov	r2, sp
    8cf2:	60d1      	str	r1, [r2, #12]
    8cf4:	9907      	ldr	r1, [sp, #28]
    8cf6:	6091      	str	r1, [r2, #8]
    8cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8cfa:	6053      	str	r3, [r2, #4]
    8cfc:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    8d00:	fa5f fe8c 	uxtb.w	lr, ip
    8d04:	f8c2 e000 	str.w	lr, [r2]
    8d08:	9811      	ldr	r0, [sp, #68]	; 0x44
    8d0a:	9908      	ldr	r1, [sp, #32]
    8d0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8d0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8d10:	f012 fef6 	bl	1bb00 <os_task_init>
    8d14:	4601      	mov	r1, r0
    8d16:	901b      	str	r0, [sp, #108]	; 0x6c
    8d18:	9106      	str	r1, [sp, #24]
    8d1a:	e7ff      	b.n	8d1c <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x8c>
    8d1c:	9806      	ldr	r0, [sp, #24]
    8d1e:	2800      	cmp	r0, #0
    8d20:	d005      	beq.n	8d2e <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x9e>
    8d22:	e7ff      	b.n	8d24 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x94>
    8d24:	9806      	ldr	r0, [sp, #24]
    8d26:	f7ff fea5 	bl	8a74 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>
    8d2a:	9005      	str	r0, [sp, #20]
    8d2c:	e004      	b.n	8d38 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xa8>
    8d2e:	2000      	movs	r0, #0
    8d30:	9012      	str	r0, [sp, #72]	; 0x48
    8d32:	2001      	movs	r0, #1
    8d34:	9012      	str	r0, [sp, #72]	; 0x48
    8d36:	e002      	b.n	8d3e <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    8d38:	9805      	ldr	r0, [sp, #20]
    8d3a:	9012      	str	r0, [sp, #72]	; 0x48
    8d3c:	e7ff      	b.n	8d3e <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    8d3e:	9812      	ldr	r0, [sp, #72]	; 0x48
    8d40:	b01c      	add	sp, #112	; 0x70
    8d42:	bd70      	pop	{r4, r5, r6, pc}

00008d44 <_ZN4core3ptr13drop_in_place17h1982c2483e0a2028E>:
    8d44:	b081      	sub	sp, #4
    8d46:	9000      	str	r0, [sp, #0]
    8d48:	b001      	add	sp, #4
    8d4a:	4770      	bx	lr

00008d4c <_ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E>:
    8d4c:	b081      	sub	sp, #4
    8d4e:	9000      	str	r0, [sp, #0]
    8d50:	b001      	add	sp, #4
    8d52:	4770      	bx	lr

00008d54 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>:
    8d54:	b580      	push	{r7, lr}
    8d56:	b084      	sub	sp, #16
    8d58:	9002      	str	r0, [sp, #8]
    8d5a:	9103      	str	r1, [sp, #12]
    8d5c:	f000 f993 	bl	9086 <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>
    8d60:	9001      	str	r0, [sp, #4]
    8d62:	9100      	str	r1, [sp, #0]
    8d64:	e7ff      	b.n	8d66 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE+0x12>
    8d66:	9801      	ldr	r0, [sp, #4]
    8d68:	9900      	ldr	r1, [sp, #0]
    8d6a:	b004      	add	sp, #16
    8d6c:	bd80      	pop	{r7, pc}

00008d6e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>:
    8d6e:	b5b0      	push	{r4, r5, r7, lr}
    8d70:	b0b8      	sub	sp, #224	; 0xe0
    8d72:	902f      	str	r0, [sp, #188]	; 0xbc
    8d74:	9130      	str	r1, [sp, #192]	; 0xc0
    8d76:	9231      	str	r2, [sp, #196]	; 0xc4
    8d78:	9332      	str	r3, [sp, #200]	; 0xc8
    8d7a:	9013      	str	r0, [sp, #76]	; 0x4c
    8d7c:	9112      	str	r1, [sp, #72]	; 0x48
    8d7e:	9311      	str	r3, [sp, #68]	; 0x44
    8d80:	9210      	str	r2, [sp, #64]	; 0x40
    8d82:	f009 f8d8 	bl	11f36 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8d86:	9016      	str	r0, [sp, #88]	; 0x58
    8d88:	e7ff      	b.n	8d8a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x1c>
    8d8a:	9810      	ldr	r0, [sp, #64]	; 0x40
    8d8c:	9911      	ldr	r1, [sp, #68]	; 0x44
    8d8e:	f009 f8d2 	bl	11f36 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8d92:	9017      	str	r0, [sp, #92]	; 0x5c
    8d94:	e7ff      	b.n	8d96 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x28>
    8d96:	a816      	add	r0, sp, #88	; 0x58
    8d98:	9014      	str	r0, [sp, #80]	; 0x50
    8d9a:	a817      	add	r0, sp, #92	; 0x5c
    8d9c:	9015      	str	r0, [sp, #84]	; 0x54
    8d9e:	9814      	ldr	r0, [sp, #80]	; 0x50
    8da0:	9033      	str	r0, [sp, #204]	; 0xcc
    8da2:	9915      	ldr	r1, [sp, #84]	; 0x54
    8da4:	9134      	str	r1, [sp, #208]	; 0xd0
    8da6:	6802      	ldr	r2, [r0, #0]
    8da8:	680b      	ldr	r3, [r1, #0]
    8daa:	429a      	cmp	r2, r3
    8dac:	900f      	str	r0, [sp, #60]	; 0x3c
    8dae:	910e      	str	r1, [sp, #56]	; 0x38
    8db0:	d106      	bne.n	8dc0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x52>
    8db2:	e7ff      	b.n	8db4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x46>
    8db4:	9810      	ldr	r0, [sp, #64]	; 0x40
    8db6:	9911      	ldr	r1, [sp, #68]	; 0x44
    8db8:	f009 f8c5 	bl	11f46 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    8dbc:	900d      	str	r0, [sp, #52]	; 0x34
    8dbe:	e072      	b.n	8ea6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x138>
    8dc0:	f24e 30cc 	movw	r0, #58316	; 0xe3cc
    8dc4:	f2c0 0001 	movt	r0, #1
    8dc8:	6801      	ldr	r1, [r0, #0]
    8dca:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8dcc:	9027      	str	r0, [sp, #156]	; 0x9c
    8dce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8dd0:	9228      	str	r2, [sp, #160]	; 0xa0
    8dd2:	f24e 430c 	movw	r3, #58380	; 0xe40c
    8dd6:	f2c0 0301 	movt	r3, #1
    8dda:	681b      	ldr	r3, [r3, #0]
    8ddc:	f24e 4c10 	movw	ip, #58384	; 0xe410
    8de0:	f2c0 0c01 	movt	ip, #1
    8de4:	f8dc c000 	ldr.w	ip, [ip]
    8de8:	46ee      	mov	lr, sp
    8dea:	2400      	movs	r4, #0
    8dec:	f8ce 4000 	str.w	r4, [lr]
    8df0:	a829      	add	r0, sp, #164	; 0xa4
    8df2:	2201      	movs	r2, #1
    8df4:	910c      	str	r1, [sp, #48]	; 0x30
    8df6:	4619      	mov	r1, r3
    8df8:	4663      	mov	r3, ip
    8dfa:	f7ff fe4f 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8dfe:	e7ff      	b.n	8e00 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x92>
    8e00:	a827      	add	r0, sp, #156	; 0x9c
    8e02:	9024      	str	r0, [sp, #144]	; 0x90
    8e04:	a828      	add	r0, sp, #160	; 0xa0
    8e06:	9025      	str	r0, [sp, #148]	; 0x94
    8e08:	a829      	add	r0, sp, #164	; 0xa4
    8e0a:	9026      	str	r0, [sp, #152]	; 0x98
    8e0c:	9824      	ldr	r0, [sp, #144]	; 0x90
    8e0e:	9035      	str	r0, [sp, #212]	; 0xd4
    8e10:	9925      	ldr	r1, [sp, #148]	; 0x94
    8e12:	9136      	str	r1, [sp, #216]	; 0xd8
    8e14:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8e16:	9237      	str	r2, [sp, #220]	; 0xdc
    8e18:	f242 6365 	movw	r3, #9829	; 0x2665
    8e1c:	f2c0 0301 	movt	r3, #1
    8e20:	910b      	str	r1, [sp, #44]	; 0x2c
    8e22:	4619      	mov	r1, r3
    8e24:	920a      	str	r2, [sp, #40]	; 0x28
    8e26:	f009 fc2b 	bl	12680 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    8e2a:	9009      	str	r0, [sp, #36]	; 0x24
    8e2c:	9108      	str	r1, [sp, #32]
    8e2e:	e7ff      	b.n	8e30 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xc2>
    8e30:	f242 6165 	movw	r1, #9829	; 0x2665
    8e34:	f2c0 0101 	movt	r1, #1
    8e38:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8e3a:	f009 fc21 	bl	12680 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    8e3e:	9007      	str	r0, [sp, #28]
    8e40:	9106      	str	r1, [sp, #24]
    8e42:	e7ff      	b.n	8e44 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xd6>
    8e44:	f647 7183 	movw	r1, #32643	; 0x7f83
    8e48:	f2c0 0101 	movt	r1, #1
    8e4c:	980a      	ldr	r0, [sp, #40]	; 0x28
    8e4e:	f000 fac3 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    8e52:	9005      	str	r0, [sp, #20]
    8e54:	9104      	str	r1, [sp, #16]
    8e56:	e7ff      	b.n	8e58 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xea>
    8e58:	9809      	ldr	r0, [sp, #36]	; 0x24
    8e5a:	901e      	str	r0, [sp, #120]	; 0x78
    8e5c:	9908      	ldr	r1, [sp, #32]
    8e5e:	911f      	str	r1, [sp, #124]	; 0x7c
    8e60:	9a07      	ldr	r2, [sp, #28]
    8e62:	9220      	str	r2, [sp, #128]	; 0x80
    8e64:	9b06      	ldr	r3, [sp, #24]
    8e66:	9321      	str	r3, [sp, #132]	; 0x84
    8e68:	f8dd c014 	ldr.w	ip, [sp, #20]
    8e6c:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    8e70:	f8dd e010 	ldr.w	lr, [sp, #16]
    8e74:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
    8e78:	466c      	mov	r4, sp
    8e7a:	2503      	movs	r5, #3
    8e7c:	6025      	str	r5, [r4, #0]
    8e7e:	a818      	add	r0, sp, #96	; 0x60
    8e80:	ab1e      	add	r3, sp, #120	; 0x78
    8e82:	990c      	ldr	r1, [sp, #48]	; 0x30
    8e84:	462a      	mov	r2, r5
    8e86:	f7ff fe09 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8e8a:	e7ff      	b.n	8e8c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x11e>
    8e8c:	f24e 4060 	movw	r0, #58464	; 0xe460
    8e90:	f2c0 0001 	movt	r0, #1
    8e94:	f00e fd87 	bl	179a6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    8e98:	9003      	str	r0, [sp, #12]
    8e9a:	e7ff      	b.n	8e9c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x12e>
    8e9c:	a818      	add	r0, sp, #96	; 0x60
    8e9e:	9903      	ldr	r1, [sp, #12]
    8ea0:	f00e fdbe 	bl	17a20 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    8ea4:	defe      	udf	#254	; 0xfe
    8ea6:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8ea8:	9912      	ldr	r1, [sp, #72]	; 0x48
    8eaa:	f009 f82d 	bl	11f08 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    8eae:	9002      	str	r0, [sp, #8]
    8eb0:	e7ff      	b.n	8eb2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x144>
    8eb2:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8eb4:	9912      	ldr	r1, [sp, #72]	; 0x48
    8eb6:	f009 f83e 	bl	11f36 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8eba:	9001      	str	r0, [sp, #4]
    8ebc:	e7ff      	b.n	8ebe <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x150>
    8ebe:	980d      	ldr	r0, [sp, #52]	; 0x34
    8ec0:	9902      	ldr	r1, [sp, #8]
    8ec2:	9a01      	ldr	r2, [sp, #4]
    8ec4:	f008 fe43 	bl	11b4e <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    8ec8:	e7ff      	b.n	8eca <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x15c>
    8eca:	b038      	add	sp, #224	; 0xe0
    8ecc:	bdb0      	pop	{r4, r5, r7, pc}

00008ece <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>:
    8ece:	b580      	push	{r7, lr}
    8ed0:	b086      	sub	sp, #24
    8ed2:	9003      	str	r0, [sp, #12]
    8ed4:	9104      	str	r1, [sp, #16]
    8ed6:	9205      	str	r2, [sp, #20]
    8ed8:	9002      	str	r0, [sp, #8]
    8eda:	4610      	mov	r0, r2
    8edc:	9a02      	ldr	r2, [sp, #8]
    8ede:	9101      	str	r1, [sp, #4]
    8ee0:	4611      	mov	r1, r2
    8ee2:	9a01      	ldr	r2, [sp, #4]
    8ee4:	f000 f861 	bl	8faa <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>
    8ee8:	9000      	str	r0, [sp, #0]
    8eea:	e7ff      	b.n	8eec <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE+0x1e>
    8eec:	9800      	ldr	r0, [sp, #0]
    8eee:	b006      	add	sp, #24
    8ef0:	bd80      	pop	{r7, pc}

00008ef2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>:
    8ef2:	b580      	push	{r7, lr}
    8ef4:	b08e      	sub	sp, #56	; 0x38
    8ef6:	9009      	str	r0, [sp, #36]	; 0x24
    8ef8:	910a      	str	r1, [sp, #40]	; 0x28
    8efa:	9005      	str	r0, [sp, #20]
    8efc:	9104      	str	r1, [sp, #16]
    8efe:	f009 f81a 	bl	11f36 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8f02:	9003      	str	r0, [sp, #12]
    8f04:	e7ff      	b.n	8f06 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x14>
    8f06:	2101      	movs	r1, #1
    8f08:	9803      	ldr	r0, [sp, #12]
    8f0a:	f000 fa7a 	bl	9402 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>
    8f0e:	9002      	str	r0, [sp, #8]
    8f10:	9101      	str	r1, [sp, #4]
    8f12:	e7ff      	b.n	8f14 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x22>
    8f14:	9802      	ldr	r0, [sp, #8]
    8f16:	9901      	ldr	r1, [sp, #4]
    8f18:	f000 f97c 	bl	9214 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>
    8f1c:	9108      	str	r1, [sp, #32]
    8f1e:	9007      	str	r0, [sp, #28]
    8f20:	e7ff      	b.n	8f22 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x30>
    8f22:	9807      	ldr	r0, [sp, #28]
    8f24:	2800      	cmp	r0, #0
    8f26:	d001      	beq.n	8f2c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x3a>
    8f28:	e7ff      	b.n	8f2a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x38>
    8f2a:	e00c      	b.n	8f46 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x54>
    8f2c:	9808      	ldr	r0, [sp, #32]
    8f2e:	900c      	str	r0, [sp, #48]	; 0x30
    8f30:	900d      	str	r0, [sp, #52]	; 0x34
    8f32:	9905      	ldr	r1, [sp, #20]
    8f34:	9000      	str	r0, [sp, #0]
    8f36:	4608      	mov	r0, r1
    8f38:	9904      	ldr	r1, [sp, #16]
    8f3a:	9a00      	ldr	r2, [sp, #0]
    8f3c:	f7ff ffc7 	bl	8ece <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>
    8f40:	9006      	str	r0, [sp, #24]
    8f42:	e00b      	b.n	8f5c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x6a>
    8f44:	defe      	udf	#254	; 0xfe
    8f46:	f008 fbc5 	bl	116d4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>
    8f4a:	e002      	b.n	8f52 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x60>
    8f4c:	9806      	ldr	r0, [sp, #24]
    8f4e:	b00e      	add	sp, #56	; 0x38
    8f50:	bd80      	pop	{r7, pc}
    8f52:	f000 f959 	bl	9208 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>
    8f56:	9006      	str	r0, [sp, #24]
    8f58:	e7ff      	b.n	8f5a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x68>
    8f5a:	e7f7      	b.n	8f4c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>
    8f5c:	e7f6      	b.n	8f4c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>

00008f5e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>:
    8f5e:	b082      	sub	sp, #8
    8f60:	9000      	str	r0, [sp, #0]
    8f62:	9101      	str	r1, [sp, #4]
    8f64:	b002      	add	sp, #8
    8f66:	4770      	bx	lr

00008f68 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E>:
    8f68:	b580      	push	{r7, lr}
    8f6a:	b088      	sub	sp, #32
    8f6c:	9005      	str	r0, [sp, #20]
    8f6e:	9106      	str	r1, [sp, #24]
    8f70:	9207      	str	r2, [sp, #28]
    8f72:	9004      	str	r0, [sp, #16]
    8f74:	4610      	mov	r0, r2
    8f76:	9a04      	ldr	r2, [sp, #16]
    8f78:	9103      	str	r1, [sp, #12]
    8f7a:	4611      	mov	r1, r2
    8f7c:	9a03      	ldr	r2, [sp, #12]
    8f7e:	f7ff fdff 	bl	8b80 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E>
    8f82:	9002      	str	r0, [sp, #8]
    8f84:	9101      	str	r1, [sp, #4]
    8f86:	e7ff      	b.n	8f88 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E+0x20>
    8f88:	9802      	ldr	r0, [sp, #8]
    8f8a:	9901      	ldr	r1, [sp, #4]
    8f8c:	b008      	add	sp, #32
    8f8e:	bd80      	pop	{r7, pc}

00008f90 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>:
    8f90:	b580      	push	{r7, lr}
    8f92:	b084      	sub	sp, #16
    8f94:	9002      	str	r0, [sp, #8]
    8f96:	9103      	str	r1, [sp, #12]
    8f98:	f008 fb59 	bl	1164e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>
    8f9c:	9001      	str	r0, [sp, #4]
    8f9e:	9100      	str	r1, [sp, #0]
    8fa0:	e7ff      	b.n	8fa2 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E+0x12>
    8fa2:	9801      	ldr	r0, [sp, #4]
    8fa4:	9900      	ldr	r1, [sp, #0]
    8fa6:	b004      	add	sp, #16
    8fa8:	bd80      	pop	{r7, pc}

00008faa <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>:
    8faa:	b580      	push	{r7, lr}
    8fac:	b08a      	sub	sp, #40	; 0x28
    8fae:	9007      	str	r0, [sp, #28]
    8fb0:	9108      	str	r1, [sp, #32]
    8fb2:	9209      	str	r2, [sp, #36]	; 0x24
    8fb4:	9005      	str	r0, [sp, #20]
    8fb6:	4608      	mov	r0, r1
    8fb8:	9104      	str	r1, [sp, #16]
    8fba:	4611      	mov	r1, r2
    8fbc:	9203      	str	r2, [sp, #12]
    8fbe:	f008 ffba 	bl	11f36 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8fc2:	9002      	str	r0, [sp, #8]
    8fc4:	e7ff      	b.n	8fc6 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x1c>
    8fc6:	9805      	ldr	r0, [sp, #20]
    8fc8:	9902      	ldr	r1, [sp, #8]
    8fca:	4288      	cmp	r0, r1
    8fcc:	d303      	bcc.n	8fd6 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x2c>
    8fce:	e7ff      	b.n	8fd0 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x26>
    8fd0:	2000      	movs	r0, #0
    8fd2:	9006      	str	r0, [sp, #24]
    8fd4:	e009      	b.n	8fea <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    8fd6:	9805      	ldr	r0, [sp, #20]
    8fd8:	9904      	ldr	r1, [sp, #16]
    8fda:	9a03      	ldr	r2, [sp, #12]
    8fdc:	f008 ffd7 	bl	11f8e <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>
    8fe0:	9001      	str	r0, [sp, #4]
    8fe2:	e7ff      	b.n	8fe4 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x3a>
    8fe4:	9801      	ldr	r0, [sp, #4]
    8fe6:	9006      	str	r0, [sp, #24]
    8fe8:	e7ff      	b.n	8fea <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    8fea:	9806      	ldr	r0, [sp, #24]
    8fec:	b00a      	add	sp, #40	; 0x28
    8fee:	bd80      	pop	{r7, pc}

00008ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>:
//! Display messages on Arm Semihosting Console (via OpenOCD)

///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn print(msg: &str) {
    8ff0:	b580      	push	{r7, lr}
    8ff2:	b08a      	sub	sp, #40	; 0x28
    8ff4:	9004      	str	r0, [sp, #16]
    8ff6:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    let buf = msg.as_ptr();
    8ff8:	9003      	str	r0, [sp, #12]
    8ffa:	9102      	str	r1, [sp, #8]
    8ffc:	f000 f86e 	bl	90dc <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    9000:	4601      	mov	r1, r0
    9002:	9006      	str	r0, [sp, #24]
    9004:	9101      	str	r1, [sp, #4]
    9006:	e7ff      	b.n	9008 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x18>
    let len = msg.len() as u32;
    9008:	9803      	ldr	r0, [sp, #12]
    900a:	9902      	ldr	r1, [sp, #8]
    900c:	f000 f850 	bl	90b0 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    9010:	9000      	str	r0, [sp, #0]
    9012:	e7ff      	b.n	9014 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x24>
    9014:	9800      	ldr	r0, [sp, #0]
    9016:	9007      	str	r0, [sp, #28]
    9018:	2100      	movs	r1, #0

    //  TODO: Dispatch the Mynewt C function `console_buffer`.
    //  TODO: Use a procedural macro to compute the hash of function name `console_buffer`.
    let hash = 0;  //  TODO
    901a:	9108      	str	r1, [sp, #32]
    //  TODO: Lookup the dispatch address of `console_buffer`.
    let _addr = get_dispatch_address(hash);
    901c:	4608      	mov	r0, r1
    901e:	f000 f809 	bl	9034 <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>
    9022:	9009      	str	r0, [sp, #36]	; 0x24
    9024:	e7ff      	b.n	9026 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x36>
    //  TODO: Call the `console_buffer` function using the dispatch address.
    unsafe { console_buffer(buf, len); }
    9026:	9801      	ldr	r0, [sp, #4]
    9028:	9900      	ldr	r1, [sp, #0]
    902a:	f010 fc5b 	bl	198e4 <console_buffer>
    902e:	e7ff      	b.n	9030 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x40>
}
    9030:	b00a      	add	sp, #40	; 0x28
    9032:	bd80      	pop	{r7, pc}

00009034 <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>:

/// Return the Dispatch Address for the OS function whose function name hashed is `hash`
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn get_dispatch_address(_hash: u32) -> u32 {
    9034:	b081      	sub	sp, #4
    9036:	9000      	str	r0, [sp, #0]
    9038:	2000      	movs	r0, #0
    //  TODO: Lookup the Dispatch Table for the hash of function name
    0
}
    903a:	b001      	add	sp, #4
    903c:	4770      	bx	lr

0000903e <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>:
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
}

///  Add the string to the output buffer.
pub fn buffer(msg: &str) {
    903e:	b580      	push	{r7, lr}
    9040:	b086      	sub	sp, #24
    9042:	9004      	str	r0, [sp, #16]
    9044:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
    9046:	9003      	str	r0, [sp, #12]
    9048:	9102      	str	r1, [sp, #8]
    904a:	f000 f847 	bl	90dc <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    904e:	9001      	str	r0, [sp, #4]
    9050:	e7ff      	b.n	9052 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x14>
    9052:	9803      	ldr	r0, [sp, #12]
    9054:	9902      	ldr	r1, [sp, #8]
    9056:	f000 f82b 	bl	90b0 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    905a:	9000      	str	r0, [sp, #0]
    905c:	e7ff      	b.n	905e <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x20>
    905e:	9801      	ldr	r0, [sp, #4]
    9060:	9900      	ldr	r1, [sp, #0]
    9062:	f010 fc3f 	bl	198e4 <console_buffer>
    9066:	e7ff      	b.n	9068 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x2a>
}
    9068:	b006      	add	sp, #24
    906a:	bd80      	pop	{r7, pc}

0000906c <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>:
    unsafe { console_printhex(v); }
}

///  Write an int to the output buffer.
///  C API: `void console_printint(int i)`
pub fn printint(v: i32) {
    906c:	b580      	push	{r7, lr}
    906e:	b082      	sub	sp, #8
    9070:	9001      	str	r0, [sp, #4]
    unsafe { console_printint(v); }
    9072:	f010 fca7 	bl	199c4 <console_printint>
    9076:	e7ff      	b.n	9078 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E+0xc>
}
    9078:	b002      	add	sp, #8
    907a:	bd80      	pop	{r7, pc}

0000907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>:
pub fn dump(buffer: *const u8, len: u32) {
    unsafe { console_dump(buffer, len); }
}

///  Flush the output buffer to the console.
pub fn flush() {
    907c:	b580      	push	{r7, lr}
    unsafe { console_flush(); }
    907e:	f010 fc09 	bl	19894 <console_flush>
    9082:	e7ff      	b.n	9084 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E+0x8>
}
    9084:	bd80      	pop	{r7, pc}

00009086 <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>:
    9086:	b086      	sub	sp, #24
    9088:	9004      	str	r0, [sp, #16]
    908a:	9105      	str	r1, [sp, #20]
    908c:	9002      	str	r0, [sp, #8]
    908e:	9103      	str	r1, [sp, #12]
    9090:	9802      	ldr	r0, [sp, #8]
    9092:	9903      	ldr	r1, [sp, #12]
    9094:	9000      	str	r0, [sp, #0]
    9096:	9101      	str	r1, [sp, #4]
    9098:	9800      	ldr	r0, [sp, #0]
    909a:	9901      	ldr	r1, [sp, #4]
    909c:	b006      	add	sp, #24
    909e:	4770      	bx	lr

000090a0 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>:
    90a0:	b082      	sub	sp, #8
    90a2:	460a      	mov	r2, r1
    90a4:	9000      	str	r0, [sp, #0]
    90a6:	f88d 1007 	strb.w	r1, [sp, #7]
    90aa:	7001      	strb	r1, [r0, #0]
    90ac:	b002      	add	sp, #8
    90ae:	4770      	bx	lr

000090b0 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>:
    90b0:	b580      	push	{r7, lr}
    90b2:	b08a      	sub	sp, #40	; 0x28
    90b4:	9004      	str	r0, [sp, #16]
    90b6:	9105      	str	r1, [sp, #20]
    90b8:	9008      	str	r0, [sp, #32]
    90ba:	9109      	str	r1, [sp, #36]	; 0x24
    90bc:	9006      	str	r0, [sp, #24]
    90be:	9107      	str	r1, [sp, #28]
    90c0:	9806      	ldr	r0, [sp, #24]
    90c2:	9907      	ldr	r1, [sp, #28]
    90c4:	9003      	str	r0, [sp, #12]
    90c6:	9102      	str	r1, [sp, #8]
    90c8:	e7ff      	b.n	90ca <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x1a>
    90ca:	9803      	ldr	r0, [sp, #12]
    90cc:	9902      	ldr	r1, [sp, #8]
    90ce:	f008 ff32 	bl	11f36 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    90d2:	9001      	str	r0, [sp, #4]
    90d4:	e7ff      	b.n	90d6 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x26>
    90d6:	9801      	ldr	r0, [sp, #4]
    90d8:	b00a      	add	sp, #40	; 0x28
    90da:	bd80      	pop	{r7, pc}

000090dc <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>:
    90dc:	b082      	sub	sp, #8
    90de:	9000      	str	r0, [sp, #0]
    90e0:	9101      	str	r1, [sp, #4]
    90e2:	b002      	add	sp, #8
    90e4:	4770      	bx	lr

000090e6 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E>:
    90e6:	b580      	push	{r7, lr}
    90e8:	b084      	sub	sp, #16
    90ea:	9002      	str	r0, [sp, #8]
    90ec:	9103      	str	r1, [sp, #12]
    90ee:	6800      	ldr	r0, [r0, #0]
    90f0:	f000 f845 	bl	917e <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>
    90f4:	9001      	str	r0, [sp, #4]
    90f6:	e7ff      	b.n	90f8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E+0x12>
    90f8:	9801      	ldr	r0, [sp, #4]
    90fa:	f000 0001 	and.w	r0, r0, #1
    90fe:	b004      	add	sp, #16
    9100:	bd80      	pop	{r7, pc}

00009102 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>:
    9102:	b087      	sub	sp, #28
    9104:	9000      	str	r0, [sp, #0]
    9106:	9101      	str	r1, [sp, #4]
    9108:	2000      	movs	r0, #0
    910a:	f88d 0013 	strb.w	r0, [sp, #19]
    910e:	f88d 0012 	strb.w	r0, [sp, #18]
    9112:	2001      	movs	r0, #1
    9114:	f88d 0013 	strb.w	r0, [sp, #19]
    9118:	f88d 0012 	strb.w	r0, [sp, #18]
    911c:	9800      	ldr	r0, [sp, #0]
    911e:	2800      	cmp	r0, #0
    9120:	d001      	beq.n	9126 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x24>
    9122:	e7ff      	b.n	9124 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x22>
    9124:	e006      	b.n	9134 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x32>
    9126:	2000      	movs	r0, #0
    9128:	f88d 0012 	strb.w	r0, [sp, #18]
    912c:	2001      	movs	r0, #1
    912e:	9002      	str	r0, [sp, #8]
    9130:	e008      	b.n	9144 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    9132:	defe      	udf	#254	; 0xfe
    9134:	2000      	movs	r0, #0
    9136:	f88d 0013 	strb.w	r0, [sp, #19]
    913a:	9901      	ldr	r1, [sp, #4]
    913c:	9106      	str	r1, [sp, #24]
    913e:	9103      	str	r1, [sp, #12]
    9140:	9002      	str	r0, [sp, #8]
    9142:	e7ff      	b.n	9144 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    9144:	f89d 0012 	ldrb.w	r0, [sp, #18]
    9148:	07c0      	lsls	r0, r0, #31
    914a:	2800      	cmp	r0, #0
    914c:	d104      	bne.n	9158 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x56>
    914e:	e7ff      	b.n	9150 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    9150:	9800      	ldr	r0, [sp, #0]
    9152:	2801      	cmp	r0, #1
    9154:	d008      	beq.n	9168 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x66>
    9156:	e011      	b.n	917c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x7a>
    9158:	2000      	movs	r0, #0
    915a:	f88d 0012 	strb.w	r0, [sp, #18]
    915e:	e7f7      	b.n	9150 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    9160:	9802      	ldr	r0, [sp, #8]
    9162:	9903      	ldr	r1, [sp, #12]
    9164:	b007      	add	sp, #28
    9166:	4770      	bx	lr
    9168:	f89d 0013 	ldrb.w	r0, [sp, #19]
    916c:	07c0      	lsls	r0, r0, #31
    916e:	2800      	cmp	r0, #0
    9170:	d0f6      	beq.n	9160 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    9172:	e7ff      	b.n	9174 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x72>
    9174:	2000      	movs	r0, #0
    9176:	f88d 0013 	strb.w	r0, [sp, #19]
    917a:	e7f1      	b.n	9160 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    917c:	e7f0      	b.n	9160 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>

0000917e <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>:
    917e:	b580      	push	{r7, lr}
    9180:	b08e      	sub	sp, #56	; 0x38
    9182:	900b      	str	r0, [sp, #44]	; 0x2c
    9184:	910c      	str	r1, [sp, #48]	; 0x30
    9186:	9003      	str	r0, [sp, #12]
    9188:	9803      	ldr	r0, [sp, #12]
    918a:	6800      	ldr	r0, [r0, #0]
    918c:	2800      	cmp	r0, #0
    918e:	4602      	mov	r2, r0
    9190:	bf18      	it	ne
    9192:	2201      	movne	r2, #1
    9194:	2800      	cmp	r0, #0
    9196:	9101      	str	r1, [sp, #4]
    9198:	d00f      	beq.n	91ba <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x3c>
    919a:	e7ff      	b.n	919c <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x1e>
    919c:	9803      	ldr	r0, [sp, #12]
    919e:	900d      	str	r0, [sp, #52]	; 0x34
    91a0:	f24e 4270 	movw	r2, #58480	; 0xe470
    91a4:	f2c0 0201 	movt	r2, #1
    91a8:	a907      	add	r1, sp, #28
    91aa:	2304      	movs	r3, #4
    91ac:	9000      	str	r0, [sp, #0]
    91ae:	4608      	mov	r0, r1
    91b0:	9901      	ldr	r1, [sp, #4]
    91b2:	f00f faa8 	bl	18706 <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    91b6:	e011      	b.n	91dc <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5e>
    91b8:	defe      	udf	#254	; 0xfe
    91ba:	f24e 4274 	movw	r2, #58484	; 0xe474
    91be:	f2c0 0201 	movt	r2, #1
    91c2:	a804      	add	r0, sp, #16
    91c4:	2304      	movs	r3, #4
    91c6:	9901      	ldr	r1, [sp, #4]
    91c8:	f00f fa9d 	bl	18706 <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    91cc:	e7ff      	b.n	91ce <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x50>
    91ce:	a804      	add	r0, sp, #16
    91d0:	f00e fdb6 	bl	17d40 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    91d4:	f88d 000b 	strb.w	r0, [sp, #11]
    91d8:	e7ff      	b.n	91da <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5c>
    91da:	e011      	b.n	9200 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    91dc:	9800      	ldr	r0, [sp, #0]
    91de:	900a      	str	r0, [sp, #40]	; 0x28
    91e0:	f24e 4278 	movw	r2, #58488	; 0xe478
    91e4:	f2c0 0201 	movt	r2, #1
    91e8:	a807      	add	r0, sp, #28
    91ea:	a90a      	add	r1, sp, #40	; 0x28
    91ec:	f00e fd3f 	bl	17c6e <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>
    91f0:	e7ff      	b.n	91f2 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x74>
    91f2:	a807      	add	r0, sp, #28
    91f4:	f00e fda4 	bl	17d40 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    91f8:	f88d 000b 	strb.w	r0, [sp, #11]
    91fc:	e7ff      	b.n	91fe <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x80>
    91fe:	e7ff      	b.n	9200 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    9200:	f89d 000b 	ldrb.w	r0, [sp, #11]
    9204:	b00e      	add	sp, #56	; 0x38
    9206:	bd80      	pop	{r7, pc}

00009208 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>:
    9208:	b082      	sub	sp, #8
    920a:	2000      	movs	r0, #0
    920c:	9000      	str	r0, [sp, #0]
    920e:	9800      	ldr	r0, [sp, #0]
    9210:	b002      	add	sp, #8
    9212:	4770      	bx	lr

00009214 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>:
    9214:	b580      	push	{r7, lr}
    9216:	b084      	sub	sp, #16
    9218:	9002      	str	r0, [sp, #8]
    921a:	9103      	str	r1, [sp, #12]
    921c:	f7ff ff71 	bl	9102 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>
    9220:	9001      	str	r0, [sp, #4]
    9222:	9100      	str	r1, [sp, #0]
    9224:	e7ff      	b.n	9226 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E+0x12>
    9226:	9801      	ldr	r0, [sp, #4]
    9228:	9900      	ldr	r1, [sp, #0]
    922a:	b004      	add	sp, #16
    922c:	bd80      	pop	{r7, pc}

0000922e <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>:
    922e:	b580      	push	{r7, lr}
    9230:	b094      	sub	sp, #80	; 0x50
    9232:	9008      	str	r0, [sp, #32]
    9234:	9109      	str	r1, [sp, #36]	; 0x24
    9236:	6802      	ldr	r2, [r0, #0]
    9238:	2a00      	cmp	r2, #0
    923a:	bf18      	it	ne
    923c:	2201      	movne	r2, #1
    923e:	f04f 0300 	mov.w	r3, #0
    9242:	930b      	str	r3, [sp, #44]	; 0x2c
    9244:	920a      	str	r2, [sp, #40]	; 0x28
    9246:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    924a:	9104      	str	r1, [sp, #16]
    924c:	9003      	str	r0, [sp, #12]
    924e:	9202      	str	r2, [sp, #8]
    9250:	e7ff      	b.n	9252 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x24>
    9252:	9802      	ldr	r0, [sp, #8]
    9254:	9902      	ldr	r1, [sp, #8]
    9256:	910d      	str	r1, [sp, #52]	; 0x34
    9258:	9a04      	ldr	r2, [sp, #16]
    925a:	6813      	ldr	r3, [r2, #0]
    925c:	2b00      	cmp	r3, #0
    925e:	bf18      	it	ne
    9260:	2301      	movne	r3, #1
    9262:	f04f 0c00 	mov.w	ip, #0
    9266:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    926a:	930e      	str	r3, [sp, #56]	; 0x38
    926c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    926e:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    9272:	9001      	str	r0, [sp, #4]
    9274:	9300      	str	r3, [sp, #0]
    9276:	e7ff      	b.n	9278 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x4a>
    9278:	9800      	ldr	r0, [sp, #0]
    927a:	9011      	str	r0, [sp, #68]	; 0x44
    927c:	9901      	ldr	r1, [sp, #4]
    927e:	4281      	cmp	r1, r0
    9280:	d104      	bne.n	928c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x5e>
    9282:	e7ff      	b.n	9284 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x56>
    9284:	2001      	movs	r0, #1
    9286:	f88d 0017 	strb.w	r0, [sp, #23]
    928a:	e003      	b.n	9294 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    928c:	2000      	movs	r0, #0
    928e:	f88d 0017 	strb.w	r0, [sp, #23]
    9292:	e7ff      	b.n	9294 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    9294:	f89d 0017 	ldrb.w	r0, [sp, #23]
    9298:	07c0      	lsls	r0, r0, #31
    929a:	2800      	cmp	r0, #0
    929c:	d104      	bne.n	92a8 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x7a>
    929e:	e7ff      	b.n	92a0 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x72>
    92a0:	2000      	movs	r0, #0
    92a2:	f88d 0016 	strb.w	r0, [sp, #22]
    92a6:	e01c      	b.n	92e2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    92a8:	9803      	ldr	r0, [sp, #12]
    92aa:	9006      	str	r0, [sp, #24]
    92ac:	9904      	ldr	r1, [sp, #16]
    92ae:	9107      	str	r1, [sp, #28]
    92b0:	9a06      	ldr	r2, [sp, #24]
    92b2:	6812      	ldr	r2, [r2, #0]
    92b4:	2a00      	cmp	r2, #0
    92b6:	d104      	bne.n	92c2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x94>
    92b8:	e7ff      	b.n	92ba <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    92ba:	2001      	movs	r0, #1
    92bc:	f88d 0016 	strb.w	r0, [sp, #22]
    92c0:	e00e      	b.n	92e0 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    92c2:	9807      	ldr	r0, [sp, #28]
    92c4:	6800      	ldr	r0, [r0, #0]
    92c6:	2800      	cmp	r0, #0
    92c8:	d0f7      	beq.n	92ba <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    92ca:	e7ff      	b.n	92cc <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x9e>
    92cc:	9806      	ldr	r0, [sp, #24]
    92ce:	9012      	str	r0, [sp, #72]	; 0x48
    92d0:	9907      	ldr	r1, [sp, #28]
    92d2:	9113      	str	r1, [sp, #76]	; 0x4c
    92d4:	f009 fb63 	bl	1299e <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>
    92d8:	f88d 0016 	strb.w	r0, [sp, #22]
    92dc:	e7ff      	b.n	92de <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb0>
    92de:	e7ff      	b.n	92e0 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    92e0:	e7ff      	b.n	92e2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    92e2:	f89d 0016 	ldrb.w	r0, [sp, #22]
    92e6:	b014      	add	sp, #80	; 0x50
    92e8:	bd80      	pop	{r7, pc}

000092ea <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E>:
    92ea:	b580      	push	{r7, lr}
    92ec:	b084      	sub	sp, #16
    92ee:	9002      	str	r0, [sp, #8]
    92f0:	9103      	str	r1, [sp, #12]
    92f2:	6800      	ldr	r0, [r0, #0]
    92f4:	f009 fae5 	bl	128c2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>
    92f8:	9001      	str	r0, [sp, #4]
    92fa:	e7ff      	b.n	92fc <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E+0x12>
    92fc:	9801      	ldr	r0, [sp, #4]
    92fe:	f000 0001 	and.w	r0, r0, #1
    9302:	b004      	add	sp, #16
    9304:	bd80      	pop	{r7, pc}

00009306 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>:
    9306:	b580      	push	{r7, lr}
    9308:	b084      	sub	sp, #16
    930a:	9002      	str	r0, [sp, #8]
    930c:	9103      	str	r1, [sp, #12]
    930e:	6800      	ldr	r0, [r0, #0]
    9310:	f009 faa0 	bl	12854 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>
    9314:	9001      	str	r0, [sp, #4]
    9316:	e7ff      	b.n	9318 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E+0x12>
    9318:	9801      	ldr	r0, [sp, #4]
    931a:	f000 0001 	and.w	r0, r0, #1
    931e:	b004      	add	sp, #16
    9320:	bd80      	pop	{r7, pc}

00009322 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E>:
    9322:	b580      	push	{r7, lr}
    9324:	b084      	sub	sp, #16
    9326:	9002      	str	r0, [sp, #8]
    9328:	9103      	str	r1, [sp, #12]
    932a:	6800      	ldr	r0, [r0, #0]
    932c:	f7ff ffeb 	bl	9306 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>
    9330:	9001      	str	r0, [sp, #4]
    9332:	e7ff      	b.n	9334 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E+0x12>
    9334:	9801      	ldr	r0, [sp, #4]
    9336:	f000 0001 	and.w	r0, r0, #1
    933a:	b004      	add	sp, #16
    933c:	bd80      	pop	{r7, pc}

0000933e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE>:
    933e:	b580      	push	{r7, lr}
    9340:	b084      	sub	sp, #16
    9342:	9002      	str	r0, [sp, #8]
    9344:	9103      	str	r1, [sp, #12]
    9346:	6800      	ldr	r0, [r0, #0]
    9348:	f009 faf2 	bl	12930 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>
    934c:	9001      	str	r0, [sp, #4]
    934e:	e7ff      	b.n	9350 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE+0x12>
    9350:	9801      	ldr	r0, [sp, #4]
    9352:	f000 0001 	and.w	r0, r0, #1
    9356:	b004      	add	sp, #16
    9358:	bd80      	pop	{r7, pc}

0000935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>:
    935a:	b089      	sub	sp, #36	; 0x24
    935c:	9005      	str	r0, [sp, #20]
    935e:	9106      	str	r1, [sp, #24]
    9360:	9107      	str	r1, [sp, #28]
    9362:	9907      	ldr	r1, [sp, #28]
    9364:	9002      	str	r0, [sp, #8]
    9366:	9101      	str	r1, [sp, #4]
    9368:	e7ff      	b.n	936a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x10>
    936a:	9802      	ldr	r0, [sp, #8]
    936c:	9008      	str	r0, [sp, #32]
    936e:	9908      	ldr	r1, [sp, #32]
    9370:	9100      	str	r1, [sp, #0]
    9372:	e7ff      	b.n	9374 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x1a>
    9374:	9800      	ldr	r0, [sp, #0]
    9376:	9003      	str	r0, [sp, #12]
    9378:	9901      	ldr	r1, [sp, #4]
    937a:	9104      	str	r1, [sp, #16]
    937c:	9803      	ldr	r0, [sp, #12]
    937e:	9904      	ldr	r1, [sp, #16]
    9380:	b009      	add	sp, #36	; 0x24
    9382:	4770      	bx	lr

00009384 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>:
    9384:	b089      	sub	sp, #36	; 0x24
    9386:	9005      	str	r0, [sp, #20]
    9388:	9106      	str	r1, [sp, #24]
    938a:	9107      	str	r1, [sp, #28]
    938c:	9907      	ldr	r1, [sp, #28]
    938e:	9002      	str	r0, [sp, #8]
    9390:	9101      	str	r1, [sp, #4]
    9392:	e7ff      	b.n	9394 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x10>
    9394:	9802      	ldr	r0, [sp, #8]
    9396:	9008      	str	r0, [sp, #32]
    9398:	9908      	ldr	r1, [sp, #32]
    939a:	9100      	str	r1, [sp, #0]
    939c:	e7ff      	b.n	939e <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x1a>
    939e:	9800      	ldr	r0, [sp, #0]
    93a0:	9003      	str	r0, [sp, #12]
    93a2:	9901      	ldr	r1, [sp, #4]
    93a4:	9104      	str	r1, [sp, #16]
    93a6:	9803      	ldr	r0, [sp, #12]
    93a8:	9904      	ldr	r1, [sp, #16]
    93aa:	b009      	add	sp, #36	; 0x24
    93ac:	4770      	bx	lr

000093ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>:
    93ae:	b089      	sub	sp, #36	; 0x24
    93b0:	9005      	str	r0, [sp, #20]
    93b2:	9106      	str	r1, [sp, #24]
    93b4:	9107      	str	r1, [sp, #28]
    93b6:	9907      	ldr	r1, [sp, #28]
    93b8:	9002      	str	r0, [sp, #8]
    93ba:	9101      	str	r1, [sp, #4]
    93bc:	e7ff      	b.n	93be <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x10>
    93be:	9802      	ldr	r0, [sp, #8]
    93c0:	9008      	str	r0, [sp, #32]
    93c2:	9908      	ldr	r1, [sp, #32]
    93c4:	9100      	str	r1, [sp, #0]
    93c6:	e7ff      	b.n	93c8 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x1a>
    93c8:	9800      	ldr	r0, [sp, #0]
    93ca:	9003      	str	r0, [sp, #12]
    93cc:	9901      	ldr	r1, [sp, #4]
    93ce:	9104      	str	r1, [sp, #16]
    93d0:	9803      	ldr	r0, [sp, #12]
    93d2:	9904      	ldr	r1, [sp, #16]
    93d4:	b009      	add	sp, #36	; 0x24
    93d6:	4770      	bx	lr

000093d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>:
    93d8:	b089      	sub	sp, #36	; 0x24
    93da:	9005      	str	r0, [sp, #20]
    93dc:	9106      	str	r1, [sp, #24]
    93de:	9107      	str	r1, [sp, #28]
    93e0:	9907      	ldr	r1, [sp, #28]
    93e2:	9002      	str	r0, [sp, #8]
    93e4:	9101      	str	r1, [sp, #4]
    93e6:	e7ff      	b.n	93e8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x10>
    93e8:	9802      	ldr	r0, [sp, #8]
    93ea:	9008      	str	r0, [sp, #32]
    93ec:	9908      	ldr	r1, [sp, #32]
    93ee:	9100      	str	r1, [sp, #0]
    93f0:	e7ff      	b.n	93f2 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x1a>
    93f2:	9800      	ldr	r0, [sp, #0]
    93f4:	9003      	str	r0, [sp, #12]
    93f6:	9901      	ldr	r1, [sp, #4]
    93f8:	9104      	str	r1, [sp, #16]
    93fa:	9803      	ldr	r0, [sp, #12]
    93fc:	9904      	ldr	r1, [sp, #16]
    93fe:	b009      	add	sp, #36	; 0x24
    9400:	4770      	bx	lr

00009402 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>:
    9402:	b580      	push	{r7, lr}
    9404:	b088      	sub	sp, #32
    9406:	9004      	str	r0, [sp, #16]
    9408:	9105      	str	r1, [sp, #20]
    940a:	f000 f819 	bl	9440 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>
    940e:	9001      	str	r0, [sp, #4]
    9410:	9100      	str	r1, [sp, #0]
    9412:	e7ff      	b.n	9414 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x12>
    9414:	9801      	ldr	r0, [sp, #4]
    9416:	9006      	str	r0, [sp, #24]
    9418:	9900      	ldr	r1, [sp, #0]
    941a:	f001 0201 	and.w	r2, r1, #1
    941e:	f88d 201f 	strb.w	r2, [sp, #31]
    9422:	2a00      	cmp	r2, #0
    9424:	d105      	bne.n	9432 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x30>
    9426:	e7ff      	b.n	9428 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x26>
    9428:	9801      	ldr	r0, [sp, #4]
    942a:	9003      	str	r0, [sp, #12]
    942c:	2101      	movs	r1, #1
    942e:	9102      	str	r1, [sp, #8]
    9430:	e002      	b.n	9438 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
    9432:	2000      	movs	r0, #0
    9434:	9002      	str	r0, [sp, #8]
    9436:	e7ff      	b.n	9438 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
    9438:	9802      	ldr	r0, [sp, #8]
    943a:	9903      	ldr	r1, [sp, #12]
    943c:	b008      	add	sp, #32
    943e:	bd80      	pop	{r7, pc}

00009440 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>:
    9440:	b08a      	sub	sp, #40	; 0x28
    9442:	9004      	str	r0, [sp, #16]
    9444:	9105      	str	r1, [sp, #20]
    9446:	1a40      	subs	r0, r0, r1
    9448:	f04f 0100 	mov.w	r1, #0
    944c:	f141 0100 	adc.w	r1, r1, #0
    9450:	f1c1 0101 	rsb	r1, r1, #1
    9454:	9006      	str	r0, [sp, #24]
    9456:	f88d 101c 	strb.w	r1, [sp, #28]
    945a:	9806      	ldr	r0, [sp, #24]
    945c:	f89d 101c 	ldrb.w	r1, [sp, #28]
    9460:	9001      	str	r0, [sp, #4]
    9462:	9100      	str	r1, [sp, #0]
    9464:	e7ff      	b.n	9466 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E+0x26>
    9466:	9801      	ldr	r0, [sp, #4]
    9468:	9008      	str	r0, [sp, #32]
    946a:	9900      	ldr	r1, [sp, #0]
    946c:	f001 0201 	and.w	r2, r1, #1
    9470:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    9474:	9002      	str	r0, [sp, #8]
    9476:	f88d 200c 	strb.w	r2, [sp, #12]
    947a:	9802      	ldr	r0, [sp, #8]
    947c:	f89d 100c 	ldrb.w	r1, [sp, #12]
    9480:	b00a      	add	sp, #40	; 0x28
    9482:	4770      	bx	lr

00009484 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>:
    baudrate:   8000,  //  In kHZ. Use SPI at 8MHz (the fastest clock available on the nRF52832) because otherwise refreshing will be super slow.
    word_size:  hal::HAL_SPI_WORD_SIZE_8BIT as u8,
};

/// Initialise the display controller
pub fn start_display() -> MynewtResult<()> {
    9484:	b5b0      	push	{r4, r5, r7, lr}
    9486:	b0b2      	sub	sp, #200	; 0xc8
    //  Create SPI port and GPIO pins
    let mut spi_port = mynewt::SPI::new();
    9488:	f00a fe23 	bl	140d2 <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>
    948c:	9115      	str	r1, [sp, #84]	; 0x54
    948e:	9014      	str	r0, [sp, #80]	; 0x50
    9490:	e7ff      	b.n	9492 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe>
    let mut dc_gpio =  mynewt::GPIO::new();
    9492:	f00a ffdc 	bl	1444e <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    9496:	9016      	str	r0, [sp, #88]	; 0x58
    9498:	e7ff      	b.n	949a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16>
    let mut rst_gpio = mynewt::GPIO::new();
    949a:	f00a ffd8 	bl	1444e <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    949e:	9017      	str	r0, [sp, #92]	; 0x5c
    94a0:	e7ff      	b.n	94a2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e>

    //  Init SPI port and GPIO pins
    spi_port.init(
    94a2:	f240 03e8 	movw	r3, #232	; 0xe8
    94a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94aa:	a814      	add	r0, sp, #80	; 0x50
    94ac:	2100      	movs	r1, #0
    94ae:	2219      	movs	r2, #25
    94b0:	f00a fe17 	bl	140e2 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>
    94b4:	9012      	str	r0, [sp, #72]	; 0x48
    94b6:	e7ff      	b.n	94b8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x34>
    94b8:	9812      	ldr	r0, [sp, #72]	; 0x48
    94ba:	f7ff fb5d 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    94be:	9018      	str	r0, [sp, #96]	; 0x60
    94c0:	e7ff      	b.n	94c2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x3e>
        DISPLAY_SPI, //  Mynewt SPI port 0
        DISPLAY_CS,  //  LCD_CS (P0.25): Chip select
        unsafe { &mut SPI_SETTINGS }
    ) ? ;
    94c2:	9818      	ldr	r0, [sp, #96]	; 0x60
    94c4:	1e41      	subs	r1, r0, #1
    94c6:	bf18      	it	ne
    94c8:	2101      	movne	r1, #1
    94ca:	2801      	cmp	r0, #1
    94cc:	d001      	beq.n	94d2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4e>
    94ce:	e7ff      	b.n	94d0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4c>
    94d0:	e006      	b.n	94e0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x5c>
    94d2:	a816      	add	r0, sp, #88	; 0x58
    94d4:	2112      	movs	r1, #18
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    94d6:	f00a ffbc 	bl	14452 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    94da:	9011      	str	r0, [sp, #68]	; 0x44
    94dc:	e010      	b.n	9500 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7c>
    spi_port.init(
    94de:	defe      	udf	#254	; 0xfe
    ) ? ;
    94e0:	9818      	ldr	r0, [sp, #96]	; 0x60
    94e2:	902d      	str	r0, [sp, #180]	; 0xb4
    94e4:	f009 f9b2 	bl	1284c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    94e8:	9010      	str	r0, [sp, #64]	; 0x40
    94ea:	e002      	b.n	94f2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x6e>
    unsafe {
        DISPLAY.init(&mut delay) ? ;
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    }
    Ok(())
}
    94ec:	9813      	ldr	r0, [sp, #76]	; 0x4c
    94ee:	b032      	add	sp, #200	; 0xc8
    94f0:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;
    94f2:	9810      	ldr	r0, [sp, #64]	; 0x40
    94f4:	f7ff fb34 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    94f8:	9013      	str	r0, [sp, #76]	; 0x4c
    94fa:	e7ff      	b.n	94fc <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x78>
    94fc:	e7ff      	b.n	94fe <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
    94fe:	e7f5      	b.n	94ec <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    9500:	9811      	ldr	r0, [sp, #68]	; 0x44
    9502:	f7ff fb39 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    9506:	9019      	str	r0, [sp, #100]	; 0x64
    9508:	e7ff      	b.n	950a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x86>
    950a:	9819      	ldr	r0, [sp, #100]	; 0x64
    950c:	1e41      	subs	r1, r0, #1
    950e:	bf18      	it	ne
    9510:	2101      	movne	r1, #1
    9512:	2801      	cmp	r0, #1
    9514:	d001      	beq.n	951a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x96>
    9516:	e7ff      	b.n	9518 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x94>
    9518:	e006      	b.n	9528 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xa4>
    951a:	a817      	add	r0, sp, #92	; 0x5c
    951c:	211a      	movs	r1, #26
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    951e:	f00a ff98 	bl	14452 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    9522:	900f      	str	r0, [sp, #60]	; 0x3c
    9524:	e00c      	b.n	9540 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xbc>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    9526:	defe      	udf	#254	; 0xfe
    9528:	9819      	ldr	r0, [sp, #100]	; 0x64
    952a:	902e      	str	r0, [sp, #184]	; 0xb8
    952c:	f009 f98e 	bl	1284c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    9530:	900e      	str	r0, [sp, #56]	; 0x38
    9532:	e7ff      	b.n	9534 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xb0>
    9534:	980e      	ldr	r0, [sp, #56]	; 0x38
    9536:	f7ff fb13 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    953a:	9013      	str	r0, [sp, #76]	; 0x4c
    953c:	e7ff      	b.n	953e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xba>
    953e:	e7de      	b.n	94fe <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    9540:	980f      	ldr	r0, [sp, #60]	; 0x3c
    9542:	f7ff fb19 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    9546:	901a      	str	r0, [sp, #104]	; 0x68
    9548:	e7ff      	b.n	954a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xc6>
    954a:	981a      	ldr	r0, [sp, #104]	; 0x68
    954c:	1e41      	subs	r1, r0, #1
    954e:	bf18      	it	ne
    9550:	2101      	movne	r1, #1
    9552:	2801      	cmp	r0, #1
    9554:	d001      	beq.n	955a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd6>
    9556:	e7ff      	b.n	9558 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd4>
    9558:	e004      	b.n	9564 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe0>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
    955a:	f00a ff78 	bl	1444e <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    955e:	900d      	str	r0, [sp, #52]	; 0x34
    9560:	e00c      	b.n	957c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf8>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    9562:	defe      	udf	#254	; 0xfe
    9564:	981a      	ldr	r0, [sp, #104]	; 0x68
    9566:	902f      	str	r0, [sp, #188]	; 0xbc
    9568:	f009 f970 	bl	1284c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    956c:	900c      	str	r0, [sp, #48]	; 0x30
    956e:	e7ff      	b.n	9570 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xec>
    9570:	980c      	ldr	r0, [sp, #48]	; 0x30
    9572:	f7ff faf5 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9576:	9013      	str	r0, [sp, #76]	; 0x4c
    9578:	e7ff      	b.n	957a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf6>
    957a:	e7c0      	b.n	94fe <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
    957c:	f240 1060 	movw	r0, #352	; 0x160
    9580:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9584:	990d      	ldr	r1, [sp, #52]	; 0x34
    9586:	6001      	str	r1, [r0, #0]
    9588:	2117      	movs	r1, #23
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
    958a:	f00a ff62 	bl	14452 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    958e:	900b      	str	r0, [sp, #44]	; 0x2c
    9590:	e7ff      	b.n	9592 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x10e>
    9592:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9594:	f7ff faf0 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    9598:	901b      	str	r0, [sp, #108]	; 0x6c
    959a:	e7ff      	b.n	959c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x118>
    959c:	981b      	ldr	r0, [sp, #108]	; 0x6c
    959e:	1e41      	subs	r1, r0, #1
    95a0:	bf18      	it	ne
    95a2:	2101      	movne	r1, #1
    95a4:	2801      	cmp	r0, #1
    95a6:	d001      	beq.n	95ac <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x128>
    95a8:	e7ff      	b.n	95aa <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x126>
    95aa:	e008      	b.n	95be <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x13a>
        BACKLIGHT_HIGH.set_low() ? ;    
    95ac:	f240 1060 	movw	r0, #352	; 0x160
    95b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    95b4:	f00a ffe6 	bl	14584 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    95b8:	900a      	str	r0, [sp, #40]	; 0x28
    95ba:	e00d      	b.n	95d8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x154>
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
    95bc:	defe      	udf	#254	; 0xfe
    95be:	981b      	ldr	r0, [sp, #108]	; 0x6c
    95c0:	9030      	str	r0, [sp, #192]	; 0xc0
    95c2:	f009 f943 	bl	1284c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    95c6:	9009      	str	r0, [sp, #36]	; 0x24
    95c8:	e7ff      	b.n	95ca <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x146>
    95ca:	9809      	ldr	r0, [sp, #36]	; 0x24
    95cc:	f7ff fac8 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    95d0:	9013      	str	r0, [sp, #76]	; 0x4c
    95d2:	e7ff      	b.n	95d4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x150>
    95d4:	e7ff      	b.n	95d6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
    95d6:	e792      	b.n	94fe <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH.set_low() ? ;    
    95d8:	980a      	ldr	r0, [sp, #40]	; 0x28
    95da:	f7ff facd 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    95de:	901c      	str	r0, [sp, #112]	; 0x70
    95e0:	e7ff      	b.n	95e2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x15e>
    95e2:	981c      	ldr	r0, [sp, #112]	; 0x70
    95e4:	1e41      	subs	r1, r0, #1
    95e6:	bf18      	it	ne
    95e8:	2101      	movne	r1, #1
    95ea:	2801      	cmp	r0, #1
    95ec:	d001      	beq.n	95f2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16e>
    95ee:	e7ff      	b.n	95f0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16c>
    95f0:	e011      	b.n	9616 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x192>
        spi_port,    //  SPI Port
    95f2:	9914      	ldr	r1, [sp, #80]	; 0x50
    95f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
        dc_gpio,     //  GPIO Pin for DC
    95f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
        rst_gpio,    //  GPIO Pin for RST
    95f8:	9817      	ldr	r0, [sp, #92]	; 0x5c
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
    95fa:	46ec      	mov	ip, sp
    95fc:	f04f 0e01 	mov.w	lr, #1
    9600:	f8cc e008 	str.w	lr, [ip, #8]
    9604:	f8cc e004 	str.w	lr, [ip, #4]
    9608:	f8cc 0000 	str.w	r0, [ip]
    960c:	a81d      	add	r0, sp, #116	; 0x74
    960e:	f000 fc8c 	bl	9f2a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>
    9612:	e00c      	b.n	962e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1aa>
        BACKLIGHT_HIGH.set_low() ? ;    
    9614:	defe      	udf	#254	; 0xfe
    9616:	981c      	ldr	r0, [sp, #112]	; 0x70
    9618:	9031      	str	r0, [sp, #196]	; 0xc4
    961a:	f009 f917 	bl	1284c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    961e:	9008      	str	r0, [sp, #32]
    9620:	e7ff      	b.n	9622 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x19e>
    9622:	9808      	ldr	r0, [sp, #32]
    9624:	f7ff fa9c 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9628:	9013      	str	r0, [sp, #76]	; 0x4c
    962a:	e7ff      	b.n	962c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1a8>
    962c:	e7d3      	b.n	95d6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
    962e:	f240 1048 	movw	r0, #328	; 0x148
    9632:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9636:	a91d      	add	r1, sp, #116	; 0x74
    9638:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    963c:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    let mut delay = mynewt::Delay::new();
    9640:	f00a ffb6 	bl	145b0 <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>
    9644:	e7ff      	b.n	9646 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1c2>
        DISPLAY.init(&mut delay) ? ;
    9646:	f240 1048 	movw	r0, #328	; 0x148
    964a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    964e:	a923      	add	r1, sp, #140	; 0x8c
    9650:	f000 fc8d 	bl	9f6e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>
    9654:	9007      	str	r0, [sp, #28]
    9656:	e7ff      	b.n	9658 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1d4>
    9658:	9807      	ldr	r0, [sp, #28]
    965a:	f000 0001 	and.w	r0, r0, #1
    965e:	f7ff fa85 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9662:	f88d 008e 	strb.w	r0, [sp, #142]	; 0x8e
    9666:	e7ff      	b.n	9668 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e4>
    9668:	f89d 008e 	ldrb.w	r0, [sp, #142]	; 0x8e
    966c:	07c1      	lsls	r1, r0, #31
    966e:	2900      	cmp	r1, #0
    9670:	d001      	beq.n	9676 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f2>
    9672:	e7ff      	b.n	9674 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f0>
    9674:	e00d      	b.n	9692 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x20e>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    9676:	f24e 408c 	movw	r0, #58508	; 0xe48c
    967a:	f2c0 0001 	movt	r0, #1
    967e:	6801      	ldr	r1, [r0, #0]
    9680:	f240 1048 	movw	r0, #328	; 0x148
    9684:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9688:	f000 fa86 	bl	9b98 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>
    968c:	9006      	str	r0, [sp, #24]
    968e:	e00b      	b.n	96a8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x224>
        DISPLAY.init(&mut delay) ? ;
    9690:	defe      	udf	#254	; 0xfe
    9692:	f7ff f9f8 	bl	8a86 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
    9696:	9005      	str	r0, [sp, #20]
    9698:	e7ff      	b.n	969a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x216>
    969a:	9805      	ldr	r0, [sp, #20]
    969c:	f7ff fa60 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    96a0:	9013      	str	r0, [sp, #76]	; 0x4c
    96a2:	e7ff      	b.n	96a4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x220>
    96a4:	e7ff      	b.n	96a6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>
    96a6:	e72a      	b.n	94fe <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    96a8:	9806      	ldr	r0, [sp, #24]
    96aa:	f000 0001 	and.w	r0, r0, #1
    96ae:	f7ff fa5d 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    96b2:	f88d 008f 	strb.w	r0, [sp, #143]	; 0x8f
    96b6:	e7ff      	b.n	96b8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x234>
    96b8:	f89d 008f 	ldrb.w	r0, [sp, #143]	; 0x8f
    96bc:	07c1      	lsls	r1, r0, #31
    96be:	2900      	cmp	r1, #0
    96c0:	d001      	beq.n	96c6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x242>
    96c2:	e7ff      	b.n	96c4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x240>
    96c4:	e005      	b.n	96d2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x24e>
    96c6:	2000      	movs	r0, #0
    Ok(())
    96c8:	9013      	str	r0, [sp, #76]	; 0x4c
    96ca:	2001      	movs	r0, #1
    96cc:	9013      	str	r0, [sp, #76]	; 0x4c
}
    96ce:	e70d      	b.n	94ec <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    96d0:	defe      	udf	#254	; 0xfe
    96d2:	f7ff f9d8 	bl	8a86 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
    96d6:	9004      	str	r0, [sp, #16]
    96d8:	e7ff      	b.n	96da <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x256>
    96da:	9804      	ldr	r0, [sp, #16]
    96dc:	f7ff fa40 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    96e0:	9013      	str	r0, [sp, #76]	; 0x4c
    96e2:	e7ff      	b.n	96e4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x260>
    96e4:	e7df      	b.n	96a6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>

000096e6 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>:
    }

    /// Converts the value of `self` to a `u8`. If the value cannot be
    /// represented by a `u8`, then `None` is returned.
    #[inline]
    fn to_u8(&self) -> Option<u8> {
    96e6:	b580      	push	{r7, lr}
    96e8:	b08a      	sub	sp, #40	; 0x28
    96ea:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
    96ec:	f001 faa3 	bl	ac36 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>
    96f0:	9307      	str	r3, [sp, #28]
    96f2:	9206      	str	r2, [sp, #24]
    96f4:	9105      	str	r1, [sp, #20]
    96f6:	9004      	str	r0, [sp, #16]
    96f8:	e7ff      	b.n	96fa <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x14>
    96fa:	a804      	add	r0, sp, #16
    96fc:	f00b f843 	bl	14786 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
    9700:	9003      	str	r0, [sp, #12]
    9702:	e7ff      	b.n	9704 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x1e>
    9704:	9803      	ldr	r0, [sp, #12]
    9706:	f00b f911 	bl	1492c <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
    970a:	9002      	str	r0, [sp, #8]
    970c:	9101      	str	r1, [sp, #4]
    970e:	e7ff      	b.n	9710 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x2a>
    }
    9710:	9802      	ldr	r0, [sp, #8]
    9712:	f000 0001 	and.w	r0, r0, #1
    9716:	9901      	ldr	r1, [sp, #4]
    9718:	b00a      	add	sp, #40	; 0x28
    971a:	bd80      	pop	{r7, pc}

0000971c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>:
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }

    pub fn hard_reset(&mut self) -> Result<(), ()>
    971c:	b580      	push	{r7, lr}
    971e:	b090      	sub	sp, #64	; 0x40
    9720:	900b      	str	r0, [sp, #44]	; 0x2c
    {
        self.rst.set_high().map_err(|_| ())?;
    9722:	f100 010c 	add.w	r1, r0, #12
    9726:	9006      	str	r0, [sp, #24]
    9728:	4608      	mov	r0, r1
    972a:	f00a ff36 	bl	1459a <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    972e:	9005      	str	r0, [sp, #20]
    9730:	e7ff      	b.n	9732 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x16>
    9732:	9805      	ldr	r0, [sp, #20]
    9734:	f00b fe91 	bl	1545a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>
    9738:	9004      	str	r0, [sp, #16]
    973a:	e7ff      	b.n	973c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x20>
    973c:	9804      	ldr	r0, [sp, #16]
    973e:	f000 0001 	and.w	r0, r0, #1
    9742:	f7ff fa13 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9746:	f88d 001f 	strb.w	r0, [sp, #31]
    974a:	e7ff      	b.n	974c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x30>
    974c:	f89d 001f 	ldrb.w	r0, [sp, #31]
    9750:	07c1      	lsls	r1, r0, #31
    9752:	2900      	cmp	r1, #0
    9754:	d001      	beq.n	975a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3e>
    9756:	e7ff      	b.n	9758 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3c>
    9758:	e006      	b.n	9768 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x4c>
        self.rst.set_low().map_err(|_| ())?;
    975a:	9806      	ldr	r0, [sp, #24]
    975c:	300c      	adds	r0, #12
    975e:	f00a ff11 	bl	14584 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    9762:	9003      	str	r0, [sp, #12]
    9764:	e00d      	b.n	9782 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x66>
        self.rst.set_high().map_err(|_| ())?;
    9766:	defe      	udf	#254	; 0xfe
    9768:	f008 fc3b 	bl	11fe2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    976c:	e003      	b.n	9776 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x5a>
        self.rst.set_high().map_err(|_| ())
    }
    976e:	f89d 001e 	ldrb.w	r0, [sp, #30]
    9772:	b010      	add	sp, #64	; 0x40
    9774:	bd80      	pop	{r7, pc}
        self.rst.set_high().map_err(|_| ())?;
    9776:	f00b fec5 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    977a:	f88d 001e 	strb.w	r0, [sp, #30]
    977e:	e7ff      	b.n	9780 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x64>
    9780:	e7f5      	b.n	976e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_low().map_err(|_| ())?;
    9782:	9803      	ldr	r0, [sp, #12]
    9784:	f00b fe14 	bl	153b0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>
    9788:	9002      	str	r0, [sp, #8]
    978a:	e7ff      	b.n	978c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x70>
    978c:	9802      	ldr	r0, [sp, #8]
    978e:	f000 0001 	and.w	r0, r0, #1
    9792:	f7ff f9eb 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9796:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    979a:	e7ff      	b.n	979c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x80>
    979c:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    97a0:	07c1      	lsls	r1, r0, #31
    97a2:	2900      	cmp	r1, #0
    97a4:	d001      	beq.n	97aa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8e>
    97a6:	e7ff      	b.n	97a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8c>
    97a8:	e006      	b.n	97b8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x9c>
        self.rst.set_high().map_err(|_| ())
    97aa:	9806      	ldr	r0, [sp, #24]
    97ac:	300c      	adds	r0, #12
    97ae:	f00a fef4 	bl	1459a <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    97b2:	9001      	str	r0, [sp, #4]
    97b4:	e009      	b.n	97ca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xae>
        self.rst.set_low().map_err(|_| ())?;
    97b6:	defe      	udf	#254	; 0xfe
    97b8:	f008 fc13 	bl	11fe2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    97bc:	e7ff      	b.n	97be <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xa2>
    97be:	f00b fea1 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    97c2:	f88d 001e 	strb.w	r0, [sp, #30]
    97c6:	e7ff      	b.n	97c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xac>
    97c8:	e7d1      	b.n	976e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_high().map_err(|_| ())
    97ca:	9801      	ldr	r0, [sp, #4]
    97cc:	f00b fd9b 	bl	15306 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>
    97d0:	f88d 001e 	strb.w	r0, [sp, #30]
    97d4:	e7ff      	b.n	97d6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xba>
    }
    97d6:	e7ca      	b.n	976e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>

000097d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>:
        self.rst.set_low().map_err(|_| ())?;
    97d8:	b082      	sub	sp, #8
    97da:	9001      	str	r0, [sp, #4]
    97dc:	e7ff      	b.n	97de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE+0x6>
    97de:	b002      	add	sp, #8
    97e0:	4770      	bx	lr

000097e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>:
        self.rst.set_high().map_err(|_| ())?;
    97e2:	b082      	sub	sp, #8
    97e4:	9001      	str	r0, [sp, #4]
    97e6:	e7ff      	b.n	97e8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE+0x6>
    97e8:	b002      	add	sp, #8
    97ea:	4770      	bx	lr

000097ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>:
        self.rst.set_high().map_err(|_| ())
    97ec:	b082      	sub	sp, #8
    97ee:	9001      	str	r0, [sp, #4]
    97f0:	e7ff      	b.n	97f2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE+0x6>
    97f2:	b002      	add	sp, #8
    97f4:	4770      	bx	lr

000097f6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E>:
            .expect("spi flush fail");
        Ok(())
    }

    /// Sets pixel colors at the given drawing window
    pub fn set_pixels<P: IntoIterator<Item = u16>>(&mut self, sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
    97f6:	b5f0      	push	{r4, r5, r6, r7, lr}
    97f8:	b0c7      	sub	sp, #284	; 0x11c
    97fa:	f8dd c134 	ldr.w	ip, [sp, #308]	; 0x134
    97fe:	f8dd e130 	ldr.w	lr, [sp, #304]	; 0x130
    9802:	461c      	mov	r4, r3
    9804:	4615      	mov	r5, r2
    9806:	460e      	mov	r6, r1
    9808:	9040      	str	r0, [sp, #256]	; 0x100
    980a:	f8ad 1104 	strh.w	r1, [sp, #260]	; 0x104
    980e:	f8ad 2106 	strh.w	r2, [sp, #262]	; 0x106
    9812:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
    9816:	f8ad e10a 	strh.w	lr, [sp, #266]	; 0x10a
    981a:	2700      	movs	r7, #0
        self.set_address_window(sx, sy, ex, ey)?;
    981c:	f88d 70ff 	strb.w	r7, [sp, #255]	; 0xff
    9820:	2701      	movs	r7, #1
    9822:	f88d 70ff 	strb.w	r7, [sp, #255]	; 0xff
    9826:	466f      	mov	r7, sp
    9828:	f8c7 e000 	str.w	lr, [r7]
    982c:	900a      	str	r0, [sp, #40]	; 0x28
    982e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    9832:	9408      	str	r4, [sp, #32]
    9834:	9507      	str	r5, [sp, #28]
    9836:	9606      	str	r6, [sp, #24]
    9838:	f000 fa44 	bl	9cc4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>
    983c:	9005      	str	r0, [sp, #20]
    983e:	e7ff      	b.n	9840 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x4a>
    9840:	9805      	ldr	r0, [sp, #20]
    9842:	f000 0001 	and.w	r0, r0, #1
    9846:	f7ff f991 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    984a:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    984e:	e7ff      	b.n	9850 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x5a>
    9850:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    9854:	07c1      	lsls	r1, r0, #31
    9856:	2900      	cmp	r1, #0
    9858:	d001      	beq.n	985e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x68>
    985a:	e7ff      	b.n	985c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x66>
    985c:	e00f      	b.n	987e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x88>
    985e:	2000      	movs	r0, #0
        self.write_pixels(colors) ? ;
    9860:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
    9864:	a80c      	add	r0, sp, #48	; 0x30
    9866:	22cc      	movs	r2, #204	; 0xcc
    9868:	9004      	str	r0, [sp, #16]
    986a:	9909      	ldr	r1, [sp, #36]	; 0x24
    986c:	f014 fc76 	bl	1e15c <__aeabi_memcpy>
    9870:	980a      	ldr	r0, [sp, #40]	; 0x28
    9872:	9904      	ldr	r1, [sp, #16]
    9874:	f000 f884 	bl	9980 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE>
    9878:	9003      	str	r0, [sp, #12]
    987a:	e00d      	b.n	9898 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xa2>
        self.set_address_window(sx, sy, ex, ey)?;
    987c:	defe      	udf	#254	; 0xfe
    987e:	f008 fbb0 	bl	11fe2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9882:	e003      	b.n	988c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x96>

        #[cfg(feature = "noblock_spi")]         //  If non-blocking SPI is enabled...
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }
    9884:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    9888:	b047      	add	sp, #284	; 0x11c
    988a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        self.set_address_window(sx, sy, ex, ey)?;
    988c:	f00b fe3a 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9890:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    9894:	e7ff      	b.n	9896 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xa0>
    9896:	e034      	b.n	9902 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x10c>
        self.write_pixels(colors) ? ;
    9898:	9803      	ldr	r0, [sp, #12]
    989a:	f000 0001 	and.w	r0, r0, #1
    989e:	f7ff f965 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    98a2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    98a6:	e7ff      	b.n	98a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xb2>
    98a8:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    98ac:	07c1      	lsls	r1, r0, #31
    98ae:	2900      	cmp	r1, #0
    98b0:	d001      	beq.n	98b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xc0>
    98b2:	e7ff      	b.n	98b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xbe>
    98b4:	e004      	b.n	98c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xca>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    98b6:	f009 feb7 	bl	13628 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    98ba:	9002      	str	r0, [sp, #8]
    98bc:	e009      	b.n	98d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xdc>
        self.write_pixels(colors) ? ;
    98be:	defe      	udf	#254	; 0xfe
    98c0:	f008 fb8f 	bl	11fe2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    98c4:	e7ff      	b.n	98c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xd0>
    98c6:	f00b fe1d 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    98ca:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    98ce:	e7ff      	b.n	98d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xda>
    98d0:	e017      	b.n	9902 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x10c>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    98d2:	f24e 4190 	movw	r1, #58512	; 0xe490
    98d6:	f2c0 0101 	movt	r1, #1
    98da:	f24e 43ec 	movw	r3, #58604	; 0xe4ec
    98de:	f2c0 0301 	movt	r3, #1
    98e2:	220e      	movs	r2, #14
    98e4:	9802      	ldr	r0, [sp, #8]
    98e6:	f7ff f908 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    98ea:	e7ff      	b.n	98ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xf6>
    98ec:	2000      	movs	r0, #0
        Ok(())
    98ee:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    }
    98f2:	e7c7      	b.n	9884 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>
    98f4:	2000      	movs	r0, #0
    98f6:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
    98fa:	9809      	ldr	r0, [sp, #36]	; 0x24
    98fc:	f000 ff1d 	bl	a73a <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    9900:	e7c0      	b.n	9884 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>
    9902:	f89d 00ff 	ldrb.w	r0, [sp, #255]	; 0xff
    9906:	07c0      	lsls	r0, r0, #31
    9908:	2800      	cmp	r0, #0
    990a:	d1f3      	bne.n	98f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xfe>
    990c:	e7ba      	b.n	9884 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>

0000990e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>:
    fn write_data(&mut self, data: &[u8]) -> Result<(), ()> {
    990e:	b580      	push	{r7, lr}
    9910:	b084      	sub	sp, #16
    9912:	9001      	str	r0, [sp, #4]
    9914:	9102      	str	r1, [sp, #8]
    9916:	9203      	str	r2, [sp, #12]
        mynewt::spi::spi_noblock_write_data(
    9918:	4608      	mov	r0, r1
    991a:	4611      	mov	r1, r2
    991c:	f009 fdf0 	bl	13500 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
    9920:	9000      	str	r0, [sp, #0]
    9922:	e7ff      	b.n	9924 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x16>
    9924:	f24e 41fc 	movw	r1, #58620	; 0xe4fc
    9928:	f2c0 0101 	movt	r1, #1
    992c:	f24e 530c 	movw	r3, #58636	; 0xe50c
    9930:	f2c0 0301 	movt	r3, #1
    9934:	220d      	movs	r2, #13
    9936:	9800      	ldr	r0, [sp, #0]
    9938:	f7ff f8df 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    993c:	e7ff      	b.n	993e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x30>
    993e:	2000      	movs	r0, #0
    }
    9940:	b004      	add	sp, #16
    9942:	bd80      	pop	{r7, pc}

00009944 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>:
    fn write_word(&mut self, value: u16) -> Result<(), ()> {
    9944:	b580      	push	{r7, lr}
    9946:	b088      	sub	sp, #32
    9948:	460a      	mov	r2, r1
    994a:	9006      	str	r0, [sp, #24]
    994c:	f8ad 101e 	strh.w	r1, [sp, #30]
        let bytes: [u8; 2] = unsafe { transmute(value.to_be()) };
    9950:	9004      	str	r0, [sp, #16]
    9952:	4608      	mov	r0, r1
    9954:	9203      	str	r2, [sp, #12]
    9956:	f000 feb9 	bl	a6cc <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>
    995a:	9002      	str	r0, [sp, #8]
    995c:	e7ff      	b.n	995e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x1a>
    995e:	9802      	ldr	r0, [sp, #8]
    9960:	f8ad 0016 	strh.w	r0, [sp, #22]
    9964:	e7ff      	b.n	9966 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x22>
    9966:	f10d 0116 	add.w	r1, sp, #22
    996a:	2202      	movs	r2, #2
        self.write_data(&bytes)
    996c:	9804      	ldr	r0, [sp, #16]
    996e:	f7ff ffce 	bl	990e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>
    9972:	9001      	str	r0, [sp, #4]
    9974:	e7ff      	b.n	9976 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x32>
    }
    9976:	9801      	ldr	r0, [sp, #4]
    9978:	f000 0001 	and.w	r0, r0, #1
    997c:	b008      	add	sp, #32
    997e:	bd80      	pop	{r7, pc}

00009980 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE>:
    pub fn write_pixels<P: IntoIterator<Item = u16>>(&mut self, colors: P) -> Result <(), ()> {
    9980:	b580      	push	{r7, lr}
    9982:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
    9986:	90a8      	str	r0, [sp, #672]	; 0x2a0
    9988:	2200      	movs	r2, #0
        self.write_command(Instruction::RAMWR, None)?;
    998a:	f88d 229f 	strb.w	r2, [sp, #671]	; 0x29f
    998e:	2301      	movs	r3, #1
    9990:	f88d 329f 	strb.w	r3, [sp, #671]	; 0x29f
    9994:	232c      	movs	r3, #44	; 0x2c
    9996:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    999a:	920a      	str	r2, [sp, #40]	; 0x28
    999c:	9209      	str	r2, [sp, #36]	; 0x24
    999e:	9209      	str	r2, [sp, #36]	; 0x24
    99a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    99a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    99a4:	f89d c023 	ldrb.w	ip, [sp, #35]	; 0x23
    99a8:	9007      	str	r0, [sp, #28]
    99aa:	9106      	str	r1, [sp, #24]
    99ac:	4661      	mov	r1, ip
    99ae:	f000 f898 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    99b2:	9005      	str	r0, [sp, #20]
    99b4:	e7ff      	b.n	99b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x36>
    99b6:	9805      	ldr	r0, [sp, #20]
    99b8:	f000 0001 	and.w	r0, r0, #1
    99bc:	f7ff f8d6 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    99c0:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    99c4:	e7ff      	b.n	99c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x46>
    99c6:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
    99ca:	07c1      	lsls	r1, r0, #31
    99cc:	2900      	cmp	r1, #0
    99ce:	d001      	beq.n	99d4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x54>
    99d0:	e7ff      	b.n	99d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x52>
    99d2:	e00e      	b.n	99f2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x72>
    99d4:	2000      	movs	r0, #0
        for color in colors {
    99d6:	f88d 029f 	strb.w	r0, [sp, #671]	; 0x29f
    99da:	a83f      	add	r0, sp, #252	; 0xfc
    99dc:	22cc      	movs	r2, #204	; 0xcc
    99de:	9004      	str	r0, [sp, #16]
    99e0:	9906      	ldr	r1, [sp, #24]
    99e2:	f014 fbbb 	bl	1e15c <__aeabi_memcpy>
    99e6:	a80b      	add	r0, sp, #44	; 0x2c
    99e8:	9904      	ldr	r1, [sp, #16]
    99ea:	f00b f8bf 	bl	14b6c <_ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE>
    99ee:	e00e      	b.n	9a0e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x8e>
        self.write_command(Instruction::RAMWR, None)?;
    99f0:	defe      	udf	#254	; 0xfe
    99f2:	f008 faf6 	bl	11fe2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    99f6:	e004      	b.n	9a02 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x82>
    }
    99f8:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
    99fc:	f50d 7d2e 	add.w	sp, sp, #696	; 0x2b8
    9a00:	bd80      	pop	{r7, pc}
        self.write_command(Instruction::RAMWR, None)?;
    9a02:	f00b fd7f 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9a06:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    9a0a:	e7ff      	b.n	9a0c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x8c>
    9a0c:	e063      	b.n	9ad6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x156>
    9a0e:	a872      	add	r0, sp, #456	; 0x1c8
    9a10:	a90b      	add	r1, sp, #44	; 0x2c
    9a12:	22d0      	movs	r2, #208	; 0xd0
        for color in colors {
    9a14:	f014 fba2 	bl	1e15c <__aeabi_memcpy>
    9a18:	e7ff      	b.n	9a1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x9a>
    9a1a:	a872      	add	r0, sp, #456	; 0x1c8
    9a1c:	f00b f8bc 	bl	14b98 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E>
    9a20:	f8ad 129a 	strh.w	r1, [sp, #666]	; 0x29a
    9a24:	f8ad 0298 	strh.w	r0, [sp, #664]	; 0x298
    9a28:	e7ff      	b.n	9a2a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xaa>
    9a2a:	f8bd 0298 	ldrh.w	r0, [sp, #664]	; 0x298
    9a2e:	4601      	mov	r1, r0
    9a30:	2800      	cmp	r0, #0
    9a32:	d001      	beq.n	9a38 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xb8>
    9a34:	e7ff      	b.n	9a36 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xb6>
    9a36:	e004      	b.n	9a42 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xc2>
    9a38:	a872      	add	r0, sp, #456	; 0x1c8
        }
    9a3a:	f000 fe9d 	bl	a778 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>
    9a3e:	e02e      	b.n	9a9e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x11e>
        for color in colors {
    9a40:	defe      	udf	#254	; 0xfe
    9a42:	f8bd 029a 	ldrh.w	r0, [sp, #666]	; 0x29a
    9a46:	f8ad 02b2 	strh.w	r0, [sp, #690]	; 0x2b2
    9a4a:	f8ad 02b4 	strh.w	r0, [sp, #692]	; 0x2b4
    9a4e:	f8ad 02b6 	strh.w	r0, [sp, #694]	; 0x2b6
            self.write_word(color)?;
    9a52:	9907      	ldr	r1, [sp, #28]
    9a54:	9003      	str	r0, [sp, #12]
    9a56:	4608      	mov	r0, r1
    9a58:	9903      	ldr	r1, [sp, #12]
    9a5a:	f7ff ff73 	bl	9944 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9a5e:	9002      	str	r0, [sp, #8]
    9a60:	e7ff      	b.n	9a62 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xe2>
    9a62:	9802      	ldr	r0, [sp, #8]
    9a64:	f000 0001 	and.w	r0, r0, #1
    9a68:	f7ff f880 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9a6c:	f88d 029e 	strb.w	r0, [sp, #670]	; 0x29e
    9a70:	e7ff      	b.n	9a72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xf2>
    9a72:	f89d 029e 	ldrb.w	r0, [sp, #670]	; 0x29e
    9a76:	07c1      	lsls	r1, r0, #31
    9a78:	2900      	cmp	r1, #0
    9a7a:	d001      	beq.n	9a80 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x100>
    9a7c:	e7ff      	b.n	9a7e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xfe>
    9a7e:	e001      	b.n	9a84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x104>
        for color in colors {
    9a80:	e7cb      	b.n	9a1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x9a>
            self.write_word(color)?;
    9a82:	defe      	udf	#254	; 0xfe
    9a84:	f008 faad 	bl	11fe2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9a88:	e7ff      	b.n	9a8a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x10a>
    9a8a:	f00b fd3b 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9a8e:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    9a92:	e7ff      	b.n	9a94 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x114>
    9a94:	a872      	add	r0, sp, #456	; 0x1c8
        }
    9a96:	f000 fe6f 	bl	a778 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>
    9a9a:	e7ff      	b.n	9a9c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x11c>
    }
    9a9c:	e01b      	b.n	9ad6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x156>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    9a9e:	f009 fdc3 	bl	13628 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    9aa2:	9001      	str	r0, [sp, #4]
    9aa4:	e7ff      	b.n	9aa6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x126>
    9aa6:	f24e 4190 	movw	r1, #58512	; 0xe490
    9aaa:	f2c0 0101 	movt	r1, #1
    9aae:	f24e 531c 	movw	r3, #58652	; 0xe51c
    9ab2:	f2c0 0301 	movt	r3, #1
    9ab6:	220e      	movs	r2, #14
    9ab8:	9801      	ldr	r0, [sp, #4]
    9aba:	f7ff f81e 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9abe:	e7ff      	b.n	9ac0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x140>
    9ac0:	2000      	movs	r0, #0
        Ok(())
    9ac2:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    }
    9ac6:	e797      	b.n	99f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>
    9ac8:	2000      	movs	r0, #0
    9aca:	f88d 029f 	strb.w	r0, [sp, #671]	; 0x29f
    9ace:	9806      	ldr	r0, [sp, #24]
    9ad0:	f000 fe33 	bl	a73a <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    9ad4:	e790      	b.n	99f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>
    9ad6:	f89d 029f 	ldrb.w	r0, [sp, #671]	; 0x29f
    9ada:	07c0      	lsls	r0, r0, #31
    9adc:	2800      	cmp	r0, #0
    9ade:	d1f3      	bne.n	9ac8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x148>
    9ae0:	e78a      	b.n	99f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>

00009ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>:
    fn write_command(&mut self, command: Instruction, params: Option<&[u8]>) -> Result<(), ()> {
    9ae2:	b580      	push	{r7, lr}
    9ae4:	b08e      	sub	sp, #56	; 0x38
    9ae6:	468c      	mov	ip, r1
    9ae8:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
    9aec:	920b      	str	r2, [sp, #44]	; 0x2c
    9aee:	930c      	str	r3, [sp, #48]	; 0x30
    9af0:	900d      	str	r0, [sp, #52]	; 0x34
    9af2:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
            command.to_u8().unwrap()
    9af6:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    9afa:	f000 fdbd 	bl	a678 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>
    9afe:	9008      	str	r0, [sp, #32]
    9b00:	9107      	str	r1, [sp, #28]
    9b02:	e7ff      	b.n	9b04 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x22>
    9b04:	9808      	ldr	r0, [sp, #32]
    9b06:	f000 0001 	and.w	r0, r0, #1
    9b0a:	f24e 522c 	movw	r2, #58668	; 0xe52c
    9b0e:	f2c0 0201 	movt	r2, #1
    9b12:	9907      	ldr	r1, [sp, #28]
    9b14:	f00a fe79 	bl	1480a <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    9b18:	9006      	str	r0, [sp, #24]
    9b1a:	e7ff      	b.n	9b1c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x3a>
        mynewt::spi::spi_noblock_write_command(
    9b1c:	9806      	ldr	r0, [sp, #24]
    9b1e:	f009 fca7 	bl	13470 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>
    9b22:	9005      	str	r0, [sp, #20]
    9b24:	e7ff      	b.n	9b26 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x44>
    9b26:	f24e 513c 	movw	r1, #58684	; 0xe53c
    9b2a:	f2c0 0101 	movt	r1, #1
    9b2e:	f24e 5348 	movw	r3, #58696	; 0xe548
    9b32:	f2c0 0301 	movt	r3, #1
    9b36:	220c      	movs	r2, #12
    9b38:	9805      	ldr	r0, [sp, #20]
    9b3a:	f7fe ffde 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9b3e:	e7ff      	b.n	9b40 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x5e>
    9b40:	a80b      	add	r0, sp, #44	; 0x2c
        if params.is_some() {
    9b42:	f00a febd 	bl	148c0 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>
    9b46:	9004      	str	r0, [sp, #16]
    9b48:	e7ff      	b.n	9b4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x68>
    9b4a:	9804      	ldr	r0, [sp, #16]
    9b4c:	07c1      	lsls	r1, r0, #31
    9b4e:	2900      	cmp	r1, #0
    9b50:	d01f      	beq.n	9b92 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
    9b52:	e7ff      	b.n	9b54 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x72>
                params.unwrap()
    9b54:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9b56:	990c      	ldr	r1, [sp, #48]	; 0x30
    9b58:	f24e 5258 	movw	r2, #58712	; 0xe558
    9b5c:	f2c0 0201 	movt	r2, #1
    9b60:	f00a fe7c 	bl	1485c <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>
    9b64:	9003      	str	r0, [sp, #12]
    9b66:	9102      	str	r1, [sp, #8]
    9b68:	e7ff      	b.n	9b6a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x88>
            mynewt::spi::spi_noblock_write_data(
    9b6a:	9803      	ldr	r0, [sp, #12]
    9b6c:	9902      	ldr	r1, [sp, #8]
    9b6e:	f009 fcc7 	bl	13500 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
    9b72:	9001      	str	r0, [sp, #4]
    9b74:	e7ff      	b.n	9b76 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x94>
    9b76:	f24e 41fc 	movw	r1, #58620	; 0xe4fc
    9b7a:	f2c0 0101 	movt	r1, #1
    9b7e:	f24e 5368 	movw	r3, #58728	; 0xe568
    9b82:	f2c0 0301 	movt	r3, #1
    9b86:	220d      	movs	r2, #13
    9b88:	9801      	ldr	r0, [sp, #4]
    9b8a:	f7fe ffb6 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9b8e:	e7ff      	b.n	9b90 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xae>
        if params.is_some() {
    9b90:	e7ff      	b.n	9b92 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
    9b92:	2000      	movs	r0, #0
    }
    9b94:	b00e      	add	sp, #56	; 0x38
    9b96:	bd80      	pop	{r7, pc}

00009b98 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>:
    pub fn set_orientation(&mut self, orientation: &Orientation) -> Result<(), ()> {
    9b98:	b580      	push	{r7, lr}
    9b9a:	b098      	sub	sp, #96	; 0x60
    9b9c:	9012      	str	r0, [sp, #72]	; 0x48
    9b9e:	9113      	str	r1, [sp, #76]	; 0x4c
        if self.rgb {
    9ba0:	7d02      	ldrb	r2, [r0, #20]
    9ba2:	07d2      	lsls	r2, r2, #31
    9ba4:	2a00      	cmp	r2, #0
    9ba6:	910a      	str	r1, [sp, #40]	; 0x28
    9ba8:	9009      	str	r0, [sp, #36]	; 0x24
    9baa:	d109      	bne.n	9bc0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x28>
    9bac:	e7ff      	b.n	9bae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x16>
    9bae:	2036      	movs	r0, #54	; 0x36
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
    9bb0:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
    9bb4:	980a      	ldr	r0, [sp, #40]	; 0x28
    9bb6:	f7ff fd96 	bl	96e6 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
    9bba:	9008      	str	r0, [sp, #32]
    9bbc:	9107      	str	r1, [sp, #28]
    9bbe:	e044      	b.n	9c4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb2>
    9bc0:	2036      	movs	r0, #54	; 0x36
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap()]
    9bc2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    9bc6:	980a      	ldr	r0, [sp, #40]	; 0x28
    9bc8:	f7ff fd8d 	bl	96e6 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
    9bcc:	9006      	str	r0, [sp, #24]
    9bce:	9105      	str	r1, [sp, #20]
    9bd0:	e7ff      	b.n	9bd2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x3a>
    9bd2:	9806      	ldr	r0, [sp, #24]
    9bd4:	f000 0001 	and.w	r0, r0, #1
    9bd8:	f24e 5278 	movw	r2, #58744	; 0xe578
    9bdc:	f2c0 0201 	movt	r2, #1
    9be0:	9905      	ldr	r1, [sp, #20]
    9be2:	f00a fe12 	bl	1480a <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    9be6:	9004      	str	r0, [sp, #16]
    9be8:	e7ff      	b.n	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x52>
    9bea:	9804      	ldr	r0, [sp, #16]
    9bec:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9bf0:	f10d 0139 	add.w	r1, sp, #57	; 0x39
    9bf4:	910c      	str	r1, [sp, #48]	; 0x30
    9bf6:	2101      	movs	r1, #1
    9bf8:	910d      	str	r1, [sp, #52]	; 0x34
            self.write_command(
    9bfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9bfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9bfe:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    9c02:	9809      	ldr	r0, [sp, #36]	; 0x24
    9c04:	f7ff ff6d 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9c08:	9003      	str	r0, [sp, #12]
    9c0a:	e7ff      	b.n	9c0c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x74>
    9c0c:	9803      	ldr	r0, [sp, #12]
    9c0e:	f000 0001 	and.w	r0, r0, #1
    9c12:	f7fe ffab 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9c16:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    9c1a:	e7ff      	b.n	9c1c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x84>
            ))?;
    9c1c:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    9c20:	07c1      	lsls	r1, r0, #31
    9c22:	2900      	cmp	r1, #0
    9c24:	d001      	beq.n	9c2a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x92>
    9c26:	e7ff      	b.n	9c28 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x90>
    9c28:	e001      	b.n	9c2e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x96>
        if self.rgb {
    9c2a:	e047      	b.n	9cbc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
    9c2c:	defe      	udf	#254	; 0xfe
            ))?;
    9c2e:	f008 f9d8 	bl	11fe2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9c32:	e003      	b.n	9c3c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xa4>
    }
    9c34:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    9c38:	b018      	add	sp, #96	; 0x60
    9c3a:	bd80      	pop	{r7, pc}
            ))?;
    9c3c:	f00b fc62 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9c40:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    9c44:	e7ff      	b.n	9c46 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xae>
    9c46:	e7ff      	b.n	9c48 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
    9c48:	e7f4      	b.n	9c34 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
    9c4a:	9808      	ldr	r0, [sp, #32]
    9c4c:	f000 0001 	and.w	r0, r0, #1
    9c50:	f24e 5288 	movw	r2, #58760	; 0xe588
    9c54:	f2c0 0201 	movt	r2, #1
    9c58:	9907      	ldr	r1, [sp, #28]
    9c5a:	f00a fdd6 	bl	1480a <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    9c5e:	9002      	str	r0, [sp, #8]
    9c60:	e7ff      	b.n	9c62 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xca>
    9c62:	9802      	ldr	r0, [sp, #8]
    9c64:	f040 0108 	orr.w	r1, r0, #8
    9c68:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
    9c6c:	f10d 0147 	add.w	r1, sp, #71	; 0x47
    9c70:	910f      	str	r1, [sp, #60]	; 0x3c
    9c72:	2101      	movs	r1, #1
    9c74:	9110      	str	r1, [sp, #64]	; 0x40
            self.write_command(
    9c76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9c78:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9c7a:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
    9c7e:	9809      	ldr	r0, [sp, #36]	; 0x24
    9c80:	f7ff ff2f 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9c84:	9001      	str	r0, [sp, #4]
    9c86:	e7ff      	b.n	9c88 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xf0>
    9c88:	9801      	ldr	r0, [sp, #4]
    9c8a:	f000 0001 	and.w	r0, r0, #1
    9c8e:	f7fe ff6d 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9c92:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    9c96:	e7ff      	b.n	9c98 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x100>
            ))?;
    9c98:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    9c9c:	07c1      	lsls	r1, r0, #31
    9c9e:	2900      	cmp	r1, #0
    9ca0:	d001      	beq.n	9ca6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10e>
    9ca2:	e7ff      	b.n	9ca4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10c>
    9ca4:	e001      	b.n	9caa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x112>
        if self.rgb {
    9ca6:	e009      	b.n	9cbc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
    9ca8:	defe      	udf	#254	; 0xfe
            ))?;
    9caa:	f008 f99a 	bl	11fe2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9cae:	e7ff      	b.n	9cb0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x118>
    9cb0:	f00b fc28 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9cb4:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    9cb8:	e7ff      	b.n	9cba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x122>
    9cba:	e7c5      	b.n	9c48 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
    9cbc:	2000      	movs	r0, #0
        Ok(())
    9cbe:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    }
    9cc2:	e7b7      	b.n	9c34 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>

00009cc4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>:
    fn set_address_window(&mut self, sx: u16, sy: u16, ex: u16, ey: u16) -> Result<(), ()> {
    9cc4:	b5b0      	push	{r4, r5, r7, lr}
    9cc6:	b0a2      	sub	sp, #136	; 0x88
    9cc8:	f8dd c098 	ldr.w	ip, [sp, #152]	; 0x98
    9ccc:	469e      	mov	lr, r3
    9cce:	4614      	mov	r4, r2
    9cd0:	460d      	mov	r5, r1
    9cd2:	9015      	str	r0, [sp, #84]	; 0x54
    9cd4:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
    9cd8:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    9cdc:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    9ce0:	f8ad c05e 	strh.w	ip, [sp, #94]	; 0x5e
    9ce4:	212a      	movs	r1, #42	; 0x2a
        self.write_command(Instruction::CASET, None)?;
    9ce6:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
    9cea:	2100      	movs	r1, #0
    9cec:	9110      	str	r1, [sp, #64]	; 0x40
    9cee:	910f      	str	r1, [sp, #60]	; 0x3c
    9cf0:	910f      	str	r1, [sp, #60]	; 0x3c
    9cf2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9cf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9cf6:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
    9cfa:	900d      	str	r0, [sp, #52]	; 0x34
    9cfc:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    9d00:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    9d04:	940a      	str	r4, [sp, #40]	; 0x28
    9d06:	9509      	str	r5, [sp, #36]	; 0x24
    9d08:	f7ff feeb 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9d0c:	9008      	str	r0, [sp, #32]
    9d0e:	e7ff      	b.n	9d10 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x4c>
    9d10:	9808      	ldr	r0, [sp, #32]
    9d12:	f000 0001 	and.w	r0, r0, #1
    9d16:	f7fe ff29 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9d1a:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    9d1e:	e7ff      	b.n	9d20 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x5c>
    9d20:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    9d24:	07c1      	lsls	r1, r0, #31
    9d26:	2900      	cmp	r1, #0
    9d28:	d001      	beq.n	9d2e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x6a>
    9d2a:	e7ff      	b.n	9d2c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x68>
    9d2c:	e00d      	b.n	9d4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x86>
        self.write_word(sx + self.dx)?;
    9d2e:	980d      	ldr	r0, [sp, #52]	; 0x34
    9d30:	8a01      	ldrh	r1, [r0, #16]
    9d32:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9d34:	fa11 f182 	uxtah	r1, r1, r2
    9d38:	b28b      	uxth	r3, r1
    9d3a:	468c      	mov	ip, r1
    9d3c:	428b      	cmp	r3, r1
    9d3e:	f8cd c01c 	str.w	ip, [sp, #28]
    9d42:	f040 80c2 	bne.w	9eca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x206>
    9d46:	e00d      	b.n	9d64 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xa0>
        self.write_command(Instruction::CASET, None)?;
    9d48:	defe      	udf	#254	; 0xfe
    9d4a:	f008 f94a 	bl	11fe2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9d4e:	e003      	b.n	9d58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x94>
    }
    9d50:	f89d 0039 	ldrb.w	r0, [sp, #57]	; 0x39
    9d54:	b022      	add	sp, #136	; 0x88
    9d56:	bdb0      	pop	{r4, r5, r7, pc}
        self.write_command(Instruction::CASET, None)?;
    9d58:	f00b fbd4 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9d5c:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9d60:	e7ff      	b.n	9d62 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x9e>
    9d62:	e7f5      	b.n	9d50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
    9d64:	980d      	ldr	r0, [sp, #52]	; 0x34
    9d66:	9907      	ldr	r1, [sp, #28]
    9d68:	f7ff fdec 	bl	9944 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9d6c:	9006      	str	r0, [sp, #24]
    9d6e:	e7ff      	b.n	9d70 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xac>
    9d70:	9806      	ldr	r0, [sp, #24]
    9d72:	f000 0001 	and.w	r0, r0, #1
    9d76:	f7fe fef9 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9d7a:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    9d7e:	e7ff      	b.n	9d80 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xbc>
    9d80:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    9d84:	07c1      	lsls	r1, r0, #31
    9d86:	2900      	cmp	r1, #0
    9d88:	d001      	beq.n	9d8e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xca>
    9d8a:	e7ff      	b.n	9d8c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xc8>
    9d8c:	e00d      	b.n	9daa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xe6>
        self.write_word(ex + self.dx)?;
    9d8e:	980d      	ldr	r0, [sp, #52]	; 0x34
    9d90:	8a01      	ldrh	r1, [r0, #16]
    9d92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9d94:	fa11 f182 	uxtah	r1, r1, r2
    9d98:	b28b      	uxth	r3, r1
    9d9a:	468c      	mov	ip, r1
    9d9c:	428b      	cmp	r3, r1
    9d9e:	f8cd c014 	str.w	ip, [sp, #20]
    9da2:	f040 809e 	bne.w	9ee2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x21e>
    9da6:	e009      	b.n	9dbc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf8>
        self.write_word(sx + self.dx)?;
    9da8:	defe      	udf	#254	; 0xfe
    9daa:	f008 f91a 	bl	11fe2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9dae:	e7ff      	b.n	9db0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xec>
    9db0:	f00b fba8 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9db4:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9db8:	e7ff      	b.n	9dba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf6>
    9dba:	e7c9      	b.n	9d50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ex + self.dx)?;
    9dbc:	980d      	ldr	r0, [sp, #52]	; 0x34
    9dbe:	9905      	ldr	r1, [sp, #20]
    9dc0:	f7ff fdc0 	bl	9944 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9dc4:	9004      	str	r0, [sp, #16]
    9dc6:	e7ff      	b.n	9dc8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x104>
    9dc8:	9804      	ldr	r0, [sp, #16]
    9dca:	f000 0001 	and.w	r0, r0, #1
    9dce:	f7fe fecd 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9dd2:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
    9dd6:	e7ff      	b.n	9dd8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x114>
    9dd8:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
    9ddc:	07c1      	lsls	r1, r0, #31
    9dde:	2900      	cmp	r1, #0
    9de0:	d001      	beq.n	9de6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x122>
    9de2:	e7ff      	b.n	9de4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x120>
    9de4:	e010      	b.n	9e08 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x144>
    9de6:	202b      	movs	r0, #43	; 0x2b
        self.write_command(Instruction::RASET, None)?;
    9de8:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
    9dec:	2000      	movs	r0, #0
    9dee:	9013      	str	r0, [sp, #76]	; 0x4c
    9df0:	9012      	str	r0, [sp, #72]	; 0x48
    9df2:	9012      	str	r0, [sp, #72]	; 0x48
    9df4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9df6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9df8:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
    9dfc:	980d      	ldr	r0, [sp, #52]	; 0x34
    9dfe:	f7ff fe70 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9e02:	9003      	str	r0, [sp, #12]
    9e04:	e009      	b.n	9e1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x156>
        self.write_word(ex + self.dx)?;
    9e06:	defe      	udf	#254	; 0xfe
    9e08:	f008 f8eb 	bl	11fe2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9e0c:	e7ff      	b.n	9e0e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x14a>
    9e0e:	f00b fb79 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9e12:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9e16:	e7ff      	b.n	9e18 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x154>
    9e18:	e79a      	b.n	9d50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_command(Instruction::RASET, None)?;
    9e1a:	9803      	ldr	r0, [sp, #12]
    9e1c:	f000 0001 	and.w	r0, r0, #1
    9e20:	f7fe fea4 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9e24:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    9e28:	e7ff      	b.n	9e2a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x166>
    9e2a:	f89d 0046 	ldrb.w	r0, [sp, #70]	; 0x46
    9e2e:	07c1      	lsls	r1, r0, #31
    9e30:	2900      	cmp	r1, #0
    9e32:	d001      	beq.n	9e38 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x174>
    9e34:	e7ff      	b.n	9e36 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x172>
    9e36:	e00c      	b.n	9e52 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x18e>
        self.write_word(sy + self.dy)?;
    9e38:	980d      	ldr	r0, [sp, #52]	; 0x34
    9e3a:	8a41      	ldrh	r1, [r0, #18]
    9e3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9e3e:	fa11 f182 	uxtah	r1, r1, r2
    9e42:	b28b      	uxth	r3, r1
    9e44:	468c      	mov	ip, r1
    9e46:	428b      	cmp	r3, r1
    9e48:	f8cd c008 	str.w	ip, [sp, #8]
    9e4c:	d155      	bne.n	9efa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x236>
    9e4e:	e009      	b.n	9e64 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1a0>
        self.write_command(Instruction::RASET, None)?;
    9e50:	defe      	udf	#254	; 0xfe
    9e52:	f008 f8c6 	bl	11fe2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9e56:	e7ff      	b.n	9e58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x194>
    9e58:	f00b fb54 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9e5c:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9e60:	e7ff      	b.n	9e62 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x19e>
    9e62:	e775      	b.n	9d50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sy + self.dy)?;
    9e64:	980d      	ldr	r0, [sp, #52]	; 0x34
    9e66:	9902      	ldr	r1, [sp, #8]
    9e68:	f7ff fd6c 	bl	9944 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9e6c:	9001      	str	r0, [sp, #4]
    9e6e:	e7ff      	b.n	9e70 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ac>
    9e70:	9801      	ldr	r0, [sp, #4]
    9e72:	f000 0001 	and.w	r0, r0, #1
    9e76:	f7fe fe79 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9e7a:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
    9e7e:	e7ff      	b.n	9e80 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1bc>
    9e80:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    9e84:	07c1      	lsls	r1, r0, #31
    9e86:	2900      	cmp	r1, #0
    9e88:	d001      	beq.n	9e8e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ca>
    9e8a:	e7ff      	b.n	9e8c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1c8>
    9e8c:	e00c      	b.n	9ea8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1e4>
        self.write_word(ey + self.dy)
    9e8e:	980d      	ldr	r0, [sp, #52]	; 0x34
    9e90:	8a41      	ldrh	r1, [r0, #18]
    9e92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9e94:	fa11 f182 	uxtah	r1, r1, r2
    9e98:	b28b      	uxth	r3, r1
    9e9a:	468c      	mov	ip, r1
    9e9c:	428b      	cmp	r3, r1
    9e9e:	f8cd c000 	str.w	ip, [sp]
    9ea2:	d136      	bne.n	9f12 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x24e>
    9ea4:	e009      	b.n	9eba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f6>
        self.write_word(sy + self.dy)?;
    9ea6:	defe      	udf	#254	; 0xfe
    9ea8:	f008 f89b 	bl	11fe2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9eac:	e7ff      	b.n	9eae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ea>
    9eae:	f00b fb29 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9eb2:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9eb6:	e7ff      	b.n	9eb8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f4>
    9eb8:	e74a      	b.n	9d50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ey + self.dy)
    9eba:	980d      	ldr	r0, [sp, #52]	; 0x34
    9ebc:	9900      	ldr	r1, [sp, #0]
    9ebe:	f7ff fd41 	bl	9944 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9ec2:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9ec6:	e7ff      	b.n	9ec8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x204>
    }
    9ec8:	e742      	b.n	9d50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
    9eca:	f24e 50b0 	movw	r0, #58800	; 0xe5b0
    9ece:	f2c0 0001 	movt	r0, #1
    9ed2:	f24e 5298 	movw	r2, #58776	; 0xe598
    9ed6:	f2c0 0201 	movt	r2, #1
    9eda:	211c      	movs	r1, #28
    9edc:	f00d fd6a 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9ee0:	defe      	udf	#254	; 0xfe
        self.write_word(ex + self.dx)?;
    9ee2:	f24e 50b0 	movw	r0, #58800	; 0xe5b0
    9ee6:	f2c0 0001 	movt	r0, #1
    9eea:	f24e 52cc 	movw	r2, #58828	; 0xe5cc
    9eee:	f2c0 0201 	movt	r2, #1
    9ef2:	211c      	movs	r1, #28
    9ef4:	f00d fd5e 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9ef8:	defe      	udf	#254	; 0xfe
        self.write_word(sy + self.dy)?;
    9efa:	f24e 50b0 	movw	r0, #58800	; 0xe5b0
    9efe:	f2c0 0001 	movt	r0, #1
    9f02:	f24e 52dc 	movw	r2, #58844	; 0xe5dc
    9f06:	f2c0 0201 	movt	r2, #1
    9f0a:	211c      	movs	r1, #28
    9f0c:	f00d fd52 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9f10:	defe      	udf	#254	; 0xfe
        self.write_word(ey + self.dy)
    9f12:	f24e 50b0 	movw	r0, #58800	; 0xe5b0
    9f16:	f2c0 0001 	movt	r0, #1
    9f1a:	f24e 52ec 	movw	r2, #58860	; 0xe5ec
    9f1e:	f2c0 0201 	movt	r2, #1
    9f22:	211c      	movs	r1, #28
    9f24:	f00d fd46 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9f28:	defe      	udf	#254	; 0xfe

00009f2a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>:
    pub fn new(
    9f2a:	b5b0      	push	{r4, r5, r7, lr}
    9f2c:	b08a      	sub	sp, #40	; 0x28
    9f2e:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    9f32:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
    9f36:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    9f38:	9106      	str	r1, [sp, #24]
    9f3a:	9207      	str	r2, [sp, #28]
    9f3c:	9308      	str	r3, [sp, #32]
    9f3e:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
    9f42:	f88d c027 	strb.w	ip, [sp, #39]	; 0x27
        let display = ST7735 {
    9f46:	9100      	str	r1, [sp, #0]
    9f48:	9201      	str	r2, [sp, #4]
    9f4a:	9302      	str	r3, [sp, #8]
    9f4c:	9403      	str	r4, [sp, #12]
    9f4e:	f88d e014 	strb.w	lr, [sp, #20]
    9f52:	f88d c015 	strb.w	ip, [sp, #21]
    9f56:	2100      	movs	r1, #0
    9f58:	f8ad 1010 	strh.w	r1, [sp, #16]
    9f5c:	f8ad 1012 	strh.w	r1, [sp, #18]
    9f60:	4669      	mov	r1, sp
        display
    9f62:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    9f66:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    }
    9f6a:	b00a      	add	sp, #40	; 0x28
    9f6c:	bdb0      	pop	{r4, r5, r7, pc}

00009f6e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>:
    pub fn init<DELAY>(&mut self, delay: &mut DELAY) -> Result<(), ()>
    9f6e:	b580      	push	{r7, lr}
    9f70:	b0f6      	sub	sp, #472	; 0x1d8
    9f72:	904e      	str	r0, [sp, #312]	; 0x138
    9f74:	914f      	str	r1, [sp, #316]	; 0x13c
        mynewt::spi::spi_noblock_init()  //  Init the SPI queue
    9f76:	9117      	str	r1, [sp, #92]	; 0x5c
    9f78:	9016      	str	r0, [sp, #88]	; 0x58
    9f7a:	f008 fd1f 	bl	129bc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>
    9f7e:	9015      	str	r0, [sp, #84]	; 0x54
    9f80:	e7ff      	b.n	9f82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x14>
    9f82:	f24e 51fc 	movw	r1, #58876	; 0xe5fc
    9f86:	f2c0 0101 	movt	r1, #1
    9f8a:	f24e 630c 	movw	r3, #58892	; 0xe60c
    9f8e:	f2c0 0301 	movt	r3, #1
    9f92:	220d      	movs	r2, #13
    9f94:	9815      	ldr	r0, [sp, #84]	; 0x54
    9f96:	f7fe fdb0 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9f9a:	e7ff      	b.n	9f9c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2e>
        self.hard_reset()?;
    9f9c:	9816      	ldr	r0, [sp, #88]	; 0x58
    9f9e:	f7ff fbbd 	bl	971c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>
    9fa2:	9014      	str	r0, [sp, #80]	; 0x50
    9fa4:	e7ff      	b.n	9fa6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38>
    9fa6:	9814      	ldr	r0, [sp, #80]	; 0x50
    9fa8:	f000 0001 	and.w	r0, r0, #1
    9fac:	f7fe fdde 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9fb0:	f88d 0061 	strb.w	r0, [sp, #97]	; 0x61
    9fb4:	e7ff      	b.n	9fb6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48>
    9fb6:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
    9fba:	07c1      	lsls	r1, r0, #31
    9fbc:	2900      	cmp	r1, #0
    9fbe:	d001      	beq.n	9fc4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x56>
    9fc0:	e7ff      	b.n	9fc2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54>
    9fc2:	e010      	b.n	9fe6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x78>
    9fc4:	2001      	movs	r0, #1
        self.write_command(Instruction::SWRESET, None)?;
    9fc6:	f88d 0063 	strb.w	r0, [sp, #99]	; 0x63
    9fca:	2000      	movs	r0, #0
    9fcc:	901a      	str	r0, [sp, #104]	; 0x68
    9fce:	9019      	str	r0, [sp, #100]	; 0x64
    9fd0:	9019      	str	r0, [sp, #100]	; 0x64
    9fd2:	9a19      	ldr	r2, [sp, #100]	; 0x64
    9fd4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9fd6:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
    9fda:	9816      	ldr	r0, [sp, #88]	; 0x58
    9fdc:	f7ff fd81 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9fe0:	9013      	str	r0, [sp, #76]	; 0x4c
    9fe2:	e00d      	b.n	a000 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x92>
        self.hard_reset()?;
    9fe4:	defe      	udf	#254	; 0xfe
    9fe6:	f007 fffc 	bl	11fe2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9fea:	e003      	b.n	9ff4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x86>
    }
    9fec:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    9ff0:	b076      	add	sp, #472	; 0x1d8
    9ff2:	bd80      	pop	{r7, pc}
        self.hard_reset()?;
    9ff4:	f00b fa86 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9ff8:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9ffc:	e7ff      	b.n	9ffe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x90>
    9ffe:	e7f5      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::SWRESET, None)?;
    a000:	9813      	ldr	r0, [sp, #76]	; 0x4c
    a002:	f000 0001 	and.w	r0, r0, #1
    a006:	f7fe fdb1 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a00a:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
    a00e:	e7ff      	b.n	a010 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xa2>
    a010:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
    a014:	07c1      	lsls	r1, r0, #31
    a016:	2900      	cmp	r1, #0
    a018:	d001      	beq.n	a01e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xb0>
    a01a:	e7ff      	b.n	a01c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xae>
    a01c:	e005      	b.n	a02a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xbc>
    a01e:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    a020:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a022:	f00a fac6 	bl	145b2 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    a026:	e009      	b.n	a03c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xce>
        self.write_command(Instruction::SWRESET, None)?;
    a028:	defe      	udf	#254	; 0xfe
    a02a:	f007 ffda 	bl	11fe2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a02e:	e7ff      	b.n	a030 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xc2>
    a030:	f00b fa68 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a034:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a038:	e7ff      	b.n	a03a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xcc>
    a03a:	e7d7      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    a03c:	2011      	movs	r0, #17
        self.write_command(Instruction::SLPOUT, None)?;
    a03e:	f88d 006f 	strb.w	r0, [sp, #111]	; 0x6f
    a042:	2000      	movs	r0, #0
    a044:	901d      	str	r0, [sp, #116]	; 0x74
    a046:	901c      	str	r0, [sp, #112]	; 0x70
    a048:	901c      	str	r0, [sp, #112]	; 0x70
    a04a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    a04c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a04e:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
    a052:	9816      	ldr	r0, [sp, #88]	; 0x58
    a054:	f7ff fd45 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a058:	9012      	str	r0, [sp, #72]	; 0x48
    a05a:	e7ff      	b.n	a05c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xee>
    a05c:	9812      	ldr	r0, [sp, #72]	; 0x48
    a05e:	f000 0001 	and.w	r0, r0, #1
    a062:	f7fe fd83 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a066:	f88d 006e 	strb.w	r0, [sp, #110]	; 0x6e
    a06a:	e7ff      	b.n	a06c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xfe>
    a06c:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
    a070:	07c1      	lsls	r1, r0, #31
    a072:	2900      	cmp	r1, #0
    a074:	d001      	beq.n	a07a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10c>
    a076:	e7ff      	b.n	a078 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10a>
    a078:	e005      	b.n	a086 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x118>
    a07a:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    a07c:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a07e:	f00a fa98 	bl	145b2 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    a082:	e009      	b.n	a098 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x12a>
        self.write_command(Instruction::SLPOUT, None)?;
    a084:	defe      	udf	#254	; 0xfe
    a086:	f007 ffac 	bl	11fe2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a08a:	e7ff      	b.n	a08c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x11e>
    a08c:	f00b fa3a 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a090:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a094:	e7ff      	b.n	a096 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x128>
    a096:	e7a9      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    a098:	20b1      	movs	r0, #177	; 0xb1
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
    a09a:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
    a09e:	f24e 6020 	movw	r0, #58912	; 0xe620
    a0a2:	f2c0 0001 	movt	r0, #1
    a0a6:	6800      	ldr	r0, [r0, #0]
    a0a8:	901f      	str	r0, [sp, #124]	; 0x7c
    a0aa:	2003      	movs	r0, #3
    a0ac:	9020      	str	r0, [sp, #128]	; 0x80
    a0ae:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    a0b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a0b2:	f89d 107b 	ldrb.w	r1, [sp, #123]	; 0x7b
    a0b6:	9816      	ldr	r0, [sp, #88]	; 0x58
    a0b8:	f7ff fd13 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a0bc:	9011      	str	r0, [sp, #68]	; 0x44
    a0be:	e7ff      	b.n	a0c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x152>
    a0c0:	9811      	ldr	r0, [sp, #68]	; 0x44
    a0c2:	f000 0001 	and.w	r0, r0, #1
    a0c6:	f7fe fd51 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a0ca:	f88d 007a 	strb.w	r0, [sp, #122]	; 0x7a
    a0ce:	e7ff      	b.n	a0d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x162>
    a0d0:	f89d 007a 	ldrb.w	r0, [sp, #122]	; 0x7a
    a0d4:	07c1      	lsls	r1, r0, #31
    a0d6:	2900      	cmp	r1, #0
    a0d8:	d001      	beq.n	a0de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x170>
    a0da:	e7ff      	b.n	a0dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x16e>
    a0dc:	e014      	b.n	a108 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x19a>
    a0de:	20b2      	movs	r0, #178	; 0xb2
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    a0e0:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
    a0e4:	f24e 6020 	movw	r0, #58912	; 0xe620
    a0e8:	f2c0 0001 	movt	r0, #1
    a0ec:	6800      	ldr	r0, [r0, #0]
    a0ee:	9022      	str	r0, [sp, #136]	; 0x88
    a0f0:	2003      	movs	r0, #3
    a0f2:	9023      	str	r0, [sp, #140]	; 0x8c
    a0f4:	9a22      	ldr	r2, [sp, #136]	; 0x88
    a0f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    a0f8:	f89d 1087 	ldrb.w	r1, [sp, #135]	; 0x87
    a0fc:	9816      	ldr	r0, [sp, #88]	; 0x58
    a0fe:	f7ff fcf0 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a102:	9010      	str	r0, [sp, #64]	; 0x40
    a104:	e009      	b.n	a11a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ac>
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
    a106:	defe      	udf	#254	; 0xfe
    a108:	f007 ff6b 	bl	11fe2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a10c:	e7ff      	b.n	a10e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1a0>
    a10e:	f00b f9f9 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a112:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a116:	e7ff      	b.n	a118 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1aa>
    a118:	e768      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    a11a:	9810      	ldr	r0, [sp, #64]	; 0x40
    a11c:	f000 0001 	and.w	r0, r0, #1
    a120:	f7fe fd24 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a124:	f88d 0086 	strb.w	r0, [sp, #134]	; 0x86
    a128:	e7ff      	b.n	a12a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1bc>
    a12a:	f89d 0086 	ldrb.w	r0, [sp, #134]	; 0x86
    a12e:	07c1      	lsls	r1, r0, #31
    a130:	2900      	cmp	r1, #0
    a132:	d001      	beq.n	a138 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ca>
    a134:	e7ff      	b.n	a136 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1c8>
    a136:	e014      	b.n	a162 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1f4>
    a138:	20b3      	movs	r0, #179	; 0xb3
        self.write_command(Instruction::FRMCTR3,
    a13a:	f88d 0093 	strb.w	r0, [sp, #147]	; 0x93
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    a13e:	f24e 602c 	movw	r0, #58924	; 0xe62c
    a142:	f2c0 0001 	movt	r0, #1
    a146:	6800      	ldr	r0, [r0, #0]
    a148:	9025      	str	r0, [sp, #148]	; 0x94
    a14a:	2006      	movs	r0, #6
    a14c:	9026      	str	r0, [sp, #152]	; 0x98
        self.write_command(Instruction::FRMCTR3,
    a14e:	9a25      	ldr	r2, [sp, #148]	; 0x94
    a150:	9b26      	ldr	r3, [sp, #152]	; 0x98
    a152:	f89d 1093 	ldrb.w	r1, [sp, #147]	; 0x93
    a156:	9816      	ldr	r0, [sp, #88]	; 0x58
    a158:	f7ff fcc3 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a15c:	900f      	str	r0, [sp, #60]	; 0x3c
    a15e:	e009      	b.n	a174 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x206>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    a160:	defe      	udf	#254	; 0xfe
    a162:	f007 ff3e 	bl	11fe2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a166:	e7ff      	b.n	a168 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1fa>
    a168:	f00b f9cc 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a16c:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a170:	e7ff      	b.n	a172 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x204>
    a172:	e73b      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR3,
    a174:	980f      	ldr	r0, [sp, #60]	; 0x3c
    a176:	f000 0001 	and.w	r0, r0, #1
    a17a:	f7fe fcf7 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a17e:	f88d 0092 	strb.w	r0, [sp, #146]	; 0x92
    a182:	e7ff      	b.n	a184 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x216>
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    a184:	f89d 0092 	ldrb.w	r0, [sp, #146]	; 0x92
    a188:	07c1      	lsls	r1, r0, #31
    a18a:	2900      	cmp	r1, #0
    a18c:	d001      	beq.n	a192 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x224>
    a18e:	e7ff      	b.n	a190 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x222>
    a190:	e014      	b.n	a1bc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x24e>
    a192:	20b4      	movs	r0, #180	; 0xb4
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    a194:	f88d 009f 	strb.w	r0, [sp, #159]	; 0x9f
    a198:	f24e 6034 	movw	r0, #58932	; 0xe634
    a19c:	f2c0 0001 	movt	r0, #1
    a1a0:	6800      	ldr	r0, [r0, #0]
    a1a2:	9028      	str	r0, [sp, #160]	; 0xa0
    a1a4:	2001      	movs	r0, #1
    a1a6:	9029      	str	r0, [sp, #164]	; 0xa4
    a1a8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    a1aa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    a1ac:	f89d 109f 	ldrb.w	r1, [sp, #159]	; 0x9f
    a1b0:	9816      	ldr	r0, [sp, #88]	; 0x58
    a1b2:	f7ff fc96 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a1b6:	900e      	str	r0, [sp, #56]	; 0x38
    a1b8:	e009      	b.n	a1ce <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x260>
        self.write_command(Instruction::FRMCTR3,
    a1ba:	defe      	udf	#254	; 0xfe
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    a1bc:	f007 ff11 	bl	11fe2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a1c0:	e7ff      	b.n	a1c2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x254>
    a1c2:	f00b f99f 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a1c6:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a1ca:	e7ff      	b.n	a1cc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x25e>
    a1cc:	e70e      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    a1ce:	980e      	ldr	r0, [sp, #56]	; 0x38
    a1d0:	f000 0001 	and.w	r0, r0, #1
    a1d4:	f7fe fcca 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a1d8:	f88d 009e 	strb.w	r0, [sp, #158]	; 0x9e
    a1dc:	e7ff      	b.n	a1de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x270>
    a1de:	f89d 009e 	ldrb.w	r0, [sp, #158]	; 0x9e
    a1e2:	07c1      	lsls	r1, r0, #31
    a1e4:	2900      	cmp	r1, #0
    a1e6:	d001      	beq.n	a1ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27e>
    a1e8:	e7ff      	b.n	a1ea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27c>
    a1ea:	e014      	b.n	a216 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2a8>
    a1ec:	20c0      	movs	r0, #192	; 0xc0
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    a1ee:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
    a1f2:	f24e 603c 	movw	r0, #58940	; 0xe63c
    a1f6:	f2c0 0001 	movt	r0, #1
    a1fa:	6800      	ldr	r0, [r0, #0]
    a1fc:	902b      	str	r0, [sp, #172]	; 0xac
    a1fe:	2003      	movs	r0, #3
    a200:	902c      	str	r0, [sp, #176]	; 0xb0
    a202:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    a204:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    a206:	f89d 10ab 	ldrb.w	r1, [sp, #171]	; 0xab
    a20a:	9816      	ldr	r0, [sp, #88]	; 0x58
    a20c:	f7ff fc69 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a210:	900d      	str	r0, [sp, #52]	; 0x34
    a212:	e009      	b.n	a228 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ba>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    a214:	defe      	udf	#254	; 0xfe
    a216:	f007 fee4 	bl	11fe2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a21a:	e7ff      	b.n	a21c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ae>
    a21c:	f00b f972 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a220:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a224:	e7ff      	b.n	a226 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2b8>
    a226:	e6e1      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    a228:	980d      	ldr	r0, [sp, #52]	; 0x34
    a22a:	f000 0001 	and.w	r0, r0, #1
    a22e:	f7fe fc9d 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a232:	f88d 00aa 	strb.w	r0, [sp, #170]	; 0xaa
    a236:	e7ff      	b.n	a238 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ca>
    a238:	f89d 00aa 	ldrb.w	r0, [sp, #170]	; 0xaa
    a23c:	07c1      	lsls	r1, r0, #31
    a23e:	2900      	cmp	r1, #0
    a240:	d001      	beq.n	a246 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d8>
    a242:	e7ff      	b.n	a244 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d6>
    a244:	e014      	b.n	a270 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x302>
    a246:	20c1      	movs	r0, #193	; 0xc1
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a248:	f88d 00b7 	strb.w	r0, [sp, #183]	; 0xb7
    a24c:	f24e 6044 	movw	r0, #58948	; 0xe644
    a250:	f2c0 0001 	movt	r0, #1
    a254:	6800      	ldr	r0, [r0, #0]
    a256:	902e      	str	r0, [sp, #184]	; 0xb8
    a258:	2001      	movs	r0, #1
    a25a:	902f      	str	r0, [sp, #188]	; 0xbc
    a25c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    a25e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    a260:	f89d 10b7 	ldrb.w	r1, [sp, #183]	; 0xb7
    a264:	9816      	ldr	r0, [sp, #88]	; 0x58
    a266:	f7ff fc3c 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a26a:	900c      	str	r0, [sp, #48]	; 0x30
    a26c:	e009      	b.n	a282 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x314>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    a26e:	defe      	udf	#254	; 0xfe
    a270:	f007 feb7 	bl	11fe2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a274:	e7ff      	b.n	a276 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x308>
    a276:	f00b f945 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a27a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a27e:	e7ff      	b.n	a280 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x312>
    a280:	e6b4      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a282:	980c      	ldr	r0, [sp, #48]	; 0x30
    a284:	f000 0001 	and.w	r0, r0, #1
    a288:	f7fe fc70 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a28c:	f88d 00b6 	strb.w	r0, [sp, #182]	; 0xb6
    a290:	e7ff      	b.n	a292 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x324>
    a292:	f89d 00b6 	ldrb.w	r0, [sp, #182]	; 0xb6
    a296:	07c1      	lsls	r1, r0, #31
    a298:	2900      	cmp	r1, #0
    a29a:	d001      	beq.n	a2a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x332>
    a29c:	e7ff      	b.n	a29e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x330>
    a29e:	e014      	b.n	a2ca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x35c>
    a2a0:	20c2      	movs	r0, #194	; 0xc2
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a2a2:	f88d 00c3 	strb.w	r0, [sp, #195]	; 0xc3
    a2a6:	f24e 604c 	movw	r0, #58956	; 0xe64c
    a2aa:	f2c0 0001 	movt	r0, #1
    a2ae:	6800      	ldr	r0, [r0, #0]
    a2b0:	9031      	str	r0, [sp, #196]	; 0xc4
    a2b2:	2002      	movs	r0, #2
    a2b4:	9032      	str	r0, [sp, #200]	; 0xc8
    a2b6:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    a2b8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    a2ba:	f89d 10c3 	ldrb.w	r1, [sp, #195]	; 0xc3
    a2be:	9816      	ldr	r0, [sp, #88]	; 0x58
    a2c0:	f7ff fc0f 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a2c4:	900b      	str	r0, [sp, #44]	; 0x2c
    a2c6:	e009      	b.n	a2dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a2c8:	defe      	udf	#254	; 0xfe
    a2ca:	f007 fe8a 	bl	11fe2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a2ce:	e7ff      	b.n	a2d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x362>
    a2d0:	f00b f918 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a2d4:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a2d8:	e7ff      	b.n	a2da <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36c>
    a2da:	e687      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a2dc:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a2de:	f000 0001 	and.w	r0, r0, #1
    a2e2:	f7fe fc43 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a2e6:	f88d 00c2 	strb.w	r0, [sp, #194]	; 0xc2
    a2ea:	e7ff      	b.n	a2ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x37e>
    a2ec:	f89d 00c2 	ldrb.w	r0, [sp, #194]	; 0xc2
    a2f0:	07c1      	lsls	r1, r0, #31
    a2f2:	2900      	cmp	r1, #0
    a2f4:	d001      	beq.n	a2fa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38c>
    a2f6:	e7ff      	b.n	a2f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38a>
    a2f8:	e014      	b.n	a324 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3b6>
    a2fa:	20c3      	movs	r0, #195	; 0xc3
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a2fc:	f88d 00cf 	strb.w	r0, [sp, #207]	; 0xcf
    a300:	f24e 6054 	movw	r0, #58964	; 0xe654
    a304:	f2c0 0001 	movt	r0, #1
    a308:	6800      	ldr	r0, [r0, #0]
    a30a:	9034      	str	r0, [sp, #208]	; 0xd0
    a30c:	2002      	movs	r0, #2
    a30e:	9035      	str	r0, [sp, #212]	; 0xd4
    a310:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    a312:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    a314:	f89d 10cf 	ldrb.w	r1, [sp, #207]	; 0xcf
    a318:	9816      	ldr	r0, [sp, #88]	; 0x58
    a31a:	f7ff fbe2 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a31e:	900a      	str	r0, [sp, #40]	; 0x28
    a320:	e009      	b.n	a336 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c8>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a322:	defe      	udf	#254	; 0xfe
    a324:	f007 fe5d 	bl	11fe2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a328:	e7ff      	b.n	a32a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3bc>
    a32a:	f00b f8eb 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a32e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a332:	e7ff      	b.n	a334 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c6>
    a334:	e65a      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a336:	980a      	ldr	r0, [sp, #40]	; 0x28
    a338:	f000 0001 	and.w	r0, r0, #1
    a33c:	f7fe fc16 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a340:	f88d 00ce 	strb.w	r0, [sp, #206]	; 0xce
    a344:	e7ff      	b.n	a346 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3d8>
    a346:	f89d 00ce 	ldrb.w	r0, [sp, #206]	; 0xce
    a34a:	07c1      	lsls	r1, r0, #31
    a34c:	2900      	cmp	r1, #0
    a34e:	d001      	beq.n	a354 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e6>
    a350:	e7ff      	b.n	a352 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e4>
    a352:	e014      	b.n	a37e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x410>
    a354:	20c4      	movs	r0, #196	; 0xc4
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a356:	f88d 00db 	strb.w	r0, [sp, #219]	; 0xdb
    a35a:	f24e 605c 	movw	r0, #58972	; 0xe65c
    a35e:	f2c0 0001 	movt	r0, #1
    a362:	6800      	ldr	r0, [r0, #0]
    a364:	9037      	str	r0, [sp, #220]	; 0xdc
    a366:	2002      	movs	r0, #2
    a368:	9038      	str	r0, [sp, #224]	; 0xe0
    a36a:	9a37      	ldr	r2, [sp, #220]	; 0xdc
    a36c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    a36e:	f89d 10db 	ldrb.w	r1, [sp, #219]	; 0xdb
    a372:	9816      	ldr	r0, [sp, #88]	; 0x58
    a374:	f7ff fbb5 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a378:	9009      	str	r0, [sp, #36]	; 0x24
    a37a:	e009      	b.n	a390 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x422>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a37c:	defe      	udf	#254	; 0xfe
    a37e:	f007 fe30 	bl	11fe2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a382:	e7ff      	b.n	a384 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x416>
    a384:	f00b f8be 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a388:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a38c:	e7ff      	b.n	a38e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x420>
    a38e:	e62d      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a390:	9809      	ldr	r0, [sp, #36]	; 0x24
    a392:	f000 0001 	and.w	r0, r0, #1
    a396:	f7fe fbe9 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a39a:	f88d 00da 	strb.w	r0, [sp, #218]	; 0xda
    a39e:	e7ff      	b.n	a3a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x432>
    a3a0:	f89d 00da 	ldrb.w	r0, [sp, #218]	; 0xda
    a3a4:	07c1      	lsls	r1, r0, #31
    a3a6:	2900      	cmp	r1, #0
    a3a8:	d001      	beq.n	a3ae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x440>
    a3aa:	e7ff      	b.n	a3ac <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x43e>
    a3ac:	e014      	b.n	a3d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x46a>
    a3ae:	20c5      	movs	r0, #197	; 0xc5
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a3b0:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
    a3b4:	f24e 6064 	movw	r0, #58980	; 0xe664
    a3b8:	f2c0 0001 	movt	r0, #1
    a3bc:	6800      	ldr	r0, [r0, #0]
    a3be:	903a      	str	r0, [sp, #232]	; 0xe8
    a3c0:	2001      	movs	r0, #1
    a3c2:	903b      	str	r0, [sp, #236]	; 0xec
    a3c4:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    a3c6:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    a3c8:	f89d 10e7 	ldrb.w	r1, [sp, #231]	; 0xe7
    a3cc:	9816      	ldr	r0, [sp, #88]	; 0x58
    a3ce:	f7ff fb88 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a3d2:	9008      	str	r0, [sp, #32]
    a3d4:	e009      	b.n	a3ea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47c>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a3d6:	defe      	udf	#254	; 0xfe
    a3d8:	f007 fe03 	bl	11fe2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a3dc:	e7ff      	b.n	a3de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x470>
    a3de:	f00b f891 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a3e2:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a3e6:	e7ff      	b.n	a3e8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47a>
    a3e8:	e600      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a3ea:	9808      	ldr	r0, [sp, #32]
    a3ec:	f000 0001 	and.w	r0, r0, #1
    a3f0:	f7fe fbbc 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a3f4:	f88d 00e6 	strb.w	r0, [sp, #230]	; 0xe6
    a3f8:	e7ff      	b.n	a3fa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48c>
    a3fa:	f89d 00e6 	ldrb.w	r0, [sp, #230]	; 0xe6
    a3fe:	07c1      	lsls	r1, r0, #31
    a400:	2900      	cmp	r1, #0
    a402:	d001      	beq.n	a408 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x49a>
    a404:	e7ff      	b.n	a406 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x498>
    a406:	e006      	b.n	a416 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4a8>
        if self.inverted {
    a408:	9816      	ldr	r0, [sp, #88]	; 0x58
    a40a:	7d41      	ldrb	r1, [r0, #21]
    a40c:	07c9      	lsls	r1, r1, #31
    a40e:	2900      	cmp	r1, #0
    a410:	d11a      	bne.n	a448 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4da>
    a412:	e009      	b.n	a428 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ba>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a414:	defe      	udf	#254	; 0xfe
    a416:	f007 fde4 	bl	11fe2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a41a:	e7ff      	b.n	a41c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ae>
    a41c:	f00b f872 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a420:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a424:	e7ff      	b.n	a426 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4b8>
    a426:	e5e1      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    a428:	2020      	movs	r0, #32
            self.write_command(Instruction::INVOFF, None)?;
    a42a:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
    a42e:	2000      	movs	r0, #0
    a430:	9041      	str	r0, [sp, #260]	; 0x104
    a432:	9040      	str	r0, [sp, #256]	; 0x100
    a434:	9040      	str	r0, [sp, #256]	; 0x100
    a436:	9a40      	ldr	r2, [sp, #256]	; 0x100
    a438:	9b41      	ldr	r3, [sp, #260]	; 0x104
    a43a:	f89d 10ff 	ldrb.w	r1, [sp, #255]	; 0xff
    a43e:	9816      	ldr	r0, [sp, #88]	; 0x58
    a440:	f7ff fb4f 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a444:	9007      	str	r0, [sp, #28]
    a446:	e02a      	b.n	a49e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x530>
    a448:	2021      	movs	r0, #33	; 0x21
            self.write_command(Instruction::INVON, None)?;
    a44a:	f88d 00f3 	strb.w	r0, [sp, #243]	; 0xf3
    a44e:	2000      	movs	r0, #0
    a450:	903e      	str	r0, [sp, #248]	; 0xf8
    a452:	903d      	str	r0, [sp, #244]	; 0xf4
    a454:	903d      	str	r0, [sp, #244]	; 0xf4
    a456:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
    a458:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    a45a:	f89d 10f3 	ldrb.w	r1, [sp, #243]	; 0xf3
    a45e:	9816      	ldr	r0, [sp, #88]	; 0x58
    a460:	f7ff fb3f 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a464:	9006      	str	r0, [sp, #24]
    a466:	e7ff      	b.n	a468 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4fa>
    a468:	9806      	ldr	r0, [sp, #24]
    a46a:	f000 0001 	and.w	r0, r0, #1
    a46e:	f7fe fb7d 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a472:	f88d 00f2 	strb.w	r0, [sp, #242]	; 0xf2
    a476:	e7ff      	b.n	a478 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x50a>
    a478:	f89d 00f2 	ldrb.w	r0, [sp, #242]	; 0xf2
    a47c:	07c1      	lsls	r1, r0, #31
    a47e:	2900      	cmp	r1, #0
    a480:	d001      	beq.n	a486 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x518>
    a482:	e7ff      	b.n	a484 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x516>
    a484:	e001      	b.n	a48a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x51c>
        if self.inverted {
    a486:	e024      	b.n	a4d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVON, None)?;
    a488:	defe      	udf	#254	; 0xfe
    a48a:	f007 fdaa 	bl	11fe2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a48e:	e7ff      	b.n	a490 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x522>
    a490:	f00b f838 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a494:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a498:	e7ff      	b.n	a49a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52c>
    a49a:	e7ff      	b.n	a49c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
    a49c:	e5a6      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::INVOFF, None)?;
    a49e:	9807      	ldr	r0, [sp, #28]
    a4a0:	f000 0001 	and.w	r0, r0, #1
    a4a4:	f7fe fb62 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a4a8:	f88d 00fe 	strb.w	r0, [sp, #254]	; 0xfe
    a4ac:	e7ff      	b.n	a4ae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x540>
    a4ae:	f89d 00fe 	ldrb.w	r0, [sp, #254]	; 0xfe
    a4b2:	07c1      	lsls	r1, r0, #31
    a4b4:	2900      	cmp	r1, #0
    a4b6:	d001      	beq.n	a4bc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54e>
    a4b8:	e7ff      	b.n	a4ba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54c>
    a4ba:	e001      	b.n	a4c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x552>
        if self.inverted {
    a4bc:	e009      	b.n	a4d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVOFF, None)?;
    a4be:	defe      	udf	#254	; 0xfe
    a4c0:	f007 fd8f 	bl	11fe2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a4c4:	e7ff      	b.n	a4c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x558>
    a4c6:	f00b f81d 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a4ca:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a4ce:	e7ff      	b.n	a4d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x562>
    a4d0:	e7e4      	b.n	a49c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
        if self.rgb {
    a4d2:	9816      	ldr	r0, [sp, #88]	; 0x58
    a4d4:	7d01      	ldrb	r1, [r0, #20]
    a4d6:	07c9      	lsls	r1, r1, #31
    a4d8:	2900      	cmp	r1, #0
    a4da:	d114      	bne.n	a506 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x598>
    a4dc:	e7ff      	b.n	a4de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x570>
    a4de:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a4e0:	f88d 0117 	strb.w	r0, [sp, #279]	; 0x117
    a4e4:	f24e 6074 	movw	r0, #58996	; 0xe674
    a4e8:	f2c0 0001 	movt	r0, #1
    a4ec:	6800      	ldr	r0, [r0, #0]
    a4ee:	9046      	str	r0, [sp, #280]	; 0x118
    a4f0:	2001      	movs	r0, #1
    a4f2:	9047      	str	r0, [sp, #284]	; 0x11c
    a4f4:	9a46      	ldr	r2, [sp, #280]	; 0x118
    a4f6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    a4f8:	f89d 1117 	ldrb.w	r1, [sp, #279]	; 0x117
    a4fc:	9816      	ldr	r0, [sp, #88]	; 0x58
    a4fe:	f7ff faf0 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a502:	9005      	str	r0, [sp, #20]
    a504:	e02e      	b.n	a564 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f6>
    a506:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
    a508:	f88d 010b 	strb.w	r0, [sp, #267]	; 0x10b
    a50c:	f24e 606c 	movw	r0, #58988	; 0xe66c
    a510:	f2c0 0001 	movt	r0, #1
    a514:	6800      	ldr	r0, [r0, #0]
    a516:	9043      	str	r0, [sp, #268]	; 0x10c
    a518:	2001      	movs	r0, #1
    a51a:	9044      	str	r0, [sp, #272]	; 0x110
    a51c:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    a51e:	9b44      	ldr	r3, [sp, #272]	; 0x110
    a520:	f89d 110b 	ldrb.w	r1, [sp, #267]	; 0x10b
    a524:	9816      	ldr	r0, [sp, #88]	; 0x58
    a526:	f7ff fadc 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a52a:	9004      	str	r0, [sp, #16]
    a52c:	e7ff      	b.n	a52e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5c0>
    a52e:	9804      	ldr	r0, [sp, #16]
    a530:	f000 0001 	and.w	r0, r0, #1
    a534:	f7fe fb1a 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a538:	f88d 010a 	strb.w	r0, [sp, #266]	; 0x10a
    a53c:	e7ff      	b.n	a53e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5d0>
    a53e:	f89d 010a 	ldrb.w	r0, [sp, #266]	; 0x10a
    a542:	07c1      	lsls	r1, r0, #31
    a544:	2900      	cmp	r1, #0
    a546:	d001      	beq.n	a54c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5de>
    a548:	e7ff      	b.n	a54a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5dc>
    a54a:	e001      	b.n	a550 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e2>
        if self.rgb {
    a54c:	e024      	b.n	a598 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
    a54e:	defe      	udf	#254	; 0xfe
    a550:	f007 fd47 	bl	11fe2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a554:	e7ff      	b.n	a556 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e8>
    a556:	f00a ffd5 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a55a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a55e:	e7ff      	b.n	a560 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f2>
    a560:	e7ff      	b.n	a562 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
    a562:	e543      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a564:	9805      	ldr	r0, [sp, #20]
    a566:	f000 0001 	and.w	r0, r0, #1
    a56a:	f7fe faff 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a56e:	f88d 0116 	strb.w	r0, [sp, #278]	; 0x116
    a572:	e7ff      	b.n	a574 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x606>
    a574:	f89d 0116 	ldrb.w	r0, [sp, #278]	; 0x116
    a578:	07c1      	lsls	r1, r0, #31
    a57a:	2900      	cmp	r1, #0
    a57c:	d001      	beq.n	a582 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x614>
    a57e:	e7ff      	b.n	a580 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x612>
    a580:	e001      	b.n	a586 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x618>
        if self.rgb {
    a582:	e009      	b.n	a598 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a584:	defe      	udf	#254	; 0xfe
    a586:	f007 fd2c 	bl	11fe2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a58a:	e7ff      	b.n	a58c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x61e>
    a58c:	f00a ffba 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a590:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a594:	e7ff      	b.n	a596 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x628>
    a596:	e7e4      	b.n	a562 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
    a598:	203a      	movs	r0, #58	; 0x3a
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
    a59a:	f88d 0123 	strb.w	r0, [sp, #291]	; 0x123
    a59e:	f24e 607c 	movw	r0, #59004	; 0xe67c
    a5a2:	f2c0 0001 	movt	r0, #1
    a5a6:	6800      	ldr	r0, [r0, #0]
    a5a8:	9049      	str	r0, [sp, #292]	; 0x124
    a5aa:	2001      	movs	r0, #1
    a5ac:	904a      	str	r0, [sp, #296]	; 0x128
    a5ae:	9a49      	ldr	r2, [sp, #292]	; 0x124
    a5b0:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    a5b2:	f89d 1123 	ldrb.w	r1, [sp, #291]	; 0x123
    a5b6:	9816      	ldr	r0, [sp, #88]	; 0x58
    a5b8:	f7ff fa93 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a5bc:	9003      	str	r0, [sp, #12]
    a5be:	e7ff      	b.n	a5c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x652>
    a5c0:	9803      	ldr	r0, [sp, #12]
    a5c2:	f000 0001 	and.w	r0, r0, #1
    a5c6:	f7fe fad1 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a5ca:	f88d 0122 	strb.w	r0, [sp, #290]	; 0x122
    a5ce:	e7ff      	b.n	a5d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x662>
    a5d0:	f89d 0122 	ldrb.w	r0, [sp, #290]	; 0x122
    a5d4:	07c1      	lsls	r1, r0, #31
    a5d6:	2900      	cmp	r1, #0
    a5d8:	d001      	beq.n	a5de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x670>
    a5da:	e7ff      	b.n	a5dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x66e>
    a5dc:	e010      	b.n	a600 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x692>
    a5de:	2029      	movs	r0, #41	; 0x29
        self.write_command(Instruction::DISPON, None)?;
    a5e0:	f88d 012f 	strb.w	r0, [sp, #303]	; 0x12f
    a5e4:	2000      	movs	r0, #0
    a5e6:	904d      	str	r0, [sp, #308]	; 0x134
    a5e8:	904c      	str	r0, [sp, #304]	; 0x130
    a5ea:	904c      	str	r0, [sp, #304]	; 0x130
    a5ec:	9a4c      	ldr	r2, [sp, #304]	; 0x130
    a5ee:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    a5f0:	f89d 112f 	ldrb.w	r1, [sp, #303]	; 0x12f
    a5f4:	9816      	ldr	r0, [sp, #88]	; 0x58
    a5f6:	f7ff fa74 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a5fa:	9002      	str	r0, [sp, #8]
    a5fc:	e009      	b.n	a612 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a4>
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
    a5fe:	defe      	udf	#254	; 0xfe
    a600:	f007 fcef 	bl	11fe2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a604:	e7ff      	b.n	a606 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x698>
    a606:	f00a ff7d 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a60a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a60e:	e7ff      	b.n	a610 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a2>
    a610:	e4ec      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::DISPON, None)?;
    a612:	9802      	ldr	r0, [sp, #8]
    a614:	f000 0001 	and.w	r0, r0, #1
    a618:	f7fe faa8 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a61c:	f88d 012e 	strb.w	r0, [sp, #302]	; 0x12e
    a620:	e7ff      	b.n	a622 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6b4>
    a622:	f89d 012e 	ldrb.w	r0, [sp, #302]	; 0x12e
    a626:	07c1      	lsls	r1, r0, #31
    a628:	2900      	cmp	r1, #0
    a62a:	d001      	beq.n	a630 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c2>
    a62c:	e7ff      	b.n	a62e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c0>
    a62e:	e005      	b.n	a63c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6ce>
    a630:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    a632:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a634:	f009 ffbd 	bl	145b2 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    a638:	e009      	b.n	a64e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e0>
        self.write_command(Instruction::DISPON, None)?;
    a63a:	defe      	udf	#254	; 0xfe
    a63c:	f007 fcd1 	bl	11fe2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a640:	e7ff      	b.n	a642 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6d4>
    a642:	f00a ff5f 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a646:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a64a:	e7ff      	b.n	a64c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6de>
    a64c:	e4ce      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    a64e:	f008 ffeb 	bl	13628 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    a652:	9001      	str	r0, [sp, #4]
    a654:	e7ff      	b.n	a656 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e8>
    a656:	f24e 4190 	movw	r1, #58512	; 0xe490
    a65a:	f2c0 0101 	movt	r1, #1
    a65e:	f24e 6380 	movw	r3, #59008	; 0xe680
    a662:	f2c0 0301 	movt	r3, #1
    a666:	220e      	movs	r2, #14
    a668:	9801      	ldr	r0, [sp, #4]
    a66a:	f7fe fa46 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    a66e:	e7ff      	b.n	a670 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x702>
    a670:	2000      	movs	r0, #0
        Ok(())
    a672:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    }
    a676:	e4b9      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>

0000a678 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>:
    fn to_u8(&self) -> Option<u8> {
    a678:	b580      	push	{r7, lr}
    a67a:	b08a      	sub	sp, #40	; 0x28
    a67c:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
    a67e:	f000 fa8c 	bl	ab9a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>
    a682:	9307      	str	r3, [sp, #28]
    a684:	9206      	str	r2, [sp, #24]
    a686:	9105      	str	r1, [sp, #20]
    a688:	9004      	str	r0, [sp, #16]
    a68a:	e7ff      	b.n	a68c <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x14>
    a68c:	a804      	add	r0, sp, #16
    a68e:	f00a f87a 	bl	14786 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
    a692:	9003      	str	r0, [sp, #12]
    a694:	e7ff      	b.n	a696 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x1e>
    a696:	9803      	ldr	r0, [sp, #12]
    a698:	f00a f948 	bl	1492c <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
    a69c:	9002      	str	r0, [sp, #8]
    a69e:	9101      	str	r1, [sp, #4]
    a6a0:	e7ff      	b.n	a6a2 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x2a>
    }
    a6a2:	9802      	ldr	r0, [sp, #8]
    a6a4:	f000 0001 	and.w	r0, r0, #1
    a6a8:	9901      	ldr	r1, [sp, #4]
    a6aa:	b00a      	add	sp, #40	; 0x28
    a6ac:	bd80      	pop	{r7, pc}

0000a6ae <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>:
    a6ae:	b082      	sub	sp, #8
    a6b0:	4601      	mov	r1, r0
    a6b2:	f8ad 0004 	strh.w	r0, [sp, #4]
    a6b6:	ba00      	rev	r0, r0
    a6b8:	0c00      	lsrs	r0, r0, #16
    a6ba:	f8ad 0006 	strh.w	r0, [sp, #6]
    a6be:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a6c2:	9000      	str	r0, [sp, #0]
    a6c4:	e7ff      	b.n	a6c6 <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E+0x18>
    a6c6:	9800      	ldr	r0, [sp, #0]
    a6c8:	b002      	add	sp, #8
    a6ca:	4770      	bx	lr

0000a6cc <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>:
    a6cc:	b580      	push	{r7, lr}
    a6ce:	b084      	sub	sp, #16
    a6d0:	4601      	mov	r1, r0
    a6d2:	f8ad 000e 	strh.w	r0, [sp, #14]
    a6d6:	9102      	str	r1, [sp, #8]
    a6d8:	f7ff ffe9 	bl	a6ae <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>
    a6dc:	9001      	str	r0, [sp, #4]
    a6de:	e7ff      	b.n	a6e0 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E+0x14>
    a6e0:	9801      	ldr	r0, [sp, #4]
    a6e2:	b004      	add	sp, #16
    a6e4:	bd80      	pop	{r7, pc}

0000a6e6 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>:
    a6e6:	b580      	push	{r7, lr}
    a6e8:	b084      	sub	sp, #16
    a6ea:	9002      	str	r0, [sp, #8]
    a6ec:	9802      	ldr	r0, [sp, #8]
    a6ee:	f009 ffae 	bl	1464e <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>
    a6f2:	9001      	str	r0, [sp, #4]
    a6f4:	9100      	str	r1, [sp, #0]
    a6f6:	e7ff      	b.n	a6f8 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE+0x12>
    a6f8:	9801      	ldr	r0, [sp, #4]
    a6fa:	f000 0001 	and.w	r0, r0, #1
    a6fe:	9900      	ldr	r1, [sp, #0]
    a700:	b004      	add	sp, #16
    a702:	bd80      	pop	{r7, pc}

0000a704 <_ZN4core3ptr13drop_in_place17h00c2f0b87edee24bE>:
    a704:	b081      	sub	sp, #4
    a706:	9000      	str	r0, [sp, #0]
    a708:	b001      	add	sp, #4
    a70a:	4770      	bx	lr

0000a70c <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE>:
    a70c:	b580      	push	{r7, lr}
    a70e:	b082      	sub	sp, #8
    a710:	9001      	str	r0, [sp, #4]
    a712:	f000 f83e 	bl	a792 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
    a716:	e7ff      	b.n	a718 <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE+0xc>
    a718:	b002      	add	sp, #8
    a71a:	bd80      	pop	{r7, pc}

0000a71c <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>:
    a71c:	b580      	push	{r7, lr}
    a71e:	b082      	sub	sp, #8
    a720:	9001      	str	r0, [sp, #4]
    a722:	6801      	ldr	r1, [r0, #0]
    a724:	2900      	cmp	r1, #0
    a726:	9000      	str	r0, [sp, #0]
    a728:	d102      	bne.n	a730 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x14>
    a72a:	e7ff      	b.n	a72c <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x10>
    a72c:	b002      	add	sp, #8
    a72e:	bd80      	pop	{r7, pc}
    a730:	9800      	ldr	r0, [sp, #0]
    a732:	3004      	adds	r0, #4
    a734:	f7ff ffea 	bl	a70c <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE>
    a738:	e7f8      	b.n	a72c <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x10>

0000a73a <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>:
    a73a:	b580      	push	{r7, lr}
    a73c:	b082      	sub	sp, #8
    a73e:	9001      	str	r0, [sp, #4]
    a740:	f00a f96f 	bl	14a22 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E>
    a744:	e7ff      	b.n	a746 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE+0xc>
    a746:	b002      	add	sp, #8
    a748:	bd80      	pop	{r7, pc}

0000a74a <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E>:
    a74a:	b580      	push	{r7, lr}
    a74c:	b082      	sub	sp, #8
    a74e:	9001      	str	r0, [sp, #4]
    a750:	3024      	adds	r0, #36	; 0x24
    a752:	f000 f81e 	bl	a792 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
    a756:	e7ff      	b.n	a758 <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E+0xe>
    a758:	b002      	add	sp, #8
    a75a:	bd80      	pop	{r7, pc}

0000a75c <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>:
    a75c:	b580      	push	{r7, lr}
    a75e:	b082      	sub	sp, #8
    a760:	9001      	str	r0, [sp, #4]
    a762:	9000      	str	r0, [sp, #0]
    a764:	f7ff fff1 	bl	a74a <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E>
    a768:	e001      	b.n	a76e <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E+0x12>
    a76a:	b002      	add	sp, #8
    a76c:	bd80      	pop	{r7, pc}
    a76e:	9800      	ldr	r0, [sp, #0]
    a770:	3094      	adds	r0, #148	; 0x94
    a772:	f7ff ffe2 	bl	a73a <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    a776:	e7f8      	b.n	a76a <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E+0xe>

0000a778 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>:
    a778:	b580      	push	{r7, lr}
    a77a:	b082      	sub	sp, #8
    a77c:	9001      	str	r0, [sp, #4]
    a77e:	9000      	str	r0, [sp, #0]
    a780:	f00a f977 	bl	14a72 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E>
    a784:	e001      	b.n	a78a <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E+0x12>
    a786:	b002      	add	sp, #8
    a788:	bd80      	pop	{r7, pc}
    a78a:	9800      	ldr	r0, [sp, #0]
    a78c:	f7ff ffd5 	bl	a73a <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    a790:	e7f9      	b.n	a786 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E+0xe>

0000a792 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>:
    a792:	b580      	push	{r7, lr}
    a794:	b082      	sub	sp, #8
    a796:	9001      	str	r0, [sp, #4]
    a798:	f00a f933 	bl	14a02 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E>
    a79c:	e7ff      	b.n	a79e <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E+0xc>
    a79e:	b002      	add	sp, #8
    a7a0:	bd80      	pop	{r7, pc}

0000a7a2 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>:
    a7a2:	b580      	push	{r7, lr}
    a7a4:	b082      	sub	sp, #8
    a7a6:	9001      	str	r0, [sp, #4]
    a7a8:	6801      	ldr	r1, [r0, #0]
    a7aa:	2900      	cmp	r1, #0
    a7ac:	9000      	str	r0, [sp, #0]
    a7ae:	d102      	bne.n	a7b6 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x14>
    a7b0:	e7ff      	b.n	a7b2 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x10>
    a7b2:	b002      	add	sp, #8
    a7b4:	bd80      	pop	{r7, pc}
    a7b6:	9800      	ldr	r0, [sp, #0]
    a7b8:	3004      	adds	r0, #4
    a7ba:	f000 f805 	bl	a7c8 <_ZN4core3ptr13drop_in_place17hf625580841d3425eE>
    a7be:	e7f8      	b.n	a7b2 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x10>

0000a7c0 <_ZN4core3ptr13drop_in_place17hef1277471241eea2E>:
    a7c0:	b081      	sub	sp, #4
    a7c2:	9000      	str	r0, [sp, #0]
    a7c4:	b001      	add	sp, #4
    a7c6:	4770      	bx	lr

0000a7c8 <_ZN4core3ptr13drop_in_place17hf625580841d3425eE>:
    a7c8:	b580      	push	{r7, lr}
    a7ca:	b082      	sub	sp, #8
    a7cc:	9001      	str	r0, [sp, #4]
    a7ce:	f7ff ffb4 	bl	a73a <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    a7d2:	e7ff      	b.n	a7d4 <_ZN4core3ptr13drop_in_place17hf625580841d3425eE+0xc>
    a7d4:	b002      	add	sp, #8
    a7d6:	bd80      	pop	{r7, pc}

0000a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>:
    a7d8:	b089      	sub	sp, #36	; 0x24
    a7da:	9005      	str	r0, [sp, #20]
    a7dc:	9106      	str	r1, [sp, #24]
    a7de:	9107      	str	r1, [sp, #28]
    a7e0:	9907      	ldr	r1, [sp, #28]
    a7e2:	9002      	str	r0, [sp, #8]
    a7e4:	9101      	str	r1, [sp, #4]
    a7e6:	e7ff      	b.n	a7e8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x10>
    a7e8:	9802      	ldr	r0, [sp, #8]
    a7ea:	9008      	str	r0, [sp, #32]
    a7ec:	9908      	ldr	r1, [sp, #32]
    a7ee:	9100      	str	r1, [sp, #0]
    a7f0:	e7ff      	b.n	a7f2 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x1a>
    a7f2:	9800      	ldr	r0, [sp, #0]
    a7f4:	9003      	str	r0, [sp, #12]
    a7f6:	9901      	ldr	r1, [sp, #4]
    a7f8:	9104      	str	r1, [sp, #16]
    a7fa:	9803      	ldr	r0, [sp, #12]
    a7fc:	9904      	ldr	r1, [sp, #16]
    a7fe:	b009      	add	sp, #36	; 0x24
    a800:	4770      	bx	lr
	...

0000a804 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>:
use num_derive::ToPrimitive;

/// ST7735 instructions.
#[derive(ToPrimitive)]
    a804:	b08a      	sub	sp, #40	; 0x28
    a806:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Instruction {
    a808:	7800      	ldrb	r0, [r0, #0]
    a80a:	9001      	str	r0, [sp, #4]
    a80c:	9901      	ldr	r1, [sp, #4]
    a80e:	e8df f011 	tbh	[pc, r1, lsl #1]
    a812:	0103      	.short	0x0103
    a814:	01020107 	.word	0x01020107
    a818:	010c0102 	.word	0x010c0102
    a81c:	01020102 	.word	0x01020102
    a820:	01020102 	.word	0x01020102
    a824:	01020111 	.word	0x01020111
    a828:	01020102 	.word	0x01020102
    a82c:	01020102 	.word	0x01020102
    a830:	01160102 	.word	0x01160102
    a834:	0120011b 	.word	0x0120011b
    a838:	01020125 	.word	0x01020125
    a83c:	01020102 	.word	0x01020102
    a840:	01020102 	.word	0x01020102
    a844:	01020102 	.word	0x01020102
    a848:	01020102 	.word	0x01020102
    a84c:	01020102 	.word	0x01020102
    a850:	012a0102 	.word	0x012a0102
    a854:	0102012f 	.word	0x0102012f
    a858:	01020102 	.word	0x01020102
    a85c:	01020102 	.word	0x01020102
    a860:	01340102 	.word	0x01340102
    a864:	013e0139 	.word	0x013e0139
    a868:	01480143 	.word	0x01480143
    a86c:	014d0102 	.word	0x014d0102
    a870:	01520102 	.word	0x01520102
    a874:	01020102 	.word	0x01020102
    a878:	01020102 	.word	0x01020102
    a87c:	015c0102 	.word	0x015c0102
    a880:	01020102 	.word	0x01020102
    a884:	01570102 	.word	0x01570102
    a888:	01020102 	.word	0x01020102
    a88c:	01020102 	.word	0x01020102
    a890:	01020102 	.word	0x01020102
    a894:	01020102 	.word	0x01020102
    a898:	01020102 	.word	0x01020102
    a89c:	01020102 	.word	0x01020102
    a8a0:	01020102 	.word	0x01020102
    a8a4:	01020102 	.word	0x01020102
    a8a8:	01020102 	.word	0x01020102
    a8ac:	01020102 	.word	0x01020102
    a8b0:	01020102 	.word	0x01020102
    a8b4:	01020102 	.word	0x01020102
    a8b8:	01020102 	.word	0x01020102
    a8bc:	01020102 	.word	0x01020102
    a8c0:	01020102 	.word	0x01020102
    a8c4:	01020102 	.word	0x01020102
    a8c8:	01020102 	.word	0x01020102
    a8cc:	01020102 	.word	0x01020102
    a8d0:	01020102 	.word	0x01020102
    a8d4:	01020102 	.word	0x01020102
    a8d8:	01020102 	.word	0x01020102
    a8dc:	01020102 	.word	0x01020102
    a8e0:	01020102 	.word	0x01020102
    a8e4:	01020102 	.word	0x01020102
    a8e8:	01020102 	.word	0x01020102
    a8ec:	01020102 	.word	0x01020102
    a8f0:	01020102 	.word	0x01020102
    a8f4:	01020102 	.word	0x01020102
    a8f8:	01020102 	.word	0x01020102
    a8fc:	01020102 	.word	0x01020102
    a900:	01020102 	.word	0x01020102
    a904:	01020102 	.word	0x01020102
    a908:	01020102 	.word	0x01020102
    a90c:	01020102 	.word	0x01020102
    a910:	01020102 	.word	0x01020102
    a914:	01020102 	.word	0x01020102
    a918:	01020102 	.word	0x01020102
    a91c:	01020102 	.word	0x01020102
    a920:	01020102 	.word	0x01020102
    a924:	01020102 	.word	0x01020102
    a928:	01020102 	.word	0x01020102
    a92c:	01020102 	.word	0x01020102
    a930:	01020102 	.word	0x01020102
    a934:	01020102 	.word	0x01020102
    a938:	01020102 	.word	0x01020102
    a93c:	01020102 	.word	0x01020102
    a940:	01020102 	.word	0x01020102
    a944:	01020102 	.word	0x01020102
    a948:	01020102 	.word	0x01020102
    a94c:	01020102 	.word	0x01020102
    a950:	01020102 	.word	0x01020102
    a954:	01020102 	.word	0x01020102
    a958:	01020102 	.word	0x01020102
    a95c:	01020102 	.word	0x01020102
    a960:	01020102 	.word	0x01020102
    a964:	01020102 	.word	0x01020102
    a968:	01020102 	.word	0x01020102
    a96c:	01020102 	.word	0x01020102
    a970:	01020102 	.word	0x01020102
    a974:	01660161 	.word	0x01660161
    a978:	0170016b 	.word	0x0170016b
    a97c:	01750102 	.word	0x01750102
    a980:	01020102 	.word	0x01020102
    a984:	01020102 	.word	0x01020102
    a988:	01020102 	.word	0x01020102
    a98c:	01020102 	.word	0x01020102
    a990:	017a0102 	.word	0x017a0102
    a994:	0184017f 	.word	0x0184017f
    a998:	018e0189 	.word	0x018e0189
    a99c:	01020193 	.word	0x01020193
    a9a0:	01020102 	.word	0x01020102
    a9a4:	01020102 	.word	0x01020102
    a9a8:	01020102 	.word	0x01020102
    a9ac:	01020102 	.word	0x01020102
    a9b0:	01020102 	.word	0x01020102
    a9b4:	01020102 	.word	0x01020102
    a9b8:	01020102 	.word	0x01020102
    a9bc:	01020102 	.word	0x01020102
    a9c0:	01020102 	.word	0x01020102
    a9c4:	01980102 	.word	0x01980102
    a9c8:	01a2019d 	.word	0x01a2019d
    a9cc:	010201a7 	.word	0x010201a7
    a9d0:	01b10102 	.word	0x01b10102
    a9d4:	010200fd 	.word	0x010200fd
    a9d8:	01020102 	.word	0x01020102
    a9dc:	01020102 	.word	0x01020102
    a9e0:	01020102 	.word	0x01020102
    a9e4:	01020102 	.word	0x01020102
    a9e8:	01020102 	.word	0x01020102
    a9ec:	01020102 	.word	0x01020102
    a9f0:	01020102 	.word	0x01020102
    a9f4:	01020102 	.word	0x01020102
    a9f8:	01020102 	.word	0x01020102
    a9fc:	01020102 	.word	0x01020102
    aa00:	01020102 	.word	0x01020102
    aa04:	01020102 	.word	0x01020102
    aa08:	01ac0102 	.word	0x01ac0102
    aa0c:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
    aa0e:	9007      	str	r0, [sp, #28]
    aa10:	20e1      	movs	r0, #225	; 0xe1
    aa12:	9006      	str	r0, [sp, #24]
    aa14:	e0b3      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa16:	defe      	udf	#254	; 0xfe
    aa18:	2000      	movs	r0, #0
    aa1a:	9007      	str	r0, [sp, #28]
    aa1c:	9006      	str	r0, [sp, #24]
    aa1e:	e0ae      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa20:	2000      	movs	r0, #0
    aa22:	9007      	str	r0, [sp, #28]
    aa24:	2001      	movs	r0, #1
    aa26:	9006      	str	r0, [sp, #24]
    aa28:	e0a9      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa2a:	2000      	movs	r0, #0
    aa2c:	9007      	str	r0, [sp, #28]
    aa2e:	2004      	movs	r0, #4
    aa30:	9006      	str	r0, [sp, #24]
    aa32:	e0a4      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa34:	2000      	movs	r0, #0
    aa36:	9007      	str	r0, [sp, #28]
    aa38:	2009      	movs	r0, #9
    aa3a:	9006      	str	r0, [sp, #24]
    aa3c:	e09f      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa3e:	2000      	movs	r0, #0
    aa40:	9007      	str	r0, [sp, #28]
    aa42:	2010      	movs	r0, #16
    aa44:	9006      	str	r0, [sp, #24]
    aa46:	e09a      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa48:	2000      	movs	r0, #0
    aa4a:	9007      	str	r0, [sp, #28]
    aa4c:	2011      	movs	r0, #17
    aa4e:	9006      	str	r0, [sp, #24]
    aa50:	e095      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa52:	2000      	movs	r0, #0
    aa54:	9007      	str	r0, [sp, #28]
    aa56:	2012      	movs	r0, #18
    aa58:	9006      	str	r0, [sp, #24]
    aa5a:	e090      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa5c:	2000      	movs	r0, #0
    aa5e:	9007      	str	r0, [sp, #28]
    aa60:	2013      	movs	r0, #19
    aa62:	9006      	str	r0, [sp, #24]
    aa64:	e08b      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa66:	2000      	movs	r0, #0
    aa68:	9007      	str	r0, [sp, #28]
    aa6a:	2020      	movs	r0, #32
    aa6c:	9006      	str	r0, [sp, #24]
    aa6e:	e086      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa70:	2000      	movs	r0, #0
    aa72:	9007      	str	r0, [sp, #28]
    aa74:	2021      	movs	r0, #33	; 0x21
    aa76:	9006      	str	r0, [sp, #24]
    aa78:	e081      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa7a:	2000      	movs	r0, #0
    aa7c:	9007      	str	r0, [sp, #28]
    aa7e:	2028      	movs	r0, #40	; 0x28
    aa80:	9006      	str	r0, [sp, #24]
    aa82:	e07c      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa84:	2000      	movs	r0, #0
    aa86:	9007      	str	r0, [sp, #28]
    aa88:	2029      	movs	r0, #41	; 0x29
    aa8a:	9006      	str	r0, [sp, #24]
    aa8c:	e077      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa8e:	2000      	movs	r0, #0
    aa90:	9007      	str	r0, [sp, #28]
    aa92:	202a      	movs	r0, #42	; 0x2a
    aa94:	9006      	str	r0, [sp, #24]
    aa96:	e072      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa98:	2000      	movs	r0, #0
    aa9a:	9007      	str	r0, [sp, #28]
    aa9c:	202b      	movs	r0, #43	; 0x2b
    aa9e:	9006      	str	r0, [sp, #24]
    aaa0:	e06d      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aaa2:	2000      	movs	r0, #0
    aaa4:	9007      	str	r0, [sp, #28]
    aaa6:	202c      	movs	r0, #44	; 0x2c
    aaa8:	9006      	str	r0, [sp, #24]
    aaaa:	e068      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aaac:	2000      	movs	r0, #0
    aaae:	9007      	str	r0, [sp, #28]
    aab0:	202e      	movs	r0, #46	; 0x2e
    aab2:	9006      	str	r0, [sp, #24]
    aab4:	e063      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aab6:	2000      	movs	r0, #0
    aab8:	9007      	str	r0, [sp, #28]
    aaba:	2030      	movs	r0, #48	; 0x30
    aabc:	9006      	str	r0, [sp, #24]
    aabe:	e05e      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aac0:	2000      	movs	r0, #0
    aac2:	9007      	str	r0, [sp, #28]
    aac4:	203a      	movs	r0, #58	; 0x3a
    aac6:	9006      	str	r0, [sp, #24]
    aac8:	e059      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aaca:	2000      	movs	r0, #0
    aacc:	9007      	str	r0, [sp, #28]
    aace:	2036      	movs	r0, #54	; 0x36
    aad0:	9006      	str	r0, [sp, #24]
    aad2:	e054      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aad4:	2000      	movs	r0, #0
    aad6:	9007      	str	r0, [sp, #28]
    aad8:	20b1      	movs	r0, #177	; 0xb1
    aada:	9006      	str	r0, [sp, #24]
    aadc:	e04f      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aade:	2000      	movs	r0, #0
    aae0:	9007      	str	r0, [sp, #28]
    aae2:	20b2      	movs	r0, #178	; 0xb2
    aae4:	9006      	str	r0, [sp, #24]
    aae6:	e04a      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aae8:	2000      	movs	r0, #0
    aaea:	9007      	str	r0, [sp, #28]
    aaec:	20b3      	movs	r0, #179	; 0xb3
    aaee:	9006      	str	r0, [sp, #24]
    aaf0:	e045      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aaf2:	2000      	movs	r0, #0
    aaf4:	9007      	str	r0, [sp, #28]
    aaf6:	20b4      	movs	r0, #180	; 0xb4
    aaf8:	9006      	str	r0, [sp, #24]
    aafa:	e040      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aafc:	2000      	movs	r0, #0
    aafe:	9007      	str	r0, [sp, #28]
    ab00:	20b6      	movs	r0, #182	; 0xb6
    ab02:	9006      	str	r0, [sp, #24]
    ab04:	e03b      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab06:	2000      	movs	r0, #0
    ab08:	9007      	str	r0, [sp, #28]
    ab0a:	20c0      	movs	r0, #192	; 0xc0
    ab0c:	9006      	str	r0, [sp, #24]
    ab0e:	e036      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab10:	2000      	movs	r0, #0
    ab12:	9007      	str	r0, [sp, #28]
    ab14:	20c1      	movs	r0, #193	; 0xc1
    ab16:	9006      	str	r0, [sp, #24]
    ab18:	e031      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab1a:	2000      	movs	r0, #0
    ab1c:	9007      	str	r0, [sp, #28]
    ab1e:	20c2      	movs	r0, #194	; 0xc2
    ab20:	9006      	str	r0, [sp, #24]
    ab22:	e02c      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab24:	2000      	movs	r0, #0
    ab26:	9007      	str	r0, [sp, #28]
    ab28:	20c3      	movs	r0, #195	; 0xc3
    ab2a:	9006      	str	r0, [sp, #24]
    ab2c:	e027      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab2e:	2000      	movs	r0, #0
    ab30:	9007      	str	r0, [sp, #28]
    ab32:	20c4      	movs	r0, #196	; 0xc4
    ab34:	9006      	str	r0, [sp, #24]
    ab36:	e022      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab38:	2000      	movs	r0, #0
    ab3a:	9007      	str	r0, [sp, #28]
    ab3c:	20c5      	movs	r0, #197	; 0xc5
    ab3e:	9006      	str	r0, [sp, #24]
    ab40:	e01d      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab42:	2000      	movs	r0, #0
    ab44:	9007      	str	r0, [sp, #28]
    ab46:	20da      	movs	r0, #218	; 0xda
    ab48:	9006      	str	r0, [sp, #24]
    ab4a:	e018      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab4c:	2000      	movs	r0, #0
    ab4e:	9007      	str	r0, [sp, #28]
    ab50:	20db      	movs	r0, #219	; 0xdb
    ab52:	9006      	str	r0, [sp, #24]
    ab54:	e013      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab56:	2000      	movs	r0, #0
    ab58:	9007      	str	r0, [sp, #28]
    ab5a:	20dc      	movs	r0, #220	; 0xdc
    ab5c:	9006      	str	r0, [sp, #24]
    ab5e:	e00e      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab60:	2000      	movs	r0, #0
    ab62:	9007      	str	r0, [sp, #28]
    ab64:	20dd      	movs	r0, #221	; 0xdd
    ab66:	9006      	str	r0, [sp, #24]
    ab68:	e009      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab6a:	2000      	movs	r0, #0
    ab6c:	9007      	str	r0, [sp, #28]
    ab6e:	20fc      	movs	r0, #252	; 0xfc
    ab70:	9006      	str	r0, [sp, #24]
    ab72:	e004      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab74:	2000      	movs	r0, #0
    ab76:	9007      	str	r0, [sp, #28]
    ab78:	20e0      	movs	r0, #224	; 0xe0
    ab7a:	9006      	str	r0, [sp, #24]
    ab7c:	e7ff      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab7e:	9806      	ldr	r0, [sp, #24]
    ab80:	9907      	ldr	r1, [sp, #28]
    ab82:	9105      	str	r1, [sp, #20]
    ab84:	9004      	str	r0, [sp, #16]
    ab86:	2000      	movs	r0, #0
    ab88:	9003      	str	r0, [sp, #12]
    ab8a:	2001      	movs	r0, #1
    ab8c:	9002      	str	r0, [sp, #8]
    ab8e:	9802      	ldr	r0, [sp, #8]
    ab90:	9903      	ldr	r1, [sp, #12]
    ab92:	9a04      	ldr	r2, [sp, #16]
    ab94:	9b05      	ldr	r3, [sp, #20]
    ab96:	b00a      	add	sp, #40	; 0x28
    ab98:	4770      	bx	lr

0000ab9a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>:
    ab9a:	b580      	push	{r7, lr}
    ab9c:	b08a      	sub	sp, #40	; 0x28
    ab9e:	9009      	str	r0, [sp, #36]	; 0x24
    aba0:	f7ff fe30 	bl	a804 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>
    aba4:	9108      	str	r1, [sp, #32]
    aba6:	9007      	str	r0, [sp, #28]
    aba8:	9306      	str	r3, [sp, #24]
    abaa:	9205      	str	r2, [sp, #20]
    abac:	e7ff      	b.n	abae <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x14>
    abae:	9807      	ldr	r0, [sp, #28]
    abb0:	9908      	ldr	r1, [sp, #32]
    abb2:	9a05      	ldr	r2, [sp, #20]
    abb4:	9b06      	ldr	r3, [sp, #24]
    abb6:	f000 f859 	bl	ac6c <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>
    abba:	9104      	str	r1, [sp, #16]
    abbc:	9003      	str	r0, [sp, #12]
    abbe:	9302      	str	r3, [sp, #8]
    abc0:	9201      	str	r2, [sp, #4]
    abc2:	e7ff      	b.n	abc4 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x2a>
    abc4:	9803      	ldr	r0, [sp, #12]
    abc6:	9904      	ldr	r1, [sp, #16]
    abc8:	9a01      	ldr	r2, [sp, #4]
    abca:	9b02      	ldr	r3, [sp, #8]
    abcc:	b00a      	add	sp, #40	; 0x28
    abce:	bd80      	pop	{r7, pc}

0000abd0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>:
#[derive(ToPrimitive)]
    abd0:	b08a      	sub	sp, #40	; 0x28
    abd2:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Orientation {
    abd4:	7800      	ldrb	r0, [r0, #0]
    abd6:	4601      	mov	r1, r0
    abd8:	2800      	cmp	r0, #0
    abda:	9101      	str	r1, [sp, #4]
    abdc:	d00f      	beq.n	abfe <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x2e>
    abde:	e7ff      	b.n	abe0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x10>
    abe0:	9801      	ldr	r0, [sp, #4]
    abe2:	2860      	cmp	r0, #96	; 0x60
    abe4:	d00f      	beq.n	ac06 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x36>
    abe6:	e7ff      	b.n	abe8 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x18>
    abe8:	9801      	ldr	r0, [sp, #4]
    abea:	28a0      	cmp	r0, #160	; 0xa0
    abec:	d001      	beq.n	abf2 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x22>
    abee:	e7ff      	b.n	abf0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x20>
    abf0:	e00e      	b.n	ac10 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x40>
    abf2:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
    abf4:	9007      	str	r0, [sp, #28]
    abf6:	20a0      	movs	r0, #160	; 0xa0
    abf8:	9006      	str	r0, [sp, #24]
    abfa:	e00e      	b.n	ac1a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    abfc:	defe      	udf	#254	; 0xfe
    abfe:	2000      	movs	r0, #0
    ac00:	9007      	str	r0, [sp, #28]
    ac02:	9006      	str	r0, [sp, #24]
    ac04:	e009      	b.n	ac1a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    ac06:	2000      	movs	r0, #0
    ac08:	9007      	str	r0, [sp, #28]
    ac0a:	2060      	movs	r0, #96	; 0x60
    ac0c:	9006      	str	r0, [sp, #24]
    ac0e:	e004      	b.n	ac1a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    ac10:	2000      	movs	r0, #0
    ac12:	9007      	str	r0, [sp, #28]
    ac14:	20c0      	movs	r0, #192	; 0xc0
    ac16:	9006      	str	r0, [sp, #24]
    ac18:	e7ff      	b.n	ac1a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    ac1a:	9806      	ldr	r0, [sp, #24]
    ac1c:	9907      	ldr	r1, [sp, #28]
    ac1e:	9105      	str	r1, [sp, #20]
    ac20:	9004      	str	r0, [sp, #16]
    ac22:	2000      	movs	r0, #0
    ac24:	9003      	str	r0, [sp, #12]
    ac26:	2001      	movs	r0, #1
    ac28:	9002      	str	r0, [sp, #8]
    ac2a:	9802      	ldr	r0, [sp, #8]
    ac2c:	9903      	ldr	r1, [sp, #12]
    ac2e:	9a04      	ldr	r2, [sp, #16]
    ac30:	9b05      	ldr	r3, [sp, #20]
    ac32:	b00a      	add	sp, #40	; 0x28
    ac34:	4770      	bx	lr

0000ac36 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>:
    ac36:	b580      	push	{r7, lr}
    ac38:	b08a      	sub	sp, #40	; 0x28
    ac3a:	9009      	str	r0, [sp, #36]	; 0x24
    ac3c:	f7ff ffc8 	bl	abd0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>
    ac40:	9108      	str	r1, [sp, #32]
    ac42:	9007      	str	r0, [sp, #28]
    ac44:	9306      	str	r3, [sp, #24]
    ac46:	9205      	str	r2, [sp, #20]
    ac48:	e7ff      	b.n	ac4a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x14>
    ac4a:	9807      	ldr	r0, [sp, #28]
    ac4c:	9908      	ldr	r1, [sp, #32]
    ac4e:	9a05      	ldr	r2, [sp, #20]
    ac50:	9b06      	ldr	r3, [sp, #24]
    ac52:	f000 f863 	bl	ad1c <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>
    ac56:	9104      	str	r1, [sp, #16]
    ac58:	9003      	str	r0, [sp, #12]
    ac5a:	9302      	str	r3, [sp, #8]
    ac5c:	9201      	str	r2, [sp, #4]
    ac5e:	e7ff      	b.n	ac60 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x2a>
    ac60:	9803      	ldr	r0, [sp, #12]
    ac62:	9904      	ldr	r1, [sp, #16]
    ac64:	9a01      	ldr	r2, [sp, #4]
    ac66:	9b02      	ldr	r3, [sp, #8]
    ac68:	b00a      	add	sp, #40	; 0x28
    ac6a:	bd80      	pop	{r7, pc}

0000ac6c <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>:
    ac6c:	b5b0      	push	{r4, r5, r7, lr}
    ac6e:	b090      	sub	sp, #64	; 0x40
    ac70:	469c      	mov	ip, r3
    ac72:	4696      	mov	lr, r2
    ac74:	460c      	mov	r4, r1
    ac76:	4605      	mov	r5, r0
    ac78:	9103      	str	r1, [sp, #12]
    ac7a:	9002      	str	r0, [sp, #8]
    ac7c:	9305      	str	r3, [sp, #20]
    ac7e:	9204      	str	r2, [sp, #16]
    ac80:	2000      	movs	r0, #0
    ac82:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ac86:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ac8a:	2001      	movs	r0, #1
    ac8c:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ac90:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ac94:	9802      	ldr	r0, [sp, #8]
    ac96:	2800      	cmp	r0, #0
    ac98:	d001      	beq.n	ac9e <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x32>
    ac9a:	e7ff      	b.n	ac9c <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x30>
    ac9c:	e004      	b.n	aca8 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x3c>
    ac9e:	2000      	movs	r0, #0
    aca0:	9007      	str	r0, [sp, #28]
    aca2:	9006      	str	r0, [sp, #24]
    aca4:	e023      	b.n	acee <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
    aca6:	defe      	udf	#254	; 0xfe
    aca8:	2000      	movs	r0, #0
    acaa:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    acae:	9904      	ldr	r1, [sp, #16]
    acb0:	9a05      	ldr	r2, [sp, #20]
    acb2:	920f      	str	r2, [sp, #60]	; 0x3c
    acb4:	910e      	str	r1, [sp, #56]	; 0x38
    acb6:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    acba:	920b      	str	r2, [sp, #44]	; 0x2c
    acbc:	910a      	str	r1, [sp, #40]	; 0x28
    acbe:	980a      	ldr	r0, [sp, #40]	; 0x28
    acc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    acc2:	f000 f883 	bl	adcc <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>
    acc6:	9101      	str	r1, [sp, #4]
    acc8:	9000      	str	r0, [sp, #0]
    acca:	e7ff      	b.n	accc <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x60>
    accc:	9800      	ldr	r0, [sp, #0]
    acce:	9008      	str	r0, [sp, #32]
    acd0:	9901      	ldr	r1, [sp, #4]
    acd2:	9109      	str	r1, [sp, #36]	; 0x24
    acd4:	2200      	movs	r2, #0
    acd6:	9207      	str	r2, [sp, #28]
    acd8:	2201      	movs	r2, #1
    acda:	9206      	str	r2, [sp, #24]
    acdc:	e007      	b.n	acee <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
    acde:	9802      	ldr	r0, [sp, #8]
    ace0:	2801      	cmp	r0, #1
    ace2:	d010      	beq.n	ad06 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x9a>
    ace4:	e019      	b.n	ad1a <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xae>
    ace6:	2000      	movs	r0, #0
    ace8:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    acec:	e7f7      	b.n	acde <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
    acee:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    acf2:	07c0      	lsls	r0, r0, #31
    acf4:	2800      	cmp	r0, #0
    acf6:	d1f6      	bne.n	ace6 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x7a>
    acf8:	e7f1      	b.n	acde <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
    acfa:	9806      	ldr	r0, [sp, #24]
    acfc:	9907      	ldr	r1, [sp, #28]
    acfe:	9a08      	ldr	r2, [sp, #32]
    ad00:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ad02:	b010      	add	sp, #64	; 0x40
    ad04:	bdb0      	pop	{r4, r5, r7, pc}
    ad06:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    ad0a:	07c0      	lsls	r0, r0, #31
    ad0c:	2800      	cmp	r0, #0
    ad0e:	d0f4      	beq.n	acfa <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
    ad10:	e7ff      	b.n	ad12 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xa6>
    ad12:	2000      	movs	r0, #0
    ad14:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ad18:	e7ef      	b.n	acfa <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
    ad1a:	e7ee      	b.n	acfa <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>

0000ad1c <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>:
    ad1c:	b5b0      	push	{r4, r5, r7, lr}
    ad1e:	b090      	sub	sp, #64	; 0x40
    ad20:	469c      	mov	ip, r3
    ad22:	4696      	mov	lr, r2
    ad24:	460c      	mov	r4, r1
    ad26:	4605      	mov	r5, r0
    ad28:	9103      	str	r1, [sp, #12]
    ad2a:	9002      	str	r0, [sp, #8]
    ad2c:	9305      	str	r3, [sp, #20]
    ad2e:	9204      	str	r2, [sp, #16]
    ad30:	2000      	movs	r0, #0
    ad32:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ad36:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ad3a:	2001      	movs	r0, #1
    ad3c:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ad40:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ad44:	9802      	ldr	r0, [sp, #8]
    ad46:	2800      	cmp	r0, #0
    ad48:	d001      	beq.n	ad4e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x32>
    ad4a:	e7ff      	b.n	ad4c <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x30>
    ad4c:	e004      	b.n	ad58 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x3c>
    ad4e:	2000      	movs	r0, #0
    ad50:	9007      	str	r0, [sp, #28]
    ad52:	9006      	str	r0, [sp, #24]
    ad54:	e023      	b.n	ad9e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
    ad56:	defe      	udf	#254	; 0xfe
    ad58:	2000      	movs	r0, #0
    ad5a:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ad5e:	9904      	ldr	r1, [sp, #16]
    ad60:	9a05      	ldr	r2, [sp, #20]
    ad62:	920f      	str	r2, [sp, #60]	; 0x3c
    ad64:	910e      	str	r1, [sp, #56]	; 0x38
    ad66:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ad6a:	920b      	str	r2, [sp, #44]	; 0x2c
    ad6c:	910a      	str	r1, [sp, #40]	; 0x28
    ad6e:	980a      	ldr	r0, [sp, #40]	; 0x28
    ad70:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ad72:	f00b fe5b 	bl	16a2c <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>
    ad76:	9101      	str	r1, [sp, #4]
    ad78:	9000      	str	r0, [sp, #0]
    ad7a:	e7ff      	b.n	ad7c <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x60>
    ad7c:	9800      	ldr	r0, [sp, #0]
    ad7e:	9008      	str	r0, [sp, #32]
    ad80:	9901      	ldr	r1, [sp, #4]
    ad82:	9109      	str	r1, [sp, #36]	; 0x24
    ad84:	2200      	movs	r2, #0
    ad86:	9207      	str	r2, [sp, #28]
    ad88:	2201      	movs	r2, #1
    ad8a:	9206      	str	r2, [sp, #24]
    ad8c:	e007      	b.n	ad9e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
    ad8e:	9802      	ldr	r0, [sp, #8]
    ad90:	2801      	cmp	r0, #1
    ad92:	d010      	beq.n	adb6 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x9a>
    ad94:	e019      	b.n	adca <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xae>
    ad96:	2000      	movs	r0, #0
    ad98:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ad9c:	e7f7      	b.n	ad8e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
    ad9e:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    ada2:	07c0      	lsls	r0, r0, #31
    ada4:	2800      	cmp	r0, #0
    ada6:	d1f6      	bne.n	ad96 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x7a>
    ada8:	e7f1      	b.n	ad8e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
    adaa:	9806      	ldr	r0, [sp, #24]
    adac:	9907      	ldr	r1, [sp, #28]
    adae:	9a08      	ldr	r2, [sp, #32]
    adb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    adb2:	b010      	add	sp, #64	; 0x40
    adb4:	bdb0      	pop	{r4, r5, r7, pc}
    adb6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    adba:	07c0      	lsls	r0, r0, #31
    adbc:	2800      	cmp	r0, #0
    adbe:	d0f4      	beq.n	adaa <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
    adc0:	e7ff      	b.n	adc2 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xa6>
    adc2:	2000      	movs	r0, #0
    adc4:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    adc8:	e7ef      	b.n	adaa <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
    adca:	e7ee      	b.n	adaa <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>

0000adcc <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>:
    adcc:	b084      	sub	sp, #16
    adce:	460a      	mov	r2, r1
    add0:	4603      	mov	r3, r0
    add2:	9103      	str	r1, [sp, #12]
    add4:	9002      	str	r0, [sp, #8]
    add6:	b004      	add	sp, #16
    add8:	4770      	bx	lr

0000adda <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h44bec417aa74de39E>:
    adda:	b084      	sub	sp, #16
    addc:	9000      	str	r0, [sp, #0]
    adde:	9101      	str	r1, [sp, #4]
    ade0:	9102      	str	r1, [sp, #8]
    ade2:	9003      	str	r0, [sp, #12]
    ade4:	6802      	ldr	r2, [r0, #0]
    ade6:	6840      	ldr	r0, [r0, #4]
    ade8:	680b      	ldr	r3, [r1, #0]
    adea:	6849      	ldr	r1, [r1, #4]
    adec:	4048      	eors	r0, r1
    adee:	ea82 0103 	eor.w	r1, r2, r3
    adf2:	4308      	orrs	r0, r1
    adf4:	fab0 f080 	clz	r0, r0
    adf8:	0940      	lsrs	r0, r0, #5
    adfa:	b004      	add	sp, #16
    adfc:	4770      	bx	lr

0000adfe <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E>:
/// ```rust
/// let peripherals = nrf52::Peripherals::take().unwrap();
/// let nfcpins = peripherals.UICR.nfcpins.read().bits();
/// console::print("nfcpins = "); console::printhex(nfcpins as u8); console::print("\n");
/// ```
pub fn start_touch_sensor() -> MynewtResult<()> {
    adfe:	b5b0      	push	{r4, r5, r7, lr}
    ae00:	b0be      	sub	sp, #248	; 0xf8
    console::print("Rust touch sensor\n");
    ae02:	f24e 6090 	movw	r0, #59024	; 0xe690
    ae06:	f2c0 0001 	movt	r0, #1
    ae0a:	2112      	movs	r1, #18
    ae0c:	f7fe f8f0 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    ae10:	e7ff      	b.n	ae12 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x14>

    //  Init GPIO for the Reset Pin
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    ae12:	f240 1064 	movw	r0, #356	; 0x164
    ae16:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ae1a:	210a      	movs	r1, #10
    ae1c:	f009 fb19 	bl	14452 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    ae20:	9012      	str	r0, [sp, #72]	; 0x48
    ae22:	e7ff      	b.n	ae24 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x26>
    ae24:	9812      	ldr	r0, [sp, #72]	; 0x48
    ae26:	f7fd fea7 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    ae2a:	9014      	str	r0, [sp, #80]	; 0x50
    ae2c:	e7ff      	b.n	ae2e <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x30>
    ae2e:	9814      	ldr	r0, [sp, #80]	; 0x50
    ae30:	1e41      	subs	r1, r0, #1
    ae32:	bf18      	it	ne
    ae34:	2101      	movne	r1, #1
    ae36:	2801      	cmp	r0, #1
    ae38:	d001      	beq.n	ae3e <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x40>
    ae3a:	e7ff      	b.n	ae3c <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x3e>
    ae3c:	e008      	b.n	ae50 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x52>

    //  Reset the touch controller by switching the Reset Pin low then high with pauses. Based on https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L1017-L1167
    unsafe {
        TOUCH_RESET.set_low() ? ;
    ae3e:	f240 1064 	movw	r0, #356	; 0x164
    ae42:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ae46:	f009 fb9d 	bl	14584 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    ae4a:	9011      	str	r0, [sp, #68]	; 0x44
    ae4c:	e00f      	b.n	ae6e <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x70>
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    ae4e:	defe      	udf	#254	; 0xfe
    ae50:	9814      	ldr	r0, [sp, #80]	; 0x50
    ae52:	9036      	str	r0, [sp, #216]	; 0xd8
    ae54:	f007 fcfa 	bl	1284c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    ae58:	9010      	str	r0, [sp, #64]	; 0x40
    ae5a:	e002      	b.n	ae62 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x64>
    assert_eq!(rc, 0, "IRQ init fail");

    //  Start monitoring for touch controller interrupts
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
    Ok(())
}
    ae5c:	9813      	ldr	r0, [sp, #76]	; 0x4c
    ae5e:	b03e      	add	sp, #248	; 0xf8
    ae60:	bdb0      	pop	{r4, r5, r7, pc}
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    ae62:	9810      	ldr	r0, [sp, #64]	; 0x40
    ae64:	f7fd fe7c 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    ae68:	9013      	str	r0, [sp, #76]	; 0x4c
    ae6a:	e7ff      	b.n	ae6c <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x6e>
    ae6c:	e7f6      	b.n	ae5c <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x5e>
        TOUCH_RESET.set_low() ? ;
    ae6e:	9811      	ldr	r0, [sp, #68]	; 0x44
    ae70:	f7fd fe82 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    ae74:	9015      	str	r0, [sp, #84]	; 0x54
    ae76:	e7ff      	b.n	ae78 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x7a>
    ae78:	9815      	ldr	r0, [sp, #84]	; 0x54
    ae7a:	1e41      	subs	r1, r0, #1
    ae7c:	bf18      	it	ne
    ae7e:	2101      	movne	r1, #1
    ae80:	2801      	cmp	r0, #1
    ae82:	d001      	beq.n	ae88 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x8a>
    ae84:	e7ff      	b.n	ae86 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x88>
    ae86:	e008      	b.n	ae9a <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x9c>
        TOUCH_DELAY.delay_ms(20);
    ae88:	f240 1068 	movw	r0, #360	; 0x168
    ae8c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ae90:	2114      	movs	r1, #20
    ae92:	f009 fb8e 	bl	145b2 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    ae96:	e00d      	b.n	aeb4 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xb6>
        TOUCH_RESET.set_low() ? ;
    ae98:	defe      	udf	#254	; 0xfe
    ae9a:	9815      	ldr	r0, [sp, #84]	; 0x54
    ae9c:	9037      	str	r0, [sp, #220]	; 0xdc
    ae9e:	f007 fcd5 	bl	1284c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    aea2:	900f      	str	r0, [sp, #60]	; 0x3c
    aea4:	e7ff      	b.n	aea6 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xa8>
    aea6:	980f      	ldr	r0, [sp, #60]	; 0x3c
    aea8:	f7fd fe5a 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    aeac:	9013      	str	r0, [sp, #76]	; 0x4c
    aeae:	e7ff      	b.n	aeb0 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xb2>
    aeb0:	e7ff      	b.n	aeb2 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xb4>
    aeb2:	e7d3      	b.n	ae5c <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x5e>
        TOUCH_RESET.set_high() ? ;
    aeb4:	f240 1064 	movw	r0, #356	; 0x164
    aeb8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    aebc:	f009 fb6d 	bl	1459a <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    aec0:	900e      	str	r0, [sp, #56]	; 0x38
    aec2:	e7ff      	b.n	aec4 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xc6>
    aec4:	980e      	ldr	r0, [sp, #56]	; 0x38
    aec6:	f7fd fe57 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    aeca:	9016      	str	r0, [sp, #88]	; 0x58
    aecc:	e7ff      	b.n	aece <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xd0>
    aece:	9816      	ldr	r0, [sp, #88]	; 0x58
    aed0:	1e41      	subs	r1, r0, #1
    aed2:	bf18      	it	ne
    aed4:	2101      	movne	r1, #1
    aed6:	2801      	cmp	r0, #1
    aed8:	d001      	beq.n	aede <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xe0>
    aeda:	e7ff      	b.n	aedc <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xde>
    aedc:	e008      	b.n	aef0 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xf2>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
    aede:	f240 1068 	movw	r0, #360	; 0x168
    aee2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    aee6:	21c8      	movs	r1, #200	; 0xc8
    aee8:	f009 fb63 	bl	145b2 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    aeec:	e00c      	b.n	af08 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x10a>
        TOUCH_RESET.set_high() ? ;
    aeee:	defe      	udf	#254	; 0xfe
    aef0:	9816      	ldr	r0, [sp, #88]	; 0x58
    aef2:	9038      	str	r0, [sp, #224]	; 0xe0
    aef4:	f007 fcaa 	bl	1284c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    aef8:	900d      	str	r0, [sp, #52]	; 0x34
    aefa:	e7ff      	b.n	aefc <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xfe>
    aefc:	980d      	ldr	r0, [sp, #52]	; 0x34
    aefe:	f7fd fe2f 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    af02:	9013      	str	r0, [sp, #76]	; 0x4c
    af04:	e7ff      	b.n	af06 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x108>
    af06:	e7d4      	b.n	aeb2 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xb4>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
    af08:	f240 1068 	movw	r0, #360	; 0x168
    af0c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    af10:	21c8      	movs	r1, #200	; 0xc8
    af12:	f009 fb4e 	bl	145b2 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    af16:	e7ff      	b.n	af18 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x11a>
    unsafe { TOUCH_EVENT.ev_cb = Some( touch_event_callback ) };
    af18:	f24b 00bb 	movw	r0, #45243	; 0xb0bb
    af1c:	f2c0 0000 	movt	r0, #0
    af20:	9017      	str	r0, [sp, #92]	; 0x5c
    af22:	9817      	ldr	r0, [sp, #92]	; 0x5c
    af24:	f240 11fc 	movw	r1, #508	; 0x1fc
    af28:	f2c2 0100 	movt	r1, #8192	; 0x2000
    af2c:	6048      	str	r0, [r1, #4]
        Some( touch_interrupt_handler ),  //  Call `touch_interrupt_handler()` upon detecting interrupt
    af2e:	f24b 006f 	movw	r0, #45167	; 0xb06f
    af32:	f2c0 0000 	movt	r0, #0
    af36:	9019      	str	r0, [sp, #100]	; 0x64
        core::ptr::null_mut(),            //  No arguments for `touch_interrupt_handler()`
    af38:	e7ff      	b.n	af3a <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x13c>
    let rc = unsafe { hal::hal_gpio_irq_init(
    af3a:	9919      	ldr	r1, [sp, #100]	; 0x64
    af3c:	4668      	mov	r0, sp
    af3e:	2201      	movs	r2, #1
    af40:	6002      	str	r2, [r0, #0]
    af42:	201c      	movs	r0, #28
    af44:	2200      	movs	r2, #0
    af46:	2302      	movs	r3, #2
    af48:	f00e fece 	bl	19ce8 <hal_gpio_irq_init>
    af4c:	9018      	str	r0, [sp, #96]	; 0x60
    af4e:	e7ff      	b.n	af50 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x152>
    assert_eq!(rc, 0, "IRQ init fail");
    af50:	f24e 60a8 	movw	r0, #59048	; 0xe6a8
    af54:	f2c0 0001 	movt	r0, #1
    af58:	6800      	ldr	r0, [r0, #0]
    af5a:	a918      	add	r1, sp, #96	; 0x60
    af5c:	911a      	str	r1, [sp, #104]	; 0x68
    af5e:	901b      	str	r0, [sp, #108]	; 0x6c
    af60:	981a      	ldr	r0, [sp, #104]	; 0x68
    af62:	9039      	str	r0, [sp, #228]	; 0xe4
    af64:	991b      	ldr	r1, [sp, #108]	; 0x6c
    af66:	913a      	str	r1, [sp, #232]	; 0xe8
    af68:	6802      	ldr	r2, [r0, #0]
    af6a:	680b      	ldr	r3, [r1, #0]
    af6c:	429a      	cmp	r2, r3
    af6e:	900c      	str	r0, [sp, #48]	; 0x30
    af70:	910b      	str	r1, [sp, #44]	; 0x2c
    af72:	d104      	bne.n	af7e <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x180>
    af74:	e7ff      	b.n	af76 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x178>
    af76:	201c      	movs	r0, #28
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
    af78:	f00e fef2 	bl	19d60 <hal_gpio_irq_enable>
    af7c:	e072      	b.n	b064 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x266>
    assert_eq!(rc, 0, "IRQ init fail");
    af7e:	f24e 7000 	movw	r0, #59136	; 0xe700
    af82:	f2c0 0001 	movt	r0, #1
    af86:	6801      	ldr	r1, [r0, #0]
    af88:	980c      	ldr	r0, [sp, #48]	; 0x30
    af8a:	902b      	str	r0, [sp, #172]	; 0xac
    af8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    af8e:	922c      	str	r2, [sp, #176]	; 0xb0
    af90:	f24e 731c 	movw	r3, #59164	; 0xe71c
    af94:	f2c0 0301 	movt	r3, #1
    af98:	681b      	ldr	r3, [r3, #0]
    af9a:	f24e 7c20 	movw	ip, #59168	; 0xe720
    af9e:	f2c0 0c01 	movt	ip, #1
    afa2:	f8dc c000 	ldr.w	ip, [ip]
    afa6:	46ee      	mov	lr, sp
    afa8:	2400      	movs	r4, #0
    afaa:	f8ce 4000 	str.w	r4, [lr]
    afae:	a82d      	add	r0, sp, #180	; 0xb4
    afb0:	2201      	movs	r2, #1
    afb2:	910a      	str	r1, [sp, #40]	; 0x28
    afb4:	4619      	mov	r1, r3
    afb6:	4663      	mov	r3, ip
    afb8:	f00b fd5c 	bl	16a74 <_ZN4core3fmt9Arguments6new_v117hdc09c81c55dd3f27E>
    afbc:	e7ff      	b.n	afbe <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x1c0>
    afbe:	a82b      	add	r0, sp, #172	; 0xac
    afc0:	9028      	str	r0, [sp, #160]	; 0xa0
    afc2:	a82c      	add	r0, sp, #176	; 0xb0
    afc4:	9029      	str	r0, [sp, #164]	; 0xa4
    afc6:	a82d      	add	r0, sp, #180	; 0xb4
    afc8:	902a      	str	r0, [sp, #168]	; 0xa8
    afca:	9828      	ldr	r0, [sp, #160]	; 0xa0
    afcc:	903b      	str	r0, [sp, #236]	; 0xec
    afce:	9929      	ldr	r1, [sp, #164]	; 0xa4
    afd0:	913c      	str	r1, [sp, #240]	; 0xf0
    afd2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    afd4:	923d      	str	r2, [sp, #244]	; 0xf4
    afd6:	f241 739f 	movw	r3, #6047	; 0x179f
    afda:	f2c0 0301 	movt	r3, #1
    afde:	9109      	str	r1, [sp, #36]	; 0x24
    afe0:	4619      	mov	r1, r3
    afe2:	9208      	str	r2, [sp, #32]
    afe4:	f7fe f9b9 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    afe8:	9007      	str	r0, [sp, #28]
    afea:	9106      	str	r1, [sp, #24]
    afec:	e7ff      	b.n	afee <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x1f0>
    afee:	f241 719f 	movw	r1, #6047	; 0x179f
    aff2:	f2c0 0101 	movt	r1, #1
    aff6:	9809      	ldr	r0, [sp, #36]	; 0x24
    aff8:	f7fe f9af 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    affc:	9005      	str	r0, [sp, #20]
    affe:	9104      	str	r1, [sp, #16]
    b000:	e7ff      	b.n	b002 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x204>
    b002:	f647 7183 	movw	r1, #32643	; 0x7f83
    b006:	f2c0 0101 	movt	r1, #1
    b00a:	9808      	ldr	r0, [sp, #32]
    b00c:	f7fe f9e4 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    b010:	9003      	str	r0, [sp, #12]
    b012:	9102      	str	r1, [sp, #8]
    b014:	e7ff      	b.n	b016 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x218>
    b016:	9807      	ldr	r0, [sp, #28]
    b018:	9022      	str	r0, [sp, #136]	; 0x88
    b01a:	9906      	ldr	r1, [sp, #24]
    b01c:	9123      	str	r1, [sp, #140]	; 0x8c
    b01e:	9a05      	ldr	r2, [sp, #20]
    b020:	9224      	str	r2, [sp, #144]	; 0x90
    b022:	9b04      	ldr	r3, [sp, #16]
    b024:	9325      	str	r3, [sp, #148]	; 0x94
    b026:	f8dd c00c 	ldr.w	ip, [sp, #12]
    b02a:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
    b02e:	f8dd e008 	ldr.w	lr, [sp, #8]
    b032:	f8cd e09c 	str.w	lr, [sp, #156]	; 0x9c
    b036:	466c      	mov	r4, sp
    b038:	2503      	movs	r5, #3
    b03a:	6025      	str	r5, [r4, #0]
    b03c:	a81c      	add	r0, sp, #112	; 0x70
    b03e:	ab22      	add	r3, sp, #136	; 0x88
    b040:	990a      	ldr	r1, [sp, #40]	; 0x28
    b042:	462a      	mov	r2, r5
    b044:	f00b fd16 	bl	16a74 <_ZN4core3fmt9Arguments6new_v117hdc09c81c55dd3f27E>
    b048:	e7ff      	b.n	b04a <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x24c>
    b04a:	f24e 7040 	movw	r0, #59200	; 0xe740
    b04e:	f2c0 0001 	movt	r0, #1
    b052:	f00c fca8 	bl	179a6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    b056:	9001      	str	r0, [sp, #4]
    b058:	e7ff      	b.n	b05a <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x25c>
    b05a:	a81c      	add	r0, sp, #112	; 0x70
    b05c:	9901      	ldr	r1, [sp, #4]
    b05e:	f00c fcdf 	bl	17a20 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    b062:	defe      	udf	#254	; 0xfe
    b064:	2000      	movs	r0, #0
    Ok(())
    b066:	9013      	str	r0, [sp, #76]	; 0x4c
    b068:	2001      	movs	r0, #1
    b06a:	9013      	str	r0, [sp, #76]	; 0x4c
}
    b06c:	e6f6      	b.n	ae5c <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x5e>

0000b06e <_ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE>:

/// Interrupt handler for the touch controller, triggered when a touch is detected
extern "C" fn touch_interrupt_handler(arg: *mut core::ffi::c_void) {
    b06e:	b580      	push	{r7, lr}
    b070:	b086      	sub	sp, #24
    b072:	9004      	str	r0, [sp, #16]
    //  We forward a touch event to the Default Event Queue for deferred processing.  Don't do any processing here.
    unsafe { TOUCH_EVENT.ev_arg = arg };
    b074:	f240 11fc 	movw	r1, #508	; 0x1fc
    b078:	f2c2 0100 	movt	r1, #8192	; 0x2000
    b07c:	6088      	str	r0, [r1, #8]
    b07e:	a802      	add	r0, sp, #8
    //  Fetch the Default Event Queue. TODO: Use dedicated Event Queue for higher priority processing.
    let queue = os::eventq_dflt_get()
    b080:	f7fd fdf6 	bl	8c70 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
    b084:	e7ff      	b.n	b086 <_ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE+0x18>
    b086:	f24e 210a 	movw	r1, #57866	; 0xe20a
    b08a:	f2c0 0101 	movt	r1, #1
    b08e:	f24e 7358 	movw	r3, #59224	; 0xe758
    b092:	f2c0 0301 	movt	r3, #1
    b096:	a802      	add	r0, sp, #8
    b098:	2208      	movs	r2, #8
    b09a:	f7fd fb9a 	bl	87d2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE>
    b09e:	4601      	mov	r1, r0
    b0a0:	9005      	str	r0, [sp, #20]
    b0a2:	9101      	str	r1, [sp, #4]
    b0a4:	e7ff      	b.n	b0a6 <_ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE+0x38>
        .expect("GET fail");
    unsafe { os::os_eventq_put(queue, &mut TOUCH_EVENT) };  //  Trigger the callback function `touch_event_callback()`
    b0a6:	f240 11fc 	movw	r1, #508	; 0x1fc
    b0aa:	f2c2 0100 	movt	r1, #8192	; 0x2000
    b0ae:	9801      	ldr	r0, [sp, #4]
    b0b0:	f00f fee9 	bl	1ae86 <os_eventq_put>
    b0b4:	e7ff      	b.n	b0b6 <_ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE+0x48>
    //console::print("touch\n"); ////
}
    b0b6:	b006      	add	sp, #24
    b0b8:	bd80      	pop	{r7, pc}

0000b0ba <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E>:

/// Callback for the touch event that is triggered when a touch is detected
extern "C" fn touch_event_callback(_event: *mut os_event) {
    b0ba:	b580      	push	{r7, lr}
    b0bc:	b094      	sub	sp, #80	; 0x50
    b0be:	900e      	str	r0, [sp, #56]	; 0x38
    //  console::printhex(unsafe { os::os_time_get() } as u8); console::print(" touch\n");
    unsafe { 
        //  Fetch the touch data from the touch controller
        read_touchdata(&mut TOUCH_DATA)
    b0c0:	f240 1068 	movw	r0, #360	; 0x168
    b0c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b0c8:	f000 f894 	bl	b1f4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E>
    b0cc:	9006      	str	r0, [sp, #24]
    b0ce:	e7ff      	b.n	b0d0 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x16>
    b0d0:	f24e 7168 	movw	r1, #59240	; 0xe768
    b0d4:	f2c0 0101 	movt	r1, #1
    b0d8:	f24e 7378 	movw	r3, #59256	; 0xe778
    b0dc:	f2c0 0301 	movt	r3, #1
    b0e0:	220e      	movs	r2, #14
    b0e2:	9806      	ldr	r0, [sp, #24]
    b0e4:	f7fd fd09 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    b0e8:	e7ff      	b.n	b0ea <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x30>
            .expect("touchdata fail");
        //  Handle each touch data info
        for i in 0..TOUCH_DATA.count as usize {
    b0ea:	f240 1068 	movw	r0, #360	; 0x168
    b0ee:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b0f2:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
    b0f6:	2100      	movs	r1, #0
    b0f8:	9107      	str	r1, [sp, #28]
    b0fa:	9008      	str	r0, [sp, #32]
    b0fc:	9807      	ldr	r0, [sp, #28]
    b0fe:	9908      	ldr	r1, [sp, #32]
    b100:	f006 ff40 	bl	11f84 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    b104:	9005      	str	r0, [sp, #20]
    b106:	9104      	str	r1, [sp, #16]
    b108:	e7ff      	b.n	b10a <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x50>
    b10a:	9805      	ldr	r0, [sp, #20]
    b10c:	9009      	str	r0, [sp, #36]	; 0x24
    b10e:	9904      	ldr	r1, [sp, #16]
    b110:	910a      	str	r1, [sp, #40]	; 0x28
    b112:	e7ff      	b.n	b114 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x5a>
    b114:	a809      	add	r0, sp, #36	; 0x24
    b116:	f006 feaa 	bl	11e6e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    b11a:	910c      	str	r1, [sp, #48]	; 0x30
    b11c:	900b      	str	r0, [sp, #44]	; 0x2c
    b11e:	e7ff      	b.n	b120 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x66>
    b120:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b122:	2800      	cmp	r0, #0
    b124:	d001      	beq.n	b12a <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x70>
    b126:	e7ff      	b.n	b128 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x6e>
    b128:	e002      	b.n	b130 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x76>
            console::print(", x: "); console::printint(x as i32); 
            console::print(", y: "); console::printint(y as i32); console::print("\n");
        }
        console::flush();   
    } */
}
    b12a:	b014      	add	sp, #80	; 0x50
    b12c:	bd80      	pop	{r7, pc}
        for i in 0..TOUCH_DATA.count as usize {
    b12e:	defe      	udf	#254	; 0xfe
    b130:	980c      	ldr	r0, [sp, #48]	; 0x30
    b132:	900f      	str	r0, [sp, #60]	; 0x3c
    b134:	9010      	str	r0, [sp, #64]	; 0x40
    b136:	9011      	str	r0, [sp, #68]	; 0x44
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
    b138:	2809      	cmp	r0, #9
    b13a:	9003      	str	r0, [sp, #12]
    b13c:	d851      	bhi.n	b1e2 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x128>
    b13e:	e7ff      	b.n	b140 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x86>
    b140:	f240 1068 	movw	r0, #360	; 0x168
    b144:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b148:	9903      	ldr	r1, [sp, #12]
    b14a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b14e:	f830 0031 	ldrh.w	r0, [r0, r1, lsl #3]
    b152:	4603      	mov	r3, r0
    b154:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
    b158:	f8b2 c002 	ldrh.w	ip, [r2, #2]
    b15c:	46e6      	mov	lr, ip
    b15e:	f8ad c04c 	strh.w	ip, [sp, #76]	; 0x4c
    b162:	7912      	ldrb	r2, [r2, #4]
    b164:	4694      	mov	ip, r2
    b166:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
            if x == 0 && y == 0 { continue; }
    b16a:	2800      	cmp	r0, #0
    b16c:	9302      	str	r3, [sp, #8]
    b16e:	f8cd e004 	str.w	lr, [sp, #4]
    b172:	f8cd c000 	str.w	ip, [sp]
    b176:	d008      	beq.n	b18a <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xd0>
    b178:	e003      	b.n	b182 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xc8>
    b17a:	2001      	movs	r0, #1
    b17c:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
    b180:	e008      	b.n	b194 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xda>
    b182:	2000      	movs	r0, #0
    b184:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
    b188:	e004      	b.n	b194 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xda>
    b18a:	9801      	ldr	r0, [sp, #4]
    b18c:	0401      	lsls	r1, r0, #16
    b18e:	2900      	cmp	r1, #0
    b190:	d0f3      	beq.n	b17a <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xc0>
    b192:	e7f6      	b.n	b182 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xc8>
    b194:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
    b198:	07c0      	lsls	r0, r0, #31
    b19a:	2800      	cmp	r0, #0
    b19c:	d105      	bne.n	b1aa <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xf0>
    b19e:	e7ff      	b.n	b1a0 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xe6>
            if action != 0 && action != 2 { continue; }
    b1a0:	9800      	ldr	r0, [sp, #0]
    b1a2:	0601      	lsls	r1, r0, #24
    b1a4:	2900      	cmp	r1, #0
    b1a6:	d10a      	bne.n	b1be <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x104>
    b1a8:	e005      	b.n	b1b6 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xfc>
            if x == 0 && y == 0 { continue; }
    b1aa:	e7ff      	b.n	b1ac <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xf2>
    b1ac:	e7b2      	b.n	b114 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x5a>
    b1ae:	2001      	movs	r0, #1
            if action != 0 && action != 2 { continue; }
    b1b0:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    b1b4:	e008      	b.n	b1c8 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x10e>
    b1b6:	2000      	movs	r0, #0
    b1b8:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    b1bc:	e004      	b.n	b1c8 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x10e>
    b1be:	9800      	ldr	r0, [sp, #0]
    b1c0:	b2c1      	uxtb	r1, r0
    b1c2:	2902      	cmp	r1, #2
    b1c4:	d1f3      	bne.n	b1ae <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xf4>
    b1c6:	e7f6      	b.n	b1b6 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xfc>
    b1c8:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
    b1cc:	07c0      	lsls	r0, r0, #31
    b1ce:	2800      	cmp	r0, #0
    b1d0:	d105      	bne.n	b1de <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x124>
    b1d2:	e7ff      	b.n	b1d4 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x11a>
            super::handle_touch(x, y);
    b1d4:	9802      	ldr	r0, [sp, #8]
    b1d6:	9901      	ldr	r1, [sp, #4]
    b1d8:	f001 fcee 	bl	cbb8 <_ZN3app5chip812handle_touch17habca32c74e5cefadE>
    b1dc:	e000      	b.n	b1e0 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x126>
            if action != 0 && action != 2 { continue; }
    b1de:	e7e5      	b.n	b1ac <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xf2>
        for i in 0..TOUCH_DATA.count as usize {
    b1e0:	e798      	b.n	b114 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x5a>
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
    b1e2:	f24e 7088 	movw	r0, #59272	; 0xe788
    b1e6:	f2c0 0001 	movt	r0, #1
    b1ea:	220a      	movs	r2, #10
    b1ec:	9903      	ldr	r1, [sp, #12]
    b1ee:	f00c fbf7 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b1f2:	defe      	udf	#254	; 0xfe

0000b1f4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E>:
/// Touch data will be populated here
static mut TOUCH_DATA: TouchEventInfo = fill_zero!(TouchEventInfo);

/// Read touch controller data. This only works when the screen has been tapped and the touch controller wakes up.
/// Ported from https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L407-L466
fn read_touchdata(data: &mut TouchEventInfo) -> MynewtResult<()> {
    b1f4:	b580      	push	{r7, lr}
    b1f6:	b0de      	sub	sp, #376	; 0x178
    b1f8:	9057      	str	r0, [sp, #348]	; 0x15c
    read_register_range(           //  Read the range of I2C registers...
    b1fa:	4669      	mov	r1, sp
    b1fc:	223f      	movs	r2, #63	; 0x3f
    b1fe:	600a      	str	r2, [r1, #0]
    b200:	f240 13ba 	movw	r3, #442	; 0x1ba
    b204:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b208:	2115      	movs	r1, #21
    b20a:	f04f 0c00 	mov.w	ip, #0
    b20e:	9026      	str	r0, [sp, #152]	; 0x98
    b210:	4608      	mov	r0, r1
    b212:	4661      	mov	r1, ip
    b214:	f000 fb97 	bl	b946 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E>
    b218:	9025      	str	r0, [sp, #148]	; 0x94
    b21a:	e7ff      	b.n	b21c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x28>
    b21c:	f24e 7198 	movw	r1, #59288	; 0xe798
    b220:	f2c0 0101 	movt	r1, #1
    b224:	f24e 73ac 	movw	r3, #59308	; 0xe7ac
    b228:	f2c0 0301 	movt	r3, #1
    b22c:	2213      	movs	r2, #19
    b22e:	9825      	ldr	r0, [sp, #148]	; 0x94
    b230:	f7fd fc63 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    b234:	e7ff      	b.n	b236 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x42>
    b236:	f10d 00ee 	add.w	r0, sp, #238	; 0xee
    b23a:	2152      	movs	r1, #82	; 0x52
        TOUCH_CONTROLLER_ADDRESS,  //  From the touch controller
        0,                         //  Starting from register 0
        POINT_READ_BUF as u8,      //  Number of registers to read
        unsafe { &mut BUF }        //  Save the read data into `buf`
    ).expect("read touchdata fail");
    *data = fill_zero!(TouchEventInfo);
    b23c:	9024      	str	r0, [sp, #144]	; 0x90
    b23e:	9123      	str	r1, [sp, #140]	; 0x8c
    b240:	f012 ff88 	bl	1e154 <__aeabi_memclr>
    b244:	a827      	add	r0, sp, #156	; 0x9c
    b246:	9924      	ldr	r1, [sp, #144]	; 0x90
    b248:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    b24a:	f012 ff87 	bl	1e15c <__aeabi_memcpy>
    b24e:	e7ff      	b.n	b250 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5c>
    b250:	a927      	add	r1, sp, #156	; 0x9c
    b252:	2252      	movs	r2, #82	; 0x52
    b254:	9826      	ldr	r0, [sp, #152]	; 0x98
    b256:	f012 ff81 	bl	1e15c <__aeabi_memcpy>
    data.point_num = unsafe { BUF[FT_TOUCH_POINT_NUM] & 0x0F };
    b25a:	f240 11ba 	movw	r1, #442	; 0x1ba
    b25e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    b262:	7889      	ldrb	r1, [r1, #2]
    b264:	f001 010f 	and.w	r1, r1, #15
    b268:	9a26      	ldr	r2, [sp, #152]	; 0x98
    b26a:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
    b26e:	2100      	movs	r1, #0
    data.count     = 0;
    b270:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50

    //  Populate the first 5 touch points
    for i in 0..CFG_MAX_TOUCH_POINTS {
    b274:	9150      	str	r1, [sp, #320]	; 0x140
    b276:	2105      	movs	r1, #5
    b278:	9151      	str	r1, [sp, #324]	; 0x144
    b27a:	9950      	ldr	r1, [sp, #320]	; 0x140
    b27c:	9b51      	ldr	r3, [sp, #324]	; 0x144
    b27e:	9022      	str	r0, [sp, #136]	; 0x88
    b280:	4608      	mov	r0, r1
    b282:	4619      	mov	r1, r3
    b284:	f006 fe7e 	bl	11f84 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    b288:	9021      	str	r0, [sp, #132]	; 0x84
    b28a:	9120      	str	r1, [sp, #128]	; 0x80
    b28c:	e7ff      	b.n	b28e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x9a>
    b28e:	9821      	ldr	r0, [sp, #132]	; 0x84
    b290:	9052      	str	r0, [sp, #328]	; 0x148
    b292:	9920      	ldr	r1, [sp, #128]	; 0x80
    b294:	9153      	str	r1, [sp, #332]	; 0x14c
    b296:	e7ff      	b.n	b298 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xa4>
    b298:	a852      	add	r0, sp, #328	; 0x148
    b29a:	f006 fde8 	bl	11e6e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    b29e:	9155      	str	r1, [sp, #340]	; 0x154
    b2a0:	9054      	str	r0, [sp, #336]	; 0x150
    b2a2:	e7ff      	b.n	b2a4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xb0>
    b2a4:	9854      	ldr	r0, [sp, #336]	; 0x150
    b2a6:	2800      	cmp	r0, #0
    b2a8:	d001      	beq.n	b2ae <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xba>
    b2aa:	e7ff      	b.n	b2ac <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xb8>
    b2ac:	e001      	b.n	b2b2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xbe>
    b2ae:	e00d      	b.n	b2cc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xd8>
    b2b0:	defe      	udf	#254	; 0xfe
    b2b2:	9855      	ldr	r0, [sp, #340]	; 0x154
    b2b4:	9058      	str	r0, [sp, #352]	; 0x160
    b2b6:	9059      	str	r0, [sp, #356]	; 0x164
    b2b8:	905a      	str	r0, [sp, #360]	; 0x168
    b2ba:	2106      	movs	r1, #6
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    b2bc:	fba1 1200 	umull	r1, r2, r1, r0
    b2c0:	2a00      	cmp	r2, #0
    b2c2:	901f      	str	r0, [sp, #124]	; 0x7c
    b2c4:	911e      	str	r1, [sp, #120]	; 0x78
    b2c6:	f040 81c1 	bne.w	b64c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x458>
    b2ca:	e002      	b.n	b2d2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xde>
    b2cc:	2001      	movs	r0, #1
            && (data.point_num == 0) {
            break;
        }
    }
    Ok(())
}
    b2ce:	b05e      	add	sp, #376	; 0x178
    b2d0:	bd80      	pop	{r7, pc}
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    b2d2:	981e      	ldr	r0, [sp, #120]	; 0x78
    b2d4:	1d41      	adds	r1, r0, #5
    b2d6:	460a      	mov	r2, r1
    b2d8:	4281      	cmp	r1, r0
    b2da:	921d      	str	r2, [sp, #116]	; 0x74
    b2dc:	f0c0 81c2 	bcc.w	b664 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x470>
    b2e0:	e7ff      	b.n	b2e2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xee>
    b2e2:	981d      	ldr	r0, [sp, #116]	; 0x74
    b2e4:	283e      	cmp	r0, #62	; 0x3e
    b2e6:	f200 81c9 	bhi.w	b67c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x488>
    b2ea:	e7ff      	b.n	b2ec <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xf8>
    b2ec:	f240 10ba 	movw	r0, #442	; 0x1ba
    b2f0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b2f4:	991d      	ldr	r1, [sp, #116]	; 0x74
    b2f6:	5c40      	ldrb	r0, [r0, r1]
    b2f8:	0900      	lsrs	r0, r0, #4
    b2fa:	901c      	str	r0, [sp, #112]	; 0x70
    b2fc:	e7ff      	b.n	b2fe <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x10a>
    b2fe:	981c      	ldr	r0, [sp, #112]	; 0x70
    b300:	f88d 016f 	strb.w	r0, [sp, #367]	; 0x16f
    b304:	b2c1      	uxtb	r1, r0
        if pointid >= HYN_MAX_ID { break; }
    b306:	290e      	cmp	r1, #14
    b308:	d80b      	bhi.n	b322 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x12e>
    b30a:	e7ff      	b.n	b30c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x118>
        data.count += 1;
    b30c:	9826      	ldr	r0, [sp, #152]	; 0x98
    b30e:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
    b312:	3101      	adds	r1, #1
    b314:	b2ca      	uxtb	r2, r1
    b316:	460b      	mov	r3, r1
    b318:	428a      	cmp	r2, r1
    b31a:	931b      	str	r3, [sp, #108]	; 0x6c
    b31c:	f040 81b7 	bne.w	b68e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x49a>
    b320:	e001      	b.n	b326 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x132>
        if pointid >= HYN_MAX_ID { break; }
    b322:	e7ff      	b.n	b324 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x130>
    b324:	e7d2      	b.n	b2cc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xd8>
        data.count += 1;
    b326:	981b      	ldr	r0, [sp, #108]	; 0x6c
    b328:	9926      	ldr	r1, [sp, #152]	; 0x98
    b32a:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    b32e:	2206      	movs	r2, #6
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    b330:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    b332:	fba2 2c03 	umull	r2, ip, r2, r3
    b336:	f1bc 0f00 	cmp.w	ip, #0
    b33a:	921a      	str	r2, [sp, #104]	; 0x68
    b33c:	f040 81b3 	bne.w	b6a6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x4b2>
    b340:	e7ff      	b.n	b342 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x14e>
    b342:	981a      	ldr	r0, [sp, #104]	; 0x68
    b344:	1cc1      	adds	r1, r0, #3
    b346:	460a      	mov	r2, r1
    b348:	4281      	cmp	r1, r0
    b34a:	9219      	str	r2, [sp, #100]	; 0x64
    b34c:	f0c0 81b7 	bcc.w	b6be <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x4ca>
    b350:	e7ff      	b.n	b352 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x15e>
    b352:	9819      	ldr	r0, [sp, #100]	; 0x64
    b354:	283e      	cmp	r0, #62	; 0x3e
    b356:	f200 81be 	bhi.w	b6d6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x4e2>
    b35a:	e7ff      	b.n	b35c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x168>
    b35c:	f240 10ba 	movw	r0, #442	; 0x1ba
    b360:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b364:	9919      	ldr	r1, [sp, #100]	; 0x64
    b366:	5c40      	ldrb	r0, [r0, r1]
    b368:	f000 000f 	and.w	r0, r0, #15
    b36c:	4602      	mov	r2, r0
    b36e:	f8ad 0170 	strh.w	r0, [sp, #368]	; 0x170
    b372:	2006      	movs	r0, #6
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
    b374:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    b376:	fba0 0c03 	umull	r0, ip, r0, r3
    b37a:	f1bc 0f00 	cmp.w	ip, #0
    b37e:	9218      	str	r2, [sp, #96]	; 0x60
    b380:	9017      	str	r0, [sp, #92]	; 0x5c
    b382:	f040 81b1 	bne.w	b6e8 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x4f4>
    b386:	e7ff      	b.n	b388 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x194>
    b388:	9817      	ldr	r0, [sp, #92]	; 0x5c
    b38a:	1d01      	adds	r1, r0, #4
    b38c:	460a      	mov	r2, r1
    b38e:	4281      	cmp	r1, r0
    b390:	9216      	str	r2, [sp, #88]	; 0x58
    b392:	f0c0 81b5 	bcc.w	b700 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x50c>
    b396:	e7ff      	b.n	b398 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1a4>
    b398:	9816      	ldr	r0, [sp, #88]	; 0x58
    b39a:	283e      	cmp	r0, #62	; 0x3e
    b39c:	f200 81bc 	bhi.w	b718 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x524>
    b3a0:	e7ff      	b.n	b3a2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1ae>
    b3a2:	f240 10ba 	movw	r0, #442	; 0x1ba
    b3a6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b3aa:	9916      	ldr	r1, [sp, #88]	; 0x58
    b3ac:	5c40      	ldrb	r0, [r0, r1]
    b3ae:	4602      	mov	r2, r0
    b3b0:	f8ad 0172 	strh.w	r0, [sp, #370]	; 0x172
        data.touches[i].x  = (x_high << 8) | x_low;
    b3b4:	9818      	ldr	r0, [sp, #96]	; 0x60
    b3b6:	0203      	lsls	r3, r0, #8
    b3b8:	9215      	str	r2, [sp, #84]	; 0x54
    b3ba:	9314      	str	r3, [sp, #80]	; 0x50
    b3bc:	e7ff      	b.n	b3be <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1ca>
    b3be:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b3c0:	2809      	cmp	r0, #9
    b3c2:	f200 81b2 	bhi.w	b72a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x536>
    b3c6:	e7ff      	b.n	b3c8 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1d4>
    b3c8:	9814      	ldr	r0, [sp, #80]	; 0x50
    b3ca:	9915      	ldr	r1, [sp, #84]	; 0x54
    b3cc:	ea40 0201 	orr.w	r2, r0, r1
    b3d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
    b3d2:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
    b3d6:	f823 203c 	strh.w	r2, [r3, ip, lsl #3]
    b3da:	2206      	movs	r2, #6
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    b3dc:	fba2 2e0c 	umull	r2, lr, r2, ip
    b3e0:	f1be 0f00 	cmp.w	lr, #0
    b3e4:	9213      	str	r2, [sp, #76]	; 0x4c
    b3e6:	f040 81a9 	bne.w	b73c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x548>
    b3ea:	e7ff      	b.n	b3ec <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1f8>
    b3ec:	9813      	ldr	r0, [sp, #76]	; 0x4c
    b3ee:	1d41      	adds	r1, r0, #5
    b3f0:	460a      	mov	r2, r1
    b3f2:	4281      	cmp	r1, r0
    b3f4:	9212      	str	r2, [sp, #72]	; 0x48
    b3f6:	f0c0 81ad 	bcc.w	b754 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x560>
    b3fa:	e7ff      	b.n	b3fc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x208>
    b3fc:	9812      	ldr	r0, [sp, #72]	; 0x48
    b3fe:	283e      	cmp	r0, #62	; 0x3e
    b400:	f200 81b4 	bhi.w	b76c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x578>
    b404:	e7ff      	b.n	b406 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x212>
    b406:	f240 10ba 	movw	r0, #442	; 0x1ba
    b40a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b40e:	9912      	ldr	r1, [sp, #72]	; 0x48
    b410:	5c40      	ldrb	r0, [r0, r1]
    b412:	f000 000f 	and.w	r0, r0, #15
    b416:	4602      	mov	r2, r0
    b418:	f8ad 0174 	strh.w	r0, [sp, #372]	; 0x174
    b41c:	2006      	movs	r0, #6
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
    b41e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    b420:	fba0 0c03 	umull	r0, ip, r0, r3
    b424:	f1bc 0f00 	cmp.w	ip, #0
    b428:	9211      	str	r2, [sp, #68]	; 0x44
    b42a:	9010      	str	r0, [sp, #64]	; 0x40
    b42c:	f040 81a7 	bne.w	b77e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x58a>
    b430:	e7ff      	b.n	b432 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x23e>
    b432:	9810      	ldr	r0, [sp, #64]	; 0x40
    b434:	1d81      	adds	r1, r0, #6
    b436:	460a      	mov	r2, r1
    b438:	4281      	cmp	r1, r0
    b43a:	920f      	str	r2, [sp, #60]	; 0x3c
    b43c:	f0c0 81ab 	bcc.w	b796 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5a2>
    b440:	e7ff      	b.n	b442 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x24e>
    b442:	980f      	ldr	r0, [sp, #60]	; 0x3c
    b444:	283e      	cmp	r0, #62	; 0x3e
    b446:	f200 81b2 	bhi.w	b7ae <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5ba>
    b44a:	e7ff      	b.n	b44c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x258>
    b44c:	f240 10ba 	movw	r0, #442	; 0x1ba
    b450:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b454:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b456:	5c40      	ldrb	r0, [r0, r1]
    b458:	4602      	mov	r2, r0
    b45a:	f8ad 0176 	strh.w	r0, [sp, #374]	; 0x176
        data.touches[i].y  = (y_high << 8) | y_low;
    b45e:	9811      	ldr	r0, [sp, #68]	; 0x44
    b460:	0203      	lsls	r3, r0, #8
    b462:	920e      	str	r2, [sp, #56]	; 0x38
    b464:	930d      	str	r3, [sp, #52]	; 0x34
    b466:	e7ff      	b.n	b468 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x274>
    b468:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b46a:	2809      	cmp	r0, #9
    b46c:	f200 81a8 	bhi.w	b7c0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5cc>
    b470:	e7ff      	b.n	b472 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x27e>
    b472:	9826      	ldr	r0, [sp, #152]	; 0x98
    b474:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b476:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b47a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b47c:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    b480:	ea43 0e0c 	orr.w	lr, r3, ip
    b484:	f8a2 e002 	strh.w	lr, [r2, #2]
    b488:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
    b48a:	fba2 2e01 	umull	r2, lr, r2, r1
    b48e:	f1be 0f00 	cmp.w	lr, #0
    b492:	920c      	str	r2, [sp, #48]	; 0x30
    b494:	f040 819d 	bne.w	b7d2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5de>
    b498:	e7ff      	b.n	b49a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2a6>
    b49a:	980c      	ldr	r0, [sp, #48]	; 0x30
    b49c:	1cc1      	adds	r1, r0, #3
    b49e:	460a      	mov	r2, r1
    b4a0:	4281      	cmp	r1, r0
    b4a2:	920b      	str	r2, [sp, #44]	; 0x2c
    b4a4:	f0c0 81a1 	bcc.w	b7ea <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5f6>
    b4a8:	e7ff      	b.n	b4aa <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2b6>
    b4aa:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b4ac:	283e      	cmp	r0, #62	; 0x3e
    b4ae:	f200 81a8 	bhi.w	b802 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x60e>
    b4b2:	e7ff      	b.n	b4b4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2c0>
    b4b4:	f240 10ba 	movw	r0, #442	; 0x1ba
    b4b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b4bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b4be:	5c40      	ldrb	r0, [r0, r1]
    b4c0:	0980      	lsrs	r0, r0, #6
    b4c2:	900a      	str	r0, [sp, #40]	; 0x28
    b4c4:	e7ff      	b.n	b4c6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2d2>
        data.touches[i].action =
    b4c6:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b4c8:	2809      	cmp	r0, #9
    b4ca:	f200 81a3 	bhi.w	b814 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x620>
    b4ce:	e7ff      	b.n	b4d0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2dc>
    b4d0:	9826      	ldr	r0, [sp, #152]	; 0x98
    b4d2:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b4d4:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b4d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b4da:	7113      	strb	r3, [r2, #4]
    b4dc:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
    b4de:	fba2 2c01 	umull	r2, ip, r2, r1
    b4e2:	f1bc 0f00 	cmp.w	ip, #0
    b4e6:	9209      	str	r2, [sp, #36]	; 0x24
    b4e8:	f040 819d 	bne.w	b826 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x632>
    b4ec:	e7ff      	b.n	b4ee <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2fa>
    b4ee:	9809      	ldr	r0, [sp, #36]	; 0x24
    b4f0:	1d41      	adds	r1, r0, #5
    b4f2:	460a      	mov	r2, r1
    b4f4:	4281      	cmp	r1, r0
    b4f6:	9208      	str	r2, [sp, #32]
    b4f8:	f0c0 81a1 	bcc.w	b83e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x64a>
    b4fc:	e7ff      	b.n	b4fe <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x30a>
    b4fe:	9808      	ldr	r0, [sp, #32]
    b500:	283e      	cmp	r0, #62	; 0x3e
    b502:	f200 81a8 	bhi.w	b856 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x662>
    b506:	e7ff      	b.n	b508 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x314>
    b508:	f240 10ba 	movw	r0, #442	; 0x1ba
    b50c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b510:	9908      	ldr	r1, [sp, #32]
    b512:	5c40      	ldrb	r0, [r0, r1]
    b514:	0900      	lsrs	r0, r0, #4
    b516:	9007      	str	r0, [sp, #28]
    b518:	e7ff      	b.n	b51a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x326>
        data.touches[i].finger =
    b51a:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b51c:	2809      	cmp	r0, #9
    b51e:	f200 81a3 	bhi.w	b868 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x674>
    b522:	e7ff      	b.n	b524 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x330>
    b524:	9826      	ldr	r0, [sp, #152]	; 0x98
    b526:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b528:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b52c:	9b07      	ldr	r3, [sp, #28]
    b52e:	7153      	strb	r3, [r2, #5]
    b530:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
    b532:	fba2 2c01 	umull	r2, ip, r2, r1
    b536:	f1bc 0f00 	cmp.w	ip, #0
    b53a:	9206      	str	r2, [sp, #24]
    b53c:	f040 819d 	bne.w	b87a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x686>
    b540:	e7ff      	b.n	b542 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x34e>
    b542:	9806      	ldr	r0, [sp, #24]
    b544:	1dc1      	adds	r1, r0, #7
    b546:	460a      	mov	r2, r1
    b548:	4281      	cmp	r1, r0
    b54a:	9205      	str	r2, [sp, #20]
    b54c:	f0c0 81a1 	bcc.w	b892 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x69e>
    b550:	e7ff      	b.n	b552 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x35e>
    b552:	9805      	ldr	r0, [sp, #20]
    b554:	283e      	cmp	r0, #62	; 0x3e
    b556:	f200 81a8 	bhi.w	b8aa <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x6b6>
    b55a:	e7ff      	b.n	b55c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x368>
    b55c:	f240 10ba 	movw	r0, #442	; 0x1ba
    b560:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b564:	9905      	ldr	r1, [sp, #20]
    b566:	5c40      	ldrb	r0, [r0, r1]
        data.touches[i].pressure =
    b568:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    b56a:	2a09      	cmp	r2, #9
    b56c:	9004      	str	r0, [sp, #16]
    b56e:	f200 81a5 	bhi.w	b8bc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x6c8>
    b572:	e7ff      	b.n	b574 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x380>
    b574:	9826      	ldr	r0, [sp, #152]	; 0x98
    b576:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b578:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b57c:	9b04      	ldr	r3, [sp, #16]
    b57e:	7193      	strb	r3, [r2, #6]
    b580:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
    b582:	fba2 2c01 	umull	r2, ip, r2, r1
    b586:	f1bc 0f00 	cmp.w	ip, #0
    b58a:	9203      	str	r2, [sp, #12]
    b58c:	f040 819f 	bne.w	b8ce <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x6da>
    b590:	e7ff      	b.n	b592 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x39e>
    b592:	9803      	ldr	r0, [sp, #12]
    b594:	f100 0108 	add.w	r1, r0, #8
    b598:	460a      	mov	r2, r1
    b59a:	4281      	cmp	r1, r0
    b59c:	9202      	str	r2, [sp, #8]
    b59e:	f0c0 81a2 	bcc.w	b8e6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x6f2>
    b5a2:	e7ff      	b.n	b5a4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3b0>
    b5a4:	9802      	ldr	r0, [sp, #8]
    b5a6:	283e      	cmp	r0, #62	; 0x3e
    b5a8:	f200 81a9 	bhi.w	b8fe <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x70a>
    b5ac:	e7ff      	b.n	b5ae <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3ba>
    b5ae:	f240 10ba 	movw	r0, #442	; 0x1ba
    b5b2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b5b6:	9902      	ldr	r1, [sp, #8]
    b5b8:	5c40      	ldrb	r0, [r0, r1]
    b5ba:	0900      	lsrs	r0, r0, #4
    b5bc:	9001      	str	r0, [sp, #4]
    b5be:	e7ff      	b.n	b5c0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3cc>
        data.touches[i].area =
    b5c0:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b5c2:	2809      	cmp	r0, #9
    b5c4:	f200 81a4 	bhi.w	b910 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x71c>
    b5c8:	e7ff      	b.n	b5ca <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3d6>
    b5ca:	9826      	ldr	r0, [sp, #152]	; 0x98
    b5cc:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b5ce:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b5d2:	9b01      	ldr	r3, [sp, #4]
    b5d4:	71d3      	strb	r3, [r2, #7]
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    b5d6:	290a      	cmp	r1, #10
    b5d8:	d326      	bcc.n	b628 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x434>
    b5da:	e1a2      	b.n	b922 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x72e>
    b5dc:	2001      	movs	r0, #1
    b5de:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
    b5e2:	e009      	b.n	b5f8 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x404>
    b5e4:	2000      	movs	r0, #0
    b5e6:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
    b5ea:	e005      	b.n	b5f8 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x404>
            && (data.point_num == 0) {
    b5ec:	9826      	ldr	r0, [sp, #152]	; 0x98
    b5ee:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    b5f2:	2900      	cmp	r1, #0
    b5f4:	d0f2      	beq.n	b5dc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3e8>
    b5f6:	e7f5      	b.n	b5e4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3f0>
    b5f8:	f89d 015a 	ldrb.w	r0, [sp, #346]	; 0x15a
    b5fc:	07c0      	lsls	r0, r0, #31
    b5fe:	2800      	cmp	r0, #0
    b600:	d123      	bne.n	b64a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x456>
    b602:	e021      	b.n	b648 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x454>
    b604:	2001      	movs	r0, #1
    b606:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
    b60a:	e007      	b.n	b61c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x428>
    b60c:	2000      	movs	r0, #0
    b60e:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
    b612:	e003      	b.n	b61c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x428>
    b614:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b616:	280a      	cmp	r0, #10
    b618:	d30e      	bcc.n	b638 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x444>
    b61a:	e18b      	b.n	b934 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x740>
    b61c:	f89d 015b 	ldrb.w	r0, [sp, #347]	; 0x15b
    b620:	07c0      	lsls	r0, r0, #31
    b622:	2800      	cmp	r0, #0
    b624:	d1e2      	bne.n	b5ec <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3f8>
    b626:	e7dd      	b.n	b5e4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3f0>
    b628:	9826      	ldr	r0, [sp, #152]	; 0x98
    b62a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b62c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b630:	7912      	ldrb	r2, [r2, #4]
    b632:	2a00      	cmp	r2, #0
    b634:	d0e6      	beq.n	b604 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x410>
    b636:	e7ed      	b.n	b614 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x420>
    b638:	9826      	ldr	r0, [sp, #152]	; 0x98
    b63a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b63c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b640:	7912      	ldrb	r2, [r2, #4]
    b642:	2a02      	cmp	r2, #2
    b644:	d0de      	beq.n	b604 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x410>
    b646:	e7e1      	b.n	b60c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x418>
    for i in 0..CFG_MAX_TOUCH_POINTS {
    b648:	e626      	b.n	b298 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xa4>
            break;
    b64a:	e66b      	b.n	b324 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x130>
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    b64c:	f24e 70d0 	movw	r0, #59344	; 0xe7d0
    b650:	f2c0 0001 	movt	r0, #1
    b654:	f24e 72bc 	movw	r2, #59324	; 0xe7bc
    b658:	f2c0 0201 	movt	r2, #1
    b65c:	2121      	movs	r1, #33	; 0x21
    b65e:	f00c f9a9 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b662:	defe      	udf	#254	; 0xfe
    b664:	f64e 0010 	movw	r0, #59408	; 0xe810
    b668:	f2c0 0001 	movt	r0, #1
    b66c:	f24e 72f4 	movw	r2, #59380	; 0xe7f4
    b670:	f2c0 0201 	movt	r2, #1
    b674:	211c      	movs	r1, #28
    b676:	f00c f99d 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b67a:	defe      	udf	#254	; 0xfe
    b67c:	f64e 002c 	movw	r0, #59436	; 0xe82c
    b680:	f2c0 0001 	movt	r0, #1
    b684:	223f      	movs	r2, #63	; 0x3f
    b686:	991d      	ldr	r1, [sp, #116]	; 0x74
    b688:	f00c f9aa 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b68c:	defe      	udf	#254	; 0xfe
        data.count += 1;
    b68e:	f64e 0010 	movw	r0, #59408	; 0xe810
    b692:	f2c0 0001 	movt	r0, #1
    b696:	f64e 023c 	movw	r2, #59452	; 0xe83c
    b69a:	f2c0 0201 	movt	r2, #1
    b69e:	211c      	movs	r1, #28
    b6a0:	f00c f988 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b6a4:	defe      	udf	#254	; 0xfe
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    b6a6:	f24e 70d0 	movw	r0, #59344	; 0xe7d0
    b6aa:	f2c0 0001 	movt	r0, #1
    b6ae:	f64e 024c 	movw	r2, #59468	; 0xe84c
    b6b2:	f2c0 0201 	movt	r2, #1
    b6b6:	2121      	movs	r1, #33	; 0x21
    b6b8:	f00c f97c 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b6bc:	defe      	udf	#254	; 0xfe
    b6be:	f64e 0010 	movw	r0, #59408	; 0xe810
    b6c2:	f2c0 0001 	movt	r0, #1
    b6c6:	f64e 025c 	movw	r2, #59484	; 0xe85c
    b6ca:	f2c0 0201 	movt	r2, #1
    b6ce:	211c      	movs	r1, #28
    b6d0:	f00c f970 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b6d4:	defe      	udf	#254	; 0xfe
    b6d6:	f64e 006c 	movw	r0, #59500	; 0xe86c
    b6da:	f2c0 0001 	movt	r0, #1
    b6de:	223f      	movs	r2, #63	; 0x3f
    b6e0:	9919      	ldr	r1, [sp, #100]	; 0x64
    b6e2:	f00c f97d 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b6e6:	defe      	udf	#254	; 0xfe
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
    b6e8:	f24e 70d0 	movw	r0, #59344	; 0xe7d0
    b6ec:	f2c0 0001 	movt	r0, #1
    b6f0:	f64e 027c 	movw	r2, #59516	; 0xe87c
    b6f4:	f2c0 0201 	movt	r2, #1
    b6f8:	2121      	movs	r1, #33	; 0x21
    b6fa:	f00c f95b 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b6fe:	defe      	udf	#254	; 0xfe
    b700:	f64e 0010 	movw	r0, #59408	; 0xe810
    b704:	f2c0 0001 	movt	r0, #1
    b708:	f64e 028c 	movw	r2, #59532	; 0xe88c
    b70c:	f2c0 0201 	movt	r2, #1
    b710:	211c      	movs	r1, #28
    b712:	f00c f94f 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b716:	defe      	udf	#254	; 0xfe
    b718:	f64e 009c 	movw	r0, #59548	; 0xe89c
    b71c:	f2c0 0001 	movt	r0, #1
    b720:	223f      	movs	r2, #63	; 0x3f
    b722:	9916      	ldr	r1, [sp, #88]	; 0x58
    b724:	f00c f95c 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b728:	defe      	udf	#254	; 0xfe
        data.touches[i].x  = (x_high << 8) | x_low;
    b72a:	f64e 00ac 	movw	r0, #59564	; 0xe8ac
    b72e:	f2c0 0001 	movt	r0, #1
    b732:	220a      	movs	r2, #10
    b734:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b736:	f00c f953 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b73a:	defe      	udf	#254	; 0xfe
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    b73c:	f24e 70d0 	movw	r0, #59344	; 0xe7d0
    b740:	f2c0 0001 	movt	r0, #1
    b744:	f64e 02bc 	movw	r2, #59580	; 0xe8bc
    b748:	f2c0 0201 	movt	r2, #1
    b74c:	2121      	movs	r1, #33	; 0x21
    b74e:	f00c f931 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b752:	defe      	udf	#254	; 0xfe
    b754:	f64e 0010 	movw	r0, #59408	; 0xe810
    b758:	f2c0 0001 	movt	r0, #1
    b75c:	f64e 02cc 	movw	r2, #59596	; 0xe8cc
    b760:	f2c0 0201 	movt	r2, #1
    b764:	211c      	movs	r1, #28
    b766:	f00c f925 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b76a:	defe      	udf	#254	; 0xfe
    b76c:	f64e 00dc 	movw	r0, #59612	; 0xe8dc
    b770:	f2c0 0001 	movt	r0, #1
    b774:	223f      	movs	r2, #63	; 0x3f
    b776:	9912      	ldr	r1, [sp, #72]	; 0x48
    b778:	f00c f932 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b77c:	defe      	udf	#254	; 0xfe
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
    b77e:	f24e 70d0 	movw	r0, #59344	; 0xe7d0
    b782:	f2c0 0001 	movt	r0, #1
    b786:	f64e 02ec 	movw	r2, #59628	; 0xe8ec
    b78a:	f2c0 0201 	movt	r2, #1
    b78e:	2121      	movs	r1, #33	; 0x21
    b790:	f00c f910 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b794:	defe      	udf	#254	; 0xfe
    b796:	f64e 0010 	movw	r0, #59408	; 0xe810
    b79a:	f2c0 0001 	movt	r0, #1
    b79e:	f64e 02fc 	movw	r2, #59644	; 0xe8fc
    b7a2:	f2c0 0201 	movt	r2, #1
    b7a6:	211c      	movs	r1, #28
    b7a8:	f00c f904 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b7ac:	defe      	udf	#254	; 0xfe
    b7ae:	f64e 100c 	movw	r0, #59660	; 0xe90c
    b7b2:	f2c0 0001 	movt	r0, #1
    b7b6:	223f      	movs	r2, #63	; 0x3f
    b7b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b7ba:	f00c f911 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b7be:	defe      	udf	#254	; 0xfe
        data.touches[i].y  = (y_high << 8) | y_low;
    b7c0:	f64e 101c 	movw	r0, #59676	; 0xe91c
    b7c4:	f2c0 0001 	movt	r0, #1
    b7c8:	220a      	movs	r2, #10
    b7ca:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b7cc:	f00c f908 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b7d0:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
    b7d2:	f24e 70d0 	movw	r0, #59344	; 0xe7d0
    b7d6:	f2c0 0001 	movt	r0, #1
    b7da:	f64e 122c 	movw	r2, #59692	; 0xe92c
    b7de:	f2c0 0201 	movt	r2, #1
    b7e2:	2121      	movs	r1, #33	; 0x21
    b7e4:	f00c f8e6 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b7e8:	defe      	udf	#254	; 0xfe
    b7ea:	f64e 0010 	movw	r0, #59408	; 0xe810
    b7ee:	f2c0 0001 	movt	r0, #1
    b7f2:	f64e 123c 	movw	r2, #59708	; 0xe93c
    b7f6:	f2c0 0201 	movt	r2, #1
    b7fa:	211c      	movs	r1, #28
    b7fc:	f00c f8da 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b800:	defe      	udf	#254	; 0xfe
    b802:	f64e 104c 	movw	r0, #59724	; 0xe94c
    b806:	f2c0 0001 	movt	r0, #1
    b80a:	223f      	movs	r2, #63	; 0x3f
    b80c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b80e:	f00c f8e7 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b812:	defe      	udf	#254	; 0xfe
        data.touches[i].action =
    b814:	f64e 105c 	movw	r0, #59740	; 0xe95c
    b818:	f2c0 0001 	movt	r0, #1
    b81c:	220a      	movs	r2, #10
    b81e:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b820:	f00c f8de 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b824:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
    b826:	f24e 70d0 	movw	r0, #59344	; 0xe7d0
    b82a:	f2c0 0001 	movt	r0, #1
    b82e:	f64e 126c 	movw	r2, #59756	; 0xe96c
    b832:	f2c0 0201 	movt	r2, #1
    b836:	2121      	movs	r1, #33	; 0x21
    b838:	f00c f8bc 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b83c:	defe      	udf	#254	; 0xfe
    b83e:	f64e 0010 	movw	r0, #59408	; 0xe810
    b842:	f2c0 0001 	movt	r0, #1
    b846:	f64e 127c 	movw	r2, #59772	; 0xe97c
    b84a:	f2c0 0201 	movt	r2, #1
    b84e:	211c      	movs	r1, #28
    b850:	f00c f8b0 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b854:	defe      	udf	#254	; 0xfe
    b856:	f64e 108c 	movw	r0, #59788	; 0xe98c
    b85a:	f2c0 0001 	movt	r0, #1
    b85e:	223f      	movs	r2, #63	; 0x3f
    b860:	9908      	ldr	r1, [sp, #32]
    b862:	f00c f8bd 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b866:	defe      	udf	#254	; 0xfe
        data.touches[i].finger =
    b868:	f64e 109c 	movw	r0, #59804	; 0xe99c
    b86c:	f2c0 0001 	movt	r0, #1
    b870:	220a      	movs	r2, #10
    b872:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b874:	f00c f8b4 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b878:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
    b87a:	f24e 70d0 	movw	r0, #59344	; 0xe7d0
    b87e:	f2c0 0001 	movt	r0, #1
    b882:	f64e 12ac 	movw	r2, #59820	; 0xe9ac
    b886:	f2c0 0201 	movt	r2, #1
    b88a:	2121      	movs	r1, #33	; 0x21
    b88c:	f00c f892 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b890:	defe      	udf	#254	; 0xfe
    b892:	f64e 0010 	movw	r0, #59408	; 0xe810
    b896:	f2c0 0001 	movt	r0, #1
    b89a:	f64e 12bc 	movw	r2, #59836	; 0xe9bc
    b89e:	f2c0 0201 	movt	r2, #1
    b8a2:	211c      	movs	r1, #28
    b8a4:	f00c f886 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b8a8:	defe      	udf	#254	; 0xfe
    b8aa:	f64e 10cc 	movw	r0, #59852	; 0xe9cc
    b8ae:	f2c0 0001 	movt	r0, #1
    b8b2:	223f      	movs	r2, #63	; 0x3f
    b8b4:	9905      	ldr	r1, [sp, #20]
    b8b6:	f00c f893 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b8ba:	defe      	udf	#254	; 0xfe
        data.touches[i].pressure =
    b8bc:	f64e 10dc 	movw	r0, #59868	; 0xe9dc
    b8c0:	f2c0 0001 	movt	r0, #1
    b8c4:	220a      	movs	r2, #10
    b8c6:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b8c8:	f00c f88a 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b8cc:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
    b8ce:	f24e 70d0 	movw	r0, #59344	; 0xe7d0
    b8d2:	f2c0 0001 	movt	r0, #1
    b8d6:	f64e 12ec 	movw	r2, #59884	; 0xe9ec
    b8da:	f2c0 0201 	movt	r2, #1
    b8de:	2121      	movs	r1, #33	; 0x21
    b8e0:	f00c f868 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b8e4:	defe      	udf	#254	; 0xfe
    b8e6:	f64e 0010 	movw	r0, #59408	; 0xe810
    b8ea:	f2c0 0001 	movt	r0, #1
    b8ee:	f64e 12fc 	movw	r2, #59900	; 0xe9fc
    b8f2:	f2c0 0201 	movt	r2, #1
    b8f6:	211c      	movs	r1, #28
    b8f8:	f00c f85c 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b8fc:	defe      	udf	#254	; 0xfe
    b8fe:	f64e 200c 	movw	r0, #59916	; 0xea0c
    b902:	f2c0 0001 	movt	r0, #1
    b906:	223f      	movs	r2, #63	; 0x3f
    b908:	9902      	ldr	r1, [sp, #8]
    b90a:	f00c f869 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b90e:	defe      	udf	#254	; 0xfe
        data.touches[i].area =
    b910:	f64e 201c 	movw	r0, #59932	; 0xea1c
    b914:	f2c0 0001 	movt	r0, #1
    b918:	220a      	movs	r2, #10
    b91a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b91c:	f00c f860 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b920:	defe      	udf	#254	; 0xfe
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    b922:	f64e 202c 	movw	r0, #59948	; 0xea2c
    b926:	f2c0 0001 	movt	r0, #1
    b92a:	220a      	movs	r2, #10
    b92c:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b92e:	f00c f857 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b932:	defe      	udf	#254	; 0xfe
    b934:	f64e 203c 	movw	r0, #59964	; 0xea3c
    b938:	f2c0 0001 	movt	r0, #1
    b93c:	220a      	movs	r2, #10
    b93e:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b940:	f00c f84e 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b944:	defe      	udf	#254	; 0xfe

0000b946 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E>:

/// Event that will be forwarded to the Event Queue when a touch interrupt is triggered
static mut TOUCH_EVENT: os_event = fill_zero!(os_event);  //  Init all fields to 0 or NULL

/// Read a range of I2C registers from the I2C address `addr` (7-bit address), starting at `start_register` for count `num_registers`. Save into `buffer`.
fn read_register_range(addr: u8, start_register: u8, num_registers: u8, buffer: &mut[u8]) -> MynewtResult<()> {
    b946:	b5b0      	push	{r4, r5, r7, lr}
    b948:	b094      	sub	sp, #80	; 0x50
    b94a:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
    b94e:	4696      	mov	lr, r2
    b950:	460c      	mov	r4, r1
    b952:	4605      	mov	r5, r0
    b954:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
    b958:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
    b95c:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
    b960:	9310      	str	r3, [sp, #64]	; 0x40
    b962:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
    b966:	4618      	mov	r0, r3
    b968:	4661      	mov	r1, ip
    b96a:	930d      	str	r3, [sp, #52]	; 0x34
    b96c:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    b970:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    b974:	940a      	str	r4, [sp, #40]	; 0x28
    b976:	9509      	str	r5, [sp, #36]	; 0x24
    b978:	f006 fadd 	bl	11f36 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    b97c:	9008      	str	r0, [sp, #32]
    b97e:	e7ff      	b.n	b980 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x3a>
    b980:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b982:	b2c1      	uxtb	r1, r0
    b984:	9a08      	ldr	r2, [sp, #32]
    b986:	428a      	cmp	r2, r1
    b988:	d30d      	bcc.n	b9a6 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x60>
    b98a:	e7ff      	b.n	b98c <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x46>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    b98c:	980a      	ldr	r0, [sp, #40]	; 0x28
    b98e:	b2c1      	uxtb	r1, r0
    b990:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b992:	fa51 f182 	uxtab	r1, r1, r2
    b996:	b2cb      	uxtb	r3, r1
    b998:	468c      	mov	ip, r1
    b99a:	428b      	cmp	r3, r1
    b99c:	f8cd c01c 	str.w	ip, [sp, #28]
    b9a0:	f040 8092 	bne.w	bac8 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x182>
    b9a4:	e00b      	b.n	b9be <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x78>
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
    b9a6:	f64e 204c 	movw	r0, #59980	; 0xea4c
    b9aa:	f2c0 0001 	movt	r0, #1
    b9ae:	f64e 2254 	movw	r2, #59988	; 0xea54
    b9b2:	f2c0 0201 	movt	r2, #1
    b9b6:	2107      	movs	r1, #7
    b9b8:	f00b fffc 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b9bc:	defe      	udf	#254	; 0xfe
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    b9be:	9807      	ldr	r0, [sp, #28]
    b9c0:	b241      	sxtb	r1, r0
    b9c2:	2900      	cmp	r1, #0
    b9c4:	d411      	bmi.n	b9ea <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0xa4>
    b9c6:	e7ff      	b.n	b9c8 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x82>
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Write Mode (1 bit, value 0)...
    //    Followed by starting Register Number (8 bits)
    unsafe { 
        I2C_BUFFER[0] = start_register;  //  I2C Packet buffer contains starting Register Number (1 byte)
    b9c8:	f240 2014 	movw	r0, #532	; 0x214
    b9cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b9d0:	990a      	ldr	r1, [sp, #40]	; 0x28
    b9d2:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;         //  I2C Packet address (7 bits)
    b9d4:	f240 220c 	movw	r2, #524	; 0x20c
    b9d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b9dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b9de:	7013      	strb	r3, [r2, #0]
    b9e0:	2101      	movs	r1, #1
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
    b9e2:	f006 faa8 	bl	11f36 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    b9e6:	9006      	str	r0, [sp, #24]
    b9e8:	e00b      	b.n	ba02 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0xbc>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    b9ea:	f24e 7050 	movw	r0, #59216	; 0xe750
    b9ee:	f2c0 0001 	movt	r0, #1
    b9f2:	f64e 2274 	movw	r2, #60020	; 0xea74
    b9f6:	f2c0 0201 	movt	r2, #1
    b9fa:	2108      	movs	r1, #8
    b9fc:	f00b ffda 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ba00:	defe      	udf	#254	; 0xfe
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
    ba02:	f240 200c 	movw	r0, #524	; 0x20c
    ba06:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ba0a:	9906      	ldr	r1, [sp, #24]
    ba0c:	8041      	strh	r1, [r0, #2]
        I2C_DATA.buffer = I2C_BUFFER.as_mut_ptr();  //  I2C Packet data points to packet buffer
    ba0e:	f240 2014 	movw	r0, #532	; 0x214
    ba12:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ba16:	2101      	movs	r1, #1
    ba18:	f006 fa76 	bl	11f08 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    ba1c:	9005      	str	r0, [sp, #20]
    ba1e:	e7ff      	b.n	ba20 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0xda>
    ba20:	f240 200c 	movw	r0, #524	; 0x20c
    ba24:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ba28:	9905      	ldr	r1, [sp, #20]
    ba2a:	6041      	str	r1, [r0, #4]
    ba2c:	2201      	movs	r2, #1
    ba2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    ba32:	f04f 0c00 	mov.w	ip, #0
    };
    let _rc1 = unsafe { hal::hal_i2c_master_write(1, &mut I2C_DATA, 1000, 0) };  //  No stop yet, must continue even if we hit an error
    ba36:	9004      	str	r0, [sp, #16]
    ba38:	4610      	mov	r0, r2
    ba3a:	9904      	ldr	r1, [sp, #16]
    ba3c:	461a      	mov	r2, r3
    ba3e:	4663      	mov	r3, ip
    ba40:	f00e faa6 	bl	19f90 <hal_i2c_master_write>
    ba44:	9012      	str	r0, [sp, #72]	; 0x48
    ba46:	e7ff      	b.n	ba48 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x102>
    //  Step 3: Prepare to receive the stream of I2C Device Register values...
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Read Mode (1 bit, value 1)
    unsafe { 
        I2C_BUFFER[0] = 0x00;     //  I2C Packet buffer should be empty (provided by caller)
    ba48:	f240 2014 	movw	r0, #532	; 0x214
    ba4c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ba50:	2100      	movs	r1, #0
    ba52:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;  //  I2C Packet address (7 bits)
    ba54:	f240 200c 	movw	r0, #524	; 0x20c
    ba58:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ba5c:	9909      	ldr	r1, [sp, #36]	; 0x24
    ba5e:	7001      	strb	r1, [r0, #0]
        I2C_DATA.len = num_registers as u16;    //  I2C Packet data size is number of Registers to read
    ba60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ba62:	b2d3      	uxtb	r3, r2
    ba64:	8043      	strh	r3, [r0, #2]
        I2C_DATA.buffer = buffer.as_mut_ptr();  //  I2C Packet data points to packet buffer
    ba66:	980d      	ldr	r0, [sp, #52]	; 0x34
    ba68:	990c      	ldr	r1, [sp, #48]	; 0x30
    ba6a:	f006 fa4d 	bl	11f08 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    ba6e:	9003      	str	r0, [sp, #12]
    ba70:	e7ff      	b.n	ba72 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x12c>
    ba72:	f240 200c 	movw	r0, #524	; 0x20c
    ba76:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ba7a:	9903      	ldr	r1, [sp, #12]
    ba7c:	6041      	str	r1, [r0, #4]
    ba7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ba82:	2301      	movs	r3, #1
    };
    //  Step 4: Receive the requested number of Register values from I2C Device (1 byte per register)
    //  Step 5: Send the Stop Condition (Low to High SDA Transition)
    let rc2 = unsafe { hal::hal_i2c_master_read(1, &mut I2C_DATA, 1000, 1) };
    ba84:	9002      	str	r0, [sp, #8]
    ba86:	4618      	mov	r0, r3
    ba88:	9902      	ldr	r1, [sp, #8]
    ba8a:	f00e fb15 	bl	1a0b8 <hal_i2c_master_read>
    ba8e:	4601      	mov	r1, r0
    ba90:	9013      	str	r0, [sp, #76]	; 0x4c
    ba92:	9101      	str	r1, [sp, #4]
    ba94:	e7ff      	b.n	ba96 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x150>
    if rc2 == hal::HAL_I2C_ERR_ADDR_NACK as i32 {
    ba96:	9801      	ldr	r0, [sp, #4]
    ba98:	2804      	cmp	r0, #4
    ba9a:	d005      	beq.n	baa8 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x162>
    ba9c:	e7ff      	b.n	ba9e <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x158>
    ba9e:	2000      	movs	r0, #0
        ////assert!(false, "i2c fail");  //  I2C read failed
        console::print("i2c fail\n"); ////
        return Ok(());               //  TODO: Return an error
    }
    Ok(())
    baa0:	900e      	str	r0, [sp, #56]	; 0x38
    baa2:	2001      	movs	r0, #1
    baa4:	900e      	str	r0, [sp, #56]	; 0x38
}
    baa6:	e00c      	b.n	bac2 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x17c>
        console::print("i2c fail\n"); ////
    baa8:	f64e 2084 	movw	r0, #60036	; 0xea84
    baac:	f2c0 0001 	movt	r0, #1
    bab0:	2109      	movs	r1, #9
    bab2:	f7fd fa9d 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    bab6:	e7ff      	b.n	bab8 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x172>
    bab8:	2000      	movs	r0, #0
        return Ok(());               //  TODO: Return an error
    baba:	900e      	str	r0, [sp, #56]	; 0x38
    babc:	2001      	movs	r0, #1
    babe:	900e      	str	r0, [sp, #56]	; 0x38
    bac0:	e7ff      	b.n	bac2 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x17c>
}
    bac2:	980e      	ldr	r0, [sp, #56]	; 0x38
    bac4:	b014      	add	sp, #80	; 0x50
    bac6:	bdb0      	pop	{r4, r5, r7, pc}
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    bac8:	f64e 0010 	movw	r0, #59408	; 0xe810
    bacc:	f2c0 0001 	movt	r0, #1
    bad0:	f64e 2264 	movw	r2, #60004	; 0xea64
    bad4:	f2c0 0201 	movt	r2, #1
    bad8:	211c      	movs	r1, #28
    bada:	f00b ff6b 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bade:	defe      	udf	#254	; 0xfe

0000bae0 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E>:
/// CHIP8 Virtual Pixel size, in Physical Pixels
const PIXEL_WIDTH: usize = 3;
const PIXEL_HEIGHT: usize = 5;

/// Render some graphics and text to the PineTime display. `start_display()` must have been called earlier.
pub fn on_start() -> MynewtResult<()> {
    bae0:	b510      	push	{r4, lr}
    bae2:	b0aa      	sub	sp, #168	; 0xa8
    console::print("Rust CHIP8\n"); console::flush();
    bae4:	f64e 208d 	movw	r0, #60045	; 0xea8d
    bae8:	f2c0 0001 	movt	r0, #1
    baec:	210b      	movs	r1, #11
    baee:	f7fd fa7f 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    baf2:	e7ff      	b.n	baf4 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x14>
    baf4:	f7fd fac2 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    baf8:	e7ff      	b.n	bafa <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x1a>
    bafa:	2000      	movs	r0, #0
    
    //  Create black background
    let background = Rectangle::<Rgb565>
        ::new( Coord::new( 0, 0 ), Coord::new( 239, 239 ) )   //  Rectangle coordinates
    bafc:	900d      	str	r0, [sp, #52]	; 0x34
    bafe:	990d      	ldr	r1, [sp, #52]	; 0x34
    bb00:	f005 ff40 	bl	11984 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    bb04:	900c      	str	r0, [sp, #48]	; 0x30
    bb06:	910b      	str	r1, [sp, #44]	; 0x2c
    bb08:	e7ff      	b.n	bb0a <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x2a>
    bb0a:	20ef      	movs	r0, #239	; 0xef
    bb0c:	900a      	str	r0, [sp, #40]	; 0x28
    bb0e:	990a      	ldr	r1, [sp, #40]	; 0x28
    bb10:	f005 ff38 	bl	11984 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    bb14:	9009      	str	r0, [sp, #36]	; 0x24
    bb16:	9108      	str	r1, [sp, #32]
    bb18:	e7ff      	b.n	bb1a <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x3a>
    let background = Rectangle::<Rgb565>
    bb1a:	4668      	mov	r0, sp
    bb1c:	9908      	ldr	r1, [sp, #32]
    bb1e:	6001      	str	r1, [r0, #0]
    bb20:	a816      	add	r0, sp, #88	; 0x58
    bb22:	990c      	ldr	r1, [sp, #48]	; 0x30
    bb24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    bb26:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bb28:	f00a ff34 	bl	16994 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>
    bb2c:	e7ff      	b.n	bb2e <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x4e>
    bb2e:	2000      	movs	r0, #0
        .fill( Some( Rgb565::from(( 0x00, 0x00, 0x00 )) ) );  //  Black
    bb30:	f88d 0078 	strb.w	r0, [sp, #120]	; 0x78
    bb34:	f88d 0079 	strb.w	r0, [sp, #121]	; 0x79
    bb38:	f88d 007a 	strb.w	r0, [sp, #122]	; 0x7a
    bb3c:	f89d 007a 	ldrb.w	r0, [sp, #122]	; 0x7a
    bb40:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
    bb44:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    bb48:	f005 ff97 	bl	11a7a <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    bb4c:	9007      	str	r0, [sp, #28]
    bb4e:	e7ff      	b.n	bb50 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x70>
    bb50:	9807      	ldr	r0, [sp, #28]
    bb52:	f8ad 0076 	strh.w	r0, [sp, #118]	; 0x76
    bb56:	2101      	movs	r1, #1
    bb58:	f8ad 1074 	strh.w	r1, [sp, #116]	; 0x74
    let background = Rectangle::<Rgb565>
    bb5c:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    bb60:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
    bb64:	a80f      	add	r0, sp, #60	; 0x3c
    bb66:	a916      	add	r1, sp, #88	; 0x58
    bb68:	f00a fbaa 	bl	162c0 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>
    bb6c:	e7ff      	b.n	bb6e <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x8e>
    bb6e:	a80f      	add	r0, sp, #60	; 0x3c
    bb70:	a91f      	add	r1, sp, #124	; 0x7c

    //  Render background to display
    druid::draw_to_display(background);
    bb72:	460a      	mov	r2, r1
    bb74:	e8b0 5008 	ldmia.w	r0!, {r3, ip, lr}
    bb78:	e8a2 5008 	stmia.w	r2!, {r3, ip, lr}
    bb7c:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
    bb80:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
    bb84:	4608      	mov	r0, r1
    bb86:	f009 fd55 	bl	15634 <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E>
    bb8a:	e7ff      	b.n	bb8c <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0xac>

    //  Start the emulator in a background task
    os::task_init(                  //  Create a new task and start it...
        unsafe { &mut CHIP8_TASK }, //  Task object will be saved here
        &init_strn!( "chip8" ),     //  Name of task
    bb8c:	f64e 20ac 	movw	r0, #60076	; 0xeaac
    bb90:	f2c0 0001 	movt	r0, #1
    bb94:	6801      	ldr	r1, [r0, #0]
        Some( task_func ),    //  Function to execute when task starts
    bb96:	f64b 4017 	movw	r0, #48151	; 0xbc17
    bb9a:	f2c0 0000 	movt	r0, #0
    bb9e:	9027      	str	r0, [sp, #156]	; 0x9c
    os::task_init(                  //  Create a new task and start it...
    bba0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    bba2:	4668      	mov	r0, sp
    bba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    bba8:	6103      	str	r3, [r0, #16]
    bbaa:	60c3      	str	r3, [r0, #12]
    bbac:	f240 2368 	movw	r3, #616	; 0x268
    bbb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbb4:	6083      	str	r3, [r0, #8]
    bbb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bbba:	6043      	str	r3, [r0, #4]
    bbbc:	2314      	movs	r3, #20
    bbbe:	6003      	str	r3, [r0, #0]
    bbc0:	f240 2018 	movw	r0, #536	; 0x218
    bbc4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bbc8:	2300      	movs	r3, #0
    bbca:	f7fd f861 	bl	8c90 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>
    bbce:	9006      	str	r0, [sp, #24]
    bbd0:	e7ff      	b.n	bbd2 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0xf2>
    bbd2:	9806      	ldr	r0, [sp, #24]
    bbd4:	f7fc ffd0 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    bbd8:	9026      	str	r0, [sp, #152]	; 0x98
    bbda:	e7ff      	b.n	bbdc <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0xfc>
        NULL,  //  Argument to be passed to above function
        20,    //  Task priority: highest is 0, lowest is 255 (main task is 127), SPI is 10
        os::OS_WAIT_FOREVER as u32,       //  Don't do sanity / watchdog checking
        unsafe { &mut CHIP8_TASK_STACK }, //  Stack space for the task
        CHIP8_TASK_STACK_SIZE as u16      //  Size of the stack (in 4-byte units)
    ) ? ;                                 //  `?` means check for error
    bbdc:	9826      	ldr	r0, [sp, #152]	; 0x98
    bbde:	1e41      	subs	r1, r0, #1
    bbe0:	bf18      	it	ne
    bbe2:	2101      	movne	r1, #1
    bbe4:	2801      	cmp	r0, #1
    bbe6:	d001      	beq.n	bbec <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x10c>
    bbe8:	e7ff      	b.n	bbea <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x10a>
    bbea:	e005      	b.n	bbf8 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x118>
    bbec:	2000      	movs	r0, #0

    //  Return success to the caller
    Ok(())
    bbee:	900e      	str	r0, [sp, #56]	; 0x38
    bbf0:	2001      	movs	r0, #1
    bbf2:	900e      	str	r0, [sp, #56]	; 0x38
}
    bbf4:	e006      	b.n	bc04 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x124>
    os::task_init(                  //  Create a new task and start it...
    bbf6:	defe      	udf	#254	; 0xfe
    ) ? ;                                 //  `?` means check for error
    bbf8:	9826      	ldr	r0, [sp, #152]	; 0x98
    bbfa:	9029      	str	r0, [sp, #164]	; 0xa4
    bbfc:	f006 fe26 	bl	1284c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    bc00:	9005      	str	r0, [sp, #20]
    bc02:	e002      	b.n	bc0a <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x12a>
}
    bc04:	980e      	ldr	r0, [sp, #56]	; 0x38
    bc06:	b02a      	add	sp, #168	; 0xa8
    bc08:	bd10      	pop	{r4, pc}
    ) ? ;                                 //  `?` means check for error
    bc0a:	9805      	ldr	r0, [sp, #20]
    bc0c:	f7fc ffa8 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    bc10:	900e      	str	r0, [sp, #56]	; 0x38
    bc12:	e7ff      	b.n	bc14 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x134>
    bc14:	e7f6      	b.n	bc04 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x124>

0000bc16 <_ZN3app5chip89task_func17h385831a0096277b5E>:

/// Size of the stack (in 4-byte units). Previously `OS_STACK_ALIGN(256)`  
const CHIP8_TASK_STACK_SIZE: usize = 4096;  //  Must be 4096 and above because CHIP8 Emulator requires substantial stack space

///  Run the emulator
extern "C" fn task_func(_arg: Ptr) {    
    bc16:	b580      	push	{r7, lr}
    bc18:	f5ad 5d03 	sub.w	sp, sp, #8384	; 0x20c0
    bc1c:	b082      	sub	sp, #8
    bc1e:	f50d 5103 	add.w	r1, sp, #8384	; 0x20c0
    bc22:	6008      	str	r0, [r1, #0]
    bc24:	a804      	add	r0, sp, #16
    //  Create the hardware API for rendering the emulator
    let hardware = Hardware::new();
    bc26:	9103      	str	r1, [sp, #12]
    bc28:	f000 f850 	bl	bccc <_ZN3app5chip88Hardware3new17h96952bcb3fb4d968E>
    bc2c:	e7ff      	b.n	bc2e <_ZN3app5chip89task_func17h385831a0096277b5E+0x18>

    //  Create the emulator
    let chip8 = libchip8::Chip8::new(hardware);
    bc2e:	f89d 0014 	ldrb.w	r0, [sp, #20]
    bc32:	f50d 5e80 	add.w	lr, sp, #4096	; 0x1000
    bc36:	f88e 006c 	strb.w	r0, [lr, #108]	; 0x6c
    bc3a:	9804      	ldr	r0, [sp, #16]
    bc3c:	f50d 5e80 	add.w	lr, sp, #4096	; 0x1000
    bc40:	f8ce 0068 	str.w	r0, [lr, #104]	; 0x68
    bc44:	a806      	add	r0, sp, #24
    bc46:	f10d 0e08 	add.w	lr, sp, #8
    bc4a:	f50e 5183 	add.w	r1, lr, #4192	; 0x1060
    bc4e:	f001 fa61 	bl	d114 <_ZN8libchip814Chip8$LT$T$GT$3new17he723acd5a1e30b39E>
    bc52:	e7ff      	b.n	bc54 <_ZN3app5chip89task_func17h385831a0096277b5E+0x3e>
    console::print("CHIP8 started\n"); console::flush();
    bc54:	f64e 20b0 	movw	r0, #60080	; 0xeab0
    bc58:	f2c0 0001 	movt	r0, #1
    bc5c:	210e      	movs	r1, #14
    bc5e:	f7fd f9c7 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    bc62:	e7ff      	b.n	bc64 <_ZN3app5chip89task_func17h385831a0096277b5E+0x4e>
    bc64:	f7fd fa0a 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    bc68:	e7ff      	b.n	bc6a <_ZN3app5chip89task_func17h385831a0096277b5E+0x54>

    //  Load the emulator ROM
    //  let rom = include_bytes!("../roms/invaders.ch8");
    //  let rom = include_bytes!("../roms/pong.ch8");
    let rom = include_bytes!("../roms/blinky.ch8");
    bc6a:	f64e 20be 	movw	r0, #60094	; 0xeabe
    bc6e:	f2c0 0001 	movt	r0, #1
    bc72:	9903      	ldr	r1, [sp, #12]
    bc74:	6048      	str	r0, [r1, #4]
    bc76:	f10d 0e10 	add.w	lr, sp, #16
    bc7a:	f50e 5283 	add.w	r2, lr, #4192	; 0x1060
    bc7e:	a906      	add	r1, sp, #24
    bc80:	f241 0350 	movw	r3, #4176	; 0x1050

    //  Run the emulator ROM. This will block until emulator terminates
    chip8.run(rom);
    bc84:	9002      	str	r0, [sp, #8]
    bc86:	4610      	mov	r0, r2
    bc88:	9201      	str	r2, [sp, #4]
    bc8a:	461a      	mov	r2, r3
    bc8c:	f012 fa66 	bl	1e15c <__aeabi_memcpy>
    bc90:	f640 1234 	movw	r2, #2356	; 0x934
    bc94:	9801      	ldr	r0, [sp, #4]
    bc96:	9902      	ldr	r1, [sp, #8]
    bc98:	f001 faeb 	bl	d272 <_ZN8libchip814Chip8$LT$T$GT$3run17h13983ef8bbdf8d15E>
    bc9c:	e7ff      	b.n	bc9e <_ZN3app5chip89task_func17h385831a0096277b5E+0x88>

    //  Should not come here
    console::print("CHIP8 done\n"); console::flush();
    bc9e:	f24f 30f2 	movw	r0, #62450	; 0xf3f2
    bca2:	f2c0 0001 	movt	r0, #1
    bca6:	210b      	movs	r1, #11
    bca8:	f7fd f9a2 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    bcac:	e7ff      	b.n	bcae <_ZN3app5chip89task_func17h385831a0096277b5E+0x98>
    bcae:	f7fd f9e5 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    bcb2:	e7ff      	b.n	bcb4 <_ZN3app5chip89task_func17h385831a0096277b5E+0x9e>
    assert!(false, "CHIP8 should not end");
    bcb4:	f24f 30fd 	movw	r0, #62461	; 0xf3fd
    bcb8:	f2c0 0001 	movt	r0, #1
    bcbc:	f24f 4228 	movw	r2, #62504	; 0xf428
    bcc0:	f2c0 0201 	movt	r2, #1
    bcc4:	2114      	movs	r1, #20
    bcc6:	f00b fe75 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bcca:	defe      	udf	#254	; 0xfe

0000bccc <_ZN3app5chip88Hardware3new17h96952bcb3fb4d968E>:
    is_interactive: bool,
}

impl Hardware {
    /// Return a new Hardware API for rendering CHIP8 Emulator
    pub fn new() -> Hardware {
    bccc:	2100      	movs	r1, #0
        Hardware {
    bcce:	7001      	strb	r1, [r0, #0]
    bcd0:	7041      	strb	r1, [r0, #1]
    bcd2:	7081      	strb	r1, [r0, #2]
    bcd4:	70c1      	strb	r1, [r0, #3]
    bcd6:	7101      	strb	r1, [r0, #4]
            update_top: 0,
            update_right: 0,
            update_bottom: 0,
            is_interactive: false,
        }
    }
    bcd8:	4770      	bx	lr

0000bcda <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17h1f2d81332a8bf311E>:
}

impl libchip8::Hardware for Hardware {
    /// Return a random value.
    fn rand(&mut self) -> u8 {
    bcda:	b081      	sub	sp, #4
    bcdc:	9000      	str	r0, [sp, #0]
    bcde:	207b      	movs	r0, #123	; 0x7b
        123  //  TODO
    }
    bce0:	b001      	add	sp, #4
    bce2:	4770      	bx	lr

0000bce4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd1688355d8a270c9E>:

    /// Check if the key is pressed.
    fn key(&mut self, _key: u8) -> bool {
    bce4:	b580      	push	{r7, lr}
    bce6:	b084      	sub	sp, #16
    bce8:	460a      	mov	r2, r1
    bcea:	9002      	str	r0, [sp, #8]
    bcec:	f88d 100f 	strb.w	r1, [sp, #15]
        if !self.is_interactive {
    bcf0:	7901      	ldrb	r1, [r0, #4]
    bcf2:	07c9      	lsls	r1, r1, #31
    bcf4:	2900      	cmp	r1, #0
    bcf6:	9001      	str	r0, [sp, #4]
    bcf8:	d10f      	bne.n	bd1a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd1688355d8a270c9E+0x36>
    bcfa:	e7ff      	b.n	bcfc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd1688355d8a270c9E+0x18>
    bcfc:	2001      	movs	r0, #1
            self.is_interactive = true;
    bcfe:	9901      	ldr	r1, [sp, #4]
    bd00:	7108      	strb	r0, [r1, #4]
            console::print("key\n"); console::flush(); ////
    bd02:	f24f 4038 	movw	r0, #62520	; 0xf438
    bd06:	f2c0 0001 	movt	r0, #1
    bd0a:	2104      	movs	r1, #4
    bd0c:	f7fd f970 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    bd10:	e7ff      	b.n	bd12 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd1688355d8a270c9E+0x2e>
    bd12:	f7fd f9b3 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    bd16:	e7ff      	b.n	bd18 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd1688355d8a270c9E+0x34>
        if !self.is_interactive {
    bd18:	e7ff      	b.n	bd1a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd1688355d8a270c9E+0x36>
    bd1a:	2000      	movs	r0, #0
        match &self.win {
            Some(win) => win.is_key_down(k),
            None => false,
        }
        */
    }
    bd1c:	b004      	add	sp, #16
    bd1e:	bd80      	pop	{r7, pc}

0000bd20 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E>:

    /// Set the state of a pixel in the screen. true for white, and false for black.
    fn vram_set(&mut self, x: usize, y: usize, d: bool) {
    bd20:	b08c      	sub	sp, #48	; 0x30
    bd22:	469c      	mov	ip, r3
    bd24:	9007      	str	r0, [sp, #28]
    bd26:	9108      	str	r1, [sp, #32]
    bd28:	9209      	str	r2, [sp, #36]	; 0x24
    bd2a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        //  console::print("set "); console::printint(x as i32); console::print(", "); console::printint(y as i32); console::print("\n"); console::flush(); ////
        assert!(x < SCREEN_WIDTH, "x overflow");
    bd2e:	293f      	cmp	r1, #63	; 0x3f
    bd30:	9205      	str	r2, [sp, #20]
    bd32:	9104      	str	r1, [sp, #16]
    bd34:	9003      	str	r0, [sp, #12]
    bd36:	f8cd c008 	str.w	ip, [sp, #8]
    bd3a:	d804      	bhi.n	bd46 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x26>
    bd3c:	e7ff      	b.n	bd3e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x1e>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    bd3e:	9805      	ldr	r0, [sp, #20]
    bd40:	281f      	cmp	r0, #31
    bd42:	d814      	bhi.n	bd6e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x4e>
    bd44:	e00b      	b.n	bd5e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x3e>
        assert!(x < SCREEN_WIDTH, "x overflow");
    bd46:	f24f 403c 	movw	r0, #62524	; 0xf43c
    bd4a:	f2c0 0001 	movt	r0, #1
    bd4e:	f24f 4248 	movw	r2, #62536	; 0xf448
    bd52:	f2c0 0201 	movt	r2, #1
    bd56:	210a      	movs	r1, #10
    bd58:	f00b fe2c 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bd5c:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    bd5e:	9805      	ldr	r0, [sp, #20]
    bd60:	0181      	lsls	r1, r0, #6
    bd62:	0e82      	lsrs	r2, r0, #26
    bd64:	2a00      	cmp	r2, #0
    bd66:	9101      	str	r1, [sp, #4]
    bd68:	f040 80b3 	bne.w	bed2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x1b2>
    bd6c:	e00b      	b.n	bd86 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x66>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    bd6e:	f24f 4058 	movw	r0, #62552	; 0xf458
    bd72:	f2c0 0001 	movt	r0, #1
    bd76:	f24f 4264 	movw	r2, #62564	; 0xf464
    bd7a:	f2c0 0201 	movt	r2, #1
    bd7e:	210a      	movs	r1, #10
    bd80:	f00b fe18 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bd84:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    bd86:	9804      	ldr	r0, [sp, #16]
    bd88:	9901      	ldr	r1, [sp, #4]
    bd8a:	1842      	adds	r2, r0, r1
    bd8c:	4613      	mov	r3, r2
    bd8e:	4282      	cmp	r2, r0
    bd90:	9300      	str	r3, [sp, #0]
    bd92:	f0c0 80aa 	bcc.w	beea <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x1ca>
    bd96:	e7ff      	b.n	bd98 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x78>
    bd98:	9800      	ldr	r0, [sp, #0]
    bd9a:	900b      	str	r0, [sp, #44]	; 0x2c
        unsafe { SCREEN_BUFFER[i] = 
            if d {
    bd9c:	9902      	ldr	r1, [sp, #8]
    bd9e:	07ca      	lsls	r2, r1, #31
    bda0:	2a00      	cmp	r2, #0
    bda2:	d104      	bne.n	bdae <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x8e>
    bda4:	e7ff      	b.n	bda6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x86>
    bda6:	207f      	movs	r0, #127	; 0x7f
                if self.is_interactive { 255 }  //  Brighter colour when emulator is active
                else { 200 }                    //  Darker colour for initial screen
            } 
            else { 127 }  //  Fade to black
    bda8:	f88d 0018 	strb.w	r0, [sp, #24]
            if d {
    bdac:	e00e      	b.n	bdcc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0xac>
                if self.is_interactive { 255 }  //  Brighter colour when emulator is active
    bdae:	9803      	ldr	r0, [sp, #12]
    bdb0:	7901      	ldrb	r1, [r0, #4]
    bdb2:	07c9      	lsls	r1, r1, #31
    bdb4:	2900      	cmp	r1, #0
    bdb6:	d104      	bne.n	bdc2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0xa2>
    bdb8:	e7ff      	b.n	bdba <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x9a>
    bdba:	20c8      	movs	r0, #200	; 0xc8
                else { 200 }                    //  Darker colour for initial screen
    bdbc:	f88d 0018 	strb.w	r0, [sp, #24]
                if self.is_interactive { 255 }  //  Brighter colour when emulator is active
    bdc0:	e003      	b.n	bdca <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0xaa>
    bdc2:	20ff      	movs	r0, #255	; 0xff
    bdc4:	f88d 0018 	strb.w	r0, [sp, #24]
    bdc8:	e7ff      	b.n	bdca <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0xaa>
            if d {
    bdca:	e7ff      	b.n	bdcc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0xac>
    bdcc:	2000      	movs	r0, #0
        unsafe { SCREEN_BUFFER[i] = 
    bdce:	9900      	ldr	r1, [sp, #0]
    bdd0:	ebb0 2fd1 	cmp.w	r0, r1, lsr #11
    bdd4:	f040 8095 	bne.w	bf02 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x1e2>
    bdd8:	e7ff      	b.n	bdda <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0xba>
    bdda:	f244 2068 	movw	r0, #17000	; 0x4268
    bdde:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bde2:	f89d 1018 	ldrb.w	r1, [sp, #24]
    bde6:	9a00      	ldr	r2, [sp, #0]
    bde8:	5481      	strb	r1, [r0, r2]
        };

        //  Remember the boundaries of the screen region to be updated
        if self.update_left == 0 && self.update_right == 0 &&
    bdea:	9803      	ldr	r0, [sp, #12]
    bdec:	7801      	ldrb	r1, [r0, #0]
    bdee:	2900      	cmp	r1, #0
    bdf0:	d02e      	beq.n	be50 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x130>
    bdf2:	e029      	b.n	be48 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x128>
    bdf4:	2001      	movs	r0, #1
    bdf6:	f88d 0019 	strb.w	r0, [sp, #25]
    bdfa:	e008      	b.n	be0e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0xee>
    bdfc:	2000      	movs	r0, #0
    bdfe:	f88d 0019 	strb.w	r0, [sp, #25]
    be02:	e004      	b.n	be0e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0xee>
            self.update_top == 0 && self.update_bottom == 0 {
    be04:	9803      	ldr	r0, [sp, #12]
    be06:	78c1      	ldrb	r1, [r0, #3]
        if self.update_left == 0 && self.update_right == 0 &&
    be08:	2900      	cmp	r1, #0
    be0a:	d0f3      	beq.n	bdf4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0xd4>
    be0c:	e7f6      	b.n	bdfc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0xdc>
    be0e:	f89d 0019 	ldrb.w	r0, [sp, #25]
    be12:	07c0      	lsls	r0, r0, #31
    be14:	2800      	cmp	r0, #0
    be16:	d126      	bne.n	be66 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x146>
    be18:	e02d      	b.n	be76 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x156>
    be1a:	2001      	movs	r0, #1
    be1c:	f88d 001a 	strb.w	r0, [sp, #26]
    be20:	e008      	b.n	be34 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x114>
    be22:	2000      	movs	r0, #0
    be24:	f88d 001a 	strb.w	r0, [sp, #26]
    be28:	e004      	b.n	be34 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x114>
            self.update_top == 0 && self.update_bottom == 0 {
    be2a:	9803      	ldr	r0, [sp, #12]
    be2c:	7841      	ldrb	r1, [r0, #1]
        if self.update_left == 0 && self.update_right == 0 &&
    be2e:	2900      	cmp	r1, #0
    be30:	d0f3      	beq.n	be1a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0xfa>
    be32:	e7f6      	b.n	be22 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x102>
    be34:	f89d 001a 	ldrb.w	r0, [sp, #26]
    be38:	07c0      	lsls	r0, r0, #31
    be3a:	2800      	cmp	r0, #0
    be3c:	d1e2      	bne.n	be04 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0xe4>
    be3e:	e7dd      	b.n	bdfc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0xdc>
    be40:	2001      	movs	r0, #1
    be42:	f88d 001b 	strb.w	r0, [sp, #27]
    be46:	e008      	b.n	be5a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x13a>
    be48:	2000      	movs	r0, #0
    be4a:	f88d 001b 	strb.w	r0, [sp, #27]
    be4e:	e004      	b.n	be5a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x13a>
    be50:	9803      	ldr	r0, [sp, #12]
    be52:	7881      	ldrb	r1, [r0, #2]
    be54:	2900      	cmp	r1, #0
    be56:	d0f3      	beq.n	be40 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x120>
    be58:	e7f6      	b.n	be48 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x128>
    be5a:	f89d 001b 	ldrb.w	r0, [sp, #27]
    be5e:	07c0      	lsls	r0, r0, #31
    be60:	2800      	cmp	r0, #0
    be62:	d1e2      	bne.n	be2a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x10a>
    be64:	e7dd      	b.n	be22 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x102>
            self.update_left = x as u8;
    be66:	9804      	ldr	r0, [sp, #16]
    be68:	9903      	ldr	r1, [sp, #12]
    be6a:	7008      	strb	r0, [r1, #0]
            self.update_right = x as u8;
    be6c:	7088      	strb	r0, [r1, #2]
            self.update_top = y as u8;
    be6e:	9a05      	ldr	r2, [sp, #20]
    be70:	704a      	strb	r2, [r1, #1]
            self.update_bottom = y as u8;
    be72:	70ca      	strb	r2, [r1, #3]
        if self.update_left == 0 && self.update_right == 0 &&
    be74:	e7ff      	b.n	be76 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x156>
        }
        if (x as u8) < self.update_left { self.update_left = x as u8; }
    be76:	9804      	ldr	r0, [sp, #16]
    be78:	b2c1      	uxtb	r1, r0
    be7a:	9a03      	ldr	r2, [sp, #12]
    be7c:	7813      	ldrb	r3, [r2, #0]
    be7e:	4299      	cmp	r1, r3
    be80:	d204      	bcs.n	be8c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x16c>
    be82:	e7ff      	b.n	be84 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x164>
    be84:	9804      	ldr	r0, [sp, #16]
    be86:	9903      	ldr	r1, [sp, #12]
    be88:	7008      	strb	r0, [r1, #0]
    be8a:	e7ff      	b.n	be8c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x16c>
        if (x as u8) > self.update_right { self.update_right = x as u8; }
    be8c:	9804      	ldr	r0, [sp, #16]
    be8e:	b2c1      	uxtb	r1, r0
    be90:	9a03      	ldr	r2, [sp, #12]
    be92:	7893      	ldrb	r3, [r2, #2]
    be94:	4299      	cmp	r1, r3
    be96:	d904      	bls.n	bea2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x182>
    be98:	e7ff      	b.n	be9a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x17a>
    be9a:	9804      	ldr	r0, [sp, #16]
    be9c:	9903      	ldr	r1, [sp, #12]
    be9e:	7088      	strb	r0, [r1, #2]
    bea0:	e7ff      	b.n	bea2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x182>
        if (y as u8) < self.update_top { self.update_top = y as u8; }
    bea2:	9805      	ldr	r0, [sp, #20]
    bea4:	b2c1      	uxtb	r1, r0
    bea6:	9a03      	ldr	r2, [sp, #12]
    bea8:	7853      	ldrb	r3, [r2, #1]
    beaa:	4299      	cmp	r1, r3
    beac:	d204      	bcs.n	beb8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x198>
    beae:	e7ff      	b.n	beb0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x190>
    beb0:	9805      	ldr	r0, [sp, #20]
    beb2:	9903      	ldr	r1, [sp, #12]
    beb4:	7048      	strb	r0, [r1, #1]
    beb6:	e7ff      	b.n	beb8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x198>
        if (y as u8) > self.update_bottom { self.update_bottom = y as u8; }
    beb8:	9805      	ldr	r0, [sp, #20]
    beba:	b2c1      	uxtb	r1, r0
    bebc:	9a03      	ldr	r2, [sp, #12]
    bebe:	78d3      	ldrb	r3, [r2, #3]
    bec0:	4299      	cmp	r1, r3
    bec2:	d904      	bls.n	bece <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x1ae>
    bec4:	e7ff      	b.n	bec6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x1a6>
    bec6:	9805      	ldr	r0, [sp, #20]
    bec8:	9903      	ldr	r1, [sp, #12]
    beca:	70c8      	strb	r0, [r1, #3]
    becc:	e7ff      	b.n	bece <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E+0x1ae>
    }
    bece:	b00c      	add	sp, #48	; 0x30
    bed0:	4770      	bx	lr
        let i = x + y * SCREEN_WIDTH;
    bed2:	f24f 4090 	movw	r0, #62608	; 0xf490
    bed6:	f2c0 0001 	movt	r0, #1
    beda:	f24f 4274 	movw	r2, #62580	; 0xf474
    bede:	f2c0 0201 	movt	r2, #1
    bee2:	2121      	movs	r1, #33	; 0x21
    bee4:	f00b fd66 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bee8:	defe      	udf	#254	; 0xfe
    beea:	f24f 40d0 	movw	r0, #62672	; 0xf4d0
    beee:	f2c0 0001 	movt	r0, #1
    bef2:	f24f 42b4 	movw	r2, #62644	; 0xf4b4
    bef6:	f2c0 0201 	movt	r2, #1
    befa:	211c      	movs	r1, #28
    befc:	f00b fd5a 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bf00:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] = 
    bf02:	f24f 40ec 	movw	r0, #62700	; 0xf4ec
    bf06:	f2c0 0001 	movt	r0, #1
    bf0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bf0e:	9900      	ldr	r1, [sp, #0]
    bf10:	f00b fd66 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    bf14:	defe      	udf	#254	; 0xfe

0000bf16 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7d82f7c01359a92aE>:

    /// Get the current state of a pixel in the screen.
    fn vram_get(&mut self, x: usize, y: usize) -> bool {
    bf16:	b088      	sub	sp, #32
    bf18:	9004      	str	r0, [sp, #16]
    bf1a:	9105      	str	r1, [sp, #20]
    bf1c:	9206      	str	r2, [sp, #24]
        //  console::print("get "); console::printint(x as i32); console::print(", "); console::printint(y as i32); console::print("\n"); console::flush(); ////
        assert!(x < SCREEN_WIDTH, "x overflow");
    bf1e:	293f      	cmp	r1, #63	; 0x3f
    bf20:	9203      	str	r2, [sp, #12]
    bf22:	9102      	str	r1, [sp, #8]
    bf24:	d804      	bhi.n	bf30 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7d82f7c01359a92aE+0x1a>
    bf26:	e7ff      	b.n	bf28 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7d82f7c01359a92aE+0x12>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    bf28:	9803      	ldr	r0, [sp, #12]
    bf2a:	281f      	cmp	r0, #31
    bf2c:	d813      	bhi.n	bf56 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7d82f7c01359a92aE+0x40>
    bf2e:	e00b      	b.n	bf48 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7d82f7c01359a92aE+0x32>
        assert!(x < SCREEN_WIDTH, "x overflow");
    bf30:	f24f 403c 	movw	r0, #62524	; 0xf43c
    bf34:	f2c0 0001 	movt	r0, #1
    bf38:	f24f 42fc 	movw	r2, #62716	; 0xf4fc
    bf3c:	f2c0 0201 	movt	r2, #1
    bf40:	210a      	movs	r1, #10
    bf42:	f00b fd37 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bf46:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    bf48:	9803      	ldr	r0, [sp, #12]
    bf4a:	0181      	lsls	r1, r0, #6
    bf4c:	0e82      	lsrs	r2, r0, #26
    bf4e:	2a00      	cmp	r2, #0
    bf50:	9101      	str	r1, [sp, #4]
    bf52:	d128      	bne.n	bfa6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7d82f7c01359a92aE+0x90>
    bf54:	e00b      	b.n	bf6e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7d82f7c01359a92aE+0x58>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    bf56:	f24f 4058 	movw	r0, #62552	; 0xf458
    bf5a:	f2c0 0001 	movt	r0, #1
    bf5e:	f24f 520c 	movw	r2, #62732	; 0xf50c
    bf62:	f2c0 0201 	movt	r2, #1
    bf66:	210a      	movs	r1, #10
    bf68:	f00b fd24 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bf6c:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    bf6e:	9802      	ldr	r0, [sp, #8]
    bf70:	9901      	ldr	r1, [sp, #4]
    bf72:	1842      	adds	r2, r0, r1
    bf74:	4613      	mov	r3, r2
    bf76:	4282      	cmp	r2, r0
    bf78:	9300      	str	r3, [sp, #0]
    bf7a:	d320      	bcc.n	bfbe <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7d82f7c01359a92aE+0xa8>
    bf7c:	e7ff      	b.n	bf7e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7d82f7c01359a92aE+0x68>
    bf7e:	9800      	ldr	r0, [sp, #0]
    bf80:	9007      	str	r0, [sp, #28]
    bf82:	2100      	movs	r1, #0
        unsafe { SCREEN_BUFFER[i] >= 128 }
    bf84:	ebb1 2fd0 	cmp.w	r1, r0, lsr #11
    bf88:	d125      	bne.n	bfd6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7d82f7c01359a92aE+0xc0>
    bf8a:	e7ff      	b.n	bf8c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7d82f7c01359a92aE+0x76>
    bf8c:	f244 2068 	movw	r0, #17000	; 0x4268
    bf90:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bf94:	9900      	ldr	r1, [sp, #0]
    bf96:	5640      	ldrsb	r0, [r0, r1]
    bf98:	2200      	movs	r2, #0
    bf9a:	2800      	cmp	r0, #0
    bf9c:	bf48      	it	mi
    bf9e:	2201      	movmi	r2, #1
    }
    bfa0:	4610      	mov	r0, r2
    bfa2:	b008      	add	sp, #32
    bfa4:	4770      	bx	lr
        let i = x + y * SCREEN_WIDTH;
    bfa6:	f24f 4090 	movw	r0, #62608	; 0xf490
    bfaa:	f2c0 0001 	movt	r0, #1
    bfae:	f24f 521c 	movw	r2, #62748	; 0xf51c
    bfb2:	f2c0 0201 	movt	r2, #1
    bfb6:	2121      	movs	r1, #33	; 0x21
    bfb8:	f00b fcfc 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bfbc:	defe      	udf	#254	; 0xfe
    bfbe:	f24f 40d0 	movw	r0, #62672	; 0xf4d0
    bfc2:	f2c0 0001 	movt	r0, #1
    bfc6:	f24f 522c 	movw	r2, #62764	; 0xf52c
    bfca:	f2c0 0201 	movt	r2, #1
    bfce:	211c      	movs	r1, #28
    bfd0:	f00b fcf0 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bfd4:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] >= 128 }
    bfd6:	f24f 503c 	movw	r0, #62780	; 0xf53c
    bfda:	f2c0 0001 	movt	r0, #1
    bfde:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bfe2:	9900      	ldr	r1, [sp, #0]
    bfe4:	f00b fcfc 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    bfe8:	defe      	udf	#254	; 0xfe

0000bfea <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc05aa4c9ca2355e9E>:

    /// Set the size of the screen.
    fn vram_setsize(&mut self, size: (usize, usize)) {
    bfea:	b580      	push	{r7, lr}
    bfec:	b086      	sub	sp, #24
    bfee:	9003      	str	r0, [sp, #12]
    bff0:	9104      	str	r1, [sp, #16]
    bff2:	9205      	str	r2, [sp, #20]
        //  Do nothing. We assume SCREEN_WIDTH and SCREEN_HEIGHT.
        assert!(size.0 == SCREEN_WIDTH && size.1 == SCREEN_HEIGHT, "bad size");
    bff4:	2940      	cmp	r1, #64	; 0x40
    bff6:	9201      	str	r2, [sp, #4]
    bff8:	9100      	str	r1, [sp, #0]
    bffa:	d008      	beq.n	c00e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc05aa4c9ca2355e9E+0x24>
    bffc:	e003      	b.n	c006 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc05aa4c9ca2355e9E+0x1c>
    bffe:	2001      	movs	r0, #1
    c000:	f88d 000b 	strb.w	r0, [sp, #11]
    c004:	e007      	b.n	c016 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc05aa4c9ca2355e9E+0x2c>
    c006:	2000      	movs	r0, #0
    c008:	f88d 000b 	strb.w	r0, [sp, #11]
    c00c:	e003      	b.n	c016 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc05aa4c9ca2355e9E+0x2c>
    c00e:	9801      	ldr	r0, [sp, #4]
    c010:	2820      	cmp	r0, #32
    c012:	d0f4      	beq.n	bffe <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc05aa4c9ca2355e9E+0x14>
    c014:	e7f7      	b.n	c006 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc05aa4c9ca2355e9E+0x1c>
    c016:	f89d 000b 	ldrb.w	r0, [sp, #11]
    c01a:	07c0      	lsls	r0, r0, #31
    c01c:	2800      	cmp	r0, #0
    c01e:	d008      	beq.n	c032 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc05aa4c9ca2355e9E+0x48>
    c020:	e7ff      	b.n	c022 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc05aa4c9ca2355e9E+0x38>
        console::print("setsize "); console::printint(size.0 as i32); console::print(", "); console::printint(size.1 as i32); console::print("\n"); console::flush(); ////
    c022:	f24f 5054 	movw	r0, #62804	; 0xf554
    c026:	f2c0 0001 	movt	r0, #1
    c02a:	2108      	movs	r1, #8
    c02c:	f7fc ffe0 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    c030:	e00b      	b.n	c04a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc05aa4c9ca2355e9E+0x60>
        assert!(size.0 == SCREEN_WIDTH && size.1 == SCREEN_HEIGHT, "bad size");
    c032:	f24f 504c 	movw	r0, #62796	; 0xf54c
    c036:	f2c0 0001 	movt	r0, #1
    c03a:	f24f 5274 	movw	r2, #62836	; 0xf574
    c03e:	f2c0 0201 	movt	r2, #1
    c042:	2108      	movs	r1, #8
    c044:	f00b fcb6 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c048:	defe      	udf	#254	; 0xfe
        console::print("setsize "); console::printint(size.0 as i32); console::print(", "); console::printint(size.1 as i32); console::print("\n"); console::flush(); ////
    c04a:	9800      	ldr	r0, [sp, #0]
    c04c:	f7fd f80e 	bl	906c <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    c050:	e7ff      	b.n	c052 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc05aa4c9ca2355e9E+0x68>
    c052:	f24f 5084 	movw	r0, #62852	; 0xf584
    c056:	f2c0 0001 	movt	r0, #1
    c05a:	2102      	movs	r1, #2
    c05c:	f7fc ffc8 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    c060:	e7ff      	b.n	c062 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc05aa4c9ca2355e9E+0x78>
    c062:	9801      	ldr	r0, [sp, #4]
    c064:	f7fd f802 	bl	906c <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    c068:	e7ff      	b.n	c06a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc05aa4c9ca2355e9E+0x80>
    c06a:	f24f 5086 	movw	r0, #62854	; 0xf586
    c06e:	f2c0 0001 	movt	r0, #1
    c072:	2101      	movs	r1, #1
    c074:	f7fc ffbc 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    c078:	e7ff      	b.n	c07a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc05aa4c9ca2355e9E+0x90>
    c07a:	f7fc ffff 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    c07e:	e7ff      	b.n	c080 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc05aa4c9ca2355e9E+0x96>
    }
    c080:	b006      	add	sp, #24
    c082:	bd80      	pop	{r7, pc}

0000c084 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hed066ffbd9b90541E>:

    /// Get the size of the screen.
    fn vram_size(&mut self) -> (usize, usize) {
    c084:	b083      	sub	sp, #12
    c086:	9002      	str	r0, [sp, #8]
    c088:	2040      	movs	r0, #64	; 0x40
        (SCREEN_WIDTH, SCREEN_HEIGHT)
    c08a:	9000      	str	r0, [sp, #0]
    c08c:	2020      	movs	r0, #32
    c08e:	9001      	str	r0, [sp, #4]
    }
    c090:	9800      	ldr	r0, [sp, #0]
    c092:	9901      	ldr	r1, [sp, #4]
    c094:	b003      	add	sp, #12
    c096:	4770      	bx	lr

0000c098 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17ha2f93e171d68b34dE>:

    /// Return the current clock value in nanoseconds.
    fn clock(&mut self) -> u64 {
    c098:	b5b0      	push	{r4, r5, r7, lr}
    c09a:	b086      	sub	sp, #24
    c09c:	9005      	str	r0, [sp, #20]
        unsafe { os::os_time_get() as u64 * 1000_u64 * 2000_u64 }
    c09e:	f00f fdef 	bl	1bc80 <os_time_get>
    c0a2:	9004      	str	r0, [sp, #16]
    c0a4:	e7ff      	b.n	c0a6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17ha2f93e171d68b34dE+0xe>
    c0a6:	2000      	movs	r0, #0
    c0a8:	9904      	ldr	r1, [sp, #16]
    c0aa:	fba0 2301 	umull	r2, r3, r0, r1
    c0ae:	2b00      	cmp	r3, #0
    c0b0:	bf18      	it	ne
    c0b2:	2301      	movne	r3, #1
    c0b4:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    c0b8:	fba0 e40c 	umull	lr, r4, r0, ip
    c0bc:	2c00      	cmp	r4, #0
    c0be:	bf18      	it	ne
    c0c0:	2401      	movne	r4, #1
    c0c2:	ea43 0304 	orr.w	r3, r3, r4
    c0c6:	4472      	add	r2, lr
    c0c8:	fba1 ce0c 	umull	ip, lr, r1, ip
    c0cc:	eb12 020e 	adds.w	r2, r2, lr
    c0d0:	f140 0000 	adc.w	r0, r0, #0
    c0d4:	ea40 0003 	orr.w	r0, r0, r3
    c0d8:	2800      	cmp	r0, #0
    c0da:	f8cd c00c 	str.w	ip, [sp, #12]
    c0de:	9202      	str	r2, [sp, #8]
    c0e0:	d124      	bne.n	c12c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17ha2f93e171d68b34dE+0x94>
    c0e2:	e7ff      	b.n	c0e4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17ha2f93e171d68b34dE+0x4c>
    c0e4:	2000      	movs	r0, #0
    c0e6:	9903      	ldr	r1, [sp, #12]
    c0e8:	fba0 2301 	umull	r2, r3, r0, r1
    c0ec:	2b00      	cmp	r3, #0
    c0ee:	bf18      	it	ne
    c0f0:	2301      	movne	r3, #1
    c0f2:	f44f 6cfa 	mov.w	ip, #2000	; 0x7d0
    c0f6:	f8dd e008 	ldr.w	lr, [sp, #8]
    c0fa:	fbae 450c 	umull	r4, r5, lr, ip
    c0fe:	2d00      	cmp	r5, #0
    c100:	bf18      	it	ne
    c102:	2501      	movne	r5, #1
    c104:	ea43 0305 	orr.w	r3, r3, r5
    c108:	4422      	add	r2, r4
    c10a:	fba1 c40c 	umull	ip, r4, r1, ip
    c10e:	1912      	adds	r2, r2, r4
    c110:	f140 0000 	adc.w	r0, r0, #0
    c114:	ea40 0003 	orr.w	r0, r0, r3
    c118:	2800      	cmp	r0, #0
    c11a:	f8cd c004 	str.w	ip, [sp, #4]
    c11e:	9200      	str	r2, [sp, #0]
    c120:	d110      	bne.n	c144 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17ha2f93e171d68b34dE+0xac>
    c122:	e7ff      	b.n	c124 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17ha2f93e171d68b34dE+0x8c>
    }
    c124:	9801      	ldr	r0, [sp, #4]
    c126:	9900      	ldr	r1, [sp, #0]
    c128:	b006      	add	sp, #24
    c12a:	bdb0      	pop	{r4, r5, r7, pc}
        unsafe { os::os_time_get() as u64 * 1000_u64 * 2000_u64 }
    c12c:	f24f 4090 	movw	r0, #62608	; 0xf490
    c130:	f2c0 0001 	movt	r0, #1
    c134:	f24f 5288 	movw	r2, #62856	; 0xf588
    c138:	f2c0 0201 	movt	r2, #1
    c13c:	2121      	movs	r1, #33	; 0x21
    c13e:	f00b fc39 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c142:	defe      	udf	#254	; 0xfe
    c144:	f24f 4090 	movw	r0, #62608	; 0xf490
    c148:	f2c0 0001 	movt	r0, #1
    c14c:	f24f 5288 	movw	r2, #62856	; 0xf588
    c150:	f2c0 0201 	movt	r2, #1
    c154:	2121      	movs	r1, #33	; 0x21
    c156:	f00b fc2d 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c15a:	defe      	udf	#254	; 0xfe

0000c15c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17h49979d340fb4b88bE>:

    /// Play beep sound.
    fn beep(&mut self) {
    c15c:	b081      	sub	sp, #4
    c15e:	9000      	str	r0, [sp, #0]
        //  TODO: Vibrate? Flash?
    }
    c160:	b001      	add	sp, #4
    c162:	4770      	bx	lr

0000c164 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hee40d1bd360ff8d9E>:

    /// Called in every step; return true for shutdown.
    fn sched(&mut self) -> bool {
    c164:	b580      	push	{r7, lr}
    c166:	b084      	sub	sp, #16
    c168:	9003      	str	r0, [sp, #12]
        //  console::print("sched\n"); console::flush(); ////

        //  If no screen update, return
        if self.update_left == 0 && self.update_right == 0 &&
    c16a:	7801      	ldrb	r1, [r0, #0]
    c16c:	2900      	cmp	r1, #0
    c16e:	9001      	str	r0, [sp, #4]
    c170:	d02e      	beq.n	c1d0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hee40d1bd360ff8d9E+0x6c>
    c172:	e029      	b.n	c1c8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hee40d1bd360ff8d9E+0x64>
    c174:	2001      	movs	r0, #1
    c176:	f88d 0009 	strb.w	r0, [sp, #9]
    c17a:	e008      	b.n	c18e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hee40d1bd360ff8d9E+0x2a>
    c17c:	2000      	movs	r0, #0
    c17e:	f88d 0009 	strb.w	r0, [sp, #9]
    c182:	e004      	b.n	c18e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hee40d1bd360ff8d9E+0x2a>
            self.update_top == 0 && self.update_bottom == 0 { return false; }
    c184:	9801      	ldr	r0, [sp, #4]
    c186:	78c1      	ldrb	r1, [r0, #3]
        if self.update_left == 0 && self.update_right == 0 &&
    c188:	2900      	cmp	r1, #0
    c18a:	d0f3      	beq.n	c174 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hee40d1bd360ff8d9E+0x10>
    c18c:	e7f6      	b.n	c17c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hee40d1bd360ff8d9E+0x18>
    c18e:	f89d 0009 	ldrb.w	r0, [sp, #9]
    c192:	07c0      	lsls	r0, r0, #31
    c194:	2800      	cmp	r0, #0
    c196:	d12c      	bne.n	c1f2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hee40d1bd360ff8d9E+0x8e>
    c198:	e025      	b.n	c1e6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hee40d1bd360ff8d9E+0x82>
    c19a:	2001      	movs	r0, #1
    c19c:	f88d 000a 	strb.w	r0, [sp, #10]
    c1a0:	e008      	b.n	c1b4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hee40d1bd360ff8d9E+0x50>
    c1a2:	2000      	movs	r0, #0
    c1a4:	f88d 000a 	strb.w	r0, [sp, #10]
    c1a8:	e004      	b.n	c1b4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hee40d1bd360ff8d9E+0x50>
            self.update_top == 0 && self.update_bottom == 0 { return false; }
    c1aa:	9801      	ldr	r0, [sp, #4]
    c1ac:	7841      	ldrb	r1, [r0, #1]
        if self.update_left == 0 && self.update_right == 0 &&
    c1ae:	2900      	cmp	r1, #0
    c1b0:	d0f3      	beq.n	c19a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hee40d1bd360ff8d9E+0x36>
    c1b2:	e7f6      	b.n	c1a2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hee40d1bd360ff8d9E+0x3e>
    c1b4:	f89d 000a 	ldrb.w	r0, [sp, #10]
    c1b8:	07c0      	lsls	r0, r0, #31
    c1ba:	2800      	cmp	r0, #0
    c1bc:	d1e2      	bne.n	c184 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hee40d1bd360ff8d9E+0x20>
    c1be:	e7dd      	b.n	c17c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hee40d1bd360ff8d9E+0x18>
    c1c0:	2001      	movs	r0, #1
    c1c2:	f88d 000b 	strb.w	r0, [sp, #11]
    c1c6:	e008      	b.n	c1da <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hee40d1bd360ff8d9E+0x76>
    c1c8:	2000      	movs	r0, #0
    c1ca:	f88d 000b 	strb.w	r0, [sp, #11]
    c1ce:	e004      	b.n	c1da <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hee40d1bd360ff8d9E+0x76>
    c1d0:	9801      	ldr	r0, [sp, #4]
    c1d2:	7881      	ldrb	r1, [r0, #2]
    c1d4:	2900      	cmp	r1, #0
    c1d6:	d0f3      	beq.n	c1c0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hee40d1bd360ff8d9E+0x5c>
    c1d8:	e7f6      	b.n	c1c8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hee40d1bd360ff8d9E+0x64>
    c1da:	f89d 000b 	ldrb.w	r0, [sp, #11]
    c1de:	07c0      	lsls	r0, r0, #31
    c1e0:	2800      	cmp	r0, #0
    c1e2:	d1e2      	bne.n	c1aa <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hee40d1bd360ff8d9E+0x46>
    c1e4:	e7dd      	b.n	c1a2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hee40d1bd360ff8d9E+0x3e>

        //  If emulator is preparing the initial screen, refresh the screen later
        if !self.is_interactive { return false; }
    c1e6:	9801      	ldr	r0, [sp, #4]
    c1e8:	7901      	ldrb	r1, [r0, #4]
    c1ea:	07c9      	lsls	r1, r1, #31
    c1ec:	2900      	cmp	r1, #0
    c1ee:	d00b      	beq.n	c208 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hee40d1bd360ff8d9E+0xa4>
    c1f0:	e007      	b.n	c202 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hee40d1bd360ff8d9E+0x9e>
    c1f2:	2000      	movs	r0, #0
            self.update_top == 0 && self.update_bottom == 0 { return false; }
    c1f4:	f88d 0008 	strb.w	r0, [sp, #8]
    c1f8:	e7ff      	b.n	c1fa <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hee40d1bd360ff8d9E+0x96>
        self.update_right = 0;
        self.update_bottom = 0;

        //  Return false to indicate no shutdown
        false
    }
    c1fa:	f89d 0008 	ldrb.w	r0, [sp, #8]
    c1fe:	b004      	add	sp, #16
    c200:	bd80      	pop	{r7, pc}
        unsafe { hal_watchdog_tickle() };
    c202:	f00e fb15 	bl	1a830 <hal_watchdog_tickle>
    c206:	e003      	b.n	c210 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hee40d1bd360ff8d9E+0xac>
    c208:	2000      	movs	r0, #0
        if !self.is_interactive { return false; }
    c20a:	f88d 0008 	strb.w	r0, [sp, #8]
    c20e:	e7f4      	b.n	c1fa <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hee40d1bd360ff8d9E+0x96>
    c210:	2001      	movs	r0, #1
        unsafe { os::os_time_delay(1) };
    c212:	f00f fd5b 	bl	1bccc <os_time_delay>
    c216:	e7ff      	b.n	c218 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hee40d1bd360ff8d9E+0xb4>
        render_region(
    c218:	9801      	ldr	r0, [sp, #4]
    c21a:	7800      	ldrb	r0, [r0, #0]
    c21c:	9901      	ldr	r1, [sp, #4]
    c21e:	7849      	ldrb	r1, [r1, #1]
    c220:	9a01      	ldr	r2, [sp, #4]
    c222:	7892      	ldrb	r2, [r2, #2]
    c224:	9b01      	ldr	r3, [sp, #4]
    c226:	78db      	ldrb	r3, [r3, #3]
    c228:	f000 f80a 	bl	c240 <_ZN3app5chip813render_region17h63a2f42595e40485E>
    c22c:	e7ff      	b.n	c22e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hee40d1bd360ff8d9E+0xca>
    c22e:	2000      	movs	r0, #0
        self.update_left = 0;
    c230:	9901      	ldr	r1, [sp, #4]
    c232:	7008      	strb	r0, [r1, #0]
        self.update_top = 0;
    c234:	7048      	strb	r0, [r1, #1]
        self.update_right = 0;
    c236:	7088      	strb	r0, [r1, #2]
        self.update_bottom = 0;
    c238:	70c8      	strb	r0, [r1, #3]
        false
    c23a:	f88d 0008 	strb.w	r0, [sp, #8]
    }
    c23e:	e7dc      	b.n	c1fa <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hee40d1bd360ff8d9E+0x96>

0000c240 <_ZN3app5chip813render_region17h63a2f42595e40485E>:
}

/// Render the Virtual Screen region
fn render_region(left: u8, top: u8, right: u8, bottom: u8) {
    c240:	b5f0      	push	{r4, r5, r6, r7, lr}
    c242:	b095      	sub	sp, #84	; 0x54
    c244:	fa5f fc80 	uxtb.w	ip, r0
    c248:	fa5f fe82 	uxtb.w	lr, r2
    c24c:	461c      	mov	r4, r3
    c24e:	4615      	mov	r5, r2
    c250:	460e      	mov	r6, r1
    c252:	4607      	mov	r7, r0
    c254:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    c258:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    c25c:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
    c260:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    let width = right - left + 1;
    c264:	ebae 000c 	sub.w	r0, lr, ip
    c268:	b2c1      	uxtb	r1, r0
    c26a:	4602      	mov	r2, r0
    c26c:	4281      	cmp	r1, r0
    c26e:	9411      	str	r4, [sp, #68]	; 0x44
    c270:	9510      	str	r5, [sp, #64]	; 0x40
    c272:	960f      	str	r6, [sp, #60]	; 0x3c
    c274:	970e      	str	r7, [sp, #56]	; 0x38
    c276:	920d      	str	r2, [sp, #52]	; 0x34
    c278:	f040 80df 	bne.w	c43a <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1fa>
    c27c:	e7ff      	b.n	c27e <_ZN3app5chip813render_region17h63a2f42595e40485E+0x3e>
    c27e:	2001      	movs	r0, #1
    c280:	990d      	ldr	r1, [sp, #52]	; 0x34
    c282:	fa50 f081 	uxtab	r0, r0, r1
    c286:	b2c2      	uxtb	r2, r0
    c288:	4603      	mov	r3, r0
    c28a:	4282      	cmp	r2, r0
    c28c:	930c      	str	r3, [sp, #48]	; 0x30
    c28e:	f040 80e0 	bne.w	c452 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x212>
    c292:	e7ff      	b.n	c294 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x54>
    c294:	980c      	ldr	r0, [sp, #48]	; 0x30
    c296:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    let height = bottom - top + 1;
    c29a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c29c:	b2ca      	uxtb	r2, r1
    c29e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c2a0:	fa5f fc83 	uxtb.w	ip, r3
    c2a4:	ebac 0202 	sub.w	r2, ip, r2
    c2a8:	fa5f fc82 	uxtb.w	ip, r2
    c2ac:	4696      	mov	lr, r2
    c2ae:	4594      	cmp	ip, r2
    c2b0:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    c2b4:	f040 80d9 	bne.w	c46a <_ZN3app5chip813render_region17h63a2f42595e40485E+0x22a>
    c2b8:	e7ff      	b.n	c2ba <_ZN3app5chip813render_region17h63a2f42595e40485E+0x7a>
    c2ba:	2001      	movs	r0, #1
    c2bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c2be:	fa50 f081 	uxtab	r0, r0, r1
    c2c2:	b2c2      	uxtb	r2, r0
    c2c4:	4603      	mov	r3, r0
    c2c6:	4282      	cmp	r2, r0
    c2c8:	930a      	str	r3, [sp, #40]	; 0x28
    c2ca:	f040 80da 	bne.w	c482 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x242>
    c2ce:	e7ff      	b.n	c2d0 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x90>
    c2d0:	980a      	ldr	r0, [sp, #40]	; 0x28
    c2d2:	f88d 0051 	strb.w	r0, [sp, #81]	; 0x51
    //  If the update region is small, render with a single block
    if width + height <= BLOCK_WIDTH as u8 + BLOCK_HEIGHT as u8 {  //  Will not overflow SPI buffer
    c2d6:	990c      	ldr	r1, [sp, #48]	; 0x30
    c2d8:	b2ca      	uxtb	r2, r1
    c2da:	fa52 f280 	uxtab	r2, r2, r0
    c2de:	b2d3      	uxtb	r3, r2
    c2e0:	4694      	mov	ip, r2
    c2e2:	4293      	cmp	r3, r2
    c2e4:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    c2e8:	f040 80d7 	bne.w	c49a <_ZN3app5chip813render_region17h63a2f42595e40485E+0x25a>
    c2ec:	e7ff      	b.n	c2ee <_ZN3app5chip813render_region17h63a2f42595e40485E+0xae>
    c2ee:	9809      	ldr	r0, [sp, #36]	; 0x24
    c2f0:	b2c1      	uxtb	r1, r0
    c2f2:	2926      	cmp	r1, #38	; 0x26
    c2f4:	d307      	bcc.n	c306 <_ZN3app5chip813render_region17h63a2f42595e40485E+0xc6>
    c2f6:	e7ff      	b.n	c2f8 <_ZN3app5chip813render_region17h63a2f42595e40485E+0xb8>
        render_block(left, top, right, bottom);
    } else {
        //  If the update region is too big for a single block, break the region into blocks and render
        let mut x = left;
    c2f8:	980e      	ldr	r0, [sp, #56]	; 0x38
    c2fa:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
        let mut y = top;
    c2fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c300:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
        loop {
    c304:	e007      	b.n	c316 <_ZN3app5chip813render_region17h63a2f42595e40485E+0xd6>
        render_block(left, top, right, bottom);
    c306:	980e      	ldr	r0, [sp, #56]	; 0x38
    c308:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c30a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c30c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c30e:	f000 f918 	bl	c542 <_ZN3app5chip812render_block17hf14dcded684223a2E>
    c312:	e7ff      	b.n	c314 <_ZN3app5chip813render_region17h63a2f42595e40485E+0xd4>
    if width + height <= BLOCK_WIDTH as u8 + BLOCK_HEIGHT as u8 {  //  Will not overflow SPI buffer
    c314:	e08f      	b.n	c436 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1f6>
            let block_right = x + BLOCK_WIDTH as u8 - 1;
    c316:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
    c31a:	3020      	adds	r0, #32
    c31c:	b2c1      	uxtb	r1, r0
    c31e:	4602      	mov	r2, r0
    c320:	4281      	cmp	r1, r0
    c322:	9208      	str	r2, [sp, #32]
    c324:	f040 80c5 	bne.w	c4b2 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x272>
    c328:	e7ff      	b.n	c32a <_ZN3app5chip813render_region17h63a2f42595e40485E+0xea>
    c32a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c32e:	9908      	ldr	r1, [sp, #32]
    c330:	fa50 f081 	uxtab	r0, r0, r1
    c334:	b2c2      	uxtb	r2, r0
    c336:	4603      	mov	r3, r0
    c338:	4282      	cmp	r2, r0
    c33a:	9307      	str	r3, [sp, #28]
    c33c:	f040 80c5 	bne.w	c4ca <_ZN3app5chip813render_region17h63a2f42595e40485E+0x28a>
    c340:	e7ff      	b.n	c342 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x102>
    c342:	9807      	ldr	r0, [sp, #28]
    c344:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
            let block_bottom = y + BLOCK_HEIGHT as u8 - 1;
    c348:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
    c34c:	3105      	adds	r1, #5
    c34e:	b2ca      	uxtb	r2, r1
    c350:	460b      	mov	r3, r1
    c352:	428a      	cmp	r2, r1
    c354:	9306      	str	r3, [sp, #24]
    c356:	f040 80c4 	bne.w	c4e2 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x2a2>
    c35a:	e7ff      	b.n	c35c <_ZN3app5chip813render_region17h63a2f42595e40485E+0x11c>
    c35c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c360:	9906      	ldr	r1, [sp, #24]
    c362:	fa50 f081 	uxtab	r0, r0, r1
    c366:	b2c2      	uxtb	r2, r0
    c368:	4603      	mov	r3, r0
    c36a:	4282      	cmp	r2, r0
    c36c:	9305      	str	r3, [sp, #20]
    c36e:	f040 80c4 	bne.w	c4fa <_ZN3app5chip813render_region17h63a2f42595e40485E+0x2ba>
    c372:	e7ff      	b.n	c374 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x134>
    c374:	9805      	ldr	r0, [sp, #20]
    c376:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
            render_block(x, y,
    c37a:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
    c37e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
                if block_right  <= right  { block_right }  else { right },
    c382:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c384:	fa5f fc83 	uxtb.w	ip, r3
    c388:	f8dd e01c 	ldr.w	lr, [sp, #28]
    c38c:	fa5f f48e 	uxtb.w	r4, lr
    c390:	4564      	cmp	r4, ip
    c392:	9104      	str	r1, [sp, #16]
    c394:	9203      	str	r2, [sp, #12]
    c396:	d904      	bls.n	c3a2 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x162>
    c398:	e7ff      	b.n	c39a <_ZN3app5chip813render_region17h63a2f42595e40485E+0x15a>
    c39a:	9810      	ldr	r0, [sp, #64]	; 0x40
    c39c:	f88d 004a 	strb.w	r0, [sp, #74]	; 0x4a
    c3a0:	e003      	b.n	c3aa <_ZN3app5chip813render_region17h63a2f42595e40485E+0x16a>
    c3a2:	9807      	ldr	r0, [sp, #28]
    c3a4:	f88d 004a 	strb.w	r0, [sp, #74]	; 0x4a
    c3a8:	e7ff      	b.n	c3aa <_ZN3app5chip813render_region17h63a2f42595e40485E+0x16a>
                if block_bottom <= bottom { block_bottom } else { bottom }
    c3aa:	9811      	ldr	r0, [sp, #68]	; 0x44
    c3ac:	b2c1      	uxtb	r1, r0
    c3ae:	9a05      	ldr	r2, [sp, #20]
    c3b0:	b2d3      	uxtb	r3, r2
    c3b2:	428b      	cmp	r3, r1
    c3b4:	d904      	bls.n	c3c0 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x180>
    c3b6:	e7ff      	b.n	c3b8 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x178>
    c3b8:	9811      	ldr	r0, [sp, #68]	; 0x44
    c3ba:	f88d 004b 	strb.w	r0, [sp, #75]	; 0x4b
    c3be:	e003      	b.n	c3c8 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x188>
    c3c0:	9805      	ldr	r0, [sp, #20]
    c3c2:	f88d 004b 	strb.w	r0, [sp, #75]	; 0x4b
    c3c6:	e7ff      	b.n	c3c8 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x188>
            render_block(x, y,
    c3c8:	f89d 304b 	ldrb.w	r3, [sp, #75]	; 0x4b
    c3cc:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    c3d0:	9804      	ldr	r0, [sp, #16]
    c3d2:	9903      	ldr	r1, [sp, #12]
    c3d4:	f000 f8b5 	bl	c542 <_ZN3app5chip812render_block17hf14dcded684223a2E>
    c3d8:	e7ff      	b.n	c3da <_ZN3app5chip813render_region17h63a2f42595e40485E+0x19a>
            );  //  Will not overflow SPI buffer
            x += BLOCK_WIDTH as u8;
    c3da:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
    c3de:	3020      	adds	r0, #32
    c3e0:	b2c1      	uxtb	r1, r0
    c3e2:	4602      	mov	r2, r0
    c3e4:	4281      	cmp	r1, r0
    c3e6:	9202      	str	r2, [sp, #8]
    c3e8:	f040 8093 	bne.w	c512 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x2d2>
    c3ec:	e7ff      	b.n	c3ee <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1ae>
    c3ee:	9802      	ldr	r0, [sp, #8]
    c3f0:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
            if x > right {
    c3f4:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
    c3f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c3fa:	b2d3      	uxtb	r3, r2
    c3fc:	4299      	cmp	r1, r3
    c3fe:	d919      	bls.n	c434 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1f4>
    c400:	e7ff      	b.n	c402 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1c2>
                x = left;
    c402:	980e      	ldr	r0, [sp, #56]	; 0x38
    c404:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
                y += BLOCK_HEIGHT as u8;
    c408:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
    c40c:	3105      	adds	r1, #5
    c40e:	b2ca      	uxtb	r2, r1
    c410:	460b      	mov	r3, r1
    c412:	428a      	cmp	r2, r1
    c414:	9301      	str	r3, [sp, #4]
    c416:	f040 8088 	bne.w	c52a <_ZN3app5chip813render_region17h63a2f42595e40485E+0x2ea>
    c41a:	e7ff      	b.n	c41c <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1dc>
    c41c:	9801      	ldr	r0, [sp, #4]
    c41e:	f88d 0049 	strb.w	r0, [sp, #73]	; 0x49
                if y > bottom { break; }
    c422:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
    c426:	9a11      	ldr	r2, [sp, #68]	; 0x44
    c428:	b2d3      	uxtb	r3, r2
    c42a:	4299      	cmp	r1, r3
    c42c:	d801      	bhi.n	c432 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1f2>
    c42e:	e7ff      	b.n	c430 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1f0>
            if x > right {
    c430:	e000      	b.n	c434 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1f4>
    if width + height <= BLOCK_WIDTH as u8 + BLOCK_HEIGHT as u8 {  //  Will not overflow SPI buffer
    c432:	e000      	b.n	c436 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1f6>
        loop {
    c434:	e76f      	b.n	c316 <_ZN3app5chip813render_region17h63a2f42595e40485E+0xd6>
            }
        }
    }
}
    c436:	b015      	add	sp, #84	; 0x54
    c438:	bdf0      	pop	{r4, r5, r6, r7, pc}
    let width = right - left + 1;
    c43a:	f24f 50b0 	movw	r0, #62896	; 0xf5b0
    c43e:	f2c0 0001 	movt	r0, #1
    c442:	f24f 5298 	movw	r2, #62872	; 0xf598
    c446:	f2c0 0201 	movt	r2, #1
    c44a:	2121      	movs	r1, #33	; 0x21
    c44c:	f00b fab2 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c450:	defe      	udf	#254	; 0xfe
    c452:	f24f 40d0 	movw	r0, #62672	; 0xf4d0
    c456:	f2c0 0001 	movt	r0, #1
    c45a:	f24f 5298 	movw	r2, #62872	; 0xf598
    c45e:	f2c0 0201 	movt	r2, #1
    c462:	211c      	movs	r1, #28
    c464:	f00b faa6 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c468:	defe      	udf	#254	; 0xfe
    let height = bottom - top + 1;
    c46a:	f24f 50b0 	movw	r0, #62896	; 0xf5b0
    c46e:	f2c0 0001 	movt	r0, #1
    c472:	f24f 52d4 	movw	r2, #62932	; 0xf5d4
    c476:	f2c0 0201 	movt	r2, #1
    c47a:	2121      	movs	r1, #33	; 0x21
    c47c:	f00b fa9a 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c480:	defe      	udf	#254	; 0xfe
    c482:	f24f 40d0 	movw	r0, #62672	; 0xf4d0
    c486:	f2c0 0001 	movt	r0, #1
    c48a:	f24f 52d4 	movw	r2, #62932	; 0xf5d4
    c48e:	f2c0 0201 	movt	r2, #1
    c492:	211c      	movs	r1, #28
    c494:	f00b fa8e 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c498:	defe      	udf	#254	; 0xfe
    if width + height <= BLOCK_WIDTH as u8 + BLOCK_HEIGHT as u8 {  //  Will not overflow SPI buffer
    c49a:	f24f 40d0 	movw	r0, #62672	; 0xf4d0
    c49e:	f2c0 0001 	movt	r0, #1
    c4a2:	f24f 52e4 	movw	r2, #62948	; 0xf5e4
    c4a6:	f2c0 0201 	movt	r2, #1
    c4aa:	211c      	movs	r1, #28
    c4ac:	f00b fa82 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c4b0:	defe      	udf	#254	; 0xfe
            let block_right = x + BLOCK_WIDTH as u8 - 1;
    c4b2:	f24f 40d0 	movw	r0, #62672	; 0xf4d0
    c4b6:	f2c0 0001 	movt	r0, #1
    c4ba:	f24f 52f4 	movw	r2, #62964	; 0xf5f4
    c4be:	f2c0 0201 	movt	r2, #1
    c4c2:	211c      	movs	r1, #28
    c4c4:	f00b fa76 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c4c8:	defe      	udf	#254	; 0xfe
    c4ca:	f24f 50b0 	movw	r0, #62896	; 0xf5b0
    c4ce:	f2c0 0001 	movt	r0, #1
    c4d2:	f24f 52f4 	movw	r2, #62964	; 0xf5f4
    c4d6:	f2c0 0201 	movt	r2, #1
    c4da:	2121      	movs	r1, #33	; 0x21
    c4dc:	f00b fa6a 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c4e0:	defe      	udf	#254	; 0xfe
            let block_bottom = y + BLOCK_HEIGHT as u8 - 1;
    c4e2:	f24f 40d0 	movw	r0, #62672	; 0xf4d0
    c4e6:	f2c0 0001 	movt	r0, #1
    c4ea:	f24f 6204 	movw	r2, #62980	; 0xf604
    c4ee:	f2c0 0201 	movt	r2, #1
    c4f2:	211c      	movs	r1, #28
    c4f4:	f00b fa5e 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c4f8:	defe      	udf	#254	; 0xfe
    c4fa:	f24f 50b0 	movw	r0, #62896	; 0xf5b0
    c4fe:	f2c0 0001 	movt	r0, #1
    c502:	f24f 6204 	movw	r2, #62980	; 0xf604
    c506:	f2c0 0201 	movt	r2, #1
    c50a:	2121      	movs	r1, #33	; 0x21
    c50c:	f00b fa52 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c510:	defe      	udf	#254	; 0xfe
            x += BLOCK_WIDTH as u8;
    c512:	f24f 40d0 	movw	r0, #62672	; 0xf4d0
    c516:	f2c0 0001 	movt	r0, #1
    c51a:	f24f 6214 	movw	r2, #62996	; 0xf614
    c51e:	f2c0 0201 	movt	r2, #1
    c522:	211c      	movs	r1, #28
    c524:	f00b fa46 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c528:	defe      	udf	#254	; 0xfe
                y += BLOCK_HEIGHT as u8;
    c52a:	f24f 40d0 	movw	r0, #62672	; 0xf4d0
    c52e:	f2c0 0001 	movt	r0, #1
    c532:	f24f 6224 	movw	r2, #63012	; 0xf624
    c536:	f2c0 0201 	movt	r2, #1
    c53a:	211c      	movs	r1, #28
    c53c:	f00b fa3a 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c540:	defe      	udf	#254	; 0xfe

0000c542 <_ZN3app5chip812render_block17hf14dcded684223a2E>:

/// Render the Virtual Block
fn render_block(left: u8, top: u8, right: u8, bottom: u8) {
    c542:	b570      	push	{r4, r5, r6, lr}
    c544:	b090      	sub	sp, #64	; 0x40
    c546:	469c      	mov	ip, r3
    c548:	4696      	mov	lr, r2
    c54a:	460c      	mov	r4, r1
    c54c:	4605      	mov	r5, r0
    c54e:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
    c552:	f88d 1035 	strb.w	r1, [sp, #53]	; 0x35
    c556:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
    c55a:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    //  console::print("render "); console::printint(left as i32); console::print(", "); console::printint(top as i32); console::print(", "); console::printint(right as i32 - left as i32); console::print(", "); console::printint(bottom as i32 - top as i32); console::print("\n"); console::flush(); ////
    //  Create a new block for the region to be updated
    let mut block = PixelIterator::new(
    c55e:	466e      	mov	r6, sp
    c560:	6033      	str	r3, [r6, #0]
    c562:	ab0a      	add	r3, sp, #40	; 0x28
    c564:	9009      	str	r0, [sp, #36]	; 0x24
    c566:	4618      	mov	r0, r3
    c568:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c56a:	9108      	str	r1, [sp, #32]
    c56c:	4619      	mov	r1, r3
    c56e:	9e08      	ldr	r6, [sp, #32]
    c570:	9207      	str	r2, [sp, #28]
    c572:	4632      	mov	r2, r6
    c574:	9b07      	ldr	r3, [sp, #28]
    c576:	f8cd c018 	str.w	ip, [sp, #24]
    c57a:	f8cd e014 	str.w	lr, [sp, #20]
    c57e:	9404      	str	r4, [sp, #16]
    c580:	9503      	str	r5, [sp, #12]
    c582:	f000 f832 	bl	c5ea <_ZN3app5chip813PixelIterator3new17h822e2c1da3bbcd7bE>
    c586:	e7ff      	b.n	c588 <_ZN3app5chip812render_block17hf14dcded684223a2E+0x46>
    c588:	a80a      	add	r0, sp, #40	; 0x28
        left, top, 
        right, bottom,
    );
    //  Render the block
    let (left, top, right, bottom) = block.get_window();
    c58a:	f000 f849 	bl	c620 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE>
    c58e:	900e      	str	r0, [sp, #56]	; 0x38
    c590:	980e      	ldr	r0, [sp, #56]	; 0x38
    c592:	900c      	str	r0, [sp, #48]	; 0x30
    c594:	e7ff      	b.n	c596 <_ZN3app5chip812render_block17hf14dcded684223a2E+0x54>
    c596:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    c59a:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
    c59e:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
    c5a2:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
    c5a6:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    c5aa:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
    c5ae:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    c5b2:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
    druid::set_display_pixels(left as u16, top as u16, right as u16, bottom as u16,
    c5b6:	46ec      	mov	ip, sp
    c5b8:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
    c5bc:	f8cc e000 	str.w	lr, [ip]
    c5c0:	f000 fc2e 	bl	ce20 <_ZN22piet_embedded_graphics7display18set_display_pixels17hd0f20e3b4184e9a6E>
    c5c4:	9002      	str	r0, [sp, #8]
    c5c6:	e7ff      	b.n	c5c8 <_ZN3app5chip812render_block17hf14dcded684223a2E+0x86>
    c5c8:	9802      	ldr	r0, [sp, #8]
    c5ca:	f000 0001 	and.w	r0, r0, #1
    c5ce:	f24f 6134 	movw	r1, #63028	; 0xf634
    c5d2:	f2c0 0101 	movt	r1, #1
    c5d6:	f24f 6348 	movw	r3, #63048	; 0xf648
    c5da:	f2c0 0301 	movt	r3, #1
    c5de:	2211      	movs	r2, #17
    c5e0:	f008 fe43 	bl	1526a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
    c5e4:	e7ff      	b.n	c5e6 <_ZN3app5chip812render_block17hf14dcded684223a2E+0xa4>
        &mut block
    ).expect("set pixels failed");    
}
    c5e6:	b010      	add	sp, #64	; 0x40
    c5e8:	bd70      	pop	{r4, r5, r6, pc}

0000c5ea <_ZN3app5chip813PixelIterator3new17h822e2c1da3bbcd7bE>:
    block_bottom:    u8,
}

impl PixelIterator {
    /// Return a new PixelInterator for the block dimensions
    pub fn new(
    c5ea:	b570      	push	{r4, r5, r6, lr}
    c5ec:	b081      	sub	sp, #4
    c5ee:	f8dd c014 	ldr.w	ip, [sp, #20]
    c5f2:	469e      	mov	lr, r3
    c5f4:	4614      	mov	r4, r2
    c5f6:	460d      	mov	r5, r1
    c5f8:	f88d 1000 	strb.w	r1, [sp]
    c5fc:	f88d 2001 	strb.w	r2, [sp, #1]
    c600:	f88d 3002 	strb.w	r3, [sp, #2]
    c604:	f88d c003 	strb.w	ip, [sp, #3]
        //  End column number for block
        block_right:     u8,
        //  End row number for block
        block_bottom:    u8,        
    ) -> PixelIterator {
        PixelIterator {
    c608:	7001      	strb	r1, [r0, #0]
    c60a:	7042      	strb	r2, [r0, #1]
    c60c:	2600      	movs	r6, #0
    c60e:	7086      	strb	r6, [r0, #2]
    c610:	70c6      	strb	r6, [r0, #3]
    c612:	7101      	strb	r1, [r0, #4]
    c614:	7143      	strb	r3, [r0, #5]
    c616:	7182      	strb	r2, [r0, #6]
    c618:	f880 c007 	strb.w	ip, [r0, #7]
            x_offset: 0, 
            y_offset: 0,
            block_left, block_right,
            block_top, block_bottom,
        }
    }
    c61c:	b001      	add	sp, #4
    c61e:	bd70      	pop	{r4, r5, r6, pc}

0000c620 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE>:
    pub fn contains(&self, x: u8, y: u8) -> bool {
        x >= self.block_left && x <= self.block_right &&
            y >= self.block_top && y <= self.block_bottom
    }
    /// Return window of Physical Pixels: (left, top, right, bottom)
    pub fn get_window(&self) -> (u8, u8, u8, u8) {
    c620:	b580      	push	{r7, lr}
    c622:	b092      	sub	sp, #72	; 0x48
    c624:	9010      	str	r0, [sp, #64]	; 0x40
        let left: u8 = self.block_left as u8 * PIXEL_WIDTH as u8;
    c626:	7901      	ldrb	r1, [r0, #4]
    c628:	2203      	movs	r2, #3
    c62a:	fba1 1202 	umull	r1, r2, r1, r2
    c62e:	0a0b      	lsrs	r3, r1, #8
    c630:	f04f 0c00 	mov.w	ip, #0
    c634:	ebbc 2f11 	cmp.w	ip, r1, lsr #8
    c638:	bf18      	it	ne
    c63a:	2301      	movne	r3, #1
    c63c:	2a00      	cmp	r2, #0
    c63e:	bf18      	it	ne
    c640:	2201      	movne	r2, #1
    c642:	ea42 0203 	orr.w	r2, r2, r3
    c646:	2a00      	cmp	r2, #0
    c648:	900d      	str	r0, [sp, #52]	; 0x34
    c64a:	910c      	str	r1, [sp, #48]	; 0x30
    c64c:	f040 810a 	bne.w	c864 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x244>
    c650:	e7ff      	b.n	c652 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x32>
    c652:	980c      	ldr	r0, [sp, #48]	; 0x30
    c654:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
        let top: u8 = self.block_top as u8 * PIXEL_HEIGHT as u8; 
    c658:	990d      	ldr	r1, [sp, #52]	; 0x34
    c65a:	798a      	ldrb	r2, [r1, #6]
    c65c:	2305      	movs	r3, #5
    c65e:	fba2 2303 	umull	r2, r3, r2, r3
    c662:	ea4f 2c12 	mov.w	ip, r2, lsr #8
    c666:	f04f 0e00 	mov.w	lr, #0
    c66a:	ebbe 2f12 	cmp.w	lr, r2, lsr #8
    c66e:	bf18      	it	ne
    c670:	f04f 0c01 	movne.w	ip, #1
    c674:	2b00      	cmp	r3, #0
    c676:	bf18      	it	ne
    c678:	2301      	movne	r3, #1
    c67a:	ea43 030c 	orr.w	r3, r3, ip
    c67e:	2b00      	cmp	r3, #0
    c680:	920b      	str	r2, [sp, #44]	; 0x2c
    c682:	f040 80fb 	bne.w	c87c <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x25c>
    c686:	e7ff      	b.n	c688 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x68>
    c688:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c68a:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
        let right: u8 = left + (self.block_right - self.block_left + 1) * PIXEL_WIDTH as u8 - 1;
    c68e:	990d      	ldr	r1, [sp, #52]	; 0x34
    c690:	790a      	ldrb	r2, [r1, #4]
    c692:	794b      	ldrb	r3, [r1, #5]
    c694:	1a9a      	subs	r2, r3, r2
    c696:	b2d3      	uxtb	r3, r2
    c698:	4694      	mov	ip, r2
    c69a:	4293      	cmp	r3, r2
    c69c:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    c6a0:	f040 80f8 	bne.w	c894 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x274>
    c6a4:	e7ff      	b.n	c6a6 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x86>
    c6a6:	2001      	movs	r0, #1
    c6a8:	990a      	ldr	r1, [sp, #40]	; 0x28
    c6aa:	fa50 f081 	uxtab	r0, r0, r1
    c6ae:	b2c2      	uxtb	r2, r0
    c6b0:	4603      	mov	r3, r0
    c6b2:	4282      	cmp	r2, r0
    c6b4:	9309      	str	r3, [sp, #36]	; 0x24
    c6b6:	f040 80f9 	bne.w	c8ac <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x28c>
    c6ba:	e7ff      	b.n	c6bc <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x9c>
    c6bc:	9809      	ldr	r0, [sp, #36]	; 0x24
    c6be:	b2c1      	uxtb	r1, r0
    c6c0:	2203      	movs	r2, #3
    c6c2:	fba1 1202 	umull	r1, r2, r1, r2
    c6c6:	0a0b      	lsrs	r3, r1, #8
    c6c8:	f04f 0c00 	mov.w	ip, #0
    c6cc:	ebbc 2f11 	cmp.w	ip, r1, lsr #8
    c6d0:	bf18      	it	ne
    c6d2:	2301      	movne	r3, #1
    c6d4:	2a00      	cmp	r2, #0
    c6d6:	bf18      	it	ne
    c6d8:	2201      	movne	r2, #1
    c6da:	ea42 0203 	orr.w	r2, r2, r3
    c6de:	2a00      	cmp	r2, #0
    c6e0:	9108      	str	r1, [sp, #32]
    c6e2:	f040 80ef 	bne.w	c8c4 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x2a4>
    c6e6:	e7ff      	b.n	c6e8 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0xc8>
    c6e8:	980c      	ldr	r0, [sp, #48]	; 0x30
    c6ea:	b2c1      	uxtb	r1, r0
    c6ec:	9a08      	ldr	r2, [sp, #32]
    c6ee:	fa51 f182 	uxtab	r1, r1, r2
    c6f2:	b2cb      	uxtb	r3, r1
    c6f4:	468c      	mov	ip, r1
    c6f6:	428b      	cmp	r3, r1
    c6f8:	f8cd c01c 	str.w	ip, [sp, #28]
    c6fc:	f040 80ee 	bne.w	c8dc <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x2bc>
    c700:	e7ff      	b.n	c702 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0xe2>
    c702:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c706:	9907      	ldr	r1, [sp, #28]
    c708:	fa50 f081 	uxtab	r0, r0, r1
    c70c:	b2c2      	uxtb	r2, r0
    c70e:	4603      	mov	r3, r0
    c710:	4282      	cmp	r2, r0
    c712:	9306      	str	r3, [sp, #24]
    c714:	f040 80ee 	bne.w	c8f4 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x2d4>
    c718:	e7ff      	b.n	c71a <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0xfa>
    c71a:	9806      	ldr	r0, [sp, #24]
    c71c:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
        let bottom: u8 = top + (self.block_bottom - self.block_top + 1) * PIXEL_HEIGHT as u8 - 1;
    c720:	990d      	ldr	r1, [sp, #52]	; 0x34
    c722:	798a      	ldrb	r2, [r1, #6]
    c724:	79cb      	ldrb	r3, [r1, #7]
    c726:	1a9a      	subs	r2, r3, r2
    c728:	b2d3      	uxtb	r3, r2
    c72a:	4694      	mov	ip, r2
    c72c:	4293      	cmp	r3, r2
    c72e:	f8cd c014 	str.w	ip, [sp, #20]
    c732:	f040 80eb 	bne.w	c90c <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x2ec>
    c736:	e7ff      	b.n	c738 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x118>
    c738:	2001      	movs	r0, #1
    c73a:	9905      	ldr	r1, [sp, #20]
    c73c:	fa50 f081 	uxtab	r0, r0, r1
    c740:	b2c2      	uxtb	r2, r0
    c742:	4603      	mov	r3, r0
    c744:	4282      	cmp	r2, r0
    c746:	9304      	str	r3, [sp, #16]
    c748:	f040 80ec 	bne.w	c924 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x304>
    c74c:	e7ff      	b.n	c74e <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x12e>
    c74e:	9804      	ldr	r0, [sp, #16]
    c750:	b2c1      	uxtb	r1, r0
    c752:	2205      	movs	r2, #5
    c754:	fba1 1202 	umull	r1, r2, r1, r2
    c758:	0a0b      	lsrs	r3, r1, #8
    c75a:	f04f 0c00 	mov.w	ip, #0
    c75e:	ebbc 2f11 	cmp.w	ip, r1, lsr #8
    c762:	bf18      	it	ne
    c764:	2301      	movne	r3, #1
    c766:	2a00      	cmp	r2, #0
    c768:	bf18      	it	ne
    c76a:	2201      	movne	r2, #1
    c76c:	ea42 0203 	orr.w	r2, r2, r3
    c770:	2a00      	cmp	r2, #0
    c772:	9103      	str	r1, [sp, #12]
    c774:	f040 80e2 	bne.w	c93c <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x31c>
    c778:	e7ff      	b.n	c77a <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x15a>
    c77a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c77c:	b2c1      	uxtb	r1, r0
    c77e:	9a03      	ldr	r2, [sp, #12]
    c780:	fa51 f182 	uxtab	r1, r1, r2
    c784:	b2cb      	uxtb	r3, r1
    c786:	468c      	mov	ip, r1
    c788:	428b      	cmp	r3, r1
    c78a:	f8cd c008 	str.w	ip, [sp, #8]
    c78e:	f040 80e1 	bne.w	c954 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x334>
    c792:	e7ff      	b.n	c794 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x174>
    c794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c798:	9902      	ldr	r1, [sp, #8]
    c79a:	fa50 f081 	uxtab	r0, r0, r1
    c79e:	b2c2      	uxtb	r2, r0
    c7a0:	4603      	mov	r3, r0
    c7a2:	4282      	cmp	r2, r0
    c7a4:	9301      	str	r3, [sp, #4]
    c7a6:	f040 80e1 	bne.w	c96c <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x34c>
    c7aa:	e7ff      	b.n	c7ac <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x18c>
    c7ac:	9801      	ldr	r0, [sp, #4]
    c7ae:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
        assert!(left < 240 && top < 240 && right < 240 && bottom < 240, "overflow");
    c7b2:	990c      	ldr	r1, [sp, #48]	; 0x30
    c7b4:	b2ca      	uxtb	r2, r1
    c7b6:	2af0      	cmp	r2, #240	; 0xf0
    c7b8:	d32e      	bcc.n	c818 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1f8>
    c7ba:	e029      	b.n	c810 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1f0>
    c7bc:	2001      	movs	r0, #1
    c7be:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
    c7c2:	e008      	b.n	c7d6 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1b6>
    c7c4:	2000      	movs	r0, #0
    c7c6:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
    c7ca:	e004      	b.n	c7d6 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1b6>
    c7cc:	9801      	ldr	r0, [sp, #4]
    c7ce:	b2c1      	uxtb	r1, r0
    c7d0:	29f0      	cmp	r1, #240	; 0xf0
    c7d2:	d3f3      	bcc.n	c7bc <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x19c>
    c7d4:	e7f6      	b.n	c7c4 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1a4>
    c7d6:	f89d 003d 	ldrb.w	r0, [sp, #61]	; 0x3d
    c7da:	07c0      	lsls	r0, r0, #31
    c7dc:	2800      	cmp	r0, #0
    c7de:	d035      	beq.n	c84c <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x22c>
    c7e0:	e025      	b.n	c82e <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x20e>
    c7e2:	2001      	movs	r0, #1
    c7e4:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
    c7e8:	e008      	b.n	c7fc <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1dc>
    c7ea:	2000      	movs	r0, #0
    c7ec:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
    c7f0:	e004      	b.n	c7fc <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1dc>
    c7f2:	9806      	ldr	r0, [sp, #24]
    c7f4:	b2c1      	uxtb	r1, r0
    c7f6:	29f0      	cmp	r1, #240	; 0xf0
    c7f8:	d3f3      	bcc.n	c7e2 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1c2>
    c7fa:	e7f6      	b.n	c7ea <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1ca>
    c7fc:	f89d 003e 	ldrb.w	r0, [sp, #62]	; 0x3e
    c800:	07c0      	lsls	r0, r0, #31
    c802:	2800      	cmp	r0, #0
    c804:	d1e2      	bne.n	c7cc <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1ac>
    c806:	e7dd      	b.n	c7c4 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1a4>
    c808:	2001      	movs	r0, #1
    c80a:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
    c80e:	e008      	b.n	c822 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x202>
    c810:	2000      	movs	r0, #0
    c812:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
    c816:	e004      	b.n	c822 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x202>
    c818:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c81a:	b2c1      	uxtb	r1, r0
    c81c:	29f0      	cmp	r1, #240	; 0xf0
    c81e:	d3f3      	bcc.n	c808 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1e8>
    c820:	e7f6      	b.n	c810 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1f0>
    c822:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
    c826:	07c0      	lsls	r0, r0, #31
    c828:	2800      	cmp	r0, #0
    c82a:	d1e2      	bne.n	c7f2 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1d2>
    c82c:	e7dd      	b.n	c7ea <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1ca>
        ( left, top, right, bottom )
    c82e:	980c      	ldr	r0, [sp, #48]	; 0x30
    c830:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    c834:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c836:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
    c83a:	9a06      	ldr	r2, [sp, #24]
    c83c:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
    c840:	9b01      	ldr	r3, [sp, #4]
    c842:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
    }
    c846:	980e      	ldr	r0, [sp, #56]	; 0x38
    c848:	b012      	add	sp, #72	; 0x48
    c84a:	bd80      	pop	{r7, pc}
        assert!(left < 240 && top < 240 && right < 240 && bottom < 240, "overflow");
    c84c:	f24f 505c 	movw	r0, #62812	; 0xf55c
    c850:	f2c0 0001 	movt	r0, #1
    c854:	f24f 62d8 	movw	r2, #63192	; 0xf6d8
    c858:	f2c0 0201 	movt	r2, #1
    c85c:	2108      	movs	r1, #8
    c85e:	f00b f8a9 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c862:	defe      	udf	#254	; 0xfe
        let left: u8 = self.block_left as u8 * PIXEL_WIDTH as u8;
    c864:	f24f 4090 	movw	r0, #62608	; 0xf490
    c868:	f2c0 0001 	movt	r0, #1
    c86c:	f24f 6258 	movw	r2, #63064	; 0xf658
    c870:	f2c0 0201 	movt	r2, #1
    c874:	2121      	movs	r1, #33	; 0x21
    c876:	f00b f89d 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c87a:	defe      	udf	#254	; 0xfe
        let top: u8 = self.block_top as u8 * PIXEL_HEIGHT as u8; 
    c87c:	f24f 4090 	movw	r0, #62608	; 0xf490
    c880:	f2c0 0001 	movt	r0, #1
    c884:	f24f 6268 	movw	r2, #63080	; 0xf668
    c888:	f2c0 0201 	movt	r2, #1
    c88c:	2121      	movs	r1, #33	; 0x21
    c88e:	f00b f891 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c892:	defe      	udf	#254	; 0xfe
        let right: u8 = left + (self.block_right - self.block_left + 1) * PIXEL_WIDTH as u8 - 1;
    c894:	f24f 50b0 	movw	r0, #62896	; 0xf5b0
    c898:	f2c0 0001 	movt	r0, #1
    c89c:	f24f 6278 	movw	r2, #63096	; 0xf678
    c8a0:	f2c0 0201 	movt	r2, #1
    c8a4:	2121      	movs	r1, #33	; 0x21
    c8a6:	f00b f885 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c8aa:	defe      	udf	#254	; 0xfe
    c8ac:	f24f 40d0 	movw	r0, #62672	; 0xf4d0
    c8b0:	f2c0 0001 	movt	r0, #1
    c8b4:	f24f 6288 	movw	r2, #63112	; 0xf688
    c8b8:	f2c0 0201 	movt	r2, #1
    c8bc:	211c      	movs	r1, #28
    c8be:	f00b f879 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c8c2:	defe      	udf	#254	; 0xfe
    c8c4:	f24f 4090 	movw	r0, #62608	; 0xf490
    c8c8:	f2c0 0001 	movt	r0, #1
    c8cc:	f24f 6288 	movw	r2, #63112	; 0xf688
    c8d0:	f2c0 0201 	movt	r2, #1
    c8d4:	2121      	movs	r1, #33	; 0x21
    c8d6:	f00b f86d 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c8da:	defe      	udf	#254	; 0xfe
    c8dc:	f24f 40d0 	movw	r0, #62672	; 0xf4d0
    c8e0:	f2c0 0001 	movt	r0, #1
    c8e4:	f24f 6298 	movw	r2, #63128	; 0xf698
    c8e8:	f2c0 0201 	movt	r2, #1
    c8ec:	211c      	movs	r1, #28
    c8ee:	f00b f861 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c8f2:	defe      	udf	#254	; 0xfe
    c8f4:	f24f 50b0 	movw	r0, #62896	; 0xf5b0
    c8f8:	f2c0 0001 	movt	r0, #1
    c8fc:	f24f 6298 	movw	r2, #63128	; 0xf698
    c900:	f2c0 0201 	movt	r2, #1
    c904:	2121      	movs	r1, #33	; 0x21
    c906:	f00b f855 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c90a:	defe      	udf	#254	; 0xfe
        let bottom: u8 = top + (self.block_bottom - self.block_top + 1) * PIXEL_HEIGHT as u8 - 1;
    c90c:	f24f 50b0 	movw	r0, #62896	; 0xf5b0
    c910:	f2c0 0001 	movt	r0, #1
    c914:	f24f 62a8 	movw	r2, #63144	; 0xf6a8
    c918:	f2c0 0201 	movt	r2, #1
    c91c:	2121      	movs	r1, #33	; 0x21
    c91e:	f00b f849 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c922:	defe      	udf	#254	; 0xfe
    c924:	f24f 40d0 	movw	r0, #62672	; 0xf4d0
    c928:	f2c0 0001 	movt	r0, #1
    c92c:	f24f 62b8 	movw	r2, #63160	; 0xf6b8
    c930:	f2c0 0201 	movt	r2, #1
    c934:	211c      	movs	r1, #28
    c936:	f00b f83d 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c93a:	defe      	udf	#254	; 0xfe
    c93c:	f24f 4090 	movw	r0, #62608	; 0xf490
    c940:	f2c0 0001 	movt	r0, #1
    c944:	f24f 62b8 	movw	r2, #63160	; 0xf6b8
    c948:	f2c0 0201 	movt	r2, #1
    c94c:	2121      	movs	r1, #33	; 0x21
    c94e:	f00b f831 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c952:	defe      	udf	#254	; 0xfe
    c954:	f24f 40d0 	movw	r0, #62672	; 0xf4d0
    c958:	f2c0 0001 	movt	r0, #1
    c95c:	f24f 62c8 	movw	r2, #63176	; 0xf6c8
    c960:	f2c0 0201 	movt	r2, #1
    c964:	211c      	movs	r1, #28
    c966:	f00b f825 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c96a:	defe      	udf	#254	; 0xfe
    c96c:	f24f 50b0 	movw	r0, #62896	; 0xf5b0
    c970:	f2c0 0001 	movt	r0, #1
    c974:	f24f 62c8 	movw	r2, #63176	; 0xf6c8
    c978:	f2c0 0201 	movt	r2, #1
    c97c:	2121      	movs	r1, #33	; 0x21
    c97e:	f00b f819 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c982:	defe      	udf	#254	; 0xfe

0000c984 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE>:
impl Iterator for PixelIterator {
    /// This Iterator returns Physical Pixel colour words (16-bit)
    type Item = u16;

    /// Return the next Physical Pixel colour
    fn next(&mut self) -> Option<Self::Item> {
    c984:	b08c      	sub	sp, #48	; 0x30
    c986:	900a      	str	r0, [sp, #40]	; 0x28
        if self.y > self.block_bottom { return None; }  //  No more Physical Pixels
    c988:	7841      	ldrb	r1, [r0, #1]
    c98a:	79c2      	ldrb	r2, [r0, #7]
    c98c:	4291      	cmp	r1, r2
    c98e:	9007      	str	r0, [sp, #28]
    c990:	d805      	bhi.n	c99e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x1a>
    c992:	e7ff      	b.n	c994 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x10>

        if self.x >= SCREEN_WIDTH as u8 ||
    c994:	9807      	ldr	r0, [sp, #28]
    c996:	7801      	ldrb	r1, [r0, #0]
    c998:	293f      	cmp	r1, #63	; 0x3f
    c99a:	d80a      	bhi.n	c9b2 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x2e>
    c99c:	e011      	b.n	c9c2 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x3e>
    c99e:	2000      	movs	r0, #0
        if self.y > self.block_bottom { return None; }  //  No more Physical Pixels
    c9a0:	f8ad 0020 	strh.w	r0, [sp, #32]
    c9a4:	e7ff      	b.n	c9a6 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x22>
                }
            }
        }
        //  Return the Physical Pixel color
        return Some(color);
    }
    c9a6:	f8bd 0020 	ldrh.w	r0, [sp, #32]
    c9aa:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
    c9ae:	b00c      	add	sp, #48	; 0x30
    c9b0:	4770      	bx	lr
    c9b2:	2001      	movs	r0, #1
        if self.x >= SCREEN_WIDTH as u8 ||
    c9b4:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
    c9b8:	e008      	b.n	c9cc <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x48>
    c9ba:	2000      	movs	r0, #0
    c9bc:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
    c9c0:	e004      	b.n	c9cc <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x48>
            self.y >= SCREEN_HEIGHT as u8 { cortex_m::asm::bkpt(); }
    c9c2:	9807      	ldr	r0, [sp, #28]
    c9c4:	7841      	ldrb	r1, [r0, #1]
        if self.x >= SCREEN_WIDTH as u8 ||
    c9c6:	291f      	cmp	r1, #31
    c9c8:	d8f3      	bhi.n	c9b2 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x2e>
    c9ca:	e7f6      	b.n	c9ba <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x36>
    c9cc:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
    c9d0:	07c0      	lsls	r0, r0, #31
    c9d2:	2800      	cmp	r0, #0
    c9d4:	d003      	beq.n	c9de <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x5a>
    c9d6:	e7ff      	b.n	c9d8 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x54>
    c9d8:	be00      	bkpt	0x0000
            self.y >= SCREEN_HEIGHT as u8 { cortex_m::asm::bkpt(); }
    c9da:	e7ff      	b.n	c9dc <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x58>
        if self.x >= SCREEN_WIDTH as u8 ||
    c9dc:	e7ff      	b.n	c9de <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x5a>
        assert!(self.x < SCREEN_WIDTH as u8, "x overflow");
    c9de:	9807      	ldr	r0, [sp, #28]
    c9e0:	7801      	ldrb	r1, [r0, #0]
    c9e2:	293f      	cmp	r1, #63	; 0x3f
    c9e4:	d805      	bhi.n	c9f2 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x6e>
    c9e6:	e7ff      	b.n	c9e8 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x64>
        assert!(self.y < SCREEN_HEIGHT as u8, "y overflow");
    c9e8:	9807      	ldr	r0, [sp, #28]
    c9ea:	7841      	ldrb	r1, [r0, #1]
    c9ec:	291f      	cmp	r1, #31
    c9ee:	d816      	bhi.n	ca1e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x9a>
    c9f0:	e00b      	b.n	ca0a <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x86>
        assert!(self.x < SCREEN_WIDTH as u8, "x overflow");
    c9f2:	f24f 403c 	movw	r0, #62524	; 0xf43c
    c9f6:	f2c0 0001 	movt	r0, #1
    c9fa:	f24f 62e8 	movw	r2, #63208	; 0xf6e8
    c9fe:	f2c0 0201 	movt	r2, #1
    ca02:	210a      	movs	r1, #10
    ca04:	f00a ffd6 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ca08:	defe      	udf	#254	; 0xfe
        let i = self.x as usize + self.y as usize * SCREEN_WIDTH;
    ca0a:	9807      	ldr	r0, [sp, #28]
    ca0c:	7801      	ldrb	r1, [r0, #0]
    ca0e:	7842      	ldrb	r2, [r0, #1]
    ca10:	0192      	lsls	r2, r2, #6
    ca12:	2300      	movs	r3, #0
    ca14:	2b00      	cmp	r3, #0
    ca16:	9106      	str	r1, [sp, #24]
    ca18:	9205      	str	r2, [sp, #20]
    ca1a:	d17b      	bne.n	cb14 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x190>
    ca1c:	e00b      	b.n	ca36 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0xb2>
        assert!(self.y < SCREEN_HEIGHT as u8, "y overflow");
    ca1e:	f24f 4058 	movw	r0, #62552	; 0xf458
    ca22:	f2c0 0001 	movt	r0, #1
    ca26:	f24f 62f8 	movw	r2, #63224	; 0xf6f8
    ca2a:	f2c0 0201 	movt	r2, #1
    ca2e:	210a      	movs	r1, #10
    ca30:	f00a ffc0 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ca34:	defe      	udf	#254	; 0xfe
        let i = self.x as usize + self.y as usize * SCREEN_WIDTH;
    ca36:	9806      	ldr	r0, [sp, #24]
    ca38:	9905      	ldr	r1, [sp, #20]
    ca3a:	1842      	adds	r2, r0, r1
    ca3c:	4613      	mov	r3, r2
    ca3e:	4282      	cmp	r2, r0
    ca40:	9304      	str	r3, [sp, #16]
    ca42:	d373      	bcc.n	cb2c <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x1a8>
    ca44:	e7ff      	b.n	ca46 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0xc2>
    ca46:	9804      	ldr	r0, [sp, #16]
    ca48:	900b      	str	r0, [sp, #44]	; 0x2c
    ca4a:	2100      	movs	r1, #0
            if SCREEN_BUFFER[i] >= 128 { 0xffff } else { 0x0 }
    ca4c:	ebb1 2fd0 	cmp.w	r1, r0, lsr #11
    ca50:	d178      	bne.n	cb44 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x1c0>
    ca52:	e7ff      	b.n	ca54 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0xd0>
    ca54:	f244 2068 	movw	r0, #17000	; 0x4268
    ca58:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ca5c:	9904      	ldr	r1, [sp, #16]
    ca5e:	5640      	ldrsb	r0, [r0, r1]
    ca60:	2800      	cmp	r0, #0
    ca62:	d404      	bmi.n	ca6e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0xea>
    ca64:	e7ff      	b.n	ca66 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0xe2>
    ca66:	2000      	movs	r0, #0
    ca68:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
    ca6c:	e004      	b.n	ca78 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0xf4>
    ca6e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    ca72:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
    ca76:	e7ff      	b.n	ca78 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0xf4>
        self.x_offset += 1;
    ca78:	9807      	ldr	r0, [sp, #28]
    ca7a:	7881      	ldrb	r1, [r0, #2]
    ca7c:	3101      	adds	r1, #1
    ca7e:	b2ca      	uxtb	r2, r1
    ca80:	460b      	mov	r3, r1
    ca82:	428a      	cmp	r2, r1
    ca84:	9303      	str	r3, [sp, #12]
    ca86:	d167      	bne.n	cb58 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x1d4>
    ca88:	e7ff      	b.n	ca8a <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x106>
    ca8a:	9803      	ldr	r0, [sp, #12]
    ca8c:	9907      	ldr	r1, [sp, #28]
    ca8e:	7088      	strb	r0, [r1, #2]
        if self.x_offset >= PIXEL_WIDTH as u8 {
    ca90:	788a      	ldrb	r2, [r1, #2]
    ca92:	2a03      	cmp	r2, #3
    ca94:	d336      	bcc.n	cb04 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x180>
    ca96:	e7ff      	b.n	ca98 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x114>
    ca98:	2000      	movs	r0, #0
            self.x_offset = 0;
    ca9a:	9907      	ldr	r1, [sp, #28]
    ca9c:	7088      	strb	r0, [r1, #2]
            self.x += 1;
    ca9e:	7808      	ldrb	r0, [r1, #0]
    caa0:	3001      	adds	r0, #1
    caa2:	b2c2      	uxtb	r2, r0
    caa4:	4603      	mov	r3, r0
    caa6:	4282      	cmp	r2, r0
    caa8:	9302      	str	r3, [sp, #8]
    caaa:	d161      	bne.n	cb70 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x1ec>
    caac:	e7ff      	b.n	caae <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x12a>
    caae:	9802      	ldr	r0, [sp, #8]
    cab0:	9907      	ldr	r1, [sp, #28]
    cab2:	7008      	strb	r0, [r1, #0]
            if self.x > self.block_right {
    cab4:	780a      	ldrb	r2, [r1, #0]
    cab6:	794b      	ldrb	r3, [r1, #5]
    cab8:	429a      	cmp	r2, r3
    caba:	d922      	bls.n	cb02 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x17e>
    cabc:	e7ff      	b.n	cabe <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x13a>
                self.x = self.block_left;
    cabe:	9807      	ldr	r0, [sp, #28]
    cac0:	7901      	ldrb	r1, [r0, #4]
    cac2:	7001      	strb	r1, [r0, #0]
                self.y_offset += 1;
    cac4:	78c1      	ldrb	r1, [r0, #3]
    cac6:	3101      	adds	r1, #1
    cac8:	b2ca      	uxtb	r2, r1
    caca:	460b      	mov	r3, r1
    cacc:	428a      	cmp	r2, r1
    cace:	9301      	str	r3, [sp, #4]
    cad0:	d15a      	bne.n	cb88 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x204>
    cad2:	e7ff      	b.n	cad4 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x150>
    cad4:	9801      	ldr	r0, [sp, #4]
    cad6:	9907      	ldr	r1, [sp, #28]
    cad8:	70c8      	strb	r0, [r1, #3]
                if self.y_offset >= PIXEL_HEIGHT as u8 {
    cada:	78ca      	ldrb	r2, [r1, #3]
    cadc:	2a05      	cmp	r2, #5
    cade:	d30f      	bcc.n	cb00 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x17c>
    cae0:	e7ff      	b.n	cae2 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x15e>
    cae2:	2000      	movs	r0, #0
                    self.y_offset = 0;
    cae4:	9907      	ldr	r1, [sp, #28]
    cae6:	70c8      	strb	r0, [r1, #3]
                    self.y += 1;
    cae8:	7848      	ldrb	r0, [r1, #1]
    caea:	3001      	adds	r0, #1
    caec:	b2c2      	uxtb	r2, r0
    caee:	4603      	mov	r3, r0
    caf0:	4282      	cmp	r2, r0
    caf2:	9300      	str	r3, [sp, #0]
    caf4:	d154      	bne.n	cba0 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x21c>
    caf6:	e7ff      	b.n	caf8 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x174>
    caf8:	9800      	ldr	r0, [sp, #0]
    cafa:	9907      	ldr	r1, [sp, #28]
    cafc:	7048      	strb	r0, [r1, #1]
                if self.y_offset >= PIXEL_HEIGHT as u8 {
    cafe:	e7ff      	b.n	cb00 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x17c>
            if self.x > self.block_right {
    cb00:	e7ff      	b.n	cb02 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x17e>
        if self.x_offset >= PIXEL_WIDTH as u8 {
    cb02:	e7ff      	b.n	cb04 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x180>
        return Some(color);
    cb04:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
    cb08:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
    cb0c:	2001      	movs	r0, #1
    cb0e:	f8ad 0020 	strh.w	r0, [sp, #32]
    cb12:	e748      	b.n	c9a6 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x22>
        let i = self.x as usize + self.y as usize * SCREEN_WIDTH;
    cb14:	f24f 4090 	movw	r0, #62608	; 0xf490
    cb18:	f2c0 0001 	movt	r0, #1
    cb1c:	f24f 7208 	movw	r2, #63240	; 0xf708
    cb20:	f2c0 0201 	movt	r2, #1
    cb24:	2121      	movs	r1, #33	; 0x21
    cb26:	f00a ff45 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    cb2a:	defe      	udf	#254	; 0xfe
    cb2c:	f24f 40d0 	movw	r0, #62672	; 0xf4d0
    cb30:	f2c0 0001 	movt	r0, #1
    cb34:	f24f 7218 	movw	r2, #63256	; 0xf718
    cb38:	f2c0 0201 	movt	r2, #1
    cb3c:	211c      	movs	r1, #28
    cb3e:	f00a ff39 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    cb42:	defe      	udf	#254	; 0xfe
            if SCREEN_BUFFER[i] >= 128 { 0xffff } else { 0x0 }
    cb44:	f24f 7028 	movw	r0, #63272	; 0xf728
    cb48:	f2c0 0001 	movt	r0, #1
    cb4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    cb50:	9904      	ldr	r1, [sp, #16]
    cb52:	f00a ff45 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    cb56:	defe      	udf	#254	; 0xfe
        self.x_offset += 1;
    cb58:	f24f 40d0 	movw	r0, #62672	; 0xf4d0
    cb5c:	f2c0 0001 	movt	r0, #1
    cb60:	f24f 7238 	movw	r2, #63288	; 0xf738
    cb64:	f2c0 0201 	movt	r2, #1
    cb68:	211c      	movs	r1, #28
    cb6a:	f00a ff23 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    cb6e:	defe      	udf	#254	; 0xfe
            self.x += 1;
    cb70:	f24f 40d0 	movw	r0, #62672	; 0xf4d0
    cb74:	f2c0 0001 	movt	r0, #1
    cb78:	f24f 7248 	movw	r2, #63304	; 0xf748
    cb7c:	f2c0 0201 	movt	r2, #1
    cb80:	211c      	movs	r1, #28
    cb82:	f00a ff17 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    cb86:	defe      	udf	#254	; 0xfe
                self.y_offset += 1;
    cb88:	f24f 40d0 	movw	r0, #62672	; 0xf4d0
    cb8c:	f2c0 0001 	movt	r0, #1
    cb90:	f24f 7258 	movw	r2, #63320	; 0xf758
    cb94:	f2c0 0201 	movt	r2, #1
    cb98:	211c      	movs	r1, #28
    cb9a:	f00a ff0b 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    cb9e:	defe      	udf	#254	; 0xfe
                    self.y += 1;
    cba0:	f24f 40d0 	movw	r0, #62672	; 0xf4d0
    cba4:	f2c0 0001 	movt	r0, #1
    cba8:	f24f 7268 	movw	r2, #63336	; 0xf768
    cbac:	f2c0 0201 	movt	r2, #1
    cbb0:	211c      	movs	r1, #28
    cbb2:	f00a feff 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    cbb6:	defe      	udf	#254	; 0xfe

0000cbb8 <_ZN3app5chip812handle_touch17habca32c74e5cefadE>:
}

pub fn handle_touch(_x: u16, _y: u16) { 
    cbb8:	b580      	push	{r7, lr}
    cbba:	b084      	sub	sp, #16
    cbbc:	460a      	mov	r2, r1
    cbbe:	4603      	mov	r3, r0
    cbc0:	f8ad 000c 	strh.w	r0, [sp, #12]
    cbc4:	f8ad 100e 	strh.w	r1, [sp, #14]
    console::print("CHIP8 touch not handled\n"); console::flush(); 
    cbc8:	f24f 7078 	movw	r0, #63352	; 0xf778
    cbcc:	f2c0 0001 	movt	r0, #1
    cbd0:	2118      	movs	r1, #24
    cbd2:	9202      	str	r2, [sp, #8]
    cbd4:	9301      	str	r3, [sp, #4]
    cbd6:	f7fc fa0b 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    cbda:	e7ff      	b.n	cbdc <_ZN3app5chip812handle_touch17habca32c74e5cefadE+0x24>
    cbdc:	f7fc fa4e 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    cbe0:	e7ff      	b.n	cbe2 <_ZN3app5chip812handle_touch17habca32c74e5cefadE+0x2a>
}
    cbe2:	b004      	add	sp, #16
    cbe4:	bd80      	pop	{r7, pc}

0000cbe6 <_ZN4core6option15Option$LT$T$GT$3map17h4590aa2e515a0418E>:
    cbe6:	b580      	push	{r7, lr}
    cbe8:	b08c      	sub	sp, #48	; 0x30
    cbea:	9103      	str	r1, [sp, #12]
    cbec:	9204      	str	r2, [sp, #16]
    cbee:	930a      	str	r3, [sp, #40]	; 0x28
    cbf0:	2100      	movs	r1, #0
    cbf2:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    cbf6:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    cbfa:	2101      	movs	r1, #1
    cbfc:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    cc00:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    cc04:	9903      	ldr	r1, [sp, #12]
    cc06:	2900      	cmp	r1, #0
    cc08:	9302      	str	r3, [sp, #8]
    cc0a:	9001      	str	r0, [sp, #4]
    cc0c:	d001      	beq.n	cc12 <_ZN4core6option15Option$LT$T$GT$3map17h4590aa2e515a0418E+0x2c>
    cc0e:	e7ff      	b.n	cc10 <_ZN4core6option15Option$LT$T$GT$3map17h4590aa2e515a0418E+0x2a>
    cc10:	e004      	b.n	cc1c <_ZN4core6option15Option$LT$T$GT$3map17h4590aa2e515a0418E+0x36>
    cc12:	2000      	movs	r0, #0
    cc14:	9901      	ldr	r1, [sp, #4]
    cc16:	6008      	str	r0, [r1, #0]
    cc18:	e020      	b.n	cc5c <_ZN4core6option15Option$LT$T$GT$3map17h4590aa2e515a0418E+0x76>
    cc1a:	defe      	udf	#254	; 0xfe
    cc1c:	2000      	movs	r0, #0
    cc1e:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    cc22:	9904      	ldr	r1, [sp, #16]
    cc24:	910b      	str	r1, [sp, #44]	; 0x2c
    cc26:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    cc2a:	9108      	str	r1, [sp, #32]
    cc2c:	9a08      	ldr	r2, [sp, #32]
    cc2e:	a805      	add	r0, sp, #20
    cc30:	9902      	ldr	r1, [sp, #8]
    cc32:	f000 fa57 	bl	d0e4 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h0cf1484d4454de12E>
    cc36:	e7ff      	b.n	cc38 <_ZN4core6option15Option$LT$T$GT$3map17h4590aa2e515a0418E+0x52>
    cc38:	9805      	ldr	r0, [sp, #20]
    cc3a:	9906      	ldr	r1, [sp, #24]
    cc3c:	9a07      	ldr	r2, [sp, #28]
    cc3e:	9b01      	ldr	r3, [sp, #4]
    cc40:	60da      	str	r2, [r3, #12]
    cc42:	6099      	str	r1, [r3, #8]
    cc44:	6058      	str	r0, [r3, #4]
    cc46:	2001      	movs	r0, #1
    cc48:	6018      	str	r0, [r3, #0]
    cc4a:	e007      	b.n	cc5c <_ZN4core6option15Option$LT$T$GT$3map17h4590aa2e515a0418E+0x76>
    cc4c:	9803      	ldr	r0, [sp, #12]
    cc4e:	2801      	cmp	r0, #1
    cc50:	d00c      	beq.n	cc6c <_ZN4core6option15Option$LT$T$GT$3map17h4590aa2e515a0418E+0x86>
    cc52:	e015      	b.n	cc80 <_ZN4core6option15Option$LT$T$GT$3map17h4590aa2e515a0418E+0x9a>
    cc54:	2000      	movs	r0, #0
    cc56:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    cc5a:	e7f7      	b.n	cc4c <_ZN4core6option15Option$LT$T$GT$3map17h4590aa2e515a0418E+0x66>
    cc5c:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
    cc60:	07c0      	lsls	r0, r0, #31
    cc62:	2800      	cmp	r0, #0
    cc64:	d1f6      	bne.n	cc54 <_ZN4core6option15Option$LT$T$GT$3map17h4590aa2e515a0418E+0x6e>
    cc66:	e7f1      	b.n	cc4c <_ZN4core6option15Option$LT$T$GT$3map17h4590aa2e515a0418E+0x66>
    cc68:	b00c      	add	sp, #48	; 0x30
    cc6a:	bd80      	pop	{r7, pc}
    cc6c:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    cc70:	07c0      	lsls	r0, r0, #31
    cc72:	2800      	cmp	r0, #0
    cc74:	d0f8      	beq.n	cc68 <_ZN4core6option15Option$LT$T$GT$3map17h4590aa2e515a0418E+0x82>
    cc76:	e7ff      	b.n	cc78 <_ZN4core6option15Option$LT$T$GT$3map17h4590aa2e515a0418E+0x92>
    cc78:	2000      	movs	r0, #0
    cc7a:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    cc7e:	e7f3      	b.n	cc68 <_ZN4core6option15Option$LT$T$GT$3map17h4590aa2e515a0418E+0x82>
    cc80:	e7f2      	b.n	cc68 <_ZN4core6option15Option$LT$T$GT$3map17h4590aa2e515a0418E+0x82>

0000cc82 <_ZN4core6option15Option$LT$T$GT$3map17h777637a15c6c2d41E>:
    cc82:	b580      	push	{r7, lr}
    cc84:	b08a      	sub	sp, #40	; 0x28
    cc86:	9104      	str	r1, [sp, #16]
    cc88:	9205      	str	r2, [sp, #20]
    cc8a:	9308      	str	r3, [sp, #32]
    cc8c:	2100      	movs	r1, #0
    cc8e:	f88d 101e 	strb.w	r1, [sp, #30]
    cc92:	f88d 101f 	strb.w	r1, [sp, #31]
    cc96:	2101      	movs	r1, #1
    cc98:	f88d 101f 	strb.w	r1, [sp, #31]
    cc9c:	f88d 101e 	strb.w	r1, [sp, #30]
    cca0:	9904      	ldr	r1, [sp, #16]
    cca2:	2900      	cmp	r1, #0
    cca4:	9303      	str	r3, [sp, #12]
    cca6:	9002      	str	r0, [sp, #8]
    cca8:	d001      	beq.n	ccae <_ZN4core6option15Option$LT$T$GT$3map17h777637a15c6c2d41E+0x2c>
    ccaa:	e7ff      	b.n	ccac <_ZN4core6option15Option$LT$T$GT$3map17h777637a15c6c2d41E+0x2a>
    ccac:	e004      	b.n	ccb8 <_ZN4core6option15Option$LT$T$GT$3map17h777637a15c6c2d41E+0x36>
    ccae:	2000      	movs	r0, #0
    ccb0:	9902      	ldr	r1, [sp, #8]
    ccb2:	6008      	str	r0, [r1, #0]
    ccb4:	e01f      	b.n	ccf6 <_ZN4core6option15Option$LT$T$GT$3map17h777637a15c6c2d41E+0x74>
    ccb6:	defe      	udf	#254	; 0xfe
    ccb8:	2000      	movs	r0, #0
    ccba:	f88d 001f 	strb.w	r0, [sp, #31]
    ccbe:	9905      	ldr	r1, [sp, #20]
    ccc0:	9109      	str	r1, [sp, #36]	; 0x24
    ccc2:	f88d 001e 	strb.w	r0, [sp, #30]
    ccc6:	9106      	str	r1, [sp, #24]
    ccc8:	9906      	ldr	r1, [sp, #24]
    ccca:	9803      	ldr	r0, [sp, #12]
    cccc:	f000 fa14 	bl	d0f8 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h3b730fc436db22b7E>
    ccd0:	9001      	str	r0, [sp, #4]
    ccd2:	9100      	str	r1, [sp, #0]
    ccd4:	e7ff      	b.n	ccd6 <_ZN4core6option15Option$LT$T$GT$3map17h777637a15c6c2d41E+0x54>
    ccd6:	9801      	ldr	r0, [sp, #4]
    ccd8:	9902      	ldr	r1, [sp, #8]
    ccda:	6048      	str	r0, [r1, #4]
    ccdc:	9a00      	ldr	r2, [sp, #0]
    ccde:	608a      	str	r2, [r1, #8]
    cce0:	2301      	movs	r3, #1
    cce2:	600b      	str	r3, [r1, #0]
    cce4:	e007      	b.n	ccf6 <_ZN4core6option15Option$LT$T$GT$3map17h777637a15c6c2d41E+0x74>
    cce6:	9804      	ldr	r0, [sp, #16]
    cce8:	2801      	cmp	r0, #1
    ccea:	d00c      	beq.n	cd06 <_ZN4core6option15Option$LT$T$GT$3map17h777637a15c6c2d41E+0x84>
    ccec:	e015      	b.n	cd1a <_ZN4core6option15Option$LT$T$GT$3map17h777637a15c6c2d41E+0x98>
    ccee:	2000      	movs	r0, #0
    ccf0:	f88d 001e 	strb.w	r0, [sp, #30]
    ccf4:	e7f7      	b.n	cce6 <_ZN4core6option15Option$LT$T$GT$3map17h777637a15c6c2d41E+0x64>
    ccf6:	f89d 001e 	ldrb.w	r0, [sp, #30]
    ccfa:	07c0      	lsls	r0, r0, #31
    ccfc:	2800      	cmp	r0, #0
    ccfe:	d1f6      	bne.n	ccee <_ZN4core6option15Option$LT$T$GT$3map17h777637a15c6c2d41E+0x6c>
    cd00:	e7f1      	b.n	cce6 <_ZN4core6option15Option$LT$T$GT$3map17h777637a15c6c2d41E+0x64>
    cd02:	b00a      	add	sp, #40	; 0x28
    cd04:	bd80      	pop	{r7, pc}
    cd06:	f89d 001f 	ldrb.w	r0, [sp, #31]
    cd0a:	07c0      	lsls	r0, r0, #31
    cd0c:	2800      	cmp	r0, #0
    cd0e:	d0f8      	beq.n	cd02 <_ZN4core6option15Option$LT$T$GT$3map17h777637a15c6c2d41E+0x80>
    cd10:	e7ff      	b.n	cd12 <_ZN4core6option15Option$LT$T$GT$3map17h777637a15c6c2d41E+0x90>
    cd12:	2000      	movs	r0, #0
    cd14:	f88d 001f 	strb.w	r0, [sp, #31]
    cd18:	e7f3      	b.n	cd02 <_ZN4core6option15Option$LT$T$GT$3map17h777637a15c6c2d41E+0x80>
    cd1a:	e7f2      	b.n	cd02 <_ZN4core6option15Option$LT$T$GT$3map17h777637a15c6c2d41E+0x80>

0000cd1c <_ZN4core6option15Option$LT$T$GT$5ok_or17he08fd88bb8f02d0aE>:
    cd1c:	b085      	sub	sp, #20
    cd1e:	9000      	str	r0, [sp, #0]
    cd20:	2000      	movs	r0, #0
    cd22:	f88d 000b 	strb.w	r0, [sp, #11]
    cd26:	f88d 000a 	strb.w	r0, [sp, #10]
    cd2a:	2001      	movs	r0, #1
    cd2c:	f88d 000b 	strb.w	r0, [sp, #11]
    cd30:	f88d 000a 	strb.w	r0, [sp, #10]
    cd34:	9800      	ldr	r0, [sp, #0]
    cd36:	2800      	cmp	r0, #0
    cd38:	4601      	mov	r1, r0
    cd3a:	bf18      	it	ne
    cd3c:	2101      	movne	r1, #1
    cd3e:	2800      	cmp	r0, #0
    cd40:	d001      	beq.n	cd46 <_ZN4core6option15Option$LT$T$GT$5ok_or17he08fd88bb8f02d0aE+0x2a>
    cd42:	e7ff      	b.n	cd44 <_ZN4core6option15Option$LT$T$GT$5ok_or17he08fd88bb8f02d0aE+0x28>
    cd44:	e005      	b.n	cd52 <_ZN4core6option15Option$LT$T$GT$5ok_or17he08fd88bb8f02d0aE+0x36>
    cd46:	2000      	movs	r0, #0
    cd48:	f88d 000a 	strb.w	r0, [sp, #10]
    cd4c:	9001      	str	r0, [sp, #4]
    cd4e:	e007      	b.n	cd60 <_ZN4core6option15Option$LT$T$GT$5ok_or17he08fd88bb8f02d0aE+0x44>
    cd50:	defe      	udf	#254	; 0xfe
    cd52:	2000      	movs	r0, #0
    cd54:	f88d 000b 	strb.w	r0, [sp, #11]
    cd58:	9800      	ldr	r0, [sp, #0]
    cd5a:	9004      	str	r0, [sp, #16]
    cd5c:	9001      	str	r0, [sp, #4]
    cd5e:	e7ff      	b.n	cd60 <_ZN4core6option15Option$LT$T$GT$5ok_or17he08fd88bb8f02d0aE+0x44>
    cd60:	f89d 000a 	ldrb.w	r0, [sp, #10]
    cd64:	07c0      	lsls	r0, r0, #31
    cd66:	2800      	cmp	r0, #0
    cd68:	d104      	bne.n	cd74 <_ZN4core6option15Option$LT$T$GT$5ok_or17he08fd88bb8f02d0aE+0x58>
    cd6a:	e7ff      	b.n	cd6c <_ZN4core6option15Option$LT$T$GT$5ok_or17he08fd88bb8f02d0aE+0x50>
    cd6c:	9800      	ldr	r0, [sp, #0]
    cd6e:	2800      	cmp	r0, #0
    cd70:	d107      	bne.n	cd82 <_ZN4core6option15Option$LT$T$GT$5ok_or17he08fd88bb8f02d0aE+0x66>
    cd72:	e010      	b.n	cd96 <_ZN4core6option15Option$LT$T$GT$5ok_or17he08fd88bb8f02d0aE+0x7a>
    cd74:	2000      	movs	r0, #0
    cd76:	f88d 000a 	strb.w	r0, [sp, #10]
    cd7a:	e7f7      	b.n	cd6c <_ZN4core6option15Option$LT$T$GT$5ok_or17he08fd88bb8f02d0aE+0x50>
    cd7c:	9801      	ldr	r0, [sp, #4]
    cd7e:	b005      	add	sp, #20
    cd80:	4770      	bx	lr
    cd82:	f89d 000b 	ldrb.w	r0, [sp, #11]
    cd86:	07c0      	lsls	r0, r0, #31
    cd88:	2800      	cmp	r0, #0
    cd8a:	d0f7      	beq.n	cd7c <_ZN4core6option15Option$LT$T$GT$5ok_or17he08fd88bb8f02d0aE+0x60>
    cd8c:	e7ff      	b.n	cd8e <_ZN4core6option15Option$LT$T$GT$5ok_or17he08fd88bb8f02d0aE+0x72>
    cd8e:	2000      	movs	r0, #0
    cd90:	f88d 000b 	strb.w	r0, [sp, #11]
    cd94:	e7f2      	b.n	cd7c <_ZN4core6option15Option$LT$T$GT$5ok_or17he08fd88bb8f02d0aE+0x60>
    cd96:	e7f1      	b.n	cd7c <_ZN4core6option15Option$LT$T$GT$5ok_or17he08fd88bb8f02d0aE+0x60>

0000cd98 <_ZN4core6option15Option$LT$T$GT$6as_mut17hb9c3376e35bf83bbE>:
    cd98:	b084      	sub	sp, #16
    cd9a:	9002      	str	r0, [sp, #8]
    cd9c:	6801      	ldr	r1, [r0, #0]
    cd9e:	2900      	cmp	r1, #0
    cda0:	9000      	str	r0, [sp, #0]
    cda2:	d001      	beq.n	cda8 <_ZN4core6option15Option$LT$T$GT$6as_mut17hb9c3376e35bf83bbE+0x10>
    cda4:	e7ff      	b.n	cda6 <_ZN4core6option15Option$LT$T$GT$6as_mut17hb9c3376e35bf83bbE+0xe>
    cda6:	e003      	b.n	cdb0 <_ZN4core6option15Option$LT$T$GT$6as_mut17hb9c3376e35bf83bbE+0x18>
    cda8:	2000      	movs	r0, #0
    cdaa:	9001      	str	r0, [sp, #4]
    cdac:	e005      	b.n	cdba <_ZN4core6option15Option$LT$T$GT$6as_mut17hb9c3376e35bf83bbE+0x22>
    cdae:	defe      	udf	#254	; 0xfe
    cdb0:	9800      	ldr	r0, [sp, #0]
    cdb2:	1d01      	adds	r1, r0, #4
    cdb4:	9103      	str	r1, [sp, #12]
    cdb6:	9101      	str	r1, [sp, #4]
    cdb8:	e7ff      	b.n	cdba <_ZN4core6option15Option$LT$T$GT$6as_mut17hb9c3376e35bf83bbE+0x22>
    cdba:	9801      	ldr	r0, [sp, #4]
    cdbc:	b004      	add	sp, #16
    cdbe:	4770      	bx	lr

0000cdc0 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E>:
    cdc0:	b084      	sub	sp, #16
    cdc2:	9002      	str	r0, [sp, #8]
    cdc4:	9802      	ldr	r0, [sp, #8]
    cdc6:	2800      	cmp	r0, #0
    cdc8:	4602      	mov	r2, r0
    cdca:	bf18      	it	ne
    cdcc:	2201      	movne	r2, #1
    cdce:	2800      	cmp	r0, #0
    cdd0:	9101      	str	r1, [sp, #4]
    cdd2:	d001      	beq.n	cdd8 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x18>
    cdd4:	e7ff      	b.n	cdd6 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x16>
    cdd6:	e009      	b.n	cdec <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x2c>
    cdd8:	f24f 7090 	movw	r0, #63376	; 0xf790
    cddc:	f2c0 0001 	movt	r0, #1
    cde0:	212b      	movs	r1, #43	; 0x2b
    cde2:	9a01      	ldr	r2, [sp, #4]
    cde4:	f00a fde6 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    cde8:	defe      	udf	#254	; 0xfe
    cdea:	defe      	udf	#254	; 0xfe
    cdec:	9802      	ldr	r0, [sp, #8]
    cdee:	9003      	str	r0, [sp, #12]
    cdf0:	9902      	ldr	r1, [sp, #8]
    cdf2:	2900      	cmp	r1, #0
    cdf4:	9000      	str	r0, [sp, #0]
    cdf6:	d003      	beq.n	ce00 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x40>
    cdf8:	e7ff      	b.n	cdfa <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x3a>
    cdfa:	9800      	ldr	r0, [sp, #0]
    cdfc:	b004      	add	sp, #16
    cdfe:	4770      	bx	lr
    ce00:	e7fb      	b.n	cdfa <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x3a>

0000ce02 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h430caac74862e039E>:
    ce02:	b081      	sub	sp, #4
    ce04:	2100      	movs	r1, #0
    ce06:	6001      	str	r1, [r0, #0]
    ce08:	b001      	add	sp, #4
    ce0a:	4770      	bx	lr

0000ce0c <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hae3f210639d0333dE>:
    ce0c:	b580      	push	{r7, lr}
    ce0e:	b082      	sub	sp, #8
    ce10:	9001      	str	r0, [sp, #4]
    ce12:	f7ff ff83 	bl	cd1c <_ZN4core6option15Option$LT$T$GT$5ok_or17he08fd88bb8f02d0aE>
    ce16:	9000      	str	r0, [sp, #0]
    ce18:	e7ff      	b.n	ce1a <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hae3f210639d0333dE+0xe>
    ce1a:	9800      	ldr	r0, [sp, #0]
    ce1c:	b002      	add	sp, #8
    ce1e:	bd80      	pop	{r7, pc}

0000ce20 <_ZN22piet_embedded_graphics7display18set_display_pixels17hd0f20e3b4184e9a6E>:
        item
    ).expect("draw blocks fail");
}

/// Draw the pixel colours to the display at the window from (sx,sy) to (ex,ey)
pub fn set_display_pixels<P: IntoIterator<Item = u16>>(sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
    ce20:	b5f0      	push	{r4, r5, r6, r7, lr}
    ce22:	b08d      	sub	sp, #52	; 0x34
    ce24:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
    ce28:	469e      	mov	lr, r3
    ce2a:	4614      	mov	r4, r2
    ce2c:	460d      	mov	r5, r1
    ce2e:	4606      	mov	r6, r0
    ce30:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
    ce34:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
    ce38:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    ce3c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    unsafe { DISPLAY.set_pixels(sx, sy, ex, ey, colors) }
    ce40:	466f      	mov	r7, sp
    ce42:	f8c7 c004 	str.w	ip, [r7, #4]
    ce46:	603b      	str	r3, [r7, #0]
    ce48:	f240 1348 	movw	r3, #328	; 0x148
    ce4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce50:	900a      	str	r0, [sp, #40]	; 0x28
    ce52:	4618      	mov	r0, r3
    ce54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ce56:	9109      	str	r1, [sp, #36]	; 0x24
    ce58:	4619      	mov	r1, r3
    ce5a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    ce5e:	9208      	str	r2, [sp, #32]
    ce60:	4662      	mov	r2, ip
    ce62:	9b08      	ldr	r3, [sp, #32]
    ce64:	f8cd e01c 	str.w	lr, [sp, #28]
    ce68:	9406      	str	r4, [sp, #24]
    ce6a:	9505      	str	r5, [sp, #20]
    ce6c:	9604      	str	r6, [sp, #16]
    ce6e:	f000 f807 	bl	ce80 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E>
    ce72:	9003      	str	r0, [sp, #12]
    ce74:	e7ff      	b.n	ce76 <_ZN22piet_embedded_graphics7display18set_display_pixels17hd0f20e3b4184e9a6E+0x56>
}
    ce76:	9803      	ldr	r0, [sp, #12]
    ce78:	f000 0001 	and.w	r0, r0, #1
    ce7c:	b00d      	add	sp, #52	; 0x34
    ce7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ce80 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E>:
    pub fn set_pixels<P: IntoIterator<Item = u16>>(&mut self, sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
    ce80:	b5f0      	push	{r4, r5, r6, r7, lr}
    ce82:	b091      	sub	sp, #68	; 0x44
    ce84:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
    ce88:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
    ce8c:	461c      	mov	r4, r3
    ce8e:	4615      	mov	r5, r2
    ce90:	460e      	mov	r6, r1
    ce92:	900a      	str	r0, [sp, #40]	; 0x28
    ce94:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
    ce98:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
    ce9c:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    cea0:	f8ad e032 	strh.w	lr, [sp, #50]	; 0x32
    cea4:	2700      	movs	r7, #0
        self.set_address_window(sx, sy, ex, ey)?;
    cea6:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
    ceaa:	2701      	movs	r7, #1
    ceac:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
    ceb0:	466f      	mov	r7, sp
    ceb2:	f8c7 e000 	str.w	lr, [r7]
    ceb6:	9008      	str	r0, [sp, #32]
    ceb8:	f8cd c01c 	str.w	ip, [sp, #28]
    cebc:	9406      	str	r4, [sp, #24]
    cebe:	9505      	str	r5, [sp, #20]
    cec0:	9604      	str	r6, [sp, #16]
    cec2:	f7fc feff 	bl	9cc4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>
    cec6:	9003      	str	r0, [sp, #12]
    cec8:	e7ff      	b.n	ceca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x4a>
    ceca:	9803      	ldr	r0, [sp, #12]
    cecc:	f000 0001 	and.w	r0, r0, #1
    ced0:	f7fb fe4c 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    ced4:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
    ced8:	e7ff      	b.n	ceda <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x5a>
    ceda:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
    cede:	07c1      	lsls	r1, r0, #31
    cee0:	2900      	cmp	r1, #0
    cee2:	d001      	beq.n	cee8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x68>
    cee4:	e7ff      	b.n	cee6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x66>
    cee6:	e009      	b.n	cefc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x7c>
    cee8:	2000      	movs	r0, #0
        self.write_pixels(colors) ? ;
    ceea:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    ceee:	9808      	ldr	r0, [sp, #32]
    cef0:	9907      	ldr	r1, [sp, #28]
    cef2:	f000 f848 	bl	cf86 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E>
    cef6:	9002      	str	r0, [sp, #8]
    cef8:	e00d      	b.n	cf16 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x96>
        self.set_address_window(sx, sy, ex, ey)?;
    cefa:	defe      	udf	#254	; 0xfe
    cefc:	f005 f959 	bl	121b2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
    cf00:	e003      	b.n	cf0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x8a>
    }
    cf02:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    cf06:	b011      	add	sp, #68	; 0x44
    cf08:	bdf0      	pop	{r4, r5, r6, r7, pc}
        self.set_address_window(sx, sy, ex, ey)?;
    cf0a:	f008 fafb 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    cf0e:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    cf12:	e7ff      	b.n	cf14 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x94>
    cf14:	e031      	b.n	cf7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xfa>
        self.write_pixels(colors) ? ;
    cf16:	9802      	ldr	r0, [sp, #8]
    cf18:	f000 0001 	and.w	r0, r0, #1
    cf1c:	f7fb fe26 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    cf20:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    cf24:	e7ff      	b.n	cf26 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xa6>
    cf26:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
    cf2a:	07c1      	lsls	r1, r0, #31
    cf2c:	2900      	cmp	r1, #0
    cf2e:	d001      	beq.n	cf34 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xb4>
    cf30:	e7ff      	b.n	cf32 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xb2>
    cf32:	e004      	b.n	cf3e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xbe>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    cf34:	f006 fb78 	bl	13628 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    cf38:	9001      	str	r0, [sp, #4]
    cf3a:	e009      	b.n	cf50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xd0>
        self.write_pixels(colors) ? ;
    cf3c:	defe      	udf	#254	; 0xfe
    cf3e:	f005 f938 	bl	121b2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
    cf42:	e7ff      	b.n	cf44 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xc4>
    cf44:	f008 fade 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    cf48:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    cf4c:	e7ff      	b.n	cf4e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xce>
    cf4e:	e014      	b.n	cf7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xfa>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    cf50:	f24f 71bb 	movw	r1, #63419	; 0xf7bb
    cf54:	f2c0 0101 	movt	r1, #1
    cf58:	f64f 0318 	movw	r3, #63512	; 0xf818
    cf5c:	f2c0 0301 	movt	r3, #1
    cf60:	220e      	movs	r2, #14
    cf62:	9801      	ldr	r0, [sp, #4]
    cf64:	f7fb fdc9 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    cf68:	e7ff      	b.n	cf6a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xea>
    cf6a:	2000      	movs	r0, #0
        Ok(())
    cf6c:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    }
    cf70:	e7c7      	b.n	cf02 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x82>
    cf72:	2000      	movs	r0, #0
    cf74:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    cf78:	e7c3      	b.n	cf02 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x82>
    cf7a:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    cf7e:	07c0      	lsls	r0, r0, #31
    cf80:	2800      	cmp	r0, #0
    cf82:	d1f6      	bne.n	cf72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xf2>
    cf84:	e7bd      	b.n	cf02 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x82>

0000cf86 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E>:
    pub fn write_pixels<P: IntoIterator<Item = u16>>(&mut self, colors: P) -> Result <(), ()> {
    cf86:	b580      	push	{r7, lr}
    cf88:	b094      	sub	sp, #80	; 0x50
    cf8a:	900d      	str	r0, [sp, #52]	; 0x34
    cf8c:	910e      	str	r1, [sp, #56]	; 0x38
    cf8e:	2200      	movs	r2, #0
        self.write_command(Instruction::RAMWR, None)?;
    cf90:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
    cf94:	2301      	movs	r3, #1
    cf96:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    cf9a:	232c      	movs	r3, #44	; 0x2c
    cf9c:	f88d 301f 	strb.w	r3, [sp, #31]
    cfa0:	9209      	str	r2, [sp, #36]	; 0x24
    cfa2:	9208      	str	r2, [sp, #32]
    cfa4:	9208      	str	r2, [sp, #32]
    cfa6:	9a08      	ldr	r2, [sp, #32]
    cfa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cfaa:	f89d c01f 	ldrb.w	ip, [sp, #31]
    cfae:	9006      	str	r0, [sp, #24]
    cfb0:	9105      	str	r1, [sp, #20]
    cfb2:	4661      	mov	r1, ip
    cfb4:	f7fc fd95 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    cfb8:	9004      	str	r0, [sp, #16]
    cfba:	e7ff      	b.n	cfbc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x36>
    cfbc:	9804      	ldr	r0, [sp, #16]
    cfbe:	f000 0001 	and.w	r0, r0, #1
    cfc2:	f7fb fdd3 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    cfc6:	f88d 001e 	strb.w	r0, [sp, #30]
    cfca:	e7ff      	b.n	cfcc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x46>
    cfcc:	f89d 001e 	ldrb.w	r0, [sp, #30]
    cfd0:	07c1      	lsls	r1, r0, #31
    cfd2:	2900      	cmp	r1, #0
    cfd4:	d001      	beq.n	cfda <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x54>
    cfd6:	e7ff      	b.n	cfd8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x52>
    cfd8:	e008      	b.n	cfec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x66>
    cfda:	2000      	movs	r0, #0
        for color in colors {
    cfdc:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    cfe0:	9805      	ldr	r0, [sp, #20]
    cfe2:	f000 f86e 	bl	d0c2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcdf096192109e52aE>
    cfe6:	9003      	str	r0, [sp, #12]
    cfe8:	e00d      	b.n	d006 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x80>
        self.write_command(Instruction::RAMWR, None)?;
    cfea:	defe      	udf	#254	; 0xfe
    cfec:	f005 f8e1 	bl	121b2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
    cff0:	e003      	b.n	cffa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x74>
    }
    cff2:	f89d 001d 	ldrb.w	r0, [sp, #29]
    cff6:	b014      	add	sp, #80	; 0x50
    cff8:	bd80      	pop	{r7, pc}
        self.write_command(Instruction::RAMWR, None)?;
    cffa:	f008 fa83 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    cffe:	f88d 001d 	strb.w	r0, [sp, #29]
    d002:	e7ff      	b.n	d004 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x7e>
    d004:	e057      	b.n	d0b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x130>
        for color in colors {
    d006:	9803      	ldr	r0, [sp, #12]
    d008:	900a      	str	r0, [sp, #40]	; 0x28
    d00a:	e7ff      	b.n	d00c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x86>
    d00c:	a80a      	add	r0, sp, #40	; 0x28
    d00e:	f000 f85c 	bl	d0ca <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4e486716e9c6f20bE>
    d012:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
    d016:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
    d01a:	e7ff      	b.n	d01c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x96>
    d01c:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    d020:	4601      	mov	r1, r0
    d022:	2800      	cmp	r0, #0
    d024:	d001      	beq.n	d02a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xa4>
    d026:	e7ff      	b.n	d028 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xa2>
    d028:	e001      	b.n	d02e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xa8>
        }
    d02a:	e02b      	b.n	d084 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xfe>
        for color in colors {
    d02c:	defe      	udf	#254	; 0xfe
    d02e:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
    d032:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
    d036:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    d03a:	f8ad 004e 	strh.w	r0, [sp, #78]	; 0x4e
            self.write_word(color)?;
    d03e:	9906      	ldr	r1, [sp, #24]
    d040:	9002      	str	r0, [sp, #8]
    d042:	4608      	mov	r0, r1
    d044:	9902      	ldr	r1, [sp, #8]
    d046:	f7fc fc7d 	bl	9944 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    d04a:	9001      	str	r0, [sp, #4]
    d04c:	e7ff      	b.n	d04e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xc8>
    d04e:	9801      	ldr	r0, [sp, #4]
    d050:	f000 0001 	and.w	r0, r0, #1
    d054:	f7fb fd8a 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    d058:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    d05c:	e7ff      	b.n	d05e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xd8>
    d05e:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    d062:	07c1      	lsls	r1, r0, #31
    d064:	2900      	cmp	r1, #0
    d066:	d001      	beq.n	d06c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xe6>
    d068:	e7ff      	b.n	d06a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xe4>
    d06a:	e001      	b.n	d070 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xea>
        for color in colors {
    d06c:	e7ce      	b.n	d00c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x86>
            self.write_word(color)?;
    d06e:	defe      	udf	#254	; 0xfe
    d070:	f005 f89f 	bl	121b2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
    d074:	e7ff      	b.n	d076 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xf0>
    d076:	f008 fa45 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    d07a:	f88d 001d 	strb.w	r0, [sp, #29]
    d07e:	e7ff      	b.n	d080 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xfa>
        }
    d080:	e7ff      	b.n	d082 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xfc>
    }
    d082:	e018      	b.n	d0b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x130>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    d084:	f006 fad0 	bl	13628 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    d088:	9000      	str	r0, [sp, #0]
    d08a:	e7ff      	b.n	d08c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x106>
    d08c:	f24f 71bb 	movw	r1, #63419	; 0xf7bb
    d090:	f2c0 0101 	movt	r1, #1
    d094:	f64f 0328 	movw	r3, #63528	; 0xf828
    d098:	f2c0 0301 	movt	r3, #1
    d09c:	220e      	movs	r2, #14
    d09e:	9800      	ldr	r0, [sp, #0]
    d0a0:	f7fb fd2b 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    d0a4:	e7ff      	b.n	d0a6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x120>
    d0a6:	2000      	movs	r0, #0
        Ok(())
    d0a8:	f88d 001d 	strb.w	r0, [sp, #29]
    }
    d0ac:	e7a1      	b.n	cff2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x6c>
    d0ae:	2000      	movs	r0, #0
    d0b0:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    d0b4:	e79d      	b.n	cff2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x6c>
    d0b6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    d0ba:	07c0      	lsls	r0, r0, #31
    d0bc:	2800      	cmp	r0, #0
    d0be:	d1f6      	bne.n	d0ae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x128>
    d0c0:	e797      	b.n	cff2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x6c>

0000d0c2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcdf096192109e52aE>:
    d0c2:	b081      	sub	sp, #4
    d0c4:	9000      	str	r0, [sp, #0]
    d0c6:	b001      	add	sp, #4
    d0c8:	4770      	bx	lr

0000d0ca <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4e486716e9c6f20bE>:
    d0ca:	b580      	push	{r7, lr}
    d0cc:	b084      	sub	sp, #16
    d0ce:	9003      	str	r0, [sp, #12]
    d0d0:	6800      	ldr	r0, [r0, #0]
    d0d2:	f7ff fc57 	bl	c984 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE>
    d0d6:	9002      	str	r0, [sp, #8]
    d0d8:	9101      	str	r1, [sp, #4]
    d0da:	e7ff      	b.n	d0dc <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4e486716e9c6f20bE+0x12>
    d0dc:	9802      	ldr	r0, [sp, #8]
    d0de:	9901      	ldr	r1, [sp, #4]
    d0e0:	b004      	add	sp, #16
    d0e2:	bd80      	pop	{r7, pc}

0000d0e4 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h0cf1484d4454de12E>:
    d0e4:	b580      	push	{r7, lr}
    d0e6:	b082      	sub	sp, #8
    d0e8:	9200      	str	r2, [sp, #0]
    d0ea:	9101      	str	r1, [sp, #4]
    d0ec:	9a00      	ldr	r2, [sp, #0]
    d0ee:	f003 fe89 	bl	10e04 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h49e76ed73fb545efE>
    d0f2:	e7ff      	b.n	d0f4 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h0cf1484d4454de12E+0x10>
    d0f4:	b002      	add	sp, #8
    d0f6:	bd80      	pop	{r7, pc}

0000d0f8 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h3b730fc436db22b7E>:
    d0f8:	b580      	push	{r7, lr}
    d0fa:	b084      	sub	sp, #16
    d0fc:	9102      	str	r1, [sp, #8]
    d0fe:	9003      	str	r0, [sp, #12]
    d100:	9902      	ldr	r1, [sp, #8]
    d102:	f003 fe91 	bl	10e28 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h6f4e867a15b2a6b1E>
    d106:	9001      	str	r0, [sp, #4]
    d108:	9100      	str	r1, [sp, #0]
    d10a:	e7ff      	b.n	d10c <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h3b730fc436db22b7E+0x14>
    d10c:	9801      	ldr	r0, [sp, #4]
    d10e:	9900      	ldr	r1, [sp, #0]
    d110:	b004      	add	sp, #16
    d112:	bd80      	pop	{r7, pc}

0000d114 <_ZN8libchip814Chip8$LT$T$GT$3new17he723acd5a1e30b39E>:
    0xf0, 0x80, 0xf0, 0x80, 0x80, // f
];

impl<T: Hardware> Chip8<T> {
    /// Create an interpreter instance.
    pub fn new(hw: T) -> Self {
    d114:	b5b0      	push	{r4, r5, r7, lr}
    d116:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
    d11a:	b082      	sub	sp, #8
    d11c:	f10d 0e0c 	add.w	lr, sp, #12
    d120:	f50e 5282 	add.w	r2, lr, #4160	; 0x1040
    d124:	2300      	movs	r3, #0
        Self {
            v: [0; REGS],
    d126:	930b      	str	r3, [sp, #44]	; 0x2c
    d128:	930a      	str	r3, [sp, #40]	; 0x28
    d12a:	9309      	str	r3, [sp, #36]	; 0x24
    d12c:	9308      	str	r3, [sp, #32]
    d12e:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
    d132:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
            i: 0,
            dt: 0,
            st: 0,
            pc: 0,
            sp: 0,
            mem: [0; MEMS],
    d136:	9007      	str	r0, [sp, #28]
    d138:	4660      	mov	r0, ip
    d13a:	9106      	str	r1, [sp, #24]
    d13c:	4671      	mov	r1, lr
    d13e:	9205      	str	r2, [sp, #20]
    d140:	9304      	str	r3, [sp, #16]
    d142:	f8cd c00c 	str.w	ip, [sp, #12]
    d146:	f8cd e008 	str.w	lr, [sp, #8]
    d14a:	f011 f803 	bl	1e154 <__aeabi_memclr>
            stack: [0; STACKS],
    d14e:	9804      	ldr	r0, [sp, #16]
    d150:	9905      	ldr	r1, [sp, #20]
    d152:	6008      	str	r0, [r1, #0]
    d154:	f841 0c04 	str.w	r0, [r1, #-4]
    d158:	f841 0c08 	str.w	r0, [r1, #-8]
    d15c:	f841 0c0c 	str.w	r0, [r1, #-12]
    d160:	f841 0c10 	str.w	r0, [r1, #-16]
    d164:	f841 0c14 	str.w	r0, [r1, #-20]
    d168:	f841 0c18 	str.w	r0, [r1, #-24]
    d16c:	f841 0c1c 	str.w	r0, [r1, #-28]
            time: None,
    d170:	6088      	str	r0, [r1, #8]
    d172:	6048      	str	r0, [r1, #4]
            running: false,
            hw,
    d174:	9a06      	ldr	r2, [sp, #24]
    d176:	7913      	ldrb	r3, [r2, #4]
    d178:	f50d 5e80 	add.w	lr, sp, #4096	; 0x1000
    d17c:	f88e 3064 	strb.w	r3, [lr, #100]	; 0x64
    d180:	6813      	ldr	r3, [r2, #0]
    d182:	614b      	str	r3, [r1, #20]
        Self {
    d184:	9b08      	ldr	r3, [sp, #32]
    d186:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    d18a:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
    d18e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    d190:	9d07      	ldr	r5, [sp, #28]
    d192:	642c      	str	r4, [r5, #64]	; 0x40
    d194:	f8c5 e03c 	str.w	lr, [r5, #60]	; 0x3c
    d198:	f8c5 c038 	str.w	ip, [r5, #56]	; 0x38
    d19c:	636b      	str	r3, [r5, #52]	; 0x34
    d19e:	8228      	strh	r0, [r5, #16]
    d1a0:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
    d1a4:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
    d1a8:	8268      	strh	r0, [r5, #18]
    d1aa:	f885 0046 	strb.w	r0, [r5, #70]	; 0x46
    d1ae:	f105 0047 	add.w	r0, r5, #71	; 0x47
    d1b2:	9903      	ldr	r1, [sp, #12]
    d1b4:	9a02      	ldr	r2, [sp, #8]
    d1b6:	f010 ffd1 	bl	1e15c <__aeabi_memcpy>
    d1ba:	9907      	ldr	r1, [sp, #28]
    d1bc:	f101 0214 	add.w	r2, r1, #20
    d1c0:	f10d 0e10 	add.w	lr, sp, #16
    d1c4:	f50e 5181 	add.w	r1, lr, #4128	; 0x1020
    d1c8:	2320      	movs	r3, #32
    d1ca:	9001      	str	r0, [sp, #4]
    d1cc:	4610      	mov	r0, r2
    d1ce:	461a      	mov	r2, r3
    d1d0:	f010 ffc4 	bl	1e15c <__aeabi_memcpy>
    d1d4:	9905      	ldr	r1, [sp, #20]
    d1d6:	684a      	ldr	r2, [r1, #4]
    d1d8:	688b      	ldr	r3, [r1, #8]
    d1da:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    d1de:	f8d1 e010 	ldr.w	lr, [r1, #16]
    d1e2:	9c07      	ldr	r4, [sp, #28]
    d1e4:	6063      	str	r3, [r4, #4]
    d1e6:	6022      	str	r2, [r4, #0]
    d1e8:	f8c4 e00c 	str.w	lr, [r4, #12]
    d1ec:	f8c4 c008 	str.w	ip, [r4, #8]
    d1f0:	f241 0247 	movw	r2, #4167	; 0x1047
    d1f4:	9b04      	ldr	r3, [sp, #16]
    d1f6:	54a3      	strb	r3, [r4, r2]
    d1f8:	f241 0248 	movw	r2, #4168	; 0x1048
    d1fc:	eb04 0c02 	add.w	ip, r4, r2
    d200:	f8d1 e014 	ldr.w	lr, [r1, #20]
    d204:	f844 e002 	str.w	lr, [r4, r2]
    d208:	f50d 5080 	add.w	r0, sp, #4096	; 0x1000
    d20c:	f890 2064 	ldrb.w	r2, [r0, #100]	; 0x64
    d210:	f88c 2004 	strb.w	r2, [ip, #4]
        }
    }
    d214:	f50d 5d83 	add.w	sp, sp, #4192	; 0x1060
    d218:	b002      	add	sp, #8
    d21a:	bdb0      	pop	{r4, r5, r7, pc}

0000d21c <_ZN8libchip814Chip8$LT$T$GT$3pop17h6d2ddb52680323d8E>:
    fn push(&mut self, item: u16) {
        self.stack[self.sp as usize] = item;
        self.sp = self.sp.wrapping_add(1);
    }

    fn pop(&mut self) -> u16 {
    d21c:	b580      	push	{r7, lr}
    d21e:	b086      	sub	sp, #24
    d220:	9004      	str	r0, [sp, #16]
        self.sp = self.sp.wrapping_sub(1);
    d222:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
    d226:	2201      	movs	r2, #1
    d228:	9003      	str	r0, [sp, #12]
    d22a:	4608      	mov	r0, r1
    d22c:	4611      	mov	r1, r2
    d22e:	f009 fc9d 	bl	16b6c <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h84bf0bac3f755209E>
    d232:	9002      	str	r0, [sp, #8]
    d234:	e7ff      	b.n	d236 <_ZN8libchip814Chip8$LT$T$GT$3pop17h6d2ddb52680323d8E+0x1a>
    d236:	9802      	ldr	r0, [sp, #8]
    d238:	9903      	ldr	r1, [sp, #12]
    d23a:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
        let item = self.stack[self.sp as usize];
    d23e:	f891 2046 	ldrb.w	r2, [r1, #70]	; 0x46
    d242:	4613      	mov	r3, r2
    d244:	2a0f      	cmp	r2, #15
    d246:	9301      	str	r3, [sp, #4]
    d248:	d80a      	bhi.n	d260 <_ZN8libchip814Chip8$LT$T$GT$3pop17h6d2ddb52680323d8E+0x44>
    d24a:	e7ff      	b.n	d24c <_ZN8libchip814Chip8$LT$T$GT$3pop17h6d2ddb52680323d8E+0x30>
    d24c:	9803      	ldr	r0, [sp, #12]
    d24e:	9901      	ldr	r1, [sp, #4]
    d250:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    d254:	8a92      	ldrh	r2, [r2, #20]
    d256:	f8ad 2016 	strh.w	r2, [sp, #22]
        item
    }
    d25a:	4610      	mov	r0, r2
    d25c:	b006      	add	sp, #24
    d25e:	bd80      	pop	{r7, pc}
        let item = self.stack[self.sp as usize];
    d260:	f64f 0090 	movw	r0, #63632	; 0xf890
    d264:	f2c0 0001 	movt	r0, #1
    d268:	2210      	movs	r2, #16
    d26a:	9901      	ldr	r1, [sp, #4]
    d26c:	f00a fbb8 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d270:	defe      	udf	#254	; 0xfe

0000d272 <_ZN8libchip814Chip8$LT$T$GT$3run17h13983ef8bbdf8d15E>:
    pub fn run(mut self, rom: &[u8]) {
    d272:	b580      	push	{r7, lr}
    d274:	b086      	sub	sp, #24
    d276:	9104      	str	r1, [sp, #16]
    d278:	9205      	str	r2, [sp, #20]
        self.setup();
    d27a:	9003      	str	r0, [sp, #12]
    d27c:	9202      	str	r2, [sp, #8]
    d27e:	9101      	str	r1, [sp, #4]
    d280:	f003 ff34 	bl	110ec <_ZN8libchip814Chip8$LT$T$GT$5setup17h497508a9d15b56c5E>
    d284:	e7ff      	b.n	d286 <_ZN8libchip814Chip8$LT$T$GT$3run17h13983ef8bbdf8d15E+0x14>
        self.load(rom);
    d286:	9803      	ldr	r0, [sp, #12]
    d288:	9901      	ldr	r1, [sp, #4]
    d28a:	9a02      	ldr	r2, [sp, #8]
    d28c:	f003 fdde 	bl	10e4c <_ZN8libchip814Chip8$LT$T$GT$4load17h579031262a124884E>
    d290:	e7ff      	b.n	d292 <_ZN8libchip814Chip8$LT$T$GT$3run17h13983ef8bbdf8d15E+0x20>
        while self.running {
    d292:	e7ff      	b.n	d294 <_ZN8libchip814Chip8$LT$T$GT$3run17h13983ef8bbdf8d15E+0x22>
    d294:	f241 0047 	movw	r0, #4167	; 0x1047
    d298:	9903      	ldr	r1, [sp, #12]
    d29a:	5c08      	ldrb	r0, [r1, r0]
    d29c:	07c0      	lsls	r0, r0, #31
    d29e:	2800      	cmp	r0, #0
    d2a0:	d101      	bne.n	d2a6 <_ZN8libchip814Chip8$LT$T$GT$3run17h13983ef8bbdf8d15E+0x34>
    d2a2:	e7ff      	b.n	d2a4 <_ZN8libchip814Chip8$LT$T$GT$3run17h13983ef8bbdf8d15E+0x32>
    }
    d2a4:	e00c      	b.n	d2c0 <_ZN8libchip814Chip8$LT$T$GT$3run17h13983ef8bbdf8d15E+0x4e>
            self.sched();
    d2a6:	9803      	ldr	r0, [sp, #12]
    d2a8:	f003 fe9d 	bl	10fe6 <_ZN8libchip814Chip8$LT$T$GT$5sched17h92ff4f7288c44a1cE>
    d2ac:	e7ff      	b.n	d2ae <_ZN8libchip814Chip8$LT$T$GT$3run17h13983ef8bbdf8d15E+0x3c>
            self.eval();
    d2ae:	9803      	ldr	r0, [sp, #12]
    d2b0:	f000 f808 	bl	d2c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E>
    d2b4:	e7ff      	b.n	d2b6 <_ZN8libchip814Chip8$LT$T$GT$3run17h13983ef8bbdf8d15E+0x44>
            self.next();
    d2b6:	9803      	ldr	r0, [sp, #12]
    d2b8:	f003 fe03 	bl	10ec2 <_ZN8libchip814Chip8$LT$T$GT$4next17hcff432de15657423E>
    d2bc:	e7ff      	b.n	d2be <_ZN8libchip814Chip8$LT$T$GT$3run17h13983ef8bbdf8d15E+0x4c>
        while self.running {
    d2be:	e7e9      	b.n	d294 <_ZN8libchip814Chip8$LT$T$GT$3run17h13983ef8bbdf8d15E+0x22>
    }
    d2c0:	b006      	add	sp, #24
    d2c2:	bd80      	pop	{r7, pc}

0000d2c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E>:
        }

        return b' ';
    }

    fn eval(&mut self) {
    d2c4:	b570      	push	{r4, r5, r6, lr}
    d2c6:	f5ad 6d6c 	sub.w	sp, sp, #3776	; 0xec0
    d2ca:	f8cd 0c70 	str.w	r0, [sp, #3184]	; 0xc70
        let h = self.mem[self.pc as usize] as u16;
    d2ce:	8a41      	ldrh	r1, [r0, #18]
    d2d0:	460a      	mov	r2, r1
    d2d2:	2300      	movs	r3, #0
    d2d4:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    d2d8:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
    d2dc:	f8cd 248c 	str.w	r2, [sp, #1164]	; 0x48c
    d2e0:	f043 82c0 	bne.w	10864 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x35a0>
    d2e4:	e7ff      	b.n	d2e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x22>
    d2e6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d2ea:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
    d2ee:	1842      	adds	r2, r0, r1
    d2f0:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    d2f4:	4613      	mov	r3, r2
    d2f6:	f8ad 2c76 	strh.w	r2, [sp, #3190]	; 0xc76
        let l = self.mem[(self.pc + 1) as usize] as u16;
    d2fa:	8a42      	ldrh	r2, [r0, #18]
    d2fc:	3201      	adds	r2, #1
    d2fe:	fa1f fc82 	uxth.w	ip, r2
    d302:	4696      	mov	lr, r2
    d304:	4594      	cmp	ip, r2
    d306:	f8cd 3488 	str.w	r3, [sp, #1160]	; 0x488
    d30a:	f8cd e484 	str.w	lr, [sp, #1156]	; 0x484
    d30e:	f043 82b4 	bne.w	1087a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x35b6>
    d312:	e7ff      	b.n	d314 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x50>
    d314:	f8dd 0484 	ldr.w	r0, [sp, #1156]	; 0x484
    d318:	b281      	uxth	r1, r0
    d31a:	460a      	mov	r2, r1
    d31c:	2300      	movs	r3, #0
    d31e:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    d322:	f8cd 2480 	str.w	r2, [sp, #1152]	; 0x480
    d326:	f043 82b4 	bne.w	10892 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x35ce>
    d32a:	e7ff      	b.n	d32c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x68>
    d32c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d330:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
    d334:	1842      	adds	r2, r0, r1
    d336:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    d33a:	4613      	mov	r3, r2
    d33c:	f8ad 2c78 	strh.w	r2, [sp, #3192]	; 0xc78
        let inst = h << 8 | l;
    d340:	f8dd 2488 	ldr.w	r2, [sp, #1160]	; 0x488
    d344:	ea4f 2c02 	mov.w	ip, r2, lsl #8
    d348:	f8cd 347c 	str.w	r3, [sp, #1148]	; 0x47c
    d34c:	f8cd c478 	str.w	ip, [sp, #1144]	; 0x478
    d350:	e7ff      	b.n	d352 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x8e>
    d352:	f8dd 0478 	ldr.w	r0, [sp, #1144]	; 0x478
    d356:	f8dd 147c 	ldr.w	r1, [sp, #1148]	; 0x47c
    d35a:	ea40 0201 	orr.w	r2, r0, r1
    d35e:	f8ad 2496 	strh.w	r2, [sp, #1174]	; 0x496

        let nnn = inst & 0xfff;
    d362:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    d366:	f36f 321f 	bfc	r2, #12, #20
    d36a:	4613      	mov	r3, r2
    d36c:	f8ad 2c7a 	strh.w	r2, [sp, #3194]	; 0xc7a
        let n = (inst & 0xf) as usize;
    d370:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    d374:	f002 020f 	and.w	r2, r2, #15
    d378:	4694      	mov	ip, r2
    d37a:	f8cd 2c7c 	str.w	r2, [sp, #3196]	; 0xc7c
        let x = ((inst >> 8) & 0xf) as usize;
    d37e:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    d382:	f8cd 3474 	str.w	r3, [sp, #1140]	; 0x474
    d386:	f8cd c470 	str.w	ip, [sp, #1136]	; 0x470
    d38a:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
    d38e:	e7ff      	b.n	d390 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xcc>
    d390:	f8dd 046c 	ldr.w	r0, [sp, #1132]	; 0x46c
    d394:	f000 010f 	and.w	r1, r0, #15
    d398:	460a      	mov	r2, r1
    d39a:	f8cd 1c80 	str.w	r1, [sp, #3200]	; 0xc80
        let y = ((inst >> 4) & 0xf) as usize;
    d39e:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    d3a2:	0909      	lsrs	r1, r1, #4
    d3a4:	f8cd 2468 	str.w	r2, [sp, #1128]	; 0x468
    d3a8:	f8cd 1464 	str.w	r1, [sp, #1124]	; 0x464
    d3ac:	e7ff      	b.n	d3ae <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xea>
    d3ae:	f8dd 0464 	ldr.w	r0, [sp, #1124]	; 0x464
    d3b2:	f000 010f 	and.w	r1, r0, #15
    d3b6:	460a      	mov	r2, r1
    d3b8:	f8cd 1c84 	str.w	r1, [sp, #3204]	; 0xc84
        let kk = (inst & 0xff) as u8;
    d3bc:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    d3c0:	b2cb      	uxtb	r3, r1
    d3c2:	f88d 1c8b 	strb.w	r1, [sp, #3211]	; 0xc8b

        match (
            (inst >> 12) & 0xf,
    d3c6:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    d3ca:	0b09      	lsrs	r1, r1, #12
    d3cc:	f8cd 2460 	str.w	r2, [sp, #1120]	; 0x460
    d3d0:	f8cd 345c 	str.w	r3, [sp, #1116]	; 0x45c
    d3d4:	f8cd 1458 	str.w	r1, [sp, #1112]	; 0x458
    d3d8:	e7ff      	b.n	d3da <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x116>
    d3da:	f8dd 0458 	ldr.w	r0, [sp, #1112]	; 0x458
    d3de:	f000 010f 	and.w	r1, r0, #15
            (inst >> 8) & 0xf,
    d3e2:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    d3e6:	f8cd 1454 	str.w	r1, [sp, #1108]	; 0x454
    d3ea:	f8cd 2450 	str.w	r2, [sp, #1104]	; 0x450
    d3ee:	e7ff      	b.n	d3f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x12c>
    d3f0:	f8dd 0450 	ldr.w	r0, [sp, #1104]	; 0x450
    d3f4:	f000 010f 	and.w	r1, r0, #15
            (inst >> 4) & 0xf,
    d3f8:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    d3fc:	0912      	lsrs	r2, r2, #4
    d3fe:	f8cd 144c 	str.w	r1, [sp, #1100]	; 0x44c
    d402:	f8cd 2448 	str.w	r2, [sp, #1096]	; 0x448
    d406:	e7ff      	b.n	d408 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x144>
    d408:	f8dd 0448 	ldr.w	r0, [sp, #1096]	; 0x448
    d40c:	f000 010f 	and.w	r1, r0, #15
            (inst >> 0) & 0xf,
    d410:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    d414:	f8cd 1444 	str.w	r1, [sp, #1092]	; 0x444
    d418:	f8cd 2440 	str.w	r2, [sp, #1088]	; 0x440
    d41c:	e7ff      	b.n	d41e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x15a>
    d41e:	f8dd 0440 	ldr.w	r0, [sp, #1088]	; 0x440
    d422:	f000 010f 	and.w	r1, r0, #15
        match (
    d426:	f8dd 2454 	ldr.w	r2, [sp, #1108]	; 0x454
    d42a:	f8ad 2498 	strh.w	r2, [sp, #1176]	; 0x498
    d42e:	f8dd 344c 	ldr.w	r3, [sp, #1100]	; 0x44c
    d432:	f8ad 349a 	strh.w	r3, [sp, #1178]	; 0x49a
    d436:	f8dd c444 	ldr.w	ip, [sp, #1092]	; 0x444
    d43a:	f8ad c49c 	strh.w	ip, [sp, #1180]	; 0x49c
    d43e:	f8ad 149e 	strh.w	r1, [sp, #1182]	; 0x49e
        ) {
            (0, 0, 0xe, 0) => {
    d442:	f8bd 1498 	ldrh.w	r1, [sp, #1176]	; 0x498
    d446:	468e      	mov	lr, r1
    d448:	290f      	cmp	r1, #15
    d44a:	f8cd e43c 	str.w	lr, [sp, #1084]	; 0x43c
    d44e:	d84f      	bhi.n	d4f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x22c>
    d450:	f8dd 143c 	ldr.w	r1, [sp, #1084]	; 0x43c
    d454:	e8df f011 	tbh	[pc, r1, lsl #1]
    d458:	03060010 	.word	0x03060010
    d45c:	04320399 	.word	0x04320399
    d460:	002c04d2 	.word	0x002c04d2
    d464:	06b4061f 	.word	0x06b4061f
    d468:	00750032 	.word	0x00750032
    d46c:	0ee40e59 	.word	0x0ee40e59
    d470:	10260f85 	.word	0x10260f85
    d474:	0095007b 	.word	0x0095007b
    d478:	f8bd 049a 	ldrh.w	r0, [sp, #1178]	; 0x49a
    d47c:	2800      	cmp	r0, #0
    d47e:	f040 8261 	bne.w	d944 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x680>
    d482:	e7ff      	b.n	d484 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1c0>
    d484:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    d488:	280e      	cmp	r0, #14
    d48a:	f040 825b 	bne.w	d944 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x680>
    d48e:	e7ff      	b.n	d490 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1cc>
    d490:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d494:	4601      	mov	r1, r0
    d496:	2800      	cmp	r0, #0
    d498:	f8cd 1438 	str.w	r1, [sp, #1080]	; 0x438
    d49c:	f000 80c0 	beq.w	d620 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x35c>
    d4a0:	e7ff      	b.n	d4a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1de>
    d4a2:	f8dd 0438 	ldr.w	r0, [sp, #1080]	; 0x438
    d4a6:	b281      	uxth	r1, r0
    d4a8:	290e      	cmp	r1, #14
    d4aa:	f000 81b6 	beq.w	d81a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x556>
    d4ae:	e249      	b.n	d944 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x680>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
                if self.v[x] != kk {
                    self.next();
                }
            }
            (5, _, _, 0) => {
    d4b0:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d4b4:	2800      	cmp	r0, #0
    d4b6:	f000 8541 	beq.w	df3c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xc78>
    d4ba:	e019      	b.n	d4f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x22c>
            }
            (7, _, _, _) => {
                trace!("[{:04x}] ADD Vx, kk", self.pc);
                self.v[x] = self.v[x].wrapping_add(kk);
            }
            (8, _, _, 0) => {
    d4bc:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d4c0:	4601      	mov	r1, r0
    d4c2:	280e      	cmp	r0, #14
    d4c4:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
    d4c8:	d812      	bhi.n	d4f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x22c>
    d4ca:	f8dd 1424 	ldr.w	r1, [sp, #1060]	; 0x424
    d4ce:	e8df f011 	tbh	[pc, r1, lsl #1]
    d4d2:	071e      	.short	0x071e
    d4d4:	086707c0 	.word	0x086707c0
    d4d8:	09b5090e 	.word	0x09b5090e
    d4dc:	0b3b0a77 	.word	0x0b3b0a77
    d4e0:	000f0bf0 	.word	0x000f0bf0
    d4e4:	000f000f 	.word	0x000f000f
    d4e8:	000f000f 	.word	0x000f000f
    d4ec:	0cb4000f 	.word	0x0cb4000f
                let x = x as usize;
                for i in 0..(x + 1) {
                    self.v[i] = self.mem[self.i as usize + i];
                }
            }
            _ => panic!("[{:04x}] Invalid op: {:04x}", self.pc, inst), // Bad ops
    d4f0:	f240 4098 	movw	r0, #1176	; 0x498
    d4f4:	f2c0 0002 	movt	r0, #2
    d4f8:	6801      	ldr	r1, [r0, #0]
    d4fa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d4fe:	f100 0212 	add.w	r2, r0, #18
    d502:	f8cd 2c68 	str.w	r2, [sp, #3176]	; 0xc68
    d506:	f20d 4296 	addw	r2, sp, #1174	; 0x496
    d50a:	f8cd 2c6c 	str.w	r2, [sp, #3180]	; 0xc6c
    d50e:	f8dd 2c68 	ldr.w	r2, [sp, #3176]	; 0xc68
    d512:	f8cd 2d60 	str.w	r2, [sp, #3424]	; 0xd60
    d516:	f8dd 3c6c 	ldr.w	r3, [sp, #3180]	; 0xc6c
    d51a:	f8cd 3d64 	str.w	r3, [sp, #3428]	; 0xd64
    d51e:	f249 1ccf 	movw	ip, #37327	; 0x91cf
    d522:	f2c0 0c01 	movt	ip, #1
    d526:	4610      	mov	r0, r2
    d528:	f8cd 1434 	str.w	r1, [sp, #1076]	; 0x434
    d52c:	4661      	mov	r1, ip
    d52e:	f8cd 3430 	str.w	r3, [sp, #1072]	; 0x430
    d532:	f7fd f951 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d536:	f8cd 042c 	str.w	r0, [sp, #1068]	; 0x42c
    d53a:	f8cd 1428 	str.w	r1, [sp, #1064]	; 0x428
    d53e:	f003 b94f 	b.w	107e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x351c>
            (9, _, _, 0) => {
    d542:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d546:	2800      	cmp	r0, #0
    d548:	f001 8532 	beq.w	efb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1cec>
    d54c:	e7d0      	b.n	d4f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x22c>
            (0xe, _, 9, 0xe) => {
    d54e:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    d552:	4601      	mov	r1, r0
    d554:	2809      	cmp	r0, #9
    d556:	f8cd 1420 	str.w	r1, [sp, #1056]	; 0x420
    d55a:	d006      	beq.n	d56a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2a6>
    d55c:	e7ff      	b.n	d55e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x29a>
    d55e:	f8dd 0420 	ldr.w	r0, [sp, #1056]	; 0x420
    d562:	b281      	uxth	r1, r0
    d564:	290a      	cmp	r1, #10
    d566:	d006      	beq.n	d576 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2b2>
    d568:	e7c2      	b.n	d4f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x22c>
    d56a:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d56e:	280e      	cmp	r0, #14
    d570:	f002 815b 	beq.w	f82a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2566>
    d574:	e7bc      	b.n	d4f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x22c>
            (0xe, _, 0xa, 0x1) => {
    d576:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d57a:	2801      	cmp	r0, #1
    d57c:	f002 81fe 	beq.w	f97c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x26b8>
    d580:	e7b6      	b.n	d4f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x22c>
            (0xf, _, 0, 7) => {
    d582:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    d586:	4601      	mov	r1, r0
    d588:	2806      	cmp	r0, #6
    d58a:	f8cd 141c 	str.w	r1, [sp, #1052]	; 0x41c
    d58e:	d8af      	bhi.n	d4f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x22c>
    d590:	f8dd 141c 	ldr.w	r1, [sp, #1052]	; 0x41c
    d594:	e8df f001 	tbb	[pc, r1]
    d598:	322c1505 	.word	0x322c1505
    d59c:	003e3804 	.word	0x003e3804
    d5a0:	e7a6      	b.n	d4f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x22c>
    d5a2:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d5a6:	4601      	mov	r1, r0
    d5a8:	2807      	cmp	r0, #7
    d5aa:	f8cd 1418 	str.w	r1, [sp, #1048]	; 0x418
    d5ae:	f002 828e 	beq.w	face <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x280a>
    d5b2:	e7ff      	b.n	d5b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2f0>
    d5b4:	f8dd 0418 	ldr.w	r0, [sp, #1048]	; 0x418
    d5b8:	b281      	uxth	r1, r0
    d5ba:	290a      	cmp	r1, #10
    d5bc:	f002 8320 	beq.w	fc00 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x293c>
    d5c0:	e796      	b.n	d4f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x22c>
            (0xf, _, 1, 5) => {
    d5c2:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d5c6:	4601      	mov	r1, r0
    d5c8:	2805      	cmp	r0, #5
    d5ca:	f8cd 1414 	str.w	r1, [sp, #1044]	; 0x414
    d5ce:	f002 83b1 	beq.w	fd34 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2a70>
    d5d2:	e7ff      	b.n	d5d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x310>
    d5d4:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    d5d8:	b281      	uxth	r1, r0
    d5da:	2908      	cmp	r1, #8
    d5dc:	f002 843f 	beq.w	fe5e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2b9a>
    d5e0:	e7ff      	b.n	d5e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x31e>
    d5e2:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    d5e6:	b281      	uxth	r1, r0
    d5e8:	290e      	cmp	r1, #14
    d5ea:	f002 84cd 	beq.w	ff88 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2cc4>
    d5ee:	e77f      	b.n	d4f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x22c>
            (0xf, _, 2, 9) => {
    d5f0:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d5f4:	2809      	cmp	r0, #9
    d5f6:	f002 856b 	beq.w	100d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2e0c>
    d5fa:	e779      	b.n	d4f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x22c>
            (0xf, _, 3, 3) => {
    d5fc:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d600:	2803      	cmp	r0, #3
    d602:	f002 8616 	beq.w	10232 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2f6e>
    d606:	e773      	b.n	d4f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x22c>
            (0xf, _, 5, 5) => {
    d608:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d60c:	2805      	cmp	r0, #5
    d60e:	f002 871f 	beq.w	10450 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x318c>
    d612:	e76d      	b.n	d4f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x22c>
            (0xf, _, 6, 5) => {
    d614:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d618:	2805      	cmp	r0, #5
    d61a:	f002 87fc 	beq.w	10616 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3352>
    d61e:	e767      	b.n	d4f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x22c>
    d620:	2005      	movs	r0, #5
    d622:	f8cd 04a0 	str.w	r0, [sp, #1184]	; 0x4a0
    d626:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
    d62a:	f2c0 0001 	movt	r0, #1
    d62e:	6801      	ldr	r1, [r0, #0]
    d630:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    d634:	f009 fb3c 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d638:	f8cd 0410 	str.w	r0, [sp, #1040]	; 0x410
    d63c:	e01f      	b.n	d67e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3ba>
    d63e:	2001      	movs	r0, #1
    d640:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    d644:	e015      	b.n	d672 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3ae>
    d646:	2000      	movs	r0, #0
    d648:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    d64c:	e011      	b.n	d672 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3ae>
    d64e:	2000      	movs	r0, #0
/// [`debug!`]: macro.debug.html
/// [`trace!`]: macro.trace.html
/// [`set_max_level`]: fn.set_max_level.html
#[inline(always)]
pub fn max_level() -> LevelFilter {
    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
    d650:	f88d 0dab 	strb.w	r0, [sp, #3499]	; 0xdab
    d654:	f89d 1dab 	ldrb.w	r1, [sp, #3499]	; 0xdab
    d658:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d65c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d660:	f003 fed5 	bl	1140e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d664:	f8cd 0dac 	str.w	r0, [sp, #3500]	; 0xdac
    d668:	f8dd 0dac 	ldr.w	r0, [sp, #3500]	; 0xdac
    d66c:	f8cd 04a8 	str.w	r0, [sp, #1192]	; 0x4a8
    d670:	e00b      	b.n	d68a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3c6>
    d672:	f89d 04a7 	ldrb.w	r0, [sp, #1191]	; 0x4a7
    d676:	07c0      	lsls	r0, r0, #31
    d678:	2800      	cmp	r0, #0
    d67a:	d115      	bne.n	d6a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3e4>
    d67c:	e05e      	b.n	d73c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x478>
    d67e:	f8dd 0410 	ldr.w	r0, [sp, #1040]	; 0x410
    d682:	07c1      	lsls	r1, r0, #31
    d684:	2900      	cmp	r1, #0
    d686:	d1e2      	bne.n	d64e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x38a>
    d688:	e7dd      	b.n	d646 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x382>
    d68a:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    d68e:	f50d 6195 	add.w	r1, sp, #1192	; 0x4a8
    d692:	f009 fb0d 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d696:	f8cd 040c 	str.w	r0, [sp, #1036]	; 0x40c
    d69a:	e7ff      	b.n	d69c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3d8>
    d69c:	f8dd 040c 	ldr.w	r0, [sp, #1036]	; 0x40c
    d6a0:	07c1      	lsls	r1, r0, #31
    d6a2:	2900      	cmp	r1, #0
    d6a4:	d1cb      	bne.n	d63e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x37a>
    d6a6:	e7ce      	b.n	d646 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x382>
                trace!("[{:04x}] CLS", self.pc);
    d6a8:	f240 7038 	movw	r0, #1848	; 0x738
    d6ac:	f2c0 0002 	movt	r0, #2
    d6b0:	6801      	ldr	r1, [r0, #0]
    d6b2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d6b6:	f100 0212 	add.w	r2, r0, #18
    d6ba:	f8cd 24cc 	str.w	r2, [sp, #1228]	; 0x4cc
    d6be:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
    d6c2:	f8cd 2d88 	str.w	r2, [sp, #3464]	; 0xd88
    d6c6:	f249 13cf 	movw	r3, #37327	; 0x91cf
    d6ca:	f2c0 0301 	movt	r3, #1
    d6ce:	4610      	mov	r0, r2
    d6d0:	f8cd 1408 	str.w	r1, [sp, #1032]	; 0x408
    d6d4:	4619      	mov	r1, r3
    d6d6:	f7fd f87f 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d6da:	f8cd 0404 	str.w	r0, [sp, #1028]	; 0x404
    d6de:	f8cd 1400 	str.w	r1, [sp, #1024]	; 0x400
    d6e2:	e7ff      	b.n	d6e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x420>
    d6e4:	f8dd 0404 	ldr.w	r0, [sp, #1028]	; 0x404
    d6e8:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
    d6ec:	f8dd 1400 	ldr.w	r1, [sp, #1024]	; 0x400
    d6f0:	f8cd 14c8 	str.w	r1, [sp, #1224]	; 0x4c8
    d6f4:	f64f 1238 	movw	r2, #63800	; 0xf938
    d6f8:	f2c0 0201 	movt	r2, #1
    d6fc:	6812      	ldr	r2, [r2, #0]
    d6fe:	466b      	mov	r3, sp
    d700:	f04f 0c01 	mov.w	ip, #1
    d704:	f8c3 c008 	str.w	ip, [r3, #8]
    d708:	605a      	str	r2, [r3, #4]
    d70a:	f8c3 c000 	str.w	ip, [r3]
    d70e:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    d712:	2202      	movs	r2, #2
    d714:	f20d 43c4 	addw	r3, sp, #1220	; 0x4c4
    d718:	f8dd 1408 	ldr.w	r1, [sp, #1032]	; 0x408
    d71c:	f009 f98d 	bl	16a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d720:	e7ff      	b.n	d722 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x45e>
    d722:	f8dd 14a0 	ldr.w	r1, [sp, #1184]	; 0x4a0
    d726:	f240 7058 	movw	r0, #1880	; 0x758
    d72a:	f2c0 0002 	movt	r0, #2
    d72e:	6802      	ldr	r2, [r0, #0]
    d730:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    d734:	f004 fe9a 	bl	1246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d738:	e7ff      	b.n	d73a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x476>
    d73a:	e7ff      	b.n	d73c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x478>
    d73c:	f241 0048 	movw	r0, #4168	; 0x1048
                let (w, h) = self.hw.vram_size();
    d740:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    d744:	4408      	add	r0, r1
    d746:	f7fe fc9d 	bl	c084 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hed066ffbd9b90541E>
    d74a:	90ff      	str	r0, [sp, #1020]	; 0x3fc
    d74c:	91fe      	str	r1, [sp, #1016]	; 0x3f8
    d74e:	e7ff      	b.n	d750 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x48c>
    d750:	98ff      	ldr	r0, [sp, #1020]	; 0x3fc
    d752:	f8cd 0d8c 	str.w	r0, [sp, #3468]	; 0xd8c
    d756:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
    d758:	f8cd 14d0 	str.w	r1, [sp, #1232]	; 0x4d0
    d75c:	2200      	movs	r2, #0
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    d75e:	f8cd 2538 	str.w	r2, [sp, #1336]	; 0x538
    d762:	f8cd 053c 	str.w	r0, [sp, #1340]	; 0x53c
    d766:	f50d 629a 	add.w	r2, sp, #1232	; 0x4d0
    d76a:	f8cd 2540 	str.w	r2, [sp, #1344]	; 0x540
    d76e:	f8dd 1538 	ldr.w	r1, [sp, #1336]	; 0x538
    d772:	f8dd 253c 	ldr.w	r2, [sp, #1340]	; 0x53c
    d776:	f8dd 3540 	ldr.w	r3, [sp, #1344]	; 0x540
    d77a:	f20d 502c 	addw	r0, sp, #1324	; 0x52c
    d77e:	f003 ff0a 	bl	11596 <_ZN4core4iter6traits8iterator8Iterator3map17h176187f37aedb66cE>
    d782:	e7ff      	b.n	d784 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x4c0>
    d784:	f50d 60a0 	add.w	r0, sp, #1280	; 0x500
    d788:	f20d 512c 	addw	r1, sp, #1324	; 0x52c
    d78c:	f003 fe53 	bl	11436 <_ZN4core4iter6traits8iterator8Iterator7flatten17ha4622b417599751bE>
    d790:	e7ff      	b.n	d792 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x4ce>
    d792:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    d796:	f50d 61a0 	add.w	r1, sp, #1280	; 0x500
    d79a:	f003 fe21 	bl	113e0 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h6c13765855842655E>
    d79e:	e7ff      	b.n	d7a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x4dc>
    d7a0:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    d7a4:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    d7a8:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
    d7ac:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
    d7b0:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
    d7b4:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
    d7b8:	e7ff      	b.n	d7ba <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x4f6>
    d7ba:	f50d 60ae 	add.w	r0, sp, #1392	; 0x570
    d7be:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    d7c2:	f003 fd3a 	bl	1123a <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha6283b9e8d8dfa4aE>
    d7c6:	e7ff      	b.n	d7c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x504>
    d7c8:	f8dd 0570 	ldr.w	r0, [sp, #1392]	; 0x570
    d7cc:	2800      	cmp	r0, #0
    d7ce:	d001      	beq.n	d7d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x510>
    d7d0:	e7ff      	b.n	d7d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x50e>
    d7d2:	e002      	b.n	d7da <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x516>
        match (
    d7d4:	f003 b843 	b.w	1085e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x359a>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    d7d8:	defe      	udf	#254	; 0xfe
    d7da:	f8dd 0574 	ldr.w	r0, [sp, #1396]	; 0x574
    d7de:	f8dd 1578 	ldr.w	r1, [sp, #1400]	; 0x578
    d7e2:	f8cd 0d90 	str.w	r0, [sp, #3472]	; 0xd90
    d7e6:	f8cd 1d94 	str.w	r1, [sp, #3476]	; 0xd94
    d7ea:	f8cd 0d98 	str.w	r0, [sp, #3480]	; 0xd98
    d7ee:	f8cd 1d9c 	str.w	r1, [sp, #3484]	; 0xd9c
    d7f2:	f8cd 0da0 	str.w	r0, [sp, #3488]	; 0xda0
    d7f6:	f8cd 1da4 	str.w	r1, [sp, #3492]	; 0xda4
    d7fa:	f241 0248 	movw	r2, #4168	; 0x1048
                    self.hw.vram_set(x, y, false);
    d7fe:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    d802:	441a      	add	r2, r3
    d804:	2300      	movs	r3, #0
    d806:	90fd      	str	r0, [sp, #1012]	; 0x3f4
    d808:	4610      	mov	r0, r2
    d80a:	9afd      	ldr	r2, [sp, #1012]	; 0x3f4
    d80c:	91fc      	str	r1, [sp, #1008]	; 0x3f0
    d80e:	4611      	mov	r1, r2
    d810:	9afc      	ldr	r2, [sp, #1008]	; 0x3f0
    d812:	f7fe fa85 	bl	bd20 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E>
    d816:	e7ff      	b.n	d818 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x554>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    d818:	e7cf      	b.n	d7ba <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x4f6>
    d81a:	2005      	movs	r0, #5
    d81c:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
    d820:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
    d824:	f2c0 0001 	movt	r0, #1
    d828:	6801      	ldr	r1, [r0, #0]
    d82a:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    d82e:	f009 fa3f 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d832:	90fb      	str	r0, [sp, #1004]	; 0x3ec
    d834:	e01f      	b.n	d876 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x5b2>
    d836:	2001      	movs	r0, #1
    d838:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    d83c:	e015      	b.n	d86a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x5a6>
    d83e:	2000      	movs	r0, #0
    d840:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    d844:	e011      	b.n	d86a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x5a6>
    d846:	2000      	movs	r0, #0
    d848:	f88d 0db3 	strb.w	r0, [sp, #3507]	; 0xdb3
    d84c:	f89d 1db3 	ldrb.w	r1, [sp, #3507]	; 0xdb3
    d850:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d854:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d858:	f003 fdd9 	bl	1140e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d85c:	f8cd 0db4 	str.w	r0, [sp, #3508]	; 0xdb4
    d860:	f8dd 0db4 	ldr.w	r0, [sp, #3508]	; 0xdb4
    d864:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
    d868:	e00a      	b.n	d880 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x5bc>
    d86a:	f89d 0583 	ldrb.w	r0, [sp, #1411]	; 0x583
    d86e:	07c0      	lsls	r0, r0, #31
    d870:	2800      	cmp	r0, #0
    d872:	d112      	bne.n	d89a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x5d6>
    d874:	e055      	b.n	d922 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x65e>
    d876:	98fb      	ldr	r0, [sp, #1004]	; 0x3ec
    d878:	07c1      	lsls	r1, r0, #31
    d87a:	2900      	cmp	r1, #0
    d87c:	d1e3      	bne.n	d846 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x582>
    d87e:	e7de      	b.n	d83e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x57a>
    d880:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    d884:	f20d 5184 	addw	r1, sp, #1412	; 0x584
    d888:	f009 fa12 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d88c:	90fa      	str	r0, [sp, #1000]	; 0x3e8
    d88e:	e7ff      	b.n	d890 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x5cc>
    d890:	98fa      	ldr	r0, [sp, #1000]	; 0x3e8
    d892:	07c1      	lsls	r1, r0, #31
    d894:	2900      	cmp	r1, #0
    d896:	d1ce      	bne.n	d836 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x572>
    d898:	e7d1      	b.n	d83e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x57a>
                trace!("[{:04x}] RET", self.pc);
    d89a:	f240 60fc 	movw	r0, #1788	; 0x6fc
    d89e:	f2c0 0002 	movt	r0, #2
    d8a2:	6801      	ldr	r1, [r0, #0]
    d8a4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d8a8:	f100 0212 	add.w	r2, r0, #18
    d8ac:	f8cd 25a8 	str.w	r2, [sp, #1448]	; 0x5a8
    d8b0:	f8dd 25a8 	ldr.w	r2, [sp, #1448]	; 0x5a8
    d8b4:	f8cd 2d80 	str.w	r2, [sp, #3456]	; 0xd80
    d8b8:	f249 13cf 	movw	r3, #37327	; 0x91cf
    d8bc:	f2c0 0301 	movt	r3, #1
    d8c0:	4610      	mov	r0, r2
    d8c2:	91f9      	str	r1, [sp, #996]	; 0x3e4
    d8c4:	4619      	mov	r1, r3
    d8c6:	f7fc ff87 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d8ca:	90f8      	str	r0, [sp, #992]	; 0x3e0
    d8cc:	91f7      	str	r1, [sp, #988]	; 0x3dc
    d8ce:	e7ff      	b.n	d8d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x60c>
    d8d0:	98f8      	ldr	r0, [sp, #992]	; 0x3e0
    d8d2:	f8cd 05a0 	str.w	r0, [sp, #1440]	; 0x5a0
    d8d6:	99f7      	ldr	r1, [sp, #988]	; 0x3dc
    d8d8:	f8cd 15a4 	str.w	r1, [sp, #1444]	; 0x5a4
    d8dc:	f64f 1238 	movw	r2, #63800	; 0xf938
    d8e0:	f2c0 0201 	movt	r2, #1
    d8e4:	6812      	ldr	r2, [r2, #0]
    d8e6:	466b      	mov	r3, sp
    d8e8:	f04f 0c01 	mov.w	ip, #1
    d8ec:	f8c3 c008 	str.w	ip, [r3, #8]
    d8f0:	605a      	str	r2, [r3, #4]
    d8f2:	f8c3 c000 	str.w	ip, [r3]
    d8f6:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    d8fa:	2202      	movs	r2, #2
    d8fc:	f50d 63b4 	add.w	r3, sp, #1440	; 0x5a0
    d900:	99f9      	ldr	r1, [sp, #996]	; 0x3e4
    d902:	f009 f89a 	bl	16a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d906:	e7ff      	b.n	d908 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x644>
    d908:	f8dd 157c 	ldr.w	r1, [sp, #1404]	; 0x57c
    d90c:	f240 701c 	movw	r0, #1820	; 0x71c
    d910:	f2c0 0002 	movt	r0, #2
    d914:	6802      	ldr	r2, [r0, #0]
    d916:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    d91a:	f004 fda7 	bl	1246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d91e:	e7ff      	b.n	d920 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x65c>
    d920:	e7ff      	b.n	d922 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x65e>
                let addr = self.pop();
    d922:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d926:	f7ff fc79 	bl	d21c <_ZN8libchip814Chip8$LT$T$GT$3pop17h6d2ddb52680323d8E>
    d92a:	4601      	mov	r1, r0
    d92c:	f8ad 0d86 	strh.w	r0, [sp, #3462]	; 0xd86
    d930:	91f6      	str	r1, [sp, #984]	; 0x3d8
    d932:	e7ff      	b.n	d934 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x670>
                self.jump(addr);
    d934:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d938:	99f6      	ldr	r1, [sp, #984]	; 0x3d8
    d93a:	f003 fa7f 	bl	10e3c <_ZN8libchip814Chip8$LT$T$GT$4jump17h6461abfe105496f2E>
    d93e:	e7ff      	b.n	d940 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x67c>
        match (
    d940:	f002 bf8d 	b.w	1085e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x359a>
    d944:	2005      	movs	r0, #5
    d946:	f8cd 05ac 	str.w	r0, [sp, #1452]	; 0x5ac
    d94a:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
    d94e:	f2c0 0001 	movt	r0, #1
    d952:	6801      	ldr	r1, [r0, #0]
    d954:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    d958:	f009 f9aa 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d95c:	90f5      	str	r0, [sp, #980]	; 0x3d4
    d95e:	e01f      	b.n	d9a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x6dc>
    d960:	2001      	movs	r0, #1
    d962:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    d966:	e015      	b.n	d994 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x6d0>
    d968:	2000      	movs	r0, #0
    d96a:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    d96e:	e011      	b.n	d994 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x6d0>
    d970:	2000      	movs	r0, #0
    d972:	f88d 0dbb 	strb.w	r0, [sp, #3515]	; 0xdbb
    d976:	f89d 1dbb 	ldrb.w	r1, [sp, #3515]	; 0xdbb
    d97a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d97e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d982:	f003 fd44 	bl	1140e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d986:	f8cd 0dbc 	str.w	r0, [sp, #3516]	; 0xdbc
    d98a:	f8dd 0dbc 	ldr.w	r0, [sp, #3516]	; 0xdbc
    d98e:	f8cd 05b4 	str.w	r0, [sp, #1460]	; 0x5b4
    d992:	e00a      	b.n	d9aa <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x6e6>
    d994:	f89d 05b3 	ldrb.w	r0, [sp, #1459]	; 0x5b3
    d998:	07c0      	lsls	r0, r0, #31
    d99a:	2800      	cmp	r0, #0
    d99c:	d112      	bne.n	d9c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x700>
    d99e:	e055      	b.n	da4c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x788>
    d9a0:	98f5      	ldr	r0, [sp, #980]	; 0x3d4
    d9a2:	07c1      	lsls	r1, r0, #31
    d9a4:	2900      	cmp	r1, #0
    d9a6:	d1e3      	bne.n	d970 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x6ac>
    d9a8:	e7de      	b.n	d968 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x6a4>
    d9aa:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    d9ae:	f20d 51b4 	addw	r1, sp, #1460	; 0x5b4
    d9b2:	f009 f97d 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d9b6:	90f4      	str	r0, [sp, #976]	; 0x3d0
    d9b8:	e7ff      	b.n	d9ba <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x6f6>
    d9ba:	98f4      	ldr	r0, [sp, #976]	; 0x3d0
    d9bc:	07c1      	lsls	r1, r0, #31
    d9be:	2900      	cmp	r1, #0
    d9c0:	d1ce      	bne.n	d960 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x69c>
    d9c2:	e7d1      	b.n	d968 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x6a4>
                trace!("[{:04x}] SYS nnn", self.pc);
    d9c4:	f240 60a0 	movw	r0, #1696	; 0x6a0
    d9c8:	f2c0 0002 	movt	r0, #2
    d9cc:	6801      	ldr	r1, [r0, #0]
    d9ce:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d9d2:	f100 0212 	add.w	r2, r0, #18
    d9d6:	f8cd 25d8 	str.w	r2, [sp, #1496]	; 0x5d8
    d9da:	f8dd 25d8 	ldr.w	r2, [sp, #1496]	; 0x5d8
    d9de:	f8cd 2d7c 	str.w	r2, [sp, #3452]	; 0xd7c
    d9e2:	f249 13cf 	movw	r3, #37327	; 0x91cf
    d9e6:	f2c0 0301 	movt	r3, #1
    d9ea:	4610      	mov	r0, r2
    d9ec:	91f3      	str	r1, [sp, #972]	; 0x3cc
    d9ee:	4619      	mov	r1, r3
    d9f0:	f7fc fef2 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d9f4:	90f2      	str	r0, [sp, #968]	; 0x3c8
    d9f6:	91f1      	str	r1, [sp, #964]	; 0x3c4
    d9f8:	e7ff      	b.n	d9fa <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x736>
    d9fa:	98f2      	ldr	r0, [sp, #968]	; 0x3c8
    d9fc:	f8cd 05d0 	str.w	r0, [sp, #1488]	; 0x5d0
    da00:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
    da02:	f8cd 15d4 	str.w	r1, [sp, #1492]	; 0x5d4
    da06:	f64f 1238 	movw	r2, #63800	; 0xf938
    da0a:	f2c0 0201 	movt	r2, #1
    da0e:	6812      	ldr	r2, [r2, #0]
    da10:	466b      	mov	r3, sp
    da12:	f04f 0c01 	mov.w	ip, #1
    da16:	f8c3 c008 	str.w	ip, [r3, #8]
    da1a:	605a      	str	r2, [r3, #4]
    da1c:	f8c3 c000 	str.w	ip, [r3]
    da20:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    da24:	2202      	movs	r2, #2
    da26:	f50d 63ba 	add.w	r3, sp, #1488	; 0x5d0
    da2a:	99f3      	ldr	r1, [sp, #972]	; 0x3cc
    da2c:	f009 f805 	bl	16a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    da30:	e7ff      	b.n	da32 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x76e>
    da32:	f8dd 15ac 	ldr.w	r1, [sp, #1452]	; 0x5ac
    da36:	f240 60c0 	movw	r0, #1728	; 0x6c0
    da3a:	f2c0 0002 	movt	r0, #2
    da3e:	6802      	ldr	r2, [r0, #0]
    da40:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    da44:	f004 fd12 	bl	1246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    da48:	e7ff      	b.n	da4a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x786>
    da4a:	e7ff      	b.n	da4c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x788>
    da4c:	f240 60c4 	movw	r0, #1732	; 0x6c4
    da50:	f2c0 0002 	movt	r0, #2
    da54:	f240 62d4 	movw	r2, #1748	; 0x6d4
    da58:	f2c0 0202 	movt	r2, #2
    da5c:	210f      	movs	r1, #15
    da5e:	f009 ffa9 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    da62:	defe      	udf	#254	; 0xfe
    da64:	2005      	movs	r0, #5
    da66:	f8cd 05dc 	str.w	r0, [sp, #1500]	; 0x5dc
    da6a:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
    da6e:	f2c0 0001 	movt	r0, #1
    da72:	6801      	ldr	r1, [r0, #0]
    da74:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    da78:	f009 f91a 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    da7c:	90f0      	str	r0, [sp, #960]	; 0x3c0
    da7e:	e01f      	b.n	dac0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x7fc>
    da80:	2001      	movs	r0, #1
    da82:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    da86:	e015      	b.n	dab4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x7f0>
    da88:	2000      	movs	r0, #0
    da8a:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    da8e:	e011      	b.n	dab4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x7f0>
    da90:	2000      	movs	r0, #0
    da92:	f88d 0dc3 	strb.w	r0, [sp, #3523]	; 0xdc3
    da96:	f89d 1dc3 	ldrb.w	r1, [sp, #3523]	; 0xdc3
    da9a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    da9e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    daa2:	f003 fcb4 	bl	1140e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    daa6:	f8cd 0dc4 	str.w	r0, [sp, #3524]	; 0xdc4
    daaa:	f8dd 0dc4 	ldr.w	r0, [sp, #3524]	; 0xdc4
    daae:	f8cd 05e4 	str.w	r0, [sp, #1508]	; 0x5e4
    dab2:	e00a      	b.n	daca <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x806>
    dab4:	f89d 05e3 	ldrb.w	r0, [sp, #1507]	; 0x5e3
    dab8:	07c0      	lsls	r0, r0, #31
    daba:	2800      	cmp	r0, #0
    dabc:	d112      	bne.n	dae4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x820>
    dabe:	e055      	b.n	db6c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x8a8>
    dac0:	98f0      	ldr	r0, [sp, #960]	; 0x3c0
    dac2:	07c1      	lsls	r1, r0, #31
    dac4:	2900      	cmp	r1, #0
    dac6:	d1e3      	bne.n	da90 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x7cc>
    dac8:	e7de      	b.n	da88 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x7c4>
    daca:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    dace:	f20d 51e4 	addw	r1, sp, #1508	; 0x5e4
    dad2:	f009 f8ed 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dad6:	90ef      	str	r0, [sp, #956]	; 0x3bc
    dad8:	e7ff      	b.n	dada <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x816>
    dada:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
    dadc:	07c1      	lsls	r1, r0, #31
    dade:	2900      	cmp	r1, #0
    dae0:	d1ce      	bne.n	da80 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x7bc>
    dae2:	e7d1      	b.n	da88 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x7c4>
                trace!("[{:04x}] JP nnn", self.pc);
    dae4:	f240 6060 	movw	r0, #1632	; 0x660
    dae8:	f2c0 0002 	movt	r0, #2
    daec:	6801      	ldr	r1, [r0, #0]
    daee:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    daf2:	f100 0212 	add.w	r2, r0, #18
    daf6:	f8cd 2608 	str.w	r2, [sp, #1544]	; 0x608
    dafa:	f8dd 2608 	ldr.w	r2, [sp, #1544]	; 0x608
    dafe:	f8cd 2d78 	str.w	r2, [sp, #3448]	; 0xd78
    db02:	f249 13cf 	movw	r3, #37327	; 0x91cf
    db06:	f2c0 0301 	movt	r3, #1
    db0a:	4610      	mov	r0, r2
    db0c:	91ee      	str	r1, [sp, #952]	; 0x3b8
    db0e:	4619      	mov	r1, r3
    db10:	f7fc fe62 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    db14:	90ed      	str	r0, [sp, #948]	; 0x3b4
    db16:	91ec      	str	r1, [sp, #944]	; 0x3b0
    db18:	e7ff      	b.n	db1a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x856>
    db1a:	98ed      	ldr	r0, [sp, #948]	; 0x3b4
    db1c:	f8cd 0600 	str.w	r0, [sp, #1536]	; 0x600
    db20:	99ec      	ldr	r1, [sp, #944]	; 0x3b0
    db22:	f8cd 1604 	str.w	r1, [sp, #1540]	; 0x604
    db26:	f64f 1238 	movw	r2, #63800	; 0xf938
    db2a:	f2c0 0201 	movt	r2, #1
    db2e:	6812      	ldr	r2, [r2, #0]
    db30:	466b      	mov	r3, sp
    db32:	f04f 0c01 	mov.w	ip, #1
    db36:	f8c3 c008 	str.w	ip, [r3, #8]
    db3a:	605a      	str	r2, [r3, #4]
    db3c:	f8c3 c000 	str.w	ip, [r3]
    db40:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    db44:	2202      	movs	r2, #2
    db46:	f50d 63c0 	add.w	r3, sp, #1536	; 0x600
    db4a:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
    db4c:	f008 ff75 	bl	16a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    db50:	e7ff      	b.n	db52 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x88e>
    db52:	f8dd 15dc 	ldr.w	r1, [sp, #1500]	; 0x5dc
    db56:	f240 6080 	movw	r0, #1664	; 0x680
    db5a:	f2c0 0002 	movt	r0, #2
    db5e:	6802      	ldr	r2, [r0, #0]
    db60:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    db64:	f004 fc82 	bl	1246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    db68:	e7ff      	b.n	db6a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x8a6>
    db6a:	e7ff      	b.n	db6c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x8a8>
    db6c:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    db6e:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    db72:	f009 f874 	bl	16c5e <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E>
    db76:	90eb      	str	r0, [sp, #940]	; 0x3ac
    db78:	e7ff      	b.n	db7a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x8b6>
    db7a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    db7e:	99eb      	ldr	r1, [sp, #940]	; 0x3ac
    db80:	f003 f95c 	bl	10e3c <_ZN8libchip814Chip8$LT$T$GT$4jump17h6461abfe105496f2E>
    db84:	e7ff      	b.n	db86 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x8c2>
        match (
    db86:	f002 be6a 	b.w	1085e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x359a>
    db8a:	2005      	movs	r0, #5
    db8c:	f8cd 060c 	str.w	r0, [sp, #1548]	; 0x60c
    db90:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
    db94:	f2c0 0001 	movt	r0, #1
    db98:	6801      	ldr	r1, [r0, #0]
    db9a:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    db9e:	f009 f887 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dba2:	90ea      	str	r0, [sp, #936]	; 0x3a8
    dba4:	e01f      	b.n	dbe6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x922>
    dba6:	2001      	movs	r0, #1
    dba8:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    dbac:	e015      	b.n	dbda <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x916>
    dbae:	2000      	movs	r0, #0
    dbb0:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    dbb4:	e011      	b.n	dbda <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x916>
    dbb6:	2000      	movs	r0, #0
    dbb8:	f88d 0dcb 	strb.w	r0, [sp, #3531]	; 0xdcb
    dbbc:	f89d 1dcb 	ldrb.w	r1, [sp, #3531]	; 0xdcb
    dbc0:	f644 206c 	movw	r0, #19052	; 0x4a6c
    dbc4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dbc8:	f003 fc21 	bl	1140e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    dbcc:	f8cd 0dcc 	str.w	r0, [sp, #3532]	; 0xdcc
    dbd0:	f8dd 0dcc 	ldr.w	r0, [sp, #3532]	; 0xdcc
    dbd4:	f8cd 0614 	str.w	r0, [sp, #1556]	; 0x614
    dbd8:	e00a      	b.n	dbf0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x92c>
    dbda:	f89d 0613 	ldrb.w	r0, [sp, #1555]	; 0x613
    dbde:	07c0      	lsls	r0, r0, #31
    dbe0:	2800      	cmp	r0, #0
    dbe2:	d112      	bne.n	dc0a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x946>
    dbe4:	e055      	b.n	dc92 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x9ce>
    dbe6:	98ea      	ldr	r0, [sp, #936]	; 0x3a8
    dbe8:	07c1      	lsls	r1, r0, #31
    dbea:	2900      	cmp	r1, #0
    dbec:	d1e3      	bne.n	dbb6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x8f2>
    dbee:	e7de      	b.n	dbae <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x8ea>
    dbf0:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    dbf4:	f20d 6114 	addw	r1, sp, #1556	; 0x614
    dbf8:	f009 f85a 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dbfc:	90e9      	str	r0, [sp, #932]	; 0x3a4
    dbfe:	e7ff      	b.n	dc00 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x93c>
    dc00:	98e9      	ldr	r0, [sp, #932]	; 0x3a4
    dc02:	07c1      	lsls	r1, r0, #31
    dc04:	2900      	cmp	r1, #0
    dc06:	d1ce      	bne.n	dba6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x8e2>
    dc08:	e7d1      	b.n	dbae <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x8ea>
                trace!("[{:04x}] CALL nnn", self.pc);
    dc0a:	f240 602c 	movw	r0, #1580	; 0x62c
    dc0e:	f2c0 0002 	movt	r0, #2
    dc12:	6801      	ldr	r1, [r0, #0]
    dc14:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dc18:	f100 0212 	add.w	r2, r0, #18
    dc1c:	f8cd 2638 	str.w	r2, [sp, #1592]	; 0x638
    dc20:	f8dd 2638 	ldr.w	r2, [sp, #1592]	; 0x638
    dc24:	f8cd 2d74 	str.w	r2, [sp, #3444]	; 0xd74
    dc28:	f249 13cf 	movw	r3, #37327	; 0x91cf
    dc2c:	f2c0 0301 	movt	r3, #1
    dc30:	4610      	mov	r0, r2
    dc32:	91e8      	str	r1, [sp, #928]	; 0x3a0
    dc34:	4619      	mov	r1, r3
    dc36:	f7fc fdcf 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    dc3a:	90e7      	str	r0, [sp, #924]	; 0x39c
    dc3c:	91e6      	str	r1, [sp, #920]	; 0x398
    dc3e:	e7ff      	b.n	dc40 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x97c>
    dc40:	98e7      	ldr	r0, [sp, #924]	; 0x39c
    dc42:	f8cd 0630 	str.w	r0, [sp, #1584]	; 0x630
    dc46:	99e6      	ldr	r1, [sp, #920]	; 0x398
    dc48:	f8cd 1634 	str.w	r1, [sp, #1588]	; 0x634
    dc4c:	f64f 1238 	movw	r2, #63800	; 0xf938
    dc50:	f2c0 0201 	movt	r2, #1
    dc54:	6812      	ldr	r2, [r2, #0]
    dc56:	466b      	mov	r3, sp
    dc58:	f04f 0c01 	mov.w	ip, #1
    dc5c:	f8c3 c008 	str.w	ip, [r3, #8]
    dc60:	605a      	str	r2, [r3, #4]
    dc62:	f8c3 c000 	str.w	ip, [r3]
    dc66:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    dc6a:	2202      	movs	r2, #2
    dc6c:	f50d 63c6 	add.w	r3, sp, #1584	; 0x630
    dc70:	99e8      	ldr	r1, [sp, #928]	; 0x3a0
    dc72:	f008 fee2 	bl	16a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    dc76:	e7ff      	b.n	dc78 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x9b4>
    dc78:	f8dd 160c 	ldr.w	r1, [sp, #1548]	; 0x60c
    dc7c:	f240 604c 	movw	r0, #1612	; 0x64c
    dc80:	f2c0 0002 	movt	r0, #2
    dc84:	6802      	ldr	r2, [r0, #0]
    dc86:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    dc8a:	f004 fbef 	bl	1246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    dc8e:	e7ff      	b.n	dc90 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x9cc>
    dc90:	e7ff      	b.n	dc92 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x9ce>
                self.push(self.pc);
    dc92:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dc96:	8a41      	ldrh	r1, [r0, #18]
    dc98:	f003 f926 	bl	10ee8 <_ZN8libchip814Chip8$LT$T$GT$4push17h7ae96cacff0c5af9E>
    dc9c:	e7ff      	b.n	dc9e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x9da>
    dc9e:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    dca0:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    dca4:	f008 ffdb 	bl	16c5e <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E>
    dca8:	90e5      	str	r0, [sp, #916]	; 0x394
    dcaa:	e7ff      	b.n	dcac <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x9e8>
    dcac:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dcb0:	99e5      	ldr	r1, [sp, #916]	; 0x394
    dcb2:	f003 f8c3 	bl	10e3c <_ZN8libchip814Chip8$LT$T$GT$4jump17h6461abfe105496f2E>
    dcb6:	e7ff      	b.n	dcb8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x9f4>
        match (
    dcb8:	f002 bdd1 	b.w	1085e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x359a>
    dcbc:	2005      	movs	r0, #5
    dcbe:	f8cd 063c 	str.w	r0, [sp, #1596]	; 0x63c
    dcc2:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
    dcc6:	f2c0 0001 	movt	r0, #1
    dcca:	6801      	ldr	r1, [r0, #0]
    dccc:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    dcd0:	f008 ffee 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dcd4:	90e4      	str	r0, [sp, #912]	; 0x390
    dcd6:	e01f      	b.n	dd18 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xa54>
    dcd8:	2001      	movs	r0, #1
    dcda:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    dcde:	e015      	b.n	dd0c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xa48>
    dce0:	2000      	movs	r0, #0
    dce2:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    dce6:	e011      	b.n	dd0c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xa48>
    dce8:	2000      	movs	r0, #0
    dcea:	f88d 0dd3 	strb.w	r0, [sp, #3539]	; 0xdd3
    dcee:	f89d 1dd3 	ldrb.w	r1, [sp, #3539]	; 0xdd3
    dcf2:	f644 206c 	movw	r0, #19052	; 0x4a6c
    dcf6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dcfa:	f003 fb88 	bl	1140e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    dcfe:	f8cd 0dd4 	str.w	r0, [sp, #3540]	; 0xdd4
    dd02:	f8dd 0dd4 	ldr.w	r0, [sp, #3540]	; 0xdd4
    dd06:	f8cd 0644 	str.w	r0, [sp, #1604]	; 0x644
    dd0a:	e00a      	b.n	dd22 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xa5e>
    dd0c:	f89d 0643 	ldrb.w	r0, [sp, #1603]	; 0x643
    dd10:	07c0      	lsls	r0, r0, #31
    dd12:	2800      	cmp	r0, #0
    dd14:	d112      	bne.n	dd3c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xa78>
    dd16:	e055      	b.n	ddc4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xb00>
    dd18:	98e4      	ldr	r0, [sp, #912]	; 0x390
    dd1a:	07c1      	lsls	r1, r0, #31
    dd1c:	2900      	cmp	r1, #0
    dd1e:	d1e3      	bne.n	dce8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xa24>
    dd20:	e7de      	b.n	dce0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xa1c>
    dd22:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    dd26:	f20d 6144 	addw	r1, sp, #1604	; 0x644
    dd2a:	f008 ffc1 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dd2e:	90e3      	str	r0, [sp, #908]	; 0x38c
    dd30:	e7ff      	b.n	dd32 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xa6e>
    dd32:	98e3      	ldr	r0, [sp, #908]	; 0x38c
    dd34:	07c1      	lsls	r1, r0, #31
    dd36:	2900      	cmp	r1, #0
    dd38:	d1ce      	bne.n	dcd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xa14>
    dd3a:	e7d1      	b.n	dce0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xa1c>
                trace!("[{:04x}] SE Vx kk", self.pc);
    dd3c:	f240 50dc 	movw	r0, #1500	; 0x5dc
    dd40:	f2c0 0002 	movt	r0, #2
    dd44:	6801      	ldr	r1, [r0, #0]
    dd46:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dd4a:	f100 0212 	add.w	r2, r0, #18
    dd4e:	f8cd 2668 	str.w	r2, [sp, #1640]	; 0x668
    dd52:	f8dd 2668 	ldr.w	r2, [sp, #1640]	; 0x668
    dd56:	f8cd 2d70 	str.w	r2, [sp, #3440]	; 0xd70
    dd5a:	f249 13cf 	movw	r3, #37327	; 0x91cf
    dd5e:	f2c0 0301 	movt	r3, #1
    dd62:	4610      	mov	r0, r2
    dd64:	91e2      	str	r1, [sp, #904]	; 0x388
    dd66:	4619      	mov	r1, r3
    dd68:	f7fc fd36 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    dd6c:	90e1      	str	r0, [sp, #900]	; 0x384
    dd6e:	91e0      	str	r1, [sp, #896]	; 0x380
    dd70:	e7ff      	b.n	dd72 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xaae>
    dd72:	98e1      	ldr	r0, [sp, #900]	; 0x384
    dd74:	f8cd 0660 	str.w	r0, [sp, #1632]	; 0x660
    dd78:	99e0      	ldr	r1, [sp, #896]	; 0x380
    dd7a:	f8cd 1664 	str.w	r1, [sp, #1636]	; 0x664
    dd7e:	f64f 1238 	movw	r2, #63800	; 0xf938
    dd82:	f2c0 0201 	movt	r2, #1
    dd86:	6812      	ldr	r2, [r2, #0]
    dd88:	466b      	mov	r3, sp
    dd8a:	f04f 0c01 	mov.w	ip, #1
    dd8e:	f8c3 c008 	str.w	ip, [r3, #8]
    dd92:	605a      	str	r2, [r3, #4]
    dd94:	f8c3 c000 	str.w	ip, [r3]
    dd98:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    dd9c:	2202      	movs	r2, #2
    dd9e:	f50d 63cc 	add.w	r3, sp, #1632	; 0x660
    dda2:	99e2      	ldr	r1, [sp, #904]	; 0x388
    dda4:	f008 fe49 	bl	16a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    dda8:	e7ff      	b.n	ddaa <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xae6>
    ddaa:	f8dd 163c 	ldr.w	r1, [sp, #1596]	; 0x63c
    ddae:	f240 50fc 	movw	r0, #1532	; 0x5fc
    ddb2:	f2c0 0002 	movt	r0, #2
    ddb6:	6802      	ldr	r2, [r0, #0]
    ddb8:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    ddbc:	f004 fb56 	bl	1246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ddc0:	e7ff      	b.n	ddc2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xafe>
    ddc2:	e7ff      	b.n	ddc4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xb00>
                if self.v[x] == kk {
    ddc4:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ddc8:	280f      	cmp	r0, #15
    ddca:	f203 8011 	bhi.w	10df0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3b2c>
    ddce:	e7ff      	b.n	ddd0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xb0c>
    ddd0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ddd4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ddd8:	1842      	adds	r2, r0, r1
    ddda:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ddde:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    dde2:	fa5f fc83 	uxtb.w	ip, r3
    dde6:	4562      	cmp	r2, ip
    dde8:	d106      	bne.n	ddf8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xb34>
    ddea:	e7ff      	b.n	ddec <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xb28>
                    self.next();
    ddec:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ddf0:	f003 f867 	bl	10ec2 <_ZN8libchip814Chip8$LT$T$GT$4next17hcff432de15657423E>
    ddf4:	e7ff      	b.n	ddf6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xb32>
                if self.v[x] == kk {
    ddf6:	e7ff      	b.n	ddf8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xb34>
        match (
    ddf8:	f002 bd31 	b.w	1085e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x359a>
    ddfc:	2005      	movs	r0, #5
    ddfe:	f8cd 066c 	str.w	r0, [sp, #1644]	; 0x66c
    de02:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
    de06:	f2c0 0001 	movt	r0, #1
    de0a:	6801      	ldr	r1, [r0, #0]
    de0c:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    de10:	f008 ff4e 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    de14:	90df      	str	r0, [sp, #892]	; 0x37c
    de16:	e01f      	b.n	de58 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xb94>
    de18:	2001      	movs	r0, #1
    de1a:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    de1e:	e015      	b.n	de4c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xb88>
    de20:	2000      	movs	r0, #0
    de22:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    de26:	e011      	b.n	de4c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xb88>
    de28:	2000      	movs	r0, #0
    de2a:	f88d 0ddb 	strb.w	r0, [sp, #3547]	; 0xddb
    de2e:	f89d 1ddb 	ldrb.w	r1, [sp, #3547]	; 0xddb
    de32:	f644 206c 	movw	r0, #19052	; 0x4a6c
    de36:	f2c2 0000 	movt	r0, #8192	; 0x2000
    de3a:	f003 fae8 	bl	1140e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    de3e:	f8cd 0ddc 	str.w	r0, [sp, #3548]	; 0xddc
    de42:	f8dd 0ddc 	ldr.w	r0, [sp, #3548]	; 0xddc
    de46:	f8cd 0674 	str.w	r0, [sp, #1652]	; 0x674
    de4a:	e00a      	b.n	de62 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xb9e>
    de4c:	f89d 0673 	ldrb.w	r0, [sp, #1651]	; 0x673
    de50:	07c0      	lsls	r0, r0, #31
    de52:	2800      	cmp	r0, #0
    de54:	d112      	bne.n	de7c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xbb8>
    de56:	e055      	b.n	df04 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xc40>
    de58:	98df      	ldr	r0, [sp, #892]	; 0x37c
    de5a:	07c1      	lsls	r1, r0, #31
    de5c:	2900      	cmp	r1, #0
    de5e:	d1e3      	bne.n	de28 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xb64>
    de60:	e7de      	b.n	de20 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xb5c>
    de62:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    de66:	f20d 6174 	addw	r1, sp, #1652	; 0x674
    de6a:	f008 ff21 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    de6e:	90de      	str	r0, [sp, #888]	; 0x378
    de70:	e7ff      	b.n	de72 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xbae>
    de72:	98de      	ldr	r0, [sp, #888]	; 0x378
    de74:	07c1      	lsls	r1, r0, #31
    de76:	2900      	cmp	r1, #0
    de78:	d1ce      	bne.n	de18 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xb54>
    de7a:	e7d1      	b.n	de20 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xb5c>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
    de7c:	f240 508c 	movw	r0, #1420	; 0x58c
    de80:	f2c0 0002 	movt	r0, #2
    de84:	6801      	ldr	r1, [r0, #0]
    de86:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    de8a:	f100 0212 	add.w	r2, r0, #18
    de8e:	f8cd 2698 	str.w	r2, [sp, #1688]	; 0x698
    de92:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
    de96:	f8cd 2d6c 	str.w	r2, [sp, #3436]	; 0xd6c
    de9a:	f249 13cf 	movw	r3, #37327	; 0x91cf
    de9e:	f2c0 0301 	movt	r3, #1
    dea2:	4610      	mov	r0, r2
    dea4:	91dd      	str	r1, [sp, #884]	; 0x374
    dea6:	4619      	mov	r1, r3
    dea8:	f7fc fc96 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    deac:	90dc      	str	r0, [sp, #880]	; 0x370
    deae:	91db      	str	r1, [sp, #876]	; 0x36c
    deb0:	e7ff      	b.n	deb2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xbee>
    deb2:	98dc      	ldr	r0, [sp, #880]	; 0x370
    deb4:	f8cd 0690 	str.w	r0, [sp, #1680]	; 0x690
    deb8:	99db      	ldr	r1, [sp, #876]	; 0x36c
    deba:	f8cd 1694 	str.w	r1, [sp, #1684]	; 0x694
    debe:	f64f 1238 	movw	r2, #63800	; 0xf938
    dec2:	f2c0 0201 	movt	r2, #1
    dec6:	6812      	ldr	r2, [r2, #0]
    dec8:	466b      	mov	r3, sp
    deca:	f04f 0c01 	mov.w	ip, #1
    dece:	f8c3 c008 	str.w	ip, [r3, #8]
    ded2:	605a      	str	r2, [r3, #4]
    ded4:	f8c3 c000 	str.w	ip, [r3]
    ded8:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    dedc:	2202      	movs	r2, #2
    dede:	f50d 63d2 	add.w	r3, sp, #1680	; 0x690
    dee2:	99dd      	ldr	r1, [sp, #884]	; 0x374
    dee4:	f008 fda9 	bl	16a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    dee8:	e7ff      	b.n	deea <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xc26>
    deea:	f8dd 166c 	ldr.w	r1, [sp, #1644]	; 0x66c
    deee:	f240 50ac 	movw	r0, #1452	; 0x5ac
    def2:	f2c0 0002 	movt	r0, #2
    def6:	6802      	ldr	r2, [r0, #0]
    def8:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    defc:	f004 fab6 	bl	1246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    df00:	e7ff      	b.n	df02 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xc3e>
    df02:	e7ff      	b.n	df04 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xc40>
                if self.v[x] != kk {
    df04:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    df08:	280f      	cmp	r0, #15
    df0a:	f202 8767 	bhi.w	10ddc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3b18>
    df0e:	e7ff      	b.n	df10 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xc4c>
    df10:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    df14:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    df18:	1842      	adds	r2, r0, r1
    df1a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    df1e:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    df22:	fa5f fc83 	uxtb.w	ip, r3
    df26:	4562      	cmp	r2, ip
    df28:	d006      	beq.n	df38 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xc74>
    df2a:	e7ff      	b.n	df2c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xc68>
                    self.next();
    df2c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    df30:	f002 ffc7 	bl	10ec2 <_ZN8libchip814Chip8$LT$T$GT$4next17hcff432de15657423E>
    df34:	e7ff      	b.n	df36 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xc72>
                if self.v[x] != kk {
    df36:	e7ff      	b.n	df38 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xc74>
        match (
    df38:	f002 bc91 	b.w	1085e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x359a>
    df3c:	2005      	movs	r0, #5
    df3e:	f8cd 069c 	str.w	r0, [sp, #1692]	; 0x69c
    df42:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
    df46:	f2c0 0001 	movt	r0, #1
    df4a:	6801      	ldr	r1, [r0, #0]
    df4c:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    df50:	f008 feae 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    df54:	90da      	str	r0, [sp, #872]	; 0x368
    df56:	e01f      	b.n	df98 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xcd4>
    df58:	2001      	movs	r0, #1
    df5a:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    df5e:	e015      	b.n	df8c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xcc8>
    df60:	2000      	movs	r0, #0
    df62:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    df66:	e011      	b.n	df8c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xcc8>
    df68:	2000      	movs	r0, #0
    df6a:	f88d 0de3 	strb.w	r0, [sp, #3555]	; 0xde3
    df6e:	f89d 1de3 	ldrb.w	r1, [sp, #3555]	; 0xde3
    df72:	f644 206c 	movw	r0, #19052	; 0x4a6c
    df76:	f2c2 0000 	movt	r0, #8192	; 0x2000
    df7a:	f003 fa48 	bl	1140e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    df7e:	f8cd 0de4 	str.w	r0, [sp, #3556]	; 0xde4
    df82:	f8dd 0de4 	ldr.w	r0, [sp, #3556]	; 0xde4
    df86:	f8cd 06a4 	str.w	r0, [sp, #1700]	; 0x6a4
    df8a:	e00a      	b.n	dfa2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xcde>
    df8c:	f89d 06a3 	ldrb.w	r0, [sp, #1699]	; 0x6a3
    df90:	07c0      	lsls	r0, r0, #31
    df92:	2800      	cmp	r0, #0
    df94:	d112      	bne.n	dfbc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xcf8>
    df96:	e055      	b.n	e044 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xd80>
    df98:	98da      	ldr	r0, [sp, #872]	; 0x368
    df9a:	07c1      	lsls	r1, r0, #31
    df9c:	2900      	cmp	r1, #0
    df9e:	d1e3      	bne.n	df68 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xca4>
    dfa0:	e7de      	b.n	df60 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xc9c>
    dfa2:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    dfa6:	f20d 61a4 	addw	r1, sp, #1700	; 0x6a4
    dfaa:	f008 fe81 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dfae:	90d9      	str	r0, [sp, #868]	; 0x364
    dfb0:	e7ff      	b.n	dfb2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xcee>
    dfb2:	98d9      	ldr	r0, [sp, #868]	; 0x364
    dfb4:	07c1      	lsls	r1, r0, #31
    dfb6:	2900      	cmp	r1, #0
    dfb8:	d1ce      	bne.n	df58 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xc94>
    dfba:	e7d1      	b.n	df60 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xc9c>
                trace!("[{:04x}] SE Vx, Vy", self.pc);
    dfbc:	f240 502c 	movw	r0, #1324	; 0x52c
    dfc0:	f2c0 0002 	movt	r0, #2
    dfc4:	6801      	ldr	r1, [r0, #0]
    dfc6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dfca:	f100 0212 	add.w	r2, r0, #18
    dfce:	f8cd 26c8 	str.w	r2, [sp, #1736]	; 0x6c8
    dfd2:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
    dfd6:	f8cd 2d68 	str.w	r2, [sp, #3432]	; 0xd68
    dfda:	f249 13cf 	movw	r3, #37327	; 0x91cf
    dfde:	f2c0 0301 	movt	r3, #1
    dfe2:	4610      	mov	r0, r2
    dfe4:	91d8      	str	r1, [sp, #864]	; 0x360
    dfe6:	4619      	mov	r1, r3
    dfe8:	f7fc fbf6 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    dfec:	90d7      	str	r0, [sp, #860]	; 0x35c
    dfee:	91d6      	str	r1, [sp, #856]	; 0x358
    dff0:	e7ff      	b.n	dff2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xd2e>
    dff2:	98d7      	ldr	r0, [sp, #860]	; 0x35c
    dff4:	f8cd 06c0 	str.w	r0, [sp, #1728]	; 0x6c0
    dff8:	99d6      	ldr	r1, [sp, #856]	; 0x358
    dffa:	f8cd 16c4 	str.w	r1, [sp, #1732]	; 0x6c4
    dffe:	f64f 1238 	movw	r2, #63800	; 0xf938
    e002:	f2c0 0201 	movt	r2, #1
    e006:	6812      	ldr	r2, [r2, #0]
    e008:	466b      	mov	r3, sp
    e00a:	f04f 0c01 	mov.w	ip, #1
    e00e:	f8c3 c008 	str.w	ip, [r3, #8]
    e012:	605a      	str	r2, [r3, #4]
    e014:	f8c3 c000 	str.w	ip, [r3]
    e018:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    e01c:	2202      	movs	r2, #2
    e01e:	f50d 63d8 	add.w	r3, sp, #1728	; 0x6c0
    e022:	99d8      	ldr	r1, [sp, #864]	; 0x360
    e024:	f008 fd09 	bl	16a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e028:	e7ff      	b.n	e02a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xd66>
    e02a:	f8dd 169c 	ldr.w	r1, [sp, #1692]	; 0x69c
    e02e:	f240 504c 	movw	r0, #1356	; 0x54c
    e032:	f2c0 0002 	movt	r0, #2
    e036:	6802      	ldr	r2, [r0, #0]
    e038:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    e03c:	f004 fa16 	bl	1246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e040:	e7ff      	b.n	e042 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xd7e>
    e042:	e7ff      	b.n	e044 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xd80>
                if self.v[x] == self.v[y] {
    e044:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e048:	280f      	cmp	r0, #15
    e04a:	f202 86b3 	bhi.w	10db4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3af0>
    e04e:	e7ff      	b.n	e050 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xd8c>
    e050:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e054:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e058:	1842      	adds	r2, r0, r1
    e05a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e05e:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    e062:	2b0f      	cmp	r3, #15
    e064:	92d5      	str	r2, [sp, #852]	; 0x354
    e066:	f202 86af 	bhi.w	10dc8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3b04>
    e06a:	e7ff      	b.n	e06c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xda8>
    e06c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e070:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e074:	1842      	adds	r2, r0, r1
    e076:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e07a:	9bd5      	ldr	r3, [sp, #852]	; 0x354
    e07c:	fa5f fc83 	uxtb.w	ip, r3
    e080:	4594      	cmp	ip, r2
    e082:	d106      	bne.n	e092 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xdce>
    e084:	e7ff      	b.n	e086 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xdc2>
                    self.next();
    e086:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e08a:	f002 ff1a 	bl	10ec2 <_ZN8libchip814Chip8$LT$T$GT$4next17hcff432de15657423E>
    e08e:	e7ff      	b.n	e090 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xdcc>
                if self.v[x] == self.v[y] {
    e090:	e7ff      	b.n	e092 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xdce>
        match (
    e092:	f002 bbe4 	b.w	1085e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x359a>
    e096:	2005      	movs	r0, #5
    e098:	f8cd 06cc 	str.w	r0, [sp, #1740]	; 0x6cc
    e09c:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
    e0a0:	f2c0 0001 	movt	r0, #1
    e0a4:	6801      	ldr	r1, [r0, #0]
    e0a6:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    e0aa:	f008 fe01 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e0ae:	90d4      	str	r0, [sp, #848]	; 0x350
    e0b0:	e01f      	b.n	e0f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xe2e>
    e0b2:	2001      	movs	r0, #1
    e0b4:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    e0b8:	e015      	b.n	e0e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xe22>
    e0ba:	2000      	movs	r0, #0
    e0bc:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    e0c0:	e011      	b.n	e0e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xe22>
    e0c2:	2000      	movs	r0, #0
    e0c4:	f88d 0deb 	strb.w	r0, [sp, #3563]	; 0xdeb
    e0c8:	f89d 1deb 	ldrb.w	r1, [sp, #3563]	; 0xdeb
    e0cc:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e0d0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e0d4:	f003 f99b 	bl	1140e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e0d8:	f8cd 0dec 	str.w	r0, [sp, #3564]	; 0xdec
    e0dc:	f8dd 0dec 	ldr.w	r0, [sp, #3564]	; 0xdec
    e0e0:	f8cd 06d4 	str.w	r0, [sp, #1748]	; 0x6d4
    e0e4:	e00a      	b.n	e0fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xe38>
    e0e6:	f89d 06d3 	ldrb.w	r0, [sp, #1747]	; 0x6d3
    e0ea:	07c0      	lsls	r0, r0, #31
    e0ec:	2800      	cmp	r0, #0
    e0ee:	d112      	bne.n	e116 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xe52>
    e0f0:	e055      	b.n	e19e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xeda>
    e0f2:	98d4      	ldr	r0, [sp, #848]	; 0x350
    e0f4:	07c1      	lsls	r1, r0, #31
    e0f6:	2900      	cmp	r1, #0
    e0f8:	d1e3      	bne.n	e0c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xdfe>
    e0fa:	e7de      	b.n	e0ba <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xdf6>
    e0fc:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    e100:	f20d 61d4 	addw	r1, sp, #1748	; 0x6d4
    e104:	f008 fdd4 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e108:	90d3      	str	r0, [sp, #844]	; 0x34c
    e10a:	e7ff      	b.n	e10c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xe48>
    e10c:	98d3      	ldr	r0, [sp, #844]	; 0x34c
    e10e:	07c1      	lsls	r1, r0, #31
    e110:	2900      	cmp	r1, #0
    e112:	d1ce      	bne.n	e0b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xdee>
    e114:	e7d1      	b.n	e0ba <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xdf6>
                trace!("[{:04x}] LD Vx, kk", self.pc);
    e116:	f240 4044 	movw	r0, #1092	; 0x444
    e11a:	f2c0 0002 	movt	r0, #2
    e11e:	6801      	ldr	r1, [r0, #0]
    e120:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e124:	f100 0212 	add.w	r2, r0, #18
    e128:	f8cd 26f8 	str.w	r2, [sp, #1784]	; 0x6f8
    e12c:	f8dd 26f8 	ldr.w	r2, [sp, #1784]	; 0x6f8
    e130:	f8cd 2d5c 	str.w	r2, [sp, #3420]	; 0xd5c
    e134:	f249 13cf 	movw	r3, #37327	; 0x91cf
    e138:	f2c0 0301 	movt	r3, #1
    e13c:	4610      	mov	r0, r2
    e13e:	91d2      	str	r1, [sp, #840]	; 0x348
    e140:	4619      	mov	r1, r3
    e142:	f7fc fb49 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e146:	90d1      	str	r0, [sp, #836]	; 0x344
    e148:	91d0      	str	r1, [sp, #832]	; 0x340
    e14a:	e7ff      	b.n	e14c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xe88>
    e14c:	98d1      	ldr	r0, [sp, #836]	; 0x344
    e14e:	f8cd 06f0 	str.w	r0, [sp, #1776]	; 0x6f0
    e152:	99d0      	ldr	r1, [sp, #832]	; 0x340
    e154:	f8cd 16f4 	str.w	r1, [sp, #1780]	; 0x6f4
    e158:	f64f 1238 	movw	r2, #63800	; 0xf938
    e15c:	f2c0 0201 	movt	r2, #1
    e160:	6812      	ldr	r2, [r2, #0]
    e162:	466b      	mov	r3, sp
    e164:	f04f 0c01 	mov.w	ip, #1
    e168:	f8c3 c008 	str.w	ip, [r3, #8]
    e16c:	605a      	str	r2, [r3, #4]
    e16e:	f8c3 c000 	str.w	ip, [r3]
    e172:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    e176:	2202      	movs	r2, #2
    e178:	f50d 63de 	add.w	r3, sp, #1776	; 0x6f0
    e17c:	99d2      	ldr	r1, [sp, #840]	; 0x348
    e17e:	f008 fc5c 	bl	16a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e182:	e7ff      	b.n	e184 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xec0>
    e184:	f8dd 16cc 	ldr.w	r1, [sp, #1740]	; 0x6cc
    e188:	f240 4064 	movw	r0, #1124	; 0x464
    e18c:	f2c0 0002 	movt	r0, #2
    e190:	6802      	ldr	r2, [r0, #0]
    e192:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    e196:	f004 f969 	bl	1246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e19a:	e7ff      	b.n	e19c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xed8>
    e19c:	e7ff      	b.n	e19e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xeda>
                self.v[x] = kk;
    e19e:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e1a2:	280f      	cmp	r0, #15
    e1a4:	f202 85fc 	bhi.w	10da0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3adc>
    e1a8:	e7ff      	b.n	e1aa <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xee6>
    e1aa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e1ae:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e1b2:	1842      	adds	r2, r0, r1
    e1b4:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    e1b8:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e1bc:	f002 bb4f 	b.w	1085e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x359a>
    e1c0:	2005      	movs	r0, #5
    e1c2:	f8cd 06fc 	str.w	r0, [sp, #1788]	; 0x6fc
    e1c6:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
    e1ca:	f2c0 0001 	movt	r0, #1
    e1ce:	6801      	ldr	r1, [r0, #0]
    e1d0:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    e1d4:	f008 fd6c 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e1d8:	90cf      	str	r0, [sp, #828]	; 0x33c
    e1da:	e01f      	b.n	e21c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xf58>
    e1dc:	2001      	movs	r0, #1
    e1de:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    e1e2:	e015      	b.n	e210 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xf4c>
    e1e4:	2000      	movs	r0, #0
    e1e6:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    e1ea:	e011      	b.n	e210 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xf4c>
    e1ec:	2000      	movs	r0, #0
    e1ee:	f88d 0df3 	strb.w	r0, [sp, #3571]	; 0xdf3
    e1f2:	f89d 1df3 	ldrb.w	r1, [sp, #3571]	; 0xdf3
    e1f6:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e1fa:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e1fe:	f003 f906 	bl	1140e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e202:	f8cd 0df4 	str.w	r0, [sp, #3572]	; 0xdf4
    e206:	f8dd 0df4 	ldr.w	r0, [sp, #3572]	; 0xdf4
    e20a:	f8cd 0704 	str.w	r0, [sp, #1796]	; 0x704
    e20e:	e00a      	b.n	e226 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xf62>
    e210:	f89d 0703 	ldrb.w	r0, [sp, #1795]	; 0x703
    e214:	07c0      	lsls	r0, r0, #31
    e216:	2800      	cmp	r0, #0
    e218:	d112      	bne.n	e240 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xf7c>
    e21a:	e055      	b.n	e2c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1004>
    e21c:	98cf      	ldr	r0, [sp, #828]	; 0x33c
    e21e:	07c1      	lsls	r1, r0, #31
    e220:	2900      	cmp	r1, #0
    e222:	d1e3      	bne.n	e1ec <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xf28>
    e224:	e7de      	b.n	e1e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xf20>
    e226:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    e22a:	f20d 7104 	addw	r1, sp, #1796	; 0x704
    e22e:	f008 fd3f 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e232:	90ce      	str	r0, [sp, #824]	; 0x338
    e234:	e7ff      	b.n	e236 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xf72>
    e236:	98ce      	ldr	r0, [sp, #824]	; 0x338
    e238:	07c1      	lsls	r1, r0, #31
    e23a:	2900      	cmp	r1, #0
    e23c:	d1ce      	bne.n	e1dc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xf18>
    e23e:	e7d1      	b.n	e1e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xf20>
                trace!("[{:04x}] ADD Vx, kk", self.pc);
    e240:	f240 30e4 	movw	r0, #996	; 0x3e4
    e244:	f2c0 0002 	movt	r0, #2
    e248:	6801      	ldr	r1, [r0, #0]
    e24a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e24e:	f100 0212 	add.w	r2, r0, #18
    e252:	f8cd 2728 	str.w	r2, [sp, #1832]	; 0x728
    e256:	f8dd 2728 	ldr.w	r2, [sp, #1832]	; 0x728
    e25a:	f8cd 2d58 	str.w	r2, [sp, #3416]	; 0xd58
    e25e:	f249 13cf 	movw	r3, #37327	; 0x91cf
    e262:	f2c0 0301 	movt	r3, #1
    e266:	4610      	mov	r0, r2
    e268:	91cd      	str	r1, [sp, #820]	; 0x334
    e26a:	4619      	mov	r1, r3
    e26c:	f7fc fab4 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e270:	90cc      	str	r0, [sp, #816]	; 0x330
    e272:	91cb      	str	r1, [sp, #812]	; 0x32c
    e274:	e7ff      	b.n	e276 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xfb2>
    e276:	98cc      	ldr	r0, [sp, #816]	; 0x330
    e278:	f8cd 0720 	str.w	r0, [sp, #1824]	; 0x720
    e27c:	99cb      	ldr	r1, [sp, #812]	; 0x32c
    e27e:	f8cd 1724 	str.w	r1, [sp, #1828]	; 0x724
    e282:	f64f 1238 	movw	r2, #63800	; 0xf938
    e286:	f2c0 0201 	movt	r2, #1
    e28a:	6812      	ldr	r2, [r2, #0]
    e28c:	466b      	mov	r3, sp
    e28e:	f04f 0c01 	mov.w	ip, #1
    e292:	f8c3 c008 	str.w	ip, [r3, #8]
    e296:	605a      	str	r2, [r3, #4]
    e298:	f8c3 c000 	str.w	ip, [r3]
    e29c:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    e2a0:	2202      	movs	r2, #2
    e2a2:	f50d 63e4 	add.w	r3, sp, #1824	; 0x720
    e2a6:	99cd      	ldr	r1, [sp, #820]	; 0x334
    e2a8:	f008 fbc7 	bl	16a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e2ac:	e7ff      	b.n	e2ae <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0xfea>
    e2ae:	f8dd 16fc 	ldr.w	r1, [sp, #1788]	; 0x6fc
    e2b2:	f240 4004 	movw	r0, #1028	; 0x404
    e2b6:	f2c0 0002 	movt	r0, #2
    e2ba:	6802      	ldr	r2, [r0, #0]
    e2bc:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    e2c0:	f004 f8d4 	bl	1246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e2c4:	e7ff      	b.n	e2c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1002>
    e2c6:	e7ff      	b.n	e2c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1004>
                self.v[x] = self.v[x].wrapping_add(kk);
    e2c8:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e2cc:	280f      	cmp	r0, #15
    e2ce:	f202 8553 	bhi.w	10d78 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3ab4>
    e2d2:	e7ff      	b.n	e2d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1010>
    e2d4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e2d8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e2dc:	1842      	adds	r2, r0, r1
    e2de:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    e2e2:	f8dd 145c 	ldr.w	r1, [sp, #1116]	; 0x45c
    e2e6:	f008 fc0c 	bl	16b02 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE>
    e2ea:	90ca      	str	r0, [sp, #808]	; 0x328
    e2ec:	e7ff      	b.n	e2ee <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x102a>
    e2ee:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e2f2:	280f      	cmp	r0, #15
    e2f4:	f202 854a 	bhi.w	10d8c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3ac8>
    e2f8:	e7ff      	b.n	e2fa <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1036>
    e2fa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e2fe:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e302:	1842      	adds	r2, r0, r1
    e304:	9bca      	ldr	r3, [sp, #808]	; 0x328
    e306:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e30a:	f002 baa8 	b.w	1085e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x359a>
    e30e:	2005      	movs	r0, #5
    e310:	f8cd 072c 	str.w	r0, [sp, #1836]	; 0x72c
    e314:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
    e318:	f2c0 0001 	movt	r0, #1
    e31c:	6801      	ldr	r1, [r0, #0]
    e31e:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    e322:	f008 fcc5 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e326:	90c9      	str	r0, [sp, #804]	; 0x324
    e328:	e01f      	b.n	e36a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x10a6>
    e32a:	2001      	movs	r0, #1
    e32c:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    e330:	e015      	b.n	e35e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x109a>
    e332:	2000      	movs	r0, #0
    e334:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    e338:	e011      	b.n	e35e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x109a>
    e33a:	2000      	movs	r0, #0
    e33c:	f88d 0dfb 	strb.w	r0, [sp, #3579]	; 0xdfb
    e340:	f89d 1dfb 	ldrb.w	r1, [sp, #3579]	; 0xdfb
    e344:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e348:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e34c:	f003 f85f 	bl	1140e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e350:	f8cd 0dfc 	str.w	r0, [sp, #3580]	; 0xdfc
    e354:	f8dd 0dfc 	ldr.w	r0, [sp, #3580]	; 0xdfc
    e358:	f8cd 0734 	str.w	r0, [sp, #1844]	; 0x734
    e35c:	e00a      	b.n	e374 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x10b0>
    e35e:	f89d 0733 	ldrb.w	r0, [sp, #1843]	; 0x733
    e362:	07c0      	lsls	r0, r0, #31
    e364:	2800      	cmp	r0, #0
    e366:	d112      	bne.n	e38e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x10ca>
    e368:	e055      	b.n	e416 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1152>
    e36a:	98c9      	ldr	r0, [sp, #804]	; 0x324
    e36c:	07c1      	lsls	r1, r0, #31
    e36e:	2900      	cmp	r1, #0
    e370:	d1e3      	bne.n	e33a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1076>
    e372:	e7de      	b.n	e332 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x106e>
    e374:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    e378:	f20d 7134 	addw	r1, sp, #1844	; 0x734
    e37c:	f008 fc98 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e380:	90c8      	str	r0, [sp, #800]	; 0x320
    e382:	e7ff      	b.n	e384 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x10c0>
    e384:	98c8      	ldr	r0, [sp, #800]	; 0x320
    e386:	07c1      	lsls	r1, r0, #31
    e388:	2900      	cmp	r1, #0
    e38a:	d1ce      	bne.n	e32a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1066>
    e38c:	e7d1      	b.n	e332 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x106e>
                trace!("[{:04x}] LD Vx, Vy", self.pc);
    e38e:	f240 3084 	movw	r0, #900	; 0x384
    e392:	f2c0 0002 	movt	r0, #2
    e396:	6801      	ldr	r1, [r0, #0]
    e398:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e39c:	f100 0212 	add.w	r2, r0, #18
    e3a0:	f8cd 2758 	str.w	r2, [sp, #1880]	; 0x758
    e3a4:	f8dd 2758 	ldr.w	r2, [sp, #1880]	; 0x758
    e3a8:	f8cd 2d54 	str.w	r2, [sp, #3412]	; 0xd54
    e3ac:	f249 13cf 	movw	r3, #37327	; 0x91cf
    e3b0:	f2c0 0301 	movt	r3, #1
    e3b4:	4610      	mov	r0, r2
    e3b6:	91c7      	str	r1, [sp, #796]	; 0x31c
    e3b8:	4619      	mov	r1, r3
    e3ba:	f7fc fa0d 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e3be:	90c6      	str	r0, [sp, #792]	; 0x318
    e3c0:	91c5      	str	r1, [sp, #788]	; 0x314
    e3c2:	e7ff      	b.n	e3c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1100>
    e3c4:	98c6      	ldr	r0, [sp, #792]	; 0x318
    e3c6:	f8cd 0750 	str.w	r0, [sp, #1872]	; 0x750
    e3ca:	99c5      	ldr	r1, [sp, #788]	; 0x314
    e3cc:	f8cd 1754 	str.w	r1, [sp, #1876]	; 0x754
    e3d0:	f64f 1238 	movw	r2, #63800	; 0xf938
    e3d4:	f2c0 0201 	movt	r2, #1
    e3d8:	6812      	ldr	r2, [r2, #0]
    e3da:	466b      	mov	r3, sp
    e3dc:	f04f 0c01 	mov.w	ip, #1
    e3e0:	f8c3 c008 	str.w	ip, [r3, #8]
    e3e4:	605a      	str	r2, [r3, #4]
    e3e6:	f8c3 c000 	str.w	ip, [r3]
    e3ea:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    e3ee:	2202      	movs	r2, #2
    e3f0:	f50d 63ea 	add.w	r3, sp, #1872	; 0x750
    e3f4:	99c7      	ldr	r1, [sp, #796]	; 0x31c
    e3f6:	f008 fb20 	bl	16a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e3fa:	e7ff      	b.n	e3fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1138>
    e3fc:	f8dd 172c 	ldr.w	r1, [sp, #1836]	; 0x72c
    e400:	f240 30a4 	movw	r0, #932	; 0x3a4
    e404:	f2c0 0002 	movt	r0, #2
    e408:	6802      	ldr	r2, [r0, #0]
    e40a:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    e40e:	f004 f82d 	bl	1246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e412:	e7ff      	b.n	e414 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1150>
    e414:	e7ff      	b.n	e416 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1152>
                self.v[x] = self.v[y];
    e416:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    e41a:	280f      	cmp	r0, #15
    e41c:	f202 8498 	bhi.w	10d50 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3a8c>
    e420:	e7ff      	b.n	e422 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x115e>
    e422:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e426:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e42a:	1842      	adds	r2, r0, r1
    e42c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e430:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    e434:	2b0f      	cmp	r3, #15
    e436:	92c4      	str	r2, [sp, #784]	; 0x310
    e438:	f202 8494 	bhi.w	10d64 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3aa0>
    e43c:	e7ff      	b.n	e43e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x117a>
    e43e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e442:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e446:	1842      	adds	r2, r0, r1
    e448:	9bc4      	ldr	r3, [sp, #784]	; 0x310
    e44a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e44e:	f002 ba06 	b.w	1085e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x359a>
    e452:	2005      	movs	r0, #5
    e454:	f8cd 075c 	str.w	r0, [sp, #1884]	; 0x75c
    e458:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
    e45c:	f2c0 0001 	movt	r0, #1
    e460:	6801      	ldr	r1, [r0, #0]
    e462:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    e466:	f008 fc23 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e46a:	90c3      	str	r0, [sp, #780]	; 0x30c
    e46c:	e01f      	b.n	e4ae <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x11ea>
    e46e:	2001      	movs	r0, #1
    e470:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    e474:	e015      	b.n	e4a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x11de>
    e476:	2000      	movs	r0, #0
    e478:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    e47c:	e011      	b.n	e4a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x11de>
    e47e:	2000      	movs	r0, #0
    e480:	f88d 0e03 	strb.w	r0, [sp, #3587]	; 0xe03
    e484:	f89d 1e03 	ldrb.w	r1, [sp, #3587]	; 0xe03
    e488:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e48c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e490:	f002 ffbd 	bl	1140e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e494:	f8cd 0e04 	str.w	r0, [sp, #3588]	; 0xe04
    e498:	f8dd 0e04 	ldr.w	r0, [sp, #3588]	; 0xe04
    e49c:	f8cd 0764 	str.w	r0, [sp, #1892]	; 0x764
    e4a0:	e00a      	b.n	e4b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x11f4>
    e4a2:	f89d 0763 	ldrb.w	r0, [sp, #1891]	; 0x763
    e4a6:	07c0      	lsls	r0, r0, #31
    e4a8:	2800      	cmp	r0, #0
    e4aa:	d112      	bne.n	e4d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x120e>
    e4ac:	e055      	b.n	e55a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1296>
    e4ae:	98c3      	ldr	r0, [sp, #780]	; 0x30c
    e4b0:	07c1      	lsls	r1, r0, #31
    e4b2:	2900      	cmp	r1, #0
    e4b4:	d1e3      	bne.n	e47e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x11ba>
    e4b6:	e7de      	b.n	e476 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x11b2>
    e4b8:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    e4bc:	f20d 7164 	addw	r1, sp, #1892	; 0x764
    e4c0:	f008 fbf6 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e4c4:	90c2      	str	r0, [sp, #776]	; 0x308
    e4c6:	e7ff      	b.n	e4c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1204>
    e4c8:	98c2      	ldr	r0, [sp, #776]	; 0x308
    e4ca:	07c1      	lsls	r1, r0, #31
    e4cc:	2900      	cmp	r1, #0
    e4ce:	d1ce      	bne.n	e46e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x11aa>
    e4d0:	e7d1      	b.n	e476 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x11b2>
                trace!("[{:04x}] OR Vx, Vy", self.pc);
    e4d2:	f240 3024 	movw	r0, #804	; 0x324
    e4d6:	f2c0 0002 	movt	r0, #2
    e4da:	6801      	ldr	r1, [r0, #0]
    e4dc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e4e0:	f100 0212 	add.w	r2, r0, #18
    e4e4:	f8cd 2788 	str.w	r2, [sp, #1928]	; 0x788
    e4e8:	f8dd 2788 	ldr.w	r2, [sp, #1928]	; 0x788
    e4ec:	f8cd 2d50 	str.w	r2, [sp, #3408]	; 0xd50
    e4f0:	f249 13cf 	movw	r3, #37327	; 0x91cf
    e4f4:	f2c0 0301 	movt	r3, #1
    e4f8:	4610      	mov	r0, r2
    e4fa:	91c1      	str	r1, [sp, #772]	; 0x304
    e4fc:	4619      	mov	r1, r3
    e4fe:	f7fc f96b 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e502:	90c0      	str	r0, [sp, #768]	; 0x300
    e504:	91bf      	str	r1, [sp, #764]	; 0x2fc
    e506:	e7ff      	b.n	e508 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1244>
    e508:	98c0      	ldr	r0, [sp, #768]	; 0x300
    e50a:	f8cd 0780 	str.w	r0, [sp, #1920]	; 0x780
    e50e:	99bf      	ldr	r1, [sp, #764]	; 0x2fc
    e510:	f8cd 1784 	str.w	r1, [sp, #1924]	; 0x784
    e514:	f64f 1238 	movw	r2, #63800	; 0xf938
    e518:	f2c0 0201 	movt	r2, #1
    e51c:	6812      	ldr	r2, [r2, #0]
    e51e:	466b      	mov	r3, sp
    e520:	f04f 0c01 	mov.w	ip, #1
    e524:	f8c3 c008 	str.w	ip, [r3, #8]
    e528:	605a      	str	r2, [r3, #4]
    e52a:	f8c3 c000 	str.w	ip, [r3]
    e52e:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    e532:	2202      	movs	r2, #2
    e534:	f50d 63f0 	add.w	r3, sp, #1920	; 0x780
    e538:	99c1      	ldr	r1, [sp, #772]	; 0x304
    e53a:	f008 fa7e 	bl	16a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e53e:	e7ff      	b.n	e540 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x127c>
    e540:	f8dd 175c 	ldr.w	r1, [sp, #1884]	; 0x75c
    e544:	f240 3044 	movw	r0, #836	; 0x344
    e548:	f2c0 0002 	movt	r0, #2
    e54c:	6802      	ldr	r2, [r0, #0]
    e54e:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    e552:	f003 ff8b 	bl	1246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e556:	e7ff      	b.n	e558 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1294>
    e558:	e7ff      	b.n	e55a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1296>
                self.v[x] |= self.v[y];
    e55a:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    e55e:	280f      	cmp	r0, #15
    e560:	f202 83e2 	bhi.w	10d28 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3a64>
    e564:	e7ff      	b.n	e566 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x12a2>
    e566:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e56a:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e56e:	1842      	adds	r2, r0, r1
    e570:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e574:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    e578:	2b0f      	cmp	r3, #15
    e57a:	92be      	str	r2, [sp, #760]	; 0x2f8
    e57c:	f202 83de 	bhi.w	10d3c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3a78>
    e580:	e7ff      	b.n	e582 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x12be>
    e582:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e586:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e58a:	1842      	adds	r2, r0, r1
    e58c:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    e590:	f8dd c2f8 	ldr.w	ip, [sp, #760]	; 0x2f8
    e594:	ea43 030c 	orr.w	r3, r3, ip
    e598:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e59c:	f002 b95f 	b.w	1085e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x359a>
    e5a0:	2005      	movs	r0, #5
    e5a2:	f8cd 078c 	str.w	r0, [sp, #1932]	; 0x78c
    e5a6:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
    e5aa:	f2c0 0001 	movt	r0, #1
    e5ae:	6801      	ldr	r1, [r0, #0]
    e5b0:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    e5b4:	f008 fb7c 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e5b8:	90bd      	str	r0, [sp, #756]	; 0x2f4
    e5ba:	e01f      	b.n	e5fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1338>
    e5bc:	2001      	movs	r0, #1
    e5be:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    e5c2:	e015      	b.n	e5f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x132c>
    e5c4:	2000      	movs	r0, #0
    e5c6:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    e5ca:	e011      	b.n	e5f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x132c>
    e5cc:	2000      	movs	r0, #0
    e5ce:	f88d 0e0b 	strb.w	r0, [sp, #3595]	; 0xe0b
    e5d2:	f89d 1e0b 	ldrb.w	r1, [sp, #3595]	; 0xe0b
    e5d6:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e5da:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e5de:	f002 ff16 	bl	1140e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e5e2:	f8cd 0e0c 	str.w	r0, [sp, #3596]	; 0xe0c
    e5e6:	f8dd 0e0c 	ldr.w	r0, [sp, #3596]	; 0xe0c
    e5ea:	f8cd 0794 	str.w	r0, [sp, #1940]	; 0x794
    e5ee:	e00a      	b.n	e606 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1342>
    e5f0:	f89d 0793 	ldrb.w	r0, [sp, #1939]	; 0x793
    e5f4:	07c0      	lsls	r0, r0, #31
    e5f6:	2800      	cmp	r0, #0
    e5f8:	d112      	bne.n	e620 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x135c>
    e5fa:	e055      	b.n	e6a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x13e4>
    e5fc:	98bd      	ldr	r0, [sp, #756]	; 0x2f4
    e5fe:	07c1      	lsls	r1, r0, #31
    e600:	2900      	cmp	r1, #0
    e602:	d1e3      	bne.n	e5cc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1308>
    e604:	e7de      	b.n	e5c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1300>
    e606:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    e60a:	f20d 7194 	addw	r1, sp, #1940	; 0x794
    e60e:	f008 fb4f 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e612:	90bc      	str	r0, [sp, #752]	; 0x2f0
    e614:	e7ff      	b.n	e616 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1352>
    e616:	98bc      	ldr	r0, [sp, #752]	; 0x2f0
    e618:	07c1      	lsls	r1, r0, #31
    e61a:	2900      	cmp	r1, #0
    e61c:	d1ce      	bne.n	e5bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x12f8>
    e61e:	e7d1      	b.n	e5c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1300>
                trace!("[{:04x}] AND Vx, Vy", self.pc);
    e620:	f240 20c4 	movw	r0, #708	; 0x2c4
    e624:	f2c0 0002 	movt	r0, #2
    e628:	6801      	ldr	r1, [r0, #0]
    e62a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e62e:	f100 0212 	add.w	r2, r0, #18
    e632:	f8cd 27b8 	str.w	r2, [sp, #1976]	; 0x7b8
    e636:	f8dd 27b8 	ldr.w	r2, [sp, #1976]	; 0x7b8
    e63a:	f8cd 2d4c 	str.w	r2, [sp, #3404]	; 0xd4c
    e63e:	f249 13cf 	movw	r3, #37327	; 0x91cf
    e642:	f2c0 0301 	movt	r3, #1
    e646:	4610      	mov	r0, r2
    e648:	91bb      	str	r1, [sp, #748]	; 0x2ec
    e64a:	4619      	mov	r1, r3
    e64c:	f7fc f8c4 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e650:	90ba      	str	r0, [sp, #744]	; 0x2e8
    e652:	91b9      	str	r1, [sp, #740]	; 0x2e4
    e654:	e7ff      	b.n	e656 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1392>
    e656:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
    e658:	f8cd 07b0 	str.w	r0, [sp, #1968]	; 0x7b0
    e65c:	99b9      	ldr	r1, [sp, #740]	; 0x2e4
    e65e:	f8cd 17b4 	str.w	r1, [sp, #1972]	; 0x7b4
    e662:	f64f 1238 	movw	r2, #63800	; 0xf938
    e666:	f2c0 0201 	movt	r2, #1
    e66a:	6812      	ldr	r2, [r2, #0]
    e66c:	466b      	mov	r3, sp
    e66e:	f04f 0c01 	mov.w	ip, #1
    e672:	f8c3 c008 	str.w	ip, [r3, #8]
    e676:	605a      	str	r2, [r3, #4]
    e678:	f8c3 c000 	str.w	ip, [r3]
    e67c:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    e680:	2202      	movs	r2, #2
    e682:	f50d 63f6 	add.w	r3, sp, #1968	; 0x7b0
    e686:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
    e688:	f008 f9d7 	bl	16a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e68c:	e7ff      	b.n	e68e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x13ca>
    e68e:	f8dd 178c 	ldr.w	r1, [sp, #1932]	; 0x78c
    e692:	f240 20e4 	movw	r0, #740	; 0x2e4
    e696:	f2c0 0002 	movt	r0, #2
    e69a:	6802      	ldr	r2, [r0, #0]
    e69c:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    e6a0:	f003 fee4 	bl	1246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e6a4:	e7ff      	b.n	e6a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x13e2>
    e6a6:	e7ff      	b.n	e6a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x13e4>
                self.v[x] &= self.v[y];
    e6a8:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    e6ac:	280f      	cmp	r0, #15
    e6ae:	f202 8327 	bhi.w	10d00 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3a3c>
    e6b2:	e7ff      	b.n	e6b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x13f0>
    e6b4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e6b8:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e6bc:	1842      	adds	r2, r0, r1
    e6be:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e6c2:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    e6c6:	2b0f      	cmp	r3, #15
    e6c8:	92b8      	str	r2, [sp, #736]	; 0x2e0
    e6ca:	f202 8323 	bhi.w	10d14 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3a50>
    e6ce:	e7ff      	b.n	e6d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x140c>
    e6d0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e6d4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e6d8:	1842      	adds	r2, r0, r1
    e6da:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    e6de:	f8dd c2e0 	ldr.w	ip, [sp, #736]	; 0x2e0
    e6e2:	ea03 030c 	and.w	r3, r3, ip
    e6e6:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e6ea:	f002 b8b8 	b.w	1085e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x359a>
    e6ee:	2005      	movs	r0, #5
    e6f0:	f8cd 07bc 	str.w	r0, [sp, #1980]	; 0x7bc
    e6f4:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
    e6f8:	f2c0 0001 	movt	r0, #1
    e6fc:	6801      	ldr	r1, [r0, #0]
    e6fe:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    e702:	f008 fad5 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e706:	90b7      	str	r0, [sp, #732]	; 0x2dc
    e708:	e01f      	b.n	e74a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1486>
    e70a:	2001      	movs	r0, #1
    e70c:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    e710:	e015      	b.n	e73e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x147a>
    e712:	2000      	movs	r0, #0
    e714:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    e718:	e011      	b.n	e73e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x147a>
    e71a:	2000      	movs	r0, #0
    e71c:	f88d 0e13 	strb.w	r0, [sp, #3603]	; 0xe13
    e720:	f89d 1e13 	ldrb.w	r1, [sp, #3603]	; 0xe13
    e724:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e728:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e72c:	f002 fe6f 	bl	1140e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e730:	f8cd 0e14 	str.w	r0, [sp, #3604]	; 0xe14
    e734:	f8dd 0e14 	ldr.w	r0, [sp, #3604]	; 0xe14
    e738:	f8cd 07c4 	str.w	r0, [sp, #1988]	; 0x7c4
    e73c:	e00a      	b.n	e754 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1490>
    e73e:	f89d 07c3 	ldrb.w	r0, [sp, #1987]	; 0x7c3
    e742:	07c0      	lsls	r0, r0, #31
    e744:	2800      	cmp	r0, #0
    e746:	d112      	bne.n	e76e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x14aa>
    e748:	e055      	b.n	e7f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1532>
    e74a:	98b7      	ldr	r0, [sp, #732]	; 0x2dc
    e74c:	07c1      	lsls	r1, r0, #31
    e74e:	2900      	cmp	r1, #0
    e750:	d1e3      	bne.n	e71a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1456>
    e752:	e7de      	b.n	e712 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x144e>
    e754:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    e758:	f20d 71c4 	addw	r1, sp, #1988	; 0x7c4
    e75c:	f008 faa8 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e760:	90b6      	str	r0, [sp, #728]	; 0x2d8
    e762:	e7ff      	b.n	e764 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x14a0>
    e764:	98b6      	ldr	r0, [sp, #728]	; 0x2d8
    e766:	07c1      	lsls	r1, r0, #31
    e768:	2900      	cmp	r1, #0
    e76a:	d1ce      	bne.n	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1446>
    e76c:	e7d1      	b.n	e712 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x144e>
                trace!("[{:04x}] XOR Vx, Vy", self.pc);
    e76e:	f240 2064 	movw	r0, #612	; 0x264
    e772:	f2c0 0002 	movt	r0, #2
    e776:	6801      	ldr	r1, [r0, #0]
    e778:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e77c:	f100 0212 	add.w	r2, r0, #18
    e780:	f8cd 27e8 	str.w	r2, [sp, #2024]	; 0x7e8
    e784:	f8dd 27e8 	ldr.w	r2, [sp, #2024]	; 0x7e8
    e788:	f8cd 2d48 	str.w	r2, [sp, #3400]	; 0xd48
    e78c:	f249 13cf 	movw	r3, #37327	; 0x91cf
    e790:	f2c0 0301 	movt	r3, #1
    e794:	4610      	mov	r0, r2
    e796:	91b5      	str	r1, [sp, #724]	; 0x2d4
    e798:	4619      	mov	r1, r3
    e79a:	f7fc f81d 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e79e:	90b4      	str	r0, [sp, #720]	; 0x2d0
    e7a0:	91b3      	str	r1, [sp, #716]	; 0x2cc
    e7a2:	e7ff      	b.n	e7a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x14e0>
    e7a4:	98b4      	ldr	r0, [sp, #720]	; 0x2d0
    e7a6:	f8cd 07e0 	str.w	r0, [sp, #2016]	; 0x7e0
    e7aa:	99b3      	ldr	r1, [sp, #716]	; 0x2cc
    e7ac:	f8cd 17e4 	str.w	r1, [sp, #2020]	; 0x7e4
    e7b0:	f64f 1238 	movw	r2, #63800	; 0xf938
    e7b4:	f2c0 0201 	movt	r2, #1
    e7b8:	6812      	ldr	r2, [r2, #0]
    e7ba:	466b      	mov	r3, sp
    e7bc:	f04f 0c01 	mov.w	ip, #1
    e7c0:	f8c3 c008 	str.w	ip, [r3, #8]
    e7c4:	605a      	str	r2, [r3, #4]
    e7c6:	f8c3 c000 	str.w	ip, [r3]
    e7ca:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    e7ce:	2202      	movs	r2, #2
    e7d0:	f50d 63fc 	add.w	r3, sp, #2016	; 0x7e0
    e7d4:	99b5      	ldr	r1, [sp, #724]	; 0x2d4
    e7d6:	f008 f930 	bl	16a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e7da:	e7ff      	b.n	e7dc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1518>
    e7dc:	f8dd 17bc 	ldr.w	r1, [sp, #1980]	; 0x7bc
    e7e0:	f240 2084 	movw	r0, #644	; 0x284
    e7e4:	f2c0 0002 	movt	r0, #2
    e7e8:	6802      	ldr	r2, [r0, #0]
    e7ea:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    e7ee:	f003 fe3d 	bl	1246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e7f2:	e7ff      	b.n	e7f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1530>
    e7f4:	e7ff      	b.n	e7f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1532>
                self.v[x] ^= self.v[y];
    e7f6:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    e7fa:	280f      	cmp	r0, #15
    e7fc:	f202 826c 	bhi.w	10cd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3a14>
    e800:	e7ff      	b.n	e802 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x153e>
    e802:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e806:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e80a:	1842      	adds	r2, r0, r1
    e80c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e810:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    e814:	2b0f      	cmp	r3, #15
    e816:	92b2      	str	r2, [sp, #712]	; 0x2c8
    e818:	f202 8268 	bhi.w	10cec <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3a28>
    e81c:	e7ff      	b.n	e81e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x155a>
    e81e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e822:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e826:	1842      	adds	r2, r0, r1
    e828:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    e82c:	f8dd c2c8 	ldr.w	ip, [sp, #712]	; 0x2c8
    e830:	ea83 030c 	eor.w	r3, r3, ip
    e834:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e838:	f002 b811 	b.w	1085e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x359a>
    e83c:	2005      	movs	r0, #5
    e83e:	f8cd 07ec 	str.w	r0, [sp, #2028]	; 0x7ec
    e842:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
    e846:	f2c0 0001 	movt	r0, #1
    e84a:	6801      	ldr	r1, [r0, #0]
    e84c:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    e850:	f008 fa2e 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e854:	90b1      	str	r0, [sp, #708]	; 0x2c4
    e856:	e01f      	b.n	e898 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x15d4>
    e858:	2001      	movs	r0, #1
    e85a:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    e85e:	e015      	b.n	e88c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x15c8>
    e860:	2000      	movs	r0, #0
    e862:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    e866:	e011      	b.n	e88c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x15c8>
    e868:	2000      	movs	r0, #0
    e86a:	f88d 0e1b 	strb.w	r0, [sp, #3611]	; 0xe1b
    e86e:	f89d 1e1b 	ldrb.w	r1, [sp, #3611]	; 0xe1b
    e872:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e87a:	f002 fdc8 	bl	1140e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e87e:	f8cd 0e1c 	str.w	r0, [sp, #3612]	; 0xe1c
    e882:	f8dd 0e1c 	ldr.w	r0, [sp, #3612]	; 0xe1c
    e886:	f8cd 07f4 	str.w	r0, [sp, #2036]	; 0x7f4
    e88a:	e00a      	b.n	e8a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x15de>
    e88c:	f89d 07f3 	ldrb.w	r0, [sp, #2035]	; 0x7f3
    e890:	07c0      	lsls	r0, r0, #31
    e892:	2800      	cmp	r0, #0
    e894:	d112      	bne.n	e8bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x15f8>
    e896:	e055      	b.n	e944 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1680>
    e898:	98b1      	ldr	r0, [sp, #708]	; 0x2c4
    e89a:	07c1      	lsls	r1, r0, #31
    e89c:	2900      	cmp	r1, #0
    e89e:	d1e3      	bne.n	e868 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x15a4>
    e8a0:	e7de      	b.n	e860 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x159c>
    e8a2:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    e8a6:	f20d 71f4 	addw	r1, sp, #2036	; 0x7f4
    e8aa:	f008 fa01 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e8ae:	90b0      	str	r0, [sp, #704]	; 0x2c0
    e8b0:	e7ff      	b.n	e8b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x15ee>
    e8b2:	98b0      	ldr	r0, [sp, #704]	; 0x2c0
    e8b4:	07c1      	lsls	r1, r0, #31
    e8b6:	2900      	cmp	r1, #0
    e8b8:	d1ce      	bne.n	e858 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1594>
    e8ba:	e7d1      	b.n	e860 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x159c>
                trace!("[{:04x}] ADD Vx, Vy", self.pc);
    e8bc:	f240 10f4 	movw	r0, #500	; 0x1f4
    e8c0:	f2c0 0002 	movt	r0, #2
    e8c4:	6801      	ldr	r1, [r0, #0]
    e8c6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e8ca:	f100 0212 	add.w	r2, r0, #18
    e8ce:	f8cd 2818 	str.w	r2, [sp, #2072]	; 0x818
    e8d2:	f8dd 2818 	ldr.w	r2, [sp, #2072]	; 0x818
    e8d6:	f8cd 2d40 	str.w	r2, [sp, #3392]	; 0xd40
    e8da:	f249 13cf 	movw	r3, #37327	; 0x91cf
    e8de:	f2c0 0301 	movt	r3, #1
    e8e2:	4610      	mov	r0, r2
    e8e4:	91af      	str	r1, [sp, #700]	; 0x2bc
    e8e6:	4619      	mov	r1, r3
    e8e8:	f7fb ff76 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e8ec:	90ae      	str	r0, [sp, #696]	; 0x2b8
    e8ee:	91ad      	str	r1, [sp, #692]	; 0x2b4
    e8f0:	e7ff      	b.n	e8f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x162e>
    e8f2:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
    e8f4:	f8cd 0810 	str.w	r0, [sp, #2064]	; 0x810
    e8f8:	99ad      	ldr	r1, [sp, #692]	; 0x2b4
    e8fa:	f8cd 1814 	str.w	r1, [sp, #2068]	; 0x814
    e8fe:	f64f 1238 	movw	r2, #63800	; 0xf938
    e902:	f2c0 0201 	movt	r2, #1
    e906:	6812      	ldr	r2, [r2, #0]
    e908:	466b      	mov	r3, sp
    e90a:	f04f 0c01 	mov.w	ip, #1
    e90e:	f8c3 c008 	str.w	ip, [r3, #8]
    e912:	605a      	str	r2, [r3, #4]
    e914:	f8c3 c000 	str.w	ip, [r3]
    e918:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    e91c:	2202      	movs	r2, #2
    e91e:	f50d 6301 	add.w	r3, sp, #2064	; 0x810
    e922:	99af      	ldr	r1, [sp, #700]	; 0x2bc
    e924:	f008 f889 	bl	16a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e928:	e7ff      	b.n	e92a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1666>
    e92a:	f8dd 17ec 	ldr.w	r1, [sp, #2028]	; 0x7ec
    e92e:	f240 2014 	movw	r0, #532	; 0x214
    e932:	f2c0 0002 	movt	r0, #2
    e936:	6802      	ldr	r2, [r0, #0]
    e938:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    e93c:	f003 fd96 	bl	1246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e940:	e7ff      	b.n	e942 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x167e>
    e942:	e7ff      	b.n	e944 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1680>
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
    e944:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e948:	280f      	cmp	r0, #15
    e94a:	f202 81a7 	bhi.w	10c9c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x39d8>
    e94e:	e7ff      	b.n	e950 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x168c>
    e950:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e954:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e958:	1842      	adds	r2, r0, r1
    e95a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e95e:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    e962:	2b0f      	cmp	r3, #15
    e964:	92ac      	str	r2, [sp, #688]	; 0x2b0
    e966:	f202 81a3 	bhi.w	10cb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x39ec>
    e96a:	e7ff      	b.n	e96c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x16a8>
    e96c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e970:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e974:	1842      	adds	r2, r0, r1
    e976:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    e97a:	98ac      	ldr	r0, [sp, #688]	; 0x2b0
    e97c:	f008 f907 	bl	16b8e <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E>
    e980:	90ab      	str	r0, [sp, #684]	; 0x2ac
    e982:	91aa      	str	r1, [sp, #680]	; 0x2a8
    e984:	e7ff      	b.n	e986 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x16c2>
    e986:	98ab      	ldr	r0, [sp, #684]	; 0x2ac
    e988:	f88d 0d46 	strb.w	r0, [sp, #3398]	; 0xd46
    e98c:	99aa      	ldr	r1, [sp, #680]	; 0x2a8
    e98e:	f001 0201 	and.w	r2, r1, #1
    e992:	f88d 2d47 	strb.w	r2, [sp, #3399]	; 0xd47
                self.v[x] = v;
    e996:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    e99a:	2a0f      	cmp	r2, #15
    e99c:	f202 8192 	bhi.w	10cc4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3a00>
    e9a0:	e7ff      	b.n	e9a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x16de>
    e9a2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e9a6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e9aa:	1842      	adds	r2, r0, r1
    e9ac:	9bab      	ldr	r3, [sp, #684]	; 0x2ac
    e9ae:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                self.v[0xf] = c as u8;
    e9b2:	9aaa      	ldr	r2, [sp, #680]	; 0x2a8
    e9b4:	f002 0c01 	and.w	ip, r2, #1
    e9b8:	f880 c043 	strb.w	ip, [r0, #67]	; 0x43
        match (
    e9bc:	f001 bf4f 	b.w	1085e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x359a>
    e9c0:	2005      	movs	r0, #5
    e9c2:	f8cd 081c 	str.w	r0, [sp, #2076]	; 0x81c
    e9c6:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
    e9ca:	f2c0 0001 	movt	r0, #1
    e9ce:	6801      	ldr	r1, [r0, #0]
    e9d0:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    e9d4:	f008 f96c 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e9d8:	90a9      	str	r0, [sp, #676]	; 0x2a4
    e9da:	e01f      	b.n	ea1c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1758>
    e9dc:	2001      	movs	r0, #1
    e9de:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    e9e2:	e015      	b.n	ea10 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x174c>
    e9e4:	2000      	movs	r0, #0
    e9e6:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    e9ea:	e011      	b.n	ea10 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x174c>
    e9ec:	2000      	movs	r0, #0
    e9ee:	f88d 0e23 	strb.w	r0, [sp, #3619]	; 0xe23
    e9f2:	f89d 1e23 	ldrb.w	r1, [sp, #3619]	; 0xe23
    e9f6:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e9fa:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e9fe:	f002 fd06 	bl	1140e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    ea02:	f8cd 0e24 	str.w	r0, [sp, #3620]	; 0xe24
    ea06:	f8dd 0e24 	ldr.w	r0, [sp, #3620]	; 0xe24
    ea0a:	f8cd 0824 	str.w	r0, [sp, #2084]	; 0x824
    ea0e:	e00a      	b.n	ea26 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1762>
    ea10:	f89d 0823 	ldrb.w	r0, [sp, #2083]	; 0x823
    ea14:	07c0      	lsls	r0, r0, #31
    ea16:	2800      	cmp	r0, #0
    ea18:	d112      	bne.n	ea40 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x177c>
    ea1a:	e055      	b.n	eac8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1804>
    ea1c:	98a9      	ldr	r0, [sp, #676]	; 0x2a4
    ea1e:	07c1      	lsls	r1, r0, #31
    ea20:	2900      	cmp	r1, #0
    ea22:	d1e3      	bne.n	e9ec <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1728>
    ea24:	e7de      	b.n	e9e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1720>
    ea26:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    ea2a:	f60d 0124 	addw	r1, sp, #2084	; 0x824
    ea2e:	f008 f93f 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ea32:	90a8      	str	r0, [sp, #672]	; 0x2a0
    ea34:	e7ff      	b.n	ea36 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1772>
    ea36:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
    ea38:	07c1      	lsls	r1, r0, #31
    ea3a:	2900      	cmp	r1, #0
    ea3c:	d1ce      	bne.n	e9dc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1718>
    ea3e:	e7d1      	b.n	e9e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1720>
                trace!("[{:04x}] SUB Vx, Vy", self.pc);
    ea40:	f240 1084 	movw	r0, #388	; 0x184
    ea44:	f2c0 0002 	movt	r0, #2
    ea48:	6801      	ldr	r1, [r0, #0]
    ea4a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ea4e:	f100 0212 	add.w	r2, r0, #18
    ea52:	f8cd 2848 	str.w	r2, [sp, #2120]	; 0x848
    ea56:	f8dd 2848 	ldr.w	r2, [sp, #2120]	; 0x848
    ea5a:	f8cd 2d38 	str.w	r2, [sp, #3384]	; 0xd38
    ea5e:	f249 13cf 	movw	r3, #37327	; 0x91cf
    ea62:	f2c0 0301 	movt	r3, #1
    ea66:	4610      	mov	r0, r2
    ea68:	91a7      	str	r1, [sp, #668]	; 0x29c
    ea6a:	4619      	mov	r1, r3
    ea6c:	f7fb feb4 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ea70:	90a6      	str	r0, [sp, #664]	; 0x298
    ea72:	91a5      	str	r1, [sp, #660]	; 0x294
    ea74:	e7ff      	b.n	ea76 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x17b2>
    ea76:	98a6      	ldr	r0, [sp, #664]	; 0x298
    ea78:	f8cd 0840 	str.w	r0, [sp, #2112]	; 0x840
    ea7c:	99a5      	ldr	r1, [sp, #660]	; 0x294
    ea7e:	f8cd 1844 	str.w	r1, [sp, #2116]	; 0x844
    ea82:	f64f 1238 	movw	r2, #63800	; 0xf938
    ea86:	f2c0 0201 	movt	r2, #1
    ea8a:	6812      	ldr	r2, [r2, #0]
    ea8c:	466b      	mov	r3, sp
    ea8e:	f04f 0c01 	mov.w	ip, #1
    ea92:	f8c3 c008 	str.w	ip, [r3, #8]
    ea96:	605a      	str	r2, [r3, #4]
    ea98:	f8c3 c000 	str.w	ip, [r3]
    ea9c:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    eaa0:	2202      	movs	r2, #2
    eaa2:	f50d 6304 	add.w	r3, sp, #2112	; 0x840
    eaa6:	99a7      	ldr	r1, [sp, #668]	; 0x29c
    eaa8:	f007 ffc7 	bl	16a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    eaac:	e7ff      	b.n	eaae <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x17ea>
    eaae:	f8dd 181c 	ldr.w	r1, [sp, #2076]	; 0x81c
    eab2:	f240 10a4 	movw	r0, #420	; 0x1a4
    eab6:	f2c0 0002 	movt	r0, #2
    eaba:	6802      	ldr	r2, [r0, #0]
    eabc:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    eac0:	f003 fcd4 	bl	1246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    eac4:	e7ff      	b.n	eac6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1802>
    eac6:	e7ff      	b.n	eac8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1804>
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
    eac8:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    eacc:	280f      	cmp	r0, #15
    eace:	f202 80c7 	bhi.w	10c60 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x399c>
    ead2:	e7ff      	b.n	ead4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1810>
    ead4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ead8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    eadc:	1842      	adds	r2, r0, r1
    eade:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    eae2:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    eae6:	2b0f      	cmp	r3, #15
    eae8:	92a4      	str	r2, [sp, #656]	; 0x290
    eaea:	f202 80c3 	bhi.w	10c74 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x39b0>
    eaee:	e7ff      	b.n	eaf0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x182c>
    eaf0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    eaf4:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    eaf8:	1842      	adds	r2, r0, r1
    eafa:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    eafe:	98a4      	ldr	r0, [sp, #656]	; 0x290
    eb00:	f008 f870 	bl	16be4 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E>
    eb04:	90a3      	str	r0, [sp, #652]	; 0x28c
    eb06:	91a2      	str	r1, [sp, #648]	; 0x288
    eb08:	e7ff      	b.n	eb0a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1846>
    eb0a:	98a3      	ldr	r0, [sp, #652]	; 0x28c
    eb0c:	f88d 0d3e 	strb.w	r0, [sp, #3390]	; 0xd3e
    eb10:	99a2      	ldr	r1, [sp, #648]	; 0x288
    eb12:	f001 0201 	and.w	r2, r1, #1
    eb16:	f88d 2d3f 	strb.w	r2, [sp, #3391]	; 0xd3f
                self.v[x] = v;
    eb1a:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    eb1e:	2a0f      	cmp	r2, #15
    eb20:	f202 80b2 	bhi.w	10c88 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x39c4>
    eb24:	e7ff      	b.n	eb26 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1862>
    eb26:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    eb2a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    eb2e:	1842      	adds	r2, r0, r1
    eb30:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    eb32:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    eb36:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    eb38:	f8dd c288 	ldr.w	ip, [sp, #648]	; 0x288
    eb3c:	ea22 020c 	bic.w	r2, r2, ip
    eb40:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    eb44:	f001 be8b 	b.w	1085e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x359a>
    eb48:	2005      	movs	r0, #5
    eb4a:	f8cd 084c 	str.w	r0, [sp, #2124]	; 0x84c
    eb4e:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
    eb52:	f2c0 0001 	movt	r0, #1
    eb56:	6801      	ldr	r1, [r0, #0]
    eb58:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    eb5c:	f008 f8a8 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    eb60:	90a1      	str	r0, [sp, #644]	; 0x284
    eb62:	e01f      	b.n	eba4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x18e0>
    eb64:	2001      	movs	r0, #1
    eb66:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    eb6a:	e015      	b.n	eb98 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x18d4>
    eb6c:	2000      	movs	r0, #0
    eb6e:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    eb72:	e011      	b.n	eb98 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x18d4>
    eb74:	2000      	movs	r0, #0
    eb76:	f88d 0e2b 	strb.w	r0, [sp, #3627]	; 0xe2b
    eb7a:	f89d 1e2b 	ldrb.w	r1, [sp, #3627]	; 0xe2b
    eb7e:	f644 206c 	movw	r0, #19052	; 0x4a6c
    eb82:	f2c2 0000 	movt	r0, #8192	; 0x2000
    eb86:	f002 fc42 	bl	1140e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    eb8a:	f8cd 0e2c 	str.w	r0, [sp, #3628]	; 0xe2c
    eb8e:	f8dd 0e2c 	ldr.w	r0, [sp, #3628]	; 0xe2c
    eb92:	f8cd 0854 	str.w	r0, [sp, #2132]	; 0x854
    eb96:	e00a      	b.n	ebae <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x18ea>
    eb98:	f89d 0853 	ldrb.w	r0, [sp, #2131]	; 0x853
    eb9c:	07c0      	lsls	r0, r0, #31
    eb9e:	2800      	cmp	r0, #0
    eba0:	d112      	bne.n	ebc8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1904>
    eba2:	e055      	b.n	ec50 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x198c>
    eba4:	98a1      	ldr	r0, [sp, #644]	; 0x284
    eba6:	07c1      	lsls	r1, r0, #31
    eba8:	2900      	cmp	r1, #0
    ebaa:	d1e3      	bne.n	eb74 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x18b0>
    ebac:	e7de      	b.n	eb6c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x18a8>
    ebae:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    ebb2:	f60d 0154 	addw	r1, sp, #2132	; 0x854
    ebb6:	f008 f87b 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ebba:	90a0      	str	r0, [sp, #640]	; 0x280
    ebbc:	e7ff      	b.n	ebbe <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x18fa>
    ebbe:	98a0      	ldr	r0, [sp, #640]	; 0x280
    ebc0:	07c1      	lsls	r1, r0, #31
    ebc2:	2900      	cmp	r1, #0
    ebc4:	d1ce      	bne.n	eb64 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x18a0>
    ebc6:	e7d1      	b.n	eb6c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x18a8>
                trace!("[{:04x}] SHR Vx, Vy", self.pc);
    ebc8:	f240 1014 	movw	r0, #276	; 0x114
    ebcc:	f2c0 0002 	movt	r0, #2
    ebd0:	6801      	ldr	r1, [r0, #0]
    ebd2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ebd6:	f100 0212 	add.w	r2, r0, #18
    ebda:	f8cd 2878 	str.w	r2, [sp, #2168]	; 0x878
    ebde:	f8dd 2878 	ldr.w	r2, [sp, #2168]	; 0x878
    ebe2:	f8cd 2d34 	str.w	r2, [sp, #3380]	; 0xd34
    ebe6:	f249 13cf 	movw	r3, #37327	; 0x91cf
    ebea:	f2c0 0301 	movt	r3, #1
    ebee:	4610      	mov	r0, r2
    ebf0:	919f      	str	r1, [sp, #636]	; 0x27c
    ebf2:	4619      	mov	r1, r3
    ebf4:	f7fb fdf0 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ebf8:	909e      	str	r0, [sp, #632]	; 0x278
    ebfa:	919d      	str	r1, [sp, #628]	; 0x274
    ebfc:	e7ff      	b.n	ebfe <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x193a>
    ebfe:	989e      	ldr	r0, [sp, #632]	; 0x278
    ec00:	f8cd 0870 	str.w	r0, [sp, #2160]	; 0x870
    ec04:	999d      	ldr	r1, [sp, #628]	; 0x274
    ec06:	f8cd 1874 	str.w	r1, [sp, #2164]	; 0x874
    ec0a:	f64f 1238 	movw	r2, #63800	; 0xf938
    ec0e:	f2c0 0201 	movt	r2, #1
    ec12:	6812      	ldr	r2, [r2, #0]
    ec14:	466b      	mov	r3, sp
    ec16:	f04f 0c01 	mov.w	ip, #1
    ec1a:	f8c3 c008 	str.w	ip, [r3, #8]
    ec1e:	605a      	str	r2, [r3, #4]
    ec20:	f8c3 c000 	str.w	ip, [r3]
    ec24:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    ec28:	2202      	movs	r2, #2
    ec2a:	f50d 6307 	add.w	r3, sp, #2160	; 0x870
    ec2e:	999f      	ldr	r1, [sp, #636]	; 0x27c
    ec30:	f007 ff03 	bl	16a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ec34:	e7ff      	b.n	ec36 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1972>
    ec36:	f8dd 184c 	ldr.w	r1, [sp, #2124]	; 0x84c
    ec3a:	f240 1034 	movw	r0, #308	; 0x134
    ec3e:	f2c0 0002 	movt	r0, #2
    ec42:	6802      	ldr	r2, [r0, #0]
    ec44:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    ec48:	f003 fc10 	bl	1246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ec4c:	e7ff      	b.n	ec4e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x198a>
    ec4e:	e7ff      	b.n	ec50 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x198c>
                self.v[0xf] = self.v[x] & 1;
    ec50:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ec54:	280f      	cmp	r0, #15
    ec56:	f201 87e5 	bhi.w	10c24 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3960>
    ec5a:	e7ff      	b.n	ec5c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1998>
    ec5c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ec60:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ec64:	1842      	adds	r2, r0, r1
    ec66:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ec6a:	f002 0201 	and.w	r2, r2, #1
    ec6e:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shr(1);
    ec72:	290f      	cmp	r1, #15
    ec74:	f201 87e0 	bhi.w	10c38 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3974>
    ec78:	e7ff      	b.n	ec7a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x19b6>
    ec7a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ec7e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ec82:	1842      	adds	r2, r0, r1
    ec84:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    ec88:	2101      	movs	r1, #1
    ec8a:	f007 ff5c 	bl	16b46 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17h0b64f2ebc21519c0E>
    ec8e:	909c      	str	r0, [sp, #624]	; 0x270
    ec90:	e7ff      	b.n	ec92 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x19ce>
    ec92:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ec96:	280f      	cmp	r0, #15
    ec98:	f201 87d8 	bhi.w	10c4c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3988>
    ec9c:	e7ff      	b.n	ec9e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x19da>
    ec9e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    eca2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    eca6:	1842      	adds	r2, r0, r1
    eca8:	9b9c      	ldr	r3, [sp, #624]	; 0x270
    ecaa:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    ecae:	f001 bdd6 	b.w	1085e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x359a>
    ecb2:	2005      	movs	r0, #5
    ecb4:	f8cd 087c 	str.w	r0, [sp, #2172]	; 0x87c
    ecb8:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
    ecbc:	f2c0 0001 	movt	r0, #1
    ecc0:	6801      	ldr	r1, [r0, #0]
    ecc2:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    ecc6:	f007 fff3 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ecca:	909b      	str	r0, [sp, #620]	; 0x26c
    eccc:	e01f      	b.n	ed0e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1a4a>
    ecce:	2001      	movs	r0, #1
    ecd0:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    ecd4:	e015      	b.n	ed02 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1a3e>
    ecd6:	2000      	movs	r0, #0
    ecd8:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    ecdc:	e011      	b.n	ed02 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1a3e>
    ecde:	2000      	movs	r0, #0
    ece0:	f88d 0e33 	strb.w	r0, [sp, #3635]	; 0xe33
    ece4:	f89d 1e33 	ldrb.w	r1, [sp, #3635]	; 0xe33
    ece8:	f644 206c 	movw	r0, #19052	; 0x4a6c
    ecec:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ecf0:	f002 fb8d 	bl	1140e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    ecf4:	f8cd 0e34 	str.w	r0, [sp, #3636]	; 0xe34
    ecf8:	f8dd 0e34 	ldr.w	r0, [sp, #3636]	; 0xe34
    ecfc:	f8cd 0884 	str.w	r0, [sp, #2180]	; 0x884
    ed00:	e00a      	b.n	ed18 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1a54>
    ed02:	f89d 0883 	ldrb.w	r0, [sp, #2179]	; 0x883
    ed06:	07c0      	lsls	r0, r0, #31
    ed08:	2800      	cmp	r0, #0
    ed0a:	d112      	bne.n	ed32 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1a6e>
    ed0c:	e055      	b.n	edba <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1af6>
    ed0e:	989b      	ldr	r0, [sp, #620]	; 0x26c
    ed10:	07c1      	lsls	r1, r0, #31
    ed12:	2900      	cmp	r1, #0
    ed14:	d1e3      	bne.n	ecde <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1a1a>
    ed16:	e7de      	b.n	ecd6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1a12>
    ed18:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    ed1c:	f60d 0184 	addw	r1, sp, #2180	; 0x884
    ed20:	f007 ffc6 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ed24:	909a      	str	r0, [sp, #616]	; 0x268
    ed26:	e7ff      	b.n	ed28 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1a64>
    ed28:	989a      	ldr	r0, [sp, #616]	; 0x268
    ed2a:	07c1      	lsls	r1, r0, #31
    ed2c:	2900      	cmp	r1, #0
    ed2e:	d1ce      	bne.n	ecce <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1a0a>
    ed30:	e7d1      	b.n	ecd6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1a12>
                trace!("[{:04x}] SUBN Vx, Vy", self.pc);
    ed32:	f240 00a4 	movw	r0, #164	; 0xa4
    ed36:	f2c0 0002 	movt	r0, #2
    ed3a:	6801      	ldr	r1, [r0, #0]
    ed3c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ed40:	f100 0212 	add.w	r2, r0, #18
    ed44:	f8cd 28a8 	str.w	r2, [sp, #2216]	; 0x8a8
    ed48:	f8dd 28a8 	ldr.w	r2, [sp, #2216]	; 0x8a8
    ed4c:	f8cd 2d2c 	str.w	r2, [sp, #3372]	; 0xd2c
    ed50:	f249 13cf 	movw	r3, #37327	; 0x91cf
    ed54:	f2c0 0301 	movt	r3, #1
    ed58:	4610      	mov	r0, r2
    ed5a:	9199      	str	r1, [sp, #612]	; 0x264
    ed5c:	4619      	mov	r1, r3
    ed5e:	f7fb fd3b 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ed62:	9098      	str	r0, [sp, #608]	; 0x260
    ed64:	9197      	str	r1, [sp, #604]	; 0x25c
    ed66:	e7ff      	b.n	ed68 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1aa4>
    ed68:	9898      	ldr	r0, [sp, #608]	; 0x260
    ed6a:	f8cd 08a0 	str.w	r0, [sp, #2208]	; 0x8a0
    ed6e:	9997      	ldr	r1, [sp, #604]	; 0x25c
    ed70:	f8cd 18a4 	str.w	r1, [sp, #2212]	; 0x8a4
    ed74:	f64f 1238 	movw	r2, #63800	; 0xf938
    ed78:	f2c0 0201 	movt	r2, #1
    ed7c:	6812      	ldr	r2, [r2, #0]
    ed7e:	466b      	mov	r3, sp
    ed80:	f04f 0c01 	mov.w	ip, #1
    ed84:	f8c3 c008 	str.w	ip, [r3, #8]
    ed88:	605a      	str	r2, [r3, #4]
    ed8a:	f8c3 c000 	str.w	ip, [r3]
    ed8e:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    ed92:	2202      	movs	r2, #2
    ed94:	f50d 630a 	add.w	r3, sp, #2208	; 0x8a0
    ed98:	9999      	ldr	r1, [sp, #612]	; 0x264
    ed9a:	f007 fe4e 	bl	16a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ed9e:	e7ff      	b.n	eda0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1adc>
    eda0:	f8dd 187c 	ldr.w	r1, [sp, #2172]	; 0x87c
    eda4:	f240 00c4 	movw	r0, #196	; 0xc4
    eda8:	f2c0 0002 	movt	r0, #2
    edac:	6802      	ldr	r2, [r0, #0]
    edae:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    edb2:	f003 fb5b 	bl	1246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    edb6:	e7ff      	b.n	edb8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1af4>
    edb8:	e7ff      	b.n	edba <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1af6>
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
    edba:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    edbe:	280f      	cmp	r0, #15
    edc0:	f201 8712 	bhi.w	10be8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3924>
    edc4:	e7ff      	b.n	edc6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1b02>
    edc6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    edca:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    edce:	1842      	adds	r2, r0, r1
    edd0:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    edd4:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    edd8:	2b0f      	cmp	r3, #15
    edda:	9296      	str	r2, [sp, #600]	; 0x258
    eddc:	f201 870e 	bhi.w	10bfc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3938>
    ede0:	e7ff      	b.n	ede2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1b1e>
    ede2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ede6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    edea:	1842      	adds	r2, r0, r1
    edec:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    edf0:	9896      	ldr	r0, [sp, #600]	; 0x258
    edf2:	f007 fef7 	bl	16be4 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E>
    edf6:	9095      	str	r0, [sp, #596]	; 0x254
    edf8:	9194      	str	r1, [sp, #592]	; 0x250
    edfa:	e7ff      	b.n	edfc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1b38>
    edfc:	9895      	ldr	r0, [sp, #596]	; 0x254
    edfe:	f88d 0d32 	strb.w	r0, [sp, #3378]	; 0xd32
    ee02:	9994      	ldr	r1, [sp, #592]	; 0x250
    ee04:	f001 0201 	and.w	r2, r1, #1
    ee08:	f88d 2d33 	strb.w	r2, [sp, #3379]	; 0xd33
                self.v[x] = v;
    ee0c:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    ee10:	2a0f      	cmp	r2, #15
    ee12:	f201 86fd 	bhi.w	10c10 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x394c>
    ee16:	e7ff      	b.n	ee18 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1b54>
    ee18:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ee1c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ee20:	1842      	adds	r2, r0, r1
    ee22:	9b95      	ldr	r3, [sp, #596]	; 0x254
    ee24:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    ee28:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    ee2a:	f8dd c250 	ldr.w	ip, [sp, #592]	; 0x250
    ee2e:	ea22 020c 	bic.w	r2, r2, ip
    ee32:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    ee36:	f001 bd12 	b.w	1085e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x359a>
    ee3a:	2005      	movs	r0, #5
    ee3c:	f8cd 08ac 	str.w	r0, [sp, #2220]	; 0x8ac
    ee40:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
    ee44:	f2c0 0001 	movt	r0, #1
    ee48:	6801      	ldr	r1, [r0, #0]
    ee4a:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    ee4e:	f007 ff2f 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ee52:	9093      	str	r0, [sp, #588]	; 0x24c
    ee54:	e01f      	b.n	ee96 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1bd2>
    ee56:	2001      	movs	r0, #1
    ee58:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    ee5c:	e015      	b.n	ee8a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1bc6>
    ee5e:	2000      	movs	r0, #0
    ee60:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    ee64:	e011      	b.n	ee8a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1bc6>
    ee66:	2000      	movs	r0, #0
    ee68:	f88d 0e3b 	strb.w	r0, [sp, #3643]	; 0xe3b
    ee6c:	f89d 1e3b 	ldrb.w	r1, [sp, #3643]	; 0xe3b
    ee70:	f644 206c 	movw	r0, #19052	; 0x4a6c
    ee74:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ee78:	f002 fac9 	bl	1140e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    ee7c:	f8cd 0e3c 	str.w	r0, [sp, #3644]	; 0xe3c
    ee80:	f8dd 0e3c 	ldr.w	r0, [sp, #3644]	; 0xe3c
    ee84:	f8cd 08b4 	str.w	r0, [sp, #2228]	; 0x8b4
    ee88:	e00a      	b.n	eea0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1bdc>
    ee8a:	f89d 08b3 	ldrb.w	r0, [sp, #2227]	; 0x8b3
    ee8e:	07c0      	lsls	r0, r0, #31
    ee90:	2800      	cmp	r0, #0
    ee92:	d112      	bne.n	eeba <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1bf6>
    ee94:	e055      	b.n	ef42 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1c7e>
    ee96:	9893      	ldr	r0, [sp, #588]	; 0x24c
    ee98:	07c1      	lsls	r1, r0, #31
    ee9a:	2900      	cmp	r1, #0
    ee9c:	d1e3      	bne.n	ee66 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1ba2>
    ee9e:	e7de      	b.n	ee5e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1b9a>
    eea0:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    eea4:	f60d 01b4 	addw	r1, sp, #2228	; 0x8b4
    eea8:	f007 ff02 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    eeac:	9092      	str	r0, [sp, #584]	; 0x248
    eeae:	e7ff      	b.n	eeb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1bec>
    eeb0:	9892      	ldr	r0, [sp, #584]	; 0x248
    eeb2:	07c1      	lsls	r1, r0, #31
    eeb4:	2900      	cmp	r1, #0
    eeb6:	d1ce      	bne.n	ee56 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1b92>
    eeb8:	e7d1      	b.n	ee5e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1b9a>
                trace!("[{:04x}] SHL Vx, Vy", self.pc);
    eeba:	f240 0030 	movw	r0, #48	; 0x30
    eebe:	f2c0 0002 	movt	r0, #2
    eec2:	6801      	ldr	r1, [r0, #0]
    eec4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    eec8:	f100 0212 	add.w	r2, r0, #18
    eecc:	f8cd 28d8 	str.w	r2, [sp, #2264]	; 0x8d8
    eed0:	f8dd 28d8 	ldr.w	r2, [sp, #2264]	; 0x8d8
    eed4:	f8cd 2d28 	str.w	r2, [sp, #3368]	; 0xd28
    eed8:	f249 13cf 	movw	r3, #37327	; 0x91cf
    eedc:	f2c0 0301 	movt	r3, #1
    eee0:	4610      	mov	r0, r2
    eee2:	9191      	str	r1, [sp, #580]	; 0x244
    eee4:	4619      	mov	r1, r3
    eee6:	f7fb fc77 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    eeea:	9090      	str	r0, [sp, #576]	; 0x240
    eeec:	918f      	str	r1, [sp, #572]	; 0x23c
    eeee:	e7ff      	b.n	eef0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1c2c>
    eef0:	9890      	ldr	r0, [sp, #576]	; 0x240
    eef2:	f8cd 08d0 	str.w	r0, [sp, #2256]	; 0x8d0
    eef6:	998f      	ldr	r1, [sp, #572]	; 0x23c
    eef8:	f8cd 18d4 	str.w	r1, [sp, #2260]	; 0x8d4
    eefc:	f64f 1238 	movw	r2, #63800	; 0xf938
    ef00:	f2c0 0201 	movt	r2, #1
    ef04:	6812      	ldr	r2, [r2, #0]
    ef06:	466b      	mov	r3, sp
    ef08:	f04f 0c01 	mov.w	ip, #1
    ef0c:	f8c3 c008 	str.w	ip, [r3, #8]
    ef10:	605a      	str	r2, [r3, #4]
    ef12:	f8c3 c000 	str.w	ip, [r3]
    ef16:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    ef1a:	2202      	movs	r2, #2
    ef1c:	f50d 630d 	add.w	r3, sp, #2256	; 0x8d0
    ef20:	9991      	ldr	r1, [sp, #580]	; 0x244
    ef22:	f007 fd8a 	bl	16a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ef26:	e7ff      	b.n	ef28 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1c64>
    ef28:	f8dd 18ac 	ldr.w	r1, [sp, #2220]	; 0x8ac
    ef2c:	f240 0050 	movw	r0, #80	; 0x50
    ef30:	f2c0 0002 	movt	r0, #2
    ef34:	6802      	ldr	r2, [r0, #0]
    ef36:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    ef3a:	f003 fa97 	bl	1246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ef3e:	e7ff      	b.n	ef40 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1c7c>
    ef40:	e7ff      	b.n	ef42 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1c7e>
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
    ef42:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ef46:	280f      	cmp	r0, #15
    ef48:	f201 8630 	bhi.w	10bac <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x38e8>
    ef4c:	e7ff      	b.n	ef4e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1c8a>
    ef4e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ef52:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ef56:	1842      	adds	r2, r0, r1
    ef58:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ef5c:	09d2      	lsrs	r2, r2, #7
    ef5e:	928e      	str	r2, [sp, #568]	; 0x238
    ef60:	e7ff      	b.n	ef62 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1c9e>
    ef62:	988e      	ldr	r0, [sp, #568]	; 0x238
    ef64:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    ef68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shl(1);
    ef6c:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    ef70:	2a0f      	cmp	r2, #15
    ef72:	f201 8625 	bhi.w	10bc0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x38fc>
    ef76:	e7ff      	b.n	ef78 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1cb4>
    ef78:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ef7c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ef80:	1842      	adds	r2, r0, r1
    ef82:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    ef86:	2101      	movs	r1, #1
    ef88:	f007 fdcc 	bl	16b24 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17hd4e34d1323470418E>
    ef8c:	908d      	str	r0, [sp, #564]	; 0x234
    ef8e:	e7ff      	b.n	ef90 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1ccc>
    ef90:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ef94:	280f      	cmp	r0, #15
    ef96:	f201 861d 	bhi.w	10bd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3910>
    ef9a:	e7ff      	b.n	ef9c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1cd8>
    ef9c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    efa0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    efa4:	1842      	adds	r2, r0, r1
    efa6:	9b8d      	ldr	r3, [sp, #564]	; 0x234
    efa8:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    efac:	f001 bc57 	b.w	1085e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x359a>
    efb0:	2005      	movs	r0, #5
    efb2:	f8cd 08dc 	str.w	r0, [sp, #2268]	; 0x8dc
    efb6:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
    efba:	f2c0 0001 	movt	r0, #1
    efbe:	6801      	ldr	r1, [r0, #0]
    efc0:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    efc4:	f007 fe74 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    efc8:	908c      	str	r0, [sp, #560]	; 0x230
    efca:	e01f      	b.n	f00c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1d48>
    efcc:	2001      	movs	r0, #1
    efce:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    efd2:	e015      	b.n	f000 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1d3c>
    efd4:	2000      	movs	r0, #0
    efd6:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    efda:	e011      	b.n	f000 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1d3c>
    efdc:	2000      	movs	r0, #0
    efde:	f88d 0e43 	strb.w	r0, [sp, #3651]	; 0xe43
    efe2:	f89d 1e43 	ldrb.w	r1, [sp, #3651]	; 0xe43
    efe6:	f644 206c 	movw	r0, #19052	; 0x4a6c
    efea:	f2c2 0000 	movt	r0, #8192	; 0x2000
    efee:	f002 fa0e 	bl	1140e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    eff2:	f8cd 0e44 	str.w	r0, [sp, #3652]	; 0xe44
    eff6:	f8dd 0e44 	ldr.w	r0, [sp, #3652]	; 0xe44
    effa:	f8cd 08e4 	str.w	r0, [sp, #2276]	; 0x8e4
    effe:	e00a      	b.n	f016 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1d52>
    f000:	f89d 08e3 	ldrb.w	r0, [sp, #2275]	; 0x8e3
    f004:	07c0      	lsls	r0, r0, #31
    f006:	2800      	cmp	r0, #0
    f008:	d112      	bne.n	f030 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1d6c>
    f00a:	e055      	b.n	f0b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1df4>
    f00c:	988c      	ldr	r0, [sp, #560]	; 0x230
    f00e:	07c1      	lsls	r1, r0, #31
    f010:	2900      	cmp	r1, #0
    f012:	d1e3      	bne.n	efdc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1d18>
    f014:	e7de      	b.n	efd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1d10>
    f016:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    f01a:	f60d 01e4 	addw	r1, sp, #2276	; 0x8e4
    f01e:	f007 fe47 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f022:	908b      	str	r0, [sp, #556]	; 0x22c
    f024:	e7ff      	b.n	f026 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1d62>
    f026:	988b      	ldr	r0, [sp, #556]	; 0x22c
    f028:	07c1      	lsls	r1, r0, #31
    f02a:	2900      	cmp	r1, #0
    f02c:	d1ce      	bne.n	efcc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1d08>
    f02e:	e7d1      	b.n	efd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1d10>
                trace!("[{:04x}] SNE Vx, Vy", self.pc);
    f030:	f64f 70d0 	movw	r0, #65488	; 0xffd0
    f034:	f2c0 0001 	movt	r0, #1
    f038:	6801      	ldr	r1, [r0, #0]
    f03a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f03e:	f100 0212 	add.w	r2, r0, #18
    f042:	f8cd 2908 	str.w	r2, [sp, #2312]	; 0x908
    f046:	f8dd 2908 	ldr.w	r2, [sp, #2312]	; 0x908
    f04a:	f8cd 2d24 	str.w	r2, [sp, #3364]	; 0xd24
    f04e:	f249 13cf 	movw	r3, #37327	; 0x91cf
    f052:	f2c0 0301 	movt	r3, #1
    f056:	4610      	mov	r0, r2
    f058:	918a      	str	r1, [sp, #552]	; 0x228
    f05a:	4619      	mov	r1, r3
    f05c:	f7fb fbbc 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f060:	9089      	str	r0, [sp, #548]	; 0x224
    f062:	9188      	str	r1, [sp, #544]	; 0x220
    f064:	e7ff      	b.n	f066 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1da2>
    f066:	9889      	ldr	r0, [sp, #548]	; 0x224
    f068:	f8cd 0900 	str.w	r0, [sp, #2304]	; 0x900
    f06c:	9988      	ldr	r1, [sp, #544]	; 0x220
    f06e:	f8cd 1904 	str.w	r1, [sp, #2308]	; 0x904
    f072:	f64f 1238 	movw	r2, #63800	; 0xf938
    f076:	f2c0 0201 	movt	r2, #1
    f07a:	6812      	ldr	r2, [r2, #0]
    f07c:	466b      	mov	r3, sp
    f07e:	f04f 0c01 	mov.w	ip, #1
    f082:	f8c3 c008 	str.w	ip, [r3, #8]
    f086:	605a      	str	r2, [r3, #4]
    f088:	f8c3 c000 	str.w	ip, [r3]
    f08c:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    f090:	2202      	movs	r2, #2
    f092:	f50d 6310 	add.w	r3, sp, #2304	; 0x900
    f096:	998a      	ldr	r1, [sp, #552]	; 0x228
    f098:	f007 fccf 	bl	16a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f09c:	e7ff      	b.n	f09e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1dda>
    f09e:	f8dd 18dc 	ldr.w	r1, [sp, #2268]	; 0x8dc
    f0a2:	f64f 70f0 	movw	r0, #65520	; 0xfff0
    f0a6:	f2c0 0001 	movt	r0, #1
    f0aa:	6802      	ldr	r2, [r0, #0]
    f0ac:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    f0b0:	f003 f9dc 	bl	1246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f0b4:	e7ff      	b.n	f0b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1df2>
    f0b6:	e7ff      	b.n	f0b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1df4>
                if self.v[x] != self.v[y] {
    f0b8:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    f0bc:	280f      	cmp	r0, #15
    f0be:	f201 8561 	bhi.w	10b84 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x38c0>
    f0c2:	e7ff      	b.n	f0c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1e00>
    f0c4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f0c8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f0cc:	1842      	adds	r2, r0, r1
    f0ce:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    f0d2:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    f0d6:	2b0f      	cmp	r3, #15
    f0d8:	9287      	str	r2, [sp, #540]	; 0x21c
    f0da:	f201 855d 	bhi.w	10b98 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x38d4>
    f0de:	e7ff      	b.n	f0e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1e1c>
    f0e0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f0e4:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    f0e8:	1842      	adds	r2, r0, r1
    f0ea:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    f0ee:	9b87      	ldr	r3, [sp, #540]	; 0x21c
    f0f0:	fa5f fc83 	uxtb.w	ip, r3
    f0f4:	4594      	cmp	ip, r2
    f0f6:	d006      	beq.n	f106 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1e42>
    f0f8:	e7ff      	b.n	f0fa <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1e36>
                    self.next();
    f0fa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f0fe:	f001 fee0 	bl	10ec2 <_ZN8libchip814Chip8$LT$T$GT$4next17hcff432de15657423E>
    f102:	e7ff      	b.n	f104 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1e40>
                if self.v[x] != self.v[y] {
    f104:	e7ff      	b.n	f106 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1e42>
        match (
    f106:	f001 bbaa 	b.w	1085e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x359a>
    f10a:	2005      	movs	r0, #5
    f10c:	f8cd 090c 	str.w	r0, [sp, #2316]	; 0x90c
    f110:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
    f114:	f2c0 0001 	movt	r0, #1
    f118:	6801      	ldr	r1, [r0, #0]
    f11a:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    f11e:	f007 fdc7 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f122:	9086      	str	r0, [sp, #536]	; 0x218
    f124:	e01f      	b.n	f166 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1ea2>
    f126:	2001      	movs	r0, #1
    f128:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    f12c:	e015      	b.n	f15a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1e96>
    f12e:	2000      	movs	r0, #0
    f130:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    f134:	e011      	b.n	f15a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1e96>
    f136:	2000      	movs	r0, #0
    f138:	f88d 0e4b 	strb.w	r0, [sp, #3659]	; 0xe4b
    f13c:	f89d 1e4b 	ldrb.w	r1, [sp, #3659]	; 0xe4b
    f140:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f144:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f148:	f002 f961 	bl	1140e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f14c:	f8cd 0e4c 	str.w	r0, [sp, #3660]	; 0xe4c
    f150:	f8dd 0e4c 	ldr.w	r0, [sp, #3660]	; 0xe4c
    f154:	f8cd 0914 	str.w	r0, [sp, #2324]	; 0x914
    f158:	e00a      	b.n	f170 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1eac>
    f15a:	f89d 0913 	ldrb.w	r0, [sp, #2323]	; 0x913
    f15e:	07c0      	lsls	r0, r0, #31
    f160:	2800      	cmp	r0, #0
    f162:	d112      	bne.n	f18a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1ec6>
    f164:	e055      	b.n	f212 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1f4e>
    f166:	9886      	ldr	r0, [sp, #536]	; 0x218
    f168:	07c1      	lsls	r1, r0, #31
    f16a:	2900      	cmp	r1, #0
    f16c:	d1e3      	bne.n	f136 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1e72>
    f16e:	e7de      	b.n	f12e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1e6a>
    f170:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    f174:	f60d 1114 	addw	r1, sp, #2324	; 0x914
    f178:	f007 fd9a 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f17c:	9085      	str	r0, [sp, #532]	; 0x214
    f17e:	e7ff      	b.n	f180 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1ebc>
    f180:	9885      	ldr	r0, [sp, #532]	; 0x214
    f182:	07c1      	lsls	r1, r0, #31
    f184:	2900      	cmp	r1, #0
    f186:	d1ce      	bne.n	f126 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1e62>
    f188:	e7d1      	b.n	f12e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1e6a>
                trace!("[{:04x}] LD I, nnn", self.pc);
    f18a:	f64f 7090 	movw	r0, #65424	; 0xff90
    f18e:	f2c0 0001 	movt	r0, #1
    f192:	6801      	ldr	r1, [r0, #0]
    f194:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f198:	f100 0212 	add.w	r2, r0, #18
    f19c:	f8cd 2938 	str.w	r2, [sp, #2360]	; 0x938
    f1a0:	f8dd 2938 	ldr.w	r2, [sp, #2360]	; 0x938
    f1a4:	f8cd 2d20 	str.w	r2, [sp, #3360]	; 0xd20
    f1a8:	f249 13cf 	movw	r3, #37327	; 0x91cf
    f1ac:	f2c0 0301 	movt	r3, #1
    f1b0:	4610      	mov	r0, r2
    f1b2:	9184      	str	r1, [sp, #528]	; 0x210
    f1b4:	4619      	mov	r1, r3
    f1b6:	f7fb fb0f 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f1ba:	9083      	str	r0, [sp, #524]	; 0x20c
    f1bc:	9182      	str	r1, [sp, #520]	; 0x208
    f1be:	e7ff      	b.n	f1c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1efc>
    f1c0:	9883      	ldr	r0, [sp, #524]	; 0x20c
    f1c2:	f8cd 0930 	str.w	r0, [sp, #2352]	; 0x930
    f1c6:	9982      	ldr	r1, [sp, #520]	; 0x208
    f1c8:	f8cd 1934 	str.w	r1, [sp, #2356]	; 0x934
    f1cc:	f64f 1238 	movw	r2, #63800	; 0xf938
    f1d0:	f2c0 0201 	movt	r2, #1
    f1d4:	6812      	ldr	r2, [r2, #0]
    f1d6:	466b      	mov	r3, sp
    f1d8:	f04f 0c01 	mov.w	ip, #1
    f1dc:	f8c3 c008 	str.w	ip, [r3, #8]
    f1e0:	605a      	str	r2, [r3, #4]
    f1e2:	f8c3 c000 	str.w	ip, [r3]
    f1e6:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    f1ea:	2202      	movs	r2, #2
    f1ec:	f50d 6313 	add.w	r3, sp, #2352	; 0x930
    f1f0:	9984      	ldr	r1, [sp, #528]	; 0x210
    f1f2:	f007 fc22 	bl	16a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f1f6:	e7ff      	b.n	f1f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1f34>
    f1f8:	f8dd 190c 	ldr.w	r1, [sp, #2316]	; 0x90c
    f1fc:	f64f 70b0 	movw	r0, #65456	; 0xffb0
    f200:	f2c0 0001 	movt	r0, #1
    f204:	6802      	ldr	r2, [r0, #0]
    f206:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    f20a:	f003 f92f 	bl	1246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f20e:	e7ff      	b.n	f210 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1f4c>
    f210:	e7ff      	b.n	f212 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1f4e>
                self.i = nnn;
    f212:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    f216:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f21a:	8208      	strh	r0, [r1, #16]
        match (
    f21c:	f001 bb1f 	b.w	1085e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x359a>
    f220:	2005      	movs	r0, #5
    f222:	f8cd 093c 	str.w	r0, [sp, #2364]	; 0x93c
    f226:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
    f22a:	f2c0 0001 	movt	r0, #1
    f22e:	6801      	ldr	r1, [r0, #0]
    f230:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    f234:	f007 fd3c 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f238:	9081      	str	r0, [sp, #516]	; 0x204
    f23a:	e01f      	b.n	f27c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1fb8>
    f23c:	2001      	movs	r0, #1
    f23e:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    f242:	e015      	b.n	f270 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1fac>
    f244:	2000      	movs	r0, #0
    f246:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    f24a:	e011      	b.n	f270 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1fac>
    f24c:	2000      	movs	r0, #0
    f24e:	f88d 0e53 	strb.w	r0, [sp, #3667]	; 0xe53
    f252:	f89d 1e53 	ldrb.w	r1, [sp, #3667]	; 0xe53
    f256:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f25a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f25e:	f002 f8d6 	bl	1140e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f262:	f8cd 0e54 	str.w	r0, [sp, #3668]	; 0xe54
    f266:	f8dd 0e54 	ldr.w	r0, [sp, #3668]	; 0xe54
    f26a:	f8cd 0944 	str.w	r0, [sp, #2372]	; 0x944
    f26e:	e00a      	b.n	f286 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1fc2>
    f270:	f89d 0943 	ldrb.w	r0, [sp, #2371]	; 0x943
    f274:	07c0      	lsls	r0, r0, #31
    f276:	2800      	cmp	r0, #0
    f278:	d112      	bne.n	f2a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1fdc>
    f27a:	e055      	b.n	f328 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2064>
    f27c:	9881      	ldr	r0, [sp, #516]	; 0x204
    f27e:	07c1      	lsls	r1, r0, #31
    f280:	2900      	cmp	r1, #0
    f282:	d1e3      	bne.n	f24c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1f88>
    f284:	e7de      	b.n	f244 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1f80>
    f286:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    f28a:	f60d 1144 	addw	r1, sp, #2372	; 0x944
    f28e:	f007 fd0f 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f292:	9080      	str	r0, [sp, #512]	; 0x200
    f294:	e7ff      	b.n	f296 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1fd2>
    f296:	9880      	ldr	r0, [sp, #512]	; 0x200
    f298:	07c1      	lsls	r1, r0, #31
    f29a:	2900      	cmp	r1, #0
    f29c:	d1ce      	bne.n	f23c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1f78>
    f29e:	e7d1      	b.n	f244 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x1f80>
                trace!("[{:04x}] JP V0, nnn", self.pc);
    f2a0:	f64f 7050 	movw	r0, #65360	; 0xff50
    f2a4:	f2c0 0001 	movt	r0, #1
    f2a8:	6801      	ldr	r1, [r0, #0]
    f2aa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f2ae:	f100 0212 	add.w	r2, r0, #18
    f2b2:	f8cd 2968 	str.w	r2, [sp, #2408]	; 0x968
    f2b6:	f8dd 2968 	ldr.w	r2, [sp, #2408]	; 0x968
    f2ba:	f8cd 2d1c 	str.w	r2, [sp, #3356]	; 0xd1c
    f2be:	f249 13cf 	movw	r3, #37327	; 0x91cf
    f2c2:	f2c0 0301 	movt	r3, #1
    f2c6:	4610      	mov	r0, r2
    f2c8:	917f      	str	r1, [sp, #508]	; 0x1fc
    f2ca:	4619      	mov	r1, r3
    f2cc:	f7fb fa84 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f2d0:	907e      	str	r0, [sp, #504]	; 0x1f8
    f2d2:	917d      	str	r1, [sp, #500]	; 0x1f4
    f2d4:	e7ff      	b.n	f2d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2012>
    f2d6:	987e      	ldr	r0, [sp, #504]	; 0x1f8
    f2d8:	f8cd 0960 	str.w	r0, [sp, #2400]	; 0x960
    f2dc:	997d      	ldr	r1, [sp, #500]	; 0x1f4
    f2de:	f8cd 1964 	str.w	r1, [sp, #2404]	; 0x964
    f2e2:	f64f 1238 	movw	r2, #63800	; 0xf938
    f2e6:	f2c0 0201 	movt	r2, #1
    f2ea:	6812      	ldr	r2, [r2, #0]
    f2ec:	466b      	mov	r3, sp
    f2ee:	f04f 0c01 	mov.w	ip, #1
    f2f2:	f8c3 c008 	str.w	ip, [r3, #8]
    f2f6:	605a      	str	r2, [r3, #4]
    f2f8:	f8c3 c000 	str.w	ip, [r3]
    f2fc:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    f300:	2202      	movs	r2, #2
    f302:	f50d 6316 	add.w	r3, sp, #2400	; 0x960
    f306:	997f      	ldr	r1, [sp, #508]	; 0x1fc
    f308:	f007 fb97 	bl	16a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f30c:	e7ff      	b.n	f30e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x204a>
    f30e:	f8dd 193c 	ldr.w	r1, [sp, #2364]	; 0x93c
    f312:	f64f 7070 	movw	r0, #65392	; 0xff70
    f316:	f2c0 0001 	movt	r0, #1
    f31a:	6802      	ldr	r2, [r0, #0]
    f31c:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    f320:	f003 f8a4 	bl	1246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f324:	e7ff      	b.n	f326 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2062>
    f326:	e7ff      	b.n	f328 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2064>
                self.jump(nnn.wrapping_add(self.v[0].into()).wrapping_sub(2));
    f328:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f32c:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    f330:	f002 f860 	bl	113f4 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E>
    f334:	907c      	str	r0, [sp, #496]	; 0x1f0
    f336:	e7ff      	b.n	f338 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2074>
    f338:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    f33c:	997c      	ldr	r1, [sp, #496]	; 0x1f0
    f33e:	f007 fc7d 	bl	16c3c <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E>
    f342:	907b      	str	r0, [sp, #492]	; 0x1ec
    f344:	e7ff      	b.n	f346 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2082>
    f346:	2102      	movs	r1, #2
    f348:	987b      	ldr	r0, [sp, #492]	; 0x1ec
    f34a:	f007 fc88 	bl	16c5e <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E>
    f34e:	907a      	str	r0, [sp, #488]	; 0x1e8
    f350:	e7ff      	b.n	f352 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x208e>
    f352:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f356:	997a      	ldr	r1, [sp, #488]	; 0x1e8
    f358:	f001 fd70 	bl	10e3c <_ZN8libchip814Chip8$LT$T$GT$4jump17h6461abfe105496f2E>
    f35c:	e7ff      	b.n	f35e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x209a>
        match (
    f35e:	f001 ba7e 	b.w	1085e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x359a>
    f362:	2005      	movs	r0, #5
    f364:	f8cd 096c 	str.w	r0, [sp, #2412]	; 0x96c
    f368:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
    f36c:	f2c0 0001 	movt	r0, #1
    f370:	6801      	ldr	r1, [r0, #0]
    f372:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    f376:	f007 fc9b 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f37a:	9079      	str	r0, [sp, #484]	; 0x1e4
    f37c:	e01f      	b.n	f3be <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x20fa>
    f37e:	2001      	movs	r0, #1
    f380:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    f384:	e015      	b.n	f3b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x20ee>
    f386:	2000      	movs	r0, #0
    f388:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    f38c:	e011      	b.n	f3b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x20ee>
    f38e:	2000      	movs	r0, #0
    f390:	f88d 0e5b 	strb.w	r0, [sp, #3675]	; 0xe5b
    f394:	f89d 1e5b 	ldrb.w	r1, [sp, #3675]	; 0xe5b
    f398:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f39c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f3a0:	f002 f835 	bl	1140e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f3a4:	f8cd 0e5c 	str.w	r0, [sp, #3676]	; 0xe5c
    f3a8:	f8dd 0e5c 	ldr.w	r0, [sp, #3676]	; 0xe5c
    f3ac:	f8cd 0974 	str.w	r0, [sp, #2420]	; 0x974
    f3b0:	e00a      	b.n	f3c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2104>
    f3b2:	f89d 0973 	ldrb.w	r0, [sp, #2419]	; 0x973
    f3b6:	07c0      	lsls	r0, r0, #31
    f3b8:	2800      	cmp	r0, #0
    f3ba:	d112      	bne.n	f3e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x211e>
    f3bc:	e055      	b.n	f46a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x21a6>
    f3be:	9879      	ldr	r0, [sp, #484]	; 0x1e4
    f3c0:	07c1      	lsls	r1, r0, #31
    f3c2:	2900      	cmp	r1, #0
    f3c4:	d1e3      	bne.n	f38e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x20ca>
    f3c6:	e7de      	b.n	f386 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x20c2>
    f3c8:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    f3cc:	f60d 1174 	addw	r1, sp, #2420	; 0x974
    f3d0:	f007 fc6e 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f3d4:	9078      	str	r0, [sp, #480]	; 0x1e0
    f3d6:	e7ff      	b.n	f3d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2114>
    f3d8:	9878      	ldr	r0, [sp, #480]	; 0x1e0
    f3da:	07c1      	lsls	r1, r0, #31
    f3dc:	2900      	cmp	r1, #0
    f3de:	d1ce      	bne.n	f37e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x20ba>
    f3e0:	e7d1      	b.n	f386 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x20c2>
                trace!("[{:04x}] RND Vx, kk", self.pc);
    f3e2:	f64f 7000 	movw	r0, #65280	; 0xff00
    f3e6:	f2c0 0001 	movt	r0, #1
    f3ea:	6801      	ldr	r1, [r0, #0]
    f3ec:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f3f0:	f100 0212 	add.w	r2, r0, #18
    f3f4:	f8cd 2998 	str.w	r2, [sp, #2456]	; 0x998
    f3f8:	f8dd 2998 	ldr.w	r2, [sp, #2456]	; 0x998
    f3fc:	f8cd 2d18 	str.w	r2, [sp, #3352]	; 0xd18
    f400:	f249 13cf 	movw	r3, #37327	; 0x91cf
    f404:	f2c0 0301 	movt	r3, #1
    f408:	4610      	mov	r0, r2
    f40a:	9177      	str	r1, [sp, #476]	; 0x1dc
    f40c:	4619      	mov	r1, r3
    f40e:	f7fb f9e3 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f412:	9076      	str	r0, [sp, #472]	; 0x1d8
    f414:	9175      	str	r1, [sp, #468]	; 0x1d4
    f416:	e7ff      	b.n	f418 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2154>
    f418:	9876      	ldr	r0, [sp, #472]	; 0x1d8
    f41a:	f8cd 0990 	str.w	r0, [sp, #2448]	; 0x990
    f41e:	9975      	ldr	r1, [sp, #468]	; 0x1d4
    f420:	f8cd 1994 	str.w	r1, [sp, #2452]	; 0x994
    f424:	f64f 1238 	movw	r2, #63800	; 0xf938
    f428:	f2c0 0201 	movt	r2, #1
    f42c:	6812      	ldr	r2, [r2, #0]
    f42e:	466b      	mov	r3, sp
    f430:	f04f 0c01 	mov.w	ip, #1
    f434:	f8c3 c008 	str.w	ip, [r3, #8]
    f438:	605a      	str	r2, [r3, #4]
    f43a:	f8c3 c000 	str.w	ip, [r3]
    f43e:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    f442:	2202      	movs	r2, #2
    f444:	f50d 6319 	add.w	r3, sp, #2448	; 0x990
    f448:	9977      	ldr	r1, [sp, #476]	; 0x1dc
    f44a:	f007 faf6 	bl	16a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f44e:	e7ff      	b.n	f450 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x218c>
    f450:	f8dd 196c 	ldr.w	r1, [sp, #2412]	; 0x96c
    f454:	f64f 7020 	movw	r0, #65312	; 0xff20
    f458:	f2c0 0001 	movt	r0, #1
    f45c:	6802      	ldr	r2, [r0, #0]
    f45e:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    f462:	f003 f803 	bl	1246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f466:	e7ff      	b.n	f468 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x21a4>
    f468:	e7ff      	b.n	f46a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x21a6>
    f46a:	f241 0048 	movw	r0, #4168	; 0x1048
                self.v[x] = self.hw.rand() & kk;
    f46e:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f472:	4408      	add	r0, r1
    f474:	f7fc fc31 	bl	bcda <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17h1f2d81332a8bf311E>
    f478:	9074      	str	r0, [sp, #464]	; 0x1d0
    f47a:	e7ff      	b.n	f47c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x21b8>
    f47c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    f480:	280f      	cmp	r0, #15
    f482:	f201 8375 	bhi.w	10b70 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x38ac>
    f486:	e7ff      	b.n	f488 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x21c4>
    f488:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f48c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f490:	1842      	adds	r2, r0, r1
    f492:	9b74      	ldr	r3, [sp, #464]	; 0x1d0
    f494:	f8dd c45c 	ldr.w	ip, [sp, #1116]	; 0x45c
    f498:	ea03 0e0c 	and.w	lr, r3, ip
    f49c:	f882 e034 	strb.w	lr, [r2, #52]	; 0x34
        match (
    f4a0:	f001 b9dd 	b.w	1085e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x359a>
    f4a4:	2005      	movs	r0, #5
    f4a6:	f8cd 099c 	str.w	r0, [sp, #2460]	; 0x99c
    f4aa:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
    f4ae:	f2c0 0001 	movt	r0, #1
    f4b2:	6801      	ldr	r1, [r0, #0]
    f4b4:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    f4b8:	f007 fbfa 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f4bc:	9073      	str	r0, [sp, #460]	; 0x1cc
    f4be:	e01f      	b.n	f500 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x223c>
    f4c0:	2001      	movs	r0, #1
    f4c2:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    f4c6:	e015      	b.n	f4f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2230>
    f4c8:	2000      	movs	r0, #0
    f4ca:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    f4ce:	e011      	b.n	f4f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2230>
    f4d0:	2000      	movs	r0, #0
    f4d2:	f88d 0e63 	strb.w	r0, [sp, #3683]	; 0xe63
    f4d6:	f89d 1e63 	ldrb.w	r1, [sp, #3683]	; 0xe63
    f4da:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f4de:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f4e2:	f001 ff94 	bl	1140e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f4e6:	f8cd 0e64 	str.w	r0, [sp, #3684]	; 0xe64
    f4ea:	f8dd 0e64 	ldr.w	r0, [sp, #3684]	; 0xe64
    f4ee:	f8cd 09a4 	str.w	r0, [sp, #2468]	; 0x9a4
    f4f2:	e00a      	b.n	f50a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2246>
    f4f4:	f89d 09a3 	ldrb.w	r0, [sp, #2467]	; 0x9a3
    f4f8:	07c0      	lsls	r0, r0, #31
    f4fa:	2800      	cmp	r0, #0
    f4fc:	d112      	bne.n	f524 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2260>
    f4fe:	e055      	b.n	f5ac <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x22e8>
    f500:	9873      	ldr	r0, [sp, #460]	; 0x1cc
    f502:	07c1      	lsls	r1, r0, #31
    f504:	2900      	cmp	r1, #0
    f506:	d1e3      	bne.n	f4d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x220c>
    f508:	e7de      	b.n	f4c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2204>
    f50a:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    f50e:	f60d 11a4 	addw	r1, sp, #2468	; 0x9a4
    f512:	f007 fbcd 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f516:	9072      	str	r0, [sp, #456]	; 0x1c8
    f518:	e7ff      	b.n	f51a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2256>
    f51a:	9872      	ldr	r0, [sp, #456]	; 0x1c8
    f51c:	07c1      	lsls	r1, r0, #31
    f51e:	2900      	cmp	r1, #0
    f520:	d1ce      	bne.n	f4c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x21fc>
    f522:	e7d1      	b.n	f4c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2204>
                trace!("[{:04x}] DRW Vx, Vy, n", self.pc);
    f524:	f64f 50a4 	movw	r0, #64932	; 0xfda4
    f528:	f2c0 0001 	movt	r0, #1
    f52c:	6801      	ldr	r1, [r0, #0]
    f52e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f532:	f100 0212 	add.w	r2, r0, #18
    f536:	f8cd 29c8 	str.w	r2, [sp, #2504]	; 0x9c8
    f53a:	f8dd 29c8 	ldr.w	r2, [sp, #2504]	; 0x9c8
    f53e:	f8cd 2cdc 	str.w	r2, [sp, #3292]	; 0xcdc
    f542:	f249 13cf 	movw	r3, #37327	; 0x91cf
    f546:	f2c0 0301 	movt	r3, #1
    f54a:	4610      	mov	r0, r2
    f54c:	9171      	str	r1, [sp, #452]	; 0x1c4
    f54e:	4619      	mov	r1, r3
    f550:	f7fb f942 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f554:	9070      	str	r0, [sp, #448]	; 0x1c0
    f556:	916f      	str	r1, [sp, #444]	; 0x1bc
    f558:	e7ff      	b.n	f55a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2296>
    f55a:	9870      	ldr	r0, [sp, #448]	; 0x1c0
    f55c:	f8cd 09c0 	str.w	r0, [sp, #2496]	; 0x9c0
    f560:	996f      	ldr	r1, [sp, #444]	; 0x1bc
    f562:	f8cd 19c4 	str.w	r1, [sp, #2500]	; 0x9c4
    f566:	f64f 1238 	movw	r2, #63800	; 0xf938
    f56a:	f2c0 0201 	movt	r2, #1
    f56e:	6812      	ldr	r2, [r2, #0]
    f570:	466b      	mov	r3, sp
    f572:	f04f 0c01 	mov.w	ip, #1
    f576:	f8c3 c008 	str.w	ip, [r3, #8]
    f57a:	605a      	str	r2, [r3, #4]
    f57c:	f8c3 c000 	str.w	ip, [r3]
    f580:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    f584:	2202      	movs	r2, #2
    f586:	f50d 631c 	add.w	r3, sp, #2496	; 0x9c0
    f58a:	9971      	ldr	r1, [sp, #452]	; 0x1c4
    f58c:	f007 fa55 	bl	16a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f590:	e7ff      	b.n	f592 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x22ce>
    f592:	f8dd 199c 	ldr.w	r1, [sp, #2460]	; 0x99c
    f596:	f64f 50c4 	movw	r0, #64964	; 0xfdc4
    f59a:	f2c0 0001 	movt	r0, #1
    f59e:	6802      	ldr	r2, [r0, #0]
    f5a0:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    f5a4:	f002 ff62 	bl	1246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f5a8:	e7ff      	b.n	f5aa <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x22e6>
    f5aa:	e7ff      	b.n	f5ac <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x22e8>
                let basex = self.v[x] as usize;
    f5ac:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    f5b0:	280f      	cmp	r0, #15
    f5b2:	f201 826b 	bhi.w	10a8c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x37c8>
    f5b6:	e7ff      	b.n	f5b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x22f4>
    f5b8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f5bc:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f5c0:	1842      	adds	r2, r0, r1
    f5c2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    f5c6:	4613      	mov	r3, r2
    f5c8:	f8cd 2ce0 	str.w	r2, [sp, #3296]	; 0xce0
                let basey = self.v[y] as usize;
    f5cc:	f8dd 2460 	ldr.w	r2, [sp, #1120]	; 0x460
    f5d0:	2a0f      	cmp	r2, #15
    f5d2:	936e      	str	r3, [sp, #440]	; 0x1b8
    f5d4:	f201 8264 	bhi.w	10aa0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x37dc>
    f5d8:	e7ff      	b.n	f5da <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2316>
    f5da:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f5de:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    f5e2:	1842      	adds	r2, r0, r1
    f5e4:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    f5e8:	4613      	mov	r3, r2
    f5ea:	f8cd 2ce4 	str.w	r2, [sp, #3300]	; 0xce4
    f5ee:	f241 0248 	movw	r2, #4168	; 0x1048
                let (w, h) = self.hw.vram_size();
    f5f2:	4410      	add	r0, r2
    f5f4:	936d      	str	r3, [sp, #436]	; 0x1b4
    f5f6:	f7fc fd45 	bl	c084 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hed066ffbd9b90541E>
    f5fa:	906c      	str	r0, [sp, #432]	; 0x1b0
    f5fc:	916b      	str	r1, [sp, #428]	; 0x1ac
    f5fe:	e7ff      	b.n	f600 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x233c>
    f600:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    f602:	f8cd 0ce8 	str.w	r0, [sp, #3304]	; 0xce8
    f606:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    f608:	f8cd 1cec 	str.w	r1, [sp, #3308]	; 0xcec
    f60c:	2200      	movs	r2, #0
                self.v[0xf] = 0;
    f60e:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    f612:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                for y in 0..n {
    f616:	f8cd 29cc 	str.w	r2, [sp, #2508]	; 0x9cc
    f61a:	f8dd 2470 	ldr.w	r2, [sp, #1136]	; 0x470
    f61e:	f8cd 29d0 	str.w	r2, [sp, #2512]	; 0x9d0
    f622:	f8dd 09cc 	ldr.w	r0, [sp, #2508]	; 0x9cc
    f626:	f8dd 19d0 	ldr.w	r1, [sp, #2512]	; 0x9d0
    f62a:	f002 fcab 	bl	11f84 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    f62e:	906a      	str	r0, [sp, #424]	; 0x1a8
    f630:	9169      	str	r1, [sp, #420]	; 0x1a4
    f632:	e7ff      	b.n	f634 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2370>
    f634:	986a      	ldr	r0, [sp, #424]	; 0x1a8
    f636:	f8cd 09d4 	str.w	r0, [sp, #2516]	; 0x9d4
    f63a:	9969      	ldr	r1, [sp, #420]	; 0x1a4
    f63c:	f8cd 19d8 	str.w	r1, [sp, #2520]	; 0x9d8
    f640:	e7ff      	b.n	f642 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x237e>
    f642:	f60d 10d4 	addw	r0, sp, #2516	; 0x9d4
    f646:	f002 fc12 	bl	11e6e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    f64a:	f8cd 19e0 	str.w	r1, [sp, #2528]	; 0x9e0
    f64e:	f8cd 09dc 	str.w	r0, [sp, #2524]	; 0x9dc
    f652:	e7ff      	b.n	f654 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2390>
    f654:	f8dd 09dc 	ldr.w	r0, [sp, #2524]	; 0x9dc
    f658:	2800      	cmp	r0, #0
    f65a:	d001      	beq.n	f660 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x239c>
    f65c:	e7ff      	b.n	f65e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x239a>
    f65e:	e002      	b.n	f666 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x23a2>
        match (
    f660:	f001 b8fd 	b.w	1085e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x359a>
                for y in 0..n {
    f664:	defe      	udf	#254	; 0xfe
    f666:	f8dd 09e0 	ldr.w	r0, [sp, #2528]	; 0x9e0
    f66a:	f8cd 0cf0 	str.w	r0, [sp, #3312]	; 0xcf0
    f66e:	f8cd 0cf4 	str.w	r0, [sp, #3316]	; 0xcf4
    f672:	f8cd 0cf8 	str.w	r0, [sp, #3320]	; 0xcf8
                    let b = self.mem[self.i as usize + y];
    f676:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f67a:	8a0a      	ldrh	r2, [r1, #16]
    f67c:	1813      	adds	r3, r2, r0
    f67e:	469c      	mov	ip, r3
    f680:	4293      	cmp	r3, r2
    f682:	9068      	str	r0, [sp, #416]	; 0x1a0
    f684:	f8cd c19c 	str.w	ip, [sp, #412]	; 0x19c
    f688:	f0c1 8214 	bcc.w	10ab4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x37f0>
    f68c:	e7ff      	b.n	f68e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x23ca>
    f68e:	2000      	movs	r0, #0
    f690:	9967      	ldr	r1, [sp, #412]	; 0x19c
    f692:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    f696:	f041 8219 	bne.w	10acc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3808>
    f69a:	e7ff      	b.n	f69c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x23d8>
    f69c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f6a0:	9967      	ldr	r1, [sp, #412]	; 0x19c
    f6a2:	1842      	adds	r2, r0, r1
    f6a4:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    f6a8:	4613      	mov	r3, r2
    f6aa:	f88d 2cff 	strb.w	r2, [sp, #3327]	; 0xcff
                    let vramy = (y + basey) % h;
    f6ae:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
    f6b0:	f8dd c1b4 	ldr.w	ip, [sp, #436]	; 0x1b4
    f6b4:	eb02 0e0c 	add.w	lr, r2, ip
    f6b8:	4674      	mov	r4, lr
    f6ba:	4596      	cmp	lr, r2
    f6bc:	9366      	str	r3, [sp, #408]	; 0x198
    f6be:	9465      	str	r4, [sp, #404]	; 0x194
    f6c0:	f0c1 820e 	bcc.w	10ae0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x381c>
    f6c4:	e7ff      	b.n	f6c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2402>
    f6c6:	986b      	ldr	r0, [sp, #428]	; 0x1ac
    f6c8:	2800      	cmp	r0, #0
    f6ca:	f001 8215 	beq.w	10af8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3834>
    f6ce:	e7ff      	b.n	f6d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x240c>
    f6d0:	9865      	ldr	r0, [sp, #404]	; 0x194
    f6d2:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    f6d4:	fbb0 f2f1 	udiv	r2, r0, r1
    f6d8:	fb02 0211 	mls	r2, r2, r1, r0
    f6dc:	4613      	mov	r3, r2
    f6de:	f8cd 2d00 	str.w	r2, [sp, #3328]	; 0xd00
    f6e2:	2200      	movs	r2, #0
                    for x in 0..8 {
    f6e4:	f8cd 29e4 	str.w	r2, [sp, #2532]	; 0x9e4
    f6e8:	2208      	movs	r2, #8
    f6ea:	f8cd 29e8 	str.w	r2, [sp, #2536]	; 0x9e8
    f6ee:	f8dd 09e4 	ldr.w	r0, [sp, #2532]	; 0x9e4
    f6f2:	f8dd 19e8 	ldr.w	r1, [sp, #2536]	; 0x9e8
    f6f6:	9364      	str	r3, [sp, #400]	; 0x190
    f6f8:	f002 fc44 	bl	11f84 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    f6fc:	9063      	str	r0, [sp, #396]	; 0x18c
    f6fe:	9162      	str	r1, [sp, #392]	; 0x188
    f700:	e7ff      	b.n	f702 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x243e>
    f702:	9863      	ldr	r0, [sp, #396]	; 0x18c
    f704:	f8cd 09ec 	str.w	r0, [sp, #2540]	; 0x9ec
    f708:	9962      	ldr	r1, [sp, #392]	; 0x188
    f70a:	f8cd 19f0 	str.w	r1, [sp, #2544]	; 0x9f0
    f70e:	e7ff      	b.n	f710 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x244c>
    f710:	f60d 10ec 	addw	r0, sp, #2540	; 0x9ec
    f714:	f002 fbab 	bl	11e6e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    f718:	f8cd 19f8 	str.w	r1, [sp, #2552]	; 0x9f8
    f71c:	f8cd 09f4 	str.w	r0, [sp, #2548]	; 0x9f4
    f720:	e7ff      	b.n	f722 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x245e>
    f722:	f8dd 09f4 	ldr.w	r0, [sp, #2548]	; 0x9f4
    f726:	2800      	cmp	r0, #0
    f728:	d001      	beq.n	f72e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x246a>
    f72a:	e7ff      	b.n	f72c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2468>
    f72c:	e001      	b.n	f732 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x246e>
                for y in 0..n {
    f72e:	e788      	b.n	f642 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x237e>
                    for x in 0..8 {
    f730:	defe      	udf	#254	; 0xfe
    f732:	f8dd 09f8 	ldr.w	r0, [sp, #2552]	; 0x9f8
    f736:	f8cd 0d04 	str.w	r0, [sp, #3332]	; 0xd04
    f73a:	f8cd 0d08 	str.w	r0, [sp, #3336]	; 0xd08
    f73e:	f8cd 0d0c 	str.w	r0, [sp, #3340]	; 0xd0c
                        let vramx = (x + basex) % w;
    f742:	996e      	ldr	r1, [sp, #440]	; 0x1b8
    f744:	1842      	adds	r2, r0, r1
    f746:	4613      	mov	r3, r2
    f748:	4282      	cmp	r2, r0
    f74a:	9061      	str	r0, [sp, #388]	; 0x184
    f74c:	9360      	str	r3, [sp, #384]	; 0x180
    f74e:	f0c1 81df 	bcc.w	10b10 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x384c>
    f752:	e7ff      	b.n	f754 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2490>
    f754:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    f756:	2800      	cmp	r0, #0
    f758:	f001 81e6 	beq.w	10b28 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3864>
    f75c:	e7ff      	b.n	f75e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x249a>
    f75e:	9860      	ldr	r0, [sp, #384]	; 0x180
    f760:	996c      	ldr	r1, [sp, #432]	; 0x1b0
    f762:	fbb0 f2f1 	udiv	r2, r0, r1
    f766:	fb02 0211 	mls	r2, r2, r1, r0
    f76a:	4613      	mov	r3, r2
    f76c:	f8cd 2d10 	str.w	r2, [sp, #3344]	; 0xd10
                        let src = (b & 1 << (7 - x)) > 0;
    f770:	9a61      	ldr	r2, [sp, #388]	; 0x184
    f772:	f1c2 0c07 	rsb	ip, r2, #7
    f776:	f04f 0e07 	mov.w	lr, #7
    f77a:	4596      	cmp	lr, r2
    f77c:	935f      	str	r3, [sp, #380]	; 0x17c
    f77e:	f8cd c178 	str.w	ip, [sp, #376]	; 0x178
    f782:	f0c1 81dd 	bcc.w	10b40 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x387c>
    f786:	e7ff      	b.n	f788 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x24c4>
    f788:	985e      	ldr	r0, [sp, #376]	; 0x178
    f78a:	f000 0107 	and.w	r1, r0, #7
    f78e:	2201      	movs	r2, #1
    f790:	fa02 f101 	lsl.w	r1, r2, r1
    f794:	08c2      	lsrs	r2, r0, #3
    f796:	2a00      	cmp	r2, #0
    f798:	915d      	str	r1, [sp, #372]	; 0x174
    f79a:	f041 81dd 	bne.w	10b58 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3894>
    f79e:	e7ff      	b.n	f7a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x24dc>
    f7a0:	9866      	ldr	r0, [sp, #408]	; 0x198
    f7a2:	995d      	ldr	r1, [sp, #372]	; 0x174
    f7a4:	ea00 0201 	and.w	r2, r0, r1
    f7a8:	b2d2      	uxtb	r2, r2
    f7aa:	2a00      	cmp	r2, #0
    f7ac:	bf18      	it	ne
    f7ae:	2201      	movne	r2, #1
    f7b0:	4613      	mov	r3, r2
    f7b2:	f88d 2d16 	strb.w	r2, [sp, #3350]	; 0xd16
    f7b6:	f241 0248 	movw	r2, #4168	; 0x1048
                        let dst = self.hw.vram_get(vramx, vramy);
    f7ba:	f8dd c490 	ldr.w	ip, [sp, #1168]	; 0x490
    f7be:	eb0c 0002 	add.w	r0, ip, r2
    f7c2:	995f      	ldr	r1, [sp, #380]	; 0x17c
    f7c4:	9a64      	ldr	r2, [sp, #400]	; 0x190
    f7c6:	935c      	str	r3, [sp, #368]	; 0x170
    f7c8:	f7fc fba5 	bl	bf16 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7d82f7c01359a92aE>
    f7cc:	4601      	mov	r1, r0
    f7ce:	f88d 0d17 	strb.w	r0, [sp, #3351]	; 0xd17
    f7d2:	915b      	str	r1, [sp, #364]	; 0x16c
    f7d4:	e7ff      	b.n	f7d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2512>
                        self.v[0xf] |= (src && dst) as u8;
    f7d6:	985c      	ldr	r0, [sp, #368]	; 0x170
    f7d8:	07c1      	lsls	r1, r0, #31
    f7da:	2900      	cmp	r1, #0
    f7dc:	d108      	bne.n	f7f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x252c>
    f7de:	e003      	b.n	f7e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2524>
    f7e0:	2001      	movs	r0, #1
    f7e2:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    f7e6:	e008      	b.n	f7fa <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2536>
    f7e8:	2000      	movs	r0, #0
    f7ea:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    f7ee:	e004      	b.n	f7fa <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2536>
    f7f0:	985b      	ldr	r0, [sp, #364]	; 0x16c
    f7f2:	07c1      	lsls	r1, r0, #31
    f7f4:	2900      	cmp	r1, #0
    f7f6:	d1f3      	bne.n	f7e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x251c>
    f7f8:	e7f6      	b.n	f7e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2524>
    f7fa:	f89d 09ff 	ldrb.w	r0, [sp, #2559]	; 0x9ff
    f7fe:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f802:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    f806:	4310      	orrs	r0, r2
    f808:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    f80c:	f241 0048 	movw	r0, #4168	; 0x1048
                        self.hw.vram_set(vramx, vramy, src ^ dst);
    f810:	4408      	add	r0, r1
    f812:	9a5c      	ldr	r2, [sp, #368]	; 0x170
    f814:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
    f816:	ea82 0c03 	eor.w	ip, r2, r3
    f81a:	f00c 0301 	and.w	r3, ip, #1
    f81e:	995f      	ldr	r1, [sp, #380]	; 0x17c
    f820:	9a64      	ldr	r2, [sp, #400]	; 0x190
    f822:	f7fc fa7d 	bl	bd20 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h03d6e24c16f5c645E>
    f826:	e7ff      	b.n	f828 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2564>
                    for x in 0..8 {
    f828:	e772      	b.n	f710 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x244c>
    f82a:	2005      	movs	r0, #5
    f82c:	f8cd 0a00 	str.w	r0, [sp, #2560]	; 0xa00
    f830:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
    f834:	f2c0 0001 	movt	r0, #1
    f838:	6801      	ldr	r1, [r0, #0]
    f83a:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    f83e:	f007 fa37 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f842:	905a      	str	r0, [sp, #360]	; 0x168
    f844:	e01f      	b.n	f886 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x25c2>
    f846:	2001      	movs	r0, #1
    f848:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    f84c:	e015      	b.n	f87a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x25b6>
    f84e:	2000      	movs	r0, #0
    f850:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    f854:	e011      	b.n	f87a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x25b6>
    f856:	2000      	movs	r0, #0
    f858:	f88d 0e6b 	strb.w	r0, [sp, #3691]	; 0xe6b
    f85c:	f89d 1e6b 	ldrb.w	r1, [sp, #3691]	; 0xe6b
    f860:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f864:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f868:	f001 fdd1 	bl	1140e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f86c:	f8cd 0e6c 	str.w	r0, [sp, #3692]	; 0xe6c
    f870:	f8dd 0e6c 	ldr.w	r0, [sp, #3692]	; 0xe6c
    f874:	f8cd 0a08 	str.w	r0, [sp, #2568]	; 0xa08
    f878:	e00a      	b.n	f890 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x25cc>
    f87a:	f89d 0a07 	ldrb.w	r0, [sp, #2567]	; 0xa07
    f87e:	07c0      	lsls	r0, r0, #31
    f880:	2800      	cmp	r0, #0
    f882:	d112      	bne.n	f8aa <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x25e6>
    f884:	e055      	b.n	f932 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x266e>
    f886:	985a      	ldr	r0, [sp, #360]	; 0x168
    f888:	07c1      	lsls	r1, r0, #31
    f88a:	2900      	cmp	r1, #0
    f88c:	d1e3      	bne.n	f856 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2592>
    f88e:	e7de      	b.n	f84e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x258a>
    f890:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    f894:	f60d 2108 	addw	r1, sp, #2568	; 0xa08
    f898:	f007 fa0a 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f89c:	9059      	str	r0, [sp, #356]	; 0x164
    f89e:	e7ff      	b.n	f8a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x25dc>
    f8a0:	9859      	ldr	r0, [sp, #356]	; 0x164
    f8a2:	07c1      	lsls	r1, r0, #31
    f8a4:	2900      	cmp	r1, #0
    f8a6:	d1ce      	bne.n	f846 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2582>
    f8a8:	e7d1      	b.n	f84e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x258a>
                trace!("[{:04x}] SKP Vx", self.pc);
    f8aa:	f64f 5050 	movw	r0, #64848	; 0xfd50
    f8ae:	f2c0 0001 	movt	r0, #1
    f8b2:	6801      	ldr	r1, [r0, #0]
    f8b4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f8b8:	f100 0212 	add.w	r2, r0, #18
    f8bc:	f8cd 2a2c 	str.w	r2, [sp, #2604]	; 0xa2c
    f8c0:	f8dd 2a2c 	ldr.w	r2, [sp, #2604]	; 0xa2c
    f8c4:	f8cd 2cd8 	str.w	r2, [sp, #3288]	; 0xcd8
    f8c8:	f249 13cf 	movw	r3, #37327	; 0x91cf
    f8cc:	f2c0 0301 	movt	r3, #1
    f8d0:	4610      	mov	r0, r2
    f8d2:	9158      	str	r1, [sp, #352]	; 0x160
    f8d4:	4619      	mov	r1, r3
    f8d6:	f7fa ff7f 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f8da:	9057      	str	r0, [sp, #348]	; 0x15c
    f8dc:	9156      	str	r1, [sp, #344]	; 0x158
    f8de:	e7ff      	b.n	f8e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x261c>
    f8e0:	9857      	ldr	r0, [sp, #348]	; 0x15c
    f8e2:	f8cd 0a24 	str.w	r0, [sp, #2596]	; 0xa24
    f8e6:	9956      	ldr	r1, [sp, #344]	; 0x158
    f8e8:	f8cd 1a28 	str.w	r1, [sp, #2600]	; 0xa28
    f8ec:	f64f 1238 	movw	r2, #63800	; 0xf938
    f8f0:	f2c0 0201 	movt	r2, #1
    f8f4:	6812      	ldr	r2, [r2, #0]
    f8f6:	466b      	mov	r3, sp
    f8f8:	f04f 0c01 	mov.w	ip, #1
    f8fc:	f8c3 c008 	str.w	ip, [r3, #8]
    f900:	605a      	str	r2, [r3, #4]
    f902:	f8c3 c000 	str.w	ip, [r3]
    f906:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    f90a:	2202      	movs	r2, #2
    f90c:	f60d 2324 	addw	r3, sp, #2596	; 0xa24
    f910:	9958      	ldr	r1, [sp, #352]	; 0x160
    f912:	f007 f892 	bl	16a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f916:	e7ff      	b.n	f918 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2654>
    f918:	f8dd 1a00 	ldr.w	r1, [sp, #2560]	; 0xa00
    f91c:	f64f 5070 	movw	r0, #64880	; 0xfd70
    f920:	f2c0 0001 	movt	r0, #1
    f924:	6802      	ldr	r2, [r0, #0]
    f926:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    f92a:	f002 fd9f 	bl	1246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f92e:	e7ff      	b.n	f930 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x266c>
    f930:	e7ff      	b.n	f932 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x266e>
    f932:	f241 0048 	movw	r0, #4168	; 0x1048
                if self.hw.key(self.v[x]) {
    f936:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f93a:	4408      	add	r0, r1
    f93c:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    f940:	2a0f      	cmp	r2, #15
    f942:	9055      	str	r0, [sp, #340]	; 0x154
    f944:	f201 8098 	bhi.w	10a78 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x37b4>
    f948:	e7ff      	b.n	f94a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2686>
    f94a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f94e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f952:	1842      	adds	r2, r0, r1
    f954:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    f958:	9855      	ldr	r0, [sp, #340]	; 0x154
    f95a:	f7fc f9c3 	bl	bce4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd1688355d8a270c9E>
    f95e:	9054      	str	r0, [sp, #336]	; 0x150
    f960:	e7ff      	b.n	f962 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x269e>
    f962:	9854      	ldr	r0, [sp, #336]	; 0x150
    f964:	07c1      	lsls	r1, r0, #31
    f966:	2900      	cmp	r1, #0
    f968:	d006      	beq.n	f978 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x26b4>
    f96a:	e7ff      	b.n	f96c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x26a8>
                    self.next();
    f96c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f970:	f001 faa7 	bl	10ec2 <_ZN8libchip814Chip8$LT$T$GT$4next17hcff432de15657423E>
    f974:	e7ff      	b.n	f976 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x26b2>
                if self.hw.key(self.v[x]) {
    f976:	e7ff      	b.n	f978 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x26b4>
        match (
    f978:	f000 bf71 	b.w	1085e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x359a>
    f97c:	2005      	movs	r0, #5
    f97e:	f8cd 0a30 	str.w	r0, [sp, #2608]	; 0xa30
    f982:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
    f986:	f2c0 0001 	movt	r0, #1
    f98a:	6801      	ldr	r1, [r0, #0]
    f98c:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    f990:	f007 f98e 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f994:	9053      	str	r0, [sp, #332]	; 0x14c
    f996:	e01f      	b.n	f9d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2714>
    f998:	2001      	movs	r0, #1
    f99a:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    f99e:	e015      	b.n	f9cc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2708>
    f9a0:	2000      	movs	r0, #0
    f9a2:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    f9a6:	e011      	b.n	f9cc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2708>
    f9a8:	2000      	movs	r0, #0
    f9aa:	f88d 0e73 	strb.w	r0, [sp, #3699]	; 0xe73
    f9ae:	f89d 1e73 	ldrb.w	r1, [sp, #3699]	; 0xe73
    f9b2:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f9b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f9ba:	f001 fd28 	bl	1140e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f9be:	f8cd 0e74 	str.w	r0, [sp, #3700]	; 0xe74
    f9c2:	f8dd 0e74 	ldr.w	r0, [sp, #3700]	; 0xe74
    f9c6:	f8cd 0a38 	str.w	r0, [sp, #2616]	; 0xa38
    f9ca:	e00a      	b.n	f9e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x271e>
    f9cc:	f89d 0a37 	ldrb.w	r0, [sp, #2615]	; 0xa37
    f9d0:	07c0      	lsls	r0, r0, #31
    f9d2:	2800      	cmp	r0, #0
    f9d4:	d112      	bne.n	f9fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2738>
    f9d6:	e055      	b.n	fa84 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x27c0>
    f9d8:	9853      	ldr	r0, [sp, #332]	; 0x14c
    f9da:	07c1      	lsls	r1, r0, #31
    f9dc:	2900      	cmp	r1, #0
    f9de:	d1e3      	bne.n	f9a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x26e4>
    f9e0:	e7de      	b.n	f9a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x26dc>
    f9e2:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    f9e6:	f60d 2138 	addw	r1, sp, #2616	; 0xa38
    f9ea:	f007 f961 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f9ee:	9052      	str	r0, [sp, #328]	; 0x148
    f9f0:	e7ff      	b.n	f9f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x272e>
    f9f2:	9852      	ldr	r0, [sp, #328]	; 0x148
    f9f4:	07c1      	lsls	r1, r0, #31
    f9f6:	2900      	cmp	r1, #0
    f9f8:	d1ce      	bne.n	f998 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x26d4>
    f9fa:	e7d1      	b.n	f9a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x26dc>
                trace!("[{:04x}] SKNP Vx", self.pc);
    f9fc:	f64f 500c 	movw	r0, #64780	; 0xfd0c
    fa00:	f2c0 0001 	movt	r0, #1
    fa04:	6801      	ldr	r1, [r0, #0]
    fa06:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fa0a:	f100 0212 	add.w	r2, r0, #18
    fa0e:	f8cd 2a5c 	str.w	r2, [sp, #2652]	; 0xa5c
    fa12:	f8dd 2a5c 	ldr.w	r2, [sp, #2652]	; 0xa5c
    fa16:	f8cd 2cd4 	str.w	r2, [sp, #3284]	; 0xcd4
    fa1a:	f249 13cf 	movw	r3, #37327	; 0x91cf
    fa1e:	f2c0 0301 	movt	r3, #1
    fa22:	4610      	mov	r0, r2
    fa24:	9151      	str	r1, [sp, #324]	; 0x144
    fa26:	4619      	mov	r1, r3
    fa28:	f7fa fed6 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    fa2c:	9050      	str	r0, [sp, #320]	; 0x140
    fa2e:	914f      	str	r1, [sp, #316]	; 0x13c
    fa30:	e7ff      	b.n	fa32 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x276e>
    fa32:	9850      	ldr	r0, [sp, #320]	; 0x140
    fa34:	f8cd 0a54 	str.w	r0, [sp, #2644]	; 0xa54
    fa38:	994f      	ldr	r1, [sp, #316]	; 0x13c
    fa3a:	f8cd 1a58 	str.w	r1, [sp, #2648]	; 0xa58
    fa3e:	f64f 1238 	movw	r2, #63800	; 0xf938
    fa42:	f2c0 0201 	movt	r2, #1
    fa46:	6812      	ldr	r2, [r2, #0]
    fa48:	466b      	mov	r3, sp
    fa4a:	f04f 0c01 	mov.w	ip, #1
    fa4e:	f8c3 c008 	str.w	ip, [r3, #8]
    fa52:	605a      	str	r2, [r3, #4]
    fa54:	f8c3 c000 	str.w	ip, [r3]
    fa58:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    fa5c:	2202      	movs	r2, #2
    fa5e:	f60d 2354 	addw	r3, sp, #2644	; 0xa54
    fa62:	9951      	ldr	r1, [sp, #324]	; 0x144
    fa64:	f006 ffe9 	bl	16a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    fa68:	e7ff      	b.n	fa6a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x27a6>
    fa6a:	f8dd 1a30 	ldr.w	r1, [sp, #2608]	; 0xa30
    fa6e:	f64f 502c 	movw	r0, #64812	; 0xfd2c
    fa72:	f2c0 0001 	movt	r0, #1
    fa76:	6802      	ldr	r2, [r0, #0]
    fa78:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    fa7c:	f002 fcf6 	bl	1246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    fa80:	e7ff      	b.n	fa82 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x27be>
    fa82:	e7ff      	b.n	fa84 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x27c0>
    fa84:	f241 0048 	movw	r0, #4168	; 0x1048
                if !self.hw.key(self.v[x]) {
    fa88:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    fa8c:	4408      	add	r0, r1
    fa8e:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    fa92:	2a0f      	cmp	r2, #15
    fa94:	904e      	str	r0, [sp, #312]	; 0x138
    fa96:	f200 87e5 	bhi.w	10a64 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x37a0>
    fa9a:	e7ff      	b.n	fa9c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x27d8>
    fa9c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    faa0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    faa4:	1842      	adds	r2, r0, r1
    faa6:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    faaa:	984e      	ldr	r0, [sp, #312]	; 0x138
    faac:	f7fc f91a 	bl	bce4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd1688355d8a270c9E>
    fab0:	904d      	str	r0, [sp, #308]	; 0x134
    fab2:	e7ff      	b.n	fab4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x27f0>
    fab4:	984d      	ldr	r0, [sp, #308]	; 0x134
    fab6:	07c1      	lsls	r1, r0, #31
    fab8:	2900      	cmp	r1, #0
    faba:	d106      	bne.n	faca <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2806>
    fabc:	e7ff      	b.n	fabe <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x27fa>
                    self.next();
    fabe:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fac2:	f001 f9fe 	bl	10ec2 <_ZN8libchip814Chip8$LT$T$GT$4next17hcff432de15657423E>
    fac6:	e7ff      	b.n	fac8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2804>
                if !self.hw.key(self.v[x]) {
    fac8:	e7ff      	b.n	faca <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2806>
        match (
    faca:	f000 bec8 	b.w	1085e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x359a>
    face:	2005      	movs	r0, #5
    fad0:	f8cd 0a60 	str.w	r0, [sp, #2656]	; 0xa60
    fad4:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
    fad8:	f2c0 0001 	movt	r0, #1
    fadc:	6801      	ldr	r1, [r0, #0]
    fade:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    fae2:	f007 f8e5 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fae6:	904c      	str	r0, [sp, #304]	; 0x130
    fae8:	e01f      	b.n	fb2a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2866>
    faea:	2001      	movs	r0, #1
    faec:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    faf0:	e015      	b.n	fb1e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x285a>
    faf2:	2000      	movs	r0, #0
    faf4:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    faf8:	e011      	b.n	fb1e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x285a>
    fafa:	2000      	movs	r0, #0
    fafc:	f88d 0e7b 	strb.w	r0, [sp, #3707]	; 0xe7b
    fb00:	f89d 1e7b 	ldrb.w	r1, [sp, #3707]	; 0xe7b
    fb04:	f644 206c 	movw	r0, #19052	; 0x4a6c
    fb08:	f2c2 0000 	movt	r0, #8192	; 0x2000
    fb0c:	f001 fc7f 	bl	1140e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    fb10:	f8cd 0e7c 	str.w	r0, [sp, #3708]	; 0xe7c
    fb14:	f8dd 0e7c 	ldr.w	r0, [sp, #3708]	; 0xe7c
    fb18:	f8cd 0a68 	str.w	r0, [sp, #2664]	; 0xa68
    fb1c:	e00a      	b.n	fb34 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2870>
    fb1e:	f89d 0a67 	ldrb.w	r0, [sp, #2663]	; 0xa67
    fb22:	07c0      	lsls	r0, r0, #31
    fb24:	2800      	cmp	r0, #0
    fb26:	d112      	bne.n	fb4e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x288a>
    fb28:	e055      	b.n	fbd6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2912>
    fb2a:	984c      	ldr	r0, [sp, #304]	; 0x130
    fb2c:	07c1      	lsls	r1, r0, #31
    fb2e:	2900      	cmp	r1, #0
    fb30:	d1e3      	bne.n	fafa <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2836>
    fb32:	e7de      	b.n	faf2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x282e>
    fb34:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    fb38:	f60d 2168 	addw	r1, sp, #2664	; 0xa68
    fb3c:	f007 f8b8 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fb40:	904b      	str	r0, [sp, #300]	; 0x12c
    fb42:	e7ff      	b.n	fb44 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2880>
    fb44:	984b      	ldr	r0, [sp, #300]	; 0x12c
    fb46:	07c1      	lsls	r1, r0, #31
    fb48:	2900      	cmp	r1, #0
    fb4a:	d1ce      	bne.n	faea <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2826>
    fb4c:	e7d1      	b.n	faf2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x282e>
                trace!("[{:04x}] LD Vx, DT", self.pc);
    fb4e:	f64f 40bc 	movw	r0, #64700	; 0xfcbc
    fb52:	f2c0 0001 	movt	r0, #1
    fb56:	6801      	ldr	r1, [r0, #0]
    fb58:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fb5c:	f100 0212 	add.w	r2, r0, #18
    fb60:	f8cd 2a8c 	str.w	r2, [sp, #2700]	; 0xa8c
    fb64:	f8dd 2a8c 	ldr.w	r2, [sp, #2700]	; 0xa8c
    fb68:	f8cd 2cd0 	str.w	r2, [sp, #3280]	; 0xcd0
    fb6c:	f249 13cf 	movw	r3, #37327	; 0x91cf
    fb70:	f2c0 0301 	movt	r3, #1
    fb74:	4610      	mov	r0, r2
    fb76:	914a      	str	r1, [sp, #296]	; 0x128
    fb78:	4619      	mov	r1, r3
    fb7a:	f7fa fe2d 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    fb7e:	9049      	str	r0, [sp, #292]	; 0x124
    fb80:	9148      	str	r1, [sp, #288]	; 0x120
    fb82:	e7ff      	b.n	fb84 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x28c0>
    fb84:	9849      	ldr	r0, [sp, #292]	; 0x124
    fb86:	f8cd 0a84 	str.w	r0, [sp, #2692]	; 0xa84
    fb8a:	9948      	ldr	r1, [sp, #288]	; 0x120
    fb8c:	f8cd 1a88 	str.w	r1, [sp, #2696]	; 0xa88
    fb90:	f64f 1238 	movw	r2, #63800	; 0xf938
    fb94:	f2c0 0201 	movt	r2, #1
    fb98:	6812      	ldr	r2, [r2, #0]
    fb9a:	466b      	mov	r3, sp
    fb9c:	f04f 0c01 	mov.w	ip, #1
    fba0:	f8c3 c008 	str.w	ip, [r3, #8]
    fba4:	605a      	str	r2, [r3, #4]
    fba6:	f8c3 c000 	str.w	ip, [r3]
    fbaa:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    fbae:	2202      	movs	r2, #2
    fbb0:	f60d 2384 	addw	r3, sp, #2692	; 0xa84
    fbb4:	994a      	ldr	r1, [sp, #296]	; 0x128
    fbb6:	f006 ff40 	bl	16a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    fbba:	e7ff      	b.n	fbbc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x28f8>
    fbbc:	f8dd 1a60 	ldr.w	r1, [sp, #2656]	; 0xa60
    fbc0:	f64f 40dc 	movw	r0, #64732	; 0xfcdc
    fbc4:	f2c0 0001 	movt	r0, #1
    fbc8:	6802      	ldr	r2, [r0, #0]
    fbca:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    fbce:	f002 fc4d 	bl	1246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    fbd2:	e7ff      	b.n	fbd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2910>
    fbd4:	e7ff      	b.n	fbd6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2912>
                self.v[x] = self.dt;
    fbd6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fbda:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    fbde:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    fbe2:	2a0f      	cmp	r2, #15
    fbe4:	9147      	str	r1, [sp, #284]	; 0x11c
    fbe6:	f200 8733 	bhi.w	10a50 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x378c>
    fbea:	e7ff      	b.n	fbec <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2928>
    fbec:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fbf0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    fbf4:	1842      	adds	r2, r0, r1
    fbf6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    fbf8:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    fbfc:	f000 be2f 	b.w	1085e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x359a>
    fc00:	2005      	movs	r0, #5
    fc02:	f8cd 0a90 	str.w	r0, [sp, #2704]	; 0xa90
    fc06:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
    fc0a:	f2c0 0001 	movt	r0, #1
    fc0e:	6801      	ldr	r1, [r0, #0]
    fc10:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    fc14:	f007 f84c 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fc18:	9046      	str	r0, [sp, #280]	; 0x118
    fc1a:	e01f      	b.n	fc5c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2998>
    fc1c:	2001      	movs	r0, #1
    fc1e:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    fc22:	e015      	b.n	fc50 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x298c>
    fc24:	2000      	movs	r0, #0
    fc26:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    fc2a:	e011      	b.n	fc50 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x298c>
    fc2c:	2000      	movs	r0, #0
    fc2e:	f88d 0e83 	strb.w	r0, [sp, #3715]	; 0xe83
    fc32:	f89d 1e83 	ldrb.w	r1, [sp, #3715]	; 0xe83
    fc36:	f644 206c 	movw	r0, #19052	; 0x4a6c
    fc3a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    fc3e:	f001 fbe6 	bl	1140e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    fc42:	f8cd 0e84 	str.w	r0, [sp, #3716]	; 0xe84
    fc46:	f8dd 0e84 	ldr.w	r0, [sp, #3716]	; 0xe84
    fc4a:	f8cd 0a98 	str.w	r0, [sp, #2712]	; 0xa98
    fc4e:	e00a      	b.n	fc66 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x29a2>
    fc50:	f89d 0a97 	ldrb.w	r0, [sp, #2711]	; 0xa97
    fc54:	07c0      	lsls	r0, r0, #31
    fc56:	2800      	cmp	r0, #0
    fc58:	d112      	bne.n	fc80 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x29bc>
    fc5a:	e055      	b.n	fd08 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2a44>
    fc5c:	9846      	ldr	r0, [sp, #280]	; 0x118
    fc5e:	07c1      	lsls	r1, r0, #31
    fc60:	2900      	cmp	r1, #0
    fc62:	d1e3      	bne.n	fc2c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2968>
    fc64:	e7de      	b.n	fc24 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2960>
    fc66:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    fc6a:	f60d 2198 	addw	r1, sp, #2712	; 0xa98
    fc6e:	f007 f81f 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fc72:	9045      	str	r0, [sp, #276]	; 0x114
    fc74:	e7ff      	b.n	fc76 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x29b2>
    fc76:	9845      	ldr	r0, [sp, #276]	; 0x114
    fc78:	07c1      	lsls	r1, r0, #31
    fc7a:	2900      	cmp	r1, #0
    fc7c:	d1ce      	bne.n	fc1c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2958>
    fc7e:	e7d1      	b.n	fc24 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2960>
                trace!("[{:04x}] LD Vx, K", self.pc);
    fc80:	f64f 406c 	movw	r0, #64620	; 0xfc6c
    fc84:	f2c0 0001 	movt	r0, #1
    fc88:	6801      	ldr	r1, [r0, #0]
    fc8a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fc8e:	f100 0212 	add.w	r2, r0, #18
    fc92:	f8cd 2abc 	str.w	r2, [sp, #2748]	; 0xabc
    fc96:	f8dd 2abc 	ldr.w	r2, [sp, #2748]	; 0xabc
    fc9a:	f8cd 2ccc 	str.w	r2, [sp, #3276]	; 0xccc
    fc9e:	f249 13cf 	movw	r3, #37327	; 0x91cf
    fca2:	f2c0 0301 	movt	r3, #1
    fca6:	4610      	mov	r0, r2
    fca8:	9144      	str	r1, [sp, #272]	; 0x110
    fcaa:	4619      	mov	r1, r3
    fcac:	f7fa fd94 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    fcb0:	9043      	str	r0, [sp, #268]	; 0x10c
    fcb2:	9142      	str	r1, [sp, #264]	; 0x108
    fcb4:	e7ff      	b.n	fcb6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x29f2>
    fcb6:	9843      	ldr	r0, [sp, #268]	; 0x10c
    fcb8:	f8cd 0ab4 	str.w	r0, [sp, #2740]	; 0xab4
    fcbc:	9942      	ldr	r1, [sp, #264]	; 0x108
    fcbe:	f8cd 1ab8 	str.w	r1, [sp, #2744]	; 0xab8
    fcc2:	f64f 1238 	movw	r2, #63800	; 0xf938
    fcc6:	f2c0 0201 	movt	r2, #1
    fcca:	6812      	ldr	r2, [r2, #0]
    fccc:	466b      	mov	r3, sp
    fcce:	f04f 0c01 	mov.w	ip, #1
    fcd2:	f8c3 c008 	str.w	ip, [r3, #8]
    fcd6:	605a      	str	r2, [r3, #4]
    fcd8:	f8c3 c000 	str.w	ip, [r3]
    fcdc:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    fce0:	2202      	movs	r2, #2
    fce2:	f60d 23b4 	addw	r3, sp, #2740	; 0xab4
    fce6:	9944      	ldr	r1, [sp, #272]	; 0x110
    fce8:	f006 fea7 	bl	16a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    fcec:	e7ff      	b.n	fcee <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2a2a>
    fcee:	f8dd 1a90 	ldr.w	r1, [sp, #2704]	; 0xa90
    fcf2:	f64f 408c 	movw	r0, #64652	; 0xfc8c
    fcf6:	f2c0 0001 	movt	r0, #1
    fcfa:	6802      	ldr	r2, [r0, #0]
    fcfc:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    fd00:	f002 fbb4 	bl	1246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    fd04:	e7ff      	b.n	fd06 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2a42>
    fd06:	e7ff      	b.n	fd08 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2a44>
                self.v[x] = self.waitkey();
    fd08:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fd0c:	f001 fa2d 	bl	1116a <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0d68791b70d8fb4dE>
    fd10:	9041      	str	r0, [sp, #260]	; 0x104
    fd12:	e7ff      	b.n	fd14 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2a50>
    fd14:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    fd18:	280f      	cmp	r0, #15
    fd1a:	f200 868f 	bhi.w	10a3c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3778>
    fd1e:	e7ff      	b.n	fd20 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2a5c>
    fd20:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fd24:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    fd28:	1842      	adds	r2, r0, r1
    fd2a:	9b41      	ldr	r3, [sp, #260]	; 0x104
    fd2c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    fd30:	f000 bd95 	b.w	1085e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x359a>
    fd34:	2005      	movs	r0, #5
    fd36:	f8cd 0ac0 	str.w	r0, [sp, #2752]	; 0xac0
    fd3a:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
    fd3e:	f2c0 0001 	movt	r0, #1
    fd42:	6801      	ldr	r1, [r0, #0]
    fd44:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    fd48:	f006 ffb2 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fd4c:	9040      	str	r0, [sp, #256]	; 0x100
    fd4e:	e01f      	b.n	fd90 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2acc>
    fd50:	2001      	movs	r0, #1
    fd52:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    fd56:	e015      	b.n	fd84 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2ac0>
    fd58:	2000      	movs	r0, #0
    fd5a:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    fd5e:	e011      	b.n	fd84 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2ac0>
    fd60:	2000      	movs	r0, #0
    fd62:	f88d 0e8b 	strb.w	r0, [sp, #3723]	; 0xe8b
    fd66:	f89d 1e8b 	ldrb.w	r1, [sp, #3723]	; 0xe8b
    fd6a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    fd6e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    fd72:	f001 fb4c 	bl	1140e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    fd76:	f8cd 0e8c 	str.w	r0, [sp, #3724]	; 0xe8c
    fd7a:	f8dd 0e8c 	ldr.w	r0, [sp, #3724]	; 0xe8c
    fd7e:	f8cd 0ac8 	str.w	r0, [sp, #2760]	; 0xac8
    fd82:	e00a      	b.n	fd9a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2ad6>
    fd84:	f89d 0ac7 	ldrb.w	r0, [sp, #2759]	; 0xac7
    fd88:	07c0      	lsls	r0, r0, #31
    fd8a:	2800      	cmp	r0, #0
    fd8c:	d112      	bne.n	fdb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2af0>
    fd8e:	e055      	b.n	fe3c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2b78>
    fd90:	9840      	ldr	r0, [sp, #256]	; 0x100
    fd92:	07c1      	lsls	r1, r0, #31
    fd94:	2900      	cmp	r1, #0
    fd96:	d1e3      	bne.n	fd60 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2a9c>
    fd98:	e7de      	b.n	fd58 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2a94>
    fd9a:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    fd9e:	f60d 21c8 	addw	r1, sp, #2760	; 0xac8
    fda2:	f006 ff85 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fda6:	903f      	str	r0, [sp, #252]	; 0xfc
    fda8:	e7ff      	b.n	fdaa <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2ae6>
    fdaa:	983f      	ldr	r0, [sp, #252]	; 0xfc
    fdac:	07c1      	lsls	r1, r0, #31
    fdae:	2900      	cmp	r1, #0
    fdb0:	d1ce      	bne.n	fd50 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2a8c>
    fdb2:	e7d1      	b.n	fd58 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2a94>
                trace!("[{:04x}] LD DT, Vx", self.pc);
    fdb4:	f64f 401c 	movw	r0, #64540	; 0xfc1c
    fdb8:	f2c0 0001 	movt	r0, #1
    fdbc:	6801      	ldr	r1, [r0, #0]
    fdbe:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fdc2:	f100 0212 	add.w	r2, r0, #18
    fdc6:	f8cd 2aec 	str.w	r2, [sp, #2796]	; 0xaec
    fdca:	f8dd 2aec 	ldr.w	r2, [sp, #2796]	; 0xaec
    fdce:	f8cd 2cc8 	str.w	r2, [sp, #3272]	; 0xcc8
    fdd2:	f249 13cf 	movw	r3, #37327	; 0x91cf
    fdd6:	f2c0 0301 	movt	r3, #1
    fdda:	4610      	mov	r0, r2
    fddc:	913e      	str	r1, [sp, #248]	; 0xf8
    fdde:	4619      	mov	r1, r3
    fde0:	f7fa fcfa 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    fde4:	903d      	str	r0, [sp, #244]	; 0xf4
    fde6:	913c      	str	r1, [sp, #240]	; 0xf0
    fde8:	e7ff      	b.n	fdea <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2b26>
    fdea:	983d      	ldr	r0, [sp, #244]	; 0xf4
    fdec:	f8cd 0ae4 	str.w	r0, [sp, #2788]	; 0xae4
    fdf0:	993c      	ldr	r1, [sp, #240]	; 0xf0
    fdf2:	f8cd 1ae8 	str.w	r1, [sp, #2792]	; 0xae8
    fdf6:	f64f 1238 	movw	r2, #63800	; 0xf938
    fdfa:	f2c0 0201 	movt	r2, #1
    fdfe:	6812      	ldr	r2, [r2, #0]
    fe00:	466b      	mov	r3, sp
    fe02:	f04f 0c01 	mov.w	ip, #1
    fe06:	f8c3 c008 	str.w	ip, [r3, #8]
    fe0a:	605a      	str	r2, [r3, #4]
    fe0c:	f8c3 c000 	str.w	ip, [r3]
    fe10:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    fe14:	2202      	movs	r2, #2
    fe16:	f60d 23e4 	addw	r3, sp, #2788	; 0xae4
    fe1a:	993e      	ldr	r1, [sp, #248]	; 0xf8
    fe1c:	f006 fe0d 	bl	16a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    fe20:	e7ff      	b.n	fe22 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2b5e>
    fe22:	f8dd 1ac0 	ldr.w	r1, [sp, #2752]	; 0xac0
    fe26:	f64f 403c 	movw	r0, #64572	; 0xfc3c
    fe2a:	f2c0 0001 	movt	r0, #1
    fe2e:	6802      	ldr	r2, [r0, #0]
    fe30:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    fe34:	f002 fb1a 	bl	1246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    fe38:	e7ff      	b.n	fe3a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2b76>
    fe3a:	e7ff      	b.n	fe3c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2b78>
                self.dt = self.v[x];
    fe3c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    fe40:	280f      	cmp	r0, #15
    fe42:	f200 85f1 	bhi.w	10a28 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3764>
    fe46:	e7ff      	b.n	fe48 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2b84>
    fe48:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fe4c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    fe50:	1842      	adds	r2, r0, r1
    fe52:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    fe56:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
        match (
    fe5a:	f000 bd00 	b.w	1085e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x359a>
    fe5e:	2005      	movs	r0, #5
    fe60:	f8cd 0af0 	str.w	r0, [sp, #2800]	; 0xaf0
    fe64:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
    fe68:	f2c0 0001 	movt	r0, #1
    fe6c:	6801      	ldr	r1, [r0, #0]
    fe6e:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    fe72:	f006 ff1d 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fe76:	903b      	str	r0, [sp, #236]	; 0xec
    fe78:	e01f      	b.n	feba <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2bf6>
    fe7a:	2001      	movs	r0, #1
    fe7c:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    fe80:	e015      	b.n	feae <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2bea>
    fe82:	2000      	movs	r0, #0
    fe84:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    fe88:	e011      	b.n	feae <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2bea>
    fe8a:	2000      	movs	r0, #0
    fe8c:	f88d 0e93 	strb.w	r0, [sp, #3731]	; 0xe93
    fe90:	f89d 1e93 	ldrb.w	r1, [sp, #3731]	; 0xe93
    fe94:	f644 206c 	movw	r0, #19052	; 0x4a6c
    fe98:	f2c2 0000 	movt	r0, #8192	; 0x2000
    fe9c:	f001 fab7 	bl	1140e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    fea0:	f8cd 0e94 	str.w	r0, [sp, #3732]	; 0xe94
    fea4:	f8dd 0e94 	ldr.w	r0, [sp, #3732]	; 0xe94
    fea8:	f8cd 0af8 	str.w	r0, [sp, #2808]	; 0xaf8
    feac:	e00a      	b.n	fec4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2c00>
    feae:	f89d 0af7 	ldrb.w	r0, [sp, #2807]	; 0xaf7
    feb2:	07c0      	lsls	r0, r0, #31
    feb4:	2800      	cmp	r0, #0
    feb6:	d112      	bne.n	fede <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2c1a>
    feb8:	e055      	b.n	ff66 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2ca2>
    feba:	983b      	ldr	r0, [sp, #236]	; 0xec
    febc:	07c1      	lsls	r1, r0, #31
    febe:	2900      	cmp	r1, #0
    fec0:	d1e3      	bne.n	fe8a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2bc6>
    fec2:	e7de      	b.n	fe82 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2bbe>
    fec4:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    fec8:	f60d 21f8 	addw	r1, sp, #2808	; 0xaf8
    fecc:	f006 fef0 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fed0:	903a      	str	r0, [sp, #232]	; 0xe8
    fed2:	e7ff      	b.n	fed4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2c10>
    fed4:	983a      	ldr	r0, [sp, #232]	; 0xe8
    fed6:	07c1      	lsls	r1, r0, #31
    fed8:	2900      	cmp	r1, #0
    feda:	d1ce      	bne.n	fe7a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2bb6>
    fedc:	e7d1      	b.n	fe82 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2bbe>
                trace!("[{:04x}] LD ST, Vx", self.pc);
    fede:	f64f 30cc 	movw	r0, #64460	; 0xfbcc
    fee2:	f2c0 0001 	movt	r0, #1
    fee6:	6801      	ldr	r1, [r0, #0]
    fee8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    feec:	f100 0212 	add.w	r2, r0, #18
    fef0:	f8cd 2b1c 	str.w	r2, [sp, #2844]	; 0xb1c
    fef4:	f8dd 2b1c 	ldr.w	r2, [sp, #2844]	; 0xb1c
    fef8:	f8cd 2cc4 	str.w	r2, [sp, #3268]	; 0xcc4
    fefc:	f249 13cf 	movw	r3, #37327	; 0x91cf
    ff00:	f2c0 0301 	movt	r3, #1
    ff04:	4610      	mov	r0, r2
    ff06:	9139      	str	r1, [sp, #228]	; 0xe4
    ff08:	4619      	mov	r1, r3
    ff0a:	f7fa fc65 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ff0e:	9038      	str	r0, [sp, #224]	; 0xe0
    ff10:	9137      	str	r1, [sp, #220]	; 0xdc
    ff12:	e7ff      	b.n	ff14 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2c50>
    ff14:	9838      	ldr	r0, [sp, #224]	; 0xe0
    ff16:	f8cd 0b14 	str.w	r0, [sp, #2836]	; 0xb14
    ff1a:	9937      	ldr	r1, [sp, #220]	; 0xdc
    ff1c:	f8cd 1b18 	str.w	r1, [sp, #2840]	; 0xb18
    ff20:	f64f 1238 	movw	r2, #63800	; 0xf938
    ff24:	f2c0 0201 	movt	r2, #1
    ff28:	6812      	ldr	r2, [r2, #0]
    ff2a:	466b      	mov	r3, sp
    ff2c:	f04f 0c01 	mov.w	ip, #1
    ff30:	f8c3 c008 	str.w	ip, [r3, #8]
    ff34:	605a      	str	r2, [r3, #4]
    ff36:	f8c3 c000 	str.w	ip, [r3]
    ff3a:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    ff3e:	2202      	movs	r2, #2
    ff40:	f60d 3314 	addw	r3, sp, #2836	; 0xb14
    ff44:	9939      	ldr	r1, [sp, #228]	; 0xe4
    ff46:	f006 fd78 	bl	16a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ff4a:	e7ff      	b.n	ff4c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2c88>
    ff4c:	f8dd 1af0 	ldr.w	r1, [sp, #2800]	; 0xaf0
    ff50:	f64f 30ec 	movw	r0, #64492	; 0xfbec
    ff54:	f2c0 0001 	movt	r0, #1
    ff58:	6802      	ldr	r2, [r0, #0]
    ff5a:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    ff5e:	f002 fa85 	bl	1246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ff62:	e7ff      	b.n	ff64 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2ca0>
    ff64:	e7ff      	b.n	ff66 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2ca2>
                self.st = self.v[x];
    ff66:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ff6a:	280f      	cmp	r0, #15
    ff6c:	f200 8552 	bhi.w	10a14 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3750>
    ff70:	e7ff      	b.n	ff72 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2cae>
    ff72:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ff76:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ff7a:	1842      	adds	r2, r0, r1
    ff7c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ff80:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
        match (
    ff84:	f000 bc6b 	b.w	1085e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x359a>
    ff88:	2005      	movs	r0, #5
    ff8a:	f8cd 0b20 	str.w	r0, [sp, #2848]	; 0xb20
    ff8e:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
    ff92:	f2c0 0001 	movt	r0, #1
    ff96:	6801      	ldr	r1, [r0, #0]
    ff98:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    ff9c:	f006 fe88 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ffa0:	9036      	str	r0, [sp, #216]	; 0xd8
    ffa2:	e01f      	b.n	ffe4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2d20>
    ffa4:	2001      	movs	r0, #1
    ffa6:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    ffaa:	e015      	b.n	ffd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2d14>
    ffac:	2000      	movs	r0, #0
    ffae:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    ffb2:	e011      	b.n	ffd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2d14>
    ffb4:	2000      	movs	r0, #0
    ffb6:	f88d 0e9b 	strb.w	r0, [sp, #3739]	; 0xe9b
    ffba:	f89d 1e9b 	ldrb.w	r1, [sp, #3739]	; 0xe9b
    ffbe:	f644 206c 	movw	r0, #19052	; 0x4a6c
    ffc2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ffc6:	f001 fa22 	bl	1140e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    ffca:	f8cd 0e9c 	str.w	r0, [sp, #3740]	; 0xe9c
    ffce:	f8dd 0e9c 	ldr.w	r0, [sp, #3740]	; 0xe9c
    ffd2:	f8cd 0b28 	str.w	r0, [sp, #2856]	; 0xb28
    ffd6:	e00a      	b.n	ffee <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2d2a>
    ffd8:	f89d 0b27 	ldrb.w	r0, [sp, #2855]	; 0xb27
    ffdc:	07c0      	lsls	r0, r0, #31
    ffde:	2800      	cmp	r0, #0
    ffe0:	d112      	bne.n	10008 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2d44>
    ffe2:	e055      	b.n	10090 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2dcc>
    ffe4:	9836      	ldr	r0, [sp, #216]	; 0xd8
    ffe6:	07c1      	lsls	r1, r0, #31
    ffe8:	2900      	cmp	r1, #0
    ffea:	d1e3      	bne.n	ffb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2cf0>
    ffec:	e7de      	b.n	ffac <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2ce8>
    ffee:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    fff2:	f60d 3128 	addw	r1, sp, #2856	; 0xb28
    fff6:	f006 fe5b 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fffa:	9035      	str	r0, [sp, #212]	; 0xd4
    fffc:	e7ff      	b.n	fffe <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2d3a>
    fffe:	9835      	ldr	r0, [sp, #212]	; 0xd4
   10000:	07c1      	lsls	r1, r0, #31
   10002:	2900      	cmp	r1, #0
   10004:	d1ce      	bne.n	ffa4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2ce0>
   10006:	e7d1      	b.n	ffac <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2ce8>
                trace!("[{:04x}] ADD I, Vx", self.pc);
   10008:	f64f 307c 	movw	r0, #64380	; 0xfb7c
   1000c:	f2c0 0001 	movt	r0, #1
   10010:	6801      	ldr	r1, [r0, #0]
   10012:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   10016:	f100 0212 	add.w	r2, r0, #18
   1001a:	f8cd 2b4c 	str.w	r2, [sp, #2892]	; 0xb4c
   1001e:	f8dd 2b4c 	ldr.w	r2, [sp, #2892]	; 0xb4c
   10022:	f8cd 2cc0 	str.w	r2, [sp, #3264]	; 0xcc0
   10026:	f249 13cf 	movw	r3, #37327	; 0x91cf
   1002a:	f2c0 0301 	movt	r3, #1
   1002e:	4610      	mov	r0, r2
   10030:	9134      	str	r1, [sp, #208]	; 0xd0
   10032:	4619      	mov	r1, r3
   10034:	f7fa fbd0 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
   10038:	9033      	str	r0, [sp, #204]	; 0xcc
   1003a:	9132      	str	r1, [sp, #200]	; 0xc8
   1003c:	e7ff      	b.n	1003e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2d7a>
   1003e:	9833      	ldr	r0, [sp, #204]	; 0xcc
   10040:	f8cd 0b44 	str.w	r0, [sp, #2884]	; 0xb44
   10044:	9932      	ldr	r1, [sp, #200]	; 0xc8
   10046:	f8cd 1b48 	str.w	r1, [sp, #2888]	; 0xb48
   1004a:	f64f 1238 	movw	r2, #63800	; 0xf938
   1004e:	f2c0 0201 	movt	r2, #1
   10052:	6812      	ldr	r2, [r2, #0]
   10054:	466b      	mov	r3, sp
   10056:	f04f 0c01 	mov.w	ip, #1
   1005a:	f8c3 c008 	str.w	ip, [r3, #8]
   1005e:	605a      	str	r2, [r3, #4]
   10060:	f8c3 c000 	str.w	ip, [r3]
   10064:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
   10068:	2202      	movs	r2, #2
   1006a:	f60d 3344 	addw	r3, sp, #2884	; 0xb44
   1006e:	9934      	ldr	r1, [sp, #208]	; 0xd0
   10070:	f006 fce3 	bl	16a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   10074:	e7ff      	b.n	10076 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2db2>
   10076:	f8dd 1b20 	ldr.w	r1, [sp, #2848]	; 0xb20
   1007a:	f64f 309c 	movw	r0, #64412	; 0xfb9c
   1007e:	f2c0 0001 	movt	r0, #1
   10082:	6802      	ldr	r2, [r0, #0]
   10084:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
   10088:	f002 f9f0 	bl	1246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
   1008c:	e7ff      	b.n	1008e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2dca>
   1008e:	e7ff      	b.n	10090 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2dcc>
                self.i = self.i.wrapping_add(self.v[x].into());
   10090:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   10094:	8a01      	ldrh	r1, [r0, #16]
   10096:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
   1009a:	2a0f      	cmp	r2, #15
   1009c:	9131      	str	r1, [sp, #196]	; 0xc4
   1009e:	f200 84af 	bhi.w	10a00 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x373c>
   100a2:	e7ff      	b.n	100a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2de0>
   100a4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   100a8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   100ac:	1842      	adds	r2, r0, r1
   100ae:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
   100b2:	f001 f99f 	bl	113f4 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E>
   100b6:	9030      	str	r0, [sp, #192]	; 0xc0
   100b8:	e7ff      	b.n	100ba <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2df6>
   100ba:	9831      	ldr	r0, [sp, #196]	; 0xc4
   100bc:	9930      	ldr	r1, [sp, #192]	; 0xc0
   100be:	f006 fdbd 	bl	16c3c <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E>
   100c2:	902f      	str	r0, [sp, #188]	; 0xbc
   100c4:	e7ff      	b.n	100c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2e02>
   100c6:	982f      	ldr	r0, [sp, #188]	; 0xbc
   100c8:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   100cc:	8208      	strh	r0, [r1, #16]
        match (
   100ce:	e3c6      	b.n	1085e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x359a>
   100d0:	2005      	movs	r0, #5
   100d2:	f8cd 0b50 	str.w	r0, [sp, #2896]	; 0xb50
   100d6:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
   100da:	f2c0 0001 	movt	r0, #1
   100de:	6801      	ldr	r1, [r0, #0]
   100e0:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
   100e4:	f006 fde4 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   100e8:	902e      	str	r0, [sp, #184]	; 0xb8
   100ea:	e01f      	b.n	1012c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2e68>
   100ec:	2001      	movs	r0, #1
   100ee:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
   100f2:	e015      	b.n	10120 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2e5c>
   100f4:	2000      	movs	r0, #0
   100f6:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
   100fa:	e011      	b.n	10120 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2e5c>
   100fc:	2000      	movs	r0, #0
   100fe:	f88d 0ea3 	strb.w	r0, [sp, #3747]	; 0xea3
   10102:	f89d 1ea3 	ldrb.w	r1, [sp, #3747]	; 0xea3
   10106:	f644 206c 	movw	r0, #19052	; 0x4a6c
   1010a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1010e:	f001 f97e 	bl	1140e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
   10112:	f8cd 0ea4 	str.w	r0, [sp, #3748]	; 0xea4
   10116:	f8dd 0ea4 	ldr.w	r0, [sp, #3748]	; 0xea4
   1011a:	f8cd 0b58 	str.w	r0, [sp, #2904]	; 0xb58
   1011e:	e00a      	b.n	10136 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2e72>
   10120:	f89d 0b57 	ldrb.w	r0, [sp, #2903]	; 0xb57
   10124:	07c0      	lsls	r0, r0, #31
   10126:	2800      	cmp	r0, #0
   10128:	d112      	bne.n	10150 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2e8c>
   1012a:	e055      	b.n	101d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2f14>
   1012c:	982e      	ldr	r0, [sp, #184]	; 0xb8
   1012e:	07c1      	lsls	r1, r0, #31
   10130:	2900      	cmp	r1, #0
   10132:	d1e3      	bne.n	100fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2e38>
   10134:	e7de      	b.n	100f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2e30>
   10136:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
   1013a:	f60d 3158 	addw	r1, sp, #2904	; 0xb58
   1013e:	f006 fdb7 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   10142:	902d      	str	r0, [sp, #180]	; 0xb4
   10144:	e7ff      	b.n	10146 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2e82>
   10146:	982d      	ldr	r0, [sp, #180]	; 0xb4
   10148:	07c1      	lsls	r1, r0, #31
   1014a:	2900      	cmp	r1, #0
   1014c:	d1ce      	bne.n	100ec <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2e28>
   1014e:	e7d1      	b.n	100f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2e30>
                trace!("[{:04x}] LD F, Vx", self.pc);
   10150:	f64f 20f8 	movw	r0, #64248	; 0xfaf8
   10154:	f2c0 0001 	movt	r0, #1
   10158:	6801      	ldr	r1, [r0, #0]
   1015a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   1015e:	f100 0212 	add.w	r2, r0, #18
   10162:	f8cd 2b7c 	str.w	r2, [sp, #2940]	; 0xb7c
   10166:	f8dd 2b7c 	ldr.w	r2, [sp, #2940]	; 0xb7c
   1016a:	f8cd 2cbc 	str.w	r2, [sp, #3260]	; 0xcbc
   1016e:	f249 13cf 	movw	r3, #37327	; 0x91cf
   10172:	f2c0 0301 	movt	r3, #1
   10176:	4610      	mov	r0, r2
   10178:	912c      	str	r1, [sp, #176]	; 0xb0
   1017a:	4619      	mov	r1, r3
   1017c:	f7fa fb2c 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
   10180:	902b      	str	r0, [sp, #172]	; 0xac
   10182:	912a      	str	r1, [sp, #168]	; 0xa8
   10184:	e7ff      	b.n	10186 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2ec2>
   10186:	982b      	ldr	r0, [sp, #172]	; 0xac
   10188:	f8cd 0b74 	str.w	r0, [sp, #2932]	; 0xb74
   1018c:	992a      	ldr	r1, [sp, #168]	; 0xa8
   1018e:	f8cd 1b78 	str.w	r1, [sp, #2936]	; 0xb78
   10192:	f64f 1238 	movw	r2, #63800	; 0xf938
   10196:	f2c0 0201 	movt	r2, #1
   1019a:	6812      	ldr	r2, [r2, #0]
   1019c:	466b      	mov	r3, sp
   1019e:	f04f 0c01 	mov.w	ip, #1
   101a2:	f8c3 c008 	str.w	ip, [r3, #8]
   101a6:	605a      	str	r2, [r3, #4]
   101a8:	f8c3 c000 	str.w	ip, [r3]
   101ac:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
   101b0:	2202      	movs	r2, #2
   101b2:	f60d 3374 	addw	r3, sp, #2932	; 0xb74
   101b6:	992c      	ldr	r1, [sp, #176]	; 0xb0
   101b8:	f006 fc3f 	bl	16a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   101bc:	e7ff      	b.n	101be <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2efa>
   101be:	f8dd 1b50 	ldr.w	r1, [sp, #2896]	; 0xb50
   101c2:	f64f 3018 	movw	r0, #64280	; 0xfb18
   101c6:	f2c0 0001 	movt	r0, #1
   101ca:	6802      	ldr	r2, [r0, #0]
   101cc:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
   101d0:	f002 f94c 	bl	1246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
   101d4:	e7ff      	b.n	101d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2f12>
   101d6:	e7ff      	b.n	101d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2f14>
                self.i = (self.v[x] * 5).into();
   101d8:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
   101dc:	280f      	cmp	r0, #15
   101de:	f200 83f9 	bhi.w	109d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3710>
   101e2:	e7ff      	b.n	101e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2f20>
   101e4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   101e8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   101ec:	1842      	adds	r2, r0, r1
   101ee:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
   101f2:	2305      	movs	r3, #5
   101f4:	fba2 2303 	umull	r2, r3, r2, r3
   101f8:	ea4f 2c12 	mov.w	ip, r2, lsr #8
   101fc:	f04f 0e00 	mov.w	lr, #0
   10200:	ebbe 2f12 	cmp.w	lr, r2, lsr #8
   10204:	bf18      	it	ne
   10206:	f04f 0c01 	movne.w	ip, #1
   1020a:	2b00      	cmp	r3, #0
   1020c:	bf18      	it	ne
   1020e:	2301      	movne	r3, #1
   10210:	ea43 030c 	orr.w	r3, r3, ip
   10214:	2b00      	cmp	r3, #0
   10216:	9229      	str	r2, [sp, #164]	; 0xa4
   10218:	f040 83e6 	bne.w	109e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3724>
   1021c:	e7ff      	b.n	1021e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2f5a>
   1021e:	9829      	ldr	r0, [sp, #164]	; 0xa4
   10220:	f001 f8e8 	bl	113f4 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E>
   10224:	9028      	str	r0, [sp, #160]	; 0xa0
   10226:	e7ff      	b.n	10228 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2f64>
   10228:	9828      	ldr	r0, [sp, #160]	; 0xa0
   1022a:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   1022e:	8208      	strh	r0, [r1, #16]
        match (
   10230:	e315      	b.n	1085e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x359a>
   10232:	2005      	movs	r0, #5
   10234:	f8cd 0b80 	str.w	r0, [sp, #2944]	; 0xb80
   10238:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
   1023c:	f2c0 0001 	movt	r0, #1
   10240:	6801      	ldr	r1, [r0, #0]
   10242:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
   10246:	f006 fd33 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   1024a:	9027      	str	r0, [sp, #156]	; 0x9c
   1024c:	e01f      	b.n	1028e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2fca>
   1024e:	2001      	movs	r0, #1
   10250:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
   10254:	e015      	b.n	10282 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2fbe>
   10256:	2000      	movs	r0, #0
   10258:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
   1025c:	e011      	b.n	10282 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2fbe>
   1025e:	2000      	movs	r0, #0
   10260:	f88d 0eab 	strb.w	r0, [sp, #3755]	; 0xeab
   10264:	f89d 1eab 	ldrb.w	r1, [sp, #3755]	; 0xeab
   10268:	f644 206c 	movw	r0, #19052	; 0x4a6c
   1026c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10270:	f001 f8cd 	bl	1140e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
   10274:	f8cd 0eac 	str.w	r0, [sp, #3756]	; 0xeac
   10278:	f8dd 0eac 	ldr.w	r0, [sp, #3756]	; 0xeac
   1027c:	f8cd 0b88 	str.w	r0, [sp, #2952]	; 0xb88
   10280:	e00a      	b.n	10298 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2fd4>
   10282:	f89d 0b87 	ldrb.w	r0, [sp, #2951]	; 0xb87
   10286:	07c0      	lsls	r0, r0, #31
   10288:	2800      	cmp	r0, #0
   1028a:	d112      	bne.n	102b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2fee>
   1028c:	e055      	b.n	1033a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3076>
   1028e:	9827      	ldr	r0, [sp, #156]	; 0x9c
   10290:	07c1      	lsls	r1, r0, #31
   10292:	2900      	cmp	r1, #0
   10294:	d1e3      	bne.n	1025e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2f9a>
   10296:	e7de      	b.n	10256 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2f92>
   10298:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
   1029c:	f60d 3188 	addw	r1, sp, #2952	; 0xb88
   102a0:	f006 fd06 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   102a4:	9026      	str	r0, [sp, #152]	; 0x98
   102a6:	e7ff      	b.n	102a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2fe4>
   102a8:	9826      	ldr	r0, [sp, #152]	; 0x98
   102aa:	07c1      	lsls	r1, r0, #31
   102ac:	2900      	cmp	r1, #0
   102ae:	d1ce      	bne.n	1024e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2f8a>
   102b0:	e7d1      	b.n	10256 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x2f92>
                trace!("[{:04x}] LD B, Vx", self.pc);
   102b2:	f64f 2058 	movw	r0, #64088	; 0xfa58
   102b6:	f2c0 0001 	movt	r0, #1
   102ba:	6801      	ldr	r1, [r0, #0]
   102bc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   102c0:	f100 0212 	add.w	r2, r0, #18
   102c4:	f8cd 2bac 	str.w	r2, [sp, #2988]	; 0xbac
   102c8:	f8dd 2bac 	ldr.w	r2, [sp, #2988]	; 0xbac
   102cc:	f8cd 2cb4 	str.w	r2, [sp, #3252]	; 0xcb4
   102d0:	f249 13cf 	movw	r3, #37327	; 0x91cf
   102d4:	f2c0 0301 	movt	r3, #1
   102d8:	4610      	mov	r0, r2
   102da:	9125      	str	r1, [sp, #148]	; 0x94
   102dc:	4619      	mov	r1, r3
   102de:	f7fa fa7b 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
   102e2:	9024      	str	r0, [sp, #144]	; 0x90
   102e4:	9123      	str	r1, [sp, #140]	; 0x8c
   102e6:	e7ff      	b.n	102e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3024>
   102e8:	9824      	ldr	r0, [sp, #144]	; 0x90
   102ea:	f8cd 0ba4 	str.w	r0, [sp, #2980]	; 0xba4
   102ee:	9923      	ldr	r1, [sp, #140]	; 0x8c
   102f0:	f8cd 1ba8 	str.w	r1, [sp, #2984]	; 0xba8
   102f4:	f64f 1238 	movw	r2, #63800	; 0xf938
   102f8:	f2c0 0201 	movt	r2, #1
   102fc:	6812      	ldr	r2, [r2, #0]
   102fe:	466b      	mov	r3, sp
   10300:	f04f 0c01 	mov.w	ip, #1
   10304:	f8c3 c008 	str.w	ip, [r3, #8]
   10308:	605a      	str	r2, [r3, #4]
   1030a:	f8c3 c000 	str.w	ip, [r3]
   1030e:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
   10312:	2202      	movs	r2, #2
   10314:	f60d 33a4 	addw	r3, sp, #2980	; 0xba4
   10318:	9925      	ldr	r1, [sp, #148]	; 0x94
   1031a:	f006 fb8e 	bl	16a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   1031e:	e7ff      	b.n	10320 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x305c>
   10320:	f8dd 1b80 	ldr.w	r1, [sp, #2944]	; 0xb80
   10324:	f64f 2078 	movw	r0, #64120	; 0xfa78
   10328:	f2c0 0001 	movt	r0, #1
   1032c:	6802      	ldr	r2, [r0, #0]
   1032e:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
   10332:	f002 f89b 	bl	1246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
   10336:	e7ff      	b.n	10338 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3074>
   10338:	e7ff      	b.n	1033a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3076>
                let bcd = self.v[x];
   1033a:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
   1033e:	280f      	cmp	r0, #15
   10340:	f200 8308 	bhi.w	10954 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3690>
   10344:	e7ff      	b.n	10346 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3082>
   10346:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   1034a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1034e:	1842      	adds	r2, r0, r1
   10350:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
   10354:	4613      	mov	r3, r2
   10356:	f88d 2cbb 	strb.w	r2, [sp, #3259]	; 0xcbb
   1035a:	f248 5c1f 	movw	ip, #34079	; 0x851f
   1035e:	f2c5 1ceb 	movt	ip, #20971	; 0x51eb
                self.mem[self.i as usize] = (bcd / 100) % 10;
   10362:	fba2 2c0c 	umull	r2, ip, r2, ip
   10366:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
   1036a:	f8b0 e010 	ldrh.w	lr, [r0, #16]
   1036e:	4674      	mov	r4, lr
   10370:	2500      	movs	r5, #0
   10372:	ebb5 3f1e 	cmp.w	r5, lr, lsr #12
   10376:	9322      	str	r3, [sp, #136]	; 0x88
   10378:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
   1037c:	9420      	str	r4, [sp, #128]	; 0x80
   1037e:	f040 82f3 	bne.w	10968 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x36a4>
   10382:	e7ff      	b.n	10384 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x30c0>
   10384:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   10388:	9920      	ldr	r1, [sp, #128]	; 0x80
   1038a:	1842      	adds	r2, r0, r1
   1038c:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1038e:	fa5f fc83 	uxtb.w	ip, r3
   10392:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
   10396:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
   1039a:	fbac 450e 	umull	r4, r5, ip, lr
   1039e:	08ed      	lsrs	r5, r5, #3
   103a0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   103a4:	ebac 0c45 	sub.w	ip, ip, r5, lsl #1
   103a8:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
   103ac:	9a22      	ldr	r2, [sp, #136]	; 0x88
   103ae:	fa5f fc82 	uxtb.w	ip, r2
   103b2:	fbac ce0e 	umull	ip, lr, ip, lr
   103b6:	ea4f 0ede 	mov.w	lr, lr, lsr #3
   103ba:	8a05      	ldrh	r5, [r0, #16]
   103bc:	3501      	adds	r5, #1
   103be:	2600      	movs	r6, #0
   103c0:	2e00      	cmp	r6, #0
   103c2:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
   103c6:	951e      	str	r5, [sp, #120]	; 0x78
   103c8:	f040 82d8 	bne.w	1097c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x36b8>
   103cc:	e7ff      	b.n	103ce <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x310a>
   103ce:	2000      	movs	r0, #0
   103d0:	991e      	ldr	r1, [sp, #120]	; 0x78
   103d2:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
   103d6:	f040 82dd 	bne.w	10994 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x36d0>
   103da:	e7ff      	b.n	103dc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3118>
   103dc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   103e0:	991e      	ldr	r1, [sp, #120]	; 0x78
   103e2:	1842      	adds	r2, r0, r1
   103e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   103e6:	fa5f fc83 	uxtb.w	ip, r3
   103ea:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
   103ee:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
   103f2:	fbac e40e 	umull	lr, r4, ip, lr
   103f6:	08e4      	lsrs	r4, r4, #3
   103f8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   103fc:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
   10400:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 2] = bcd % 10;
   10404:	8a02      	ldrh	r2, [r0, #16]
   10406:	3202      	adds	r2, #2
   10408:	f04f 0c00 	mov.w	ip, #0
   1040c:	f1bc 0f00 	cmp.w	ip, #0
   10410:	921d      	str	r2, [sp, #116]	; 0x74
   10412:	f040 82c9 	bne.w	109a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x36e4>
   10416:	e7ff      	b.n	10418 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3154>
   10418:	2000      	movs	r0, #0
   1041a:	991d      	ldr	r1, [sp, #116]	; 0x74
   1041c:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
   10420:	f040 82ce 	bne.w	109c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x36fc>
   10424:	e7ff      	b.n	10426 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3162>
   10426:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   1042a:	991d      	ldr	r1, [sp, #116]	; 0x74
   1042c:	1842      	adds	r2, r0, r1
   1042e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10430:	fa5f fc83 	uxtb.w	ip, r3
   10434:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
   10438:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
   1043c:	fbac e40e 	umull	lr, r4, ip, lr
   10440:	08e4      	lsrs	r4, r4, #3
   10442:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   10446:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
   1044a:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
        match (
   1044e:	e206      	b.n	1085e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x359a>
   10450:	2005      	movs	r0, #5
   10452:	f8cd 0bb0 	str.w	r0, [sp, #2992]	; 0xbb0
   10456:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
   1045a:	f2c0 0001 	movt	r0, #1
   1045e:	6801      	ldr	r1, [r0, #0]
   10460:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
   10464:	f006 fc24 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   10468:	901c      	str	r0, [sp, #112]	; 0x70
   1046a:	e01f      	b.n	104ac <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x31e8>
   1046c:	2001      	movs	r0, #1
   1046e:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
   10472:	e015      	b.n	104a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x31dc>
   10474:	2000      	movs	r0, #0
   10476:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
   1047a:	e011      	b.n	104a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x31dc>
   1047c:	2000      	movs	r0, #0
   1047e:	f88d 0eb3 	strb.w	r0, [sp, #3763]	; 0xeb3
   10482:	f89d 1eb3 	ldrb.w	r1, [sp, #3763]	; 0xeb3
   10486:	f644 206c 	movw	r0, #19052	; 0x4a6c
   1048a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1048e:	f000 ffbe 	bl	1140e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
   10492:	f8cd 0eb4 	str.w	r0, [sp, #3764]	; 0xeb4
   10496:	f8dd 0eb4 	ldr.w	r0, [sp, #3764]	; 0xeb4
   1049a:	f8cd 0bb8 	str.w	r0, [sp, #3000]	; 0xbb8
   1049e:	e00a      	b.n	104b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x31f2>
   104a0:	f89d 0bb7 	ldrb.w	r0, [sp, #2999]	; 0xbb7
   104a4:	07c0      	lsls	r0, r0, #31
   104a6:	2800      	cmp	r0, #0
   104a8:	d112      	bne.n	104d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x320c>
   104aa:	e055      	b.n	10558 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3294>
   104ac:	981c      	ldr	r0, [sp, #112]	; 0x70
   104ae:	07c1      	lsls	r1, r0, #31
   104b0:	2900      	cmp	r1, #0
   104b2:	d1e3      	bne.n	1047c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x31b8>
   104b4:	e7de      	b.n	10474 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x31b0>
   104b6:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
   104ba:	f60d 31b8 	addw	r1, sp, #3000	; 0xbb8
   104be:	f006 fbf7 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   104c2:	901b      	str	r0, [sp, #108]	; 0x6c
   104c4:	e7ff      	b.n	104c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3202>
   104c6:	981b      	ldr	r0, [sp, #108]	; 0x6c
   104c8:	07c1      	lsls	r1, r0, #31
   104ca:	2900      	cmp	r1, #0
   104cc:	d1ce      	bne.n	1046c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x31a8>
   104ce:	e7d1      	b.n	10474 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x31b0>
                trace!("[{:04x}] LD [I], Vx", self.pc);
   104d0:	f64f 10d8 	movw	r0, #63960	; 0xf9d8
   104d4:	f2c0 0001 	movt	r0, #1
   104d8:	6801      	ldr	r1, [r0, #0]
   104da:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   104de:	f100 0212 	add.w	r2, r0, #18
   104e2:	f8cd 2bdc 	str.w	r2, [sp, #3036]	; 0xbdc
   104e6:	f8dd 2bdc 	ldr.w	r2, [sp, #3036]	; 0xbdc
   104ea:	f8cd 2ca0 	str.w	r2, [sp, #3232]	; 0xca0
   104ee:	f249 13cf 	movw	r3, #37327	; 0x91cf
   104f2:	f2c0 0301 	movt	r3, #1
   104f6:	4610      	mov	r0, r2
   104f8:	911a      	str	r1, [sp, #104]	; 0x68
   104fa:	4619      	mov	r1, r3
   104fc:	f7fa f96c 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
   10500:	9019      	str	r0, [sp, #100]	; 0x64
   10502:	9118      	str	r1, [sp, #96]	; 0x60
   10504:	e7ff      	b.n	10506 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3242>
   10506:	9819      	ldr	r0, [sp, #100]	; 0x64
   10508:	f8cd 0bd4 	str.w	r0, [sp, #3028]	; 0xbd4
   1050c:	9918      	ldr	r1, [sp, #96]	; 0x60
   1050e:	f8cd 1bd8 	str.w	r1, [sp, #3032]	; 0xbd8
   10512:	f64f 1238 	movw	r2, #63800	; 0xf938
   10516:	f2c0 0201 	movt	r2, #1
   1051a:	6812      	ldr	r2, [r2, #0]
   1051c:	466b      	mov	r3, sp
   1051e:	f04f 0c01 	mov.w	ip, #1
   10522:	f8c3 c008 	str.w	ip, [r3, #8]
   10526:	605a      	str	r2, [r3, #4]
   10528:	f8c3 c000 	str.w	ip, [r3]
   1052c:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
   10530:	2202      	movs	r2, #2
   10532:	f60d 33d4 	addw	r3, sp, #3028	; 0xbd4
   10536:	991a      	ldr	r1, [sp, #104]	; 0x68
   10538:	f006 fa7f 	bl	16a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   1053c:	e7ff      	b.n	1053e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x327a>
   1053e:	f8dd 1bb0 	ldr.w	r1, [sp, #2992]	; 0xbb0
   10542:	f64f 10f8 	movw	r0, #63992	; 0xf9f8
   10546:	f2c0 0001 	movt	r0, #1
   1054a:	6802      	ldr	r2, [r0, #0]
   1054c:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
   10550:	f001 ff8c 	bl	1246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
   10554:	e7ff      	b.n	10556 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3292>
   10556:	e7ff      	b.n	10558 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3294>
                let x = x as usize;
   10558:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
   1055c:	f8cd 0ca4 	str.w	r0, [sp, #3236]	; 0xca4
                for i in 0..(x + 1) {
   10560:	1c41      	adds	r1, r0, #1
   10562:	460a      	mov	r2, r1
   10564:	4281      	cmp	r1, r0
   10566:	9217      	str	r2, [sp, #92]	; 0x5c
   10568:	f0c0 81c9 	bcc.w	108fe <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x363a>
   1056c:	e7ff      	b.n	1056e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x32aa>
   1056e:	2000      	movs	r0, #0
   10570:	f8cd 0be0 	str.w	r0, [sp, #3040]	; 0xbe0
   10574:	9817      	ldr	r0, [sp, #92]	; 0x5c
   10576:	f8cd 0be4 	str.w	r0, [sp, #3044]	; 0xbe4
   1057a:	f8dd 0be0 	ldr.w	r0, [sp, #3040]	; 0xbe0
   1057e:	f8dd 1be4 	ldr.w	r1, [sp, #3044]	; 0xbe4
   10582:	f001 fcff 	bl	11f84 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
   10586:	9016      	str	r0, [sp, #88]	; 0x58
   10588:	9115      	str	r1, [sp, #84]	; 0x54
   1058a:	e7ff      	b.n	1058c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x32c8>
   1058c:	9816      	ldr	r0, [sp, #88]	; 0x58
   1058e:	f8cd 0be8 	str.w	r0, [sp, #3048]	; 0xbe8
   10592:	9915      	ldr	r1, [sp, #84]	; 0x54
   10594:	f8cd 1bec 	str.w	r1, [sp, #3052]	; 0xbec
   10598:	e7ff      	b.n	1059a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x32d6>
   1059a:	f60d 30e8 	addw	r0, sp, #3048	; 0xbe8
   1059e:	f001 fc66 	bl	11e6e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   105a2:	f8cd 1bf4 	str.w	r1, [sp, #3060]	; 0xbf4
   105a6:	f8cd 0bf0 	str.w	r0, [sp, #3056]	; 0xbf0
   105aa:	e7ff      	b.n	105ac <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x32e8>
   105ac:	f8dd 0bf0 	ldr.w	r0, [sp, #3056]	; 0xbf0
   105b0:	2800      	cmp	r0, #0
   105b2:	d001      	beq.n	105b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x32f4>
   105b4:	e7ff      	b.n	105b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x32f2>
   105b6:	e001      	b.n	105bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x32f8>
        match (
   105b8:	e151      	b.n	1085e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x359a>
                for i in 0..(x + 1) {
   105ba:	defe      	udf	#254	; 0xfe
   105bc:	f8dd 0bf4 	ldr.w	r0, [sp, #3060]	; 0xbf4
   105c0:	f8cd 0ca8 	str.w	r0, [sp, #3240]	; 0xca8
   105c4:	f8cd 0cac 	str.w	r0, [sp, #3244]	; 0xcac
   105c8:	f8cd 0cb0 	str.w	r0, [sp, #3248]	; 0xcb0
                    self.mem[self.i as usize + i] = self.v[i];
   105cc:	280f      	cmp	r0, #15
   105ce:	9014      	str	r0, [sp, #80]	; 0x50
   105d0:	f200 81a1 	bhi.w	10916 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3652>
   105d4:	e7ff      	b.n	105d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3312>
   105d6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   105da:	9914      	ldr	r1, [sp, #80]	; 0x50
   105dc:	1842      	adds	r2, r0, r1
   105de:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
   105e2:	8a03      	ldrh	r3, [r0, #16]
   105e4:	eb03 0c01 	add.w	ip, r3, r1
   105e8:	46e6      	mov	lr, ip
   105ea:	459c      	cmp	ip, r3
   105ec:	9213      	str	r2, [sp, #76]	; 0x4c
   105ee:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
   105f2:	f0c0 8199 	bcc.w	10928 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3664>
   105f6:	e7ff      	b.n	105f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3334>
   105f8:	2000      	movs	r0, #0
   105fa:	9912      	ldr	r1, [sp, #72]	; 0x48
   105fc:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
   10600:	f040 819e 	bne.w	10940 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x367c>
   10604:	e7ff      	b.n	10606 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3342>
   10606:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   1060a:	9912      	ldr	r1, [sp, #72]	; 0x48
   1060c:	1842      	adds	r2, r0, r1
   1060e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10610:	f882 3047 	strb.w	r3, [r2, #71]	; 0x47
                for i in 0..(x + 1) {
   10614:	e7c1      	b.n	1059a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x32d6>
   10616:	2005      	movs	r0, #5
   10618:	f8cd 0bf8 	str.w	r0, [sp, #3064]	; 0xbf8
   1061c:	f64f 00f0 	movw	r0, #63728	; 0xf8f0
   10620:	f2c0 0001 	movt	r0, #1
   10624:	6801      	ldr	r1, [r0, #0]
   10626:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
   1062a:	f006 fb41 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   1062e:	9011      	str	r0, [sp, #68]	; 0x44
   10630:	e01f      	b.n	10672 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x33ae>
   10632:	2001      	movs	r0, #1
   10634:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
   10638:	e015      	b.n	10666 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x33a2>
   1063a:	2000      	movs	r0, #0
   1063c:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
   10640:	e011      	b.n	10666 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x33a2>
   10642:	2000      	movs	r0, #0
   10644:	f88d 0ebb 	strb.w	r0, [sp, #3771]	; 0xebb
   10648:	f89d 1ebb 	ldrb.w	r1, [sp, #3771]	; 0xebb
   1064c:	f644 206c 	movw	r0, #19052	; 0x4a6c
   10650:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10654:	f000 fedb 	bl	1140e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
   10658:	f8cd 0ebc 	str.w	r0, [sp, #3772]	; 0xebc
   1065c:	f8dd 0ebc 	ldr.w	r0, [sp, #3772]	; 0xebc
   10660:	f8cd 0c00 	str.w	r0, [sp, #3072]	; 0xc00
   10664:	e00a      	b.n	1067c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x33b8>
   10666:	f89d 0bff 	ldrb.w	r0, [sp, #3071]	; 0xbff
   1066a:	07c0      	lsls	r0, r0, #31
   1066c:	2800      	cmp	r0, #0
   1066e:	d112      	bne.n	10696 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x33d2>
   10670:	e055      	b.n	1071e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x345a>
   10672:	9811      	ldr	r0, [sp, #68]	; 0x44
   10674:	07c1      	lsls	r1, r0, #31
   10676:	2900      	cmp	r1, #0
   10678:	d1e3      	bne.n	10642 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x337e>
   1067a:	e7de      	b.n	1063a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3376>
   1067c:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
   10680:	f50d 6140 	add.w	r1, sp, #3072	; 0xc00
   10684:	f006 fb14 	bl	16cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   10688:	9010      	str	r0, [sp, #64]	; 0x40
   1068a:	e7ff      	b.n	1068c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x33c8>
   1068c:	9810      	ldr	r0, [sp, #64]	; 0x40
   1068e:	07c1      	lsls	r1, r0, #31
   10690:	2900      	cmp	r1, #0
   10692:	d1ce      	bne.n	10632 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x336e>
   10694:	e7d1      	b.n	1063a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3376>
                trace!("[{:04x}] LD Vx, [I]", self.pc);
   10696:	f64f 1014 	movw	r0, #63764	; 0xf914
   1069a:	f2c0 0001 	movt	r0, #1
   1069e:	6801      	ldr	r1, [r0, #0]
   106a0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   106a4:	f100 0212 	add.w	r2, r0, #18
   106a8:	f8cd 2c24 	str.w	r2, [sp, #3108]	; 0xc24
   106ac:	f8dd 2c24 	ldr.w	r2, [sp, #3108]	; 0xc24
   106b0:	f8cd 2c8c 	str.w	r2, [sp, #3212]	; 0xc8c
   106b4:	f249 13cf 	movw	r3, #37327	; 0x91cf
   106b8:	f2c0 0301 	movt	r3, #1
   106bc:	4610      	mov	r0, r2
   106be:	910f      	str	r1, [sp, #60]	; 0x3c
   106c0:	4619      	mov	r1, r3
   106c2:	f7fa f889 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
   106c6:	900e      	str	r0, [sp, #56]	; 0x38
   106c8:	910d      	str	r1, [sp, #52]	; 0x34
   106ca:	e7ff      	b.n	106cc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3408>
   106cc:	980e      	ldr	r0, [sp, #56]	; 0x38
   106ce:	f8cd 0c1c 	str.w	r0, [sp, #3100]	; 0xc1c
   106d2:	990d      	ldr	r1, [sp, #52]	; 0x34
   106d4:	f8cd 1c20 	str.w	r1, [sp, #3104]	; 0xc20
   106d8:	f64f 1238 	movw	r2, #63800	; 0xf938
   106dc:	f2c0 0201 	movt	r2, #1
   106e0:	6812      	ldr	r2, [r2, #0]
   106e2:	466b      	mov	r3, sp
   106e4:	f04f 0c01 	mov.w	ip, #1
   106e8:	f8c3 c008 	str.w	ip, [r3, #8]
   106ec:	605a      	str	r2, [r3, #4]
   106ee:	f8c3 c000 	str.w	ip, [r3]
   106f2:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
   106f6:	2202      	movs	r2, #2
   106f8:	f60d 431c 	addw	r3, sp, #3100	; 0xc1c
   106fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
   106fe:	f006 f99c 	bl	16a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   10702:	e7ff      	b.n	10704 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3440>
   10704:	f8dd 1bf8 	ldr.w	r1, [sp, #3064]	; 0xbf8
   10708:	f64f 1078 	movw	r0, #63864	; 0xf978
   1070c:	f2c0 0001 	movt	r0, #1
   10710:	6802      	ldr	r2, [r0, #0]
   10712:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
   10716:	f001 fea9 	bl	1246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
   1071a:	e7ff      	b.n	1071c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3458>
   1071c:	e7ff      	b.n	1071e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x345a>
                let x = x as usize;
   1071e:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
   10722:	f8cd 0c90 	str.w	r0, [sp, #3216]	; 0xc90
                for i in 0..(x + 1) {
   10726:	1c41      	adds	r1, r0, #1
   10728:	460a      	mov	r2, r1
   1072a:	4281      	cmp	r1, r0
   1072c:	920c      	str	r2, [sp, #48]	; 0x30
   1072e:	f0c0 80bb 	bcc.w	108a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x35e4>
   10732:	e7ff      	b.n	10734 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3470>
   10734:	2000      	movs	r0, #0
   10736:	f8cd 0c28 	str.w	r0, [sp, #3112]	; 0xc28
   1073a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1073c:	f8cd 0c2c 	str.w	r0, [sp, #3116]	; 0xc2c
   10740:	f8dd 0c28 	ldr.w	r0, [sp, #3112]	; 0xc28
   10744:	f8dd 1c2c 	ldr.w	r1, [sp, #3116]	; 0xc2c
   10748:	f001 fc1c 	bl	11f84 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
   1074c:	900b      	str	r0, [sp, #44]	; 0x2c
   1074e:	910a      	str	r1, [sp, #40]	; 0x28
   10750:	e7ff      	b.n	10752 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x348e>
   10752:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10754:	f8cd 0c30 	str.w	r0, [sp, #3120]	; 0xc30
   10758:	990a      	ldr	r1, [sp, #40]	; 0x28
   1075a:	f8cd 1c34 	str.w	r1, [sp, #3124]	; 0xc34
   1075e:	e7ff      	b.n	10760 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x349c>
   10760:	f50d 6043 	add.w	r0, sp, #3120	; 0xc30
   10764:	f001 fb83 	bl	11e6e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   10768:	f8cd 1c3c 	str.w	r1, [sp, #3132]	; 0xc3c
   1076c:	f8cd 0c38 	str.w	r0, [sp, #3128]	; 0xc38
   10770:	e7ff      	b.n	10772 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x34ae>
   10772:	f8dd 0c38 	ldr.w	r0, [sp, #3128]	; 0xc38
   10776:	2800      	cmp	r0, #0
   10778:	d001      	beq.n	1077e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x34ba>
   1077a:	e7ff      	b.n	1077c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x34b8>
   1077c:	e001      	b.n	10782 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x34be>
        match (
   1077e:	e06e      	b.n	1085e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x359a>
                for i in 0..(x + 1) {
   10780:	defe      	udf	#254	; 0xfe
   10782:	f8dd 0c3c 	ldr.w	r0, [sp, #3132]	; 0xc3c
   10786:	f8cd 0c94 	str.w	r0, [sp, #3220]	; 0xc94
   1078a:	f8cd 0c98 	str.w	r0, [sp, #3224]	; 0xc98
   1078e:	f8cd 0c9c 	str.w	r0, [sp, #3228]	; 0xc9c
                    self.v[i] = self.mem[self.i as usize + i];
   10792:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   10796:	8a0a      	ldrh	r2, [r1, #16]
   10798:	1813      	adds	r3, r2, r0
   1079a:	469c      	mov	ip, r3
   1079c:	4293      	cmp	r3, r2
   1079e:	9009      	str	r0, [sp, #36]	; 0x24
   107a0:	f8cd c020 	str.w	ip, [sp, #32]
   107a4:	f0c0 808c 	bcc.w	108c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x35fc>
   107a8:	e7ff      	b.n	107aa <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x34e6>
   107aa:	2000      	movs	r0, #0
   107ac:	9908      	ldr	r1, [sp, #32]
   107ae:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
   107b2:	f040 8091 	bne.w	108d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3614>
   107b6:	e7ff      	b.n	107b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x34f4>
   107b8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   107bc:	9908      	ldr	r1, [sp, #32]
   107be:	1842      	adds	r2, r0, r1
   107c0:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
   107c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   107c6:	2b0f      	cmp	r3, #15
   107c8:	9207      	str	r2, [sp, #28]
   107ca:	f200 808f 	bhi.w	108ec <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3628>
   107ce:	e7ff      	b.n	107d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x350c>
   107d0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   107d4:	9909      	ldr	r1, [sp, #36]	; 0x24
   107d6:	1842      	adds	r2, r0, r1
   107d8:	9b07      	ldr	r3, [sp, #28]
   107da:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                for i in 0..(x + 1) {
   107de:	e7bf      	b.n	10760 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x349c>
   107e0:	f249 11cf 	movw	r1, #37327	; 0x91cf
   107e4:	f2c0 0101 	movt	r1, #1
   107e8:	f8dd 0430 	ldr.w	r0, [sp, #1072]	; 0x430
   107ec:	f7f9 fff4 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
   107f0:	9006      	str	r0, [sp, #24]
   107f2:	9105      	str	r1, [sp, #20]
   107f4:	e7ff      	b.n	107f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x3532>
   107f6:	f8dd 042c 	ldr.w	r0, [sp, #1068]	; 0x42c
   107fa:	f8cd 0c58 	str.w	r0, [sp, #3160]	; 0xc58
   107fe:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
   10802:	f8cd 1c5c 	str.w	r1, [sp, #3164]	; 0xc5c
   10806:	9a06      	ldr	r2, [sp, #24]
   10808:	f8cd 2c60 	str.w	r2, [sp, #3168]	; 0xc60
   1080c:	9b05      	ldr	r3, [sp, #20]
   1080e:	f8cd 3c64 	str.w	r3, [sp, #3172]	; 0xc64
   10812:	f240 4cdc 	movw	ip, #1244	; 0x4dc
   10816:	f2c0 0c02 	movt	ip, #2
   1081a:	f8dc c000 	ldr.w	ip, [ip]
   1081e:	46ee      	mov	lr, sp
   10820:	2402      	movs	r4, #2
   10822:	f8ce 4008 	str.w	r4, [lr, #8]
   10826:	f8ce c004 	str.w	ip, [lr, #4]
   1082a:	f8ce 4000 	str.w	r4, [lr]
   1082e:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
   10832:	f60d 4358 	addw	r3, sp, #3160	; 0xc58
   10836:	f8dd 1434 	ldr.w	r1, [sp, #1076]	; 0x434
   1083a:	4622      	mov	r2, r4
   1083c:	f006 f8fd 	bl	16a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   10840:	e7ff      	b.n	10842 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x357e>
   10842:	f240 5000 	movw	r0, #1280	; 0x500
   10846:	f2c0 0002 	movt	r0, #2
   1084a:	f007 f8ac 	bl	179a6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1084e:	9004      	str	r0, [sp, #16]
   10850:	e7ff      	b.n	10852 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb97914a49019b8e9E+0x358e>
   10852:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
   10856:	9904      	ldr	r1, [sp, #16]
   10858:	f007 f8e2 	bl	17a20 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1085c:	defe      	udf	#254	; 0xfe
        }
    }
   1085e:	f50d 6d6c 	add.w	sp, sp, #3776	; 0xec0
   10862:	bd70      	pop	{r4, r5, r6, pc}
        let h = self.mem[self.pc as usize] as u16;
   10864:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
   10868:	f2c0 0001 	movt	r0, #1
   1086c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10870:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
   10874:	f007 f8b4 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10878:	defe      	udf	#254	; 0xfe
        let l = self.mem[(self.pc + 1) as usize] as u16;
   1087a:	f64f 00c0 	movw	r0, #63680	; 0xf8c0
   1087e:	f2c0 0001 	movt	r0, #1
   10882:	f64f 02b0 	movw	r2, #63664	; 0xf8b0
   10886:	f2c0 0201 	movt	r2, #1
   1088a:	211c      	movs	r1, #28
   1088c:	f007 f892 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10890:	defe      	udf	#254	; 0xfe
   10892:	f64f 00dc 	movw	r0, #63708	; 0xf8dc
   10896:	f2c0 0001 	movt	r0, #1
   1089a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1089e:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
   108a2:	f007 f89d 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   108a6:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
   108a8:	f64f 00c0 	movw	r0, #63680	; 0xf8c0
   108ac:	f2c0 0001 	movt	r0, #1
   108b0:	f64f 127c 	movw	r2, #63868	; 0xf97c
   108b4:	f2c0 0201 	movt	r2, #1
   108b8:	211c      	movs	r1, #28
   108ba:	f007 f87b 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   108be:	defe      	udf	#254	; 0xfe
                    self.v[i] = self.mem[self.i as usize + i];
   108c0:	f64f 00c0 	movw	r0, #63680	; 0xf8c0
   108c4:	f2c0 0001 	movt	r0, #1
   108c8:	f64f 128c 	movw	r2, #63884	; 0xf98c
   108cc:	f2c0 0201 	movt	r2, #1
   108d0:	211c      	movs	r1, #28
   108d2:	f007 f86f 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   108d6:	defe      	udf	#254	; 0xfe
   108d8:	f64f 109c 	movw	r0, #63900	; 0xf99c
   108dc:	f2c0 0001 	movt	r0, #1
   108e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   108e4:	9908      	ldr	r1, [sp, #32]
   108e6:	f007 f87b 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   108ea:	defe      	udf	#254	; 0xfe
   108ec:	f64f 10ac 	movw	r0, #63916	; 0xf9ac
   108f0:	f2c0 0001 	movt	r0, #1
   108f4:	2210      	movs	r2, #16
   108f6:	9909      	ldr	r1, [sp, #36]	; 0x24
   108f8:	f007 f872 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   108fc:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
   108fe:	f64f 00c0 	movw	r0, #63680	; 0xf8c0
   10902:	f2c0 0001 	movt	r0, #1
   10906:	f64f 12fc 	movw	r2, #63996	; 0xf9fc
   1090a:	f2c0 0201 	movt	r2, #1
   1090e:	211c      	movs	r1, #28
   10910:	f007 f850 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10914:	defe      	udf	#254	; 0xfe
                    self.mem[self.i as usize + i] = self.v[i];
   10916:	f64f 200c 	movw	r0, #64012	; 0xfa0c
   1091a:	f2c0 0001 	movt	r0, #1
   1091e:	2210      	movs	r2, #16
   10920:	9914      	ldr	r1, [sp, #80]	; 0x50
   10922:	f007 f85d 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10926:	defe      	udf	#254	; 0xfe
   10928:	f64f 00c0 	movw	r0, #63680	; 0xf8c0
   1092c:	f2c0 0001 	movt	r0, #1
   10930:	f64f 221c 	movw	r2, #64028	; 0xfa1c
   10934:	f2c0 0201 	movt	r2, #1
   10938:	211c      	movs	r1, #28
   1093a:	f007 f83b 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1093e:	defe      	udf	#254	; 0xfe
   10940:	f64f 202c 	movw	r0, #64044	; 0xfa2c
   10944:	f2c0 0001 	movt	r0, #1
   10948:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1094c:	9912      	ldr	r1, [sp, #72]	; 0x48
   1094e:	f007 f847 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10952:	defe      	udf	#254	; 0xfe
                let bcd = self.v[x];
   10954:	f64f 207c 	movw	r0, #64124	; 0xfa7c
   10958:	f2c0 0001 	movt	r0, #1
   1095c:	2210      	movs	r2, #16
   1095e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10962:	f007 f83d 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10966:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize] = (bcd / 100) % 10;
   10968:	f64f 208c 	movw	r0, #64140	; 0xfa8c
   1096c:	f2c0 0001 	movt	r0, #1
   10970:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10974:	9920      	ldr	r1, [sp, #128]	; 0x80
   10976:	f007 f833 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1097a:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
   1097c:	f64f 00c0 	movw	r0, #63680	; 0xf8c0
   10980:	f2c0 0001 	movt	r0, #1
   10984:	f64f 229c 	movw	r2, #64156	; 0xfa9c
   10988:	f2c0 0201 	movt	r2, #1
   1098c:	211c      	movs	r1, #28
   1098e:	f007 f811 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10992:	defe      	udf	#254	; 0xfe
   10994:	f64f 20ac 	movw	r0, #64172	; 0xfaac
   10998:	f2c0 0001 	movt	r0, #1
   1099c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   109a0:	991e      	ldr	r1, [sp, #120]	; 0x78
   109a2:	f007 f81d 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   109a6:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 2] = bcd % 10;
   109a8:	f64f 00c0 	movw	r0, #63680	; 0xf8c0
   109ac:	f2c0 0001 	movt	r0, #1
   109b0:	f64f 22bc 	movw	r2, #64188	; 0xfabc
   109b4:	f2c0 0201 	movt	r2, #1
   109b8:	211c      	movs	r1, #28
   109ba:	f006 fffb 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   109be:	defe      	udf	#254	; 0xfe
   109c0:	f64f 20cc 	movw	r0, #64204	; 0xfacc
   109c4:	f2c0 0001 	movt	r0, #1
   109c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   109cc:	991d      	ldr	r1, [sp, #116]	; 0x74
   109ce:	f007 f807 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   109d2:	defe      	udf	#254	; 0xfe
                self.i = (self.v[x] * 5).into();
   109d4:	f64f 301c 	movw	r0, #64284	; 0xfb1c
   109d8:	f2c0 0001 	movt	r0, #1
   109dc:	2210      	movs	r2, #16
   109de:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   109e2:	f006 fffd 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   109e6:	defe      	udf	#254	; 0xfe
   109e8:	f64f 3040 	movw	r0, #64320	; 0xfb40
   109ec:	f2c0 0001 	movt	r0, #1
   109f0:	f64f 322c 	movw	r2, #64300	; 0xfb2c
   109f4:	f2c0 0201 	movt	r2, #1
   109f8:	2121      	movs	r1, #33	; 0x21
   109fa:	f006 ffdb 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   109fe:	defe      	udf	#254	; 0xfe
                self.i = self.i.wrapping_add(self.v[x].into());
   10a00:	f64f 30a0 	movw	r0, #64416	; 0xfba0
   10a04:	f2c0 0001 	movt	r0, #1
   10a08:	2210      	movs	r2, #16
   10a0a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10a0e:	f006 ffe7 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10a12:	defe      	udf	#254	; 0xfe
                self.st = self.v[x];
   10a14:	f64f 30f0 	movw	r0, #64496	; 0xfbf0
   10a18:	f2c0 0001 	movt	r0, #1
   10a1c:	2210      	movs	r2, #16
   10a1e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10a22:	f006 ffdd 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10a26:	defe      	udf	#254	; 0xfe
                self.dt = self.v[x];
   10a28:	f64f 4040 	movw	r0, #64576	; 0xfc40
   10a2c:	f2c0 0001 	movt	r0, #1
   10a30:	2210      	movs	r2, #16
   10a32:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10a36:	f006 ffd3 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10a3a:	defe      	udf	#254	; 0xfe
                self.v[x] = self.waitkey();
   10a3c:	f64f 4090 	movw	r0, #64656	; 0xfc90
   10a40:	f2c0 0001 	movt	r0, #1
   10a44:	2210      	movs	r2, #16
   10a46:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10a4a:	f006 ffc9 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10a4e:	defe      	udf	#254	; 0xfe
                self.v[x] = self.dt;
   10a50:	f64f 40e0 	movw	r0, #64736	; 0xfce0
   10a54:	f2c0 0001 	movt	r0, #1
   10a58:	2210      	movs	r2, #16
   10a5a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10a5e:	f006 ffbf 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10a62:	defe      	udf	#254	; 0xfe
                if !self.hw.key(self.v[x]) {
   10a64:	f64f 5030 	movw	r0, #64816	; 0xfd30
   10a68:	f2c0 0001 	movt	r0, #1
   10a6c:	2210      	movs	r2, #16
   10a6e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10a72:	f006 ffb5 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10a76:	defe      	udf	#254	; 0xfe
                if self.hw.key(self.v[x]) {
   10a78:	f64f 5074 	movw	r0, #64884	; 0xfd74
   10a7c:	f2c0 0001 	movt	r0, #1
   10a80:	2210      	movs	r2, #16
   10a82:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10a86:	f006 ffab 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10a8a:	defe      	udf	#254	; 0xfe
                let basex = self.v[x] as usize;
   10a8c:	f64f 50c8 	movw	r0, #64968	; 0xfdc8
   10a90:	f2c0 0001 	movt	r0, #1
   10a94:	2210      	movs	r2, #16
   10a96:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10a9a:	f006 ffa1 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10a9e:	defe      	udf	#254	; 0xfe
                let basey = self.v[y] as usize;
   10aa0:	f64f 50d8 	movw	r0, #64984	; 0xfdd8
   10aa4:	f2c0 0001 	movt	r0, #1
   10aa8:	2210      	movs	r2, #16
   10aaa:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10aae:	f006 ff97 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10ab2:	defe      	udf	#254	; 0xfe
                    let b = self.mem[self.i as usize + y];
   10ab4:	f64f 00c0 	movw	r0, #63680	; 0xf8c0
   10ab8:	f2c0 0001 	movt	r0, #1
   10abc:	f64f 52e8 	movw	r2, #65000	; 0xfde8
   10ac0:	f2c0 0201 	movt	r2, #1
   10ac4:	211c      	movs	r1, #28
   10ac6:	f006 ff75 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10aca:	defe      	udf	#254	; 0xfe
   10acc:	f64f 50f8 	movw	r0, #65016	; 0xfdf8
   10ad0:	f2c0 0001 	movt	r0, #1
   10ad4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10ad8:	9967      	ldr	r1, [sp, #412]	; 0x19c
   10ada:	f006 ff81 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10ade:	defe      	udf	#254	; 0xfe
                    let vramy = (y + basey) % h;
   10ae0:	f64f 00c0 	movw	r0, #63680	; 0xf8c0
   10ae4:	f2c0 0001 	movt	r0, #1
   10ae8:	f64f 6208 	movw	r2, #65032	; 0xfe08
   10aec:	f2c0 0201 	movt	r2, #1
   10af0:	211c      	movs	r1, #28
   10af2:	f006 ff5f 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10af6:	defe      	udf	#254	; 0xfe
   10af8:	f64f 6020 	movw	r0, #65056	; 0xfe20
   10afc:	f2c0 0001 	movt	r0, #1
   10b00:	f64f 6208 	movw	r2, #65032	; 0xfe08
   10b04:	f2c0 0201 	movt	r2, #1
   10b08:	2139      	movs	r1, #57	; 0x39
   10b0a:	f006 ff53 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10b0e:	defe      	udf	#254	; 0xfe
                        let vramx = (x + basex) % w;
   10b10:	f64f 00c0 	movw	r0, #63680	; 0xf8c0
   10b14:	f2c0 0001 	movt	r0, #1
   10b18:	f64f 625c 	movw	r2, #65116	; 0xfe5c
   10b1c:	f2c0 0201 	movt	r2, #1
   10b20:	211c      	movs	r1, #28
   10b22:	f006 ff47 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10b26:	defe      	udf	#254	; 0xfe
   10b28:	f64f 6020 	movw	r0, #65056	; 0xfe20
   10b2c:	f2c0 0001 	movt	r0, #1
   10b30:	f64f 625c 	movw	r2, #65116	; 0xfe5c
   10b34:	f2c0 0201 	movt	r2, #1
   10b38:	2139      	movs	r1, #57	; 0x39
   10b3a:	f006 ff3b 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10b3e:	defe      	udf	#254	; 0xfe
                        let src = (b & 1 << (7 - x)) > 0;
   10b40:	f64f 6080 	movw	r0, #65152	; 0xfe80
   10b44:	f2c0 0001 	movt	r0, #1
   10b48:	f64f 626c 	movw	r2, #65132	; 0xfe6c
   10b4c:	f2c0 0201 	movt	r2, #1
   10b50:	2121      	movs	r1, #33	; 0x21
   10b52:	f006 ff2f 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10b56:	defe      	udf	#254	; 0xfe
   10b58:	f64f 60c0 	movw	r0, #65216	; 0xfec0
   10b5c:	f2c0 0001 	movt	r0, #1
   10b60:	f64f 62a4 	movw	r2, #65188	; 0xfea4
   10b64:	f2c0 0201 	movt	r2, #1
   10b68:	2123      	movs	r1, #35	; 0x23
   10b6a:	f006 ff23 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10b6e:	defe      	udf	#254	; 0xfe
                self.v[x] = self.hw.rand() & kk;
   10b70:	f64f 7024 	movw	r0, #65316	; 0xff24
   10b74:	f2c0 0001 	movt	r0, #1
   10b78:	2210      	movs	r2, #16
   10b7a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10b7e:	f006 ff2f 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10b82:	defe      	udf	#254	; 0xfe
                if self.v[x] != self.v[y] {
   10b84:	f64f 70f4 	movw	r0, #65524	; 0xfff4
   10b88:	f2c0 0001 	movt	r0, #1
   10b8c:	2210      	movs	r2, #16
   10b8e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10b92:	f006 ff25 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10b96:	defe      	udf	#254	; 0xfe
   10b98:	f240 0004 	movw	r0, #4
   10b9c:	f2c0 0002 	movt	r0, #2
   10ba0:	2210      	movs	r2, #16
   10ba2:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10ba6:	f006 ff1b 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10baa:	defe      	udf	#254	; 0xfe
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
   10bac:	f240 0054 	movw	r0, #84	; 0x54
   10bb0:	f2c0 0002 	movt	r0, #2
   10bb4:	2210      	movs	r2, #16
   10bb6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10bba:	f006 ff11 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10bbe:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shl(1);
   10bc0:	f240 0064 	movw	r0, #100	; 0x64
   10bc4:	f2c0 0002 	movt	r0, #2
   10bc8:	2210      	movs	r2, #16
   10bca:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10bce:	f006 ff07 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10bd2:	defe      	udf	#254	; 0xfe
   10bd4:	f240 0074 	movw	r0, #116	; 0x74
   10bd8:	f2c0 0002 	movt	r0, #2
   10bdc:	2210      	movs	r2, #16
   10bde:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10be2:	f006 fefd 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10be6:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
   10be8:	f240 00c8 	movw	r0, #200	; 0xc8
   10bec:	f2c0 0002 	movt	r0, #2
   10bf0:	2210      	movs	r2, #16
   10bf2:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10bf6:	f006 fef3 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10bfa:	defe      	udf	#254	; 0xfe
   10bfc:	f240 00d8 	movw	r0, #216	; 0xd8
   10c00:	f2c0 0002 	movt	r0, #2
   10c04:	2210      	movs	r2, #16
   10c06:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10c0a:	f006 fee9 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c0e:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
   10c10:	f240 00e8 	movw	r0, #232	; 0xe8
   10c14:	f2c0 0002 	movt	r0, #2
   10c18:	2210      	movs	r2, #16
   10c1a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10c1e:	f006 fedf 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c22:	defe      	udf	#254	; 0xfe
                self.v[0xf] = self.v[x] & 1;
   10c24:	f240 1038 	movw	r0, #312	; 0x138
   10c28:	f2c0 0002 	movt	r0, #2
   10c2c:	2210      	movs	r2, #16
   10c2e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10c32:	f006 fed5 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c36:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shr(1);
   10c38:	f240 1048 	movw	r0, #328	; 0x148
   10c3c:	f2c0 0002 	movt	r0, #2
   10c40:	2210      	movs	r2, #16
   10c42:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10c46:	f006 fecb 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c4a:	defe      	udf	#254	; 0xfe
   10c4c:	f240 1058 	movw	r0, #344	; 0x158
   10c50:	f2c0 0002 	movt	r0, #2
   10c54:	2210      	movs	r2, #16
   10c56:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10c5a:	f006 fec1 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c5e:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
   10c60:	f240 10a8 	movw	r0, #424	; 0x1a8
   10c64:	f2c0 0002 	movt	r0, #2
   10c68:	2210      	movs	r2, #16
   10c6a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10c6e:	f006 feb7 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c72:	defe      	udf	#254	; 0xfe
   10c74:	f240 10b8 	movw	r0, #440	; 0x1b8
   10c78:	f2c0 0002 	movt	r0, #2
   10c7c:	2210      	movs	r2, #16
   10c7e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10c82:	f006 fead 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c86:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
   10c88:	f240 10c8 	movw	r0, #456	; 0x1c8
   10c8c:	f2c0 0002 	movt	r0, #2
   10c90:	2210      	movs	r2, #16
   10c92:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10c96:	f006 fea3 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c9a:	defe      	udf	#254	; 0xfe
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
   10c9c:	f240 2018 	movw	r0, #536	; 0x218
   10ca0:	f2c0 0002 	movt	r0, #2
   10ca4:	2210      	movs	r2, #16
   10ca6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10caa:	f006 fe99 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10cae:	defe      	udf	#254	; 0xfe
   10cb0:	f240 2028 	movw	r0, #552	; 0x228
   10cb4:	f2c0 0002 	movt	r0, #2
   10cb8:	2210      	movs	r2, #16
   10cba:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10cbe:	f006 fe8f 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10cc2:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
   10cc4:	f240 2038 	movw	r0, #568	; 0x238
   10cc8:	f2c0 0002 	movt	r0, #2
   10ccc:	2210      	movs	r2, #16
   10cce:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10cd2:	f006 fe85 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10cd6:	defe      	udf	#254	; 0xfe
                self.v[x] ^= self.v[y];
   10cd8:	f240 2088 	movw	r0, #648	; 0x288
   10cdc:	f2c0 0002 	movt	r0, #2
   10ce0:	2210      	movs	r2, #16
   10ce2:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10ce6:	f006 fe7b 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10cea:	defe      	udf	#254	; 0xfe
   10cec:	f240 2098 	movw	r0, #664	; 0x298
   10cf0:	f2c0 0002 	movt	r0, #2
   10cf4:	2210      	movs	r2, #16
   10cf6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10cfa:	f006 fe71 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10cfe:	defe      	udf	#254	; 0xfe
                self.v[x] &= self.v[y];
   10d00:	f240 20e8 	movw	r0, #744	; 0x2e8
   10d04:	f2c0 0002 	movt	r0, #2
   10d08:	2210      	movs	r2, #16
   10d0a:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10d0e:	f006 fe67 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10d12:	defe      	udf	#254	; 0xfe
   10d14:	f240 20f8 	movw	r0, #760	; 0x2f8
   10d18:	f2c0 0002 	movt	r0, #2
   10d1c:	2210      	movs	r2, #16
   10d1e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10d22:	f006 fe5d 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10d26:	defe      	udf	#254	; 0xfe
                self.v[x] |= self.v[y];
   10d28:	f240 3048 	movw	r0, #840	; 0x348
   10d2c:	f2c0 0002 	movt	r0, #2
   10d30:	2210      	movs	r2, #16
   10d32:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10d36:	f006 fe53 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10d3a:	defe      	udf	#254	; 0xfe
   10d3c:	f240 3058 	movw	r0, #856	; 0x358
   10d40:	f2c0 0002 	movt	r0, #2
   10d44:	2210      	movs	r2, #16
   10d46:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10d4a:	f006 fe49 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10d4e:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[y];
   10d50:	f240 30a8 	movw	r0, #936	; 0x3a8
   10d54:	f2c0 0002 	movt	r0, #2
   10d58:	2210      	movs	r2, #16
   10d5a:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10d5e:	f006 fe3f 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10d62:	defe      	udf	#254	; 0xfe
   10d64:	f240 30b8 	movw	r0, #952	; 0x3b8
   10d68:	f2c0 0002 	movt	r0, #2
   10d6c:	2210      	movs	r2, #16
   10d6e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10d72:	f006 fe35 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10d76:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_add(kk);
   10d78:	f240 4008 	movw	r0, #1032	; 0x408
   10d7c:	f2c0 0002 	movt	r0, #2
   10d80:	2210      	movs	r2, #16
   10d82:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10d86:	f006 fe2b 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10d8a:	defe      	udf	#254	; 0xfe
   10d8c:	f240 4018 	movw	r0, #1048	; 0x418
   10d90:	f2c0 0002 	movt	r0, #2
   10d94:	2210      	movs	r2, #16
   10d96:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10d9a:	f006 fe21 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10d9e:	defe      	udf	#254	; 0xfe
                self.v[x] = kk;
   10da0:	f240 4068 	movw	r0, #1128	; 0x468
   10da4:	f2c0 0002 	movt	r0, #2
   10da8:	2210      	movs	r2, #16
   10daa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10dae:	f006 fe17 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10db2:	defe      	udf	#254	; 0xfe
                if self.v[x] == self.v[y] {
   10db4:	f240 5050 	movw	r0, #1360	; 0x550
   10db8:	f2c0 0002 	movt	r0, #2
   10dbc:	2210      	movs	r2, #16
   10dbe:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10dc2:	f006 fe0d 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10dc6:	defe      	udf	#254	; 0xfe
   10dc8:	f240 5060 	movw	r0, #1376	; 0x560
   10dcc:	f2c0 0002 	movt	r0, #2
   10dd0:	2210      	movs	r2, #16
   10dd2:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10dd6:	f006 fe03 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10dda:	defe      	udf	#254	; 0xfe
                if self.v[x] != kk {
   10ddc:	f240 50b0 	movw	r0, #1456	; 0x5b0
   10de0:	f2c0 0002 	movt	r0, #2
   10de4:	2210      	movs	r2, #16
   10de6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10dea:	f006 fdf9 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10dee:	defe      	udf	#254	; 0xfe
                if self.v[x] == kk {
   10df0:	f240 6000 	movw	r0, #1536	; 0x600
   10df4:	f2c0 0002 	movt	r0, #2
   10df8:	2210      	movs	r2, #16
   10dfa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10dfe:	f006 fdef 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10e02:	defe      	udf	#254	; 0xfe

00010e04 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h49e76ed73fb545efE>:
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
   10e04:	b580      	push	{r7, lr}
   10e06:	b086      	sub	sp, #24
   10e08:	9104      	str	r1, [sp, #16]
   10e0a:	9205      	str	r2, [sp, #20]
   10e0c:	6809      	ldr	r1, [r1, #0]
   10e0e:	6809      	ldr	r1, [r1, #0]
   10e10:	2300      	movs	r3, #0
   10e12:	9301      	str	r3, [sp, #4]
   10e14:	9102      	str	r1, [sp, #8]
   10e16:	9203      	str	r2, [sp, #12]
   10e18:	9901      	ldr	r1, [sp, #4]
   10e1a:	9a02      	ldr	r2, [sp, #8]
   10e1c:	9b03      	ldr	r3, [sp, #12]
   10e1e:	f000 fbc4 	bl	115aa <_ZN4core4iter6traits8iterator8Iterator3map17hc90e18db8965d900E>
   10e22:	e7ff      	b.n	10e24 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h49e76ed73fb545efE+0x20>
   10e24:	b006      	add	sp, #24
   10e26:	bd80      	pop	{r7, pc}

00010e28 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h6f4e867a15b2a6b1E>:
   10e28:	b084      	sub	sp, #16
   10e2a:	9002      	str	r0, [sp, #8]
   10e2c:	9103      	str	r1, [sp, #12]
   10e2e:	6800      	ldr	r0, [r0, #0]
   10e30:	9000      	str	r0, [sp, #0]
   10e32:	9101      	str	r1, [sp, #4]
   10e34:	9800      	ldr	r0, [sp, #0]
   10e36:	9901      	ldr	r1, [sp, #4]
   10e38:	b004      	add	sp, #16
   10e3a:	4770      	bx	lr

00010e3c <_ZN8libchip814Chip8$LT$T$GT$4jump17h6461abfe105496f2E>:
    fn jump(&mut self, pc: u16) {
   10e3c:	b082      	sub	sp, #8
   10e3e:	460a      	mov	r2, r1
   10e40:	9000      	str	r0, [sp, #0]
   10e42:	f8ad 1006 	strh.w	r1, [sp, #6]
        self.pc = pc;
   10e46:	8241      	strh	r1, [r0, #18]
    }
   10e48:	b002      	add	sp, #8
   10e4a:	4770      	bx	lr

00010e4c <_ZN8libchip814Chip8$LT$T$GT$4load17h579031262a124884E>:
    fn load(&mut self, rom: &[u8]) {
   10e4c:	b580      	push	{r7, lr}
   10e4e:	b08a      	sub	sp, #40	; 0x28
   10e50:	9105      	str	r1, [sp, #20]
   10e52:	9206      	str	r2, [sp, #24]
   10e54:	9009      	str	r0, [sp, #36]	; 0x24
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
   10e56:	3047      	adds	r0, #71	; 0x47
   10e58:	9905      	ldr	r1, [sp, #20]
   10e5a:	9a06      	ldr	r2, [sp, #24]
   10e5c:	9004      	str	r0, [sp, #16]
   10e5e:	4608      	mov	r0, r1
   10e60:	4611      	mov	r1, r2
   10e62:	f001 f868 	bl	11f36 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   10e66:	9003      	str	r0, [sp, #12]
   10e68:	e7ff      	b.n	10e6a <_ZN8libchip814Chip8$LT$T$GT$4load17h579031262a124884E+0x1e>
   10e6a:	9803      	ldr	r0, [sp, #12]
   10e6c:	f500 7100 	add.w	r1, r0, #512	; 0x200
   10e70:	460a      	mov	r2, r1
   10e72:	4281      	cmp	r1, r0
   10e74:	9202      	str	r2, [sp, #8]
   10e76:	d318      	bcc.n	10eaa <_ZN8libchip814Chip8$LT$T$GT$4load17h579031262a124884E+0x5e>
   10e78:	e7ff      	b.n	10e7a <_ZN8libchip814Chip8$LT$T$GT$4load17h579031262a124884E+0x2e>
   10e7a:	f44f 7000 	mov.w	r0, #512	; 0x200
   10e7e:	9007      	str	r0, [sp, #28]
   10e80:	9802      	ldr	r0, [sp, #8]
   10e82:	9008      	str	r0, [sp, #32]
   10e84:	9a07      	ldr	r2, [sp, #28]
   10e86:	9b08      	ldr	r3, [sp, #32]
   10e88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   10e8c:	9804      	ldr	r0, [sp, #16]
   10e8e:	f005 ff2b 	bl	16ce8 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h7f385561cf81b0ffE>
   10e92:	9001      	str	r0, [sp, #4]
   10e94:	9100      	str	r1, [sp, #0]
   10e96:	e7ff      	b.n	10e98 <_ZN8libchip814Chip8$LT$T$GT$4load17h579031262a124884E+0x4c>
   10e98:	9a05      	ldr	r2, [sp, #20]
   10e9a:	9b06      	ldr	r3, [sp, #24]
   10e9c:	9801      	ldr	r0, [sp, #4]
   10e9e:	9900      	ldr	r1, [sp, #0]
   10ea0:	f7f7 ff65 	bl	8d6e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
   10ea4:	e7ff      	b.n	10ea6 <_ZN8libchip814Chip8$LT$T$GT$4load17h579031262a124884E+0x5a>
    }
   10ea6:	b00a      	add	sp, #40	; 0x28
   10ea8:	bd80      	pop	{r7, pc}
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
   10eaa:	f64f 00c0 	movw	r0, #63680	; 0xf8c0
   10eae:	f2c0 0001 	movt	r0, #1
   10eb2:	f240 725c 	movw	r2, #1884	; 0x75c
   10eb6:	f2c0 0202 	movt	r2, #2
   10eba:	211c      	movs	r1, #28
   10ebc:	f006 fd7a 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10ec0:	defe      	udf	#254	; 0xfe

00010ec2 <_ZN8libchip814Chip8$LT$T$GT$4next17hcff432de15657423E>:
    fn next(&mut self) {
   10ec2:	b580      	push	{r7, lr}
   10ec4:	b084      	sub	sp, #16
   10ec6:	9003      	str	r0, [sp, #12]
        self.jump(self.pc.wrapping_add(2));
   10ec8:	8a41      	ldrh	r1, [r0, #18]
   10eca:	2202      	movs	r2, #2
   10ecc:	9002      	str	r0, [sp, #8]
   10ece:	4608      	mov	r0, r1
   10ed0:	4611      	mov	r1, r2
   10ed2:	f005 feb3 	bl	16c3c <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E>
   10ed6:	9001      	str	r0, [sp, #4]
   10ed8:	e7ff      	b.n	10eda <_ZN8libchip814Chip8$LT$T$GT$4next17hcff432de15657423E+0x18>
   10eda:	9802      	ldr	r0, [sp, #8]
   10edc:	9901      	ldr	r1, [sp, #4]
   10ede:	f7ff ffad 	bl	10e3c <_ZN8libchip814Chip8$LT$T$GT$4jump17h6461abfe105496f2E>
   10ee2:	e7ff      	b.n	10ee4 <_ZN8libchip814Chip8$LT$T$GT$4next17hcff432de15657423E+0x22>
    }
   10ee4:	b004      	add	sp, #16
   10ee6:	bd80      	pop	{r7, pc}

00010ee8 <_ZN8libchip814Chip8$LT$T$GT$4push17h7ae96cacff0c5af9E>:
    fn push(&mut self, item: u16) {
   10ee8:	b580      	push	{r7, lr}
   10eea:	b086      	sub	sp, #24
   10eec:	460a      	mov	r2, r1
   10eee:	9004      	str	r0, [sp, #16]
   10ef0:	f8ad 1016 	strh.w	r1, [sp, #22]
        self.stack[self.sp as usize] = item;
   10ef4:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
   10ef8:	460b      	mov	r3, r1
   10efa:	290f      	cmp	r1, #15
   10efc:	9003      	str	r0, [sp, #12]
   10efe:	9202      	str	r2, [sp, #8]
   10f00:	9301      	str	r3, [sp, #4]
   10f02:	d813      	bhi.n	10f2c <_ZN8libchip814Chip8$LT$T$GT$4push17h7ae96cacff0c5af9E+0x44>
   10f04:	e7ff      	b.n	10f06 <_ZN8libchip814Chip8$LT$T$GT$4push17h7ae96cacff0c5af9E+0x1e>
   10f06:	9803      	ldr	r0, [sp, #12]
   10f08:	9901      	ldr	r1, [sp, #4]
   10f0a:	eb00 0241 	add.w	r2, r0, r1, lsl #1
   10f0e:	9b02      	ldr	r3, [sp, #8]
   10f10:	8293      	strh	r3, [r2, #20]
        self.sp = self.sp.wrapping_add(1);
   10f12:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
   10f16:	2101      	movs	r1, #1
   10f18:	f005 fdf3 	bl	16b02 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE>
   10f1c:	9000      	str	r0, [sp, #0]
   10f1e:	e7ff      	b.n	10f20 <_ZN8libchip814Chip8$LT$T$GT$4push17h7ae96cacff0c5af9E+0x38>
   10f20:	9800      	ldr	r0, [sp, #0]
   10f22:	9903      	ldr	r1, [sp, #12]
   10f24:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
    }
   10f28:	b006      	add	sp, #24
   10f2a:	bd80      	pop	{r7, pc}
        self.stack[self.sp as usize] = item;
   10f2c:	f240 706c 	movw	r0, #1900	; 0x76c
   10f30:	f2c0 0002 	movt	r0, #2
   10f34:	2210      	movs	r2, #16
   10f36:	9901      	ldr	r1, [sp, #4]
   10f38:	f006 fd52 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10f3c:	defe      	udf	#254	; 0xfe

00010f3e <_ZN8libchip814Chip8$LT$T$GT$4tick17hbbabaa40bbcbc140E>:
    fn tick(&mut self) {
   10f3e:	b580      	push	{r7, lr}
   10f40:	b084      	sub	sp, #16
   10f42:	9003      	str	r0, [sp, #12]
        if self.dt > 0 {
   10f44:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
   10f48:	2900      	cmp	r1, #0
   10f4a:	9002      	str	r0, [sp, #8]
   10f4c:	d00f      	beq.n	10f6e <_ZN8libchip814Chip8$LT$T$GT$4tick17hbbabaa40bbcbc140E+0x30>
   10f4e:	e7ff      	b.n	10f50 <_ZN8libchip814Chip8$LT$T$GT$4tick17hbbabaa40bbcbc140E+0x12>
            self.dt -= 1;
   10f50:	9802      	ldr	r0, [sp, #8]
   10f52:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
   10f56:	3901      	subs	r1, #1
   10f58:	b2ca      	uxtb	r2, r1
   10f5a:	460b      	mov	r3, r1
   10f5c:	428a      	cmp	r2, r1
   10f5e:	9301      	str	r3, [sp, #4]
   10f60:	d129      	bne.n	10fb6 <_ZN8libchip814Chip8$LT$T$GT$4tick17hbbabaa40bbcbc140E+0x78>
   10f62:	e7ff      	b.n	10f64 <_ZN8libchip814Chip8$LT$T$GT$4tick17hbbabaa40bbcbc140E+0x26>
   10f64:	9801      	ldr	r0, [sp, #4]
   10f66:	9902      	ldr	r1, [sp, #8]
   10f68:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
        if self.dt > 0 {
   10f6c:	e7ff      	b.n	10f6e <_ZN8libchip814Chip8$LT$T$GT$4tick17hbbabaa40bbcbc140E+0x30>
        if self.st > 0 {
   10f6e:	9802      	ldr	r0, [sp, #8]
   10f70:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
   10f74:	2900      	cmp	r1, #0
   10f76:	d01c      	beq.n	10fb2 <_ZN8libchip814Chip8$LT$T$GT$4tick17hbbabaa40bbcbc140E+0x74>
   10f78:	e7ff      	b.n	10f7a <_ZN8libchip814Chip8$LT$T$GT$4tick17hbbabaa40bbcbc140E+0x3c>
            self.st -= 1;
   10f7a:	9802      	ldr	r0, [sp, #8]
   10f7c:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
   10f80:	3901      	subs	r1, #1
   10f82:	b2ca      	uxtb	r2, r1
   10f84:	460b      	mov	r3, r1
   10f86:	428a      	cmp	r2, r1
   10f88:	9300      	str	r3, [sp, #0]
   10f8a:	d120      	bne.n	10fce <_ZN8libchip814Chip8$LT$T$GT$4tick17hbbabaa40bbcbc140E+0x90>
   10f8c:	e7ff      	b.n	10f8e <_ZN8libchip814Chip8$LT$T$GT$4tick17hbbabaa40bbcbc140E+0x50>
   10f8e:	9800      	ldr	r0, [sp, #0]
   10f90:	9902      	ldr	r1, [sp, #8]
   10f92:	f881 0045 	strb.w	r0, [r1, #69]	; 0x45
            if self.st == 0 {
   10f96:	f891 2045 	ldrb.w	r2, [r1, #69]	; 0x45
   10f9a:	2a00      	cmp	r2, #0
   10f9c:	d108      	bne.n	10fb0 <_ZN8libchip814Chip8$LT$T$GT$4tick17hbbabaa40bbcbc140E+0x72>
   10f9e:	e7ff      	b.n	10fa0 <_ZN8libchip814Chip8$LT$T$GT$4tick17hbbabaa40bbcbc140E+0x62>
   10fa0:	f241 0048 	movw	r0, #4168	; 0x1048
                self.hw.beep();
   10fa4:	9902      	ldr	r1, [sp, #8]
   10fa6:	4408      	add	r0, r1
   10fa8:	f7fb f8d8 	bl	c15c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17h49979d340fb4b88bE>
   10fac:	e7ff      	b.n	10fae <_ZN8libchip814Chip8$LT$T$GT$4tick17hbbabaa40bbcbc140E+0x70>
            if self.st == 0 {
   10fae:	e7ff      	b.n	10fb0 <_ZN8libchip814Chip8$LT$T$GT$4tick17hbbabaa40bbcbc140E+0x72>
        if self.st > 0 {
   10fb0:	e7ff      	b.n	10fb2 <_ZN8libchip814Chip8$LT$T$GT$4tick17hbbabaa40bbcbc140E+0x74>
    }
   10fb2:	b004      	add	sp, #16
   10fb4:	bd80      	pop	{r7, pc}
            self.dt -= 1;
   10fb6:	f64f 6080 	movw	r0, #65152	; 0xfe80
   10fba:	f2c0 0001 	movt	r0, #1
   10fbe:	f240 727c 	movw	r2, #1916	; 0x77c
   10fc2:	f2c0 0202 	movt	r2, #2
   10fc6:	2121      	movs	r1, #33	; 0x21
   10fc8:	f006 fcf4 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10fcc:	defe      	udf	#254	; 0xfe
            self.st -= 1;
   10fce:	f64f 6080 	movw	r0, #65152	; 0xfe80
   10fd2:	f2c0 0001 	movt	r0, #1
   10fd6:	f240 728c 	movw	r2, #1932	; 0x78c
   10fda:	f2c0 0202 	movt	r2, #2
   10fde:	2121      	movs	r1, #33	; 0x21
   10fe0:	f006 fce8 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10fe4:	defe      	udf	#254	; 0xfe

00010fe6 <_ZN8libchip814Chip8$LT$T$GT$5sched17h92ff4f7288c44a1cE>:
    fn sched(&mut self) {
   10fe6:	b510      	push	{r4, lr}
   10fe8:	b098      	sub	sp, #96	; 0x60
   10fea:	9015      	str	r0, [sp, #84]	; 0x54
   10fec:	f241 0148 	movw	r1, #4168	; 0x1048
        if self.hw.sched() {
   10ff0:	4401      	add	r1, r0
   10ff2:	900b      	str	r0, [sp, #44]	; 0x2c
   10ff4:	4608      	mov	r0, r1
   10ff6:	f7fb f8b5 	bl	c164 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hee40d1bd360ff8d9E>
   10ffa:	900a      	str	r0, [sp, #40]	; 0x28
   10ffc:	e7ff      	b.n	10ffe <_ZN8libchip814Chip8$LT$T$GT$5sched17h92ff4f7288c44a1cE+0x18>
   10ffe:	980a      	ldr	r0, [sp, #40]	; 0x28
   11000:	07c1      	lsls	r1, r0, #31
   11002:	2900      	cmp	r1, #0
   11004:	d005      	beq.n	11012 <_ZN8libchip814Chip8$LT$T$GT$5sched17h92ff4f7288c44a1cE+0x2c>
   11006:	e7ff      	b.n	11008 <_ZN8libchip814Chip8$LT$T$GT$5sched17h92ff4f7288c44a1cE+0x22>
            self.shutdown();
   11008:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1100a:	f000 f90e 	bl	1122a <_ZN8libchip814Chip8$LT$T$GT$8shutdown17h099cb83aa147e3f4E>
   1100e:	e7ff      	b.n	11010 <_ZN8libchip814Chip8$LT$T$GT$5sched17h92ff4f7288c44a1cE+0x2a>
        if self.hw.sched() {
   11010:	e7ff      	b.n	11012 <_ZN8libchip814Chip8$LT$T$GT$5sched17h92ff4f7288c44a1cE+0x2c>
        if let Some(t) = self.time {
   11012:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11014:	6801      	ldr	r1, [r0, #0]
   11016:	2901      	cmp	r1, #1
   11018:	d009      	beq.n	1102e <_ZN8libchip814Chip8$LT$T$GT$5sched17h92ff4f7288c44a1cE+0x48>
   1101a:	e7ff      	b.n	1101c <_ZN8libchip814Chip8$LT$T$GT$5sched17h92ff4f7288c44a1cE+0x36>
   1101c:	f241 0048 	movw	r0, #4168	; 0x1048
            self.time = Some(self.hw.clock());
   11020:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11022:	4408      	add	r0, r1
   11024:	f7fb f838 	bl	c098 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17ha2f93e171d68b34dE>
   11028:	9109      	str	r1, [sp, #36]	; 0x24
   1102a:	9008      	str	r0, [sp, #32]
   1102c:	e046      	b.n	110bc <_ZN8libchip814Chip8$LT$T$GT$5sched17h92ff4f7288c44a1cE+0xd6>
        if let Some(t) = self.time {
   1102e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11030:	6881      	ldr	r1, [r0, #8]
   11032:	68c2      	ldr	r2, [r0, #12]
   11034:	9217      	str	r2, [sp, #92]	; 0x5c
   11036:	9116      	str	r1, [sp, #88]	; 0x58
   11038:	f241 0348 	movw	r3, #4168	; 0x1048
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
   1103c:	4418      	add	r0, r3
   1103e:	9107      	str	r1, [sp, #28]
   11040:	9206      	str	r2, [sp, #24]
   11042:	f7fb f829 	bl	c098 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17ha2f93e171d68b34dE>
   11046:	9105      	str	r1, [sp, #20]
   11048:	9004      	str	r0, [sp, #16]
   1104a:	e7ff      	b.n	1104c <_ZN8libchip814Chip8$LT$T$GT$5sched17h92ff4f7288c44a1cE+0x66>
   1104c:	9804      	ldr	r0, [sp, #16]
   1104e:	9905      	ldr	r1, [sp, #20]
   11050:	9a07      	ldr	r2, [sp, #28]
   11052:	9b06      	ldr	r3, [sp, #24]
   11054:	f005 fe14 	bl	16c80 <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h91461b58eecc5a2aE>
   11058:	9103      	str	r1, [sp, #12]
   1105a:	9002      	str	r0, [sp, #8]
   1105c:	e7ff      	b.n	1105e <_ZN8libchip814Chip8$LT$T$GT$5sched17h92ff4f7288c44a1cE+0x78>
   1105e:	f245 002b 	movw	r0, #20523	; 0x502b
   11062:	f2c0 00fe 	movt	r0, #254	; 0xfe
   11066:	9902      	ldr	r1, [sp, #8]
   11068:	1a08      	subs	r0, r1, r0
   1106a:	9a03      	ldr	r2, [sp, #12]
   1106c:	f172 0300 	sbcs.w	r3, r2, #0
   11070:	d323      	bcc.n	110ba <_ZN8libchip814Chip8$LT$T$GT$5sched17h92ff4f7288c44a1cE+0xd4>
   11072:	e7ff      	b.n	11074 <_ZN8libchip814Chip8$LT$T$GT$5sched17h92ff4f7288c44a1cE+0x8e>
                self.tick();
   11074:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11076:	f7ff ff62 	bl	10f3e <_ZN8libchip814Chip8$LT$T$GT$4tick17hbbabaa40bbcbc140E>
   1107a:	e7ff      	b.n	1107c <_ZN8libchip814Chip8$LT$T$GT$5sched17h92ff4f7288c44a1cE+0x96>
   1107c:	f241 0048 	movw	r0, #4168	; 0x1048
                self.time = Some(self.hw.clock());
   11080:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11082:	4408      	add	r0, r1
   11084:	f7fb f808 	bl	c098 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17ha2f93e171d68b34dE>
   11088:	9101      	str	r1, [sp, #4]
   1108a:	9000      	str	r0, [sp, #0]
   1108c:	e7ff      	b.n	1108e <_ZN8libchip814Chip8$LT$T$GT$5sched17h92ff4f7288c44a1cE+0xa8>
   1108e:	9800      	ldr	r0, [sp, #0]
   11090:	900e      	str	r0, [sp, #56]	; 0x38
   11092:	9901      	ldr	r1, [sp, #4]
   11094:	910f      	str	r1, [sp, #60]	; 0x3c
   11096:	2200      	movs	r2, #0
   11098:	920d      	str	r2, [sp, #52]	; 0x34
   1109a:	2201      	movs	r2, #1
   1109c:	920c      	str	r2, [sp, #48]	; 0x30
   1109e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   110a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   110a2:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   110a6:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
   110aa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   110ac:	6063      	str	r3, [r4, #4]
   110ae:	6022      	str	r2, [r4, #0]
   110b0:	f8c4 e00c 	str.w	lr, [r4, #12]
   110b4:	f8c4 c008 	str.w	ip, [r4, #8]
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
   110b8:	e7ff      	b.n	110ba <_ZN8libchip814Chip8$LT$T$GT$5sched17h92ff4f7288c44a1cE+0xd4>
        if let Some(t) = self.time {
   110ba:	e015      	b.n	110e8 <_ZN8libchip814Chip8$LT$T$GT$5sched17h92ff4f7288c44a1cE+0x102>
            self.time = Some(self.hw.clock());
   110bc:	9808      	ldr	r0, [sp, #32]
   110be:	9012      	str	r0, [sp, #72]	; 0x48
   110c0:	9909      	ldr	r1, [sp, #36]	; 0x24
   110c2:	9113      	str	r1, [sp, #76]	; 0x4c
   110c4:	2200      	movs	r2, #0
   110c6:	9211      	str	r2, [sp, #68]	; 0x44
   110c8:	2201      	movs	r2, #1
   110ca:	9210      	str	r2, [sp, #64]	; 0x40
   110cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
   110ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
   110d0:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   110d4:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
   110d8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   110da:	6063      	str	r3, [r4, #4]
   110dc:	6022      	str	r2, [r4, #0]
   110de:	f8c4 e00c 	str.w	lr, [r4, #12]
   110e2:	f8c4 c008 	str.w	ip, [r4, #8]
        if let Some(t) = self.time {
   110e6:	e7ff      	b.n	110e8 <_ZN8libchip814Chip8$LT$T$GT$5sched17h92ff4f7288c44a1cE+0x102>
    }
   110e8:	b018      	add	sp, #96	; 0x60
   110ea:	bd10      	pop	{r4, pc}

000110ec <_ZN8libchip814Chip8$LT$T$GT$5setup17h497508a9d15b56c5E>:
    fn setup(&mut self) {
   110ec:	b580      	push	{r7, lr}
   110ee:	b088      	sub	sp, #32
   110f0:	9007      	str	r0, [sp, #28]
   110f2:	f44f 7100 	mov.w	r1, #512	; 0x200
        self.pc = ENTRY;
   110f6:	8241      	strh	r1, [r0, #18]
   110f8:	f241 0148 	movw	r1, #4168	; 0x1048
        self.hw.vram_setsize(DISPS);
   110fc:	4401      	add	r1, r0
   110fe:	f64f 1254 	movw	r2, #63828	; 0xf954
   11102:	f2c0 0201 	movt	r2, #1
   11106:	6813      	ldr	r3, [r2, #0]
   11108:	6852      	ldr	r2, [r2, #4]
   1110a:	9005      	str	r0, [sp, #20]
   1110c:	4608      	mov	r0, r1
   1110e:	4619      	mov	r1, r3
   11110:	f7fa ff6b 	bl	bfea <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc05aa4c9ca2355e9E>
   11114:	e7ff      	b.n	11116 <_ZN8libchip814Chip8$LT$T$GT$5setup17h497508a9d15b56c5E+0x2a>
        self.mem[..CHARBUF.len()].copy_from_slice(&CHARBUF);
   11116:	9805      	ldr	r0, [sp, #20]
   11118:	f100 0147 	add.w	r1, r0, #71	; 0x47
   1111c:	f640 002c 	movw	r0, #2092	; 0x82c
   11120:	f2c0 0002 	movt	r0, #2
   11124:	2250      	movs	r2, #80	; 0x50
   11126:	9104      	str	r1, [sp, #16]
   11128:	4611      	mov	r1, r2
   1112a:	f000 ff04 	bl	11f36 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   1112e:	9003      	str	r0, [sp, #12]
   11130:	e7ff      	b.n	11132 <_ZN8libchip814Chip8$LT$T$GT$5setup17h497508a9d15b56c5E+0x46>
   11132:	9803      	ldr	r0, [sp, #12]
   11134:	9006      	str	r0, [sp, #24]
   11136:	9a06      	ldr	r2, [sp, #24]
   11138:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1113c:	9804      	ldr	r0, [sp, #16]
   1113e:	f7f7 ff13 	bl	8f68 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E>
   11142:	9002      	str	r0, [sp, #8]
   11144:	9101      	str	r1, [sp, #4]
   11146:	e7ff      	b.n	11148 <_ZN8libchip814Chip8$LT$T$GT$5setup17h497508a9d15b56c5E+0x5c>
   11148:	f640 022c 	movw	r2, #2092	; 0x82c
   1114c:	f2c0 0202 	movt	r2, #2
   11150:	2350      	movs	r3, #80	; 0x50
   11152:	9802      	ldr	r0, [sp, #8]
   11154:	9901      	ldr	r1, [sp, #4]
   11156:	f7f7 fe0a 	bl	8d6e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
   1115a:	e7ff      	b.n	1115c <_ZN8libchip814Chip8$LT$T$GT$5setup17h497508a9d15b56c5E+0x70>
   1115c:	f241 0047 	movw	r0, #4167	; 0x1047
   11160:	2101      	movs	r1, #1
        self.running = true;
   11162:	9a05      	ldr	r2, [sp, #20]
   11164:	5411      	strb	r1, [r2, r0]
    }
   11166:	b008      	add	sp, #32
   11168:	bd80      	pop	{r7, pc}

0001116a <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0d68791b70d8fb4dE>:
    fn waitkey(&mut self) -> u8 {
   1116a:	b580      	push	{r7, lr}
   1116c:	b08c      	sub	sp, #48	; 0x30
   1116e:	900a      	str	r0, [sp, #40]	; 0x28
        while self.running {
   11170:	9005      	str	r0, [sp, #20]
   11172:	e7ff      	b.n	11174 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0d68791b70d8fb4dE+0xa>
   11174:	f241 0047 	movw	r0, #4167	; 0x1047
   11178:	9905      	ldr	r1, [sp, #20]
   1117a:	5c08      	ldrb	r0, [r1, r0]
   1117c:	07c0      	lsls	r0, r0, #31
   1117e:	2800      	cmp	r0, #0
   11180:	d104      	bne.n	1118c <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0d68791b70d8fb4dE+0x22>
   11182:	e7ff      	b.n	11184 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0d68791b70d8fb4dE+0x1a>
   11184:	2020      	movs	r0, #32
        return b' ';
   11186:	f88d 001b 	strb.w	r0, [sp, #27]
   1118a:	e04a      	b.n	11222 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0d68791b70d8fb4dE+0xb8>
            self.sched();
   1118c:	9805      	ldr	r0, [sp, #20]
   1118e:	f7ff ff2a 	bl	10fe6 <_ZN8libchip814Chip8$LT$T$GT$5sched17h92ff4f7288c44a1cE>
   11192:	e7ff      	b.n	11194 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0d68791b70d8fb4dE+0x2a>
   11194:	2000      	movs	r0, #0
            for i in 0..0xf {
   11196:	f88d 001c 	strb.w	r0, [sp, #28]
   1119a:	200f      	movs	r0, #15
   1119c:	f88d 001d 	strb.w	r0, [sp, #29]
   111a0:	f89d 001c 	ldrb.w	r0, [sp, #28]
   111a4:	f89d 101d 	ldrb.w	r1, [sp, #29]
   111a8:	f000 fa09 	bl	115be <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h179b2f35245cc0dcE>
   111ac:	9004      	str	r0, [sp, #16]
   111ae:	9103      	str	r1, [sp, #12]
   111b0:	e7ff      	b.n	111b2 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0d68791b70d8fb4dE+0x48>
   111b2:	9804      	ldr	r0, [sp, #16]
   111b4:	f88d 0020 	strb.w	r0, [sp, #32]
   111b8:	9903      	ldr	r1, [sp, #12]
   111ba:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
   111be:	e7ff      	b.n	111c0 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0d68791b70d8fb4dE+0x56>
   111c0:	a808      	add	r0, sp, #32
   111c2:	f000 f98b 	bl	114dc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E>
   111c6:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
   111ca:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   111ce:	e7ff      	b.n	111d0 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0d68791b70d8fb4dE+0x66>
   111d0:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
   111d4:	07c1      	lsls	r1, r0, #31
   111d6:	2900      	cmp	r1, #0
   111d8:	d001      	beq.n	111de <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0d68791b70d8fb4dE+0x74>
   111da:	e7ff      	b.n	111dc <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0d68791b70d8fb4dE+0x72>
   111dc:	e001      	b.n	111e2 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0d68791b70d8fb4dE+0x78>
        while self.running {
   111de:	e7c9      	b.n	11174 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0d68791b70d8fb4dE+0xa>
            for i in 0..0xf {
   111e0:	defe      	udf	#254	; 0xfe
   111e2:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
   111e6:	4601      	mov	r1, r0
   111e8:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
   111ec:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
   111f0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   111f4:	f241 0248 	movw	r2, #4168	; 0x1048
                if self.hw.key(i) {
   111f8:	9b05      	ldr	r3, [sp, #20]
   111fa:	441a      	add	r2, r3
   111fc:	9002      	str	r0, [sp, #8]
   111fe:	4610      	mov	r0, r2
   11200:	9a02      	ldr	r2, [sp, #8]
   11202:	9101      	str	r1, [sp, #4]
   11204:	4611      	mov	r1, r2
   11206:	f7fa fd6d 	bl	bce4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd1688355d8a270c9E>
   1120a:	9000      	str	r0, [sp, #0]
   1120c:	e7ff      	b.n	1120e <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0d68791b70d8fb4dE+0xa4>
   1120e:	9800      	ldr	r0, [sp, #0]
   11210:	07c1      	lsls	r1, r0, #31
   11212:	2900      	cmp	r1, #0
   11214:	d101      	bne.n	1121a <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0d68791b70d8fb4dE+0xb0>
   11216:	e7ff      	b.n	11218 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0d68791b70d8fb4dE+0xae>
            for i in 0..0xf {
   11218:	e7d2      	b.n	111c0 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0d68791b70d8fb4dE+0x56>
                    return i;
   1121a:	9801      	ldr	r0, [sp, #4]
   1121c:	f88d 001b 	strb.w	r0, [sp, #27]
   11220:	e7ff      	b.n	11222 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0d68791b70d8fb4dE+0xb8>
    }
   11222:	f89d 001b 	ldrb.w	r0, [sp, #27]
   11226:	b00c      	add	sp, #48	; 0x30
   11228:	bd80      	pop	{r7, pc}

0001122a <_ZN8libchip814Chip8$LT$T$GT$8shutdown17h099cb83aa147e3f4E>:
    fn shutdown(&mut self) {
   1122a:	b081      	sub	sp, #4
   1122c:	9000      	str	r0, [sp, #0]
   1122e:	f241 0147 	movw	r1, #4167	; 0x1047
   11232:	2200      	movs	r2, #0
        self.running = false;
   11234:	5442      	strb	r2, [r0, r1]
    }
   11236:	b001      	add	sp, #4
   11238:	4770      	bx	lr

0001123a <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha6283b9e8d8dfa4aE>:
   1123a:	b580      	push	{r7, lr}
   1123c:	b082      	sub	sp, #8
   1123e:	9101      	str	r1, [sp, #4]
   11240:	f000 f803 	bl	1124a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4b335b02e3894d0aE>
   11244:	e7ff      	b.n	11246 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha6283b9e8d8dfa4aE+0xc>
   11246:	b002      	add	sp, #8
   11248:	bd80      	pop	{r7, pc}

0001124a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4b335b02e3894d0aE>:
   1124a:	b580      	push	{r7, lr}
   1124c:	b0a0      	sub	sp, #128	; 0x80
   1124e:	911c      	str	r1, [sp, #112]	; 0x70
   11250:	9103      	str	r1, [sp, #12]
   11252:	9002      	str	r0, [sp, #8]
   11254:	e7ff      	b.n	11256 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4b335b02e3894d0aE+0xc>
   11256:	9803      	ldr	r0, [sp, #12]
   11258:	68c1      	ldr	r1, [r0, #12]
   1125a:	2901      	cmp	r1, #1
   1125c:	d11e      	bne.n	1129c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4b335b02e3894d0aE+0x52>
   1125e:	e7ff      	b.n	11260 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4b335b02e3894d0aE+0x16>
   11260:	9803      	ldr	r0, [sp, #12]
   11262:	f100 0110 	add.w	r1, r0, #16
   11266:	911e      	str	r1, [sp, #120]	; 0x78
   11268:	a804      	add	r0, sp, #16
   1126a:	f000 f921 	bl	114b0 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc3d267302cee5855E>
   1126e:	e7ff      	b.n	11270 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4b335b02e3894d0aE+0x26>
   11270:	9804      	ldr	r0, [sp, #16]
   11272:	2801      	cmp	r0, #1
   11274:	d001      	beq.n	1127a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4b335b02e3894d0aE+0x30>
   11276:	e7ff      	b.n	11278 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4b335b02e3894d0aE+0x2e>
   11278:	e00f      	b.n	1129a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4b335b02e3894d0aE+0x50>
   1127a:	9804      	ldr	r0, [sp, #16]
   1127c:	9905      	ldr	r1, [sp, #20]
   1127e:	9a06      	ldr	r2, [sp, #24]
   11280:	9209      	str	r2, [sp, #36]	; 0x24
   11282:	9108      	str	r1, [sp, #32]
   11284:	9007      	str	r0, [sp, #28]
   11286:	9807      	ldr	r0, [sp, #28]
   11288:	9908      	ldr	r1, [sp, #32]
   1128a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1128c:	9b02      	ldr	r3, [sp, #8]
   1128e:	609a      	str	r2, [r3, #8]
   11290:	6059      	str	r1, [r3, #4]
   11292:	6018      	str	r0, [r3, #0]
   11294:	e7ff      	b.n	11296 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4b335b02e3894d0aE+0x4c>
   11296:	b020      	add	sp, #128	; 0x80
   11298:	bd80      	pop	{r7, pc}
   1129a:	e7ff      	b.n	1129c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4b335b02e3894d0aE+0x52>
   1129c:	a80a      	add	r0, sp, #40	; 0x28
   1129e:	9903      	ldr	r1, [sp, #12]
   112a0:	f000 f8f0 	bl	11484 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h16a139f0e332dd27E>
   112a4:	e7ff      	b.n	112a6 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4b335b02e3894d0aE+0x5c>
   112a6:	980a      	ldr	r0, [sp, #40]	; 0x28
   112a8:	2800      	cmp	r0, #0
   112aa:	d012      	beq.n	112d2 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4b335b02e3894d0aE+0x88>
   112ac:	e7ff      	b.n	112ae <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4b335b02e3894d0aE+0x64>
   112ae:	980b      	ldr	r0, [sp, #44]	; 0x2c
   112b0:	990c      	ldr	r1, [sp, #48]	; 0x30
   112b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   112b4:	9211      	str	r2, [sp, #68]	; 0x44
   112b6:	9110      	str	r1, [sp, #64]	; 0x40
   112b8:	900f      	str	r0, [sp, #60]	; 0x3c
   112ba:	980f      	ldr	r0, [sp, #60]	; 0x3c
   112bc:	9910      	ldr	r1, [sp, #64]	; 0x40
   112be:	9a11      	ldr	r2, [sp, #68]	; 0x44
   112c0:	921b      	str	r2, [sp, #108]	; 0x6c
   112c2:	911a      	str	r1, [sp, #104]	; 0x68
   112c4:	9019      	str	r0, [sp, #100]	; 0x64
   112c6:	a816      	add	r0, sp, #88	; 0x58
   112c8:	a919      	add	r1, sp, #100	; 0x64
   112ca:	f000 f8d4 	bl	11476 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hfd187d35ce50ccf5E>
   112ce:	e028      	b.n	11322 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4b335b02e3894d0aE+0xd8>
   112d0:	defe      	udf	#254	; 0xfe
   112d2:	9803      	ldr	r0, [sp, #12]
   112d4:	301c      	adds	r0, #28
   112d6:	f7fb fd5f 	bl	cd98 <_ZN4core6option15Option$LT$T$GT$6as_mut17hb9c3376e35bf83bbE>
   112da:	9001      	str	r0, [sp, #4]
   112dc:	e7ff      	b.n	112de <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4b335b02e3894d0aE+0x94>
   112de:	9801      	ldr	r0, [sp, #4]
   112e0:	f7fb fd94 	bl	ce0c <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hae3f210639d0333dE>
   112e4:	900e      	str	r0, [sp, #56]	; 0x38
   112e6:	e7ff      	b.n	112e8 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4b335b02e3894d0aE+0x9e>
   112e8:	980e      	ldr	r0, [sp, #56]	; 0x38
   112ea:	fab0 f180 	clz	r1, r0
   112ee:	0949      	lsrs	r1, r1, #5
   112f0:	2800      	cmp	r0, #0
   112f2:	d101      	bne.n	112f8 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4b335b02e3894d0aE+0xae>
   112f4:	e7ff      	b.n	112f6 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4b335b02e3894d0aE+0xac>
   112f6:	e009      	b.n	1130c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4b335b02e3894d0aE+0xc2>
   112f8:	980e      	ldr	r0, [sp, #56]	; 0x38
   112fa:	901f      	str	r0, [sp, #124]	; 0x7c
   112fc:	9902      	ldr	r1, [sp, #8]
   112fe:	9000      	str	r0, [sp, #0]
   11300:	4608      	mov	r0, r1
   11302:	9900      	ldr	r1, [sp, #0]
   11304:	f000 f8d4 	bl	114b0 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc3d267302cee5855E>
   11308:	e00a      	b.n	11320 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4b335b02e3894d0aE+0xd6>
   1130a:	defe      	udf	#254	; 0xfe
   1130c:	f003 f99c 	bl	14648 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>
   11310:	e7ff      	b.n	11312 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4b335b02e3894d0aE+0xc8>
   11312:	9802      	ldr	r0, [sp, #8]
   11314:	f7fb fd75 	bl	ce02 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h430caac74862e039E>
   11318:	e7ff      	b.n	1131a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4b335b02e3894d0aE+0xd0>
   1131a:	e7ff      	b.n	1131c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4b335b02e3894d0aE+0xd2>
   1131c:	e7ff      	b.n	1131e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4b335b02e3894d0aE+0xd4>
   1131e:	e7ba      	b.n	11296 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4b335b02e3894d0aE+0x4c>
   11320:	e7fc      	b.n	1131c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4b335b02e3894d0aE+0xd2>
   11322:	9816      	ldr	r0, [sp, #88]	; 0x58
   11324:	9917      	ldr	r1, [sp, #92]	; 0x5c
   11326:	9a18      	ldr	r2, [sp, #96]	; 0x60
   11328:	9215      	str	r2, [sp, #84]	; 0x54
   1132a:	9114      	str	r1, [sp, #80]	; 0x50
   1132c:	9013      	str	r0, [sp, #76]	; 0x4c
   1132e:	2001      	movs	r0, #1
   11330:	9012      	str	r0, [sp, #72]	; 0x48
   11332:	e7ff      	b.n	11334 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4b335b02e3894d0aE+0xea>
   11334:	9812      	ldr	r0, [sp, #72]	; 0x48
   11336:	9913      	ldr	r1, [sp, #76]	; 0x4c
   11338:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1133a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1133c:	f8dd c00c 	ldr.w	ip, [sp, #12]
   11340:	f8cc 3018 	str.w	r3, [ip, #24]
   11344:	f8cc 2014 	str.w	r2, [ip, #20]
   11348:	f8cc 1010 	str.w	r1, [ip, #16]
   1134c:	f8cc 000c 	str.w	r0, [ip, #12]
   11350:	980a      	ldr	r0, [sp, #40]	; 0x28
   11352:	2801      	cmp	r0, #1
   11354:	d101      	bne.n	1135a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4b335b02e3894d0aE+0x110>
   11356:	e7ff      	b.n	11358 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4b335b02e3894d0aE+0x10e>
   11358:	e77d      	b.n	11256 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4b335b02e3894d0aE+0xc>
   1135a:	e7fd      	b.n	11358 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4b335b02e3894d0aE+0x10e>

0001135c <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h7ad96dcc625b0805E>:
   1135c:	b5b0      	push	{r4, r5, r7, lr}
   1135e:	b090      	sub	sp, #64	; 0x40
   11360:	680a      	ldr	r2, [r1, #0]
   11362:	684b      	ldr	r3, [r1, #4]
   11364:	6889      	ldr	r1, [r1, #8]
   11366:	910f      	str	r1, [sp, #60]	; 0x3c
   11368:	930e      	str	r3, [sp, #56]	; 0x38
   1136a:	920d      	str	r2, [sp, #52]	; 0x34
   1136c:	a902      	add	r1, sp, #8
   1136e:	aa0d      	add	r2, sp, #52	; 0x34
   11370:	9001      	str	r0, [sp, #4]
   11372:	4608      	mov	r0, r1
   11374:	4611      	mov	r1, r2
   11376:	f000 f80d 	bl	11394 <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h78483ea72c740878E>
   1137a:	e7ff      	b.n	1137c <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h7ad96dcc625b0805E+0x20>
   1137c:	a802      	add	r0, sp, #8
   1137e:	9901      	ldr	r1, [sp, #4]
   11380:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
   11384:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
   11388:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
   1138c:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
   11390:	b010      	add	sp, #64	; 0x40
   11392:	bdb0      	pop	{r4, r5, r7, pc}

00011394 <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h78483ea72c740878E>:
   11394:	b08b      	sub	sp, #44	; 0x2c
   11396:	680a      	ldr	r2, [r1, #0]
   11398:	684b      	ldr	r3, [r1, #4]
   1139a:	6889      	ldr	r1, [r1, #8]
   1139c:	9102      	str	r1, [sp, #8]
   1139e:	9301      	str	r3, [sp, #4]
   113a0:	9200      	str	r2, [sp, #0]
   113a2:	2100      	movs	r1, #0
   113a4:	9103      	str	r1, [sp, #12]
   113a6:	9107      	str	r1, [sp, #28]
   113a8:	9900      	ldr	r1, [sp, #0]
   113aa:	9a01      	ldr	r2, [sp, #4]
   113ac:	9b02      	ldr	r3, [sp, #8]
   113ae:	6083      	str	r3, [r0, #8]
   113b0:	6042      	str	r2, [r0, #4]
   113b2:	6001      	str	r1, [r0, #0]
   113b4:	9903      	ldr	r1, [sp, #12]
   113b6:	9a04      	ldr	r2, [sp, #16]
   113b8:	9b05      	ldr	r3, [sp, #20]
   113ba:	f8dd c018 	ldr.w	ip, [sp, #24]
   113be:	f8c0 c018 	str.w	ip, [r0, #24]
   113c2:	6143      	str	r3, [r0, #20]
   113c4:	6102      	str	r2, [r0, #16]
   113c6:	60c1      	str	r1, [r0, #12]
   113c8:	9907      	ldr	r1, [sp, #28]
   113ca:	9a08      	ldr	r2, [sp, #32]
   113cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   113ce:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   113d2:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
   113d6:	6243      	str	r3, [r0, #36]	; 0x24
   113d8:	6202      	str	r2, [r0, #32]
   113da:	61c1      	str	r1, [r0, #28]
   113dc:	b00b      	add	sp, #44	; 0x2c
   113de:	4770      	bx	lr

000113e0 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h6c13765855842655E>:
   113e0:	b5b0      	push	{r4, r5, r7, lr}
   113e2:	e8b1 501c 	ldmia.w	r1!, {r2, r3, r4, ip, lr}
   113e6:	e8a0 501c 	stmia.w	r0!, {r2, r3, r4, ip, lr}
   113ea:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   113ee:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
   113f2:	bdb0      	pop	{r4, r5, r7, pc}

000113f4 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E>:
   113f4:	b580      	push	{r7, lr}
   113f6:	b084      	sub	sp, #16
   113f8:	4601      	mov	r1, r0
   113fa:	f88d 000f 	strb.w	r0, [sp, #15]
   113fe:	9102      	str	r1, [sp, #8]
   11400:	f005 fc62 	bl	16cc8 <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h32b550ec8df70192E>
   11404:	9001      	str	r0, [sp, #4]
   11406:	e7ff      	b.n	11408 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E+0x14>
   11408:	9801      	ldr	r0, [sp, #4]
   1140a:	b004      	add	sp, #16
   1140c:	bd80      	pop	{r7, pc}

0001140e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>:
   1140e:	b580      	push	{r7, lr}
   11410:	b086      	sub	sp, #24
   11412:	460a      	mov	r2, r1
   11414:	9004      	str	r0, [sp, #16]
   11416:	f88d 1017 	strb.w	r1, [sp, #23]
   1141a:	9203      	str	r2, [sp, #12]
   1141c:	f000 fe0f 	bl	1203e <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
   11420:	9002      	str	r0, [sp, #8]
   11422:	e7ff      	b.n	11424 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E+0x16>
   11424:	9802      	ldr	r0, [sp, #8]
   11426:	9903      	ldr	r1, [sp, #12]
   11428:	f000 fe22 	bl	12070 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
   1142c:	9001      	str	r0, [sp, #4]
   1142e:	e7ff      	b.n	11430 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E+0x22>
   11430:	9801      	ldr	r0, [sp, #4]
   11432:	b006      	add	sp, #24
   11434:	bd80      	pop	{r7, pc}

00011436 <_ZN4core4iter6traits8iterator8Iterator7flatten17ha4622b417599751bE>:
   11436:	b580      	push	{r7, lr}
   11438:	b084      	sub	sp, #16
   1143a:	680a      	ldr	r2, [r1, #0]
   1143c:	684b      	ldr	r3, [r1, #4]
   1143e:	6889      	ldr	r1, [r1, #8]
   11440:	9103      	str	r1, [sp, #12]
   11442:	9302      	str	r3, [sp, #8]
   11444:	9201      	str	r2, [sp, #4]
   11446:	a901      	add	r1, sp, #4
   11448:	f7ff ff88 	bl	1135c <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h7ad96dcc625b0805E>
   1144c:	e7ff      	b.n	1144e <_ZN4core4iter6traits8iterator8Iterator7flatten17ha4622b417599751bE+0x18>
   1144e:	b004      	add	sp, #16
   11450:	bd80      	pop	{r7, pc}

00011452 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h22a7212d28136f26E>:
   11452:	b083      	sub	sp, #12
   11454:	9100      	str	r1, [sp, #0]
   11456:	9201      	str	r2, [sp, #4]
   11458:	9302      	str	r3, [sp, #8]
   1145a:	6001      	str	r1, [r0, #0]
   1145c:	6042      	str	r2, [r0, #4]
   1145e:	6083      	str	r3, [r0, #8]
   11460:	b003      	add	sp, #12
   11462:	4770      	bx	lr

00011464 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17hd96dff9de838f04eE>:
   11464:	b083      	sub	sp, #12
   11466:	9100      	str	r1, [sp, #0]
   11468:	9201      	str	r2, [sp, #4]
   1146a:	9302      	str	r3, [sp, #8]
   1146c:	6001      	str	r1, [r0, #0]
   1146e:	6042      	str	r2, [r0, #4]
   11470:	6083      	str	r3, [r0, #8]
   11472:	b003      	add	sp, #12
   11474:	4770      	bx	lr

00011476 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hfd187d35ce50ccf5E>:
   11476:	680a      	ldr	r2, [r1, #0]
   11478:	684b      	ldr	r3, [r1, #4]
   1147a:	6889      	ldr	r1, [r1, #8]
   1147c:	6081      	str	r1, [r0, #8]
   1147e:	6043      	str	r3, [r0, #4]
   11480:	6002      	str	r2, [r0, #0]
   11482:	4770      	bx	lr

00011484 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h16a139f0e332dd27E>:
   11484:	b580      	push	{r7, lr}
   11486:	b086      	sub	sp, #24
   11488:	9105      	str	r1, [sp, #20]
   1148a:	9004      	str	r0, [sp, #16]
   1148c:	4608      	mov	r0, r1
   1148e:	9103      	str	r1, [sp, #12]
   11490:	f000 fced 	bl	11e6e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   11494:	9002      	str	r0, [sp, #8]
   11496:	9101      	str	r1, [sp, #4]
   11498:	e7ff      	b.n	1149a <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h16a139f0e332dd27E+0x16>
   1149a:	9803      	ldr	r0, [sp, #12]
   1149c:	f100 0308 	add.w	r3, r0, #8
   114a0:	9804      	ldr	r0, [sp, #16]
   114a2:	9902      	ldr	r1, [sp, #8]
   114a4:	9a01      	ldr	r2, [sp, #4]
   114a6:	f7fb fb9e 	bl	cbe6 <_ZN4core6option15Option$LT$T$GT$3map17h4590aa2e515a0418E>
   114aa:	e7ff      	b.n	114ac <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h16a139f0e332dd27E+0x28>
   114ac:	b006      	add	sp, #24
   114ae:	bd80      	pop	{r7, pc}

000114b0 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc3d267302cee5855E>:
   114b0:	b580      	push	{r7, lr}
   114b2:	b086      	sub	sp, #24
   114b4:	9105      	str	r1, [sp, #20]
   114b6:	9004      	str	r0, [sp, #16]
   114b8:	4608      	mov	r0, r1
   114ba:	9103      	str	r1, [sp, #12]
   114bc:	f000 fcd7 	bl	11e6e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   114c0:	9002      	str	r0, [sp, #8]
   114c2:	9101      	str	r1, [sp, #4]
   114c4:	e7ff      	b.n	114c6 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc3d267302cee5855E+0x16>
   114c6:	9803      	ldr	r0, [sp, #12]
   114c8:	f100 0308 	add.w	r3, r0, #8
   114cc:	9804      	ldr	r0, [sp, #16]
   114ce:	9902      	ldr	r1, [sp, #8]
   114d0:	9a01      	ldr	r2, [sp, #4]
   114d2:	f7fb fbd6 	bl	cc82 <_ZN4core6option15Option$LT$T$GT$3map17h777637a15c6c2d41E>
   114d6:	e7ff      	b.n	114d8 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc3d267302cee5855E+0x28>
   114d8:	b006      	add	sp, #24
   114da:	bd80      	pop	{r7, pc}

000114dc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E>:
   114dc:	b580      	push	{r7, lr}
   114de:	b086      	sub	sp, #24
   114e0:	9005      	str	r0, [sp, #20]
   114e2:	2100      	movs	r1, #0
   114e4:	f88d 1013 	strb.w	r1, [sp, #19]
   114e8:	1c41      	adds	r1, r0, #1
   114ea:	9002      	str	r0, [sp, #8]
   114ec:	f005 fc11 	bl	16d12 <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17hc283e26c72ff63bbE>
   114f0:	9001      	str	r0, [sp, #4]
   114f2:	e7ff      	b.n	114f4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x18>
   114f4:	9801      	ldr	r0, [sp, #4]
   114f6:	07c1      	lsls	r1, r0, #31
   114f8:	2900      	cmp	r1, #0
   114fa:	d104      	bne.n	11506 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x2a>
   114fc:	e7ff      	b.n	114fe <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x22>
   114fe:	2000      	movs	r0, #0
   11500:	f88d 000c 	strb.w	r0, [sp, #12]
   11504:	e02c      	b.n	11560 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x84>
   11506:	2001      	movs	r0, #1
   11508:	f88d 0013 	strb.w	r0, [sp, #19]
   1150c:	9902      	ldr	r1, [sp, #8]
   1150e:	9000      	str	r0, [sp, #0]
   11510:	4608      	mov	r0, r1
   11512:	9900      	ldr	r1, [sp, #0]
   11514:	f005 fc09 	bl	16d2a <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE>
   11518:	f88d 1011 	strb.w	r1, [sp, #17]
   1151c:	f88d 0010 	strb.w	r0, [sp, #16]
   11520:	e7ff      	b.n	11522 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x46>
   11522:	f89d 0010 	ldrb.w	r0, [sp, #16]
   11526:	07c0      	lsls	r0, r0, #31
   11528:	2800      	cmp	r0, #0
   1152a:	d104      	bne.n	11536 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x5a>
   1152c:	e7ff      	b.n	1152e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x52>
   1152e:	2000      	movs	r0, #0
   11530:	f88d 000c 	strb.w	r0, [sp, #12]
   11534:	e029      	b.n	1158a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0xae>
   11536:	2000      	movs	r0, #0
   11538:	f88d 0013 	strb.w	r0, [sp, #19]
   1153c:	f89d 0011 	ldrb.w	r0, [sp, #17]
   11540:	f88d 0012 	strb.w	r0, [sp, #18]
   11544:	f10d 0012 	add.w	r0, sp, #18
   11548:	9902      	ldr	r1, [sp, #8]
   1154a:	f005 fbc4 	bl	16cd6 <_ZN4core3mem4swap17h206518364108b51fE>
   1154e:	e7ff      	b.n	11550 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x74>
   11550:	f89d 0012 	ldrb.w	r0, [sp, #18]
   11554:	f88d 000d 	strb.w	r0, [sp, #13]
   11558:	2001      	movs	r0, #1
   1155a:	f88d 000c 	strb.w	r0, [sp, #12]
   1155e:	e014      	b.n	1158a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0xae>
   11560:	f89d 000c 	ldrb.w	r0, [sp, #12]
   11564:	f89d 100d 	ldrb.w	r1, [sp, #13]
   11568:	b006      	add	sp, #24
   1156a:	bd80      	pop	{r7, pc}
   1156c:	2000      	movs	r0, #0
   1156e:	f88d 0013 	strb.w	r0, [sp, #19]
   11572:	e7f5      	b.n	11560 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x84>
   11574:	f89d 0013 	ldrb.w	r0, [sp, #19]
   11578:	07c0      	lsls	r0, r0, #31
   1157a:	2800      	cmp	r0, #0
   1157c:	d0f6      	beq.n	1156c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x90>
   1157e:	e7ff      	b.n	11580 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0xa4>
   11580:	2000      	movs	r0, #0
   11582:	f88d 0013 	strb.w	r0, [sp, #19]
   11586:	e7f1      	b.n	1156c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x90>
   11588:	e7f0      	b.n	1156c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x90>
   1158a:	f89d 0010 	ldrb.w	r0, [sp, #16]
   1158e:	07c0      	lsls	r0, r0, #31
   11590:	2800      	cmp	r0, #0
   11592:	d1ef      	bne.n	11574 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x98>
   11594:	e7f8      	b.n	11588 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0xac>

00011596 <_ZN4core4iter6traits8iterator8Iterator3map17h176187f37aedb66cE>:
   11596:	b580      	push	{r7, lr}
   11598:	b084      	sub	sp, #16
   1159a:	9101      	str	r1, [sp, #4]
   1159c:	9202      	str	r2, [sp, #8]
   1159e:	9303      	str	r3, [sp, #12]
   115a0:	f7ff ff57 	bl	11452 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h22a7212d28136f26E>
   115a4:	e7ff      	b.n	115a6 <_ZN4core4iter6traits8iterator8Iterator3map17h176187f37aedb66cE+0x10>
   115a6:	b004      	add	sp, #16
   115a8:	bd80      	pop	{r7, pc}

000115aa <_ZN4core4iter6traits8iterator8Iterator3map17hc90e18db8965d900E>:
   115aa:	b580      	push	{r7, lr}
   115ac:	b084      	sub	sp, #16
   115ae:	9101      	str	r1, [sp, #4]
   115b0:	9202      	str	r2, [sp, #8]
   115b2:	9303      	str	r3, [sp, #12]
   115b4:	f7ff ff56 	bl	11464 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17hd96dff9de838f04eE>
   115b8:	e7ff      	b.n	115ba <_ZN4core4iter6traits8iterator8Iterator3map17hc90e18db8965d900E+0x10>
   115ba:	b004      	add	sp, #16
   115bc:	bd80      	pop	{r7, pc}

000115be <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h179b2f35245cc0dcE>:
   115be:	b081      	sub	sp, #4
   115c0:	460a      	mov	r2, r1
   115c2:	4603      	mov	r3, r0
   115c4:	f88d 0000 	strb.w	r0, [sp]
   115c8:	f88d 1001 	strb.w	r1, [sp, #1]
   115cc:	b001      	add	sp, #4
   115ce:	4770      	bx	lr

000115d0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>:
   115d0:	b084      	sub	sp, #16
   115d2:	9001      	str	r0, [sp, #4]
   115d4:	9102      	str	r1, [sp, #8]
   115d6:	4408      	add	r0, r1
   115d8:	9003      	str	r0, [sp, #12]
   115da:	9803      	ldr	r0, [sp, #12]
   115dc:	9000      	str	r0, [sp, #0]
   115de:	e7ff      	b.n	115e0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E+0x10>
   115e0:	9800      	ldr	r0, [sp, #0]
   115e2:	b004      	add	sp, #16
   115e4:	4770      	bx	lr

000115e6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>:
   115e6:	b082      	sub	sp, #8
   115e8:	9001      	str	r0, [sp, #4]
   115ea:	9000      	str	r0, [sp, #0]
   115ec:	e7ff      	b.n	115ee <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE+0x8>
   115ee:	9800      	ldr	r0, [sp, #0]
   115f0:	fab0 f180 	clz	r1, r0
   115f4:	0948      	lsrs	r0, r1, #5
   115f6:	b002      	add	sp, #8
   115f8:	4770      	bx	lr

000115fa <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>:
   115fa:	b082      	sub	sp, #8
   115fc:	9001      	str	r0, [sp, #4]
   115fe:	9000      	str	r0, [sp, #0]
   11600:	9800      	ldr	r0, [sp, #0]
   11602:	b002      	add	sp, #8
   11604:	4770      	bx	lr

00011606 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>:
   11606:	b081      	sub	sp, #4
   11608:	9000      	str	r0, [sp, #0]
   1160a:	b001      	add	sp, #4
   1160c:	4770      	bx	lr

0001160e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>:
   1160e:	b580      	push	{r7, lr}
   11610:	b084      	sub	sp, #16
   11612:	9002      	str	r0, [sp, #8]
   11614:	9103      	str	r1, [sp, #12]
   11616:	f000 f805 	bl	11624 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   1161a:	9001      	str	r0, [sp, #4]
   1161c:	e7ff      	b.n	1161e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E+0x10>
   1161e:	9801      	ldr	r0, [sp, #4]
   11620:	b004      	add	sp, #16
   11622:	bd80      	pop	{r7, pc}

00011624 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>:
   11624:	b084      	sub	sp, #16
   11626:	9001      	str	r0, [sp, #4]
   11628:	9102      	str	r1, [sp, #8]
   1162a:	4408      	add	r0, r1
   1162c:	9003      	str	r0, [sp, #12]
   1162e:	9803      	ldr	r0, [sp, #12]
   11630:	9000      	str	r0, [sp, #0]
   11632:	e7ff      	b.n	11634 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E+0x10>
   11634:	9800      	ldr	r0, [sp, #0]
   11636:	b004      	add	sp, #16
   11638:	4770      	bx	lr

0001163a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>:
   1163a:	b082      	sub	sp, #8
   1163c:	9001      	str	r0, [sp, #4]
   1163e:	9000      	str	r0, [sp, #0]
   11640:	e7ff      	b.n	11642 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE+0x8>
   11642:	9800      	ldr	r0, [sp, #0]
   11644:	fab0 f180 	clz	r1, r0
   11648:	0948      	lsrs	r0, r1, #5
   1164a:	b002      	add	sp, #8
   1164c:	4770      	bx	lr

0001164e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>:
   1164e:	b580      	push	{r7, lr}
   11650:	b090      	sub	sp, #64	; 0x40
   11652:	900c      	str	r0, [sp, #48]	; 0x30
   11654:	910d      	str	r1, [sp, #52]	; 0x34
   11656:	9007      	str	r0, [sp, #28]
   11658:	9106      	str	r1, [sp, #24]
   1165a:	f001 f895 	bl	12788 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>
   1165e:	4601      	mov	r1, r0
   11660:	900e      	str	r0, [sp, #56]	; 0x38
   11662:	9105      	str	r1, [sp, #20]
   11664:	e7ff      	b.n	11666 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x18>
   11666:	9805      	ldr	r0, [sp, #20]
   11668:	f7ff ffe7 	bl	1163a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   1166c:	e7ff      	b.n	1166e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x20>
   1166e:	e7ff      	b.n	11670 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x22>
   11670:	2001      	movs	r0, #1
   11672:	900f      	str	r0, [sp, #60]	; 0x3c
   11674:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11676:	9004      	str	r0, [sp, #16]
   11678:	e7ff      	b.n	1167a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x2c>
   1167a:	9804      	ldr	r0, [sp, #16]
   1167c:	2800      	cmp	r0, #0
   1167e:	d006      	beq.n	1168e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x40>
   11680:	e7ff      	b.n	11682 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x34>
   11682:	9807      	ldr	r0, [sp, #28]
   11684:	9906      	ldr	r1, [sp, #24]
   11686:	f001 f877 	bl	12778 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   1168a:	9003      	str	r0, [sp, #12]
   1168c:	e00e      	b.n	116ac <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x5e>
   1168e:	9807      	ldr	r0, [sp, #28]
   11690:	9906      	ldr	r1, [sp, #24]
   11692:	f001 f871 	bl	12778 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   11696:	9002      	str	r0, [sp, #8]
   11698:	e7ff      	b.n	1169a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x4c>
   1169a:	9805      	ldr	r0, [sp, #20]
   1169c:	9902      	ldr	r1, [sp, #8]
   1169e:	f7ff ffb6 	bl	1160e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>
   116a2:	9001      	str	r0, [sp, #4]
   116a4:	e7ff      	b.n	116a6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x58>
   116a6:	9801      	ldr	r0, [sp, #4]
   116a8:	900a      	str	r0, [sp, #40]	; 0x28
   116aa:	e006      	b.n	116ba <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   116ac:	9805      	ldr	r0, [sp, #20]
   116ae:	9903      	ldr	r1, [sp, #12]
   116b0:	f001 f83f 	bl	12732 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>
   116b4:	900a      	str	r0, [sp, #40]	; 0x28
   116b6:	e7ff      	b.n	116b8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6a>
   116b8:	e7ff      	b.n	116ba <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   116ba:	9805      	ldr	r0, [sp, #20]
   116bc:	f7ff ff9d 	bl	115fa <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   116c0:	9000      	str	r0, [sp, #0]
   116c2:	e7ff      	b.n	116c4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x76>
   116c4:	980a      	ldr	r0, [sp, #40]	; 0x28
   116c6:	9900      	ldr	r1, [sp, #0]
   116c8:	9108      	str	r1, [sp, #32]
   116ca:	9009      	str	r0, [sp, #36]	; 0x24
   116cc:	9808      	ldr	r0, [sp, #32]
   116ce:	9909      	ldr	r1, [sp, #36]	; 0x24
   116d0:	b010      	add	sp, #64	; 0x40
   116d2:	bd80      	pop	{r7, pc}

000116d4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>:
   116d4:	b081      	sub	sp, #4
   116d6:	b001      	add	sp, #4
   116d8:	4770      	bx	lr

000116da <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>:
   116da:	b580      	push	{r7, lr}
   116dc:	b08e      	sub	sp, #56	; 0x38
   116de:	9007      	str	r0, [sp, #28]
   116e0:	6801      	ldr	r1, [r0, #0]
   116e2:	9005      	str	r0, [sp, #20]
   116e4:	4608      	mov	r0, r1
   116e6:	f7ff ff8e 	bl	11606 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   116ea:	9004      	str	r0, [sp, #16]
   116ec:	e7ff      	b.n	116ee <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x14>
   116ee:	9804      	ldr	r0, [sp, #16]
   116f0:	f7ff ff79 	bl	115e6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>
   116f4:	e7ff      	b.n	116f6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1c>
   116f6:	e7ff      	b.n	116f8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1e>
   116f8:	2001      	movs	r0, #1
   116fa:	9008      	str	r0, [sp, #32]
   116fc:	9808      	ldr	r0, [sp, #32]
   116fe:	9003      	str	r0, [sp, #12]
   11700:	e7ff      	b.n	11702 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x28>
   11702:	9803      	ldr	r0, [sp, #12]
   11704:	2800      	cmp	r0, #0
   11706:	d007      	beq.n	11718 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   11708:	e7ff      	b.n	1170a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x30>
   1170a:	9805      	ldr	r0, [sp, #20]
   1170c:	6840      	ldr	r0, [r0, #4]
   1170e:	f7ff ff94 	bl	1163a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   11712:	e7ff      	b.n	11714 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3a>
   11714:	e7ff      	b.n	11716 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3c>
   11716:	e7ff      	b.n	11718 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   11718:	9805      	ldr	r0, [sp, #20]
   1171a:	6800      	ldr	r0, [r0, #0]
   1171c:	f7ff ff73 	bl	11606 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   11720:	9002      	str	r0, [sp, #8]
   11722:	e7ff      	b.n	11724 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x4a>
   11724:	9805      	ldr	r0, [sp, #20]
   11726:	6841      	ldr	r1, [r0, #4]
   11728:	9a02      	ldr	r2, [sp, #8]
   1172a:	428a      	cmp	r2, r1
   1172c:	d02e      	beq.n	1178c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb2>
   1172e:	e7ff      	b.n	11730 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x56>
   11730:	9805      	ldr	r0, [sp, #20]
   11732:	900a      	str	r0, [sp, #40]	; 0x28
   11734:	2101      	movs	r1, #1
   11736:	910b      	str	r1, [sp, #44]	; 0x2c
   11738:	910d      	str	r1, [sp, #52]	; 0x34
   1173a:	990d      	ldr	r1, [sp, #52]	; 0x34
   1173c:	2900      	cmp	r1, #0
   1173e:	d015      	beq.n	1176c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x92>
   11740:	e7ff      	b.n	11742 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x68>
   11742:	9805      	ldr	r0, [sp, #20]
   11744:	6800      	ldr	r0, [r0, #0]
   11746:	f7ff ff5e 	bl	11606 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   1174a:	900c      	str	r0, [sp, #48]	; 0x30
   1174c:	9905      	ldr	r1, [sp, #20]
   1174e:	680a      	ldr	r2, [r1, #0]
   11750:	9001      	str	r0, [sp, #4]
   11752:	4610      	mov	r0, r2
   11754:	f7ff ff57 	bl	11606 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   11758:	2101      	movs	r1, #1
   1175a:	f7ff ff39 	bl	115d0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>
   1175e:	f7ff ff4c 	bl	115fa <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   11762:	9905      	ldr	r1, [sp, #20]
   11764:	6008      	str	r0, [r1, #0]
   11766:	9801      	ldr	r0, [sp, #4]
   11768:	9009      	str	r0, [sp, #36]	; 0x24
   1176a:	e00c      	b.n	11786 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   1176c:	9805      	ldr	r0, [sp, #20]
   1176e:	6840      	ldr	r0, [r0, #4]
   11770:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11774:	f7ff ff56 	bl	11624 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   11778:	9905      	ldr	r1, [sp, #20]
   1177a:	6048      	str	r0, [r1, #4]
   1177c:	6808      	ldr	r0, [r1, #0]
   1177e:	f7ff ff42 	bl	11606 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   11782:	9009      	str	r0, [sp, #36]	; 0x24
   11784:	e7ff      	b.n	11786 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   11786:	9809      	ldr	r0, [sp, #36]	; 0x24
   11788:	9000      	str	r0, [sp, #0]
   1178a:	e002      	b.n	11792 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb8>
   1178c:	2000      	movs	r0, #0
   1178e:	9006      	str	r0, [sp, #24]
   11790:	e002      	b.n	11798 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   11792:	9800      	ldr	r0, [sp, #0]
   11794:	9006      	str	r0, [sp, #24]
   11796:	e7ff      	b.n	11798 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   11798:	9806      	ldr	r0, [sp, #24]
   1179a:	b00e      	add	sp, #56	; 0x38
   1179c:	bd80      	pop	{r7, pc}

0001179e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE>:
   1179e:	b580      	push	{r7, lr}
   117a0:	b084      	sub	sp, #16
   117a2:	9002      	str	r0, [sp, #8]
   117a4:	9103      	str	r1, [sp, #12]
   117a6:	6800      	ldr	r0, [r0, #0]
   117a8:	f000 f88c 	bl	118c4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>
   117ac:	9001      	str	r0, [sp, #4]
   117ae:	e7ff      	b.n	117b0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE+0x12>
   117b0:	9801      	ldr	r0, [sp, #4]
   117b2:	f000 0001 	and.w	r0, r0, #1
   117b6:	b004      	add	sp, #16
   117b8:	bd80      	pop	{r7, pc}

000117ba <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>:
   117ba:	b580      	push	{r7, lr}
   117bc:	b084      	sub	sp, #16
   117be:	9002      	str	r0, [sp, #8]
   117c0:	9103      	str	r1, [sp, #12]
   117c2:	f000 f827 	bl	11814 <_ZN4core3cmp6max_by17h3c9686db40e0f078E>
   117c6:	9001      	str	r0, [sp, #4]
   117c8:	e7ff      	b.n	117ca <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE+0x10>
   117ca:	9801      	ldr	r0, [sp, #4]
   117cc:	b004      	add	sp, #16
   117ce:	bd80      	pop	{r7, pc}

000117d0 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE>:
   117d0:	b085      	sub	sp, #20
   117d2:	9003      	str	r0, [sp, #12]
   117d4:	9104      	str	r1, [sp, #16]
   117d6:	6802      	ldr	r2, [r0, #0]
   117d8:	680b      	ldr	r3, [r1, #0]
   117da:	429a      	cmp	r2, r3
   117dc:	9101      	str	r1, [sp, #4]
   117de:	9000      	str	r0, [sp, #0]
   117e0:	db07      	blt.n	117f2 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x22>
   117e2:	e7ff      	b.n	117e4 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x14>
   117e4:	9800      	ldr	r0, [sp, #0]
   117e6:	6801      	ldr	r1, [r0, #0]
   117e8:	9a01      	ldr	r2, [sp, #4]
   117ea:	6813      	ldr	r3, [r2, #0]
   117ec:	4299      	cmp	r1, r3
   117ee:	d008      	beq.n	11802 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x32>
   117f0:	e003      	b.n	117fa <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x2a>
   117f2:	20ff      	movs	r0, #255	; 0xff
   117f4:	f88d 000b 	strb.w	r0, [sp, #11]
   117f8:	e008      	b.n	1180c <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3c>
   117fa:	2001      	movs	r0, #1
   117fc:	f88d 000b 	strb.w	r0, [sp, #11]
   11800:	e003      	b.n	1180a <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3a>
   11802:	2000      	movs	r0, #0
   11804:	f88d 000b 	strb.w	r0, [sp, #11]
   11808:	e7ff      	b.n	1180a <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3a>
   1180a:	e7ff      	b.n	1180c <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3c>
   1180c:	f89d 000b 	ldrb.w	r0, [sp, #11]
   11810:	b005      	add	sp, #20
   11812:	4770      	bx	lr

00011814 <_ZN4core3cmp6max_by17h3c9686db40e0f078E>:
   11814:	b580      	push	{r7, lr}
   11816:	b088      	sub	sp, #32
   11818:	9000      	str	r0, [sp, #0]
   1181a:	9101      	str	r1, [sp, #4]
   1181c:	2000      	movs	r0, #0
   1181e:	f88d 001b 	strb.w	r0, [sp, #27]
   11822:	f88d 001a 	strb.w	r0, [sp, #26]
   11826:	2001      	movs	r0, #1
   11828:	f88d 001b 	strb.w	r0, [sp, #27]
   1182c:	f88d 001a 	strb.w	r0, [sp, #26]
   11830:	4668      	mov	r0, sp
   11832:	9004      	str	r0, [sp, #16]
   11834:	a801      	add	r0, sp, #4
   11836:	9005      	str	r0, [sp, #20]
   11838:	9804      	ldr	r0, [sp, #16]
   1183a:	9905      	ldr	r1, [sp, #20]
   1183c:	f000 f895 	bl	1196a <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E>
   11840:	f88d 000f 	strb.w	r0, [sp, #15]
   11844:	e7ff      	b.n	11846 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x32>
   11846:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   1184a:	1c41      	adds	r1, r0, #1
   1184c:	2902      	cmp	r1, #2
   1184e:	d307      	bcc.n	11860 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x4c>
   11850:	e7ff      	b.n	11852 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x3e>
   11852:	2000      	movs	r0, #0
   11854:	f88d 001b 	strb.w	r0, [sp, #27]
   11858:	9800      	ldr	r0, [sp, #0]
   1185a:	9002      	str	r0, [sp, #8]
   1185c:	e006      	b.n	1186c <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x58>
   1185e:	defe      	udf	#254	; 0xfe
   11860:	2000      	movs	r0, #0
   11862:	f88d 001a 	strb.w	r0, [sp, #26]
   11866:	9801      	ldr	r0, [sp, #4]
   11868:	9002      	str	r0, [sp, #8]
   1186a:	e7ff      	b.n	1186c <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x58>
   1186c:	f89d 001a 	ldrb.w	r0, [sp, #26]
   11870:	07c0      	lsls	r0, r0, #31
   11872:	2800      	cmp	r0, #0
   11874:	d109      	bne.n	1188a <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x76>
   11876:	e7ff      	b.n	11878 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x64>
   11878:	f89d 001b 	ldrb.w	r0, [sp, #27]
   1187c:	07c0      	lsls	r0, r0, #31
   1187e:	2800      	cmp	r0, #0
   11880:	d107      	bne.n	11892 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x7e>
   11882:	e7ff      	b.n	11884 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x70>
   11884:	9802      	ldr	r0, [sp, #8]
   11886:	b008      	add	sp, #32
   11888:	bd80      	pop	{r7, pc}
   1188a:	2000      	movs	r0, #0
   1188c:	f88d 001a 	strb.w	r0, [sp, #26]
   11890:	e7f2      	b.n	11878 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x64>
   11892:	2000      	movs	r0, #0
   11894:	f88d 001b 	strb.w	r0, [sp, #27]
   11898:	e7f4      	b.n	11884 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x70>

0001189a <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E>:
   1189a:	b089      	sub	sp, #36	; 0x24
   1189c:	9005      	str	r0, [sp, #20]
   1189e:	9106      	str	r1, [sp, #24]
   118a0:	9107      	str	r1, [sp, #28]
   118a2:	9907      	ldr	r1, [sp, #28]
   118a4:	9002      	str	r0, [sp, #8]
   118a6:	9101      	str	r1, [sp, #4]
   118a8:	e7ff      	b.n	118aa <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E+0x10>
   118aa:	9802      	ldr	r0, [sp, #8]
   118ac:	9008      	str	r0, [sp, #32]
   118ae:	9908      	ldr	r1, [sp, #32]
   118b0:	9100      	str	r1, [sp, #0]
   118b2:	e7ff      	b.n	118b4 <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E+0x1a>
   118b4:	9800      	ldr	r0, [sp, #0]
   118b6:	9003      	str	r0, [sp, #12]
   118b8:	9901      	ldr	r1, [sp, #4]
   118ba:	9104      	str	r1, [sp, #16]
   118bc:	9803      	ldr	r0, [sp, #12]
   118be:	9904      	ldr	r1, [sp, #16]
   118c0:	b009      	add	sp, #36	; 0x24
   118c2:	4770      	bx	lr

000118c4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>:
   118c4:	b580      	push	{r7, lr}
   118c6:	b088      	sub	sp, #32
   118c8:	9006      	str	r0, [sp, #24]
   118ca:	9107      	str	r1, [sp, #28]
   118cc:	9004      	str	r0, [sp, #16]
   118ce:	4608      	mov	r0, r1
   118d0:	9103      	str	r1, [sp, #12]
   118d2:	f006 ff10 	bl	186f6 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   118d6:	9002      	str	r0, [sp, #8]
   118d8:	e7ff      	b.n	118da <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x16>
   118da:	9802      	ldr	r0, [sp, #8]
   118dc:	07c1      	lsls	r1, r0, #31
   118de:	2900      	cmp	r1, #0
   118e0:	d105      	bne.n	118ee <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x2a>
   118e2:	e7ff      	b.n	118e4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x20>
   118e4:	9803      	ldr	r0, [sp, #12]
   118e6:	f006 ff0a 	bl	186fe <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   118ea:	9001      	str	r0, [sp, #4]
   118ec:	e007      	b.n	118fe <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x3a>
   118ee:	9804      	ldr	r0, [sp, #16]
   118f0:	9903      	ldr	r1, [sp, #12]
   118f2:	f007 fd2a 	bl	1934a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   118f6:	f88d 0017 	strb.w	r0, [sp, #23]
   118fa:	e7ff      	b.n	118fc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x38>
   118fc:	e015      	b.n	1192a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
   118fe:	9801      	ldr	r0, [sp, #4]
   11900:	07c1      	lsls	r1, r0, #31
   11902:	2900      	cmp	r1, #0
   11904:	d107      	bne.n	11916 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x52>
   11906:	e7ff      	b.n	11908 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x44>
   11908:	9804      	ldr	r0, [sp, #16]
   1190a:	9903      	ldr	r1, [sp, #12]
   1190c:	f007 fe98 	bl	19640 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
   11910:	f88d 0017 	strb.w	r0, [sp, #23]
   11914:	e007      	b.n	11926 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x62>
   11916:	9804      	ldr	r0, [sp, #16]
   11918:	9903      	ldr	r1, [sp, #12]
   1191a:	f007 fd81 	bl	19420 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   1191e:	f88d 0017 	strb.w	r0, [sp, #23]
   11922:	e7ff      	b.n	11924 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x60>
   11924:	e000      	b.n	11928 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
   11926:	e7ff      	b.n	11928 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
   11928:	e7ff      	b.n	1192a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
   1192a:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1192e:	b008      	add	sp, #32
   11930:	bd80      	pop	{r7, pc}

00011932 <_ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE>:
   11932:	b580      	push	{r7, lr}
   11934:	b086      	sub	sp, #24
   11936:	f8dd c020 	ldr.w	ip, [sp, #32]
   1193a:	9102      	str	r1, [sp, #8]
   1193c:	9203      	str	r2, [sp, #12]
   1193e:	9304      	str	r3, [sp, #16]
   11940:	f8cd c014 	str.w	ip, [sp, #20]
   11944:	f04f 0e00 	mov.w	lr, #0
   11948:	f8cd e004 	str.w	lr, [sp, #4]
   1194c:	f8cd e000 	str.w	lr, [sp]
   11950:	f8cd e000 	str.w	lr, [sp]
   11954:	6001      	str	r1, [r0, #0]
   11956:	6042      	str	r2, [r0, #4]
   11958:	9900      	ldr	r1, [sp, #0]
   1195a:	9a01      	ldr	r2, [sp, #4]
   1195c:	6081      	str	r1, [r0, #8]
   1195e:	60c2      	str	r2, [r0, #12]
   11960:	6103      	str	r3, [r0, #16]
   11962:	f8c0 c014 	str.w	ip, [r0, #20]
   11966:	b006      	add	sp, #24
   11968:	bd80      	pop	{r7, pc}

0001196a <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E>:
   1196a:	b580      	push	{r7, lr}
   1196c:	b084      	sub	sp, #16
   1196e:	9001      	str	r0, [sp, #4]
   11970:	9102      	str	r1, [sp, #8]
   11972:	9801      	ldr	r0, [sp, #4]
   11974:	9902      	ldr	r1, [sp, #8]
   11976:	f7ff ff2b 	bl	117d0 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE>
   1197a:	9000      	str	r0, [sp, #0]
   1197c:	e7ff      	b.n	1197e <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E+0x14>
   1197e:	9800      	ldr	r0, [sp, #0]
   11980:	b004      	add	sp, #16
   11982:	bd80      	pop	{r7, pc}

00011984 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>:
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct Coord(pub CoordPart, pub CoordPart);

    impl Coord {
        /// Create a new coordinate with X and Y values
        pub fn new(x: CoordPart, y: CoordPart) -> Self {
   11984:	b084      	sub	sp, #16
   11986:	9002      	str	r0, [sp, #8]
   11988:	9103      	str	r1, [sp, #12]
            Coord(x, y)
   1198a:	9000      	str	r0, [sp, #0]
   1198c:	9101      	str	r1, [sp, #4]
        }
   1198e:	9800      	ldr	r0, [sp, #0]
   11990:	9901      	ldr	r1, [sp, #4]
   11992:	b004      	add	sp, #16
   11994:	4770      	bx	lr

00011996 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>:
    }

    impl Index<usize> for Coord {
        type Output = CoordPart;

        fn index(&self, idx: usize) -> &CoordPart {
   11996:	b580      	push	{r7, lr}
   11998:	b096      	sub	sp, #88	; 0x58
   1199a:	9109      	str	r1, [sp, #36]	; 0x24
   1199c:	9014      	str	r0, [sp, #80]	; 0x50
            match idx {
                0 => &self.0,
   1199e:	9909      	ldr	r1, [sp, #36]	; 0x24
   119a0:	2900      	cmp	r1, #0
   119a2:	9008      	str	r0, [sp, #32]
   119a4:	9107      	str	r1, [sp, #28]
   119a6:	d018      	beq.n	119da <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x44>
   119a8:	e7ff      	b.n	119aa <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x14>
   119aa:	9807      	ldr	r0, [sp, #28]
   119ac:	2801      	cmp	r0, #1
   119ae:	d017      	beq.n	119e0 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x4a>
   119b0:	e7ff      	b.n	119b2 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x1c>
                1 => &self.1,
                _ => panic!("Unreachable index {}", idx),
   119b2:	f640 0018 	movw	r0, #2072	; 0x818
   119b6:	f2c0 0002 	movt	r0, #2
   119ba:	6801      	ldr	r1, [r0, #0]
   119bc:	a809      	add	r0, sp, #36	; 0x24
   119be:	9013      	str	r0, [sp, #76]	; 0x4c
   119c0:	9813      	ldr	r0, [sp, #76]	; 0x4c
   119c2:	9015      	str	r0, [sp, #84]	; 0x54
   119c4:	f249 7235 	movw	r2, #38709	; 0x9735
   119c8:	f2c0 0201 	movt	r2, #1
   119cc:	9106      	str	r1, [sp, #24]
   119ce:	4611      	mov	r1, r2
   119d0:	f7ff ff63 	bl	1189a <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E>
   119d4:	9005      	str	r0, [sp, #20]
   119d6:	9104      	str	r1, [sp, #16]
   119d8:	e006      	b.n	119e8 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x52>
                0 => &self.0,
   119da:	9808      	ldr	r0, [sp, #32]
   119dc:	900a      	str	r0, [sp, #40]	; 0x28
            match idx {
   119de:	e020      	b.n	11a22 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x8c>
                1 => &self.1,
   119e0:	9808      	ldr	r0, [sp, #32]
   119e2:	1d01      	adds	r1, r0, #4
   119e4:	910a      	str	r1, [sp, #40]	; 0x28
            match idx {
   119e6:	e01c      	b.n	11a22 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x8c>
                _ => panic!("Unreachable index {}", idx),
   119e8:	9805      	ldr	r0, [sp, #20]
   119ea:	9011      	str	r0, [sp, #68]	; 0x44
   119ec:	9904      	ldr	r1, [sp, #16]
   119ee:	9112      	str	r1, [sp, #72]	; 0x48
   119f0:	466a      	mov	r2, sp
   119f2:	2301      	movs	r3, #1
   119f4:	6013      	str	r3, [r2, #0]
   119f6:	a80b      	add	r0, sp, #44	; 0x2c
   119f8:	aa11      	add	r2, sp, #68	; 0x44
   119fa:	9906      	ldr	r1, [sp, #24]
   119fc:	9203      	str	r2, [sp, #12]
   119fe:	461a      	mov	r2, r3
   11a00:	9b03      	ldr	r3, [sp, #12]
   11a02:	f7ff ff96 	bl	11932 <_ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE>
   11a06:	e7ff      	b.n	11a08 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x72>
   11a08:	f640 001c 	movw	r0, #2076	; 0x81c
   11a0c:	f2c0 0002 	movt	r0, #2
   11a10:	f005 ffc9 	bl	179a6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   11a14:	9002      	str	r0, [sp, #8]
   11a16:	e7ff      	b.n	11a18 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x82>
   11a18:	a80b      	add	r0, sp, #44	; 0x2c
   11a1a:	9902      	ldr	r1, [sp, #8]
   11a1c:	f006 f800 	bl	17a20 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   11a20:	defe      	udf	#254	; 0xfe
            match idx {
   11a22:	980a      	ldr	r0, [sp, #40]	; 0x28
            }
        }
   11a24:	b016      	add	sp, #88	; 0x58
   11a26:	bd80      	pop	{r7, pc}

00011a28 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE>:
    /// #
    /// let coord = Coord::new(-5, 10);
    ///
    /// assert_eq!(coord.to_unsigned(), UnsignedCoord::new(0, 10));
    /// ```
    fn to_unsigned(self) -> UnsignedCoord {
   11a28:	b580      	push	{r7, lr}
   11a2a:	b088      	sub	sp, #32
   11a2c:	9006      	str	r0, [sp, #24]
   11a2e:	9107      	str	r1, [sp, #28]
   11a30:	a806      	add	r0, sp, #24
   11a32:	2100      	movs	r1, #0
        UnsignedCoord::new(self[0].max(0) as u32, self[1].max(0) as u32)
   11a34:	f7ff ffaf 	bl	11996 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11a38:	9005      	str	r0, [sp, #20]
   11a3a:	e7ff      	b.n	11a3c <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x14>
   11a3c:	9805      	ldr	r0, [sp, #20]
   11a3e:	6800      	ldr	r0, [r0, #0]
   11a40:	2100      	movs	r1, #0
   11a42:	f7ff feba 	bl	117ba <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>
   11a46:	9004      	str	r0, [sp, #16]
   11a48:	e7ff      	b.n	11a4a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x22>
   11a4a:	a806      	add	r0, sp, #24
   11a4c:	2101      	movs	r1, #1
   11a4e:	f7ff ffa2 	bl	11996 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11a52:	9003      	str	r0, [sp, #12]
   11a54:	e7ff      	b.n	11a56 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x2e>
   11a56:	9803      	ldr	r0, [sp, #12]
   11a58:	6800      	ldr	r0, [r0, #0]
   11a5a:	2100      	movs	r1, #0
   11a5c:	f7ff fead 	bl	117ba <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>
   11a60:	9002      	str	r0, [sp, #8]
   11a62:	e7ff      	b.n	11a64 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x3c>
   11a64:	9804      	ldr	r0, [sp, #16]
   11a66:	9902      	ldr	r1, [sp, #8]
   11a68:	f000 f84e 	bl	11b08 <_ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E>
   11a6c:	9001      	str	r0, [sp, #4]
   11a6e:	9100      	str	r1, [sp, #0]
   11a70:	e7ff      	b.n	11a72 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x4a>
    }
   11a72:	9801      	ldr	r0, [sp, #4]
   11a74:	9900      	ldr	r1, [sp, #0]
   11a76:	b008      	add	sp, #32
   11a78:	bd80      	pop	{r7, pc}

00011a7a <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>:
/// Take a tuple of 8 bit `(red, green, blue)` color values and convert them to a single 16 bit
/// color
///
/// The 2 or 3 (for the green channel) least significant bits are discarded
impl From<(u8, u8, u8)> for Rgb565 {
    fn from((r, g, b): (u8, u8, u8)) -> Self {
   11a7a:	b08b      	sub	sp, #44	; 0x2c
   11a7c:	4601      	mov	r1, r0
   11a7e:	f8ad 0020 	strh.w	r0, [sp, #32]
   11a82:	0c00      	lsrs	r0, r0, #16
   11a84:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   11a88:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   11a8c:	f88d 001e 	strb.w	r0, [sp, #30]
   11a90:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   11a94:	f8ad 001c 	strh.w	r0, [sp, #28]
   11a98:	f89d 001c 	ldrb.w	r0, [sp, #28]
   11a9c:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   11aa0:	f89d 201d 	ldrb.w	r2, [sp, #29]
   11aa4:	4613      	mov	r3, r2
   11aa6:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   11aaa:	f89d 201e 	ldrb.w	r2, [sp, #30]
   11aae:	4694      	mov	ip, r2
   11ab0:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
        let value =
        // Red
        (((r as u16) << 8) & RED_MASK)
   11ab4:	0200      	lsls	r0, r0, #8
   11ab6:	9306      	str	r3, [sp, #24]
   11ab8:	f8cd c014 	str.w	ip, [sp, #20]
   11abc:	9004      	str	r0, [sp, #16]
   11abe:	e7ff      	b.n	11ac0 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x46>
   11ac0:	9804      	ldr	r0, [sp, #16]
   11ac2:	f400 4178 	and.w	r1, r0, #63488	; 0xf800
        // Green
        | (((g as u16) << 3) & GREEN_MASK)
   11ac6:	9a06      	ldr	r2, [sp, #24]
   11ac8:	b2d3      	uxtb	r3, r2
   11aca:	00db      	lsls	r3, r3, #3
   11acc:	9103      	str	r1, [sp, #12]
   11ace:	9302      	str	r3, [sp, #8]
   11ad0:	e7ff      	b.n	11ad2 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x58>
   11ad2:	9802      	ldr	r0, [sp, #8]
   11ad4:	f400 61fc 	and.w	r1, r0, #2016	; 0x7e0
        (((r as u16) << 8) & RED_MASK)
   11ad8:	9a03      	ldr	r2, [sp, #12]
   11ada:	4311      	orrs	r1, r2
        // Blue
        | ((b as u16) >> 3 & BLUE_MASK);
   11adc:	9b05      	ldr	r3, [sp, #20]
   11ade:	fa5f fc83 	uxtb.w	ip, r3
   11ae2:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
   11ae6:	9101      	str	r1, [sp, #4]
   11ae8:	f8cd c000 	str.w	ip, [sp]
   11aec:	e7ff      	b.n	11aee <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x74>
   11aee:	9800      	ldr	r0, [sp, #0]
   11af0:	f000 011f 	and.w	r1, r0, #31
        (((r as u16) << 8) & RED_MASK)
   11af4:	9a01      	ldr	r2, [sp, #4]
   11af6:	4311      	orrs	r1, r2
   11af8:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a

        Self(value)
   11afc:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
    }
   11b00:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   11b04:	b00b      	add	sp, #44	; 0x2c
   11b06:	4770      	bx	lr

00011b08 <_ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E>:
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct UnsignedCoord(pub UnsignedCoordPart, pub UnsignedCoordPart);

    impl UnsignedCoord {
        /// Create a new coordinate with X and Y values
        pub fn new(x: UnsignedCoordPart, y: UnsignedCoordPart) -> Self {
   11b08:	b084      	sub	sp, #16
   11b0a:	9002      	str	r0, [sp, #8]
   11b0c:	9103      	str	r1, [sp, #12]
            UnsignedCoord(x, y)
   11b0e:	9000      	str	r0, [sp, #0]
   11b10:	9101      	str	r1, [sp, #4]
        }
   11b12:	9800      	ldr	r0, [sp, #0]
   11b14:	9901      	ldr	r1, [sp, #4]
   11b16:	b004      	add	sp, #16
   11b18:	4770      	bx	lr

00011b1a <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>:
   11b1a:	b580      	push	{r7, lr}
   11b1c:	b088      	sub	sp, #32
   11b1e:	9005      	str	r0, [sp, #20]
   11b20:	9106      	str	r1, [sp, #24]
   11b22:	9003      	str	r0, [sp, #12]
   11b24:	4608      	mov	r0, r1
   11b26:	f000 fa21 	bl	11f6c <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>
   11b2a:	9004      	str	r0, [sp, #16]
   11b2c:	e7ff      	b.n	11b2e <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x14>
   11b2e:	9804      	ldr	r0, [sp, #16]
   11b30:	9007      	str	r0, [sp, #28]
   11b32:	9903      	ldr	r1, [sp, #12]
   11b34:	680a      	ldr	r2, [r1, #0]
   11b36:	9002      	str	r0, [sp, #8]
   11b38:	4610      	mov	r0, r2
   11b3a:	9902      	ldr	r1, [sp, #8]
   11b3c:	f000 f837 	bl	11bae <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>
   11b40:	9001      	str	r0, [sp, #4]
   11b42:	9100      	str	r1, [sp, #0]
   11b44:	e7ff      	b.n	11b46 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x2c>
   11b46:	9801      	ldr	r0, [sp, #4]
   11b48:	9900      	ldr	r1, [sp, #0]
   11b4a:	b008      	add	sp, #32
   11b4c:	bd80      	pop	{r7, pc}

00011b4e <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>:
   11b4e:	b580      	push	{r7, lr}
   11b50:	b084      	sub	sp, #16
   11b52:	9001      	str	r0, [sp, #4]
   11b54:	9102      	str	r1, [sp, #8]
   11b56:	9203      	str	r2, [sp, #12]
   11b58:	9000      	str	r0, [sp, #0]
   11b5a:	4608      	mov	r0, r1
   11b5c:	9900      	ldr	r1, [sp, #0]
   11b5e:	f00c fafd 	bl	1e15c <__aeabi_memcpy>
   11b62:	e7ff      	b.n	11b64 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE+0x16>
   11b64:	b004      	add	sp, #16
   11b66:	bd80      	pop	{r7, pc}

00011b68 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>:
   11b68:	b580      	push	{r7, lr}
   11b6a:	b084      	sub	sp, #16
   11b6c:	9001      	str	r0, [sp, #4]
   11b6e:	9102      	str	r1, [sp, #8]
   11b70:	9203      	str	r2, [sp, #12]
   11b72:	0092      	lsls	r2, r2, #2
   11b74:	9000      	str	r0, [sp, #0]
   11b76:	4608      	mov	r0, r1
   11b78:	9900      	ldr	r1, [sp, #0]
   11b7a:	f00c faef 	bl	1e15c <__aeabi_memcpy>
   11b7e:	e7ff      	b.n	11b80 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E+0x18>
   11b80:	b004      	add	sp, #16
   11b82:	bd80      	pop	{r7, pc}

00011b84 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>:
   11b84:	b082      	sub	sp, #8
   11b86:	9000      	str	r0, [sp, #0]
   11b88:	9101      	str	r1, [sp, #4]
   11b8a:	6800      	ldr	r0, [r0, #0]
   11b8c:	6809      	ldr	r1, [r1, #0]
   11b8e:	2200      	movs	r2, #0
   11b90:	4288      	cmp	r0, r1
   11b92:	bf38      	it	cc
   11b94:	2201      	movcc	r2, #1
   11b96:	4610      	mov	r0, r2
   11b98:	b002      	add	sp, #8
   11b9a:	4770      	bx	lr

00011b9c <_ZN4core3mem4swap17hc4afbec7b5ffb125E>:
   11b9c:	b580      	push	{r7, lr}
   11b9e:	b082      	sub	sp, #8
   11ba0:	9000      	str	r0, [sp, #0]
   11ba2:	9101      	str	r1, [sp, #4]
   11ba4:	f000 f85f 	bl	11c66 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>
   11ba8:	e7ff      	b.n	11baa <_ZN4core3mem4swap17hc4afbec7b5ffb125E+0xe>
   11baa:	b002      	add	sp, #8
   11bac:	bd80      	pop	{r7, pc}

00011bae <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>:
   11bae:	b580      	push	{r7, lr}
   11bb0:	b088      	sub	sp, #32
   11bb2:	9004      	str	r0, [sp, #16]
   11bb4:	9105      	str	r1, [sp, #20]
   11bb6:	f000 f819 	bl	11bec <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>
   11bba:	9001      	str	r0, [sp, #4]
   11bbc:	9100      	str	r1, [sp, #0]
   11bbe:	e7ff      	b.n	11bc0 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x12>
   11bc0:	9801      	ldr	r0, [sp, #4]
   11bc2:	9006      	str	r0, [sp, #24]
   11bc4:	9900      	ldr	r1, [sp, #0]
   11bc6:	f001 0201 	and.w	r2, r1, #1
   11bca:	f88d 201f 	strb.w	r2, [sp, #31]
   11bce:	2a00      	cmp	r2, #0
   11bd0:	d105      	bne.n	11bde <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x30>
   11bd2:	e7ff      	b.n	11bd4 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x26>
   11bd4:	9801      	ldr	r0, [sp, #4]
   11bd6:	9003      	str	r0, [sp, #12]
   11bd8:	2101      	movs	r1, #1
   11bda:	9102      	str	r1, [sp, #8]
   11bdc:	e002      	b.n	11be4 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
   11bde:	2000      	movs	r0, #0
   11be0:	9002      	str	r0, [sp, #8]
   11be2:	e7ff      	b.n	11be4 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
   11be4:	9802      	ldr	r0, [sp, #8]
   11be6:	9903      	ldr	r1, [sp, #12]
   11be8:	b008      	add	sp, #32
   11bea:	bd80      	pop	{r7, pc}

00011bec <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>:
   11bec:	b08a      	sub	sp, #40	; 0x28
   11bee:	9004      	str	r0, [sp, #16]
   11bf0:	9105      	str	r1, [sp, #20]
   11bf2:	1840      	adds	r0, r0, r1
   11bf4:	f04f 0100 	mov.w	r1, #0
   11bf8:	f141 0100 	adc.w	r1, r1, #0
   11bfc:	9006      	str	r0, [sp, #24]
   11bfe:	f88d 101c 	strb.w	r1, [sp, #28]
   11c02:	9806      	ldr	r0, [sp, #24]
   11c04:	f89d 101c 	ldrb.w	r1, [sp, #28]
   11c08:	9001      	str	r0, [sp, #4]
   11c0a:	9100      	str	r1, [sp, #0]
   11c0c:	e7ff      	b.n	11c0e <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE+0x22>
   11c0e:	9801      	ldr	r0, [sp, #4]
   11c10:	9008      	str	r0, [sp, #32]
   11c12:	9900      	ldr	r1, [sp, #0]
   11c14:	f001 0201 	and.w	r2, r1, #1
   11c18:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   11c1c:	9002      	str	r0, [sp, #8]
   11c1e:	f88d 200c 	strb.w	r2, [sp, #12]
   11c22:	9802      	ldr	r0, [sp, #8]
   11c24:	f89d 100c 	ldrb.w	r1, [sp, #12]
   11c28:	b00a      	add	sp, #40	; 0x28
   11c2a:	4770      	bx	lr

00011c2c <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>:
   11c2c:	b580      	push	{r7, lr}
   11c2e:	b08c      	sub	sp, #48	; 0x30
   11c30:	9005      	str	r0, [sp, #20]
   11c32:	9106      	str	r1, [sp, #24]
   11c34:	9207      	str	r2, [sp, #28]
   11c36:	4603      	mov	r3, r0
   11c38:	9008      	str	r0, [sp, #32]
   11c3a:	4608      	mov	r0, r1
   11c3c:	9109      	str	r1, [sp, #36]	; 0x24
   11c3e:	2104      	movs	r1, #4
   11c40:	910b      	str	r1, [sp, #44]	; 0x2c
   11c42:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11c44:	9204      	str	r2, [sp, #16]
   11c46:	9303      	str	r3, [sp, #12]
   11c48:	9002      	str	r0, [sp, #8]
   11c4a:	9101      	str	r1, [sp, #4]
   11c4c:	e7ff      	b.n	11c4e <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x22>
   11c4e:	9801      	ldr	r0, [sp, #4]
   11c50:	9904      	ldr	r1, [sp, #16]
   11c52:	fb00 f201 	mul.w	r2, r0, r1
   11c56:	920a      	str	r2, [sp, #40]	; 0x28
   11c58:	9803      	ldr	r0, [sp, #12]
   11c5a:	9902      	ldr	r1, [sp, #8]
   11c5c:	f000 f82e 	bl	11cbc <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>
   11c60:	e7ff      	b.n	11c62 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x36>
   11c62:	b00c      	add	sp, #48	; 0x30
   11c64:	bd80      	pop	{r7, pc}

00011c66 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>:
   11c66:	b580      	push	{r7, lr}
   11c68:	b088      	sub	sp, #32
   11c6a:	9004      	str	r0, [sp, #16]
   11c6c:	9105      	str	r1, [sp, #20]
   11c6e:	2204      	movs	r2, #4
   11c70:	9207      	str	r2, [sp, #28]
   11c72:	9a07      	ldr	r2, [sp, #28]
   11c74:	9103      	str	r1, [sp, #12]
   11c76:	9002      	str	r0, [sp, #8]
   11c78:	9201      	str	r2, [sp, #4]
   11c7a:	e7ff      	b.n	11c7c <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x16>
   11c7c:	9801      	ldr	r0, [sp, #4]
   11c7e:	2820      	cmp	r0, #32
   11c80:	d306      	bcc.n	11c90 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x2a>
   11c82:	e7ff      	b.n	11c84 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x1e>
   11c84:	2201      	movs	r2, #1
   11c86:	9802      	ldr	r0, [sp, #8]
   11c88:	9903      	ldr	r1, [sp, #12]
   11c8a:	f7ff ffcf 	bl	11c2c <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>
   11c8e:	e012      	b.n	11cb6 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x50>
   11c90:	9802      	ldr	r0, [sp, #8]
   11c92:	f000 f8a1 	bl	11dd8 <_ZN4core3ptr4read17h2038b0ecb0975c4fE>
   11c96:	4601      	mov	r1, r0
   11c98:	9006      	str	r0, [sp, #24]
   11c9a:	9100      	str	r1, [sp, #0]
   11c9c:	e7ff      	b.n	11c9e <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x38>
   11c9e:	2201      	movs	r2, #1
   11ca0:	9803      	ldr	r0, [sp, #12]
   11ca2:	9902      	ldr	r1, [sp, #8]
   11ca4:	f7ff ff60 	bl	11b68 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
   11ca8:	e7ff      	b.n	11caa <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x44>
   11caa:	9803      	ldr	r0, [sp, #12]
   11cac:	9900      	ldr	r1, [sp, #0]
   11cae:	f000 f8ac 	bl	11e0a <_ZN4core3ptr5write17h4a80332de2cee3d3E>
   11cb2:	e7ff      	b.n	11cb4 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x4e>
   11cb4:	e000      	b.n	11cb8 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
   11cb6:	e7ff      	b.n	11cb8 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
   11cb8:	b008      	add	sp, #32
   11cba:	bd80      	pop	{r7, pc}

00011cbc <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>:
   11cbc:	b5d0      	push	{r4, r6, r7, lr}
   11cbe:	af02      	add	r7, sp, #8
   11cc0:	b0b4      	sub	sp, #208	; 0xd0
   11cc2:	466c      	mov	r4, sp
   11cc4:	f36f 0404 	bfc	r4, #0, #5
   11cc8:	46a5      	mov	sp, r4
   11cca:	9024      	str	r0, [sp, #144]	; 0x90
   11ccc:	9125      	str	r1, [sp, #148]	; 0x94
   11cce:	9226      	str	r2, [sp, #152]	; 0x98
   11cd0:	2320      	movs	r3, #32
   11cd2:	932f      	str	r3, [sp, #188]	; 0xbc
   11cd4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   11cd6:	9327      	str	r3, [sp, #156]	; 0x9c
   11cd8:	920e      	str	r2, [sp, #56]	; 0x38
   11cda:	910d      	str	r1, [sp, #52]	; 0x34
   11cdc:	900c      	str	r0, [sp, #48]	; 0x30
   11cde:	930b      	str	r3, [sp, #44]	; 0x2c
   11ce0:	e7ff      	b.n	11ce2 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x26>
   11ce2:	2000      	movs	r0, #0
   11ce4:	900f      	str	r0, [sp, #60]	; 0x3c
   11ce6:	e7ff      	b.n	11ce8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
   11ce8:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11cea:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11cec:	4408      	add	r0, r1
   11cee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11cf0:	4290      	cmp	r0, r2
   11cf2:	d905      	bls.n	11d00 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x44>
   11cf4:	e7ff      	b.n	11cf6 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x3a>
   11cf6:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11cf8:	990e      	ldr	r1, [sp, #56]	; 0x38
   11cfa:	4288      	cmp	r0, r1
   11cfc:	d334      	bcc.n	11d68 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xac>
   11cfe:	e067      	b.n	11dd0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
   11d00:	e7ff      	b.n	11d02 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x46>
   11d02:	a810      	add	r0, sp, #64	; 0x40
   11d04:	9030      	str	r0, [sp, #192]	; 0xc0
   11d06:	9031      	str	r0, [sp, #196]	; 0xc4
   11d08:	e7ff      	b.n	11d0a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x4e>
   11d0a:	a810      	add	r0, sp, #64	; 0x40
   11d0c:	4601      	mov	r1, r0
   11d0e:	9028      	str	r0, [sp, #160]	; 0xa0
   11d10:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11d12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11d14:	900a      	str	r0, [sp, #40]	; 0x28
   11d16:	4610      	mov	r0, r2
   11d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11d1a:	9109      	str	r1, [sp, #36]	; 0x24
   11d1c:	4619      	mov	r1, r3
   11d1e:	f000 f87a 	bl	11e16 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11d22:	4601      	mov	r1, r0
   11d24:	9029      	str	r0, [sp, #164]	; 0xa4
   11d26:	9108      	str	r1, [sp, #32]
   11d28:	e7ff      	b.n	11d2a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x6e>
   11d2a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11d2c:	980d      	ldr	r0, [sp, #52]	; 0x34
   11d2e:	f000 f872 	bl	11e16 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11d32:	4601      	mov	r1, r0
   11d34:	902a      	str	r0, [sp, #168]	; 0xa8
   11d36:	9107      	str	r1, [sp, #28]
   11d38:	e7ff      	b.n	11d3a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x7e>
   11d3a:	9808      	ldr	r0, [sp, #32]
   11d3c:	9909      	ldr	r1, [sp, #36]	; 0x24
   11d3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11d40:	f7ff ff05 	bl	11b4e <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11d44:	e7ff      	b.n	11d46 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x8a>
   11d46:	9807      	ldr	r0, [sp, #28]
   11d48:	9908      	ldr	r1, [sp, #32]
   11d4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11d4c:	f7ff feff 	bl	11b4e <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11d50:	e7ff      	b.n	11d52 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x96>
   11d52:	9809      	ldr	r0, [sp, #36]	; 0x24
   11d54:	9907      	ldr	r1, [sp, #28]
   11d56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11d58:	f7ff fef9 	bl	11b4e <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11d5c:	e7ff      	b.n	11d5e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xa2>
   11d5e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11d60:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11d62:	4408      	add	r0, r1
   11d64:	900f      	str	r0, [sp, #60]	; 0x3c
   11d66:	e7bf      	b.n	11ce8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
   11d68:	e7ff      	b.n	11d6a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xae>
   11d6a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11d6c:	990e      	ldr	r1, [sp, #56]	; 0x38
   11d6e:	1a08      	subs	r0, r1, r0
   11d70:	4602      	mov	r2, r0
   11d72:	902b      	str	r0, [sp, #172]	; 0xac
   11d74:	a81c      	add	r0, sp, #112	; 0x70
   11d76:	9032      	str	r0, [sp, #200]	; 0xc8
   11d78:	9033      	str	r0, [sp, #204]	; 0xcc
   11d7a:	9206      	str	r2, [sp, #24]
   11d7c:	9005      	str	r0, [sp, #20]
   11d7e:	e7ff      	b.n	11d80 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xc4>
   11d80:	9805      	ldr	r0, [sp, #20]
   11d82:	9905      	ldr	r1, [sp, #20]
   11d84:	912c      	str	r1, [sp, #176]	; 0xb0
   11d86:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11d88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11d8a:	9004      	str	r0, [sp, #16]
   11d8c:	4610      	mov	r0, r2
   11d8e:	f000 f842 	bl	11e16 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11d92:	4601      	mov	r1, r0
   11d94:	902d      	str	r0, [sp, #180]	; 0xb4
   11d96:	9103      	str	r1, [sp, #12]
   11d98:	e7ff      	b.n	11d9a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xde>
   11d9a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11d9c:	980d      	ldr	r0, [sp, #52]	; 0x34
   11d9e:	f000 f83a 	bl	11e16 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11da2:	4601      	mov	r1, r0
   11da4:	902e      	str	r0, [sp, #184]	; 0xb8
   11da6:	9102      	str	r1, [sp, #8]
   11da8:	e7ff      	b.n	11daa <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xee>
   11daa:	9803      	ldr	r0, [sp, #12]
   11dac:	9904      	ldr	r1, [sp, #16]
   11dae:	9a06      	ldr	r2, [sp, #24]
   11db0:	f7ff fecd 	bl	11b4e <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11db4:	e7ff      	b.n	11db6 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xfa>
   11db6:	9802      	ldr	r0, [sp, #8]
   11db8:	9903      	ldr	r1, [sp, #12]
   11dba:	9a06      	ldr	r2, [sp, #24]
   11dbc:	f7ff fec7 	bl	11b4e <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11dc0:	e7ff      	b.n	11dc2 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x106>
   11dc2:	9804      	ldr	r0, [sp, #16]
   11dc4:	9902      	ldr	r1, [sp, #8]
   11dc6:	9a06      	ldr	r2, [sp, #24]
   11dc8:	f7ff fec1 	bl	11b4e <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11dcc:	e7ff      	b.n	11dce <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x112>
   11dce:	e7ff      	b.n	11dd0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
   11dd0:	f1a7 0408 	sub.w	r4, r7, #8
   11dd4:	46a5      	mov	sp, r4
   11dd6:	bdd0      	pop	{r4, r6, r7, pc}

00011dd8 <_ZN4core3ptr4read17h2038b0ecb0975c4fE>:
   11dd8:	b580      	push	{r7, lr}
   11dda:	b08a      	sub	sp, #40	; 0x28
   11ddc:	9004      	str	r0, [sp, #16]
   11dde:	9905      	ldr	r1, [sp, #20]
   11de0:	9103      	str	r1, [sp, #12]
   11de2:	9002      	str	r0, [sp, #8]
   11de4:	e7ff      	b.n	11de6 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0xe>
   11de6:	a803      	add	r0, sp, #12
   11de8:	9008      	str	r0, [sp, #32]
   11dea:	9009      	str	r0, [sp, #36]	; 0x24
   11dec:	e7ff      	b.n	11dee <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x16>
   11dee:	a903      	add	r1, sp, #12
   11df0:	2201      	movs	r2, #1
   11df2:	9802      	ldr	r0, [sp, #8]
   11df4:	f7ff feb8 	bl	11b68 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
   11df8:	e7ff      	b.n	11dfa <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x22>
   11dfa:	9803      	ldr	r0, [sp, #12]
   11dfc:	9006      	str	r0, [sp, #24]
   11dfe:	9007      	str	r0, [sp, #28]
   11e00:	9001      	str	r0, [sp, #4]
   11e02:	e7ff      	b.n	11e04 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x2c>
   11e04:	9801      	ldr	r0, [sp, #4]
   11e06:	b00a      	add	sp, #40	; 0x28
   11e08:	bd80      	pop	{r7, pc}

00011e0a <_ZN4core3ptr5write17h4a80332de2cee3d3E>:
   11e0a:	b082      	sub	sp, #8
   11e0c:	9000      	str	r0, [sp, #0]
   11e0e:	9101      	str	r1, [sp, #4]
   11e10:	6001      	str	r1, [r0, #0]
   11e12:	b002      	add	sp, #8
   11e14:	4770      	bx	lr

00011e16 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>:
   11e16:	b580      	push	{r7, lr}
   11e18:	b084      	sub	sp, #16
   11e1a:	9002      	str	r0, [sp, #8]
   11e1c:	9103      	str	r1, [sp, #12]
   11e1e:	f000 f805 	bl	11e2c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>
   11e22:	9001      	str	r0, [sp, #4]
   11e24:	e7ff      	b.n	11e26 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E+0x10>
   11e26:	9801      	ldr	r0, [sp, #4]
   11e28:	b004      	add	sp, #16
   11e2a:	bd80      	pop	{r7, pc}

00011e2c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>:
   11e2c:	b084      	sub	sp, #16
   11e2e:	9001      	str	r0, [sp, #4]
   11e30:	9102      	str	r1, [sp, #8]
   11e32:	4408      	add	r0, r1
   11e34:	9003      	str	r0, [sp, #12]
   11e36:	9803      	ldr	r0, [sp, #12]
   11e38:	9000      	str	r0, [sp, #0]
   11e3a:	e7ff      	b.n	11e3c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE+0x10>
   11e3c:	9800      	ldr	r0, [sp, #0]
   11e3e:	b004      	add	sp, #16
   11e40:	4770      	bx	lr

00011e42 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>:
   11e42:	b580      	push	{r7, lr}
   11e44:	b084      	sub	sp, #16
   11e46:	9002      	str	r0, [sp, #8]
   11e48:	9103      	str	r1, [sp, #12]
   11e4a:	f000 f805 	bl	11e58 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>
   11e4e:	9001      	str	r0, [sp, #4]
   11e50:	e7ff      	b.n	11e52 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE+0x10>
   11e52:	9801      	ldr	r0, [sp, #4]
   11e54:	b004      	add	sp, #16
   11e56:	bd80      	pop	{r7, pc}

00011e58 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>:
   11e58:	b084      	sub	sp, #16
   11e5a:	9001      	str	r0, [sp, #4]
   11e5c:	9102      	str	r1, [sp, #8]
   11e5e:	4408      	add	r0, r1
   11e60:	9003      	str	r0, [sp, #12]
   11e62:	9803      	ldr	r0, [sp, #12]
   11e64:	9000      	str	r0, [sp, #0]
   11e66:	e7ff      	b.n	11e68 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE+0x10>
   11e68:	9800      	ldr	r0, [sp, #0]
   11e6a:	b004      	add	sp, #16
   11e6c:	4770      	bx	lr

00011e6e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>:
   11e6e:	b580      	push	{r7, lr}
   11e70:	b08a      	sub	sp, #40	; 0x28
   11e72:	9009      	str	r0, [sp, #36]	; 0x24
   11e74:	2100      	movs	r1, #0
   11e76:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   11e7a:	1d01      	adds	r1, r0, #4
   11e7c:	9002      	str	r0, [sp, #8]
   11e7e:	f7ff fe81 	bl	11b84 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>
   11e82:	9001      	str	r0, [sp, #4]
   11e84:	e7ff      	b.n	11e86 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x18>
   11e86:	9801      	ldr	r0, [sp, #4]
   11e88:	07c1      	lsls	r1, r0, #31
   11e8a:	2900      	cmp	r1, #0
   11e8c:	d103      	bne.n	11e96 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x28>
   11e8e:	e7ff      	b.n	11e90 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x22>
   11e90:	2000      	movs	r0, #0
   11e92:	9003      	str	r0, [sp, #12]
   11e94:	e021      	b.n	11eda <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
   11e96:	2001      	movs	r0, #1
   11e98:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11e9c:	9902      	ldr	r1, [sp, #8]
   11e9e:	9000      	str	r0, [sp, #0]
   11ea0:	4608      	mov	r0, r1
   11ea2:	9900      	ldr	r1, [sp, #0]
   11ea4:	f7ff fe39 	bl	11b1a <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>
   11ea8:	9106      	str	r1, [sp, #24]
   11eaa:	9005      	str	r0, [sp, #20]
   11eac:	e7ff      	b.n	11eae <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x40>
   11eae:	9805      	ldr	r0, [sp, #20]
   11eb0:	2801      	cmp	r0, #1
   11eb2:	d003      	beq.n	11ebc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x4e>
   11eb4:	e7ff      	b.n	11eb6 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x48>
   11eb6:	2000      	movs	r0, #0
   11eb8:	9003      	str	r0, [sp, #12]
   11eba:	e021      	b.n	11f00 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
   11ebc:	2000      	movs	r0, #0
   11ebe:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11ec2:	9806      	ldr	r0, [sp, #24]
   11ec4:	9007      	str	r0, [sp, #28]
   11ec6:	a807      	add	r0, sp, #28
   11ec8:	9902      	ldr	r1, [sp, #8]
   11eca:	f7ff fe67 	bl	11b9c <_ZN4core3mem4swap17hc4afbec7b5ffb125E>
   11ece:	e7ff      	b.n	11ed0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x62>
   11ed0:	9807      	ldr	r0, [sp, #28]
   11ed2:	9004      	str	r0, [sp, #16]
   11ed4:	2001      	movs	r0, #1
   11ed6:	9003      	str	r0, [sp, #12]
   11ed8:	e012      	b.n	11f00 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
   11eda:	9803      	ldr	r0, [sp, #12]
   11edc:	9904      	ldr	r1, [sp, #16]
   11ede:	b00a      	add	sp, #40	; 0x28
   11ee0:	bd80      	pop	{r7, pc}
   11ee2:	2000      	movs	r0, #0
   11ee4:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11ee8:	e7f7      	b.n	11eda <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
   11eea:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   11eee:	07c0      	lsls	r0, r0, #31
   11ef0:	2800      	cmp	r0, #0
   11ef2:	d0f6      	beq.n	11ee2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   11ef4:	e7ff      	b.n	11ef6 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x88>
   11ef6:	2000      	movs	r0, #0
   11ef8:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11efc:	e7f1      	b.n	11ee2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   11efe:	e7f0      	b.n	11ee2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   11f00:	9805      	ldr	r0, [sp, #20]
   11f02:	2801      	cmp	r0, #1
   11f04:	d0f1      	beq.n	11eea <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x7c>
   11f06:	e7fa      	b.n	11efe <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x90>

00011f08 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>:
   11f08:	b082      	sub	sp, #8
   11f0a:	9000      	str	r0, [sp, #0]
   11f0c:	9101      	str	r1, [sp, #4]
   11f0e:	b002      	add	sp, #8
   11f10:	4770      	bx	lr

00011f12 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>:
   11f12:	b580      	push	{r7, lr}
   11f14:	b086      	sub	sp, #24
   11f16:	9003      	str	r0, [sp, #12]
   11f18:	9104      	str	r1, [sp, #16]
   11f1a:	9205      	str	r2, [sp, #20]
   11f1c:	9002      	str	r0, [sp, #8]
   11f1e:	4610      	mov	r0, r2
   11f20:	9a02      	ldr	r2, [sp, #8]
   11f22:	9101      	str	r1, [sp, #4]
   11f24:	4611      	mov	r1, r2
   11f26:	9a01      	ldr	r2, [sp, #4]
   11f28:	f000 f846 	bl	11fb8 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>
   11f2c:	9000      	str	r0, [sp, #0]
   11f2e:	e7ff      	b.n	11f30 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E+0x1e>
   11f30:	9800      	ldr	r0, [sp, #0]
   11f32:	b006      	add	sp, #24
   11f34:	bd80      	pop	{r7, pc}

00011f36 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>:
   11f36:	b084      	sub	sp, #16
   11f38:	9002      	str	r0, [sp, #8]
   11f3a:	9103      	str	r1, [sp, #12]
   11f3c:	9000      	str	r0, [sp, #0]
   11f3e:	9101      	str	r1, [sp, #4]
   11f40:	9801      	ldr	r0, [sp, #4]
   11f42:	b004      	add	sp, #16
   11f44:	4770      	bx	lr

00011f46 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>:
   11f46:	b082      	sub	sp, #8
   11f48:	9000      	str	r0, [sp, #0]
   11f4a:	9101      	str	r1, [sp, #4]
   11f4c:	b002      	add	sp, #8
   11f4e:	4770      	bx	lr

00011f50 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>:
   11f50:	b081      	sub	sp, #4
   11f52:	9000      	str	r0, [sp, #0]
   11f54:	b001      	add	sp, #4
   11f56:	4770      	bx	lr

00011f58 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>:
   11f58:	b580      	push	{r7, lr}
   11f5a:	b082      	sub	sp, #8
   11f5c:	9001      	str	r0, [sp, #4]
   11f5e:	f7ff fff7 	bl	11f50 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>
   11f62:	9000      	str	r0, [sp, #0]
   11f64:	e7ff      	b.n	11f66 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE+0xe>
   11f66:	9800      	ldr	r0, [sp, #0]
   11f68:	b002      	add	sp, #8
   11f6a:	bd80      	pop	{r7, pc}

00011f6c <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>:
   11f6c:	b580      	push	{r7, lr}
   11f6e:	b084      	sub	sp, #16
   11f70:	9003      	str	r0, [sp, #12]
   11f72:	f7ff fff1 	bl	11f58 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>
   11f76:	9001      	str	r0, [sp, #4]
   11f78:	e7ff      	b.n	11f7a <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E+0xe>
   11f7a:	9801      	ldr	r0, [sp, #4]
   11f7c:	9002      	str	r0, [sp, #8]
   11f7e:	9802      	ldr	r0, [sp, #8]
   11f80:	b004      	add	sp, #16
   11f82:	bd80      	pop	{r7, pc}

00011f84 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>:
   11f84:	b082      	sub	sp, #8
   11f86:	9000      	str	r0, [sp, #0]
   11f88:	9101      	str	r1, [sp, #4]
   11f8a:	b002      	add	sp, #8
   11f8c:	4770      	bx	lr

00011f8e <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>:
   11f8e:	b580      	push	{r7, lr}
   11f90:	b086      	sub	sp, #24
   11f92:	9003      	str	r0, [sp, #12]
   11f94:	9104      	str	r1, [sp, #16]
   11f96:	9205      	str	r2, [sp, #20]
   11f98:	9002      	str	r0, [sp, #8]
   11f9a:	4608      	mov	r0, r1
   11f9c:	4611      	mov	r1, r2
   11f9e:	f7ff ffd2 	bl	11f46 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
   11fa2:	9001      	str	r0, [sp, #4]
   11fa4:	e7ff      	b.n	11fa6 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x18>
   11fa6:	9801      	ldr	r0, [sp, #4]
   11fa8:	9902      	ldr	r1, [sp, #8]
   11faa:	f7ff ff4a 	bl	11e42 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>
   11fae:	9000      	str	r0, [sp, #0]
   11fb0:	e7ff      	b.n	11fb2 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x24>
   11fb2:	9800      	ldr	r0, [sp, #0]
   11fb4:	b006      	add	sp, #24
   11fb6:	bd80      	pop	{r7, pc}

00011fb8 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>:
   11fb8:	b580      	push	{r7, lr}
   11fba:	b086      	sub	sp, #24
   11fbc:	9003      	str	r0, [sp, #12]
   11fbe:	9104      	str	r1, [sp, #16]
   11fc0:	9205      	str	r2, [sp, #20]
   11fc2:	9002      	str	r0, [sp, #8]
   11fc4:	4608      	mov	r0, r1
   11fc6:	4611      	mov	r1, r2
   11fc8:	f7ff ff9e 	bl	11f08 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
   11fcc:	9001      	str	r0, [sp, #4]
   11fce:	e7ff      	b.n	11fd0 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x18>
   11fd0:	9801      	ldr	r0, [sp, #4]
   11fd2:	9902      	ldr	r1, [sp, #8]
   11fd4:	f7ff ff1f 	bl	11e16 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11fd8:	9000      	str	r0, [sp, #0]
   11fda:	e7ff      	b.n	11fdc <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x24>
   11fdc:	9800      	ldr	r0, [sp, #0]
   11fde:	b006      	add	sp, #24
   11fe0:	bd80      	pop	{r7, pc}

00011fe2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>:
   11fe2:	b081      	sub	sp, #4
   11fe4:	b001      	add	sp, #4
   11fe6:	4770      	bx	lr

00011fe8 <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>:
   11fe8:	b580      	push	{r7, lr}
   11fea:	b086      	sub	sp, #24
   11fec:	f8dd c020 	ldr.w	ip, [sp, #32]
   11ff0:	9102      	str	r1, [sp, #8]
   11ff2:	9203      	str	r2, [sp, #12]
   11ff4:	9304      	str	r3, [sp, #16]
   11ff6:	f8cd c014 	str.w	ip, [sp, #20]
   11ffa:	f04f 0e00 	mov.w	lr, #0
   11ffe:	f8cd e004 	str.w	lr, [sp, #4]
   12002:	f8cd e000 	str.w	lr, [sp]
   12006:	f8cd e000 	str.w	lr, [sp]
   1200a:	6001      	str	r1, [r0, #0]
   1200c:	6042      	str	r2, [r0, #4]
   1200e:	9900      	ldr	r1, [sp, #0]
   12010:	9a01      	ldr	r2, [sp, #4]
   12012:	6081      	str	r1, [r0, #8]
   12014:	60c2      	str	r2, [r0, #12]
   12016:	6103      	str	r3, [r0, #16]
   12018:	f8c0 c014 	str.w	ip, [r0, #20]
   1201c:	b006      	add	sp, #24
   1201e:	bd80      	pop	{r7, pc}

00012020 <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>:
   12020:	b580      	push	{r7, lr}
   12022:	b084      	sub	sp, #16
   12024:	9101      	str	r1, [sp, #4]
   12026:	9202      	str	r2, [sp, #8]
   12028:	9901      	ldr	r1, [sp, #4]
   1202a:	9a02      	ldr	r2, [sp, #8]
   1202c:	f000 fa95 	bl	1255a <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>
   12030:	e7ff      	b.n	12032 <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE+0x12>
   12032:	b004      	add	sp, #16
   12034:	bd80      	pop	{r7, pc}

00012036 <_ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE>:
   12036:	b081      	sub	sp, #4
   12038:	9000      	str	r0, [sp, #0]
   1203a:	b001      	add	sp, #4
   1203c:	4770      	bx	lr

0001203e <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>:
   1203e:	b081      	sub	sp, #4
   12040:	9000      	str	r0, [sp, #0]
   12042:	b001      	add	sp, #4
   12044:	4770      	bx	lr

00012046 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>:
   12046:	b580      	push	{r7, lr}
   12048:	b086      	sub	sp, #24
   1204a:	460a      	mov	r2, r1
   1204c:	9004      	str	r0, [sp, #16]
   1204e:	f88d 1017 	strb.w	r1, [sp, #23]
   12052:	9203      	str	r2, [sp, #12]
   12054:	f7ff fff3 	bl	1203e <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
   12058:	9002      	str	r0, [sp, #8]
   1205a:	e7ff      	b.n	1205c <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x16>
   1205c:	9802      	ldr	r0, [sp, #8]
   1205e:	9903      	ldr	r1, [sp, #12]
   12060:	f000 f806 	bl	12070 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
   12064:	9001      	str	r0, [sp, #4]
   12066:	e7ff      	b.n	12068 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x22>
   12068:	9801      	ldr	r0, [sp, #4]
   1206a:	b006      	add	sp, #24
   1206c:	bd80      	pop	{r7, pc}
	...

00012070 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>:
   12070:	b086      	sub	sp, #24
   12072:	460a      	mov	r2, r1
   12074:	f88d 100f 	strb.w	r1, [sp, #15]
   12078:	9005      	str	r0, [sp, #20]
   1207a:	f89d 100f 	ldrb.w	r1, [sp, #15]
   1207e:	9002      	str	r0, [sp, #8]
   12080:	9101      	str	r1, [sp, #4]
   12082:	9901      	ldr	r1, [sp, #4]
   12084:	e8df f001 	tbb	[pc, r1]
   12088:	03102317 	.word	0x03102317
   1208c:	001c      	.short	0x001c
   1208e:	f640 007c 	movw	r0, #2172	; 0x87c
   12092:	f2c0 0002 	movt	r0, #2
   12096:	f640 02f8 	movw	r2, #2296	; 0x8f8
   1209a:	f2c0 0202 	movt	r2, #2
   1209e:	2131      	movs	r1, #49	; 0x31
   120a0:	f005 fc88 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   120a4:	defe      	udf	#254	; 0xfe
   120a6:	defe      	udf	#254	; 0xfe
   120a8:	9802      	ldr	r0, [sp, #8]
   120aa:	6801      	ldr	r1, [r0, #0]
   120ac:	f3bf 8f5f 	dmb	sy
   120b0:	9104      	str	r1, [sp, #16]
   120b2:	e7ff      	b.n	120b4 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x44>
   120b4:	e017      	b.n	120e6 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   120b6:	9802      	ldr	r0, [sp, #8]
   120b8:	6801      	ldr	r1, [r0, #0]
   120ba:	9104      	str	r1, [sp, #16]
   120bc:	e7ff      	b.n	120be <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x4e>
   120be:	e012      	b.n	120e6 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   120c0:	9802      	ldr	r0, [sp, #8]
   120c2:	6801      	ldr	r1, [r0, #0]
   120c4:	f3bf 8f5f 	dmb	sy
   120c8:	9104      	str	r1, [sp, #16]
   120ca:	e7ff      	b.n	120cc <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x5c>
   120cc:	e00b      	b.n	120e6 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   120ce:	f640 1008 	movw	r0, #2312	; 0x908
   120d2:	f2c0 0002 	movt	r0, #2
   120d6:	f640 02f8 	movw	r2, #2296	; 0x8f8
   120da:	f2c0 0202 	movt	r2, #2
   120de:	2128      	movs	r1, #40	; 0x28
   120e0:	f005 fc68 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   120e4:	defe      	udf	#254	; 0xfe
   120e6:	9804      	ldr	r0, [sp, #16]
   120e8:	b006      	add	sp, #24
   120ea:	4770      	bx	lr

000120ec <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>:
   120ec:	b081      	sub	sp, #4
   120ee:	9000      	str	r0, [sp, #0]
   120f0:	6800      	ldr	r0, [r0, #0]
   120f2:	b001      	add	sp, #4
   120f4:	4770      	bx	lr

000120f6 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>:
   120f6:	b082      	sub	sp, #8
   120f8:	9001      	str	r0, [sp, #4]
   120fa:	6801      	ldr	r1, [r0, #0]
   120fc:	6840      	ldr	r0, [r0, #4]
   120fe:	9000      	str	r0, [sp, #0]
   12100:	4608      	mov	r0, r1
   12102:	9900      	ldr	r1, [sp, #0]
   12104:	b002      	add	sp, #8
   12106:	4770      	bx	lr

00012108 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>:
   12108:	b580      	push	{r7, lr}
   1210a:	b08c      	sub	sp, #48	; 0x30
   1210c:	9101      	str	r1, [sp, #4]
   1210e:	9202      	str	r2, [sp, #8]
   12110:	2100      	movs	r1, #0
   12112:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   12116:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   1211a:	2101      	movs	r1, #1
   1211c:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   12120:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   12124:	9901      	ldr	r1, [sp, #4]
   12126:	2900      	cmp	r1, #0
   12128:	460a      	mov	r2, r1
   1212a:	bf18      	it	ne
   1212c:	2201      	movne	r2, #1
   1212e:	2900      	cmp	r1, #0
   12130:	9000      	str	r0, [sp, #0]
   12132:	d001      	beq.n	12138 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x30>
   12134:	e7ff      	b.n	12136 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x2e>
   12136:	e008      	b.n	1214a <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x42>
   12138:	2000      	movs	r0, #0
   1213a:	9900      	ldr	r1, [sp, #0]
   1213c:	6088      	str	r0, [r1, #8]
   1213e:	6048      	str	r0, [r1, #4]
   12140:	6008      	str	r0, [r1, #0]
   12142:	2002      	movs	r0, #2
   12144:	6008      	str	r0, [r1, #0]
   12146:	e021      	b.n	1218c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
   12148:	defe      	udf	#254	; 0xfe
   1214a:	2000      	movs	r0, #0
   1214c:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   12150:	9901      	ldr	r1, [sp, #4]
   12152:	9a02      	ldr	r2, [sp, #8]
   12154:	910a      	str	r1, [sp, #40]	; 0x28
   12156:	920b      	str	r2, [sp, #44]	; 0x2c
   12158:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   1215c:	9106      	str	r1, [sp, #24]
   1215e:	9207      	str	r2, [sp, #28]
   12160:	9906      	ldr	r1, [sp, #24]
   12162:	9a07      	ldr	r2, [sp, #28]
   12164:	a803      	add	r0, sp, #12
   12166:	f7ff ff5b 	bl	12020 <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>
   1216a:	e7ff      	b.n	1216c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x64>
   1216c:	9803      	ldr	r0, [sp, #12]
   1216e:	9904      	ldr	r1, [sp, #16]
   12170:	9a05      	ldr	r2, [sp, #20]
   12172:	9b00      	ldr	r3, [sp, #0]
   12174:	609a      	str	r2, [r3, #8]
   12176:	6059      	str	r1, [r3, #4]
   12178:	6018      	str	r0, [r3, #0]
   1217a:	e007      	b.n	1218c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
   1217c:	9801      	ldr	r0, [sp, #4]
   1217e:	2800      	cmp	r0, #0
   12180:	d10c      	bne.n	1219c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x94>
   12182:	e015      	b.n	121b0 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa8>
   12184:	2000      	movs	r0, #0
   12186:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   1218a:	e7f7      	b.n	1217c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
   1218c:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   12190:	07c0      	lsls	r0, r0, #31
   12192:	2800      	cmp	r0, #0
   12194:	d1f6      	bne.n	12184 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x7c>
   12196:	e7f1      	b.n	1217c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
   12198:	b00c      	add	sp, #48	; 0x30
   1219a:	bd80      	pop	{r7, pc}
   1219c:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   121a0:	07c0      	lsls	r0, r0, #31
   121a2:	2800      	cmp	r0, #0
   121a4:	d0f8      	beq.n	12198 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
   121a6:	e7ff      	b.n	121a8 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa0>
   121a8:	2000      	movs	r0, #0
   121aa:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   121ae:	e7f3      	b.n	12198 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
   121b0:	e7f2      	b.n	12198 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>

000121b2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>:
   121b2:	b081      	sub	sp, #4
   121b4:	b001      	add	sp, #4
   121b6:	4770      	bx	lr

000121b8 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>:
   121b8:	b5b0      	push	{r4, r5, r7, lr}
   121ba:	b081      	sub	sp, #4
   121bc:	9100      	str	r1, [sp, #0]
   121be:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   121c2:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
   121c6:	b001      	add	sp, #4
   121c8:	bdb0      	pop	{r4, r5, r7, pc}

000121ca <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>:
   121ca:	b580      	push	{r7, lr}
   121cc:	b088      	sub	sp, #32
   121ce:	9106      	str	r1, [sp, #24]
   121d0:	680a      	ldr	r2, [r1, #0]
   121d2:	1e93      	subs	r3, r2, #2
   121d4:	bf18      	it	ne
   121d6:	2301      	movne	r3, #1
   121d8:	2a02      	cmp	r2, #2
   121da:	9102      	str	r1, [sp, #8]
   121dc:	9001      	str	r0, [sp, #4]
   121de:	d001      	beq.n	121e4 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x1a>
   121e0:	e7ff      	b.n	121e2 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x18>
   121e2:	e008      	b.n	121f6 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x2c>
   121e4:	2000      	movs	r0, #0
   121e6:	9901      	ldr	r1, [sp, #4]
   121e8:	6088      	str	r0, [r1, #8]
   121ea:	6048      	str	r0, [r1, #4]
   121ec:	6008      	str	r0, [r1, #0]
   121ee:	2002      	movs	r0, #2
   121f0:	6008      	str	r0, [r1, #0]
   121f2:	e00f      	b.n	12214 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
   121f4:	defe      	udf	#254	; 0xfe
   121f6:	9802      	ldr	r0, [sp, #8]
   121f8:	9007      	str	r0, [sp, #28]
   121fa:	a803      	add	r0, sp, #12
   121fc:	9902      	ldr	r1, [sp, #8]
   121fe:	f000 f9b5 	bl	1256c <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>
   12202:	e7ff      	b.n	12204 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x3a>
   12204:	9803      	ldr	r0, [sp, #12]
   12206:	9904      	ldr	r1, [sp, #16]
   12208:	9a05      	ldr	r2, [sp, #20]
   1220a:	9b01      	ldr	r3, [sp, #4]
   1220c:	609a      	str	r2, [r3, #8]
   1220e:	6059      	str	r1, [r3, #4]
   12210:	6018      	str	r0, [r3, #0]
   12212:	e7ff      	b.n	12214 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
   12214:	b008      	add	sp, #32
   12216:	bd80      	pop	{r7, pc}

00012218 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>:
   12218:	b580      	push	{r7, lr}
   1221a:	b086      	sub	sp, #24
   1221c:	9004      	str	r0, [sp, #16]
   1221e:	6801      	ldr	r1, [r0, #0]
   12220:	2900      	cmp	r1, #0
   12222:	9001      	str	r0, [sp, #4]
   12224:	d001      	beq.n	1222a <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x12>
   12226:	e7ff      	b.n	12228 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x10>
   12228:	e003      	b.n	12232 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x1a>
   1222a:	2000      	movs	r0, #0
   1222c:	9002      	str	r0, [sp, #8]
   1222e:	e00d      	b.n	1224c <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
   12230:	defe      	udf	#254	; 0xfe
   12232:	9801      	ldr	r0, [sp, #4]
   12234:	1d01      	adds	r1, r0, #4
   12236:	9105      	str	r1, [sp, #20]
   12238:	4608      	mov	r0, r1
   1223a:	f7ff ff57 	bl	120ec <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>
   1223e:	9000      	str	r0, [sp, #0]
   12240:	e7ff      	b.n	12242 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x2a>
   12242:	9800      	ldr	r0, [sp, #0]
   12244:	9003      	str	r0, [sp, #12]
   12246:	2101      	movs	r1, #1
   12248:	9102      	str	r1, [sp, #8]
   1224a:	e7ff      	b.n	1224c <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
   1224c:	9802      	ldr	r0, [sp, #8]
   1224e:	9903      	ldr	r1, [sp, #12]
   12250:	b006      	add	sp, #24
   12252:	bd80      	pop	{r7, pc}

00012254 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>:
    fn clone(&self) -> Level {
   12254:	b081      	sub	sp, #4
   12256:	9000      	str	r0, [sp, #0]
        *self
   12258:	6800      	ldr	r0, [r0, #0]
    }
   1225a:	b001      	add	sp, #4
   1225c:	4770      	bx	lr

0001225e <_ZN3log6Record7builder17hde62ab0132265febE>:
    pub fn builder() -> RecordBuilder<'a> {
   1225e:	b580      	push	{r7, lr}
        RecordBuilder::new()
   12260:	f000 f802 	bl	12268 <_ZN3log13RecordBuilder3new17haca8312579858419E>
   12264:	e7ff      	b.n	12266 <_ZN3log6Record7builder17hde62ab0132265febE+0x8>
    }
   12266:	bd80      	pop	{r7, pc}

00012268 <_ZN3log13RecordBuilder3new17haca8312579858419E>:
    pub fn new() -> RecordBuilder<'a> {
   12268:	b570      	push	{r4, r5, r6, lr}
   1226a:	b0aa      	sub	sp, #168	; 0xa8
                args: format_args!(""),
   1226c:	f640 1148 	movw	r1, #2376	; 0x948
   12270:	f2c0 0102 	movt	r1, #2
   12274:	6809      	ldr	r1, [r1, #0]
   12276:	466a      	mov	r2, sp
   12278:	2300      	movs	r3, #0
   1227a:	6013      	str	r3, [r2, #0]
   1227c:	aa16      	add	r2, sp, #88	; 0x58
   1227e:	9004      	str	r0, [sp, #16]
   12280:	4610      	mov	r0, r2
   12282:	9103      	str	r1, [sp, #12]
   12284:	461a      	mov	r2, r3
   12286:	9b03      	ldr	r3, [sp, #12]
   12288:	f7ff feae 	bl	11fe8 <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>
   1228c:	e7ff      	b.n	1228e <_ZN3log13RecordBuilder3new17haca8312579858419E+0x26>
   1228e:	a81f      	add	r0, sp, #124	; 0x7c
                metadata: Metadata::builder().build(),
   12290:	f000 f891 	bl	123b6 <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>
   12294:	e7ff      	b.n	12296 <_ZN3log13RecordBuilder3new17haca8312579858419E+0x2e>
   12296:	a81c      	add	r0, sp, #112	; 0x70
   12298:	a91f      	add	r1, sp, #124	; 0x7c
   1229a:	f000 f8a5 	bl	123e8 <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>
   1229e:	e7ff      	b.n	122a0 <_ZN3log13RecordBuilder3new17haca8312579858419E+0x38>
   122a0:	2000      	movs	r0, #0
                module_path: None,
   122a2:	9024      	str	r0, [sp, #144]	; 0x90
   122a4:	9023      	str	r0, [sp, #140]	; 0x8c
   122a6:	9022      	str	r0, [sp, #136]	; 0x88
   122a8:	2102      	movs	r1, #2
   122aa:	9122      	str	r1, [sp, #136]	; 0x88
                file: None,
   122ac:	9027      	str	r0, [sp, #156]	; 0x9c
   122ae:	9026      	str	r0, [sp, #152]	; 0x98
   122b0:	9025      	str	r0, [sp, #148]	; 0x94
   122b2:	9125      	str	r1, [sp, #148]	; 0x94
                line: None,
   122b4:	9028      	str	r0, [sp, #160]	; 0xa0
            record: Record {
   122b6:	981c      	ldr	r0, [sp, #112]	; 0x70
   122b8:	991d      	ldr	r1, [sp, #116]	; 0x74
   122ba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   122bc:	9207      	str	r2, [sp, #28]
   122be:	9106      	str	r1, [sp, #24]
   122c0:	9005      	str	r0, [sp, #20]
   122c2:	a805      	add	r0, sp, #20
   122c4:	f100 010c 	add.w	r1, r0, #12
   122c8:	aa16      	add	r2, sp, #88	; 0x58
   122ca:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   122ce:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
   122d2:	9922      	ldr	r1, [sp, #136]	; 0x88
   122d4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   122d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   122d8:	9310      	str	r3, [sp, #64]	; 0x40
   122da:	920f      	str	r2, [sp, #60]	; 0x3c
   122dc:	910e      	str	r1, [sp, #56]	; 0x38
   122de:	9925      	ldr	r1, [sp, #148]	; 0x94
   122e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   122e2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   122e4:	9313      	str	r3, [sp, #76]	; 0x4c
   122e6:	9212      	str	r2, [sp, #72]	; 0x48
   122e8:	9111      	str	r1, [sp, #68]	; 0x44
   122ea:	9928      	ldr	r1, [sp, #160]	; 0xa0
   122ec:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   122ee:	9114      	str	r1, [sp, #80]	; 0x50
   122f0:	9215      	str	r2, [sp, #84]	; 0x54
   122f2:	2244      	movs	r2, #68	; 0x44
        return RecordBuilder {
   122f4:	9904      	ldr	r1, [sp, #16]
   122f6:	9002      	str	r0, [sp, #8]
   122f8:	4608      	mov	r0, r1
   122fa:	9902      	ldr	r1, [sp, #8]
   122fc:	f00b ff2e 	bl	1e15c <__aeabi_memcpy>
    }
   12300:	b02a      	add	sp, #168	; 0xa8
   12302:	bd70      	pop	{r4, r5, r6, pc}

00012304 <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>:
    pub fn args(&mut self, args: fmt::Arguments<'a>) -> &mut RecordBuilder<'a> {
   12304:	b5f0      	push	{r4, r5, r6, r7, lr}
   12306:	b087      	sub	sp, #28
   12308:	9006      	str	r0, [sp, #24]
   1230a:	466a      	mov	r2, sp
        self.record.args = args;
   1230c:	4613      	mov	r3, r2
   1230e:	e891 50f0 	ldmia.w	r1, {r4, r5, r6, r7, ip, lr}
   12312:	e883 50f0 	stmia.w	r3, {r4, r5, r6, r7, ip, lr}
   12316:	f100 010c 	add.w	r1, r0, #12
   1231a:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   1231e:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
    }
   12322:	b007      	add	sp, #28
   12324:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012326 <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>:
    pub fn level(&mut self, level: Level) -> &mut RecordBuilder<'a> {
   12326:	b082      	sub	sp, #8
   12328:	9000      	str	r0, [sp, #0]
   1232a:	9101      	str	r1, [sp, #4]
        self.record.metadata.level = level;
   1232c:	6001      	str	r1, [r0, #0]
    }
   1232e:	b002      	add	sp, #8
   12330:	4770      	bx	lr

00012332 <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>:
    pub fn target(&mut self, target: &'a str) -> &mut RecordBuilder<'a> {
   12332:	b083      	sub	sp, #12
   12334:	9000      	str	r0, [sp, #0]
   12336:	9101      	str	r1, [sp, #4]
   12338:	9202      	str	r2, [sp, #8]
        self.record.metadata.target = target;
   1233a:	6041      	str	r1, [r0, #4]
   1233c:	6082      	str	r2, [r0, #8]
    }
   1233e:	b003      	add	sp, #12
   12340:	4770      	bx	lr

00012342 <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>:
    pub fn module_path_static(&mut self, path: Option<&'static str>) -> &mut RecordBuilder<'a> {
   12342:	b580      	push	{r7, lr}
   12344:	b088      	sub	sp, #32
   12346:	9005      	str	r0, [sp, #20]
   12348:	9106      	str	r1, [sp, #24]
   1234a:	9207      	str	r2, [sp, #28]
   1234c:	ab02      	add	r3, sp, #8
        self.record.module_path = path.map(MaybeStaticStr::Static);
   1234e:	9001      	str	r0, [sp, #4]
   12350:	4618      	mov	r0, r3
   12352:	f7ff fed9 	bl	12108 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
   12356:	e7ff      	b.n	12358 <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE+0x16>
   12358:	9802      	ldr	r0, [sp, #8]
   1235a:	9903      	ldr	r1, [sp, #12]
   1235c:	9a04      	ldr	r2, [sp, #16]
   1235e:	9b01      	ldr	r3, [sp, #4]
   12360:	62da      	str	r2, [r3, #44]	; 0x2c
   12362:	6299      	str	r1, [r3, #40]	; 0x28
   12364:	6258      	str	r0, [r3, #36]	; 0x24
    }
   12366:	4618      	mov	r0, r3
   12368:	b008      	add	sp, #32
   1236a:	bd80      	pop	{r7, pc}

0001236c <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>:
    pub fn file_static(&mut self, file: Option<&'static str>) -> &mut RecordBuilder<'a> {
   1236c:	b580      	push	{r7, lr}
   1236e:	b088      	sub	sp, #32
   12370:	9005      	str	r0, [sp, #20]
   12372:	9106      	str	r1, [sp, #24]
   12374:	9207      	str	r2, [sp, #28]
   12376:	ab02      	add	r3, sp, #8
        self.record.file = file.map(MaybeStaticStr::Static);
   12378:	9001      	str	r0, [sp, #4]
   1237a:	4618      	mov	r0, r3
   1237c:	f7ff fec4 	bl	12108 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
   12380:	e7ff      	b.n	12382 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E+0x16>
   12382:	9802      	ldr	r0, [sp, #8]
   12384:	9903      	ldr	r1, [sp, #12]
   12386:	9a04      	ldr	r2, [sp, #16]
   12388:	9b01      	ldr	r3, [sp, #4]
   1238a:	639a      	str	r2, [r3, #56]	; 0x38
   1238c:	6359      	str	r1, [r3, #52]	; 0x34
   1238e:	6318      	str	r0, [r3, #48]	; 0x30
    }
   12390:	4618      	mov	r0, r3
   12392:	b008      	add	sp, #32
   12394:	bd80      	pop	{r7, pc}

00012396 <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>:
    pub fn line(&mut self, line: Option<u32>) -> &mut RecordBuilder<'a> {
   12396:	b083      	sub	sp, #12
   12398:	9000      	str	r0, [sp, #0]
   1239a:	9101      	str	r1, [sp, #4]
   1239c:	9202      	str	r2, [sp, #8]
        self.record.line = line;
   1239e:	63c1      	str	r1, [r0, #60]	; 0x3c
   123a0:	6402      	str	r2, [r0, #64]	; 0x40
    }
   123a2:	b003      	add	sp, #12
   123a4:	4770      	bx	lr

000123a6 <_ZN3log13RecordBuilder5build17h83529556a009112eE>:
    pub fn build(&self) -> Record<'a> {
   123a6:	b580      	push	{r7, lr}
   123a8:	b082      	sub	sp, #8
   123aa:	9101      	str	r1, [sp, #4]
        self.record.clone()
   123ac:	f000 f8e8 	bl	12580 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>
   123b0:	e7ff      	b.n	123b2 <_ZN3log13RecordBuilder5build17h83529556a009112eE+0xc>
    }
   123b2:	b002      	add	sp, #8
   123b4:	bd80      	pop	{r7, pc}

000123b6 <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>:
    pub fn builder() -> MetadataBuilder<'a> {
   123b6:	b580      	push	{r7, lr}
        MetadataBuilder::new()
   123b8:	f000 f802 	bl	123c0 <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>
   123bc:	e7ff      	b.n	123be <_ZN3log8Metadata7builder17ha56bd59835d60a3cE+0x8>
    }
   123be:	bd80      	pop	{r7, pc}

000123c0 <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>:
    pub fn new() -> MetadataBuilder<'a> {
   123c0:	b084      	sub	sp, #16
   123c2:	2103      	movs	r1, #3
                level: Level::Info,
   123c4:	9103      	str	r1, [sp, #12]
            metadata: Metadata {
   123c6:	9903      	ldr	r1, [sp, #12]
   123c8:	9100      	str	r1, [sp, #0]
   123ca:	f640 1130 	movw	r1, #2352	; 0x930
   123ce:	f2c0 0102 	movt	r1, #2
   123d2:	9101      	str	r1, [sp, #4]
   123d4:	2100      	movs	r1, #0
   123d6:	9102      	str	r1, [sp, #8]
        MetadataBuilder {
   123d8:	9900      	ldr	r1, [sp, #0]
   123da:	9a01      	ldr	r2, [sp, #4]
   123dc:	9b02      	ldr	r3, [sp, #8]
   123de:	6083      	str	r3, [r0, #8]
   123e0:	6042      	str	r2, [r0, #4]
   123e2:	6001      	str	r1, [r0, #0]
    }
   123e4:	b004      	add	sp, #16
   123e6:	4770      	bx	lr

000123e8 <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>:
    pub fn build(&self) -> Metadata<'a> {
   123e8:	b580      	push	{r7, lr}
   123ea:	b082      	sub	sp, #8
   123ec:	9101      	str	r1, [sp, #4]
        self.metadata.clone()
   123ee:	f000 f91c 	bl	1262a <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
   123f2:	e7ff      	b.n	123f4 <_ZN3log15MetadataBuilder5build17h2478972692162fc0E+0xc>
    }
   123f4:	b002      	add	sp, #8
   123f6:	bd80      	pop	{r7, pc}

000123f8 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE>:
    fn enabled(&self, _: &Metadata) -> bool {
   123f8:	b082      	sub	sp, #8
   123fa:	9000      	str	r0, [sp, #0]
   123fc:	9101      	str	r1, [sp, #4]
   123fe:	2000      	movs	r0, #0
    }
   12400:	b002      	add	sp, #8
   12402:	4770      	bx	lr

00012404 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE>:
    fn log(&self, _: &Record) {}
   12404:	b082      	sub	sp, #8
   12406:	9000      	str	r0, [sp, #0]
   12408:	9101      	str	r1, [sp, #4]
   1240a:	b002      	add	sp, #8
   1240c:	4770      	bx	lr

0001240e <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE>:
    fn flush(&self) {}
   1240e:	b081      	sub	sp, #4
   12410:	9000      	str	r0, [sp, #0]
   12412:	b001      	add	sp, #4
   12414:	4770      	bx	lr

00012416 <_ZN3log6logger17hf609e7cc1c031552E>:
}

/// Returns a reference to the logger.
///
/// If a logger has not been set, a no-op implementation is returned.
pub fn logger() -> &'static Log {
   12416:	b580      	push	{r7, lr}
   12418:	b084      	sub	sp, #16
   1241a:	2004      	movs	r0, #4
    unsafe {
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   1241c:	f88d 000f 	strb.w	r0, [sp, #15]
   12420:	f89d 100f 	ldrb.w	r1, [sp, #15]
   12424:	f644 2068 	movw	r0, #19048	; 0x4a68
   12428:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1242c:	f7ff fe0b 	bl	12046 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>
   12430:	9000      	str	r0, [sp, #0]
   12432:	e7ff      	b.n	12434 <_ZN3log6logger17hf609e7cc1c031552E+0x1e>
   12434:	9800      	ldr	r0, [sp, #0]
   12436:	2802      	cmp	r0, #2
   12438:	d109      	bne.n	1244e <_ZN3log6logger17hf609e7cc1c031552E+0x38>
   1243a:	e7ff      	b.n	1243c <_ZN3log6logger17hf609e7cc1c031552E+0x26>
            static NOP: NopLogger = NopLogger;
            &NOP
        } else {
            LOGGER
   1243c:	f240 00f0 	movw	r0, #240	; 0xf0
   12440:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12444:	6801      	ldr	r1, [r0, #0]
   12446:	6840      	ldr	r0, [r0, #4]
   12448:	9101      	str	r1, [sp, #4]
   1244a:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   1244c:	e00a      	b.n	12464 <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
            &NOP
   1244e:	f640 1064 	movw	r0, #2404	; 0x964
   12452:	f2c0 0002 	movt	r0, #2
   12456:	9001      	str	r0, [sp, #4]
   12458:	f640 104c 	movw	r0, #2380	; 0x94c
   1245c:	f2c0 0002 	movt	r0, #2
   12460:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   12462:	e7ff      	b.n	12464 <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
   12464:	9801      	ldr	r0, [sp, #4]
   12466:	9902      	ldr	r1, [sp, #8]
        }
    }
}
   12468:	b004      	add	sp, #16
   1246a:	bd80      	pop	{r7, pc}

0001246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>:

// WARNING: this is not part of the crate's public API and is subject to change at any time
#[doc(hidden)]
pub fn __private_api_log(
   1246c:	b570      	push	{r4, r5, r6, lr}
   1246e:	b0ca      	sub	sp, #296	; 0x128
   12470:	9141      	str	r1, [sp, #260]	; 0x104
   12472:	9242      	str	r2, [sp, #264]	; 0x108
    args: fmt::Arguments,
    level: Level,
    &(target, module_path, file, line): &(&str, &'static str, &'static str, u32),
   12474:	6813      	ldr	r3, [r2, #0]
   12476:	f8d2 c004 	ldr.w	ip, [r2, #4]
   1247a:	9343      	str	r3, [sp, #268]	; 0x10c
   1247c:	f8cd c110 	str.w	ip, [sp, #272]	; 0x110
   12480:	f8d2 e008 	ldr.w	lr, [r2, #8]
   12484:	68d4      	ldr	r4, [r2, #12]
   12486:	f8cd e114 	str.w	lr, [sp, #276]	; 0x114
   1248a:	9446      	str	r4, [sp, #280]	; 0x118
   1248c:	6915      	ldr	r5, [r2, #16]
   1248e:	6956      	ldr	r6, [r2, #20]
   12490:	9547      	str	r5, [sp, #284]	; 0x11c
   12492:	9648      	str	r6, [sp, #288]	; 0x120
   12494:	6992      	ldr	r2, [r2, #24]
   12496:	9249      	str	r2, [sp, #292]	; 0x124
) {
    logger().log(
   12498:	9112      	str	r1, [sp, #72]	; 0x48
   1249a:	9011      	str	r0, [sp, #68]	; 0x44
   1249c:	9310      	str	r3, [sp, #64]	; 0x40
   1249e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   124a2:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   124a6:	940d      	str	r4, [sp, #52]	; 0x34
   124a8:	950c      	str	r5, [sp, #48]	; 0x30
   124aa:	960b      	str	r6, [sp, #44]	; 0x2c
   124ac:	920a      	str	r2, [sp, #40]	; 0x28
   124ae:	f7ff ffb2 	bl	12416 <_ZN3log6logger17hf609e7cc1c031552E>
   124b2:	9009      	str	r0, [sp, #36]	; 0x24
   124b4:	9108      	str	r1, [sp, #32]
   124b6:	e7ff      	b.n	124b8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x4c>
   124b8:	a824      	add	r0, sp, #144	; 0x90
        &Record::builder()
   124ba:	f7ff fed0 	bl	1225e <_ZN3log6Record7builder17hde62ab0132265febE>
   124be:	e7ff      	b.n	124c0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x54>
   124c0:	a835      	add	r0, sp, #212	; 0xd4
            .args(args)
   124c2:	4601      	mov	r1, r0
   124c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   124c6:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   124ca:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
   124ce:	a924      	add	r1, sp, #144	; 0x90
        &Record::builder()
   124d0:	9007      	str	r0, [sp, #28]
   124d2:	4608      	mov	r0, r1
   124d4:	9907      	ldr	r1, [sp, #28]
   124d6:	f7ff ff15 	bl	12304 <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>
   124da:	9006      	str	r0, [sp, #24]
   124dc:	e7ff      	b.n	124de <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x72>
   124de:	9806      	ldr	r0, [sp, #24]
   124e0:	9912      	ldr	r1, [sp, #72]	; 0x48
   124e2:	f7ff ff20 	bl	12326 <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>
   124e6:	9005      	str	r0, [sp, #20]
   124e8:	e7ff      	b.n	124ea <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x7e>
   124ea:	9805      	ldr	r0, [sp, #20]
   124ec:	9910      	ldr	r1, [sp, #64]	; 0x40
   124ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   124f0:	f7ff ff1f 	bl	12332 <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>
   124f4:	9004      	str	r0, [sp, #16]
   124f6:	e7ff      	b.n	124f8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x8c>
            .level(level)
            .target(target)
            .module_path_static(Some(module_path))
   124f8:	980e      	ldr	r0, [sp, #56]	; 0x38
   124fa:	903b      	str	r0, [sp, #236]	; 0xec
   124fc:	990d      	ldr	r1, [sp, #52]	; 0x34
   124fe:	913c      	str	r1, [sp, #240]	; 0xf0
        &Record::builder()
   12500:	993b      	ldr	r1, [sp, #236]	; 0xec
   12502:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
   12504:	9804      	ldr	r0, [sp, #16]
   12506:	f7ff ff1c 	bl	12342 <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>
   1250a:	9003      	str	r0, [sp, #12]
   1250c:	e7ff      	b.n	1250e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xa2>
            .file_static(Some(file))
   1250e:	980c      	ldr	r0, [sp, #48]	; 0x30
   12510:	903d      	str	r0, [sp, #244]	; 0xf4
   12512:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12514:	913e      	str	r1, [sp, #248]	; 0xf8
        &Record::builder()
   12516:	993d      	ldr	r1, [sp, #244]	; 0xf4
   12518:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
   1251a:	9803      	ldr	r0, [sp, #12]
   1251c:	f7ff ff26 	bl	1236c <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>
   12520:	9002      	str	r0, [sp, #8]
   12522:	e7ff      	b.n	12524 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xb8>
            .line(Some(line))
   12524:	980a      	ldr	r0, [sp, #40]	; 0x28
   12526:	9040      	str	r0, [sp, #256]	; 0x100
   12528:	2101      	movs	r1, #1
   1252a:	913f      	str	r1, [sp, #252]	; 0xfc
        &Record::builder()
   1252c:	993f      	ldr	r1, [sp, #252]	; 0xfc
   1252e:	9a40      	ldr	r2, [sp, #256]	; 0x100
   12530:	9802      	ldr	r0, [sp, #8]
   12532:	f7ff ff30 	bl	12396 <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>
   12536:	9001      	str	r0, [sp, #4]
   12538:	e7ff      	b.n	1253a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xce>
   1253a:	a813      	add	r0, sp, #76	; 0x4c
   1253c:	9901      	ldr	r1, [sp, #4]
   1253e:	f7ff ff32 	bl	123a6 <_ZN3log13RecordBuilder5build17h83529556a009112eE>
   12542:	e7ff      	b.n	12544 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xd8>
    logger().log(
   12544:	9808      	ldr	r0, [sp, #32]
   12546:	6901      	ldr	r1, [r0, #16]
   12548:	aa13      	add	r2, sp, #76	; 0x4c
   1254a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1254c:	9100      	str	r1, [sp, #0]
   1254e:	4611      	mov	r1, r2
   12550:	9a00      	ldr	r2, [sp, #0]
   12552:	4790      	blx	r2
   12554:	e7ff      	b.n	12556 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xea>
            .build(),
    );
}
   12556:	b04a      	add	sp, #296	; 0x128
   12558:	bd70      	pop	{r4, r5, r6, pc}

0001255a <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>:
    Static(&'static str),
   1255a:	b082      	sub	sp, #8
   1255c:	9100      	str	r1, [sp, #0]
   1255e:	9201      	str	r2, [sp, #4]
   12560:	6041      	str	r1, [r0, #4]
   12562:	6082      	str	r2, [r0, #8]
   12564:	2100      	movs	r1, #0
   12566:	6001      	str	r1, [r0, #0]
   12568:	b002      	add	sp, #8
   1256a:	4770      	bx	lr

0001256c <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>:
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   1256c:	b081      	sub	sp, #4
   1256e:	9100      	str	r1, [sp, #0]
   12570:	680a      	ldr	r2, [r1, #0]
   12572:	684b      	ldr	r3, [r1, #4]
   12574:	6889      	ldr	r1, [r1, #8]
   12576:	6081      	str	r1, [r0, #8]
   12578:	6043      	str	r3, [r0, #4]
   1257a:	6002      	str	r2, [r0, #0]
   1257c:	b001      	add	sp, #4
   1257e:	4770      	bx	lr

00012580 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>:
#[derive(Clone, Debug)]
   12580:	b570      	push	{r4, r5, r6, lr}
   12582:	b09c      	sub	sp, #112	; 0x70
   12584:	9116      	str	r1, [sp, #88]	; 0x58
    metadata: Metadata<'a>,
   12586:	9117      	str	r1, [sp, #92]	; 0x5c
    args: fmt::Arguments<'a>,
   12588:	f101 020c 	add.w	r2, r1, #12
   1258c:	4613      	mov	r3, r2
   1258e:	9218      	str	r2, [sp, #96]	; 0x60
    module_path: Option<MaybeStaticStr<'a>>,
   12590:	f101 0224 	add.w	r2, r1, #36	; 0x24
   12594:	4694      	mov	ip, r2
   12596:	9219      	str	r2, [sp, #100]	; 0x64
    file: Option<MaybeStaticStr<'a>>,
   12598:	f101 0230 	add.w	r2, r1, #48	; 0x30
   1259c:	4696      	mov	lr, r2
   1259e:	921a      	str	r2, [sp, #104]	; 0x68
    line: Option<u32>,
   125a0:	f101 023c 	add.w	r2, r1, #60	; 0x3c
   125a4:	4614      	mov	r4, r2
   125a6:	921b      	str	r2, [sp, #108]	; 0x6c
   125a8:	aa07      	add	r2, sp, #28
    metadata: Metadata<'a>,
   125aa:	9006      	str	r0, [sp, #24]
   125ac:	4610      	mov	r0, r2
   125ae:	9305      	str	r3, [sp, #20]
   125b0:	f8cd c010 	str.w	ip, [sp, #16]
   125b4:	f8cd e00c 	str.w	lr, [sp, #12]
   125b8:	9402      	str	r4, [sp, #8]
   125ba:	f000 f836 	bl	1262a <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
   125be:	e7ff      	b.n	125c0 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x40>
   125c0:	a80a      	add	r0, sp, #40	; 0x28
    args: fmt::Arguments<'a>,
   125c2:	9905      	ldr	r1, [sp, #20]
   125c4:	f7ff fdf8 	bl	121b8 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>
   125c8:	e7ff      	b.n	125ca <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x4a>
   125ca:	a810      	add	r0, sp, #64	; 0x40
    module_path: Option<MaybeStaticStr<'a>>,
   125cc:	9904      	ldr	r1, [sp, #16]
   125ce:	f7ff fdfc 	bl	121ca <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
   125d2:	e7ff      	b.n	125d4 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x54>
   125d4:	a813      	add	r0, sp, #76	; 0x4c
    file: Option<MaybeStaticStr<'a>>,
   125d6:	9903      	ldr	r1, [sp, #12]
   125d8:	f7ff fdf7 	bl	121ca <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
   125dc:	e7ff      	b.n	125de <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x5e>
    line: Option<u32>,
   125de:	9802      	ldr	r0, [sp, #8]
   125e0:	f7ff fe1a 	bl	12218 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>
   125e4:	9001      	str	r0, [sp, #4]
   125e6:	9100      	str	r1, [sp, #0]
   125e8:	e7ff      	b.n	125ea <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x6a>
#[derive(Clone, Debug)]
   125ea:	9807      	ldr	r0, [sp, #28]
   125ec:	9908      	ldr	r1, [sp, #32]
   125ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
   125f0:	9b06      	ldr	r3, [sp, #24]
   125f2:	609a      	str	r2, [r3, #8]
   125f4:	6059      	str	r1, [r3, #4]
   125f6:	6018      	str	r0, [r3, #0]
   125f8:	f103 000c 	add.w	r0, r3, #12
   125fc:	a90a      	add	r1, sp, #40	; 0x28
   125fe:	e891 5074 	ldmia.w	r1, {r2, r4, r5, r6, ip, lr}
   12602:	e880 5074 	stmia.w	r0, {r2, r4, r5, r6, ip, lr}
   12606:	9810      	ldr	r0, [sp, #64]	; 0x40
   12608:	9911      	ldr	r1, [sp, #68]	; 0x44
   1260a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1260c:	62da      	str	r2, [r3, #44]	; 0x2c
   1260e:	6299      	str	r1, [r3, #40]	; 0x28
   12610:	6258      	str	r0, [r3, #36]	; 0x24
   12612:	9813      	ldr	r0, [sp, #76]	; 0x4c
   12614:	9914      	ldr	r1, [sp, #80]	; 0x50
   12616:	9a15      	ldr	r2, [sp, #84]	; 0x54
   12618:	639a      	str	r2, [r3, #56]	; 0x38
   1261a:	6359      	str	r1, [r3, #52]	; 0x34
   1261c:	6318      	str	r0, [r3, #48]	; 0x30
   1261e:	9801      	ldr	r0, [sp, #4]
   12620:	63d8      	str	r0, [r3, #60]	; 0x3c
   12622:	9900      	ldr	r1, [sp, #0]
   12624:	6419      	str	r1, [r3, #64]	; 0x40
   12626:	b01c      	add	sp, #112	; 0x70
   12628:	bd70      	pop	{r4, r5, r6, pc}

0001262a <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>:
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   1262a:	b580      	push	{r7, lr}
   1262c:	b088      	sub	sp, #32
   1262e:	9105      	str	r1, [sp, #20]
    level: Level,
   12630:	9106      	str	r1, [sp, #24]
    target: &'a str,
   12632:	1d0a      	adds	r2, r1, #4
   12634:	4613      	mov	r3, r2
   12636:	9207      	str	r2, [sp, #28]
    level: Level,
   12638:	9004      	str	r0, [sp, #16]
   1263a:	4608      	mov	r0, r1
   1263c:	9303      	str	r3, [sp, #12]
   1263e:	f7ff fe09 	bl	12254 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>
   12642:	9002      	str	r0, [sp, #8]
   12644:	e7ff      	b.n	12646 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x1c>
    target: &'a str,
   12646:	9803      	ldr	r0, [sp, #12]
   12648:	f7ff fd55 	bl	120f6 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>
   1264c:	9001      	str	r0, [sp, #4]
   1264e:	9100      	str	r1, [sp, #0]
   12650:	e7ff      	b.n	12652 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x28>
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   12652:	9802      	ldr	r0, [sp, #8]
   12654:	9904      	ldr	r1, [sp, #16]
   12656:	6008      	str	r0, [r1, #0]
   12658:	9a01      	ldr	r2, [sp, #4]
   1265a:	604a      	str	r2, [r1, #4]
   1265c:	9b00      	ldr	r3, [sp, #0]
   1265e:	608b      	str	r3, [r1, #8]
   12660:	b008      	add	sp, #32
   12662:	bd80      	pop	{r7, pc}

00012664 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E>:
   12664:	b580      	push	{r7, lr}
   12666:	b084      	sub	sp, #16
   12668:	9002      	str	r0, [sp, #8]
   1266a:	9103      	str	r1, [sp, #12]
   1266c:	6800      	ldr	r0, [r0, #0]
   1266e:	f000 f81c 	bl	126aa <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>
   12672:	9001      	str	r0, [sp, #4]
   12674:	e7ff      	b.n	12676 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E+0x12>
   12676:	9801      	ldr	r0, [sp, #4]
   12678:	f000 0001 	and.w	r0, r0, #1
   1267c:	b004      	add	sp, #16
   1267e:	bd80      	pop	{r7, pc}

00012680 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>:
   12680:	b089      	sub	sp, #36	; 0x24
   12682:	9005      	str	r0, [sp, #20]
   12684:	9106      	str	r1, [sp, #24]
   12686:	9107      	str	r1, [sp, #28]
   12688:	9907      	ldr	r1, [sp, #28]
   1268a:	9002      	str	r0, [sp, #8]
   1268c:	9101      	str	r1, [sp, #4]
   1268e:	e7ff      	b.n	12690 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x10>
   12690:	9802      	ldr	r0, [sp, #8]
   12692:	9008      	str	r0, [sp, #32]
   12694:	9908      	ldr	r1, [sp, #32]
   12696:	9100      	str	r1, [sp, #0]
   12698:	e7ff      	b.n	1269a <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x1a>
   1269a:	9800      	ldr	r0, [sp, #0]
   1269c:	9003      	str	r0, [sp, #12]
   1269e:	9901      	ldr	r1, [sp, #4]
   126a0:	9104      	str	r1, [sp, #16]
   126a2:	9803      	ldr	r0, [sp, #12]
   126a4:	9904      	ldr	r1, [sp, #16]
   126a6:	b009      	add	sp, #36	; 0x24
   126a8:	4770      	bx	lr

000126aa <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>:
   126aa:	b580      	push	{r7, lr}
   126ac:	b088      	sub	sp, #32
   126ae:	9006      	str	r0, [sp, #24]
   126b0:	9107      	str	r1, [sp, #28]
   126b2:	9004      	str	r0, [sp, #16]
   126b4:	4608      	mov	r0, r1
   126b6:	9103      	str	r1, [sp, #12]
   126b8:	f006 f81d 	bl	186f6 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   126bc:	9002      	str	r0, [sp, #8]
   126be:	e7ff      	b.n	126c0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x16>
   126c0:	9802      	ldr	r0, [sp, #8]
   126c2:	07c1      	lsls	r1, r0, #31
   126c4:	2900      	cmp	r1, #0
   126c6:	d105      	bne.n	126d4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x2a>
   126c8:	e7ff      	b.n	126ca <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x20>
   126ca:	9803      	ldr	r0, [sp, #12]
   126cc:	f006 f817 	bl	186fe <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   126d0:	9001      	str	r0, [sp, #4]
   126d2:	e007      	b.n	126e4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x3a>
   126d4:	9804      	ldr	r0, [sp, #16]
   126d6:	9903      	ldr	r1, [sp, #12]
   126d8:	f006 fe37 	bl	1934a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   126dc:	f88d 0017 	strb.w	r0, [sp, #23]
   126e0:	e7ff      	b.n	126e2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x38>
   126e2:	e015      	b.n	12710 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   126e4:	9801      	ldr	r0, [sp, #4]
   126e6:	07c1      	lsls	r1, r0, #31
   126e8:	2900      	cmp	r1, #0
   126ea:	d107      	bne.n	126fc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x52>
   126ec:	e7ff      	b.n	126ee <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x44>
   126ee:	9804      	ldr	r0, [sp, #16]
   126f0:	9903      	ldr	r1, [sp, #12]
   126f2:	f007 f81f 	bl	19734 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   126f6:	f88d 0017 	strb.w	r0, [sp, #23]
   126fa:	e007      	b.n	1270c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x62>
   126fc:	9804      	ldr	r0, [sp, #16]
   126fe:	9903      	ldr	r1, [sp, #12]
   12700:	f006 fe8e 	bl	19420 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   12704:	f88d 0017 	strb.w	r0, [sp, #23]
   12708:	e7ff      	b.n	1270a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x60>
   1270a:	e000      	b.n	1270e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   1270c:	e7ff      	b.n	1270e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   1270e:	e7ff      	b.n	12710 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   12710:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12714:	b008      	add	sp, #32
   12716:	bd80      	pop	{r7, pc}

00012718 <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>:
   12718:	b086      	sub	sp, #24
   1271a:	9004      	str	r0, [sp, #16]
   1271c:	9105      	str	r1, [sp, #20]
   1271e:	9002      	str	r0, [sp, #8]
   12720:	9103      	str	r1, [sp, #12]
   12722:	9802      	ldr	r0, [sp, #8]
   12724:	9903      	ldr	r1, [sp, #12]
   12726:	9000      	str	r0, [sp, #0]
   12728:	9101      	str	r1, [sp, #4]
   1272a:	9800      	ldr	r0, [sp, #0]
   1272c:	9901      	ldr	r1, [sp, #4]
   1272e:	b006      	add	sp, #24
   12730:	4770      	bx	lr

00012732 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>:
   12732:	b580      	push	{r7, lr}
   12734:	b084      	sub	sp, #16
   12736:	9002      	str	r0, [sp, #8]
   12738:	9103      	str	r1, [sp, #12]
   1273a:	f000 f805 	bl	12748 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>
   1273e:	9001      	str	r0, [sp, #4]
   12740:	e7ff      	b.n	12742 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE+0x10>
   12742:	9801      	ldr	r0, [sp, #4]
   12744:	b004      	add	sp, #16
   12746:	bd80      	pop	{r7, pc}

00012748 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>:
   12748:	b084      	sub	sp, #16
   1274a:	9001      	str	r0, [sp, #4]
   1274c:	9102      	str	r1, [sp, #8]
   1274e:	4408      	add	r0, r1
   12750:	9003      	str	r0, [sp, #12]
   12752:	9803      	ldr	r0, [sp, #12]
   12754:	9000      	str	r0, [sp, #0]
   12756:	e7ff      	b.n	12758 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E+0x10>
   12758:	9800      	ldr	r0, [sp, #0]
   1275a:	b004      	add	sp, #16
   1275c:	4770      	bx	lr

0001275e <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>:
   1275e:	b580      	push	{r7, lr}
   12760:	b084      	sub	sp, #16
   12762:	9002      	str	r0, [sp, #8]
   12764:	9103      	str	r1, [sp, #12]
   12766:	f7ff ffd7 	bl	12718 <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>
   1276a:	9001      	str	r0, [sp, #4]
   1276c:	9100      	str	r1, [sp, #0]
   1276e:	e7ff      	b.n	12770 <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E+0x12>
   12770:	9801      	ldr	r0, [sp, #4]
   12772:	9900      	ldr	r1, [sp, #0]
   12774:	b004      	add	sp, #16
   12776:	bd80      	pop	{r7, pc}

00012778 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>:
   12778:	b084      	sub	sp, #16
   1277a:	9002      	str	r0, [sp, #8]
   1277c:	9103      	str	r1, [sp, #12]
   1277e:	9000      	str	r0, [sp, #0]
   12780:	9101      	str	r1, [sp, #4]
   12782:	9801      	ldr	r0, [sp, #4]
   12784:	b004      	add	sp, #16
   12786:	4770      	bx	lr

00012788 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>:
   12788:	b082      	sub	sp, #8
   1278a:	9000      	str	r0, [sp, #0]
   1278c:	9101      	str	r1, [sp, #4]
   1278e:	b002      	add	sp, #8
   12790:	4770      	bx	lr

00012792 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>:
   12792:	b082      	sub	sp, #8
   12794:	9000      	str	r0, [sp, #0]
   12796:	9101      	str	r1, [sp, #4]
   12798:	7800      	ldrb	r0, [r0, #0]
   1279a:	7809      	ldrb	r1, [r1, #0]
   1279c:	1a40      	subs	r0, r0, r1
   1279e:	fab0 f080 	clz	r0, r0
   127a2:	0940      	lsrs	r0, r0, #5
   127a4:	b002      	add	sp, #8
   127a6:	4770      	bx	lr

000127a8 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>:
where
    N: ArrayLength<T>,
{
    type Target = [T];

    fn deref(&self) -> &[T] {
   127a8:	b580      	push	{r7, lr}
   127aa:	b084      	sub	sp, #16
   127ac:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   127ae:	f004 fc17 	bl	16fe0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E>
   127b2:	9002      	str	r0, [sp, #8]
   127b4:	9101      	str	r1, [sp, #4]
   127b6:	e7ff      	b.n	127b8 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E+0x10>
    }
   127b8:	9802      	ldr	r0, [sp, #8]
   127ba:	9901      	ldr	r1, [sp, #4]
   127bc:	b004      	add	sp, #16
   127be:	bd80      	pop	{r7, pc}

000127c0 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>:
    fn deref(&self) -> &[T] {
   127c0:	b580      	push	{r7, lr}
   127c2:	b084      	sub	sp, #16
   127c4:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   127c6:	f004 fc20 	bl	1700a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>
   127ca:	9002      	str	r0, [sp, #8]
   127cc:	9101      	str	r1, [sp, #4]
   127ce:	e7ff      	b.n	127d0 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE+0x10>
    }
   127d0:	9802      	ldr	r0, [sp, #8]
   127d2:	9901      	ldr	r1, [sp, #4]
   127d4:	b004      	add	sp, #16
   127d6:	bd80      	pop	{r7, pc}

000127d8 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E>:
    pub fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   127d8:	b580      	push	{r7, lr}
   127da:	b084      	sub	sp, #16
   127dc:	9001      	str	r0, [sp, #4]
   127de:	9102      	str	r1, [sp, #8]
   127e0:	9203      	str	r2, [sp, #12]
        self.0.extend_from_slice(other)
   127e2:	f004 fb5f 	bl	16ea4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E>
   127e6:	9000      	str	r0, [sp, #0]
   127e8:	e7ff      	b.n	127ea <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E+0x12>
    }
   127ea:	9800      	ldr	r0, [sp, #0]
   127ec:	f000 0001 	and.w	r0, r0, #1
   127f0:	b004      	add	sp, #16
   127f2:	bd80      	pop	{r7, pc}

000127f4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>:
    pub fn push(&mut self, item: T) -> Result<(), T> {
   127f4:	b580      	push	{r7, lr}
   127f6:	b086      	sub	sp, #24
   127f8:	460a      	mov	r2, r1
   127fa:	9004      	str	r0, [sp, #16]
   127fc:	f88d 1017 	strb.w	r1, [sp, #23]
        self.0.push(item)
   12800:	9203      	str	r2, [sp, #12]
   12802:	f004 fbb2 	bl	16f6a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>
   12806:	9002      	str	r0, [sp, #8]
   12808:	9101      	str	r1, [sp, #4]
   1280a:	e7ff      	b.n	1280c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E+0x18>
    }
   1280c:	9802      	ldr	r0, [sp, #8]
   1280e:	f000 0001 	and.w	r0, r0, #1
   12812:	9901      	ldr	r1, [sp, #4]
   12814:	b006      	add	sp, #24
   12816:	bd80      	pop	{r7, pc}

00012818 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>:
    pub fn clear(&mut self) {
   12818:	b580      	push	{r7, lr}
   1281a:	b082      	sub	sp, #8
   1281c:	9001      	str	r0, [sp, #4]
        self.0.clear()
   1281e:	f004 fbcd 	bl	16fbc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>
   12822:	e7ff      	b.n	12824 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E+0xc>
    }
   12824:	b002      	add	sp, #8
   12826:	bd80      	pop	{r7, pc}

00012828 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E>:
    pub fn clear(&mut self) {
   12828:	b580      	push	{r7, lr}
   1282a:	b082      	sub	sp, #8
   1282c:	9001      	str	r0, [sp, #4]
        self.0.clear()
   1282e:	f004 fbce 	bl	16fce <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E>
   12832:	e7ff      	b.n	12834 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E+0xc>
    }
   12834:	b002      	add	sp, #8
   12836:	bd80      	pop	{r7, pc}

00012838 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E>:
    pub fn capacity(&self) -> usize {
   12838:	b580      	push	{r7, lr}
   1283a:	b082      	sub	sp, #8
   1283c:	9001      	str	r0, [sp, #4]
        self.0.capacity()
   1283e:	f004 fc03 	bl	17048 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE>
   12842:	9000      	str	r0, [sp, #0]
   12844:	e7ff      	b.n	12846 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E+0xe>
    }
   12846:	9800      	ldr	r0, [sp, #0]
   12848:	b002      	add	sp, #8
   1284a:	bd80      	pop	{r7, pc}

0001284c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>:
   1284c:	b081      	sub	sp, #4
   1284e:	9000      	str	r0, [sp, #0]
   12850:	b001      	add	sp, #4
   12852:	4770      	bx	lr

00012854 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>:
   12854:	b580      	push	{r7, lr}
   12856:	b088      	sub	sp, #32
   12858:	9006      	str	r0, [sp, #24]
   1285a:	9107      	str	r1, [sp, #28]
   1285c:	9004      	str	r0, [sp, #16]
   1285e:	4608      	mov	r0, r1
   12860:	9103      	str	r1, [sp, #12]
   12862:	f005 ff48 	bl	186f6 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   12866:	9002      	str	r0, [sp, #8]
   12868:	e7ff      	b.n	1286a <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x16>
   1286a:	9802      	ldr	r0, [sp, #8]
   1286c:	07c1      	lsls	r1, r0, #31
   1286e:	2900      	cmp	r1, #0
   12870:	d105      	bne.n	1287e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x2a>
   12872:	e7ff      	b.n	12874 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x20>
   12874:	9803      	ldr	r0, [sp, #12]
   12876:	f005 ff42 	bl	186fe <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   1287a:	9001      	str	r0, [sp, #4]
   1287c:	e007      	b.n	1288e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x3a>
   1287e:	9804      	ldr	r0, [sp, #16]
   12880:	9903      	ldr	r1, [sp, #12]
   12882:	f006 fc46 	bl	19112 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>
   12886:	f88d 0017 	strb.w	r0, [sp, #23]
   1288a:	e7ff      	b.n	1288c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x38>
   1288c:	e015      	b.n	128ba <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
   1288e:	9801      	ldr	r0, [sp, #4]
   12890:	07c1      	lsls	r1, r0, #31
   12892:	2900      	cmp	r1, #0
   12894:	d107      	bne.n	128a6 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x52>
   12896:	e7ff      	b.n	12898 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x44>
   12898:	9804      	ldr	r0, [sp, #16]
   1289a:	9903      	ldr	r1, [sp, #12]
   1289c:	f006 fe2b 	bl	194f6 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>
   128a0:	f88d 0017 	strb.w	r0, [sp, #23]
   128a4:	e007      	b.n	128b6 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x62>
   128a6:	9804      	ldr	r0, [sp, #16]
   128a8:	9903      	ldr	r1, [sp, #12]
   128aa:	f006 fc61 	bl	19170 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>
   128ae:	f88d 0017 	strb.w	r0, [sp, #23]
   128b2:	e7ff      	b.n	128b4 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x60>
   128b4:	e000      	b.n	128b8 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
   128b6:	e7ff      	b.n	128b8 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
   128b8:	e7ff      	b.n	128ba <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
   128ba:	f89d 0017 	ldrb.w	r0, [sp, #23]
   128be:	b008      	add	sp, #32
   128c0:	bd80      	pop	{r7, pc}

000128c2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>:
   128c2:	b580      	push	{r7, lr}
   128c4:	b088      	sub	sp, #32
   128c6:	9006      	str	r0, [sp, #24]
   128c8:	9107      	str	r1, [sp, #28]
   128ca:	9004      	str	r0, [sp, #16]
   128cc:	4608      	mov	r0, r1
   128ce:	9103      	str	r1, [sp, #12]
   128d0:	f005 ff11 	bl	186f6 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   128d4:	9002      	str	r0, [sp, #8]
   128d6:	e7ff      	b.n	128d8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x16>
   128d8:	9802      	ldr	r0, [sp, #8]
   128da:	07c1      	lsls	r1, r0, #31
   128dc:	2900      	cmp	r1, #0
   128de:	d105      	bne.n	128ec <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x2a>
   128e0:	e7ff      	b.n	128e2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x20>
   128e2:	9803      	ldr	r0, [sp, #12]
   128e4:	f005 ff0b 	bl	186fe <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   128e8:	9001      	str	r0, [sp, #4]
   128ea:	e007      	b.n	128fc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x3a>
   128ec:	9804      	ldr	r0, [sp, #16]
   128ee:	9903      	ldr	r1, [sp, #12]
   128f0:	f006 fd2b 	bl	1934a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   128f4:	f88d 0017 	strb.w	r0, [sp, #23]
   128f8:	e7ff      	b.n	128fa <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x38>
   128fa:	e015      	b.n	12928 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   128fc:	9801      	ldr	r0, [sp, #4]
   128fe:	07c1      	lsls	r1, r0, #31
   12900:	2900      	cmp	r1, #0
   12902:	d107      	bne.n	12914 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x52>
   12904:	e7ff      	b.n	12906 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x44>
   12906:	9804      	ldr	r0, [sp, #16]
   12908:	9903      	ldr	r1, [sp, #12]
   1290a:	f006 fe99 	bl	19640 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
   1290e:	f88d 0017 	strb.w	r0, [sp, #23]
   12912:	e007      	b.n	12924 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x62>
   12914:	9804      	ldr	r0, [sp, #16]
   12916:	9903      	ldr	r1, [sp, #12]
   12918:	f006 fd82 	bl	19420 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   1291c:	f88d 0017 	strb.w	r0, [sp, #23]
   12920:	e7ff      	b.n	12922 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x60>
   12922:	e000      	b.n	12926 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   12924:	e7ff      	b.n	12926 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   12926:	e7ff      	b.n	12928 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   12928:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1292c:	b008      	add	sp, #32
   1292e:	bd80      	pop	{r7, pc}

00012930 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>:
   12930:	b580      	push	{r7, lr}
   12932:	b088      	sub	sp, #32
   12934:	9006      	str	r0, [sp, #24]
   12936:	9107      	str	r1, [sp, #28]
   12938:	9004      	str	r0, [sp, #16]
   1293a:	4608      	mov	r0, r1
   1293c:	9103      	str	r1, [sp, #12]
   1293e:	f005 feda 	bl	186f6 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   12942:	9002      	str	r0, [sp, #8]
   12944:	e7ff      	b.n	12946 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x16>
   12946:	9802      	ldr	r0, [sp, #8]
   12948:	07c1      	lsls	r1, r0, #31
   1294a:	2900      	cmp	r1, #0
   1294c:	d105      	bne.n	1295a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x2a>
   1294e:	e7ff      	b.n	12950 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x20>
   12950:	9803      	ldr	r0, [sp, #12]
   12952:	f005 fed4 	bl	186fe <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   12956:	9001      	str	r0, [sp, #4]
   12958:	e007      	b.n	1296a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x3a>
   1295a:	9804      	ldr	r0, [sp, #16]
   1295c:	9903      	ldr	r1, [sp, #12]
   1295e:	f006 fcf4 	bl	1934a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   12962:	f88d 0017 	strb.w	r0, [sp, #23]
   12966:	e7ff      	b.n	12968 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x38>
   12968:	e015      	b.n	12996 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
   1296a:	9801      	ldr	r0, [sp, #4]
   1296c:	07c1      	lsls	r1, r0, #31
   1296e:	2900      	cmp	r1, #0
   12970:	d107      	bne.n	12982 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x52>
   12972:	e7ff      	b.n	12974 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x44>
   12974:	9804      	ldr	r0, [sp, #16]
   12976:	9903      	ldr	r1, [sp, #12]
   12978:	f006 fedc 	bl	19734 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   1297c:	f88d 0017 	strb.w	r0, [sp, #23]
   12980:	e007      	b.n	12992 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x62>
   12982:	9804      	ldr	r0, [sp, #16]
   12984:	9903      	ldr	r1, [sp, #12]
   12986:	f006 fd4b 	bl	19420 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   1298a:	f88d 0017 	strb.w	r0, [sp, #23]
   1298e:	e7ff      	b.n	12990 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x60>
   12990:	e000      	b.n	12994 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
   12992:	e7ff      	b.n	12994 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
   12994:	e7ff      	b.n	12996 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
   12996:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1299a:	b008      	add	sp, #32
   1299c:	bd80      	pop	{r7, pc}

0001299e <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>:
   1299e:	b580      	push	{r7, lr}
   129a0:	b084      	sub	sp, #16
   129a2:	9002      	str	r0, [sp, #8]
   129a4:	9103      	str	r1, [sp, #12]
   129a6:	6800      	ldr	r0, [r0, #0]
   129a8:	6809      	ldr	r1, [r1, #0]
   129aa:	f7ff fef2 	bl	12792 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>
   129ae:	9001      	str	r0, [sp, #4]
   129b0:	e7ff      	b.n	129b2 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E+0x14>
   129b2:	9801      	ldr	r0, [sp, #4]
   129b4:	f000 0001 	and.w	r0, r0, #1
   129b8:	b004      	add	sp, #16
   129ba:	bd80      	pop	{r7, pc}

000129bc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>:

/// Non-blocking SPI transfer callback values (not used)
static mut SPI_CALLBACK: SpiCallback = SpiCallback {};

/// Init non-blocking SPI transfer
pub fn spi_noblock_init() -> MynewtResult<()> {
   129bc:	b5b0      	push	{r4, r5, r7, lr}
   129be:	f5ad 6db5 	sub.w	sp, sp, #1448	; 0x5a8
   129c2:	2000      	movs	r0, #0
    //  Disable SPI port
    unsafe { hal::hal_spi_disable(SPI_NUM) };
   129c4:	f007 fd98 	bl	1a4f8 <hal_spi_disable>
   129c8:	e7ff      	b.n	129ca <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xe>

    //  Configure SPI port for non-blocking SPI
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   129ca:	f240 01f8 	movw	r1, #248	; 0xf8
   129ce:	f2c2 0100 	movt	r1, #8192	; 0x2000
   129d2:	2000      	movs	r0, #0
   129d4:	f007 fd4e 	bl	1a474 <hal_spi_config>
   129d8:	906a      	str	r0, [sp, #424]	; 0x1a8
   129da:	e7ff      	b.n	129dc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x20>
   129dc:	f640 1068 	movw	r0, #2408	; 0x968
   129e0:	f2c0 0002 	movt	r0, #2
   129e4:	6800      	ldr	r0, [r0, #0]
   129e6:	a96a      	add	r1, sp, #424	; 0x1a8
   129e8:	916b      	str	r1, [sp, #428]	; 0x1ac
   129ea:	906c      	str	r0, [sp, #432]	; 0x1b0
   129ec:	986b      	ldr	r0, [sp, #428]	; 0x1ac
   129ee:	f8cd 04fc 	str.w	r0, [sp, #1276]	; 0x4fc
   129f2:	996c      	ldr	r1, [sp, #432]	; 0x1b0
   129f4:	f8cd 1500 	str.w	r1, [sp, #1280]	; 0x500
   129f8:	6802      	ldr	r2, [r0, #0]
   129fa:	680b      	ldr	r3, [r1, #0]
   129fc:	429a      	cmp	r2, r3
   129fe:	9068      	str	r0, [sp, #416]	; 0x1a0
   12a00:	9167      	str	r1, [sp, #412]	; 0x19c
   12a02:	d10c      	bne.n	12a1e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x62>
   12a04:	e7ff      	b.n	12a06 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4a>
    let arg = unsafe { core::mem::transmute(&mut SPI_CALLBACK) };
   12a06:	f646 7004 	movw	r0, #28420	; 0x6f04
   12a0a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12a0e:	f8cd 0510 	str.w	r0, [sp, #1296]	; 0x510
   12a12:	f8dd 0510 	ldr.w	r0, [sp, #1296]	; 0x510
   12a16:	f8cd 0514 	str.w	r0, [sp, #1300]	; 0x514
   12a1a:	9066      	str	r0, [sp, #408]	; 0x198
   12a1c:	e075      	b.n	12b0a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x14e>
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   12a1e:	f640 10c0 	movw	r0, #2496	; 0x9c0
   12a22:	f2c0 0002 	movt	r0, #2
   12a26:	6801      	ldr	r1, [r0, #0]
   12a28:	9868      	ldr	r0, [sp, #416]	; 0x1a0
   12a2a:	907c      	str	r0, [sp, #496]	; 0x1f0
   12a2c:	9a67      	ldr	r2, [sp, #412]	; 0x19c
   12a2e:	927d      	str	r2, [sp, #500]	; 0x1f4
   12a30:	f640 13dc 	movw	r3, #2524	; 0x9dc
   12a34:	f2c0 0302 	movt	r3, #2
   12a38:	681b      	ldr	r3, [r3, #0]
   12a3a:	f640 1ce0 	movw	ip, #2528	; 0x9e0
   12a3e:	f2c0 0c02 	movt	ip, #2
   12a42:	f8dc c000 	ldr.w	ip, [ip]
   12a46:	46ee      	mov	lr, sp
   12a48:	2400      	movs	r4, #0
   12a4a:	f8ce 4000 	str.w	r4, [lr]
   12a4e:	a87e      	add	r0, sp, #504	; 0x1f8
   12a50:	2201      	movs	r2, #1
   12a52:	9165      	str	r1, [sp, #404]	; 0x194
   12a54:	4619      	mov	r1, r3
   12a56:	4663      	mov	r3, ip
   12a58:	f7f6 f820 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12a5c:	e7ff      	b.n	12a5e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2>
   12a5e:	a87c      	add	r0, sp, #496	; 0x1f0
   12a60:	9079      	str	r0, [sp, #484]	; 0x1e4
   12a62:	a87d      	add	r0, sp, #500	; 0x1f4
   12a64:	907a      	str	r0, [sp, #488]	; 0x1e8
   12a66:	a87e      	add	r0, sp, #504	; 0x1f8
   12a68:	907b      	str	r0, [sp, #492]	; 0x1ec
   12a6a:	9879      	ldr	r0, [sp, #484]	; 0x1e4
   12a6c:	f8cd 0504 	str.w	r0, [sp, #1284]	; 0x504
   12a70:	997a      	ldr	r1, [sp, #488]	; 0x1e8
   12a72:	f8cd 1508 	str.w	r1, [sp, #1288]	; 0x508
   12a76:	9a7b      	ldr	r2, [sp, #492]	; 0x1ec
   12a78:	f8cd 250c 	str.w	r2, [sp, #1292]	; 0x50c
   12a7c:	f249 23eb 	movw	r3, #37611	; 0x92eb
   12a80:	f2c0 0300 	movt	r3, #0
   12a84:	9164      	str	r1, [sp, #400]	; 0x190
   12a86:	4619      	mov	r1, r3
   12a88:	9263      	str	r2, [sp, #396]	; 0x18c
   12a8a:	f7f6 fc66 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12a8e:	9062      	str	r0, [sp, #392]	; 0x188
   12a90:	9161      	str	r1, [sp, #388]	; 0x184
   12a92:	e7ff      	b.n	12a94 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xd8>
   12a94:	f249 21eb 	movw	r1, #37611	; 0x92eb
   12a98:	f2c0 0100 	movt	r1, #0
   12a9c:	9864      	ldr	r0, [sp, #400]	; 0x190
   12a9e:	f7f6 fc5c 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12aa2:	9060      	str	r0, [sp, #384]	; 0x180
   12aa4:	915f      	str	r1, [sp, #380]	; 0x17c
   12aa6:	e7ff      	b.n	12aa8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xec>
   12aa8:	f647 7183 	movw	r1, #32643	; 0x7f83
   12aac:	f2c0 0101 	movt	r1, #1
   12ab0:	9863      	ldr	r0, [sp, #396]	; 0x18c
   12ab2:	f7f6 fc91 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12ab6:	905e      	str	r0, [sp, #376]	; 0x178
   12ab8:	915d      	str	r1, [sp, #372]	; 0x174
   12aba:	e7ff      	b.n	12abc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x100>
   12abc:	9862      	ldr	r0, [sp, #392]	; 0x188
   12abe:	9073      	str	r0, [sp, #460]	; 0x1cc
   12ac0:	9961      	ldr	r1, [sp, #388]	; 0x184
   12ac2:	9174      	str	r1, [sp, #464]	; 0x1d0
   12ac4:	9a60      	ldr	r2, [sp, #384]	; 0x180
   12ac6:	9275      	str	r2, [sp, #468]	; 0x1d4
   12ac8:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
   12aca:	9376      	str	r3, [sp, #472]	; 0x1d8
   12acc:	f8dd c178 	ldr.w	ip, [sp, #376]	; 0x178
   12ad0:	f8cd c1dc 	str.w	ip, [sp, #476]	; 0x1dc
   12ad4:	f8dd e174 	ldr.w	lr, [sp, #372]	; 0x174
   12ad8:	f8cd e1e0 	str.w	lr, [sp, #480]	; 0x1e0
   12adc:	466c      	mov	r4, sp
   12ade:	2503      	movs	r5, #3
   12ae0:	6025      	str	r5, [r4, #0]
   12ae2:	a86d      	add	r0, sp, #436	; 0x1b4
   12ae4:	ab73      	add	r3, sp, #460	; 0x1cc
   12ae6:	9965      	ldr	r1, [sp, #404]	; 0x194
   12ae8:	462a      	mov	r2, r5
   12aea:	f7f5 ffd7 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12aee:	e7ff      	b.n	12af0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x134>
   12af0:	f640 10fc 	movw	r0, #2556	; 0x9fc
   12af4:	f2c0 0002 	movt	r0, #2
   12af8:	f004 ff55 	bl	179a6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12afc:	905c      	str	r0, [sp, #368]	; 0x170
   12afe:	e7ff      	b.n	12b00 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x144>
   12b00:	a86d      	add	r0, sp, #436	; 0x1b4
   12b02:	995c      	ldr	r1, [sp, #368]	; 0x170
   12b04:	f004 ff8c 	bl	17a20 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12b08:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
        SPI_NUM, 
        Some(spi_noblock_handler), 
   12b0a:	f643 7057 	movw	r0, #16215	; 0x3f57
   12b0e:	f2c0 0001 	movt	r0, #1
   12b12:	9085      	str	r0, [sp, #532]	; 0x214
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
   12b14:	9985      	ldr	r1, [sp, #532]	; 0x214
   12b16:	2000      	movs	r0, #0
   12b18:	9a66      	ldr	r2, [sp, #408]	; 0x198
   12b1a:	f007 fd51 	bl	1a5c0 <hal_spi_set_txrx_cb>
   12b1e:	9084      	str	r0, [sp, #528]	; 0x210
   12b20:	e7ff      	b.n	12b22 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x166>
        arg
    ) };
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   12b22:	f640 1068 	movw	r0, #2408	; 0x968
   12b26:	f2c0 0002 	movt	r0, #2
   12b2a:	6800      	ldr	r0, [r0, #0]
   12b2c:	a984      	add	r1, sp, #528	; 0x210
   12b2e:	9186      	str	r1, [sp, #536]	; 0x218
   12b30:	9087      	str	r0, [sp, #540]	; 0x21c
   12b32:	9886      	ldr	r0, [sp, #536]	; 0x218
   12b34:	f8cd 0518 	str.w	r0, [sp, #1304]	; 0x518
   12b38:	9987      	ldr	r1, [sp, #540]	; 0x21c
   12b3a:	f8cd 151c 	str.w	r1, [sp, #1308]	; 0x51c
   12b3e:	6802      	ldr	r2, [r0, #0]
   12b40:	680b      	ldr	r3, [r1, #0]
   12b42:	429a      	cmp	r2, r3
   12b44:	905b      	str	r0, [sp, #364]	; 0x16c
   12b46:	915a      	str	r1, [sp, #360]	; 0x168
   12b48:	d105      	bne.n	12b56 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x19a>
   12b4a:	e7ff      	b.n	12b4c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x190>
   12b4c:	2000      	movs	r0, #0

    //  Enable SPI port and set SS to high to disable SPI device
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   12b4e:	f007 fcad 	bl	1a4ac <hal_spi_enable>
   12b52:	909f      	str	r0, [sp, #636]	; 0x27c
   12b54:	e075      	b.n	12c42 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x286>
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   12b56:	f640 10c0 	movw	r0, #2496	; 0x9c0
   12b5a:	f2c0 0002 	movt	r0, #2
   12b5e:	6801      	ldr	r1, [r0, #0]
   12b60:	985b      	ldr	r0, [sp, #364]	; 0x16c
   12b62:	9097      	str	r0, [sp, #604]	; 0x25c
   12b64:	9a5a      	ldr	r2, [sp, #360]	; 0x168
   12b66:	9298      	str	r2, [sp, #608]	; 0x260
   12b68:	f640 2320 	movw	r3, #2592	; 0xa20
   12b6c:	f2c0 0302 	movt	r3, #2
   12b70:	681b      	ldr	r3, [r3, #0]
   12b72:	f640 1ce0 	movw	ip, #2528	; 0x9e0
   12b76:	f2c0 0c02 	movt	ip, #2
   12b7a:	f8dc c000 	ldr.w	ip, [ip]
   12b7e:	46ee      	mov	lr, sp
   12b80:	2400      	movs	r4, #0
   12b82:	f8ce 4000 	str.w	r4, [lr]
   12b86:	a899      	add	r0, sp, #612	; 0x264
   12b88:	2201      	movs	r2, #1
   12b8a:	9159      	str	r1, [sp, #356]	; 0x164
   12b8c:	4619      	mov	r1, r3
   12b8e:	4663      	mov	r3, ip
   12b90:	f7f5 ff84 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12b94:	e7ff      	b.n	12b96 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x1da>
   12b96:	a897      	add	r0, sp, #604	; 0x25c
   12b98:	9094      	str	r0, [sp, #592]	; 0x250
   12b9a:	a898      	add	r0, sp, #608	; 0x260
   12b9c:	9095      	str	r0, [sp, #596]	; 0x254
   12b9e:	a899      	add	r0, sp, #612	; 0x264
   12ba0:	9096      	str	r0, [sp, #600]	; 0x258
   12ba2:	9894      	ldr	r0, [sp, #592]	; 0x250
   12ba4:	f8cd 0520 	str.w	r0, [sp, #1312]	; 0x520
   12ba8:	9995      	ldr	r1, [sp, #596]	; 0x254
   12baa:	f8cd 1524 	str.w	r1, [sp, #1316]	; 0x524
   12bae:	9a96      	ldr	r2, [sp, #600]	; 0x258
   12bb0:	f8cd 2528 	str.w	r2, [sp, #1320]	; 0x528
   12bb4:	f249 23eb 	movw	r3, #37611	; 0x92eb
   12bb8:	f2c0 0300 	movt	r3, #0
   12bbc:	9158      	str	r1, [sp, #352]	; 0x160
   12bbe:	4619      	mov	r1, r3
   12bc0:	9257      	str	r2, [sp, #348]	; 0x15c
   12bc2:	f7f6 fbca 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12bc6:	9056      	str	r0, [sp, #344]	; 0x158
   12bc8:	9155      	str	r1, [sp, #340]	; 0x154
   12bca:	e7ff      	b.n	12bcc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x210>
   12bcc:	f249 21eb 	movw	r1, #37611	; 0x92eb
   12bd0:	f2c0 0100 	movt	r1, #0
   12bd4:	9858      	ldr	r0, [sp, #352]	; 0x160
   12bd6:	f7f6 fbc0 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12bda:	9054      	str	r0, [sp, #336]	; 0x150
   12bdc:	9153      	str	r1, [sp, #332]	; 0x14c
   12bde:	e7ff      	b.n	12be0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x224>
   12be0:	f647 7183 	movw	r1, #32643	; 0x7f83
   12be4:	f2c0 0101 	movt	r1, #1
   12be8:	9857      	ldr	r0, [sp, #348]	; 0x15c
   12bea:	f7f6 fbf5 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12bee:	9052      	str	r0, [sp, #328]	; 0x148
   12bf0:	9151      	str	r1, [sp, #324]	; 0x144
   12bf2:	e7ff      	b.n	12bf4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x238>
   12bf4:	9856      	ldr	r0, [sp, #344]	; 0x158
   12bf6:	908e      	str	r0, [sp, #568]	; 0x238
   12bf8:	9955      	ldr	r1, [sp, #340]	; 0x154
   12bfa:	918f      	str	r1, [sp, #572]	; 0x23c
   12bfc:	9a54      	ldr	r2, [sp, #336]	; 0x150
   12bfe:	9290      	str	r2, [sp, #576]	; 0x240
   12c00:	9b53      	ldr	r3, [sp, #332]	; 0x14c
   12c02:	9391      	str	r3, [sp, #580]	; 0x244
   12c04:	f8dd c148 	ldr.w	ip, [sp, #328]	; 0x148
   12c08:	f8cd c248 	str.w	ip, [sp, #584]	; 0x248
   12c0c:	f8dd e144 	ldr.w	lr, [sp, #324]	; 0x144
   12c10:	f8cd e24c 	str.w	lr, [sp, #588]	; 0x24c
   12c14:	466c      	mov	r4, sp
   12c16:	2503      	movs	r5, #3
   12c18:	6025      	str	r5, [r4, #0]
   12c1a:	a888      	add	r0, sp, #544	; 0x220
   12c1c:	ab8e      	add	r3, sp, #568	; 0x238
   12c1e:	9959      	ldr	r1, [sp, #356]	; 0x164
   12c20:	462a      	mov	r2, r5
   12c22:	f7f5 ff3b 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12c26:	e7ff      	b.n	12c28 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x26c>
   12c28:	f640 2024 	movw	r0, #2596	; 0xa24
   12c2c:	f2c0 0002 	movt	r0, #2
   12c30:	f004 feb9 	bl	179a6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12c34:	9050      	str	r0, [sp, #320]	; 0x140
   12c36:	e7ff      	b.n	12c38 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x27c>
   12c38:	a888      	add	r0, sp, #544	; 0x220
   12c3a:	9950      	ldr	r1, [sp, #320]	; 0x140
   12c3c:	f004 fef0 	bl	17a20 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12c40:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   12c42:	f640 1068 	movw	r0, #2408	; 0x968
   12c46:	f2c0 0002 	movt	r0, #2
   12c4a:	6800      	ldr	r0, [r0, #0]
   12c4c:	a99f      	add	r1, sp, #636	; 0x27c
   12c4e:	91a0      	str	r1, [sp, #640]	; 0x280
   12c50:	90a1      	str	r0, [sp, #644]	; 0x284
   12c52:	98a0      	ldr	r0, [sp, #640]	; 0x280
   12c54:	f8cd 052c 	str.w	r0, [sp, #1324]	; 0x52c
   12c58:	99a1      	ldr	r1, [sp, #644]	; 0x284
   12c5a:	f8cd 1530 	str.w	r1, [sp, #1328]	; 0x530
   12c5e:	6802      	ldr	r2, [r0, #0]
   12c60:	680b      	ldr	r3, [r1, #0]
   12c62:	429a      	cmp	r2, r3
   12c64:	904f      	str	r0, [sp, #316]	; 0x13c
   12c66:	914e      	str	r1, [sp, #312]	; 0x138
   12c68:	d106      	bne.n	12c78 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2bc>
   12c6a:	e7ff      	b.n	12c6c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2b0>
   12c6c:	2019      	movs	r0, #25
   12c6e:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12c70:	f006 fff2 	bl	19c58 <hal_gpio_init_out>
   12c74:	90b9      	str	r0, [sp, #740]	; 0x2e4
   12c76:	e075      	b.n	12d64 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3a8>
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   12c78:	f640 10c0 	movw	r0, #2496	; 0x9c0
   12c7c:	f2c0 0002 	movt	r0, #2
   12c80:	6801      	ldr	r1, [r0, #0]
   12c82:	984f      	ldr	r0, [sp, #316]	; 0x13c
   12c84:	90b1      	str	r0, [sp, #708]	; 0x2c4
   12c86:	9a4e      	ldr	r2, [sp, #312]	; 0x138
   12c88:	92b2      	str	r2, [sp, #712]	; 0x2c8
   12c8a:	f640 234c 	movw	r3, #2636	; 0xa4c
   12c8e:	f2c0 0302 	movt	r3, #2
   12c92:	681b      	ldr	r3, [r3, #0]
   12c94:	f640 1ce0 	movw	ip, #2528	; 0x9e0
   12c98:	f2c0 0c02 	movt	ip, #2
   12c9c:	f8dc c000 	ldr.w	ip, [ip]
   12ca0:	46ee      	mov	lr, sp
   12ca2:	2400      	movs	r4, #0
   12ca4:	f8ce 4000 	str.w	r4, [lr]
   12ca8:	a8b3      	add	r0, sp, #716	; 0x2cc
   12caa:	2201      	movs	r2, #1
   12cac:	914d      	str	r1, [sp, #308]	; 0x134
   12cae:	4619      	mov	r1, r3
   12cb0:	4663      	mov	r3, ip
   12cb2:	f7f5 fef3 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12cb6:	e7ff      	b.n	12cb8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2fc>
   12cb8:	a8b1      	add	r0, sp, #708	; 0x2c4
   12cba:	90ae      	str	r0, [sp, #696]	; 0x2b8
   12cbc:	a8b2      	add	r0, sp, #712	; 0x2c8
   12cbe:	90af      	str	r0, [sp, #700]	; 0x2bc
   12cc0:	a8b3      	add	r0, sp, #716	; 0x2cc
   12cc2:	90b0      	str	r0, [sp, #704]	; 0x2c0
   12cc4:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
   12cc6:	f8cd 0534 	str.w	r0, [sp, #1332]	; 0x534
   12cca:	99af      	ldr	r1, [sp, #700]	; 0x2bc
   12ccc:	f8cd 1538 	str.w	r1, [sp, #1336]	; 0x538
   12cd0:	9ab0      	ldr	r2, [sp, #704]	; 0x2c0
   12cd2:	f8cd 253c 	str.w	r2, [sp, #1340]	; 0x53c
   12cd6:	f249 23eb 	movw	r3, #37611	; 0x92eb
   12cda:	f2c0 0300 	movt	r3, #0
   12cde:	914c      	str	r1, [sp, #304]	; 0x130
   12ce0:	4619      	mov	r1, r3
   12ce2:	924b      	str	r2, [sp, #300]	; 0x12c
   12ce4:	f7f6 fb39 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12ce8:	904a      	str	r0, [sp, #296]	; 0x128
   12cea:	9149      	str	r1, [sp, #292]	; 0x124
   12cec:	e7ff      	b.n	12cee <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x332>
   12cee:	f249 21eb 	movw	r1, #37611	; 0x92eb
   12cf2:	f2c0 0100 	movt	r1, #0
   12cf6:	984c      	ldr	r0, [sp, #304]	; 0x130
   12cf8:	f7f6 fb2f 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12cfc:	9048      	str	r0, [sp, #288]	; 0x120
   12cfe:	9147      	str	r1, [sp, #284]	; 0x11c
   12d00:	e7ff      	b.n	12d02 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x346>
   12d02:	f647 7183 	movw	r1, #32643	; 0x7f83
   12d06:	f2c0 0101 	movt	r1, #1
   12d0a:	984b      	ldr	r0, [sp, #300]	; 0x12c
   12d0c:	f7f6 fb64 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12d10:	9046      	str	r0, [sp, #280]	; 0x118
   12d12:	9145      	str	r1, [sp, #276]	; 0x114
   12d14:	e7ff      	b.n	12d16 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x35a>
   12d16:	984a      	ldr	r0, [sp, #296]	; 0x128
   12d18:	90a8      	str	r0, [sp, #672]	; 0x2a0
   12d1a:	9949      	ldr	r1, [sp, #292]	; 0x124
   12d1c:	91a9      	str	r1, [sp, #676]	; 0x2a4
   12d1e:	9a48      	ldr	r2, [sp, #288]	; 0x120
   12d20:	92aa      	str	r2, [sp, #680]	; 0x2a8
   12d22:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   12d24:	93ab      	str	r3, [sp, #684]	; 0x2ac
   12d26:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
   12d2a:	f8cd c2b0 	str.w	ip, [sp, #688]	; 0x2b0
   12d2e:	f8dd e114 	ldr.w	lr, [sp, #276]	; 0x114
   12d32:	f8cd e2b4 	str.w	lr, [sp, #692]	; 0x2b4
   12d36:	466c      	mov	r4, sp
   12d38:	2503      	movs	r5, #3
   12d3a:	6025      	str	r5, [r4, #0]
   12d3c:	a8a2      	add	r0, sp, #648	; 0x288
   12d3e:	aba8      	add	r3, sp, #672	; 0x2a0
   12d40:	994d      	ldr	r1, [sp, #308]	; 0x134
   12d42:	462a      	mov	r2, r5
   12d44:	f7f5 feaa 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12d48:	e7ff      	b.n	12d4a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x38e>
   12d4a:	f640 2050 	movw	r0, #2640	; 0xa50
   12d4e:	f2c0 0002 	movt	r0, #2
   12d52:	f004 fe28 	bl	179a6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12d56:	9044      	str	r0, [sp, #272]	; 0x110
   12d58:	e7ff      	b.n	12d5a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x39e>
   12d5a:	a8a2      	add	r0, sp, #648	; 0x288
   12d5c:	9944      	ldr	r1, [sp, #272]	; 0x110
   12d5e:	f004 fe5f 	bl	17a20 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12d62:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12d64:	f640 1068 	movw	r0, #2408	; 0x968
   12d68:	f2c0 0002 	movt	r0, #2
   12d6c:	6800      	ldr	r0, [r0, #0]
   12d6e:	a9b9      	add	r1, sp, #740	; 0x2e4
   12d70:	91ba      	str	r1, [sp, #744]	; 0x2e8
   12d72:	90bb      	str	r0, [sp, #748]	; 0x2ec
   12d74:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
   12d76:	f8cd 0540 	str.w	r0, [sp, #1344]	; 0x540
   12d7a:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
   12d7c:	f8cd 1544 	str.w	r1, [sp, #1348]	; 0x544
   12d80:	6802      	ldr	r2, [r0, #0]
   12d82:	680b      	ldr	r3, [r1, #0]
   12d84:	429a      	cmp	r2, r3
   12d86:	9043      	str	r0, [sp, #268]	; 0x10c
   12d88:	9142      	str	r1, [sp, #264]	; 0x108
   12d8a:	d106      	bne.n	12d9a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3de>
   12d8c:	e7ff      	b.n	12d8e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3d2>
   12d8e:	2012      	movs	r0, #18
   12d90:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12d92:	f006 ff61 	bl	19c58 <hal_gpio_init_out>
   12d96:	90d3      	str	r0, [sp, #844]	; 0x34c
   12d98:	e075      	b.n	12e86 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4ca>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12d9a:	f640 10c0 	movw	r0, #2496	; 0x9c0
   12d9e:	f2c0 0002 	movt	r0, #2
   12da2:	6801      	ldr	r1, [r0, #0]
   12da4:	9843      	ldr	r0, [sp, #268]	; 0x10c
   12da6:	90cb      	str	r0, [sp, #812]	; 0x32c
   12da8:	9a42      	ldr	r2, [sp, #264]	; 0x108
   12daa:	92cc      	str	r2, [sp, #816]	; 0x330
   12dac:	f640 2374 	movw	r3, #2676	; 0xa74
   12db0:	f2c0 0302 	movt	r3, #2
   12db4:	681b      	ldr	r3, [r3, #0]
   12db6:	f640 1ce0 	movw	ip, #2528	; 0x9e0
   12dba:	f2c0 0c02 	movt	ip, #2
   12dbe:	f8dc c000 	ldr.w	ip, [ip]
   12dc2:	46ee      	mov	lr, sp
   12dc4:	2400      	movs	r4, #0
   12dc6:	f8ce 4000 	str.w	r4, [lr]
   12dca:	a8cd      	add	r0, sp, #820	; 0x334
   12dcc:	2201      	movs	r2, #1
   12dce:	9141      	str	r1, [sp, #260]	; 0x104
   12dd0:	4619      	mov	r1, r3
   12dd2:	4663      	mov	r3, ip
   12dd4:	f7f5 fe62 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12dd8:	e7ff      	b.n	12dda <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x41e>
   12dda:	a8cb      	add	r0, sp, #812	; 0x32c
   12ddc:	90c8      	str	r0, [sp, #800]	; 0x320
   12dde:	a8cc      	add	r0, sp, #816	; 0x330
   12de0:	90c9      	str	r0, [sp, #804]	; 0x324
   12de2:	a8cd      	add	r0, sp, #820	; 0x334
   12de4:	90ca      	str	r0, [sp, #808]	; 0x328
   12de6:	98c8      	ldr	r0, [sp, #800]	; 0x320
   12de8:	f8cd 0548 	str.w	r0, [sp, #1352]	; 0x548
   12dec:	99c9      	ldr	r1, [sp, #804]	; 0x324
   12dee:	f8cd 154c 	str.w	r1, [sp, #1356]	; 0x54c
   12df2:	9aca      	ldr	r2, [sp, #808]	; 0x328
   12df4:	f8cd 2550 	str.w	r2, [sp, #1360]	; 0x550
   12df8:	f249 23eb 	movw	r3, #37611	; 0x92eb
   12dfc:	f2c0 0300 	movt	r3, #0
   12e00:	9140      	str	r1, [sp, #256]	; 0x100
   12e02:	4619      	mov	r1, r3
   12e04:	923f      	str	r2, [sp, #252]	; 0xfc
   12e06:	f7f6 faa8 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12e0a:	903e      	str	r0, [sp, #248]	; 0xf8
   12e0c:	913d      	str	r1, [sp, #244]	; 0xf4
   12e0e:	e7ff      	b.n	12e10 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x454>
   12e10:	f249 21eb 	movw	r1, #37611	; 0x92eb
   12e14:	f2c0 0100 	movt	r1, #0
   12e18:	9840      	ldr	r0, [sp, #256]	; 0x100
   12e1a:	f7f6 fa9e 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12e1e:	903c      	str	r0, [sp, #240]	; 0xf0
   12e20:	913b      	str	r1, [sp, #236]	; 0xec
   12e22:	e7ff      	b.n	12e24 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x468>
   12e24:	f647 7183 	movw	r1, #32643	; 0x7f83
   12e28:	f2c0 0101 	movt	r1, #1
   12e2c:	983f      	ldr	r0, [sp, #252]	; 0xfc
   12e2e:	f7f6 fad3 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12e32:	903a      	str	r0, [sp, #232]	; 0xe8
   12e34:	9139      	str	r1, [sp, #228]	; 0xe4
   12e36:	e7ff      	b.n	12e38 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x47c>
   12e38:	983e      	ldr	r0, [sp, #248]	; 0xf8
   12e3a:	90c2      	str	r0, [sp, #776]	; 0x308
   12e3c:	993d      	ldr	r1, [sp, #244]	; 0xf4
   12e3e:	91c3      	str	r1, [sp, #780]	; 0x30c
   12e40:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
   12e42:	92c4      	str	r2, [sp, #784]	; 0x310
   12e44:	9b3b      	ldr	r3, [sp, #236]	; 0xec
   12e46:	93c5      	str	r3, [sp, #788]	; 0x314
   12e48:	f8dd c0e8 	ldr.w	ip, [sp, #232]	; 0xe8
   12e4c:	f8cd c318 	str.w	ip, [sp, #792]	; 0x318
   12e50:	f8dd e0e4 	ldr.w	lr, [sp, #228]	; 0xe4
   12e54:	f8cd e31c 	str.w	lr, [sp, #796]	; 0x31c
   12e58:	466c      	mov	r4, sp
   12e5a:	2503      	movs	r5, #3
   12e5c:	6025      	str	r5, [r4, #0]
   12e5e:	a8bc      	add	r0, sp, #752	; 0x2f0
   12e60:	abc2      	add	r3, sp, #776	; 0x308
   12e62:	9941      	ldr	r1, [sp, #260]	; 0x104
   12e64:	462a      	mov	r2, r5
   12e66:	f7f5 fe19 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12e6a:	e7ff      	b.n	12e6c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4b0>
   12e6c:	f640 2078 	movw	r0, #2680	; 0xa78
   12e70:	f2c0 0002 	movt	r0, #2
   12e74:	f004 fd97 	bl	179a6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12e78:	9038      	str	r0, [sp, #224]	; 0xe0
   12e7a:	e7ff      	b.n	12e7c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4c0>
   12e7c:	a8bc      	add	r0, sp, #752	; 0x2f0
   12e7e:	9938      	ldr	r1, [sp, #224]	; 0xe0
   12e80:	f004 fdce 	bl	17a20 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12e84:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12e86:	f640 1068 	movw	r0, #2408	; 0x968
   12e8a:	f2c0 0002 	movt	r0, #2
   12e8e:	6800      	ldr	r0, [r0, #0]
   12e90:	a9d3      	add	r1, sp, #844	; 0x34c
   12e92:	91d4      	str	r1, [sp, #848]	; 0x350
   12e94:	90d5      	str	r0, [sp, #852]	; 0x354
   12e96:	98d4      	ldr	r0, [sp, #848]	; 0x350
   12e98:	f8cd 0554 	str.w	r0, [sp, #1364]	; 0x554
   12e9c:	99d5      	ldr	r1, [sp, #852]	; 0x354
   12e9e:	f8cd 1558 	str.w	r1, [sp, #1368]	; 0x558
   12ea2:	6802      	ldr	r2, [r0, #0]
   12ea4:	680b      	ldr	r3, [r1, #0]
   12ea6:	429a      	cmp	r2, r3
   12ea8:	9037      	str	r0, [sp, #220]	; 0xdc
   12eaa:	9136      	str	r1, [sp, #216]	; 0xd8
   12eac:	d107      	bne.n	12ebe <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x502>
   12eae:	e7ff      	b.n	12eb0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4f4>

    //  Create Event Queue and Mbuf (Data) Queue that will store the SPI requests
    unsafe { os::os_eventq_init(&mut SPI_EVENT_QUEUE) };
   12eb0:	f646 20a4 	movw	r0, #27300	; 0x6aa4
   12eb4:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12eb8:	f007 ffd8 	bl	1ae6c <os_eventq_init>
   12ebc:	e075      	b.n	12faa <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5ee>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12ebe:	f640 10c0 	movw	r0, #2496	; 0x9c0
   12ec2:	f2c0 0002 	movt	r0, #2
   12ec6:	6801      	ldr	r1, [r0, #0]
   12ec8:	9837      	ldr	r0, [sp, #220]	; 0xdc
   12eca:	90e5      	str	r0, [sp, #916]	; 0x394
   12ecc:	9a36      	ldr	r2, [sp, #216]	; 0xd8
   12ece:	92e6      	str	r2, [sp, #920]	; 0x398
   12ed0:	f640 2374 	movw	r3, #2676	; 0xa74
   12ed4:	f2c0 0302 	movt	r3, #2
   12ed8:	681b      	ldr	r3, [r3, #0]
   12eda:	f640 1ce0 	movw	ip, #2528	; 0x9e0
   12ede:	f2c0 0c02 	movt	ip, #2
   12ee2:	f8dc c000 	ldr.w	ip, [ip]
   12ee6:	46ee      	mov	lr, sp
   12ee8:	2400      	movs	r4, #0
   12eea:	f8ce 4000 	str.w	r4, [lr]
   12eee:	a8e7      	add	r0, sp, #924	; 0x39c
   12ef0:	2201      	movs	r2, #1
   12ef2:	9135      	str	r1, [sp, #212]	; 0xd4
   12ef4:	4619      	mov	r1, r3
   12ef6:	4663      	mov	r3, ip
   12ef8:	f7f5 fdd0 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12efc:	e7ff      	b.n	12efe <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x542>
   12efe:	a8e5      	add	r0, sp, #916	; 0x394
   12f00:	90e2      	str	r0, [sp, #904]	; 0x388
   12f02:	a8e6      	add	r0, sp, #920	; 0x398
   12f04:	90e3      	str	r0, [sp, #908]	; 0x38c
   12f06:	a8e7      	add	r0, sp, #924	; 0x39c
   12f08:	90e4      	str	r0, [sp, #912]	; 0x390
   12f0a:	98e2      	ldr	r0, [sp, #904]	; 0x388
   12f0c:	f8cd 055c 	str.w	r0, [sp, #1372]	; 0x55c
   12f10:	99e3      	ldr	r1, [sp, #908]	; 0x38c
   12f12:	f8cd 1560 	str.w	r1, [sp, #1376]	; 0x560
   12f16:	9ae4      	ldr	r2, [sp, #912]	; 0x390
   12f18:	f8cd 2564 	str.w	r2, [sp, #1380]	; 0x564
   12f1c:	f249 23eb 	movw	r3, #37611	; 0x92eb
   12f20:	f2c0 0300 	movt	r3, #0
   12f24:	9134      	str	r1, [sp, #208]	; 0xd0
   12f26:	4619      	mov	r1, r3
   12f28:	9233      	str	r2, [sp, #204]	; 0xcc
   12f2a:	f7f6 fa16 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12f2e:	9032      	str	r0, [sp, #200]	; 0xc8
   12f30:	9131      	str	r1, [sp, #196]	; 0xc4
   12f32:	e7ff      	b.n	12f34 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x578>
   12f34:	f249 21eb 	movw	r1, #37611	; 0x92eb
   12f38:	f2c0 0100 	movt	r1, #0
   12f3c:	9834      	ldr	r0, [sp, #208]	; 0xd0
   12f3e:	f7f6 fa0c 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12f42:	9030      	str	r0, [sp, #192]	; 0xc0
   12f44:	912f      	str	r1, [sp, #188]	; 0xbc
   12f46:	e7ff      	b.n	12f48 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x58c>
   12f48:	f647 7183 	movw	r1, #32643	; 0x7f83
   12f4c:	f2c0 0101 	movt	r1, #1
   12f50:	9833      	ldr	r0, [sp, #204]	; 0xcc
   12f52:	f7f6 fa41 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12f56:	902e      	str	r0, [sp, #184]	; 0xb8
   12f58:	912d      	str	r1, [sp, #180]	; 0xb4
   12f5a:	e7ff      	b.n	12f5c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5a0>
   12f5c:	9832      	ldr	r0, [sp, #200]	; 0xc8
   12f5e:	90dc      	str	r0, [sp, #880]	; 0x370
   12f60:	9931      	ldr	r1, [sp, #196]	; 0xc4
   12f62:	91dd      	str	r1, [sp, #884]	; 0x374
   12f64:	9a30      	ldr	r2, [sp, #192]	; 0xc0
   12f66:	92de      	str	r2, [sp, #888]	; 0x378
   12f68:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   12f6a:	93df      	str	r3, [sp, #892]	; 0x37c
   12f6c:	f8dd c0b8 	ldr.w	ip, [sp, #184]	; 0xb8
   12f70:	f8cd c380 	str.w	ip, [sp, #896]	; 0x380
   12f74:	f8dd e0b4 	ldr.w	lr, [sp, #180]	; 0xb4
   12f78:	f8cd e384 	str.w	lr, [sp, #900]	; 0x384
   12f7c:	466c      	mov	r4, sp
   12f7e:	2503      	movs	r5, #3
   12f80:	6025      	str	r5, [r4, #0]
   12f82:	a8d6      	add	r0, sp, #856	; 0x358
   12f84:	abdc      	add	r3, sp, #880	; 0x370
   12f86:	9935      	ldr	r1, [sp, #212]	; 0xd4
   12f88:	462a      	mov	r2, r5
   12f8a:	f7f5 fd87 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12f8e:	e7ff      	b.n	12f90 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5d4>
   12f90:	f640 2088 	movw	r0, #2696	; 0xa88
   12f94:	f2c0 0002 	movt	r0, #2
   12f98:	f004 fd05 	bl	179a6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12f9c:	902c      	str	r0, [sp, #176]	; 0xb0
   12f9e:	e7ff      	b.n	12fa0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5e4>
   12fa0:	a8d6      	add	r0, sp, #856	; 0x358
   12fa2:	992c      	ldr	r1, [sp, #176]	; 0xb0
   12fa4:	f004 fd3c 	bl	17a20 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12fa8:	defe      	udf	#254	; 0xfe
    let rc = unsafe { os::os_mqueue_init(
        &mut SPI_DATA_QUEUE, 
        Some(spi_event_callback), 
   12faa:	f643 1039 	movw	r0, #14649	; 0x3939
   12fae:	f2c0 0001 	movt	r0, #1
   12fb2:	90ee      	str	r0, [sp, #952]	; 0x3b8
    let rc = unsafe { os::os_mqueue_init(
   12fb4:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
   12fb6:	f646 208c 	movw	r0, #27276	; 0x6a8c
   12fba:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12fbe:	2200      	movs	r2, #0
   12fc0:	f008 f802 	bl	1afc8 <os_mqueue_init>
   12fc4:	90ed      	str	r0, [sp, #948]	; 0x3b4
   12fc6:	e7ff      	b.n	12fc8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x60c>
        NULL
    ) };
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   12fc8:	f640 1068 	movw	r0, #2408	; 0x968
   12fcc:	f2c0 0002 	movt	r0, #2
   12fd0:	6800      	ldr	r0, [r0, #0]
   12fd2:	a9ed      	add	r1, sp, #948	; 0x3b4
   12fd4:	91ef      	str	r1, [sp, #956]	; 0x3bc
   12fd6:	90f0      	str	r0, [sp, #960]	; 0x3c0
   12fd8:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
   12fda:	f8cd 0568 	str.w	r0, [sp, #1384]	; 0x568
   12fde:	99f0      	ldr	r1, [sp, #960]	; 0x3c0
   12fe0:	f8cd 156c 	str.w	r1, [sp, #1388]	; 0x56c
   12fe4:	6802      	ldr	r2, [r0, #0]
   12fe6:	680b      	ldr	r3, [r1, #0]
   12fe8:	429a      	cmp	r2, r3
   12fea:	902b      	str	r0, [sp, #172]	; 0xac
   12fec:	912a      	str	r1, [sp, #168]	; 0xa8
   12fee:	d10a      	bne.n	13006 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x64a>
   12ff0:	e7ff      	b.n	12ff2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x636>

    //  Create the Semaphore that will signal whether the SPI request has completed
    let rc = unsafe { os::os_sem_init(&mut SPI_SEM, 0) };  //  Init to 0 tokens, so caller will block until SPI request is completed.
   12ff2:	f646 207c 	movw	r0, #27260	; 0x6a7c
   12ff6:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12ffa:	2100      	movs	r1, #0
   12ffc:	f008 fcde 	bl	1b9bc <os_sem_init>
   13000:	f8cd 0420 	str.w	r0, [sp, #1056]	; 0x420
   13004:	e07b      	b.n	130fe <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x742>
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   13006:	f640 10c0 	movw	r0, #2496	; 0x9c0
   1300a:	f2c0 0002 	movt	r0, #2
   1300e:	6801      	ldr	r1, [r0, #0]
   13010:	982b      	ldr	r0, [sp, #172]	; 0xac
   13012:	f8cd 0400 	str.w	r0, [sp, #1024]	; 0x400
   13016:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   13018:	f8cd 2404 	str.w	r2, [sp, #1028]	; 0x404
   1301c:	f640 23ac 	movw	r3, #2732	; 0xaac
   13020:	f2c0 0302 	movt	r3, #2
   13024:	681b      	ldr	r3, [r3, #0]
   13026:	f640 1ce0 	movw	ip, #2528	; 0x9e0
   1302a:	f2c0 0c02 	movt	ip, #2
   1302e:	f8dc c000 	ldr.w	ip, [ip]
   13032:	46ee      	mov	lr, sp
   13034:	2400      	movs	r4, #0
   13036:	f8ce 4000 	str.w	r4, [lr]
   1303a:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   1303e:	2201      	movs	r2, #1
   13040:	9129      	str	r1, [sp, #164]	; 0xa4
   13042:	4619      	mov	r1, r3
   13044:	4663      	mov	r3, ip
   13046:	f7f5 fd29 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1304a:	e7ff      	b.n	1304c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x690>
   1304c:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
   13050:	90fd      	str	r0, [sp, #1012]	; 0x3f4
   13052:	f20d 4004 	addw	r0, sp, #1028	; 0x404
   13056:	90fe      	str	r0, [sp, #1016]	; 0x3f8
   13058:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   1305c:	90ff      	str	r0, [sp, #1020]	; 0x3fc
   1305e:	98fd      	ldr	r0, [sp, #1012]	; 0x3f4
   13060:	f8cd 0570 	str.w	r0, [sp, #1392]	; 0x570
   13064:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
   13066:	f8cd 1574 	str.w	r1, [sp, #1396]	; 0x574
   1306a:	9aff      	ldr	r2, [sp, #1020]	; 0x3fc
   1306c:	f8cd 2578 	str.w	r2, [sp, #1400]	; 0x578
   13070:	f249 23eb 	movw	r3, #37611	; 0x92eb
   13074:	f2c0 0300 	movt	r3, #0
   13078:	9128      	str	r1, [sp, #160]	; 0xa0
   1307a:	4619      	mov	r1, r3
   1307c:	9227      	str	r2, [sp, #156]	; 0x9c
   1307e:	f7f6 f96c 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13082:	9026      	str	r0, [sp, #152]	; 0x98
   13084:	9125      	str	r1, [sp, #148]	; 0x94
   13086:	e7ff      	b.n	13088 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6cc>
   13088:	f249 21eb 	movw	r1, #37611	; 0x92eb
   1308c:	f2c0 0100 	movt	r1, #0
   13090:	9828      	ldr	r0, [sp, #160]	; 0xa0
   13092:	f7f6 f962 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13096:	9024      	str	r0, [sp, #144]	; 0x90
   13098:	9123      	str	r1, [sp, #140]	; 0x8c
   1309a:	e7ff      	b.n	1309c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6e0>
   1309c:	f647 7183 	movw	r1, #32643	; 0x7f83
   130a0:	f2c0 0101 	movt	r1, #1
   130a4:	9827      	ldr	r0, [sp, #156]	; 0x9c
   130a6:	f7f6 f997 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   130aa:	9022      	str	r0, [sp, #136]	; 0x88
   130ac:	9121      	str	r1, [sp, #132]	; 0x84
   130ae:	e7ff      	b.n	130b0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6f4>
   130b0:	9826      	ldr	r0, [sp, #152]	; 0x98
   130b2:	90f7      	str	r0, [sp, #988]	; 0x3dc
   130b4:	9925      	ldr	r1, [sp, #148]	; 0x94
   130b6:	91f8      	str	r1, [sp, #992]	; 0x3e0
   130b8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   130ba:	92f9      	str	r2, [sp, #996]	; 0x3e4
   130bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   130be:	93fa      	str	r3, [sp, #1000]	; 0x3e8
   130c0:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
   130c4:	f8cd c3ec 	str.w	ip, [sp, #1004]	; 0x3ec
   130c8:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
   130cc:	f8cd e3f0 	str.w	lr, [sp, #1008]	; 0x3f0
   130d0:	466c      	mov	r4, sp
   130d2:	2503      	movs	r5, #3
   130d4:	6025      	str	r5, [r4, #0]
   130d6:	a8f1      	add	r0, sp, #964	; 0x3c4
   130d8:	abf7      	add	r3, sp, #988	; 0x3dc
   130da:	9929      	ldr	r1, [sp, #164]	; 0xa4
   130dc:	462a      	mov	r2, r5
   130de:	f7f5 fcdd 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   130e2:	e7ff      	b.n	130e4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x728>
   130e4:	f640 20b0 	movw	r0, #2736	; 0xab0
   130e8:	f2c0 0002 	movt	r0, #2
   130ec:	f004 fc5b 	bl	179a6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   130f0:	9020      	str	r0, [sp, #128]	; 0x80
   130f2:	e7ff      	b.n	130f4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x738>
   130f4:	a8f1      	add	r0, sp, #964	; 0x3c4
   130f6:	9920      	ldr	r1, [sp, #128]	; 0x80
   130f8:	f004 fc92 	bl	17a20 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   130fc:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   130fe:	f640 1068 	movw	r0, #2408	; 0x968
   13102:	f2c0 0002 	movt	r0, #2
   13106:	6800      	ldr	r0, [r0, #0]
   13108:	f50d 6184 	add.w	r1, sp, #1056	; 0x420
   1310c:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
   13110:	f8cd 0428 	str.w	r0, [sp, #1064]	; 0x428
   13114:	f8dd 0424 	ldr.w	r0, [sp, #1060]	; 0x424
   13118:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
   1311c:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
   13120:	f8cd 1580 	str.w	r1, [sp, #1408]	; 0x580
   13124:	6802      	ldr	r2, [r0, #0]
   13126:	680b      	ldr	r3, [r1, #0]
   13128:	429a      	cmp	r2, r3
   1312a:	901f      	str	r0, [sp, #124]	; 0x7c
   1312c:	911e      	str	r1, [sp, #120]	; 0x78
   1312e:	d10a      	bne.n	13146 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x78a>
   13130:	e7ff      	b.n	13132 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x776>

    //  Create the Semaphore that will throttle the number of queued SPI requests
    let rc = unsafe { os::os_sem_init(&mut SPI_THROTTLE_SEM, 2) };  //  Only max 2 requests queued, the next request will block
   13132:	f646 2084 	movw	r0, #27268	; 0x6a84
   13136:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1313a:	2102      	movs	r1, #2
   1313c:	f008 fc3e 	bl	1b9bc <os_sem_init>
   13140:	f8cd 0488 	str.w	r0, [sp, #1160]	; 0x488
   13144:	e088      	b.n	13258 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x89c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   13146:	f640 10c0 	movw	r0, #2496	; 0x9c0
   1314a:	f2c0 0002 	movt	r0, #2
   1314e:	6801      	ldr	r1, [r0, #0]
   13150:	981f      	ldr	r0, [sp, #124]	; 0x7c
   13152:	f8cd 0468 	str.w	r0, [sp, #1128]	; 0x468
   13156:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13158:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
   1315c:	f640 23d8 	movw	r3, #2776	; 0xad8
   13160:	f2c0 0302 	movt	r3, #2
   13164:	681b      	ldr	r3, [r3, #0]
   13166:	f640 1ce0 	movw	ip, #2528	; 0x9e0
   1316a:	f2c0 0c02 	movt	ip, #2
   1316e:	f8dc c000 	ldr.w	ip, [ip]
   13172:	46ee      	mov	lr, sp
   13174:	2400      	movs	r4, #0
   13176:	f8ce 4000 	str.w	r4, [lr]
   1317a:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   1317e:	2201      	movs	r2, #1
   13180:	911d      	str	r1, [sp, #116]	; 0x74
   13182:	4619      	mov	r1, r3
   13184:	4663      	mov	r3, ip
   13186:	f7f5 fc89 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1318a:	e7ff      	b.n	1318c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x7d0>
   1318c:	f50d 608d 	add.w	r0, sp, #1128	; 0x468
   13190:	f8cd 045c 	str.w	r0, [sp, #1116]	; 0x45c
   13194:	f20d 406c 	addw	r0, sp, #1132	; 0x46c
   13198:	f8cd 0460 	str.w	r0, [sp, #1120]	; 0x460
   1319c:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   131a0:	f8cd 0464 	str.w	r0, [sp, #1124]	; 0x464
   131a4:	f8dd 045c 	ldr.w	r0, [sp, #1116]	; 0x45c
   131a8:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
   131ac:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   131b0:	f8cd 1588 	str.w	r1, [sp, #1416]	; 0x588
   131b4:	f8dd 2464 	ldr.w	r2, [sp, #1124]	; 0x464
   131b8:	f8cd 258c 	str.w	r2, [sp, #1420]	; 0x58c
   131bc:	f249 333f 	movw	r3, #37695	; 0x933f
   131c0:	f2c0 0300 	movt	r3, #0
   131c4:	911c      	str	r1, [sp, #112]	; 0x70
   131c6:	4619      	mov	r1, r3
   131c8:	921b      	str	r2, [sp, #108]	; 0x6c
   131ca:	f7f6 f8f0 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   131ce:	901a      	str	r0, [sp, #104]	; 0x68
   131d0:	9119      	str	r1, [sp, #100]	; 0x64
   131d2:	e7ff      	b.n	131d4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x818>
   131d4:	f249 313f 	movw	r1, #37695	; 0x933f
   131d8:	f2c0 0100 	movt	r1, #0
   131dc:	981c      	ldr	r0, [sp, #112]	; 0x70
   131de:	f7f6 f8e6 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   131e2:	9018      	str	r0, [sp, #96]	; 0x60
   131e4:	9117      	str	r1, [sp, #92]	; 0x5c
   131e6:	e7ff      	b.n	131e8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x82c>
   131e8:	f647 7183 	movw	r1, #32643	; 0x7f83
   131ec:	f2c0 0101 	movt	r1, #1
   131f0:	981b      	ldr	r0, [sp, #108]	; 0x6c
   131f2:	f7f6 f8f1 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   131f6:	9016      	str	r0, [sp, #88]	; 0x58
   131f8:	9115      	str	r1, [sp, #84]	; 0x54
   131fa:	e7ff      	b.n	131fc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x840>
   131fc:	981a      	ldr	r0, [sp, #104]	; 0x68
   131fe:	f8cd 0444 	str.w	r0, [sp, #1092]	; 0x444
   13202:	9919      	ldr	r1, [sp, #100]	; 0x64
   13204:	f8cd 1448 	str.w	r1, [sp, #1096]	; 0x448
   13208:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1320a:	f8cd 244c 	str.w	r2, [sp, #1100]	; 0x44c
   1320e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   13210:	f8cd 3450 	str.w	r3, [sp, #1104]	; 0x450
   13214:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
   13218:	f8cd c454 	str.w	ip, [sp, #1108]	; 0x454
   1321c:	f8dd e054 	ldr.w	lr, [sp, #84]	; 0x54
   13220:	f8cd e458 	str.w	lr, [sp, #1112]	; 0x458
   13224:	466c      	mov	r4, sp
   13226:	2503      	movs	r5, #3
   13228:	6025      	str	r5, [r4, #0]
   1322a:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   1322e:	f20d 4344 	addw	r3, sp, #1092	; 0x444
   13232:	991d      	ldr	r1, [sp, #116]	; 0x74
   13234:	462a      	mov	r2, r5
   13236:	f7f5 fc31 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1323a:	e7ff      	b.n	1323c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x880>
   1323c:	f640 20dc 	movw	r0, #2780	; 0xadc
   13240:	f2c0 0002 	movt	r0, #2
   13244:	f004 fbaf 	bl	179a6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13248:	9014      	str	r0, [sp, #80]	; 0x50
   1324a:	e7ff      	b.n	1324c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x890>
   1324c:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   13250:	9914      	ldr	r1, [sp, #80]	; 0x50
   13252:	f004 fbe5 	bl	17a20 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13256:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   13258:	f640 1068 	movw	r0, #2408	; 0x968
   1325c:	f2c0 0002 	movt	r0, #2
   13260:	6800      	ldr	r0, [r0, #0]
   13262:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
   13266:	f8cd 148c 	str.w	r1, [sp, #1164]	; 0x48c
   1326a:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
   1326e:	f8dd 048c 	ldr.w	r0, [sp, #1164]	; 0x48c
   13272:	f8cd 0590 	str.w	r0, [sp, #1424]	; 0x590
   13276:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   1327a:	f8cd 1594 	str.w	r1, [sp, #1428]	; 0x594
   1327e:	6802      	ldr	r2, [r0, #0]
   13280:	680b      	ldr	r3, [r1, #0]
   13282:	429a      	cmp	r2, r3
   13284:	9013      	str	r0, [sp, #76]	; 0x4c
   13286:	9112      	str	r1, [sp, #72]	; 0x48
   13288:	d125      	bne.n	132d6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x91a>
   1328a:	e7ff      	b.n	1328c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x8d0>
    
    //  Create a task to send SPI requests sequentially from the SPI Event Queue and Mbuf Queue
    os::task_init(                //  Create a new task and start it...
        unsafe { &mut SPI_TASK }, //  Task object will be saved here
        &init_strn!( "spi" ),     //  Name of task
   1328c:	f640 3008 	movw	r0, #2824	; 0xb08
   13290:	f2c0 0002 	movt	r0, #2
   13294:	6801      	ldr	r1, [r0, #0]
        Some( spi_task_func ),    //  Function to execute when task starts
   13296:	f243 4037 	movw	r0, #13367	; 0x3437
   1329a:	f2c0 0001 	movt	r0, #1
   1329e:	f8cd 04f4 	str.w	r0, [sp, #1268]	; 0x4f4
    os::task_init(                //  Create a new task and start it...
   132a2:	f8dd 24f4 	ldr.w	r2, [sp, #1268]	; 0x4f4
   132a6:	4668      	mov	r0, sp
   132a8:	f44f 7380 	mov.w	r3, #256	; 0x100
   132ac:	6103      	str	r3, [r0, #16]
   132ae:	60c3      	str	r3, [r0, #12]
   132b0:	f646 3304 	movw	r3, #27396	; 0x6b04
   132b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   132b8:	6083      	str	r3, [r0, #8]
   132ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   132be:	6043      	str	r3, [r0, #4]
   132c0:	230a      	movs	r3, #10
   132c2:	6003      	str	r3, [r0, #0]
   132c4:	f646 20b4 	movw	r0, #27316	; 0x6ab4
   132c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
   132cc:	2300      	movs	r3, #0
   132ce:	f7f5 fcdf 	bl	8c90 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>
   132d2:	9011      	str	r0, [sp, #68]	; 0x44
   132d4:	e088      	b.n	133e8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   132d6:	f640 10c0 	movw	r0, #2496	; 0x9c0
   132da:	f2c0 0002 	movt	r0, #2
   132de:	6801      	ldr	r1, [r0, #0]
   132e0:	9813      	ldr	r0, [sp, #76]	; 0x4c
   132e2:	f8cd 04d0 	str.w	r0, [sp, #1232]	; 0x4d0
   132e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   132e8:	f8cd 24d4 	str.w	r2, [sp, #1236]	; 0x4d4
   132ec:	f640 23d8 	movw	r3, #2776	; 0xad8
   132f0:	f2c0 0302 	movt	r3, #2
   132f4:	681b      	ldr	r3, [r3, #0]
   132f6:	f640 1ce0 	movw	ip, #2528	; 0x9e0
   132fa:	f2c0 0c02 	movt	ip, #2
   132fe:	f8dc c000 	ldr.w	ip, [ip]
   13302:	46ee      	mov	lr, sp
   13304:	2400      	movs	r4, #0
   13306:	f8ce 4000 	str.w	r4, [lr]
   1330a:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   1330e:	2201      	movs	r2, #1
   13310:	9110      	str	r1, [sp, #64]	; 0x40
   13312:	4619      	mov	r1, r3
   13314:	4663      	mov	r3, ip
   13316:	f7f5 fbc1 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1331a:	e7ff      	b.n	1331c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x960>
   1331c:	f50d 609a 	add.w	r0, sp, #1232	; 0x4d0
   13320:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
   13324:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
   13328:	f8cd 04c8 	str.w	r0, [sp, #1224]	; 0x4c8
   1332c:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   13330:	f8cd 04cc 	str.w	r0, [sp, #1228]	; 0x4cc
   13334:	f8dd 04c4 	ldr.w	r0, [sp, #1220]	; 0x4c4
   13338:	f8cd 0598 	str.w	r0, [sp, #1432]	; 0x598
   1333c:	f8dd 14c8 	ldr.w	r1, [sp, #1224]	; 0x4c8
   13340:	f8cd 159c 	str.w	r1, [sp, #1436]	; 0x59c
   13344:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
   13348:	f8cd 25a0 	str.w	r2, [sp, #1440]	; 0x5a0
   1334c:	f249 333f 	movw	r3, #37695	; 0x933f
   13350:	f2c0 0300 	movt	r3, #0
   13354:	910f      	str	r1, [sp, #60]	; 0x3c
   13356:	4619      	mov	r1, r3
   13358:	920e      	str	r2, [sp, #56]	; 0x38
   1335a:	f7f6 f828 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   1335e:	900d      	str	r0, [sp, #52]	; 0x34
   13360:	910c      	str	r1, [sp, #48]	; 0x30
   13362:	e7ff      	b.n	13364 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9a8>
   13364:	f249 313f 	movw	r1, #37695	; 0x933f
   13368:	f2c0 0100 	movt	r1, #0
   1336c:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1336e:	f7f6 f81e 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13372:	900b      	str	r0, [sp, #44]	; 0x2c
   13374:	910a      	str	r1, [sp, #40]	; 0x28
   13376:	e7ff      	b.n	13378 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9bc>
   13378:	f647 7183 	movw	r1, #32643	; 0x7f83
   1337c:	f2c0 0101 	movt	r1, #1
   13380:	980e      	ldr	r0, [sp, #56]	; 0x38
   13382:	f7f6 f829 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13386:	9009      	str	r0, [sp, #36]	; 0x24
   13388:	9108      	str	r1, [sp, #32]
   1338a:	e7ff      	b.n	1338c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9d0>
   1338c:	980d      	ldr	r0, [sp, #52]	; 0x34
   1338e:	f8cd 04ac 	str.w	r0, [sp, #1196]	; 0x4ac
   13392:	990c      	ldr	r1, [sp, #48]	; 0x30
   13394:	f8cd 14b0 	str.w	r1, [sp, #1200]	; 0x4b0
   13398:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1339a:	f8cd 24b4 	str.w	r2, [sp, #1204]	; 0x4b4
   1339e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   133a0:	f8cd 34b8 	str.w	r3, [sp, #1208]	; 0x4b8
   133a4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   133a8:	f8cd c4bc 	str.w	ip, [sp, #1212]	; 0x4bc
   133ac:	f8dd e020 	ldr.w	lr, [sp, #32]
   133b0:	f8cd e4c0 	str.w	lr, [sp, #1216]	; 0x4c0
   133b4:	466c      	mov	r4, sp
   133b6:	2503      	movs	r5, #3
   133b8:	6025      	str	r5, [r4, #0]
   133ba:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   133be:	f20d 43ac 	addw	r3, sp, #1196	; 0x4ac
   133c2:	9910      	ldr	r1, [sp, #64]	; 0x40
   133c4:	462a      	mov	r2, r5
   133c6:	f7f5 fb69 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   133ca:	e7ff      	b.n	133cc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa10>
   133cc:	f640 20ec 	movw	r0, #2796	; 0xaec
   133d0:	f2c0 0002 	movt	r0, #2
   133d4:	f004 fae7 	bl	179a6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   133d8:	9007      	str	r0, [sp, #28]
   133da:	e7ff      	b.n	133dc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa20>
   133dc:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   133e0:	9907      	ldr	r1, [sp, #28]
   133e2:	f004 fb1d 	bl	17a20 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   133e6:	defe      	udf	#254	; 0xfe
    os::task_init(                //  Create a new task and start it...
   133e8:	9811      	ldr	r0, [sp, #68]	; 0x44
   133ea:	f7f5 fbc5 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   133ee:	f8cd 04f0 	str.w	r0, [sp, #1264]	; 0x4f0
   133f2:	e7ff      	b.n	133f4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa38>
        NULL,  //  Argument to be passed to above function
        10,    //  Task priority: highest is 0, lowest is 255 (main task is 127)
        os::OS_WAIT_FOREVER as u32,     //  Don't do sanity / watchdog checking
        unsafe { &mut SPI_TASK_STACK }, //  Stack space for the task
        SPI_TASK_STACK_SIZE as u16      //  Size of the stack (in 4-byte units)
    ) ? ;                               //  `?` means check for error
   133f4:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   133f8:	1e41      	subs	r1, r0, #1
   133fa:	bf18      	it	ne
   133fc:	2101      	movne	r1, #1
   133fe:	2801      	cmp	r0, #1
   13400:	d001      	beq.n	13406 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa4a>
   13402:	e7ff      	b.n	13404 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa48>
   13404:	e005      	b.n	13412 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa56>
   13406:	2000      	movs	r0, #0
    Ok(())
   13408:	9069      	str	r0, [sp, #420]	; 0x1a4
   1340a:	2001      	movs	r0, #1
   1340c:	9069      	str	r0, [sp, #420]	; 0x1a4
}
   1340e:	e008      	b.n	13422 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>
    os::task_init(                //  Create a new task and start it...
   13410:	defe      	udf	#254	; 0xfe
    ) ? ;                               //  `?` means check for error
   13412:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   13416:	f8cd 05a4 	str.w	r0, [sp, #1444]	; 0x5a4
   1341a:	f7ff fa17 	bl	1284c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   1341e:	9006      	str	r0, [sp, #24]
   13420:	e003      	b.n	1342a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa6e>
}
   13422:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   13424:	f50d 6db5 	add.w	sp, sp, #1448	; 0x5a8
   13428:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;                               //  `?` means check for error
   1342a:	9806      	ldr	r0, [sp, #24]
   1342c:	f7f5 fb98 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   13430:	9069      	str	r0, [sp, #420]	; 0x1a4
   13432:	e7ff      	b.n	13434 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa78>
   13434:	e7f5      	b.n	13422 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>

00013436 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E>:

/// SPI Task Function.  Execute sequentially each SPI request posted to our Event Queue.  When there are no requests to process, block until one arrives.
extern "C" fn spi_task_func(_arg: Ptr) {
   13436:	b580      	push	{r7, lr}
   13438:	b082      	sub	sp, #8
   1343a:	9001      	str	r0, [sp, #4]
    loop {
   1343c:	e7ff      	b.n	1343e <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>
        //  Forever read SPI requests and execute them. Will call spi_event_callback().
        os::eventq_run(
   1343e:	f646 20a4 	movw	r0, #27300	; 0x6aa4
   13442:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13446:	f7f5 fc0a 	bl	8c5e <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
   1344a:	9000      	str	r0, [sp, #0]
   1344c:	e7ff      	b.n	1344e <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x18>
   1344e:	f640 310c 	movw	r1, #2828	; 0xb0c
   13452:	f2c0 0102 	movt	r1, #2
   13456:	f640 3318 	movw	r3, #2840	; 0xb18
   1345a:	f2c0 0302 	movt	r3, #2
   1345e:	220b      	movs	r2, #11
   13460:	9800      	ldr	r0, [sp, #0]
   13462:	f7f5 fb4a 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   13466:	e7ff      	b.n	13468 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x32>
            unsafe { &mut SPI_EVENT_QUEUE }
        ).expect("eventq fail");

        //  Tickle the watchdog so that the Watchdog Timer doesn't expire. Mynewt assumes the process is hung if we don't tickle the watchdog.
        unsafe { hal_watchdog_tickle() };
   13468:	f007 f9e2 	bl	1a830 <hal_watchdog_tickle>
   1346c:	e7ff      	b.n	1346e <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x38>
    loop {
   1346e:	e7e6      	b.n	1343e <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>

00013470 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>:
    }
}

/// Set pending request for non-blocking SPI write for Command Byte. Returns without waiting for write to complete.
pub fn spi_noblock_write_command(cmd: u8) -> MynewtResult<()> {
   13470:	b580      	push	{r7, lr}
   13472:	b08c      	sub	sp, #48	; 0x30
   13474:	4601      	mov	r1, r0
   13476:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    //  If there is a pending Command Byte, enqueue it.
    spi_noblock_write_flush() ? ;
   1347a:	9104      	str	r1, [sp, #16]
   1347c:	f000 f8d4 	bl	13628 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   13480:	9003      	str	r0, [sp, #12]
   13482:	e7ff      	b.n	13484 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x14>
   13484:	9803      	ldr	r0, [sp, #12]
   13486:	f7f5 fb77 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   1348a:	9006      	str	r0, [sp, #24]
   1348c:	e7ff      	b.n	1348e <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x1e>
   1348e:	9806      	ldr	r0, [sp, #24]
   13490:	1e41      	subs	r1, r0, #1
   13492:	bf18      	it	ne
   13494:	2101      	movne	r1, #1
   13496:	2801      	cmp	r0, #1
   13498:	d001      	beq.n	1349e <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2e>
   1349a:	e7ff      	b.n	1349c <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2c>
   1349c:	e00c      	b.n	134b8 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x48>
    //  Set the pending Command Byte.
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   1349e:	f644 2070 	movw	r0, #19056	; 0x4a70
   134a2:	f2c2 0000 	movt	r0, #8192	; 0x2000
   134a6:	9904      	ldr	r1, [sp, #16]
   134a8:	f7ff f9a4 	bl	127f4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>
   134ac:	f88d 101d 	strb.w	r1, [sp, #29]
   134b0:	f88d 001c 	strb.w	r0, [sp, #28]
   134b4:	e00f      	b.n	134d6 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x66>
    spi_noblock_write_flush() ? ;
   134b6:	defe      	udf	#254	; 0xfe
   134b8:	9806      	ldr	r0, [sp, #24]
   134ba:	900b      	str	r0, [sp, #44]	; 0x2c
   134bc:	f7ff f9c6 	bl	1284c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   134c0:	9002      	str	r0, [sp, #8]
   134c2:	e002      	b.n	134ca <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x5a>
        return Err(MynewtError::SYS_EINVAL);
    }
    Ok(())
}
   134c4:	9805      	ldr	r0, [sp, #20]
   134c6:	b00c      	add	sp, #48	; 0x30
   134c8:	bd80      	pop	{r7, pc}
    spi_noblock_write_flush() ? ;
   134ca:	9802      	ldr	r0, [sp, #8]
   134cc:	f7f5 fb48 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   134d0:	9005      	str	r0, [sp, #20]
   134d2:	e7ff      	b.n	134d4 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x64>
   134d4:	e7f6      	b.n	134c4 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   134d6:	a807      	add	r0, sp, #28
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   134d8:	f7f5 fb36 	bl	8b48 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>
   134dc:	9001      	str	r0, [sp, #4]
   134de:	e7ff      	b.n	134e0 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x70>
   134e0:	9801      	ldr	r0, [sp, #4]
   134e2:	07c1      	lsls	r1, r0, #31
   134e4:	2900      	cmp	r1, #0
   134e6:	d105      	bne.n	134f4 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x84>
   134e8:	e7ff      	b.n	134ea <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x7a>
   134ea:	2000      	movs	r0, #0
    Ok(())
   134ec:	9005      	str	r0, [sp, #20]
   134ee:	2001      	movs	r0, #1
   134f0:	9005      	str	r0, [sp, #20]
}
   134f2:	e7e7      	b.n	134c4 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   134f4:	f06f 0001 	mvn.w	r0, #1
        return Err(MynewtError::SYS_EINVAL);
   134f8:	9008      	str	r0, [sp, #32]
   134fa:	9808      	ldr	r0, [sp, #32]
   134fc:	9005      	str	r0, [sp, #20]
   134fe:	e7e1      	b.n	134c4 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>

00013500 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>:

/// Set pending request for non-blocking SPI write for Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_data(data: &[u8]) -> MynewtResult<()> {
   13500:	b580      	push	{r7, lr}
   13502:	b094      	sub	sp, #80	; 0x50
   13504:	9010      	str	r0, [sp, #64]	; 0x40
   13506:	9111      	str	r1, [sp, #68]	; 0x44
    assert!(unsafe { PENDING_CMD.len() } > 0, "no cmd byte");  //  Must have Command Byte before Data Bytes
   13508:	f644 2270 	movw	r2, #19056	; 0x4a70
   1350c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13510:	900d      	str	r0, [sp, #52]	; 0x34
   13512:	4610      	mov	r0, r2
   13514:	910c      	str	r1, [sp, #48]	; 0x30
   13516:	f7ff f953 	bl	127c0 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   1351a:	900b      	str	r0, [sp, #44]	; 0x2c
   1351c:	910a      	str	r1, [sp, #40]	; 0x28
   1351e:	e7ff      	b.n	13520 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x20>
   13520:	980b      	ldr	r0, [sp, #44]	; 0x2c
   13522:	990a      	ldr	r1, [sp, #40]	; 0x28
   13524:	f7fe fd07 	bl	11f36 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   13528:	9009      	str	r0, [sp, #36]	; 0x24
   1352a:	e7ff      	b.n	1352c <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x2c>
   1352c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1352e:	2800      	cmp	r0, #0
   13530:	d009      	beq.n	13546 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x46>
   13532:	e7ff      	b.n	13534 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x34>
    //  if unsafe { PENDING_DATA.len() + data.len() > PENDING_DATA.capacity() } { cortex_m::asm::bkpt(); } ////
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   13534:	f644 2078 	movw	r0, #19064	; 0x4a78
   13538:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1353c:	f7ff f934 	bl	127a8 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>
   13540:	9008      	str	r0, [sp, #32]
   13542:	9107      	str	r1, [sp, #28]
   13544:	e00b      	b.n	1355e <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x5e>
    assert!(unsafe { PENDING_CMD.len() } > 0, "no cmd byte");  //  Must have Command Byte before Data Bytes
   13546:	f640 3028 	movw	r0, #2856	; 0xb28
   1354a:	f2c0 0002 	movt	r0, #2
   1354e:	f640 3234 	movw	r2, #2868	; 0xb34
   13552:	f2c0 0202 	movt	r2, #2
   13556:	210b      	movs	r1, #11
   13558:	f004 fa2c 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1355c:	defe      	udf	#254	; 0xfe
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   1355e:	9808      	ldr	r0, [sp, #32]
   13560:	9907      	ldr	r1, [sp, #28]
   13562:	f7fe fce8 	bl	11f36 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   13566:	9006      	str	r0, [sp, #24]
   13568:	e7ff      	b.n	1356a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x6a>
   1356a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1356c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1356e:	f7fe fce2 	bl	11f36 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   13572:	9005      	str	r0, [sp, #20]
   13574:	e7ff      	b.n	13576 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x76>
   13576:	9806      	ldr	r0, [sp, #24]
   13578:	9905      	ldr	r1, [sp, #20]
   1357a:	1842      	adds	r2, r0, r1
   1357c:	4613      	mov	r3, r2
   1357e:	4282      	cmp	r2, r0
   13580:	9304      	str	r3, [sp, #16]
   13582:	d345      	bcc.n	13610 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x110>
   13584:	e7ff      	b.n	13586 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x86>
   13586:	f644 2078 	movw	r0, #19064	; 0x4a78
   1358a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1358e:	f7ff f953 	bl	12838 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E>
   13592:	9003      	str	r0, [sp, #12]
   13594:	e7ff      	b.n	13596 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x96>
   13596:	9804      	ldr	r0, [sp, #16]
   13598:	9903      	ldr	r1, [sp, #12]
   1359a:	4288      	cmp	r0, r1
   1359c:	d80a      	bhi.n	135b4 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xb4>
   1359e:	e7ff      	b.n	135a0 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xa0>
    //  Append Data Bytes to Pending Data Bytes.
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   135a0:	f644 2078 	movw	r0, #19064	; 0x4a78
   135a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
   135a8:	990d      	ldr	r1, [sp, #52]	; 0x34
   135aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   135ac:	f7ff f914 	bl	127d8 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E>
   135b0:	9002      	str	r0, [sp, #8]
   135b2:	e00b      	b.n	135cc <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xcc>
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   135b4:	f640 307c 	movw	r0, #2940	; 0xb7c
   135b8:	f2c0 0002 	movt	r0, #2
   135bc:	f640 3288 	movw	r2, #2952	; 0xb88
   135c0:	f2c0 0202 	movt	r2, #2
   135c4:	210c      	movs	r1, #12
   135c6:	f004 f9f5 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   135ca:	defe      	udf	#254	; 0xfe
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   135cc:	9802      	ldr	r0, [sp, #8]
   135ce:	f000 0001 	and.w	r0, r0, #1
   135d2:	f7f5 facb 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   135d6:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
   135da:	e7ff      	b.n	135dc <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xdc>
   135dc:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
   135e0:	07c1      	lsls	r1, r0, #31
   135e2:	2900      	cmp	r1, #0
   135e4:	d001      	beq.n	135ea <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xea>
   135e6:	e7ff      	b.n	135e8 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xe8>
   135e8:	e005      	b.n	135f6 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xf6>
   135ea:	2000      	movs	r0, #0
    Ok(())
   135ec:	900e      	str	r0, [sp, #56]	; 0x38
   135ee:	2001      	movs	r0, #1
   135f0:	900e      	str	r0, [sp, #56]	; 0x38
}
   135f2:	e004      	b.n	135fe <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xfe>
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   135f4:	defe      	udf	#254	; 0xfe
   135f6:	f7f5 fa46 	bl	8a86 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
   135fa:	9001      	str	r0, [sp, #4]
   135fc:	e002      	b.n	13604 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x104>
}
   135fe:	980e      	ldr	r0, [sp, #56]	; 0x38
   13600:	b014      	add	sp, #80	; 0x50
   13602:	bd80      	pop	{r7, pc}
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   13604:	9801      	ldr	r0, [sp, #4]
   13606:	f7f5 faab 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   1360a:	900e      	str	r0, [sp, #56]	; 0x38
   1360c:	e7ff      	b.n	1360e <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x10e>
   1360e:	e7f6      	b.n	135fe <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xfe>
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   13610:	f640 3060 	movw	r0, #2912	; 0xb60
   13614:	f2c0 0002 	movt	r0, #2
   13618:	f640 3244 	movw	r2, #2884	; 0xb44
   1361c:	f2c0 0202 	movt	r2, #2
   13620:	211c      	movs	r1, #28
   13622:	f004 f9c7 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13626:	defe      	udf	#254	; 0xfe

00013628 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>:

/// Enqueue any pending request for non-blocking SPI write for Command Byte and Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_flush() -> MynewtResult<()> {
   13628:	b580      	push	{r7, lr}
   1362a:	b090      	sub	sp, #64	; 0x40
    //  If no pending request, quit.
    if unsafe { PENDING_CMD.len() } == 0 &&
   1362c:	f644 2070 	movw	r0, #19056	; 0x4a70
   13630:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13634:	f7ff f8c4 	bl	127c0 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   13638:	900b      	str	r0, [sp, #44]	; 0x2c
   1363a:	910a      	str	r1, [sp, #40]	; 0x28
   1363c:	e016      	b.n	1366c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x44>
   1363e:	2001      	movs	r0, #1
   13640:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   13644:	e00c      	b.n	13660 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
   13646:	2000      	movs	r0, #0
   13648:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   1364c:	e008      	b.n	13660 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
        unsafe { PENDING_DATA.len() } == 0 {
   1364e:	f644 2078 	movw	r0, #19064	; 0x4a78
   13652:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13656:	f7ff f8a7 	bl	127a8 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>
   1365a:	9009      	str	r0, [sp, #36]	; 0x24
   1365c:	9108      	str	r1, [sp, #32]
   1365e:	e00f      	b.n	13680 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x58>
    if unsafe { PENDING_CMD.len() } == 0 &&
   13660:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   13664:	07c0      	lsls	r0, r0, #31
   13666:	2800      	cmp	r0, #0
   13668:	d11d      	bne.n	136a6 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x7e>
   1366a:	e013      	b.n	13694 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x6c>
   1366c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1366e:	990a      	ldr	r1, [sp, #40]	; 0x28
   13670:	f7fe fc61 	bl	11f36 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   13674:	9007      	str	r0, [sp, #28]
   13676:	e7ff      	b.n	13678 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x50>
   13678:	9807      	ldr	r0, [sp, #28]
   1367a:	2800      	cmp	r0, #0
   1367c:	d0e7      	beq.n	1364e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x26>
   1367e:	e7e2      	b.n	13646 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        unsafe { PENDING_DATA.len() } == 0 {
   13680:	9809      	ldr	r0, [sp, #36]	; 0x24
   13682:	9908      	ldr	r1, [sp, #32]
   13684:	f7fe fc57 	bl	11f36 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   13688:	9006      	str	r0, [sp, #24]
   1368a:	e7ff      	b.n	1368c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x64>
    if unsafe { PENDING_CMD.len() } == 0 &&
   1368c:	9806      	ldr	r0, [sp, #24]
   1368e:	2800      	cmp	r0, #0
   13690:	d0d5      	beq.n	1363e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x16>
   13692:	e7d8      	b.n	13646 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        return Ok(());
    }
    //  Enqueue the pending SPI request into the Mbuf Queue
    if let Err(e) = spi_noblock_write(
        unsafe { PENDING_CMD[0] },  //  Command Byte
   13694:	f644 2070 	movw	r0, #19056	; 0x4a70
   13698:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1369c:	f7ff f890 	bl	127c0 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   136a0:	9005      	str	r0, [sp, #20]
   136a2:	9104      	str	r1, [sp, #16]
   136a4:	e007      	b.n	136b6 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x8e>
   136a6:	2000      	movs	r0, #0
        return Ok(());
   136a8:	900c      	str	r0, [sp, #48]	; 0x30
   136aa:	2001      	movs	r0, #1
   136ac:	900c      	str	r0, [sp, #48]	; 0x30
   136ae:	e7ff      	b.n	136b0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    }
    //  Else clear the pending request and return Ok.
    unsafe { PENDING_CMD.clear() };
    unsafe { PENDING_DATA.clear() };
    Ok(())
}
   136b0:	980c      	ldr	r0, [sp, #48]	; 0x30
   136b2:	b010      	add	sp, #64	; 0x40
   136b4:	bd80      	pop	{r7, pc}
        unsafe { PENDING_CMD[0] },  //  Command Byte
   136b6:	9804      	ldr	r0, [sp, #16]
   136b8:	2800      	cmp	r0, #0
   136ba:	d03f      	beq.n	1373c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x114>
   136bc:	e7ff      	b.n	136be <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x96>
   136be:	9805      	ldr	r0, [sp, #20]
   136c0:	7801      	ldrb	r1, [r0, #0]
        unsafe { &PENDING_DATA }    //  Data Bytes
   136c2:	f644 2078 	movw	r0, #19064	; 0x4a78
   136c6:	f2c2 0000 	movt	r0, #8192	; 0x2000
   136ca:	9103      	str	r1, [sp, #12]
   136cc:	f7ff f86c 	bl	127a8 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>
   136d0:	9002      	str	r0, [sp, #8]
   136d2:	9101      	str	r1, [sp, #4]
   136d4:	e7ff      	b.n	136d6 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xae>
    if let Err(e) = spi_noblock_write(
   136d6:	9803      	ldr	r0, [sp, #12]
   136d8:	9902      	ldr	r1, [sp, #8]
   136da:	9a01      	ldr	r2, [sp, #4]
   136dc:	f000 f837 	bl	1374e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>
   136e0:	900e      	str	r0, [sp, #56]	; 0x38
   136e2:	e7ff      	b.n	136e4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xbc>
   136e4:	980e      	ldr	r0, [sp, #56]	; 0x38
   136e6:	2801      	cmp	r0, #1
   136e8:	d107      	bne.n	136fa <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xd2>
   136ea:	e7ff      	b.n	136ec <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xc4>
    unsafe { PENDING_CMD.clear() };
   136ec:	f644 2070 	movw	r0, #19056	; 0x4a70
   136f0:	f2c2 0000 	movt	r0, #8192	; 0x2000
   136f4:	f7ff f890 	bl	12818 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   136f8:	e014      	b.n	13724 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xfc>
    if let Err(e) = spi_noblock_write(
   136fa:	980e      	ldr	r0, [sp, #56]	; 0x38
   136fc:	900f      	str	r0, [sp, #60]	; 0x3c
        unsafe { PENDING_CMD.clear() };
   136fe:	f644 2170 	movw	r1, #19056	; 0x4a70
   13702:	f2c2 0100 	movt	r1, #8192	; 0x2000
   13706:	9000      	str	r0, [sp, #0]
   13708:	4608      	mov	r0, r1
   1370a:	f7ff f885 	bl	12818 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   1370e:	e7ff      	b.n	13710 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xe8>
        unsafe { PENDING_DATA.clear() };    
   13710:	f644 2078 	movw	r0, #19064	; 0x4a78
   13714:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13718:	f7ff f886 	bl	12828 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E>
   1371c:	e7ff      	b.n	1371e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xf6>
        return Err(e);
   1371e:	9800      	ldr	r0, [sp, #0]
   13720:	900c      	str	r0, [sp, #48]	; 0x30
   13722:	e7c5      	b.n	136b0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    unsafe { PENDING_DATA.clear() };
   13724:	f644 2078 	movw	r0, #19064	; 0x4a78
   13728:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1372c:	f7ff f87c 	bl	12828 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E>
   13730:	e7ff      	b.n	13732 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x10a>
   13732:	2000      	movs	r0, #0
    Ok(())
   13734:	900c      	str	r0, [sp, #48]	; 0x30
   13736:	2001      	movs	r0, #1
   13738:	900c      	str	r0, [sp, #48]	; 0x30
}
   1373a:	e7b9      	b.n	136b0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
        unsafe { PENDING_CMD[0] },  //  Command Byte
   1373c:	f640 3098 	movw	r0, #2968	; 0xb98
   13740:	f2c0 0002 	movt	r0, #2
   13744:	2100      	movs	r1, #0
   13746:	9a04      	ldr	r2, [sp, #16]
   13748:	f004 f94a 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1374c:	defe      	udf	#254	; 0xfe

0001374e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>:

/// Enqueue request for non-blocking SPI write. Returns without waiting for write to complete.
/// Request must have a Command Byte, followed by optional Data Bytes.
fn spi_noblock_write(cmd: u8, data: &[u8]) -> MynewtResult<()> {
   1374e:	b580      	push	{r7, lr}
   13750:	b0a0      	sub	sp, #128	; 0x80
   13752:	4603      	mov	r3, r0
   13754:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   13758:	9116      	str	r1, [sp, #88]	; 0x58
   1375a:	9217      	str	r2, [sp, #92]	; 0x5c
   1375c:	f247 5030 	movw	r0, #30000	; 0x7530
    console::print("spi data "); ////
    console::dump(data.as_ptr(), data.len() as u32); console::print("\n"); ////
    console::flush(); */

    //  Throttle the number of queued SPI requests.
    let timeout = 30_000;
   13760:	9018      	str	r0, [sp, #96]	; 0x60
   13762:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   13766:	fba0 0c0c 	umull	r0, ip, r0, ip
   1376a:	f1bc 0f00 	cmp.w	ip, #0
   1376e:	920f      	str	r2, [sp, #60]	; 0x3c
   13770:	910e      	str	r1, [sp, #56]	; 0x38
   13772:	900d      	str	r0, [sp, #52]	; 0x34
   13774:	f040 80c8 	bne.w	13908 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ba>
   13778:	e7ff      	b.n	1377a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x2c>
   1377a:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   1377e:	f2c1 0062 	movt	r0, #4194	; 0x1062
   13782:	990d      	ldr	r1, [sp, #52]	; 0x34
   13784:	fba1 0200 	umull	r0, r2, r1, r0
   13788:	0991      	lsrs	r1, r2, #6
   1378a:	f646 2284 	movw	r2, #27268	; 0x6a84
   1378e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13792:	900c      	str	r0, [sp, #48]	; 0x30
   13794:	4610      	mov	r0, r2
   13796:	f008 f94b 	bl	1ba30 <os_sem_pend>
   1379a:	e7ff      	b.n	1379c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x4e>

    //  Allocate a new mbuf chain to copy the data to be sent.
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   1379c:	980e      	ldr	r0, [sp, #56]	; 0x38
   1379e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   137a0:	f7fe fbc9 	bl	11f36 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   137a4:	900b      	str	r0, [sp, #44]	; 0x2c
   137a6:	e7ff      	b.n	137a8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x5a>
   137a8:	2001      	movs	r0, #1
   137aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
   137ac:	fa10 f081 	uxtah	r0, r0, r1
   137b0:	b282      	uxth	r2, r0
   137b2:	4603      	mov	r3, r0
   137b4:	4282      	cmp	r2, r0
   137b6:	930a      	str	r3, [sp, #40]	; 0x28
   137b8:	f040 80b2 	bne.w	13920 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1d2>
   137bc:	e7ff      	b.n	137be <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x70>
   137be:	980a      	ldr	r0, [sp, #40]	; 0x28
   137c0:	f8ad 0066 	strh.w	r0, [sp, #102]	; 0x66
    let mbuf = unsafe { os::os_msys_get_pkthdr(len, 0) };
   137c4:	b280      	uxth	r0, r0
   137c6:	2100      	movs	r1, #0
   137c8:	f007 fe40 	bl	1b44c <os_msys_get_pkthdr>
   137cc:	4601      	mov	r1, r0
   137ce:	901a      	str	r0, [sp, #104]	; 0x68
   137d0:	9109      	str	r1, [sp, #36]	; 0x24
   137d2:	e7ff      	b.n	137d4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x86>
    if mbuf.is_null() {  //  If out of memory, quit.
   137d4:	9809      	ldr	r0, [sp, #36]	; 0x24
   137d6:	f000 ff17 	bl	14608 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   137da:	9008      	str	r0, [sp, #32]
   137dc:	e7ff      	b.n	137de <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x90>
   137de:	9808      	ldr	r0, [sp, #32]
   137e0:	07c1      	lsls	r1, r0, #31
   137e2:	2900      	cmp	r1, #0
   137e4:	d106      	bne.n	137f4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xa6>
   137e6:	e7ff      	b.n	137e8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x9a>
   137e8:	f10d 0043 	add.w	r0, sp, #67	; 0x43
    }

    //  Append the Command Byte to the mbuf chain.
    let rc = unsafe { os::os_mbuf_append(
        mbuf, 
        core::mem::transmute(&cmd), 
   137ec:	901b      	str	r0, [sp, #108]	; 0x6c
   137ee:	991b      	ldr	r1, [sp, #108]	; 0x6c
   137f0:	9107      	str	r1, [sp, #28]
   137f2:	e010      	b.n	13816 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc8>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   137f4:	f646 2084 	movw	r0, #27268	; 0x6a84
   137f8:	f2c2 0000 	movt	r0, #8192	; 0x2000
   137fc:	f008 f8e6 	bl	1b9cc <os_sem_release>
   13800:	e7ff      	b.n	13802 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xb4>
   13802:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   13806:	9012      	str	r0, [sp, #72]	; 0x48
   13808:	9812      	ldr	r0, [sp, #72]	; 0x48
   1380a:	9011      	str	r0, [sp, #68]	; 0x44
   1380c:	e002      	b.n	13814 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
        return Err(MynewtError::SYS_EUNKNOWN); 
    }
    Ok(())
}
   1380e:	9811      	ldr	r0, [sp, #68]	; 0x44
   13810:	b020      	add	sp, #128	; 0x80
   13812:	bd80      	pop	{r7, pc}
        return Err(MynewtError::SYS_ENOMEM); 
   13814:	e7fb      	b.n	1380e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
   13816:	2201      	movs	r2, #1
    let rc = unsafe { os::os_mbuf_append(
   13818:	9809      	ldr	r0, [sp, #36]	; 0x24
   1381a:	9907      	ldr	r1, [sp, #28]
   1381c:	f007 fc6e 	bl	1b0fc <os_mbuf_append>
   13820:	4601      	mov	r1, r0
   13822:	901c      	str	r0, [sp, #112]	; 0x70
   13824:	9106      	str	r1, [sp, #24]
   13826:	e7ff      	b.n	13828 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xda>
    if rc != 0 {  //  If out of memory, quit.
   13828:	9806      	ldr	r0, [sp, #24]
   1382a:	2800      	cmp	r0, #0
   1382c:	d106      	bne.n	1383c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xee>
   1382e:	e7ff      	b.n	13830 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xe2>
        core::mem::transmute(data.as_ptr()), 
   13830:	980e      	ldr	r0, [sp, #56]	; 0x38
   13832:	990f      	ldr	r1, [sp, #60]	; 0x3c
   13834:	f7fe fb87 	bl	11f46 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
   13838:	9005      	str	r0, [sp, #20]
   1383a:	e011      	b.n	13860 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x112>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   1383c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1383e:	f007 fc41 	bl	1b0c4 <os_mbuf_free_chain>
   13842:	e7ff      	b.n	13844 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xf6>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   13844:	f646 2084 	movw	r0, #27268	; 0x6a84
   13848:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1384c:	f008 f8be 	bl	1b9cc <os_sem_release>
   13850:	e7ff      	b.n	13852 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x104>
   13852:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   13856:	9013      	str	r0, [sp, #76]	; 0x4c
   13858:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1385a:	9011      	str	r0, [sp, #68]	; 0x44
   1385c:	e7ff      	b.n	1385e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
   1385e:	e7d9      	b.n	13814 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        core::mem::transmute(data.as_ptr()), 
   13860:	9805      	ldr	r0, [sp, #20]
   13862:	901d      	str	r0, [sp, #116]	; 0x74
   13864:	991d      	ldr	r1, [sp, #116]	; 0x74
   13866:	9104      	str	r1, [sp, #16]
   13868:	e7ff      	b.n	1386a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x11c>
        data.len() as u16
   1386a:	980e      	ldr	r0, [sp, #56]	; 0x38
   1386c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1386e:	f7fe fb62 	bl	11f36 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   13872:	9003      	str	r0, [sp, #12]
   13874:	e7ff      	b.n	13876 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x128>
    let rc = unsafe { os::os_mbuf_append(
   13876:	9803      	ldr	r0, [sp, #12]
   13878:	b282      	uxth	r2, r0
   1387a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1387c:	9904      	ldr	r1, [sp, #16]
   1387e:	f007 fc3d 	bl	1b0fc <os_mbuf_append>
   13882:	4601      	mov	r1, r0
   13884:	901e      	str	r0, [sp, #120]	; 0x78
   13886:	9102      	str	r1, [sp, #8]
   13888:	e7ff      	b.n	1388a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x13c>
    if rc != 0 {  //  If out of memory, quit.
   1388a:	9802      	ldr	r0, [sp, #8]
   1388c:	2800      	cmp	r0, #0
   1388e:	d10f      	bne.n	138b0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x162>
   13890:	e7ff      	b.n	13892 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x144>
    let rc = unsafe { os::os_mqueue_put(
   13892:	f646 208c 	movw	r0, #27276	; 0x6a8c
   13896:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1389a:	f646 21a4 	movw	r1, #27300	; 0x6aa4
   1389e:	f2c2 0100 	movt	r1, #8192	; 0x2000
   138a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   138a4:	f007 fbac 	bl	1b000 <os_mqueue_put>
   138a8:	4601      	mov	r1, r0
   138aa:	901f      	str	r0, [sp, #124]	; 0x7c
   138ac:	9101      	str	r1, [sp, #4]
   138ae:	e011      	b.n	138d4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x186>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   138b0:	9809      	ldr	r0, [sp, #36]	; 0x24
   138b2:	f007 fc07 	bl	1b0c4 <os_mbuf_free_chain>
   138b6:	e7ff      	b.n	138b8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x16a>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   138b8:	f646 2084 	movw	r0, #27268	; 0x6a84
   138bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
   138c0:	f008 f884 	bl	1b9cc <os_sem_release>
   138c4:	e7ff      	b.n	138c6 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x178>
   138c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   138ca:	9014      	str	r0, [sp, #80]	; 0x50
   138cc:	9814      	ldr	r0, [sp, #80]	; 0x50
   138ce:	9011      	str	r0, [sp, #68]	; 0x44
   138d0:	e7ff      	b.n	138d2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
   138d2:	e7c4      	b.n	1385e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
    if rc != 0 {  //  If out of memory, quit.
   138d4:	9801      	ldr	r0, [sp, #4]
   138d6:	2800      	cmp	r0, #0
   138d8:	d105      	bne.n	138e6 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x198>
   138da:	e7ff      	b.n	138dc <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x18e>
   138dc:	2000      	movs	r0, #0
    Ok(())
   138de:	9011      	str	r0, [sp, #68]	; 0x44
   138e0:	2001      	movs	r0, #1
   138e2:	9011      	str	r0, [sp, #68]	; 0x44
}
   138e4:	e793      	b.n	1380e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   138e6:	9809      	ldr	r0, [sp, #36]	; 0x24
   138e8:	f007 fbec 	bl	1b0c4 <os_mbuf_free_chain>
   138ec:	e7ff      	b.n	138ee <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1a0>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   138ee:	f646 2084 	movw	r0, #27268	; 0x6a84
   138f2:	f2c2 0000 	movt	r0, #8192	; 0x2000
   138f6:	f008 f869 	bl	1b9cc <os_sem_release>
   138fa:	e7ff      	b.n	138fc <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ae>
   138fc:	f06f 000c 	mvn.w	r0, #12
        return Err(MynewtError::SYS_EUNKNOWN); 
   13900:	9015      	str	r0, [sp, #84]	; 0x54
   13902:	9815      	ldr	r0, [sp, #84]	; 0x54
   13904:	9011      	str	r0, [sp, #68]	; 0x44
   13906:	e7e4      	b.n	138d2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   13908:	f640 30c0 	movw	r0, #3008	; 0xbc0
   1390c:	f2c0 0002 	movt	r0, #2
   13910:	f640 32a8 	movw	r2, #2984	; 0xba8
   13914:	f2c0 0202 	movt	r2, #2
   13918:	2121      	movs	r1, #33	; 0x21
   1391a:	f004 f84b 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1391e:	defe      	udf	#254	; 0xfe
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   13920:	f640 3060 	movw	r0, #2912	; 0xb60
   13924:	f2c0 0002 	movt	r0, #2
   13928:	f640 32e4 	movw	r2, #3044	; 0xbe4
   1392c:	f2c0 0202 	movt	r2, #2
   13930:	211c      	movs	r1, #28
   13932:	f004 f83f 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13936:	defe      	udf	#254	; 0xfe

00013938 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E>:

/// Callback for the event that is triggered when an SPI request is added to the queue.
extern "C" fn spi_event_callback(_event: *mut os::os_event) {    
   13938:	b5b0      	push	{r4, r5, r7, lr}
   1393a:	b0c4      	sub	sp, #272	; 0x110
   1393c:	9038      	str	r0, [sp, #224]	; 0xe0
   1393e:	e7ff      	b.n	13940 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
    loop {  //  For each mbuf chain found...
        //  Get the next SPI request, stored as an mbuf chain.
        let om = unsafe { os::os_mqueue_get(&mut SPI_DATA_QUEUE) };
   13940:	f646 208c 	movw	r0, #27276	; 0x6a8c
   13944:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13948:	f007 fb47 	bl	1afda <os_mqueue_get>
   1394c:	4601      	mov	r1, r0
   1394e:	9039      	str	r0, [sp, #228]	; 0xe4
   13950:	911b      	str	r1, [sp, #108]	; 0x6c
   13952:	e7ff      	b.n	13954 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c>
        if om.is_null() { break; }
   13954:	981b      	ldr	r0, [sp, #108]	; 0x6c
   13956:	f000 fe57 	bl	14608 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   1395a:	901a      	str	r0, [sp, #104]	; 0x68
   1395c:	e7ff      	b.n	1395e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26>
   1395e:	981a      	ldr	r0, [sp, #104]	; 0x68
   13960:	07c1      	lsls	r1, r0, #31
   13962:	2900      	cmp	r1, #0
   13964:	d106      	bne.n	13974 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x3c>
   13966:	e7ff      	b.n	13968 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x30>

        //  Send the mbuf chain.
        let mut m = om;
   13968:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1396a:	901c      	str	r0, [sp, #112]	; 0x70
   1396c:	2101      	movs	r1, #1
        let mut first_byte = true;
   1396e:	f88d 1075 	strb.w	r1, [sp, #117]	; 0x75
        while !m.is_null() {  //  For each mbuf in the chain...
   13972:	e001      	b.n	13978 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>

        //  Release the throttle semaphore to allow next request to be queued.
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
        assert_eq!(rc, 0, "sem fail");    
    }
}
   13974:	b044      	add	sp, #272	; 0x110
   13976:	bdb0      	pop	{r4, r5, r7, pc}
        while !m.is_null() {  //  For each mbuf in the chain...
   13978:	981c      	ldr	r0, [sp, #112]	; 0x70
   1397a:	f000 fe45 	bl	14608 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   1397e:	9019      	str	r0, [sp, #100]	; 0x64
   13980:	e7ff      	b.n	13982 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x4a>
   13982:	9819      	ldr	r0, [sp, #100]	; 0x64
   13984:	07c1      	lsls	r1, r0, #31
   13986:	2900      	cmp	r1, #0
   13988:	d004      	beq.n	13994 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x5c>
   1398a:	e7ff      	b.n	1398c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x54>
        unsafe { os::os_mbuf_free_chain(om) };
   1398c:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1398e:	f007 fb99 	bl	1b0c4 <os_mbuf_free_chain>
   13992:	e0aa      	b.n	13aea <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1b2>
            let data = unsafe { (*m).om_data };  //  Fetch the data
   13994:	981c      	ldr	r0, [sp, #112]	; 0x70
   13996:	6800      	ldr	r0, [r0, #0]
   13998:	903a      	str	r0, [sp, #232]	; 0xe8
            let len = unsafe { (*m).om_len };    //  Fetch the length
   1399a:	991c      	ldr	r1, [sp, #112]	; 0x70
   1399c:	88c9      	ldrh	r1, [r1, #6]
   1399e:	460a      	mov	r2, r1
   139a0:	f8ad 10ee 	strh.w	r1, [sp, #238]	; 0xee
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   139a4:	f89d 1075 	ldrb.w	r1, [sp, #117]	; 0x75
   139a8:	07c9      	lsls	r1, r1, #31
   139aa:	2900      	cmp	r1, #0
   139ac:	9018      	str	r0, [sp, #96]	; 0x60
   139ae:	9217      	str	r2, [sp, #92]	; 0x5c
   139b0:	d105      	bne.n	139be <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x86>
   139b2:	e7ff      	b.n	139b4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x7c>
                    unsafe { core::mem::transmute(data) }, 
   139b4:	9818      	ldr	r0, [sp, #96]	; 0x60
   139b6:	903e      	str	r0, [sp, #248]	; 0xf8
   139b8:	983e      	ldr	r0, [sp, #248]	; 0xf8
   139ba:	9016      	str	r0, [sp, #88]	; 0x58
   139bc:	e07b      	b.n	13ab6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17e>
   139be:	2000      	movs	r0, #0
                first_byte = false;
   139c0:	f88d 0075 	strb.w	r0, [sp, #117]	; 0x75
                    unsafe { core::mem::transmute(data) }, 
   139c4:	9818      	ldr	r0, [sp, #96]	; 0x60
   139c6:	903c      	str	r0, [sp, #240]	; 0xf0
   139c8:	983c      	ldr	r0, [sp, #240]	; 0xf0
   139ca:	9015      	str	r0, [sp, #84]	; 0x54
   139cc:	e7ff      	b.n	139ce <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x96>
   139ce:	2001      	movs	r0, #1
                internal_spi_noblock_write(
   139d0:	9915      	ldr	r1, [sp, #84]	; 0x54
   139d2:	9014      	str	r0, [sp, #80]	; 0x50
   139d4:	4608      	mov	r0, r1
   139d6:	9914      	ldr	r1, [sp, #80]	; 0x50
   139d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   139da:	f000 f921 	bl	13c20 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   139de:	9013      	str	r0, [sp, #76]	; 0x4c
   139e0:	e7ff      	b.n	139e2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xaa>
   139e2:	f640 31f4 	movw	r1, #3060	; 0xbf4
   139e6:	f2c0 0102 	movt	r1, #2
   139ea:	f640 4300 	movw	r3, #3072	; 0xc00
   139ee:	f2c0 0302 	movt	r3, #2
   139f2:	220c      	movs	r2, #12
   139f4:	9813      	ldr	r0, [sp, #76]	; 0x4c
   139f6:	f7f5 f880 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   139fa:	e7ff      	b.n	139fc <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xc4>
                if  unsafe { *data } == 0x01 || //  SWRESET
   139fc:	9818      	ldr	r0, [sp, #96]	; 0x60
   139fe:	7801      	ldrb	r1, [r0, #0]
   13a00:	2901      	cmp	r1, #1
   13a02:	d013      	beq.n	13a2c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   13a04:	e01a      	b.n	13a3c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x104>
   13a06:	2001      	movs	r0, #1
   13a08:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   13a0c:	e008      	b.n	13a20 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
   13a0e:	2000      	movs	r0, #0
   13a10:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   13a14:	e004      	b.n	13a20 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
                    unsafe { *data } == 0x29 {  //  DISPON
   13a16:	9818      	ldr	r0, [sp, #96]	; 0x60
   13a18:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   13a1a:	2929      	cmp	r1, #41	; 0x29
   13a1c:	d0f3      	beq.n	13a06 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   13a1e:	e7f6      	b.n	13a0e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xd6>
   13a20:	f89d 0076 	ldrb.w	r0, [sp, #118]	; 0x76
   13a24:	07c0      	lsls	r0, r0, #31
   13a26:	2800      	cmp	r0, #0
   13a28:	d113      	bne.n	13a52 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x11a>
   13a2a:	e017      	b.n	13a5c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   13a2c:	2001      	movs	r0, #1
   13a2e:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   13a32:	e008      	b.n	13a46 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
   13a34:	2000      	movs	r0, #0
   13a36:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   13a3a:	e004      	b.n	13a46 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
                    unsafe { *data } == 0x11 || //  SLPOUT
   13a3c:	9818      	ldr	r0, [sp, #96]	; 0x60
   13a3e:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   13a40:	2911      	cmp	r1, #17
   13a42:	d0f3      	beq.n	13a2c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   13a44:	e7f6      	b.n	13a34 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xfc>
   13a46:	f89d 0077 	ldrb.w	r0, [sp, #119]	; 0x77
   13a4a:	07c0      	lsls	r0, r0, #31
   13a4c:	2800      	cmp	r0, #0
   13a4e:	d1da      	bne.n	13a06 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   13a50:	e7e1      	b.n	13a16 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xde>
   13a52:	20c8      	movs	r0, #200	; 0xc8
                    delay_ms(200);
   13a54:	f000 fb13 	bl	1407e <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>
   13a58:	e7ff      	b.n	13a5a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x122>
                if  unsafe { *data } == 0x01 || //  SWRESET
   13a5a:	e7ff      	b.n	13a5c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   13a5c:	2101      	movs	r1, #1
                    unsafe { core::mem::transmute(data.add(1)) }, 
   13a5e:	9818      	ldr	r0, [sp, #96]	; 0x60
   13a60:	f7fe f9d9 	bl	11e16 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   13a64:	9012      	str	r0, [sp, #72]	; 0x48
   13a66:	e7ff      	b.n	13a68 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x130>
   13a68:	9812      	ldr	r0, [sp, #72]	; 0x48
   13a6a:	903d      	str	r0, [sp, #244]	; 0xf4
   13a6c:	983d      	ldr	r0, [sp, #244]	; 0xf4
   13a6e:	9011      	str	r0, [sp, #68]	; 0x44
   13a70:	e7ff      	b.n	13a72 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x13a>
   13a72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   13a76:	9917      	ldr	r1, [sp, #92]	; 0x5c
   13a78:	fa10 f081 	uxtah	r0, r0, r1
   13a7c:	b282      	uxth	r2, r0
   13a7e:	4603      	mov	r3, r0
   13a80:	4282      	cmp	r2, r0
   13a82:	9310      	str	r3, [sp, #64]	; 0x40
   13a84:	f040 80c0 	bne.w	13c08 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2d0>
   13a88:	e7ff      	b.n	13a8a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x152>
   13a8a:	9810      	ldr	r0, [sp, #64]	; 0x40
   13a8c:	b281      	uxth	r1, r0
   13a8e:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   13a90:	9811      	ldr	r0, [sp, #68]	; 0x44
   13a92:	f000 f8c5 	bl	13c20 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   13a96:	900f      	str	r0, [sp, #60]	; 0x3c
   13a98:	e7ff      	b.n	13a9a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x162>
   13a9a:	f640 31f4 	movw	r1, #3060	; 0xbf4
   13a9e:	f2c0 0102 	movt	r1, #2
   13aa2:	f640 4344 	movw	r3, #3140	; 0xc44
   13aa6:	f2c0 0302 	movt	r3, #2
   13aaa:	220c      	movs	r2, #12
   13aac:	980f      	ldr	r0, [sp, #60]	; 0x3c
   13aae:	f7f5 f824 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   13ab2:	e7ff      	b.n	13ab4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17c>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   13ab4:	e015      	b.n	13ae2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
                    len as i32,  //  Write all Data Bytes
   13ab6:	9817      	ldr	r0, [sp, #92]	; 0x5c
   13ab8:	b281      	uxth	r1, r0
   13aba:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   13abc:	9816      	ldr	r0, [sp, #88]	; 0x58
   13abe:	f000 f8af 	bl	13c20 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   13ac2:	900e      	str	r0, [sp, #56]	; 0x38
   13ac4:	e7ff      	b.n	13ac6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x18e>
   13ac6:	f640 31f4 	movw	r1, #3060	; 0xbf4
   13aca:	f2c0 0102 	movt	r1, #2
   13ace:	f640 4354 	movw	r3, #3156	; 0xc54
   13ad2:	f2c0 0302 	movt	r3, #2
   13ad6:	220c      	movs	r2, #12
   13ad8:	980e      	ldr	r0, [sp, #56]	; 0x38
   13ada:	f7f5 f80e 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   13ade:	e7ff      	b.n	13ae0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1a8>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   13ae0:	e7ff      	b.n	13ae2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
            m = unsafe { (*m).om_next.sle_next };  //  Fetch next mbuf in the chain.
   13ae2:	981c      	ldr	r0, [sp, #112]	; 0x70
   13ae4:	68c0      	ldr	r0, [r0, #12]
   13ae6:	901c      	str	r0, [sp, #112]	; 0x70
        while !m.is_null() {  //  For each mbuf in the chain...
   13ae8:	e746      	b.n	13978 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
   13aea:	f646 2084 	movw	r0, #27268	; 0x6a84
   13aee:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13af2:	f007 ff6b 	bl	1b9cc <os_sem_release>
   13af6:	901e      	str	r0, [sp, #120]	; 0x78
   13af8:	e7ff      	b.n	13afa <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c2>
        assert_eq!(rc, 0, "sem fail");    
   13afa:	f640 1068 	movw	r0, #2408	; 0x968
   13afe:	f2c0 0002 	movt	r0, #2
   13b02:	6800      	ldr	r0, [r0, #0]
   13b04:	a91e      	add	r1, sp, #120	; 0x78
   13b06:	911f      	str	r1, [sp, #124]	; 0x7c
   13b08:	9020      	str	r0, [sp, #128]	; 0x80
   13b0a:	981f      	ldr	r0, [sp, #124]	; 0x7c
   13b0c:	903f      	str	r0, [sp, #252]	; 0xfc
   13b0e:	9920      	ldr	r1, [sp, #128]	; 0x80
   13b10:	9140      	str	r1, [sp, #256]	; 0x100
   13b12:	6802      	ldr	r2, [r0, #0]
   13b14:	680b      	ldr	r3, [r1, #0]
   13b16:	429a      	cmp	r2, r3
   13b18:	900d      	str	r0, [sp, #52]	; 0x34
   13b1a:	910c      	str	r1, [sp, #48]	; 0x30
   13b1c:	d101      	bne.n	13b22 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1ea>
   13b1e:	e7ff      	b.n	13b20 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1e8>
    loop {  //  For each mbuf chain found...
   13b20:	e70e      	b.n	13940 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
        assert_eq!(rc, 0, "sem fail");    
   13b22:	f640 10c0 	movw	r0, #2496	; 0x9c0
   13b26:	f2c0 0002 	movt	r0, #2
   13b2a:	6801      	ldr	r1, [r0, #0]
   13b2c:	980d      	ldr	r0, [sp, #52]	; 0x34
   13b2e:	9030      	str	r0, [sp, #192]	; 0xc0
   13b30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13b32:	9231      	str	r2, [sp, #196]	; 0xc4
   13b34:	f640 23d8 	movw	r3, #2776	; 0xad8
   13b38:	f2c0 0302 	movt	r3, #2
   13b3c:	681b      	ldr	r3, [r3, #0]
   13b3e:	f640 1ce0 	movw	ip, #2528	; 0x9e0
   13b42:	f2c0 0c02 	movt	ip, #2
   13b46:	f8dc c000 	ldr.w	ip, [ip]
   13b4a:	46ee      	mov	lr, sp
   13b4c:	2400      	movs	r4, #0
   13b4e:	f8ce 4000 	str.w	r4, [lr]
   13b52:	a832      	add	r0, sp, #200	; 0xc8
   13b54:	2201      	movs	r2, #1
   13b56:	910b      	str	r1, [sp, #44]	; 0x2c
   13b58:	4619      	mov	r1, r3
   13b5a:	4663      	mov	r3, ip
   13b5c:	f7f4 ff9e 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13b60:	e7ff      	b.n	13b62 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x22a>
   13b62:	a830      	add	r0, sp, #192	; 0xc0
   13b64:	902d      	str	r0, [sp, #180]	; 0xb4
   13b66:	a831      	add	r0, sp, #196	; 0xc4
   13b68:	902e      	str	r0, [sp, #184]	; 0xb8
   13b6a:	a832      	add	r0, sp, #200	; 0xc8
   13b6c:	902f      	str	r0, [sp, #188]	; 0xbc
   13b6e:	982d      	ldr	r0, [sp, #180]	; 0xb4
   13b70:	9041      	str	r0, [sp, #260]	; 0x104
   13b72:	992e      	ldr	r1, [sp, #184]	; 0xb8
   13b74:	9142      	str	r1, [sp, #264]	; 0x108
   13b76:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
   13b78:	9243      	str	r2, [sp, #268]	; 0x10c
   13b7a:	f249 333f 	movw	r3, #37695	; 0x933f
   13b7e:	f2c0 0300 	movt	r3, #0
   13b82:	910a      	str	r1, [sp, #40]	; 0x28
   13b84:	4619      	mov	r1, r3
   13b86:	9209      	str	r2, [sp, #36]	; 0x24
   13b88:	f7f5 fc11 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13b8c:	9008      	str	r0, [sp, #32]
   13b8e:	9107      	str	r1, [sp, #28]
   13b90:	e7ff      	b.n	13b92 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x25a>
   13b92:	f249 313f 	movw	r1, #37695	; 0x933f
   13b96:	f2c0 0100 	movt	r1, #0
   13b9a:	980a      	ldr	r0, [sp, #40]	; 0x28
   13b9c:	f7f5 fc07 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13ba0:	9006      	str	r0, [sp, #24]
   13ba2:	9105      	str	r1, [sp, #20]
   13ba4:	e7ff      	b.n	13ba6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26e>
   13ba6:	f647 7183 	movw	r1, #32643	; 0x7f83
   13baa:	f2c0 0101 	movt	r1, #1
   13bae:	9809      	ldr	r0, [sp, #36]	; 0x24
   13bb0:	f7f5 fc12 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13bb4:	9004      	str	r0, [sp, #16]
   13bb6:	9103      	str	r1, [sp, #12]
   13bb8:	e7ff      	b.n	13bba <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x282>
   13bba:	9808      	ldr	r0, [sp, #32]
   13bbc:	9027      	str	r0, [sp, #156]	; 0x9c
   13bbe:	9907      	ldr	r1, [sp, #28]
   13bc0:	9128      	str	r1, [sp, #160]	; 0xa0
   13bc2:	9a06      	ldr	r2, [sp, #24]
   13bc4:	9229      	str	r2, [sp, #164]	; 0xa4
   13bc6:	9b05      	ldr	r3, [sp, #20]
   13bc8:	932a      	str	r3, [sp, #168]	; 0xa8
   13bca:	f8dd c010 	ldr.w	ip, [sp, #16]
   13bce:	f8cd c0ac 	str.w	ip, [sp, #172]	; 0xac
   13bd2:	f8dd e00c 	ldr.w	lr, [sp, #12]
   13bd6:	f8cd e0b0 	str.w	lr, [sp, #176]	; 0xb0
   13bda:	466c      	mov	r4, sp
   13bdc:	2503      	movs	r5, #3
   13bde:	6025      	str	r5, [r4, #0]
   13be0:	a821      	add	r0, sp, #132	; 0x84
   13be2:	ab27      	add	r3, sp, #156	; 0x9c
   13be4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13be6:	462a      	mov	r2, r5
   13be8:	f7f4 ff58 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13bec:	e7ff      	b.n	13bee <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2b6>
   13bee:	f640 4064 	movw	r0, #3172	; 0xc64
   13bf2:	f2c0 0002 	movt	r0, #2
   13bf6:	f003 fed6 	bl	179a6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13bfa:	9002      	str	r0, [sp, #8]
   13bfc:	e7ff      	b.n	13bfe <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2c6>
   13bfe:	a821      	add	r0, sp, #132	; 0x84
   13c00:	9902      	ldr	r1, [sp, #8]
   13c02:	f003 ff0d 	bl	17a20 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13c06:	defe      	udf	#254	; 0xfe
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   13c08:	f640 4020 	movw	r0, #3104	; 0xc20
   13c0c:	f2c0 0002 	movt	r0, #2
   13c10:	f640 4210 	movw	r2, #3088	; 0xc10
   13c14:	f2c0 0202 	movt	r2, #2
   13c18:	2121      	movs	r1, #33	; 0x21
   13c1a:	f003 fecb 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13c1e:	defe      	udf	#254	; 0xfe

00013c20 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>:

/// Perform non-blocking SPI write in Mynewt OS.  Blocks until SPI write completes.
fn internal_spi_noblock_write(buf: &'static u8, len: i32, is_command: bool) -> MynewtResult<()> {
   13c20:	b5b0      	push	{r4, r5, r7, lr}
   13c22:	b0e8      	sub	sp, #416	; 0x1a0
   13c24:	4613      	mov	r3, r2
   13c26:	9058      	str	r0, [sp, #352]	; 0x160
   13c28:	9159      	str	r1, [sp, #356]	; 0x164
   13c2a:	f88d 216b 	strb.w	r2, [sp, #363]	; 0x16b
    if len == 0 { return Ok(()); }
   13c2e:	2900      	cmp	r1, #0
   13c30:	9121      	str	r1, [sp, #132]	; 0x84
   13c32:	9020      	str	r0, [sp, #128]	; 0x80
   13c34:	931f      	str	r3, [sp, #124]	; 0x7c
   13c36:	d004      	beq.n	13c42 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x22>
   13c38:	e7ff      	b.n	13c3a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a>
    assert!(len > 0, "bad spi len");
   13c3a:	9821      	ldr	r0, [sp, #132]	; 0x84
   13c3c:	2801      	cmp	r0, #1
   13c3e:	db0d      	blt.n	13c5c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x3c>
   13c40:	e007      	b.n	13c52 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x32>
   13c42:	2000      	movs	r0, #0
    if len == 0 { return Ok(()); }
   13c44:	9022      	str	r0, [sp, #136]	; 0x88
   13c46:	2001      	movs	r0, #1
   13c48:	9022      	str	r0, [sp, #136]	; 0x88
   13c4a:	e7ff      	b.n	13c4c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
    }

    //  Set SS Pin to high to stop the transfer.
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
    Ok(())
}
   13c4c:	9822      	ldr	r0, [sp, #136]	; 0x88
   13c4e:	b068      	add	sp, #416	; 0x1a0
   13c50:	bdb0      	pop	{r4, r5, r7, pc}
        if is_command { 0 }
   13c52:	981f      	ldr	r0, [sp, #124]	; 0x7c
   13c54:	07c1      	lsls	r1, r0, #31
   13c56:	2900      	cmp	r1, #0
   13c58:	d10f      	bne.n	13c7a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x5a>
   13c5a:	e00b      	b.n	13c74 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x54>
    assert!(len > 0, "bad spi len");
   13c5c:	f640 4074 	movw	r0, #3188	; 0xc74
   13c60:	f2c0 0002 	movt	r0, #2
   13c64:	f640 4280 	movw	r2, #3200	; 0xc80
   13c68:	f2c0 0202 	movt	r2, #2
   13c6c:	210b      	movs	r1, #11
   13c6e:	f003 fea1 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13c72:	defe      	udf	#254	; 0xfe
   13c74:	2001      	movs	r0, #1
        else { 1 }
   13c76:	9023      	str	r0, [sp, #140]	; 0x8c
        if is_command { 0 }
   13c78:	e002      	b.n	13c80 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
   13c7a:	2000      	movs	r0, #0
   13c7c:	9023      	str	r0, [sp, #140]	; 0x8c
   13c7e:	e7ff      	b.n	13c80 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
    unsafe { hal::hal_gpio_write(
   13c80:	9923      	ldr	r1, [sp, #140]	; 0x8c
   13c82:	2012      	movs	r0, #18
   13c84:	f006 f804 	bl	19c90 <hal_gpio_write>
   13c88:	e7ff      	b.n	13c8a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x6a>
   13c8a:	2019      	movs	r0, #25
   13c8c:	2100      	movs	r1, #0
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 0) };
   13c8e:	f005 ffff 	bl	19c90 <hal_gpio_write>
   13c92:	e7ff      	b.n	13c94 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x74>
    if len == 1 {  //  If writing only 1 byte...
   13c94:	9821      	ldr	r0, [sp, #132]	; 0x84
   13c96:	2801      	cmp	r0, #1
   13c98:	d005      	beq.n	13ca6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x86>
   13c9a:	e7ff      	b.n	13c9c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x7c>
            core::mem::transmute(buf), //  TX Buffer
   13c9c:	9820      	ldr	r0, [sp, #128]	; 0x80
   13c9e:	9061      	str	r0, [sp, #388]	; 0x184
   13ca0:	9961      	ldr	r1, [sp, #388]	; 0x184
   13ca2:	911e      	str	r1, [sp, #120]	; 0x78
   13ca4:	e094      	b.n	13dd0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1b0>
            core::mem::transmute(buf), //  TX Buffer
   13ca6:	9820      	ldr	r0, [sp, #128]	; 0x80
   13ca8:	905b      	str	r0, [sp, #364]	; 0x16c
   13caa:	995b      	ldr	r1, [sp, #364]	; 0x16c
   13cac:	911d      	str	r1, [sp, #116]	; 0x74
   13cae:	e7ff      	b.n	13cb0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x90>
   13cb0:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx(
   13cb2:	901c      	str	r0, [sp, #112]	; 0x70
   13cb4:	991d      	ldr	r1, [sp, #116]	; 0x74
   13cb6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   13cb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
   13cba:	f006 fc97 	bl	1a5ec <hal_spi_txrx>
   13cbe:	9024      	str	r0, [sp, #144]	; 0x90
   13cc0:	e7ff      	b.n	13cc2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xa2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   13cc2:	f640 1068 	movw	r0, #2408	; 0x968
   13cc6:	f2c0 0002 	movt	r0, #2
   13cca:	6800      	ldr	r0, [r0, #0]
   13ccc:	a924      	add	r1, sp, #144	; 0x90
   13cce:	9125      	str	r1, [sp, #148]	; 0x94
   13cd0:	9026      	str	r0, [sp, #152]	; 0x98
   13cd2:	9825      	ldr	r0, [sp, #148]	; 0x94
   13cd4:	905c      	str	r0, [sp, #368]	; 0x170
   13cd6:	9926      	ldr	r1, [sp, #152]	; 0x98
   13cd8:	915d      	str	r1, [sp, #372]	; 0x174
   13cda:	6802      	ldr	r2, [r0, #0]
   13cdc:	680b      	ldr	r3, [r1, #0]
   13cde:	429a      	cmp	r2, r3
   13ce0:	901b      	str	r0, [sp, #108]	; 0x6c
   13ce2:	911a      	str	r1, [sp, #104]	; 0x68
   13ce4:	d101      	bne.n	13cea <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xca>
   13ce6:	e7ff      	b.n	13ce8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xc8>
    if len == 1 {  //  If writing only 1 byte...
   13ce8:	e11f      	b.n	13f2a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   13cea:	f640 10c0 	movw	r0, #2496	; 0x9c0
   13cee:	f2c0 0002 	movt	r0, #2
   13cf2:	6801      	ldr	r1, [r0, #0]
   13cf4:	981b      	ldr	r0, [sp, #108]	; 0x6c
   13cf6:	9036      	str	r0, [sp, #216]	; 0xd8
   13cf8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   13cfa:	9237      	str	r2, [sp, #220]	; 0xdc
   13cfc:	f640 4398 	movw	r3, #3224	; 0xc98
   13d00:	f2c0 0302 	movt	r3, #2
   13d04:	681b      	ldr	r3, [r3, #0]
   13d06:	f640 1ce0 	movw	ip, #2528	; 0x9e0
   13d0a:	f2c0 0c02 	movt	ip, #2
   13d0e:	f8dc c000 	ldr.w	ip, [ip]
   13d12:	46ee      	mov	lr, sp
   13d14:	2400      	movs	r4, #0
   13d16:	f8ce 4000 	str.w	r4, [lr]
   13d1a:	a838      	add	r0, sp, #224	; 0xe0
   13d1c:	2201      	movs	r2, #1
   13d1e:	9119      	str	r1, [sp, #100]	; 0x64
   13d20:	4619      	mov	r1, r3
   13d22:	4663      	mov	r3, ip
   13d24:	f7f4 feba 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13d28:	e7ff      	b.n	13d2a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x10a>
   13d2a:	a836      	add	r0, sp, #216	; 0xd8
   13d2c:	9033      	str	r0, [sp, #204]	; 0xcc
   13d2e:	a837      	add	r0, sp, #220	; 0xdc
   13d30:	9034      	str	r0, [sp, #208]	; 0xd0
   13d32:	a838      	add	r0, sp, #224	; 0xe0
   13d34:	9035      	str	r0, [sp, #212]	; 0xd4
   13d36:	9833      	ldr	r0, [sp, #204]	; 0xcc
   13d38:	905e      	str	r0, [sp, #376]	; 0x178
   13d3a:	9934      	ldr	r1, [sp, #208]	; 0xd0
   13d3c:	915f      	str	r1, [sp, #380]	; 0x17c
   13d3e:	9a35      	ldr	r2, [sp, #212]	; 0xd4
   13d40:	9260      	str	r2, [sp, #384]	; 0x180
   13d42:	f249 23eb 	movw	r3, #37611	; 0x92eb
   13d46:	f2c0 0300 	movt	r3, #0
   13d4a:	9118      	str	r1, [sp, #96]	; 0x60
   13d4c:	4619      	mov	r1, r3
   13d4e:	9217      	str	r2, [sp, #92]	; 0x5c
   13d50:	f7f5 fb03 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13d54:	9016      	str	r0, [sp, #88]	; 0x58
   13d56:	9115      	str	r1, [sp, #84]	; 0x54
   13d58:	e7ff      	b.n	13d5a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x13a>
   13d5a:	f249 21eb 	movw	r1, #37611	; 0x92eb
   13d5e:	f2c0 0100 	movt	r1, #0
   13d62:	9818      	ldr	r0, [sp, #96]	; 0x60
   13d64:	f7f5 faf9 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13d68:	9014      	str	r0, [sp, #80]	; 0x50
   13d6a:	9113      	str	r1, [sp, #76]	; 0x4c
   13d6c:	e7ff      	b.n	13d6e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x14e>
   13d6e:	f647 7183 	movw	r1, #32643	; 0x7f83
   13d72:	f2c0 0101 	movt	r1, #1
   13d76:	9817      	ldr	r0, [sp, #92]	; 0x5c
   13d78:	f7f5 fb2e 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13d7c:	9012      	str	r0, [sp, #72]	; 0x48
   13d7e:	9111      	str	r1, [sp, #68]	; 0x44
   13d80:	e7ff      	b.n	13d82 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x162>
   13d82:	9816      	ldr	r0, [sp, #88]	; 0x58
   13d84:	902d      	str	r0, [sp, #180]	; 0xb4
   13d86:	9915      	ldr	r1, [sp, #84]	; 0x54
   13d88:	912e      	str	r1, [sp, #184]	; 0xb8
   13d8a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   13d8c:	922f      	str	r2, [sp, #188]	; 0xbc
   13d8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   13d90:	9330      	str	r3, [sp, #192]	; 0xc0
   13d92:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   13d96:	f8cd c0c4 	str.w	ip, [sp, #196]	; 0xc4
   13d9a:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
   13d9e:	f8cd e0c8 	str.w	lr, [sp, #200]	; 0xc8
   13da2:	466c      	mov	r4, sp
   13da4:	2503      	movs	r5, #3
   13da6:	6025      	str	r5, [r4, #0]
   13da8:	a827      	add	r0, sp, #156	; 0x9c
   13daa:	ab2d      	add	r3, sp, #180	; 0xb4
   13dac:	9919      	ldr	r1, [sp, #100]	; 0x64
   13dae:	462a      	mov	r2, r5
   13db0:	f7f4 fe74 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13db4:	e7ff      	b.n	13db6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x196>
   13db6:	f640 409c 	movw	r0, #3228	; 0xc9c
   13dba:	f2c0 0002 	movt	r0, #2
   13dbe:	f003 fdf2 	bl	179a6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13dc2:	9010      	str	r0, [sp, #64]	; 0x40
   13dc4:	e7ff      	b.n	13dc6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a6>
   13dc6:	a827      	add	r0, sp, #156	; 0x9c
   13dc8:	9910      	ldr	r1, [sp, #64]	; 0x40
   13dca:	f003 fe29 	bl	17a20 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13dce:	defe      	udf	#254	; 0xfe
   13dd0:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx_noblock(
   13dd2:	900f      	str	r0, [sp, #60]	; 0x3c
   13dd4:	991e      	ldr	r1, [sp, #120]	; 0x78
   13dd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   13dd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
   13dda:	f006 fc5d 	bl	1a698 <hal_spi_txrx_noblock>
   13dde:	903e      	str	r0, [sp, #248]	; 0xf8
   13de0:	e7ff      	b.n	13de2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1c2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   13de2:	f640 1068 	movw	r0, #2408	; 0x968
   13de6:	f2c0 0002 	movt	r0, #2
   13dea:	6800      	ldr	r0, [r0, #0]
   13dec:	a93e      	add	r1, sp, #248	; 0xf8
   13dee:	913f      	str	r1, [sp, #252]	; 0xfc
   13df0:	9040      	str	r0, [sp, #256]	; 0x100
   13df2:	983f      	ldr	r0, [sp, #252]	; 0xfc
   13df4:	9062      	str	r0, [sp, #392]	; 0x188
   13df6:	9940      	ldr	r1, [sp, #256]	; 0x100
   13df8:	9163      	str	r1, [sp, #396]	; 0x18c
   13dfa:	6802      	ldr	r2, [r0, #0]
   13dfc:	680b      	ldr	r3, [r1, #0]
   13dfe:	429a      	cmp	r2, r3
   13e00:	900e      	str	r0, [sp, #56]	; 0x38
   13e02:	910d      	str	r1, [sp, #52]	; 0x34
   13e04:	d10c      	bne.n	13e20 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x200>
   13e06:	e7ff      	b.n	13e08 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1e8>
   13e08:	f247 5030 	movw	r0, #30000	; 0x7530
        let timeout = 30_000;
   13e0c:	9067      	str	r0, [sp, #412]	; 0x19c
   13e0e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   13e12:	fba0 0101 	umull	r0, r1, r0, r1
   13e16:	2900      	cmp	r1, #0
   13e18:	900c      	str	r0, [sp, #48]	; 0x30
   13e1a:	f040 8090 	bne.w	13f3e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x31e>
   13e1e:	e072      	b.n	13f06 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2e6>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   13e20:	f640 10c0 	movw	r0, #2496	; 0x9c0
   13e24:	f2c0 0002 	movt	r0, #2
   13e28:	6801      	ldr	r1, [r0, #0]
   13e2a:	980e      	ldr	r0, [sp, #56]	; 0x38
   13e2c:	9050      	str	r0, [sp, #320]	; 0x140
   13e2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   13e30:	9251      	str	r2, [sp, #324]	; 0x144
   13e32:	f640 4398 	movw	r3, #3224	; 0xc98
   13e36:	f2c0 0302 	movt	r3, #2
   13e3a:	681b      	ldr	r3, [r3, #0]
   13e3c:	f640 1ce0 	movw	ip, #2528	; 0x9e0
   13e40:	f2c0 0c02 	movt	ip, #2
   13e44:	f8dc c000 	ldr.w	ip, [ip]
   13e48:	46ee      	mov	lr, sp
   13e4a:	2400      	movs	r4, #0
   13e4c:	f8ce 4000 	str.w	r4, [lr]
   13e50:	a852      	add	r0, sp, #328	; 0x148
   13e52:	2201      	movs	r2, #1
   13e54:	910b      	str	r1, [sp, #44]	; 0x2c
   13e56:	4619      	mov	r1, r3
   13e58:	4663      	mov	r3, ip
   13e5a:	f7f4 fe1f 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13e5e:	e7ff      	b.n	13e60 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x240>
   13e60:	a850      	add	r0, sp, #320	; 0x140
   13e62:	904d      	str	r0, [sp, #308]	; 0x134
   13e64:	a851      	add	r0, sp, #324	; 0x144
   13e66:	904e      	str	r0, [sp, #312]	; 0x138
   13e68:	a852      	add	r0, sp, #328	; 0x148
   13e6a:	904f      	str	r0, [sp, #316]	; 0x13c
   13e6c:	984d      	ldr	r0, [sp, #308]	; 0x134
   13e6e:	9064      	str	r0, [sp, #400]	; 0x190
   13e70:	994e      	ldr	r1, [sp, #312]	; 0x138
   13e72:	9165      	str	r1, [sp, #404]	; 0x194
   13e74:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
   13e76:	9266      	str	r2, [sp, #408]	; 0x198
   13e78:	f249 23eb 	movw	r3, #37611	; 0x92eb
   13e7c:	f2c0 0300 	movt	r3, #0
   13e80:	910a      	str	r1, [sp, #40]	; 0x28
   13e82:	4619      	mov	r1, r3
   13e84:	9209      	str	r2, [sp, #36]	; 0x24
   13e86:	f7f5 fa68 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13e8a:	9008      	str	r0, [sp, #32]
   13e8c:	9107      	str	r1, [sp, #28]
   13e8e:	e7ff      	b.n	13e90 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x270>
   13e90:	f249 21eb 	movw	r1, #37611	; 0x92eb
   13e94:	f2c0 0100 	movt	r1, #0
   13e98:	980a      	ldr	r0, [sp, #40]	; 0x28
   13e9a:	f7f5 fa5e 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13e9e:	9006      	str	r0, [sp, #24]
   13ea0:	9105      	str	r1, [sp, #20]
   13ea2:	e7ff      	b.n	13ea4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x284>
   13ea4:	f647 7183 	movw	r1, #32643	; 0x7f83
   13ea8:	f2c0 0101 	movt	r1, #1
   13eac:	9809      	ldr	r0, [sp, #36]	; 0x24
   13eae:	f7f5 fa93 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13eb2:	9004      	str	r0, [sp, #16]
   13eb4:	9103      	str	r1, [sp, #12]
   13eb6:	e7ff      	b.n	13eb8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x298>
   13eb8:	9808      	ldr	r0, [sp, #32]
   13eba:	9047      	str	r0, [sp, #284]	; 0x11c
   13ebc:	9907      	ldr	r1, [sp, #28]
   13ebe:	9148      	str	r1, [sp, #288]	; 0x120
   13ec0:	9a06      	ldr	r2, [sp, #24]
   13ec2:	9249      	str	r2, [sp, #292]	; 0x124
   13ec4:	9b05      	ldr	r3, [sp, #20]
   13ec6:	934a      	str	r3, [sp, #296]	; 0x128
   13ec8:	f8dd c010 	ldr.w	ip, [sp, #16]
   13ecc:	f8cd c12c 	str.w	ip, [sp, #300]	; 0x12c
   13ed0:	f8dd e00c 	ldr.w	lr, [sp, #12]
   13ed4:	f8cd e130 	str.w	lr, [sp, #304]	; 0x130
   13ed8:	466c      	mov	r4, sp
   13eda:	2503      	movs	r5, #3
   13edc:	6025      	str	r5, [r4, #0]
   13ede:	a841      	add	r0, sp, #260	; 0x104
   13ee0:	ab47      	add	r3, sp, #284	; 0x11c
   13ee2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13ee4:	462a      	mov	r2, r5
   13ee6:	f7f4 fdd9 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13eea:	e7ff      	b.n	13eec <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2cc>
   13eec:	f640 40ac 	movw	r0, #3244	; 0xcac
   13ef0:	f2c0 0002 	movt	r0, #2
   13ef4:	f003 fd57 	bl	179a6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13ef8:	9002      	str	r0, [sp, #8]
   13efa:	e7ff      	b.n	13efc <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2dc>
   13efc:	a841      	add	r0, sp, #260	; 0x104
   13efe:	9902      	ldr	r1, [sp, #8]
   13f00:	f003 fd8e 	bl	17a20 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13f04:	defe      	udf	#254	; 0xfe
   13f06:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   13f0a:	f2c1 0062 	movt	r0, #4194	; 0x1062
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   13f0e:	990c      	ldr	r1, [sp, #48]	; 0x30
   13f10:	fba1 0200 	umull	r0, r2, r1, r0
   13f14:	0991      	lsrs	r1, r2, #6
   13f16:	f646 227c 	movw	r2, #27260	; 0x6a7c
   13f1a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13f1e:	9001      	str	r0, [sp, #4]
   13f20:	4610      	mov	r0, r2
   13f22:	f007 fd85 	bl	1ba30 <os_sem_pend>
   13f26:	e7ff      	b.n	13f28 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x308>
    if len == 1 {  //  If writing only 1 byte...
   13f28:	e7ff      	b.n	13f2a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
   13f2a:	2019      	movs	r0, #25
   13f2c:	2101      	movs	r1, #1
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
   13f2e:	f005 feaf 	bl	19c90 <hal_gpio_write>
   13f32:	e7ff      	b.n	13f34 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x314>
   13f34:	2000      	movs	r0, #0
    Ok(())
   13f36:	9022      	str	r0, [sp, #136]	; 0x88
   13f38:	2001      	movs	r0, #1
   13f3a:	9022      	str	r0, [sp, #136]	; 0x88
}
   13f3c:	e686      	b.n	13c4c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   13f3e:	f640 30c0 	movw	r0, #3008	; 0xbc0
   13f42:	f2c0 0002 	movt	r0, #2
   13f46:	f640 42bc 	movw	r2, #3260	; 0xcbc
   13f4a:	f2c0 0202 	movt	r2, #2
   13f4e:	2121      	movs	r1, #33	; 0x21
   13f50:	f003 fd30 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13f54:	defe      	udf	#254	; 0xfe

00013f56 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E>:

/// Called by interrupt handler after Non-blocking SPI transfer has completed
extern "C" fn spi_noblock_handler(_arg: Ptr, _len: i32) {
   13f56:	b5b0      	push	{r4, r5, r7, lr}
   13f58:	b0ae      	sub	sp, #184	; 0xb8
   13f5a:	9027      	str	r0, [sp, #156]	; 0x9c
   13f5c:	9128      	str	r1, [sp, #160]	; 0xa0
    //  Signal to internal_spi_noblock_write() that SPI request has been completed.
    let rc = unsafe { os::os_sem_release(&mut SPI_SEM) };
   13f5e:	f646 207c 	movw	r0, #27260	; 0x6a7c
   13f62:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13f66:	f007 fd31 	bl	1b9cc <os_sem_release>
   13f6a:	900d      	str	r0, [sp, #52]	; 0x34
   13f6c:	e7ff      	b.n	13f6e <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x18>
    assert_eq!(rc, 0, "sem fail");
   13f6e:	f640 1068 	movw	r0, #2408	; 0x968
   13f72:	f2c0 0002 	movt	r0, #2
   13f76:	6800      	ldr	r0, [r0, #0]
   13f78:	a90d      	add	r1, sp, #52	; 0x34
   13f7a:	910e      	str	r1, [sp, #56]	; 0x38
   13f7c:	900f      	str	r0, [sp, #60]	; 0x3c
   13f7e:	980e      	ldr	r0, [sp, #56]	; 0x38
   13f80:	9029      	str	r0, [sp, #164]	; 0xa4
   13f82:	990f      	ldr	r1, [sp, #60]	; 0x3c
   13f84:	912a      	str	r1, [sp, #168]	; 0xa8
   13f86:	6802      	ldr	r2, [r0, #0]
   13f88:	680b      	ldr	r3, [r1, #0]
   13f8a:	429a      	cmp	r2, r3
   13f8c:	900c      	str	r0, [sp, #48]	; 0x30
   13f8e:	910b      	str	r1, [sp, #44]	; 0x2c
   13f90:	d102      	bne.n	13f98 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x42>
   13f92:	e7ff      	b.n	13f94 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x3e>
}
   13f94:	b02e      	add	sp, #184	; 0xb8
   13f96:	bdb0      	pop	{r4, r5, r7, pc}
    assert_eq!(rc, 0, "sem fail");
   13f98:	f640 10c0 	movw	r0, #2496	; 0x9c0
   13f9c:	f2c0 0002 	movt	r0, #2
   13fa0:	6801      	ldr	r1, [r0, #0]
   13fa2:	980c      	ldr	r0, [sp, #48]	; 0x30
   13fa4:	901f      	str	r0, [sp, #124]	; 0x7c
   13fa6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13fa8:	9220      	str	r2, [sp, #128]	; 0x80
   13faa:	f640 23d8 	movw	r3, #2776	; 0xad8
   13fae:	f2c0 0302 	movt	r3, #2
   13fb2:	681b      	ldr	r3, [r3, #0]
   13fb4:	f640 1ce0 	movw	ip, #2528	; 0x9e0
   13fb8:	f2c0 0c02 	movt	ip, #2
   13fbc:	f8dc c000 	ldr.w	ip, [ip]
   13fc0:	46ee      	mov	lr, sp
   13fc2:	2400      	movs	r4, #0
   13fc4:	f8ce 4000 	str.w	r4, [lr]
   13fc8:	a821      	add	r0, sp, #132	; 0x84
   13fca:	2201      	movs	r2, #1
   13fcc:	910a      	str	r1, [sp, #40]	; 0x28
   13fce:	4619      	mov	r1, r3
   13fd0:	4663      	mov	r3, ip
   13fd2:	f7f4 fd63 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13fd6:	e7ff      	b.n	13fd8 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x82>
   13fd8:	a81f      	add	r0, sp, #124	; 0x7c
   13fda:	901c      	str	r0, [sp, #112]	; 0x70
   13fdc:	a820      	add	r0, sp, #128	; 0x80
   13fde:	901d      	str	r0, [sp, #116]	; 0x74
   13fe0:	a821      	add	r0, sp, #132	; 0x84
   13fe2:	901e      	str	r0, [sp, #120]	; 0x78
   13fe4:	981c      	ldr	r0, [sp, #112]	; 0x70
   13fe6:	902b      	str	r0, [sp, #172]	; 0xac
   13fe8:	991d      	ldr	r1, [sp, #116]	; 0x74
   13fea:	912c      	str	r1, [sp, #176]	; 0xb0
   13fec:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13fee:	922d      	str	r2, [sp, #180]	; 0xb4
   13ff0:	f249 333f 	movw	r3, #37695	; 0x933f
   13ff4:	f2c0 0300 	movt	r3, #0
   13ff8:	9109      	str	r1, [sp, #36]	; 0x24
   13ffa:	4619      	mov	r1, r3
   13ffc:	9208      	str	r2, [sp, #32]
   13ffe:	f7f5 f9d6 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   14002:	9007      	str	r0, [sp, #28]
   14004:	9106      	str	r1, [sp, #24]
   14006:	e7ff      	b.n	14008 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xb2>
   14008:	f249 313f 	movw	r1, #37695	; 0x933f
   1400c:	f2c0 0100 	movt	r1, #0
   14010:	9809      	ldr	r0, [sp, #36]	; 0x24
   14012:	f7f5 f9cc 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   14016:	9005      	str	r0, [sp, #20]
   14018:	9104      	str	r1, [sp, #16]
   1401a:	e7ff      	b.n	1401c <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xc6>
   1401c:	f647 7183 	movw	r1, #32643	; 0x7f83
   14020:	f2c0 0101 	movt	r1, #1
   14024:	9808      	ldr	r0, [sp, #32]
   14026:	f7f5 f9d7 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1402a:	9003      	str	r0, [sp, #12]
   1402c:	9102      	str	r1, [sp, #8]
   1402e:	e7ff      	b.n	14030 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xda>
   14030:	9807      	ldr	r0, [sp, #28]
   14032:	9016      	str	r0, [sp, #88]	; 0x58
   14034:	9906      	ldr	r1, [sp, #24]
   14036:	9117      	str	r1, [sp, #92]	; 0x5c
   14038:	9a05      	ldr	r2, [sp, #20]
   1403a:	9218      	str	r2, [sp, #96]	; 0x60
   1403c:	9b04      	ldr	r3, [sp, #16]
   1403e:	9319      	str	r3, [sp, #100]	; 0x64
   14040:	f8dd c00c 	ldr.w	ip, [sp, #12]
   14044:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
   14048:	f8dd e008 	ldr.w	lr, [sp, #8]
   1404c:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
   14050:	466c      	mov	r4, sp
   14052:	2503      	movs	r5, #3
   14054:	6025      	str	r5, [r4, #0]
   14056:	a810      	add	r0, sp, #64	; 0x40
   14058:	ab16      	add	r3, sp, #88	; 0x58
   1405a:	990a      	ldr	r1, [sp, #40]	; 0x28
   1405c:	462a      	mov	r2, r5
   1405e:	f7f4 fd1d 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14062:	e7ff      	b.n	14064 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x10e>
   14064:	f640 40cc 	movw	r0, #3276	; 0xccc
   14068:	f2c0 0002 	movt	r0, #2
   1406c:	f003 fc9b 	bl	179a6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14070:	9001      	str	r0, [sp, #4]
   14072:	e7ff      	b.n	14074 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x11e>
   14074:	a810      	add	r0, sp, #64	; 0x40
   14076:	9901      	ldr	r1, [sp, #4]
   14078:	f003 fcd2 	bl	17a20 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1407c:	defe      	udf	#254	; 0xfe

0001407e <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>:

/// Sleep for the specified number of milliseconds
fn delay_ms(ms: u8) {
   1407e:	b580      	push	{r7, lr}
   14080:	b084      	sub	sp, #16
   14082:	4601      	mov	r1, r0
   14084:	f88d 000b 	strb.w	r0, [sp, #11]
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   14088:	b2c0      	uxtb	r0, r0
   1408a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1408e:	fba0 0202 	umull	r0, r2, r0, r2
   14092:	2a00      	cmp	r2, #0
   14094:	9001      	str	r0, [sp, #4]
   14096:	d110      	bne.n	140ba <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x3c>
   14098:	e7ff      	b.n	1409a <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x1c>
   1409a:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   1409e:	f2c1 0062 	movt	r0, #4194	; 0x1062
   140a2:	9901      	ldr	r1, [sp, #4]
   140a4:	fba1 0200 	umull	r0, r2, r1, r0
   140a8:	0992      	lsrs	r2, r2, #6
   140aa:	9203      	str	r2, [sp, #12]
    unsafe { os::os_time_delay(delay_ticks) };
   140ac:	9000      	str	r0, [sp, #0]
   140ae:	4610      	mov	r0, r2
   140b0:	f007 fe0c 	bl	1bccc <os_time_delay>
   140b4:	e7ff      	b.n	140b6 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x38>
}
   140b6:	b004      	add	sp, #16
   140b8:	bd80      	pop	{r7, pc}
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   140ba:	f640 30c0 	movw	r0, #3008	; 0xbc0
   140be:	f2c0 0002 	movt	r0, #2
   140c2:	f640 42dc 	movw	r2, #3292	; 0xcdc
   140c6:	f2c0 0202 	movt	r2, #2
   140ca:	2121      	movs	r1, #33	; 0x21
   140cc:	f003 fc72 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   140d0:	defe      	udf	#254	; 0xfe

000140d2 <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>:
};

/// Rust Embedded HAL interface for Mynewt SPI
impl SPI {
    /// Create a new SPI port
    pub fn new() -> Self {
   140d2:	b082      	sub	sp, #8
   140d4:	2000      	movs	r0, #0
        SPI {
   140d6:	9000      	str	r0, [sp, #0]
   140d8:	9001      	str	r0, [sp, #4]
            spi_num: 0,
            cs_pin:  0,
        }
    }
   140da:	9800      	ldr	r0, [sp, #0]
   140dc:	9901      	ldr	r1, [sp, #4]
   140de:	b002      	add	sp, #8
   140e0:	4770      	bx	lr

000140e2 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>:

    /// Initiaise the SPI port
    pub fn init(&mut self, spi_num: i32, cs_pin: i32, spi_settings: *mut hal::hal_spi_settings) 
   140e2:	b5b0      	push	{r4, r5, r7, lr}
   140e4:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
   140e8:	9077      	str	r0, [sp, #476]	; 0x1dc
   140ea:	9178      	str	r1, [sp, #480]	; 0x1e0
   140ec:	9279      	str	r2, [sp, #484]	; 0x1e4
   140ee:	937a      	str	r3, [sp, #488]	; 0x1e8
        -> MynewtResult<()> {
        let rc = unsafe { hal::hal_spi_config(spi_num, spi_settings) };
   140f0:	9028      	str	r0, [sp, #160]	; 0xa0
   140f2:	4608      	mov	r0, r1
   140f4:	9127      	str	r1, [sp, #156]	; 0x9c
   140f6:	4619      	mov	r1, r3
   140f8:	9226      	str	r2, [sp, #152]	; 0x98
   140fa:	f006 f9bb 	bl	1a474 <hal_spi_config>
   140fe:	9029      	str	r0, [sp, #164]	; 0xa4
   14100:	e7ff      	b.n	14102 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x20>
        assert_eq!(rc, 0, "spi config fail");
   14102:	f640 40ec 	movw	r0, #3308	; 0xcec
   14106:	f2c0 0002 	movt	r0, #2
   1410a:	6800      	ldr	r0, [r0, #0]
   1410c:	a929      	add	r1, sp, #164	; 0xa4
   1410e:	912a      	str	r1, [sp, #168]	; 0xa8
   14110:	902b      	str	r0, [sp, #172]	; 0xac
   14112:	982a      	ldr	r0, [sp, #168]	; 0xa8
   14114:	907b      	str	r0, [sp, #492]	; 0x1ec
   14116:	992b      	ldr	r1, [sp, #172]	; 0xac
   14118:	917c      	str	r1, [sp, #496]	; 0x1f0
   1411a:	6802      	ldr	r2, [r0, #0]
   1411c:	680b      	ldr	r3, [r1, #0]
   1411e:	429a      	cmp	r2, r3
   14120:	9025      	str	r0, [sp, #148]	; 0x94
   14122:	9124      	str	r1, [sp, #144]	; 0x90
   14124:	d105      	bne.n	14132 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x50>
   14126:	e7ff      	b.n	14128 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x46>

        let rc = unsafe { hal::hal_spi_enable(spi_num) };
   14128:	9827      	ldr	r0, [sp, #156]	; 0x9c
   1412a:	f006 f9bf 	bl	1a4ac <hal_spi_enable>
   1412e:	9043      	str	r0, [sp, #268]	; 0x10c
   14130:	e072      	b.n	14218 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x136>
        assert_eq!(rc, 0, "spi config fail");
   14132:	f640 5044 	movw	r0, #3396	; 0xd44
   14136:	f2c0 0002 	movt	r0, #2
   1413a:	6801      	ldr	r1, [r0, #0]
   1413c:	9825      	ldr	r0, [sp, #148]	; 0x94
   1413e:	903b      	str	r0, [sp, #236]	; 0xec
   14140:	9a24      	ldr	r2, [sp, #144]	; 0x90
   14142:	923c      	str	r2, [sp, #240]	; 0xf0
   14144:	f640 5360 	movw	r3, #3424	; 0xd60
   14148:	f2c0 0302 	movt	r3, #2
   1414c:	681b      	ldr	r3, [r3, #0]
   1414e:	f640 5c64 	movw	ip, #3428	; 0xd64
   14152:	f2c0 0c02 	movt	ip, #2
   14156:	f8dc c000 	ldr.w	ip, [ip]
   1415a:	46ee      	mov	lr, sp
   1415c:	2400      	movs	r4, #0
   1415e:	f8ce 4000 	str.w	r4, [lr]
   14162:	a83d      	add	r0, sp, #244	; 0xf4
   14164:	2201      	movs	r2, #1
   14166:	9123      	str	r1, [sp, #140]	; 0x8c
   14168:	4619      	mov	r1, r3
   1416a:	4663      	mov	r3, ip
   1416c:	f7f4 fc96 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14170:	e7ff      	b.n	14172 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x90>
   14172:	a83b      	add	r0, sp, #236	; 0xec
   14174:	9038      	str	r0, [sp, #224]	; 0xe0
   14176:	a83c      	add	r0, sp, #240	; 0xf0
   14178:	9039      	str	r0, [sp, #228]	; 0xe4
   1417a:	a83d      	add	r0, sp, #244	; 0xf4
   1417c:	903a      	str	r0, [sp, #232]	; 0xe8
   1417e:	9838      	ldr	r0, [sp, #224]	; 0xe0
   14180:	907d      	str	r0, [sp, #500]	; 0x1f4
   14182:	9939      	ldr	r1, [sp, #228]	; 0xe4
   14184:	917e      	str	r1, [sp, #504]	; 0x1f8
   14186:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
   14188:	927f      	str	r2, [sp, #508]	; 0x1fc
   1418a:	f249 23eb 	movw	r3, #37611	; 0x92eb
   1418e:	f2c0 0300 	movt	r3, #0
   14192:	9122      	str	r1, [sp, #136]	; 0x88
   14194:	4619      	mov	r1, r3
   14196:	9221      	str	r2, [sp, #132]	; 0x84
   14198:	f7f5 f8df 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1419c:	9020      	str	r0, [sp, #128]	; 0x80
   1419e:	911f      	str	r1, [sp, #124]	; 0x7c
   141a0:	e7ff      	b.n	141a2 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xc0>
   141a2:	f249 21eb 	movw	r1, #37611	; 0x92eb
   141a6:	f2c0 0100 	movt	r1, #0
   141aa:	9822      	ldr	r0, [sp, #136]	; 0x88
   141ac:	f7f5 f8d5 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   141b0:	901e      	str	r0, [sp, #120]	; 0x78
   141b2:	911d      	str	r1, [sp, #116]	; 0x74
   141b4:	e7ff      	b.n	141b6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xd4>
   141b6:	f647 7183 	movw	r1, #32643	; 0x7f83
   141ba:	f2c0 0101 	movt	r1, #1
   141be:	9821      	ldr	r0, [sp, #132]	; 0x84
   141c0:	f7f5 f90a 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   141c4:	901c      	str	r0, [sp, #112]	; 0x70
   141c6:	911b      	str	r1, [sp, #108]	; 0x6c
   141c8:	e7ff      	b.n	141ca <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xe8>
   141ca:	9820      	ldr	r0, [sp, #128]	; 0x80
   141cc:	9032      	str	r0, [sp, #200]	; 0xc8
   141ce:	991f      	ldr	r1, [sp, #124]	; 0x7c
   141d0:	9133      	str	r1, [sp, #204]	; 0xcc
   141d2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   141d4:	9234      	str	r2, [sp, #208]	; 0xd0
   141d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   141d8:	9335      	str	r3, [sp, #212]	; 0xd4
   141da:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
   141de:	f8cd c0d8 	str.w	ip, [sp, #216]	; 0xd8
   141e2:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
   141e6:	f8cd e0dc 	str.w	lr, [sp, #220]	; 0xdc
   141ea:	466c      	mov	r4, sp
   141ec:	2503      	movs	r5, #3
   141ee:	6025      	str	r5, [r4, #0]
   141f0:	a82c      	add	r0, sp, #176	; 0xb0
   141f2:	ab32      	add	r3, sp, #200	; 0xc8
   141f4:	9923      	ldr	r1, [sp, #140]	; 0x8c
   141f6:	462a      	mov	r2, r5
   141f8:	f7f4 fc50 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   141fc:	e7ff      	b.n	141fe <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x11c>
   141fe:	f640 5080 	movw	r0, #3456	; 0xd80
   14202:	f2c0 0002 	movt	r0, #2
   14206:	f003 fbce 	bl	179a6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1420a:	901a      	str	r0, [sp, #104]	; 0x68
   1420c:	e7ff      	b.n	1420e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x12c>
   1420e:	a82c      	add	r0, sp, #176	; 0xb0
   14210:	991a      	ldr	r1, [sp, #104]	; 0x68
   14212:	f003 fc05 	bl	17a20 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14216:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi enable fail");
   14218:	f640 40ec 	movw	r0, #3308	; 0xcec
   1421c:	f2c0 0002 	movt	r0, #2
   14220:	6800      	ldr	r0, [r0, #0]
   14222:	a943      	add	r1, sp, #268	; 0x10c
   14224:	9144      	str	r1, [sp, #272]	; 0x110
   14226:	9045      	str	r0, [sp, #276]	; 0x114
   14228:	9844      	ldr	r0, [sp, #272]	; 0x110
   1422a:	9080      	str	r0, [sp, #512]	; 0x200
   1422c:	9945      	ldr	r1, [sp, #276]	; 0x114
   1422e:	9181      	str	r1, [sp, #516]	; 0x204
   14230:	6802      	ldr	r2, [r0, #0]
   14232:	680b      	ldr	r3, [r1, #0]
   14234:	429a      	cmp	r2, r3
   14236:	9019      	str	r0, [sp, #100]	; 0x64
   14238:	9118      	str	r1, [sp, #96]	; 0x60
   1423a:	d106      	bne.n	1424a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x168>
   1423c:	e7ff      	b.n	1423e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x15c>
   1423e:	2101      	movs	r1, #1

        let rc = unsafe { hal::hal_gpio_init_out(cs_pin, 1) };
   14240:	9826      	ldr	r0, [sp, #152]	; 0x98
   14242:	f005 fd09 	bl	19c58 <hal_gpio_init_out>
   14246:	905d      	str	r0, [sp, #372]	; 0x174
   14248:	e072      	b.n	14330 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x24e>
        assert_eq!(rc, 0, "spi enable fail");
   1424a:	f640 5044 	movw	r0, #3396	; 0xd44
   1424e:	f2c0 0002 	movt	r0, #2
   14252:	6801      	ldr	r1, [r0, #0]
   14254:	9819      	ldr	r0, [sp, #100]	; 0x64
   14256:	9055      	str	r0, [sp, #340]	; 0x154
   14258:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1425a:	9256      	str	r2, [sp, #344]	; 0x158
   1425c:	f640 53a8 	movw	r3, #3496	; 0xda8
   14260:	f2c0 0302 	movt	r3, #2
   14264:	681b      	ldr	r3, [r3, #0]
   14266:	f640 5c64 	movw	ip, #3428	; 0xd64
   1426a:	f2c0 0c02 	movt	ip, #2
   1426e:	f8dc c000 	ldr.w	ip, [ip]
   14272:	46ee      	mov	lr, sp
   14274:	2400      	movs	r4, #0
   14276:	f8ce 4000 	str.w	r4, [lr]
   1427a:	a857      	add	r0, sp, #348	; 0x15c
   1427c:	2201      	movs	r2, #1
   1427e:	9117      	str	r1, [sp, #92]	; 0x5c
   14280:	4619      	mov	r1, r3
   14282:	4663      	mov	r3, ip
   14284:	f7f4 fc0a 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14288:	e7ff      	b.n	1428a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1a8>
   1428a:	a855      	add	r0, sp, #340	; 0x154
   1428c:	9052      	str	r0, [sp, #328]	; 0x148
   1428e:	a856      	add	r0, sp, #344	; 0x158
   14290:	9053      	str	r0, [sp, #332]	; 0x14c
   14292:	a857      	add	r0, sp, #348	; 0x15c
   14294:	9054      	str	r0, [sp, #336]	; 0x150
   14296:	9852      	ldr	r0, [sp, #328]	; 0x148
   14298:	9082      	str	r0, [sp, #520]	; 0x208
   1429a:	9953      	ldr	r1, [sp, #332]	; 0x14c
   1429c:	9183      	str	r1, [sp, #524]	; 0x20c
   1429e:	9a54      	ldr	r2, [sp, #336]	; 0x150
   142a0:	9284      	str	r2, [sp, #528]	; 0x210
   142a2:	f249 23eb 	movw	r3, #37611	; 0x92eb
   142a6:	f2c0 0300 	movt	r3, #0
   142aa:	9116      	str	r1, [sp, #88]	; 0x58
   142ac:	4619      	mov	r1, r3
   142ae:	9215      	str	r2, [sp, #84]	; 0x54
   142b0:	f7f5 f853 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   142b4:	9014      	str	r0, [sp, #80]	; 0x50
   142b6:	9113      	str	r1, [sp, #76]	; 0x4c
   142b8:	e7ff      	b.n	142ba <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1d8>
   142ba:	f249 21eb 	movw	r1, #37611	; 0x92eb
   142be:	f2c0 0100 	movt	r1, #0
   142c2:	9816      	ldr	r0, [sp, #88]	; 0x58
   142c4:	f7f5 f849 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   142c8:	9012      	str	r0, [sp, #72]	; 0x48
   142ca:	9111      	str	r1, [sp, #68]	; 0x44
   142cc:	e7ff      	b.n	142ce <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1ec>
   142ce:	f647 7183 	movw	r1, #32643	; 0x7f83
   142d2:	f2c0 0101 	movt	r1, #1
   142d6:	9815      	ldr	r0, [sp, #84]	; 0x54
   142d8:	f7f5 f87e 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   142dc:	9010      	str	r0, [sp, #64]	; 0x40
   142de:	910f      	str	r1, [sp, #60]	; 0x3c
   142e0:	e7ff      	b.n	142e2 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x200>
   142e2:	9814      	ldr	r0, [sp, #80]	; 0x50
   142e4:	904c      	str	r0, [sp, #304]	; 0x130
   142e6:	9913      	ldr	r1, [sp, #76]	; 0x4c
   142e8:	914d      	str	r1, [sp, #308]	; 0x134
   142ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
   142ec:	924e      	str	r2, [sp, #312]	; 0x138
   142ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
   142f0:	934f      	str	r3, [sp, #316]	; 0x13c
   142f2:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   142f6:	f8cd c140 	str.w	ip, [sp, #320]	; 0x140
   142fa:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
   142fe:	f8cd e144 	str.w	lr, [sp, #324]	; 0x144
   14302:	466c      	mov	r4, sp
   14304:	2503      	movs	r5, #3
   14306:	6025      	str	r5, [r4, #0]
   14308:	a846      	add	r0, sp, #280	; 0x118
   1430a:	ab4c      	add	r3, sp, #304	; 0x130
   1430c:	9917      	ldr	r1, [sp, #92]	; 0x5c
   1430e:	462a      	mov	r2, r5
   14310:	f7f4 fbc4 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14314:	e7ff      	b.n	14316 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x234>
   14316:	f640 50ac 	movw	r0, #3500	; 0xdac
   1431a:	f2c0 0002 	movt	r0, #2
   1431e:	f003 fb42 	bl	179a6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14322:	900e      	str	r0, [sp, #56]	; 0x38
   14324:	e7ff      	b.n	14326 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x244>
   14326:	a846      	add	r0, sp, #280	; 0x118
   14328:	990e      	ldr	r1, [sp, #56]	; 0x38
   1432a:	f003 fb79 	bl	17a20 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1432e:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi init fail");
   14330:	f640 40ec 	movw	r0, #3308	; 0xcec
   14334:	f2c0 0002 	movt	r0, #2
   14338:	6800      	ldr	r0, [r0, #0]
   1433a:	a95d      	add	r1, sp, #372	; 0x174
   1433c:	915e      	str	r1, [sp, #376]	; 0x178
   1433e:	905f      	str	r0, [sp, #380]	; 0x17c
   14340:	985e      	ldr	r0, [sp, #376]	; 0x178
   14342:	9085      	str	r0, [sp, #532]	; 0x214
   14344:	995f      	ldr	r1, [sp, #380]	; 0x17c
   14346:	9186      	str	r1, [sp, #536]	; 0x218
   14348:	6802      	ldr	r2, [r0, #0]
   1434a:	680b      	ldr	r3, [r1, #0]
   1434c:	429a      	cmp	r2, r3
   1434e:	900d      	str	r0, [sp, #52]	; 0x34
   14350:	910c      	str	r1, [sp, #48]	; 0x30
   14352:	d109      	bne.n	14368 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x286>
   14354:	e7ff      	b.n	14356 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x274>
        self.spi_num = spi_num;
   14356:	9827      	ldr	r0, [sp, #156]	; 0x9c
   14358:	9928      	ldr	r1, [sp, #160]	; 0xa0
   1435a:	6008      	str	r0, [r1, #0]
        self.cs_pin  = cs_pin;
   1435c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1435e:	604a      	str	r2, [r1, #4]
   14360:	2001      	movs	r0, #1
        Ok(())
    }
   14362:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228
   14366:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "spi init fail");
   14368:	f640 5044 	movw	r0, #3396	; 0xd44
   1436c:	f2c0 0002 	movt	r0, #2
   14370:	6801      	ldr	r1, [r0, #0]
   14372:	980d      	ldr	r0, [sp, #52]	; 0x34
   14374:	906f      	str	r0, [sp, #444]	; 0x1bc
   14376:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14378:	9270      	str	r2, [sp, #448]	; 0x1c0
   1437a:	f640 53d4 	movw	r3, #3540	; 0xdd4
   1437e:	f2c0 0302 	movt	r3, #2
   14382:	681b      	ldr	r3, [r3, #0]
   14384:	f640 5c64 	movw	ip, #3428	; 0xd64
   14388:	f2c0 0c02 	movt	ip, #2
   1438c:	f8dc c000 	ldr.w	ip, [ip]
   14390:	46ee      	mov	lr, sp
   14392:	2400      	movs	r4, #0
   14394:	f8ce 4000 	str.w	r4, [lr]
   14398:	a871      	add	r0, sp, #452	; 0x1c4
   1439a:	2201      	movs	r2, #1
   1439c:	910b      	str	r1, [sp, #44]	; 0x2c
   1439e:	4619      	mov	r1, r3
   143a0:	4663      	mov	r3, ip
   143a2:	f7f4 fb7b 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   143a6:	e7ff      	b.n	143a8 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2c6>
   143a8:	a86f      	add	r0, sp, #444	; 0x1bc
   143aa:	906c      	str	r0, [sp, #432]	; 0x1b0
   143ac:	a870      	add	r0, sp, #448	; 0x1c0
   143ae:	906d      	str	r0, [sp, #436]	; 0x1b4
   143b0:	a871      	add	r0, sp, #452	; 0x1c4
   143b2:	906e      	str	r0, [sp, #440]	; 0x1b8
   143b4:	986c      	ldr	r0, [sp, #432]	; 0x1b0
   143b6:	9087      	str	r0, [sp, #540]	; 0x21c
   143b8:	996d      	ldr	r1, [sp, #436]	; 0x1b4
   143ba:	9188      	str	r1, [sp, #544]	; 0x220
   143bc:	9a6e      	ldr	r2, [sp, #440]	; 0x1b8
   143be:	9289      	str	r2, [sp, #548]	; 0x224
   143c0:	f249 23eb 	movw	r3, #37611	; 0x92eb
   143c4:	f2c0 0300 	movt	r3, #0
   143c8:	910a      	str	r1, [sp, #40]	; 0x28
   143ca:	4619      	mov	r1, r3
   143cc:	9209      	str	r2, [sp, #36]	; 0x24
   143ce:	f7f4 ffc4 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   143d2:	9008      	str	r0, [sp, #32]
   143d4:	9107      	str	r1, [sp, #28]
   143d6:	e7ff      	b.n	143d8 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2f6>
   143d8:	f249 21eb 	movw	r1, #37611	; 0x92eb
   143dc:	f2c0 0100 	movt	r1, #0
   143e0:	980a      	ldr	r0, [sp, #40]	; 0x28
   143e2:	f7f4 ffba 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   143e6:	9006      	str	r0, [sp, #24]
   143e8:	9105      	str	r1, [sp, #20]
   143ea:	e7ff      	b.n	143ec <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x30a>
   143ec:	f647 7183 	movw	r1, #32643	; 0x7f83
   143f0:	f2c0 0101 	movt	r1, #1
   143f4:	9809      	ldr	r0, [sp, #36]	; 0x24
   143f6:	f7f4 ffef 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   143fa:	9004      	str	r0, [sp, #16]
   143fc:	9103      	str	r1, [sp, #12]
   143fe:	e7ff      	b.n	14400 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x31e>
   14400:	9808      	ldr	r0, [sp, #32]
   14402:	9066      	str	r0, [sp, #408]	; 0x198
   14404:	9907      	ldr	r1, [sp, #28]
   14406:	9167      	str	r1, [sp, #412]	; 0x19c
   14408:	9a06      	ldr	r2, [sp, #24]
   1440a:	9268      	str	r2, [sp, #416]	; 0x1a0
   1440c:	9b05      	ldr	r3, [sp, #20]
   1440e:	9369      	str	r3, [sp, #420]	; 0x1a4
   14410:	f8dd c010 	ldr.w	ip, [sp, #16]
   14414:	f8cd c1a8 	str.w	ip, [sp, #424]	; 0x1a8
   14418:	f8dd e00c 	ldr.w	lr, [sp, #12]
   1441c:	f8cd e1ac 	str.w	lr, [sp, #428]	; 0x1ac
   14420:	466c      	mov	r4, sp
   14422:	2503      	movs	r5, #3
   14424:	6025      	str	r5, [r4, #0]
   14426:	a860      	add	r0, sp, #384	; 0x180
   14428:	ab66      	add	r3, sp, #408	; 0x198
   1442a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1442c:	462a      	mov	r2, r5
   1442e:	f7f4 fb35 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14432:	e7ff      	b.n	14434 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x352>
   14434:	f640 50d8 	movw	r0, #3544	; 0xdd8
   14438:	f2c0 0002 	movt	r0, #2
   1443c:	f003 fab3 	bl	179a6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14440:	9002      	str	r0, [sp, #8]
   14442:	e7ff      	b.n	14444 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x362>
   14444:	a860      	add	r0, sp, #384	; 0x180
   14446:	9902      	ldr	r1, [sp, #8]
   14448:	f003 faea 	bl	17a20 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1444c:	defe      	udf	#254	; 0xfe

0001444e <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl GPIO {
    /// Create a new output GPIO pin
    pub fn new() -> Self {
   1444e:	2000      	movs	r0, #0
        GPIO {
            pin: 0,
        }
    }
   14450:	4770      	bx	lr

00014452 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>:

    /// Initialise the output GPIO pin
    pub fn init(&mut self, pin: i32) -> MynewtResult<()> {
   14452:	b5b0      	push	{r4, r5, r7, lr}
   14454:	b0b0      	sub	sp, #192	; 0xc0
   14456:	9029      	str	r0, [sp, #164]	; 0xa4
   14458:	912a      	str	r1, [sp, #168]	; 0xa8
   1445a:	2200      	movs	r2, #0
        //  TODO: let dc = pins.d0.into_push_pull_output(&mut pins.port);
        //  TODO: let rst = pins.d1.into_push_pull_output(&mut pins.port);
        let rc = unsafe { hal::hal_gpio_init_out(pin, 0) };
   1445c:	900e      	str	r0, [sp, #56]	; 0x38
   1445e:	4608      	mov	r0, r1
   14460:	910d      	str	r1, [sp, #52]	; 0x34
   14462:	4611      	mov	r1, r2
   14464:	f005 fbf8 	bl	19c58 <hal_gpio_init_out>
   14468:	900f      	str	r0, [sp, #60]	; 0x3c
   1446a:	e7ff      	b.n	1446c <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x1a>
        assert_eq!(rc, 0, "gpio fail");
   1446c:	f640 40ec 	movw	r0, #3308	; 0xcec
   14470:	f2c0 0002 	movt	r0, #2
   14474:	6800      	ldr	r0, [r0, #0]
   14476:	a90f      	add	r1, sp, #60	; 0x3c
   14478:	9110      	str	r1, [sp, #64]	; 0x40
   1447a:	9011      	str	r0, [sp, #68]	; 0x44
   1447c:	9810      	ldr	r0, [sp, #64]	; 0x40
   1447e:	902b      	str	r0, [sp, #172]	; 0xac
   14480:	9911      	ldr	r1, [sp, #68]	; 0x44
   14482:	912c      	str	r1, [sp, #176]	; 0xb0
   14484:	6802      	ldr	r2, [r0, #0]
   14486:	680b      	ldr	r3, [r1, #0]
   14488:	429a      	cmp	r2, r3
   1448a:	900c      	str	r0, [sp, #48]	; 0x30
   1448c:	910b      	str	r1, [sp, #44]	; 0x2c
   1448e:	d106      	bne.n	1449e <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x4c>
   14490:	e7ff      	b.n	14492 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x40>
        self.pin = pin;
   14492:	980d      	ldr	r0, [sp, #52]	; 0x34
   14494:	990e      	ldr	r1, [sp, #56]	; 0x38
   14496:	6008      	str	r0, [r1, #0]
   14498:	2001      	movs	r0, #1
        Ok(())
    }
   1449a:	b030      	add	sp, #192	; 0xc0
   1449c:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "gpio fail");
   1449e:	f640 5044 	movw	r0, #3396	; 0xd44
   144a2:	f2c0 0002 	movt	r0, #2
   144a6:	6801      	ldr	r1, [r0, #0]
   144a8:	980c      	ldr	r0, [sp, #48]	; 0x30
   144aa:	9021      	str	r0, [sp, #132]	; 0x84
   144ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   144ae:	9222      	str	r2, [sp, #136]	; 0x88
   144b0:	f640 53fc 	movw	r3, #3580	; 0xdfc
   144b4:	f2c0 0302 	movt	r3, #2
   144b8:	681b      	ldr	r3, [r3, #0]
   144ba:	f640 5c64 	movw	ip, #3428	; 0xd64
   144be:	f2c0 0c02 	movt	ip, #2
   144c2:	f8dc c000 	ldr.w	ip, [ip]
   144c6:	46ee      	mov	lr, sp
   144c8:	2400      	movs	r4, #0
   144ca:	f8ce 4000 	str.w	r4, [lr]
   144ce:	a823      	add	r0, sp, #140	; 0x8c
   144d0:	2201      	movs	r2, #1
   144d2:	910a      	str	r1, [sp, #40]	; 0x28
   144d4:	4619      	mov	r1, r3
   144d6:	4663      	mov	r3, ip
   144d8:	f7f4 fae0 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   144dc:	e7ff      	b.n	144de <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x8c>
   144de:	a821      	add	r0, sp, #132	; 0x84
   144e0:	901e      	str	r0, [sp, #120]	; 0x78
   144e2:	a822      	add	r0, sp, #136	; 0x88
   144e4:	901f      	str	r0, [sp, #124]	; 0x7c
   144e6:	a823      	add	r0, sp, #140	; 0x8c
   144e8:	9020      	str	r0, [sp, #128]	; 0x80
   144ea:	981e      	ldr	r0, [sp, #120]	; 0x78
   144ec:	902d      	str	r0, [sp, #180]	; 0xb4
   144ee:	991f      	ldr	r1, [sp, #124]	; 0x7c
   144f0:	912e      	str	r1, [sp, #184]	; 0xb8
   144f2:	9a20      	ldr	r2, [sp, #128]	; 0x80
   144f4:	922f      	str	r2, [sp, #188]	; 0xbc
   144f6:	f249 23eb 	movw	r3, #37611	; 0x92eb
   144fa:	f2c0 0300 	movt	r3, #0
   144fe:	9109      	str	r1, [sp, #36]	; 0x24
   14500:	4619      	mov	r1, r3
   14502:	9208      	str	r2, [sp, #32]
   14504:	f7f4 ff29 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14508:	9007      	str	r0, [sp, #28]
   1450a:	9106      	str	r1, [sp, #24]
   1450c:	e7ff      	b.n	1450e <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xbc>
   1450e:	f249 21eb 	movw	r1, #37611	; 0x92eb
   14512:	f2c0 0100 	movt	r1, #0
   14516:	9809      	ldr	r0, [sp, #36]	; 0x24
   14518:	f7f4 ff1f 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1451c:	9005      	str	r0, [sp, #20]
   1451e:	9104      	str	r1, [sp, #16]
   14520:	e7ff      	b.n	14522 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xd0>
   14522:	f647 7183 	movw	r1, #32643	; 0x7f83
   14526:	f2c0 0101 	movt	r1, #1
   1452a:	9808      	ldr	r0, [sp, #32]
   1452c:	f7f4 ff54 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   14530:	9003      	str	r0, [sp, #12]
   14532:	9102      	str	r1, [sp, #8]
   14534:	e7ff      	b.n	14536 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xe4>
   14536:	9807      	ldr	r0, [sp, #28]
   14538:	9018      	str	r0, [sp, #96]	; 0x60
   1453a:	9906      	ldr	r1, [sp, #24]
   1453c:	9119      	str	r1, [sp, #100]	; 0x64
   1453e:	9a05      	ldr	r2, [sp, #20]
   14540:	921a      	str	r2, [sp, #104]	; 0x68
   14542:	9b04      	ldr	r3, [sp, #16]
   14544:	931b      	str	r3, [sp, #108]	; 0x6c
   14546:	f8dd c00c 	ldr.w	ip, [sp, #12]
   1454a:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
   1454e:	f8dd e008 	ldr.w	lr, [sp, #8]
   14552:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
   14556:	466c      	mov	r4, sp
   14558:	2503      	movs	r5, #3
   1455a:	6025      	str	r5, [r4, #0]
   1455c:	a812      	add	r0, sp, #72	; 0x48
   1455e:	ab18      	add	r3, sp, #96	; 0x60
   14560:	990a      	ldr	r1, [sp, #40]	; 0x28
   14562:	462a      	mov	r2, r5
   14564:	f7f4 fa9a 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14568:	e7ff      	b.n	1456a <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x118>
   1456a:	f640 6000 	movw	r0, #3584	; 0xe00
   1456e:	f2c0 0002 	movt	r0, #2
   14572:	f003 fa18 	bl	179a6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14576:	9001      	str	r0, [sp, #4]
   14578:	e7ff      	b.n	1457a <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x128>
   1457a:	a812      	add	r0, sp, #72	; 0x48
   1457c:	9901      	ldr	r1, [sp, #4]
   1457e:	f003 fa4f 	bl	17a20 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14582:	defe      	udf	#254	; 0xfe

00014584 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl embedded_hal::digital::v2::OutputPin for GPIO {
    /// Set the GPIO pin to low
    fn set_low(&mut self) -> Result<(), Self::Error> {
   14584:	b580      	push	{r7, lr}
   14586:	b082      	sub	sp, #8
   14588:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 0) };
   1458a:	6800      	ldr	r0, [r0, #0]
   1458c:	2100      	movs	r1, #0
   1458e:	f005 fb7f 	bl	19c90 <hal_gpio_write>
   14592:	e7ff      	b.n	14594 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E+0x10>
   14594:	2001      	movs	r0, #1
        Ok(())
    }
   14596:	b002      	add	sp, #8
   14598:	bd80      	pop	{r7, pc}

0001459a <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>:

    /// Set the GPIO pin to high
    fn set_high(&mut self) -> Result<(), Self::Error> {
   1459a:	b580      	push	{r7, lr}
   1459c:	b082      	sub	sp, #8
   1459e:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 1) };
   145a0:	6800      	ldr	r0, [r0, #0]
   145a2:	2101      	movs	r1, #1
   145a4:	f005 fb74 	bl	19c90 <hal_gpio_write>
   145a8:	e7ff      	b.n	145aa <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE+0x10>
   145aa:	2001      	movs	r0, #1
        Ok(())
    }
   145ac:	b002      	add	sp, #8
   145ae:	bd80      	pop	{r7, pc}

000145b0 <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>:
impl Delay {
    /// Create a new delay
    pub fn new() -> Self {
        Delay {
        }
    }
   145b0:	4770      	bx	lr

000145b2 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>:
}

/// Rust Embedded HAL interface for Mynewt Delay
impl embedded_hal::blocking::delay::DelayMs<u8> for Delay {
    /// Sleep for the specified number of milliseconds
    fn delay_ms(&mut self, ms: u8) {
   145b2:	b580      	push	{r7, lr}
   145b4:	b086      	sub	sp, #24
   145b6:	460a      	mov	r2, r1
   145b8:	9003      	str	r0, [sp, #12]
   145ba:	f88d 1013 	strb.w	r1, [sp, #19]
        //  TODO: Get this constant from Mynewt
        const OS_TICKS_PER_SEC: u32 = 1000;
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   145be:	b2c8      	uxtb	r0, r1
   145c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   145c4:	fba0 0101 	umull	r0, r1, r0, r1
   145c8:	2900      	cmp	r1, #0
   145ca:	9002      	str	r0, [sp, #8]
   145cc:	d110      	bne.n	145f0 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3e>
   145ce:	e7ff      	b.n	145d0 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x1e>
   145d0:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   145d4:	f2c1 0062 	movt	r0, #4194	; 0x1062
   145d8:	9902      	ldr	r1, [sp, #8]
   145da:	fba1 0200 	umull	r0, r2, r1, r0
   145de:	0992      	lsrs	r2, r2, #6
   145e0:	9205      	str	r2, [sp, #20]
        unsafe { os::os_time_delay(delay_ticks) };
   145e2:	9001      	str	r0, [sp, #4]
   145e4:	4610      	mov	r0, r2
   145e6:	f007 fb71 	bl	1bccc <os_time_delay>
   145ea:	e7ff      	b.n	145ec <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3a>
    }
   145ec:	b006      	add	sp, #24
   145ee:	bd80      	pop	{r7, pc}
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   145f0:	f640 6020 	movw	r0, #3616	; 0xe20
   145f4:	f2c0 0002 	movt	r0, #2
   145f8:	f640 6210 	movw	r2, #3600	; 0xe10
   145fc:	f2c0 0202 	movt	r2, #2
   14600:	2121      	movs	r1, #33	; 0x21
   14602:	f003 f9d7 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14606:	defe      	udf	#254	; 0xfe

00014608 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>:
   14608:	b082      	sub	sp, #8
   1460a:	9001      	str	r0, [sp, #4]
   1460c:	9000      	str	r0, [sp, #0]
   1460e:	e7ff      	b.n	14610 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E+0x8>
   14610:	9800      	ldr	r0, [sp, #0]
   14612:	fab0 f180 	clz	r1, r0
   14616:	0948      	lsrs	r0, r1, #5
   14618:	b002      	add	sp, #8
   1461a:	4770      	bx	lr

0001461c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE>:
   1461c:	b580      	push	{r7, lr}
   1461e:	b084      	sub	sp, #16
   14620:	9002      	str	r0, [sp, #8]
   14622:	9103      	str	r1, [sp, #12]
   14624:	f000 f805 	bl	14632 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>
   14628:	9001      	str	r0, [sp, #4]
   1462a:	e7ff      	b.n	1462c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE+0x10>
   1462c:	9801      	ldr	r0, [sp, #4]
   1462e:	b004      	add	sp, #16
   14630:	bd80      	pop	{r7, pc}

00014632 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>:
   14632:	b084      	sub	sp, #16
   14634:	9001      	str	r0, [sp, #4]
   14636:	9102      	str	r1, [sp, #8]
   14638:	4408      	add	r0, r1
   1463a:	9003      	str	r0, [sp, #12]
   1463c:	9803      	ldr	r0, [sp, #12]
   1463e:	9000      	str	r0, [sp, #0]
   14640:	e7ff      	b.n	14642 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE+0x10>
   14642:	9800      	ldr	r0, [sp, #0]
   14644:	b004      	add	sp, #16
   14646:	4770      	bx	lr

00014648 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>:
   14648:	b081      	sub	sp, #4
   1464a:	b001      	add	sp, #4
   1464c:	4770      	bx	lr

0001464e <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>:

macro_rules! impl_to_primitive_uint_to_uint {
    ($SrcT:ident : $( $(#[$cfg:meta])* fn $method:ident -> $DstT:ident ; )*) => {$(
        #[inline]
        $(#[$cfg])*
        fn $method(&self) -> Option<$DstT> {
   1464e:	b08a      	sub	sp, #40	; 0x28
   14650:	9005      	str	r0, [sp, #20]
   14652:	2100      	movs	r1, #0
            let max = $DstT::MAX as $SrcT;
   14654:	9107      	str	r1, [sp, #28]
   14656:	21ff      	movs	r1, #255	; 0xff
   14658:	9106      	str	r1, [sp, #24]
   1465a:	2108      	movs	r1, #8
   1465c:	9108      	str	r1, [sp, #32]
   1465e:	9908      	ldr	r1, [sp, #32]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   14660:	9003      	str	r0, [sp, #12]
   14662:	9102      	str	r1, [sp, #8]
   14664:	e016      	b.n	14694 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x46>
   14666:	2001      	movs	r0, #1
   14668:	f88d 0013 	strb.w	r0, [sp, #19]
   1466c:	e00c      	b.n	14688 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   1466e:	2000      	movs	r0, #0
   14670:	f88d 0013 	strb.w	r0, [sp, #19]
   14674:	e008      	b.n	14688 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   14676:	9803      	ldr	r0, [sp, #12]
   14678:	6801      	ldr	r1, [r0, #0]
   1467a:	6842      	ldr	r2, [r0, #4]
   1467c:	f5b1 7180 	subs.w	r1, r1, #256	; 0x100
   14680:	f172 0200 	sbcs.w	r2, r2, #0
   14684:	d3ef      	bcc.n	14666 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   14686:	e7f2      	b.n	1466e <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x20>
   14688:	f89d 0013 	ldrb.w	r0, [sp, #19]
   1468c:	07c0      	lsls	r0, r0, #31
   1468e:	2800      	cmp	r0, #0
   14690:	d10e      	bne.n	146b0 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x62>
   14692:	e009      	b.n	146a8 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x5a>
   14694:	2001      	movs	r0, #1
   14696:	9009      	str	r0, [sp, #36]	; 0x24
   14698:	9809      	ldr	r0, [sp, #36]	; 0x24
   1469a:	9001      	str	r0, [sp, #4]
   1469c:	e7ff      	b.n	1469e <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x50>
   1469e:	9802      	ldr	r0, [sp, #8]
   146a0:	9901      	ldr	r1, [sp, #4]
   146a2:	4288      	cmp	r0, r1
   146a4:	d9df      	bls.n	14666 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   146a6:	e7e6      	b.n	14676 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x28>
   146a8:	2000      	movs	r0, #0
                Some(*self as $DstT)
            } else {
                None
   146aa:	f88d 0010 	strb.w	r0, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   146ae:	e007      	b.n	146c0 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
                Some(*self as $DstT)
   146b0:	9803      	ldr	r0, [sp, #12]
   146b2:	7801      	ldrb	r1, [r0, #0]
   146b4:	f88d 1011 	strb.w	r1, [sp, #17]
   146b8:	2101      	movs	r1, #1
   146ba:	f88d 1010 	strb.w	r1, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   146be:	e7ff      	b.n	146c0 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
            }
        }
   146c0:	f89d 0010 	ldrb.w	r0, [sp, #16]
   146c4:	f89d 1011 	ldrb.w	r1, [sp, #17]
   146c8:	b00a      	add	sp, #40	; 0x28
   146ca:	4770      	bx	lr

000146cc <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE>:
   146cc:	b580      	push	{r7, lr}
   146ce:	b090      	sub	sp, #64	; 0x40
   146d0:	2200      	movs	r2, #0
   146d2:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
   146d6:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   146da:	2201      	movs	r2, #1
   146dc:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   146e0:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
   146e4:	680a      	ldr	r2, [r1, #0]
   146e6:	2a00      	cmp	r2, #0
   146e8:	9101      	str	r1, [sp, #4]
   146ea:	9000      	str	r0, [sp, #0]
   146ec:	d001      	beq.n	146f2 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x26>
   146ee:	e7ff      	b.n	146f0 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x24>
   146f0:	e004      	b.n	146fc <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x30>
   146f2:	2000      	movs	r0, #0
   146f4:	9900      	ldr	r1, [sp, #0]
   146f6:	6008      	str	r0, [r1, #0]
   146f8:	e032      	b.n	14760 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x94>
   146fa:	defe      	udf	#254	; 0xfe
   146fc:	2000      	movs	r0, #0
   146fe:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
   14702:	9901      	ldr	r1, [sp, #4]
   14704:	684a      	ldr	r2, [r1, #4]
   14706:	688b      	ldr	r3, [r1, #8]
   14708:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   1470c:	f8cd c010 	str.w	ip, [sp, #16]
   14710:	9303      	str	r3, [sp, #12]
   14712:	9202      	str	r2, [sp, #8]
   14714:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
   14718:	9802      	ldr	r0, [sp, #8]
   1471a:	9a03      	ldr	r2, [sp, #12]
   1471c:	9b04      	ldr	r3, [sp, #16]
   1471e:	930d      	str	r3, [sp, #52]	; 0x34
   14720:	920c      	str	r2, [sp, #48]	; 0x30
   14722:	900b      	str	r0, [sp, #44]	; 0x2c
   14724:	980b      	ldr	r0, [sp, #44]	; 0x2c
   14726:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14728:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1472a:	930a      	str	r3, [sp, #40]	; 0x28
   1472c:	9209      	str	r2, [sp, #36]	; 0x24
   1472e:	9008      	str	r0, [sp, #32]
   14730:	a805      	add	r0, sp, #20
   14732:	a908      	add	r1, sp, #32
   14734:	f002 f90a 	bl	1694c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E>
   14738:	e7ff      	b.n	1473a <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x6e>
   1473a:	9805      	ldr	r0, [sp, #20]
   1473c:	9906      	ldr	r1, [sp, #24]
   1473e:	9a07      	ldr	r2, [sp, #28]
   14740:	9b00      	ldr	r3, [sp, #0]
   14742:	60da      	str	r2, [r3, #12]
   14744:	6099      	str	r1, [r3, #8]
   14746:	6058      	str	r0, [r3, #4]
   14748:	2001      	movs	r0, #1
   1474a:	6018      	str	r0, [r3, #0]
   1474c:	e008      	b.n	14760 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x94>
   1474e:	9801      	ldr	r0, [sp, #4]
   14750:	6801      	ldr	r1, [r0, #0]
   14752:	2901      	cmp	r1, #1
   14754:	d00c      	beq.n	14770 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa4>
   14756:	e015      	b.n	14784 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xb8>
   14758:	2000      	movs	r0, #0
   1475a:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
   1475e:	e7f6      	b.n	1474e <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x82>
   14760:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
   14764:	07c0      	lsls	r0, r0, #31
   14766:	2800      	cmp	r0, #0
   14768:	d1f6      	bne.n	14758 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x8c>
   1476a:	e7f0      	b.n	1474e <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x82>
   1476c:	b010      	add	sp, #64	; 0x40
   1476e:	bd80      	pop	{r7, pc}
   14770:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   14774:	07c0      	lsls	r0, r0, #31
   14776:	2800      	cmp	r0, #0
   14778:	d0f8      	beq.n	1476c <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>
   1477a:	e7ff      	b.n	1477c <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xb0>
   1477c:	2000      	movs	r0, #0
   1477e:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
   14782:	e7f3      	b.n	1476c <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>
   14784:	e7f2      	b.n	1476c <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>

00014786 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>:
   14786:	b084      	sub	sp, #16
   14788:	9002      	str	r0, [sp, #8]
   1478a:	6801      	ldr	r1, [r0, #0]
   1478c:	2900      	cmp	r1, #0
   1478e:	9000      	str	r0, [sp, #0]
   14790:	d001      	beq.n	14796 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x10>
   14792:	e7ff      	b.n	14794 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0xe>
   14794:	e003      	b.n	1479e <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x18>
   14796:	2000      	movs	r0, #0
   14798:	9001      	str	r0, [sp, #4]
   1479a:	e006      	b.n	147aa <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   1479c:	defe      	udf	#254	; 0xfe
   1479e:	9800      	ldr	r0, [sp, #0]
   147a0:	f100 0108 	add.w	r1, r0, #8
   147a4:	9103      	str	r1, [sp, #12]
   147a6:	9101      	str	r1, [sp, #4]
   147a8:	e7ff      	b.n	147aa <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   147aa:	9801      	ldr	r0, [sp, #4]
   147ac:	b004      	add	sp, #16
   147ae:	4770      	bx	lr

000147b0 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE>:
   147b0:	b510      	push	{r4, lr}
   147b2:	b088      	sub	sp, #32
   147b4:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   147b8:	468e      	mov	lr, r1
   147ba:	4604      	mov	r4, r0
   147bc:	f8ad 0010 	strh.w	r0, [sp, #16]
   147c0:	f8ad 1012 	strh.w	r1, [sp, #18]
   147c4:	9205      	str	r2, [sp, #20]
   147c6:	9306      	str	r3, [sp, #24]
   147c8:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   147cc:	4601      	mov	r1, r0
   147ce:	2800      	cmp	r0, #0
   147d0:	9303      	str	r3, [sp, #12]
   147d2:	9202      	str	r2, [sp, #8]
   147d4:	f8cd c004 	str.w	ip, [sp, #4]
   147d8:	d001      	beq.n	147de <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x2e>
   147da:	e7ff      	b.n	147dc <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x2c>
   147dc:	e006      	b.n	147ec <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x3c>
   147de:	9802      	ldr	r0, [sp, #8]
   147e0:	9903      	ldr	r1, [sp, #12]
   147e2:	9a01      	ldr	r2, [sp, #4]
   147e4:	f003 f89c 	bl	17920 <_ZN4core6option13expect_failed17had6579abaad447b4E>
   147e8:	defe      	udf	#254	; 0xfe
   147ea:	defe      	udf	#254	; 0xfe
   147ec:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   147f0:	4601      	mov	r1, r0
   147f2:	f8ad 001e 	strh.w	r0, [sp, #30]
   147f6:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   147fa:	2801      	cmp	r0, #1
   147fc:	9100      	str	r1, [sp, #0]
   147fe:	d103      	bne.n	14808 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x58>
   14800:	e7ff      	b.n	14802 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x52>
   14802:	9800      	ldr	r0, [sp, #0]
   14804:	b008      	add	sp, #32
   14806:	bd10      	pop	{r4, pc}
   14808:	e7fb      	b.n	14802 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x52>

0001480a <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>:
   1480a:	b084      	sub	sp, #16
   1480c:	460b      	mov	r3, r1
   1480e:	4684      	mov	ip, r0
   14810:	f88d 000c 	strb.w	r0, [sp, #12]
   14814:	f88d 100d 	strb.w	r1, [sp, #13]
   14818:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1481c:	07c1      	lsls	r1, r0, #31
   1481e:	2900      	cmp	r1, #0
   14820:	9202      	str	r2, [sp, #8]
   14822:	d001      	beq.n	14828 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1e>
   14824:	e7ff      	b.n	14826 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1c>
   14826:	e009      	b.n	1483c <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x32>
   14828:	f640 6041 	movw	r0, #3649	; 0xe41
   1482c:	f2c0 0002 	movt	r0, #2
   14830:	212b      	movs	r1, #43	; 0x2b
   14832:	9a02      	ldr	r2, [sp, #8]
   14834:	f003 f8be 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14838:	defe      	udf	#254	; 0xfe
   1483a:	defe      	udf	#254	; 0xfe
   1483c:	f89d 000d 	ldrb.w	r0, [sp, #13]
   14840:	4601      	mov	r1, r0
   14842:	f88d 000f 	strb.w	r0, [sp, #15]
   14846:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1484a:	07c0      	lsls	r0, r0, #31
   1484c:	2800      	cmp	r0, #0
   1484e:	9101      	str	r1, [sp, #4]
   14850:	d003      	beq.n	1485a <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x50>
   14852:	e7ff      	b.n	14854 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>
   14854:	9801      	ldr	r0, [sp, #4]
   14856:	b004      	add	sp, #16
   14858:	4770      	bx	lr
   1485a:	e7fb      	b.n	14854 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>

0001485c <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>:
   1485c:	b088      	sub	sp, #32
   1485e:	9004      	str	r0, [sp, #16]
   14860:	9105      	str	r1, [sp, #20]
   14862:	9804      	ldr	r0, [sp, #16]
   14864:	2800      	cmp	r0, #0
   14866:	4601      	mov	r1, r0
   14868:	bf18      	it	ne
   1486a:	2101      	movne	r1, #1
   1486c:	2800      	cmp	r0, #0
   1486e:	9203      	str	r2, [sp, #12]
   14870:	d001      	beq.n	14876 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x1a>
   14872:	e7ff      	b.n	14874 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x18>
   14874:	e009      	b.n	1488a <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x2e>
   14876:	f640 6041 	movw	r0, #3649	; 0xe41
   1487a:	f2c0 0002 	movt	r0, #2
   1487e:	212b      	movs	r1, #43	; 0x2b
   14880:	9a03      	ldr	r2, [sp, #12]
   14882:	f003 f897 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14886:	defe      	udf	#254	; 0xfe
   14888:	defe      	udf	#254	; 0xfe
   1488a:	9804      	ldr	r0, [sp, #16]
   1488c:	9905      	ldr	r1, [sp, #20]
   1488e:	9006      	str	r0, [sp, #24]
   14890:	9107      	str	r1, [sp, #28]
   14892:	9a04      	ldr	r2, [sp, #16]
   14894:	2a00      	cmp	r2, #0
   14896:	9002      	str	r0, [sp, #8]
   14898:	9101      	str	r1, [sp, #4]
   1489a:	d004      	beq.n	148a6 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x4a>
   1489c:	e7ff      	b.n	1489e <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>
   1489e:	9802      	ldr	r0, [sp, #8]
   148a0:	9901      	ldr	r1, [sp, #4]
   148a2:	b008      	add	sp, #32
   148a4:	4770      	bx	lr
   148a6:	e7fa      	b.n	1489e <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>

000148a8 <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>:
   148a8:	b580      	push	{r7, lr}
   148aa:	b082      	sub	sp, #8
   148ac:	9001      	str	r0, [sp, #4]
   148ae:	f000 f82b 	bl	14908 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>
   148b2:	9000      	str	r0, [sp, #0]
   148b4:	e7ff      	b.n	148b6 <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E+0xe>
   148b6:	2001      	movs	r0, #1
   148b8:	9900      	ldr	r1, [sp, #0]
   148ba:	4388      	bics	r0, r1
   148bc:	b002      	add	sp, #8
   148be:	bd80      	pop	{r7, pc}

000148c0 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>:
   148c0:	b082      	sub	sp, #8
   148c2:	9001      	str	r0, [sp, #4]
   148c4:	6800      	ldr	r0, [r0, #0]
   148c6:	2800      	cmp	r0, #0
   148c8:	d104      	bne.n	148d4 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x14>
   148ca:	e7ff      	b.n	148cc <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0xc>
   148cc:	2000      	movs	r0, #0
   148ce:	f88d 0003 	strb.w	r0, [sp, #3]
   148d2:	e003      	b.n	148dc <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   148d4:	2001      	movs	r0, #1
   148d6:	f88d 0003 	strb.w	r0, [sp, #3]
   148da:	e7ff      	b.n	148dc <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   148dc:	f89d 0003 	ldrb.w	r0, [sp, #3]
   148e0:	b002      	add	sp, #8
   148e2:	4770      	bx	lr

000148e4 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E>:
   148e4:	b082      	sub	sp, #8
   148e6:	9001      	str	r0, [sp, #4]
   148e8:	6800      	ldr	r0, [r0, #0]
   148ea:	2801      	cmp	r0, #1
   148ec:	d004      	beq.n	148f8 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x14>
   148ee:	e7ff      	b.n	148f0 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0xc>
   148f0:	2000      	movs	r0, #0
   148f2:	f88d 0003 	strb.w	r0, [sp, #3]
   148f6:	e003      	b.n	14900 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x1c>
   148f8:	2001      	movs	r0, #1
   148fa:	f88d 0003 	strb.w	r0, [sp, #3]
   148fe:	e7ff      	b.n	14900 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x1c>
   14900:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14904:	b002      	add	sp, #8
   14906:	4770      	bx	lr

00014908 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>:
   14908:	b082      	sub	sp, #8
   1490a:	9001      	str	r0, [sp, #4]
   1490c:	8800      	ldrh	r0, [r0, #0]
   1490e:	2801      	cmp	r0, #1
   14910:	d004      	beq.n	1491c <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x14>
   14912:	e7ff      	b.n	14914 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0xc>
   14914:	2000      	movs	r0, #0
   14916:	f88d 0003 	strb.w	r0, [sp, #3]
   1491a:	e003      	b.n	14924 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x1c>
   1491c:	2001      	movs	r0, #1
   1491e:	f88d 0003 	strb.w	r0, [sp, #3]
   14922:	e7ff      	b.n	14924 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x1c>
   14924:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14928:	b002      	add	sp, #8
   1492a:	4770      	bx	lr

0001492c <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>:
   1492c:	b580      	push	{r7, lr}
   1492e:	b086      	sub	sp, #24
   14930:	9000      	str	r0, [sp, #0]
   14932:	2000      	movs	r0, #0
   14934:	f88d 000f 	strb.w	r0, [sp, #15]
   14938:	f88d 000e 	strb.w	r0, [sp, #14]
   1493c:	2001      	movs	r0, #1
   1493e:	f88d 000f 	strb.w	r0, [sp, #15]
   14942:	f88d 000e 	strb.w	r0, [sp, #14]
   14946:	9800      	ldr	r0, [sp, #0]
   14948:	2800      	cmp	r0, #0
   1494a:	4601      	mov	r1, r0
   1494c:	bf18      	it	ne
   1494e:	2101      	movne	r1, #1
   14950:	2800      	cmp	r0, #0
   14952:	d001      	beq.n	14958 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2c>
   14954:	e7ff      	b.n	14956 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2a>
   14956:	e004      	b.n	14962 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x36>
   14958:	2000      	movs	r0, #0
   1495a:	f88d 0004 	strb.w	r0, [sp, #4]
   1495e:	e019      	b.n	14994 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   14960:	defe      	udf	#254	; 0xfe
   14962:	2000      	movs	r0, #0
   14964:	f88d 000f 	strb.w	r0, [sp, #15]
   14968:	9900      	ldr	r1, [sp, #0]
   1496a:	9105      	str	r1, [sp, #20]
   1496c:	f88d 000e 	strb.w	r0, [sp, #14]
   14970:	9102      	str	r1, [sp, #8]
   14972:	9802      	ldr	r0, [sp, #8]
   14974:	f7f5 feb7 	bl	a6e6 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>
   14978:	f88d 1005 	strb.w	r1, [sp, #5]
   1497c:	f88d 0004 	strb.w	r0, [sp, #4]
   14980:	e7ff      	b.n	14982 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x56>
   14982:	e007      	b.n	14994 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   14984:	9800      	ldr	r0, [sp, #0]
   14986:	2800      	cmp	r0, #0
   14988:	d110      	bne.n	149ac <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x80>
   1498a:	e019      	b.n	149c0 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x94>
   1498c:	2000      	movs	r0, #0
   1498e:	f88d 000e 	strb.w	r0, [sp, #14]
   14992:	e7f7      	b.n	14984 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   14994:	f89d 000e 	ldrb.w	r0, [sp, #14]
   14998:	07c0      	lsls	r0, r0, #31
   1499a:	2800      	cmp	r0, #0
   1499c:	d1f6      	bne.n	1498c <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x60>
   1499e:	e7f1      	b.n	14984 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   149a0:	f89d 0004 	ldrb.w	r0, [sp, #4]
   149a4:	f89d 1005 	ldrb.w	r1, [sp, #5]
   149a8:	b006      	add	sp, #24
   149aa:	bd80      	pop	{r7, pc}
   149ac:	f89d 000f 	ldrb.w	r0, [sp, #15]
   149b0:	07c0      	lsls	r0, r0, #31
   149b2:	2800      	cmp	r0, #0
   149b4:	d0f4      	beq.n	149a0 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   149b6:	e7ff      	b.n	149b8 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x8c>
   149b8:	2000      	movs	r0, #0
   149ba:	f88d 000f 	strb.w	r0, [sp, #15]
   149be:	e7ef      	b.n	149a0 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   149c0:	e7ee      	b.n	149a0 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>

000149c2 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>:
    fn clone(&self) -> Self {
   149c2:	b580      	push	{r7, lr}
   149c4:	b09c      	sub	sp, #112	; 0x70
   149c6:	911b      	str	r1, [sp, #108]	; 0x6c
   149c8:	aa01      	add	r2, sp, #4
        Vec(self.0.clone())
   149ca:	9000      	str	r0, [sp, #0]
   149cc:	4610      	mov	r0, r2
   149ce:	f000 fafc 	bl	14fca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE>
   149d2:	e7ff      	b.n	149d4 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE+0x12>
   149d4:	a901      	add	r1, sp, #4
   149d6:	2268      	movs	r2, #104	; 0x68
   149d8:	9800      	ldr	r0, [sp, #0]
   149da:	f009 fbbf 	bl	1e15c <__aeabi_memcpy>
    }
   149de:	b01c      	add	sp, #112	; 0x70
   149e0:	bd80      	pop	{r7, pc}

000149e2 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>:
    fn clone(&self) -> Self {
   149e2:	b580      	push	{r7, lr}
   149e4:	b0b6      	sub	sp, #216	; 0xd8
   149e6:	9135      	str	r1, [sp, #212]	; 0xd4
   149e8:	aa02      	add	r2, sp, #8
        Vec(self.0.clone())
   149ea:	9001      	str	r0, [sp, #4]
   149ec:	4610      	mov	r0, r2
   149ee:	f000 fb14 	bl	1501a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E>
   149f2:	e7ff      	b.n	149f4 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E+0x12>
   149f4:	a902      	add	r1, sp, #8
   149f6:	22cc      	movs	r2, #204	; 0xcc
   149f8:	9801      	ldr	r0, [sp, #4]
   149fa:	f009 fbaf 	bl	1e15c <__aeabi_memcpy>
    }
   149fe:	b036      	add	sp, #216	; 0xd8
   14a00:	bd80      	pop	{r7, pc}

00014a02 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E>:
    fn drop(&mut self) {
   14a02:	b580      	push	{r7, lr}
   14a04:	b084      	sub	sp, #16
   14a06:	9003      	str	r0, [sp, #12]
        unsafe { ptr::drop_in_place(&mut self[..]) }
   14a08:	f000 f84c 	bl	14aa4 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E>
   14a0c:	9002      	str	r0, [sp, #8]
   14a0e:	9101      	str	r1, [sp, #4]
   14a10:	e7ff      	b.n	14a12 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x10>
   14a12:	9802      	ldr	r0, [sp, #8]
   14a14:	9901      	ldr	r1, [sp, #4]
   14a16:	f001 fb7b 	bl	16110 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>
   14a1a:	e7ff      	b.n	14a1c <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x1a>
   14a1c:	e7ff      	b.n	14a1e <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x1c>
    }
   14a1e:	b004      	add	sp, #16
   14a20:	bd80      	pop	{r7, pc}

00014a22 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E>:
    fn drop(&mut self) {
   14a22:	b580      	push	{r7, lr}
   14a24:	b084      	sub	sp, #16
   14a26:	9003      	str	r0, [sp, #12]
        unsafe { ptr::drop_in_place(&mut self[..]) }
   14a28:	f000 f848 	bl	14abc <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>
   14a2c:	9002      	str	r0, [sp, #8]
   14a2e:	9101      	str	r1, [sp, #4]
   14a30:	e7ff      	b.n	14a32 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x10>
   14a32:	9802      	ldr	r0, [sp, #8]
   14a34:	9901      	ldr	r1, [sp, #4]
   14a36:	f001 fb6b 	bl	16110 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>
   14a3a:	e7ff      	b.n	14a3c <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x1a>
   14a3c:	e7ff      	b.n	14a3e <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x1c>
    }
   14a3e:	b004      	add	sp, #16
   14a40:	bd80      	pop	{r7, pc}

00014a42 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>:
    fn deref(&self) -> &[T] {
   14a42:	b580      	push	{r7, lr}
   14a44:	b084      	sub	sp, #16
   14a46:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   14a48:	f000 fb0f 	bl	1506a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>
   14a4c:	9002      	str	r0, [sp, #8]
   14a4e:	9101      	str	r1, [sp, #4]
   14a50:	e7ff      	b.n	14a52 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E+0x10>
    }
   14a52:	9802      	ldr	r0, [sp, #8]
   14a54:	9901      	ldr	r1, [sp, #4]
   14a56:	b004      	add	sp, #16
   14a58:	bd80      	pop	{r7, pc}

00014a5a <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E>:
    fn deref(&self) -> &[T] {
   14a5a:	b580      	push	{r7, lr}
   14a5c:	b084      	sub	sp, #16
   14a5e:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   14a60:	f000 fb18 	bl	15094 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>
   14a64:	9002      	str	r0, [sp, #8]
   14a66:	9101      	str	r1, [sp, #4]
   14a68:	e7ff      	b.n	14a6a <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E+0x10>
    }
   14a6a:	9802      	ldr	r0, [sp, #8]
   14a6c:	9901      	ldr	r1, [sp, #4]
   14a6e:	b004      	add	sp, #16
   14a70:	bd80      	pop	{r7, pc}

00014a72 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E>:
    fn drop(&mut self) {
   14a72:	b580      	push	{r7, lr}
   14a74:	b086      	sub	sp, #24
   14a76:	9005      	str	r0, [sp, #20]
            ptr::drop_in_place(&mut self.vec[self.next..]);
   14a78:	9003      	str	r0, [sp, #12]
   14a7a:	f000 f81f 	bl	14abc <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>
   14a7e:	9002      	str	r0, [sp, #8]
   14a80:	9101      	str	r1, [sp, #4]
   14a82:	e7ff      	b.n	14a84 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x12>
   14a84:	9803      	ldr	r0, [sp, #12]
   14a86:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   14a8a:	9104      	str	r1, [sp, #16]
   14a8c:	9a04      	ldr	r2, [sp, #16]
   14a8e:	9802      	ldr	r0, [sp, #8]
   14a90:	9901      	ldr	r1, [sp, #4]
   14a92:	f001 fb4a 	bl	1612a <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E>
   14a96:	e7ff      	b.n	14a98 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x26>
   14a98:	e7ff      	b.n	14a9a <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x28>
   14a9a:	2000      	movs	r0, #0
            self.vec.0.len = 0;
   14a9c:	9903      	ldr	r1, [sp, #12]
   14a9e:	6008      	str	r0, [r1, #0]
    }
   14aa0:	b006      	add	sp, #24
   14aa2:	bd80      	pop	{r7, pc}

00014aa4 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E>:

impl<T, N> ops::DerefMut for Vec<T, N>
where
    N: ArrayLength<T>,
{
    fn deref_mut(&mut self) -> &mut [T] {
   14aa4:	b580      	push	{r7, lr}
   14aa6:	b084      	sub	sp, #16
   14aa8:	9003      	str	r0, [sp, #12]
        self.0.as_mut_slice()
   14aaa:	f000 f8ff 	bl	14cac <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>
   14aae:	9002      	str	r0, [sp, #8]
   14ab0:	9101      	str	r1, [sp, #4]
   14ab2:	e7ff      	b.n	14ab4 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E+0x10>
    }
   14ab4:	9802      	ldr	r0, [sp, #8]
   14ab6:	9901      	ldr	r1, [sp, #4]
   14ab8:	b004      	add	sp, #16
   14aba:	bd80      	pop	{r7, pc}

00014abc <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>:
    fn deref_mut(&mut self) -> &mut [T] {
   14abc:	b580      	push	{r7, lr}
   14abe:	b084      	sub	sp, #16
   14ac0:	9003      	str	r0, [sp, #12]
        self.0.as_mut_slice()
   14ac2:	f000 f908 	bl	14cd6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>
   14ac6:	9002      	str	r0, [sp, #8]
   14ac8:	9101      	str	r1, [sp, #4]
   14aca:	e7ff      	b.n	14acc <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E+0x10>
    }
   14acc:	9802      	ldr	r0, [sp, #8]
   14ace:	9901      	ldr	r1, [sp, #4]
   14ad0:	b004      	add	sp, #16
   14ad2:	bd80      	pop	{r7, pc}

00014ad4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>:
    pub fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   14ad4:	b580      	push	{r7, lr}
   14ad6:	b084      	sub	sp, #16
   14ad8:	9001      	str	r0, [sp, #4]
   14ada:	9102      	str	r1, [sp, #8]
   14adc:	9203      	str	r2, [sp, #12]
        self.0.extend_from_slice(other)
   14ade:	f000 f973 	bl	14dc8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>
   14ae2:	9000      	str	r0, [sp, #0]
   14ae4:	e7ff      	b.n	14ae6 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE+0x12>
    }
   14ae6:	9800      	ldr	r0, [sp, #0]
   14ae8:	f000 0001 	and.w	r0, r0, #1
   14aec:	b004      	add	sp, #16
   14aee:	bd80      	pop	{r7, pc}

00014af0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E>:
    pub fn new() -> Self {
   14af0:	b580      	push	{r7, lr}
   14af2:	b09c      	sub	sp, #112	; 0x70
   14af4:	a902      	add	r1, sp, #8
        Vec(crate::i::Vec::new())
   14af6:	9001      	str	r0, [sp, #4]
   14af8:	4608      	mov	r0, r1
   14afa:	f000 f8c8 	bl	14c8e <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>
   14afe:	e7ff      	b.n	14b00 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E+0x10>
   14b00:	a902      	add	r1, sp, #8
   14b02:	2268      	movs	r2, #104	; 0x68
   14b04:	9801      	ldr	r0, [sp, #4]
   14b06:	f009 fb29 	bl	1e15c <__aeabi_memcpy>
    }
   14b0a:	b01c      	add	sp, #112	; 0x70
   14b0c:	bd80      	pop	{r7, pc}

00014b0e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE>:
    pub fn new() -> Self {
   14b0e:	b580      	push	{r7, lr}
   14b10:	b0b4      	sub	sp, #208	; 0xd0
   14b12:	a901      	add	r1, sp, #4
        Vec(crate::i::Vec::new())
   14b14:	9000      	str	r0, [sp, #0]
   14b16:	4608      	mov	r0, r1
   14b18:	f000 f8aa 	bl	14c70 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>
   14b1c:	e7ff      	b.n	14b1e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE+0x10>
   14b1e:	a901      	add	r1, sp, #4
   14b20:	22cc      	movs	r2, #204	; 0xcc
   14b22:	9800      	ldr	r0, [sp, #0]
   14b24:	f009 fb1a 	bl	1e15c <__aeabi_memcpy>
    }
   14b28:	b034      	add	sp, #208	; 0xd0
   14b2a:	bd80      	pop	{r7, pc}

00014b2c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>:
    pub fn push(&mut self, item: T) -> Result<(), T> {
   14b2c:	b580      	push	{r7, lr}
   14b2e:	b086      	sub	sp, #24
   14b30:	460a      	mov	r2, r1
   14b32:	9004      	str	r0, [sp, #16]
   14b34:	f8ad 1016 	strh.w	r1, [sp, #22]
        self.0.push(item)
   14b38:	9203      	str	r2, [sp, #12]
   14b3a:	f000 fa0b 	bl	14f54 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E>
   14b3e:	9002      	str	r0, [sp, #8]
   14b40:	9101      	str	r1, [sp, #4]
   14b42:	e7ff      	b.n	14b44 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE+0x18>
    }
   14b44:	9802      	ldr	r0, [sp, #8]
   14b46:	9901      	ldr	r1, [sp, #4]
   14b48:	b006      	add	sp, #24
   14b4a:	bd80      	pop	{r7, pc}

00014b4c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>:
    pub fn clear(&mut self) {
   14b4c:	b580      	push	{r7, lr}
   14b4e:	b082      	sub	sp, #8
   14b50:	9001      	str	r0, [sp, #4]
        self.0.clear()
   14b52:	f000 fa28 	bl	14fa6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE>
   14b56:	e7ff      	b.n	14b58 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E+0xc>
    }
   14b58:	b002      	add	sp, #8
   14b5a:	bd80      	pop	{r7, pc}

00014b5c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>:
    pub fn clear(&mut self) {
   14b5c:	b580      	push	{r7, lr}
   14b5e:	b082      	sub	sp, #8
   14b60:	9001      	str	r0, [sp, #4]
        self.0.clear()
   14b62:	f000 fa29 	bl	14fb8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E>
   14b66:	e7ff      	b.n	14b68 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E+0xc>
    }
   14b68:	b002      	add	sp, #8
   14b6a:	bd80      	pop	{r7, pc}

00014b6c <_ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE>:
    fn into_iter(self) -> Self::IntoIter {
   14b6c:	b580      	push	{r7, lr}
   14b6e:	b0b6      	sub	sp, #216	; 0xd8
   14b70:	aa03      	add	r2, sp, #12
   14b72:	23cc      	movs	r3, #204	; 0xcc
        IntoIter { vec: self, next: 0 }
   14b74:	9002      	str	r0, [sp, #8]
   14b76:	4610      	mov	r0, r2
   14b78:	9201      	str	r2, [sp, #4]
   14b7a:	461a      	mov	r2, r3
   14b7c:	9300      	str	r3, [sp, #0]
   14b7e:	f009 faed 	bl	1e15c <__aeabi_memcpy>
   14b82:	9802      	ldr	r0, [sp, #8]
   14b84:	9901      	ldr	r1, [sp, #4]
   14b86:	9a00      	ldr	r2, [sp, #0]
   14b88:	f009 fae8 	bl	1e15c <__aeabi_memcpy>
   14b8c:	2000      	movs	r0, #0
   14b8e:	9902      	ldr	r1, [sp, #8]
   14b90:	f8c1 00cc 	str.w	r0, [r1, #204]	; 0xcc
    }
   14b94:	b036      	add	sp, #216	; 0xd8
   14b96:	bd80      	pop	{r7, pc}

00014b98 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E>:
    fn next(&mut self) -> Option<Self::Item> {
   14b98:	b580      	push	{r7, lr}
   14b9a:	b08e      	sub	sp, #56	; 0x38
   14b9c:	900a      	str	r0, [sp, #40]	; 0x28
        if self.next < self.vec.len() {
   14b9e:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   14ba2:	9008      	str	r0, [sp, #32]
   14ba4:	9107      	str	r1, [sp, #28]
   14ba6:	f7ff ff58 	bl	14a5a <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E>
   14baa:	9006      	str	r0, [sp, #24]
   14bac:	9105      	str	r1, [sp, #20]
   14bae:	e7ff      	b.n	14bb0 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x18>
   14bb0:	9806      	ldr	r0, [sp, #24]
   14bb2:	9905      	ldr	r1, [sp, #20]
   14bb4:	f001 fa59 	bl	1606a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   14bb8:	9004      	str	r0, [sp, #16]
   14bba:	e7ff      	b.n	14bbc <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x24>
   14bbc:	9807      	ldr	r0, [sp, #28]
   14bbe:	9904      	ldr	r1, [sp, #16]
   14bc0:	4288      	cmp	r0, r1
   14bc2:	d304      	bcc.n	14bce <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x36>
   14bc4:	e7ff      	b.n	14bc6 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x2e>
   14bc6:	2000      	movs	r0, #0
            None
   14bc8:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
        if self.next < self.vec.len() {
   14bcc:	e029      	b.n	14c22 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x8a>
                (self.vec.0.buffer.as_ptr() as *const T)
   14bce:	9808      	ldr	r0, [sp, #32]
   14bd0:	1d01      	adds	r1, r0, #4
   14bd2:	910c      	str	r1, [sp, #48]	; 0x30
   14bd4:	910d      	str	r1, [sp, #52]	; 0x34
   14bd6:	9103      	str	r1, [sp, #12]
   14bd8:	e7ff      	b.n	14bda <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x42>
                    .add(self.next)
   14bda:	9808      	ldr	r0, [sp, #32]
   14bdc:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
                (self.vec.0.buffer.as_ptr() as *const T)
   14be0:	9803      	ldr	r0, [sp, #12]
   14be2:	f002 fc0c 	bl	173fe <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>
   14be6:	9002      	str	r0, [sp, #8]
   14be8:	e7ff      	b.n	14bea <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x52>
   14bea:	9802      	ldr	r0, [sp, #8]
   14bec:	f002 fc12 	bl	17414 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E>
   14bf0:	4601      	mov	r1, r0
   14bf2:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
   14bf6:	9101      	str	r1, [sp, #4]
   14bf8:	e7ff      	b.n	14bfa <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x62>
            self.next += 1;
   14bfa:	9808      	ldr	r0, [sp, #32]
   14bfc:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   14c00:	1c4a      	adds	r2, r1, #1
   14c02:	4613      	mov	r3, r2
   14c04:	428a      	cmp	r2, r1
   14c06:	9300      	str	r3, [sp, #0]
   14c08:	d311      	bcc.n	14c2e <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x96>
   14c0a:	e7ff      	b.n	14c0c <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x74>
   14c0c:	9800      	ldr	r0, [sp, #0]
   14c0e:	9908      	ldr	r1, [sp, #32]
   14c10:	f8c1 00cc 	str.w	r0, [r1, #204]	; 0xcc
            Some(item)
   14c14:	9a01      	ldr	r2, [sp, #4]
   14c16:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
   14c1a:	2301      	movs	r3, #1
   14c1c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        if self.next < self.vec.len() {
   14c20:	e7ff      	b.n	14c22 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x8a>
    }
   14c22:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   14c26:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
   14c2a:	b00e      	add	sp, #56	; 0x38
   14c2c:	bd80      	pop	{r7, pc}
            self.next += 1;
   14c2e:	f640 60e0 	movw	r0, #3808	; 0xee0
   14c32:	f2c0 0002 	movt	r0, #2
   14c36:	f640 62c4 	movw	r2, #3780	; 0xec4
   14c3a:	f2c0 0202 	movt	r2, #2
   14c3e:	211c      	movs	r1, #28
   14c40:	f002 feb8 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14c44:	defe      	udf	#254	; 0xfe

00014c46 <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE>:
   14c46:	b580      	push	{r7, lr}
   14c48:	b084      	sub	sp, #16
   14c4a:	9002      	str	r0, [sp, #8]
   14c4c:	9103      	str	r1, [sp, #12]
   14c4e:	f640 60fc 	movw	r0, #3836	; 0xefc
   14c52:	f2c0 0002 	movt	r0, #2
   14c56:	2202      	movs	r2, #2
   14c58:	9001      	str	r0, [sp, #4]
   14c5a:	4608      	mov	r0, r1
   14c5c:	9901      	ldr	r1, [sp, #4]
   14c5e:	f003 fbc9 	bl	183f4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>
   14c62:	9000      	str	r0, [sp, #0]
   14c64:	e7ff      	b.n	14c66 <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE+0x20>
   14c66:	9800      	ldr	r0, [sp, #0]
   14c68:	f000 0001 	and.w	r0, r0, #1
   14c6c:	b004      	add	sp, #16
   14c6e:	bd80      	pop	{r7, pc}

00014c70 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>:
    pub const fn new() -> Self {
   14c70:	b580      	push	{r7, lr}
   14c72:	b0b4      	sub	sp, #208	; 0xd0
            buffer: MaybeUninit::uninit(),
   14c74:	9001      	str	r0, [sp, #4]
   14c76:	e7ff      	b.n	14c78 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE+0x8>
        Self {
   14c78:	9801      	ldr	r0, [sp, #4]
   14c7a:	3004      	adds	r0, #4
   14c7c:	a902      	add	r1, sp, #8
   14c7e:	22c8      	movs	r2, #200	; 0xc8
   14c80:	f009 fa6c 	bl	1e15c <__aeabi_memcpy>
   14c84:	2100      	movs	r1, #0
   14c86:	9a01      	ldr	r2, [sp, #4]
   14c88:	6011      	str	r1, [r2, #0]
    }
   14c8a:	b034      	add	sp, #208	; 0xd0
   14c8c:	bd80      	pop	{r7, pc}

00014c8e <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>:
    pub const fn new() -> Self {
   14c8e:	b580      	push	{r7, lr}
   14c90:	b09a      	sub	sp, #104	; 0x68
            buffer: MaybeUninit::uninit(),
   14c92:	9000      	str	r0, [sp, #0]
   14c94:	e7ff      	b.n	14c96 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE+0x8>
        Self {
   14c96:	9800      	ldr	r0, [sp, #0]
   14c98:	3004      	adds	r0, #4
   14c9a:	a901      	add	r1, sp, #4
   14c9c:	2264      	movs	r2, #100	; 0x64
   14c9e:	f009 fa5d 	bl	1e15c <__aeabi_memcpy>
   14ca2:	2100      	movs	r1, #0
   14ca4:	9a00      	ldr	r2, [sp, #0]
   14ca6:	6011      	str	r1, [r2, #0]
    }
   14ca8:	b01a      	add	sp, #104	; 0x68
   14caa:	bd80      	pop	{r7, pc}

00014cac <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   14cac:	b580      	push	{r7, lr}
   14cae:	b088      	sub	sp, #32
   14cb0:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   14cb2:	1d01      	adds	r1, r0, #4
   14cb4:	9106      	str	r1, [sp, #24]
   14cb6:	9107      	str	r1, [sp, #28]
   14cb8:	9004      	str	r0, [sp, #16]
   14cba:	9103      	str	r1, [sp, #12]
   14cbc:	e7ff      	b.n	14cbe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E+0x12>
   14cbe:	9804      	ldr	r0, [sp, #16]
   14cc0:	6801      	ldr	r1, [r0, #0]
   14cc2:	9803      	ldr	r0, [sp, #12]
   14cc4:	f001 f9ad 	bl	16022 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   14cc8:	9002      	str	r0, [sp, #8]
   14cca:	9101      	str	r1, [sp, #4]
   14ccc:	e7ff      	b.n	14cce <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E+0x22>
    }
   14cce:	9802      	ldr	r0, [sp, #8]
   14cd0:	9901      	ldr	r1, [sp, #4]
   14cd2:	b008      	add	sp, #32
   14cd4:	bd80      	pop	{r7, pc}

00014cd6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   14cd6:	b580      	push	{r7, lr}
   14cd8:	b088      	sub	sp, #32
   14cda:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   14cdc:	1d01      	adds	r1, r0, #4
   14cde:	9106      	str	r1, [sp, #24]
   14ce0:	9107      	str	r1, [sp, #28]
   14ce2:	9004      	str	r0, [sp, #16]
   14ce4:	9103      	str	r1, [sp, #12]
   14ce6:	e7ff      	b.n	14ce8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE+0x12>
   14ce8:	9804      	ldr	r0, [sp, #16]
   14cea:	6801      	ldr	r1, [r0, #0]
   14cec:	9803      	ldr	r0, [sp, #12]
   14cee:	f001 f998 	bl	16022 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   14cf2:	9002      	str	r0, [sp, #8]
   14cf4:	9101      	str	r1, [sp, #4]
   14cf6:	e7ff      	b.n	14cf8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE+0x22>
    }
   14cf8:	9802      	ldr	r0, [sp, #8]
   14cfa:	9901      	ldr	r1, [sp, #4]
   14cfc:	b008      	add	sp, #32
   14cfe:	bd80      	pop	{r7, pc}

00014d00 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   14d00:	b580      	push	{r7, lr}
   14d02:	b08a      	sub	sp, #40	; 0x28
   14d04:	460a      	mov	r2, r1
   14d06:	9006      	str	r0, [sp, #24]
   14d08:	f8ad 101e 	strh.w	r1, [sp, #30]
        (self.buffer.as_mut_ptr() as *mut T)
   14d0c:	1d01      	adds	r1, r0, #4
   14d0e:	9108      	str	r1, [sp, #32]
   14d10:	9109      	str	r1, [sp, #36]	; 0x24
   14d12:	9005      	str	r0, [sp, #20]
   14d14:	9204      	str	r2, [sp, #16]
   14d16:	9103      	str	r1, [sp, #12]
   14d18:	e7ff      	b.n	14d1a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x1a>
            .add(self.len)
   14d1a:	9805      	ldr	r0, [sp, #20]
   14d1c:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   14d1e:	9803      	ldr	r0, [sp, #12]
   14d20:	f001 fa9c 	bl	1625c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   14d24:	9002      	str	r0, [sp, #8]
   14d26:	e7ff      	b.n	14d28 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x28>
   14d28:	9802      	ldr	r0, [sp, #8]
   14d2a:	9904      	ldr	r1, [sp, #16]
   14d2c:	f001 faa1 	bl	16272 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>
   14d30:	e7ff      	b.n	14d32 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x32>
        self.len += 1;
   14d32:	9805      	ldr	r0, [sp, #20]
   14d34:	6801      	ldr	r1, [r0, #0]
   14d36:	1c4a      	adds	r2, r1, #1
   14d38:	4613      	mov	r3, r2
   14d3a:	428a      	cmp	r2, r1
   14d3c:	9301      	str	r3, [sp, #4]
   14d3e:	d305      	bcc.n	14d4c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x4c>
   14d40:	e7ff      	b.n	14d42 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x42>
   14d42:	9801      	ldr	r0, [sp, #4]
   14d44:	9905      	ldr	r1, [sp, #20]
   14d46:	6008      	str	r0, [r1, #0]
    }
   14d48:	b00a      	add	sp, #40	; 0x28
   14d4a:	bd80      	pop	{r7, pc}
        self.len += 1;
   14d4c:	f640 70a0 	movw	r0, #4000	; 0xfa0
   14d50:	f2c0 0002 	movt	r0, #2
   14d54:	f640 7284 	movw	r2, #3972	; 0xf84
   14d58:	f2c0 0202 	movt	r2, #2
   14d5c:	211c      	movs	r1, #28
   14d5e:	f002 fe29 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14d62:	defe      	udf	#254	; 0xfe

00014d64 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   14d64:	b580      	push	{r7, lr}
   14d66:	b08a      	sub	sp, #40	; 0x28
   14d68:	460a      	mov	r2, r1
   14d6a:	9006      	str	r0, [sp, #24]
   14d6c:	f8ad 101e 	strh.w	r1, [sp, #30]
        (self.buffer.as_mut_ptr() as *mut T)
   14d70:	1d01      	adds	r1, r0, #4
   14d72:	9108      	str	r1, [sp, #32]
   14d74:	9109      	str	r1, [sp, #36]	; 0x24
   14d76:	9005      	str	r0, [sp, #20]
   14d78:	9204      	str	r2, [sp, #16]
   14d7a:	9103      	str	r1, [sp, #12]
   14d7c:	e7ff      	b.n	14d7e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x1a>
            .add(self.len)
   14d7e:	9805      	ldr	r0, [sp, #20]
   14d80:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   14d82:	9803      	ldr	r0, [sp, #12]
   14d84:	f001 fa6a 	bl	1625c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   14d88:	9002      	str	r0, [sp, #8]
   14d8a:	e7ff      	b.n	14d8c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x28>
   14d8c:	9802      	ldr	r0, [sp, #8]
   14d8e:	9904      	ldr	r1, [sp, #16]
   14d90:	f001 fa6f 	bl	16272 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>
   14d94:	e7ff      	b.n	14d96 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x32>
        self.len += 1;
   14d96:	9805      	ldr	r0, [sp, #20]
   14d98:	6801      	ldr	r1, [r0, #0]
   14d9a:	1c4a      	adds	r2, r1, #1
   14d9c:	4613      	mov	r3, r2
   14d9e:	428a      	cmp	r2, r1
   14da0:	9301      	str	r3, [sp, #4]
   14da2:	d305      	bcc.n	14db0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x4c>
   14da4:	e7ff      	b.n	14da6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x42>
   14da6:	9801      	ldr	r0, [sp, #4]
   14da8:	9905      	ldr	r1, [sp, #20]
   14daa:	6008      	str	r0, [r1, #0]
    }
   14dac:	b00a      	add	sp, #40	; 0x28
   14dae:	bd80      	pop	{r7, pc}
        self.len += 1;
   14db0:	f640 70a0 	movw	r0, #4000	; 0xfa0
   14db4:	f2c0 0002 	movt	r0, #2
   14db8:	f640 7284 	movw	r2, #3972	; 0xf84
   14dbc:	f2c0 0202 	movt	r2, #2
   14dc0:	211c      	movs	r1, #28
   14dc2:	f002 fdf7 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14dc6:	defe      	udf	#254	; 0xfe

00014dc8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   14dc8:	b580      	push	{r7, lr}
   14dca:	b094      	sub	sp, #80	; 0x50
   14dcc:	900e      	str	r0, [sp, #56]	; 0x38
   14dce:	910f      	str	r1, [sp, #60]	; 0x3c
   14dd0:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   14dd2:	6803      	ldr	r3, [r0, #0]
   14dd4:	9009      	str	r0, [sp, #36]	; 0x24
   14dd6:	4608      	mov	r0, r1
   14dd8:	9108      	str	r1, [sp, #32]
   14dda:	4611      	mov	r1, r2
   14ddc:	9207      	str	r2, [sp, #28]
   14dde:	9306      	str	r3, [sp, #24]
   14de0:	f001 f943 	bl	1606a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   14de4:	9005      	str	r0, [sp, #20]
   14de6:	e7ff      	b.n	14de8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x20>
   14de8:	9806      	ldr	r0, [sp, #24]
   14dea:	9905      	ldr	r1, [sp, #20]
   14dec:	1842      	adds	r2, r0, r1
   14dee:	4613      	mov	r3, r2
   14df0:	4282      	cmp	r2, r0
   14df2:	9304      	str	r3, [sp, #16]
   14df4:	d33f      	bcc.n	14e76 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xae>
   14df6:	e7ff      	b.n	14df8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x30>
   14df8:	9809      	ldr	r0, [sp, #36]	; 0x24
   14dfa:	f000 f96a 	bl	150d2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E>
   14dfe:	9003      	str	r0, [sp, #12]
   14e00:	e7ff      	b.n	14e02 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x3a>
   14e02:	9804      	ldr	r0, [sp, #16]
   14e04:	9903      	ldr	r1, [sp, #12]
   14e06:	4288      	cmp	r0, r1
   14e08:	d807      	bhi.n	14e1a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x52>
   14e0a:	e7ff      	b.n	14e0c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x44>
            for elem in other {
   14e0c:	9808      	ldr	r0, [sp, #32]
   14e0e:	9907      	ldr	r1, [sp, #28]
   14e10:	f001 f99f 	bl	16152 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>
   14e14:	9002      	str	r0, [sp, #8]
   14e16:	9101      	str	r1, [sp, #4]
   14e18:	e003      	b.n	14e22 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x5a>
   14e1a:	2001      	movs	r0, #1
            Err(())
   14e1c:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   14e20:	e025      	b.n	14e6e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa6>
            for elem in other {
   14e22:	9802      	ldr	r0, [sp, #8]
   14e24:	900b      	str	r0, [sp, #44]	; 0x2c
   14e26:	9901      	ldr	r1, [sp, #4]
   14e28:	910c      	str	r1, [sp, #48]	; 0x30
   14e2a:	e7ff      	b.n	14e2c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x64>
   14e2c:	a80b      	add	r0, sp, #44	; 0x2c
   14e2e:	f001 f9b2 	bl	16196 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>
   14e32:	900d      	str	r0, [sp, #52]	; 0x34
   14e34:	e7ff      	b.n	14e36 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x6e>
   14e36:	980d      	ldr	r0, [sp, #52]	; 0x34
   14e38:	2800      	cmp	r0, #0
   14e3a:	4601      	mov	r1, r0
   14e3c:	bf18      	it	ne
   14e3e:	2101      	movne	r1, #1
   14e40:	2800      	cmp	r0, #0
   14e42:	d001      	beq.n	14e48 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x80>
   14e44:	e7ff      	b.n	14e46 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x7e>
   14e46:	e004      	b.n	14e52 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x8a>
   14e48:	2000      	movs	r0, #0
            Ok(())
   14e4a:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   14e4e:	e00e      	b.n	14e6e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa6>
            for elem in other {
   14e50:	defe      	udf	#254	; 0xfe
   14e52:	980d      	ldr	r0, [sp, #52]	; 0x34
   14e54:	9011      	str	r0, [sp, #68]	; 0x44
   14e56:	9012      	str	r0, [sp, #72]	; 0x48
   14e58:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   14e5a:	f001 f856 	bl	15f0a <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>
   14e5e:	9000      	str	r0, [sp, #0]
   14e60:	e7ff      	b.n	14e62 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x9a>
   14e62:	9809      	ldr	r0, [sp, #36]	; 0x24
   14e64:	9900      	ldr	r1, [sp, #0]
   14e66:	f7ff ff4b 	bl	14d00 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE>
   14e6a:	e7ff      	b.n	14e6c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa4>
            for elem in other {
   14e6c:	e7de      	b.n	14e2c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x64>
    }
   14e6e:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   14e72:	b014      	add	sp, #80	; 0x50
   14e74:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   14e76:	f640 70a0 	movw	r0, #4000	; 0xfa0
   14e7a:	f2c0 0002 	movt	r0, #2
   14e7e:	f640 72bc 	movw	r2, #4028	; 0xfbc
   14e82:	f2c0 0202 	movt	r2, #2
   14e86:	211c      	movs	r1, #28
   14e88:	f002 fd94 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14e8c:	defe      	udf	#254	; 0xfe

00014e8e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   14e8e:	b580      	push	{r7, lr}
   14e90:	b094      	sub	sp, #80	; 0x50
   14e92:	900e      	str	r0, [sp, #56]	; 0x38
   14e94:	910f      	str	r1, [sp, #60]	; 0x3c
   14e96:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   14e98:	6803      	ldr	r3, [r0, #0]
   14e9a:	9009      	str	r0, [sp, #36]	; 0x24
   14e9c:	4608      	mov	r0, r1
   14e9e:	9108      	str	r1, [sp, #32]
   14ea0:	4611      	mov	r1, r2
   14ea2:	9207      	str	r2, [sp, #28]
   14ea4:	9306      	str	r3, [sp, #24]
   14ea6:	f001 f8e0 	bl	1606a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   14eaa:	9005      	str	r0, [sp, #20]
   14eac:	e7ff      	b.n	14eae <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x20>
   14eae:	9806      	ldr	r0, [sp, #24]
   14eb0:	9905      	ldr	r1, [sp, #20]
   14eb2:	1842      	adds	r2, r0, r1
   14eb4:	4613      	mov	r3, r2
   14eb6:	4282      	cmp	r2, r0
   14eb8:	9304      	str	r3, [sp, #16]
   14eba:	d33f      	bcc.n	14f3c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xae>
   14ebc:	e7ff      	b.n	14ebe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x30>
   14ebe:	9809      	ldr	r0, [sp, #36]	; 0x24
   14ec0:	f000 f8fd 	bl	150be <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>
   14ec4:	9003      	str	r0, [sp, #12]
   14ec6:	e7ff      	b.n	14ec8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x3a>
   14ec8:	9804      	ldr	r0, [sp, #16]
   14eca:	9903      	ldr	r1, [sp, #12]
   14ecc:	4288      	cmp	r0, r1
   14ece:	d807      	bhi.n	14ee0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x52>
   14ed0:	e7ff      	b.n	14ed2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x44>
            for elem in other {
   14ed2:	9808      	ldr	r0, [sp, #32]
   14ed4:	9907      	ldr	r1, [sp, #28]
   14ed6:	f001 f93c 	bl	16152 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>
   14eda:	9002      	str	r0, [sp, #8]
   14edc:	9101      	str	r1, [sp, #4]
   14ede:	e003      	b.n	14ee8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x5a>
   14ee0:	2001      	movs	r0, #1
            Err(())
   14ee2:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   14ee6:	e025      	b.n	14f34 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa6>
            for elem in other {
   14ee8:	9802      	ldr	r0, [sp, #8]
   14eea:	900b      	str	r0, [sp, #44]	; 0x2c
   14eec:	9901      	ldr	r1, [sp, #4]
   14eee:	910c      	str	r1, [sp, #48]	; 0x30
   14ef0:	e7ff      	b.n	14ef2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x64>
   14ef2:	a80b      	add	r0, sp, #44	; 0x2c
   14ef4:	f001 f94f 	bl	16196 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>
   14ef8:	900d      	str	r0, [sp, #52]	; 0x34
   14efa:	e7ff      	b.n	14efc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x6e>
   14efc:	980d      	ldr	r0, [sp, #52]	; 0x34
   14efe:	2800      	cmp	r0, #0
   14f00:	4601      	mov	r1, r0
   14f02:	bf18      	it	ne
   14f04:	2101      	movne	r1, #1
   14f06:	2800      	cmp	r0, #0
   14f08:	d001      	beq.n	14f0e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x80>
   14f0a:	e7ff      	b.n	14f0c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x7e>
   14f0c:	e004      	b.n	14f18 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x8a>
   14f0e:	2000      	movs	r0, #0
            Ok(())
   14f10:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   14f14:	e00e      	b.n	14f34 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa6>
            for elem in other {
   14f16:	defe      	udf	#254	; 0xfe
   14f18:	980d      	ldr	r0, [sp, #52]	; 0x34
   14f1a:	9011      	str	r0, [sp, #68]	; 0x44
   14f1c:	9012      	str	r0, [sp, #72]	; 0x48
   14f1e:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   14f20:	f000 fff3 	bl	15f0a <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>
   14f24:	9000      	str	r0, [sp, #0]
   14f26:	e7ff      	b.n	14f28 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x9a>
   14f28:	9809      	ldr	r0, [sp, #36]	; 0x24
   14f2a:	9900      	ldr	r1, [sp, #0]
   14f2c:	f7ff ff1a 	bl	14d64 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>
   14f30:	e7ff      	b.n	14f32 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa4>
            for elem in other {
   14f32:	e7de      	b.n	14ef2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x64>
    }
   14f34:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   14f38:	b014      	add	sp, #80	; 0x50
   14f3a:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   14f3c:	f640 70a0 	movw	r0, #4000	; 0xfa0
   14f40:	f2c0 0002 	movt	r0, #2
   14f44:	f640 72bc 	movw	r2, #4028	; 0xfbc
   14f48:	f2c0 0202 	movt	r2, #2
   14f4c:	211c      	movs	r1, #28
   14f4e:	f002 fd31 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14f52:	defe      	udf	#254	; 0xfe

00014f54 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E>:
    pub(crate) fn push(&mut self, item: T) -> Result<(), T> {
   14f54:	b580      	push	{r7, lr}
   14f56:	b088      	sub	sp, #32
   14f58:	460a      	mov	r2, r1
   14f5a:	9006      	str	r0, [sp, #24]
   14f5c:	f8ad 101e 	strh.w	r1, [sp, #30]
        if self.len < self.capacity() {
   14f60:	6801      	ldr	r1, [r0, #0]
   14f62:	9004      	str	r0, [sp, #16]
   14f64:	9203      	str	r2, [sp, #12]
   14f66:	9102      	str	r1, [sp, #8]
   14f68:	f000 f8a9 	bl	150be <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>
   14f6c:	9001      	str	r0, [sp, #4]
   14f6e:	e7ff      	b.n	14f70 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x1c>
   14f70:	9802      	ldr	r0, [sp, #8]
   14f72:	9901      	ldr	r1, [sp, #4]
   14f74:	4288      	cmp	r0, r1
   14f76:	d307      	bcc.n	14f88 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x34>
   14f78:	e7ff      	b.n	14f7a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x26>
            Err(item)
   14f7a:	9803      	ldr	r0, [sp, #12]
   14f7c:	f8ad 0016 	strh.w	r0, [sp, #22]
   14f80:	2101      	movs	r1, #1
   14f82:	f8ad 1014 	strh.w	r1, [sp, #20]
        if self.len < self.capacity() {
   14f86:	e008      	b.n	14f9a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x46>
            unsafe { self.push_unchecked(item) }
   14f88:	9804      	ldr	r0, [sp, #16]
   14f8a:	9903      	ldr	r1, [sp, #12]
   14f8c:	f7ff feea 	bl	14d64 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>
   14f90:	e7ff      	b.n	14f92 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x3e>
   14f92:	2000      	movs	r0, #0
            Ok(())
   14f94:	f8ad 0014 	strh.w	r0, [sp, #20]
        if self.len < self.capacity() {
   14f98:	e7ff      	b.n	14f9a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x46>
    }
   14f9a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   14f9e:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   14fa2:	b008      	add	sp, #32
   14fa4:	bd80      	pop	{r7, pc}

00014fa6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE>:
    pub(crate) fn clear(&mut self) {
   14fa6:	b580      	push	{r7, lr}
   14fa8:	b082      	sub	sp, #8
   14faa:	9001      	str	r0, [sp, #4]
   14fac:	2100      	movs	r1, #0
        self.truncate(0);
   14fae:	f000 f8d0 	bl	15152 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E>
   14fb2:	e7ff      	b.n	14fb4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE+0xe>
    }
   14fb4:	b002      	add	sp, #8
   14fb6:	bd80      	pop	{r7, pc}

00014fb8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E>:
    pub(crate) fn clear(&mut self) {
   14fb8:	b580      	push	{r7, lr}
   14fba:	b082      	sub	sp, #8
   14fbc:	9001      	str	r0, [sp, #4]
   14fbe:	2100      	movs	r1, #0
        self.truncate(0);
   14fc0:	f000 f891 	bl	150e6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE>
   14fc4:	e7ff      	b.n	14fc6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E+0xe>
    }
   14fc6:	b002      	add	sp, #8
   14fc8:	bd80      	pop	{r7, pc}

00014fca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE>:
    pub(crate) fn clone(&self) -> Self
   14fca:	b580      	push	{r7, lr}
   14fcc:	b0a0      	sub	sp, #128	; 0x80
   14fce:	911f      	str	r1, [sp, #124]	; 0x7c
   14fd0:	aa05      	add	r2, sp, #20
        let mut new = Self::new();
   14fd2:	9004      	str	r0, [sp, #16]
   14fd4:	4610      	mov	r0, r2
   14fd6:	9103      	str	r1, [sp, #12]
   14fd8:	f7ff fe59 	bl	14c8e <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>
   14fdc:	e7ff      	b.n	14fde <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x14>
        new.extend_from_slice(self.as_slice()).unwrap();
   14fde:	9803      	ldr	r0, [sp, #12]
   14fe0:	f000 f843 	bl	1506a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>
   14fe4:	9002      	str	r0, [sp, #8]
   14fe6:	9101      	str	r1, [sp, #4]
   14fe8:	e7ff      	b.n	14fea <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x20>
   14fea:	a805      	add	r0, sp, #20
   14fec:	9902      	ldr	r1, [sp, #8]
   14fee:	9a01      	ldr	r2, [sp, #4]
   14ff0:	f7ff ff4d 	bl	14e8e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE>
   14ff4:	9000      	str	r0, [sp, #0]
   14ff6:	e7ff      	b.n	14ff8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x2e>
   14ff8:	9800      	ldr	r0, [sp, #0]
   14ffa:	f000 0001 	and.w	r0, r0, #1
   14ffe:	f640 71cc 	movw	r1, #4044	; 0xfcc
   15002:	f2c0 0102 	movt	r1, #2
   15006:	f000 f959 	bl	152bc <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>
   1500a:	e7ff      	b.n	1500c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x42>
   1500c:	a905      	add	r1, sp, #20
   1500e:	2268      	movs	r2, #104	; 0x68
        new
   15010:	9804      	ldr	r0, [sp, #16]
   15012:	f009 f8a3 	bl	1e15c <__aeabi_memcpy>
    }
   15016:	b020      	add	sp, #128	; 0x80
   15018:	bd80      	pop	{r7, pc}

0001501a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E>:
    pub(crate) fn clone(&self) -> Self
   1501a:	b580      	push	{r7, lr}
   1501c:	b0ba      	sub	sp, #232	; 0xe8
   1501e:	9139      	str	r1, [sp, #228]	; 0xe4
   15020:	aa06      	add	r2, sp, #24
        let mut new = Self::new();
   15022:	9005      	str	r0, [sp, #20]
   15024:	4610      	mov	r0, r2
   15026:	9104      	str	r1, [sp, #16]
   15028:	f7ff fe22 	bl	14c70 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>
   1502c:	e7ff      	b.n	1502e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x14>
        new.extend_from_slice(self.as_slice()).unwrap();
   1502e:	9804      	ldr	r0, [sp, #16]
   15030:	f000 f830 	bl	15094 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>
   15034:	9003      	str	r0, [sp, #12]
   15036:	9102      	str	r1, [sp, #8]
   15038:	e7ff      	b.n	1503a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x20>
   1503a:	a806      	add	r0, sp, #24
   1503c:	9903      	ldr	r1, [sp, #12]
   1503e:	9a02      	ldr	r2, [sp, #8]
   15040:	f7ff fec2 	bl	14dc8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>
   15044:	9001      	str	r0, [sp, #4]
   15046:	e7ff      	b.n	15048 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x2e>
   15048:	9801      	ldr	r0, [sp, #4]
   1504a:	f000 0001 	and.w	r0, r0, #1
   1504e:	f640 71cc 	movw	r1, #4044	; 0xfcc
   15052:	f2c0 0102 	movt	r1, #2
   15056:	f000 f931 	bl	152bc <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>
   1505a:	e7ff      	b.n	1505c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x42>
   1505c:	a906      	add	r1, sp, #24
   1505e:	22cc      	movs	r2, #204	; 0xcc
        new
   15060:	9805      	ldr	r0, [sp, #20]
   15062:	f009 f87b 	bl	1e15c <__aeabi_memcpy>
    }
   15066:	b03a      	add	sp, #232	; 0xe8
   15068:	bd80      	pop	{r7, pc}

0001506a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   1506a:	b580      	push	{r7, lr}
   1506c:	b088      	sub	sp, #32
   1506e:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   15070:	1d01      	adds	r1, r0, #4
   15072:	9106      	str	r1, [sp, #24]
   15074:	9107      	str	r1, [sp, #28]
   15076:	9004      	str	r0, [sp, #16]
   15078:	9103      	str	r1, [sp, #12]
   1507a:	e7ff      	b.n	1507c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE+0x12>
   1507c:	9804      	ldr	r0, [sp, #16]
   1507e:	6801      	ldr	r1, [r0, #0]
   15080:	9803      	ldr	r0, [sp, #12]
   15082:	f000 ffc1 	bl	16008 <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>
   15086:	9002      	str	r0, [sp, #8]
   15088:	9101      	str	r1, [sp, #4]
   1508a:	e7ff      	b.n	1508c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE+0x22>
    }
   1508c:	9802      	ldr	r0, [sp, #8]
   1508e:	9901      	ldr	r1, [sp, #4]
   15090:	b008      	add	sp, #32
   15092:	bd80      	pop	{r7, pc}

00015094 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>:
    pub(crate) fn as_slice(&self) -> &[T] {
   15094:	b580      	push	{r7, lr}
   15096:	b088      	sub	sp, #32
   15098:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   1509a:	1d01      	adds	r1, r0, #4
   1509c:	9106      	str	r1, [sp, #24]
   1509e:	9107      	str	r1, [sp, #28]
   150a0:	9004      	str	r0, [sp, #16]
   150a2:	9103      	str	r1, [sp, #12]
   150a4:	e7ff      	b.n	150a6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E+0x12>
   150a6:	9804      	ldr	r0, [sp, #16]
   150a8:	6801      	ldr	r1, [r0, #0]
   150aa:	9803      	ldr	r0, [sp, #12]
   150ac:	f000 ffac 	bl	16008 <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>
   150b0:	9002      	str	r0, [sp, #8]
   150b2:	9101      	str	r1, [sp, #4]
   150b4:	e7ff      	b.n	150b6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E+0x22>
    }
   150b6:	9802      	ldr	r0, [sp, #8]
   150b8:	9901      	ldr	r1, [sp, #4]
   150ba:	b008      	add	sp, #32
   150bc:	bd80      	pop	{r7, pc}

000150be <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>:
    pub(crate) fn capacity(&self) -> usize {
   150be:	b580      	push	{r7, lr}
   150c0:	b082      	sub	sp, #8
   150c2:	9001      	str	r0, [sp, #4]
        N::to_usize()
   150c4:	f000 fa26 	bl	15514 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>
   150c8:	9000      	str	r0, [sp, #0]
   150ca:	e7ff      	b.n	150cc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E+0xe>
    }
   150cc:	9800      	ldr	r0, [sp, #0]
   150ce:	b002      	add	sp, #8
   150d0:	bd80      	pop	{r7, pc}

000150d2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E>:
    pub(crate) fn capacity(&self) -> usize {
   150d2:	b580      	push	{r7, lr}
   150d4:	b082      	sub	sp, #8
   150d6:	9001      	str	r0, [sp, #4]
        N::to_usize()
   150d8:	f000 fa34 	bl	15544 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE>
   150dc:	9000      	str	r0, [sp, #0]
   150de:	e7ff      	b.n	150e0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E+0xe>
    }
   150e0:	9800      	ldr	r0, [sp, #0]
   150e2:	b002      	add	sp, #8
   150e4:	bd80      	pop	{r7, pc}

000150e6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE>:
    pub(crate) fn truncate(&mut self, len: usize) {
   150e6:	b580      	push	{r7, lr}
   150e8:	b08a      	sub	sp, #40	; 0x28
   150ea:	9007      	str	r0, [sp, #28]
   150ec:	9108      	str	r1, [sp, #32]
   150ee:	9106      	str	r1, [sp, #24]
   150f0:	9005      	str	r0, [sp, #20]
   150f2:	e7ff      	b.n	150f4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0xe>
            while len < self.len {
   150f4:	9805      	ldr	r0, [sp, #20]
   150f6:	6801      	ldr	r1, [r0, #0]
   150f8:	9a06      	ldr	r2, [sp, #24]
   150fa:	428a      	cmp	r2, r1
   150fc:	d302      	bcc.n	15104 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x1e>
   150fe:	e7ff      	b.n	15100 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x1a>
    }
   15100:	b00a      	add	sp, #40	; 0x28
   15102:	bd80      	pop	{r7, pc}
                self.len -= 1;
   15104:	9805      	ldr	r0, [sp, #20]
   15106:	6801      	ldr	r1, [r0, #0]
   15108:	1e4a      	subs	r2, r1, #1
   1510a:	2901      	cmp	r1, #1
   1510c:	9204      	str	r2, [sp, #16]
   1510e:	d314      	bcc.n	1513a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x54>
   15110:	e7ff      	b.n	15112 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x2c>
   15112:	9804      	ldr	r0, [sp, #16]
   15114:	9905      	ldr	r1, [sp, #20]
   15116:	6008      	str	r0, [r1, #0]
                let len = self.len;
   15118:	680a      	ldr	r2, [r1, #0]
   1511a:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   1511c:	4608      	mov	r0, r1
   1511e:	9203      	str	r2, [sp, #12]
   15120:	f7ff fdd9 	bl	14cd6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>
   15124:	9002      	str	r0, [sp, #8]
   15126:	9101      	str	r1, [sp, #4]
   15128:	e7ff      	b.n	1512a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x44>
   1512a:	9802      	ldr	r0, [sp, #8]
   1512c:	9901      	ldr	r1, [sp, #4]
   1512e:	9a03      	ldr	r2, [sp, #12]
   15130:	f000 ff89 	bl	16046 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>
   15134:	e7ff      	b.n	15136 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x50>
   15136:	e7ff      	b.n	15138 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x52>
            while len < self.len {
   15138:	e7dc      	b.n	150f4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0xe>
                self.len -= 1;
   1513a:	f640 7060 	movw	r0, #3936	; 0xf60
   1513e:	f2c0 0002 	movt	r0, #2
   15142:	f640 72dc 	movw	r2, #4060	; 0xfdc
   15146:	f2c0 0202 	movt	r2, #2
   1514a:	2121      	movs	r1, #33	; 0x21
   1514c:	f002 fc32 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15150:	defe      	udf	#254	; 0xfe

00015152 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   15152:	b580      	push	{r7, lr}
   15154:	b08a      	sub	sp, #40	; 0x28
   15156:	9007      	str	r0, [sp, #28]
   15158:	9108      	str	r1, [sp, #32]
   1515a:	9106      	str	r1, [sp, #24]
   1515c:	9005      	str	r0, [sp, #20]
   1515e:	e7ff      	b.n	15160 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0xe>
            while len < self.len {
   15160:	9805      	ldr	r0, [sp, #20]
   15162:	6801      	ldr	r1, [r0, #0]
   15164:	9a06      	ldr	r2, [sp, #24]
   15166:	428a      	cmp	r2, r1
   15168:	d302      	bcc.n	15170 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x1e>
   1516a:	e7ff      	b.n	1516c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x1a>
    }
   1516c:	b00a      	add	sp, #40	; 0x28
   1516e:	bd80      	pop	{r7, pc}
                self.len -= 1;
   15170:	9805      	ldr	r0, [sp, #20]
   15172:	6801      	ldr	r1, [r0, #0]
   15174:	1e4a      	subs	r2, r1, #1
   15176:	2901      	cmp	r1, #1
   15178:	9204      	str	r2, [sp, #16]
   1517a:	d314      	bcc.n	151a6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x54>
   1517c:	e7ff      	b.n	1517e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x2c>
   1517e:	9804      	ldr	r0, [sp, #16]
   15180:	9905      	ldr	r1, [sp, #20]
   15182:	6008      	str	r0, [r1, #0]
                let len = self.len;
   15184:	680a      	ldr	r2, [r1, #0]
   15186:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   15188:	4608      	mov	r0, r1
   1518a:	9203      	str	r2, [sp, #12]
   1518c:	f7ff fd8e 	bl	14cac <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>
   15190:	9002      	str	r0, [sp, #8]
   15192:	9101      	str	r1, [sp, #4]
   15194:	e7ff      	b.n	15196 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x44>
   15196:	9802      	ldr	r0, [sp, #8]
   15198:	9901      	ldr	r1, [sp, #4]
   1519a:	9a03      	ldr	r2, [sp, #12]
   1519c:	f000 ff53 	bl	16046 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>
   151a0:	e7ff      	b.n	151a2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x50>
   151a2:	e7ff      	b.n	151a4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x52>
            while len < self.len {
   151a4:	e7dc      	b.n	15160 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0xe>
                self.len -= 1;
   151a6:	f640 7060 	movw	r0, #3936	; 0xf60
   151aa:	f2c0 0002 	movt	r0, #2
   151ae:	f640 72dc 	movw	r2, #4060	; 0xfdc
   151b2:	f2c0 0202 	movt	r2, #2
   151b6:	2121      	movs	r1, #33	; 0x21
   151b8:	f002 fbfc 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   151bc:	defe      	udf	#254	; 0xfe

000151be <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE>:
   151be:	b082      	sub	sp, #8
   151c0:	9001      	str	r0, [sp, #4]
   151c2:	8800      	ldrh	r0, [r0, #0]
   151c4:	2800      	cmp	r0, #0
   151c6:	d004      	beq.n	151d2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x14>
   151c8:	e7ff      	b.n	151ca <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0xc>
   151ca:	2000      	movs	r0, #0
   151cc:	f88d 0003 	strb.w	r0, [sp, #3]
   151d0:	e003      	b.n	151da <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x1c>
   151d2:	2001      	movs	r0, #1
   151d4:	f88d 0003 	strb.w	r0, [sp, #3]
   151d8:	e7ff      	b.n	151da <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x1c>
   151da:	f89d 0003 	ldrb.w	r0, [sp, #3]
   151de:	b002      	add	sp, #8
   151e0:	4770      	bx	lr

000151e2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E>:
   151e2:	b082      	sub	sp, #8
   151e4:	9001      	str	r0, [sp, #4]
   151e6:	7800      	ldrb	r0, [r0, #0]
   151e8:	07c0      	lsls	r0, r0, #31
   151ea:	2800      	cmp	r0, #0
   151ec:	d004      	beq.n	151f8 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x16>
   151ee:	e7ff      	b.n	151f0 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0xe>
   151f0:	2000      	movs	r0, #0
   151f2:	f88d 0003 	strb.w	r0, [sp, #3]
   151f6:	e003      	b.n	15200 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x1e>
   151f8:	2001      	movs	r0, #1
   151fa:	f88d 0003 	strb.w	r0, [sp, #3]
   151fe:	e7ff      	b.n	15200 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x1e>
   15200:	f89d 0003 	ldrb.w	r0, [sp, #3]
   15204:	b002      	add	sp, #8
   15206:	4770      	bx	lr

00015208 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>:
   15208:	b510      	push	{r4, lr}
   1520a:	b08a      	sub	sp, #40	; 0x28
   1520c:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   15210:	468e      	mov	lr, r1
   15212:	4604      	mov	r4, r0
   15214:	f8ad 0014 	strh.w	r0, [sp, #20]
   15218:	f8ad 1016 	strh.w	r1, [sp, #22]
   1521c:	9207      	str	r2, [sp, #28]
   1521e:	9308      	str	r3, [sp, #32]
   15220:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   15224:	4601      	mov	r1, r0
   15226:	2800      	cmp	r0, #0
   15228:	9304      	str	r3, [sp, #16]
   1522a:	9203      	str	r2, [sp, #12]
   1522c:	f8cd c008 	str.w	ip, [sp, #8]
   15230:	d013      	beq.n	1525a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x52>
   15232:	e7ff      	b.n	15234 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x2c>
   15234:	f8bd 0016 	ldrh.w	r0, [sp, #22]
   15238:	f8ad 001a 	strh.w	r0, [sp, #26]
   1523c:	4668      	mov	r0, sp
   1523e:	9902      	ldr	r1, [sp, #8]
   15240:	6001      	str	r1, [r0, #0]
   15242:	f640 73fc 	movw	r3, #4092	; 0xffc
   15246:	f2c0 0302 	movt	r3, #2
   1524a:	f10d 021a 	add.w	r2, sp, #26
   1524e:	9803      	ldr	r0, [sp, #12]
   15250:	9904      	ldr	r1, [sp, #16]
   15252:	f002 fb81 	bl	17958 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   15256:	defe      	udf	#254	; 0xfe
   15258:	defe      	udf	#254	; 0xfe
   1525a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   1525e:	2800      	cmp	r0, #0
   15260:	d102      	bne.n	15268 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x60>
   15262:	e7ff      	b.n	15264 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x5c>
   15264:	b00a      	add	sp, #40	; 0x28
   15266:	bd10      	pop	{r4, pc}
   15268:	e7fc      	b.n	15264 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x5c>

0001526a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>:
   1526a:	b580      	push	{r7, lr}
   1526c:	b08a      	sub	sp, #40	; 0x28
   1526e:	4684      	mov	ip, r0
   15270:	f88d 0017 	strb.w	r0, [sp, #23]
   15274:	9107      	str	r1, [sp, #28]
   15276:	9208      	str	r2, [sp, #32]
   15278:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1527c:	ea4f 7ec0 	mov.w	lr, r0, lsl #31
   15280:	f1be 0f00 	cmp.w	lr, #0
   15284:	9304      	str	r3, [sp, #16]
   15286:	9203      	str	r2, [sp, #12]
   15288:	9102      	str	r1, [sp, #8]
   1528a:	d00e      	beq.n	152aa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x40>
   1528c:	e7ff      	b.n	1528e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x24>
   1528e:	4668      	mov	r0, sp
   15290:	9904      	ldr	r1, [sp, #16]
   15292:	6001      	str	r1, [r0, #0]
   15294:	f640 73ec 	movw	r3, #4076	; 0xfec
   15298:	f2c0 0302 	movt	r3, #2
   1529c:	aa06      	add	r2, sp, #24
   1529e:	9802      	ldr	r0, [sp, #8]
   152a0:	9903      	ldr	r1, [sp, #12]
   152a2:	f002 fb59 	bl	17958 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   152a6:	defe      	udf	#254	; 0xfe
   152a8:	defe      	udf	#254	; 0xfe
   152aa:	f89d 0017 	ldrb.w	r0, [sp, #23]
   152ae:	07c0      	lsls	r0, r0, #31
   152b0:	2800      	cmp	r0, #0
   152b2:	d102      	bne.n	152ba <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x50>
   152b4:	e7ff      	b.n	152b6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>
   152b6:	b00a      	add	sp, #40	; 0x28
   152b8:	bd80      	pop	{r7, pc}
   152ba:	e7fc      	b.n	152b6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>

000152bc <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>:
   152bc:	b086      	sub	sp, #24
   152be:	4602      	mov	r2, r0
   152c0:	f88d 000f 	strb.w	r0, [sp, #15]
   152c4:	f89d 000f 	ldrb.w	r0, [sp, #15]
   152c8:	07c3      	lsls	r3, r0, #31
   152ca:	2b00      	cmp	r3, #0
   152cc:	9102      	str	r1, [sp, #8]
   152ce:	d011      	beq.n	152f4 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x38>
   152d0:	e7ff      	b.n	152d2 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x16>
   152d2:	4668      	mov	r0, sp
   152d4:	9902      	ldr	r1, [sp, #8]
   152d6:	6001      	str	r1, [r0, #0]
   152d8:	f241 000c 	movw	r0, #4108	; 0x100c
   152dc:	f2c0 0002 	movt	r0, #2
   152e0:	f640 73ec 	movw	r3, #4076	; 0xfec
   152e4:	f2c0 0302 	movt	r3, #2
   152e8:	212b      	movs	r1, #43	; 0x2b
   152ea:	aa04      	add	r2, sp, #16
   152ec:	f002 fb34 	bl	17958 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   152f0:	defe      	udf	#254	; 0xfe
   152f2:	defe      	udf	#254	; 0xfe
   152f4:	f89d 000f 	ldrb.w	r0, [sp, #15]
   152f8:	07c0      	lsls	r0, r0, #31
   152fa:	2800      	cmp	r0, #0
   152fc:	d102      	bne.n	15304 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x48>
   152fe:	e7ff      	b.n	15300 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x44>
   15300:	b006      	add	sp, #24
   15302:	4770      	bx	lr
   15304:	e7fc      	b.n	15300 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x44>

00015306 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>:
   15306:	b580      	push	{r7, lr}
   15308:	b088      	sub	sp, #32
   1530a:	9001      	str	r0, [sp, #4]
   1530c:	2000      	movs	r0, #0
   1530e:	f88d 0013 	strb.w	r0, [sp, #19]
   15312:	f88d 0011 	strb.w	r0, [sp, #17]
   15316:	f88d 0012 	strb.w	r0, [sp, #18]
   1531a:	2001      	movs	r0, #1
   1531c:	f88d 0012 	strb.w	r0, [sp, #18]
   15320:	f88d 0013 	strb.w	r0, [sp, #19]
   15324:	f88d 0011 	strb.w	r0, [sp, #17]
   15328:	9801      	ldr	r0, [sp, #4]
   1532a:	1e41      	subs	r1, r0, #1
   1532c:	bf18      	it	ne
   1532e:	2101      	movne	r1, #1
   15330:	2801      	cmp	r0, #1
   15332:	d00d      	beq.n	15350 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x4a>
   15334:	e7ff      	b.n	15336 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x30>
   15336:	2000      	movs	r0, #0
   15338:	f88d 0013 	strb.w	r0, [sp, #19]
   1533c:	9901      	ldr	r1, [sp, #4]
   1533e:	9107      	str	r1, [sp, #28]
   15340:	f88d 0011 	strb.w	r0, [sp, #17]
   15344:	9103      	str	r1, [sp, #12]
   15346:	9803      	ldr	r0, [sp, #12]
   15348:	f7f4 fa50 	bl	97ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>
   1534c:	e006      	b.n	1535c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x56>
   1534e:	defe      	udf	#254	; 0xfe
   15350:	2000      	movs	r0, #0
   15352:	f88d 0012 	strb.w	r0, [sp, #18]
   15356:	f88d 000b 	strb.w	r0, [sp, #11]
   1535a:	e003      	b.n	15364 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   1535c:	2001      	movs	r0, #1
   1535e:	f88d 000b 	strb.w	r0, [sp, #11]
   15362:	e7ff      	b.n	15364 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   15364:	f89d 0011 	ldrb.w	r0, [sp, #17]
   15368:	07c0      	lsls	r0, r0, #31
   1536a:	2800      	cmp	r0, #0
   1536c:	d104      	bne.n	15378 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x72>
   1536e:	e7ff      	b.n	15370 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   15370:	9801      	ldr	r0, [sp, #4]
   15372:	2801      	cmp	r0, #1
   15374:	d008      	beq.n	15388 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x82>
   15376:	e011      	b.n	1539c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x96>
   15378:	2000      	movs	r0, #0
   1537a:	f88d 0011 	strb.w	r0, [sp, #17]
   1537e:	e7f7      	b.n	15370 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   15380:	f89d 000b 	ldrb.w	r0, [sp, #11]
   15384:	b008      	add	sp, #32
   15386:	bd80      	pop	{r7, pc}
   15388:	f89d 0012 	ldrb.w	r0, [sp, #18]
   1538c:	07c0      	lsls	r0, r0, #31
   1538e:	2800      	cmp	r0, #0
   15390:	d0f6      	beq.n	15380 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   15392:	e7ff      	b.n	15394 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x8e>
   15394:	2000      	movs	r0, #0
   15396:	f88d 0012 	strb.w	r0, [sp, #18]
   1539a:	e7f1      	b.n	15380 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   1539c:	f89d 0013 	ldrb.w	r0, [sp, #19]
   153a0:	07c0      	lsls	r0, r0, #31
   153a2:	2800      	cmp	r0, #0
   153a4:	d0ec      	beq.n	15380 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   153a6:	e7ff      	b.n	153a8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0xa2>
   153a8:	2000      	movs	r0, #0
   153aa:	f88d 0013 	strb.w	r0, [sp, #19]
   153ae:	e7e7      	b.n	15380 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>

000153b0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>:
   153b0:	b580      	push	{r7, lr}
   153b2:	b088      	sub	sp, #32
   153b4:	9001      	str	r0, [sp, #4]
   153b6:	2000      	movs	r0, #0
   153b8:	f88d 0013 	strb.w	r0, [sp, #19]
   153bc:	f88d 0011 	strb.w	r0, [sp, #17]
   153c0:	f88d 0012 	strb.w	r0, [sp, #18]
   153c4:	2001      	movs	r0, #1
   153c6:	f88d 0012 	strb.w	r0, [sp, #18]
   153ca:	f88d 0013 	strb.w	r0, [sp, #19]
   153ce:	f88d 0011 	strb.w	r0, [sp, #17]
   153d2:	9801      	ldr	r0, [sp, #4]
   153d4:	1e41      	subs	r1, r0, #1
   153d6:	bf18      	it	ne
   153d8:	2101      	movne	r1, #1
   153da:	2801      	cmp	r0, #1
   153dc:	d00d      	beq.n	153fa <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x4a>
   153de:	e7ff      	b.n	153e0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x30>
   153e0:	2000      	movs	r0, #0
   153e2:	f88d 0013 	strb.w	r0, [sp, #19]
   153e6:	9901      	ldr	r1, [sp, #4]
   153e8:	9107      	str	r1, [sp, #28]
   153ea:	f88d 0011 	strb.w	r0, [sp, #17]
   153ee:	9103      	str	r1, [sp, #12]
   153f0:	9803      	ldr	r0, [sp, #12]
   153f2:	f7f4 f9f1 	bl	97d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>
   153f6:	e006      	b.n	15406 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x56>
   153f8:	defe      	udf	#254	; 0xfe
   153fa:	2000      	movs	r0, #0
   153fc:	f88d 0012 	strb.w	r0, [sp, #18]
   15400:	f88d 000b 	strb.w	r0, [sp, #11]
   15404:	e003      	b.n	1540e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   15406:	2001      	movs	r0, #1
   15408:	f88d 000b 	strb.w	r0, [sp, #11]
   1540c:	e7ff      	b.n	1540e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   1540e:	f89d 0011 	ldrb.w	r0, [sp, #17]
   15412:	07c0      	lsls	r0, r0, #31
   15414:	2800      	cmp	r0, #0
   15416:	d104      	bne.n	15422 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x72>
   15418:	e7ff      	b.n	1541a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   1541a:	9801      	ldr	r0, [sp, #4]
   1541c:	2801      	cmp	r0, #1
   1541e:	d008      	beq.n	15432 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x82>
   15420:	e011      	b.n	15446 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x96>
   15422:	2000      	movs	r0, #0
   15424:	f88d 0011 	strb.w	r0, [sp, #17]
   15428:	e7f7      	b.n	1541a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   1542a:	f89d 000b 	ldrb.w	r0, [sp, #11]
   1542e:	b008      	add	sp, #32
   15430:	bd80      	pop	{r7, pc}
   15432:	f89d 0012 	ldrb.w	r0, [sp, #18]
   15436:	07c0      	lsls	r0, r0, #31
   15438:	2800      	cmp	r0, #0
   1543a:	d0f6      	beq.n	1542a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   1543c:	e7ff      	b.n	1543e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x8e>
   1543e:	2000      	movs	r0, #0
   15440:	f88d 0012 	strb.w	r0, [sp, #18]
   15444:	e7f1      	b.n	1542a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   15446:	f89d 0013 	ldrb.w	r0, [sp, #19]
   1544a:	07c0      	lsls	r0, r0, #31
   1544c:	2800      	cmp	r0, #0
   1544e:	d0ec      	beq.n	1542a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   15450:	e7ff      	b.n	15452 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0xa2>
   15452:	2000      	movs	r0, #0
   15454:	f88d 0013 	strb.w	r0, [sp, #19]
   15458:	e7e7      	b.n	1542a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>

0001545a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>:
   1545a:	b580      	push	{r7, lr}
   1545c:	b088      	sub	sp, #32
   1545e:	9001      	str	r0, [sp, #4]
   15460:	2000      	movs	r0, #0
   15462:	f88d 0013 	strb.w	r0, [sp, #19]
   15466:	f88d 0011 	strb.w	r0, [sp, #17]
   1546a:	f88d 0012 	strb.w	r0, [sp, #18]
   1546e:	2001      	movs	r0, #1
   15470:	f88d 0012 	strb.w	r0, [sp, #18]
   15474:	f88d 0013 	strb.w	r0, [sp, #19]
   15478:	f88d 0011 	strb.w	r0, [sp, #17]
   1547c:	9801      	ldr	r0, [sp, #4]
   1547e:	1e41      	subs	r1, r0, #1
   15480:	bf18      	it	ne
   15482:	2101      	movne	r1, #1
   15484:	2801      	cmp	r0, #1
   15486:	d00d      	beq.n	154a4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x4a>
   15488:	e7ff      	b.n	1548a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x30>
   1548a:	2000      	movs	r0, #0
   1548c:	f88d 0013 	strb.w	r0, [sp, #19]
   15490:	9901      	ldr	r1, [sp, #4]
   15492:	9107      	str	r1, [sp, #28]
   15494:	f88d 0011 	strb.w	r0, [sp, #17]
   15498:	9103      	str	r1, [sp, #12]
   1549a:	9803      	ldr	r0, [sp, #12]
   1549c:	f7f4 f9a1 	bl	97e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>
   154a0:	e006      	b.n	154b0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x56>
   154a2:	defe      	udf	#254	; 0xfe
   154a4:	2000      	movs	r0, #0
   154a6:	f88d 0012 	strb.w	r0, [sp, #18]
   154aa:	f88d 000b 	strb.w	r0, [sp, #11]
   154ae:	e003      	b.n	154b8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   154b0:	2001      	movs	r0, #1
   154b2:	f88d 000b 	strb.w	r0, [sp, #11]
   154b6:	e7ff      	b.n	154b8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   154b8:	f89d 0011 	ldrb.w	r0, [sp, #17]
   154bc:	07c0      	lsls	r0, r0, #31
   154be:	2800      	cmp	r0, #0
   154c0:	d104      	bne.n	154cc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x72>
   154c2:	e7ff      	b.n	154c4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   154c4:	9801      	ldr	r0, [sp, #4]
   154c6:	2801      	cmp	r0, #1
   154c8:	d008      	beq.n	154dc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x82>
   154ca:	e011      	b.n	154f0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x96>
   154cc:	2000      	movs	r0, #0
   154ce:	f88d 0011 	strb.w	r0, [sp, #17]
   154d2:	e7f7      	b.n	154c4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   154d4:	f89d 000b 	ldrb.w	r0, [sp, #11]
   154d8:	b008      	add	sp, #32
   154da:	bd80      	pop	{r7, pc}
   154dc:	f89d 0012 	ldrb.w	r0, [sp, #18]
   154e0:	07c0      	lsls	r0, r0, #31
   154e2:	2800      	cmp	r0, #0
   154e4:	d0f6      	beq.n	154d4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   154e6:	e7ff      	b.n	154e8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x8e>
   154e8:	2000      	movs	r0, #0
   154ea:	f88d 0012 	strb.w	r0, [sp, #18]
   154ee:	e7f1      	b.n	154d4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   154f0:	f89d 0013 	ldrb.w	r0, [sp, #19]
   154f4:	07c0      	lsls	r0, r0, #31
   154f6:	2800      	cmp	r0, #0
   154f8:	d0ec      	beq.n	154d4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   154fa:	e7ff      	b.n	154fc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0xa2>
   154fc:	2000      	movs	r0, #0
   154fe:	f88d 0013 	strb.w	r0, [sp, #19]
   15502:	e7e7      	b.n	154d4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>

00015504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>:
   15504:	b082      	sub	sp, #8
   15506:	2001      	movs	r0, #1
   15508:	f88d 0003 	strb.w	r0, [sp, #3]
   1550c:	f89d 0003 	ldrb.w	r0, [sp, #3]
   15510:	b002      	add	sp, #8
   15512:	4770      	bx	lr

00015514 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>:
    #[inline]
    fn to_u128() -> u128 {
        u128::from(B::to_u8()) | U::to_u128() << 1
    }
    #[inline]
    fn to_usize() -> usize {
   15514:	b580      	push	{r7, lr}
   15516:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15518:	f001 ff6d 	bl	173f6 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   1551c:	9003      	str	r0, [sp, #12]
   1551e:	e7ff      	b.n	15520 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0xc>
   15520:	9803      	ldr	r0, [sp, #12]
   15522:	f001 ffce 	bl	174c2 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   15526:	9002      	str	r0, [sp, #8]
   15528:	e7ff      	b.n	1552a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x16>
   1552a:	f000 f823 	bl	15574 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E>
   1552e:	9001      	str	r0, [sp, #4]
   15530:	e7ff      	b.n	15532 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x1e>
   15532:	9801      	ldr	r0, [sp, #4]
   15534:	0041      	lsls	r1, r0, #1
   15536:	9100      	str	r1, [sp, #0]
   15538:	e7ff      	b.n	1553a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x26>
   1553a:	9802      	ldr	r0, [sp, #8]
   1553c:	9900      	ldr	r1, [sp, #0]
   1553e:	4308      	orrs	r0, r1
    }
   15540:	b004      	add	sp, #16
   15542:	bd80      	pop	{r7, pc}

00015544 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE>:
    fn to_usize() -> usize {
   15544:	b580      	push	{r7, lr}
   15546:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15548:	f001 ff55 	bl	173f6 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   1554c:	9003      	str	r0, [sp, #12]
   1554e:	e7ff      	b.n	15550 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0xc>
   15550:	9803      	ldr	r0, [sp, #12]
   15552:	f001 ffb6 	bl	174c2 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   15556:	9002      	str	r0, [sp, #8]
   15558:	e7ff      	b.n	1555a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x16>
   1555a:	f7ff ffdb 	bl	15514 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>
   1555e:	9001      	str	r0, [sp, #4]
   15560:	e7ff      	b.n	15562 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x1e>
   15562:	9801      	ldr	r0, [sp, #4]
   15564:	0041      	lsls	r1, r0, #1
   15566:	9100      	str	r1, [sp, #0]
   15568:	e7ff      	b.n	1556a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x26>
   1556a:	9802      	ldr	r0, [sp, #8]
   1556c:	9900      	ldr	r1, [sp, #0]
   1556e:	4308      	orrs	r0, r1
    }
   15570:	b004      	add	sp, #16
   15572:	bd80      	pop	{r7, pc}

00015574 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E>:
    fn to_usize() -> usize {
   15574:	b580      	push	{r7, lr}
   15576:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15578:	f001 ff3f 	bl	173fa <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>
   1557c:	9003      	str	r0, [sp, #12]
   1557e:	e7ff      	b.n	15580 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0xc>
   15580:	9803      	ldr	r0, [sp, #12]
   15582:	f001 ff9e 	bl	174c2 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   15586:	9002      	str	r0, [sp, #8]
   15588:	e7ff      	b.n	1558a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x16>
   1558a:	f000 f83b 	bl	15604 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E>
   1558e:	9001      	str	r0, [sp, #4]
   15590:	e7ff      	b.n	15592 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x1e>
   15592:	9801      	ldr	r0, [sp, #4]
   15594:	0041      	lsls	r1, r0, #1
   15596:	9100      	str	r1, [sp, #0]
   15598:	e7ff      	b.n	1559a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x26>
   1559a:	9802      	ldr	r0, [sp, #8]
   1559c:	9900      	ldr	r1, [sp, #0]
   1559e:	4308      	orrs	r0, r1
    }
   155a0:	b004      	add	sp, #16
   155a2:	bd80      	pop	{r7, pc}

000155a4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E>:
    fn to_usize() -> usize {
   155a4:	b580      	push	{r7, lr}
   155a6:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   155a8:	f001 ff25 	bl	173f6 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   155ac:	9003      	str	r0, [sp, #12]
   155ae:	e7ff      	b.n	155b0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0xc>
   155b0:	9803      	ldr	r0, [sp, #12]
   155b2:	f001 ff86 	bl	174c2 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   155b6:	9002      	str	r0, [sp, #8]
   155b8:	e7ff      	b.n	155ba <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x16>
   155ba:	f000 f80b 	bl	155d4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE>
   155be:	9001      	str	r0, [sp, #4]
   155c0:	e7ff      	b.n	155c2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x1e>
   155c2:	9801      	ldr	r0, [sp, #4]
   155c4:	0041      	lsls	r1, r0, #1
   155c6:	9100      	str	r1, [sp, #0]
   155c8:	e7ff      	b.n	155ca <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x26>
   155ca:	9802      	ldr	r0, [sp, #8]
   155cc:	9900      	ldr	r1, [sp, #0]
   155ce:	4308      	orrs	r0, r1
    }
   155d0:	b004      	add	sp, #16
   155d2:	bd80      	pop	{r7, pc}

000155d4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE>:
    fn to_usize() -> usize {
   155d4:	b580      	push	{r7, lr}
   155d6:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   155d8:	f001 ff0f 	bl	173fa <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>
   155dc:	9003      	str	r0, [sp, #12]
   155de:	e7ff      	b.n	155e0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0xc>
   155e0:	9803      	ldr	r0, [sp, #12]
   155e2:	f001 ff6e 	bl	174c2 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   155e6:	9002      	str	r0, [sp, #8]
   155e8:	e7ff      	b.n	155ea <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x16>
   155ea:	f001 fe8c 	bl	17306 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   155ee:	9001      	str	r0, [sp, #4]
   155f0:	e7ff      	b.n	155f2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x1e>
   155f2:	9801      	ldr	r0, [sp, #4]
   155f4:	0041      	lsls	r1, r0, #1
   155f6:	9100      	str	r1, [sp, #0]
   155f8:	e7ff      	b.n	155fa <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x26>
   155fa:	9802      	ldr	r0, [sp, #8]
   155fc:	9900      	ldr	r1, [sp, #0]
   155fe:	4308      	orrs	r0, r1
    }
   15600:	b004      	add	sp, #16
   15602:	bd80      	pop	{r7, pc}

00015604 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E>:
    fn to_usize() -> usize {
   15604:	b580      	push	{r7, lr}
   15606:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15608:	f001 fef5 	bl	173f6 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   1560c:	9003      	str	r0, [sp, #12]
   1560e:	e7ff      	b.n	15610 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0xc>
   15610:	9803      	ldr	r0, [sp, #12]
   15612:	f001 ff56 	bl	174c2 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   15616:	9002      	str	r0, [sp, #8]
   15618:	e7ff      	b.n	1561a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x16>
   1561a:	f7ff ffc3 	bl	155a4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E>
   1561e:	9001      	str	r0, [sp, #4]
   15620:	e7ff      	b.n	15622 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x1e>
   15622:	9801      	ldr	r0, [sp, #4]
   15624:	0041      	lsls	r1, r0, #1
   15626:	9100      	str	r1, [sp, #0]
   15628:	e7ff      	b.n	1562a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x26>
   1562a:	9802      	ldr	r0, [sp, #8]
   1562c:	9900      	ldr	r1, [sp, #0]
   1562e:	4308      	orrs	r0, r1
    }
   15630:	b004      	add	sp, #16
   15632:	bd80      	pop	{r7, pc}

00015634 <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E>:
pub fn draw_to_display<T>(item: T)
   15634:	b510      	push	{r4, lr}
   15636:	b088      	sub	sp, #32
   15638:	a901      	add	r1, sp, #4
        item
   1563a:	460a      	mov	r2, r1
   1563c:	e8b0 5008 	ldmia.w	r0!, {r3, ip, lr}
   15640:	e8a2 5008 	stmia.w	r2!, {r3, ip, lr}
   15644:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
   15648:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
    super::batch::draw_blocks(            //  Draw text or graphics the new faster way, as pixel blocks
   1564c:	f240 1048 	movw	r0, #328	; 0x148
   15650:	f2c2 0000 	movt	r0, #8192	; 0x2000
   15654:	f000 f819 	bl	1568a <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE>
   15658:	9000      	str	r0, [sp, #0]
   1565a:	e7ff      	b.n	1565c <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E+0x28>
   1565c:	9800      	ldr	r0, [sp, #0]
   1565e:	f000 0001 	and.w	r0, r0, #1
   15662:	f241 0137 	movw	r1, #4151	; 0x1037
   15666:	f2c0 0102 	movt	r1, #2
   1566a:	f241 0380 	movw	r3, #4224	; 0x1080
   1566e:	f2c0 0302 	movt	r3, #2
   15672:	2210      	movs	r2, #16
   15674:	f7ff fdf9 	bl	1526a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   15678:	e7ff      	b.n	1567a <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E+0x46>
}
   1567a:	b008      	add	sp, #32
   1567c:	bd10      	pop	{r4, pc}

0001567e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E>:
   1567e:	b580      	push	{r7, lr}
   15680:	f44f 72b6 	mov.w	r2, #364	; 0x16c
   15684:	f008 fd6a 	bl	1e15c <__aeabi_memcpy>
   15688:	bd80      	pop	{r7, pc}

0001568a <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE>:
    pub colors:   BlockColors,
}

/// Draw the pixels in the item as Pixel Blocks of contiguous Pixel Rows. The pixels are grouped by row then by block.
#[allow(dead_code)]
pub fn draw_blocks<SPI, DC, RST, T>(display: &mut ST7735<SPI, DC, RST>, item_pixels: T) -> Result<(),()>
   1568a:	b5b0      	push	{r4, r5, r7, lr}
   1568c:	f5ad 6d48 	sub.w	sp, sp, #3200	; 0xc80
   15690:	f8cd 0c6c 	str.w	r0, [sp, #3180]	; 0xc6c
   15694:	aa19      	add	r2, sp, #100	; 0x64
    SPI: spi::Write<u8>,
    DC: OutputPin,
    RST: OutputPin,
    T: IntoIterator<Item = Pixel<Rgb565>>, {
    //  Get the pixels for the item to be rendered.
    let pixels = item_pixels.into_iter();
   15696:	4613      	mov	r3, r2
   15698:	e8b1 5010 	ldmia.w	r1!, {r4, ip, lr}
   1569c:	e8a3 5010 	stmia.w	r3!, {r4, ip, lr}
   156a0:	e891 5030 	ldmia.w	r1, {r4, r5, ip, lr}
   156a4:	e883 5030 	stmia.w	r3, {r4, r5, ip, lr}
   156a8:	a910      	add	r1, sp, #64	; 0x40
   156aa:	900e      	str	r0, [sp, #56]	; 0x38
   156ac:	4608      	mov	r0, r1
   156ae:	4611      	mov	r1, r2
   156b0:	f000 fe01 	bl	162b6 <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E>
   156b4:	e7ff      	b.n	156b6 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x2c>
   156b6:	a810      	add	r0, sp, #64	; 0x40
   156b8:	a945      	add	r1, sp, #276	; 0x114
    //  Batch the pixels into Pixel Rows.
    let rows = to_rows(pixels);
   156ba:	460a      	mov	r2, r1
   156bc:	e8b0 5018 	ldmia.w	r0!, {r3, r4, ip, lr}
   156c0:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
   156c4:	e890 5038 	ldmia.w	r0, {r3, r4, r5, ip, lr}
   156c8:	e882 5038 	stmia.w	r2, {r3, r4, r5, ip, lr}
   156cc:	a820      	add	r0, sp, #128	; 0x80
   156ce:	f000 f8b7 	bl	15840 <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E>
   156d2:	e7ff      	b.n	156d4 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x4a>
   156d4:	a8a9      	add	r0, sp, #676	; 0x2a4
   156d6:	a920      	add	r1, sp, #128	; 0x80
   156d8:	2294      	movs	r2, #148	; 0x94
    //  Batch the Pixel Rows into Pixel Blocks.
    let blocks = to_blocks(rows);
   156da:	900d      	str	r0, [sp, #52]	; 0x34
   156dc:	f008 fd3e 	bl	1e15c <__aeabi_memcpy>
   156e0:	a84e      	add	r0, sp, #312	; 0x138
   156e2:	990d      	ldr	r1, [sp, #52]	; 0x34
   156e4:	f000 f8db 	bl	1589e <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E>
   156e8:	e7ff      	b.n	156ea <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x60>
   156ea:	f20d 40a4 	addw	r0, sp, #1188	; 0x4a4
   156ee:	a94e      	add	r1, sp, #312	; 0x138
   156f0:	f44f 72b6 	mov.w	r2, #364	; 0x16c
    //  For each Pixel Block...
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   156f4:	900c      	str	r0, [sp, #48]	; 0x30
   156f6:	f008 fd31 	bl	1e15c <__aeabi_memcpy>
   156fa:	a8ce      	add	r0, sp, #824	; 0x338
   156fc:	990c      	ldr	r1, [sp, #48]	; 0x30
   156fe:	f7ff ffbe 	bl	1567e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E>
   15702:	e7ff      	b.n	15704 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x7a>
   15704:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
   15708:	a9ce      	add	r1, sp, #824	; 0x338
   1570a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
   1570e:	f008 fd25 	bl	1e15c <__aeabi_memcpy>
   15712:	e7ff      	b.n	15714 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x8a>
   15714:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
   15718:	f50d 61c2 	add.w	r1, sp, #1552	; 0x610
   1571c:	f000 fa2c 	bl	15b78 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E>
   15720:	e7ff      	b.n	15722 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x98>
   15722:	f8dd 0850 	ldr.w	r0, [sp, #2128]	; 0x850
   15726:	2800      	cmp	r0, #0
   15728:	d001      	beq.n	1572e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xa4>
   1572a:	e7ff      	b.n	1572c <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xa2>
   1572c:	e005      	b.n	1573a <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xb0>
   1572e:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
   15732:	f7f5 f836 	bl	a7a2 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>
   15736:	e01c      	b.n	15772 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xe8>
   15738:	defe      	udf	#254	; 0xfe
   1573a:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
   1573e:	1d01      	adds	r1, r0, #4
   15740:	f60d 1028 	addw	r0, sp, #2344	; 0x928
   15744:	22d4      	movs	r2, #212	; 0xd4
   15746:	900b      	str	r0, [sp, #44]	; 0x2c
   15748:	920a      	str	r2, [sp, #40]	; 0x28
   1574a:	f008 fd07 	bl	1e15c <__aeabi_memcpy>
   1574e:	f60d 10fc 	addw	r0, sp, #2556	; 0x9fc
   15752:	9009      	str	r0, [sp, #36]	; 0x24
   15754:	990b      	ldr	r1, [sp, #44]	; 0x2c
   15756:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   15758:	f008 fd00 	bl	1e15c <__aeabi_memcpy>
   1575c:	f20d 707c 	addw	r0, sp, #1916	; 0x77c
   15760:	9909      	ldr	r1, [sp, #36]	; 0x24
   15762:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   15764:	f008 fcfa 	bl	1e15c <__aeabi_memcpy>
   15768:	f8dd 0850 	ldr.w	r0, [sp, #2128]	; 0x850
   1576c:	2801      	cmp	r0, #1
   1576e:	d02c      	beq.n	157ca <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x140>
   15770:	e061      	b.n	15836 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x1ac>
   15772:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
        //  Dump out the Pixel Blocks for the square in test_display()
        /* if x_left >= 60 && x_left <= 150 && x_right >= 60 && x_right <= 150 && y_top >= 60 && y_top <= 150 && y_bottom >= 60 && y_bottom <= 150 {
            console::print("pixel block ("); console::printint(x_left as i32); console::print(", "); console::printint(y_top as i32); ////
            console::print("), ("); console::printint(x_right as i32); console::print(", "); console::printint(y_bottom as i32); console::print(")\n"); ////    
        } */
    }
   15776:	f7f4 fff1 	bl	a75c <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>
   1577a:	e022      	b.n	157c2 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x138>
        display.set_pixels(
   1577c:	f89d 0b9f 	ldrb.w	r0, [sp, #2975]	; 0xb9f
   15780:	f7f3 f9f4 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   15784:	f88d 0b9e 	strb.w	r0, [sp, #2974]	; 0xb9e
   15788:	e7ff      	b.n	1578a <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x100>
            colors) ? ;
   1578a:	f89d 0b9e 	ldrb.w	r0, [sp, #2974]	; 0xb9e
   1578e:	07c1      	lsls	r1, r0, #31
   15790:	2900      	cmp	r1, #0
   15792:	d001      	beq.n	15798 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x10e>
   15794:	e7ff      	b.n	15796 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x10c>
   15796:	e001      	b.n	1579c <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x112>
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   15798:	e7bc      	b.n	15714 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x8a>
        display.set_pixels(
   1579a:	defe      	udf	#254	; 0xfe
            colors) ? ;
   1579c:	f7fc fc21 	bl	11fe2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   157a0:	e004      	b.n	157ac <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x122>
    Ok(())
}
   157a2:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
   157a6:	f50d 6d48 	add.w	sp, sp, #3200	; 0xc80
   157aa:	bdb0      	pop	{r4, r5, r7, pc}
            colors) ? ;
   157ac:	f7ff feaa 	bl	15504 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   157b0:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
   157b4:	e7ff      	b.n	157b6 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x12c>
   157b6:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
    }
   157ba:	f7f4 ffcf 	bl	a75c <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>
   157be:	e7ff      	b.n	157c0 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x136>
}
   157c0:	e7ef      	b.n	157a2 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x118>
   157c2:	2000      	movs	r0, #0
    Ok(())
   157c4:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
}
   157c8:	e7eb      	b.n	157a2 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x118>
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   157ca:	f8bd 0848 	ldrh.w	r0, [sp, #2120]	; 0x848
   157ce:	f8ad 0c78 	strh.w	r0, [sp, #3192]	; 0xc78
   157d2:	f8bd 184a 	ldrh.w	r1, [sp, #2122]	; 0x84a
   157d6:	f8ad 1c7a 	strh.w	r1, [sp, #3194]	; 0xc7a
   157da:	f8bd 284c 	ldrh.w	r2, [sp, #2124]	; 0x84c
   157de:	f8ad 2c7c 	strh.w	r2, [sp, #3196]	; 0xc7c
   157e2:	f8bd 384e 	ldrh.w	r3, [sp, #2126]	; 0x84e
   157e6:	f8ad 3c7e 	strh.w	r3, [sp, #3198]	; 0xc7e
   157ea:	f50d 6c2d 	add.w	ip, sp, #2768	; 0xad0
   157ee:	f20d 7e7c 	addw	lr, sp, #1916	; 0x77c
   157f2:	24cc      	movs	r4, #204	; 0xcc
   157f4:	9008      	str	r0, [sp, #32]
   157f6:	4660      	mov	r0, ip
   157f8:	9107      	str	r1, [sp, #28]
   157fa:	4671      	mov	r1, lr
   157fc:	9206      	str	r2, [sp, #24]
   157fe:	4622      	mov	r2, r4
   15800:	9305      	str	r3, [sp, #20]
   15802:	f8cd c010 	str.w	ip, [sp, #16]
   15806:	9403      	str	r4, [sp, #12]
   15808:	f008 fca8 	bl	1e15c <__aeabi_memcpy>
   1580c:	f50d 603a 	add.w	r0, sp, #2976	; 0xba0
            colors) ? ;
   15810:	9002      	str	r0, [sp, #8]
   15812:	9904      	ldr	r1, [sp, #16]
   15814:	9a03      	ldr	r2, [sp, #12]
   15816:	f008 fca1 	bl	1e15c <__aeabi_memcpy>
        display.set_pixels(
   1581a:	4668      	mov	r0, sp
   1581c:	9902      	ldr	r1, [sp, #8]
   1581e:	6041      	str	r1, [r0, #4]
   15820:	9a05      	ldr	r2, [sp, #20]
   15822:	6002      	str	r2, [r0, #0]
   15824:	980e      	ldr	r0, [sp, #56]	; 0x38
   15826:	9908      	ldr	r1, [sp, #32]
   15828:	9a06      	ldr	r2, [sp, #24]
   1582a:	9b07      	ldr	r3, [sp, #28]
   1582c:	f7f3 ffe3 	bl	97f6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E>
   15830:	f88d 0b9f 	strb.w	r0, [sp, #2975]	; 0xb9f
   15834:	e7a2      	b.n	1577c <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xf2>
   15836:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   1583a:	f7f4 ffb2 	bl	a7a2 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>
   1583e:	e7c4      	b.n	157ca <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x140>

00015840 <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E>:

/// Batch the pixels into Pixel Rows, which are contiguous pixels on the same row.
/// P can be any Pixel Iterator (e.g. a rectangle).
fn to_rows<P>(pixels: P) -> RowIterator<P>
   15840:	b5b0      	push	{r4, r5, r7, lr}
   15842:	b0a4      	sub	sp, #144	; 0x90
   15844:	aa01      	add	r2, sp, #4
where
    P: Iterator<Item = Pixel<Rgb565>>, {
    RowIterator::<P> {
        pixels,
   15846:	e8b1 5018 	ldmia.w	r1!, {r3, r4, ip, lr}
   1584a:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
   1584e:	e891 5038 	ldmia.w	r1, {r3, r4, r5, ip, lr}
   15852:	e882 5038 	stmia.w	r2, {r3, r4, r5, ip, lr}
   15856:	a90a      	add	r1, sp, #40	; 0x28
        x_left: 0,
        x_right: 0,
        y: 0,
        colors: RowColors::new(),
   15858:	9000      	str	r0, [sp, #0]
   1585a:	4608      	mov	r0, r1
   1585c:	f7ff f948 	bl	14af0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E>
   15860:	e7ff      	b.n	15862 <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E+0x22>
   15862:	a801      	add	r0, sp, #4
    RowIterator::<P> {
   15864:	9900      	ldr	r1, [sp, #0]
   15866:	e8b0 500c 	ldmia.w	r0!, {r2, r3, ip, lr}
   1586a:	e8a1 500c 	stmia.w	r1!, {r2, r3, ip, lr}
   1586e:	e890 501c 	ldmia.w	r0, {r2, r3, r4, ip, lr}
   15872:	e881 501c 	stmia.w	r1, {r2, r3, r4, ip, lr}
   15876:	2000      	movs	r0, #0
   15878:	9900      	ldr	r1, [sp, #0]
   1587a:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
   1587e:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
   15882:	f8a1 0090 	strh.w	r0, [r1, #144]	; 0x90
   15886:	f101 0024 	add.w	r0, r1, #36	; 0x24
   1588a:	a90a      	add	r1, sp, #40	; 0x28
   1588c:	2268      	movs	r2, #104	; 0x68
   1588e:	f008 fc65 	bl	1e15c <__aeabi_memcpy>
   15892:	2001      	movs	r0, #1
   15894:	9900      	ldr	r1, [sp, #0]
   15896:	f881 0092 	strb.w	r0, [r1, #146]	; 0x92
        first_pixel: true,
    }
}
   1589a:	b024      	add	sp, #144	; 0x90
   1589c:	bdb0      	pop	{r4, r5, r7, pc}

0001589e <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E>:

/// Batch the Pixel Rows into Pixel Blocks, which are contiguous Pixel Rows with the same start and end column number
/// R can be any Pixel Row Iterator.
fn to_blocks<R>(rows: R) -> BlockIterator<R>
   1589e:	b580      	push	{r7, lr}
   158a0:	b0da      	sub	sp, #360	; 0x168
   158a2:	aa02      	add	r2, sp, #8
   158a4:	2394      	movs	r3, #148	; 0x94
where
    R: Iterator<Item = PixelRow>, {
    BlockIterator::<R> {
        rows,
   158a6:	9001      	str	r0, [sp, #4]
   158a8:	4610      	mov	r0, r2
   158aa:	461a      	mov	r2, r3
   158ac:	f008 fc56 	bl	1e15c <__aeabi_memcpy>
   158b0:	a827      	add	r0, sp, #156	; 0x9c
        x_left: 0,
        x_right: 0,
        y_top: 0,
        y_bottom: 0,
        colors: BlockColors::new(),
   158b2:	f7ff f92c 	bl	14b0e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE>
   158b6:	e7ff      	b.n	158b8 <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E+0x1a>
   158b8:	a902      	add	r1, sp, #8
   158ba:	2294      	movs	r2, #148	; 0x94
    BlockIterator::<R> {
   158bc:	9801      	ldr	r0, [sp, #4]
   158be:	f008 fc4d 	bl	1e15c <__aeabi_memcpy>
   158c2:	2000      	movs	r0, #0
   158c4:	9901      	ldr	r1, [sp, #4]
   158c6:	f8a1 0160 	strh.w	r0, [r1, #352]	; 0x160
   158ca:	f8a1 0162 	strh.w	r0, [r1, #354]	; 0x162
   158ce:	f8a1 0164 	strh.w	r0, [r1, #356]	; 0x164
   158d2:	f8a1 0166 	strh.w	r0, [r1, #358]	; 0x166
   158d6:	f101 0094 	add.w	r0, r1, #148	; 0x94
   158da:	a927      	add	r1, sp, #156	; 0x9c
   158dc:	22cc      	movs	r2, #204	; 0xcc
   158de:	f008 fc3d 	bl	1e15c <__aeabi_memcpy>
   158e2:	2001      	movs	r0, #1
   158e4:	9901      	ldr	r1, [sp, #4]
   158e6:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
        first_row: true,
    }
}    
   158ea:	b05a      	add	sp, #360	; 0x168
   158ec:	bd80      	pop	{r7, pc}

000158ee <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E>:
impl<P: Iterator<Item = Pixel<Rgb565>>> Iterator for RowIterator<P> {
    /// This Iterator returns Pixel Rows
    type Item = PixelRow;

    /// Return the next Pixel Row of contiguous pixels on the same row
    fn next(&mut self) -> Option<Self::Item> {
   158ee:	b580      	push	{r7, lr}
   158f0:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
   158f4:	91c1      	str	r1, [sp, #772]	; 0x304
        //  Loop over all pixels until we have composed a Pixel Row, or we have run out of pixels.
        loop {
   158f6:	9116      	str	r1, [sp, #88]	; 0x58
   158f8:	9015      	str	r0, [sp, #84]	; 0x54
   158fa:	e7ff      	b.n	158fc <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xe>
   158fc:	a817      	add	r0, sp, #92	; 0x5c
            //  Get the next pixel.
            let next_pixel = self.pixels.next();
   158fe:	9916      	ldr	r1, [sp, #88]	; 0x58
   15900:	f000 fd34 	bl	1636c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE>
   15904:	e7ff      	b.n	15906 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x18>
            match next_pixel {
                None => {  //  If no more pixels...
   15906:	9817      	ldr	r0, [sp, #92]	; 0x5c
   15908:	2800      	cmp	r0, #0
   1590a:	d01c      	beq.n	15946 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x58>
   1590c:	e7ff      	b.n	1590e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x20>
                    };
                    self.colors.clear();
                    self.first_pixel = true;
                    return Some(row);
                }
                Some(Pixel(coord, color)) => {  //  If there is a pixel...
   1590e:	9818      	ldr	r0, [sp, #96]	; 0x60
   15910:	9919      	ldr	r1, [sp, #100]	; 0x64
   15912:	90c2      	str	r0, [sp, #776]	; 0x308
   15914:	91c3      	str	r1, [sp, #780]	; 0x30c
   15916:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   1591a:	4613      	mov	r3, r2
   1591c:	f8ad 2310 	strh.w	r2, [sp, #784]	; 0x310
                    let x = coord.0 as u16;
   15920:	f8ad 0312 	strh.w	r0, [sp, #786]	; 0x312
                    let y = coord.1 as u16;
   15924:	f8ad 1314 	strh.w	r1, [sp, #788]	; 0x314
                    let color = color.0;
   15928:	f8ad 2316 	strh.w	r2, [sp, #790]	; 0x316
                    //  Save the first pixel as the row start and handle next pixel.
                    if self.first_pixel {
   1592c:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1592e:	f892 c092 	ldrb.w	ip, [r2, #146]	; 0x92
   15932:	ea4f 7ccc 	mov.w	ip, ip, lsl #31
   15936:	f1bc 0f00 	cmp.w	ip, #0
   1593a:	9014      	str	r0, [sp, #80]	; 0x50
   1593c:	9113      	str	r1, [sp, #76]	; 0x4c
   1593e:	9312      	str	r3, [sp, #72]	; 0x48
   15940:	d156      	bne.n	159f0 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x102>
   15942:	e04a      	b.n	159da <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xec>
            match next_pixel {
   15944:	defe      	udf	#254	; 0xfe
                    if self.first_pixel {
   15946:	9816      	ldr	r0, [sp, #88]	; 0x58
   15948:	f890 1092 	ldrb.w	r1, [r0, #146]	; 0x92
   1594c:	07c9      	lsls	r1, r1, #31
   1594e:	2900      	cmp	r1, #0
   15950:	d111      	bne.n	15976 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x88>
   15952:	e7ff      	b.n	15954 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x66>
                        x_left: self.x_left,
   15954:	9816      	ldr	r0, [sp, #88]	; 0x58
   15956:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
                        x_right: self.x_right,
   1595a:	f8b0 208e 	ldrh.w	r2, [r0, #142]	; 0x8e
                        y: self.y,
   1595e:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
                        colors: self.colors.clone(),
   15962:	f100 0c24 	add.w	ip, r0, #36	; 0x24
   15966:	a837      	add	r0, sp, #220	; 0xdc
   15968:	9111      	str	r1, [sp, #68]	; 0x44
   1596a:	4661      	mov	r1, ip
   1596c:	9210      	str	r2, [sp, #64]	; 0x40
   1596e:	930f      	str	r3, [sp, #60]	; 0x3c
   15970:	f7ff f827 	bl	149c2 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>
   15974:	e006      	b.n	15984 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x96>
   15976:	2000      	movs	r0, #0
                        return None;  //  No pixels to group
   15978:	9915      	ldr	r1, [sp, #84]	; 0x54
   1597a:	6008      	str	r0, [r1, #0]
   1597c:	e7ff      	b.n	1597e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                        .expect("never");
                    return Some(row);
                }
            }
        }
    }
   1597e:	f50d 7d46 	add.w	sp, sp, #792	; 0x318
   15982:	bd80      	pop	{r7, pc}
                    let row = PixelRow {
   15984:	9811      	ldr	r0, [sp, #68]	; 0x44
   15986:	f8ad 00d4 	strh.w	r0, [sp, #212]	; 0xd4
   1598a:	9910      	ldr	r1, [sp, #64]	; 0x40
   1598c:	f8ad 10d6 	strh.w	r1, [sp, #214]	; 0xd6
   15990:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15992:	f8ad 20d8 	strh.w	r2, [sp, #216]	; 0xd8
   15996:	a81b      	add	r0, sp, #108	; 0x6c
   15998:	a937      	add	r1, sp, #220	; 0xdc
   1599a:	2268      	movs	r2, #104	; 0x68
   1599c:	f008 fbde 	bl	1e15c <__aeabi_memcpy>
                    self.colors.clear();
   159a0:	9816      	ldr	r0, [sp, #88]	; 0x58
   159a2:	3024      	adds	r0, #36	; 0x24
   159a4:	f7ff f8d2 	bl	14b4c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   159a8:	e7ff      	b.n	159aa <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xbc>
   159aa:	2001      	movs	r0, #1
                    self.first_pixel = true;
   159ac:	9916      	ldr	r1, [sp, #88]	; 0x58
   159ae:	f881 0092 	strb.w	r0, [r1, #146]	; 0x92
   159b2:	aa51      	add	r2, sp, #324	; 0x144
   159b4:	a91b      	add	r1, sp, #108	; 0x6c
   159b6:	2370      	movs	r3, #112	; 0x70
                    return Some(row);
   159b8:	900e      	str	r0, [sp, #56]	; 0x38
   159ba:	4610      	mov	r0, r2
   159bc:	920d      	str	r2, [sp, #52]	; 0x34
   159be:	461a      	mov	r2, r3
   159c0:	930c      	str	r3, [sp, #48]	; 0x30
   159c2:	f008 fbcb 	bl	1e15c <__aeabi_memcpy>
   159c6:	9815      	ldr	r0, [sp, #84]	; 0x54
   159c8:	3004      	adds	r0, #4
   159ca:	990d      	ldr	r1, [sp, #52]	; 0x34
   159cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   159ce:	f008 fbc5 	bl	1e15c <__aeabi_memcpy>
   159d2:	980e      	ldr	r0, [sp, #56]	; 0x38
   159d4:	9915      	ldr	r1, [sp, #84]	; 0x54
   159d6:	6008      	str	r0, [r1, #0]
   159d8:	e7d1      	b.n	1597e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                    if x == self.x_right + 1 && y == self.y {
   159da:	9816      	ldr	r0, [sp, #88]	; 0x58
   159dc:	f8b0 108e 	ldrh.w	r1, [r0, #142]	; 0x8e
   159e0:	3101      	adds	r1, #1
   159e2:	b28a      	uxth	r2, r1
   159e4:	460b      	mov	r3, r1
   159e6:	428a      	cmp	r2, r1
   159e8:	930b      	str	r3, [sp, #44]	; 0x2c
   159ea:	f040 80b9 	bne.w	15b60 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x272>
   159ee:	e040      	b.n	15a72 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x184>
   159f0:	2000      	movs	r0, #0
                        self.first_pixel = false;
   159f2:	9916      	ldr	r1, [sp, #88]	; 0x58
   159f4:	f881 0092 	strb.w	r0, [r1, #146]	; 0x92
                        self.x_left = x;
   159f8:	9814      	ldr	r0, [sp, #80]	; 0x50
   159fa:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
                        self.x_right = x;
   159fe:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
                        self.y = y;
   15a02:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   15a04:	f8a1 2090 	strh.w	r2, [r1, #144]	; 0x90
                        self.colors.clear();
   15a08:	f101 0024 	add.w	r0, r1, #36	; 0x24
   15a0c:	f7ff f89e 	bl	14b4c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   15a10:	e7ff      	b.n	15a12 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x124>
                        self.colors.push(color)
   15a12:	9816      	ldr	r0, [sp, #88]	; 0x58
   15a14:	3024      	adds	r0, #36	; 0x24
   15a16:	9912      	ldr	r1, [sp, #72]	; 0x48
   15a18:	f7ff f888 	bl	14b2c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   15a1c:	900a      	str	r0, [sp, #40]	; 0x28
   15a1e:	9109      	str	r1, [sp, #36]	; 0x24
   15a20:	e7ff      	b.n	15a22 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x134>
   15a22:	f241 00cc 	movw	r0, #4300	; 0x10cc
   15a26:	f2c0 0002 	movt	r0, #2
   15a2a:	4669      	mov	r1, sp
   15a2c:	6008      	str	r0, [r1, #0]
   15a2e:	f241 0290 	movw	r2, #4240	; 0x1090
   15a32:	f2c0 0202 	movt	r2, #2
   15a36:	2305      	movs	r3, #5
   15a38:	980a      	ldr	r0, [sp, #40]	; 0x28
   15a3a:	9909      	ldr	r1, [sp, #36]	; 0x24
   15a3c:	f7ff fbe4 	bl	15208 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>
   15a40:	e7ff      	b.n	15a42 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x154>
                        continue;
   15a42:	e7ff      	b.n	15a44 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x156>
   15a44:	e75a      	b.n	158fc <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xe>
   15a46:	2001      	movs	r0, #1
                    if x == self.x_right + 1 && y == self.y {
   15a48:	f88d 01b7 	strb.w	r0, [sp, #439]	; 0x1b7
   15a4c:	e00b      	b.n	15a66 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x178>
   15a4e:	2000      	movs	r0, #0
   15a50:	f88d 01b7 	strb.w	r0, [sp, #439]	; 0x1b7
   15a54:	e007      	b.n	15a66 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x178>
   15a56:	9816      	ldr	r0, [sp, #88]	; 0x58
   15a58:	f8b0 1090 	ldrh.w	r1, [r0, #144]	; 0x90
   15a5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   15a5e:	b293      	uxth	r3, r2
   15a60:	428b      	cmp	r3, r1
   15a62:	d0f0      	beq.n	15a46 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x158>
   15a64:	e7f3      	b.n	15a4e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x160>
   15a66:	f89d 01b7 	ldrb.w	r0, [sp, #439]	; 0x1b7
   15a6a:	07c0      	lsls	r0, r0, #31
   15a6c:	2800      	cmp	r0, #0
   15a6e:	d107      	bne.n	15a80 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x192>
   15a70:	e020      	b.n	15ab4 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1c6>
   15a72:	980b      	ldr	r0, [sp, #44]	; 0x2c
   15a74:	b281      	uxth	r1, r0
   15a76:	9a14      	ldr	r2, [sp, #80]	; 0x50
   15a78:	b293      	uxth	r3, r2
   15a7a:	428b      	cmp	r3, r1
   15a7c:	d0eb      	beq.n	15a56 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x168>
   15a7e:	e7e6      	b.n	15a4e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x160>
                        if self.colors.push(color).is_ok() {
   15a80:	9816      	ldr	r0, [sp, #88]	; 0x58
   15a82:	3024      	adds	r0, #36	; 0x24
   15a84:	9912      	ldr	r1, [sp, #72]	; 0x48
   15a86:	f7ff f851 	bl	14b2c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   15a8a:	f8ad 11ba 	strh.w	r1, [sp, #442]	; 0x1ba
   15a8e:	f8ad 01b8 	strh.w	r0, [sp, #440]	; 0x1b8
   15a92:	e7ff      	b.n	15a94 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1a6>
   15a94:	a86e      	add	r0, sp, #440	; 0x1b8
   15a96:	f7ff fb92 	bl	151be <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE>
   15a9a:	9008      	str	r0, [sp, #32]
   15a9c:	e7ff      	b.n	15a9e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1b0>
   15a9e:	9808      	ldr	r0, [sp, #32]
   15aa0:	07c1      	lsls	r1, r0, #31
   15aa2:	2900      	cmp	r1, #0
   15aa4:	d101      	bne.n	15aaa <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1bc>
   15aa6:	e7ff      	b.n	15aa8 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1ba>
                    if x == self.x_right + 1 && y == self.y {
   15aa8:	e004      	b.n	15ab4 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1c6>
                            self.x_right = x;
   15aaa:	9814      	ldr	r0, [sp, #80]	; 0x50
   15aac:	9916      	ldr	r1, [sp, #88]	; 0x58
   15aae:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
                            continue;
   15ab2:	e7c7      	b.n	15a44 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x156>
                        x_left: self.x_left,
   15ab4:	9816      	ldr	r0, [sp, #88]	; 0x58
   15ab6:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
                        x_right: self.x_right,
   15aba:	f8b0 208e 	ldrh.w	r2, [r0, #142]	; 0x8e
                        y: self.y,
   15abe:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
                        colors: self.colors.clone(),
   15ac2:	f100 0c24 	add.w	ip, r0, #36	; 0x24
   15ac6:	a88b      	add	r0, sp, #556	; 0x22c
   15ac8:	9107      	str	r1, [sp, #28]
   15aca:	4661      	mov	r1, ip
   15acc:	9206      	str	r2, [sp, #24]
   15ace:	9305      	str	r3, [sp, #20]
   15ad0:	f7fe ff77 	bl	149c2 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>
   15ad4:	e7ff      	b.n	15ad6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1e8>
                    let row = PixelRow {
   15ad6:	9807      	ldr	r0, [sp, #28]
   15ad8:	f8ad 0224 	strh.w	r0, [sp, #548]	; 0x224
   15adc:	9906      	ldr	r1, [sp, #24]
   15ade:	f8ad 1226 	strh.w	r1, [sp, #550]	; 0x226
   15ae2:	9a05      	ldr	r2, [sp, #20]
   15ae4:	f8ad 2228 	strh.w	r2, [sp, #552]	; 0x228
   15ae8:	a86f      	add	r0, sp, #444	; 0x1bc
   15aea:	a98b      	add	r1, sp, #556	; 0x22c
   15aec:	2268      	movs	r2, #104	; 0x68
   15aee:	f008 fb35 	bl	1e15c <__aeabi_memcpy>
                    self.x_left = x;
   15af2:	9814      	ldr	r0, [sp, #80]	; 0x50
   15af4:	9916      	ldr	r1, [sp, #88]	; 0x58
   15af6:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
                    self.x_right = x;
   15afa:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
                    self.y = y;
   15afe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   15b00:	f8a1 2090 	strh.w	r2, [r1, #144]	; 0x90
                    self.colors.clear();
   15b04:	f101 0024 	add.w	r0, r1, #36	; 0x24
   15b08:	f7ff f820 	bl	14b4c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   15b0c:	e7ff      	b.n	15b0e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x220>
                    self.colors.push(color)
   15b0e:	9816      	ldr	r0, [sp, #88]	; 0x58
   15b10:	3024      	adds	r0, #36	; 0x24
   15b12:	9912      	ldr	r1, [sp, #72]	; 0x48
   15b14:	f7ff f80a 	bl	14b2c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   15b18:	9004      	str	r0, [sp, #16]
   15b1a:	9103      	str	r1, [sp, #12]
   15b1c:	e7ff      	b.n	15b1e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x230>
   15b1e:	f241 100c 	movw	r0, #4364	; 0x110c
   15b22:	f2c0 0002 	movt	r0, #2
   15b26:	4669      	mov	r1, sp
   15b28:	6008      	str	r0, [r1, #0]
   15b2a:	f241 0290 	movw	r2, #4240	; 0x1090
   15b2e:	f2c0 0202 	movt	r2, #2
   15b32:	2305      	movs	r3, #5
   15b34:	9804      	ldr	r0, [sp, #16]
   15b36:	9903      	ldr	r1, [sp, #12]
   15b38:	f7ff fb66 	bl	15208 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>
   15b3c:	e7ff      	b.n	15b3e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x250>
   15b3e:	a8a5      	add	r0, sp, #660	; 0x294
   15b40:	a96f      	add	r1, sp, #444	; 0x1bc
   15b42:	2270      	movs	r2, #112	; 0x70
                    return Some(row);
   15b44:	9002      	str	r0, [sp, #8]
   15b46:	9201      	str	r2, [sp, #4]
   15b48:	f008 fb08 	bl	1e15c <__aeabi_memcpy>
   15b4c:	9815      	ldr	r0, [sp, #84]	; 0x54
   15b4e:	3004      	adds	r0, #4
   15b50:	9902      	ldr	r1, [sp, #8]
   15b52:	9a01      	ldr	r2, [sp, #4]
   15b54:	f008 fb02 	bl	1e15c <__aeabi_memcpy>
   15b58:	2001      	movs	r0, #1
   15b5a:	9915      	ldr	r1, [sp, #84]	; 0x54
   15b5c:	6008      	str	r0, [r1, #0]
   15b5e:	e70e      	b.n	1597e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                    if x == self.x_right + 1 && y == self.y {
   15b60:	f241 00f0 	movw	r0, #4336	; 0x10f0
   15b64:	f2c0 0002 	movt	r0, #2
   15b68:	f241 02dc 	movw	r2, #4316	; 0x10dc
   15b6c:	f2c0 0202 	movt	r2, #2
   15b70:	211c      	movs	r1, #28
   15b72:	f001 ff1f 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15b76:	defe      	udf	#254	; 0xfe

00015b78 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E>:
impl<R: Iterator<Item = PixelRow>> Iterator for BlockIterator<R> {
    /// This Iterator returns Pixel Blocks
    type Item = PixelBlock;

    /// Return the next Pixel Block of contiguous Pixel Rows with the same start and end column number
    fn next(&mut self) -> Option<Self::Item> {
   15b78:	b580      	push	{r7, lr}
   15b7a:	f5ad 6dcb 	sub.w	sp, sp, #1624	; 0x658
   15b7e:	f8cd 164c 	str.w	r1, [sp, #1612]	; 0x64c
   15b82:	2200      	movs	r2, #0
        //  Loop over all Pixel Rows until we have composed a Pixel Block, or we have run out of Pixel Rows.
        loop {
   15b84:	f88d 264b 	strb.w	r2, [sp, #1611]	; 0x64b
   15b88:	911f      	str	r1, [sp, #124]	; 0x7c
   15b8a:	901e      	str	r0, [sp, #120]	; 0x78
   15b8c:	e7ff      	b.n	15b8e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x16>
   15b8e:	2001      	movs	r0, #1
            //  Get the next Pixel Row.
            let next_row = self.rows.next();
   15b90:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
   15b94:	a820      	add	r0, sp, #128	; 0x80
   15b96:	991f      	ldr	r1, [sp, #124]	; 0x7c
   15b98:	f7ff fea9 	bl	158ee <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E>
   15b9c:	e7ff      	b.n	15b9e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x26>
            match next_row {
                None => {  //  If no more Pixel Rows...
   15b9e:	9820      	ldr	r0, [sp, #128]	; 0x80
   15ba0:	2800      	cmp	r0, #0
   15ba2:	d026      	beq.n	15bf2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x7a>
   15ba4:	e7ff      	b.n	15ba6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2e>
   15ba6:	a820      	add	r0, sp, #128	; 0x80
                    };
                    self.colors.clear();
                    self.first_row = true;
                    return Some(row);
                }
                Some(PixelRow { x_left, x_right, y, colors, .. }) => {  //  If there is a Pixel Row...
   15ba8:	1d01      	adds	r1, r0, #4
   15baa:	f8bd 00ec 	ldrh.w	r0, [sp, #236]	; 0xec
   15bae:	4602      	mov	r2, r0
   15bb0:	f8ad 0652 	strh.w	r0, [sp, #1618]	; 0x652
   15bb4:	f8bd 00ee 	ldrh.w	r0, [sp, #238]	; 0xee
   15bb8:	4603      	mov	r3, r0
   15bba:	f8ad 0654 	strh.w	r0, [sp, #1620]	; 0x654
   15bbe:	f8bd 00f0 	ldrh.w	r0, [sp, #240]	; 0xf0
   15bc2:	4684      	mov	ip, r0
   15bc4:	f8ad 0656 	strh.w	r0, [sp, #1622]	; 0x656
   15bc8:	2000      	movs	r0, #0
   15bca:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
   15bce:	a8da      	add	r0, sp, #872	; 0x368
   15bd0:	f04f 0e68 	mov.w	lr, #104	; 0x68
   15bd4:	921d      	str	r2, [sp, #116]	; 0x74
   15bd6:	4672      	mov	r2, lr
   15bd8:	931c      	str	r3, [sp, #112]	; 0x70
   15bda:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
   15bde:	f008 fabd 	bl	1e15c <__aeabi_memcpy>
                    //  Save the first row as the block start and handle next block.
                    if self.first_row {
   15be2:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15be4:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
   15be8:	07c9      	lsls	r1, r1, #31
   15bea:	2900      	cmp	r1, #0
   15bec:	d15a      	bne.n	15ca4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x12c>
   15bee:	e04e      	b.n	15c8e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x116>
            match next_row {
   15bf0:	defe      	udf	#254	; 0xfe
                    if self.first_row {
   15bf2:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15bf4:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
   15bf8:	07c9      	lsls	r1, r1, #31
   15bfa:	2900      	cmp	r1, #0
   15bfc:	d115      	bne.n	15c2a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xb2>
   15bfe:	e7ff      	b.n	15c00 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x88>
                        x_left: self.x_left,
   15c00:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15c02:	f8b0 1160 	ldrh.w	r1, [r0, #352]	; 0x160
                        x_right: self.x_right,
   15c06:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
                        y_top: self.y_top,
   15c0a:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
                        y_bottom: self.y_bottom,
   15c0e:	f8b0 c166 	ldrh.w	ip, [r0, #358]	; 0x166
                        colors: self.colors.clone(),
   15c12:	f100 0e94 	add.w	lr, r0, #148	; 0x94
   15c16:	a872      	add	r0, sp, #456	; 0x1c8
   15c18:	911a      	str	r1, [sp, #104]	; 0x68
   15c1a:	4671      	mov	r1, lr
   15c1c:	9219      	str	r2, [sp, #100]	; 0x64
   15c1e:	9318      	str	r3, [sp, #96]	; 0x60
   15c20:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
   15c24:	f7fe fedd 	bl	149e2 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>
   15c28:	e003      	b.n	15c32 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xba>
   15c2a:	2000      	movs	r0, #0
                        return None;  //  No rows to group
   15c2c:	991e      	ldr	r1, [sp, #120]	; 0x78
   15c2e:	6008      	str	r0, [r1, #0]
   15c30:	e153      	b.n	15eda <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
                    let row = PixelBlock {
   15c32:	981a      	ldr	r0, [sp, #104]	; 0x68
   15c34:	f8ad 01c0 	strh.w	r0, [sp, #448]	; 0x1c0
   15c38:	9919      	ldr	r1, [sp, #100]	; 0x64
   15c3a:	f8ad 11c2 	strh.w	r1, [sp, #450]	; 0x1c2
   15c3e:	9a18      	ldr	r2, [sp, #96]	; 0x60
   15c40:	f8ad 21c4 	strh.w	r2, [sp, #452]	; 0x1c4
   15c44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15c46:	f8ad 31c6 	strh.w	r3, [sp, #454]	; 0x1c6
   15c4a:	a83d      	add	r0, sp, #244	; 0xf4
   15c4c:	a972      	add	r1, sp, #456	; 0x1c8
   15c4e:	22cc      	movs	r2, #204	; 0xcc
   15c50:	f008 fa84 	bl	1e15c <__aeabi_memcpy>
                    self.colors.clear();
   15c54:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15c56:	3094      	adds	r0, #148	; 0x94
   15c58:	f7fe ff80 	bl	14b5c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   15c5c:	e7ff      	b.n	15c5e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xe6>
   15c5e:	2001      	movs	r0, #1
                    self.first_row = true;
   15c60:	991f      	ldr	r1, [sp, #124]	; 0x7c
   15c62:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
   15c66:	aaa5      	add	r2, sp, #660	; 0x294
   15c68:	a93d      	add	r1, sp, #244	; 0xf4
   15c6a:	23d4      	movs	r3, #212	; 0xd4
                    return Some(row);
   15c6c:	9016      	str	r0, [sp, #88]	; 0x58
   15c6e:	4610      	mov	r0, r2
   15c70:	9215      	str	r2, [sp, #84]	; 0x54
   15c72:	461a      	mov	r2, r3
   15c74:	9314      	str	r3, [sp, #80]	; 0x50
   15c76:	f008 fa71 	bl	1e15c <__aeabi_memcpy>
   15c7a:	981e      	ldr	r0, [sp, #120]	; 0x78
   15c7c:	3004      	adds	r0, #4
   15c7e:	9915      	ldr	r1, [sp, #84]	; 0x54
   15c80:	9a14      	ldr	r2, [sp, #80]	; 0x50
   15c82:	f008 fa6b 	bl	1e15c <__aeabi_memcpy>
   15c86:	9816      	ldr	r0, [sp, #88]	; 0x58
   15c88:	991e      	ldr	r1, [sp, #120]	; 0x78
   15c8a:	6008      	str	r0, [r1, #0]
   15c8c:	e125      	b.n	15eda <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
                        self.colors.extend_from_slice(&colors)
                            .expect("never");
                        continue;
                    }
                    //  If this row is adjacent to the previous row and same size, add to the block.
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   15c8e:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15c90:	f8b0 1166 	ldrh.w	r1, [r0, #358]	; 0x166
   15c94:	3101      	adds	r1, #1
   15c96:	b28a      	uxth	r2, r1
   15c98:	460b      	mov	r3, r1
   15c9a:	428a      	cmp	r2, r1
   15c9c:	9313      	str	r3, [sp, #76]	; 0x4c
   15c9e:	f040 8128 	bne.w	15ef2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x37a>
   15ca2:	e069      	b.n	15d78 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x200>
   15ca4:	2000      	movs	r0, #0
                        self.first_row = false;
   15ca6:	991f      	ldr	r1, [sp, #124]	; 0x7c
   15ca8:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
                        self.x_left = x_left;
   15cac:	981d      	ldr	r0, [sp, #116]	; 0x74
   15cae:	f8a1 0160 	strh.w	r0, [r1, #352]	; 0x160
                        self.x_right = x_right;
   15cb2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   15cb4:	f8a1 2162 	strh.w	r2, [r1, #354]	; 0x162
                        self.y_top = y;
   15cb8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   15cba:	f8a1 3164 	strh.w	r3, [r1, #356]	; 0x164
                        self.y_bottom = y;
   15cbe:	f8a1 3166 	strh.w	r3, [r1, #358]	; 0x166
                        self.colors.clear();
   15cc2:	f101 0094 	add.w	r0, r1, #148	; 0x94
   15cc6:	f7fe ff49 	bl	14b5c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   15cca:	e7ff      	b.n	15ccc <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x154>
                        self.colors.extend_from_slice(&colors)
   15ccc:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15cce:	f100 0194 	add.w	r1, r0, #148	; 0x94
   15cd2:	a8da      	add	r0, sp, #872	; 0x368
   15cd4:	9112      	str	r1, [sp, #72]	; 0x48
   15cd6:	f7fe feb4 	bl	14a42 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   15cda:	9011      	str	r0, [sp, #68]	; 0x44
   15cdc:	9110      	str	r1, [sp, #64]	; 0x40
   15cde:	e7ff      	b.n	15ce0 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x168>
   15ce0:	9812      	ldr	r0, [sp, #72]	; 0x48
   15ce2:	9911      	ldr	r1, [sp, #68]	; 0x44
   15ce4:	9a10      	ldr	r2, [sp, #64]	; 0x40
   15ce6:	f7fe fef5 	bl	14ad4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   15cea:	900f      	str	r0, [sp, #60]	; 0x3c
   15cec:	e7ff      	b.n	15cee <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x176>
   15cee:	980f      	ldr	r0, [sp, #60]	; 0x3c
   15cf0:	f000 0001 	and.w	r0, r0, #1
   15cf4:	f241 0190 	movw	r1, #4240	; 0x1090
   15cf8:	f2c0 0102 	movt	r1, #2
   15cfc:	f241 131c 	movw	r3, #4380	; 0x111c
   15d00:	f2c0 0302 	movt	r3, #2
   15d04:	2205      	movs	r2, #5
   15d06:	f7ff fab0 	bl	1526a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   15d0a:	e7ff      	b.n	15d0c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x194>
                        continue;
   15d0c:	e7ff      	b.n	15d0e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x196>
   15d0e:	a8da      	add	r0, sp, #872	; 0x368
                    self.colors.clear();
                    self.colors.extend_from_slice(&colors)
                        .expect("never");
                    return Some(row);
                }
            }
   15d10:	f7f4 fd3f 	bl	a792 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   15d14:	e7ff      	b.n	15d16 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x19e>
        }
   15d16:	9820      	ldr	r0, [sp, #128]	; 0x80
   15d18:	2801      	cmp	r0, #1
   15d1a:	f000 80e2 	beq.w	15ee2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x36a>
   15d1e:	e0e4      	b.n	15eea <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x372>
   15d20:	2001      	movs	r0, #1
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   15d22:	f88d 03d1 	strb.w	r0, [sp, #977]	; 0x3d1
   15d26:	e00b      	b.n	15d40 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1c8>
   15d28:	2000      	movs	r0, #0
   15d2a:	f88d 03d1 	strb.w	r0, [sp, #977]	; 0x3d1
   15d2e:	e007      	b.n	15d40 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1c8>
   15d30:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15d32:	f8b0 1162 	ldrh.w	r1, [r0, #354]	; 0x162
   15d36:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   15d38:	b293      	uxth	r3, r2
   15d3a:	428b      	cmp	r3, r1
   15d3c:	d0f0      	beq.n	15d20 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1a8>
   15d3e:	e7f3      	b.n	15d28 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b0>
   15d40:	f89d 03d1 	ldrb.w	r0, [sp, #977]	; 0x3d1
   15d44:	07c0      	lsls	r0, r0, #31
   15d46:	2800      	cmp	r0, #0
   15d48:	d11d      	bne.n	15d86 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x20e>
   15d4a:	e03f      	b.n	15dcc <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x254>
   15d4c:	2001      	movs	r0, #1
   15d4e:	f88d 03d2 	strb.w	r0, [sp, #978]	; 0x3d2
   15d52:	e00b      	b.n	15d6c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1f4>
   15d54:	2000      	movs	r0, #0
   15d56:	f88d 03d2 	strb.w	r0, [sp, #978]	; 0x3d2
   15d5a:	e007      	b.n	15d6c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1f4>
   15d5c:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15d5e:	f8b0 1160 	ldrh.w	r1, [r0, #352]	; 0x160
   15d62:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   15d64:	b293      	uxth	r3, r2
   15d66:	428b      	cmp	r3, r1
   15d68:	d0f0      	beq.n	15d4c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1d4>
   15d6a:	e7f3      	b.n	15d54 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1dc>
   15d6c:	f89d 03d2 	ldrb.w	r0, [sp, #978]	; 0x3d2
   15d70:	07c0      	lsls	r0, r0, #31
   15d72:	2800      	cmp	r0, #0
   15d74:	d1dc      	bne.n	15d30 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b8>
   15d76:	e7d7      	b.n	15d28 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b0>
   15d78:	9813      	ldr	r0, [sp, #76]	; 0x4c
   15d7a:	b281      	uxth	r1, r0
   15d7c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   15d7e:	b293      	uxth	r3, r2
   15d80:	428b      	cmp	r3, r1
   15d82:	d0eb      	beq.n	15d5c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1e4>
   15d84:	e7e6      	b.n	15d54 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1dc>
                        if self.colors.extend_from_slice(&colors).is_ok() {
   15d86:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15d88:	f100 0194 	add.w	r1, r0, #148	; 0x94
   15d8c:	a8da      	add	r0, sp, #872	; 0x368
   15d8e:	910e      	str	r1, [sp, #56]	; 0x38
   15d90:	f7fe fe57 	bl	14a42 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   15d94:	900d      	str	r0, [sp, #52]	; 0x34
   15d96:	910c      	str	r1, [sp, #48]	; 0x30
   15d98:	e7ff      	b.n	15d9a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x222>
   15d9a:	980e      	ldr	r0, [sp, #56]	; 0x38
   15d9c:	990d      	ldr	r1, [sp, #52]	; 0x34
   15d9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15da0:	f7fe fe98 	bl	14ad4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   15da4:	f88d 03d3 	strb.w	r0, [sp, #979]	; 0x3d3
   15da8:	e7ff      	b.n	15daa <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x232>
   15daa:	f20d 30d3 	addw	r0, sp, #979	; 0x3d3
   15dae:	f7ff fa18 	bl	151e2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E>
   15db2:	900b      	str	r0, [sp, #44]	; 0x2c
   15db4:	e7ff      	b.n	15db6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x23e>
   15db6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   15db8:	07c1      	lsls	r1, r0, #31
   15dba:	2900      	cmp	r1, #0
   15dbc:	d101      	bne.n	15dc2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x24a>
   15dbe:	e7ff      	b.n	15dc0 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x248>
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   15dc0:	e004      	b.n	15dcc <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x254>
                            self.y_bottom = y;
   15dc2:	981b      	ldr	r0, [sp, #108]	; 0x6c
   15dc4:	991f      	ldr	r1, [sp, #124]	; 0x7c
   15dc6:	f8a1 0166 	strh.w	r0, [r1, #358]	; 0x166
                            continue;    
   15dca:	e7a0      	b.n	15d0e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x196>
                        x_left: self.x_left,
   15dcc:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15dce:	f8b0 1160 	ldrh.w	r1, [r0, #352]	; 0x160
                        x_right: self.x_right,
   15dd2:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
                        y_top: self.y_top,
   15dd6:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
                        y_bottom: self.y_bottom,
   15dda:	f8b0 c166 	ldrh.w	ip, [r0, #358]	; 0x166
                        colors: self.colors.clone(),
   15dde:	f100 0e94 	add.w	lr, r0, #148	; 0x94
   15de2:	f50d 6095 	add.w	r0, sp, #1192	; 0x4a8
   15de6:	910a      	str	r1, [sp, #40]	; 0x28
   15de8:	4671      	mov	r1, lr
   15dea:	9209      	str	r2, [sp, #36]	; 0x24
   15dec:	9308      	str	r3, [sp, #32]
   15dee:	f8cd c01c 	str.w	ip, [sp, #28]
   15df2:	f7fe fdf6 	bl	149e2 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>
   15df6:	e7ff      	b.n	15df8 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x280>
                    let row = PixelBlock {
   15df8:	980a      	ldr	r0, [sp, #40]	; 0x28
   15dfa:	f8ad 04a0 	strh.w	r0, [sp, #1184]	; 0x4a0
   15dfe:	9909      	ldr	r1, [sp, #36]	; 0x24
   15e00:	f8ad 14a2 	strh.w	r1, [sp, #1186]	; 0x4a2
   15e04:	9a08      	ldr	r2, [sp, #32]
   15e06:	f8ad 24a4 	strh.w	r2, [sp, #1188]	; 0x4a4
   15e0a:	9b07      	ldr	r3, [sp, #28]
   15e0c:	f8ad 34a6 	strh.w	r3, [sp, #1190]	; 0x4a6
   15e10:	a8f5      	add	r0, sp, #980	; 0x3d4
   15e12:	f50d 6195 	add.w	r1, sp, #1192	; 0x4a8
   15e16:	22cc      	movs	r2, #204	; 0xcc
   15e18:	f008 f9a0 	bl	1e15c <__aeabi_memcpy>
                    self.x_left = x_left;
   15e1c:	981d      	ldr	r0, [sp, #116]	; 0x74
   15e1e:	991f      	ldr	r1, [sp, #124]	; 0x7c
   15e20:	f8a1 0160 	strh.w	r0, [r1, #352]	; 0x160
                    self.x_right = x_right;
   15e24:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   15e26:	f8a1 2162 	strh.w	r2, [r1, #354]	; 0x162
                    self.y_top = y;
   15e2a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   15e2c:	f8a1 3164 	strh.w	r3, [r1, #356]	; 0x164
                    self.y_bottom = y;
   15e30:	f8a1 3166 	strh.w	r3, [r1, #358]	; 0x166
                    self.colors.clear();
   15e34:	f101 0094 	add.w	r0, r1, #148	; 0x94
   15e38:	f7fe fe90 	bl	14b5c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   15e3c:	e7ff      	b.n	15e3e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2c6>
                    self.colors.extend_from_slice(&colors)
   15e3e:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15e40:	f100 0194 	add.w	r1, r0, #148	; 0x94
   15e44:	a8da      	add	r0, sp, #872	; 0x368
   15e46:	9106      	str	r1, [sp, #24]
   15e48:	f7fe fdfb 	bl	14a42 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   15e4c:	9005      	str	r0, [sp, #20]
   15e4e:	9104      	str	r1, [sp, #16]
   15e50:	e7ff      	b.n	15e52 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2da>
   15e52:	9806      	ldr	r0, [sp, #24]
   15e54:	9905      	ldr	r1, [sp, #20]
   15e56:	9a04      	ldr	r2, [sp, #16]
   15e58:	f7fe fe3c 	bl	14ad4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   15e5c:	9003      	str	r0, [sp, #12]
   15e5e:	e7ff      	b.n	15e60 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2e8>
   15e60:	9803      	ldr	r0, [sp, #12]
   15e62:	f000 0001 	and.w	r0, r0, #1
   15e66:	f241 0190 	movw	r1, #4240	; 0x1090
   15e6a:	f2c0 0102 	movt	r1, #2
   15e6e:	f241 133c 	movw	r3, #4412	; 0x113c
   15e72:	f2c0 0302 	movt	r3, #2
   15e76:	2205      	movs	r2, #5
   15e78:	f7ff f9f7 	bl	1526a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   15e7c:	e7ff      	b.n	15e7e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x306>
   15e7e:	f20d 5074 	addw	r0, sp, #1396	; 0x574
   15e82:	a9f5      	add	r1, sp, #980	; 0x3d4
   15e84:	22d4      	movs	r2, #212	; 0xd4
                    return Some(row);
   15e86:	9002      	str	r0, [sp, #8]
   15e88:	9201      	str	r2, [sp, #4]
   15e8a:	f008 f967 	bl	1e15c <__aeabi_memcpy>
   15e8e:	981e      	ldr	r0, [sp, #120]	; 0x78
   15e90:	3004      	adds	r0, #4
   15e92:	9902      	ldr	r1, [sp, #8]
   15e94:	9a01      	ldr	r2, [sp, #4]
   15e96:	f008 f961 	bl	1e15c <__aeabi_memcpy>
   15e9a:	2001      	movs	r0, #1
   15e9c:	991e      	ldr	r1, [sp, #120]	; 0x78
   15e9e:	6008      	str	r0, [r1, #0]
   15ea0:	a8da      	add	r0, sp, #872	; 0x368
            }
   15ea2:	f7f4 fc76 	bl	a792 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   15ea6:	e7ff      	b.n	15ea8 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x330>
                    return Some(row);
   15ea8:	e017      	b.n	15eda <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
   15eaa:	2000      	movs	r0, #0
        }
   15eac:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
    }
   15eb0:	f50d 6dcb 	add.w	sp, sp, #1624	; 0x658
   15eb4:	bd80      	pop	{r7, pc}
        }
   15eb6:	f89d 064b 	ldrb.w	r0, [sp, #1611]	; 0x64b
   15eba:	07c0      	lsls	r0, r0, #31
   15ebc:	2800      	cmp	r0, #0
   15ebe:	d0f4      	beq.n	15eaa <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   15ec0:	e7ff      	b.n	15ec2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x34a>
   15ec2:	2000      	movs	r0, #0
   15ec4:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
   15ec8:	a820      	add	r0, sp, #128	; 0x80
   15eca:	3004      	adds	r0, #4
   15ecc:	f7f4 fc61 	bl	a792 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   15ed0:	e7eb      	b.n	15eaa <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   15ed2:	a820      	add	r0, sp, #128	; 0x80
   15ed4:	f7f4 fc22 	bl	a71c <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>
   15ed8:	e7e7      	b.n	15eaa <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   15eda:	9820      	ldr	r0, [sp, #128]	; 0x80
   15edc:	2801      	cmp	r0, #1
   15ede:	d0ea      	beq.n	15eb6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x33e>
   15ee0:	e7f7      	b.n	15ed2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x35a>
   15ee2:	2000      	movs	r0, #0
   15ee4:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
                        continue;
   15ee8:	e651      	b.n	15b8e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x16>
   15eea:	a820      	add	r0, sp, #128	; 0x80
        }
   15eec:	f7f4 fc16 	bl	a71c <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>
   15ef0:	e7f7      	b.n	15ee2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x36a>
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   15ef2:	f241 00f0 	movw	r0, #4336	; 0x10f0
   15ef6:	f2c0 0002 	movt	r0, #2
   15efa:	f241 122c 	movw	r2, #4396	; 0x112c
   15efe:	f2c0 0202 	movt	r2, #2
   15f02:	211c      	movs	r1, #28
   15f04:	f001 fd56 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15f08:	defe      	udf	#254	; 0xfe

00015f0a <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>:
   15f0a:	b081      	sub	sp, #4
   15f0c:	9000      	str	r0, [sp, #0]
   15f0e:	8800      	ldrh	r0, [r0, #0]
   15f10:	b001      	add	sp, #4
   15f12:	4770      	bx	lr

00015f14 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE>:
   15f14:	b580      	push	{r7, lr}
   15f16:	b08c      	sub	sp, #48	; 0x30
   15f18:	9009      	str	r0, [sp, #36]	; 0x24
   15f1a:	910a      	str	r1, [sp, #40]	; 0x28
   15f1c:	920b      	str	r2, [sp, #44]	; 0x2c
   15f1e:	9006      	str	r0, [sp, #24]
   15f20:	4608      	mov	r0, r1
   15f22:	9105      	str	r1, [sp, #20]
   15f24:	4611      	mov	r1, r2
   15f26:	9204      	str	r2, [sp, #16]
   15f28:	f000 f89f 	bl	1606a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15f2c:	9003      	str	r0, [sp, #12]
   15f2e:	e7ff      	b.n	15f30 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE+0x1c>
   15f30:	9806      	ldr	r0, [sp, #24]
   15f32:	9007      	str	r0, [sp, #28]
   15f34:	9903      	ldr	r1, [sp, #12]
   15f36:	9108      	str	r1, [sp, #32]
   15f38:	9807      	ldr	r0, [sp, #28]
   15f3a:	9908      	ldr	r1, [sp, #32]
   15f3c:	9a05      	ldr	r2, [sp, #20]
   15f3e:	9b04      	ldr	r3, [sp, #16]
   15f40:	f000 f82d 	bl	15f9e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE>
   15f44:	9002      	str	r0, [sp, #8]
   15f46:	9101      	str	r1, [sp, #4]
   15f48:	e7ff      	b.n	15f4a <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE+0x36>
   15f4a:	9802      	ldr	r0, [sp, #8]
   15f4c:	9901      	ldr	r1, [sp, #4]
   15f4e:	b00c      	add	sp, #48	; 0x30
   15f50:	bd80      	pop	{r7, pc}

00015f52 <_ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E>:
   15f52:	b083      	sub	sp, #12
   15f54:	9001      	str	r0, [sp, #4]
   15f56:	9102      	str	r1, [sp, #8]
   15f58:	b003      	add	sp, #12
   15f5a:	4770      	bx	lr

00015f5c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E>:
   15f5c:	b580      	push	{r7, lr}
   15f5e:	b08a      	sub	sp, #40	; 0x28
   15f60:	9006      	str	r0, [sp, #24]
   15f62:	9107      	str	r1, [sp, #28]
   15f64:	9208      	str	r2, [sp, #32]
   15f66:	9309      	str	r3, [sp, #36]	; 0x24
   15f68:	9005      	str	r0, [sp, #20]
   15f6a:	4610      	mov	r0, r2
   15f6c:	9104      	str	r1, [sp, #16]
   15f6e:	4619      	mov	r1, r3
   15f70:	f000 f864 	bl	1603c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>
   15f74:	9003      	str	r0, [sp, #12]
   15f76:	e7ff      	b.n	15f78 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x1c>
   15f78:	9803      	ldr	r0, [sp, #12]
   15f7a:	9905      	ldr	r1, [sp, #20]
   15f7c:	f000 f96e 	bl	1625c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   15f80:	9002      	str	r0, [sp, #8]
   15f82:	e7ff      	b.n	15f84 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x28>
   15f84:	9804      	ldr	r0, [sp, #16]
   15f86:	9905      	ldr	r1, [sp, #20]
   15f88:	1a41      	subs	r1, r0, r1
   15f8a:	9802      	ldr	r0, [sp, #8]
   15f8c:	f000 f849 	bl	16022 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   15f90:	9001      	str	r0, [sp, #4]
   15f92:	9100      	str	r1, [sp, #0]
   15f94:	e7ff      	b.n	15f96 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x3a>
   15f96:	9801      	ldr	r0, [sp, #4]
   15f98:	9900      	ldr	r1, [sp, #0]
   15f9a:	b00a      	add	sp, #40	; 0x28
   15f9c:	bd80      	pop	{r7, pc}

00015f9e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE>:
   15f9e:	b580      	push	{r7, lr}
   15fa0:	b08c      	sub	sp, #48	; 0x30
   15fa2:	9008      	str	r0, [sp, #32]
   15fa4:	9109      	str	r1, [sp, #36]	; 0x24
   15fa6:	920a      	str	r2, [sp, #40]	; 0x28
   15fa8:	930b      	str	r3, [sp, #44]	; 0x2c
   15faa:	4288      	cmp	r0, r1
   15fac:	9307      	str	r3, [sp, #28]
   15fae:	9206      	str	r2, [sp, #24]
   15fb0:	9105      	str	r1, [sp, #20]
   15fb2:	9004      	str	r0, [sp, #16]
   15fb4:	d806      	bhi.n	15fc4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x26>
   15fb6:	e7ff      	b.n	15fb8 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x1a>
   15fb8:	9806      	ldr	r0, [sp, #24]
   15fba:	9907      	ldr	r1, [sp, #28]
   15fbc:	f000 f855 	bl	1606a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15fc0:	9003      	str	r0, [sp, #12]
   15fc2:	e004      	b.n	15fce <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x30>
   15fc4:	9804      	ldr	r0, [sp, #16]
   15fc6:	9905      	ldr	r1, [sp, #20]
   15fc8:	f002 fc69 	bl	1889e <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   15fcc:	defe      	udf	#254	; 0xfe
   15fce:	9805      	ldr	r0, [sp, #20]
   15fd0:	9903      	ldr	r1, [sp, #12]
   15fd2:	4288      	cmp	r0, r1
   15fd4:	d809      	bhi.n	15fea <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x4c>
   15fd6:	e7ff      	b.n	15fd8 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x3a>
   15fd8:	9804      	ldr	r0, [sp, #16]
   15fda:	9905      	ldr	r1, [sp, #20]
   15fdc:	9a06      	ldr	r2, [sp, #24]
   15fde:	9b07      	ldr	r3, [sp, #28]
   15fe0:	f7ff ffbc 	bl	15f5c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E>
   15fe4:	9002      	str	r0, [sp, #8]
   15fe6:	9101      	str	r1, [sp, #4]
   15fe8:	e00a      	b.n	16000 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x62>
   15fea:	9806      	ldr	r0, [sp, #24]
   15fec:	9907      	ldr	r1, [sp, #28]
   15fee:	f000 f83c 	bl	1606a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15ff2:	9000      	str	r0, [sp, #0]
   15ff4:	e7ff      	b.n	15ff6 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x58>
   15ff6:	9805      	ldr	r0, [sp, #20]
   15ff8:	9900      	ldr	r1, [sp, #0]
   15ffa:	f002 fc2e 	bl	1885a <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   15ffe:	defe      	udf	#254	; 0xfe
   16000:	9802      	ldr	r0, [sp, #8]
   16002:	9901      	ldr	r1, [sp, #4]
   16004:	b00c      	add	sp, #48	; 0x30
   16006:	bd80      	pop	{r7, pc}

00016008 <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>:
   16008:	b580      	push	{r7, lr}
   1600a:	b084      	sub	sp, #16
   1600c:	9002      	str	r0, [sp, #8]
   1600e:	9103      	str	r1, [sp, #12]
   16010:	f001 fa5e 	bl	174d0 <_ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E>
   16014:	9001      	str	r0, [sp, #4]
   16016:	9100      	str	r1, [sp, #0]
   16018:	e7ff      	b.n	1601a <_ZN4core5slice14from_raw_parts17h1425df913744b73aE+0x12>
   1601a:	9801      	ldr	r0, [sp, #4]
   1601c:	9900      	ldr	r1, [sp, #0]
   1601e:	b004      	add	sp, #16
   16020:	bd80      	pop	{r7, pc}

00016022 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>:
   16022:	b580      	push	{r7, lr}
   16024:	b084      	sub	sp, #16
   16026:	9002      	str	r0, [sp, #8]
   16028:	9103      	str	r1, [sp, #12]
   1602a:	f001 fa5e 	bl	174ea <_ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE>
   1602e:	9001      	str	r0, [sp, #4]
   16030:	9100      	str	r1, [sp, #0]
   16032:	e7ff      	b.n	16034 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E+0x12>
   16034:	9801      	ldr	r0, [sp, #4]
   16036:	9900      	ldr	r1, [sp, #0]
   16038:	b004      	add	sp, #16
   1603a:	bd80      	pop	{r7, pc}

0001603c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>:
   1603c:	b082      	sub	sp, #8
   1603e:	9000      	str	r0, [sp, #0]
   16040:	9101      	str	r1, [sp, #4]
   16042:	b002      	add	sp, #8
   16044:	4770      	bx	lr

00016046 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>:
   16046:	b580      	push	{r7, lr}
   16048:	b086      	sub	sp, #24
   1604a:	9003      	str	r0, [sp, #12]
   1604c:	9104      	str	r1, [sp, #16]
   1604e:	9205      	str	r2, [sp, #20]
   16050:	9002      	str	r0, [sp, #8]
   16052:	4610      	mov	r0, r2
   16054:	9a02      	ldr	r2, [sp, #8]
   16056:	9101      	str	r1, [sp, #4]
   16058:	4611      	mov	r1, r2
   1605a:	9a01      	ldr	r2, [sp, #4]
   1605c:	f000 f886 	bl	1616c <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E>
   16060:	9000      	str	r0, [sp, #0]
   16062:	e7ff      	b.n	16064 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE+0x1e>
   16064:	9800      	ldr	r0, [sp, #0]
   16066:	b006      	add	sp, #24
   16068:	bd80      	pop	{r7, pc}

0001606a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>:
   1606a:	b084      	sub	sp, #16
   1606c:	9002      	str	r0, [sp, #8]
   1606e:	9103      	str	r1, [sp, #12]
   16070:	9000      	str	r0, [sp, #0]
   16072:	9101      	str	r1, [sp, #4]
   16074:	9801      	ldr	r0, [sp, #4]
   16076:	b004      	add	sp, #16
   16078:	4770      	bx	lr

0001607a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE>:
   1607a:	b580      	push	{r7, lr}
   1607c:	b092      	sub	sp, #72	; 0x48
   1607e:	900e      	str	r0, [sp, #56]	; 0x38
   16080:	910f      	str	r1, [sp, #60]	; 0x3c
   16082:	9009      	str	r0, [sp, #36]	; 0x24
   16084:	9108      	str	r1, [sp, #32]
   16086:	f000 f83e 	bl	16106 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E>
   1608a:	4601      	mov	r1, r0
   1608c:	9010      	str	r0, [sp, #64]	; 0x40
   1608e:	9107      	str	r1, [sp, #28]
   16090:	e7ff      	b.n	16092 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x18>
   16092:	9807      	ldr	r0, [sp, #28]
   16094:	f001 f9d4 	bl	17440 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>
   16098:	e7ff      	b.n	1609a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x20>
   1609a:	e7ff      	b.n	1609c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x22>
   1609c:	2002      	movs	r0, #2
   1609e:	9011      	str	r0, [sp, #68]	; 0x44
   160a0:	9811      	ldr	r0, [sp, #68]	; 0x44
   160a2:	9006      	str	r0, [sp, #24]
   160a4:	e7ff      	b.n	160a6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x2c>
   160a6:	9806      	ldr	r0, [sp, #24]
   160a8:	2800      	cmp	r0, #0
   160aa:	d006      	beq.n	160ba <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x40>
   160ac:	e7ff      	b.n	160ae <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x34>
   160ae:	9809      	ldr	r0, [sp, #36]	; 0x24
   160b0:	9908      	ldr	r1, [sp, #32]
   160b2:	f7ff ffda 	bl	1606a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   160b6:	9005      	str	r0, [sp, #20]
   160b8:	e011      	b.n	160de <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x64>
   160ba:	9807      	ldr	r0, [sp, #28]
   160bc:	9909      	ldr	r1, [sp, #36]	; 0x24
   160be:	9004      	str	r0, [sp, #16]
   160c0:	4608      	mov	r0, r1
   160c2:	9908      	ldr	r1, [sp, #32]
   160c4:	f7ff ffd1 	bl	1606a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   160c8:	9003      	str	r0, [sp, #12]
   160ca:	e7ff      	b.n	160cc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x52>
   160cc:	9804      	ldr	r0, [sp, #16]
   160ce:	9903      	ldr	r1, [sp, #12]
   160d0:	f7fe faa4 	bl	1461c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE>
   160d4:	9002      	str	r0, [sp, #8]
   160d6:	e7ff      	b.n	160d8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x5e>
   160d8:	9802      	ldr	r0, [sp, #8]
   160da:	900c      	str	r0, [sp, #48]	; 0x30
   160dc:	e006      	b.n	160ec <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x72>
   160de:	9807      	ldr	r0, [sp, #28]
   160e0:	9905      	ldr	r1, [sp, #20]
   160e2:	f001 f98c 	bl	173fe <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>
   160e6:	900c      	str	r0, [sp, #48]	; 0x30
   160e8:	e7ff      	b.n	160ea <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x70>
   160ea:	e7ff      	b.n	160ec <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x72>
   160ec:	9807      	ldr	r0, [sp, #28]
   160ee:	f000 fc93 	bl	16a18 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>
   160f2:	9001      	str	r0, [sp, #4]
   160f4:	e7ff      	b.n	160f6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x7c>
   160f6:	980c      	ldr	r0, [sp, #48]	; 0x30
   160f8:	9901      	ldr	r1, [sp, #4]
   160fa:	910a      	str	r1, [sp, #40]	; 0x28
   160fc:	900b      	str	r0, [sp, #44]	; 0x2c
   160fe:	980a      	ldr	r0, [sp, #40]	; 0x28
   16100:	990b      	ldr	r1, [sp, #44]	; 0x2c
   16102:	b012      	add	sp, #72	; 0x48
   16104:	bd80      	pop	{r7, pc}

00016106 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E>:
   16106:	b082      	sub	sp, #8
   16108:	9000      	str	r0, [sp, #0]
   1610a:	9101      	str	r1, [sp, #4]
   1610c:	b002      	add	sp, #8
   1610e:	4770      	bx	lr

00016110 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>:
   16110:	b580      	push	{r7, lr}
   16112:	b086      	sub	sp, #24
   16114:	9003      	str	r0, [sp, #12]
   16116:	9104      	str	r1, [sp, #16]
   16118:	f7ff ff1b 	bl	15f52 <_ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E>
   1611c:	9002      	str	r0, [sp, #8]
   1611e:	9101      	str	r1, [sp, #4]
   16120:	e7ff      	b.n	16122 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E+0x12>
   16122:	9802      	ldr	r0, [sp, #8]
   16124:	9901      	ldr	r1, [sp, #4]
   16126:	b006      	add	sp, #24
   16128:	bd80      	pop	{r7, pc}

0001612a <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E>:
   1612a:	b580      	push	{r7, lr}
   1612c:	b088      	sub	sp, #32
   1612e:	9005      	str	r0, [sp, #20]
   16130:	9106      	str	r1, [sp, #24]
   16132:	9207      	str	r2, [sp, #28]
   16134:	9004      	str	r0, [sp, #16]
   16136:	4610      	mov	r0, r2
   16138:	9a04      	ldr	r2, [sp, #16]
   1613a:	9103      	str	r1, [sp, #12]
   1613c:	4611      	mov	r1, r2
   1613e:	9a03      	ldr	r2, [sp, #12]
   16140:	f7ff fee8 	bl	15f14 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE>
   16144:	9002      	str	r0, [sp, #8]
   16146:	9101      	str	r1, [sp, #4]
   16148:	e7ff      	b.n	1614a <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E+0x20>
   1614a:	9802      	ldr	r0, [sp, #8]
   1614c:	9901      	ldr	r1, [sp, #4]
   1614e:	b008      	add	sp, #32
   16150:	bd80      	pop	{r7, pc}

00016152 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>:
   16152:	b580      	push	{r7, lr}
   16154:	b084      	sub	sp, #16
   16156:	9002      	str	r0, [sp, #8]
   16158:	9103      	str	r1, [sp, #12]
   1615a:	f7ff ff8e 	bl	1607a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE>
   1615e:	9001      	str	r0, [sp, #4]
   16160:	9100      	str	r1, [sp, #0]
   16162:	e7ff      	b.n	16164 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE+0x12>
   16164:	9801      	ldr	r0, [sp, #4]
   16166:	9900      	ldr	r1, [sp, #0]
   16168:	b004      	add	sp, #16
   1616a:	bd80      	pop	{r7, pc}

0001616c <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E>:
   1616c:	b580      	push	{r7, lr}
   1616e:	b086      	sub	sp, #24
   16170:	9003      	str	r0, [sp, #12]
   16172:	9104      	str	r1, [sp, #16]
   16174:	9205      	str	r2, [sp, #20]
   16176:	9002      	str	r0, [sp, #8]
   16178:	4608      	mov	r0, r1
   1617a:	4611      	mov	r1, r2
   1617c:	f7ff ff5e 	bl	1603c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>
   16180:	9001      	str	r0, [sp, #4]
   16182:	e7ff      	b.n	16184 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E+0x18>
   16184:	9801      	ldr	r0, [sp, #4]
   16186:	9902      	ldr	r1, [sp, #8]
   16188:	f000 f868 	bl	1625c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   1618c:	9000      	str	r0, [sp, #0]
   1618e:	e7ff      	b.n	16190 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E+0x24>
   16190:	9800      	ldr	r0, [sp, #0]
   16192:	b006      	add	sp, #24
   16194:	bd80      	pop	{r7, pc}

00016196 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>:
   16196:	b580      	push	{r7, lr}
   16198:	b08e      	sub	sp, #56	; 0x38
   1619a:	9007      	str	r0, [sp, #28]
   1619c:	6801      	ldr	r1, [r0, #0]
   1619e:	9005      	str	r0, [sp, #20]
   161a0:	4608      	mov	r0, r1
   161a2:	f000 fc3f 	bl	16a24 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   161a6:	9004      	str	r0, [sp, #16]
   161a8:	e7ff      	b.n	161aa <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x14>
   161aa:	9804      	ldr	r0, [sp, #16]
   161ac:	f000 f879 	bl	162a2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE>
   161b0:	e7ff      	b.n	161b2 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x1c>
   161b2:	e7ff      	b.n	161b4 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x1e>
   161b4:	2002      	movs	r0, #2
   161b6:	9008      	str	r0, [sp, #32]
   161b8:	9808      	ldr	r0, [sp, #32]
   161ba:	9003      	str	r0, [sp, #12]
   161bc:	e7ff      	b.n	161be <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x28>
   161be:	9803      	ldr	r0, [sp, #12]
   161c0:	2800      	cmp	r0, #0
   161c2:	d007      	beq.n	161d4 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3e>
   161c4:	e7ff      	b.n	161c6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x30>
   161c6:	9805      	ldr	r0, [sp, #20]
   161c8:	6840      	ldr	r0, [r0, #4]
   161ca:	f001 f939 	bl	17440 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>
   161ce:	e7ff      	b.n	161d0 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3a>
   161d0:	e7ff      	b.n	161d2 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3c>
   161d2:	e7ff      	b.n	161d4 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3e>
   161d4:	9805      	ldr	r0, [sp, #20]
   161d6:	6800      	ldr	r0, [r0, #0]
   161d8:	f000 fc24 	bl	16a24 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   161dc:	9002      	str	r0, [sp, #8]
   161de:	e7ff      	b.n	161e0 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x4a>
   161e0:	9805      	ldr	r0, [sp, #20]
   161e2:	6841      	ldr	r1, [r0, #4]
   161e4:	9a02      	ldr	r2, [sp, #8]
   161e6:	428a      	cmp	r2, r1
   161e8:	d02f      	beq.n	1624a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xb4>
   161ea:	e7ff      	b.n	161ec <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x56>
   161ec:	9805      	ldr	r0, [sp, #20]
   161ee:	900a      	str	r0, [sp, #40]	; 0x28
   161f0:	2101      	movs	r1, #1
   161f2:	910b      	str	r1, [sp, #44]	; 0x2c
   161f4:	2102      	movs	r1, #2
   161f6:	910d      	str	r1, [sp, #52]	; 0x34
   161f8:	990d      	ldr	r1, [sp, #52]	; 0x34
   161fa:	2900      	cmp	r1, #0
   161fc:	d015      	beq.n	1622a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x94>
   161fe:	e7ff      	b.n	16200 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x6a>
   16200:	9805      	ldr	r0, [sp, #20]
   16202:	6800      	ldr	r0, [r0, #0]
   16204:	f000 fc0e 	bl	16a24 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   16208:	900c      	str	r0, [sp, #48]	; 0x30
   1620a:	9905      	ldr	r1, [sp, #20]
   1620c:	680a      	ldr	r2, [r1, #0]
   1620e:	9001      	str	r0, [sp, #4]
   16210:	4610      	mov	r0, r2
   16212:	f000 fc07 	bl	16a24 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   16216:	2101      	movs	r1, #1
   16218:	f000 f837 	bl	1628a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>
   1621c:	f000 fbfc 	bl	16a18 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>
   16220:	9905      	ldr	r1, [sp, #20]
   16222:	6008      	str	r0, [r1, #0]
   16224:	9801      	ldr	r0, [sp, #4]
   16226:	9009      	str	r0, [sp, #36]	; 0x24
   16228:	e00c      	b.n	16244 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xae>
   1622a:	9805      	ldr	r0, [sp, #20]
   1622c:	6840      	ldr	r0, [r0, #4]
   1622e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16232:	f7fe f9fe 	bl	14632 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>
   16236:	9905      	ldr	r1, [sp, #20]
   16238:	6048      	str	r0, [r1, #4]
   1623a:	6808      	ldr	r0, [r1, #0]
   1623c:	f000 fbf2 	bl	16a24 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   16240:	9009      	str	r0, [sp, #36]	; 0x24
   16242:	e7ff      	b.n	16244 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xae>
   16244:	9809      	ldr	r0, [sp, #36]	; 0x24
   16246:	9000      	str	r0, [sp, #0]
   16248:	e002      	b.n	16250 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xba>
   1624a:	2000      	movs	r0, #0
   1624c:	9006      	str	r0, [sp, #24]
   1624e:	e002      	b.n	16256 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xc0>
   16250:	9800      	ldr	r0, [sp, #0]
   16252:	9006      	str	r0, [sp, #24]
   16254:	e7ff      	b.n	16256 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xc0>
   16256:	9806      	ldr	r0, [sp, #24]
   16258:	b00e      	add	sp, #56	; 0x38
   1625a:	bd80      	pop	{r7, pc}

0001625c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>:
   1625c:	b580      	push	{r7, lr}
   1625e:	b084      	sub	sp, #16
   16260:	9002      	str	r0, [sp, #8]
   16262:	9103      	str	r1, [sp, #12]
   16264:	f000 f811 	bl	1628a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>
   16268:	9001      	str	r0, [sp, #4]
   1626a:	e7ff      	b.n	1626c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E+0x10>
   1626c:	9801      	ldr	r0, [sp, #4]
   1626e:	b004      	add	sp, #16
   16270:	bd80      	pop	{r7, pc}

00016272 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>:
   16272:	b580      	push	{r7, lr}
   16274:	b084      	sub	sp, #16
   16276:	460a      	mov	r2, r1
   16278:	9002      	str	r0, [sp, #8]
   1627a:	f8ad 100e 	strh.w	r1, [sp, #14]
   1627e:	9201      	str	r2, [sp, #4]
   16280:	f001 f961 	bl	17546 <_ZN4core3ptr5write17h147d4643d861e927E>
   16284:	e7ff      	b.n	16286 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E+0x14>
   16286:	b004      	add	sp, #16
   16288:	bd80      	pop	{r7, pc}

0001628a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>:
   1628a:	b084      	sub	sp, #16
   1628c:	9001      	str	r0, [sp, #4]
   1628e:	9102      	str	r1, [sp, #8]
   16290:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   16294:	9003      	str	r0, [sp, #12]
   16296:	9803      	ldr	r0, [sp, #12]
   16298:	9000      	str	r0, [sp, #0]
   1629a:	e7ff      	b.n	1629c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE+0x12>
   1629c:	9800      	ldr	r0, [sp, #0]
   1629e:	b004      	add	sp, #16
   162a0:	4770      	bx	lr

000162a2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE>:
   162a2:	b082      	sub	sp, #8
   162a4:	9001      	str	r0, [sp, #4]
   162a6:	9000      	str	r0, [sp, #0]
   162a8:	e7ff      	b.n	162aa <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE+0x8>
   162aa:	9800      	ldr	r0, [sp, #0]
   162ac:	fab0 f180 	clz	r1, r0
   162b0:	0948      	lsrs	r0, r1, #5
   162b2:	b002      	add	sp, #8
   162b4:	4770      	bx	lr

000162b6 <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E>:
    C: PixelColor,
{
    type Item = Pixel<C>;
    type IntoIter = RectangleIterator<C>;

    fn into_iter(self) -> Self::IntoIter {
   162b6:	b580      	push	{r7, lr}
        (&self).into_iter()
   162b8:	f000 f814 	bl	162e4 <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE>
   162bc:	e7ff      	b.n	162be <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E+0x8>
    }
   162be:	bd80      	pop	{r7, pc}

000162c0 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>:
    fn fill(mut self, color: Option<C>) -> Self {
   162c0:	b5b0      	push	{r4, r5, r7, lr}
   162c2:	b081      	sub	sp, #4
   162c4:	469c      	mov	ip, r3
   162c6:	4696      	mov	lr, r2
   162c8:	f8ad 2000 	strh.w	r2, [sp]
   162cc:	f8ad 3002 	strh.w	r3, [sp, #2]
        self.style.fill_color = color;
   162d0:	820a      	strh	r2, [r1, #16]
   162d2:	824b      	strh	r3, [r1, #18]
        self
   162d4:	c91c      	ldmia	r1!, {r2, r3, r4}
   162d6:	c01c      	stmia	r0!, {r2, r3, r4}
   162d8:	e891 003c 	ldmia.w	r1, {r2, r3, r4, r5}
   162dc:	e880 003c 	stmia.w	r0, {r2, r3, r4, r5}
    }
   162e0:	b001      	add	sp, #4
   162e2:	bdb0      	pop	{r4, r5, r7, pc}

000162e4 <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE>:
    C: PixelColor,
{
    type Item = Pixel<C>;
    type IntoIter = RectangleIterator<C>;

    fn into_iter(self) -> Self::IntoIter {
   162e4:	b570      	push	{r4, r5, r6, lr}
   162e6:	b08e      	sub	sp, #56	; 0x38
   162e8:	910d      	str	r1, [sp, #52]	; 0x34
        RectangleIterator {
            top_left: self.top_left,
   162ea:	680a      	ldr	r2, [r1, #0]
   162ec:	684b      	ldr	r3, [r1, #4]
            bottom_right: self.bottom_right,
   162ee:	f8d1 c008 	ldr.w	ip, [r1, #8]
   162f2:	f8d1 e00c 	ldr.w	lr, [r1, #12]
            style: self.style,
   162f6:	8b0c      	ldrh	r4, [r1, #24]
   162f8:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
   162fc:	690c      	ldr	r4, [r1, #16]
   162fe:	694d      	ldr	r5, [r1, #20]
   16300:	950b      	str	r5, [sp, #44]	; 0x2c
   16302:	940a      	str	r4, [sp, #40]	; 0x28
   16304:	2400      	movs	r4, #0
            x: self.top_left[0],
   16306:	9009      	str	r0, [sp, #36]	; 0x24
   16308:	4608      	mov	r0, r1
   1630a:	9108      	str	r1, [sp, #32]
   1630c:	4621      	mov	r1, r4
   1630e:	9207      	str	r2, [sp, #28]
   16310:	9306      	str	r3, [sp, #24]
   16312:	f8cd c014 	str.w	ip, [sp, #20]
   16316:	f8cd e010 	str.w	lr, [sp, #16]
   1631a:	f7fb fb3c 	bl	11996 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   1631e:	9003      	str	r0, [sp, #12]
   16320:	e7ff      	b.n	16322 <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE+0x3e>
   16322:	9803      	ldr	r0, [sp, #12]
   16324:	6801      	ldr	r1, [r0, #0]
   16326:	2201      	movs	r2, #1
            y: self.top_left[1],
   16328:	9808      	ldr	r0, [sp, #32]
   1632a:	9102      	str	r1, [sp, #8]
   1632c:	4611      	mov	r1, r2
   1632e:	f7fb fb32 	bl	11996 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16332:	9001      	str	r0, [sp, #4]
   16334:	e7ff      	b.n	16336 <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE+0x52>
   16336:	9801      	ldr	r0, [sp, #4]
   16338:	6801      	ldr	r1, [r0, #0]
        RectangleIterator {
   1633a:	9a07      	ldr	r2, [sp, #28]
   1633c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1633e:	601a      	str	r2, [r3, #0]
   16340:	f8dd c018 	ldr.w	ip, [sp, #24]
   16344:	f8c3 c004 	str.w	ip, [r3, #4]
   16348:	f8dd e014 	ldr.w	lr, [sp, #20]
   1634c:	f8c3 e008 	str.w	lr, [r3, #8]
   16350:	9c04      	ldr	r4, [sp, #16]
   16352:	60dc      	str	r4, [r3, #12]
   16354:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   16358:	841d      	strh	r5, [r3, #32]
   1635a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1635c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1635e:	61de      	str	r6, [r3, #28]
   16360:	619d      	str	r5, [r3, #24]
   16362:	9d02      	ldr	r5, [sp, #8]
   16364:	611d      	str	r5, [r3, #16]
   16366:	6159      	str	r1, [r3, #20]
        }
    }
   16368:	b00e      	add	sp, #56	; 0x38
   1636a:	bd70      	pop	{r4, r5, r6, pc}

0001636c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE>:
where
    C: PixelColor,
{
    type Item = Pixel<C>;

    fn next(&mut self) -> Option<Self::Item> {
   1636c:	b510      	push	{r4, lr}
   1636e:	b0d2      	sub	sp, #328	; 0x148
   16370:	914f      	str	r1, [sp, #316]	; 0x13c
   16372:	2200      	movs	r2, #0
        // If entire object is off the top left of the screen or has no border or fill colour,
        // don't render anything
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   16374:	902a      	str	r0, [sp, #168]	; 0xa8
   16376:	4608      	mov	r0, r1
   16378:	9129      	str	r1, [sp, #164]	; 0xa4
   1637a:	4611      	mov	r1, r2
   1637c:	f7fb fb0b 	bl	11996 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16380:	9028      	str	r0, [sp, #160]	; 0xa0
   16382:	e03c      	b.n	163fe <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x92>
   16384:	2001      	movs	r0, #1
   16386:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
   1638a:	e009      	b.n	163a0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34>
   1638c:	2000      	movs	r0, #0
   1638e:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
   16392:	e005      	b.n	163a0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   16394:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16396:	301c      	adds	r0, #28
   16398:	f7fe fa86 	bl	148a8 <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>
   1639c:	9027      	str	r0, [sp, #156]	; 0x9c
   1639e:	e06c      	b.n	1647a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x10e>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   163a0:	f89d 00af 	ldrb.w	r0, [sp, #175]	; 0xaf
   163a4:	07c0      	lsls	r0, r0, #31
   163a6:	2800      	cmp	r0, #0
   163a8:	d172      	bne.n	16490 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x124>
   163aa:	e070      	b.n	1648e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x122>
   163ac:	2001      	movs	r0, #1
   163ae:	f88d 00b0 	strb.w	r0, [sp, #176]	; 0xb0
   163b2:	e00a      	b.n	163ca <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5e>
   163b4:	2000      	movs	r0, #0
   163b6:	f88d 00b0 	strb.w	r0, [sp, #176]	; 0xb0
   163ba:	e006      	b.n	163ca <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5e>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   163bc:	9829      	ldr	r0, [sp, #164]	; 0xa4
   163be:	3008      	adds	r0, #8
   163c0:	2100      	movs	r1, #0
   163c2:	f7fb fae8 	bl	11996 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   163c6:	9026      	str	r0, [sp, #152]	; 0x98
   163c8:	e038      	b.n	1643c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xd0>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   163ca:	f89d 00b0 	ldrb.w	r0, [sp, #176]	; 0xb0
   163ce:	07c0      	lsls	r0, r0, #31
   163d0:	2800      	cmp	r0, #0
   163d2:	d1d7      	bne.n	16384 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x18>
   163d4:	e7de      	b.n	16394 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x28>
   163d6:	2001      	movs	r0, #1
   163d8:	f88d 00b1 	strb.w	r0, [sp, #177]	; 0xb1
   163dc:	e009      	b.n	163f2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x86>
   163de:	2000      	movs	r0, #0
   163e0:	f88d 00b1 	strb.w	r0, [sp, #177]	; 0xb1
   163e4:	e005      	b.n	163f2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x86>
   163e6:	2101      	movs	r1, #1
   163e8:	9829      	ldr	r0, [sp, #164]	; 0xa4
   163ea:	f7fb fad4 	bl	11996 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   163ee:	9025      	str	r0, [sp, #148]	; 0x94
   163f0:	e00a      	b.n	16408 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x9c>
   163f2:	f89d 00b1 	ldrb.w	r0, [sp, #177]	; 0xb1
   163f6:	07c0      	lsls	r0, r0, #31
   163f8:	2800      	cmp	r0, #0
   163fa:	d1df      	bne.n	163bc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x50>
   163fc:	e7da      	b.n	163b4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48>
   163fe:	9828      	ldr	r0, [sp, #160]	; 0xa0
   16400:	6801      	ldr	r1, [r0, #0]
   16402:	2900      	cmp	r1, #0
   16404:	d4e7      	bmi.n	163d6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x6a>
   16406:	e7ee      	b.n	163e6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x7a>
   16408:	9825      	ldr	r0, [sp, #148]	; 0x94
   1640a:	6801      	ldr	r1, [r0, #0]
   1640c:	2900      	cmp	r1, #0
   1640e:	d4e2      	bmi.n	163d6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x6a>
   16410:	e7e5      	b.n	163de <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x72>
   16412:	2001      	movs	r0, #1
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   16414:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
   16418:	e00a      	b.n	16430 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xc4>
   1641a:	2000      	movs	r0, #0
   1641c:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
   16420:	e006      	b.n	16430 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xc4>
   16422:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16424:	3008      	adds	r0, #8
   16426:	2101      	movs	r1, #1
   16428:	f7fb fab5 	bl	11996 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   1642c:	9024      	str	r0, [sp, #144]	; 0x90
   1642e:	e00a      	b.n	16446 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xda>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   16430:	f89d 00b2 	ldrb.w	r0, [sp, #178]	; 0xb2
   16434:	07c0      	lsls	r0, r0, #31
   16436:	2800      	cmp	r0, #0
   16438:	d1b8      	bne.n	163ac <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x40>
   1643a:	e7bb      	b.n	163b4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   1643c:	9826      	ldr	r0, [sp, #152]	; 0x98
   1643e:	6801      	ldr	r1, [r0, #0]
   16440:	2900      	cmp	r1, #0
   16442:	d4e6      	bmi.n	16412 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xa6>
   16444:	e7ed      	b.n	16422 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xb6>
   16446:	9824      	ldr	r0, [sp, #144]	; 0x90
   16448:	6801      	ldr	r1, [r0, #0]
   1644a:	2900      	cmp	r1, #0
   1644c:	d4e1      	bmi.n	16412 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xa6>
   1644e:	e7e4      	b.n	1641a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xae>
   16450:	2001      	movs	r0, #1
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   16452:	f88d 00b3 	strb.w	r0, [sp, #179]	; 0xb3
   16456:	e009      	b.n	1646c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x100>
   16458:	2000      	movs	r0, #0
   1645a:	f88d 00b3 	strb.w	r0, [sp, #179]	; 0xb3
   1645e:	e005      	b.n	1646c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x100>
   16460:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16462:	3018      	adds	r0, #24
   16464:	f7fe fa20 	bl	148a8 <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>
   16468:	9023      	str	r0, [sp, #140]	; 0x8c
   1646a:	e00b      	b.n	16484 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x118>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   1646c:	f89d 00b3 	ldrb.w	r0, [sp, #179]	; 0xb3
   16470:	07c0      	lsls	r0, r0, #31
   16472:	2800      	cmp	r0, #0
   16474:	f47f af86 	bne.w	16384 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x18>
   16478:	e788      	b.n	1638c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x20>
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   1647a:	9827      	ldr	r0, [sp, #156]	; 0x9c
   1647c:	07c1      	lsls	r1, r0, #31
   1647e:	2900      	cmp	r1, #0
   16480:	d1ee      	bne.n	16460 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xf4>
   16482:	e7e9      	b.n	16458 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xec>
   16484:	9823      	ldr	r0, [sp, #140]	; 0x8c
   16486:	07c1      	lsls	r1, r0, #31
   16488:	2900      	cmp	r1, #0
   1648a:	d1e1      	bne.n	16450 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xe4>
   1648c:	e7e4      	b.n	16458 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xec>
        {
            return None;
        }

        let pixel = loop {
   1648e:	e012      	b.n	164b6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x14a>
   16490:	2000      	movs	r0, #0
            return None;
   16492:	992a      	ldr	r1, [sp, #168]	; 0xa8
   16494:	6008      	str	r0, [r1, #0]
   16496:	e7ff      	b.n	16498 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x12c>
                break out;
            }
        };

        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
    }
   16498:	b052      	add	sp, #328	; 0x148
   1649a:	bd10      	pop	{r4, pc}
        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
   1649c:	982d      	ldr	r0, [sp, #180]	; 0xb4
   1649e:	992e      	ldr	r1, [sp, #184]	; 0xb8
   164a0:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
   164a2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   164a4:	934d      	str	r3, [sp, #308]	; 0x134
   164a6:	924c      	str	r2, [sp, #304]	; 0x130
   164a8:	914b      	str	r1, [sp, #300]	; 0x12c
   164aa:	904a      	str	r0, [sp, #296]	; 0x128
   164ac:	a94a      	add	r1, sp, #296	; 0x128
   164ae:	982a      	ldr	r0, [sp, #168]	; 0xa8
   164b0:	f7fe f90c 	bl	146cc <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE>
   164b4:	e201      	b.n	168ba <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x54e>
   164b6:	2000      	movs	r0, #0
            let mut out = None;
   164b8:	9031      	str	r0, [sp, #196]	; 0xc4
            if self.y > self.bottom_right[1] {
   164ba:	9829      	ldr	r0, [sp, #164]	; 0xa4
   164bc:	6941      	ldr	r1, [r0, #20]
   164be:	3008      	adds	r0, #8
   164c0:	2201      	movs	r2, #1
   164c2:	9122      	str	r1, [sp, #136]	; 0x88
   164c4:	4611      	mov	r1, r2
   164c6:	f7fb fa66 	bl	11996 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   164ca:	9021      	str	r0, [sp, #132]	; 0x84
   164cc:	e7ff      	b.n	164ce <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x162>
   164ce:	9821      	ldr	r0, [sp, #132]	; 0x84
   164d0:	6801      	ldr	r1, [r0, #0]
   164d2:	9a22      	ldr	r2, [sp, #136]	; 0x88
   164d4:	428a      	cmp	r2, r1
   164d6:	dc13      	bgt.n	16500 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x194>
   164d8:	e7ff      	b.n	164da <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x16e>
            let border_width = self.style.stroke_width as i32;
   164da:	9829      	ldr	r0, [sp, #164]	; 0xa4
   164dc:	f890 1020 	ldrb.w	r1, [r0, #32]
   164e0:	460a      	mov	r2, r1
   164e2:	9150      	str	r1, [sp, #320]	; 0x140
            let tl = self.top_left;
   164e4:	6801      	ldr	r1, [r0, #0]
   164e6:	6843      	ldr	r3, [r0, #4]
   164e8:	9135      	str	r1, [sp, #212]	; 0xd4
   164ea:	9336      	str	r3, [sp, #216]	; 0xd8
            let br = self.bottom_right;
   164ec:	6881      	ldr	r1, [r0, #8]
   164ee:	68c3      	ldr	r3, [r0, #12]
   164f0:	9137      	str	r1, [sp, #220]	; 0xdc
   164f2:	9338      	str	r3, [sp, #224]	; 0xe0
            if self.x >= 0 && self.y >= 0 {
   164f4:	6901      	ldr	r1, [r0, #16]
   164f6:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   164fa:	9220      	str	r2, [sp, #128]	; 0x80
   164fc:	dc0b      	bgt.n	16516 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1aa>
   164fe:	e006      	b.n	1650e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1a2>
   16500:	2000      	movs	r0, #0
                break None;
   16502:	902d      	str	r0, [sp, #180]	; 0xb4
   16504:	e7ca      	b.n	1649c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x130>
   16506:	2001      	movs	r0, #1
            if self.x >= 0 && self.y >= 0 {
   16508:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
   1650c:	e009      	b.n	16522 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1b6>
   1650e:	2000      	movs	r0, #0
   16510:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
   16514:	e005      	b.n	16522 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1b6>
   16516:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16518:	6941      	ldr	r1, [r0, #20]
   1651a:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1651e:	dcf2      	bgt.n	16506 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x19a>
   16520:	e7f5      	b.n	1650e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1a2>
   16522:	f89d 00e7 	ldrb.w	r0, [sp, #231]	; 0xe7
   16526:	07c0      	lsls	r0, r0, #31
   16528:	2800      	cmp	r0, #0
   1652a:	f000 8182 	beq.w	16832 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c6>
   1652e:	e7ff      	b.n	16530 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1c4>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   16530:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16532:	6941      	ldr	r1, [r0, #20]
   16534:	a835      	add	r0, sp, #212	; 0xd4
   16536:	2201      	movs	r2, #1
   16538:	911f      	str	r1, [sp, #124]	; 0x7c
   1653a:	4611      	mov	r1, r2
   1653c:	f7fb fa2b 	bl	11996 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16540:	901e      	str	r0, [sp, #120]	; 0x78
   16542:	e074      	b.n	1662e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2c2>
   16544:	2001      	movs	r0, #1
                if (
   16546:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
   1654a:	e009      	b.n	16560 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1f4>
   1654c:	2000      	movs	r0, #0
   1654e:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
   16552:	e005      	b.n	16560 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1f4>
                ) && self.style.stroke_color.is_some()
   16554:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16556:	301c      	adds	r0, #28
   16558:	f7fe f9d6 	bl	14908 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>
   1655c:	901d      	str	r0, [sp, #116]	; 0x74
   1655e:	e104      	b.n	1676a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3fe>
                if (
   16560:	f89d 00e8 	ldrb.w	r0, [sp, #232]	; 0xe8
   16564:	07c0      	lsls	r0, r0, #31
   16566:	2800      	cmp	r0, #0
   16568:	f040 810a 	bne.w	16780 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x414>
   1656c:	e103      	b.n	16776 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x40a>
   1656e:	2001      	movs	r0, #1
   16570:	f88d 00e9 	strb.w	r0, [sp, #233]	; 0xe9
   16574:	e00d      	b.n	16592 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x226>
   16576:	2000      	movs	r0, #0
   16578:	f88d 00e9 	strb.w	r0, [sp, #233]	; 0xe9
   1657c:	e009      	b.n	16592 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x226>
                || (self.x <= br[0] && self.x > br[0] - border_width)
   1657e:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16580:	6901      	ldr	r1, [r0, #16]
   16582:	a837      	add	r0, sp, #220	; 0xdc
   16584:	2200      	movs	r2, #0
   16586:	911c      	str	r1, [sp, #112]	; 0x70
   16588:	4611      	mov	r1, r2
   1658a:	f7fb fa04 	bl	11996 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   1658e:	901b      	str	r0, [sp, #108]	; 0x6c
   16590:	e0d7      	b.n	16742 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3d6>
                if (
   16592:	f89d 00e9 	ldrb.w	r0, [sp, #233]	; 0xe9
   16596:	07c0      	lsls	r0, r0, #31
   16598:	2800      	cmp	r0, #0
   1659a:	d1db      	bne.n	16554 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e8>
   1659c:	e7d6      	b.n	1654c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e0>
   1659e:	2001      	movs	r0, #1
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   165a0:	f88d 00ea 	strb.w	r0, [sp, #234]	; 0xea
   165a4:	e00d      	b.n	165c2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x256>
   165a6:	2000      	movs	r0, #0
   165a8:	f88d 00ea 	strb.w	r0, [sp, #234]	; 0xea
   165ac:	e009      	b.n	165c2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x256>
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   165ae:	9829      	ldr	r0, [sp, #164]	; 0xa4
   165b0:	6901      	ldr	r1, [r0, #16]
   165b2:	a835      	add	r0, sp, #212	; 0xd4
   165b4:	2200      	movs	r2, #0
   165b6:	911a      	str	r1, [sp, #104]	; 0x68
   165b8:	4611      	mov	r1, r2
   165ba:	f7fb f9ec 	bl	11996 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   165be:	9019      	str	r0, [sp, #100]	; 0x64
   165c0:	e090      	b.n	166e4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x378>
                if (
   165c2:	f89d 00ea 	ldrb.w	r0, [sp, #234]	; 0xea
   165c6:	07c0      	lsls	r0, r0, #31
   165c8:	2800      	cmp	r0, #0
   165ca:	d1d0      	bne.n	1656e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x202>
   165cc:	e7d7      	b.n	1657e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x212>
   165ce:	2001      	movs	r0, #1
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   165d0:	f88d 00eb 	strb.w	r0, [sp, #235]	; 0xeb
   165d4:	e00d      	b.n	165f2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x286>
   165d6:	2000      	movs	r0, #0
   165d8:	f88d 00eb 	strb.w	r0, [sp, #235]	; 0xeb
   165dc:	e009      	b.n	165f2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x286>
                || (self.y <= br[1] && self.y > br[1] - border_width)
   165de:	9829      	ldr	r0, [sp, #164]	; 0xa4
   165e0:	6941      	ldr	r1, [r0, #20]
   165e2:	a837      	add	r0, sp, #220	; 0xdc
   165e4:	2201      	movs	r2, #1
   165e6:	9118      	str	r1, [sp, #96]	; 0x60
   165e8:	4611      	mov	r1, r2
   165ea:	f7fb f9d4 	bl	11996 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   165ee:	9017      	str	r0, [sp, #92]	; 0x5c
   165f0:	e04b      	b.n	1668a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x31e>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   165f2:	f89d 00eb 	ldrb.w	r0, [sp, #235]	; 0xeb
   165f6:	07c0      	lsls	r0, r0, #31
   165f8:	2800      	cmp	r0, #0
   165fa:	d1d0      	bne.n	1659e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x232>
   165fc:	e7d7      	b.n	165ae <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x242>
   165fe:	2001      	movs	r0, #1
   16600:	f88d 00ec 	strb.w	r0, [sp, #236]	; 0xec
   16604:	e00d      	b.n	16622 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2b6>
   16606:	2000      	movs	r0, #0
   16608:	f88d 00ec 	strb.w	r0, [sp, #236]	; 0xec
   1660c:	e009      	b.n	16622 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2b6>
   1660e:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16610:	6941      	ldr	r1, [r0, #20]
   16612:	a835      	add	r0, sp, #212	; 0xd4
   16614:	2201      	movs	r2, #1
   16616:	9116      	str	r1, [sp, #88]	; 0x58
   16618:	4611      	mov	r1, r2
   1661a:	f7fb f9bc 	bl	11996 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   1661e:	9015      	str	r0, [sp, #84]	; 0x54
   16620:	e00b      	b.n	1663a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2ce>
   16622:	f89d 00ec 	ldrb.w	r0, [sp, #236]	; 0xec
   16626:	07c0      	lsls	r0, r0, #31
   16628:	2800      	cmp	r0, #0
   1662a:	d1d0      	bne.n	165ce <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x262>
   1662c:	e7d7      	b.n	165de <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x272>
   1662e:	981e      	ldr	r0, [sp, #120]	; 0x78
   16630:	6801      	ldr	r1, [r0, #0]
   16632:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   16634:	428a      	cmp	r2, r1
   16636:	daea      	bge.n	1660e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2a2>
   16638:	e7e5      	b.n	16606 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x29a>
   1663a:	9815      	ldr	r0, [sp, #84]	; 0x54
   1663c:	6801      	ldr	r1, [r0, #0]
   1663e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   16640:	188b      	adds	r3, r1, r2
   16642:	469c      	mov	ip, r3
   16644:	428b      	cmp	r3, r1
   16646:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
   1664a:	f180 8137 	bvs.w	168bc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x550>
   1664e:	e7ff      	b.n	16650 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2e4>
   16650:	9816      	ldr	r0, [sp, #88]	; 0x58
   16652:	9914      	ldr	r1, [sp, #80]	; 0x50
   16654:	4288      	cmp	r0, r1
   16656:	dbd2      	blt.n	165fe <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x292>
   16658:	e7d5      	b.n	16606 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x29a>
   1665a:	2001      	movs	r0, #1
                || (self.y <= br[1] && self.y > br[1] - border_width)
   1665c:	f88d 00ed 	strb.w	r0, [sp, #237]	; 0xed
   16660:	e00d      	b.n	1667e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x312>
   16662:	2000      	movs	r0, #0
   16664:	f88d 00ed 	strb.w	r0, [sp, #237]	; 0xed
   16668:	e009      	b.n	1667e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x312>
   1666a:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1666c:	6941      	ldr	r1, [r0, #20]
   1666e:	a837      	add	r0, sp, #220	; 0xdc
   16670:	2201      	movs	r2, #1
   16672:	9113      	str	r1, [sp, #76]	; 0x4c
   16674:	4611      	mov	r1, r2
   16676:	f7fb f98e 	bl	11996 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   1667a:	9012      	str	r0, [sp, #72]	; 0x48
   1667c:	e00b      	b.n	16696 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x32a>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   1667e:	f89d 00ed 	ldrb.w	r0, [sp, #237]	; 0xed
   16682:	07c0      	lsls	r0, r0, #31
   16684:	2800      	cmp	r0, #0
   16686:	d1a2      	bne.n	165ce <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x262>
   16688:	e7a5      	b.n	165d6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x26a>
                || (self.y <= br[1] && self.y > br[1] - border_width)
   1668a:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1668c:	6801      	ldr	r1, [r0, #0]
   1668e:	9a18      	ldr	r2, [sp, #96]	; 0x60
   16690:	428a      	cmp	r2, r1
   16692:	ddea      	ble.n	1666a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2fe>
   16694:	e7e5      	b.n	16662 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2f6>
   16696:	9812      	ldr	r0, [sp, #72]	; 0x48
   16698:	6801      	ldr	r1, [r0, #0]
   1669a:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1669c:	1a8b      	subs	r3, r1, r2
   1669e:	4291      	cmp	r1, r2
   166a0:	9311      	str	r3, [sp, #68]	; 0x44
   166a2:	f180 8117 	bvs.w	168d4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x568>
   166a6:	e7ff      	b.n	166a8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x33c>
   166a8:	9813      	ldr	r0, [sp, #76]	; 0x4c
   166aa:	9911      	ldr	r1, [sp, #68]	; 0x44
   166ac:	4288      	cmp	r0, r1
   166ae:	dcd4      	bgt.n	1665a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2ee>
   166b0:	e7d7      	b.n	16662 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2f6>
   166b2:	2001      	movs	r0, #1
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   166b4:	f88d 00ee 	strb.w	r0, [sp, #238]	; 0xee
   166b8:	e00d      	b.n	166d6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x36a>
   166ba:	2000      	movs	r0, #0
   166bc:	f88d 00ee 	strb.w	r0, [sp, #238]	; 0xee
   166c0:	e009      	b.n	166d6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x36a>
   166c2:	9829      	ldr	r0, [sp, #164]	; 0xa4
   166c4:	6901      	ldr	r1, [r0, #16]
   166c6:	a835      	add	r0, sp, #212	; 0xd4
   166c8:	2200      	movs	r2, #0
   166ca:	9110      	str	r1, [sp, #64]	; 0x40
   166cc:	4611      	mov	r1, r2
   166ce:	f7fb f962 	bl	11996 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   166d2:	900f      	str	r0, [sp, #60]	; 0x3c
   166d4:	e00c      	b.n	166f0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x384>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   166d6:	f89d 00ee 	ldrb.w	r0, [sp, #238]	; 0xee
   166da:	07c0      	lsls	r0, r0, #31
   166dc:	2800      	cmp	r0, #0
   166de:	f47f af5e 	bne.w	1659e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x232>
   166e2:	e760      	b.n	165a6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x23a>
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   166e4:	9819      	ldr	r0, [sp, #100]	; 0x64
   166e6:	6801      	ldr	r1, [r0, #0]
   166e8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   166ea:	428a      	cmp	r2, r1
   166ec:	dae9      	bge.n	166c2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x356>
   166ee:	e7e4      	b.n	166ba <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34e>
   166f0:	980f      	ldr	r0, [sp, #60]	; 0x3c
   166f2:	6801      	ldr	r1, [r0, #0]
   166f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
   166f6:	188b      	adds	r3, r1, r2
   166f8:	469c      	mov	ip, r3
   166fa:	428b      	cmp	r3, r1
   166fc:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   16700:	f180 80f4 	bvs.w	168ec <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x580>
   16704:	e7ff      	b.n	16706 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x39a>
   16706:	9810      	ldr	r0, [sp, #64]	; 0x40
   16708:	990e      	ldr	r1, [sp, #56]	; 0x38
   1670a:	4288      	cmp	r0, r1
   1670c:	dbd1      	blt.n	166b2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x346>
   1670e:	e7d4      	b.n	166ba <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34e>
   16710:	2001      	movs	r0, #1
                || (self.x <= br[0] && self.x > br[0] - border_width)
   16712:	f88d 00ef 	strb.w	r0, [sp, #239]	; 0xef
   16716:	e00d      	b.n	16734 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3c8>
   16718:	2000      	movs	r0, #0
   1671a:	f88d 00ef 	strb.w	r0, [sp, #239]	; 0xef
   1671e:	e009      	b.n	16734 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3c8>
   16720:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16722:	6901      	ldr	r1, [r0, #16]
   16724:	a837      	add	r0, sp, #220	; 0xdc
   16726:	2200      	movs	r2, #0
   16728:	910d      	str	r1, [sp, #52]	; 0x34
   1672a:	4611      	mov	r1, r2
   1672c:	f7fb f933 	bl	11996 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16730:	900c      	str	r0, [sp, #48]	; 0x30
   16732:	e00c      	b.n	1674e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3e2>
                if (
   16734:	f89d 00ef 	ldrb.w	r0, [sp, #239]	; 0xef
   16738:	07c0      	lsls	r0, r0, #31
   1673a:	2800      	cmp	r0, #0
   1673c:	f47f af17 	bne.w	1656e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x202>
   16740:	e719      	b.n	16576 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x20a>
                || (self.x <= br[0] && self.x > br[0] - border_width)
   16742:	981b      	ldr	r0, [sp, #108]	; 0x6c
   16744:	6801      	ldr	r1, [r0, #0]
   16746:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   16748:	428a      	cmp	r2, r1
   1674a:	dde9      	ble.n	16720 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3b4>
   1674c:	e7e4      	b.n	16718 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3ac>
   1674e:	980c      	ldr	r0, [sp, #48]	; 0x30
   16750:	6801      	ldr	r1, [r0, #0]
   16752:	9a20      	ldr	r2, [sp, #128]	; 0x80
   16754:	1a8b      	subs	r3, r1, r2
   16756:	4291      	cmp	r1, r2
   16758:	930b      	str	r3, [sp, #44]	; 0x2c
   1675a:	f180 80d3 	bvs.w	16904 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x598>
   1675e:	e7ff      	b.n	16760 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3f4>
   16760:	980d      	ldr	r0, [sp, #52]	; 0x34
   16762:	990b      	ldr	r1, [sp, #44]	; 0x2c
   16764:	4288      	cmp	r0, r1
   16766:	dcd3      	bgt.n	16710 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3a4>
   16768:	e7d6      	b.n	16718 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3ac>
                if (
   1676a:	981d      	ldr	r0, [sp, #116]	; 0x74
   1676c:	07c1      	lsls	r1, r0, #31
   1676e:	2900      	cmp	r1, #0
   16770:	f47f aee8 	bne.w	16544 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1d8>
   16774:	e6ea      	b.n	1654c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e0>
                else if let Some(fill) = self.style.fill_color {
   16776:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16778:	8b01      	ldrh	r1, [r0, #24]
   1677a:	2901      	cmp	r1, #1
   1677c:	d03b      	beq.n	167f6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48a>
   1677e:	e057      	b.n	16830 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
                        self.x,
   16780:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16782:	6901      	ldr	r1, [r0, #16]
                        self.y,
   16784:	6942      	ldr	r2, [r0, #20]
                        self.style.stroke_color.expect("Expected stroke"),
   16786:	8bc3      	ldrh	r3, [r0, #30]
   16788:	8b80      	ldrh	r0, [r0, #28]
   1678a:	f241 2c54 	movw	ip, #4692	; 0x1254
   1678e:	f2c0 0c02 	movt	ip, #2
   16792:	46ee      	mov	lr, sp
   16794:	f8ce c000 	str.w	ip, [lr]
   16798:	f241 2c44 	movw	ip, #4676	; 0x1244
   1679c:	f2c0 0c02 	movt	ip, #2
   167a0:	f04f 0e0f 	mov.w	lr, #15
   167a4:	910a      	str	r1, [sp, #40]	; 0x28
   167a6:	4619      	mov	r1, r3
   167a8:	9209      	str	r2, [sp, #36]	; 0x24
   167aa:	4662      	mov	r2, ip
   167ac:	4673      	mov	r3, lr
   167ae:	f7fd ffff 	bl	147b0 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE>
   167b2:	9008      	str	r0, [sp, #32]
   167b4:	e7ff      	b.n	167b6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x44a>
                    out = Some((
   167b6:	980a      	ldr	r0, [sp, #40]	; 0x28
   167b8:	9040      	str	r0, [sp, #256]	; 0x100
   167ba:	9909      	ldr	r1, [sp, #36]	; 0x24
   167bc:	9141      	str	r1, [sp, #260]	; 0x104
   167be:	9a08      	ldr	r2, [sp, #32]
   167c0:	f8ad 2108 	strh.w	r2, [sp, #264]	; 0x108
   167c4:	9b40      	ldr	r3, [sp, #256]	; 0x100
   167c6:	f8dd c104 	ldr.w	ip, [sp, #260]	; 0x104
   167ca:	f8dd e108 	ldr.w	lr, [sp, #264]	; 0x108
   167ce:	f8cd e0fc 	str.w	lr, [sp, #252]	; 0xfc
   167d2:	f8cd c0f8 	str.w	ip, [sp, #248]	; 0xf8
   167d6:	933d      	str	r3, [sp, #244]	; 0xf4
   167d8:	2301      	movs	r3, #1
   167da:	933c      	str	r3, [sp, #240]	; 0xf0
   167dc:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
   167de:	f8dd c0f4 	ldr.w	ip, [sp, #244]	; 0xf4
   167e2:	f8dd e0f8 	ldr.w	lr, [sp, #248]	; 0xf8
   167e6:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
   167e8:	9434      	str	r4, [sp, #208]	; 0xd0
   167ea:	f8cd e0cc 	str.w	lr, [sp, #204]	; 0xcc
   167ee:	f8cd c0c8 	str.w	ip, [sp, #200]	; 0xc8
   167f2:	9331      	str	r3, [sp, #196]	; 0xc4
                if (
   167f4:	e01c      	b.n	16830 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
                else if let Some(fill) = self.style.fill_color {
   167f6:	9829      	ldr	r0, [sp, #164]	; 0xa4
   167f8:	8b41      	ldrh	r1, [r0, #26]
   167fa:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
                    out = Some((self.x, self.y, fill));
   167fe:	6902      	ldr	r2, [r0, #16]
   16800:	6943      	ldr	r3, [r0, #20]
   16802:	9247      	str	r2, [sp, #284]	; 0x11c
   16804:	9348      	str	r3, [sp, #288]	; 0x120
   16806:	f8ad 1124 	strh.w	r1, [sp, #292]	; 0x124
   1680a:	9947      	ldr	r1, [sp, #284]	; 0x11c
   1680c:	9a48      	ldr	r2, [sp, #288]	; 0x120
   1680e:	9b49      	ldr	r3, [sp, #292]	; 0x124
   16810:	9346      	str	r3, [sp, #280]	; 0x118
   16812:	9245      	str	r2, [sp, #276]	; 0x114
   16814:	9144      	str	r1, [sp, #272]	; 0x110
   16816:	2101      	movs	r1, #1
   16818:	9143      	str	r1, [sp, #268]	; 0x10c
   1681a:	9943      	ldr	r1, [sp, #268]	; 0x10c
   1681c:	9a44      	ldr	r2, [sp, #272]	; 0x110
   1681e:	9b45      	ldr	r3, [sp, #276]	; 0x114
   16820:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
   16824:	f8cd c0d0 	str.w	ip, [sp, #208]	; 0xd0
   16828:	9333      	str	r3, [sp, #204]	; 0xcc
   1682a:	9232      	str	r2, [sp, #200]	; 0xc8
   1682c:	9131      	str	r1, [sp, #196]	; 0xc4
                else if let Some(fill) = self.style.fill_color {
   1682e:	e7ff      	b.n	16830 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
            if self.x >= 0 && self.y >= 0 {
   16830:	e7ff      	b.n	16832 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c6>
            self.x += 1;
   16832:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16834:	6901      	ldr	r1, [r0, #16]
   16836:	1c4a      	adds	r2, r1, #1
   16838:	4613      	mov	r3, r2
   1683a:	428a      	cmp	r2, r1
   1683c:	9307      	str	r3, [sp, #28]
   1683e:	d66d      	bvs.n	1691c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5b0>
   16840:	e7ff      	b.n	16842 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4d6>
   16842:	9807      	ldr	r0, [sp, #28]
   16844:	9929      	ldr	r1, [sp, #164]	; 0xa4
   16846:	6108      	str	r0, [r1, #16]
            if self.x > self.bottom_right[0] {
   16848:	690a      	ldr	r2, [r1, #16]
   1684a:	f101 0008 	add.w	r0, r1, #8
   1684e:	2100      	movs	r1, #0
   16850:	9206      	str	r2, [sp, #24]
   16852:	f7fb f8a0 	bl	11996 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16856:	9005      	str	r0, [sp, #20]
   16858:	e7ff      	b.n	1685a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4ee>
   1685a:	9805      	ldr	r0, [sp, #20]
   1685c:	6801      	ldr	r1, [r0, #0]
   1685e:	9a06      	ldr	r2, [sp, #24]
   16860:	428a      	cmp	r2, r1
   16862:	dd16      	ble.n	16892 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x526>
   16864:	e7ff      	b.n	16866 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4fa>
   16866:	2100      	movs	r1, #0
                self.x = self.top_left[0];
   16868:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1686a:	f7fb f894 	bl	11996 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   1686e:	9004      	str	r0, [sp, #16]
   16870:	e7ff      	b.n	16872 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x506>
   16872:	9804      	ldr	r0, [sp, #16]
   16874:	6801      	ldr	r1, [r0, #0]
   16876:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   16878:	6111      	str	r1, [r2, #16]
                self.y += 1;
   1687a:	6951      	ldr	r1, [r2, #20]
   1687c:	1c4b      	adds	r3, r1, #1
   1687e:	469c      	mov	ip, r3
   16880:	428b      	cmp	r3, r1
   16882:	f8cd c00c 	str.w	ip, [sp, #12]
   16886:	d655      	bvs.n	16934 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5c8>
   16888:	e7ff      	b.n	1688a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x51e>
   1688a:	9803      	ldr	r0, [sp, #12]
   1688c:	9929      	ldr	r1, [sp, #164]	; 0xa4
   1688e:	6148      	str	r0, [r1, #20]
            if self.x > self.bottom_right[0] {
   16890:	e7ff      	b.n	16892 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x526>
   16892:	a831      	add	r0, sp, #196	; 0xc4
            if out.is_some() {
   16894:	f7fe f826 	bl	148e4 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E>
   16898:	9002      	str	r0, [sp, #8]
   1689a:	e7ff      	b.n	1689c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x530>
   1689c:	9802      	ldr	r0, [sp, #8]
   1689e:	07c1      	lsls	r1, r0, #31
   168a0:	2900      	cmp	r1, #0
   168a2:	d101      	bne.n	168a8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x53c>
   168a4:	e7ff      	b.n	168a6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x53a>
        let pixel = loop {
   168a6:	e606      	b.n	164b6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x14a>
                break out;
   168a8:	9831      	ldr	r0, [sp, #196]	; 0xc4
   168aa:	9932      	ldr	r1, [sp, #200]	; 0xc8
   168ac:	9a33      	ldr	r2, [sp, #204]	; 0xcc
   168ae:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   168b0:	9330      	str	r3, [sp, #192]	; 0xc0
   168b2:	922f      	str	r2, [sp, #188]	; 0xbc
   168b4:	912e      	str	r1, [sp, #184]	; 0xb8
   168b6:	902d      	str	r0, [sp, #180]	; 0xb4
   168b8:	e5f0      	b.n	1649c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x130>
    }
   168ba:	e5ed      	b.n	16498 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x12c>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   168bc:	f241 10d0 	movw	r0, #4560	; 0x11d0
   168c0:	f2c0 0002 	movt	r0, #2
   168c4:	f241 12bc 	movw	r2, #4540	; 0x11bc
   168c8:	f2c0 0202 	movt	r2, #2
   168cc:	211c      	movs	r1, #28
   168ce:	f001 f871 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   168d2:	defe      	udf	#254	; 0xfe
                || (self.y <= br[1] && self.y > br[1] - border_width)
   168d4:	f241 2000 	movw	r0, #4608	; 0x1200
   168d8:	f2c0 0002 	movt	r0, #2
   168dc:	f241 12ec 	movw	r2, #4588	; 0x11ec
   168e0:	f2c0 0202 	movt	r2, #2
   168e4:	2121      	movs	r1, #33	; 0x21
   168e6:	f001 f865 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   168ea:	defe      	udf	#254	; 0xfe
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   168ec:	f241 10d0 	movw	r0, #4560	; 0x11d0
   168f0:	f2c0 0002 	movt	r0, #2
   168f4:	f241 2224 	movw	r2, #4644	; 0x1224
   168f8:	f2c0 0202 	movt	r2, #2
   168fc:	211c      	movs	r1, #28
   168fe:	f001 f859 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16902:	defe      	udf	#254	; 0xfe
                || (self.x <= br[0] && self.x > br[0] - border_width)
   16904:	f241 2000 	movw	r0, #4608	; 0x1200
   16908:	f2c0 0002 	movt	r0, #2
   1690c:	f241 2234 	movw	r2, #4660	; 0x1234
   16910:	f2c0 0202 	movt	r2, #2
   16914:	2121      	movs	r1, #33	; 0x21
   16916:	f001 f84d 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1691a:	defe      	udf	#254	; 0xfe
            self.x += 1;
   1691c:	f241 10d0 	movw	r0, #4560	; 0x11d0
   16920:	f2c0 0002 	movt	r0, #2
   16924:	f241 2264 	movw	r2, #4708	; 0x1264
   16928:	f2c0 0202 	movt	r2, #2
   1692c:	211c      	movs	r1, #28
   1692e:	f001 f841 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16932:	defe      	udf	#254	; 0xfe
                self.y += 1;
   16934:	f241 10d0 	movw	r0, #4560	; 0x11d0
   16938:	f2c0 0002 	movt	r0, #2
   1693c:	f241 2274 	movw	r2, #4724	; 0x1274
   16940:	f2c0 0202 	movt	r2, #2
   16944:	211c      	movs	r1, #28
   16946:	f001 f835 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1694a:	defe      	udf	#254	; 0xfe

0001694c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E>:
        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
   1694c:	b580      	push	{r7, lr}
   1694e:	b08a      	sub	sp, #40	; 0x28
   16950:	680a      	ldr	r2, [r1, #0]
   16952:	9207      	str	r2, [sp, #28]
   16954:	684b      	ldr	r3, [r1, #4]
   16956:	9308      	str	r3, [sp, #32]
   16958:	8909      	ldrh	r1, [r1, #8]
   1695a:	468c      	mov	ip, r1
   1695c:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
   16960:	9005      	str	r0, [sp, #20]
   16962:	4610      	mov	r0, r2
   16964:	4619      	mov	r1, r3
   16966:	f8cd c010 	str.w	ip, [sp, #16]
   1696a:	f7fb f80b 	bl	11984 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
   1696e:	9003      	str	r0, [sp, #12]
   16970:	9102      	str	r1, [sp, #8]
   16972:	e7ff      	b.n	16974 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E+0x28>
   16974:	9803      	ldr	r0, [sp, #12]
   16976:	9902      	ldr	r1, [sp, #8]
   16978:	f7fb f856 	bl	11a28 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE>
   1697c:	9001      	str	r0, [sp, #4]
   1697e:	9100      	str	r1, [sp, #0]
   16980:	e7ff      	b.n	16982 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E+0x36>
   16982:	9801      	ldr	r0, [sp, #4]
   16984:	9905      	ldr	r1, [sp, #20]
   16986:	6008      	str	r0, [r1, #0]
   16988:	9a00      	ldr	r2, [sp, #0]
   1698a:	604a      	str	r2, [r1, #4]
   1698c:	9b04      	ldr	r3, [sp, #16]
   1698e:	810b      	strh	r3, [r1, #8]
   16990:	b00a      	add	sp, #40	; 0x28
   16992:	bd80      	pop	{r7, pc}

00016994 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>:
    pub fn new(top_left: Coord, bottom_right: Coord) -> Self {
   16994:	b510      	push	{r4, lr}
   16996:	b08c      	sub	sp, #48	; 0x30
   16998:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   1699c:	9108      	str	r1, [sp, #32]
   1699e:	9209      	str	r2, [sp, #36]	; 0x24
   169a0:	930a      	str	r3, [sp, #40]	; 0x28
   169a2:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   169a6:	f10d 0e14 	add.w	lr, sp, #20
            style: Style::default(),
   169aa:	9004      	str	r0, [sp, #16]
   169ac:	4670      	mov	r0, lr
   169ae:	9303      	str	r3, [sp, #12]
   169b0:	9202      	str	r2, [sp, #8]
   169b2:	9101      	str	r1, [sp, #4]
   169b4:	f8cd c000 	str.w	ip, [sp]
   169b8:	f000 f818 	bl	169ec <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>
   169bc:	e7ff      	b.n	169be <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E+0x2a>
        Rectangle {
   169be:	9801      	ldr	r0, [sp, #4]
   169c0:	9904      	ldr	r1, [sp, #16]
   169c2:	6008      	str	r0, [r1, #0]
   169c4:	9a02      	ldr	r2, [sp, #8]
   169c6:	604a      	str	r2, [r1, #4]
   169c8:	9b03      	ldr	r3, [sp, #12]
   169ca:	608b      	str	r3, [r1, #8]
   169cc:	f8dd c000 	ldr.w	ip, [sp]
   169d0:	f8c1 c00c 	str.w	ip, [r1, #12]
   169d4:	f8bd e01c 	ldrh.w	lr, [sp, #28]
   169d8:	f8a1 e018 	strh.w	lr, [r1, #24]
   169dc:	f8dd e014 	ldr.w	lr, [sp, #20]
   169e0:	9c06      	ldr	r4, [sp, #24]
   169e2:	614c      	str	r4, [r1, #20]
   169e4:	f8c1 e010 	str.w	lr, [r1, #16]
    }
   169e8:	b00c      	add	sp, #48	; 0x30
   169ea:	bd10      	pop	{r4, pc}

000169ec <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>:

impl<P> Default for Style<P>
where
    P: PixelColor,
{
    fn default() -> Self {
   169ec:	b082      	sub	sp, #8
   169ee:	2100      	movs	r1, #0
        Self {
            fill_color: None,
   169f0:	f8ad 1000 	strh.w	r1, [sp]
            stroke_color: None,
   169f4:	f8ad 1004 	strh.w	r1, [sp, #4]
        Self {
   169f8:	f8bd 1000 	ldrh.w	r1, [sp]
   169fc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   16a00:	8001      	strh	r1, [r0, #0]
   16a02:	8042      	strh	r2, [r0, #2]
   16a04:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   16a08:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16a0c:	8081      	strh	r1, [r0, #4]
   16a0e:	80c2      	strh	r2, [r0, #6]
   16a10:	2101      	movs	r1, #1
   16a12:	7201      	strb	r1, [r0, #8]
            stroke_width: 1,
        }
    }
   16a14:	b002      	add	sp, #8
   16a16:	4770      	bx	lr

00016a18 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>:
   16a18:	b082      	sub	sp, #8
   16a1a:	9001      	str	r0, [sp, #4]
   16a1c:	9000      	str	r0, [sp, #0]
   16a1e:	9800      	ldr	r0, [sp, #0]
   16a20:	b002      	add	sp, #8
   16a22:	4770      	bx	lr

00016a24 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>:
   16a24:	b081      	sub	sp, #4
   16a26:	9000      	str	r0, [sp, #0]
   16a28:	b001      	add	sp, #4
   16a2a:	4770      	bx	lr

00016a2c <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>:
#[derive(ToPrimitive)]
   16a2c:	b084      	sub	sp, #16
   16a2e:	460a      	mov	r2, r1
   16a30:	4603      	mov	r3, r0
   16a32:	9103      	str	r1, [sp, #12]
   16a34:	9002      	str	r0, [sp, #8]
   16a36:	b004      	add	sp, #16
   16a38:	4770      	bx	lr

00016a3a <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>:
   16a3a:	b510      	push	{r4, lr}
   16a3c:	b088      	sub	sp, #32
   16a3e:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   16a42:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
   16a46:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   16a48:	9102      	str	r1, [sp, #8]
   16a4a:	9203      	str	r2, [sp, #12]
   16a4c:	9304      	str	r3, [sp, #16]
   16a4e:	9405      	str	r4, [sp, #20]
   16a50:	f8cd e018 	str.w	lr, [sp, #24]
   16a54:	f8cd c01c 	str.w	ip, [sp, #28]
   16a58:	f8cd e000 	str.w	lr, [sp]
   16a5c:	f8cd c004 	str.w	ip, [sp, #4]
   16a60:	6001      	str	r1, [r0, #0]
   16a62:	6042      	str	r2, [r0, #4]
   16a64:	9900      	ldr	r1, [sp, #0]
   16a66:	9a01      	ldr	r2, [sp, #4]
   16a68:	6081      	str	r1, [r0, #8]
   16a6a:	60c2      	str	r2, [r0, #12]
   16a6c:	6103      	str	r3, [r0, #16]
   16a6e:	6144      	str	r4, [r0, #20]
   16a70:	b008      	add	sp, #32
   16a72:	bd10      	pop	{r4, pc}

00016a74 <_ZN4core3fmt9Arguments6new_v117hdc09c81c55dd3f27E>:
   16a74:	b580      	push	{r7, lr}
   16a76:	b086      	sub	sp, #24
   16a78:	f8dd c020 	ldr.w	ip, [sp, #32]
   16a7c:	9102      	str	r1, [sp, #8]
   16a7e:	9203      	str	r2, [sp, #12]
   16a80:	9304      	str	r3, [sp, #16]
   16a82:	f8cd c014 	str.w	ip, [sp, #20]
   16a86:	f04f 0e00 	mov.w	lr, #0
   16a8a:	f8cd e004 	str.w	lr, [sp, #4]
   16a8e:	f8cd e000 	str.w	lr, [sp]
   16a92:	f8cd e000 	str.w	lr, [sp]
   16a96:	6001      	str	r1, [r0, #0]
   16a98:	6042      	str	r2, [r0, #4]
   16a9a:	9900      	ldr	r1, [sp, #0]
   16a9c:	9a01      	ldr	r2, [sp, #4]
   16a9e:	6081      	str	r1, [r0, #8]
   16aa0:	60c2      	str	r2, [r0, #12]
   16aa2:	6103      	str	r3, [r0, #16]
   16aa4:	f8c0 c014 	str.w	ip, [r0, #20]
   16aa8:	b006      	add	sp, #24
   16aaa:	bd80      	pop	{r7, pc}

00016aac <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E>:
   16aac:	b580      	push	{r7, lr}
   16aae:	b086      	sub	sp, #24
   16ab0:	460a      	mov	r2, r1
   16ab2:	4603      	mov	r3, r0
   16ab4:	f88d 0014 	strb.w	r0, [sp, #20]
   16ab8:	f88d 1015 	strb.w	r1, [sp, #21]
   16abc:	9203      	str	r2, [sp, #12]
   16abe:	9302      	str	r3, [sp, #8]
   16ac0:	f000 f865 	bl	16b8e <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E>
   16ac4:	9001      	str	r0, [sp, #4]
   16ac6:	9100      	str	r1, [sp, #0]
   16ac8:	e7ff      	b.n	16aca <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x1e>
   16aca:	9801      	ldr	r0, [sp, #4]
   16acc:	f88d 0016 	strb.w	r0, [sp, #22]
   16ad0:	9900      	ldr	r1, [sp, #0]
   16ad2:	f001 0201 	and.w	r2, r1, #1
   16ad6:	f88d 2017 	strb.w	r2, [sp, #23]
   16ada:	2a00      	cmp	r2, #0
   16adc:	d107      	bne.n	16aee <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x42>
   16ade:	e7ff      	b.n	16ae0 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x34>
   16ae0:	9801      	ldr	r0, [sp, #4]
   16ae2:	f88d 0011 	strb.w	r0, [sp, #17]
   16ae6:	2101      	movs	r1, #1
   16ae8:	f88d 1010 	strb.w	r1, [sp, #16]
   16aec:	e003      	b.n	16af6 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x4a>
   16aee:	2000      	movs	r0, #0
   16af0:	f88d 0010 	strb.w	r0, [sp, #16]
   16af4:	e7ff      	b.n	16af6 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x4a>
   16af6:	f89d 0010 	ldrb.w	r0, [sp, #16]
   16afa:	f89d 1011 	ldrb.w	r1, [sp, #17]
   16afe:	b006      	add	sp, #24
   16b00:	bd80      	pop	{r7, pc}

00016b02 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE>:
   16b02:	b082      	sub	sp, #8
   16b04:	460a      	mov	r2, r1
   16b06:	4603      	mov	r3, r0
   16b08:	f88d 0005 	strb.w	r0, [sp, #5]
   16b0c:	f88d 1006 	strb.w	r1, [sp, #6]
   16b10:	4408      	add	r0, r1
   16b12:	f88d 0007 	strb.w	r0, [sp, #7]
   16b16:	f89d 0007 	ldrb.w	r0, [sp, #7]
   16b1a:	9000      	str	r0, [sp, #0]
   16b1c:	e7ff      	b.n	16b1e <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE+0x1c>
   16b1e:	9800      	ldr	r0, [sp, #0]
   16b20:	b002      	add	sp, #8
   16b22:	4770      	bx	lr

00016b24 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17hd4e34d1323470418E>:
   16b24:	b084      	sub	sp, #16
   16b26:	4602      	mov	r2, r0
   16b28:	f88d 0007 	strb.w	r0, [sp, #7]
   16b2c:	9102      	str	r1, [sp, #8]
   16b2e:	f001 0107 	and.w	r1, r1, #7
   16b32:	4088      	lsls	r0, r1
   16b34:	f88d 000f 	strb.w	r0, [sp, #15]
   16b38:	f89d 000f 	ldrb.w	r0, [sp, #15]
   16b3c:	9000      	str	r0, [sp, #0]
   16b3e:	e7ff      	b.n	16b40 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17hd4e34d1323470418E+0x1c>
   16b40:	9800      	ldr	r0, [sp, #0]
   16b42:	b004      	add	sp, #16
   16b44:	4770      	bx	lr

00016b46 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17h0b64f2ebc21519c0E>:
   16b46:	b084      	sub	sp, #16
   16b48:	b2c2      	uxtb	r2, r0
   16b4a:	4603      	mov	r3, r0
   16b4c:	f88d 0007 	strb.w	r0, [sp, #7]
   16b50:	9102      	str	r1, [sp, #8]
   16b52:	f001 0007 	and.w	r0, r1, #7
   16b56:	fa22 f000 	lsr.w	r0, r2, r0
   16b5a:	f88d 000f 	strb.w	r0, [sp, #15]
   16b5e:	f89d 000f 	ldrb.w	r0, [sp, #15]
   16b62:	9000      	str	r0, [sp, #0]
   16b64:	e7ff      	b.n	16b66 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17h0b64f2ebc21519c0E+0x20>
   16b66:	9800      	ldr	r0, [sp, #0]
   16b68:	b004      	add	sp, #16
   16b6a:	4770      	bx	lr

00016b6c <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h84bf0bac3f755209E>:
   16b6c:	b082      	sub	sp, #8
   16b6e:	460a      	mov	r2, r1
   16b70:	4603      	mov	r3, r0
   16b72:	f88d 0005 	strb.w	r0, [sp, #5]
   16b76:	f88d 1006 	strb.w	r1, [sp, #6]
   16b7a:	1a40      	subs	r0, r0, r1
   16b7c:	f88d 0007 	strb.w	r0, [sp, #7]
   16b80:	f89d 0007 	ldrb.w	r0, [sp, #7]
   16b84:	9000      	str	r0, [sp, #0]
   16b86:	e7ff      	b.n	16b88 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h84bf0bac3f755209E+0x1c>
   16b88:	9800      	ldr	r0, [sp, #0]
   16b8a:	b002      	add	sp, #8
   16b8c:	4770      	bx	lr

00016b8e <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E>:
   16b8e:	b084      	sub	sp, #16
   16b90:	b2c2      	uxtb	r2, r0
   16b92:	460b      	mov	r3, r1
   16b94:	4684      	mov	ip, r0
   16b96:	f88d 000a 	strb.w	r0, [sp, #10]
   16b9a:	f88d 100b 	strb.w	r1, [sp, #11]
   16b9e:	fa52 f081 	uxtab	r0, r2, r1
   16ba2:	b2c1      	uxtb	r1, r0
   16ba4:	1a09      	subs	r1, r1, r0
   16ba6:	bf18      	it	ne
   16ba8:	2101      	movne	r1, #1
   16baa:	f88d 000c 	strb.w	r0, [sp, #12]
   16bae:	f88d 100d 	strb.w	r1, [sp, #13]
   16bb2:	f89d 000c 	ldrb.w	r0, [sp, #12]
   16bb6:	f89d 100d 	ldrb.w	r1, [sp, #13]
   16bba:	9001      	str	r0, [sp, #4]
   16bbc:	9100      	str	r1, [sp, #0]
   16bbe:	e7ff      	b.n	16bc0 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E+0x32>
   16bc0:	9801      	ldr	r0, [sp, #4]
   16bc2:	f88d 000e 	strb.w	r0, [sp, #14]
   16bc6:	9900      	ldr	r1, [sp, #0]
   16bc8:	f001 0201 	and.w	r2, r1, #1
   16bcc:	f88d 200f 	strb.w	r2, [sp, #15]
   16bd0:	f88d 0008 	strb.w	r0, [sp, #8]
   16bd4:	f88d 2009 	strb.w	r2, [sp, #9]
   16bd8:	f89d 0008 	ldrb.w	r0, [sp, #8]
   16bdc:	f89d 1009 	ldrb.w	r1, [sp, #9]
   16be0:	b004      	add	sp, #16
   16be2:	4770      	bx	lr

00016be4 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E>:
   16be4:	b580      	push	{r7, lr}
   16be6:	b084      	sub	sp, #16
   16be8:	b2ca      	uxtb	r2, r1
   16bea:	b2c3      	uxtb	r3, r0
   16bec:	468c      	mov	ip, r1
   16bee:	4686      	mov	lr, r0
   16bf0:	f88d 000a 	strb.w	r0, [sp, #10]
   16bf4:	f88d 100b 	strb.w	r1, [sp, #11]
   16bf8:	1a98      	subs	r0, r3, r2
   16bfa:	b2c1      	uxtb	r1, r0
   16bfc:	1a09      	subs	r1, r1, r0
   16bfe:	bf18      	it	ne
   16c00:	2101      	movne	r1, #1
   16c02:	f88d 000c 	strb.w	r0, [sp, #12]
   16c06:	f88d 100d 	strb.w	r1, [sp, #13]
   16c0a:	f89d 000c 	ldrb.w	r0, [sp, #12]
   16c0e:	f89d 100d 	ldrb.w	r1, [sp, #13]
   16c12:	9001      	str	r0, [sp, #4]
   16c14:	9100      	str	r1, [sp, #0]
   16c16:	e7ff      	b.n	16c18 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E+0x34>
   16c18:	9801      	ldr	r0, [sp, #4]
   16c1a:	f88d 000e 	strb.w	r0, [sp, #14]
   16c1e:	9900      	ldr	r1, [sp, #0]
   16c20:	f001 0201 	and.w	r2, r1, #1
   16c24:	f88d 200f 	strb.w	r2, [sp, #15]
   16c28:	f88d 0008 	strb.w	r0, [sp, #8]
   16c2c:	f88d 2009 	strb.w	r2, [sp, #9]
   16c30:	f89d 0008 	ldrb.w	r0, [sp, #8]
   16c34:	f89d 1009 	ldrb.w	r1, [sp, #9]
   16c38:	b004      	add	sp, #16
   16c3a:	bd80      	pop	{r7, pc}

00016c3c <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E>:
   16c3c:	b083      	sub	sp, #12
   16c3e:	460a      	mov	r2, r1
   16c40:	4603      	mov	r3, r0
   16c42:	f8ad 0006 	strh.w	r0, [sp, #6]
   16c46:	f8ad 1008 	strh.w	r1, [sp, #8]
   16c4a:	4408      	add	r0, r1
   16c4c:	f8ad 000a 	strh.w	r0, [sp, #10]
   16c50:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   16c54:	9000      	str	r0, [sp, #0]
   16c56:	e7ff      	b.n	16c58 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E+0x1c>
   16c58:	9800      	ldr	r0, [sp, #0]
   16c5a:	b003      	add	sp, #12
   16c5c:	4770      	bx	lr

00016c5e <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E>:
   16c5e:	b083      	sub	sp, #12
   16c60:	460a      	mov	r2, r1
   16c62:	4603      	mov	r3, r0
   16c64:	f8ad 0006 	strh.w	r0, [sp, #6]
   16c68:	f8ad 1008 	strh.w	r1, [sp, #8]
   16c6c:	1a40      	subs	r0, r0, r1
   16c6e:	f8ad 000a 	strh.w	r0, [sp, #10]
   16c72:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   16c76:	9000      	str	r0, [sp, #0]
   16c78:	e7ff      	b.n	16c7a <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E+0x1c>
   16c7a:	9800      	ldr	r0, [sp, #0]
   16c7c:	b003      	add	sp, #12
   16c7e:	4770      	bx	lr

00016c80 <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h91461b58eecc5a2aE>:
   16c80:	b5b0      	push	{r4, r5, r7, lr}
   16c82:	b088      	sub	sp, #32
   16c84:	469c      	mov	ip, r3
   16c86:	4696      	mov	lr, r2
   16c88:	460c      	mov	r4, r1
   16c8a:	4605      	mov	r5, r0
   16c8c:	9103      	str	r1, [sp, #12]
   16c8e:	9002      	str	r0, [sp, #8]
   16c90:	9305      	str	r3, [sp, #20]
   16c92:	9204      	str	r2, [sp, #16]
   16c94:	1a80      	subs	r0, r0, r2
   16c96:	eb61 0103 	sbc.w	r1, r1, r3
   16c9a:	9107      	str	r1, [sp, #28]
   16c9c:	9006      	str	r0, [sp, #24]
   16c9e:	9806      	ldr	r0, [sp, #24]
   16ca0:	9907      	ldr	r1, [sp, #28]
   16ca2:	9001      	str	r0, [sp, #4]
   16ca4:	9100      	str	r1, [sp, #0]
   16ca6:	e7ff      	b.n	16ca8 <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h91461b58eecc5a2aE+0x28>
   16ca8:	9801      	ldr	r0, [sp, #4]
   16caa:	9900      	ldr	r1, [sp, #0]
   16cac:	b008      	add	sp, #32
   16cae:	bdb0      	pop	{r4, r5, r7, pc}

00016cb0 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>:
    fn le(&self, other: &LevelFilter) -> bool {
   16cb0:	b082      	sub	sp, #8
   16cb2:	9000      	str	r0, [sp, #0]
   16cb4:	9101      	str	r1, [sp, #4]
        *self as usize <= *other as usize
   16cb6:	6800      	ldr	r0, [r0, #0]
   16cb8:	6809      	ldr	r1, [r1, #0]
   16cba:	2200      	movs	r2, #0
   16cbc:	4288      	cmp	r0, r1
   16cbe:	bf98      	it	ls
   16cc0:	2201      	movls	r2, #1
    }
   16cc2:	4610      	mov	r0, r2
   16cc4:	b002      	add	sp, #8
   16cc6:	4770      	bx	lr

00016cc8 <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h32b550ec8df70192E>:
   16cc8:	b081      	sub	sp, #4
   16cca:	4601      	mov	r1, r0
   16ccc:	f88d 0003 	strb.w	r0, [sp, #3]
   16cd0:	b2c0      	uxtb	r0, r0
   16cd2:	b001      	add	sp, #4
   16cd4:	4770      	bx	lr

00016cd6 <_ZN4core3mem4swap17h206518364108b51fE>:
   16cd6:	b580      	push	{r7, lr}
   16cd8:	b082      	sub	sp, #8
   16cda:	9000      	str	r0, [sp, #0]
   16cdc:	9101      	str	r1, [sp, #4]
   16cde:	f000 fc55 	bl	1758c <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE>
   16ce2:	e7ff      	b.n	16ce4 <_ZN4core3mem4swap17h206518364108b51fE+0xe>
   16ce4:	b002      	add	sp, #8
   16ce6:	bd80      	pop	{r7, pc}

00016ce8 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h7f385561cf81b0ffE>:
   16ce8:	b580      	push	{r7, lr}
   16cea:	b088      	sub	sp, #32
   16cec:	9004      	str	r0, [sp, #16]
   16cee:	9105      	str	r1, [sp, #20]
   16cf0:	9206      	str	r2, [sp, #24]
   16cf2:	9307      	str	r3, [sp, #28]
   16cf4:	9003      	str	r0, [sp, #12]
   16cf6:	4610      	mov	r0, r2
   16cf8:	9102      	str	r1, [sp, #8]
   16cfa:	4619      	mov	r1, r3
   16cfc:	9a03      	ldr	r2, [sp, #12]
   16cfe:	9b02      	ldr	r3, [sp, #8]
   16d00:	f7f1 ff78 	bl	8bf4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>
   16d04:	9001      	str	r0, [sp, #4]
   16d06:	9100      	str	r1, [sp, #0]
   16d08:	e7ff      	b.n	16d0a <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h7f385561cf81b0ffE+0x22>
   16d0a:	9801      	ldr	r0, [sp, #4]
   16d0c:	9900      	ldr	r1, [sp, #0]
   16d0e:	b008      	add	sp, #32
   16d10:	bd80      	pop	{r7, pc}

00016d12 <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17hc283e26c72ff63bbE>:
   16d12:	b082      	sub	sp, #8
   16d14:	9000      	str	r0, [sp, #0]
   16d16:	9101      	str	r1, [sp, #4]
   16d18:	7800      	ldrb	r0, [r0, #0]
   16d1a:	7809      	ldrb	r1, [r1, #0]
   16d1c:	2200      	movs	r2, #0
   16d1e:	4288      	cmp	r0, r1
   16d20:	bf38      	it	cc
   16d22:	2201      	movcc	r2, #1
   16d24:	4610      	mov	r0, r2
   16d26:	b002      	add	sp, #8
   16d28:	4770      	bx	lr

00016d2a <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE>:
   16d2a:	b580      	push	{r7, lr}
   16d2c:	b088      	sub	sp, #32
   16d2e:	9005      	str	r0, [sp, #20]
   16d30:	9106      	str	r1, [sp, #24]
   16d32:	9002      	str	r0, [sp, #8]
   16d34:	4608      	mov	r0, r1
   16d36:	f000 fd04 	bl	17742 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE>
   16d3a:	f88d 1011 	strb.w	r1, [sp, #17]
   16d3e:	f88d 0010 	strb.w	r0, [sp, #16]
   16d42:	e7ff      	b.n	16d44 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x1a>
   16d44:	f89d 0010 	ldrb.w	r0, [sp, #16]
   16d48:	07c1      	lsls	r1, r0, #31
   16d4a:	2900      	cmp	r1, #0
   16d4c:	d005      	beq.n	16d5a <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x30>
   16d4e:	e7ff      	b.n	16d50 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x26>
   16d50:	2000      	movs	r0, #0
   16d52:	f88d 000c 	strb.w	r0, [sp, #12]
   16d56:	e011      	b.n	16d7c <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x52>
   16d58:	defe      	udf	#254	; 0xfe
   16d5a:	f89d 0011 	ldrb.w	r0, [sp, #17]
   16d5e:	f88d 001f 	strb.w	r0, [sp, #31]
   16d62:	9902      	ldr	r1, [sp, #8]
   16d64:	780a      	ldrb	r2, [r1, #0]
   16d66:	9001      	str	r0, [sp, #4]
   16d68:	4610      	mov	r0, r2
   16d6a:	9901      	ldr	r1, [sp, #4]
   16d6c:	f7ff fe9e 	bl	16aac <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E>
   16d70:	f88d 100d 	strb.w	r1, [sp, #13]
   16d74:	f88d 000c 	strb.w	r0, [sp, #12]
   16d78:	e7ff      	b.n	16d7a <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x50>
   16d7a:	e7ff      	b.n	16d7c <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x52>
   16d7c:	f89d 000c 	ldrb.w	r0, [sp, #12]
   16d80:	f89d 100d 	ldrb.w	r1, [sp, #13]
   16d84:	b008      	add	sp, #32
   16d86:	bd80      	pop	{r7, pc}

00016d88 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   16d88:	b580      	push	{r7, lr}
   16d8a:	b088      	sub	sp, #32
   16d8c:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   16d8e:	1d01      	adds	r1, r0, #4
   16d90:	9106      	str	r1, [sp, #24]
   16d92:	9107      	str	r1, [sp, #28]
   16d94:	9004      	str	r0, [sp, #16]
   16d96:	9103      	str	r1, [sp, #12]
   16d98:	e7ff      	b.n	16d9a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x12>
   16d9a:	9804      	ldr	r0, [sp, #16]
   16d9c:	6801      	ldr	r1, [r0, #0]
   16d9e:	9803      	ldr	r0, [sp, #12]
   16da0:	f7f1 ffd8 	bl	8d54 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   16da4:	9002      	str	r0, [sp, #8]
   16da6:	9101      	str	r1, [sp, #4]
   16da8:	e7ff      	b.n	16daa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x22>
    }
   16daa:	9802      	ldr	r0, [sp, #8]
   16dac:	9901      	ldr	r1, [sp, #4]
   16dae:	b008      	add	sp, #32
   16db0:	bd80      	pop	{r7, pc}

00016db2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   16db2:	b580      	push	{r7, lr}
   16db4:	b088      	sub	sp, #32
   16db6:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   16db8:	1d01      	adds	r1, r0, #4
   16dba:	9106      	str	r1, [sp, #24]
   16dbc:	9107      	str	r1, [sp, #28]
   16dbe:	9004      	str	r0, [sp, #16]
   16dc0:	9103      	str	r1, [sp, #12]
   16dc2:	e7ff      	b.n	16dc4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE+0x12>
   16dc4:	9804      	ldr	r0, [sp, #16]
   16dc6:	6801      	ldr	r1, [r0, #0]
   16dc8:	9803      	ldr	r0, [sp, #12]
   16dca:	f7f1 ffc3 	bl	8d54 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   16dce:	9002      	str	r0, [sp, #8]
   16dd0:	9101      	str	r1, [sp, #4]
   16dd2:	e7ff      	b.n	16dd4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE+0x22>
    }
   16dd4:	9802      	ldr	r0, [sp, #8]
   16dd6:	9901      	ldr	r1, [sp, #4]
   16dd8:	b008      	add	sp, #32
   16dda:	bd80      	pop	{r7, pc}

00016ddc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   16ddc:	b580      	push	{r7, lr}
   16dde:	b08a      	sub	sp, #40	; 0x28
   16de0:	460a      	mov	r2, r1
   16de2:	9006      	str	r0, [sp, #24]
   16de4:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   16de8:	1d01      	adds	r1, r0, #4
   16dea:	9108      	str	r1, [sp, #32]
   16dec:	9109      	str	r1, [sp, #36]	; 0x24
   16dee:	9005      	str	r0, [sp, #20]
   16df0:	9204      	str	r2, [sp, #16]
   16df2:	9103      	str	r1, [sp, #12]
   16df4:	e7ff      	b.n	16df6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x1a>
            .add(self.len)
   16df6:	9805      	ldr	r0, [sp, #20]
   16df8:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   16dfa:	9803      	ldr	r0, [sp, #12]
   16dfc:	f7fb f80b 	bl	11e16 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   16e00:	9002      	str	r0, [sp, #8]
   16e02:	e7ff      	b.n	16e04 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x28>
   16e04:	9802      	ldr	r0, [sp, #8]
   16e06:	9904      	ldr	r1, [sp, #16]
   16e08:	f000 f994 	bl	17134 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   16e0c:	e7ff      	b.n	16e0e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x32>
        self.len += 1;
   16e0e:	9805      	ldr	r0, [sp, #20]
   16e10:	6801      	ldr	r1, [r0, #0]
   16e12:	1c4a      	adds	r2, r1, #1
   16e14:	4613      	mov	r3, r2
   16e16:	428a      	cmp	r2, r1
   16e18:	9301      	str	r3, [sp, #4]
   16e1a:	d305      	bcc.n	16e28 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x4c>
   16e1c:	e7ff      	b.n	16e1e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x42>
   16e1e:	9801      	ldr	r0, [sp, #4]
   16e20:	9905      	ldr	r1, [sp, #20]
   16e22:	6008      	str	r0, [r1, #0]
    }
   16e24:	b00a      	add	sp, #40	; 0x28
   16e26:	bd80      	pop	{r7, pc}
        self.len += 1;
   16e28:	f241 20f0 	movw	r0, #4848	; 0x12f0
   16e2c:	f2c0 0002 	movt	r0, #2
   16e30:	f241 22dc 	movw	r2, #4828	; 0x12dc
   16e34:	f2c0 0202 	movt	r2, #2
   16e38:	211c      	movs	r1, #28
   16e3a:	f000 fdbb 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16e3e:	defe      	udf	#254	; 0xfe

00016e40 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   16e40:	b580      	push	{r7, lr}
   16e42:	b08a      	sub	sp, #40	; 0x28
   16e44:	460a      	mov	r2, r1
   16e46:	9006      	str	r0, [sp, #24]
   16e48:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   16e4c:	1d01      	adds	r1, r0, #4
   16e4e:	9108      	str	r1, [sp, #32]
   16e50:	9109      	str	r1, [sp, #36]	; 0x24
   16e52:	9005      	str	r0, [sp, #20]
   16e54:	9204      	str	r2, [sp, #16]
   16e56:	9103      	str	r1, [sp, #12]
   16e58:	e7ff      	b.n	16e5a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x1a>
            .add(self.len)
   16e5a:	9805      	ldr	r0, [sp, #20]
   16e5c:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   16e5e:	9803      	ldr	r0, [sp, #12]
   16e60:	f7fa ffd9 	bl	11e16 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   16e64:	9002      	str	r0, [sp, #8]
   16e66:	e7ff      	b.n	16e68 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x28>
   16e68:	9802      	ldr	r0, [sp, #8]
   16e6a:	9904      	ldr	r1, [sp, #16]
   16e6c:	f000 f962 	bl	17134 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   16e70:	e7ff      	b.n	16e72 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x32>
        self.len += 1;
   16e72:	9805      	ldr	r0, [sp, #20]
   16e74:	6801      	ldr	r1, [r0, #0]
   16e76:	1c4a      	adds	r2, r1, #1
   16e78:	4613      	mov	r3, r2
   16e7a:	428a      	cmp	r2, r1
   16e7c:	9301      	str	r3, [sp, #4]
   16e7e:	d305      	bcc.n	16e8c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x4c>
   16e80:	e7ff      	b.n	16e82 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x42>
   16e82:	9801      	ldr	r0, [sp, #4]
   16e84:	9905      	ldr	r1, [sp, #20]
   16e86:	6008      	str	r0, [r1, #0]
    }
   16e88:	b00a      	add	sp, #40	; 0x28
   16e8a:	bd80      	pop	{r7, pc}
        self.len += 1;
   16e8c:	f241 20f0 	movw	r0, #4848	; 0x12f0
   16e90:	f2c0 0002 	movt	r0, #2
   16e94:	f241 22dc 	movw	r2, #4828	; 0x12dc
   16e98:	f2c0 0202 	movt	r2, #2
   16e9c:	211c      	movs	r1, #28
   16e9e:	f000 fd89 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16ea2:	defe      	udf	#254	; 0xfe

00016ea4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   16ea4:	b580      	push	{r7, lr}
   16ea6:	b094      	sub	sp, #80	; 0x50
   16ea8:	900e      	str	r0, [sp, #56]	; 0x38
   16eaa:	910f      	str	r1, [sp, #60]	; 0x3c
   16eac:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   16eae:	6803      	ldr	r3, [r0, #0]
   16eb0:	9009      	str	r0, [sp, #36]	; 0x24
   16eb2:	4608      	mov	r0, r1
   16eb4:	9108      	str	r1, [sp, #32]
   16eb6:	4611      	mov	r1, r2
   16eb8:	9207      	str	r2, [sp, #28]
   16eba:	9306      	str	r3, [sp, #24]
   16ebc:	f7fb f83b 	bl	11f36 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   16ec0:	9005      	str	r0, [sp, #20]
   16ec2:	e7ff      	b.n	16ec4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x20>
   16ec4:	9806      	ldr	r0, [sp, #24]
   16ec6:	9905      	ldr	r1, [sp, #20]
   16ec8:	1842      	adds	r2, r0, r1
   16eca:	4613      	mov	r3, r2
   16ecc:	4282      	cmp	r2, r0
   16ece:	9304      	str	r3, [sp, #16]
   16ed0:	d33f      	bcc.n	16f52 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xae>
   16ed2:	e7ff      	b.n	16ed4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x30>
   16ed4:	9809      	ldr	r0, [sp, #36]	; 0x24
   16ed6:	f000 f8b7 	bl	17048 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE>
   16eda:	9003      	str	r0, [sp, #12]
   16edc:	e7ff      	b.n	16ede <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x3a>
   16ede:	9804      	ldr	r0, [sp, #16]
   16ee0:	9903      	ldr	r1, [sp, #12]
   16ee2:	4288      	cmp	r0, r1
   16ee4:	d807      	bhi.n	16ef6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x52>
   16ee6:	e7ff      	b.n	16ee8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x44>
            for elem in other {
   16ee8:	9808      	ldr	r0, [sp, #32]
   16eea:	9907      	ldr	r1, [sp, #28]
   16eec:	f7f2 f850 	bl	8f90 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>
   16ef0:	9002      	str	r0, [sp, #8]
   16ef2:	9101      	str	r1, [sp, #4]
   16ef4:	e003      	b.n	16efe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x5a>
   16ef6:	2001      	movs	r0, #1
            Err(())
   16ef8:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   16efc:	e025      	b.n	16f4a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xa6>
            for elem in other {
   16efe:	9802      	ldr	r0, [sp, #8]
   16f00:	900b      	str	r0, [sp, #44]	; 0x2c
   16f02:	9901      	ldr	r1, [sp, #4]
   16f04:	910c      	str	r1, [sp, #48]	; 0x30
   16f06:	e7ff      	b.n	16f08 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x64>
   16f08:	a80b      	add	r0, sp, #44	; 0x2c
   16f0a:	f7fa fbe6 	bl	116da <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>
   16f0e:	900d      	str	r0, [sp, #52]	; 0x34
   16f10:	e7ff      	b.n	16f12 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x6e>
   16f12:	980d      	ldr	r0, [sp, #52]	; 0x34
   16f14:	2800      	cmp	r0, #0
   16f16:	4601      	mov	r1, r0
   16f18:	bf18      	it	ne
   16f1a:	2101      	movne	r1, #1
   16f1c:	2800      	cmp	r0, #0
   16f1e:	d001      	beq.n	16f24 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x80>
   16f20:	e7ff      	b.n	16f22 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x7e>
   16f22:	e004      	b.n	16f2e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x8a>
   16f24:	2000      	movs	r0, #0
            Ok(())
   16f26:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   16f2a:	e00e      	b.n	16f4a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xa6>
            for elem in other {
   16f2c:	defe      	udf	#254	; 0xfe
   16f2e:	980d      	ldr	r0, [sp, #52]	; 0x34
   16f30:	9011      	str	r0, [sp, #68]	; 0x44
   16f32:	9012      	str	r0, [sp, #72]	; 0x48
   16f34:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   16f36:	f000 f909 	bl	1714c <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>
   16f3a:	9000      	str	r0, [sp, #0]
   16f3c:	e7ff      	b.n	16f3e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x9a>
   16f3e:	9809      	ldr	r0, [sp, #36]	; 0x24
   16f40:	9900      	ldr	r1, [sp, #0]
   16f42:	f7ff ff7d 	bl	16e40 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE>
   16f46:	e7ff      	b.n	16f48 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xa4>
            for elem in other {
   16f48:	e7de      	b.n	16f08 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x64>
    }
   16f4a:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   16f4e:	b014      	add	sp, #80	; 0x50
   16f50:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   16f52:	f241 20f0 	movw	r0, #4848	; 0x12f0
   16f56:	f2c0 0002 	movt	r0, #2
   16f5a:	f241 320c 	movw	r2, #4876	; 0x130c
   16f5e:	f2c0 0202 	movt	r2, #2
   16f62:	211c      	movs	r1, #28
   16f64:	f000 fd26 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16f68:	defe      	udf	#254	; 0xfe

00016f6a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>:
    pub(crate) fn push(&mut self, item: T) -> Result<(), T> {
   16f6a:	b580      	push	{r7, lr}
   16f6c:	b088      	sub	sp, #32
   16f6e:	460a      	mov	r2, r1
   16f70:	9006      	str	r0, [sp, #24]
   16f72:	f88d 101f 	strb.w	r1, [sp, #31]
        if self.len < self.capacity() {
   16f76:	6801      	ldr	r1, [r0, #0]
   16f78:	9004      	str	r0, [sp, #16]
   16f7a:	9203      	str	r2, [sp, #12]
   16f7c:	9102      	str	r1, [sp, #8]
   16f7e:	f000 f859 	bl	17034 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>
   16f82:	9001      	str	r0, [sp, #4]
   16f84:	e7ff      	b.n	16f86 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x1c>
   16f86:	9802      	ldr	r0, [sp, #8]
   16f88:	9901      	ldr	r1, [sp, #4]
   16f8a:	4288      	cmp	r0, r1
   16f8c:	d307      	bcc.n	16f9e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x34>
   16f8e:	e7ff      	b.n	16f90 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x26>
            Err(item)
   16f90:	9803      	ldr	r0, [sp, #12]
   16f92:	f88d 0015 	strb.w	r0, [sp, #21]
   16f96:	2101      	movs	r1, #1
   16f98:	f88d 1014 	strb.w	r1, [sp, #20]
        if self.len < self.capacity() {
   16f9c:	e008      	b.n	16fb0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
            unsafe { self.push_unchecked(item) }
   16f9e:	9804      	ldr	r0, [sp, #16]
   16fa0:	9903      	ldr	r1, [sp, #12]
   16fa2:	f7ff ff1b 	bl	16ddc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>
   16fa6:	e7ff      	b.n	16fa8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x3e>
   16fa8:	2000      	movs	r0, #0
            Ok(())
   16faa:	f88d 0014 	strb.w	r0, [sp, #20]
        if self.len < self.capacity() {
   16fae:	e7ff      	b.n	16fb0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
    }
   16fb0:	f89d 0014 	ldrb.w	r0, [sp, #20]
   16fb4:	f89d 1015 	ldrb.w	r1, [sp, #21]
   16fb8:	b008      	add	sp, #32
   16fba:	bd80      	pop	{r7, pc}

00016fbc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>:
    pub(crate) fn clear(&mut self) {
   16fbc:	b580      	push	{r7, lr}
   16fbe:	b082      	sub	sp, #8
   16fc0:	9001      	str	r0, [sp, #4]
   16fc2:	2100      	movs	r1, #0
        self.truncate(0);
   16fc4:	f000 f880 	bl	170c8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>
   16fc8:	e7ff      	b.n	16fca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E+0xe>
    }
   16fca:	b002      	add	sp, #8
   16fcc:	bd80      	pop	{r7, pc}

00016fce <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E>:
    pub(crate) fn clear(&mut self) {
   16fce:	b580      	push	{r7, lr}
   16fd0:	b082      	sub	sp, #8
   16fd2:	9001      	str	r0, [sp, #4]
   16fd4:	2100      	movs	r1, #0
        self.truncate(0);
   16fd6:	f000 f841 	bl	1705c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E>
   16fda:	e7ff      	b.n	16fdc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E+0xe>
    }
   16fdc:	b002      	add	sp, #8
   16fde:	bd80      	pop	{r7, pc}

00016fe0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E>:
    pub(crate) fn as_slice(&self) -> &[T] {
   16fe0:	b580      	push	{r7, lr}
   16fe2:	b088      	sub	sp, #32
   16fe4:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   16fe6:	1d01      	adds	r1, r0, #4
   16fe8:	9106      	str	r1, [sp, #24]
   16fea:	9107      	str	r1, [sp, #28]
   16fec:	9004      	str	r0, [sp, #16]
   16fee:	9103      	str	r1, [sp, #12]
   16ff0:	e7ff      	b.n	16ff2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E+0x12>
   16ff2:	9804      	ldr	r0, [sp, #16]
   16ff4:	6801      	ldr	r1, [r0, #0]
   16ff6:	9803      	ldr	r0, [sp, #12]
   16ff8:	f7fb fbb1 	bl	1275e <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   16ffc:	9002      	str	r0, [sp, #8]
   16ffe:	9101      	str	r1, [sp, #4]
   17000:	e7ff      	b.n	17002 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E+0x22>
    }
   17002:	9802      	ldr	r0, [sp, #8]
   17004:	9901      	ldr	r1, [sp, #4]
   17006:	b008      	add	sp, #32
   17008:	bd80      	pop	{r7, pc}

0001700a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   1700a:	b580      	push	{r7, lr}
   1700c:	b088      	sub	sp, #32
   1700e:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   17010:	1d01      	adds	r1, r0, #4
   17012:	9106      	str	r1, [sp, #24]
   17014:	9107      	str	r1, [sp, #28]
   17016:	9004      	str	r0, [sp, #16]
   17018:	9103      	str	r1, [sp, #12]
   1701a:	e7ff      	b.n	1701c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x12>
   1701c:	9804      	ldr	r0, [sp, #16]
   1701e:	6801      	ldr	r1, [r0, #0]
   17020:	9803      	ldr	r0, [sp, #12]
   17022:	f7fb fb9c 	bl	1275e <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   17026:	9002      	str	r0, [sp, #8]
   17028:	9101      	str	r1, [sp, #4]
   1702a:	e7ff      	b.n	1702c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x22>
    }
   1702c:	9802      	ldr	r0, [sp, #8]
   1702e:	9901      	ldr	r1, [sp, #4]
   17030:	b008      	add	sp, #32
   17032:	bd80      	pop	{r7, pc}

00017034 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>:
    pub(crate) fn capacity(&self) -> usize {
   17034:	b580      	push	{r7, lr}
   17036:	b082      	sub	sp, #8
   17038:	9001      	str	r0, [sp, #4]
        N::to_usize()
   1703a:	f000 f964 	bl	17306 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   1703e:	9000      	str	r0, [sp, #0]
   17040:	e7ff      	b.n	17042 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E+0xe>
    }
   17042:	9800      	ldr	r0, [sp, #0]
   17044:	b002      	add	sp, #8
   17046:	bd80      	pop	{r7, pc}

00017048 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE>:
    pub(crate) fn capacity(&self) -> usize {
   17048:	b580      	push	{r7, lr}
   1704a:	b082      	sub	sp, #8
   1704c:	9001      	str	r0, [sp, #4]
        N::to_usize()
   1704e:	f000 f8b2 	bl	171b6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E>
   17052:	9000      	str	r0, [sp, #0]
   17054:	e7ff      	b.n	17056 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE+0xe>
    }
   17056:	9800      	ldr	r0, [sp, #0]
   17058:	b002      	add	sp, #8
   1705a:	bd80      	pop	{r7, pc}

0001705c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   1705c:	b580      	push	{r7, lr}
   1705e:	b08a      	sub	sp, #40	; 0x28
   17060:	9007      	str	r0, [sp, #28]
   17062:	9108      	str	r1, [sp, #32]
   17064:	9106      	str	r1, [sp, #24]
   17066:	9005      	str	r0, [sp, #20]
   17068:	e7ff      	b.n	1706a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0xe>
            while len < self.len {
   1706a:	9805      	ldr	r0, [sp, #20]
   1706c:	6801      	ldr	r1, [r0, #0]
   1706e:	9a06      	ldr	r2, [sp, #24]
   17070:	428a      	cmp	r2, r1
   17072:	d302      	bcc.n	1707a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x1e>
   17074:	e7ff      	b.n	17076 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x1a>
    }
   17076:	b00a      	add	sp, #40	; 0x28
   17078:	bd80      	pop	{r7, pc}
                self.len -= 1;
   1707a:	9805      	ldr	r0, [sp, #20]
   1707c:	6801      	ldr	r1, [r0, #0]
   1707e:	1e4a      	subs	r2, r1, #1
   17080:	2901      	cmp	r1, #1
   17082:	9204      	str	r2, [sp, #16]
   17084:	d314      	bcc.n	170b0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x54>
   17086:	e7ff      	b.n	17088 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x2c>
   17088:	9804      	ldr	r0, [sp, #16]
   1708a:	9905      	ldr	r1, [sp, #20]
   1708c:	6008      	str	r0, [r1, #0]
                let len = self.len;
   1708e:	680a      	ldr	r2, [r1, #0]
   17090:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   17092:	4608      	mov	r0, r1
   17094:	9203      	str	r2, [sp, #12]
   17096:	f7ff fe8c 	bl	16db2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE>
   1709a:	9002      	str	r0, [sp, #8]
   1709c:	9101      	str	r1, [sp, #4]
   1709e:	e7ff      	b.n	170a0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x44>
   170a0:	9802      	ldr	r0, [sp, #8]
   170a2:	9901      	ldr	r1, [sp, #4]
   170a4:	9a03      	ldr	r2, [sp, #12]
   170a6:	f7fa ff34 	bl	11f12 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   170aa:	e7ff      	b.n	170ac <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x50>
   170ac:	e7ff      	b.n	170ae <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x52>
            while len < self.len {
   170ae:	e7dc      	b.n	1706a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0xe>
                self.len -= 1;
   170b0:	f241 3030 	movw	r0, #4912	; 0x1330
   170b4:	f2c0 0002 	movt	r0, #2
   170b8:	f241 321c 	movw	r2, #4892	; 0x131c
   170bc:	f2c0 0202 	movt	r2, #2
   170c0:	2121      	movs	r1, #33	; 0x21
   170c2:	f000 fc77 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   170c6:	defe      	udf	#254	; 0xfe

000170c8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   170c8:	b580      	push	{r7, lr}
   170ca:	b08a      	sub	sp, #40	; 0x28
   170cc:	9007      	str	r0, [sp, #28]
   170ce:	9108      	str	r1, [sp, #32]
   170d0:	9106      	str	r1, [sp, #24]
   170d2:	9005      	str	r0, [sp, #20]
   170d4:	e7ff      	b.n	170d6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
            while len < self.len {
   170d6:	9805      	ldr	r0, [sp, #20]
   170d8:	6801      	ldr	r1, [r0, #0]
   170da:	9a06      	ldr	r2, [sp, #24]
   170dc:	428a      	cmp	r2, r1
   170de:	d302      	bcc.n	170e6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1e>
   170e0:	e7ff      	b.n	170e2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1a>
    }
   170e2:	b00a      	add	sp, #40	; 0x28
   170e4:	bd80      	pop	{r7, pc}
                self.len -= 1;
   170e6:	9805      	ldr	r0, [sp, #20]
   170e8:	6801      	ldr	r1, [r0, #0]
   170ea:	1e4a      	subs	r2, r1, #1
   170ec:	2901      	cmp	r1, #1
   170ee:	9204      	str	r2, [sp, #16]
   170f0:	d314      	bcc.n	1711c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x54>
   170f2:	e7ff      	b.n	170f4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x2c>
   170f4:	9804      	ldr	r0, [sp, #16]
   170f6:	9905      	ldr	r1, [sp, #20]
   170f8:	6008      	str	r0, [r1, #0]
                let len = self.len;
   170fa:	680a      	ldr	r2, [r1, #0]
   170fc:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   170fe:	4608      	mov	r0, r1
   17100:	9203      	str	r2, [sp, #12]
   17102:	f7ff fe41 	bl	16d88 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>
   17106:	9002      	str	r0, [sp, #8]
   17108:	9101      	str	r1, [sp, #4]
   1710a:	e7ff      	b.n	1710c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x44>
   1710c:	9802      	ldr	r0, [sp, #8]
   1710e:	9901      	ldr	r1, [sp, #4]
   17110:	9a03      	ldr	r2, [sp, #12]
   17112:	f7fa fefe 	bl	11f12 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   17116:	e7ff      	b.n	17118 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x50>
   17118:	e7ff      	b.n	1711a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x52>
            while len < self.len {
   1711a:	e7dc      	b.n	170d6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
                self.len -= 1;
   1711c:	f241 3030 	movw	r0, #4912	; 0x1330
   17120:	f2c0 0002 	movt	r0, #2
   17124:	f241 321c 	movw	r2, #4892	; 0x131c
   17128:	f2c0 0202 	movt	r2, #2
   1712c:	2121      	movs	r1, #33	; 0x21
   1712e:	f000 fc41 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   17132:	defe      	udf	#254	; 0xfe

00017134 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>:
   17134:	b580      	push	{r7, lr}
   17136:	b084      	sub	sp, #16
   17138:	460a      	mov	r2, r1
   1713a:	9002      	str	r0, [sp, #8]
   1713c:	f88d 100f 	strb.w	r1, [sp, #15]
   17140:	9201      	str	r2, [sp, #4]
   17142:	f7f1 ffad 	bl	90a0 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   17146:	e7ff      	b.n	17148 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE+0x14>
   17148:	b004      	add	sp, #16
   1714a:	bd80      	pop	{r7, pc}

0001714c <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>:
   1714c:	b081      	sub	sp, #4
   1714e:	9000      	str	r0, [sp, #0]
   17150:	7800      	ldrb	r0, [r0, #0]
   17152:	b001      	add	sp, #4
   17154:	4770      	bx	lr

00017156 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>:
    fn to_usize() -> usize {
   17156:	b580      	push	{r7, lr}
   17158:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1715a:	f000 fb0b 	bl	17774 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1715e:	9003      	str	r0, [sp, #12]
   17160:	e7ff      	b.n	17162 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0xc>
   17162:	9803      	ldr	r0, [sp, #12]
   17164:	f000 fb0c 	bl	17780 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   17168:	9002      	str	r0, [sp, #8]
   1716a:	e7ff      	b.n	1716c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x16>
   1716c:	f000 f8cb 	bl	17306 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   17170:	9001      	str	r0, [sp, #4]
   17172:	e7ff      	b.n	17174 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x1e>
   17174:	9801      	ldr	r0, [sp, #4]
   17176:	0041      	lsls	r1, r0, #1
   17178:	9100      	str	r1, [sp, #0]
   1717a:	e7ff      	b.n	1717c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x26>
   1717c:	9802      	ldr	r0, [sp, #8]
   1717e:	9900      	ldr	r1, [sp, #0]
   17180:	4308      	orrs	r0, r1
    }
   17182:	b004      	add	sp, #16
   17184:	bd80      	pop	{r7, pc}

00017186 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>:
    fn to_usize() -> usize {
   17186:	b580      	push	{r7, lr}
   17188:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1718a:	f000 faf3 	bl	17774 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1718e:	9003      	str	r0, [sp, #12]
   17190:	e7ff      	b.n	17192 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0xc>
   17192:	9803      	ldr	r0, [sp, #12]
   17194:	f000 faf4 	bl	17780 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   17198:	9002      	str	r0, [sp, #8]
   1719a:	e7ff      	b.n	1719c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x16>
   1719c:	f000 f86b 	bl	17276 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>
   171a0:	9001      	str	r0, [sp, #4]
   171a2:	e7ff      	b.n	171a4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x1e>
   171a4:	9801      	ldr	r0, [sp, #4]
   171a6:	0041      	lsls	r1, r0, #1
   171a8:	9100      	str	r1, [sp, #0]
   171aa:	e7ff      	b.n	171ac <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x26>
   171ac:	9802      	ldr	r0, [sp, #8]
   171ae:	9900      	ldr	r1, [sp, #0]
   171b0:	4308      	orrs	r0, r1
    }
   171b2:	b004      	add	sp, #16
   171b4:	bd80      	pop	{r7, pc}

000171b6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E>:
    fn to_usize() -> usize {
   171b6:	b580      	push	{r7, lr}
   171b8:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   171ba:	f000 fadb 	bl	17774 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   171be:	9003      	str	r0, [sp, #12]
   171c0:	e7ff      	b.n	171c2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0xc>
   171c2:	9803      	ldr	r0, [sp, #12]
   171c4:	f000 fadc 	bl	17780 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   171c8:	9002      	str	r0, [sp, #8]
   171ca:	e7ff      	b.n	171cc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0x16>
   171cc:	f000 f8fb 	bl	173c6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE>
   171d0:	9001      	str	r0, [sp, #4]
   171d2:	e7ff      	b.n	171d4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0x1e>
   171d4:	9801      	ldr	r0, [sp, #4]
   171d6:	0041      	lsls	r1, r0, #1
   171d8:	9100      	str	r1, [sp, #0]
   171da:	e7ff      	b.n	171dc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0x26>
   171dc:	9802      	ldr	r0, [sp, #8]
   171de:	9900      	ldr	r1, [sp, #0]
   171e0:	4308      	orrs	r0, r1
    }
   171e2:	b004      	add	sp, #16
   171e4:	bd80      	pop	{r7, pc}

000171e6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>:
    fn to_usize() -> usize {
   171e6:	b580      	push	{r7, lr}
   171e8:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   171ea:	f000 fac3 	bl	17774 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   171ee:	9003      	str	r0, [sp, #12]
   171f0:	e7ff      	b.n	171f2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0xc>
   171f2:	9803      	ldr	r0, [sp, #12]
   171f4:	f000 fac4 	bl	17780 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   171f8:	9002      	str	r0, [sp, #8]
   171fa:	e7ff      	b.n	171fc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x16>
   171fc:	f000 f80b 	bl	17216 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>
   17200:	9001      	str	r0, [sp, #4]
   17202:	e7ff      	b.n	17204 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x1e>
   17204:	9801      	ldr	r0, [sp, #4]
   17206:	0041      	lsls	r1, r0, #1
   17208:	9100      	str	r1, [sp, #0]
   1720a:	e7ff      	b.n	1720c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x26>
   1720c:	9802      	ldr	r0, [sp, #8]
   1720e:	9900      	ldr	r1, [sp, #0]
   17210:	4308      	orrs	r0, r1
    }
   17212:	b004      	add	sp, #16
   17214:	bd80      	pop	{r7, pc}

00017216 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>:
    fn to_usize() -> usize {
   17216:	b580      	push	{r7, lr}
   17218:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1721a:	f000 faab 	bl	17774 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1721e:	9003      	str	r0, [sp, #12]
   17220:	e7ff      	b.n	17222 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0xc>
   17222:	9803      	ldr	r0, [sp, #12]
   17224:	f000 faac 	bl	17780 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   17228:	9002      	str	r0, [sp, #8]
   1722a:	e7ff      	b.n	1722c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x16>
   1722c:	f000 f89b 	bl	17366 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>
   17230:	9001      	str	r0, [sp, #4]
   17232:	e7ff      	b.n	17234 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x1e>
   17234:	9801      	ldr	r0, [sp, #4]
   17236:	0041      	lsls	r1, r0, #1
   17238:	9100      	str	r1, [sp, #0]
   1723a:	e7ff      	b.n	1723c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x26>
   1723c:	9802      	ldr	r0, [sp, #8]
   1723e:	9900      	ldr	r1, [sp, #0]
   17240:	4308      	orrs	r0, r1
    }
   17242:	b004      	add	sp, #16
   17244:	bd80      	pop	{r7, pc}

00017246 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>:
    fn to_usize() -> usize {
   17246:	b580      	push	{r7, lr}
   17248:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1724a:	f000 fa93 	bl	17774 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1724e:	9003      	str	r0, [sp, #12]
   17250:	e7ff      	b.n	17252 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0xc>
   17252:	9803      	ldr	r0, [sp, #12]
   17254:	f000 fa94 	bl	17780 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   17258:	9002      	str	r0, [sp, #8]
   1725a:	e7ff      	b.n	1725c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x16>
   1725c:	f7ff ff7b 	bl	17156 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>
   17260:	9001      	str	r0, [sp, #4]
   17262:	e7ff      	b.n	17264 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x1e>
   17264:	9801      	ldr	r0, [sp, #4]
   17266:	0041      	lsls	r1, r0, #1
   17268:	9100      	str	r1, [sp, #0]
   1726a:	e7ff      	b.n	1726c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x26>
   1726c:	9802      	ldr	r0, [sp, #8]
   1726e:	9900      	ldr	r1, [sp, #0]
   17270:	4308      	orrs	r0, r1
    }
   17272:	b004      	add	sp, #16
   17274:	bd80      	pop	{r7, pc}

00017276 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>:
    fn to_usize() -> usize {
   17276:	b580      	push	{r7, lr}
   17278:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1727a:	f000 fa7b 	bl	17774 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1727e:	9003      	str	r0, [sp, #12]
   17280:	e7ff      	b.n	17282 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0xc>
   17282:	9803      	ldr	r0, [sp, #12]
   17284:	f000 fa7c 	bl	17780 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   17288:	9002      	str	r0, [sp, #8]
   1728a:	e7ff      	b.n	1728c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x16>
   1728c:	f000 f823 	bl	172d6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>
   17290:	9001      	str	r0, [sp, #4]
   17292:	e7ff      	b.n	17294 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x1e>
   17294:	9801      	ldr	r0, [sp, #4]
   17296:	0041      	lsls	r1, r0, #1
   17298:	9100      	str	r1, [sp, #0]
   1729a:	e7ff      	b.n	1729c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x26>
   1729c:	9802      	ldr	r0, [sp, #8]
   1729e:	9900      	ldr	r1, [sp, #0]
   172a0:	4308      	orrs	r0, r1
    }
   172a2:	b004      	add	sp, #16
   172a4:	bd80      	pop	{r7, pc}

000172a6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>:
    fn to_usize() -> usize {
   172a6:	b580      	push	{r7, lr}
   172a8:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   172aa:	f000 fa63 	bl	17774 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   172ae:	9003      	str	r0, [sp, #12]
   172b0:	e7ff      	b.n	172b2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0xc>
   172b2:	9803      	ldr	r0, [sp, #12]
   172b4:	f000 fa64 	bl	17780 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   172b8:	9002      	str	r0, [sp, #8]
   172ba:	e7ff      	b.n	172bc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x16>
   172bc:	f000 f86b 	bl	17396 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>
   172c0:	9001      	str	r0, [sp, #4]
   172c2:	e7ff      	b.n	172c4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x1e>
   172c4:	9801      	ldr	r0, [sp, #4]
   172c6:	0041      	lsls	r1, r0, #1
   172c8:	9100      	str	r1, [sp, #0]
   172ca:	e7ff      	b.n	172cc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x26>
   172cc:	9802      	ldr	r0, [sp, #8]
   172ce:	9900      	ldr	r1, [sp, #0]
   172d0:	4308      	orrs	r0, r1
    }
   172d2:	b004      	add	sp, #16
   172d4:	bd80      	pop	{r7, pc}

000172d6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>:
    fn to_usize() -> usize {
   172d6:	b580      	push	{r7, lr}
   172d8:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   172da:	f000 fa4b 	bl	17774 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   172de:	9003      	str	r0, [sp, #12]
   172e0:	e7ff      	b.n	172e2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0xc>
   172e2:	9803      	ldr	r0, [sp, #12]
   172e4:	f000 fa4c 	bl	17780 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   172e8:	9002      	str	r0, [sp, #8]
   172ea:	e7ff      	b.n	172ec <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x16>
   172ec:	f000 f823 	bl	17336 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>
   172f0:	9001      	str	r0, [sp, #4]
   172f2:	e7ff      	b.n	172f4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x1e>
   172f4:	9801      	ldr	r0, [sp, #4]
   172f6:	0041      	lsls	r1, r0, #1
   172f8:	9100      	str	r1, [sp, #0]
   172fa:	e7ff      	b.n	172fc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x26>
   172fc:	9802      	ldr	r0, [sp, #8]
   172fe:	9900      	ldr	r1, [sp, #0]
   17300:	4308      	orrs	r0, r1
    }
   17302:	b004      	add	sp, #16
   17304:	bd80      	pop	{r7, pc}

00017306 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>:
    fn to_usize() -> usize {
   17306:	b580      	push	{r7, lr}
   17308:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1730a:	f000 fa35 	bl	17778 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>
   1730e:	9003      	str	r0, [sp, #12]
   17310:	e7ff      	b.n	17312 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0xc>
   17312:	9803      	ldr	r0, [sp, #12]
   17314:	f000 fa34 	bl	17780 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   17318:	9002      	str	r0, [sp, #8]
   1731a:	e7ff      	b.n	1731c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x16>
   1731c:	f000 fa2e 	bl	1777c <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>
   17320:	9001      	str	r0, [sp, #4]
   17322:	e7ff      	b.n	17324 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x1e>
   17324:	9801      	ldr	r0, [sp, #4]
   17326:	0041      	lsls	r1, r0, #1
   17328:	9100      	str	r1, [sp, #0]
   1732a:	e7ff      	b.n	1732c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x26>
   1732c:	9802      	ldr	r0, [sp, #8]
   1732e:	9900      	ldr	r1, [sp, #0]
   17330:	4308      	orrs	r0, r1
    }
   17332:	b004      	add	sp, #16
   17334:	bd80      	pop	{r7, pc}

00017336 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>:
    fn to_usize() -> usize {
   17336:	b580      	push	{r7, lr}
   17338:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1733a:	f000 fa1b 	bl	17774 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1733e:	9003      	str	r0, [sp, #12]
   17340:	e7ff      	b.n	17342 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0xc>
   17342:	9803      	ldr	r0, [sp, #12]
   17344:	f000 fa1c 	bl	17780 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   17348:	9002      	str	r0, [sp, #8]
   1734a:	e7ff      	b.n	1734c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x16>
   1734c:	f7ff ff7b 	bl	17246 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>
   17350:	9001      	str	r0, [sp, #4]
   17352:	e7ff      	b.n	17354 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x1e>
   17354:	9801      	ldr	r0, [sp, #4]
   17356:	0041      	lsls	r1, r0, #1
   17358:	9100      	str	r1, [sp, #0]
   1735a:	e7ff      	b.n	1735c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x26>
   1735c:	9802      	ldr	r0, [sp, #8]
   1735e:	9900      	ldr	r1, [sp, #0]
   17360:	4308      	orrs	r0, r1
    }
   17362:	b004      	add	sp, #16
   17364:	bd80      	pop	{r7, pc}

00017366 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>:
    fn to_usize() -> usize {
   17366:	b580      	push	{r7, lr}
   17368:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1736a:	f000 fa03 	bl	17774 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1736e:	9003      	str	r0, [sp, #12]
   17370:	e7ff      	b.n	17372 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0xc>
   17372:	9803      	ldr	r0, [sp, #12]
   17374:	f000 fa04 	bl	17780 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   17378:	9002      	str	r0, [sp, #8]
   1737a:	e7ff      	b.n	1737c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x16>
   1737c:	f7ff ff03 	bl	17186 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>
   17380:	9001      	str	r0, [sp, #4]
   17382:	e7ff      	b.n	17384 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x1e>
   17384:	9801      	ldr	r0, [sp, #4]
   17386:	0041      	lsls	r1, r0, #1
   17388:	9100      	str	r1, [sp, #0]
   1738a:	e7ff      	b.n	1738c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x26>
   1738c:	9802      	ldr	r0, [sp, #8]
   1738e:	9900      	ldr	r1, [sp, #0]
   17390:	4308      	orrs	r0, r1
    }
   17392:	b004      	add	sp, #16
   17394:	bd80      	pop	{r7, pc}

00017396 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>:
    fn to_usize() -> usize {
   17396:	b580      	push	{r7, lr}
   17398:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1739a:	f000 f9eb 	bl	17774 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1739e:	9003      	str	r0, [sp, #12]
   173a0:	e7ff      	b.n	173a2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0xc>
   173a2:	9803      	ldr	r0, [sp, #12]
   173a4:	f000 f9ec 	bl	17780 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   173a8:	9002      	str	r0, [sp, #8]
   173aa:	e7ff      	b.n	173ac <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x16>
   173ac:	f7ff ff1b 	bl	171e6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>
   173b0:	9001      	str	r0, [sp, #4]
   173b2:	e7ff      	b.n	173b4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x1e>
   173b4:	9801      	ldr	r0, [sp, #4]
   173b6:	0041      	lsls	r1, r0, #1
   173b8:	9100      	str	r1, [sp, #0]
   173ba:	e7ff      	b.n	173bc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x26>
   173bc:	9802      	ldr	r0, [sp, #8]
   173be:	9900      	ldr	r1, [sp, #0]
   173c0:	4308      	orrs	r0, r1
    }
   173c2:	b004      	add	sp, #16
   173c4:	bd80      	pop	{r7, pc}

000173c6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE>:
    fn to_usize() -> usize {
   173c6:	b580      	push	{r7, lr}
   173c8:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   173ca:	f000 f9d3 	bl	17774 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   173ce:	9003      	str	r0, [sp, #12]
   173d0:	e7ff      	b.n	173d2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0xc>
   173d2:	9803      	ldr	r0, [sp, #12]
   173d4:	f000 f9d4 	bl	17780 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   173d8:	9002      	str	r0, [sp, #8]
   173da:	e7ff      	b.n	173dc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x16>
   173dc:	f7ff ff63 	bl	172a6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>
   173e0:	9001      	str	r0, [sp, #4]
   173e2:	e7ff      	b.n	173e4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x1e>
   173e4:	9801      	ldr	r0, [sp, #4]
   173e6:	0041      	lsls	r1, r0, #1
   173e8:	9100      	str	r1, [sp, #0]
   173ea:	e7ff      	b.n	173ec <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x26>
   173ec:	9802      	ldr	r0, [sp, #8]
   173ee:	9900      	ldr	r1, [sp, #0]
   173f0:	4308      	orrs	r0, r1
    }
   173f2:	b004      	add	sp, #16
   173f4:	bd80      	pop	{r7, pc}

000173f6 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>:
impl Bit for B0 {
    const U8: u8 = 0;
    const BOOL: bool = false;

    #[inline]
    fn to_u8() -> u8 {
   173f6:	2000      	movs	r0, #0
        0
    }
   173f8:	4770      	bx	lr

000173fa <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>:
impl Bit for B1 {
    const U8: u8 = 1;
    const BOOL: bool = true;

    #[inline]
    fn to_u8() -> u8 {
   173fa:	2001      	movs	r0, #1
        1
    }
   173fc:	4770      	bx	lr

000173fe <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>:
   173fe:	b580      	push	{r7, lr}
   17400:	b084      	sub	sp, #16
   17402:	9002      	str	r0, [sp, #8]
   17404:	9103      	str	r1, [sp, #12]
   17406:	f000 f80f 	bl	17428 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE>
   1740a:	9001      	str	r0, [sp, #4]
   1740c:	e7ff      	b.n	1740e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E+0x10>
   1740e:	9801      	ldr	r0, [sp, #4]
   17410:	b004      	add	sp, #16
   17412:	bd80      	pop	{r7, pc}

00017414 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E>:
   17414:	b580      	push	{r7, lr}
   17416:	b082      	sub	sp, #8
   17418:	9001      	str	r0, [sp, #4]
   1741a:	f000 f873 	bl	17504 <_ZN4core3ptr4read17h27a035d1812d8297E>
   1741e:	9000      	str	r0, [sp, #0]
   17420:	e7ff      	b.n	17422 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E+0xe>
   17422:	9800      	ldr	r0, [sp, #0]
   17424:	b002      	add	sp, #8
   17426:	bd80      	pop	{r7, pc}

00017428 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE>:
   17428:	b084      	sub	sp, #16
   1742a:	9001      	str	r0, [sp, #4]
   1742c:	9102      	str	r1, [sp, #8]
   1742e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   17432:	9003      	str	r0, [sp, #12]
   17434:	9803      	ldr	r0, [sp, #12]
   17436:	9000      	str	r0, [sp, #0]
   17438:	e7ff      	b.n	1743a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE+0x12>
   1743a:	9800      	ldr	r0, [sp, #0]
   1743c:	b004      	add	sp, #16
   1743e:	4770      	bx	lr

00017440 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>:
   17440:	b082      	sub	sp, #8
   17442:	9001      	str	r0, [sp, #4]
   17444:	9000      	str	r0, [sp, #0]
   17446:	e7ff      	b.n	17448 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E+0x8>
   17448:	9800      	ldr	r0, [sp, #0]
   1744a:	fab0 f180 	clz	r1, r0
   1744e:	0948      	lsrs	r0, r1, #5
   17450:	b002      	add	sp, #8
   17452:	4770      	bx	lr

00017454 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE>:
   17454:	b580      	push	{r7, lr}
   17456:	b088      	sub	sp, #32
   17458:	9006      	str	r0, [sp, #24]
   1745a:	9107      	str	r1, [sp, #28]
   1745c:	9004      	str	r0, [sp, #16]
   1745e:	4608      	mov	r0, r1
   17460:	9103      	str	r1, [sp, #12]
   17462:	f001 f948 	bl	186f6 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   17466:	9002      	str	r0, [sp, #8]
   17468:	e7ff      	b.n	1746a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x16>
   1746a:	9802      	ldr	r0, [sp, #8]
   1746c:	07c1      	lsls	r1, r0, #31
   1746e:	2900      	cmp	r1, #0
   17470:	d105      	bne.n	1747e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x2a>
   17472:	e7ff      	b.n	17474 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x20>
   17474:	9803      	ldr	r0, [sp, #12]
   17476:	f001 f942 	bl	186fe <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   1747a:	9001      	str	r0, [sp, #4]
   1747c:	e007      	b.n	1748e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x3a>
   1747e:	9804      	ldr	r0, [sp, #16]
   17480:	9903      	ldr	r1, [sp, #12]
   17482:	f001 fea4 	bl	191ce <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E>
   17486:	f88d 0017 	strb.w	r0, [sp, #23]
   1748a:	e7ff      	b.n	1748c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x38>
   1748c:	e015      	b.n	174ba <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x66>
   1748e:	9801      	ldr	r0, [sp, #4]
   17490:	07c1      	lsls	r1, r0, #31
   17492:	2900      	cmp	r1, #0
   17494:	d107      	bne.n	174a6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x52>
   17496:	e7ff      	b.n	17498 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x44>
   17498:	9804      	ldr	r0, [sp, #16]
   1749a:	9903      	ldr	r1, [sp, #12]
   1749c:	f002 f868 	bl	19570 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E>
   174a0:	f88d 0017 	strb.w	r0, [sp, #23]
   174a4:	e007      	b.n	174b6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x62>
   174a6:	9804      	ldr	r0, [sp, #16]
   174a8:	9903      	ldr	r1, [sp, #12]
   174aa:	f001 feef 	bl	1928c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE>
   174ae:	f88d 0017 	strb.w	r0, [sp, #23]
   174b2:	e7ff      	b.n	174b4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x60>
   174b4:	e000      	b.n	174b8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x64>
   174b6:	e7ff      	b.n	174b8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x64>
   174b8:	e7ff      	b.n	174ba <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x66>
   174ba:	f89d 0017 	ldrb.w	r0, [sp, #23]
   174be:	b008      	add	sp, #32
   174c0:	bd80      	pop	{r7, pc}

000174c2 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>:
   174c2:	b081      	sub	sp, #4
   174c4:	4601      	mov	r1, r0
   174c6:	f88d 0003 	strb.w	r0, [sp, #3]
   174ca:	b2c0      	uxtb	r0, r0
   174cc:	b001      	add	sp, #4
   174ce:	4770      	bx	lr

000174d0 <_ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E>:
   174d0:	b086      	sub	sp, #24
   174d2:	9004      	str	r0, [sp, #16]
   174d4:	9105      	str	r1, [sp, #20]
   174d6:	9002      	str	r0, [sp, #8]
   174d8:	9103      	str	r1, [sp, #12]
   174da:	9802      	ldr	r0, [sp, #8]
   174dc:	9903      	ldr	r1, [sp, #12]
   174de:	9000      	str	r0, [sp, #0]
   174e0:	9101      	str	r1, [sp, #4]
   174e2:	9800      	ldr	r0, [sp, #0]
   174e4:	9901      	ldr	r1, [sp, #4]
   174e6:	b006      	add	sp, #24
   174e8:	4770      	bx	lr

000174ea <_ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE>:
   174ea:	b086      	sub	sp, #24
   174ec:	9004      	str	r0, [sp, #16]
   174ee:	9105      	str	r1, [sp, #20]
   174f0:	9002      	str	r0, [sp, #8]
   174f2:	9103      	str	r1, [sp, #12]
   174f4:	9802      	ldr	r0, [sp, #8]
   174f6:	9903      	ldr	r1, [sp, #12]
   174f8:	9000      	str	r0, [sp, #0]
   174fa:	9101      	str	r1, [sp, #4]
   174fc:	9800      	ldr	r0, [sp, #0]
   174fe:	9901      	ldr	r1, [sp, #4]
   17500:	b006      	add	sp, #24
   17502:	4770      	bx	lr

00017504 <_ZN4core3ptr4read17h27a035d1812d8297E>:
   17504:	b580      	push	{r7, lr}
   17506:	b088      	sub	sp, #32
   17508:	9003      	str	r0, [sp, #12]
   1750a:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   1750e:	f8ad 100a 	strh.w	r1, [sp, #10]
   17512:	9001      	str	r0, [sp, #4]
   17514:	e7ff      	b.n	17516 <_ZN4core3ptr4read17h27a035d1812d8297E+0x12>
   17516:	f10d 000a 	add.w	r0, sp, #10
   1751a:	9006      	str	r0, [sp, #24]
   1751c:	9007      	str	r0, [sp, #28]
   1751e:	e7ff      	b.n	17520 <_ZN4core3ptr4read17h27a035d1812d8297E+0x1c>
   17520:	f10d 010a 	add.w	r1, sp, #10
   17524:	2201      	movs	r2, #1
   17526:	9801      	ldr	r0, [sp, #4]
   17528:	f000 f931 	bl	1778e <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E>
   1752c:	e7ff      	b.n	1752e <_ZN4core3ptr4read17h27a035d1812d8297E+0x2a>
   1752e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   17532:	4601      	mov	r1, r0
   17534:	f8ad 0014 	strh.w	r0, [sp, #20]
   17538:	f8ad 0016 	strh.w	r0, [sp, #22]
   1753c:	9100      	str	r1, [sp, #0]
   1753e:	e7ff      	b.n	17540 <_ZN4core3ptr4read17h27a035d1812d8297E+0x3c>
   17540:	9800      	ldr	r0, [sp, #0]
   17542:	b008      	add	sp, #32
   17544:	bd80      	pop	{r7, pc}

00017546 <_ZN4core3ptr5write17h147d4643d861e927E>:
   17546:	b082      	sub	sp, #8
   17548:	460a      	mov	r2, r1
   1754a:	9000      	str	r0, [sp, #0]
   1754c:	f8ad 1006 	strh.w	r1, [sp, #6]
   17550:	8001      	strh	r1, [r0, #0]
   17552:	b002      	add	sp, #8
   17554:	4770      	bx	lr

00017556 <_ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE>:
   17556:	b580      	push	{r7, lr}
   17558:	b08c      	sub	sp, #48	; 0x30
   1755a:	9005      	str	r0, [sp, #20]
   1755c:	9106      	str	r1, [sp, #24]
   1755e:	9207      	str	r2, [sp, #28]
   17560:	9008      	str	r0, [sp, #32]
   17562:	9109      	str	r1, [sp, #36]	; 0x24
   17564:	2301      	movs	r3, #1
   17566:	930b      	str	r3, [sp, #44]	; 0x2c
   17568:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1756a:	9204      	str	r2, [sp, #16]
   1756c:	9103      	str	r1, [sp, #12]
   1756e:	9002      	str	r0, [sp, #8]
   17570:	9301      	str	r3, [sp, #4]
   17572:	e7ff      	b.n	17574 <_ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE+0x1e>
   17574:	9801      	ldr	r0, [sp, #4]
   17576:	9904      	ldr	r1, [sp, #16]
   17578:	fb00 f201 	mul.w	r2, r0, r1
   1757c:	920a      	str	r2, [sp, #40]	; 0x28
   1757e:	9802      	ldr	r0, [sp, #8]
   17580:	9903      	ldr	r1, [sp, #12]
   17582:	f000 f850 	bl	17626 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE>
   17586:	e7ff      	b.n	17588 <_ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE+0x32>
   17588:	b00c      	add	sp, #48	; 0x30
   1758a:	bd80      	pop	{r7, pc}

0001758c <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE>:
   1758c:	b580      	push	{r7, lr}
   1758e:	b088      	sub	sp, #32
   17590:	9004      	str	r0, [sp, #16]
   17592:	9105      	str	r1, [sp, #20]
   17594:	2201      	movs	r2, #1
   17596:	9207      	str	r2, [sp, #28]
   17598:	9a07      	ldr	r2, [sp, #28]
   1759a:	9103      	str	r1, [sp, #12]
   1759c:	9002      	str	r0, [sp, #8]
   1759e:	9201      	str	r2, [sp, #4]
   175a0:	e7ff      	b.n	175a2 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x16>
   175a2:	9801      	ldr	r0, [sp, #4]
   175a4:	2820      	cmp	r0, #32
   175a6:	d306      	bcc.n	175b6 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x2a>
   175a8:	e7ff      	b.n	175aa <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x1e>
   175aa:	2201      	movs	r2, #1
   175ac:	9802      	ldr	r0, [sp, #8]
   175ae:	9903      	ldr	r1, [sp, #12]
   175b0:	f7ff ffd1 	bl	17556 <_ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE>
   175b4:	e013      	b.n	175de <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x52>
   175b6:	9802      	ldr	r0, [sp, #8]
   175b8:	f000 f814 	bl	175e4 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE>
   175bc:	4601      	mov	r1, r0
   175be:	f88d 001b 	strb.w	r0, [sp, #27]
   175c2:	9100      	str	r1, [sp, #0]
   175c4:	e7ff      	b.n	175c6 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x3a>
   175c6:	2201      	movs	r2, #1
   175c8:	9803      	ldr	r0, [sp, #12]
   175ca:	9902      	ldr	r1, [sp, #8]
   175cc:	f7fa fabf 	bl	11b4e <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   175d0:	e7ff      	b.n	175d2 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x46>
   175d2:	9803      	ldr	r0, [sp, #12]
   175d4:	9900      	ldr	r1, [sp, #0]
   175d6:	f7f1 fd63 	bl	90a0 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   175da:	e7ff      	b.n	175dc <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x50>
   175dc:	e000      	b.n	175e0 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x54>
   175de:	e7ff      	b.n	175e0 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x54>
   175e0:	b008      	add	sp, #32
   175e2:	bd80      	pop	{r7, pc}

000175e4 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE>:
   175e4:	b580      	push	{r7, lr}
   175e6:	b088      	sub	sp, #32
   175e8:	9004      	str	r0, [sp, #16]
   175ea:	f89d 1015 	ldrb.w	r1, [sp, #21]
   175ee:	f88d 100f 	strb.w	r1, [sp, #15]
   175f2:	9002      	str	r0, [sp, #8]
   175f4:	e7ff      	b.n	175f6 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE+0x12>
   175f6:	f10d 000f 	add.w	r0, sp, #15
   175fa:	9006      	str	r0, [sp, #24]
   175fc:	9007      	str	r0, [sp, #28]
   175fe:	e7ff      	b.n	17600 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE+0x1c>
   17600:	f10d 010f 	add.w	r1, sp, #15
   17604:	2201      	movs	r2, #1
   17606:	9802      	ldr	r0, [sp, #8]
   17608:	f7fa faa1 	bl	11b4e <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1760c:	e7ff      	b.n	1760e <_ZN4core3ptr4read17h38cf3848f1a0f2ccE+0x2a>
   1760e:	f89d 000f 	ldrb.w	r0, [sp, #15]
   17612:	4601      	mov	r1, r0
   17614:	f88d 0016 	strb.w	r0, [sp, #22]
   17618:	f88d 0017 	strb.w	r0, [sp, #23]
   1761c:	9101      	str	r1, [sp, #4]
   1761e:	e7ff      	b.n	17620 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE+0x3c>
   17620:	9801      	ldr	r0, [sp, #4]
   17622:	b008      	add	sp, #32
   17624:	bd80      	pop	{r7, pc}

00017626 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE>:
   17626:	b5d0      	push	{r4, r6, r7, lr}
   17628:	af02      	add	r7, sp, #8
   1762a:	b0b4      	sub	sp, #208	; 0xd0
   1762c:	466c      	mov	r4, sp
   1762e:	f36f 0404 	bfc	r4, #0, #5
   17632:	46a5      	mov	sp, r4
   17634:	9024      	str	r0, [sp, #144]	; 0x90
   17636:	9125      	str	r1, [sp, #148]	; 0x94
   17638:	9226      	str	r2, [sp, #152]	; 0x98
   1763a:	2320      	movs	r3, #32
   1763c:	932f      	str	r3, [sp, #188]	; 0xbc
   1763e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   17640:	9327      	str	r3, [sp, #156]	; 0x9c
   17642:	920e      	str	r2, [sp, #56]	; 0x38
   17644:	910d      	str	r1, [sp, #52]	; 0x34
   17646:	900c      	str	r0, [sp, #48]	; 0x30
   17648:	930b      	str	r3, [sp, #44]	; 0x2c
   1764a:	e7ff      	b.n	1764c <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x26>
   1764c:	2000      	movs	r0, #0
   1764e:	900f      	str	r0, [sp, #60]	; 0x3c
   17650:	e7ff      	b.n	17652 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x2c>
   17652:	980f      	ldr	r0, [sp, #60]	; 0x3c
   17654:	990b      	ldr	r1, [sp, #44]	; 0x2c
   17656:	4408      	add	r0, r1
   17658:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1765a:	4290      	cmp	r0, r2
   1765c:	d905      	bls.n	1766a <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x44>
   1765e:	e7ff      	b.n	17660 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x3a>
   17660:	980f      	ldr	r0, [sp, #60]	; 0x3c
   17662:	990e      	ldr	r1, [sp, #56]	; 0x38
   17664:	4288      	cmp	r0, r1
   17666:	d334      	bcc.n	176d2 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xac>
   17668:	e067      	b.n	1773a <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x114>
   1766a:	e7ff      	b.n	1766c <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x46>
   1766c:	a810      	add	r0, sp, #64	; 0x40
   1766e:	9032      	str	r0, [sp, #200]	; 0xc8
   17670:	9033      	str	r0, [sp, #204]	; 0xcc
   17672:	e7ff      	b.n	17674 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x4e>
   17674:	a810      	add	r0, sp, #64	; 0x40
   17676:	4601      	mov	r1, r0
   17678:	9028      	str	r0, [sp, #160]	; 0xa0
   1767a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1767c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1767e:	900a      	str	r0, [sp, #40]	; 0x28
   17680:	4610      	mov	r0, r2
   17682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17684:	9109      	str	r1, [sp, #36]	; 0x24
   17686:	4619      	mov	r1, r3
   17688:	f7fa fbc5 	bl	11e16 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   1768c:	4601      	mov	r1, r0
   1768e:	9029      	str	r0, [sp, #164]	; 0xa4
   17690:	9108      	str	r1, [sp, #32]
   17692:	e7ff      	b.n	17694 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x6e>
   17694:	990f      	ldr	r1, [sp, #60]	; 0x3c
   17696:	980d      	ldr	r0, [sp, #52]	; 0x34
   17698:	f7fa fbbd 	bl	11e16 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   1769c:	4601      	mov	r1, r0
   1769e:	902a      	str	r0, [sp, #168]	; 0xa8
   176a0:	9107      	str	r1, [sp, #28]
   176a2:	e7ff      	b.n	176a4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x7e>
   176a4:	9808      	ldr	r0, [sp, #32]
   176a6:	9909      	ldr	r1, [sp, #36]	; 0x24
   176a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   176aa:	f7fa fa50 	bl	11b4e <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   176ae:	e7ff      	b.n	176b0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x8a>
   176b0:	9807      	ldr	r0, [sp, #28]
   176b2:	9908      	ldr	r1, [sp, #32]
   176b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   176b6:	f7fa fa4a 	bl	11b4e <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   176ba:	e7ff      	b.n	176bc <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x96>
   176bc:	9809      	ldr	r0, [sp, #36]	; 0x24
   176be:	9907      	ldr	r1, [sp, #28]
   176c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   176c2:	f7fa fa44 	bl	11b4e <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   176c6:	e7ff      	b.n	176c8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xa2>
   176c8:	980f      	ldr	r0, [sp, #60]	; 0x3c
   176ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
   176cc:	4408      	add	r0, r1
   176ce:	900f      	str	r0, [sp, #60]	; 0x3c
   176d0:	e7bf      	b.n	17652 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x2c>
   176d2:	e7ff      	b.n	176d4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xae>
   176d4:	980f      	ldr	r0, [sp, #60]	; 0x3c
   176d6:	990e      	ldr	r1, [sp, #56]	; 0x38
   176d8:	1a08      	subs	r0, r1, r0
   176da:	4602      	mov	r2, r0
   176dc:	902b      	str	r0, [sp, #172]	; 0xac
   176de:	a81c      	add	r0, sp, #112	; 0x70
   176e0:	9030      	str	r0, [sp, #192]	; 0xc0
   176e2:	9031      	str	r0, [sp, #196]	; 0xc4
   176e4:	9206      	str	r2, [sp, #24]
   176e6:	9005      	str	r0, [sp, #20]
   176e8:	e7ff      	b.n	176ea <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xc4>
   176ea:	9805      	ldr	r0, [sp, #20]
   176ec:	9905      	ldr	r1, [sp, #20]
   176ee:	912c      	str	r1, [sp, #176]	; 0xb0
   176f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   176f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   176f4:	9004      	str	r0, [sp, #16]
   176f6:	4610      	mov	r0, r2
   176f8:	f7fa fb8d 	bl	11e16 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   176fc:	4601      	mov	r1, r0
   176fe:	902d      	str	r0, [sp, #180]	; 0xb4
   17700:	9103      	str	r1, [sp, #12]
   17702:	e7ff      	b.n	17704 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xde>
   17704:	990f      	ldr	r1, [sp, #60]	; 0x3c
   17706:	980d      	ldr	r0, [sp, #52]	; 0x34
   17708:	f7fa fb85 	bl	11e16 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   1770c:	4601      	mov	r1, r0
   1770e:	902e      	str	r0, [sp, #184]	; 0xb8
   17710:	9102      	str	r1, [sp, #8]
   17712:	e7ff      	b.n	17714 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xee>
   17714:	9803      	ldr	r0, [sp, #12]
   17716:	9904      	ldr	r1, [sp, #16]
   17718:	9a06      	ldr	r2, [sp, #24]
   1771a:	f7fa fa18 	bl	11b4e <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1771e:	e7ff      	b.n	17720 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xfa>
   17720:	9802      	ldr	r0, [sp, #8]
   17722:	9903      	ldr	r1, [sp, #12]
   17724:	9a06      	ldr	r2, [sp, #24]
   17726:	f7fa fa12 	bl	11b4e <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1772a:	e7ff      	b.n	1772c <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x106>
   1772c:	9804      	ldr	r0, [sp, #16]
   1772e:	9902      	ldr	r1, [sp, #8]
   17730:	9a06      	ldr	r2, [sp, #24]
   17732:	f7fa fa0c 	bl	11b4e <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   17736:	e7ff      	b.n	17738 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x112>
   17738:	e7ff      	b.n	1773a <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x114>
   1773a:	f1a7 0408 	sub.w	r4, r7, #8
   1773e:	46a5      	mov	sp, r4
   17740:	bdd0      	pop	{r4, r6, r7, pc}

00017742 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE>:
   17742:	b083      	sub	sp, #12
   17744:	9002      	str	r0, [sp, #8]
   17746:	9000      	str	r0, [sp, #0]
   17748:	e7ff      	b.n	1774a <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x8>
   1774a:	9800      	ldr	r0, [sp, #0]
   1774c:	28ff      	cmp	r0, #255	; 0xff
   1774e:	d807      	bhi.n	17760 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x1e>
   17750:	e7ff      	b.n	17752 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x10>
   17752:	9800      	ldr	r0, [sp, #0]
   17754:	f88d 0005 	strb.w	r0, [sp, #5]
   17758:	2100      	movs	r1, #0
   1775a:	f88d 1004 	strb.w	r1, [sp, #4]
   1775e:	e003      	b.n	17768 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x26>
   17760:	2001      	movs	r0, #1
   17762:	f88d 0004 	strb.w	r0, [sp, #4]
   17766:	e7ff      	b.n	17768 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x26>
   17768:	f89d 0004 	ldrb.w	r0, [sp, #4]
   1776c:	f89d 1005 	ldrb.w	r1, [sp, #5]
   17770:	b003      	add	sp, #12
   17772:	4770      	bx	lr

00017774 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>:
    fn to_u8() -> u8 {
   17774:	2000      	movs	r0, #0
    }
   17776:	4770      	bx	lr

00017778 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>:
    fn to_u8() -> u8 {
   17778:	2001      	movs	r0, #1
    }
   1777a:	4770      	bx	lr

0001777c <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>:
    fn to_usize() -> usize {
   1777c:	2000      	movs	r0, #0
    }
   1777e:	4770      	bx	lr

00017780 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>:
   17780:	b081      	sub	sp, #4
   17782:	4601      	mov	r1, r0
   17784:	f88d 0003 	strb.w	r0, [sp, #3]
   17788:	b2c0      	uxtb	r0, r0
   1778a:	b001      	add	sp, #4
   1778c:	4770      	bx	lr

0001778e <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E>:
   1778e:	b580      	push	{r7, lr}
   17790:	b084      	sub	sp, #16
   17792:	9001      	str	r0, [sp, #4]
   17794:	9102      	str	r1, [sp, #8]
   17796:	9203      	str	r2, [sp, #12]
   17798:	0052      	lsls	r2, r2, #1
   1779a:	9000      	str	r0, [sp, #0]
   1779c:	4608      	mov	r0, r1
   1779e:	9900      	ldr	r1, [sp, #0]
   177a0:	f006 fcdc 	bl	1e15c <__aeabi_memcpy>
   177a4:	e7ff      	b.n	177a6 <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E+0x18>
   177a6:	b004      	add	sp, #16
   177a8:	bd80      	pop	{r7, pc}

000177aa <_ZN4core3ptr13drop_in_place17h000c7c147ade2111E>:
   177aa:	4770      	bx	lr

000177ac <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE>:
   177ac:	b5b0      	push	{r4, r5, r7, lr}
   177ae:	b086      	sub	sp, #24
   177b0:	460c      	mov	r4, r1
   177b2:	4605      	mov	r5, r0
   177b4:	f001 fb87 	bl	18ec6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>
   177b8:	b9a8      	cbnz	r0, 177e6 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x3a>
   177ba:	f241 3354 	movw	r3, #4948	; 0x1354
   177be:	2200      	movs	r2, #0
   177c0:	f2c0 0302 	movt	r3, #2
   177c4:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   177c8:	9205      	str	r2, [sp, #20]
   177ca:	9304      	str	r3, [sp, #16]
   177cc:	e9cd 2202 	strd	r2, r2, [sp, #8]
   177d0:	2201      	movs	r2, #1
   177d2:	9201      	str	r2, [sp, #4]
   177d4:	f241 4218 	movw	r2, #5144	; 0x1418
   177d8:	f2c0 0202 	movt	r2, #2
   177dc:	9200      	str	r2, [sp, #0]
   177de:	466a      	mov	r2, sp
   177e0:	f000 fbe0 	bl	17fa4 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   177e4:	b110      	cbz	r0, 177ec <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x40>
   177e6:	2001      	movs	r0, #1
   177e8:	b006      	add	sp, #24
   177ea:	bdb0      	pop	{r4, r5, r7, pc}
   177ec:	1d28      	adds	r0, r5, #4
   177ee:	4621      	mov	r1, r4
   177f0:	b006      	add	sp, #24
   177f2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
   177f6:	f001 bb66 	b.w	18ec6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>

000177fa <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE>:
   177fa:	f642 20e1 	movw	r0, #10977	; 0x2ae1
   177fe:	f243 6134 	movw	r1, #13876	; 0x3634
   17802:	f6c9 405d 	movt	r0, #40029	; 0x9c5d
   17806:	f6cd 0131 	movt	r1, #55345	; 0xd831
   1780a:	4770      	bx	lr

0001780c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>:
   1780c:	b570      	push	{r4, r5, r6, lr}
   1780e:	460e      	mov	r6, r1
   17810:	3909      	subs	r1, #9
   17812:	4604      	mov	r4, r0
   17814:	291e      	cmp	r1, #30
   17816:	d818      	bhi.n	1784a <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x3e>
   17818:	2002      	movs	r0, #2
   1781a:	2574      	movs	r5, #116	; 0x74
   1781c:	e8df f001 	tbb	[pc, r1]
   17820:	1c1c1019 	.word	0x1c1c1019
   17824:	1c1c1c29 	.word	0x1c1c1c29
   17828:	1c1c1c1c 	.word	0x1c1c1c1c
   1782c:	1c1c1c1c 	.word	0x1c1c1c1c
   17830:	1c1c1c1c 	.word	0x1c1c1c1c
   17834:	1c1c1c1c 	.word	0x1c1c1c1c
   17838:	1c1c171c 	.word	0x1c1c171c
   1783c:	00171c1c 	.word	0x00171c1c
   17840:	2002      	movs	r0, #2
   17842:	256e      	movs	r5, #110	; 0x6e
   17844:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   17848:	bd70      	pop	{r4, r5, r6, pc}
   1784a:	2e5c      	cmp	r6, #92	; 0x5c
   1784c:	d104      	bne.n	17858 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x4c>
   1784e:	2002      	movs	r0, #2
   17850:	4635      	mov	r5, r6
   17852:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   17856:	bd70      	pop	{r4, r5, r6, pc}
   17858:	2a00      	cmp	r2, #0
   1785a:	d040      	beq.n	178de <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   1785c:	f3c6 1083 	ubfx	r0, r6, #6, #4
   17860:	0ab1      	lsrs	r1, r6, #10
   17862:	f5b6 3ff6 	cmp.w	r6, #125952	; 0x1ec00
   17866:	d309      	bcc.n	1787c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x70>
   17868:	f5b1 7f60 	cmp.w	r1, #896	; 0x380
   1786c:	d137      	bne.n	178de <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   1786e:	211e      	movs	r1, #30
   17870:	e00b      	b.n	1788a <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x7e>
   17872:	2002      	movs	r0, #2
   17874:	2572      	movs	r5, #114	; 0x72
   17876:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   1787a:	bd70      	pop	{r4, r5, r6, pc}
   1787c:	f641 628c 	movw	r2, #7820	; 0x1e8c
   17880:	f2c0 0202 	movt	r2, #2
   17884:	5c51      	ldrb	r1, [r2, r1]
   17886:	291e      	cmp	r1, #30
   17888:	d842      	bhi.n	17910 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x104>
   1788a:	f641 7207 	movw	r2, #7943	; 0x1f07
   1788e:	f2c0 0202 	movt	r2, #2
   17892:	eb02 1101 	add.w	r1, r2, r1, lsl #4
   17896:	5c09      	ldrb	r1, [r1, r0]
   17898:	298b      	cmp	r1, #139	; 0x8b
   1789a:	d231      	bcs.n	17900 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xf4>
   1789c:	f242 00f8 	movw	r0, #8440	; 0x20f8
   178a0:	2301      	movs	r3, #1
   178a2:	f2c0 0002 	movt	r0, #2
   178a6:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   178aa:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
   178ae:	f006 013f 	and.w	r1, r6, #63	; 0x3f
   178b2:	f8d2 c004 	ldr.w	ip, [r2, #4]
   178b6:	fa03 f501 	lsl.w	r5, r3, r1
   178ba:	f1b1 0220 	subs.w	r2, r1, #32
   178be:	f1c1 0120 	rsb	r1, r1, #32
   178c2:	bf58      	it	pl
   178c4:	2500      	movpl	r5, #0
   178c6:	2a00      	cmp	r2, #0
   178c8:	ea00 0005 	and.w	r0, r0, r5
   178cc:	fa23 f101 	lsr.w	r1, r3, r1
   178d0:	bf58      	it	pl
   178d2:	fa03 f102 	lslpl.w	r1, r3, r2
   178d6:	ea01 010c 	and.w	r1, r1, ip
   178da:	4308      	orrs	r0, r1
   178dc:	d105      	bne.n	178ea <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   178de:	4630      	mov	r0, r6
   178e0:	f001 f9a5 	bl	18c2e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>
   178e4:	b108      	cbz	r0, 178ea <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   178e6:	2001      	movs	r0, #1
   178e8:	e7b2      	b.n	17850 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   178ea:	f046 0001 	orr.w	r0, r6, #1
   178ee:	2107      	movs	r1, #7
   178f0:	fab0 f080 	clz	r0, r0
   178f4:	f04f 0e05 	mov.w	lr, #5
   178f8:	ea81 0c90 	eor.w	ip, r1, r0, lsr #2
   178fc:	2003      	movs	r0, #3
   178fe:	e7a7      	b.n	17850 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   17900:	f641 607c 	movw	r0, #7804	; 0x1e7c
   17904:	228b      	movs	r2, #139	; 0x8b
   17906:	f2c0 0002 	movt	r0, #2
   1790a:	f000 f869 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1790e:	defe      	udf	#254	; 0xfe
   17910:	f641 606c 	movw	r0, #7788	; 0x1e6c
   17914:	221f      	movs	r2, #31
   17916:	f2c0 0002 	movt	r0, #2
   1791a:	f000 f861 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1791e:	defe      	udf	#254	; 0xfe

00017920 <_ZN4core6option13expect_failed17had6579abaad447b4E>:
   17920:	b08a      	sub	sp, #40	; 0x28
   17922:	e9cd 0100 	strd	r0, r1, [sp]
   17926:	2001      	movs	r0, #1
   17928:	a908      	add	r1, sp, #32
   1792a:	9007      	str	r0, [sp, #28]
   1792c:	9106      	str	r1, [sp, #24]
   1792e:	2100      	movs	r1, #0
   17930:	9105      	str	r1, [sp, #20]
   17932:	e9cd 0103 	strd	r0, r1, [sp, #12]
   17936:	f241 501c 	movw	r0, #5404	; 0x151c
   1793a:	f2c0 0002 	movt	r0, #2
   1793e:	4611      	mov	r1, r2
   17940:	9002      	str	r0, [sp, #8]
   17942:	f649 0023 	movw	r0, #38947	; 0x9823
   17946:	f2c0 0001 	movt	r0, #1
   1794a:	9009      	str	r0, [sp, #36]	; 0x24
   1794c:	4668      	mov	r0, sp
   1794e:	9008      	str	r0, [sp, #32]
   17950:	a802      	add	r0, sp, #8
   17952:	f000 f865 	bl	17a20 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   17956:	defe      	udf	#254	; 0xfe

00017958 <_ZN4core6option18expect_none_failed17h54d938081af97677E>:
   17958:	b08e      	sub	sp, #56	; 0x38
   1795a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   1795e:	2002      	movs	r0, #2
   17960:	a90a      	add	r1, sp, #40	; 0x28
   17962:	9009      	str	r0, [sp, #36]	; 0x24
   17964:	9108      	str	r1, [sp, #32]
   17966:	2100      	movs	r1, #0
   17968:	9107      	str	r1, [sp, #28]
   1796a:	e9cd 0105 	strd	r0, r1, [sp, #20]
   1796e:	f241 5028 	movw	r0, #5416	; 0x1528
   17972:	f2c0 0002 	movt	r0, #2
   17976:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   1797a:	9004      	str	r0, [sp, #16]
   1797c:	f649 0019 	movw	r0, #38937	; 0x9819
   17980:	f2c0 0001 	movt	r0, #1
   17984:	900d      	str	r0, [sp, #52]	; 0x34
   17986:	a802      	add	r0, sp, #8
   17988:	900c      	str	r0, [sp, #48]	; 0x30
   1798a:	f649 0023 	movw	r0, #38947	; 0x9823
   1798e:	f2c0 0001 	movt	r0, #1
   17992:	4661      	mov	r1, ip
   17994:	900b      	str	r0, [sp, #44]	; 0x2c
   17996:	4668      	mov	r0, sp
   17998:	900a      	str	r0, [sp, #40]	; 0x28
   1799a:	a804      	add	r0, sp, #16
   1799c:	f000 f840 	bl	17a20 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   179a0:	defe      	udf	#254	; 0xfe

000179a2 <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>:
   179a2:	68c0      	ldr	r0, [r0, #12]
   179a4:	4770      	bx	lr

000179a6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>:
   179a6:	4770      	bx	lr

000179a8 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>:
   179a8:	e9d0 2100 	ldrd	r2, r1, [r0]
   179ac:	4610      	mov	r0, r2
   179ae:	4770      	bx	lr

000179b0 <_ZN4core5panic8Location4line17h650a566d9637c91dE>:
   179b0:	6880      	ldr	r0, [r0, #8]
   179b2:	4770      	bx	lr

000179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>:
   179b4:	b088      	sub	sp, #32
   179b6:	4694      	mov	ip, r2
   179b8:	f241 3254 	movw	r2, #4948	; 0x1354
   179bc:	2300      	movs	r3, #0
   179be:	f2c0 0202 	movt	r2, #2
   179c2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   179c6:	4668      	mov	r0, sp
   179c8:	9305      	str	r3, [sp, #20]
   179ca:	4661      	mov	r1, ip
   179cc:	9204      	str	r2, [sp, #16]
   179ce:	2201      	movs	r2, #1
   179d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
   179d4:	9201      	str	r2, [sp, #4]
   179d6:	aa06      	add	r2, sp, #24
   179d8:	9200      	str	r2, [sp, #0]
   179da:	f000 f821 	bl	17a20 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   179de:	defe      	udf	#254	; 0xfe

000179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>:
   179e0:	b08c      	sub	sp, #48	; 0x30
   179e2:	4603      	mov	r3, r0
   179e4:	e9cd 1200 	strd	r1, r2, [sp]
   179e8:	2002      	movs	r0, #2
   179ea:	a908      	add	r1, sp, #32
   179ec:	9007      	str	r0, [sp, #28]
   179ee:	9106      	str	r1, [sp, #24]
   179f0:	2100      	movs	r1, #0
   179f2:	9105      	str	r1, [sp, #20]
   179f4:	e9cd 0103 	strd	r0, r1, [sp, #12]
   179f8:	f241 505c 	movw	r0, #5468	; 0x155c
   179fc:	f2c0 0002 	movt	r0, #2
   17a00:	4669      	mov	r1, sp
   17a02:	9002      	str	r0, [sp, #8]
   17a04:	f249 7035 	movw	r0, #38709	; 0x9735
   17a08:	f2c0 0001 	movt	r0, #1
   17a0c:	900b      	str	r0, [sp, #44]	; 0x2c
   17a0e:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   17a12:	a801      	add	r0, sp, #4
   17a14:	9008      	str	r0, [sp, #32]
   17a16:	a802      	add	r0, sp, #8
   17a18:	4619      	mov	r1, r3
   17a1a:	f000 f801 	bl	17a20 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   17a1e:	defe      	udf	#254	; 0xfe

00017a20 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>:
   17a20:	b084      	sub	sp, #16
   17a22:	e9cd 0102 	strd	r0, r1, [sp, #8]
   17a26:	f241 5038 	movw	r0, #5432	; 0x1538
   17a2a:	f2c0 0002 	movt	r0, #2
   17a2e:	9001      	str	r0, [sp, #4]
   17a30:	f241 3054 	movw	r0, #4948	; 0x1354
   17a34:	f2c0 0002 	movt	r0, #2
   17a38:	9000      	str	r0, [sp, #0]
   17a3a:	4668      	mov	r0, sp
   17a3c:	f7f0 fe48 	bl	86d0 <rust_begin_unwind>
   17a40:	defe      	udf	#254	; 0xfe

00017a42 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>:
   17a42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a46:	b081      	sub	sp, #4
   17a48:	2a00      	cmp	r2, #0
   17a4a:	f000 80fe 	beq.w	17c4a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   17a4e:	4690      	mov	r8, r2
   17a50:	468a      	mov	sl, r1
   17a52:	4681      	mov	r9, r0
   17a54:	f8d9 0008 	ldr.w	r0, [r9, #8]
   17a58:	7800      	ldrb	r0, [r0, #0]
   17a5a:	b948      	cbnz	r0, 17a70 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x2e>
   17a5c:	e014      	b.n	17a88 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   17a5e:	44da      	add	sl, fp
   17a60:	2c00      	cmp	r4, #0
   17a62:	46a0      	mov	r8, r4
   17a64:	f000 80f1 	beq.w	17c4a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   17a68:	f8d9 0008 	ldr.w	r0, [r9, #8]
   17a6c:	7800      	ldrb	r0, [r0, #0]
   17a6e:	b158      	cbz	r0, 17a88 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   17a70:	e9d9 0100 	ldrd	r0, r1, [r9]
   17a74:	2204      	movs	r2, #4
   17a76:	68cb      	ldr	r3, [r1, #12]
   17a78:	f241 4174 	movw	r1, #5236	; 0x1474
   17a7c:	f2c0 0102 	movt	r1, #2
   17a80:	4798      	blx	r3
   17a82:	2800      	cmp	r0, #0
   17a84:	f040 80e5 	bne.w	17c52 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   17a88:	f04f 0b00 	mov.w	fp, #0
   17a8c:	4641      	mov	r1, r8
   17a8e:	e008      	b.n	17aa2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x60>
   17a90:	ebb8 010b 	subs.w	r1, r8, fp
   17a94:	f04f 0000 	mov.w	r0, #0
   17a98:	bf38      	it	cc
   17a9a:	4601      	movcc	r1, r0
   17a9c:	45c3      	cmp	fp, r8
   17a9e:	f200 80a5 	bhi.w	17bec <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1aa>
   17aa2:	eb0a 0e0b 	add.w	lr, sl, fp
   17aa6:	2000      	movs	r0, #0
   17aa8:	f01e 0203 	ands.w	r2, lr, #3
   17aac:	bf18      	it	ne
   17aae:	f1d2 0c04 	rsbsne	ip, r2, #4
   17ab2:	d120      	bne.n	17af6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xb4>
   17ab4:	2908      	cmp	r1, #8
   17ab6:	d357      	bcc.n	17b68 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   17ab8:	f1a1 0208 	sub.w	r2, r1, #8
   17abc:	4290      	cmp	r0, r2
   17abe:	d853      	bhi.n	17b68 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   17ac0:	f85e 3000 	ldr.w	r3, [lr, r0]
   17ac4:	eb0e 0700 	add.w	r7, lr, r0
   17ac8:	687f      	ldr	r7, [r7, #4]
   17aca:	f083 360a 	eor.w	r6, r3, #168430090	; 0xa0a0a0a
   17ace:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   17ad2:	ea26 0303 	bic.w	r3, r6, r3
   17ad6:	f087 360a 	eor.w	r6, r7, #168430090	; 0xa0a0a0a
   17ada:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   17ade:	ea26 0707 	bic.w	r7, r6, r7
   17ae2:	433b      	orrs	r3, r7
   17ae4:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   17ae8:	d102      	bne.n	17af0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xae>
   17aea:	3008      	adds	r0, #8
   17aec:	4290      	cmp	r0, r2
   17aee:	d9e7      	bls.n	17ac0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x7e>
   17af0:	4288      	cmp	r0, r1
   17af2:	d939      	bls.n	17b68 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   17af4:	e0b1      	b.n	17c5a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x218>
   17af6:	458c      	cmp	ip, r1
   17af8:	bf88      	it	hi
   17afa:	468c      	movhi	ip, r1
   17afc:	eb0e 060c 	add.w	r6, lr, ip
   17b00:	2000      	movs	r0, #0
   17b02:	4663      	mov	r3, ip
   17b04:	4677      	mov	r7, lr
   17b06:	b363      	cbz	r3, 17b62 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   17b08:	463a      	mov	r2, r7
   17b0a:	f812 4b01 	ldrb.w	r4, [r2], #1
   17b0e:	f1b4 050a 	subs.w	r5, r4, #10
   17b12:	bf18      	it	ne
   17b14:	2501      	movne	r5, #1
   17b16:	4428      	add	r0, r5
   17b18:	2c0a      	cmp	r4, #10
   17b1a:	d059      	beq.n	17bd0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   17b1c:	42b2      	cmp	r2, r6
   17b1e:	d020      	beq.n	17b62 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   17b20:	787a      	ldrb	r2, [r7, #1]
   17b22:	f1b2 040a 	subs.w	r4, r2, #10
   17b26:	bf18      	it	ne
   17b28:	2401      	movne	r4, #1
   17b2a:	4420      	add	r0, r4
   17b2c:	2a0a      	cmp	r2, #10
   17b2e:	d04f      	beq.n	17bd0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   17b30:	1cba      	adds	r2, r7, #2
   17b32:	42b2      	cmp	r2, r6
   17b34:	d015      	beq.n	17b62 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   17b36:	78ba      	ldrb	r2, [r7, #2]
   17b38:	f1b2 040a 	subs.w	r4, r2, #10
   17b3c:	bf18      	it	ne
   17b3e:	2401      	movne	r4, #1
   17b40:	4420      	add	r0, r4
   17b42:	2a0a      	cmp	r2, #10
   17b44:	d044      	beq.n	17bd0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   17b46:	1cfa      	adds	r2, r7, #3
   17b48:	42b2      	cmp	r2, r6
   17b4a:	d00a      	beq.n	17b62 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   17b4c:	78fa      	ldrb	r2, [r7, #3]
   17b4e:	3b04      	subs	r3, #4
   17b50:	3704      	adds	r7, #4
   17b52:	f1b2 040a 	subs.w	r4, r2, #10
   17b56:	bf18      	it	ne
   17b58:	2401      	movne	r4, #1
   17b5a:	4420      	add	r0, r4
   17b5c:	2a0a      	cmp	r2, #10
   17b5e:	d1d2      	bne.n	17b06 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xc4>
   17b60:	e036      	b.n	17bd0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   17b62:	4660      	mov	r0, ip
   17b64:	2908      	cmp	r1, #8
   17b66:	d2a7      	bcs.n	17ab8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x76>
   17b68:	eb0e 0700 	add.w	r7, lr, r0
   17b6c:	eb0e 0201 	add.w	r2, lr, r1
   17b70:	1a0e      	subs	r6, r1, r0
   17b72:	2100      	movs	r1, #0
   17b74:	b3ce      	cbz	r6, 17bea <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   17b76:	463b      	mov	r3, r7
   17b78:	f813 5b01 	ldrb.w	r5, [r3], #1
   17b7c:	f1b5 040a 	subs.w	r4, r5, #10
   17b80:	bf18      	it	ne
   17b82:	2401      	movne	r4, #1
   17b84:	4421      	add	r1, r4
   17b86:	2d0a      	cmp	r5, #10
   17b88:	d021      	beq.n	17bce <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   17b8a:	4293      	cmp	r3, r2
   17b8c:	d02d      	beq.n	17bea <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   17b8e:	787b      	ldrb	r3, [r7, #1]
   17b90:	f1b3 050a 	subs.w	r5, r3, #10
   17b94:	bf18      	it	ne
   17b96:	2501      	movne	r5, #1
   17b98:	4429      	add	r1, r5
   17b9a:	2b0a      	cmp	r3, #10
   17b9c:	d017      	beq.n	17bce <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   17b9e:	1cbb      	adds	r3, r7, #2
   17ba0:	4293      	cmp	r3, r2
   17ba2:	d022      	beq.n	17bea <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   17ba4:	78bb      	ldrb	r3, [r7, #2]
   17ba6:	f1b3 050a 	subs.w	r5, r3, #10
   17baa:	bf18      	it	ne
   17bac:	2501      	movne	r5, #1
   17bae:	4429      	add	r1, r5
   17bb0:	2b0a      	cmp	r3, #10
   17bb2:	d00c      	beq.n	17bce <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   17bb4:	1cfb      	adds	r3, r7, #3
   17bb6:	4293      	cmp	r3, r2
   17bb8:	d017      	beq.n	17bea <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   17bba:	78fb      	ldrb	r3, [r7, #3]
   17bbc:	3e04      	subs	r6, #4
   17bbe:	3704      	adds	r7, #4
   17bc0:	f1b3 050a 	subs.w	r5, r3, #10
   17bc4:	bf18      	it	ne
   17bc6:	2501      	movne	r5, #1
   17bc8:	4429      	add	r1, r5
   17bca:	2b0a      	cmp	r3, #10
   17bcc:	d1d2      	bne.n	17b74 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x132>
   17bce:	4408      	add	r0, r1
   17bd0:	4458      	add	r0, fp
   17bd2:	f100 0b01 	add.w	fp, r0, #1
   17bd6:	4540      	cmp	r0, r8
   17bd8:	f4bf af5a 	bcs.w	17a90 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   17bdc:	f81a 0000 	ldrb.w	r0, [sl, r0]
   17be0:	280a      	cmp	r0, #10
   17be2:	f47f af55 	bne.w	17a90 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   17be6:	2001      	movs	r0, #1
   17be8:	e001      	b.n	17bee <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1ac>
   17bea:	2000      	movs	r0, #0
   17bec:	46c3      	mov	fp, r8
   17bee:	f8d9 1008 	ldr.w	r1, [r9, #8]
   17bf2:	eba8 040b 	sub.w	r4, r8, fp
   17bf6:	7008      	strb	r0, [r1, #0]
   17bf8:	fab4 f084 	clz	r0, r4
   17bfc:	0942      	lsrs	r2, r0, #5
   17bfe:	fabb f08b 	clz	r0, fp
   17c02:	0943      	lsrs	r3, r0, #5
   17c04:	e9d9 0100 	ldrd	r0, r1, [r9]
   17c08:	ea53 0602 	orrs.w	r6, r3, r2
   17c0c:	d106      	bne.n	17c1c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1da>
   17c0e:	45d8      	cmp	r8, fp
   17c10:	d926      	bls.n	17c60 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   17c12:	f91a 200b 	ldrsb.w	r2, [sl, fp]
   17c16:	f112 0f41 	cmn.w	r2, #65	; 0x41
   17c1a:	dd21      	ble.n	17c60 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   17c1c:	68cb      	ldr	r3, [r1, #12]
   17c1e:	4651      	mov	r1, sl
   17c20:	465a      	mov	r2, fp
   17c22:	4798      	blx	r3
   17c24:	b9a8      	cbnz	r0, 17c52 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   17c26:	2e00      	cmp	r6, #0
   17c28:	f47f af19 	bne.w	17a5e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   17c2c:	45d8      	cmp	r8, fp
   17c2e:	d905      	bls.n	17c3c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1fa>
   17c30:	f91a 000b 	ldrsb.w	r0, [sl, fp]
   17c34:	f110 0f41 	cmn.w	r0, #65	; 0x41
   17c38:	f73f af11 	bgt.w	17a5e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   17c3c:	4650      	mov	r0, sl
   17c3e:	4641      	mov	r1, r8
   17c40:	465a      	mov	r2, fp
   17c42:	4643      	mov	r3, r8
   17c44:	f000 fe4d 	bl	188e2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   17c48:	defe      	udf	#254	; 0xfe
   17c4a:	2000      	movs	r0, #0
   17c4c:	b001      	add	sp, #4
   17c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c52:	2001      	movs	r0, #1
   17c54:	b001      	add	sp, #4
   17c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c5a:	f000 fe20 	bl	1889e <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   17c5e:	defe      	udf	#254	; 0xfe
   17c60:	4650      	mov	r0, sl
   17c62:	4641      	mov	r1, r8
   17c64:	2200      	movs	r2, #0
   17c66:	465b      	mov	r3, fp
   17c68:	f000 fe3b 	bl	188e2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   17c6c:	defe      	udf	#254	; 0xfe

00017c6e <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>:
   17c6e:	b5f0      	push	{r4, r5, r6, r7, lr}
   17c70:	b08d      	sub	sp, #52	; 0x34
   17c72:	4604      	mov	r4, r0
   17c74:	7a00      	ldrb	r0, [r0, #8]
   17c76:	b138      	cbz	r0, 17c88 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x1a>
   17c78:	2001      	movs	r0, #1
   17c7a:	6861      	ldr	r1, [r4, #4]
   17c7c:	7220      	strb	r0, [r4, #8]
   17c7e:	1c48      	adds	r0, r1, #1
   17c80:	6060      	str	r0, [r4, #4]
   17c82:	4620      	mov	r0, r4
   17c84:	b00d      	add	sp, #52	; 0x34
   17c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17c88:	4616      	mov	r6, r2
   17c8a:	460d      	mov	r5, r1
   17c8c:	e9d4 1200 	ldrd	r1, r2, [r4]
   17c90:	7808      	ldrb	r0, [r1, #0]
   17c92:	0740      	lsls	r0, r0, #29
   17c94:	d419      	bmi.n	17cca <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x5c>
   17c96:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
   17c9a:	f241 5186 	movw	r1, #5510	; 0x1586
   17c9e:	f241 5c8a 	movw	ip, #5514	; 0x158a
   17ca2:	f2c0 0102 	movt	r1, #2
   17ca6:	2a00      	cmp	r2, #0
   17ca8:	f2c0 0c02 	movt	ip, #2
   17cac:	bf08      	it	eq
   17cae:	4661      	moveq	r1, ip
   17cb0:	68db      	ldr	r3, [r3, #12]
   17cb2:	f04f 0202 	mov.w	r2, #2
   17cb6:	bf08      	it	eq
   17cb8:	2201      	moveq	r2, #1
   17cba:	4798      	blx	r3
   17cbc:	2800      	cmp	r0, #0
   17cbe:	d1db      	bne.n	17c78 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   17cc0:	68f2      	ldr	r2, [r6, #12]
   17cc2:	4628      	mov	r0, r5
   17cc4:	6821      	ldr	r1, [r4, #0]
   17cc6:	4790      	blx	r2
   17cc8:	e7d7      	b.n	17c7a <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>
   17cca:	b95a      	cbnz	r2, 17ce4 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x76>
   17ccc:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   17cd0:	2202      	movs	r2, #2
   17cd2:	68cb      	ldr	r3, [r1, #12]
   17cd4:	f241 5188 	movw	r1, #5512	; 0x1588
   17cd8:	f2c0 0102 	movt	r1, #2
   17cdc:	4798      	blx	r3
   17cde:	2800      	cmp	r0, #0
   17ce0:	d1ca      	bne.n	17c78 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   17ce2:	6821      	ldr	r1, [r4, #0]
   17ce4:	2001      	movs	r0, #1
   17ce6:	f10d 030f 	add.w	r3, sp, #15
   17cea:	f88d 000f 	strb.w	r0, [sp, #15]
   17cee:	e9d1 0206 	ldrd	r0, r2, [r1, #24]
   17cf2:	e88d 000d 	stmia.w	sp, {r0, r2, r3}
   17cf6:	e891 5005 	ldmia.w	r1, {r0, r2, ip, lr}
   17cfa:	e9d1 3704 	ldrd	r3, r7, [r1, #16]
   17cfe:	f891 1020 	ldrb.w	r1, [r1, #32]
   17d02:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   17d06:	a904      	add	r1, sp, #16
   17d08:	e9cd 0204 	strd	r0, r2, [sp, #16]
   17d0c:	f241 506c 	movw	r0, #5484	; 0x156c
   17d10:	f2c0 0002 	movt	r0, #2
   17d14:	68f2      	ldr	r2, [r6, #12]
   17d16:	900b      	str	r0, [sp, #44]	; 0x2c
   17d18:	4668      	mov	r0, sp
   17d1a:	900a      	str	r0, [sp, #40]	; 0x28
   17d1c:	4628      	mov	r0, r5
   17d1e:	e9cd 3708 	strd	r3, r7, [sp, #32]
   17d22:	e9cd ce06 	strd	ip, lr, [sp, #24]
   17d26:	4790      	blx	r2
   17d28:	2800      	cmp	r0, #0
   17d2a:	d1a5      	bne.n	17c78 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   17d2c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   17d30:	2202      	movs	r2, #2
   17d32:	68cb      	ldr	r3, [r1, #12]
   17d34:	f241 5184 	movw	r1, #5508	; 0x1584
   17d38:	f2c0 0102 	movt	r1, #2
   17d3c:	4798      	blx	r3
   17d3e:	e79c      	b.n	17c7a <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>

00017d40 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>:
   17d40:	b5b0      	push	{r4, r5, r7, lr}
   17d42:	4604      	mov	r4, r0
   17d44:	7a05      	ldrb	r5, [r0, #8]
   17d46:	6840      	ldr	r0, [r0, #4]
   17d48:	b308      	cbz	r0, 17d8e <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4e>
   17d4a:	b10d      	cbz	r5, 17d50 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x10>
   17d4c:	2501      	movs	r5, #1
   17d4e:	e01d      	b.n	17d8c <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   17d50:	2801      	cmp	r0, #1
   17d52:	d110      	bne.n	17d76 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   17d54:	7a60      	ldrb	r0, [r4, #9]
   17d56:	b170      	cbz	r0, 17d76 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   17d58:	6821      	ldr	r1, [r4, #0]
   17d5a:	7808      	ldrb	r0, [r1, #0]
   17d5c:	0740      	lsls	r0, r0, #29
   17d5e:	d40a      	bmi.n	17d76 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   17d60:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   17d64:	2201      	movs	r2, #1
   17d66:	68cb      	ldr	r3, [r1, #12]
   17d68:	f241 518b 	movw	r1, #5515	; 0x158b
   17d6c:	f2c0 0102 	movt	r1, #2
   17d70:	2501      	movs	r5, #1
   17d72:	4798      	blx	r3
   17d74:	b950      	cbnz	r0, 17d8c <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   17d76:	6821      	ldr	r1, [r4, #0]
   17d78:	2201      	movs	r2, #1
   17d7a:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   17d7e:	68cb      	ldr	r3, [r1, #12]
   17d80:	f241 518c 	movw	r1, #5516	; 0x158c
   17d84:	f2c0 0102 	movt	r1, #2
   17d88:	4798      	blx	r3
   17d8a:	4605      	mov	r5, r0
   17d8c:	7225      	strb	r5, [r4, #8]
   17d8e:	2d00      	cmp	r5, #0
   17d90:	bf18      	it	ne
   17d92:	2501      	movne	r5, #1
   17d94:	4628      	mov	r0, r5
   17d96:	bdb0      	pop	{r4, r5, r7, pc}

00017d98 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>:
   17d98:	b580      	push	{r7, lr}
   17d9a:	b082      	sub	sp, #8
   17d9c:	468c      	mov	ip, r1
   17d9e:	2100      	movs	r1, #0
   17da0:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
   17da4:	9101      	str	r1, [sp, #4]
   17da6:	d207      	bcs.n	17db8 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x20>
   17da8:	f88d c004 	strb.w	ip, [sp, #4]
   17dac:	a901      	add	r1, sp, #4
   17dae:	2201      	movs	r2, #1
   17db0:	f7ff fe47 	bl	17a42 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   17db4:	b002      	add	sp, #8
   17db6:	bd80      	pop	{r7, pc}
   17db8:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
   17dbc:	d210      	bcs.n	17de0 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x48>
   17dbe:	ea4f 119c 	mov.w	r1, ip, lsr #6
   17dc2:	2306      	movs	r3, #6
   17dc4:	2202      	movs	r2, #2
   17dc6:	f363 115f 	bfi	r1, r3, #5, #27
   17dca:	f362 1c9f 	bfi	ip, r2, #6, #26
   17dce:	f88d c005 	strb.w	ip, [sp, #5]
   17dd2:	f88d 1004 	strb.w	r1, [sp, #4]
   17dd6:	a901      	add	r1, sp, #4
   17dd8:	f7ff fe33 	bl	17a42 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   17ddc:	b002      	add	sp, #8
   17dde:	bd80      	pop	{r7, pc}
   17de0:	2202      	movs	r2, #2
   17de2:	4663      	mov	r3, ip
   17de4:	a901      	add	r1, sp, #4
   17de6:	f362 139f 	bfi	r3, r2, #6, #26
   17dea:	f5bc 3f80 	cmp.w	ip, #65536	; 0x10000
   17dee:	d213      	bcs.n	17e18 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x80>
   17df0:	f88d 3006 	strb.w	r3, [sp, #6]
   17df4:	ea4f 139c 	mov.w	r3, ip, lsr #6
   17df8:	f362 139f 	bfi	r3, r2, #6, #26
   17dfc:	f88d 3005 	strb.w	r3, [sp, #5]
   17e00:	ea4f 321c 	mov.w	r2, ip, lsr #12
   17e04:	230e      	movs	r3, #14
   17e06:	f363 121f 	bfi	r2, r3, #4, #28
   17e0a:	f88d 2004 	strb.w	r2, [sp, #4]
   17e0e:	2203      	movs	r2, #3
   17e10:	f7ff fe17 	bl	17a42 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   17e14:	b002      	add	sp, #8
   17e16:	bd80      	pop	{r7, pc}
   17e18:	f88d 3007 	strb.w	r3, [sp, #7]
   17e1c:	ea4f 139c 	mov.w	r3, ip, lsr #6
   17e20:	f362 139f 	bfi	r3, r2, #6, #26
   17e24:	f88d 3006 	strb.w	r3, [sp, #6]
   17e28:	ea4f 331c 	mov.w	r3, ip, lsr #12
   17e2c:	f362 139f 	bfi	r3, r2, #6, #26
   17e30:	22f0      	movs	r2, #240	; 0xf0
   17e32:	ea42 429c 	orr.w	r2, r2, ip, lsr #18
   17e36:	f88d 3005 	strb.w	r3, [sp, #5]
   17e3a:	f88d 2004 	strb.w	r2, [sp, #4]
   17e3e:	2204      	movs	r2, #4
   17e40:	f7ff fdff 	bl	17a42 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   17e44:	b002      	add	sp, #8
   17e46:	bd80      	pop	{r7, pc}

00017e48 <_ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE>:
   17e48:	b570      	push	{r4, r5, r6, lr}
   17e4a:	b088      	sub	sp, #32
   17e4c:	9001      	str	r0, [sp, #4]
   17e4e:	aa02      	add	r2, sp, #8
   17e50:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   17e54:	f241 6158 	movw	r1, #5720	; 0x1658
   17e58:	4610      	mov	r0, r2
   17e5a:	f2c0 0102 	movt	r1, #2
   17e5e:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   17e62:	a801      	add	r0, sp, #4
   17e64:	f000 f89e 	bl	17fa4 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   17e68:	b008      	add	sp, #32
   17e6a:	bd70      	pop	{r4, r5, r6, pc}

00017e6c <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E>:
   17e6c:	6800      	ldr	r0, [r0, #0]
   17e6e:	f7ff bde8 	b.w	17a42 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>

00017e72 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE>:
   17e72:	6800      	ldr	r0, [r0, #0]
   17e74:	f7ff bf90 	b.w	17d98 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>

00017e78 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE>:
   17e78:	b570      	push	{r4, r5, r6, lr}
   17e7a:	b088      	sub	sp, #32
   17e7c:	6800      	ldr	r0, [r0, #0]
   17e7e:	aa02      	add	r2, sp, #8
   17e80:	9001      	str	r0, [sp, #4]
   17e82:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   17e86:	4610      	mov	r0, r2
   17e88:	f241 6158 	movw	r1, #5720	; 0x1658
   17e8c:	f2c0 0102 	movt	r1, #2
   17e90:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   17e94:	a801      	add	r0, sp, #4
   17e96:	f000 f885 	bl	17fa4 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   17e9a:	b008      	add	sp, #32
   17e9c:	bd70      	pop	{r4, r5, r6, pc}

00017e9e <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE>:
   17e9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ea2:	b08d      	sub	sp, #52	; 0x34
   17ea4:	468c      	mov	ip, r1
   17ea6:	6801      	ldr	r1, [r0, #0]
   17ea8:	f248 5e1f 	movw	lr, #34079	; 0x851f
   17eac:	f241 508f 	movw	r0, #5519	; 0x158f
   17eb0:	f242 7810 	movw	r8, #10000	; 0x2710
   17eb4:	4541      	cmp	r1, r8
   17eb6:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   17eba:	f2c0 0002 	movt	r0, #2
   17ebe:	d337      	bcc.n	17f30 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x92>
   17ec0:	f241 7959 	movw	r9, #5977	; 0x1759
   17ec4:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   17ec8:	f10d 0b0c 	add.w	fp, sp, #12
   17ecc:	2300      	movs	r3, #0
   17ece:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   17ed2:	f04f 0a64 	mov.w	sl, #100	; 0x64
   17ed6:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   17eda:	fba1 2409 	umull	r2, r4, r1, r9
   17ede:	42b9      	cmp	r1, r7
   17ee0:	ea4f 3254 	mov.w	r2, r4, lsr #13
   17ee4:	fb02 1418 	mls	r4, r2, r8, r1
   17ee8:	4611      	mov	r1, r2
   17eea:	b2a5      	uxth	r5, r4
   17eec:	fba5 560e 	umull	r5, r6, r5, lr
   17ef0:	ea4f 1556 	mov.w	r5, r6, lsr #5
   17ef4:	eb0b 0603 	add.w	r6, fp, r3
   17ef8:	fb05 441a 	mls	r4, r5, sl, r4
   17efc:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   17f00:	f1a3 0304 	sub.w	r3, r3, #4
   17f04:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   17f08:	b2a4      	uxth	r4, r4
   17f0a:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   17f0e:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   17f12:	d8e2      	bhi.n	17eda <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x3c>
   17f14:	f103 0427 	add.w	r4, r3, #39	; 0x27
   17f18:	4611      	mov	r1, r2
   17f1a:	2963      	cmp	r1, #99	; 0x63
   17f1c:	dc0b      	bgt.n	17f36 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x98>
   17f1e:	460b      	mov	r3, r1
   17f20:	2b0a      	cmp	r3, #10
   17f22:	db17      	blt.n	17f54 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xb6>
   17f24:	1ea1      	subs	r1, r4, #2
   17f26:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   17f2a:	aa03      	add	r2, sp, #12
   17f2c:	5250      	strh	r0, [r2, r1]
   17f2e:	e016      	b.n	17f5e <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xc0>
   17f30:	2427      	movs	r4, #39	; 0x27
   17f32:	2963      	cmp	r1, #99	; 0x63
   17f34:	ddf3      	ble.n	17f1e <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x80>
   17f36:	b28a      	uxth	r2, r1
   17f38:	3c02      	subs	r4, #2
   17f3a:	fba2 230e 	umull	r2, r3, r2, lr
   17f3e:	2264      	movs	r2, #100	; 0x64
   17f40:	095b      	lsrs	r3, r3, #5
   17f42:	fb03 1112 	mls	r1, r3, r2, r1
   17f46:	aa03      	add	r2, sp, #12
   17f48:	b289      	uxth	r1, r1
   17f4a:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   17f4e:	5311      	strh	r1, [r2, r4]
   17f50:	2b0a      	cmp	r3, #10
   17f52:	dae7      	bge.n	17f24 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x86>
   17f54:	1e61      	subs	r1, r4, #1
   17f56:	aa03      	add	r2, sp, #12
   17f58:	f103 0030 	add.w	r0, r3, #48	; 0x30
   17f5c:	5450      	strb	r0, [r2, r1]
   17f5e:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   17f62:	aa03      	add	r2, sp, #12
   17f64:	4411      	add	r1, r2
   17f66:	f241 3254 	movw	r2, #4948	; 0x1354
   17f6a:	e9cd 1000 	strd	r1, r0, [sp]
   17f6e:	f2c0 0202 	movt	r2, #2
   17f72:	4660      	mov	r0, ip
   17f74:	2101      	movs	r1, #1
   17f76:	2300      	movs	r3, #0
   17f78:	f000 f8f4 	bl	18164 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   17f7c:	b00d      	add	sp, #52	; 0x34
   17f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017f82 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E>:
   17f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17f86:	b086      	sub	sp, #24
   17f88:	e9d1 c106 	ldrd	ip, r1, [r1, #24]
   17f8c:	466a      	mov	r2, sp
   17f8e:	e890 41f0 	ldmia.w	r0, {r4, r5, r6, r7, r8, lr}
   17f92:	4613      	mov	r3, r2
   17f94:	4660      	mov	r0, ip
   17f96:	e883 41f0 	stmia.w	r3, {r4, r5, r6, r7, r8, lr}
   17f9a:	f000 f803 	bl	17fa4 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   17f9e:	b006      	add	sp, #24
   17fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017fa4 <_ZN4core3fmt5write17hd95ac78ed22a2252E>:
   17fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17fa8:	b08b      	sub	sp, #44	; 0x2c
   17faa:	2303      	movs	r3, #3
   17fac:	6897      	ldr	r7, [r2, #8]
   17fae:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   17fb2:	2320      	movs	r3, #32
   17fb4:	9303      	str	r3, [sp, #12]
   17fb6:	2300      	movs	r3, #0
   17fb8:	2f00      	cmp	r7, #0
   17fba:	9302      	str	r3, [sp, #8]
   17fbc:	e9cd 0108 	strd	r0, r1, [sp, #32]
   17fc0:	9306      	str	r3, [sp, #24]
   17fc2:	9304      	str	r3, [sp, #16]
   17fc4:	d07c      	beq.n	180c0 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x11c>
   17fc6:	f8d2 b00c 	ldr.w	fp, [r2, #12]
   17fca:	e9d2 9400 	ldrd	r9, r4, [r2]
   17fce:	45a3      	cmp	fp, r4
   17fd0:	bf88      	it	hi
   17fd2:	46a3      	movhi	fp, r4
   17fd4:	f1bb 0f00 	cmp.w	fp, #0
   17fd8:	f000 809b 	beq.w	18112 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   17fdc:	e9d2 6204 	ldrd	r6, r2, [r2, #16]
   17fe0:	68cd      	ldr	r5, [r1, #12]
   17fe2:	9201      	str	r2, [sp, #4]
   17fe4:	e9d9 3200 	ldrd	r3, r2, [r9]
   17fe8:	4619      	mov	r1, r3
   17fea:	47a8      	blx	r5
   17fec:	2800      	cmp	r0, #0
   17fee:	f040 809e 	bne.w	1812e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   17ff2:	464d      	mov	r5, r9
   17ff4:	f04f 0a01 	mov.w	sl, #1
   17ff8:	f04f 0800 	mov.w	r8, #0
   17ffc:	f04f 0910 	mov.w	r9, #16
   18000:	eb07 0088 	add.w	r0, r7, r8, lsl #2
   18004:	6841      	ldr	r1, [r0, #4]
   18006:	9103      	str	r1, [sp, #12]
   18008:	7f01      	ldrb	r1, [r0, #28]
   1800a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   1800e:	6881      	ldr	r1, [r0, #8]
   18010:	9102      	str	r1, [sp, #8]
   18012:	e9d0 2105 	ldrd	r2, r1, [r0, #20]
   18016:	b18a      	cbz	r2, 1803c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x98>
   18018:	2a02      	cmp	r2, #2
   1801a:	d011      	beq.n	18040 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   1801c:	9a01      	ldr	r2, [sp, #4]
   1801e:	4291      	cmp	r1, r2
   18020:	f080 8098 	bcs.w	18154 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   18024:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
   18028:	f647 639f 	movw	r3, #32415	; 0x7e9f
   1802c:	f2c0 0301 	movt	r3, #1
   18030:	6852      	ldr	r2, [r2, #4]
   18032:	429a      	cmp	r2, r3
   18034:	d104      	bne.n	18040 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   18036:	f856 1031 	ldr.w	r1, [r6, r1, lsl #3]
   1803a:	6809      	ldr	r1, [r1, #0]
   1803c:	2201      	movs	r2, #1
   1803e:	e000      	b.n	18042 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9e>
   18040:	2200      	movs	r2, #0
   18042:	e9cd 2104 	strd	r2, r1, [sp, #16]
   18046:	f857 1009 	ldr.w	r1, [r7, r9]
   1804a:	68c0      	ldr	r0, [r0, #12]
   1804c:	b180      	cbz	r0, 18070 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xcc>
   1804e:	2802      	cmp	r0, #2
   18050:	d010      	beq.n	18074 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   18052:	9801      	ldr	r0, [sp, #4]
   18054:	4281      	cmp	r1, r0
   18056:	d27d      	bcs.n	18154 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   18058:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
   1805c:	f647 629f 	movw	r2, #32415	; 0x7e9f
   18060:	f2c0 0201 	movt	r2, #1
   18064:	6840      	ldr	r0, [r0, #4]
   18066:	4290      	cmp	r0, r2
   18068:	d104      	bne.n	18074 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   1806a:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   1806e:	6801      	ldr	r1, [r0, #0]
   18070:	2001      	movs	r0, #1
   18072:	e000      	b.n	18076 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd2>
   18074:	2000      	movs	r0, #0
   18076:	eb07 0209 	add.w	r2, r7, r9
   1807a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1807e:	9801      	ldr	r0, [sp, #4]
   18080:	f852 1c10 	ldr.w	r1, [r2, #-16]
   18084:	4281      	cmp	r1, r0
   18086:	d25d      	bcs.n	18144 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1a0>
   18088:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   1808c:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
   18090:	684a      	ldr	r2, [r1, #4]
   18092:	a902      	add	r1, sp, #8
   18094:	4790      	blx	r2
   18096:	2800      	cmp	r0, #0
   18098:	d149      	bne.n	1812e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   1809a:	45da      	cmp	sl, fp
   1809c:	d24b      	bcs.n	18136 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x192>
   1809e:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   180a2:	eb05 0208 	add.w	r2, r5, r8
   180a6:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   180aa:	68db      	ldr	r3, [r3, #12]
   180ac:	4798      	blx	r3
   180ae:	f109 0920 	add.w	r9, r9, #32
   180b2:	f108 0808 	add.w	r8, r8, #8
   180b6:	f10a 0a01 	add.w	sl, sl, #1
   180ba:	2800      	cmp	r0, #0
   180bc:	d0a0      	beq.n	18000 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x5c>
   180be:	e036      	b.n	1812e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   180c0:	6956      	ldr	r6, [r2, #20]
   180c2:	e9d2 9400 	ldrd	r9, r4, [r2]
   180c6:	42a6      	cmp	r6, r4
   180c8:	bf88      	it	hi
   180ca:	4626      	movhi	r6, r4
   180cc:	b30e      	cbz	r6, 18112 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   180ce:	6917      	ldr	r7, [r2, #16]
   180d0:	e9d9 3200 	ldrd	r3, r2, [r9]
   180d4:	68cd      	ldr	r5, [r1, #12]
   180d6:	4619      	mov	r1, r3
   180d8:	47a8      	blx	r5
   180da:	bb40      	cbnz	r0, 1812e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   180dc:	f10d 0808 	add.w	r8, sp, #8
   180e0:	2500      	movs	r5, #0
   180e2:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
   180e6:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   180ea:	684a      	ldr	r2, [r1, #4]
   180ec:	4641      	mov	r1, r8
   180ee:	4790      	blx	r2
   180f0:	b9e8      	cbnz	r0, 1812e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   180f2:	f105 0a01 	add.w	sl, r5, #1
   180f6:	45b2      	cmp	sl, r6
   180f8:	d20d      	bcs.n	18116 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x172>
   180fa:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   180fe:	eb09 02c5 	add.w	r2, r9, r5, lsl #3
   18102:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   18106:	68db      	ldr	r3, [r3, #12]
   18108:	4798      	blx	r3
   1810a:	2800      	cmp	r0, #0
   1810c:	4655      	mov	r5, sl
   1810e:	d0e8      	beq.n	180e2 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x13e>
   18110:	e00d      	b.n	1812e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   18112:	f04f 0a00 	mov.w	sl, #0
   18116:	4554      	cmp	r4, sl
   18118:	d910      	bls.n	1813c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   1811a:	eb09 02ca 	add.w	r2, r9, sl, lsl #3
   1811e:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   18122:	f859 103a 	ldr.w	r1, [r9, sl, lsl #3]
   18126:	6852      	ldr	r2, [r2, #4]
   18128:	68db      	ldr	r3, [r3, #12]
   1812a:	4798      	blx	r3
   1812c:	b130      	cbz	r0, 1813c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   1812e:	2001      	movs	r0, #1
   18130:	b00b      	add	sp, #44	; 0x2c
   18132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18136:	46a9      	mov	r9, r5
   18138:	4554      	cmp	r4, sl
   1813a:	d8ee      	bhi.n	1811a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x176>
   1813c:	2000      	movs	r0, #0
   1813e:	b00b      	add	sp, #44	; 0x2c
   18140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18144:	f241 6088 	movw	r0, #5768	; 0x1688
   18148:	f2c0 0002 	movt	r0, #2
   1814c:	9a01      	ldr	r2, [sp, #4]
   1814e:	f7ff fc47 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   18152:	defe      	udf	#254	; 0xfe
   18154:	f241 6098 	movw	r0, #5784	; 0x1698
   18158:	f2c0 0002 	movt	r0, #2
   1815c:	9a01      	ldr	r2, [sp, #4]
   1815e:	f7ff fc3f 	bl	179e0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   18162:	defe      	udf	#254	; 0xfe

00018164 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>:
   18164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18168:	b083      	sub	sp, #12
   1816a:	e9dd 570c 	ldrd	r5, r7, [sp, #48]	; 0x30
   1816e:	469a      	mov	sl, r3
   18170:	4604      	mov	r4, r0
   18172:	b1e1      	cbz	r1, 181ae <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x4a>
   18174:	f8d4 e000 	ldr.w	lr, [r4]
   18178:	f04f 082b 	mov.w	r8, #43	; 0x2b
   1817c:	f01e 0101 	ands.w	r1, lr, #1
   18180:	bf08      	it	eq
   18182:	f44f 1888 	moveq.w	r8, #1114112	; 0x110000
   18186:	eb01 0907 	add.w	r9, r1, r7
   1818a:	ea5f 714e 	movs.w	r1, lr, lsl #29
   1818e:	d517      	bpl.n	181c0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x5c>
   18190:	f1ba 0f00 	cmp.w	sl, #0
   18194:	d033      	beq.n	181fe <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9a>
   18196:	f1aa 0101 	sub.w	r1, sl, #1
   1819a:	f00a 0c03 	and.w	ip, sl, #3
   1819e:	2903      	cmp	r1, #3
   181a0:	d22f      	bcs.n	18202 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9e>
   181a2:	2100      	movs	r1, #0
   181a4:	4613      	mov	r3, r2
   181a6:	f1bc 0f00 	cmp.w	ip, #0
   181aa:	d152      	bne.n	18252 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xee>
   181ac:	e069      	b.n	18282 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   181ae:	f8d4 e000 	ldr.w	lr, [r4]
   181b2:	f107 0901 	add.w	r9, r7, #1
   181b6:	f04f 082d 	mov.w	r8, #45	; 0x2d
   181ba:	ea5f 714e 	movs.w	r1, lr, lsl #29
   181be:	d4e7      	bmi.n	18190 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x2c>
   181c0:	f04f 0a00 	mov.w	sl, #0
   181c4:	2200      	movs	r2, #0
   181c6:	68a0      	ldr	r0, [r4, #8]
   181c8:	2801      	cmp	r0, #1
   181ca:	d161      	bne.n	18290 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   181cc:	f8d4 b00c 	ldr.w	fp, [r4, #12]
   181d0:	45cb      	cmp	fp, r9
   181d2:	d95d      	bls.n	18290 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   181d4:	ea5f 700e 	movs.w	r0, lr, lsl #28
   181d8:	d46e      	bmi.n	182b8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x154>
   181da:	9202      	str	r2, [sp, #8]
   181dc:	ebab 0109 	sub.w	r1, fp, r9
   181e0:	f894 2020 	ldrb.w	r2, [r4, #32]
   181e4:	2000      	movs	r0, #0
   181e6:	46a9      	mov	r9, r5
   181e8:	460e      	mov	r6, r1
   181ea:	2a03      	cmp	r2, #3
   181ec:	bf08      	it	eq
   181ee:	2201      	moveq	r2, #1
   181f0:	e8df f002 	tbb	[pc, r2]
   181f4:	02840287 	.word	0x02840287
   181f8:	2600      	movs	r6, #0
   181fa:	4608      	mov	r0, r1
   181fc:	e081      	b.n	18302 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x19e>
   181fe:	2100      	movs	r1, #0
   18200:	e03f      	b.n	18282 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   18202:	ebac 060a 	sub.w	r6, ip, sl
   18206:	2100      	movs	r1, #0
   18208:	4693      	mov	fp, r2
   1820a:	4613      	mov	r3, r2
   1820c:	e9cd 7501 	strd	r7, r5, [sp, #4]
   18210:	781a      	ldrb	r2, [r3, #0]
   18212:	785d      	ldrb	r5, [r3, #1]
   18214:	7898      	ldrb	r0, [r3, #2]
   18216:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1821a:	78df      	ldrb	r7, [r3, #3]
   1821c:	2a80      	cmp	r2, #128	; 0x80
   1821e:	f005 02c0 	and.w	r2, r5, #192	; 0xc0
   18222:	bf08      	it	eq
   18224:	3101      	addeq	r1, #1
   18226:	2a80      	cmp	r2, #128	; 0x80
   18228:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   1822c:	bf08      	it	eq
   1822e:	3101      	addeq	r1, #1
   18230:	2880      	cmp	r0, #128	; 0x80
   18232:	f007 00c0 	and.w	r0, r7, #192	; 0xc0
   18236:	bf08      	it	eq
   18238:	3101      	addeq	r1, #1
   1823a:	2880      	cmp	r0, #128	; 0x80
   1823c:	bf08      	it	eq
   1823e:	3101      	addeq	r1, #1
   18240:	3304      	adds	r3, #4
   18242:	3604      	adds	r6, #4
   18244:	d1e4      	bne.n	18210 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xac>
   18246:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   1824a:	465a      	mov	r2, fp
   1824c:	f1bc 0f00 	cmp.w	ip, #0
   18250:	d017      	beq.n	18282 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   18252:	7818      	ldrb	r0, [r3, #0]
   18254:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   18258:	2880      	cmp	r0, #128	; 0x80
   1825a:	bf08      	it	eq
   1825c:	3101      	addeq	r1, #1
   1825e:	f1bc 0f01 	cmp.w	ip, #1
   18262:	d00e      	beq.n	18282 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   18264:	7858      	ldrb	r0, [r3, #1]
   18266:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   1826a:	2880      	cmp	r0, #128	; 0x80
   1826c:	bf08      	it	eq
   1826e:	3101      	addeq	r1, #1
   18270:	f1bc 0f02 	cmp.w	ip, #2
   18274:	d005      	beq.n	18282 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   18276:	7898      	ldrb	r0, [r3, #2]
   18278:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   1827c:	2880      	cmp	r0, #128	; 0x80
   1827e:	bf08      	it	eq
   18280:	3101      	addeq	r1, #1
   18282:	eb09 000a 	add.w	r0, r9, sl
   18286:	eba0 0901 	sub.w	r9, r0, r1
   1828a:	68a0      	ldr	r0, [r4, #8]
   1828c:	2801      	cmp	r0, #1
   1828e:	d09d      	beq.n	181cc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x68>
   18290:	4620      	mov	r0, r4
   18292:	4641      	mov	r1, r8
   18294:	4653      	mov	r3, sl
   18296:	f000 f893 	bl	183c0 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   1829a:	b120      	cbz	r0, 182a6 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x142>
   1829c:	2601      	movs	r6, #1
   1829e:	4630      	mov	r0, r6
   182a0:	b003      	add	sp, #12
   182a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   182a6:	69e1      	ldr	r1, [r4, #28]
   182a8:	463a      	mov	r2, r7
   182aa:	69a0      	ldr	r0, [r4, #24]
   182ac:	68cb      	ldr	r3, [r1, #12]
   182ae:	4629      	mov	r1, r5
   182b0:	b003      	add	sp, #12
   182b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   182b6:	4718      	bx	r3
   182b8:	6860      	ldr	r0, [r4, #4]
   182ba:	2601      	movs	r6, #1
   182bc:	9002      	str	r0, [sp, #8]
   182be:	2030      	movs	r0, #48	; 0x30
   182c0:	f894 1020 	ldrb.w	r1, [r4, #32]
   182c4:	4653      	mov	r3, sl
   182c6:	6060      	str	r0, [r4, #4]
   182c8:	4620      	mov	r0, r4
   182ca:	9101      	str	r1, [sp, #4]
   182cc:	4641      	mov	r1, r8
   182ce:	f884 6020 	strb.w	r6, [r4, #32]
   182d2:	f000 f875 	bl	183c0 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   182d6:	2800      	cmp	r0, #0
   182d8:	d1e1      	bne.n	1829e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   182da:	f894 2020 	ldrb.w	r2, [r4, #32]
   182de:	ebab 0109 	sub.w	r1, fp, r9
   182e2:	2000      	movs	r0, #0
   182e4:	46a9      	mov	r9, r5
   182e6:	2a03      	cmp	r2, #3
   182e8:	bf08      	it	eq
   182ea:	2201      	moveq	r2, #1
   182ec:	460e      	mov	r6, r1
   182ee:	e8df f002 	tbb	[pc, r2]
   182f2:	0235      	.short	0x0235
   182f4:	0232      	.short	0x0232
   182f6:	2600      	movs	r6, #0
   182f8:	4608      	mov	r0, r1
   182fa:	e02f      	b.n	1835c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1f8>
   182fc:	0848      	lsrs	r0, r1, #1
   182fe:	3101      	adds	r1, #1
   18300:	084e      	lsrs	r6, r1, #1
   18302:	1c45      	adds	r5, r0, #1
   18304:	3d01      	subs	r5, #1
   18306:	d007      	beq.n	18318 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1b4>
   18308:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   1830c:	6861      	ldr	r1, [r4, #4]
   1830e:	6912      	ldr	r2, [r2, #16]
   18310:	4790      	blx	r2
   18312:	2800      	cmp	r0, #0
   18314:	d0f6      	beq.n	18304 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1a0>
   18316:	e7c1      	b.n	1829c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   18318:	9a02      	ldr	r2, [sp, #8]
   1831a:	4620      	mov	r0, r4
   1831c:	4641      	mov	r1, r8
   1831e:	4653      	mov	r3, sl
   18320:	f8d4 b004 	ldr.w	fp, [r4, #4]
   18324:	f000 f84c 	bl	183c0 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   18328:	2800      	cmp	r0, #0
   1832a:	d1b7      	bne.n	1829c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   1832c:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   18330:	463a      	mov	r2, r7
   18332:	68cb      	ldr	r3, [r1, #12]
   18334:	4649      	mov	r1, r9
   18336:	4798      	blx	r3
   18338:	2800      	cmp	r0, #0
   1833a:	d1af      	bne.n	1829c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   1833c:	e9d4 5406 	ldrd	r5, r4, [r4, #24]
   18340:	1c77      	adds	r7, r6, #1
   18342:	2601      	movs	r6, #1
   18344:	3f01      	subs	r7, #1
   18346:	d02c      	beq.n	183a2 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x23e>
   18348:	6922      	ldr	r2, [r4, #16]
   1834a:	4628      	mov	r0, r5
   1834c:	4659      	mov	r1, fp
   1834e:	4790      	blx	r2
   18350:	2800      	cmp	r0, #0
   18352:	d0f7      	beq.n	18344 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1e0>
   18354:	e7a3      	b.n	1829e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   18356:	0848      	lsrs	r0, r1, #1
   18358:	3101      	adds	r1, #1
   1835a:	084e      	lsrs	r6, r1, #1
   1835c:	1c45      	adds	r5, r0, #1
   1835e:	3d01      	subs	r5, #1
   18360:	d007      	beq.n	18372 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x20e>
   18362:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   18366:	6861      	ldr	r1, [r4, #4]
   18368:	6912      	ldr	r2, [r2, #16]
   1836a:	4790      	blx	r2
   1836c:	2800      	cmp	r0, #0
   1836e:	d0f6      	beq.n	1835e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1fa>
   18370:	e794      	b.n	1829c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   18372:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   18376:	463a      	mov	r2, r7
   18378:	68cb      	ldr	r3, [r1, #12]
   1837a:	4649      	mov	r1, r9
   1837c:	f8d4 8004 	ldr.w	r8, [r4, #4]
   18380:	4798      	blx	r3
   18382:	2800      	cmp	r0, #0
   18384:	f47f af8a 	bne.w	1829c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   18388:	e9d4 9506 	ldrd	r9, r5, [r4, #24]
   1838c:	1c77      	adds	r7, r6, #1
   1838e:	2601      	movs	r6, #1
   18390:	3f01      	subs	r7, #1
   18392:	d00b      	beq.n	183ac <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x248>
   18394:	692a      	ldr	r2, [r5, #16]
   18396:	4648      	mov	r0, r9
   18398:	4641      	mov	r1, r8
   1839a:	4790      	blx	r2
   1839c:	2800      	cmp	r0, #0
   1839e:	d0f7      	beq.n	18390 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x22c>
   183a0:	e77d      	b.n	1829e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   183a2:	2600      	movs	r6, #0
   183a4:	4630      	mov	r0, r6
   183a6:	b003      	add	sp, #12
   183a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   183ac:	9801      	ldr	r0, [sp, #4]
   183ae:	2600      	movs	r6, #0
   183b0:	f884 0020 	strb.w	r0, [r4, #32]
   183b4:	9802      	ldr	r0, [sp, #8]
   183b6:	6060      	str	r0, [r4, #4]
   183b8:	4630      	mov	r0, r6
   183ba:	b003      	add	sp, #12
   183bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000183c0 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>:
   183c0:	b570      	push	{r4, r5, r6, lr}
   183c2:	461c      	mov	r4, r3
   183c4:	4615      	mov	r5, r2
   183c6:	4606      	mov	r6, r0
   183c8:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
   183cc:	d006      	beq.n	183dc <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   183ce:	e9d6 0206 	ldrd	r0, r2, [r6, #24]
   183d2:	6912      	ldr	r2, [r2, #16]
   183d4:	4790      	blx	r2
   183d6:	b108      	cbz	r0, 183dc <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   183d8:	2001      	movs	r0, #1
   183da:	bd70      	pop	{r4, r5, r6, pc}
   183dc:	b13d      	cbz	r5, 183ee <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x2e>
   183de:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
   183e2:	4622      	mov	r2, r4
   183e4:	68cb      	ldr	r3, [r1, #12]
   183e6:	4629      	mov	r1, r5
   183e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   183ec:	4718      	bx	r3
   183ee:	2000      	movs	r0, #0
   183f0:	bd70      	pop	{r4, r5, r6, pc}
	...

000183f4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>:
   183f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   183f8:	b081      	sub	sp, #4
   183fa:	f8d0 e008 	ldr.w	lr, [r0, #8]
   183fe:	4682      	mov	sl, r0
   18400:	6900      	ldr	r0, [r0, #16]
   18402:	4691      	mov	r9, r2
   18404:	4688      	mov	r8, r1
   18406:	f1be 0f01 	cmp.w	lr, #1
   1840a:	d111      	bne.n	18430 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x3c>
   1840c:	2801      	cmp	r0, #1
   1840e:	d012      	beq.n	18436 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x42>
   18410:	f1b9 0f00 	cmp.w	r9, #0
   18414:	f000 80c5 	beq.w	185a2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1ae>
   18418:	f1a9 0101 	sub.w	r1, r9, #1
   1841c:	f009 0003 	and.w	r0, r9, #3
   18420:	2903      	cmp	r1, #3
   18422:	d267      	bcs.n	184f4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x100>
   18424:	2100      	movs	r1, #0
   18426:	4642      	mov	r2, r8
   18428:	2800      	cmp	r0, #0
   1842a:	f040 8083 	bne.w	18534 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x140>
   1842e:	e097      	b.n	18560 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   18430:	2801      	cmp	r0, #1
   18432:	f040 80bd 	bne.w	185b0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   18436:	f1b9 0f00 	cmp.w	r9, #0
   1843a:	d054      	beq.n	184e6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xf2>
   1843c:	f8da 0014 	ldr.w	r0, [sl, #20]
   18440:	eb08 0109 	add.w	r1, r8, r9
   18444:	2200      	movs	r2, #0
   18446:	4647      	mov	r7, r8
   18448:	1c43      	adds	r3, r0, #1
   1844a:	4646      	mov	r6, r8
   1844c:	463c      	mov	r4, r7
   1844e:	f914 5b01 	ldrsb.w	r5, [r4], #1
   18452:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   18456:	b2e8      	uxtb	r0, r5
   18458:	dc2e      	bgt.n	184b8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   1845a:	428c      	cmp	r4, r1
   1845c:	d01a      	beq.n	18494 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xa0>
   1845e:	787d      	ldrb	r5, [r7, #1]
   18460:	1cbc      	adds	r4, r7, #2
   18462:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   18466:	4627      	mov	r7, r4
   18468:	f000 0b1f 	and.w	fp, r0, #31
   1846c:	28df      	cmp	r0, #223	; 0xdf
   1846e:	d917      	bls.n	184a0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xac>
   18470:	428f      	cmp	r7, r1
   18472:	d018      	beq.n	184a6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xb2>
   18474:	f817 4b01 	ldrb.w	r4, [r7], #1
   18478:	f004 0c3f 	and.w	ip, r4, #63	; 0x3f
   1847c:	463c      	mov	r4, r7
   1847e:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   18482:	28f0      	cmp	r0, #240	; 0xf0
   18484:	d316      	bcc.n	184b4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc0>
   18486:	428f      	cmp	r7, r1
   18488:	d020      	beq.n	184cc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xd8>
   1848a:	f817 0b01 	ldrb.w	r0, [r7], #1
   1848e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   18492:	e01d      	b.n	184d0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xdc>
   18494:	2500      	movs	r5, #0
   18496:	460f      	mov	r7, r1
   18498:	f000 0b1f 	and.w	fp, r0, #31
   1849c:	28df      	cmp	r0, #223	; 0xdf
   1849e:	d8e7      	bhi.n	18470 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x7c>
   184a0:	ea45 108b 	orr.w	r0, r5, fp, lsl #6
   184a4:	e008      	b.n	184b8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   184a6:	f04f 0c00 	mov.w	ip, #0
   184aa:	460f      	mov	r7, r1
   184ac:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   184b0:	28f0      	cmp	r0, #240	; 0xf0
   184b2:	d2e8      	bcs.n	18486 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x92>
   184b4:	ea45 300b 	orr.w	r0, r5, fp, lsl #12
   184b8:	4627      	mov	r7, r4
   184ba:	3b01      	subs	r3, #1
   184bc:	d065      	beq.n	1858a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x196>
   184be:	1b90      	subs	r0, r2, r6
   184c0:	42b9      	cmp	r1, r7
   184c2:	eb00 0207 	add.w	r2, r0, r7
   184c6:	463e      	mov	r6, r7
   184c8:	d1c0      	bne.n	1844c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x58>
   184ca:	e061      	b.n	18590 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   184cc:	2000      	movs	r0, #0
   184ce:	4627      	mov	r7, r4
   184d0:	f44f 14e0 	mov.w	r4, #1835008	; 0x1c0000
   184d4:	ea04 448b 	and.w	r4, r4, fp, lsl #18
   184d8:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   184dc:	4428      	add	r0, r5
   184de:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   184e2:	d1ea      	bne.n	184ba <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc6>
   184e4:	e054      	b.n	18590 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   184e6:	2200      	movs	r2, #0
   184e8:	f1be 0f01 	cmp.w	lr, #1
   184ec:	d054      	beq.n	18598 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   184ee:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   184f2:	e062      	b.n	185ba <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1c6>
   184f4:	eba0 0309 	sub.w	r3, r0, r9
   184f8:	2100      	movs	r1, #0
   184fa:	4642      	mov	r2, r8
   184fc:	7817      	ldrb	r7, [r2, #0]
   184fe:	7856      	ldrb	r6, [r2, #1]
   18500:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
   18504:	7895      	ldrb	r5, [r2, #2]
   18506:	78d4      	ldrb	r4, [r2, #3]
   18508:	2f80      	cmp	r7, #128	; 0x80
   1850a:	f006 07c0 	and.w	r7, r6, #192	; 0xc0
   1850e:	bf08      	it	eq
   18510:	3101      	addeq	r1, #1
   18512:	2f80      	cmp	r7, #128	; 0x80
   18514:	f005 07c0 	and.w	r7, r5, #192	; 0xc0
   18518:	bf08      	it	eq
   1851a:	3101      	addeq	r1, #1
   1851c:	2f80      	cmp	r7, #128	; 0x80
   1851e:	f004 07c0 	and.w	r7, r4, #192	; 0xc0
   18522:	bf08      	it	eq
   18524:	3101      	addeq	r1, #1
   18526:	2f80      	cmp	r7, #128	; 0x80
   18528:	bf08      	it	eq
   1852a:	3101      	addeq	r1, #1
   1852c:	3204      	adds	r2, #4
   1852e:	3304      	adds	r3, #4
   18530:	d1e4      	bne.n	184fc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x108>
   18532:	b1a8      	cbz	r0, 18560 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   18534:	7813      	ldrb	r3, [r2, #0]
   18536:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1853a:	2b80      	cmp	r3, #128	; 0x80
   1853c:	bf08      	it	eq
   1853e:	3101      	addeq	r1, #1
   18540:	2801      	cmp	r0, #1
   18542:	d00d      	beq.n	18560 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   18544:	7853      	ldrb	r3, [r2, #1]
   18546:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1854a:	2b80      	cmp	r3, #128	; 0x80
   1854c:	bf08      	it	eq
   1854e:	3101      	addeq	r1, #1
   18550:	2802      	cmp	r0, #2
   18552:	d005      	beq.n	18560 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   18554:	7890      	ldrb	r0, [r2, #2]
   18556:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   1855a:	2880      	cmp	r0, #128	; 0x80
   1855c:	bf08      	it	eq
   1855e:	3101      	addeq	r1, #1
   18560:	f8da 000c 	ldr.w	r0, [sl, #12]
   18564:	eba9 0101 	sub.w	r1, r9, r1
   18568:	4281      	cmp	r1, r0
   1856a:	d221      	bcs.n	185b0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   1856c:	f1b9 0f00 	cmp.w	r9, #0
   18570:	d029      	beq.n	185c6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d2>
   18572:	f1a9 0101 	sub.w	r1, r9, #1
   18576:	f009 0c03 	and.w	ip, r9, #3
   1857a:	2903      	cmp	r1, #3
   1857c:	d225      	bcs.n	185ca <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d6>
   1857e:	2100      	movs	r1, #0
   18580:	4643      	mov	r3, r8
   18582:	f1bc 0f00 	cmp.w	ip, #0
   18586:	d142      	bne.n	1860e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x21a>
   18588:	e059      	b.n	1863e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   1858a:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   1858e:	d167      	bne.n	18660 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x26c>
   18590:	464a      	mov	r2, r9
   18592:	f1be 0f01 	cmp.w	lr, #1
   18596:	d1aa      	bne.n	184ee <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   18598:	4691      	mov	r9, r2
   1859a:	f1b9 0f00 	cmp.w	r9, #0
   1859e:	f47f af3b 	bne.w	18418 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24>
   185a2:	2100      	movs	r1, #0
   185a4:	f8da 000c 	ldr.w	r0, [sl, #12]
   185a8:	eba9 0101 	sub.w	r1, r9, r1
   185ac:	4281      	cmp	r1, r0
   185ae:	d3dd      	bcc.n	1856c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x178>
   185b0:	f8da 101c 	ldr.w	r1, [sl, #28]
   185b4:	464a      	mov	r2, r9
   185b6:	f8da 0018 	ldr.w	r0, [sl, #24]
   185ba:	68cb      	ldr	r3, [r1, #12]
   185bc:	4641      	mov	r1, r8
   185be:	b001      	add	sp, #4
   185c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   185c4:	4718      	bx	r3
   185c6:	2100      	movs	r1, #0
   185c8:	e039      	b.n	1863e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   185ca:	ebac 0709 	sub.w	r7, ip, r9
   185ce:	2100      	movs	r1, #0
   185d0:	4643      	mov	r3, r8
   185d2:	781e      	ldrb	r6, [r3, #0]
   185d4:	785d      	ldrb	r5, [r3, #1]
   185d6:	f006 06c0 	and.w	r6, r6, #192	; 0xc0
   185da:	789c      	ldrb	r4, [r3, #2]
   185dc:	78da      	ldrb	r2, [r3, #3]
   185de:	2e80      	cmp	r6, #128	; 0x80
   185e0:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
   185e4:	bf08      	it	eq
   185e6:	3101      	addeq	r1, #1
   185e8:	2e80      	cmp	r6, #128	; 0x80
   185ea:	f004 06c0 	and.w	r6, r4, #192	; 0xc0
   185ee:	bf08      	it	eq
   185f0:	3101      	addeq	r1, #1
   185f2:	2e80      	cmp	r6, #128	; 0x80
   185f4:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   185f8:	bf08      	it	eq
   185fa:	3101      	addeq	r1, #1
   185fc:	2a80      	cmp	r2, #128	; 0x80
   185fe:	bf08      	it	eq
   18600:	3101      	addeq	r1, #1
   18602:	3304      	adds	r3, #4
   18604:	3704      	adds	r7, #4
   18606:	d1e4      	bne.n	185d2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1de>
   18608:	f1bc 0f00 	cmp.w	ip, #0
   1860c:	d017      	beq.n	1863e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   1860e:	781a      	ldrb	r2, [r3, #0]
   18610:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   18614:	2a80      	cmp	r2, #128	; 0x80
   18616:	bf08      	it	eq
   18618:	3101      	addeq	r1, #1
   1861a:	f1bc 0f01 	cmp.w	ip, #1
   1861e:	d00e      	beq.n	1863e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   18620:	785a      	ldrb	r2, [r3, #1]
   18622:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   18626:	2a80      	cmp	r2, #128	; 0x80
   18628:	bf08      	it	eq
   1862a:	3101      	addeq	r1, #1
   1862c:	f1bc 0f02 	cmp.w	ip, #2
   18630:	d005      	beq.n	1863e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   18632:	789a      	ldrb	r2, [r3, #2]
   18634:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   18638:	2a80      	cmp	r2, #128	; 0x80
   1863a:	bf08      	it	eq
   1863c:	3101      	addeq	r1, #1
   1863e:	f89a 3020 	ldrb.w	r3, [sl, #32]
   18642:	eba1 0109 	sub.w	r1, r1, r9
   18646:	4401      	add	r1, r0
   18648:	2000      	movs	r0, #0
   1864a:	1eda      	subs	r2, r3, #3
   1864c:	bf18      	it	ne
   1864e:	461a      	movne	r2, r3
   18650:	460e      	mov	r6, r1
   18652:	e8df f002 	tbb	[pc, r2]
   18656:	0216      	.short	0x0216
   18658:	0213      	.short	0x0213
   1865a:	2600      	movs	r6, #0
   1865c:	4608      	mov	r0, r1
   1865e:	e010      	b.n	18682 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x28e>
   18660:	2a00      	cmp	r2, #0
   18662:	bf18      	it	ne
   18664:	454a      	cmpne	r2, r9
   18666:	d134      	bne.n	186d2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2de>
   18668:	4640      	mov	r0, r8
   1866a:	2800      	cmp	r0, #0
   1866c:	bf0c      	ite	eq
   1866e:	464a      	moveq	r2, r9
   18670:	4680      	movne	r8, r0
   18672:	f1be 0f01 	cmp.w	lr, #1
   18676:	f43f af8f 	beq.w	18598 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   1867a:	e738      	b.n	184ee <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   1867c:	0848      	lsrs	r0, r1, #1
   1867e:	3101      	adds	r1, #1
   18680:	084e      	lsrs	r6, r1, #1
   18682:	1c44      	adds	r4, r0, #1
   18684:	3c01      	subs	r4, #1
   18686:	d008      	beq.n	1869a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2a6>
   18688:	e9da 0206 	ldrd	r0, r2, [sl, #24]
   1868c:	f8da 1004 	ldr.w	r1, [sl, #4]
   18690:	6912      	ldr	r2, [r2, #16]
   18692:	4790      	blx	r2
   18694:	2800      	cmp	r0, #0
   18696:	d0f5      	beq.n	18684 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x290>
   18698:	e013      	b.n	186c2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   1869a:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   1869e:	464a      	mov	r2, r9
   186a0:	68cb      	ldr	r3, [r1, #12]
   186a2:	4641      	mov	r1, r8
   186a4:	f8da 7004 	ldr.w	r7, [sl, #4]
   186a8:	4798      	blx	r3
   186aa:	b950      	cbnz	r0, 186c2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   186ac:	e9da 4506 	ldrd	r4, r5, [sl, #24]
   186b0:	3601      	adds	r6, #1
   186b2:	3e01      	subs	r6, #1
   186b4:	d009      	beq.n	186ca <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2d6>
   186b6:	692a      	ldr	r2, [r5, #16]
   186b8:	4620      	mov	r0, r4
   186ba:	4639      	mov	r1, r7
   186bc:	4790      	blx	r2
   186be:	2800      	cmp	r0, #0
   186c0:	d0f7      	beq.n	186b2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2be>
   186c2:	2001      	movs	r0, #1
   186c4:	b001      	add	sp, #4
   186c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   186ca:	2000      	movs	r0, #0
   186cc:	b001      	add	sp, #4
   186ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   186d2:	454a      	cmp	r2, r9
   186d4:	d204      	bcs.n	186e0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ec>
   186d6:	f918 0002 	ldrsb.w	r0, [r8, r2]
   186da:	f110 0f40 	cmn.w	r0, #64	; 0x40
   186de:	dac3      	bge.n	18668 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x274>
   186e0:	2000      	movs	r0, #0
   186e2:	2200      	movs	r2, #0
   186e4:	2800      	cmp	r0, #0
   186e6:	bf0c      	ite	eq
   186e8:	464a      	moveq	r2, r9
   186ea:	4680      	movne	r8, r0
   186ec:	f1be 0f01 	cmp.w	lr, #1
   186f0:	f43f af52 	beq.w	18598 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   186f4:	e6fb      	b.n	184ee <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>

000186f6 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>:
   186f6:	7800      	ldrb	r0, [r0, #0]
   186f8:	f3c0 1000 	ubfx	r0, r0, #4, #1
   186fc:	4770      	bx	lr

000186fe <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>:
   186fe:	7800      	ldrb	r0, [r0, #0]
   18700:	f3c0 1040 	ubfx	r0, r0, #5, #1
   18704:	4770      	bx	lr

00018706 <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>:
   18706:	b570      	push	{r4, r5, r6, lr}
   18708:	460d      	mov	r5, r1
   1870a:	4606      	mov	r6, r0
   1870c:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   18710:	461c      	mov	r4, r3
   18712:	68cb      	ldr	r3, [r1, #12]
   18714:	4611      	mov	r1, r2
   18716:	4622      	mov	r2, r4
   18718:	4798      	blx	r3
   1871a:	7230      	strb	r0, [r6, #8]
   1871c:	fab4 f084 	clz	r0, r4
   18720:	0940      	lsrs	r0, r0, #5
   18722:	7270      	strb	r0, [r6, #9]
   18724:	2000      	movs	r0, #0
   18726:	e9c6 5000 	strd	r5, r0, [r6]
   1872a:	bd70      	pop	{r4, r5, r6, pc}

0001872c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E>:
   1872c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18730:	b085      	sub	sp, #20
   18732:	460c      	mov	r4, r1
   18734:	4605      	mov	r5, r0
   18736:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   1873a:	690a      	ldr	r2, [r1, #16]
   1873c:	2127      	movs	r1, #39	; 0x27
   1873e:	4790      	blx	r2
   18740:	b118      	cbz	r0, 1874a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x1e>
   18742:	2001      	movs	r0, #1
   18744:	b005      	add	sp, #20
   18746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1874a:	6829      	ldr	r1, [r5, #0]
   1874c:	a801      	add	r0, sp, #4
   1874e:	2201      	movs	r2, #1
   18750:	f7ff f85c 	bl	1780c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>
   18754:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   18758:	f04f 091c 	mov.w	r9, #28
   1875c:	f8dd 800c 	ldr.w	r8, [sp, #12]
   18760:	f5b5 1f88 	cmp.w	r5, #1114112	; 0x110000
   18764:	f89d 6010 	ldrb.w	r6, [sp, #16]
   18768:	d139      	bne.n	187de <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xb2>
   1876a:	f44f 1588 	mov.w	r5, #1114112	; 0x110000
   1876e:	2f02      	cmp	r7, #2
   18770:	f0c0 806b 	bcc.w	1884a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x11e>
   18774:	d00c      	beq.n	18790 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x64>
   18776:	b2f0      	uxtb	r0, r6
   18778:	2604      	movs	r6, #4
   1877a:	2703      	movs	r7, #3
   1877c:	215c      	movs	r1, #92	; 0x5c
   1877e:	e8df f000 	tbb	[pc, r0]
   18782:	0364      	.short	0x0364
   18784:	09242010 	.word	0x09242010
   18788:	2600      	movs	r6, #0
   1878a:	2703      	movs	r7, #3
   1878c:	217d      	movs	r1, #125	; 0x7d
   1878e:	e001      	b.n	18794 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   18790:	2701      	movs	r7, #1
   18792:	215c      	movs	r1, #92	; 0x5c
   18794:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   18798:	6912      	ldr	r2, [r2, #16]
   1879a:	4790      	blx	r2
   1879c:	2800      	cmp	r0, #0
   1879e:	d0e6      	beq.n	1876e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x42>
   187a0:	e7cf      	b.n	18742 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   187a2:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   187a6:	2602      	movs	r6, #2
   187a8:	2703      	movs	r7, #3
   187aa:	f1b8 0f00 	cmp.w	r8, #0
   187ae:	fa25 f100 	lsr.w	r1, r5, r0
   187b2:	bf08      	it	eq
   187b4:	2601      	moveq	r6, #1
   187b6:	bf18      	it	ne
   187b8:	f1a8 0801 	subne.w	r8, r8, #1
   187bc:	f367 111f 	bfi	r1, r7, #4, #28
   187c0:	e7e8      	b.n	18794 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   187c2:	2602      	movs	r6, #2
   187c4:	2703      	movs	r7, #3
   187c6:	217b      	movs	r1, #123	; 0x7b
   187c8:	e7e4      	b.n	18794 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   187ca:	2703      	movs	r7, #3
   187cc:	2175      	movs	r1, #117	; 0x75
   187ce:	2603      	movs	r6, #3
   187d0:	e7e0      	b.n	18794 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   187d2:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   187d6:	6912      	ldr	r2, [r2, #16]
   187d8:	4790      	blx	r2
   187da:	2800      	cmp	r0, #0
   187dc:	d1b1      	bne.n	18742 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   187de:	4638      	mov	r0, r7
   187e0:	2701      	movs	r7, #1
   187e2:	215c      	movs	r1, #92	; 0x5c
   187e4:	e8df f000 	tbb	[pc, r0]
   187e8:	06020331 	.word	0x06020331
   187ec:	e7f1      	b.n	187d2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   187ee:	2700      	movs	r7, #0
   187f0:	4629      	mov	r1, r5
   187f2:	e7ee      	b.n	187d2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   187f4:	b2f0      	uxtb	r0, r6
   187f6:	2604      	movs	r6, #4
   187f8:	2703      	movs	r7, #3
   187fa:	215c      	movs	r1, #92	; 0x5c
   187fc:	e8df f000 	tbb	[pc, r0]
   18800:	1d080425 	.word	0x1d080425
   18804:	0321      	.short	0x0321
   18806:	e7e4      	b.n	187d2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   18808:	2600      	movs	r6, #0
   1880a:	2703      	movs	r7, #3
   1880c:	217d      	movs	r1, #125	; 0x7d
   1880e:	e7e0      	b.n	187d2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   18810:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   18814:	2602      	movs	r6, #2
   18816:	2703      	movs	r7, #3
   18818:	fa25 f000 	lsr.w	r0, r5, r0
   1881c:	f000 000f 	and.w	r0, r0, #15
   18820:	f100 0157 	add.w	r1, r0, #87	; 0x57
   18824:	280a      	cmp	r0, #10
   18826:	bf38      	it	cc
   18828:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   1882c:	f1b8 0f00 	cmp.w	r8, #0
   18830:	bf0c      	ite	eq
   18832:	2601      	moveq	r6, #1
   18834:	f1a8 0801 	subne.w	r8, r8, #1
   18838:	e7cb      	b.n	187d2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   1883a:	2602      	movs	r6, #2
   1883c:	2703      	movs	r7, #3
   1883e:	217b      	movs	r1, #123	; 0x7b
   18840:	e7c7      	b.n	187d2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   18842:	2703      	movs	r7, #3
   18844:	2175      	movs	r1, #117	; 0x75
   18846:	2603      	movs	r6, #3
   18848:	e7c3      	b.n	187d2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   1884a:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   1884e:	690a      	ldr	r2, [r1, #16]
   18850:	2127      	movs	r1, #39	; 0x27
   18852:	b005      	add	sp, #20
   18854:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18858:	4710      	bx	r2

0001885a <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>:
   1885a:	b08c      	sub	sp, #48	; 0x30
   1885c:	e9cd 0100 	strd	r0, r1, [sp]
   18860:	2002      	movs	r0, #2
   18862:	a908      	add	r1, sp, #32
   18864:	9007      	str	r0, [sp, #28]
   18866:	9106      	str	r1, [sp, #24]
   18868:	2100      	movs	r1, #0
   1886a:	9105      	str	r1, [sp, #20]
   1886c:	e9cd 0103 	strd	r0, r1, [sp, #12]
   18870:	f241 60e8 	movw	r0, #5864	; 0x16e8
   18874:	f2c0 0002 	movt	r0, #2
   18878:	a901      	add	r1, sp, #4
   1887a:	9002      	str	r0, [sp, #8]
   1887c:	f249 7035 	movw	r0, #38709	; 0x9735
   18880:	f2c0 0001 	movt	r0, #1
   18884:	900b      	str	r0, [sp, #44]	; 0x2c
   18886:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   1888a:	4668      	mov	r0, sp
   1888c:	f241 61f8 	movw	r1, #5880	; 0x16f8
   18890:	9008      	str	r0, [sp, #32]
   18892:	a802      	add	r0, sp, #8
   18894:	f2c0 0102 	movt	r1, #2
   18898:	f7ff f8c2 	bl	17a20 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1889c:	defe      	udf	#254	; 0xfe

0001889e <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>:
   1889e:	b08c      	sub	sp, #48	; 0x30
   188a0:	e9cd 0100 	strd	r0, r1, [sp]
   188a4:	2002      	movs	r0, #2
   188a6:	a908      	add	r1, sp, #32
   188a8:	9007      	str	r0, [sp, #28]
   188aa:	9106      	str	r1, [sp, #24]
   188ac:	2100      	movs	r1, #0
   188ae:	9105      	str	r1, [sp, #20]
   188b0:	e9cd 0103 	strd	r0, r1, [sp, #12]
   188b4:	f241 702c 	movw	r0, #5932	; 0x172c
   188b8:	f2c0 0002 	movt	r0, #2
   188bc:	a901      	add	r1, sp, #4
   188be:	9002      	str	r0, [sp, #8]
   188c0:	f249 7035 	movw	r0, #38709	; 0x9735
   188c4:	f2c0 0001 	movt	r0, #1
   188c8:	900b      	str	r0, [sp, #44]	; 0x2c
   188ca:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   188ce:	4668      	mov	r0, sp
   188d0:	f241 713c 	movw	r1, #5948	; 0x173c
   188d4:	9008      	str	r0, [sp, #32]
   188d6:	a802      	add	r0, sp, #8
   188d8:	f2c0 0102 	movt	r1, #2
   188dc:	f7ff f8a0 	bl	17a20 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   188e0:	defe      	udf	#254	; 0xfe

000188e2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>:
   188e2:	b09a      	sub	sp, #104	; 0x68
   188e4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   188e8:	e9cd 2300 	strd	r2, r3, [sp]
   188ec:	d802      	bhi.n	188f4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12>
   188ee:	2501      	movs	r5, #1
   188f0:	468c      	mov	ip, r1
   188f2:	e03e      	b.n	18972 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   188f4:	f1c1 0e00 	rsb	lr, r1, #0
   188f8:	f44f 7c80 	mov.w	ip, #256	; 0x100
   188fc:	458c      	cmp	ip, r1
   188fe:	d205      	bcs.n	1890c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2a>
   18900:	f910 400c 	ldrsb.w	r4, [r0, ip]
   18904:	f114 0f41 	cmn.w	r4, #65	; 0x41
   18908:	f300 8108 	bgt.w	18b1c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23a>
   1890c:	eb0e 040c 	add.w	r4, lr, ip
   18910:	f1ac 0601 	sub.w	r6, ip, #1
   18914:	2c01      	cmp	r4, #1
   18916:	d02a      	beq.n	1896e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   18918:	428e      	cmp	r6, r1
   1891a:	d206      	bcs.n	1892a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x48>
   1891c:	eb00 050c 	add.w	r5, r0, ip
   18920:	f915 5c01 	ldrsb.w	r5, [r5, #-1]
   18924:	f115 0f41 	cmn.w	r5, #65	; 0x41
   18928:	dc21      	bgt.n	1896e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   1892a:	f1ac 0602 	sub.w	r6, ip, #2
   1892e:	2c02      	cmp	r4, #2
   18930:	d01d      	beq.n	1896e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   18932:	428e      	cmp	r6, r1
   18934:	d206      	bcs.n	18944 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x62>
   18936:	eb00 050c 	add.w	r5, r0, ip
   1893a:	f915 5c02 	ldrsb.w	r5, [r5, #-2]
   1893e:	f115 0f41 	cmn.w	r5, #65	; 0x41
   18942:	dc14      	bgt.n	1896e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   18944:	f1ac 0603 	sub.w	r6, ip, #3
   18948:	2c03      	cmp	r4, #3
   1894a:	d010      	beq.n	1896e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   1894c:	428e      	cmp	r6, r1
   1894e:	d206      	bcs.n	1895e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x7c>
   18950:	eb00 050c 	add.w	r5, r0, ip
   18954:	f915 5c03 	ldrsb.w	r5, [r5, #-3]
   18958:	f115 0f41 	cmn.w	r5, #65	; 0x41
   1895c:	dc07      	bgt.n	1896e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   1895e:	f1bc 0c04 	subs.w	ip, ip, #4
   18962:	f04f 0500 	mov.w	r5, #0
   18966:	d004      	beq.n	18972 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   18968:	2c04      	cmp	r4, #4
   1896a:	d1c7      	bne.n	188fc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1a>
   1896c:	e001      	b.n	18972 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   1896e:	2500      	movs	r5, #0
   18970:	46b4      	mov	ip, r6
   18972:	2605      	movs	r6, #5
   18974:	2d00      	cmp	r5, #0
   18976:	f641 050a 	movw	r5, #6154	; 0x180a
   1897a:	e9cd 0c02 	strd	r0, ip, [sp, #8]
   1897e:	bf18      	it	ne
   18980:	2600      	movne	r6, #0
   18982:	9605      	str	r6, [sp, #20]
   18984:	f241 3654 	movw	r6, #4948	; 0x1354
   18988:	f2c0 0502 	movt	r5, #2
   1898c:	f2c0 0602 	movt	r6, #2
   18990:	bf18      	it	ne
   18992:	4635      	movne	r5, r6
   18994:	428a      	cmp	r2, r1
   18996:	9504      	str	r5, [sp, #16]
   18998:	bf98      	it	ls
   1899a:	428b      	cmpls	r3, r1
   1899c:	d92a      	bls.n	189f4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x112>
   1899e:	428a      	cmp	r2, r1
   189a0:	f04f 0003 	mov.w	r0, #3
   189a4:	a910      	add	r1, sp, #64	; 0x40
   189a6:	bf88      	it	hi
   189a8:	4613      	movhi	r3, r2
   189aa:	900f      	str	r0, [sp, #60]	; 0x3c
   189ac:	910e      	str	r1, [sp, #56]	; 0x38
   189ae:	2100      	movs	r1, #0
   189b0:	910d      	str	r1, [sp, #52]	; 0x34
   189b2:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   189b6:	f641 0030 	movw	r0, #6192	; 0x1830
   189ba:	f2c0 0002 	movt	r0, #2
   189be:	a904      	add	r1, sp, #16
   189c0:	900a      	str	r0, [sp, #40]	; 0x28
   189c2:	f649 0023 	movw	r0, #38947	; 0x9823
   189c6:	f2c0 0001 	movt	r0, #1
   189ca:	9308      	str	r3, [sp, #32]
   189cc:	9015      	str	r0, [sp, #84]	; 0x54
   189ce:	e9cd 0113 	strd	r0, r1, [sp, #76]	; 0x4c
   189d2:	a802      	add	r0, sp, #8
   189d4:	f641 0148 	movw	r1, #6216	; 0x1848
   189d8:	9012      	str	r0, [sp, #72]	; 0x48
   189da:	f249 7035 	movw	r0, #38709	; 0x9735
   189de:	f2c0 0102 	movt	r1, #2
   189e2:	f2c0 0001 	movt	r0, #1
   189e6:	9011      	str	r0, [sp, #68]	; 0x44
   189e8:	a808      	add	r0, sp, #32
   189ea:	9010      	str	r0, [sp, #64]	; 0x40
   189ec:	a80a      	add	r0, sp, #40	; 0x28
   189ee:	f7ff f817 	bl	17a20 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   189f2:	defe      	udf	#254	; 0xfe
   189f4:	429a      	cmp	r2, r3
   189f6:	f200 80f1 	bhi.w	18bdc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2fa>
   189fa:	2a00      	cmp	r2, #0
   189fc:	bf18      	it	ne
   189fe:	4291      	cmpne	r1, r2
   18a00:	d109      	bne.n	18a16 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x134>
   18a02:	461a      	mov	r2, r3
   18a04:	2a00      	cmp	r2, #0
   18a06:	9206      	str	r2, [sp, #24]
   18a08:	bf18      	it	ne
   18a0a:	428a      	cmpne	r2, r1
   18a0c:	d10e      	bne.n	18a2c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x14a>
   18a0e:	4613      	mov	r3, r2
   18a10:	428b      	cmp	r3, r1
   18a12:	d047      	beq.n	18aa4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   18a14:	e052      	b.n	18abc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   18a16:	d9f5      	bls.n	18a04 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x122>
   18a18:	5686      	ldrsb	r6, [r0, r2]
   18a1a:	f116 0f40 	cmn.w	r6, #64	; 0x40
   18a1e:	bfa8      	it	ge
   18a20:	461a      	movge	r2, r3
   18a22:	2a00      	cmp	r2, #0
   18a24:	9206      	str	r2, [sp, #24]
   18a26:	bf18      	it	ne
   18a28:	428a      	cmpne	r2, r1
   18a2a:	d0f0      	beq.n	18a0e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   18a2c:	f1a0 0c01 	sub.w	ip, r0, #1
   18a30:	f101 0e02 	add.w	lr, r1, #2
   18a34:	1ccc      	adds	r4, r1, #3
   18a36:	1c4d      	adds	r5, r1, #1
   18a38:	1d0e      	adds	r6, r1, #4
   18a3a:	428a      	cmp	r2, r1
   18a3c:	d206      	bcs.n	18a4c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x16a>
   18a3e:	eb0c 0302 	add.w	r3, ip, r2
   18a42:	f993 3001 	ldrsb.w	r3, [r3, #1]
   18a46:	f113 0f41 	cmn.w	r3, #65	; 0x41
   18a4a:	dce0      	bgt.n	18a0e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   18a4c:	1e53      	subs	r3, r2, #1
   18a4e:	bf18      	it	ne
   18a50:	4295      	cmpne	r5, r2
   18a52:	d025      	beq.n	18aa0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   18a54:	428b      	cmp	r3, r1
   18a56:	d204      	bcs.n	18a62 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x180>
   18a58:	f91c 7002 	ldrsb.w	r7, [ip, r2]
   18a5c:	f117 0f41 	cmn.w	r7, #65	; 0x41
   18a60:	dc1e      	bgt.n	18aa0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   18a62:	1e93      	subs	r3, r2, #2
   18a64:	bf18      	it	ne
   18a66:	4596      	cmpne	lr, r2
   18a68:	d01a      	beq.n	18aa0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   18a6a:	428b      	cmp	r3, r1
   18a6c:	d206      	bcs.n	18a7c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x19a>
   18a6e:	eb0c 0702 	add.w	r7, ip, r2
   18a72:	f917 7c01 	ldrsb.w	r7, [r7, #-1]
   18a76:	f117 0f41 	cmn.w	r7, #65	; 0x41
   18a7a:	dc11      	bgt.n	18aa0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   18a7c:	1ed3      	subs	r3, r2, #3
   18a7e:	bf18      	it	ne
   18a80:	4294      	cmpne	r4, r2
   18a82:	d00d      	beq.n	18aa0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   18a84:	428b      	cmp	r3, r1
   18a86:	d206      	bcs.n	18a96 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1b4>
   18a88:	eb0c 0702 	add.w	r7, ip, r2
   18a8c:	f917 7c02 	ldrsb.w	r7, [r7, #-2]
   18a90:	f117 0f41 	cmn.w	r7, #65	; 0x41
   18a94:	dc04      	bgt.n	18aa0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   18a96:	1f13      	subs	r3, r2, #4
   18a98:	d002      	beq.n	18aa0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   18a9a:	4296      	cmp	r6, r2
   18a9c:	461a      	mov	r2, r3
   18a9e:	d1cc      	bne.n	18a3a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x158>
   18aa0:	428b      	cmp	r3, r1
   18aa2:	d10b      	bne.n	18abc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   18aa4:	f241 40f0 	movw	r0, #5360	; 0x14f0
   18aa8:	f641 0298 	movw	r2, #6296	; 0x1898
   18aac:	f2c0 0002 	movt	r0, #2
   18ab0:	f2c0 0202 	movt	r2, #2
   18ab4:	212b      	movs	r1, #43	; 0x2b
   18ab6:	f7fe ff7d 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   18aba:	defe      	udf	#254	; 0xfe
   18abc:	18c5      	adds	r5, r0, r3
   18abe:	462e      	mov	r6, r5
   18ac0:	f916 4b01 	ldrsb.w	r4, [r6], #1
   18ac4:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   18ac8:	b2e2      	uxtb	r2, r4
   18aca:	dd02      	ble.n	18ad2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1f0>
   18acc:	9207      	str	r2, [sp, #28]
   18ace:	2101      	movs	r1, #1
   18ad0:	e04d      	b.n	18b6e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   18ad2:	4408      	add	r0, r1
   18ad4:	4286      	cmp	r6, r0
   18ad6:	d10b      	bne.n	18af0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x20e>
   18ad8:	2500      	movs	r5, #0
   18ada:	4606      	mov	r6, r0
   18adc:	f002 011f 	and.w	r1, r2, #31
   18ae0:	2adf      	cmp	r2, #223	; 0xdf
   18ae2:	d80d      	bhi.n	18b00 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x21e>
   18ae4:	ea45 1081 	orr.w	r0, r5, r1, lsl #6
   18ae8:	2880      	cmp	r0, #128	; 0x80
   18aea:	9007      	str	r0, [sp, #28]
   18aec:	d333      	bcc.n	18b56 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   18aee:	e034      	b.n	18b5a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   18af0:	7869      	ldrb	r1, [r5, #1]
   18af2:	1cae      	adds	r6, r5, #2
   18af4:	f001 053f 	and.w	r5, r1, #63	; 0x3f
   18af8:	f002 011f 	and.w	r1, r2, #31
   18afc:	2adf      	cmp	r2, #223	; 0xdf
   18afe:	d9f1      	bls.n	18ae4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x202>
   18b00:	4286      	cmp	r6, r0
   18b02:	d10d      	bne.n	18b20 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23e>
   18b04:	2400      	movs	r4, #0
   18b06:	4606      	mov	r6, r0
   18b08:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   18b0c:	2af0      	cmp	r2, #240	; 0xf0
   18b0e:	d20f      	bcs.n	18b30 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x24e>
   18b10:	ea45 3001 	orr.w	r0, r5, r1, lsl #12
   18b14:	2880      	cmp	r0, #128	; 0x80
   18b16:	9007      	str	r0, [sp, #28]
   18b18:	d31d      	bcc.n	18b56 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   18b1a:	e01e      	b.n	18b5a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   18b1c:	2500      	movs	r5, #0
   18b1e:	e728      	b.n	18972 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   18b20:	f816 4b01 	ldrb.w	r4, [r6], #1
   18b24:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   18b28:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   18b2c:	2af0      	cmp	r2, #240	; 0xf0
   18b2e:	d3ef      	bcc.n	18b10 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x22e>
   18b30:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
   18b34:	ea02 4181 	and.w	r1, r2, r1, lsl #18
   18b38:	4286      	cmp	r6, r0
   18b3a:	bf1a      	itte	ne
   18b3c:	7830      	ldrbne	r0, [r6, #0]
   18b3e:	f000 003f 	andne.w	r0, r0, #63	; 0x3f
   18b42:	2000      	moveq	r0, #0
   18b44:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
   18b48:	4408      	add	r0, r1
   18b4a:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   18b4e:	d0a9      	beq.n	18aa4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   18b50:	2880      	cmp	r0, #128	; 0x80
   18b52:	9007      	str	r0, [sp, #28]
   18b54:	d201      	bcs.n	18b5a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   18b56:	2101      	movs	r1, #1
   18b58:	e009      	b.n	18b6e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   18b5a:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   18b5e:	d201      	bcs.n	18b64 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x282>
   18b60:	2102      	movs	r1, #2
   18b62:	e004      	b.n	18b6e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   18b64:	2104      	movs	r1, #4
   18b66:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   18b6a:	bf38      	it	cc
   18b6c:	2103      	movcc	r1, #3
   18b6e:	4419      	add	r1, r3
   18b70:	aa10      	add	r2, sp, #64	; 0x40
   18b72:	a808      	add	r0, sp, #32
   18b74:	e9cd 3108 	strd	r3, r1, [sp, #32]
   18b78:	2105      	movs	r1, #5
   18b7a:	910f      	str	r1, [sp, #60]	; 0x3c
   18b7c:	920e      	str	r2, [sp, #56]	; 0x38
   18b7e:	2200      	movs	r2, #0
   18b80:	920d      	str	r2, [sp, #52]	; 0x34
   18b82:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
   18b86:	f641 01d4 	movw	r1, #6356	; 0x18d4
   18b8a:	f2c0 0102 	movt	r1, #2
   18b8e:	aa04      	add	r2, sp, #16
   18b90:	910a      	str	r1, [sp, #40]	; 0x28
   18b92:	f649 0123 	movw	r1, #38947	; 0x9823
   18b96:	f2c0 0101 	movt	r1, #1
   18b9a:	9119      	str	r1, [sp, #100]	; 0x64
   18b9c:	e9cd 1217 	strd	r1, r2, [sp, #92]	; 0x5c
   18ba0:	a902      	add	r1, sp, #8
   18ba2:	9116      	str	r1, [sp, #88]	; 0x58
   18ba4:	f247 71ad 	movw	r1, #30637	; 0x77ad
   18ba8:	f2c0 0101 	movt	r1, #1
   18bac:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   18bb0:	f248 702d 	movw	r0, #34605	; 0x872d
   18bb4:	f2c0 0001 	movt	r0, #1
   18bb8:	f641 01fc 	movw	r1, #6396	; 0x18fc
   18bbc:	9013      	str	r0, [sp, #76]	; 0x4c
   18bbe:	a807      	add	r0, sp, #28
   18bc0:	9012      	str	r0, [sp, #72]	; 0x48
   18bc2:	f249 7035 	movw	r0, #38709	; 0x9735
   18bc6:	f2c0 0001 	movt	r0, #1
   18bca:	f2c0 0102 	movt	r1, #2
   18bce:	9011      	str	r0, [sp, #68]	; 0x44
   18bd0:	a806      	add	r0, sp, #24
   18bd2:	9010      	str	r0, [sp, #64]	; 0x40
   18bd4:	a80a      	add	r0, sp, #40	; 0x28
   18bd6:	f7fe ff23 	bl	17a20 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   18bda:	defe      	udf	#254	; 0xfe
   18bdc:	2004      	movs	r0, #4
   18bde:	a910      	add	r1, sp, #64	; 0x40
   18be0:	900f      	str	r0, [sp, #60]	; 0x3c
   18be2:	910e      	str	r1, [sp, #56]	; 0x38
   18be4:	2100      	movs	r1, #0
   18be6:	910d      	str	r1, [sp, #52]	; 0x34
   18be8:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   18bec:	f641 0068 	movw	r0, #6248	; 0x1868
   18bf0:	f2c0 0002 	movt	r0, #2
   18bf4:	a904      	add	r1, sp, #16
   18bf6:	900a      	str	r0, [sp, #40]	; 0x28
   18bf8:	f649 0023 	movw	r0, #38947	; 0x9823
   18bfc:	f2c0 0001 	movt	r0, #1
   18c00:	9017      	str	r0, [sp, #92]	; 0x5c
   18c02:	e9cd 0115 	strd	r0, r1, [sp, #84]	; 0x54
   18c06:	a802      	add	r0, sp, #8
   18c08:	9014      	str	r0, [sp, #80]	; 0x50
   18c0a:	f249 7035 	movw	r0, #38709	; 0x9735
   18c0e:	a901      	add	r1, sp, #4
   18c10:	f2c0 0001 	movt	r0, #1
   18c14:	9013      	str	r0, [sp, #76]	; 0x4c
   18c16:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
   18c1a:	f641 0188 	movw	r1, #6280	; 0x1888
   18c1e:	4668      	mov	r0, sp
   18c20:	f2c0 0102 	movt	r1, #2
   18c24:	9010      	str	r0, [sp, #64]	; 0x40
   18c26:	a80a      	add	r0, sp, #40	; 0x28
   18c28:	f7fe fefa 	bl	17a20 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   18c2c:	defe      	udf	#254	; 0xfe

00018c2e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>:
   18c2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18c32:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   18c36:	d270      	bcs.n	18d1a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xec>
   18c38:	f641 1e1c 	movw	lr, #6428	; 0x191c
   18c3c:	f641 186e 	movw	r8, #6510	; 0x196e
   18c40:	fa1f f980 	uxth.w	r9, r0
   18c44:	f2c0 0e02 	movt	lr, #2
   18c48:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   18c4c:	f04f 0a00 	mov.w	sl, #0
   18c50:	f2c0 0802 	movt	r8, #2
   18c54:	4675      	mov	r5, lr
   18c56:	786e      	ldrb	r6, [r5, #1]
   18c58:	4652      	mov	r2, sl
   18c5a:	782b      	ldrb	r3, [r5, #0]
   18c5c:	3502      	adds	r5, #2
   18c5e:	44b2      	add	sl, r6
   18c60:	4563      	cmp	r3, ip
   18c62:	d129      	bne.n	18cb8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x8a>
   18c64:	4592      	cmp	sl, r2
   18c66:	f0c0 8112 	bcc.w	18e8e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   18c6a:	ea4f 035a 	mov.w	r3, sl, lsr #1
   18c6e:	2b92      	cmp	r3, #146	; 0x92
   18c70:	f200 8112 	bhi.w	18e98 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x26a>
   18c74:	eb08 0302 	add.w	r3, r8, r2
   18c78:	199a      	adds	r2, r3, r6
   18c7a:	b31e      	cbz	r6, 18cc4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   18c7c:	461f      	mov	r7, r3
   18c7e:	b2c4      	uxtb	r4, r0
   18c80:	f817 1b01 	ldrb.w	r1, [r7], #1
   18c84:	42a1      	cmp	r1, r4
   18c86:	f000 80b6 	beq.w	18df6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   18c8a:	4297      	cmp	r7, r2
   18c8c:	d01a      	beq.n	18cc4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   18c8e:	7859      	ldrb	r1, [r3, #1]
   18c90:	42a1      	cmp	r1, r4
   18c92:	f000 80b0 	beq.w	18df6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   18c96:	1c99      	adds	r1, r3, #2
   18c98:	4291      	cmp	r1, r2
   18c9a:	d013      	beq.n	18cc4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   18c9c:	7899      	ldrb	r1, [r3, #2]
   18c9e:	42a1      	cmp	r1, r4
   18ca0:	f000 80a9 	beq.w	18df6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   18ca4:	1cd9      	adds	r1, r3, #3
   18ca6:	4291      	cmp	r1, r2
   18ca8:	d00c      	beq.n	18cc4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   18caa:	1d19      	adds	r1, r3, #4
   18cac:	78db      	ldrb	r3, [r3, #3]
   18cae:	3e04      	subs	r6, #4
   18cb0:	42a3      	cmp	r3, r4
   18cb2:	460b      	mov	r3, r1
   18cb4:	d1e1      	bne.n	18c7a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x4c>
   18cb6:	e09e      	b.n	18df6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   18cb8:	d808      	bhi.n	18ccc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   18cba:	f10e 0252 	add.w	r2, lr, #82	; 0x52
   18cbe:	4295      	cmp	r5, r2
   18cc0:	d1c9      	bne.n	18c56 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   18cc2:	e003      	b.n	18ccc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   18cc4:	f10e 0152 	add.w	r1, lr, #82	; 0x52
   18cc8:	428d      	cmp	r5, r1
   18cca:	d1c4      	bne.n	18c56 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   18ccc:	f641 2593 	movw	r5, #6803	; 0x1a93
   18cd0:	2101      	movs	r1, #1
   18cd2:	f2c0 0502 	movt	r5, #2
   18cd6:	4628      	mov	r0, r5
   18cd8:	4602      	mov	r2, r0
   18cda:	f812 7b01 	ldrb.w	r7, [r2], #1
   18cde:	b27e      	sxtb	r6, r7
   18ce0:	2e00      	cmp	r6, #0
   18ce2:	d404      	bmi.n	18cee <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xc0>
   18ce4:	4610      	mov	r0, r2
   18ce6:	ebb9 0907 	subs.w	r9, r9, r7
   18cea:	d50f      	bpl.n	18d0c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xde>
   18cec:	e0bd      	b.n	18e6a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18cee:	f505 739d 	add.w	r3, r5, #314	; 0x13a
   18cf2:	429a      	cmp	r2, r3
   18cf4:	f000 80db 	beq.w	18eae <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   18cf8:	7842      	ldrb	r2, [r0, #1]
   18cfa:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   18cfe:	3002      	adds	r0, #2
   18d00:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   18d04:	ebb9 0907 	subs.w	r9, r9, r7
   18d08:	f100 80af 	bmi.w	18e6a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18d0c:	f505 729d 	add.w	r2, r5, #314	; 0x13a
   18d10:	f081 0101 	eor.w	r1, r1, #1
   18d14:	4290      	cmp	r0, r2
   18d16:	d1df      	bne.n	18cd8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xaa>
   18d18:	e0a7      	b.n	18e6a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18d1a:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
   18d1e:	d26f      	bcs.n	18e00 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1d2>
   18d20:	f641 3ecd 	movw	lr, #7117	; 0x1bcd
   18d24:	f641 4813 	movw	r8, #7187	; 0x1c13
   18d28:	fa1f f980 	uxth.w	r9, r0
   18d2c:	f2c0 0e02 	movt	lr, #2
   18d30:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   18d34:	f04f 0a00 	mov.w	sl, #0
   18d38:	f2c0 0802 	movt	r8, #2
   18d3c:	4675      	mov	r5, lr
   18d3e:	786e      	ldrb	r6, [r5, #1]
   18d40:	4652      	mov	r2, sl
   18d42:	782b      	ldrb	r3, [r5, #0]
   18d44:	3502      	adds	r5, #2
   18d46:	44b2      	add	sl, r6
   18d48:	4563      	cmp	r3, ip
   18d4a:	d125      	bne.n	18d98 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x16a>
   18d4c:	4592      	cmp	sl, r2
   18d4e:	f0c0 809e 	bcc.w	18e8e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   18d52:	f1ba 0fa6 	cmp.w	sl, #166	; 0xa6
   18d56:	f200 80a5 	bhi.w	18ea4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x276>
   18d5a:	eb08 0302 	add.w	r3, r8, r2
   18d5e:	199a      	adds	r2, r3, r6
   18d60:	b306      	cbz	r6, 18da4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   18d62:	461f      	mov	r7, r3
   18d64:	b2c4      	uxtb	r4, r0
   18d66:	f817 1b01 	ldrb.w	r1, [r7], #1
   18d6a:	42a1      	cmp	r1, r4
   18d6c:	d043      	beq.n	18df6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   18d6e:	4297      	cmp	r7, r2
   18d70:	d018      	beq.n	18da4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   18d72:	7859      	ldrb	r1, [r3, #1]
   18d74:	42a1      	cmp	r1, r4
   18d76:	d03e      	beq.n	18df6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   18d78:	1c99      	adds	r1, r3, #2
   18d7a:	4291      	cmp	r1, r2
   18d7c:	d012      	beq.n	18da4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   18d7e:	7899      	ldrb	r1, [r3, #2]
   18d80:	42a1      	cmp	r1, r4
   18d82:	d038      	beq.n	18df6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   18d84:	1cd9      	adds	r1, r3, #3
   18d86:	4291      	cmp	r1, r2
   18d88:	d00c      	beq.n	18da4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   18d8a:	1d19      	adds	r1, r3, #4
   18d8c:	78db      	ldrb	r3, [r3, #3]
   18d8e:	3e04      	subs	r6, #4
   18d90:	42a3      	cmp	r3, r4
   18d92:	460b      	mov	r3, r1
   18d94:	d1e4      	bne.n	18d60 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x132>
   18d96:	e02e      	b.n	18df6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   18d98:	d808      	bhi.n	18dac <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   18d9a:	f10e 0246 	add.w	r2, lr, #70	; 0x46
   18d9e:	4295      	cmp	r5, r2
   18da0:	d1cd      	bne.n	18d3e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   18da2:	e003      	b.n	18dac <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   18da4:	f10e 0146 	add.w	r1, lr, #70	; 0x46
   18da8:	428d      	cmp	r5, r1
   18daa:	d1c8      	bne.n	18d3e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   18dac:	f641 45b9 	movw	r5, #7353	; 0x1cb9
   18db0:	2101      	movs	r1, #1
   18db2:	f2c0 0502 	movt	r5, #2
   18db6:	4628      	mov	r0, r5
   18db8:	4602      	mov	r2, r0
   18dba:	f812 7b01 	ldrb.w	r7, [r2], #1
   18dbe:	b27e      	sxtb	r6, r7
   18dc0:	2e00      	cmp	r6, #0
   18dc2:	d40a      	bmi.n	18dda <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1ac>
   18dc4:	4610      	mov	r0, r2
   18dc6:	ebb9 0907 	subs.w	r9, r9, r7
   18dca:	d44e      	bmi.n	18e6a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18dcc:	f505 72cc 	add.w	r2, r5, #408	; 0x198
   18dd0:	f081 0101 	eor.w	r1, r1, #1
   18dd4:	4290      	cmp	r0, r2
   18dd6:	d1ef      	bne.n	18db8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x18a>
   18dd8:	e047      	b.n	18e6a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18dda:	f505 73cc 	add.w	r3, r5, #408	; 0x198
   18dde:	429a      	cmp	r2, r3
   18de0:	d065      	beq.n	18eae <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   18de2:	7842      	ldrb	r2, [r0, #1]
   18de4:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   18de8:	3002      	adds	r0, #2
   18dea:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   18dee:	ebb9 0907 	subs.w	r9, r9, r7
   18df2:	d5eb      	bpl.n	18dcc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x19e>
   18df4:	e039      	b.n	18e6a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18df6:	2100      	movs	r1, #0
   18df8:	f001 0001 	and.w	r0, r1, #1
   18dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18e00:	f240 51e2 	movw	r1, #1506	; 0x5e2
   18e04:	f240 63e2 	movw	r3, #1762	; 0x6e2
   18e08:	f6cf 71fd 	movt	r1, #65533	; 0xfffd
   18e0c:	1842      	adds	r2, r0, r1
   18e0e:	f2c0 030b 	movt	r3, #11
   18e12:	2100      	movs	r1, #0
   18e14:	429a      	cmp	r2, r3
   18e16:	d328      	bcc.n	18e6a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18e18:	f241 421f 	movw	r2, #5151	; 0x141f
   18e1c:	f640 431f 	movw	r3, #3103	; 0xc1f
   18e20:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   18e24:	4402      	add	r2, r0
   18e26:	429a      	cmp	r2, r3
   18e28:	bf21      	itttt	cs
   18e2a:	f243 125e 	movwcs	r2, #12638	; 0x315e
   18e2e:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   18e32:	4402      	addcs	r2, r0
   18e34:	2a0e      	cmpcs	r2, #14
   18e36:	d318      	bcc.n	18e6a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18e38:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   18e3c:	f64b 031e 	movw	r3, #47134	; 0xb81e
   18e40:	f2c0 021f 	movt	r2, #31
   18e44:	f2c0 0302 	movt	r3, #2
   18e48:	4002      	ands	r2, r0
   18e4a:	429a      	cmp	r2, r3
   18e4c:	d00d      	beq.n	18e6a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18e4e:	f645 1229 	movw	r2, #22825	; 0x5929
   18e52:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   18e56:	4402      	add	r2, r0
   18e58:	2a29      	cmp	r2, #41	; 0x29
   18e5a:	bf21      	itttt	cs
   18e5c:	f644 02cb 	movwcs	r2, #18635	; 0x48cb
   18e60:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   18e64:	4402      	addcs	r2, r0
   18e66:	2a0b      	cmpcs	r2, #11
   18e68:	d203      	bcs.n	18e72 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x244>
   18e6a:	f001 0001 	and.w	r0, r1, #1
   18e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18e72:	f5a0 2060 	sub.w	r0, r0, #917504	; 0xe0000
   18e76:	f64f 620f 	movw	r2, #65039	; 0xfe0f
   18e7a:	f5a0 71f8 	sub.w	r1, r0, #496	; 0x1f0
   18e7e:	2000      	movs	r0, #0
   18e80:	f2c0 0202 	movt	r2, #2
   18e84:	4291      	cmp	r1, r2
   18e86:	bf88      	it	hi
   18e88:	2001      	movhi	r0, #1
   18e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18e8e:	4610      	mov	r0, r2
   18e90:	4651      	mov	r1, sl
   18e92:	f7ff fd04 	bl	1889e <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   18e96:	defe      	udf	#254	; 0xfe
   18e98:	4650      	mov	r0, sl
   18e9a:	f240 1125 	movw	r1, #293	; 0x125
   18e9e:	f7ff fcdc 	bl	1885a <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   18ea2:	defe      	udf	#254	; 0xfe
   18ea4:	4650      	mov	r0, sl
   18ea6:	21a6      	movs	r1, #166	; 0xa6
   18ea8:	f7ff fcd7 	bl	1885a <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   18eac:	defe      	udf	#254	; 0xfe
   18eae:	f241 40f0 	movw	r0, #5360	; 0x14f0
   18eb2:	f641 120c 	movw	r2, #6412	; 0x190c
   18eb6:	f2c0 0002 	movt	r0, #2
   18eba:	f2c0 0202 	movt	r2, #2
   18ebe:	212b      	movs	r1, #43	; 0x2b
   18ec0:	f7fe fd78 	bl	179b4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   18ec4:	defe      	udf	#254	; 0xfe

00018ec6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>:
   18ec6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18eca:	b0a3      	sub	sp, #140	; 0x8c
   18ecc:	468c      	mov	ip, r1
   18ece:	6809      	ldr	r1, [r1, #0]
   18ed0:	06ca      	lsls	r2, r1, #27
   18ed2:	d44a      	bmi.n	18f6a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xa4>
   18ed4:	6804      	ldr	r4, [r0, #0]
   18ed6:	0688      	lsls	r0, r1, #26
   18ed8:	f100 8089 	bmi.w	18fee <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x128>
   18edc:	f248 5e1f 	movw	lr, #34079	; 0x851f
   18ee0:	f241 528f 	movw	r2, #5519	; 0x158f
   18ee4:	f242 7810 	movw	r8, #10000	; 0x2710
   18ee8:	4544      	cmp	r4, r8
   18eea:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   18eee:	f2c0 0202 	movt	r2, #2
   18ef2:	f0c0 80e3 	bcc.w	190bc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1f6>
   18ef6:	f241 7959 	movw	r9, #5977	; 0x1759
   18efa:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   18efe:	f10d 0b0c 	add.w	fp, sp, #12
   18f02:	2300      	movs	r3, #0
   18f04:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   18f08:	f04f 0a64 	mov.w	sl, #100	; 0x64
   18f0c:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   18f10:	fba4 0109 	umull	r0, r1, r4, r9
   18f14:	42bc      	cmp	r4, r7
   18f16:	ea4f 3051 	mov.w	r0, r1, lsr #13
   18f1a:	fb00 4118 	mls	r1, r0, r8, r4
   18f1e:	4604      	mov	r4, r0
   18f20:	b28d      	uxth	r5, r1
   18f22:	fba5 560e 	umull	r5, r6, r5, lr
   18f26:	ea4f 1556 	mov.w	r5, r6, lsr #5
   18f2a:	eb0b 0603 	add.w	r6, fp, r3
   18f2e:	fb05 111a 	mls	r1, r5, sl, r1
   18f32:	f832 5015 	ldrh.w	r5, [r2, r5, lsl #1]
   18f36:	f1a3 0304 	sub.w	r3, r3, #4
   18f3a:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   18f3e:	b289      	uxth	r1, r1
   18f40:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   18f44:	f8a6 1025 	strh.w	r1, [r6, #37]	; 0x25
   18f48:	d8e2      	bhi.n	18f10 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x4a>
   18f4a:	f103 0127 	add.w	r1, r3, #39	; 0x27
   18f4e:	4604      	mov	r4, r0
   18f50:	2c63      	cmp	r4, #99	; 0x63
   18f52:	f300 80b7 	bgt.w	190c4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1fe>
   18f56:	4623      	mov	r3, r4
   18f58:	2b0a      	cmp	r3, #10
   18f5a:	f2c0 80c3 	blt.w	190e4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x21e>
   18f5e:	1e88      	subs	r0, r1, #2
   18f60:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   18f64:	aa03      	add	r2, sp, #12
   18f66:	5211      	strh	r1, [r2, r0]
   18f68:	e0c1      	b.n	190ee <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x228>
   18f6a:	6800      	ldr	r0, [r0, #0]
   18f6c:	f10d 0e0c 	add.w	lr, sp, #12
   18f70:	2381      	movs	r3, #129	; 0x81
   18f72:	2100      	movs	r1, #0
   18f74:	f000 020f 	and.w	r2, r0, #15
   18f78:	f102 0457 	add.w	r4, r2, #87	; 0x57
   18f7c:	2a0a      	cmp	r2, #10
   18f7e:	bf38      	it	cc
   18f80:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   18f84:	eb0e 0203 	add.w	r2, lr, r3
   18f88:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   18f8c:	f802 4c02 	strb.w	r4, [r2, #-2]
   18f90:	d071      	beq.n	19076 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   18f92:	0904      	lsrs	r4, r0, #4
   18f94:	f004 040f 	and.w	r4, r4, #15
   18f98:	f104 0557 	add.w	r5, r4, #87	; 0x57
   18f9c:	2c0a      	cmp	r4, #10
   18f9e:	bf38      	it	cc
   18fa0:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   18fa4:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   18fa8:	f802 5c03 	strb.w	r5, [r2, #-3]
   18fac:	d079      	beq.n	190a2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   18fae:	0a04      	lsrs	r4, r0, #8
   18fb0:	f004 040f 	and.w	r4, r4, #15
   18fb4:	f104 0557 	add.w	r5, r4, #87	; 0x57
   18fb8:	2c0a      	cmp	r4, #10
   18fba:	bf38      	it	cc
   18fbc:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   18fc0:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   18fc4:	f802 5c04 	strb.w	r5, [r2, #-4]
   18fc8:	d073      	beq.n	190b2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   18fca:	0b04      	lsrs	r4, r0, #12
   18fcc:	3b04      	subs	r3, #4
   18fce:	f004 040f 	and.w	r4, r4, #15
   18fd2:	f104 0557 	add.w	r5, r4, #87	; 0x57
   18fd6:	2c0a      	cmp	r4, #10
   18fd8:	bf38      	it	cc
   18fda:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   18fde:	f802 5c05 	strb.w	r5, [r2, #-5]
   18fe2:	0c02      	lsrs	r2, r0, #16
   18fe4:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   18fe8:	4610      	mov	r0, r2
   18fea:	d1c3      	bne.n	18f74 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xae>
   18fec:	e03f      	b.n	1906e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1a8>
   18fee:	f10d 0e0c 	add.w	lr, sp, #12
   18ff2:	2381      	movs	r3, #129	; 0x81
   18ff4:	2100      	movs	r1, #0
   18ff6:	f004 000f 	and.w	r0, r4, #15
   18ffa:	eb0e 0203 	add.w	r2, lr, r3
   18ffe:	f100 0537 	add.w	r5, r0, #55	; 0x37
   19002:	280a      	cmp	r0, #10
   19004:	bf38      	it	cc
   19006:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   1900a:	ebb1 1f14 	cmp.w	r1, r4, lsr #4
   1900e:	f802 5c02 	strb.w	r5, [r2, #-2]
   19012:	d030      	beq.n	19076 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   19014:	0920      	lsrs	r0, r4, #4
   19016:	f000 000f 	and.w	r0, r0, #15
   1901a:	f100 0537 	add.w	r5, r0, #55	; 0x37
   1901e:	280a      	cmp	r0, #10
   19020:	bf38      	it	cc
   19022:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   19026:	ebb1 2f14 	cmp.w	r1, r4, lsr #8
   1902a:	f802 5c03 	strb.w	r5, [r2, #-3]
   1902e:	d038      	beq.n	190a2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   19030:	0a20      	lsrs	r0, r4, #8
   19032:	f000 000f 	and.w	r0, r0, #15
   19036:	f100 0537 	add.w	r5, r0, #55	; 0x37
   1903a:	280a      	cmp	r0, #10
   1903c:	bf38      	it	cc
   1903e:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   19042:	ebb1 3f14 	cmp.w	r1, r4, lsr #12
   19046:	f802 5c04 	strb.w	r5, [r2, #-4]
   1904a:	d032      	beq.n	190b2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   1904c:	0b20      	lsrs	r0, r4, #12
   1904e:	3b04      	subs	r3, #4
   19050:	f000 000f 	and.w	r0, r0, #15
   19054:	f100 0537 	add.w	r5, r0, #55	; 0x37
   19058:	280a      	cmp	r0, #10
   1905a:	bf38      	it	cc
   1905c:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   19060:	0c20      	lsrs	r0, r4, #16
   19062:	ebb1 4f14 	cmp.w	r1, r4, lsr #16
   19066:	4604      	mov	r4, r0
   19068:	f802 5c05 	strb.w	r5, [r2, #-5]
   1906c:	d1c3      	bne.n	18ff6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x130>
   1906e:	1e58      	subs	r0, r3, #1
   19070:	2881      	cmp	r0, #129	; 0x81
   19072:	d305      	bcc.n	19080 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   19074:	e019      	b.n	190aa <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   19076:	1e59      	subs	r1, r3, #1
   19078:	1e98      	subs	r0, r3, #2
   1907a:	460b      	mov	r3, r1
   1907c:	2881      	cmp	r0, #129	; 0x81
   1907e:	d214      	bcs.n	190aa <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   19080:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   19084:	f241 528d 	movw	r2, #5517	; 0x158d
   19088:	4470      	add	r0, lr
   1908a:	f2c0 0202 	movt	r2, #2
   1908e:	e9cd 0100 	strd	r0, r1, [sp]
   19092:	4660      	mov	r0, ip
   19094:	2101      	movs	r1, #1
   19096:	2302      	movs	r3, #2
   19098:	f7ff f864 	bl	18164 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1909c:	b023      	add	sp, #140	; 0x8c
   1909e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   190a2:	1ed8      	subs	r0, r3, #3
   190a4:	3b02      	subs	r3, #2
   190a6:	2881      	cmp	r0, #129	; 0x81
   190a8:	d3ea      	bcc.n	19080 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   190aa:	2180      	movs	r1, #128	; 0x80
   190ac:	f7ff fbf7 	bl	1889e <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   190b0:	defe      	udf	#254	; 0xfe
   190b2:	1f18      	subs	r0, r3, #4
   190b4:	3b03      	subs	r3, #3
   190b6:	2881      	cmp	r0, #129	; 0x81
   190b8:	d3e2      	bcc.n	19080 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   190ba:	e7f6      	b.n	190aa <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   190bc:	2127      	movs	r1, #39	; 0x27
   190be:	2c63      	cmp	r4, #99	; 0x63
   190c0:	f77f af49 	ble.w	18f56 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x90>
   190c4:	b2a0      	uxth	r0, r4
   190c6:	3902      	subs	r1, #2
   190c8:	fba0 030e 	umull	r0, r3, r0, lr
   190cc:	af03      	add	r7, sp, #12
   190ce:	2064      	movs	r0, #100	; 0x64
   190d0:	095b      	lsrs	r3, r3, #5
   190d2:	fb03 4010 	mls	r0, r3, r0, r4
   190d6:	b280      	uxth	r0, r0
   190d8:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   190dc:	5278      	strh	r0, [r7, r1]
   190de:	2b0a      	cmp	r3, #10
   190e0:	f6bf af3d 	bge.w	18f5e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x98>
   190e4:	1e48      	subs	r0, r1, #1
   190e6:	aa03      	add	r2, sp, #12
   190e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
   190ec:	5411      	strb	r1, [r2, r0]
   190ee:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   190f2:	aa03      	add	r2, sp, #12
   190f4:	4410      	add	r0, r2
   190f6:	f241 3254 	movw	r2, #4948	; 0x1354
   190fa:	e9cd 0100 	strd	r0, r1, [sp]
   190fe:	f2c0 0202 	movt	r2, #2
   19102:	4660      	mov	r0, ip
   19104:	2101      	movs	r1, #1
   19106:	2300      	movs	r3, #0
   19108:	f7ff f82c 	bl	18164 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1910c:	b023      	add	sp, #140	; 0x8c
   1910e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00019112 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>:
   19112:	b580      	push	{r7, lr}
   19114:	b0a2      	sub	sp, #136	; 0x88
   19116:	7802      	ldrb	r2, [r0, #0]
   19118:	468c      	mov	ip, r1
   1911a:	f002 030f 	and.w	r3, r2, #15
   1911e:	f103 0057 	add.w	r0, r3, #87	; 0x57
   19122:	2b0a      	cmp	r3, #10
   19124:	bf38      	it	cc
   19126:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   1912a:	2300      	movs	r3, #0
   1912c:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   19130:	d00b      	beq.n	1914a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x38>
   19132:	0913      	lsrs	r3, r2, #4
   19134:	f103 0157 	add.w	r1, r3, #87	; 0x57
   19138:	2aa0      	cmp	r2, #160	; 0xa0
   1913a:	bf38      	it	cc
   1913c:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   19140:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   19144:	227e      	movs	r2, #126	; 0x7e
   19146:	2302      	movs	r3, #2
   19148:	e001      	b.n	1914e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x3c>
   1914a:	227f      	movs	r2, #127	; 0x7f
   1914c:	2301      	movs	r3, #1
   1914e:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   19152:	a802      	add	r0, sp, #8
   19154:	4410      	add	r0, r2
   19156:	f241 528d 	movw	r2, #5517	; 0x158d
   1915a:	e9cd 0300 	strd	r0, r3, [sp]
   1915e:	f2c0 0202 	movt	r2, #2
   19162:	4660      	mov	r0, ip
   19164:	2101      	movs	r1, #1
   19166:	2302      	movs	r3, #2
   19168:	f7fe fffc 	bl	18164 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1916c:	b022      	add	sp, #136	; 0x88
   1916e:	bd80      	pop	{r7, pc}

00019170 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>:
   19170:	b580      	push	{r7, lr}
   19172:	b0a2      	sub	sp, #136	; 0x88
   19174:	7802      	ldrb	r2, [r0, #0]
   19176:	468c      	mov	ip, r1
   19178:	f002 030f 	and.w	r3, r2, #15
   1917c:	f103 0037 	add.w	r0, r3, #55	; 0x37
   19180:	2b0a      	cmp	r3, #10
   19182:	bf38      	it	cc
   19184:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   19188:	2300      	movs	r3, #0
   1918a:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   1918e:	d00b      	beq.n	191a8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x38>
   19190:	0913      	lsrs	r3, r2, #4
   19192:	f103 0137 	add.w	r1, r3, #55	; 0x37
   19196:	2aa0      	cmp	r2, #160	; 0xa0
   19198:	bf38      	it	cc
   1919a:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   1919e:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   191a2:	227e      	movs	r2, #126	; 0x7e
   191a4:	2302      	movs	r3, #2
   191a6:	e001      	b.n	191ac <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x3c>
   191a8:	227f      	movs	r2, #127	; 0x7f
   191aa:	2301      	movs	r3, #1
   191ac:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   191b0:	a802      	add	r0, sp, #8
   191b2:	4410      	add	r0, r2
   191b4:	f241 528d 	movw	r2, #5517	; 0x158d
   191b8:	e9cd 0300 	strd	r0, r3, [sp]
   191bc:	f2c0 0202 	movt	r2, #2
   191c0:	4660      	mov	r0, ip
   191c2:	2101      	movs	r1, #1
   191c4:	2302      	movs	r3, #2
   191c6:	f7fe ffcd 	bl	18164 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   191ca:	b022      	add	sp, #136	; 0x88
   191cc:	bd80      	pop	{r7, pc}

000191ce <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E>:
   191ce:	b580      	push	{r7, lr}
   191d0:	b0a2      	sub	sp, #136	; 0x88
   191d2:	8800      	ldrh	r0, [r0, #0]
   191d4:	468c      	mov	ip, r1
   191d6:	f000 020f 	and.w	r2, r0, #15
   191da:	f102 0357 	add.w	r3, r2, #87	; 0x57
   191de:	2a0a      	cmp	r2, #10
   191e0:	bf38      	it	cc
   191e2:	f102 0330 	addcc.w	r3, r2, #48	; 0x30
   191e6:	2200      	movs	r2, #0
   191e8:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
   191ec:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   191f0:	d02a      	beq.n	19248 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x7a>
   191f2:	0903      	lsrs	r3, r0, #4
   191f4:	f003 030f 	and.w	r3, r3, #15
   191f8:	f103 0157 	add.w	r1, r3, #87	; 0x57
   191fc:	2b0a      	cmp	r3, #10
   191fe:	bf38      	it	cc
   19200:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   19204:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   19208:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   1920c:	d031      	beq.n	19272 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xa4>
   1920e:	0a01      	lsrs	r1, r0, #8
   19210:	f001 010f 	and.w	r1, r1, #15
   19214:	f101 0257 	add.w	r2, r1, #87	; 0x57
   19218:	290a      	cmp	r1, #10
   1921a:	bf38      	it	cc
   1921c:	f101 0230 	addcc.w	r2, r1, #48	; 0x30
   19220:	2100      	movs	r1, #0
   19222:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   19226:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   1922a:	d027      	beq.n	1927c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xae>
   1922c:	0b00      	lsrs	r0, r0, #12
   1922e:	f100 0157 	add.w	r1, r0, #87	; 0x57
   19232:	280a      	cmp	r0, #10
   19234:	bf38      	it	cc
   19236:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   1923a:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
   1923e:	227d      	movs	r2, #125	; 0x7d
   19240:	207c      	movs	r0, #124	; 0x7c
   19242:	2881      	cmp	r0, #129	; 0x81
   19244:	d304      	bcc.n	19250 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   19246:	e01d      	b.n	19284 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   19248:	2280      	movs	r2, #128	; 0x80
   1924a:	207f      	movs	r0, #127	; 0x7f
   1924c:	2881      	cmp	r0, #129	; 0x81
   1924e:	d219      	bcs.n	19284 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   19250:	f1c2 0281 	rsb	r2, r2, #129	; 0x81
   19254:	ab02      	add	r3, sp, #8
   19256:	4418      	add	r0, r3
   19258:	2101      	movs	r1, #1
   1925a:	e9cd 0200 	strd	r0, r2, [sp]
   1925e:	f241 528d 	movw	r2, #5517	; 0x158d
   19262:	f2c0 0202 	movt	r2, #2
   19266:	4660      	mov	r0, ip
   19268:	2302      	movs	r3, #2
   1926a:	f7fe ff7b 	bl	18164 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1926e:	b022      	add	sp, #136	; 0x88
   19270:	bd80      	pop	{r7, pc}
   19272:	207e      	movs	r0, #126	; 0x7e
   19274:	227f      	movs	r2, #127	; 0x7f
   19276:	2881      	cmp	r0, #129	; 0x81
   19278:	d3ea      	bcc.n	19250 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   1927a:	e003      	b.n	19284 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   1927c:	207d      	movs	r0, #125	; 0x7d
   1927e:	227e      	movs	r2, #126	; 0x7e
   19280:	2881      	cmp	r0, #129	; 0x81
   19282:	d3e5      	bcc.n	19250 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   19284:	2180      	movs	r1, #128	; 0x80
   19286:	f7ff fb0a 	bl	1889e <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   1928a:	defe      	udf	#254	; 0xfe

0001928c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE>:
   1928c:	b580      	push	{r7, lr}
   1928e:	b0a2      	sub	sp, #136	; 0x88
   19290:	8800      	ldrh	r0, [r0, #0]
   19292:	468c      	mov	ip, r1
   19294:	f000 020f 	and.w	r2, r0, #15
   19298:	f102 0337 	add.w	r3, r2, #55	; 0x37
   1929c:	2a0a      	cmp	r2, #10
   1929e:	bf38      	it	cc
   192a0:	f102 0330 	addcc.w	r3, r2, #48	; 0x30
   192a4:	2200      	movs	r2, #0
   192a6:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
   192aa:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   192ae:	d02a      	beq.n	19306 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x7a>
   192b0:	0903      	lsrs	r3, r0, #4
   192b2:	f003 030f 	and.w	r3, r3, #15
   192b6:	f103 0137 	add.w	r1, r3, #55	; 0x37
   192ba:	2b0a      	cmp	r3, #10
   192bc:	bf38      	it	cc
   192be:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   192c2:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   192c6:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   192ca:	d031      	beq.n	19330 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xa4>
   192cc:	0a01      	lsrs	r1, r0, #8
   192ce:	f001 010f 	and.w	r1, r1, #15
   192d2:	f101 0237 	add.w	r2, r1, #55	; 0x37
   192d6:	290a      	cmp	r1, #10
   192d8:	bf38      	it	cc
   192da:	f101 0230 	addcc.w	r2, r1, #48	; 0x30
   192de:	2100      	movs	r1, #0
   192e0:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   192e4:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   192e8:	d027      	beq.n	1933a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xae>
   192ea:	0b00      	lsrs	r0, r0, #12
   192ec:	f100 0137 	add.w	r1, r0, #55	; 0x37
   192f0:	280a      	cmp	r0, #10
   192f2:	bf38      	it	cc
   192f4:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   192f8:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
   192fc:	227d      	movs	r2, #125	; 0x7d
   192fe:	207c      	movs	r0, #124	; 0x7c
   19300:	2881      	cmp	r0, #129	; 0x81
   19302:	d304      	bcc.n	1930e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   19304:	e01d      	b.n	19342 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   19306:	2280      	movs	r2, #128	; 0x80
   19308:	207f      	movs	r0, #127	; 0x7f
   1930a:	2881      	cmp	r0, #129	; 0x81
   1930c:	d219      	bcs.n	19342 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   1930e:	f1c2 0281 	rsb	r2, r2, #129	; 0x81
   19312:	ab02      	add	r3, sp, #8
   19314:	4418      	add	r0, r3
   19316:	2101      	movs	r1, #1
   19318:	e9cd 0200 	strd	r0, r2, [sp]
   1931c:	f241 528d 	movw	r2, #5517	; 0x158d
   19320:	f2c0 0202 	movt	r2, #2
   19324:	4660      	mov	r0, ip
   19326:	2302      	movs	r3, #2
   19328:	f7fe ff1c 	bl	18164 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1932c:	b022      	add	sp, #136	; 0x88
   1932e:	bd80      	pop	{r7, pc}
   19330:	207e      	movs	r0, #126	; 0x7e
   19332:	227f      	movs	r2, #127	; 0x7f
   19334:	2881      	cmp	r0, #129	; 0x81
   19336:	d3ea      	bcc.n	1930e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   19338:	e003      	b.n	19342 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   1933a:	207d      	movs	r0, #125	; 0x7d
   1933c:	227e      	movs	r2, #126	; 0x7e
   1933e:	2881      	cmp	r0, #129	; 0x81
   19340:	d3e5      	bcc.n	1930e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   19342:	2180      	movs	r1, #128	; 0x80
   19344:	f7ff faab 	bl	1889e <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   19348:	defe      	udf	#254	; 0xfe

0001934a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>:
   1934a:	b5b0      	push	{r4, r5, r7, lr}
   1934c:	b0a2      	sub	sp, #136	; 0x88
   1934e:	6800      	ldr	r0, [r0, #0]
   19350:	f10d 0e08 	add.w	lr, sp, #8
   19354:	468c      	mov	ip, r1
   19356:	2381      	movs	r3, #129	; 0x81
   19358:	2100      	movs	r1, #0
   1935a:	f000 020f 	and.w	r2, r0, #15
   1935e:	f102 0457 	add.w	r4, r2, #87	; 0x57
   19362:	2a0a      	cmp	r2, #10
   19364:	bf38      	it	cc
   19366:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   1936a:	eb0e 0203 	add.w	r2, lr, r3
   1936e:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   19372:	f802 4c02 	strb.w	r4, [r2, #-2]
   19376:	d030      	beq.n	193da <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x90>
   19378:	0904      	lsrs	r4, r0, #4
   1937a:	f004 040f 	and.w	r4, r4, #15
   1937e:	f104 0557 	add.w	r5, r4, #87	; 0x57
   19382:	2c0a      	cmp	r4, #10
   19384:	bf38      	it	cc
   19386:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   1938a:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   1938e:	f802 5c03 	strb.w	r5, [r2, #-3]
   19392:	d028      	beq.n	193e6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x9c>
   19394:	0a04      	lsrs	r4, r0, #8
   19396:	f004 040f 	and.w	r4, r4, #15
   1939a:	f104 0557 	add.w	r5, r4, #87	; 0x57
   1939e:	2c0a      	cmp	r4, #10
   193a0:	bf38      	it	cc
   193a2:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   193a6:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   193aa:	f802 5c04 	strb.w	r5, [r2, #-4]
   193ae:	d01f      	beq.n	193f0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xa6>
   193b0:	0b04      	lsrs	r4, r0, #12
   193b2:	3b04      	subs	r3, #4
   193b4:	f004 040f 	and.w	r4, r4, #15
   193b8:	f104 0557 	add.w	r5, r4, #87	; 0x57
   193bc:	2c0a      	cmp	r4, #10
   193be:	bf38      	it	cc
   193c0:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   193c4:	f802 5c05 	strb.w	r5, [r2, #-5]
   193c8:	0c02      	lsrs	r2, r0, #16
   193ca:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   193ce:	4610      	mov	r0, r2
   193d0:	d1c3      	bne.n	1935a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x10>
   193d2:	1e58      	subs	r0, r3, #1
   193d4:	2881      	cmp	r0, #129	; 0x81
   193d6:	d30f      	bcc.n	193f8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   193d8:	e01e      	b.n	19418 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   193da:	1e59      	subs	r1, r3, #1
   193dc:	1e98      	subs	r0, r3, #2
   193de:	460b      	mov	r3, r1
   193e0:	2881      	cmp	r0, #129	; 0x81
   193e2:	d309      	bcc.n	193f8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   193e4:	e018      	b.n	19418 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   193e6:	1ed8      	subs	r0, r3, #3
   193e8:	3b02      	subs	r3, #2
   193ea:	2881      	cmp	r0, #129	; 0x81
   193ec:	d304      	bcc.n	193f8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   193ee:	e013      	b.n	19418 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   193f0:	1f18      	subs	r0, r3, #4
   193f2:	3b03      	subs	r3, #3
   193f4:	2881      	cmp	r0, #129	; 0x81
   193f6:	d20f      	bcs.n	19418 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   193f8:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   193fc:	f241 528d 	movw	r2, #5517	; 0x158d
   19400:	4470      	add	r0, lr
   19402:	f2c0 0202 	movt	r2, #2
   19406:	e9cd 0100 	strd	r0, r1, [sp]
   1940a:	4660      	mov	r0, ip
   1940c:	2101      	movs	r1, #1
   1940e:	2302      	movs	r3, #2
   19410:	f7fe fea8 	bl	18164 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   19414:	b022      	add	sp, #136	; 0x88
   19416:	bdb0      	pop	{r4, r5, r7, pc}
   19418:	2180      	movs	r1, #128	; 0x80
   1941a:	f7ff fa40 	bl	1889e <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   1941e:	defe      	udf	#254	; 0xfe

00019420 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>:
   19420:	b5b0      	push	{r4, r5, r7, lr}
   19422:	b0a2      	sub	sp, #136	; 0x88
   19424:	6800      	ldr	r0, [r0, #0]
   19426:	f10d 0e08 	add.w	lr, sp, #8
   1942a:	468c      	mov	ip, r1
   1942c:	2381      	movs	r3, #129	; 0x81
   1942e:	2100      	movs	r1, #0
   19430:	f000 020f 	and.w	r2, r0, #15
   19434:	f102 0437 	add.w	r4, r2, #55	; 0x37
   19438:	2a0a      	cmp	r2, #10
   1943a:	bf38      	it	cc
   1943c:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   19440:	eb0e 0203 	add.w	r2, lr, r3
   19444:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   19448:	f802 4c02 	strb.w	r4, [r2, #-2]
   1944c:	d030      	beq.n	194b0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x90>
   1944e:	0904      	lsrs	r4, r0, #4
   19450:	f004 040f 	and.w	r4, r4, #15
   19454:	f104 0537 	add.w	r5, r4, #55	; 0x37
   19458:	2c0a      	cmp	r4, #10
   1945a:	bf38      	it	cc
   1945c:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   19460:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   19464:	f802 5c03 	strb.w	r5, [r2, #-3]
   19468:	d028      	beq.n	194bc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x9c>
   1946a:	0a04      	lsrs	r4, r0, #8
   1946c:	f004 040f 	and.w	r4, r4, #15
   19470:	f104 0537 	add.w	r5, r4, #55	; 0x37
   19474:	2c0a      	cmp	r4, #10
   19476:	bf38      	it	cc
   19478:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   1947c:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   19480:	f802 5c04 	strb.w	r5, [r2, #-4]
   19484:	d01f      	beq.n	194c6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xa6>
   19486:	0b04      	lsrs	r4, r0, #12
   19488:	3b04      	subs	r3, #4
   1948a:	f004 040f 	and.w	r4, r4, #15
   1948e:	f104 0537 	add.w	r5, r4, #55	; 0x37
   19492:	2c0a      	cmp	r4, #10
   19494:	bf38      	it	cc
   19496:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   1949a:	f802 5c05 	strb.w	r5, [r2, #-5]
   1949e:	0c02      	lsrs	r2, r0, #16
   194a0:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   194a4:	4610      	mov	r0, r2
   194a6:	d1c3      	bne.n	19430 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x10>
   194a8:	1e58      	subs	r0, r3, #1
   194aa:	2881      	cmp	r0, #129	; 0x81
   194ac:	d30f      	bcc.n	194ce <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   194ae:	e01e      	b.n	194ee <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   194b0:	1e59      	subs	r1, r3, #1
   194b2:	1e98      	subs	r0, r3, #2
   194b4:	460b      	mov	r3, r1
   194b6:	2881      	cmp	r0, #129	; 0x81
   194b8:	d309      	bcc.n	194ce <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   194ba:	e018      	b.n	194ee <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   194bc:	1ed8      	subs	r0, r3, #3
   194be:	3b02      	subs	r3, #2
   194c0:	2881      	cmp	r0, #129	; 0x81
   194c2:	d304      	bcc.n	194ce <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   194c4:	e013      	b.n	194ee <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   194c6:	1f18      	subs	r0, r3, #4
   194c8:	3b03      	subs	r3, #3
   194ca:	2881      	cmp	r0, #129	; 0x81
   194cc:	d20f      	bcs.n	194ee <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   194ce:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   194d2:	f241 528d 	movw	r2, #5517	; 0x158d
   194d6:	4470      	add	r0, lr
   194d8:	f2c0 0202 	movt	r2, #2
   194dc:	e9cd 0100 	strd	r0, r1, [sp]
   194e0:	4660      	mov	r0, ip
   194e2:	2101      	movs	r1, #1
   194e4:	2302      	movs	r3, #2
   194e6:	f7fe fe3d 	bl	18164 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   194ea:	b022      	add	sp, #136	; 0x88
   194ec:	bdb0      	pop	{r4, r5, r7, pc}
   194ee:	2180      	movs	r1, #128	; 0x80
   194f0:	f7ff f9d5 	bl	1889e <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   194f4:	defe      	udf	#254	; 0xfe

000194f6 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>:
   194f6:	b580      	push	{r7, lr}
   194f8:	b08c      	sub	sp, #48	; 0x30
   194fa:	7802      	ldrb	r2, [r0, #0]
   194fc:	2a64      	cmp	r2, #100	; 0x64
   194fe:	d314      	bcc.n	1952a <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x34>
   19500:	f248 501f 	movw	r0, #34079	; 0x851f
   19504:	f2c5 10eb 	movt	r0, #20971	; 0x51eb
   19508:	fba2 0300 	umull	r0, r3, r2, r0
   1950c:	2064      	movs	r0, #100	; 0x64
   1950e:	095b      	lsrs	r3, r3, #5
   19510:	fb03 2010 	mls	r0, r3, r0, r2
   19514:	f241 528f 	movw	r2, #5519	; 0x158f
   19518:	f2c0 0202 	movt	r2, #2
   1951c:	b2c0      	uxtb	r0, r0
   1951e:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   19522:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   19526:	2024      	movs	r0, #36	; 0x24
   19528:	e003      	b.n	19532 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x3c>
   1952a:	2a0a      	cmp	r2, #10
   1952c:	d206      	bcs.n	1953c <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x46>
   1952e:	2026      	movs	r0, #38	; 0x26
   19530:	4613      	mov	r3, r2
   19532:	f103 0230 	add.w	r2, r3, #48	; 0x30
   19536:	ab02      	add	r3, sp, #8
   19538:	541a      	strb	r2, [r3, r0]
   1953a:	e008      	b.n	1954e <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x58>
   1953c:	f241 508f 	movw	r0, #5519	; 0x158f
   19540:	f2c0 0002 	movt	r0, #2
   19544:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
   19548:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   1954c:	2025      	movs	r0, #37	; 0x25
   1954e:	f1c0 0227 	rsb	r2, r0, #39	; 0x27
   19552:	ab02      	add	r3, sp, #8
   19554:	4418      	add	r0, r3
   19556:	2300      	movs	r3, #0
   19558:	e9cd 0200 	strd	r0, r2, [sp]
   1955c:	f241 3254 	movw	r2, #4948	; 0x1354
   19560:	4608      	mov	r0, r1
   19562:	f2c0 0202 	movt	r2, #2
   19566:	2101      	movs	r1, #1
   19568:	f7fe fdfc 	bl	18164 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1956c:	b00c      	add	sp, #48	; 0x30
   1956e:	bd80      	pop	{r7, pc}

00019570 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E>:
   19570:	b580      	push	{r7, lr}
   19572:	b08c      	sub	sp, #48	; 0x30
   19574:	8800      	ldrh	r0, [r0, #0]
   19576:	f242 720f 	movw	r2, #9999	; 0x270f
   1957a:	468e      	mov	lr, r1
   1957c:	4290      	cmp	r0, r2
   1957e:	d924      	bls.n	195ca <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x5a>
   19580:	f241 7259 	movw	r2, #5977	; 0x1759
   19584:	f248 511f 	movw	r1, #34079	; 0x851f
   19588:	f2cd 12b7 	movt	r2, #53687	; 0xd1b7
   1958c:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
   19590:	fba0 2302 	umull	r2, r3, r0, r2
   19594:	0b5a      	lsrs	r2, r3, #13
   19596:	f242 7310 	movw	r3, #10000	; 0x2710
   1959a:	fb02 0013 	mls	r0, r2, r3, r0
   1959e:	b283      	uxth	r3, r0
   195a0:	fba3 1301 	umull	r1, r3, r3, r1
   195a4:	0959      	lsrs	r1, r3, #5
   195a6:	2364      	movs	r3, #100	; 0x64
   195a8:	fb01 0013 	mls	r0, r1, r3, r0
   195ac:	f241 538f 	movw	r3, #5519	; 0x158f
   195b0:	f2c0 0302 	movt	r3, #2
   195b4:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   195b8:	f8ad 102b 	strh.w	r1, [sp, #43]	; 0x2b
   195bc:	b280      	uxth	r0, r0
   195be:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   195c2:	2323      	movs	r3, #35	; 0x23
   195c4:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   195c8:	e024      	b.n	19614 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xa4>
   195ca:	f241 5c8f 	movw	ip, #5519	; 0x158f
   195ce:	2863      	cmp	r0, #99	; 0x63
   195d0:	f2c0 0c02 	movt	ip, #2
   195d4:	d919      	bls.n	1960a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x9a>
   195d6:	f248 511f 	movw	r1, #34079	; 0x851f
   195da:	2325      	movs	r3, #37	; 0x25
   195dc:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
   195e0:	fba0 1201 	umull	r1, r2, r0, r1
   195e4:	0951      	lsrs	r1, r2, #5
   195e6:	2264      	movs	r2, #100	; 0x64
   195e8:	fb01 0012 	mls	r0, r1, r2, r0
   195ec:	b280      	uxth	r0, r0
   195ee:	f83c 0010 	ldrh.w	r0, [ip, r0, lsl #1]
   195f2:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   195f6:	4608      	mov	r0, r1
   195f8:	b282      	uxth	r2, r0
   195fa:	2a0a      	cmp	r2, #10
   195fc:	d309      	bcc.n	19612 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xa2>
   195fe:	f83c 1012 	ldrh.w	r1, [ip, r2, lsl #1]
   19602:	1e98      	subs	r0, r3, #2
   19604:	aa02      	add	r2, sp, #8
   19606:	5211      	strh	r1, [r2, r0]
   19608:	e009      	b.n	1961e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xae>
   1960a:	2327      	movs	r3, #39	; 0x27
   1960c:	b282      	uxth	r2, r0
   1960e:	2a0a      	cmp	r2, #10
   19610:	d2f5      	bcs.n	195fe <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x8e>
   19612:	4602      	mov	r2, r0
   19614:	1e58      	subs	r0, r3, #1
   19616:	f102 0130 	add.w	r1, r2, #48	; 0x30
   1961a:	aa02      	add	r2, sp, #8
   1961c:	5411      	strb	r1, [r2, r0]
   1961e:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   19622:	aa02      	add	r2, sp, #8
   19624:	4410      	add	r0, r2
   19626:	f241 3254 	movw	r2, #4948	; 0x1354
   1962a:	e9cd 0100 	strd	r0, r1, [sp]
   1962e:	f2c0 0202 	movt	r2, #2
   19632:	4670      	mov	r0, lr
   19634:	2101      	movs	r1, #1
   19636:	2300      	movs	r3, #0
   19638:	f7fe fd94 	bl	18164 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1963c:	b00c      	add	sp, #48	; 0x30
   1963e:	bd80      	pop	{r7, pc}

00019640 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>:
   19640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19644:	b08f      	sub	sp, #60	; 0x3c
   19646:	6805      	ldr	r5, [r0, #0]
   19648:	f248 581f 	movw	r8, #34079	; 0x851f
   1964c:	460e      	mov	r6, r1
   1964e:	f241 518f 	movw	r1, #5519	; 0x158f
   19652:	2d00      	cmp	r5, #0
   19654:	f242 7910 	movw	r9, #10000	; 0x2710
   19658:	462b      	mov	r3, r5
   1965a:	f2c5 18eb 	movt	r8, #20971	; 0x51eb
   1965e:	bf48      	it	mi
   19660:	426b      	negmi	r3, r5
   19662:	454b      	cmp	r3, r9
   19664:	f2c0 0102 	movt	r1, #2
   19668:	d33a      	bcc.n	196e0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa0>
   1966a:	f241 7a59 	movw	sl, #5977	; 0x1759
   1966e:	f24e 00ff 	movw	r0, #57599	; 0xe0ff
   19672:	f10d 0e14 	add.w	lr, sp, #20
   19676:	2400      	movs	r4, #0
   19678:	f2cd 1ab7 	movt	sl, #53687	; 0xd1b7
   1967c:	f04f 0b64 	mov.w	fp, #100	; 0x64
   19680:	f2c0 50f5 	movt	r0, #1525	; 0x5f5
   19684:	e9cd 5603 	strd	r5, r6, [sp, #12]
   19688:	fba3 250a 	umull	r2, r5, r3, sl
   1968c:	eb0e 0704 	add.w	r7, lr, r4
   19690:	3c04      	subs	r4, #4
   19692:	4283      	cmp	r3, r0
   19694:	ea4f 3255 	mov.w	r2, r5, lsr #13
   19698:	fb02 3519 	mls	r5, r2, r9, r3
   1969c:	4613      	mov	r3, r2
   1969e:	b2ae      	uxth	r6, r5
   196a0:	fba6 6c08 	umull	r6, ip, r6, r8
   196a4:	ea4f 165c 	mov.w	r6, ip, lsr #5
   196a8:	fb06 551b 	mls	r5, r6, fp, r5
   196ac:	f831 6016 	ldrh.w	r6, [r1, r6, lsl #1]
   196b0:	f8a7 6023 	strh.w	r6, [r7, #35]	; 0x23
   196b4:	b2ad      	uxth	r5, r5
   196b6:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
   196ba:	f8a7 5025 	strh.w	r5, [r7, #37]	; 0x25
   196be:	d8e3      	bhi.n	19688 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x48>
   196c0:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
   196c4:	f104 0027 	add.w	r0, r4, #39	; 0x27
   196c8:	4613      	mov	r3, r2
   196ca:	2b63      	cmp	r3, #99	; 0x63
   196cc:	dc0b      	bgt.n	196e6 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa6>
   196ce:	461a      	mov	r2, r3
   196d0:	2a0a      	cmp	r2, #10
   196d2:	db17      	blt.n	19704 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xc4>
   196d4:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
   196d8:	3802      	subs	r0, #2
   196da:	aa05      	add	r2, sp, #20
   196dc:	5211      	strh	r1, [r2, r0]
   196de:	e016      	b.n	1970e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xce>
   196e0:	2027      	movs	r0, #39	; 0x27
   196e2:	2b63      	cmp	r3, #99	; 0x63
   196e4:	ddf3      	ble.n	196ce <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x8e>
   196e6:	b29a      	uxth	r2, r3
   196e8:	3802      	subs	r0, #2
   196ea:	fba2 2708 	umull	r2, r7, r2, r8
   196ee:	097a      	lsrs	r2, r7, #5
   196f0:	2764      	movs	r7, #100	; 0x64
   196f2:	fb02 3317 	mls	r3, r2, r7, r3
   196f6:	af05      	add	r7, sp, #20
   196f8:	b29b      	uxth	r3, r3
   196fa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   196fe:	523b      	strh	r3, [r7, r0]
   19700:	2a0a      	cmp	r2, #10
   19702:	dae7      	bge.n	196d4 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x94>
   19704:	3801      	subs	r0, #1
   19706:	f102 0130 	add.w	r1, r2, #48	; 0x30
   1970a:	aa05      	add	r2, sp, #20
   1970c:	5411      	strb	r1, [r2, r0]
   1970e:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   19712:	aa05      	add	r2, sp, #20
   19714:	4410      	add	r0, r2
   19716:	f241 3254 	movw	r2, #4948	; 0x1354
   1971a:	e9cd 0100 	strd	r0, r1, [sp]
   1971e:	43e8      	mvns	r0, r5
   19720:	0fc1      	lsrs	r1, r0, #31
   19722:	f2c0 0202 	movt	r2, #2
   19726:	4630      	mov	r0, r6
   19728:	2300      	movs	r3, #0
   1972a:	f7fe fd1b 	bl	18164 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1972e:	b00f      	add	sp, #60	; 0x3c
   19730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00019734 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>:
   19734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19738:	b08d      	sub	sp, #52	; 0x34
   1973a:	468c      	mov	ip, r1
   1973c:	6801      	ldr	r1, [r0, #0]
   1973e:	f248 5e1f 	movw	lr, #34079	; 0x851f
   19742:	f241 508f 	movw	r0, #5519	; 0x158f
   19746:	f242 7810 	movw	r8, #10000	; 0x2710
   1974a:	4541      	cmp	r1, r8
   1974c:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   19750:	f2c0 0002 	movt	r0, #2
   19754:	d337      	bcc.n	197c6 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x92>
   19756:	f241 7959 	movw	r9, #5977	; 0x1759
   1975a:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   1975e:	f10d 0b0c 	add.w	fp, sp, #12
   19762:	2300      	movs	r3, #0
   19764:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   19768:	f04f 0a64 	mov.w	sl, #100	; 0x64
   1976c:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   19770:	fba1 2409 	umull	r2, r4, r1, r9
   19774:	42b9      	cmp	r1, r7
   19776:	ea4f 3254 	mov.w	r2, r4, lsr #13
   1977a:	fb02 1418 	mls	r4, r2, r8, r1
   1977e:	4611      	mov	r1, r2
   19780:	b2a5      	uxth	r5, r4
   19782:	fba5 560e 	umull	r5, r6, r5, lr
   19786:	ea4f 1556 	mov.w	r5, r6, lsr #5
   1978a:	eb0b 0603 	add.w	r6, fp, r3
   1978e:	fb05 441a 	mls	r4, r5, sl, r4
   19792:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   19796:	f1a3 0304 	sub.w	r3, r3, #4
   1979a:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   1979e:	b2a4      	uxth	r4, r4
   197a0:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   197a4:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   197a8:	d8e2      	bhi.n	19770 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x3c>
   197aa:	f103 0427 	add.w	r4, r3, #39	; 0x27
   197ae:	4611      	mov	r1, r2
   197b0:	2963      	cmp	r1, #99	; 0x63
   197b2:	dc0b      	bgt.n	197cc <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x98>
   197b4:	460b      	mov	r3, r1
   197b6:	2b0a      	cmp	r3, #10
   197b8:	db17      	blt.n	197ea <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xb6>
   197ba:	1ea1      	subs	r1, r4, #2
   197bc:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   197c0:	aa03      	add	r2, sp, #12
   197c2:	5250      	strh	r0, [r2, r1]
   197c4:	e016      	b.n	197f4 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xc0>
   197c6:	2427      	movs	r4, #39	; 0x27
   197c8:	2963      	cmp	r1, #99	; 0x63
   197ca:	ddf3      	ble.n	197b4 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x80>
   197cc:	b28a      	uxth	r2, r1
   197ce:	3c02      	subs	r4, #2
   197d0:	fba2 230e 	umull	r2, r3, r2, lr
   197d4:	2264      	movs	r2, #100	; 0x64
   197d6:	095b      	lsrs	r3, r3, #5
   197d8:	fb03 1112 	mls	r1, r3, r2, r1
   197dc:	aa03      	add	r2, sp, #12
   197de:	b289      	uxth	r1, r1
   197e0:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   197e4:	5311      	strh	r1, [r2, r4]
   197e6:	2b0a      	cmp	r3, #10
   197e8:	dae7      	bge.n	197ba <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x86>
   197ea:	1e61      	subs	r1, r4, #1
   197ec:	aa03      	add	r2, sp, #12
   197ee:	f103 0030 	add.w	r0, r3, #48	; 0x30
   197f2:	5450      	strb	r0, [r2, r1]
   197f4:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   197f8:	aa03      	add	r2, sp, #12
   197fa:	4411      	add	r1, r2
   197fc:	f241 3254 	movw	r2, #4948	; 0x1354
   19800:	e9cd 1000 	strd	r1, r0, [sp]
   19804:	f2c0 0202 	movt	r2, #2
   19808:	4660      	mov	r0, ip
   1980a:	2101      	movs	r1, #1
   1980c:	2300      	movs	r3, #0
   1980e:	f7fe fca9 	bl	18164 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   19812:	b00d      	add	sp, #52	; 0x34
   19814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00019818 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E>:
   19818:	e9d0 2000 	ldrd	r2, r0, [r0]
   1981c:	68c3      	ldr	r3, [r0, #12]
   1981e:	4610      	mov	r0, r2
   19820:	4718      	bx	r3

00019822 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E>:
   19822:	460b      	mov	r3, r1
   19824:	e9d0 1200 	ldrd	r1, r2, [r0]
   19828:	4618      	mov	r0, r3
   1982a:	f7fe bde3 	b.w	183f4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>
	...

00019830 <__semihost>:
	//    openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -f scripts/debug.ocd

	//  Warning: This code will trigger a breakpoint and hang unless a debugger is connected.
	//  That's how ARM Semihosting sends a command to the debugger to print a message.
	//  This code MUST be disabled on production devices.
    if (!log_enabled) return -1;
   19830:	4b07      	ldr	r3, [pc, #28]	; (19850 <__semihost+0x20>)
   19832:	781b      	ldrb	r3, [r3, #0]
   19834:	b14b      	cbz	r3, 1984a <__semihost+0x1a>
static int __semihost(int command, void* message) {
   19836:	b410      	push	{r4}
   19838:	4602      	mov	r2, r0
   1983a:	460c      	mov	r4, r1
    __asm( 
   1983c:	4610      	mov	r0, r2
   1983e:	4621      	mov	r1, r4
   19840:	beab      	bkpt	0x00ab
		[cmd] "r" (command), 
		[msg] "r" (message)
	:  //  Clobbered register list:
		"r0", "r1", "memory"
	);
	return 0;  //  TODO
   19842:	2000      	movs	r0, #0
}
   19844:	f85d 4b04 	ldr.w	r4, [sp], #4
   19848:	4770      	bx	lr
    if (!log_enabled) return -1;
   1984a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1984e:	4770      	bx	lr
   19850:	20000100 	.word	0x20000100

00019854 <debugger_connected>:
// #define SYS_RENAME (0xf)
// #define SYS_EXIT   (0x18)

static int debugger_connected(void) {
    //  Return non-zero if debugger is connected. From repos/apache-mynewt-core/hw/mcu/ambiq/apollo2/src/hal_system.c
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
   19854:	4b02      	ldr	r3, [pc, #8]	; (19860 <debugger_connected+0xc>)
   19856:	6818      	ldr	r0, [r3, #0]
}
   19858:	f000 0001 	and.w	r0, r0, #1
   1985c:	4770      	bx	lr
   1985e:	bf00      	nop
   19860:	e000edf0 	.word	0xe000edf0

00019864 <semihost_write>:
#endif  //  !DISABLE_SEMIHOSTING

// We normally set the file handle to 2 to write to the debugger's stderr output.
#define SEMIHOST_HANDLE 2

static int semihost_write(uint32_t fh, const unsigned char *buffer, unsigned int length) {
   19864:	b570      	push	{r4, r5, r6, lr}
   19866:	b084      	sub	sp, #16
   19868:	4606      	mov	r6, r0
   1986a:	460d      	mov	r5, r1
   1986c:	4614      	mov	r4, r2
    //  Write "length" number of bytes from "buffer" to the debugger's file handle fh.
    //  We normally set fh=2 to write to the debugger's stderr output.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return 0;               //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    if (!debugger_connected()) { return 0; }  //  If debugger is not connected, quit.
   1986e:	f7ff fff1 	bl	19854 <debugger_connected>
   19872:	4603      	mov	r3, r0
   19874:	b108      	cbz	r0, 1987a <semihost_write+0x16>
    if (length == 0) { return 0; }
   19876:	b91c      	cbnz	r4, 19880 <semihost_write+0x1c>
   19878:	2300      	movs	r3, #0
    args[0] = (uint32_t)fh;
    args[1] = (uint32_t)buffer;
    args[2] = (uint32_t)length;
    return __semihost(SYS_WRITE, args);
#endif  //  DISABLE_SEMIHOSTING
}
   1987a:	4618      	mov	r0, r3
   1987c:	b004      	add	sp, #16
   1987e:	bd70      	pop	{r4, r5, r6, pc}
    args[0] = (uint32_t)fh;
   19880:	9601      	str	r6, [sp, #4]
    args[1] = (uint32_t)buffer;
   19882:	9502      	str	r5, [sp, #8]
    args[2] = (uint32_t)length;
   19884:	9403      	str	r4, [sp, #12]
    return __semihost(SYS_WRITE, args);
   19886:	a901      	add	r1, sp, #4
   19888:	2005      	movs	r0, #5
   1988a:	f7ff ffd1 	bl	19830 <__semihost>
   1988e:	4603      	mov	r3, r0
   19890:	e7f3      	b.n	1987a <semihost_write+0x16>
	...

00019894 <console_flush>:

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
   19894:	b538      	push	{r3, r4, r5, lr}
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }       //  Skip if log not enabled.
   19896:	4b0e      	ldr	r3, [pc, #56]	; (198d0 <console_flush+0x3c>)
   19898:	781b      	ldrb	r3, [r3, #0]
   1989a:	b1bb      	cbz	r3, 198cc <console_flush+0x38>
    if (!semihost_mbuf) { return; }     //  Buffer is empty, nothing to write.
   1989c:	4b0d      	ldr	r3, [pc, #52]	; (198d4 <console_flush+0x40>)
   1989e:	681d      	ldr	r5, [r3, #0]
   198a0:	b1a5      	cbz	r5, 198cc <console_flush+0x38>
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   198a2:	4b0d      	ldr	r3, [pc, #52]	; (198d8 <console_flush+0x44>)
   198a4:	685b      	ldr	r3, [r3, #4]
   198a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) { return; }   //  Don't flush if we are called during an interrupt.
   198aa:	b97b      	cbnz	r3, 198cc <console_flush+0x38>

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
   198ac:	4b09      	ldr	r3, [pc, #36]	; (198d4 <console_flush+0x40>)
   198ae:	2200      	movs	r2, #0
   198b0:	601a      	str	r2, [r3, #0]

    struct os_mbuf *m = old;
   198b2:	462c      	mov	r4, r5
    while (m) {  //  For each mbuf in the chain...
   198b4:	e005      	b.n	198c2 <console_flush+0x2e>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
   198b6:	88e2      	ldrh	r2, [r4, #6]
   198b8:	6821      	ldr	r1, [r4, #0]
   198ba:	2002      	movs	r0, #2
   198bc:	f7ff ffd2 	bl	19864 <semihost_write>
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
   198c0:	68e4      	ldr	r4, [r4, #12]
    while (m) {  //  For each mbuf in the chain...
   198c2:	2c00      	cmp	r4, #0
   198c4:	d1f7      	bne.n	198b6 <console_flush+0x22>
    }
    if (old) { os_mbuf_free_chain(old); }  //  Deallocate the old chain.
   198c6:	4628      	mov	r0, r5
   198c8:	f001 fbfc 	bl	1b0c4 <os_mbuf_free_chain>
}
   198cc:	bd38      	pop	{r3, r4, r5, pc}
   198ce:	bf00      	nop
   198d0:	20000100 	.word	0x20000100
   198d4:	20006f04 	.word	0x20006f04
   198d8:	e000ed00 	.word	0xe000ed00

000198dc <disable_buffer>:
void disable_buffer(void) { buffer_enabled = false; console_flush(); }  //  Disable buffering.
   198dc:	b508      	push	{r3, lr}
   198de:	f7ff ffd9 	bl	19894 <console_flush>
   198e2:	bd08      	pop	{r3, pc}

000198e4 <console_buffer>:

void console_buffer(const char *buffer, unsigned int length) {
   198e4:	b538      	push	{r3, r4, r5, lr}
    //  Append "length" number of bytes from "buffer" to the output buffer.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return;                 //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    int rc;
    if (!log_enabled) { return; }           //  Skip if log not enabled.
   198e6:	4b12      	ldr	r3, [pc, #72]	; (19930 <console_buffer+0x4c>)
   198e8:	781b      	ldrb	r3, [r3, #0]
   198ea:	b903      	cbnz	r3, 198ee <console_buffer+0xa>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
    //  Append the data to the mbuf chain.  This may increase the numbere of mbufs in the chain.
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    if (rc) { return; }  //  If out of memory, quit.
#endif  //  DISABLE_SEMIHOSTING
}
   198ec:	bd38      	pop	{r3, r4, r5, pc}
   198ee:	460d      	mov	r5, r1
   198f0:	4604      	mov	r4, r0
    if (!debugger_connected()) { return; }  //  If debugger is not connected, quit.
   198f2:	f7ff ffaf 	bl	19854 <debugger_connected>
   198f6:	2800      	cmp	r0, #0
   198f8:	d0f8      	beq.n	198ec <console_buffer+0x8>
    if (!semihost_mbuf) {                   //  Allocate mbuf if not already allocated.
   198fa:	4b0e      	ldr	r3, [pc, #56]	; (19934 <console_buffer+0x50>)
   198fc:	681b      	ldr	r3, [r3, #0]
   198fe:	b173      	cbz	r3, 1991e <console_buffer+0x3a>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
   19900:	4b0c      	ldr	r3, [pc, #48]	; (19934 <console_buffer+0x50>)
   19902:	6818      	ldr	r0, [r3, #0]
   19904:	f001 fbf0 	bl	1b0e8 <os_mbuf_len>
   19908:	4428      	add	r0, r5
   1990a:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   1990e:	d2ed      	bcs.n	198ec <console_buffer+0x8>
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
   19910:	b2aa      	uxth	r2, r5
   19912:	4621      	mov	r1, r4
   19914:	4b07      	ldr	r3, [pc, #28]	; (19934 <console_buffer+0x50>)
   19916:	6818      	ldr	r0, [r3, #0]
   19918:	f001 fbf0 	bl	1b0fc <os_mbuf_append>
   1991c:	e7e6      	b.n	198ec <console_buffer+0x8>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
   1991e:	2100      	movs	r1, #0
   19920:	b2a8      	uxth	r0, r5
   19922:	f001 fd93 	bl	1b44c <os_msys_get_pkthdr>
   19926:	4b03      	ldr	r3, [pc, #12]	; (19934 <console_buffer+0x50>)
   19928:	6018      	str	r0, [r3, #0]
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
   1992a:	2800      	cmp	r0, #0
   1992c:	d1e8      	bne.n	19900 <console_buffer+0x1c>
   1992e:	e7dd      	b.n	198ec <console_buffer+0x8>
   19930:	20000100 	.word	0x20000100
   19934:	20006f04 	.word	0x20006f04

00019938 <semihosting_console_write_ch>:
    float f_abs = *neg ? -f : f;          //  Absolute value of f
    *i = (int) f_abs;                     //  Integer part
    *d = ((int) (1000000.0f * f_abs)) % 1000000;  //  6 decimal places
}

static void semihosting_console_write_ch(char c) {
   19938:	b500      	push	{lr}
   1993a:	b083      	sub	sp, #12
   1993c:	f88d 0007 	strb.w	r0, [sp, #7]
    if (c == '\r') { return; }  //  Don't display \r.
   19940:	280d      	cmp	r0, #13
   19942:	d004      	beq.n	1994e <semihosting_console_write_ch+0x16>
    console_buffer(&c, 1);  //  Append the char to the output buffer.
   19944:	2101      	movs	r1, #1
   19946:	f10d 0007 	add.w	r0, sp, #7
   1994a:	f7ff ffcb 	bl	198e4 <console_buffer>
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}
   1994e:	b003      	add	sp, #12
   19950:	f85d fb04 	ldr.w	pc, [sp], #4

00019954 <console_printhex>:
void console_printhex(uint8_t v) {
   19954:	b510      	push	{r4, lr}
   19956:	b082      	sub	sp, #8
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   19958:	2310      	movs	r3, #16
    int length = 0;
   1995a:	2200      	movs	r2, #0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   1995c:	e005      	b.n	1996a <console_printhex+0x16>
        v = v % divisor;
   1995e:	fbb0 f1f3 	udiv	r1, r0, r3
   19962:	fb03 0011 	mls	r0, r3, r1, r0
   19966:	b2c0      	uxtb	r0, r0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   19968:	091b      	lsrs	r3, r3, #4
   1996a:	b18b      	cbz	r3, 19990 <console_printhex+0x3c>
        char digit = '0' + (char)(v / divisor);
   1996c:	fbb0 f4f3 	udiv	r4, r0, r3
   19970:	f104 0130 	add.w	r1, r4, #48	; 0x30
   19974:	b2c9      	uxtb	r1, r1
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
   19976:	2939      	cmp	r1, #57	; 0x39
   19978:	d902      	bls.n	19980 <console_printhex+0x2c>
   1997a:	f104 0157 	add.w	r1, r4, #87	; 0x57
   1997e:	b2c9      	uxtb	r1, r1
            if (length < size) {
   19980:	2a02      	cmp	r2, #2
   19982:	dcec      	bgt.n	1995e <console_printhex+0xa>
                buffer[length++] = digit;
   19984:	ac02      	add	r4, sp, #8
   19986:	4414      	add	r4, r2
   19988:	f804 1c04 	strb.w	r1, [r4, #-4]
   1998c:	3201      	adds	r2, #1
   1998e:	e7e6      	b.n	1995e <console_printhex+0xa>
    if (length == 0) { buffer[length++] = '0'; };
   19990:	b92a      	cbnz	r2, 1999e <console_printhex+0x4a>
   19992:	ab02      	add	r3, sp, #8
   19994:	4413      	add	r3, r2
   19996:	2130      	movs	r1, #48	; 0x30
   19998:	f803 1c04 	strb.w	r1, [r3, #-4]
   1999c:	3201      	adds	r2, #1
    if (length < size) buffer[length] = 0;
   1999e:	2a02      	cmp	r2, #2
   199a0:	dc04      	bgt.n	199ac <console_printhex+0x58>
   199a2:	ab02      	add	r3, sp, #8
   199a4:	441a      	add	r2, r3
   199a6:	2300      	movs	r3, #0
   199a8:	f802 3c04 	strb.w	r3, [r2, #-4]
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
   199ac:	2300      	movs	r3, #0
   199ae:	f88d 3006 	strb.w	r3, [sp, #6]
    console_buffer(buffer, strlen(buffer));
   199b2:	a801      	add	r0, sp, #4
   199b4:	f002 fb73 	bl	1c09e <strlen>
   199b8:	4601      	mov	r1, r0
   199ba:	a801      	add	r0, sp, #4
   199bc:	f7ff ff92 	bl	198e4 <console_buffer>
}
   199c0:	b002      	add	sp, #8
   199c2:	bd10      	pop	{r4, pc}

000199c4 <console_printint>:
void console_printint(int i) {
   199c4:	b508      	push	{r3, lr}
    console_printf("%d", i);
   199c6:	4601      	mov	r1, r0
   199c8:	4801      	ldr	r0, [pc, #4]	; (199d0 <console_printint+0xc>)
   199ca:	f000 f873 	bl	19ab4 <console_printf>
}
   199ce:	bd08      	pop	{r3, pc}
   199d0:	00022554 	.word	0x00022554

000199d4 <console_dump>:
    if (buffer == NULL || len == 0) { return; }
   199d4:	b180      	cbz	r0, 199f8 <console_dump+0x24>
void console_dump(const uint8_t *buffer, unsigned int len) {
   199d6:	b570      	push	{r4, r5, r6, lr}
   199d8:	4606      	mov	r6, r0
    if (buffer == NULL || len == 0) { return; }
   199da:	b161      	cbz	r1, 199f6 <console_dump+0x22>
   199dc:	460d      	mov	r5, r1
	for (int i = 0; i < len; i++) { console_printhex(buffer[i]); console_buffer(" ", 1); } 
   199de:	2400      	movs	r4, #0
   199e0:	e007      	b.n	199f2 <console_dump+0x1e>
   199e2:	5d30      	ldrb	r0, [r6, r4]
   199e4:	f7ff ffb6 	bl	19954 <console_printhex>
   199e8:	2101      	movs	r1, #1
   199ea:	4804      	ldr	r0, [pc, #16]	; (199fc <console_dump+0x28>)
   199ec:	f7ff ff7a 	bl	198e4 <console_buffer>
   199f0:	3401      	adds	r4, #1
   199f2:	42ac      	cmp	r4, r5
   199f4:	d3f5      	bcc.n	199e2 <console_dump+0xe>
}
   199f6:	bd70      	pop	{r4, r5, r6, pc}
   199f8:	4770      	bx	lr
   199fa:	bf00      	nop
   199fc:	00022550 	.word	0x00022550

00019a00 <console_out_nolock>:

int console_out_nolock(int character) {
   19a00:	b538      	push	{r3, r4, r5, lr}
    char c = (char)character;
   19a02:	b2c5      	uxtb	r5, r0
    if (g_silence_console) { return c; }
   19a04:	4b0b      	ldr	r3, [pc, #44]	; (19a34 <console_out_nolock+0x34>)
   19a06:	781b      	ldrb	r3, [r3, #0]
   19a08:	b953      	cbnz	r3, 19a20 <console_out_nolock+0x20>
   19a0a:	4604      	mov	r4, r0
    if ('\n' == c) {
   19a0c:	2d0a      	cmp	r5, #10
   19a0e:	d009      	beq.n	19a24 <console_out_nolock+0x24>
        semihosting_console_write_ch('\r');
        console_is_midline = 0;
    } else {
        console_is_midline = 1;
   19a10:	4b09      	ldr	r3, [pc, #36]	; (19a38 <console_out_nolock+0x38>)
   19a12:	2201      	movs	r2, #1
   19a14:	601a      	str	r2, [r3, #0]
    }
    semihosting_console_write_ch(c);
   19a16:	4628      	mov	r0, r5
   19a18:	f7ff ff8e 	bl	19938 <semihosting_console_write_ch>
    return character;
   19a1c:	4620      	mov	r0, r4
}
   19a1e:	bd38      	pop	{r3, r4, r5, pc}
   19a20:	4628      	mov	r0, r5
    if (g_silence_console) { return c; }
   19a22:	e7fc      	b.n	19a1e <console_out_nolock+0x1e>
        semihosting_console_write_ch('\r');
   19a24:	200d      	movs	r0, #13
   19a26:	f7ff ff87 	bl	19938 <semihosting_console_write_ch>
        console_is_midline = 0;
   19a2a:	4b03      	ldr	r3, [pc, #12]	; (19a38 <console_out_nolock+0x38>)
   19a2c:	2200      	movs	r2, #0
   19a2e:	601a      	str	r2, [r3, #0]
   19a30:	e7f1      	b.n	19a16 <console_out_nolock+0x16>
   19a32:	bf00      	nop
   19a34:	2000ddb4 	.word	0x2000ddb4
   19a38:	2000ddb8 	.word	0x2000ddb8

00019a3c <semihosting_console_init>:

void console_rx_restart(void) {}

int semihosting_console_is_init(void) { return 1; }

int semihosting_console_init(void) { return 0; }
   19a3c:	2000      	movs	r0, #0
   19a3e:	4770      	bx	lr

00019a40 <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
   19a40:	b570      	push	{r4, r5, r6, lr}
   19a42:	4606      	mov	r6, r0
   19a44:	460d      	mov	r5, r1
    int i;
    for (i = 0; i < cnt; i++) {
   19a46:	2400      	movs	r4, #0
   19a48:	42ac      	cmp	r4, r5
   19a4a:	da07      	bge.n	19a5c <console_write+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
   19a4c:	5d30      	ldrb	r0, [r6, r4]
   19a4e:	f7ff ffd7 	bl	19a00 <console_out_nolock>
   19a52:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   19a56:	d001      	beq.n	19a5c <console_write+0x1c>
    for (i = 0; i < cnt; i++) {
   19a58:	3401      	adds	r4, #1
   19a5a:	e7f5      	b.n	19a48 <console_write+0x8>
    }
}
   19a5c:	bd70      	pop	{r4, r5, r6, pc}

00019a5e <console_blocking_mode>:

void console_blocking_mode(void) {
   19a5e:	b508      	push	{r3, lr}
    disable_buffer();
   19a60:	f7ff ff3c 	bl	198dc <disable_buffer>
}
   19a64:	bd08      	pop	{r3, pc}
	...

00019a68 <console_pkg_init>:

void console_deinit(void) {}

void console_reinit(void) {}

void console_pkg_init(void) {
   19a68:	b510      	push	{r4, lr}
   19a6a:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   19a6c:	4b0d      	ldr	r3, [pc, #52]	; (19aa4 <console_pkg_init+0x3c>)
   19a6e:	781b      	ldrb	r3, [r3, #0]
   19a70:	b193      	cbz	r3, 19a98 <console_pkg_init+0x30>

    os_eventq_init(&avail_queue);
   19a72:	480d      	ldr	r0, [pc, #52]	; (19aa8 <console_pkg_init+0x40>)
   19a74:	f001 f9fa 	bl	1ae6c <os_eventq_init>
    os_mutex_init(&console_write_lock);
   19a78:	480c      	ldr	r0, [pc, #48]	; (19aac <console_pkg_init+0x44>)
   19a7a:	f001 fd15 	bl	1b4a8 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_SEMIHOSTING)
    rc = semihosting_console_init();
   19a7e:	f7ff ffdd 	bl	19a3c <semihosting_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
   19a82:	b138      	cbz	r0, 19a94 <console_pkg_init+0x2c>
   19a84:	2000      	movs	r0, #0
   19a86:	9000      	str	r0, [sp, #0]
   19a88:	4b09      	ldr	r3, [pc, #36]	; (19ab0 <console_pkg_init+0x48>)
   19a8a:	681c      	ldr	r4, [r3, #0]
   19a8c:	4603      	mov	r3, r0
   19a8e:	4602      	mov	r2, r0
   19a90:	4601      	mov	r1, r0
   19a92:	47a0      	blx	r4
}
   19a94:	b002      	add	sp, #8
   19a96:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   19a98:	461a      	mov	r2, r3
   19a9a:	4619      	mov	r1, r3
   19a9c:	4618      	mov	r0, r3
   19a9e:	f000 fed1 	bl	1a844 <__assert_func>
   19aa2:	bf00      	nop
   19aa4:	2000ddbc 	.word	0x2000ddbc
   19aa8:	20006f08 	.word	0x20006f08
   19aac:	20006f18 	.word	0x20006f18
   19ab0:	20000104 	.word	0x20000104

00019ab4 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
   19ab4:	b40f      	push	{r0, r1, r2, r3}
   19ab6:	b510      	push	{r4, lr}
   19ab8:	b082      	sub	sp, #8
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
   19aba:	f000 f81f 	bl	19afc <console_get_ticks>
   19abe:	b160      	cbz	r0, 19ada <console_printf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
   19ac0:	4b0c      	ldr	r3, [pc, #48]	; (19af4 <console_printf+0x40>)
   19ac2:	681b      	ldr	r3, [r3, #0]
   19ac4:	b10b      	cbz	r3, 19aca <console_printf+0x16>
    num_chars = 0;
   19ac6:	2400      	movs	r4, #0
   19ac8:	e008      	b.n	19adc <console_printf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
   19aca:	f002 f8d9 	bl	1bc80 <os_time_get>
   19ace:	4601      	mov	r1, r0
   19ad0:	4809      	ldr	r0, [pc, #36]	; (19af8 <console_printf+0x44>)
   19ad2:	f002 fd97 	bl	1c604 <printf>
   19ad6:	4604      	mov	r4, r0
   19ad8:	e000      	b.n	19adc <console_printf+0x28>
    num_chars = 0;
   19ada:	2400      	movs	r4, #0
        }
    }

    va_start(args, fmt);
   19adc:	a905      	add	r1, sp, #20
   19ade:	9101      	str	r1, [sp, #4]
    num_chars += vprintf(fmt, args);
   19ae0:	9804      	ldr	r0, [sp, #16]
   19ae2:	f002 fdbf 	bl	1c664 <vprintf>
    va_end(args);

    return num_chars;
}
   19ae6:	4420      	add	r0, r4
   19ae8:	b002      	add	sp, #8
   19aea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19aee:	b004      	add	sp, #16
   19af0:	4770      	bx	lr
   19af2:	bf00      	nop
   19af4:	2000ddb8 	.word	0x2000ddb8
   19af8:	00022558 	.word	0x00022558

00019afc <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
   19afc:	4b01      	ldr	r3, [pc, #4]	; (19b04 <console_get_ticks+0x8>)
   19afe:	7818      	ldrb	r0, [r3, #0]
   19b00:	4770      	bx	lr
   19b02:	bf00      	nop
   19b04:	20006f24 	.word	0x20006f24

00019b08 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   19b08:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   19b0a:	f000 fe9b 	bl	1a844 <__assert_func>
	...

00019b10 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   19b10:	4b01      	ldr	r3, [pc, #4]	; (19b18 <sysinit_start+0x8>)
   19b12:	2201      	movs	r2, #1
   19b14:	701a      	strb	r2, [r3, #0]
}
   19b16:	4770      	bx	lr
   19b18:	2000ddbc 	.word	0x2000ddbc

00019b1c <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   19b1c:	4b01      	ldr	r3, [pc, #4]	; (19b24 <sysinit_end+0x8>)
   19b1e:	2200      	movs	r2, #0
   19b20:	701a      	strb	r2, [r3, #0]
}
   19b22:	4770      	bx	lr
   19b24:	2000ddbc 	.word	0x2000ddbc

00019b28 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
   19b28:	4a09      	ldr	r2, [pc, #36]	; (19b50 <NVIC_Relocate+0x28>)
   19b2a:	4b0a      	ldr	r3, [pc, #40]	; (19b54 <NVIC_Relocate+0x2c>)
   19b2c:	429a      	cmp	r2, r3
   19b2e:	d00a      	beq.n	19b46 <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   19b30:	2300      	movs	r3, #0
   19b32:	e006      	b.n	19b42 <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
   19b34:	4a07      	ldr	r2, [pc, #28]	; (19b54 <NVIC_Relocate+0x2c>)
   19b36:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   19b3a:	4a05      	ldr	r2, [pc, #20]	; (19b50 <NVIC_Relocate+0x28>)
   19b3c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   19b40:	3301      	adds	r3, #1
   19b42:	2b35      	cmp	r3, #53	; 0x35
   19b44:	ddf6      	ble.n	19b34 <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
   19b46:	4a02      	ldr	r2, [pc, #8]	; (19b50 <NVIC_Relocate+0x28>)
   19b48:	4b03      	ldr	r3, [pc, #12]	; (19b58 <NVIC_Relocate+0x30>)
   19b4a:	609a      	str	r2, [r3, #8]
#endif
}
   19b4c:	4770      	bx	lr
   19b4e:	bf00      	nop
   19b50:	20000000 	.word	0x20000000
   19b54:	00008020 	.word	0x00008020
   19b58:	e000ed00 	.word	0xe000ed00

00019b5c <hal_gpio_irq_handler>:
 *
 * @param index
 */
static void
hal_gpio_irq_handler(void)
{
   19b5c:	b510      	push	{r4, lr}
#if NRF52840_XXAA
    gpio_state |= (uint64_t)NRF_P1->IN << 32;
#endif
#endif

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   19b5e:	2400      	movs	r4, #0
   19b60:	e000      	b.n	19b64 <hal_gpio_irq_handler+0x8>
   19b62:	3401      	adds	r4, #1
   19b64:	2c07      	cmp	r4, #7
   19b66:	dc1c      	bgt.n	19ba2 <hal_gpio_irq_handler+0x46>
        if ((hal_gpio_irqs[i].sense_trig == HAL_GPIO_SENSE_TRIG_BOTH) ||
            (hal_gpio_irqs[i].sense_trig == sense_trig)) {
            hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
        }
#else
        if (NRF_GPIOTE->EVENTS_IN[i] && (NRF_GPIOTE->INTENSET & (1 << i))) {
   19b68:	f104 0340 	add.w	r3, r4, #64	; 0x40
   19b6c:	4a0d      	ldr	r2, [pc, #52]	; (19ba4 <hal_gpio_irq_handler+0x48>)
   19b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   19b72:	2b00      	cmp	r3, #0
   19b74:	d0f5      	beq.n	19b62 <hal_gpio_irq_handler+0x6>
   19b76:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   19b7a:	2301      	movs	r3, #1
   19b7c:	40a3      	lsls	r3, r4
   19b7e:	421a      	tst	r2, r3
   19b80:	d0ef      	beq.n	19b62 <hal_gpio_irq_handler+0x6>
            NRF_GPIOTE->EVENTS_IN[i] = 0;
   19b82:	f104 0340 	add.w	r3, r4, #64	; 0x40
   19b86:	4a07      	ldr	r2, [pc, #28]	; (19ba4 <hal_gpio_irq_handler+0x48>)
   19b88:	2100      	movs	r1, #0
   19b8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            if (hal_gpio_irqs[i].func) {
   19b8e:	4b06      	ldr	r3, [pc, #24]	; (19ba8 <hal_gpio_irq_handler+0x4c>)
   19b90:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   19b94:	2a00      	cmp	r2, #0
   19b96:	d0e4      	beq.n	19b62 <hal_gpio_irq_handler+0x6>
                hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
   19b98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   19b9c:	6858      	ldr	r0, [r3, #4]
   19b9e:	4790      	blx	r2
   19ba0:	e7df      	b.n	19b62 <hal_gpio_irq_handler+0x6>
        }
#endif
    }

    os_trace_isr_exit();
}
   19ba2:	bd10      	pop	{r4, pc}
   19ba4:	40006000 	.word	0x40006000
   19ba8:	20006f28 	.word	0x20006f28

00019bac <hal_gpio_irq_setup>:
static void
hal_gpio_irq_setup(void)
{
    static uint8_t irq_setup = 0;

    if (!irq_setup) {
   19bac:	4b06      	ldr	r3, [pc, #24]	; (19bc8 <hal_gpio_irq_setup+0x1c>)
   19bae:	781b      	ldrb	r3, [r3, #0]
   19bb0:	b94b      	cbnz	r3, 19bc6 <hal_gpio_irq_setup+0x1a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   19bb2:	4b06      	ldr	r3, [pc, #24]	; (19bcc <hal_gpio_irq_setup+0x20>)
   19bb4:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   19bb6:	4a06      	ldr	r2, [pc, #24]	; (19bd0 <hal_gpio_irq_setup+0x24>)
   19bb8:	659a      	str	r2, [r3, #88]	; 0x58
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19bba:	4b06      	ldr	r3, [pc, #24]	; (19bd4 <hal_gpio_irq_setup+0x28>)
   19bbc:	2240      	movs	r2, #64	; 0x40
   19bbe:	601a      	str	r2, [r3, #0]
        NVIC_SetVector(GPIOTE_IRQn, (uint32_t)hal_gpio_irq_handler);
        NVIC_EnableIRQ(GPIOTE_IRQn);
        irq_setup = 1;
   19bc0:	4b01      	ldr	r3, [pc, #4]	; (19bc8 <hal_gpio_irq_setup+0x1c>)
   19bc2:	2201      	movs	r2, #1
   19bc4:	701a      	strb	r2, [r3, #0]
#if MYNEWT_VAL(MCU_GPIO_USE_PORT_EVENT)
        NRF_GPIOTE->INTENCLR = GPIOTE_INTENCLR_PORT_Msk;
        NRF_GPIOTE->EVENTS_PORT = 0;
#endif
    }
}
   19bc6:	4770      	bx	lr
   19bc8:	20006f68 	.word	0x20006f68
   19bcc:	e000ed00 	.word	0xe000ed00
   19bd0:	00019b5d 	.word	0x00019b5d
   19bd4:	e000e100 	.word	0xe000e100

00019bd8 <hal_gpio_find_empty_slot>:
static int
hal_gpio_find_empty_slot(void)
{
    int i;

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   19bd8:	2000      	movs	r0, #0
   19bda:	2807      	cmp	r0, #7
   19bdc:	dc05      	bgt.n	19bea <hal_gpio_find_empty_slot+0x12>
        if (hal_gpio_irqs[i].func == NULL) {
   19bde:	4b04      	ldr	r3, [pc, #16]	; (19bf0 <hal_gpio_find_empty_slot+0x18>)
   19be0:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   19be4:	b11b      	cbz	r3, 19bee <hal_gpio_find_empty_slot+0x16>
    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   19be6:	3001      	adds	r0, #1
   19be8:	e7f7      	b.n	19bda <hal_gpio_find_empty_slot+0x2>
            return i;
        }
    }
    return -1;
   19bea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   19bee:	4770      	bx	lr
   19bf0:	20006f28 	.word	0x20006f28

00019bf4 <hal_gpio_find_pin>:
        if (hal_gpio_irqs[i].func && hal_gpio_irqs[i].pin == pin) {
            return i;
        }
    }
#else
    pin = pin << GPIOTE_CONFIG_PSEL_Pos;
   19bf4:	0201      	lsls	r1, r0, #8

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   19bf6:	2000      	movs	r0, #0
   19bf8:	e000      	b.n	19bfc <hal_gpio_find_pin+0x8>
   19bfa:	3001      	adds	r0, #1
   19bfc:	2807      	cmp	r0, #7
   19bfe:	dc0e      	bgt.n	19c1e <hal_gpio_find_pin+0x2a>
        if (hal_gpio_irqs[i].func &&
   19c00:	4b08      	ldr	r3, [pc, #32]	; (19c24 <hal_gpio_find_pin+0x30>)
   19c02:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   19c06:	2b00      	cmp	r3, #0
   19c08:	d0f7      	beq.n	19bfa <hal_gpio_find_pin+0x6>
           (NRF_GPIOTE->CONFIG[i] & HAL_GPIOTE_PIN_MASK) == pin) {
   19c0a:	f500 73a2 	add.w	r3, r0, #324	; 0x144
   19c0e:	4a06      	ldr	r2, [pc, #24]	; (19c28 <hal_gpio_find_pin+0x34>)
   19c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   19c14:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
        if (hal_gpio_irqs[i].func &&
   19c18:	428b      	cmp	r3, r1
   19c1a:	d1ee      	bne.n	19bfa <hal_gpio_find_pin+0x6>
   19c1c:	e001      	b.n	19c22 <hal_gpio_find_pin+0x2e>
            return i;
        }
    }
#endif

    return -1;
   19c1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   19c22:	4770      	bx	lr
   19c24:	20006f28 	.word	0x20006f28
   19c28:	40006000 	.word	0x40006000

00019c2c <hal_gpio_init_in>:
    switch (pull) {
   19c2c:	2901      	cmp	r1, #1
   19c2e:	d003      	beq.n	19c38 <hal_gpio_init_in+0xc>
   19c30:	2902      	cmp	r1, #2
   19c32:	d00f      	beq.n	19c54 <hal_gpio_init_in+0x28>
        conf = 0;
   19c34:	2100      	movs	r1, #0
        break;
   19c36:	e000      	b.n	19c3a <hal_gpio_init_in+0xe>
        conf = GPIO_PIN_CNF_PULL_Pullup << GPIO_PIN_CNF_PULL_Pos;
   19c38:	210c      	movs	r1, #12
    port->PIN_CNF[pin_index] = conf;
   19c3a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   19c3e:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   19c42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRCLR = HAL_GPIO_MASK(pin);
   19c46:	2301      	movs	r3, #1
   19c48:	fa03 f000 	lsl.w	r0, r3, r0
   19c4c:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
}
   19c50:	2000      	movs	r0, #0
   19c52:	4770      	bx	lr
        conf = GPIO_PIN_CNF_PULL_Pulldown << GPIO_PIN_CNF_PULL_Pos;
   19c54:	2104      	movs	r1, #4
   19c56:	e7f0      	b.n	19c3a <hal_gpio_init_in+0xe>

00019c58 <hal_gpio_init_out>:
    if (val) {
   19c58:	b999      	cbnz	r1, 19c82 <hal_gpio_init_out+0x2a>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   19c5a:	2301      	movs	r3, #1
   19c5c:	4083      	lsls	r3, r0
   19c5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   19c62:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
   19c66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   19c6a:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   19c6e:	2103      	movs	r1, #3
   19c70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRSET = HAL_GPIO_MASK(pin);
   19c74:	2301      	movs	r3, #1
   19c76:	fa03 f000 	lsl.w	r0, r3, r0
   19c7a:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
}
   19c7e:	2000      	movs	r0, #0
   19c80:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   19c82:	2301      	movs	r3, #1
   19c84:	4083      	lsls	r3, r0
   19c86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   19c8a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   19c8e:	e7ea      	b.n	19c66 <hal_gpio_init_out+0xe>

00019c90 <hal_gpio_write>:
    if (val) {
   19c90:	b939      	cbnz	r1, 19ca2 <hal_gpio_write+0x12>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   19c92:	2301      	movs	r3, #1
   19c94:	fa03 f000 	lsl.w	r0, r3, r0
   19c98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19c9c:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   19ca0:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   19ca2:	2301      	movs	r3, #1
   19ca4:	fa03 f000 	lsl.w	r0, r3, r0
   19ca8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19cac:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   19cb0:	4770      	bx	lr

00019cb2 <hal_gpio_read>:
    return (port->DIR & HAL_GPIO_MASK(pin)) ?
   19cb2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19cb6:	f8d3 2514 	ldr.w	r2, [r3, #1300]	; 0x514
   19cba:	2301      	movs	r3, #1
   19cbc:	4083      	lsls	r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   19cbe:	421a      	tst	r2, r3
   19cc0:	d108      	bne.n	19cd4 <hal_gpio_read+0x22>
        (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   19cc2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19cc6:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   19cca:	fa23 f000 	lsr.w	r0, r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   19cce:	f000 0001 	and.w	r0, r0, #1
}
   19cd2:	4770      	bx	lr
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   19cd4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19cd8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
   19cdc:	fa23 f000 	lsr.w	r0, r3, r0
   19ce0:	f000 0001 	and.w	r0, r0, #1
   19ce4:	4770      	bx	lr
	...

00019ce8 <hal_gpio_irq_init>:
 * @return int
 */
int
hal_gpio_irq_init(int pin, hal_gpio_irq_handler_t handler, void *arg,
                  hal_gpio_irq_trig_t trig, hal_gpio_pull_t pull)
{
   19ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19cec:	4680      	mov	r8, r0
   19cee:	460f      	mov	r7, r1
   19cf0:	4616      	mov	r6, r2
   19cf2:	461c      	mov	r4, r3
    uint32_t conf;
    int i;

    hal_gpio_irq_setup();
   19cf4:	f7ff ff5a 	bl	19bac <hal_gpio_irq_setup>
    i = hal_gpio_find_empty_slot();
   19cf8:	f7ff ff6e 	bl	19bd8 <hal_gpio_find_empty_slot>
    if (i < 0) {
   19cfc:	1e05      	subs	r5, r0, #0
   19cfe:	db27      	blt.n	19d50 <hal_gpio_irq_init+0x68>
        return -1;
    }
    hal_gpio_init_in(pin, pull);
   19d00:	f89d 1018 	ldrb.w	r1, [sp, #24]
   19d04:	4640      	mov	r0, r8
   19d06:	f7ff ff91 	bl	19c2c <hal_gpio_init_in>
    default:
        hal_gpio_irqs[i].sense_trig = HAL_GPIO_SENSE_TRIG_NONE;
        return -1;
    }
#else
    switch (trig) {
   19d0a:	2c02      	cmp	r4, #2
   19d0c:	d01d      	beq.n	19d4a <hal_gpio_irq_init+0x62>
   19d0e:	2c03      	cmp	r4, #3
   19d10:	d018      	beq.n	19d44 <hal_gpio_irq_init+0x5c>
   19d12:	2c01      	cmp	r4, #1
   19d14:	d002      	beq.n	19d1c <hal_gpio_irq_init+0x34>
        break;
    case HAL_GPIO_TRIG_BOTH:
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
        break;
    default:
        return -1;
   19d16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19d1a:	e011      	b.n	19d40 <hal_gpio_irq_init+0x58>
        conf = GPIOTE_CONFIG_POLARITY_LoToHi << GPIOTE_CONFIG_POLARITY_Pos;
   19d1c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    }

    conf |= pin << GPIOTE_CONFIG_PSEL_Pos;
   19d20:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
    conf |= GPIOTE_CONFIG_MODE_Event << GPIOTE_CONFIG_MODE_Pos;
   19d24:	f040 0001 	orr.w	r0, r0, #1

    NRF_GPIOTE->CONFIG[i] = conf;
   19d28:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   19d2c:	4b0a      	ldr	r3, [pc, #40]	; (19d58 <hal_gpio_irq_init+0x70>)
   19d2e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
#endif

    hal_gpio_irqs[i].func = handler;
   19d32:	4b0a      	ldr	r3, [pc, #40]	; (19d5c <hal_gpio_irq_init+0x74>)
   19d34:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
    hal_gpio_irqs[i].arg = arg;
   19d38:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   19d3c:	605e      	str	r6, [r3, #4]

    return 0;
   19d3e:	2000      	movs	r0, #0
}
   19d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
   19d44:	f44f 3040 	mov.w	r0, #196608	; 0x30000
        break;
   19d48:	e7ea      	b.n	19d20 <hal_gpio_irq_init+0x38>
        conf = GPIOTE_CONFIG_POLARITY_HiToLo << GPIOTE_CONFIG_POLARITY_Pos;
   19d4a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   19d4e:	e7e7      	b.n	19d20 <hal_gpio_irq_init+0x38>
        return -1;
   19d50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19d54:	e7f4      	b.n	19d40 <hal_gpio_irq_init+0x58>
   19d56:	bf00      	nop
   19d58:	40006000 	.word	0x40006000
   19d5c:	20006f28 	.word	0x20006f28

00019d60 <hal_gpio_irq_enable>:
 *
 * @param pin
 */
void
hal_gpio_irq_enable(int pin)
{
   19d60:	b508      	push	{r3, lr}
    NRF_GPIO_Type *nrf_gpio;
    int pin_index;
#endif
    int i;

    i = hal_gpio_find_pin(pin);
   19d62:	f7ff ff47 	bl	19bf4 <hal_gpio_find_pin>
    if (i < 0) {
   19d66:	2800      	cmp	r0, #0
   19d68:	db0a      	blt.n	19d80 <hal_gpio_irq_enable+0x20>
        nrf_gpio->PIN_CNF[pin_index] |= GPIO_PIN_CNF_SENSE_High << GPIO_PIN_CNF_SENSE_Pos;
    }

    NRF_GPIOTE->INTENSET = GPIOTE_INTENSET_PORT_Msk;
#else
    NRF_GPIOTE->EVENTS_IN[i] = 0;
   19d6a:	4a06      	ldr	r2, [pc, #24]	; (19d84 <hal_gpio_irq_enable+0x24>)
   19d6c:	f100 0340 	add.w	r3, r0, #64	; 0x40
   19d70:	2100      	movs	r1, #0
   19d72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NRF_GPIOTE->INTENSET = 1 << i;
   19d76:	2301      	movs	r3, #1
   19d78:	fa03 f000 	lsl.w	r0, r3, r0
   19d7c:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
#endif
}
   19d80:	bd08      	pop	{r3, pc}
   19d82:	bf00      	nop
   19d84:	40006000 	.word	0x40006000

00019d88 <hal_i2c_delay_us>:

static void
hal_i2c_delay_us(uint32_t number_of_us)
{
register uint32_t delay __ASM ("r0") = number_of_us;
__ASM volatile (
   19d88:	3801      	subs	r0, #1
   19d8a:	bf00      	nop
   19d8c:	bf00      	nop
   19d8e:	bf00      	nop
   19d90:	bf00      	nop
   19d92:	bf00      	nop
   19d94:	bf00      	nop
   19d96:	bf00      	nop
   19d98:	bf00      	nop
   19d9a:	bf00      	nop
   19d9c:	bf00      	nop
   19d9e:	bf00      	nop
   19da0:	bf00      	nop
   19da2:	bf00      	nop
   19da4:	bf00      	nop
   19da6:	bf00      	nop
   19da8:	bf00      	nop
   19daa:	bf00      	nop
   19dac:	bf00      	nop
   19dae:	bf00      	nop
   19db0:	bf00      	nop
   19db2:	bf00      	nop
   19db4:	bf00      	nop
   19db6:	bf00      	nop
   19db8:	bf00      	nop
   19dba:	bf00      	nop
   19dbc:	bf00      	nop
   19dbe:	bf00      	nop
   19dc0:	bf00      	nop
   19dc2:	bf00      	nop
   19dc4:	bf00      	nop
   19dc6:	bf00      	nop
   19dc8:	bf00      	nop
   19dca:	bf00      	nop
   19dcc:	bf00      	nop
   19dce:	bf00      	nop
   19dd0:	bf00      	nop
   19dd2:	bf00      	nop
   19dd4:	bf00      	nop
   19dd6:	bf00      	nop
   19dd8:	bf00      	nop
   19dda:	bf00      	nop
   19ddc:	bf00      	nop
   19dde:	bf00      	nop
   19de0:	bf00      	nop
   19de2:	bf00      	nop
   19de4:	bf00      	nop
   19de6:	bf00      	nop
   19de8:	bf00      	nop
   19dea:	bf00      	nop
   19dec:	bf00      	nop
   19dee:	bf00      	nop
   19df0:	bf00      	nop
   19df2:	bf00      	nop
   19df4:	bf00      	nop
   19df6:	bf00      	nop
   19df8:	bf00      	nop
   19dfa:	bf00      	nop
   19dfc:	bf00      	nop
   19dfe:	d1c3      	bne.n	19d88 <hal_i2c_delay_us>
    " BNE 1b\n"
#ifdef NRF51
    ".syntax divided\n"
#endif
    : "+r" (delay));
}
   19e00:	4770      	bx	lr
	...

00019e04 <hal_i2c_resolve>:

static int
hal_i2c_resolve(uint8_t i2c_num, struct nrf52_hal_i2c **out_i2c)
{
    if (i2c_num >= NRF52_HAL_I2C_MAX) {
   19e04:	2801      	cmp	r0, #1
   19e06:	d806      	bhi.n	19e16 <hal_i2c_resolve+0x12>
        *out_i2c = NULL;
        return HAL_I2C_ERR_INVAL;
    }

    *out_i2c = nrf52_hal_i2cs[i2c_num];
   19e08:	4b06      	ldr	r3, [pc, #24]	; (19e24 <hal_i2c_resolve+0x20>)
   19e0a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   19e0e:	600b      	str	r3, [r1, #0]
    if (*out_i2c == NULL) {
   19e10:	b12b      	cbz	r3, 19e1e <hal_i2c_resolve+0x1a>
        return HAL_I2C_ERR_INVAL;
    }

    return 0;
   19e12:	2000      	movs	r0, #0
}
   19e14:	4770      	bx	lr
        *out_i2c = NULL;
   19e16:	2300      	movs	r3, #0
   19e18:	600b      	str	r3, [r1, #0]
        return HAL_I2C_ERR_INVAL;
   19e1a:	2002      	movs	r0, #2
   19e1c:	4770      	bx	lr
        return HAL_I2C_ERR_INVAL;
   19e1e:	2002      	movs	r0, #2
   19e20:	4770      	bx	lr
   19e22:	bf00      	nop
   19e24:	00022560 	.word	0x00022560

00019e28 <hal_i2c_convert_status>:
 * Converts an nRF SDK I2C status to a HAL I2C error code.
 */
static int
hal_i2c_convert_status(int nrf_status)
{
    if (nrf_status == 0) {
   19e28:	b148      	cbz	r0, 19e3e <hal_i2c_convert_status+0x16>
        return 0;
    } else if (nrf_status & NRF_TWIM_ERROR_DATA_NACK) {
   19e2a:	f010 0f04 	tst.w	r0, #4
   19e2e:	d107      	bne.n	19e40 <hal_i2c_convert_status+0x18>
        return HAL_I2C_ERR_DATA_NACK;
    } else if (nrf_status & NRF_TWIM_ERROR_ADDRESS_NACK) {
   19e30:	f010 0f02 	tst.w	r0, #2
   19e34:	d101      	bne.n	19e3a <hal_i2c_convert_status+0x12>
        return HAL_I2C_ERR_ADDR_NACK;
    } else {
        return HAL_I2C_ERR_UNKNOWN;
   19e36:	2001      	movs	r0, #1
    }
}
   19e38:	4770      	bx	lr
        return HAL_I2C_ERR_ADDR_NACK;
   19e3a:	2004      	movs	r0, #4
   19e3c:	4770      	bx	lr
   19e3e:	4770      	bx	lr
        return HAL_I2C_ERR_DATA_NACK;
   19e40:	2005      	movs	r0, #5
   19e42:	4770      	bx	lr

00019e44 <read_gpio_inbuffer>:
read_gpio_inbuffer(int pin)
{
    NRF_GPIO_Type *port;
    port = HAL_GPIO_PORT(pin);

    return (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   19e44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19e48:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   19e4c:	fa23 f000 	lsr.w	r0, r3, r0
}
   19e50:	f000 0001 	and.w	r0, r0, #1
   19e54:	4770      	bx	lr

00019e56 <hal_i2c_clear_bus>:
 * Clear the bus after reset by clocking 9 bits manually.
 * This should reset state from (most of) the devices on the other end.
 */
static void
hal_i2c_clear_bus(int scl_pin, int sda_pin)
{
   19e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19e5a:	4605      	mov	r5, r0
   19e5c:	460e      	mov	r6, r1
    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(scl_pin);
    sda_port = HAL_GPIO_PORT(sda_pin);

    /* Input connected, standard-low disconnected-high, pull-ups */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   19e5e:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   19e62:	f500 78e0 	add.w	r8, r0, #448	; 0x1c0
   19e66:	f240 630c 	movw	r3, #1548	; 0x60c
   19e6a:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   19e6e:	f501 77e0 	add.w	r7, r1, #448	; 0x1c0
   19e72:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_gpio_write(scl_pin, 1);
   19e76:	2101      	movs	r1, #1
   19e78:	f7ff ff0a 	bl	19c90 <hal_gpio_write>
    hal_gpio_write(sda_pin, 1);
   19e7c:	2101      	movs	r1, #1
   19e7e:	4630      	mov	r0, r6
   19e80:	f7ff ff06 	bl	19c90 <hal_gpio_write>

    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF_CLR;
   19e84:	f240 630d 	movw	r3, #1549	; 0x60d
   19e88:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF_CLR;
   19e8c:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_i2c_delay_us(4);
   19e90:	2004      	movs	r0, #4
   19e92:	f7ff ff79 	bl	19d88 <hal_i2c_delay_us>

    for (i = 0; i < 9; i++) {
   19e96:	2400      	movs	r4, #0
   19e98:	2c08      	cmp	r4, #8
   19e9a:	dc14      	bgt.n	19ec6 <hal_i2c_clear_bus+0x70>
        if (read_gpio_inbuffer(sda_pin)) {
   19e9c:	4630      	mov	r0, r6
   19e9e:	f7ff ffd1 	bl	19e44 <read_gpio_inbuffer>
   19ea2:	b978      	cbnz	r0, 19ec4 <hal_i2c_clear_bus+0x6e>
                goto ret;
            } else {
                break;
            }
        }
        hal_gpio_write(scl_pin, 0);
   19ea4:	2100      	movs	r1, #0
   19ea6:	4628      	mov	r0, r5
   19ea8:	f7ff fef2 	bl	19c90 <hal_gpio_write>
        hal_i2c_delay_us(4);
   19eac:	2004      	movs	r0, #4
   19eae:	f7ff ff6b 	bl	19d88 <hal_i2c_delay_us>
        hal_gpio_write(scl_pin, 1);
   19eb2:	2101      	movs	r1, #1
   19eb4:	4628      	mov	r0, r5
   19eb6:	f7ff feeb 	bl	19c90 <hal_gpio_write>
        hal_i2c_delay_us(4);
   19eba:	2004      	movs	r0, #4
   19ebc:	f7ff ff64 	bl	19d88 <hal_i2c_delay_us>
    for (i = 0; i < 9; i++) {
   19ec0:	3401      	adds	r4, #1
   19ec2:	e7e9      	b.n	19e98 <hal_i2c_clear_bus+0x42>
            if (i == 0) {
   19ec4:	b154      	cbz	r4, 19edc <hal_i2c_clear_bus+0x86>
    }

    /*
     * Send STOP.
     */
    hal_gpio_write(sda_pin, 0);
   19ec6:	2100      	movs	r1, #0
   19ec8:	4630      	mov	r0, r6
   19eca:	f7ff fee1 	bl	19c90 <hal_gpio_write>
    hal_i2c_delay_us(4);
   19ece:	2004      	movs	r0, #4
   19ed0:	f7ff ff5a 	bl	19d88 <hal_i2c_delay_us>
    hal_gpio_write(sda_pin, 1);
   19ed4:	2101      	movs	r1, #1
   19ed6:	4630      	mov	r0, r6
   19ed8:	f7ff feda 	bl	19c90 <hal_gpio_write>

ret:
    /* Restore GPIO config */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   19edc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19ee0:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   19ee4:	f240 620c 	movw	r2, #1548	; 0x60c
   19ee8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   19eec:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   19ef0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   19ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019ef8 <hal_i2c_init>:

int
hal_i2c_init(uint8_t i2c_num, void *usercfg)
{
   19ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
   19efa:	b083      	sub	sp, #12
    struct nrf52_hal_i2c_cfg *cfg;
    uint32_t freq;
    int rc;
    NRF_GPIO_Type *scl_port, *sda_port;

    assert(usercfg != NULL);
   19efc:	b1a1      	cbz	r1, 19f28 <hal_i2c_init+0x30>
   19efe:	460c      	mov	r4, r1

    rc = hal_i2c_resolve(i2c_num, &i2c);
   19f00:	a901      	add	r1, sp, #4
   19f02:	f7ff ff7f 	bl	19e04 <hal_i2c_resolve>
    if (rc != 0) {
   19f06:	4606      	mov	r6, r0
   19f08:	bba8      	cbnz	r0, 19f76 <hal_i2c_init+0x7e>
        goto err;
    }

    cfg = (struct nrf52_hal_i2c_cfg *) usercfg;
    regs = i2c->nhi_regs;
   19f0a:	9b01      	ldr	r3, [sp, #4]
   19f0c:	681d      	ldr	r5, [r3, #0]

    switch (cfg->i2c_frequency) {
   19f0e:	68a3      	ldr	r3, [r4, #8]
   19f10:	2bfa      	cmp	r3, #250	; 0xfa
   19f12:	d035      	beq.n	19f80 <hal_i2c_init+0x88>
   19f14:	d90e      	bls.n	19f34 <hal_i2c_init+0x3c>
   19f16:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
   19f1a:	d02f      	beq.n	19f7c <hal_i2c_init+0x84>
   19f1c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   19f20:	d131      	bne.n	19f86 <hal_i2c_init+0x8e>
        break;
    case 380:
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
        break;
    case 400:
        freq = TWI_FREQUENCY_FREQUENCY_K400;
   19f22:	f04f 67cd 	mov.w	r7, #107479040	; 0x6680000
        break;
   19f26:	e009      	b.n	19f3c <hal_i2c_init+0x44>
    assert(usercfg != NULL);
   19f28:	2300      	movs	r3, #0
   19f2a:	461a      	mov	r2, r3
   19f2c:	4619      	mov	r1, r3
   19f2e:	4618      	mov	r0, r3
   19f30:	f000 fc88 	bl	1a844 <__assert_func>
    switch (cfg->i2c_frequency) {
   19f34:	2b64      	cmp	r3, #100	; 0x64
   19f36:	d126      	bne.n	19f86 <hal_i2c_init+0x8e>
        freq = TWI_FREQUENCY_FREQUENCY_K100;
   19f38:	f04f 77cc 	mov.w	r7, #26738688	; 0x1980000
    default:
        rc = HAL_I2C_ERR_INVAL;
        goto err;
    }

    hal_i2c_clear_bus(cfg->scl_pin, cfg->sda_pin);
   19f3c:	6861      	ldr	r1, [r4, #4]
   19f3e:	6820      	ldr	r0, [r4, #0]
   19f40:	f7ff ff89 	bl	19e56 <hal_i2c_clear_bus>

    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(cfg->scl_pin);
    sda_port = HAL_GPIO_PORT(cfg->sda_pin);

    scl_port->PIN_CNF[HAL_GPIO_INDEX(cfg->scl_pin)] = NRF52_SCL_PIN_CONF;
   19f44:	6823      	ldr	r3, [r4, #0]
   19f46:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   19f4a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   19f4e:	f240 610c 	movw	r1, #1548	; 0x60c
   19f52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    sda_port->PIN_CNF[HAL_GPIO_INDEX(cfg->sda_pin)] = NRF52_SDA_PIN_CONF;
   19f56:	6863      	ldr	r3, [r4, #4]
   19f58:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   19f5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    regs->PSELSCL = cfg->scl_pin;
   19f60:	6823      	ldr	r3, [r4, #0]
   19f62:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    regs->PSELSDA = cfg->sda_pin;
   19f66:	6863      	ldr	r3, [r4, #4]
   19f68:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    regs->FREQUENCY = freq;
   19f6c:	f8c5 7524 	str.w	r7, [r5, #1316]	; 0x524
    regs->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   19f70:	2305      	movs	r3, #5
   19f72:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    return (0);
err:
    return (rc);
}
   19f76:	4630      	mov	r0, r6
   19f78:	b003      	add	sp, #12
   19f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
   19f7c:	4f03      	ldr	r7, [pc, #12]	; (19f8c <hal_i2c_init+0x94>)
        break;
   19f7e:	e7dd      	b.n	19f3c <hal_i2c_init+0x44>
        freq = TWI_FREQUENCY_FREQUENCY_K250;
   19f80:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
   19f84:	e7da      	b.n	19f3c <hal_i2c_init+0x44>
        rc = HAL_I2C_ERR_INVAL;
   19f86:	2602      	movs	r6, #2
   19f88:	e7f5      	b.n	19f76 <hal_i2c_init+0x7e>
   19f8a:	bf00      	nop
   19f8c:	06147ae9 	.word	0x06147ae9

00019f90 <hal_i2c_master_write>:
}

int
hal_i2c_master_write(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                     uint32_t timo, uint8_t last_op)
{
   19f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f94:	b083      	sub	sp, #12
   19f96:	4688      	mov	r8, r1
   19f98:	4615      	mov	r5, r2
   19f9a:	469a      	mov	sl, r3
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   19f9c:	a901      	add	r1, sp, #4
   19f9e:	f7ff ff31 	bl	19e04 <hal_i2c_resolve>
    if (rc != 0) {
   19fa2:	4681      	mov	r9, r0
   19fa4:	b118      	cbz	r0, 19fae <hal_i2c_master_write+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   19fa6:	4648      	mov	r0, r9
   19fa8:	b003      	add	sp, #12
   19faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   19fae:	9b01      	ldr	r3, [sp, #4]
   19fb0:	681c      	ldr	r4, [r3, #0]
    regs->ADDRESS = pdata->address;
   19fb2:	f898 3000 	ldrb.w	r3, [r8]
   19fb6:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    regs->EVENTS_ERROR = 0;
   19fba:	2300      	movs	r3, #0
   19fbc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   19fc0:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   19fc4:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->SHORTS = 0;
   19fc8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTTX);
   19fcc:	f104 0708 	add.w	r7, r4, #8
    int retry = 2;
   19fd0:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   19fd4:	2300      	movs	r3, #0
   19fd6:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   19fda:	2301      	movs	r3, #1
   19fdc:	603b      	str	r3, [r7, #0]
        end_ticks = os_cputime_get32() +
   19fde:	f000 fe61 	bl	1aca4 <os_cputime_get32>
   19fe2:	f100 0664 	add.w	r6, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   19fe6:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   19fea:	f7ff fe62 	bl	19cb2 <hal_gpio_read>
   19fee:	b1b0      	cbz	r0, 1a01e <hal_i2c_master_write+0x8e>
   19ff0:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   19ff4:	b99b      	cbnz	r3, 1a01e <hal_i2c_master_write+0x8e>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   19ff6:	f000 fe55 	bl	1aca4 <os_cputime_get32>
   19ffa:	1b80      	subs	r0, r0, r6
   19ffc:	2800      	cmp	r0, #0
   19ffe:	dbf2      	blt.n	19fe6 <hal_i2c_master_write+0x56>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   1a000:	2300      	movs	r3, #0
   1a002:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   1a006:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1a00a:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   1a00e:	f7ff ff22 	bl	19e56 <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   1a012:	2305      	movs	r3, #5
   1a014:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   1a018:	f1bb 0b01 	subs.w	fp, fp, #1
   1a01c:	d1da      	bne.n	19fd4 <hal_i2c_master_write+0x44>
    start = os_time_get();
   1a01e:	f001 fe2f 	bl	1bc80 <os_time_get>
   1a022:	4606      	mov	r6, r0
    for (i = 0; i < pdata->len; i++) {
   1a024:	464f      	mov	r7, r9
   1a026:	e003      	b.n	1a030 <hal_i2c_master_write+0xa0>
        if (regs->EVENTS_ERROR) {
   1a028:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a02c:	b9db      	cbnz	r3, 1a066 <hal_i2c_master_write+0xd6>
    for (i = 0; i < pdata->len; i++) {
   1a02e:	3701      	adds	r7, #1
   1a030:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   1a034:	42bb      	cmp	r3, r7
   1a036:	dd24      	ble.n	1a082 <hal_i2c_master_write+0xf2>
        regs->EVENTS_TXDSENT = 0;
   1a038:	2300      	movs	r3, #0
   1a03a:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
        regs->TXD = pdata->buffer[i];
   1a03e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1a042:	5ddb      	ldrb	r3, [r3, r7]
   1a044:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
        while (!regs->EVENTS_TXDSENT && !regs->EVENTS_ERROR) {
   1a048:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   1a04c:	2b00      	cmp	r3, #0
   1a04e:	d1eb      	bne.n	1a028 <hal_i2c_master_write+0x98>
   1a050:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a054:	2b00      	cmp	r3, #0
   1a056:	d1e7      	bne.n	1a028 <hal_i2c_master_write+0x98>
            if (os_time_get() - start > timo) {
   1a058:	f001 fe12 	bl	1bc80 <os_time_get>
   1a05c:	1b80      	subs	r0, r0, r6
   1a05e:	42a8      	cmp	r0, r5
   1a060:	d9f2      	bls.n	1a048 <hal_i2c_master_write+0xb8>
                rc = HAL_I2C_ERR_TIMEOUT;
   1a062:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   1a066:	2301      	movs	r3, #1
   1a068:	6163      	str	r3, [r4, #20]
    if (regs->EVENTS_ERROR) {
   1a06a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a06e:	2b00      	cmp	r3, #0
   1a070:	d099      	beq.n	19fa6 <hal_i2c_master_write+0x16>
        nrf_status = regs->ERRORSRC;
   1a072:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   1a076:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   1a07a:	f7ff fed5 	bl	19e28 <hal_i2c_convert_status>
   1a07e:	4681      	mov	r9, r0
   1a080:	e791      	b.n	19fa6 <hal_i2c_master_write+0x16>
    if (last_op) {
   1a082:	f1ba 0f00 	cmp.w	sl, #0
   1a086:	d08e      	beq.n	19fa6 <hal_i2c_master_write+0x16>
        regs->EVENTS_STOPPED = 0;
   1a088:	2300      	movs	r3, #0
   1a08a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        regs->TASKS_STOP = 1;
   1a08e:	2301      	movs	r3, #1
   1a090:	6163      	str	r3, [r4, #20]
        while (!regs->EVENTS_STOPPED && !regs->EVENTS_ERROR) {
   1a092:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1a096:	b953      	cbnz	r3, 1a0ae <hal_i2c_master_write+0x11e>
   1a098:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a09c:	b93b      	cbnz	r3, 1a0ae <hal_i2c_master_write+0x11e>
            if (os_time_get() - start > timo) {
   1a09e:	f001 fdef 	bl	1bc80 <os_time_get>
   1a0a2:	1b80      	subs	r0, r0, r6
   1a0a4:	42a8      	cmp	r0, r5
   1a0a6:	d9f4      	bls.n	1a092 <hal_i2c_master_write+0x102>
                rc = HAL_I2C_ERR_TIMEOUT;
   1a0a8:	f04f 0903 	mov.w	r9, #3
   1a0ac:	e7db      	b.n	1a066 <hal_i2c_master_write+0xd6>
        if (regs->EVENTS_ERROR) {
   1a0ae:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a0b2:	2b00      	cmp	r3, #0
   1a0b4:	d1d7      	bne.n	1a066 <hal_i2c_master_write+0xd6>
   1a0b6:	e776      	b.n	19fa6 <hal_i2c_master_write+0x16>

0001a0b8 <hal_i2c_master_read>:

int
hal_i2c_master_read(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                    uint32_t timo, uint8_t last_op)
{
   1a0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0bc:	b085      	sub	sp, #20
   1a0be:	460f      	mov	r7, r1
   1a0c0:	4615      	mov	r5, r2
   1a0c2:	9301      	str	r3, [sp, #4]
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   1a0c4:	a903      	add	r1, sp, #12
   1a0c6:	f7ff fe9d 	bl	19e04 <hal_i2c_resolve>
    if (rc != 0) {
   1a0ca:	4681      	mov	r9, r0
   1a0cc:	b118      	cbz	r0, 1a0d6 <hal_i2c_master_read+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   1a0ce:	4648      	mov	r0, r9
   1a0d0:	b005      	add	sp, #20
   1a0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   1a0d6:	9b03      	ldr	r3, [sp, #12]
   1a0d8:	681c      	ldr	r4, [r3, #0]
    start = os_time_get();
   1a0da:	f001 fdd1 	bl	1bc80 <os_time_get>
   1a0de:	4606      	mov	r6, r0
    if (regs->EVENTS_RXDREADY) {
   1a0e0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a0e4:	b11b      	cbz	r3, 1a0ee <hal_i2c_master_read+0x36>
        (void)regs->RXD;
   1a0e6:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
        (void)regs->RXD;
   1a0ea:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
    regs->EVENTS_ERROR = 0;
   1a0ee:	2300      	movs	r3, #0
   1a0f0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   1a0f4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   1a0f8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->EVENTS_RXDREADY = 0;
   1a0fc:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    regs->ADDRESS = pdata->address;
   1a100:	783b      	ldrb	r3, [r7, #0]
   1a102:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    if (pdata->len == 1 && last_op) {
   1a106:	887b      	ldrh	r3, [r7, #2]
   1a108:	2b01      	cmp	r3, #1
   1a10a:	d02e      	beq.n	1a16a <hal_i2c_master_read+0xb2>
        regs->SHORTS = TWI_SHORTS_BB_SUSPEND_Msk;
   1a10c:	2301      	movs	r3, #1
   1a10e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTRX);
   1a112:	46a2      	mov	sl, r4
    int retry = 2;
   1a114:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   1a118:	2300      	movs	r3, #0
   1a11a:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   1a11e:	2301      	movs	r3, #1
   1a120:	f8ca 3000 	str.w	r3, [sl]
        end_ticks = os_cputime_get32() +
   1a124:	f000 fdbe 	bl	1aca4 <os_cputime_get32>
   1a128:	f100 0864 	add.w	r8, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   1a12c:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1a130:	f7ff fdbf 	bl	19cb2 <hal_gpio_read>
   1a134:	b1b8      	cbz	r0, 1a166 <hal_i2c_master_read+0xae>
   1a136:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   1a13a:	b9a3      	cbnz	r3, 1a166 <hal_i2c_master_read+0xae>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   1a13c:	f000 fdb2 	bl	1aca4 <os_cputime_get32>
   1a140:	eba0 0008 	sub.w	r0, r0, r8
   1a144:	2800      	cmp	r0, #0
   1a146:	dbf1      	blt.n	1a12c <hal_i2c_master_read+0x74>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   1a148:	2300      	movs	r3, #0
   1a14a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   1a14e:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1a152:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   1a156:	f7ff fe7e 	bl	19e56 <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   1a15a:	2305      	movs	r3, #5
   1a15c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   1a160:	f1bb 0b01 	subs.w	fp, fp, #1
   1a164:	d1d8      	bne.n	1a118 <hal_i2c_master_read+0x60>
    int retry = 2;
   1a166:	46c8      	mov	r8, r9
   1a168:	e017      	b.n	1a19a <hal_i2c_master_read+0xe2>
    if (pdata->len == 1 && last_op) {
   1a16a:	9b01      	ldr	r3, [sp, #4]
   1a16c:	2b00      	cmp	r3, #0
   1a16e:	d0cd      	beq.n	1a10c <hal_i2c_master_read+0x54>
        regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   1a170:	2302      	movs	r3, #2
   1a172:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   1a176:	e7cc      	b.n	1a112 <hal_i2c_master_read+0x5a>
        if (regs->EVENTS_ERROR) {
   1a178:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a17c:	bb0b      	cbnz	r3, 1a1c2 <hal_i2c_master_read+0x10a>
        pdata->buffer[i] = regs->RXD;
   1a17e:	f8d4 2518 	ldr.w	r2, [r4, #1304]	; 0x518
   1a182:	687b      	ldr	r3, [r7, #4]
   1a184:	f803 2008 	strb.w	r2, [r3, r8]
        if (i == pdata->len - 2) {
   1a188:	887b      	ldrh	r3, [r7, #2]
   1a18a:	3b02      	subs	r3, #2
   1a18c:	4543      	cmp	r3, r8
   1a18e:	d02a      	beq.n	1a1e6 <hal_i2c_master_read+0x12e>
        regs->EVENTS_RXDREADY = 0;
   1a190:	2300      	movs	r3, #0
   1a192:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    for (i = 0; i < pdata->len; i++) {
   1a196:	f108 0801 	add.w	r8, r8, #1
   1a19a:	887b      	ldrh	r3, [r7, #2]
   1a19c:	4543      	cmp	r3, r8
   1a19e:	dd96      	ble.n	1a0ce <hal_i2c_master_read+0x16>
        regs->TASKS_RESUME = 1;
   1a1a0:	2301      	movs	r3, #1
   1a1a2:	6223      	str	r3, [r4, #32]
        while (!regs->EVENTS_RXDREADY && !regs->EVENTS_ERROR) {
   1a1a4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a1a8:	2b00      	cmp	r3, #0
   1a1aa:	d1e5      	bne.n	1a178 <hal_i2c_master_read+0xc0>
   1a1ac:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a1b0:	2b00      	cmp	r3, #0
   1a1b2:	d1e1      	bne.n	1a178 <hal_i2c_master_read+0xc0>
            if (os_time_get() - start > timo) {
   1a1b4:	f001 fd64 	bl	1bc80 <os_time_get>
   1a1b8:	1b80      	subs	r0, r0, r6
   1a1ba:	42a8      	cmp	r0, r5
   1a1bc:	d9f2      	bls.n	1a1a4 <hal_i2c_master_read+0xec>
                rc = HAL_I2C_ERR_TIMEOUT;
   1a1be:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   1a1c2:	2301      	movs	r3, #1
   1a1c4:	6163      	str	r3, [r4, #20]
    regs->SHORTS = 0;
   1a1c6:	2300      	movs	r3, #0
   1a1c8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    if (regs->EVENTS_ERROR) {
   1a1cc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a1d0:	2b00      	cmp	r3, #0
   1a1d2:	f43f af7c 	beq.w	1a0ce <hal_i2c_master_read+0x16>
        nrf_status = regs->ERRORSRC;
   1a1d6:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   1a1da:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   1a1de:	f7ff fe23 	bl	19e28 <hal_i2c_convert_status>
   1a1e2:	4681      	mov	r9, r0
   1a1e4:	e773      	b.n	1a0ce <hal_i2c_master_read+0x16>
            if (last_op) {
   1a1e6:	9b01      	ldr	r3, [sp, #4]
   1a1e8:	2b00      	cmp	r3, #0
   1a1ea:	d0d1      	beq.n	1a190 <hal_i2c_master_read+0xd8>
                regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   1a1ec:	2302      	movs	r3, #2
   1a1ee:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   1a1f2:	e7cd      	b.n	1a190 <hal_i2c_master_read+0xd8>

0001a1f4 <nrf52_irqm_handler>:
    }

#if (MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_1_MASTER) || MYNEWT_VAL(SPI_2_MASTER))
static void
nrf52_irqm_handler(struct nrf52_hal_spi *spi)
{
   1a1f4:	b538      	push	{r3, r4, r5, lr}
    NRF_SPIM_Type *spim;
    uint16_t xfr_bytes;
    uint16_t len;

    spim = spi->nhs_spi.spim;
   1a1f6:	6905      	ldr	r5, [r0, #16]
    if (spim->EVENTS_END) {
   1a1f8:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   1a1fc:	b32b      	cbz	r3, 1a24a <nrf52_irqm_handler+0x56>
        spim->EVENTS_END = 0;
   1a1fe:	2300      	movs	r3, #0
   1a200:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118

        /* Should not occur but if no transfer just leave  */
        if (spi->spi_xfr_flag == 0) {
   1a204:	7843      	ldrb	r3, [r0, #1]
   1a206:	b303      	cbz	r3, 1a24a <nrf52_irqm_handler+0x56>
            return;
        }

        /* Are there more bytes to send? */
        xfr_bytes = spim->TXD.AMOUNT;
   1a208:	f8d5 254c 	ldr.w	r2, [r5, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
   1a20c:	88c3      	ldrh	r3, [r0, #6]
   1a20e:	fa13 f382 	uxtah	r3, r3, r2
   1a212:	b29b      	uxth	r3, r3
   1a214:	80c3      	strh	r3, [r0, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
   1a216:	8881      	ldrh	r1, [r0, #4]
   1a218:	428b      	cmp	r3, r1
   1a21a:	d217      	bcs.n	1a24c <nrf52_irqm_handler+0x58>
   1a21c:	b292      	uxth	r2, r2
            spi->nhs_txbuf += xfr_bytes;
   1a21e:	6984      	ldr	r4, [r0, #24]
   1a220:	4414      	add	r4, r2
   1a222:	6184      	str	r4, [r0, #24]
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
   1a224:	1acb      	subs	r3, r1, r3
   1a226:	b29b      	uxth	r3, r3
            len = min(SPIM_TXD_MAXCNT_MAX, len);
   1a228:	2bff      	cmp	r3, #255	; 0xff
   1a22a:	bf28      	it	cs
   1a22c:	23ff      	movcs	r3, #255	; 0xff
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
   1a22e:	f8c5 4544 	str.w	r4, [r5, #1348]	; 0x544
            spim->TXD.MAXCNT = len;
   1a232:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548

            /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
            if (spi->nhs_rxbuf) {
   1a236:	69c1      	ldr	r1, [r0, #28]
   1a238:	b129      	cbz	r1, 1a246 <nrf52_irqm_handler+0x52>
                spi->nhs_rxbuf += xfr_bytes;
   1a23a:	440a      	add	r2, r1
   1a23c:	61c2      	str	r2, [r0, #28]
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
   1a23e:	f8c5 2534 	str.w	r2, [r5, #1332]	; 0x534
                spim->RXD.MAXCNT = len;
   1a242:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
            }
            spim->TASKS_START = 1;
   1a246:	2301      	movs	r3, #1
   1a248:	612b      	str	r3, [r5, #16]
            }
            spi->spi_xfr_flag = 0;
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
        }
    }
}
   1a24a:	bd38      	pop	{r3, r4, r5, pc}
   1a24c:	4604      	mov	r4, r0
            if (spi->txrx_cb_func) {
   1a24e:	6a03      	ldr	r3, [r0, #32]
   1a250:	b10b      	cbz	r3, 1a256 <nrf52_irqm_handler+0x62>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
   1a252:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1a254:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
   1a256:	2300      	movs	r3, #0
   1a258:	7063      	strb	r3, [r4, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
   1a25a:	2340      	movs	r3, #64	; 0x40
   1a25c:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   1a260:	e7f3      	b.n	1a24a <nrf52_irqm_handler+0x56>
	...

0001a264 <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
   1a264:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
   1a266:	4b04      	ldr	r3, [pc, #16]	; (1a278 <nrf52_spi0_irq_handler+0x14>)
   1a268:	781b      	ldrb	r3, [r3, #0]
   1a26a:	b103      	cbz	r3, 1a26e <nrf52_spi0_irq_handler+0xa>
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
   1a26c:	bd08      	pop	{r3, pc}
        nrf52_irqm_handler(&nrf52_hal_spi0);
   1a26e:	4802      	ldr	r0, [pc, #8]	; (1a278 <nrf52_spi0_irq_handler+0x14>)
   1a270:	f7ff ffc0 	bl	1a1f4 <nrf52_irqm_handler>
}
   1a274:	e7fa      	b.n	1a26c <nrf52_spi0_irq_handler+0x8>
   1a276:	bf00      	nop
   1a278:	2000ddc0 	.word	0x2000ddc0

0001a27c <hal_spi_stop_transfer>:
#endif

static void
hal_spi_stop_transfer(NRF_SPIM_Type *spim)
{
    spim->TASKS_STOP = 1;
   1a27c:	2301      	movs	r3, #1
   1a27e:	6143      	str	r3, [r0, #20]
    while (!spim->EVENTS_STOPPED) {}
   1a280:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
   1a284:	2b00      	cmp	r3, #0
   1a286:	d0fb      	beq.n	1a280 <hal_spi_stop_transfer+0x4>
    spim->EVENTS_STOPPED = 0;
   1a288:	2300      	movs	r3, #0
   1a28a:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
}
   1a28e:	4770      	bx	lr

0001a290 <hal_spi_config_slave>:
}

static int
hal_spi_config_slave(struct nrf52_hal_spi *spi,
                     struct hal_spi_settings *settings)
{
   1a290:	b410      	push	{r4}
    int rc;
    uint32_t nrf_config;
    NRF_SPIS_Type *spis;

    spis = spi->nhs_spi.spis;
   1a292:	6902      	ldr	r2, [r0, #16]

    rc = 0;
    switch (settings->data_mode) {
   1a294:	780b      	ldrb	r3, [r1, #0]
   1a296:	2b03      	cmp	r3, #3
   1a298:	d80c      	bhi.n	1a2b4 <hal_spi_config_slave+0x24>
   1a29a:	e8df f003 	tbb	[pc, r3]
   1a29e:	0e02      	.short	0x0e02
   1a2a0:	0805      	.short	0x0805
        case HAL_SPI_MODE0:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   1a2a2:	2300      	movs	r3, #0
    rc = 0;
   1a2a4:	4618      	mov	r0, r3
   1a2a6:	e00a      	b.n	1a2be <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE1:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
        case HAL_SPI_MODE2:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   1a2a8:	2304      	movs	r3, #4
    rc = 0;
   1a2aa:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Leading << SPIS_CONFIG_CPHA_Pos);
            break;
   1a2ac:	e007      	b.n	1a2be <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE3:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   1a2ae:	2306      	movs	r3, #6
    rc = 0;
   1a2b0:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
   1a2b2:	e004      	b.n	1a2be <hal_spi_config_slave+0x2e>
        default:
            nrf_config = 0;
   1a2b4:	2300      	movs	r3, #0
            rc = EINVAL;
   1a2b6:	2016      	movs	r0, #22
            break;
   1a2b8:	e001      	b.n	1a2be <hal_spi_config_slave+0x2e>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   1a2ba:	2302      	movs	r3, #2
    rc = 0;
   1a2bc:	2000      	movs	r0, #0
    }

    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   1a2be:	784c      	ldrb	r4, [r1, #1]
   1a2c0:	2c01      	cmp	r4, #1
   1a2c2:	d006      	beq.n	1a2d2 <hal_spi_config_slave+0x42>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
    }
    spis->CONFIG = nrf_config;
   1a2c4:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554

    /* Only 8-bit word sizes supported. */
    switch (settings->word_size) {
   1a2c8:	788b      	ldrb	r3, [r1, #2]
   1a2ca:	b92b      	cbnz	r3, 1a2d8 <hal_spi_config_slave+0x48>
            rc = EINVAL;
            break;
    }

    return rc;
}
   1a2cc:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a2d0:	4770      	bx	lr
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
   1a2d2:	f043 0301 	orr.w	r3, r3, #1
   1a2d6:	e7f5      	b.n	1a2c4 <hal_spi_config_slave+0x34>
            rc = EINVAL;
   1a2d8:	2016      	movs	r0, #22
    return rc;
   1a2da:	e7f7      	b.n	1a2cc <hal_spi_config_slave+0x3c>

0001a2dc <hal_spi_init_master>:

static int
hal_spi_init_master(struct nrf52_hal_spi *spi,
                    struct nrf52_hal_spi_cfg *cfg,
                    nrf52_spi_irq_handler_t handler)
{
   1a2dc:	b430      	push	{r4, r5}
    NRF_GPIO_Type *port;
    uint32_t pin;

    /*  Configure MOSI */
    port = HAL_GPIO_PORT(cfg->mosi_pin);
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
   1a2de:	784b      	ldrb	r3, [r1, #1]
    port->OUTCLR = (1UL << pin);
   1a2e0:	2501      	movs	r5, #1
   1a2e2:	409d      	lsls	r5, r3
   1a2e4:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1a2e8:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    port->PIN_CNF[pin] =
   1a2ec:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1a2f0:	2503      	movs	r5, #3
   1a2f2:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);

    /* Configure MISO */
    port = HAL_GPIO_PORT(cfg->miso_pin);
    pin = HAL_GPIO_INDEX(cfg->miso_pin);
   1a2f6:	788b      	ldrb	r3, [r1, #2]
    port->PIN_CNF[pin] =
   1a2f8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1a2fc:	2500      	movs	r5, #0
   1a2fe:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos);

    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
   1a302:	6903      	ldr	r3, [r0, #16]
    spim->PSEL.SCK = cfg->sck_pin;
   1a304:	780c      	ldrb	r4, [r1, #0]
   1a306:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
   1a30a:	784c      	ldrb	r4, [r1, #1]
   1a30c:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
    spim->PSEL.MISO = cfg->miso_pin;
   1a310:	7889      	ldrb	r1, [r1, #2]
   1a312:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1a316:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a31a:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
   1a31e:	f990 3014 	ldrsb.w	r3, [r0, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a322:	4919      	ldr	r1, [pc, #100]	; (1a388 <hal_spi_init_master+0xac>)
   1a324:	6889      	ldr	r1, [r1, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a326:	3310      	adds	r3, #16
   1a328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_SetPriority(spi->irq_num, (1 << __NVIC_PRIO_BITS) - 1);
   1a32c:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1a330:	42ab      	cmp	r3, r5
   1a332:	db22      	blt.n	1a37a <hal_spi_init_master+0x9e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a334:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   1a338:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   1a33c:	22e0      	movs	r2, #224	; 0xe0
   1a33e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NVIC_ClearPendingIRQ(spi->irq_num);
   1a342:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1a346:	2b00      	cmp	r3, #0
   1a348:	db08      	blt.n	1a35c <hal_spi_init_master+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a34a:	f003 011f 	and.w	r1, r3, #31
   1a34e:	095b      	lsrs	r3, r3, #5
   1a350:	2201      	movs	r2, #1
   1a352:	408a      	lsls	r2, r1
   1a354:	3360      	adds	r3, #96	; 0x60
   1a356:	490d      	ldr	r1, [pc, #52]	; (1a38c <hal_spi_init_master+0xb0>)
   1a358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_EnableIRQ(spi->irq_num);
   1a35c:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1a360:	2b00      	cmp	r3, #0
   1a362:	db07      	blt.n	1a374 <hal_spi_init_master+0x98>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a364:	f003 011f 	and.w	r1, r3, #31
   1a368:	095b      	lsrs	r3, r3, #5
   1a36a:	2201      	movs	r2, #1
   1a36c:	408a      	lsls	r2, r1
   1a36e:	4907      	ldr	r1, [pc, #28]	; (1a38c <hal_spi_init_master+0xb0>)
   1a370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return 0;
}
   1a374:	2000      	movs	r0, #0
   1a376:	bc30      	pop	{r4, r5}
   1a378:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a37a:	f003 030f 	and.w	r3, r3, #15
   1a37e:	4a04      	ldr	r2, [pc, #16]	; (1a390 <hal_spi_init_master+0xb4>)
   1a380:	441a      	add	r2, r3
   1a382:	23e0      	movs	r3, #224	; 0xe0
   1a384:	7613      	strb	r3, [r2, #24]
   1a386:	e7dc      	b.n	1a342 <hal_spi_init_master+0x66>
   1a388:	e000ed00 	.word	0xe000ed00
   1a38c:	e000e100 	.word	0xe000e100
   1a390:	e000ecfc 	.word	0xe000ecfc

0001a394 <hal_spi_config_master>:
{
   1a394:	b410      	push	{r4}
    spim = spi->nhs_spi.spim;
   1a396:	6902      	ldr	r2, [r0, #16]
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
   1a398:	680c      	ldr	r4, [r1, #0]
   1a39a:	684b      	ldr	r3, [r1, #4]
   1a39c:	6084      	str	r4, [r0, #8]
   1a39e:	60c3      	str	r3, [r0, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
   1a3a0:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
   1a3a4:	f003 031f 	and.w	r3, r3, #31
    if (settings->data_mode <= HAL_SPI_MODE1) {
   1a3a8:	7808      	ldrb	r0, [r1, #0]
   1a3aa:	2801      	cmp	r0, #1
   1a3ac:	d916      	bls.n	1a3dc <hal_spi_config_master+0x48>
        port->OUTSET = (1UL << pin);
   1a3ae:	2001      	movs	r0, #1
   1a3b0:	4098      	lsls	r0, r3
   1a3b2:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1a3b6:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    port->PIN_CNF[pin] =
   1a3ba:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1a3be:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1a3c2:	2403      	movs	r4, #3
   1a3c4:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    switch (settings->word_size) {
   1a3c8:	788b      	ldrb	r3, [r1, #2]
   1a3ca:	b973      	cbnz	r3, 1a3ea <hal_spi_config_master+0x56>
    rc = 0;
   1a3cc:	2000      	movs	r0, #0
    switch (settings->data_mode) {
   1a3ce:	780b      	ldrb	r3, [r1, #0]
   1a3d0:	2b03      	cmp	r3, #3
   1a3d2:	d812      	bhi.n	1a3fa <hal_spi_config_master+0x66>
   1a3d4:	e8df f003 	tbb	[pc, r3]
   1a3d8:	0f0d140b 	.word	0x0f0d140b
        port->OUTCLR = (1UL << pin);
   1a3dc:	2001      	movs	r0, #1
   1a3de:	4098      	lsls	r0, r3
   1a3e0:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1a3e4:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
   1a3e8:	e7e7      	b.n	1a3ba <hal_spi_config_master+0x26>
            rc = EINVAL;
   1a3ea:	2016      	movs	r0, #22
   1a3ec:	e7ef      	b.n	1a3ce <hal_spi_config_master+0x3a>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1a3ee:	2300      	movs	r3, #0
   1a3f0:	e007      	b.n	1a402 <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   1a3f2:	2304      	movs	r3, #4
            break;
   1a3f4:	e005      	b.n	1a402 <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   1a3f6:	2306      	movs	r3, #6
            break;
   1a3f8:	e003      	b.n	1a402 <hal_spi_config_master+0x6e>
            nrf_config = 0;
   1a3fa:	2300      	movs	r3, #0
            rc = EINVAL;
   1a3fc:	2016      	movs	r0, #22
            break;
   1a3fe:	e000      	b.n	1a402 <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1a400:	2302      	movs	r3, #2
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   1a402:	784c      	ldrb	r4, [r1, #1]
   1a404:	2c01      	cmp	r4, #1
   1a406:	d010      	beq.n	1a42a <hal_spi_config_master+0x96>
    spim->CONFIG = nrf_config;
   1a408:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
    switch (settings->baudrate) {
   1a40c:	684b      	ldr	r3, [r1, #4]
   1a40e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1a412:	d023      	beq.n	1a45c <hal_spi_config_master+0xc8>
   1a414:	d80c      	bhi.n	1a430 <hal_spi_config_master+0x9c>
   1a416:	2bfa      	cmp	r3, #250	; 0xfa
   1a418:	d029      	beq.n	1a46e <hal_spi_config_master+0xda>
   1a41a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1a41e:	d01a      	beq.n	1a456 <hal_spi_config_master+0xc2>
   1a420:	2b7d      	cmp	r3, #125	; 0x7d
   1a422:	d011      	beq.n	1a448 <hal_spi_config_master+0xb4>
            frequency = 0;
   1a424:	2300      	movs	r3, #0
            rc = EINVAL;
   1a426:	2016      	movs	r0, #22
            break;
   1a428:	e010      	b.n	1a44c <hal_spi_config_master+0xb8>
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
   1a42a:	f043 0301 	orr.w	r3, r3, #1
   1a42e:	e7eb      	b.n	1a408 <hal_spi_config_master+0x74>
    switch (settings->baudrate) {
   1a430:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
   1a434:	d015      	beq.n	1a462 <hal_spi_config_master+0xce>
   1a436:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
   1a43a:	d015      	beq.n	1a468 <hal_spi_config_master+0xd4>
   1a43c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   1a440:	d1f0      	bne.n	1a424 <hal_spi_config_master+0x90>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
   1a442:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
            break;
   1a446:	e001      	b.n	1a44c <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K125;
   1a448:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    spim->FREQUENCY = frequency;
   1a44c:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
}
   1a450:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a454:	4770      	bx	lr
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
   1a456:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
            break;
   1a45a:	e7f7      	b.n	1a44c <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
   1a45c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            break;
   1a460:	e7f4      	b.n	1a44c <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
   1a462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
            break;
   1a466:	e7f1      	b.n	1a44c <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
   1a468:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
            break;
   1a46c:	e7ee      	b.n	1a44c <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K250;
   1a46e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1a472:	e7eb      	b.n	1a44c <hal_spi_config_master+0xb8>

0001a474 <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a474:	2802      	cmp	r0, #2
   1a476:	dc10      	bgt.n	1a49a <hal_spi_config+0x26>
{
   1a478:	b508      	push	{r3, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a47a:	4b0b      	ldr	r3, [pc, #44]	; (1a4a8 <hal_spi_config+0x34>)
   1a47c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1a480:	b168      	cbz	r0, 1a49e <hal_spi_config+0x2a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   1a482:	6903      	ldr	r3, [r0, #16]
    if (spim->ENABLE != 0) {
   1a484:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   1a488:	b95b      	cbnz	r3, 1a4a2 <hal_spi_config+0x2e>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1a48a:	7803      	ldrb	r3, [r0, #0]
   1a48c:	b113      	cbz	r3, 1a494 <hal_spi_config+0x20>
        rc = hal_spi_config_master(spi, settings);
    } else {
        rc = hal_spi_config_slave(spi, settings);
   1a48e:	f7ff feff 	bl	1a290 <hal_spi_config_slave>
    }

err:
    return (rc);
}
   1a492:	bd08      	pop	{r3, pc}
        rc = hal_spi_config_master(spi, settings);
   1a494:	f7ff ff7e 	bl	1a394 <hal_spi_config_master>
   1a498:	e7fb      	b.n	1a492 <hal_spi_config+0x1e>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a49a:	2016      	movs	r0, #22
}
   1a49c:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a49e:	2016      	movs	r0, #22
   1a4a0:	e7f7      	b.n	1a492 <hal_spi_config+0x1e>
        return -1;
   1a4a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a4a6:	e7f4      	b.n	1a492 <hal_spi_config+0x1e>
   1a4a8:	00022568 	.word	0x00022568

0001a4ac <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a4ac:	2802      	cmp	r0, #2
   1a4ae:	dc1b      	bgt.n	1a4e8 <hal_spi_enable+0x3c>
   1a4b0:	4b10      	ldr	r3, [pc, #64]	; (1a4f4 <hal_spi_enable+0x48>)
   1a4b2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1a4b6:	b1cb      	cbz	r3, 1a4ec <hal_spi_enable+0x40>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1a4b8:	781a      	ldrb	r2, [r3, #0]
   1a4ba:	b17a      	cbz	r2, 1a4dc <hal_spi_enable+0x30>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    } else {
        if (spi->txrx_cb_func == NULL) {
   1a4bc:	6a1a      	ldr	r2, [r3, #32]
   1a4be:	b1ba      	cbz	r2, 1a4f0 <hal_spi_enable+0x44>
            rc = EINVAL;
            goto err;
        }

        spis = spi->nhs_spi.spis;
   1a4c0:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
   1a4c2:	2000      	movs	r0, #0
   1a4c4:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   1a4c8:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
   1a4cc:	f240 4202 	movw	r2, #1026	; 0x402
   1a4d0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
   1a4d4:	2202      	movs	r2, #2
   1a4d6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1a4da:	4770      	bx	lr
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
   1a4dc:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1a4de:	2201      	movs	r2, #1
   1a4e0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    }
    rc = 0;
   1a4e4:	2000      	movs	r0, #0
   1a4e6:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a4e8:	2016      	movs	r0, #22
   1a4ea:	4770      	bx	lr
   1a4ec:	2016      	movs	r0, #22
   1a4ee:	4770      	bx	lr
            rc = EINVAL;
   1a4f0:	2016      	movs	r0, #22

err:
    return rc;
}
   1a4f2:	4770      	bx	lr
   1a4f4:	00022568 	.word	0x00022568

0001a4f8 <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a4f8:	2802      	cmp	r0, #2
   1a4fa:	dc2a      	bgt.n	1a552 <hal_spi_disable+0x5a>
{
   1a4fc:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a4fe:	4b17      	ldr	r3, [pc, #92]	; (1a55c <hal_spi_disable+0x64>)
   1a500:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1a504:	b33c      	cbz	r4, 1a556 <hal_spi_disable+0x5e>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1a506:	7823      	ldrb	r3, [r4, #0]
   1a508:	b9ab      	cbnz	r3, 1a536 <hal_spi_disable+0x3e>
        spim = spi->nhs_spi.spim;
   1a50a:	6925      	ldr	r5, [r4, #16]
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1a50c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a510:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308

        if (spi->spi_xfr_flag) {
   1a514:	7863      	ldrb	r3, [r4, #1]
   1a516:	b943      	cbnz	r3, 1a52a <hal_spi_disable+0x32>
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
        }
        spim->ENABLE = 0;
   1a518:	2300      	movs	r3, #0
   1a51a:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
   1a51e:	2000      	movs	r0, #0
   1a520:	61a0      	str	r0, [r4, #24]
    spi->nhs_rxbuf = NULL;
   1a522:	61e0      	str	r0, [r4, #28]
    spi->nhs_buflen = 0;
   1a524:	80a0      	strh	r0, [r4, #4]
    spi->nhs_bytes_txd = 0;
   1a526:	80e0      	strh	r0, [r4, #6]

    rc = 0;

err:
    return rc;
}
   1a528:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_stop_transfer(spim);
   1a52a:	4628      	mov	r0, r5
   1a52c:	f7ff fea6 	bl	1a27c <hal_spi_stop_transfer>
            spi->spi_xfr_flag = 0;
   1a530:	2300      	movs	r3, #0
   1a532:	7063      	strb	r3, [r4, #1]
   1a534:	e7f0      	b.n	1a518 <hal_spi_disable+0x20>
        spis = spi->nhs_spi.spis;
   1a536:	6922      	ldr	r2, [r4, #16]
        spis->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1a538:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a53c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        spis->EVENTS_END = 0;
   1a540:	2300      	movs	r3, #0
   1a542:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   1a546:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
        spis->ENABLE = 0;
   1a54a:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
   1a54e:	70e3      	strb	r3, [r4, #3]
   1a550:	e7e5      	b.n	1a51e <hal_spi_disable+0x26>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a552:	2016      	movs	r0, #22
}
   1a554:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a556:	2016      	movs	r0, #22
    return rc;
   1a558:	e7e6      	b.n	1a528 <hal_spi_disable+0x30>
   1a55a:	bf00      	nop
   1a55c:	00022568 	.word	0x00022568

0001a560 <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a560:	2802      	cmp	r0, #2
   1a562:	dc1d      	bgt.n	1a5a0 <hal_spi_init+0x40>
{
   1a564:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a566:	4b13      	ldr	r3, [pc, #76]	; (1a5b4 <hal_spi_init+0x54>)
   1a568:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1a56c:	b1d4      	cbz	r4, 1a5a4 <hal_spi_init+0x44>
    if (cfg == NULL) {
   1a56e:	b1d9      	cbz	r1, 1a5a8 <hal_spi_init+0x48>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
   1a570:	2a01      	cmp	r2, #1
   1a572:	d81b      	bhi.n	1a5ac <hal_spi_init+0x4c>
    spi->spi_type  = spi_type;
   1a574:	7022      	strb	r2, [r4, #0]
    if (spi_num == 0) {
   1a576:	b9d8      	cbnz	r0, 1a5b0 <hal_spi_init+0x50>
   1a578:	460d      	mov	r5, r1
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
   1a57a:	2303      	movs	r3, #3
   1a57c:	7523      	strb	r3, [r4, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
   1a57e:	b94a      	cbnz	r2, 1a594 <hal_spi_init+0x34>
            spi->nhs_spi.spim = NRF_SPIM0;
   1a580:	4b0d      	ldr	r3, [pc, #52]	; (1a5b8 <hal_spi_init+0x58>)
   1a582:	6123      	str	r3, [r4, #16]
    hal_spi_disable(spi_num);
   1a584:	f7ff ffb8 	bl	1a4f8 <hal_spi_disable>
        rc = hal_spi_init_master(spi, (struct nrf52_hal_spi_cfg *)cfg,
   1a588:	4a0c      	ldr	r2, [pc, #48]	; (1a5bc <hal_spi_init+0x5c>)
   1a58a:	4629      	mov	r1, r5
   1a58c:	4620      	mov	r0, r4
   1a58e:	f7ff fea5 	bl	1a2dc <hal_spi_init_master>
   1a592:	e00c      	b.n	1a5ae <hal_spi_init+0x4e>
            assert(0);
   1a594:	2300      	movs	r3, #0
   1a596:	461a      	mov	r2, r3
   1a598:	4619      	mov	r1, r3
   1a59a:	4618      	mov	r0, r3
   1a59c:	f000 f952 	bl	1a844 <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a5a0:	2016      	movs	r0, #22
}
   1a5a2:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a5a4:	2016      	movs	r0, #22
   1a5a6:	e002      	b.n	1a5ae <hal_spi_init+0x4e>
    rc = EINVAL;
   1a5a8:	2016      	movs	r0, #22
   1a5aa:	e000      	b.n	1a5ae <hal_spi_init+0x4e>
   1a5ac:	2016      	movs	r0, #22
}
   1a5ae:	bd38      	pop	{r3, r4, r5, pc}
    rc = EINVAL;
   1a5b0:	2016      	movs	r0, #22
    return (rc);
   1a5b2:	e7fc      	b.n	1a5ae <hal_spi_init+0x4e>
   1a5b4:	00022568 	.word	0x00022568
   1a5b8:	40003000 	.word	0x40003000
   1a5bc:	0001a265 	.word	0x0001a265

0001a5c0 <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a5c0:	2802      	cmp	r0, #2
   1a5c2:	dc0a      	bgt.n	1a5da <hal_spi_set_txrx_cb+0x1a>
   1a5c4:	4b08      	ldr	r3, [pc, #32]	; (1a5e8 <hal_spi_set_txrx_cb+0x28>)
   1a5c6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1a5ca:	b143      	cbz	r3, 1a5de <hal_spi_set_txrx_cb+0x1e>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   1a5cc:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
   1a5ce:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
   1a5d2:	b930      	cbnz	r0, 1a5e2 <hal_spi_set_txrx_cb+0x22>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
   1a5d4:	6219      	str	r1, [r3, #32]
        spi->txrx_cb_arg = arg;
   1a5d6:	625a      	str	r2, [r3, #36]	; 0x24
   1a5d8:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a5da:	2016      	movs	r0, #22
   1a5dc:	4770      	bx	lr
   1a5de:	2016      	movs	r0, #22
   1a5e0:	4770      	bx	lr
        rc = -1;
   1a5e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        rc = 0;
    }

err:
    return rc;
}
   1a5e6:	4770      	bx	lr
   1a5e8:	00022568 	.word	0x00022568

0001a5ec <hal_spi_txrx>:
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
   1a5ec:	2b00      	cmp	r3, #0
   1a5ee:	d046      	beq.n	1a67e <hal_spi_txrx+0x92>
{
   1a5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a5f2:	460d      	mov	r5, r1
   1a5f4:	4617      	mov	r7, r2
   1a5f6:	461e      	mov	r6, r3
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
   1a5f8:	2802      	cmp	r0, #2
   1a5fa:	dc42      	bgt.n	1a682 <hal_spi_txrx+0x96>
   1a5fc:	4b25      	ldr	r3, [pc, #148]	; (1a694 <hal_spi_txrx+0xa8>)
   1a5fe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1a602:	2b00      	cmp	r3, #0
   1a604:	d03f      	beq.n	1a686 <hal_spi_txrx+0x9a>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1a606:	781a      	ldrb	r2, [r3, #0]
   1a608:	2a00      	cmp	r2, #0
   1a60a:	d13e      	bne.n	1a68a <hal_spi_txrx+0x9e>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   1a60c:	2900      	cmp	r1, #0
   1a60e:	d03e      	beq.n	1a68e <hal_spi_txrx+0xa2>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
   1a610:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
   1a612:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
   1a616:	2b07      	cmp	r3, #7
   1a618:	d004      	beq.n	1a624 <hal_spi_txrx+0x38>
            hal_spi_disable(spi_num);
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
   1a61a:	b95b      	cbnz	r3, 1a634 <hal_spi_txrx+0x48>
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1a61c:	2301      	movs	r3, #1
   1a61e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   1a622:	e007      	b.n	1a634 <hal_spi_txrx+0x48>
            hal_spi_disable(spi_num);
   1a624:	f7ff ff68 	bl	1a4f8 <hal_spi_disable>
   1a628:	e7f8      	b.n	1a61c <hal_spi_txrx+0x30>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
   1a62a:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
   1a62e:	2300      	movs	r3, #0
   1a630:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        while (spi->EVENTS_READY) {
   1a634:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a638:	2b00      	cmp	r3, #0
   1a63a:	d1f6      	bne.n	1a62a <hal_spi_txrx+0x3e>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
   1a63c:	782b      	ldrb	r3, [r5, #0]
   1a63e:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
   1a642:	1e71      	subs	r1, r6, #1
        rxd = (uint8_t *)rxbuf;
   1a644:	4638      	mov	r0, r7
        for (i = 0; i < len; ++i) {
   1a646:	2200      	movs	r2, #0
   1a648:	e00d      	b.n	1a666 <hal_spi_txrx+0x7a>
            if (txcnt) {
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
   1a64a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a64e:	2b00      	cmp	r3, #0
   1a650:	d0fb      	beq.n	1a64a <hal_spi_txrx+0x5e>
            spi->EVENTS_READY = 0;
   1a652:	2300      	movs	r3, #0
   1a654:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
   1a658:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
   1a65c:	b2db      	uxtb	r3, r3
            if (rxbuf) {
   1a65e:	b10f      	cbz	r7, 1a664 <hal_spi_txrx+0x78>
                *rxd = rxval;
   1a660:	f800 3b01 	strb.w	r3, [r0], #1
        for (i = 0; i < len; ++i) {
   1a664:	3201      	adds	r2, #1
   1a666:	42b2      	cmp	r2, r6
   1a668:	da07      	bge.n	1a67a <hal_spi_txrx+0x8e>
            if (txcnt) {
   1a66a:	2900      	cmp	r1, #0
   1a66c:	d0ed      	beq.n	1a64a <hal_spi_txrx+0x5e>
                spi->TXD = *txd;
   1a66e:	786b      	ldrb	r3, [r5, #1]
   1a670:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
                --txcnt;
   1a674:	3901      	subs	r1, #1
                ++txd;
   1a676:	3501      	adds	r5, #1
   1a678:	e7e7      	b.n	1a64a <hal_spi_txrx+0x5e>
                ++rxd;
            }
        }
        return 0;
   1a67a:	2000      	movs	r0, #0
    }

err:
    return rc;
}
   1a67c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return rc;
   1a67e:	2016      	movs	r0, #22
}
   1a680:	4770      	bx	lr
    return rc;
   1a682:	2016      	movs	r0, #22
   1a684:	e7fa      	b.n	1a67c <hal_spi_txrx+0x90>
   1a686:	2016      	movs	r0, #22
   1a688:	e7f8      	b.n	1a67c <hal_spi_txrx+0x90>
   1a68a:	2016      	movs	r0, #22
   1a68c:	e7f6      	b.n	1a67c <hal_spi_txrx+0x90>
   1a68e:	2016      	movs	r0, #22
   1a690:	e7f4      	b.n	1a67c <hal_spi_txrx+0x90>
   1a692:	bf00      	nop
   1a694:	00022568 	.word	0x00022568

0001a698 <hal_spi_txrx_noblock>:
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    rc = EINVAL;
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a698:	2802      	cmp	r0, #2
   1a69a:	dc57      	bgt.n	1a74c <hal_spi_txrx_noblock+0xb4>
{
   1a69c:	b430      	push	{r4, r5}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a69e:	4c35      	ldr	r4, [pc, #212]	; (1a774 <hal_spi_txrx_noblock+0xdc>)
   1a6a0:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   1a6a4:	2800      	cmp	r0, #0
   1a6a6:	d053      	beq.n	1a750 <hal_spi_txrx_noblock+0xb8>

    if ((spi->txrx_cb_func == NULL) || (len == 0)) {
   1a6a8:	6a04      	ldr	r4, [r0, #32]
   1a6aa:	2c00      	cmp	r4, #0
   1a6ac:	d052      	beq.n	1a754 <hal_spi_txrx_noblock+0xbc>
   1a6ae:	2b00      	cmp	r3, #0
   1a6b0:	d052      	beq.n	1a758 <hal_spi_txrx_noblock+0xc0>
        }
        return rc;
    }
#endif

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1a6b2:	7804      	ldrb	r4, [r0, #0]
   1a6b4:	2c00      	cmp	r4, #0
   1a6b6:	d137      	bne.n	1a728 <hal_spi_txrx_noblock+0x90>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   1a6b8:	2900      	cmp	r1, #0
   1a6ba:	d050      	beq.n	1a75e <hal_spi_txrx_noblock+0xc6>
            goto err;
        }

        /* Not allowed if transfer in progress */
        if (spi->spi_xfr_flag) {
   1a6bc:	7844      	ldrb	r4, [r0, #1]
   1a6be:	2c00      	cmp	r4, #0
   1a6c0:	d14f      	bne.n	1a762 <hal_spi_txrx_noblock+0xca>
            rc = -1;
            goto err;
        }
        spim = spi->nhs_spi.spim;
   1a6c2:	6904      	ldr	r4, [r0, #16]
        spim->INTENCLR = SPIM_INTENCLR_END_Msk;
   1a6c4:	2540      	movs	r5, #64	; 0x40
   1a6c6:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
        spi->spi_xfr_flag = 1;
   1a6ca:	2501      	movs	r5, #1
   1a6cc:	7045      	strb	r5, [r0, #1]

        /* Must be enabled for SPIM as opposed to SPI */
        if (spim->ENABLE != SPIM_ENABLE_ENABLE_Enabled) {
   1a6ce:	f8d4 5500 	ldr.w	r5, [r4, #1280]	; 0x500
   1a6d2:	2d07      	cmp	r5, #7
   1a6d4:	d005      	beq.n	1a6e2 <hal_spi_txrx_noblock+0x4a>
            spim->ENABLE = 0;
   1a6d6:	2500      	movs	r5, #0
   1a6d8:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
            spim->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   1a6dc:	2507      	movs	r5, #7
   1a6de:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
        }

        /* Set internal data structure information */
        spi->nhs_bytes_txd = 0;
   1a6e2:	2500      	movs	r5, #0
   1a6e4:	80c5      	strh	r5, [r0, #6]
        spi->nhs_buflen = len;
   1a6e6:	8083      	strh	r3, [r0, #4]
        spi->nhs_txbuf = txbuf;
   1a6e8:	6181      	str	r1, [r0, #24]

        len = min(SPIM_TXD_MAXCNT_MAX, len);
   1a6ea:	2bff      	cmp	r3, #255	; 0xff
   1a6ec:	bfa8      	it	ge
   1a6ee:	23ff      	movge	r3, #255	; 0xff

        /* Set chip registers */
        spim->TXD.PTR = (uint32_t)txbuf;
   1a6f0:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        spim->TXD.MAXCNT = len;
   1a6f4:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548

        /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
        spi->nhs_rxbuf = rxbuf;
   1a6f8:	61c2      	str	r2, [r0, #28]
        if (rxbuf == NULL) {
   1a6fa:	b172      	cbz	r2, 1a71a <hal_spi_txrx_noblock+0x82>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
            spim->RXD.MAXCNT = 1;
        } else {
            spim->RXD.PTR = (uint32_t)rxbuf;
   1a6fc:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = len;
   1a700:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
        }

        spim->EVENTS_END = 0;
   1a704:	2000      	movs	r0, #0
   1a706:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
        spim->EVENTS_STOPPED = 0;
   1a70a:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
        spim->TASKS_START = 1;
   1a70e:	2301      	movs	r3, #1
   1a710:	6123      	str	r3, [r4, #16]
        spim->INTENSET = SPIM_INTENSET_END_Msk;
   1a712:	2340      	movs	r3, #64	; 0x40
   1a714:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   1a718:	e01f      	b.n	1a75a <hal_spi_txrx_noblock+0xc2>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
   1a71a:	3002      	adds	r0, #2
   1a71c:	f8c4 0534 	str.w	r0, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = 1;
   1a720:	2301      	movs	r3, #1
   1a722:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
   1a726:	e7ed      	b.n	1a704 <hal_spi_txrx_noblock+0x6c>
    } else {
        /* Must have txbuf or rxbuf */
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   1a728:	b161      	cbz	r1, 1a744 <hal_spi_txrx_noblock+0xac>
            goto err;
        }

        /* XXX: what to do here? */
        if (len > 255) {
   1a72a:	2bff      	cmp	r3, #255	; 0xff
   1a72c:	dc1c      	bgt.n	1a768 <hal_spi_txrx_noblock+0xd0>
        /*
         * Ready the slave for a transfer. Do not allow this to be called
         * if the slave has already been readied or is requesting the
         * semaphore
         */
        if (spi->slave_state != HAL_SPI_SLAVE_STATE_IDLE) {
   1a72e:	78c4      	ldrb	r4, [r0, #3]
   1a730:	b9e4      	cbnz	r4, 1a76c <hal_spi_txrx_noblock+0xd4>
            rc = -1;
            goto err;
        }

        spi->nhs_rxbuf = rxbuf;
   1a732:	61c2      	str	r2, [r0, #28]
        spi->nhs_txbuf = txbuf;
   1a734:	6181      	str	r1, [r0, #24]
        spi->nhs_buflen = len;
   1a736:	8083      	strh	r3, [r0, #4]
        spi->slave_state = HAL_SPI_SLAVE_STATE_ACQ_SEM;
   1a738:	2301      	movs	r3, #1
   1a73a:	70c3      	strb	r3, [r0, #3]
        spi->nhs_spi.spis->TASKS_ACQUIRE = 1;
   1a73c:	6902      	ldr	r2, [r0, #16]
   1a73e:	6253      	str	r3, [r2, #36]	; 0x24
    }
    return 0;
   1a740:	2000      	movs	r0, #0
   1a742:	e00a      	b.n	1a75a <hal_spi_txrx_noblock+0xc2>
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   1a744:	2a00      	cmp	r2, #0
   1a746:	d1f0      	bne.n	1a72a <hal_spi_txrx_noblock+0x92>
    rc = EINVAL;
   1a748:	2016      	movs	r0, #22
   1a74a:	e006      	b.n	1a75a <hal_spi_txrx_noblock+0xc2>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a74c:	2016      	movs	r0, #22

err:
    return rc;
}
   1a74e:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a750:	2016      	movs	r0, #22
   1a752:	e002      	b.n	1a75a <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   1a754:	2016      	movs	r0, #22
   1a756:	e000      	b.n	1a75a <hal_spi_txrx_noblock+0xc2>
   1a758:	2016      	movs	r0, #22
}
   1a75a:	bc30      	pop	{r4, r5}
   1a75c:	4770      	bx	lr
    rc = EINVAL;
   1a75e:	2016      	movs	r0, #22
   1a760:	e7fb      	b.n	1a75a <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   1a762:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a766:	e7f8      	b.n	1a75a <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   1a768:	2016      	movs	r0, #22
   1a76a:	e7f6      	b.n	1a75a <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   1a76c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a770:	e7f3      	b.n	1a75a <hal_spi_txrx_noblock+0xc2>
   1a772:	bf00      	nop
   1a774:	00022568 	.word	0x00022568

0001a778 <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
   1a778:	b508      	push	{r3, lr}
    assert(0);
   1a77a:	2300      	movs	r3, #0
   1a77c:	461a      	mov	r2, r3
   1a77e:	4619      	mov	r1, r3
   1a780:	4618      	mov	r0, r3
   1a782:	f000 f85f 	bl	1a844 <__assert_func>
	...

0001a788 <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
   1a788:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
   1a78a:	4b06      	ldr	r3, [pc, #24]	; (1a7a4 <nrf52_wdt_irq_handler+0x1c>)
   1a78c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   1a790:	f013 0f01 	tst.w	r3, #1
   1a794:	d100      	bne.n	1a798 <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
   1a796:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
   1a798:	4b02      	ldr	r3, [pc, #8]	; (1a7a4 <nrf52_wdt_irq_handler+0x1c>)
   1a79a:	2200      	movs	r2, #0
   1a79c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
   1a7a0:	f7ff ffea 	bl	1a778 <nrf52_hal_wdt_default_handler>
   1a7a4:	40010000 	.word	0x40010000

0001a7a8 <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
   1a7a8:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
   1a7aa:	4b17      	ldr	r3, [pc, #92]	; (1a808 <hal_watchdog_init+0x60>)
   1a7ac:	2201      	movs	r2, #1
   1a7ae:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
   1a7b2:	4b16      	ldr	r3, [pc, #88]	; (1a80c <hal_watchdog_init+0x64>)
   1a7b4:	4298      	cmp	r0, r3
   1a7b6:	d821      	bhi.n	1a7fc <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
   1a7b8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   1a7bc:	0153      	lsls	r3, r2, #5
   1a7be:	4a14      	ldr	r2, [pc, #80]	; (1a810 <hal_watchdog_init+0x68>)
   1a7c0:	fba2 2303 	umull	r2, r3, r2, r3
   1a7c4:	08db      	lsrs	r3, r3, #3
   1a7c6:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1a7ca:	4b0f      	ldr	r3, [pc, #60]	; (1a808 <hal_watchdog_init+0x60>)
   1a7cc:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a7d0:	4a10      	ldr	r2, [pc, #64]	; (1a814 <hal_watchdog_init+0x6c>)
   1a7d2:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a7d4:	4910      	ldr	r1, [pc, #64]	; (1a818 <hal_watchdog_init+0x70>)
   1a7d6:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a7da:	4a10      	ldr	r2, [pc, #64]	; (1a81c <hal_watchdog_init+0x74>)
   1a7dc:	21e0      	movs	r1, #224	; 0xe0
   1a7de:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a7e2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1a7e6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a7ea:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
   1a7ec:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
   1a7f0:	f042 0201 	orr.w	r2, r2, #1
   1a7f4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
   1a7f8:	2000      	movs	r0, #0
   1a7fa:	bd08      	pop	{r3, pc}
        assert(0);
   1a7fc:	2300      	movs	r3, #0
   1a7fe:	461a      	mov	r2, r3
   1a800:	4619      	mov	r1, r3
   1a802:	4618      	mov	r0, r3
   1a804:	f000 f81e 	bl	1a844 <__assert_func>
   1a808:	40010000 	.word	0x40010000
   1a80c:	02aaaaaa 	.word	0x02aaaaaa
   1a810:	10624dd3 	.word	0x10624dd3
   1a814:	e000ed00 	.word	0xe000ed00
   1a818:	0001a789 	.word	0x0001a789
   1a81c:	e000e100 	.word	0xe000e100

0001a820 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    NRF_WDT->INTENSET = WDT_INTENSET_TIMEOUT_Msk;
   1a820:	4b02      	ldr	r3, [pc, #8]	; (1a82c <hal_watchdog_enable+0xc>)
   1a822:	2201      	movs	r2, #1
   1a824:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NRF_WDT->TASKS_START = 1;
   1a828:	601a      	str	r2, [r3, #0]
}
   1a82a:	4770      	bx	lr
   1a82c:	40010000 	.word	0x40010000

0001a830 <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    NRF_WDT->RR[0] = WDT_RR_RR_Reload;
   1a830:	4b02      	ldr	r3, [pc, #8]	; (1a83c <hal_watchdog_tickle+0xc>)
   1a832:	4a03      	ldr	r2, [pc, #12]	; (1a840 <hal_watchdog_tickle+0x10>)
   1a834:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
   1a838:	4770      	bx	lr
   1a83a:	bf00      	nop
   1a83c:	40010000 	.word	0x40010000
   1a840:	6e524635 	.word	0x6e524635

0001a844 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
   1a844:	b508      	push	{r3, lr}
   1a846:	4675      	mov	r5, lr
   1a848:	4604      	mov	r4, r0
   1a84a:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
   1a84c:	f001 fa90 	bl	1bd70 <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
   1a850:	f7ff f905 	bl	19a5e <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
   1a854:	b18c      	cbz	r4, 1a87a <__assert_func+0x36>
   1a856:	4633      	mov	r3, r6
   1a858:	4622      	mov	r2, r4
   1a85a:	4629      	mov	r1, r5
   1a85c:	4809      	ldr	r0, [pc, #36]	; (1a884 <__assert_func+0x40>)
   1a85e:	f7ff f929 	bl	19ab4 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
   1a862:	f7ed fc8f 	bl	8184 <hal_debugger_connected>
   1a866:	b100      	cbz	r0, 1a86a <__assert_func+0x26>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
   1a868:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
   1a86a:	4b07      	ldr	r3, [pc, #28]	; (1a888 <__assert_func+0x44>)
   1a86c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1a870:	605a      	str	r2, [r3, #4]
    asm("isb");
   1a872:	f3bf 8f6f 	isb	sy
    hal_system_reset();
   1a876:	f7ed fc8d 	bl	8194 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
   1a87a:	4629      	mov	r1, r5
   1a87c:	4803      	ldr	r0, [pc, #12]	; (1a88c <__assert_func+0x48>)
   1a87e:	f7ff f919 	bl	19ab4 <console_printf>
   1a882:	e7ee      	b.n	1a862 <__assert_func+0x1e>
   1a884:	00022584 	.word	0x00022584
   1a888:	e000ed00 	.word	0xe000ed00
   1a88c:	00022574 	.word	0x00022574

0001a890 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
   1a890:	b500      	push	{lr}
   1a892:	b083      	sub	sp, #12
   1a894:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
   1a896:	f7ff f8e2 	bl	19a5e <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
   1a89a:	4d1b      	ldr	r5, [pc, #108]	; (1a908 <os_default_irq+0x78>)
   1a89c:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
   1a89e:	6822      	ldr	r2, [r4, #0]
   1a8a0:	f3c1 0108 	ubfx	r1, r1, #0, #9
   1a8a4:	4819      	ldr	r0, [pc, #100]	; (1a90c <os_default_irq+0x7c>)
   1a8a6:	f7ff f905 	bl	19ab4 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
   1a8aa:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
   1a8ac:	6883      	ldr	r3, [r0, #8]
   1a8ae:	6842      	ldr	r2, [r0, #4]
   1a8b0:	6801      	ldr	r1, [r0, #0]
   1a8b2:	68c0      	ldr	r0, [r0, #12]
   1a8b4:	9000      	str	r0, [sp, #0]
   1a8b6:	4816      	ldr	r0, [pc, #88]	; (1a910 <os_default_irq+0x80>)
   1a8b8:	f7ff f8fc 	bl	19ab4 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
   1a8bc:	6923      	ldr	r3, [r4, #16]
   1a8be:	9300      	str	r3, [sp, #0]
   1a8c0:	68e3      	ldr	r3, [r4, #12]
   1a8c2:	68a2      	ldr	r2, [r4, #8]
   1a8c4:	6861      	ldr	r1, [r4, #4]
   1a8c6:	4813      	ldr	r0, [pc, #76]	; (1a914 <os_default_irq+0x84>)
   1a8c8:	f7ff f8f4 	bl	19ab4 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
   1a8cc:	6a23      	ldr	r3, [r4, #32]
   1a8ce:	9300      	str	r3, [sp, #0]
   1a8d0:	69e3      	ldr	r3, [r4, #28]
   1a8d2:	69a2      	ldr	r2, [r4, #24]
   1a8d4:	6961      	ldr	r1, [r4, #20]
   1a8d6:	4810      	ldr	r0, [pc, #64]	; (1a918 <os_default_irq+0x88>)
   1a8d8:	f7ff f8ec 	bl	19ab4 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
   1a8dc:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
   1a8de:	6983      	ldr	r3, [r0, #24]
   1a8e0:	6942      	ldr	r2, [r0, #20]
   1a8e2:	6901      	ldr	r1, [r0, #16]
   1a8e4:	69c0      	ldr	r0, [r0, #28]
   1a8e6:	9000      	str	r0, [sp, #0]
   1a8e8:	480c      	ldr	r0, [pc, #48]	; (1a91c <os_default_irq+0x8c>)
   1a8ea:	f7ff f8e3 	bl	19ab4 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
   1a8ee:	6869      	ldr	r1, [r5, #4]
   1a8f0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   1a8f2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1a8f4:	480a      	ldr	r0, [pc, #40]	; (1a920 <os_default_irq+0x90>)
   1a8f6:	f7ff f8dd 	bl	19ab4 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
   1a8fa:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   1a8fc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   1a8fe:	4809      	ldr	r0, [pc, #36]	; (1a924 <os_default_irq+0x94>)
   1a900:	f7ff f8d8 	bl	19ab4 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
   1a904:	f7ed fc46 	bl	8194 <hal_system_reset>
   1a908:	e000ed00 	.word	0xe000ed00
   1a90c:	0002259c 	.word	0x0002259c
   1a910:	000225d0 	.word	0x000225d0
   1a914:	00022604 	.word	0x00022604
   1a918:	00022638 	.word	0x00022638
   1a91c:	0002266c 	.word	0x0002266c
   1a920:	000226a0 	.word	0x000226a0
   1a924:	000226c8 	.word	0x000226c8

0001a928 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
   1a928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_time_t sanity_itvl_ticks;

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

    hal_watchdog_tickle();
   1a92a:	f7ff ff81 	bl	1a830 <hal_watchdog_tickle>
    sanity_last = 0;
   1a92e:	2500      	movs	r5, #0
   1a930:	e00b      	b.n	1a94a <os_idle_task+0x22>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
   1a932:	f000 fec7 	bl	1b6c4 <os_sanity_run>
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
   1a936:	f7ff ff7b 	bl	1a830 <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
            sanity_last = now;
   1a93a:	4625      	mov	r5, r4
   1a93c:	e011      	b.n	1a962 <os_idle_task+0x3a>
         * as the idle task does not schedule itself.
         */
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
   1a93e:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
   1a940:	f002 f842 	bl	1c9c8 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
   1a944:	4638      	mov	r0, r7
   1a946:	f001 fa19 	bl	1bd7c <os_arch_restore_sr>
        ++g_os_idle_ctr;
   1a94a:	4a14      	ldr	r2, [pc, #80]	; (1a99c <os_idle_task+0x74>)
   1a94c:	6813      	ldr	r3, [r2, #0]
   1a94e:	3301      	adds	r3, #1
   1a950:	6013      	str	r3, [r2, #0]
        now = os_time_get();
   1a952:	f001 f995 	bl	1bc80 <os_time_get>
   1a956:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
   1a958:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   1a95c:	1ac3      	subs	r3, r0, r3
   1a95e:	2b00      	cmp	r3, #0
   1a960:	dce7      	bgt.n	1a932 <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
   1a962:	f001 fa05 	bl	1bd70 <os_arch_save_sr>
   1a966:	4607      	mov	r7, r0
        now = os_time_get();
   1a968:	f001 f98a 	bl	1bc80 <os_time_get>
   1a96c:	4606      	mov	r6, r0
        sticks = os_sched_wakeup_ticks(now);
   1a96e:	f000 ffd7 	bl	1b920 <os_sched_wakeup_ticks>
   1a972:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
   1a974:	4630      	mov	r0, r6
   1a976:	f000 f975 	bl	1ac64 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
   1a97a:	42a0      	cmp	r0, r4
   1a97c:	bf28      	it	cs
   1a97e:	4620      	movcs	r0, r4
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
   1a980:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   1a984:	1b9b      	subs	r3, r3, r6
   1a986:	4298      	cmp	r0, r3
   1a988:	bf28      	it	cs
   1a98a:	4618      	movcs	r0, r3
        if (iticks < MIN_IDLE_TICKS) {
   1a98c:	280b      	cmp	r0, #11
   1a98e:	d9d6      	bls.n	1a93e <os_idle_task+0x16>
        } else if (iticks > MAX_IDLE_TICKS) {
   1a990:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   1a994:	d9d4      	bls.n	1a940 <os_idle_task+0x18>
            iticks = MAX_IDLE_TICKS;
   1a996:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
   1a99a:	e7d1      	b.n	1a940 <os_idle_task+0x18>
   1a99c:	2000de8c 	.word	0x2000de8c

0001a9a0 <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
   1a9a0:	b508      	push	{r3, lr}
   1a9a2:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
   1a9a4:	2100      	movs	r1, #0
   1a9a6:	4608      	mov	r0, r1
   1a9a8:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
   1a9aa:	2300      	movs	r3, #0
   1a9ac:	461a      	mov	r2, r3
   1a9ae:	4619      	mov	r1, r3
   1a9b0:	4618      	mov	r0, r3
   1a9b2:	f7ff ff47 	bl	1a844 <__assert_func>
	...

0001a9b8 <os_started>:
}
   1a9b8:	4b01      	ldr	r3, [pc, #4]	; (1a9c0 <os_started+0x8>)
   1a9ba:	6818      	ldr	r0, [r3, #0]
   1a9bc:	4770      	bx	lr
   1a9be:	bf00      	nop
   1a9c0:	2000de88 	.word	0x2000de88

0001a9c4 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
   1a9c4:	b500      	push	{lr}
   1a9c6:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
   1a9c8:	2340      	movs	r3, #64	; 0x40
   1a9ca:	9303      	str	r3, [sp, #12]
   1a9cc:	4b15      	ldr	r3, [pc, #84]	; (1aa24 <os_init_idle_task+0x60>)
   1a9ce:	9302      	str	r3, [sp, #8]
   1a9d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a9d4:	9301      	str	r3, [sp, #4]
   1a9d6:	23ff      	movs	r3, #255	; 0xff
   1a9d8:	9300      	str	r3, [sp, #0]
   1a9da:	2300      	movs	r3, #0
   1a9dc:	4a12      	ldr	r2, [pc, #72]	; (1aa28 <os_init_idle_task+0x64>)
   1a9de:	4913      	ldr	r1, [pc, #76]	; (1aa2c <os_init_idle_task+0x68>)
   1a9e0:	4813      	ldr	r0, [pc, #76]	; (1aa30 <os_init_idle_task+0x6c>)
   1a9e2:	f001 f88d 	bl	1bb00 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
   1a9e6:	b950      	cbnz	r0, 1a9fe <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
   1a9e8:	f000 fea2 	bl	1b730 <os_sanity_init>
    assert(rc == 0);
   1a9ec:	b968      	cbnz	r0, 1aa0a <os_init_idle_task+0x46>

    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
   1a9ee:	f247 5030 	movw	r0, #30000	; 0x7530
   1a9f2:	f7ff fed9 	bl	1a7a8 <hal_watchdog_init>
    assert(rc == 0);
   1a9f6:	b970      	cbnz	r0, 1aa16 <os_init_idle_task+0x52>

#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
}
   1a9f8:	b005      	add	sp, #20
   1a9fa:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   1a9fe:	2300      	movs	r3, #0
   1aa00:	461a      	mov	r2, r3
   1aa02:	4619      	mov	r1, r3
   1aa04:	4618      	mov	r0, r3
   1aa06:	f7ff ff1d 	bl	1a844 <__assert_func>
    assert(rc == 0);
   1aa0a:	2300      	movs	r3, #0
   1aa0c:	461a      	mov	r2, r3
   1aa0e:	4619      	mov	r1, r3
   1aa10:	4618      	mov	r0, r3
   1aa12:	f7ff ff17 	bl	1a844 <__assert_func>
    assert(rc == 0);
   1aa16:	2300      	movs	r3, #0
   1aa18:	461a      	mov	r2, r3
   1aa1a:	4619      	mov	r1, r3
   1aa1c:	4618      	mov	r0, r3
   1aa1e:	f7ff ff11 	bl	1a844 <__assert_func>
   1aa22:	bf00      	nop
   1aa24:	20006f70 	.word	0x20006f70
   1aa28:	0001a929 	.word	0x0001a929
   1aa2c:	000226ec 	.word	0x000226ec
   1aa30:	2000dde8 	.word	0x2000dde8

0001aa34 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
   1aa34:	b510      	push	{r4, lr}
   1aa36:	b084      	sub	sp, #16
   1aa38:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
   1aa3a:	4b24      	ldr	r3, [pc, #144]	; (1aacc <os_init+0x98>)
   1aa3c:	2200      	movs	r2, #0
   1aa3e:	601a      	str	r2, [r3, #0]
   1aa40:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
   1aa42:	4b23      	ldr	r3, [pc, #140]	; (1aad0 <os_init+0x9c>)
   1aa44:	601a      	str	r2, [r3, #0]
   1aa46:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
   1aa48:	f000 faba 	bl	1afc0 <os_eventq_dflt_get>
   1aa4c:	f000 fa0e 	bl	1ae6c <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
   1aa50:	f000 fa04 	bl	1ae5c <os_dev_reset>

    err = os_arch_os_init();
   1aa54:	f001 f9c6 	bl	1bde4 <os_arch_os_init>
    assert(err == OS_OK);
   1aa58:	bb00      	cbnz	r0, 1aa9c <os_init+0x68>

    if (main_fn) {
   1aa5a:	b18c      	cbz	r4, 1aa80 <os_init+0x4c>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
   1aa5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   1aa60:	9303      	str	r3, [sp, #12]
   1aa62:	4b1c      	ldr	r3, [pc, #112]	; (1aad4 <os_init+0xa0>)
   1aa64:	9302      	str	r3, [sp, #8]
   1aa66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1aa6a:	9301      	str	r3, [sp, #4]
   1aa6c:	237f      	movs	r3, #127	; 0x7f
   1aa6e:	9300      	str	r3, [sp, #0]
   1aa70:	4623      	mov	r3, r4
   1aa72:	4a19      	ldr	r2, [pc, #100]	; (1aad8 <os_init+0xa4>)
   1aa74:	4919      	ldr	r1, [pc, #100]	; (1aadc <os_init+0xa8>)
   1aa76:	481a      	ldr	r0, [pc, #104]	; (1aae0 <os_init+0xac>)
   1aa78:	f001 f842 	bl	1bb00 <os_task_init>
   1aa7c:	b2c0      	uxtb	r0, r0
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
   1aa7e:	b998      	cbnz	r0, 1aaa8 <os_init+0x74>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
   1aa80:	f001 fe72 	bl	1c768 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
   1aa84:	2001      	movs	r0, #1
   1aa86:	f000 f985 	bl	1ad94 <os_dev_initialize_all>
   1aa8a:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   1aa8c:	b990      	cbnz	r0, 1aab4 <os_init+0x80>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
   1aa8e:	2002      	movs	r0, #2
   1aa90:	f000 f980 	bl	1ad94 <os_dev_initialize_all>
   1aa94:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   1aa96:	b998      	cbnz	r0, 1aac0 <os_init+0x8c>
}
   1aa98:	b004      	add	sp, #16
   1aa9a:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
   1aa9c:	2300      	movs	r3, #0
   1aa9e:	461a      	mov	r2, r3
   1aaa0:	4619      	mov	r1, r3
   1aaa2:	4618      	mov	r0, r3
   1aaa4:	f7ff fece 	bl	1a844 <__assert_func>
        assert(err == 0);
   1aaa8:	2300      	movs	r3, #0
   1aaaa:	461a      	mov	r2, r3
   1aaac:	4619      	mov	r1, r3
   1aaae:	4618      	mov	r0, r3
   1aab0:	f7ff fec8 	bl	1a844 <__assert_func>
    assert(err == OS_OK);
   1aab4:	2300      	movs	r3, #0
   1aab6:	461a      	mov	r2, r3
   1aab8:	4619      	mov	r1, r3
   1aaba:	4618      	mov	r0, r3
   1aabc:	f7ff fec2 	bl	1a844 <__assert_func>
    assert(err == OS_OK);
   1aac0:	2300      	movs	r3, #0
   1aac2:	461a      	mov	r2, r3
   1aac4:	4619      	mov	r1, r3
   1aac6:	4618      	mov	r0, r3
   1aac8:	f7ff febc 	bl	1a844 <__assert_func>
   1aacc:	2000de90 	.word	0x2000de90
   1aad0:	2000deb8 	.word	0x2000deb8
   1aad4:	20007070 	.word	0x20007070
   1aad8:	0001a9a1 	.word	0x0001a9a1
   1aadc:	000226e4 	.word	0x000226e4
   1aae0:	2000de38 	.word	0x2000de38

0001aae4 <os_start>:

void
os_start(void)
{
   1aae4:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
   1aae6:	f7ff fe9b 	bl	1a820 <hal_watchdog_enable>

    err = os_arch_os_start();
   1aaea:	f001 f9db 	bl	1bea4 <os_arch_os_start>
    assert(err == OS_OK);
   1aaee:	b900      	cbnz	r0, 1aaf2 <os_start+0xe>
#else
    assert(0);
#endif
}
   1aaf0:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
   1aaf2:	2300      	movs	r3, #0
   1aaf4:	461a      	mov	r2, r3
   1aaf6:	4619      	mov	r1, r3
   1aaf8:	4618      	mov	r0, r3
   1aafa:	f7ff fea3 	bl	1a844 <__assert_func>
	...

0001ab00 <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
   1ab00:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1ab02:	4b0c      	ldr	r3, [pc, #48]	; (1ab34 <os_pkg_init+0x34>)
   1ab04:	781b      	ldrb	r3, [r3, #0]
   1ab06:	b14b      	cbz	r3, 1ab1c <os_pkg_init+0x1c>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
   1ab08:	2003      	movs	r0, #3
   1ab0a:	f000 f943 	bl	1ad94 <os_dev_initialize_all>
   1ab0e:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   1ab10:	b948      	cbnz	r0, 1ab26 <os_pkg_init+0x26>

    os_mempool_module_init();
   1ab12:	f000 fc25 	bl	1b360 <os_mempool_module_init>
    os_msys_init();
   1ab16:	f000 fcad 	bl	1b474 <os_msys_init>
}
   1ab1a:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1ab1c:	461a      	mov	r2, r3
   1ab1e:	4619      	mov	r1, r3
   1ab20:	4618      	mov	r0, r3
   1ab22:	f7ff fe8f 	bl	1a844 <__assert_func>
    assert(err == OS_OK);
   1ab26:	2300      	movs	r3, #0
   1ab28:	461a      	mov	r2, r3
   1ab2a:	4619      	mov	r1, r3
   1ab2c:	4618      	mov	r0, r3
   1ab2e:	f7ff fe89 	bl	1a844 <__assert_func>
   1ab32:	bf00      	nop
   1ab34:	2000ddbc 	.word	0x2000ddbc

0001ab38 <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
   1ab38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ab3a:	4604      	mov	r4, r0
   1ab3c:	460d      	mov	r5, r1
   1ab3e:	4617      	mov	r7, r2
   1ab40:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
   1ab42:	2220      	movs	r2, #32
   1ab44:	2100      	movs	r1, #0
   1ab46:	f001 fa80 	bl	1c04a <memset>
    c->c_ev.ev_cb = ev_cb;
   1ab4a:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
   1ab4c:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
   1ab4e:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
   1ab50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0001ab54 <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
   1ab54:	b538      	push	{r3, r4, r5, lr}
   1ab56:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
   1ab58:	f001 f90a 	bl	1bd70 <os_arch_save_sr>
   1ab5c:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
   1ab5e:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
   1ab60:	b13b      	cbz	r3, 1ab72 <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   1ab62:	69a2      	ldr	r2, [r4, #24]
   1ab64:	b172      	cbz	r2, 1ab84 <os_callout_stop+0x30>
   1ab66:	61d3      	str	r3, [r2, #28]
   1ab68:	69e3      	ldr	r3, [r4, #28]
   1ab6a:	69a2      	ldr	r2, [r4, #24]
   1ab6c:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
   1ab6e:	2300      	movs	r3, #0
   1ab70:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
   1ab72:	6920      	ldr	r0, [r4, #16]
   1ab74:	b110      	cbz	r0, 1ab7c <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
   1ab76:	4621      	mov	r1, r4
   1ab78:	f000 fa02 	bl	1af80 <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
   1ab7c:	4628      	mov	r0, r5
   1ab7e:	f001 f8fd 	bl	1bd7c <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
   1ab82:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   1ab84:	4a01      	ldr	r2, [pc, #4]	; (1ab8c <os_callout_stop+0x38>)
   1ab86:	6053      	str	r3, [r2, #4]
   1ab88:	e7ee      	b.n	1ab68 <os_callout_stop+0x14>
   1ab8a:	bf00      	nop
   1ab8c:	2000de90 	.word	0x2000de90

0001ab90 <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
   1ab90:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
   1ab92:	6903      	ldr	r3, [r0, #16]
   1ab94:	b1c3      	cbz	r3, 1abc8 <os_callout_reset+0x38>
   1ab96:	4605      	mov	r5, r0
   1ab98:	460c      	mov	r4, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
   1ab9a:	2900      	cmp	r1, #0
   1ab9c:	db2f      	blt.n	1abfe <os_callout_reset+0x6e>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
   1ab9e:	f001 f8e7 	bl	1bd70 <os_arch_save_sr>
   1aba2:	4606      	mov	r6, r0

    os_callout_stop(c);
   1aba4:	4628      	mov	r0, r5
   1aba6:	f7ff ffd5 	bl	1ab54 <os_callout_stop>

    if (ticks == 0) {
   1abaa:	b904      	cbnz	r4, 1abae <os_callout_reset+0x1e>
        ticks = 1;
   1abac:	2401      	movs	r4, #1
    }

    c->c_ticks = os_time_get() + ticks;
   1abae:	f001 f867 	bl	1bc80 <os_time_get>
   1abb2:	4420      	add	r0, r4
   1abb4:	6168      	str	r0, [r5, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   1abb6:	4b13      	ldr	r3, [pc, #76]	; (1ac04 <os_callout_reset+0x74>)
   1abb8:	681b      	ldr	r3, [r3, #0]
   1abba:	b153      	cbz	r3, 1abd2 <os_callout_reset+0x42>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
   1abbc:	695a      	ldr	r2, [r3, #20]
   1abbe:	1a82      	subs	r2, r0, r2
   1abc0:	2a00      	cmp	r2, #0
   1abc2:	db06      	blt.n	1abd2 <os_callout_reset+0x42>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   1abc4:	699b      	ldr	r3, [r3, #24]
   1abc6:	e7f8      	b.n	1abba <os_callout_reset+0x2a>
    assert(c->c_evq != NULL);
   1abc8:	461a      	mov	r2, r3
   1abca:	4619      	mov	r1, r3
   1abcc:	4618      	mov	r0, r3
   1abce:	f7ff fe39 	bl	1a844 <__assert_func>
            break;
        }
    }

    if (entry) {
   1abd2:	b15b      	cbz	r3, 1abec <os_callout_reset+0x5c>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
   1abd4:	69da      	ldr	r2, [r3, #28]
   1abd6:	61ea      	str	r2, [r5, #28]
   1abd8:	61ab      	str	r3, [r5, #24]
   1abda:	69da      	ldr	r2, [r3, #28]
   1abdc:	6015      	str	r5, [r2, #0]
   1abde:	3518      	adds	r5, #24
   1abe0:	61dd      	str	r5, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
   1abe2:	4630      	mov	r0, r6
   1abe4:	f001 f8ca 	bl	1bd7c <os_arch_restore_sr>

    ret = OS_OK;
   1abe8:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
   1abea:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
   1abec:	2300      	movs	r3, #0
   1abee:	61ab      	str	r3, [r5, #24]
   1abf0:	4b04      	ldr	r3, [pc, #16]	; (1ac04 <os_callout_reset+0x74>)
   1abf2:	685a      	ldr	r2, [r3, #4]
   1abf4:	61ea      	str	r2, [r5, #28]
   1abf6:	6015      	str	r5, [r2, #0]
   1abf8:	3518      	adds	r5, #24
   1abfa:	605d      	str	r5, [r3, #4]
   1abfc:	e7f1      	b.n	1abe2 <os_callout_reset+0x52>
        ret = OS_EINVAL;
   1abfe:	2002      	movs	r0, #2
    return ret;
   1ac00:	e7f3      	b.n	1abea <os_callout_reset+0x5a>
   1ac02:	bf00      	nop
   1ac04:	2000de90 	.word	0x2000de90

0001ac08 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
   1ac08:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
   1ac0a:	f001 f839 	bl	1bc80 <os_time_get>
   1ac0e:	4605      	mov	r5, r0
   1ac10:	e00f      	b.n	1ac32 <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   1ac12:	69e2      	ldr	r2, [r4, #28]
   1ac14:	4b12      	ldr	r3, [pc, #72]	; (1ac60 <os_callout_tick+0x58>)
   1ac16:	605a      	str	r2, [r3, #4]
   1ac18:	69e3      	ldr	r3, [r4, #28]
   1ac1a:	69a2      	ldr	r2, [r4, #24]
   1ac1c:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
   1ac1e:	2300      	movs	r3, #0
   1ac20:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
   1ac22:	f001 f8ab 	bl	1bd7c <os_arch_restore_sr>

        if (c) {
   1ac26:	b1d4      	cbz	r4, 1ac5e <os_callout_tick+0x56>
            if (c->c_evq) {
   1ac28:	6920      	ldr	r0, [r4, #16]
   1ac2a:	b9a0      	cbnz	r0, 1ac56 <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
            } else {
                c->c_ev.ev_cb(&c->c_ev);
   1ac2c:	6863      	ldr	r3, [r4, #4]
   1ac2e:	4620      	mov	r0, r4
   1ac30:	4798      	blx	r3
        OS_ENTER_CRITICAL(sr);
   1ac32:	f001 f89d 	bl	1bd70 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
   1ac36:	4b0a      	ldr	r3, [pc, #40]	; (1ac60 <os_callout_tick+0x58>)
   1ac38:	681c      	ldr	r4, [r3, #0]
        if (c) {
   1ac3a:	2c00      	cmp	r4, #0
   1ac3c:	d0f1      	beq.n	1ac22 <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
   1ac3e:	6963      	ldr	r3, [r4, #20]
   1ac40:	1aeb      	subs	r3, r5, r3
   1ac42:	2b00      	cmp	r3, #0
   1ac44:	db05      	blt.n	1ac52 <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   1ac46:	69a3      	ldr	r3, [r4, #24]
   1ac48:	2b00      	cmp	r3, #0
   1ac4a:	d0e2      	beq.n	1ac12 <os_callout_tick+0xa>
   1ac4c:	69e2      	ldr	r2, [r4, #28]
   1ac4e:	61da      	str	r2, [r3, #28]
   1ac50:	e7e2      	b.n	1ac18 <os_callout_tick+0x10>
                c = NULL;
   1ac52:	2400      	movs	r4, #0
   1ac54:	e7e5      	b.n	1ac22 <os_callout_tick+0x1a>
                os_eventq_put(c->c_evq, &c->c_ev);
   1ac56:	4621      	mov	r1, r4
   1ac58:	f000 f915 	bl	1ae86 <os_eventq_put>
   1ac5c:	e7e9      	b.n	1ac32 <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
   1ac5e:	bd38      	pop	{r3, r4, r5, pc}
   1ac60:	2000de90 	.word	0x2000de90

0001ac64 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
   1ac64:	b510      	push	{r4, lr}
   1ac66:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
   1ac68:	f001 f88b 	bl	1bd82 <os_arch_in_critical>
   1ac6c:	b130      	cbz	r0, 1ac7c <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
   1ac6e:	4b09      	ldr	r3, [pc, #36]	; (1ac94 <os_callout_wakeup_ticks+0x30>)
   1ac70:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
   1ac72:	b15b      	cbz	r3, 1ac8c <os_callout_wakeup_ticks+0x28>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
   1ac74:	6958      	ldr	r0, [r3, #20]
   1ac76:	1b00      	subs	r0, r0, r4
   1ac78:	d406      	bmi.n	1ac88 <os_callout_wakeup_ticks+0x24>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
   1ac7a:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   1ac7c:	2300      	movs	r3, #0
   1ac7e:	461a      	mov	r2, r3
   1ac80:	4619      	mov	r1, r3
   1ac82:	4618      	mov	r0, r3
   1ac84:	f7ff fdde 	bl	1a844 <__assert_func>
            rt = 0;     /* callout time is in the past */
   1ac88:	2000      	movs	r0, #0
   1ac8a:	e7f6      	b.n	1ac7a <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
   1ac8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   1ac90:	e7f3      	b.n	1ac7a <os_callout_wakeup_ticks+0x16>
   1ac92:	bf00      	nop
   1ac94:	2000de90 	.word	0x2000de90

0001ac98 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   1ac98:	b508      	push	{r3, lr}

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   1ac9a:	4601      	mov	r1, r0
   1ac9c:	2000      	movs	r0, #0
   1ac9e:	f002 f84d 	bl	1cd3c <hal_timer_config>
    return rc;
}
   1aca2:	bd08      	pop	{r3, pc}

0001aca4 <os_cputime_get32>:
    hal_timer_stop(timer);
}

uint32_t
os_cputime_get32(void)
{
   1aca4:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
   1aca6:	2000      	movs	r0, #0
   1aca8:	f002 f8c4 	bl	1ce34 <hal_timer_read>
    return cpu_time;
}
   1acac:	bd08      	pop	{r3, pc}
	...

0001acb0 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
   1acb0:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
   1acb2:	4b15      	ldr	r3, [pc, #84]	; (1ad08 <os_dev_add+0x58>)
   1acb4:	681d      	ldr	r5, [r3, #0]
   1acb6:	b115      	cbz	r5, 1acbe <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   1acb8:	462b      	mov	r3, r5
    prev_dev = NULL;
   1acba:	2400      	movs	r4, #0
   1acbc:	e008      	b.n	1acd0 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   1acbe:	4603      	mov	r3, r0
   1acc0:	f843 5f20 	str.w	r5, [r3, #32]!
   1acc4:	4a10      	ldr	r2, [pc, #64]	; (1ad08 <os_dev_add+0x58>)
   1acc6:	6053      	str	r3, [r2, #4]
   1acc8:	6010      	str	r0, [r2, #0]
        return (0);
   1acca:	e010      	b.n	1acee <os_dev_add+0x3e>
        if (dev->od_stage < cur_dev->od_stage ||
            ((dev->od_stage == cur_dev->od_stage) &&
             (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
   1accc:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   1acce:	6a1b      	ldr	r3, [r3, #32]
   1acd0:	b143      	cbz	r3, 1ace4 <os_dev_add+0x34>
        if (dev->od_stage < cur_dev->od_stage ||
   1acd2:	7e01      	ldrb	r1, [r0, #24]
   1acd4:	7e1a      	ldrb	r2, [r3, #24]
   1acd6:	4291      	cmp	r1, r2
   1acd8:	d304      	bcc.n	1ace4 <os_dev_add+0x34>
   1acda:	d1f7      	bne.n	1accc <os_dev_add+0x1c>
             (dev->od_priority < cur_dev->od_priority))) {
   1acdc:	7e41      	ldrb	r1, [r0, #25]
   1acde:	7e5a      	ldrb	r2, [r3, #25]
            ((dev->od_stage == cur_dev->od_stage) &&
   1ace0:	4291      	cmp	r1, r2
   1ace2:	d2f3      	bcs.n	1accc <os_dev_add+0x1c>
    }

    if (prev_dev) {
   1ace4:	b15c      	cbz	r4, 1acfe <os_dev_add+0x4e>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   1ace6:	6a23      	ldr	r3, [r4, #32]
   1ace8:	6203      	str	r3, [r0, #32]
   1acea:	b11b      	cbz	r3, 1acf4 <os_dev_add+0x44>
   1acec:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
   1acee:	2000      	movs	r0, #0
   1acf0:	bc30      	pop	{r4, r5}
   1acf2:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   1acf4:	f100 0320 	add.w	r3, r0, #32
   1acf8:	4a03      	ldr	r2, [pc, #12]	; (1ad08 <os_dev_add+0x58>)
   1acfa:	6053      	str	r3, [r2, #4]
   1acfc:	e7f6      	b.n	1acec <os_dev_add+0x3c>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   1acfe:	6205      	str	r5, [r0, #32]
   1ad00:	4b01      	ldr	r3, [pc, #4]	; (1ad08 <os_dev_add+0x58>)
   1ad02:	6018      	str	r0, [r3, #0]
   1ad04:	e7f3      	b.n	1acee <os_dev_add+0x3e>
   1ad06:	bf00      	nop
   1ad08:	20009070 	.word	0x20009070

0001ad0c <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
   1ad0c:	b510      	push	{r4, lr}
   1ad0e:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
   1ad10:	6903      	ldr	r3, [r0, #16]
   1ad12:	6941      	ldr	r1, [r0, #20]
   1ad14:	4798      	blx	r3
    if (rc != 0) {
   1ad16:	4603      	mov	r3, r0
   1ad18:	b128      	cbz	r0, 1ad26 <os_dev_initialize+0x1a>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
   1ad1a:	7ee2      	ldrb	r2, [r4, #27]
   1ad1c:	f012 0f08 	tst.w	r2, #8
   1ad20:	d105      	bne.n	1ad2e <os_dev_initialize+0x22>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
   1ad22:	2300      	movs	r3, #0
   1ad24:	e003      	b.n	1ad2e <os_dev_initialize+0x22>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
   1ad26:	7ee2      	ldrb	r2, [r4, #27]
   1ad28:	f042 0201 	orr.w	r2, r2, #1
   1ad2c:	76e2      	strb	r2, [r4, #27]
err:
    return rc;
}
   1ad2e:	4618      	mov	r0, r3
   1ad30:	bd10      	pop	{r4, pc}

0001ad32 <os_dev_init>:
    dev->od_name = name;
   1ad32:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
   1ad34:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
   1ad36:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
   1ad38:	2300      	movs	r3, #0
   1ad3a:	76c3      	strb	r3, [r0, #27]
    dev->od_open_ref = 0;
   1ad3c:	7683      	strb	r3, [r0, #26]
    dev->od_init = od_init;
   1ad3e:	9a00      	ldr	r2, [sp, #0]
   1ad40:	6102      	str	r2, [r0, #16]
    dev->od_init_arg = arg;
   1ad42:	9a01      	ldr	r2, [sp, #4]
   1ad44:	6142      	str	r2, [r0, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
   1ad46:	6003      	str	r3, [r0, #0]
   1ad48:	6043      	str	r3, [r0, #4]
   1ad4a:	6083      	str	r3, [r0, #8]
   1ad4c:	60c3      	str	r3, [r0, #12]
}
   1ad4e:	4618      	mov	r0, r3
   1ad50:	4770      	bx	lr
	...

0001ad54 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
   1ad54:	b530      	push	{r4, r5, lr}
   1ad56:	b083      	sub	sp, #12
   1ad58:	4605      	mov	r5, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
   1ad5a:	9c07      	ldr	r4, [sp, #28]
   1ad5c:	9401      	str	r4, [sp, #4]
   1ad5e:	9c06      	ldr	r4, [sp, #24]
   1ad60:	9400      	str	r4, [sp, #0]
   1ad62:	f7ff ffe6 	bl	1ad32 <os_dev_init>
    if (rc != 0) {
   1ad66:	4603      	mov	r3, r0
   1ad68:	b110      	cbz	r0, 1ad70 <os_dev_create+0x1c>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
   1ad6a:	4618      	mov	r0, r3
   1ad6c:	b003      	add	sp, #12
   1ad6e:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
   1ad70:	4628      	mov	r0, r5
   1ad72:	f7ff ff9d 	bl	1acb0 <os_dev_add>
    if (rc != 0) {
   1ad76:	4603      	mov	r3, r0
   1ad78:	2800      	cmp	r0, #0
   1ad7a:	d1f6      	bne.n	1ad6a <os_dev_create+0x16>
    if (g_os_started) {
   1ad7c:	4a04      	ldr	r2, [pc, #16]	; (1ad90 <os_dev_create+0x3c>)
   1ad7e:	6812      	ldr	r2, [r2, #0]
   1ad80:	2a00      	cmp	r2, #0
   1ad82:	d0f2      	beq.n	1ad6a <os_dev_create+0x16>
        rc = os_dev_initialize(dev);
   1ad84:	4628      	mov	r0, r5
   1ad86:	f7ff ffc1 	bl	1ad0c <os_dev_initialize>
   1ad8a:	4603      	mov	r3, r0
    return (rc);
   1ad8c:	e7ed      	b.n	1ad6a <os_dev_create+0x16>
   1ad8e:	bf00      	nop
   1ad90:	2000de88 	.word	0x2000de88

0001ad94 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
   1ad94:	b538      	push	{r3, r4, r5, lr}
   1ad96:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1ad98:	4b08      	ldr	r3, [pc, #32]	; (1adbc <os_dev_initialize_all+0x28>)
   1ad9a:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
   1ad9c:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1ad9e:	e000      	b.n	1ada2 <os_dev_initialize_all+0xe>
   1ada0:	6a24      	ldr	r4, [r4, #32]
   1ada2:	b144      	cbz	r4, 1adb6 <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
   1ada4:	7e23      	ldrb	r3, [r4, #24]
   1ada6:	42ab      	cmp	r3, r5
   1ada8:	d1fa      	bne.n	1ada0 <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
   1adaa:	4620      	mov	r0, r4
   1adac:	f7ff ffae 	bl	1ad0c <os_dev_initialize>
            if (rc) {
   1adb0:	4602      	mov	r2, r0
   1adb2:	2800      	cmp	r0, #0
   1adb4:	d0f4      	beq.n	1ada0 <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
   1adb6:	4610      	mov	r0, r2
   1adb8:	bd38      	pop	{r3, r4, r5, pc}
   1adba:	bf00      	nop
   1adbc:	20009070 	.word	0x20009070

0001adc0 <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
   1adc0:	b538      	push	{r3, r4, r5, lr}
   1adc2:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1adc4:	4b05      	ldr	r3, [pc, #20]	; (1addc <os_dev_lookup+0x1c>)
   1adc6:	681c      	ldr	r4, [r3, #0]
   1adc8:	b134      	cbz	r4, 1add8 <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
   1adca:	4629      	mov	r1, r5
   1adcc:	69e0      	ldr	r0, [r4, #28]
   1adce:	f001 f958 	bl	1c082 <strcmp>
   1add2:	b108      	cbz	r0, 1add8 <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1add4:	6a24      	ldr	r4, [r4, #32]
   1add6:	e7f7      	b.n	1adc8 <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
   1add8:	4620      	mov	r0, r4
   1adda:	bd38      	pop	{r3, r4, r5, pc}
   1addc:	20009070 	.word	0x20009070

0001ade0 <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
   1ade0:	b570      	push	{r4, r5, r6, lr}
   1ade2:	460d      	mov	r5, r1
   1ade4:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
   1ade6:	f7ff ffeb 	bl	1adc0 <os_dev_lookup>
    if (dev == NULL) {
   1adea:	4604      	mov	r4, r0
   1adec:	b1a0      	cbz	r0, 1ae18 <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
   1adee:	7ec3      	ldrb	r3, [r0, #27]
   1adf0:	f013 0f01 	tst.w	r3, #1
   1adf4:	d012      	beq.n	1ae1c <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
   1adf6:	6803      	ldr	r3, [r0, #0]
   1adf8:	b11b      	cbz	r3, 1ae02 <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
   1adfa:	4632      	mov	r2, r6
   1adfc:	4629      	mov	r1, r5
   1adfe:	4798      	blx	r3
        if (rc != 0) {
   1ae00:	b970      	cbnz	r0, 1ae20 <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   1ae02:	f000 ffb5 	bl	1bd70 <os_arch_save_sr>
    ++dev->od_open_ref;
   1ae06:	7ea3      	ldrb	r3, [r4, #26]
   1ae08:	3301      	adds	r3, #1
   1ae0a:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
   1ae0c:	7ee3      	ldrb	r3, [r4, #27]
   1ae0e:	f043 0302 	orr.w	r3, r3, #2
   1ae12:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
   1ae14:	f000 ffb2 	bl	1bd7c <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
   1ae18:	4620      	mov	r0, r4
   1ae1a:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
   1ae1c:	2400      	movs	r4, #0
   1ae1e:	e7fb      	b.n	1ae18 <os_dev_open+0x38>
    return (NULL);
   1ae20:	2400      	movs	r4, #0
   1ae22:	e7f9      	b.n	1ae18 <os_dev_open+0x38>

0001ae24 <os_dev_close>:
os_dev_close(struct os_dev *dev)
{
    int rc;
    os_sr_t sr;

    if (dev == NULL) {
   1ae24:	b1b0      	cbz	r0, 1ae54 <os_dev_close+0x30>
{
   1ae26:	b510      	push	{r4, lr}
   1ae28:	4604      	mov	r4, r0
        rc = OS_EINVAL;
        goto err;
    }

    if (dev->od_handlers.od_close) {
   1ae2a:	68c3      	ldr	r3, [r0, #12]
   1ae2c:	b113      	cbz	r3, 1ae34 <os_dev_close+0x10>
        rc = dev->od_handlers.od_close(dev);
   1ae2e:	4798      	blx	r3
        if (rc != 0) {
   1ae30:	4603      	mov	r3, r0
   1ae32:	b968      	cbnz	r0, 1ae50 <os_dev_close+0x2c>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   1ae34:	f000 ff9c 	bl	1bd70 <os_arch_save_sr>
    if (--dev->od_open_ref == 0) {
   1ae38:	7ea3      	ldrb	r3, [r4, #26]
   1ae3a:	3b01      	subs	r3, #1
   1ae3c:	b2db      	uxtb	r3, r3
   1ae3e:	76a3      	strb	r3, [r4, #26]
   1ae40:	b91b      	cbnz	r3, 1ae4a <os_dev_close+0x26>
        dev->od_flags &= ~(OS_DEV_F_STATUS_OPEN | OS_DEV_F_STATUS_SUSPENDED);
   1ae42:	7ee3      	ldrb	r3, [r4, #27]
   1ae44:	f023 0306 	bic.w	r3, r3, #6
   1ae48:	76e3      	strb	r3, [r4, #27]
    }
    OS_EXIT_CRITICAL(sr);
   1ae4a:	f000 ff97 	bl	1bd7c <os_arch_restore_sr>

    return (0);
   1ae4e:	2300      	movs	r3, #0
err:
    return (rc);
}
   1ae50:	4618      	mov	r0, r3
   1ae52:	bd10      	pop	{r4, pc}
        rc = OS_EINVAL;
   1ae54:	2302      	movs	r3, #2
}
   1ae56:	4618      	mov	r0, r3
   1ae58:	4770      	bx	lr
	...

0001ae5c <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
   1ae5c:	4b02      	ldr	r3, [pc, #8]	; (1ae68 <os_dev_reset+0xc>)
   1ae5e:	2200      	movs	r2, #0
   1ae60:	601a      	str	r2, [r3, #0]
   1ae62:	605b      	str	r3, [r3, #4]
}
   1ae64:	4770      	bx	lr
   1ae66:	bf00      	nop
   1ae68:	20009070 	.word	0x20009070

0001ae6c <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
   1ae6c:	2200      	movs	r2, #0
   1ae6e:	6002      	str	r2, [r0, #0]
   1ae70:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
   1ae72:	4603      	mov	r3, r0
   1ae74:	f843 2f08 	str.w	r2, [r3, #8]!
   1ae78:	60c3      	str	r3, [r0, #12]
}
   1ae7a:	4770      	bx	lr

0001ae7c <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
   1ae7c:	68c0      	ldr	r0, [r0, #12]
}
   1ae7e:	3000      	adds	r0, #0
   1ae80:	bf18      	it	ne
   1ae82:	2001      	movne	r0, #1
   1ae84:	4770      	bx	lr

0001ae86 <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
   1ae86:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
   1ae88:	b1f0      	cbz	r0, 1aec8 <os_eventq_put+0x42>
   1ae8a:	460c      	mov	r4, r1
   1ae8c:	4605      	mov	r5, r0
   1ae8e:	f7ff fff5 	bl	1ae7c <os_eventq_inited>
   1ae92:	b1c8      	cbz	r0, 1aec8 <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   1ae94:	f000 ff6c 	bl	1bd70 <os_arch_save_sr>
   1ae98:	4606      	mov	r6, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
   1ae9a:	7823      	ldrb	r3, [r4, #0]
   1ae9c:	b9d3      	cbnz	r3, 1aed4 <os_eventq_put+0x4e>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
   1ae9e:	2301      	movs	r3, #1
   1aea0:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
   1aea2:	2300      	movs	r3, #0
   1aea4:	60e3      	str	r3, [r4, #12]
   1aea6:	68eb      	ldr	r3, [r5, #12]
   1aea8:	601c      	str	r4, [r3, #0]
   1aeaa:	340c      	adds	r4, #12
   1aeac:	60ec      	str	r4, [r5, #12]

    resched = 0;
    if (evq->evq_task) {
   1aeae:	6868      	ldr	r0, [r5, #4]
   1aeb0:	b1b8      	cbz	r0, 1aee2 <os_eventq_put+0x5c>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
   1aeb2:	7b03      	ldrb	r3, [r0, #12]
   1aeb4:	2b02      	cmp	r3, #2
   1aeb6:	d010      	beq.n	1aeda <os_eventq_put+0x54>
    resched = 0;
   1aeb8:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
   1aeba:	2300      	movs	r3, #0
   1aebc:	606b      	str	r3, [r5, #4]
    }

    OS_EXIT_CRITICAL(sr);
   1aebe:	4630      	mov	r0, r6
   1aec0:	f000 ff5c 	bl	1bd7c <os_arch_restore_sr>

    if (resched) {
   1aec4:	b97c      	cbnz	r4, 1aee6 <os_eventq_put+0x60>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
   1aec6:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
   1aec8:	2300      	movs	r3, #0
   1aeca:	461a      	mov	r2, r3
   1aecc:	4619      	mov	r1, r3
   1aece:	4618      	mov	r0, r3
   1aed0:	f7ff fcb8 	bl	1a844 <__assert_func>
        OS_EXIT_CRITICAL(sr);
   1aed4:	f000 ff52 	bl	1bd7c <os_arch_restore_sr>
   1aed8:	e7f5      	b.n	1aec6 <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
   1aeda:	f000 fcc7 	bl	1b86c <os_sched_wakeup>
            resched = 1;
   1aede:	2401      	movs	r4, #1
   1aee0:	e7eb      	b.n	1aeba <os_eventq_put+0x34>
    resched = 0;
   1aee2:	2400      	movs	r4, #0
   1aee4:	e7eb      	b.n	1aebe <os_eventq_put+0x38>
        os_sched(NULL);
   1aee6:	2000      	movs	r0, #0
   1aee8:	f000 fd40 	bl	1b96c <os_sched>
   1aeec:	e7eb      	b.n	1aec6 <os_eventq_put+0x40>

0001aeee <os_eventq_get>:
    return ev;
}

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
   1aeee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aef0:	4605      	mov	r5, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
   1aef2:	f000 fc67 	bl	1b7c4 <os_sched_get_current_task>
   1aef6:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
   1aef8:	682b      	ldr	r3, [r5, #0]
   1aefa:	4283      	cmp	r3, r0
   1aefc:	d001      	beq.n	1af02 <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
   1aefe:	b9db      	cbnz	r3, 1af38 <os_eventq_get+0x4a>
            evq->evq_owner = t;
   1af00:	6028      	str	r0, [r5, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
   1af02:	f000 ff35 	bl	1bd70 <os_arch_save_sr>
   1af06:	4607      	mov	r7, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
   1af08:	68ae      	ldr	r6, [r5, #8]
    if (ev) {
   1af0a:	b9de      	cbnz	r6, 1af44 <os_eventq_get+0x56>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
   1af0c:	606c      	str	r4, [r5, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
   1af0e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1af12:	4620      	mov	r0, r4
   1af14:	f000 fc62 	bl	1b7dc <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
   1af18:	7b63      	ldrb	r3, [r4, #13]
   1af1a:	f043 0308 	orr.w	r3, r3, #8
   1af1e:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
   1af20:	4638      	mov	r0, r7
   1af22:	f000 ff2b 	bl	1bd7c <os_arch_restore_sr>

        os_sched(NULL);
   1af26:	2000      	movs	r0, #0
   1af28:	f000 fd20 	bl	1b96c <os_sched>

        OS_ENTER_CRITICAL(sr);
   1af2c:	f000 ff20 	bl	1bd70 <os_arch_save_sr>
   1af30:	4607      	mov	r7, r0
        evq->evq_task = NULL;
   1af32:	2300      	movs	r3, #0
   1af34:	606b      	str	r3, [r5, #4]
        goto pull_one;
   1af36:	e7e7      	b.n	1af08 <os_eventq_get+0x1a>
            assert(0);
   1af38:	2300      	movs	r3, #0
   1af3a:	461a      	mov	r2, r3
   1af3c:	4619      	mov	r1, r3
   1af3e:	4618      	mov	r0, r3
   1af40:	f7ff fc80 	bl	1a844 <__assert_func>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1af44:	68f3      	ldr	r3, [r6, #12]
   1af46:	60ab      	str	r3, [r5, #8]
   1af48:	b153      	cbz	r3, 1af60 <os_eventq_get+0x72>
        ev->ev_queued = 0;
   1af4a:	2300      	movs	r3, #0
   1af4c:	7033      	strb	r3, [r6, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
   1af4e:	7b63      	ldrb	r3, [r4, #13]
   1af50:	f023 0308 	bic.w	r3, r3, #8
   1af54:	7363      	strb	r3, [r4, #13]
    }
    OS_EXIT_CRITICAL(sr);
   1af56:	4638      	mov	r0, r7
   1af58:	f000 ff10 	bl	1bd7c <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
   1af5c:	4630      	mov	r0, r6
   1af5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1af60:	f105 0308 	add.w	r3, r5, #8
   1af64:	60eb      	str	r3, [r5, #12]
   1af66:	e7f0      	b.n	1af4a <os_eventq_get+0x5c>

0001af68 <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
   1af68:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
   1af6a:	f7ff ffc0 	bl	1aeee <os_eventq_get>
    assert(ev->ev_cb != NULL);
   1af6e:	6843      	ldr	r3, [r0, #4]
   1af70:	b10b      	cbz	r3, 1af76 <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
   1af72:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
   1af74:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
   1af76:	461a      	mov	r2, r3
   1af78:	4619      	mov	r1, r3
   1af7a:	4618      	mov	r0, r3
   1af7c:	f7ff fc62 	bl	1a844 <__assert_func>

0001af80 <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
   1af80:	b538      	push	{r3, r4, r5, lr}
   1af82:	4605      	mov	r5, r0
   1af84:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   1af86:	f000 fef3 	bl	1bd70 <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
   1af8a:	7823      	ldrb	r3, [r4, #0]
   1af8c:	b183      	cbz	r3, 1afb0 <os_eventq_remove+0x30>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1af8e:	68aa      	ldr	r2, [r5, #8]
   1af90:	42a2      	cmp	r2, r4
   1af92:	d107      	bne.n	1afa4 <os_eventq_remove+0x24>
   1af94:	68d3      	ldr	r3, [r2, #12]
   1af96:	60ab      	str	r3, [r5, #8]
   1af98:	b953      	cbnz	r3, 1afb0 <os_eventq_remove+0x30>
   1af9a:	f105 0308 	add.w	r3, r5, #8
   1af9e:	60eb      	str	r3, [r5, #12]
   1afa0:	e006      	b.n	1afb0 <os_eventq_remove+0x30>
   1afa2:	461a      	mov	r2, r3
   1afa4:	68d3      	ldr	r3, [r2, #12]
   1afa6:	42a3      	cmp	r3, r4
   1afa8:	d1fb      	bne.n	1afa2 <os_eventq_remove+0x22>
   1afaa:	68db      	ldr	r3, [r3, #12]
   1afac:	60d3      	str	r3, [r2, #12]
   1afae:	b123      	cbz	r3, 1afba <os_eventq_remove+0x3a>
    }
    ev->ev_queued = 0;
   1afb0:	2300      	movs	r3, #0
   1afb2:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
   1afb4:	f000 fee2 	bl	1bd7c <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
   1afb8:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1afba:	320c      	adds	r2, #12
   1afbc:	60ea      	str	r2, [r5, #12]
   1afbe:	e7f7      	b.n	1afb0 <os_eventq_remove+0x30>

0001afc0 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
   1afc0:	4800      	ldr	r0, [pc, #0]	; (1afc4 <os_eventq_dflt_get+0x4>)
   1afc2:	4770      	bx	lr
   1afc4:	20009078 	.word	0x20009078

0001afc8 <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
   1afc8:	4603      	mov	r3, r0
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
   1afca:	2000      	movs	r0, #0
   1afcc:	6018      	str	r0, [r3, #0]
   1afce:	605b      	str	r3, [r3, #4]

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
   1afd0:	6098      	str	r0, [r3, #8]
   1afd2:	6158      	str	r0, [r3, #20]
    ev->ev_cb = ev_cb;
   1afd4:	60d9      	str	r1, [r3, #12]
    ev->ev_arg = arg;
   1afd6:	611a      	str	r2, [r3, #16]

    return (0);
}
   1afd8:	4770      	bx	lr

0001afda <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
   1afda:	b538      	push	{r3, r4, r5, lr}
   1afdc:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   1afde:	f000 fec7 	bl	1bd70 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
   1afe2:	682c      	ldr	r4, [r5, #0]
    if (mp) {
   1afe4:	b114      	cbz	r4, 1afec <os_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   1afe6:	6863      	ldr	r3, [r4, #4]
   1afe8:	602b      	str	r3, [r5, #0]
   1afea:	b12b      	cbz	r3, 1aff8 <os_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
   1afec:	f000 fec6 	bl	1bd7c <os_arch_restore_sr>

    if (mp) {
   1aff0:	b124      	cbz	r4, 1affc <os_mqueue_get+0x22>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
   1aff2:	f1a4 0010 	sub.w	r0, r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
   1aff6:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   1aff8:	606d      	str	r5, [r5, #4]
   1affa:	e7f7      	b.n	1afec <os_mqueue_get+0x12>
        m = NULL;
   1affc:	2000      	movs	r0, #0
    return (m);
   1affe:	e7fa      	b.n	1aff6 <os_mqueue_get+0x1c>

0001b000 <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
   1b000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
   1b002:	7953      	ldrb	r3, [r2, #5]
   1b004:	2b07      	cmp	r3, #7
   1b006:	d916      	bls.n	1b036 <os_mqueue_put+0x36>
   1b008:	4614      	mov	r4, r2
   1b00a:	460e      	mov	r6, r1
   1b00c:	4605      	mov	r5, r0
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);
   1b00e:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
   1b012:	f000 fead 	bl	1bd70 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
   1b016:	2300      	movs	r3, #0
   1b018:	f844 3f14 	str.w	r3, [r4, #20]!
   1b01c:	686b      	ldr	r3, [r5, #4]
   1b01e:	601f      	str	r7, [r3, #0]
   1b020:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
   1b022:	f000 feab 	bl	1bd7c <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
   1b026:	b146      	cbz	r6, 1b03a <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
   1b028:	f105 0108 	add.w	r1, r5, #8
   1b02c:	4630      	mov	r0, r6
   1b02e:	f7ff ff2a 	bl	1ae86 <os_eventq_put>
    }

    return (0);
   1b032:	2000      	movs	r0, #0
   1b034:	e000      	b.n	1b038 <os_mqueue_put+0x38>
err:
    return (rc);
   1b036:	2002      	movs	r0, #2
}
   1b038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
   1b03a:	2000      	movs	r0, #0
   1b03c:	e7fc      	b.n	1b038 <os_mqueue_put+0x38>

0001b03e <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
   1b03e:	3a10      	subs	r2, #16
   1b040:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   1b042:	6041      	str	r1, [r0, #4]

    return (0);
}
   1b044:	2000      	movs	r0, #0
   1b046:	4770      	bx	lr

0001b048 <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
   1b048:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
   1b04a:	8803      	ldrh	r3, [r0, #0]
   1b04c:	428b      	cmp	r3, r1
   1b04e:	d312      	bcc.n	1b076 <os_mbuf_get+0x2e>
   1b050:	460d      	mov	r5, r1
   1b052:	4604      	mov	r4, r0
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
   1b054:	6840      	ldr	r0, [r0, #4]
   1b056:	f000 f947 	bl	1b2e8 <os_memblock_get>
    if (!om) {
   1b05a:	4603      	mov	r3, r0
   1b05c:	b148      	cbz	r0, 1b072 <os_mbuf_get+0x2a>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
   1b05e:	2200      	movs	r2, #0
   1b060:	60c2      	str	r2, [r0, #12]
    om->om_flags = 0;
   1b062:	7102      	strb	r2, [r0, #4]
    om->om_pkthdr_len = 0;
   1b064:	7142      	strb	r2, [r0, #5]
    om->om_len = 0;
   1b066:	80c2      	strh	r2, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
   1b068:	f100 0110 	add.w	r1, r0, #16
   1b06c:	4429      	add	r1, r5
   1b06e:	6001      	str	r1, [r0, #0]
    om->om_omp = omp;
   1b070:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
   1b072:	4618      	mov	r0, r3
   1b074:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   1b076:	2300      	movs	r3, #0
    return om;
   1b078:	e7fb      	b.n	1b072 <os_mbuf_get+0x2a>

0001b07a <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
   1b07a:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
   1b07c:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
   1b080:	8803      	ldrh	r3, [r0, #0]
   1b082:	42ab      	cmp	r3, r5
   1b084:	d310      	bcc.n	1b0a8 <os_mbuf_get_pkthdr+0x2e>
   1b086:	2dff      	cmp	r5, #255	; 0xff
   1b088:	d810      	bhi.n	1b0ac <os_mbuf_get_pkthdr+0x32>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
   1b08a:	2100      	movs	r1, #0
   1b08c:	f7ff ffdc 	bl	1b048 <os_mbuf_get>
    if (om) {
   1b090:	4603      	mov	r3, r0
   1b092:	b138      	cbz	r0, 1b0a4 <os_mbuf_get_pkthdr+0x2a>
        om->om_pkthdr_len = pkthdr_len;
   1b094:	715d      	strb	r5, [r3, #5]
        om->om_data += pkthdr_len;
   1b096:	6802      	ldr	r2, [r0, #0]
   1b098:	4415      	add	r5, r2
   1b09a:	6005      	str	r5, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
   1b09c:	2200      	movs	r2, #0
   1b09e:	8202      	strh	r2, [r0, #16]
        pkthdr->omp_flags = 0;
   1b0a0:	8242      	strh	r2, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
   1b0a2:	6142      	str	r2, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
   1b0a4:	4618      	mov	r0, r3
   1b0a6:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   1b0a8:	2300      	movs	r3, #0
   1b0aa:	e7fb      	b.n	1b0a4 <os_mbuf_get_pkthdr+0x2a>
   1b0ac:	2300      	movs	r3, #0
    return om;
   1b0ae:	e7f9      	b.n	1b0a4 <os_mbuf_get_pkthdr+0x2a>

0001b0b0 <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
   1b0b0:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
   1b0b2:	6883      	ldr	r3, [r0, #8]
   1b0b4:	b123      	cbz	r3, 1b0c0 <os_mbuf_free+0x10>
   1b0b6:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
   1b0b8:	6858      	ldr	r0, [r3, #4]
   1b0ba:	f000 f93d 	bl	1b338 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
   1b0be:	bd08      	pop	{r3, pc}
    rc = 0;
   1b0c0:	2000      	movs	r0, #0
    return (rc);
   1b0c2:	e7fc      	b.n	1b0be <os_mbuf_free+0xe>

0001b0c4 <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
   1b0c4:	4603      	mov	r3, r0
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
   1b0c6:	b160      	cbz	r0, 1b0e2 <os_mbuf_free_chain+0x1e>
{
   1b0c8:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
   1b0ca:	68dc      	ldr	r4, [r3, #12]

        rc = os_mbuf_free(om);
   1b0cc:	4618      	mov	r0, r3
   1b0ce:	f7ff ffef 	bl	1b0b0 <os_mbuf_free>
        if (rc != 0) {
            goto done;
        }

        om = next;
   1b0d2:	4623      	mov	r3, r4
        if (rc != 0) {
   1b0d4:	4602      	mov	r2, r0
   1b0d6:	b910      	cbnz	r0, 1b0de <os_mbuf_free_chain+0x1a>
    while (om != NULL) {
   1b0d8:	2c00      	cmp	r4, #0
   1b0da:	d1f6      	bne.n	1b0ca <os_mbuf_free_chain+0x6>
    }

    rc = 0;
   1b0dc:	2200      	movs	r2, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
   1b0de:	4610      	mov	r0, r2
   1b0e0:	bd10      	pop	{r4, pc}
    rc = 0;
   1b0e2:	2200      	movs	r2, #0
}
   1b0e4:	4610      	mov	r0, r2
   1b0e6:	4770      	bx	lr

0001b0e8 <os_mbuf_len>:
uint16_t
os_mbuf_len(const struct os_mbuf *om)
{
    uint16_t len;

    len = 0;
   1b0e8:	2300      	movs	r3, #0
    while (om != NULL) {
   1b0ea:	e003      	b.n	1b0f4 <os_mbuf_len+0xc>
        len += om->om_len;
   1b0ec:	88c2      	ldrh	r2, [r0, #6]
   1b0ee:	4413      	add	r3, r2
   1b0f0:	b29b      	uxth	r3, r3
        om = SLIST_NEXT(om, om_next);
   1b0f2:	68c0      	ldr	r0, [r0, #12]
    while (om != NULL) {
   1b0f4:	2800      	cmp	r0, #0
   1b0f6:	d1f9      	bne.n	1b0ec <os_mbuf_len+0x4>
    }

    return len;
}
   1b0f8:	4618      	mov	r0, r3
   1b0fa:	4770      	bx	lr

0001b0fc <os_mbuf_append>:

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
   1b0fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
   1b100:	2800      	cmp	r0, #0
   1b102:	d04d      	beq.n	1b1a0 <os_mbuf_append+0xa4>
   1b104:	460f      	mov	r7, r1
   1b106:	4691      	mov	r9, r2
   1b108:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
   1b10a:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
   1b10e:	4605      	mov	r5, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
   1b110:	e000      	b.n	1b114 <os_mbuf_append+0x18>
        last = SLIST_NEXT(last, om_next);
   1b112:	461d      	mov	r5, r3
    while (SLIST_NEXT(last, om_next) != NULL) {
   1b114:	68eb      	ldr	r3, [r5, #12]
   1b116:	2b00      	cmp	r3, #0
   1b118:	d1fb      	bne.n	1b112 <os_mbuf_append+0x16>
    }

    remainder = len;
   1b11a:	464e      	mov	r6, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
   1b11c:	68ab      	ldr	r3, [r5, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   1b11e:	f105 0410 	add.w	r4, r5, #16
   1b122:	881b      	ldrh	r3, [r3, #0]
   1b124:	441c      	add	r4, r3
      (om->om_data + om->om_len);
   1b126:	6828      	ldr	r0, [r5, #0]
   1b128:	88eb      	ldrh	r3, [r5, #6]
   1b12a:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   1b12c:	1a24      	subs	r4, r4, r0
   1b12e:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
   1b130:	b164      	cbz	r4, 1b14c <os_mbuf_append+0x50>
        if (space > remainder) {
   1b132:	454c      	cmp	r4, r9
   1b134:	dd00      	ble.n	1b138 <os_mbuf_append+0x3c>
            space = remainder;
   1b136:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
   1b138:	4622      	mov	r2, r4
   1b13a:	4639      	mov	r1, r7
   1b13c:	f000 ff78 	bl	1c030 <memcpy>

        last->om_len += space;
   1b140:	88eb      	ldrh	r3, [r5, #6]
   1b142:	4423      	add	r3, r4
   1b144:	80eb      	strh	r3, [r5, #6]
        data += space;
   1b146:	4427      	add	r7, r4
        remainder -= space;
   1b148:	eba9 0604 	sub.w	r6, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
   1b14c:	2e00      	cmp	r6, #0
   1b14e:	dd16      	ble.n	1b17e <os_mbuf_append+0x82>
        new = os_mbuf_get(omp, 0);
   1b150:	2100      	movs	r1, #0
   1b152:	4640      	mov	r0, r8
   1b154:	f7ff ff78 	bl	1b048 <os_mbuf_get>
        if (!new) {
   1b158:	4604      	mov	r4, r0
   1b15a:	b180      	cbz	r0, 1b17e <os_mbuf_append+0x82>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
   1b15c:	f8b8 2000 	ldrh.w	r2, [r8]
   1b160:	42b2      	cmp	r2, r6
   1b162:	bfa8      	it	ge
   1b164:	4632      	movge	r2, r6
   1b166:	b292      	uxth	r2, r2
   1b168:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
   1b16a:	4639      	mov	r1, r7
   1b16c:	6800      	ldr	r0, [r0, #0]
   1b16e:	f000 ff5f 	bl	1c030 <memcpy>
        data += new->om_len;
   1b172:	88e3      	ldrh	r3, [r4, #6]
   1b174:	441f      	add	r7, r3
        remainder -= new->om_len;
   1b176:	1af6      	subs	r6, r6, r3
        SLIST_NEXT(last, om_next) = new;
   1b178:	60ec      	str	r4, [r5, #12]
        last = new;
   1b17a:	4625      	mov	r5, r4
   1b17c:	e7e6      	b.n	1b14c <os_mbuf_append+0x50>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
   1b17e:	f89a 3005 	ldrb.w	r3, [sl, #5]
   1b182:	2b07      	cmp	r3, #7
   1b184:	d907      	bls.n	1b196 <os_mbuf_append+0x9a>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
   1b186:	eba9 0906 	sub.w	r9, r9, r6
   1b18a:	f8ba 3010 	ldrh.w	r3, [sl, #16]
   1b18e:	fa13 f989 	uxtah	r9, r3, r9
   1b192:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
   1b196:	b106      	cbz	r6, 1b19a <os_mbuf_append+0x9e>
        rc = OS_ENOMEM;
   1b198:	2601      	movs	r6, #1


    return (0);
err:
    return (rc);
}
   1b19a:	4630      	mov	r0, r6
   1b19c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
   1b1a0:	2602      	movs	r6, #2
   1b1a2:	e7fa      	b.n	1b19a <os_mbuf_append+0x9e>

0001b1a4 <os_mbuf_dup>:
    return 0;
}

struct os_mbuf *
os_mbuf_dup(struct os_mbuf *om)
{
   1b1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b1a8:	4604      	mov	r4, r0
    struct os_mbuf_pool *omp;
    struct os_mbuf *head;
    struct os_mbuf *copy;

    omp = om->om_omp;
   1b1aa:	f8d0 8008 	ldr.w	r8, [r0, #8]

    head = NULL;
    copy = NULL;
   1b1ae:	2700      	movs	r7, #0
    head = NULL;
   1b1b0:	463e      	mov	r6, r7

    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   1b1b2:	e017      	b.n	1b1e4 <os_mbuf_dup+0x40>
    startoff = 0;
   1b1b4:	2100      	movs	r1, #0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1b1b6:	4623      	mov	r3, r4
   1b1b8:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1b1bc:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1b1be:	1ad3      	subs	r3, r2, r3
        if (head) {
            SLIST_NEXT(copy, om_next) = os_mbuf_get(omp,
   1b1c0:	b299      	uxth	r1, r3
   1b1c2:	4640      	mov	r0, r8
   1b1c4:	f7ff ff40 	bl	1b048 <os_mbuf_get>
   1b1c8:	4605      	mov	r5, r0
   1b1ca:	60f8      	str	r0, [r7, #12]
                    OS_MBUF_LEADINGSPACE(om));
            if (!SLIST_NEXT(copy, om_next)) {
   1b1cc:	b188      	cbz	r0, 1b1f2 <os_mbuf_dup+0x4e>
            if (OS_MBUF_IS_PKTHDR(om)) {
                _os_mbuf_copypkthdr(head, om);
            }
            copy = head;
        }
        copy->om_flags = om->om_flags;
   1b1ce:	7923      	ldrb	r3, [r4, #4]
   1b1d0:	712b      	strb	r3, [r5, #4]
        copy->om_len = om->om_len;
   1b1d2:	88e3      	ldrh	r3, [r4, #6]
   1b1d4:	80eb      	strh	r3, [r5, #6]
        memcpy(OS_MBUF_DATA(copy, uint8_t *), OS_MBUF_DATA(om, uint8_t *),
   1b1d6:	88e2      	ldrh	r2, [r4, #6]
   1b1d8:	6821      	ldr	r1, [r4, #0]
   1b1da:	6828      	ldr	r0, [r5, #0]
   1b1dc:	f000 ff28 	bl	1c030 <memcpy>
    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   1b1e0:	68e4      	ldr	r4, [r4, #12]
   1b1e2:	462f      	mov	r7, r5
   1b1e4:	b14c      	cbz	r4, 1b1fa <os_mbuf_dup+0x56>
        if (head) {
   1b1e6:	b15e      	cbz	r6, 1b200 <os_mbuf_dup+0x5c>
    if (OS_MBUF_IS_PKTHDR(om)) {
   1b1e8:	7963      	ldrb	r3, [r4, #5]
   1b1ea:	2b07      	cmp	r3, #7
   1b1ec:	d9e2      	bls.n	1b1b4 <os_mbuf_dup+0x10>
        startoff = om->om_pkthdr_len;
   1b1ee:	b299      	uxth	r1, r3
   1b1f0:	e7e1      	b.n	1b1b6 <os_mbuf_dup+0x12>
                os_mbuf_free_chain(head);
   1b1f2:	4630      	mov	r0, r6
   1b1f4:	f7ff ff66 	bl	1b0c4 <os_mbuf_free_chain>
                om->om_len);
    }

    return (head);
err:
    return (NULL);
   1b1f8:	462e      	mov	r6, r5
}
   1b1fa:	4630      	mov	r0, r6
   1b1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (OS_MBUF_IS_PKTHDR(om)) {
   1b200:	7963      	ldrb	r3, [r4, #5]
   1b202:	2b07      	cmp	r3, #7
   1b204:	d911      	bls.n	1b22a <os_mbuf_dup+0x86>
        startoff = om->om_pkthdr_len;
   1b206:	b299      	uxth	r1, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1b208:	4623      	mov	r3, r4
   1b20a:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1b20e:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1b210:	1ad3      	subs	r3, r2, r3
            head = os_mbuf_get(omp, OS_MBUF_LEADINGSPACE(om));
   1b212:	b299      	uxth	r1, r3
   1b214:	4640      	mov	r0, r8
   1b216:	f7ff ff17 	bl	1b048 <os_mbuf_get>
            if (!head) {
   1b21a:	4606      	mov	r6, r0
   1b21c:	2800      	cmp	r0, #0
   1b21e:	d0ec      	beq.n	1b1fa <os_mbuf_dup+0x56>
            if (OS_MBUF_IS_PKTHDR(om)) {
   1b220:	7963      	ldrb	r3, [r4, #5]
   1b222:	2b07      	cmp	r3, #7
   1b224:	d803      	bhi.n	1b22e <os_mbuf_dup+0x8a>
            copy = head;
   1b226:	4605      	mov	r5, r0
   1b228:	e7d1      	b.n	1b1ce <os_mbuf_dup+0x2a>
    startoff = 0;
   1b22a:	2100      	movs	r1, #0
   1b22c:	e7ec      	b.n	1b208 <os_mbuf_dup+0x64>
    assert(new_buf->om_len == 0);
   1b22e:	88c3      	ldrh	r3, [r0, #6]
   1b230:	b973      	cbnz	r3, 1b250 <os_mbuf_dup+0xac>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
   1b232:	f100 0510 	add.w	r5, r0, #16
   1b236:	7962      	ldrb	r2, [r4, #5]
   1b238:	f104 0110 	add.w	r1, r4, #16
   1b23c:	4628      	mov	r0, r5
   1b23e:	f000 fef7 	bl	1c030 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
   1b242:	7963      	ldrb	r3, [r4, #5]
   1b244:	7173      	strb	r3, [r6, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
   1b246:	7963      	ldrb	r3, [r4, #5]
   1b248:	441d      	add	r5, r3
   1b24a:	6035      	str	r5, [r6, #0]
            copy = head;
   1b24c:	4635      	mov	r5, r6
   1b24e:	e7be      	b.n	1b1ce <os_mbuf_dup+0x2a>
    assert(new_buf->om_len == 0);
   1b250:	2300      	movs	r3, #0
   1b252:	461a      	mov	r2, r3
   1b254:	4619      	mov	r1, r3
   1b256:	4618      	mov	r0, r3
   1b258:	f7ff faf4 	bl	1a844 <__assert_func>

0001b25c <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   1b25c:	2800      	cmp	r0, #0
   1b25e:	d031      	beq.n	1b2c4 <os_mempool_init_internal+0x68>
{
   1b260:	b430      	push	{r4, r5}
   1b262:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
   1b264:	2a00      	cmp	r2, #0
   1b266:	d02f      	beq.n	1b2c8 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
   1b268:	b1bb      	cbz	r3, 1b29a <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
   1b26a:	b113      	cbz	r3, 1b272 <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
   1b26c:	f013 0f03 	tst.w	r3, #3
   1b270:	d12c      	bne.n	1b2cc <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
   1b272:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
   1b274:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
   1b276:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
   1b278:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1b27c:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
   1b27e:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
   1b280:	60e3      	str	r3, [r4, #12]
    mp->name = name;
   1b282:	9802      	ldr	r0, [sp, #8]
   1b284:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
   1b286:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
   1b288:	b199      	cbz	r1, 1b2b2 <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   1b28a:	f012 0f03 	tst.w	r2, #3
   1b28e:	d002      	beq.n	1b296 <os_mempool_init_internal+0x3a>
   1b290:	f022 0203 	bic.w	r2, r2, #3
   1b294:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
   1b296:	2001      	movs	r0, #1
   1b298:	e007      	b.n	1b2aa <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
   1b29a:	2900      	cmp	r1, #0
   1b29c:	d0e5      	beq.n	1b26a <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
   1b29e:	2003      	movs	r0, #3
   1b2a0:	e00e      	b.n	1b2c0 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
   1b2a2:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
   1b2a4:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
   1b2a6:	3001      	adds	r0, #1
            block_addr += true_block_size;
   1b2a8:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
   1b2aa:	4281      	cmp	r1, r0
   1b2ac:	dcf9      	bgt.n	1b2a2 <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
   1b2ae:	2200      	movs	r2, #0
   1b2b0:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
   1b2b2:	2000      	movs	r0, #0
   1b2b4:	6120      	str	r0, [r4, #16]
   1b2b6:	4b06      	ldr	r3, [pc, #24]	; (1b2d0 <os_mempool_init_internal+0x74>)
   1b2b8:	685a      	ldr	r2, [r3, #4]
   1b2ba:	6014      	str	r4, [r2, #0]
   1b2bc:	3410      	adds	r4, #16
   1b2be:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
   1b2c0:	bc30      	pop	{r4, r5}
   1b2c2:	4770      	bx	lr
        return OS_INVALID_PARM;
   1b2c4:	2003      	movs	r0, #3
}
   1b2c6:	4770      	bx	lr
        return OS_INVALID_PARM;
   1b2c8:	2003      	movs	r0, #3
   1b2ca:	e7f9      	b.n	1b2c0 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
   1b2cc:	2004      	movs	r0, #4
   1b2ce:	e7f7      	b.n	1b2c0 <os_mempool_init_internal+0x64>
   1b2d0:	2000de98 	.word	0x2000de98

0001b2d4 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
   1b2d4:	b510      	push	{r4, lr}
   1b2d6:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
   1b2d8:	2400      	movs	r4, #0
   1b2da:	9401      	str	r4, [sp, #4]
   1b2dc:	9c04      	ldr	r4, [sp, #16]
   1b2de:	9400      	str	r4, [sp, #0]
   1b2e0:	f7ff ffbc 	bl	1b25c <os_mempool_init_internal>
}
   1b2e4:	b002      	add	sp, #8
   1b2e6:	bd10      	pop	{r4, pc}

0001b2e8 <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
   1b2e8:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
   1b2ea:	b1a0      	cbz	r0, 1b316 <os_memblock_get+0x2e>
   1b2ec:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   1b2ee:	f000 fd3f 	bl	1bd70 <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
   1b2f2:	88e3      	ldrh	r3, [r4, #6]
   1b2f4:	b153      	cbz	r3, 1b30c <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
   1b2f6:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
   1b2f8:	682a      	ldr	r2, [r5, #0]
   1b2fa:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
   1b2fc:	3b01      	subs	r3, #1
   1b2fe:	b29b      	uxth	r3, r3
   1b300:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
   1b302:	8922      	ldrh	r2, [r4, #8]
   1b304:	4293      	cmp	r3, r2
   1b306:	d202      	bcs.n	1b30e <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
   1b308:	8123      	strh	r3, [r4, #8]
   1b30a:	e000      	b.n	1b30e <os_memblock_get+0x26>
    block = NULL;
   1b30c:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
   1b30e:	f000 fd35 	bl	1bd7c <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
   1b312:	4628      	mov	r0, r5
   1b314:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
   1b316:	2500      	movs	r5, #0
    return (void *)block;
   1b318:	e7fb      	b.n	1b312 <os_memblock_get+0x2a>

0001b31a <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
   1b31a:	b538      	push	{r3, r4, r5, lr}
   1b31c:	4604      	mov	r4, r0
   1b31e:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
   1b320:	f000 fd26 	bl	1bd70 <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
   1b324:	6963      	ldr	r3, [r4, #20]
   1b326:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
   1b328:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
   1b32a:	88e3      	ldrh	r3, [r4, #6]
   1b32c:	3301      	adds	r3, #1
   1b32e:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
   1b330:	f000 fd24 	bl	1bd7c <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
   1b334:	2000      	movs	r0, #0
   1b336:	bd38      	pop	{r3, r4, r5, pc}

0001b338 <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
   1b338:	b168      	cbz	r0, 1b356 <os_memblock_put+0x1e>
{
   1b33a:	b508      	push	{r3, lr}
    if ((mp == NULL) || (block_addr == NULL)) {
   1b33c:	b169      	cbz	r1, 1b35a <os_memblock_put+0x22>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
   1b33e:	7a83      	ldrb	r3, [r0, #10]
   1b340:	f013 0f01 	tst.w	r3, #1
   1b344:	d004      	beq.n	1b350 <os_memblock_put+0x18>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
   1b346:	69c3      	ldr	r3, [r0, #28]
   1b348:	b113      	cbz	r3, 1b350 <os_memblock_put+0x18>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
   1b34a:	6a02      	ldr	r2, [r0, #32]
   1b34c:	4798      	blx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
   1b34e:	bd08      	pop	{r3, pc}
    ret = os_memblock_put_from_cb(mp, block_addr);
   1b350:	f7ff ffe3 	bl	1b31a <os_memblock_put_from_cb>
   1b354:	e7fb      	b.n	1b34e <os_memblock_put+0x16>
        ret = OS_INVALID_PARM;
   1b356:	2003      	movs	r0, #3
}
   1b358:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1b35a:	2003      	movs	r0, #3
   1b35c:	e7f7      	b.n	1b34e <os_memblock_put+0x16>
	...

0001b360 <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
   1b360:	4b02      	ldr	r3, [pc, #8]	; (1b36c <os_mempool_module_init+0xc>)
   1b362:	2200      	movs	r2, #0
   1b364:	601a      	str	r2, [r3, #0]
   1b366:	605b      	str	r3, [r3, #4]
}
   1b368:	4770      	bx	lr
   1b36a:	bf00      	nop
   1b36c:	2000de98 	.word	0x2000de98

0001b370 <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   1b370:	4b02      	ldr	r3, [pc, #8]	; (1b37c <os_msys_find_biggest_pool+0xc>)
   1b372:	6818      	ldr	r0, [r3, #0]
   1b374:	b108      	cbz	r0, 1b37a <os_msys_find_biggest_pool+0xa>
   1b376:	6858      	ldr	r0, [r3, #4]
   1b378:	3808      	subs	r0, #8
}
   1b37a:	4770      	bx	lr
   1b37c:	2000010c 	.word	0x2000010c

0001b380 <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1b380:	4b09      	ldr	r3, [pc, #36]	; (1b3a8 <os_msys_find_pool+0x28>)
   1b382:	6819      	ldr	r1, [r3, #0]
   1b384:	460b      	mov	r3, r1
   1b386:	b123      	cbz	r3, 1b392 <os_msys_find_pool+0x12>
        if (dsize <= pool->omp_databuf_len) {
   1b388:	881a      	ldrh	r2, [r3, #0]
   1b38a:	4282      	cmp	r2, r0
   1b38c:	d201      	bcs.n	1b392 <os_msys_find_pool+0x12>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1b38e:	689b      	ldr	r3, [r3, #8]
   1b390:	e7f9      	b.n	1b386 <os_msys_find_pool+0x6>
            break;
        }
    }

    if (!pool) {
   1b392:	b10b      	cbz	r3, 1b398 <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
   1b394:	4618      	mov	r0, r3
   1b396:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   1b398:	b119      	cbz	r1, 1b3a2 <os_msys_find_pool+0x22>
   1b39a:	4b03      	ldr	r3, [pc, #12]	; (1b3a8 <os_msys_find_pool+0x28>)
   1b39c:	685b      	ldr	r3, [r3, #4]
   1b39e:	3b08      	subs	r3, #8
   1b3a0:	e7f8      	b.n	1b394 <os_msys_find_pool+0x14>
   1b3a2:	460b      	mov	r3, r1
    return (pool);
   1b3a4:	e7f6      	b.n	1b394 <os_msys_find_pool+0x14>
   1b3a6:	bf00      	nop
   1b3a8:	2000010c 	.word	0x2000010c

0001b3ac <os_msys_register>:
{
   1b3ac:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1b3ae:	4b11      	ldr	r3, [pc, #68]	; (1b3f4 <os_msys_register+0x48>)
   1b3b0:	681d      	ldr	r5, [r3, #0]
   1b3b2:	462b      	mov	r3, r5
    prev = NULL;
   1b3b4:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1b3b6:	b133      	cbz	r3, 1b3c6 <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
   1b3b8:	8801      	ldrh	r1, [r0, #0]
   1b3ba:	881a      	ldrh	r2, [r3, #0]
   1b3bc:	4291      	cmp	r1, r2
   1b3be:	d302      	bcc.n	1b3c6 <os_msys_register+0x1a>
        prev = pool;
   1b3c0:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1b3c2:	689b      	ldr	r3, [r3, #8]
   1b3c4:	e7f7      	b.n	1b3b6 <os_msys_register+0xa>
    if (prev) {
   1b3c6:	b15c      	cbz	r4, 1b3e0 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   1b3c8:	68a3      	ldr	r3, [r4, #8]
   1b3ca:	6083      	str	r3, [r0, #8]
   1b3cc:	b11b      	cbz	r3, 1b3d6 <os_msys_register+0x2a>
   1b3ce:	60a0      	str	r0, [r4, #8]
}
   1b3d0:	2000      	movs	r0, #0
   1b3d2:	bc30      	pop	{r4, r5}
   1b3d4:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   1b3d6:	f100 0308 	add.w	r3, r0, #8
   1b3da:	4a06      	ldr	r2, [pc, #24]	; (1b3f4 <os_msys_register+0x48>)
   1b3dc:	6053      	str	r3, [r2, #4]
   1b3de:	e7f6      	b.n	1b3ce <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
   1b3e0:	6085      	str	r5, [r0, #8]
   1b3e2:	b115      	cbz	r5, 1b3ea <os_msys_register+0x3e>
   1b3e4:	4b03      	ldr	r3, [pc, #12]	; (1b3f4 <os_msys_register+0x48>)
   1b3e6:	6018      	str	r0, [r3, #0]
   1b3e8:	e7f2      	b.n	1b3d0 <os_msys_register+0x24>
   1b3ea:	f100 0308 	add.w	r3, r0, #8
   1b3ee:	4a01      	ldr	r2, [pc, #4]	; (1b3f4 <os_msys_register+0x48>)
   1b3f0:	6053      	str	r3, [r2, #4]
   1b3f2:	e7f7      	b.n	1b3e4 <os_msys_register+0x38>
   1b3f4:	2000010c 	.word	0x2000010c

0001b3f8 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
   1b3f8:	b530      	push	{r4, r5, lr}
   1b3fa:	b083      	sub	sp, #12
   1b3fc:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
   1b3fe:	9d07      	ldr	r5, [sp, #28]
   1b400:	9501      	str	r5, [sp, #4]
   1b402:	9d06      	ldr	r5, [sp, #24]
   1b404:	9500      	str	r5, [sp, #0]
   1b406:	f001 f96d 	bl	1c6e4 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
   1b40a:	b138      	cbz	r0, 1b41c <os_msys_init_once+0x24>
   1b40c:	2000      	movs	r0, #0
   1b40e:	9000      	str	r0, [sp, #0]
   1b410:	4b09      	ldr	r3, [pc, #36]	; (1b438 <os_msys_init_once+0x40>)
   1b412:	681d      	ldr	r5, [r3, #0]
   1b414:	4603      	mov	r3, r0
   1b416:	4602      	mov	r2, r0
   1b418:	4601      	mov	r1, r0
   1b41a:	47a8      	blx	r5

    rc = os_msys_register(mbuf_pool);
   1b41c:	4620      	mov	r0, r4
   1b41e:	f7ff ffc5 	bl	1b3ac <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1b422:	b138      	cbz	r0, 1b434 <os_msys_init_once+0x3c>
   1b424:	2000      	movs	r0, #0
   1b426:	9000      	str	r0, [sp, #0]
   1b428:	4b03      	ldr	r3, [pc, #12]	; (1b438 <os_msys_init_once+0x40>)
   1b42a:	681c      	ldr	r4, [r3, #0]
   1b42c:	4603      	mov	r3, r0
   1b42e:	4602      	mov	r2, r0
   1b430:	4601      	mov	r1, r0
   1b432:	47a0      	blx	r4
}
   1b434:	b003      	add	sp, #12
   1b436:	bd30      	pop	{r4, r5, pc}
   1b438:	20000104 	.word	0x20000104

0001b43c <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
   1b43c:	4b02      	ldr	r3, [pc, #8]	; (1b448 <os_msys_reset+0xc>)
   1b43e:	2200      	movs	r2, #0
   1b440:	601a      	str	r2, [r3, #0]
   1b442:	605b      	str	r3, [r3, #4]
}
   1b444:	4770      	bx	lr
   1b446:	bf00      	nop
   1b448:	2000010c 	.word	0x2000010c

0001b44c <os_msys_get_pkthdr>:
{
   1b44c:	b510      	push	{r4, lr}
   1b44e:	460c      	mov	r4, r1
    if (dsize == 0) {
   1b450:	b930      	cbnz	r0, 1b460 <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
   1b452:	f7ff ff8d 	bl	1b370 <os_msys_find_biggest_pool>
    if (!pool) {
   1b456:	b158      	cbz	r0, 1b470 <os_msys_get_pkthdr+0x24>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
   1b458:	b2e1      	uxtb	r1, r4
   1b45a:	f7ff fe0e 	bl	1b07a <os_mbuf_get_pkthdr>
}
   1b45e:	bd10      	pop	{r4, pc}
   1b460:	f101 0308 	add.w	r3, r1, #8
   1b464:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
   1b466:	4403      	add	r3, r0
   1b468:	b298      	uxth	r0, r3
   1b46a:	f7ff ff89 	bl	1b380 <os_msys_find_pool>
   1b46e:	e7f2      	b.n	1b456 <os_msys_get_pkthdr+0xa>
    return (NULL);
   1b470:	2000      	movs	r0, #0
   1b472:	e7f4      	b.n	1b45e <os_msys_get_pkthdr+0x12>

0001b474 <os_msys_init>:

void
os_msys_init(void)
{
   1b474:	b500      	push	{lr}
   1b476:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
   1b478:	f7ff ffe0 	bl	1b43c <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
   1b47c:	4b06      	ldr	r3, [pc, #24]	; (1b498 <os_msys_init+0x24>)
   1b47e:	9301      	str	r3, [sp, #4]
   1b480:	f44f 7392 	mov.w	r3, #292	; 0x124
   1b484:	9300      	str	r3, [sp, #0]
   1b486:	2340      	movs	r3, #64	; 0x40
   1b488:	4a04      	ldr	r2, [pc, #16]	; (1b49c <os_msys_init+0x28>)
   1b48a:	4905      	ldr	r1, [pc, #20]	; (1b4a0 <os_msys_init+0x2c>)
   1b48c:	4805      	ldr	r0, [pc, #20]	; (1b4a4 <os_msys_init+0x30>)
   1b48e:	f7ff ffb3 	bl	1b3f8 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
   1b492:	b003      	add	sp, #12
   1b494:	f85d fb04 	ldr.w	pc, [sp], #4
   1b498:	000226f4 	.word	0x000226f4
   1b49c:	2000d988 	.word	0x2000d988
   1b4a0:	2000d994 	.word	0x2000d994
   1b4a4:	20009088 	.word	0x20009088

0001b4a8 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
   1b4a8:	4603      	mov	r3, r0
   1b4aa:	b128      	cbz	r0, 1b4b8 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
   1b4ac:	2000      	movs	r0, #0
   1b4ae:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
   1b4b0:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
   1b4b2:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
   1b4b4:	6018      	str	r0, [r3, #0]
   1b4b6:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1b4b8:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
   1b4ba:	4770      	bx	lr

0001b4bc <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
   1b4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
   1b4be:	4b2c      	ldr	r3, [pc, #176]	; (1b570 <os_mutex_release+0xb4>)
   1b4c0:	681b      	ldr	r3, [r3, #0]
   1b4c2:	2b00      	cmp	r3, #0
   1b4c4:	d04d      	beq.n	1b562 <os_mutex_release+0xa6>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   1b4c6:	2800      	cmp	r0, #0
   1b4c8:	d04d      	beq.n	1b566 <os_mutex_release+0xaa>
   1b4ca:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
   1b4cc:	f000 f97a 	bl	1b7c4 <os_sched_get_current_task>
   1b4d0:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
   1b4d2:	88e3      	ldrh	r3, [r4, #6]
   1b4d4:	2b00      	cmp	r3, #0
   1b4d6:	d048      	beq.n	1b56a <os_mutex_release+0xae>
   1b4d8:	68a2      	ldr	r2, [r4, #8]
   1b4da:	4282      	cmp	r2, r0
   1b4dc:	d001      	beq.n	1b4e2 <os_mutex_release+0x26>
        ret = OS_BAD_MUTEX;
   1b4de:	2005      	movs	r0, #5
   1b4e0:	e040      	b.n	1b564 <os_mutex_release+0xa8>
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
   1b4e2:	2b01      	cmp	r3, #1
   1b4e4:	d003      	beq.n	1b4ee <os_mutex_release+0x32>
        --mu->mu_level;
   1b4e6:	3b01      	subs	r3, #1
   1b4e8:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   1b4ea:	2000      	movs	r0, #0
        goto done;
   1b4ec:	e03a      	b.n	1b564 <os_mutex_release+0xa8>
    }

    OS_ENTER_CRITICAL(sr);
   1b4ee:	f000 fc3f 	bl	1bd70 <os_arch_save_sr>
   1b4f2:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
   1b4f4:	88e3      	ldrh	r3, [r4, #6]
   1b4f6:	3b01      	subs	r3, #1
   1b4f8:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
   1b4fa:	7aea      	ldrb	r2, [r5, #11]
   1b4fc:	7963      	ldrb	r3, [r4, #5]
   1b4fe:	429a      	cmp	r2, r3
   1b500:	d11e      	bne.n	1b540 <os_mutex_release+0x84>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
   1b502:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
   1b504:	b146      	cbz	r6, 1b518 <os_mutex_release+0x5c>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
   1b506:	69f3      	ldr	r3, [r6, #28]
   1b508:	b1fb      	cbz	r3, 1b54a <os_mutex_release+0x8e>
        os_sched_wakeup(rdy);
   1b50a:	4630      	mov	r0, r6
   1b50c:	f000 f9ae 	bl	1b86c <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
   1b510:	2301      	movs	r3, #1
   1b512:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
   1b514:	7af3      	ldrb	r3, [r6, #11]
   1b516:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
   1b518:	60a6      	str	r6, [r4, #8]
    if (rdy) {
   1b51a:	b116      	cbz	r6, 1b522 <os_mutex_release+0x66>
        rdy->t_lockcnt++;
   1b51c:	7bb3      	ldrb	r3, [r6, #14]
   1b51e:	3301      	adds	r3, #1
   1b520:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
   1b522:	7bab      	ldrb	r3, [r5, #14]
   1b524:	3b01      	subs	r3, #1
   1b526:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
   1b528:	f000 fa1a 	bl	1b960 <os_sched_next_task>
   1b52c:	4604      	mov	r4, r0
    if (rdy != current) {
   1b52e:	4285      	cmp	r5, r0
   1b530:	d010      	beq.n	1b554 <os_mutex_release+0x98>
        resched = 1;
   1b532:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
   1b534:	4638      	mov	r0, r7
   1b536:	f000 fc21 	bl	1bd7c <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   1b53a:	b96d      	cbnz	r5, 1b558 <os_mutex_release+0x9c>
        os_sched(rdy);
    }

    ret = OS_OK;
   1b53c:	2000      	movs	r0, #0
   1b53e:	e011      	b.n	1b564 <os_mutex_release+0xa8>
        current->t_prio = mu->mu_prio;
   1b540:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
   1b542:	4628      	mov	r0, r5
   1b544:	f000 fa24 	bl	1b990 <os_sched_resort>
   1b548:	e7db      	b.n	1b502 <os_mutex_release+0x46>
        assert(rdy->t_obj);
   1b54a:	461a      	mov	r2, r3
   1b54c:	4619      	mov	r1, r3
   1b54e:	4618      	mov	r0, r3
   1b550:	f7ff f978 	bl	1a844 <__assert_func>
    resched = 0;
   1b554:	2500      	movs	r5, #0
   1b556:	e7ed      	b.n	1b534 <os_mutex_release+0x78>
        os_sched(rdy);
   1b558:	4620      	mov	r0, r4
   1b55a:	f000 fa07 	bl	1b96c <os_sched>
    ret = OS_OK;
   1b55e:	2000      	movs	r0, #0
   1b560:	e000      	b.n	1b564 <os_mutex_release+0xa8>
        ret = OS_NOT_STARTED;
   1b562:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
   1b564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
   1b566:	2003      	movs	r0, #3
   1b568:	e7fc      	b.n	1b564 <os_mutex_release+0xa8>
        ret = OS_BAD_MUTEX;
   1b56a:	2005      	movs	r0, #5
   1b56c:	e7fa      	b.n	1b564 <os_mutex_release+0xa8>
   1b56e:	bf00      	nop
   1b570:	2000de88 	.word	0x2000de88

0001b574 <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
   1b574:	4b36      	ldr	r3, [pc, #216]	; (1b650 <os_mutex_pend+0xdc>)
   1b576:	681b      	ldr	r3, [r3, #0]
   1b578:	2b00      	cmp	r3, #0
   1b57a:	d065      	beq.n	1b648 <os_mutex_pend+0xd4>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   1b57c:	2800      	cmp	r0, #0
   1b57e:	d065      	beq.n	1b64c <os_mutex_pend+0xd8>
{
   1b580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b584:	460f      	mov	r7, r1
   1b586:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
   1b588:	f000 fbf2 	bl	1bd70 <os_arch_save_sr>
   1b58c:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
   1b58e:	f000 f919 	bl	1b7c4 <os_sched_get_current_task>
   1b592:	4605      	mov	r5, r0
    if (mu->mu_level == 0) {
   1b594:	88e3      	ldrh	r3, [r4, #6]
   1b596:	b19b      	cbz	r3, 1b5c0 <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
   1b598:	68a2      	ldr	r2, [r4, #8]
   1b59a:	4282      	cmp	r2, r0
   1b59c:	d01e      	beq.n	1b5dc <os_mutex_pend+0x68>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
   1b59e:	b327      	cbz	r7, 1b5ea <os_mutex_pend+0x76>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
   1b5a0:	7ad1      	ldrb	r1, [r2, #11]
   1b5a2:	7ac3      	ldrb	r3, [r0, #11]
   1b5a4:	4299      	cmp	r1, r3
   1b5a6:	d825      	bhi.n	1b5f4 <os_mutex_pend+0x80>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
   1b5a8:	6821      	ldr	r1, [r4, #0]
   1b5aa:	b369      	cbz	r1, 1b608 <os_mutex_pend+0x94>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1b5ac:	460b      	mov	r3, r1
    last = NULL;
   1b5ae:	2600      	movs	r6, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1b5b0:	b32b      	cbz	r3, 1b5fe <os_mutex_pend+0x8a>
            if (current->t_prio < entry->t_prio) {
   1b5b2:	7ae8      	ldrb	r0, [r5, #11]
   1b5b4:	7ada      	ldrb	r2, [r3, #11]
   1b5b6:	4290      	cmp	r0, r2
   1b5b8:	d321      	bcc.n	1b5fe <os_mutex_pend+0x8a>
                break;
            }
            last = entry;
   1b5ba:	461e      	mov	r6, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1b5bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1b5be:	e7f7      	b.n	1b5b0 <os_mutex_pend+0x3c>
        mu->mu_owner = current;
   1b5c0:	60a0      	str	r0, [r4, #8]
        mu->mu_prio  = current->t_prio;
   1b5c2:	7ac3      	ldrb	r3, [r0, #11]
   1b5c4:	7163      	strb	r3, [r4, #5]
        current->t_lockcnt++;
   1b5c6:	7b83      	ldrb	r3, [r0, #14]
   1b5c8:	3301      	adds	r3, #1
   1b5ca:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
   1b5cc:	2301      	movs	r3, #1
   1b5ce:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   1b5d0:	4640      	mov	r0, r8
   1b5d2:	f000 fbd3 	bl	1bd7c <os_arch_restore_sr>
        ret = OS_OK;
   1b5d6:	2000      	movs	r0, #0
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
   1b5d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ++mu->mu_level;
   1b5dc:	3301      	adds	r3, #1
   1b5de:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   1b5e0:	4640      	mov	r0, r8
   1b5e2:	f000 fbcb 	bl	1bd7c <os_arch_restore_sr>
        ret = OS_OK;
   1b5e6:	2000      	movs	r0, #0
        goto done;
   1b5e8:	e7f6      	b.n	1b5d8 <os_mutex_pend+0x64>
        OS_EXIT_CRITICAL(sr);
   1b5ea:	4640      	mov	r0, r8
   1b5ec:	f000 fbc6 	bl	1bd7c <os_arch_restore_sr>
        ret = OS_TIMEOUT;
   1b5f0:	2006      	movs	r0, #6
        goto done;
   1b5f2:	e7f1      	b.n	1b5d8 <os_mutex_pend+0x64>
        mu->mu_owner->t_prio = current->t_prio;
   1b5f4:	72d3      	strb	r3, [r2, #11]
        os_sched_resort(mu->mu_owner);
   1b5f6:	68a0      	ldr	r0, [r4, #8]
   1b5f8:	f000 f9ca 	bl	1b990 <os_sched_resort>
   1b5fc:	e7d4      	b.n	1b5a8 <os_mutex_pend+0x34>
    if (last) {
   1b5fe:	b11e      	cbz	r6, 1b608 <os_mutex_pend+0x94>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
   1b600:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
   1b602:	64eb      	str	r3, [r5, #76]	; 0x4c
   1b604:	64f5      	str	r5, [r6, #76]	; 0x4c
   1b606:	e001      	b.n	1b60c <os_mutex_pend+0x98>
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
   1b608:	64e9      	str	r1, [r5, #76]	; 0x4c
   1b60a:	6025      	str	r5, [r4, #0]
    current->t_obj = mu;
   1b60c:	61ec      	str	r4, [r5, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
   1b60e:	7b6b      	ldrb	r3, [r5, #13]
   1b610:	f043 0304 	orr.w	r3, r3, #4
   1b614:	736b      	strb	r3, [r5, #13]
    os_sched_sleep(current, timeout);
   1b616:	4639      	mov	r1, r7
   1b618:	4628      	mov	r0, r5
   1b61a:	f000 f8df 	bl	1b7dc <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
   1b61e:	4640      	mov	r0, r8
   1b620:	f000 fbac 	bl	1bd7c <os_arch_restore_sr>
    os_sched(NULL);
   1b624:	2000      	movs	r0, #0
   1b626:	f000 f9a1 	bl	1b96c <os_sched>
    OS_ENTER_CRITICAL(sr);
   1b62a:	f000 fba1 	bl	1bd70 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
   1b62e:	7b6b      	ldrb	r3, [r5, #13]
   1b630:	f023 0304 	bic.w	r3, r3, #4
   1b634:	736b      	strb	r3, [r5, #13]
    OS_EXIT_CRITICAL(sr);
   1b636:	f000 fba1 	bl	1bd7c <os_arch_restore_sr>
    if (mu->mu_owner == current) {
   1b63a:	68a3      	ldr	r3, [r4, #8]
   1b63c:	42ab      	cmp	r3, r5
   1b63e:	d001      	beq.n	1b644 <os_mutex_pend+0xd0>
        ret = OS_TIMEOUT;
   1b640:	2006      	movs	r0, #6
   1b642:	e7c9      	b.n	1b5d8 <os_mutex_pend+0x64>
        ret = OS_OK;
   1b644:	2000      	movs	r0, #0
   1b646:	e7c7      	b.n	1b5d8 <os_mutex_pend+0x64>
        ret = OS_NOT_STARTED;
   1b648:	2009      	movs	r0, #9
   1b64a:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1b64c:	2003      	movs	r0, #3
}
   1b64e:	4770      	bx	lr
   1b650:	2000de88 	.word	0x2000de88

0001b654 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
   1b654:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   1b656:	4b05      	ldr	r3, [pc, #20]	; (1b66c <os_sanity_check_list_lock+0x18>)
   1b658:	6818      	ldr	r0, [r3, #0]
   1b65a:	b900      	cbnz	r0, 1b65e <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1b65c:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
   1b65e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b662:	4803      	ldr	r0, [pc, #12]	; (1b670 <os_sanity_check_list_lock+0x1c>)
   1b664:	f7ff ff86 	bl	1b574 <os_mutex_pend>
err:
   1b668:	e7f8      	b.n	1b65c <os_sanity_check_list_lock+0x8>
   1b66a:	bf00      	nop
   1b66c:	2000de88 	.word	0x2000de88
   1b670:	2000dea0 	.word	0x2000dea0

0001b674 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
   1b674:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   1b676:	4b04      	ldr	r3, [pc, #16]	; (1b688 <os_sanity_check_list_unlock+0x14>)
   1b678:	6818      	ldr	r0, [r3, #0]
   1b67a:	b900      	cbnz	r0, 1b67e <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1b67c:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
   1b67e:	4803      	ldr	r0, [pc, #12]	; (1b68c <os_sanity_check_list_unlock+0x18>)
   1b680:	f7ff ff1c 	bl	1b4bc <os_mutex_release>
err:
   1b684:	e7fa      	b.n	1b67c <os_sanity_check_list_unlock+0x8>
   1b686:	bf00      	nop
   1b688:	2000de88 	.word	0x2000de88
   1b68c:	2000dea0 	.word	0x2000dea0

0001b690 <os_sanity_check_init>:
    memset(sc, 0, sizeof(*sc));
   1b690:	2300      	movs	r3, #0
   1b692:	6003      	str	r3, [r0, #0]
   1b694:	6043      	str	r3, [r0, #4]
   1b696:	6083      	str	r3, [r0, #8]
   1b698:	60c3      	str	r3, [r0, #12]
   1b69a:	6103      	str	r3, [r0, #16]
}
   1b69c:	4618      	mov	r0, r3
   1b69e:	4770      	bx	lr

0001b6a0 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
   1b6a0:	b510      	push	{r4, lr}
   1b6a2:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
   1b6a4:	f7ff ffd6 	bl	1b654 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
   1b6a8:	4603      	mov	r3, r0
   1b6aa:	b108      	cbz	r0, 1b6b0 <os_sanity_check_register+0x10>
    }

    return (0);
err:
    return (rc);
}
   1b6ac:	4618      	mov	r0, r3
   1b6ae:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
   1b6b0:	4b03      	ldr	r3, [pc, #12]	; (1b6c0 <os_sanity_check_register+0x20>)
   1b6b2:	681a      	ldr	r2, [r3, #0]
   1b6b4:	6122      	str	r2, [r4, #16]
   1b6b6:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
   1b6b8:	f7ff ffdc 	bl	1b674 <os_sanity_check_list_unlock>
   1b6bc:	4603      	mov	r3, r0
err:
   1b6be:	e7f5      	b.n	1b6ac <os_sanity_check_register+0xc>
   1b6c0:	2000d9b0 	.word	0x2000d9b0

0001b6c4 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
   1b6c4:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
   1b6c6:	f7ff ffc5 	bl	1b654 <os_sanity_check_list_lock>
    if (rc != 0) {
   1b6ca:	b910      	cbnz	r0, 1b6d2 <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1b6cc:	4b17      	ldr	r3, [pc, #92]	; (1b72c <os_sanity_run+0x68>)
   1b6ce:	681c      	ldr	r4, [r3, #0]
   1b6d0:	e00e      	b.n	1b6f0 <os_sanity_run+0x2c>
        assert(0);
   1b6d2:	2300      	movs	r3, #0
   1b6d4:	461a      	mov	r2, r3
   1b6d6:	4619      	mov	r1, r3
   1b6d8:	4618      	mov	r0, r3
   1b6da:	f7ff f8b3 	bl	1a844 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
   1b6de:	f000 facf 	bl	1bc80 <os_time_get>
   1b6e2:	6823      	ldr	r3, [r4, #0]
   1b6e4:	6862      	ldr	r2, [r4, #4]
   1b6e6:	4413      	add	r3, r2
   1b6e8:	1ac3      	subs	r3, r0, r3
   1b6ea:	2b00      	cmp	r3, #0
   1b6ec:	dc0d      	bgt.n	1b70a <os_sanity_run+0x46>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1b6ee:	6924      	ldr	r4, [r4, #16]
   1b6f0:	b18c      	cbz	r4, 1b716 <os_sanity_run+0x52>
        if (sc->sc_func) {
   1b6f2:	68a3      	ldr	r3, [r4, #8]
   1b6f4:	2b00      	cmp	r3, #0
   1b6f6:	d0f2      	beq.n	1b6de <os_sanity_run+0x1a>
            rc = sc->sc_func(sc, sc->sc_arg);
   1b6f8:	68e1      	ldr	r1, [r4, #12]
   1b6fa:	4620      	mov	r0, r4
   1b6fc:	4798      	blx	r3
            if (rc == OS_OK) {
   1b6fe:	2800      	cmp	r0, #0
   1b700:	d1ed      	bne.n	1b6de <os_sanity_run+0x1a>
                sc->sc_checkin_last = os_time_get();
   1b702:	f000 fabd 	bl	1bc80 <os_time_get>
   1b706:	6020      	str	r0, [r4, #0]
                continue;
   1b708:	e7f1      	b.n	1b6ee <os_sanity_run+0x2a>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
   1b70a:	2300      	movs	r3, #0
   1b70c:	461a      	mov	r2, r3
   1b70e:	4619      	mov	r1, r3
   1b710:	4618      	mov	r0, r3
   1b712:	f7ff f897 	bl	1a844 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
   1b716:	f7ff ffad 	bl	1b674 <os_sanity_check_list_unlock>
    if (rc != 0) {
   1b71a:	b900      	cbnz	r0, 1b71e <os_sanity_run+0x5a>
        assert(0);
    }
}
   1b71c:	bd10      	pop	{r4, pc}
        assert(0);
   1b71e:	2300      	movs	r3, #0
   1b720:	461a      	mov	r2, r3
   1b722:	4619      	mov	r1, r3
   1b724:	4618      	mov	r0, r3
   1b726:	f7ff f88d 	bl	1a844 <__assert_func>
   1b72a:	bf00      	nop
   1b72c:	2000d9b0 	.word	0x2000d9b0

0001b730 <os_sanity_init>:

int
os_sanity_init(void)
{
   1b730:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
   1b732:	4802      	ldr	r0, [pc, #8]	; (1b73c <os_sanity_init+0xc>)
   1b734:	f7ff feb8 	bl	1b4a8 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
   1b738:	bd08      	pop	{r3, pc}
   1b73a:	bf00      	nop
   1b73c:	2000dea0 	.word	0x2000dea0

0001b740 <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
   1b740:	7b03      	ldrb	r3, [r0, #12]
   1b742:	2b01      	cmp	r3, #1
   1b744:	d001      	beq.n	1b74a <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
   1b746:	2002      	movs	r0, #2
}
   1b748:	4770      	bx	lr
{
   1b74a:	b510      	push	{r4, lr}
   1b74c:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1b74e:	f000 fb0f 	bl	1bd70 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   1b752:	4b0f      	ldr	r3, [pc, #60]	; (1b790 <os_sched_insert+0x50>)
   1b754:	681b      	ldr	r3, [r3, #0]
   1b756:	b12b      	cbz	r3, 1b764 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
   1b758:	7ae1      	ldrb	r1, [r4, #11]
   1b75a:	7ada      	ldrb	r2, [r3, #11]
   1b75c:	4291      	cmp	r1, r2
   1b75e:	d301      	bcc.n	1b764 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   1b760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1b762:	e7f8      	b.n	1b756 <os_sched_insert+0x16>
    if (entry) {
   1b764:	b153      	cbz	r3, 1b77c <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
   1b766:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1b768:	64a2      	str	r2, [r4, #72]	; 0x48
   1b76a:	6463      	str	r3, [r4, #68]	; 0x44
   1b76c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1b76e:	6014      	str	r4, [r2, #0]
   1b770:	3444      	adds	r4, #68	; 0x44
   1b772:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
   1b774:	f000 fb02 	bl	1bd7c <os_arch_restore_sr>
    return (0);
   1b778:	2000      	movs	r0, #0
}
   1b77a:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
   1b77c:	2300      	movs	r3, #0
   1b77e:	6463      	str	r3, [r4, #68]	; 0x44
   1b780:	4b03      	ldr	r3, [pc, #12]	; (1b790 <os_sched_insert+0x50>)
   1b782:	685a      	ldr	r2, [r3, #4]
   1b784:	64a2      	str	r2, [r4, #72]	; 0x48
   1b786:	6014      	str	r4, [r2, #0]
   1b788:	3444      	adds	r4, #68	; 0x44
   1b78a:	605c      	str	r4, [r3, #4]
   1b78c:	e7f2      	b.n	1b774 <os_sched_insert+0x34>
   1b78e:	bf00      	nop
   1b790:	20000114 	.word	0x20000114

0001b794 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
   1b794:	b410      	push	{r4}
    top = g_current_task->t_stacktop - g_current_task->t_stacksize;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(top[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
   1b796:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1b798:	3301      	adds	r3, #1
   1b79a:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
   1b79c:	4b06      	ldr	r3, [pc, #24]	; (1b7b8 <os_sched_ctx_sw_hook+0x24>)
   1b79e:	681c      	ldr	r4, [r3, #0]
   1b7a0:	4b06      	ldr	r3, [pc, #24]	; (1b7bc <os_sched_ctx_sw_hook+0x28>)
   1b7a2:	6818      	ldr	r0, [r3, #0]
   1b7a4:	4906      	ldr	r1, [pc, #24]	; (1b7c0 <os_sched_ctx_sw_hook+0x2c>)
   1b7a6:	680b      	ldr	r3, [r1, #0]
   1b7a8:	1ac2      	subs	r2, r0, r3
   1b7aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1b7ac:	4413      	add	r3, r2
   1b7ae:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = g_os_time;
   1b7b0:	6008      	str	r0, [r1, #0]
}
   1b7b2:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b7b6:	4770      	bx	lr
   1b7b8:	2000deb0 	.word	0x2000deb0
   1b7bc:	2000dec0 	.word	0x2000dec0
   1b7c0:	2000deac 	.word	0x2000deac

0001b7c4 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
   1b7c4:	4b01      	ldr	r3, [pc, #4]	; (1b7cc <os_sched_get_current_task+0x8>)
   1b7c6:	6818      	ldr	r0, [r3, #0]
   1b7c8:	4770      	bx	lr
   1b7ca:	bf00      	nop
   1b7cc:	2000deb0 	.word	0x2000deb0

0001b7d0 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
   1b7d0:	4b01      	ldr	r3, [pc, #4]	; (1b7d8 <os_sched_set_current_task+0x8>)
   1b7d2:	6018      	str	r0, [r3, #0]
}
   1b7d4:	4770      	bx	lr
   1b7d6:	bf00      	nop
   1b7d8:	2000deb0 	.word	0x2000deb0

0001b7dc <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
   1b7dc:	b538      	push	{r3, r4, r5, lr}
   1b7de:	4604      	mov	r4, r0
   1b7e0:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1b7e2:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1b7e4:	b1d3      	cbz	r3, 1b81c <os_sched_sleep+0x40>
   1b7e6:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1b7e8:	649a      	str	r2, [r3, #72]	; 0x48
   1b7ea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1b7ec:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1b7ee:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
   1b7f0:	2302      	movs	r3, #2
   1b7f2:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
   1b7f4:	f000 fa44 	bl	1bc80 <os_time_get>
   1b7f8:	4428      	add	r0, r5
   1b7fa:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
   1b7fc:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1b800:	d010      	beq.n	1b824 <os_sched_sleep+0x48>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   1b802:	4b18      	ldr	r3, [pc, #96]	; (1b864 <os_sched_sleep+0x88>)
   1b804:	681b      	ldr	r3, [r3, #0]
   1b806:	b1d3      	cbz	r3, 1b83e <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   1b808:	7b5a      	ldrb	r2, [r3, #13]
   1b80a:	f012 0f01 	tst.w	r2, #1
   1b80e:	d116      	bne.n	1b83e <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
   1b810:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1b812:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   1b814:	2a00      	cmp	r2, #0
   1b816:	dc12      	bgt.n	1b83e <os_sched_sleep+0x62>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   1b818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1b81a:	e7f4      	b.n	1b806 <os_sched_sleep+0x2a>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1b81c:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1b81e:	4b12      	ldr	r3, [pc, #72]	; (1b868 <os_sched_sleep+0x8c>)
   1b820:	605a      	str	r2, [r3, #4]
   1b822:	e7e2      	b.n	1b7ea <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
   1b824:	7b63      	ldrb	r3, [r4, #13]
   1b826:	f043 0301 	orr.w	r3, r3, #1
   1b82a:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   1b82c:	2300      	movs	r3, #0
   1b82e:	6463      	str	r3, [r4, #68]	; 0x44
   1b830:	4b0c      	ldr	r3, [pc, #48]	; (1b864 <os_sched_sleep+0x88>)
   1b832:	685a      	ldr	r2, [r3, #4]
   1b834:	64a2      	str	r2, [r4, #72]	; 0x48
   1b836:	6014      	str	r4, [r2, #0]
   1b838:	3444      	adds	r4, #68	; 0x44
   1b83a:	605c      	str	r4, [r3, #4]
   1b83c:	e007      	b.n	1b84e <os_sched_sleep+0x72>
                break;
            }
        }
        if (entry) {
   1b83e:	b143      	cbz	r3, 1b852 <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
   1b840:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1b842:	64a2      	str	r2, [r4, #72]	; 0x48
   1b844:	6463      	str	r3, [r4, #68]	; 0x44
   1b846:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1b848:	6014      	str	r4, [r2, #0]
   1b84a:	3444      	adds	r4, #68	; 0x44
   1b84c:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
   1b84e:	2000      	movs	r0, #0
   1b850:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   1b852:	2300      	movs	r3, #0
   1b854:	6463      	str	r3, [r4, #68]	; 0x44
   1b856:	4b03      	ldr	r3, [pc, #12]	; (1b864 <os_sched_sleep+0x88>)
   1b858:	685a      	ldr	r2, [r3, #4]
   1b85a:	64a2      	str	r2, [r4, #72]	; 0x48
   1b85c:	6014      	str	r4, [r2, #0]
   1b85e:	3444      	adds	r4, #68	; 0x44
   1b860:	605c      	str	r4, [r3, #4]
   1b862:	e7f4      	b.n	1b84e <os_sched_sleep+0x72>
   1b864:	2000011c 	.word	0x2000011c
   1b868:	20000114 	.word	0x20000114

0001b86c <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
   1b86c:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
   1b86e:	7b03      	ldrb	r3, [r0, #12]
   1b870:	2b02      	cmp	r3, #2
   1b872:	d108      	bne.n	1b886 <os_sched_wakeup+0x1a>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
   1b874:	69c3      	ldr	r3, [r0, #28]
   1b876:	b1db      	cbz	r3, 1b8b0 <os_sched_wakeup+0x44>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   1b878:	681a      	ldr	r2, [r3, #0]
   1b87a:	b152      	cbz	r2, 1b892 <os_sched_wakeup+0x26>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   1b87c:	4282      	cmp	r2, r0
   1b87e:	d10f      	bne.n	1b8a0 <os_sched_wakeup+0x34>
   1b880:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   1b882:	601a      	str	r2, [r3, #0]
   1b884:	e011      	b.n	1b8aa <os_sched_wakeup+0x3e>
    assert(t->t_state == OS_TASK_SLEEP);
   1b886:	2300      	movs	r3, #0
   1b888:	461a      	mov	r2, r3
   1b88a:	4619      	mov	r1, r3
   1b88c:	4618      	mov	r0, r3
   1b88e:	f7fe ffd9 	bl	1a844 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   1b892:	2300      	movs	r3, #0
   1b894:	461a      	mov	r2, r3
   1b896:	4619      	mov	r1, r3
   1b898:	4618      	mov	r0, r3
   1b89a:	f7fe ffd3 	bl	1a844 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   1b89e:	461a      	mov	r2, r3
   1b8a0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1b8a2:	4283      	cmp	r3, r0
   1b8a4:	d1fb      	bne.n	1b89e <os_sched_wakeup+0x32>
   1b8a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1b8a8:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
   1b8aa:	2300      	movs	r3, #0
   1b8ac:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
   1b8ae:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
   1b8b0:	2301      	movs	r3, #1
   1b8b2:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
   1b8b4:	2300      	movs	r3, #0
   1b8b6:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
   1b8b8:	7b43      	ldrb	r3, [r0, #13]
   1b8ba:	f023 0301 	bic.w	r3, r3, #1
   1b8be:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1b8c0:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1b8c2:	b143      	cbz	r3, 1b8d6 <os_sched_wakeup+0x6a>
   1b8c4:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1b8c6:	649a      	str	r2, [r3, #72]	; 0x48
   1b8c8:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1b8ca:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1b8cc:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
   1b8ce:	f7ff ff37 	bl	1b740 <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
   1b8d2:	2000      	movs	r0, #0
   1b8d4:	bd08      	pop	{r3, pc}
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1b8d6:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1b8d8:	4b01      	ldr	r3, [pc, #4]	; (1b8e0 <os_sched_wakeup+0x74>)
   1b8da:	605a      	str	r2, [r3, #4]
   1b8dc:	e7f4      	b.n	1b8c8 <os_sched_wakeup+0x5c>
   1b8de:	bf00      	nop
   1b8e0:	2000011c 	.word	0x2000011c

0001b8e4 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
   1b8e4:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
   1b8e6:	f000 f9cb 	bl	1bc80 <os_time_get>
   1b8ea:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   1b8ec:	f000 fa40 	bl	1bd70 <os_arch_save_sr>
   1b8f0:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
   1b8f2:	4b0a      	ldr	r3, [pc, #40]	; (1b91c <os_sched_os_timer_exp+0x38>)
   1b8f4:	6818      	ldr	r0, [r3, #0]
    while (t) {
   1b8f6:	b160      	cbz	r0, 1b912 <os_sched_os_timer_exp+0x2e>
        /* If task waiting forever, do not check next wakeup time */
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
   1b8f8:	7b43      	ldrb	r3, [r0, #13]
   1b8fa:	f013 0f01 	tst.w	r3, #1
   1b8fe:	d108      	bne.n	1b912 <os_sched_os_timer_exp+0x2e>
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
   1b900:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
   1b902:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1b904:	1aeb      	subs	r3, r5, r3
   1b906:	2b00      	cmp	r3, #0
   1b908:	db03      	blt.n	1b912 <os_sched_os_timer_exp+0x2e>
            os_sched_wakeup(t);
   1b90a:	f7ff ffaf 	bl	1b86c <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
   1b90e:	4620      	mov	r0, r4
   1b910:	e7f1      	b.n	1b8f6 <os_sched_os_timer_exp+0x12>
    }

    OS_EXIT_CRITICAL(sr);
   1b912:	4630      	mov	r0, r6
   1b914:	f000 fa32 	bl	1bd7c <os_arch_restore_sr>
}
   1b918:	bd70      	pop	{r4, r5, r6, pc}
   1b91a:	bf00      	nop
   1b91c:	2000011c 	.word	0x2000011c

0001b920 <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
   1b920:	b510      	push	{r4, lr}
   1b922:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
   1b924:	f000 fa2d 	bl	1bd82 <os_arch_in_critical>
   1b928:	b150      	cbz	r0, 1b940 <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
   1b92a:	4b0c      	ldr	r3, [pc, #48]	; (1b95c <os_sched_wakeup_ticks+0x3c>)
   1b92c:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
   1b92e:	b17b      	cbz	r3, 1b950 <os_sched_wakeup_ticks+0x30>
   1b930:	7b5a      	ldrb	r2, [r3, #13]
   1b932:	f012 0f01 	tst.w	r2, #1
   1b936:	d10e      	bne.n	1b956 <os_sched_wakeup_ticks+0x36>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
   1b938:	6b58      	ldr	r0, [r3, #52]	; 0x34
   1b93a:	1b00      	subs	r0, r0, r4
   1b93c:	d406      	bmi.n	1b94c <os_sched_wakeup_ticks+0x2c>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
   1b93e:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   1b940:	2300      	movs	r3, #0
   1b942:	461a      	mov	r2, r3
   1b944:	4619      	mov	r1, r3
   1b946:	4618      	mov	r0, r3
   1b948:	f7fe ff7c 	bl	1a844 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
   1b94c:	2000      	movs	r0, #0
   1b94e:	e7f6      	b.n	1b93e <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
   1b950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b954:	e7f3      	b.n	1b93e <os_sched_wakeup_ticks+0x1e>
   1b956:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   1b95a:	e7f0      	b.n	1b93e <os_sched_wakeup_ticks+0x1e>
   1b95c:	2000011c 	.word	0x2000011c

0001b960 <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
   1b960:	4b01      	ldr	r3, [pc, #4]	; (1b968 <os_sched_next_task+0x8>)
   1b962:	6818      	ldr	r0, [r3, #0]
   1b964:	4770      	bx	lr
   1b966:	bf00      	nop
   1b968:	20000114 	.word	0x20000114

0001b96c <os_sched>:
{
   1b96c:	b538      	push	{r3, r4, r5, lr}
   1b96e:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1b970:	f000 f9fe 	bl	1bd70 <os_arch_save_sr>
   1b974:	4605      	mov	r5, r0
    if (!next_t) {
   1b976:	b134      	cbz	r4, 1b986 <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
   1b978:	4620      	mov	r0, r4
   1b97a:	f000 f9ef 	bl	1bd5c <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
   1b97e:	4628      	mov	r0, r5
   1b980:	f000 f9fc 	bl	1bd7c <os_arch_restore_sr>
}
   1b984:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
   1b986:	f7ff ffeb 	bl	1b960 <os_sched_next_task>
   1b98a:	4604      	mov	r4, r0
   1b98c:	e7f4      	b.n	1b978 <os_sched+0xc>
	...

0001b990 <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
   1b990:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
   1b992:	7b03      	ldrb	r3, [r0, #12]
   1b994:	2b01      	cmp	r3, #1
   1b996:	d000      	beq.n	1b99a <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
   1b998:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1b99a:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1b99c:	b13b      	cbz	r3, 1b9ae <os_sched_resort+0x1e>
   1b99e:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1b9a0:	649a      	str	r2, [r3, #72]	; 0x48
   1b9a2:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1b9a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1b9a6:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
   1b9a8:	f7ff feca 	bl	1b740 <os_sched_insert>
}
   1b9ac:	e7f4      	b.n	1b998 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1b9ae:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1b9b0:	4b01      	ldr	r3, [pc, #4]	; (1b9b8 <os_sched_resort+0x28>)
   1b9b2:	605a      	str	r2, [r3, #4]
   1b9b4:	e7f5      	b.n	1b9a2 <os_sched_resort+0x12>
   1b9b6:	bf00      	nop
   1b9b8:	20000114 	.word	0x20000114

0001b9bc <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
   1b9bc:	4603      	mov	r3, r0
   1b9be:	b118      	cbz	r0, 1b9c8 <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
   1b9c0:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
   1b9c2:	2000      	movs	r0, #0
   1b9c4:	6018      	str	r0, [r3, #0]
   1b9c6:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1b9c8:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
   1b9ca:	4770      	bx	lr

0001b9cc <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
   1b9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
   1b9ce:	4b17      	ldr	r3, [pc, #92]	; (1ba2c <os_sem_release+0x60>)
   1b9d0:	681b      	ldr	r3, [r3, #0]
   1b9d2:	b33b      	cbz	r3, 1ba24 <os_sem_release+0x58>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   1b9d4:	b340      	cbz	r0, 1ba28 <os_sem_release+0x5c>
   1b9d6:	4604      	mov	r4, r0
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
   1b9d8:	f7ff fef4 	bl	1b7c4 <os_sched_get_current_task>
   1b9dc:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
   1b9de:	f000 f9c7 	bl	1bd70 <os_arch_save_sr>
   1b9e2:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
   1b9e4:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
   1b9e6:	b165      	cbz	r5, 1ba02 <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   1b9e8:	7b6b      	ldrb	r3, [r5, #13]
   1b9ea:	f023 0302 	bic.w	r3, r3, #2
   1b9ee:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
   1b9f0:	4628      	mov	r0, r5
   1b9f2:	f7ff ff3b 	bl	1b86c <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
   1b9f6:	7afa      	ldrb	r2, [r7, #11]
   1b9f8:	7aeb      	ldrb	r3, [r5, #11]
   1b9fa:	429a      	cmp	r2, r3
   1b9fc:	d80b      	bhi.n	1ba16 <os_sem_release+0x4a>
    resched = 0;
   1b9fe:	2400      	movs	r4, #0
   1ba00:	e003      	b.n	1ba0a <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
   1ba02:	88e3      	ldrh	r3, [r4, #6]
   1ba04:	3301      	adds	r3, #1
   1ba06:	80e3      	strh	r3, [r4, #6]
    resched = 0;
   1ba08:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
   1ba0a:	4630      	mov	r0, r6
   1ba0c:	f000 f9b6 	bl	1bd7c <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   1ba10:	b91c      	cbnz	r4, 1ba1a <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
   1ba12:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
   1ba14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
   1ba16:	2401      	movs	r4, #1
   1ba18:	e7f7      	b.n	1ba0a <os_sem_release+0x3e>
        os_sched(rdy);
   1ba1a:	4628      	mov	r0, r5
   1ba1c:	f7ff ffa6 	bl	1b96c <os_sched>
    ret = OS_OK;
   1ba20:	2000      	movs	r0, #0
   1ba22:	e7f7      	b.n	1ba14 <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
   1ba24:	2009      	movs	r0, #9
   1ba26:	e7f5      	b.n	1ba14 <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
   1ba28:	2003      	movs	r0, #3
   1ba2a:	e7f3      	b.n	1ba14 <os_sem_release+0x48>
   1ba2c:	2000de88 	.word	0x2000de88

0001ba30 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
   1ba30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
   1ba32:	4b2c      	ldr	r3, [pc, #176]	; (1bae4 <os_sem_pend+0xb4>)
   1ba34:	681b      	ldr	r3, [r3, #0]
   1ba36:	2b00      	cmp	r3, #0
   1ba38:	d04f      	beq.n	1bada <os_sem_pend+0xaa>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   1ba3a:	2800      	cmp	r0, #0
   1ba3c:	d04f      	beq.n	1bade <os_sem_pend+0xae>
   1ba3e:	460d      	mov	r5, r1
   1ba40:	4604      	mov	r4, r0
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
   1ba42:	f7ff febf 	bl	1b7c4 <os_sched_get_current_task>
   1ba46:	4606      	mov	r6, r0

    OS_ENTER_CRITICAL(sr);
   1ba48:	f000 f992 	bl	1bd70 <os_arch_save_sr>
   1ba4c:	4607      	mov	r7, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
   1ba4e:	88e3      	ldrh	r3, [r4, #6]
   1ba50:	b14b      	cbz	r3, 1ba66 <os_sem_pend+0x36>
        sem->sem_tokens--;
   1ba52:	3b01      	subs	r3, #1
   1ba54:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   1ba56:	2400      	movs	r4, #0
    sched = 0;
   1ba58:	4625      	mov	r5, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
   1ba5a:	4638      	mov	r0, r7
   1ba5c:	f000 f98e 	bl	1bd7c <os_arch_restore_sr>

    if (sched) {
   1ba60:	bb45      	cbnz	r5, 1bab4 <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
   1ba62:	4620      	mov	r0, r4
   1ba64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
   1ba66:	b315      	cbz	r5, 1baae <os_sem_pend+0x7e>
        current->t_obj = sem;
   1ba68:	61f4      	str	r4, [r6, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
   1ba6a:	7b73      	ldrb	r3, [r6, #13]
   1ba6c:	f043 0302 	orr.w	r3, r3, #2
   1ba70:	7373      	strb	r3, [r6, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
   1ba72:	f8d4 c000 	ldr.w	ip, [r4]
   1ba76:	f1bc 0f00 	cmp.w	ip, #0
   1ba7a:	d00e      	beq.n	1ba9a <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1ba7c:	4663      	mov	r3, ip
        last = NULL;
   1ba7e:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1ba80:	b133      	cbz	r3, 1ba90 <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
   1ba82:	7af1      	ldrb	r1, [r6, #11]
   1ba84:	7ada      	ldrb	r2, [r3, #11]
   1ba86:	4291      	cmp	r1, r2
   1ba88:	d302      	bcc.n	1ba90 <os_sem_pend+0x60>
                last = entry;
   1ba8a:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1ba8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1ba8e:	e7f7      	b.n	1ba80 <os_sem_pend+0x50>
        if (last) {
   1ba90:	b118      	cbz	r0, 1ba9a <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
   1ba92:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1ba94:	64f3      	str	r3, [r6, #76]	; 0x4c
   1ba96:	64c6      	str	r6, [r0, #76]	; 0x4c
   1ba98:	e002      	b.n	1baa0 <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
   1ba9a:	f8c6 c04c 	str.w	ip, [r6, #76]	; 0x4c
   1ba9e:	6026      	str	r6, [r4, #0]
        os_sched_sleep(current, timeout);
   1baa0:	4629      	mov	r1, r5
   1baa2:	4630      	mov	r0, r6
   1baa4:	f7ff fe9a 	bl	1b7dc <os_sched_sleep>
        ret = OS_OK;
   1baa8:	2400      	movs	r4, #0
        sched = 1;
   1baaa:	2501      	movs	r5, #1
   1baac:	e7d5      	b.n	1ba5a <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
   1baae:	2406      	movs	r4, #6
    sched = 0;
   1bab0:	2500      	movs	r5, #0
   1bab2:	e7d2      	b.n	1ba5a <os_sem_pend+0x2a>
        os_sched(NULL);
   1bab4:	2000      	movs	r0, #0
   1bab6:	f7ff ff59 	bl	1b96c <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
   1baba:	7b73      	ldrb	r3, [r6, #13]
   1babc:	f013 0f02 	tst.w	r3, #2
   1bac0:	d101      	bne.n	1bac6 <os_sem_pend+0x96>
            ret = OS_OK;
   1bac2:	2400      	movs	r4, #0
   1bac4:	e7cd      	b.n	1ba62 <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
   1bac6:	f000 f953 	bl	1bd70 <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   1baca:	7b73      	ldrb	r3, [r6, #13]
   1bacc:	f023 0302 	bic.w	r3, r3, #2
   1bad0:	7373      	strb	r3, [r6, #13]
            OS_EXIT_CRITICAL(sr);
   1bad2:	f000 f953 	bl	1bd7c <os_arch_restore_sr>
            ret = OS_TIMEOUT;
   1bad6:	2406      	movs	r4, #6
   1bad8:	e7c3      	b.n	1ba62 <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
   1bada:	2409      	movs	r4, #9
   1badc:	e7c1      	b.n	1ba62 <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
   1bade:	2403      	movs	r4, #3
   1bae0:	e7bf      	b.n	1ba62 <os_sem_pend+0x32>
   1bae2:	bf00      	nop
   1bae4:	2000de88 	.word	0x2000de88

0001bae8 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
   1bae8:	2300      	movs	r3, #0
   1baea:	e003      	b.n	1baf4 <_clear_stack+0xc>
        stack_bottom[i] = OS_STACK_PATTERN;
   1baec:	4a03      	ldr	r2, [pc, #12]	; (1bafc <_clear_stack+0x14>)
   1baee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
   1baf2:	3301      	adds	r3, #1
   1baf4:	428b      	cmp	r3, r1
   1baf6:	dbf9      	blt.n	1baec <_clear_stack+0x4>
    }
}
   1baf8:	4770      	bx	lr
   1bafa:	bf00      	nop
   1bafc:	deadbeef 	.word	0xdeadbeef

0001bb00 <os_task_init>:

int
os_task_init(struct os_task *t, const char *name, os_task_func_t func,
        void *arg, uint8_t prio, os_time_t sanity_itvl,
        os_stack_t *stack_bottom, uint16_t stack_size)
{
   1bb00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bb04:	4604      	mov	r4, r0
   1bb06:	460f      	mov	r7, r1
   1bb08:	4690      	mov	r8, r2
   1bb0a:	461d      	mov	r5, r3
   1bb0c:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    struct os_sanity_check *sc;
    int rc;
    struct os_task *task;

    memset(t, 0, sizeof(*t));
   1bb10:	2250      	movs	r2, #80	; 0x50
   1bb12:	2100      	movs	r1, #0
   1bb14:	f000 fa99 	bl	1c04a <memset>

    t->t_func = func;
   1bb18:	f8c4 8014 	str.w	r8, [r4, #20]
    t->t_arg = arg;
   1bb1c:	61a5      	str	r5, [r4, #24]
    OS_ENTER_CRITICAL(sr);
   1bb1e:	f000 f927 	bl	1bd70 <os_arch_save_sr>
    rc = g_task_id;
   1bb22:	4b2b      	ldr	r3, [pc, #172]	; (1bbd0 <os_task_init+0xd0>)
   1bb24:	781d      	ldrb	r5, [r3, #0]
    g_task_id++;
   1bb26:	1c6a      	adds	r2, r5, #1
   1bb28:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   1bb2a:	f000 f927 	bl	1bd7c <os_arch_restore_sr>

    t->t_taskid = os_task_next_id();
   1bb2e:	72a5      	strb	r5, [r4, #10]
    t->t_prio = prio;
   1bb30:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1bb34:	72e3      	strb	r3, [r4, #11]

    t->t_state = OS_TASK_READY;
   1bb36:	2301      	movs	r3, #1
   1bb38:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
   1bb3a:	6127      	str	r7, [r4, #16]
    t->t_next_wakeup = 0;
   1bb3c:	2300      	movs	r3, #0
   1bb3e:	6363      	str	r3, [r4, #52]	; 0x34

    rc = os_sanity_check_init(&t->t_sanity_check);
   1bb40:	f104 0720 	add.w	r7, r4, #32
   1bb44:	4638      	mov	r0, r7
   1bb46:	f7ff fda3 	bl	1b690 <os_sanity_check_init>
    if (rc != OS_OK) {
   1bb4a:	4605      	mov	r5, r0
   1bb4c:	2800      	cmp	r0, #0
   1bb4e:	d132      	bne.n	1bbb6 <os_task_init+0xb6>
        goto err;
    }

    if (sanity_itvl != OS_WAIT_FOREVER) {
   1bb50:	9b07      	ldr	r3, [sp, #28]
   1bb52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1bb56:	d005      	beq.n	1bb64 <os_task_init+0x64>
        sc = (struct os_sanity_check *) &t->t_sanity_check;
        sc->sc_checkin_itvl = sanity_itvl;
   1bb58:	6263      	str	r3, [r4, #36]	; 0x24

        rc = os_sanity_check_register(sc);
   1bb5a:	4638      	mov	r0, r7
   1bb5c:	f7ff fda0 	bl	1b6a0 <os_sanity_check_register>
        if (rc != OS_OK) {
   1bb60:	4605      	mov	r5, r0
   1bb62:	bb40      	cbnz	r0, 1bbb6 <os_task_init+0xb6>
            goto err;
        }
    }

    _clear_stack(stack_bottom, stack_size);
   1bb64:	4631      	mov	r1, r6
   1bb66:	9808      	ldr	r0, [sp, #32]
   1bb68:	f7ff ffbe 	bl	1bae8 <_clear_stack>
    t->t_stacktop = &stack_bottom[stack_size];
   1bb6c:	9b08      	ldr	r3, [sp, #32]
   1bb6e:	eb03 0186 	add.w	r1, r3, r6, lsl #2
   1bb72:	6061      	str	r1, [r4, #4]
    t->t_stacksize = stack_size;
   1bb74:	8126      	strh	r6, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
   1bb76:	4632      	mov	r2, r6
   1bb78:	4620      	mov	r0, r4
   1bb7a:	f000 f907 	bl	1bd8c <os_arch_task_stack_init>
   1bb7e:	6020      	str	r0, [r4, #0]
            t->t_stacksize);

    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1bb80:	4b14      	ldr	r3, [pc, #80]	; (1bbd4 <os_task_init+0xd4>)
   1bb82:	681b      	ldr	r3, [r3, #0]
   1bb84:	b15b      	cbz	r3, 1bb9e <os_task_init+0x9e>
        assert(t->t_prio != task->t_prio);
   1bb86:	7ae1      	ldrb	r1, [r4, #11]
   1bb88:	7ada      	ldrb	r2, [r3, #11]
   1bb8a:	4291      	cmp	r1, r2
   1bb8c:	d001      	beq.n	1bb92 <os_task_init+0x92>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1bb8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bb90:	e7f8      	b.n	1bb84 <os_task_init+0x84>
        assert(t->t_prio != task->t_prio);
   1bb92:	2300      	movs	r3, #0
   1bb94:	461a      	mov	r2, r3
   1bb96:	4619      	mov	r1, r3
   1bb98:	4618      	mov	r0, r3
   1bb9a:	f7fe fe53 	bl	1a844 <__assert_func>
    }

    /* insert this task into the task list */
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
   1bb9e:	6423      	str	r3, [r4, #64]	; 0x40
   1bba0:	4b0c      	ldr	r3, [pc, #48]	; (1bbd4 <os_task_init+0xd4>)
   1bba2:	685a      	ldr	r2, [r3, #4]
   1bba4:	6014      	str	r4, [r2, #0]
   1bba6:	f104 0240 	add.w	r2, r4, #64	; 0x40
   1bbaa:	605a      	str	r2, [r3, #4]

    /* insert this task into the scheduler list */
    rc = os_sched_insert(t);
   1bbac:	4620      	mov	r0, r4
   1bbae:	f7ff fdc7 	bl	1b740 <os_sched_insert>
   1bbb2:	4605      	mov	r5, r0
    if (rc != OS_OK) {
   1bbb4:	b110      	cbz	r0, 1bbbc <os_task_init+0xbc>
    }

    return (0);
err:
    return (rc);
}
   1bbb6:	4628      	mov	r0, r5
   1bbb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (os_started()) {
   1bbbc:	f7fe fefc 	bl	1a9b8 <os_started>
   1bbc0:	b908      	cbnz	r0, 1bbc6 <os_task_init+0xc6>
    return (0);
   1bbc2:	4605      	mov	r5, r0
   1bbc4:	e7f7      	b.n	1bbb6 <os_task_init+0xb6>
        os_sched(NULL);
   1bbc6:	2000      	movs	r0, #0
   1bbc8:	f7ff fed0 	bl	1b96c <os_sched>
   1bbcc:	e7f3      	b.n	1bbb6 <os_task_init+0xb6>
   1bbce:	bf00      	nop
   1bbd0:	2000deb4 	.word	0x2000deb4
   1bbd4:	2000deb8 	.word	0x2000deb8

0001bbd8 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
   1bbd8:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
   1bbdc:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
   1bbde:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
   1bbe2:	e9d1 4500 	ldrd	r4, r5, [r1]
   1bbe6:	eb14 0b03 	adds.w	fp, r4, r3
   1bbea:	f145 0c00 	adc.w	ip, r5, #0
   1bbee:	e9c2 bc00 	strd	fp, ip, [r2]
   1bbf2:	688b      	ldr	r3, [r1, #8]
   1bbf4:	f641 6184 	movw	r1, #7812	; 0x1e84
   1bbf8:	fb01 3000 	mla	r0, r1, r0, r3
   1bbfc:	6090      	str	r0, [r2, #8]
   1bbfe:	4b08      	ldr	r3, [pc, #32]	; (1bc20 <os_deltatime+0x48>)
   1bc00:	4298      	cmp	r0, r3
   1bc02:	dd0a      	ble.n	1bc1a <os_deltatime+0x42>
   1bc04:	f11b 0401 	adds.w	r4, fp, #1
   1bc08:	f14c 0500 	adc.w	r5, ip, #0
   1bc0c:	e9c2 4500 	strd	r4, r5, [r2]
   1bc10:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
   1bc14:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
   1bc18:	6090      	str	r0, [r2, #8]
}
   1bc1a:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1bc1e:	4770      	bx	lr
   1bc20:	000f423f 	.word	0x000f423f

0001bc24 <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
   1bc24:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
   1bc26:	1e04      	subs	r4, r0, #0
   1bc28:	db0d      	blt.n	1bc46 <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
   1bc2a:	f000 f8a1 	bl	1bd70 <os_arch_save_sr>
   1bc2e:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
   1bc30:	4a11      	ldr	r2, [pc, #68]	; (1bc78 <os_time_tick+0x54>)
   1bc32:	6813      	ldr	r3, [r2, #0]
    g_os_time += ticks;
   1bc34:	18e0      	adds	r0, r4, r3
   1bc36:	6010      	str	r0, [r2, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
   1bc38:	ea90 0f03 	teq	r0, r3
   1bc3c:	d409      	bmi.n	1bc52 <os_time_tick+0x2e>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
   1bc3e:	4628      	mov	r0, r5
   1bc40:	f000 f89c 	bl	1bd7c <os_arch_restore_sr>
}
   1bc44:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
   1bc46:	2300      	movs	r3, #0
   1bc48:	461a      	mov	r2, r3
   1bc4a:	4619      	mov	r1, r3
   1bc4c:	4618      	mov	r0, r3
   1bc4e:	f7fe fdf9 	bl	1a844 <__assert_func>
        delta = g_os_time - basetod.ostime;
   1bc52:	4e0a      	ldr	r6, [pc, #40]	; (1bc7c <os_time_tick+0x58>)
   1bc54:	4631      	mov	r1, r6
   1bc56:	f851 4b08 	ldr.w	r4, [r1], #8
   1bc5a:	1b04      	subs	r4, r0, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
   1bc5c:	460a      	mov	r2, r1
   1bc5e:	4620      	mov	r0, r4
   1bc60:	f7ff ffba 	bl	1bbd8 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
   1bc64:	f106 0118 	add.w	r1, r6, #24
   1bc68:	460a      	mov	r2, r1
   1bc6a:	4620      	mov	r0, r4
   1bc6c:	f7ff ffb4 	bl	1bbd8 <os_deltatime>
        basetod.ostime = g_os_time;
   1bc70:	4b01      	ldr	r3, [pc, #4]	; (1bc78 <os_time_tick+0x54>)
   1bc72:	681b      	ldr	r3, [r3, #0]
   1bc74:	6033      	str	r3, [r6, #0]
   1bc76:	e7e2      	b.n	1bc3e <os_time_tick+0x1a>
   1bc78:	2000dec0 	.word	0x2000dec0
   1bc7c:	2000d9b8 	.word	0x2000d9b8

0001bc80 <os_time_get>:
}
   1bc80:	4b01      	ldr	r3, [pc, #4]	; (1bc88 <os_time_get+0x8>)
   1bc82:	6818      	ldr	r0, [r3, #0]
   1bc84:	4770      	bx	lr
   1bc86:	bf00      	nop
   1bc88:	2000dec0 	.word	0x2000dec0

0001bc8c <os_time_advance>:

void
os_time_advance(int ticks)
{
   1bc8c:	b510      	push	{r4, lr}
    assert(ticks >= 0);
   1bc8e:	1e04      	subs	r4, r0, #0
   1bc90:	db09      	blt.n	1bca6 <os_time_advance+0x1a>

    if (ticks > 0) {
   1bc92:	2c00      	cmp	r4, #0
   1bc94:	dd06      	ble.n	1bca4 <os_time_advance+0x18>
        if (!os_started()) {
   1bc96:	f7fe fe8f 	bl	1a9b8 <os_started>
   1bc9a:	b950      	cbnz	r0, 1bcb2 <os_time_advance+0x26>
            g_os_time += ticks;
   1bc9c:	4a0a      	ldr	r2, [pc, #40]	; (1bcc8 <os_time_advance+0x3c>)
   1bc9e:	6813      	ldr	r3, [r2, #0]
   1bca0:	441c      	add	r4, r3
   1bca2:	6014      	str	r4, [r2, #0]
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
   1bca4:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
   1bca6:	2300      	movs	r3, #0
   1bca8:	461a      	mov	r2, r3
   1bcaa:	4619      	mov	r1, r3
   1bcac:	4618      	mov	r0, r3
   1bcae:	f7fe fdc9 	bl	1a844 <__assert_func>
            os_time_tick(ticks);
   1bcb2:	4620      	mov	r0, r4
   1bcb4:	f7ff ffb6 	bl	1bc24 <os_time_tick>
            os_callout_tick();
   1bcb8:	f7fe ffa6 	bl	1ac08 <os_callout_tick>
            os_sched_os_timer_exp();
   1bcbc:	f7ff fe12 	bl	1b8e4 <os_sched_os_timer_exp>
            os_sched(NULL);
   1bcc0:	2000      	movs	r0, #0
   1bcc2:	f7ff fe53 	bl	1b96c <os_sched>
}
   1bcc6:	e7ed      	b.n	1bca4 <os_time_advance+0x18>
   1bcc8:	2000dec0 	.word	0x2000dec0

0001bccc <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
   1bccc:	b900      	cbnz	r0, 1bcd0 <os_time_delay+0x4>
   1bcce:	4770      	bx	lr
{
   1bcd0:	b538      	push	{r3, r4, r5, lr}
   1bcd2:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   1bcd4:	f000 f84c 	bl	1bd70 <os_arch_save_sr>
   1bcd8:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
   1bcda:	f7ff fd73 	bl	1b7c4 <os_sched_get_current_task>
   1bcde:	4621      	mov	r1, r4
   1bce0:	f7ff fd7c 	bl	1b7dc <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
   1bce4:	4628      	mov	r0, r5
   1bce6:	f000 f849 	bl	1bd7c <os_arch_restore_sr>
        os_sched(NULL);
   1bcea:	2000      	movs	r0, #0
   1bcec:	f7ff fe3e 	bl	1b96c <os_sched>
    }
}
   1bcf0:	bd38      	pop	{r3, r4, r5, pc}
	...

0001bcf4 <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
   1bcf4:	b570      	push	{r4, r5, r6, lr}
   1bcf6:	4605      	mov	r5, r0
   1bcf8:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
   1bcfa:	f000 f839 	bl	1bd70 <os_arch_save_sr>
   1bcfe:	4606      	mov	r6, r0
    if (tv != NULL) {
   1bd00:	b145      	cbz	r5, 1bd14 <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
   1bd02:	f7ff ffbd 	bl	1bc80 <os_time_get>
   1bd06:	4908      	ldr	r1, [pc, #32]	; (1bd28 <os_gettimeofday+0x34>)
   1bd08:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
   1bd0c:	462a      	mov	r2, r5
   1bd0e:	1ac0      	subs	r0, r0, r3
   1bd10:	f7ff ff62 	bl	1bbd8 <os_deltatime>
    }

    if (tz != NULL) {
   1bd14:	b114      	cbz	r4, 1bd1c <os_gettimeofday+0x28>
        *tz = basetod.timezone;
   1bd16:	4b04      	ldr	r3, [pc, #16]	; (1bd28 <os_gettimeofday+0x34>)
   1bd18:	6a98      	ldr	r0, [r3, #40]	; 0x28
   1bd1a:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
   1bd1c:	4630      	mov	r0, r6
   1bd1e:	f000 f82d 	bl	1bd7c <os_arch_restore_sr>

    return (0);
}
   1bd22:	2000      	movs	r0, #0
   1bd24:	bd70      	pop	{r4, r5, r6, pc}
   1bd26:	bf00      	nop
   1bd28:	2000d9b8 	.word	0x2000d9b8

0001bd2c <os_time_ms_to_ticks>:
  return (tv.tv_sec * 1000000 + tv.tv_usec);
}

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
   1bd2c:	b538      	push	{r3, r4, r5, lr}
   1bd2e:	4604      	mov	r4, r0
   1bd30:	460d      	mov	r5, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
   1bd32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bd36:	2300      	movs	r3, #0
   1bd38:	01c0      	lsls	r0, r0, #7
   1bd3a:	0e61      	lsrs	r1, r4, #25
   1bd3c:	f002 f88a 	bl	1de54 <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
   1bd40:	2901      	cmp	r1, #1
   1bd42:	bf08      	it	eq
   1bd44:	2800      	cmpeq	r0, #0
   1bd46:	d202      	bcs.n	1bd4e <os_time_ms_to_ticks+0x22>
        return OS_EINVAL;
    }

    *out_ticks = ticks;
   1bd48:	6028      	str	r0, [r5, #0]
    return 0;
   1bd4a:	2000      	movs	r0, #0
}
   1bd4c:	bd38      	pop	{r3, r4, r5, pc}
        return OS_EINVAL;
   1bd4e:	2002      	movs	r0, #2
   1bd50:	e7fc      	b.n	1bd4c <os_time_ms_to_ticks+0x20>

0001bd52 <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
   1bd52:	b508      	push	{r3, lr}
    os_time_advance(1);
   1bd54:	2001      	movs	r0, #1
   1bd56:	f7ff ff99 	bl	1bc8c <os_time_advance>
}
   1bd5a:	bd08      	pop	{r3, pc}

0001bd5c <os_arch_ctx_sw>:

void
os_arch_ctx_sw(struct os_task *t)
{
   1bd5c:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
   1bd5e:	f7ff fd19 	bl	1b794 <os_sched_ctx_sw_hook>

    /* Set PendSV interrupt pending bit to force context switch */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
   1bd62:	4b02      	ldr	r3, [pc, #8]	; (1bd6c <os_arch_ctx_sw+0x10>)
   1bd64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1bd68:	605a      	str	r2, [r3, #4]
}
   1bd6a:	bd08      	pop	{r3, pc}
   1bd6c:	e000ed00 	.word	0xe000ed00

0001bd70 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1bd70:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1bd74:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
   1bd76:	f000 0001 	and.w	r0, r0, #1
   1bd7a:	4770      	bx	lr

0001bd7c <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
   1bd7c:	b900      	cbnz	r0, 1bd80 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
   1bd7e:	b662      	cpsie	i
        __enable_irq();
    }
}
   1bd80:	4770      	bx	lr

0001bd82 <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1bd82:	f3ef 8010 	mrs	r0, PRIMASK
{
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    return (isr_ctx & 1);
}
   1bd86:	f000 0001 	and.w	r0, r0, #1
   1bd8a:	4770      	bx	lr

0001bd8c <os_arch_task_stack_init>:

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
   1bd8c:	b570      	push	{r4, r5, r6, lr}
   1bd8e:	4606      	mov	r6, r0
   1bd90:	460d      	mov	r5, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
   1bd92:	f1a1 0444 	sub.w	r4, r1, #68	; 0x44

    /* Zero out R1-R3, R12, LR */
    for (i = 9; i < 14; ++i) {
   1bd96:	2309      	movs	r3, #9
   1bd98:	e003      	b.n	1bda2 <os_arch_task_stack_init+0x16>
        s[i] = 0;
   1bd9a:	2200      	movs	r2, #0
   1bd9c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (i = 9; i < 14; ++i) {
   1bda0:	3301      	adds	r3, #1
   1bda2:	2b0d      	cmp	r3, #13
   1bda4:	ddf9      	ble.n	1bd9a <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
   1bda6:	4620      	mov	r0, r4
   1bda8:	f000 f8b6 	bl	1bf18 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
   1bdac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1bdb0:	f845 3c04 	str.w	r3, [r5, #-4]
    sf->pc = (uint32_t)t->t_func;
   1bdb4:	6973      	ldr	r3, [r6, #20]
   1bdb6:	f845 3c08 	str.w	r3, [r5, #-8]
    sf->r0 = (uint32_t)t->t_arg;
   1bdba:	69b3      	ldr	r3, [r6, #24]
   1bdbc:	f845 3c20 	str.w	r3, [r5, #-32]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
   1bdc0:	f06f 0302 	mvn.w	r3, #2
   1bdc4:	f845 3c24 	str.w	r3, [r5, #-36]
#endif

    return (s);
}
   1bdc8:	4620      	mov	r0, r4
   1bdca:	bd70      	pop	{r4, r5, r6, pc}

0001bdcc <os_arch_init>:

void
os_arch_init(void)
{
   1bdcc:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1bdce:	4a04      	ldr	r2, [pc, #16]	; (1bde0 <os_arch_init+0x14>)
   1bdd0:	6953      	ldr	r3, [r2, #20]
   1bdd2:	f043 0310 	orr.w	r3, r3, #16
   1bdd6:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
   1bdd8:	f7fe fdf4 	bl	1a9c4 <os_init_idle_task>
}
   1bddc:	bd08      	pop	{r3, pc}
   1bdde:	bf00      	nop
   1bde0:	e000ed00 	.word	0xe000ed00

0001bde4 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
   1bde4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1bde6:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1bdea:	b90c      	cbnz	r4, 1bdf0 <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1bdec:	2400      	movs	r4, #0
   1bdee:	e009      	b.n	1be04 <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
   1bdf0:	2007      	movs	r0, #7
   1bdf2:	e02e      	b.n	1be52 <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
   1bdf4:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
   1bdf8:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
   1bdfc:	26ff      	movs	r6, #255	; 0xff
   1bdfe:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1be02:	3401      	adds	r4, #1
   1be04:	2cef      	cmp	r4, #239	; 0xef
   1be06:	d9f5      	bls.n	1bdf4 <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   1be08:	f06f 040d 	mvn.w	r4, #13
   1be0c:	e007      	b.n	1be1e <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
   1be0e:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1be10:	4e12      	ldr	r6, [pc, #72]	; (1be5c <os_arch_os_init+0x78>)
   1be12:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1be14:	3510      	adds	r5, #16
   1be16:	4f12      	ldr	r7, [pc, #72]	; (1be60 <os_arch_os_init+0x7c>)
   1be18:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
   1be1c:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   1be1e:	2c25      	cmp	r4, #37	; 0x25
   1be20:	ddf5      	ble.n	1be0e <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1be22:	4c0e      	ldr	r4, [pc, #56]	; (1be5c <os_arch_os_init+0x78>)
   1be24:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1be26:	4e0f      	ldr	r6, [pc, #60]	; (1be64 <os_arch_os_init+0x80>)
   1be28:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1be2a:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1be2c:	4e0e      	ldr	r6, [pc, #56]	; (1be68 <os_arch_os_init+0x84>)
   1be2e:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1be30:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1be32:	4e0e      	ldr	r6, [pc, #56]	; (1be6c <os_arch_os_init+0x88>)
   1be34:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1be36:	25e0      	movs	r5, #224	; 0xe0
   1be38:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
   1be3c:	2520      	movs	r5, #32
   1be3e:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1be40:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
   1be44:	f014 0f01 	tst.w	r4, #1
   1be48:	d004      	beq.n	1be54 <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
   1be4a:	f8df c024 	ldr.w	ip, [pc, #36]	; 1be70 <os_arch_os_init+0x8c>
   1be4e:	df00      	svc	0
        err = OS_OK;
   1be50:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
   1be52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
   1be54:	f7ff ffba 	bl	1bdcc <os_arch_init>
        err = OS_OK;
   1be58:	2000      	movs	r0, #0
   1be5a:	e7fa      	b.n	1be52 <os_arch_os_init+0x6e>
   1be5c:	e000ed00 	.word	0xe000ed00
   1be60:	0001bfb7 	.word	0x0001bfb7
   1be64:	0001bf1f 	.word	0x0001bf1f
   1be68:	0001bf65 	.word	0x0001bf65
   1be6c:	0001bfab 	.word	0x0001bfab
   1be70:	0001bdcd 	.word	0x0001bdcd

0001be74 <os_arch_start>:

uint32_t
os_arch_start(void)
{
   1be74:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
   1be76:	f7ff fd73 	bl	1b960 <os_sched_next_task>
   1be7a:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
   1be7c:	f7ff fca8 	bl	1b7d0 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
   1be80:	6823      	ldr	r3, [r4, #0]
   1be82:	3324      	adds	r3, #36	; 0x24
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1be84:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
   1be88:	2106      	movs	r1, #6
   1be8a:	2080      	movs	r0, #128	; 0x80
   1be8c:	f000 fde8 	bl	1ca60 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
   1be90:	4b03      	ldr	r3, [pc, #12]	; (1bea0 <os_arch_start+0x2c>)
   1be92:	2201      	movs	r2, #1
   1be94:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
   1be96:	4620      	mov	r0, r4
   1be98:	f7ff ff60 	bl	1bd5c <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
   1be9c:	69a0      	ldr	r0, [r4, #24]
   1be9e:	bd10      	pop	{r4, pc}
   1bea0:	2000de88 	.word	0x2000de88

0001bea4 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
   1bea4:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
   1bea6:	4814      	ldr	r0, [pc, #80]	; (1bef8 <os_arch_os_start+0x54>)
   1bea8:	6800      	ldr	r0, [r0, #0]
   1beaa:	3804      	subs	r0, #4
   1beac:	f000 f82a 	bl	1bf04 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1beb0:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1beb4:	b9d4      	cbnz	r4, 1beec <os_arch_os_start+0x48>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1beb6:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
   1beba:	f004 0403 	and.w	r4, r4, #3
   1bebe:	2c03      	cmp	r4, #3
   1bec0:	d808      	bhi.n	1bed4 <os_arch_os_start+0x30>
   1bec2:	e8df f004 	tbb	[pc, r4]
   1bec6:	1515      	.short	0x1515
   1bec8:	0c02      	.short	0x0c02
        case 0x02:
            /*
             * We are running in Privileged Thread mode w/SP = PSP but we
             * are supposed to be un-privileged.
             */
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
   1beca:	4c0c      	ldr	r4, [pc, #48]	; (1befc <os_arch_os_start+0x58>)
   1becc:	6824      	ldr	r4, [r4, #0]
   1bece:	f014 0f01 	tst.w	r4, #1
   1bed2:	d10f      	bne.n	1bef4 <os_arch_os_start+0x50>
    SVC_Call(os_arch_start);
   1bed4:	f8df c028 	ldr.w	ip, [pc, #40]	; 1bf00 <os_arch_os_start+0x5c>
   1bed8:	df00      	svc	0
   1beda:	2000      	movs	r0, #0
            svc_os_arch_start();
        }
    }

    return err;
}
   1bedc:	bd10      	pop	{r4, pc}
            if  ((os_flags & 1) == OS_RUN_PRIV) {
   1bede:	4c07      	ldr	r4, [pc, #28]	; (1befc <os_arch_os_start+0x58>)
   1bee0:	6824      	ldr	r4, [r4, #0]
   1bee2:	f014 0f01 	tst.w	r4, #1
   1bee6:	d1f5      	bne.n	1bed4 <os_arch_os_start+0x30>
                err = OS_ERR_PRIV;
   1bee8:	2008      	movs	r0, #8
   1beea:	e7f7      	b.n	1bedc <os_arch_os_start+0x38>
    err = OS_ERR_IN_ISR;
   1beec:	2007      	movs	r0, #7
   1beee:	e7f5      	b.n	1bedc <os_arch_os_start+0x38>
            err = OS_ERR_PRIV;
   1bef0:	2008      	movs	r0, #8
   1bef2:	e7f3      	b.n	1bedc <os_arch_os_start+0x38>
                err = OS_ERR_PRIV;
   1bef4:	2008      	movs	r0, #8
   1bef6:	e7f1      	b.n	1bedc <os_arch_os_start+0x38>
   1bef8:	2000dde8 	.word	0x2000dde8
   1befc:	2000d9e8 	.word	0x2000d9e8
   1bf00:	0001be75 	.word	0x0001be75

0001bf04 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
   1bf04:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
   1bf08:	4832      	ldr	r0, [pc, #200]	; (1bfd4 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
   1bf0a:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
   1bf0c:	3002      	adds	r0, #2
        MSR     CONTROL,R0
   1bf0e:	f380 8814 	msr	CONTROL, r0
        ISB
   1bf12:	f3bf 8f6f 	isb	sy
        BX      LR
   1bf16:	4770      	bx	lr

0001bf18 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
   1bf18:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
   1bf1c:	4770      	bx	lr

0001bf1e <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
   1bf1e:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
   1bf22:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
   1bf24:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
   1bf28:	b951      	cbnz	r1, 1bf40 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   1bf2a:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1bf2e:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
   1bf30:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1bf32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
   1bf36:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
   1bf3a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
   1bf3e:	4770      	bx	lr

0001bf40 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1bf40:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
   1bf42:	4a25      	ldr	r2, [pc, #148]	; (1bfd8 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
   1bf44:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
   1bf46:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
   1bf48:	d809      	bhi.n	1bf5e <SVC_Done>

        LDR     R4,=SVC_Table-4
   1bf4a:	4c24      	ldr	r4, [pc, #144]	; (1bfdc <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
   1bf4c:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   1bf50:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
   1bf54:	47a0      	blx	r4

        MRS     R12,PSP
   1bf56:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
   1bf5a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

0001bf5e <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1bf5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
   1bf62:	4770      	bx	lr

0001bf64 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   1bf64:	4b1e      	ldr	r3, [pc, #120]	; (1bfe0 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
   1bf66:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
   1bf68:	4b1e      	ldr	r3, [pc, #120]	; (1bfe4 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
   1bf6a:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
   1bf6c:	4291      	cmp	r1, r2
        IT      EQ
   1bf6e:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
   1bf70:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
   1bf72:	f3ef 8c09 	mrs	ip, PSP
#if MYNEWT_VAL(HARDFLOAT)
        TST     LR,#0x10                /* is it extended frame? */
   1bf76:	f01e 0f10 	tst.w	lr, #16
        IT      EQ
   1bf7a:	bf08      	it	eq
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
   1bf7c:	ed2c 8a10 	vstmdbeq	ip!, {s16-s31}
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
   1bf80:	e92c 4ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
   1bf84:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
   1bf88:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
   1bf8a:	f8d2 c000 	ldr.w	ip, [r2]
#if MYNEWT_VAL(HARDFLOAT)
        LDMIA   R12!,{R4-R11,LR}        /* Restore New Context */
   1bf8e:	e8bc 4ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        TST     LR,#0x10                /* is it extended frame? */
   1bf92:	f01e 0f10 	tst.w	lr, #16
        ITTE    EQ
   1bf96:	bf06      	itte	eq
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
   1bf98:	ecbc 8a10 	vldmiaeq	ip!, {s16-s31}
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
   1bf9c:	f06f 0e12 	mvneq.w	lr, #18
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
   1bfa0:	f06f 0e02 	mvnne.w	lr, #2
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
#endif
        MSR     PSP,R12                 /* Write PSP */
   1bfa4:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
   1bfa8:	4770      	bx	lr

0001bfaa <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1bfaa:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
   1bfac:	f7ff fed1 	bl	1bd52 <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1bfb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
   1bfb4:	4770      	bx	lr

0001bfb6 <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
   1bfb6:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
   1bfba:	bf0c      	ite	eq
        MRSEQ   R3,MSP
   1bfbc:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
   1bfc0:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
   1bfc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
   1bfc8:	4668      	mov	r0, sp
        BL      os_default_irq
   1bfca:	f7fe fc61 	bl	1a890 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
   1bfce:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
   1bfd2:	4770      	bx	lr
        LDR     R0,=os_flags
   1bfd4:	2000d9e8 	.word	0x2000d9e8
        LDR     R2,=SVC_Count
   1bfd8:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
   1bfdc:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   1bfe0:	20000114 	.word	0x20000114
        LDR     R3,=g_current_task      /* Get current task */
   1bfe4:	2000deb0 	.word	0x2000deb0

0001bfe8 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
   1bfe8:	b470      	push	{r4, r5, r6}
   1bfea:	f04f 0500 	mov.w	r5, #0
   1bfee:	f022 0603 	bic.w	r6, r2, #3
   1bff2:	e005      	b.n	1c000 <test1>

0001bff4 <loop1>:
   1bff4:	5943      	ldr	r3, [r0, r5]
   1bff6:	594c      	ldr	r4, [r1, r5]
   1bff8:	42a3      	cmp	r3, r4
   1bffa:	d104      	bne.n	1c006 <res1>
   1bffc:	f105 0504 	add.w	r5, r5, #4

0001c000 <test1>:
   1c000:	42b5      	cmp	r5, r6
   1c002:	d1f7      	bne.n	1bff4 <loop1>
   1c004:	e00d      	b.n	1c022 <test2>

0001c006 <res1>:
   1c006:	ba1b      	rev	r3, r3
   1c008:	ba24      	rev	r4, r4
   1c00a:	1b1b      	subs	r3, r3, r4
   1c00c:	bf8c      	ite	hi
   1c00e:	2301      	movhi	r3, #1
   1c010:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
   1c014:	e009      	b.n	1c02a <done>

0001c016 <loop2>:
   1c016:	5d43      	ldrb	r3, [r0, r5]
   1c018:	5d4c      	ldrb	r4, [r1, r5]
   1c01a:	1b1b      	subs	r3, r3, r4
   1c01c:	d105      	bne.n	1c02a <done>
   1c01e:	f105 0501 	add.w	r5, r5, #1

0001c022 <test2>:
   1c022:	4295      	cmp	r5, r2
   1c024:	d1f7      	bne.n	1c016 <loop2>
   1c026:	f04f 0300 	mov.w	r3, #0

0001c02a <done>:
   1c02a:	4618      	mov	r0, r3
   1c02c:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
   1c02e:	4770      	bx	lr

0001c030 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   1c030:	e001      	b.n	1c036 <test1>

0001c032 <loop1>:
   1c032:	588b      	ldr	r3, [r1, r2]
   1c034:	5083      	str	r3, [r0, r2]

0001c036 <test1>:
   1c036:	3a04      	subs	r2, #4
   1c038:	d5fb      	bpl.n	1c032 <loop1>
   1c03a:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   1c03e:	e001      	b.n	1c044 <test2>

0001c040 <loop2>:
   1c040:	5c8b      	ldrb	r3, [r1, r2]
   1c042:	5483      	strb	r3, [r0, r2]

0001c044 <test2>:
   1c044:	3a01      	subs	r2, #1
   1c046:	d5fb      	bpl.n	1c040 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   1c048:	4770      	bx	lr

0001c04a <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   1c04a:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   1c04c:	4605      	mov	r5, r0
   1c04e:	b2c9      	uxtb	r1, r1
   1c050:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1c054:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1c058:	18ab      	adds	r3, r5, r2
   1c05a:	2403      	movs	r4, #3
   1c05c:	4023      	ands	r3, r4
   1c05e:	1ad3      	subs	r3, r2, r3
   1c060:	d40b      	bmi.n	1c07a <memset+0x30>
   1c062:	e001      	b.n	1c068 <memset+0x1e>
   1c064:	3a01      	subs	r2, #1
   1c066:	54a9      	strb	r1, [r5, r2]
   1c068:	429a      	cmp	r2, r3
   1c06a:	d1fb      	bne.n	1c064 <memset+0x1a>
   1c06c:	e000      	b.n	1c070 <memset+0x26>
   1c06e:	50a9      	str	r1, [r5, r2]
   1c070:	3a04      	subs	r2, #4
   1c072:	d5fc      	bpl.n	1c06e <memset+0x24>
   1c074:	3204      	adds	r2, #4
   1c076:	e000      	b.n	1c07a <memset+0x30>
   1c078:	54a9      	strb	r1, [r5, r2]
   1c07a:	3a01      	subs	r2, #1
   1c07c:	d5fc      	bpl.n	1c078 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
   1c07e:	bc30      	pop	{r4, r5}
   1c080:	4770      	bx	lr

0001c082 <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
   1c082:	b430      	push	{r4, r5}
   1c084:	4602      	mov	r2, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
   1c086:	1c55      	adds	r5, r2, #1
   1c088:	7813      	ldrb	r3, [r2, #0]
   1c08a:	1c4c      	adds	r4, r1, #1
   1c08c:	7808      	ldrb	r0, [r1, #0]
		if (d || !ch)
   1c08e:	1a18      	subs	r0, r3, r0
   1c090:	d103      	bne.n	1c09a <strcmp+0x18>
		d = (int)(ch = *c1++) - (int)*c2++;
   1c092:	462a      	mov	r2, r5
   1c094:	4621      	mov	r1, r4
		if (d || !ch)
   1c096:	2b00      	cmp	r3, #0
   1c098:	d1f5      	bne.n	1c086 <strcmp+0x4>
			break;
	}

	return d;
}
   1c09a:	bc30      	pop	{r4, r5}
   1c09c:	4770      	bx	lr

0001c09e <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
   1c09e:	4603      	mov	r3, r0
	while (*ss)
   1c0a0:	e000      	b.n	1c0a4 <strlen+0x6>
		ss++;
   1c0a2:	3301      	adds	r3, #1
	while (*ss)
   1c0a4:	781a      	ldrb	r2, [r3, #0]
   1c0a6:	2a00      	cmp	r2, #0
   1c0a8:	d1fb      	bne.n	1c0a2 <strlen+0x4>
	return ss - s;
}
   1c0aa:	1a18      	subs	r0, r3, r0
   1c0ac:	4770      	bx	lr

0001c0ae <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
   1c0ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c0b2:	b082      	sub	sp, #8
   1c0b4:	e9cd 0100 	strd	r0, r1, [sp]
   1c0b8:	4691      	mov	r9, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
   1c0ba:	f8d2 8004 	ldr.w	r8, [r2, #4]
    unsigned long long int d = 1;
   1c0be:	2401      	movs	r4, #1
   1c0c0:	2500      	movs	r5, #0
    while (num / d >= p->base)
   1c0c2:	e004      	b.n	1c0ce <ui2a+0x20>
        d *= p->base;
   1c0c4:	fb06 f305 	mul.w	r3, r6, r5
   1c0c8:	fba4 4506 	umull	r4, r5, r4, r6
   1c0cc:	441d      	add	r5, r3
    while (num / d >= p->base)
   1c0ce:	4622      	mov	r2, r4
   1c0d0:	462b      	mov	r3, r5
   1c0d2:	e9dd 0100 	ldrd	r0, r1, [sp]
   1c0d6:	f001 febd 	bl	1de54 <__aeabi_uldivmod>
   1c0da:	f899 6003 	ldrb.w	r6, [r9, #3]
   1c0de:	2700      	movs	r7, #0
   1c0e0:	42b9      	cmp	r1, r7
   1c0e2:	bf08      	it	eq
   1c0e4:	42b0      	cmpeq	r0, r6
   1c0e6:	d2ed      	bcs.n	1c0c4 <ui2a+0x16>
    int n = 0;
   1c0e8:	f04f 0a00 	mov.w	sl, #0
   1c0ec:	e007      	b.n	1c0fe <ui2a+0x50>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1c0ee:	2330      	movs	r3, #48	; 0x30
   1c0f0:	441e      	add	r6, r3
   1c0f2:	f888 6000 	strb.w	r6, [r8]
            ++n;
   1c0f6:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1c0fa:	f108 0801 	add.w	r8, r8, #1
    while (d != 0) {
   1c0fe:	ea54 0305 	orrs.w	r3, r4, r5
   1c102:	d02e      	beq.n	1c162 <ui2a+0xb4>
        unsigned long long  dgt = num / d;
   1c104:	4622      	mov	r2, r4
   1c106:	462b      	mov	r3, r5
   1c108:	e9dd 0100 	ldrd	r0, r1, [sp]
   1c10c:	f001 fea2 	bl	1de54 <__aeabi_uldivmod>
   1c110:	4606      	mov	r6, r0
   1c112:	460f      	mov	r7, r1
        num %= d;
   1c114:	4622      	mov	r2, r4
   1c116:	462b      	mov	r3, r5
   1c118:	e9dd 0100 	ldrd	r0, r1, [sp]
   1c11c:	f001 fe9a 	bl	1de54 <__aeabi_uldivmod>
   1c120:	e9cd 2300 	strd	r2, r3, [sp]
        d /= p->base;
   1c124:	f899 2003 	ldrb.w	r2, [r9, #3]
   1c128:	2300      	movs	r3, #0
   1c12a:	4620      	mov	r0, r4
   1c12c:	4629      	mov	r1, r5
   1c12e:	f001 fe91 	bl	1de54 <__aeabi_uldivmod>
   1c132:	4604      	mov	r4, r0
   1c134:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
   1c136:	f1ba 0f00 	cmp.w	sl, #0
   1c13a:	d105      	bne.n	1c148 <ui2a+0x9a>
   1c13c:	ea56 0307 	orrs.w	r3, r6, r7
   1c140:	d102      	bne.n	1c148 <ui2a+0x9a>
   1c142:	ea54 0305 	orrs.w	r3, r4, r5
   1c146:	d1da      	bne.n	1c0fe <ui2a+0x50>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1c148:	2f00      	cmp	r7, #0
   1c14a:	bf08      	it	eq
   1c14c:	2e0a      	cmpeq	r6, #10
   1c14e:	d3ce      	bcc.n	1c0ee <ui2a+0x40>
   1c150:	f899 3002 	ldrb.w	r3, [r9, #2]
   1c154:	f013 0f04 	tst.w	r3, #4
   1c158:	d001      	beq.n	1c15e <ui2a+0xb0>
   1c15a:	2337      	movs	r3, #55	; 0x37
   1c15c:	e7c8      	b.n	1c0f0 <ui2a+0x42>
   1c15e:	2357      	movs	r3, #87	; 0x57
   1c160:	e7c6      	b.n	1c0f0 <ui2a+0x42>
        }
    }
    *bf = 0;
   1c162:	2300      	movs	r3, #0
   1c164:	f888 3000 	strb.w	r3, [r8]
}
   1c168:	b002      	add	sp, #8
   1c16a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001c16e <i2a>:

static void i2a(long long int num, struct param *p)
{
   1c16e:	b508      	push	{r3, lr}
    if (num < 0) {
   1c170:	2800      	cmp	r0, #0
   1c172:	f171 0300 	sbcs.w	r3, r1, #0
   1c176:	db02      	blt.n	1c17e <i2a+0x10>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
   1c178:	f7ff ff99 	bl	1c0ae <ui2a>
}
   1c17c:	bd08      	pop	{r3, pc}
        num = -num;
   1c17e:	4240      	negs	r0, r0
   1c180:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
   1c184:	7893      	ldrb	r3, [r2, #2]
   1c186:	f043 0301 	orr.w	r3, r3, #1
   1c18a:	7093      	strb	r3, [r2, #2]
   1c18c:	e7f4      	b.n	1c178 <i2a+0xa>

0001c18e <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
   1c18e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1c192:	b2db      	uxtb	r3, r3
   1c194:	2b09      	cmp	r3, #9
   1c196:	d90b      	bls.n	1c1b0 <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
   1c198:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1c19c:	b2db      	uxtb	r3, r3
   1c19e:	2b05      	cmp	r3, #5
   1c1a0:	d908      	bls.n	1c1b4 <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
   1c1a2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1c1a6:	b2db      	uxtb	r3, r3
   1c1a8:	2b05      	cmp	r3, #5
   1c1aa:	d805      	bhi.n	1c1b8 <a2d+0x2a>
        return ch - 'A' + 10;
   1c1ac:	3837      	subs	r0, #55	; 0x37
   1c1ae:	4770      	bx	lr
        return ch - '0';
   1c1b0:	3830      	subs	r0, #48	; 0x30
   1c1b2:	4770      	bx	lr
        return ch - 'a' + 10;
   1c1b4:	3857      	subs	r0, #87	; 0x57
   1c1b6:	4770      	bx	lr
    else
        return -1;
   1c1b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1c1bc:	4770      	bx	lr

0001c1be <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
   1c1be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c1c2:	4605      	mov	r5, r0
   1c1c4:	4688      	mov	r8, r1
   1c1c6:	4617      	mov	r7, r2
   1c1c8:	4699      	mov	r9, r3
    const char *p = *src;
   1c1ca:	680c      	ldr	r4, [r1, #0]
    int num = 0;
   1c1cc:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
   1c1ce:	4628      	mov	r0, r5
   1c1d0:	f7ff ffdd 	bl	1c18e <a2d>
   1c1d4:	2800      	cmp	r0, #0
   1c1d6:	db06      	blt.n	1c1e6 <a2i+0x28>
        if (digit > base)
   1c1d8:	42b8      	cmp	r0, r7
   1c1da:	dc04      	bgt.n	1c1e6 <a2i+0x28>
            break;
        num = num * base + digit;
   1c1dc:	fb07 0606 	mla	r6, r7, r6, r0
        ch = *p++;
   1c1e0:	7825      	ldrb	r5, [r4, #0]
   1c1e2:	3401      	adds	r4, #1
   1c1e4:	e7f3      	b.n	1c1ce <a2i+0x10>
    }
    *src = p;
   1c1e6:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
   1c1ea:	f889 6000 	strb.w	r6, [r9]
    return ch;
}
   1c1ee:	4628      	mov	r0, r5
   1c1f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001c1f4 <putf>:

static int putf(FILE *putp, char c)
{
   1c1f4:	b500      	push	{lr}
   1c1f6:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
   1c1f8:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
   1c1fc:	6803      	ldr	r3, [r0, #0]
   1c1fe:	681b      	ldr	r3, [r3, #0]
   1c200:	b14b      	cbz	r3, 1c216 <putf+0x22>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   1c202:	2201      	movs	r2, #1
   1c204:	f10d 0107 	add.w	r1, sp, #7
   1c208:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
   1c20a:	2801      	cmp	r0, #1
   1c20c:	d005      	beq.n	1c21a <putf+0x26>
    if (fputc(c, putp) == EOF)
        return 0;
   1c20e:	2000      	movs	r0, #0
    else
        return 1;
}
   1c210:	b003      	add	sp, #12
   1c212:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
   1c216:	2000      	movs	r0, #0
   1c218:	e7fa      	b.n	1c210 <putf+0x1c>
        return 1;
   1c21a:	2001      	movs	r0, #1
   1c21c:	e7f8      	b.n	1c210 <putf+0x1c>
	...

0001c220 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
   1c220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c224:	4606      	mov	r6, r0
   1c226:	460f      	mov	r7, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
   1c228:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
   1c22a:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
   1c22c:	e001      	b.n	1c232 <putchw+0x12>
        n--;
   1c22e:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
   1c230:	4613      	mov	r3, r2
   1c232:	1c5a      	adds	r2, r3, #1
   1c234:	781b      	ldrb	r3, [r3, #0]
   1c236:	b10b      	cbz	r3, 1c23c <putchw+0x1c>
   1c238:	2c00      	cmp	r4, #0
   1c23a:	dcf8      	bgt.n	1c22e <putchw+0xe>
    if (p->sign)
   1c23c:	78bb      	ldrb	r3, [r7, #2]
   1c23e:	f013 0f01 	tst.w	r3, #1
   1c242:	d000      	beq.n	1c246 <putchw+0x26>
        n--;
   1c244:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
   1c246:	887b      	ldrh	r3, [r7, #2]
   1c248:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1c24c:	b29b      	uxth	r3, r3
   1c24e:	f241 0202 	movw	r2, #4098	; 0x1002
   1c252:	4293      	cmp	r3, r2
   1c254:	d01c      	beq.n	1c290 <putchw+0x70>
        n -= 2;
    else if (p->alt && p->base == 8)
   1c256:	f640 0202 	movw	r2, #2050	; 0x802
   1c25a:	4293      	cmp	r3, r2
   1c25c:	d01a      	beq.n	1c294 <putchw+0x74>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
   1c25e:	683b      	ldr	r3, [r7, #0]
   1c260:	4d35      	ldr	r5, [pc, #212]	; (1c338 <putchw+0x118>)
   1c262:	401d      	ands	r5, r3
   1c264:	b1f5      	cbz	r5, 1c2a4 <putchw+0x84>
    unsigned written = 0;
   1c266:	2500      	movs	r5, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
   1c268:	78bb      	ldrb	r3, [r7, #2]
   1c26a:	f013 0f01 	tst.w	r3, #1
   1c26e:	d11f      	bne.n	1c2b0 <putchw+0x90>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
   1c270:	887b      	ldrh	r3, [r7, #2]
   1c272:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1c276:	b29b      	uxth	r3, r3
   1c278:	f241 0202 	movw	r2, #4098	; 0x1002
   1c27c:	4293      	cmp	r3, r2
   1c27e:	d01d      	beq.n	1c2bc <putchw+0x9c>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
   1c280:	f640 0202 	movw	r2, #2050	; 0x802
   1c284:	4293      	cmp	r3, r2
   1c286:	d02a      	beq.n	1c2de <putchw+0xbe>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
   1c288:	787b      	ldrb	r3, [r7, #1]
   1c28a:	bba3      	cbnz	r3, 1c2f6 <putchw+0xd6>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
   1c28c:	687b      	ldr	r3, [r7, #4]
    while ((ch = *bf++))
   1c28e:	e03d      	b.n	1c30c <putchw+0xec>
        n -= 2;
   1c290:	3c02      	subs	r4, #2
   1c292:	e7e4      	b.n	1c25e <putchw+0x3e>
        n--;
   1c294:	3c01      	subs	r4, #1
   1c296:	e7e2      	b.n	1c25e <putchw+0x3e>
            written += putf(putp, ' ');
   1c298:	2120      	movs	r1, #32
   1c29a:	4630      	mov	r0, r6
   1c29c:	f7ff ffaa 	bl	1c1f4 <putf>
   1c2a0:	4405      	add	r5, r0
        while (n-- > 0)
   1c2a2:	4644      	mov	r4, r8
   1c2a4:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   1c2a8:	2c00      	cmp	r4, #0
   1c2aa:	dcf5      	bgt.n	1c298 <putchw+0x78>
   1c2ac:	4644      	mov	r4, r8
   1c2ae:	e7db      	b.n	1c268 <putchw+0x48>
        written += putf(putp, '-');
   1c2b0:	212d      	movs	r1, #45	; 0x2d
   1c2b2:	4630      	mov	r0, r6
   1c2b4:	f7ff ff9e 	bl	1c1f4 <putf>
   1c2b8:	4405      	add	r5, r0
   1c2ba:	e7d9      	b.n	1c270 <putchw+0x50>
        written += putf(putp, '0');
   1c2bc:	2130      	movs	r1, #48	; 0x30
   1c2be:	4630      	mov	r0, r6
   1c2c0:	f7ff ff98 	bl	1c1f4 <putf>
   1c2c4:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
   1c2c6:	78bb      	ldrb	r3, [r7, #2]
   1c2c8:	f013 0f04 	tst.w	r3, #4
   1c2cc:	d005      	beq.n	1c2da <putchw+0xba>
   1c2ce:	2158      	movs	r1, #88	; 0x58
   1c2d0:	4630      	mov	r0, r6
   1c2d2:	f7ff ff8f 	bl	1c1f4 <putf>
   1c2d6:	4405      	add	r5, r0
   1c2d8:	e7d6      	b.n	1c288 <putchw+0x68>
   1c2da:	2178      	movs	r1, #120	; 0x78
   1c2dc:	e7f8      	b.n	1c2d0 <putchw+0xb0>
        written += putf(putp, '0');
   1c2de:	2130      	movs	r1, #48	; 0x30
   1c2e0:	4630      	mov	r0, r6
   1c2e2:	f7ff ff87 	bl	1c1f4 <putf>
   1c2e6:	4405      	add	r5, r0
   1c2e8:	e7ce      	b.n	1c288 <putchw+0x68>
            written += putf(putp, '0');
   1c2ea:	2130      	movs	r1, #48	; 0x30
   1c2ec:	4630      	mov	r0, r6
   1c2ee:	f7ff ff81 	bl	1c1f4 <putf>
   1c2f2:	4405      	add	r5, r0
        while (n-- > 0)
   1c2f4:	4644      	mov	r4, r8
   1c2f6:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   1c2fa:	2c00      	cmp	r4, #0
   1c2fc:	dcf5      	bgt.n	1c2ea <putchw+0xca>
   1c2fe:	4644      	mov	r4, r8
   1c300:	e7c4      	b.n	1c28c <putchw+0x6c>
        written += putf(putp, ch);
   1c302:	4630      	mov	r0, r6
   1c304:	f7ff ff76 	bl	1c1f4 <putf>
   1c308:	4405      	add	r5, r0
    while ((ch = *bf++))
   1c30a:	4643      	mov	r3, r8
   1c30c:	f103 0801 	add.w	r8, r3, #1
   1c310:	7819      	ldrb	r1, [r3, #0]
   1c312:	2900      	cmp	r1, #0
   1c314:	d1f5      	bne.n	1c302 <putchw+0xe2>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
   1c316:	78bb      	ldrb	r3, [r7, #2]
   1c318:	f013 0f08 	tst.w	r3, #8
   1c31c:	d106      	bne.n	1c32c <putchw+0x10c>
   1c31e:	e008      	b.n	1c332 <putchw+0x112>
        while (n-- > 0)
            written += putf(putp, ' ');
   1c320:	2120      	movs	r1, #32
   1c322:	4630      	mov	r0, r6
   1c324:	f7ff ff66 	bl	1c1f4 <putf>
   1c328:	4405      	add	r5, r0
        while (n-- > 0)
   1c32a:	463c      	mov	r4, r7
   1c32c:	1e67      	subs	r7, r4, #1
   1c32e:	2c00      	cmp	r4, #0
   1c330:	dcf6      	bgt.n	1c320 <putchw+0x100>
    }
    
    return written;
}
   1c332:	4628      	mov	r0, r5
   1c334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c338:	0008ff00 	.word	0x0008ff00

0001c33c <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
   1c33c:	b160      	cbz	r0, 1c358 <intarg+0x1c>
   1c33e:	2801      	cmp	r0, #1
   1c340:	d017      	beq.n	1c372 <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
   1c342:	bb19      	cbnz	r1, 1c38c <intarg+0x50>
            val = va_arg(*va, long long);
        } else {
            val = va_arg(*va, unsigned long long);
   1c344:	6813      	ldr	r3, [r2, #0]
   1c346:	3307      	adds	r3, #7
   1c348:	f023 0307 	bic.w	r3, r3, #7
   1c34c:	f103 0108 	add.w	r1, r3, #8
   1c350:	6011      	str	r1, [r2, #0]
   1c352:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
   1c356:	4770      	bx	lr
        if (sign) {
   1c358:	b129      	cbz	r1, 1c366 <intarg+0x2a>
            val = va_arg(*va, int);
   1c35a:	6813      	ldr	r3, [r2, #0]
   1c35c:	1d19      	adds	r1, r3, #4
   1c35e:	6011      	str	r1, [r2, #0]
   1c360:	6818      	ldr	r0, [r3, #0]
   1c362:	17c1      	asrs	r1, r0, #31
   1c364:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
   1c366:	6813      	ldr	r3, [r2, #0]
   1c368:	1d19      	adds	r1, r3, #4
   1c36a:	6011      	str	r1, [r2, #0]
   1c36c:	6818      	ldr	r0, [r3, #0]
   1c36e:	2100      	movs	r1, #0
   1c370:	4770      	bx	lr
        if (sign) {
   1c372:	b129      	cbz	r1, 1c380 <intarg+0x44>
            val = va_arg(*va, long);
   1c374:	6813      	ldr	r3, [r2, #0]
   1c376:	1d19      	adds	r1, r3, #4
   1c378:	6011      	str	r1, [r2, #0]
   1c37a:	6818      	ldr	r0, [r3, #0]
   1c37c:	17c1      	asrs	r1, r0, #31
   1c37e:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
   1c380:	6813      	ldr	r3, [r2, #0]
   1c382:	1d19      	adds	r1, r3, #4
   1c384:	6011      	str	r1, [r2, #0]
   1c386:	6818      	ldr	r0, [r3, #0]
   1c388:	2100      	movs	r1, #0
   1c38a:	4770      	bx	lr
            val = va_arg(*va, long long);
   1c38c:	6813      	ldr	r3, [r2, #0]
   1c38e:	3307      	adds	r3, #7
   1c390:	f023 0307 	bic.w	r3, r3, #7
   1c394:	f103 0108 	add.w	r1, r3, #8
   1c398:	6011      	str	r1, [r2, #0]
   1c39a:	e9d3 0100 	ldrd	r0, r1, [r3]
   1c39e:	4770      	bx	lr

0001c3a0 <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
   1c3a0:	b570      	push	{r4, r5, r6, lr}
   1c3a2:	b08a      	sub	sp, #40	; 0x28
   1c3a4:	4605      	mov	r5, r0
   1c3a6:	9101      	str	r1, [sp, #4]
   1c3a8:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
   1c3aa:	ab02      	add	r3, sp, #8
   1c3ac:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
   1c3ae:	2400      	movs	r4, #0

    while ((ch = *(fmt++))) {
   1c3b0:	9b01      	ldr	r3, [sp, #4]
   1c3b2:	1c5a      	adds	r2, r3, #1
   1c3b4:	9201      	str	r2, [sp, #4]
   1c3b6:	7819      	ldrb	r1, [r3, #0]
   1c3b8:	2900      	cmp	r1, #0
   1c3ba:	f000 811c 	beq.w	1c5f6 <tfp_format+0x256>
        if (ch != '%') {
   1c3be:	2925      	cmp	r1, #37	; 0x25
   1c3c0:	d004      	beq.n	1c3cc <tfp_format+0x2c>
            written += putf(putp, ch);
   1c3c2:	4628      	mov	r0, r5
   1c3c4:	f7ff ff16 	bl	1c1f4 <putf>
   1c3c8:	4404      	add	r4, r0
   1c3ca:	e7f1      	b.n	1c3b0 <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
   1c3cc:	2200      	movs	r2, #0
   1c3ce:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
   1c3d2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
   1c3d6:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
   1c3da:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
   1c3de:	f362 0382 	bfi	r3, r2, #2, #1
   1c3e2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
   1c3e6:	9b01      	ldr	r3, [sp, #4]
   1c3e8:	1c5a      	adds	r2, r3, #1
   1c3ea:	9201      	str	r2, [sp, #4]
   1c3ec:	7818      	ldrb	r0, [r3, #0]
   1c3ee:	b128      	cbz	r0, 1c3fc <tfp_format+0x5c>
                switch (ch) {
   1c3f0:	282d      	cmp	r0, #45	; 0x2d
   1c3f2:	d04e      	beq.n	1c492 <tfp_format+0xf2>
   1c3f4:	2830      	cmp	r0, #48	; 0x30
   1c3f6:	d03c      	beq.n	1c472 <tfp_format+0xd2>
   1c3f8:	2823      	cmp	r0, #35	; 0x23
   1c3fa:	d043      	beq.n	1c484 <tfp_format+0xe4>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
   1c3fc:	282a      	cmp	r0, #42	; 0x2a
   1c3fe:	d052      	beq.n	1c4a6 <tfp_format+0x106>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
   1c400:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1c404:	b2db      	uxtb	r3, r3
   1c406:	2b09      	cmp	r3, #9
   1c408:	d961      	bls.n	1c4ce <tfp_format+0x12e>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
   1c40a:	286c      	cmp	r0, #108	; 0x6c
   1c40c:	d065      	beq.n	1c4da <tfp_format+0x13a>
            lng = 0;
   1c40e:	2600      	movs	r6, #0
                    ch = *(fmt++);
                    lng = 2;
                }
            }

            if (ch == 'z') {
   1c410:	287a      	cmp	r0, #122	; 0x7a
   1c412:	d06f      	beq.n	1c4f4 <tfp_format+0x154>
                ch = *(fmt++);
            }

            switch (ch) {
   1c414:	2869      	cmp	r0, #105	; 0x69
   1c416:	f000 808e 	beq.w	1c536 <tfp_format+0x196>
   1c41a:	d970      	bls.n	1c4fe <tfp_format+0x15e>
   1c41c:	2873      	cmp	r0, #115	; 0x73
   1c41e:	f000 80dd 	beq.w	1c5dc <tfp_format+0x23c>
   1c422:	f200 8099 	bhi.w	1c558 <tfp_format+0x1b8>
   1c426:	286f      	cmp	r0, #111	; 0x6f
   1c428:	f000 80c7 	beq.w	1c5ba <tfp_format+0x21a>
   1c42c:	2870      	cmp	r0, #112	; 0x70
   1c42e:	d1bf      	bne.n	1c3b0 <tfp_format+0x10>
                p.base = 8;
                ui2a(intarg(lng, 0, &va), &p);
                written += putchw(putp, &p);
                break;
            case 'p':
                v = va_arg(va, void *);
   1c430:	9b00      	ldr	r3, [sp, #0]
   1c432:	1d1a      	adds	r2, r3, #4
   1c434:	9200      	str	r2, [sp, #0]
   1c436:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
   1c438:	2310      	movs	r3, #16
   1c43a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
   1c43e:	aa08      	add	r2, sp, #32
   1c440:	2100      	movs	r1, #0
   1c442:	f7ff fe34 	bl	1c0ae <ui2a>
                p.width = 2 * sizeof(void*);
   1c446:	2308      	movs	r3, #8
   1c448:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
   1c44c:	2301      	movs	r3, #1
   1c44e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
   1c452:	2130      	movs	r1, #48	; 0x30
   1c454:	4628      	mov	r0, r5
   1c456:	f7ff fecd 	bl	1c1f4 <putf>
   1c45a:	4404      	add	r4, r0
                written += putf(putp, 'x');
   1c45c:	2178      	movs	r1, #120	; 0x78
   1c45e:	4628      	mov	r0, r5
   1c460:	f7ff fec8 	bl	1c1f4 <putf>
   1c464:	4404      	add	r4, r0
                written += putchw(putp, &p);
   1c466:	a908      	add	r1, sp, #32
   1c468:	4628      	mov	r0, r5
   1c46a:	f7ff fed9 	bl	1c220 <putchw>
   1c46e:	4404      	add	r4, r0
                break;
   1c470:	e79e      	b.n	1c3b0 <tfp_format+0x10>
                    if (!p.left) {
   1c472:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1c476:	f013 0f08 	tst.w	r3, #8
   1c47a:	d1b4      	bne.n	1c3e6 <tfp_format+0x46>
                        p.lz = 1;
   1c47c:	2301      	movs	r3, #1
   1c47e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1c482:	e7b0      	b.n	1c3e6 <tfp_format+0x46>
                    p.alt = 1;
   1c484:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1c488:	f043 0302 	orr.w	r3, r3, #2
   1c48c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
   1c490:	e7a9      	b.n	1c3e6 <tfp_format+0x46>
                    p.left = 1;
   1c492:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1c496:	f043 0308 	orr.w	r3, r3, #8
   1c49a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
   1c49e:	2300      	movs	r3, #0
   1c4a0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1c4a4:	e79f      	b.n	1c3e6 <tfp_format+0x46>
                i = intarg(0, 1, &va);
   1c4a6:	466a      	mov	r2, sp
   1c4a8:	2101      	movs	r1, #1
   1c4aa:	2000      	movs	r0, #0
   1c4ac:	f7ff ff46 	bl	1c33c <intarg>
                if (i > UCHAR_MAX) {
   1c4b0:	28ff      	cmp	r0, #255	; 0xff
   1c4b2:	dd07      	ble.n	1c4c4 <tfp_format+0x124>
                    p.width = UCHAR_MAX;
   1c4b4:	23ff      	movs	r3, #255	; 0xff
   1c4b6:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
   1c4ba:	9b01      	ldr	r3, [sp, #4]
   1c4bc:	1c5a      	adds	r2, r3, #1
   1c4be:	9201      	str	r2, [sp, #4]
   1c4c0:	7818      	ldrb	r0, [r3, #0]
   1c4c2:	e7a2      	b.n	1c40a <tfp_format+0x6a>
                } else if (i > 0) {
   1c4c4:	2800      	cmp	r0, #0
   1c4c6:	ddf8      	ble.n	1c4ba <tfp_format+0x11a>
                    p.width = i;
   1c4c8:	f88d 0020 	strb.w	r0, [sp, #32]
   1c4cc:	e7f5      	b.n	1c4ba <tfp_format+0x11a>
                ch = a2i(ch, &fmt, 10, &(p.width));
   1c4ce:	ab08      	add	r3, sp, #32
   1c4d0:	220a      	movs	r2, #10
   1c4d2:	a901      	add	r1, sp, #4
   1c4d4:	f7ff fe73 	bl	1c1be <a2i>
   1c4d8:	e797      	b.n	1c40a <tfp_format+0x6a>
                ch = *(fmt++);
   1c4da:	9b01      	ldr	r3, [sp, #4]
   1c4dc:	1c5a      	adds	r2, r3, #1
   1c4de:	9201      	str	r2, [sp, #4]
   1c4e0:	7818      	ldrb	r0, [r3, #0]
                if (ch == 'l') {
   1c4e2:	286c      	cmp	r0, #108	; 0x6c
   1c4e4:	d001      	beq.n	1c4ea <tfp_format+0x14a>
                lng = 1;
   1c4e6:	2601      	movs	r6, #1
   1c4e8:	e792      	b.n	1c410 <tfp_format+0x70>
                    ch = *(fmt++);
   1c4ea:	1c9a      	adds	r2, r3, #2
   1c4ec:	9201      	str	r2, [sp, #4]
   1c4ee:	7858      	ldrb	r0, [r3, #1]
                    lng = 2;
   1c4f0:	2602      	movs	r6, #2
   1c4f2:	e78d      	b.n	1c410 <tfp_format+0x70>
                ch = *(fmt++);
   1c4f4:	9b01      	ldr	r3, [sp, #4]
   1c4f6:	1c5a      	adds	r2, r3, #1
   1c4f8:	9201      	str	r2, [sp, #4]
   1c4fa:	7818      	ldrb	r0, [r3, #0]
   1c4fc:	e78a      	b.n	1c414 <tfp_format+0x74>
            switch (ch) {
   1c4fe:	2858      	cmp	r0, #88	; 0x58
   1c500:	d040      	beq.n	1c584 <tfp_format+0x1e4>
   1c502:	d80a      	bhi.n	1c51a <tfp_format+0x17a>
   1c504:	2800      	cmp	r0, #0
   1c506:	d076      	beq.n	1c5f6 <tfp_format+0x256>
   1c508:	2825      	cmp	r0, #37	; 0x25
   1c50a:	f47f af51 	bne.w	1c3b0 <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
   1c50e:	4601      	mov	r1, r0
   1c510:	4628      	mov	r0, r5
   1c512:	f7ff fe6f 	bl	1c1f4 <putf>
   1c516:	4404      	add	r4, r0
                break;
   1c518:	e74a      	b.n	1c3b0 <tfp_format+0x10>
            switch (ch) {
   1c51a:	2863      	cmp	r0, #99	; 0x63
   1c51c:	d108      	bne.n	1c530 <tfp_format+0x190>
                written += putf(putp, (char)(va_arg(va, int)));
   1c51e:	9b00      	ldr	r3, [sp, #0]
   1c520:	1d1a      	adds	r2, r3, #4
   1c522:	9200      	str	r2, [sp, #0]
   1c524:	7819      	ldrb	r1, [r3, #0]
   1c526:	4628      	mov	r0, r5
   1c528:	f7ff fe64 	bl	1c1f4 <putf>
   1c52c:	4404      	add	r4, r0
                break;
   1c52e:	e73f      	b.n	1c3b0 <tfp_format+0x10>
            switch (ch) {
   1c530:	2864      	cmp	r0, #100	; 0x64
   1c532:	f47f af3d 	bne.w	1c3b0 <tfp_format+0x10>
                p.base = 10;
   1c536:	230a      	movs	r3, #10
   1c538:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
   1c53c:	466a      	mov	r2, sp
   1c53e:	2101      	movs	r1, #1
   1c540:	4630      	mov	r0, r6
   1c542:	f7ff fefb 	bl	1c33c <intarg>
   1c546:	aa08      	add	r2, sp, #32
   1c548:	f7ff fe11 	bl	1c16e <i2a>
                written += putchw(putp, &p);
   1c54c:	a908      	add	r1, sp, #32
   1c54e:	4628      	mov	r0, r5
   1c550:	f7ff fe66 	bl	1c220 <putchw>
   1c554:	4404      	add	r4, r0
                break;
   1c556:	e72b      	b.n	1c3b0 <tfp_format+0x10>
            switch (ch) {
   1c558:	2875      	cmp	r0, #117	; 0x75
   1c55a:	d110      	bne.n	1c57e <tfp_format+0x1de>
                p.base = 10;
   1c55c:	230a      	movs	r3, #10
   1c55e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1c562:	466a      	mov	r2, sp
   1c564:	2100      	movs	r1, #0
   1c566:	4630      	mov	r0, r6
   1c568:	f7ff fee8 	bl	1c33c <intarg>
   1c56c:	aa08      	add	r2, sp, #32
   1c56e:	f7ff fd9e 	bl	1c0ae <ui2a>
                written += putchw(putp, &p);
   1c572:	a908      	add	r1, sp, #32
   1c574:	4628      	mov	r0, r5
   1c576:	f7ff fe53 	bl	1c220 <putchw>
   1c57a:	4404      	add	r4, r0
                break;
   1c57c:	e718      	b.n	1c3b0 <tfp_format+0x10>
            switch (ch) {
   1c57e:	2878      	cmp	r0, #120	; 0x78
   1c580:	f47f af16 	bne.w	1c3b0 <tfp_format+0x10>
                p.base = 16;
   1c584:	2310      	movs	r3, #16
   1c586:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
   1c58a:	2858      	cmp	r0, #88	; 0x58
   1c58c:	bf14      	ite	ne
   1c58e:	2300      	movne	r3, #0
   1c590:	2301      	moveq	r3, #1
   1c592:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   1c596:	f363 0282 	bfi	r2, r3, #2, #1
   1c59a:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
   1c59e:	466a      	mov	r2, sp
   1c5a0:	2100      	movs	r1, #0
   1c5a2:	4630      	mov	r0, r6
   1c5a4:	f7ff feca 	bl	1c33c <intarg>
   1c5a8:	aa08      	add	r2, sp, #32
   1c5aa:	f7ff fd80 	bl	1c0ae <ui2a>
                written += putchw(putp, &p);
   1c5ae:	a908      	add	r1, sp, #32
   1c5b0:	4628      	mov	r0, r5
   1c5b2:	f7ff fe35 	bl	1c220 <putchw>
   1c5b6:	4404      	add	r4, r0
                break;
   1c5b8:	e6fa      	b.n	1c3b0 <tfp_format+0x10>
                p.base = 8;
   1c5ba:	2308      	movs	r3, #8
   1c5bc:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1c5c0:	466a      	mov	r2, sp
   1c5c2:	2100      	movs	r1, #0
   1c5c4:	4630      	mov	r0, r6
   1c5c6:	f7ff feb9 	bl	1c33c <intarg>
   1c5ca:	aa08      	add	r2, sp, #32
   1c5cc:	f7ff fd6f 	bl	1c0ae <ui2a>
                written += putchw(putp, &p);
   1c5d0:	a908      	add	r1, sp, #32
   1c5d2:	4628      	mov	r0, r5
   1c5d4:	f7ff fe24 	bl	1c220 <putchw>
   1c5d8:	4404      	add	r4, r0
                break;
   1c5da:	e6e9      	b.n	1c3b0 <tfp_format+0x10>
                p.bf = va_arg(va, char *);
   1c5dc:	9b00      	ldr	r3, [sp, #0]
   1c5de:	1d1a      	adds	r2, r3, #4
   1c5e0:	9200      	str	r2, [sp, #0]
   1c5e2:	681b      	ldr	r3, [r3, #0]
   1c5e4:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
   1c5e6:	a908      	add	r1, sp, #32
   1c5e8:	4628      	mov	r0, r5
   1c5ea:	f7ff fe19 	bl	1c220 <putchw>
   1c5ee:	4404      	add	r4, r0
                p.bf = bf;
   1c5f0:	ab02      	add	r3, sp, #8
   1c5f2:	9309      	str	r3, [sp, #36]	; 0x24
                break;
   1c5f4:	e6dc      	b.n	1c3b0 <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
   1c5f6:	4620      	mov	r0, r4
   1c5f8:	b00a      	add	sp, #40	; 0x28
   1c5fa:	bd70      	pop	{r4, r5, r6, pc}

0001c5fc <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
   1c5fc:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
   1c5fe:	f7ff fecf 	bl	1c3a0 <tfp_format>
}
   1c602:	bd08      	pop	{r3, pc}

0001c604 <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
   1c604:	b40f      	push	{r0, r1, r2, r3}
   1c606:	b500      	push	{lr}
   1c608:	b083      	sub	sp, #12
   1c60a:	aa04      	add	r2, sp, #16
   1c60c:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   1c610:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
   1c612:	4b04      	ldr	r3, [pc, #16]	; (1c624 <printf+0x20>)
   1c614:	6818      	ldr	r0, [r3, #0]
   1c616:	f7ff fff1 	bl	1c5fc <vfprintf>
    va_end(va);
    return rv;
}
   1c61a:	b003      	add	sp, #12
   1c61c:	f85d eb04 	ldr.w	lr, [sp], #4
   1c620:	b004      	add	sp, #16
   1c622:	4770      	bx	lr
   1c624:	00022704 	.word	0x00022704

0001c628 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
   1c628:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c62a:	b085      	sub	sp, #20
   1c62c:	4605      	mov	r5, r0
   1c62e:	460c      	mov	r4, r1
   1c630:	4616      	mov	r6, r2
   1c632:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
   1c634:	460a      	mov	r2, r1
   1c636:	4601      	mov	r1, r0
   1c638:	4668      	mov	r0, sp
   1c63a:	f000 f835 	bl	1c6a8 <fmemopen_w>
    tfp_format(f, fmt, va);
   1c63e:	463a      	mov	r2, r7
   1c640:	4631      	mov	r1, r6
   1c642:	f7ff fead 	bl	1c3a0 <tfp_format>
    if (size > 0) {
   1c646:	b12c      	cbz	r4, 1c654 <vsnprintf+0x2c>
        if (state.bytes_written < size) {
   1c648:	9b02      	ldr	r3, [sp, #8]
   1c64a:	42a3      	cmp	r3, r4
   1c64c:	d305      	bcc.n	1c65a <vsnprintf+0x32>
            *(state.buffer) = '\0';
        } else {
            str[size - 1] = '\0';
   1c64e:	3c01      	subs	r4, #1
   1c650:	2300      	movs	r3, #0
   1c652:	552b      	strb	r3, [r5, r4]
        }
    }
    return state.bytes_written;
}
   1c654:	9802      	ldr	r0, [sp, #8]
   1c656:	b005      	add	sp, #20
   1c658:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(state.buffer) = '\0';
   1c65a:	9b01      	ldr	r3, [sp, #4]
   1c65c:	2200      	movs	r2, #0
   1c65e:	701a      	strb	r2, [r3, #0]
   1c660:	e7f8      	b.n	1c654 <vsnprintf+0x2c>
	...

0001c664 <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   1c664:	b508      	push	{r3, lr}
	return vfprintf(stdout, format, ap);
   1c666:	460a      	mov	r2, r1
   1c668:	4601      	mov	r1, r0
   1c66a:	4b02      	ldr	r3, [pc, #8]	; (1c674 <vprintf+0x10>)
   1c66c:	6818      	ldr	r0, [r3, #0]
   1c66e:	f7ff ffc5 	bl	1c5fc <vfprintf>
}
   1c672:	bd08      	pop	{r3, pc}
   1c674:	00022704 	.word	0x00022704

0001c678 <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
   1c678:	b430      	push	{r4, r5}
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
   1c67a:	2500      	movs	r5, #0
    
    while (n--)
   1c67c:	e000      	b.n	1c680 <memfile_write+0x8>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
   1c67e:	4622      	mov	r2, r4
    while (n--)
   1c680:	1e54      	subs	r4, r2, #1
   1c682:	b16a      	cbz	r2, 1c6a0 <memfile_write+0x28>
        f->bytes_written++;
   1c684:	6883      	ldr	r3, [r0, #8]
   1c686:	3301      	adds	r3, #1
   1c688:	6083      	str	r3, [r0, #8]
        if (f->bytes_written <= f->size)
   1c68a:	68c2      	ldr	r2, [r0, #12]
   1c68c:	4293      	cmp	r3, r2
   1c68e:	d8f6      	bhi.n	1c67e <memfile_write+0x6>
            *f->buffer++ = *bp++;
   1c690:	6843      	ldr	r3, [r0, #4]
   1c692:	1c5a      	adds	r2, r3, #1
   1c694:	6042      	str	r2, [r0, #4]
   1c696:	780a      	ldrb	r2, [r1, #0]
   1c698:	701a      	strb	r2, [r3, #0]
            i++;
   1c69a:	3501      	adds	r5, #1
            *f->buffer++ = *bp++;
   1c69c:	3101      	adds	r1, #1
   1c69e:	e7ee      	b.n	1c67e <memfile_write+0x6>
        }
    }
    
    return i;
}
   1c6a0:	4628      	mov	r0, r5
   1c6a2:	bc30      	pop	{r4, r5}
   1c6a4:	4770      	bx	lr
	...

0001c6a8 <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
   1c6a8:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
   1c6aa:	4c04      	ldr	r4, [pc, #16]	; (1c6bc <fmemopen_w+0x14>)
   1c6ac:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
   1c6ae:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
   1c6b0:	2100      	movs	r1, #0
   1c6b2:	6081      	str	r1, [r0, #8]
    storage->size = size;
   1c6b4:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
   1c6b6:	f85d 4b04 	ldr.w	r4, [sp], #4
   1c6ba:	4770      	bx	lr
   1c6bc:	000226fc 	.word	0x000226fc

0001c6c0 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
   1c6c0:	2000      	movs	r0, #0
   1c6c2:	4770      	bx	lr

0001c6c4 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
   1c6c4:	b510      	push	{r4, lr}
   1c6c6:	4608      	mov	r0, r1
   1c6c8:	4614      	mov	r4, r2
    console_write(bp, n);
   1c6ca:	4611      	mov	r1, r2
   1c6cc:	f7fd f9b8 	bl	19a40 <console_write>
    return n;
}
   1c6d0:	4620      	mov	r0, r4
   1c6d2:	bd10      	pop	{r4, pc}

0001c6d4 <rust_sysinit>:
#include <mynewt_rust/mynewt_rust.h>
#include <mynewt_rust/sensor_helper.h>
#include <mynewt_rust/json_helper.h>

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
void rust_sysinit() {
   1c6d4:	b508      	push	{r3, lr}
    sysinit();
   1c6d6:	f7fd fa1b 	bl	19b10 <sysinit_start>
   1c6da:	f000 f81b 	bl	1c714 <sysinit_app>
   1c6de:	f7fd fa1d 	bl	19b1c <sysinit_end>
}
   1c6e2:	bd08      	pop	{r3, pc}

0001c6e4 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   1c6e4:	b570      	push	{r4, r5, r6, lr}
   1c6e6:	b082      	sub	sp, #8
   1c6e8:	460c      	mov	r4, r1
   1c6ea:	4616      	mov	r6, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   1c6ec:	b29d      	uxth	r5, r3
   1c6ee:	9b07      	ldr	r3, [sp, #28]
   1c6f0:	9300      	str	r3, [sp, #0]
   1c6f2:	4603      	mov	r3, r0
   1c6f4:	9a06      	ldr	r2, [sp, #24]
   1c6f6:	4629      	mov	r1, r5
   1c6f8:	4620      	mov	r0, r4
   1c6fa:	f7fe fdeb 	bl	1b2d4 <os_mempool_init>
    if (rc != 0) {
   1c6fe:	b108      	cbz	r0, 1c704 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1c700:	b002      	add	sp, #8
   1c702:	bd70      	pop	{r4, r5, r6, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   1c704:	462b      	mov	r3, r5
   1c706:	9a06      	ldr	r2, [sp, #24]
   1c708:	b292      	uxth	r2, r2
   1c70a:	4621      	mov	r1, r4
   1c70c:	4630      	mov	r0, r6
   1c70e:	f7fe fc96 	bl	1b03e <os_mbuf_pool_init>
   1c712:	e7f5      	b.n	1c700 <mem_init_mbuf_pool+0x1c>

0001c714 <sysinit_app>:
void sensor_network_init(void);
void init_sensor_coap(void);

void
sysinit_app(void)
{
   1c714:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   1c716:	f7fe f9f3 	bl	1ab00 <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   1c71a:	f001 f985 	bl	1da28 <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (libs/semihosting_console) */
    console_pkg_init();
   1c71e:	f7fd f9a3 	bl	19a68 <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: mfg_init (sys/mfg) */
    mfg_init();
   1c722:	f001 fac7 	bl	1dcb4 <mfg_init>
    /* 100.1: modlog_init (sys/log/modlog) */
    modlog_init();
   1c726:	f001 f9b7 	bl	1da98 <modlog_init>

    /*** Stage 300 */
    /* 300.0: oc_init (net/oic) */
    oc_init();
   1c72a:	f001 f8e1 	bl	1d8f0 <oc_init>

    /*** Stage 301 */
    /* 301.0: oc_register_gatt (net/oic) */
    oc_register_gatt();
   1c72e:	f001 f8f1 	bl	1d914 <oc_register_gatt>
    /* 301.1: oc_register_ip4 (net/oic) */
    oc_register_ip4();
   1c732:	f001 f8f0 	bl	1d916 <oc_register_ip4>
    /* 301.2: oc_register_ip6 (net/oic) */
    oc_register_ip6();
   1c736:	f001 f8ef 	bl	1d918 <oc_register_ip6>
    /* 301.3: oc_register_lora (net/oic) */
    oc_register_lora();
   1c73a:	f001 f8ee 	bl	1d91a <oc_register_lora>
    /* 301.4: oc_register_serial (net/oic) */
    oc_register_serial();
   1c73e:	f001 f8ed 	bl	1d91c <oc_register_serial>

    /*** Stage 500 */
    /* 500.0: sensor_dev_create (hw/sensor/creator) */
    sensor_dev_create();
   1c742:	f000 fbd1 	bl	1cee8 <sensor_dev_create>

    /*** Stage 501 */
    /* 501.0: sensor_pkg_init (hw/sensor) */
    sensor_pkg_init();
   1c746:	f000 fd1f 	bl	1d188 <sensor_pkg_init>

    /*** Stage 620 */
    /* 620.0: temp_stub_create (libs/temp_stub) */
    temp_stub_create();
   1c74a:	f000 ff3d 	bl	1d5c8 <temp_stub_create>

    /*** Stage 640 */
    /* 640.0: sensor_network_init (libs/sensor_network) */
    sensor_network_init();
   1c74e:	f000 feb3 	bl	1d4b8 <sensor_network_init>

    /*** Stage 660 */
    /* 660.0: init_sensor_coap (libs/sensor_coap) */
    init_sensor_coap();
   1c752:	f000 fe3d 	bl	1d3d0 <init_sensor_coap>
}
   1c756:	bd08      	pop	{r3, pc}

0001c758 <hal_bsp_flash_dev>:
hal_bsp_flash_dev(uint8_t id)
{
    /*
     * Internal flash mapped to id 0.
     */
    if (id == 0) {
   1c758:	b908      	cbnz	r0, 1c75e <hal_bsp_flash_dev+0x6>
        return &nrf52k_flash_dev;
   1c75a:	4802      	ldr	r0, [pc, #8]	; (1c764 <hal_bsp_flash_dev+0xc>)
   1c75c:	4770      	bx	lr
    }

    return NULL;
   1c75e:	2000      	movs	r0, #0
}
   1c760:	4770      	bx	lr
   1c762:	bf00      	nop
   1c764:	00022708 	.word	0x00022708

0001c768 <hal_bsp_init>:
    return cfg_pri;
}

void
hal_bsp_init(void)
{
   1c768:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
   1c76a:	f7eb fd29 	bl	81c0 <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
   1c76e:	f000 fbb3 	bl	1ced8 <nrf52_periph_create>
}
   1c772:	bd08      	pop	{r3, pc}

0001c774 <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
   1c774:	2300      	movs	r3, #0
   1c776:	4a07      	ldr	r2, [pc, #28]	; (1c794 <nrf52k_flash_wait_ready+0x20>)
   1c778:	4293      	cmp	r3, r2
   1c77a:	dc06      	bgt.n	1c78a <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
   1c77c:	4a06      	ldr	r2, [pc, #24]	; (1c798 <nrf52k_flash_wait_ready+0x24>)
   1c77e:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   1c782:	2a01      	cmp	r2, #1
   1c784:	d004      	beq.n	1c790 <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
   1c786:	3301      	adds	r3, #1
   1c788:	e7f5      	b.n	1c776 <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
   1c78a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c78e:	4770      	bx	lr
            return 0;
   1c790:	2000      	movs	r0, #0
}
   1c792:	4770      	bx	lr
   1c794:	0001869f 	.word	0x0001869f
   1c798:	4001e000 	.word	0x4001e000

0001c79c <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
   1c79c:	b538      	push	{r3, r4, r5, lr}
   1c79e:	460d      	mov	r5, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
   1c7a0:	f7ff ffe8 	bl	1c774 <nrf52k_flash_wait_ready>
   1c7a4:	b9f0      	cbnz	r0, 1c7e4 <nrf52k_flash_erase_sector+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1c7a6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1c7aa:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
   1c7ac:	4b0f      	ldr	r3, [pc, #60]	; (1c7ec <nrf52k_flash_erase_sector+0x50>)
   1c7ae:	2202      	movs	r2, #2
   1c7b0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
   1c7b4:	f7ff ffde 	bl	1c774 <nrf52k_flash_wait_ready>
   1c7b8:	b148      	cbz	r0, 1c7ce <nrf52k_flash_erase_sector+0x32>
    int rc = -1;
   1c7ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
   1c7be:	4a0b      	ldr	r2, [pc, #44]	; (1c7ec <nrf52k_flash_erase_sector+0x50>)
   1c7c0:	2100      	movs	r1, #0
   1c7c2:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1c7c6:	b904      	cbnz	r4, 1c7ca <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
   1c7c8:	b662      	cpsie	i
    return rc;
}
   1c7ca:	4618      	mov	r0, r3
   1c7cc:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
   1c7ce:	4b07      	ldr	r3, [pc, #28]	; (1c7ec <nrf52k_flash_erase_sector+0x50>)
   1c7d0:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
   1c7d4:	f7ff ffce 	bl	1c774 <nrf52k_flash_wait_ready>
   1c7d8:	4603      	mov	r3, r0
   1c7da:	2800      	cmp	r0, #0
   1c7dc:	d0ef      	beq.n	1c7be <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
   1c7de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c7e2:	e7ec      	b.n	1c7be <nrf52k_flash_erase_sector+0x22>
        return -1;
   1c7e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c7e8:	e7ef      	b.n	1c7ca <nrf52k_flash_erase_sector+0x2e>
   1c7ea:	bf00      	nop
   1c7ec:	4001e000 	.word	0x4001e000

0001c7f0 <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
   1c7f0:	2000      	movs	r0, #0
   1c7f2:	4770      	bx	lr

0001c7f4 <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1c7f4:	297f      	cmp	r1, #127	; 0x7f
   1c7f6:	dc06      	bgt.n	1c806 <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
   1c7f8:	0309      	lsls	r1, r1, #12
   1c7fa:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
   1c7fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1c800:	601a      	str	r2, [r3, #0]
}
   1c802:	2000      	movs	r0, #0
   1c804:	4770      	bx	lr
{
   1c806:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1c808:	2300      	movs	r3, #0
   1c80a:	461a      	mov	r2, r3
   1c80c:	4619      	mov	r1, r3
   1c80e:	4618      	mov	r0, r3
   1c810:	f7fe f818 	bl	1a844 <__assert_func>

0001c814 <nrf52k_flash_write>:
{
   1c814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c818:	b082      	sub	sp, #8
   1c81a:	460d      	mov	r5, r1
   1c81c:	4616      	mov	r6, r2
   1c81e:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
   1c820:	f7ff ffa8 	bl	1c774 <nrf52k_flash_wait_ready>
   1c824:	2800      	cmp	r0, #0
   1c826:	d158      	bne.n	1c8da <nrf52k_flash_write+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1c828:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1c82c:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
   1c82e:	4b2c      	ldr	r3, [pc, #176]	; (1c8e0 <nrf52k_flash_write+0xcc>)
   1c830:	2201      	movs	r2, #1
   1c832:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
   1c836:	f015 0803 	ands.w	r8, r5, #3
   1c83a:	d10b      	bne.n	1c854 <nrf52k_flash_write+0x40>
    while (num_bytes >= sizeof(uint32_t)) {
   1c83c:	2c03      	cmp	r4, #3
   1c83e:	d925      	bls.n	1c88c <nrf52k_flash_write+0x78>
        if (nrf52k_flash_wait_ready()) {
   1c840:	f7ff ff98 	bl	1c774 <nrf52k_flash_wait_ready>
   1c844:	2800      	cmp	r0, #0
   1c846:	d139      	bne.n	1c8bc <nrf52k_flash_write+0xa8>
        *(uint32_t *)address = *(uint32_t *)src;
   1c848:	f856 3b04 	ldr.w	r3, [r6], #4
   1c84c:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
   1c850:	3c04      	subs	r4, #4
   1c852:	e7f3      	b.n	1c83c <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
   1c854:	f7ff ff8e 	bl	1c774 <nrf52k_flash_wait_ready>
   1c858:	bb68      	cbnz	r0, 1c8b6 <nrf52k_flash_write+0xa2>
        val = *(uint32_t *)(address & ~0x3);
   1c85a:	f025 0a03 	bic.w	sl, r5, #3
   1c85e:	f8da 3000 	ldr.w	r3, [sl]
   1c862:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
   1c864:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
   1c868:	45a1      	cmp	r9, r4
   1c86a:	d900      	bls.n	1c86e <nrf52k_flash_write+0x5a>
            cnt = num_bytes;
   1c86c:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
   1c86e:	464a      	mov	r2, r9
   1c870:	4631      	mov	r1, r6
   1c872:	ab01      	add	r3, sp, #4
   1c874:	eb03 0008 	add.w	r0, r3, r8
   1c878:	f7ff fbda 	bl	1c030 <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
   1c87c:	9b01      	ldr	r3, [sp, #4]
   1c87e:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
   1c882:	444d      	add	r5, r9
        num_bytes -= cnt;
   1c884:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
   1c888:	444e      	add	r6, r9
   1c88a:	e7d7      	b.n	1c83c <nrf52k_flash_write+0x28>
    if (num_bytes) {
   1c88c:	b164      	cbz	r4, 1c8a8 <nrf52k_flash_write+0x94>
        val = *(uint32_t *)address;
   1c88e:	682b      	ldr	r3, [r5, #0]
   1c890:	a802      	add	r0, sp, #8
   1c892:	f840 3d04 	str.w	r3, [r0, #-4]!
        memcpy(&val, src, num_bytes);
   1c896:	4622      	mov	r2, r4
   1c898:	4631      	mov	r1, r6
   1c89a:	f7ff fbc9 	bl	1c030 <memcpy>
        if (nrf52k_flash_wait_ready()) {
   1c89e:	f7ff ff69 	bl	1c774 <nrf52k_flash_wait_ready>
   1c8a2:	b9b8      	cbnz	r0, 1c8d4 <nrf52k_flash_write+0xc0>
        *(uint32_t *)address = val;
   1c8a4:	9b01      	ldr	r3, [sp, #4]
   1c8a6:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
   1c8a8:	f7ff ff64 	bl	1c774 <nrf52k_flash_wait_ready>
   1c8ac:	4603      	mov	r3, r0
   1c8ae:	b138      	cbz	r0, 1c8c0 <nrf52k_flash_write+0xac>
        rc = -1;
   1c8b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c8b4:	e004      	b.n	1c8c0 <nrf52k_flash_write+0xac>
    int rc = -1;
   1c8b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c8ba:	e001      	b.n	1c8c0 <nrf52k_flash_write+0xac>
   1c8bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
   1c8c0:	4a07      	ldr	r2, [pc, #28]	; (1c8e0 <nrf52k_flash_write+0xcc>)
   1c8c2:	2100      	movs	r1, #0
   1c8c4:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1c8c8:	b907      	cbnz	r7, 1c8cc <nrf52k_flash_write+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
   1c8ca:	b662      	cpsie	i
}
   1c8cc:	4618      	mov	r0, r3
   1c8ce:	b002      	add	sp, #8
   1c8d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
   1c8d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c8d8:	e7f2      	b.n	1c8c0 <nrf52k_flash_write+0xac>
        return -1;
   1c8da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c8de:	e7f5      	b.n	1c8cc <nrf52k_flash_write+0xb8>
   1c8e0:	4001e000 	.word	0x4001e000

0001c8e4 <nrf52k_flash_read>:
{
   1c8e4:	b508      	push	{r3, lr}
   1c8e6:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
   1c8e8:	461a      	mov	r2, r3
   1c8ea:	f7ff fba1 	bl	1c030 <memcpy>
}
   1c8ee:	2000      	movs	r0, #0
   1c8f0:	bd08      	pop	{r3, pc}
	...

0001c8f4 <nrf52_timer_handler>:
    }
}

static void
nrf52_timer_handler(void)
{
   1c8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ticks;
    os_sr_t sr;
    uint32_t counter;

    os_trace_isr_enter();
    OS_ENTER_CRITICAL(sr);
   1c8f6:	f7ff fa3b 	bl	1bd70 <os_arch_save_sr>
    return OS_TICK_TIMER->COUNTER;
   1c8fa:	4b31      	ldr	r3, [pc, #196]	; (1c9c0 <nrf52_timer_handler+0xcc>)
   1c8fc:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504

    /* Calculate elapsed ticks and advance OS time. */

    counter = nrf52_os_tick_counter();
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   1c900:	4b30      	ldr	r3, [pc, #192]	; (1c9c4 <nrf52_timer_handler+0xd0>)
   1c902:	689b      	ldr	r3, [r3, #8]
    assert(x <= 0xffffff);
   1c904:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
   1c908:	d225      	bcs.n	1c956 <nrf52_timer_handler+0x62>
   1c90a:	4606      	mov	r6, r0
    assert(y <= 0xffffff);
   1c90c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1c910:	d227      	bcs.n	1c962 <nrf52_timer_handler+0x6e>
    result = x - y;
   1c912:	1aed      	subs	r5, r5, r3
    if (result & 0x800000) {
   1c914:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
   1c918:	d129      	bne.n	1c96e <nrf52_timer_handler+0x7a>
        return (result & 0x007fffff);
   1c91a:	f3c5 0516 	ubfx	r5, r5, #0, #23
    ticks = delta / g_hal_os_tick.ticks_per_ostick;
   1c91e:	4f29      	ldr	r7, [pc, #164]	; (1c9c4 <nrf52_timer_handler+0xd0>)
   1c920:	683c      	ldr	r4, [r7, #0]
   1c922:	fb95 f5f4 	sdiv	r5, r5, r4
    os_time_advance(ticks);
   1c926:	4628      	mov	r0, r5
   1c928:	f7ff f9b0 	bl	1bc8c <os_time_advance>

    /* Clear timer interrupt */
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1c92c:	4b24      	ldr	r3, [pc, #144]	; (1c9c0 <nrf52_timer_handler+0xcc>)
   1c92e:	2200      	movs	r2, #0
   1c930:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Update the time associated with the most recent tick */
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1c934:	68bb      	ldr	r3, [r7, #8]
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1c936:	683c      	ldr	r4, [r7, #0]
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1c938:	fb05 3304 	mla	r3, r5, r4, r3
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1c93c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1c940:	60bb      	str	r3, [r7, #8]

    /* Update the output compare to interrupt at the next tick */
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
   1c942:	441c      	add	r4, r3
    OS_ASSERT_CRITICAL();
   1c944:	f7ff fa1d 	bl	1bd82 <os_arch_in_critical>
   1c948:	bb28      	cbnz	r0, 1c996 <nrf52_timer_handler+0xa2>
   1c94a:	2300      	movs	r3, #0
   1c94c:	461a      	mov	r2, r3
   1c94e:	4619      	mov	r1, r3
   1c950:	4618      	mov	r0, r3
   1c952:	f7fd ff77 	bl	1a844 <__assert_func>
    assert(x <= 0xffffff);
   1c956:	2300      	movs	r3, #0
   1c958:	461a      	mov	r2, r3
   1c95a:	4619      	mov	r1, r3
   1c95c:	4618      	mov	r0, r3
   1c95e:	f7fd ff71 	bl	1a844 <__assert_func>
    assert(y <= 0xffffff);
   1c962:	2300      	movs	r3, #0
   1c964:	461a      	mov	r2, r3
   1c966:	4619      	mov	r1, r3
   1c968:	4618      	mov	r0, r3
   1c96a:	f7fd ff6b 	bl	1a844 <__assert_func>
        return (result | 0xff800000);
   1c96e:	ea6f 2545 	mvn.w	r5, r5, lsl #9
   1c972:	ea6f 2555 	mvn.w	r5, r5, lsr #9
   1c976:	e7d2      	b.n	1c91e <nrf52_timer_handler+0x2a>
    assert(y <= 0xffffff);
   1c978:	2300      	movs	r3, #0
   1c97a:	461a      	mov	r2, r3
   1c97c:	4619      	mov	r1, r3
   1c97e:	4618      	mov	r0, r3
   1c980:	f7fd ff60 	bl	1a844 <__assert_func>
        return (result | 0xff800000);
   1c984:	ea6f 2242 	mvn.w	r2, r2, lsl #9
   1c988:	ea6f 2252 	mvn.w	r2, r2, lsr #9
        if (delta > 2) {
   1c98c:	2a02      	cmp	r2, #2
   1c98e:	dc13      	bgt.n	1c9b8 <nrf52_timer_handler+0xc4>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1c990:	4a0c      	ldr	r2, [pc, #48]	; (1c9c4 <nrf52_timer_handler+0xd0>)
   1c992:	6814      	ldr	r4, [r2, #0]
   1c994:	441c      	add	r4, r3
        ocmp &= 0xffffff;
   1c996:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1c99a:	4a09      	ldr	r2, [pc, #36]	; (1c9c0 <nrf52_timer_handler+0xcc>)
   1c99c:	f8c2 354c 	str.w	r3, [r2, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1c9a0:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
    assert(y <= 0xffffff);
   1c9a4:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   1c9a8:	d2e6      	bcs.n	1c978 <nrf52_timer_handler+0x84>
    result = x - y;
   1c9aa:	1a9a      	subs	r2, r3, r2
    if (result & 0x800000) {
   1c9ac:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   1c9b0:	d1e8      	bne.n	1c984 <nrf52_timer_handler+0x90>
        return (result & 0x007fffff);
   1c9b2:	f3c2 0216 	ubfx	r2, r2, #0, #23
   1c9b6:	e7e9      	b.n	1c98c <nrf52_timer_handler+0x98>

    OS_EXIT_CRITICAL(sr);
   1c9b8:	4630      	mov	r0, r6
   1c9ba:	f7ff f9df 	bl	1bd7c <os_arch_restore_sr>
    os_trace_isr_exit();
}
   1c9be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c9c0:	40011000 	.word	0x40011000
   1c9c4:	2000dec4 	.word	0x2000dec4

0001c9c8 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   1c9c8:	b538      	push	{r3, r4, r5, lr}
   1c9ca:	4605      	mov	r5, r0
    uint32_t ocmp;

    OS_ASSERT_CRITICAL();
   1c9cc:	f7ff f9d9 	bl	1bd82 <os_arch_in_critical>
   1c9d0:	b1a0      	cbz	r0, 1c9fc <os_tick_idle+0x34>

    if (ticks > 0) {
   1c9d2:	2d00      	cmp	r5, #0
   1c9d4:	d038      	beq.n	1ca48 <os_tick_idle+0x80>
        /*
         * Enter tickless regime during long idle durations.
         */
        if (ticks > g_hal_os_tick.max_idle_ticks) {
   1c9d6:	4b20      	ldr	r3, [pc, #128]	; (1ca58 <os_tick_idle+0x90>)
   1c9d8:	685b      	ldr	r3, [r3, #4]
   1c9da:	42ab      	cmp	r3, r5
   1c9dc:	d200      	bcs.n	1c9e0 <os_tick_idle+0x18>
            ticks = g_hal_os_tick.max_idle_ticks;
   1c9de:	461d      	mov	r5, r3
        }
        ocmp = g_hal_os_tick.lastocmp + (ticks*g_hal_os_tick.ticks_per_ostick);
   1c9e0:	4b1d      	ldr	r3, [pc, #116]	; (1ca58 <os_tick_idle+0x90>)
   1c9e2:	689c      	ldr	r4, [r3, #8]
   1c9e4:	681a      	ldr	r2, [r3, #0]
   1c9e6:	fb05 4402 	mla	r4, r5, r2, r4
    OS_ASSERT_CRITICAL();
   1c9ea:	f7ff f9ca 	bl	1bd82 <os_arch_in_critical>
   1c9ee:	b9d0      	cbnz	r0, 1ca26 <os_tick_idle+0x5e>
   1c9f0:	2300      	movs	r3, #0
   1c9f2:	461a      	mov	r2, r3
   1c9f4:	4619      	mov	r1, r3
   1c9f6:	4618      	mov	r0, r3
   1c9f8:	f7fd ff24 	bl	1a844 <__assert_func>
    OS_ASSERT_CRITICAL();
   1c9fc:	2300      	movs	r3, #0
   1c9fe:	461a      	mov	r2, r3
   1ca00:	4619      	mov	r1, r3
   1ca02:	4618      	mov	r0, r3
   1ca04:	f7fd ff1e 	bl	1a844 <__assert_func>
    assert(y <= 0xffffff);
   1ca08:	2300      	movs	r3, #0
   1ca0a:	461a      	mov	r2, r3
   1ca0c:	4619      	mov	r1, r3
   1ca0e:	4618      	mov	r0, r3
   1ca10:	f7fd ff18 	bl	1a844 <__assert_func>
        return (result | 0xff800000);
   1ca14:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1ca18:	ea6f 2353 	mvn.w	r3, r3, lsr #9
        if (delta > 2) {
   1ca1c:	2b02      	cmp	r3, #2
   1ca1e:	dc13      	bgt.n	1ca48 <os_tick_idle+0x80>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1ca20:	4b0d      	ldr	r3, [pc, #52]	; (1ca58 <os_tick_idle+0x90>)
   1ca22:	681c      	ldr	r4, [r3, #0]
   1ca24:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   1ca26:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1ca2a:	4b0c      	ldr	r3, [pc, #48]	; (1ca5c <os_tick_idle+0x94>)
   1ca2c:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1ca30:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   1ca34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1ca38:	d2e6      	bcs.n	1ca08 <os_tick_idle+0x40>
    result = x - y;
   1ca3a:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   1ca3c:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   1ca40:	d1e8      	bne.n	1ca14 <os_tick_idle+0x4c>
        return (result & 0x007fffff);
   1ca42:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1ca46:	e7e9      	b.n	1ca1c <os_tick_idle+0x54>
  __ASM volatile ("dsb 0xF":::"memory");
   1ca48:	f3bf 8f4f 	dsb	sy
        nrf52_os_tick_set_ocmp(ocmp);
    }

    __DSB();
    __WFI();
   1ca4c:	bf30      	wfi

    if (ticks > 0) {
   1ca4e:	b905      	cbnz	r5, 1ca52 <os_tick_idle+0x8a>
         * Update OS time before anything else when coming out of
         * the tickless regime.
         */
        nrf52_timer_handler();
    }
}
   1ca50:	bd38      	pop	{r3, r4, r5, pc}
        nrf52_timer_handler();
   1ca52:	f7ff ff4f 	bl	1c8f4 <nrf52_timer_handler>
}
   1ca56:	e7fb      	b.n	1ca50 <os_tick_idle+0x88>
   1ca58:	2000dec4 	.word	0x2000dec4
   1ca5c:	40011000 	.word	0x40011000

0001ca60 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   1ca60:	b570      	push	{r4, r5, r6, lr}
    uint32_t sr;

    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1ca62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1ca66:	fbb3 f3f0 	udiv	r3, r3, r0
   1ca6a:	fb00 f303 	mul.w	r3, r0, r3
   1ca6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1ca72:	d136      	bne.n	1cae2 <os_tick_init+0x82>
   1ca74:	460c      	mov	r4, r1

    g_hal_os_tick.lastocmp = 0;
   1ca76:	4d1e      	ldr	r5, [pc, #120]	; (1caf0 <os_tick_init+0x90>)
   1ca78:	2600      	movs	r6, #0
   1ca7a:	60ae      	str	r6, [r5, #8]
    g_hal_os_tick.ticks_per_ostick = RTC_FREQ / os_ticks_per_sec;
   1ca7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1ca80:	fbb3 f0f0 	udiv	r0, r3, r0
   1ca84:	6028      	str	r0, [r5, #0]
    /*
     * The maximum number of OS ticks allowed to elapse during idle is
     * limited to 1/4th the number of timer ticks before the 24-bit counter
     * rolls over.
     */
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
   1ca86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1ca8a:	fbb3 f0f0 	udiv	r0, r3, r0
   1ca8e:	6068      	str	r0, [r5, #4]

    /* disable interrupts */
    OS_ENTER_CRITICAL(sr);
   1ca90:	f7ff f96e 	bl	1bd70 <os_arch_save_sr>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1ca94:	0164      	lsls	r4, r4, #5
   1ca96:	b2e4      	uxtb	r4, r4
   1ca98:	4b16      	ldr	r3, [pc, #88]	; (1caf4 <os_tick_init+0x94>)
   1ca9a:	f883 4311 	strb.w	r4, [r3, #785]	; 0x311
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1ca9e:	4a16      	ldr	r2, [pc, #88]	; (1caf8 <os_tick_init+0x98>)
   1caa0:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1caa2:	4916      	ldr	r1, [pc, #88]	; (1cafc <os_tick_init+0x9c>)
   1caa4:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1caa8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1caac:	601a      	str	r2, [r3, #0]

    /*
     * Program the OS_TICK_TIMER to operate at 32KHz and trigger an output
     * compare interrupt at a rate of 'os_ticks_per_sec'.
     */
    OS_TICK_TIMER->TASKS_STOP = 1;
   1caae:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   1cab2:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
   1cab6:	2201      	movs	r2, #1
   1cab8:	605a      	str	r2, [r3, #4]
    OS_TICK_TIMER->TASKS_CLEAR = 1;
   1caba:	609a      	str	r2, [r3, #8]

    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
   1cabc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1cac0:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
    OS_TICK_TIMER->INTENCLR = 0xffffffff;
   1cac4:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    OS_TICK_TIMER->INTENSET = RTC_COMPARE_INT_MASK(OS_TICK_CMPREG);
   1cac8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   1cacc:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1cad0:	f8c3 614c 	str.w	r6, [r3, #332]	; 0x14c
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
   1cad4:	6829      	ldr	r1, [r5, #0]
   1cad6:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c

    OS_TICK_TIMER->TASKS_START = 1;
   1cada:	601a      	str	r2, [r3, #0]

    OS_EXIT_CRITICAL(sr);
   1cadc:	f7ff f94e 	bl	1bd7c <os_arch_restore_sr>
}
   1cae0:	bd70      	pop	{r4, r5, r6, pc}
    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1cae2:	2300      	movs	r3, #0
   1cae4:	461a      	mov	r2, r3
   1cae6:	4619      	mov	r1, r3
   1cae8:	4618      	mov	r0, r3
   1caea:	f7fd feab 	bl	1a844 <__assert_func>
   1caee:	bf00      	nop
   1caf0:	2000dec4 	.word	0x2000dec4
   1caf4:	e000e100 	.word	0xe000e100
   1caf8:	e000ed00 	.word	0xe000ed00
   1cafc:	0001c8f5 	.word	0x0001c8f5

0001cb00 <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   1cb00:	2301      	movs	r3, #1
   1cb02:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   1cb04:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
   1cb08:	4770      	bx	lr
	...

0001cb0c <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
   1cb0c:	b538      	push	{r3, r4, r5, lr}
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
   1cb0e:	7883      	ldrb	r3, [r0, #2]
   1cb10:	b393      	cbz	r3, 1cb78 <nrf_timer_set_ocmp+0x6c>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1cb12:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1cb14:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1cb18:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
   1cb1c:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
   1cb1e:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
   1cb22:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1cb26:	b11d      	cbz	r5, 1cb30 <nrf_timer_set_ocmp+0x24>
            temp += (1UL << 24);
   1cb28:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
   1cb2c:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        }
        temp |= cntr;
   1cb30:	4323      	orrs	r3, r4
        delta_t = (int32_t)(expiry - temp);
   1cb32:	1acb      	subs	r3, r1, r3
         * The nrf documentation states that you must set the output
         * compare to 2 greater than the counter to guarantee an interrupt.
         * Since the counter can tick once while we check, we make sure
         * it is greater than 2.
         */
        if (delta_t < 3) {
   1cb34:	2b02      	cmp	r3, #2
   1cb36:	dc0e      	bgt.n	1cb56 <nrf_timer_set_ocmp+0x4a>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1cb38:	7842      	ldrb	r2, [r0, #1]
   1cb3a:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1cb3c:	2b00      	cmp	r3, #0
   1cb3e:	db15      	blt.n	1cb6c <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1cb40:	f002 021f 	and.w	r2, r2, #31
   1cb44:	095b      	lsrs	r3, r3, #5
   1cb46:	2101      	movs	r1, #1
   1cb48:	fa01 f202 	lsl.w	r2, r1, r2
   1cb4c:	3340      	adds	r3, #64	; 0x40
   1cb4e:	491b      	ldr	r1, [pc, #108]	; (1cbbc <nrf_timer_set_ocmp+0xb0>)
   1cb50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   1cb54:	e00a      	b.n	1cb6c <nrf_timer_set_ocmp+0x60>
        } else  {
            if (delta_t < (1UL << 24)) {
   1cb56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1cb5a:	d208      	bcs.n	1cb6e <nrf_timer_set_ocmp+0x62>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
   1cb5c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1cb60:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1cb64:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1cb68:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
   1cb6c:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
   1cb6e:	f504 0400 	add.w	r4, r4, #8388608	; 0x800000
   1cb72:	f8c2 4548 	str.w	r4, [r2, #1352]	; 0x548
   1cb76:	e7f5      	b.n	1cb64 <nrf_timer_set_ocmp+0x58>
   1cb78:	460d      	mov	r5, r1
   1cb7a:	4604      	mov	r4, r0
        hwtimer = bsptimer->tmr_reg;
   1cb7c:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1cb7e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1cb82:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
   1cb86:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1cb8a:	2200      	movs	r2, #0
   1cb8c:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1cb90:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
   1cb94:	f7ff ffb4 	bl	1cb00 <nrf_read_timer_cntr>
   1cb98:	1b40      	subs	r0, r0, r5
   1cb9a:	2800      	cmp	r0, #0
   1cb9c:	dbe6      	blt.n	1cb6c <nrf_timer_set_ocmp+0x60>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1cb9e:	7862      	ldrb	r2, [r4, #1]
   1cba0:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1cba2:	2b00      	cmp	r3, #0
   1cba4:	dbe2      	blt.n	1cb6c <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1cba6:	f002 021f 	and.w	r2, r2, #31
   1cbaa:	095b      	lsrs	r3, r3, #5
   1cbac:	2101      	movs	r1, #1
   1cbae:	fa01 f202 	lsl.w	r2, r1, r2
   1cbb2:	3340      	adds	r3, #64	; 0x40
   1cbb4:	4901      	ldr	r1, [pc, #4]	; (1cbbc <nrf_timer_set_ocmp+0xb0>)
   1cbb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1cbba:	e7d7      	b.n	1cb6c <nrf_timer_set_ocmp+0x60>
   1cbbc:	e000e100 	.word	0xe000e100

0001cbc0 <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1cbc0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1cbc4:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1cbc8:	4770      	bx	lr

0001cbca <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1cbca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1cbce:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1cbd2:	4770      	bx	lr

0001cbd4 <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
   1cbd4:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1cbd6:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1cbd8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1cbdc:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
   1cbde:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
   1cbe0:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
   1cbe4:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1cbe8:	b1ad      	cbz	r5, 1cc16 <hal_timer_read_bsptimer+0x42>
        tcntr += (1UL << 24);
   1cbea:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
   1cbee:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
   1cbf0:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
   1cbf4:	2500      	movs	r5, #0
   1cbf6:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1cbfa:	7840      	ldrb	r0, [r0, #1]
   1cbfc:	b242      	sxtb	r2, r0
  if ((int32_t)(IRQn) >= 0)
   1cbfe:	42aa      	cmp	r2, r5
   1cc00:	db09      	blt.n	1cc16 <hal_timer_read_bsptimer+0x42>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1cc02:	f000 001f 	and.w	r0, r0, #31
   1cc06:	0952      	lsrs	r2, r2, #5
   1cc08:	2501      	movs	r5, #1
   1cc0a:	fa05 f000 	lsl.w	r0, r5, r0
   1cc0e:	3240      	adds	r2, #64	; 0x40
   1cc10:	4d04      	ldr	r5, [pc, #16]	; (1cc24 <hal_timer_read_bsptimer+0x50>)
   1cc12:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    }
    tcntr |= low32;
   1cc16:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
   1cc1a:	b904      	cbnz	r4, 1cc1e <hal_timer_read_bsptimer+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
   1cc1c:	b662      	cpsie	i

    return tcntr;
}
   1cc1e:	bc30      	pop	{r4, r5}
   1cc20:	4770      	bx	lr
   1cc22:	bf00      	nop
   1cc24:	e000e100 	.word	0xe000e100

0001cc28 <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
   1cc28:	b570      	push	{r4, r5, r6, lr}
   1cc2a:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1cc2c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1cc30:	b672      	cpsid	i
   1cc32:	e013      	b.n	1cc5c <hal_timer_chk_queue+0x34>
             * If we are within 3 ticks of RTC, we wont be able to set compare.
             * Thus, we have to service this timer early.
             */
            delta = -3;
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1cc34:	6928      	ldr	r0, [r5, #16]
   1cc36:	f7ff ff63 	bl	1cb00 <nrf_read_timer_cntr>
            delta = 0;
   1cc3a:	2200      	movs	r2, #0
        }
        if ((int32_t)(tcntr - timer->expiry) >= delta) {
   1cc3c:	68e3      	ldr	r3, [r4, #12]
   1cc3e:	1ac0      	subs	r0, r0, r3
   1cc40:	4290      	cmp	r0, r2
   1cc42:	db19      	blt.n	1cc78 <hal_timer_chk_queue+0x50>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1cc44:	6923      	ldr	r3, [r4, #16]
   1cc46:	b1a3      	cbz	r3, 1cc72 <hal_timer_chk_queue+0x4a>
   1cc48:	6962      	ldr	r2, [r4, #20]
   1cc4a:	615a      	str	r2, [r3, #20]
   1cc4c:	6963      	ldr	r3, [r4, #20]
   1cc4e:	6922      	ldr	r2, [r4, #16]
   1cc50:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   1cc52:	2300      	movs	r3, #0
   1cc54:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   1cc56:	6863      	ldr	r3, [r4, #4]
   1cc58:	68a0      	ldr	r0, [r4, #8]
   1cc5a:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
   1cc5c:	696c      	ldr	r4, [r5, #20]
   1cc5e:	b15c      	cbz	r4, 1cc78 <hal_timer_chk_queue+0x50>
        if (bsptimer->tmr_rtc) {
   1cc60:	78ab      	ldrb	r3, [r5, #2]
   1cc62:	2b00      	cmp	r3, #0
   1cc64:	d0e6      	beq.n	1cc34 <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
   1cc66:	4628      	mov	r0, r5
   1cc68:	f7ff ffb4 	bl	1cbd4 <hal_timer_read_bsptimer>
            delta = -3;
   1cc6c:	f06f 0202 	mvn.w	r2, #2
   1cc70:	e7e4      	b.n	1cc3c <hal_timer_chk_queue+0x14>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1cc72:	6963      	ldr	r3, [r4, #20]
   1cc74:	61ab      	str	r3, [r5, #24]
   1cc76:	e7e9      	b.n	1cc4c <hal_timer_chk_queue+0x24>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
   1cc78:	696b      	ldr	r3, [r5, #20]
    if (timer) {
   1cc7a:	b133      	cbz	r3, 1cc8a <hal_timer_chk_queue+0x62>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   1cc7c:	68d9      	ldr	r1, [r3, #12]
   1cc7e:	4628      	mov	r0, r5
   1cc80:	f7ff ff44 	bl	1cb0c <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   1cc84:	b906      	cbnz	r6, 1cc88 <hal_timer_chk_queue+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   1cc86:	b662      	cpsie	i
}
   1cc88:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
   1cc8a:	78ab      	ldrb	r3, [r5, #2]
   1cc8c:	b11b      	cbz	r3, 1cc96 <hal_timer_chk_queue+0x6e>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   1cc8e:	6928      	ldr	r0, [r5, #16]
   1cc90:	f7ff ff9b 	bl	1cbca <nrf_rtc_disable_ocmp>
   1cc94:	e7f6      	b.n	1cc84 <hal_timer_chk_queue+0x5c>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   1cc96:	6928      	ldr	r0, [r5, #16]
   1cc98:	f7ff ff92 	bl	1cbc0 <nrf_timer_disable_ocmp>
   1cc9c:	e7f2      	b.n	1cc84 <hal_timer_chk_queue+0x5c>

0001cc9e <hal_timer_irq_handler>:
#if (MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2) || \
     MYNEWT_VAL(TIMER_3) || MYNEWT_VAL(TIMER_4))

static void
hal_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
   1cc9e:	b510      	push	{r4, lr}
    NRF_TIMER_Type *hwtimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    hwtimer = bsptimer->tmr_reg;
   1cca0:	6904      	ldr	r4, [r0, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1cca2:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    if (compare) {
   1cca6:	b113      	cbz	r3, 1ccae <hal_timer_irq_handler+0x10>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1cca8:	2300      	movs	r3, #0
   1ccaa:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    }

    /* XXX: make these stats? */
    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
   1ccae:	6883      	ldr	r3, [r0, #8]
   1ccb0:	3301      	adds	r3, #1
   1ccb2:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
   1ccb4:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
   1ccb8:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   1ccbc:	d100      	bne.n	1ccc0 <hal_timer_irq_handler+0x22>
        /* XXX: Recommended by nordic to make sure interrupts are cleared */
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    }

    os_trace_isr_exit();
}
   1ccbe:	bd10      	pop	{r4, pc}
        hal_timer_chk_queue(bsptimer);
   1ccc0:	f7ff ffb2 	bl	1cc28 <hal_timer_chk_queue>
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1ccc4:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
}
   1ccc8:	e7f9      	b.n	1ccbe <hal_timer_irq_handler+0x20>
	...

0001cccc <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
   1cccc:	b508      	push	{r3, lr}
    hal_timer_irq_handler(&nrf52_hal_timer0);
   1ccce:	4802      	ldr	r0, [pc, #8]	; (1ccd8 <nrf52_timer0_irq_handler+0xc>)
   1ccd0:	f7ff ffe5 	bl	1cc9e <hal_timer_irq_handler>
}
   1ccd4:	bd08      	pop	{r3, pc}
   1ccd6:	bf00      	nop
   1ccd8:	2000ded0 	.word	0x2000ded0

0001ccdc <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1ccdc:	2805      	cmp	r0, #5
   1ccde:	dc1c      	bgt.n	1cd1a <hal_timer_init+0x3e>
   1cce0:	4b12      	ldr	r3, [pc, #72]	; (1cd2c <hal_timer_init+0x50>)
   1cce2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1cce6:	b1d3      	cbz	r3, 1cd1e <hal_timer_init+0x42>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
   1cce8:	781a      	ldrb	r2, [r3, #0]
   1ccea:	b9d2      	cbnz	r2, 1cd22 <hal_timer_init+0x46>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
   1ccec:	b9d8      	cbnz	r0, 1cd26 <hal_timer_init+0x4a>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
   1ccee:	4a10      	ldr	r2, [pc, #64]	; (1cd30 <hal_timer_init+0x54>)
   1ccf0:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
   1ccf2:	2208      	movs	r2, #8
   1ccf4:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ccf6:	4b0f      	ldr	r3, [pc, #60]	; (1cd34 <hal_timer_init+0x58>)
   1ccf8:	f44f 7280 	mov.w	r2, #256	; 0x100
   1ccfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   1cd00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1cd04:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1cd08:	22e0      	movs	r2, #224	; 0xe0
   1cd0a:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1cd0e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   1cd12:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1cd14:	4a08      	ldr	r2, [pc, #32]	; (1cd38 <hal_timer_init+0x5c>)
   1cd16:	661a      	str	r2, [r3, #96]	; 0x60
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
   1cd18:	4770      	bx	lr

err:
    return rc;
   1cd1a:	2016      	movs	r0, #22
   1cd1c:	4770      	bx	lr
   1cd1e:	2016      	movs	r0, #22
   1cd20:	4770      	bx	lr
   1cd22:	2016      	movs	r0, #22
   1cd24:	4770      	bx	lr
   1cd26:	2016      	movs	r0, #22
}
   1cd28:	4770      	bx	lr
   1cd2a:	bf00      	nop
   1cd2c:	0002273c 	.word	0x0002273c
   1cd30:	40008000 	.word	0x40008000
   1cd34:	e000e100 	.word	0xe000e100
   1cd38:	0001cccd 	.word	0x0001cccd

0001cd3c <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1cd3c:	2805      	cmp	r0, #5
   1cd3e:	dc65      	bgt.n	1ce0c <hal_timer_config+0xd0>
   1cd40:	4b39      	ldr	r3, [pc, #228]	; (1ce28 <hal_timer_config+0xec>)
   1cd42:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1cd46:	2800      	cmp	r0, #0
   1cd48:	d062      	beq.n	1ce10 <hal_timer_config+0xd4>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
   1cd4a:	4b38      	ldr	r3, [pc, #224]	; (1ce2c <hal_timer_config+0xf0>)
   1cd4c:	fbb3 f1f1 	udiv	r1, r3, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1cd50:	7803      	ldrb	r3, [r0, #0]
   1cd52:	2b00      	cmp	r3, #0
   1cd54:	d15e      	bne.n	1ce14 <hal_timer_config+0xd8>
   1cd56:	2900      	cmp	r1, #0
   1cd58:	d05e      	beq.n	1ce18 <hal_timer_config+0xdc>
   1cd5a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1cd5e:	d85d      	bhi.n	1ce1c <hal_timer_config+0xe0>
        (bsptimer->tmr_reg == NULL)) {
   1cd60:	6902      	ldr	r2, [r0, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1cd62:	2a00      	cmp	r2, #0
   1cd64:	d05c      	beq.n	1ce20 <hal_timer_config+0xe4>
{
   1cd66:	b430      	push	{r4, r5}
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
   1cd68:	2901      	cmp	r1, #1
   1cd6a:	d013      	beq.n	1cd94 <hal_timer_config+0x58>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1cd6c:	2301      	movs	r3, #1
   1cd6e:	2b09      	cmp	r3, #9
   1cd70:	d810      	bhi.n	1cd94 <hal_timer_config+0x58>
            if (div <= (1 << prescaler)) {
   1cd72:	2201      	movs	r2, #1
   1cd74:	409a      	lsls	r2, r3
   1cd76:	428a      	cmp	r2, r1
   1cd78:	d202      	bcs.n	1cd80 <hal_timer_config+0x44>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1cd7a:	3301      	adds	r3, #1
   1cd7c:	b2db      	uxtb	r3, r3
   1cd7e:	e7f6      	b.n	1cd6e <hal_timer_config+0x32>
                min_delta = div - (1 << (prescaler - 1));
   1cd80:	1e5c      	subs	r4, r3, #1
   1cd82:	2501      	movs	r5, #1
   1cd84:	fa05 f404 	lsl.w	r4, r5, r4
   1cd88:	1b0c      	subs	r4, r1, r4
                max_delta = (1 << prescaler) - div;
   1cd8a:	1a51      	subs	r1, r2, r1
                if (min_delta < max_delta) {
   1cd8c:	428c      	cmp	r4, r1
   1cd8e:	d201      	bcs.n	1cd94 <hal_timer_config+0x58>
                    prescaler -= 1;
   1cd90:	3b01      	subs	r3, #1
   1cd92:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
   1cd94:	4a25      	ldr	r2, [pc, #148]	; (1ce2c <hal_timer_config+0xf0>)
   1cd96:	411a      	asrs	r2, r3
   1cd98:	60c2      	str	r2, [r0, #12]
    bsptimer->tmr_enabled = 1;
   1cd9a:	2201      	movs	r2, #1
   1cd9c:	7002      	strb	r2, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1cd9e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1cda2:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
   1cda4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1cda8:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
   1cdac:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
   1cdb0:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
   1cdb4:	d00c      	beq.n	1cdd0 <hal_timer_config+0x94>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   1cdb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1cdba:	2100      	movs	r1, #0
   1cdbc:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   1cdc0:	2101      	movs	r1, #1
   1cdc2:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
   1cdc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1cdc8:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   1cdcc:	2a00      	cmp	r2, #0
   1cdce:	d0f9      	beq.n	1cdc4 <hal_timer_config+0x88>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
   1cdd0:	6902      	ldr	r2, [r0, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
   1cdd2:	2101      	movs	r1, #1
   1cdd4:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
   1cdd6:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
   1cdd8:	2500      	movs	r5, #0
   1cdda:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
   1cdde:	2503      	movs	r5, #3
   1cde0:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
   1cde4:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
   1cde8:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   1cdea:	7842      	ldrb	r2, [r0, #1]
   1cdec:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1cdee:	2b00      	cmp	r3, #0
   1cdf0:	db07      	blt.n	1ce02 <hal_timer_config+0xc6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1cdf2:	f002 021f 	and.w	r2, r2, #31
   1cdf6:	095b      	lsrs	r3, r3, #5
   1cdf8:	fa01 f202 	lsl.w	r2, r1, r2
   1cdfc:	490c      	ldr	r1, [pc, #48]	; (1ce30 <hal_timer_config+0xf4>)
   1cdfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
   1ce02:	b97c      	cbnz	r4, 1ce24 <hal_timer_config+0xe8>
  __ASM volatile ("cpsie i" : : : "memory");
   1ce04:	b662      	cpsie	i

    return 0;
   1ce06:	2000      	movs	r0, #0

err:
    return rc;
}
   1ce08:	bc30      	pop	{r4, r5}
   1ce0a:	4770      	bx	lr
    return rc;
   1ce0c:	2016      	movs	r0, #22
   1ce0e:	4770      	bx	lr
   1ce10:	2016      	movs	r0, #22
   1ce12:	4770      	bx	lr
   1ce14:	2016      	movs	r0, #22
   1ce16:	4770      	bx	lr
   1ce18:	2016      	movs	r0, #22
   1ce1a:	4770      	bx	lr
   1ce1c:	2016      	movs	r0, #22
   1ce1e:	4770      	bx	lr
   1ce20:	2016      	movs	r0, #22
}
   1ce22:	4770      	bx	lr
    return 0;
   1ce24:	2000      	movs	r0, #0
   1ce26:	e7ef      	b.n	1ce08 <hal_timer_config+0xcc>
   1ce28:	0002273c 	.word	0x0002273c
   1ce2c:	00f42400 	.word	0x00f42400
   1ce30:	e000e100 	.word	0xe000e100

0001ce34 <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
   1ce34:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1ce36:	2805      	cmp	r0, #5
   1ce38:	dc0c      	bgt.n	1ce54 <hal_timer_read+0x20>
   1ce3a:	4b09      	ldr	r3, [pc, #36]	; (1ce60 <hal_timer_read+0x2c>)
   1ce3c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1ce40:	b140      	cbz	r0, 1ce54 <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
   1ce42:	7883      	ldrb	r3, [r0, #2]
   1ce44:	b91b      	cbnz	r3, 1ce4e <hal_timer_read+0x1a>
        tcntr = hal_timer_read_bsptimer(bsptimer);
    } else {
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1ce46:	6900      	ldr	r0, [r0, #16]
   1ce48:	f7ff fe5a 	bl	1cb00 <nrf_read_timer_cntr>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
   1ce4c:	bd08      	pop	{r3, pc}
        tcntr = hal_timer_read_bsptimer(bsptimer);
   1ce4e:	f7ff fec1 	bl	1cbd4 <hal_timer_read_bsptimer>
   1ce52:	e7fb      	b.n	1ce4c <hal_timer_read+0x18>
    assert(0);
   1ce54:	2300      	movs	r3, #0
   1ce56:	461a      	mov	r2, r3
   1ce58:	4619      	mov	r1, r3
   1ce5a:	4618      	mov	r0, r3
   1ce5c:	f7fd fcf2 	bl	1a844 <__assert_func>
   1ce60:	0002273c 	.word	0x0002273c

0001ce64 <nrf52_periph_create_timers>:
};
#endif

static void
nrf52_periph_create_timers(void)
{
   1ce64:	b508      	push	{r3, lr}
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
   1ce66:	2100      	movs	r1, #0
   1ce68:	4608      	mov	r0, r1
   1ce6a:	f7ff ff37 	bl	1ccdc <hal_timer_init>
    assert(rc == 0);
   1ce6e:	b920      	cbnz	r0, 1ce7a <nrf52_periph_create_timers+0x16>
    rc = hal_timer_init(5, NULL);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   1ce70:	4808      	ldr	r0, [pc, #32]	; (1ce94 <nrf52_periph_create_timers+0x30>)
   1ce72:	f7fd ff11 	bl	1ac98 <os_cputime_init>
    assert(rc == 0);
   1ce76:	b930      	cbnz	r0, 1ce86 <nrf52_periph_create_timers+0x22>
#endif
}
   1ce78:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1ce7a:	2300      	movs	r3, #0
   1ce7c:	461a      	mov	r2, r3
   1ce7e:	4619      	mov	r1, r3
   1ce80:	4618      	mov	r0, r3
   1ce82:	f7fd fcdf 	bl	1a844 <__assert_func>
    assert(rc == 0);
   1ce86:	2300      	movs	r3, #0
   1ce88:	461a      	mov	r2, r3
   1ce8a:	4619      	mov	r1, r3
   1ce8c:	4618      	mov	r0, r3
   1ce8e:	f7fd fcd9 	bl	1a844 <__assert_func>
   1ce92:	bf00      	nop
   1ce94:	000f4240 	.word	0x000f4240

0001ce98 <nrf52_periph_create_i2c>:
#endif
}

static void
nrf52_periph_create_i2c(void)
{
   1ce98:	b508      	push	{r3, lr}
    rc = bus_i2c_hal_dev_create("i2c1", &i2c1_bus,
                                (struct bus_i2c_dev_cfg *)&i2c1_cfg);
    assert(rc == 0);
#endif
#else
    rc = hal_i2c_init(1, (void *)&hal_i2c1_cfg);
   1ce9a:	4906      	ldr	r1, [pc, #24]	; (1ceb4 <nrf52_periph_create_i2c+0x1c>)
   1ce9c:	2001      	movs	r0, #1
   1ce9e:	f7fd f82b 	bl	19ef8 <hal_i2c_init>
    assert(rc == 0);
   1cea2:	b900      	cbnz	r0, 1cea6 <nrf52_periph_create_i2c+0xe>
#endif
#endif
}
   1cea4:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1cea6:	2300      	movs	r3, #0
   1cea8:	461a      	mov	r2, r3
   1ceaa:	4619      	mov	r1, r3
   1ceac:	4618      	mov	r0, r3
   1ceae:	f7fd fcc9 	bl	1a844 <__assert_func>
   1ceb2:	bf00      	nop
   1ceb4:	00022754 	.word	0x00022754

0001ceb8 <nrf52_periph_create_spi>:

static void
nrf52_periph_create_spi(void)
{
   1ceb8:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BUS_DRIVER_PRESENT)
    rc = bus_spi_hal_dev_create("spi0",
                                &spi0_bus, (struct bus_spi_dev_cfg *)&spi0_cfg);
    assert(rc == 0);
#else
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
   1ceba:	2200      	movs	r2, #0
   1cebc:	4905      	ldr	r1, [pc, #20]	; (1ced4 <nrf52_periph_create_spi+0x1c>)
   1cebe:	4610      	mov	r0, r2
   1cec0:	f7fd fb4e 	bl	1a560 <hal_spi_init>
    assert(rc == 0);
   1cec4:	b900      	cbnz	r0, 1cec8 <nrf52_periph_create_spi+0x10>
#endif
#if MYNEWT_VAL(SPI_2_SLAVE)
    rc = hal_spi_init(2, (void *)&os_bsp_spi2s_cfg, HAL_SPI_TYPE_SLAVE);
    assert(rc == 0);
#endif
}
   1cec6:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1cec8:	2300      	movs	r3, #0
   1ceca:	461a      	mov	r2, r3
   1cecc:	4619      	mov	r1, r3
   1cece:	4618      	mov	r0, r3
   1ced0:	f7fd fcb8 	bl	1a844 <__assert_func>
   1ced4:	00022760 	.word	0x00022760

0001ced8 <nrf52_periph_create>:

void
nrf52_periph_create(void)
{
   1ced8:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
   1ceda:	f7ff ffc3 	bl	1ce64 <nrf52_periph_create_timers>
    nrf52_periph_create_adc();
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
   1cede:	f7ff ffdb 	bl	1ce98 <nrf52_periph_create_i2c>
    nrf52_periph_create_spi();
   1cee2:	f7ff ffe9 	bl	1ceb8 <nrf52_periph_create_spi>
}
   1cee6:	bd08      	pop	{r3, pc}

0001cee8 <sensor_dev_create>:
    assert(rc == 0);

    rc = config_icp10114_sensor();
    assert(rc == 0);
#endif
}
   1cee8:	4770      	bx	lr
	...

0001ceec <sensor_mgr_remove>:
}

static void
sensor_mgr_remove(struct sensor *sensor)
{
    SLIST_REMOVE(&sensor_mgr.mgr_sensor_list, sensor, sensor, s_next);
   1ceec:	4b08      	ldr	r3, [pc, #32]	; (1cf10 <sensor_mgr_remove+0x24>)
   1ceee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1cef0:	4282      	cmp	r2, r0
   1cef2:	d104      	bne.n	1cefe <sensor_mgr_remove+0x12>
   1cef4:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
   1cef8:	631a      	str	r2, [r3, #48]	; 0x30
   1cefa:	4770      	bx	lr
   1cefc:	461a      	mov	r2, r3
   1cefe:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1cf02:	4283      	cmp	r3, r0
   1cf04:	d1fa      	bne.n	1cefc <sensor_mgr_remove+0x10>
   1cf06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1cf0a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
   1cf0e:	4770      	bx	lr
   1cf10:	2000def0 	.word	0x2000def0

0001cf14 <sensor_mgr_insert>:

static void
sensor_mgr_insert(struct sensor *sensor)
{
   1cf14:	b410      	push	{r4}
    struct sensor *cursor, *prev;

    prev = cursor = NULL;
    if (!sensor->s_poll_rate) {
   1cf16:	6a03      	ldr	r3, [r0, #32]
   1cf18:	b993      	cbnz	r3, 1cf40 <sensor_mgr_insert+0x2c>
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1cf1a:	4b15      	ldr	r3, [pc, #84]	; (1cf70 <sensor_mgr_insert+0x5c>)
   1cf1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1cf1e:	2100      	movs	r1, #0
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1cf20:	e002      	b.n	1cf28 <sensor_mgr_insert+0x14>
            prev = cursor;
   1cf22:	4619      	mov	r1, r3
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1cf24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1cf28:	2b00      	cmp	r3, #0
   1cf2a:	d1fa      	bne.n	1cf22 <sensor_mgr_insert+0xe>

        prev = cursor;
    }

insert:
    if (prev == NULL) {
   1cf2c:	b1c9      	cbz	r1, 1cf62 <sensor_mgr_insert+0x4e>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
    } else {
        SLIST_INSERT_AFTER(prev, sensor, s_next);
   1cf2e:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
   1cf32:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
   1cf36:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
    }
}
   1cf3a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1cf3e:	4770      	bx	lr
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1cf40:	4b0b      	ldr	r3, [pc, #44]	; (1cf70 <sensor_mgr_insert+0x5c>)
   1cf42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1cf44:	2100      	movs	r1, #0
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1cf46:	2b00      	cmp	r3, #0
   1cf48:	d0f0      	beq.n	1cf2c <sensor_mgr_insert+0x18>
        if (!cursor->s_poll_rate) {
   1cf4a:	6a1a      	ldr	r2, [r3, #32]
   1cf4c:	2a00      	cmp	r2, #0
   1cf4e:	d0ed      	beq.n	1cf2c <sensor_mgr_insert+0x18>
        if (OS_TIME_TICK_LT(sensor->s_next_run, cursor->s_next_run)) {
   1cf50:	6a42      	ldr	r2, [r0, #36]	; 0x24
   1cf52:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   1cf54:	1b12      	subs	r2, r2, r4
   1cf56:	2a00      	cmp	r2, #0
   1cf58:	dbe8      	blt.n	1cf2c <sensor_mgr_insert+0x18>
        prev = cursor;
   1cf5a:	4619      	mov	r1, r3
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1cf5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1cf60:	e7f1      	b.n	1cf46 <sensor_mgr_insert+0x32>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
   1cf62:	4b03      	ldr	r3, [pc, #12]	; (1cf70 <sensor_mgr_insert+0x5c>)
   1cf64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1cf66:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   1cf6a:	6318      	str	r0, [r3, #48]	; 0x30
   1cf6c:	e7e5      	b.n	1cf3a <sensor_mgr_insert+0x26>
   1cf6e:	bf00      	nop
   1cf70:	2000def0 	.word	0x2000def0

0001cf74 <sensor_type_traits_empty>:
}

static uint8_t
sensor_type_traits_empty(struct sensor *sensor)
{
    return SLIST_EMPTY(&sensor->s_type_traits_list);
   1cf74:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
}
   1cf76:	fab0 f080 	clz	r0, r0
   1cf7a:	0940      	lsrs	r0, r0, #5
   1cf7c:	4770      	bx	lr
	...

0001cf80 <sensor_mgr_evq_set>:
}

static void
sensor_mgr_evq_set(struct os_eventq *evq)
{
    sensor_mgr.mgr_eventq = evq;
   1cf80:	4b01      	ldr	r3, [pc, #4]	; (1cf88 <sensor_mgr_evq_set+0x8>)
   1cf82:	62d8      	str	r0, [r3, #44]	; 0x2c
}
   1cf84:	4770      	bx	lr
   1cf86:	bf00      	nop
   1cf88:	2000def0 	.word	0x2000def0

0001cf8c <sensor_mgr_match_bytype>:
 *
 * @return 1 if matches, 0 if it doesn't match.
 */
int
sensor_mgr_match_bytype(struct sensor *sensor, void *arg)
{
   1cf8c:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
     * sensor, and type is the bitmask we're searching for. We also look at
     * the mask as the driver might be configured to work in a mode where only
     * some of the sensors are supported but not all. Compare the three,
     * and if there is a match, return 1. If it is not supported, return 0.
     */
    return (*type & sensor->s_types & sensor->s_mask) ? 1 : 0;
   1cf90:	e9d1 2300 	ldrd	r2, r3, [r1]
   1cf94:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1cf98:	ea02 0b04 	and.w	fp, r2, r4
   1cf9c:	ea03 0c05 	and.w	ip, r3, r5
   1cfa0:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
   1cfa4:	ea0b 0200 	and.w	r2, fp, r0
   1cfa8:	ea0c 0301 	and.w	r3, ip, r1
   1cfac:	4313      	orrs	r3, r2
}
   1cfae:	bf14      	ite	ne
   1cfb0:	2001      	movne	r0, #1
   1cfb2:	2000      	moveq	r0, #0
   1cfb4:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1cfb8:	4770      	bx	lr

0001cfba <sensor_read_data_func>:
}

static int
sensor_read_data_func(struct sensor *sensor, void *arg, void *data,
                      sensor_type_t type)
{
   1cfba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cfbe:	b083      	sub	sp, #12
   1cfc0:	4605      	mov	r5, r0
   1cfc2:	4689      	mov	r9, r1
   1cfc4:	4690      	mov	r8, r2
   1cfc6:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    struct sensor_listener *listener;
    struct sensor_read_ctx *ctx;

    ctx = (struct sensor_read_ctx *) arg;

    if ((uint8_t)(uintptr_t)(ctx->user_arg) != SENSOR_IGN_LISTENER) {
   1cfca:	790b      	ldrb	r3, [r1, #4]
   1cfcc:	2b01      	cmp	r3, #1
   1cfce:	d013      	beq.n	1cff8 <sensor_read_data_func+0x3e>
        /* Notify all listeners first */
        SLIST_FOREACH(listener, &sensor->s_listener_list, sl_next) {
   1cfd0:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
   1cfd2:	e000      	b.n	1cfd6 <sensor_read_data_func+0x1c>
   1cfd4:	6924      	ldr	r4, [r4, #16]
   1cfd6:	b17c      	cbz	r4, 1cff8 <sensor_read_data_func+0x3e>
            if (listener->sl_sensor_type & type) {
   1cfd8:	e9d4 0100 	ldrd	r0, r1, [r4]
   1cfdc:	ea00 0206 	and.w	r2, r0, r6
   1cfe0:	ea01 0307 	and.w	r3, r1, r7
   1cfe4:	4313      	orrs	r3, r2
   1cfe6:	d0f5      	beq.n	1cfd4 <sensor_read_data_func+0x1a>
                listener->sl_func(sensor, listener->sl_arg, data, type);
   1cfe8:	68a3      	ldr	r3, [r4, #8]
   1cfea:	68e1      	ldr	r1, [r4, #12]
   1cfec:	e9cd 6700 	strd	r6, r7, [sp]
   1cff0:	4642      	mov	r2, r8
   1cff2:	4628      	mov	r0, r5
   1cff4:	4798      	blx	r3
   1cff6:	e7ed      	b.n	1cfd4 <sensor_read_data_func+0x1a>
            }
        }
    }

    /* Call data function */
    if (ctx->user_func != NULL) {
   1cff8:	f8d9 3000 	ldr.w	r3, [r9]
   1cffc:	b14b      	cbz	r3, 1d012 <sensor_read_data_func+0x58>
        return (ctx->user_func(sensor, ctx->user_arg, data, type));
   1cffe:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1d002:	e9cd 6700 	strd	r6, r7, [sp]
   1d006:	4642      	mov	r2, r8
   1d008:	4628      	mov	r0, r5
   1d00a:	4798      	blx	r3
    }

    return (0);
}
   1d00c:	b003      	add	sp, #12
   1d00e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (0);
   1d012:	2000      	movs	r0, #0
   1d014:	e7fa      	b.n	1d00c <sensor_read_data_func+0x52>
	...

0001d018 <sensor_base_ts_update_event>:
{
   1d018:	b530      	push	{r4, r5, lr}
   1d01a:	b087      	sub	sp, #28
    ticks = os_time_get();
   1d01c:	f7fe fe30 	bl	1bc80 <os_time_get>
   1d020:	4604      	mov	r4, r0
    rc = os_gettimeofday(&ostv, &ostz);
   1d022:	a901      	add	r1, sp, #4
   1d024:	a802      	add	r0, sp, #8
   1d026:	f7fe fe65 	bl	1bcf4 <os_gettimeofday>
    if (rc) {
   1d02a:	b138      	cbz	r0, 1d03c <sensor_base_ts_update_event+0x24>
        ticks += OS_TICKS_PER_SEC * 600;
   1d02c:	f504 3496 	add.w	r4, r4, #76800	; 0x12c00
    os_callout_reset(&st_up_osco, ticks);
   1d030:	4621      	mov	r1, r4
   1d032:	4809      	ldr	r0, [pc, #36]	; (1d058 <sensor_base_ts_update_event+0x40>)
   1d034:	f7fd fdac 	bl	1ab90 <os_callout_reset>
}
   1d038:	b007      	add	sp, #28
   1d03a:	bd30      	pop	{r4, r5, pc}
    ticks += OS_TICKS_PER_SEC * 2000;
   1d03c:	f504 347a 	add.w	r4, r4, #256000	; 0x3e800
    sensor_base_ts.st_ostv = ostv;
   1d040:	4d06      	ldr	r5, [pc, #24]	; (1d05c <sensor_base_ts_update_event+0x44>)
   1d042:	ab06      	add	r3, sp, #24
   1d044:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1d048:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1d04c:	9b01      	ldr	r3, [sp, #4]
   1d04e:	612b      	str	r3, [r5, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1d050:	f7fd fe28 	bl	1aca4 <os_cputime_get32>
   1d054:	6168      	str	r0, [r5, #20]
   1d056:	e7eb      	b.n	1d030 <sensor_base_ts_update_event+0x18>
   1d058:	2000df24 	.word	0x2000df24
   1d05c:	2000df48 	.word	0x2000df48

0001d060 <sensor_up_timestamp>:
    assert(rc == 0);
}

static void
sensor_up_timestamp(struct sensor *sensor)
{
   1d060:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   1d064:	4604      	mov	r4, r0
    uint32_t curr_ts_ticks;
    uint32_t ts;

    curr_ts_ticks = os_cputime_get32();
   1d066:	f7fd fe1d 	bl	1aca4 <os_cputime_get32>

    ts = os_cputime_ticks_to_usecs(curr_ts_ticks -
   1d06a:	4a0e      	ldr	r2, [pc, #56]	; (1d0a4 <sensor_up_timestamp+0x44>)
   1d06c:	6955      	ldr	r5, [r2, #20]
   1d06e:	1b43      	subs	r3, r0, r5
             sensor_base_ts.st_cputime);

    /* Updating cputime */
    sensor_base_ts.st_cputime = sensor->s_sts.st_cputime = curr_ts_ticks;
   1d070:	6460      	str	r0, [r4, #68]	; 0x44
   1d072:	6150      	str	r0, [r2, #20]

    /* Updating seconds */
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1d074:	e9d2 0100 	ldrd	r0, r1, [r2]
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1d078:	6895      	ldr	r5, [r2, #8]
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1d07a:	441d      	add	r5, r3
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1d07c:	4b0a      	ldr	r3, [pc, #40]	; (1d0a8 <sensor_up_timestamp+0x48>)
   1d07e:	fba3 c305 	umull	ip, r3, r3, r5
   1d082:	0c9b      	lsrs	r3, r3, #18
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1d084:	eb10 0b03 	adds.w	fp, r0, r3
   1d088:	f141 0c00 	adc.w	ip, r1, #0
   1d08c:	e9c2 bc00 	strd	fp, ip, [r2]
    sensor->s_sts.st_ostv.tv_sec = sensor_base_ts.st_ostv.tv_sec;
   1d090:	e9c4 bc0c 	strd	fp, ip, [r4, #48]	; 0x30

    /* Updating Micro seconds */
    sensor_base_ts.st_ostv.tv_usec  =
        (sensor_base_ts.st_ostv.tv_usec + ts)%1000000;
   1d094:	4905      	ldr	r1, [pc, #20]	; (1d0ac <sensor_up_timestamp+0x4c>)
   1d096:	fb01 5113 	mls	r1, r1, r3, r5
    sensor_base_ts.st_ostv.tv_usec  =
   1d09a:	6091      	str	r1, [r2, #8]
    sensor->s_sts.st_ostv.tv_usec = sensor_base_ts.st_ostv.tv_usec;
   1d09c:	63a1      	str	r1, [r4, #56]	; 0x38

}
   1d09e:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   1d0a2:	bf00      	nop
   1d0a4:	2000df48 	.word	0x2000df48
   1d0a8:	431bde83 	.word	0x431bde83
   1d0ac:	000f4240 	.word	0x000f4240

0001d0b0 <sensor_mgr_lock>:
{
   1d0b0:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor_mgr.mgr_lock, OS_TIMEOUT_NEVER);
   1d0b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d0b6:	4804      	ldr	r0, [pc, #16]	; (1d0c8 <sensor_mgr_lock+0x18>)
   1d0b8:	f7fe fa5c 	bl	1b574 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1d0bc:	b108      	cbz	r0, 1d0c2 <sensor_mgr_lock+0x12>
   1d0be:	2809      	cmp	r0, #9
   1d0c0:	d000      	beq.n	1d0c4 <sensor_mgr_lock+0x14>
}
   1d0c2:	bd08      	pop	{r3, pc}
        return (0);
   1d0c4:	2000      	movs	r0, #0
   1d0c6:	e7fc      	b.n	1d0c2 <sensor_mgr_lock+0x12>
   1d0c8:	2000def0 	.word	0x2000def0

0001d0cc <sensor_mgr_unlock>:
{
   1d0cc:	b508      	push	{r3, lr}
    (void) os_mutex_release(&sensor_mgr.mgr_lock);
   1d0ce:	4802      	ldr	r0, [pc, #8]	; (1d0d8 <sensor_mgr_unlock+0xc>)
   1d0d0:	f7fe f9f4 	bl	1b4bc <os_mutex_release>
}
   1d0d4:	bd08      	pop	{r3, pc}
   1d0d6:	bf00      	nop
   1d0d8:	2000def0 	.word	0x2000def0

0001d0dc <sensor_mgr_evq_get>:
}
   1d0dc:	4b01      	ldr	r3, [pc, #4]	; (1d0e4 <sensor_mgr_evq_get+0x8>)
   1d0de:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   1d0e0:	4770      	bx	lr
   1d0e2:	bf00      	nop
   1d0e4:	2000def0 	.word	0x2000def0

0001d0e8 <sensor_mgr_init>:
{
   1d0e8:	b570      	push	{r4, r5, r6, lr}
   1d0ea:	b088      	sub	sp, #32
    sensor_mgr_evq_set(os_eventq_dflt_get());
   1d0ec:	f7fd ff68 	bl	1afc0 <os_eventq_dflt_get>
   1d0f0:	f7ff ff46 	bl	1cf80 <sensor_mgr_evq_set>
    rc = os_mempool_init(&sensor_notify_evt_pool,
   1d0f4:	4b1c      	ldr	r3, [pc, #112]	; (1d168 <sensor_mgr_init+0x80>)
   1d0f6:	9300      	str	r3, [sp, #0]
   1d0f8:	4b1c      	ldr	r3, [pc, #112]	; (1d16c <sensor_mgr_init+0x84>)
   1d0fa:	2218      	movs	r2, #24
   1d0fc:	2105      	movs	r1, #5
   1d0fe:	481c      	ldr	r0, [pc, #112]	; (1d170 <sensor_mgr_init+0x88>)
   1d100:	f7fe f8e8 	bl	1b2d4 <os_mempool_init>
    assert(rc == OS_OK);
   1d104:	bb50      	cbnz	r0, 1d15c <sensor_mgr_init+0x74>
    os_callout_init(&sensor_mgr.mgr_wakeup_callout, sensor_mgr_evq_get(),
   1d106:	f7ff ffe9 	bl	1d0dc <sensor_mgr_evq_get>
   1d10a:	4e1a      	ldr	r6, [pc, #104]	; (1d174 <sensor_mgr_init+0x8c>)
   1d10c:	2300      	movs	r3, #0
   1d10e:	4a1a      	ldr	r2, [pc, #104]	; (1d178 <sensor_mgr_init+0x90>)
   1d110:	4601      	mov	r1, r0
   1d112:	4630      	mov	r0, r6
   1d114:	f7fd fd10 	bl	1ab38 <os_callout_init>
    os_gettimeofday(&ostv, &ostz);
   1d118:	ad04      	add	r5, sp, #16
   1d11a:	a903      	add	r1, sp, #12
   1d11c:	4628      	mov	r0, r5
   1d11e:	f7fe fde9 	bl	1bcf4 <os_gettimeofday>
    sensor_base_ts.st_ostv = ostv;
   1d122:	4c16      	ldr	r4, [pc, #88]	; (1d17c <sensor_mgr_init+0x94>)
   1d124:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1d128:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1d12c:	9b03      	ldr	r3, [sp, #12]
   1d12e:	6123      	str	r3, [r4, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1d130:	f7fd fdb8 	bl	1aca4 <os_cputime_get32>
   1d134:	6160      	str	r0, [r4, #20]
    os_callout_init(&st_up_osco, sensor_mgr_evq_get(),
   1d136:	f7ff ffd1 	bl	1d0dc <sensor_mgr_evq_get>
   1d13a:	4c11      	ldr	r4, [pc, #68]	; (1d180 <sensor_mgr_init+0x98>)
   1d13c:	2300      	movs	r3, #0
   1d13e:	4a11      	ldr	r2, [pc, #68]	; (1d184 <sensor_mgr_init+0x9c>)
   1d140:	4601      	mov	r1, r0
   1d142:	4620      	mov	r0, r4
   1d144:	f7fd fcf8 	bl	1ab38 <os_callout_init>
    os_callout_reset(&st_up_osco, OS_TICKS_PER_SEC);
   1d148:	2180      	movs	r1, #128	; 0x80
   1d14a:	4620      	mov	r0, r4
   1d14c:	f7fd fd20 	bl	1ab90 <os_callout_reset>
    os_mutex_init(&sensor_mgr.mgr_lock);
   1d150:	f1a6 000c 	sub.w	r0, r6, #12
   1d154:	f7fe f9a8 	bl	1b4a8 <os_mutex_init>
}
   1d158:	b008      	add	sp, #32
   1d15a:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == OS_OK);
   1d15c:	2300      	movs	r3, #0
   1d15e:	461a      	mov	r2, r3
   1d160:	4619      	mov	r1, r3
   1d162:	4618      	mov	r0, r3
   1d164:	f7fd fb6e 	bl	1a844 <__assert_func>
   1d168:	00022764 	.word	0x00022764
   1d16c:	2000d9ec 	.word	0x2000d9ec
   1d170:	2000da64 	.word	0x2000da64
   1d174:	2000defc 	.word	0x2000defc
   1d178:	0001d355 	.word	0x0001d355
   1d17c:	2000df48 	.word	0x2000df48
   1d180:	2000df24 	.word	0x2000df24
   1d184:	0001d019 	.word	0x0001d019

0001d188 <sensor_pkg_init>:
{
   1d188:	b508      	push	{r3, lr}
    sensor_mgr_init();
   1d18a:	f7ff ffad 	bl	1d0e8 <sensor_mgr_init>
}
   1d18e:	bd08      	pop	{r3, pc}

0001d190 <sensor_lock>:
{
   1d190:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor->s_lock, OS_TIMEOUT_NEVER);
   1d192:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d196:	3004      	adds	r0, #4
   1d198:	f7fe f9ec 	bl	1b574 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1d19c:	b108      	cbz	r0, 1d1a2 <sensor_lock+0x12>
   1d19e:	2809      	cmp	r0, #9
   1d1a0:	d000      	beq.n	1d1a4 <sensor_lock+0x14>
}
   1d1a2:	bd08      	pop	{r3, pc}
        return (0);
   1d1a4:	2000      	movs	r0, #0
   1d1a6:	e7fc      	b.n	1d1a2 <sensor_lock+0x12>

0001d1a8 <sensor_unlock>:
{
   1d1a8:	b508      	push	{r3, lr}
    os_mutex_release(&sensor->s_lock);
   1d1aa:	3004      	adds	r0, #4
   1d1ac:	f7fe f986 	bl	1b4bc <os_mutex_release>
}
   1d1b0:	bd08      	pop	{r3, pc}

0001d1b2 <sensor_update_nextrun>:
{
   1d1b2:	b530      	push	{r4, r5, lr}
   1d1b4:	b083      	sub	sp, #12
   1d1b6:	4604      	mov	r4, r0
   1d1b8:	460d      	mov	r5, r1
    os_time_ms_to_ticks(sensor->s_poll_rate, &sensor_ticks);
   1d1ba:	a901      	add	r1, sp, #4
   1d1bc:	6a00      	ldr	r0, [r0, #32]
   1d1be:	f7fe fdb5 	bl	1bd2c <os_time_ms_to_ticks>
    sensor_lock(sensor);
   1d1c2:	4620      	mov	r0, r4
   1d1c4:	f7ff ffe4 	bl	1d190 <sensor_lock>
    sensor_mgr_remove(sensor);
   1d1c8:	4620      	mov	r0, r4
   1d1ca:	f7ff fe8f 	bl	1ceec <sensor_mgr_remove>
    sensor->s_next_run = sensor_ticks + now;
   1d1ce:	9b01      	ldr	r3, [sp, #4]
   1d1d0:	441d      	add	r5, r3
   1d1d2:	6265      	str	r5, [r4, #36]	; 0x24
    sensor_mgr_insert(sensor);
   1d1d4:	4620      	mov	r0, r4
   1d1d6:	f7ff fe9d 	bl	1cf14 <sensor_mgr_insert>
    sensor_unlock(sensor);
   1d1da:	4620      	mov	r0, r4
   1d1dc:	f7ff ffe4 	bl	1d1a8 <sensor_unlock>
}
   1d1e0:	b003      	add	sp, #12
   1d1e2:	bd30      	pop	{r4, r5, pc}

0001d1e4 <sensor_calc_nextrun_delta>:
{
   1d1e4:	b538      	push	{r3, r4, r5, lr}
   1d1e6:	4605      	mov	r5, r0
   1d1e8:	460c      	mov	r4, r1
    sensor_lock(sensor);
   1d1ea:	f7ff ffd1 	bl	1d190 <sensor_lock>
    delta = (int32_t)(sensor->s_next_run - now);
   1d1ee:	6a69      	ldr	r1, [r5, #36]	; 0x24
    if (delta < 0) {
   1d1f0:	1b0c      	subs	r4, r1, r4
   1d1f2:	d404      	bmi.n	1d1fe <sensor_calc_nextrun_delta+0x1a>
    sensor_unlock(sensor);
   1d1f4:	4628      	mov	r0, r5
   1d1f6:	f7ff ffd7 	bl	1d1a8 <sensor_unlock>
}
   1d1fa:	4620      	mov	r0, r4
   1d1fc:	bd38      	pop	{r3, r4, r5, pc}
        sensor_ticks = 0;
   1d1fe:	2400      	movs	r4, #0
   1d200:	e7f8      	b.n	1d1f4 <sensor_calc_nextrun_delta+0x10>
	...

0001d204 <sensor_find_min_nextrun_sensor>:
{
   1d204:	b570      	push	{r4, r5, r6, lr}
   1d206:	4606      	mov	r6, r0
   1d208:	460d      	mov	r5, r1
    sensor_mgr_lock();
   1d20a:	f7ff ff51 	bl	1d0b0 <sensor_mgr_lock>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
   1d20e:	4b05      	ldr	r3, [pc, #20]	; (1d224 <sensor_find_min_nextrun_sensor+0x20>)
   1d210:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    *min_nextrun = sensor_calc_nextrun_delta(head, now);
   1d212:	4631      	mov	r1, r6
   1d214:	4620      	mov	r0, r4
   1d216:	f7ff ffe5 	bl	1d1e4 <sensor_calc_nextrun_delta>
   1d21a:	6028      	str	r0, [r5, #0]
    sensor_mgr_unlock();
   1d21c:	f7ff ff56 	bl	1d0cc <sensor_mgr_unlock>
}
   1d220:	4620      	mov	r0, r4
   1d222:	bd70      	pop	{r4, r5, r6, pc}
   1d224:	2000def0 	.word	0x2000def0

0001d228 <sensor_mgr_register>:
{
   1d228:	b538      	push	{r3, r4, r5, lr}
   1d22a:	4605      	mov	r5, r0
    rc = sensor_mgr_lock();
   1d22c:	f7ff ff40 	bl	1d0b0 <sensor_mgr_lock>
    if (rc != 0) {
   1d230:	4604      	mov	r4, r0
   1d232:	b108      	cbz	r0, 1d238 <sensor_mgr_register+0x10>
}
   1d234:	4620      	mov	r0, r4
   1d236:	bd38      	pop	{r3, r4, r5, pc}
    rc = sensor_lock(sensor);
   1d238:	4628      	mov	r0, r5
   1d23a:	f7ff ffa9 	bl	1d190 <sensor_lock>
    if (rc != 0) {
   1d23e:	4604      	mov	r4, r0
   1d240:	2800      	cmp	r0, #0
   1d242:	d1f7      	bne.n	1d234 <sensor_mgr_register+0xc>
    sensor_mgr_insert(sensor);
   1d244:	4628      	mov	r0, r5
   1d246:	f7ff fe65 	bl	1cf14 <sensor_mgr_insert>
    sensor_unlock(sensor);
   1d24a:	4628      	mov	r0, r5
   1d24c:	f7ff ffac 	bl	1d1a8 <sensor_unlock>
    sensor_mgr_unlock();
   1d250:	f7ff ff3c 	bl	1d0cc <sensor_mgr_unlock>
    return (0);
   1d254:	e7ee      	b.n	1d234 <sensor_mgr_register+0xc>

0001d256 <sensor_init>:
{
   1d256:	b538      	push	{r3, r4, r5, lr}
   1d258:	4604      	mov	r4, r0
   1d25a:	460d      	mov	r5, r1
    memset(sensor, 0, sizeof(*sensor));
   1d25c:	2288      	movs	r2, #136	; 0x88
   1d25e:	2100      	movs	r1, #0
   1d260:	f7fe fef3 	bl	1c04a <memset>
    rc = os_mutex_init(&sensor->s_lock);
   1d264:	1d20      	adds	r0, r4, #4
   1d266:	f7fe f91f 	bl	1b4a8 <os_mutex_init>
    if (rc != 0) {
   1d26a:	4603      	mov	r3, r0
   1d26c:	b900      	cbnz	r0, 1d270 <sensor_init+0x1a>
    sensor->s_dev = dev;
   1d26e:	6025      	str	r5, [r4, #0]
}
   1d270:	4618      	mov	r0, r3
   1d272:	bd38      	pop	{r3, r4, r5, pc}

0001d274 <sensor_read>:
 * @return 0 on success, non-zero on failure.
 */
int
sensor_read(struct sensor *sensor, sensor_type_t type,
        sensor_data_func_t data_func, void *arg, uint32_t timeout)
{
   1d274:	b530      	push	{r4, r5, lr}
   1d276:	b089      	sub	sp, #36	; 0x24
   1d278:	4604      	mov	r4, r0
   1d27a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    struct sensor_read_ctx src;
    int rc;

    rc = sensor_lock(sensor);
   1d27e:	f7ff ff87 	bl	1d190 <sensor_lock>
    if (rc) {
   1d282:	4605      	mov	r5, r0
   1d284:	b9f8      	cbnz	r0, 1d2c6 <sensor_read+0x52>
        goto err;
    }

    src.user_func = data_func;
   1d286:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d288:	9306      	str	r3, [sp, #24]
    src.user_arg = arg;
   1d28a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1d28c:	9307      	str	r3, [sp, #28]

    if (!sensor_mgr_match_bytype(sensor, (void *)&type)) {
   1d28e:	a904      	add	r1, sp, #16
   1d290:	4620      	mov	r0, r4
   1d292:	f7ff fe7b 	bl	1cf8c <sensor_mgr_match_bytype>
   1d296:	b1e0      	cbz	r0, 1d2d2 <sensor_read+0x5e>
        rc = SYS_ENOENT;
        goto err;
    }

    sensor_up_timestamp(sensor);
   1d298:	4620      	mov	r0, r4
   1d29a:	f7ff fee1 	bl	1d060 <sensor_up_timestamp>

    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
   1d29e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1d2a0:	6819      	ldr	r1, [r3, #0]
   1d2a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d2a4:	9302      	str	r3, [sp, #8]
   1d2a6:	ab06      	add	r3, sp, #24
   1d2a8:	9301      	str	r3, [sp, #4]
   1d2aa:	4b0b      	ldr	r3, [pc, #44]	; (1d2d8 <sensor_read+0x64>)
   1d2ac:	9300      	str	r3, [sp, #0]
   1d2ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1d2b2:	4620      	mov	r0, r4
   1d2b4:	4788      	blx	r1
                                  timeout);
    if (rc) {
   1d2b6:	4605      	mov	r5, r0
   1d2b8:	b128      	cbz	r0, 1d2c6 <sensor_read+0x52>
        if (sensor->s_err_fn != NULL) {
   1d2ba:	6f23      	ldr	r3, [r4, #112]	; 0x70
   1d2bc:	b11b      	cbz	r3, 1d2c6 <sensor_read+0x52>
            sensor->s_err_fn(sensor, sensor->s_err_arg, rc);
   1d2be:	4602      	mov	r2, r0
   1d2c0:	6f61      	ldr	r1, [r4, #116]	; 0x74
   1d2c2:	4620      	mov	r0, r4
   1d2c4:	4798      	blx	r3
        }
        goto err;
    }

err:
    sensor_unlock(sensor);
   1d2c6:	4620      	mov	r0, r4
   1d2c8:	f7ff ff6e 	bl	1d1a8 <sensor_unlock>
    return (rc);
}
   1d2cc:	4628      	mov	r0, r5
   1d2ce:	b009      	add	sp, #36	; 0x24
   1d2d0:	bd30      	pop	{r4, r5, pc}
        rc = SYS_ENOENT;
   1d2d2:	f06f 0503 	mvn.w	r5, #3
   1d2d6:	e7f6      	b.n	1d2c6 <sensor_read+0x52>
   1d2d8:	0001cfbb 	.word	0x0001cfbb

0001d2dc <sensor_mgr_poll_bytype>:
{
   1d2dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d2de:	b085      	sub	sp, #20
   1d2e0:	4616      	mov	r6, r2
   1d2e2:	461f      	mov	r7, r3
   1d2e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (!stt || !stt->stt_polls_left) {
   1d2e6:	b10c      	cbz	r4, 1d2ec <sensor_mgr_poll_bytype+0x10>
   1d2e8:	8aa3      	ldrh	r3, [r4, #20]
   1d2ea:	b9cb      	cbnz	r3, 1d320 <sensor_mgr_poll_bytype+0x44>
   1d2ec:	4632      	mov	r2, r6
   1d2ee:	463b      	mov	r3, r7
   1d2f0:	4605      	mov	r5, r0
        sensor_read(sensor, type, NULL, NULL, OS_TIMEOUT_NEVER);
   1d2f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d2f6:	9102      	str	r1, [sp, #8]
   1d2f8:	2100      	movs	r1, #0
   1d2fa:	9101      	str	r1, [sp, #4]
   1d2fc:	9100      	str	r1, [sp, #0]
   1d2fe:	f7ff ffb9 	bl	1d274 <sensor_read>
        sensor_lock(sensor);
   1d302:	4628      	mov	r0, r5
   1d304:	f7ff ff44 	bl	1d190 <sensor_lock>
        if (stt) {
   1d308:	b12c      	cbz	r4, 1d316 <sensor_mgr_poll_bytype+0x3a>
            if (!stt->stt_polls_left && stt->stt_poll_n) {
   1d30a:	8aa3      	ldrh	r3, [r4, #20]
   1d30c:	b91b      	cbnz	r3, 1d316 <sensor_mgr_poll_bytype+0x3a>
   1d30e:	8a63      	ldrh	r3, [r4, #18]
   1d310:	b10b      	cbz	r3, 1d316 <sensor_mgr_poll_bytype+0x3a>
                stt->stt_polls_left--;
   1d312:	3b01      	subs	r3, #1
   1d314:	82a3      	strh	r3, [r4, #20]
        sensor_unlock(sensor);
   1d316:	4628      	mov	r0, r5
   1d318:	f7ff ff46 	bl	1d1a8 <sensor_unlock>
}
   1d31c:	b005      	add	sp, #20
   1d31e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        stt->stt_polls_left--;
   1d320:	3b01      	subs	r3, #1
   1d322:	82a3      	strh	r3, [r4, #20]
}
   1d324:	e7fa      	b.n	1d31c <sensor_mgr_poll_bytype+0x40>

0001d326 <sensor_poll_per_type_trait>:
{
   1d326:	b570      	push	{r4, r5, r6, lr}
   1d328:	b082      	sub	sp, #8
   1d32a:	4605      	mov	r5, r0
   1d32c:	460e      	mov	r6, r1
    sensor_lock(sensor);
   1d32e:	f7ff ff2f 	bl	1d190 <sensor_lock>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1d332:	6fec      	ldr	r4, [r5, #124]	; 0x7c
   1d334:	e007      	b.n	1d346 <sensor_poll_per_type_trait+0x20>
        sensor_mgr_poll_bytype(sensor, stt->stt_sensor_type, stt,
   1d336:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d33a:	9601      	str	r6, [sp, #4]
   1d33c:	9400      	str	r4, [sp, #0]
   1d33e:	4628      	mov	r0, r5
   1d340:	f7ff ffcc 	bl	1d2dc <sensor_mgr_poll_bytype>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1d344:	6a24      	ldr	r4, [r4, #32]
   1d346:	2c00      	cmp	r4, #0
   1d348:	d1f5      	bne.n	1d336 <sensor_poll_per_type_trait+0x10>
    sensor_unlock(sensor);
   1d34a:	4628      	mov	r0, r5
   1d34c:	f7ff ff2c 	bl	1d1a8 <sensor_unlock>
}
   1d350:	b002      	add	sp, #8
   1d352:	bd70      	pop	{r4, r5, r6, pc}

0001d354 <sensor_mgr_wakeup_event>:
{
   1d354:	b570      	push	{r4, r5, r6, lr}
   1d356:	b084      	sub	sp, #16
    now = os_time_get();
   1d358:	f7fe fc92 	bl	1bc80 <os_time_get>
   1d35c:	4605      	mov	r5, r0
    sensor_mgr_lock();
   1d35e:	f7ff fea7 	bl	1d0b0 <sensor_mgr_lock>
   1d362:	e012      	b.n	1d38a <sensor_mgr_wakeup_event+0x36>
            sensor_unlock(cursor);
   1d364:	4620      	mov	r0, r4
   1d366:	f7ff ff1f 	bl	1d1a8 <sensor_unlock>
            sensor_mgr_unlock();
   1d36a:	f7ff feaf 	bl	1d0cc <sensor_mgr_unlock>
}
   1d36e:	b004      	add	sp, #16
   1d370:	bd70      	pop	{r4, r5, r6, pc}
            sensor_poll_per_type_trait(cursor, now, next_wakeup);
   1d372:	4632      	mov	r2, r6
   1d374:	4629      	mov	r1, r5
   1d376:	4620      	mov	r0, r4
   1d378:	f7ff ffd5 	bl	1d326 <sensor_poll_per_type_trait>
        sensor_update_nextrun(cursor, now);
   1d37c:	4629      	mov	r1, r5
   1d37e:	4620      	mov	r0, r4
   1d380:	f7ff ff17 	bl	1d1b2 <sensor_update_nextrun>
        sensor_unlock(cursor);
   1d384:	4620      	mov	r0, r4
   1d386:	f7ff ff0f 	bl	1d1a8 <sensor_unlock>
        cursor = sensor_find_min_nextrun_sensor(now, &next_wakeup);
   1d38a:	a903      	add	r1, sp, #12
   1d38c:	4628      	mov	r0, r5
   1d38e:	f7ff ff39 	bl	1d204 <sensor_find_min_nextrun_sensor>
   1d392:	4604      	mov	r4, r0
        sensor_lock(cursor);
   1d394:	f7ff fefc 	bl	1d190 <sensor_lock>
        if (!cursor->s_poll_rate) {
   1d398:	6a23      	ldr	r3, [r4, #32]
   1d39a:	2b00      	cmp	r3, #0
   1d39c:	d0e2      	beq.n	1d364 <sensor_mgr_wakeup_event+0x10>
        if (next_wakeup > 0) {
   1d39e:	9e03      	ldr	r6, [sp, #12]
   1d3a0:	b96e      	cbnz	r6, 1d3be <sensor_mgr_wakeup_event+0x6a>
        if (sensor_type_traits_empty(cursor)) {
   1d3a2:	4620      	mov	r0, r4
   1d3a4:	f7ff fde6 	bl	1cf74 <sensor_type_traits_empty>
   1d3a8:	2800      	cmp	r0, #0
   1d3aa:	d0e2      	beq.n	1d372 <sensor_mgr_wakeup_event+0x1e>
            sensor_mgr_poll_bytype(cursor, cursor->s_mask, NULL, now);
   1d3ac:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   1d3b0:	9501      	str	r5, [sp, #4]
   1d3b2:	2100      	movs	r1, #0
   1d3b4:	9100      	str	r1, [sp, #0]
   1d3b6:	4620      	mov	r0, r4
   1d3b8:	f7ff ff90 	bl	1d2dc <sensor_mgr_poll_bytype>
   1d3bc:	e7de      	b.n	1d37c <sensor_mgr_wakeup_event+0x28>
    sensor_mgr_unlock();
   1d3be:	f7ff fe85 	bl	1d0cc <sensor_mgr_unlock>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
   1d3c2:	9903      	ldr	r1, [sp, #12]
   1d3c4:	4801      	ldr	r0, [pc, #4]	; (1d3cc <sensor_mgr_wakeup_event+0x78>)
   1d3c6:	f7fd fbe3 	bl	1ab90 <os_callout_reset>
   1d3ca:	e7d0      	b.n	1d36e <sensor_mgr_wakeup_event+0x1a>
   1d3cc:	2000defc 	.word	0x2000defc

0001d3d0 <init_sensor_coap>:

///////////////////////////////////////////////////////////////////////////////
//  CoAP Functions

///  Init the Sensor CoAP module. Called by sysinit() during startup, defined in pkg.yml.
void init_sensor_coap(void) {
   1d3d0:	b508      	push	{r3, lr}
    os_error_t rc = os_sem_init(&oc_sem, 1);  //  Init to 1 token, so only 1 caller will be allowed.
   1d3d2:	2101      	movs	r1, #1
   1d3d4:	4806      	ldr	r0, [pc, #24]	; (1d3f0 <init_sensor_coap+0x20>)
   1d3d6:	f7fe faf1 	bl	1b9bc <os_sem_init>
    assert(rc == OS_OK);
   1d3da:	b918      	cbnz	r0, 1d3e4 <init_sensor_coap+0x14>
    oc_sensor_coap_ready = true;
   1d3dc:	4b05      	ldr	r3, [pc, #20]	; (1d3f4 <init_sensor_coap+0x24>)
   1d3de:	2201      	movs	r2, #1
   1d3e0:	701a      	strb	r2, [r3, #0]
}
   1d3e2:	bd08      	pop	{r3, pc}
    assert(rc == OS_OK);
   1d3e4:	2300      	movs	r3, #0
   1d3e6:	461a      	mov	r2, r3
   1d3e8:	4619      	mov	r1, r3
   1d3ea:	4618      	mov	r0, r3
   1d3ec:	f7fd fa2a 	bl	1a844 <__assert_func>
   1d3f0:	2000da80 	.word	0x2000da80
   1d3f4:	2000da88 	.word	0x2000da88

0001d3f8 <is_sensor_node>:
}

bool is_sensor_node(void) {
    //  Return true if this is a Sensor Node.
    //  This is a Sensor Node if the Hardware ID matches one of the Sensor Node Hardware IDs.
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1d3f8:	4b04      	ldr	r3, [pc, #16]	; (1d40c <is_sensor_node+0x14>)
   1d3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d3fe:	4313      	orrs	r3, r2
   1d400:	d101      	bne.n	1d406 <is_sensor_node+0xe>
    return false;
   1d402:	2000      	movs	r0, #0
}
   1d404:	4770      	bx	lr
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1d406:	2001      	movs	r0, #1
   1d408:	4770      	bx	lr
   1d40a:	bf00      	nop
   1d40c:	2000daa0 	.word	0x2000daa0

0001d410 <get_hardware_id>:
}

/////////////////////////////////////////////////////////
//  Sensor Network Addresses

const uint8_t *get_hardware_id(void) {
   1d410:	b508      	push	{r3, lr}
    //  Return the Hardware ID, which is unique across all microcontrollers.
    if (hw_id_len == 0) {
   1d412:	4b16      	ldr	r3, [pc, #88]	; (1d46c <get_hardware_id+0x5c>)
   1d414:	681b      	ldr	r3, [r3, #0]
   1d416:	b10b      	cbz	r3, 1d41c <get_hardware_id+0xc>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
    }
    return hw_id;
}
   1d418:	4815      	ldr	r0, [pc, #84]	; (1d470 <get_hardware_id+0x60>)
   1d41a:	bd08      	pop	{r3, pc}
        hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
   1d41c:	f000 fcee 	bl	1ddfc <hal_bsp_hw_id_len>
   1d420:	4b12      	ldr	r3, [pc, #72]	; (1d46c <get_hardware_id+0x5c>)
   1d422:	6018      	str	r0, [r3, #0]
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1d424:	280b      	cmp	r0, #11
   1d426:	d914      	bls.n	1d452 <get_hardware_id+0x42>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1d428:	210c      	movs	r1, #12
   1d42a:	4811      	ldr	r0, [pc, #68]	; (1d470 <get_hardware_id+0x60>)
   1d42c:	f000 fce8 	bl	1de00 <hal_bsp_hw_id>
   1d430:	4b0e      	ldr	r3, [pc, #56]	; (1d46c <get_hardware_id+0x5c>)
   1d432:	6018      	str	r0, [r3, #0]
   1d434:	2800      	cmp	r0, #0
   1d436:	dd12      	ble.n	1d45e <get_hardware_id+0x4e>
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
   1d438:	490e      	ldr	r1, [pc, #56]	; (1d474 <get_hardware_id+0x64>)
   1d43a:	480f      	ldr	r0, [pc, #60]	; (1d478 <get_hardware_id+0x68>)
   1d43c:	f7fc fb3a 	bl	19ab4 <console_printf>
   1d440:	4b0a      	ldr	r3, [pc, #40]	; (1d46c <get_hardware_id+0x5c>)
   1d442:	6819      	ldr	r1, [r3, #0]
   1d444:	480a      	ldr	r0, [pc, #40]	; (1d470 <get_hardware_id+0x60>)
   1d446:	f7fc fac5 	bl	199d4 <console_dump>
   1d44a:	480c      	ldr	r0, [pc, #48]	; (1d47c <get_hardware_id+0x6c>)
   1d44c:	f7fc fb32 	bl	19ab4 <console_printf>
   1d450:	e7e2      	b.n	1d418 <get_hardware_id+0x8>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1d452:	2300      	movs	r3, #0
   1d454:	461a      	mov	r2, r3
   1d456:	4619      	mov	r1, r3
   1d458:	4618      	mov	r0, r3
   1d45a:	f7fd f9f3 	bl	1a844 <__assert_func>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1d45e:	2300      	movs	r3, #0
   1d460:	461a      	mov	r2, r3
   1d462:	4619      	mov	r1, r3
   1d464:	4618      	mov	r0, r3
   1d466:	f7fd f9ed 	bl	1a844 <__assert_func>
   1d46a:	bf00      	nop
   1d46c:	2000da98 	.word	0x2000da98
   1d470:	2000da8c 	.word	0x2000da8c
   1d474:	00022808 	.word	0x00022808
   1d478:	000227c0 	.word	0x000227c0
   1d47c:	00022920 	.word	0x00022920

0001d480 <is_collector_node>:
bool is_collector_node(void) {
   1d480:	b508      	push	{r3, lr}
    const uint8_t *hardware_id = get_hardware_id();
   1d482:	f7ff ffc5 	bl	1d410 <get_hardware_id>
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1d486:	220c      	movs	r2, #12
   1d488:	4903      	ldr	r1, [pc, #12]	; (1d498 <is_collector_node+0x18>)
   1d48a:	f7fe fdad 	bl	1bfe8 <memcmp>
   1d48e:	b108      	cbz	r0, 1d494 <is_collector_node+0x14>
    return false; 
   1d490:	2000      	movs	r0, #0
}
   1d492:	bd08      	pop	{r3, pc}
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1d494:	2001      	movs	r0, #1
   1d496:	e7fc      	b.n	1d492 <is_collector_node+0x12>
   1d498:	00022778 	.word	0x00022778

0001d49c <is_standalone_node>:
bool is_standalone_node(void) {
   1d49c:	b510      	push	{r4, lr}
    if (!is_collector_node() && !is_sensor_node()) { return true; }
   1d49e:	f7ff ffef 	bl	1d480 <is_collector_node>
   1d4a2:	b928      	cbnz	r0, 1d4b0 <is_standalone_node+0x14>
   1d4a4:	4604      	mov	r4, r0
   1d4a6:	f7ff ffa7 	bl	1d3f8 <is_sensor_node>
   1d4aa:	b910      	cbnz	r0, 1d4b2 <is_standalone_node+0x16>
   1d4ac:	2401      	movs	r4, #1
   1d4ae:	e000      	b.n	1d4b2 <is_standalone_node+0x16>
    return false;
   1d4b0:	2400      	movs	r4, #0
}
   1d4b2:	4620      	mov	r0, r4
   1d4b4:	bd10      	pop	{r4, pc}
	...

0001d4b8 <sensor_network_init>:
const char **get_sensor_node_names(void) { return sensor_node_names; }

/////////////////////////////////////////////////////////
//  Sensor Network Configuration

void sensor_network_init(void) {
   1d4b8:	b538      	push	{r3, r4, r5, lr}
    //  Allocate Sensor Node address for this node.

    //  Set the Sensor Node names for remote_sensor_create().
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1d4ba:	2400      	movs	r4, #0
   1d4bc:	2c04      	cmp	r4, #4
   1d4be:	dc15      	bgt.n	1d4ec <sensor_network_init+0x34>
        int len = sprintf((char *) sensor_node_names[i], "%010llx", sensor_node_addresses[i]);
   1d4c0:	4b23      	ldr	r3, [pc, #140]	; (1d550 <sensor_network_init+0x98>)
   1d4c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1d4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d4ca:	4922      	ldr	r1, [pc, #136]	; (1d554 <sensor_network_init+0x9c>)
   1d4cc:	4822      	ldr	r0, [pc, #136]	; (1d558 <sensor_network_init+0xa0>)
   1d4ce:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   1d4d2:	f000 fcaf 	bl	1de34 <sprintf>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1d4d6:	3001      	adds	r0, #1
   1d4d8:	280b      	cmp	r0, #11
   1d4da:	dc01      	bgt.n	1d4e0 <sensor_network_init+0x28>
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1d4dc:	3401      	adds	r4, #1
   1d4de:	e7ed      	b.n	1d4bc <sensor_network_init+0x4>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1d4e0:	2300      	movs	r3, #0
   1d4e2:	461a      	mov	r2, r3
   1d4e4:	4619      	mov	r1, r3
   1d4e6:	4618      	mov	r0, r3
   1d4e8:	f7fd f9ac 	bl	1a844 <__assert_func>
    }
    //  Get Sensor Node address if applicable.
    const uint8_t *hardware_id = get_hardware_id();
   1d4ec:	f7ff ff90 	bl	1d410 <get_hardware_id>
   1d4f0:	4605      	mov	r5, r0
    int i;
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1d4f2:	2400      	movs	r4, #0
   1d4f4:	2c04      	cmp	r4, #4
   1d4f6:	dc19      	bgt.n	1d52c <sensor_network_init+0x74>
        if (memcmp(hardware_id, SENSOR_NODE_HW_IDS[i], HARDWARE_ID_LENGTH) == 0) {
   1d4f8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1d4fc:	0093      	lsls	r3, r2, #2
   1d4fe:	220c      	movs	r2, #12
   1d500:	4916      	ldr	r1, [pc, #88]	; (1d55c <sensor_network_init+0xa4>)
   1d502:	4419      	add	r1, r3
   1d504:	4628      	mov	r0, r5
   1d506:	f7fe fd6f 	bl	1bfe8 <memcmp>
   1d50a:	b108      	cbz	r0, 1d510 <sensor_network_init+0x58>
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1d50c:	3401      	adds	r4, #1
   1d50e:	e7f1      	b.n	1d4f4 <sensor_network_init+0x3c>
            sensor_node_address = sensor_node_addresses[i];
   1d510:	4b0f      	ldr	r3, [pc, #60]	; (1d550 <sensor_network_init+0x98>)
   1d512:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1d516:	e9d3 0100 	ldrd	r0, r1, [r3]
   1d51a:	4b11      	ldr	r3, [pc, #68]	; (1d560 <sensor_network_init+0xa8>)
   1d51c:	e9c3 0100 	strd	r0, r1, [r3]
            console_printf("%ssensor%s#%d\n", _net, _node, i + 1);
   1d520:	1c63      	adds	r3, r4, #1
   1d522:	4a10      	ldr	r2, [pc, #64]	; (1d564 <sensor_network_init+0xac>)
   1d524:	4910      	ldr	r1, [pc, #64]	; (1d568 <sensor_network_init+0xb0>)
   1d526:	4811      	ldr	r0, [pc, #68]	; (1d56c <sensor_network_init+0xb4>)
   1d528:	f7fc fac4 	bl	19ab4 <console_printf>
            break;
        }
    }
    //  Display the type of node.
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1d52c:	f7ff ffa8 	bl	1d480 <is_collector_node>
   1d530:	b940      	cbnz	r0, 1d544 <sensor_network_init+0x8c>
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
   1d532:	f7ff ffb3 	bl	1d49c <is_standalone_node>
   1d536:	b150      	cbz	r0, 1d54e <sensor_network_init+0x96>
   1d538:	4a0a      	ldr	r2, [pc, #40]	; (1d564 <sensor_network_init+0xac>)
   1d53a:	490b      	ldr	r1, [pc, #44]	; (1d568 <sensor_network_init+0xb0>)
   1d53c:	480c      	ldr	r0, [pc, #48]	; (1d570 <sensor_network_init+0xb8>)
   1d53e:	f7fc fab9 	bl	19ab4 <console_printf>
}
   1d542:	e004      	b.n	1d54e <sensor_network_init+0x96>
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1d544:	4a07      	ldr	r2, [pc, #28]	; (1d564 <sensor_network_init+0xac>)
   1d546:	4908      	ldr	r1, [pc, #32]	; (1d568 <sensor_network_init+0xb0>)
   1d548:	480a      	ldr	r0, [pc, #40]	; (1d574 <sensor_network_init+0xbc>)
   1d54a:	f7fc fab3 	bl	19ab4 <console_printf>
}
   1d54e:	bd38      	pop	{r3, r4, r5, pc}
   1d550:	00022820 	.word	0x00022820
   1d554:	000227c8 	.word	0x000227c8
   1d558:	20000130 	.word	0x20000130
   1d55c:	00022784 	.word	0x00022784
   1d560:	2000daa0 	.word	0x2000daa0
   1d564:	000227d0 	.word	0x000227d0
   1d568:	00022808 	.word	0x00022808
   1d56c:	000227d8 	.word	0x000227d8
   1d570:	000227f8 	.word	0x000227f8
   1d574:	000227e8 	.word	0x000227e8

0001d578 <config_device>:

///////////////////////////////////////////////////////////////////////////////
//  Generic Device Creator Code based on repos\apache-mynewt-core\hw\sensor\creator\src\sensor_creator.c

//  Device configuration
static int config_device(void) {
   1d578:	b530      	push	{r4, r5, lr}
   1d57a:	b083      	sub	sp, #12
    int rc;
    struct os_dev *dev;
    struct DEVICE_CFG cfg;

    //  Fetch the device.
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
   1d57c:	2200      	movs	r2, #0
   1d57e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d582:	4810      	ldr	r0, [pc, #64]	; (1d5c4 <config_device+0x4c>)
   1d584:	f7fd fc2c 	bl	1ade0 <os_dev_open>
    assert(dev != NULL);
   1d588:	b178      	cbz	r0, 1d5aa <config_device+0x32>
   1d58a:	4604      	mov	r4, r0

    //  Get the default config for the device.
    rc = DEVICE_CFG_DEFAULT(&cfg);
   1d58c:	4668      	mov	r0, sp
   1d58e:	f000 f86c 	bl	1d66a <temp_stub_default_cfg>
    assert(rc == 0);
   1d592:	b980      	cbnz	r0, 1d5b6 <config_device+0x3e>

    //  Apply the device config.
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
   1d594:	4669      	mov	r1, sp
   1d596:	4620      	mov	r0, r4
   1d598:	f000 f900 	bl	1d79c <temp_stub_config>
   1d59c:	4605      	mov	r5, r0
    os_dev_close(dev);
   1d59e:	4620      	mov	r0, r4
   1d5a0:	f7fd fc40 	bl	1ae24 <os_dev_close>
    return rc;
}
   1d5a4:	4628      	mov	r0, r5
   1d5a6:	b003      	add	sp, #12
   1d5a8:	bd30      	pop	{r4, r5, pc}
    assert(dev != NULL);
   1d5aa:	2300      	movs	r3, #0
   1d5ac:	461a      	mov	r2, r3
   1d5ae:	4619      	mov	r1, r3
   1d5b0:	4618      	mov	r0, r3
   1d5b2:	f7fd f947 	bl	1a844 <__assert_func>
    assert(rc == 0);
   1d5b6:	2300      	movs	r3, #0
   1d5b8:	461a      	mov	r2, r3
   1d5ba:	4619      	mov	r1, r3
   1d5bc:	4618      	mov	r0, r3
   1d5be:	f7fd f941 	bl	1a844 <__assert_func>
   1d5c2:	bf00      	nop
   1d5c4:	00022848 	.word	0x00022848

0001d5c8 <temp_stub_create>:

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
   1d5c8:	b510      	push	{r4, lr}
   1d5ca:	b082      	sub	sp, #8
    console_printf("TMP create %s\n", DEVICE_NAME);
   1d5cc:	4c10      	ldr	r4, [pc, #64]	; (1d610 <temp_stub_create+0x48>)
   1d5ce:	4621      	mov	r1, r4
   1d5d0:	4810      	ldr	r0, [pc, #64]	; (1d614 <temp_stub_create+0x4c>)
   1d5d2:	f7fc fa6f 	bl	19ab4 <console_printf>

    //  Create the device.
    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
   1d5d6:	4b10      	ldr	r3, [pc, #64]	; (1d618 <temp_stub_create+0x50>)
   1d5d8:	9301      	str	r3, [sp, #4]
   1d5da:	4b10      	ldr	r3, [pc, #64]	; (1d61c <temp_stub_create+0x54>)
   1d5dc:	9300      	str	r3, [sp, #0]
   1d5de:	2300      	movs	r3, #0
   1d5e0:	2201      	movs	r2, #1
   1d5e2:	4621      	mov	r1, r4
   1d5e4:	480e      	ldr	r0, [pc, #56]	; (1d620 <temp_stub_create+0x58>)
   1d5e6:	f7fd fbb5 	bl	1ad54 <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0, 
        DEVICE_INIT, (void *) &DEVICE_ITF);
    assert(rc == 0);
   1d5ea:	b920      	cbnz	r0, 1d5f6 <temp_stub_create+0x2e>

    //  Configure the device.
    rc = config_device();
   1d5ec:	f7ff ffc4 	bl	1d578 <config_device>
    assert(rc == 0);
   1d5f0:	b938      	cbnz	r0, 1d602 <temp_stub_create+0x3a>
}
   1d5f2:	b002      	add	sp, #8
   1d5f4:	bd10      	pop	{r4, pc}
    assert(rc == 0);
   1d5f6:	2300      	movs	r3, #0
   1d5f8:	461a      	mov	r2, r3
   1d5fa:	4619      	mov	r1, r3
   1d5fc:	4618      	mov	r0, r3
   1d5fe:	f7fd f921 	bl	1a844 <__assert_func>
    assert(rc == 0);
   1d602:	2300      	movs	r3, #0
   1d604:	461a      	mov	r2, r3
   1d606:	4619      	mov	r1, r3
   1d608:	4618      	mov	r0, r3
   1d60a:	f7fd f91b 	bl	1a844 <__assert_func>
   1d60e:	bf00      	nop
   1d610:	00022848 	.word	0x00022848
   1d614:	00022854 	.word	0x00022854
   1d618:	2000dae0 	.word	0x2000dae0
   1d61c:	0001d679 	.word	0x0001d679
   1d620:	2000daf8 	.word	0x2000daf8

0001d624 <temp_stub_close>:
}

static int temp_stub_close(struct os_dev *dev0) {
    //  Close the sensor.  Return 0 if successful.
    return 0;
}
   1d624:	2000      	movs	r0, #0
   1d626:	4770      	bx	lr

0001d628 <temp_stub_sensor_get_config>:

static int temp_stub_sensor_get_config(struct sensor *sensor, sensor_type_t type,
    struct sensor_cfg *cfg) {
    //  Return the type of the sensor value returned by the sensor.
    int rc;
    if (!(type & TEMP_SENSOR_TYPE)) {
   1d628:	f002 6080 	and.w	r0, r2, #67108864	; 0x4000000
   1d62c:	2100      	movs	r1, #0
   1d62e:	ea50 0301 	orrs.w	r3, r0, r1
   1d632:	d004      	beq.n	1d63e <temp_stub_sensor_get_config+0x16>
        rc = SYS_EINVAL;
        goto err;
    }
    cfg->sc_valtype = TEMP_SENSOR_VALUE_TYPE;  //  We return float (computed values) or int (raw values).
   1d634:	9b00      	ldr	r3, [sp, #0]
   1d636:	2201      	movs	r2, #1
   1d638:	701a      	strb	r2, [r3, #0]
    return (0);
   1d63a:	2000      	movs	r0, #0
   1d63c:	4770      	bx	lr
err:
    return (rc);
   1d63e:	f06f 0001 	mvn.w	r0, #1
}
   1d642:	4770      	bx	lr

0001d644 <temp_stub_open>:
static int temp_stub_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
   1d644:	b508      	push	{r3, lr}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1d646:	b120      	cbz	r0, 1d652 <temp_stub_open+0xe>
    cfg = &dev->cfg; assert(cfg);
   1d648:	f110 0fb0 	cmn.w	r0, #176	; 0xb0
   1d64c:	d007      	beq.n	1d65e <temp_stub_open+0x1a>
}
   1d64e:	2000      	movs	r0, #0
   1d650:	bd08      	pop	{r3, pc}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1d652:	2300      	movs	r3, #0
   1d654:	461a      	mov	r2, r3
   1d656:	4619      	mov	r1, r3
   1d658:	4618      	mov	r0, r3
   1d65a:	f7fd f8f3 	bl	1a844 <__assert_func>
    cfg = &dev->cfg; assert(cfg);
   1d65e:	2300      	movs	r3, #0
   1d660:	461a      	mov	r2, r3
   1d662:	4619      	mov	r1, r3
   1d664:	4618      	mov	r0, r3
   1d666:	f7fd f8ed 	bl	1a844 <__assert_func>

0001d66a <temp_stub_default_cfg>:
    cfg->bc_s_mask       = SENSOR_TYPE_ALL;         //  Return all sensor values, i.e. temperature.
   1d66a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d66e:	2300      	movs	r3, #0
   1d670:	e9c0 2300 	strd	r2, r3, [r0]
}
   1d674:	2000      	movs	r0, #0
   1d676:	4770      	bx	lr

0001d678 <temp_stub_init>:
int temp_stub_init(struct os_dev *dev0, void *arg) {
   1d678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1d67a:	b379      	cbz	r1, 1d6dc <temp_stub_init+0x64>
   1d67c:	460d      	mov	r5, r1
   1d67e:	b380      	cbz	r0, 1d6e2 <temp_stub_init+0x6a>
   1d680:	4604      	mov	r4, r0
    rc = temp_stub_default_cfg(&dev->cfg);
   1d682:	30b0      	adds	r0, #176	; 0xb0
   1d684:	f7ff fff1 	bl	1d66a <temp_stub_default_cfg>
    if (rc) { goto err; }
   1d688:	4603      	mov	r3, r0
   1d68a:	b108      	cbz	r0, 1d690 <temp_stub_init+0x18>
}
   1d68c:	4618      	mov	r0, r3
   1d68e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sensor = &dev->sensor;
   1d690:	f104 0628 	add.w	r6, r4, #40	; 0x28
    rc = sensor_init(sensor, dev0);
   1d694:	4621      	mov	r1, r4
   1d696:	4630      	mov	r0, r6
   1d698:	f7ff fddd 	bl	1d256 <sensor_init>
    if (rc != 0) { goto err; }
   1d69c:	4603      	mov	r3, r0
   1d69e:	2800      	cmp	r0, #0
   1d6a0:	d1f4      	bne.n	1d68c <temp_stub_init+0x14>
 */
static inline int
sensor_set_driver(struct sensor *sensor, sensor_type_t type,
        struct sensor_driver *driver)
{
    sensor->s_funcs = driver;
   1d6a2:	4b11      	ldr	r3, [pc, #68]	; (1d6e8 <temp_stub_init+0x70>)
   1d6a4:	6523      	str	r3, [r4, #80]	; 0x50
    sensor->s_types = type;
   1d6a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1d6aa:	2300      	movs	r3, #0
   1d6ac:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 * @param s_itf The interface type to set
 */
static inline int
sensor_set_interface(struct sensor *sensor, struct sensor_itf *s_itf)
{
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
   1d6b0:	682a      	ldr	r2, [r5, #0]
   1d6b2:	686f      	ldr	r7, [r5, #4]
   1d6b4:	68a8      	ldr	r0, [r5, #8]
   1d6b6:	68e9      	ldr	r1, [r5, #12]
   1d6b8:	6722      	str	r2, [r4, #112]	; 0x70
   1d6ba:	6767      	str	r7, [r4, #116]	; 0x74
   1d6bc:	67a0      	str	r0, [r4, #120]	; 0x78
   1d6be:	67e1      	str	r1, [r4, #124]	; 0x7c
   1d6c0:	692a      	ldr	r2, [r5, #16]
   1d6c2:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    rc = sensor_mgr_register(sensor);
   1d6c6:	4630      	mov	r0, r6
   1d6c8:	f7ff fdae 	bl	1d228 <sensor_mgr_register>
    if (rc != 0) { goto err; }
   1d6cc:	4603      	mov	r3, r0
   1d6ce:	2800      	cmp	r0, #0
   1d6d0:	d1dc      	bne.n	1d68c <temp_stub_init+0x14>
    OS_DEV_SETHANDLERS(dev0, temp_stub_open, temp_stub_close);
   1d6d2:	4a06      	ldr	r2, [pc, #24]	; (1d6ec <temp_stub_init+0x74>)
   1d6d4:	6022      	str	r2, [r4, #0]
   1d6d6:	4a06      	ldr	r2, [pc, #24]	; (1d6f0 <temp_stub_init+0x78>)
   1d6d8:	60e2      	str	r2, [r4, #12]
    return (0);
   1d6da:	e7d7      	b.n	1d68c <temp_stub_init+0x14>
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1d6dc:	f06f 0308 	mvn.w	r3, #8
   1d6e0:	e7d4      	b.n	1d68c <temp_stub_init+0x14>
   1d6e2:	f06f 0308 	mvn.w	r3, #8
   1d6e6:	e7d1      	b.n	1d68c <temp_stub_init+0x14>
   1d6e8:	00022864 	.word	0x00022864
   1d6ec:	0001d645 	.word	0x0001d645
   1d6f0:	0001d625 	.word	0x0001d625

0001d6f4 <temp_stub_get_raw_temperature>:
int temp_stub_get_raw_temperature(struct temp_stub *dev, int num_readings, int *temp_sum, uint8_t *temp_diff) {
   1d6f4:	b538      	push	{r3, r4, r5, lr}
   1d6f6:	460d      	mov	r5, r1
   1d6f8:	4614      	mov	r4, r2
    console_printf("STB read temp sensor\n");  ////
   1d6fa:	4808      	ldr	r0, [pc, #32]	; (1d71c <temp_stub_get_raw_temperature+0x28>)
   1d6fc:	f7fc f9da 	bl	19ab4 <console_printf>
    assert(temp_sum);
   1d700:	b134      	cbz	r4, 1d710 <temp_stub_get_raw_temperature+0x1c>
    *temp_sum = 1757 * num_readings;
   1d702:	f240 61dd 	movw	r1, #1757	; 0x6dd
   1d706:	fb01 f105 	mul.w	r1, r1, r5
   1d70a:	6021      	str	r1, [r4, #0]
}
   1d70c:	2000      	movs	r0, #0
   1d70e:	bd38      	pop	{r3, r4, r5, pc}
    assert(temp_sum);
   1d710:	2300      	movs	r3, #0
   1d712:	461a      	mov	r2, r3
   1d714:	4619      	mov	r1, r3
   1d716:	4618      	mov	r0, r3
   1d718:	f7fd f894 	bl	1a844 <__assert_func>
   1d71c:	0002288c 	.word	0x0002288c

0001d720 <temp_stub_sensor_read>:
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
   1d720:	b530      	push	{r4, r5, lr}
   1d722:	b087      	sub	sp, #28
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1d724:	f002 6480 	and.w	r4, r2, #67108864	; 0x4000000
   1d728:	2500      	movs	r5, #0
   1d72a:	ea54 0305 	orrs.w	r3, r4, r5
   1d72e:	d032      	beq.n	1d796 <temp_stub_sensor_read+0x76>
   1d730:	4604      	mov	r4, r0
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1d732:	6805      	ldr	r5, [r0, #0]
   1d734:	b165      	cbz	r5, 1d750 <temp_stub_sensor_read+0x30>
    rawtemp = -1;
   1d736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d73a:	9303      	str	r3, [sp, #12]
        rc = temp_stub_open((struct os_dev *) dev, 0, NULL);
   1d73c:	2200      	movs	r2, #0
   1d73e:	4611      	mov	r1, r2
   1d740:	4628      	mov	r0, r5
   1d742:	f7ff ff7f 	bl	1d644 <temp_stub_open>
        if (rc) { goto err; }
   1d746:	4603      	mov	r3, r0
   1d748:	b140      	cbz	r0, 1d75c <temp_stub_sensor_read+0x3c>
}
   1d74a:	4618      	mov	r0, r3
   1d74c:	b007      	add	sp, #28
   1d74e:	bd30      	pop	{r4, r5, pc}
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1d750:	2300      	movs	r3, #0
   1d752:	461a      	mov	r2, r3
   1d754:	4619      	mov	r1, r3
   1d756:	4618      	mov	r0, r3
   1d758:	f7fd f874 	bl	1a844 <__assert_func>
        rc = temp_stub_get_raw_temperature(dev, 1, &rawtemp, NULL);
   1d75c:	2300      	movs	r3, #0
   1d75e:	aa03      	add	r2, sp, #12
   1d760:	2101      	movs	r1, #1
   1d762:	4628      	mov	r0, r5
   1d764:	f7ff ffc6 	bl	1d6f4 <temp_stub_get_raw_temperature>
    if (rc) { goto err; }  //  console_printf("rawtemp: %d\n", rawtemp);  ////
   1d768:	4603      	mov	r3, r0
   1d76a:	2800      	cmp	r0, #0
   1d76c:	d1ed      	bne.n	1d74a <temp_stub_sensor_read+0x2a>
    temp_data->strd_temp_raw = rawtemp;  //  rawtemp must be between 0 and 4,095 (based on 12-bit ADC)
   1d76e:	9a03      	ldr	r2, [sp, #12]
   1d770:	9204      	str	r2, [sp, #16]
    temp_data->strd_temp_raw_is_valid = 1;
   1d772:	2201      	movs	r2, #1
   1d774:	f88d 2014 	strb.w	r2, [sp, #20]
    if (data_func) {  //  Call the Listener Function to process the sensor data.
   1d778:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1d77a:	2a00      	cmp	r2, #0
   1d77c:	d0e5      	beq.n	1d74a <temp_stub_sensor_read+0x2a>
        rc = data_func(sensor, data_arg, temp_data, TEMP_SENSOR_TYPE);
   1d77e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1d782:	2300      	movs	r3, #0
   1d784:	e9cd 2300 	strd	r2, r3, [sp]
   1d788:	aa04      	add	r2, sp, #16
   1d78a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1d78c:	4620      	mov	r0, r4
   1d78e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d790:	4798      	blx	r3
   1d792:	4603      	mov	r3, r0
   1d794:	e7d9      	b.n	1d74a <temp_stub_sensor_read+0x2a>
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1d796:	f06f 0301 	mvn.w	r3, #1
   1d79a:	e7d6      	b.n	1d74a <temp_stub_sensor_read+0x2a>

0001d79c <temp_stub_config>:
 * @param Sensor device temp_stub structure
 * @param Sensor device temp_stub_cfg config
 *
 * @return 0 on success, and non-zero error code on failure
 */
int temp_stub_config(struct temp_stub *dev, struct temp_stub_cfg *cfg) {
   1d79c:	b508      	push	{r3, lr}
    struct sensor_itf *itf;
    int rc;
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1d79e:	f110 0f70 	cmn.w	r0, #112	; 0x70
   1d7a2:	d009      	beq.n	1d7b8 <temp_stub_config+0x1c>
    rc = sensor_set_type_mask(&(dev->sensor),  cfg->bc_s_mask);
   1d7a4:	e9d1 2300 	ldrd	r2, r3, [r1]
    sensor->s_mask = mask;
   1d7a8:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    if (rc) { goto err; }

    dev->cfg.bc_s_mask = cfg->bc_s_mask;
   1d7ac:	e9d1 2300 	ldrd	r2, r3, [r1]
   1d7b0:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
    return 0;
err:
    return (rc);
}
   1d7b4:	2000      	movs	r0, #0
   1d7b6:	bd08      	pop	{r3, pc}
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1d7b8:	2300      	movs	r3, #0
   1d7ba:	461a      	mov	r2, r3
   1d7bc:	4619      	mov	r1, r3
   1d7be:	4618      	mov	r0, r3
   1d7c0:	f7fd f840 	bl	1a844 <__assert_func>

0001d7c4 <oc_buffer_tx>:
    assert(rc == 0);
}

static void
oc_buffer_tx(struct os_event *ev)
{
   1d7c4:	b508      	push	{r3, lr}
    struct os_mbuf *m;

    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1d7c6:	e002      	b.n	1d7ce <oc_buffer_tx+0xa>
                                    oc_events[RI_TO_DTLS_EVENT], m);
                }
            } else
#endif
            {
                oc_send_buffer(m);
   1d7c8:	4618      	mov	r0, r3
   1d7ca:	f000 f85b 	bl	1d884 <oc_send_buffer>
    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1d7ce:	4808      	ldr	r0, [pc, #32]	; (1d7f0 <oc_buffer_tx+0x2c>)
   1d7d0:	f7fd fc03 	bl	1afda <os_mqueue_get>
   1d7d4:	4603      	mov	r3, r0
   1d7d6:	b148      	cbz	r0, 1d7ec <oc_buffer_tx+0x28>
        STAILQ_NEXT(OS_MBUF_PKTHDR(m), omp_next) = NULL;
   1d7d8:	2200      	movs	r2, #0
   1d7da:	615a      	str	r2, [r3, #20]
        if (OC_MBUF_ENDPOINT(m)->ep.oe_flags & OC_ENDPOINT_MULTICAST) {
   1d7dc:	7e1a      	ldrb	r2, [r3, #24]
   1d7de:	f012 0f08 	tst.w	r2, #8
   1d7e2:	d0f1      	beq.n	1d7c8 <oc_buffer_tx+0x4>
            oc_send_multicast_message(m);
   1d7e4:	4618      	mov	r0, r3
   1d7e6:	f000 f85d 	bl	1d8a4 <oc_send_multicast_message>
   1d7ea:	e7f0      	b.n	1d7ce <oc_buffer_tx+0xa>
            }
#ifdef OC_CLIENT
        }
#endif
    }
}
   1d7ec:	bd08      	pop	{r3, pc}
   1d7ee:	bf00      	nop
   1d7f0:	2000dbd0 	.word	0x2000dbd0

0001d7f4 <oc_buffer_rx>:

static void
oc_buffer_rx(struct os_event *ev)
{
   1d7f4:	b500      	push	{lr}
   1d7f6:	b083      	sub	sp, #12
    struct os_mbuf *m;
#if defined(OC_SECURITY)
    uint8_t b;
#endif

    while ((m = os_mqueue_get(&oc_inq)) != NULL) {
   1d7f8:	4808      	ldr	r0, [pc, #32]	; (1d81c <oc_buffer_rx+0x28>)
   1d7fa:	f7fd fbee 	bl	1afda <os_mqueue_get>
   1d7fe:	9001      	str	r0, [sp, #4]
   1d800:	b140      	cbz	r0, 1d814 <oc_buffer_rx+0x20>
            oc_process_post(&oc_dtls_handler, oc_events[UDP_TO_DTLS_EVENT], m);
        } else {
            coap_receive(m);
        }
#else
        coap_receive(&m);
   1d802:	a801      	add	r0, sp, #4
   1d804:	f000 faa2 	bl	1dd4c <__wrap_coap_receive>
#endif
        if (m) {
   1d808:	9801      	ldr	r0, [sp, #4]
   1d80a:	2800      	cmp	r0, #0
   1d80c:	d0f4      	beq.n	1d7f8 <oc_buffer_rx+0x4>
            os_mbuf_free_chain(m);
   1d80e:	f7fd fc59 	bl	1b0c4 <os_mbuf_free_chain>
   1d812:	e7f1      	b.n	1d7f8 <oc_buffer_rx+0x4>
        }
    }
}
   1d814:	b003      	add	sp, #12
   1d816:	f85d fb04 	ldr.w	pc, [sp], #4
   1d81a:	bf00      	nop
   1d81c:	2000dbb8 	.word	0x2000dbb8

0001d820 <oc_buffer_init>:

void
oc_buffer_init(void)
{
   1d820:	b508      	push	{r3, lr}
    os_mqueue_init(&oc_inq, oc_buffer_rx, NULL);
   1d822:	2200      	movs	r2, #0
   1d824:	4904      	ldr	r1, [pc, #16]	; (1d838 <oc_buffer_init+0x18>)
   1d826:	4805      	ldr	r0, [pc, #20]	; (1d83c <oc_buffer_init+0x1c>)
   1d828:	f7fd fbce 	bl	1afc8 <os_mqueue_init>
    os_mqueue_init(&oc_outq, oc_buffer_tx, NULL);
   1d82c:	2200      	movs	r2, #0
   1d82e:	4904      	ldr	r1, [pc, #16]	; (1d840 <oc_buffer_init+0x20>)
   1d830:	4804      	ldr	r0, [pc, #16]	; (1d844 <oc_buffer_init+0x24>)
   1d832:	f7fd fbc9 	bl	1afc8 <os_mqueue_init>
}
   1d836:	bd08      	pop	{r3, pc}
   1d838:	0001d7f5 	.word	0x0001d7f5
   1d83c:	2000dbb8 	.word	0x2000dbb8
   1d840:	0001d7c5 	.word	0x0001d7c5
   1d844:	2000dbd0 	.word	0x2000dbd0

0001d848 <oc_ri_mem_init>:
}
#endif

void
oc_ri_mem_init(void)
{
   1d848:	b500      	push	{lr}
   1d84a:	b083      	sub	sp, #12
#ifdef OC_SERVER
  os_mempool_init(&oc_resource_pool, MAX_APP_RESOURCES, sizeof(oc_resource_t),
                  oc_resource_area, "oc_res");
#endif
#ifdef OC_CLIENT
    os_mempool_init(&oc_client_cb_pool, MAX_NUM_CONCURRENT_REQUESTS,
   1d84c:	4b07      	ldr	r3, [pc, #28]	; (1d86c <oc_ri_mem_init+0x24>)
   1d84e:	9300      	str	r3, [sp, #0]
   1d850:	4b07      	ldr	r3, [pc, #28]	; (1d870 <oc_ri_mem_init+0x28>)
   1d852:	2264      	movs	r2, #100	; 0x64
   1d854:	2102      	movs	r1, #2
   1d856:	4807      	ldr	r0, [pc, #28]	; (1d874 <oc_ri_mem_init+0x2c>)
   1d858:	f7fd fd3c 	bl	1b2d4 <os_mempool_init>
      sizeof(oc_client_cb_t), oc_client_cb_area, "oc_cl_cbs");
    oc_rep_init();
   1d85c:	f000 f860 	bl	1d920 <oc_rep_init>
#endif
    oc_buffer_init();
   1d860:	f7ff ffde 	bl	1d820 <oc_buffer_init>
}
   1d864:	b003      	add	sp, #12
   1d866:	f85d fb04 	ldr.w	pc, [sp], #4
   1d86a:	bf00      	nop
   1d86c:	000228a4 	.word	0x000228a4
   1d870:	2000dbe8 	.word	0x2000dbe8
   1d874:	2000dcb0 	.word	0x2000dcb0

0001d878 <oc_evq_set>:
}

void
oc_evq_set(struct os_eventq *evq)
{
    oc_evq = evq;
   1d878:	4b01      	ldr	r3, [pc, #4]	; (1d880 <oc_evq_set+0x8>)
   1d87a:	6018      	str	r0, [r3, #0]
}
   1d87c:	4770      	bx	lr
   1d87e:	bf00      	nop
   1d880:	2000dccc 	.word	0x2000dccc

0001d884 <oc_send_buffer>:
    }
}

void
oc_send_buffer(struct os_mbuf *m)
{
   1d884:	b508      	push	{r3, lr}
    struct oc_endpoint *oe;
    const struct oc_transport *ot;

    oe = OC_MBUF_ENDPOINT(m);

    ot = oc_transports[oe->ep.oe_type];
   1d886:	7e03      	ldrb	r3, [r0, #24]
   1d888:	f003 0307 	and.w	r3, r3, #7
   1d88c:	4a04      	ldr	r2, [pc, #16]	; (1d8a0 <oc_send_buffer+0x1c>)
   1d88e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (ot) {
   1d892:	b113      	cbz	r3, 1d89a <oc_send_buffer+0x16>
        ot->ot_tx_ucast(m);
   1d894:	68db      	ldr	r3, [r3, #12]
   1d896:	4798      	blx	r3
    } else {
        OC_LOG(ERROR, "Unknown transport option %u\n", oe->ep.oe_type);
        os_mbuf_free_chain(m);
    }
}
   1d898:	bd08      	pop	{r3, pc}
        os_mbuf_free_chain(m);
   1d89a:	f7fd fc13 	bl	1b0c4 <os_mbuf_free_chain>
}
   1d89e:	e7fb      	b.n	1d898 <oc_send_buffer+0x14>
   1d8a0:	2000df60 	.word	0x2000df60

0001d8a4 <oc_send_multicast_message>:
/*
 * Send on all the transports.
 */
void
oc_send_multicast_message(struct os_mbuf *m)
{
   1d8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d8a8:	4607      	mov	r7, r0
    const struct oc_transport *ot;
    const struct oc_transport *prev = NULL;
    struct os_mbuf *n;
    int i;

    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1d8aa:	2400      	movs	r4, #0
    const struct oc_transport *prev = NULL;
   1d8ac:	4626      	mov	r6, r4
    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1d8ae:	e002      	b.n	1d8b6 <oc_send_multicast_message+0x12>
   1d8b0:	4635      	mov	r5, r6
   1d8b2:	3401      	adds	r4, #1
   1d8b4:	462e      	mov	r6, r5
   1d8b6:	2c07      	cmp	r4, #7
   1d8b8:	dc12      	bgt.n	1d8e0 <oc_send_multicast_message+0x3c>
        if (!oc_transports[i]) {
   1d8ba:	4b0c      	ldr	r3, [pc, #48]	; (1d8ec <oc_send_multicast_message+0x48>)
   1d8bc:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   1d8c0:	2d00      	cmp	r5, #0
   1d8c2:	d0f5      	beq.n	1d8b0 <oc_send_multicast_message+0xc>
            continue;
        }

        ot = oc_transports[i];
        if (prev) {
   1d8c4:	2e00      	cmp	r6, #0
   1d8c6:	d0f4      	beq.n	1d8b2 <oc_send_multicast_message+0xe>
            n = os_mbuf_dup(m);
   1d8c8:	4638      	mov	r0, r7
   1d8ca:	f7fd fc6b 	bl	1b1a4 <os_mbuf_dup>
   1d8ce:	4680      	mov	r8, r0
            prev->ot_tx_mcast(m);
   1d8d0:	6933      	ldr	r3, [r6, #16]
   1d8d2:	4638      	mov	r0, r7
   1d8d4:	4798      	blx	r3
            if (!n) {
   1d8d6:	f1b8 0f00 	cmp.w	r8, #0
   1d8da:	d005      	beq.n	1d8e8 <oc_send_multicast_message+0x44>
                return;
            }
            m = n;
   1d8dc:	4647      	mov	r7, r8
   1d8de:	e7e8      	b.n	1d8b2 <oc_send_multicast_message+0xe>
        }
        prev = ot;
    }
    if (prev) {
   1d8e0:	b116      	cbz	r6, 1d8e8 <oc_send_multicast_message+0x44>
        prev->ot_tx_mcast(m);
   1d8e2:	6933      	ldr	r3, [r6, #16]
   1d8e4:	4638      	mov	r0, r7
   1d8e6:	4798      	blx	r3
    }
}
   1d8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d8ec:	2000df60 	.word	0x2000df60

0001d8f0 <oc_init>:
    return rc;
}

void
oc_init(void)
{
   1d8f0:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
   1d8f2:	4b07      	ldr	r3, [pc, #28]	; (1d910 <oc_init+0x20>)
   1d8f4:	781b      	ldrb	r3, [r3, #0]
   1d8f6:	b133      	cbz	r3, 1d906 <oc_init+0x16>
    oc_ri_mem_init();
   1d8f8:	f7ff ffa6 	bl	1d848 <oc_ri_mem_init>
    oc_evq_set(os_eventq_dflt_get());
   1d8fc:	f7fd fb60 	bl	1afc0 <os_eventq_dflt_get>
   1d900:	f7ff ffba 	bl	1d878 <oc_evq_set>
}
   1d904:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1d906:	461a      	mov	r2, r3
   1d908:	4619      	mov	r1, r3
   1d90a:	4618      	mov	r0, r3
   1d90c:	f7fc ff9a 	bl	1a844 <__assert_func>
   1d910:	2000ddbc 	.word	0x2000ddbc

0001d914 <oc_register_gatt>:
oc_register_gatt(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_GATT) == 1)
    oc_gatt_transport_id = oc_transport_register(&oc_gatt_transport);
#endif
}
   1d914:	4770      	bx	lr

0001d916 <oc_register_ip4>:
oc_register_ip4(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV4) == 1)
    oc_ip4_transport_id = oc_transport_register(&oc_ip4_transport);
#endif
}
   1d916:	4770      	bx	lr

0001d918 <oc_register_ip6>:
oc_register_ip6(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV6) == 1)
    oc_ip6_transport_id = oc_transport_register(&oc_ip6_transport);
#endif
}
   1d918:	4770      	bx	lr

0001d91a <oc_register_lora>:
oc_register_lora(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_LORA) == 1)
    oc_lora_transport_id = oc_transport_register(&oc_lora_transport);
#endif
}
   1d91a:	4770      	bx	lr

0001d91c <oc_register_serial>:
oc_register_serial(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_SERIAL) == 1)
    oc_serial_transport_id = oc_transport_register(&oc_serial_transport);
#endif
}
   1d91c:	4770      	bx	lr
	...

0001d920 <oc_rep_init>:
  return (uint16_t)err;
}

void
oc_rep_init(void)
{
   1d920:	b500      	push	{lr}
   1d922:	b083      	sub	sp, #12
    os_mempool_init(&oc_rep_objects, EST_NUM_REP_OBJECTS,
   1d924:	4b05      	ldr	r3, [pc, #20]	; (1d93c <oc_rep_init+0x1c>)
   1d926:	9300      	str	r3, [sp, #0]
   1d928:	4b05      	ldr	r3, [pc, #20]	; (1d940 <oc_rep_init+0x20>)
   1d92a:	2218      	movs	r2, #24
   1d92c:	2102      	movs	r1, #2
   1d92e:	4805      	ldr	r0, [pc, #20]	; (1d944 <oc_rep_init+0x24>)
   1d930:	f7fd fcd0 	bl	1b2d4 <os_mempool_init>
                    sizeof(oc_rep_t), oc_rep_objects_area, "oc_rep_o");
}
   1d934:	b003      	add	sp, #12
   1d936:	f85d fb04 	ldr.w	pc, [sp], #4
   1d93a:	bf00      	nop
   1d93c:	000228b0 	.word	0x000228b0
   1d940:	2000dcec 	.word	0x2000dcec
   1d944:	2000dcd0 	.word	0x2000dcd0

0001d948 <flash_map_read_mfg>:
 * @return                      0 on success; nonzero on failure.
 */
static int
flash_map_read_mfg(int max_areas,
                   struct flash_area *out_areas, int *out_num_areas)
{
   1d948:	b570      	push	{r4, r5, r6, lr}
   1d94a:	b086      	sub	sp, #24
   1d94c:	4605      	mov	r5, r0
   1d94e:	460e      	mov	r6, r1
   1d950:	4614      	mov	r4, r2
    struct mfg_meta_flash_area meta_flash_area;
    struct mfg_reader reader;
    struct flash_area *fap;
    int rc;

    *out_num_areas = 0;
   1d952:	2300      	movs	r3, #0
   1d954:	6013      	str	r3, [r2, #0]

    /* Ensure manufacturing meta region has been located in flash. */
    mfg_init();
   1d956:	f000 f9ad 	bl	1dcb4 <mfg_init>

    mfg_open(&reader);
   1d95a:	a801      	add	r0, sp, #4
   1d95c:	f000 f9c6 	bl	1dcec <mfg_open>

    while (1) {
        if (*out_num_areas >= max_areas) {
   1d960:	6823      	ldr	r3, [r4, #0]
   1d962:	42ab      	cmp	r3, r5
   1d964:	da29      	bge.n	1d9ba <flash_map_read_mfg+0x72>
            return -1;
        }

        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
   1d966:	2102      	movs	r1, #2
   1d968:	a801      	add	r0, sp, #4
   1d96a:	f000 f98c 	bl	1dc86 <mfg_seek_next_with_type>
   1d96e:	4603      	mov	r3, r0
        switch (rc) {
   1d970:	f110 0f0f 	cmn.w	r0, #15
   1d974:	d003      	beq.n	1d97e <flash_map_read_mfg+0x36>
   1d976:	b120      	cbz	r0, 1d982 <flash_map_read_mfg+0x3a>
        fap->fa_off = meta_flash_area.offset;
        fap->fa_size = meta_flash_area.size;

        (*out_num_areas)++;
    }
}
   1d978:	4618      	mov	r0, r3
   1d97a:	b006      	add	sp, #24
   1d97c:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
   1d97e:	2300      	movs	r3, #0
   1d980:	e7fa      	b.n	1d978 <flash_map_read_mfg+0x30>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
   1d982:	a903      	add	r1, sp, #12
   1d984:	a801      	add	r0, sp, #4
   1d986:	f000 f98b 	bl	1dca0 <mfg_read_tlv_flash_area>
        if (rc != 0) {
   1d98a:	4603      	mov	r3, r0
   1d98c:	2800      	cmp	r0, #0
   1d98e:	d1f3      	bne.n	1d978 <flash_map_read_mfg+0x30>
        fap = out_areas + *out_num_areas;
   1d990:	6823      	ldr	r3, [r4, #0]
   1d992:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1d996:	009a      	lsls	r2, r3, #2
   1d998:	18b3      	adds	r3, r6, r2
        fap->fa_id = meta_flash_area.area_id;
   1d99a:	f89d 100c 	ldrb.w	r1, [sp, #12]
   1d99e:	54b1      	strb	r1, [r6, r2]
        fap->fa_device_id = meta_flash_area.device_id;
   1d9a0:	f89d 200d 	ldrb.w	r2, [sp, #13]
   1d9a4:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
   1d9a6:	f8dd 200e 	ldr.w	r2, [sp, #14]
   1d9aa:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
   1d9ac:	f8dd 2012 	ldr.w	r2, [sp, #18]
   1d9b0:	609a      	str	r2, [r3, #8]
        (*out_num_areas)++;
   1d9b2:	6823      	ldr	r3, [r4, #0]
   1d9b4:	3301      	adds	r3, #1
   1d9b6:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
   1d9b8:	e7d2      	b.n	1d960 <flash_map_read_mfg+0x18>
            return -1;
   1d9ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d9be:	e7db      	b.n	1d978 <flash_map_read_mfg+0x30>

0001d9c0 <flash_area_open>:
{
   1d9c0:	b430      	push	{r4, r5}
    if (flash_map == NULL) {
   1d9c2:	4b0d      	ldr	r3, [pc, #52]	; (1d9f8 <flash_area_open+0x38>)
   1d9c4:	681d      	ldr	r5, [r3, #0]
   1d9c6:	b1a5      	cbz	r5, 1d9f2 <flash_area_open+0x32>
    for (i = 0; i < flash_map_entries; i++) {
   1d9c8:	2300      	movs	r3, #0
   1d9ca:	4a0c      	ldr	r2, [pc, #48]	; (1d9fc <flash_area_open+0x3c>)
   1d9cc:	6812      	ldr	r2, [r2, #0]
   1d9ce:	429a      	cmp	r2, r3
   1d9d0:	dd0b      	ble.n	1d9ea <flash_area_open+0x2a>
        area = flash_map + i;
   1d9d2:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   1d9d6:	00a2      	lsls	r2, r4, #2
   1d9d8:	18ac      	adds	r4, r5, r2
        if (area->fa_id == id) {
   1d9da:	5caa      	ldrb	r2, [r5, r2]
   1d9dc:	4282      	cmp	r2, r0
   1d9de:	d001      	beq.n	1d9e4 <flash_area_open+0x24>
    for (i = 0; i < flash_map_entries; i++) {
   1d9e0:	3301      	adds	r3, #1
   1d9e2:	e7f2      	b.n	1d9ca <flash_area_open+0xa>
            *fap = area;
   1d9e4:	600c      	str	r4, [r1, #0]
            return 0;
   1d9e6:	2000      	movs	r0, #0
   1d9e8:	e001      	b.n	1d9ee <flash_area_open+0x2e>
    return SYS_ENOENT;
   1d9ea:	f06f 0003 	mvn.w	r0, #3
}
   1d9ee:	bc30      	pop	{r4, r5}
   1d9f0:	4770      	bx	lr
        return SYS_EACCES;
   1d9f2:	f06f 0006 	mvn.w	r0, #6
   1d9f6:	e7fa      	b.n	1d9ee <flash_area_open+0x2e>
   1d9f8:	2000df84 	.word	0x2000df84
   1d9fc:	2000df80 	.word	0x2000df80

0001da00 <flash_area_read>:
{
   1da00:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1da02:	6884      	ldr	r4, [r0, #8]
   1da04:	428c      	cmp	r4, r1
   1da06:	d308      	bcc.n	1da1a <flash_area_read+0x1a>
   1da08:	18cd      	adds	r5, r1, r3
   1da0a:	42ac      	cmp	r4, r5
   1da0c:	d308      	bcc.n	1da20 <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   1da0e:	6844      	ldr	r4, [r0, #4]
   1da10:	4421      	add	r1, r4
   1da12:	7840      	ldrb	r0, [r0, #1]
   1da14:	f000 f9c8 	bl	1dda8 <hal_flash_read>
}
   1da18:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   1da1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1da1e:	e7fb      	b.n	1da18 <flash_area_read+0x18>
   1da20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1da24:	e7f8      	b.n	1da18 <flash_area_read+0x18>
	...

0001da28 <flash_map_init>:

void
flash_map_init(void)
{
   1da28:	b510      	push	{r4, lr}
   1da2a:	b084      	sub	sp, #16

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1da2c:	4b14      	ldr	r3, [pc, #80]	; (1da80 <flash_map_init+0x58>)
   1da2e:	781b      	ldrb	r3, [r3, #0]
   1da30:	b303      	cbz	r3, 1da74 <flash_map_init+0x4c>

    rc = hal_flash_init();
   1da32:	f000 f9a5 	bl	1dd80 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1da36:	b138      	cbz	r0, 1da48 <flash_map_init+0x20>
   1da38:	2000      	movs	r0, #0
   1da3a:	9000      	str	r0, [sp, #0]
   1da3c:	4b11      	ldr	r3, [pc, #68]	; (1da84 <flash_map_init+0x5c>)
   1da3e:	681c      	ldr	r4, [r3, #0]
   1da40:	4603      	mov	r3, r0
   1da42:	4602      	mov	r2, r0
   1da44:	4601      	mov	r1, r0
   1da46:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   1da48:	4b0f      	ldr	r3, [pc, #60]	; (1da88 <flash_map_init+0x60>)
   1da4a:	4a10      	ldr	r2, [pc, #64]	; (1da8c <flash_map_init+0x64>)
   1da4c:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   1da4e:	4b10      	ldr	r3, [pc, #64]	; (1da90 <flash_map_init+0x68>)
   1da50:	2206      	movs	r2, #6
   1da52:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
   1da54:	aa03      	add	r2, sp, #12
   1da56:	490f      	ldr	r1, [pc, #60]	; (1da94 <flash_map_init+0x6c>)
   1da58:	200a      	movs	r0, #10
   1da5a:	f7ff ff75 	bl	1d948 <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
   1da5e:	b938      	cbnz	r0, 1da70 <flash_map_init+0x48>
   1da60:	9b03      	ldr	r3, [sp, #12]
   1da62:	2b00      	cmp	r3, #0
   1da64:	dd04      	ble.n	1da70 <flash_map_init+0x48>
        flash_map = mfg_areas;
   1da66:	4a08      	ldr	r2, [pc, #32]	; (1da88 <flash_map_init+0x60>)
   1da68:	490a      	ldr	r1, [pc, #40]	; (1da94 <flash_map_init+0x6c>)
   1da6a:	6011      	str	r1, [r2, #0]
        flash_map_entries = num_areas;
   1da6c:	4a08      	ldr	r2, [pc, #32]	; (1da90 <flash_map_init+0x68>)
   1da6e:	6013      	str	r3, [r2, #0]
    }
}
   1da70:	b004      	add	sp, #16
   1da72:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1da74:	461a      	mov	r2, r3
   1da76:	4619      	mov	r1, r3
   1da78:	4618      	mov	r0, r3
   1da7a:	f7fc fee3 	bl	1a844 <__assert_func>
   1da7e:	bf00      	nop
   1da80:	2000ddbc 	.word	0x2000ddbc
   1da84:	20000104 	.word	0x20000104
   1da88:	2000df84 	.word	0x2000df84
   1da8c:	000228bc 	.word	0x000228bc
   1da90:	2000df80 	.word	0x2000df80
   1da94:	2000dd1c 	.word	0x2000dd1c

0001da98 <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
   1da98:	4770      	bx	lr
	...

0001da9c <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
   1da9c:	b530      	push	{r4, r5, lr}
   1da9e:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
   1daa0:	7885      	ldrb	r5, [r0, #2]
   1daa2:	4b21      	ldr	r3, [pc, #132]	; (1db28 <mfg_seek_next_aux+0x8c>)
   1daa4:	681b      	ldr	r3, [r3, #0]
   1daa6:	429d      	cmp	r5, r3
   1daa8:	da32      	bge.n	1db10 <mfg_seek_next_aux+0x74>
   1daaa:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
   1daac:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   1dab0:	0093      	lsls	r3, r2, #2
   1dab2:	a901      	add	r1, sp, #4
   1dab4:	4a1d      	ldr	r2, [pc, #116]	; (1db2c <mfg_seek_next_aux+0x90>)
   1dab6:	5cd0      	ldrb	r0, [r2, r3]
   1dab8:	f7ff ff82 	bl	1d9c0 <flash_area_open>
    if (rc != 0) {
   1dabc:	bb58      	cbnz	r0, 1db16 <mfg_seek_next_aux+0x7a>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
   1dabe:	6862      	ldr	r2, [r4, #4]
   1dac0:	b9c2      	cbnz	r2, 1daf4 <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
   1dac2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1dac6:	00aa      	lsls	r2, r5, #2
   1dac8:	4b18      	ldr	r3, [pc, #96]	; (1db2c <mfg_seek_next_aux+0x90>)
   1daca:	4413      	add	r3, r2
   1dacc:	685b      	ldr	r3, [r3, #4]
   1dace:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
   1dad0:	6861      	ldr	r1, [r4, #4]
   1dad2:	9801      	ldr	r0, [sp, #4]
   1dad4:	6883      	ldr	r3, [r0, #8]
   1dad6:	3b08      	subs	r3, #8
   1dad8:	4299      	cmp	r1, r3
   1dada:	d310      	bcc.n	1dafe <mfg_seek_next_aux+0x62>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
   1dadc:	78a3      	ldrb	r3, [r4, #2]
   1dade:	1c59      	adds	r1, r3, #1
   1dae0:	4a11      	ldr	r2, [pc, #68]	; (1db28 <mfg_seek_next_aux+0x8c>)
   1dae2:	6812      	ldr	r2, [r2, #0]
   1dae4:	4291      	cmp	r1, r2
   1dae6:	da19      	bge.n	1db1c <mfg_seek_next_aux+0x80>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
   1dae8:	2200      	movs	r2, #0
   1daea:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
   1daec:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
   1daee:	f06f 0305 	mvn.w	r3, #5
   1daf2:	e015      	b.n	1db20 <mfg_seek_next_aux+0x84>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
   1daf4:	7863      	ldrb	r3, [r4, #1]
   1daf6:	4413      	add	r3, r2
   1daf8:	3302      	adds	r3, #2
   1dafa:	6063      	str	r3, [r4, #4]
   1dafc:	e7e8      	b.n	1dad0 <mfg_seek_next_aux+0x34>
        }
        goto done;
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
   1dafe:	2302      	movs	r3, #2
   1db00:	4622      	mov	r2, r4
   1db02:	f7ff ff7d 	bl	1da00 <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
   1db06:	4603      	mov	r3, r0
   1db08:	b150      	cbz	r0, 1db20 <mfg_seek_next_aux+0x84>
        rc = SYS_EIO;
   1db0a:	f06f 0304 	mvn.w	r3, #4
   1db0e:	e007      	b.n	1db20 <mfg_seek_next_aux+0x84>
        return SYS_EINVAL;
   1db10:	f06f 0301 	mvn.w	r3, #1
   1db14:	e004      	b.n	1db20 <mfg_seek_next_aux+0x84>
        return SYS_EIO;
   1db16:	f06f 0304 	mvn.w	r3, #4
   1db1a:	e001      	b.n	1db20 <mfg_seek_next_aux+0x84>
            rc = SYS_EDONE;
   1db1c:	f06f 030e 	mvn.w	r3, #14
    }

done:
    flash_area_close(fap);
    return rc;
}
   1db20:	4618      	mov	r0, r3
   1db22:	b003      	add	sp, #12
   1db24:	bd30      	pop	{r4, r5, pc}
   1db26:	bf00      	nop
   1db28:	2000ddb0 	.word	0x2000ddb0
   1db2c:	2000dd98 	.word	0x2000dd98

0001db30 <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
   1db30:	b530      	push	{r4, r5, lr}
   1db32:	b085      	sub	sp, #20
   1db34:	4605      	mov	r5, r0
   1db36:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
   1db38:	a903      	add	r1, sp, #12
   1db3a:	f7ff ff41 	bl	1d9c0 <flash_area_open>
    if (rc != 0) {
   1db3e:	b9e8      	cbnz	r0, 1db7c <mfg_read_mmr+0x4c>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
   1db40:	9803      	ldr	r0, [sp, #12]
   1db42:	6881      	ldr	r1, [r0, #8]
   1db44:	2308      	movs	r3, #8
   1db46:	aa01      	add	r2, sp, #4
   1db48:	3908      	subs	r1, #8
   1db4a:	f7ff ff59 	bl	1da00 <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
   1db4e:	4601      	mov	r1, r0
   1db50:	b9b8      	cbnz	r0, 1db82 <mfg_read_mmr+0x52>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
   1db52:	9a02      	ldr	r2, [sp, #8]
   1db54:	4b11      	ldr	r3, [pc, #68]	; (1db9c <mfg_read_mmr+0x6c>)
   1db56:	429a      	cmp	r2, r3
   1db58:	d116      	bne.n	1db88 <mfg_read_mmr+0x58>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
   1db5a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1db5e:	2b02      	cmp	r3, #2
   1db60:	d115      	bne.n	1db8e <mfg_read_mmr+0x5e>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
   1db62:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1db66:	9b03      	ldr	r3, [sp, #12]
   1db68:	689b      	ldr	r3, [r3, #8]
   1db6a:	429a      	cmp	r2, r3
   1db6c:	d812      	bhi.n	1db94 <mfg_read_mmr+0x64>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
   1db6e:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
   1db70:	7025      	strb	r5, [r4, #0]
   1db72:	6063      	str	r3, [r4, #4]
   1db74:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
   1db76:	4608      	mov	r0, r1
   1db78:	b005      	add	sp, #20
   1db7a:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
   1db7c:	f06f 0104 	mvn.w	r1, #4
   1db80:	e7f9      	b.n	1db76 <mfg_read_mmr+0x46>
        return SYS_EIO;
   1db82:	f06f 0104 	mvn.w	r1, #4
   1db86:	e7f6      	b.n	1db76 <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1db88:	f06f 0108 	mvn.w	r1, #8
   1db8c:	e7f3      	b.n	1db76 <mfg_read_mmr+0x46>
        return SYS_ENOTSUP;
   1db8e:	f06f 010b 	mvn.w	r1, #11
   1db92:	e7f0      	b.n	1db76 <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1db94:	f06f 0108 	mvn.w	r1, #8
   1db98:	e7ed      	b.n	1db76 <mfg_read_mmr+0x46>
   1db9a:	bf00      	nop
   1db9c:	3bb2a269 	.word	0x3bb2a269

0001dba0 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
   1dba0:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
   1dba2:	2300      	movs	r3, #0
   1dba4:	4a11      	ldr	r2, [pc, #68]	; (1dbec <mfg_read_next_mmr+0x4c>)
   1dba6:	6812      	ldr	r2, [r2, #0]
   1dba8:	429a      	cmp	r2, r3
   1dbaa:	dd08      	ble.n	1dbbe <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
   1dbac:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   1dbb0:	008a      	lsls	r2, r1, #2
   1dbb2:	490f      	ldr	r1, [pc, #60]	; (1dbf0 <mfg_read_next_mmr+0x50>)
   1dbb4:	5c8a      	ldrb	r2, [r1, r2]
   1dbb6:	4282      	cmp	r2, r0
   1dbb8:	d011      	beq.n	1dbde <mfg_read_next_mmr+0x3e>
    for (i = 0; i < mfg_num_mmrs; i++) {
   1dbba:	3301      	adds	r3, #1
   1dbbc:	e7f2      	b.n	1dba4 <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
   1dbbe:	2a01      	cmp	r2, #1
   1dbc0:	dc11      	bgt.n	1dbe6 <mfg_read_next_mmr+0x46>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
   1dbc2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1dbc6:	0093      	lsls	r3, r2, #2
   1dbc8:	4909      	ldr	r1, [pc, #36]	; (1dbf0 <mfg_read_next_mmr+0x50>)
   1dbca:	4419      	add	r1, r3
   1dbcc:	f7ff ffb0 	bl	1db30 <mfg_read_mmr>
    if (rc != 0) {
   1dbd0:	4603      	mov	r3, r0
   1dbd2:	b930      	cbnz	r0, 1dbe2 <mfg_read_next_mmr+0x42>
        return rc;
    }

    mfg_num_mmrs++;
   1dbd4:	4905      	ldr	r1, [pc, #20]	; (1dbec <mfg_read_next_mmr+0x4c>)
   1dbd6:	680a      	ldr	r2, [r1, #0]
   1dbd8:	3201      	adds	r2, #1
   1dbda:	600a      	str	r2, [r1, #0]
    return 0;
   1dbdc:	e001      	b.n	1dbe2 <mfg_read_next_mmr+0x42>
            return SYS_EALREADY;
   1dbde:	f06f 030a 	mvn.w	r3, #10
}
   1dbe2:	4618      	mov	r0, r3
   1dbe4:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
   1dbe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1dbea:	e7fa      	b.n	1dbe2 <mfg_read_next_mmr+0x42>
   1dbec:	2000ddb0 	.word	0x2000ddb0
   1dbf0:	2000dd98 	.word	0x2000dd98

0001dbf4 <mfg_open_flash_area>:
{
   1dbf4:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1dbf6:	7883      	ldrb	r3, [r0, #2]
   1dbf8:	4a0b      	ldr	r2, [pc, #44]	; (1dc28 <mfg_open_flash_area+0x34>)
   1dbfa:	6812      	ldr	r2, [r2, #0]
   1dbfc:	4293      	cmp	r3, r2
   1dbfe:	da0a      	bge.n	1dc16 <mfg_open_flash_area+0x22>
    rc = flash_area_open(mmr->area_id, fap);
   1dc00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1dc04:	009a      	lsls	r2, r3, #2
   1dc06:	4b09      	ldr	r3, [pc, #36]	; (1dc2c <mfg_open_flash_area+0x38>)
   1dc08:	5c98      	ldrb	r0, [r3, r2]
   1dc0a:	f7ff fed9 	bl	1d9c0 <flash_area_open>
    if (rc != 0) {
   1dc0e:	4603      	mov	r3, r0
   1dc10:	b938      	cbnz	r0, 1dc22 <mfg_open_flash_area+0x2e>
}
   1dc12:	4618      	mov	r0, r3
   1dc14:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1dc16:	2300      	movs	r3, #0
   1dc18:	461a      	mov	r2, r3
   1dc1a:	4619      	mov	r1, r3
   1dc1c:	4618      	mov	r0, r3
   1dc1e:	f7fc fe11 	bl	1a844 <__assert_func>
        return SYS_EIO;
   1dc22:	f06f 0304 	mvn.w	r3, #4
   1dc26:	e7f4      	b.n	1dc12 <mfg_open_flash_area+0x1e>
   1dc28:	2000ddb0 	.word	0x2000ddb0
   1dc2c:	2000dd98 	.word	0x2000dd98

0001dc30 <mfg_read_tlv_body>:
{
   1dc30:	b570      	push	{r4, r5, r6, lr}
   1dc32:	b082      	sub	sp, #8
   1dc34:	4606      	mov	r6, r0
   1dc36:	460c      	mov	r4, r1
   1dc38:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
   1dc3a:	a901      	add	r1, sp, #4
   1dc3c:	f7ff ffda 	bl	1dbf4 <mfg_open_flash_area>
    if (rc != 0) {
   1dc40:	4603      	mov	r3, r0
   1dc42:	b110      	cbz	r0, 1dc4a <mfg_read_tlv_body+0x1a>
}
   1dc44:	4618      	mov	r0, r3
   1dc46:	b002      	add	sp, #8
   1dc48:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
   1dc4a:	462a      	mov	r2, r5
   1dc4c:	2100      	movs	r1, #0
   1dc4e:	4620      	mov	r0, r4
   1dc50:	f7fe f9fb 	bl	1c04a <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
   1dc54:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
   1dc56:	6871      	ldr	r1, [r6, #4]
   1dc58:	42ab      	cmp	r3, r5
   1dc5a:	bfa8      	it	ge
   1dc5c:	462b      	movge	r3, r5
   1dc5e:	4622      	mov	r2, r4
   1dc60:	3102      	adds	r1, #2
   1dc62:	9801      	ldr	r0, [sp, #4]
   1dc64:	f7ff fecc 	bl	1da00 <flash_area_read>
    if (rc != 0) {
   1dc68:	4603      	mov	r3, r0
   1dc6a:	2800      	cmp	r0, #0
   1dc6c:	d0ea      	beq.n	1dc44 <mfg_read_tlv_body+0x14>
        return SYS_EIO;
   1dc6e:	f06f 0304 	mvn.w	r3, #4
   1dc72:	e7e7      	b.n	1dc44 <mfg_read_tlv_body+0x14>

0001dc74 <mfg_seek_next>:
{
   1dc74:	b510      	push	{r4, lr}
   1dc76:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
   1dc78:	4620      	mov	r0, r4
   1dc7a:	f7ff ff0f 	bl	1da9c <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
   1dc7e:	f110 0f06 	cmn.w	r0, #6
   1dc82:	d0f9      	beq.n	1dc78 <mfg_seek_next+0x4>
}
   1dc84:	bd10      	pop	{r4, pc}

0001dc86 <mfg_seek_next_with_type>:
{
   1dc86:	b538      	push	{r3, r4, r5, lr}
   1dc88:	4604      	mov	r4, r0
   1dc8a:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
   1dc8c:	4620      	mov	r0, r4
   1dc8e:	f7ff fff1 	bl	1dc74 <mfg_seek_next>
        if (rc != 0) {
   1dc92:	4602      	mov	r2, r0
   1dc94:	b910      	cbnz	r0, 1dc9c <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
   1dc96:	7823      	ldrb	r3, [r4, #0]
   1dc98:	42ab      	cmp	r3, r5
   1dc9a:	d1f7      	bne.n	1dc8c <mfg_seek_next_with_type+0x6>
}
   1dc9c:	4610      	mov	r0, r2
   1dc9e:	bd38      	pop	{r3, r4, r5, pc}

0001dca0 <mfg_read_tlv_flash_area>:
{
   1dca0:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
   1dca2:	220a      	movs	r2, #10
   1dca4:	f7ff ffc4 	bl	1dc30 <mfg_read_tlv_body>
}
   1dca8:	bd08      	pop	{r3, pc}

0001dcaa <mfg_read_tlv_mmr_ref>:
{
   1dcaa:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
   1dcac:	2201      	movs	r2, #1
   1dcae:	f7ff ffbf 	bl	1dc30 <mfg_read_tlv_body>
}
   1dcb2:	bd08      	pop	{r3, pc}

0001dcb4 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
   1dcb4:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
   1dcb6:	4b0b      	ldr	r3, [pc, #44]	; (1dce4 <mfg_init+0x30>)
   1dcb8:	781b      	ldrb	r3, [r3, #0]
   1dcba:	b94b      	cbnz	r3, 1dcd0 <mfg_init+0x1c>
        return;
    }
    mfg_initialized = true;
   1dcbc:	4b09      	ldr	r3, [pc, #36]	; (1dce4 <mfg_init+0x30>)
   1dcbe:	2201      	movs	r2, #1
   1dcc0:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1dcc2:	4b09      	ldr	r3, [pc, #36]	; (1dce8 <mfg_init+0x34>)
   1dcc4:	781b      	ldrb	r3, [r3, #0]
   1dcc6:	b123      	cbz	r3, 1dcd2 <mfg_init+0x1e>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
   1dcc8:	2000      	movs	r0, #0
   1dcca:	f7ff ff69 	bl	1dba0 <mfg_read_next_mmr>
    if (rc != 0) {
   1dcce:	b128      	cbz	r0, 1dcdc <mfg_init+0x28>

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
}
   1dcd0:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1dcd2:	461a      	mov	r2, r3
   1dcd4:	4619      	mov	r1, r3
   1dcd6:	4618      	mov	r0, r3
   1dcd8:	f7fc fdb4 	bl	1a844 <__assert_func>
    rc = mfg_read_mmr_refs();
   1dcdc:	f000 f80e 	bl	1dcfc <mfg_read_mmr_refs>
err:
   1dce0:	e7f6      	b.n	1dcd0 <mfg_init+0x1c>
   1dce2:	bf00      	nop
   1dce4:	2000dd94 	.word	0x2000dd94
   1dce8:	2000ddbc 	.word	0x2000ddbc

0001dcec <mfg_open>:
{
   1dcec:	b510      	push	{r4, lr}
   1dcee:	4604      	mov	r4, r0
    mfg_init();
   1dcf0:	f7ff ffe0 	bl	1dcb4 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
   1dcf4:	2300      	movs	r3, #0
   1dcf6:	6023      	str	r3, [r4, #0]
   1dcf8:	6063      	str	r3, [r4, #4]
}
   1dcfa:	bd10      	pop	{r4, pc}

0001dcfc <mfg_read_mmr_refs>:
{
   1dcfc:	b500      	push	{lr}
   1dcfe:	b085      	sub	sp, #20
    mfg_open(&reader);
   1dd00:	a801      	add	r0, sp, #4
   1dd02:	f7ff fff3 	bl	1dcec <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
   1dd06:	2104      	movs	r1, #4
   1dd08:	eb0d 0001 	add.w	r0, sp, r1
   1dd0c:	f7ff ffbb 	bl	1dc86 <mfg_seek_next_with_type>
   1dd10:	4603      	mov	r3, r0
        switch (rc) {
   1dd12:	f110 0f0f 	cmn.w	r0, #15
   1dd16:	d004      	beq.n	1dd22 <mfg_read_mmr_refs+0x26>
   1dd18:	b128      	cbz	r0, 1dd26 <mfg_read_mmr_refs+0x2a>
}
   1dd1a:	4618      	mov	r0, r3
   1dd1c:	b005      	add	sp, #20
   1dd1e:	f85d fb04 	ldr.w	pc, [sp], #4
            return 0;
   1dd22:	2300      	movs	r3, #0
   1dd24:	e7f9      	b.n	1dd1a <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
   1dd26:	a903      	add	r1, sp, #12
   1dd28:	a801      	add	r0, sp, #4
   1dd2a:	f7ff ffbe 	bl	1dcaa <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
   1dd2e:	4603      	mov	r3, r0
   1dd30:	2800      	cmp	r0, #0
   1dd32:	d1f2      	bne.n	1dd1a <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
   1dd34:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1dd38:	f7ff ff32 	bl	1dba0 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
   1dd3c:	4603      	mov	r3, r0
   1dd3e:	2800      	cmp	r0, #0
   1dd40:	d0e1      	beq.n	1dd06 <mfg_read_mmr_refs+0xa>
   1dd42:	f110 0f0b 	cmn.w	r0, #11
   1dd46:	d0de      	beq.n	1dd06 <mfg_read_mmr_refs+0xa>
   1dd48:	e7e7      	b.n	1dd1a <mfg_read_mmr_refs+0x1e>
	...

0001dd4c <__wrap_coap_receive>:
}

///////////////////////////////////////////////////////////////////////////////
//  Other Functions

int __wrap_coap_receive(/* struct os_mbuf **mp */) {
   1dd4c:	b508      	push	{r3, lr}
    //  We override the default coap_receive() with an empty function so that we will 
    //  NOT link in any modules for receiving and parsing CoAP requests, to save ROM space.
    //  We only need to transmit CoAP requests.  The overriding is done via the Linker Flag
    //  "-Wl,-wrap,coap_receive" in apps/my_sensor_app/pkg.yml
    console_printf("coap_receive NOT IMPLEMENTED\n");
   1dd4e:	4803      	ldr	r0, [pc, #12]	; (1dd5c <__wrap_coap_receive+0x10>)
   1dd50:	f7fb feb0 	bl	19ab4 <console_printf>
    return -1;
}
   1dd54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dd58:	bd08      	pop	{r3, pc}
   1dd5a:	bf00      	nop
   1dd5c:	00022904 	.word	0x00022904

0001dd60 <_fini>:
//  From https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/static.html.
void* __dso_handle = NULL;
int __aeabi_atexit(void *object, void (*destructor)(void *), void *dso_handle) { return 0; }

#ifndef ARCH_rv32imac  //  If not RISC-V...
void _fini(void) { }   //  Define the function to be called when main() exits
   1dd60:	4770      	bx	lr

0001dd62 <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
   1dd62:	6843      	ldr	r3, [r0, #4]
   1dd64:	428b      	cmp	r3, r1
   1dd66:	d808      	bhi.n	1dd7a <hal_flash_check_addr+0x18>
   1dd68:	6882      	ldr	r2, [r0, #8]
   1dd6a:	4413      	add	r3, r2
   1dd6c:	428b      	cmp	r3, r1
   1dd6e:	d301      	bcc.n	1dd74 <hal_flash_check_addr+0x12>
        return SYS_EINVAL;
    }
    return 0;
   1dd70:	2000      	movs	r0, #0
}
   1dd72:	4770      	bx	lr
        return SYS_EINVAL;
   1dd74:	f06f 0001 	mvn.w	r0, #1
   1dd78:	4770      	bx	lr
   1dd7a:	f06f 0001 	mvn.w	r0, #1
   1dd7e:	4770      	bx	lr

0001dd80 <hal_flash_init>:
{
   1dd80:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
   1dd82:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
   1dd84:	462c      	mov	r4, r5
   1dd86:	e001      	b.n	1dd8c <hal_flash_init+0xc>
   1dd88:	3401      	adds	r4, #1
   1dd8a:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
   1dd8c:	4620      	mov	r0, r4
   1dd8e:	f7fe fce3 	bl	1c758 <hal_bsp_flash_dev>
        if (!hf) {
   1dd92:	b138      	cbz	r0, 1dda4 <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
   1dd94:	6802      	ldr	r2, [r0, #0]
   1dd96:	6952      	ldr	r2, [r2, #20]
   1dd98:	4790      	blx	r2
   1dd9a:	2800      	cmp	r0, #0
   1dd9c:	d0f4      	beq.n	1dd88 <hal_flash_init+0x8>
            rc = SYS_EIO;
   1dd9e:	f06f 0504 	mvn.w	r5, #4
   1dda2:	e7f1      	b.n	1dd88 <hal_flash_init+0x8>
}
   1dda4:	4628      	mov	r0, r5
   1dda6:	bd38      	pop	{r3, r4, r5, pc}

0001dda8 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   1dda8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ddac:	460d      	mov	r5, r1
   1ddae:	4690      	mov	r8, r2
   1ddb0:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1ddb2:	f7fe fcd1 	bl	1c758 <hal_bsp_flash_dev>
    if (!hf) {
   1ddb6:	b1c0      	cbz	r0, 1ddea <hal_flash_read+0x42>
   1ddb8:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1ddba:	4629      	mov	r1, r5
   1ddbc:	f7ff ffd1 	bl	1dd62 <hal_flash_check_addr>
   1ddc0:	b9b0      	cbnz	r0, 1ddf0 <hal_flash_read+0x48>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1ddc2:	19a9      	adds	r1, r5, r6
   1ddc4:	4620      	mov	r0, r4
   1ddc6:	f7ff ffcc 	bl	1dd62 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1ddca:	b9a0      	cbnz	r0, 1ddf6 <hal_flash_read+0x4e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   1ddcc:	6823      	ldr	r3, [r4, #0]
   1ddce:	681f      	ldr	r7, [r3, #0]
   1ddd0:	4633      	mov	r3, r6
   1ddd2:	4642      	mov	r2, r8
   1ddd4:	4629      	mov	r1, r5
   1ddd6:	4620      	mov	r0, r4
   1ddd8:	47b8      	blx	r7
    if (rc != 0) {
   1ddda:	4603      	mov	r3, r0
   1dddc:	b910      	cbnz	r0, 1dde4 <hal_flash_read+0x3c>
        return SYS_EIO;
    }

    return 0;
}
   1ddde:	4618      	mov	r0, r3
   1dde0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
   1dde4:	f06f 0304 	mvn.w	r3, #4
   1dde8:	e7f9      	b.n	1ddde <hal_flash_read+0x36>
        return SYS_EINVAL;
   1ddea:	f06f 0301 	mvn.w	r3, #1
   1ddee:	e7f6      	b.n	1ddde <hal_flash_read+0x36>
        return SYS_EINVAL;
   1ddf0:	f06f 0301 	mvn.w	r3, #1
   1ddf4:	e7f3      	b.n	1ddde <hal_flash_read+0x36>
   1ddf6:	f06f 0301 	mvn.w	r3, #1
   1ddfa:	e7f0      	b.n	1ddde <hal_flash_read+0x36>

0001ddfc <hal_bsp_hw_id_len>:

int
hal_bsp_hw_id_len(void)
{
    return sizeof(NRF_FICR->DEVICEID) + sizeof(NRF_FICR->DEVICEADDR);
}
   1ddfc:	2010      	movs	r0, #16
   1ddfe:	4770      	bx	lr

0001de00 <hal_bsp_hw_id>:
 * These values are generated at random.
 * DEVICEID[0-1] and DEVICEADDR[0-1].
 */
int
hal_bsp_hw_id(uint8_t *id, int max_len)
{
   1de00:	b570      	push	{r4, r5, r6, lr}
   1de02:	4606      	mov	r6, r0
   1de04:	460c      	mov	r4, r1
    int len, cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEID), max_len);
   1de06:	460d      	mov	r5, r1
   1de08:	2908      	cmp	r1, #8
   1de0a:	bf28      	it	cs
   1de0c:	2508      	movcs	r5, #8
    memcpy(id, (void *)NRF_FICR->DEVICEID, cnt);
   1de0e:	462a      	mov	r2, r5
   1de10:	4906      	ldr	r1, [pc, #24]	; (1de2c <hal_bsp_hw_id+0x2c>)
   1de12:	f7fe f90d 	bl	1c030 <memcpy>
    len = cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEADDR), max_len - len);
   1de16:	1b64      	subs	r4, r4, r5
   1de18:	2c08      	cmp	r4, #8
   1de1a:	bf28      	it	cs
   1de1c:	2408      	movcs	r4, #8
    memcpy(id + len, (void *)NRF_FICR->DEVICEADDR, cnt);
   1de1e:	4622      	mov	r2, r4
   1de20:	4903      	ldr	r1, [pc, #12]	; (1de30 <hal_bsp_hw_id+0x30>)
   1de22:	1970      	adds	r0, r6, r5
   1de24:	f7fe f904 	bl	1c030 <memcpy>

    return len + cnt;
}
   1de28:	1928      	adds	r0, r5, r4
   1de2a:	bd70      	pop	{r4, r5, r6, pc}
   1de2c:	10000060 	.word	0x10000060
   1de30:	100000a4 	.word	0x100000a4

0001de34 <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   1de34:	b40e      	push	{r1, r2, r3}
   1de36:	b500      	push	{lr}
   1de38:	b082      	sub	sp, #8
   1de3a:	ab03      	add	r3, sp, #12
   1de3c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
   1de40:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   1de42:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1de46:	f7fe fbef 	bl	1c628 <vsnprintf>
	va_end(ap);

	return rv;
}
   1de4a:	b002      	add	sp, #8
   1de4c:	f85d eb04 	ldr.w	lr, [sp], #4
   1de50:	b003      	add	sp, #12
   1de52:	4770      	bx	lr

0001de54 <__aeabi_uldivmod>:
   1de54:	b953      	cbnz	r3, 1de6c <__aeabi_uldivmod+0x18>
   1de56:	b94a      	cbnz	r2, 1de6c <__aeabi_uldivmod+0x18>
   1de58:	2900      	cmp	r1, #0
   1de5a:	bf08      	it	eq
   1de5c:	2800      	cmpeq	r0, #0
   1de5e:	bf1c      	itt	ne
   1de60:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1de64:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1de68:	f000 b972 	b.w	1e150 <__aeabi_idiv0>
   1de6c:	f1ad 0c08 	sub.w	ip, sp, #8
   1de70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1de74:	f000 f806 	bl	1de84 <__udivmoddi4>
   1de78:	f8dd e004 	ldr.w	lr, [sp, #4]
   1de7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1de80:	b004      	add	sp, #16
   1de82:	4770      	bx	lr

0001de84 <__udivmoddi4>:
   1de84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1de88:	9e08      	ldr	r6, [sp, #32]
   1de8a:	4604      	mov	r4, r0
   1de8c:	4688      	mov	r8, r1
   1de8e:	2b00      	cmp	r3, #0
   1de90:	d14b      	bne.n	1df2a <__udivmoddi4+0xa6>
   1de92:	428a      	cmp	r2, r1
   1de94:	4615      	mov	r5, r2
   1de96:	d967      	bls.n	1df68 <__udivmoddi4+0xe4>
   1de98:	fab2 f282 	clz	r2, r2
   1de9c:	b14a      	cbz	r2, 1deb2 <__udivmoddi4+0x2e>
   1de9e:	f1c2 0720 	rsb	r7, r2, #32
   1dea2:	fa01 f302 	lsl.w	r3, r1, r2
   1dea6:	fa20 f707 	lsr.w	r7, r0, r7
   1deaa:	4095      	lsls	r5, r2
   1deac:	ea47 0803 	orr.w	r8, r7, r3
   1deb0:	4094      	lsls	r4, r2
   1deb2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1deb6:	0c23      	lsrs	r3, r4, #16
   1deb8:	fbb8 f7fe 	udiv	r7, r8, lr
   1debc:	fa1f fc85 	uxth.w	ip, r5
   1dec0:	fb0e 8817 	mls	r8, lr, r7, r8
   1dec4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   1dec8:	fb07 f10c 	mul.w	r1, r7, ip
   1decc:	4299      	cmp	r1, r3
   1dece:	d909      	bls.n	1dee4 <__udivmoddi4+0x60>
   1ded0:	18eb      	adds	r3, r5, r3
   1ded2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   1ded6:	f080 811b 	bcs.w	1e110 <__udivmoddi4+0x28c>
   1deda:	4299      	cmp	r1, r3
   1dedc:	f240 8118 	bls.w	1e110 <__udivmoddi4+0x28c>
   1dee0:	3f02      	subs	r7, #2
   1dee2:	442b      	add	r3, r5
   1dee4:	1a5b      	subs	r3, r3, r1
   1dee6:	b2a4      	uxth	r4, r4
   1dee8:	fbb3 f0fe 	udiv	r0, r3, lr
   1deec:	fb0e 3310 	mls	r3, lr, r0, r3
   1def0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1def4:	fb00 fc0c 	mul.w	ip, r0, ip
   1def8:	45a4      	cmp	ip, r4
   1defa:	d909      	bls.n	1df10 <__udivmoddi4+0x8c>
   1defc:	192c      	adds	r4, r5, r4
   1defe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1df02:	f080 8107 	bcs.w	1e114 <__udivmoddi4+0x290>
   1df06:	45a4      	cmp	ip, r4
   1df08:	f240 8104 	bls.w	1e114 <__udivmoddi4+0x290>
   1df0c:	3802      	subs	r0, #2
   1df0e:	442c      	add	r4, r5
   1df10:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   1df14:	eba4 040c 	sub.w	r4, r4, ip
   1df18:	2700      	movs	r7, #0
   1df1a:	b11e      	cbz	r6, 1df24 <__udivmoddi4+0xa0>
   1df1c:	40d4      	lsrs	r4, r2
   1df1e:	2300      	movs	r3, #0
   1df20:	e9c6 4300 	strd	r4, r3, [r6]
   1df24:	4639      	mov	r1, r7
   1df26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1df2a:	428b      	cmp	r3, r1
   1df2c:	d909      	bls.n	1df42 <__udivmoddi4+0xbe>
   1df2e:	2e00      	cmp	r6, #0
   1df30:	f000 80eb 	beq.w	1e10a <__udivmoddi4+0x286>
   1df34:	2700      	movs	r7, #0
   1df36:	e9c6 0100 	strd	r0, r1, [r6]
   1df3a:	4638      	mov	r0, r7
   1df3c:	4639      	mov	r1, r7
   1df3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1df42:	fab3 f783 	clz	r7, r3
   1df46:	2f00      	cmp	r7, #0
   1df48:	d147      	bne.n	1dfda <__udivmoddi4+0x156>
   1df4a:	428b      	cmp	r3, r1
   1df4c:	d302      	bcc.n	1df54 <__udivmoddi4+0xd0>
   1df4e:	4282      	cmp	r2, r0
   1df50:	f200 80fa 	bhi.w	1e148 <__udivmoddi4+0x2c4>
   1df54:	1a84      	subs	r4, r0, r2
   1df56:	eb61 0303 	sbc.w	r3, r1, r3
   1df5a:	2001      	movs	r0, #1
   1df5c:	4698      	mov	r8, r3
   1df5e:	2e00      	cmp	r6, #0
   1df60:	d0e0      	beq.n	1df24 <__udivmoddi4+0xa0>
   1df62:	e9c6 4800 	strd	r4, r8, [r6]
   1df66:	e7dd      	b.n	1df24 <__udivmoddi4+0xa0>
   1df68:	b902      	cbnz	r2, 1df6c <__udivmoddi4+0xe8>
   1df6a:	deff      	udf	#255	; 0xff
   1df6c:	fab2 f282 	clz	r2, r2
   1df70:	2a00      	cmp	r2, #0
   1df72:	f040 808f 	bne.w	1e094 <__udivmoddi4+0x210>
   1df76:	1b49      	subs	r1, r1, r5
   1df78:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1df7c:	fa1f f885 	uxth.w	r8, r5
   1df80:	2701      	movs	r7, #1
   1df82:	fbb1 fcfe 	udiv	ip, r1, lr
   1df86:	0c23      	lsrs	r3, r4, #16
   1df88:	fb0e 111c 	mls	r1, lr, ip, r1
   1df8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1df90:	fb08 f10c 	mul.w	r1, r8, ip
   1df94:	4299      	cmp	r1, r3
   1df96:	d907      	bls.n	1dfa8 <__udivmoddi4+0x124>
   1df98:	18eb      	adds	r3, r5, r3
   1df9a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   1df9e:	d202      	bcs.n	1dfa6 <__udivmoddi4+0x122>
   1dfa0:	4299      	cmp	r1, r3
   1dfa2:	f200 80cd 	bhi.w	1e140 <__udivmoddi4+0x2bc>
   1dfa6:	4684      	mov	ip, r0
   1dfa8:	1a59      	subs	r1, r3, r1
   1dfaa:	b2a3      	uxth	r3, r4
   1dfac:	fbb1 f0fe 	udiv	r0, r1, lr
   1dfb0:	fb0e 1410 	mls	r4, lr, r0, r1
   1dfb4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   1dfb8:	fb08 f800 	mul.w	r8, r8, r0
   1dfbc:	45a0      	cmp	r8, r4
   1dfbe:	d907      	bls.n	1dfd0 <__udivmoddi4+0x14c>
   1dfc0:	192c      	adds	r4, r5, r4
   1dfc2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1dfc6:	d202      	bcs.n	1dfce <__udivmoddi4+0x14a>
   1dfc8:	45a0      	cmp	r8, r4
   1dfca:	f200 80b6 	bhi.w	1e13a <__udivmoddi4+0x2b6>
   1dfce:	4618      	mov	r0, r3
   1dfd0:	eba4 0408 	sub.w	r4, r4, r8
   1dfd4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1dfd8:	e79f      	b.n	1df1a <__udivmoddi4+0x96>
   1dfda:	f1c7 0c20 	rsb	ip, r7, #32
   1dfde:	40bb      	lsls	r3, r7
   1dfe0:	fa22 fe0c 	lsr.w	lr, r2, ip
   1dfe4:	ea4e 0e03 	orr.w	lr, lr, r3
   1dfe8:	fa01 f407 	lsl.w	r4, r1, r7
   1dfec:	fa20 f50c 	lsr.w	r5, r0, ip
   1dff0:	fa21 f30c 	lsr.w	r3, r1, ip
   1dff4:	ea4f 481e 	mov.w	r8, lr, lsr #16
   1dff8:	4325      	orrs	r5, r4
   1dffa:	fbb3 f9f8 	udiv	r9, r3, r8
   1dffe:	0c2c      	lsrs	r4, r5, #16
   1e000:	fb08 3319 	mls	r3, r8, r9, r3
   1e004:	fa1f fa8e 	uxth.w	sl, lr
   1e008:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   1e00c:	fb09 f40a 	mul.w	r4, r9, sl
   1e010:	429c      	cmp	r4, r3
   1e012:	fa02 f207 	lsl.w	r2, r2, r7
   1e016:	fa00 f107 	lsl.w	r1, r0, r7
   1e01a:	d90b      	bls.n	1e034 <__udivmoddi4+0x1b0>
   1e01c:	eb1e 0303 	adds.w	r3, lr, r3
   1e020:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   1e024:	f080 8087 	bcs.w	1e136 <__udivmoddi4+0x2b2>
   1e028:	429c      	cmp	r4, r3
   1e02a:	f240 8084 	bls.w	1e136 <__udivmoddi4+0x2b2>
   1e02e:	f1a9 0902 	sub.w	r9, r9, #2
   1e032:	4473      	add	r3, lr
   1e034:	1b1b      	subs	r3, r3, r4
   1e036:	b2ad      	uxth	r5, r5
   1e038:	fbb3 f0f8 	udiv	r0, r3, r8
   1e03c:	fb08 3310 	mls	r3, r8, r0, r3
   1e040:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   1e044:	fb00 fa0a 	mul.w	sl, r0, sl
   1e048:	45a2      	cmp	sl, r4
   1e04a:	d908      	bls.n	1e05e <__udivmoddi4+0x1da>
   1e04c:	eb1e 0404 	adds.w	r4, lr, r4
   1e050:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1e054:	d26b      	bcs.n	1e12e <__udivmoddi4+0x2aa>
   1e056:	45a2      	cmp	sl, r4
   1e058:	d969      	bls.n	1e12e <__udivmoddi4+0x2aa>
   1e05a:	3802      	subs	r0, #2
   1e05c:	4474      	add	r4, lr
   1e05e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1e062:	fba0 8902 	umull	r8, r9, r0, r2
   1e066:	eba4 040a 	sub.w	r4, r4, sl
   1e06a:	454c      	cmp	r4, r9
   1e06c:	46c2      	mov	sl, r8
   1e06e:	464b      	mov	r3, r9
   1e070:	d354      	bcc.n	1e11c <__udivmoddi4+0x298>
   1e072:	d051      	beq.n	1e118 <__udivmoddi4+0x294>
   1e074:	2e00      	cmp	r6, #0
   1e076:	d069      	beq.n	1e14c <__udivmoddi4+0x2c8>
   1e078:	ebb1 050a 	subs.w	r5, r1, sl
   1e07c:	eb64 0403 	sbc.w	r4, r4, r3
   1e080:	fa04 fc0c 	lsl.w	ip, r4, ip
   1e084:	40fd      	lsrs	r5, r7
   1e086:	40fc      	lsrs	r4, r7
   1e088:	ea4c 0505 	orr.w	r5, ip, r5
   1e08c:	e9c6 5400 	strd	r5, r4, [r6]
   1e090:	2700      	movs	r7, #0
   1e092:	e747      	b.n	1df24 <__udivmoddi4+0xa0>
   1e094:	f1c2 0320 	rsb	r3, r2, #32
   1e098:	fa20 f703 	lsr.w	r7, r0, r3
   1e09c:	4095      	lsls	r5, r2
   1e09e:	fa01 f002 	lsl.w	r0, r1, r2
   1e0a2:	fa21 f303 	lsr.w	r3, r1, r3
   1e0a6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1e0aa:	4338      	orrs	r0, r7
   1e0ac:	0c01      	lsrs	r1, r0, #16
   1e0ae:	fbb3 f7fe 	udiv	r7, r3, lr
   1e0b2:	fa1f f885 	uxth.w	r8, r5
   1e0b6:	fb0e 3317 	mls	r3, lr, r7, r3
   1e0ba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1e0be:	fb07 f308 	mul.w	r3, r7, r8
   1e0c2:	428b      	cmp	r3, r1
   1e0c4:	fa04 f402 	lsl.w	r4, r4, r2
   1e0c8:	d907      	bls.n	1e0da <__udivmoddi4+0x256>
   1e0ca:	1869      	adds	r1, r5, r1
   1e0cc:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   1e0d0:	d22f      	bcs.n	1e132 <__udivmoddi4+0x2ae>
   1e0d2:	428b      	cmp	r3, r1
   1e0d4:	d92d      	bls.n	1e132 <__udivmoddi4+0x2ae>
   1e0d6:	3f02      	subs	r7, #2
   1e0d8:	4429      	add	r1, r5
   1e0da:	1acb      	subs	r3, r1, r3
   1e0dc:	b281      	uxth	r1, r0
   1e0de:	fbb3 f0fe 	udiv	r0, r3, lr
   1e0e2:	fb0e 3310 	mls	r3, lr, r0, r3
   1e0e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1e0ea:	fb00 f308 	mul.w	r3, r0, r8
   1e0ee:	428b      	cmp	r3, r1
   1e0f0:	d907      	bls.n	1e102 <__udivmoddi4+0x27e>
   1e0f2:	1869      	adds	r1, r5, r1
   1e0f4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   1e0f8:	d217      	bcs.n	1e12a <__udivmoddi4+0x2a6>
   1e0fa:	428b      	cmp	r3, r1
   1e0fc:	d915      	bls.n	1e12a <__udivmoddi4+0x2a6>
   1e0fe:	3802      	subs	r0, #2
   1e100:	4429      	add	r1, r5
   1e102:	1ac9      	subs	r1, r1, r3
   1e104:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   1e108:	e73b      	b.n	1df82 <__udivmoddi4+0xfe>
   1e10a:	4637      	mov	r7, r6
   1e10c:	4630      	mov	r0, r6
   1e10e:	e709      	b.n	1df24 <__udivmoddi4+0xa0>
   1e110:	4607      	mov	r7, r0
   1e112:	e6e7      	b.n	1dee4 <__udivmoddi4+0x60>
   1e114:	4618      	mov	r0, r3
   1e116:	e6fb      	b.n	1df10 <__udivmoddi4+0x8c>
   1e118:	4541      	cmp	r1, r8
   1e11a:	d2ab      	bcs.n	1e074 <__udivmoddi4+0x1f0>
   1e11c:	ebb8 0a02 	subs.w	sl, r8, r2
   1e120:	eb69 020e 	sbc.w	r2, r9, lr
   1e124:	3801      	subs	r0, #1
   1e126:	4613      	mov	r3, r2
   1e128:	e7a4      	b.n	1e074 <__udivmoddi4+0x1f0>
   1e12a:	4660      	mov	r0, ip
   1e12c:	e7e9      	b.n	1e102 <__udivmoddi4+0x27e>
   1e12e:	4618      	mov	r0, r3
   1e130:	e795      	b.n	1e05e <__udivmoddi4+0x1da>
   1e132:	4667      	mov	r7, ip
   1e134:	e7d1      	b.n	1e0da <__udivmoddi4+0x256>
   1e136:	4681      	mov	r9, r0
   1e138:	e77c      	b.n	1e034 <__udivmoddi4+0x1b0>
   1e13a:	3802      	subs	r0, #2
   1e13c:	442c      	add	r4, r5
   1e13e:	e747      	b.n	1dfd0 <__udivmoddi4+0x14c>
   1e140:	f1ac 0c02 	sub.w	ip, ip, #2
   1e144:	442b      	add	r3, r5
   1e146:	e72f      	b.n	1dfa8 <__udivmoddi4+0x124>
   1e148:	4638      	mov	r0, r7
   1e14a:	e708      	b.n	1df5e <__udivmoddi4+0xda>
   1e14c:	4637      	mov	r7, r6
   1e14e:	e6e9      	b.n	1df24 <__udivmoddi4+0xa0>

0001e150 <__aeabi_idiv0>:
   1e150:	4770      	bx	lr
   1e152:	bf00      	nop

0001e154 <__aeabi_memclr>:
   1e154:	2200      	movs	r2, #0
   1e156:	f000 b803 	b.w	1e160 <__aeabi_memset>
   1e15a:	bf00      	nop

0001e15c <__aeabi_memcpy>:
   1e15c:	f7fd bf68 	b.w	1c030 <memcpy>

0001e160 <__aeabi_memset>:
   1e160:	b470      	push	{r4, r5, r6}
   1e162:	0784      	lsls	r4, r0, #30
   1e164:	d046      	beq.n	1e1f4 <__aeabi_memset+0x94>
   1e166:	1e4c      	subs	r4, r1, #1
   1e168:	2900      	cmp	r1, #0
   1e16a:	d041      	beq.n	1e1f0 <__aeabi_memset+0x90>
   1e16c:	b2d5      	uxtb	r5, r2
   1e16e:	4603      	mov	r3, r0
   1e170:	e002      	b.n	1e178 <__aeabi_memset+0x18>
   1e172:	1e61      	subs	r1, r4, #1
   1e174:	b3e4      	cbz	r4, 1e1f0 <__aeabi_memset+0x90>
   1e176:	460c      	mov	r4, r1
   1e178:	f803 5b01 	strb.w	r5, [r3], #1
   1e17c:	0799      	lsls	r1, r3, #30
   1e17e:	d1f8      	bne.n	1e172 <__aeabi_memset+0x12>
   1e180:	2c03      	cmp	r4, #3
   1e182:	d92e      	bls.n	1e1e2 <__aeabi_memset+0x82>
   1e184:	b2d5      	uxtb	r5, r2
   1e186:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1e18a:	2c0f      	cmp	r4, #15
   1e18c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1e190:	d919      	bls.n	1e1c6 <__aeabi_memset+0x66>
   1e192:	4626      	mov	r6, r4
   1e194:	f103 0110 	add.w	r1, r3, #16
   1e198:	3e10      	subs	r6, #16
   1e19a:	2e0f      	cmp	r6, #15
   1e19c:	f841 5c10 	str.w	r5, [r1, #-16]
   1e1a0:	f841 5c0c 	str.w	r5, [r1, #-12]
   1e1a4:	f841 5c08 	str.w	r5, [r1, #-8]
   1e1a8:	f841 5c04 	str.w	r5, [r1, #-4]
   1e1ac:	f101 0110 	add.w	r1, r1, #16
   1e1b0:	d8f2      	bhi.n	1e198 <__aeabi_memset+0x38>
   1e1b2:	f1a4 0110 	sub.w	r1, r4, #16
   1e1b6:	f021 010f 	bic.w	r1, r1, #15
   1e1ba:	f004 040f 	and.w	r4, r4, #15
   1e1be:	3110      	adds	r1, #16
   1e1c0:	2c03      	cmp	r4, #3
   1e1c2:	440b      	add	r3, r1
   1e1c4:	d90d      	bls.n	1e1e2 <__aeabi_memset+0x82>
   1e1c6:	461e      	mov	r6, r3
   1e1c8:	4621      	mov	r1, r4
   1e1ca:	3904      	subs	r1, #4
   1e1cc:	2903      	cmp	r1, #3
   1e1ce:	f846 5b04 	str.w	r5, [r6], #4
   1e1d2:	d8fa      	bhi.n	1e1ca <__aeabi_memset+0x6a>
   1e1d4:	1f21      	subs	r1, r4, #4
   1e1d6:	f021 0103 	bic.w	r1, r1, #3
   1e1da:	3104      	adds	r1, #4
   1e1dc:	440b      	add	r3, r1
   1e1de:	f004 0403 	and.w	r4, r4, #3
   1e1e2:	b12c      	cbz	r4, 1e1f0 <__aeabi_memset+0x90>
   1e1e4:	b2d2      	uxtb	r2, r2
   1e1e6:	441c      	add	r4, r3
   1e1e8:	f803 2b01 	strb.w	r2, [r3], #1
   1e1ec:	42a3      	cmp	r3, r4
   1e1ee:	d1fb      	bne.n	1e1e8 <__aeabi_memset+0x88>
   1e1f0:	bc70      	pop	{r4, r5, r6}
   1e1f2:	4770      	bx	lr
   1e1f4:	460c      	mov	r4, r1
   1e1f6:	4603      	mov	r3, r0
   1e1f8:	e7c2      	b.n	1e180 <__aeabi_memset+0x20>
   1e1fa:	5344      	.short	0x5344
   1e1fc:	61662050 	.word	0x61662050
   1e200:	43546c69 	.word	0x43546c69
   1e204:	61662048 	.word	0x61662048
   1e208:	45476c69 	.word	0x45476c69
   1e20c:	61662054 	.word	0x61662054
   1e210:	55526c69 	.word	0x55526c69
   1e214:	6166204e 	.word	0x6166204e
   1e218:	6c69      	.short	0x6c69
   1e21a:	7572      	.short	0x7572
   1e21c:	612f7473 	.word	0x612f7473
   1e220:	732f7070 	.word	0x732f7070
   1e224:	6c2f6372 	.word	0x6c2f6372
   1e228:	722e6269 	.word	0x722e6269
   1e22c:	00000073 	.word	0x00000073
   1e230:	0001e21a 	.word	0x0001e21a
   1e234:	00000013 	.word	0x00000013
   1e238:	0000005b 	.word	0x0000005b
   1e23c:	00000005 	.word	0x00000005
   1e240:	0001e21a 	.word	0x0001e21a
   1e244:	00000013 	.word	0x00000013
   1e248:	00000064 	.word	0x00000064
   1e24c:	00000005 	.word	0x00000005
   1e250:	50494843 	.word	0x50494843
   1e254:	61662038 	.word	0x61662038
   1e258:	00006c69 	.word	0x00006c69
   1e25c:	0001e21a 	.word	0x0001e21a
   1e260:	00000013 	.word	0x00000013
   1e264:	00000076 	.word	0x00000076
   1e268:	00000005 	.word	0x00000005
   1e26c:	0001e21a 	.word	0x0001e21a
   1e270:	00000013 	.word	0x00000013
   1e274:	0000007c 	.word	0x0000007c
   1e278:	0000000d 	.word	0x0000000d
   1e27c:	0001e21a 	.word	0x0001e21a
   1e280:	00000013 	.word	0x00000013
   1e284:	0000007b 	.word	0x0000007b
   1e288:	00000009 	.word	0x00000009
   1e28c:	696e6170 	.word	0x696e6170
   1e290:	2063      	.short	0x2063
   1e292:	6f6e      	.short	0x6f6e
   1e294:	636f6c20 	.word	0x636f6c20
   1e298:	0a          	.byte	0x0a
   1e299:	61          	.byte	0x61
   1e29a:	2074      	.short	0x2074
   1e29c:	6e696c20 	.word	0x6e696c20
   1e2a0:	2065      	.short	0x2065
   1e2a2:	000a      	.short	0x000a
   1e2a4:	0001e21a 	.word	0x0001e21a
   1e2a8:	00000013 	.word	0x00000013
   1e2ac:	00000094 	.word	0x00000094
   1e2b0:	00000014 	.word	0x00000014
   1e2b4:	00008827 	.word	0x00008827
   1e2b8:	00000004 	.word	0x00000004
   1e2bc:	00000004 	.word	0x00000004
   1e2c0:	00008a91 	.word	0x00008a91
   1e2c4:	00000000 	.word	0x00000000
   1e2c8:	0001e2c4 	.word	0x0001e2c4
   1e2cc:	0001e2c8 	.word	0x0001e2c8
   1e2d0:	65737361 	.word	0x65737361
   1e2d4:	6f697472 	.word	0x6f697472
   1e2d8:	6166206e 	.word	0x6166206e
   1e2dc:	64656c69 	.word	0x64656c69
   1e2e0:	2860203a 	.word	0x2860203a
   1e2e4:	7466656c 	.word	0x7466656c
   1e2e8:	203d3d20 	.word	0x203d3d20
   1e2ec:	68676972 	.word	0x68676972
   1e2f0:	0a602974 	.word	0x0a602974
   1e2f4:	656c2020 	.word	0x656c2020
   1e2f8:	203a7466 	.word	0x203a7466
   1e2fc:	60          	.byte	0x60
   1e2fd:	60          	.byte	0x60
   1e2fe:	0a2c      	.short	0x0a2c
   1e300:	67697220 	.word	0x67697220
   1e304:	203a7468 	.word	0x203a7468
   1e308:	60          	.byte	0x60
   1e309:	60          	.byte	0x60
   1e30a:	203a      	.short	0x203a
   1e30c:	0001e2d0 	.word	0x0001e2d0
   1e310:	0000002d 	.word	0x0000002d
   1e314:	0001e2fd 	.word	0x0001e2fd
   1e318:	0000000c 	.word	0x0000000c
   1e31c:	0001e309 	.word	0x0001e309
   1e320:	00000003 	.word	0x00000003
   1e324:	0001e30c 	.word	0x0001e30c
   1e328:	6e206f6e 	.word	0x6e206f6e
   1e32c:	006c6c75 	.word	0x006c6c75
   1e330:	0001e328 	.word	0x0001e328
   1e334:	00000007 	.word	0x00000007
   1e338:	0001e330 	.word	0x0001e330
   1e33c:	0001e33c 	.word	0x0001e33c
   1e340:	74737572 	.word	0x74737572
   1e344:	6e796d2f 	.word	0x6e796d2f
   1e348:	2f747765 	.word	0x2f747765
   1e34c:	2f637273 	.word	0x2f637273
   1e350:	2e62696c 	.word	0x2e62696c
   1e354:	00007372 	.word	0x00007372
   1e358:	0001e340 	.word	0x0001e340
   1e35c:	00000016 	.word	0x00000016
   1e360:	000000db 	.word	0x000000db
   1e364:	00000011 	.word	0x00000011
   1e368:	00008d4d 	.word	0x00008d4d
   1e36c:	00000004 	.word	0x00000004
   1e370:	00000004 	.word	0x00000004
   1e374:	00008a91 	.word	0x00008a91
   1e378:	65737361 	.word	0x65737361
   1e37c:	6f697472 	.word	0x6f697472
   1e380:	6166206e 	.word	0x6166206e
   1e384:	64656c69 	.word	0x64656c69
   1e388:	2860203a 	.word	0x2860203a
   1e38c:	7466656c 	.word	0x7466656c
   1e390:	203d3d20 	.word	0x203d3d20
   1e394:	68676972 	.word	0x68676972
   1e398:	0a602974 	.word	0x0a602974
   1e39c:	656c2020 	.word	0x656c2020
   1e3a0:	203a7466 	.word	0x203a7466
   1e3a4:	60          	.byte	0x60
   1e3a5:	60          	.byte	0x60
   1e3a6:	0a2c      	.short	0x0a2c
   1e3a8:	67697220 	.word	0x67697220
   1e3ac:	203a7468 	.word	0x203a7468
   1e3b0:	60          	.byte	0x60
   1e3b1:	60          	.byte	0x60
   1e3b2:	203a      	.short	0x203a
   1e3b4:	0001e378 	.word	0x0001e378
   1e3b8:	0000002d 	.word	0x0000002d
   1e3bc:	0001e3a5 	.word	0x0001e3a5
   1e3c0:	0000000c 	.word	0x0000000c
   1e3c4:	0001e3b1 	.word	0x0001e3b1
   1e3c8:	00000003 	.word	0x00000003
   1e3cc:	0001e3b4 	.word	0x0001e3b4
   1e3d0:	74736564 	.word	0x74736564
   1e3d4:	74616e69 	.word	0x74616e69
   1e3d8:	206e6f69 	.word	0x206e6f69
   1e3dc:	20646e61 	.word	0x20646e61
   1e3e0:	72756f73 	.word	0x72756f73
   1e3e4:	73206563 	.word	0x73206563
   1e3e8:	6563696c 	.word	0x6563696c
   1e3ec:	61682073 	.word	0x61682073
   1e3f0:	64206576 	.word	0x64206576
   1e3f4:	65666669 	.word	0x65666669
   1e3f8:	746e6572 	.word	0x746e6572
   1e3fc:	6e656c20 	.word	0x6e656c20
   1e400:	73687467 	.word	0x73687467
   1e404:	0001e3d0 	.word	0x0001e3d0
   1e408:	00000034 	.word	0x00000034
   1e40c:	0001e404 	.word	0x0001e404
   1e410:	0001e410 	.word	0x0001e410
   1e414:	7375722f 	.word	0x7375722f
   1e418:	352f6374 	.word	0x352f6374
   1e41c:	66613765 	.word	0x66613765
   1e420:	39363634 	.word	0x39363634
   1e424:	65303866 	.word	0x65303866
   1e428:	38366635 	.word	0x38366635
   1e42c:	31343132 	.word	0x31343132
   1e430:	30353066 	.word	0x30353066
   1e434:	61333931 	.word	0x61333931
   1e438:	39373662 	.word	0x39373662
   1e43c:	62646661 	.word	0x62646661
   1e440:	2f316234 	.word	0x2f316234
   1e444:	2f637273 	.word	0x2f637273
   1e448:	6362696c 	.word	0x6362696c
   1e44c:	2f65726f 	.word	0x2f65726f
   1e450:	7263616d 	.word	0x7263616d
   1e454:	6d2f736f 	.word	0x6d2f736f
   1e458:	722e646f 	.word	0x722e646f
   1e45c:	00000073 	.word	0x00000073
   1e460:	0001e414 	.word	0x0001e414
   1e464:	00000049 	.word	0x00000049
   1e468:	00000012 	.word	0x00000012
   1e46c:	0000000d 	.word	0x0000000d
   1e470:	656d6f53 	.word	0x656d6f53
   1e474:	656e6f4e 	.word	0x656e6f4e
   1e478:	00008d45 	.word	0x00008d45
   1e47c:	00000004 	.word	0x00000004
   1e480:	00000004 	.word	0x00000004
   1e484:	00009323 	.word	0x00009323
   1e488:	00000060 	.word	0x00000060
   1e48c:	0001e488 	.word	0x0001e488
   1e490:	20697073 	.word	0x20697073
   1e494:	73756c66 	.word	0x73756c66
   1e498:	61662068 	.word	0x61662068
   1e49c:	6c69      	.short	0x6c69
   1e49e:	552f      	.short	0x552f
   1e4a0:	73726573 	.word	0x73726573
   1e4a4:	70754c2f 	.word	0x70754c2f
   1e4a8:	502f7970 	.word	0x502f7970
   1e4ac:	54656e69 	.word	0x54656e69
   1e4b0:	2f656d69 	.word	0x2f656d69
   1e4b4:	656e6970 	.word	0x656e6970
   1e4b8:	656d6974 	.word	0x656d6974
   1e4bc:	7375722d 	.word	0x7375722d
   1e4c0:	796d2d74 	.word	0x796d2d74
   1e4c4:	7477656e 	.word	0x7477656e
   1e4c8:	7375722f 	.word	0x7375722f
   1e4cc:	74732f74 	.word	0x74732f74
   1e4d0:	35333737 	.word	0x35333737
   1e4d4:	64636c2d 	.word	0x64636c2d
   1e4d8:	7461622d 	.word	0x7461622d
   1e4dc:	722d6863 	.word	0x722d6863
   1e4e0:	72732f73 	.word	0x72732f73
   1e4e4:	696c2f63 	.word	0x696c2f63
   1e4e8:	73722e62 	.word	0x73722e62
   1e4ec:	0001e49e 	.word	0x0001e49e
   1e4f0:	0000004e 	.word	0x0000004e
   1e4f4:	000000fe 	.word	0x000000fe
   1e4f8:	00000009 	.word	0x00000009
   1e4fc:	20697073 	.word	0x20697073
   1e500:	61746164 	.word	0x61746164
   1e504:	69616620 	.word	0x69616620
   1e508:	0000006c 	.word	0x0000006c
   1e50c:	0001e49e 	.word	0x0001e49e
   1e510:	0000004e 	.word	0x0000004e
   1e514:	000000b0 	.word	0x000000b0
   1e518:	00000009 	.word	0x00000009
   1e51c:	0001e49e 	.word	0x0001e49e
   1e520:	0000004e 	.word	0x0000004e
   1e524:	000000f3 	.word	0x000000f3
   1e528:	00000009 	.word	0x00000009
   1e52c:	0001e49e 	.word	0x0001e49e
   1e530:	0000004e 	.word	0x0000004e
   1e534:	00000098 	.word	0x00000098
   1e538:	0000000d 	.word	0x0000000d
   1e53c:	20697073 	.word	0x20697073
   1e540:	20646d63 	.word	0x20646d63
   1e544:	6c696166 	.word	0x6c696166
   1e548:	0001e49e 	.word	0x0001e49e
   1e54c:	0000004e 	.word	0x0000004e
   1e550:	00000097 	.word	0x00000097
   1e554:	00000009 	.word	0x00000009
   1e558:	0001e49e 	.word	0x0001e49e
   1e55c:	0000004e 	.word	0x0000004e
   1e560:	0000009d 	.word	0x0000009d
   1e564:	00000011 	.word	0x00000011
   1e568:	0001e49e 	.word	0x0001e49e
   1e56c:	0000004e 	.word	0x0000004e
   1e570:	0000009c 	.word	0x0000009c
   1e574:	0000000d 	.word	0x0000000d
   1e578:	0001e49e 	.word	0x0001e49e
   1e57c:	0000004e 	.word	0x0000004e
   1e580:	000000c5 	.word	0x000000c5
   1e584:	0000002d 	.word	0x0000002d
   1e588:	0001e49e 	.word	0x0001e49e
   1e58c:	0000004e 	.word	0x0000004e
   1e590:	000000c9 	.word	0x000000c9
   1e594:	0000002d 	.word	0x0000002d
   1e598:	0001e49e 	.word	0x0001e49e
   1e59c:	0000004e 	.word	0x0000004e
   1e5a0:	000000d8 	.word	0x000000d8
   1e5a4:	00000019 	.word	0x00000019
	...

0001e5b0 <str.0>:
   1e5b0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1e5c0:	20687469 7265766f 776f6c66 0001e49e     ith overflow....
   1e5d0:	0000004e 000000d9 00000019 0001e49e     N...............
   1e5e0:	0000004e 000000db 00000019 0001e49e     N...............
   1e5f0:	0000004e 000000dc 00000019 20697073     N...........spi 
   1e600:	74696e69 69616620 0000006c 0001e49e     init fail.......
   1e610:	0000004e 00000066 00000009 002d2c01     N...f........,-.
   1e620:	0001e61c 012d2c01 00002d2c 0001e624     .....,-.,-..$...
   1e630:	00000007 0001e630 008402a2 0001e638     ....0.......8...
   1e640:	000000c5 0001e640 0000000a 0001e648     ....@.......H...
   1e650:	00002a8a 0001e650 0000ee8a 0001e658     .*..P.......X...
   1e660:	0000000e 0001e660 00000000 0001e668     ....`.......h...
   1e670:	00000008 0001e670 00000005 0001e678     ....p.......x...
   1e680:	0001e49e 0000004e 00000088 00000009     ....N...........
   1e690:	74737552 756f7420 73206863 6f736e65     Rust touch senso
   1e6a0:	00000a72 00000000 0001e6a4 65737361     r...........asse
   1e6b0:	6f697472 6166206e 64656c69 2860203a     rtion failed: `(
   1e6c0:	7466656c 203d3d20 68676972 0a602974     left == right)`.
   1e6d0:	656c2020 203a7466 0a2c6060 67697220       left: ``,. rig
   1e6e0:	203a7468 203a6060 0001e6ac 0000002d     ht: ``: ....-...
   1e6f0:	0001e6d9 0000000c 0001e6e5 00000003     ................
   1e700:	0001e6e8 20515249 74696e69 69616620     ....IRQ init fai
   1e710:	0000006c 0001e704 0000000d 0001e714     l...............
   1e720:	0001e720 74737572 7070612f 6372732f      ...rust/app/src
   1e730:	756f742f 735f6863 6f736e65 73722e72     /touch_sensor.rs
   1e740:	0001e724 0000001c 0000003f 00000005     $.......?.......
   1e750:	20633269 72646461 0001e724 0000001c     i2c addr$.......
   1e760:	0000004b 00000011 63756f74 74616468     K.......touchdat
   1e770:	61662061 00006c69 0001e724 0000001c     a fail..$.......
   1e780:	00000056 00000009 0001e724 0000001c     V.......$.......
   1e790:	0000005a 00000031 64616572 756f7420     Z...1...read tou
   1e7a0:	61646863 66206174 006c6961 0001e724     chdata fail.$...
   1e7b0:	0000001c 00000089 00000005 0001e724     ............$...
   1e7c0:	0000001c 00000095 00000037 00000000     ........7.......

0001e7d0 <str.0>:
   1e7d0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1e7e0:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1e7f0:	00000077 0001e724 0000001c 00000095     w...$...........
   1e800:	00000024 00000000 00000000 00000000     $...............

0001e810 <str.1>:
   1e810:	65747461 2074706d 61206f74 77206464     attempt to add w
   1e820:	20687469 7265766f 776f6c66 0001e724     ith overflow$...
   1e830:	0000001c 00000095 00000020 0001e724     ........ ...$...
   1e840:	0000001c 00000099 00000009 0001e724     ............$...
   1e850:	0000001c 0000009a 00000037 0001e724     ........7...$...
   1e860:	0000001c 0000009a 00000023 0001e724     ........#...$...
   1e870:	0000001c 0000009a 0000001f 0001e724     ............$...
   1e880:	0000001c 0000009b 00000037 0001e724     ........7...$...
   1e890:	0000001c 0000009b 00000023 0001e724     ........#...$...
   1e8a0:	0000001c 0000009b 0000001f 0001e724     ............$...
   1e8b0:	0000001c 0000009c 00000009 0001e724     ............$...
   1e8c0:	0000001c 0000009e 00000037 0001e724     ........7...$...
   1e8d0:	0000001c 0000009e 00000023 0001e724     ........#...$...
   1e8e0:	0000001c 0000009e 0000001f 0001e724     ............$...
   1e8f0:	0000001c 0000009f 00000037 0001e724     ........7...$...
   1e900:	0000001c 0000009f 00000023 0001e724     ........#...$...
   1e910:	0000001c 0000009f 0000001f 0001e724     ............$...
   1e920:	0000001c 000000a0 00000009 0001e724     ............$...
   1e930:	0000001c 000000a4 00000030 0001e724     ........0...$...
   1e940:	0000001c 000000a4 0000001a 0001e724     ............$...
   1e950:	0000001c 000000a4 00000016 0001e724     ............$...
   1e960:	0000001c 000000a3 00000009 0001e724     ............$...
   1e970:	0000001c 000000a6 00000030 0001e724     ........0...$...
   1e980:	0000001c 000000a6 0000001a 0001e724     ............$...
   1e990:	0000001c 000000a6 00000016 0001e724     ............$...
   1e9a0:	0000001c 000000a5 00000009 0001e724     ............$...
   1e9b0:	0000001c 000000aa 0000002d 0001e724     ........-...$...
   1e9c0:	0000001c 000000aa 0000001a 0001e724     ............$...
   1e9d0:	0000001c 000000aa 00000016 0001e724     ............$...
   1e9e0:	0000001c 000000a9 00000009 0001e724     ............$...
   1e9f0:	0000001c 000000ac 0000002d 0001e724     ........-...$...
   1ea00:	0000001c 000000ac 0000001a 0001e724     ............$...
   1ea10:	0000001c 000000ac 00000016 0001e724     ............$...
   1ea20:	0000001c 000000ab 00000009 0001e724     ............$...
   1ea30:	0000001c 000000af 0000000d 0001e724     ............$...
   1ea40:	0000001c 000000af 0000002c 20633269     ........,...i2c 
   1ea50:	00667562 0001e724 0000001c 000000f1     buf.$...........
   1ea60:	00000005 0001e724 0000001c 000000f2     ....$...........
   1ea70:	0000000d 0001e724 0000001c 000000f2     ....$...........
   1ea80:	00000005 20633269 6c696166 7375520a     ....i2c fail.Rus
   1ea90:	48432074 0a385049 70696863 00000038     t CHIP8.chip8...
   1eaa0:	00000000 0001ea98 00000006 0001eaa0     ................
   1eab0:	50494843 74732038 65747261 1a120a64     CHIP8 started...
   1eac0:	30302e32 202e4320 62656745 20677265     2.00 C. Egeberg 
   1ead0:	382f3831 3139272d 13810380 55f1c8a8     18/8-'91.......U
   1eae0:	cca80560 738755f0 72276386 9427e000     `....U.s.c'r..'.
   1eaf0:	e287406e e187276e 0c691a68 006b386a     n@..n'..h.i.j8k.
   1eb00:	1a6d026c eda85027 d4dcb4da 003ed023     l.m.'P......#.>.
   1eb10:	cca87c12 008565f0 5284ffc4 ffc4f624     .|...e.....R$...
   1eb20:	1e265284 a1e00160 f736d627 608e4e12     .R&.`...'.6..N.`
   1eb30:	646e7a28 d6277a28 07f02a12 10130040     (znd(z'..*..@...
   1eb40:	06808080 0681a081 00401580 01409a12     ..........@...@.
   1eb50:	ff409a12 c8129a12 06809080 0681b081     ..@.............
   1eb60:	00401580 0140b212 ff40b212 c812b212     ..@...@...@.....
   1eb70:	b4daeda8 006b386a f36eb4da 046ee287     ....j8k...n...n.
   1eb80:	326ee187 80807a28 c0810680 15800681     ..n2(z..........
   1eb90:	e0120040 e0120140 e012ff40 90805412     @...@...@....T..
   1eba0:	d0810680 15800681 f8120040 f8120140     ........@...@...
   1ebb0:	f812ff40 eda85412 026cd4dc d4dc1a6d     @....T....l.m...
   1ebc0:	e287cf6e e187206e 7a28196e 3f605412     n...n ..n.(z.T`?
   1ebd0:	5027a828 b4daeda8 406ed4dc 7080e387     (.'P......n@...p
   1ebe0:	0030e280 608e3212 8a287a28 1166e000     ..0..2.`(z(...f.
   1ebf0:	caa80a67 1166e627 c8a81067 0064e627     g...'.f.g...'.d.
   1ec00:	00660865 19ab0f67 22ab69d4 036069d5     e.f.g....i.".i`.
   1ec10:	003ea828 19abc613 22ab69d4 027469d5     (.>......i.".it.
   1ec20:	30340275 19ab4813 22ab69d4 036069d5     u.40.H...i.".i`.
   1ec30:	003ea828 19abc613 22ab69d4 027669d5     (.>......i.".iv.
   1ec40:	68131636 69d419ab 69d522ab a8280360     6..h...i.".i`.(.
   1ec50:	c613003e 69d419ab 69d522ab fe75fe74     >......i.".it.u.
   1ec60:	86130034 69d419ab 69d522ab a8280360     4......i.".i`.(.
   1ec70:	c613003e 69d419ab 69d522ab 0036fe76     >......i.".iv.6.
   1ec80:	4813a613 69d522ab 69d52bab 70831a12     ...H.".i.+.i...p
   1ec90:	e283036e 90858084 a1ee066e 036e3214     n.......n....2n.
   1eca0:	4a14a1ee a1ee086e 076e6214 7a14a1ee     ...Jn....bn....z
   1ecb0:	02750343 fe750043 02740243 fe740143     C.u.C.u.C.t.C.t.
   1ecc0:	50814080 0082ba27 e280086e 92140030     .@.P'...n...0...
   1ecd0:	2080076e 0542e282 06429a14 0742b214     n.. ..B...B...B.
   1ece0:	5027ec14 e287fc6e 40883187 50175089     ..'Pn....1.@.P.P
   1ecf0:	50814080 ba270271 086e0082 0030e280     .@.Pq.'...n...0.
   1ed00:	0363f213 0e140275 50814080 ba27fe71     ..c.u....@.Pq.'.
   1ed10:	086e0082 0030e280 0063f213 0e14fe75     ..n...0...c.u...
   1ed20:	50814080 ba270270 086e0082 0030e280     .@.Pp.'...n...0.
   1ed30:	0263f213 0e140274 50814080 ba27fe70     ..c.t....@.Pp.'.
   1ed40:	086e0082 0030e280 0163f213 0e14fe74     ..n...0...c.t...
   1ed50:	94d85027 ee00f08e e280f06e 55f03180     'P......n....1.U
   1ed60:	54d4f1a8 05610176 004007f0 241418f1     ...Tv.a...@....$
   1ed70:	e280f06e 55f03180 54d4f5a8 a0800476     n....1.U...Tv...
   1ed80:	ba27b081 e280f06e d2140030 e3870c6e     ..'.n...0...n...
   1ed90:	d081c080 f06eba27 0030e280 306ee414     ....'.n...0...n0
   1eda0:	ff60e387 15f018f0 01432414 02433a64     ..`......$C.d:C.
   1edb0:	24140064 70837082 e2820c6e b081a080     d..$.p.pn.......
   1edc0:	eda8ba27 e280f06e 24150030 0c42b4da     '...n...0..$..B.
   1edd0:	0042027b 0842fe7b 0442027a b4dafe7a     {.B.{.B.z.B.z...
   1ede0:	806eee00 003107f1 0034d415 0081d415     ..n...1...4.....
   1edf0:	003f0e83 90835615 004fb583 00338c15     ..?..V....O...3.
   1ee00:	e3877415 a5838083 bc15004f a4150033     .t......O...3...
   1ee10:	d415e387 a5838083 bc15004f a4150033     ........O...3...
   1ee20:	9083e387 004fb583 00338c15 e3877415     ......O...3..t..
   1ee30:	4063d415 00413281 b4dad415 b4da027b     ..c@.2A.....{...
   1ee40:	e287f36e 21870c62 1063ee00 00413281     n...b..!..c..2A.
   1ee50:	b4dad415 b4dafe7b e287f36e 21870062     ....{...n...b..!
   1ee60:	2063ee00 00413281 b4dad415 b4da027a     ..c .2A.....z...
   1ee70:	e287f36e 21870862 8063ee00 00413281     n...b..!..c..2A.
   1ee80:	b4dad415 b4dafe7a e287f36e 21870462     ....z...n...b..!
   1ee90:	f0c1ee00 00301280 0c6ee415 e382e387     ......0...n.....
   1eea0:	b4da0e15 004f0e80 0462f215 1416fe7a     ......O...b.z...
   1eeb0:	004f0e80 0c62fe15 1416027b 004f0e80     ..O...b.{.....O.
   1eec0:	08620a16 1416027a 004f0e80 0062dc15     ..b.z.....O...b.
   1eed0:	b4dafe7b e287f36e ee002187 70837082     {...n....!...p.p
   1eee0:	e282306e d081c080 eda8ba27 e280f06e     n0......'...n...
   1eef0:	4c160030 3042d4dc 0042027d 2042fe7d     0..L..B0}.B.}.B 
   1ef00:	1042027c d4dcfe7c 806eee00 003107f1     |.B.|.....n...1.
   1ef10:	00340417 00810417 004f0e83 90837e16     ..4.......O..~..
   1ef20:	004fd583 0033b616 e3879c16 c5838083     ..O...3.........
   1ef30:	ea16004f d0160033 0417e387 c5838083     O...3...........
   1ef40:	ea16004f d0160033 9083e387 004fd583     O...3.........O.
   1ef50:	0033b616 e3879c16 40630417 00413281     ..3.......c@.2A.
   1ef60:	d4dc0417 d4dc027d cf6ee387 3062e287     ....}.....n...b0
   1ef70:	ee002187 32811063 04170041 fe7dd4dc     .!..c..2A.....}.
   1ef80:	e387d4dc e287cf6e 21870062 2063ee00     ....n...b..!..c 
   1ef90:	00413281 d4dc0417 d4dc027c cf6ee387     .2A.....|.....n.
   1efa0:	2062e287 ee002187 32818063 04170041     ..b .!..c..2A...
   1efb0:	fe7cd4dc e387d4dc e287cf6e 21871062     ..|.....n...b..!
   1efc0:	f0c1ee00 00301280 e3871617 e387306e     ......0.....n0..
   1efd0:	3616e382 0e80d4dc 2417004f fe7c9062     ...6....O..$b.|.
   1efe0:	0e804617 3017004f 027d3062 0e804617     .F..O..0b0}..F..
   1eff0:	3c17004f 027ca062 0e804617 0c17004f     O..<b.|..F..O...
   1f000:	fe7d0062 4f6ed4dc 2187e287 7080ee00     b.}...nO...!...p
   1f010:	e280036e 80810e80 026e9481 0041e281     n.........n...A.
   1f020:	0e800170 cda80e80 94d81ef0 ee00f08e     p...............
   1f030:	19a9006e 1efe1efe 1efe1efe 34ab65f3     n............e.4
   1f040:	1efe1efe 1efe1efe 017e55f3 7417803e     .........U~.>..t
   1f050:	2382ee00 0f6e3383 30812080 e280be27     ...#.3n.. .0'...
   1f060:	f9a80e80 32d21ef0 40320272 23829a17     .......2r.2@...#
   1f070:	20430273 9a17ee00 02710270 06810680     s.C ....p.q.....
   1f080:	0e810e81 0e810e81 1ef134ab 1ef01ef1     .........4......
   1f090:	ee0065f0 65f0cca8 55f00680 a1e00160     .e.....e...U`...
   1f0a0:	ee00e017 016e65f1 00824384 10651083     .....en..C....e.
   1f0b0:	004f5583 004fe582 27650c18 004f5582     .UO...O...e'.UO.
   1f0c0:	20800c18 e4843081 29f4f017 067675d6     ... .0.....).uv.
   1f0d0:	00824384 e8651083 004f5583 004fe582     .C....e..UO...O.
   1f0e0:	03653418 004f5582 20803418 e4843081     .4e..UO..4. .0..
   1f0f0:	29f41818 067675d6 00824384 64651083     ...).uv..C....ed
   1f100:	004f5583 004fe582 20805418 e4843081     .UO...O..T. .0..
   1f110:	29f44018 067675d6 00824384 0a651083     .@.).uv..C....e.
   1f120:	004f5583 30816e18 6018e484 75d629f4     .UO..n.0...`.).u
   1f130:	29f10676 ee0075d6 65f1c8a8 003fe481     v..).u.....e..?.
   1f140:	c8a80170 ee0055f1 65f3c8a8 258e008e     p....U.....e...%
   1f150:	ee00004f a218003e 358e108e ee00004f     O...>......5O...
   1f160:	55f1caa8 e38eee00 ff630f62 a1e21061     ...U....b.c.a...
   1f170:	3481c418 b0180031 34801061 b0180030     ...41...a..40...
   1f180:	016eee00 0000ee00 00050000 00207050     ..n.........Pp .
   1f190:	00207050 00603060 00603060 00306030     Pp .`0`.`0`.0`0.
   1f1a0:	00306030 00507020 00507020 00707020     0`0. pP. pP. pp.
   1f1b0:	00002000 00000000 00000000 00000000     . ..............
   1f1c0:	00008000 c0000000 80000000 c0000080     ................
   1f1d0:	c0808080 0c008000 08080808 08080808     ................
   1f1e0:	08080808 0c0d0808 08080808 08080808     ................
   1f1f0:	08080808 0a0d0808 05050565 0505e505     ........e.......
   1f200:	050505e5 0a0ac505 05050565 0505e505     ........e.......
   1f210:	050505e5 0a0ac505 08080c05 0d0c050f     ................
   1f220:	08080805 0f0e050d 08080c05 0d0c050f     ................
   1f230:	08080805 0a0a050d 06650a05 0a0a9505     ..........e.....
   1f240:	c5050535 0505350a 05650a95 0a0a9505     5....5....e.....
   1f250:	c5060535 0a0a050a 08050f05 08080808     5...............
   1f260:	050f080c 08080808 08050f08 08080c08     ................
   1f270:	050f0808 0a0a050f 05b50575 c5050505     ........u.......
   1f280:	b505650a 0505e505 05b505e5 05650ac5     .e............e.
   1f290:	b5050505 0a0ad505 08080c05 050d0808     ................
   1f2a0:	080c050f 0f08050f 0d080805 0c050f05     ................
   1f2b0:	08080808 0f0a050d 05650f05 350ac505     ..........e....5
   1f2c0:	650a95e5 0505b005 0ac505b5 0a95e535     ...e........5...
   1f2d0:	c5050565 070f050f 08d50574 0f0e050f     e.......t.......
   1f2e0:	050f0805 0808080c 08050d08 0f08050f     ................
   1f2f0:	750f0805 0a07d405 05350a05 0505f505     ...u......5.....
   1f300:	d50505b5 0c0d0808 05750f08 0505b505     ..........u.....
   1f310:	950505f5 0a0a050a 08080805 080c050d     ................
   1f320:	350d0808 0a0ac505 0c950565 0d080808     ...5....e.......
   1f330:	08080c05 0a0a050f c5060575 0808050a     ........u.......
   1f340:	08080808 0f08050f 08080805 0f080808     ................
   1f350:	06650a05 0a0ad505 050d0c05 0505350a     ..e..........5..
   1f360:	05e50505 0505f505 e50505f5 05050505     ................
   1f370:	0c050a95 0a0a050d 050f0805 08080808     ................
   1f380:	0c050f08 0f08050d 050d0c05 08080808     ................
   1f390:	08050f08 0a0a050f b5050535 05050505     ........5.......
   1f3a0:	0a950505 0505350a 350a0a95 05050505     .....5.....5....
   1f3b0:	05b50505 080a9505 08080808 08080808     ................
   1f3c0:	0f080808 08080808 08080f08 08080808     ................
   1f3d0:	08080808 3c0f0808 42999942 0f10013c     .......<B..B<...
   1f3e0:	32328478 10007884 fefc78e0 007884fe     x.22.x...x....x.
   1f3f0:	4843e010 20385049 656e6f64 4948430a     ..CHIP8 done.CHI
   1f400:	73203850 6c756f68 6f6e2064 6e652074     P8 should not en
   1f410:	73757264 70612f74 72732f70 68632f63     drust/app/src/ch
   1f420:	2e387069 00007372 0001f411 00000015     ip8.rs..........
   1f430:	00000058 00000005 0a79656b 766f2078     X.......key.x ov
   1f440:	6c667265 0000776f 0001f411 00000015     erflow..........
   1f450:	0000009f 00000009 766f2079 6c667265     ........y overfl
   1f460:	0000776f 0001f411 00000015 000000a0     ow..............
   1f470:	00000009 0001f411 00000015 000000a1     ................
   1f480:	00000015 00000000 00000000 00000000     ................

0001f490 <str.0>:
   1f490:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1f4a0:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1f4b0:	00000077 0001f411 00000015 000000a1     w...............
   1f4c0:	00000011 00000000 00000000 00000000     ................

0001f4d0 <str.1>:
   1f4d0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1f4e0:	20687469 7265766f 776f6c66 0001f411     ith overflow....
   1f4f0:	00000015 000000a2 00000012 0001f411     ................
   1f500:	00000015 000000bb 00000009 0001f411     ................
   1f510:	00000015 000000bc 00000009 0001f411     ................
   1f520:	00000015 000000bd 00000015 0001f411     ................
   1f530:	00000015 000000bd 00000011 0001f411     ................
   1f540:	00000015 000000be 00000012 20646162     ............bad 
   1f550:	657a6973 73746573 20657a69 7265766f     sizesetsize over
   1f560:	776f6c66 666f5f78 74657366 666f5f79     flowx_offsety_of
   1f570:	74657366 0001f411 00000015 000000c4     fset............
   1f580:	00000009 000a202c 0001f411 00000015     ...., ..........
   1f590:	000000cf 00000012 0001f411 00000015     ................
   1f5a0:	000000fd 00000011 00000000 00000000     ................

0001f5b0 <str.2>:
   1f5b0:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1f5c0:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1f5d0:	00000077 0001f411 00000015 000000fe     w...............
   1f5e0:	00000012 0001f411 00000015 00000100     ................
   1f5f0:	00000008 0001f411 00000015 00000107     ................
   1f600:	0000001f 0001f411 00000015 00000108     ................
   1f610:	00000020 0001f411 00000015 0000010d      ...............
   1f620:	0000000d 0001f411 00000015 00000110     ................
   1f630:	00000011 20746573 65786970 6620736c     ....set pixels f
   1f640:	656c6961 00000064 0001f411 00000015     ailed...........
   1f650:	00000121 00000005 0001f411 00000015     !...............
   1f660:	0000015b 00000018 0001f411 00000015     [...............
   1f670:	0000015c 00000017 0001f411 00000015     \...............
   1f680:	0000015d 00000021 0001f411 00000015     ]...!...........
   1f690:	0000015d 00000020 0001f411 00000015     ]... ...........
   1f6a0:	0000015d 00000019 0001f411 00000015     ]...............
   1f6b0:	0000015e 00000021 0001f411 00000015     ^...!...........
   1f6c0:	0000015e 00000020 0001f411 00000015     ^... ...........
   1f6d0:	0000015e 0000001a 0001f411 00000015     ^...............
   1f6e0:	0000015f 00000009 0001f411 00000015     _...............
   1f6f0:	0000016f 00000009 0001f411 00000015     o...............
   1f700:	00000170 00000009 0001f411 00000015     p...............
   1f710:	00000171 00000023 0001f411 00000015     q...#...........
   1f720:	00000171 00000011 0001f411 00000015     q...............
   1f730:	00000173 00000010 0001f411 00000015     s...............
   1f740:	00000176 00000009 0001f411 00000015     v...............
   1f750:	0000017b 0000000d 0001f411 00000015     {...............
   1f760:	00000180 00000011 0001f411 00000015     ................
   1f770:	00000185 00000015 50494843 6f742038     ........CHIP8 to
   1f780:	20686375 20746f6e 646e6168 0a64656c     uch not handled.
   1f790:	6c6c6163 60206465 6974704f 3a3a6e6f     called `Option::
   1f7a0:	72776e75 29287061 6e6f2060 60206120     unwrap()` on a `
   1f7b0:	656e6f4e 61762060 7365756c 66206970     None` valuespi f
   1f7c0:	6873756c 69616620 73552f6c 2f737265     lush fail/Users/
   1f7d0:	7070754c 69502f79 6954656e 702f656d     Luppy/PineTime/p
   1f7e0:	74656e69 2d656d69 74737572 6e796d2d     inetime-rust-myn
   1f7f0:	2f747765 74737572 3774732f 2d353337     ewt/rust/st7735-
   1f800:	2d64636c 63746162 73722d68 6372732f     lcd-batch-rs/src
   1f810:	62696c2f 0073722e 0001f7c9 0000004e     /lib.rs.....N...
   1f820:	000000fe 00000009 0001f7c9 0000004e     ............N...
   1f830:	000000f3 00000009 6573552f 4c2f7372     ......../Users/L
   1f840:	79707075 61632e2f 2f6f6772 69676572     uppy/.cargo/regi
   1f850:	79727473 6372732f 7469672f 2e627568     stry/src/github.
   1f860:	2d6d6f63 63636531 39393236 65396264     com-1ecc6299db9e
   1f870:	33323863 62696c2f 70696863 2e302d38     c823/libchip8-0.
   1f880:	2f322e31 2f637273 2e62696c 00007372     1.2/src/lib.rs..
   1f890:	0001f838 00000056 0000009d 00000014     8...V...........
   1f8a0:	0001f838 00000056 000000d4 00000011     8...V...........
   1f8b0:	0001f838 00000056 000000d5 0000001a     8...V...........

0001f8c0 <str.0>:
   1f8c0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1f8d0:	20687469 7265766f 776f6c66 0001f838     ith overflow8...
   1f8e0:	00000056 000000d5 00000011 00000005     V...............
   1f8f0:	0001f8ec 4c205d5b 78562044 495b202c     ....[] LD Vx, [I
   1f900:	0000005d 0001f8f4 00000001 0001f8f5     ]...............
   1f910:	0000000c 0001f904 00000000 00000020     ............ ...
   1f920:	00000008 00000002 00000000 00000000     ................
   1f930:	00000004 00000003 0001f918 6362696c     ............libc
   1f940:	38706968 4b53205d 78562050 504a205d     hip8] SKP Vx] JP
   1f950:	6e6e6e20 00000040 00000020 0001f93c      nnn@... ...<...
   1f960:	00000008 0001f93c 00000008 0001f838     ....<.......8...
   1f970:	00000056 000001a1 0001f95c 0001f838     V.......\...8...
   1f980:	00000056 000001a3 0000001d 0001f838     V...........8...
   1f990:	00000056 000001a4 0000002a 0001f838     V.......*...8...
   1f9a0:	00000056 000001a4 00000021 0001f838     V.......!...8...
   1f9b0:	00000056 000001a4 00000015 444c205d     V...........] LD
   1f9c0:	5d495b20 7856202c 0001f8f4 00000001      [I], Vx........
   1f9d0:	0001f9bc 0000000c 0001f9c8 0001f93c     ............<...
   1f9e0:	00000008 0001f93c 00000008 0001f838     ....<.......8...
   1f9f0:	00000056 0000019a 0001f9dc 0001f838     V...........8...
   1fa00:	00000056 0000019c 0000001d 0001f838     V...........8...
   1fa10:	00000056 0000019d 00000035 0001f838     V.......5...8...
   1fa20:	00000056 0000019d 0000001e 0001f838     V...........8...
   1fa30:	00000056 0000019d 00000015 444c205d     V...........] LD
   1fa40:	202c4220 00007856 0001f8f4 00000001      B, Vx..........
   1fa50:	0001fa3c 0000000a 0001fa48 0001f93c     <.......H...<...
   1fa60:	00000008 0001f93c 00000008 0001f838     ....<.......8...
   1fa70:	00000056 00000193 0001fa5c 0001f838     V.......\...8...
   1fa80:	00000056 00000194 0000001b 0001f838     V...........8...
   1fa90:	00000056 00000195 00000011 0001f838     V...........8...
   1faa0:	00000056 00000196 0000001a 0001f838     V...........8...
   1fab0:	00000056 00000196 00000011 0001f838     V...........8...
   1fac0:	00000056 00000197 0000001a 0001f838     V...........8...
   1fad0:	00000056 00000197 00000011 444c205d     V...........] LD
   1fae0:	202c4620 00007856 0001f8f4 00000001      F, Vx..........
   1faf0:	0001fadc 0000000a 0001fae8 0001f93c     ............<...
   1fb00:	00000008 0001f93c 00000008 0001f838     ....<.......8...
   1fb10:	00000056 0000018f 0001fafc 0001f838     V...........8...
   1fb20:	00000056 00000190 0000001b 0001f838     V...........8...
   1fb30:	00000056 00000190 0000001a 00000000     V...............

0001fb40 <str.1>:
   1fb40:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1fb50:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1fb60:	41205d77 49204444 7856202c 0001f8f4     w] ADD I, Vx....
   1fb70:	00000001 0001fb61 0000000b 0001fb6c     ....a.......l...
   1fb80:	0001f93c 00000008 0001f93c 00000008     <.......<.......
   1fb90:	0001f838 00000056 0000018b 0001fb80     8...V...........
   1fba0:	0001f838 00000056 0000018c 0000002e     8...V...........
   1fbb0:	444c205d 2c545320 00785620 0001f8f4     ] LD ST, Vx.....
   1fbc0:	00000001 0001fbb0 0000000b 0001fbbc     ................
   1fbd0:	0001f93c 00000008 0001f93c 00000008     <.......<.......
   1fbe0:	0001f838 00000056 00000187 0001fbd0     8...V...........
   1fbf0:	0001f838 00000056 00000188 0000001b     8...V...........
   1fc00:	444c205d 2c544420 00785620 0001f8f4     ] LD DT, Vx.....
   1fc10:	00000001 0001fc00 0000000b 0001fc0c     ................
   1fc20:	0001f93c 00000008 0001f93c 00000008     <.......<.......
   1fc30:	0001f838 00000056 00000183 0001fc20     8...V....... ...
   1fc40:	0001f838 00000056 00000184 0000001b     8...V...........
   1fc50:	444c205d 2c785620 00004b20 0001f8f4     ] LD Vx, K......
   1fc60:	00000001 0001fc50 0000000a 0001fc5c     ....P.......\...
   1fc70:	0001f93c 00000008 0001f93c 00000008     <.......<.......
   1fc80:	0001f838 00000056 0000017f 0001fc70     8...V.......p...
   1fc90:	0001f838 00000056 00000180 00000011     8...V...........
   1fca0:	444c205d 2c785620 00544420 0001f8f4     ] LD Vx, DT.....
   1fcb0:	00000001 0001fca0 0000000b 0001fcac     ................
   1fcc0:	0001f93c 00000008 0001f93c 00000008     <.......<.......
   1fcd0:	0001f838 00000056 0000017b 0001fcc0     8...V...{.......
   1fce0:	0001f838 00000056 0000017c 00000011     8...V...|.......
   1fcf0:	4b53205d 5620504e 00000078 0001f8f4     ] SKNP Vx.......
   1fd00:	00000001 0001fcf0 00000009 0001fcfc     ................
   1fd10:	0001f93c 00000008 0001f93c 00000008     <.......<.......
   1fd20:	0001f838 00000056 00000175 0001fd10     8...V...u.......
   1fd30:	0001f838 00000056 00000176 00000021     8...V...v...!...
   1fd40:	0001f8f4 00000001 0001f944 00000008     ........D.......
   1fd50:	0001fd40 0001f93c 00000008 0001f93c     @...<.......<...
   1fd60:	00000008 0001f838 00000056 0000016f     ....8...V...o...
   1fd70:	0001fd54 0001f838 00000056 00000170     T...8...V...p...
   1fd80:	00000020 5244205d 78562057 7956202c      ...] DRW Vx, Vy
   1fd90:	006e202c 0001f8f4 00000001 0001fd84     , n.............
   1fda0:	0000000f 0001fd94 0001f93c 00000008     ........<.......
   1fdb0:	0001f93c 00000008 0001f838 00000056     <.......8...V...
   1fdc0:	00000156 0001fda8 0001f838 00000056     V.......8...V...
   1fdd0:	00000157 0000001d 0001f838 00000056     W.......8...V...
   1fde0:	00000158 0000001d 0001f838 00000056     X.......8...V...
   1fdf0:	0000015e 00000026 0001f838 00000056     ^...&...8...V...
   1fe00:	0000015e 0000001d 0001f838 00000056     ^.......8...V...
   1fe10:	00000160 00000021 00000000 00000000     `...!...........

0001fe20 <str.2>:
   1fe20:	65747461 2074706d 63206f74 75636c61     attempt to calcu
   1fe30:	6574616c 65687420 6d657220 646e6961     late the remaind
   1fe40:	77207265 20687469 69642061 6f736976     er with a diviso
   1fe50:	666f2072 72657a20 0000006f 0001f838     r of zero...8...
   1fe60:	00000056 00000163 00000025 0001f838     V...c...%...8...
   1fe70:	00000056 00000165 0000002d 00000000     V...e...-.......

0001fe80 <str.3>:
   1fe80:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1fe90:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1fea0:	00000077 0001f838 00000056 00000165     w...8...V...e...
   1feb0:	00000028 00000000 00000000 00000000     (...............

0001fec0 <str.4>:
   1fec0:	65747461 2074706d 73206f74 74666968     attempt to shift
   1fed0:	66656c20 69772074 6f206874 66726576      left with overf
   1fee0:	5d776f6c 444e5220 2c785620 006b6b20     low] RND Vx, kk.
   1fef0:	0001f8f4 00000001 0001fee3 0000000c     ................
   1ff00:	0001fef0 0001f93c 00000008 0001f93c     ....<.......<...
   1ff10:	00000008 0001f838 00000056 00000152     ....8...V...R...
   1ff20:	0001ff04 0001f838 00000056 00000153     ....8...V...S...
   1ff30:	00000011 504a205d 2c305620 6e6e6e20     ....] JP V0, nnn
   1ff40:	0001f8f4 00000001 0001ff34 0000000c     ........4.......
   1ff50:	0001ff40 0001f93c 00000008 0001f93c     @...<.......<...
   1ff60:	00000008 0001f838 00000056 0000014e     ....8...V...N...
   1ff70:	0001ff54 444c205d 202c4920 006e6e6e     T...] LD I, nnn.
   1ff80:	0001f8f4 00000001 0001ff74 0000000b     ........t.......
   1ff90:	0001ff80 0001f93c 00000008 0001f93c     ....<.......<...
   1ffa0:	00000008 0001f838 00000056 0000014a     ....8...V...J...
   1ffb0:	0001ff94 4e53205d 78562045 7956202c     ....] SNE Vx, Vy
   1ffc0:	0001f8f4 00000001 0001ffb4 0000000c     ................
   1ffd0:	0001ffc0 0001f93c 00000008 0001f93c     ....<.......<...
   1ffe0:	00000008 0001f838 00000056 00000144     ....8...V...D...
   1fff0:	0001ffd4 0001f838 00000056 00000145     ....8...V...E...
   20000:	00000014 0001f838 00000056 00000145     ....8...V...E...
   20010:	00000021 4853205d 7856204c 7956202c     !...] SHL Vx, Vy
   20020:	0001f8f4 00000001 00020014 0000000c     ................
   20030:	00020020 0001f93c 00000008 0001f93c      ...<.......<...
   20040:	00000008 0001f838 00000056 0000013f     ....8...V...?...
   20050:	00020034 0001f838 00000056 00000140     4...8...V...@...
   20060:	00000020 0001f838 00000056 00000141      ...8...V...A...
   20070:	0000001d 0001f838 00000056 00000141     ....8...V...A...
   20080:	00000011 5553205d 56204e42 56202c78     ....] SUBN Vx, V
   20090:	00000079 0001f8f4 00000001 00020084     y...............
   200a0:	0000000d 00020094 0001f93c 00000008     ........<.......
   200b0:	0001f93c 00000008 0001f838 00000056     <.......8...V...
   200c0:	00000139 000200a8 0001f838 00000056     9.......8...V...
   200d0:	0000013a 0000001e 0001f838 00000056     :.......8...V...
   200e0:	0000013a 00000038 0001f838 00000056     :...8...8...V...
   200f0:	0000013b 00000011 4853205d 78562052     ;.......] SHR Vx
   20100:	7956202c 0001f8f4 00000001 000200f8     , Vy............
   20110:	0000000c 00020104 0001f93c 00000008     ........<.......
   20120:	0001f93c 00000008 0001f838 00000056     <.......8...V...
   20130:	00000134 00020118 0001f838 00000056     4.......8...V...
   20140:	00000135 0000001f 0001f838 00000056     5.......8...V...
   20150:	00000136 0000001d 0001f838 00000056     6.......8...V...
   20160:	00000136 00000011 5553205d 78562042     6.......] SUB Vx
   20170:	7956202c 0001f8f4 00000001 00020168     , Vy........h...
   20180:	0000000c 00020174 0001f93c 00000008     ....t...<.......
   20190:	0001f93c 00000008 0001f838 00000056     <.......8...V...
   201a0:	0000012e 00020188 0001f838 00000056     ........8...V...
   201b0:	0000012f 0000001e 0001f838 00000056     /.......8...V...
   201c0:	0000012f 00000038 0001f838 00000056     /...8...8...V...
   201d0:	00000130 00000011 4441205d 78562044     0.......] ADD Vx
   201e0:	7956202c 0001f8f4 00000001 000201d8     , Vy............
   201f0:	0000000c 000201e4 0001f93c 00000008     ........<.......
   20200:	0001f93c 00000008 0001f838 00000056     <.......8...V...
   20210:	00000128 000201f8 0001f838 00000056     (.......8...V...
   20220:	00000129 0000001e 0001f838 00000056     ).......8...V...
   20230:	00000129 00000038 0001f838 00000056     )...8...8...V...
   20240:	0000012a 00000011 4f58205d 78562052     *.......] XOR Vx
   20250:	7956202c 0001f8f4 00000001 00020248     , Vy........H...
   20260:	0000000c 00020254 0001f93c 00000008     ....T...<.......
   20270:	0001f93c 00000008 0001f838 00000056     <.......8...V...
   20280:	00000124 00020268 0001f838 00000056     $...h...8...V...
   20290:	00000125 0000001e 0001f838 00000056     %.......8...V...
   202a0:	00000125 00000011 4e41205d 78562044     %.......] AND Vx
   202b0:	7956202c 0001f8f4 00000001 000202a8     , Vy............
   202c0:	0000000c 000202b4 0001f93c 00000008     ........<.......
   202d0:	0001f93c 00000008 0001f838 00000056     <.......8...V...
   202e0:	00000120 000202c8 0001f838 00000056      .......8...V...
   202f0:	00000121 0000001e 0001f838 00000056     !.......8...V...
   20300:	00000121 00000011 524f205d 2c785620     !.......] OR Vx,
   20310:	00795620 0001f8f4 00000001 00020308      Vy.............
   20320:	0000000b 00020314 0001f93c 00000008     ........<.......
   20330:	0001f93c 00000008 0001f838 00000056     <.......8...V...
   20340:	0000011c 00020328 0001f838 00000056     ....(...8...V...
   20350:	0000011d 0000001e 0001f838 00000056     ........8...V...
   20360:	0000011d 00000011 444c205d 2c785620     ........] LD Vx,
   20370:	00795620 0001f8f4 00000001 00020368      Vy.........h...
   20380:	0000000b 00020374 0001f93c 00000008     ....t...<.......
   20390:	0001f93c 00000008 0001f838 00000056     <.......8...V...
   203a0:	00000118 00020388 0001f838 00000056     ........8...V...
   203b0:	00000119 0000001d 0001f838 00000056     ........8...V...
   203c0:	00000119 00000011 4441205d 78562044     ........] ADD Vx
   203d0:	6b6b202c 0001f8f4 00000001 000203c8     , kk............
   203e0:	0000000c 000203d4 0001f93c 00000008     ........<.......
   203f0:	0001f93c 00000008 0001f838 00000056     <.......8...V...
   20400:	00000114 000203e8 0001f838 00000056     ........8...V...
   20410:	00000115 0000001d 0001f838 00000056     ........8...V...
   20420:	00000115 00000011 444c205d 2c785620     ........] LD Vx,
   20430:	006b6b20 0001f8f4 00000001 00020428      kk.........(...
   20440:	0000000b 00020434 0001f93c 00000008     ....4...<.......
   20450:	0001f93c 00000008 0001f838 00000056     <.......8...V...
   20460:	00000110 00020448 0001f838 00000056     ....H...8...V...
   20470:	00000111 00000011 6e49205d 696c6176     ........] Invali
   20480:	706f2064 0000203a 0001f8f4 00000001     d op: ..........
   20490:	00020478 0000000e 00020488 00000000     x...............
   204a0:	00000020 00000008 00000002 00000000      ...............
   204b0:	00000000 00000004 00000003 00000001     ................
   204c0:	00000020 00000008 00000002 00000000      ...............
   204d0:	00000000 00000004 00000003 0002049c     ................
   204e0:	633a3a3c 3a65726f 63616d3a 3a736f72     <::core::macros:
   204f0:	6e61703a 6d206369 6f726361 00003e73     :panic macros>..
   20500:	000204e0 0000001e 00000005 00000032     ............2...
   20510:	4553205d 2c785620 00795620 0001f8f4     ] SE Vx, Vy.....
   20520:	00000001 00020510 0000000b 0002051c     ................
   20530:	0001f93c 00000008 0001f93c 00000008     <.......<.......
   20540:	0001f838 00000056 0000010a 00020530     8...V.......0...
   20550:	0001f838 00000056 0000010b 00000014     8...V...........
   20560:	0001f838 00000056 0000010b 00000021     8...V.......!...
   20570:	4e53205d 78562045 6b6b202c 0001f8f4     ] SNE Vx, kk....
   20580:	00000001 00020570 0000000c 0002057c     ....p.......|...
   20590:	0001f93c 00000008 0001f93c 00000008     <.......<.......
   205a0:	0001f838 00000056 00000104 00020590     8...V...........
   205b0:	0001f838 00000056 00000105 00000014     8...V...........
   205c0:	4553205d 20785620 00006b6b 0001f8f4     ] SE Vx kk......
   205d0:	00000001 000205c0 0000000a 000205cc     ................
   205e0:	0001f93c 00000008 0001f93c 00000008     <.......<.......
   205f0:	0001f838 00000056 000000fe 000205e0     8...V...........
   20600:	0001f838 00000056 000000ff 00000014     8...V...........
   20610:	4143205d 6e204c4c 00006e6e 0001f8f4     ] CALL nnn......
   20620:	00000001 00020610 0000000a 0002061c     ................
   20630:	0001f93c 00000008 0001f93c 00000008     <.......<.......
   20640:	0001f838 00000056 000000f9 00020630     8...V.......0...
   20650:	0001f8f4 00000001 0001f94c 00000008     ........L.......
   20660:	00020650 0001f93c 00000008 0001f93c     P...<.......<...
   20670:	00000008 0001f838 00000056 000000f5     ....8...V.......
   20680:	00020664 5953205d 6e6e2053 0000006e     d...] SYS nnn...
   20690:	0001f8f4 00000001 00020684 00000009     ................
   206a0:	00020690 0001f93c 00000008 0001f93c     ....<.......<...
   206b0:	00000008 0001f838 00000056 000000f1     ....8...V.......
   206c0:	000206a4 20746f6e 6c706d69 6e656d65     ....not implemen
   206d0:	00646574 000204e0 0000001e 00000002     ted.............
   206e0:	00000002 4552205d 00000054 0001f8f4     ....] RET.......
   206f0:	00000001 000206e4 00000005 000206ec     ................
   20700:	0001f93c 00000008 0001f93c 00000008     <.......<.......
   20710:	0001f838 00000056 000000ec 00020700     8...V...........
   20720:	4c43205d 00000053 0001f8f4 00000001     ] CLS...........
   20730:	00020720 00000005 00020728 0001f93c      .......(...<...
   20740:	00000008 0001f93c 00000008 0001f838     ....<.......8...
   20750:	00000056 000000e5 0002073c 0001f838     V.......<...8...
   20760:	00000056 00000093 0000001b 0001f838     V...........8...
   20770:	00000056 00000097 00000009 0001f838     V...........8...
   20780:	00000056 000000bb 0000000d 0001f838     V...........8...
   20790:	00000056 000000be 0000000d 6573552f     V.........../Use
   207a0:	4c2f7372 79707075 61632e2f 2f6f6772     rs/Luppy/.cargo/
   207b0:	69676572 79727473 6372732f 7469672f     registry/src/git
   207c0:	2e627568 2d6d6f63 63636531 39393236     hub.com-1ecc6299
   207d0:	65396264 33323863 626d652f 65646465     db9ec823/embedde
   207e0:	72672d64 69687061 302d7363 322e352e     d-graphics-0.5.2
   207f0:	6372732f 6f6f632f 722e6472 726e5573     /src/coord.rsUnr
   20800:	68636165 656c6261 646e6920 00207865     eachable index .
   20810:	000207fd 00000012 00020810 0002079c     ................
   20820:	00000061 00000070 00000016              a...p.......

0002082c <_ZN8libchip87CHARBUF17h227c6d0d7e24574cE>:
   2082c:	909090f0 206020f0 10f07020 f0f080f0     ..... `  p......
   2083c:	f010f010 10f09090 f080f010 80f0f010     ................
   2084c:	f0f090f0 40402010 90f090f0 f090f0f0     ..... @@........
   2085c:	90f0f010 e09090f0 e090e090 808080f0     ................
   2086c:	9090e0f0 80f0e090 f0f080f0 8080f080     ................
   2087c:	72656874 73692065 206f6e20 68637573     there is no such
   2088c:	69687420 6120676e 6e612073 71636120      thing as an acq
   2089c:	65726975 6c65722f 65736165 616f6c20     uire/release loa
   208ac:	75722f64 2f637473 61376535 36363466     d/rustc/5e7af466
   208bc:	30386639 36663565 34313238 35306631     9f80e5f682141f05
   208cc:	33393130 37366261 64666139 31623462     0193ab679afdb4b1
   208dc:	6372732f 62696c2f 65726f63 63616d2f     /src/libcore/mac
   208ec:	2f736f72 2e646f6d 00007372 000208ad     ros/mod.rs......
   208fc:	00000049 0000000a 00000009 72656874     I...........ther
   2090c:	73692065 206f6e20 68637573 69687420     e is no such thi
   2091c:	6120676e 20612073 656c6572 20657361     ng as a release 
   2092c:	64616f6c 00012037 00000000 00000001     load7 ..........
   2093c:	000123f9 00012405 0001240f 00020930     .#...$...$..0...
   2094c:	00012037 00000000 00000001 000123f9     7 ...........#..
   2095c:	00012405 0001240f                       .$...$..

00020964 <_ZN3log6logger3NOP17h5a3de47970f20990E>:
   20964:	00697073 0001e6a4 65737361 6f697472     spi.....assertio
   20974:	6166206e 64656c69 2860203a 7466656c     n failed: `(left
   20984:	203d3d20 68676972 0a602974 656c2020      == right)`.  le
   20994:	203a7466 0a2c6060 67697220 203a7468     ft: ``,. right: 
   209a4:	203a6060 0002096c 0000002d 00020999     ``: l...-.......
   209b4:	0000000c 000209a5 00000003 000209a8     ................
   209c4:	20697073 666e6f63 66206769 006c6961     spi config fail.
   209d4:	000209c4 0000000f 000209d4 000209e0     ................
   209e4:	74737572 6e796d2f 2f747765 2f637273     rust/mynewt/src/
   209f4:	2e697073 00007372 000209e4 00000016     spi.rs..........
   20a04:	00000050 0000004a 20697073 66206263     P...J...spi cb f
   20a14:	006c6961 00020a0c 0000000b 00020a18     ail.............
   20a24:	000209e4 00000016 00000057 00000005     ........W.......
   20a34:	20697073 62616e65 6620656c 006c6961     spi enable fail.
   20a44:	00020a34 0000000f 00020a44 000209e4     4.......D.......
   20a54:	00000016 0000005a 00000037 6f697067     ....Z...7...gpio
   20a64:	69616620 0000006c 00020a60 00000009      fail...`.......
   20a74:	00020a6c 000209e4 00000016 0000005b     l...........[...
   20a84:	00000040 000209e4 00000016 0000005c     @...........\...
   20a94:	00000040 6575716d 66206575 006c6961     @...mqueue fail.
   20aa4:	00020a98 0000000b 00020aa4 000209e4     ................
   20ab4:	00000016 00000065 00000005 206d6573     ....e.......sem 
   20ac4:	6c696166 20697073 6c696166 00020ac0     failspi fail....
   20ad4:	00000008 00020ad0 000209e4 00000016     ................
   20ae4:	00000069 00000005 000209e4 00000016     i...............
   20af4:	0000006d 00000005 00000000 00020964     m...........d...
   20b04:	00000004 00020afc 6e657665 66207174     ........eventq f
   20b14:	006c6961 000209e4 00000016 00000081     ail.............
   20b24:	00000009 63206f6e 6220646d 00657479     ....no cmd byte.
   20b34:	000209e4 00000016 00000097 00000005     ................
   20b44:	000209e4 00000016 00000099 00000016     ................
	...

00020b60 <str.0>:
   20b60:	65747461 2074706d 61206f74 77206464     attempt to add w
   20b70:	20687469 7265766f 776f6c66 20697073     ith overflowspi 
   20b80:	7265766f 776f6c66 000209e4 00000016     overflow........
   20b90:	00000099 00000005 000209e4 00000016     ................
   20ba0:	000000a8 00000012 000209e4 00000016     ................
   20bb0:	000000c1 00000035 00000000 00000000     ....5...........

00020bc0 <str.1>:
   20bc0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   20bd0:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   20be0:	00000077 000209e4 00000016 000000c4     w...............
   20bf0:	0000000f 20746e69 20697073 6c696166     ....int spi fail
   20c00:	000209e4 00000016 00000101 00000011     ................
   20c10:	000209e4 00000016 00000111 00000015     ................

00020c20 <str.2>:
   20c20:	65747461 2074706d 73206f74 72746275     attempt to subtr
   20c30:	20746361 68746977 65766f20 6f6c6672     act with overflo
   20c40:	00000077 000209e4 00000016 0000010f     w...............
   20c50:	00000011 000209e4 00000016 00000117     ................
   20c60:	00000011 000209e4 00000016 00000124     ............$...
   20c70:	00000009 20646162 20697073 006e656c     ....bad spi len.
   20c80:	000209e4 00000016 0000012b 00000005     ........+.......
   20c90:	00020ac8 00000008 00020c90 000209e4     ................
   20ca0:	00000016 00000141 00000009 000209e4     ....A...........
   20cb0:	00000016 0000014a 00000009 000209e4     ....J...........
   20cc0:	00000016 0000014e 00000030 000209e4     ....N...0.......
   20cd0:	00000016 0000015a 00000005 000209e4     ....Z...........
   20ce0:	00000016 0000015f 00000017 0001e6a4     ...._...........
   20cf0:	65737361 6f697472 6166206e 64656c69     assertion failed
   20d00:	2860203a 7466656c 203d3d20 68676972     : `(left == righ
   20d10:	0a602974 656c2020 203a7466 0a2c6060     t)`.  left: ``,.
   20d20:	67697220 203a7468 203a6060 00020cf0      right: ``: ....
   20d30:	0000002d 00020d1d 0000000c 00020d29     -...........)...
   20d40:	00000003 00020d2c 20697073 666e6f63     ....,...spi conf
   20d50:	66206769 006c6961 00020d48 0000000f     ig fail.H.......
   20d60:	00020d58 00020d64 74737572 6e796d2f     X...d...rust/myn
   20d70:	2f747765 2f637273 2e6c6168 00007372     ewt/src/hal.rs..
   20d80:	00020d68 00000016 00000016 00000009     h...............
   20d90:	20697073 62616e65 6620656c 006c6961     spi enable fail.
   20da0:	00020d90 0000000f 00020da0 00020d68     ............h...
   20db0:	00000016 00000019 00000009 20697073     ............spi 
   20dc0:	74696e69 69616620 0000006c 00020dbc     init fail.......
   20dd0:	0000000d 00020dcc 00020d68 00000016     ........h.......
   20de0:	0000001c 00000009 6f697067 69616620     ........gpio fai
   20df0:	0000006c 00020de8 00000009 00020df4     l...............
   20e00:	00020d68 00000016 00000045 00000009     h.......E.......
   20e10:	00020d68 00000016 0000006c 0000001b     h.......l.......

00020e20 <str.0>:
   20e20:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   20e30:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   20e40:	6c616377 2064656c 74704f60 3a6e6f69     wcalled `Option:
   20e50:	776e753a 28706172 6f206029 2061206e     :unwrap()` on a 
   20e60:	6e6f4e60 76206065 65756c61 6573552f     `None` value/Use
   20e70:	4c2f7372 79707075 61632e2f 2f6f6772     rs/Luppy/.cargo/
   20e80:	69676572 79727473 6372732f 7469672f     registry/src/git
   20e90:	2e627568 2d6d6f63 63636531 39393236     hub.com-1ecc6299
   20ea0:	65396264 33323863 6165682f 73656c70     db9ec823/heaples
   20eb0:	2e302d73 2f312e35 2f637273 2e636576     s-0.5.1/src/vec.
   20ec0:	00007372 00020e6c 00000056 000001e8     rs..l...V.......
   20ed0:	0000000d 00000000 00000000 00000000     ................

00020ee0 <str.0>:
   20ee0:	65747461 2074706d 61206f74 77206464     attempt to add w
   20ef0:	20687469 7265766f 776f6c66 552f2928     ith overflow()/U
   20f00:	73726573 70754c2f 2e2f7970 67726163     sers/Luppy/.carg
   20f10:	65722f6f 74736967 732f7972 672f6372     o/registry/src/g
   20f20:	75687469 6f632e62 65312d6d 32366363     ithub.com-1ecc62
   20f30:	62643939 38636539 682f3332 6c706165     99db9ec823/heapl
   20f40:	2d737365 2e352e30 72732f31 65762f63     ess-0.5.1/src/ve
   20f50:	73722e63 00000000 00000000 00000000     c.rs............

00020f60 <str.0>:
   20f60:	65747461 2074706d 73206f74 72746275     attempt to subtr
   20f70:	20746361 68746977 65766f20 6f6c6672     act with overflo
   20f80:	00000077 00020efe 00000056 00000066     w.......V...f...
   20f90:	00000009 00000000 00000000 00000000     ................

00020fa0 <str.1>:
   20fa0:	65747461 2074706d 61206f74 77206464     attempt to add w
   20fb0:	20687469 7265766f 776f6c66 00020efe     ith overflow....
   20fc0:	00000056 0000003e 0000000c 00020efe     V...>...........
   20fd0:	00000056 0000002d 00000009 00020efe     V...-...........
   20fe0:	00000056 0000007e 00000011 0000a7c1     V...~...........
   20ff0:	00000000 00000001 00014c47 0000a705     ........GL......
   21000:	00000002 00000002 00017455 6c6c6163     ........Ut..call
   21010:	60206465 75736552 3a3a746c 72776e75     ed `Result::unwr
   21020:	29287061 6e6f2060 206e6120 72724560     ap()` on an `Err
   21030:	61762060 6465756c 20776172 636f6c62     ` valuedraw bloc
   21040:	6620736b 726c6961 2f747375 74656970     ks failrust/piet
   21050:	626d652d 65646465 69702f64 652d7465     -embedded/piet-e
   21060:	6465626d 2d646564 70617267 73636968     mbedded-graphics
   21070:	6372732f 7369642f 79616c70 0073722e     /src/display.rs.
   21080:	00021047 00000038 00000080 00000005     G...8...........
   21090:	6576656e 73757272 69702f74 652d7465     neverrust/piet-e
   210a0:	6465626d 2f646564 74656970 626d652d     mbedded/piet-emb
   210b0:	65646465 72672d64 69687061 732f7363     edded-graphics/s
   210c0:	622f6372 68637461 0073722e 00021095     rc/batch.rs.....
   210d0:	00000036 000000be 00000019 00021095     6...............
   210e0:	00000036 000000c3 0000001d 00000000     6...............

000210f0 <str.0>:
   210f0:	65747461 2074706d 61206f74 77206464     attempt to add w
   21100:	20687469 7265766f 776f6c66 00021095     ith overflow....
   21110:	00000036 000000d5 00000015 00021095     6...............
   21120:	00000036 00000104 00000019 00021095     6...............
   21130:	00000036 00000109 0000001d 00021095     6...............
   21140:	00000036 0000011d 00000015 6573552f     6.........../Use
   21150:	4c2f7372 79707075 61632e2f 2f6f6772     rs/Luppy/.cargo/
   21160:	69676572 79727473 6372732f 7469672f     registry/src/git
   21170:	2e627568 2d6d6f63 63636531 39393236     hub.com-1ecc6299
   21180:	65396264 33323863 626d652f 65646465     db9ec823/embedde
   21190:	72672d64 69687061 302d7363 322e352e     d-graphics-0.5.2
   211a0:	6372732f 6972702f 6974696d 2f736576     /src/primitives/
   211b0:	74636572 6c676e61 73722e65 0002114c     rectangle.rsL...
   211c0:	00000070 000000c0 00000032 00000000     p.......2.......

000211d0 <str.0>:
   211d0:	65747461 2074706d 61206f74 77206464     attempt to add w
   211e0:	20687469 7265766f 776f6c66 0002114c     ith overflowL...
   211f0:	00000070 000000c2 00000031 00000000     p.......1.......

00021200 <str.1>:
   21200:	65747461 2074706d 73206f74 72746275     attempt to subtr
   21210:	20746361 68746977 65766f20 6f6c6672     act with overflo
   21220:	00000077 0002114c 00000070 000000c4     w...L...p.......
   21230:	00000031 0002114c 00000070 000000c6     1...L...p.......
   21240:	00000031 65707845 64657463 72747320     1...Expected str
   21250:	00656b6f 0002114c 00000070 000000cc     oke.L...p.......
   21260:	00000019 0002114c 00000070 000000d5     ....L...p.......
   21270:	0000000d 0002114c 00000070 000000da     ....L...p.......
   21280:	00000011 6573552f 4c2f7372 79707075     ..../Users/Luppy
   21290:	61632e2f 2f6f6772 69676572 79727473     /.cargo/registry
   212a0:	6372732f 7469672f 2e627568 2d6d6f63     /src/github.com-
   212b0:	63636531 39393236 65396264 33323863     1ecc6299db9ec823
   212c0:	6165682f 73656c70 2e302d73 2f312e35     /heapless-0.5.1/
   212d0:	2f637273 2e636576 00007372 00021284     src/vec.rs......
   212e0:	00000056 00000066 00000009 00000000     V...f...........

000212f0 <str.0>:
   212f0:	65747461 2074706d 61206f74 77206464     attempt to add w
   21300:	20687469 7265766f 776f6c66 00021284     ith overflow....
   21310:	00000056 0000003e 0000000c 00021284     V...>...........
   21320:	00000056 0000007e 00000011 00000000     V...~...........

00021330 <str.1>:
   21330:	65747461 2074706d 73206f74 72746275     attempt to subtr
   21340:	20746361 68746977 65766f20 6f6c6672     act with overflo
   21350:	00000077 2f637273 6362696c 2f65726f     w...src/libcore/
   21360:	2f6d756e 32636564 2f746c66 66776172     num/dec2flt/rawf
   21370:	73722e70 65646e69 756f2078 666f2074     p.rsindex out of
   21380:	756f6220 3a73646e 65687420 6e656c20      bounds: the len
   21390:	20736920 00000000 00000020 00000008      is .... .......
   213a0:	00000002 00000000 00000000 00000002     ................
   213b0:	00000003 2f637273 6362696c 2f65726f     ....src/libcore/
   213c0:	63696e75 2f65646f 6e697270 6c626174     unicode/printabl
   213d0:	73722e65 00000000 00000020 00000004     e.rs.... .......
   213e0:	00000002 00000000 00000002 00000000     ................
   213f0:	00000003 00000000 00000020 00000008     ........ .......
   21400:	00000002 00000000 00000001 00000001     ................
   21410:	00000003 002e2e60 00021415 00000002     ....`...........
   21420:	65726c61 20796461 72726f62 6465776f     already borrowed
   21430:	68772029 73206e65 6963696c 6020676e     ) when slicing `
   21440:	72616843 46797254 456d6f72 726f7272     CharTryFromError
   21450:	6f636544 74556564 45363166 726f7272     DecodeUtf16Error

00021460 <_ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE>:
   21460:	00010201 00000000 00000000 00000000     ................
   21470:	72657469 20202020 2e2e202c 65757274     iter    , ..true
   21480:	72657449 203d3c20 61746164 646e696b     Iter <= datakind
   21490:	746e616d 73756c70 6f72655a 79706f43     mantplusZeroCopy
   214a0:	7373654c 65646f63 65707954 656e6f44     LesscodeTypeDone
   214b0:	72616843 6b636142 68746f42 6d657449     CharBackBothItem
   214c0:	656c6966 656e696c 7466654c 6c696174     filelineLefttail
   214d0:	656b6177 706f7264 32783875 32783869     wakedropu8x2i8x2
   214e0:	34783875 34783869 38783875 38783869     u8x4i8x4u8x8i8x8
   214f0:	6c6c6163 60206465 6974704f 3a3a6e6f     called `Option::
   21500:	72776e75 29287061 6e6f2060 60206120     unwrap()` on a `
   21510:	656e6f4e 61762060 0065756c 00021354     None` value.T...
   21520:	00000000 0000203a 00021354 00000000     ....: ..T.......
   21530:	00021524 00000002 000177ab 00000000     $........w......
   21540:	00000001 000177fb 74756220 65687420     .....w.. but the
   21550:	646e6920 69207865 00002073 00021374      index is ..t...
   21560:	00000020 00021548 00000012 000177ab      ...H........w..
   21570:	0000000c 00000004 00017a43 00017d99     ........Cz...}..
   21580:	00017e49 202c0a2c 2c280a28 30783029     I~..,., (.(,)0x0
   21590:	30313030 30333032 30353034 30373036     0010203040506070
   215a0:	31393038 31313130 31333132 31353134     8091011121314151
   215b0:	31373136 32393138 32313230 32333232     6171819202122232
   215c0:	32353234 32373236 33393238 33313330     4252627282930313
   215d0:	33333332 33353334 33373336 34393338     2333435363738394
   215e0:	34313430 34333432 34353434 34373436     0414243444546474
   215f0:	35393438 35313530 35333532 35353534     8495051525354555
   21600:	35373536 36393538 36313630 36333632     6575859606162636
   21610:	36353634 36373636 37393638 37313730     4656667686970717
   21620:	37333732 37353734 37373736 38393738     2737475767778798
   21630:	38313830 38333832 38353834 38373836     0818283848586878
   21640:	39393838 39313930 39333932 39353934     8899091929394959
   21650:	39373936 00393938 000177ab 00000004     6979899..w......
   21660:	00000004 00017e6d 00017e73 00017e79     ....m~..s~..y~..
   21670:	2f637273 6362696c 2f65726f 2f746d66     src/libcore/fmt/
   21680:	2e646f6d 00007372 00021670 00000016     mod.rs..p.......
   21690:	0000043b 00000011 00021670 00000016     ;.......p.......
   216a0:	00000445 00000024 2f637273 6362696c     E...$...src/libc
   216b0:	2f65726f 63696c73 6f6d2f65 73722e64     ore/slice/mod.rs
   216c0:	65646e69 6f202078 6f207475 61722066     index  out of ra
   216d0:	2065676e 20726f66 63696c73 666f2065     nge for slice of
   216e0:	6e656c20 20687467 000216c0 00000006      length ........
   216f0:	000216c6 00000022 000216a8 00000018     ...."...........
   21700:	00000a72 00000005 63696c73 6e692065     r.......slice in
   21710:	20786564 72617473 61207374 62202074     dex starts at  b
   21720:	65207475 2073646e 00207461 00021708     ut ends at .....
   21730:	00000016 0002171e 0000000d 000216a8     ................
   21740:	00000018 00000a78 00000005 696e6966     ....x.......fini
   21750:	64656873 73796168 6b636174 79622820     shedhaystack (by
   21760:	20736574 6167654e 65766974 69736f50     tes NegativePosi
   21770:	65766974 65746e69 6c617267 61706e55     tiveintegralUnpa
   21780:	64656b63 69666e49 6574696e 756e694d     ckedInfiniteMinu
   21790:	77615273 7265764f 776f6c66 6b636162     sRawOverflowback
   217a0:	72657469 6f746e49 72657449 61636f6c     iterIntoIterloca
   217b0:	6e6f6974 61636f4c 6e6f6974 72616573     tionLocationsear
   217c0:	72656863 69736f70 6e6f6974 74697263     cherpositioncrit
   217d0:	736f705f 656e694c 796e4173 57776152     _posLinesAnyRawW
   217e0:	72656b61 6f6c6c41 72724563 38746e69     akerAllocErrint8
   217f0:	745f3478 2f637273 6362696c 2f65726f     x4_tsrc/libcore/
   21800:	2f727473 2e646f6d 2e5b7372 625d2e2e     str/mod.rs[...]b
   21810:	20657479 65646e69 69202078 756f2073     yte index  is ou
   21820:	666f2074 756f6220 2073646e 6020666f     t of bounds of `
   21830:	0002180f 0000000b 0002181a 00000016     ................
   21840:	00021414 00000001 000217f4 00000016     ................
   21850:	00000853 00000009 69676562 3d3c206e     S.......begin <=
   21860:	646e6520 00002820 00021858 0000000e      end (..X.......
   21870:	00021484 00000004 00021430 00000010     ........0.......
   21880:	00021414 00000001 000217f4 00000016     ................
   21890:	00000857 00000005 000217f4 00000016     W...............
   218a0:	00000868 0000000e 20736920 20746f6e     h....... is not 
   218b0:	68632061 62207261 646e756f 3b797261     a char boundary;
   218c0:	20746920 69207369 6469736e 20292065      it is inside ) 
   218d0:	6020666f 0002180f 0000000b 000218a8     of `............
   218e0:	00000026 0002175c 00000008 000218ce     &...\...........
   218f0:	00000006 00021414 00000001 000217f4     ................
   21900:	00000016 0000086a 00000005 000213b4     ....j...........
   21910:	00000020 0000001a 00000028 05030100      .......(.......
   21920:	03060605 08080607 1c0a1109 140c190b     ................
   21930:	0d0e120d 0310040f 09131212 05170116     ................
   21940:	03190218 021c071a 161f011d 042b0320     ............ .+.
   21950:	0b2d022c 0330012e 01320231 02a902a7     ,.-...0.1.2.....
   21960:	08ab04aa 05fb02fa 03fe04fd 78ad09ff     ...............x
   21970:	a28d8b79 8b585730 1d1c908c 4b0f0edd     y...0WX........K
   21980:	2efcfb4c 5d5c3f2f 84e2b55f 92918e8d     L.../?\]_.......
   21990:	bbbab1a9 cac9c6c5 ffe5e4de 12110400     ................
   219a0:	37343129 493d3b3a 8e845d4a b4b1a992     )147:;=IJ]......
   219b0:	cac6bbba e5e4cfce 0e0d0400 31291211     ..............)1
   219c0:	453b3a34 5e4a4946 91846564 cec99d9b     4:;EFIJ^de......
   219d0:	29110dcf 64574945 a9918d65 c5bbbab4     ...)EIWde.......
   219e0:	e5e4dfc9 110d04f0 65644945 b2848180     ........EIde....
   219f0:	d5bfbebc 83f1f0d7 a6a48b85 c7c5bfbe     ................
   21a00:	dbdacfce cdbd9848 49cfcec6 59574f4e     ....H......INOWY
   21a10:	8e895f5e b7b6b18f c7c6c1bf 171611d7     ^_..............
   21a20:	f7f65c5b 0d80fffe dfde716d 6e1f0f0e     [\......mq.....n
   21a30:	5f1d1c6f afae7e7d 16fabcbb 461f1e17     o.._}~.........F
   21a40:	584f4e47 7e5e5c5a d4c5b57f f1f0dcd5     GNOXZ\^~........
   21a50:	8f7372f5 97967574 2e265f2f b7afa72f     .rs.tu../_&./...
   21a60:	d7cfc7bf 97409adf 1f8f3098 ffcec1c0     ......@..0......
   21a70:	5b5a4f4e 100f0807 efee2f27 3d376f6e     NOZ[....'/..no7=
   21a80:	9045423f 53fffe91 c9c87567 d9d8d1d0     ?BE....Sgu......
   21a90:	00fffee7 82225f20 448204df 06041b08     .... _"....D....
   21aa0:	0eac8111 1e35ab80 03e08015 04010819     ......5.........
   21ab0:	0434042f 07010307 0a110706 07120f50     /.4.........P...
   21ac0:	04020855 03090a1c 03070308 03030302     U...............
   21ad0:	0305040c 0e01060b 033a0515 05060711     ..........:.....
   21ae0:	07570710 0d150702 03430450 0401032d     ..W.....P.C.-...
   21af0:	0c0f0611 251d043a 046d205f c880256a     ....:..%_ m.j%..
   21b00:	03b08205 fd82061a 15075903 1409170b     .........Y......
   21b10:	6a0c140c 1a060a06 2b075906 2c0a4605     ...j.....Y.+.F.,
   21b20:	01040c04 2c0b3103 0b061a04 06ac8003     .....1.,........
   21b30:	411f060a 032d044c 033c0874 073c030f     ...AL.-.t.<...<.
   21b40:	052b0838 1811ff82 2d112f08 21102003     8.+....../.-. .!
   21b50:	048c800f 0b199782 05948815 073b052f     ............/.;.
   21b60:	09180e02 7430b080 1ad6800c ff80050c     ......0t........
   21b70:	05b68005 c69b0c24 1030d20a 37038d84     ....$.....0....7
   21b80:	145c8109 8008b880 043530c7 0838060a     ..\......05...8.
   21b90:	060c0846 031e0b74 0959045a 1c188380     F...t...Z.Y.....
   21ba0:	4809160a 068a8008 170ca4ab 04a13104     ...H.........1..
   21bb0:	0726da81 8005050c 6d8111a5 2a287810     ..&........m.x(*
   21bc0:	80044c06 be80048d 0f031b03 0106000d     .L..............
   21bd0:	04010301 09080802 0b050a02 11011002     ................
   21be0:	13051204 15021411 19021702 1d051c04     ................
   21bf0:	6a012408 bc026b03 d402d102 d609d50c     .$.j.k..........
   21c00:	da02d702 e105e001 ee02e802 f904f020     ............ ...
   21c10:	0c02fa06 4e3e3b27 9e9e8f4f 0907069f     ....';>NO.......
   21c20:	563e3d36 04d1d0f3 37361814 35bd5756     6=>V......67VW.5
   21c30:	12e0cfce 9e8e8987 110e0d04 34312912     .............)14
   21c40:	4946453a 644f4e4a b65c5a65 a81c1bb7     :EFIJNOdeZ\.....
   21c50:	09d9d8a9 a8919037 3e3b0a07 928f6966     ....7.....;>fi..
   21c60:	efee5f6f 9b9a625a 9d552827 a4a3a1a0     o_..Zb..'(U.....
   21c70:	baada8a7 0b06c4bc 3a1d150c a651453f     ...........:?EQ.
   21c80:	a0cdcca7 221a1907 c53f3e25 232004c6     ......."%>?... #
   21c90:	33282625 4a483a38 5553504c 5c5a5856     %&(38:HJLPSUVXZ\
   21ca0:	6563605e 78736b66 a48a7f7d c0b0afaa     ^`cefksx}.......
   21cb0:	a3720cd0 6ecccba4 7b225e6f 2d040305     ..r....no^"{...-
   21cc0:	01046503 82802e2f 0f31031d 0924041c     .e../.....1...$.
   21cd0:	052b051e 2a0e0444 2406aa80 28042404     ..+.D..*...$.$.(
   21ce0:	010b3408 37819080 080a1609 03399880     .4.....7......9.
   21cf0:	30090863 03210516 4001051b 054b0438     c..0..!....@8.K.
   21d00:	070a042f 20400709 090c0427 053a0336     /.....@ '...6.:.
   21d10:	0c04071a 37495007 07330d33 810a082e     .....PI73.3.....
   21d20:	81801f26 802a0828 4e091786 430f1e04     &...(.*....N...C
   21d30:	0a07190e 27094706 3f0b7509 3b062a41     .....G.'.u.?A*.;
   21d40:	51060a05 10050106 8b800503 08482060     ...Q........` H.
   21d50:	5ea6800a 0a0b4522 39130d06 2c360a07     ...^"E.....9..6,
   21d60:	c0801004 0c53643c 45a08001 5308481b     ....<dS....E.H.S
   21d70:	0781391d 031d0a46 03374947 060a080e     .9..F...GI7.....
   21d80:	810a0739 c7801936 9b830d32 800b7566     9...6...2...fu..
   21d90:	84bc8ac4 82d18f2f 82b9a147 042a0739     ..../...G...9.*.
   21da0:	0a266002 05280a46 5bb08213 39044b65     .`&.F.(....[eK.9
   21db0:	04401107 08f8971c 0da5f382 03311f81     ..@...........1.
   21dc0:	81080411 6b04898c 09030d05 60931007     .......k.......`
   21dd0:	730af680 46176e08 0c149a80 80190957     ...s.n.F....W...
   21de0:	03478187 150f4285 802b5085 1a032dd5     ..G..B...P+..-..
   21df0:	70810204 8501053a 29d78000 040a044c     ...p:......)L...
   21e00:	44118302 c2803d4c 0401063c 341b0555     ...DL=..<...U..4
   21e10:	2c0e8102 560c6404 5d030d0a 1d393d03     ...,.d.V...].=9.
   21e20:	09042c0d 060e0207 d6839a80 0b030d0a     .,..............
   21e30:	590c7405 0c140c07 0a083804 1e082806     .t.Y.....8...(..
   21e40:	31037752 0ca68003 05030414 85060d03     Rw.1............
   21e50:	6372736a 62696c2f 65726f63 696e752f     jsrc/libcore/uni
   21e60:	65646f63 646f6d2f 0073722e 00021e51     code/mod.rs.Q...
   21e70:	0000001a 00000038 0000000f 00021e51     ....8.......Q...
   21e80:	0000001a 00000039 00000010              ....9.......

00021e8c <_ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E>:
   21e8c:	1b150f04 17120319 0e000011 00000016     ................
	...
   21eb4:	00130600 00000000 00000000 00000000     ................
   21ec4:	00000000 07020000 0c08000a 1a181c1d     ................
	...
   21ee4:	01050000 00000000 00000000 00000000     ................
   21ef4:	00000000 10000000 00000000 0009000b     ................
   21f04:	                                         ...

00021f07 <_ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E>:
	...
   21f23:	00120f00 00000000 00000000 00000000     ................
   21f33:	0000001f 00000000 00000000 00000000     ................
   21f43:	1d664649 00000000 00000000 00000000     IFf.............
   21f53:	00003e8a 00000000 00000000 4b000000     .>.............K
   21f63:	00000053 00000000 00000000 42236700     S............g#B
	...
   21f7f:	0000003d 00230000 00000000 00000000     =.....#.........
   21f8f:	2d000075 00000000 00000000 00000000     u..-............
   21f9f:	003c4e82 00000000 00000000 63000000     .N<............c
   21faf:	25000000 00005a00 00000000 00368100     ...%.Z........6.
   21fbf:	00000300 00000000 00000000 0000002f     ............/...
   21fcf:	00000000 00001000 13000000 00000800     ................
	...
   21fe7:	43000000 89007200 00000000 00000000     ...C.r..........
   21ff7:	00070000 057d0000 37003f18 64400987     ......}..?.7..@d
   22007:	00210000 00000000 00000000 00000000     ..!.............
   22017:	4100000a 00000000 00000000 00000000     ...A............
   22027:	0030000c 0000005c 00717719 44354760     ..0.\....wq.`G5D
   22037:	7400002e 2c651139 507f5e51 34000000     ...t9.e,Q^.P...4
   22047:	00000031 00000053 3a000000 00000000     1...S......:....
   22057:	88001a38 696b2b5f 845d4f5d 14682a80     8..._+ki]O]..*h.
   22067:	0017003b 00000000 00000000 00000000     ;...............
   22077:	57000055 83000000 00000000 00000000     U..W............
   22087:	00000059 26000000 00161b6e 00000000     Y......&n.......
   22097:	001c4a6d 00000000 00000000 00002400     mJ...........$..
   220a7:	0052007c 0015067b 48000000 00000000     |.R.{......H....
   220b7:	2776287e 2200296c 0d610e5b 04627056     ~(v'l)."[.a.Vpb.
   220c7:	02782085 1e7a0000 00540179 00000033     . x...z.y.T.3...
   220d7:	00587386 0b6f454d 3200006a 00004c6c     .sX.MEo.j..2lL..
   220e7:	00008a89 3e8a8a8a 00000000 00000000     .......>........
	...

000220f8 <_ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E>:
	...
   22100:	00000001 00000000 0000000d 00000000     ................
   22110:	0000001c 00000000 00000040 00000000     ........@.......
   22120:	000000b6 00000000 000000bf 00000000     ................
   22130:	000003f8 00000000 000007f0 00000000     ................
   22140:	000007ff 00000000 00001000 00000000     ................
   22150:	00001e00 00000000 00003800 00000000     .........8......
   22160:	00003f00 00000000 00007f80 00000000     .?..............
   22170:	00008000 00000000 0001ffc0 00000000     ................
   22180:	0003ff80 00000000 00078000 00000000     ................
   22190:	007f0000 00000000 00802001 00000000     ......... ......
   221a0:	00a30000 00000000 037ffc00 00000000     ................
   221b0:	06000000 00000000 07ff0000 00000000     ................
   221c0:	09800000 00000000 0e000000 00000000     ................
   221d0:	0e7e0080 00000000 20002064 00000000     ..~.....d . ....
   221e0:	200ffe40 00000000 30000001 00000000     @.. .......0....
   221f0:	40000000 00000000 4000005c 00000000     ...@....\..@....
   22200:	60000000 00000000 805c8400 00000000     ...`......\.....
   22210:	c0000000 00000000 e0000000 00000000     ................
   22220:	00000000 00000001 0cf00000 00000001     ................
   22230:	00603044 0000000c 00603dc1 0000000c     D0`......=`.....
   22240:	0080201e 0000000c 00c0201e 0000000c     . ....... ......
   22250:	00fe21fe 0000000c 00000000 00000020     .!.......... ...
   22260:	00000000 00000060 00000844 00000060     ....`...D...`...
   22270:	00000000 000000f0 00000060 00000200     ........`.......
   22280:	f9ffff7f 000007db 80000000 000007f8     ................
   22290:	e0000000 00000fbc 00000000 00002120     ............ !..
   222a0:	00000003 00003b3c 00000fe7 00003c00     ....<;.......<..
   222b0:	9fc00000 00003d9f fbc00000 00003eef     .....=.......>..
   222c0:	00000000 00003fc0 00000000 0000f000     .....?..........
   222d0:	00000000 0000fc00 f8000010 0000fffe     ................
   222e0:	0000ffff 0000ffff ffffffff 0000ffff     ................
   222f0:	fffff800 00010000 00000000 0001ffc0     ................
   22300:	ffff0000 0001ffff 00000000 00030000     ................
   22310:	00000000 00038000 00000000 0003a340     ............@...
   22320:	00000000 00080000 000c0000 000c0000     ................
   22330:	00000004 000ff800 00000000 00180000     ................
   22340:	001c0000 001c0000 c3000000 001e0001     ................
   22350:	00000000 001f0000 00800001 001f1fc0     ................
   22360:	00000007 001fef80 ffffffff 00201fff     .............. .
   22370:	00023986 00230000 00000002 00403000     .9....#......0@.
   22380:	00000000 00667e00 fffc0000 006dfcff     .....~f.......m.
   22390:	00000000 007f0000 00000000 00bf2800     .............(..
   223a0:	00000000 00cff000 03000000 02a00000     ................
   223b0:	fff70000 031021fd 00000003 06780000     .....!........x.
   223c0:	00000000 06ff8000 00000000 07c00000     ................
   223d0:	00000000 07f20000 00000000 0e040187     ................
   223e0:	00000006 10000000 00001008 10000000     ................
   223f0:	00000007 14000000 0000000f 17f00000     ................
   22400:	00000000 1ff20000 feffe0df 1fffffff     ................
   22410:	00000000 20000000 00000000 200ff800     ....... ....... 
   22420:	00000007 33c80000 00000000 3fb00000     .......3.......?
   22430:	00000000 3ff78000 00000004 40000000     .......?.......@
   22440:	0080201e 4000000c 00000000 40d38000     . .....@.......@
   22450:	00000002 50000000 00000003 58000000     .......P.......X
   22460:	00000000 66fde000 000007fe 79f80000     .......f.......y
   22470:	00000003 7fc00000 00000000 7ffe0000     ................
   22480:	00000000 7fff0000 00000000 80000000     ................
   22490:	0000007f 80000000 00000030 8003ffff     ........0.......
   224a0:	0000f06e 87000000 00000002 90000000     n...............
   224b0:	7f400000 9ff81fe5 00000000 a5f90000     ..@.............
   224c0:	00000000 a7f80000 00000000 b03c8000     ..............<.
   224d0:	00000000 b47e0000 00000000 bf7f0000     ......~.........
   224e0:	fffe0000 bfffffff 00000011 c0000000     ................
   224f0:	00000000 c19d0000 00000002 d0000000     ................
   22500:	00000000 f807c3a0 ffffffff f87fffff     ................
   22510:	ffffffff fbffffff 000021be fc00000c     .........!......
   22520:	00000000 ff000000 00000002 ff000000     ................
   22530:	00020000 ffff0000 fff80000 fffffffb     ................
   22540:	00000000 ffffffff ffffffff ffffffff     ................
   22550:	00000020 00006425 6c363025 00002075      ...%d..%06lu ..

00022560 <nrf52_hal_i2cs>:
   22560:	00000000 20000108                       ....... 

00022568 <nrf52_hal_spis>:
   22568:	2000ddc0 00000000 00000000 65737341     ... ........Asse
   22578:	40207472 25783020 00000a78 65737341     rt @ 0x%x...Asse
   22588:	40207472 25783020 202d2078 253a7325     rt @ 0x%x - %s:%
   22598:	00000a64 61686e55 656c646e 6e692064     d...Unhandled in
   225a8:	72726574 20747075 646c2528 65202c29     terrupt (%ld), e
   225b8:	70656378 6e6f6974 20707320 30257830     xception sp 0x%0
   225c8:	0a786c38 00000000 3a307220 30257830     8lx..... r0:0x%0
   225d8:	20786c38 3a317220 30257830 20786c38     8lx  r1:0x%08lx 
   225e8:	3a327220 30257830 20786c38 3a337220      r2:0x%08lx  r3:
   225f8:	30257830 0a786c38 00000000 3a347220     0x%08lx..... r4:
   22608:	30257830 20786c38 3a357220 30257830     0x%08lx  r5:0x%0
   22618:	20786c38 3a367220 30257830 20786c38     8lx  r6:0x%08lx 
   22628:	3a377220 30257830 0a786c38 00000000      r7:0x%08lx.....
   22638:	3a387220 30257830 20786c38 3a397220      r8:0x%08lx  r9:
   22648:	30257830 20786c38 3a303172 30257830     0x%08lx r10:0x%0
   22658:	20786c38 3a313172 30257830 0a786c38     8lx r11:0x%08lx.
   22668:	00000000 3a323172 30257830 20786c38     ....r12:0x%08lx 
   22678:	3a726c20 30257830 20786c38 3a637020      lr:0x%08lx  pc:
   22688:	30257830 20786c38 3a727370 30257830     0x%08lx psr:0x%0
   22698:	0a786c38 00000000 52534349 2578303a     8lx.....ICSR:0x%
   226a8:	786c3830 53464820 78303a52 6c383025     08lx HFSR:0x%08l
   226b8:	46432078 303a5253 38302578 000a786c     x CFSR:0x%08lx..
   226c8:	52414642 2578303a 786c3830 464d4d20     BFAR:0x%08lx MMF
   226d8:	303a5241 38302578 000a786c 6e69616d     AR:0x%08lx..main
   226e8:	00000000 656c6469 00000000 7379736d     ....idle....msys
   226f8:	0000315f                                _1..

000226fc <MemFile_methods>:
   226fc:	0001c679 00000000                       y.......

00022704 <stdout>:
   22704:	20000124                                $.. 

00022708 <nrf52k_flash_dev>:
   22708:	00022720 00000000 00080000 00000080      '..............
   22718:	00000001 000000ff                       ........

00022720 <nrf52k_flash_funcs>:
   22720:	0001c8e5 0001c815 0001c79d 0001c7f5     ................
   22730:	00000000 0001c7f1 00000000              ............

0002273c <nrf52_hal_timers>:
   2273c:	2000ded0 00000000 00000000 00000000     ... ............
	...

00022754 <hal_i2c1_cfg>:
   22754:	00000007 00000006 00000064              ........d...

00022760 <os_bsp_spi0m_cfg>:
   22760:	001d0302 736e6573 6e5f726f 6669746f     ....sensor_notif
   22770:	7476655f 00000073                       _evts...

00022778 <COLLECTOR_NODE_HW_ID>:
   22778:	066aff57 50547878 67242949              W.j.xxTPI)$g

00022784 <SENSOR_NODE_HW_IDS>:
   22784:	066dff38 3634574e 43085825 04030201     8.m.NW46%X.C....
   22794:	08070605 020b0a09 04030201 08070605     ................
   227a4:	030b0a09 04030201 08070605 040b0a09     ................
   227b4:	04030201 08070605 050b0a09 77687325     ............%shw
   227c4:	00206469 30313025 00786c6c 646f6e20     id .%010llx. nod
   227d4:	00002065 65737325 726f736e 25237325     e ..%ssensor%s#%
   227e4:	00000a64 6f637325 63656c6c 25726f74     d...%scollector%
   227f4:	00000a73 74737325 61646e61 656e6f6c     s...%sstandalone
   22804:	000a7325 2054454e 00000000 73257325     %s..NET ....%s%s
   22814:	0a732520 00000000 00000000               %s.........

00022820 <sensor_node_addresses>:
   22820:	b4b5b6f1 000000b3 b4b5b6cd 000000b3     ................
   22830:	b4b5b6a3 000000b3 b4b5b60f 000000b3     ................
   22840:	b4b5b605 000000b3 706d6574 7574735f     ........temp_stu
   22850:	00305f62 20504d54 61657263 25206574     b_0.TMP create %
   22860:	00000a73                                s...

00022864 <g_temp_stub_sensor_driver>:
   22864:	0001d721 0001d629 00000000 00000000     !...)...........
	...
   2288c:	20425453 64616572 6d657420 65732070     STB read temp se
   2289c:	726f736e 0000000a 635f636f 62635f6c     nsor....oc_cl_cb
   228ac:	00000073 725f636f 6f5f7065 00000000     s...oc_rep_o....

000228bc <sysflash_map_dflt>:
	...
   228c4:	00004000 00000001 00008000 00073c00     .@...........<..
   228d4:	00000002 0007bc00 00000400 00000003     ................
   228e4:	0007c000 00001000 00000010 00004000     .............@..
   228f4:	00004000 00000011 0007d000 00003000     .@...........0..
   22904:	70616f63 6365725f 65766965 544f4e20     coap_receive NOT
   22914:	504d4920 454d454c 4445544e 0000000a      IMPLEMENTED....

/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
 108828	    108	  57144	 166080	  288c0	/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
