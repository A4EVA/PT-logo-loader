
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000080f9

Program Header:
0x70000001 off    0x000228d4 vaddr 0x000228d4 paddr 0x000228d4 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x000228ec memsz 0x000228ec flags rwx
    LOAD off    0x000300d8 vaddr 0x200000d8 paddr 0x000228ec align 2**16
         filesz 0x0000006c memsz 0x0000006c flags rw-
    LOAD off    0x00030148 vaddr 0x20000148 paddr 0x00022958 align 2**16
         filesz 0x00000000 memsz 0x0000de40 flags rw-
    LOAD off    0x00040000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x000000d8 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00008000  00008000  00008000  2**0  ALLOC
  1 .text              0001a8b4  00008020  00008020  00008020  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  000228d4  000228d4  00030144  2**0  CONTENTS
  3 .ARM.exidx         00000018  000228d4  000228d4  000228d4  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 000000d8  20000000  20000000  00040000  2**0  ALLOC
  5 .rtt               00000000  200000d8  200000d8  00030144  2**0  CONTENTS
  6 .data              0000006c  200000d8  000228ec  000300d8  2**2  CONTENTS, ALLOC, LOAD, DATA
  7 .bssnz             00000000  20000144  20000144  00030144  2**0  CONTENTS
  8 .bss               0000de40  20000148  00022958  00030148  2**3  ALLOC
  9 .stack_dummy       000001b0  2000df88  2000df88  00030148  2**3  CONTENTS, READONLY
 10 .ARM.attributes    0000003b  00000000  00000000  000302f8  2**0  CONTENTS, READONLY
 11 .comment           0000007f  00000000  00000000  00030333  2**0  CONTENTS, READONLY
 12 .svc_table         00000004  00000000  00000000  000303b2  2**0  CONTENTS, READONLY
 13 .debug_line        0004ae01  00000000  00000000  000303b6  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_info        0008a7d0  00000000  00000000  0007b1b7  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev      0000ee82  00000000  00000000  00105987  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges     00005ef0  00000000  00000000  00114810  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_str         00061886  00000000  00000000  0011a700  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         00013513  00000000  00000000  0017bf86  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges      0001a398  00000000  00000000  0018f499  2**0  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame       0000f5bc  00000000  00000000  001a9834  2**2  CONTENTS, READONLY, DEBUGGING
 21 .debug_macinfo     00000063  00000000  00000000  001b8df0  2**0  CONTENTS, READONLY, DEBUGGING
 22 .debug_pubnames    00019c37  00000000  00000000  001b8e53  2**0  CONTENTS, READONLY, DEBUGGING
 23 .debug_pubtypes    0003bb53  00000000  00000000  001d2a8a  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .imghdr	00000000 .imghdr
00008020 l    d  .text	00000000 .text
000228d4 l    d  .ARM.extab	00000000 .ARM.extab
000228d4 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
200000d8 l    d  .data	00000000 .data
20000144 l    d  .bssnz	00000000 .bssnz
20000148 l    d  .bss	00000000 .bss
2000df88 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
00008100 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
200000d8 l     O .data	00000004 sbrkBase
200000dc l     O .data	00000004 sbrkLimit
200000e0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
0000820c l     F .text	0000003c errata_16
00008248 l     F .text	0000004c errata_31
00008294 l     F .text	0000003c errata_32
000082d0 l     F .text	0000004c errata_36
0000831c l     F .text	0000003c errata_37
00008358 l     F .text	0000003c errata_57
00008394 l     F .text	0000003c errata_66
000083d0 l     F .text	0000004c errata_108
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 3592ao74dt466zwu
00000d09 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f32a l       .debug_str	00000000 
0005a79d l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4a7 l       .debug_str	00000000 
0001f49b l       .debug_str	00000000 
00034425 l       .debug_str	00000000 
0005a0b1 l       .debug_str	00000000 
0005a818 l       .debug_str	00000000 
00059ae5 l       .debug_str	00000000 
00000e0b l       .debug_str	00000000 
00034452 l       .debug_str	00000000 
00034444 l       .debug_str	00000000 
00000e1d l       .debug_str	00000000 
00000e0f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0004ea10 l       .debug_str	00000000 
000399b5 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0005cd0a l       .debug_str	00000000 
00000b83 l       .debug_str	00000000 
00000b8c l       .debug_str	00000000 
00000b90 l       .debug_str	00000000 
00000bba l       .debug_str	00000000 
0005bb93 l       .debug_str	00000000 
00000bbf l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
00003ee3 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00034411 l       .debug_str	00000000 
0005f7cb l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000394cb l       .debug_str	00000000 
0005cbb4 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a826 l       .debug_str	00000000 
0005a727 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3cz1tg82iqprprj5
00001118 l       .debug_str	00000000 
0000126a l       .debug_str	00000000 
000012aa l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00016964 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000425e9 l       .debug_str	00000000 
00000f07 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f4a6 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00059eeb l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
000602e1 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001106 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
0005d830 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000011c0 l       .debug_str	00000000 
000011e7 l       .debug_str	00000000 
00001218 l       .debug_str	00000000 
000011ff l       .debug_str	00000000 
0003e5ff l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00001222 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 40zocxwjz4ckzrhd
000012fa l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000132a l       .debug_str	00000000 
0000133d l       .debug_str	00000000 
0000136d l       .debug_str	00000000 
00001398 l       .debug_str	00000000 
000013a1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 5k460cii92qewjl
000012f5 l       .debug_str	00000000 
00001433 l       .debug_str	00000000 
0000146f l       .debug_str	00000000 
0001c3c0 l       .debug_str	00000000 
00001478 l       .debug_str	00000000 
0001a539 l       .debug_str	00000000 
000014a3 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00034411 l       .debug_str	00000000 
00001501 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00010a77 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00001412 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001f40f l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001425 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 16zjnp1vbo7kc1gp
00000c82 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000394cb l       .debug_str	00000000 
0005cbb4 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a826 l       .debug_str	00000000 
0005a727 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f32a l       .debug_str	00000000 
0005a79d l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4a7 l       .debug_str	00000000 
0001f49b l       .debug_str	00000000 
0000165b l       .debug_str	00000000 
00012626 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0005cfe1 l       .debug_str	00000000 
000612d4 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00003d16 l       .debug_str	00000000 
000611df l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0004ea10 l       .debug_str	00000000 
000399b5 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005feca l       .debug_str	00000000 
00001521 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00060e9e l       .debug_str	00000000 
0000152e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
0002219c l       .debug_str	00000000 
00015a9f l       .debug_str	00000000 
00001536 l       .debug_str	00000000 
000017dc l       .debug_str	00000000 
0000153e l       .debug_str	00000000 
000015c3 l       .debug_str	00000000 
000015d9 l       .debug_str	00000000 
0005cd13 l       .debug_str	00000000 
00001600 l       .debug_str	00000000 
0003f8ef l       .debug_str	00000000 
00001628 l       .debug_str	00000000 
00001656 l       .debug_str	00000000 
00001660 l       .debug_str	00000000 
0000168b l       .debug_str	00000000 
00001692 l       .debug_str	00000000 
0005f664 l       .debug_str	00000000 
000016ba l       .debug_str	00000000 
0006125f l       .debug_str	00000000 
0001c3c0 l       .debug_str	00000000 
000016e7 l       .debug_str	00000000 
00001713 l       .debug_str	00000000 
0000171b l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
00001783 l       .debug_str	00000000 
0000178c l       .debug_str	00000000 
000017c2 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000017d3 l       .debug_str	00000000 
0000165a l       .debug_str	00000000 
00059c32 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
000017fa l       .debug_str	00000000 
000017ea l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
000017f9 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1oq54qwymghnfn7s
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f32a l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005a79d l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea10 l       .debug_str	00000000 
000399b5 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000182a l       .debug_str	00000000 
0005c058 l       .debug_str	00000000 
000018af l       .debug_str	00000000 
0000191c l       .debug_str	00000000 
0000198e l       .debug_str	00000000 
0005ae34 l       .debug_str	00000000 
0005e9b8 l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000019ec l       .debug_str	00000000 
0004ea0f l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2d0u1dup22f6p5uq
00000d12 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4a7 l       .debug_str	00000000 
00001a09 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0004ea10 l       .debug_str	00000000 
000399b5 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000394cb l       .debug_str	00000000 
0005cbb4 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a826 l       .debug_str	00000000 
0005a727 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f32a l       .debug_str	00000000 
0005a79d l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2q7rzzztqsy7quqz
00003138 l       .debug_str	00000000 
0001c3c0 l       .debug_str	00000000 
00003651 l       .debug_str	00000000 
00003691 l       .debug_str	00000000 
000036df l       .debug_str	00000000 
0000371f l       .debug_str	00000000 
00003746 l       .debug_str	00000000 
00003786 l       .debug_str	00000000 
00003794 l       .debug_str	00000000 
00003803 l       .debug_str	00000000 
0000382e l       .debug_str	00000000 
0000389e l       .debug_str	00000000 
000038b1 l       .debug_str	00000000 
00003921 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000394d l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00016964 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003e5ff l       .debug_str	00000000 
0000395c l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0005abd8 l       .debug_str	00000000 
00003587 l       .debug_str	00000000 
00001a42 l       .debug_str	00000000 
00001d90 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000425e9 l       .debug_str	00000000 
00001a4b l       .debug_str	00000000 
00001a57 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00001a5f l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00001ab9 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00001b6d l       .debug_str	00000000 
00001bbc l       .debug_str	00000000 
00001bc6 l       .debug_str	00000000 
00001c03 l       .debug_str	00000000 
00001c48 l       .debug_str	00000000 
00001c51 l       .debug_str	00000000 
00001c61 l       .debug_str	00000000 
00001c69 l       .debug_str	00000000 
00001cbe l       .debug_str	00000000 
00001d1b l       .debug_str	00000000 
00001d27 l       .debug_str	00000000 
00001d30 l       .debug_str	00000000 
00001d3c l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00001d51 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00001d59 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001d61 l       .debug_str	00000000 
00001d8f l       .debug_str	00000000 
00001d76 l       .debug_str	00000000 
00001d96 l       .debug_str	00000000 
00001d9d l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f4a6 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00059eeb l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
000602e1 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001daf l       .debug_str	00000000 
0004f58e l       .debug_str	00000000 
00001dc6 l       .debug_str	00000000 
00001dce l       .debug_str	00000000 
00001dd7 l       .debug_str	00000000 
000031db l       .debug_str	00000000 
00001de0 l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
0005ff94 l       .debug_str	00000000 
00001de8 l       .debug_str	00000000 
00001df4 l       .debug_str	00000000 
00001dff l       .debug_str	00000000 
00001e07 l       .debug_str	00000000 
0000b1d7 l       .debug_str	00000000 
0000b702 l       .debug_str	00000000 
00001e0f l       .debug_str	00000000 
00001f0b l       .debug_str	00000000 
0000200f l       .debug_str	00000000 
0000201d l       .debug_str	00000000 
00002028 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00002055 l       .debug_str	00000000 
00002032 l       .debug_str	00000000 
00002060 l       .debug_str	00000000 
000020db l       .debug_str	00000000 
0000215e l       .debug_str	00000000 
0000216c l       .debug_str	00000000 
000021cb l       .debug_str	00000000 
00002232 l       .debug_str	00000000 
00002248 l       .debug_str	00000000 
00002258 l       .debug_str	00000000 
0005e7ca l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00002267 l       .debug_str	00000000 
00024c0d l       .debug_str	00000000 
0000226d l       .debug_str	00000000 
00002273 l       .debug_str	00000000 
00002279 l       .debug_str	00000000 
00002285 l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
0000228d l       .debug_str	00000000 
00002295 l       .debug_str	00000000 
0000229b l       .debug_str	00000000 
000022e1 l       .debug_str	00000000 
000022be l       .debug_str	00000000 
000022f1 l       .debug_str	00000000 
00002331 l       .debug_str	00000000 
0005e357 l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
0000237f l       .debug_str	00000000 
00002385 l       .debug_str	00000000 
000023ae l       .debug_str	00000000 
0000238b l       .debug_str	00000000 
000023c0 l       .debug_str	00000000 
00002402 l       .debug_str	00000000 
0005e240 l       .debug_str	00000000 
0000244c l       .debug_str	00000000 
00002452 l       .debug_str	00000000 
00002458 l       .debug_str	00000000 
00002481 l       .debug_str	00000000 
0000245e l       .debug_str	00000000 
00002493 l       .debug_str	00000000 
000024d5 l       .debug_str	00000000 
0005d704 l       .debug_str	00000000 
0000251f l       .debug_str	00000000 
00002525 l       .debug_str	00000000 
0000252b l       .debug_str	00000000 
00002531 l       .debug_str	00000000 
0000255a l       .debug_str	00000000 
00002537 l       .debug_str	00000000 
0000256b l       .debug_str	00000000 
000025ac l       .debug_str	00000000 
000025f5 l       .debug_str	00000000 
000025fa l       .debug_str	00000000 
0005e58e l       .debug_str	00000000 
000025ff l       .debug_str	00000000 
00002605 l       .debug_str	00000000 
0000260b l       .debug_str	00000000 
00002634 l       .debug_str	00000000 
00002611 l       .debug_str	00000000 
00002645 l       .debug_str	00000000 
00002686 l       .debug_str	00000000 
0005d7bc l       .debug_str	00000000 
000026cf l       .debug_str	00000000 
000026fb l       .debug_str	00000000 
000026d8 l       .debug_str	00000000 
0000270c l       .debug_str	00000000 
0000274d l       .debug_str	00000000 
00002796 l       .debug_str	00000000 
0005e762 l       .debug_str	00000000 
0000279b l       .debug_str	00000000 
000027a4 l       .debug_str	00000000 
000027ab l       .debug_str	00000000 
000027d6 l       .debug_str	00000000 
000027b3 l       .debug_str	00000000 
000027e8 l       .debug_str	00000000 
0000282a l       .debug_str	00000000 
0005e42a l       .debug_str	00000000 
00002874 l       .debug_str	00000000 
0000287a l       .debug_str	00000000 
00002880 l       .debug_str	00000000 
00002886 l       .debug_str	00000000 
0000288c l       .debug_str	00000000 
00002894 l       .debug_str	00000000 
000028a2 l       .debug_str	00000000 
000028b1 l       .debug_str	00000000 
000028c2 l       .debug_str	00000000 
000028cd l       .debug_str	00000000 
000028d8 l       .debug_str	00000000 
000028e3 l       .debug_str	00000000 
000028ea l       .debug_str	00000000 
00002930 l       .debug_str	00000000 
0000290d l       .debug_str	00000000 
00002942 l       .debug_str	00000000 
00002984 l       .debug_str	00000000 
0005d8bf l       .debug_str	00000000 
000029ce l       .debug_str	00000000 
000029fb l       .debug_str	00000000 
000029d8 l       .debug_str	00000000 
00002a0d l       .debug_str	00000000 
00002a4f l       .debug_str	00000000 
00002a99 l       .debug_str	00000000 
00002a9e l       .debug_str	00000000 
00002acb l       .debug_str	00000000 
00002aa8 l       .debug_str	00000000 
00002add l       .debug_str	00000000 
00002b1f l       .debug_str	00000000 
00002b69 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00002be8 l       .debug_str	00000000 
00002b7d l       .debug_str	00000000 
00002b8d l       .debug_str	00000000 
00002b96 l       .debug_str	00000000 
00002ba1 l       .debug_str	00000000 
00002bb0 l       .debug_str	00000000 
00002bc5 l       .debug_str	00000000 
00002bf6 l       .debug_str	00000000 
00002c93 l       .debug_str	00000000 
00002d38 l       .debug_str	00000000 
00002d43 l       .debug_str	00000000 
00002d4c l       .debug_str	00000000 
00002d90 l       .debug_str	00000000 
00002d6d l       .debug_str	00000000 
00002da3 l       .debug_str	00000000 
00002e26 l       .debug_str	00000000 
00002eb1 l       .debug_str	00000000 
00002ecd l       .debug_str	00000000 
00002f19 l       .debug_str	00000000 
00002f6d l       .debug_str	00000000 
00002f8a l       .debug_str	00000000 
00002f9e l       .debug_str	00000000 
00002fea l       .debug_str	00000000 
0000303e l       .debug_str	00000000 
00003054 l       .debug_str	00000000 
00003068 l       .debug_str	00000000 
000030af l       .debug_str	00000000 
000030fe l       .debug_str	00000000 
0000312a l       .debug_str	00000000 
00003107 l       .debug_str	00000000 
0000313e l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000314d l       .debug_str	00000000 
00003dc6 l       .debug_str	00000000 
00003155 l       .debug_str	00000000 
0000315d l       .debug_str	00000000 
00033f10 l       .debug_str	00000000 
0000316c l       .debug_str	00000000 
00003df8 l       .debug_str	00000000 
00003177 l       .debug_str	00000000 
00003182 l       .debug_str	00000000 
00003193 l       .debug_str	00000000 
00003199 l       .debug_str	00000000 
000031a1 l       .debug_str	00000000 
000031a8 l       .debug_str	00000000 
000031b2 l       .debug_str	00000000 
000031ba l       .debug_str	00000000 
000031c2 l       .debug_str	00000000 
000031e4 l       .debug_str	00000000 
000031ef l       .debug_str	00000000 
000031fb l       .debug_str	00000000 
00003203 l       .debug_str	00000000 
0000320c l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
00003217 l       .debug_str	00000000 
00003222 l       .debug_str	00000000 
0000322d l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
0005d830 l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
0000323d l       .debug_str	00000000 
0000324d l       .debug_str	00000000 
0000325c l       .debug_str	00000000 
00003264 l       .debug_str	00000000 
0000326b l       .debug_str	00000000 
00003273 l       .debug_str	00000000 
000032b4 l       .debug_str	00000000 
00003291 l       .debug_str	00000000 
000032c4 l       .debug_str	00000000 
000032d9 l       .debug_str	00000000 
000032e2 l       .debug_str	00000000 
0000333f l       .debug_str	00000000 
000033a4 l       .debug_str	00000000 
000033ae l       .debug_str	00000000 
000033be l       .debug_str	00000000 
000033d3 l       .debug_str	00000000 
000033db l       .debug_str	00000000 
0000343f l       .debug_str	00000000 
000034ab l       .debug_str	00000000 
000034b2 l       .debug_str	00000000 
000034ba l       .debug_str	00000000 
000034fb l       .debug_str	00000000 
000034d8 l       .debug_str	00000000 
0000350b l       .debug_str	00000000 
00003520 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00003548 l       .debug_str	00000000 
0000354f l       .debug_str	00000000 
00003564 l       .debug_str	00000000 
0000358e l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00003605 l       .debug_str	00000000 
00003644 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2vuqh37eag1b6y30
00003b45 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005cfe1 l       .debug_str	00000000 
000612d4 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00003d16 l       .debug_str	00000000 
000229c9 l       .debug_str	00000000 
00003aba l       .debug_str	00000000 
00003b1d l       .debug_str	00000000 
00003bc3 l       .debug_str	00000000 
00003c53 l       .debug_str	00000000 
00003c69 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00003cf0 l       .debug_str	00000000 
00003cff l       .debug_str	00000000 
0005a699 l       .debug_str	00000000 
00003d21 l       .debug_str	00000000 
00016202 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00012626 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00003979 l       .debug_str	00000000 
00003a03 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0005ab3e l       .debug_str	00000000 
00003a1b l       .debug_str	00000000 
00003ab0 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f4c5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3l5pa7f4r4pjxp5p
000049f0 l       .debug_str	00000000 
00004a1d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00004a3c l       .debug_str	00000000 
00004a70 l       .debug_str	00000000 
00004a57 l       .debug_str	00000000 
00004a78 l       .debug_str	00000000 
00004a8e l       .debug_str	00000000 
00004af6 l       .debug_str	00000000 
00004b6e l       .debug_str	00000000 
00004b9b l       .debug_str	00000000 
00004bb3 l       .debug_str	00000000 
00004c1d l       .debug_str	00000000 
00004c25 l       .debug_str	00000000 
00004c2b l       .debug_str	00000000 
00004c35 l       .debug_str	00000000 
00004caf l       .debug_str	00000000 
00004d1b l       .debug_str	00000000 
00004d94 l       .debug_str	00000000 
00004e0d l       .debug_str	00000000 
00004e78 l       .debug_str	00000000 
00004ee7 l       .debug_str	00000000 
00004eee l       .debug_str	00000000 
00004ef9 l       .debug_str	00000000 
00004f21 l       .debug_str	00000000 
00004f96 l       .debug_str	00000000 
00005013 l       .debug_str	00000000 
00004f12 l       .debug_str	00000000 
0000501f l       .debug_str	00000000 
00001daf l       .debug_str	00000000 
00005096 l       .debug_str	00000000 
00001d9d l       .debug_str	00000000 
0004f58e l       .debug_str	00000000 
00001dc6 l       .debug_str	00000000 
00001dce l       .debug_str	00000000 
00001dd7 l       .debug_str	00000000 
000031db l       .debug_str	00000000 
000050ff l       .debug_str	00000000 
0000517d l       .debug_str	00000000 
000051ed l       .debug_str	00000000 
00005267 l       .debug_str	00000000 
00005281 l       .debug_str	00000000 
000052ed l       .debug_str	00000000 
000052f6 l       .debug_str	00000000 
00005302 l       .debug_str	00000000 
00005378 l       .debug_str	00000000 
000053ee l       .debug_str	00000000 
00005464 l       .debug_str	00000000 
000054cc l       .debug_str	00000000 
00000968 l       .debug_str	00000000 
0000553b l       .debug_str	00000000 
00000a4f l       .debug_str	00000000 
000055a8 l       .debug_str	00000000 
0000561d l       .debug_str	00000000 
00005632 l       .debug_str	00000000 
00005699 l       .debug_str	00000000 
000056a2 l       .debug_str	00000000 
000056ad l       .debug_str	00000000 
000056b4 l       .debug_str	00000000 
0005bb9b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
0003e5ff l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
000056e9 l       .debug_str	00000000 
0005b5d4 l       .debug_str	00000000 
00001222 l       .debug_str	00000000 
00005723 l       .debug_str	00000000 
0005b47b l       .debug_str	00000000 
00060912 l       .debug_str	00000000 
00005756 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
00005763 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00060e9e l       .debug_str	00000000 
0000152e l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
0002219c l       .debug_str	00000000 
00015a9f l       .debug_str	00000000 
00001536 l       .debug_str	00000000 
000017dc l       .debug_str	00000000 
000017d3 l       .debug_str	00000000 
00005784 l       .debug_str	00000000 
00005789 l       .debug_str	00000000 
0000578e l       .debug_str	00000000 
00005793 l       .debug_str	00000000 
00005798 l       .debug_str	00000000 
0000579d l       .debug_str	00000000 
000057a8 l       .debug_str	00000000 
000057b3 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000425e9 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00003d2b l       .debug_str	00000000 
00013625 l       .debug_str	00000000 
00003d9f l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
0000314d l       .debug_str	00000000 
00003dc6 l       .debug_str	00000000 
00003dab l       .debug_str	00000000 
00003dd1 l       .debug_str	00000000 
0000315d l       .debug_str	00000000 
00033f10 l       .debug_str	00000000 
0000316c l       .debug_str	00000000 
00003df8 l       .debug_str	00000000 
00003ddd l       .debug_str	00000000 
00003e04 l       .debug_str	00000000 
00003e0f l       .debug_str	00000000 
00003e1a l       .debug_str	00000000 
0001c3c0 l       .debug_str	00000000 
00003ed4 l       .debug_str	00000000 
00003e2b l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00003eb2 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00003eb9 l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00003ee8 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00003f45 l       .debug_str	00000000 
00003faa l       .debug_str	00000000 
00003fb2 l       .debug_str	00000000 
00003fd4 l       .debug_str	00000000 
00003fbb l       .debug_str	00000000 
00003fec l       .debug_str	00000000 
00004012 l       .debug_str	00000000 
0000408a l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
0005d830 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
00004101 l       .debug_str	00000000 
0000416a l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000011c0 l       .debug_str	00000000 
000011e7 l       .debug_str	00000000 
000041e2 l       .debug_str	00000000 
00000f07 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f4a6 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00059eeb l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
000602e1 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001106 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
00001218 l       .debug_str	00000000 
0000424c l       .debug_str	00000000 
000042c5 l       .debug_str	00000000 
00060910 l       .debug_str	00000000 
000011ff l       .debug_str	00000000 
000042ca l       .debug_str	00000000 
00000aa4 l       .debug_str	00000000 
000042f0 l       .debug_str	00000000 
000042d7 l       .debug_str	00000000 
000042d2 l       .debug_str	00000000 
000042fb l       .debug_str	00000000 
00004314 l       .debug_str	00000000 
0000437f l       .debug_str	00000000 
00000896 l       .debug_str	00000000 
00000ad4 l       .debug_str	00000000 
000043ef l       .debug_str	00000000 
000043ff l       .debug_str	00000000 
00004477 l       .debug_str	00000000 
0005b12b l       .debug_str	00000000 
0005ae85 l       .debug_str	00000000 
00004481 l       .debug_str	00000000 
00004488 l       .debug_str	00000000 
000044ab l       .debug_str	00000000 
00004492 l       .debug_str	00000000 
0000448d l       .debug_str	00000000 
000044b5 l       .debug_str	00000000 
000044cd l       .debug_str	00000000 
00004537 l       .debug_str	00000000 
00001a4b l       .debug_str	00000000 
00001a57 l       .debug_str	00000000 
00001a5f l       .debug_str	00000000 
00001ab9 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00001b6d l       .debug_str	00000000 
00001bbc l       .debug_str	00000000 
00001bc6 l       .debug_str	00000000 
00001c03 l       .debug_str	00000000 
00001c48 l       .debug_str	00000000 
00001c51 l       .debug_str	00000000 
00001c61 l       .debug_str	00000000 
00001c69 l       .debug_str	00000000 
00001cbe l       .debug_str	00000000 
00001d1b l       .debug_str	00000000 
00001d27 l       .debug_str	00000000 
00001d30 l       .debug_str	00000000 
00001d3c l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00001d51 l       .debug_str	00000000 
00001d59 l       .debug_str	00000000 
00001d8f l       .debug_str	00000000 
00001d76 l       .debug_str	00000000 
00001d61 l       .debug_str	00000000 
000045ac l       .debug_str	00000000 
00004613 l       .debug_str	00000000 
0000468e l       .debug_str	00000000 
0000469e l       .debug_str	00000000 
000046a7 l       .debug_str	00000000 
000046b5 l       .debug_str	00000000 
000046c3 l       .debug_str	00000000 
000046cf l       .debug_str	00000000 
000048dd l       .debug_str	00000000 
000046db l       .debug_str	00000000 
000046ea l       .debug_str	00000000 
000046f2 l       .debug_str	00000000 
0000470b l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
0000471c l       .debug_str	00000000 
00004724 l       .debug_str	00000000 
00004757 l       .debug_str	00000000 
0000473e l       .debug_str	00000000 
00004763 l       .debug_str	00000000 
00001d54 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00004795 l       .debug_str	00000000 
0000477c l       .debug_str	00000000 
000047a0 l       .debug_str	00000000 
000047c2 l       .debug_str	00000000 
000047a9 l       .debug_str	00000000 
000047cf l       .debug_str	00000000 
000047ea l       .debug_str	00000000 
00004857 l       .debug_str	00000000 
000048d4 l       .debug_str	00000000 
000048dc l       .debug_str	00000000 
00004b8c l       .debug_str	00000000 
00004b73 l       .debug_str	00000000 
000048e6 l       .debug_str	00000000 
00004903 l       .debug_str	00000000 
00004972 l       .debug_str	00000000 
000049e8 l       .debug_str	00000000 
000049f9 l       .debug_str	00000000 
00004a07 l       .debug_str	00000000 
00004a0e l       .debug_str	00000000 
00004a15 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 413mqmtb04w1hzsl
000077a3 l       .debug_str	00000000 
00009b75 l       .debug_str	00000000 
00009dbe l       .debug_str	00000000 
0000a024 l       .debug_str	00000000 
00030db2 l       .debug_str	00000000 
0002190a l       .debug_str	00000000 
0000a289 l       .debug_str	00000000 
0000a2b9 l       .debug_str	00000000 
0000a517 l       .debug_str	00000000 
0000136d l       .debug_str	00000000 
0000a547 l       .debug_str	00000000 
0000a551 l       .debug_str	00000000 
0000a5aa l       .debug_str	00000000 
000013a1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000a54c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000057b8 l       .debug_str	00000000 
000057e8 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0006012c l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
0005a727 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c24a l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035924 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac2d l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000590a l       .debug_str	00000000 
00005958 l       .debug_str	00000000 
000059c3 l       .debug_str	00000000 
0005f664 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
0005ab3e l       .debug_str	00000000 
00030d3e l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00021b5e l       .debug_str	00000000 
00005a2d l       .debug_str	00000000 
00005a5d l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00005ac0 l       .debug_str	00000000 
00005b05 l       .debug_str	00000000 
00005b73 l       .debug_str	00000000 
00005c0a l       .debug_str	00000000 
00005cca l       .debug_str	00000000 
00005db3 l       .debug_str	00000000 
00005ec5 l       .debug_str	00000000 
00006000 l       .debug_str	00000000 
00006164 l       .debug_str	00000000 
000062f1 l       .debug_str	00000000 
000064a7 l       .debug_str	00000000 
00006686 l       .debug_str	00000000 
0000688e l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
00006bc3 l       .debug_str	00000000 
00006c3a l       .debug_str	00000000 
00006cbe l       .debug_str	00000000 
00006d39 l       .debug_str	00000000 
00006dd7 l       .debug_str	00000000 
00006e82 l       .debug_str	00000000 
00006f24 l       .debug_str	00000000 
00006fe9 l       .debug_str	00000000 
000070bb l       .debug_str	00000000 
00007184 l       .debug_str	00000000 
00007270 l       .debug_str	00000000 
00007369 l       .debug_str	00000000 
00007459 l       .debug_str	00000000 
0000756c l       .debug_str	00000000 
0000768c l       .debug_str	00000000 
000078dd l       .debug_str	00000000 
00007a24 l       .debug_str	00000000 
00007b62 l       .debug_str	00000000 
00007cc3 l       .debug_str	00000000 
00007e31 l       .debug_str	00000000 
00007f96 l       .debug_str	00000000 
0000811e l       .debug_str	00000000 
000082b3 l       .debug_str	00000000 
0000843f l       .debug_str	00000000 
000085ee l       .debug_str	00000000 
000087aa l       .debug_str	00000000 
0000895d l       .debug_str	00000000 
00008b33 l       .debug_str	00000000 
00008d16 l       .debug_str	00000000 
00008ef0 l       .debug_str	00000000 
000090ed l       .debug_str	00000000 
000092f7 l       .debug_str	00000000 
000094f8 l       .debug_str	00000000 
0000971c l       .debug_str	00000000 
0000994d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n7qec2sa6vjglqv
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a826 l       .debug_str	00000000 
0005a727 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f32a l       .debug_str	00000000 
0005a79d l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4a7 l       .debug_str	00000000 
0001f49b l       .debug_str	00000000 
0005a66a l       .debug_str	00000000 
0005ae34 l       .debug_str	00000000 
0000ac06 l       .debug_str	00000000 
000611df l       .debug_str	00000000 
0000ac10 l       .debug_str	00000000 
0000ac19 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0004ea10 l       .debug_str	00000000 
000399b5 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000a7fe l       .debug_str	00000000 
0000b122 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
0000a835 l       .debug_str	00000000 
0000a888 l       .debug_str	00000000 
000229c9 l       .debug_str	00000000 
0000a89c l       .debug_str	00000000 
0000a8e2 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
0000a8f0 l       .debug_str	00000000 
0000a937 l       .debug_str	00000000 
0000a940 l       .debug_str	00000000 
0000a989 l       .debug_str	00000000 
0000579d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
00003d21 l       .debug_str	00000000 
0000a995 l       .debug_str	00000000 
0000aa11 l       .debug_str	00000000 
000612d4 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00003cf0 l       .debug_str	00000000 
0000aa3b l       .debug_str	00000000 
0000aab7 l       .debug_str	00000000 
0000aae6 l       .debug_str	00000000 
0000ab6c l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0003576a l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013615 l       .debug_str	00000000 
0000ab94 l       .debug_str	00000000 
0000abf6 l       .debug_str	00000000 
0005c24a l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005f664 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0002219c l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
000160dd l       .debug_str	00000000 
000017ea l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
0000abfe l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000394cb l       .debug_str	00000000 
0005cbb4 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4oqy1cznfkuv6rc
0005cff6 l       .debug_str	00000000 
0000ae2c l       .debug_str	00000000 
00059bac l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0005a79d l       .debug_str	00000000 
0005f664 l       .debug_str	00000000 
00061624 l       .debug_str	00000000 
00061623 l       .debug_str	00000000 
00060e9e l       .debug_str	00000000 
0000152e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002219c l       .debug_str	00000000 
00015a9f l       .debug_str	00000000 
00001536 l       .debug_str	00000000 
000017dc l       .debug_str	00000000 
000017d3 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00024c0d l       .debug_str	00000000 
00024c12 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000ac20 l       .debug_str	00000000 
00059acf l       .debug_str	00000000 
0000ac24 l       .debug_str	00000000 
0000ac55 l       .debug_str	00000000 
0000ac5b l       .debug_str	00000000 
0000ac9c l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0000acb1 l       .debug_str	00000000 
0000ace8 l       .debug_str	00000000 
0000acf3 l       .debug_str	00000000 
0006012c l       .debug_str	00000000 
0000ad25 l       .debug_str	00000000 
00059c13 l       .debug_str	00000000 
0000ad59 l       .debug_str	00000000 
00059c02 l       .debug_str	00000000 
0000ad8d l       .debug_str	00000000 
00059bba l       .debug_str	00000000 
0000adc4 l       .debug_str	00000000 
00059c4c l       .debug_str	00000000 
0000adfc l       .debug_str	00000000 
00059a7d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4qlpitlm4hs8kdcv
00003df8 l       .debug_str	00000000 
0000b173 l       .debug_str	00000000 
0000b19a l       .debug_str	00000000 
0000b1a5 l       .debug_str	00000000 
0000b1cc l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000b1d7 l       .debug_str	00000000 
0000b1d6 l       .debug_str	00000000 
0001f35a l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0005abbb l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005f664 l       .debug_str	00000000 
00002389 l       .debug_str	00000000 
0005c24a l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0000579d l       .debug_str	00000000 
0005db0b l       .debug_str	00000000 
0005ae15 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000ae5d l       .debug_str	00000000 
0000ae86 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
0005a727 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
0000ae93 l       .debug_str	00000000 
0000aea5 l       .debug_str	00000000 
0000aeb6 l       .debug_str	00000000 
0000af02 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
0000af0e l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005abd8 l       .debug_str	00000000 
00003587 l       .debug_str	00000000 
00001a42 l       .debug_str	00000000 
00001d90 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000425e9 l       .debug_str	00000000 
00001a4b l       .debug_str	00000000 
00001a57 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00001a5f l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001ab9 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00001b6d l       .debug_str	00000000 
00001bbc l       .debug_str	00000000 
00001bc6 l       .debug_str	00000000 
00001c03 l       .debug_str	00000000 
00001c48 l       .debug_str	00000000 
00001c51 l       .debug_str	00000000 
00001c61 l       .debug_str	00000000 
00001c69 l       .debug_str	00000000 
00001cbe l       .debug_str	00000000 
00001d1b l       .debug_str	00000000 
00001d27 l       .debug_str	00000000 
00001d30 l       .debug_str	00000000 
00001d3c l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00001d51 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00001d59 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001d61 l       .debug_str	00000000 
00001d8f l       .debug_str	00000000 
00001d76 l       .debug_str	00000000 
00001d96 l       .debug_str	00000000 
00001d9d l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f4a6 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00059eeb l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
000602e1 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001daf l       .debug_str	00000000 
0004f58e l       .debug_str	00000000 
00001dc6 l       .debug_str	00000000 
00001dce l       .debug_str	00000000 
00001dd7 l       .debug_str	00000000 
000031db l       .debug_str	00000000 
00001de0 l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
0005ff94 l       .debug_str	00000000 
00001de8 l       .debug_str	00000000 
00001df4 l       .debug_str	00000000 
00001dff l       .debug_str	00000000 
00001e07 l       .debug_str	00000000 
0000af12 l       .debug_str	00000000 
0000b702 l       .debug_str	00000000 
00001e0f l       .debug_str	00000000 
00001f0b l       .debug_str	00000000 
0000200f l       .debug_str	00000000 
0000201d l       .debug_str	00000000 
00002028 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00002055 l       .debug_str	00000000 
00002032 l       .debug_str	00000000 
00002060 l       .debug_str	00000000 
000020db l       .debug_str	00000000 
0000215e l       .debug_str	00000000 
0000216c l       .debug_str	00000000 
000021cb l       .debug_str	00000000 
00002232 l       .debug_str	00000000 
00002248 l       .debug_str	00000000 
00002258 l       .debug_str	00000000 
0005e7ca l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00002267 l       .debug_str	00000000 
00024c0d l       .debug_str	00000000 
0000226d l       .debug_str	00000000 
00002273 l       .debug_str	00000000 
00002279 l       .debug_str	00000000 
00002285 l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
0000228d l       .debug_str	00000000 
00002295 l       .debug_str	00000000 
0000229b l       .debug_str	00000000 
000022e1 l       .debug_str	00000000 
000022be l       .debug_str	00000000 
000022f1 l       .debug_str	00000000 
00002331 l       .debug_str	00000000 
0005e357 l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
0000237f l       .debug_str	00000000 
00002385 l       .debug_str	00000000 
000023ae l       .debug_str	00000000 
0000238b l       .debug_str	00000000 
000023c0 l       .debug_str	00000000 
00002402 l       .debug_str	00000000 
0005e240 l       .debug_str	00000000 
0000244c l       .debug_str	00000000 
00002452 l       .debug_str	00000000 
00002458 l       .debug_str	00000000 
00002481 l       .debug_str	00000000 
0000245e l       .debug_str	00000000 
00002493 l       .debug_str	00000000 
000024d5 l       .debug_str	00000000 
0005d704 l       .debug_str	00000000 
0000251f l       .debug_str	00000000 
00002525 l       .debug_str	00000000 
0000252b l       .debug_str	00000000 
00002531 l       .debug_str	00000000 
0000255a l       .debug_str	00000000 
00002537 l       .debug_str	00000000 
0000256b l       .debug_str	00000000 
000025ac l       .debug_str	00000000 
000025f5 l       .debug_str	00000000 
000025fa l       .debug_str	00000000 
0005e58e l       .debug_str	00000000 
000025ff l       .debug_str	00000000 
00002605 l       .debug_str	00000000 
0000260b l       .debug_str	00000000 
00002634 l       .debug_str	00000000 
00002611 l       .debug_str	00000000 
00002645 l       .debug_str	00000000 
00002686 l       .debug_str	00000000 
0005d7bc l       .debug_str	00000000 
000026cf l       .debug_str	00000000 
000026fb l       .debug_str	00000000 
000026d8 l       .debug_str	00000000 
0000270c l       .debug_str	00000000 
0000274d l       .debug_str	00000000 
00002796 l       .debug_str	00000000 
0005e762 l       .debug_str	00000000 
0000279b l       .debug_str	00000000 
000027a4 l       .debug_str	00000000 
000027ab l       .debug_str	00000000 
000027d6 l       .debug_str	00000000 
000027b3 l       .debug_str	00000000 
000027e8 l       .debug_str	00000000 
0000282a l       .debug_str	00000000 
0005e42a l       .debug_str	00000000 
00002874 l       .debug_str	00000000 
0000287a l       .debug_str	00000000 
00002880 l       .debug_str	00000000 
00002886 l       .debug_str	00000000 
0000288c l       .debug_str	00000000 
00002894 l       .debug_str	00000000 
000028a2 l       .debug_str	00000000 
000028b1 l       .debug_str	00000000 
000028c2 l       .debug_str	00000000 
000028cd l       .debug_str	00000000 
000028d8 l       .debug_str	00000000 
000028e3 l       .debug_str	00000000 
000028ea l       .debug_str	00000000 
00002930 l       .debug_str	00000000 
0000290d l       .debug_str	00000000 
00002942 l       .debug_str	00000000 
00002984 l       .debug_str	00000000 
0005d8bf l       .debug_str	00000000 
000029ce l       .debug_str	00000000 
000029fb l       .debug_str	00000000 
000029d8 l       .debug_str	00000000 
00002a0d l       .debug_str	00000000 
00002a4f l       .debug_str	00000000 
00002a99 l       .debug_str	00000000 
00002a9e l       .debug_str	00000000 
00002acb l       .debug_str	00000000 
00002aa8 l       .debug_str	00000000 
00002add l       .debug_str	00000000 
00002b1f l       .debug_str	00000000 
00002b69 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00002be8 l       .debug_str	00000000 
00002b7d l       .debug_str	00000000 
00002b8d l       .debug_str	00000000 
00002b96 l       .debug_str	00000000 
00002ba1 l       .debug_str	00000000 
00002bb0 l       .debug_str	00000000 
00002bc5 l       .debug_str	00000000 
00002bf6 l       .debug_str	00000000 
00002c93 l       .debug_str	00000000 
00002d38 l       .debug_str	00000000 
00002d43 l       .debug_str	00000000 
00002d4c l       .debug_str	00000000 
00002d90 l       .debug_str	00000000 
00002d6d l       .debug_str	00000000 
00002da3 l       .debug_str	00000000 
00002e26 l       .debug_str	00000000 
00002eb1 l       .debug_str	00000000 
00002ecd l       .debug_str	00000000 
00002f19 l       .debug_str	00000000 
00002f6d l       .debug_str	00000000 
00002f8a l       .debug_str	00000000 
00002f9e l       .debug_str	00000000 
00002fea l       .debug_str	00000000 
0000303e l       .debug_str	00000000 
00003054 l       .debug_str	00000000 
00003068 l       .debug_str	00000000 
000030af l       .debug_str	00000000 
000030fe l       .debug_str	00000000 
0000312a l       .debug_str	00000000 
00003107 l       .debug_str	00000000 
00003138 l       .debug_str	00000000 
0000313e l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000314d l       .debug_str	00000000 
00003dc6 l       .debug_str	00000000 
00003155 l       .debug_str	00000000 
0000315d l       .debug_str	00000000 
00033f10 l       .debug_str	00000000 
0000316c l       .debug_str	00000000 
00003177 l       .debug_str	00000000 
00003182 l       .debug_str	00000000 
00003193 l       .debug_str	00000000 
00003199 l       .debug_str	00000000 
000031a1 l       .debug_str	00000000 
000031a8 l       .debug_str	00000000 
000031b2 l       .debug_str	00000000 
000031ba l       .debug_str	00000000 
000031c2 l       .debug_str	00000000 
000031e4 l       .debug_str	00000000 
000031ef l       .debug_str	00000000 
000031fb l       .debug_str	00000000 
00003203 l       .debug_str	00000000 
0000320c l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
00003217 l       .debug_str	00000000 
00003222 l       .debug_str	00000000 
0000322d l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
0005d830 l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
0000323d l       .debug_str	00000000 
0000324d l       .debug_str	00000000 
0000325c l       .debug_str	00000000 
00003264 l       .debug_str	00000000 
0000326b l       .debug_str	00000000 
00003273 l       .debug_str	00000000 
000032b4 l       .debug_str	00000000 
00003291 l       .debug_str	00000000 
000032c4 l       .debug_str	00000000 
000032d9 l       .debug_str	00000000 
000032e2 l       .debug_str	00000000 
0000333f l       .debug_str	00000000 
000033a4 l       .debug_str	00000000 
000033ae l       .debug_str	00000000 
000033be l       .debug_str	00000000 
000033d3 l       .debug_str	00000000 
000033db l       .debug_str	00000000 
0000343f l       .debug_str	00000000 
000034ab l       .debug_str	00000000 
000034b2 l       .debug_str	00000000 
000034ba l       .debug_str	00000000 
000034fb l       .debug_str	00000000 
000034d8 l       .debug_str	00000000 
0000350b l       .debug_str	00000000 
00003520 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00003548 l       .debug_str	00000000 
0000354f l       .debug_str	00000000 
00003564 l       .debug_str	00000000 
0005ab3e l       .debug_str	00000000 
0005ac2d l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0005a938 l       .debug_str	00000000 
0000af1f l       .debug_str	00000000 
0000afd7 l       .debug_str	00000000 
0001c3c0 l       .debug_str	00000000 
0000b03b l       .debug_str	00000000 
0000b071 l       .debug_str	00000000 
0000b08a l       .debug_str	00000000 
0000b0c4 l       .debug_str	00000000 
0000b0e1 l       .debug_str	00000000 
0000b11c l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
0000b139 l       .debug_str	00000000 
0000b143 l       .debug_str	00000000 
0000b169 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4z8krxbvbr97ayck
0005f664 l       .debug_str	00000000 
0000b29d l       .debug_str	00000000 
0000b2d9 l       .debug_str	00000000 
0000168b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000b253 l       .debug_str	00000000 
0000b294 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
0002219c l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 54b6z89c74d8bdz1
00003155 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005a79d l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0005ae34 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
0001167f l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
0000b6ea l       .debug_str	00000000 
0000b6f3 l       .debug_str	00000000 
0001f35a l       .debug_str	00000000 
0000b786 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
0000b796 l       .debug_str	00000000 
0000b1d6 l       .debug_str	00000000 
0000b7a1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000a54c l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea10 l       .debug_str	00000000 
000399b5 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f32a l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
0000b318 l       .debug_str	00000000 
0000b360 l       .debug_str	00000000 
0000ac06 l       .debug_str	00000000 
0003e5ff l       .debug_str	00000000 
0000b37f l       .debug_str	00000000 
0000b3ba l       .debug_str	00000000 
0000b3df l       .debug_str	00000000 
0000b406 l       .debug_str	00000000 
0000b466 l       .debug_str	00000000 
0000b46f l       .debug_str	00000000 
0000b4da l       .debug_str	00000000 
0000b4ea l       .debug_str	00000000 
0000b556 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005abd8 l       .debug_str	00000000 
00003587 l       .debug_str	00000000 
00001a42 l       .debug_str	00000000 
00001d90 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000425e9 l       .debug_str	00000000 
00001a4b l       .debug_str	00000000 
00001a57 l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00001a5f l       .debug_str	00000000 
00001ab9 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00001b6d l       .debug_str	00000000 
00001bbc l       .debug_str	00000000 
00001bc6 l       .debug_str	00000000 
00001c03 l       .debug_str	00000000 
00001c48 l       .debug_str	00000000 
00001c51 l       .debug_str	00000000 
00001c61 l       .debug_str	00000000 
00001c69 l       .debug_str	00000000 
00001cbe l       .debug_str	00000000 
00001d1b l       .debug_str	00000000 
00001d27 l       .debug_str	00000000 
00001d30 l       .debug_str	00000000 
00001d3c l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00001d51 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00001d59 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001d61 l       .debug_str	00000000 
00001d8f l       .debug_str	00000000 
00001d76 l       .debug_str	00000000 
00001d96 l       .debug_str	00000000 
00001d9d l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f4a6 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00059eeb l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
000602e1 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001daf l       .debug_str	00000000 
0004f58e l       .debug_str	00000000 
00001dc6 l       .debug_str	00000000 
00001dce l       .debug_str	00000000 
00001dd7 l       .debug_str	00000000 
000031db l       .debug_str	00000000 
00001de0 l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
0005ff94 l       .debug_str	00000000 
00001de8 l       .debug_str	00000000 
00001df4 l       .debug_str	00000000 
00001dff l       .debug_str	00000000 
00001e07 l       .debug_str	00000000 
0000b702 l       .debug_str	00000000 
00001e0f l       .debug_str	00000000 
00001f0b l       .debug_str	00000000 
0000200f l       .debug_str	00000000 
0000201d l       .debug_str	00000000 
00002028 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00002055 l       .debug_str	00000000 
00002032 l       .debug_str	00000000 
00002060 l       .debug_str	00000000 
000020db l       .debug_str	00000000 
0000215e l       .debug_str	00000000 
0000216c l       .debug_str	00000000 
000021cb l       .debug_str	00000000 
00002232 l       .debug_str	00000000 
00002248 l       .debug_str	00000000 
00002258 l       .debug_str	00000000 
0005e7ca l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00002267 l       .debug_str	00000000 
00024c0d l       .debug_str	00000000 
0000226d l       .debug_str	00000000 
00002273 l       .debug_str	00000000 
00002279 l       .debug_str	00000000 
00002285 l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
0000228d l       .debug_str	00000000 
00002295 l       .debug_str	00000000 
0000229b l       .debug_str	00000000 
000022e1 l       .debug_str	00000000 
000022be l       .debug_str	00000000 
000022f1 l       .debug_str	00000000 
00002331 l       .debug_str	00000000 
0005e357 l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
0000237f l       .debug_str	00000000 
00002385 l       .debug_str	00000000 
000023ae l       .debug_str	00000000 
0000238b l       .debug_str	00000000 
000023c0 l       .debug_str	00000000 
00002402 l       .debug_str	00000000 
0005e240 l       .debug_str	00000000 
0000244c l       .debug_str	00000000 
00002452 l       .debug_str	00000000 
00002458 l       .debug_str	00000000 
00002481 l       .debug_str	00000000 
0000245e l       .debug_str	00000000 
00002493 l       .debug_str	00000000 
000024d5 l       .debug_str	00000000 
0005d704 l       .debug_str	00000000 
0000251f l       .debug_str	00000000 
00002525 l       .debug_str	00000000 
0000252b l       .debug_str	00000000 
00002531 l       .debug_str	00000000 
0000255a l       .debug_str	00000000 
00002537 l       .debug_str	00000000 
0000256b l       .debug_str	00000000 
000025ac l       .debug_str	00000000 
000025f5 l       .debug_str	00000000 
000025fa l       .debug_str	00000000 
0005e58e l       .debug_str	00000000 
000025ff l       .debug_str	00000000 
00002605 l       .debug_str	00000000 
0000260b l       .debug_str	00000000 
00002634 l       .debug_str	00000000 
00002611 l       .debug_str	00000000 
00002645 l       .debug_str	00000000 
00002686 l       .debug_str	00000000 
0005d7bc l       .debug_str	00000000 
000026cf l       .debug_str	00000000 
000026fb l       .debug_str	00000000 
000026d8 l       .debug_str	00000000 
0000270c l       .debug_str	00000000 
0000274d l       .debug_str	00000000 
00002796 l       .debug_str	00000000 
0005e762 l       .debug_str	00000000 
0000279b l       .debug_str	00000000 
000027a4 l       .debug_str	00000000 
000027ab l       .debug_str	00000000 
000027d6 l       .debug_str	00000000 
000027b3 l       .debug_str	00000000 
000027e8 l       .debug_str	00000000 
0000282a l       .debug_str	00000000 
0005e42a l       .debug_str	00000000 
00002874 l       .debug_str	00000000 
0000287a l       .debug_str	00000000 
00002880 l       .debug_str	00000000 
00002886 l       .debug_str	00000000 
0000288c l       .debug_str	00000000 
00002894 l       .debug_str	00000000 
000028a2 l       .debug_str	00000000 
000028b1 l       .debug_str	00000000 
000028c2 l       .debug_str	00000000 
000028cd l       .debug_str	00000000 
000028d8 l       .debug_str	00000000 
000028e3 l       .debug_str	00000000 
000028ea l       .debug_str	00000000 
00002930 l       .debug_str	00000000 
0000290d l       .debug_str	00000000 
00002942 l       .debug_str	00000000 
00002984 l       .debug_str	00000000 
0005d8bf l       .debug_str	00000000 
000029ce l       .debug_str	00000000 
000029fb l       .debug_str	00000000 
000029d8 l       .debug_str	00000000 
00002a0d l       .debug_str	00000000 
00002a4f l       .debug_str	00000000 
00002a99 l       .debug_str	00000000 
00002a9e l       .debug_str	00000000 
00002acb l       .debug_str	00000000 
00002aa8 l       .debug_str	00000000 
00002add l       .debug_str	00000000 
00002b1f l       .debug_str	00000000 
00002b69 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00002be8 l       .debug_str	00000000 
00002b7d l       .debug_str	00000000 
00002b8d l       .debug_str	00000000 
00002b96 l       .debug_str	00000000 
00002ba1 l       .debug_str	00000000 
00002bb0 l       .debug_str	00000000 
00002bc5 l       .debug_str	00000000 
00002bf6 l       .debug_str	00000000 
00002c93 l       .debug_str	00000000 
00002d38 l       .debug_str	00000000 
00002d43 l       .debug_str	00000000 
00002d4c l       .debug_str	00000000 
00002d90 l       .debug_str	00000000 
00002d6d l       .debug_str	00000000 
00002da3 l       .debug_str	00000000 
00002e26 l       .debug_str	00000000 
00002eb1 l       .debug_str	00000000 
00002ecd l       .debug_str	00000000 
00002f19 l       .debug_str	00000000 
00002f6d l       .debug_str	00000000 
00002f8a l       .debug_str	00000000 
00002f9e l       .debug_str	00000000 
00002fea l       .debug_str	00000000 
0000303e l       .debug_str	00000000 
00003054 l       .debug_str	00000000 
00003068 l       .debug_str	00000000 
000030af l       .debug_str	00000000 
000030fe l       .debug_str	00000000 
0000312a l       .debug_str	00000000 
00003107 l       .debug_str	00000000 
00003138 l       .debug_str	00000000 
0000313e l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000314d l       .debug_str	00000000 
00003dc6 l       .debug_str	00000000 
0000315d l       .debug_str	00000000 
00033f10 l       .debug_str	00000000 
0000316c l       .debug_str	00000000 
00003df8 l       .debug_str	00000000 
00003177 l       .debug_str	00000000 
00003182 l       .debug_str	00000000 
00003193 l       .debug_str	00000000 
00003199 l       .debug_str	00000000 
000031a1 l       .debug_str	00000000 
000031a8 l       .debug_str	00000000 
000031b2 l       .debug_str	00000000 
000031ba l       .debug_str	00000000 
000031c2 l       .debug_str	00000000 
000031e4 l       .debug_str	00000000 
000031ef l       .debug_str	00000000 
000031fb l       .debug_str	00000000 
00003203 l       .debug_str	00000000 
0000320c l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
00003217 l       .debug_str	00000000 
00003222 l       .debug_str	00000000 
0000322d l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
0005d830 l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
0000323d l       .debug_str	00000000 
0000324d l       .debug_str	00000000 
0000325c l       .debug_str	00000000 
00003264 l       .debug_str	00000000 
0000326b l       .debug_str	00000000 
00003273 l       .debug_str	00000000 
000032b4 l       .debug_str	00000000 
00003291 l       .debug_str	00000000 
000032c4 l       .debug_str	00000000 
000032d9 l       .debug_str	00000000 
000032e2 l       .debug_str	00000000 
0000333f l       .debug_str	00000000 
000033a4 l       .debug_str	00000000 
000033ae l       .debug_str	00000000 
000033be l       .debug_str	00000000 
000033d3 l       .debug_str	00000000 
000033db l       .debug_str	00000000 
0000343f l       .debug_str	00000000 
000034ab l       .debug_str	00000000 
000034b2 l       .debug_str	00000000 
000034ba l       .debug_str	00000000 
000034fb l       .debug_str	00000000 
000034d8 l       .debug_str	00000000 
0000350b l       .debug_str	00000000 
00003520 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00003548 l       .debug_str	00000000 
0000354f l       .debug_str	00000000 
00003564 l       .debug_str	00000000 
0000b1d7 l       .debug_str	00000000 
0000b569 l       .debug_str	00000000 
0000b5cc l       .debug_str	00000000 
0001c3c0 l       .debug_str	00000000 
0000b64c l       .debug_str	00000000 
0000b6af l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000017fa l       .debug_str	00000000 
000017f9 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 57lqf44sdwu8qayr
00000c71 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4a7 l       .debug_str	00000000 
0000ba46 l       .debug_str	00000000 
0000ba77 l       .debug_str	00000000 
0000bd0a l       .debug_str	00000000 
0000ba91 l       .debug_str	00000000 
0000bac2 l       .debug_str	00000000 
0000bb40 l       .debug_str	00000000 
0000baf2 l       .debug_str	00000000 
0000bb23 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000bb2d l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0000a54c l       .debug_str	00000000 
0000bb33 l       .debug_str	00000000 
0000bb39 l       .debug_str	00000000 
0000bb3f l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0000bb45 l       .debug_str	00000000 
0000bb97 l       .debug_str	00000000 
000017f9 l       .debug_str	00000000 
0000bbea l       .debug_str	00000000 
0000bc53 l       .debug_str	00000000 
0001f49b l       .debug_str	00000000 
0000bca6 l       .debug_str	00000000 
0000bd09 l       .debug_str	00000000 
0000bd35 l       .debug_str	00000000 
0000bdae l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea10 l       .debug_str	00000000 
000399b5 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005feca l       .debug_str	00000000 
00001521 l       .debug_str	00000000 
00000e2c l       .debug_str	00000000 
0000b7ab l       .debug_str	00000000 
0000bd2b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0005a727 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f32a l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005a79d l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
0000b7ba l       .debug_str	00000000 
0000b802 l       .debug_str	00000000 
0000b80b l       .debug_str	00000000 
0000b853 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000b85b l       .debug_str	00000000 
0000b466 l       .debug_str	00000000 
0000b8a3 l       .debug_str	00000000 
0000b8eb l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
0000b8f4 l       .debug_str	00000000 
0000b93c l       .debug_str	00000000 
0000b945 l       .debug_str	00000000 
0000b976 l       .debug_str	00000000 
00018bb0 l       .debug_str	00000000 
0000b97f l       .debug_str	00000000 
0000b9b0 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
000017fa l       .debug_str	00000000 
0000b9ba l       .debug_str	00000000 
0000b9eb l       .debug_str	00000000 
00018bc4 l       .debug_str	00000000 
0000ba0b l       .debug_str	00000000 
0000ba3c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000394cb l       .debug_str	00000000 
0005cbb4 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a826 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dmg7ylzo67ab86f
0000bf55 l       .debug_str	00000000 
0000be52 l       .debug_str	00000000 
0000be9b l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
0001c3c0 l       .debug_str	00000000 
0000beab l       .debug_str	00000000 
0000beb7 l       .debug_str	00000000 
0000befe l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
0001f32a l       .debug_str	00000000 
0000bf0a l       .debug_str	00000000 
0000bf65 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
0005cba2 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0005e9b8 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000be01 l       .debug_str	00000000 
0000be46 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f4c5 l       .debug_str	00000000 
00009440 l     F .text	00000044 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E
00000000 l    df *ABS*	00000000 2zydbnxo7qpu1b5q
0000c225 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00018c74 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00025434 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
00034a70 l       .debug_str	00000000 
0002f221 l       .debug_str	00000000 
0000c27e l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000c284 l       .debug_str	00000000 
00018d58 l       .debug_str	00000000 
0000c28e l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
00018d93 l       .debug_str	00000000 
0000c2ce l       .debug_str	00000000 
0000c33d l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
00018bba l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000bfac l       .debug_str	00000000 
000163d1 l       .debug_str	00000000 
0000bfc3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005abd8 l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0000bfd4 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000bfde l       .debug_str	00000000 
0000bfe9 l       .debug_str	00000000 
0000bff3 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
000229e1 l       .debug_str	00000000 
0000bffc l       .debug_str	00000000 
0000c042 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0005d5c5 l       .debug_str	00000000 
0000c055 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
000031ab l       .debug_str	00000000 
000229c7 l       .debug_str	00000000 
0000c05d l       .debug_str	00000000 
0005a9f8 l       .debug_str	00000000 
00022a0a l       .debug_str	00000000 
000604a0 l       .debug_str	00000000 
0000c061 l       .debug_str	00000000 
0001c3c0 l       .debug_str	00000000 
0000c065 l       .debug_str	00000000 
00001820 l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
0005f8dc l       .debug_str	00000000 
0000c06e l       .debug_str	00000000 
0005ef34 l       .debug_str	00000000 
0000e5f2 l       .debug_str	00000000 
0000c071 l       .debug_str	00000000 
0000c0b1 l       .debug_str	00000000 
0000c0c0 l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
0000c108 l       .debug_str	00000000 
0000c14f l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003e5ff l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
0000c15d l       .debug_str	00000000 
0000c1a1 l       .debug_str	00000000 
0000c1ac l       .debug_str	00000000 
0000c1b5 l       .debug_str	00000000 
0000c1bd l       .debug_str	00000000 
0005c7dd l       .debug_str	00000000 
0000e660 l       .debug_str	00000000 
0005ae34 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000c1c6 l       .debug_str	00000000 
0000c1cc l       .debug_str	00000000 
0000c1d5 l       .debug_str	00000000 
0000c1e2 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
00043b6c l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
0005a727 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000c1e5 l       .debug_str	00000000 
0000c1fc l       .debug_str	00000000 
0005f664 l       .debug_str	00000000 
0005ab3e l       .debug_str	00000000 
00010428 l       .debug_str	00000000 
0000c212 l       .debug_str	00000000 
0000c218 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000c21f l       .debug_str	00000000 
000162f9 l       .debug_str	00000000 
0000e738 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00018c29 l       .debug_str	00000000 
0005fd5d l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
200000e8 l     O .data	00000008 _ZN22piet_embedded_graphics7display12SPI_SETTINGS17h78a64d1040fbeee1E
20000160 l     O .bss	00000004 _ZN22piet_embedded_graphics7display14BACKLIGHT_HIGH17hd6bdc29c96588211E
00000000 l    df *ABS*	00000000 3eyht9wxrw4fbo0o
0000e260 l       .debug_str	00000000 
0000e1c4 l       .debug_str	00000000 
0000e20a l       .debug_str	00000000 
0000e2a9 l       .debug_str	00000000 
0000e2ef l       .debug_str	00000000 
0000e660 l       .debug_str	00000000 
00010add l       .debug_str	00000000 
0000e329 l       .debug_str	00000000 
0000e370 l       .debug_str	00000000 
0000e3be l       .debug_str	00000000 
0000e40a l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000c21f l       .debug_str	00000000 
0000c225 l       .debug_str	00000000 
000162f9 l       .debug_str	00000000 
0000e738 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00018c29 l       .debug_str	00000000 
0005fd5d l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00018c74 l       .debug_str	00000000 
00025434 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
0002f221 l       .debug_str	00000000 
0000c27e l       .debug_str	00000000 
0000c284 l       .debug_str	00000000 
00018d58 l       .debug_str	00000000 
0000c28e l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
00018d93 l       .debug_str	00000000 
0000c2ce l       .debug_str	00000000 
0000e44a l       .debug_str	00000000 
0000e4f6 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000e5c8 l       .debug_str	00000000 
0000e5e1 l       .debug_str	00000000 
0005ae34 l       .debug_str	00000000 
0001f3e3 l       .debug_str	00000000 
00011789 l       .debug_str	00000000 
0001ced2 l       .debug_str	00000000 
0000e631 l       .debug_str	00000000 
00040d26 l       .debug_str	00000000 
00019e43 l       .debug_str	00000000 
0003d8d6 l       .debug_str	00000000 
0000e634 l       .debug_str	00000000 
0002219c l       .debug_str	00000000 
000168c3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00012626 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
0002797a l       .debug_str	00000000 
000611df l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
0000c26b l       .debug_str	00000000 
000224e3 l       .debug_str	00000000 
0000e63b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00025479 l       .debug_str	00000000 
0000e642 l       .debug_str	00000000 
0005d5c6 l       .debug_str	00000000 
0000c05e l       .debug_str	00000000 
000163d1 l       .debug_str	00000000 
0005c7dd l       .debug_str	00000000 
0000e64e l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000e666 l       .debug_str	00000000 
0000e672 l       .debug_str	00000000 
0000e67e l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0000e68b l       .debug_str	00000000 
0006174c l       .debug_str	00000000 
0000e698 l       .debug_str	00000000 
0000e70f l       .debug_str	00000000 
0000e718 l       .debug_str	00000000 
0000e726 l       .debug_str	00000000 
00018cda l       .debug_str	00000000 
0000e73e l       .debug_str	00000000 
0000e773 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c344 l       .debug_str	00000000 
0000c34d l       .debug_str	00000000 
0000c357 l       .debug_str	00000000 
0000c367 l       .debug_str	00000000 
0000e5d5 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
0000c378 l       .debug_str	00000000 
0000c384 l       .debug_str	00000000 
0000c388 l       .debug_str	00000000 
0000c390 l       .debug_str	00000000 
0000c396 l       .debug_str	00000000 
0000c39c l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a9 l       .debug_str	00000000 
0000c3af l       .debug_str	00000000 
0000c3b5 l       .debug_str	00000000 
0000c3bc l       .debug_str	00000000 
0000c3c2 l       .debug_str	00000000 
0000c3ca l       .debug_str	00000000 
0000c3d1 l       .debug_str	00000000 
0000c3d7 l       .debug_str	00000000 
0000c3dd l       .debug_str	00000000 
0000c3e3 l       .debug_str	00000000 
0000c3e9 l       .debug_str	00000000 
0000c3ef l       .debug_str	00000000 
0000c3f6 l       .debug_str	00000000 
0000c3fd l       .debug_str	00000000 
0000c405 l       .debug_str	00000000 
0000c40d l       .debug_str	00000000 
0000c415 l       .debug_str	00000000 
0000c41c l       .debug_str	00000000 
0000c424 l       .debug_str	00000000 
0000c42b l       .debug_str	00000000 
0000c432 l       .debug_str	00000000 
0000c439 l       .debug_str	00000000 
0000c440 l       .debug_str	00000000 
0000c447 l       .debug_str	00000000 
0000c44e l       .debug_str	00000000 
0000c454 l       .debug_str	00000000 
0000c45a l       .debug_str	00000000 
0000c460 l       .debug_str	00000000 
0000c466 l       .debug_str	00000000 
0000c46d l       .debug_str	00000000 
0000c475 l       .debug_str	00000000 
0000e801 l       .debug_str	00000000 
0000c47d l       .debug_str	00000000 
0005ee39 l       .debug_str	00000000 
0000c488 l       .debug_str	00000000 
0005d5c5 l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0000c055 l       .debug_str	00000000 
000031ab l       .debug_str	00000000 
000229c7 l       .debug_str	00000000 
0000c05d l       .debug_str	00000000 
0005a9f8 l       .debug_str	00000000 
00022a0a l       .debug_str	00000000 
000604a0 l       .debug_str	00000000 
0000c061 l       .debug_str	00000000 
0001c3c0 l       .debug_str	00000000 
0000c065 l       .debug_str	00000000 
00001820 l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
0005f8dc l       .debug_str	00000000 
0000c06e l       .debug_str	00000000 
0005ef34 l       .debug_str	00000000 
0000e5f2 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000c494 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0000c4a4 l       .debug_str	00000000 
0000c4e0 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
0000c4ff l       .debug_str	00000000 
0000c54d l       .debug_str	00000000 
0000c58e l       .debug_str	00000000 
0000c5fa l       .debug_str	00000000 
0000c63c l       .debug_str	00000000 
0000c6a8 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0006012c l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
0005a727 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c24a l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0000c714 l       .debug_str	00000000 
0000c731 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000c777 l       .debug_str	00000000 
0000c788 l       .debug_str	00000000 
0000c7f8 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000c955 l       .debug_str	00000000 
0000ca42 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035924 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac2d l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000cb59 l       .debug_str	00000000 
0000cba9 l       .debug_str	00000000 
0000cc06 l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
0000cc5a l       .debug_str	00000000 
0000ccd1 l       .debug_str	00000000 
0000cd55 l       .debug_str	00000000 
0000cdd0 l       .debug_str	00000000 
0000ce6e l       .debug_str	00000000 
0000cf19 l       .debug_str	00000000 
0000cfbb l       .debug_str	00000000 
0000d080 l       .debug_str	00000000 
0000d152 l       .debug_str	00000000 
0000d21b l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0000d400 l       .debug_str	00000000 
0000d4f0 l       .debug_str	00000000 
0000d603 l       .debug_str	00000000 
0000d723 l       .debug_str	00000000 
0000d83a l       .debug_str	00000000 
0000d973 l       .debug_str	00000000 
0000dac9 l       .debug_str	00000000 
0005f664 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
0005ab3e l       .debug_str	00000000 
0002b9ab l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00027836 l       .debug_str	00000000 
00034a70 l       .debug_str	00000000 
0000dc1e l       .debug_str	00000000 
0000dc6c l       .debug_str	00000000 
0000ddec l       .debug_str	00000000 
0000de3a l       .debug_str	00000000 
0000de7b l       .debug_str	00000000 
0000dec9 l       .debug_str	00000000 
0000df0a l       .debug_str	00000000 
0000df5a l       .debug_str	00000000 
0000e0dc l       .debug_str	00000000 
0000e12d l       .debug_str	00000000 
0000e171 l       .debug_str	00000000 
0001e560 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 3sr9zgbizuzi7j5h
0000c488 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000e7e7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0000c378 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c384 l       .debug_str	00000000 
0000c388 l       .debug_str	00000000 
0000c390 l       .debug_str	00000000 
0000c396 l       .debug_str	00000000 
0000c39c l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a9 l       .debug_str	00000000 
0000c3af l       .debug_str	00000000 
0000c3b5 l       .debug_str	00000000 
0000c3bc l       .debug_str	00000000 
0000c3c2 l       .debug_str	00000000 
0000c3ca l       .debug_str	00000000 
0000c3d1 l       .debug_str	00000000 
0000c3d7 l       .debug_str	00000000 
0000c3dd l       .debug_str	00000000 
0000c3e3 l       .debug_str	00000000 
0000c3e9 l       .debug_str	00000000 
0000c3ef l       .debug_str	00000000 
0000c3f6 l       .debug_str	00000000 
0000c3fd l       .debug_str	00000000 
0000c405 l       .debug_str	00000000 
0000c40d l       .debug_str	00000000 
0000c415 l       .debug_str	00000000 
0000c41c l       .debug_str	00000000 
0000c424 l       .debug_str	00000000 
0000c42b l       .debug_str	00000000 
0000c432 l       .debug_str	00000000 
0000c439 l       .debug_str	00000000 
0000c440 l       .debug_str	00000000 
0000c447 l       .debug_str	00000000 
0000c44e l       .debug_str	00000000 
0000c454 l       .debug_str	00000000 
0000c45a l       .debug_str	00000000 
0000c460 l       .debug_str	00000000 
0000c466 l       .debug_str	00000000 
0000c46d l       .debug_str	00000000 
0000c475 l       .debug_str	00000000 
0000e801 l       .debug_str	00000000 
0000c47d l       .debug_str	00000000 
0005ee39 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0000e77f l       .debug_str	00000000 
0000e7bb l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 44cnu8660c26myi6
0000e85c l       .debug_str	00000000 
0000e851 l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
0000e89a l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0005e9b8 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000e80d l       .debug_str	00000000 
0000a6ae l     F .text	0000001e _ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E
00000000 l    df *ABS*	00000000 469um0xjm96v8cgk
0000f305 l       .debug_str	00000000 
0000f929 l       .debug_str	00000000 
0000fa7c l       .debug_str	00000000 
0000faac l       .debug_str	00000000 
0000c1cc l       .debug_str	00000000 
0000c1d5 l       .debug_str	00000000 
0000c1e2 l       .debug_str	00000000 
00043b6c l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000c1e5 l       .debug_str	00000000 
0000c1fc l       .debug_str	00000000 
00010428 l       .debug_str	00000000 
0001040b l       .debug_str	00000000 
0000fbd3 l       .debug_str	00000000 
0000fc03 l       .debug_str	00000000 
000104af l       .debug_str	00000000 
00010451 l       .debug_str	00000000 
0000fc45 l       .debug_str	00000000 
0000fc75 l       .debug_str	00000000 
0000fcc4 l       .debug_str	00000000 
0000fcf4 l       .debug_str	00000000 
0000fd06 l       .debug_str	00000000 
0000fd36 l       .debug_str	00000000 
0000fd6f l       .debug_str	00000000 
0000fd78 l       .debug_str	00000000 
0000fda5 l       .debug_str	00000000 
0000fde8 l       .debug_str	00000000 
0000fdfe l       .debug_str	00000000 
0000ff42 l       .debug_str	00000000 
0000ffde l       .debug_str	00000000 
000100a8 l       .debug_str	00000000 
000100c1 l       .debug_str	00000000 
000101a0 l       .debug_str	00000000 
000102e9 l       .debug_str	00000000 
00010406 l       .debug_str	00000000 
0001043e l       .debug_str	00000000 
00010483 l       .debug_str	00000000 
0001048b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
0000e8a0 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
0000e8a7 l       .debug_str	00000000 
0000e8ac l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0000e8d1 l       .debug_str	00000000 
0000e8d8 l       .debug_str	00000000 
0000e8dd l       .debug_str	00000000 
0000e918 l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
0000e94f l       .debug_str	00000000 
0000e97f l       .debug_str	00000000 
0000bfac l       .debug_str	00000000 
0000e992 l       .debug_str	00000000 
0000e998 l       .debug_str	00000000 
0000e99f l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000e634 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0006012c l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
0005a727 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c24a l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0000c714 l       .debug_str	00000000 
0000c731 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000c777 l       .debug_str	00000000 
0000c788 l       .debug_str	00000000 
0000c7f8 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000c955 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035924 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac2d l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000cb59 l       .debug_str	00000000 
0000cba9 l       .debug_str	00000000 
0000cc06 l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
0000cc5a l       .debug_str	00000000 
0000ccd1 l       .debug_str	00000000 
0000cd55 l       .debug_str	00000000 
0000cdd0 l       .debug_str	00000000 
0000ce6e l       .debug_str	00000000 
0000cf19 l       .debug_str	00000000 
0000cfbb l       .debug_str	00000000 
0000d080 l       .debug_str	00000000 
0000d152 l       .debug_str	00000000 
0000d21b l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0000d400 l       .debug_str	00000000 
0000e9a7 l       .debug_str	00000000 
0000eab9 l       .debug_str	00000000 
0000ebe8 l       .debug_str	00000000 
0005f664 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
0005ab3e l       .debug_str	00000000 
0002b873 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00027719 l       .debug_str	00000000 
0000fd9c l       .debug_str	00000000 
0000ed16 l       .debug_str	00000000 
0000ed46 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0000fdb8 l       .debug_str	00000000 
0000ed7d l       .debug_str	00000000 
0000edad l       .debug_str	00000000 
0004ea10 l       .debug_str	00000000 
00015d05 l       .debug_str	00000000 
0000edfa l       .debug_str	00000000 
0000ee2a l       .debug_str	00000000 
0000ca42 l       .debug_str	00000000 
0000d4f0 l       .debug_str	00000000 
0000d603 l       .debug_str	00000000 
0000d723 l       .debug_str	00000000 
0000d83a l       .debug_str	00000000 
0000d973 l       .debug_str	00000000 
0000dac9 l       .debug_str	00000000 
0002b9ab l       .debug_str	00000000 
00027836 l       .debug_str	00000000 
0000ee4a l       .debug_str	00000000 
0000ee7a l       .debug_str	00000000 
0000e778 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000efc8 l       .debug_str	00000000 
0000efd3 l       .debug_str	00000000 
0000efdd l       .debug_str	00000000 
0000e738 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00018c29 l       .debug_str	00000000 
0000efe6 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00018c74 l       .debug_str	00000000 
00025434 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
00034a70 l       .debug_str	00000000 
0002f221 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0002f1b5 l       .debug_str	00000000 
0000eff3 l       .debug_str	00000000 
0001c3c0 l       .debug_str	00000000 
0002dc97 l       .debug_str	00000000 
0000efff l       .debug_str	00000000 
0000f02f l       .debug_str	00000000 
0000f0d5 l       .debug_str	00000000 
0000f0da l       .debug_str	00000000 
0000f0e0 l       .debug_str	00000000 
0000f0e9 l       .debug_str	00000000 
0005d23e l       .debug_str	00000000 
0002dd3e l       .debug_str	00000000 
0000f0f3 l       .debug_str	00000000 
0000f123 l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea7c l       .debug_str	00000000 
00024c12 l       .debug_str	00000000 
0002564b l       .debug_str	00000000 
0000f1fd l       .debug_str	00000000 
0000f22d l       .debug_str	00000000 
0000f250 l       .debug_str	00000000 
0000f27d l       .debug_str	00000000 
0000f29e l       .debug_str	00000000 
0000f3a5 l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
0000f47f l       .debug_str	00000000 
0000f4f6 l       .debug_str	00000000 
0000f57a l       .debug_str	00000000 
0000f5f5 l       .debug_str	00000000 
0000f693 l       .debug_str	00000000 
0000f73e l       .debug_str	00000000 
00028d85 l       .debug_str	00000000 
000284bc l       .debug_str	00000000 
000287f3 l       .debug_str	00000000 
0002b779 l       .debug_str	00000000 
000273e1 l       .debug_str	00000000 
0000f7e0 l       .debug_str	00000000 
0000f810 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
0002797a l       .debug_str	00000000 
0000f8f9 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 49htiubyezwzqodr
0005a79d l       .debug_str	00000000 
000104ba l       .debug_str	00000000 
000104eb l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00018bba l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
000104f4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea10 l       .debug_str	00000000 
000399b5 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005a727 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f32a l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1vm1jsf9206jqt1a
00013345 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00010658 l       .debug_str	00000000 
00010664 l       .debug_str	00000000 
00010725 l       .debug_str	00000000 
00025419 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000e7e7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010546 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0000c378 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c384 l       .debug_str	00000000 
0000c388 l       .debug_str	00000000 
0000c390 l       .debug_str	00000000 
0000c396 l       .debug_str	00000000 
0000c39c l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a9 l       .debug_str	00000000 
0000c3af l       .debug_str	00000000 
0000c3b5 l       .debug_str	00000000 
0000c3bc l       .debug_str	00000000 
0000c3c2 l       .debug_str	00000000 
0000c3ca l       .debug_str	00000000 
0000c3d1 l       .debug_str	00000000 
0000c3d7 l       .debug_str	00000000 
0000c3dd l       .debug_str	00000000 
0000c3e3 l       .debug_str	00000000 
0000c3e9 l       .debug_str	00000000 
0000c3ef l       .debug_str	00000000 
0000c3f6 l       .debug_str	00000000 
0000c3fd l       .debug_str	00000000 
0000c405 l       .debug_str	00000000 
0000c40d l       .debug_str	00000000 
0000c415 l       .debug_str	00000000 
0000c41c l       .debug_str	00000000 
0000c424 l       .debug_str	00000000 
0000c42b l       .debug_str	00000000 
0000c432 l       .debug_str	00000000 
0000c439 l       .debug_str	00000000 
0000c440 l       .debug_str	00000000 
0000c447 l       .debug_str	00000000 
0000c44e l       .debug_str	00000000 
0000c454 l       .debug_str	00000000 
0000c45a l       .debug_str	00000000 
0000c460 l       .debug_str	00000000 
0000c466 l       .debug_str	00000000 
0000c46d l       .debug_str	00000000 
0000c475 l       .debug_str	00000000 
0000e801 l       .debug_str	00000000 
0001056a l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00010590 l       .debug_str	00000000 
00010651 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3on1efjgx1q5grpf
00025419 l       .debug_str	00000000 
00010725 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000e5c8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010546 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c344 l       .debug_str	00000000 
0000c34d l       .debug_str	00000000 
0000c357 l       .debug_str	00000000 
0000c367 l       .debug_str	00000000 
0000e5d5 l       .debug_str	00000000 
0001072c l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00010752 l       .debug_str	00000000 
00010651 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00010658 l       .debug_str	00000000 
000107f9 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dxw5xp80tje79rx
000012f5 l       .debug_str	00000000 
000108f0 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010546 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00010658 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0000c378 l       .debug_str	00000000 
0001056a l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00010725 l       .debug_str	00000000 
00011789 l       .debug_str	00000000 
0005f727 l       .debug_str	00000000 
000108a0 l       .debug_str	00000000 
000108d9 l       .debug_str	00000000 
00025419 l       .debug_str	00000000 
0001072c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 t2y6wwi1wx5h1fq
0000237d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010546 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0000c378 l       .debug_str	00000000 
0001056a l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
00010725 l       .debug_str	00000000 
00010929 l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00011789 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1ai0eloc31rxz52x
00010a89 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00010a14 l       .debug_str	00000000 
00033c9e l       .debug_str	00000000 
0000e8a7 l       .debug_str	00000000 
0001c3c0 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00010a77 l       .debug_str	00000000 
00010a6b l       .debug_str	00000000 
0001f35a l       .debug_str	00000000 
00010a7e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1v17h907p30pylh6
00000d77 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f32a l       .debug_str	00000000 
0005a79d l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4a7 l       .debug_str	00000000 
0001f49b l       .debug_str	00000000 
00060002 l       .debug_str	00000000 
0005d4bd l       .debug_str	00000000 
00000f07 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f4a6 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00059eeb l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
000602e1 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001106 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000011c0 l       .debug_str	00000000 
000011e7 l       .debug_str	00000000 
00001218 l       .debug_str	00000000 
000011ff l       .debug_str	00000000 
0005e60d l       .debug_str	00000000 
00012626 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0005cfe1 l       .debug_str	00000000 
000612d4 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016202 l       .debug_str	00000000 
000611df l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0005c24a l       .debug_str	00000000 
00010e2d l       .debug_str	00000000 
00010e54 l       .debug_str	00000000 
00010e5c l       .debug_str	00000000 
00010e63 l       .debug_str	00000000 
00010e69 l       .debug_str	00000000 
00010e70 l       .debug_str	00000000 
0005cff7 l       .debug_str	00000000 
00010e76 l       .debug_str	00000000 
00010e85 l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
00010e93 l       .debug_str	00000000 
00010e98 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0005cd0a l       .debug_str	00000000 
00010cd4 l       .debug_str	00000000 
00010a94 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0005a9f8 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00022a0a l       .debug_str	00000000 
00010aa0 l       .debug_str	00000000 
00010ad7 l       .debug_str	00000000 
0000e660 l       .debug_str	00000000 
00010ae3 l       .debug_str	00000000 
00010b1a l       .debug_str	00000000 
00010b25 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00010b2d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00010b34 l       .debug_str	00000000 
00010b3b l       .debug_str	00000000 
0006037f l       .debug_str	00000000 
00010b44 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0005abbb l       .debug_str	00000000 
00010b4e l       .debug_str	00000000 
00010e45 l       .debug_str	00000000 
00010b58 l       .debug_str	00000000 
0001a01c l       .debug_str	00000000 
00010b8e l       .debug_str	00000000 
00010bbc l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000425e9 l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
0005d830 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
00010bc8 l       .debug_str	00000000 
00010bff l       .debug_str	00000000 
0005abd8 l       .debug_str	00000000 
0005feb3 l       .debug_str	00000000 
0005f664 l       .debug_str	00000000 
0006012c l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00010c08 l       .debug_str	00000000 
00010c1c l       .debug_str	00000000 
00010c4f l       .debug_str	00000000 
00010c5a l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
0004ea10 l       .debug_str	00000000 
000399b5 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00010c90 l       .debug_str	00000000 
00010cce l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
0003e5ff l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
00010ce1 l       .debug_str	00000000 
00010d24 l       .debug_str	00000000 
00010d3c l       .debug_str	00000000 
00010d7c l       .debug_str	00000000 
00010d91 l       .debug_str	00000000 
00010dcb l       .debug_str	00000000 
00010dda l       .debug_str	00000000 
00010e19 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
0005ae34 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00018bb0 l       .debug_str	00000000 
000017ea l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
0000bb2d l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000394cb l       .debug_str	00000000 
0005cbb4 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a826 l       .debug_str	00000000 
0005a727 l       .debug_str	00000000 
20000214 l     O .bss	00000001 _ZN3app12touch_sensor10I2C_BUFFER17h8c3d62e53c42ce39E
20000168 l     O .bss	00000052 _ZN3app12touch_sensor10TOUCH_DATA17h1dd6b74134f2575dE
20000168 l     O .bss	00000000 _ZN3app12touch_sensor11TOUCH_DELAY17h6bb1c96a489889baE
200001fc l     O .bss	00000010 _ZN3app12touch_sensor11TOUCH_EVENT17hb169e5084280c5b1E
20000164 l     O .bss	00000004 _ZN3app12touch_sensor11TOUCH_RESET17h950734ac5f86de57E
0000b1f4 l     F .text	00000752 _ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E
0000b946 l     F .text	0000019a _ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E
0000b0ba l     F .text	0000013a _ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E
0000b06e l     F .text	0000004c _ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE
200001ba l     O .bss	0000003f _ZN3app12touch_sensor3BUF17h9edf4dcfe692b5b1E
2000020c l     O .bss	00000008 _ZN3app12touch_sensor8I2C_DATA17hb66b2debc1d16188E
0001e780 l     O .text	00000021 str.0
0001e7c0 l     O .text	0000001c str.1
00000000 l    df *ABS*	00000000 25jm3tkgfnhczjfh
000114df l       .debug_str	00000000 
0003e5ff l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
00010fff l       .debug_str	00000000 
00022489 l       .debug_str	00000000 
0001102b l       .debug_str	00000000 
0003f8ef l       .debug_str	00000000 
0001105a l       .debug_str	00000000 
0005a8b7 l       .debug_str	00000000 
000110b4 l       .debug_str	00000000 
0003d8d5 l       .debug_str	00000000 
0001c3c0 l       .debug_str	00000000 
0001110d l       .debug_str	00000000 
0001116b l       .debug_str	00000000 
00011174 l       .debug_str	00000000 
000111d2 l       .debug_str	00000000 
000111db l       .debug_str	00000000 
0001123e l       .debug_str	00000000 
0001124b l       .debug_str	00000000 
000112aa l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000112b4 l       .debug_str	00000000 
000112c3 l       .debug_str	00000000 
0001131e l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00011324 l       .debug_str	00000000 
0001137e l       .debug_str	00000000 
00011383 l       .debug_str	00000000 
0005bb7a l       .debug_str	00000000 
000113de l       .debug_str	00000000 
0001140f l       .debug_str	00000000 
0001141d l       .debug_str	00000000 
0001144d l       .debug_str	00000000 
0001145a l       .debug_str	00000000 
0001148f l       .debug_str	00000000 
000114cc l       .debug_str	00000000 
000114d7 l       .debug_str	00000000 
000114db l       .debug_str	00000000 
000114f0 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
00011563 l       .debug_str	00000000 
0001156f l       .debug_str	00000000 
0001159f l       .debug_str	00000000 
000115ac l       .debug_str	00000000 
00011608 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000efc8 l       .debug_str	00000000 
0000efd3 l       .debug_str	00000000 
0000efdd l       .debug_str	00000000 
0000e738 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00018c29 l       .debug_str	00000000 
0000efe6 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00018c74 l       .debug_str	00000000 
00025434 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
00034a70 l       .debug_str	00000000 
0002f221 l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0002f14a l       .debug_str	00000000 
0005ae34 l       .debug_str	00000000 
00060001 l       .debug_str	00000000 
00011613 l       .debug_str	00000000 
0001161c l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
00011625 l       .debug_str	00000000 
00012c1a l       .debug_str	00000000 
00011628 l       .debug_str	00000000 
0004cc61 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0005b673 l       .debug_str	00000000 
0005ff8c l       .debug_str	00000000 
00025419 l       .debug_str	00000000 
0001162b l       .debug_str	00000000 
0005abd8 l       .debug_str	00000000 
000125eb l       .debug_str	00000000 
0005c059 l       .debug_str	00000000 
00011633 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0001163f l       .debug_str	00000000 
0003d8d4 l       .debug_str	00000000 
00010a7c l       .debug_str	00000000 
0004680f l       .debug_str	00000000 
0005bed1 l       .debug_str	00000000 
00010f6c l       .debug_str	00000000 
00010f77 l       .debug_str	00000000 
00010f84 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00011659 l       .debug_str	00000000 
00011454 l       .debug_str	00000000 
00011660 l       .debug_str	00000000 
00011f30 l       .debug_str	00000000 
0000c26b l       .debug_str	00000000 
0000237c l       .debug_str	00000000 
00002382 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
0001f32a l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005a79d l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
0001167b l       .debug_str	00000000 
00011686 l       .debug_str	00000000 
00010a89 l       .debug_str	00000000 
00011692 l       .debug_str	00000000 
0001169d l       .debug_str	00000000 
000116a8 l       .debug_str	00000000 
000116b3 l       .debug_str	00000000 
000116be l       .debug_str	00000000 
000116c9 l       .debug_str	00000000 
000116d4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0005cd0a l       .debug_str	00000000 
0001161f l       .debug_str	00000000 
00010e9c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000425e9 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f4a6 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00059eeb l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
000602e1 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
00010ea7 l       .debug_str	00000000 
00010ed5 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00010ee6 l       .debug_str	00000000 
00010f1a l       .debug_str	00000000 
00010f28 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea10 l       .debug_str	00000000 
000399b5 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00010f59 l       .debug_str	00000000 
00010f65 l       .debug_str	00000000 
00010f70 l       .debug_str	00000000 
00010f7d l       .debug_str	00000000 
00011650 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00010f8b l       .debug_str	00000000 
00010f94 l       .debug_str	00000000 
00010f9d l       .debug_str	00000000 
00010fa8 l       .debug_str	00000000 
00010fb4 l       .debug_str	00000000 
00010fbe l       .debug_str	00000000 
00011f41 l       .debug_str	00000000 
00000b83 l       .debug_str	00000000 
00000b8c l       .debug_str	00000000 
00000b90 l       .debug_str	00000000 
00000bba l       .debug_str	00000000 
00010fcb l       .debug_str	00000000 
00010ff6 l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
20000218 l     O .bss	00000050 _ZN3app5chip810CHIP8_TASK17hdc3e015a60662be5E
0000c512 l     F .text	000000a8 _ZN3app5chip812render_block17hf14dcded684223a2E
0000c5f0 l     F .text	00000364 _ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE
0000c5ba l     F .text	00000036 _ZN3app5chip813PixelIterator3new17h822e2c1da3bbcd7bE
20004268 l     O .bss	00000800 _ZN3app5chip813SCREEN_BUFFER17hf6360141ad32453fE
0000c210 l     F .text	00000302 _ZN3app5chip813render_region17h63a2f42595e40485E
20000268 l     O .bss	00004000 _ZN3app5chip816CHIP8_TASK_STACK17hb31f2a0cca07481dE
0000bcca l     F .text	0000001a _ZN3app5chip88Hardware3new17hd197d831acf35cdcE
0000bc16 l     F .text	000000b4 _ZN3app5chip89task_func17h385831a0096277b5E
0001f440 l     O .text	00000021 str.0
0001f480 l     O .text	0000001c str.1
0001f560 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 2c6bdy6rt6z3zh1y
000118df l       .debug_str	00000000 
0000ac06 l       .debug_str	00000000 
0003e5ff l       .debug_str	00000000 
000118a4 l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00011948 l       .debug_str	00000000 
000119b3 l       .debug_str	00000000 
000119ef l       .debug_str	00000000 
00011a3c l       .debug_str	00000000 
00011a78 l       .debug_str	00000000 
00011a86 l       .debug_str	00000000 
00011af1 l       .debug_str	00000000 
00011b0c l       .debug_str	00000000 
00011b78 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0005ae34 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00011bcf l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f32a l       .debug_str	00000000 
00012626 l       .debug_str	00000000 
000116df l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0005cfe1 l       .debug_str	00000000 
000612d4 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016202 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0001161c l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00003dcc l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
00011789 l       .debug_str	00000000 
000229c9 l       .debug_str	00000000 
0005f727 l       .debug_str	00000000 
00011703 l       .debug_str	00000000 
000116e8 l       .debug_str	00000000 
00011732 l       .debug_str	00000000 
00011be2 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001f40f l       .debug_str	00000000 
00001425 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000112b4 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00011784 l       .debug_str	00000000 
00011793 l       .debug_str	00000000 
000117cc l       .debug_str	00000000 
000117f5 l       .debug_str	00000000 
000160dd l       .debug_str	00000000 
0001180c l       .debug_str	00000000 
00011845 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2xbkmlpi4vyn2qbv
0003d8d6 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000bfac l       .debug_str	00000000 
000163d1 l       .debug_str	00000000 
0000e634 l       .debug_str	00000000 
0005cd0a l       .debug_str	00000000 
0001161f l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00010f8b l       .debug_str	00000000 
00010f94 l       .debug_str	00000000 
00010f9d l       .debug_str	00000000 
00010fa8 l       .debug_str	00000000 
00010fb4 l       .debug_str	00000000 
00010fbe l       .debug_str	00000000 
00011f41 l       .debug_str	00000000 
00011f30 l       .debug_str	00000000 
00034a70 l       .debug_str	00000000 
00011c2f l       .debug_str	00000000 
00011c7b l       .debug_str	00000000 
0000e631 l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
00040d26 l       .debug_str	00000000 
00019e43 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 36ol61x1a5do2305
00011dac l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000e5e1 l       .debug_str	00000000 
0000e631 l       .debug_str	00000000 
00040d26 l       .debug_str	00000000 
00019e43 l       .debug_str	00000000 
0003d8d6 l       .debug_str	00000000 
0000e634 l       .debug_str	00000000 
0005ae34 l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
00012626 l       .debug_str	00000000 
000611df l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
0000c26b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0005d5c5 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0000c055 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
000031ab l       .debug_str	00000000 
000229c7 l       .debug_str	00000000 
0000c05d l       .debug_str	00000000 
0005a9f8 l       .debug_str	00000000 
00022a0a l       .debug_str	00000000 
000604a0 l       .debug_str	00000000 
0000c061 l       .debug_str	00000000 
0001c3c0 l       .debug_str	00000000 
0000c065 l       .debug_str	00000000 
00001820 l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
0005f8dc l       .debug_str	00000000 
0000c06e l       .debug_str	00000000 
0005ef34 l       .debug_str	00000000 
0000e5f2 l       .debug_str	00000000 
0005cd0a l       .debug_str	00000000 
0001161f l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00010f8b l       .debug_str	00000000 
00010f94 l       .debug_str	00000000 
00010f9d l       .debug_str	00000000 
00010fa8 l       .debug_str	00000000 
00010fb4 l       .debug_str	00000000 
00010fbe l       .debug_str	00000000 
00011f41 l       .debug_str	00000000 
00011f30 l       .debug_str	00000000 
00034a70 l       .debug_str	00000000 
00011cae l       .debug_str	00000000 
00011cfc l       .debug_str	00000000 
00011d5c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4ae8jurj2cyz895o
000002a2 l       .debug_str	00000000 
00011f0b l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00011563 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00011f2b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00012626 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00011e0e l       .debug_str	00000000 
0005cd0a l       .debug_str	00000000 
0001161f l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00010f8b l       .debug_str	00000000 
00010f94 l       .debug_str	00000000 
00010f9d l       .debug_str	00000000 
00010fa8 l       .debug_str	00000000 
00010fb4 l       .debug_str	00000000 
00010fbe l       .debug_str	00000000 
00011f41 l       .debug_str	00000000 
00011f30 l       .debug_str	00000000 
000229c9 l       .debug_str	00000000 
00011e17 l       .debug_str	00000000 
00011e7a l       .debug_str	00000000 
00011ea4 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4vqyywb7xxbk2fnk
00012393 l       .debug_str	00000000 
00043b6c l       .debug_str	00000000 
00012610 l       .debug_str	00000000 
00002450 l       .debug_str	00000000 
0001260c l       .debug_str	00000000 
00012607 l       .debug_str	00000000 
0002219c l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c059 l       .debug_str	00000000 
000125dc l       .debug_str	00000000 
00012626 l       .debug_str	00000000 
000116df l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0005cfe1 l       .debug_str	00000000 
000612d4 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016202 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
000229c9 l       .debug_str	00000000 
00011703 l       .debug_str	00000000 
0001203f l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000112b4 l       .debug_str	00000000 
000120cb l       .debug_str	00000000 
00012100 l       .debug_str	00000000 
0001211a l       .debug_str	00000000 
0001214f l       .debug_str	00000000 
00012169 l       .debug_str	00000000 
0001219e l       .debug_str	00000000 
000121b8 l       .debug_str	00000000 
000121ee l       .debug_str	00000000 
00012209 l       .debug_str	00000000 
0005a826 l       .debug_str	00000000 
00011784 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000125bd l       .debug_str	00000000 
0001225d l       .debug_str	00000000 
00012583 l       .debug_str	00000000 
00012565 l       .debug_str	00000000 
0001227f l       .debug_str	00000000 
0001252c l       .debug_str	00000000 
000122f1 l       .debug_str	00000000 
00012327 l       .debug_str	00000000 
00012510 l       .debug_str	00000000 
000124d9 l       .debug_str	00000000 
00012342 l       .debug_str	00000000 
000124bd l       .debug_str	00000000 
00012486 l       .debug_str	00000000 
0001246b l       .debug_str	00000000 
00012435 l       .debug_str	00000000 
0001241a l       .debug_str	00000000 
000123e4 l       .debug_str	00000000 
000123c9 l       .debug_str	00000000 
00012378 l       .debug_str	00000000 
00013291 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0001264e l       .debug_str	00000000 
0001264a l       .debug_str	00000000 
0005ae15 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00059b11 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00011f4f l       .debug_str	00000000 
00015d05 l       .debug_str	00000000 
00011f53 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
000343dd l       .debug_str	00000000 
00011f58 l       .debug_str	00000000 
0001f5f1 l       .debug_str	00000000 
0001f446 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00033332 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0001161c l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
00011625 l       .debug_str	00000000 
00012c1a l       .debug_str	00000000 
00011628 l       .debug_str	00000000 
0004cc61 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0005b673 l       .debug_str	00000000 
0005ff8c l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00012644 l       .debug_str	00000000 
0001263e l       .debug_str	00000000 
00012638 l       .debug_str	00000000 
00012632 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0005cff7 l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
000611df l       .debug_str	00000000 
00002535 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
00018bba l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
0001262f l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00025419 l       .debug_str	00000000 
0001162b l       .debug_str	00000000 
0001c3c0 l       .debug_str	00000000 
0005abd8 l       .debug_str	00000000 
0005cd0a l       .debug_str	00000000 
0001161f l       .debug_str	00000000 
00010f59 l       .debug_str	00000000 
00010f65 l       .debug_str	00000000 
0005a699 l       .debug_str	00000000 
00010f70 l       .debug_str	00000000 
00010f7d l       .debug_str	00000000 
00011650 l       .debug_str	00000000 
000125eb l       .debug_str	00000000 
00011f5e l       .debug_str	00000000 
00011f84 l       .debug_str	00000000 
00003dcc l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
00011f8e l       .debug_str	00000000 
0005ab3e l       .debug_str	00000000 
000160dd l       .debug_str	00000000 
00011789 l       .debug_str	00000000 
0005f727 l       .debug_str	00000000 
00011f96 l       .debug_str	00000000 
00012022 l       .debug_str	00000000 
0001262b l       .debug_str	00000000 
0005b7ab l       .debug_str	00000000 
00012a75 l       .debug_str	00000000 
00012ae7 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00012622 l       .debug_str	00000000 
00011be2 l       .debug_str	00000000 
00012618 l       .debug_str	00000000 
0001f870 l     O .text	0000001c str.0
0001faf0 l     O .text	00000021 str.1
0001fdd0 l     O .text	00000039 str.2
0001fe30 l     O .text	00000021 str.3
0001fe70 l     O .text	00000023 str.4
00000000 l    df *ABS*	00000000 5amxpeuxwufgc2g7
00012801 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000112b4 l       .debug_str	00000000 
000117f5 l       .debug_str	00000000 
0001276d l       .debug_str	00000000 
0001284a l       .debug_str	00000000 
00012894 l       .debug_str	00000000 
000128e7 l       .debug_str	00000000 
00012976 l       .debug_str	00000000 
000129d9 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00012a51 l       .debug_str	00000000 
00012ac3 l       .debug_str	00000000 
00012b81 l       .debug_str	00000000 
0005ae34 l       .debug_str	00000000 
0000ac06 l       .debug_str	00000000 
000116e8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00012626 l       .debug_str	00000000 
000116df l       .debug_str	00000000 
00012610 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00043b6c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0005cfe1 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
000612d4 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016202 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0001161c l       .debug_str	00000000 
00003dcc l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000160dd l       .debug_str	00000000 
00011789 l       .debug_str	00000000 
000229c9 l       .debug_str	00000000 
0005f727 l       .debug_str	00000000 
00011703 l       .debug_str	00000000 
00012618 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00011be2 l       .debug_str	00000000 
00012622 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00012ae7 l       .debug_str	00000000 
00012a75 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
00012653 l       .debug_str	00000000 
000126dd l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 5eukf9ymd90dvsi0
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00012b85 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00012bde l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00012b8d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 5fcitodfeuns782f
00012c5d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00012beb l       .debug_str	00000000 
00012bf0 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00012bf7 l       .debug_str	00000000 
00012bff l       .debug_str	00000000 
0000bfe3 l       .debug_str	00000000 
00012c07 l       .debug_str	00000000 
00012c0f l       .debug_str	00000000 
00012c16 l       .debug_str	00000000 
000165c6 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00012c1d l       .debug_str	00000000 
0005a727 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001f4de l       .debug_str	00000000 
00012c72 l       .debug_str	00000000 
00012c22 l       .debug_str	00000000 
00033d84 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 tdisvxegs4w5usn
00012d7e l       .debug_str	00000000 
00012622 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00012ae7 l       .debug_str	00000000 
00012a75 l       .debug_str	00000000 
00012d0f l       .debug_str	00000000 
00012d50 l       .debug_str	00000000 
00012dbf l       .debug_str	00000000 
00012e22 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000112b4 l       .debug_str	00000000 
0005ac2d l       .debug_str	00000000 
00012e72 l       .debug_str	00000000 
00012ef2 l       .debug_str	00000000 
000117f5 l       .debug_str	00000000 
00012f30 l       .debug_str	00000000 
00012fb0 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000116e8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00012626 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00011e0e l       .debug_str	00000000 
000365e4 l       .debug_str	00000000 
000116df l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0005cfe1 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
000612d4 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016202 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0001161c l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00003dcc l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00011789 l       .debug_str	00000000 
000229c9 l       .debug_str	00000000 
0005f727 l       .debug_str	00000000 
00011703 l       .debug_str	00000000 
000160dd l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
00012c7e l       .debug_str	00000000 
00012cc1 l       .debug_str	00000000 
00012610 l       .debug_str	00000000 
00043b6c l       .debug_str	00000000 
00012618 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00011be2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 u3mfxzl87iwp64s
00001d46 l       .debug_str	00000000 
00013101 l       .debug_str	00000000 
000116df l       .debug_str	00000000 
000229c9 l       .debug_str	00000000 
00011703 l       .debug_str	00000000 
000160dd l       .debug_str	00000000 
0001313e l       .debug_str	00000000 
0001317d l       .debug_str	00000000 
00013291 l       .debug_str	00000000 
000131f0 l       .debug_str	00000000 
00013253 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0001327a l       .debug_str	00000000 
0005a699 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00012626 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00011e0e l       .debug_str	00000000 
000365e4 l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0005ab3e l       .debug_str	00000000 
00013024 l       .debug_str	00000000 
000130b9 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005cfe1 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
000612d4 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016202 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000112b4 l       .debug_str	00000000 
0005ac2d l       .debug_str	00000000 
0001161c l       .debug_str	00000000 
00003dcc l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
00011789 l       .debug_str	00000000 
0005f727 l       .debug_str	00000000 
000130c2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 cstr_core.8j8txwjh-cgu.0
000148f1 l       .debug_str	00000000 
000138e2 l       .debug_str	00000000 
0001390c l       .debug_str	00000000 
0001395a l       .debug_str	00000000 
00013962 l       .debug_str	00000000 
0000bf06 l       .debug_str	00000000 
000139af l       .debug_str	00000000 
00013a09 l       .debug_str	00000000 
00013a17 l       .debug_str	00000000 
00013a6a l       .debug_str	00000000 
00013a72 l       .debug_str	00000000 
00013ac7 l       .debug_str	00000000 
00013ad1 l       .debug_str	00000000 
00013b0f l       .debug_str	00000000 
00013b2a l       .debug_str	00000000 
00013b89 l       .debug_str	00000000 
00012b82 l       .debug_str	00000000 
0001c3c0 l       .debug_str	00000000 
00013bee l       .debug_str	00000000 
00013c1f l       .debug_str	00000000 
00013c2a l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
00013c5c l       .debug_str	00000000 
00013c8a l       .debug_str	00000000 
00013c9c l       .debug_str	00000000 
00013cc2 l       .debug_str	00000000 
00013cce l       .debug_str	00000000 
0000be46 l       .debug_str	00000000 
00013d15 l       .debug_str	00000000 
0000be9b l       .debug_str	00000000 
0000bf65 l       .debug_str	00000000 
00013d60 l       .debug_str	00000000 
0005ab3e l       .debug_str	00000000 
00013d66 l       .debug_str	00000000 
00013df2 l       .debug_str	00000000 
00013e0d l       .debug_str	00000000 
00013e3d l       .debug_str	00000000 
00013e72 l       .debug_str	00000000 
00013ea2 l       .debug_str	00000000 
00013eb8 l       .debug_str	00000000 
00013eee l       .debug_str	00000000 
00013f09 l       .debug_str	00000000 
00013f43 l       .debug_str	00000000 
00013f62 l       .debug_str	00000000 
00013f9e l       .debug_str	00000000 
00013fc4 l       .debug_str	00000000 
00013fd0 l       .debug_str	00000000 
00013ff7 l       .debug_str	00000000 
00014004 l       .debug_str	00000000 
00014211 l       .debug_str	00000000 
00014052 l       .debug_str	00000000 
00014281 l       .debug_str	00000000 
000140a3 l       .debug_str	00000000 
000140f5 l       .debug_str	00000000 
00014101 l       .debug_str	00000000 
0001414c l       .debug_str	00000000 
0001415e l       .debug_str	00000000 
000141a1 l       .debug_str	00000000 
000141ac l       .debug_str	00000000 
00014208 l       .debug_str	00000000 
00014219 l       .debug_str	00000000 
00014278 l       .debug_str	00000000 
0001428c l       .debug_str	00000000 
000142e2 l       .debug_str	00000000 
00014377 l       .debug_str	00000000 
00014383 l       .debug_str	00000000 
0001441d l       .debug_str	00000000 
0001442e l       .debug_str	00000000 
00014453 l       .debug_str	00000000 
000144fc l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0005ac2d l       .debug_str	00000000 
0001450d l       .debug_str	00000000 
00014595 l       .debug_str	00000000 
0001454c l       .debug_str	00000000 
00014590 l       .debug_str	00000000 
000145da l       .debug_str	00000000 
0001461b l       .debug_str	00000000 
00014640 l       .debug_str	00000000 
00014691 l       .debug_str	00000000 
000146d6 l       .debug_str	00000000 
00014729 l       .debug_str	00000000 
0001478a l       .debug_str	00000000 
000147f1 l       .debug_str	00000000 
0000ab71 l       .debug_str	00000000 
00014838 l       .debug_str	00000000 
00014883 l       .debug_str	00000000 
00014890 l       .debug_str	00000000 
0001496a l       .debug_str	00000000 
00014962 l       .debug_str	00000000 
00014972 l       .debug_str	00000000 
00003cf0 l       .debug_str	00000000 
0001498e l       .debug_str	00000000 
00014a03 l       .debug_str	00000000 
00014a2e l       .debug_str	00000000 
00014aa7 l       .debug_str	00000000 
00014ab1 l       .debug_str	00000000 
00014ad7 l       .debug_str	00000000 
00014b10 l       .debug_str	00000000 
00011784 l       .debug_str	00000000 
00014b28 l       .debug_str	00000000 
00014b61 l       .debug_str	00000000 
00014b99 l       .debug_str	00000000 
0000ac06 l       .debug_str	00000000 
00014bd2 l       .debug_str	00000000 
00014c0d l       .debug_str	00000000 
00014c51 l       .debug_str	00000000 
00014c97 l       .debug_str	00000000 
00014cd3 l       .debug_str	00000000 
00014cfb l       .debug_str	00000000 
00014d37 l       .debug_str	00000000 
00014d5b l       .debug_str	00000000 
00014db8 l       .debug_str	00000000 
00014dcc l       .debug_str	00000000 
00014e1d l       .debug_str	00000000 
00015d05 l       .debug_str	00000000 
00014e29 l       .debug_str	00000000 
00014e7a l       .debug_str	00000000 
00014e91 l       .debug_str	00000000 
00014ee2 l       .debug_str	00000000 
00014f00 l       .debug_str	00000000 
00014f51 l       .debug_str	00000000 
00014f63 l       .debug_str	00000000 
00014fbb l       .debug_str	00000000 
00014fd1 l       .debug_str	00000000 
00015034 l       .debug_str	00000000 
0001505f l       .debug_str	00000000 
000150c2 l       .debug_str	00000000 
00015137 l       .debug_str	00000000 
0001519b l       .debug_str	00000000 
000151a5 l       .debug_str	00000000 
00015210 l       .debug_str	00000000 
0001521f l       .debug_str	00000000 
0001528b l       .debug_str	00000000 
000152bd l       .debug_str	00000000 
000152e3 l       .debug_str	00000000 
00015352 l       .debug_str	00000000 
00015372 l       .debug_str	00000000 
000153e2 l       .debug_str	00000000 
00015403 l       .debug_str	00000000 
000130b9 l       .debug_str	00000000 
00015477 l       .debug_str	00000000 
000154f7 l       .debug_str	00000000 
0001553d l       .debug_str	00000000 
00015566 l       .debug_str	00000000 
0001556d l       .debug_str	00000000 
000155a5 l       .debug_str	00000000 
000155e4 l       .debug_str	00000000 
000155eb l       .debug_str	00000000 
00015664 l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
000156fb l       .debug_str	00000000 
00015779 l       .debug_str	00000000 
00015783 l       .debug_str	00000000 
00015811 l       .debug_str	00000000 
000158bd l       .debug_str	00000000 
00015904 l       .debug_str	00000000 
00015911 l       .debug_str	00000000 
0001595e l       .debug_str	00000000 
00015971 l       .debug_str	00000000 
000159c3 l       .debug_str	00000000 
00015a33 l       .debug_str	00000000 
00013625 l       .debug_str	00000000 
00015a93 l       .debug_str	00000000 
00015aa4 l       .debug_str	00000000 
00015b09 l       .debug_str	00000000 
00015b39 l       .debug_str	00000000 
00015b42 l       .debug_str	00000000 
00015b7e l       .debug_str	00000000 
00015b92 l       .debug_str	00000000 
00015bcd l       .debug_str	00000000 
00015c13 l       .debug_str	00000000 
00015c31 l       .debug_str	00000000 
00015c61 l       .debug_str	00000000 
00015c6a l       .debug_str	00000000 
00015ca4 l       .debug_str	00000000 
00015cb6 l       .debug_str	00000000 
00015ce4 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00015ceb l       .debug_str	00000000 
00015cf7 l       .debug_str	00000000 
00015d01 l       .debug_str	00000000 
00015d0b l       .debug_str	00000000 
00015d2e l       .debug_str	00000000 
00033c9e l       .debug_str	00000000 
00015d83 l       .debug_str	00000000 
00015de3 l       .debug_str	00000000 
00015def l       .debug_str	00000000 
00015e3f l       .debug_str	00000000 
00015ea2 l       .debug_str	00000000 
00015f09 l       .debug_str	00000000 
00015f78 l       .debug_str	00000000 
0005ae34 l       .debug_str	00000000 
00012b81 l       .debug_str	00000000 
00016008 l       .debug_str	00000000 
0005bed1 l       .debug_str	00000000 
00010f77 l       .debug_str	00000000 
0000bfe3 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
0001f35a l       .debug_str	00000000 
0005a699 l       .debug_str	00000000 
0001602f l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00016036 l       .debug_str	00000000 
0005ae15 l       .debug_str	00000000 
00016043 l       .debug_str	00000000 
0005abbb l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0001604e l       .debug_str	00000000 
000611df l       .debug_str	00000000 
000160a2 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
0005cba2 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
000160ad l       .debug_str	00000000 
000160d8 l       .debug_str	00000000 
0005f664 l       .debug_str	00000000 
00002389 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
000160e4 l       .debug_str	00000000 
0001611e l       .debug_str	00000000 
00016157 l       .debug_str	00000000 
00016166 l       .debug_str	00000000 
000161a9 l       .debug_str	00000000 
0005c0e6 l       .debug_str	00000000 
00038a71 l       .debug_str	00000000 
0005db0b l       .debug_str	00000000 
000161eb l       .debug_str	00000000 
0001620f l       .debug_str	00000000 
0001577e l       .debug_str	00000000 
0005a66a l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
0001622f l       .debug_str	00000000 
0004680f l       .debug_str	00000000 
0001626a l       .debug_str	00000000 
00016271 l       .debug_str	00000000 
0003740b l       .debug_str	00000000 
000007da l       .debug_str	00000000 
000162b2 l       .debug_str	00000000 
000162f9 l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
0001f81d l       .debug_str	00000000 
000162d3 l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
000168c3 l       .debug_str	00000000 
000162f5 l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
0001167b l       .debug_str	00000000 
00011686 l       .debug_str	00000000 
00010a89 l       .debug_str	00000000 
0001167f l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
0000b6ea l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001329b l       .debug_str	00000000 
000132f3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00013340 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0001334a l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
00013356 l       .debug_str	00000000 
000160be l       .debug_str	00000000 
000160b2 l       .debug_str	00000000 
000160dd l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea10 l       .debug_str	00000000 
000399b5 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005e79c l       .debug_str	00000000 
00035790 l       .debug_str	00000000 
00013367 l       .debug_str	00000000 
0001336c l       .debug_str	00000000 
00013372 l       .debug_str	00000000 
000165c6 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00012626 l       .debug_str	00000000 
000116df l       .debug_str	00000000 
00012610 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0001337a l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
00013380 l       .debug_str	00000000 
00033332 l       .debug_str	00000000 
0005a727 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001f32a l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005a79d l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000394cb l       .debug_str	00000000 
0005cbb4 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a826 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4a7 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0005e9b8 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0001338b l       .debug_str	00000000 
000133b4 l       .debug_str	00000000 
000133c3 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000114d7 l       .debug_str	00000000 
000114db l       .debug_str	00000000 
00016160 l       .debug_str	00000000 
000133dd l       .debug_str	00000000 
00013406 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
0001343b l       .debug_str	00000000 
0001344f l       .debug_str	00000000 
00013462 l       .debug_str	00000000 
000134ae l       .debug_str	00000000 
000134bc l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
0003576a l       .debug_str	00000000 
000134c4 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00011e0e l       .debug_str	00000000 
000365e4 l       .debug_str	00000000 
000612d4 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013615 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00011789 l       .debug_str	00000000 
000229c9 l       .debug_str	00000000 
0005f727 l       .debug_str	00000000 
0001628c l       .debug_str	00000000 
00043b6c l       .debug_str	00000000 
00012618 l       .debug_str	00000000 
000134ce l       .debug_str	00000000 
0005cfe1 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016202 l       .debug_str	00000000 
0005c24a l       .debug_str	00000000 
00014ac9 l       .debug_str	00000000 
00016242 l       .debug_str	00000000 
00012622 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00015f9c l       .debug_str	00000000 
00015f2d l       .debug_str	00000000 
000134d4 l       .debug_str	00000000 
000134da l       .debug_str	00000000 
00013503 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00014ab2 l       .debug_str	00000000 
0001350f l       .debug_str	00000000 
00012b85 l       .debug_str	00000000 
0001353c l       .debug_str	00000000 
0003e5ff l       .debug_str	00000000 
00013547 l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
00013570 l       .debug_str	00000000 
00013577 l       .debug_str	00000000 
000135a1 l       .debug_str	00000000 
0002053d l       .debug_str	00000000 
000135a5 l       .debug_str	00000000 
0002219c l       .debug_str	00000000 
000135ae l       .debug_str	00000000 
000135f0 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00013603 l       .debug_str	00000000 
0005f631 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
0004aebe l       .debug_str	00000000 
0001361e l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
0001362d l       .debug_str	00000000 
00013637 l       .debug_str	00000000 
000162df l       .debug_str	00000000 
00015a9f l       .debug_str	00000000 
0001363c l       .debug_str	00000000 
000136c2 l       .debug_str	00000000 
000136cc l       .debug_str	00000000 
0001375e l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
000137a4 l       .debug_str	00000000 
00013838 l       .debug_str	00000000 
0001389a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 embedded_graphics.94s3esdv-cgu.0
00016cbb l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
0005e9b8 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000394cb l       .debug_str	00000000 
0005cbb4 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a826 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4a7 l       .debug_str	00000000 
0000e8a0 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000e738 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00018c29 l       .debug_str	00000000 
0000c21f l       .debug_str	00000000 
0000c284 l       .debug_str	00000000 
000163b2 l       .debug_str	00000000 
000163bb l       .debug_str	00000000 
000163c3 l       .debug_str	00000000 
000163cc l       .debug_str	00000000 
00034a70 l       .debug_str	00000000 
000163d9 l       .debug_str	00000000 
000163e9 l       .debug_str	00000000 
000163fa l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00018c74 l       .debug_str	00000000 
0000efc8 l       .debug_str	00000000 
0001640b l       .debug_str	00000000 
0000e718 l       .debug_str	00000000 
0000e726 l       .debug_str	00000000 
00018cda l       .debug_str	00000000 
00016414 l       .debug_str	00000000 
0001641a l       .debug_str	00000000 
00016425 l       .debug_str	00000000 
0001642f l       .debug_str	00000000 
00016439 l       .debug_str	00000000 
0000b802 l       .debug_str	00000000 
00016481 l       .debug_str	00000000 
0000b8eb l       .debug_str	00000000 
000164c9 l       .debug_str	00000000 
00016511 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0001651a l       .debug_str	00000000 
00016543 l       .debug_str	00000000 
0001654c l       .debug_str	00000000 
000165a9 l       .debug_str	00000000 
0005f727 l       .debug_str	00000000 
000165cf l       .debug_str	00000000 
000165f7 l       .debug_str	00000000 
00016629 l       .debug_str	00000000 
00013c1f l       .debug_str	00000000 
0001665a l       .debug_str	00000000 
000166b7 l       .debug_str	00000000 
00016714 l       .debug_str	00000000 
00016771 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
000167a3 l       .debug_str	00000000 
000167e8 l       .debug_str	00000000 
0001c3c0 l       .debug_str	00000000 
000167f4 l       .debug_str	00000000 
00059c31 l       .debug_str	00000000 
00016830 l       .debug_str	00000000 
0000e851 l       .debug_str	00000000 
00016874 l       .debug_str	00000000 
000168bb l       .debug_str	00000000 
000168c9 l       .debug_str	00000000 
00016910 l       .debug_str	00000000 
0001691e l       .debug_str	00000000 
0001695e l       .debug_str	00000000 
00016966 l       .debug_str	00000000 
0000e8d8 l       .debug_str	00000000 
00016973 l       .debug_str	00000000 
000169ae l       .debug_str	00000000 
000169ec l       .debug_str	00000000 
00016a1c l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00016a60 l       .debug_str	00000000 
00016a74 l       .debug_str	00000000 
00016aa4 l       .debug_str	00000000 
00016ab8 l       .debug_str	00000000 
0003f8ef l       .debug_str	00000000 
00016b03 l       .debug_str	00000000 
00016b5a l       .debug_str	00000000 
00016b69 l       .debug_str	00000000 
00016bb4 l       .debug_str	00000000 
0000be4e l       .debug_str	00000000 
00016c2b l       .debug_str	00000000 
00016cb0 l       .debug_str	00000000 
0000bf06 l       .debug_str	00000000 
00016d32 l       .debug_str	00000000 
00016db7 l       .debug_str	00000000 
00016dc2 l       .debug_str	00000000 
0005a66a l       .debug_str	00000000 
00016e4b l       .debug_str	00000000 
0001fc8b l       .debug_str	00000000 
00016ec2 l       .debug_str	00000000 
0005c058 l       .debug_str	00000000 
00016f57 l       .debug_str	00000000 
00016fee l       .debug_str	00000000 
00017089 l       .debug_str	00000000 
0001711e l       .debug_str	00000000 
000171b5 l       .debug_str	00000000 
00017250 l       .debug_str	00000000 
00017318 l       .debug_str	00000000 
00017323 l       .debug_str	00000000 
000173ef l       .debug_str	00000000 
0001747f l       .debug_str	00000000 
0001748b l       .debug_str	00000000 
00017531 l       .debug_str	00000000 
0001753d l       .debug_str	00000000 
000175e1 l       .debug_str	00000000 
00017683 l       .debug_str	00000000 
00017727 l       .debug_str	00000000 
0001777b l       .debug_str	00000000 
000177d0 l       .debug_str	00000000 
00017825 l       .debug_str	00000000 
00013625 l       .debug_str	00000000 
000178a8 l       .debug_str	00000000 
0001792c l       .debug_str	00000000 
000179b0 l       .debug_str	00000000 
00002878 l       .debug_str	00000000 
000179f7 l       .debug_str	00000000 
0000287e l       .debug_str	00000000 
00017a3e l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
00017a85 l       .debug_str	00000000 
00017b03 l       .debug_str	00000000 
00017b82 l       .debug_str	00000000 
00017c1d l       .debug_str	00000000 
00017cb1 l       .debug_str	00000000 
00017cfe l       .debug_str	00000000 
00017d0a l       .debug_str	00000000 
00017d6d l       .debug_str	00000000 
00017db5 l       .debug_str	00000000 
000114d7 l       .debug_str	00000000 
00017dbd l       .debug_str	00000000 
00017e51 l       .debug_str	00000000 
00017eb7 l       .debug_str	00000000 
00017f48 l       .debug_str	00000000 
00017fe7 l       .debug_str	00000000 
00018078 l       .debug_str	00000000 
00018117 l       .debug_str	00000000 
000181b9 l       .debug_str	00000000 
0001824a l       .debug_str	00000000 
000182f8 l       .debug_str	00000000 
000183a8 l       .debug_str	00000000 
0001845c l       .debug_str	00000000 
0001854f l       .debug_str	00000000 
0001855a l       .debug_str	00000000 
00018651 l       .debug_str	00000000 
000186fd l       .debug_str	00000000 
00018707 l       .debug_str	00000000 
00018779 l       .debug_str	00000000 
000187ee l       .debug_str	00000000 
00018861 l       .debug_str	00000000 
000188d2 l       .debug_str	00000000 
00018945 l       .debug_str	00000000 
000189bc l       .debug_str	00000000 
00018a31 l       .debug_str	00000000 
00018aa6 l       .debug_str	00000000 
00018b16 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000bb2d l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0000bb39 l       .debug_str	00000000 
00018ba2 l       .debug_str	00000000 
0001f35a l       .debug_str	00000000 
00018ba8 l       .debug_str	00000000 
0001395a l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
000160dd l       .debug_str	00000000 
0001604e l       .debug_str	00000000 
000168c3 l       .debug_str	00000000 
00018bab l       .debug_str	00000000 
00018bb5 l       .debug_str	00000000 
00018bbf l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00018bc9 l       .debug_str	00000000 
00018bfa l       .debug_str	00000000 
0006174c l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
00018c2f l       .debug_str	00000000 
00018c39 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00018c43 l       .debug_str	00000000 
00018c4c l       .debug_str	00000000 
00018c7b l       .debug_str	00000000 
00018c88 l       .debug_str	00000000 
00018c8b l       .debug_str	00000000 
00018c8e l       .debug_str	00000000 
00018c91 l       .debug_str	00000000 
00018c94 l       .debug_str	00000000 
00018c97 l       .debug_str	00000000 
00018c9a l       .debug_str	00000000 
00018ce8 l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
0001167f l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
00010a89 l       .debug_str	00000000 
00011692 l       .debug_str	00000000 
00018d58 l       .debug_str	00000000 
00018d32 l       .debug_str	00000000 
00018d8b l       .debug_str	00000000 
00018d66 l       .debug_str	00000000 
00018dbc l       .debug_str	00000000 
00018d98 l       .debug_str	00000000 
00018ded l       .debug_str	00000000 
00018dc8 l       .debug_str	00000000 
00018e21 l       .debug_str	00000000 
00018dfa l       .debug_str	00000000 
00018e56 l       .debug_str	00000000 
00018e30 l       .debug_str	00000000 
00018e8a l       .debug_str	00000000 
00018e64 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000162fd l       .debug_str	00000000 
0001635d l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00018bb0 l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
00018bba l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00018bc4 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea10 l       .debug_str	00000000 
000399b5 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005e79c l       .debug_str	00000000 
00035790 l       .debug_str	00000000 
00013367 l       .debug_str	00000000 
0001336c l       .debug_str	00000000 
00013372 l       .debug_str	00000000 
000165c6 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00038681 l       .debug_str	00000000 
00033332 l       .debug_str	00000000 
0005a727 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f32a l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005a79d l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00011784 l     F .text	00000044 _ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE
00011878 l     F .text	0000006e _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E
000118e6 l     F .text	00000038 _ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE
0001191e l     F .text	0000001a _ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E
00000000 l    df *ABS*	00000000 hash32.79y5bd3b-cgu.0
00014f51 l       .debug_str	00000000 
00019372 l       .debug_str	00000000 
0000be9b l       .debug_str	00000000 
0000bf65 l       .debug_str	00000000 
000193bd l       .debug_str	00000000 
00013eee l       .debug_str	00000000 
000193f3 l       .debug_str	00000000 
00013f43 l       .debug_str	00000000 
0001942d l       .debug_str	00000000 
00019469 l       .debug_str	00000000 
00013fc4 l       .debug_str	00000000 
0001948f l       .debug_str	00000000 
00013ff7 l       .debug_str	00000000 
000194b6 l       .debug_str	00000000 
00014211 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00019504 l       .debug_str	00000000 
00014281 l       .debug_str	00000000 
00019555 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000195a7 l       .debug_str	00000000 
0005ab3e l       .debug_str	00000000 
000195fc l       .debug_str	00000000 
00014377 l       .debug_str	00000000 
00019691 l       .debug_str	00000000 
000196df l       .debug_str	00000000 
000229c9 l       .debug_str	00000000 
000196ee l       .debug_str	00000000 
0001973f l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00019757 l       .debug_str	00000000 
000197ac l       .debug_str	00000000 
000197c8 l       .debug_str	00000000 
000197d0 l       .debug_str	00000000 
00019816 l       .debug_str	00000000 
0001981e l       .debug_str	00000000 
000141a1 l       .debug_str	00000000 
00019867 l       .debug_str	00000000 
0005c058 l       .debug_str	00000000 
000198d6 l       .debug_str	00000000 
00014e1d l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00019927 l       .debug_str	00000000 
00019978 l       .debug_str	00000000 
00014fbb l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
0001353c l       .debug_str	00000000 
0003e5ff l       .debug_str	00000000 
00013547 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005cfe1 l       .debug_str	00000000 
000612d4 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016202 l       .debug_str	00000000 
000199d0 l       .debug_str	00000000 
00019a33 l       .debug_str	00000000 
00019a5d l       .debug_str	00000000 
00019ac0 l       .debug_str	00000000 
00019ac9 l       .debug_str	00000000 
00019b36 l       .debug_str	00000000 
00019b48 l       .debug_str	00000000 
00003c53 l       .debug_str	00000000 
00019bb9 l       .debug_str	00000000 
00013625 l       .debug_str	00000000 
00019c19 l       .debug_str	00000000 
00019c4c l       .debug_str	00000000 
00019cb6 l       .debug_str	00000000 
00019ce9 l       .debug_str	00000000 
00019cee l       .debug_str	00000000 
00019d52 l       .debug_str	00000000 
0005e911 l       .debug_str	00000000 
00019dad l       .debug_str	00000000 
00019de9 l       .debug_str	00000000 
00019df7 l       .debug_str	00000000 
00019e26 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000160dd l       .debug_str	00000000 
0005a699 l       .debug_str	00000000 
0001602f l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0005ae15 l       .debug_str	00000000 
0005abbb l       .debug_str	00000000 
00016036 l       .debug_str	00000000 
00016043 l       .debug_str	00000000 
0001f35a l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
000160a2 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
0005cba2 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
0005f664 l       .debug_str	00000000 
00002389 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
000160e4 l       .debug_str	00000000 
0001611e l       .debug_str	00000000 
00016157 l       .debug_str	00000000 
00016166 l       .debug_str	00000000 
000161a9 l       .debug_str	00000000 
0005c0e6 l       .debug_str	00000000 
00038a71 l       .debug_str	00000000 
0005db0b l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
000161eb l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
0002219c l       .debug_str	00000000 
00035d03 l       .debug_str	00000000 
0005c24a l       .debug_str	00000000 
00019e2e l       .debug_str	00000000 
00019e46 l       .debug_str	00000000 
000611df l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
00019e63 l       .debug_str	00000000 
00011454 l       .debug_str	00000000 
00019e7c l       .debug_str	00000000 
00019e98 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00018e98 l       .debug_str	00000000 
00018eed l       .debug_str	00000000 
00018f37 l       .debug_str	00000000 
00018f3e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00010a91 l       .debug_str	00000000 
0001169a l       .debug_str	00000000 
000116a5 l       .debug_str	00000000 
000116b0 l       .debug_str	00000000 
00019e40 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00012626 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00013380 l       .debug_str	00000000 
0005e79c l       .debug_str	00000000 
00033332 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0005e9b8 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00018f46 l       .debug_str	00000000 
000133b4 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000133c3 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000114d7 l       .debug_str	00000000 
000114db l       .debug_str	00000000 
00016160 l       .debug_str	00000000 
00018f6f l       .debug_str	00000000 
00013406 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
0005a727 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
0001343b l       .debug_str	00000000 
0001344f l       .debug_str	00000000 
00018f98 l       .debug_str	00000000 
000134ae l       .debug_str	00000000 
000134bc l       .debug_str	00000000 
000134c4 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
00012b85 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00018fe4 l       .debug_str	00000000 
0000ae86 l       .debug_str	00000000 
0001900d l       .debug_str	00000000 
00019017 l       .debug_str	00000000 
0005a79d l       .debug_str	00000000 
000168c3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000574 l       .debug_str	00000000 
0005a66a l       .debug_str	00000000 
0001901b l       .debug_str	00000000 
0005ab8f l       .debug_str	00000000 
00019e92 l       .debug_str	00000000 
00019e5c l       .debug_str	00000000 
00019025 l       .debug_str	00000000 
00013ac7 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001f32a l       .debug_str	00000000 
0001907a l       .debug_str	00000000 
000190b8 l       .debug_str	00000000 
000190d0 l       .debug_str	00000000 
00013b0f l       .debug_str	00000000 
0001910e l       .debug_str	00000000 
00012b82 l       .debug_str	00000000 
0001c3c0 l       .debug_str	00000000 
00019173 l       .debug_str	00000000 
000191a3 l       .debug_str	00000000 
000191ca l       .debug_str	00000000 
00013cc2 l       .debug_str	00000000 
000191f0 l       .debug_str	00000000 
00019235 l       .debug_str	00000000 
00019241 l       .debug_str	00000000 
00019287 l       .debug_str	00000000 
00019294 l       .debug_str	00000000 
000192da l       .debug_str	00000000 
000192e7 l       .debug_str	00000000 
00019325 l       .debug_str	00000000 
0001932b l       .debug_str	00000000 
0000be46 l       .debug_str	00000000 
00011ace l     F .text	00000034 _ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE
00011b38 l     F .text	00000018 _ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E
00011b62 l     F .text	0000003e _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE
00011ba0 l     F .text	00000040 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE
00011c70 l     F .text	0000011c _ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE
00000000 l    df *ABS*	00000000 4iim1qfb3qo0ur8y
00019f1c l       .debug_str	00000000 
00019f1a l       .debug_str	00000000 
00019f6d l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00019ea1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00012b85 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00019ec0 l       .debug_str	00000000 
00019f11 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 log.9af4yuww-cgu.0
0001c0eb l       .debug_str	00000000 
00012c07 l       .debug_str	00000000 
00012c0f l       .debug_str	00000000 
00012c16 l       .debug_str	00000000 
00011f4f l       .debug_str	00000000 
0001f5f1 l       .debug_str	00000000 
000116df l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0001a295 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
0001a299 l       .debug_str	00000000 
00019816 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
0003576a l       .debug_str	00000000 
000612d4 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013615 l       .debug_str	00000000 
0001a317 l       .debug_str	00000000 
0005cfe1 l       .debug_str	00000000 
0004680f l       .debug_str	00000000 
000600b5 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0001a32e l       .debug_str	00000000 
00013503 l       .debug_str	00000000 
0001a357 l       .debug_str	00000000 
0001a389 l       .debug_str	00000000 
00013380 l       .debug_str	00000000 
00038681 l       .debug_str	00000000 
00033332 l       .debug_str	00000000 
0005e9b8 l       .debug_str	00000000 
0000e8a0 l       .debug_str	00000000 
0001a39b l       .debug_str	00000000 
0001a3c4 l       .debug_str	00000000 
000133c3 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000114d7 l       .debug_str	00000000 
000114db l       .debug_str	00000000 
00016160 l       .debug_str	00000000 
0001a3e9 l       .debug_str	00000000 
00013406 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
0001a412 l       .debug_str	00000000 
0001a43c l       .debug_str	00000000 
0001a465 l       .debug_str	00000000 
0001a4b1 l       .debug_str	00000000 
000134bc l       .debug_str	00000000 
0001a4d5 l       .debug_str	00000000 
000134c4 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
0000b253 l       .debug_str	00000000 
0000b294 l       .debug_str	00000000 
0002219c l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0005ac2d l       .debug_str	00000000 
0001a4e3 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00011e0e l       .debug_str	00000000 
000365e4 l       .debug_str	00000000 
0005b980 l       .debug_str	00000000 
0004e9d3 l       .debug_str	00000000 
0005c6e5 l       .debug_str	00000000 
0005dffe l       .debug_str	00000000 
000229c9 l       .debug_str	00000000 
0001f24b l       .debug_str	00000000 
00043b6c l       .debug_str	00000000 
0003928b l       .debug_str	00000000 
0005ab3e l       .debug_str	00000000 
0001f55b l       .debug_str	00000000 
0001f503 l       .debug_str	00000000 
0001a4f8 l       .debug_str	00000000 
0001a502 l       .debug_str	00000000 
0001f3e3 l       .debug_str	00000000 
00034a70 l       .debug_str	00000000 
0001f1bb l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0001ced2 l       .debug_str	00000000 
0005f727 l       .debug_str	00000000 
0001f594 l       .debug_str	00000000 
0005cba2 l       .debug_str	00000000 
0001f573 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
0005a66a l       .debug_str	00000000 
0005f664 l       .debug_str	00000000 
0001f20c l       .debug_str	00000000 
000134d4 l       .debug_str	00000000 
0001a50b l       .debug_str	00000000 
0001a534 l       .debug_str	00000000 
0001a542 l       .debug_str	00000000 
0001a54f l       .debug_str	00000000 
0001a562 l       .debug_str	00000000 
0003e5ff l       .debug_str	00000000 
0001a57b l       .debug_str	00000000 
00012b85 l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
0001a590 l       .debug_str	00000000 
0001a60c l       .debug_str	00000000 
0001a5a3 l       .debug_str	00000000 
0001a5e5 l       .debug_str	00000000 
0001a5fa l       .debug_str	00000000 
0005f631 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
0004aebe l       .debug_str	00000000 
0001a617 l       .debug_str	00000000 
0001a621 l       .debug_str	00000000 
0001a653 l       .debug_str	00000000 
0001a667 l       .debug_str	00000000 
0001a67c l       .debug_str	00000000 
0001e7b6 l       .debug_str	00000000 
0001e9bf l       .debug_str	00000000 
0001a683 l       .debug_str	00000000 
0001a68e l       .debug_str	00000000 
0001a712 l       .debug_str	00000000 
0001a740 l       .debug_str	00000000 
0001a7c6 l       .debug_str	00000000 
00042a6d l       .debug_str	00000000 
0001a7ee l       .debug_str	00000000 
0001a7ff l       .debug_str	00000000 
0001a889 l       .debug_str	00000000 
0001a8a7 l       .debug_str	00000000 
0001a935 l       .debug_str	00000000 
0001a95c l       .debug_str	00000000 
0001a9eb l       .debug_str	00000000 
0001aa33 l       .debug_str	00000000 
0001aa62 l       .debug_str	00000000 
0001aaaa l       .debug_str	00000000 
0001aac9 l       .debug_str	00000000 
0001ab11 l       .debug_str	00000000 
0001ab21 l       .debug_str	00000000 
0001ab69 l       .debug_str	00000000 
0001ab7a l       .debug_str	00000000 
0001abc2 l       .debug_str	00000000 
0001abca l       .debug_str	00000000 
0001ac12 l       .debug_str	00000000 
0001ac1c l       .debug_str	00000000 
0001ac64 l       .debug_str	00000000 
0001ac7e l       .debug_str	00000000 
0001acc6 l       .debug_str	00000000 
0001acdf l       .debug_str	00000000 
0001ad27 l       .debug_str	00000000 
0001ad3a l       .debug_str	00000000 
0001ad82 l       .debug_str	00000000 
0001ad8b l       .debug_str	00000000 
0000b8eb l       .debug_str	00000000 
0001add3 l       .debug_str	00000000 
0001ae1d l       .debug_str	00000000 
0001ae68 l       .debug_str	00000000 
0001aea6 l       .debug_str	00000000 
0001aed7 l       .debug_str	00000000 
000190b8 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0001af15 l       .debug_str	00000000 
0001af3e l       .debug_str	00000000 
0001af49 l       .debug_str	00000000 
0001af6e l       .debug_str	00000000 
0001afcd l       .debug_str	00000000 
00033c9e l       .debug_str	00000000 
0001c3c0 l       .debug_str	00000000 
000160dd l       .debug_str	00000000 
0001b034 l       .debug_str	00000000 
0001b05e l       .debug_str	00000000 
0001b086 l       .debug_str	00000000 
0001b0be l       .debug_str	00000000 
0001b0ef l       .debug_str	00000000 
0001b0f9 l       .debug_str	00000000 
0001b156 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
0001b188 l       .debug_str	00000000 
0001b1ae l       .debug_str	00000000 
0001b1d0 l       .debug_str	00000000 
0001b1f6 l       .debug_str	00000000 
0001b218 l       .debug_str	00000000 
0001b241 l       .debug_str	00000000 
0001b266 l       .debug_str	00000000 
0001b2ae l       .debug_str	00000000 
0001b2bb l       .debug_str	00000000 
0001b2c4 l       .debug_str	00000000 
0001b34e l       .debug_str	00000000 
00011f8e l       .debug_str	00000000 
0001b36b l       .debug_str	00000000 
0001b3f7 l       .debug_str	00000000 
0001b414 l       .debug_str	00000000 
0001b434 l       .debug_str	00000000 
0000e8d8 l       .debug_str	00000000 
0001b43b l       .debug_str	00000000 
0001b476 l       .debug_str	00000000 
0001b4a8 l       .debug_str	00000000 
0001b4b9 l       .debug_str	00000000 
0001b4f4 l       .debug_str	00000000 
0001b53a l       .debug_str	00000000 
00016aa4 l       .debug_str	00000000 
0001b56a l       .debug_str	00000000 
0001b59a l       .debug_str	00000000 
0001b5b8 l       .debug_str	00000000 
0001b5e8 l       .debug_str	00000000 
0001b5fb l       .debug_str	00000000 
0001b62b l       .debug_str	00000000 
0001b640 l       .debug_str	00000000 
0001b670 l       .debug_str	00000000 
0001b68c l       .debug_str	00000000 
0001b6bc l       .debug_str	00000000 
0001b6da l       .debug_str	00000000 
0001b70a l       .debug_str	00000000 
0001b725 l       .debug_str	00000000 
0001b755 l       .debug_str	00000000 
0001b779 l       .debug_str	00000000 
0001b7a9 l       .debug_str	00000000 
0001b7e3 l       .debug_str	00000000 
0001b813 l       .debug_str	00000000 
0001b838 l       .debug_str	00000000 
0001b868 l       .debug_str	00000000 
0001b892 l       .debug_str	00000000 
0001b8c8 l       .debug_str	00000000 
0001b8f9 l       .debug_str	00000000 
0001b933 l       .debug_str	00000000 
0001b968 l       .debug_str	00000000 
0001b9a4 l       .debug_str	00000000 
0001b9ca l       .debug_str	00000000 
0001b9ec l       .debug_str	00000000 
0001ba13 l       .debug_str	00000000 
0001ba36 l       .debug_str	00000000 
00014211 l       .debug_str	00000000 
0001ba84 l       .debug_str	00000000 
00014281 l       .debug_str	00000000 
0001bad5 l       .debug_str	00000000 
0001bb26 l       .debug_str	00000000 
0001bb33 l       .debug_str	00000000 
0001bb85 l       .debug_str	00000000 
0001bb93 l       .debug_str	00000000 
0001414c l       .debug_str	00000000 
0001bbde l       .debug_str	00000000 
0001bc29 l       .debug_str	00000000 
0001bc3d l       .debug_str	00000000 
0001bc80 l       .debug_str	00000000 
0001bc8d l       .debug_str	00000000 
000141a1 l       .debug_str	00000000 
0001bcd0 l       .debug_str	00000000 
00014208 l       .debug_str	00000000 
0001bd2c l       .debug_str	00000000 
00014278 l       .debug_str	00000000 
0001bd8b l       .debug_str	00000000 
0001bddd l       .debug_str	00000000 
0001be2f l       .debug_str	00000000 
0001be39 l       .debug_str	00000000 
0001be8e l       .debug_str	00000000 
0001bee3 l       .debug_str	00000000 
0001bf39 l       .debug_str	00000000 
000140f5 l       .debug_str	00000000 
0001bf8f l       .debug_str	00000000 
0001bfcb l       .debug_str	00000000 
000168c3 l       .debug_str	00000000 
0001c009 l       .debug_str	00000000 
0001c044 l       .debug_str	00000000 
00016043 l       .debug_str	00000000 
0001c04f l       .debug_str	00000000 
0001c096 l       .debug_str	00000000 
00011789 l       .debug_str	00000000 
0001c0ac l       .debug_str	00000000 
0001c13d l       .debug_str	00000000 
0001c153 l       .debug_str	00000000 
0001c198 l       .debug_str	00000000 
0001c1b2 l       .debug_str	00000000 
0001c215 l       .debug_str	00000000 
0001c235 l       .debug_str	00000000 
0001c274 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0001c2d5 l       .debug_str	00000000 
0001c314 l       .debug_str	00000000 
0001f3de l       .debug_str	00000000 
0001c33b l       .debug_str	00000000 
0001c37b l       .debug_str	00000000 
0001c3ae l       .debug_str	00000000 
0001c3c5 l       .debug_str	00000000 
0001c40b l       .debug_str	00000000 
0001c427 l       .debug_str	00000000 
0001c48b l       .debug_str	00000000 
0001c4ad l       .debug_str	00000000 
0001c4ef l       .debug_str	00000000 
0001c510 l       .debug_str	00000000 
0001c552 l       .debug_str	00000000 
0005d23e l       .debug_str	00000000 
0001c582 l       .debug_str	00000000 
0001c5c6 l       .debug_str	00000000 
0001c61b l       .debug_str	00000000 
0001c65f l       .debug_str	00000000 
0001c6b5 l       .debug_str	00000000 
0001c6f9 l       .debug_str	00000000 
0001c771 l       .debug_str	00000000 
0001c7b5 l       .debug_str	00000000 
0001c7f5 l       .debug_str	00000000 
0001c810 l       .debug_str	00000000 
0001c851 l       .debug_str	00000000 
0001c8a7 l       .debug_str	00000000 
0001c8eb l       .debug_str	00000000 
0001c918 l       .debug_str	00000000 
0001c95d l       .debug_str	00000000 
0001c9a5 l       .debug_str	00000000 
0001c9b6 l       .debug_str	00000000 
0001c9fe l       .debug_str	00000000 
0001ca0f l       .debug_str	00000000 
00033d84 l       .debug_str	00000000 
0001ca4a l       .debug_str	00000000 
0001ca86 l       .debug_str	00000000 
0001ca8c l       .debug_str	00000000 
0001cac2 l       .debug_str	00000000 
0001cad5 l       .debug_str	00000000 
0001cb0c l       .debug_str	00000000 
0001cb20 l       .debug_str	00000000 
0001cb62 l       .debug_str	00000000 
0001cb81 l       .debug_str	00000000 
0001cbc6 l       .debug_str	00000000 
0001cbe1 l       .debug_str	00000000 
0001cc46 l       .debug_str	00000000 
0001ccad l       .debug_str	00000000 
0001ccb8 l       .debug_str	00000000 
0001ccfe l       .debug_str	00000000 
0001cd44 l       .debug_str	00000000 
0001cd4e l       .debug_str	00000000 
0001cd95 l       .debug_str	00000000 
0001cda0 l       .debug_str	00000000 
0000ab71 l       .debug_str	00000000 
0001cde7 l       .debug_str	00000000 
0001ce30 l       .debug_str	00000000 
0001ce79 l       .debug_str	00000000 
0001ceb2 l       .debug_str	00000000 
0001cecd l       .debug_str	00000000 
0001cedc l       .debug_str	00000000 
0001cf15 l       .debug_str	00000000 
0001cf3a l       .debug_str	00000000 
0001cf73 l       .debug_str	00000000 
0001cfac l       .debug_str	00000000 
0001cfd2 l       .debug_str	00000000 
0001d00b l       .debug_str	00000000 
0001d049 l       .debug_str	00000000 
0001d083 l       .debug_str	00000000 
0001d08f l       .debug_str	00000000 
0001d0cb l       .debug_str	00000000 
0001d0de l       .debug_str	00000000 
0001d11a l       .debug_str	00000000 
0001d133 l       .debug_str	00000000 
0001d170 l       .debug_str	00000000 
0001d181 l       .debug_str	00000000 
00014e1d l       .debug_str	00000000 
0001d1d2 l       .debug_str	00000000 
00019f11 l       .debug_str	00000000 
0001d223 l       .debug_str	00000000 
0001d27e l       .debug_str	00000000 
0001d2e1 l       .debug_str	00000000 
0001d2fd l       .debug_str	00000000 
0001d35d l       .debug_str	00000000 
0001d3bd l       .debug_str	00000000 
0001d421 l       .debug_str	00000000 
0001d43c l       .debug_str	00000000 
0001d4a0 l       .debug_str	00000000 
0001d4ab l       .debug_str	00000000 
0001d515 l       .debug_str	00000000 
0001d524 l       .debug_str	00000000 
0001d593 l       .debug_str	00000000 
0001d5ab l       .debug_str	00000000 
0001d61b l       .debug_str	00000000 
0001d634 l       .debug_str	00000000 
0001d69f l       .debug_str	00000000 
0001d6b4 l       .debug_str	00000000 
0001d724 l       .debug_str	00000000 
0001d739 l       .debug_str	00000000 
0001d7a9 l       .debug_str	00000000 
0001d7bb l       .debug_str	00000000 
0000389e l       .debug_str	00000000 
0001d82c l       .debug_str	00000000 
0001d89d l       .debug_str	00000000 
0001d8b3 l       .debug_str	00000000 
0001d8c5 l       .debug_str	00000000 
0001d931 l       .debug_str	00000000 
0001d943 l       .debug_str	00000000 
0001d9af l       .debug_str	00000000 
0001d9be l       .debug_str	00000000 
0001da26 l       .debug_str	00000000 
0001da30 l       .debug_str	00000000 
0001daa4 l       .debug_str	00000000 
00001425 l       .debug_str	00000000 
0001daaf l       .debug_str	00000000 
0001db27 l       .debug_str	00000000 
0001db40 l       .debug_str	00000000 
0001dbb8 l       .debug_str	00000000 
0001dc4e l       .debug_str	00000000 
0001dc6a l       .debug_str	00000000 
0001dd00 l       .debug_str	00000000 
0001dd96 l       .debug_str	00000000 
0001de2c l       .debug_str	00000000 
00014377 l       .debug_str	00000000 
0001dea1 l       .debug_str	00000000 
0001df15 l       .debug_str	00000000 
0001df8e l       .debug_str	00000000 
0001e00d l       .debug_str	00000000 
0001e01e l       .debug_str	00000000 
0001e09e l       .debug_str	00000000 
0001e100 l       .debug_str	00000000 
0001f65e l       .debug_str	00000000 
0001e151 l       .debug_str	00000000 
0001e173 l       .debug_str	00000000 
0001e1a0 l       .debug_str	00000000 
0001e1cf l       .debug_str	00000000 
0001e1f1 l       .debug_str	00000000 
0001e218 l       .debug_str	00000000 
0001e241 l       .debug_str	00000000 
0001e273 l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
0001e2c3 l       .debug_str	00000000 
0001e309 l       .debug_str	00000000 
0001e31c l       .debug_str	00000000 
0001e370 l       .debug_str	00000000 
0001e3e2 l       .debug_str	00000000 
0001e454 l       .debug_str	00000000 
0001e4c6 l       .debug_str	00000000 
0001e515 l       .debug_str	00000000 
0001e543 l       .debug_str	00000000 
0001e54e l       .debug_str	00000000 
0001e5a8 l       .debug_str	00000000 
0001e620 l       .debug_str	00000000 
0001e698 l       .debug_str	00000000 
0001e6ed l       .debug_str	00000000 
0001e722 l       .debug_str	00000000 
0000b6c3 l       .debug_str	00000000 
0001e74d l       .debug_str	00000000 
0003f8ef l       .debug_str	00000000 
0001e77c l       .debug_str	00000000 
0001e7ac l       .debug_str	00000000 
0001e7c4 l       .debug_str	00000000 
0001e7f5 l       .debug_str	00000000 
0001e827 l       .debug_str	00000000 
0001e866 l       .debug_str	00000000 
0001e879 l       .debug_str	00000000 
0001e8b1 l       .debug_str	00000000 
0001e8bd l       .debug_str	00000000 
0001e8ed l       .debug_str	00000000 
0001e91e l       .debug_str	00000000 
0001e924 l       .debug_str	00000000 
0001e951 l       .debug_str	00000000 
0001e982 l       .debug_str	00000000 
0001e9b5 l       .debug_str	00000000 
0001e9cf l       .debug_str	00000000 
0001ea03 l       .debug_str	00000000 
0001ea36 l       .debug_str	00000000 
00059bc9 l       .debug_str	00000000 
0001ea83 l       .debug_str	00000000 
0001eacc l       .debug_str	00000000 
00059bac l       .debug_str	00000000 
0001eb17 l       .debug_str	00000000 
0001eb3f l       .debug_str	00000000 
0001eb85 l       .debug_str	00000000 
0001eb8b l       .debug_str	00000000 
0001ebb9 l       .debug_str	00000000 
0001ebd5 l       .debug_str	00000000 
0001ec02 l       .debug_str	00000000 
0001ec12 l       .debug_str	00000000 
0001ec6a l       .debug_str	00000000 
0001ecc3 l       .debug_str	00000000 
0001ece6 l       .debug_str	00000000 
0001ed15 l       .debug_str	00000000 
0001ed27 l       .debug_str	00000000 
0001ed5a l       .debug_str	00000000 
0001ed70 l       .debug_str	00000000 
0001edbd l       .debug_str	00000000 
0001ee10 l       .debug_str	00000000 
0001ee43 l       .debug_str	00000000 
0001ee53 l       .debug_str	00000000 
0001eea9 l       .debug_str	00000000 
0001ef03 l       .debug_str	00000000 
0001ef51 l       .debug_str	00000000 
0001efa3 l       .debug_str	00000000 
0001eff8 l       .debug_str	00000000 
0001f048 l       .debug_str	00000000 
0001f09c l       .debug_str	00000000 
0001f0f3 l       .debug_str	00000000 
0001f149 l       .debug_str	00000000 
0001f1a0 l       .debug_str	00000000 
0001f1ec l       .debug_str	00000000 
0001f234 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0001f269 l       .debug_str	00000000 
0001f295 l       .debug_str	00000000 
0001f2b1 l       .debug_str	00000000 
0001f2be l       .debug_str	00000000 
0001f2cc l       .debug_str	00000000 
0001f2d1 l       .debug_str	00000000 
0001f2d8 l       .debug_str	00000000 
0001f2ef l       .debug_str	00000000 
0001f305 l       .debug_str	00000000 
0000bb39 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0001f315 l       .debug_str	00000000 
0005ae15 l       .debug_str	00000000 
0001f338 l       .debug_str	00000000 
0005abbb l       .debug_str	00000000 
0001f35a l       .debug_str	00000000 
00018ba8 l       .debug_str	00000000 
0001f359 l       .debug_str	00000000 
0001395a l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0001f360 l       .debug_str	00000000 
0001f3b3 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0001f3d4 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
0001f3d9 l       .debug_str	00000000 
00018bbf l       .debug_str	00000000 
0001f3ed l       .debug_str	00000000 
0001f401 l       .debug_str	00000000 
0001f40a l       .debug_str	00000000 
0001f415 l       .debug_str	00000000 
0001f427 l       .debug_str	00000000 
0001f43b l       .debug_str	00000000 
0001f44c l       .debug_str	00000000 
0001f466 l       .debug_str	00000000 
0001f496 l       .debug_str	00000000 
0001f4b1 l       .debug_str	00000000 
00002389 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
000160e4 l       .debug_str	00000000 
0001611e l       .debug_str	00000000 
00016157 l       .debug_str	00000000 
00016166 l       .debug_str	00000000 
000161a9 l       .debug_str	00000000 
0005c0e6 l       .debug_str	00000000 
00038a71 l       .debug_str	00000000 
0005db0b l       .debug_str	00000000 
0001f4d1 l       .debug_str	00000000 
0001f4f0 l       .debug_str	00000000 
0006003b l       .debug_str	00000000 
0001f513 l       .debug_str	00000000 
0005ae34 l       .debug_str	00000000 
00012c5d l       .debug_str	00000000 
0001f519 l       .debug_str	00000000 
0000bfe3 l       .debug_str	00000000 
0001f521 l       .debug_str	00000000 
0005b9ed l       .debug_str	00000000 
000611df l       .debug_str	00000000 
00016036 l       .debug_str	00000000 
0005c45c l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
0001167f l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
0000b6ea l       .debug_str	00000000 
0001f529 l       .debug_str	00000000 
0000b786 l       .debug_str	00000000 
0000b796 l       .debug_str	00000000 
0000b7a1 l       .debug_str	00000000 
0005a699 l       .debug_str	00000000 
0001f548 l       .debug_str	00000000 
0001f567 l       .debug_str	00000000 
0001f579 l       .debug_str	00000000 
00016964 l       .debug_str	00000000 
00011784 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00001d54 l       .debug_str	00000000 
0006174c l       .debug_str	00000000 
0005c307 l       .debug_str	00000000 
0003740b l       .debug_str	00000000 
0001f5eb l       .debug_str	00000000 
0001a286 l       .debug_str	00000000 
0001f5fd l       .debug_str	00000000 
00060002 l       .debug_str	00000000 
0001f611 l       .debug_str	00000000 
0001f627 l       .debug_str	00000000 
0001f637 l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
0001f649 l       .debug_str	00000000 
0001f643 l       .debug_str	00000000 
0001f658 l       .debug_str	00000000 
0001f66f l       .debug_str	00000000 
0001f66e l       .debug_str	00000000 
0001167b l       .debug_str	00000000 
00011686 l       .debug_str	00000000 
00010a89 l       .debug_str	00000000 
00011692 l       .debug_str	00000000 
0001169d l       .debug_str	00000000 
000116a8 l       .debug_str	00000000 
000116b3 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001a049 l       .debug_str	00000000 
0001a09b l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00059b11 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0001a0e2 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001a0e9 l       .debug_str	00000000 
0001b425 l       .debug_str	00000000 
0001f451 l       .debug_str	00000000 
00018bc4 l       .debug_str	00000000 
0001a0f2 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
0001eb86 l       .debug_str	00000000 
0001a0f9 l       .debug_str	00000000 
0001a11c l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00012beb l       .debug_str	00000000 
00012bf0 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00012c1d l       .debug_str	00000000 
0005a727 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001f4de l       .debug_str	00000000 
00012c72 l       .debug_str	00000000 
0001a122 l       .debug_str	00000000 
0001a144 l       .debug_str	00000000 
0001a159 l       .debug_str	00000000 
0001a18b l       .debug_str	00000000 
0001a19b l       .debug_str	00000000 
0001a1c8 l       .debug_str	00000000 
0001a1d9 l       .debug_str	00000000 
0001a207 l       .debug_str	00000000 
0001a219 l       .debug_str	00000000 
0001f3f7 l       .debug_str	00000000 
0001f63c l       .debug_str	00000000 
0000c384 l       .debug_str	00000000 
0001a248 l       .debug_str	00000000 
0001f40f l       .debug_str	00000000 
00001dd1 l       .debug_str	00000000 
00015d05 l       .debug_str	00000000 
00011f53 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
000343dd l       .debug_str	00000000 
00011f58 l       .debug_str	00000000 
0001f446 l       .debug_str	00000000 
0001a26f l       .debug_str	00000000 
0001f432 l       .debug_str	00000000 
0001f42c l       .debug_str	00000000 
0004ea10 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000399b5 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
000394cb l       .debug_str	00000000 
0005cbb4 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a826 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0001f32a l       .debug_str	00000000 
0005a79d l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4a7 l       .debug_str	00000000 
0001f49b l       .debug_str	00000000 
0001f47a l       .debug_str	00000000 
0001f46b l       .debug_str	00000000 
0001f4c5 l       .debug_str	00000000 
0001f4b6 l       .debug_str	00000000 
0001a276 l       .debug_str	00000000 
0001a27f l       .debug_str	00000000 
0005a818 l       .debug_str	00000000 
00059ae5 l       .debug_str	00000000 
0001f420 l       .debug_str	00000000 
0001f41a l       .debug_str	00000000 
0001f440 l       .debug_str	00000000 
0001f406 l       .debug_str	00000000 
0005e79c l       .debug_str	00000000 
00035790 l       .debug_str	00000000 
00013367 l       .debug_str	00000000 
0001336c l       .debug_str	00000000 
00013372 l       .debug_str	00000000 
000165c6 l       .debug_str	00000000 
00012626 l       .debug_str	00000000 
00033a90 l       .debug_str	00000000 
0005ece4 l       .debug_str	00000000 
0001a28b l       .debug_str	00000000 
00012bf7 l       .debug_str	00000000 
00012bff l       .debug_str	00000000 
00012320 l     F .text	0000002a _ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E
000122f6 l     F .text	0000002a _ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE
0001221c l     F .text	0000009c _ZN3log13RecordBuilder3new17haca8312579858419E
000122b8 l     F .text	00000022 _ZN3log13RecordBuilder4args17h0d0d49873389eda9E
0001234a l     F .text	00000010 _ZN3log13RecordBuilder4line17h44de9f431bb34307E
0001235a l     F .text	00000010 _ZN3log13RecordBuilder5build17h83529556a009112eE
000122da l     F .text	0000000c _ZN3log13RecordBuilder5level17h0f95d7860f854eb5E
000122e6 l     F .text	00000010 _ZN3log13RecordBuilder6target17hd1b0e0684e399993E
0001250e l     F .text	00000012 _ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E
00012374 l     F .text	00000028 _ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E
0001239c l     F .text	00000010 _ZN3log15MetadataBuilder5build17h2478972692162fc0E
20004a68 l     O .bss	00000004 _ZN3log5STATE17hc9404a0f5c97cef6E
200000f0 l     O .data	00000008 _ZN3log6LOGGER17hc33d4d9c061fc628E
00012212 l     F .text	0000000a _ZN3log6Record7builder17hde62ab0132265febE
00020914 l     O .text	00000000 _ZN3log6logger3NOP17h5a3de47970f20990E
0001236a l     F .text	0000000a _ZN3log8Metadata7builder17ha56bd59835d60a3cE
00012208 l     F .text	0000000a _ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E
00011f9c l     F .text	00000038 _ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E
00011fd4 l     F .text	00000016 _ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE
00011fea l     F .text	00000008 _ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE
00011ffa l     F .text	00000028 _ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E
000120a0 l     F .text	0000000a _ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E
00012534 l     F .text	000000aa _ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E
000125de l     F .text	0000003a _ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E
00012520 l     F .text	00000014 _ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE
0001216c l     F .text	00000012 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E
00000000 l    df *ABS*	00000000 memchr.2yzmedhn-cgu.0
0001fcda l       .debug_str	00000000 
00013570 l       .debug_str	00000000 
00018c43 l       .debug_str	00000000 
0001f726 l       .debug_str	00000000 
0001f75b l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00011789 l       .debug_str	00000000 
0005f727 l       .debug_str	00000000 
0001f767 l       .debug_str	00000000 
0001f79f l       .debug_str	00000000 
0001f7b9 l       .debug_str	00000000 
0001f7c3 l       .debug_str	00000000 
0001f7cb l       .debug_str	00000000 
0001f7d3 l       .debug_str	00000000 
0001f80f l       .debug_str	00000000 
0001c3c0 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0001f822 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
0001f82a l       .debug_str	00000000 
0001f862 l       .debug_str	00000000 
000114d7 l       .debug_str	00000000 
0001f86a l       .debug_str	00000000 
0001f8a2 l       .debug_str	00000000 
0001f8aa l       .debug_str	00000000 
0001f8e2 l       .debug_str	00000000 
0001f8fc l       .debug_str	00000000 
0001f905 l       .debug_str	00000000 
0001f93d l       .debug_str	00000000 
0001f946 l       .debug_str	00000000 
0001f97e l       .debug_str	00000000 
000136c2 l       .debug_str	00000000 
0002219c l       .debug_str	00000000 
0001fa06 l       .debug_str	00000000 
0001fa4e l       .debug_str	00000000 
0001fa59 l       .debug_str	00000000 
000190b8 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0001fa97 l       .debug_str	00000000 
0001af3e l       .debug_str	00000000 
0001fac0 l       .debug_str	00000000 
0001fae5 l       .debug_str	00000000 
000160dd l       .debug_str	00000000 
0001b034 l       .debug_str	00000000 
0001fb44 l       .debug_str	00000000 
0001b086 l       .debug_str	00000000 
0001fb6c l       .debug_str	00000000 
0001fb9d l       .debug_str	00000000 
0001fba9 l       .debug_str	00000000 
0001fc08 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
0001fc3a l       .debug_str	00000000 
0001fc82 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
0001fc8f l       .debug_str	00000000 
0001fcea l       .debug_str	00000000 
0001fcf8 l       .debug_str	00000000 
0001b2ae l       .debug_str	00000000 
0001b4a8 l       .debug_str	00000000 
0000e8d8 l       .debug_str	00000000 
0001fd40 l       .debug_str	00000000 
0001b4f4 l       .debug_str	00000000 
0001fd7b l       .debug_str	00000000 
0001fdb2 l       .debug_str	00000000 
0001fdcb l       .debug_str	00000000 
0001fdd7 l       .debug_str	00000000 
00014211 l       .debug_str	00000000 
0001fe29 l       .debug_str	00000000 
00014281 l       .debug_str	00000000 
0001fe7e l       .debug_str	00000000 
0001fdb8 l       .debug_str	00000000 
0001feb1 l       .debug_str	00000000 
00019816 l       .debug_str	00000000 
0001fef7 l       .debug_str	00000000 
000141a1 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0005cfe1 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
0001ff40 l       .debug_str	00000000 
000229c9 l       .debug_str	00000000 
0001ff51 l       .debug_str	00000000 
0001ffc6 l       .debug_str	00000000 
0001fff3 l       .debug_str	00000000 
00019b36 l       .debug_str	00000000 
0002007f l       .debug_str	00000000 
00020102 l       .debug_str	00000000 
00020131 l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
0002017e l       .debug_str	00000000 
000201ae l       .debug_str	00000000 
000201fc l       .debug_str	00000000 
0002022c l       .debug_str	00000000 
0002027a l       .debug_str	00000000 
000202aa l       .debug_str	00000000 
000202f8 l       .debug_str	00000000 
00020329 l       .debug_str	00000000 
00020378 l       .debug_str	00000000 
000203a9 l       .debug_str	00000000 
000203f8 l       .debug_str	00000000 
00020428 l       .debug_str	00000000 
00020430 l       .debug_str	00000000 
00020460 l       .debug_str	00000000 
00020468 l       .debug_str	00000000 
000204a6 l       .debug_str	00000000 
000204bb l       .debug_str	00000000 
0000bf06 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000abfe l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0005ae15 l       .debug_str	00000000 
0005abbb l       .debug_str	00000000 
0001f35a l       .debug_str	00000000 
00018ba8 l       .debug_str	00000000 
0001395a l       .debug_str	00000000 
000204e7 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
0005c24a l       .debug_str	00000000 
0005f664 l       .debug_str	00000000 
0005a66a l       .debug_str	00000000 
000612d4 l       .debug_str	00000000 
00016202 l       .debug_str	00000000 
0002053d l       .debug_str	00000000 
000135a5 l       .debug_str	00000000 
0002053c l       .debug_str	00000000 
00020540 l       .debug_str	00000000 
0002054a l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
000017ea l       .debug_str	00000000 
0005cba2 l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
00020550 l       .debug_str	00000000 
00020554 l       .debug_str	00000000 
0001f81d l       .debug_str	00000000 
00020559 l       .debug_str	00000000 
00020558 l       .debug_str	00000000 
0002055c l       .debug_str	00000000 
00020560 l       .debug_str	00000000 
00020565 l       .debug_str	00000000 
00020564 l       .debug_str	00000000 
00020568 l       .debug_str	00000000 
0002056c l       .debug_str	00000000 
0005a699 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001f687 l       .debug_str	00000000 
0001f6dc l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea10 l       .debug_str	00000000 
000399b5 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005e79c l       .debug_str	00000000 
00035790 l       .debug_str	00000000 
00013367 l       .debug_str	00000000 
0001336c l       .debug_str	00000000 
00013372 l       .debug_str	00000000 
000165c6 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00013380 l       .debug_str	00000000 
00038681 l       .debug_str	00000000 
00033332 l       .debug_str	00000000 
0005a727 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f32a l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005a79d l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
0005e9b8 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000394cb l       .debug_str	00000000 
0005cbb4 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a826 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4a7 l       .debug_str	00000000 
0000e8a0 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000134c4 l       .debug_str	00000000 
0001265e l     F .text	0000006e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE
00000000 l    df *ABS*	00000000 1sklumn9v47r13ke
0001f35a l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00018bc4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0005e79c l       .debug_str	00000000 
00033332 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00020570 l       .debug_str	00000000 
00033c9e l       .debug_str	00000000 
0001c3c0 l       .debug_str	00000000 
000205d1 l       .debug_str	00000000 
00012b82 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2la8qm50nrg05wyh
00030d3e l       .debug_str	00000000 
0002219c l       .debug_str	00000000 
00020c35 l       .debug_str	00000000 
00020ca0 l       .debug_str	00000000 
00020ce6 l       .debug_str	00000000 
00020d58 l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
00020f9d l       .debug_str	00000000 
0002100f l       .debug_str	00000000 
00021059 l       .debug_str	00000000 
000210a3 l       .debug_str	00000000 
000212f0 l       .debug_str	00000000 
0002132c l       .debug_str	00000000 
0003e5ff l       .debug_str	00000000 
0000395c l       .debug_str	00000000 
00021371 l       .debug_str	00000000 
000213ae l       .debug_str	00000000 
000213f4 l       .debug_str	00000000 
00021431 l       .debug_str	00000000 
00021672 l       .debug_str	00000000 
000216b2 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000218f6 l       .debug_str	00000000 
00021b4a l       .debug_str	00000000 
00021ba3 l       .debug_str	00000000 
00021df3 l       .debug_str	00000000 
0001f35a l       .debug_str	00000000 
0001264e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0006012c l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
0005a727 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c24a l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00005ac0 l       .debug_str	00000000 
00005b05 l       .debug_str	00000000 
00005b73 l       .debug_str	00000000 
00005c0a l       .debug_str	00000000 
00005cca l       .debug_str	00000000 
00005db3 l       .debug_str	00000000 
00005ec5 l       .debug_str	00000000 
00006000 l       .debug_str	00000000 
00006164 l       .debug_str	00000000 
000062f1 l       .debug_str	00000000 
000064a7 l       .debug_str	00000000 
00006686 l       .debug_str	00000000 
0000688e l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035924 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac2d l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
00006bc3 l       .debug_str	00000000 
00006c3a l       .debug_str	00000000 
00006cbe l       .debug_str	00000000 
00006d39 l       .debug_str	00000000 
00006dd7 l       .debug_str	00000000 
00006e82 l       .debug_str	00000000 
00006f24 l       .debug_str	00000000 
00006fe9 l       .debug_str	00000000 
000070bb l       .debug_str	00000000 
00007184 l       .debug_str	00000000 
00007270 l       .debug_str	00000000 
00007369 l       .debug_str	00000000 
00007459 l       .debug_str	00000000 
0000756c l       .debug_str	00000000 
0000768c l       .debug_str	00000000 
000077a3 l       .debug_str	00000000 
000078dd l       .debug_str	00000000 
00007a24 l       .debug_str	00000000 
00007b62 l       .debug_str	00000000 
00007cc3 l       .debug_str	00000000 
00007e31 l       .debug_str	00000000 
00007f96 l       .debug_str	00000000 
0000811e l       .debug_str	00000000 
000082b3 l       .debug_str	00000000 
0000843f l       .debug_str	00000000 
000085ee l       .debug_str	00000000 
000087aa l       .debug_str	00000000 
0000895d l       .debug_str	00000000 
00008b33 l       .debug_str	00000000 
00008d16 l       .debug_str	00000000 
00008ef0 l       .debug_str	00000000 
000090ed l       .debug_str	00000000 
000092f7 l       .debug_str	00000000 
000094f8 l       .debug_str	00000000 
0000971c l       .debug_str	00000000 
0000994d l       .debug_str	00000000 
00009b75 l       .debug_str	00000000 
00009dbe l       .debug_str	00000000 
0000a024 l       .debug_str	00000000 
0005f664 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
0005ab3e l       .debug_str	00000000 
00030db2 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002190a l       .debug_str	00000000 
0000590a l       .debug_str	00000000 
00005958 l       .debug_str	00000000 
000059c3 l       .debug_str	00000000 
00021b5e l       .debug_str	00000000 
00020634 l       .debug_str	00000000 
0002069c l       .debug_str	00000000 
000208dc l       .debug_str	00000000 
00020944 l       .debug_str	00000000 
00020989 l       .debug_str	00000000 
000209f4 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2xneats2au1n52xr
00021e99 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00012b85 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00021e48 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3hq83qlgyhwbaj1j
00000beb l       .debug_str	00000000 
0005a79d l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00018bb0 l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
0000bb40 l       .debug_str	00000000 
00018bc4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea10 l       .debug_str	00000000 
000399b5 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005e9b8 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00021ebb l       .debug_str	00000000 
00021f17 l       .debug_str	00000000 
00021f74 l       .debug_str	00000000 
00021fd1 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f32a l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4dguvrsipkvuzwcx
0001f40f l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001f35a l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000a54c l       .debug_str	00000000 
0002219c l       .debug_str	00000000 
0002219b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0005e79c l       .debug_str	00000000 
00033332 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00035790 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0005ab3e l       .debug_str	00000000 
0005ac2d l       .debug_str	00000000 
0002202e l       .debug_str	00000000 
0002209f l       .debug_str	00000000 
0001c3c0 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000220ab l       .debug_str	00000000 
00014aa7 l       .debug_str	00000000 
0002211c l       .debug_str	00000000 
0002218d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 501bil2zkh495ov3
00022526 l       .debug_str	00000000 
00022591 l       .debug_str	00000000 
00022659 l       .debug_str	00000000 
000225c7 l       .debug_str	00000000 
000225fe l       .debug_str	00000000 
00022611 l       .debug_str	00000000 
00022650 l       .debug_str	00000000 
0002266b l       .debug_str	00000000 
000226a3 l       .debug_str	00000000 
000226b7 l       .debug_str	00000000 
000226e3 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00018bb0 l       .debug_str	00000000 
000017ea l       .debug_str	00000000 
00060002 l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
0000bb2d l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000394cb l       .debug_str	00000000 
0005cbb4 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a826 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f32a l       .debug_str	00000000 
0005a79d l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4a7 l       .debug_str	00000000 
0001f49b l       .debug_str	00000000 
00018bc4 l       .debug_str	00000000 
0000bb39 l       .debug_str	00000000 
0005ae34 l       .debug_str	00000000 
00060001 l       .debug_str	00000000 
000226ec l       .debug_str	00000000 
0002219c l       .debug_str	00000000 
00016964 l       .debug_str	00000000 
000226f0 l       .debug_str	00000000 
0005f52f l       .debug_str	00000000 
000049e8 l       .debug_str	00000000 
000049f0 l       .debug_str	00000000 
000049f9 l       .debug_str	00000000 
00004a07 l       .debug_str	00000000 
00004a0e l       .debug_str	00000000 
0000468e l       .debug_str	00000000 
0000469e l       .debug_str	00000000 
000046a7 l       .debug_str	00000000 
000046b5 l       .debug_str	00000000 
000046c3 l       .debug_str	00000000 
000046cf l       .debug_str	00000000 
000048dd l       .debug_str	00000000 
000046db l       .debug_str	00000000 
000046ea l       .debug_str	00000000 
000046f2 l       .debug_str	00000000 
0000470b l       .debug_str	00000000 
0000471c l       .debug_str	00000000 
00004724 l       .debug_str	00000000 
00004757 l       .debug_str	00000000 
0000473e l       .debug_str	00000000 
00004763 l       .debug_str	00000000 
00001d54 l       .debug_str	00000000 
00004795 l       .debug_str	00000000 
0000477c l       .debug_str	00000000 
000047cf l       .debug_str	00000000 
000047c2 l       .debug_str	00000000 
000047a9 l       .debug_str	00000000 
00004a15 l       .debug_str	00000000 
00004a78 l       .debug_str	00000000 
00004a1d l       .debug_str	00000000 
00004a3c l       .debug_str	00000000 
00004a70 l       .debug_str	00000000 
00004a57 l       .debug_str	00000000 
0005e60d l       .debug_str	00000000 
0004cc5a l       .debug_str	00000000 
00023297 l       .debug_str	00000000 
0001c3c0 l       .debug_str	00000000 
0005be1f l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
000226f8 l       .debug_str	00000000 
0005f663 l       .debug_str	00000000 
0005d9a3 l       .debug_str	00000000 
0005b895 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005d5c6 l       .debug_str	00000000 
0000bfc3 l       .debug_str	00000000 
0005abd8 l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0000bfd4 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000bfde l       .debug_str	00000000 
0000bfe9 l       .debug_str	00000000 
0000bff3 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
000229e1 l       .debug_str	00000000 
000221a2 l       .debug_str	00000000 
000221d3 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0006012c l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
0005a727 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c24a l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035924 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac2d l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000590a l       .debug_str	00000000 
00005958 l       .debug_str	00000000 
000059c3 l       .debug_str	00000000 
0005f664 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
0005ab3e l       .debug_str	00000000 
00030d3e l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00021b5e l       .debug_str	00000000 
000221df l       .debug_str	00000000 
0002220f l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00005ac0 l       .debug_str	00000000 
00005b05 l       .debug_str	00000000 
00005b73 l       .debug_str	00000000 
00005c0a l       .debug_str	00000000 
00005cca l       .debug_str	00000000 
00005db3 l       .debug_str	00000000 
00005ec5 l       .debug_str	00000000 
00006000 l       .debug_str	00000000 
00006164 l       .debug_str	00000000 
000062f1 l       .debug_str	00000000 
000064a7 l       .debug_str	00000000 
00006686 l       .debug_str	00000000 
0000688e l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
00006bc3 l       .debug_str	00000000 
00006c3a l       .debug_str	00000000 
00006cbe l       .debug_str	00000000 
00006d39 l       .debug_str	00000000 
00006dd7 l       .debug_str	00000000 
00006e82 l       .debug_str	00000000 
00006f24 l       .debug_str	00000000 
00006fe9 l       .debug_str	00000000 
000070bb l       .debug_str	00000000 
00007184 l       .debug_str	00000000 
00007270 l       .debug_str	00000000 
00007369 l       .debug_str	00000000 
00007459 l       .debug_str	00000000 
0000756c l       .debug_str	00000000 
0000768c l       .debug_str	00000000 
000077a3 l       .debug_str	00000000 
000078dd l       .debug_str	00000000 
00007a24 l       .debug_str	00000000 
00007b62 l       .debug_str	00000000 
00007cc3 l       .debug_str	00000000 
00007e31 l       .debug_str	00000000 
00007f96 l       .debug_str	00000000 
0000811e l       .debug_str	00000000 
000082b3 l       .debug_str	00000000 
0000843f l       .debug_str	00000000 
000085ee l       .debug_str	00000000 
000087aa l       .debug_str	00000000 
0000895d l       .debug_str	00000000 
00008b33 l       .debug_str	00000000 
00008d16 l       .debug_str	00000000 
00008ef0 l       .debug_str	00000000 
000090ed l       .debug_str	00000000 
000092f7 l       .debug_str	00000000 
000094f8 l       .debug_str	00000000 
0000971c l       .debug_str	00000000 
0000994d l       .debug_str	00000000 
00009b75 l       .debug_str	00000000 
00009dbe l       .debug_str	00000000 
0000a024 l       .debug_str	00000000 
00030db2 l       .debug_str	00000000 
0002190a l       .debug_str	00000000 
0002221c l       .debug_str	00000000 
0002224d l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000425e9 l       .debug_str	00000000 
00005699 l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f4a6 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00059eeb l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
000602e1 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
0000561d l       .debug_str	00000000 
0004f58e l       .debug_str	00000000 
000056a2 l       .debug_str	00000000 
000056ad l       .debug_str	00000000 
00022255 l       .debug_str	00000000 
00022280 l       .debug_str	00000000 
00022291 l       .debug_str	00000000 
000222c6 l       .debug_str	00000000 
00004c1d l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
000048d4 l       .debug_str	00000000 
000048dc l       .debug_str	00000000 
000047a0 l       .debug_str	00000000 
000048e6 l       .debug_str	00000000 
00004b8c l       .debug_str	00000000 
00004b73 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
00004b6e l       .debug_str	00000000 
00004b9b l       .debug_str	00000000 
00004c25 l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
0005d830 l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
00004c2b l       .debug_str	00000000 
000222d5 l       .debug_str	00000000 
00022308 l       .debug_str	00000000 
00000f07 l       .debug_str	00000000 
00001106 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
000011c0 l       .debug_str	00000000 
000011e7 l       .debug_str	00000000 
00001218 l       .debug_str	00000000 
00022318 l       .debug_str	00000000 
0002234c l       .debug_str	00000000 
00022355 l       .debug_str	00000000 
00022381 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00022390 l       .debug_str	00000000 
000223c3 l       .debug_str	00000000 
000223d0 l       .debug_str	00000000 
000223dc l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
0004ea10 l       .debug_str	00000000 
000399b5 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0002240d l       .debug_str	00000000 
00022442 l       .debug_str	00000000 
0003e5ff l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
00022453 l       .debug_str	00000000 
00022485 l       .debug_str	00000000 
00022493 l       .debug_str	00000000 
000224d1 l       .debug_str	00000000 
000224eb l       .debug_str	00000000 
0002253d l       .debug_str	00000000 
00022579 l       .debug_str	00000000 
20004a70 l     O .bss	00000008 _ZN6mynewt3spi11PENDING_CMD17hd08bb758c99a7708E
20004a78 l     O .bss	00002004 _ZN6mynewt3spi12PENDING_DATA17hf749c482f1fd6e90E
20006f04 l     O .bss	00000000 _ZN6mynewt3spi12SPI_CALLBACK17h9820a4217e4879a6E
200000f8 l     O .data	00000008 _ZN6mynewt3spi12SPI_SETTINGS17h4a4473e27299c06dE
000133ea l     F .text	0000003a _ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E
20006a8c l     O .bss	00000018 _ZN6mynewt3spi14SPI_DATA_QUEUE17h4880c24292cc1218E
20006b04 l     O .bss	00000400 _ZN6mynewt3spi14SPI_TASK_STACK17h041a1fc76b4d16c1E
20006aa4 l     O .bss	00000010 _ZN6mynewt3spi15SPI_EVENT_QUEUE17h4e2cf68a255fc2fdE
20006a84 l     O .bss	00000008 _ZN6mynewt3spi16SPI_THROTTLE_SEM17h1f0932d6e65cb8daE
00013702 l     F .text	000001ea _ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E
000138ec l     F .text	000002e8 _ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E
00013f0a l     F .text	00000128 _ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E
00013bd4 l     F .text	00000336 _ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E
20006a7c l     O .bss	00000008 _ZN6mynewt3spi7SPI_SEM17hd7399e388b8e657cE
20006ab4 l     O .bss	00000050 _ZN6mynewt3spi8SPI_TASK17h4c45c24ee73ad430E
00014032 l     F .text	00000054 _ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E
00020b10 l     O .text	0000001c str.0
00020b70 l     O .text	00000021 str.1
00020bd0 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 53x3bckk5lzipnpa
00000c52 l       .debug_str	00000000 
000394cb l       .debug_str	00000000 
0005cbb4 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a826 l       .debug_str	00000000 
0005a727 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f32a l       .debug_str	00000000 
0005a79d l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4a7 l       .debug_str	00000000 
0001f49b l       .debug_str	00000000 
000229f2 l       .debug_str	00000000 
0002219c l       .debug_str	00000000 
000229f8 l       .debug_str	00000000 
0000e64e l       .debug_str	00000000 
0005d9a3 l       .debug_str	00000000 
0005b895 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
0004ea10 l       .debug_str	00000000 
000399b5 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0000c055 l       .debug_str	00000000 
000031ab l       .debug_str	00000000 
000229c7 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0005a9f8 l       .debug_str	00000000 
00022a0a l       .debug_str	00000000 
0000e660 l       .debug_str	00000000 
00022703 l       .debug_str	00000000 
0003f8ef l       .debug_str	00000000 
0002272e l       .debug_str	00000000 
0006003b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003e5ff l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
0002275a l       .debug_str	00000000 
00061337 l       .debug_str	00000000 
000227cb l       .debug_str	00000000 
000227f7 l       .debug_str	00000000 
00022824 l       .debug_str	00000000 
00022890 l       .debug_str	00000000 
00022898 l       .debug_str	00000000 
00022905 l       .debug_str	00000000 
0002290e l       .debug_str	00000000 
0002293b l       .debug_str	00000000 
000226e3 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000229b5 l       .debug_str	00000000 
000229e5 l       .debug_str	00000000 
0005abd8 l       .debug_str	00000000 
0000bfd4 l       .debug_str	00000000 
0000bfde l       .debug_str	00000000 
0000bfe9 l       .debug_str	00000000 
0000bff3 l       .debug_str	00000000 
000229e1 l       .debug_str	00000000 
000229cb l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00018bb0 l       .debug_str	00000000 
000017ea l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
0000bb2d l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00020dd0 l     O .text	00000021 str.0
00000000 l    df *ABS*	00000000 n1xzuhnvw82wqrn
00004a1d l       .debug_str	00000000 
00004a3c l       .debug_str	00000000 
00004a70 l       .debug_str	00000000 
00022a0f l       .debug_str	00000000 
00022a61 l       .debug_str	00000000 
0001c3c0 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000134bc l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000425e9 l       .debug_str	00000000 
000049e8 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
000049f0 l       .debug_str	00000000 
000049f9 l       .debug_str	00000000 
00004a07 l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
00004a0e l       .debug_str	00000000 
0000468e l       .debug_str	00000000 
0000469e l       .debug_str	00000000 
000046a7 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
000046b5 l       .debug_str	00000000 
000046c3 l       .debug_str	00000000 
000046cf l       .debug_str	00000000 
000048dd l       .debug_str	00000000 
000046db l       .debug_str	00000000 
000046ea l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
000046f2 l       .debug_str	00000000 
0000470b l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
0000471c l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00004724 l       .debug_str	00000000 
00004757 l       .debug_str	00000000 
0000473e l       .debug_str	00000000 
00004763 l       .debug_str	00000000 
00001d54 l       .debug_str	00000000 
00004795 l       .debug_str	00000000 
0000477c l       .debug_str	00000000 
000047a0 l       .debug_str	00000000 
000047cf l       .debug_str	00000000 
000047c2 l       .debug_str	00000000 
000047a9 l       .debug_str	00000000 
00004a15 l       .debug_str	00000000 
00004a57 l       .debug_str	00000000 
00004a78 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 num_traits.eydd4btj-cgu.0
00023db1 l       .debug_str	00000000 
00022fd2 l       .debug_str	00000000 
000141a1 l       .debug_str	00000000 
00023015 l       .debug_str	00000000 
00014208 l       .debug_str	00000000 
00023071 l       .debug_str	00000000 
00014278 l       .debug_str	00000000 
000230d0 l       .debug_str	00000000 
00014211 l       .debug_str	00000000 
00023122 l       .debug_str	00000000 
00023177 l       .debug_str	00000000 
000231cd l       .debug_str	00000000 
000231fb l       .debug_str	00000000 
00023207 l       .debug_str	00000000 
00023239 l       .debug_str	00000000 
00023260 l       .debug_str	00000000 
00023292 l       .debug_str	00000000 
000232a2 l       .debug_str	00000000 
000232d7 l       .debug_str	00000000 
000232ea l       .debug_str	00000000 
00023320 l       .debug_str	00000000 
00023334 l       .debug_str	00000000 
0002337e l       .debug_str	00000000 
0002338f l       .debug_str	00000000 
0005f664 l       .debug_str	00000000 
000233cb l       .debug_str	00000000 
00059f17 l       .debug_str	00000000 
0005f727 l       .debug_str	00000000 
00023409 l       .debug_str	00000000 
00023447 l       .debug_str	00000000 
00013637 l       .debug_str	00000000 
00023454 l       .debug_str	00000000 
0003e5ff l       .debug_str	00000000 
00023462 l       .debug_str	00000000 
0002348a l       .debug_str	00000000 
0000168b l       .debug_str	00000000 
000234c9 l       .debug_str	00000000 
000234f7 l       .debug_str	00000000 
000234fe l       .debug_str	00000000 
000235a1 l       .debug_str	00000000 
000235af l       .debug_str	00000000 
00040df8 l       .debug_str	00000000 
00023647 l       .debug_str	00000000 
000236e1 l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
00023799 l       .debug_str	00000000 
00033c9e l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
0001ff40 l       .debug_str	00000000 
000237fc l       .debug_str	00000000 
0002386e l       .debug_str	00000000 
00023898 l       .debug_str	00000000 
000238d6 l       .debug_str	00000000 
000238e9 l       .debug_str	00000000 
00023934 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0002393d l       .debug_str	00000000 
0002397f l       .debug_str	00000000 
00024c40 l       .debug_str	00000000 
000239b9 l       .debug_str	00000000 
000239fe l       .debug_str	00000000 
00023a1a l       .debug_str	00000000 
00023a5d l       .debug_str	00000000 
00023a73 l       .debug_str	00000000 
00023ad8 l       .debug_str	00000000 
00023b3d l       .debug_str	00000000 
00023b78 l       .debug_str	00000000 
00023b85 l       .debug_str	00000000 
0001fdb8 l       .debug_str	00000000 
00023bb8 l       .debug_str	00000000 
0000a8e2 l       .debug_str	00000000 
00023bfe l       .debug_str	00000000 
00019816 l       .debug_str	00000000 
00023c44 l       .debug_str	00000000 
0000ab71 l       .debug_str	00000000 
00023c8b l       .debug_str	00000000 
00023cd4 l       .debug_str	00000000 
00014aa7 l       .debug_str	00000000 
0001f40f l       .debug_str	00000000 
000160dd l       .debug_str	00000000 
000114d7 l       .debug_str	00000000 
00011789 l       .debug_str	00000000 
00023d4d l       .debug_str	00000000 
00023d92 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00023dea l       .debug_str	00000000 
0000ac06 l       .debug_str	00000000 
00023e02 l       .debug_str	00000000 
00023e3d l       .debug_str	00000000 
00023e61 l       .debug_str	00000000 
00023e87 l       .debug_str	00000000 
00023ec2 l       .debug_str	00000000 
00023ee5 l       .debug_str	00000000 
00023f0a l       .debug_str	00000000 
00023f47 l       .debug_str	00000000 
00023f5e l       .debug_str	00000000 
00023f9b l       .debug_str	00000000 
00023fb2 l       .debug_str	00000000 
00014ee2 l       .debug_str	00000000 
00024003 l       .debug_str	00000000 
00016cb0 l       .debug_str	00000000 
0002405e l       .debug_str	00000000 
000240c1 l       .debug_str	00000000 
00024103 l       .debug_str	00000000 
0001519b l       .debug_str	00000000 
00024167 l       .debug_str	00000000 
00019b36 l       .debug_str	00000000 
000241d4 l       .debug_str	00000000 
0000abf6 l       .debug_str	00000000 
00024236 l       .debug_str	00000000 
00024244 l       .debug_str	00000000 
000242af l       .debug_str	00000000 
000242c9 l       .debug_str	00000000 
000242df l       .debug_str	00000000 
0002434a l       .debug_str	00000000 
0002435a l       .debug_str	00000000 
000243c6 l       .debug_str	00000000 
000243d8 l       .debug_str	00000000 
00024444 l       .debug_str	00000000 
00024455 l       .debug_str	00000000 
000244bc l       .debug_str	00000000 
000244f4 l       .debug_str	00000000 
0002455e l       .debug_str	00000000 
000245e6 l       .debug_str	00000000 
000130b9 l       .debug_str	00000000 
0002465a l       .debug_str	00000000 
000246dc l       .debug_str	00000000 
000246f3 l       .debug_str	00000000 
00024731 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00033f10 l       .debug_str	00000000 
00035790 l       .debug_str	00000000 
00024744 l       .debug_str	00000000 
00024753 l       .debug_str	00000000 
00024791 l       .debug_str	00000000 
000247a4 l       .debug_str	00000000 
000247d0 l       .debug_str	00000000 
000247d9 l       .debug_str	00000000 
00024805 l       .debug_str	00000000 
0002480e l       .debug_str	00000000 
0002486e l       .debug_str	00000000 
00033951 l       .debug_str	00000000 
000248bf l       .debug_str	00000000 
00024910 l       .debug_str	00000000 
0002496d l       .debug_str	00000000 
000249cb l       .debug_str	00000000 
00024cb0 l       .debug_str	00000000 
00024a1c l       .debug_str	00000000 
00024a45 l       .debug_str	00000000 
00024aa8 l       .debug_str	00000000 
00024ab9 l       .debug_str	00000000 
00024ac6 l       .debug_str	00000000 
00024adb l       .debug_str	00000000 
00024b2c l       .debug_str	00000000 
00024b55 l       .debug_str	00000000 
00024bb8 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0001f32a l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005a79d l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0001f35a l       .debug_str	00000000 
0002219b l       .debug_str	00000000 
000611df l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
00024bd5 l       .debug_str	00000000 
0005c24a l       .debug_str	00000000 
0003928b l       .debug_str	00000000 
0001f81d l       .debug_str	00000000 
000168c3 l       .debug_str	00000000 
0005ae34 l       .debug_str	00000000 
00059beb l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0006003b l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00002389 l       .debug_str	00000000 
00024bf6 l       .debug_str	00000000 
00002535 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
00024bfa l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
00022c67 l       .debug_str	00000000 
00024c0c l       .debug_str	00000000 
00024c11 l       .debug_str	00000000 
00024c16 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
000160a2 l       .debug_str	00000000 
00024c3b l       .debug_str	00000000 
00024c77 l       .debug_str	00000000 
0005cba2 l       .debug_str	00000000 
0003dcb7 l       .debug_str	00000000 
00024c8d l       .debug_str	00000000 
00024c96 l       .debug_str	00000000 
000372bc l       .debug_str	00000000 
0005ac87 l       .debug_str	00000000 
0004cece l       .debug_str	00000000 
00024c9f l       .debug_str	00000000 
00024ca3 l       .debug_str	00000000 
00037582 l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
0001167f l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
0001167b l       .debug_str	00000000 
00011686 l       .debug_str	00000000 
00010a89 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00024cc5 l       .debug_str	00000000 
00024cc0 l       .debug_str	00000000 
0005aa08 l       .debug_str	00000000 
00024cc9 l       .debug_str	00000000 
00039059 l       .debug_str	00000000 
00024cd2 l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0003bb13 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00022a86 l       .debug_str	00000000 
00022ae0 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000c47d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00033bbb l       .debug_str	00000000 
00022b2f l       .debug_str	00000000 
00024be7 l       .debug_str	00000000 
00024bda l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea10 l       .debug_str	00000000 
000399b5 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005e9b8 l       .debug_str	00000000 
00022b37 l       .debug_str	00000000 
00022b44 l       .debug_str	00000000 
00022b4d l       .debug_str	00000000 
00059b05 l       .debug_str	00000000 
00033f87 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0001337a l       .debug_str	00000000 
0005e79c l       .debug_str	00000000 
00033332 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000134bc l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003576a l       .debug_str	00000000 
000134c4 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
0000b253 l       .debug_str	00000000 
0000b294 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
0002219c l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00012626 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000612d4 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013615 l       .debug_str	00000000 
00024c87 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
0005a66a l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00012b85 l       .debug_str	00000000 
0005cc30 l       .debug_str	00000000 
00011e0e l       .debug_str	00000000 
000365e4 l       .debug_str	00000000 
000116df l       .debug_str	00000000 
0005abbb l       .debug_str	00000000 
000229c9 l       .debug_str	00000000 
00024c5b l       .debug_str	00000000 
000134d4 l       .debug_str	00000000 
00022b57 l       .debug_str	00000000 
00022b95 l       .debug_str	00000000 
0001a317 l       .debug_str	00000000 
0005cfe1 l       .debug_str	00000000 
0004680f l       .debug_str	00000000 
000600b5 l       .debug_str	00000000 
00022ba4 l       .debug_str	00000000 
00013503 l       .debug_str	00000000 
00022bcd l       .debug_str	00000000 
0001a389 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001a542 l       .debug_str	00000000 
0001f4c5 l       .debug_str	00000000 
0000e68b l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00022bff l       .debug_str	00000000 
00024c25 l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
00022c0d l       .debug_str	00000000 
000135f0 l       .debug_str	00000000 
00013603 l       .debug_str	00000000 
0005f631 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
0004aebe l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00059ca0 l       .debug_str	00000000 
00022c4f l       .debug_str	00000000 
00022c53 l       .debug_str	00000000 
00022c5e l       .debug_str	00000000 
00022c6d l       .debug_str	00000000 
00022cb5 l       .debug_str	00000000 
00022cd5 l       .debug_str	00000000 
00039da5 l       .debug_str	00000000 
00024c0d l       .debug_str	00000000 
00022d20 l       .debug_str	00000000 
00024c12 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0005ab3e l       .debug_str	00000000 
0005ac2d l       .debug_str	00000000 
00022d6b l       .debug_str	00000000 
0002218d l       .debug_str	00000000 
0001c3c0 l       .debug_str	00000000 
00022ddc l       .debug_str	00000000 
00013c8a l       .debug_str	00000000 
00022e0a l       .debug_str	00000000 
0001b2ae l       .debug_str	00000000 
00022e52 l       .debug_str	00000000 
00022e82 l       .debug_str	00000000 
00022ead l       .debug_str	00000000 
0001fdb2 l       .debug_str	00000000 
0001fdcb l       .debug_str	00000000 
00022ee4 l       .debug_str	00000000 
00014281 l       .debug_str	00000000 
00022f35 l       .debug_str	00000000 
000140f5 l       .debug_str	00000000 
00022f87 l       .debug_str	00000000 
0001414c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19c5s2vweequjzfw
0000e8a7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00024cde l       .debug_str	00000000 
00024d07 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
00024d98 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00024d14 l       .debug_str	00000000 
00013503 l       .debug_str	00000000 
0000c47d l       .debug_str	00000000 
0005ee39 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00024d3d l       .debug_str	00000000 
00024d92 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1bm86yaetip2rc3f
0002510d l       .debug_str	00000000 
00024f75 l       .debug_str	00000000 
00024fb1 l       .debug_str	00000000 
00024fcd l       .debug_str	00000000 
00025009 l       .debug_str	00000000 
0002503f l       .debug_str	00000000 
0002507b l       .debug_str	00000000 
00025086 l       .debug_str	00000000 
000250c2 l       .debug_str	00000000 
000250d0 l       .debug_str	00000000 
0001c3c0 l       .debug_str	00000000 
00025144 l       .debug_str	00000000 
00025181 l       .debug_str	00000000 
00025190 l       .debug_str	00000000 
000251cd l       .debug_str	00000000 
00025210 l       .debug_str	00000000 
0002524d l       .debug_str	00000000 
0000e8ac l       .debug_str	00000000 
00025284 l       .debug_str	00000000 
000252c2 l       .debug_str	00000000 
000252f9 l       .debug_str	00000000 
00025338 l       .debug_str	00000000 
00025371 l       .debug_str	00000000 
000253d5 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0002540a l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00025425 l       .debug_str	00000000 
0002546a l       .debug_str	00000000 
00025487 l       .debug_str	00000000 
00013625 l       .debug_str	00000000 
00018c4c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000114d7 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
00018c74 l       .debug_str	00000000 
00024d9c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00025496 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00025419 l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea7c l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00024c12 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0002564b l       .debug_str	00000000 
00024dd6 l       .debug_str	00000000 
00025434 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
0002219c l       .debug_str	00000000 
00025479 l       .debug_str	00000000 
0000e8a7 l       .debug_str	00000000 
00024df2 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000e70f l       .debug_str	00000000 
0000e718 l       .debug_str	00000000 
0000e726 l       .debug_str	00000000 
00018cda l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0000e73e l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0000efc8 l       .debug_str	00000000 
0000efd3 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
00011789 l       .debug_str	00000000 
0005f727 l       .debug_str	00000000 
00024dff l       .debug_str	00000000 
00024e38 l       .debug_str	00000000 
00024ed3 l       .debug_str	00000000 
00024f2d l       .debug_str	00000000 
00024f69 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1i10ukgv8hgyc1v7
0005e945 l       .debug_str	00000000 
00025f65 l       .debug_str	00000000 
00025f70 l       .debug_str	00000000 
00025f77 l       .debug_str	00000000 
00025fe2 l       .debug_str	00000000 
00026113 l       .debug_str	00000000 
00026180 l       .debug_str	00000000 
000261f2 l       .debug_str	00000000 
00026300 l       .debug_str	00000000 
0002630b l       .debug_str	00000000 
0002637d l       .debug_str	00000000 
000264b2 l       .debug_str	00000000 
00026524 l       .debug_str	00000000 
000265f4 l       .debug_str	00000000 
0002660f l       .debug_str	00000000 
00026659 l       .debug_str	00000000 
00026796 l       .debug_str	00000000 
000267d1 l       .debug_str	00000000 
000268d9 l       .debug_str	00000000 
00026914 l       .debug_str	00000000 
00026a43 l       .debug_str	00000000 
00026a7e l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00024dd6 l       .debug_str	00000000 
00026b48 l       .debug_str	00000000 
00026b84 l       .debug_str	00000000 
0003e5ff l       .debug_str	00000000 
00026c4f l       .debug_str	00000000 
00026c6f l       .debug_str	00000000 
00026cab l       .debug_str	00000000 
0002cb33 l       .debug_str	00000000 
00026db4 l       .debug_str	00000000 
00026df1 l       .debug_str	00000000 
00026efb l       .debug_str	00000000 
00026f38 l       .debug_str	00000000 
00027069 l       .debug_str	00000000 
000270ea l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
0002797a l       .debug_str	00000000 
0002721f l       .debug_str	00000000 
0002729d l       .debug_str	00000000 
00011563 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000273cd l       .debug_str	00000000 
000274ac l       .debug_str	00000000 
000275c5 l       .debug_str	00000000 
00027705 l       .debug_str	00000000 
00027822 l       .debug_str	00000000 
00027966 l       .debug_str	00000000 
0001f35a l       .debug_str	00000000 
0001264e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0006012c l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
0005a727 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c24a l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0000c714 l       .debug_str	00000000 
0000c731 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000c777 l       .debug_str	00000000 
0000c788 l       .debug_str	00000000 
0000c7f8 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000c955 l       .debug_str	00000000 
0000ca42 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035924 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac2d l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000cb59 l       .debug_str	00000000 
0000cba9 l       .debug_str	00000000 
0000cc06 l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
0000cc5a l       .debug_str	00000000 
0000ccd1 l       .debug_str	00000000 
0000cd55 l       .debug_str	00000000 
0000cdd0 l       .debug_str	00000000 
0000ce6e l       .debug_str	00000000 
0000cf19 l       .debug_str	00000000 
0000cfbb l       .debug_str	00000000 
0000d080 l       .debug_str	00000000 
0000d152 l       .debug_str	00000000 
0000d21b l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0000d400 l       .debug_str	00000000 
0000d4f0 l       .debug_str	00000000 
0000d603 l       .debug_str	00000000 
0000d723 l       .debug_str	00000000 
0000d83a l       .debug_str	00000000 
0000d973 l       .debug_str	00000000 
0000dac9 l       .debug_str	00000000 
0005f664 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
0005ab3e l       .debug_str	00000000 
0002b9ab l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00027836 l       .debug_str	00000000 
0000e9a7 l       .debug_str	00000000 
0000eab9 l       .debug_str	00000000 
0000ebe8 l       .debug_str	00000000 
0002b873 l       .debug_str	00000000 
00027719 l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea7c l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00024c12 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0002564b l       .debug_str	00000000 
0000f250 l       .debug_str	00000000 
0000f27d l       .debug_str	00000000 
0000f29e l       .debug_str	00000000 
0000f305 l       .debug_str	00000000 
0000f3a5 l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
0000f47f l       .debug_str	00000000 
0000f4f6 l       .debug_str	00000000 
0000f57a l       .debug_str	00000000 
0000f5f5 l       .debug_str	00000000 
0000f693 l       .debug_str	00000000 
0000f73e l       .debug_str	00000000 
00028d85 l       .debug_str	00000000 
000284bc l       .debug_str	00000000 
000287f3 l       .debug_str	00000000 
0002b779 l       .debug_str	00000000 
000273e1 l       .debug_str	00000000 
000254d8 l       .debug_str	00000000 
00025566 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00025636 l       .debug_str	00000000 
00025651 l       .debug_str	00000000 
000612d4 l       .debug_str	00000000 
000100a8 l       .debug_str	00000000 
0002566e l       .debug_str	00000000 
00025687 l       .debug_str	00000000 
0002e368 l       .debug_str	00000000 
000256ad l       .debug_str	00000000 
00025713 l       .debug_str	00000000 
0002581d l       .debug_str	00000000 
00025883 l       .debug_str	00000000 
000259b4 l       .debug_str	00000000 
00025a1c l       .debug_str	00000000 
00025ae7 l       .debug_str	00000000 
00025b4f l       .debug_str	00000000 
00025c58 l       .debug_str	00000000 
00025cc0 l       .debug_str	00000000 
00025df0 l       .debug_str	00000000 
00025e5b l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00020e90 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 1w4juabyv8bmed5v
00000d37 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4a7 l       .debug_str	00000000 
00027aaf l       .debug_str	00000000 
00027afa l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0001f406 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea10 l       .debug_str	00000000 
000399b5 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000394cb l       .debug_str	00000000 
0005cbb4 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a826 l       .debug_str	00000000 
0005a727 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f32a l       .debug_str	00000000 
0005a79d l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 24fd677mu7rr1lzm
00026659 l       .debug_str	00000000 
00029db6 l       .debug_str	00000000 
00029e3f l       .debug_str	00000000 
00029f79 l       .debug_str	00000000 
0002a002 l       .debug_str	00000000 
0002a115 l       .debug_str	00000000 
0002a1a1 l       .debug_str	00000000 
0002a22d l       .debug_str	00000000 
0002a343 l       .debug_str	00000000 
0002a3cf l       .debug_str	00000000 
0002a4bd l       .debug_str	00000000 
00026b84 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
0003e5ff l       .debug_str	00000000 
00026c4f l       .debug_str	00000000 
0002a53b l       .debug_str	00000000 
00026cab l       .debug_str	00000000 
0002cb33 l       .debug_str	00000000 
0002a5b9 l       .debug_str	00000000 
00026df1 l       .debug_str	00000000 
0002a638 l       .debug_str	00000000 
00026f38 l       .debug_str	00000000 
0002a6b7 l       .debug_str	00000000 
00025713 l       .debug_str	00000000 
0002a736 l       .debug_str	00000000 
00025883 l       .debug_str	00000000 
0002a7b5 l       .debug_str	00000000 
0002a837 l       .debug_str	00000000 
00025f70 l       .debug_str	00000000 
0002a944 l       .debug_str	00000000 
0002a9c6 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0002219c l       .debug_str	00000000 
0002aaab l       .debug_str	00000000 
0002ab2d l       .debug_str	00000000 
0002abfc l       .debug_str	00000000 
0002ac13 l       .debug_str	00000000 
0002ac95 l       .debug_str	00000000 
0002adc9 l       .debug_str	00000000 
0002ae4b l       .debug_str	00000000 
0002af30 l       .debug_str	00000000 
0002afb2 l       .debug_str	00000000 
0002b0bf l       .debug_str	00000000 
0002b141 l       .debug_str	00000000 
0002b275 l       .debug_str	00000000 
0002b2f7 l       .debug_str	00000000 
0002b3c6 l       .debug_str	00000000 
0002b448 l       .debug_str	00000000 
0002b57c l       .debug_str	00000000 
0002b5fe l       .debug_str	00000000 
0002b70b l       .debug_str	00000000 
0002b767 l       .debug_str	00000000 
0002b861 l       .debug_str	00000000 
0002b999 l       .debug_str	00000000 
0001264e l       .debug_str	00000000 
0002baf8 l       .debug_str	00000000 
0001f35a l       .debug_str	00000000 
00012626 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0002bc08 l       .debug_str	00000000 
000612d4 l       .debug_str	00000000 
00018bba l       .debug_str	00000000 
0002bc15 l       .debug_str	00000000 
0002e29d l       .debug_str	00000000 
000611df l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
0002bc27 l       .debug_str	00000000 
0003576a l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013615 l       .debug_str	00000000 
0002bc2c l       .debug_str	00000000 
0003f8ef l       .debug_str	00000000 
0002bd60 l       .debug_str	00000000 
0002bebb l       .debug_str	00000000 
0002bfc7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0006012c l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
0005a727 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c24a l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00005ac0 l       .debug_str	00000000 
00027b2c l       .debug_str	00000000 
00027b99 l       .debug_str	00000000 
00027c2f l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035924 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac2d l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
0000f47f l       .debug_str	00000000 
0000f4f6 l       .debug_str	00000000 
0000f57a l       .debug_str	00000000 
0000f5f5 l       .debug_str	00000000 
0000f693 l       .debug_str	00000000 
0000f73e l       .debug_str	00000000 
00027cee l       .debug_str	00000000 
00027db3 l       .debug_str	00000000 
00027e85 l       .debug_str	00000000 
00027f4e l       .debug_str	00000000 
00028038 l       .debug_str	00000000 
0002813f l       .debug_str	00000000 
0005f664 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
0005ab3e l       .debug_str	00000000 
0002bb0a l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
0000c714 l       .debug_str	00000000 
0000c731 l       .debug_str	00000000 
0000c777 l       .debug_str	00000000 
0000c788 l       .debug_str	00000000 
0000c7f8 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000c955 l       .debug_str	00000000 
0000ca42 l       .debug_str	00000000 
0000cb59 l       .debug_str	00000000 
0000cba9 l       .debug_str	00000000 
0000cc06 l       .debug_str	00000000 
0000cc5a l       .debug_str	00000000 
0000ccd1 l       .debug_str	00000000 
0000cd55 l       .debug_str	00000000 
0000cdd0 l       .debug_str	00000000 
0000ce6e l       .debug_str	00000000 
0000cf19 l       .debug_str	00000000 
0000cfbb l       .debug_str	00000000 
0000d080 l       .debug_str	00000000 
0000d152 l       .debug_str	00000000 
0000d21b l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0000d400 l       .debug_str	00000000 
0000d4f0 l       .debug_str	00000000 
0000d603 l       .debug_str	00000000 
0000d723 l       .debug_str	00000000 
0000d83a l       .debug_str	00000000 
0000d973 l       .debug_str	00000000 
0000dac9 l       .debug_str	00000000 
0002b9ab l       .debug_str	00000000 
0000e9a7 l       .debug_str	00000000 
0000eab9 l       .debug_str	00000000 
0000ebe8 l       .debug_str	00000000 
0002b873 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea7c l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00024c12 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0002564b l       .debug_str	00000000 
0000f250 l       .debug_str	00000000 
0000f27d l       .debug_str	00000000 
0000f29e l       .debug_str	00000000 
0000f305 l       .debug_str	00000000 
0000f3a5 l       .debug_str	00000000 
00028d85 l       .debug_str	00000000 
00028245 l       .debug_str	00000000 
000282c7 l       .debug_str	00000000 
000283b5 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000284bc l       .debug_str	00000000 
0002849d l       .debug_str	00000000 
000287f3 l       .debug_str	00000000 
000285ad l       .debug_str	00000000 
000285fe l       .debug_str	00000000 
000286ed l       .debug_str	00000000 
000287d5 l       .debug_str	00000000 
0002b779 l       .debug_str	00000000 
000288e3 l       .debug_str	00000000 
0002895e l       .debug_str	00000000 
00028a48 l       .debug_str	00000000 
00028b2c l       .debug_str	00000000 
00028c38 l       .debug_str	00000000 
00028c84 l       .debug_str	00000000 
00028d6f l       .debug_str	00000000 
00028e59 l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
00028f63 l       .debug_str	00000000 
00029064 l       .debug_str	00000000 
000290ba l       .debug_str	00000000 
000291b8 l       .debug_str	00000000 
0002920e l       .debug_str	00000000 
0002935b l       .debug_str	00000000 
000293b1 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
000294d7 l       .debug_str	00000000 
0002955e l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00025636 l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
000265f4 l       .debug_str	00000000 
00029631 l       .debug_str	00000000 
000296b8 l       .debug_str	00000000 
00025f65 l       .debug_str	00000000 
00026300 l       .debug_str	00000000 
000297c9 l       .debug_str	00000000 
00029850 l       .debug_str	00000000 
00029988 l       .debug_str	00000000 
00029a10 l       .debug_str	00000000 
00029ae4 l       .debug_str	00000000 
00029b6d l       .debug_str	00000000 
00029c42 l       .debug_str	00000000 
00029ccb l       .debug_str	00000000 
00020f10 l     O .text	00000021 str.0
00020f50 l     O .text	0000001c str.1
00000000 l    df *ABS*	00000000 2jbqb9ep0zzhh36j
0001c3c0 l       .debug_str	00000000 
0002c3c2 l       .debug_str	00000000 
0002c3cf l       .debug_str	00000000 
0002c40f l       .debug_str	00000000 
0002c50c l       .debug_str	00000000 
0002c54c l       .debug_str	00000000 
0002c55b l       .debug_str	00000000 
0002c59b l       .debug_str	00000000 
0002c5ba l       .debug_str	00000000 
0002c5fa l       .debug_str	00000000 
0002c616 l       .debug_str	00000000 
0002c656 l       .debug_str	00000000 
0002c664 l       .debug_str	00000000 
0002c6a4 l       .debug_str	00000000 
0005f727 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0000c494 l       .debug_str	00000000 
0001ced2 l       .debug_str	00000000 
00000788 l       .debug_str	00000000 
0002c6b2 l       .debug_str	00000000 
0002c6f3 l       .debug_str	00000000 
0000c1d5 l       .debug_str	00000000 
0002c728 l       .debug_str	00000000 
00011789 l       .debug_str	00000000 
0002c732 l       .debug_str	00000000 
0002c773 l       .debug_str	00000000 
0001f3e3 l       .debug_str	00000000 
0002c7c0 l       .debug_str	00000000 
0002c801 l       .debug_str	00000000 
0002c836 l       .debug_str	00000000 
0002c841 l       .debug_str	00000000 
0002c882 l       .debug_str	00000000 
0002c8cf l       .debug_str	00000000 
0002c910 l       .debug_str	00000000 
0002c945 l       .debug_str	00000000 
0002c9b4 l       .debug_str	00000000 
0002cab5 l       .debug_str	00000000 
0001d7a9 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0002cb24 l       .debug_str	00000000 
0002cb43 l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00016964 l       .debug_str	00000000 
0005aa73 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea7c l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00024c12 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0002564b l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0004ea10 l       .debug_str	00000000 
00015d05 l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003e5ff l       .debug_str	00000000 
0002cb33 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
00060ade l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
0006012c l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
0005a727 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c24a l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00005ac0 l       .debug_str	00000000 
00027b2c l       .debug_str	00000000 
00027b99 l       .debug_str	00000000 
00027c2f l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035924 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac2d l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
0000f47f l       .debug_str	00000000 
0000f4f6 l       .debug_str	00000000 
0000f57a l       .debug_str	00000000 
0000f5f5 l       .debug_str	00000000 
0000f693 l       .debug_str	00000000 
0000f73e l       .debug_str	00000000 
00027cee l       .debug_str	00000000 
00027db3 l       .debug_str	00000000 
00027e85 l       .debug_str	00000000 
00027f4e l       .debug_str	00000000 
00028038 l       .debug_str	00000000 
0002813f l       .debug_str	00000000 
0005f664 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
0005ab3e l       .debug_str	00000000 
0002bb0a l       .debug_str	00000000 
00028f63 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002c0bd l       .debug_str	00000000 
0002c19d l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00026c4f l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
0000c1cc l       .debug_str	00000000 
0002c29b l       .debug_str	00000000 
0002c2a2 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0002c2aa l       .debug_str	00000000 
0002c2be l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0002c2f0 l       .debug_str	00000000 
0002c304 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002c336 l       .debug_str	00000000 
0002c375 l       .debug_str	00000000 
0002c383 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2nk42jtdlqpdrpvo
0000f47f l       .debug_str	00000000 
0002cccf l       .debug_str	00000000 
0000d21b l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0000d400 l       .debug_str	00000000 
0002cdc2 l       .debug_str	00000000 
0002ce3a l       .debug_str	00000000 
0002cf54 l       .debug_str	00000000 
0002cfcc l       .debug_str	00000000 
0000f4f6 l       .debug_str	00000000 
0000f57a l       .debug_str	00000000 
0000f5f5 l       .debug_str	00000000 
0000f693 l       .debug_str	00000000 
0000f73e l       .debug_str	00000000 
0002d098 l       .debug_str	00000000 
0002d110 l       .debug_str	00000000 
0002d1dc l       .debug_str	00000000 
0002d254 l       .debug_str	00000000 
0002d2f9 l       .debug_str	00000000 
0002d371 l       .debug_str	00000000 
0002d3ef l       .debug_str	00000000 
0002d467 l       .debug_str	00000000 
0002d4be l       .debug_str	00000000 
0002d536 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035924 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0005ac2d l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
0002cb61 l       .debug_str	00000000 
0002cbd9 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
0000cb59 l       .debug_str	00000000 
0000cba9 l       .debug_str	00000000 
0000cc06 l       .debug_str	00000000 
0000cc5a l       .debug_str	00000000 
0000ccd1 l       .debug_str	00000000 
0000cd55 l       .debug_str	00000000 
0000cdd0 l       .debug_str	00000000 
0000ce6e l       .debug_str	00000000 
0000cf19 l       .debug_str	00000000 
0000cfbb l       .debug_str	00000000 
0000d080 l       .debug_str	00000000 
0000d152 l       .debug_str	00000000 
0002cc57 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2tupw4qr6cy3al7x
00000c36 l       .debug_str	00000000 
00025434 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
00034a70 l       .debug_str	00000000 
0002f221 l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0002f14a l       .debug_str	00000000 
0002d5db l       .debug_str	00000000 
0002d624 l       .debug_str	00000000 
0001264e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000bfac l       .debug_str	00000000 
000163d1 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000efc8 l       .debug_str	00000000 
0000efd3 l       .debug_str	00000000 
0000efdd l       .debug_str	00000000 
0000e738 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00018c29 l       .debug_str	00000000 
0000efe6 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00018c74 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 32m5mr5zne5f73k7
0000c06e l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0005d5c5 l       .debug_str	00000000 
0000c05d l       .debug_str	00000000 
000604a0 l       .debug_str	00000000 
0000c061 l       .debug_str	00000000 
0000c065 l       .debug_str	00000000 
00001820 l       .debug_str	00000000 
0005f8dc l       .debug_str	00000000 
0000e5f2 l       .debug_str	00000000 
0000e5e1 l       .debug_str	00000000 
0005bf83 l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
000611df l       .debug_str	00000000 
0005ae34 l       .debug_str	00000000 
0000e773 l       .debug_str	00000000 
0002dc73 l       .debug_str	00000000 
0002dd0f l       .debug_str	00000000 
0000e70f l       .debug_str	00000000 
0000e718 l       .debug_str	00000000 
0000e726 l       .debug_str	00000000 
00018cda l       .debug_str	00000000 
0000e73e l       .debug_str	00000000 
00024ed3 l       .debug_str	00000000 
0000f0ef l       .debug_str	00000000 
0000c26b l       .debug_str	00000000 
0002dd1a l       .debug_str	00000000 
0002dde4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00012626 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000bfac l       .debug_str	00000000 
0000e992 l       .debug_str	00000000 
0000f0d5 l       .debug_str	00000000 
0000e778 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000efc8 l       .debug_str	00000000 
0000efd3 l       .debug_str	00000000 
0000efdd l       .debug_str	00000000 
0000e738 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00018c29 l       .debug_str	00000000 
0000efe6 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00018c74 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00025434 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
00034a70 l       .debug_str	00000000 
0002f221 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0002f1b5 l       .debug_str	00000000 
0000e998 l       .debug_str	00000000 
0000e99f l       .debug_str	00000000 
0000e634 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0006012c l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
0005a727 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c24a l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0000c714 l       .debug_str	00000000 
0000c731 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000c777 l       .debug_str	00000000 
0000c788 l       .debug_str	00000000 
0000c7f8 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000c955 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00035924 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac2d l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000cb59 l       .debug_str	00000000 
0000cba9 l       .debug_str	00000000 
0000cc06 l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
0000cc5a l       .debug_str	00000000 
0000ccd1 l       .debug_str	00000000 
0000cd55 l       .debug_str	00000000 
0000cdd0 l       .debug_str	00000000 
0000ce6e l       .debug_str	00000000 
0000cf19 l       .debug_str	00000000 
0000cfbb l       .debug_str	00000000 
0000d080 l       .debug_str	00000000 
0000d152 l       .debug_str	00000000 
0000d21b l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0000d400 l       .debug_str	00000000 
0000e9a7 l       .debug_str	00000000 
0000eab9 l       .debug_str	00000000 
0000ebe8 l       .debug_str	00000000 
0005f664 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
0005ab3e l       .debug_str	00000000 
0002b873 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00027719 l       .debug_str	00000000 
0000eff3 l       .debug_str	00000000 
0001c3c0 l       .debug_str	00000000 
0002dc97 l       .debug_str	00000000 
0000f0da l       .debug_str	00000000 
0000f0e0 l       .debug_str	00000000 
0000ca42 l       .debug_str	00000000 
0000d4f0 l       .debug_str	00000000 
0000d603 l       .debug_str	00000000 
0000d723 l       .debug_str	00000000 
0000d83a l       .debug_str	00000000 
0000d973 l       .debug_str	00000000 
0000dac9 l       .debug_str	00000000 
0002b9ab l       .debug_str	00000000 
00027836 l       .debug_str	00000000 
0000f0e9 l       .debug_str	00000000 
0005d23e l       .debug_str	00000000 
0002dd3e l       .debug_str	00000000 
000229c9 l       .debug_str	00000000 
0002d698 l       .debug_str	00000000 
0002d6fb l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0000c055 l       .debug_str	00000000 
000031ab l       .debug_str	00000000 
000229c7 l       .debug_str	00000000 
0005a9f8 l       .debug_str	00000000 
00022a0a l       .debug_str	00000000 
0005ef34 l       .debug_str	00000000 
0002f14a l       .debug_str	00000000 
0002d7cb l       .debug_str	00000000 
0002d80e l       .debug_str	00000000 
0002d8b3 l       .debug_str	00000000 
0002d8f1 l       .debug_str	00000000 
0002d965 l       .debug_str	00000000 
0002d9a5 l       .debug_str	00000000 
0002da47 l       .debug_str	00000000 
0002dad5 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0000fd9c l       .debug_str	00000000 
0000fdb8 l       .debug_str	00000000 
0002db46 l       .debug_str	00000000 
0002dbd6 l       .debug_str	00000000 
000104af l       .debug_str	00000000 
00010451 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000163d1 l       .debug_str	00000000 
000210a0 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 3ulq1z5tkxz9njop
000012f5 l       .debug_str	00000000 
0002deb6 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00018bc4 l       .debug_str	00000000 
00018bba l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
000134d4 l       .debug_str	00000000 
00033332 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002dded l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0002de51 l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4f0czol4b3uljl4v
00000d05 l       .debug_str	00000000 
0002e034 l       .debug_str	00000000 
00025636 l       .debug_str	00000000 
000265f4 l       .debug_str	00000000 
0002e053 l       .debug_str	00000000 
0002e0d1 l       .debug_str	00000000 
0002e161 l       .debug_str	00000000 
0002e178 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0005cfe1 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
0001ff40 l       .debug_str	00000000 
00003d21 l       .debug_str	00000000 
000612d4 l       .debug_str	00000000 
00016202 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002df1b l       .debug_str	00000000 
0002dfa7 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00025f65 l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
00026300 l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea7c l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00024c12 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0002564b l       .debug_str	00000000 
0002dfb6 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n9jsiq8blzioqfk
0002e5c8 l       .debug_str	00000000 
0002e50c l       .debug_str	00000000 
0002e529 l       .debug_str	00000000 
0002e532 l       .debug_str	00000000 
0002e578 l       .debug_str	00000000 
0002e581 l       .debug_str	00000000 
0002e7fd l       .debug_str	00000000 
0002e611 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
00003d21 l       .debug_str	00000000 
0002e61d l       .debug_str	00000000 
0002e699 l       .debug_str	00000000 
0005cfe1 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
0001ff40 l       .debug_str	00000000 
0002e6c4 l       .debug_str	00000000 
0002e740 l       .debug_str	00000000 
0002e772 l       .debug_str	00000000 
0002e7f8 l       .debug_str	00000000 
0002e807 l       .debug_str	00000000 
0002e161 l       .debug_str	00000000 
0002e878 l       .debug_str	00000000 
0002e8ec l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002e8f6 l       .debug_str	00000000 
0002e903 l       .debug_str	00000000 
0002e97a l       .debug_str	00000000 
0002e994 l       .debug_str	00000000 
0005c24a l       .debug_str	00000000 
0005f664 l       .debug_str	00000000 
0005a66a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002e1ff l       .debug_str	00000000 
0002e228 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00025f65 l       .debug_str	00000000 
0002bc08 l       .debug_str	00000000 
000612d4 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00018bba l       .debug_str	00000000 
0002bc15 l       .debug_str	00000000 
0002e29d l       .debug_str	00000000 
0002e235 l       .debug_str	00000000 
0002e277 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0002e28b l       .debug_str	00000000 
0005f631 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
0004aebe l       .debug_str	00000000 
0000fd6f l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea7c l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00024c12 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0002564b l       .debug_str	00000000 
0002e2a7 l       .debug_str	00000000 
0002e2d0 l       .debug_str	00000000 
00025636 l       .debug_str	00000000 
00025651 l       .debug_str	00000000 
000100a8 l       .debug_str	00000000 
0002566e l       .debug_str	00000000 
00025687 l       .debug_str	00000000 
0002e368 l       .debug_str	00000000 
0002e2ed l       .debug_str	00000000 
0002e332 l       .debug_str	00000000 
0002e356 l       .debug_str	00000000 
0002e385 l       .debug_str	00000000 
00032ef6 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
00025f70 l       .debug_str	00000000 
0002e3b8 l       .debug_str	00000000 
00032f54 l       .debug_str	00000000 
0002abfc l       .debug_str	00000000 
0002e3eb l       .debug_str	00000000 
00032fd6 l       .debug_str	00000000 
000265f4 l       .debug_str	00000000 
0002e422 l       .debug_str	00000000 
0003305a l       .debug_str	00000000 
00026300 l       .debug_str	00000000 
0002e459 l       .debug_str	00000000 
0002e4a7 l       .debug_str	00000000 
000229c9 l       .debug_str	00000000 
0002e4b7 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4z4uczzv8d994j8w
000012f5 l       .debug_str	00000000 
0002eac4 l       .debug_str	00000000 
0002eb16 l       .debug_str	00000000 
0001c3c0 l       .debug_str	00000000 
0005abbb l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
000611df l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000134bc l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002e9b5 l       .debug_str	00000000 
0002ea03 l       .debug_str	00000000 
0000fd6f l       .debug_str	00000000 
0002ea0c l       .debug_str	00000000 
0002ea5c l       .debug_str	00000000 
0002ea67 l       .debug_str	00000000 
0002eab8 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 53kqumdi8360wwys
0002f09c l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0000e70f l       .debug_str	00000000 
0000e718 l       .debug_str	00000000 
0000e726 l       .debug_str	00000000 
00018cda l       .debug_str	00000000 
0000e73e l       .debug_str	00000000 
00024ed3 l       .debug_str	00000000 
0002ef18 l       .debug_str	00000000 
0002efd5 l       .debug_str	00000000 
0002f010 l       .debug_str	00000000 
0002f069 l       .debug_str	00000000 
000253d5 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0002f11f l       .debug_str	00000000 
0002f183 l       .debug_str	00000000 
0000c26b l       .debug_str	00000000 
0002f186 l       .debug_str	00000000 
0000eff9 l       .debug_str	00000000 
000114d7 l       .debug_str	00000000 
00024d9c l       .debug_str	00000000 
00025496 l       .debug_str	00000000 
00059e16 l       .debug_str	00000000 
00061736 l       .debug_str	00000000 
0002f1f6 l       .debug_str	00000000 
0002f1f9 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
00011789 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00010a89 l       .debug_str	00000000 
00018bc9 l       .debug_str	00000000 
00011692 l       .debug_str	00000000 
0001169d l       .debug_str	00000000 
0002f206 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000efc8 l       .debug_str	00000000 
0000efd3 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
0000efdd l       .debug_str	00000000 
0000e738 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00018c29 l       .debug_str	00000000 
0000efe6 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00018c74 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00025434 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00034a70 l       .debug_str	00000000 
0002f221 l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0002f14a l       .debug_str	00000000 
0002eb23 l       .debug_str	00000000 
0002ebc0 l       .debug_str	00000000 
0002ebf9 l       .debug_str	00000000 
0002ec98 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0002f1b5 l       .debug_str	00000000 
0002ecd1 l       .debug_str	00000000 
0002ed6e l       .debug_str	00000000 
0002eda2 l       .debug_str	00000000 
0002ee45 l       .debug_str	00000000 
0002eee4 l       .debug_str	00000000 
00021180 l     O .text	0000001c str.0
000211b0 l     O .text	00000021 str.1
00000000 l    df *ABS*	00000000 tool5db1zbl71ep
0002f206 l       .debug_str	00000000 
0002f221 l       .debug_str	00000000 
0002f2c5 l       .debug_str	00000000 
0002f33a l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00010a89 l       .debug_str	00000000 
00025425 l       .debug_str	00000000 
00011692 l       .debug_str	00000000 
0001169d l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
00018c74 l       .debug_str	00000000 
00034a70 l       .debug_str	00000000 
0002f256 l       .debug_str	00000000 
000253d5 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00025434 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 vnkfcw75uydipan
0002f480 l       .debug_str	00000000 
0002564b l       .debug_str	00000000 
00025636 l       .debug_str	00000000 
00025651 l       .debug_str	00000000 
0002f371 l       .debug_str	00000000 
0002f3bc l       .debug_str	00000000 
0002f3cf l       .debug_str	00000000 
0002f41a l       .debug_str	00000000 
0002f43d l       .debug_str	00000000 
000100a8 l       .debug_str	00000000 
0002f49c l       .debug_str	00000000 
0002e611 l       .debug_str	00000000 
0000fd6f l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
00025f65 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002bc08 l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea7c l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00024c12 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3ik332mkg6tevaet
0000bb41 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010546 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0001072c l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00010725 l       .debug_str	00000000 
0002f4df l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00011789 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1d7thnxtm1658vov
00000d1e l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4a7 l       .debug_str	00000000 
0002f5a4 l       .debug_str	00000000 
0002f5e1 l       .debug_str	00000000 
0002f5f2 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0004ea10 l       .debug_str	00000000 
000399b5 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000394cb l       .debug_str	00000000 
0005cbb4 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a826 l       .debug_str	00000000 
0005a727 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f32a l       .debug_str	00000000 
0005a79d l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1mpt8t9sy9fl5s1y
0002f7e9 l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
0002f668 l       .debug_str	00000000 
00019287 l       .debug_str	00000000 
0002f6ad l       .debug_str	00000000 
0002f6f2 l       .debug_str	00000000 
0002f6ff l       .debug_str	00000000 
0002f744 l       .debug_str	00000000 
0002f751 l       .debug_str	00000000 
0001b2ae l       .debug_str	00000000 
0002f796 l       .debug_str	00000000 
0000be9b l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
0001c3c0 l       .debug_str	00000000 
0002f7de l       .debug_str	00000000 
0000bf55 l       .debug_str	00000000 
0002f831 l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
0002f877 l       .debug_str	00000000 
0002f8bd l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
0005cba2 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0005e9b8 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002f624 l       .debug_str	00000000 
0000be46 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1yr11byuhnx447wf
0001f35a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00059b11 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00015d05 l       .debug_str	00000000 
00011f53 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
0001f5eb l       .debug_str	00000000 
000343dd l       .debug_str	00000000 
00011f58 l       .debug_str	00000000 
0001f446 l       .debug_str	00000000 
00011f4f l       .debug_str	00000000 
0001f5f1 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002f903 l       .debug_str	00000000 
00019328 l       .debug_str	00000000 
0001c3c0 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0001f440 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2c4l9zx47vkj1m82
00035d03 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00012b85 l       .debug_str	00000000 
0005e9b8 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002f96c l       .debug_str	00000000 
0005c058 l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2zdnjadro4igct6r
000197c8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002f9db l       .debug_str	00000000 
0002fa01 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3w7pruxfhz9uhnv5
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005a66a l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0005cfe1 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
000612d4 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016202 l       .debug_str	00000000 
000229c9 l       .debug_str	00000000 
0002fa0a l       .debug_str	00000000 
0002fa86 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4wduwt141qumn59z
0000139d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0005e79c l       .debug_str	00000000 
00033332 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0001f35a l       .debug_str	00000000 
0002fab3 l       .debug_str	00000000 
00012b82 l       .debug_str	00000000 
0001c3c0 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 pcinnba97cylogg
0001603d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00012626 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002fb15 l       .debug_str	00000000 
0001602f l       .debug_str	00000000 
00013ac7 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0005a699 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 13ma8mzaba1sllzw
0003006b l       .debug_str	00000000 
0003e5ff l       .debug_str	00000000 
0000395c l       .debug_str	00000000 
000303bf l       .debug_str	00000000 
000213ae l       .debug_str	00000000 
0003043e l       .debug_str	00000000 
00021431 l       .debug_str	00000000 
000304bd l       .debug_str	00000000 
0003053f l       .debug_str	00000000 
0002219c l       .debug_str	00000000 
00030783 l       .debug_str	00000000 
00030805 l       .debug_str	00000000 
0003084e l       .debug_str	00000000 
000308d0 l       .debug_str	00000000 
00030919 l       .debug_str	00000000 
000216b2 l       .debug_str	00000000 
0003099b l       .debug_str	00000000 
00030a1d l       .debug_str	00000000 
00030c61 l       .debug_str	00000000 
00030ce3 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00030d2c l       .debug_str	00000000 
00030da0 l       .debug_str	00000000 
0001264e l       .debug_str	00000000 
0001f35a l       .debug_str	00000000 
00012626 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0003576a l       .debug_str	00000000 
000612d4 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013615 l       .debug_str	00000000 
000611df l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
0002bc27 l       .debug_str	00000000 
0003100f l       .debug_str	00000000 
0003127a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0006012c l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
0005a727 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c24a l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035924 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac2d l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000590a l       .debug_str	00000000 
00005958 l       .debug_str	00000000 
000059c3 l       .debug_str	00000000 
0005f664 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
0005ab3e l       .debug_str	00000000 
00030d3e l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00005ac0 l       .debug_str	00000000 
00005b05 l       .debug_str	00000000 
00005b73 l       .debug_str	00000000 
00005c0a l       .debug_str	00000000 
00005cca l       .debug_str	00000000 
00005db3 l       .debug_str	00000000 
00005ec5 l       .debug_str	00000000 
00006000 l       .debug_str	00000000 
00006164 l       .debug_str	00000000 
000062f1 l       .debug_str	00000000 
000064a7 l       .debug_str	00000000 
00006686 l       .debug_str	00000000 
0000688e l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
00006bc3 l       .debug_str	00000000 
00006c3a l       .debug_str	00000000 
00006cbe l       .debug_str	00000000 
00006d39 l       .debug_str	00000000 
00006dd7 l       .debug_str	00000000 
00006e82 l       .debug_str	00000000 
00006f24 l       .debug_str	00000000 
00006fe9 l       .debug_str	00000000 
000070bb l       .debug_str	00000000 
00007184 l       .debug_str	00000000 
00007270 l       .debug_str	00000000 
00007369 l       .debug_str	00000000 
00007459 l       .debug_str	00000000 
0000756c l       .debug_str	00000000 
0000768c l       .debug_str	00000000 
000077a3 l       .debug_str	00000000 
000078dd l       .debug_str	00000000 
00007a24 l       .debug_str	00000000 
00007b62 l       .debug_str	00000000 
00007cc3 l       .debug_str	00000000 
00007e31 l       .debug_str	00000000 
00007f96 l       .debug_str	00000000 
0000811e l       .debug_str	00000000 
000082b3 l       .debug_str	00000000 
0000843f l       .debug_str	00000000 
000085ee l       .debug_str	00000000 
000087aa l       .debug_str	00000000 
0000895d l       .debug_str	00000000 
00008b33 l       .debug_str	00000000 
00008d16 l       .debug_str	00000000 
00008ef0 l       .debug_str	00000000 
000090ed l       .debug_str	00000000 
000092f7 l       .debug_str	00000000 
000094f8 l       .debug_str	00000000 
0000971c l       .debug_str	00000000 
0000994d l       .debug_str	00000000 
00009b75 l       .debug_str	00000000 
00009dbe l       .debug_str	00000000 
0000a024 l       .debug_str	00000000 
00030db2 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002fb67 l       .debug_str	00000000 
0002fbee l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
0002fc3b l       .debug_str	00000000 
0002fcc2 l       .debug_str	00000000 
0002ff0a l       .debug_str	00000000 
0002ff93 l       .debug_str	00000000 
0002ffe2 l       .debug_str	00000000 
000302b5 l       .debug_str	00000000 
000210a3 l       .debug_str	00000000 
00030341 l       .debug_str	00000000 
0002132c l       .debug_str	00000000 
000212a0 l     O .text	0000001c str.0
000212e0 l     O .text	00000021 str.1
00000000 l    df *ABS*	00000000 4miap3quw76e3k6m
00000beb l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000134bc l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
000611df l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000312ea l       .debug_str	00000000 
0000b1cc l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4yl298udq4i2eqhh
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
000134d4 l       .debug_str	00000000 
00033332 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0003133a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 f8ebwo3yn0ryfmw
000315ff l       .debug_str	00000000 
000082b3 l       .debug_str	00000000 
0000843f l       .debug_str	00000000 
000085ee l       .debug_str	00000000 
000087aa l       .debug_str	00000000 
0000895d l       .debug_str	00000000 
00008b33 l       .debug_str	00000000 
00008d16 l       .debug_str	00000000 
00008ef0 l       .debug_str	00000000 
000090ed l       .debug_str	00000000 
000092f7 l       .debug_str	00000000 
00031677 l       .debug_str	00000000 
000318a2 l       .debug_str	00000000 
0003191a l       .debug_str	00000000 
00031aa9 l       .debug_str	00000000 
00031b21 l       .debug_str	00000000 
00031c89 l       .debug_str	00000000 
00031d01 l       .debug_str	00000000 
00031d7f l       .debug_str	00000000 
00031df7 l       .debug_str	00000000 
00031eea l       .debug_str	00000000 
00031f62 l       .debug_str	00000000 
0003213f l       .debug_str	00000000 
000321b7 l       .debug_str	00000000 
00032283 l       .debug_str	00000000 
000322fb l       .debug_str	00000000 
0003232b l       .debug_str	00000000 
000323a3 l       .debug_str	00000000 
00032448 l       .debug_str	00000000 
000324c0 l       .debug_str	00000000 
00032601 l       .debug_str	00000000 
00032679 l       .debug_str	00000000 
0003282f l       .debug_str	00000000 
000328a7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035924 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0005ac2d l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
0003139e l       .debug_str	00000000 
00031416 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
00006bc3 l       .debug_str	00000000 
00006c3a l       .debug_str	00000000 
00006cbe l       .debug_str	00000000 
00006d39 l       .debug_str	00000000 
00006dd7 l       .debug_str	00000000 
00006e82 l       .debug_str	00000000 
00006f24 l       .debug_str	00000000 
00006fe9 l       .debug_str	00000000 
000070bb l       .debug_str	00000000 
00007184 l       .debug_str	00000000 
00007270 l       .debug_str	00000000 
00007369 l       .debug_str	00000000 
0003146d l       .debug_str	00000000 
000314e5 l       .debug_str	00000000 
00007459 l       .debug_str	00000000 
0000756c l       .debug_str	00000000 
0000768c l       .debug_str	00000000 
000077a3 l       .debug_str	00000000 
000078dd l       .debug_str	00000000 
00007a24 l       .debug_str	00000000 
00007b62 l       .debug_str	00000000 
00007cc3 l       .debug_str	00000000 
00007e31 l       .debug_str	00000000 
00007f96 l       .debug_str	00000000 
0000811e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 16gyyaet005v3lvf
00024d92 l       .debug_str	00000000 
00032aab l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00032b0b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00035924 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1gec8qpvo4ti2nbg
0001c3c0 l       .debug_str	00000000 
0002eab8 l       .debug_str	00000000 
00032c6f l       .debug_str	00000000 
0002eb16 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
0005abbb l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000134c4 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00032b6b l       .debug_str	00000000 
0002ea03 l       .debug_str	00000000 
00025f65 l       .debug_str	00000000 
00032bbd l       .debug_str	00000000 
00032c10 l       .debug_str	00000000 
00032c1a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 28buxl9xaffr9rke
0005a79d l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea10 l       .debug_str	00000000 
000399b5 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005e9b8 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00032cc5 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
00018bba l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f32a l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2leljxexqh8ze7wz
00035d03 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00012b85 l       .debug_str	00000000 
0005e9b8 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00032d22 l       .debug_str	00000000 
0005c058 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3cgt5uexdtuxl7pe
00033072 l       .debug_str	00000000 
00032f78 l       .debug_str	00000000 
00032f95 l       .debug_str	00000000 
00032fd0 l       .debug_str	00000000 
00032ffe l       .debug_str	00000000 
00033019 l       .debug_str	00000000 
00033054 l       .debug_str	00000000 
0003307d l       .debug_str	00000000 
00032c10 l       .debug_str	00000000 
000330a3 l       .debug_str	00000000 
000330c9 l       .debug_str	00000000 
000330e3 l       .debug_str	00000000 
0002ea5c l       .debug_str	00000000 
0003310a l       .debug_str	00000000 
00033131 l       .debug_str	00000000 
0005c24a l       .debug_str	00000000 
0005f664 l       .debug_str	00000000 
000100a8 l       .debug_str	00000000 
0000fd6f l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0005db0b l       .debug_str	00000000 
0005ae15 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
0005a727 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00032d93 l       .debug_str	00000000 
00032da5 l       .debug_str	00000000 
00032db6 l       .debug_str	00000000 
00032e02 l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea7c l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00024c12 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0002564b l       .debug_str	00000000 
00032e0e l       .debug_str	00000000 
00032e30 l       .debug_str	00000000 
00032e51 l       .debug_str	00000000 
00032e9d l       .debug_str	00000000 
00032eb9 l       .debug_str	00000000 
00032ef0 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00025f65 l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
00032f0a l       .debug_str	00000000 
00032f17 l       .debug_str	00000000 
00032f4e l       .debug_str	00000000 
00025636 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 26y0fjfhtczgcip1
0005abbb l       .debug_str	00000000 
00033275 l       .debug_str	00000000 
00033291 l       .debug_str	00000000 
000332b7 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0005f664 l       .debug_str	00000000 
00002389 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005db0b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003314c l       .debug_str	00000000 
00013503 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
0005a727 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00033175 l       .debug_str	00000000 
00033186 l       .debug_str	00000000 
00033196 l       .debug_str	00000000 
000331e2 l       .debug_str	00000000 
000331ed l       .debug_str	00000000 
00033223 l       .debug_str	00000000 
0003323b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3529eu2hb2fyibnd
000160e4 l       .debug_str	00000000 
0001611e l       .debug_str	00000000 
00016157 l       .debug_str	00000000 
00016166 l       .debug_str	00000000 
000161a9 l       .debug_str	00000000 
0005c0e6 l       .debug_str	00000000 
00038a71 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000133c3 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000114d7 l       .debug_str	00000000 
000114db l       .debug_str	00000000 
00016160 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000332c0 l       .debug_str	00000000 
00013406 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
000332e9 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0005f664 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
0005a727 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3cyvbl47c30y60eb
0005c307 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00012b85 l       .debug_str	00000000 
0005e9b8 l       .debug_str	00000000 
00033325 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00033338 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
000333c4 l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
000333cd l       .debug_str	00000000 
0003e5ff l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
000333dd l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19nunfeq6523tst5
00024d92 l       .debug_str	00000000 
00033404 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00033464 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00035924 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1xpo0qpsduc6enem
00033530 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
000334c4 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4xxoizn3g1nl6m5i
00035d03 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00012b85 l       .debug_str	00000000 
0005e9b8 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00033539 l       .debug_str	00000000 
0005c058 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 25lz0dio8kzdubcg
0001603d l       .debug_str	00000000 
0005abbb l       .debug_str	00000000 
00025636 l       .debug_str	00000000 
000100a8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
00013380 l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000335aa l       .debug_str	00000000 
000335e8 l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea7c l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00024c12 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0002564b l       .debug_str	00000000 
00033601 l       .debug_str	00000000 
0003363f l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00025f65 l       .debug_str	00000000 
0005ae15 l       .debug_str	00000000 
0000fd6f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 core.b09zx0wt-cgu.0
00000afc l       .debug_str	00000000 
00033668 l       .debug_str	00000000 
0003367b l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
0005e9b8 l       .debug_str	00000000 
000336ac l       .debug_str	00000000 
000336b4 l       .debug_str	00000000 
000336bd l       .debug_str	00000000 
00033706 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000336c4 l       .debug_str	00000000 
00033703 l       .debug_str	00000000 
0003370c l       .debug_str	00000000 
0003374e l       .debug_str	00000000 
00033758 l       .debug_str	00000000 
0003379b l       .debug_str	00000000 
000337a5 l       .debug_str	00000000 
000337e8 l       .debug_str	00000000 
000337f2 l       .debug_str	00000000 
00033835 l       .debug_str	00000000 
00033840 l       .debug_str	00000000 
00033885 l       .debug_str	00000000 
00033890 l       .debug_str	00000000 
000338d5 l       .debug_str	00000000 
000338db l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00033f10 l       .debug_str	00000000 
000114d7 l       .debug_str	00000000 
000338e8 l       .debug_str	00000000 
000338f8 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00012626 l       .debug_str	00000000 
000116df l       .debug_str	00000000 
00012610 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003576a l       .debug_str	00000000 
000612d4 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013615 l       .debug_str	00000000 
00024c87 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0003393e l       .debug_str	00000000 
000229c9 l       .debug_str	00000000 
0005f727 l       .debug_str	00000000 
00034314 l       .debug_str	00000000 
00012618 l       .debug_str	00000000 
0005f339 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0005ab8f l       .debug_str	00000000 
00033950 l       .debug_str	00000000 
00033955 l       .debug_str	00000000 
00060caf l       .debug_str	00000000 
00033960 l       .debug_str	00000000 
00000326 l       .debug_str	00000000 
0003396a l       .debug_str	00000000 
00033fde l       .debug_str	00000000 
00033974 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
0003401e l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00034357 l       .debug_str	00000000 
00012622 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00033982 l       .debug_str	00000000 
000339f6 l       .debug_str	00000000 
00034238 l       .debug_str	00000000 
00033a08 l       .debug_str	00000000 
00034024 l       .debug_str	00000000 
00033ffe l       .debug_str	00000000 
00014ac9 l       .debug_str	00000000 
0003427b l       .debug_str	00000000 
00033a0d l       .debug_str	00000000 
00033a81 l       .debug_str	00000000 
00034390 l       .debug_str	00000000 
000343d7 l       .debug_str	00000000 
000342dd l       .debug_str	00000000 
00033a99 l       .debug_str	00000000 
00043b6c l       .debug_str	00000000 
0003928b l       .debug_str	00000000 
0005ab3e l       .debug_str	00000000 
000343f2 l       .debug_str	00000000 
000342ac l       .debug_str	00000000 
00033b11 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005e945 l       .debug_str	00000000 
0002219c l       .debug_str	00000000 
00033b69 l       .debug_str	00000000 
00033b6e l       .debug_str	00000000 
00033b80 l       .debug_str	00000000 
0001c3c0 l       .debug_str	00000000 
00034a70 l       .debug_str	00000000 
00033b89 l       .debug_str	00000000 
0001a4f8 l       .debug_str	00000000 
00033bb1 l       .debug_str	00000000 
00033bc1 l       .debug_str	00000000 
0005cfe1 l       .debug_str	00000000 
00033c1a l       .debug_str	00000000 
00033c22 l       .debug_str	00000000 
000135a5 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00010b34 l       .debug_str	00000000 
00033c2a l       .debug_str	00000000 
0001626a l       .debug_str	00000000 
00033c36 l       .debug_str	00000000 
00033c40 l       .debug_str	00000000 
00033c4d l       .debug_str	00000000 
00033c5a l       .debug_str	00000000 
00033c6f l       .debug_str	00000000 
00033c83 l       .debug_str	00000000 
00033c99 l       .debug_str	00000000 
00033ca1 l       .debug_str	00000000 
00033cae l       .debug_str	00000000 
00033cbb l       .debug_str	00000000 
000345c4 l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
00033cc8 l       .debug_str	00000000 
00033cf5 l       .debug_str	00000000 
00033d24 l       .debug_str	00000000 
00033d4b l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00033d6a l       .debug_str	00000000 
00033d7f l       .debug_str	00000000 
00019f1a l       .debug_str	00000000 
0004ea10 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
0005a79d l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00033d89 l       .debug_str	00000000 
00033dae l       .debug_str	00000000 
00033d94 l       .debug_str	00000000 
00033e2d l       .debug_str	00000000 
00033dbe l       .debug_str	00000000 
00033dc4 l       .debug_str	00000000 
00033dd3 l       .debug_str	00000000 
00033dde l       .debug_str	00000000 
00033e13 l       .debug_str	00000000 
00033e38 l       .debug_str	00000000 
00033e48 l       .debug_str	00000000 
0005b3a7 l       .debug_str	00000000 
00033e7a l       .debug_str	00000000 
00033e7f l       .debug_str	00000000 
0005c24a l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
000356dd l       .debug_str	00000000 
000134d4 l       .debug_str	00000000 
0003570b l       .debug_str	00000000 
0003573f l       .debug_str	00000000 
00033e85 l       .debug_str	00000000 
0000581f l       .debug_str	00000000 
00033ec3 l       .debug_str	00000000 
000356e8 l       .debug_str	00000000 
00035735 l       .debug_str	00000000 
00033ea4 l       .debug_str	00000000 
00033e91 l       .debug_str	00000000 
00033eaa l       .debug_str	00000000 
0002219b l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
0000bb40 l       .debug_str	00000000 
00033ed2 l       .debug_str	00000000 
00033eda l       .debug_str	00000000 
0003f3a3 l       .debug_str	00000000 
00033ee0 l       .debug_str	00000000 
0004cece l       .debug_str	00000000 
00033f07 l       .debug_str	00000000 
00033eeb l       .debug_str	00000000 
0000e8a7 l       .debug_str	00000000 
00033f0f l       .debug_str	00000000 
00033bbb l       .debug_str	00000000 
00022b2f l       .debug_str	00000000 
00024be7 l       .debug_str	00000000 
00033f14 l       .debug_str	00000000 
00033f38 l       .debug_str	00000000 
00033f3e l       .debug_str	00000000 
00033f46 l       .debug_str	00000000 
0004f539 l       .debug_str	00000000 
0003ef9f l       .debug_str	00000000 
00033f4b l       .debug_str	00000000 
00033f73 l       .debug_str	00000000 
00033f55 l       .debug_str	00000000 
00025f6c l       .debug_str	00000000 
00018bba l       .debug_str	00000000 
000160dd l       .debug_str	00000000 
0001f406 l       .debug_str	00000000 
00022b37 l       .debug_str	00000000 
00022b44 l       .debug_str	00000000 
00022b4d l       .debug_str	00000000 
00059b05 l       .debug_str	00000000 
00033f87 l       .debug_str	00000000 
00033f7b l       .debug_str	00000000 
00012b85 l       .debug_str	00000000 
00033f94 l       .debug_str	00000000 
00033fa0 l       .debug_str	00000000 
00033fc3 l       .debug_str	00000000 
00033fad l       .debug_str	00000000 
00033fd1 l       .debug_str	00000000 
00033ff1 l       .debug_str	00000000 
00034011 l       .debug_str	00000000 
0003402c l       .debug_str	00000000 
00034047 l       .debug_str	00000000 
0003404d l       .debug_str	00000000 
00034051 l       .debug_str	00000000 
00034062 l       .debug_str	00000000 
00034055 l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00034077 l       .debug_str	00000000 
00034072 l       .debug_str	00000000 
0003408a l       .debug_str	00000000 
000340d6 l       .debug_str	00000000 
000340af l       .debug_str	00000000 
000340c6 l       .debug_str	00000000 
000340f0 l       .debug_str	00000000 
000340e1 l       .debug_str	00000000 
00034138 l       .debug_str	00000000 
00034118 l       .debug_str	00000000 
00034191 l       .debug_str	00000000 
00034171 l       .debug_str	00000000 
00059af7 l       .debug_str	00000000 
000341e8 l       .debug_str	00000000 
000341ed l       .debug_str	00000000 
000341f3 l       .debug_str	00000000 
00034216 l       .debug_str	00000000 
000341f8 l       .debug_str	00000000 
00034221 l       .debug_str	00000000 
0003426c l       .debug_str	00000000 
0003429d l       .debug_str	00000000 
000342ce l       .debug_str	00000000 
000342fd l       .debug_str	00000000 
00034348 l       .debug_str	00000000 
00034379 l       .debug_str	00000000 
0001a317 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000399b5 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
000394cb l       .debug_str	00000000 
0005cbb4 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
000611ee l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a826 l       .debug_str	00000000 
0005a727 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0005ad6f l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0001f32a l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4a7 l       .debug_str	00000000 
0001f49b l       .debug_str	00000000 
0001f2d8 l       .debug_str	00000000 
000343ca l       .debug_str	00000000 
000343e3 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00034411 l       .debug_str	00000000 
00034410 l       .debug_str	00000000 
00034425 l       .debug_str	00000000 
00034416 l       .debug_str	00000000 
0005a818 l       .debug_str	00000000 
00059ae5 l       .debug_str	00000000 
00000e0b l       .debug_str	00000000 
00034452 l       .debug_str	00000000 
00034444 l       .debug_str	00000000 
00034443 l       .debug_str	00000000 
0001f40f l       .debug_str	00000000 
00018bc4 l       .debug_str	00000000 
00061624 l       .debug_str	00000000 
0003445b l       .debug_str	00000000 
0003445f l       .debug_str	00000000 
00034462 l       .debug_str	00000000 
00060114 l       .debug_str	00000000 
00018ba8 l       .debug_str	00000000 
00034465 l       .debug_str	00000000 
00019e92 l       .debug_str	00000000 
00034469 l       .debug_str	00000000 
00034468 l       .debug_str	00000000 
0003446e l       .debug_str	00000000 
00034540 l       .debug_str	00000000 
00000238 l       .debug_str	00000000 
0003448c l       .debug_str	00000000 
0003447a l       .debug_str	00000000 
000344b1 l       .debug_str	00000000 
00034579 l       .debug_str	00000000 
000344cf l       .debug_str	00000000 
000344bd l       .debug_str	00000000 
000344f4 l       .debug_str	00000000 
0003450d l       .debug_str	00000000 
000344fb l       .debug_str	00000000 
00034519 l       .debug_str	00000000 
00034531 l       .debug_str	00000000 
0003456a l       .debug_str	00000000 
00019e98 l       .debug_str	00000000 
000345a3 l       .debug_str	00000000 
000345b0 l       .debug_str	00000000 
000345af l       .debug_str	00000000 
000345b8 l       .debug_str	00000000 
000345e5 l       .debug_str	00000000 
000345d0 l       .debug_str	00000000 
00034602 l       .debug_str	00000000 
0003460e l       .debug_str	00000000 
000346b8 l       .debug_str	00000000 
0003461a l       .debug_str	00000000 
00034621 l       .debug_str	00000000 
0003462a l       .debug_str	00000000 
00034638 l       .debug_str	00000000 
0003463f l       .debug_str	00000000 
00034647 l       .debug_str	00000000 
0003464e l       .debug_str	00000000 
00034694 l       .debug_str	00000000 
0003466f l       .debug_str	00000000 
0003465a l       .debug_str	00000000 
0003467f l       .debug_str	00000000 
000346a3 l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
000346c4 l       .debug_str	00000000 
00024bfa l       .debug_str	00000000 
0005dffe l       .debug_str	00000000 
0001f24b l       .debug_str	00000000 
0001f234 l       .debug_str	00000000 
000346de l       .debug_str	00000000 
00034701 l       .debug_str	00000000 
000346ea l       .debug_str	00000000 
0003474b l       .debug_str	00000000 
0003473f l       .debug_str	00000000 
00033bb6 l       .debug_str	00000000 
00034768 l       .debug_str	00000000 
00034751 l       .debug_str	00000000 
000347b1 l       .debug_str	00000000 
000347d9 l       .debug_str	00000000 
000347c2 l       .debug_str	00000000 
0005cba2 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
0005ac2d l       .debug_str	00000000 
00034888 l       .debug_str	00000000 
0003486a l       .debug_str	00000000 
0003497e l       .debug_str	00000000 
0003495e l       .debug_str	00000000 
000349f1 l       .debug_str	00000000 
000349d1 l       .debug_str	00000000 
0004aff7 l       .debug_str	00000000 
00034a44 l       .debug_str	00000000 
00034a51 l       .debug_str	00000000 
00034a5c l       .debug_str	00000000 
00034a72 l       .debug_str	00000000 
00034a7c l       .debug_str	00000000 
00034ad2 l       .debug_str	00000000 
00034ae4 l       .debug_str	00000000 
00034b36 l       .debug_str	00000000 
00034b4a l       .debug_str	00000000 
00034b9e l       .debug_str	00000000 
00034ba5 l       .debug_str	00000000 
00034beb l       .debug_str	00000000 
00034bfa l       .debug_str	00000000 
00034c54 l       .debug_str	00000000 
00034caa l       .debug_str	00000000 
00034d02 l       .debug_str	00000000 
00034d4c l       .debug_str	00000000 
00034d52 l       .debug_str	00000000 
00034da2 l       .debug_str	00000000 
00034dee l       .debug_str	00000000 
00034e3c l       .debug_str	00000000 
00024ca0 l       .debug_str	00000000 
00034e7c l       .debug_str	00000000 
00034ec9 l       .debug_str	00000000 
00034f12 l       .debug_str	00000000 
00034f5d l       .debug_str	00000000 
00034f9a l       .debug_str	00000000 
00034faa l       .debug_str	00000000 
00035005 l       .debug_str	00000000 
0003505c l       .debug_str	00000000 
000350b5 l       .debug_str	00000000 
0004238b l       .debug_str	00000000 
00035100 l       .debug_str	00000000 
00035154 l       .debug_str	00000000 
000351a4 l       .debug_str	00000000 
000351f6 l       .debug_str	00000000 
0005a699 l       .debug_str	00000000 
0003523a l       .debug_str	00000000 
00035286 l       .debug_str	00000000 
000352ce l       .debug_str	00000000 
00035318 l       .debug_str	00000000 
000421c1 l       .debug_str	00000000 
00035354 l       .debug_str	00000000 
000353a8 l       .debug_str	00000000 
000353f8 l       .debug_str	00000000 
0003544a l       .debug_str	00000000 
0003548e l       .debug_str	00000000 
0003549a l       .debug_str	00000000 
000354f1 l       .debug_str	00000000 
00035544 l       .debug_str	00000000 
00035599 l       .debug_str	00000000 
000355e0 l       .debug_str	00000000 
000355ec l       .debug_str	00000000 
00035603 l       .debug_str	00000000 
000355fc l       .debug_str	00000000 
00035615 l       .debug_str	00000000 
0003562a l       .debug_str	00000000 
0003567b l       .debug_str	00000000 
0003568b l       .debug_str	00000000 
000356dc l       .debug_str	00000000 
000356e7 l       .debug_str	00000000 
0003570a l       .debug_str	00000000 
0003573e l       .debug_str	00000000 
00035754 l       .debug_str	00000000 
00035782 l       .debug_str	00000000 
00035776 l       .debug_str	00000000 
00035790 l       .debug_str	00000000 
0003578f l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00018bb0 l       .debug_str	00000000 
00024c0d l       .debug_str	00000000 
00024c0c l       .debug_str	00000000 
00024c12 l       .debug_str	00000000 
00024c11 l       .debug_str	00000000 
00035793 l       .debug_str	00000000 
000357d3 l       .debug_str	00000000 
000357db l       .debug_str	00000000 
0003581b l       .debug_str	00000000 
00035825 l       .debug_str	00000000 
00059c31 l       .debug_str	00000000 
0005e79c l       .debug_str	00000000 
00035861 l       .debug_str	00000000 
0001b086 l       .debug_str	00000000 
00038681 l       .debug_str	00000000 
00035889 l       .debug_str	00000000 
0001af3e l       .debug_str	00000000 
000358b2 l       .debug_str	00000000 
000358d7 l       .debug_str	00000000 
0004680f l       .debug_str	00000000 
0005ac87 l       .debug_str	00000000 
000358de l       .debug_str	00000000 
000358e7 l       .debug_str	00000000 
00035920 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
00035928 l       .debug_str	00000000 
00014377 l       .debug_str	00000000 
000359bd l       .debug_str	00000000 
0000be9b l       .debug_str	00000000 
00035a08 l       .debug_str	00000000 
0000be46 l       .debug_str	00000000 
00035a4f l       .debug_str	00000000 
00013ac7 l       .debug_str	00000000 
00035aa4 l       .debug_str	00000000 
00035ae1 l       .debug_str	00000000 
000134c4 l       .debug_str	00000000 
00035aec l       .debug_str	00000000 
00014281 l       .debug_str	00000000 
00035b41 l       .debug_str	00000000 
00014211 l       .debug_str	00000000 
00035b93 l       .debug_str	00000000 
0000ab71 l       .debug_str	00000000 
00035bda l       .debug_str	00000000 
0000ab6c l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00011e0e l       .debug_str	00000000 
000365e4 l       .debug_str	00000000 
00035c60 l       .debug_str	00000000 
00035ca1 l       .debug_str	00000000 
00035cc4 l       .debug_str	00000000 
00035cff l       .debug_str	00000000 
00035d09 l       .debug_str	00000000 
00035d93 l       .debug_str	00000000 
00035dc5 l       .debug_str	00000000 
000130b9 l       .debug_str	00000000 
000134bc l       .debug_str	00000000 
00035e39 l       .debug_str	00000000 
00035e8a l       .debug_str	00000000 
000135f0 l       .debug_str	00000000 
00035ecc l       .debug_str	00000000 
00035f53 l       .debug_str	00000000 
00035f62 l       .debug_str	00000000 
00035fec l       .debug_str	00000000 
00036068 l       .debug_str	00000000 
00036098 l       .debug_str	00000000 
000360d3 l       .debug_str	00000000 
000360dd l       .debug_str	00000000 
00003ab0 l       .debug_str	00000000 
00036154 l       .debug_str	00000000 
000361a9 l       .debug_str	00000000 
000361b2 l       .debug_str	00000000 
00036203 l       .debug_str	00000000 
0000579d l       .debug_str	00000000 
0003620f l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0003621c l       .debug_str	00000000 
00036225 l       .debug_str	00000000 
0003623b l       .debug_str	00000000 
00036248 l       .debug_str	00000000 
0003628d l       .debug_str	00000000 
000362a1 l       .debug_str	00000000 
000362f6 l       .debug_str	00000000 
000362ff l       .debug_str	00000000 
0004d4ae l       .debug_str	00000000 
00036337 l       .debug_str	00000000 
00036374 l       .debug_str	00000000 
0003637f l       .debug_str	00000000 
00036402 l       .debug_str	00000000 
0003640d l       .debug_str	00000000 
00036493 l       .debug_str	00000000 
00036508 l       .debug_str	00000000 
00036534 l       .debug_str	00000000 
000365bd l       .debug_str	00000000 
000365cc l       .debug_str	00000000 
000365d9 l       .debug_str	00000000 
000365ed l       .debug_str	00000000 
00036643 l       .debug_str	00000000 
000366b2 l       .debug_str	00000000 
00036732 l       .debug_str	00000000 
000367a0 l       .debug_str	00000000 
0003682b l       .debug_str	00000000 
000368a0 l       .debug_str	00000000 
000368e0 l       .debug_str	00000000 
00036963 l       .debug_str	00000000 
000369a4 l       .debug_str	00000000 
0004aeb9 l       .debug_str	00000000 
0004e9d3 l       .debug_str	00000000 
00036a09 l       .debug_str	00000000 
00036ab8 l       .debug_str	00000000 
00036b03 l       .debug_str	00000000 
000144fc l       .debug_str	00000000 
00036bac l       .debug_str	00000000 
00036c28 l       .debug_str	00000000 
0001337a l       .debug_str	00000000 
00036c4d l       .debug_str	00000000 
0000bf06 l       .debug_str	00000000 
00036c9a l       .debug_str	00000000 
00013a6a l       .debug_str	00000000 
00036ced l       .debug_str	00000000 
00036d28 l       .debug_str	00000000 
00036d33 l       .debug_str	00000000 
00019b36 l       .debug_str	00000000 
00036dbf l       .debug_str	00000000 
000136c2 l       .debug_str	00000000 
00036e42 l       .debug_str	00000000 
00036eca l       .debug_str	00000000 
0001ffc6 l       .debug_str	00000000 
00036f3f l       .debug_str	00000000 
00036fc5 l       .debug_str	00000000 
00014a03 l       .debug_str	00000000 
0003703a l       .debug_str	00000000 
0000b6af l       .debug_str	00000000 
0003709d l       .debug_str	00000000 
0000abf6 l       .debug_str	00000000 
000370ff l       .debug_str	00000000 
0000a8e2 l       .debug_str	00000000 
00037145 l       .debug_str	00000000 
0003718d l       .debug_str	00000000 
00037197 l       .debug_str	00000000 
000371d8 l       .debug_str	00000000 
000371f2 l       .debug_str	00000000 
00024cc5 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
000371f8 l       .debug_str	00000000 
00037201 l       .debug_str	00000000 
00037266 l       .debug_str	00000000 
00037275 l       .debug_str	00000000 
000372b7 l       .debug_str	00000000 
000372c1 l       .debug_str	00000000 
00037326 l       .debug_str	00000000 
00037368 l       .debug_str	00000000 
000373b2 l       .debug_str	00000000 
000373c1 l       .debug_str	00000000 
000373f7 l       .debug_str	00000000 
00037400 l       .debug_str	00000000 
00016964 l       .debug_str	00000000 
0003740a l       .debug_str	00000000 
0003740d l       .debug_str	00000000 
00037445 l       .debug_str	00000000 
0003744f l       .debug_str	00000000 
00037493 l       .debug_str	00000000 
000374a9 l       .debug_str	00000000 
000374f2 l       .debug_str	00000000 
00013637 l       .debug_str	00000000 
00024cb0 l       .debug_str	00000000 
00037537 l       .debug_str	00000000 
00037580 l       .debug_str	00000000 
0003758e l       .debug_str	00000000 
000375d6 l       .debug_str	00000000 
0002337e l       .debug_str	00000000 
00037620 l       .debug_str	00000000 
00040df8 l       .debug_str	00000000 
000376b8 l       .debug_str	00000000 
0005a66a l       .debug_str	00000000 
00037752 l       .debug_str	00000000 
0002386e l       .debug_str	00000000 
000377c4 l       .debug_str	00000000 
000235a1 l       .debug_str	00000000 
00037867 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
00037899 l       .debug_str	00000000 
000378e0 l       .debug_str	00000000 
000378ee l       .debug_str	00000000 
000378f8 l       .debug_str	00000000 
00037946 l       .debug_str	00000000 
00037956 l       .debug_str	00000000 
000379a1 l       .debug_str	00000000 
000379af l       .debug_str	00000000 
00037a3d l       .debug_str	00000000 
00037a4c l       .debug_str	00000000 
0000bf55 l       .debug_str	00000000 
00037a95 l       .debug_str	00000000 
0000befe l       .debug_str	00000000 
00037ada l       .debug_str	00000000 
00037b14 l       .debug_str	00000000 
00037b1d l       .debug_str	00000000 
00037b69 l       .debug_str	00000000 
00037b81 l       .debug_str	00000000 
00037be3 l       .debug_str	00000000 
0000be4e l       .debug_str	00000000 
00037c18 l       .debug_str	00000000 
00037c40 l       .debug_str	00000000 
00037c78 l       .debug_str	00000000 
00037ca1 l       .debug_str	00000000 
00037cac l       .debug_str	00000000 
0001a295 l       .debug_str	00000000 
00037cd1 l       .debug_str	00000000 
00037d60 l       .debug_str	00000000 
00037d97 l       .debug_str	00000000 
00037e1d l       .debug_str	00000000 
00037e6b l       .debug_str	00000000 
00037e74 l       .debug_str	00000000 
00037efa l       .debug_str	00000000 
00037f0d l       .debug_str	00000000 
00037f96 l       .debug_str	00000000 
00037ff2 l       .debug_str	00000000 
00038034 l       .debug_str	00000000 
000380e6 l       .debug_str	00000000 
00038125 l       .debug_str	00000000 
000381ca l       .debug_str	00000000 
0003825e l       .debug_str	00000000 
00038284 l       .debug_str	00000000 
00038300 l       .debug_str	00000000 
0003833b l       .debug_str	00000000 
00038348 l       .debug_str	00000000 
00038381 l       .debug_str	00000000 
00038399 l       .debug_str	00000000 
000383d9 l       .debug_str	00000000 
00033332 l       .debug_str	00000000 
000383e5 l       .debug_str	00000000 
00038442 l       .debug_str	00000000 
0003849f l       .debug_str	00000000 
0003854c l       .debug_str	00000000 
000385a9 l       .debug_str	00000000 
00015de3 l       .debug_str	00000000 
00038616 l       .debug_str	00000000 
0003867a l       .debug_str	00000000 
00038685 l       .debug_str	00000000 
000386b5 l       .debug_str	00000000 
000386e1 l       .debug_str	00000000 
0003874d l       .debug_str	00000000 
0003877d l       .debug_str	00000000 
000387b9 l       .debug_str	00000000 
00038803 l       .debug_str	00000000 
00038813 l       .debug_str	00000000 
00038848 l       .debug_str	00000000 
0003888d l       .debug_str	00000000 
00038898 l       .debug_str	00000000 
000388d8 l       .debug_str	00000000 
000388e6 l       .debug_str	00000000 
00038972 l       .debug_str	00000000 
000389ee l       .debug_str	00000000 
00038a0e l       .debug_str	00000000 
00038a68 l       .debug_str	00000000 
00038a75 l       .debug_str	00000000 
00038aae l       .debug_str	00000000 
00038ab6 l       .debug_str	00000000 
00038b0b l       .debug_str	00000000 
00038b5d l       .debug_str	00000000 
00037a42 l       .debug_str	00000000 
00038ba4 l       .debug_str	00000000 
00038c18 l       .debug_str	00000000 
00038c5c l       .debug_str	00000000 
00038ca8 l       .debug_str	00000000 
00038ce7 l       .debug_str	00000000 
00038d0d l       .debug_str	00000000 
00038d1f l       .debug_str	00000000 
00038d29 l       .debug_str	00000000 
00038d6b l       .debug_str	00000000 
00003a03 l       .debug_str	00000000 
00038df2 l       .debug_str	00000000 
0002fa86 l       .debug_str	00000000 
00038e6e l       .debug_str	00000000 
00038ee5 l       .debug_str	00000000 
00038f33 l       .debug_str	00000000 
00003c53 l       .debug_str	00000000 
00038fc3 l       .debug_str	00000000 
00038fff l       .debug_str	00000000 
0003900c l       .debug_str	00000000 
00039052 l       .debug_str	00000000 
0003905f l       .debug_str	00000000 
00039da5 l       .debug_str	00000000 
00039091 l       .debug_str	00000000 
000390e1 l       .debug_str	00000000 
000390f8 l       .debug_str	00000000 
00039182 l       .debug_str	00000000 
0000aab7 l       .debug_str	00000000 
000391fe l       .debug_str	00000000 
00039212 l       .debug_str	00000000 
0003926f l       .debug_str	00000000 
0003927e l       .debug_str	00000000 
0003928f l       .debug_str	00000000 
000392e9 l       .debug_str	00000000 
000392f8 l       .debug_str	00000000 
00039381 l       .debug_str	00000000 
0003938f l       .debug_str	00000000 
000393e5 l       .debug_str	00000000 
00039439 l       .debug_str	00000000 
000394b2 l       .debug_str	00000000 
000394ca l       .debug_str	00000000 
000394d4 l       .debug_str	00000000 
0003956b l       .debug_str	00000000 
00039585 l       .debug_str	00000000 
0001ceb2 l       .debug_str	00000000 
000395be l       .debug_str	00000000 
00012b82 l       .debug_str	00000000 
00039623 l       .debug_str	00000000 
000396ba l       .debug_str	00000000 
000396be l       .debug_str	00000000 
000399b3 l       .debug_str	00000000 
000396c3 l       .debug_str	00000000 
0005f664 l       .debug_str	00000000 
00013380 l       .debug_str	00000000 
000396f5 l       .debug_str	00000000 
000190b8 l       .debug_str	00000000 
00039733 l       .debug_str	00000000 
0000a888 l       .debug_str	00000000 
00039786 l       .debug_str	00000000 
00039812 l       .debug_str	00000000 
0003988e l       .debug_str	00000000 
000398ad l       .debug_str	00000000 
000398f8 l       .debug_str	00000000 
00039905 l       .debug_str	00000000 
00039979 l       .debug_str	00000000 
0003dcb7 l       .debug_str	00000000 
0004f3f2 l       .debug_str	00000000 
00039998 l       .debug_str	00000000 
000399b8 l       .debug_str	00000000 
000399d4 l       .debug_str	00000000 
000399de l       .debug_str	00000000 
00039a6a l       .debug_str	00000000 
00039ae6 l       .debug_str	00000000 
00039b17 l       .debug_str	00000000 
00039b9a l       .debug_str	00000000 
00039bba l       .debug_str	00000000 
00039c40 l       .debug_str	00000000 
00039cb5 l       .debug_str	00000000 
000333cd l       .debug_str	00000000 
0005cc30 l       .debug_str	00000000 
00039cf6 l       .debug_str	00000000 
00023934 l       .debug_str	00000000 
00039d41 l       .debug_str	00000000 
00039d9d l       .debug_str	00000000 
00039da9 l       .debug_str	00000000 
00039df2 l       .debug_str	00000000 
00039e02 l       .debug_str	00000000 
00039e47 l       .debug_str	00000000 
00039e90 l       .debug_str	00000000 
00039ed5 l       .debug_str	00000000 
00039f31 l       .debug_str	00000000 
00039f7c l       .debug_str	00000000 
00039fc3 l       .debug_str	00000000 
0003a021 l       .debug_str	00000000 
0003a06c l       .debug_str	00000000 
0003a0b3 l       .debug_str	00000000 
0003a111 l       .debug_str	00000000 
0003a15c l       .debug_str	00000000 
0003a1a3 l       .debug_str	00000000 
0003a201 l       .debug_str	00000000 
0003a24a l       .debug_str	00000000 
0003a28f l       .debug_str	00000000 
0003a2eb l       .debug_str	00000000 
0003a334 l       .debug_str	00000000 
0003a379 l       .debug_str	00000000 
0003a3d5 l       .debug_str	00000000 
0003a41f l       .debug_str	00000000 
0003a465 l       .debug_str	00000000 
0003a4c2 l       .debug_str	00000000 
0003a50c l       .debug_str	00000000 
0003a552 l       .debug_str	00000000 
0003a5af l       .debug_str	00000000 
0003a60a l       .debug_str	00000000 
0003a652 l       .debug_str	00000000 
0003a696 l       .debug_str	00000000 
0003a6de l       .debug_str	00000000 
0003a722 l       .debug_str	00000000 
0003a77d l       .debug_str	00000000 
0003a7c6 l       .debug_str	00000000 
0003a80b l       .debug_str	00000000 
0003a867 l       .debug_str	00000000 
0003a8b0 l       .debug_str	00000000 
0003a8f5 l       .debug_str	00000000 
0003a951 l       .debug_str	00000000 
0003a99a l       .debug_str	00000000 
0003a9df l       .debug_str	00000000 
0003aa3b l       .debug_str	00000000 
0003aa85 l       .debug_str	00000000 
0003aacb l       .debug_str	00000000 
0003ab28 l       .debug_str	00000000 
0003ab72 l       .debug_str	00000000 
0003abb8 l       .debug_str	00000000 
0003ac15 l       .debug_str	00000000 
0003ac5f l       .debug_str	00000000 
0003aca5 l       .debug_str	00000000 
0003ad02 l       .debug_str	00000000 
0003ad5d l       .debug_str	00000000 
0003ada5 l       .debug_str	00000000 
0003ade9 l       .debug_str	00000000 
0003ae31 l       .debug_str	00000000 
0003ae75 l       .debug_str	00000000 
0003aed0 l       .debug_str	00000000 
0003af2b l       .debug_str	00000000 
0003af73 l       .debug_str	00000000 
0003afb7 l       .debug_str	00000000 
0003b000 l       .debug_str	00000000 
0003b045 l       .debug_str	00000000 
0003b0a1 l       .debug_str	00000000 
0003b0fd l       .debug_str	00000000 
0003b146 l       .debug_str	00000000 
0003b18b l       .debug_str	00000000 
0003b1e7 l       .debug_str	00000000 
0003b230 l       .debug_str	00000000 
0003b275 l       .debug_str	00000000 
0003b2d1 l       .debug_str	00000000 
0003b31a l       .debug_str	00000000 
0003b35f l       .debug_str	00000000 
00023454 l       .debug_str	00000000 
0003b3bb l       .debug_str	00000000 
0003b3fa l       .debug_str	00000000 
0003b42f l       .debug_str	00000000 
0000582c l       .debug_str	00000000 
000134ce l       .debug_str	00000000 
0001361e l       .debug_str	00000000 
0003b439 l       .debug_str	00000000 
000155e4 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
0003b473 l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
0003b505 l       .debug_str	00000000 
00014b10 l       .debug_str	00000000 
0003b53e l       .debug_str	00000000 
00013ff7 l       .debug_str	00000000 
0003b565 l       .debug_str	00000000 
00013f43 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0003b59f l       .debug_str	00000000 
00013cc2 l       .debug_str	00000000 
0003b5c5 l       .debug_str	00000000 
00013a09 l       .debug_str	00000000 
0003b61f l       .debug_str	00000000 
0001441d l       .debug_str	00000000 
0003b6b9 l       .debug_str	00000000 
0001362d l       .debug_str	00000000 
0003b742 l       .debug_str	00000000 
0003b7e9 l       .debug_str	00000000 
0003b822 l       .debug_str	00000000 
0003b897 l       .debug_str	00000000 
0003b8c0 l       .debug_str	00000000 
0002c728 l       .debug_str	00000000 
0003b8f5 l       .debug_str	00000000 
0003b931 l       .debug_str	00000000 
0003b942 l       .debug_str	00000000 
0003b97b l       .debug_str	00000000 
00012c1d l       .debug_str	00000000 
0003b988 l       .debug_str	00000000 
0003b997 l       .debug_str	00000000 
0003726e l       .debug_str	00000000 
0003b9e0 l       .debug_str	00000000 
0003ba13 l       .debug_str	00000000 
0003ba20 l       .debug_str	00000000 
00060923 l       .debug_str	00000000 
0003ba6b l       .debug_str	00000000 
0003bac3 l       .debug_str	00000000 
0003bad8 l       .debug_str	00000000 
0003bb0e l       .debug_str	00000000 
0003bb19 l       .debug_str	00000000 
0002c836 l       .debug_str	00000000 
0003bb78 l       .debug_str	00000000 
0003bbeb l       .debug_str	00000000 
0003bc52 l       .debug_str	00000000 
0003bc72 l       .debug_str	00000000 
0003bcb1 l       .debug_str	00000000 
0003bcd0 l       .debug_str	00000000 
00000ad8 l       .debug_str	00000000 
0003bd43 l       .debug_str	00000000 
0003bdc0 l       .debug_str	00000000 
0003be25 l       .debug_str	00000000 
0003be85 l       .debug_str	00000000 
0003bef8 l       .debug_str	00000000 
0003bf75 l       .debug_str	00000000 
00015779 l       .debug_str	00000000 
0003bfed l       .debug_str	00000000 
0003c062 l       .debug_str	00000000 
0003c0dc l       .debug_str	00000000 
0001167b l       .debug_str	00000000 
00011686 l       .debug_str	00000000 
0003c13c l       .debug_str	00000000 
0005e911 l       .debug_str	00000000 
0003c17a l       .debug_str	00000000 
0003c1bc l       .debug_str	00000000 
0003c1e7 l       .debug_str	00000000 
0003c228 l       .debug_str	00000000 
0003c232 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
0005f7cb l       .debug_str	00000000 
0005a0b1 l       .debug_str	00000000 
00000e1d l       .debug_str	00000000 
0003c28e l       .debug_str	00000000 
0000146f l       .debug_str	00000000 
0003c2ca l       .debug_str	00000000 
00001412 l       .debug_str	00000000 
0003c311 l       .debug_str	00000000 
0003c36f l       .debug_str	00000000 
00033c9e l       .debug_str	00000000 
0003c3c6 l       .debug_str	00000000 
0003c420 l       .debug_str	00000000 
0003c42a l       .debug_str	00000000 
00012beb l       .debug_str	00000000 
00012bf0 l       .debug_str	00000000 
0003c46d l       .debug_str	00000000 
0003c4a3 l       .debug_str	00000000 
0003c4b3 l       .debug_str	00000000 
0003c4c2 l       .debug_str	00000000 
0003c4cd l       .debug_str	00000000 
00033d84 l       .debug_str	00000000 
0003c507 l       .debug_str	00000000 
0003c550 l       .debug_str	00000000 
00025479 l       .debug_str	00000000 
0003c597 l       .debug_str	00000000 
0003c5d2 l       .debug_str	00000000 
0003c5f7 l       .debug_str	00000000 
0003c663 l       .debug_str	00000000 
0003c676 l       .debug_str	00000000 
0003c6ed l       .debug_str	00000000 
0003c6f8 l       .debug_str	00000000 
0003c735 l       .debug_str	00000000 
0003c740 l       .debug_str	00000000 
0003c7c1 l       .debug_str	00000000 
0003c807 l       .debug_str	00000000 
0003c82e l       .debug_str	00000000 
0003c85d l       .debug_str	00000000 
0003c86e l       .debug_str	00000000 
00013570 l       .debug_str	00000000 
0003c8ca l       .debug_str	00000000 
0003c8fb l       .debug_str	00000000 
0001b2ae l       .debug_str	00000000 
0003c943 l       .debug_str	00000000 
0001f80f l       .debug_str	00000000 
0003c981 l       .debug_str	00000000 
0003c9c5 l       .debug_str	00000000 
0003ca18 l       .debug_str	00000000 
000394b3 l       .debug_str	00000000 
0003ca90 l       .debug_str	00000000 
0003cadf l       .debug_str	00000000 
0003cb75 l       .debug_str	00000000 
0003cbb9 l       .debug_str	00000000 
000408f7 l       .debug_str	00000000 
0003cc31 l       .debug_str	00000000 
0003cc80 l       .debug_str	00000000 
0003cd16 l       .debug_str	00000000 
0003cd30 l       .debug_str	00000000 
0003cd7f l       .debug_str	00000000 
0003cdb8 l       .debug_str	00000000 
0003cdd3 l       .debug_str	00000000 
0001519b l       .debug_str	00000000 
0003ce37 l       .debug_str	00000000 
00014aa7 l       .debug_str	00000000 
0003ceb0 l       .debug_str	00000000 
0002218d l       .debug_str	00000000 
0003cf21 l       .debug_str	00000000 
0003cfb7 l       .debug_str	00000000 
0003d04f l       .debug_str	00000000 
0003d0c1 l       .debug_str	00000000 
0003d0e9 l       .debug_str	00000000 
0001a542 l       .debug_str	00000000 
0003d1a1 l       .debug_str	00000000 
00023d92 l       .debug_str	00000000 
0003d1e6 l       .debug_str	00000000 
0003d29c l       .debug_str	00000000 
0003d2e1 l       .debug_str	00000000 
00002b77 l       .debug_str	00000000 
0003d323 l       .debug_str	00000000 
0003d37e l       .debug_str	00000000 
0003d383 l       .debug_str	00000000 
0003d3dc l       .debug_str	00000000 
0003d410 l       .debug_str	00000000 
0003d424 l       .debug_str	00000000 
0003d45f l       .debug_str	00000000 
0003d4a1 l       .debug_str	00000000 
0003d4b7 l       .debug_str	00000000 
0003d523 l       .debug_str	00000000 
0001167f l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
0003d565 l       .debug_str	00000000 
0003d5a5 l       .debug_str	00000000 
0003d5ff l       .debug_str	00000000 
0003d641 l       .debug_str	00000000 
0003d69c l       .debug_str	00000000 
0003d6de l       .debug_str	00000000 
0003d6e9 l       .debug_str	00000000 
0003d729 l       .debug_str	00000000 
0003d72f l       .debug_str	00000000 
0003d789 l       .debug_str	00000000 
0003d792 l       .debug_str	00000000 
0003d7d4 l       .debug_str	00000000 
0003d82c l       .debug_str	00000000 
0003d86e l       .debug_str	00000000 
0003d8c7 l       .debug_str	00000000 
0003d8d1 l       .debug_str	00000000 
0003d8d9 l       .debug_str	00000000 
0003d8e2 l       .debug_str	00000000 
0003d8d5 l       .debug_str	00000000 
0003d924 l       .debug_str	00000000 
0003d979 l       .debug_str	00000000 
0003d9b6 l       .debug_str	00000000 
0003d9f8 l       .debug_str	00000000 
0003da4f l       .debug_str	00000000 
0003da91 l       .debug_str	00000000 
0003dae9 l       .debug_str	00000000 
0003db21 l       .debug_str	00000000 
0003db2d l       .debug_str	00000000 
0003db6a l       .debug_str	00000000 
0003dbcc l       .debug_str	00000000 
0003dc0d l       .debug_str	00000000 
0003dc16 l       .debug_str	00000000 
0003dc74 l       .debug_str	00000000 
0003dcad l       .debug_str	00000000 
0003dcbc l       .debug_str	00000000 
0003dcfb l       .debug_str	00000000 
0003dd10 l       .debug_str	00000000 
0003dd56 l       .debug_str	00000000 
0003dd63 l       .debug_str	00000000 
0003dd69 l       .debug_str	00000000 
0003dda2 l       .debug_str	00000000 
0003de2e l       .debug_str	00000000 
0003de6a l       .debug_str	00000000 
00059ca0 l       .debug_str	00000000 
0003de7c l       .debug_str	00000000 
0003deb4 l       .debug_str	00000000 
0003dec0 l       .debug_str	00000000 
0003defd l       .debug_str	00000000 
0003df5f l       .debug_str	00000000 
0003dfa0 l       .debug_str	00000000 
0003dffe l       .debug_str	00000000 
0003e038 l       .debug_str	00000000 
0003e092 l       .debug_str	00000000 
0003e0db l       .debug_str	00000000 
0003e0eb l       .debug_str	00000000 
0003e124 l       .debug_str	00000000 
0003e1a6 l       .debug_str	00000000 
0003e1e0 l       .debug_str	00000000 
0003e23a l       .debug_str	00000000 
0003e275 l       .debug_str	00000000 
0003e2d5 l       .debug_str	00000000 
0003e310 l       .debug_str	00000000 
0003e370 l       .debug_str	00000000 
0003e3ae l       .debug_str	00000000 
0003e40c l       .debug_str	00000000 
0003e44a l       .debug_str	00000000 
0003e4a8 l       .debug_str	00000000 
0003e4f3 l       .debug_str	00000000 
0003e4fc l       .debug_str	00000000 
0003e54b l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
0003e557 l       .debug_str	00000000 
0003e588 l       .debug_str	00000000 
0003e5b3 l       .debug_str	00000000 
0003e601 l       .debug_str	00000000 
000135a1 l       .debug_str	00000000 
0003e608 l       .debug_str	00000000 
0003e66d l       .debug_str	00000000 
0003e69e l       .debug_str	00000000 
0003e6a6 l       .debug_str	00000000 
00013c1f l       .debug_str	00000000 
0003e6d7 l       .debug_str	00000000 
0003e730 l       .debug_str	00000000 
0003e7be l       .debug_str	00000000 
0003e80a l       .debug_str	00000000 
0003e82f l       .debug_str	00000000 
0003e84c l       .debug_str	00000000 
0003e876 l       .debug_str	00000000 
0001a4d5 l       .debug_str	00000000 
0001a590 l       .debug_str	00000000 
0001a60c l       .debug_str	00000000 
0003e898 l       .debug_str	00000000 
0003e8e5 l       .debug_str	00000000 
0003e92a l       .debug_str	00000000 
0003e969 l       .debug_str	00000000 
0003e9b5 l       .debug_str	00000000 
0003ea44 l       .debug_str	00000000 
0003ea91 l       .debug_str	00000000 
0003eb17 l       .debug_str	00000000 
0005bba2 l       .debug_str	00000000 
0003eb3c l       .debug_str	00000000 
0003eb66 l       .debug_str	00000000 
0003eb6f l       .debug_str	00000000 
0003eba5 l       .debug_str	00000000 
0003ebae l       .debug_str	00000000 
0003ec3c l       .debug_str	00000000 
0003ec82 l       .debug_str	00000000 
0003eca1 l       .debug_str	00000000 
0003ecb8 l       .debug_str	00000000 
0003ecdc l       .debug_str	00000000 
0003ecf8 l       .debug_str	00000000 
0003ed3f l       .debug_str	00000000 
0003ed84 l       .debug_str	00000000 
0003edc3 l       .debug_str	00000000 
0003ee09 l       .debug_str	00000000 
0003ee98 l       .debug_str	00000000 
0003eedf l       .debug_str	00000000 
0003ef65 l       .debug_str	00000000 
0003ef9a l       .debug_str	00000000 
0003efa4 l       .debug_str	00000000 
0005abbb l       .debug_str	00000000 
0003f00f l       .debug_str	00000000 
0003f044 l       .debug_str	00000000 
0003f04e l       .debug_str	00000000 
0003f081 l       .debug_str	00000000 
0003f089 l       .debug_str	00000000 
0003f0bd l       .debug_str	00000000 
0003f0cf l       .debug_str	00000000 
0003f109 l       .debug_str	00000000 
0003f127 l       .debug_str	00000000 
0003f14d l       .debug_str	00000000 
0003f158 l       .debug_str	00000000 
0003f181 l       .debug_str	00000000 
0003f18f l       .debug_str	00000000 
0003f1c9 l       .debug_str	00000000 
0003f1ff l       .debug_str	00000000 
0003f225 l       .debug_str	00000000 
0003f248 l       .debug_str	00000000 
0003f271 l       .debug_str	00000000 
0003f297 l       .debug_str	00000000 
0003f2d5 l       .debug_str	00000000 
0003f2ef l       .debug_str	00000000 
0003f32d l       .debug_str	00000000 
0003f35f l       .debug_str	00000000 
0003f36b l       .debug_str	00000000 
00061337 l       .debug_str	00000000 
0003f39f l       .debug_str	00000000 
0003f3ac l       .debug_str	00000000 
00023239 l       .debug_str	00000000 
0003f3de l       .debug_str	00000000 
0003f448 l       .debug_str	00000000 
0003f4b8 l       .debug_str	00000000 
0003f51f l       .debug_str	00000000 
0003f53c l       .debug_str	00000000 
0003f57b l       .debug_str	00000000 
0003f597 l       .debug_str	00000000 
000231fb l       .debug_str	00000000 
0003f5c5 l       .debug_str	00000000 
000232d7 l       .debug_str	00000000 
0003f5fa l       .debug_str	00000000 
0003f636 l       .debug_str	00000000 
0003f65c l       .debug_str	00000000 
0003f69b l       .debug_str	00000000 
0003f6ab l       .debug_str	00000000 
0003f70f l       .debug_str	00000000 
0003f746 l       .debug_str	00000000 
0003f75c l       .debug_str	00000000 
0003f7ab l       .debug_str	00000000 
0003f7b7 l       .debug_str	00000000 
0003f889 l       .debug_str	00000000 
0003f7fe l       .debug_str	00000000 
0003f884 l       .debug_str	00000000 
0003f8a8 l       .debug_str	00000000 
0003f8e3 l       .debug_str	00000000 
0003f8f3 l       .debug_str	00000000 
0006125f l       .debug_str	00000000 
0003f934 l       .debug_str	00000000 
0003f96e l       .debug_str	00000000 
0003f97d l       .debug_str	00000000 
0003f9b6 l       .debug_str	00000000 
0003f9c4 l       .debug_str	00000000 
0003f9fd l       .debug_str	00000000 
0003fa0b l       .debug_str	00000000 
0003fa5b l       .debug_str	00000000 
0003fa68 l       .debug_str	00000000 
0003fade l       .debug_str	00000000 
0003fae9 l       .debug_str	00000000 
0003fafb l       .debug_str	00000000 
0003fb47 l       .debug_str	00000000 
0003fb64 l       .debug_str	00000000 
0003fbf8 l       .debug_str	00000000 
0003fc8e l       .debug_str	00000000 
0003fd00 l       .debug_str	00000000 
0003fd26 l       .debug_str	00000000 
0003fdc5 l       .debug_str	00000000 
0003fe36 l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
0003fe7b l       .debug_str	00000000 
0003fede l       .debug_str	00000000 
0003ff01 l       .debug_str	00000000 
0003ff55 l       .debug_str	00000000 
0003ff6c l       .debug_str	00000000 
00024d92 l       .debug_str	00000000 
0003ffb9 l       .debug_str	00000000 
0003ffc6 l       .debug_str	00000000 
00040001 l       .debug_str	00000000 
00040029 l       .debug_str	00000000 
0004008b l       .debug_str	00000000 
0003bb13 l       .debug_str	00000000 
000400f4 l       .debug_str	00000000 
00042922 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00033175 l       .debug_str	00000000 
00033186 l       .debug_str	00000000 
00040141 l       .debug_str	00000000 
0000b1cc l       .debug_str	00000000 
0004018c l       .debug_str	00000000 
0004020f l       .debug_str	00000000 
0004023f l       .debug_str	00000000 
000402c7 l       .debug_str	00000000 
0004033c l       .debug_str	00000000 
0004038f l       .debug_str	00000000 
0004041b l       .debug_str	00000000 
00040453 l       .debug_str	00000000 
000404a8 l       .debug_str	00000000 
000404d9 l       .debug_str	00000000 
0004052b l       .debug_str	00000000 
00040559 l       .debug_str	00000000 
000405ad l       .debug_str	00000000 
000405d3 l       .debug_str	00000000 
0001f75b l       .debug_str	00000000 
0004060a l       .debug_str	00000000 
00040655 l       .debug_str	00000000 
00040671 l       .debug_str	00000000 
000406c7 l       .debug_str	00000000 
0001f8a2 l       .debug_str	00000000 
00040740 l       .debug_str	00000000 
00040790 l       .debug_str	00000000 
00040827 l       .debug_str	00000000 
0004087d l       .debug_str	00000000 
000408f6 l       .debug_str	00000000 
0004090e l       .debug_str	00000000 
000409a5 l       .debug_str	00000000 
000409de l       .debug_str	00000000 
00040c0e l       .debug_str	00000000 
00040a27 l       .debug_str	00000000 
0003f8ef l       .debug_str	00000000 
00040a64 l       .debug_str	00000000 
00040aa8 l       .debug_str	00000000 
00040af3 l       .debug_str	00000000 
00040b33 l       .debug_str	00000000 
00040b5d l       .debug_str	00000000 
00040ba6 l       .debug_str	00000000 
00040bb5 l       .debug_str	00000000 
00040c06 l       .debug_str	00000000 
00040c1d l       .debug_str	00000000 
0004aebd l       .debug_str	00000000 
0005c45c l       .debug_str	00000000 
00040c84 l       .debug_str	00000000 
00040ce5 l       .debug_str	00000000 
00040d04 l       .debug_str	00000000 
00040d0d l       .debug_str	00000000 
00040d19 l       .debug_str	00000000 
000168c3 l       .debug_str	00000000 
00040d1f l       .debug_str	00000000 
00040d29 l       .debug_str	00000000 
00040d5b l       .debug_str	00000000 
00040d6b l       .debug_str	00000000 
00040df3 l       .debug_str	00000000 
00040dfc l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00040e69 l       .debug_str	00000000 
00040ea8 l       .debug_str	00000000 
00015ceb l       .debug_str	00000000 
00015cf7 l       .debug_str	00000000 
00015d01 l       .debug_str	00000000 
00040eb7 l       .debug_str	00000000 
00040f27 l       .debug_str	00000000 
00040f4c l       .debug_str	00000000 
00040fbb l       .debug_str	00000000 
00040fe1 l       .debug_str	00000000 
00041050 l       .debug_str	00000000 
0004107a l       .debug_str	00000000 
000410b1 l       .debug_str	00000000 
000410bc l       .debug_str	00000000 
000410f8 l       .debug_str	00000000 
00041117 l       .debug_str	00000000 
00041151 l       .debug_str	00000000 
0004118c l       .debug_str	00000000 
000411c8 l       .debug_str	00000000 
0000e68b l       .debug_str	00000000 
000411e2 l       .debug_str	00000000 
0004121e l       .debug_str	00000000 
0004122b l       .debug_str	00000000 
00059f17 l       .debug_str	00000000 
00041269 l       .debug_str	00000000 
000412af l       .debug_str	00000000 
00041337 l       .debug_str	00000000 
00041350 l       .debug_str	00000000 
000413aa l       .debug_str	00000000 
000413f0 l       .debug_str	00000000 
00041408 l       .debug_str	00000000 
00041488 l       .debug_str	00000000 
0004195c l       .debug_str	00000000 
00041498 l       .debug_str	00000000 
000414d7 l       .debug_str	00000000 
00041517 l       .debug_str	00000000 
000415a1 l       .debug_str	00000000 
000415b8 l       .debug_str	00000000 
00041609 l       .debug_str	00000000 
00041617 l       .debug_str	00000000 
0004161c l       .debug_str	00000000 
00041677 l       .debug_str	00000000 
00042031 l       .debug_str	00000000 
000416ce l       .debug_str	00000000 
00041701 l       .debug_str	00000000 
00041748 l       .debug_str	00000000 
00041782 l       .debug_str	00000000 
000417b1 l       .debug_str	00000000 
0004182f l       .debug_str	00000000 
000418b3 l       .debug_str	00000000 
00041940 l       .debug_str	00000000 
00041955 l       .debug_str	00000000 
00041965 l       .debug_str	00000000 
000419b1 l       .debug_str	00000000 
000419f6 l       .debug_str	00000000 
00041a8d l       .debug_str	00000000 
00041aa9 l       .debug_str	00000000 
00041af0 l       .debug_str	00000000 
00041b1e l       .debug_str	00000000 
00041b57 l       .debug_str	00000000 
00041b79 l       .debug_str	00000000 
00019816 l       .debug_str	00000000 
00041bf7 l       .debug_str	00000000 
00041c77 l       .debug_str	00000000 
00041cb6 l       .debug_str	00000000 
00041d40 l       .debug_str	00000000 
00041d8c l       .debug_str	00000000 
00041daa l       .debug_str	00000000 
00041db5 l       .debug_str	00000000 
00041e17 l       .debug_str	00000000 
00041e6e l       .debug_str	00000000 
00041efb l       .debug_str	00000000 
00041f47 l       .debug_str	00000000 
00041fde l       .debug_str	00000000 
00042028 l       .debug_str	00000000 
00042044 l       .debug_str	00000000 
0004209e l       .debug_str	00000000 
000420a7 l       .debug_str	00000000 
00042106 l       .debug_str	00000000 
0004215d l       .debug_str	00000000 
000421b6 l       .debug_str	00000000 
000421cb l       .debug_str	00000000 
00042218 l       .debug_str	00000000 
00042263 l       .debug_str	00000000 
00042276 l       .debug_str	00000000 
0001e309 l       .debug_str	00000000 
000197c8 l       .debug_str	00000000 
000422c1 l       .debug_str	00000000 
000422d6 l       .debug_str	00000000 
000422e2 l       .debug_str	00000000 
00042327 l       .debug_str	00000000 
00042380 l       .debug_str	00000000 
00042395 l       .debug_str	00000000 
000423e2 l       .debug_str	00000000 
0004242d l       .debug_str	00000000 
00042440 l       .debug_str	00000000 
0004248b l       .debug_str	00000000 
0004249e l       .debug_str	00000000 
00042502 l       .debug_str	00000000 
0004253b l       .debug_str	00000000 
00042567 l       .debug_str	00000000 
0005ff8c l       .debug_str	00000000 
0005b351 l       .debug_str	00000000 
000425e6 l       .debug_str	00000000 
000425ec l       .debug_str	00000000 
000425f5 l       .debug_str	00000000 
0004262d l       .debug_str	00000000 
0004264a l       .debug_str	00000000 
00042686 l       .debug_str	00000000 
000426a3 l       .debug_str	00000000 
000426ff l       .debug_str	00000000 
00042737 l       .debug_str	00000000 
00042793 l       .debug_str	00000000 
00025419 l       .debug_str	00000000 
000427cb l       .debug_str	00000000 
00042809 l       .debug_str	00000000 
00042825 l       .debug_str	00000000 
0004287b l       .debug_str	00000000 
000428e2 l       .debug_str	00000000 
0004291a l       .debug_str	00000000 
00042926 l       .debug_str	00000000 
0004298d l       .debug_str	00000000 
000429cc l       .debug_str	00000000 
000429dd l       .debug_str	00000000 
00042a16 l       .debug_str	00000000 
000509be l       .debug_str	00000000 
00042a31 l       .debug_str	00000000 
00042a6d l       .debug_str	00000000 
00042a66 l       .debug_str	00000000 
00042a76 l       .debug_str	00000000 
00042a88 l       .debug_str	00000000 
00042ad3 l       .debug_str	00000000 
00042aeb l       .debug_str	00000000 
00042af5 l       .debug_str	00000000 
00042b0c l       .debug_str	00000000 
00042b1b l       .debug_str	00000000 
00042b5d l       .debug_str	00000000 
00042b76 l       .debug_str	00000000 
00042bea l       .debug_str	00000000 
00042bf9 l       .debug_str	00000000 
00042c32 l       .debug_str	00000000 
00042c48 l       .debug_str	00000000 
00042c88 l       .debug_str	00000000 
00042c93 l       .debug_str	00000000 
00042d12 l       .debug_str	00000000 
0005aaca l       .debug_str	00000000 
00042d31 l       .debug_str	00000000 
00042d46 l       .debug_str	00000000 
00042d50 l       .debug_str	00000000 
00019e43 l       .debug_str	00000000 
00042d55 l       .debug_str	00000000 
00042d86 l       .debug_str	00000000 
00042d99 l       .debug_str	00000000 
00042da3 l       .debug_str	00000000 
00042dc0 l       .debug_str	00000000 
00042dfb l       .debug_str	00000000 
00042e30 l       .debug_str	00000000 
00042e61 l       .debug_str	00000000 
00042e75 l       .debug_str	00000000 
00042e80 l       .debug_str	00000000 
00042e9e l       .debug_str	00000000 
00042ed9 l       .debug_str	00000000 
00042f0f l       .debug_str	00000000 
00042f40 l       .debug_str	00000000 
00042f54 l       .debug_str	00000000 
00042f5f l       .debug_str	00000000 
00042f7d l       .debug_str	00000000 
00042fb8 l       .debug_str	00000000 
00042fee l       .debug_str	00000000 
0004301f l       .debug_str	00000000 
00043033 l       .debug_str	00000000 
0004303e l       .debug_str	00000000 
0004305c l       .debug_str	00000000 
00043097 l       .debug_str	00000000 
000430cd l       .debug_str	00000000 
000430fe l       .debug_str	00000000 
0004794b l       .debug_str	00000000 
00043113 l       .debug_str	00000000 
0004311f l       .debug_str	00000000 
0004313e l       .debug_str	00000000 
00043179 l       .debug_str	00000000 
000431b0 l       .debug_str	00000000 
000431e1 l       .debug_str	00000000 
000431f4 l       .debug_str	00000000 
000431fe l       .debug_str	00000000 
0004321b l       .debug_str	00000000 
00043256 l       .debug_str	00000000 
0004328b l       .debug_str	00000000 
000432bc l       .debug_str	00000000 
000432d0 l       .debug_str	00000000 
000432db l       .debug_str	00000000 
000432f9 l       .debug_str	00000000 
00043334 l       .debug_str	00000000 
0004336a l       .debug_str	00000000 
0004339b l       .debug_str	00000000 
000433af l       .debug_str	00000000 
0004341e l       .debug_str	00000000 
00043459 l       .debug_str	00000000 
000434a2 l       .debug_str	00000000 
000434e7 l       .debug_str	00000000 
00043543 l       .debug_str	00000000 
0004358c l       .debug_str	00000000 
000435d1 l       .debug_str	00000000 
0004362d l       .debug_str	00000000 
00043676 l       .debug_str	00000000 
000436bb l       .debug_str	00000000 
00043717 l       .debug_str	00000000 
00043722 l       .debug_str	00000000 
00043740 l       .debug_str	00000000 
0004377b l       .debug_str	00000000 
000437b1 l       .debug_str	00000000 
000437e2 l       .debug_str	00000000 
000437f6 l       .debug_str	00000000 
00043801 l       .debug_str	00000000 
0004381f l       .debug_str	00000000 
0004385a l       .debug_str	00000000 
00043890 l       .debug_str	00000000 
000438ff l       .debug_str	00000000 
0004393a l       .debug_str	00000000 
0004396b l       .debug_str	00000000 
00043980 l       .debug_str	00000000 
00043985 l       .debug_str	00000000 
00043991 l       .debug_str	00000000 
000439b0 l       .debug_str	00000000 
000439eb l       .debug_str	00000000 
00043a22 l       .debug_str	00000000 
00043a91 l       .debug_str	00000000 
00043acd l       .debug_str	00000000 
0000a989 l       .debug_str	00000000 
00043b16 l       .debug_str	00000000 
00043b21 l       .debug_str	00000000 
00043b68 l       .debug_str	00000000 
00043b72 l       .debug_str	00000000 
00043bf4 l       .debug_str	00000000 
00043c11 l       .debug_str	00000000 
00016cb0 l       .debug_str	00000000 
00043c6c l       .debug_str	00000000 
00043cc6 l       .debug_str	00000000 
00043cd3 l       .debug_str	00000000 
00043d45 l       .debug_str	00000000 
00043da9 l       .debug_str	00000000 
00043db4 l       .debug_str	00000000 
00043e2d l       .debug_str	00000000 
00043e39 l       .debug_str	00000000 
00043eb5 l       .debug_str	00000000 
00043ebb l       .debug_str	00000000 
00043ec2 l       .debug_str	00000000 
00043efe l       .debug_str	00000000 
000141a1 l       .debug_str	00000000 
00043f47 l       .debug_str	00000000 
00043f8b l       .debug_str	00000000 
00043fd6 l       .debug_str	00000000 
00044015 l       .debug_str	00000000 
0004403a l       .debug_str	00000000 
00044090 l       .debug_str	00000000 
000440fe l       .debug_str	00000000 
0004417e l       .debug_str	00000000 
000441eb l       .debug_str	00000000 
00044276 l       .debug_str	00000000 
000442ea l       .debug_str	00000000 
0004432a l       .debug_str	00000000 
000443ab l       .debug_str	00000000 
000443ec l       .debug_str	00000000 
00044450 l       .debug_str	00000000 
000444ff l       .debug_str	00000000 
00044549 l       .debug_str	00000000 
00044596 l       .debug_str	00000000 
000445dc l       .debug_str	00000000 
000445e6 l       .debug_str	00000000 
0004461f l       .debug_str	00000000 
0004464e l       .debug_str	00000000 
000446af l       .debug_str	00000000 
000446de l       .debug_str	00000000 
0004471b l       .debug_str	00000000 
000447aa l       .debug_str	00000000 
000447df l       .debug_str	00000000 
00044865 l       .debug_str	00000000 
000448eb l       .debug_str	00000000 
0004493f l       .debug_str	00000000 
000449c8 l       .debug_str	00000000 
000196df l       .debug_str	00000000 
00044a16 l       .debug_str	00000000 
00044aa4 l       .debug_str	00000000 
00044af8 l       .debug_str	00000000 
00044b37 l       .debug_str	00000000 
00044b82 l       .debug_str	00000000 
00044c04 l       .debug_str	00000000 
00044c20 l       .debug_str	00000000 
00044c79 l       .debug_str	00000000 
00044cd2 l       .debug_str	00000000 
00044d0f l       .debug_str	00000000 
00044d50 l       .debug_str	00000000 
00044db1 l       .debug_str	00000000 
00044e22 l       .debug_str	00000000 
00044e52 l       .debug_str	00000000 
00044e98 l       .debug_str	00000000 
00044f0a l       .debug_str	00000000 
00044f9e l       .debug_str	00000000 
00044fc2 l       .debug_str	00000000 
0004503e l       .debug_str	00000000 
00045078 l       .debug_str	00000000 
000450ba l       .debug_str	00000000 
0004516a l       .debug_str	00000000 
000451a9 l       .debug_str	00000000 
0004524c l       .debug_str	00000000 
000452a8 l       .debug_str	00000000 
00045305 l       .debug_str	00000000 
000453b0 l       .debug_str	00000000 
000453e9 l       .debug_str	00000000 
00045465 l       .debug_str	00000000 
0004549d l       .debug_str	00000000 
000454a9 l       .debug_str	00000000 
000454e6 l       .debug_str	00000000 
0004553e l       .debug_str	00000000 
0004555e l       .debug_str	00000000 
000455b7 l       .debug_str	00000000 
00045610 l       .debug_str	00000000 
00045669 l       .debug_str	00000000 
000456c3 l       .debug_str	00000000 
000456f9 l       .debug_str	00000000 
00045709 l       .debug_str	00000000 
00045718 l       .debug_str	00000000 
00045721 l       .debug_str	00000000 
00045758 l       .debug_str	00000000 
00045794 l       .debug_str	00000000 
000457a4 l       .debug_str	00000000 
00045800 l       .debug_str	00000000 
00045862 l       .debug_str	00000000 
00038a71 l       .debug_str	00000000 
000458ac l       .debug_str	00000000 
000458e7 l       .debug_str	00000000 
0004590c l       .debug_str	00000000 
0004596b l       .debug_str	00000000 
000459b5 l       .debug_str	00000000 
000459f0 l       .debug_str	00000000 
00045a15 l       .debug_str	00000000 
00045a74 l       .debug_str	00000000 
00045add l       .debug_str	00000000 
00045ae6 l       .debug_str	00000000 
00045b1d l       .debug_str	00000000 
00045b79 l       .debug_str	00000000 
00045bdb l       .debug_str	00000000 
00045c3a l       .debug_str	00000000 
00045c99 l       .debug_str	00000000 
00045ccf l       .debug_str	00000000 
00045ce0 l       .debug_str	00000000 
00045cf0 l       .debug_str	00000000 
00045cfa l       .debug_str	00000000 
00045d32 l       .debug_str	00000000 
00045d8f l       .debug_str	00000000 
00045df2 l       .debug_str	00000000 
00045e3d l       .debug_str	00000000 
00045e78 l       .debug_str	00000000 
00045e9e l       .debug_str	00000000 
00045efe l       .debug_str	00000000 
00045f49 l       .debug_str	00000000 
00045f84 l       .debug_str	00000000 
00045faa l       .debug_str	00000000 
0004600a l       .debug_str	00000000 
00046040 l       .debug_str	00000000 
00046051 l       .debug_str	00000000 
00046061 l       .debug_str	00000000 
0004606b l       .debug_str	00000000 
000460a3 l       .debug_str	00000000 
00046100 l       .debug_str	00000000 
00046163 l       .debug_str	00000000 
000461c3 l       .debug_str	00000000 
00046223 l       .debug_str	00000000 
00046259 l       .debug_str	00000000 
0004626a l       .debug_str	00000000 
0004627a l       .debug_str	00000000 
00046284 l       .debug_str	00000000 
000462bc l       .debug_str	00000000 
00046319 l       .debug_str	00000000 
0004637c l       .debug_str	00000000 
000463c7 l       .debug_str	00000000 
00046402 l       .debug_str	00000000 
00046428 l       .debug_str	00000000 
00046488 l       .debug_str	00000000 
000464d3 l       .debug_str	00000000 
0004650e l       .debug_str	00000000 
00046534 l       .debug_str	00000000 
00046594 l       .debug_str	00000000 
000465ca l       .debug_str	00000000 
000465db l       .debug_str	00000000 
000465eb l       .debug_str	00000000 
000465f5 l       .debug_str	00000000 
0004662d l       .debug_str	00000000 
0004668a l       .debug_str	00000000 
000466ed l       .debug_str	00000000 
0004674d l       .debug_str	00000000 
000467ad l       .debug_str	00000000 
000467e3 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
000467f6 l       .debug_str	00000000 
00046808 l       .debug_str	00000000 
00046814 l       .debug_str	00000000 
0004684f l       .debug_str	00000000 
000468ae l       .debug_str	00000000 
00046913 l       .debug_str	00000000 
00046975 l       .debug_str	00000000 
000469b0 l       .debug_str	00000000 
000469d8 l       .debug_str	00000000 
00046a3a l       .debug_str	00000000 
0001cac2 l       .debug_str	00000000 
0001f4de l       .debug_str	00000000 
00012c72 l       .debug_str	00000000 
00046a70 l       .debug_str	00000000 
00046aab l       .debug_str	00000000 
00046aeb l       .debug_str	00000000 
00046b08 l       .debug_str	00000000 
00046b4c l       .debug_str	00000000 
00046b6d l       .debug_str	00000000 
00046bad l       .debug_str	00000000 
00046bca l       .debug_str	00000000 
00046c0e l       .debug_str	00000000 
00046c2f l       .debug_str	00000000 
00046c91 l       .debug_str	00000000 
00046cf8 l       .debug_str	00000000 
00046d33 l       .debug_str	00000000 
00046d56 l       .debug_str	00000000 
00046dbc l       .debug_str	00000000 
00046df7 l       .debug_str	00000000 
00046e19 l       .debug_str	00000000 
00046e54 l       .debug_str	00000000 
00046e78 l       .debug_str	00000000 
00046eb3 l       .debug_str	00000000 
00046ed6 l       .debug_str	00000000 
00046f11 l       .debug_str	00000000 
00046f35 l       .debug_str	00000000 
00046f70 l       .debug_str	00000000 
00046f93 l       .debug_str	00000000 
00046fce l       .debug_str	00000000 
00046ff2 l       .debug_str	00000000 
0004703d l       .debug_str	00000000 
0004709f l       .debug_str	00000000 
000470da l       .debug_str	00000000 
000470fd l       .debug_str	00000000 
00047148 l       .debug_str	00000000 
00047183 l       .debug_str	00000000 
000471a9 l       .debug_str	00000000 
000471e4 l       .debug_str	00000000 
0004720a l       .debug_str	00000000 
0004725b l       .debug_str	00000000 
000472a9 l       .debug_str	00000000 
000472f4 l       .debug_str	00000000 
00047327 l       .debug_str	00000000 
00047362 l       .debug_str	00000000 
00047387 l       .debug_str	00000000 
00047413 l       .debug_str	00000000 
00047447 l       .debug_str	00000000 
000474c3 l       .debug_str	00000000 
00047508 l       .debug_str	00000000 
00047554 l       .debug_str	00000000 
000475b7 l       .debug_str	00000000 
000475f2 l       .debug_str	00000000 
00047616 l       .debug_str	00000000 
00047651 l       .debug_str	00000000 
00047678 l       .debug_str	00000000 
000476c4 l       .debug_str	00000000 
000476ff l       .debug_str	00000000 
00047726 l       .debug_str	00000000 
00047771 l       .debug_str	00000000 
000477bd l       .debug_str	00000000 
00047809 l       .debug_str	00000000 
0004783a l       .debug_str	00000000 
00047842 l       .debug_str	00000000 
00010725 l       .debug_str	00000000 
0004788e l       .debug_str	00000000 
000478c3 l       .debug_str	00000000 
000478f1 l       .debug_str	00000000 
000478fa l       .debug_str	00000000 
00047948 l       .debug_str	00000000 
00047950 l       .debug_str	00000000 
000479b5 l       .debug_str	00000000 
00047a08 l       .debug_str	00000000 
00047a68 l       .debug_str	00000000 
00047a87 l       .debug_str	00000000 
00047aea l       .debug_str	00000000 
00047b0c l       .debug_str	00000000 
00047b57 l       .debug_str	00000000 
00047bbc l       .debug_str	00000000 
00047bde l       .debug_str	00000000 
00047c47 l       .debug_str	00000000 
00047c84 l       .debug_str	00000000 
00047ced l       .debug_str	00000000 
00047d7d l       .debug_str	00000000 
0000b853 l       .debug_str	00000000 
00047ddd l       .debug_str	00000000 
00047e40 l       .debug_str	00000000 
00047ea9 l       .debug_str	00000000 
00047edc l       .debug_str	00000000 
00047f24 l       .debug_str	00000000 
00047f9e l       .debug_str	00000000 
00047fef l       .debug_str	00000000 
00048046 l       .debug_str	00000000 
0001ac64 l       .debug_str	00000000 
0004808e l       .debug_str	00000000 
000480ec l       .debug_str	00000000 
00048109 l       .debug_str	00000000 
00048175 l       .debug_str	00000000 
000481ba l       .debug_str	00000000 
00048208 l       .debug_str	00000000 
00048250 l       .debug_str	00000000 
0004825a l       .debug_str	00000000 
000482c8 l       .debug_str	00000000 
00048304 l       .debug_str	00000000 
00048327 l       .debug_str	00000000 
00048397 l       .debug_str	00000000 
000483df l       .debug_str	00000000 
000483e8 l       .debug_str	00000000 
00048445 l       .debug_str	00000000 
000484a8 l       .debug_str	00000000 
00048508 l       .debug_str	00000000 
00048568 l       .debug_str	00000000 
000485c4 l       .debug_str	00000000 
00048623 l       .debug_str	00000000 
00048683 l       .debug_str	00000000 
0004869e l       .debug_str	00000000 
0001abc2 l       .debug_str	00000000 
000486f2 l       .debug_str	00000000 
00048770 l       .debug_str	00000000 
0004879a l       .debug_str	00000000 
000487fc l       .debug_str	00000000 
0004885d l       .debug_str	00000000 
000488b7 l       .debug_str	00000000 
0004891c l       .debug_str	00000000 
0004896e l       .debug_str	00000000 
000489b6 l       .debug_str	00000000 
000489d1 l       .debug_str	00000000 
00048a4b l       .debug_str	00000000 
00048a98 l       .debug_str	00000000 
00048b12 l       .debug_str	00000000 
00048b5f l       .debug_str	00000000 
00048bb3 l       .debug_str	00000000 
00048c05 l       .debug_str	00000000 
00048c6d l       .debug_str	00000000 
00048ccd l       .debug_str	00000000 
00048d27 l       .debug_str	00000000 
00048d86 l       .debug_str	00000000 
00048de0 l       .debug_str	00000000 
00048e3d l       .debug_str	00000000 
00022b95 l       .debug_str	00000000 
00048e7b l       .debug_str	00000000 
00023b78 l       .debug_str	00000000 
00048eb6 l       .debug_str	00000000 
00048f28 l       .debug_str	00000000 
00048ffb l       .debug_str	00000000 
0001ad82 l       .debug_str	00000000 
00049043 l       .debug_str	00000000 
00049091 l       .debug_str	00000000 
0004909b l       .debug_str	00000000 
000490e3 l       .debug_str	00000000 
000490ef l       .debug_str	00000000 
00049163 l       .debug_str	00000000 
0004916e l       .debug_str	00000000 
000491aa l       .debug_str	00000000 
000491d1 l       .debug_str	00000000 
00049222 l       .debug_str	00000000 
0004922f l       .debug_str	00000000 
0004923d l       .debug_str	00000000 
00049250 l       .debug_str	00000000 
0004925b l       .debug_str	00000000 
0004929d l       .debug_str	00000000 
000492b2 l       .debug_str	00000000 
0004931c l       .debug_str	00000000 
00049379 l       .debug_str	00000000 
000493d9 l       .debug_str	00000000 
00049439 l       .debug_str	00000000 
000494ab l       .debug_str	00000000 
000494f8 l       .debug_str	00000000 
00049557 l       .debug_str	00000000 
000495b1 l       .debug_str	00000000 
00049624 l       .debug_str	00000000 
00049631 l       .debug_str	00000000 
00049691 l       .debug_str	00000000 
000496b0 l       .debug_str	00000000 
00049718 l       .debug_str	00000000 
00049733 l       .debug_str	00000000 
0004978b l       .debug_str	00000000 
000497d5 l       .debug_str	00000000 
00049839 l       .debug_str	00000000 
00049858 l       .debug_str	00000000 
000498ba l       .debug_str	00000000 
00049920 l       .debug_str	00000000 
000499a0 l       .debug_str	00000000 
000499ef l       .debug_str	00000000 
00049a65 l       .debug_str	00000000 
00049adb l       .debug_str	00000000 
00049bb0 l       .debug_str	00000000 
00049c0d l       .debug_str	00000000 
00049c6b l       .debug_str	00000000 
00049ceb l       .debug_str	00000000 
00049d5a l       .debug_str	00000000 
00049dd8 l       .debug_str	00000000 
00049e2b l       .debug_str	00000000 
00049e90 l       .debug_str	00000000 
00049ef0 l       .debug_str	00000000 
00049f5e l       .debug_str	00000000 
00049ff6 l       .debug_str	00000000 
0004a085 l       .debug_str	00000000 
0004a113 l       .debug_str	00000000 
0004a1a1 l       .debug_str	00000000 
0004a2b1 l       .debug_str	00000000 
0004a325 l       .debug_str	00000000 
0004a367 l       .debug_str	00000000 
0004a3b0 l       .debug_str	00000000 
0004a40a l       .debug_str	00000000 
0004a483 l       .debug_str	00000000 
0004a490 l       .debug_str	00000000 
0004a495 l       .debug_str	00000000 
0004a501 l       .debug_str	00000000 
0004a548 l       .debug_str	00000000 
0004a5d2 l       .debug_str	00000000 
0004a5f1 l       .debug_str	00000000 
0004a67b l       .debug_str	00000000 
0004a69f l       .debug_str	00000000 
0004a6e3 l       .debug_str	00000000 
0004a747 l       .debug_str	00000000 
0004a78b l       .debug_str	00000000 
0004a7fd l       .debug_str	00000000 
0004a8bb l       .debug_str	00000000 
0004a91d l       .debug_str	00000000 
0004a9b5 l       .debug_str	00000000 
0004aa64 l       .debug_str	00000000 
0004aafa l       .debug_str	00000000 
0004ab8d l       .debug_str	00000000 
0004abd1 l       .debug_str	00000000 
0004ac24 l       .debug_str	00000000 
0004aca8 l       .debug_str	00000000 
0004ad36 l       .debug_str	00000000 
0004ad8a l       .debug_str	00000000 
0004ad9b l       .debug_str	00000000 
0004ae20 l       .debug_str	00000000 
0004aeac l       .debug_str	00000000 
0004aeb5 l       .debug_str	00000000 
0004aec2 l       .debug_str	00000000 
0004af19 l       .debug_str	00000000 
0004af9e l       .debug_str	00000000 
0004aff0 l       .debug_str	00000000 
0004afff l       .debug_str	00000000 
0004b046 l       .debug_str	00000000 
0004b0aa l       .debug_str	00000000 
0004b0cb l       .debug_str	00000000 
0004b14b l       .debug_str	00000000 
0004b1b6 l       .debug_str	00000000 
0004b234 l       .debug_str	00000000 
0004b283 l       .debug_str	00000000 
0004b2e2 l       .debug_str	00000000 
0004b37a l       .debug_str	00000000 
0004b420 l       .debug_str	00000000 
0004b4b6 l       .debug_str	00000000 
0004b540 l       .debug_str	00000000 
0004b5b6 l       .debug_str	00000000 
0004b5ff l       .debug_str	00000000 
0004b65b l       .debug_str	00000000 
0004b6d6 l       .debug_str	00000000 
0004b742 l       .debug_str	00000000 
0004b7cc l       .debug_str	00000000 
0004b810 l       .debug_str	00000000 
0004b871 l       .debug_str	00000000 
0004b8b5 l       .debug_str	00000000 
0004b939 l       .debug_str	00000000 
0004b9c3 l       .debug_str	00000000 
0004ba15 l       .debug_str	00000000 
0004ba93 l       .debug_str	00000000 
0004bb18 l       .debug_str	00000000 
0004bb6f l       .debug_str	00000000 
0004bbf0 l       .debug_str	00000000 
0004bcae l       .debug_str	00000000 
0004bd0d l       .debug_str	00000000 
0004bd70 l       .debug_str	00000000 
0004bd95 l       .debug_str	00000000 
0004bdf9 l       .debug_str	00000000 
0004be1a l       .debug_str	00000000 
0004be9a l       .debug_str	00000000 
0004bf05 l       .debug_str	00000000 
0004bf83 l       .debug_str	00000000 
0004bfd2 l       .debug_str	00000000 
0004c031 l       .debug_str	00000000 
0004c0c9 l       .debug_str	00000000 
0004c16f l       .debug_str	00000000 
0004c205 l       .debug_str	00000000 
0004c28f l       .debug_str	00000000 
0004c305 l       .debug_str	00000000 
0004c34e l       .debug_str	00000000 
0004c3aa l       .debug_str	00000000 
0004c425 l       .debug_str	00000000 
0004c491 l       .debug_str	00000000 
0004c51b l       .debug_str	00000000 
0004c55f l       .debug_str	00000000 
0004c5c0 l       .debug_str	00000000 
0004c604 l       .debug_str	00000000 
0004c688 l       .debug_str	00000000 
0004c712 l       .debug_str	00000000 
0004c790 l       .debug_str	00000000 
0004c815 l       .debug_str	00000000 
0004c86c l       .debug_str	00000000 
0004c8ed l       .debug_str	00000000 
0004c9ab l       .debug_str	00000000 
0004ca0a l       .debug_str	00000000 
0004ca3d l       .debug_str	00000000 
0004ca70 l       .debug_str	00000000 
0004caa3 l       .debug_str	00000000 
0004cad6 l       .debug_str	00000000 
0004cb09 l       .debug_str	00000000 
0004cb3c l       .debug_str	00000000 
0004cb6f l       .debug_str	00000000 
0004cbc3 l       .debug_str	00000000 
0004cbf1 l       .debug_str	00000000 
0004cc45 l       .debug_str	00000000 
0005f622 l       .debug_str	00000000 
00010e89 l       .debug_str	00000000 
0004cc58 l       .debug_str	00000000 
0004cc5c l       .debug_str	00000000 
0004cc60 l       .debug_str	00000000 
0004cc64 l       .debug_str	00000000 
0004cc6b l       .debug_str	00000000 
0004cc70 l       .debug_str	00000000 
0004cca0 l       .debug_str	00000000 
0004ccf2 l       .debug_str	00000000 
0004cd33 l       .debug_str	00000000 
0004cd40 l       .debug_str	00000000 
0004cd7f l       .debug_str	00000000 
0004cd8a l       .debug_str	00000000 
0004cdc6 l       .debug_str	00000000 
0004cdd4 l       .debug_str	00000000 
0004ce08 l       .debug_str	00000000 
0004ce43 l       .debug_str	00000000 
0004ce81 l       .debug_str	00000000 
0004ce8f l       .debug_str	00000000 
0004cec8 l       .debug_str	00000000 
0004ced2 l       .debug_str	00000000 
0004cf0e l       .debug_str	00000000 
0004cf6a l       .debug_str	00000000 
0004cf71 l       .debug_str	00000000 
0004cfcf l       .debug_str	00000000 
0004cfd8 l       .debug_str	00000000 
0004d03f l       .debug_str	00000000 
0004d050 l       .debug_str	00000000 
0004d0ad l       .debug_str	00000000 
0004d10c l       .debug_str	00000000 
0004d168 l       .debug_str	00000000 
0004d1c6 l       .debug_str	00000000 
0004d22d l       .debug_str	00000000 
0004d28a l       .debug_str	00000000 
0004d2e9 l       .debug_str	00000000 
0004d322 l       .debug_str	00000000 
0004d32c l       .debug_str	00000000 
0004d394 l       .debug_str	00000000 
0004d3c7 l       .debug_str	00000000 
0004d3d1 l       .debug_str	00000000 
0004d407 l       .debug_str	00000000 
0004d413 l       .debug_str	00000000 
0004d44a l       .debug_str	00000000 
0004d457 l       .debug_str	00000000 
0004d49b l       .debug_str	00000000 
0004d4b5 l       .debug_str	00000000 
0004d526 l       .debug_str	00000000 
0004d539 l       .debug_str	00000000 
0004d5aa l       .debug_str	00000000 
0004d5ed l       .debug_str	00000000 
0004d5f7 l       .debug_str	00000000 
0004d641 l       .debug_str	00000000 
0004d688 l       .debug_str	00000000 
0004d6d5 l       .debug_str	00000000 
0004d71f l       .debug_str	00000000 
0004d751 l       .debug_str	00000000 
0004d75a l       .debug_str	00000000 
0004d78e l       .debug_str	00000000 
0004d7c7 l       .debug_str	00000000 
0004d803 l       .debug_str	00000000 
0004d815 l       .debug_str	00000000 
0004d856 l       .debug_str	00000000 
0004d8b5 l       .debug_str	00000000 
0004d8e6 l       .debug_str	00000000 
0004d8fc l       .debug_str	00000000 
0004d931 l       .debug_str	00000000 
0004d98e l       .debug_str	00000000 
0004d9f2 l       .debug_str	00000000 
0004da51 l       .debug_str	00000000 
0004dab1 l       .debug_str	00000000 
0004db0f l       .debug_str	00000000 
0001fa4e l       .debug_str	00000000 
0004db74 l       .debug_str	00000000 
0004dbba l       .debug_str	00000000 
0004dbfa l       .debug_str	00000000 
0004dc82 l       .debug_str	00000000 
0005c058 l       .debug_str	00000000 
0004dd09 l       .debug_str	00000000 
0004dd3c l       .debug_str	00000000 
0004ddb0 l       .debug_str	00000000 
0004de29 l       .debug_str	00000000 
0004de9d l       .debug_str	00000000 
0004defc l       .debug_str	00000000 
0004df59 l       .debug_str	00000000 
0004dfb3 l       .debug_str	00000000 
0004e00f l       .debug_str	00000000 
0004e06c l       .debug_str	00000000 
0004e0cb l       .debug_str	00000000 
0004e133 l       .debug_str	00000000 
0004e19d l       .debug_str	00000000 
0004e206 l       .debug_str	00000000 
0004e264 l       .debug_str	00000000 
0004e2d6 l       .debug_str	00000000 
0004e2da l       .debug_str	00000000 
0004e34d l       .debug_str	00000000 
0004e3ab l       .debug_str	00000000 
0004e407 l       .debug_str	00000000 
0004e478 l       .debug_str	00000000 
0004e4ee l       .debug_str	00000000 
0004e525 l       .debug_str	00000000 
0004e581 l       .debug_str	00000000 
0004e5d5 l       .debug_str	00000000 
0004e633 l       .debug_str	00000000 
0004e69f l       .debug_str	00000000 
0004e6f4 l       .debug_str	00000000 
0004e727 l       .debug_str	00000000 
0004e735 l       .debug_str	00000000 
0004e76d l       .debug_str	00000000 
0004e780 l       .debug_str	00000000 
0004e7b5 l       .debug_str	00000000 
0004e7eb l       .debug_str	00000000 
0004e846 l       .debug_str	00000000 
0004e879 l       .debug_str	00000000 
0004e880 l       .debug_str	00000000 
0004e8c2 l       .debug_str	00000000 
0004e8f3 l       .debug_str	00000000 
0004e924 l       .debug_str	00000000 
0004e957 l       .debug_str	00000000 
0004e95e l       .debug_str	00000000 
0004e98b l       .debug_str	00000000 
0004e9c6 l       .debug_str	00000000 
0004e9d9 l       .debug_str	00000000 
0004ea0a l       .debug_str	00000000 
0004ea14 l       .debug_str	00000000 
0004ea75 l       .debug_str	00000000 
0004eadd l       .debug_str	00000000 
0004eb1a l       .debug_str	00000000 
0004eb68 l       .debug_str	00000000 
0004eba4 l       .debug_str	00000000 
0004ebe0 l       .debug_str	00000000 
0004ec19 l       .debug_str	00000000 
0004ec53 l       .debug_str	00000000 
0004ec8c l       .debug_str	00000000 
0004ecc3 l       .debug_str	00000000 
0004ecfc l       .debug_str	00000000 
0004ed36 l       .debug_str	00000000 
0004ed7c l       .debug_str	00000000 
0004ed9f l       .debug_str	00000000 
0004ede5 l       .debug_str	00000000 
0004ee08 l       .debug_str	00000000 
0004ee51 l       .debug_str	00000000 
0004ee77 l       .debug_str	00000000 
0004eec0 l       .debug_str	00000000 
0004eee6 l       .debug_str	00000000 
0004ef30 l       .debug_str	00000000 
0004ef57 l       .debug_str	00000000 
0004efa1 l       .debug_str	00000000 
0004efc8 l       .debug_str	00000000 
0004f015 l       .debug_str	00000000 
0004f03f l       .debug_str	00000000 
0004f08c l       .debug_str	00000000 
0004f0b6 l       .debug_str	00000000 
0004f0e9 l       .debug_str	00000000 
0004f115 l       .debug_str	00000000 
0004f16b l       .debug_str	00000000 
0004f196 l       .debug_str	00000000 
0004f1ee l       .debug_str	00000000 
0004f244 l       .debug_str	00000000 
0004f27d l       .debug_str	00000000 
0004f288 l       .debug_str	00000000 
0001e543 l       .debug_str	00000000 
0004f2c1 l       .debug_str	00000000 
0004f2e8 l       .debug_str	00000000 
0004f321 l       .debug_str	00000000 
0004f368 l       .debug_str	00000000 
0004f375 l       .debug_str	00000000 
0004f58f l       .debug_str	00000000 
0004f3a4 l       .debug_str	00000000 
0004f3e4 l       .debug_str	00000000 
0004f3f8 l       .debug_str	00000000 
0004f43a l       .debug_str	00000000 
0004f46b l       .debug_str	00000000 
0004f49b l       .debug_str	00000000 
0004f4cc l       .debug_str	00000000 
0004f4fd l       .debug_str	00000000 
0004f534 l       .debug_str	00000000 
0004f53f l       .debug_str	00000000 
0004f57f l       .debug_str	00000000 
0004f593 l       .debug_str	00000000 
0004f5cf l       .debug_str	00000000 
0004f5df l       .debug_str	00000000 
0004f614 l       .debug_str	00000000 
0004f61e l       .debug_str	00000000 
0004f653 l       .debug_str	00000000 
0004f65d l       .debug_str	00000000 
0004f6b2 l       .debug_str	00000000 
0004f6fa l       .debug_str	00000000 
0004f740 l       .debug_str	00000000 
0004f787 l       .debug_str	00000000 
0004f7d0 l       .debug_str	00000000 
0004f822 l       .debug_str	00000000 
0004f874 l       .debug_str	00000000 
0004f912 l       .debug_str	00000000 
0004f944 l       .debug_str	00000000 
0004f97d l       .debug_str	00000000 
0004f992 l       .debug_str	00000000 
0004f9cd l       .debug_str	00000000 
0004f9e4 l       .debug_str	00000000 
0004fa22 l       .debug_str	00000000 
0004fa3c l       .debug_str	00000000 
0004fa9e l       .debug_str	00000000 
0004fac3 l       .debug_str	00000000 
0004fb1e l       .debug_str	00000000 
0004fb2d l       .debug_str	00000000 
0004fba2 l       .debug_str	00000000 
0004fbbf l       .debug_str	00000000 
0004fbf9 l       .debug_str	00000000 
0004fc36 l       .debug_str	00000000 
0004fc41 l       .debug_str	00000000 
0004fc79 l       .debug_str	00000000 
0004fc80 l       .debug_str	00000000 
0004fcff l       .debug_str	00000000 
0004fd5f l       .debug_str	00000000 
0004fdbd l       .debug_str	00000000 
0004fe1b l       .debug_str	00000000 
0004fe53 l       .debug_str	00000000 
0004fe88 l       .debug_str	00000000 
0004feb3 l       .debug_str	00000000 
0004febd l       .debug_str	00000000 
0004feed l       .debug_str	00000000 
0004fefb l       .debug_str	00000000 
0004ff54 l       .debug_str	00000000 
0004ffa7 l       .debug_str	00000000 
00050023 l       .debug_str	00000000 
00050087 l       .debug_str	00000000 
000500eb l       .debug_str	00000000 
00050121 l       .debug_str	00000000 
00050135 l       .debug_str	00000000 
00050176 l       .debug_str	00000000 
0005018e l       .debug_str	00000000 
00050242 l       .debug_str	00000000 
00050275 l       .debug_str	00000000 
00050286 l       .debug_str	00000000 
000502cc l       .debug_str	00000000 
000502d9 l       .debug_str	00000000 
00050316 l       .debug_str	00000000 
0005035a l       .debug_str	00000000 
0005039b l       .debug_str	00000000 
000503dd l       .debug_str	00000000 
000503e7 l       .debug_str	00000000 
0005042b l       .debug_str	00000000 
00050436 l       .debug_str	00000000 
00050484 l       .debug_str	00000000 
000504d2 l       .debug_str	00000000 
00050518 l       .debug_str	00000000 
00050560 l       .debug_str	00000000 
000505a8 l       .debug_str	00000000 
00013625 l       .debug_str	00000000 
0005060f l       .debug_str	00000000 
00050668 l       .debug_str	00000000 
000506d2 l       .debug_str	00000000 
00016db7 l       .debug_str	00000000 
0005073c l       .debug_str	00000000 
000507b7 l       .debug_str	00000000 
0005082c l       .debug_str	00000000 
00050837 l       .debug_str	00000000 
000508ac l       .debug_str	00000000 
000508b7 l       .debug_str	00000000 
0005090e l       .debug_str	00000000 
00050972 l       .debug_str	00000000 
0005097e l       .debug_str	00000000 
000509bb l       .debug_str	00000000 
000509c8 l       .debug_str	00000000 
000509fc l       .debug_str	00000000 
00050a37 l       .debug_str	00000000 
00050a93 l       .debug_str	00000000 
00050aee l       .debug_str	00000000 
00050b48 l       .debug_str	00000000 
00037582 l       .debug_str	00000000 
00050b8e l       .debug_str	00000000 
00050bf4 l       .debug_str	00000000 
00050c2b l       .debug_str	00000000 
00050c33 l       .debug_str	00000000 
00050c6b l       .debug_str	00000000 
00050c74 l       .debug_str	00000000 
00050cac l       .debug_str	00000000 
00050cb5 l       .debug_str	00000000 
00050cec l       .debug_str	00000000 
00050cf4 l       .debug_str	00000000 
00050d2c l       .debug_str	00000000 
00050d35 l       .debug_str	00000000 
00050d6d l       .debug_str	00000000 
00050d76 l       .debug_str	00000000 
00050dad l       .debug_str	00000000 
00050db5 l       .debug_str	00000000 
00050e2f l       .debug_str	00000000 
00050ea9 l       .debug_str	00000000 
00050f23 l       .debug_str	00000000 
00050f9f l       .debug_str	00000000 
0001a502 l       .debug_str	00000000 
00050ffd l       .debug_str	00000000 
0005105c l       .debug_str	00000000 
000510bb l       .debug_str	00000000 
0005111a l       .debug_str	00000000 
0005117a l       .debug_str	00000000 
000511d8 l       .debug_str	00000000 
00051237 l       .debug_str	00000000 
00051296 l       .debug_str	00000000 
000512f5 l       .debug_str	00000000 
00051355 l       .debug_str	00000000 
000513aa l       .debug_str	00000000 
000513ff l       .debug_str	00000000 
00051459 l       .debug_str	00000000 
000514b3 l       .debug_str	00000000 
000514ed l       .debug_str	00000000 
000514f6 l       .debug_str	00000000 
00051530 l       .debug_str	00000000 
00051539 l       .debug_str	00000000 
00051576 l       .debug_str	00000000 
00038a6d l       .debug_str	00000000 
000515af l       .debug_str	00000000 
00051610 l       .debug_str	00000000 
0005166e l       .debug_str	00000000 
000516af l       .debug_str	00000000 
000516ed l       .debug_str	00000000 
00051726 l       .debug_str	00000000 
00051765 l       .debug_str	00000000 
000517a3 l       .debug_str	00000000 
000517e1 l       .debug_str	00000000 
00051822 l       .debug_str	00000000 
00051866 l       .debug_str	00000000 
000518a3 l       .debug_str	00000000 
00051909 l       .debug_str	00000000 
00051970 l       .debug_str	00000000 
000519d3 l       .debug_str	00000000 
00051a35 l       .debug_str	00000000 
00051a9a l       .debug_str	00000000 
00051b03 l       .debug_str	00000000 
00051b69 l       .debug_str	00000000 
00051bcf l       .debug_str	00000000 
00051c2a l       .debug_str	00000000 
00051c91 l       .debug_str	00000000 
00051cfc l       .debug_str	00000000 
00051d57 l       .debug_str	00000000 
00051db2 l       .debug_str	00000000 
00022c5e l       .debug_str	00000000 
00051df9 l       .debug_str	00000000 
00051e41 l       .debug_str	00000000 
00051e89 l       .debug_str	00000000 
00051ed1 l       .debug_str	00000000 
00051f1a l       .debug_str	00000000 
00051f64 l       .debug_str	00000000 
00051fab l       .debug_str	00000000 
00051ffe l       .debug_str	00000000 
00052019 l       .debug_str	00000000 
00052061 l       .debug_str	00000000 
000520b5 l       .debug_str	00000000 
000520fd l       .debug_str	00000000 
00052151 l       .debug_str	00000000 
00052199 l       .debug_str	00000000 
000521ed l       .debug_str	00000000 
00052236 l       .debug_str	00000000 
0005228b l       .debug_str	00000000 
000522d5 l       .debug_str	00000000 
0005232d l       .debug_str	00000000 
0005238f l       .debug_str	00000000 
000523ee l       .debug_str	00000000 
0005244e l       .debug_str	00000000 
000524ae l       .debug_str	00000000 
0005250e l       .debug_str	00000000 
0005256f l       .debug_str	00000000 
000525ce l       .debug_str	00000000 
0005262e l       .debug_str	00000000 
0005268e l       .debug_str	00000000 
000526ee l       .debug_str	00000000 
0005274f l       .debug_str	00000000 
000527ac l       .debug_str	00000000 
00052807 l       .debug_str	00000000 
0005285d l       .debug_str	00000000 
000528bb l       .debug_str	00000000 
0005290f l       .debug_str	00000000 
00052970 l       .debug_str	00000000 
000529d6 l       .debug_str	00000000 
00052a3e l       .debug_str	00000000 
00052aa5 l       .debug_str	00000000 
00052b01 l       .debug_str	00000000 
00052b62 l       .debug_str	00000000 
00052bbc l       .debug_str	00000000 
00052c16 l       .debug_str	00000000 
00052c74 l       .debug_str	00000000 
00052cc8 l       .debug_str	00000000 
00052d44 l       .debug_str	00000000 
00052dad l       .debug_str	00000000 
00052e29 l       .debug_str	00000000 
00052ea5 l       .debug_str	00000000 
00052f0e l       .debug_str	00000000 
00052f8a l       .debug_str	00000000 
00052ff7 l       .debug_str	00000000 
00053051 l       .debug_str	00000000 
000530aa l       .debug_str	00000000 
00053102 l       .debug_str	00000000 
00053161 l       .debug_str	00000000 
000531c0 l       .debug_str	00000000 
0005321f l       .debug_str	00000000 
0005327f l       .debug_str	00000000 
000532df l       .debug_str	00000000 
0005333f l       .debug_str	00000000 
0005339f l       .debug_str	00000000 
00053401 l       .debug_str	00000000 
00053463 l       .debug_str	00000000 
000534c4 l       .debug_str	00000000 
00053526 l       .debug_str	00000000 
00053588 l       .debug_str	00000000 
000535e9 l       .debug_str	00000000 
0005364b l       .debug_str	00000000 
000536ad l       .debug_str	00000000 
00038ab1 l       .debug_str	00000000 
000536f6 l       .debug_str	00000000 
00053742 l       .debug_str	00000000 
0005374a l       .debug_str	00000000 
00053794 l       .debug_str	00000000 
000537df l       .debug_str	00000000 
000537e6 l       .debug_str	00000000 
00053831 l       .debug_str	00000000 
0005387c l       .debug_str	00000000 
000538c8 l       .debug_str	00000000 
00053912 l       .debug_str	00000000 
0005395f l       .debug_str	00000000 
000539aa l       .debug_str	00000000 
000539f6 l       .debug_str	00000000 
00053a42 l       .debug_str	00000000 
00053a8e l       .debug_str	00000000 
00053adb l       .debug_str	00000000 
00053b25 l       .debug_str	00000000 
00053b72 l       .debug_str	00000000 
00053bbd l       .debug_str	00000000 
00053c09 l       .debug_str	00000000 
00053c55 l       .debug_str	00000000 
00053ca1 l       .debug_str	00000000 
00053cee l       .debug_str	00000000 
00053d38 l       .debug_str	00000000 
00053d85 l       .debug_str	00000000 
00053dd0 l       .debug_str	00000000 
00053e1c l       .debug_str	00000000 
00053e68 l       .debug_str	00000000 
00053eb4 l       .debug_str	00000000 
00053f01 l       .debug_str	00000000 
00053f4c l       .debug_str	00000000 
00053f9a l       .debug_str	00000000 
00053fe6 l       .debug_str	00000000 
00054033 l       .debug_str	00000000 
00054080 l       .debug_str	00000000 
000540cd l       .debug_str	00000000 
0005411b l       .debug_str	00000000 
00054166 l       .debug_str	00000000 
000541b1 l       .debug_str	00000000 
000541fd l       .debug_str	00000000 
00054249 l       .debug_str	00000000 
00054296 l       .debug_str	00000000 
000542e2 l       .debug_str	00000000 
0005432f l       .debug_str	00000000 
0005437c l       .debug_str	00000000 
000543db l       .debug_str	00000000 
00054438 l       .debug_str	00000000 
00054494 l       .debug_str	00000000 
000544f2 l       .debug_str	00000000 
0005454f l       .debug_str	00000000 
000545ad l       .debug_str	00000000 
0005460a l       .debug_str	00000000 
00054668 l       .debug_str	00000000 
000546c5 l       .debug_str	00000000 
00054724 l       .debug_str	00000000 
00054782 l       .debug_str	00000000 
000547e3 l       .debug_str	00000000 
00054844 l       .debug_str	00000000 
000548a7 l       .debug_str	00000000 
000548d8 l       .debug_str	00000000 
000548e0 l       .debug_str	00000000 
00054943 l       .debug_str	00000000 
000549a6 l       .debug_str	00000000 
00054a0a l       .debug_str	00000000 
00054a6e l       .debug_str	00000000 
00054ad2 l       .debug_str	00000000 
00054b36 l       .debug_str	00000000 
00054b99 l       .debug_str	00000000 
00054bfc l       .debug_str	00000000 
00054c60 l       .debug_str	00000000 
00054cc4 l       .debug_str	00000000 
00054d28 l       .debug_str	00000000 
00054d8c l       .debug_str	00000000 
00054dbd l       .debug_str	00000000 
00054dc5 l       .debug_str	00000000 
00054e29 l       .debug_str	00000000 
00054e8d l       .debug_str	00000000 
00054ef1 l       .debug_str	00000000 
00054f55 l       .debug_str	00000000 
00054fb5 l       .debug_str	00000000 
00055015 l       .debug_str	00000000 
00055043 l       .debug_str	00000000 
0005504c l       .debug_str	00000000 
000550ad l       .debug_str	00000000 
0005510e l       .debug_str	00000000 
0005516f l       .debug_str	00000000 
000551d0 l       .debug_str	00000000 
00055227 l       .debug_str	00000000 
0005527a l       .debug_str	00000000 
000552c2 l       .debug_str	00000000 
000552ea l       .debug_str	00000000 
00055332 l       .debug_str	00000000 
00055348 l       .debug_str	00000000 
00055390 l       .debug_str	00000000 
000553c5 l       .debug_str	00000000 
0005540d l       .debug_str	00000000 
00055448 l       .debug_str	00000000 
00055490 l       .debug_str	00000000 
000554d8 l       .debug_str	00000000 
000554f9 l       .debug_str	00000000 
00055541 l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
00055594 l       .debug_str	00000000 
000555d1 l       .debug_str	00000000 
00055619 l       .debug_str	00000000 
00055672 l       .debug_str	00000000 
000556ba l       .debug_str	00000000 
000556d6 l       .debug_str	00000000 
0005571e l       .debug_str	00000000 
000557ca l       .debug_str	00000000 
00055812 l       .debug_str	00000000 
00055830 l       .debug_str	00000000 
00055878 l       .debug_str	00000000 
00055882 l       .debug_str	00000000 
000558ca l       .debug_str	00000000 
00055905 l       .debug_str	00000000 
0005594d l       .debug_str	00000000 
0005599c l       .debug_str	00000000 
000559e4 l       .debug_str	00000000 
00055a0b l       .debug_str	00000000 
00055a53 l       .debug_str	00000000 
00055a7d l       .debug_str	00000000 
00055ac5 l       .debug_str	00000000 
00055b40 l       .debug_str	00000000 
00055b88 l       .debug_str	00000000 
00055bd0 l       .debug_str	00000000 
00055be6 l       .debug_str	00000000 
00016511 l       .debug_str	00000000 
00055c2e l       .debug_str	00000000 
00055c76 l       .debug_str	00000000 
00055cbe l       .debug_str	00000000 
00055cef l       .debug_str	00000000 
00055d37 l       .debug_str	00000000 
00055d9b l       .debug_str	00000000 
00055de3 l       .debug_str	00000000 
0000b802 l       .debug_str	00000000 
00055e2b l       .debug_str	00000000 
00055e73 l       .debug_str	00000000 
00055e80 l       .debug_str	00000000 
00055ec8 l       .debug_str	00000000 
00055ed2 l       .debug_str	00000000 
00055f1a l       .debug_str	00000000 
00055f23 l       .debug_str	00000000 
00055f6b l       .debug_str	00000000 
00055f93 l       .debug_str	00000000 
00055fdb l       .debug_str	00000000 
00056023 l       .debug_str	00000000 
00056045 l       .debug_str	00000000 
0005608d l       .debug_str	00000000 
000560be l       .debug_str	00000000 
00056106 l       .debug_str	00000000 
0005614e l       .debug_str	00000000 
00056186 l       .debug_str	00000000 
000561ce l       .debug_str	00000000 
00056203 l       .debug_str	00000000 
0005624b l       .debug_str	00000000 
00056274 l       .debug_str	00000000 
000562bc l       .debug_str	00000000 
000562e0 l       .debug_str	00000000 
00056328 l       .debug_str	00000000 
0005634d l       .debug_str	00000000 
00056395 l       .debug_str	00000000 
000563b2 l       .debug_str	00000000 
000563fa l       .debug_str	00000000 
00056405 l       .debug_str	00000000 
0005644d l       .debug_str	00000000 
00056475 l       .debug_str	00000000 
000564bd l       .debug_str	00000000 
000564cc l       .debug_str	00000000 
00056514 l       .debug_str	00000000 
0005655c l       .debug_str	00000000 
00056578 l       .debug_str	00000000 
000565c0 l       .debug_str	00000000 
00056637 l       .debug_str	00000000 
0005667f l       .debug_str	00000000 
000566f6 l       .debug_str	00000000 
0005673e l       .debug_str	00000000 
00056747 l       .debug_str	00000000 
0005678f l       .debug_str	00000000 
000567b5 l       .debug_str	00000000 
000567fd l       .debug_str	00000000 
00056830 l       .debug_str	00000000 
00056878 l       .debug_str	00000000 
00056895 l       .debug_str	00000000 
000568dd l       .debug_str	00000000 
000568e6 l       .debug_str	00000000 
0005692e l       .debug_str	00000000 
00056976 l       .debug_str	00000000 
0005699a l       .debug_str	00000000 
0000b8eb l       .debug_str	00000000 
000569e2 l       .debug_str	00000000 
00056a2a l       .debug_str	00000000 
00056a72 l       .debug_str	00000000 
00056b6a l       .debug_str	00000000 
0001ac12 l       .debug_str	00000000 
00056bb2 l       .debug_str	00000000 
00056bfa l       .debug_str	00000000 
00056c42 l       .debug_str	00000000 
00056c6f l       .debug_str	00000000 
0000b93c l       .debug_str	00000000 
00056cb7 l       .debug_str	00000000 
00056cff l       .debug_str	00000000 
00056d5c l       .debug_str	00000000 
00056da4 l       .debug_str	00000000 
00056dad l       .debug_str	00000000 
00056df5 l       .debug_str	00000000 
00056e12 l       .debug_str	00000000 
00056e5a l       .debug_str	00000000 
00056e90 l       .debug_str	00000000 
00056ed8 l       .debug_str	00000000 
00056f0d l       .debug_str	00000000 
00056f55 l       .debug_str	00000000 
00056f8e l       .debug_str	00000000 
00056fd6 l       .debug_str	00000000 
00056ff2 l       .debug_str	00000000 
0005703a l       .debug_str	00000000 
00057042 l       .debug_str	00000000 
0005708a l       .debug_str	00000000 
000570a5 l       .debug_str	00000000 
000570ed l       .debug_str	00000000 
00057115 l       .debug_str	00000000 
0005715f l       .debug_str	00000000 
000571a9 l       .debug_str	00000000 
00057208 l       .debug_str	00000000 
00057265 l       .debug_str	00000000 
000572be l       .debug_str	00000000 
0005731d l       .debug_str	00000000 
0005737c l       .debug_str	00000000 
000573dd l       .debug_str	00000000 
00057440 l       .debug_str	00000000 
000574a8 l       .debug_str	00000000 
0005750a l       .debug_str	00000000 
00057570 l       .debug_str	00000000 
000575d2 l       .debug_str	00000000 
00057637 l       .debug_str	00000000 
0005769a l       .debug_str	00000000 
000576f6 l       .debug_str	00000000 
0005774d l       .debug_str	00000000 
000577a6 l       .debug_str	00000000 
000577f9 l       .debug_str	00000000 
00057855 l       .debug_str	00000000 
000578bb l       .debug_str	00000000 
00057911 l       .debug_str	00000000 
0005796e l       .debug_str	00000000 
000579d0 l       .debug_str	00000000 
00057a29 l       .debug_str	00000000 
00057a84 l       .debug_str	00000000 
00057adf l       .debug_str	00000000 
00057b3a l       .debug_str	00000000 
00057b97 l       .debug_str	00000000 
00057bf4 l       .debug_str	00000000 
00057c3a l       .debug_str	00000000 
00057c84 l       .debug_str	00000000 
00057cc4 l       .debug_str	00000000 
00057d01 l       .debug_str	00000000 
00057d45 l       .debug_str	00000000 
00057d81 l       .debug_str	00000000 
00057dc5 l       .debug_str	00000000 
00057e0e l       .debug_str	00000000 
00057e17 l       .debug_str	00000000 
00057e60 l       .debug_str	00000000 
00057e69 l       .debug_str	00000000 
00057ed2 l       .debug_str	00000000 
00057f2f l       .debug_str	00000000 
00057f92 l       .debug_str	00000000 
00057fe8 l       .debug_str	00000000 
0005803e l       .debug_str	00000000 
00058097 l       .debug_str	00000000 
000580ef l       .debug_str	00000000 
00058153 l       .debug_str	00000000 
000581d9 l       .debug_str	00000000 
000581df l       .debug_str	00000000 
00058265 l       .debug_str	00000000 
0005826b l       .debug_str	00000000 
000582ed l       .debug_str	00000000 
0005836f l       .debug_str	00000000 
000583f2 l       .debug_str	00000000 
000583f9 l       .debug_str	00000000 
0005847c l       .debug_str	00000000 
00058483 l       .debug_str	00000000 
00058509 l       .debug_str	00000000 
0005858f l       .debug_str	00000000 
00058612 l       .debug_str	00000000 
00058695 l       .debug_str	00000000 
00058717 l       .debug_str	00000000 
0005879d l       .debug_str	00000000 
00058823 l       .debug_str	00000000 
000588ad l       .debug_str	00000000 
00058935 l       .debug_str	00000000 
000589bd l       .debug_str	00000000 
00058a25 l       .debug_str	00000000 
00058a8e l       .debug_str	00000000 
00058af8 l       .debug_str	00000000 
00058b63 l       .debug_str	00000000 
00058bc1 l       .debug_str	00000000 
00058c1f l       .debug_str	00000000 
00058c7d l       .debug_str	00000000 
00058cdc l       .debug_str	00000000 
00058d3a l       .debug_str	00000000 
00058d99 l       .debug_str	00000000 
00058df7 l       .debug_str	00000000 
00058e56 l       .debug_str	00000000 
00058eb5 l       .debug_str	00000000 
00058f14 l       .debug_str	00000000 
00058f72 l       .debug_str	00000000 
00058fd1 l       .debug_str	00000000 
00059030 l       .debug_str	00000000 
0005908f l       .debug_str	00000000 
000590ee l       .debug_str	00000000 
0005914d l       .debug_str	00000000 
000591ac l       .debug_str	00000000 
0005920b l       .debug_str	00000000 
0005926a l       .debug_str	00000000 
000592c9 l       .debug_str	00000000 
00059328 l       .debug_str	00000000 
00059387 l       .debug_str	00000000 
000593e6 l       .debug_str	00000000 
00059445 l       .debug_str	00000000 
000594a4 l       .debug_str	00000000 
00059503 l       .debug_str	00000000 
00059562 l       .debug_str	00000000 
000595c1 l       .debug_str	00000000 
00059620 l       .debug_str	00000000 
0005967f l       .debug_str	00000000 
000596df l       .debug_str	00000000 
0005973e l       .debug_str	00000000 
0005979d l       .debug_str	00000000 
000597fc l       .debug_str	00000000 
0005985c l       .debug_str	00000000 
000598bb l       .debug_str	00000000 
0005991a l       .debug_str	00000000 
00059979 l       .debug_str	00000000 
000599d9 l       .debug_str	00000000 
000177ae l     F .text	00000012 _ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE
000197cc l     F .text	0000000a _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E
000197d6 l     F .text	0000000c _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E
00017e52 l     F .text	000000e4 _ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE
00018e7a l     F .text	0000024c _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE
00017d4c l     F .text	000000b0 _ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E
00017dfc l     F .text	00000024 _ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE
00018374 l     F .text	00000032 _ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E
0001775e l     F .text	00000002 _ZN4core3ptr13drop_in_place17h000c7c147ade2111E
000177c0 l     F .text	00000114 _ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E
00021e3c l     O .text	0000007b _ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E
00021eb7 l     O .text	000001f0 _ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E
000220a8 l     O .text	00000458 _ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E
00021410 l     O .text	00000010 _ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE
00017e26 l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE
00017e2c l     F .text	00000026 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE
00017e20 l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E
00017760 l     F .text	0000004e _ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE
00000000 l    df *ABS*	00000000 semihosting_console.c
000197e4 l     F .text	00000024 __semihost
00019808 l     F .text	00000010 debugger_connected
00019818 l     F .text	0000002e semihost_write
000198ec l     F .text	0000001c semihosting_console_write_ch
20006f04 l     O .bss	00000004 semihost_mbuf
20000100 l     O .data	00000001 log_enabled
00000000 l    df *ABS*	00000000 console.c
20006f08 l     O .bss	00000010 avail_queue
20006f18 l     O .bss	0000000c console_write_lock
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
20006f24 l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 sysinit.c
00019abc l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 hal_gpio.c
00019b10 l     F .text	00000050 hal_gpio_irq_handler
00019b60 l     F .text	0000002c hal_gpio_irq_setup
00019b8c l     F .text	0000001c hal_gpio_find_empty_slot
00019ba8 l     F .text	00000038 hal_gpio_find_pin
20006f28 l     O .bss	00000040 hal_gpio_irqs
20006f68 l     O .bss	00000001 irq_setup.8906
00000000 l    df *ABS*	00000000 hal_i2c.c
00019d3c l     F .text	0000007a hal_i2c_delay_us
00019db8 l     F .text	00000024 hal_i2c_resolve
00019ddc l     F .text	0000001c hal_i2c_convert_status
00019df8 l     F .text	00000012 read_gpio_inbuffer
00019e0a l     F .text	000000a2 hal_i2c_clear_bus
00022510 l     O .text	00000008 nrf52_hal_i2cs
00000000 l    df *ABS*	00000000 hal_spi.c
0001a1a8 l     F .text	0000006e nrf52_irqm_handler
0001a230 l     F .text	00000014 hal_spi_stop_transfer
0001a244 l     F .text	0000004c hal_spi_config_slave
0001a290 l     F .text	000000b8 hal_spi_init_master
0001a348 l     F .text	000000e0 hal_spi_config_master
00022518 l     O .text	0000000c nrf52_hal_spis
00000000 l    df *ABS*	00000000 hal_watchdog.c
0001a72c l     F .text	0000000e nrf52_hal_wdt_default_handler
0001a73c l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
0001a954 l     F .text	00000016 os_main
20007070 l     O .bss	00002000 g_os_main_stack
20006f70 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
0001ac64 l     F .text	0000005c os_dev_add
0001acc0 l     F .text	00000026 os_dev_initialize
0001ace6 l     F .text	00000020 os_dev_init
20009070 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
20009078 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mempool.c
0001b210 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
0001b324 l     F .text	00000010 os_msys_find_biggest_pool
0001b334 l     F .text	0000002c os_msys_find_pool
0001b3ac l     F .text	00000044 os_msys_init_once
20009088 l     O .bss	00004900 os_msys_1_data
2000d988 l     O .bss	0000000c os_msys_1_mbuf_pool
2000d994 l     O .bss	0000001c os_msys_1_mempool
2000010c l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
0001b608 l     F .text	00000020 os_sanity_check_list_lock
0001b628 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
0001ba9c l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
0001bb8c l     F .text	0000004c os_deltatime
0001bbd8 l     F .text	0000005c os_time_tick
2000d9b8 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
0001bef4 l       .text	00000000 SVC_User
0001bf12 l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 memcmp.c
0001bfb4 l       .text	00000000 test1
0001bfa8 l       .text	00000000 loop1
0001bfba l       .text	00000000 res1
0001bfd6 l       .text	00000000 test2
0001bfde l       .text	00000000 done
0001bfca l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
0001bfea l       .text	00000000 test1
0001bfe6 l       .text	00000000 loop1
0001bff8 l       .text	00000000 test2
0001bff4 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 tinyprintf.c
0001c062 l     F .text	000000c0 ui2a
0001c122 l     F .text	00000020 i2a
0001c142 l     F .text	00000030 a2d
0001c172 l     F .text	00000036 a2i
0001c1a8 l     F .text	0000002a putf
0001c1d4 l     F .text	0000011c putchw
0001c2f0 l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 mynewt.c
0001c674 l     F .text	00000004 stdin_read
0001c678 l     F .text	00000010 stdout_write
20000124 l     O .data	00000004 _stdin
20000128 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 mynewt_rust.c
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysinit-app.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001c728 l     F .text	00000028 nrf52k_flash_wait_ready
0001c750 l     F .text	00000054 nrf52k_flash_erase_sector
0001c7a4 l     F .text	00000004 nrf52k_flash_init
0001c7a8 l     F .text	00000020 nrf52k_flash_sector_info
0001c7c8 l     F .text	000000d0 nrf52k_flash_write
0001c898 l     F .text	0000000e nrf52k_flash_read
000226d0 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
0001c8a8 l     F .text	000000d4 nrf52_timer_handler
00000000 l    df *ABS*	00000000 hal_timer.c
0001cab4 l     F .text	0000000a nrf_read_timer_cntr
0001cac0 l     F .text	000000b4 nrf_timer_set_ocmp
0001cb74 l     F .text	0000000a nrf_timer_disable_ocmp
0001cb7e l     F .text	0000000a nrf_rtc_disable_ocmp
0001cb88 l     F .text	00000054 hal_timer_read_bsptimer
0001cbdc l     F .text	00000076 hal_timer_chk_queue
0001cc52 l     F .text	0000002c hal_timer_irq_handler
000226ec l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 nrf52_periph.c
0001ce18 l     F .text	00000034 nrf52_periph_create_timers
0001ce4c l     F .text	00000020 nrf52_periph_create_i2c
0001ce6c l     F .text	00000020 nrf52_periph_create_spi
00022704 l     O .text	0000000c hal_i2c1_cfg
00022710 l     O .text	00000004 os_bsp_spi0m_cfg
00000000 l    df *ABS*	00000000 sensor_creator.c
00000000 l    df *ABS*	00000000 sensor.c
0001cea0 l     F .text	00000028 sensor_mgr_remove
0001cec8 l     F .text	00000060 sensor_mgr_insert
0001cf28 l     F .text	0000000a sensor_type_traits_empty
0001cf34 l     F .text	0000000c sensor_mgr_evq_set
0001cf6e l     F .text	0000005c sensor_read_data_func
0001cfcc l     F .text	00000048 sensor_base_ts_update_event
0001d014 l     F .text	00000050 sensor_up_timestamp
0001d09c l     F .text	000000a0 sensor_mgr_init
0001d308 l     F .text	0000007c sensor_mgr_wakeup_event
0001d166 l     F .text	00000032 sensor_update_nextrun
0001d198 l     F .text	0000001e sensor_calc_nextrun_delta
0001d1b8 l     F .text	00000024 sensor_find_min_nextrun_sensor
0001d290 l     F .text	0000004a sensor_mgr_poll_bytype
0001d2da l     F .text	0000002e sensor_poll_per_type_trait
2000d9ec l     O .bss	00000078 sensor_notify_evt_area
2000da64 l     O .bss	0000001c sensor_notify_evt_pool
00000000 l    df *ABS*	00000000 sensor_coap.c
2000da80 l     O .bss	00000008 oc_sem
2000da88 l     O .bss	00000001 oc_sensor_coap_ready
00000000 l    df *ABS*	00000000 sensor_network.c
2000da8c l     O .bss	0000000c hw_id
2000da98 l     O .bss	00000004 hw_id_len
2000daa0 l     O .bss	00000008 sensor_node_address
2000daa8 l     O .bss	00000037 sensor_node_names_buf
20000130 l     O .data	00000014 sensor_node_names
00022728 l     O .text	0000000c COLLECTOR_NODE_HW_ID
00022734 l     O .text	0000003c SENSOR_NODE_HW_IDS
000227d0 l     O .text	00000028 sensor_node_addresses
00000000 l    df *ABS*	00000000 creator.c
0001d52c l     F .text	00000050 config_device
2000dae0 l     O .bss	00000014 adc_1_itf_temp_stub
2000daf8 l     O .bss	000000c0 temp_stub_dev
00000000 l    df *ABS*	00000000 temp_stub.c
0001d5d8 l     F .text	00000004 temp_stub_close
0001d5dc l     F .text	0000001c temp_stub_sensor_get_config
0001d5f8 l     F .text	00000026 temp_stub_open
0001d6d4 l     F .text	0000007c temp_stub_sensor_read
00022814 l     O .text	00000028 g_temp_stub_sensor_driver
00000000 l    df *ABS*	00000000 oc_buffer.c
0001d778 l     F .text	00000030 oc_buffer_tx
0001d7a8 l     F .text	0000002c oc_buffer_rx
2000dbb8 l     O .bss	00000018 oc_inq
2000dbd0 l     O .bss	00000018 oc_outq
00000000 l    df *ABS*	00000000 oc_ri.c
2000dbe8 l     O .bss	000000c8 oc_client_cb_area
2000dcb0 l     O .bss	0000001c oc_client_cb_pool
00000000 l    df *ABS*	00000000 adaptor.c
2000dccc l     O .bss	00000004 oc_evq
00000000 l    df *ABS*	00000000 ble_adaptor.c
00000000 l    df *ABS*	00000000 ip4_adaptor.c
00000000 l    df *ABS*	00000000 ip_adaptor.c
00000000 l    df *ABS*	00000000 lora_adaptor.c
00000000 l    df *ABS*	00000000 serial_adaptor.c
00000000 l    df *ABS*	00000000 oc_rep.c
2000dcd0 l     O .bss	0000001c oc_rep_objects
2000dcec l     O .bss	00000030 oc_rep_objects_area
00000000 l    df *ABS*	00000000 flash_map.c
0001d8fc l     F .text	00000078 flash_map_read_mfg
2000dd1c l     O .bss	00000078 mfg_areas.9056
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 mfg.c
0001da50 l     F .text	00000094 mfg_seek_next_aux
0001dae4 l     F .text	00000070 mfg_read_mmr
0001db54 l     F .text	00000054 mfg_read_next_mmr
0001dba8 l     F .text	0000003c mfg_open_flash_area
0001dbe4 l     F .text	00000044 mfg_read_tlv_body
0001dcb0 l     F .text	0000004e mfg_read_mmr_refs
2000dd94 l     O .bss	00000001 mfg_initialized
2000dd98 l     O .bss	00000018 mfg_mmrs
2000ddb0 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 support.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001dd16 l     F .text	0000001e hal_flash_check_addr
00000000 l    df *ABS*	00000000 nrf52_hw_id.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 aeabi_memclr.c
00000000 l    df *ABS*	00000000 aeabi_memcpy.c
00000000 l    df *ABS*	00000000 lib_a-aeabi_memset-soft.o
00000000 l    df *ABS*	00000000 libchip8.bde0u64m-cgu.0
00000afc l       .debug_str	00000000 
00019f75 l       .debug_str	00000000 
00019fcc l       .debug_str	00000000 
0001161c l       .debug_str	00000000 
0001a018 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0001a020 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysflash.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00017964 g     F .text	00000004 _ZN4core5panic8Location4line17h650a566d9637c91dE
00015588 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE
00008616 g     F .text	000000ba main
00014cb4 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE
00009f6e g     F .text	0000070a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E
0001af34 g     F .text	00000040 os_eventq_remove
0000a704 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h00c2f0b87edee24bE
0001bd80 g     F .text	00000018 os_arch_init
0001bf9c g     F .text	00000048 memcmp
000120aa g     F .text	00000012 _ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE
00017408 g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE
00016274 g     F .text	00000024 _ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE
00011584 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E
00014898 g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E
00012420 g     F .text	000000ee _ZN3log17__private_api_log17h076f8f4ccc99f19bE
000170e8 g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE
00016f70 g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E
000145d0 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE
00014564 g     F .text	00000002 _ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E
00017994 g     F .text	00000040 _ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E
0000a6e6 g     F .text	0000001e .hidden _ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE
000090a0 g     F .text	00000010 _ZN4core3ptr5write17h7ef3fa6b6f80daebE
00014764 g     F .text	0000005a _ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE
000195f4 g     F .text	000000f4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$isize$GT$3fmt17hc96955e2b836ab47E
0000d224 g     F .text	00000052 _ZN8libchip814Chip8$LT$T$GT$3run17he09519a5fb5b03e9E
2000ded0 g     O .bss	0000001c nrf52_hal_timer0
00014b00 g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E
00009086 g     F .text	0000001a _ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE
00014976 g     F .text	00000020 _ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE
0001d15c g     F .text	0000000a sensor_unlock
0000ab9a g     F .text	00000036 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E
00014aa4 g     F .text	0000001e _ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E
000097f6 g     F .text	00000118 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E
000115d8 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E
00014a88 g     F .text	0000001c _ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE
000169d8 g     F .text	00000008 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E
00008ef2 g     F .text	0000006c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E
0001b654 g     F .text	00000024 os_sanity_check_register
0001d62c g     F .text	0000007c temp_stub_init
0001b6f4 g     F .text	00000054 os_sched_insert
2000ddb4 g     O .bss	00000001 g_silence_console
00014fce g     F .text	00000050 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E
000158a2 g     F .text	0000028a _ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E
00015086 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E
0001273c g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE
00016d66 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE
00008164  w    F .text	00000002 POWER_CLOCK_IRQHandler
0001ddb4 g     F .text	00000034 hal_bsp_hw_id
00008164  w    F .text	00000002 NFCT_IRQHandler
00017730 g     F .text	00000004 .hidden _ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE
0001485c g     F .text	00000018 _ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E
00016a28 g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117hdc09c81c55dd3f27E
00009980 g     F .text	00000162 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE
0001601e g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE
000110a0 g     F .text	0000007e _ZN8libchip814Chip8$LT$T$GT$5setup17h6dafcb9be3b52c51E
00008c5e g     F .text	00000012 _ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE
0001540e g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE
00019240 g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE
00017742 g     F .text	0000001c _ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E
00014d18 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE
00015172 g     F .text	00000024 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE
000117c8 g     F .text	00000086 _ZN4core3cmp6max_by17h3c9686db40e0f078E
00008a9c g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E
20000114 g     O .data	00000008 g_os_run_list
000155e8 g     F .text	0000004a _ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E
0001d838 g     F .text	00000020 oc_send_buffer
0001be28 g     F .text	00000030 os_arch_start
000154f8 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE
0000a778 g     F .text	0000001a _ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E
0001d450 g     F .text	0000001a is_standalone_node
000087d2 g     F .text	00000054 _ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE
0001ae20 g     F .text	00000010 os_eventq_init
00018852 g     F .text	00000044 _ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E
000127cc g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E
00017f36 g     F .text	00000022 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E
000115c2 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E
00008d54 g     F .text	0000001a _ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE
000172ea g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE
0001d384 g     F .text	00000028 init_sensor_coap
00016ffc g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE
0001d858 g     F .text	0000004c oc_send_multicast_message
0001602e g     F .text	0000008c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE
00011dca g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E
0000d0c8 g     F .text	0000001c _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hd98ff8af8e86e565E
0001880e g     F .text	00000044 _ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE
2000def0 g     O .bss	00000034 sensor_mgr
0000ce50 g     F .text	00000106 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E
00019988 g     F .text	0000002c console_dump
0001b820 g     F .text	00000078 os_sched_wakeup
000175da g     F .text	0000011c .hidden _ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE
000126cc g     F .text	0000001a _ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E
000193d4 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17h6ff113c3a96d4445E
00008ad4 g     F .text	00000026 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E
0001dd14 g     F .text	00000002 _fini
0001ac58 g     F .text	0000000a os_cputime_get32
00011688 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E
00014406 g     F .text	00000132 _ZN6mynewt3hal4GPIO4init17h54c34caf27320956E
2000ddb5 g     O .bss	00000001 g_console_input_ignore
0001bd10 g     F .text	00000014 os_arch_ctx_sw
00010f9a g     F .text	00000106 _ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE
000113c2 g     F .text	00000028 .hidden _ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E
00012712 g     F .text	0000001a _ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E
00014e42 g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE
0001bf5e g     F .text	0000000c SysTick_Handler
0001d3c4 g     F .text	00000070 get_hardware_id
00008168 g     F .text	00000010 _sbrkInit
000121cc g     F .text	0000003c _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E
000115ee g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE
000093d8 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE
00008a74 g     F .text	00000012 _ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E
0001c036 g     F .text	0000001c strcmp
0000bae0 g     F .text	00000136 .hidden _ZN3app5chip88on_start17h473d234c4f7ef3a3E
00015ffa g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE
2000dde8 g     O .bss	00000050 g_idle_task
0001ae10 g     F .text	00000010 os_dev_reset
000174fa g     F .text	00000010 _ZN4core3ptr5write17h147d4643d861e927E
00009484 g     F .text	00000262 _ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E
0001b970 g     F .text	00000010 os_sem_init
00016b42 g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E
00019908 g     F .text	00000070 console_printhex
0000adfe g     F .text	00000270 .hidden _ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E
0000885c g     F .text	0000003a _ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE
000145fc g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE
0000bfcc g     F .text	0000009a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h1c8b4e1e237b1d09E
000228d4 g       .text	00000000 __exidx_start
0001d434 g     F .text	0000001c is_collector_node
0001750a g     F .text	00000036 _ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE
00015852 g     F .text	00000050 _ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E
0001bffe g     F .text	00000038 memset
00008164  w    F .text	00000002 WDT_IRQHandler
00019124 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17h096b8fea83a9dea7E
00019898 g     F .text	00000054 console_buffer
0001ae30 g     F .text	0000000a os_eventq_inited
00019ad0 g     F .text	0000000c sysinit_end
00016f1e g     F .text	00000052 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE
0001737a g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE
00008020 g       .text	00000000 __isr_vector_start
00008164  w    F .text	00000002 TIMER3_IRQHandler
00008164  w    F .text	00000002 MWU_IRQHandler
0001790c g     F .text	0000004a _ZN4core6result13unwrap_failed17h10957bfda7d5e5f2E
2000df88 g       .bss	00000000 __HeapBase
0001501e g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE
00014f6c g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E
00009384 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E
0000c146 g     F .text	000000ca _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h78119e4c51f6e604E
0000882e g     F .text	0000002e _ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E
0000a74a g     F .text	00000012 _ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E
00010df0 g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$4jump17h930b3c38e90d0056E
00014538 g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E
000148e0 g     F .text	00000096 _ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E
0001d9b4 g     F .text	00000026 flash_area_read
000126fc g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E
0001d8ca g     F .text	00000002 oc_register_ip4
00008faa g     F .text	00000046 _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E
0001d8cc g     F .text	00000002 oc_register_ip6
0000842c g     F .text	000001d4 SystemInit
00016df4 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE
0001dd34 g     F .text	00000028 hal_flash_init
0001add8 g     F .text	00000036 os_dev_close
0002286c g     O .text	00000048 sysflash_map_dflt
0001c71c g     F .text	0000000c hal_bsp_init
00008b80 g     F .text	00000032 _ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E
00016320 g     F .text	000005e0 _ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE
00011ec6 g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E
00008164  w    F .text	00000002 SWI0_EGU0_IRQHandler
00009b98 g     F .text	0000012c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE
00011d8c g     F .text	00000032 _ZN4core3ptr4read17h2038b0ecb0975c4fE
0001e110 g     F .text	00000004 __aeabi_memcpy4
0001614a g     F .text	000000c6 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE
0001a574 g     F .text	0000002c hal_spi_set_txrx_cb
0001e108 g     F .text	00000006 __aeabi_memclr8
000086d0 g     F .text	00000102 rust_begin_unwind
2000ddb8 g     O .bss	00000004 console_is_midline
0001e108 g     F .text	00000006 __aeabi_memclr4
0000a73a g     F .text	00000010 _ZN4core3ptr13drop_in_place17h22ac77b3595708cdE
000080f8 g       .text	00000000 __isr_vector_end
0001a06c g     F .text	0000013c hal_i2c_master_read
00015106 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E
0001c354 g     F .text	0000025c tfp_format
000172ba g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE
0001d228 g     F .text	00000068 sensor_read
00016b98 g     F .text	00000058 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E
0000906c g     F .text	00000010 _ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E
00014b10 g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E
00015f52 g     F .text	0000006a _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE
0001e110 g     F .text	00000004 __aeabi_memcpy
0001e110 g     F .text	00000004 __aeabi_memcpy8
00011394 g     F .text	00000014 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h3b61728407886f85E
2000df24 g     O .bss	00000020 st_up_osco
0001be58 g     F .text	0000005c os_arch_os_start
0001d20a g     F .text	0000001e sensor_init
000176f6 g     F .text	00000032 .hidden _ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE
000111fe g     F .text	00000112 _ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E
20000000 g       .bss	00000000 _ram_start
0001bc80 g     F .text	00000026 os_time_delay
00014b20 g     F .text	0000002c _ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE
0000cddc g     F .text	00000014 _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5e3b0b54b76961bcE
0001d8c8 g     F .text	00000002 oc_register_gatt
20004a6c g     O .bss	00000004 _ZN3log20MAX_LOG_LEVEL_FILTER17h20753a6176f34564E
0001ddb0 g     F .text	00000004 hal_bsp_hw_id_len
0001ac18 g     F .text	00000034 os_callout_wakeup_ticks
0001af8e g     F .text	00000026 os_mqueue_get
00019eac g     F .text	00000098 hal_i2c_init
000186e0 g     F .text	0000012e _ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E
00019124 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E
00008164  w    F .text	00000002 TIMER4_IRQHandler
000207dc g     O .text	00000050 _ZN8libchip87CHARBUF17h227c6d0d7e24574cE
0001194a g     F .text	00000092 _ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E
00016900 g     F .text	00000048 _ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E
0001728a g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E
0001b920 g     F .text	00000022 os_sched
00008c70 g     F .text	00000020 _ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE
00008164  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
000113a8 g     F .text	0000001a _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E
0001184e g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h5567184bcc425327E
00011f0c g     F .text	00000014 _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE
0000a7c8 g     F .text	00000010 _ZN4core3ptr13drop_in_place17hf625580841d3425eE
2000fe50 g       *ABS*	000001b0 __StackLimit
0001cf40 g     F .text	0000002e sensor_mgr_match_bytype
00011de0 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE
00014a26 g     F .text	00000032 _ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E
0000ad1c g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE
0001b45c g     F .text	00000014 os_mutex_init
00008f5e g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E
00009f2a g     F .text	00000044 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE
2000ddc0 g     O .bss	00000028 nrf52_hal_spi0
00008614 g     F .text	00000002 _init
00000020 g       *ABS*	00000000 _imghdr_size
00015196 g     F .text	00000026 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E
00008164  w    F .text	00000002 RTC1_IRQHandler
00011ff2 g     F .text	00000008 _ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E
00008164  w    F .text	00000002 PDM_IRQHandler
00008164  w    F .text	00000002 CCM_AAR_IRQHandler
00010ef2 g     F .text	000000a8 _ZN8libchip814Chip8$LT$T$GT$4tick17h6aca973c4370155bE
00008164  w    F .text	00000002 SWI3_EGU3_IRQHandler
000171fa g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE
0000ccec g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17h6eca3184bca64f06E
20000124 g       .data	00000000 __aeabi_unwind_cpp_pr0
00009214 g     F .text	0000001a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E
0000935a g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE
00008b78 g     F .text	00000008 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E
0000bce4 g     F .text	0000000a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17h21c3e4c6bd12cf0aE
000128e4 g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E
0001b400 g     F .text	00000028 os_msys_get_pkthdr
0001d6a8 g     F .text	0000002c temp_stub_get_raw_temperature
0001b898 g     F .text	0000003c os_sched_os_timer_exp
0001ad08 g     F .text	00000040 os_dev_create
0000a75c g     F .text	0000001c _ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E
00017484 g     F .text	0000001a _ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E
00008164  w    F .text	00000002 SWI4_EGU4_IRQHandler
0001b644 g     F .text	00000010 os_sanity_check_init
000179f6 g     F .text	0000022c _ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE
00008164  w    F .text	00000002 SAADC_IRQHandler
0001ac4c g     F .text	0000000c os_cputime_init
0001154a g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17h89e3c6c0231011ceE
0001af1c g     F .text	00000018 os_eventq_run
000123ac g     F .text	0000000c _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE
0001b428 g     F .text	00000034 os_msys_init
000169e0 g     F .text	0000000e .hidden _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E
00016d90 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E
0001bd06 g     F .text	0000000a timer_handler
00011752 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE
00017734 g     F .text	0000000e .hidden _ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E
000092ea g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E
00008bb2 g     F .text	00000042 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E
00014a58 g     F .text	00000018 _ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E
0001772c g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E
000179d4 g     F .text	00000022 _ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E
000080f8 g     F .text	0000005c Reset_Handler
0000cb88 g     F .text	0000002e .hidden _ZN3app5chip812handle_touch17habca32c74e5cefadE
000169a0 g     F .text	0000002c _ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE
00008020 g       .text	000000d8 __isr_vector
000193d4 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17heaf2297ac445d947E
00014bfa g     F .text	0000002a .hidden _ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE
0001c5b0 g     F .text	00000008 vfprintf
000145bc g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E
00011f38 g     F .text	0000000a _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E
00011f96 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E
0001b02e g     F .text	00000036 os_mbuf_get_pkthdr
00008164  w    F .text	00000002 PWM0_IRQHandler
0001725a g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E
00000000 g       .svc_table	00000000 SVC_Count
00018be2 g     F .text	00000298 _ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE
0000c954 g     F .text	00000234 _ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE
00016298 g     F .text	00000088 _ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE
00017968 g     F .text	0000002c _ZN4core9panicking5panic17h24d1dd0a9d540834E
0001bd36 g     F .text	0000000a os_arch_in_critical
00015072 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E
0001b6e4 g     F .text	00000010 os_sanity_init
00011490 g     F .text	000000ba _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E
000169cc g     F .text	0000000c _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE
00014c24 g     F .text	0000001e _ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE
000193d4 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E
00016cc6 g     F .text	00000018 .hidden _ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17hc283e26c72ff63bbE
00014ac2 g     F .text	0000001e _ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE
0000bd18 g     F .text	000001e0 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E
0001a7f8 g     F .text	0000004c __assert_func
00016fe8 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E
00015364 g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE
00008164  w    F .text	00000002 SWI1_EGU1_IRQHandler
00014c42 g     F .text	0000001e _ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE
0001b2ce g     F .text	0000001e os_memblock_put_from_cb
0001beb8 g     F .text	00000014 os_set_env
2000deac g     O .bss	00000004 g_os_last_ctx_sw_time
00008a86 g     F .text	0000000a _ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE
00019a68 g     F .text	00000048 console_printf
00012746 g     F .text	00000016 .hidden _ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E
0000ac6c g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE
00011e0c g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE
00012618 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E
0001719a g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E
0001becc g     F .text	00000006 os_arch_init_task_stack
0001dca0 g     F .text	00000010 mfg_open
000193d4 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$isize$GT$3fmt17hb33f6f1f0114a92bE
00016cde g     F .text	0000005e .hidden _ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE
0001d7fc g     F .text	00000030 oc_ri_mem_init
000096e6 g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE
0001c70c g     F .text	00000010 hal_bsp_flash_dev
0001d9dc g     F .text	00000070 flash_map_init
2000dec0 g     O .bss	00000004 g_os_time
00014a0e g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E
0000cdd2 g     F .text	0000000a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h430caac74862e039E
00011464 g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha72d6fa0f65ae98fE
00015b2c g     F .text	00000392 _ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E
0001bf6a g     F .text	0000001e os_default_irq_asm
0001a844 g     F .text	00000098 os_default_irq
200000e4 g     O .data	00000004 SystemCoreClock
0001a4ac g     F .text	00000068 hal_spi_disable
00016120 g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E
0001278c g     F .text	0000001c _ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E
00010e9c g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$4push17h7098654a82bc65c4E
0000903e g     F .text	0000002e _ZN6mynewt3sys7console6buffer17h6e460748855d110aE
0001d8ce g     F .text	00000002 oc_register_lora
00019240 g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u16$GT$3fmt17hc265973c39f711faE
0001b0b0 g     F .text	000000a8 os_mbuf_append
0001d57c g     F .text	0000005c temp_stub_create
0001dd5c g     F .text	00000054 hal_flash_read
00019848 g     F .text	00000048 console_flush
000173dc g     F .text	00000018 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE
00014a70 g     F .text	00000018 _ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E
0001aa98 g     F .text	0000001a os_start
0001cc90 g     F .text	00000060 hal_timer_init
00011602 g     F .text	00000086 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E
0001c688 g     F .text	00000010 rust_sysinit
00008164  w    F .text	00000002 I2S_IRQHandler
00019978 g     F .text	00000010 console_printint
00011406 g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h1794408f6a80b915E
0001b944 g     F .text	0000002c os_sched_resort
000226ac g     O .text	00000008 MemFile_methods
0001c65c g     F .text	00000018 fmemopen_w
000135dc g     F .text	00000126 _ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E
0001a428 g     F .text	00000038 hal_spi_config
0001e104  w    F .text	00000002 .hidden __aeabi_ldiv0
0001b314 g     F .text	00000010 os_mempool_module_init
0001b914 g     F .text	0000000c os_sched_next_task
000160c4 g     F .text	0000001a _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E
0000a792 g     F .text	00000010 _ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E
00019c66 g     F .text	00000034 hal_gpio_read
0001aaec g     F .text	0000001a os_callout_init
0001b3f0 g     F .text	00000010 os_msys_reset
0001c5b8 g     F .text	00000024 printf
00008156  w    F .text	00000002 HardFault_Handler
0001de08 g     F .text	00000000 .hidden __aeabi_uldivmod
0001bca8 g     F .text	00000038 os_gettimeofday
000199f4 g     F .text	0000001e console_write
0001734a g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E
000186aa g     F .text	00000008 _ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE
000097e2 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE
0001a978 g     F .text	00000070 os_init_idle_task
0001bd98 g     F .text	0000008c os_arch_os_init
0001563e g     F .text	000001b6 _ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE
00009322 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E
0001a9e8 g     F .text	000000b0 os_init
2000de98 g     O .bss	00000008 g_os_mempool_list
000097d8 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE
00008184 g     F .text	00000010 hal_debugger_connected
0000a7a2 g     F .text	0000001e _ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE
00011e22 g     F .text	0000009a _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E
000199f0 g     F .text	00000004 semihosting_console_init
0001dc3a g     F .text	0000001a mfg_seek_next_with_type
0001b528 g     F .text	000000e0 os_mutex_pend
00008164  w    F .text	00000002 COMP_LPCOMP_IRQHandler
00016afa g     F .text	00000026 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17h0b64f2ebc21519c0E
00019c44 g     F .text	00000022 hal_gpio_write
00008600 g     F .text	00000014 _start
00011f04 g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE
00011f6c g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE
0001dd00 g     F .text	00000014 __wrap_coap_receive
000171ca g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E
2000ddbc g     O .bss	00000001 sysinit_active
00016c8a g     F .text	00000012 _ZN4core3mem4swap17h206518364108b51fE
00012808 g     F .text	0000006e .hidden _ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E
0001473a g     F .text	0000002a _ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE
0001c62c g     F .text	0000002e memfile_write
0001e104  w    F .text	00000002 .hidden __aeabi_idiv0
00016c34 g     F .text	00000030 .hidden _ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h91461b58eecc5a2aE
0001623e g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE
0001a96c g     F .text	0000000c os_started
00015ebe g     F .text	0000000a .hidden _ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE
0000bcee g     F .text	0000002a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17h2b52e92623e4ee1eE
0001d7d4 g     F .text	00000028 oc_buffer_init
00014566 g     F .text	00000056 _ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE
00009306 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E
2000dea0 g     O .bss	0000000c g_os_sanity_check_mu
000090b0 g     F .text	0000002c .hidden _ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E
00016c12 g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E
0000d0e4 g     F .text	000000ea _ZN8libchip814Chip8$LT$T$GT$3new17h746d7acd3c3a5f1eE
00008164  w    F .text	00000002 UARTE0_UART0_IRQHandler
00010db8 g     F .text	00000024 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h8dd34ea84f1c7a05E
0001e108 g     F .text	00000006 __aeabi_memclr
0001e114 g     F .text	0000009a __aeabi_memset4
00012970 g     F .text	00000a7a _ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E
000186b2 g     F .text	00000008 _ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE
000173f4 g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E
0001275c g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E
0001bc40 g     F .text	00000040 os_time_advance
0001a460 g     F .text	0000004c hal_spi_enable
0001dc68 g     F .text	00000038 mfg_init
00014086 g     F .text	00000010 _ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E
2000de38 g     O .bss	00000050 g_os_main_task
0001e114 g     F .text	0000009a __aeabi_memset8
00019182 g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u16$GT$3fmt17hcd88e3dc15351fceE
00008b6c g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE
000228ec g       .ARM.exidx	00000000 __exidx_end
00008164  w    F .text	00000002 PWM1_IRQHandler
20000148 g     O .bss	00000018 _ZN22piet_embedded_graphics7display7DISPLAY17ha0ff10e671b220f2E
00017cf4 g     F .text	00000058 _ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE
00008afa g     F .text	0000004e _ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE
000196e8 g     F .text	000000e4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17hea84eef47d2fd641E
00019adc g     F .text	00000034 NVIC_Relocate
000113ea g     F .text	0000001c _ZN4core4iter6traits8iterator8Iterator7flatten17hdd08c3a3cf16397aE
00019ac4 g     F .text	0000000c sysinit_start
00016226 g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E
00016256 g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE
000226b8 g     O .text	00000018 nrf52k_flash_dev
0001ccf0 g     F .text	000000f8 hal_timer_config
000149f6 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E
00014810 g     F .text	0000004c _ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E
0001c618 g     F .text	00000014 vprintf
00008f90 g     F .text	0000001a _ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E
00019890 g     F .text	00000008 disable_buffer
00017010 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E
2000de88 g     O .bss	00000004 g_os_started
0001795c g     F .text	00000008 _ZN4core5panic9PanicInfo7payload17h9302c8d957737573E
000149b6 g     F .text	00000020 _ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E
20000144 g       .bssnz	00000000 __bssnz_end__
0001ad74 g     F .text	00000020 os_dev_lookup
00015558 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E
00009208 g     F .text	0000000c _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E
0001a7d4 g     F .text	00000010 hal_watchdog_enable
2000dec4 g     O .bss	0000000c g_hal_os_tick
00016f82 g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E
0001bd30 g     F .text	00000006 os_arch_restore_sr
0001ab44 g     F .text	00000078 os_callout_reset
000097ec g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE
0001dc54 g     F .text	0000000a mfg_read_tlv_flash_area
000127a8 g     F .text	00000024 _ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E
0000815a  w    F .text	00000002 BusFault_Handler
00016210 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E
0001af7c g     F .text	00000012 os_mqueue_init
000119dc g     F .text	00000052 _ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE
0001722a g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E
0001521e g     F .text	00000052 _ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E
0001d61e g     F .text	0000000e temp_stub_default_cfg
000127dc g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E
00008020 g       .imghdr	00000000 __text
0001ab08 g     F .text	0000003c os_callout_stop
000151bc g     F .text	00000062 _ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E
0000c13e g     F .text	00000008 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17h886985941255a300E
000081c0 g     F .text	0000004c hal_system_clock_start
0001b078 g     F .text	00000024 os_mbuf_free_chain
000090dc g     F .text	0000000a .hidden _ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E
0001c698 g     F .text	00000030 mem_init_mbuf_pool
00012800 g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E
00008a90 g     F .text	0000000c _ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E
00016f94 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E
00019f44 g     F .text	00000128 hal_i2c_master_write
000155b8 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E
00008164  w    F .text	00000002 QDEC_IRQHandler
00010e00 g     F .text	00000076 _ZN8libchip814Chip8$LT$T$GT$4load17h2a4cfd313d02c69aE
00008164  w    F .text	00000002 SWI5_EGU5_IRQHandler
00016ad8 g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17hd4e34d1323470418E
0000d1ce g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$3pop17h503862bdc0785684E
000111de g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$8shutdown17h09e18e9d3e93ad4fE
00012952 g     F .text	0000001e _ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E
00011be0 g     F .text	0000003a _ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E
0001155e g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17hbdce026690b075d6E
00015fbc g     F .text	0000001a _ZN4core5slice14from_raw_parts17h1425df913744b73aE
0001af74 g     F .text	00000008 os_eventq_dflt_get
0001d144 g     F .text	00000018 sensor_lock
0001159a g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE
000088c6 g     F .text	00000016 _ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17he532d8d46bba5cdfE
00019a1c g     F .text	0000004c console_pkg_init
20000104 g     O .data	00000004 sysinit_panic_cb
0001b09c g     F .text	00000014 os_mbuf_len
0001b064 g     F .text	00000014 os_mbuf_free
000157f4 g     F .text	0000005e _ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E
00014b4c g     F .text	000000ae _ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E
00011df6 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE
000123b8 g     F .text	0000000a _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE
00008194 g     F .text	0000002c hal_system_reset
00019a12 g     F .text	00000008 console_blocking_mode
00015632 g     F .text	0000000c _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E
0000a7d8 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE
00009cc4 g     F .text	00000266 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE
000115ae g     F .text	0000000c _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E
0001ce8c g     F .text	00000010 nrf52_periph_create
00015f10 g     F .text	00000042 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E
0001b678 g     F .text	0000006c os_sanity_run
000169ee g     F .text	0000003a .hidden _ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE
00016c7c g     F .text	0000000e .hidden _ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h32b550ec8df70192E
0000841c g     F .text	00000010 SystemCoreClockUpdate
00014602 g     F .text	0000007e .hidden _ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE
00014874 g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E
0001749e g     F .text	0000001a _ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE
00008896 g     F .text	00000030 _ZN4core3any6TypeId2of17haae5124a9f275cb8E
0001b288 g     F .text	00000014 os_mempool_init
000226b4 g     O .text	00000004 stdout
0000adcc g     F .text	0000000e .hidden _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE
0000cd90 g     F .text	00000042 _ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E
0001ad48 g     F .text	0000002c os_dev_initialize_all
00008c90 g     F .text	000000b4 _ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E
0000d278 g     F .text	00003b40 _ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E
00014996 g     F .text	00000020 _ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E
00016fbe g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE
0001a8dc g     F .text	00000078 os_idle_task
00008d44 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h1982c2483e0a2028E
00017100 g     F .text	0000000a .hidden _ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE
0000a71c g     F .text	0000001e _ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE
000173c8 g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E
00009ae2 g     F .text	000000b6 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE
000183a8 g     F .text	00000302 _ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE
0001d974 g     F .text	00000040 flash_area_open
000160de g     F .text	00000028 _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E
00015f06 g     F .text	0000000a _ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E
000148bc g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE
00008164 g     F .text	00000002 Default_Handler
0001795a g     F .text	00000002 _ZN4core5panic8Location6caller17h4b6b61f9498709a3E
0000922e g     F .text	000000bc _ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E
0001b360 g     F .text	0000004c os_msys_register
00016106 g     F .text	0000001a _ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE
000090e6 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E
2000d9b0 g     O .bss	00000004 g_os_sanity_check_list
0000abd0 g     F .text	00000066 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E
00011f42 g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE
00011b1c g     F .text	0000001c _ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E
0001a514 g     F .text	00000060 hal_spi_init
00008164  w    F .text	00000002 RNG_IRQHandler
0001d080 g     F .text	00000010 sensor_mgr_unlock
2000df80 g     O .bss	00000004 flash_map_entries
000190c6 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17hb1f1dec5462292d8E
0001710a g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E
00014f7e g     F .text	00000050 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE
0001d8d0 g     F .text	00000002 oc_register_serial
00008178 g     F .text	0000000c hal_system_init
000154b8 g     F .text	00000010 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E
0000a804 g     F .text	00000396 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E
000145e6 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE
00014c60 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E
00008164  w    F .text	00000002 GPIOTE_IRQHandler
000120bc g     F .text	000000aa _ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E
00008164  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
0001dc28 g     F .text	00000012 mfg_seek_next
00015270 g     F .text	0000004a _ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E
00015528 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E
000123c2 g     F .text	00000008 _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE
00014c8a g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE
2000011c g     O .data	00000008 g_os_sleep_list
00018118 g     F .text	0000025c _ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E
0000cf56 g     F .text	0000013c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E
00017540 g     F .text	00000058 _ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE
0001aff2 g     F .text	0000000a os_mbuf_pool_init
2000de90 g     O .bss	00000008 g_callout_list
0001b784 g     F .text	0000000c os_sched_set_current_task
00010ddc g     F .text	00000014 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hd6b4984bbe637b42E
0001abbc g     F .text	0000005c os_callout_tick
00017598 g     F .text	00000042 _ZN4core3ptr4read17h38cf3848f1a0f2ccE
00009102 g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE
00012024 g     F .text	0000007c _ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E
000173b2 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E
0000cd68 g     F .text	00000028 _ZN4core6option15Option$LT$T$GT$6as_mut17h8929fdf00293b903E
0000cbb6 g     F .text	0000009a _ZN4core6option15Option$LT$T$GT$3map17h652d7b279505b210E
0001a75c g     F .text	00000078 hal_watchdog_init
2000deb4 g     O .bss	00000001 g_task_id
000194aa g     F .text	0000007a _ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E
0000a7c0 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17hef1277471241eea2E
0000adda g     F .text	00000024 .hidden _ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h44bec417aa74de39E
0001ad94 g     F .text	00000044 os_dev_open
2000deb0 g     O .bss	00000004 g_current_task
00017728 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE
20000148 g       .bss	00000000 __bss_start__
00011348 g     F .text	0000004c _ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h3e3a45a546031266E
0001707c g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E
00008b60 g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE
0001a218 g     F .text	00000018 nrf52_spi0_irq_handler
0001d13c g     F .text	00000008 sensor_pkg_init
00016c9c g     F .text	0000002a _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h7f385561cf81b0ffE
0001d750 g     F .text	00000028 temp_stub_config
0001afb4 g     F .text	0000003e os_mqueue_put
000196e8 g     F .text	000000e4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE
0001a5a0 g     F .text	000000ac hal_spi_txrx
00008164  w    F .text	00000002 RTC2_IRQHandler
0001b778 g     F .text	0000000c os_sched_get_current_task
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
00012634 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E
0001da4c g     F .text	00000002 modlog_init
00014f08 g     F .text	00000052 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E
00015ec8 g     F .text	0000003e _ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE
0001a64c g     F .text	000000e0 hal_spi_txrx_noblock
000178d4 g     F .text	00000038 _ZN4core6option13expect_failed17had6579abaad447b4E
000186ba g     F .text	00000026 _ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE
0000907c g     F .text	0000000a _ZN6mynewt3sys7console5flush17h78b2f38352f0d691E
00008164  w    F .text	00000002 TEMP_IRQHandler
00008ece g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE
0001b748 g     F .text	00000030 os_sched_ctx_sw_hook
0001d1dc g     F .text	0000002e sensor_mgr_register
0001790c g     F .text	0000004a _ZN4core6option18expect_none_failed17h54d938081af97677E
00017f58 g     F .text	000001c0 _ZN4core3fmt5write17hd95ac78ed22a2252E
0000d092 g     F .text	00000008 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcdf096192109e52aE
00008154  w    F .text	00000002 NMI_Handler
0001454e g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE
0000917e g     F .text	0000008a _ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE
00017476 g     F .text	0000000e .hidden _ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E
00008d4c g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E
00011dbe g     F .text	0000000c _ZN4core3ptr5write17h4a80332de2cee3d3E
00016b20 g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h84bf0bac3f755209E
0001affc g     F .text	00000032 os_mbuf_get
2000deb8 g     O .bss	00000008 g_os_task_list
00008928 g     F .text	0000014c _ZN6mynewt4Strn8validate17h1102378208cc75cdE
00017c22 g     F .text	000000d2 _ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E
0001c5dc g     F .text	0000003a vsnprintf
00013424 g     F .text	00000090 _ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E
0000cdf0 g     F .text	00000060 _ZN22piet_embedded_graphics7display18set_display_pixels17hd0f20e3b4184e9a6E
0001b470 g     F .text	000000b8 os_mutex_release
000123ca g     F .text	00000056 _ZN3log6logger17hf609e7cc1c031552E
0001217e g     F .text	0000004e _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E
0001d090 g     F .text	0000000c sensor_mgr_evq_get
00016948 g     F .text	00000058 _ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E
00011f20 g     F .text	00000018 _ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E
0001509a g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE
2000de8c g     O .bss	00000004 g_os_idle_ctr
00019be0 g     F .text	0000002c hal_gpio_init_in
00011ebc g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE
0000990e g     F .text	00000036 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E
00008164  w    F .text	00000002 TIMER1_IRQHandler
0001ce9c g     F .text	00000002 sensor_dev_create
00011a2e g     F .text	0000008e _ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE
00008164  w    F .text	00000002 TIMER0_IRQHandler
000088dc g     F .text	00000010 _ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE
00019c0c g     F .text	00000038 hal_gpio_init_out
00008d6e g     F .text	00000160 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE
00011b50 g     F .text	00000012 _ZN4core3mem4swap17hc4afbec7b5ffb125E
000173aa g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E
000160ba g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E
0001142a g     F .text	0000000e _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha7bddc00a7b74e11E
00016a60 g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E
00009402 g     F .text	0000003e .hidden _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE
200000d8 g       .data	00000000 __data_start__
0001bc34 g     F .text	0000000c os_time_get
0001795c g     F .text	00000008 _ZN4core5panic8Location4file17h61e77cb122865fdbE
0000cc50 g     F .text	0000009c _ZN4core6option15Option$LT$T$GT$3map17hc87f57a0a2ce024aE
0000a678 g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E
0001b2ec g     F .text	00000026 os_memblock_put
000134b4 g     F .text	00000128 _ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE
0001b790 g     F .text	00000090 os_sched_sleep
00011310 g     F .text	00000038 _ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h2c4566debb9a5deaE
00011efa g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE
0000d0b4 g     F .text	00000014 _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h958b1d5c274bc415E
0001d064 g     F .text	0000001c sensor_mgr_lock
0001de38 g     F .text	000002cc .hidden __udivmoddi4
000115ba g     F .text	00000008 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E
0001ca14 g     F .text	000000a0 os_tick_init
000147be g     F .text	00000052 _ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E
00017956 g     F .text	00000004 _ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E
00008164  w    F .text	00000002 RTC0_IRQHandler
00008ff0 g     F .text	00000044 _ZN6mynewt3sys7console5print17hc13a6743274d87fcE
0001b8d4 g     F .text	00000040 os_sched_wakeup_ticks
0000933e g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE
0001cde8 g     F .text	00000030 hal_timer_read
20000144 g       .data	00000000 __data_end__
00019d14 g     F .text	00000028 hal_gpio_irq_enable
0001d82c g     F .text	0000000c oc_evq_set
0001d3ac g     F .text	00000018 is_sensor_node
000190c6 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE
0001d8a4 g     F .text	00000024 oc_init
000192fe g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u32$GT$3fmt17h54b904d9d5d295daE
000192fe g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h85ec06f2c95e1ecaE
0000971c g     F .text	000000bc _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE
00018896 g     F .text	0000034c _ZN4core3str16slice_error_fail17h232f9181d55b3da9E
0001716a g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E
2000df48 g     O .bss	00000018 sensor_base_ts
000195f4 g     F .text	000000f4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E
00016e58 g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E
000228ec g       .ARM.exidx	00000000 __etext
00011572 g     F .text	00000012 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h179b2f35245cc0dcE
0000bef8 g     F .text	000000d4 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h33ad85da805ec1e8E
00019182 g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E
00019ab0 g     F .text	0000000c console_get_ticks
00008164  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
00009034 g     F .text	0000000a _ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E
20000108 g     O .data	00000004 hal_twi_i2c1
0000c066 g     F .text	00000014 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hb385dfaf23157db8E
00014d7c g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E
0001bab4 g     F .text	000000d8 os_task_init
0001626a g     F .text	0000000a _ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E
00008f68 g     F .text	00000028 _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E
00011b02 g     F .text	0000001a _ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE
00011418 g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h6a385a1eb638dc34E
00011eea g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E
000174b8 g     F .text	00000042 _ZN4core3ptr4read17h27a035d1812d8297E
0001731a g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E
0001b980 g     F .text	00000064 os_sem_release
0001e114 g     F .text	0000009a __aeabi_memset
0001b158 g     F .text	000000b8 os_mbuf_dup
0001bf18 g     F .text	00000046 PendSV_Handler
000127ec g     F .text	00000014 _ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E
0001bed2 g     F .text	00000046 SVC_Handler
00008826 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17he6c5bffce3c304d4E
0001bd24 g     F .text	0000000c os_arch_save_sr
000149d6 g     F .text	00000020 _ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E
00008164  w    F .text	00000002 PWM2_IRQHandler
0000c07a g     F .text	000000c4 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hdb648e920abc572eE
0000815c  w    F .text	00000002 UsageFault_Handler
0001cc80 g     F .text	00000010 nrf52_timer0_irq_handler
0001bd40 g     F .text	00000040 os_arch_task_stack_init
2000df88 g       .bss	00000000 __bss_end__
00016bf0 g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E
000111ee g     F .text	00000010 _ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h8b365b2b37e7ae5bE
0001b29c g     F .text	00000032 os_memblock_get
00011438 g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h84f26bbc979819d7E
00010e76 g     F .text	00000026 _ZN8libchip814Chip8$LT$T$GT$4next17h59db21f4d7eca91dE
2000df84 g     O .bss	00000004 flash_map
00008164  w    F .text	00000002 RADIO_IRQHandler
00011c1a g     F .text	00000056 _ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE
00008164  w    F .text	00000002 TIMER2_IRQHandler
0001168e g     F .text	000000c4 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E
0001a7e4 g     F .text	00000014 hal_watchdog_tickle
0001111e g     F .text	000000c0 _ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E
0000a70c g     F .text	00000010 _ZN4core3ptr13drop_in_place17h0697ea54608a328fE
000154c8 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE
0001aea2 g     F .text	0000007a os_eventq_get
0001dde8 g     F .text	00000020 sprintf
0000d09a g     F .text	0000001a _ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4e486716e9c6f20bE
0001bce0 g     F .text	00000026 os_time_ms_to_ticks
000088ec g     F .text	0000003c _ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E
000173ae g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E
0000ac36 g     F .text	00000036 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE
2000d9e8 g     O .bss	00000004 os_flags
0001d8d4 g     F .text	00000028 oc_rep_init
0001bfe4 g     F .text	0000001a memcpy
0001c6c8 g     F .text	00000044 sysinit_app
00015ff0 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE
00012166 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E
0001713a g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E
00019524 g     F .text	000000d0 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E
00014096 g     F .text	0000036c _ZN6mynewt3hal3SPI4init17h97467ea724680fb5E
000126e6 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE
000199b4 g     F .text	0000003c console_out_nolock
2000df60 g     O .bss	00000020 oc_transports
00019c9c g     F .text	00000078 hal_gpio_irq_init
00014ae0 g     F .text	00000020 _ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE
0001c052 g     F .text	00000010 strlen
0001b9e4 g     F .text	000000b8 os_sem_pend
0001176e g     F .text	00000016 _ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE
0001c97c g     F .text	00000098 os_tick_idle
0001272c g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E
00016ab6 g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE
00008164  w    F .text	00000002 SWI2_EGU2_IRQHandler
00000000 g       .svc_table	00000000 SVC_Table
00012876 g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE
00015fd6 g     F .text	0000001a _ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E
2000fe50 g       *ABS*	00000000 __HeapLimit
0001aab4 g     F .text	00000038 os_pkg_init
20000144 g       .bssnz	00000000 __bssnz_start__
000093ae g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17had883e363867a05eE
00011abc g     F .text	00000012 _ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E
0000a6cc g     F .text	0000001a .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E
000152ba g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE
00008164  w    F .text	00000002 ECB_IRQHandler
00014402 g     F .text	00000004 _ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E
00016c64 g     F .text	00000018 .hidden _ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E
00008158  w    F .text	00000002 MemoryManagement_Handler
000192fe g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$isize$GT$3fmt17hc11e05ad6528dc14E
00014680 g     F .text	000000ba _ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE
0001ae3a g     F .text	00000068 os_eventq_put
20010000 g       .bss	00000000 __StackTop
00015048 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E
00009944 g     F .text	0000003c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E
00011938 g     F .text	00000012 _ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE
00014f5a g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE
0001dc5e g     F .text	0000000a mfg_read_tlv_mmr_ref
00008b48 g     F .text	00000018 _ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E
0001d46c g     F .text	000000c0 sensor_network_init
000192fe g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE
00016d3c g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE
00008bf4 g     F .text	0000006a _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE
00012774 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE



Disassembly of section .text:

00008020 <__isr_vector>:
    8020:	20010000 	.word	0x20010000
    8024:	000080f9 	.word	0x000080f9
    8028:	00008155 	.word	0x00008155
    802c:	00008157 	.word	0x00008157
	...
    804c:	0001bed3 	.word	0x0001bed3
	...
    8058:	0001bf19 	.word	0x0001bf19
    805c:	0001bf5f 	.word	0x0001bf5f
    8060:	00008165 	.word	0x00008165
    8064:	00008165 	.word	0x00008165
    8068:	00008165 	.word	0x00008165
    806c:	00008165 	.word	0x00008165
    8070:	00008165 	.word	0x00008165
    8074:	00008165 	.word	0x00008165
    8078:	00008165 	.word	0x00008165
    807c:	00008165 	.word	0x00008165
    8080:	00008165 	.word	0x00008165
    8084:	00008165 	.word	0x00008165
    8088:	00008165 	.word	0x00008165
    808c:	00008165 	.word	0x00008165
    8090:	00008165 	.word	0x00008165
    8094:	00008165 	.word	0x00008165
    8098:	00008165 	.word	0x00008165
    809c:	00008165 	.word	0x00008165
    80a0:	00008165 	.word	0x00008165
    80a4:	00008165 	.word	0x00008165
    80a8:	00008165 	.word	0x00008165
    80ac:	00008165 	.word	0x00008165
    80b0:	00008165 	.word	0x00008165
    80b4:	00008165 	.word	0x00008165
    80b8:	00008165 	.word	0x00008165
    80bc:	00008165 	.word	0x00008165
    80c0:	00008165 	.word	0x00008165
    80c4:	00008165 	.word	0x00008165
    80c8:	00008165 	.word	0x00008165
    80cc:	00008165 	.word	0x00008165
    80d0:	00008165 	.word	0x00008165
    80d4:	00008165 	.word	0x00008165
	...
    80e0:	00008165 	.word	0x00008165
    80e4:	00008165 	.word	0x00008165
    80e8:	00008165 	.word	0x00008165
    80ec:	00008165 	.word	0x00008165
    80f0:	00008165 	.word	0x00008165
    80f4:	00008165 	.word	0x00008165

000080f8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    80f8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    80fc:	4a0c      	ldr	r2, [pc, #48]	; (8130 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    80fe:	4b0d      	ldr	r3, [pc, #52]	; (8134 <.bss_zero_loop+0x34>)

00008100 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    8100:	429a      	cmp	r2, r3
    itt     lt
    8102:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    8104:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    8108:	e7fa      	blt.n	8100 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
    810a:	490b      	ldr	r1, [pc, #44]	; (8138 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    810c:	4a0b      	ldr	r2, [pc, #44]	; (813c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    810e:	4b0c      	ldr	r3, [pc, #48]	; (8140 <.bss_zero_loop+0x40>)

    subs    r3, r2
    8110:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    8112:	dd03      	ble.n	811c <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    8114:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    8116:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    8118:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    811a:	dcfb      	bgt.n	8114 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    811c:	4809      	ldr	r0, [pc, #36]	; (8144 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    811e:	490a      	ldr	r1, [pc, #40]	; (8148 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    8120:	f000 f822 	bl	8168 <_sbrkInit>

    LDR     R0, =SystemInit
    8124:	4809      	ldr	r0, [pc, #36]	; (814c <.bss_zero_loop+0x4c>)
    BLX     R0
    8126:	4780      	blx	r0

    BL      hal_system_init
    8128:	f000 f826 	bl	8178 <hal_system_init>

    LDR     R0, =_start
    812c:	4808      	ldr	r0, [pc, #32]	; (8150 <.bss_zero_loop+0x50>)
    BX      R0
    812e:	4700      	bx	r0
    ldr     r2, =__bss_start__
    8130:	20000148 	.word	0x20000148
    ldr     r3, =__bss_end__
    8134:	2000df88 	.word	0x2000df88
    ldr    r1, =__etext
    8138:	000228ec 	.word	0x000228ec
    ldr    r2, =__data_start__
    813c:	200000d8 	.word	0x200000d8
    ldr    r3, =__data_end__
    8140:	20000144 	.word	0x20000144
    LDR     R0, =__HeapBase
    8144:	2000df88 	.word	0x2000df88
    LDR     R1, =__HeapLimit
    8148:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
    814c:	0000842d 	.word	0x0000842d
    LDR     R0, =_start
    8150:	00008601 	.word	0x00008601

00008154 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    8154:	e7fe      	b.n	8154 <NMI_Handler>

00008156 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    8156:	e7fe      	b.n	8156 <HardFault_Handler>

00008158 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    8158:	e7fe      	b.n	8158 <MemoryManagement_Handler>

0000815a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    815a:	e7fe      	b.n	815a <BusFault_Handler>

0000815c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    815c:	e7fe      	b.n	815c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    815e:	e7fe      	b.n	815e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    8160:	e7fe      	b.n	8160 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    8162:	e7fe      	b.n	8162 <UsageFault_Handler+0x6>

00008164 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    8164:	e7fe      	b.n	8164 <Default_Handler>
    8166:	bf00      	nop

00008168 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
    8168:	4b02      	ldr	r3, [pc, #8]	; (8174 <_sbrkInit+0xc>)
    816a:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
    816c:	6059      	str	r1, [r3, #4]
    brk = base;
    816e:	6098      	str	r0, [r3, #8]
}
    8170:	4770      	bx	lr
    8172:	bf00      	nop
    8174:	200000d8 	.word	0x200000d8

00008178 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
    8178:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    817c:	2201      	movs	r2, #1
    817e:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
    8182:	4770      	bx	lr

00008184 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    8184:	4b02      	ldr	r3, [pc, #8]	; (8190 <hal_debugger_connected+0xc>)
    8186:	6818      	ldr	r0, [r3, #0]
}
    8188:	f000 0001 	and.w	r0, r0, #1
    818c:	4770      	bx	lr
    818e:	bf00      	nop
    8190:	e000edf0 	.word	0xe000edf0

00008194 <hal_system_reset>:
{
    8194:	b508      	push	{r3, lr}
        if (hal_debugger_connected()) {
    8196:	f7ff fff5 	bl	8184 <hal_debugger_connected>
    819a:	b100      	cbz	r0, 819e <hal_system_reset+0xa>
            asm("bkpt");
    819c:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    819e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    81a2:	4905      	ldr	r1, [pc, #20]	; (81b8 <hal_system_reset+0x24>)
    81a4:	68ca      	ldr	r2, [r1, #12]
    81a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    81aa:	4b04      	ldr	r3, [pc, #16]	; (81bc <hal_system_reset+0x28>)
    81ac:	4313      	orrs	r3, r2
    81ae:	60cb      	str	r3, [r1, #12]
    81b0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    81b4:	bf00      	nop
    81b6:	e7fd      	b.n	81b4 <hal_system_reset+0x20>
    81b8:	e000ed00 	.word	0xe000ed00
    81bc:	05fa0004 	.word	0x05fa0004

000081c0 <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
    81c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81c4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81c8:	4b0f      	ldr	r3, [pc, #60]	; (8208 <hal_system_clock_start+0x48>)
    81ca:	4013      	ands	r3, r2
    81cc:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    81d0:	d018      	beq.n	8204 <hal_system_clock_start+0x44>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    81d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81d6:	2201      	movs	r2, #1
    81d8:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    81da:	2100      	movs	r1, #0
    81dc:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
    81e0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
    81e4:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
    81e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81ea:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    81ee:	2b00      	cmp	r3, #0
    81f0:	d0f9      	beq.n	81e6 <hal_system_clock_start+0x26>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
    81f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81f6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81fa:	4b03      	ldr	r3, [pc, #12]	; (8208 <hal_system_clock_start+0x48>)
    81fc:	4013      	ands	r3, r2
    81fe:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    8202:	d1f0      	bne.n	81e6 <hal_system_clock_start+0x26>
                }
            }
        }
    }
#endif
}
    8204:	4770      	bx	lr
    8206:	bf00      	nop
    8208:	00010003 	.word	0x00010003

0000820c <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    820c:	4b0b      	ldr	r3, [pc, #44]	; (823c <errata_16+0x30>)
    820e:	781b      	ldrb	r3, [r3, #0]
    8210:	2b06      	cmp	r3, #6
    8212:	d001      	beq.n	8218 <errata_16+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8214:	2000      	movs	r0, #0
    8216:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8218:	4b09      	ldr	r3, [pc, #36]	; (8240 <errata_16+0x34>)
    821a:	681b      	ldr	r3, [r3, #0]
    821c:	f013 0f0f 	tst.w	r3, #15
    8220:	d107      	bne.n	8232 <errata_16+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8222:	4b08      	ldr	r3, [pc, #32]	; (8244 <errata_16+0x38>)
    8224:	681b      	ldr	r3, [r3, #0]
    8226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    822a:	2b30      	cmp	r3, #48	; 0x30
    822c:	d003      	beq.n	8236 <errata_16+0x2a>
    return false;
    822e:	2000      	movs	r0, #0
    8230:	4770      	bx	lr
    8232:	2000      	movs	r0, #0
    8234:	4770      	bx	lr
            return true;
    8236:	2001      	movs	r0, #1
}
    8238:	4770      	bx	lr
    823a:	bf00      	nop
    823c:	f0000fe0 	.word	0xf0000fe0
    8240:	f0000fe4 	.word	0xf0000fe4
    8244:	f0000fe8 	.word	0xf0000fe8

00008248 <errata_31>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8248:	4b0f      	ldr	r3, [pc, #60]	; (8288 <errata_31+0x40>)
    824a:	781b      	ldrb	r3, [r3, #0]
    824c:	2b06      	cmp	r3, #6
    824e:	d001      	beq.n	8254 <errata_31+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    8250:	2000      	movs	r0, #0
    8252:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8254:	4b0d      	ldr	r3, [pc, #52]	; (828c <errata_31+0x44>)
    8256:	681b      	ldr	r3, [r3, #0]
    8258:	f013 0f0f 	tst.w	r3, #15
    825c:	d10b      	bne.n	8276 <errata_31+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    825e:	4b0c      	ldr	r3, [pc, #48]	; (8290 <errata_31+0x48>)
    8260:	681b      	ldr	r3, [r3, #0]
    8262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8266:	2b30      	cmp	r3, #48	; 0x30
    8268:	d007      	beq.n	827a <errata_31+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    826a:	2b40      	cmp	r3, #64	; 0x40
    826c:	d007      	beq.n	827e <errata_31+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    826e:	2b50      	cmp	r3, #80	; 0x50
    8270:	d007      	beq.n	8282 <errata_31+0x3a>
    return false;
    8272:	2000      	movs	r0, #0
    8274:	4770      	bx	lr
    8276:	2000      	movs	r0, #0
    8278:	4770      	bx	lr
            return true;
    827a:	2001      	movs	r0, #1
    827c:	4770      	bx	lr
            return true;
    827e:	2001      	movs	r0, #1
    8280:	4770      	bx	lr
            return true;
    8282:	2001      	movs	r0, #1
}
    8284:	4770      	bx	lr
    8286:	bf00      	nop
    8288:	f0000fe0 	.word	0xf0000fe0
    828c:	f0000fe4 	.word	0xf0000fe4
    8290:	f0000fe8 	.word	0xf0000fe8

00008294 <errata_32>:

static bool errata_32(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8294:	4b0b      	ldr	r3, [pc, #44]	; (82c4 <errata_32+0x30>)
    8296:	781b      	ldrb	r3, [r3, #0]
    8298:	2b06      	cmp	r3, #6
    829a:	d001      	beq.n	82a0 <errata_32+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    829c:	2000      	movs	r0, #0
    829e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82a0:	4b09      	ldr	r3, [pc, #36]	; (82c8 <errata_32+0x34>)
    82a2:	681b      	ldr	r3, [r3, #0]
    82a4:	f013 0f0f 	tst.w	r3, #15
    82a8:	d107      	bne.n	82ba <errata_32+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82aa:	4b08      	ldr	r3, [pc, #32]	; (82cc <errata_32+0x38>)
    82ac:	681b      	ldr	r3, [r3, #0]
    82ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82b2:	2b30      	cmp	r3, #48	; 0x30
    82b4:	d003      	beq.n	82be <errata_32+0x2a>
    return false;
    82b6:	2000      	movs	r0, #0
    82b8:	4770      	bx	lr
    82ba:	2000      	movs	r0, #0
    82bc:	4770      	bx	lr
            return true;
    82be:	2001      	movs	r0, #1
}
    82c0:	4770      	bx	lr
    82c2:	bf00      	nop
    82c4:	f0000fe0 	.word	0xf0000fe0
    82c8:	f0000fe4 	.word	0xf0000fe4
    82cc:	f0000fe8 	.word	0xf0000fe8

000082d0 <errata_36>:

static bool errata_36(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82d0:	4b0f      	ldr	r3, [pc, #60]	; (8310 <errata_36+0x40>)
    82d2:	781b      	ldrb	r3, [r3, #0]
    82d4:	2b06      	cmp	r3, #6
    82d6:	d001      	beq.n	82dc <errata_36+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    82d8:	2000      	movs	r0, #0
    82da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82dc:	4b0d      	ldr	r3, [pc, #52]	; (8314 <errata_36+0x44>)
    82de:	681b      	ldr	r3, [r3, #0]
    82e0:	f013 0f0f 	tst.w	r3, #15
    82e4:	d10b      	bne.n	82fe <errata_36+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82e6:	4b0c      	ldr	r3, [pc, #48]	; (8318 <errata_36+0x48>)
    82e8:	681b      	ldr	r3, [r3, #0]
    82ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82ee:	2b30      	cmp	r3, #48	; 0x30
    82f0:	d007      	beq.n	8302 <errata_36+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    82f2:	2b40      	cmp	r3, #64	; 0x40
    82f4:	d007      	beq.n	8306 <errata_36+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    82f6:	2b50      	cmp	r3, #80	; 0x50
    82f8:	d007      	beq.n	830a <errata_36+0x3a>
    return false;
    82fa:	2000      	movs	r0, #0
    82fc:	4770      	bx	lr
    82fe:	2000      	movs	r0, #0
    8300:	4770      	bx	lr
            return true;
    8302:	2001      	movs	r0, #1
    8304:	4770      	bx	lr
            return true;
    8306:	2001      	movs	r0, #1
    8308:	4770      	bx	lr
            return true;
    830a:	2001      	movs	r0, #1
}
    830c:	4770      	bx	lr
    830e:	bf00      	nop
    8310:	f0000fe0 	.word	0xf0000fe0
    8314:	f0000fe4 	.word	0xf0000fe4
    8318:	f0000fe8 	.word	0xf0000fe8

0000831c <errata_37>:

static bool errata_37(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    831c:	4b0b      	ldr	r3, [pc, #44]	; (834c <errata_37+0x30>)
    831e:	781b      	ldrb	r3, [r3, #0]
    8320:	2b06      	cmp	r3, #6
    8322:	d001      	beq.n	8328 <errata_37+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8324:	2000      	movs	r0, #0
    8326:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8328:	4b09      	ldr	r3, [pc, #36]	; (8350 <errata_37+0x34>)
    832a:	681b      	ldr	r3, [r3, #0]
    832c:	f013 0f0f 	tst.w	r3, #15
    8330:	d107      	bne.n	8342 <errata_37+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8332:	4b08      	ldr	r3, [pc, #32]	; (8354 <errata_37+0x38>)
    8334:	681b      	ldr	r3, [r3, #0]
    8336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    833a:	2b30      	cmp	r3, #48	; 0x30
    833c:	d003      	beq.n	8346 <errata_37+0x2a>
    return false;
    833e:	2000      	movs	r0, #0
    8340:	4770      	bx	lr
    8342:	2000      	movs	r0, #0
    8344:	4770      	bx	lr
            return true;
    8346:	2001      	movs	r0, #1
}
    8348:	4770      	bx	lr
    834a:	bf00      	nop
    834c:	f0000fe0 	.word	0xf0000fe0
    8350:	f0000fe4 	.word	0xf0000fe4
    8354:	f0000fe8 	.word	0xf0000fe8

00008358 <errata_57>:

static bool errata_57(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8358:	4b0b      	ldr	r3, [pc, #44]	; (8388 <errata_57+0x30>)
    835a:	781b      	ldrb	r3, [r3, #0]
    835c:	2b06      	cmp	r3, #6
    835e:	d001      	beq.n	8364 <errata_57+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8360:	2000      	movs	r0, #0
    8362:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8364:	4b09      	ldr	r3, [pc, #36]	; (838c <errata_57+0x34>)
    8366:	681b      	ldr	r3, [r3, #0]
    8368:	f013 0f0f 	tst.w	r3, #15
    836c:	d107      	bne.n	837e <errata_57+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    836e:	4b08      	ldr	r3, [pc, #32]	; (8390 <errata_57+0x38>)
    8370:	681b      	ldr	r3, [r3, #0]
    8372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8376:	2b30      	cmp	r3, #48	; 0x30
    8378:	d003      	beq.n	8382 <errata_57+0x2a>
    return false;
    837a:	2000      	movs	r0, #0
    837c:	4770      	bx	lr
    837e:	2000      	movs	r0, #0
    8380:	4770      	bx	lr
            return true;
    8382:	2001      	movs	r0, #1
}
    8384:	4770      	bx	lr
    8386:	bf00      	nop
    8388:	f0000fe0 	.word	0xf0000fe0
    838c:	f0000fe4 	.word	0xf0000fe4
    8390:	f0000fe8 	.word	0xf0000fe8

00008394 <errata_66>:

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8394:	4b0b      	ldr	r3, [pc, #44]	; (83c4 <errata_66+0x30>)
    8396:	781b      	ldrb	r3, [r3, #0]
    8398:	2b06      	cmp	r3, #6
    839a:	d001      	beq.n	83a0 <errata_66+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    839c:	2000      	movs	r0, #0
    839e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83a0:	4b09      	ldr	r3, [pc, #36]	; (83c8 <errata_66+0x34>)
    83a2:	681b      	ldr	r3, [r3, #0]
    83a4:	f013 0f0f 	tst.w	r3, #15
    83a8:	d107      	bne.n	83ba <errata_66+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83aa:	4b08      	ldr	r3, [pc, #32]	; (83cc <errata_66+0x38>)
    83ac:	681b      	ldr	r3, [r3, #0]
    83ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83b2:	2b50      	cmp	r3, #80	; 0x50
    83b4:	d003      	beq.n	83be <errata_66+0x2a>
    return false;
    83b6:	2000      	movs	r0, #0
    83b8:	4770      	bx	lr
    83ba:	2000      	movs	r0, #0
    83bc:	4770      	bx	lr
            return true;
    83be:	2001      	movs	r0, #1
}
    83c0:	4770      	bx	lr
    83c2:	bf00      	nop
    83c4:	f0000fe0 	.word	0xf0000fe0
    83c8:	f0000fe4 	.word	0xf0000fe4
    83cc:	f0000fe8 	.word	0xf0000fe8

000083d0 <errata_108>:


static bool errata_108(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83d0:	4b0f      	ldr	r3, [pc, #60]	; (8410 <errata_108+0x40>)
    83d2:	781b      	ldrb	r3, [r3, #0]
    83d4:	2b06      	cmp	r3, #6
    83d6:	d001      	beq.n	83dc <errata_108+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    83d8:	2000      	movs	r0, #0
    83da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83dc:	4b0d      	ldr	r3, [pc, #52]	; (8414 <errata_108+0x44>)
    83de:	681b      	ldr	r3, [r3, #0]
    83e0:	f013 0f0f 	tst.w	r3, #15
    83e4:	d10b      	bne.n	83fe <errata_108+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    83e6:	4b0c      	ldr	r3, [pc, #48]	; (8418 <errata_108+0x48>)
    83e8:	681b      	ldr	r3, [r3, #0]
    83ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83ee:	2b30      	cmp	r3, #48	; 0x30
    83f0:	d007      	beq.n	8402 <errata_108+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    83f2:	2b40      	cmp	r3, #64	; 0x40
    83f4:	d007      	beq.n	8406 <errata_108+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83f6:	2b50      	cmp	r3, #80	; 0x50
    83f8:	d007      	beq.n	840a <errata_108+0x3a>
    return false;
    83fa:	2000      	movs	r0, #0
    83fc:	4770      	bx	lr
    83fe:	2000      	movs	r0, #0
    8400:	4770      	bx	lr
            return true;
    8402:	2001      	movs	r0, #1
    8404:	4770      	bx	lr
            return true;
    8406:	2001      	movs	r0, #1
    8408:	4770      	bx	lr
            return true;
    840a:	2001      	movs	r0, #1
}
    840c:	4770      	bx	lr
    840e:	bf00      	nop
    8410:	f0000fe0 	.word	0xf0000fe0
    8414:	f0000fe4 	.word	0xf0000fe4
    8418:	f0000fe8 	.word	0xf0000fe8

0000841c <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    841c:	4b01      	ldr	r3, [pc, #4]	; (8424 <SystemCoreClockUpdate+0x8>)
    841e:	4a02      	ldr	r2, [pc, #8]	; (8428 <SystemCoreClockUpdate+0xc>)
    8420:	601a      	str	r2, [r3, #0]
}
    8422:	4770      	bx	lr
    8424:	200000e4 	.word	0x200000e4
    8428:	03d09000 	.word	0x03d09000

0000842c <SystemInit>:
{
    842c:	b508      	push	{r3, lr}
    if (errata_16()){
    842e:	f7ff feed 	bl	820c <errata_16>
    8432:	b110      	cbz	r0, 843a <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    8434:	4b65      	ldr	r3, [pc, #404]	; (85cc <SystemInit+0x1a0>)
    8436:	4a66      	ldr	r2, [pc, #408]	; (85d0 <SystemInit+0x1a4>)
    8438:	601a      	str	r2, [r3, #0]
    if (errata_31()){
    843a:	f7ff ff05 	bl	8248 <errata_31>
    843e:	b128      	cbz	r0, 844c <SystemInit+0x20>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    8440:	4b64      	ldr	r3, [pc, #400]	; (85d4 <SystemInit+0x1a8>)
    8442:	681b      	ldr	r3, [r3, #0]
    8444:	f3c3 3342 	ubfx	r3, r3, #13, #3
    8448:	4a63      	ldr	r2, [pc, #396]	; (85d8 <SystemInit+0x1ac>)
    844a:	6013      	str	r3, [r2, #0]
    if (errata_32()){
    844c:	f7ff ff22 	bl	8294 <errata_32>
    8450:	b120      	cbz	r0, 845c <SystemInit+0x30>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    8452:	4a62      	ldr	r2, [pc, #392]	; (85dc <SystemInit+0x1b0>)
    8454:	68d3      	ldr	r3, [r2, #12]
    8456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    845a:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
    845c:	f7ff ff38 	bl	82d0 <errata_36>
    8460:	b140      	cbz	r0, 8474 <SystemInit+0x48>
        NRF_CLOCK->EVENTS_DONE = 0;
    8462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8466:	2200      	movs	r2, #0
    8468:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    846c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    8470:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    8474:	f7ff ff52 	bl	831c <errata_37>
    8478:	b110      	cbz	r0, 8480 <SystemInit+0x54>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    847a:	4b59      	ldr	r3, [pc, #356]	; (85e0 <SystemInit+0x1b4>)
    847c:	2203      	movs	r2, #3
    847e:	601a      	str	r2, [r3, #0]
    if (errata_57()){
    8480:	f7ff ff6a 	bl	8358 <errata_57>
    8484:	b158      	cbz	r0, 849e <SystemInit+0x72>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    8486:	4b57      	ldr	r3, [pc, #348]	; (85e4 <SystemInit+0x1b8>)
    8488:	2205      	movs	r2, #5
    848a:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    848c:	3378      	adds	r3, #120	; 0x78
    848e:	2201      	movs	r2, #1
    8490:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    8492:	3b70      	subs	r3, #112	; 0x70
    8494:	2200      	movs	r2, #0
    8496:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    8498:	3b04      	subs	r3, #4
    849a:	223f      	movs	r2, #63	; 0x3f
    849c:	601a      	str	r2, [r3, #0]
    if (errata_66()){
    849e:	f7ff ff79 	bl	8394 <errata_66>
    84a2:	2800      	cmp	r0, #0
    84a4:	d046      	beq.n	8534 <SystemInit+0x108>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    84a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    84aa:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    84ae:	4b4e      	ldr	r3, [pc, #312]	; (85e8 <SystemInit+0x1bc>)
    84b0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    84b4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    84b8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    84bc:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    84c0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    84c4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    84c8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    84cc:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    84d0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    84d4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    84d8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    84dc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    84e0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    84e4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    84e8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    84ec:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    84f0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    84f4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    84f8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    84fc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    8500:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8504:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    8508:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    850c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    8510:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8514:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    8518:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    851c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    8520:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8524:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    8528:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    852c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    8530:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    8534:	f7ff ff4c 	bl	83d0 <errata_108>
    8538:	b128      	cbz	r0, 8546 <SystemInit+0x11a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    853a:	4b2c      	ldr	r3, [pc, #176]	; (85ec <SystemInit+0x1c0>)
    853c:	681b      	ldr	r3, [r3, #0]
    853e:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    8542:	4a2b      	ldr	r2, [pc, #172]	; (85f0 <SystemInit+0x1c4>)
    8544:	6013      	str	r3, [r2, #0]
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    8546:	4a2b      	ldr	r2, [pc, #172]	; (85f4 <SystemInit+0x1c8>)
    8548:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    854c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    8550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    8554:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8558:	f3bf 8f6f 	isb	sy
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    855c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8560:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    8564:	f013 0f01 	tst.w	r3, #1
    8568:	d104      	bne.n	8574 <SystemInit+0x148>
    SystemCoreClockUpdate();
    856a:	f7ff ff57 	bl	841c <SystemCoreClockUpdate>
    NVIC_Relocate();
    856e:	f011 fab5 	bl	19adc <NVIC_Relocate>
}
    8572:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    8574:	4b20      	ldr	r3, [pc, #128]	; (85f8 <SystemInit+0x1cc>)
    8576:	2201      	movs	r2, #1
    8578:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    857c:	4b1e      	ldr	r3, [pc, #120]	; (85f8 <SystemInit+0x1cc>)
    857e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    8582:	2b00      	cmp	r3, #0
    8584:	d0fa      	beq.n	857c <SystemInit+0x150>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    8586:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    858a:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    858e:	f023 0301 	bic.w	r3, r3, #1
    8592:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    8596:	4b18      	ldr	r3, [pc, #96]	; (85f8 <SystemInit+0x1cc>)
    8598:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    859c:	2b00      	cmp	r3, #0
    859e:	d0fa      	beq.n	8596 <SystemInit+0x16a>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    85a0:	4b15      	ldr	r3, [pc, #84]	; (85f8 <SystemInit+0x1cc>)
    85a2:	2200      	movs	r2, #0
    85a4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85a8:	4b13      	ldr	r3, [pc, #76]	; (85f8 <SystemInit+0x1cc>)
    85aa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85ae:	2b00      	cmp	r3, #0
    85b0:	d0fa      	beq.n	85a8 <SystemInit+0x17c>
  __ASM volatile ("dsb 0xF":::"memory");
    85b2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    85b6:	490f      	ldr	r1, [pc, #60]	; (85f4 <SystemInit+0x1c8>)
    85b8:	68ca      	ldr	r2, [r1, #12]
    85ba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    85be:	4b0f      	ldr	r3, [pc, #60]	; (85fc <SystemInit+0x1d0>)
    85c0:	4313      	orrs	r3, r2
    85c2:	60cb      	str	r3, [r1, #12]
    85c4:	f3bf 8f4f 	dsb	sy
    __NOP();
    85c8:	bf00      	nop
    85ca:	e7fd      	b.n	85c8 <SystemInit+0x19c>
    85cc:	4007c074 	.word	0x4007c074
    85d0:	baadf00d 	.word	0xbaadf00d
    85d4:	10000244 	.word	0x10000244
    85d8:	4000053c 	.word	0x4000053c
    85dc:	e000edf0 	.word	0xe000edf0
    85e0:	400005a0 	.word	0x400005a0
    85e4:	40005610 	.word	0x40005610
    85e8:	4000c000 	.word	0x4000c000
    85ec:	10000258 	.word	0x10000258
    85f0:	40000ee4 	.word	0x40000ee4
    85f4:	e000ed00 	.word	0xe000ed00
    85f8:	4001e000 	.word	0x4001e000
    85fc:	05fa0004 	.word	0x05fa0004

00008600 <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
    8600:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
    8602:	4803      	ldr	r0, [pc, #12]	; (8610 <_start+0x10>)
    8604:	f012 f9f0 	bl	1a9e8 <os_init>
    os_start();
    8608:	f012 fa46 	bl	1aa98 <os_start>
#endif
}
    860c:	bd08      	pop	{r3, pc}
    860e:	bf00      	nop
    8610:	00008617 	.word	0x00008617

00008614 <_init>:

void
_init(void)
{
}
    8614:	4770      	bx	lr

00008616 <main>:
pub fn handle_touch(_x: u16, _y: u16) { console::print("touch not handled\n"); console::flush(); }  //  Define a touch handler that does nothing

///  Main program that initialises the sensor, network driver and starts reading and sending sensor data in the background.
///  main() will be called at Mynewt startup. It replaces the C version of the main() function.
#[no_mangle]                 //  Don't mangle the name "main"
extern "C" fn main() -> ! {  //  Declare extern "C" because it will be called by Mynewt
    8616:	b088      	sub	sp, #32
    //  Initialise the Mynewt packages and internal temperature sensor driver. Any startup
    //  functions defined in pkg.yml of our custom drivers and libraries will be called by 
    //  sysinit().  Here are the startup functions consolidated by Mynewt:
    //  bin/targets/nrf52_my_sensor/generated/src/nrf52_my_sensor-sysinit-app.c
    mynewt::sysinit();
    8618:	f000 f960 	bl	88dc <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>
    861c:	e7ff      	b.n	861e <main+0x8>
    //  extern { fn start_ble() -> i32; }
    //  let rc = unsafe { start_ble() };
    //  assert!(rc == 0, "BLE fail");

    //  Start the display
    druid::start_display()
    861e:	f000 ff31 	bl	9484 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>
    8622:	9005      	str	r0, [sp, #20]
    8624:	e7ff      	b.n	8626 <main+0x10>
    8626:	f24e 11ae 	movw	r1, #57774	; 0xe1ae
    862a:	f2c0 0101 	movt	r1, #1
    862e:	f24e 13e4 	movw	r3, #57828	; 0xe1e4
    8632:	f2c0 0301 	movt	r3, #1
    8636:	2208      	movs	r2, #8
    8638:	9805      	ldr	r0, [sp, #20]
    863a:	f000 fa5e 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    863e:	e7ff      	b.n	8640 <main+0x2a>
    #[cfg(feature = "display_app")]  //  If graphics display app is enabled...
    display::test_display()
        .expect("DSP test fail");

    //  Start the touch sensor
    touch_sensor::start_touch_sensor()
    8640:	f002 fbdd 	bl	adfe <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E>
    8644:	9004      	str	r0, [sp, #16]
    8646:	e7ff      	b.n	8648 <main+0x32>
    8648:	f24e 11b6 	movw	r1, #57782	; 0xe1b6
    864c:	f2c0 0101 	movt	r1, #1
    8650:	f24e 13f4 	movw	r3, #57844	; 0xe1f4
    8654:	f2c0 0301 	movt	r3, #1
    8658:	2208      	movs	r2, #8
    865a:	9804      	ldr	r0, [sp, #16]
    865c:	f000 fa4d 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8660:	e7ff      	b.n	8662 <main+0x4c>
    visual::on_start()
        .expect("VIS fail");

    //  Launch the CHIP8 Emulator app
    #[cfg(feature = "chip8_app")]  //  If CHIP8 Emulator app is enabled...
    chip8::on_start()
    8662:	f003 fa3d 	bl	bae0 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E>
    8666:	9003      	str	r0, [sp, #12]
    8668:	e7ff      	b.n	866a <main+0x54>
    866a:	f24e 2104 	movw	r1, #57860	; 0xe204
    866e:	f2c0 0101 	movt	r1, #1
    8672:	f24e 2310 	movw	r3, #57872	; 0xe210
    8676:	f2c0 0301 	movt	r3, #1
    867a:	220a      	movs	r2, #10
    867c:	9803      	ldr	r0, [sp, #12]
    867e:	f000 fa3c 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8682:	e7ff      	b.n	8684 <main+0x6e>
        .expect("CHIP8 fail");

    //  Main event loop
    loop {                            //  Loop forever...
    8684:	e7ff      	b.n	8686 <main+0x70>
    8686:	a806      	add	r0, sp, #24
        os::eventq_run(               //  Processing events...
            os::eventq_dflt_get()     //  From default event queue.
    8688:	f000 faf2 	bl	8c70 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
    868c:	e7ff      	b.n	868e <main+0x78>
    868e:	f24e 11be 	movw	r1, #57790	; 0xe1be
    8692:	f2c0 0101 	movt	r1, #1
    8696:	f24e 2320 	movw	r3, #57888	; 0xe220
    869a:	f2c0 0301 	movt	r3, #1
    869e:	a806      	add	r0, sp, #24
    86a0:	2208      	movs	r2, #8
    86a2:	f000 f896 	bl	87d2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE>
    86a6:	9002      	str	r0, [sp, #8]
    86a8:	e7ff      	b.n	86aa <main+0x94>
        os::eventq_run(               //  Processing events...
    86aa:	9802      	ldr	r0, [sp, #8]
    86ac:	f000 fad7 	bl	8c5e <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
    86b0:	9001      	str	r0, [sp, #4]
    86b2:	e7ff      	b.n	86b4 <main+0x9e>
    86b4:	f24e 11c6 	movw	r1, #57798	; 0xe1c6
    86b8:	f2c0 0101 	movt	r1, #1
    86bc:	f24e 2330 	movw	r3, #57904	; 0xe230
    86c0:	f2c0 0301 	movt	r3, #1
    86c4:	2208      	movs	r2, #8
    86c6:	9801      	ldr	r0, [sp, #4]
    86c8:	f000 fa17 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    86cc:	e7ff      	b.n	86ce <main+0xb8>
    loop {                            //  Loop forever...
    86ce:	e7da      	b.n	8686 <main+0x70>

000086d0 <rust_begin_unwind>:
    //  Never comes here
}

///  This function is called on panic, like an assertion failure. We display the filename and line number and pause in the debugger. From https://os.phil-opp.com/freestanding-rust-binary/
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
    86d0:	b08e      	sub	sp, #56	; 0x38
    86d2:	900b      	str	r0, [sp, #44]	; 0x2c
    //  Display the filename and line number to the Semihosting Console.
    console::print("panic ");
    86d4:	f24e 2140 	movw	r1, #57920	; 0xe240
    86d8:	f2c0 0101 	movt	r1, #1
    86dc:	2206      	movs	r2, #6
    86de:	9007      	str	r0, [sp, #28]
    86e0:	4608      	mov	r0, r1
    86e2:	4611      	mov	r1, r2
    86e4:	f000 fc84 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    86e8:	e7ff      	b.n	86ea <rust_begin_unwind+0x1a>
    if let Some(location) = info.location() {
    86ea:	9807      	ldr	r0, [sp, #28]
    86ec:	f00f f933 	bl	17956 <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>
    86f0:	9008      	str	r0, [sp, #32]
    86f2:	e7ff      	b.n	86f4 <rust_begin_unwind+0x24>
    86f4:	9808      	ldr	r0, [sp, #32]
    86f6:	2800      	cmp	r0, #0
    86f8:	d108      	bne.n	870c <rust_begin_unwind+0x3c>
    86fa:	e7ff      	b.n	86fc <rust_begin_unwind+0x2c>
        let line = location.line();
        console::print("at ");       console::buffer(&file);
        console::print(" line ");    console::printint(line as i32);
        console::print("\n");        console::flush();
    } else {
        console::print("no loc\n");  console::flush();
    86fc:	f24e 2046 	movw	r0, #57926	; 0xe246
    8700:	f2c0 0001 	movt	r0, #1
    8704:	2107      	movs	r1, #7
    8706:	f000 fc73 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    870a:	e033      	b.n	8774 <rust_begin_unwind+0xa4>
    if let Some(location) = info.location() {
    870c:	9808      	ldr	r0, [sp, #32]
    870e:	900c      	str	r0, [sp, #48]	; 0x30
        let file = location.file();
    8710:	9006      	str	r0, [sp, #24]
    8712:	f00f f923 	bl	1795c <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8716:	910a      	str	r1, [sp, #40]	; 0x28
    8718:	9009      	str	r0, [sp, #36]	; 0x24
    871a:	e7ff      	b.n	871c <rust_begin_unwind+0x4c>
        let line = location.line();
    871c:	9806      	ldr	r0, [sp, #24]
    871e:	f00f f921 	bl	17964 <_ZN4core5panic8Location4line17h650a566d9637c91dE>
    8722:	4601      	mov	r1, r0
    8724:	900d      	str	r0, [sp, #52]	; 0x34
    8726:	9105      	str	r1, [sp, #20]
    8728:	e7ff      	b.n	872a <rust_begin_unwind+0x5a>
        console::print("at ");       console::buffer(&file);
    872a:	f24e 204d 	movw	r0, #57933	; 0xe24d
    872e:	f2c0 0001 	movt	r0, #1
    8732:	2103      	movs	r1, #3
    8734:	f000 fc5c 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8738:	e7ff      	b.n	873a <rust_begin_unwind+0x6a>
    873a:	9809      	ldr	r0, [sp, #36]	; 0x24
    873c:	990a      	ldr	r1, [sp, #40]	; 0x28
    873e:	f000 fc7e 	bl	903e <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>
    8742:	e7ff      	b.n	8744 <rust_begin_unwind+0x74>
        console::print(" line ");    console::printint(line as i32);
    8744:	f24e 2050 	movw	r0, #57936	; 0xe250
    8748:	f2c0 0001 	movt	r0, #1
    874c:	2106      	movs	r1, #6
    874e:	f000 fc4f 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8752:	e7ff      	b.n	8754 <rust_begin_unwind+0x84>
    8754:	9805      	ldr	r0, [sp, #20]
    8756:	f000 fc89 	bl	906c <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    875a:	e7ff      	b.n	875c <rust_begin_unwind+0x8c>
        console::print("\n");        console::flush();
    875c:	f24e 2056 	movw	r0, #57942	; 0xe256
    8760:	f2c0 0001 	movt	r0, #1
    8764:	2101      	movs	r1, #1
    8766:	f000 fc43 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    876a:	e7ff      	b.n	876c <rust_begin_unwind+0x9c>
    876c:	f000 fc86 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8770:	e7ff      	b.n	8772 <rust_begin_unwind+0xa2>
    if let Some(location) = info.location() {
    8772:	e003      	b.n	877c <rust_begin_unwind+0xac>
        console::print("no loc\n");  console::flush();
    8774:	f000 fc82 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8778:	e7ff      	b.n	877a <rust_begin_unwind+0xaa>
    if let Some(location) = info.location() {
    877a:	e7ff      	b.n	877c <rust_begin_unwind+0xac>
/// exception.
#[inline(always)]
pub fn bkpt() {
    match () {
        #[cfg(all(cortex_m, feature = "inline-asm"))]
        () => unsafe { asm!("bkpt" :::: "volatile") },
    877c:	be00      	bkpt	0x0000
    }
    //  Pause in the debugger.
    bkpt();
    877e:	e7ff      	b.n	8780 <rust_begin_unwind+0xb0>
    //  Display the payload.
    console::print(info.payload().downcast_ref::<&str>().unwrap());
    8780:	9807      	ldr	r0, [sp, #28]
    8782:	f00f f8eb 	bl	1795c <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8786:	9004      	str	r0, [sp, #16]
    8788:	9103      	str	r1, [sp, #12]
    878a:	e7ff      	b.n	878c <rust_begin_unwind+0xbc>
    878c:	9804      	ldr	r0, [sp, #16]
    878e:	9903      	ldr	r1, [sp, #12]
    8790:	f000 f899 	bl	88c6 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17he532d8d46bba5cdfE>
    8794:	9002      	str	r0, [sp, #8]
    8796:	e7ff      	b.n	8798 <rust_begin_unwind+0xc8>
    8798:	f24e 2158 	movw	r1, #57944	; 0xe258
    879c:	f2c0 0101 	movt	r1, #1
    87a0:	9802      	ldr	r0, [sp, #8]
    87a2:	f004 faf5 	bl	cd90 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E>
    87a6:	9001      	str	r0, [sp, #4]
    87a8:	e7ff      	b.n	87aa <rust_begin_unwind+0xda>
    87aa:	9801      	ldr	r0, [sp, #4]
    87ac:	6800      	ldr	r0, [r0, #0]
    87ae:	9901      	ldr	r1, [sp, #4]
    87b0:	6849      	ldr	r1, [r1, #4]
    87b2:	f000 fc1d 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87b6:	e7ff      	b.n	87b8 <rust_begin_unwind+0xe8>
    console::print("\n");  console::flush();
    87b8:	f24e 2056 	movw	r0, #57942	; 0xe256
    87bc:	f2c0 0001 	movt	r0, #1
    87c0:	2101      	movs	r1, #1
    87c2:	f000 fc15 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87c6:	e7ff      	b.n	87c8 <rust_begin_unwind+0xf8>
    87c8:	f000 fc58 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    87cc:	e7ff      	b.n	87ce <rust_begin_unwind+0xfe>
    //  Loop forever so that device won't restart.
    loop {}
    87ce:	e7ff      	b.n	87d0 <rust_begin_unwind+0x100>
    87d0:	e7fe      	b.n	87d0 <rust_begin_unwind+0x100>

000087d2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE>:
    87d2:	b08a      	sub	sp, #40	; 0x28
    87d4:	9107      	str	r1, [sp, #28]
    87d6:	9208      	str	r2, [sp, #32]
    87d8:	f8d0 c000 	ldr.w	ip, [r0]
    87dc:	f1bc 0f00 	cmp.w	ip, #0
    87e0:	9305      	str	r3, [sp, #20]
    87e2:	9204      	str	r2, [sp, #16]
    87e4:	9103      	str	r1, [sp, #12]
    87e6:	9002      	str	r0, [sp, #8]
    87e8:	d011      	beq.n	880e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x3c>
    87ea:	e7ff      	b.n	87ec <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x1a>
    87ec:	9802      	ldr	r0, [sp, #8]
    87ee:	6841      	ldr	r1, [r0, #4]
    87f0:	9106      	str	r1, [sp, #24]
    87f2:	4669      	mov	r1, sp
    87f4:	9a05      	ldr	r2, [sp, #20]
    87f6:	600a      	str	r2, [r1, #0]
    87f8:	f24e 2368 	movw	r3, #57960	; 0xe268
    87fc:	f2c0 0301 	movt	r3, #1
    8800:	aa06      	add	r2, sp, #24
    8802:	9803      	ldr	r0, [sp, #12]
    8804:	9904      	ldr	r1, [sp, #16]
    8806:	f00f f881 	bl	1790c <_ZN4core6option18expect_none_failed17h54d938081af97677E>
    880a:	defe      	udf	#254	; 0xfe
    880c:	defe      	udf	#254	; 0xfe
    880e:	9802      	ldr	r0, [sp, #8]
    8810:	6841      	ldr	r1, [r0, #4]
    8812:	9109      	str	r1, [sp, #36]	; 0x24
    8814:	6802      	ldr	r2, [r0, #0]
    8816:	2a00      	cmp	r2, #0
    8818:	9101      	str	r1, [sp, #4]
    881a:	d103      	bne.n	8824 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x52>
    881c:	e7ff      	b.n	881e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x4c>
    881e:	9801      	ldr	r0, [sp, #4]
    8820:	b00a      	add	sp, #40	; 0x28
    8822:	4770      	bx	lr
    8824:	e7fb      	b.n	881e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x4c>

00008826 <_ZN4core3ptr13drop_in_place17he6c5bffce3c304d4E>:
    8826:	b081      	sub	sp, #4
    8828:	9000      	str	r0, [sp, #0]
    882a:	b001      	add	sp, #4
    882c:	4770      	bx	lr

0000882e <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E>:
    882e:	b580      	push	{r7, lr}
    8830:	b086      	sub	sp, #24
    8832:	9004      	str	r0, [sp, #16]
    8834:	9105      	str	r1, [sp, #20]
    8836:	9002      	str	r0, [sp, #8]
    8838:	f000 f810 	bl	885c <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE>
    883c:	9001      	str	r0, [sp, #4]
    883e:	e7ff      	b.n	8840 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x12>
    8840:	9801      	ldr	r0, [sp, #4]
    8842:	07c1      	lsls	r1, r0, #31
    8844:	2900      	cmp	r1, #0
    8846:	d103      	bne.n	8850 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x22>
    8848:	e7ff      	b.n	884a <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x1c>
    884a:	2000      	movs	r0, #0
    884c:	9003      	str	r0, [sp, #12]
    884e:	e002      	b.n	8856 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x28>
    8850:	9802      	ldr	r0, [sp, #8]
    8852:	9003      	str	r0, [sp, #12]
    8854:	e7ff      	b.n	8856 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x28>
    8856:	9803      	ldr	r0, [sp, #12]
    8858:	b006      	add	sp, #24
    885a:	bd80      	pop	{r7, pc}

0000885c <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE>:
    885c:	b580      	push	{r7, lr}
    885e:	b08a      	sub	sp, #40	; 0x28
    8860:	9008      	str	r0, [sp, #32]
    8862:	9109      	str	r1, [sp, #36]	; 0x24
    8864:	9103      	str	r1, [sp, #12]
    8866:	9002      	str	r0, [sp, #8]
    8868:	f000 f815 	bl	8896 <_ZN4core3any6TypeId2of17haae5124a9f275cb8E>
    886c:	9105      	str	r1, [sp, #20]
    886e:	9004      	str	r0, [sp, #16]
    8870:	e7ff      	b.n	8872 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE+0x16>
    8872:	9803      	ldr	r0, [sp, #12]
    8874:	68c1      	ldr	r1, [r0, #12]
    8876:	9802      	ldr	r0, [sp, #8]
    8878:	4788      	blx	r1
    887a:	9107      	str	r1, [sp, #28]
    887c:	9006      	str	r0, [sp, #24]
    887e:	e7ff      	b.n	8880 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE+0x24>
    8880:	a804      	add	r0, sp, #16
    8882:	a906      	add	r1, sp, #24
    8884:	f002 faa9 	bl	adda <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h44bec417aa74de39E>
    8888:	9001      	str	r0, [sp, #4]
    888a:	e7ff      	b.n	888c <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE+0x30>
    888c:	9801      	ldr	r0, [sp, #4]
    888e:	f000 0001 	and.w	r0, r0, #1
    8892:	b00a      	add	sp, #40	; 0x28
    8894:	bd80      	pop	{r7, pc}

00008896 <_ZN4core3any6TypeId2of17haae5124a9f275cb8E>:
    8896:	b086      	sub	sp, #24
    8898:	f249 40d9 	movw	r0, #38105	; 0x94d9
    889c:	f2c1 1010 	movt	r0, #4368	; 0x1110
    88a0:	9005      	str	r0, [sp, #20]
    88a2:	f249 7064 	movw	r0, #38756	; 0x9764
    88a6:	f2c7 00b0 	movt	r0, #28848	; 0x70b0
    88aa:	9004      	str	r0, [sp, #16]
    88ac:	9804      	ldr	r0, [sp, #16]
    88ae:	9905      	ldr	r1, [sp, #20]
    88b0:	9001      	str	r0, [sp, #4]
    88b2:	9100      	str	r1, [sp, #0]
    88b4:	e7ff      	b.n	88b6 <_ZN4core3any6TypeId2of17haae5124a9f275cb8E+0x20>
    88b6:	9801      	ldr	r0, [sp, #4]
    88b8:	9002      	str	r0, [sp, #8]
    88ba:	9900      	ldr	r1, [sp, #0]
    88bc:	9103      	str	r1, [sp, #12]
    88be:	9802      	ldr	r0, [sp, #8]
    88c0:	9903      	ldr	r1, [sp, #12]
    88c2:	b006      	add	sp, #24
    88c4:	4770      	bx	lr

000088c6 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17he532d8d46bba5cdfE>:
    88c6:	b580      	push	{r7, lr}
    88c8:	b084      	sub	sp, #16
    88ca:	9002      	str	r0, [sp, #8]
    88cc:	9103      	str	r1, [sp, #12]
    88ce:	f7ff ffae 	bl	882e <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E>
    88d2:	9001      	str	r0, [sp, #4]
    88d4:	e7ff      	b.n	88d6 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17he532d8d46bba5cdfE+0x10>
    88d6:	9801      	ldr	r0, [sp, #4]
    88d8:	b004      	add	sp, #16
    88da:	bd80      	pop	{r7, pc}

000088dc <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>:
pub use hal::{ Delay, GPIO, SPI };  //  Export `hal` types GPIO and SPI

pub mod spi;  //  Export Non-Blocking SPI API

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
pub fn sysinit() {
    88dc:	b580      	push	{r7, lr}
    unsafe { rust_sysinit(); }
    88de:	f013 fed3 	bl	1c688 <rust_sysinit>
    88e2:	e7ff      	b.n	88e4 <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0x8>
    sys::console::flush();
    88e4:	f000 fbca 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    88e8:	e7ff      	b.n	88ea <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0xe>
}
    88ea:	bd80      	pop	{r7, pc}

000088ec <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>:
            rep: StrnRep::CStr(cstr)
        }
    }

    /// Return a pointer to the string
    pub fn as_ptr(&self) -> *const u8 {
    88ec:	b580      	push	{r7, lr}
    88ee:	b086      	sub	sp, #24
    88f0:	9002      	str	r0, [sp, #8]
        match self.rep {
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    88f2:	7801      	ldrb	r1, [r0, #0]
    88f4:	07ca      	lsls	r2, r1, #31
    88f6:	2a00      	cmp	r2, #0
    88f8:	9000      	str	r0, [sp, #0]
    88fa:	d006      	beq.n	890a <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x1e>
    88fc:	e7ff      	b.n	88fe <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x12>
            StrnRep::CStr(cstr)  => { cstr }
    88fe:	9800      	ldr	r0, [sp, #0]
    8900:	6841      	ldr	r1, [r0, #4]
    8902:	9103      	str	r1, [sp, #12]
    8904:	9101      	str	r1, [sp, #4]
        match self.rep {
    8906:	e00c      	b.n	8922 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
    8908:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    890a:	9800      	ldr	r0, [sp, #0]
    890c:	6841      	ldr	r1, [r0, #4]
    890e:	6882      	ldr	r2, [r0, #8]
    8910:	9104      	str	r1, [sp, #16]
    8912:	9205      	str	r2, [sp, #20]
    8914:	4608      	mov	r0, r1
    8916:	4611      	mov	r1, r2
    8918:	f009 faef 	bl	11efa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    891c:	9001      	str	r0, [sp, #4]
    891e:	e7ff      	b.n	8920 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x34>
        match self.rep {
    8920:	e7ff      	b.n	8922 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
        }
    }
    8922:	9801      	ldr	r0, [sp, #4]
    8924:	b006      	add	sp, #24
    8926:	bd80      	pop	{r7, pc}

00008928 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>:
            }
        }
    }

    /// Fail if the last byte is not zero.
    pub fn validate(&self) {
    8928:	b5b0      	push	{r4, r5, r7, lr}
    892a:	b0b2      	sub	sp, #200	; 0xc8
    892c:	9029      	str	r0, [sp, #164]	; 0xa4
        match self.rep {
            StrnRep::ByteStr(bs) => {         
    892e:	7801      	ldrb	r1, [r0, #0]
    8930:	07ca      	lsls	r2, r1, #31
    8932:	2a00      	cmp	r2, #0
    8934:	900e      	str	r0, [sp, #56]	; 0x38
    8936:	d005      	beq.n	8944 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x1c>
    8938:	e7ff      	b.n	893a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
            }
            StrnRep::CStr(_cstr)  => {}
    893a:	980e      	ldr	r0, [sp, #56]	; 0x38
    893c:	6841      	ldr	r1, [r0, #4]
    893e:	912a      	str	r1, [sp, #168]	; 0xa8
        match self.rep {
    8940:	e096      	b.n	8a70 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
    8942:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => {         
    8944:	980e      	ldr	r0, [sp, #56]	; 0x38
    8946:	6841      	ldr	r1, [r0, #4]
    8948:	6882      	ldr	r2, [r0, #8]
    894a:	912b      	str	r1, [sp, #172]	; 0xac
    894c:	922c      	str	r2, [sp, #176]	; 0xb0
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    894e:	4608      	mov	r0, r1
    8950:	4611      	mov	r1, r2
    8952:	f000 face 	bl	8ef2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>
    8956:	9011      	str	r0, [sp, #68]	; 0x44
    8958:	e7ff      	b.n	895a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x32>
    895a:	f24e 2080 	movw	r0, #57984	; 0xe280
    895e:	f2c0 0001 	movt	r0, #1
    8962:	6800      	ldr	r0, [r0, #0]
    8964:	a911      	add	r1, sp, #68	; 0x44
    8966:	910f      	str	r1, [sp, #60]	; 0x3c
    8968:	9010      	str	r0, [sp, #64]	; 0x40
    896a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    896c:	902d      	str	r0, [sp, #180]	; 0xb4
    896e:	9910      	ldr	r1, [sp, #64]	; 0x40
    8970:	912e      	str	r1, [sp, #184]	; 0xb8
    8972:	900d      	str	r0, [sp, #52]	; 0x34
    8974:	910c      	str	r1, [sp, #48]	; 0x30
    8976:	f000 fc5a 	bl	922e <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>
    897a:	900b      	str	r0, [sp, #44]	; 0x2c
    897c:	e7ff      	b.n	897e <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x56>
    897e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8980:	07c1      	lsls	r1, r0, #31
    8982:	2900      	cmp	r1, #0
    8984:	d001      	beq.n	898a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x62>
    8986:	e7ff      	b.n	8988 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x60>
        }
    }
    8988:	e072      	b.n	8a70 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    898a:	f24e 20d8 	movw	r0, #58072	; 0xe2d8
    898e:	f2c0 0001 	movt	r0, #1
    8992:	6801      	ldr	r1, [r0, #0]
    8994:	980d      	ldr	r0, [sp, #52]	; 0x34
    8996:	9021      	str	r0, [sp, #132]	; 0x84
    8998:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    899a:	9222      	str	r2, [sp, #136]	; 0x88
    899c:	f24e 23ec 	movw	r3, #58092	; 0xe2ec
    89a0:	f2c0 0301 	movt	r3, #1
    89a4:	681b      	ldr	r3, [r3, #0]
    89a6:	f24e 2cf0 	movw	ip, #58096	; 0xe2f0
    89aa:	f2c0 0c01 	movt	ip, #1
    89ae:	f8dc c000 	ldr.w	ip, [ip]
    89b2:	46ee      	mov	lr, sp
    89b4:	2400      	movs	r4, #0
    89b6:	f8ce 4000 	str.w	r4, [lr]
    89ba:	a823      	add	r0, sp, #140	; 0x8c
    89bc:	2201      	movs	r2, #1
    89be:	910a      	str	r1, [sp, #40]	; 0x28
    89c0:	4619      	mov	r1, r3
    89c2:	4663      	mov	r3, ip
    89c4:	f000 f86a 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    89c8:	e7ff      	b.n	89ca <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xa2>
    89ca:	a821      	add	r0, sp, #132	; 0x84
    89cc:	901e      	str	r0, [sp, #120]	; 0x78
    89ce:	a822      	add	r0, sp, #136	; 0x88
    89d0:	901f      	str	r0, [sp, #124]	; 0x7c
    89d2:	a823      	add	r0, sp, #140	; 0x8c
    89d4:	9020      	str	r0, [sp, #128]	; 0x80
    89d6:	981e      	ldr	r0, [sp, #120]	; 0x78
    89d8:	902f      	str	r0, [sp, #188]	; 0xbc
    89da:	991f      	ldr	r1, [sp, #124]	; 0x7c
    89dc:	9130      	str	r1, [sp, #192]	; 0xc0
    89de:	9a20      	ldr	r2, [sp, #128]	; 0x80
    89e0:	9231      	str	r2, [sp, #196]	; 0xc4
    89e2:	f249 03e7 	movw	r3, #37095	; 0x90e7
    89e6:	f2c0 0300 	movt	r3, #0
    89ea:	9109      	str	r1, [sp, #36]	; 0x24
    89ec:	4619      	mov	r1, r3
    89ee:	9208      	str	r2, [sp, #32]
    89f0:	f000 fcc8 	bl	9384 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    89f4:	9007      	str	r0, [sp, #28]
    89f6:	9106      	str	r1, [sp, #24]
    89f8:	e7ff      	b.n	89fa <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xd2>
    89fa:	f249 01e7 	movw	r1, #37095	; 0x90e7
    89fe:	f2c0 0100 	movt	r1, #0
    8a02:	9809      	ldr	r0, [sp, #36]	; 0x24
    8a04:	f000 fcbe 	bl	9384 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    8a08:	9005      	str	r0, [sp, #20]
    8a0a:	9104      	str	r1, [sp, #16]
    8a0c:	e7ff      	b.n	8a0e <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xe6>
    8a0e:	f647 7137 	movw	r1, #32567	; 0x7f37
    8a12:	f2c0 0101 	movt	r1, #1
    8a16:	9808      	ldr	r0, [sp, #32]
    8a18:	f000 fcde 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    8a1c:	9003      	str	r0, [sp, #12]
    8a1e:	9102      	str	r1, [sp, #8]
    8a20:	e7ff      	b.n	8a22 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xfa>
    8a22:	9807      	ldr	r0, [sp, #28]
    8a24:	9018      	str	r0, [sp, #96]	; 0x60
    8a26:	9906      	ldr	r1, [sp, #24]
    8a28:	9119      	str	r1, [sp, #100]	; 0x64
    8a2a:	9a05      	ldr	r2, [sp, #20]
    8a2c:	921a      	str	r2, [sp, #104]	; 0x68
    8a2e:	9b04      	ldr	r3, [sp, #16]
    8a30:	931b      	str	r3, [sp, #108]	; 0x6c
    8a32:	f8dd c00c 	ldr.w	ip, [sp, #12]
    8a36:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
    8a3a:	f8dd e008 	ldr.w	lr, [sp, #8]
    8a3e:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
    8a42:	466c      	mov	r4, sp
    8a44:	2503      	movs	r5, #3
    8a46:	6025      	str	r5, [r4, #0]
    8a48:	a812      	add	r0, sp, #72	; 0x48
    8a4a:	ab18      	add	r3, sp, #96	; 0x60
    8a4c:	990a      	ldr	r1, [sp, #40]	; 0x28
    8a4e:	462a      	mov	r2, r5
    8a50:	f000 f824 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8a54:	e7ff      	b.n	8a56 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12e>
    8a56:	f24e 300c 	movw	r0, #58124	; 0xe30c
    8a5a:	f2c0 0001 	movt	r0, #1
    8a5e:	f00e ff7c 	bl	1795a <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    8a62:	9001      	str	r0, [sp, #4]
    8a64:	e7ff      	b.n	8a66 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x13e>
    8a66:	a812      	add	r0, sp, #72	; 0x48
    8a68:	9901      	ldr	r1, [sp, #4]
    8a6a:	f00e ffb3 	bl	179d4 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    8a6e:	defe      	udf	#254	; 0xfe
    }
    8a70:	b032      	add	sp, #200	; 0xc8
    8a72:	bdb0      	pop	{r4, r5, r7, pc}

00008a74 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>:
        fn from(num: i32) -> Self {
    8a74:	b083      	sub	sp, #12
    8a76:	9001      	str	r0, [sp, #4]
                ::core::mem::transmute::
    8a78:	9002      	str	r0, [sp, #8]
    8a7a:	9802      	ldr	r0, [sp, #8]
    8a7c:	9000      	str	r0, [sp, #0]
    8a7e:	e7ff      	b.n	8a80 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E+0xc>
        }
    8a80:	9800      	ldr	r0, [sp, #0]
    8a82:	b003      	add	sp, #12
    8a84:	4770      	bx	lr

00008a86 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>:
        fn from(_: ()) -> Self {
    8a86:	b081      	sub	sp, #4
    8a88:	f06f 000c 	mvn.w	r0, #12
        }
    8a8c:	b001      	add	sp, #4
    8a8e:	4770      	bx	lr

00008a90 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E>:
        fn fmt(&self, _fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
    8a90:	b082      	sub	sp, #8
    8a92:	9000      	str	r0, [sp, #0]
    8a94:	9101      	str	r1, [sp, #4]
    8a96:	2000      	movs	r0, #0
        }
    8a98:	b002      	add	sp, #8
    8a9a:	4770      	bx	lr

00008a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>:
    8a9c:	b580      	push	{r7, lr}
    8a9e:	b086      	sub	sp, #24
    8aa0:	f8dd c020 	ldr.w	ip, [sp, #32]
    8aa4:	9102      	str	r1, [sp, #8]
    8aa6:	9203      	str	r2, [sp, #12]
    8aa8:	9304      	str	r3, [sp, #16]
    8aaa:	f8cd c014 	str.w	ip, [sp, #20]
    8aae:	f04f 0e00 	mov.w	lr, #0
    8ab2:	f8cd e004 	str.w	lr, [sp, #4]
    8ab6:	f8cd e000 	str.w	lr, [sp]
    8aba:	f8cd e000 	str.w	lr, [sp]
    8abe:	6001      	str	r1, [r0, #0]
    8ac0:	6042      	str	r2, [r0, #4]
    8ac2:	9900      	ldr	r1, [sp, #0]
    8ac4:	9a01      	ldr	r2, [sp, #4]
    8ac6:	6081      	str	r1, [r0, #8]
    8ac8:	60c2      	str	r2, [r0, #12]
    8aca:	6103      	str	r3, [r0, #16]
    8acc:	f8c0 c014 	str.w	ip, [r0, #20]
    8ad0:	b006      	add	sp, #24
    8ad2:	bd80      	pop	{r7, pc}

00008ad4 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>:
    8ad4:	b082      	sub	sp, #8
    8ad6:	9001      	str	r0, [sp, #4]
    8ad8:	7800      	ldrb	r0, [r0, #0]
    8ada:	07c0      	lsls	r0, r0, #31
    8adc:	2800      	cmp	r0, #0
    8ade:	d004      	beq.n	8aea <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x16>
    8ae0:	e7ff      	b.n	8ae2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0xe>
    8ae2:	2000      	movs	r0, #0
    8ae4:	f88d 0003 	strb.w	r0, [sp, #3]
    8ae8:	e003      	b.n	8af2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    8aea:	2001      	movs	r0, #1
    8aec:	f88d 0003 	strb.w	r0, [sp, #3]
    8af0:	e7ff      	b.n	8af2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    8af2:	f89d 0003 	ldrb.w	r0, [sp, #3]
    8af6:	b002      	add	sp, #8
    8af8:	4770      	bx	lr

00008afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>:
    8afa:	b08a      	sub	sp, #40	; 0x28
    8afc:	9005      	str	r0, [sp, #20]
    8afe:	9107      	str	r1, [sp, #28]
    8b00:	9208      	str	r2, [sp, #32]
    8b02:	9805      	ldr	r0, [sp, #20]
    8b04:	f1b0 0c01 	subs.w	ip, r0, #1
    8b08:	bf18      	it	ne
    8b0a:	f04f 0c01 	movne.w	ip, #1
    8b0e:	2801      	cmp	r0, #1
    8b10:	9304      	str	r3, [sp, #16]
    8b12:	9203      	str	r2, [sp, #12]
    8b14:	9102      	str	r1, [sp, #8]
    8b16:	d010      	beq.n	8b3a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x40>
    8b18:	e7ff      	b.n	8b1a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x20>
    8b1a:	9805      	ldr	r0, [sp, #20]
    8b1c:	9006      	str	r0, [sp, #24]
    8b1e:	4668      	mov	r0, sp
    8b20:	9904      	ldr	r1, [sp, #16]
    8b22:	6001      	str	r1, [r0, #0]
    8b24:	f24e 331c 	movw	r3, #58140	; 0xe31c
    8b28:	f2c0 0301 	movt	r3, #1
    8b2c:	aa06      	add	r2, sp, #24
    8b2e:	9802      	ldr	r0, [sp, #8]
    8b30:	9903      	ldr	r1, [sp, #12]
    8b32:	f00e feeb 	bl	1790c <_ZN4core6option18expect_none_failed17h54d938081af97677E>
    8b36:	defe      	udf	#254	; 0xfe
    8b38:	defe      	udf	#254	; 0xfe
    8b3a:	9805      	ldr	r0, [sp, #20]
    8b3c:	2801      	cmp	r0, #1
    8b3e:	d102      	bne.n	8b46 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x4c>
    8b40:	e7ff      	b.n	8b42 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>
    8b42:	b00a      	add	sp, #40	; 0x28
    8b44:	4770      	bx	lr
    8b46:	e7fc      	b.n	8b42 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>

00008b48 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>:
    8b48:	b580      	push	{r7, lr}
    8b4a:	b082      	sub	sp, #8
    8b4c:	9001      	str	r0, [sp, #4]
    8b4e:	f7ff ffc1 	bl	8ad4 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>
    8b52:	9000      	str	r0, [sp, #0]
    8b54:	e7ff      	b.n	8b56 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E+0xe>
    8b56:	2001      	movs	r0, #1
    8b58:	9900      	ldr	r1, [sp, #0]
    8b5a:	4388      	bics	r0, r1
    8b5c:	b002      	add	sp, #8
    8b5e:	bd80      	pop	{r7, pc}

00008b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>:
    8b60:	b082      	sub	sp, #8
    8b62:	9001      	str	r0, [sp, #4]
    8b64:	9000      	str	r0, [sp, #0]
    8b66:	9800      	ldr	r0, [sp, #0]
    8b68:	b002      	add	sp, #8
    8b6a:	4770      	bx	lr

00008b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>:
    8b6c:	b081      	sub	sp, #4
    8b6e:	4601      	mov	r1, r0
    8b70:	f88d 0003 	strb.w	r0, [sp, #3]
    8b74:	b001      	add	sp, #4
    8b76:	4770      	bx	lr

00008b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>:
    8b78:	b081      	sub	sp, #4
    8b7a:	9000      	str	r0, [sp, #0]
    8b7c:	b001      	add	sp, #4
    8b7e:	4770      	bx	lr

00008b80 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E>:
    8b80:	b580      	push	{r7, lr}
    8b82:	b08a      	sub	sp, #40	; 0x28
    8b84:	9007      	str	r0, [sp, #28]
    8b86:	9108      	str	r1, [sp, #32]
    8b88:	9209      	str	r2, [sp, #36]	; 0x24
    8b8a:	2300      	movs	r3, #0
    8b8c:	9305      	str	r3, [sp, #20]
    8b8e:	9006      	str	r0, [sp, #24]
    8b90:	9805      	ldr	r0, [sp, #20]
    8b92:	9b06      	ldr	r3, [sp, #24]
    8b94:	9104      	str	r1, [sp, #16]
    8b96:	4619      	mov	r1, r3
    8b98:	9b04      	ldr	r3, [sp, #16]
    8b9a:	9203      	str	r2, [sp, #12]
    8b9c:	461a      	mov	r2, r3
    8b9e:	9b03      	ldr	r3, [sp, #12]
    8ba0:	f000 f828 	bl	8bf4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>
    8ba4:	9002      	str	r0, [sp, #8]
    8ba6:	9101      	str	r1, [sp, #4]
    8ba8:	e7ff      	b.n	8baa <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E+0x2a>
    8baa:	9802      	ldr	r0, [sp, #8]
    8bac:	9901      	ldr	r1, [sp, #4]
    8bae:	b00a      	add	sp, #40	; 0x28
    8bb0:	bd80      	pop	{r7, pc}

00008bb2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E>:
    8bb2:	b580      	push	{r7, lr}
    8bb4:	b08a      	sub	sp, #40	; 0x28
    8bb6:	9006      	str	r0, [sp, #24]
    8bb8:	9107      	str	r1, [sp, #28]
    8bba:	9208      	str	r2, [sp, #32]
    8bbc:	9309      	str	r3, [sp, #36]	; 0x24
    8bbe:	9005      	str	r0, [sp, #20]
    8bc0:	4610      	mov	r0, r2
    8bc2:	9104      	str	r1, [sp, #16]
    8bc4:	4619      	mov	r1, r3
    8bc6:	f009 f979 	bl	11ebc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    8bca:	9003      	str	r0, [sp, #12]
    8bcc:	e7ff      	b.n	8bce <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x1c>
    8bce:	9803      	ldr	r0, [sp, #12]
    8bd0:	9905      	ldr	r1, [sp, #20]
    8bd2:	f009 f8fa 	bl	11dca <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    8bd6:	9002      	str	r0, [sp, #8]
    8bd8:	e7ff      	b.n	8bda <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x28>
    8bda:	9804      	ldr	r0, [sp, #16]
    8bdc:	9905      	ldr	r1, [sp, #20]
    8bde:	1a41      	subs	r1, r0, r1
    8be0:	9802      	ldr	r0, [sp, #8]
    8be2:	f000 f8b7 	bl	8d54 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
    8be6:	9001      	str	r0, [sp, #4]
    8be8:	9100      	str	r1, [sp, #0]
    8bea:	e7ff      	b.n	8bec <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x3a>
    8bec:	9801      	ldr	r0, [sp, #4]
    8bee:	9900      	ldr	r1, [sp, #0]
    8bf0:	b00a      	add	sp, #40	; 0x28
    8bf2:	bd80      	pop	{r7, pc}

00008bf4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>:
    8bf4:	b580      	push	{r7, lr}
    8bf6:	b08c      	sub	sp, #48	; 0x30
    8bf8:	9008      	str	r0, [sp, #32]
    8bfa:	9109      	str	r1, [sp, #36]	; 0x24
    8bfc:	920a      	str	r2, [sp, #40]	; 0x28
    8bfe:	930b      	str	r3, [sp, #44]	; 0x2c
    8c00:	4288      	cmp	r0, r1
    8c02:	9307      	str	r3, [sp, #28]
    8c04:	9206      	str	r2, [sp, #24]
    8c06:	9105      	str	r1, [sp, #20]
    8c08:	9004      	str	r0, [sp, #16]
    8c0a:	d806      	bhi.n	8c1a <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x26>
    8c0c:	e7ff      	b.n	8c0e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x1a>
    8c0e:	9806      	ldr	r0, [sp, #24]
    8c10:	9907      	ldr	r1, [sp, #28]
    8c12:	f009 f96a 	bl	11eea <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8c16:	9003      	str	r0, [sp, #12]
    8c18:	e004      	b.n	8c24 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x30>
    8c1a:	9804      	ldr	r0, [sp, #16]
    8c1c:	9905      	ldr	r1, [sp, #20]
    8c1e:	f00f fe18 	bl	18852 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
    8c22:	defe      	udf	#254	; 0xfe
    8c24:	9805      	ldr	r0, [sp, #20]
    8c26:	9903      	ldr	r1, [sp, #12]
    8c28:	4288      	cmp	r0, r1
    8c2a:	d809      	bhi.n	8c40 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x4c>
    8c2c:	e7ff      	b.n	8c2e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x3a>
    8c2e:	9804      	ldr	r0, [sp, #16]
    8c30:	9905      	ldr	r1, [sp, #20]
    8c32:	9a06      	ldr	r2, [sp, #24]
    8c34:	9b07      	ldr	r3, [sp, #28]
    8c36:	f7ff ffbc 	bl	8bb2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E>
    8c3a:	9002      	str	r0, [sp, #8]
    8c3c:	9101      	str	r1, [sp, #4]
    8c3e:	e00a      	b.n	8c56 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x62>
    8c40:	9806      	ldr	r0, [sp, #24]
    8c42:	9907      	ldr	r1, [sp, #28]
    8c44:	f009 f951 	bl	11eea <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8c48:	9000      	str	r0, [sp, #0]
    8c4a:	e7ff      	b.n	8c4c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x58>
    8c4c:	9805      	ldr	r0, [sp, #20]
    8c4e:	9900      	ldr	r1, [sp, #0]
    8c50:	f00f fddd 	bl	1880e <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
    8c54:	defe      	udf	#254	; 0xfe
    8c56:	9802      	ldr	r0, [sp, #8]
    8c58:	9901      	ldr	r1, [sp, #4]
    8c5a:	b00c      	add	sp, #48	; 0x30
    8c5c:	bd80      	pop	{r7, pc}

00008c5e <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>:
    #[doc = " - __`evq`__: The event queue to pull an event from"]
    #[doc = ""]
    #[doc = " Return: The event from the queue"]
    pub fn os_eventq_get(arg1: *mut os_eventq) -> *mut os_event;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8c5e:	b580      	push	{r7, lr}
    8c60:	b082      	sub	sp, #8
    8c62:	9001      	str	r0, [sp, #4]
    8c64:	f012 f95a 	bl	1af1c <os_eventq_run>
    8c68:	e7ff      	b.n	8c6a <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE+0xc>
    8c6a:	2001      	movs	r0, #1
    8c6c:	b002      	add	sp, #8
    8c6e:	bd80      	pop	{r7, pc}

00008c70 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>:
    #[doc = ""]
    #[doc = " - __`evq`__: The event queue to remove the event from"]
    #[doc = " - __`ev`__:  The event to remove from the queue"]
    pub fn os_eventq_remove(arg1: *mut os_eventq, arg2: *mut os_event);
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8c70:	b580      	push	{r7, lr}
    8c72:	b084      	sub	sp, #16
    8c74:	9002      	str	r0, [sp, #8]
    8c76:	f012 f97d 	bl	1af74 <os_eventq_dflt_get>
    8c7a:	4601      	mov	r1, r0
    8c7c:	9003      	str	r0, [sp, #12]
    8c7e:	9101      	str	r1, [sp, #4]
    8c80:	e7ff      	b.n	8c82 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE+0x12>
    8c82:	9801      	ldr	r0, [sp, #4]
    8c84:	9902      	ldr	r1, [sp, #8]
    8c86:	6048      	str	r0, [r1, #4]
    8c88:	2200      	movs	r2, #0
    8c8a:	600a      	str	r2, [r1, #0]
    8c8c:	b004      	add	sp, #16
    8c8e:	bd80      	pop	{r7, pc}

00008c90 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>:
impl Default for os_task_stailq {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8c90:	b570      	push	{r4, r5, r6, lr}
    8c92:	b09c      	sub	sp, #112	; 0x70
    8c94:	f8dd c090 	ldr.w	ip, [sp, #144]	; 0x90
    8c98:	f8dd e08c 	ldr.w	lr, [sp, #140]	; 0x8c
    8c9c:	9c22      	ldr	r4, [sp, #136]	; 0x88
    8c9e:	9d21      	ldr	r5, [sp, #132]	; 0x84
    8ca0:	9e20      	ldr	r6, [sp, #128]	; 0x80
    8ca2:	9013      	str	r0, [sp, #76]	; 0x4c
    8ca4:	9114      	str	r1, [sp, #80]	; 0x50
    8ca6:	9215      	str	r2, [sp, #84]	; 0x54
    8ca8:	9316      	str	r3, [sp, #88]	; 0x58
    8caa:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
    8cae:	9418      	str	r4, [sp, #96]	; 0x60
    8cb0:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
    8cb4:	f8ad c06a 	strh.w	ip, [sp, #106]	; 0x6a
    8cb8:	9011      	str	r0, [sp, #68]	; 0x44
    8cba:	4608      	mov	r0, r1
    8cbc:	9310      	str	r3, [sp, #64]	; 0x40
    8cbe:	920f      	str	r2, [sp, #60]	; 0x3c
    8cc0:	910e      	str	r1, [sp, #56]	; 0x38
    8cc2:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    8cc6:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
    8cca:	940b      	str	r4, [sp, #44]	; 0x2c
    8ccc:	950a      	str	r5, [sp, #40]	; 0x28
    8cce:	9609      	str	r6, [sp, #36]	; 0x24
    8cd0:	f7ff fe2a 	bl	8928 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>
    8cd4:	e7ff      	b.n	8cd6 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x46>
    8cd6:	980e      	ldr	r0, [sp, #56]	; 0x38
    8cd8:	f7ff fe08 	bl	88ec <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>
    8cdc:	9008      	str	r0, [sp, #32]
    8cde:	e7ff      	b.n	8ce0 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x50>
    8ce0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8ce2:	990c      	ldr	r1, [sp, #48]	; 0x30
    8ce4:	f000 f93b 	bl	8f5e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>
    8ce8:	9007      	str	r0, [sp, #28]
    8cea:	e7ff      	b.n	8cec <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x5c>
    8cec:	980d      	ldr	r0, [sp, #52]	; 0x34
    8cee:	b281      	uxth	r1, r0
    8cf0:	466a      	mov	r2, sp
    8cf2:	60d1      	str	r1, [r2, #12]
    8cf4:	9907      	ldr	r1, [sp, #28]
    8cf6:	6091      	str	r1, [r2, #8]
    8cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8cfa:	6053      	str	r3, [r2, #4]
    8cfc:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    8d00:	fa5f fe8c 	uxtb.w	lr, ip
    8d04:	f8c2 e000 	str.w	lr, [r2]
    8d08:	9811      	ldr	r0, [sp, #68]	; 0x44
    8d0a:	9908      	ldr	r1, [sp, #32]
    8d0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8d0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8d10:	f012 fed0 	bl	1bab4 <os_task_init>
    8d14:	4601      	mov	r1, r0
    8d16:	901b      	str	r0, [sp, #108]	; 0x6c
    8d18:	9106      	str	r1, [sp, #24]
    8d1a:	e7ff      	b.n	8d1c <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x8c>
    8d1c:	9806      	ldr	r0, [sp, #24]
    8d1e:	2800      	cmp	r0, #0
    8d20:	d005      	beq.n	8d2e <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x9e>
    8d22:	e7ff      	b.n	8d24 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x94>
    8d24:	9806      	ldr	r0, [sp, #24]
    8d26:	f7ff fea5 	bl	8a74 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>
    8d2a:	9005      	str	r0, [sp, #20]
    8d2c:	e004      	b.n	8d38 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xa8>
    8d2e:	2000      	movs	r0, #0
    8d30:	9012      	str	r0, [sp, #72]	; 0x48
    8d32:	2001      	movs	r0, #1
    8d34:	9012      	str	r0, [sp, #72]	; 0x48
    8d36:	e002      	b.n	8d3e <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    8d38:	9805      	ldr	r0, [sp, #20]
    8d3a:	9012      	str	r0, [sp, #72]	; 0x48
    8d3c:	e7ff      	b.n	8d3e <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    8d3e:	9812      	ldr	r0, [sp, #72]	; 0x48
    8d40:	b01c      	add	sp, #112	; 0x70
    8d42:	bd70      	pop	{r4, r5, r6, pc}

00008d44 <_ZN4core3ptr13drop_in_place17h1982c2483e0a2028E>:
    8d44:	b081      	sub	sp, #4
    8d46:	9000      	str	r0, [sp, #0]
    8d48:	b001      	add	sp, #4
    8d4a:	4770      	bx	lr

00008d4c <_ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E>:
    8d4c:	b081      	sub	sp, #4
    8d4e:	9000      	str	r0, [sp, #0]
    8d50:	b001      	add	sp, #4
    8d52:	4770      	bx	lr

00008d54 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>:
    8d54:	b580      	push	{r7, lr}
    8d56:	b084      	sub	sp, #16
    8d58:	9002      	str	r0, [sp, #8]
    8d5a:	9103      	str	r1, [sp, #12]
    8d5c:	f000 f993 	bl	9086 <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>
    8d60:	9001      	str	r0, [sp, #4]
    8d62:	9100      	str	r1, [sp, #0]
    8d64:	e7ff      	b.n	8d66 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE+0x12>
    8d66:	9801      	ldr	r0, [sp, #4]
    8d68:	9900      	ldr	r1, [sp, #0]
    8d6a:	b004      	add	sp, #16
    8d6c:	bd80      	pop	{r7, pc}

00008d6e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>:
    8d6e:	b5b0      	push	{r4, r5, r7, lr}
    8d70:	b0b8      	sub	sp, #224	; 0xe0
    8d72:	902f      	str	r0, [sp, #188]	; 0xbc
    8d74:	9130      	str	r1, [sp, #192]	; 0xc0
    8d76:	9231      	str	r2, [sp, #196]	; 0xc4
    8d78:	9332      	str	r3, [sp, #200]	; 0xc8
    8d7a:	9013      	str	r0, [sp, #76]	; 0x4c
    8d7c:	9112      	str	r1, [sp, #72]	; 0x48
    8d7e:	9311      	str	r3, [sp, #68]	; 0x44
    8d80:	9210      	str	r2, [sp, #64]	; 0x40
    8d82:	f009 f8b2 	bl	11eea <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8d86:	9016      	str	r0, [sp, #88]	; 0x58
    8d88:	e7ff      	b.n	8d8a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x1c>
    8d8a:	9810      	ldr	r0, [sp, #64]	; 0x40
    8d8c:	9911      	ldr	r1, [sp, #68]	; 0x44
    8d8e:	f009 f8ac 	bl	11eea <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8d92:	9017      	str	r0, [sp, #92]	; 0x5c
    8d94:	e7ff      	b.n	8d96 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x28>
    8d96:	a816      	add	r0, sp, #88	; 0x58
    8d98:	9014      	str	r0, [sp, #80]	; 0x50
    8d9a:	a817      	add	r0, sp, #92	; 0x5c
    8d9c:	9015      	str	r0, [sp, #84]	; 0x54
    8d9e:	9814      	ldr	r0, [sp, #80]	; 0x50
    8da0:	9033      	str	r0, [sp, #204]	; 0xcc
    8da2:	9915      	ldr	r1, [sp, #84]	; 0x54
    8da4:	9134      	str	r1, [sp, #208]	; 0xd0
    8da6:	6802      	ldr	r2, [r0, #0]
    8da8:	680b      	ldr	r3, [r1, #0]
    8daa:	429a      	cmp	r2, r3
    8dac:	900f      	str	r0, [sp, #60]	; 0x3c
    8dae:	910e      	str	r1, [sp, #56]	; 0x38
    8db0:	d106      	bne.n	8dc0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x52>
    8db2:	e7ff      	b.n	8db4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x46>
    8db4:	9810      	ldr	r0, [sp, #64]	; 0x40
    8db6:	9911      	ldr	r1, [sp, #68]	; 0x44
    8db8:	f009 f89f 	bl	11efa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    8dbc:	900d      	str	r0, [sp, #52]	; 0x34
    8dbe:	e072      	b.n	8ea6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x138>
    8dc0:	f24e 3080 	movw	r0, #58240	; 0xe380
    8dc4:	f2c0 0001 	movt	r0, #1
    8dc8:	6801      	ldr	r1, [r0, #0]
    8dca:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8dcc:	9027      	str	r0, [sp, #156]	; 0x9c
    8dce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8dd0:	9228      	str	r2, [sp, #160]	; 0xa0
    8dd2:	f24e 33c0 	movw	r3, #58304	; 0xe3c0
    8dd6:	f2c0 0301 	movt	r3, #1
    8dda:	681b      	ldr	r3, [r3, #0]
    8ddc:	f24e 3cc4 	movw	ip, #58308	; 0xe3c4
    8de0:	f2c0 0c01 	movt	ip, #1
    8de4:	f8dc c000 	ldr.w	ip, [ip]
    8de8:	46ee      	mov	lr, sp
    8dea:	2400      	movs	r4, #0
    8dec:	f8ce 4000 	str.w	r4, [lr]
    8df0:	a829      	add	r0, sp, #164	; 0xa4
    8df2:	2201      	movs	r2, #1
    8df4:	910c      	str	r1, [sp, #48]	; 0x30
    8df6:	4619      	mov	r1, r3
    8df8:	4663      	mov	r3, ip
    8dfa:	f7ff fe4f 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8dfe:	e7ff      	b.n	8e00 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x92>
    8e00:	a827      	add	r0, sp, #156	; 0x9c
    8e02:	9024      	str	r0, [sp, #144]	; 0x90
    8e04:	a828      	add	r0, sp, #160	; 0xa0
    8e06:	9025      	str	r0, [sp, #148]	; 0x94
    8e08:	a829      	add	r0, sp, #164	; 0xa4
    8e0a:	9026      	str	r0, [sp, #152]	; 0x98
    8e0c:	9824      	ldr	r0, [sp, #144]	; 0x90
    8e0e:	9035      	str	r0, [sp, #212]	; 0xd4
    8e10:	9925      	ldr	r1, [sp, #148]	; 0x94
    8e12:	9136      	str	r1, [sp, #216]	; 0xd8
    8e14:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8e16:	9237      	str	r2, [sp, #220]	; 0xdc
    8e18:	f242 6319 	movw	r3, #9753	; 0x2619
    8e1c:	f2c0 0301 	movt	r3, #1
    8e20:	910b      	str	r1, [sp, #44]	; 0x2c
    8e22:	4619      	mov	r1, r3
    8e24:	920a      	str	r2, [sp, #40]	; 0x28
    8e26:	f009 fc05 	bl	12634 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    8e2a:	9009      	str	r0, [sp, #36]	; 0x24
    8e2c:	9108      	str	r1, [sp, #32]
    8e2e:	e7ff      	b.n	8e30 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xc2>
    8e30:	f242 6119 	movw	r1, #9753	; 0x2619
    8e34:	f2c0 0101 	movt	r1, #1
    8e38:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8e3a:	f009 fbfb 	bl	12634 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    8e3e:	9007      	str	r0, [sp, #28]
    8e40:	9106      	str	r1, [sp, #24]
    8e42:	e7ff      	b.n	8e44 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xd6>
    8e44:	f647 7137 	movw	r1, #32567	; 0x7f37
    8e48:	f2c0 0101 	movt	r1, #1
    8e4c:	980a      	ldr	r0, [sp, #40]	; 0x28
    8e4e:	f000 fac3 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    8e52:	9005      	str	r0, [sp, #20]
    8e54:	9104      	str	r1, [sp, #16]
    8e56:	e7ff      	b.n	8e58 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xea>
    8e58:	9809      	ldr	r0, [sp, #36]	; 0x24
    8e5a:	901e      	str	r0, [sp, #120]	; 0x78
    8e5c:	9908      	ldr	r1, [sp, #32]
    8e5e:	911f      	str	r1, [sp, #124]	; 0x7c
    8e60:	9a07      	ldr	r2, [sp, #28]
    8e62:	9220      	str	r2, [sp, #128]	; 0x80
    8e64:	9b06      	ldr	r3, [sp, #24]
    8e66:	9321      	str	r3, [sp, #132]	; 0x84
    8e68:	f8dd c014 	ldr.w	ip, [sp, #20]
    8e6c:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    8e70:	f8dd e010 	ldr.w	lr, [sp, #16]
    8e74:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
    8e78:	466c      	mov	r4, sp
    8e7a:	2503      	movs	r5, #3
    8e7c:	6025      	str	r5, [r4, #0]
    8e7e:	a818      	add	r0, sp, #96	; 0x60
    8e80:	ab1e      	add	r3, sp, #120	; 0x78
    8e82:	990c      	ldr	r1, [sp, #48]	; 0x30
    8e84:	462a      	mov	r2, r5
    8e86:	f7ff fe09 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8e8a:	e7ff      	b.n	8e8c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x11e>
    8e8c:	f24e 4014 	movw	r0, #58388	; 0xe414
    8e90:	f2c0 0001 	movt	r0, #1
    8e94:	f00e fd61 	bl	1795a <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    8e98:	9003      	str	r0, [sp, #12]
    8e9a:	e7ff      	b.n	8e9c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x12e>
    8e9c:	a818      	add	r0, sp, #96	; 0x60
    8e9e:	9903      	ldr	r1, [sp, #12]
    8ea0:	f00e fd98 	bl	179d4 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    8ea4:	defe      	udf	#254	; 0xfe
    8ea6:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8ea8:	9912      	ldr	r1, [sp, #72]	; 0x48
    8eaa:	f009 f807 	bl	11ebc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    8eae:	9002      	str	r0, [sp, #8]
    8eb0:	e7ff      	b.n	8eb2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x144>
    8eb2:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8eb4:	9912      	ldr	r1, [sp, #72]	; 0x48
    8eb6:	f009 f818 	bl	11eea <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8eba:	9001      	str	r0, [sp, #4]
    8ebc:	e7ff      	b.n	8ebe <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x150>
    8ebe:	980d      	ldr	r0, [sp, #52]	; 0x34
    8ec0:	9902      	ldr	r1, [sp, #8]
    8ec2:	9a01      	ldr	r2, [sp, #4]
    8ec4:	f008 fe1d 	bl	11b02 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    8ec8:	e7ff      	b.n	8eca <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x15c>
    8eca:	b038      	add	sp, #224	; 0xe0
    8ecc:	bdb0      	pop	{r4, r5, r7, pc}

00008ece <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>:
    8ece:	b580      	push	{r7, lr}
    8ed0:	b086      	sub	sp, #24
    8ed2:	9003      	str	r0, [sp, #12]
    8ed4:	9104      	str	r1, [sp, #16]
    8ed6:	9205      	str	r2, [sp, #20]
    8ed8:	9002      	str	r0, [sp, #8]
    8eda:	4610      	mov	r0, r2
    8edc:	9a02      	ldr	r2, [sp, #8]
    8ede:	9101      	str	r1, [sp, #4]
    8ee0:	4611      	mov	r1, r2
    8ee2:	9a01      	ldr	r2, [sp, #4]
    8ee4:	f000 f861 	bl	8faa <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>
    8ee8:	9000      	str	r0, [sp, #0]
    8eea:	e7ff      	b.n	8eec <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE+0x1e>
    8eec:	9800      	ldr	r0, [sp, #0]
    8eee:	b006      	add	sp, #24
    8ef0:	bd80      	pop	{r7, pc}

00008ef2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>:
    8ef2:	b580      	push	{r7, lr}
    8ef4:	b08e      	sub	sp, #56	; 0x38
    8ef6:	9009      	str	r0, [sp, #36]	; 0x24
    8ef8:	910a      	str	r1, [sp, #40]	; 0x28
    8efa:	9005      	str	r0, [sp, #20]
    8efc:	9104      	str	r1, [sp, #16]
    8efe:	f008 fff4 	bl	11eea <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8f02:	9003      	str	r0, [sp, #12]
    8f04:	e7ff      	b.n	8f06 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x14>
    8f06:	2101      	movs	r1, #1
    8f08:	9803      	ldr	r0, [sp, #12]
    8f0a:	f000 fa7a 	bl	9402 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>
    8f0e:	9002      	str	r0, [sp, #8]
    8f10:	9101      	str	r1, [sp, #4]
    8f12:	e7ff      	b.n	8f14 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x22>
    8f14:	9802      	ldr	r0, [sp, #8]
    8f16:	9901      	ldr	r1, [sp, #4]
    8f18:	f000 f97c 	bl	9214 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>
    8f1c:	9108      	str	r1, [sp, #32]
    8f1e:	9007      	str	r0, [sp, #28]
    8f20:	e7ff      	b.n	8f22 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x30>
    8f22:	9807      	ldr	r0, [sp, #28]
    8f24:	2800      	cmp	r0, #0
    8f26:	d001      	beq.n	8f2c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x3a>
    8f28:	e7ff      	b.n	8f2a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x38>
    8f2a:	e00c      	b.n	8f46 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x54>
    8f2c:	9808      	ldr	r0, [sp, #32]
    8f2e:	900c      	str	r0, [sp, #48]	; 0x30
    8f30:	900d      	str	r0, [sp, #52]	; 0x34
    8f32:	9905      	ldr	r1, [sp, #20]
    8f34:	9000      	str	r0, [sp, #0]
    8f36:	4608      	mov	r0, r1
    8f38:	9904      	ldr	r1, [sp, #16]
    8f3a:	9a00      	ldr	r2, [sp, #0]
    8f3c:	f7ff ffc7 	bl	8ece <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>
    8f40:	9006      	str	r0, [sp, #24]
    8f42:	e00b      	b.n	8f5c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x6a>
    8f44:	defe      	udf	#254	; 0xfe
    8f46:	f008 fb9f 	bl	11688 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>
    8f4a:	e002      	b.n	8f52 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x60>
    8f4c:	9806      	ldr	r0, [sp, #24]
    8f4e:	b00e      	add	sp, #56	; 0x38
    8f50:	bd80      	pop	{r7, pc}
    8f52:	f000 f959 	bl	9208 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>
    8f56:	9006      	str	r0, [sp, #24]
    8f58:	e7ff      	b.n	8f5a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x68>
    8f5a:	e7f7      	b.n	8f4c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>
    8f5c:	e7f6      	b.n	8f4c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>

00008f5e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>:
    8f5e:	b082      	sub	sp, #8
    8f60:	9000      	str	r0, [sp, #0]
    8f62:	9101      	str	r1, [sp, #4]
    8f64:	b002      	add	sp, #8
    8f66:	4770      	bx	lr

00008f68 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E>:
    8f68:	b580      	push	{r7, lr}
    8f6a:	b088      	sub	sp, #32
    8f6c:	9005      	str	r0, [sp, #20]
    8f6e:	9106      	str	r1, [sp, #24]
    8f70:	9207      	str	r2, [sp, #28]
    8f72:	9004      	str	r0, [sp, #16]
    8f74:	4610      	mov	r0, r2
    8f76:	9a04      	ldr	r2, [sp, #16]
    8f78:	9103      	str	r1, [sp, #12]
    8f7a:	4611      	mov	r1, r2
    8f7c:	9a03      	ldr	r2, [sp, #12]
    8f7e:	f7ff fdff 	bl	8b80 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E>
    8f82:	9002      	str	r0, [sp, #8]
    8f84:	9101      	str	r1, [sp, #4]
    8f86:	e7ff      	b.n	8f88 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E+0x20>
    8f88:	9802      	ldr	r0, [sp, #8]
    8f8a:	9901      	ldr	r1, [sp, #4]
    8f8c:	b008      	add	sp, #32
    8f8e:	bd80      	pop	{r7, pc}

00008f90 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>:
    8f90:	b580      	push	{r7, lr}
    8f92:	b084      	sub	sp, #16
    8f94:	9002      	str	r0, [sp, #8]
    8f96:	9103      	str	r1, [sp, #12]
    8f98:	f008 fb33 	bl	11602 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>
    8f9c:	9001      	str	r0, [sp, #4]
    8f9e:	9100      	str	r1, [sp, #0]
    8fa0:	e7ff      	b.n	8fa2 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E+0x12>
    8fa2:	9801      	ldr	r0, [sp, #4]
    8fa4:	9900      	ldr	r1, [sp, #0]
    8fa6:	b004      	add	sp, #16
    8fa8:	bd80      	pop	{r7, pc}

00008faa <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>:
    8faa:	b580      	push	{r7, lr}
    8fac:	b08a      	sub	sp, #40	; 0x28
    8fae:	9007      	str	r0, [sp, #28]
    8fb0:	9108      	str	r1, [sp, #32]
    8fb2:	9209      	str	r2, [sp, #36]	; 0x24
    8fb4:	9005      	str	r0, [sp, #20]
    8fb6:	4608      	mov	r0, r1
    8fb8:	9104      	str	r1, [sp, #16]
    8fba:	4611      	mov	r1, r2
    8fbc:	9203      	str	r2, [sp, #12]
    8fbe:	f008 ff94 	bl	11eea <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8fc2:	9002      	str	r0, [sp, #8]
    8fc4:	e7ff      	b.n	8fc6 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x1c>
    8fc6:	9805      	ldr	r0, [sp, #20]
    8fc8:	9902      	ldr	r1, [sp, #8]
    8fca:	4288      	cmp	r0, r1
    8fcc:	d303      	bcc.n	8fd6 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x2c>
    8fce:	e7ff      	b.n	8fd0 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x26>
    8fd0:	2000      	movs	r0, #0
    8fd2:	9006      	str	r0, [sp, #24]
    8fd4:	e009      	b.n	8fea <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    8fd6:	9805      	ldr	r0, [sp, #20]
    8fd8:	9904      	ldr	r1, [sp, #16]
    8fda:	9a03      	ldr	r2, [sp, #12]
    8fdc:	f008 ffb1 	bl	11f42 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>
    8fe0:	9001      	str	r0, [sp, #4]
    8fe2:	e7ff      	b.n	8fe4 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x3a>
    8fe4:	9801      	ldr	r0, [sp, #4]
    8fe6:	9006      	str	r0, [sp, #24]
    8fe8:	e7ff      	b.n	8fea <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    8fea:	9806      	ldr	r0, [sp, #24]
    8fec:	b00a      	add	sp, #40	; 0x28
    8fee:	bd80      	pop	{r7, pc}

00008ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>:
//! Display messages on Arm Semihosting Console (via OpenOCD)

///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn print(msg: &str) {
    8ff0:	b580      	push	{r7, lr}
    8ff2:	b08a      	sub	sp, #40	; 0x28
    8ff4:	9004      	str	r0, [sp, #16]
    8ff6:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    let buf = msg.as_ptr();
    8ff8:	9003      	str	r0, [sp, #12]
    8ffa:	9102      	str	r1, [sp, #8]
    8ffc:	f000 f86e 	bl	90dc <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    9000:	4601      	mov	r1, r0
    9002:	9006      	str	r0, [sp, #24]
    9004:	9101      	str	r1, [sp, #4]
    9006:	e7ff      	b.n	9008 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x18>
    let len = msg.len() as u32;
    9008:	9803      	ldr	r0, [sp, #12]
    900a:	9902      	ldr	r1, [sp, #8]
    900c:	f000 f850 	bl	90b0 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    9010:	9000      	str	r0, [sp, #0]
    9012:	e7ff      	b.n	9014 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x24>
    9014:	9800      	ldr	r0, [sp, #0]
    9016:	9007      	str	r0, [sp, #28]
    9018:	2100      	movs	r1, #0

    //  TODO: Dispatch the Mynewt C function `console_buffer`.
    //  TODO: Use a procedural macro to compute the hash of function name `console_buffer`.
    let hash = 0;  //  TODO
    901a:	9108      	str	r1, [sp, #32]
    //  TODO: Lookup the dispatch address of `console_buffer`.
    let _addr = get_dispatch_address(hash);
    901c:	4608      	mov	r0, r1
    901e:	f000 f809 	bl	9034 <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>
    9022:	9009      	str	r0, [sp, #36]	; 0x24
    9024:	e7ff      	b.n	9026 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x36>
    //  TODO: Call the `console_buffer` function using the dispatch address.
    unsafe { console_buffer(buf, len); }
    9026:	9801      	ldr	r0, [sp, #4]
    9028:	9900      	ldr	r1, [sp, #0]
    902a:	f010 fc35 	bl	19898 <console_buffer>
    902e:	e7ff      	b.n	9030 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x40>
}
    9030:	b00a      	add	sp, #40	; 0x28
    9032:	bd80      	pop	{r7, pc}

00009034 <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>:

/// Return the Dispatch Address for the OS function whose function name hashed is `hash`
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn get_dispatch_address(_hash: u32) -> u32 {
    9034:	b081      	sub	sp, #4
    9036:	9000      	str	r0, [sp, #0]
    9038:	2000      	movs	r0, #0
    //  TODO: Lookup the Dispatch Table for the hash of function name
    0
}
    903a:	b001      	add	sp, #4
    903c:	4770      	bx	lr

0000903e <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>:
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
}

///  Add the string to the output buffer.
pub fn buffer(msg: &str) {
    903e:	b580      	push	{r7, lr}
    9040:	b086      	sub	sp, #24
    9042:	9004      	str	r0, [sp, #16]
    9044:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
    9046:	9003      	str	r0, [sp, #12]
    9048:	9102      	str	r1, [sp, #8]
    904a:	f000 f847 	bl	90dc <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    904e:	9001      	str	r0, [sp, #4]
    9050:	e7ff      	b.n	9052 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x14>
    9052:	9803      	ldr	r0, [sp, #12]
    9054:	9902      	ldr	r1, [sp, #8]
    9056:	f000 f82b 	bl	90b0 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    905a:	9000      	str	r0, [sp, #0]
    905c:	e7ff      	b.n	905e <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x20>
    905e:	9801      	ldr	r0, [sp, #4]
    9060:	9900      	ldr	r1, [sp, #0]
    9062:	f010 fc19 	bl	19898 <console_buffer>
    9066:	e7ff      	b.n	9068 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x2a>
}
    9068:	b006      	add	sp, #24
    906a:	bd80      	pop	{r7, pc}

0000906c <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>:
    unsafe { console_printhex(v); }
}

///  Write an int to the output buffer.
///  C API: `void console_printint(int i)`
pub fn printint(v: i32) {
    906c:	b580      	push	{r7, lr}
    906e:	b082      	sub	sp, #8
    9070:	9001      	str	r0, [sp, #4]
    unsafe { console_printint(v); }
    9072:	f010 fc81 	bl	19978 <console_printint>
    9076:	e7ff      	b.n	9078 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E+0xc>
}
    9078:	b002      	add	sp, #8
    907a:	bd80      	pop	{r7, pc}

0000907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>:
pub fn dump(buffer: *const u8, len: u32) {
    unsafe { console_dump(buffer, len); }
}

///  Flush the output buffer to the console.
pub fn flush() {
    907c:	b580      	push	{r7, lr}
    unsafe { console_flush(); }
    907e:	f010 fbe3 	bl	19848 <console_flush>
    9082:	e7ff      	b.n	9084 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E+0x8>
}
    9084:	bd80      	pop	{r7, pc}

00009086 <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>:
    9086:	b086      	sub	sp, #24
    9088:	9004      	str	r0, [sp, #16]
    908a:	9105      	str	r1, [sp, #20]
    908c:	9002      	str	r0, [sp, #8]
    908e:	9103      	str	r1, [sp, #12]
    9090:	9802      	ldr	r0, [sp, #8]
    9092:	9903      	ldr	r1, [sp, #12]
    9094:	9000      	str	r0, [sp, #0]
    9096:	9101      	str	r1, [sp, #4]
    9098:	9800      	ldr	r0, [sp, #0]
    909a:	9901      	ldr	r1, [sp, #4]
    909c:	b006      	add	sp, #24
    909e:	4770      	bx	lr

000090a0 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>:
    90a0:	b082      	sub	sp, #8
    90a2:	460a      	mov	r2, r1
    90a4:	9000      	str	r0, [sp, #0]
    90a6:	f88d 1007 	strb.w	r1, [sp, #7]
    90aa:	7001      	strb	r1, [r0, #0]
    90ac:	b002      	add	sp, #8
    90ae:	4770      	bx	lr

000090b0 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>:
    90b0:	b580      	push	{r7, lr}
    90b2:	b08a      	sub	sp, #40	; 0x28
    90b4:	9004      	str	r0, [sp, #16]
    90b6:	9105      	str	r1, [sp, #20]
    90b8:	9008      	str	r0, [sp, #32]
    90ba:	9109      	str	r1, [sp, #36]	; 0x24
    90bc:	9006      	str	r0, [sp, #24]
    90be:	9107      	str	r1, [sp, #28]
    90c0:	9806      	ldr	r0, [sp, #24]
    90c2:	9907      	ldr	r1, [sp, #28]
    90c4:	9003      	str	r0, [sp, #12]
    90c6:	9102      	str	r1, [sp, #8]
    90c8:	e7ff      	b.n	90ca <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x1a>
    90ca:	9803      	ldr	r0, [sp, #12]
    90cc:	9902      	ldr	r1, [sp, #8]
    90ce:	f008 ff0c 	bl	11eea <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    90d2:	9001      	str	r0, [sp, #4]
    90d4:	e7ff      	b.n	90d6 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x26>
    90d6:	9801      	ldr	r0, [sp, #4]
    90d8:	b00a      	add	sp, #40	; 0x28
    90da:	bd80      	pop	{r7, pc}

000090dc <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>:
    90dc:	b082      	sub	sp, #8
    90de:	9000      	str	r0, [sp, #0]
    90e0:	9101      	str	r1, [sp, #4]
    90e2:	b002      	add	sp, #8
    90e4:	4770      	bx	lr

000090e6 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E>:
    90e6:	b580      	push	{r7, lr}
    90e8:	b084      	sub	sp, #16
    90ea:	9002      	str	r0, [sp, #8]
    90ec:	9103      	str	r1, [sp, #12]
    90ee:	6800      	ldr	r0, [r0, #0]
    90f0:	f000 f845 	bl	917e <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>
    90f4:	9001      	str	r0, [sp, #4]
    90f6:	e7ff      	b.n	90f8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E+0x12>
    90f8:	9801      	ldr	r0, [sp, #4]
    90fa:	f000 0001 	and.w	r0, r0, #1
    90fe:	b004      	add	sp, #16
    9100:	bd80      	pop	{r7, pc}

00009102 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>:
    9102:	b087      	sub	sp, #28
    9104:	9000      	str	r0, [sp, #0]
    9106:	9101      	str	r1, [sp, #4]
    9108:	2000      	movs	r0, #0
    910a:	f88d 0013 	strb.w	r0, [sp, #19]
    910e:	f88d 0012 	strb.w	r0, [sp, #18]
    9112:	2001      	movs	r0, #1
    9114:	f88d 0013 	strb.w	r0, [sp, #19]
    9118:	f88d 0012 	strb.w	r0, [sp, #18]
    911c:	9800      	ldr	r0, [sp, #0]
    911e:	2800      	cmp	r0, #0
    9120:	d001      	beq.n	9126 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x24>
    9122:	e7ff      	b.n	9124 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x22>
    9124:	e006      	b.n	9134 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x32>
    9126:	2000      	movs	r0, #0
    9128:	f88d 0012 	strb.w	r0, [sp, #18]
    912c:	2001      	movs	r0, #1
    912e:	9002      	str	r0, [sp, #8]
    9130:	e008      	b.n	9144 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    9132:	defe      	udf	#254	; 0xfe
    9134:	2000      	movs	r0, #0
    9136:	f88d 0013 	strb.w	r0, [sp, #19]
    913a:	9901      	ldr	r1, [sp, #4]
    913c:	9106      	str	r1, [sp, #24]
    913e:	9103      	str	r1, [sp, #12]
    9140:	9002      	str	r0, [sp, #8]
    9142:	e7ff      	b.n	9144 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    9144:	f89d 0012 	ldrb.w	r0, [sp, #18]
    9148:	07c0      	lsls	r0, r0, #31
    914a:	2800      	cmp	r0, #0
    914c:	d104      	bne.n	9158 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x56>
    914e:	e7ff      	b.n	9150 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    9150:	9800      	ldr	r0, [sp, #0]
    9152:	2801      	cmp	r0, #1
    9154:	d008      	beq.n	9168 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x66>
    9156:	e011      	b.n	917c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x7a>
    9158:	2000      	movs	r0, #0
    915a:	f88d 0012 	strb.w	r0, [sp, #18]
    915e:	e7f7      	b.n	9150 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    9160:	9802      	ldr	r0, [sp, #8]
    9162:	9903      	ldr	r1, [sp, #12]
    9164:	b007      	add	sp, #28
    9166:	4770      	bx	lr
    9168:	f89d 0013 	ldrb.w	r0, [sp, #19]
    916c:	07c0      	lsls	r0, r0, #31
    916e:	2800      	cmp	r0, #0
    9170:	d0f6      	beq.n	9160 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    9172:	e7ff      	b.n	9174 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x72>
    9174:	2000      	movs	r0, #0
    9176:	f88d 0013 	strb.w	r0, [sp, #19]
    917a:	e7f1      	b.n	9160 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    917c:	e7f0      	b.n	9160 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>

0000917e <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>:
    917e:	b580      	push	{r7, lr}
    9180:	b08e      	sub	sp, #56	; 0x38
    9182:	900b      	str	r0, [sp, #44]	; 0x2c
    9184:	910c      	str	r1, [sp, #48]	; 0x30
    9186:	9003      	str	r0, [sp, #12]
    9188:	9803      	ldr	r0, [sp, #12]
    918a:	6800      	ldr	r0, [r0, #0]
    918c:	2800      	cmp	r0, #0
    918e:	4602      	mov	r2, r0
    9190:	bf18      	it	ne
    9192:	2201      	movne	r2, #1
    9194:	2800      	cmp	r0, #0
    9196:	9101      	str	r1, [sp, #4]
    9198:	d00f      	beq.n	91ba <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x3c>
    919a:	e7ff      	b.n	919c <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x1e>
    919c:	9803      	ldr	r0, [sp, #12]
    919e:	900d      	str	r0, [sp, #52]	; 0x34
    91a0:	f24e 4224 	movw	r2, #58404	; 0xe424
    91a4:	f2c0 0201 	movt	r2, #1
    91a8:	a907      	add	r1, sp, #28
    91aa:	2304      	movs	r3, #4
    91ac:	9000      	str	r0, [sp, #0]
    91ae:	4608      	mov	r0, r1
    91b0:	9901      	ldr	r1, [sp, #4]
    91b2:	f00f fa82 	bl	186ba <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    91b6:	e011      	b.n	91dc <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5e>
    91b8:	defe      	udf	#254	; 0xfe
    91ba:	f24e 4228 	movw	r2, #58408	; 0xe428
    91be:	f2c0 0201 	movt	r2, #1
    91c2:	a804      	add	r0, sp, #16
    91c4:	2304      	movs	r3, #4
    91c6:	9901      	ldr	r1, [sp, #4]
    91c8:	f00f fa77 	bl	186ba <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    91cc:	e7ff      	b.n	91ce <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x50>
    91ce:	a804      	add	r0, sp, #16
    91d0:	f00e fd90 	bl	17cf4 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    91d4:	f88d 000b 	strb.w	r0, [sp, #11]
    91d8:	e7ff      	b.n	91da <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5c>
    91da:	e011      	b.n	9200 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    91dc:	9800      	ldr	r0, [sp, #0]
    91de:	900a      	str	r0, [sp, #40]	; 0x28
    91e0:	f24e 422c 	movw	r2, #58412	; 0xe42c
    91e4:	f2c0 0201 	movt	r2, #1
    91e8:	a807      	add	r0, sp, #28
    91ea:	a90a      	add	r1, sp, #40	; 0x28
    91ec:	f00e fd19 	bl	17c22 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>
    91f0:	e7ff      	b.n	91f2 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x74>
    91f2:	a807      	add	r0, sp, #28
    91f4:	f00e fd7e 	bl	17cf4 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    91f8:	f88d 000b 	strb.w	r0, [sp, #11]
    91fc:	e7ff      	b.n	91fe <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x80>
    91fe:	e7ff      	b.n	9200 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    9200:	f89d 000b 	ldrb.w	r0, [sp, #11]
    9204:	b00e      	add	sp, #56	; 0x38
    9206:	bd80      	pop	{r7, pc}

00009208 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>:
    9208:	b082      	sub	sp, #8
    920a:	2000      	movs	r0, #0
    920c:	9000      	str	r0, [sp, #0]
    920e:	9800      	ldr	r0, [sp, #0]
    9210:	b002      	add	sp, #8
    9212:	4770      	bx	lr

00009214 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>:
    9214:	b580      	push	{r7, lr}
    9216:	b084      	sub	sp, #16
    9218:	9002      	str	r0, [sp, #8]
    921a:	9103      	str	r1, [sp, #12]
    921c:	f7ff ff71 	bl	9102 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>
    9220:	9001      	str	r0, [sp, #4]
    9222:	9100      	str	r1, [sp, #0]
    9224:	e7ff      	b.n	9226 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E+0x12>
    9226:	9801      	ldr	r0, [sp, #4]
    9228:	9900      	ldr	r1, [sp, #0]
    922a:	b004      	add	sp, #16
    922c:	bd80      	pop	{r7, pc}

0000922e <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>:
    922e:	b580      	push	{r7, lr}
    9230:	b094      	sub	sp, #80	; 0x50
    9232:	9008      	str	r0, [sp, #32]
    9234:	9109      	str	r1, [sp, #36]	; 0x24
    9236:	6802      	ldr	r2, [r0, #0]
    9238:	2a00      	cmp	r2, #0
    923a:	bf18      	it	ne
    923c:	2201      	movne	r2, #1
    923e:	f04f 0300 	mov.w	r3, #0
    9242:	930b      	str	r3, [sp, #44]	; 0x2c
    9244:	920a      	str	r2, [sp, #40]	; 0x28
    9246:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    924a:	9104      	str	r1, [sp, #16]
    924c:	9003      	str	r0, [sp, #12]
    924e:	9202      	str	r2, [sp, #8]
    9250:	e7ff      	b.n	9252 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x24>
    9252:	9802      	ldr	r0, [sp, #8]
    9254:	9902      	ldr	r1, [sp, #8]
    9256:	910d      	str	r1, [sp, #52]	; 0x34
    9258:	9a04      	ldr	r2, [sp, #16]
    925a:	6813      	ldr	r3, [r2, #0]
    925c:	2b00      	cmp	r3, #0
    925e:	bf18      	it	ne
    9260:	2301      	movne	r3, #1
    9262:	f04f 0c00 	mov.w	ip, #0
    9266:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    926a:	930e      	str	r3, [sp, #56]	; 0x38
    926c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    926e:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    9272:	9001      	str	r0, [sp, #4]
    9274:	9300      	str	r3, [sp, #0]
    9276:	e7ff      	b.n	9278 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x4a>
    9278:	9800      	ldr	r0, [sp, #0]
    927a:	9011      	str	r0, [sp, #68]	; 0x44
    927c:	9901      	ldr	r1, [sp, #4]
    927e:	4281      	cmp	r1, r0
    9280:	d104      	bne.n	928c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x5e>
    9282:	e7ff      	b.n	9284 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x56>
    9284:	2001      	movs	r0, #1
    9286:	f88d 0017 	strb.w	r0, [sp, #23]
    928a:	e003      	b.n	9294 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    928c:	2000      	movs	r0, #0
    928e:	f88d 0017 	strb.w	r0, [sp, #23]
    9292:	e7ff      	b.n	9294 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    9294:	f89d 0017 	ldrb.w	r0, [sp, #23]
    9298:	07c0      	lsls	r0, r0, #31
    929a:	2800      	cmp	r0, #0
    929c:	d104      	bne.n	92a8 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x7a>
    929e:	e7ff      	b.n	92a0 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x72>
    92a0:	2000      	movs	r0, #0
    92a2:	f88d 0016 	strb.w	r0, [sp, #22]
    92a6:	e01c      	b.n	92e2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    92a8:	9803      	ldr	r0, [sp, #12]
    92aa:	9006      	str	r0, [sp, #24]
    92ac:	9904      	ldr	r1, [sp, #16]
    92ae:	9107      	str	r1, [sp, #28]
    92b0:	9a06      	ldr	r2, [sp, #24]
    92b2:	6812      	ldr	r2, [r2, #0]
    92b4:	2a00      	cmp	r2, #0
    92b6:	d104      	bne.n	92c2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x94>
    92b8:	e7ff      	b.n	92ba <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    92ba:	2001      	movs	r0, #1
    92bc:	f88d 0016 	strb.w	r0, [sp, #22]
    92c0:	e00e      	b.n	92e0 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    92c2:	9807      	ldr	r0, [sp, #28]
    92c4:	6800      	ldr	r0, [r0, #0]
    92c6:	2800      	cmp	r0, #0
    92c8:	d0f7      	beq.n	92ba <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    92ca:	e7ff      	b.n	92cc <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x9e>
    92cc:	9806      	ldr	r0, [sp, #24]
    92ce:	9012      	str	r0, [sp, #72]	; 0x48
    92d0:	9907      	ldr	r1, [sp, #28]
    92d2:	9113      	str	r1, [sp, #76]	; 0x4c
    92d4:	f009 fb3d 	bl	12952 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>
    92d8:	f88d 0016 	strb.w	r0, [sp, #22]
    92dc:	e7ff      	b.n	92de <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb0>
    92de:	e7ff      	b.n	92e0 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    92e0:	e7ff      	b.n	92e2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    92e2:	f89d 0016 	ldrb.w	r0, [sp, #22]
    92e6:	b014      	add	sp, #80	; 0x50
    92e8:	bd80      	pop	{r7, pc}

000092ea <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E>:
    92ea:	b580      	push	{r7, lr}
    92ec:	b084      	sub	sp, #16
    92ee:	9002      	str	r0, [sp, #8]
    92f0:	9103      	str	r1, [sp, #12]
    92f2:	6800      	ldr	r0, [r0, #0]
    92f4:	f009 fabf 	bl	12876 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>
    92f8:	9001      	str	r0, [sp, #4]
    92fa:	e7ff      	b.n	92fc <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E+0x12>
    92fc:	9801      	ldr	r0, [sp, #4]
    92fe:	f000 0001 	and.w	r0, r0, #1
    9302:	b004      	add	sp, #16
    9304:	bd80      	pop	{r7, pc}

00009306 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>:
    9306:	b580      	push	{r7, lr}
    9308:	b084      	sub	sp, #16
    930a:	9002      	str	r0, [sp, #8]
    930c:	9103      	str	r1, [sp, #12]
    930e:	6800      	ldr	r0, [r0, #0]
    9310:	f009 fa7a 	bl	12808 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>
    9314:	9001      	str	r0, [sp, #4]
    9316:	e7ff      	b.n	9318 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E+0x12>
    9318:	9801      	ldr	r0, [sp, #4]
    931a:	f000 0001 	and.w	r0, r0, #1
    931e:	b004      	add	sp, #16
    9320:	bd80      	pop	{r7, pc}

00009322 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E>:
    9322:	b580      	push	{r7, lr}
    9324:	b084      	sub	sp, #16
    9326:	9002      	str	r0, [sp, #8]
    9328:	9103      	str	r1, [sp, #12]
    932a:	6800      	ldr	r0, [r0, #0]
    932c:	f7ff ffeb 	bl	9306 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>
    9330:	9001      	str	r0, [sp, #4]
    9332:	e7ff      	b.n	9334 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E+0x12>
    9334:	9801      	ldr	r0, [sp, #4]
    9336:	f000 0001 	and.w	r0, r0, #1
    933a:	b004      	add	sp, #16
    933c:	bd80      	pop	{r7, pc}

0000933e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE>:
    933e:	b580      	push	{r7, lr}
    9340:	b084      	sub	sp, #16
    9342:	9002      	str	r0, [sp, #8]
    9344:	9103      	str	r1, [sp, #12]
    9346:	6800      	ldr	r0, [r0, #0]
    9348:	f009 facc 	bl	128e4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>
    934c:	9001      	str	r0, [sp, #4]
    934e:	e7ff      	b.n	9350 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE+0x12>
    9350:	9801      	ldr	r0, [sp, #4]
    9352:	f000 0001 	and.w	r0, r0, #1
    9356:	b004      	add	sp, #16
    9358:	bd80      	pop	{r7, pc}

0000935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>:
    935a:	b089      	sub	sp, #36	; 0x24
    935c:	9005      	str	r0, [sp, #20]
    935e:	9106      	str	r1, [sp, #24]
    9360:	9107      	str	r1, [sp, #28]
    9362:	9907      	ldr	r1, [sp, #28]
    9364:	9002      	str	r0, [sp, #8]
    9366:	9101      	str	r1, [sp, #4]
    9368:	e7ff      	b.n	936a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x10>
    936a:	9802      	ldr	r0, [sp, #8]
    936c:	9008      	str	r0, [sp, #32]
    936e:	9908      	ldr	r1, [sp, #32]
    9370:	9100      	str	r1, [sp, #0]
    9372:	e7ff      	b.n	9374 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x1a>
    9374:	9800      	ldr	r0, [sp, #0]
    9376:	9003      	str	r0, [sp, #12]
    9378:	9901      	ldr	r1, [sp, #4]
    937a:	9104      	str	r1, [sp, #16]
    937c:	9803      	ldr	r0, [sp, #12]
    937e:	9904      	ldr	r1, [sp, #16]
    9380:	b009      	add	sp, #36	; 0x24
    9382:	4770      	bx	lr

00009384 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>:
    9384:	b089      	sub	sp, #36	; 0x24
    9386:	9005      	str	r0, [sp, #20]
    9388:	9106      	str	r1, [sp, #24]
    938a:	9107      	str	r1, [sp, #28]
    938c:	9907      	ldr	r1, [sp, #28]
    938e:	9002      	str	r0, [sp, #8]
    9390:	9101      	str	r1, [sp, #4]
    9392:	e7ff      	b.n	9394 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x10>
    9394:	9802      	ldr	r0, [sp, #8]
    9396:	9008      	str	r0, [sp, #32]
    9398:	9908      	ldr	r1, [sp, #32]
    939a:	9100      	str	r1, [sp, #0]
    939c:	e7ff      	b.n	939e <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x1a>
    939e:	9800      	ldr	r0, [sp, #0]
    93a0:	9003      	str	r0, [sp, #12]
    93a2:	9901      	ldr	r1, [sp, #4]
    93a4:	9104      	str	r1, [sp, #16]
    93a6:	9803      	ldr	r0, [sp, #12]
    93a8:	9904      	ldr	r1, [sp, #16]
    93aa:	b009      	add	sp, #36	; 0x24
    93ac:	4770      	bx	lr

000093ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>:
    93ae:	b089      	sub	sp, #36	; 0x24
    93b0:	9005      	str	r0, [sp, #20]
    93b2:	9106      	str	r1, [sp, #24]
    93b4:	9107      	str	r1, [sp, #28]
    93b6:	9907      	ldr	r1, [sp, #28]
    93b8:	9002      	str	r0, [sp, #8]
    93ba:	9101      	str	r1, [sp, #4]
    93bc:	e7ff      	b.n	93be <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x10>
    93be:	9802      	ldr	r0, [sp, #8]
    93c0:	9008      	str	r0, [sp, #32]
    93c2:	9908      	ldr	r1, [sp, #32]
    93c4:	9100      	str	r1, [sp, #0]
    93c6:	e7ff      	b.n	93c8 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x1a>
    93c8:	9800      	ldr	r0, [sp, #0]
    93ca:	9003      	str	r0, [sp, #12]
    93cc:	9901      	ldr	r1, [sp, #4]
    93ce:	9104      	str	r1, [sp, #16]
    93d0:	9803      	ldr	r0, [sp, #12]
    93d2:	9904      	ldr	r1, [sp, #16]
    93d4:	b009      	add	sp, #36	; 0x24
    93d6:	4770      	bx	lr

000093d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>:
    93d8:	b089      	sub	sp, #36	; 0x24
    93da:	9005      	str	r0, [sp, #20]
    93dc:	9106      	str	r1, [sp, #24]
    93de:	9107      	str	r1, [sp, #28]
    93e0:	9907      	ldr	r1, [sp, #28]
    93e2:	9002      	str	r0, [sp, #8]
    93e4:	9101      	str	r1, [sp, #4]
    93e6:	e7ff      	b.n	93e8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x10>
    93e8:	9802      	ldr	r0, [sp, #8]
    93ea:	9008      	str	r0, [sp, #32]
    93ec:	9908      	ldr	r1, [sp, #32]
    93ee:	9100      	str	r1, [sp, #0]
    93f0:	e7ff      	b.n	93f2 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x1a>
    93f2:	9800      	ldr	r0, [sp, #0]
    93f4:	9003      	str	r0, [sp, #12]
    93f6:	9901      	ldr	r1, [sp, #4]
    93f8:	9104      	str	r1, [sp, #16]
    93fa:	9803      	ldr	r0, [sp, #12]
    93fc:	9904      	ldr	r1, [sp, #16]
    93fe:	b009      	add	sp, #36	; 0x24
    9400:	4770      	bx	lr

00009402 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>:
    9402:	b580      	push	{r7, lr}
    9404:	b088      	sub	sp, #32
    9406:	9004      	str	r0, [sp, #16]
    9408:	9105      	str	r1, [sp, #20]
    940a:	f000 f819 	bl	9440 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>
    940e:	9001      	str	r0, [sp, #4]
    9410:	9100      	str	r1, [sp, #0]
    9412:	e7ff      	b.n	9414 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x12>
    9414:	9801      	ldr	r0, [sp, #4]
    9416:	9006      	str	r0, [sp, #24]
    9418:	9900      	ldr	r1, [sp, #0]
    941a:	f001 0201 	and.w	r2, r1, #1
    941e:	f88d 201f 	strb.w	r2, [sp, #31]
    9422:	2a00      	cmp	r2, #0
    9424:	d105      	bne.n	9432 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x30>
    9426:	e7ff      	b.n	9428 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x26>
    9428:	9801      	ldr	r0, [sp, #4]
    942a:	9003      	str	r0, [sp, #12]
    942c:	2101      	movs	r1, #1
    942e:	9102      	str	r1, [sp, #8]
    9430:	e002      	b.n	9438 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
    9432:	2000      	movs	r0, #0
    9434:	9002      	str	r0, [sp, #8]
    9436:	e7ff      	b.n	9438 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
    9438:	9802      	ldr	r0, [sp, #8]
    943a:	9903      	ldr	r1, [sp, #12]
    943c:	b008      	add	sp, #32
    943e:	bd80      	pop	{r7, pc}

00009440 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>:
    9440:	b08a      	sub	sp, #40	; 0x28
    9442:	9004      	str	r0, [sp, #16]
    9444:	9105      	str	r1, [sp, #20]
    9446:	1a40      	subs	r0, r0, r1
    9448:	f04f 0100 	mov.w	r1, #0
    944c:	f141 0100 	adc.w	r1, r1, #0
    9450:	f1c1 0101 	rsb	r1, r1, #1
    9454:	9006      	str	r0, [sp, #24]
    9456:	f88d 101c 	strb.w	r1, [sp, #28]
    945a:	9806      	ldr	r0, [sp, #24]
    945c:	f89d 101c 	ldrb.w	r1, [sp, #28]
    9460:	9001      	str	r0, [sp, #4]
    9462:	9100      	str	r1, [sp, #0]
    9464:	e7ff      	b.n	9466 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E+0x26>
    9466:	9801      	ldr	r0, [sp, #4]
    9468:	9008      	str	r0, [sp, #32]
    946a:	9900      	ldr	r1, [sp, #0]
    946c:	f001 0201 	and.w	r2, r1, #1
    9470:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    9474:	9002      	str	r0, [sp, #8]
    9476:	f88d 200c 	strb.w	r2, [sp, #12]
    947a:	9802      	ldr	r0, [sp, #8]
    947c:	f89d 100c 	ldrb.w	r1, [sp, #12]
    9480:	b00a      	add	sp, #40	; 0x28
    9482:	4770      	bx	lr

00009484 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>:
    baudrate:   8000,  //  In kHZ. Use SPI at 8MHz (the fastest clock available on the nRF52832) because otherwise refreshing will be super slow.
    word_size:  hal::HAL_SPI_WORD_SIZE_8BIT as u8,
};

/// Initialise the display controller
pub fn start_display() -> MynewtResult<()> {
    9484:	b5b0      	push	{r4, r5, r7, lr}
    9486:	b0b2      	sub	sp, #200	; 0xc8
    //  Create SPI port and GPIO pins
    let mut spi_port = mynewt::SPI::new();
    9488:	f00a fdfd 	bl	14086 <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>
    948c:	9115      	str	r1, [sp, #84]	; 0x54
    948e:	9014      	str	r0, [sp, #80]	; 0x50
    9490:	e7ff      	b.n	9492 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe>
    let mut dc_gpio =  mynewt::GPIO::new();
    9492:	f00a ffb6 	bl	14402 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    9496:	9016      	str	r0, [sp, #88]	; 0x58
    9498:	e7ff      	b.n	949a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16>
    let mut rst_gpio = mynewt::GPIO::new();
    949a:	f00a ffb2 	bl	14402 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    949e:	9017      	str	r0, [sp, #92]	; 0x5c
    94a0:	e7ff      	b.n	94a2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e>

    //  Init SPI port and GPIO pins
    spi_port.init(
    94a2:	f240 03e8 	movw	r3, #232	; 0xe8
    94a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94aa:	a814      	add	r0, sp, #80	; 0x50
    94ac:	2100      	movs	r1, #0
    94ae:	2219      	movs	r2, #25
    94b0:	f00a fdf1 	bl	14096 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>
    94b4:	9012      	str	r0, [sp, #72]	; 0x48
    94b6:	e7ff      	b.n	94b8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x34>
    94b8:	9812      	ldr	r0, [sp, #72]	; 0x48
    94ba:	f7ff fb5d 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    94be:	9018      	str	r0, [sp, #96]	; 0x60
    94c0:	e7ff      	b.n	94c2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x3e>
        DISPLAY_SPI, //  Mynewt SPI port 0
        DISPLAY_CS,  //  LCD_CS (P0.25): Chip select
        unsafe { &mut SPI_SETTINGS }
    ) ? ;
    94c2:	9818      	ldr	r0, [sp, #96]	; 0x60
    94c4:	1e41      	subs	r1, r0, #1
    94c6:	bf18      	it	ne
    94c8:	2101      	movne	r1, #1
    94ca:	2801      	cmp	r0, #1
    94cc:	d001      	beq.n	94d2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4e>
    94ce:	e7ff      	b.n	94d0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4c>
    94d0:	e006      	b.n	94e0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x5c>
    94d2:	a816      	add	r0, sp, #88	; 0x58
    94d4:	2112      	movs	r1, #18
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    94d6:	f00a ff96 	bl	14406 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    94da:	9011      	str	r0, [sp, #68]	; 0x44
    94dc:	e010      	b.n	9500 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7c>
    spi_port.init(
    94de:	defe      	udf	#254	; 0xfe
    ) ? ;
    94e0:	9818      	ldr	r0, [sp, #96]	; 0x60
    94e2:	902d      	str	r0, [sp, #180]	; 0xb4
    94e4:	f009 f98c 	bl	12800 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    94e8:	9010      	str	r0, [sp, #64]	; 0x40
    94ea:	e002      	b.n	94f2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x6e>
    unsafe {
        DISPLAY.init(&mut delay) ? ;
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    }
    Ok(())
}
    94ec:	9813      	ldr	r0, [sp, #76]	; 0x4c
    94ee:	b032      	add	sp, #200	; 0xc8
    94f0:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;
    94f2:	9810      	ldr	r0, [sp, #64]	; 0x40
    94f4:	f7ff fb34 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    94f8:	9013      	str	r0, [sp, #76]	; 0x4c
    94fa:	e7ff      	b.n	94fc <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x78>
    94fc:	e7ff      	b.n	94fe <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
    94fe:	e7f5      	b.n	94ec <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    9500:	9811      	ldr	r0, [sp, #68]	; 0x44
    9502:	f7ff fb39 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    9506:	9019      	str	r0, [sp, #100]	; 0x64
    9508:	e7ff      	b.n	950a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x86>
    950a:	9819      	ldr	r0, [sp, #100]	; 0x64
    950c:	1e41      	subs	r1, r0, #1
    950e:	bf18      	it	ne
    9510:	2101      	movne	r1, #1
    9512:	2801      	cmp	r0, #1
    9514:	d001      	beq.n	951a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x96>
    9516:	e7ff      	b.n	9518 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x94>
    9518:	e006      	b.n	9528 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xa4>
    951a:	a817      	add	r0, sp, #92	; 0x5c
    951c:	211a      	movs	r1, #26
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    951e:	f00a ff72 	bl	14406 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    9522:	900f      	str	r0, [sp, #60]	; 0x3c
    9524:	e00c      	b.n	9540 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xbc>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    9526:	defe      	udf	#254	; 0xfe
    9528:	9819      	ldr	r0, [sp, #100]	; 0x64
    952a:	902e      	str	r0, [sp, #184]	; 0xb8
    952c:	f009 f968 	bl	12800 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    9530:	900e      	str	r0, [sp, #56]	; 0x38
    9532:	e7ff      	b.n	9534 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xb0>
    9534:	980e      	ldr	r0, [sp, #56]	; 0x38
    9536:	f7ff fb13 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    953a:	9013      	str	r0, [sp, #76]	; 0x4c
    953c:	e7ff      	b.n	953e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xba>
    953e:	e7de      	b.n	94fe <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    9540:	980f      	ldr	r0, [sp, #60]	; 0x3c
    9542:	f7ff fb19 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    9546:	901a      	str	r0, [sp, #104]	; 0x68
    9548:	e7ff      	b.n	954a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xc6>
    954a:	981a      	ldr	r0, [sp, #104]	; 0x68
    954c:	1e41      	subs	r1, r0, #1
    954e:	bf18      	it	ne
    9550:	2101      	movne	r1, #1
    9552:	2801      	cmp	r0, #1
    9554:	d001      	beq.n	955a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd6>
    9556:	e7ff      	b.n	9558 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd4>
    9558:	e004      	b.n	9564 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe0>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
    955a:	f00a ff52 	bl	14402 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    955e:	900d      	str	r0, [sp, #52]	; 0x34
    9560:	e00c      	b.n	957c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf8>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    9562:	defe      	udf	#254	; 0xfe
    9564:	981a      	ldr	r0, [sp, #104]	; 0x68
    9566:	902f      	str	r0, [sp, #188]	; 0xbc
    9568:	f009 f94a 	bl	12800 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    956c:	900c      	str	r0, [sp, #48]	; 0x30
    956e:	e7ff      	b.n	9570 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xec>
    9570:	980c      	ldr	r0, [sp, #48]	; 0x30
    9572:	f7ff faf5 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9576:	9013      	str	r0, [sp, #76]	; 0x4c
    9578:	e7ff      	b.n	957a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf6>
    957a:	e7c0      	b.n	94fe <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
    957c:	f240 1060 	movw	r0, #352	; 0x160
    9580:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9584:	990d      	ldr	r1, [sp, #52]	; 0x34
    9586:	6001      	str	r1, [r0, #0]
    9588:	2117      	movs	r1, #23
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
    958a:	f00a ff3c 	bl	14406 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    958e:	900b      	str	r0, [sp, #44]	; 0x2c
    9590:	e7ff      	b.n	9592 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x10e>
    9592:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9594:	f7ff faf0 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    9598:	901b      	str	r0, [sp, #108]	; 0x6c
    959a:	e7ff      	b.n	959c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x118>
    959c:	981b      	ldr	r0, [sp, #108]	; 0x6c
    959e:	1e41      	subs	r1, r0, #1
    95a0:	bf18      	it	ne
    95a2:	2101      	movne	r1, #1
    95a4:	2801      	cmp	r0, #1
    95a6:	d001      	beq.n	95ac <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x128>
    95a8:	e7ff      	b.n	95aa <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x126>
    95aa:	e008      	b.n	95be <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x13a>
        BACKLIGHT_HIGH.set_low() ? ;    
    95ac:	f240 1060 	movw	r0, #352	; 0x160
    95b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    95b4:	f00a ffc0 	bl	14538 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    95b8:	900a      	str	r0, [sp, #40]	; 0x28
    95ba:	e00d      	b.n	95d8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x154>
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
    95bc:	defe      	udf	#254	; 0xfe
    95be:	981b      	ldr	r0, [sp, #108]	; 0x6c
    95c0:	9030      	str	r0, [sp, #192]	; 0xc0
    95c2:	f009 f91d 	bl	12800 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    95c6:	9009      	str	r0, [sp, #36]	; 0x24
    95c8:	e7ff      	b.n	95ca <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x146>
    95ca:	9809      	ldr	r0, [sp, #36]	; 0x24
    95cc:	f7ff fac8 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    95d0:	9013      	str	r0, [sp, #76]	; 0x4c
    95d2:	e7ff      	b.n	95d4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x150>
    95d4:	e7ff      	b.n	95d6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
    95d6:	e792      	b.n	94fe <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH.set_low() ? ;    
    95d8:	980a      	ldr	r0, [sp, #40]	; 0x28
    95da:	f7ff facd 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    95de:	901c      	str	r0, [sp, #112]	; 0x70
    95e0:	e7ff      	b.n	95e2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x15e>
    95e2:	981c      	ldr	r0, [sp, #112]	; 0x70
    95e4:	1e41      	subs	r1, r0, #1
    95e6:	bf18      	it	ne
    95e8:	2101      	movne	r1, #1
    95ea:	2801      	cmp	r0, #1
    95ec:	d001      	beq.n	95f2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16e>
    95ee:	e7ff      	b.n	95f0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16c>
    95f0:	e011      	b.n	9616 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x192>
        spi_port,    //  SPI Port
    95f2:	9914      	ldr	r1, [sp, #80]	; 0x50
    95f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
        dc_gpio,     //  GPIO Pin for DC
    95f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
        rst_gpio,    //  GPIO Pin for RST
    95f8:	9817      	ldr	r0, [sp, #92]	; 0x5c
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
    95fa:	46ec      	mov	ip, sp
    95fc:	f04f 0e01 	mov.w	lr, #1
    9600:	f8cc e008 	str.w	lr, [ip, #8]
    9604:	f8cc e004 	str.w	lr, [ip, #4]
    9608:	f8cc 0000 	str.w	r0, [ip]
    960c:	a81d      	add	r0, sp, #116	; 0x74
    960e:	f000 fc8c 	bl	9f2a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>
    9612:	e00c      	b.n	962e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1aa>
        BACKLIGHT_HIGH.set_low() ? ;    
    9614:	defe      	udf	#254	; 0xfe
    9616:	981c      	ldr	r0, [sp, #112]	; 0x70
    9618:	9031      	str	r0, [sp, #196]	; 0xc4
    961a:	f009 f8f1 	bl	12800 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    961e:	9008      	str	r0, [sp, #32]
    9620:	e7ff      	b.n	9622 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x19e>
    9622:	9808      	ldr	r0, [sp, #32]
    9624:	f7ff fa9c 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9628:	9013      	str	r0, [sp, #76]	; 0x4c
    962a:	e7ff      	b.n	962c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1a8>
    962c:	e7d3      	b.n	95d6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
    962e:	f240 1048 	movw	r0, #328	; 0x148
    9632:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9636:	a91d      	add	r1, sp, #116	; 0x74
    9638:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    963c:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    let mut delay = mynewt::Delay::new();
    9640:	f00a ff90 	bl	14564 <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>
    9644:	e7ff      	b.n	9646 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1c2>
        DISPLAY.init(&mut delay) ? ;
    9646:	f240 1048 	movw	r0, #328	; 0x148
    964a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    964e:	a923      	add	r1, sp, #140	; 0x8c
    9650:	f000 fc8d 	bl	9f6e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>
    9654:	9007      	str	r0, [sp, #28]
    9656:	e7ff      	b.n	9658 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1d4>
    9658:	9807      	ldr	r0, [sp, #28]
    965a:	f000 0001 	and.w	r0, r0, #1
    965e:	f7ff fa85 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9662:	f88d 008e 	strb.w	r0, [sp, #142]	; 0x8e
    9666:	e7ff      	b.n	9668 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e4>
    9668:	f89d 008e 	ldrb.w	r0, [sp, #142]	; 0x8e
    966c:	07c1      	lsls	r1, r0, #31
    966e:	2900      	cmp	r1, #0
    9670:	d001      	beq.n	9676 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f2>
    9672:	e7ff      	b.n	9674 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f0>
    9674:	e00d      	b.n	9692 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x20e>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    9676:	f24e 4040 	movw	r0, #58432	; 0xe440
    967a:	f2c0 0001 	movt	r0, #1
    967e:	6801      	ldr	r1, [r0, #0]
    9680:	f240 1048 	movw	r0, #328	; 0x148
    9684:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9688:	f000 fa86 	bl	9b98 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>
    968c:	9006      	str	r0, [sp, #24]
    968e:	e00b      	b.n	96a8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x224>
        DISPLAY.init(&mut delay) ? ;
    9690:	defe      	udf	#254	; 0xfe
    9692:	f7ff f9f8 	bl	8a86 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
    9696:	9005      	str	r0, [sp, #20]
    9698:	e7ff      	b.n	969a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x216>
    969a:	9805      	ldr	r0, [sp, #20]
    969c:	f7ff fa60 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    96a0:	9013      	str	r0, [sp, #76]	; 0x4c
    96a2:	e7ff      	b.n	96a4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x220>
    96a4:	e7ff      	b.n	96a6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>
    96a6:	e72a      	b.n	94fe <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    96a8:	9806      	ldr	r0, [sp, #24]
    96aa:	f000 0001 	and.w	r0, r0, #1
    96ae:	f7ff fa5d 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    96b2:	f88d 008f 	strb.w	r0, [sp, #143]	; 0x8f
    96b6:	e7ff      	b.n	96b8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x234>
    96b8:	f89d 008f 	ldrb.w	r0, [sp, #143]	; 0x8f
    96bc:	07c1      	lsls	r1, r0, #31
    96be:	2900      	cmp	r1, #0
    96c0:	d001      	beq.n	96c6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x242>
    96c2:	e7ff      	b.n	96c4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x240>
    96c4:	e005      	b.n	96d2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x24e>
    96c6:	2000      	movs	r0, #0
    Ok(())
    96c8:	9013      	str	r0, [sp, #76]	; 0x4c
    96ca:	2001      	movs	r0, #1
    96cc:	9013      	str	r0, [sp, #76]	; 0x4c
}
    96ce:	e70d      	b.n	94ec <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    96d0:	defe      	udf	#254	; 0xfe
    96d2:	f7ff f9d8 	bl	8a86 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
    96d6:	9004      	str	r0, [sp, #16]
    96d8:	e7ff      	b.n	96da <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x256>
    96da:	9804      	ldr	r0, [sp, #16]
    96dc:	f7ff fa40 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    96e0:	9013      	str	r0, [sp, #76]	; 0x4c
    96e2:	e7ff      	b.n	96e4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x260>
    96e4:	e7df      	b.n	96a6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>

000096e6 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>:
    }

    /// Converts the value of `self` to a `u8`. If the value cannot be
    /// represented by a `u8`, then `None` is returned.
    #[inline]
    fn to_u8(&self) -> Option<u8> {
    96e6:	b580      	push	{r7, lr}
    96e8:	b08a      	sub	sp, #40	; 0x28
    96ea:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
    96ec:	f001 faa3 	bl	ac36 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>
    96f0:	9307      	str	r3, [sp, #28]
    96f2:	9206      	str	r2, [sp, #24]
    96f4:	9105      	str	r1, [sp, #20]
    96f6:	9004      	str	r0, [sp, #16]
    96f8:	e7ff      	b.n	96fa <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x14>
    96fa:	a804      	add	r0, sp, #16
    96fc:	f00b f81d 	bl	1473a <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
    9700:	9003      	str	r0, [sp, #12]
    9702:	e7ff      	b.n	9704 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x1e>
    9704:	9803      	ldr	r0, [sp, #12]
    9706:	f00b f8eb 	bl	148e0 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
    970a:	9002      	str	r0, [sp, #8]
    970c:	9101      	str	r1, [sp, #4]
    970e:	e7ff      	b.n	9710 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x2a>
    }
    9710:	9802      	ldr	r0, [sp, #8]
    9712:	f000 0001 	and.w	r0, r0, #1
    9716:	9901      	ldr	r1, [sp, #4]
    9718:	b00a      	add	sp, #40	; 0x28
    971a:	bd80      	pop	{r7, pc}

0000971c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>:
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }

    pub fn hard_reset(&mut self) -> Result<(), ()>
    971c:	b580      	push	{r7, lr}
    971e:	b090      	sub	sp, #64	; 0x40
    9720:	900b      	str	r0, [sp, #44]	; 0x2c
    {
        self.rst.set_high().map_err(|_| ())?;
    9722:	f100 010c 	add.w	r1, r0, #12
    9726:	9006      	str	r0, [sp, #24]
    9728:	4608      	mov	r0, r1
    972a:	f00a ff10 	bl	1454e <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    972e:	9005      	str	r0, [sp, #20]
    9730:	e7ff      	b.n	9732 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x16>
    9732:	9805      	ldr	r0, [sp, #20]
    9734:	f00b fe6b 	bl	1540e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>
    9738:	9004      	str	r0, [sp, #16]
    973a:	e7ff      	b.n	973c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x20>
    973c:	9804      	ldr	r0, [sp, #16]
    973e:	f000 0001 	and.w	r0, r0, #1
    9742:	f7ff fa13 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9746:	f88d 001f 	strb.w	r0, [sp, #31]
    974a:	e7ff      	b.n	974c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x30>
    974c:	f89d 001f 	ldrb.w	r0, [sp, #31]
    9750:	07c1      	lsls	r1, r0, #31
    9752:	2900      	cmp	r1, #0
    9754:	d001      	beq.n	975a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3e>
    9756:	e7ff      	b.n	9758 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3c>
    9758:	e006      	b.n	9768 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x4c>
        self.rst.set_low().map_err(|_| ())?;
    975a:	9806      	ldr	r0, [sp, #24]
    975c:	300c      	adds	r0, #12
    975e:	f00a feeb 	bl	14538 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    9762:	9003      	str	r0, [sp, #12]
    9764:	e00d      	b.n	9782 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x66>
        self.rst.set_high().map_err(|_| ())?;
    9766:	defe      	udf	#254	; 0xfe
    9768:	f008 fc15 	bl	11f96 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    976c:	e003      	b.n	9776 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x5a>
        self.rst.set_high().map_err(|_| ())
    }
    976e:	f89d 001e 	ldrb.w	r0, [sp, #30]
    9772:	b010      	add	sp, #64	; 0x40
    9774:	bd80      	pop	{r7, pc}
        self.rst.set_high().map_err(|_| ())?;
    9776:	f00b fe9f 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    977a:	f88d 001e 	strb.w	r0, [sp, #30]
    977e:	e7ff      	b.n	9780 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x64>
    9780:	e7f5      	b.n	976e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_low().map_err(|_| ())?;
    9782:	9803      	ldr	r0, [sp, #12]
    9784:	f00b fdee 	bl	15364 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>
    9788:	9002      	str	r0, [sp, #8]
    978a:	e7ff      	b.n	978c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x70>
    978c:	9802      	ldr	r0, [sp, #8]
    978e:	f000 0001 	and.w	r0, r0, #1
    9792:	f7ff f9eb 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9796:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    979a:	e7ff      	b.n	979c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x80>
    979c:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    97a0:	07c1      	lsls	r1, r0, #31
    97a2:	2900      	cmp	r1, #0
    97a4:	d001      	beq.n	97aa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8e>
    97a6:	e7ff      	b.n	97a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8c>
    97a8:	e006      	b.n	97b8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x9c>
        self.rst.set_high().map_err(|_| ())
    97aa:	9806      	ldr	r0, [sp, #24]
    97ac:	300c      	adds	r0, #12
    97ae:	f00a fece 	bl	1454e <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    97b2:	9001      	str	r0, [sp, #4]
    97b4:	e009      	b.n	97ca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xae>
        self.rst.set_low().map_err(|_| ())?;
    97b6:	defe      	udf	#254	; 0xfe
    97b8:	f008 fbed 	bl	11f96 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    97bc:	e7ff      	b.n	97be <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xa2>
    97be:	f00b fe7b 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    97c2:	f88d 001e 	strb.w	r0, [sp, #30]
    97c6:	e7ff      	b.n	97c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xac>
    97c8:	e7d1      	b.n	976e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_high().map_err(|_| ())
    97ca:	9801      	ldr	r0, [sp, #4]
    97cc:	f00b fd75 	bl	152ba <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>
    97d0:	f88d 001e 	strb.w	r0, [sp, #30]
    97d4:	e7ff      	b.n	97d6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xba>
    }
    97d6:	e7ca      	b.n	976e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>

000097d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>:
        self.rst.set_low().map_err(|_| ())?;
    97d8:	b082      	sub	sp, #8
    97da:	9001      	str	r0, [sp, #4]
    97dc:	e7ff      	b.n	97de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE+0x6>
    97de:	b002      	add	sp, #8
    97e0:	4770      	bx	lr

000097e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>:
        self.rst.set_high().map_err(|_| ())?;
    97e2:	b082      	sub	sp, #8
    97e4:	9001      	str	r0, [sp, #4]
    97e6:	e7ff      	b.n	97e8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE+0x6>
    97e8:	b002      	add	sp, #8
    97ea:	4770      	bx	lr

000097ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>:
        self.rst.set_high().map_err(|_| ())
    97ec:	b082      	sub	sp, #8
    97ee:	9001      	str	r0, [sp, #4]
    97f0:	e7ff      	b.n	97f2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE+0x6>
    97f2:	b002      	add	sp, #8
    97f4:	4770      	bx	lr

000097f6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E>:
            .expect("spi flush fail");
        Ok(())
    }

    /// Sets pixel colors at the given drawing window
    pub fn set_pixels<P: IntoIterator<Item = u16>>(&mut self, sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
    97f6:	b5f0      	push	{r4, r5, r6, r7, lr}
    97f8:	b0c7      	sub	sp, #284	; 0x11c
    97fa:	f8dd c134 	ldr.w	ip, [sp, #308]	; 0x134
    97fe:	f8dd e130 	ldr.w	lr, [sp, #304]	; 0x130
    9802:	461c      	mov	r4, r3
    9804:	4615      	mov	r5, r2
    9806:	460e      	mov	r6, r1
    9808:	9040      	str	r0, [sp, #256]	; 0x100
    980a:	f8ad 1104 	strh.w	r1, [sp, #260]	; 0x104
    980e:	f8ad 2106 	strh.w	r2, [sp, #262]	; 0x106
    9812:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
    9816:	f8ad e10a 	strh.w	lr, [sp, #266]	; 0x10a
    981a:	2700      	movs	r7, #0
        self.set_address_window(sx, sy, ex, ey)?;
    981c:	f88d 70ff 	strb.w	r7, [sp, #255]	; 0xff
    9820:	2701      	movs	r7, #1
    9822:	f88d 70ff 	strb.w	r7, [sp, #255]	; 0xff
    9826:	466f      	mov	r7, sp
    9828:	f8c7 e000 	str.w	lr, [r7]
    982c:	900a      	str	r0, [sp, #40]	; 0x28
    982e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    9832:	9408      	str	r4, [sp, #32]
    9834:	9507      	str	r5, [sp, #28]
    9836:	9606      	str	r6, [sp, #24]
    9838:	f000 fa44 	bl	9cc4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>
    983c:	9005      	str	r0, [sp, #20]
    983e:	e7ff      	b.n	9840 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x4a>
    9840:	9805      	ldr	r0, [sp, #20]
    9842:	f000 0001 	and.w	r0, r0, #1
    9846:	f7ff f991 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    984a:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    984e:	e7ff      	b.n	9850 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x5a>
    9850:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    9854:	07c1      	lsls	r1, r0, #31
    9856:	2900      	cmp	r1, #0
    9858:	d001      	beq.n	985e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x68>
    985a:	e7ff      	b.n	985c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x66>
    985c:	e00f      	b.n	987e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x88>
    985e:	2000      	movs	r0, #0
        self.write_pixels(colors) ? ;
    9860:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
    9864:	a80c      	add	r0, sp, #48	; 0x30
    9866:	22cc      	movs	r2, #204	; 0xcc
    9868:	9004      	str	r0, [sp, #16]
    986a:	9909      	ldr	r1, [sp, #36]	; 0x24
    986c:	f014 fc50 	bl	1e110 <__aeabi_memcpy>
    9870:	980a      	ldr	r0, [sp, #40]	; 0x28
    9872:	9904      	ldr	r1, [sp, #16]
    9874:	f000 f884 	bl	9980 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE>
    9878:	9003      	str	r0, [sp, #12]
    987a:	e00d      	b.n	9898 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xa2>
        self.set_address_window(sx, sy, ex, ey)?;
    987c:	defe      	udf	#254	; 0xfe
    987e:	f008 fb8a 	bl	11f96 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9882:	e003      	b.n	988c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x96>

        #[cfg(feature = "noblock_spi")]         //  If non-blocking SPI is enabled...
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }
    9884:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    9888:	b047      	add	sp, #284	; 0x11c
    988a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        self.set_address_window(sx, sy, ex, ey)?;
    988c:	f00b fe14 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9890:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    9894:	e7ff      	b.n	9896 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xa0>
    9896:	e034      	b.n	9902 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x10c>
        self.write_pixels(colors) ? ;
    9898:	9803      	ldr	r0, [sp, #12]
    989a:	f000 0001 	and.w	r0, r0, #1
    989e:	f7ff f965 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    98a2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    98a6:	e7ff      	b.n	98a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xb2>
    98a8:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    98ac:	07c1      	lsls	r1, r0, #31
    98ae:	2900      	cmp	r1, #0
    98b0:	d001      	beq.n	98b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xc0>
    98b2:	e7ff      	b.n	98b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xbe>
    98b4:	e004      	b.n	98c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xca>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    98b6:	f009 fe91 	bl	135dc <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    98ba:	9002      	str	r0, [sp, #8]
    98bc:	e009      	b.n	98d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xdc>
        self.write_pixels(colors) ? ;
    98be:	defe      	udf	#254	; 0xfe
    98c0:	f008 fb69 	bl	11f96 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    98c4:	e7ff      	b.n	98c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xd0>
    98c6:	f00b fdf7 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    98ca:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    98ce:	e7ff      	b.n	98d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xda>
    98d0:	e017      	b.n	9902 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x10c>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    98d2:	f24e 4144 	movw	r1, #58436	; 0xe444
    98d6:	f2c0 0101 	movt	r1, #1
    98da:	f24e 43a0 	movw	r3, #58528	; 0xe4a0
    98de:	f2c0 0301 	movt	r3, #1
    98e2:	220e      	movs	r2, #14
    98e4:	9802      	ldr	r0, [sp, #8]
    98e6:	f7ff f908 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    98ea:	e7ff      	b.n	98ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xf6>
    98ec:	2000      	movs	r0, #0
        Ok(())
    98ee:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    }
    98f2:	e7c7      	b.n	9884 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>
    98f4:	2000      	movs	r0, #0
    98f6:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
    98fa:	9809      	ldr	r0, [sp, #36]	; 0x24
    98fc:	f000 ff1d 	bl	a73a <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    9900:	e7c0      	b.n	9884 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>
    9902:	f89d 00ff 	ldrb.w	r0, [sp, #255]	; 0xff
    9906:	07c0      	lsls	r0, r0, #31
    9908:	2800      	cmp	r0, #0
    990a:	d1f3      	bne.n	98f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xfe>
    990c:	e7ba      	b.n	9884 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>

0000990e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>:
    fn write_data(&mut self, data: &[u8]) -> Result<(), ()> {
    990e:	b580      	push	{r7, lr}
    9910:	b084      	sub	sp, #16
    9912:	9001      	str	r0, [sp, #4]
    9914:	9102      	str	r1, [sp, #8]
    9916:	9203      	str	r2, [sp, #12]
        mynewt::spi::spi_noblock_write_data(
    9918:	4608      	mov	r0, r1
    991a:	4611      	mov	r1, r2
    991c:	f009 fdca 	bl	134b4 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
    9920:	9000      	str	r0, [sp, #0]
    9922:	e7ff      	b.n	9924 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x16>
    9924:	f24e 41b0 	movw	r1, #58544	; 0xe4b0
    9928:	f2c0 0101 	movt	r1, #1
    992c:	f24e 43c0 	movw	r3, #58560	; 0xe4c0
    9930:	f2c0 0301 	movt	r3, #1
    9934:	220d      	movs	r2, #13
    9936:	9800      	ldr	r0, [sp, #0]
    9938:	f7ff f8df 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    993c:	e7ff      	b.n	993e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x30>
    993e:	2000      	movs	r0, #0
    }
    9940:	b004      	add	sp, #16
    9942:	bd80      	pop	{r7, pc}

00009944 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>:
    fn write_word(&mut self, value: u16) -> Result<(), ()> {
    9944:	b580      	push	{r7, lr}
    9946:	b088      	sub	sp, #32
    9948:	460a      	mov	r2, r1
    994a:	9006      	str	r0, [sp, #24]
    994c:	f8ad 101e 	strh.w	r1, [sp, #30]
        let bytes: [u8; 2] = unsafe { transmute(value.to_be()) };
    9950:	9004      	str	r0, [sp, #16]
    9952:	4608      	mov	r0, r1
    9954:	9203      	str	r2, [sp, #12]
    9956:	f000 feb9 	bl	a6cc <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>
    995a:	9002      	str	r0, [sp, #8]
    995c:	e7ff      	b.n	995e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x1a>
    995e:	9802      	ldr	r0, [sp, #8]
    9960:	f8ad 0016 	strh.w	r0, [sp, #22]
    9964:	e7ff      	b.n	9966 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x22>
    9966:	f10d 0116 	add.w	r1, sp, #22
    996a:	2202      	movs	r2, #2
        self.write_data(&bytes)
    996c:	9804      	ldr	r0, [sp, #16]
    996e:	f7ff ffce 	bl	990e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>
    9972:	9001      	str	r0, [sp, #4]
    9974:	e7ff      	b.n	9976 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x32>
    }
    9976:	9801      	ldr	r0, [sp, #4]
    9978:	f000 0001 	and.w	r0, r0, #1
    997c:	b008      	add	sp, #32
    997e:	bd80      	pop	{r7, pc}

00009980 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE>:
    pub fn write_pixels<P: IntoIterator<Item = u16>>(&mut self, colors: P) -> Result <(), ()> {
    9980:	b580      	push	{r7, lr}
    9982:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
    9986:	90a8      	str	r0, [sp, #672]	; 0x2a0
    9988:	2200      	movs	r2, #0
        self.write_command(Instruction::RAMWR, None)?;
    998a:	f88d 229f 	strb.w	r2, [sp, #671]	; 0x29f
    998e:	2301      	movs	r3, #1
    9990:	f88d 329f 	strb.w	r3, [sp, #671]	; 0x29f
    9994:	232c      	movs	r3, #44	; 0x2c
    9996:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    999a:	920a      	str	r2, [sp, #40]	; 0x28
    999c:	9209      	str	r2, [sp, #36]	; 0x24
    999e:	9209      	str	r2, [sp, #36]	; 0x24
    99a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    99a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    99a4:	f89d c023 	ldrb.w	ip, [sp, #35]	; 0x23
    99a8:	9007      	str	r0, [sp, #28]
    99aa:	9106      	str	r1, [sp, #24]
    99ac:	4661      	mov	r1, ip
    99ae:	f000 f898 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    99b2:	9005      	str	r0, [sp, #20]
    99b4:	e7ff      	b.n	99b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x36>
    99b6:	9805      	ldr	r0, [sp, #20]
    99b8:	f000 0001 	and.w	r0, r0, #1
    99bc:	f7ff f8d6 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    99c0:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    99c4:	e7ff      	b.n	99c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x46>
    99c6:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
    99ca:	07c1      	lsls	r1, r0, #31
    99cc:	2900      	cmp	r1, #0
    99ce:	d001      	beq.n	99d4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x54>
    99d0:	e7ff      	b.n	99d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x52>
    99d2:	e00e      	b.n	99f2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x72>
    99d4:	2000      	movs	r0, #0
        for color in colors {
    99d6:	f88d 029f 	strb.w	r0, [sp, #671]	; 0x29f
    99da:	a83f      	add	r0, sp, #252	; 0xfc
    99dc:	22cc      	movs	r2, #204	; 0xcc
    99de:	9004      	str	r0, [sp, #16]
    99e0:	9906      	ldr	r1, [sp, #24]
    99e2:	f014 fb95 	bl	1e110 <__aeabi_memcpy>
    99e6:	a80b      	add	r0, sp, #44	; 0x2c
    99e8:	9904      	ldr	r1, [sp, #16]
    99ea:	f00b f899 	bl	14b20 <_ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE>
    99ee:	e00e      	b.n	9a0e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x8e>
        self.write_command(Instruction::RAMWR, None)?;
    99f0:	defe      	udf	#254	; 0xfe
    99f2:	f008 fad0 	bl	11f96 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    99f6:	e004      	b.n	9a02 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x82>
    }
    99f8:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
    99fc:	f50d 7d2e 	add.w	sp, sp, #696	; 0x2b8
    9a00:	bd80      	pop	{r7, pc}
        self.write_command(Instruction::RAMWR, None)?;
    9a02:	f00b fd59 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9a06:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    9a0a:	e7ff      	b.n	9a0c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x8c>
    9a0c:	e063      	b.n	9ad6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x156>
    9a0e:	a872      	add	r0, sp, #456	; 0x1c8
    9a10:	a90b      	add	r1, sp, #44	; 0x2c
    9a12:	22d0      	movs	r2, #208	; 0xd0
        for color in colors {
    9a14:	f014 fb7c 	bl	1e110 <__aeabi_memcpy>
    9a18:	e7ff      	b.n	9a1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x9a>
    9a1a:	a872      	add	r0, sp, #456	; 0x1c8
    9a1c:	f00b f896 	bl	14b4c <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E>
    9a20:	f8ad 129a 	strh.w	r1, [sp, #666]	; 0x29a
    9a24:	f8ad 0298 	strh.w	r0, [sp, #664]	; 0x298
    9a28:	e7ff      	b.n	9a2a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xaa>
    9a2a:	f8bd 0298 	ldrh.w	r0, [sp, #664]	; 0x298
    9a2e:	4601      	mov	r1, r0
    9a30:	2800      	cmp	r0, #0
    9a32:	d001      	beq.n	9a38 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xb8>
    9a34:	e7ff      	b.n	9a36 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xb6>
    9a36:	e004      	b.n	9a42 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xc2>
    9a38:	a872      	add	r0, sp, #456	; 0x1c8
        }
    9a3a:	f000 fe9d 	bl	a778 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>
    9a3e:	e02e      	b.n	9a9e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x11e>
        for color in colors {
    9a40:	defe      	udf	#254	; 0xfe
    9a42:	f8bd 029a 	ldrh.w	r0, [sp, #666]	; 0x29a
    9a46:	f8ad 02b2 	strh.w	r0, [sp, #690]	; 0x2b2
    9a4a:	f8ad 02b4 	strh.w	r0, [sp, #692]	; 0x2b4
    9a4e:	f8ad 02b6 	strh.w	r0, [sp, #694]	; 0x2b6
            self.write_word(color)?;
    9a52:	9907      	ldr	r1, [sp, #28]
    9a54:	9003      	str	r0, [sp, #12]
    9a56:	4608      	mov	r0, r1
    9a58:	9903      	ldr	r1, [sp, #12]
    9a5a:	f7ff ff73 	bl	9944 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9a5e:	9002      	str	r0, [sp, #8]
    9a60:	e7ff      	b.n	9a62 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xe2>
    9a62:	9802      	ldr	r0, [sp, #8]
    9a64:	f000 0001 	and.w	r0, r0, #1
    9a68:	f7ff f880 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9a6c:	f88d 029e 	strb.w	r0, [sp, #670]	; 0x29e
    9a70:	e7ff      	b.n	9a72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xf2>
    9a72:	f89d 029e 	ldrb.w	r0, [sp, #670]	; 0x29e
    9a76:	07c1      	lsls	r1, r0, #31
    9a78:	2900      	cmp	r1, #0
    9a7a:	d001      	beq.n	9a80 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x100>
    9a7c:	e7ff      	b.n	9a7e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xfe>
    9a7e:	e001      	b.n	9a84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x104>
        for color in colors {
    9a80:	e7cb      	b.n	9a1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x9a>
            self.write_word(color)?;
    9a82:	defe      	udf	#254	; 0xfe
    9a84:	f008 fa87 	bl	11f96 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9a88:	e7ff      	b.n	9a8a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x10a>
    9a8a:	f00b fd15 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9a8e:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    9a92:	e7ff      	b.n	9a94 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x114>
    9a94:	a872      	add	r0, sp, #456	; 0x1c8
        }
    9a96:	f000 fe6f 	bl	a778 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>
    9a9a:	e7ff      	b.n	9a9c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x11c>
    }
    9a9c:	e01b      	b.n	9ad6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x156>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    9a9e:	f009 fd9d 	bl	135dc <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    9aa2:	9001      	str	r0, [sp, #4]
    9aa4:	e7ff      	b.n	9aa6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x126>
    9aa6:	f24e 4144 	movw	r1, #58436	; 0xe444
    9aaa:	f2c0 0101 	movt	r1, #1
    9aae:	f24e 43d0 	movw	r3, #58576	; 0xe4d0
    9ab2:	f2c0 0301 	movt	r3, #1
    9ab6:	220e      	movs	r2, #14
    9ab8:	9801      	ldr	r0, [sp, #4]
    9aba:	f7ff f81e 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9abe:	e7ff      	b.n	9ac0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x140>
    9ac0:	2000      	movs	r0, #0
        Ok(())
    9ac2:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    }
    9ac6:	e797      	b.n	99f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>
    9ac8:	2000      	movs	r0, #0
    9aca:	f88d 029f 	strb.w	r0, [sp, #671]	; 0x29f
    9ace:	9806      	ldr	r0, [sp, #24]
    9ad0:	f000 fe33 	bl	a73a <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    9ad4:	e790      	b.n	99f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>
    9ad6:	f89d 029f 	ldrb.w	r0, [sp, #671]	; 0x29f
    9ada:	07c0      	lsls	r0, r0, #31
    9adc:	2800      	cmp	r0, #0
    9ade:	d1f3      	bne.n	9ac8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x148>
    9ae0:	e78a      	b.n	99f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>

00009ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>:
    fn write_command(&mut self, command: Instruction, params: Option<&[u8]>) -> Result<(), ()> {
    9ae2:	b580      	push	{r7, lr}
    9ae4:	b08e      	sub	sp, #56	; 0x38
    9ae6:	468c      	mov	ip, r1
    9ae8:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
    9aec:	920b      	str	r2, [sp, #44]	; 0x2c
    9aee:	930c      	str	r3, [sp, #48]	; 0x30
    9af0:	900d      	str	r0, [sp, #52]	; 0x34
    9af2:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
            command.to_u8().unwrap()
    9af6:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    9afa:	f000 fdbd 	bl	a678 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>
    9afe:	9008      	str	r0, [sp, #32]
    9b00:	9107      	str	r1, [sp, #28]
    9b02:	e7ff      	b.n	9b04 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x22>
    9b04:	9808      	ldr	r0, [sp, #32]
    9b06:	f000 0001 	and.w	r0, r0, #1
    9b0a:	f24e 42e0 	movw	r2, #58592	; 0xe4e0
    9b0e:	f2c0 0201 	movt	r2, #1
    9b12:	9907      	ldr	r1, [sp, #28]
    9b14:	f00a fe53 	bl	147be <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    9b18:	9006      	str	r0, [sp, #24]
    9b1a:	e7ff      	b.n	9b1c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x3a>
        mynewt::spi::spi_noblock_write_command(
    9b1c:	9806      	ldr	r0, [sp, #24]
    9b1e:	f009 fc81 	bl	13424 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>
    9b22:	9005      	str	r0, [sp, #20]
    9b24:	e7ff      	b.n	9b26 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x44>
    9b26:	f24e 41f0 	movw	r1, #58608	; 0xe4f0
    9b2a:	f2c0 0101 	movt	r1, #1
    9b2e:	f24e 43fc 	movw	r3, #58620	; 0xe4fc
    9b32:	f2c0 0301 	movt	r3, #1
    9b36:	220c      	movs	r2, #12
    9b38:	9805      	ldr	r0, [sp, #20]
    9b3a:	f7fe ffde 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9b3e:	e7ff      	b.n	9b40 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x5e>
    9b40:	a80b      	add	r0, sp, #44	; 0x2c
        if params.is_some() {
    9b42:	f00a fe97 	bl	14874 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>
    9b46:	9004      	str	r0, [sp, #16]
    9b48:	e7ff      	b.n	9b4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x68>
    9b4a:	9804      	ldr	r0, [sp, #16]
    9b4c:	07c1      	lsls	r1, r0, #31
    9b4e:	2900      	cmp	r1, #0
    9b50:	d01f      	beq.n	9b92 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
    9b52:	e7ff      	b.n	9b54 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x72>
                params.unwrap()
    9b54:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9b56:	990c      	ldr	r1, [sp, #48]	; 0x30
    9b58:	f24e 520c 	movw	r2, #58636	; 0xe50c
    9b5c:	f2c0 0201 	movt	r2, #1
    9b60:	f00a fe56 	bl	14810 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>
    9b64:	9003      	str	r0, [sp, #12]
    9b66:	9102      	str	r1, [sp, #8]
    9b68:	e7ff      	b.n	9b6a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x88>
            mynewt::spi::spi_noblock_write_data(
    9b6a:	9803      	ldr	r0, [sp, #12]
    9b6c:	9902      	ldr	r1, [sp, #8]
    9b6e:	f009 fca1 	bl	134b4 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
    9b72:	9001      	str	r0, [sp, #4]
    9b74:	e7ff      	b.n	9b76 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x94>
    9b76:	f24e 41b0 	movw	r1, #58544	; 0xe4b0
    9b7a:	f2c0 0101 	movt	r1, #1
    9b7e:	f24e 531c 	movw	r3, #58652	; 0xe51c
    9b82:	f2c0 0301 	movt	r3, #1
    9b86:	220d      	movs	r2, #13
    9b88:	9801      	ldr	r0, [sp, #4]
    9b8a:	f7fe ffb6 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9b8e:	e7ff      	b.n	9b90 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xae>
        if params.is_some() {
    9b90:	e7ff      	b.n	9b92 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
    9b92:	2000      	movs	r0, #0
    }
    9b94:	b00e      	add	sp, #56	; 0x38
    9b96:	bd80      	pop	{r7, pc}

00009b98 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>:
    pub fn set_orientation(&mut self, orientation: &Orientation) -> Result<(), ()> {
    9b98:	b580      	push	{r7, lr}
    9b9a:	b098      	sub	sp, #96	; 0x60
    9b9c:	9012      	str	r0, [sp, #72]	; 0x48
    9b9e:	9113      	str	r1, [sp, #76]	; 0x4c
        if self.rgb {
    9ba0:	7d02      	ldrb	r2, [r0, #20]
    9ba2:	07d2      	lsls	r2, r2, #31
    9ba4:	2a00      	cmp	r2, #0
    9ba6:	910a      	str	r1, [sp, #40]	; 0x28
    9ba8:	9009      	str	r0, [sp, #36]	; 0x24
    9baa:	d109      	bne.n	9bc0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x28>
    9bac:	e7ff      	b.n	9bae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x16>
    9bae:	2036      	movs	r0, #54	; 0x36
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
    9bb0:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
    9bb4:	980a      	ldr	r0, [sp, #40]	; 0x28
    9bb6:	f7ff fd96 	bl	96e6 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
    9bba:	9008      	str	r0, [sp, #32]
    9bbc:	9107      	str	r1, [sp, #28]
    9bbe:	e044      	b.n	9c4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb2>
    9bc0:	2036      	movs	r0, #54	; 0x36
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap()]
    9bc2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    9bc6:	980a      	ldr	r0, [sp, #40]	; 0x28
    9bc8:	f7ff fd8d 	bl	96e6 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
    9bcc:	9006      	str	r0, [sp, #24]
    9bce:	9105      	str	r1, [sp, #20]
    9bd0:	e7ff      	b.n	9bd2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x3a>
    9bd2:	9806      	ldr	r0, [sp, #24]
    9bd4:	f000 0001 	and.w	r0, r0, #1
    9bd8:	f24e 522c 	movw	r2, #58668	; 0xe52c
    9bdc:	f2c0 0201 	movt	r2, #1
    9be0:	9905      	ldr	r1, [sp, #20]
    9be2:	f00a fdec 	bl	147be <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    9be6:	9004      	str	r0, [sp, #16]
    9be8:	e7ff      	b.n	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x52>
    9bea:	9804      	ldr	r0, [sp, #16]
    9bec:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9bf0:	f10d 0139 	add.w	r1, sp, #57	; 0x39
    9bf4:	910c      	str	r1, [sp, #48]	; 0x30
    9bf6:	2101      	movs	r1, #1
    9bf8:	910d      	str	r1, [sp, #52]	; 0x34
            self.write_command(
    9bfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9bfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9bfe:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    9c02:	9809      	ldr	r0, [sp, #36]	; 0x24
    9c04:	f7ff ff6d 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9c08:	9003      	str	r0, [sp, #12]
    9c0a:	e7ff      	b.n	9c0c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x74>
    9c0c:	9803      	ldr	r0, [sp, #12]
    9c0e:	f000 0001 	and.w	r0, r0, #1
    9c12:	f7fe ffab 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9c16:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    9c1a:	e7ff      	b.n	9c1c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x84>
            ))?;
    9c1c:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    9c20:	07c1      	lsls	r1, r0, #31
    9c22:	2900      	cmp	r1, #0
    9c24:	d001      	beq.n	9c2a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x92>
    9c26:	e7ff      	b.n	9c28 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x90>
    9c28:	e001      	b.n	9c2e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x96>
        if self.rgb {
    9c2a:	e047      	b.n	9cbc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
    9c2c:	defe      	udf	#254	; 0xfe
            ))?;
    9c2e:	f008 f9b2 	bl	11f96 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9c32:	e003      	b.n	9c3c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xa4>
    }
    9c34:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    9c38:	b018      	add	sp, #96	; 0x60
    9c3a:	bd80      	pop	{r7, pc}
            ))?;
    9c3c:	f00b fc3c 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9c40:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    9c44:	e7ff      	b.n	9c46 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xae>
    9c46:	e7ff      	b.n	9c48 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
    9c48:	e7f4      	b.n	9c34 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
    9c4a:	9808      	ldr	r0, [sp, #32]
    9c4c:	f000 0001 	and.w	r0, r0, #1
    9c50:	f24e 523c 	movw	r2, #58684	; 0xe53c
    9c54:	f2c0 0201 	movt	r2, #1
    9c58:	9907      	ldr	r1, [sp, #28]
    9c5a:	f00a fdb0 	bl	147be <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    9c5e:	9002      	str	r0, [sp, #8]
    9c60:	e7ff      	b.n	9c62 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xca>
    9c62:	9802      	ldr	r0, [sp, #8]
    9c64:	f040 0108 	orr.w	r1, r0, #8
    9c68:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
    9c6c:	f10d 0147 	add.w	r1, sp, #71	; 0x47
    9c70:	910f      	str	r1, [sp, #60]	; 0x3c
    9c72:	2101      	movs	r1, #1
    9c74:	9110      	str	r1, [sp, #64]	; 0x40
            self.write_command(
    9c76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9c78:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9c7a:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
    9c7e:	9809      	ldr	r0, [sp, #36]	; 0x24
    9c80:	f7ff ff2f 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9c84:	9001      	str	r0, [sp, #4]
    9c86:	e7ff      	b.n	9c88 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xf0>
    9c88:	9801      	ldr	r0, [sp, #4]
    9c8a:	f000 0001 	and.w	r0, r0, #1
    9c8e:	f7fe ff6d 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9c92:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    9c96:	e7ff      	b.n	9c98 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x100>
            ))?;
    9c98:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    9c9c:	07c1      	lsls	r1, r0, #31
    9c9e:	2900      	cmp	r1, #0
    9ca0:	d001      	beq.n	9ca6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10e>
    9ca2:	e7ff      	b.n	9ca4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10c>
    9ca4:	e001      	b.n	9caa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x112>
        if self.rgb {
    9ca6:	e009      	b.n	9cbc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
    9ca8:	defe      	udf	#254	; 0xfe
            ))?;
    9caa:	f008 f974 	bl	11f96 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9cae:	e7ff      	b.n	9cb0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x118>
    9cb0:	f00b fc02 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9cb4:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    9cb8:	e7ff      	b.n	9cba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x122>
    9cba:	e7c5      	b.n	9c48 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
    9cbc:	2000      	movs	r0, #0
        Ok(())
    9cbe:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    }
    9cc2:	e7b7      	b.n	9c34 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>

00009cc4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>:
    fn set_address_window(&mut self, sx: u16, sy: u16, ex: u16, ey: u16) -> Result<(), ()> {
    9cc4:	b5b0      	push	{r4, r5, r7, lr}
    9cc6:	b0a2      	sub	sp, #136	; 0x88
    9cc8:	f8dd c098 	ldr.w	ip, [sp, #152]	; 0x98
    9ccc:	469e      	mov	lr, r3
    9cce:	4614      	mov	r4, r2
    9cd0:	460d      	mov	r5, r1
    9cd2:	9015      	str	r0, [sp, #84]	; 0x54
    9cd4:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
    9cd8:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    9cdc:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    9ce0:	f8ad c05e 	strh.w	ip, [sp, #94]	; 0x5e
    9ce4:	212a      	movs	r1, #42	; 0x2a
        self.write_command(Instruction::CASET, None)?;
    9ce6:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
    9cea:	2100      	movs	r1, #0
    9cec:	9110      	str	r1, [sp, #64]	; 0x40
    9cee:	910f      	str	r1, [sp, #60]	; 0x3c
    9cf0:	910f      	str	r1, [sp, #60]	; 0x3c
    9cf2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9cf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9cf6:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
    9cfa:	900d      	str	r0, [sp, #52]	; 0x34
    9cfc:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    9d00:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    9d04:	940a      	str	r4, [sp, #40]	; 0x28
    9d06:	9509      	str	r5, [sp, #36]	; 0x24
    9d08:	f7ff feeb 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9d0c:	9008      	str	r0, [sp, #32]
    9d0e:	e7ff      	b.n	9d10 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x4c>
    9d10:	9808      	ldr	r0, [sp, #32]
    9d12:	f000 0001 	and.w	r0, r0, #1
    9d16:	f7fe ff29 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9d1a:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    9d1e:	e7ff      	b.n	9d20 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x5c>
    9d20:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    9d24:	07c1      	lsls	r1, r0, #31
    9d26:	2900      	cmp	r1, #0
    9d28:	d001      	beq.n	9d2e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x6a>
    9d2a:	e7ff      	b.n	9d2c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x68>
    9d2c:	e00d      	b.n	9d4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x86>
        self.write_word(sx + self.dx)?;
    9d2e:	980d      	ldr	r0, [sp, #52]	; 0x34
    9d30:	8a01      	ldrh	r1, [r0, #16]
    9d32:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9d34:	fa11 f182 	uxtah	r1, r1, r2
    9d38:	b28b      	uxth	r3, r1
    9d3a:	468c      	mov	ip, r1
    9d3c:	428b      	cmp	r3, r1
    9d3e:	f8cd c01c 	str.w	ip, [sp, #28]
    9d42:	f040 80c2 	bne.w	9eca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x206>
    9d46:	e00d      	b.n	9d64 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xa0>
        self.write_command(Instruction::CASET, None)?;
    9d48:	defe      	udf	#254	; 0xfe
    9d4a:	f008 f924 	bl	11f96 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9d4e:	e003      	b.n	9d58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x94>
    }
    9d50:	f89d 0039 	ldrb.w	r0, [sp, #57]	; 0x39
    9d54:	b022      	add	sp, #136	; 0x88
    9d56:	bdb0      	pop	{r4, r5, r7, pc}
        self.write_command(Instruction::CASET, None)?;
    9d58:	f00b fbae 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9d5c:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9d60:	e7ff      	b.n	9d62 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x9e>
    9d62:	e7f5      	b.n	9d50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
    9d64:	980d      	ldr	r0, [sp, #52]	; 0x34
    9d66:	9907      	ldr	r1, [sp, #28]
    9d68:	f7ff fdec 	bl	9944 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9d6c:	9006      	str	r0, [sp, #24]
    9d6e:	e7ff      	b.n	9d70 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xac>
    9d70:	9806      	ldr	r0, [sp, #24]
    9d72:	f000 0001 	and.w	r0, r0, #1
    9d76:	f7fe fef9 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9d7a:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    9d7e:	e7ff      	b.n	9d80 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xbc>
    9d80:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    9d84:	07c1      	lsls	r1, r0, #31
    9d86:	2900      	cmp	r1, #0
    9d88:	d001      	beq.n	9d8e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xca>
    9d8a:	e7ff      	b.n	9d8c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xc8>
    9d8c:	e00d      	b.n	9daa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xe6>
        self.write_word(ex + self.dx)?;
    9d8e:	980d      	ldr	r0, [sp, #52]	; 0x34
    9d90:	8a01      	ldrh	r1, [r0, #16]
    9d92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9d94:	fa11 f182 	uxtah	r1, r1, r2
    9d98:	b28b      	uxth	r3, r1
    9d9a:	468c      	mov	ip, r1
    9d9c:	428b      	cmp	r3, r1
    9d9e:	f8cd c014 	str.w	ip, [sp, #20]
    9da2:	f040 809e 	bne.w	9ee2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x21e>
    9da6:	e009      	b.n	9dbc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf8>
        self.write_word(sx + self.dx)?;
    9da8:	defe      	udf	#254	; 0xfe
    9daa:	f008 f8f4 	bl	11f96 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9dae:	e7ff      	b.n	9db0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xec>
    9db0:	f00b fb82 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9db4:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9db8:	e7ff      	b.n	9dba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf6>
    9dba:	e7c9      	b.n	9d50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ex + self.dx)?;
    9dbc:	980d      	ldr	r0, [sp, #52]	; 0x34
    9dbe:	9905      	ldr	r1, [sp, #20]
    9dc0:	f7ff fdc0 	bl	9944 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9dc4:	9004      	str	r0, [sp, #16]
    9dc6:	e7ff      	b.n	9dc8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x104>
    9dc8:	9804      	ldr	r0, [sp, #16]
    9dca:	f000 0001 	and.w	r0, r0, #1
    9dce:	f7fe fecd 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9dd2:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
    9dd6:	e7ff      	b.n	9dd8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x114>
    9dd8:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
    9ddc:	07c1      	lsls	r1, r0, #31
    9dde:	2900      	cmp	r1, #0
    9de0:	d001      	beq.n	9de6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x122>
    9de2:	e7ff      	b.n	9de4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x120>
    9de4:	e010      	b.n	9e08 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x144>
    9de6:	202b      	movs	r0, #43	; 0x2b
        self.write_command(Instruction::RASET, None)?;
    9de8:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
    9dec:	2000      	movs	r0, #0
    9dee:	9013      	str	r0, [sp, #76]	; 0x4c
    9df0:	9012      	str	r0, [sp, #72]	; 0x48
    9df2:	9012      	str	r0, [sp, #72]	; 0x48
    9df4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9df6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9df8:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
    9dfc:	980d      	ldr	r0, [sp, #52]	; 0x34
    9dfe:	f7ff fe70 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9e02:	9003      	str	r0, [sp, #12]
    9e04:	e009      	b.n	9e1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x156>
        self.write_word(ex + self.dx)?;
    9e06:	defe      	udf	#254	; 0xfe
    9e08:	f008 f8c5 	bl	11f96 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9e0c:	e7ff      	b.n	9e0e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x14a>
    9e0e:	f00b fb53 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9e12:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9e16:	e7ff      	b.n	9e18 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x154>
    9e18:	e79a      	b.n	9d50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_command(Instruction::RASET, None)?;
    9e1a:	9803      	ldr	r0, [sp, #12]
    9e1c:	f000 0001 	and.w	r0, r0, #1
    9e20:	f7fe fea4 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9e24:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    9e28:	e7ff      	b.n	9e2a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x166>
    9e2a:	f89d 0046 	ldrb.w	r0, [sp, #70]	; 0x46
    9e2e:	07c1      	lsls	r1, r0, #31
    9e30:	2900      	cmp	r1, #0
    9e32:	d001      	beq.n	9e38 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x174>
    9e34:	e7ff      	b.n	9e36 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x172>
    9e36:	e00c      	b.n	9e52 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x18e>
        self.write_word(sy + self.dy)?;
    9e38:	980d      	ldr	r0, [sp, #52]	; 0x34
    9e3a:	8a41      	ldrh	r1, [r0, #18]
    9e3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9e3e:	fa11 f182 	uxtah	r1, r1, r2
    9e42:	b28b      	uxth	r3, r1
    9e44:	468c      	mov	ip, r1
    9e46:	428b      	cmp	r3, r1
    9e48:	f8cd c008 	str.w	ip, [sp, #8]
    9e4c:	d155      	bne.n	9efa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x236>
    9e4e:	e009      	b.n	9e64 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1a0>
        self.write_command(Instruction::RASET, None)?;
    9e50:	defe      	udf	#254	; 0xfe
    9e52:	f008 f8a0 	bl	11f96 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9e56:	e7ff      	b.n	9e58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x194>
    9e58:	f00b fb2e 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9e5c:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9e60:	e7ff      	b.n	9e62 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x19e>
    9e62:	e775      	b.n	9d50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sy + self.dy)?;
    9e64:	980d      	ldr	r0, [sp, #52]	; 0x34
    9e66:	9902      	ldr	r1, [sp, #8]
    9e68:	f7ff fd6c 	bl	9944 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9e6c:	9001      	str	r0, [sp, #4]
    9e6e:	e7ff      	b.n	9e70 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ac>
    9e70:	9801      	ldr	r0, [sp, #4]
    9e72:	f000 0001 	and.w	r0, r0, #1
    9e76:	f7fe fe79 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9e7a:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
    9e7e:	e7ff      	b.n	9e80 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1bc>
    9e80:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    9e84:	07c1      	lsls	r1, r0, #31
    9e86:	2900      	cmp	r1, #0
    9e88:	d001      	beq.n	9e8e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ca>
    9e8a:	e7ff      	b.n	9e8c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1c8>
    9e8c:	e00c      	b.n	9ea8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1e4>
        self.write_word(ey + self.dy)
    9e8e:	980d      	ldr	r0, [sp, #52]	; 0x34
    9e90:	8a41      	ldrh	r1, [r0, #18]
    9e92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9e94:	fa11 f182 	uxtah	r1, r1, r2
    9e98:	b28b      	uxth	r3, r1
    9e9a:	468c      	mov	ip, r1
    9e9c:	428b      	cmp	r3, r1
    9e9e:	f8cd c000 	str.w	ip, [sp]
    9ea2:	d136      	bne.n	9f12 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x24e>
    9ea4:	e009      	b.n	9eba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f6>
        self.write_word(sy + self.dy)?;
    9ea6:	defe      	udf	#254	; 0xfe
    9ea8:	f008 f875 	bl	11f96 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9eac:	e7ff      	b.n	9eae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ea>
    9eae:	f00b fb03 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9eb2:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9eb6:	e7ff      	b.n	9eb8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f4>
    9eb8:	e74a      	b.n	9d50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ey + self.dy)
    9eba:	980d      	ldr	r0, [sp, #52]	; 0x34
    9ebc:	9900      	ldr	r1, [sp, #0]
    9ebe:	f7ff fd41 	bl	9944 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9ec2:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9ec6:	e7ff      	b.n	9ec8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x204>
    }
    9ec8:	e742      	b.n	9d50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
    9eca:	f24e 5060 	movw	r0, #58720	; 0xe560
    9ece:	f2c0 0001 	movt	r0, #1
    9ed2:	f24e 524c 	movw	r2, #58700	; 0xe54c
    9ed6:	f2c0 0201 	movt	r2, #1
    9eda:	211c      	movs	r1, #28
    9edc:	f00d fd44 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9ee0:	defe      	udf	#254	; 0xfe
        self.write_word(ex + self.dx)?;
    9ee2:	f24e 5060 	movw	r0, #58720	; 0xe560
    9ee6:	f2c0 0001 	movt	r0, #1
    9eea:	f24e 527c 	movw	r2, #58748	; 0xe57c
    9eee:	f2c0 0201 	movt	r2, #1
    9ef2:	211c      	movs	r1, #28
    9ef4:	f00d fd38 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9ef8:	defe      	udf	#254	; 0xfe
        self.write_word(sy + self.dy)?;
    9efa:	f24e 5060 	movw	r0, #58720	; 0xe560
    9efe:	f2c0 0001 	movt	r0, #1
    9f02:	f24e 528c 	movw	r2, #58764	; 0xe58c
    9f06:	f2c0 0201 	movt	r2, #1
    9f0a:	211c      	movs	r1, #28
    9f0c:	f00d fd2c 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9f10:	defe      	udf	#254	; 0xfe
        self.write_word(ey + self.dy)
    9f12:	f24e 5060 	movw	r0, #58720	; 0xe560
    9f16:	f2c0 0001 	movt	r0, #1
    9f1a:	f24e 529c 	movw	r2, #58780	; 0xe59c
    9f1e:	f2c0 0201 	movt	r2, #1
    9f22:	211c      	movs	r1, #28
    9f24:	f00d fd20 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9f28:	defe      	udf	#254	; 0xfe

00009f2a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>:
    pub fn new(
    9f2a:	b5b0      	push	{r4, r5, r7, lr}
    9f2c:	b08a      	sub	sp, #40	; 0x28
    9f2e:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    9f32:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
    9f36:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    9f38:	9106      	str	r1, [sp, #24]
    9f3a:	9207      	str	r2, [sp, #28]
    9f3c:	9308      	str	r3, [sp, #32]
    9f3e:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
    9f42:	f88d c027 	strb.w	ip, [sp, #39]	; 0x27
        let display = ST7735 {
    9f46:	9100      	str	r1, [sp, #0]
    9f48:	9201      	str	r2, [sp, #4]
    9f4a:	9302      	str	r3, [sp, #8]
    9f4c:	9403      	str	r4, [sp, #12]
    9f4e:	f88d e014 	strb.w	lr, [sp, #20]
    9f52:	f88d c015 	strb.w	ip, [sp, #21]
    9f56:	2100      	movs	r1, #0
    9f58:	f8ad 1010 	strh.w	r1, [sp, #16]
    9f5c:	f8ad 1012 	strh.w	r1, [sp, #18]
    9f60:	4669      	mov	r1, sp
        display
    9f62:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    9f66:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    }
    9f6a:	b00a      	add	sp, #40	; 0x28
    9f6c:	bdb0      	pop	{r4, r5, r7, pc}

00009f6e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>:
    pub fn init<DELAY>(&mut self, delay: &mut DELAY) -> Result<(), ()>
    9f6e:	b580      	push	{r7, lr}
    9f70:	b0f6      	sub	sp, #472	; 0x1d8
    9f72:	904e      	str	r0, [sp, #312]	; 0x138
    9f74:	914f      	str	r1, [sp, #316]	; 0x13c
        mynewt::spi::spi_noblock_init()  //  Init the SPI queue
    9f76:	9117      	str	r1, [sp, #92]	; 0x5c
    9f78:	9016      	str	r0, [sp, #88]	; 0x58
    9f7a:	f008 fcf9 	bl	12970 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>
    9f7e:	9015      	str	r0, [sp, #84]	; 0x54
    9f80:	e7ff      	b.n	9f82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x14>
    9f82:	f24e 51ac 	movw	r1, #58796	; 0xe5ac
    9f86:	f2c0 0101 	movt	r1, #1
    9f8a:	f24e 53bc 	movw	r3, #58812	; 0xe5bc
    9f8e:	f2c0 0301 	movt	r3, #1
    9f92:	220d      	movs	r2, #13
    9f94:	9815      	ldr	r0, [sp, #84]	; 0x54
    9f96:	f7fe fdb0 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9f9a:	e7ff      	b.n	9f9c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2e>
        self.hard_reset()?;
    9f9c:	9816      	ldr	r0, [sp, #88]	; 0x58
    9f9e:	f7ff fbbd 	bl	971c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>
    9fa2:	9014      	str	r0, [sp, #80]	; 0x50
    9fa4:	e7ff      	b.n	9fa6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38>
    9fa6:	9814      	ldr	r0, [sp, #80]	; 0x50
    9fa8:	f000 0001 	and.w	r0, r0, #1
    9fac:	f7fe fdde 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9fb0:	f88d 0061 	strb.w	r0, [sp, #97]	; 0x61
    9fb4:	e7ff      	b.n	9fb6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48>
    9fb6:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
    9fba:	07c1      	lsls	r1, r0, #31
    9fbc:	2900      	cmp	r1, #0
    9fbe:	d001      	beq.n	9fc4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x56>
    9fc0:	e7ff      	b.n	9fc2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54>
    9fc2:	e010      	b.n	9fe6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x78>
    9fc4:	2001      	movs	r0, #1
        self.write_command(Instruction::SWRESET, None)?;
    9fc6:	f88d 0063 	strb.w	r0, [sp, #99]	; 0x63
    9fca:	2000      	movs	r0, #0
    9fcc:	901a      	str	r0, [sp, #104]	; 0x68
    9fce:	9019      	str	r0, [sp, #100]	; 0x64
    9fd0:	9019      	str	r0, [sp, #100]	; 0x64
    9fd2:	9a19      	ldr	r2, [sp, #100]	; 0x64
    9fd4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9fd6:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
    9fda:	9816      	ldr	r0, [sp, #88]	; 0x58
    9fdc:	f7ff fd81 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9fe0:	9013      	str	r0, [sp, #76]	; 0x4c
    9fe2:	e00d      	b.n	a000 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x92>
        self.hard_reset()?;
    9fe4:	defe      	udf	#254	; 0xfe
    9fe6:	f007 ffd6 	bl	11f96 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9fea:	e003      	b.n	9ff4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x86>
    }
    9fec:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    9ff0:	b076      	add	sp, #472	; 0x1d8
    9ff2:	bd80      	pop	{r7, pc}
        self.hard_reset()?;
    9ff4:	f00b fa60 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9ff8:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9ffc:	e7ff      	b.n	9ffe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x90>
    9ffe:	e7f5      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::SWRESET, None)?;
    a000:	9813      	ldr	r0, [sp, #76]	; 0x4c
    a002:	f000 0001 	and.w	r0, r0, #1
    a006:	f7fe fdb1 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a00a:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
    a00e:	e7ff      	b.n	a010 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xa2>
    a010:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
    a014:	07c1      	lsls	r1, r0, #31
    a016:	2900      	cmp	r1, #0
    a018:	d001      	beq.n	a01e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xb0>
    a01a:	e7ff      	b.n	a01c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xae>
    a01c:	e005      	b.n	a02a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xbc>
    a01e:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    a020:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a022:	f00a faa0 	bl	14566 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    a026:	e009      	b.n	a03c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xce>
        self.write_command(Instruction::SWRESET, None)?;
    a028:	defe      	udf	#254	; 0xfe
    a02a:	f007 ffb4 	bl	11f96 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a02e:	e7ff      	b.n	a030 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xc2>
    a030:	f00b fa42 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a034:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a038:	e7ff      	b.n	a03a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xcc>
    a03a:	e7d7      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    a03c:	2011      	movs	r0, #17
        self.write_command(Instruction::SLPOUT, None)?;
    a03e:	f88d 006f 	strb.w	r0, [sp, #111]	; 0x6f
    a042:	2000      	movs	r0, #0
    a044:	901d      	str	r0, [sp, #116]	; 0x74
    a046:	901c      	str	r0, [sp, #112]	; 0x70
    a048:	901c      	str	r0, [sp, #112]	; 0x70
    a04a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    a04c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a04e:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
    a052:	9816      	ldr	r0, [sp, #88]	; 0x58
    a054:	f7ff fd45 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a058:	9012      	str	r0, [sp, #72]	; 0x48
    a05a:	e7ff      	b.n	a05c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xee>
    a05c:	9812      	ldr	r0, [sp, #72]	; 0x48
    a05e:	f000 0001 	and.w	r0, r0, #1
    a062:	f7fe fd83 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a066:	f88d 006e 	strb.w	r0, [sp, #110]	; 0x6e
    a06a:	e7ff      	b.n	a06c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xfe>
    a06c:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
    a070:	07c1      	lsls	r1, r0, #31
    a072:	2900      	cmp	r1, #0
    a074:	d001      	beq.n	a07a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10c>
    a076:	e7ff      	b.n	a078 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10a>
    a078:	e005      	b.n	a086 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x118>
    a07a:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    a07c:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a07e:	f00a fa72 	bl	14566 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    a082:	e009      	b.n	a098 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x12a>
        self.write_command(Instruction::SLPOUT, None)?;
    a084:	defe      	udf	#254	; 0xfe
    a086:	f007 ff86 	bl	11f96 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a08a:	e7ff      	b.n	a08c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x11e>
    a08c:	f00b fa14 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a090:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a094:	e7ff      	b.n	a096 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x128>
    a096:	e7a9      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    a098:	20b1      	movs	r0, #177	; 0xb1
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
    a09a:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
    a09e:	f24e 50d0 	movw	r0, #58832	; 0xe5d0
    a0a2:	f2c0 0001 	movt	r0, #1
    a0a6:	6800      	ldr	r0, [r0, #0]
    a0a8:	901f      	str	r0, [sp, #124]	; 0x7c
    a0aa:	2003      	movs	r0, #3
    a0ac:	9020      	str	r0, [sp, #128]	; 0x80
    a0ae:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    a0b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a0b2:	f89d 107b 	ldrb.w	r1, [sp, #123]	; 0x7b
    a0b6:	9816      	ldr	r0, [sp, #88]	; 0x58
    a0b8:	f7ff fd13 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a0bc:	9011      	str	r0, [sp, #68]	; 0x44
    a0be:	e7ff      	b.n	a0c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x152>
    a0c0:	9811      	ldr	r0, [sp, #68]	; 0x44
    a0c2:	f000 0001 	and.w	r0, r0, #1
    a0c6:	f7fe fd51 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a0ca:	f88d 007a 	strb.w	r0, [sp, #122]	; 0x7a
    a0ce:	e7ff      	b.n	a0d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x162>
    a0d0:	f89d 007a 	ldrb.w	r0, [sp, #122]	; 0x7a
    a0d4:	07c1      	lsls	r1, r0, #31
    a0d6:	2900      	cmp	r1, #0
    a0d8:	d001      	beq.n	a0de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x170>
    a0da:	e7ff      	b.n	a0dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x16e>
    a0dc:	e014      	b.n	a108 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x19a>
    a0de:	20b2      	movs	r0, #178	; 0xb2
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    a0e0:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
    a0e4:	f24e 50d0 	movw	r0, #58832	; 0xe5d0
    a0e8:	f2c0 0001 	movt	r0, #1
    a0ec:	6800      	ldr	r0, [r0, #0]
    a0ee:	9022      	str	r0, [sp, #136]	; 0x88
    a0f0:	2003      	movs	r0, #3
    a0f2:	9023      	str	r0, [sp, #140]	; 0x8c
    a0f4:	9a22      	ldr	r2, [sp, #136]	; 0x88
    a0f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    a0f8:	f89d 1087 	ldrb.w	r1, [sp, #135]	; 0x87
    a0fc:	9816      	ldr	r0, [sp, #88]	; 0x58
    a0fe:	f7ff fcf0 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a102:	9010      	str	r0, [sp, #64]	; 0x40
    a104:	e009      	b.n	a11a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ac>
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
    a106:	defe      	udf	#254	; 0xfe
    a108:	f007 ff45 	bl	11f96 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a10c:	e7ff      	b.n	a10e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1a0>
    a10e:	f00b f9d3 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a112:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a116:	e7ff      	b.n	a118 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1aa>
    a118:	e768      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    a11a:	9810      	ldr	r0, [sp, #64]	; 0x40
    a11c:	f000 0001 	and.w	r0, r0, #1
    a120:	f7fe fd24 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a124:	f88d 0086 	strb.w	r0, [sp, #134]	; 0x86
    a128:	e7ff      	b.n	a12a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1bc>
    a12a:	f89d 0086 	ldrb.w	r0, [sp, #134]	; 0x86
    a12e:	07c1      	lsls	r1, r0, #31
    a130:	2900      	cmp	r1, #0
    a132:	d001      	beq.n	a138 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ca>
    a134:	e7ff      	b.n	a136 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1c8>
    a136:	e014      	b.n	a162 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1f4>
    a138:	20b3      	movs	r0, #179	; 0xb3
        self.write_command(Instruction::FRMCTR3,
    a13a:	f88d 0093 	strb.w	r0, [sp, #147]	; 0x93
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    a13e:	f24e 50dc 	movw	r0, #58844	; 0xe5dc
    a142:	f2c0 0001 	movt	r0, #1
    a146:	6800      	ldr	r0, [r0, #0]
    a148:	9025      	str	r0, [sp, #148]	; 0x94
    a14a:	2006      	movs	r0, #6
    a14c:	9026      	str	r0, [sp, #152]	; 0x98
        self.write_command(Instruction::FRMCTR3,
    a14e:	9a25      	ldr	r2, [sp, #148]	; 0x94
    a150:	9b26      	ldr	r3, [sp, #152]	; 0x98
    a152:	f89d 1093 	ldrb.w	r1, [sp, #147]	; 0x93
    a156:	9816      	ldr	r0, [sp, #88]	; 0x58
    a158:	f7ff fcc3 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a15c:	900f      	str	r0, [sp, #60]	; 0x3c
    a15e:	e009      	b.n	a174 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x206>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    a160:	defe      	udf	#254	; 0xfe
    a162:	f007 ff18 	bl	11f96 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a166:	e7ff      	b.n	a168 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1fa>
    a168:	f00b f9a6 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a16c:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a170:	e7ff      	b.n	a172 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x204>
    a172:	e73b      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR3,
    a174:	980f      	ldr	r0, [sp, #60]	; 0x3c
    a176:	f000 0001 	and.w	r0, r0, #1
    a17a:	f7fe fcf7 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a17e:	f88d 0092 	strb.w	r0, [sp, #146]	; 0x92
    a182:	e7ff      	b.n	a184 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x216>
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    a184:	f89d 0092 	ldrb.w	r0, [sp, #146]	; 0x92
    a188:	07c1      	lsls	r1, r0, #31
    a18a:	2900      	cmp	r1, #0
    a18c:	d001      	beq.n	a192 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x224>
    a18e:	e7ff      	b.n	a190 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x222>
    a190:	e014      	b.n	a1bc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x24e>
    a192:	20b4      	movs	r0, #180	; 0xb4
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    a194:	f88d 009f 	strb.w	r0, [sp, #159]	; 0x9f
    a198:	f24e 50e4 	movw	r0, #58852	; 0xe5e4
    a19c:	f2c0 0001 	movt	r0, #1
    a1a0:	6800      	ldr	r0, [r0, #0]
    a1a2:	9028      	str	r0, [sp, #160]	; 0xa0
    a1a4:	2001      	movs	r0, #1
    a1a6:	9029      	str	r0, [sp, #164]	; 0xa4
    a1a8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    a1aa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    a1ac:	f89d 109f 	ldrb.w	r1, [sp, #159]	; 0x9f
    a1b0:	9816      	ldr	r0, [sp, #88]	; 0x58
    a1b2:	f7ff fc96 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a1b6:	900e      	str	r0, [sp, #56]	; 0x38
    a1b8:	e009      	b.n	a1ce <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x260>
        self.write_command(Instruction::FRMCTR3,
    a1ba:	defe      	udf	#254	; 0xfe
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    a1bc:	f007 feeb 	bl	11f96 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a1c0:	e7ff      	b.n	a1c2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x254>
    a1c2:	f00b f979 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a1c6:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a1ca:	e7ff      	b.n	a1cc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x25e>
    a1cc:	e70e      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    a1ce:	980e      	ldr	r0, [sp, #56]	; 0x38
    a1d0:	f000 0001 	and.w	r0, r0, #1
    a1d4:	f7fe fcca 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a1d8:	f88d 009e 	strb.w	r0, [sp, #158]	; 0x9e
    a1dc:	e7ff      	b.n	a1de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x270>
    a1de:	f89d 009e 	ldrb.w	r0, [sp, #158]	; 0x9e
    a1e2:	07c1      	lsls	r1, r0, #31
    a1e4:	2900      	cmp	r1, #0
    a1e6:	d001      	beq.n	a1ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27e>
    a1e8:	e7ff      	b.n	a1ea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27c>
    a1ea:	e014      	b.n	a216 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2a8>
    a1ec:	20c0      	movs	r0, #192	; 0xc0
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    a1ee:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
    a1f2:	f24e 50ec 	movw	r0, #58860	; 0xe5ec
    a1f6:	f2c0 0001 	movt	r0, #1
    a1fa:	6800      	ldr	r0, [r0, #0]
    a1fc:	902b      	str	r0, [sp, #172]	; 0xac
    a1fe:	2003      	movs	r0, #3
    a200:	902c      	str	r0, [sp, #176]	; 0xb0
    a202:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    a204:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    a206:	f89d 10ab 	ldrb.w	r1, [sp, #171]	; 0xab
    a20a:	9816      	ldr	r0, [sp, #88]	; 0x58
    a20c:	f7ff fc69 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a210:	900d      	str	r0, [sp, #52]	; 0x34
    a212:	e009      	b.n	a228 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ba>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    a214:	defe      	udf	#254	; 0xfe
    a216:	f007 febe 	bl	11f96 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a21a:	e7ff      	b.n	a21c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ae>
    a21c:	f00b f94c 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a220:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a224:	e7ff      	b.n	a226 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2b8>
    a226:	e6e1      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    a228:	980d      	ldr	r0, [sp, #52]	; 0x34
    a22a:	f000 0001 	and.w	r0, r0, #1
    a22e:	f7fe fc9d 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a232:	f88d 00aa 	strb.w	r0, [sp, #170]	; 0xaa
    a236:	e7ff      	b.n	a238 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ca>
    a238:	f89d 00aa 	ldrb.w	r0, [sp, #170]	; 0xaa
    a23c:	07c1      	lsls	r1, r0, #31
    a23e:	2900      	cmp	r1, #0
    a240:	d001      	beq.n	a246 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d8>
    a242:	e7ff      	b.n	a244 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d6>
    a244:	e014      	b.n	a270 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x302>
    a246:	20c1      	movs	r0, #193	; 0xc1
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a248:	f88d 00b7 	strb.w	r0, [sp, #183]	; 0xb7
    a24c:	f24e 50f4 	movw	r0, #58868	; 0xe5f4
    a250:	f2c0 0001 	movt	r0, #1
    a254:	6800      	ldr	r0, [r0, #0]
    a256:	902e      	str	r0, [sp, #184]	; 0xb8
    a258:	2001      	movs	r0, #1
    a25a:	902f      	str	r0, [sp, #188]	; 0xbc
    a25c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    a25e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    a260:	f89d 10b7 	ldrb.w	r1, [sp, #183]	; 0xb7
    a264:	9816      	ldr	r0, [sp, #88]	; 0x58
    a266:	f7ff fc3c 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a26a:	900c      	str	r0, [sp, #48]	; 0x30
    a26c:	e009      	b.n	a282 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x314>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    a26e:	defe      	udf	#254	; 0xfe
    a270:	f007 fe91 	bl	11f96 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a274:	e7ff      	b.n	a276 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x308>
    a276:	f00b f91f 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a27a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a27e:	e7ff      	b.n	a280 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x312>
    a280:	e6b4      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a282:	980c      	ldr	r0, [sp, #48]	; 0x30
    a284:	f000 0001 	and.w	r0, r0, #1
    a288:	f7fe fc70 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a28c:	f88d 00b6 	strb.w	r0, [sp, #182]	; 0xb6
    a290:	e7ff      	b.n	a292 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x324>
    a292:	f89d 00b6 	ldrb.w	r0, [sp, #182]	; 0xb6
    a296:	07c1      	lsls	r1, r0, #31
    a298:	2900      	cmp	r1, #0
    a29a:	d001      	beq.n	a2a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x332>
    a29c:	e7ff      	b.n	a29e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x330>
    a29e:	e014      	b.n	a2ca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x35c>
    a2a0:	20c2      	movs	r0, #194	; 0xc2
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a2a2:	f88d 00c3 	strb.w	r0, [sp, #195]	; 0xc3
    a2a6:	f24e 50fc 	movw	r0, #58876	; 0xe5fc
    a2aa:	f2c0 0001 	movt	r0, #1
    a2ae:	6800      	ldr	r0, [r0, #0]
    a2b0:	9031      	str	r0, [sp, #196]	; 0xc4
    a2b2:	2002      	movs	r0, #2
    a2b4:	9032      	str	r0, [sp, #200]	; 0xc8
    a2b6:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    a2b8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    a2ba:	f89d 10c3 	ldrb.w	r1, [sp, #195]	; 0xc3
    a2be:	9816      	ldr	r0, [sp, #88]	; 0x58
    a2c0:	f7ff fc0f 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a2c4:	900b      	str	r0, [sp, #44]	; 0x2c
    a2c6:	e009      	b.n	a2dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a2c8:	defe      	udf	#254	; 0xfe
    a2ca:	f007 fe64 	bl	11f96 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a2ce:	e7ff      	b.n	a2d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x362>
    a2d0:	f00b f8f2 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a2d4:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a2d8:	e7ff      	b.n	a2da <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36c>
    a2da:	e687      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a2dc:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a2de:	f000 0001 	and.w	r0, r0, #1
    a2e2:	f7fe fc43 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a2e6:	f88d 00c2 	strb.w	r0, [sp, #194]	; 0xc2
    a2ea:	e7ff      	b.n	a2ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x37e>
    a2ec:	f89d 00c2 	ldrb.w	r0, [sp, #194]	; 0xc2
    a2f0:	07c1      	lsls	r1, r0, #31
    a2f2:	2900      	cmp	r1, #0
    a2f4:	d001      	beq.n	a2fa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38c>
    a2f6:	e7ff      	b.n	a2f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38a>
    a2f8:	e014      	b.n	a324 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3b6>
    a2fa:	20c3      	movs	r0, #195	; 0xc3
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a2fc:	f88d 00cf 	strb.w	r0, [sp, #207]	; 0xcf
    a300:	f24e 6004 	movw	r0, #58884	; 0xe604
    a304:	f2c0 0001 	movt	r0, #1
    a308:	6800      	ldr	r0, [r0, #0]
    a30a:	9034      	str	r0, [sp, #208]	; 0xd0
    a30c:	2002      	movs	r0, #2
    a30e:	9035      	str	r0, [sp, #212]	; 0xd4
    a310:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    a312:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    a314:	f89d 10cf 	ldrb.w	r1, [sp, #207]	; 0xcf
    a318:	9816      	ldr	r0, [sp, #88]	; 0x58
    a31a:	f7ff fbe2 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a31e:	900a      	str	r0, [sp, #40]	; 0x28
    a320:	e009      	b.n	a336 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c8>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a322:	defe      	udf	#254	; 0xfe
    a324:	f007 fe37 	bl	11f96 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a328:	e7ff      	b.n	a32a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3bc>
    a32a:	f00b f8c5 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a32e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a332:	e7ff      	b.n	a334 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c6>
    a334:	e65a      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a336:	980a      	ldr	r0, [sp, #40]	; 0x28
    a338:	f000 0001 	and.w	r0, r0, #1
    a33c:	f7fe fc16 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a340:	f88d 00ce 	strb.w	r0, [sp, #206]	; 0xce
    a344:	e7ff      	b.n	a346 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3d8>
    a346:	f89d 00ce 	ldrb.w	r0, [sp, #206]	; 0xce
    a34a:	07c1      	lsls	r1, r0, #31
    a34c:	2900      	cmp	r1, #0
    a34e:	d001      	beq.n	a354 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e6>
    a350:	e7ff      	b.n	a352 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e4>
    a352:	e014      	b.n	a37e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x410>
    a354:	20c4      	movs	r0, #196	; 0xc4
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a356:	f88d 00db 	strb.w	r0, [sp, #219]	; 0xdb
    a35a:	f24e 600c 	movw	r0, #58892	; 0xe60c
    a35e:	f2c0 0001 	movt	r0, #1
    a362:	6800      	ldr	r0, [r0, #0]
    a364:	9037      	str	r0, [sp, #220]	; 0xdc
    a366:	2002      	movs	r0, #2
    a368:	9038      	str	r0, [sp, #224]	; 0xe0
    a36a:	9a37      	ldr	r2, [sp, #220]	; 0xdc
    a36c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    a36e:	f89d 10db 	ldrb.w	r1, [sp, #219]	; 0xdb
    a372:	9816      	ldr	r0, [sp, #88]	; 0x58
    a374:	f7ff fbb5 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a378:	9009      	str	r0, [sp, #36]	; 0x24
    a37a:	e009      	b.n	a390 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x422>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a37c:	defe      	udf	#254	; 0xfe
    a37e:	f007 fe0a 	bl	11f96 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a382:	e7ff      	b.n	a384 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x416>
    a384:	f00b f898 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a388:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a38c:	e7ff      	b.n	a38e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x420>
    a38e:	e62d      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a390:	9809      	ldr	r0, [sp, #36]	; 0x24
    a392:	f000 0001 	and.w	r0, r0, #1
    a396:	f7fe fbe9 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a39a:	f88d 00da 	strb.w	r0, [sp, #218]	; 0xda
    a39e:	e7ff      	b.n	a3a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x432>
    a3a0:	f89d 00da 	ldrb.w	r0, [sp, #218]	; 0xda
    a3a4:	07c1      	lsls	r1, r0, #31
    a3a6:	2900      	cmp	r1, #0
    a3a8:	d001      	beq.n	a3ae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x440>
    a3aa:	e7ff      	b.n	a3ac <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x43e>
    a3ac:	e014      	b.n	a3d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x46a>
    a3ae:	20c5      	movs	r0, #197	; 0xc5
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a3b0:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
    a3b4:	f24e 6014 	movw	r0, #58900	; 0xe614
    a3b8:	f2c0 0001 	movt	r0, #1
    a3bc:	6800      	ldr	r0, [r0, #0]
    a3be:	903a      	str	r0, [sp, #232]	; 0xe8
    a3c0:	2001      	movs	r0, #1
    a3c2:	903b      	str	r0, [sp, #236]	; 0xec
    a3c4:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    a3c6:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    a3c8:	f89d 10e7 	ldrb.w	r1, [sp, #231]	; 0xe7
    a3cc:	9816      	ldr	r0, [sp, #88]	; 0x58
    a3ce:	f7ff fb88 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a3d2:	9008      	str	r0, [sp, #32]
    a3d4:	e009      	b.n	a3ea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47c>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a3d6:	defe      	udf	#254	; 0xfe
    a3d8:	f007 fddd 	bl	11f96 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a3dc:	e7ff      	b.n	a3de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x470>
    a3de:	f00b f86b 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a3e2:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a3e6:	e7ff      	b.n	a3e8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47a>
    a3e8:	e600      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a3ea:	9808      	ldr	r0, [sp, #32]
    a3ec:	f000 0001 	and.w	r0, r0, #1
    a3f0:	f7fe fbbc 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a3f4:	f88d 00e6 	strb.w	r0, [sp, #230]	; 0xe6
    a3f8:	e7ff      	b.n	a3fa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48c>
    a3fa:	f89d 00e6 	ldrb.w	r0, [sp, #230]	; 0xe6
    a3fe:	07c1      	lsls	r1, r0, #31
    a400:	2900      	cmp	r1, #0
    a402:	d001      	beq.n	a408 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x49a>
    a404:	e7ff      	b.n	a406 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x498>
    a406:	e006      	b.n	a416 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4a8>
        if self.inverted {
    a408:	9816      	ldr	r0, [sp, #88]	; 0x58
    a40a:	7d41      	ldrb	r1, [r0, #21]
    a40c:	07c9      	lsls	r1, r1, #31
    a40e:	2900      	cmp	r1, #0
    a410:	d11a      	bne.n	a448 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4da>
    a412:	e009      	b.n	a428 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ba>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a414:	defe      	udf	#254	; 0xfe
    a416:	f007 fdbe 	bl	11f96 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a41a:	e7ff      	b.n	a41c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ae>
    a41c:	f00b f84c 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a420:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a424:	e7ff      	b.n	a426 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4b8>
    a426:	e5e1      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    a428:	2020      	movs	r0, #32
            self.write_command(Instruction::INVOFF, None)?;
    a42a:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
    a42e:	2000      	movs	r0, #0
    a430:	9041      	str	r0, [sp, #260]	; 0x104
    a432:	9040      	str	r0, [sp, #256]	; 0x100
    a434:	9040      	str	r0, [sp, #256]	; 0x100
    a436:	9a40      	ldr	r2, [sp, #256]	; 0x100
    a438:	9b41      	ldr	r3, [sp, #260]	; 0x104
    a43a:	f89d 10ff 	ldrb.w	r1, [sp, #255]	; 0xff
    a43e:	9816      	ldr	r0, [sp, #88]	; 0x58
    a440:	f7ff fb4f 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a444:	9007      	str	r0, [sp, #28]
    a446:	e02a      	b.n	a49e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x530>
    a448:	2021      	movs	r0, #33	; 0x21
            self.write_command(Instruction::INVON, None)?;
    a44a:	f88d 00f3 	strb.w	r0, [sp, #243]	; 0xf3
    a44e:	2000      	movs	r0, #0
    a450:	903e      	str	r0, [sp, #248]	; 0xf8
    a452:	903d      	str	r0, [sp, #244]	; 0xf4
    a454:	903d      	str	r0, [sp, #244]	; 0xf4
    a456:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
    a458:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    a45a:	f89d 10f3 	ldrb.w	r1, [sp, #243]	; 0xf3
    a45e:	9816      	ldr	r0, [sp, #88]	; 0x58
    a460:	f7ff fb3f 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a464:	9006      	str	r0, [sp, #24]
    a466:	e7ff      	b.n	a468 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4fa>
    a468:	9806      	ldr	r0, [sp, #24]
    a46a:	f000 0001 	and.w	r0, r0, #1
    a46e:	f7fe fb7d 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a472:	f88d 00f2 	strb.w	r0, [sp, #242]	; 0xf2
    a476:	e7ff      	b.n	a478 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x50a>
    a478:	f89d 00f2 	ldrb.w	r0, [sp, #242]	; 0xf2
    a47c:	07c1      	lsls	r1, r0, #31
    a47e:	2900      	cmp	r1, #0
    a480:	d001      	beq.n	a486 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x518>
    a482:	e7ff      	b.n	a484 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x516>
    a484:	e001      	b.n	a48a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x51c>
        if self.inverted {
    a486:	e024      	b.n	a4d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVON, None)?;
    a488:	defe      	udf	#254	; 0xfe
    a48a:	f007 fd84 	bl	11f96 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a48e:	e7ff      	b.n	a490 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x522>
    a490:	f00b f812 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a494:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a498:	e7ff      	b.n	a49a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52c>
    a49a:	e7ff      	b.n	a49c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
    a49c:	e5a6      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::INVOFF, None)?;
    a49e:	9807      	ldr	r0, [sp, #28]
    a4a0:	f000 0001 	and.w	r0, r0, #1
    a4a4:	f7fe fb62 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a4a8:	f88d 00fe 	strb.w	r0, [sp, #254]	; 0xfe
    a4ac:	e7ff      	b.n	a4ae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x540>
    a4ae:	f89d 00fe 	ldrb.w	r0, [sp, #254]	; 0xfe
    a4b2:	07c1      	lsls	r1, r0, #31
    a4b4:	2900      	cmp	r1, #0
    a4b6:	d001      	beq.n	a4bc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54e>
    a4b8:	e7ff      	b.n	a4ba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54c>
    a4ba:	e001      	b.n	a4c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x552>
        if self.inverted {
    a4bc:	e009      	b.n	a4d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVOFF, None)?;
    a4be:	defe      	udf	#254	; 0xfe
    a4c0:	f007 fd69 	bl	11f96 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a4c4:	e7ff      	b.n	a4c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x558>
    a4c6:	f00a fff7 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a4ca:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a4ce:	e7ff      	b.n	a4d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x562>
    a4d0:	e7e4      	b.n	a49c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
        if self.rgb {
    a4d2:	9816      	ldr	r0, [sp, #88]	; 0x58
    a4d4:	7d01      	ldrb	r1, [r0, #20]
    a4d6:	07c9      	lsls	r1, r1, #31
    a4d8:	2900      	cmp	r1, #0
    a4da:	d114      	bne.n	a506 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x598>
    a4dc:	e7ff      	b.n	a4de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x570>
    a4de:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a4e0:	f88d 0117 	strb.w	r0, [sp, #279]	; 0x117
    a4e4:	f24e 6024 	movw	r0, #58916	; 0xe624
    a4e8:	f2c0 0001 	movt	r0, #1
    a4ec:	6800      	ldr	r0, [r0, #0]
    a4ee:	9046      	str	r0, [sp, #280]	; 0x118
    a4f0:	2001      	movs	r0, #1
    a4f2:	9047      	str	r0, [sp, #284]	; 0x11c
    a4f4:	9a46      	ldr	r2, [sp, #280]	; 0x118
    a4f6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    a4f8:	f89d 1117 	ldrb.w	r1, [sp, #279]	; 0x117
    a4fc:	9816      	ldr	r0, [sp, #88]	; 0x58
    a4fe:	f7ff faf0 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a502:	9005      	str	r0, [sp, #20]
    a504:	e02e      	b.n	a564 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f6>
    a506:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
    a508:	f88d 010b 	strb.w	r0, [sp, #267]	; 0x10b
    a50c:	f24e 601c 	movw	r0, #58908	; 0xe61c
    a510:	f2c0 0001 	movt	r0, #1
    a514:	6800      	ldr	r0, [r0, #0]
    a516:	9043      	str	r0, [sp, #268]	; 0x10c
    a518:	2001      	movs	r0, #1
    a51a:	9044      	str	r0, [sp, #272]	; 0x110
    a51c:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    a51e:	9b44      	ldr	r3, [sp, #272]	; 0x110
    a520:	f89d 110b 	ldrb.w	r1, [sp, #267]	; 0x10b
    a524:	9816      	ldr	r0, [sp, #88]	; 0x58
    a526:	f7ff fadc 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a52a:	9004      	str	r0, [sp, #16]
    a52c:	e7ff      	b.n	a52e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5c0>
    a52e:	9804      	ldr	r0, [sp, #16]
    a530:	f000 0001 	and.w	r0, r0, #1
    a534:	f7fe fb1a 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a538:	f88d 010a 	strb.w	r0, [sp, #266]	; 0x10a
    a53c:	e7ff      	b.n	a53e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5d0>
    a53e:	f89d 010a 	ldrb.w	r0, [sp, #266]	; 0x10a
    a542:	07c1      	lsls	r1, r0, #31
    a544:	2900      	cmp	r1, #0
    a546:	d001      	beq.n	a54c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5de>
    a548:	e7ff      	b.n	a54a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5dc>
    a54a:	e001      	b.n	a550 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e2>
        if self.rgb {
    a54c:	e024      	b.n	a598 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
    a54e:	defe      	udf	#254	; 0xfe
    a550:	f007 fd21 	bl	11f96 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a554:	e7ff      	b.n	a556 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e8>
    a556:	f00a ffaf 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a55a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a55e:	e7ff      	b.n	a560 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f2>
    a560:	e7ff      	b.n	a562 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
    a562:	e543      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a564:	9805      	ldr	r0, [sp, #20]
    a566:	f000 0001 	and.w	r0, r0, #1
    a56a:	f7fe faff 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a56e:	f88d 0116 	strb.w	r0, [sp, #278]	; 0x116
    a572:	e7ff      	b.n	a574 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x606>
    a574:	f89d 0116 	ldrb.w	r0, [sp, #278]	; 0x116
    a578:	07c1      	lsls	r1, r0, #31
    a57a:	2900      	cmp	r1, #0
    a57c:	d001      	beq.n	a582 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x614>
    a57e:	e7ff      	b.n	a580 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x612>
    a580:	e001      	b.n	a586 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x618>
        if self.rgb {
    a582:	e009      	b.n	a598 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a584:	defe      	udf	#254	; 0xfe
    a586:	f007 fd06 	bl	11f96 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a58a:	e7ff      	b.n	a58c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x61e>
    a58c:	f00a ff94 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a590:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a594:	e7ff      	b.n	a596 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x628>
    a596:	e7e4      	b.n	a562 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
    a598:	203a      	movs	r0, #58	; 0x3a
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
    a59a:	f88d 0123 	strb.w	r0, [sp, #291]	; 0x123
    a59e:	f24e 602c 	movw	r0, #58924	; 0xe62c
    a5a2:	f2c0 0001 	movt	r0, #1
    a5a6:	6800      	ldr	r0, [r0, #0]
    a5a8:	9049      	str	r0, [sp, #292]	; 0x124
    a5aa:	2001      	movs	r0, #1
    a5ac:	904a      	str	r0, [sp, #296]	; 0x128
    a5ae:	9a49      	ldr	r2, [sp, #292]	; 0x124
    a5b0:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    a5b2:	f89d 1123 	ldrb.w	r1, [sp, #291]	; 0x123
    a5b6:	9816      	ldr	r0, [sp, #88]	; 0x58
    a5b8:	f7ff fa93 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a5bc:	9003      	str	r0, [sp, #12]
    a5be:	e7ff      	b.n	a5c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x652>
    a5c0:	9803      	ldr	r0, [sp, #12]
    a5c2:	f000 0001 	and.w	r0, r0, #1
    a5c6:	f7fe fad1 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a5ca:	f88d 0122 	strb.w	r0, [sp, #290]	; 0x122
    a5ce:	e7ff      	b.n	a5d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x662>
    a5d0:	f89d 0122 	ldrb.w	r0, [sp, #290]	; 0x122
    a5d4:	07c1      	lsls	r1, r0, #31
    a5d6:	2900      	cmp	r1, #0
    a5d8:	d001      	beq.n	a5de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x670>
    a5da:	e7ff      	b.n	a5dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x66e>
    a5dc:	e010      	b.n	a600 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x692>
    a5de:	2029      	movs	r0, #41	; 0x29
        self.write_command(Instruction::DISPON, None)?;
    a5e0:	f88d 012f 	strb.w	r0, [sp, #303]	; 0x12f
    a5e4:	2000      	movs	r0, #0
    a5e6:	904d      	str	r0, [sp, #308]	; 0x134
    a5e8:	904c      	str	r0, [sp, #304]	; 0x130
    a5ea:	904c      	str	r0, [sp, #304]	; 0x130
    a5ec:	9a4c      	ldr	r2, [sp, #304]	; 0x130
    a5ee:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    a5f0:	f89d 112f 	ldrb.w	r1, [sp, #303]	; 0x12f
    a5f4:	9816      	ldr	r0, [sp, #88]	; 0x58
    a5f6:	f7ff fa74 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a5fa:	9002      	str	r0, [sp, #8]
    a5fc:	e009      	b.n	a612 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a4>
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
    a5fe:	defe      	udf	#254	; 0xfe
    a600:	f007 fcc9 	bl	11f96 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a604:	e7ff      	b.n	a606 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x698>
    a606:	f00a ff57 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a60a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a60e:	e7ff      	b.n	a610 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a2>
    a610:	e4ec      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::DISPON, None)?;
    a612:	9802      	ldr	r0, [sp, #8]
    a614:	f000 0001 	and.w	r0, r0, #1
    a618:	f7fe faa8 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a61c:	f88d 012e 	strb.w	r0, [sp, #302]	; 0x12e
    a620:	e7ff      	b.n	a622 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6b4>
    a622:	f89d 012e 	ldrb.w	r0, [sp, #302]	; 0x12e
    a626:	07c1      	lsls	r1, r0, #31
    a628:	2900      	cmp	r1, #0
    a62a:	d001      	beq.n	a630 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c2>
    a62c:	e7ff      	b.n	a62e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c0>
    a62e:	e005      	b.n	a63c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6ce>
    a630:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    a632:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a634:	f009 ff97 	bl	14566 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    a638:	e009      	b.n	a64e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e0>
        self.write_command(Instruction::DISPON, None)?;
    a63a:	defe      	udf	#254	; 0xfe
    a63c:	f007 fcab 	bl	11f96 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a640:	e7ff      	b.n	a642 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6d4>
    a642:	f00a ff39 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a646:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a64a:	e7ff      	b.n	a64c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6de>
    a64c:	e4ce      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    a64e:	f008 ffc5 	bl	135dc <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    a652:	9001      	str	r0, [sp, #4]
    a654:	e7ff      	b.n	a656 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e8>
    a656:	f24e 4144 	movw	r1, #58436	; 0xe444
    a65a:	f2c0 0101 	movt	r1, #1
    a65e:	f24e 6330 	movw	r3, #58928	; 0xe630
    a662:	f2c0 0301 	movt	r3, #1
    a666:	220e      	movs	r2, #14
    a668:	9801      	ldr	r0, [sp, #4]
    a66a:	f7fe fa46 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    a66e:	e7ff      	b.n	a670 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x702>
    a670:	2000      	movs	r0, #0
        Ok(())
    a672:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    }
    a676:	e4b9      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>

0000a678 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>:
    fn to_u8(&self) -> Option<u8> {
    a678:	b580      	push	{r7, lr}
    a67a:	b08a      	sub	sp, #40	; 0x28
    a67c:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
    a67e:	f000 fa8c 	bl	ab9a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>
    a682:	9307      	str	r3, [sp, #28]
    a684:	9206      	str	r2, [sp, #24]
    a686:	9105      	str	r1, [sp, #20]
    a688:	9004      	str	r0, [sp, #16]
    a68a:	e7ff      	b.n	a68c <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x14>
    a68c:	a804      	add	r0, sp, #16
    a68e:	f00a f854 	bl	1473a <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
    a692:	9003      	str	r0, [sp, #12]
    a694:	e7ff      	b.n	a696 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x1e>
    a696:	9803      	ldr	r0, [sp, #12]
    a698:	f00a f922 	bl	148e0 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
    a69c:	9002      	str	r0, [sp, #8]
    a69e:	9101      	str	r1, [sp, #4]
    a6a0:	e7ff      	b.n	a6a2 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x2a>
    }
    a6a2:	9802      	ldr	r0, [sp, #8]
    a6a4:	f000 0001 	and.w	r0, r0, #1
    a6a8:	9901      	ldr	r1, [sp, #4]
    a6aa:	b00a      	add	sp, #40	; 0x28
    a6ac:	bd80      	pop	{r7, pc}

0000a6ae <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>:
    a6ae:	b082      	sub	sp, #8
    a6b0:	4601      	mov	r1, r0
    a6b2:	f8ad 0004 	strh.w	r0, [sp, #4]
    a6b6:	ba00      	rev	r0, r0
    a6b8:	0c00      	lsrs	r0, r0, #16
    a6ba:	f8ad 0006 	strh.w	r0, [sp, #6]
    a6be:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a6c2:	9000      	str	r0, [sp, #0]
    a6c4:	e7ff      	b.n	a6c6 <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E+0x18>
    a6c6:	9800      	ldr	r0, [sp, #0]
    a6c8:	b002      	add	sp, #8
    a6ca:	4770      	bx	lr

0000a6cc <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>:
    a6cc:	b580      	push	{r7, lr}
    a6ce:	b084      	sub	sp, #16
    a6d0:	4601      	mov	r1, r0
    a6d2:	f8ad 000e 	strh.w	r0, [sp, #14]
    a6d6:	9102      	str	r1, [sp, #8]
    a6d8:	f7ff ffe9 	bl	a6ae <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>
    a6dc:	9001      	str	r0, [sp, #4]
    a6de:	e7ff      	b.n	a6e0 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E+0x14>
    a6e0:	9801      	ldr	r0, [sp, #4]
    a6e2:	b004      	add	sp, #16
    a6e4:	bd80      	pop	{r7, pc}

0000a6e6 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>:
    a6e6:	b580      	push	{r7, lr}
    a6e8:	b084      	sub	sp, #16
    a6ea:	9002      	str	r0, [sp, #8]
    a6ec:	9802      	ldr	r0, [sp, #8]
    a6ee:	f009 ff88 	bl	14602 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>
    a6f2:	9001      	str	r0, [sp, #4]
    a6f4:	9100      	str	r1, [sp, #0]
    a6f6:	e7ff      	b.n	a6f8 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE+0x12>
    a6f8:	9801      	ldr	r0, [sp, #4]
    a6fa:	f000 0001 	and.w	r0, r0, #1
    a6fe:	9900      	ldr	r1, [sp, #0]
    a700:	b004      	add	sp, #16
    a702:	bd80      	pop	{r7, pc}

0000a704 <_ZN4core3ptr13drop_in_place17h00c2f0b87edee24bE>:
    a704:	b081      	sub	sp, #4
    a706:	9000      	str	r0, [sp, #0]
    a708:	b001      	add	sp, #4
    a70a:	4770      	bx	lr

0000a70c <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE>:
    a70c:	b580      	push	{r7, lr}
    a70e:	b082      	sub	sp, #8
    a710:	9001      	str	r0, [sp, #4]
    a712:	f000 f83e 	bl	a792 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
    a716:	e7ff      	b.n	a718 <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE+0xc>
    a718:	b002      	add	sp, #8
    a71a:	bd80      	pop	{r7, pc}

0000a71c <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>:
    a71c:	b580      	push	{r7, lr}
    a71e:	b082      	sub	sp, #8
    a720:	9001      	str	r0, [sp, #4]
    a722:	6801      	ldr	r1, [r0, #0]
    a724:	2900      	cmp	r1, #0
    a726:	9000      	str	r0, [sp, #0]
    a728:	d102      	bne.n	a730 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x14>
    a72a:	e7ff      	b.n	a72c <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x10>
    a72c:	b002      	add	sp, #8
    a72e:	bd80      	pop	{r7, pc}
    a730:	9800      	ldr	r0, [sp, #0]
    a732:	3004      	adds	r0, #4
    a734:	f7ff ffea 	bl	a70c <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE>
    a738:	e7f8      	b.n	a72c <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x10>

0000a73a <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>:
    a73a:	b580      	push	{r7, lr}
    a73c:	b082      	sub	sp, #8
    a73e:	9001      	str	r0, [sp, #4]
    a740:	f00a f949 	bl	149d6 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E>
    a744:	e7ff      	b.n	a746 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE+0xc>
    a746:	b002      	add	sp, #8
    a748:	bd80      	pop	{r7, pc}

0000a74a <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E>:
    a74a:	b580      	push	{r7, lr}
    a74c:	b082      	sub	sp, #8
    a74e:	9001      	str	r0, [sp, #4]
    a750:	3024      	adds	r0, #36	; 0x24
    a752:	f000 f81e 	bl	a792 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
    a756:	e7ff      	b.n	a758 <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E+0xe>
    a758:	b002      	add	sp, #8
    a75a:	bd80      	pop	{r7, pc}

0000a75c <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>:
    a75c:	b580      	push	{r7, lr}
    a75e:	b082      	sub	sp, #8
    a760:	9001      	str	r0, [sp, #4]
    a762:	9000      	str	r0, [sp, #0]
    a764:	f7ff fff1 	bl	a74a <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E>
    a768:	e001      	b.n	a76e <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E+0x12>
    a76a:	b002      	add	sp, #8
    a76c:	bd80      	pop	{r7, pc}
    a76e:	9800      	ldr	r0, [sp, #0]
    a770:	3094      	adds	r0, #148	; 0x94
    a772:	f7ff ffe2 	bl	a73a <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    a776:	e7f8      	b.n	a76a <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E+0xe>

0000a778 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>:
    a778:	b580      	push	{r7, lr}
    a77a:	b082      	sub	sp, #8
    a77c:	9001      	str	r0, [sp, #4]
    a77e:	9000      	str	r0, [sp, #0]
    a780:	f00a f951 	bl	14a26 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E>
    a784:	e001      	b.n	a78a <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E+0x12>
    a786:	b002      	add	sp, #8
    a788:	bd80      	pop	{r7, pc}
    a78a:	9800      	ldr	r0, [sp, #0]
    a78c:	f7ff ffd5 	bl	a73a <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    a790:	e7f9      	b.n	a786 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E+0xe>

0000a792 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>:
    a792:	b580      	push	{r7, lr}
    a794:	b082      	sub	sp, #8
    a796:	9001      	str	r0, [sp, #4]
    a798:	f00a f90d 	bl	149b6 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E>
    a79c:	e7ff      	b.n	a79e <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E+0xc>
    a79e:	b002      	add	sp, #8
    a7a0:	bd80      	pop	{r7, pc}

0000a7a2 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>:
    a7a2:	b580      	push	{r7, lr}
    a7a4:	b082      	sub	sp, #8
    a7a6:	9001      	str	r0, [sp, #4]
    a7a8:	6801      	ldr	r1, [r0, #0]
    a7aa:	2900      	cmp	r1, #0
    a7ac:	9000      	str	r0, [sp, #0]
    a7ae:	d102      	bne.n	a7b6 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x14>
    a7b0:	e7ff      	b.n	a7b2 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x10>
    a7b2:	b002      	add	sp, #8
    a7b4:	bd80      	pop	{r7, pc}
    a7b6:	9800      	ldr	r0, [sp, #0]
    a7b8:	3004      	adds	r0, #4
    a7ba:	f000 f805 	bl	a7c8 <_ZN4core3ptr13drop_in_place17hf625580841d3425eE>
    a7be:	e7f8      	b.n	a7b2 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x10>

0000a7c0 <_ZN4core3ptr13drop_in_place17hef1277471241eea2E>:
    a7c0:	b081      	sub	sp, #4
    a7c2:	9000      	str	r0, [sp, #0]
    a7c4:	b001      	add	sp, #4
    a7c6:	4770      	bx	lr

0000a7c8 <_ZN4core3ptr13drop_in_place17hf625580841d3425eE>:
    a7c8:	b580      	push	{r7, lr}
    a7ca:	b082      	sub	sp, #8
    a7cc:	9001      	str	r0, [sp, #4]
    a7ce:	f7ff ffb4 	bl	a73a <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    a7d2:	e7ff      	b.n	a7d4 <_ZN4core3ptr13drop_in_place17hf625580841d3425eE+0xc>
    a7d4:	b002      	add	sp, #8
    a7d6:	bd80      	pop	{r7, pc}

0000a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>:
    a7d8:	b089      	sub	sp, #36	; 0x24
    a7da:	9005      	str	r0, [sp, #20]
    a7dc:	9106      	str	r1, [sp, #24]
    a7de:	9107      	str	r1, [sp, #28]
    a7e0:	9907      	ldr	r1, [sp, #28]
    a7e2:	9002      	str	r0, [sp, #8]
    a7e4:	9101      	str	r1, [sp, #4]
    a7e6:	e7ff      	b.n	a7e8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x10>
    a7e8:	9802      	ldr	r0, [sp, #8]
    a7ea:	9008      	str	r0, [sp, #32]
    a7ec:	9908      	ldr	r1, [sp, #32]
    a7ee:	9100      	str	r1, [sp, #0]
    a7f0:	e7ff      	b.n	a7f2 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x1a>
    a7f2:	9800      	ldr	r0, [sp, #0]
    a7f4:	9003      	str	r0, [sp, #12]
    a7f6:	9901      	ldr	r1, [sp, #4]
    a7f8:	9104      	str	r1, [sp, #16]
    a7fa:	9803      	ldr	r0, [sp, #12]
    a7fc:	9904      	ldr	r1, [sp, #16]
    a7fe:	b009      	add	sp, #36	; 0x24
    a800:	4770      	bx	lr
	...

0000a804 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>:
use num_derive::ToPrimitive;

/// ST7735 instructions.
#[derive(ToPrimitive)]
    a804:	b08a      	sub	sp, #40	; 0x28
    a806:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Instruction {
    a808:	7800      	ldrb	r0, [r0, #0]
    a80a:	9001      	str	r0, [sp, #4]
    a80c:	9901      	ldr	r1, [sp, #4]
    a80e:	e8df f011 	tbh	[pc, r1, lsl #1]
    a812:	0103      	.short	0x0103
    a814:	01020107 	.word	0x01020107
    a818:	010c0102 	.word	0x010c0102
    a81c:	01020102 	.word	0x01020102
    a820:	01020102 	.word	0x01020102
    a824:	01020111 	.word	0x01020111
    a828:	01020102 	.word	0x01020102
    a82c:	01020102 	.word	0x01020102
    a830:	01160102 	.word	0x01160102
    a834:	0120011b 	.word	0x0120011b
    a838:	01020125 	.word	0x01020125
    a83c:	01020102 	.word	0x01020102
    a840:	01020102 	.word	0x01020102
    a844:	01020102 	.word	0x01020102
    a848:	01020102 	.word	0x01020102
    a84c:	01020102 	.word	0x01020102
    a850:	012a0102 	.word	0x012a0102
    a854:	0102012f 	.word	0x0102012f
    a858:	01020102 	.word	0x01020102
    a85c:	01020102 	.word	0x01020102
    a860:	01340102 	.word	0x01340102
    a864:	013e0139 	.word	0x013e0139
    a868:	01480143 	.word	0x01480143
    a86c:	014d0102 	.word	0x014d0102
    a870:	01520102 	.word	0x01520102
    a874:	01020102 	.word	0x01020102
    a878:	01020102 	.word	0x01020102
    a87c:	015c0102 	.word	0x015c0102
    a880:	01020102 	.word	0x01020102
    a884:	01570102 	.word	0x01570102
    a888:	01020102 	.word	0x01020102
    a88c:	01020102 	.word	0x01020102
    a890:	01020102 	.word	0x01020102
    a894:	01020102 	.word	0x01020102
    a898:	01020102 	.word	0x01020102
    a89c:	01020102 	.word	0x01020102
    a8a0:	01020102 	.word	0x01020102
    a8a4:	01020102 	.word	0x01020102
    a8a8:	01020102 	.word	0x01020102
    a8ac:	01020102 	.word	0x01020102
    a8b0:	01020102 	.word	0x01020102
    a8b4:	01020102 	.word	0x01020102
    a8b8:	01020102 	.word	0x01020102
    a8bc:	01020102 	.word	0x01020102
    a8c0:	01020102 	.word	0x01020102
    a8c4:	01020102 	.word	0x01020102
    a8c8:	01020102 	.word	0x01020102
    a8cc:	01020102 	.word	0x01020102
    a8d0:	01020102 	.word	0x01020102
    a8d4:	01020102 	.word	0x01020102
    a8d8:	01020102 	.word	0x01020102
    a8dc:	01020102 	.word	0x01020102
    a8e0:	01020102 	.word	0x01020102
    a8e4:	01020102 	.word	0x01020102
    a8e8:	01020102 	.word	0x01020102
    a8ec:	01020102 	.word	0x01020102
    a8f0:	01020102 	.word	0x01020102
    a8f4:	01020102 	.word	0x01020102
    a8f8:	01020102 	.word	0x01020102
    a8fc:	01020102 	.word	0x01020102
    a900:	01020102 	.word	0x01020102
    a904:	01020102 	.word	0x01020102
    a908:	01020102 	.word	0x01020102
    a90c:	01020102 	.word	0x01020102
    a910:	01020102 	.word	0x01020102
    a914:	01020102 	.word	0x01020102
    a918:	01020102 	.word	0x01020102
    a91c:	01020102 	.word	0x01020102
    a920:	01020102 	.word	0x01020102
    a924:	01020102 	.word	0x01020102
    a928:	01020102 	.word	0x01020102
    a92c:	01020102 	.word	0x01020102
    a930:	01020102 	.word	0x01020102
    a934:	01020102 	.word	0x01020102
    a938:	01020102 	.word	0x01020102
    a93c:	01020102 	.word	0x01020102
    a940:	01020102 	.word	0x01020102
    a944:	01020102 	.word	0x01020102
    a948:	01020102 	.word	0x01020102
    a94c:	01020102 	.word	0x01020102
    a950:	01020102 	.word	0x01020102
    a954:	01020102 	.word	0x01020102
    a958:	01020102 	.word	0x01020102
    a95c:	01020102 	.word	0x01020102
    a960:	01020102 	.word	0x01020102
    a964:	01020102 	.word	0x01020102
    a968:	01020102 	.word	0x01020102
    a96c:	01020102 	.word	0x01020102
    a970:	01020102 	.word	0x01020102
    a974:	01660161 	.word	0x01660161
    a978:	0170016b 	.word	0x0170016b
    a97c:	01750102 	.word	0x01750102
    a980:	01020102 	.word	0x01020102
    a984:	01020102 	.word	0x01020102
    a988:	01020102 	.word	0x01020102
    a98c:	01020102 	.word	0x01020102
    a990:	017a0102 	.word	0x017a0102
    a994:	0184017f 	.word	0x0184017f
    a998:	018e0189 	.word	0x018e0189
    a99c:	01020193 	.word	0x01020193
    a9a0:	01020102 	.word	0x01020102
    a9a4:	01020102 	.word	0x01020102
    a9a8:	01020102 	.word	0x01020102
    a9ac:	01020102 	.word	0x01020102
    a9b0:	01020102 	.word	0x01020102
    a9b4:	01020102 	.word	0x01020102
    a9b8:	01020102 	.word	0x01020102
    a9bc:	01020102 	.word	0x01020102
    a9c0:	01020102 	.word	0x01020102
    a9c4:	01980102 	.word	0x01980102
    a9c8:	01a2019d 	.word	0x01a2019d
    a9cc:	010201a7 	.word	0x010201a7
    a9d0:	01b10102 	.word	0x01b10102
    a9d4:	010200fd 	.word	0x010200fd
    a9d8:	01020102 	.word	0x01020102
    a9dc:	01020102 	.word	0x01020102
    a9e0:	01020102 	.word	0x01020102
    a9e4:	01020102 	.word	0x01020102
    a9e8:	01020102 	.word	0x01020102
    a9ec:	01020102 	.word	0x01020102
    a9f0:	01020102 	.word	0x01020102
    a9f4:	01020102 	.word	0x01020102
    a9f8:	01020102 	.word	0x01020102
    a9fc:	01020102 	.word	0x01020102
    aa00:	01020102 	.word	0x01020102
    aa04:	01020102 	.word	0x01020102
    aa08:	01ac0102 	.word	0x01ac0102
    aa0c:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
    aa0e:	9007      	str	r0, [sp, #28]
    aa10:	20e1      	movs	r0, #225	; 0xe1
    aa12:	9006      	str	r0, [sp, #24]
    aa14:	e0b3      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa16:	defe      	udf	#254	; 0xfe
    aa18:	2000      	movs	r0, #0
    aa1a:	9007      	str	r0, [sp, #28]
    aa1c:	9006      	str	r0, [sp, #24]
    aa1e:	e0ae      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa20:	2000      	movs	r0, #0
    aa22:	9007      	str	r0, [sp, #28]
    aa24:	2001      	movs	r0, #1
    aa26:	9006      	str	r0, [sp, #24]
    aa28:	e0a9      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa2a:	2000      	movs	r0, #0
    aa2c:	9007      	str	r0, [sp, #28]
    aa2e:	2004      	movs	r0, #4
    aa30:	9006      	str	r0, [sp, #24]
    aa32:	e0a4      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa34:	2000      	movs	r0, #0
    aa36:	9007      	str	r0, [sp, #28]
    aa38:	2009      	movs	r0, #9
    aa3a:	9006      	str	r0, [sp, #24]
    aa3c:	e09f      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa3e:	2000      	movs	r0, #0
    aa40:	9007      	str	r0, [sp, #28]
    aa42:	2010      	movs	r0, #16
    aa44:	9006      	str	r0, [sp, #24]
    aa46:	e09a      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa48:	2000      	movs	r0, #0
    aa4a:	9007      	str	r0, [sp, #28]
    aa4c:	2011      	movs	r0, #17
    aa4e:	9006      	str	r0, [sp, #24]
    aa50:	e095      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa52:	2000      	movs	r0, #0
    aa54:	9007      	str	r0, [sp, #28]
    aa56:	2012      	movs	r0, #18
    aa58:	9006      	str	r0, [sp, #24]
    aa5a:	e090      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa5c:	2000      	movs	r0, #0
    aa5e:	9007      	str	r0, [sp, #28]
    aa60:	2013      	movs	r0, #19
    aa62:	9006      	str	r0, [sp, #24]
    aa64:	e08b      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa66:	2000      	movs	r0, #0
    aa68:	9007      	str	r0, [sp, #28]
    aa6a:	2020      	movs	r0, #32
    aa6c:	9006      	str	r0, [sp, #24]
    aa6e:	e086      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa70:	2000      	movs	r0, #0
    aa72:	9007      	str	r0, [sp, #28]
    aa74:	2021      	movs	r0, #33	; 0x21
    aa76:	9006      	str	r0, [sp, #24]
    aa78:	e081      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa7a:	2000      	movs	r0, #0
    aa7c:	9007      	str	r0, [sp, #28]
    aa7e:	2028      	movs	r0, #40	; 0x28
    aa80:	9006      	str	r0, [sp, #24]
    aa82:	e07c      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa84:	2000      	movs	r0, #0
    aa86:	9007      	str	r0, [sp, #28]
    aa88:	2029      	movs	r0, #41	; 0x29
    aa8a:	9006      	str	r0, [sp, #24]
    aa8c:	e077      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa8e:	2000      	movs	r0, #0
    aa90:	9007      	str	r0, [sp, #28]
    aa92:	202a      	movs	r0, #42	; 0x2a
    aa94:	9006      	str	r0, [sp, #24]
    aa96:	e072      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa98:	2000      	movs	r0, #0
    aa9a:	9007      	str	r0, [sp, #28]
    aa9c:	202b      	movs	r0, #43	; 0x2b
    aa9e:	9006      	str	r0, [sp, #24]
    aaa0:	e06d      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aaa2:	2000      	movs	r0, #0
    aaa4:	9007      	str	r0, [sp, #28]
    aaa6:	202c      	movs	r0, #44	; 0x2c
    aaa8:	9006      	str	r0, [sp, #24]
    aaaa:	e068      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aaac:	2000      	movs	r0, #0
    aaae:	9007      	str	r0, [sp, #28]
    aab0:	202e      	movs	r0, #46	; 0x2e
    aab2:	9006      	str	r0, [sp, #24]
    aab4:	e063      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aab6:	2000      	movs	r0, #0
    aab8:	9007      	str	r0, [sp, #28]
    aaba:	2030      	movs	r0, #48	; 0x30
    aabc:	9006      	str	r0, [sp, #24]
    aabe:	e05e      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aac0:	2000      	movs	r0, #0
    aac2:	9007      	str	r0, [sp, #28]
    aac4:	203a      	movs	r0, #58	; 0x3a
    aac6:	9006      	str	r0, [sp, #24]
    aac8:	e059      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aaca:	2000      	movs	r0, #0
    aacc:	9007      	str	r0, [sp, #28]
    aace:	2036      	movs	r0, #54	; 0x36
    aad0:	9006      	str	r0, [sp, #24]
    aad2:	e054      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aad4:	2000      	movs	r0, #0
    aad6:	9007      	str	r0, [sp, #28]
    aad8:	20b1      	movs	r0, #177	; 0xb1
    aada:	9006      	str	r0, [sp, #24]
    aadc:	e04f      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aade:	2000      	movs	r0, #0
    aae0:	9007      	str	r0, [sp, #28]
    aae2:	20b2      	movs	r0, #178	; 0xb2
    aae4:	9006      	str	r0, [sp, #24]
    aae6:	e04a      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aae8:	2000      	movs	r0, #0
    aaea:	9007      	str	r0, [sp, #28]
    aaec:	20b3      	movs	r0, #179	; 0xb3
    aaee:	9006      	str	r0, [sp, #24]
    aaf0:	e045      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aaf2:	2000      	movs	r0, #0
    aaf4:	9007      	str	r0, [sp, #28]
    aaf6:	20b4      	movs	r0, #180	; 0xb4
    aaf8:	9006      	str	r0, [sp, #24]
    aafa:	e040      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aafc:	2000      	movs	r0, #0
    aafe:	9007      	str	r0, [sp, #28]
    ab00:	20b6      	movs	r0, #182	; 0xb6
    ab02:	9006      	str	r0, [sp, #24]
    ab04:	e03b      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab06:	2000      	movs	r0, #0
    ab08:	9007      	str	r0, [sp, #28]
    ab0a:	20c0      	movs	r0, #192	; 0xc0
    ab0c:	9006      	str	r0, [sp, #24]
    ab0e:	e036      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab10:	2000      	movs	r0, #0
    ab12:	9007      	str	r0, [sp, #28]
    ab14:	20c1      	movs	r0, #193	; 0xc1
    ab16:	9006      	str	r0, [sp, #24]
    ab18:	e031      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab1a:	2000      	movs	r0, #0
    ab1c:	9007      	str	r0, [sp, #28]
    ab1e:	20c2      	movs	r0, #194	; 0xc2
    ab20:	9006      	str	r0, [sp, #24]
    ab22:	e02c      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab24:	2000      	movs	r0, #0
    ab26:	9007      	str	r0, [sp, #28]
    ab28:	20c3      	movs	r0, #195	; 0xc3
    ab2a:	9006      	str	r0, [sp, #24]
    ab2c:	e027      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab2e:	2000      	movs	r0, #0
    ab30:	9007      	str	r0, [sp, #28]
    ab32:	20c4      	movs	r0, #196	; 0xc4
    ab34:	9006      	str	r0, [sp, #24]
    ab36:	e022      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab38:	2000      	movs	r0, #0
    ab3a:	9007      	str	r0, [sp, #28]
    ab3c:	20c5      	movs	r0, #197	; 0xc5
    ab3e:	9006      	str	r0, [sp, #24]
    ab40:	e01d      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab42:	2000      	movs	r0, #0
    ab44:	9007      	str	r0, [sp, #28]
    ab46:	20da      	movs	r0, #218	; 0xda
    ab48:	9006      	str	r0, [sp, #24]
    ab4a:	e018      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab4c:	2000      	movs	r0, #0
    ab4e:	9007      	str	r0, [sp, #28]
    ab50:	20db      	movs	r0, #219	; 0xdb
    ab52:	9006      	str	r0, [sp, #24]
    ab54:	e013      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab56:	2000      	movs	r0, #0
    ab58:	9007      	str	r0, [sp, #28]
    ab5a:	20dc      	movs	r0, #220	; 0xdc
    ab5c:	9006      	str	r0, [sp, #24]
    ab5e:	e00e      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab60:	2000      	movs	r0, #0
    ab62:	9007      	str	r0, [sp, #28]
    ab64:	20dd      	movs	r0, #221	; 0xdd
    ab66:	9006      	str	r0, [sp, #24]
    ab68:	e009      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab6a:	2000      	movs	r0, #0
    ab6c:	9007      	str	r0, [sp, #28]
    ab6e:	20fc      	movs	r0, #252	; 0xfc
    ab70:	9006      	str	r0, [sp, #24]
    ab72:	e004      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab74:	2000      	movs	r0, #0
    ab76:	9007      	str	r0, [sp, #28]
    ab78:	20e0      	movs	r0, #224	; 0xe0
    ab7a:	9006      	str	r0, [sp, #24]
    ab7c:	e7ff      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab7e:	9806      	ldr	r0, [sp, #24]
    ab80:	9907      	ldr	r1, [sp, #28]
    ab82:	9105      	str	r1, [sp, #20]
    ab84:	9004      	str	r0, [sp, #16]
    ab86:	2000      	movs	r0, #0
    ab88:	9003      	str	r0, [sp, #12]
    ab8a:	2001      	movs	r0, #1
    ab8c:	9002      	str	r0, [sp, #8]
    ab8e:	9802      	ldr	r0, [sp, #8]
    ab90:	9903      	ldr	r1, [sp, #12]
    ab92:	9a04      	ldr	r2, [sp, #16]
    ab94:	9b05      	ldr	r3, [sp, #20]
    ab96:	b00a      	add	sp, #40	; 0x28
    ab98:	4770      	bx	lr

0000ab9a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>:
    ab9a:	b580      	push	{r7, lr}
    ab9c:	b08a      	sub	sp, #40	; 0x28
    ab9e:	9009      	str	r0, [sp, #36]	; 0x24
    aba0:	f7ff fe30 	bl	a804 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>
    aba4:	9108      	str	r1, [sp, #32]
    aba6:	9007      	str	r0, [sp, #28]
    aba8:	9306      	str	r3, [sp, #24]
    abaa:	9205      	str	r2, [sp, #20]
    abac:	e7ff      	b.n	abae <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x14>
    abae:	9807      	ldr	r0, [sp, #28]
    abb0:	9908      	ldr	r1, [sp, #32]
    abb2:	9a05      	ldr	r2, [sp, #20]
    abb4:	9b06      	ldr	r3, [sp, #24]
    abb6:	f000 f859 	bl	ac6c <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>
    abba:	9104      	str	r1, [sp, #16]
    abbc:	9003      	str	r0, [sp, #12]
    abbe:	9302      	str	r3, [sp, #8]
    abc0:	9201      	str	r2, [sp, #4]
    abc2:	e7ff      	b.n	abc4 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x2a>
    abc4:	9803      	ldr	r0, [sp, #12]
    abc6:	9904      	ldr	r1, [sp, #16]
    abc8:	9a01      	ldr	r2, [sp, #4]
    abca:	9b02      	ldr	r3, [sp, #8]
    abcc:	b00a      	add	sp, #40	; 0x28
    abce:	bd80      	pop	{r7, pc}

0000abd0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>:
#[derive(ToPrimitive)]
    abd0:	b08a      	sub	sp, #40	; 0x28
    abd2:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Orientation {
    abd4:	7800      	ldrb	r0, [r0, #0]
    abd6:	4601      	mov	r1, r0
    abd8:	2800      	cmp	r0, #0
    abda:	9101      	str	r1, [sp, #4]
    abdc:	d00f      	beq.n	abfe <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x2e>
    abde:	e7ff      	b.n	abe0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x10>
    abe0:	9801      	ldr	r0, [sp, #4]
    abe2:	2860      	cmp	r0, #96	; 0x60
    abe4:	d00f      	beq.n	ac06 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x36>
    abe6:	e7ff      	b.n	abe8 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x18>
    abe8:	9801      	ldr	r0, [sp, #4]
    abea:	28a0      	cmp	r0, #160	; 0xa0
    abec:	d001      	beq.n	abf2 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x22>
    abee:	e7ff      	b.n	abf0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x20>
    abf0:	e00e      	b.n	ac10 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x40>
    abf2:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
    abf4:	9007      	str	r0, [sp, #28]
    abf6:	20a0      	movs	r0, #160	; 0xa0
    abf8:	9006      	str	r0, [sp, #24]
    abfa:	e00e      	b.n	ac1a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    abfc:	defe      	udf	#254	; 0xfe
    abfe:	2000      	movs	r0, #0
    ac00:	9007      	str	r0, [sp, #28]
    ac02:	9006      	str	r0, [sp, #24]
    ac04:	e009      	b.n	ac1a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    ac06:	2000      	movs	r0, #0
    ac08:	9007      	str	r0, [sp, #28]
    ac0a:	2060      	movs	r0, #96	; 0x60
    ac0c:	9006      	str	r0, [sp, #24]
    ac0e:	e004      	b.n	ac1a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    ac10:	2000      	movs	r0, #0
    ac12:	9007      	str	r0, [sp, #28]
    ac14:	20c0      	movs	r0, #192	; 0xc0
    ac16:	9006      	str	r0, [sp, #24]
    ac18:	e7ff      	b.n	ac1a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    ac1a:	9806      	ldr	r0, [sp, #24]
    ac1c:	9907      	ldr	r1, [sp, #28]
    ac1e:	9105      	str	r1, [sp, #20]
    ac20:	9004      	str	r0, [sp, #16]
    ac22:	2000      	movs	r0, #0
    ac24:	9003      	str	r0, [sp, #12]
    ac26:	2001      	movs	r0, #1
    ac28:	9002      	str	r0, [sp, #8]
    ac2a:	9802      	ldr	r0, [sp, #8]
    ac2c:	9903      	ldr	r1, [sp, #12]
    ac2e:	9a04      	ldr	r2, [sp, #16]
    ac30:	9b05      	ldr	r3, [sp, #20]
    ac32:	b00a      	add	sp, #40	; 0x28
    ac34:	4770      	bx	lr

0000ac36 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>:
    ac36:	b580      	push	{r7, lr}
    ac38:	b08a      	sub	sp, #40	; 0x28
    ac3a:	9009      	str	r0, [sp, #36]	; 0x24
    ac3c:	f7ff ffc8 	bl	abd0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>
    ac40:	9108      	str	r1, [sp, #32]
    ac42:	9007      	str	r0, [sp, #28]
    ac44:	9306      	str	r3, [sp, #24]
    ac46:	9205      	str	r2, [sp, #20]
    ac48:	e7ff      	b.n	ac4a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x14>
    ac4a:	9807      	ldr	r0, [sp, #28]
    ac4c:	9908      	ldr	r1, [sp, #32]
    ac4e:	9a05      	ldr	r2, [sp, #20]
    ac50:	9b06      	ldr	r3, [sp, #24]
    ac52:	f000 f863 	bl	ad1c <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>
    ac56:	9104      	str	r1, [sp, #16]
    ac58:	9003      	str	r0, [sp, #12]
    ac5a:	9302      	str	r3, [sp, #8]
    ac5c:	9201      	str	r2, [sp, #4]
    ac5e:	e7ff      	b.n	ac60 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x2a>
    ac60:	9803      	ldr	r0, [sp, #12]
    ac62:	9904      	ldr	r1, [sp, #16]
    ac64:	9a01      	ldr	r2, [sp, #4]
    ac66:	9b02      	ldr	r3, [sp, #8]
    ac68:	b00a      	add	sp, #40	; 0x28
    ac6a:	bd80      	pop	{r7, pc}

0000ac6c <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>:
    ac6c:	b5b0      	push	{r4, r5, r7, lr}
    ac6e:	b090      	sub	sp, #64	; 0x40
    ac70:	469c      	mov	ip, r3
    ac72:	4696      	mov	lr, r2
    ac74:	460c      	mov	r4, r1
    ac76:	4605      	mov	r5, r0
    ac78:	9103      	str	r1, [sp, #12]
    ac7a:	9002      	str	r0, [sp, #8]
    ac7c:	9305      	str	r3, [sp, #20]
    ac7e:	9204      	str	r2, [sp, #16]
    ac80:	2000      	movs	r0, #0
    ac82:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ac86:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ac8a:	2001      	movs	r0, #1
    ac8c:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ac90:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ac94:	9802      	ldr	r0, [sp, #8]
    ac96:	2800      	cmp	r0, #0
    ac98:	d001      	beq.n	ac9e <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x32>
    ac9a:	e7ff      	b.n	ac9c <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x30>
    ac9c:	e004      	b.n	aca8 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x3c>
    ac9e:	2000      	movs	r0, #0
    aca0:	9007      	str	r0, [sp, #28]
    aca2:	9006      	str	r0, [sp, #24]
    aca4:	e023      	b.n	acee <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
    aca6:	defe      	udf	#254	; 0xfe
    aca8:	2000      	movs	r0, #0
    acaa:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    acae:	9904      	ldr	r1, [sp, #16]
    acb0:	9a05      	ldr	r2, [sp, #20]
    acb2:	920f      	str	r2, [sp, #60]	; 0x3c
    acb4:	910e      	str	r1, [sp, #56]	; 0x38
    acb6:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    acba:	920b      	str	r2, [sp, #44]	; 0x2c
    acbc:	910a      	str	r1, [sp, #40]	; 0x28
    acbe:	980a      	ldr	r0, [sp, #40]	; 0x28
    acc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    acc2:	f000 f883 	bl	adcc <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>
    acc6:	9101      	str	r1, [sp, #4]
    acc8:	9000      	str	r0, [sp, #0]
    acca:	e7ff      	b.n	accc <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x60>
    accc:	9800      	ldr	r0, [sp, #0]
    acce:	9008      	str	r0, [sp, #32]
    acd0:	9901      	ldr	r1, [sp, #4]
    acd2:	9109      	str	r1, [sp, #36]	; 0x24
    acd4:	2200      	movs	r2, #0
    acd6:	9207      	str	r2, [sp, #28]
    acd8:	2201      	movs	r2, #1
    acda:	9206      	str	r2, [sp, #24]
    acdc:	e007      	b.n	acee <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
    acde:	9802      	ldr	r0, [sp, #8]
    ace0:	2801      	cmp	r0, #1
    ace2:	d010      	beq.n	ad06 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x9a>
    ace4:	e019      	b.n	ad1a <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xae>
    ace6:	2000      	movs	r0, #0
    ace8:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    acec:	e7f7      	b.n	acde <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
    acee:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    acf2:	07c0      	lsls	r0, r0, #31
    acf4:	2800      	cmp	r0, #0
    acf6:	d1f6      	bne.n	ace6 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x7a>
    acf8:	e7f1      	b.n	acde <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
    acfa:	9806      	ldr	r0, [sp, #24]
    acfc:	9907      	ldr	r1, [sp, #28]
    acfe:	9a08      	ldr	r2, [sp, #32]
    ad00:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ad02:	b010      	add	sp, #64	; 0x40
    ad04:	bdb0      	pop	{r4, r5, r7, pc}
    ad06:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    ad0a:	07c0      	lsls	r0, r0, #31
    ad0c:	2800      	cmp	r0, #0
    ad0e:	d0f4      	beq.n	acfa <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
    ad10:	e7ff      	b.n	ad12 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xa6>
    ad12:	2000      	movs	r0, #0
    ad14:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ad18:	e7ef      	b.n	acfa <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
    ad1a:	e7ee      	b.n	acfa <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>

0000ad1c <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>:
    ad1c:	b5b0      	push	{r4, r5, r7, lr}
    ad1e:	b090      	sub	sp, #64	; 0x40
    ad20:	469c      	mov	ip, r3
    ad22:	4696      	mov	lr, r2
    ad24:	460c      	mov	r4, r1
    ad26:	4605      	mov	r5, r0
    ad28:	9103      	str	r1, [sp, #12]
    ad2a:	9002      	str	r0, [sp, #8]
    ad2c:	9305      	str	r3, [sp, #20]
    ad2e:	9204      	str	r2, [sp, #16]
    ad30:	2000      	movs	r0, #0
    ad32:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ad36:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ad3a:	2001      	movs	r0, #1
    ad3c:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ad40:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ad44:	9802      	ldr	r0, [sp, #8]
    ad46:	2800      	cmp	r0, #0
    ad48:	d001      	beq.n	ad4e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x32>
    ad4a:	e7ff      	b.n	ad4c <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x30>
    ad4c:	e004      	b.n	ad58 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x3c>
    ad4e:	2000      	movs	r0, #0
    ad50:	9007      	str	r0, [sp, #28]
    ad52:	9006      	str	r0, [sp, #24]
    ad54:	e023      	b.n	ad9e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
    ad56:	defe      	udf	#254	; 0xfe
    ad58:	2000      	movs	r0, #0
    ad5a:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ad5e:	9904      	ldr	r1, [sp, #16]
    ad60:	9a05      	ldr	r2, [sp, #20]
    ad62:	920f      	str	r2, [sp, #60]	; 0x3c
    ad64:	910e      	str	r1, [sp, #56]	; 0x38
    ad66:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ad6a:	920b      	str	r2, [sp, #44]	; 0x2c
    ad6c:	910a      	str	r1, [sp, #40]	; 0x28
    ad6e:	980a      	ldr	r0, [sp, #40]	; 0x28
    ad70:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ad72:	f00b fe35 	bl	169e0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>
    ad76:	9101      	str	r1, [sp, #4]
    ad78:	9000      	str	r0, [sp, #0]
    ad7a:	e7ff      	b.n	ad7c <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x60>
    ad7c:	9800      	ldr	r0, [sp, #0]
    ad7e:	9008      	str	r0, [sp, #32]
    ad80:	9901      	ldr	r1, [sp, #4]
    ad82:	9109      	str	r1, [sp, #36]	; 0x24
    ad84:	2200      	movs	r2, #0
    ad86:	9207      	str	r2, [sp, #28]
    ad88:	2201      	movs	r2, #1
    ad8a:	9206      	str	r2, [sp, #24]
    ad8c:	e007      	b.n	ad9e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
    ad8e:	9802      	ldr	r0, [sp, #8]
    ad90:	2801      	cmp	r0, #1
    ad92:	d010      	beq.n	adb6 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x9a>
    ad94:	e019      	b.n	adca <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xae>
    ad96:	2000      	movs	r0, #0
    ad98:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ad9c:	e7f7      	b.n	ad8e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
    ad9e:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    ada2:	07c0      	lsls	r0, r0, #31
    ada4:	2800      	cmp	r0, #0
    ada6:	d1f6      	bne.n	ad96 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x7a>
    ada8:	e7f1      	b.n	ad8e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
    adaa:	9806      	ldr	r0, [sp, #24]
    adac:	9907      	ldr	r1, [sp, #28]
    adae:	9a08      	ldr	r2, [sp, #32]
    adb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    adb2:	b010      	add	sp, #64	; 0x40
    adb4:	bdb0      	pop	{r4, r5, r7, pc}
    adb6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    adba:	07c0      	lsls	r0, r0, #31
    adbc:	2800      	cmp	r0, #0
    adbe:	d0f4      	beq.n	adaa <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
    adc0:	e7ff      	b.n	adc2 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xa6>
    adc2:	2000      	movs	r0, #0
    adc4:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    adc8:	e7ef      	b.n	adaa <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
    adca:	e7ee      	b.n	adaa <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>

0000adcc <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>:
    adcc:	b084      	sub	sp, #16
    adce:	460a      	mov	r2, r1
    add0:	4603      	mov	r3, r0
    add2:	9103      	str	r1, [sp, #12]
    add4:	9002      	str	r0, [sp, #8]
    add6:	b004      	add	sp, #16
    add8:	4770      	bx	lr

0000adda <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h44bec417aa74de39E>:
    adda:	b084      	sub	sp, #16
    addc:	9000      	str	r0, [sp, #0]
    adde:	9101      	str	r1, [sp, #4]
    ade0:	9102      	str	r1, [sp, #8]
    ade2:	9003      	str	r0, [sp, #12]
    ade4:	6802      	ldr	r2, [r0, #0]
    ade6:	6840      	ldr	r0, [r0, #4]
    ade8:	680b      	ldr	r3, [r1, #0]
    adea:	6849      	ldr	r1, [r1, #4]
    adec:	4048      	eors	r0, r1
    adee:	ea82 0103 	eor.w	r1, r2, r3
    adf2:	4308      	orrs	r0, r1
    adf4:	fab0 f080 	clz	r0, r0
    adf8:	0940      	lsrs	r0, r0, #5
    adfa:	b004      	add	sp, #16
    adfc:	4770      	bx	lr

0000adfe <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E>:
/// ```rust
/// let peripherals = nrf52::Peripherals::take().unwrap();
/// let nfcpins = peripherals.UICR.nfcpins.read().bits();
/// console::print("nfcpins = "); console::printhex(nfcpins as u8); console::print("\n");
/// ```
pub fn start_touch_sensor() -> MynewtResult<()> {
    adfe:	b5b0      	push	{r4, r5, r7, lr}
    ae00:	b0be      	sub	sp, #248	; 0xf8
    console::print("Rust touch sensor\n");
    ae02:	f24e 6040 	movw	r0, #58944	; 0xe640
    ae06:	f2c0 0001 	movt	r0, #1
    ae0a:	2112      	movs	r1, #18
    ae0c:	f7fe f8f0 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    ae10:	e7ff      	b.n	ae12 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x14>

    //  Init GPIO for the Reset Pin
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    ae12:	f240 1064 	movw	r0, #356	; 0x164
    ae16:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ae1a:	210a      	movs	r1, #10
    ae1c:	f009 faf3 	bl	14406 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    ae20:	9012      	str	r0, [sp, #72]	; 0x48
    ae22:	e7ff      	b.n	ae24 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x26>
    ae24:	9812      	ldr	r0, [sp, #72]	; 0x48
    ae26:	f7fd fea7 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    ae2a:	9014      	str	r0, [sp, #80]	; 0x50
    ae2c:	e7ff      	b.n	ae2e <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x30>
    ae2e:	9814      	ldr	r0, [sp, #80]	; 0x50
    ae30:	1e41      	subs	r1, r0, #1
    ae32:	bf18      	it	ne
    ae34:	2101      	movne	r1, #1
    ae36:	2801      	cmp	r0, #1
    ae38:	d001      	beq.n	ae3e <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x40>
    ae3a:	e7ff      	b.n	ae3c <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x3e>
    ae3c:	e008      	b.n	ae50 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x52>

    //  Reset the touch controller by switching the Reset Pin low then high with pauses. Based on https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L1017-L1167
    unsafe {
        TOUCH_RESET.set_low() ? ;
    ae3e:	f240 1064 	movw	r0, #356	; 0x164
    ae42:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ae46:	f009 fb77 	bl	14538 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    ae4a:	9011      	str	r0, [sp, #68]	; 0x44
    ae4c:	e00f      	b.n	ae6e <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x70>
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    ae4e:	defe      	udf	#254	; 0xfe
    ae50:	9814      	ldr	r0, [sp, #80]	; 0x50
    ae52:	9036      	str	r0, [sp, #216]	; 0xd8
    ae54:	f007 fcd4 	bl	12800 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    ae58:	9010      	str	r0, [sp, #64]	; 0x40
    ae5a:	e002      	b.n	ae62 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x64>
    assert_eq!(rc, 0, "IRQ init fail");

    //  Start monitoring for touch controller interrupts
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
    Ok(())
}
    ae5c:	9813      	ldr	r0, [sp, #76]	; 0x4c
    ae5e:	b03e      	add	sp, #248	; 0xf8
    ae60:	bdb0      	pop	{r4, r5, r7, pc}
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    ae62:	9810      	ldr	r0, [sp, #64]	; 0x40
    ae64:	f7fd fe7c 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    ae68:	9013      	str	r0, [sp, #76]	; 0x4c
    ae6a:	e7ff      	b.n	ae6c <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x6e>
    ae6c:	e7f6      	b.n	ae5c <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x5e>
        TOUCH_RESET.set_low() ? ;
    ae6e:	9811      	ldr	r0, [sp, #68]	; 0x44
    ae70:	f7fd fe82 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    ae74:	9015      	str	r0, [sp, #84]	; 0x54
    ae76:	e7ff      	b.n	ae78 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x7a>
    ae78:	9815      	ldr	r0, [sp, #84]	; 0x54
    ae7a:	1e41      	subs	r1, r0, #1
    ae7c:	bf18      	it	ne
    ae7e:	2101      	movne	r1, #1
    ae80:	2801      	cmp	r0, #1
    ae82:	d001      	beq.n	ae88 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x8a>
    ae84:	e7ff      	b.n	ae86 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x88>
    ae86:	e008      	b.n	ae9a <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x9c>
        TOUCH_DELAY.delay_ms(20);
    ae88:	f240 1068 	movw	r0, #360	; 0x168
    ae8c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ae90:	2114      	movs	r1, #20
    ae92:	f009 fb68 	bl	14566 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    ae96:	e00d      	b.n	aeb4 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xb6>
        TOUCH_RESET.set_low() ? ;
    ae98:	defe      	udf	#254	; 0xfe
    ae9a:	9815      	ldr	r0, [sp, #84]	; 0x54
    ae9c:	9037      	str	r0, [sp, #220]	; 0xdc
    ae9e:	f007 fcaf 	bl	12800 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    aea2:	900f      	str	r0, [sp, #60]	; 0x3c
    aea4:	e7ff      	b.n	aea6 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xa8>
    aea6:	980f      	ldr	r0, [sp, #60]	; 0x3c
    aea8:	f7fd fe5a 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    aeac:	9013      	str	r0, [sp, #76]	; 0x4c
    aeae:	e7ff      	b.n	aeb0 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xb2>
    aeb0:	e7ff      	b.n	aeb2 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xb4>
    aeb2:	e7d3      	b.n	ae5c <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x5e>
        TOUCH_RESET.set_high() ? ;
    aeb4:	f240 1064 	movw	r0, #356	; 0x164
    aeb8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    aebc:	f009 fb47 	bl	1454e <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    aec0:	900e      	str	r0, [sp, #56]	; 0x38
    aec2:	e7ff      	b.n	aec4 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xc6>
    aec4:	980e      	ldr	r0, [sp, #56]	; 0x38
    aec6:	f7fd fe57 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    aeca:	9016      	str	r0, [sp, #88]	; 0x58
    aecc:	e7ff      	b.n	aece <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xd0>
    aece:	9816      	ldr	r0, [sp, #88]	; 0x58
    aed0:	1e41      	subs	r1, r0, #1
    aed2:	bf18      	it	ne
    aed4:	2101      	movne	r1, #1
    aed6:	2801      	cmp	r0, #1
    aed8:	d001      	beq.n	aede <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xe0>
    aeda:	e7ff      	b.n	aedc <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xde>
    aedc:	e008      	b.n	aef0 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xf2>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
    aede:	f240 1068 	movw	r0, #360	; 0x168
    aee2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    aee6:	21c8      	movs	r1, #200	; 0xc8
    aee8:	f009 fb3d 	bl	14566 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    aeec:	e00c      	b.n	af08 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x10a>
        TOUCH_RESET.set_high() ? ;
    aeee:	defe      	udf	#254	; 0xfe
    aef0:	9816      	ldr	r0, [sp, #88]	; 0x58
    aef2:	9038      	str	r0, [sp, #224]	; 0xe0
    aef4:	f007 fc84 	bl	12800 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    aef8:	900d      	str	r0, [sp, #52]	; 0x34
    aefa:	e7ff      	b.n	aefc <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xfe>
    aefc:	980d      	ldr	r0, [sp, #52]	; 0x34
    aefe:	f7fd fe2f 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    af02:	9013      	str	r0, [sp, #76]	; 0x4c
    af04:	e7ff      	b.n	af06 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x108>
    af06:	e7d4      	b.n	aeb2 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xb4>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
    af08:	f240 1068 	movw	r0, #360	; 0x168
    af0c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    af10:	21c8      	movs	r1, #200	; 0xc8
    af12:	f009 fb28 	bl	14566 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    af16:	e7ff      	b.n	af18 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x11a>
    unsafe { TOUCH_EVENT.ev_cb = Some( touch_event_callback ) };
    af18:	f24b 00bb 	movw	r0, #45243	; 0xb0bb
    af1c:	f2c0 0000 	movt	r0, #0
    af20:	9017      	str	r0, [sp, #92]	; 0x5c
    af22:	9817      	ldr	r0, [sp, #92]	; 0x5c
    af24:	f240 11fc 	movw	r1, #508	; 0x1fc
    af28:	f2c2 0100 	movt	r1, #8192	; 0x2000
    af2c:	6048      	str	r0, [r1, #4]
        Some( touch_interrupt_handler ),  //  Call `touch_interrupt_handler()` upon detecting interrupt
    af2e:	f24b 006f 	movw	r0, #45167	; 0xb06f
    af32:	f2c0 0000 	movt	r0, #0
    af36:	9019      	str	r0, [sp, #100]	; 0x64
        core::ptr::null_mut(),            //  No arguments for `touch_interrupt_handler()`
    af38:	e7ff      	b.n	af3a <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x13c>
    let rc = unsafe { hal::hal_gpio_irq_init(
    af3a:	9919      	ldr	r1, [sp, #100]	; 0x64
    af3c:	4668      	mov	r0, sp
    af3e:	2201      	movs	r2, #1
    af40:	6002      	str	r2, [r0, #0]
    af42:	201c      	movs	r0, #28
    af44:	2200      	movs	r2, #0
    af46:	2302      	movs	r3, #2
    af48:	f00e fea8 	bl	19c9c <hal_gpio_irq_init>
    af4c:	9018      	str	r0, [sp, #96]	; 0x60
    af4e:	e7ff      	b.n	af50 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x152>
    assert_eq!(rc, 0, "IRQ init fail");
    af50:	f24e 6058 	movw	r0, #58968	; 0xe658
    af54:	f2c0 0001 	movt	r0, #1
    af58:	6800      	ldr	r0, [r0, #0]
    af5a:	a918      	add	r1, sp, #96	; 0x60
    af5c:	911a      	str	r1, [sp, #104]	; 0x68
    af5e:	901b      	str	r0, [sp, #108]	; 0x6c
    af60:	981a      	ldr	r0, [sp, #104]	; 0x68
    af62:	9039      	str	r0, [sp, #228]	; 0xe4
    af64:	991b      	ldr	r1, [sp, #108]	; 0x6c
    af66:	913a      	str	r1, [sp, #232]	; 0xe8
    af68:	6802      	ldr	r2, [r0, #0]
    af6a:	680b      	ldr	r3, [r1, #0]
    af6c:	429a      	cmp	r2, r3
    af6e:	900c      	str	r0, [sp, #48]	; 0x30
    af70:	910b      	str	r1, [sp, #44]	; 0x2c
    af72:	d104      	bne.n	af7e <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x180>
    af74:	e7ff      	b.n	af76 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x178>
    af76:	201c      	movs	r0, #28
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
    af78:	f00e fecc 	bl	19d14 <hal_gpio_irq_enable>
    af7c:	e072      	b.n	b064 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x266>
    assert_eq!(rc, 0, "IRQ init fail");
    af7e:	f24e 60b0 	movw	r0, #59056	; 0xe6b0
    af82:	f2c0 0001 	movt	r0, #1
    af86:	6801      	ldr	r1, [r0, #0]
    af88:	980c      	ldr	r0, [sp, #48]	; 0x30
    af8a:	902b      	str	r0, [sp, #172]	; 0xac
    af8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    af8e:	922c      	str	r2, [sp, #176]	; 0xb0
    af90:	f24e 63cc 	movw	r3, #59084	; 0xe6cc
    af94:	f2c0 0301 	movt	r3, #1
    af98:	681b      	ldr	r3, [r3, #0]
    af9a:	f24e 6cd0 	movw	ip, #59088	; 0xe6d0
    af9e:	f2c0 0c01 	movt	ip, #1
    afa2:	f8dc c000 	ldr.w	ip, [ip]
    afa6:	46ee      	mov	lr, sp
    afa8:	2400      	movs	r4, #0
    afaa:	f8ce 4000 	str.w	r4, [lr]
    afae:	a82d      	add	r0, sp, #180	; 0xb4
    afb0:	2201      	movs	r2, #1
    afb2:	910a      	str	r1, [sp, #40]	; 0x28
    afb4:	4619      	mov	r1, r3
    afb6:	4663      	mov	r3, ip
    afb8:	f00b fd36 	bl	16a28 <_ZN4core3fmt9Arguments6new_v117hdc09c81c55dd3f27E>
    afbc:	e7ff      	b.n	afbe <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x1c0>
    afbe:	a82b      	add	r0, sp, #172	; 0xac
    afc0:	9028      	str	r0, [sp, #160]	; 0xa0
    afc2:	a82c      	add	r0, sp, #176	; 0xb0
    afc4:	9029      	str	r0, [sp, #164]	; 0xa4
    afc6:	a82d      	add	r0, sp, #180	; 0xb4
    afc8:	902a      	str	r0, [sp, #168]	; 0xa8
    afca:	9828      	ldr	r0, [sp, #160]	; 0xa0
    afcc:	903b      	str	r0, [sp, #236]	; 0xec
    afce:	9929      	ldr	r1, [sp, #164]	; 0xa4
    afd0:	913c      	str	r1, [sp, #240]	; 0xf0
    afd2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    afd4:	923d      	str	r2, [sp, #244]	; 0xf4
    afd6:	f241 7353 	movw	r3, #5971	; 0x1753
    afda:	f2c0 0301 	movt	r3, #1
    afde:	9109      	str	r1, [sp, #36]	; 0x24
    afe0:	4619      	mov	r1, r3
    afe2:	9208      	str	r2, [sp, #32]
    afe4:	f7fe f9b9 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    afe8:	9007      	str	r0, [sp, #28]
    afea:	9106      	str	r1, [sp, #24]
    afec:	e7ff      	b.n	afee <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x1f0>
    afee:	f241 7153 	movw	r1, #5971	; 0x1753
    aff2:	f2c0 0101 	movt	r1, #1
    aff6:	9809      	ldr	r0, [sp, #36]	; 0x24
    aff8:	f7fe f9af 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    affc:	9005      	str	r0, [sp, #20]
    affe:	9104      	str	r1, [sp, #16]
    b000:	e7ff      	b.n	b002 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x204>
    b002:	f647 7137 	movw	r1, #32567	; 0x7f37
    b006:	f2c0 0101 	movt	r1, #1
    b00a:	9808      	ldr	r0, [sp, #32]
    b00c:	f7fe f9e4 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    b010:	9003      	str	r0, [sp, #12]
    b012:	9102      	str	r1, [sp, #8]
    b014:	e7ff      	b.n	b016 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x218>
    b016:	9807      	ldr	r0, [sp, #28]
    b018:	9022      	str	r0, [sp, #136]	; 0x88
    b01a:	9906      	ldr	r1, [sp, #24]
    b01c:	9123      	str	r1, [sp, #140]	; 0x8c
    b01e:	9a05      	ldr	r2, [sp, #20]
    b020:	9224      	str	r2, [sp, #144]	; 0x90
    b022:	9b04      	ldr	r3, [sp, #16]
    b024:	9325      	str	r3, [sp, #148]	; 0x94
    b026:	f8dd c00c 	ldr.w	ip, [sp, #12]
    b02a:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
    b02e:	f8dd e008 	ldr.w	lr, [sp, #8]
    b032:	f8cd e09c 	str.w	lr, [sp, #156]	; 0x9c
    b036:	466c      	mov	r4, sp
    b038:	2503      	movs	r5, #3
    b03a:	6025      	str	r5, [r4, #0]
    b03c:	a81c      	add	r0, sp, #112	; 0x70
    b03e:	ab22      	add	r3, sp, #136	; 0x88
    b040:	990a      	ldr	r1, [sp, #40]	; 0x28
    b042:	462a      	mov	r2, r5
    b044:	f00b fcf0 	bl	16a28 <_ZN4core3fmt9Arguments6new_v117hdc09c81c55dd3f27E>
    b048:	e7ff      	b.n	b04a <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x24c>
    b04a:	f24e 60f0 	movw	r0, #59120	; 0xe6f0
    b04e:	f2c0 0001 	movt	r0, #1
    b052:	f00c fc82 	bl	1795a <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    b056:	9001      	str	r0, [sp, #4]
    b058:	e7ff      	b.n	b05a <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x25c>
    b05a:	a81c      	add	r0, sp, #112	; 0x70
    b05c:	9901      	ldr	r1, [sp, #4]
    b05e:	f00c fcb9 	bl	179d4 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    b062:	defe      	udf	#254	; 0xfe
    b064:	2000      	movs	r0, #0
    Ok(())
    b066:	9013      	str	r0, [sp, #76]	; 0x4c
    b068:	2001      	movs	r0, #1
    b06a:	9013      	str	r0, [sp, #76]	; 0x4c
}
    b06c:	e6f6      	b.n	ae5c <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x5e>

0000b06e <_ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE>:

/// Interrupt handler for the touch controller, triggered when a touch is detected
extern "C" fn touch_interrupt_handler(arg: *mut core::ffi::c_void) {
    b06e:	b580      	push	{r7, lr}
    b070:	b086      	sub	sp, #24
    b072:	9004      	str	r0, [sp, #16]
    //  We forward a touch event to the Default Event Queue for deferred processing.  Don't do any processing here.
    unsafe { TOUCH_EVENT.ev_arg = arg };
    b074:	f240 11fc 	movw	r1, #508	; 0x1fc
    b078:	f2c2 0100 	movt	r1, #8192	; 0x2000
    b07c:	6088      	str	r0, [r1, #8]
    b07e:	a802      	add	r0, sp, #8
    //  Fetch the Default Event Queue. TODO: Use dedicated Event Queue for higher priority processing.
    let queue = os::eventq_dflt_get()
    b080:	f7fd fdf6 	bl	8c70 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
    b084:	e7ff      	b.n	b086 <_ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE+0x18>
    b086:	f24e 11be 	movw	r1, #57790	; 0xe1be
    b08a:	f2c0 0101 	movt	r1, #1
    b08e:	f24e 7308 	movw	r3, #59144	; 0xe708
    b092:	f2c0 0301 	movt	r3, #1
    b096:	a802      	add	r0, sp, #8
    b098:	2208      	movs	r2, #8
    b09a:	f7fd fb9a 	bl	87d2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE>
    b09e:	4601      	mov	r1, r0
    b0a0:	9005      	str	r0, [sp, #20]
    b0a2:	9101      	str	r1, [sp, #4]
    b0a4:	e7ff      	b.n	b0a6 <_ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE+0x38>
        .expect("GET fail");
    unsafe { os::os_eventq_put(queue, &mut TOUCH_EVENT) };  //  Trigger the callback function `touch_event_callback()`
    b0a6:	f240 11fc 	movw	r1, #508	; 0x1fc
    b0aa:	f2c2 0100 	movt	r1, #8192	; 0x2000
    b0ae:	9801      	ldr	r0, [sp, #4]
    b0b0:	f00f fec3 	bl	1ae3a <os_eventq_put>
    b0b4:	e7ff      	b.n	b0b6 <_ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE+0x48>
    //console::print("touch\n"); ////
}
    b0b6:	b006      	add	sp, #24
    b0b8:	bd80      	pop	{r7, pc}

0000b0ba <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E>:

/// Callback for the touch event that is triggered when a touch is detected
extern "C" fn touch_event_callback(_event: *mut os_event) {
    b0ba:	b580      	push	{r7, lr}
    b0bc:	b094      	sub	sp, #80	; 0x50
    b0be:	900e      	str	r0, [sp, #56]	; 0x38
    //  console::printhex(unsafe { os::os_time_get() } as u8); console::print(" touch\n");
    unsafe { 
        //  Fetch the touch data from the touch controller
        read_touchdata(&mut TOUCH_DATA)
    b0c0:	f240 1068 	movw	r0, #360	; 0x168
    b0c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b0c8:	f000 f894 	bl	b1f4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E>
    b0cc:	9006      	str	r0, [sp, #24]
    b0ce:	e7ff      	b.n	b0d0 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x16>
    b0d0:	f24e 7118 	movw	r1, #59160	; 0xe718
    b0d4:	f2c0 0101 	movt	r1, #1
    b0d8:	f24e 7328 	movw	r3, #59176	; 0xe728
    b0dc:	f2c0 0301 	movt	r3, #1
    b0e0:	220e      	movs	r2, #14
    b0e2:	9806      	ldr	r0, [sp, #24]
    b0e4:	f7fd fd09 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    b0e8:	e7ff      	b.n	b0ea <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x30>
            .expect("touchdata fail");
        //  Handle each touch data info
        for i in 0..TOUCH_DATA.count as usize {
    b0ea:	f240 1068 	movw	r0, #360	; 0x168
    b0ee:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b0f2:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
    b0f6:	2100      	movs	r1, #0
    b0f8:	9107      	str	r1, [sp, #28]
    b0fa:	9008      	str	r0, [sp, #32]
    b0fc:	9807      	ldr	r0, [sp, #28]
    b0fe:	9908      	ldr	r1, [sp, #32]
    b100:	f006 ff1a 	bl	11f38 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    b104:	9005      	str	r0, [sp, #20]
    b106:	9104      	str	r1, [sp, #16]
    b108:	e7ff      	b.n	b10a <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x50>
    b10a:	9805      	ldr	r0, [sp, #20]
    b10c:	9009      	str	r0, [sp, #36]	; 0x24
    b10e:	9904      	ldr	r1, [sp, #16]
    b110:	910a      	str	r1, [sp, #40]	; 0x28
    b112:	e7ff      	b.n	b114 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x5a>
    b114:	a809      	add	r0, sp, #36	; 0x24
    b116:	f006 fe84 	bl	11e22 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    b11a:	910c      	str	r1, [sp, #48]	; 0x30
    b11c:	900b      	str	r0, [sp, #44]	; 0x2c
    b11e:	e7ff      	b.n	b120 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x66>
    b120:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b122:	2800      	cmp	r0, #0
    b124:	d001      	beq.n	b12a <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x70>
    b126:	e7ff      	b.n	b128 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x6e>
    b128:	e002      	b.n	b130 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x76>
            console::print(", x: "); console::printint(x as i32); 
            console::print(", y: "); console::printint(y as i32); console::print("\n");
        }
        console::flush();   
    } */
}
    b12a:	b014      	add	sp, #80	; 0x50
    b12c:	bd80      	pop	{r7, pc}
        for i in 0..TOUCH_DATA.count as usize {
    b12e:	defe      	udf	#254	; 0xfe
    b130:	980c      	ldr	r0, [sp, #48]	; 0x30
    b132:	900f      	str	r0, [sp, #60]	; 0x3c
    b134:	9010      	str	r0, [sp, #64]	; 0x40
    b136:	9011      	str	r0, [sp, #68]	; 0x44
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
    b138:	2809      	cmp	r0, #9
    b13a:	9003      	str	r0, [sp, #12]
    b13c:	d851      	bhi.n	b1e2 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x128>
    b13e:	e7ff      	b.n	b140 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x86>
    b140:	f240 1068 	movw	r0, #360	; 0x168
    b144:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b148:	9903      	ldr	r1, [sp, #12]
    b14a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b14e:	f830 0031 	ldrh.w	r0, [r0, r1, lsl #3]
    b152:	4603      	mov	r3, r0
    b154:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
    b158:	f8b2 c002 	ldrh.w	ip, [r2, #2]
    b15c:	46e6      	mov	lr, ip
    b15e:	f8ad c04c 	strh.w	ip, [sp, #76]	; 0x4c
    b162:	7912      	ldrb	r2, [r2, #4]
    b164:	4694      	mov	ip, r2
    b166:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
            if x == 0 && y == 0 { continue; }
    b16a:	2800      	cmp	r0, #0
    b16c:	9302      	str	r3, [sp, #8]
    b16e:	f8cd e004 	str.w	lr, [sp, #4]
    b172:	f8cd c000 	str.w	ip, [sp]
    b176:	d008      	beq.n	b18a <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xd0>
    b178:	e003      	b.n	b182 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xc8>
    b17a:	2001      	movs	r0, #1
    b17c:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
    b180:	e008      	b.n	b194 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xda>
    b182:	2000      	movs	r0, #0
    b184:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
    b188:	e004      	b.n	b194 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xda>
    b18a:	9801      	ldr	r0, [sp, #4]
    b18c:	0401      	lsls	r1, r0, #16
    b18e:	2900      	cmp	r1, #0
    b190:	d0f3      	beq.n	b17a <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xc0>
    b192:	e7f6      	b.n	b182 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xc8>
    b194:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
    b198:	07c0      	lsls	r0, r0, #31
    b19a:	2800      	cmp	r0, #0
    b19c:	d105      	bne.n	b1aa <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xf0>
    b19e:	e7ff      	b.n	b1a0 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xe6>
            if action != 0 && action != 2 { continue; }
    b1a0:	9800      	ldr	r0, [sp, #0]
    b1a2:	0601      	lsls	r1, r0, #24
    b1a4:	2900      	cmp	r1, #0
    b1a6:	d10a      	bne.n	b1be <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x104>
    b1a8:	e005      	b.n	b1b6 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xfc>
            if x == 0 && y == 0 { continue; }
    b1aa:	e7ff      	b.n	b1ac <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xf2>
    b1ac:	e7b2      	b.n	b114 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x5a>
    b1ae:	2001      	movs	r0, #1
            if action != 0 && action != 2 { continue; }
    b1b0:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    b1b4:	e008      	b.n	b1c8 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x10e>
    b1b6:	2000      	movs	r0, #0
    b1b8:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    b1bc:	e004      	b.n	b1c8 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x10e>
    b1be:	9800      	ldr	r0, [sp, #0]
    b1c0:	b2c1      	uxtb	r1, r0
    b1c2:	2902      	cmp	r1, #2
    b1c4:	d1f3      	bne.n	b1ae <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xf4>
    b1c6:	e7f6      	b.n	b1b6 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xfc>
    b1c8:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
    b1cc:	07c0      	lsls	r0, r0, #31
    b1ce:	2800      	cmp	r0, #0
    b1d0:	d105      	bne.n	b1de <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x124>
    b1d2:	e7ff      	b.n	b1d4 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x11a>
            super::handle_touch(x, y);
    b1d4:	9802      	ldr	r0, [sp, #8]
    b1d6:	9901      	ldr	r1, [sp, #4]
    b1d8:	f001 fcd6 	bl	cb88 <_ZN3app5chip812handle_touch17habca32c74e5cefadE>
    b1dc:	e000      	b.n	b1e0 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x126>
            if action != 0 && action != 2 { continue; }
    b1de:	e7e5      	b.n	b1ac <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xf2>
        for i in 0..TOUCH_DATA.count as usize {
    b1e0:	e798      	b.n	b114 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x5a>
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
    b1e2:	f24e 7038 	movw	r0, #59192	; 0xe738
    b1e6:	f2c0 0001 	movt	r0, #1
    b1ea:	220a      	movs	r2, #10
    b1ec:	9903      	ldr	r1, [sp, #12]
    b1ee:	f00c fbd1 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b1f2:	defe      	udf	#254	; 0xfe

0000b1f4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E>:
/// Touch data will be populated here
static mut TOUCH_DATA: TouchEventInfo = fill_zero!(TouchEventInfo);

/// Read touch controller data. This only works when the screen has been tapped and the touch controller wakes up.
/// Ported from https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L407-L466
fn read_touchdata(data: &mut TouchEventInfo) -> MynewtResult<()> {
    b1f4:	b580      	push	{r7, lr}
    b1f6:	b0de      	sub	sp, #376	; 0x178
    b1f8:	9057      	str	r0, [sp, #348]	; 0x15c
    read_register_range(           //  Read the range of I2C registers...
    b1fa:	4669      	mov	r1, sp
    b1fc:	223f      	movs	r2, #63	; 0x3f
    b1fe:	600a      	str	r2, [r1, #0]
    b200:	f240 13ba 	movw	r3, #442	; 0x1ba
    b204:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b208:	2115      	movs	r1, #21
    b20a:	f04f 0c00 	mov.w	ip, #0
    b20e:	9026      	str	r0, [sp, #152]	; 0x98
    b210:	4608      	mov	r0, r1
    b212:	4661      	mov	r1, ip
    b214:	f000 fb97 	bl	b946 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E>
    b218:	9025      	str	r0, [sp, #148]	; 0x94
    b21a:	e7ff      	b.n	b21c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x28>
    b21c:	f24e 7148 	movw	r1, #59208	; 0xe748
    b220:	f2c0 0101 	movt	r1, #1
    b224:	f24e 735c 	movw	r3, #59228	; 0xe75c
    b228:	f2c0 0301 	movt	r3, #1
    b22c:	2213      	movs	r2, #19
    b22e:	9825      	ldr	r0, [sp, #148]	; 0x94
    b230:	f7fd fc63 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    b234:	e7ff      	b.n	b236 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x42>
    b236:	f10d 00ee 	add.w	r0, sp, #238	; 0xee
    b23a:	2152      	movs	r1, #82	; 0x52
        TOUCH_CONTROLLER_ADDRESS,  //  From the touch controller
        0,                         //  Starting from register 0
        POINT_READ_BUF as u8,      //  Number of registers to read
        unsafe { &mut BUF }        //  Save the read data into `buf`
    ).expect("read touchdata fail");
    *data = fill_zero!(TouchEventInfo);
    b23c:	9024      	str	r0, [sp, #144]	; 0x90
    b23e:	9123      	str	r1, [sp, #140]	; 0x8c
    b240:	f012 ff62 	bl	1e108 <__aeabi_memclr>
    b244:	a827      	add	r0, sp, #156	; 0x9c
    b246:	9924      	ldr	r1, [sp, #144]	; 0x90
    b248:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    b24a:	f012 ff61 	bl	1e110 <__aeabi_memcpy>
    b24e:	e7ff      	b.n	b250 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5c>
    b250:	a927      	add	r1, sp, #156	; 0x9c
    b252:	2252      	movs	r2, #82	; 0x52
    b254:	9826      	ldr	r0, [sp, #152]	; 0x98
    b256:	f012 ff5b 	bl	1e110 <__aeabi_memcpy>
    data.point_num = unsafe { BUF[FT_TOUCH_POINT_NUM] & 0x0F };
    b25a:	f240 11ba 	movw	r1, #442	; 0x1ba
    b25e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    b262:	7889      	ldrb	r1, [r1, #2]
    b264:	f001 010f 	and.w	r1, r1, #15
    b268:	9a26      	ldr	r2, [sp, #152]	; 0x98
    b26a:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
    b26e:	2100      	movs	r1, #0
    data.count     = 0;
    b270:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50

    //  Populate the first 5 touch points
    for i in 0..CFG_MAX_TOUCH_POINTS {
    b274:	9150      	str	r1, [sp, #320]	; 0x140
    b276:	2105      	movs	r1, #5
    b278:	9151      	str	r1, [sp, #324]	; 0x144
    b27a:	9950      	ldr	r1, [sp, #320]	; 0x140
    b27c:	9b51      	ldr	r3, [sp, #324]	; 0x144
    b27e:	9022      	str	r0, [sp, #136]	; 0x88
    b280:	4608      	mov	r0, r1
    b282:	4619      	mov	r1, r3
    b284:	f006 fe58 	bl	11f38 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    b288:	9021      	str	r0, [sp, #132]	; 0x84
    b28a:	9120      	str	r1, [sp, #128]	; 0x80
    b28c:	e7ff      	b.n	b28e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x9a>
    b28e:	9821      	ldr	r0, [sp, #132]	; 0x84
    b290:	9052      	str	r0, [sp, #328]	; 0x148
    b292:	9920      	ldr	r1, [sp, #128]	; 0x80
    b294:	9153      	str	r1, [sp, #332]	; 0x14c
    b296:	e7ff      	b.n	b298 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xa4>
    b298:	a852      	add	r0, sp, #328	; 0x148
    b29a:	f006 fdc2 	bl	11e22 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    b29e:	9155      	str	r1, [sp, #340]	; 0x154
    b2a0:	9054      	str	r0, [sp, #336]	; 0x150
    b2a2:	e7ff      	b.n	b2a4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xb0>
    b2a4:	9854      	ldr	r0, [sp, #336]	; 0x150
    b2a6:	2800      	cmp	r0, #0
    b2a8:	d001      	beq.n	b2ae <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xba>
    b2aa:	e7ff      	b.n	b2ac <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xb8>
    b2ac:	e001      	b.n	b2b2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xbe>
    b2ae:	e00d      	b.n	b2cc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xd8>
    b2b0:	defe      	udf	#254	; 0xfe
    b2b2:	9855      	ldr	r0, [sp, #340]	; 0x154
    b2b4:	9058      	str	r0, [sp, #352]	; 0x160
    b2b6:	9059      	str	r0, [sp, #356]	; 0x164
    b2b8:	905a      	str	r0, [sp, #360]	; 0x168
    b2ba:	2106      	movs	r1, #6
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    b2bc:	fba1 1200 	umull	r1, r2, r1, r0
    b2c0:	2a00      	cmp	r2, #0
    b2c2:	901f      	str	r0, [sp, #124]	; 0x7c
    b2c4:	911e      	str	r1, [sp, #120]	; 0x78
    b2c6:	f040 81c1 	bne.w	b64c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x458>
    b2ca:	e002      	b.n	b2d2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xde>
    b2cc:	2001      	movs	r0, #1
            && (data.point_num == 0) {
            break;
        }
    }
    Ok(())
}
    b2ce:	b05e      	add	sp, #376	; 0x178
    b2d0:	bd80      	pop	{r7, pc}
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    b2d2:	981e      	ldr	r0, [sp, #120]	; 0x78
    b2d4:	1d41      	adds	r1, r0, #5
    b2d6:	460a      	mov	r2, r1
    b2d8:	4281      	cmp	r1, r0
    b2da:	921d      	str	r2, [sp, #116]	; 0x74
    b2dc:	f0c0 81c2 	bcc.w	b664 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x470>
    b2e0:	e7ff      	b.n	b2e2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xee>
    b2e2:	981d      	ldr	r0, [sp, #116]	; 0x74
    b2e4:	283e      	cmp	r0, #62	; 0x3e
    b2e6:	f200 81c9 	bhi.w	b67c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x488>
    b2ea:	e7ff      	b.n	b2ec <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xf8>
    b2ec:	f240 10ba 	movw	r0, #442	; 0x1ba
    b2f0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b2f4:	991d      	ldr	r1, [sp, #116]	; 0x74
    b2f6:	5c40      	ldrb	r0, [r0, r1]
    b2f8:	0900      	lsrs	r0, r0, #4
    b2fa:	901c      	str	r0, [sp, #112]	; 0x70
    b2fc:	e7ff      	b.n	b2fe <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x10a>
    b2fe:	981c      	ldr	r0, [sp, #112]	; 0x70
    b300:	f88d 016f 	strb.w	r0, [sp, #367]	; 0x16f
    b304:	b2c1      	uxtb	r1, r0
        if pointid >= HYN_MAX_ID { break; }
    b306:	290e      	cmp	r1, #14
    b308:	d80b      	bhi.n	b322 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x12e>
    b30a:	e7ff      	b.n	b30c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x118>
        data.count += 1;
    b30c:	9826      	ldr	r0, [sp, #152]	; 0x98
    b30e:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
    b312:	3101      	adds	r1, #1
    b314:	b2ca      	uxtb	r2, r1
    b316:	460b      	mov	r3, r1
    b318:	428a      	cmp	r2, r1
    b31a:	931b      	str	r3, [sp, #108]	; 0x6c
    b31c:	f040 81b7 	bne.w	b68e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x49a>
    b320:	e001      	b.n	b326 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x132>
        if pointid >= HYN_MAX_ID { break; }
    b322:	e7ff      	b.n	b324 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x130>
    b324:	e7d2      	b.n	b2cc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xd8>
        data.count += 1;
    b326:	981b      	ldr	r0, [sp, #108]	; 0x6c
    b328:	9926      	ldr	r1, [sp, #152]	; 0x98
    b32a:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    b32e:	2206      	movs	r2, #6
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    b330:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    b332:	fba2 2c03 	umull	r2, ip, r2, r3
    b336:	f1bc 0f00 	cmp.w	ip, #0
    b33a:	921a      	str	r2, [sp, #104]	; 0x68
    b33c:	f040 81b3 	bne.w	b6a6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x4b2>
    b340:	e7ff      	b.n	b342 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x14e>
    b342:	981a      	ldr	r0, [sp, #104]	; 0x68
    b344:	1cc1      	adds	r1, r0, #3
    b346:	460a      	mov	r2, r1
    b348:	4281      	cmp	r1, r0
    b34a:	9219      	str	r2, [sp, #100]	; 0x64
    b34c:	f0c0 81b7 	bcc.w	b6be <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x4ca>
    b350:	e7ff      	b.n	b352 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x15e>
    b352:	9819      	ldr	r0, [sp, #100]	; 0x64
    b354:	283e      	cmp	r0, #62	; 0x3e
    b356:	f200 81be 	bhi.w	b6d6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x4e2>
    b35a:	e7ff      	b.n	b35c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x168>
    b35c:	f240 10ba 	movw	r0, #442	; 0x1ba
    b360:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b364:	9919      	ldr	r1, [sp, #100]	; 0x64
    b366:	5c40      	ldrb	r0, [r0, r1]
    b368:	f000 000f 	and.w	r0, r0, #15
    b36c:	4602      	mov	r2, r0
    b36e:	f8ad 0170 	strh.w	r0, [sp, #368]	; 0x170
    b372:	2006      	movs	r0, #6
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
    b374:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    b376:	fba0 0c03 	umull	r0, ip, r0, r3
    b37a:	f1bc 0f00 	cmp.w	ip, #0
    b37e:	9218      	str	r2, [sp, #96]	; 0x60
    b380:	9017      	str	r0, [sp, #92]	; 0x5c
    b382:	f040 81b1 	bne.w	b6e8 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x4f4>
    b386:	e7ff      	b.n	b388 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x194>
    b388:	9817      	ldr	r0, [sp, #92]	; 0x5c
    b38a:	1d01      	adds	r1, r0, #4
    b38c:	460a      	mov	r2, r1
    b38e:	4281      	cmp	r1, r0
    b390:	9216      	str	r2, [sp, #88]	; 0x58
    b392:	f0c0 81b5 	bcc.w	b700 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x50c>
    b396:	e7ff      	b.n	b398 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1a4>
    b398:	9816      	ldr	r0, [sp, #88]	; 0x58
    b39a:	283e      	cmp	r0, #62	; 0x3e
    b39c:	f200 81bc 	bhi.w	b718 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x524>
    b3a0:	e7ff      	b.n	b3a2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1ae>
    b3a2:	f240 10ba 	movw	r0, #442	; 0x1ba
    b3a6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b3aa:	9916      	ldr	r1, [sp, #88]	; 0x58
    b3ac:	5c40      	ldrb	r0, [r0, r1]
    b3ae:	4602      	mov	r2, r0
    b3b0:	f8ad 0172 	strh.w	r0, [sp, #370]	; 0x172
        data.touches[i].x  = (x_high << 8) | x_low;
    b3b4:	9818      	ldr	r0, [sp, #96]	; 0x60
    b3b6:	0203      	lsls	r3, r0, #8
    b3b8:	9215      	str	r2, [sp, #84]	; 0x54
    b3ba:	9314      	str	r3, [sp, #80]	; 0x50
    b3bc:	e7ff      	b.n	b3be <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1ca>
    b3be:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b3c0:	2809      	cmp	r0, #9
    b3c2:	f200 81b2 	bhi.w	b72a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x536>
    b3c6:	e7ff      	b.n	b3c8 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1d4>
    b3c8:	9814      	ldr	r0, [sp, #80]	; 0x50
    b3ca:	9915      	ldr	r1, [sp, #84]	; 0x54
    b3cc:	ea40 0201 	orr.w	r2, r0, r1
    b3d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
    b3d2:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
    b3d6:	f823 203c 	strh.w	r2, [r3, ip, lsl #3]
    b3da:	2206      	movs	r2, #6
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    b3dc:	fba2 2e0c 	umull	r2, lr, r2, ip
    b3e0:	f1be 0f00 	cmp.w	lr, #0
    b3e4:	9213      	str	r2, [sp, #76]	; 0x4c
    b3e6:	f040 81a9 	bne.w	b73c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x548>
    b3ea:	e7ff      	b.n	b3ec <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1f8>
    b3ec:	9813      	ldr	r0, [sp, #76]	; 0x4c
    b3ee:	1d41      	adds	r1, r0, #5
    b3f0:	460a      	mov	r2, r1
    b3f2:	4281      	cmp	r1, r0
    b3f4:	9212      	str	r2, [sp, #72]	; 0x48
    b3f6:	f0c0 81ad 	bcc.w	b754 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x560>
    b3fa:	e7ff      	b.n	b3fc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x208>
    b3fc:	9812      	ldr	r0, [sp, #72]	; 0x48
    b3fe:	283e      	cmp	r0, #62	; 0x3e
    b400:	f200 81b4 	bhi.w	b76c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x578>
    b404:	e7ff      	b.n	b406 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x212>
    b406:	f240 10ba 	movw	r0, #442	; 0x1ba
    b40a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b40e:	9912      	ldr	r1, [sp, #72]	; 0x48
    b410:	5c40      	ldrb	r0, [r0, r1]
    b412:	f000 000f 	and.w	r0, r0, #15
    b416:	4602      	mov	r2, r0
    b418:	f8ad 0174 	strh.w	r0, [sp, #372]	; 0x174
    b41c:	2006      	movs	r0, #6
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
    b41e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    b420:	fba0 0c03 	umull	r0, ip, r0, r3
    b424:	f1bc 0f00 	cmp.w	ip, #0
    b428:	9211      	str	r2, [sp, #68]	; 0x44
    b42a:	9010      	str	r0, [sp, #64]	; 0x40
    b42c:	f040 81a7 	bne.w	b77e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x58a>
    b430:	e7ff      	b.n	b432 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x23e>
    b432:	9810      	ldr	r0, [sp, #64]	; 0x40
    b434:	1d81      	adds	r1, r0, #6
    b436:	460a      	mov	r2, r1
    b438:	4281      	cmp	r1, r0
    b43a:	920f      	str	r2, [sp, #60]	; 0x3c
    b43c:	f0c0 81ab 	bcc.w	b796 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5a2>
    b440:	e7ff      	b.n	b442 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x24e>
    b442:	980f      	ldr	r0, [sp, #60]	; 0x3c
    b444:	283e      	cmp	r0, #62	; 0x3e
    b446:	f200 81b2 	bhi.w	b7ae <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5ba>
    b44a:	e7ff      	b.n	b44c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x258>
    b44c:	f240 10ba 	movw	r0, #442	; 0x1ba
    b450:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b454:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b456:	5c40      	ldrb	r0, [r0, r1]
    b458:	4602      	mov	r2, r0
    b45a:	f8ad 0176 	strh.w	r0, [sp, #374]	; 0x176
        data.touches[i].y  = (y_high << 8) | y_low;
    b45e:	9811      	ldr	r0, [sp, #68]	; 0x44
    b460:	0203      	lsls	r3, r0, #8
    b462:	920e      	str	r2, [sp, #56]	; 0x38
    b464:	930d      	str	r3, [sp, #52]	; 0x34
    b466:	e7ff      	b.n	b468 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x274>
    b468:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b46a:	2809      	cmp	r0, #9
    b46c:	f200 81a8 	bhi.w	b7c0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5cc>
    b470:	e7ff      	b.n	b472 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x27e>
    b472:	9826      	ldr	r0, [sp, #152]	; 0x98
    b474:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b476:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b47a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b47c:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    b480:	ea43 0e0c 	orr.w	lr, r3, ip
    b484:	f8a2 e002 	strh.w	lr, [r2, #2]
    b488:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
    b48a:	fba2 2e01 	umull	r2, lr, r2, r1
    b48e:	f1be 0f00 	cmp.w	lr, #0
    b492:	920c      	str	r2, [sp, #48]	; 0x30
    b494:	f040 819d 	bne.w	b7d2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5de>
    b498:	e7ff      	b.n	b49a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2a6>
    b49a:	980c      	ldr	r0, [sp, #48]	; 0x30
    b49c:	1cc1      	adds	r1, r0, #3
    b49e:	460a      	mov	r2, r1
    b4a0:	4281      	cmp	r1, r0
    b4a2:	920b      	str	r2, [sp, #44]	; 0x2c
    b4a4:	f0c0 81a1 	bcc.w	b7ea <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5f6>
    b4a8:	e7ff      	b.n	b4aa <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2b6>
    b4aa:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b4ac:	283e      	cmp	r0, #62	; 0x3e
    b4ae:	f200 81a8 	bhi.w	b802 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x60e>
    b4b2:	e7ff      	b.n	b4b4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2c0>
    b4b4:	f240 10ba 	movw	r0, #442	; 0x1ba
    b4b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b4bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b4be:	5c40      	ldrb	r0, [r0, r1]
    b4c0:	0980      	lsrs	r0, r0, #6
    b4c2:	900a      	str	r0, [sp, #40]	; 0x28
    b4c4:	e7ff      	b.n	b4c6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2d2>
        data.touches[i].action =
    b4c6:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b4c8:	2809      	cmp	r0, #9
    b4ca:	f200 81a3 	bhi.w	b814 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x620>
    b4ce:	e7ff      	b.n	b4d0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2dc>
    b4d0:	9826      	ldr	r0, [sp, #152]	; 0x98
    b4d2:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b4d4:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b4d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b4da:	7113      	strb	r3, [r2, #4]
    b4dc:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
    b4de:	fba2 2c01 	umull	r2, ip, r2, r1
    b4e2:	f1bc 0f00 	cmp.w	ip, #0
    b4e6:	9209      	str	r2, [sp, #36]	; 0x24
    b4e8:	f040 819d 	bne.w	b826 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x632>
    b4ec:	e7ff      	b.n	b4ee <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2fa>
    b4ee:	9809      	ldr	r0, [sp, #36]	; 0x24
    b4f0:	1d41      	adds	r1, r0, #5
    b4f2:	460a      	mov	r2, r1
    b4f4:	4281      	cmp	r1, r0
    b4f6:	9208      	str	r2, [sp, #32]
    b4f8:	f0c0 81a1 	bcc.w	b83e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x64a>
    b4fc:	e7ff      	b.n	b4fe <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x30a>
    b4fe:	9808      	ldr	r0, [sp, #32]
    b500:	283e      	cmp	r0, #62	; 0x3e
    b502:	f200 81a8 	bhi.w	b856 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x662>
    b506:	e7ff      	b.n	b508 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x314>
    b508:	f240 10ba 	movw	r0, #442	; 0x1ba
    b50c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b510:	9908      	ldr	r1, [sp, #32]
    b512:	5c40      	ldrb	r0, [r0, r1]
    b514:	0900      	lsrs	r0, r0, #4
    b516:	9007      	str	r0, [sp, #28]
    b518:	e7ff      	b.n	b51a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x326>
        data.touches[i].finger =
    b51a:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b51c:	2809      	cmp	r0, #9
    b51e:	f200 81a3 	bhi.w	b868 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x674>
    b522:	e7ff      	b.n	b524 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x330>
    b524:	9826      	ldr	r0, [sp, #152]	; 0x98
    b526:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b528:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b52c:	9b07      	ldr	r3, [sp, #28]
    b52e:	7153      	strb	r3, [r2, #5]
    b530:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
    b532:	fba2 2c01 	umull	r2, ip, r2, r1
    b536:	f1bc 0f00 	cmp.w	ip, #0
    b53a:	9206      	str	r2, [sp, #24]
    b53c:	f040 819d 	bne.w	b87a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x686>
    b540:	e7ff      	b.n	b542 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x34e>
    b542:	9806      	ldr	r0, [sp, #24]
    b544:	1dc1      	adds	r1, r0, #7
    b546:	460a      	mov	r2, r1
    b548:	4281      	cmp	r1, r0
    b54a:	9205      	str	r2, [sp, #20]
    b54c:	f0c0 81a1 	bcc.w	b892 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x69e>
    b550:	e7ff      	b.n	b552 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x35e>
    b552:	9805      	ldr	r0, [sp, #20]
    b554:	283e      	cmp	r0, #62	; 0x3e
    b556:	f200 81a8 	bhi.w	b8aa <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x6b6>
    b55a:	e7ff      	b.n	b55c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x368>
    b55c:	f240 10ba 	movw	r0, #442	; 0x1ba
    b560:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b564:	9905      	ldr	r1, [sp, #20]
    b566:	5c40      	ldrb	r0, [r0, r1]
        data.touches[i].pressure =
    b568:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    b56a:	2a09      	cmp	r2, #9
    b56c:	9004      	str	r0, [sp, #16]
    b56e:	f200 81a5 	bhi.w	b8bc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x6c8>
    b572:	e7ff      	b.n	b574 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x380>
    b574:	9826      	ldr	r0, [sp, #152]	; 0x98
    b576:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b578:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b57c:	9b04      	ldr	r3, [sp, #16]
    b57e:	7193      	strb	r3, [r2, #6]
    b580:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
    b582:	fba2 2c01 	umull	r2, ip, r2, r1
    b586:	f1bc 0f00 	cmp.w	ip, #0
    b58a:	9203      	str	r2, [sp, #12]
    b58c:	f040 819f 	bne.w	b8ce <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x6da>
    b590:	e7ff      	b.n	b592 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x39e>
    b592:	9803      	ldr	r0, [sp, #12]
    b594:	f100 0108 	add.w	r1, r0, #8
    b598:	460a      	mov	r2, r1
    b59a:	4281      	cmp	r1, r0
    b59c:	9202      	str	r2, [sp, #8]
    b59e:	f0c0 81a2 	bcc.w	b8e6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x6f2>
    b5a2:	e7ff      	b.n	b5a4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3b0>
    b5a4:	9802      	ldr	r0, [sp, #8]
    b5a6:	283e      	cmp	r0, #62	; 0x3e
    b5a8:	f200 81a9 	bhi.w	b8fe <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x70a>
    b5ac:	e7ff      	b.n	b5ae <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3ba>
    b5ae:	f240 10ba 	movw	r0, #442	; 0x1ba
    b5b2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b5b6:	9902      	ldr	r1, [sp, #8]
    b5b8:	5c40      	ldrb	r0, [r0, r1]
    b5ba:	0900      	lsrs	r0, r0, #4
    b5bc:	9001      	str	r0, [sp, #4]
    b5be:	e7ff      	b.n	b5c0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3cc>
        data.touches[i].area =
    b5c0:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b5c2:	2809      	cmp	r0, #9
    b5c4:	f200 81a4 	bhi.w	b910 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x71c>
    b5c8:	e7ff      	b.n	b5ca <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3d6>
    b5ca:	9826      	ldr	r0, [sp, #152]	; 0x98
    b5cc:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b5ce:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b5d2:	9b01      	ldr	r3, [sp, #4]
    b5d4:	71d3      	strb	r3, [r2, #7]
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    b5d6:	290a      	cmp	r1, #10
    b5d8:	d326      	bcc.n	b628 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x434>
    b5da:	e1a2      	b.n	b922 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x72e>
    b5dc:	2001      	movs	r0, #1
    b5de:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
    b5e2:	e009      	b.n	b5f8 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x404>
    b5e4:	2000      	movs	r0, #0
    b5e6:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
    b5ea:	e005      	b.n	b5f8 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x404>
            && (data.point_num == 0) {
    b5ec:	9826      	ldr	r0, [sp, #152]	; 0x98
    b5ee:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    b5f2:	2900      	cmp	r1, #0
    b5f4:	d0f2      	beq.n	b5dc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3e8>
    b5f6:	e7f5      	b.n	b5e4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3f0>
    b5f8:	f89d 015a 	ldrb.w	r0, [sp, #346]	; 0x15a
    b5fc:	07c0      	lsls	r0, r0, #31
    b5fe:	2800      	cmp	r0, #0
    b600:	d123      	bne.n	b64a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x456>
    b602:	e021      	b.n	b648 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x454>
    b604:	2001      	movs	r0, #1
    b606:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
    b60a:	e007      	b.n	b61c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x428>
    b60c:	2000      	movs	r0, #0
    b60e:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
    b612:	e003      	b.n	b61c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x428>
    b614:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b616:	280a      	cmp	r0, #10
    b618:	d30e      	bcc.n	b638 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x444>
    b61a:	e18b      	b.n	b934 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x740>
    b61c:	f89d 015b 	ldrb.w	r0, [sp, #347]	; 0x15b
    b620:	07c0      	lsls	r0, r0, #31
    b622:	2800      	cmp	r0, #0
    b624:	d1e2      	bne.n	b5ec <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3f8>
    b626:	e7dd      	b.n	b5e4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3f0>
    b628:	9826      	ldr	r0, [sp, #152]	; 0x98
    b62a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b62c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b630:	7912      	ldrb	r2, [r2, #4]
    b632:	2a00      	cmp	r2, #0
    b634:	d0e6      	beq.n	b604 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x410>
    b636:	e7ed      	b.n	b614 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x420>
    b638:	9826      	ldr	r0, [sp, #152]	; 0x98
    b63a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b63c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b640:	7912      	ldrb	r2, [r2, #4]
    b642:	2a02      	cmp	r2, #2
    b644:	d0de      	beq.n	b604 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x410>
    b646:	e7e1      	b.n	b60c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x418>
    for i in 0..CFG_MAX_TOUCH_POINTS {
    b648:	e626      	b.n	b298 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xa4>
            break;
    b64a:	e66b      	b.n	b324 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x130>
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    b64c:	f24e 7080 	movw	r0, #59264	; 0xe780
    b650:	f2c0 0001 	movt	r0, #1
    b654:	f24e 726c 	movw	r2, #59244	; 0xe76c
    b658:	f2c0 0201 	movt	r2, #1
    b65c:	2121      	movs	r1, #33	; 0x21
    b65e:	f00c f983 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b662:	defe      	udf	#254	; 0xfe
    b664:	f24e 70c0 	movw	r0, #59328	; 0xe7c0
    b668:	f2c0 0001 	movt	r0, #1
    b66c:	f24e 72a4 	movw	r2, #59300	; 0xe7a4
    b670:	f2c0 0201 	movt	r2, #1
    b674:	211c      	movs	r1, #28
    b676:	f00c f977 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b67a:	defe      	udf	#254	; 0xfe
    b67c:	f24e 70dc 	movw	r0, #59356	; 0xe7dc
    b680:	f2c0 0001 	movt	r0, #1
    b684:	223f      	movs	r2, #63	; 0x3f
    b686:	991d      	ldr	r1, [sp, #116]	; 0x74
    b688:	f00c f984 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b68c:	defe      	udf	#254	; 0xfe
        data.count += 1;
    b68e:	f24e 70c0 	movw	r0, #59328	; 0xe7c0
    b692:	f2c0 0001 	movt	r0, #1
    b696:	f24e 72ec 	movw	r2, #59372	; 0xe7ec
    b69a:	f2c0 0201 	movt	r2, #1
    b69e:	211c      	movs	r1, #28
    b6a0:	f00c f962 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b6a4:	defe      	udf	#254	; 0xfe
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    b6a6:	f24e 7080 	movw	r0, #59264	; 0xe780
    b6aa:	f2c0 0001 	movt	r0, #1
    b6ae:	f24e 72fc 	movw	r2, #59388	; 0xe7fc
    b6b2:	f2c0 0201 	movt	r2, #1
    b6b6:	2121      	movs	r1, #33	; 0x21
    b6b8:	f00c f956 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b6bc:	defe      	udf	#254	; 0xfe
    b6be:	f24e 70c0 	movw	r0, #59328	; 0xe7c0
    b6c2:	f2c0 0001 	movt	r0, #1
    b6c6:	f64e 020c 	movw	r2, #59404	; 0xe80c
    b6ca:	f2c0 0201 	movt	r2, #1
    b6ce:	211c      	movs	r1, #28
    b6d0:	f00c f94a 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b6d4:	defe      	udf	#254	; 0xfe
    b6d6:	f64e 001c 	movw	r0, #59420	; 0xe81c
    b6da:	f2c0 0001 	movt	r0, #1
    b6de:	223f      	movs	r2, #63	; 0x3f
    b6e0:	9919      	ldr	r1, [sp, #100]	; 0x64
    b6e2:	f00c f957 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b6e6:	defe      	udf	#254	; 0xfe
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
    b6e8:	f24e 7080 	movw	r0, #59264	; 0xe780
    b6ec:	f2c0 0001 	movt	r0, #1
    b6f0:	f64e 022c 	movw	r2, #59436	; 0xe82c
    b6f4:	f2c0 0201 	movt	r2, #1
    b6f8:	2121      	movs	r1, #33	; 0x21
    b6fa:	f00c f935 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b6fe:	defe      	udf	#254	; 0xfe
    b700:	f24e 70c0 	movw	r0, #59328	; 0xe7c0
    b704:	f2c0 0001 	movt	r0, #1
    b708:	f64e 023c 	movw	r2, #59452	; 0xe83c
    b70c:	f2c0 0201 	movt	r2, #1
    b710:	211c      	movs	r1, #28
    b712:	f00c f929 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b716:	defe      	udf	#254	; 0xfe
    b718:	f64e 004c 	movw	r0, #59468	; 0xe84c
    b71c:	f2c0 0001 	movt	r0, #1
    b720:	223f      	movs	r2, #63	; 0x3f
    b722:	9916      	ldr	r1, [sp, #88]	; 0x58
    b724:	f00c f936 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b728:	defe      	udf	#254	; 0xfe
        data.touches[i].x  = (x_high << 8) | x_low;
    b72a:	f64e 005c 	movw	r0, #59484	; 0xe85c
    b72e:	f2c0 0001 	movt	r0, #1
    b732:	220a      	movs	r2, #10
    b734:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b736:	f00c f92d 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b73a:	defe      	udf	#254	; 0xfe
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    b73c:	f24e 7080 	movw	r0, #59264	; 0xe780
    b740:	f2c0 0001 	movt	r0, #1
    b744:	f64e 026c 	movw	r2, #59500	; 0xe86c
    b748:	f2c0 0201 	movt	r2, #1
    b74c:	2121      	movs	r1, #33	; 0x21
    b74e:	f00c f90b 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b752:	defe      	udf	#254	; 0xfe
    b754:	f24e 70c0 	movw	r0, #59328	; 0xe7c0
    b758:	f2c0 0001 	movt	r0, #1
    b75c:	f64e 027c 	movw	r2, #59516	; 0xe87c
    b760:	f2c0 0201 	movt	r2, #1
    b764:	211c      	movs	r1, #28
    b766:	f00c f8ff 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b76a:	defe      	udf	#254	; 0xfe
    b76c:	f64e 008c 	movw	r0, #59532	; 0xe88c
    b770:	f2c0 0001 	movt	r0, #1
    b774:	223f      	movs	r2, #63	; 0x3f
    b776:	9912      	ldr	r1, [sp, #72]	; 0x48
    b778:	f00c f90c 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b77c:	defe      	udf	#254	; 0xfe
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
    b77e:	f24e 7080 	movw	r0, #59264	; 0xe780
    b782:	f2c0 0001 	movt	r0, #1
    b786:	f64e 029c 	movw	r2, #59548	; 0xe89c
    b78a:	f2c0 0201 	movt	r2, #1
    b78e:	2121      	movs	r1, #33	; 0x21
    b790:	f00c f8ea 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b794:	defe      	udf	#254	; 0xfe
    b796:	f24e 70c0 	movw	r0, #59328	; 0xe7c0
    b79a:	f2c0 0001 	movt	r0, #1
    b79e:	f64e 02ac 	movw	r2, #59564	; 0xe8ac
    b7a2:	f2c0 0201 	movt	r2, #1
    b7a6:	211c      	movs	r1, #28
    b7a8:	f00c f8de 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b7ac:	defe      	udf	#254	; 0xfe
    b7ae:	f64e 00bc 	movw	r0, #59580	; 0xe8bc
    b7b2:	f2c0 0001 	movt	r0, #1
    b7b6:	223f      	movs	r2, #63	; 0x3f
    b7b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b7ba:	f00c f8eb 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b7be:	defe      	udf	#254	; 0xfe
        data.touches[i].y  = (y_high << 8) | y_low;
    b7c0:	f64e 00cc 	movw	r0, #59596	; 0xe8cc
    b7c4:	f2c0 0001 	movt	r0, #1
    b7c8:	220a      	movs	r2, #10
    b7ca:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b7cc:	f00c f8e2 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b7d0:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
    b7d2:	f24e 7080 	movw	r0, #59264	; 0xe780
    b7d6:	f2c0 0001 	movt	r0, #1
    b7da:	f64e 02dc 	movw	r2, #59612	; 0xe8dc
    b7de:	f2c0 0201 	movt	r2, #1
    b7e2:	2121      	movs	r1, #33	; 0x21
    b7e4:	f00c f8c0 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b7e8:	defe      	udf	#254	; 0xfe
    b7ea:	f24e 70c0 	movw	r0, #59328	; 0xe7c0
    b7ee:	f2c0 0001 	movt	r0, #1
    b7f2:	f64e 02ec 	movw	r2, #59628	; 0xe8ec
    b7f6:	f2c0 0201 	movt	r2, #1
    b7fa:	211c      	movs	r1, #28
    b7fc:	f00c f8b4 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b800:	defe      	udf	#254	; 0xfe
    b802:	f64e 00fc 	movw	r0, #59644	; 0xe8fc
    b806:	f2c0 0001 	movt	r0, #1
    b80a:	223f      	movs	r2, #63	; 0x3f
    b80c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b80e:	f00c f8c1 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b812:	defe      	udf	#254	; 0xfe
        data.touches[i].action =
    b814:	f64e 100c 	movw	r0, #59660	; 0xe90c
    b818:	f2c0 0001 	movt	r0, #1
    b81c:	220a      	movs	r2, #10
    b81e:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b820:	f00c f8b8 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b824:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
    b826:	f24e 7080 	movw	r0, #59264	; 0xe780
    b82a:	f2c0 0001 	movt	r0, #1
    b82e:	f64e 121c 	movw	r2, #59676	; 0xe91c
    b832:	f2c0 0201 	movt	r2, #1
    b836:	2121      	movs	r1, #33	; 0x21
    b838:	f00c f896 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b83c:	defe      	udf	#254	; 0xfe
    b83e:	f24e 70c0 	movw	r0, #59328	; 0xe7c0
    b842:	f2c0 0001 	movt	r0, #1
    b846:	f64e 122c 	movw	r2, #59692	; 0xe92c
    b84a:	f2c0 0201 	movt	r2, #1
    b84e:	211c      	movs	r1, #28
    b850:	f00c f88a 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b854:	defe      	udf	#254	; 0xfe
    b856:	f64e 103c 	movw	r0, #59708	; 0xe93c
    b85a:	f2c0 0001 	movt	r0, #1
    b85e:	223f      	movs	r2, #63	; 0x3f
    b860:	9908      	ldr	r1, [sp, #32]
    b862:	f00c f897 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b866:	defe      	udf	#254	; 0xfe
        data.touches[i].finger =
    b868:	f64e 104c 	movw	r0, #59724	; 0xe94c
    b86c:	f2c0 0001 	movt	r0, #1
    b870:	220a      	movs	r2, #10
    b872:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b874:	f00c f88e 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b878:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
    b87a:	f24e 7080 	movw	r0, #59264	; 0xe780
    b87e:	f2c0 0001 	movt	r0, #1
    b882:	f64e 125c 	movw	r2, #59740	; 0xe95c
    b886:	f2c0 0201 	movt	r2, #1
    b88a:	2121      	movs	r1, #33	; 0x21
    b88c:	f00c f86c 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b890:	defe      	udf	#254	; 0xfe
    b892:	f24e 70c0 	movw	r0, #59328	; 0xe7c0
    b896:	f2c0 0001 	movt	r0, #1
    b89a:	f64e 126c 	movw	r2, #59756	; 0xe96c
    b89e:	f2c0 0201 	movt	r2, #1
    b8a2:	211c      	movs	r1, #28
    b8a4:	f00c f860 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b8a8:	defe      	udf	#254	; 0xfe
    b8aa:	f64e 107c 	movw	r0, #59772	; 0xe97c
    b8ae:	f2c0 0001 	movt	r0, #1
    b8b2:	223f      	movs	r2, #63	; 0x3f
    b8b4:	9905      	ldr	r1, [sp, #20]
    b8b6:	f00c f86d 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b8ba:	defe      	udf	#254	; 0xfe
        data.touches[i].pressure =
    b8bc:	f64e 108c 	movw	r0, #59788	; 0xe98c
    b8c0:	f2c0 0001 	movt	r0, #1
    b8c4:	220a      	movs	r2, #10
    b8c6:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b8c8:	f00c f864 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b8cc:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
    b8ce:	f24e 7080 	movw	r0, #59264	; 0xe780
    b8d2:	f2c0 0001 	movt	r0, #1
    b8d6:	f64e 129c 	movw	r2, #59804	; 0xe99c
    b8da:	f2c0 0201 	movt	r2, #1
    b8de:	2121      	movs	r1, #33	; 0x21
    b8e0:	f00c f842 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b8e4:	defe      	udf	#254	; 0xfe
    b8e6:	f24e 70c0 	movw	r0, #59328	; 0xe7c0
    b8ea:	f2c0 0001 	movt	r0, #1
    b8ee:	f64e 12ac 	movw	r2, #59820	; 0xe9ac
    b8f2:	f2c0 0201 	movt	r2, #1
    b8f6:	211c      	movs	r1, #28
    b8f8:	f00c f836 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b8fc:	defe      	udf	#254	; 0xfe
    b8fe:	f64e 10bc 	movw	r0, #59836	; 0xe9bc
    b902:	f2c0 0001 	movt	r0, #1
    b906:	223f      	movs	r2, #63	; 0x3f
    b908:	9902      	ldr	r1, [sp, #8]
    b90a:	f00c f843 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b90e:	defe      	udf	#254	; 0xfe
        data.touches[i].area =
    b910:	f64e 10cc 	movw	r0, #59852	; 0xe9cc
    b914:	f2c0 0001 	movt	r0, #1
    b918:	220a      	movs	r2, #10
    b91a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b91c:	f00c f83a 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b920:	defe      	udf	#254	; 0xfe
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    b922:	f64e 10dc 	movw	r0, #59868	; 0xe9dc
    b926:	f2c0 0001 	movt	r0, #1
    b92a:	220a      	movs	r2, #10
    b92c:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b92e:	f00c f831 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b932:	defe      	udf	#254	; 0xfe
    b934:	f64e 10ec 	movw	r0, #59884	; 0xe9ec
    b938:	f2c0 0001 	movt	r0, #1
    b93c:	220a      	movs	r2, #10
    b93e:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b940:	f00c f828 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b944:	defe      	udf	#254	; 0xfe

0000b946 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E>:

/// Event that will be forwarded to the Event Queue when a touch interrupt is triggered
static mut TOUCH_EVENT: os_event = fill_zero!(os_event);  //  Init all fields to 0 or NULL

/// Read a range of I2C registers from the I2C address `addr` (7-bit address), starting at `start_register` for count `num_registers`. Save into `buffer`.
fn read_register_range(addr: u8, start_register: u8, num_registers: u8, buffer: &mut[u8]) -> MynewtResult<()> {
    b946:	b5b0      	push	{r4, r5, r7, lr}
    b948:	b094      	sub	sp, #80	; 0x50
    b94a:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
    b94e:	4696      	mov	lr, r2
    b950:	460c      	mov	r4, r1
    b952:	4605      	mov	r5, r0
    b954:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
    b958:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
    b95c:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
    b960:	9310      	str	r3, [sp, #64]	; 0x40
    b962:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
    b966:	4618      	mov	r0, r3
    b968:	4661      	mov	r1, ip
    b96a:	930d      	str	r3, [sp, #52]	; 0x34
    b96c:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    b970:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    b974:	940a      	str	r4, [sp, #40]	; 0x28
    b976:	9509      	str	r5, [sp, #36]	; 0x24
    b978:	f006 fab7 	bl	11eea <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    b97c:	9008      	str	r0, [sp, #32]
    b97e:	e7ff      	b.n	b980 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x3a>
    b980:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b982:	b2c1      	uxtb	r1, r0
    b984:	9a08      	ldr	r2, [sp, #32]
    b986:	428a      	cmp	r2, r1
    b988:	d30d      	bcc.n	b9a6 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x60>
    b98a:	e7ff      	b.n	b98c <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x46>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    b98c:	980a      	ldr	r0, [sp, #40]	; 0x28
    b98e:	b2c1      	uxtb	r1, r0
    b990:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b992:	fa51 f182 	uxtab	r1, r1, r2
    b996:	b2cb      	uxtb	r3, r1
    b998:	468c      	mov	ip, r1
    b99a:	428b      	cmp	r3, r1
    b99c:	f8cd c01c 	str.w	ip, [sp, #28]
    b9a0:	f040 8092 	bne.w	bac8 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x182>
    b9a4:	e00b      	b.n	b9be <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x78>
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
    b9a6:	f64e 10fc 	movw	r0, #59900	; 0xe9fc
    b9aa:	f2c0 0001 	movt	r0, #1
    b9ae:	f64e 2204 	movw	r2, #59908	; 0xea04
    b9b2:	f2c0 0201 	movt	r2, #1
    b9b6:	2107      	movs	r1, #7
    b9b8:	f00b ffd6 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b9bc:	defe      	udf	#254	; 0xfe
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    b9be:	9807      	ldr	r0, [sp, #28]
    b9c0:	b241      	sxtb	r1, r0
    b9c2:	2900      	cmp	r1, #0
    b9c4:	d411      	bmi.n	b9ea <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0xa4>
    b9c6:	e7ff      	b.n	b9c8 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x82>
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Write Mode (1 bit, value 0)...
    //    Followed by starting Register Number (8 bits)
    unsafe { 
        I2C_BUFFER[0] = start_register;  //  I2C Packet buffer contains starting Register Number (1 byte)
    b9c8:	f240 2014 	movw	r0, #532	; 0x214
    b9cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b9d0:	990a      	ldr	r1, [sp, #40]	; 0x28
    b9d2:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;         //  I2C Packet address (7 bits)
    b9d4:	f240 220c 	movw	r2, #524	; 0x20c
    b9d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b9dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b9de:	7013      	strb	r3, [r2, #0]
    b9e0:	2101      	movs	r1, #1
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
    b9e2:	f006 fa82 	bl	11eea <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    b9e6:	9006      	str	r0, [sp, #24]
    b9e8:	e00b      	b.n	ba02 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0xbc>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    b9ea:	f24e 7000 	movw	r0, #59136	; 0xe700
    b9ee:	f2c0 0001 	movt	r0, #1
    b9f2:	f64e 2224 	movw	r2, #59940	; 0xea24
    b9f6:	f2c0 0201 	movt	r2, #1
    b9fa:	2108      	movs	r1, #8
    b9fc:	f00b ffb4 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ba00:	defe      	udf	#254	; 0xfe
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
    ba02:	f240 200c 	movw	r0, #524	; 0x20c
    ba06:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ba0a:	9906      	ldr	r1, [sp, #24]
    ba0c:	8041      	strh	r1, [r0, #2]
        I2C_DATA.buffer = I2C_BUFFER.as_mut_ptr();  //  I2C Packet data points to packet buffer
    ba0e:	f240 2014 	movw	r0, #532	; 0x214
    ba12:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ba16:	2101      	movs	r1, #1
    ba18:	f006 fa50 	bl	11ebc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    ba1c:	9005      	str	r0, [sp, #20]
    ba1e:	e7ff      	b.n	ba20 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0xda>
    ba20:	f240 200c 	movw	r0, #524	; 0x20c
    ba24:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ba28:	9905      	ldr	r1, [sp, #20]
    ba2a:	6041      	str	r1, [r0, #4]
    ba2c:	2201      	movs	r2, #1
    ba2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    ba32:	f04f 0c00 	mov.w	ip, #0
    };
    let _rc1 = unsafe { hal::hal_i2c_master_write(1, &mut I2C_DATA, 1000, 0) };  //  No stop yet, must continue even if we hit an error
    ba36:	9004      	str	r0, [sp, #16]
    ba38:	4610      	mov	r0, r2
    ba3a:	9904      	ldr	r1, [sp, #16]
    ba3c:	461a      	mov	r2, r3
    ba3e:	4663      	mov	r3, ip
    ba40:	f00e fa80 	bl	19f44 <hal_i2c_master_write>
    ba44:	9012      	str	r0, [sp, #72]	; 0x48
    ba46:	e7ff      	b.n	ba48 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x102>
    //  Step 3: Prepare to receive the stream of I2C Device Register values...
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Read Mode (1 bit, value 1)
    unsafe { 
        I2C_BUFFER[0] = 0x00;     //  I2C Packet buffer should be empty (provided by caller)
    ba48:	f240 2014 	movw	r0, #532	; 0x214
    ba4c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ba50:	2100      	movs	r1, #0
    ba52:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;  //  I2C Packet address (7 bits)
    ba54:	f240 200c 	movw	r0, #524	; 0x20c
    ba58:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ba5c:	9909      	ldr	r1, [sp, #36]	; 0x24
    ba5e:	7001      	strb	r1, [r0, #0]
        I2C_DATA.len = num_registers as u16;    //  I2C Packet data size is number of Registers to read
    ba60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ba62:	b2d3      	uxtb	r3, r2
    ba64:	8043      	strh	r3, [r0, #2]
        I2C_DATA.buffer = buffer.as_mut_ptr();  //  I2C Packet data points to packet buffer
    ba66:	980d      	ldr	r0, [sp, #52]	; 0x34
    ba68:	990c      	ldr	r1, [sp, #48]	; 0x30
    ba6a:	f006 fa27 	bl	11ebc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    ba6e:	9003      	str	r0, [sp, #12]
    ba70:	e7ff      	b.n	ba72 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x12c>
    ba72:	f240 200c 	movw	r0, #524	; 0x20c
    ba76:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ba7a:	9903      	ldr	r1, [sp, #12]
    ba7c:	6041      	str	r1, [r0, #4]
    ba7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ba82:	2301      	movs	r3, #1
    };
    //  Step 4: Receive the requested number of Register values from I2C Device (1 byte per register)
    //  Step 5: Send the Stop Condition (Low to High SDA Transition)
    let rc2 = unsafe { hal::hal_i2c_master_read(1, &mut I2C_DATA, 1000, 1) };
    ba84:	9002      	str	r0, [sp, #8]
    ba86:	4618      	mov	r0, r3
    ba88:	9902      	ldr	r1, [sp, #8]
    ba8a:	f00e faef 	bl	1a06c <hal_i2c_master_read>
    ba8e:	4601      	mov	r1, r0
    ba90:	9013      	str	r0, [sp, #76]	; 0x4c
    ba92:	9101      	str	r1, [sp, #4]
    ba94:	e7ff      	b.n	ba96 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x150>
    if rc2 == hal::HAL_I2C_ERR_ADDR_NACK as i32 {
    ba96:	9801      	ldr	r0, [sp, #4]
    ba98:	2804      	cmp	r0, #4
    ba9a:	d005      	beq.n	baa8 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x162>
    ba9c:	e7ff      	b.n	ba9e <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x158>
    ba9e:	2000      	movs	r0, #0
        ////assert!(false, "i2c fail");  //  I2C read failed
        console::print("i2c fail\n"); ////
        return Ok(());               //  TODO: Return an error
    }
    Ok(())
    baa0:	900e      	str	r0, [sp, #56]	; 0x38
    baa2:	2001      	movs	r0, #1
    baa4:	900e      	str	r0, [sp, #56]	; 0x38
}
    baa6:	e00c      	b.n	bac2 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x17c>
        console::print("i2c fail\n"); ////
    baa8:	f64e 2034 	movw	r0, #59956	; 0xea34
    baac:	f2c0 0001 	movt	r0, #1
    bab0:	2109      	movs	r1, #9
    bab2:	f7fd fa9d 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    bab6:	e7ff      	b.n	bab8 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x172>
    bab8:	2000      	movs	r0, #0
        return Ok(());               //  TODO: Return an error
    baba:	900e      	str	r0, [sp, #56]	; 0x38
    babc:	2001      	movs	r0, #1
    babe:	900e      	str	r0, [sp, #56]	; 0x38
    bac0:	e7ff      	b.n	bac2 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x17c>
}
    bac2:	980e      	ldr	r0, [sp, #56]	; 0x38
    bac4:	b014      	add	sp, #80	; 0x50
    bac6:	bdb0      	pop	{r4, r5, r7, pc}
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    bac8:	f24e 70c0 	movw	r0, #59328	; 0xe7c0
    bacc:	f2c0 0001 	movt	r0, #1
    bad0:	f64e 2214 	movw	r2, #59924	; 0xea14
    bad4:	f2c0 0201 	movt	r2, #1
    bad8:	211c      	movs	r1, #28
    bada:	f00b ff45 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bade:	defe      	udf	#254	; 0xfe

0000bae0 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E>:
/// CHIP8 Virtual Pixel size, in Physical Pixels
const PIXEL_WIDTH: usize = 3;
const PIXEL_HEIGHT: usize = 5;

/// Render some graphics and text to the PineTime display. `start_display()` must have been called earlier.
pub fn on_start() -> MynewtResult<()> {
    bae0:	b510      	push	{r4, lr}
    bae2:	b0aa      	sub	sp, #168	; 0xa8
    console::print("Rust CHIP8\n"); console::flush();
    bae4:	f64e 203d 	movw	r0, #59965	; 0xea3d
    bae8:	f2c0 0001 	movt	r0, #1
    baec:	210b      	movs	r1, #11
    baee:	f7fd fa7f 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    baf2:	e7ff      	b.n	baf4 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x14>
    baf4:	f7fd fac2 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    baf8:	e7ff      	b.n	bafa <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x1a>
    bafa:	2000      	movs	r0, #0
    
    //  Create black background
    let background = Rectangle::<Rgb565>
        ::new( Coord::new( 0, 0 ), Coord::new( 239, 239 ) )   //  Rectangle coordinates
    bafc:	900d      	str	r0, [sp, #52]	; 0x34
    bafe:	990d      	ldr	r1, [sp, #52]	; 0x34
    bb00:	f005 ff1a 	bl	11938 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    bb04:	900c      	str	r0, [sp, #48]	; 0x30
    bb06:	910b      	str	r1, [sp, #44]	; 0x2c
    bb08:	e7ff      	b.n	bb0a <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x2a>
    bb0a:	20ef      	movs	r0, #239	; 0xef
    bb0c:	900a      	str	r0, [sp, #40]	; 0x28
    bb0e:	990a      	ldr	r1, [sp, #40]	; 0x28
    bb10:	f005 ff12 	bl	11938 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    bb14:	9009      	str	r0, [sp, #36]	; 0x24
    bb16:	9108      	str	r1, [sp, #32]
    bb18:	e7ff      	b.n	bb1a <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x3a>
    let background = Rectangle::<Rgb565>
    bb1a:	4668      	mov	r0, sp
    bb1c:	9908      	ldr	r1, [sp, #32]
    bb1e:	6001      	str	r1, [r0, #0]
    bb20:	a816      	add	r0, sp, #88	; 0x58
    bb22:	990c      	ldr	r1, [sp, #48]	; 0x30
    bb24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    bb26:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bb28:	f00a ff0e 	bl	16948 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>
    bb2c:	e7ff      	b.n	bb2e <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x4e>
    bb2e:	2000      	movs	r0, #0
        .fill( Some( Rgb565::from(( 0x00, 0x00, 0x00 )) ) );  //  Black
    bb30:	f88d 0078 	strb.w	r0, [sp, #120]	; 0x78
    bb34:	f88d 0079 	strb.w	r0, [sp, #121]	; 0x79
    bb38:	f88d 007a 	strb.w	r0, [sp, #122]	; 0x7a
    bb3c:	f89d 007a 	ldrb.w	r0, [sp, #122]	; 0x7a
    bb40:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
    bb44:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    bb48:	f005 ff71 	bl	11a2e <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    bb4c:	9007      	str	r0, [sp, #28]
    bb4e:	e7ff      	b.n	bb50 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x70>
    bb50:	9807      	ldr	r0, [sp, #28]
    bb52:	f8ad 0076 	strh.w	r0, [sp, #118]	; 0x76
    bb56:	2101      	movs	r1, #1
    bb58:	f8ad 1074 	strh.w	r1, [sp, #116]	; 0x74
    let background = Rectangle::<Rgb565>
    bb5c:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    bb60:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
    bb64:	a80f      	add	r0, sp, #60	; 0x3c
    bb66:	a916      	add	r1, sp, #88	; 0x58
    bb68:	f00a fb84 	bl	16274 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>
    bb6c:	e7ff      	b.n	bb6e <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x8e>
    bb6e:	a80f      	add	r0, sp, #60	; 0x3c
    bb70:	a91f      	add	r1, sp, #124	; 0x7c

    //  Render background to display
    druid::draw_to_display(background);
    bb72:	460a      	mov	r2, r1
    bb74:	e8b0 5008 	ldmia.w	r0!, {r3, ip, lr}
    bb78:	e8a2 5008 	stmia.w	r2!, {r3, ip, lr}
    bb7c:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
    bb80:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
    bb84:	4608      	mov	r0, r1
    bb86:	f009 fd2f 	bl	155e8 <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E>
    bb8a:	e7ff      	b.n	bb8c <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0xac>

    //  Start the emulator in a background task
    os::task_init(                  //  Create a new task and start it...
        unsafe { &mut CHIP8_TASK }, //  Task object will be saved here
        &init_strn!( "chip8" ),     //  Name of task
    bb8c:	f64e 205c 	movw	r0, #59996	; 0xea5c
    bb90:	f2c0 0001 	movt	r0, #1
    bb94:	6801      	ldr	r1, [r0, #0]
        Some( task_func ),    //  Function to execute when task starts
    bb96:	f64b 4017 	movw	r0, #48151	; 0xbc17
    bb9a:	f2c0 0000 	movt	r0, #0
    bb9e:	9027      	str	r0, [sp, #156]	; 0x9c
    os::task_init(                  //  Create a new task and start it...
    bba0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    bba2:	4668      	mov	r0, sp
    bba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    bba8:	6103      	str	r3, [r0, #16]
    bbaa:	60c3      	str	r3, [r0, #12]
    bbac:	f240 2368 	movw	r3, #616	; 0x268
    bbb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbb4:	6083      	str	r3, [r0, #8]
    bbb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bbba:	6043      	str	r3, [r0, #4]
    bbbc:	2314      	movs	r3, #20
    bbbe:	6003      	str	r3, [r0, #0]
    bbc0:	f240 2018 	movw	r0, #536	; 0x218
    bbc4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bbc8:	2300      	movs	r3, #0
    bbca:	f7fd f861 	bl	8c90 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>
    bbce:	9006      	str	r0, [sp, #24]
    bbd0:	e7ff      	b.n	bbd2 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0xf2>
    bbd2:	9806      	ldr	r0, [sp, #24]
    bbd4:	f7fc ffd0 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    bbd8:	9026      	str	r0, [sp, #152]	; 0x98
    bbda:	e7ff      	b.n	bbdc <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0xfc>
        NULL,  //  Argument to be passed to above function
        20,    //  Task priority: highest is 0, lowest is 255 (main task is 127), SPI is 10
        os::OS_WAIT_FOREVER as u32,       //  Don't do sanity / watchdog checking
        unsafe { &mut CHIP8_TASK_STACK }, //  Stack space for the task
        CHIP8_TASK_STACK_SIZE as u16      //  Size of the stack (in 4-byte units)
    ) ? ;                                 //  `?` means check for error
    bbdc:	9826      	ldr	r0, [sp, #152]	; 0x98
    bbde:	1e41      	subs	r1, r0, #1
    bbe0:	bf18      	it	ne
    bbe2:	2101      	movne	r1, #1
    bbe4:	2801      	cmp	r0, #1
    bbe6:	d001      	beq.n	bbec <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x10c>
    bbe8:	e7ff      	b.n	bbea <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x10a>
    bbea:	e005      	b.n	bbf8 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x118>
    bbec:	2000      	movs	r0, #0

    //  Return success to the caller
    Ok(())
    bbee:	900e      	str	r0, [sp, #56]	; 0x38
    bbf0:	2001      	movs	r0, #1
    bbf2:	900e      	str	r0, [sp, #56]	; 0x38
}
    bbf4:	e006      	b.n	bc04 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x124>
    os::task_init(                  //  Create a new task and start it...
    bbf6:	defe      	udf	#254	; 0xfe
    ) ? ;                                 //  `?` means check for error
    bbf8:	9826      	ldr	r0, [sp, #152]	; 0x98
    bbfa:	9029      	str	r0, [sp, #164]	; 0xa4
    bbfc:	f006 fe00 	bl	12800 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    bc00:	9005      	str	r0, [sp, #20]
    bc02:	e002      	b.n	bc0a <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x12a>
}
    bc04:	980e      	ldr	r0, [sp, #56]	; 0x38
    bc06:	b02a      	add	sp, #168	; 0xa8
    bc08:	bd10      	pop	{r4, pc}
    ) ? ;                                 //  `?` means check for error
    bc0a:	9805      	ldr	r0, [sp, #20]
    bc0c:	f7fc ffa8 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    bc10:	900e      	str	r0, [sp, #56]	; 0x38
    bc12:	e7ff      	b.n	bc14 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x134>
    bc14:	e7f6      	b.n	bc04 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x124>

0000bc16 <_ZN3app5chip89task_func17h385831a0096277b5E>:

/// Size of the stack (in 4-byte units). Previously `OS_STACK_ALIGN(256)`  
const CHIP8_TASK_STACK_SIZE: usize = 4096;  //  Must be 4096 and above because CHIP8 Emulator requires substantial stack space

///  Run the emulator
extern "C" fn task_func(_arg: Ptr) {    
    bc16:	b580      	push	{r7, lr}
    bc18:	f5ad 5d03 	sub.w	sp, sp, #8384	; 0x20c0
    bc1c:	b084      	sub	sp, #16
    bc1e:	f10d 0e04 	add.w	lr, sp, #4
    bc22:	f50e 5103 	add.w	r1, lr, #8384	; 0x20c0
    bc26:	f10d 0e0c 	add.w	lr, sp, #12
    bc2a:	f50e 5283 	add.w	r2, lr, #4192	; 0x1060
    bc2e:	6008      	str	r0, [r1, #0]
    //  Create the hardware API for rendering the emulator
    let hardware = Hardware::new();
    bc30:	9104      	str	r1, [sp, #16]
    bc32:	9203      	str	r2, [sp, #12]
    bc34:	f000 f849 	bl	bcca <_ZN3app5chip88Hardware3new17hd197d831acf35cdcE>
    bc38:	9904      	ldr	r1, [sp, #16]
    bc3a:	6048      	str	r0, [r1, #4]
    bc3c:	6848      	ldr	r0, [r1, #4]
    bc3e:	9005      	str	r0, [sp, #20]
    bc40:	e7ff      	b.n	bc42 <_ZN3app5chip89task_func17h385831a0096277b5E+0x2c>

    //  Create the emulator
    let chip8 = libchip8::Chip8::new(hardware);
    bc42:	9805      	ldr	r0, [sp, #20]
    bc44:	9903      	ldr	r1, [sp, #12]
    bc46:	6008      	str	r0, [r1, #0]
    bc48:	6809      	ldr	r1, [r1, #0]
    bc4a:	a806      	add	r0, sp, #24
    bc4c:	f001 fa4a 	bl	d0e4 <_ZN8libchip814Chip8$LT$T$GT$3new17h746d7acd3c3a5f1eE>
    bc50:	e7ff      	b.n	bc52 <_ZN3app5chip89task_func17h385831a0096277b5E+0x3c>
    console::print("CHIP8 started\n"); console::flush();
    bc52:	f64e 2060 	movw	r0, #60000	; 0xea60
    bc56:	f2c0 0001 	movt	r0, #1
    bc5a:	210e      	movs	r1, #14
    bc5c:	f7fd f9c8 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    bc60:	e7ff      	b.n	bc62 <_ZN3app5chip89task_func17h385831a0096277b5E+0x4c>
    bc62:	f7fd fa0b 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    bc66:	e7ff      	b.n	bc68 <_ZN3app5chip89task_func17h385831a0096277b5E+0x52>

    //  Load the emulator ROM
    //  let rom = include_bytes!("../roms/invaders.ch8");
    //  let rom = include_bytes!("../roms/pong.ch8");
    let rom = include_bytes!("../roms/blinky.ch8");
    bc68:	f64e 206e 	movw	r0, #60014	; 0xea6e
    bc6c:	f2c0 0001 	movt	r0, #1
    bc70:	9904      	ldr	r1, [sp, #16]
    bc72:	6088      	str	r0, [r1, #8]
    bc74:	f10d 0e10 	add.w	lr, sp, #16
    bc78:	f50e 5283 	add.w	r2, lr, #4192	; 0x1060
    bc7c:	a906      	add	r1, sp, #24
    bc7e:	f241 0350 	movw	r3, #4176	; 0x1050

    //  Run the emulator ROM. This will block until emulator terminates
    chip8.run(rom);
    bc82:	9002      	str	r0, [sp, #8]
    bc84:	4610      	mov	r0, r2
    bc86:	9201      	str	r2, [sp, #4]
    bc88:	461a      	mov	r2, r3
    bc8a:	f012 fa41 	bl	1e110 <__aeabi_memcpy>
    bc8e:	f640 1234 	movw	r2, #2356	; 0x934
    bc92:	9801      	ldr	r0, [sp, #4]
    bc94:	9902      	ldr	r1, [sp, #8]
    bc96:	f001 fac5 	bl	d224 <_ZN8libchip814Chip8$LT$T$GT$3run17he09519a5fb5b03e9E>
    bc9a:	e7ff      	b.n	bc9c <_ZN3app5chip89task_func17h385831a0096277b5E+0x86>

    //  Should not come here
    console::print("CHIP8 done\n"); console::flush();
    bc9c:	f24f 30a2 	movw	r0, #62370	; 0xf3a2
    bca0:	f2c0 0001 	movt	r0, #1
    bca4:	210b      	movs	r1, #11
    bca6:	f7fd f9a3 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    bcaa:	e7ff      	b.n	bcac <_ZN3app5chip89task_func17h385831a0096277b5E+0x96>
    bcac:	f7fd f9e6 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    bcb0:	e7ff      	b.n	bcb2 <_ZN3app5chip89task_func17h385831a0096277b5E+0x9c>
    assert!(false, "CHIP8 should not end");
    bcb2:	f24f 30ad 	movw	r0, #62381	; 0xf3ad
    bcb6:	f2c0 0001 	movt	r0, #1
    bcba:	f24f 32d8 	movw	r2, #62424	; 0xf3d8
    bcbe:	f2c0 0201 	movt	r2, #1
    bcc2:	2114      	movs	r1, #20
    bcc4:	f00b fe50 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bcc8:	defe      	udf	#254	; 0xfe

0000bcca <_ZN3app5chip88Hardware3new17hd197d831acf35cdcE>:
    update_bottom: u8,
}

impl Hardware {
    /// Return a new Hardware API for rendering CHIP8 Emulator
    pub fn new() -> Hardware {
    bcca:	b081      	sub	sp, #4
    bccc:	2000      	movs	r0, #0
        Hardware {
    bcce:	f88d 0000 	strb.w	r0, [sp]
    bcd2:	f88d 0001 	strb.w	r0, [sp, #1]
    bcd6:	f88d 0002 	strb.w	r0, [sp, #2]
    bcda:	f88d 0003 	strb.w	r0, [sp, #3]
            update_left: 0,
            update_top: 0,
            update_right: 0,
            update_bottom: 0,
        }
    }
    bcde:	9800      	ldr	r0, [sp, #0]
    bce0:	b001      	add	sp, #4
    bce2:	4770      	bx	lr

0000bce4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17h21c3e4c6bd12cf0aE>:
}

impl libchip8::Hardware for Hardware {
    /// Return a random value.
    fn rand(&mut self) -> u8 {
    bce4:	b081      	sub	sp, #4
    bce6:	9000      	str	r0, [sp, #0]
    bce8:	207b      	movs	r0, #123	; 0x7b
        123  //  TODO
    }
    bcea:	b001      	add	sp, #4
    bcec:	4770      	bx	lr

0000bcee <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17h2b52e92623e4ee1eE>:

    /// Check if the key is pressed.
    fn key(&mut self, _key: u8) -> bool {
    bcee:	b580      	push	{r7, lr}
    bcf0:	b084      	sub	sp, #16
    bcf2:	460a      	mov	r2, r1
    bcf4:	9002      	str	r0, [sp, #8]
    bcf6:	f88d 100f 	strb.w	r1, [sp, #15]
        console::print("key\n"); console::flush(); ////
    bcfa:	f24f 30e8 	movw	r0, #62440	; 0xf3e8
    bcfe:	f2c0 0001 	movt	r0, #1
    bd02:	2104      	movs	r1, #4
    bd04:	9201      	str	r2, [sp, #4]
    bd06:	f7fd f973 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    bd0a:	e7ff      	b.n	bd0c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17h2b52e92623e4ee1eE+0x1e>
    bd0c:	f7fd f9b6 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    bd10:	e7ff      	b.n	bd12 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17h2b52e92623e4ee1eE+0x24>
    bd12:	2000      	movs	r0, #0
        match &self.win {
            Some(win) => win.is_key_down(k),
            None => false,
        }
        */
    }
    bd14:	b004      	add	sp, #16
    bd16:	bd80      	pop	{r7, pc}

0000bd18 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E>:

    /// Set the state of a pixel in the screen. true for white, and false for black.
    fn vram_set(&mut self, x: usize, y: usize, d: bool) {
    bd18:	b08c      	sub	sp, #48	; 0x30
    bd1a:	469c      	mov	ip, r3
    bd1c:	9007      	str	r0, [sp, #28]
    bd1e:	9108      	str	r1, [sp, #32]
    bd20:	9209      	str	r2, [sp, #36]	; 0x24
    bd22:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        //  console::print("set "); console::printint(x as i32); console::print(", "); console::printint(y as i32); console::print("\n"); console::flush(); ////
        assert!(x < SCREEN_WIDTH, "x overflow");
    bd26:	293f      	cmp	r1, #63	; 0x3f
    bd28:	9205      	str	r2, [sp, #20]
    bd2a:	9104      	str	r1, [sp, #16]
    bd2c:	9003      	str	r0, [sp, #12]
    bd2e:	f8cd c008 	str.w	ip, [sp, #8]
    bd32:	d804      	bhi.n	bd3e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0x26>
    bd34:	e7ff      	b.n	bd36 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0x1e>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    bd36:	9805      	ldr	r0, [sp, #20]
    bd38:	281f      	cmp	r0, #31
    bd3a:	d814      	bhi.n	bd66 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0x4e>
    bd3c:	e00b      	b.n	bd56 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0x3e>
        assert!(x < SCREEN_WIDTH, "x overflow");
    bd3e:	f24f 30ec 	movw	r0, #62444	; 0xf3ec
    bd42:	f2c0 0001 	movt	r0, #1
    bd46:	f24f 32f8 	movw	r2, #62456	; 0xf3f8
    bd4a:	f2c0 0201 	movt	r2, #1
    bd4e:	210a      	movs	r1, #10
    bd50:	f00b fe0a 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bd54:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    bd56:	9805      	ldr	r0, [sp, #20]
    bd58:	0181      	lsls	r1, r0, #6
    bd5a:	0e82      	lsrs	r2, r0, #26
    bd5c:	2a00      	cmp	r2, #0
    bd5e:	9101      	str	r1, [sp, #4]
    bd60:	f040 80a8 	bne.w	beb4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0x19c>
    bd64:	e00b      	b.n	bd7e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0x66>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    bd66:	f24f 4008 	movw	r0, #62472	; 0xf408
    bd6a:	f2c0 0001 	movt	r0, #1
    bd6e:	f24f 4214 	movw	r2, #62484	; 0xf414
    bd72:	f2c0 0201 	movt	r2, #1
    bd76:	210a      	movs	r1, #10
    bd78:	f00b fdf6 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bd7c:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    bd7e:	9804      	ldr	r0, [sp, #16]
    bd80:	9901      	ldr	r1, [sp, #4]
    bd82:	1842      	adds	r2, r0, r1
    bd84:	4613      	mov	r3, r2
    bd86:	4282      	cmp	r2, r0
    bd88:	9300      	str	r3, [sp, #0]
    bd8a:	f0c0 809f 	bcc.w	becc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0x1b4>
    bd8e:	e7ff      	b.n	bd90 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0x78>
    bd90:	9800      	ldr	r0, [sp, #0]
    bd92:	900b      	str	r0, [sp, #44]	; 0x2c
        unsafe { SCREEN_BUFFER[i] = if d { 255 } else { 127 } };
    bd94:	9902      	ldr	r1, [sp, #8]
    bd96:	07ca      	lsls	r2, r1, #31
    bd98:	2a00      	cmp	r2, #0
    bd9a:	d104      	bne.n	bda6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0x8e>
    bd9c:	e7ff      	b.n	bd9e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0x86>
    bd9e:	207f      	movs	r0, #127	; 0x7f
    bda0:	f88d 0018 	strb.w	r0, [sp, #24]
    bda4:	e003      	b.n	bdae <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0x96>
    bda6:	20ff      	movs	r0, #255	; 0xff
    bda8:	f88d 0018 	strb.w	r0, [sp, #24]
    bdac:	e7ff      	b.n	bdae <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0x96>
    bdae:	2000      	movs	r0, #0
    bdb0:	9900      	ldr	r1, [sp, #0]
    bdb2:	ebb0 2fd1 	cmp.w	r0, r1, lsr #11
    bdb6:	f040 8095 	bne.w	bee4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0x1cc>
    bdba:	e7ff      	b.n	bdbc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0xa4>
    bdbc:	f244 2068 	movw	r0, #17000	; 0x4268
    bdc0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bdc4:	f89d 1018 	ldrb.w	r1, [sp, #24]
    bdc8:	9a00      	ldr	r2, [sp, #0]
    bdca:	5481      	strb	r1, [r0, r2]

        //  Remember the boundaries of the screen region to be updated
        if self.update_left == 0 && self.update_right == 0 &&
    bdcc:	9803      	ldr	r0, [sp, #12]
    bdce:	7801      	ldrb	r1, [r0, #0]
    bdd0:	2900      	cmp	r1, #0
    bdd2:	d02e      	beq.n	be32 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0x11a>
    bdd4:	e029      	b.n	be2a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0x112>
    bdd6:	2001      	movs	r0, #1
    bdd8:	f88d 0019 	strb.w	r0, [sp, #25]
    bddc:	e008      	b.n	bdf0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0xd8>
    bdde:	2000      	movs	r0, #0
    bde0:	f88d 0019 	strb.w	r0, [sp, #25]
    bde4:	e004      	b.n	bdf0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0xd8>
            self.update_top == 0 && self.update_bottom == 0 {
    bde6:	9803      	ldr	r0, [sp, #12]
    bde8:	78c1      	ldrb	r1, [r0, #3]
        if self.update_left == 0 && self.update_right == 0 &&
    bdea:	2900      	cmp	r1, #0
    bdec:	d0f3      	beq.n	bdd6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0xbe>
    bdee:	e7f6      	b.n	bdde <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0xc6>
    bdf0:	f89d 0019 	ldrb.w	r0, [sp, #25]
    bdf4:	07c0      	lsls	r0, r0, #31
    bdf6:	2800      	cmp	r0, #0
    bdf8:	d126      	bne.n	be48 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0x130>
    bdfa:	e02d      	b.n	be58 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0x140>
    bdfc:	2001      	movs	r0, #1
    bdfe:	f88d 001a 	strb.w	r0, [sp, #26]
    be02:	e008      	b.n	be16 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0xfe>
    be04:	2000      	movs	r0, #0
    be06:	f88d 001a 	strb.w	r0, [sp, #26]
    be0a:	e004      	b.n	be16 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0xfe>
            self.update_top == 0 && self.update_bottom == 0 {
    be0c:	9803      	ldr	r0, [sp, #12]
    be0e:	7841      	ldrb	r1, [r0, #1]
        if self.update_left == 0 && self.update_right == 0 &&
    be10:	2900      	cmp	r1, #0
    be12:	d0f3      	beq.n	bdfc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0xe4>
    be14:	e7f6      	b.n	be04 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0xec>
    be16:	f89d 001a 	ldrb.w	r0, [sp, #26]
    be1a:	07c0      	lsls	r0, r0, #31
    be1c:	2800      	cmp	r0, #0
    be1e:	d1e2      	bne.n	bde6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0xce>
    be20:	e7dd      	b.n	bdde <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0xc6>
    be22:	2001      	movs	r0, #1
    be24:	f88d 001b 	strb.w	r0, [sp, #27]
    be28:	e008      	b.n	be3c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0x124>
    be2a:	2000      	movs	r0, #0
    be2c:	f88d 001b 	strb.w	r0, [sp, #27]
    be30:	e004      	b.n	be3c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0x124>
    be32:	9803      	ldr	r0, [sp, #12]
    be34:	7881      	ldrb	r1, [r0, #2]
    be36:	2900      	cmp	r1, #0
    be38:	d0f3      	beq.n	be22 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0x10a>
    be3a:	e7f6      	b.n	be2a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0x112>
    be3c:	f89d 001b 	ldrb.w	r0, [sp, #27]
    be40:	07c0      	lsls	r0, r0, #31
    be42:	2800      	cmp	r0, #0
    be44:	d1e2      	bne.n	be0c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0xf4>
    be46:	e7dd      	b.n	be04 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0xec>
            self.update_left = x as u8;
    be48:	9804      	ldr	r0, [sp, #16]
    be4a:	9903      	ldr	r1, [sp, #12]
    be4c:	7008      	strb	r0, [r1, #0]
            self.update_right = x as u8;
    be4e:	7088      	strb	r0, [r1, #2]
            self.update_top = y as u8;
    be50:	9a05      	ldr	r2, [sp, #20]
    be52:	704a      	strb	r2, [r1, #1]
            self.update_bottom = y as u8;
    be54:	70ca      	strb	r2, [r1, #3]
        if self.update_left == 0 && self.update_right == 0 &&
    be56:	e7ff      	b.n	be58 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0x140>
        }
        if (x as u8) < self.update_left { self.update_left = x as u8; }
    be58:	9804      	ldr	r0, [sp, #16]
    be5a:	b2c1      	uxtb	r1, r0
    be5c:	9a03      	ldr	r2, [sp, #12]
    be5e:	7813      	ldrb	r3, [r2, #0]
    be60:	4299      	cmp	r1, r3
    be62:	d204      	bcs.n	be6e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0x156>
    be64:	e7ff      	b.n	be66 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0x14e>
    be66:	9804      	ldr	r0, [sp, #16]
    be68:	9903      	ldr	r1, [sp, #12]
    be6a:	7008      	strb	r0, [r1, #0]
    be6c:	e7ff      	b.n	be6e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0x156>
        if (x as u8) > self.update_right { self.update_right = x as u8; }
    be6e:	9804      	ldr	r0, [sp, #16]
    be70:	b2c1      	uxtb	r1, r0
    be72:	9a03      	ldr	r2, [sp, #12]
    be74:	7893      	ldrb	r3, [r2, #2]
    be76:	4299      	cmp	r1, r3
    be78:	d904      	bls.n	be84 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0x16c>
    be7a:	e7ff      	b.n	be7c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0x164>
    be7c:	9804      	ldr	r0, [sp, #16]
    be7e:	9903      	ldr	r1, [sp, #12]
    be80:	7088      	strb	r0, [r1, #2]
    be82:	e7ff      	b.n	be84 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0x16c>
        if (y as u8) < self.update_top { self.update_top = y as u8; }
    be84:	9805      	ldr	r0, [sp, #20]
    be86:	b2c1      	uxtb	r1, r0
    be88:	9a03      	ldr	r2, [sp, #12]
    be8a:	7853      	ldrb	r3, [r2, #1]
    be8c:	4299      	cmp	r1, r3
    be8e:	d204      	bcs.n	be9a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0x182>
    be90:	e7ff      	b.n	be92 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0x17a>
    be92:	9805      	ldr	r0, [sp, #20]
    be94:	9903      	ldr	r1, [sp, #12]
    be96:	7048      	strb	r0, [r1, #1]
    be98:	e7ff      	b.n	be9a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0x182>
        if (y as u8) > self.update_bottom { self.update_bottom = y as u8; }
    be9a:	9805      	ldr	r0, [sp, #20]
    be9c:	b2c1      	uxtb	r1, r0
    be9e:	9a03      	ldr	r2, [sp, #12]
    bea0:	78d3      	ldrb	r3, [r2, #3]
    bea2:	4299      	cmp	r1, r3
    bea4:	d904      	bls.n	beb0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0x198>
    bea6:	e7ff      	b.n	bea8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0x190>
    bea8:	9805      	ldr	r0, [sp, #20]
    beaa:	9903      	ldr	r1, [sp, #12]
    beac:	70c8      	strb	r0, [r1, #3]
    beae:	e7ff      	b.n	beb0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E+0x198>
    }
    beb0:	b00c      	add	sp, #48	; 0x30
    beb2:	4770      	bx	lr
        let i = x + y * SCREEN_WIDTH;
    beb4:	f24f 4040 	movw	r0, #62528	; 0xf440
    beb8:	f2c0 0001 	movt	r0, #1
    bebc:	f24f 4224 	movw	r2, #62500	; 0xf424
    bec0:	f2c0 0201 	movt	r2, #1
    bec4:	2121      	movs	r1, #33	; 0x21
    bec6:	f00b fd4f 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    beca:	defe      	udf	#254	; 0xfe
    becc:	f24f 4080 	movw	r0, #62592	; 0xf480
    bed0:	f2c0 0001 	movt	r0, #1
    bed4:	f24f 4264 	movw	r2, #62564	; 0xf464
    bed8:	f2c0 0201 	movt	r2, #1
    bedc:	211c      	movs	r1, #28
    bede:	f00b fd43 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bee2:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] = if d { 255 } else { 127 } };
    bee4:	f24f 409c 	movw	r0, #62620	; 0xf49c
    bee8:	f2c0 0001 	movt	r0, #1
    beec:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bef0:	9900      	ldr	r1, [sp, #0]
    bef2:	f00b fd4f 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    bef6:	defe      	udf	#254	; 0xfe

0000bef8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h33ad85da805ec1e8E>:

    /// Get the current state of a pixel in the screen.
    fn vram_get(&mut self, x: usize, y: usize) -> bool {
    bef8:	b088      	sub	sp, #32
    befa:	9004      	str	r0, [sp, #16]
    befc:	9105      	str	r1, [sp, #20]
    befe:	9206      	str	r2, [sp, #24]
        //  console::print("get "); console::printint(x as i32); console::print(", "); console::printint(y as i32); console::print("\n"); console::flush(); ////
        assert!(x < SCREEN_WIDTH, "x overflow");
    bf00:	293f      	cmp	r1, #63	; 0x3f
    bf02:	9203      	str	r2, [sp, #12]
    bf04:	9102      	str	r1, [sp, #8]
    bf06:	d804      	bhi.n	bf12 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h33ad85da805ec1e8E+0x1a>
    bf08:	e7ff      	b.n	bf0a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h33ad85da805ec1e8E+0x12>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    bf0a:	9803      	ldr	r0, [sp, #12]
    bf0c:	281f      	cmp	r0, #31
    bf0e:	d813      	bhi.n	bf38 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h33ad85da805ec1e8E+0x40>
    bf10:	e00b      	b.n	bf2a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h33ad85da805ec1e8E+0x32>
        assert!(x < SCREEN_WIDTH, "x overflow");
    bf12:	f24f 30ec 	movw	r0, #62444	; 0xf3ec
    bf16:	f2c0 0001 	movt	r0, #1
    bf1a:	f24f 42ac 	movw	r2, #62636	; 0xf4ac
    bf1e:	f2c0 0201 	movt	r2, #1
    bf22:	210a      	movs	r1, #10
    bf24:	f00b fd20 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bf28:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    bf2a:	9803      	ldr	r0, [sp, #12]
    bf2c:	0181      	lsls	r1, r0, #6
    bf2e:	0e82      	lsrs	r2, r0, #26
    bf30:	2a00      	cmp	r2, #0
    bf32:	9101      	str	r1, [sp, #4]
    bf34:	d128      	bne.n	bf88 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h33ad85da805ec1e8E+0x90>
    bf36:	e00b      	b.n	bf50 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h33ad85da805ec1e8E+0x58>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    bf38:	f24f 4008 	movw	r0, #62472	; 0xf408
    bf3c:	f2c0 0001 	movt	r0, #1
    bf40:	f24f 42bc 	movw	r2, #62652	; 0xf4bc
    bf44:	f2c0 0201 	movt	r2, #1
    bf48:	210a      	movs	r1, #10
    bf4a:	f00b fd0d 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bf4e:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    bf50:	9802      	ldr	r0, [sp, #8]
    bf52:	9901      	ldr	r1, [sp, #4]
    bf54:	1842      	adds	r2, r0, r1
    bf56:	4613      	mov	r3, r2
    bf58:	4282      	cmp	r2, r0
    bf5a:	9300      	str	r3, [sp, #0]
    bf5c:	d320      	bcc.n	bfa0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h33ad85da805ec1e8E+0xa8>
    bf5e:	e7ff      	b.n	bf60 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h33ad85da805ec1e8E+0x68>
    bf60:	9800      	ldr	r0, [sp, #0]
    bf62:	9007      	str	r0, [sp, #28]
    bf64:	2100      	movs	r1, #0
        unsafe { SCREEN_BUFFER[i] >= 128 }
    bf66:	ebb1 2fd0 	cmp.w	r1, r0, lsr #11
    bf6a:	d125      	bne.n	bfb8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h33ad85da805ec1e8E+0xc0>
    bf6c:	e7ff      	b.n	bf6e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h33ad85da805ec1e8E+0x76>
    bf6e:	f244 2068 	movw	r0, #17000	; 0x4268
    bf72:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bf76:	9900      	ldr	r1, [sp, #0]
    bf78:	5640      	ldrsb	r0, [r0, r1]
    bf7a:	2200      	movs	r2, #0
    bf7c:	2800      	cmp	r0, #0
    bf7e:	bf48      	it	mi
    bf80:	2201      	movmi	r2, #1
    }
    bf82:	4610      	mov	r0, r2
    bf84:	b008      	add	sp, #32
    bf86:	4770      	bx	lr
        let i = x + y * SCREEN_WIDTH;
    bf88:	f24f 4040 	movw	r0, #62528	; 0xf440
    bf8c:	f2c0 0001 	movt	r0, #1
    bf90:	f24f 42cc 	movw	r2, #62668	; 0xf4cc
    bf94:	f2c0 0201 	movt	r2, #1
    bf98:	2121      	movs	r1, #33	; 0x21
    bf9a:	f00b fce5 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bf9e:	defe      	udf	#254	; 0xfe
    bfa0:	f24f 4080 	movw	r0, #62592	; 0xf480
    bfa4:	f2c0 0001 	movt	r0, #1
    bfa8:	f24f 42dc 	movw	r2, #62684	; 0xf4dc
    bfac:	f2c0 0201 	movt	r2, #1
    bfb0:	211c      	movs	r1, #28
    bfb2:	f00b fcd9 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bfb6:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] >= 128 }
    bfb8:	f24f 40ec 	movw	r0, #62700	; 0xf4ec
    bfbc:	f2c0 0001 	movt	r0, #1
    bfc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bfc4:	9900      	ldr	r1, [sp, #0]
    bfc6:	f00b fce5 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    bfca:	defe      	udf	#254	; 0xfe

0000bfcc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h1c8b4e1e237b1d09E>:

    /// Set the size of the screen.
    fn vram_setsize(&mut self, size: (usize, usize)) {
    bfcc:	b580      	push	{r7, lr}
    bfce:	b086      	sub	sp, #24
    bfd0:	9003      	str	r0, [sp, #12]
    bfd2:	9104      	str	r1, [sp, #16]
    bfd4:	9205      	str	r2, [sp, #20]
        //  Do nothing. We assume SCREEN_WIDTH and SCREEN_HEIGHT.
        assert!(size.0 == SCREEN_WIDTH && size.1 == SCREEN_HEIGHT, "bad size");
    bfd6:	2940      	cmp	r1, #64	; 0x40
    bfd8:	9201      	str	r2, [sp, #4]
    bfda:	9100      	str	r1, [sp, #0]
    bfdc:	d008      	beq.n	bff0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h1c8b4e1e237b1d09E+0x24>
    bfde:	e003      	b.n	bfe8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h1c8b4e1e237b1d09E+0x1c>
    bfe0:	2001      	movs	r0, #1
    bfe2:	f88d 000b 	strb.w	r0, [sp, #11]
    bfe6:	e007      	b.n	bff8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h1c8b4e1e237b1d09E+0x2c>
    bfe8:	2000      	movs	r0, #0
    bfea:	f88d 000b 	strb.w	r0, [sp, #11]
    bfee:	e003      	b.n	bff8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h1c8b4e1e237b1d09E+0x2c>
    bff0:	9801      	ldr	r0, [sp, #4]
    bff2:	2820      	cmp	r0, #32
    bff4:	d0f4      	beq.n	bfe0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h1c8b4e1e237b1d09E+0x14>
    bff6:	e7f7      	b.n	bfe8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h1c8b4e1e237b1d09E+0x1c>
    bff8:	f89d 000b 	ldrb.w	r0, [sp, #11]
    bffc:	07c0      	lsls	r0, r0, #31
    bffe:	2800      	cmp	r0, #0
    c000:	d008      	beq.n	c014 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h1c8b4e1e237b1d09E+0x48>
    c002:	e7ff      	b.n	c004 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h1c8b4e1e237b1d09E+0x38>
        console::print("setsize "); console::printint(size.0 as i32); console::print(", "); console::printint(size.1 as i32); console::print("\n"); console::flush(); ////
    c004:	f24f 5004 	movw	r0, #62724	; 0xf504
    c008:	f2c0 0001 	movt	r0, #1
    c00c:	2108      	movs	r1, #8
    c00e:	f7fc ffef 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    c012:	e00b      	b.n	c02c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h1c8b4e1e237b1d09E+0x60>
        assert!(size.0 == SCREEN_WIDTH && size.1 == SCREEN_HEIGHT, "bad size");
    c014:	f24f 40fc 	movw	r0, #62716	; 0xf4fc
    c018:	f2c0 0001 	movt	r0, #1
    c01c:	f24f 5224 	movw	r2, #62756	; 0xf524
    c020:	f2c0 0201 	movt	r2, #1
    c024:	2108      	movs	r1, #8
    c026:	f00b fc9f 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c02a:	defe      	udf	#254	; 0xfe
        console::print("setsize "); console::printint(size.0 as i32); console::print(", "); console::printint(size.1 as i32); console::print("\n"); console::flush(); ////
    c02c:	9800      	ldr	r0, [sp, #0]
    c02e:	f7fd f81d 	bl	906c <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    c032:	e7ff      	b.n	c034 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h1c8b4e1e237b1d09E+0x68>
    c034:	f24f 5034 	movw	r0, #62772	; 0xf534
    c038:	f2c0 0001 	movt	r0, #1
    c03c:	2102      	movs	r1, #2
    c03e:	f7fc ffd7 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    c042:	e7ff      	b.n	c044 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h1c8b4e1e237b1d09E+0x78>
    c044:	9801      	ldr	r0, [sp, #4]
    c046:	f7fd f811 	bl	906c <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    c04a:	e7ff      	b.n	c04c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h1c8b4e1e237b1d09E+0x80>
    c04c:	f24f 5036 	movw	r0, #62774	; 0xf536
    c050:	f2c0 0001 	movt	r0, #1
    c054:	2101      	movs	r1, #1
    c056:	f7fc ffcb 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    c05a:	e7ff      	b.n	c05c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h1c8b4e1e237b1d09E+0x90>
    c05c:	f7fd f80e 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    c060:	e7ff      	b.n	c062 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h1c8b4e1e237b1d09E+0x96>
    }
    c062:	b006      	add	sp, #24
    c064:	bd80      	pop	{r7, pc}

0000c066 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hb385dfaf23157db8E>:

    /// Get the size of the screen.
    fn vram_size(&mut self) -> (usize, usize) {
    c066:	b083      	sub	sp, #12
    c068:	9002      	str	r0, [sp, #8]
    c06a:	2040      	movs	r0, #64	; 0x40
        (SCREEN_WIDTH, SCREEN_HEIGHT)
    c06c:	9000      	str	r0, [sp, #0]
    c06e:	2020      	movs	r0, #32
    c070:	9001      	str	r0, [sp, #4]
    }
    c072:	9800      	ldr	r0, [sp, #0]
    c074:	9901      	ldr	r1, [sp, #4]
    c076:	b003      	add	sp, #12
    c078:	4770      	bx	lr

0000c07a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hdb648e920abc572eE>:

    /// Return the current clock value in nanoseconds.
    fn clock(&mut self) -> u64 {
    c07a:	b5b0      	push	{r4, r5, r7, lr}
    c07c:	b086      	sub	sp, #24
    c07e:	9005      	str	r0, [sp, #20]
        unsafe { os::os_time_get() as u64 * 1000_u64 * 2000_u64 }
    c080:	f00f fdd8 	bl	1bc34 <os_time_get>
    c084:	9004      	str	r0, [sp, #16]
    c086:	e7ff      	b.n	c088 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hdb648e920abc572eE+0xe>
    c088:	2000      	movs	r0, #0
    c08a:	9904      	ldr	r1, [sp, #16]
    c08c:	fba0 2301 	umull	r2, r3, r0, r1
    c090:	2b00      	cmp	r3, #0
    c092:	bf18      	it	ne
    c094:	2301      	movne	r3, #1
    c096:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    c09a:	fba0 e40c 	umull	lr, r4, r0, ip
    c09e:	2c00      	cmp	r4, #0
    c0a0:	bf18      	it	ne
    c0a2:	2401      	movne	r4, #1
    c0a4:	ea43 0304 	orr.w	r3, r3, r4
    c0a8:	4472      	add	r2, lr
    c0aa:	fba1 ce0c 	umull	ip, lr, r1, ip
    c0ae:	eb12 020e 	adds.w	r2, r2, lr
    c0b2:	f140 0000 	adc.w	r0, r0, #0
    c0b6:	ea40 0003 	orr.w	r0, r0, r3
    c0ba:	2800      	cmp	r0, #0
    c0bc:	f8cd c00c 	str.w	ip, [sp, #12]
    c0c0:	9202      	str	r2, [sp, #8]
    c0c2:	d124      	bne.n	c10e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hdb648e920abc572eE+0x94>
    c0c4:	e7ff      	b.n	c0c6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hdb648e920abc572eE+0x4c>
    c0c6:	2000      	movs	r0, #0
    c0c8:	9903      	ldr	r1, [sp, #12]
    c0ca:	fba0 2301 	umull	r2, r3, r0, r1
    c0ce:	2b00      	cmp	r3, #0
    c0d0:	bf18      	it	ne
    c0d2:	2301      	movne	r3, #1
    c0d4:	f44f 6cfa 	mov.w	ip, #2000	; 0x7d0
    c0d8:	f8dd e008 	ldr.w	lr, [sp, #8]
    c0dc:	fbae 450c 	umull	r4, r5, lr, ip
    c0e0:	2d00      	cmp	r5, #0
    c0e2:	bf18      	it	ne
    c0e4:	2501      	movne	r5, #1
    c0e6:	ea43 0305 	orr.w	r3, r3, r5
    c0ea:	4422      	add	r2, r4
    c0ec:	fba1 c40c 	umull	ip, r4, r1, ip
    c0f0:	1912      	adds	r2, r2, r4
    c0f2:	f140 0000 	adc.w	r0, r0, #0
    c0f6:	ea40 0003 	orr.w	r0, r0, r3
    c0fa:	2800      	cmp	r0, #0
    c0fc:	f8cd c004 	str.w	ip, [sp, #4]
    c100:	9200      	str	r2, [sp, #0]
    c102:	d110      	bne.n	c126 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hdb648e920abc572eE+0xac>
    c104:	e7ff      	b.n	c106 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hdb648e920abc572eE+0x8c>
    }
    c106:	9801      	ldr	r0, [sp, #4]
    c108:	9900      	ldr	r1, [sp, #0]
    c10a:	b006      	add	sp, #24
    c10c:	bdb0      	pop	{r4, r5, r7, pc}
        unsafe { os::os_time_get() as u64 * 1000_u64 * 2000_u64 }
    c10e:	f24f 4040 	movw	r0, #62528	; 0xf440
    c112:	f2c0 0001 	movt	r0, #1
    c116:	f24f 5238 	movw	r2, #62776	; 0xf538
    c11a:	f2c0 0201 	movt	r2, #1
    c11e:	2121      	movs	r1, #33	; 0x21
    c120:	f00b fc22 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c124:	defe      	udf	#254	; 0xfe
    c126:	f24f 4040 	movw	r0, #62528	; 0xf440
    c12a:	f2c0 0001 	movt	r0, #1
    c12e:	f24f 5238 	movw	r2, #62776	; 0xf538
    c132:	f2c0 0201 	movt	r2, #1
    c136:	2121      	movs	r1, #33	; 0x21
    c138:	f00b fc16 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c13c:	defe      	udf	#254	; 0xfe

0000c13e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17h886985941255a300E>:

    /// Play beep sound.
    fn beep(&mut self) {
    c13e:	b081      	sub	sp, #4
    c140:	9000      	str	r0, [sp, #0]
        //  TODO: Vibrate? Flash?
    }
    c142:	b001      	add	sp, #4
    c144:	4770      	bx	lr

0000c146 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h78119e4c51f6e604E>:

    /// Called in every step; return true for shutdown.
    fn sched(&mut self) -> bool {
    c146:	b580      	push	{r7, lr}
    c148:	b084      	sub	sp, #16
    c14a:	9003      	str	r0, [sp, #12]
        //  console::print("sched\n"); console::flush(); ////

        //  Tickle the watchdog so that the Watchdog Timer doesn't expire. Mynewt assumes the process is hung if we don't tickle the watchdog.
        unsafe { hal_watchdog_tickle() };
    c14c:	9001      	str	r0, [sp, #4]
    c14e:	f00e fb49 	bl	1a7e4 <hal_watchdog_tickle>
    c152:	e7ff      	b.n	c154 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h78119e4c51f6e604E+0xe>
    c154:	2001      	movs	r0, #1

        //  Sleep a while to allow other tasks to run, e.g. SPI background task
        unsafe { os::os_time_delay(1) };
    c156:	f00f fd93 	bl	1bc80 <os_time_delay>
    c15a:	e7ff      	b.n	c15c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h78119e4c51f6e604E+0x16>

        //  If no screen update, return
        if self.update_left == 0 && self.update_right == 0 &&
    c15c:	9801      	ldr	r0, [sp, #4]
    c15e:	7801      	ldrb	r1, [r0, #0]
    c160:	2900      	cmp	r1, #0
    c162:	d02e      	beq.n	c1c2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h78119e4c51f6e604E+0x7c>
    c164:	e029      	b.n	c1ba <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h78119e4c51f6e604E+0x74>
    c166:	2001      	movs	r0, #1
    c168:	f88d 0009 	strb.w	r0, [sp, #9]
    c16c:	e008      	b.n	c180 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h78119e4c51f6e604E+0x3a>
    c16e:	2000      	movs	r0, #0
    c170:	f88d 0009 	strb.w	r0, [sp, #9]
    c174:	e004      	b.n	c180 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h78119e4c51f6e604E+0x3a>
            self.update_top == 0 && self.update_bottom == 0 { return false; }
    c176:	9801      	ldr	r0, [sp, #4]
    c178:	78c1      	ldrb	r1, [r0, #3]
        if self.update_left == 0 && self.update_right == 0 &&
    c17a:	2900      	cmp	r1, #0
    c17c:	d0f3      	beq.n	c166 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h78119e4c51f6e604E+0x20>
    c17e:	e7f6      	b.n	c16e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h78119e4c51f6e604E+0x28>
    c180:	f89d 0009 	ldrb.w	r0, [sp, #9]
    c184:	07c0      	lsls	r0, r0, #31
    c186:	2800      	cmp	r0, #0
    c188:	d131      	bne.n	c1ee <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h78119e4c51f6e604E+0xa8>
    c18a:	e025      	b.n	c1d8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h78119e4c51f6e604E+0x92>
    c18c:	2001      	movs	r0, #1
    c18e:	f88d 000a 	strb.w	r0, [sp, #10]
    c192:	e008      	b.n	c1a6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h78119e4c51f6e604E+0x60>
    c194:	2000      	movs	r0, #0
    c196:	f88d 000a 	strb.w	r0, [sp, #10]
    c19a:	e004      	b.n	c1a6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h78119e4c51f6e604E+0x60>
            self.update_top == 0 && self.update_bottom == 0 { return false; }
    c19c:	9801      	ldr	r0, [sp, #4]
    c19e:	7841      	ldrb	r1, [r0, #1]
        if self.update_left == 0 && self.update_right == 0 &&
    c1a0:	2900      	cmp	r1, #0
    c1a2:	d0f3      	beq.n	c18c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h78119e4c51f6e604E+0x46>
    c1a4:	e7f6      	b.n	c194 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h78119e4c51f6e604E+0x4e>
    c1a6:	f89d 000a 	ldrb.w	r0, [sp, #10]
    c1aa:	07c0      	lsls	r0, r0, #31
    c1ac:	2800      	cmp	r0, #0
    c1ae:	d1e2      	bne.n	c176 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h78119e4c51f6e604E+0x30>
    c1b0:	e7dd      	b.n	c16e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h78119e4c51f6e604E+0x28>
    c1b2:	2001      	movs	r0, #1
    c1b4:	f88d 000b 	strb.w	r0, [sp, #11]
    c1b8:	e008      	b.n	c1cc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h78119e4c51f6e604E+0x86>
    c1ba:	2000      	movs	r0, #0
    c1bc:	f88d 000b 	strb.w	r0, [sp, #11]
    c1c0:	e004      	b.n	c1cc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h78119e4c51f6e604E+0x86>
    c1c2:	9801      	ldr	r0, [sp, #4]
    c1c4:	7881      	ldrb	r1, [r0, #2]
    c1c6:	2900      	cmp	r1, #0
    c1c8:	d0f3      	beq.n	c1b2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h78119e4c51f6e604E+0x6c>
    c1ca:	e7f6      	b.n	c1ba <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h78119e4c51f6e604E+0x74>
    c1cc:	f89d 000b 	ldrb.w	r0, [sp, #11]
    c1d0:	07c0      	lsls	r0, r0, #31
    c1d2:	2800      	cmp	r0, #0
    c1d4:	d1e2      	bne.n	c19c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h78119e4c51f6e604E+0x56>
    c1d6:	e7dd      	b.n	c194 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h78119e4c51f6e604E+0x4e>

        //  Render the updated region
        render_region(
    c1d8:	9801      	ldr	r0, [sp, #4]
    c1da:	7800      	ldrb	r0, [r0, #0]
    c1dc:	9901      	ldr	r1, [sp, #4]
    c1de:	7849      	ldrb	r1, [r1, #1]
    c1e0:	9a01      	ldr	r2, [sp, #4]
    c1e2:	7892      	ldrb	r2, [r2, #2]
    c1e4:	9b01      	ldr	r3, [sp, #4]
    c1e6:	78db      	ldrb	r3, [r3, #3]
    c1e8:	f000 f812 	bl	c210 <_ZN3app5chip813render_region17h63a2f42595e40485E>
    c1ec:	e007      	b.n	c1fe <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h78119e4c51f6e604E+0xb8>
    c1ee:	2000      	movs	r0, #0
            self.update_top == 0 && self.update_bottom == 0 { return false; }
    c1f0:	f88d 0008 	strb.w	r0, [sp, #8]
    c1f4:	e7ff      	b.n	c1f6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h78119e4c51f6e604E+0xb0>
        self.update_right = 0;
        self.update_bottom = 0;

        //  Return false to indicate no shutdown
        false
    }
    c1f6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    c1fa:	b004      	add	sp, #16
    c1fc:	bd80      	pop	{r7, pc}
    c1fe:	2000      	movs	r0, #0
        self.update_left = 0;
    c200:	9901      	ldr	r1, [sp, #4]
    c202:	7008      	strb	r0, [r1, #0]
        self.update_top = 0;
    c204:	7048      	strb	r0, [r1, #1]
        self.update_right = 0;
    c206:	7088      	strb	r0, [r1, #2]
        self.update_bottom = 0;
    c208:	70c8      	strb	r0, [r1, #3]
        false
    c20a:	f88d 0008 	strb.w	r0, [sp, #8]
    }
    c20e:	e7f2      	b.n	c1f6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h78119e4c51f6e604E+0xb0>

0000c210 <_ZN3app5chip813render_region17h63a2f42595e40485E>:
}

/// Render the Virtual Screen region
fn render_region(left: u8, top: u8, right: u8, bottom: u8) {
    c210:	b5f0      	push	{r4, r5, r6, r7, lr}
    c212:	b095      	sub	sp, #84	; 0x54
    c214:	fa5f fc80 	uxtb.w	ip, r0
    c218:	fa5f fe82 	uxtb.w	lr, r2
    c21c:	461c      	mov	r4, r3
    c21e:	4615      	mov	r5, r2
    c220:	460e      	mov	r6, r1
    c222:	4607      	mov	r7, r0
    c224:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    c228:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    c22c:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
    c230:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    let width = right - left + 1;
    c234:	ebae 000c 	sub.w	r0, lr, ip
    c238:	b2c1      	uxtb	r1, r0
    c23a:	4602      	mov	r2, r0
    c23c:	4281      	cmp	r1, r0
    c23e:	9411      	str	r4, [sp, #68]	; 0x44
    c240:	9510      	str	r5, [sp, #64]	; 0x40
    c242:	960f      	str	r6, [sp, #60]	; 0x3c
    c244:	970e      	str	r7, [sp, #56]	; 0x38
    c246:	920d      	str	r2, [sp, #52]	; 0x34
    c248:	f040 80df 	bne.w	c40a <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1fa>
    c24c:	e7ff      	b.n	c24e <_ZN3app5chip813render_region17h63a2f42595e40485E+0x3e>
    c24e:	2001      	movs	r0, #1
    c250:	990d      	ldr	r1, [sp, #52]	; 0x34
    c252:	fa50 f081 	uxtab	r0, r0, r1
    c256:	b2c2      	uxtb	r2, r0
    c258:	4603      	mov	r3, r0
    c25a:	4282      	cmp	r2, r0
    c25c:	930c      	str	r3, [sp, #48]	; 0x30
    c25e:	f040 80e0 	bne.w	c422 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x212>
    c262:	e7ff      	b.n	c264 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x54>
    c264:	980c      	ldr	r0, [sp, #48]	; 0x30
    c266:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    let height = bottom - top + 1;
    c26a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c26c:	b2ca      	uxtb	r2, r1
    c26e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c270:	fa5f fc83 	uxtb.w	ip, r3
    c274:	ebac 0202 	sub.w	r2, ip, r2
    c278:	fa5f fc82 	uxtb.w	ip, r2
    c27c:	4696      	mov	lr, r2
    c27e:	4594      	cmp	ip, r2
    c280:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    c284:	f040 80d9 	bne.w	c43a <_ZN3app5chip813render_region17h63a2f42595e40485E+0x22a>
    c288:	e7ff      	b.n	c28a <_ZN3app5chip813render_region17h63a2f42595e40485E+0x7a>
    c28a:	2001      	movs	r0, #1
    c28c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c28e:	fa50 f081 	uxtab	r0, r0, r1
    c292:	b2c2      	uxtb	r2, r0
    c294:	4603      	mov	r3, r0
    c296:	4282      	cmp	r2, r0
    c298:	930a      	str	r3, [sp, #40]	; 0x28
    c29a:	f040 80da 	bne.w	c452 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x242>
    c29e:	e7ff      	b.n	c2a0 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x90>
    c2a0:	980a      	ldr	r0, [sp, #40]	; 0x28
    c2a2:	f88d 0051 	strb.w	r0, [sp, #81]	; 0x51
    //  If the update region is small, render with a single block
    if width + height <= BLOCK_WIDTH as u8 + BLOCK_HEIGHT as u8 {  //  Will not overflow SPI buffer
    c2a6:	990c      	ldr	r1, [sp, #48]	; 0x30
    c2a8:	b2ca      	uxtb	r2, r1
    c2aa:	fa52 f280 	uxtab	r2, r2, r0
    c2ae:	b2d3      	uxtb	r3, r2
    c2b0:	4694      	mov	ip, r2
    c2b2:	4293      	cmp	r3, r2
    c2b4:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    c2b8:	f040 80d7 	bne.w	c46a <_ZN3app5chip813render_region17h63a2f42595e40485E+0x25a>
    c2bc:	e7ff      	b.n	c2be <_ZN3app5chip813render_region17h63a2f42595e40485E+0xae>
    c2be:	9809      	ldr	r0, [sp, #36]	; 0x24
    c2c0:	b2c1      	uxtb	r1, r0
    c2c2:	2926      	cmp	r1, #38	; 0x26
    c2c4:	d307      	bcc.n	c2d6 <_ZN3app5chip813render_region17h63a2f42595e40485E+0xc6>
    c2c6:	e7ff      	b.n	c2c8 <_ZN3app5chip813render_region17h63a2f42595e40485E+0xb8>
        render_block(left, top, right, bottom);
    } else {
        //  If the update region is too big for a single block, break the region into blocks and render
        let mut x = left;
    c2c8:	980e      	ldr	r0, [sp, #56]	; 0x38
    c2ca:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
        let mut y = top;
    c2ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c2d0:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
        loop {
    c2d4:	e007      	b.n	c2e6 <_ZN3app5chip813render_region17h63a2f42595e40485E+0xd6>
        render_block(left, top, right, bottom);
    c2d6:	980e      	ldr	r0, [sp, #56]	; 0x38
    c2d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c2da:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c2dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c2de:	f000 f918 	bl	c512 <_ZN3app5chip812render_block17hf14dcded684223a2E>
    c2e2:	e7ff      	b.n	c2e4 <_ZN3app5chip813render_region17h63a2f42595e40485E+0xd4>
    if width + height <= BLOCK_WIDTH as u8 + BLOCK_HEIGHT as u8 {  //  Will not overflow SPI buffer
    c2e4:	e08f      	b.n	c406 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1f6>
            let block_right = x + BLOCK_WIDTH as u8 - 1;
    c2e6:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
    c2ea:	3020      	adds	r0, #32
    c2ec:	b2c1      	uxtb	r1, r0
    c2ee:	4602      	mov	r2, r0
    c2f0:	4281      	cmp	r1, r0
    c2f2:	9208      	str	r2, [sp, #32]
    c2f4:	f040 80c5 	bne.w	c482 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x272>
    c2f8:	e7ff      	b.n	c2fa <_ZN3app5chip813render_region17h63a2f42595e40485E+0xea>
    c2fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c2fe:	9908      	ldr	r1, [sp, #32]
    c300:	fa50 f081 	uxtab	r0, r0, r1
    c304:	b2c2      	uxtb	r2, r0
    c306:	4603      	mov	r3, r0
    c308:	4282      	cmp	r2, r0
    c30a:	9307      	str	r3, [sp, #28]
    c30c:	f040 80c5 	bne.w	c49a <_ZN3app5chip813render_region17h63a2f42595e40485E+0x28a>
    c310:	e7ff      	b.n	c312 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x102>
    c312:	9807      	ldr	r0, [sp, #28]
    c314:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
            let block_bottom = y + BLOCK_HEIGHT as u8 - 1;
    c318:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
    c31c:	3105      	adds	r1, #5
    c31e:	b2ca      	uxtb	r2, r1
    c320:	460b      	mov	r3, r1
    c322:	428a      	cmp	r2, r1
    c324:	9306      	str	r3, [sp, #24]
    c326:	f040 80c4 	bne.w	c4b2 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x2a2>
    c32a:	e7ff      	b.n	c32c <_ZN3app5chip813render_region17h63a2f42595e40485E+0x11c>
    c32c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c330:	9906      	ldr	r1, [sp, #24]
    c332:	fa50 f081 	uxtab	r0, r0, r1
    c336:	b2c2      	uxtb	r2, r0
    c338:	4603      	mov	r3, r0
    c33a:	4282      	cmp	r2, r0
    c33c:	9305      	str	r3, [sp, #20]
    c33e:	f040 80c4 	bne.w	c4ca <_ZN3app5chip813render_region17h63a2f42595e40485E+0x2ba>
    c342:	e7ff      	b.n	c344 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x134>
    c344:	9805      	ldr	r0, [sp, #20]
    c346:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
            render_block(x, y,
    c34a:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
    c34e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
                if block_right  <= right  { block_right }  else { right },
    c352:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c354:	fa5f fc83 	uxtb.w	ip, r3
    c358:	f8dd e01c 	ldr.w	lr, [sp, #28]
    c35c:	fa5f f48e 	uxtb.w	r4, lr
    c360:	4564      	cmp	r4, ip
    c362:	9104      	str	r1, [sp, #16]
    c364:	9203      	str	r2, [sp, #12]
    c366:	d904      	bls.n	c372 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x162>
    c368:	e7ff      	b.n	c36a <_ZN3app5chip813render_region17h63a2f42595e40485E+0x15a>
    c36a:	9810      	ldr	r0, [sp, #64]	; 0x40
    c36c:	f88d 004a 	strb.w	r0, [sp, #74]	; 0x4a
    c370:	e003      	b.n	c37a <_ZN3app5chip813render_region17h63a2f42595e40485E+0x16a>
    c372:	9807      	ldr	r0, [sp, #28]
    c374:	f88d 004a 	strb.w	r0, [sp, #74]	; 0x4a
    c378:	e7ff      	b.n	c37a <_ZN3app5chip813render_region17h63a2f42595e40485E+0x16a>
                if block_bottom <= bottom { block_bottom } else { bottom }
    c37a:	9811      	ldr	r0, [sp, #68]	; 0x44
    c37c:	b2c1      	uxtb	r1, r0
    c37e:	9a05      	ldr	r2, [sp, #20]
    c380:	b2d3      	uxtb	r3, r2
    c382:	428b      	cmp	r3, r1
    c384:	d904      	bls.n	c390 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x180>
    c386:	e7ff      	b.n	c388 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x178>
    c388:	9811      	ldr	r0, [sp, #68]	; 0x44
    c38a:	f88d 004b 	strb.w	r0, [sp, #75]	; 0x4b
    c38e:	e003      	b.n	c398 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x188>
    c390:	9805      	ldr	r0, [sp, #20]
    c392:	f88d 004b 	strb.w	r0, [sp, #75]	; 0x4b
    c396:	e7ff      	b.n	c398 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x188>
            render_block(x, y,
    c398:	f89d 304b 	ldrb.w	r3, [sp, #75]	; 0x4b
    c39c:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    c3a0:	9804      	ldr	r0, [sp, #16]
    c3a2:	9903      	ldr	r1, [sp, #12]
    c3a4:	f000 f8b5 	bl	c512 <_ZN3app5chip812render_block17hf14dcded684223a2E>
    c3a8:	e7ff      	b.n	c3aa <_ZN3app5chip813render_region17h63a2f42595e40485E+0x19a>
            );  //  Will not overflow SPI buffer
            x += BLOCK_WIDTH as u8;
    c3aa:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
    c3ae:	3020      	adds	r0, #32
    c3b0:	b2c1      	uxtb	r1, r0
    c3b2:	4602      	mov	r2, r0
    c3b4:	4281      	cmp	r1, r0
    c3b6:	9202      	str	r2, [sp, #8]
    c3b8:	f040 8093 	bne.w	c4e2 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x2d2>
    c3bc:	e7ff      	b.n	c3be <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1ae>
    c3be:	9802      	ldr	r0, [sp, #8]
    c3c0:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
            if x > right {
    c3c4:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
    c3c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c3ca:	b2d3      	uxtb	r3, r2
    c3cc:	4299      	cmp	r1, r3
    c3ce:	d919      	bls.n	c404 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1f4>
    c3d0:	e7ff      	b.n	c3d2 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1c2>
                x = left;
    c3d2:	980e      	ldr	r0, [sp, #56]	; 0x38
    c3d4:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
                y += BLOCK_HEIGHT as u8;
    c3d8:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
    c3dc:	3105      	adds	r1, #5
    c3de:	b2ca      	uxtb	r2, r1
    c3e0:	460b      	mov	r3, r1
    c3e2:	428a      	cmp	r2, r1
    c3e4:	9301      	str	r3, [sp, #4]
    c3e6:	f040 8088 	bne.w	c4fa <_ZN3app5chip813render_region17h63a2f42595e40485E+0x2ea>
    c3ea:	e7ff      	b.n	c3ec <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1dc>
    c3ec:	9801      	ldr	r0, [sp, #4]
    c3ee:	f88d 0049 	strb.w	r0, [sp, #73]	; 0x49
                if y > bottom { break; }
    c3f2:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
    c3f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    c3f8:	b2d3      	uxtb	r3, r2
    c3fa:	4299      	cmp	r1, r3
    c3fc:	d801      	bhi.n	c402 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1f2>
    c3fe:	e7ff      	b.n	c400 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1f0>
            if x > right {
    c400:	e000      	b.n	c404 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1f4>
    if width + height <= BLOCK_WIDTH as u8 + BLOCK_HEIGHT as u8 {  //  Will not overflow SPI buffer
    c402:	e000      	b.n	c406 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1f6>
        loop {
    c404:	e76f      	b.n	c2e6 <_ZN3app5chip813render_region17h63a2f42595e40485E+0xd6>
            }
        }
    }
}
    c406:	b015      	add	sp, #84	; 0x54
    c408:	bdf0      	pop	{r4, r5, r6, r7, pc}
    let width = right - left + 1;
    c40a:	f24f 5060 	movw	r0, #62816	; 0xf560
    c40e:	f2c0 0001 	movt	r0, #1
    c412:	f24f 5248 	movw	r2, #62792	; 0xf548
    c416:	f2c0 0201 	movt	r2, #1
    c41a:	2121      	movs	r1, #33	; 0x21
    c41c:	f00b faa4 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c420:	defe      	udf	#254	; 0xfe
    c422:	f24f 4080 	movw	r0, #62592	; 0xf480
    c426:	f2c0 0001 	movt	r0, #1
    c42a:	f24f 5248 	movw	r2, #62792	; 0xf548
    c42e:	f2c0 0201 	movt	r2, #1
    c432:	211c      	movs	r1, #28
    c434:	f00b fa98 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c438:	defe      	udf	#254	; 0xfe
    let height = bottom - top + 1;
    c43a:	f24f 5060 	movw	r0, #62816	; 0xf560
    c43e:	f2c0 0001 	movt	r0, #1
    c442:	f24f 5284 	movw	r2, #62852	; 0xf584
    c446:	f2c0 0201 	movt	r2, #1
    c44a:	2121      	movs	r1, #33	; 0x21
    c44c:	f00b fa8c 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c450:	defe      	udf	#254	; 0xfe
    c452:	f24f 4080 	movw	r0, #62592	; 0xf480
    c456:	f2c0 0001 	movt	r0, #1
    c45a:	f24f 5284 	movw	r2, #62852	; 0xf584
    c45e:	f2c0 0201 	movt	r2, #1
    c462:	211c      	movs	r1, #28
    c464:	f00b fa80 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c468:	defe      	udf	#254	; 0xfe
    if width + height <= BLOCK_WIDTH as u8 + BLOCK_HEIGHT as u8 {  //  Will not overflow SPI buffer
    c46a:	f24f 4080 	movw	r0, #62592	; 0xf480
    c46e:	f2c0 0001 	movt	r0, #1
    c472:	f24f 5294 	movw	r2, #62868	; 0xf594
    c476:	f2c0 0201 	movt	r2, #1
    c47a:	211c      	movs	r1, #28
    c47c:	f00b fa74 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c480:	defe      	udf	#254	; 0xfe
            let block_right = x + BLOCK_WIDTH as u8 - 1;
    c482:	f24f 4080 	movw	r0, #62592	; 0xf480
    c486:	f2c0 0001 	movt	r0, #1
    c48a:	f24f 52a4 	movw	r2, #62884	; 0xf5a4
    c48e:	f2c0 0201 	movt	r2, #1
    c492:	211c      	movs	r1, #28
    c494:	f00b fa68 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c498:	defe      	udf	#254	; 0xfe
    c49a:	f24f 5060 	movw	r0, #62816	; 0xf560
    c49e:	f2c0 0001 	movt	r0, #1
    c4a2:	f24f 52a4 	movw	r2, #62884	; 0xf5a4
    c4a6:	f2c0 0201 	movt	r2, #1
    c4aa:	2121      	movs	r1, #33	; 0x21
    c4ac:	f00b fa5c 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c4b0:	defe      	udf	#254	; 0xfe
            let block_bottom = y + BLOCK_HEIGHT as u8 - 1;
    c4b2:	f24f 4080 	movw	r0, #62592	; 0xf480
    c4b6:	f2c0 0001 	movt	r0, #1
    c4ba:	f24f 52b4 	movw	r2, #62900	; 0xf5b4
    c4be:	f2c0 0201 	movt	r2, #1
    c4c2:	211c      	movs	r1, #28
    c4c4:	f00b fa50 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c4c8:	defe      	udf	#254	; 0xfe
    c4ca:	f24f 5060 	movw	r0, #62816	; 0xf560
    c4ce:	f2c0 0001 	movt	r0, #1
    c4d2:	f24f 52b4 	movw	r2, #62900	; 0xf5b4
    c4d6:	f2c0 0201 	movt	r2, #1
    c4da:	2121      	movs	r1, #33	; 0x21
    c4dc:	f00b fa44 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c4e0:	defe      	udf	#254	; 0xfe
            x += BLOCK_WIDTH as u8;
    c4e2:	f24f 4080 	movw	r0, #62592	; 0xf480
    c4e6:	f2c0 0001 	movt	r0, #1
    c4ea:	f24f 52c4 	movw	r2, #62916	; 0xf5c4
    c4ee:	f2c0 0201 	movt	r2, #1
    c4f2:	211c      	movs	r1, #28
    c4f4:	f00b fa38 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c4f8:	defe      	udf	#254	; 0xfe
                y += BLOCK_HEIGHT as u8;
    c4fa:	f24f 4080 	movw	r0, #62592	; 0xf480
    c4fe:	f2c0 0001 	movt	r0, #1
    c502:	f24f 52d4 	movw	r2, #62932	; 0xf5d4
    c506:	f2c0 0201 	movt	r2, #1
    c50a:	211c      	movs	r1, #28
    c50c:	f00b fa2c 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c510:	defe      	udf	#254	; 0xfe

0000c512 <_ZN3app5chip812render_block17hf14dcded684223a2E>:

/// Render the Virtual Block
fn render_block(left: u8, top: u8, right: u8, bottom: u8) {
    c512:	b570      	push	{r4, r5, r6, lr}
    c514:	b090      	sub	sp, #64	; 0x40
    c516:	469c      	mov	ip, r3
    c518:	4696      	mov	lr, r2
    c51a:	460c      	mov	r4, r1
    c51c:	4605      	mov	r5, r0
    c51e:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
    c522:	f88d 1035 	strb.w	r1, [sp, #53]	; 0x35
    c526:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
    c52a:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    //  console::print("render "); console::printint(left as i32); console::print(", "); console::printint(top as i32); console::print(", "); console::printint(right as i32 - left as i32); console::print(", "); console::printint(bottom as i32 - top as i32); console::print("\n"); console::flush(); ////
    //  Create a new block for the region to be updated
    let mut block = PixelIterator::new(
    c52e:	466e      	mov	r6, sp
    c530:	6033      	str	r3, [r6, #0]
    c532:	ab0a      	add	r3, sp, #40	; 0x28
    c534:	9009      	str	r0, [sp, #36]	; 0x24
    c536:	4618      	mov	r0, r3
    c538:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c53a:	9108      	str	r1, [sp, #32]
    c53c:	4619      	mov	r1, r3
    c53e:	9e08      	ldr	r6, [sp, #32]
    c540:	9207      	str	r2, [sp, #28]
    c542:	4632      	mov	r2, r6
    c544:	9b07      	ldr	r3, [sp, #28]
    c546:	f8cd c018 	str.w	ip, [sp, #24]
    c54a:	f8cd e014 	str.w	lr, [sp, #20]
    c54e:	9404      	str	r4, [sp, #16]
    c550:	9503      	str	r5, [sp, #12]
    c552:	f000 f832 	bl	c5ba <_ZN3app5chip813PixelIterator3new17h822e2c1da3bbcd7bE>
    c556:	e7ff      	b.n	c558 <_ZN3app5chip812render_block17hf14dcded684223a2E+0x46>
    c558:	a80a      	add	r0, sp, #40	; 0x28
        left, top, 
        right, bottom,
    );
    //  Render the block
    let (left, top, right, bottom) = block.get_window();
    c55a:	f000 f849 	bl	c5f0 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE>
    c55e:	900e      	str	r0, [sp, #56]	; 0x38
    c560:	980e      	ldr	r0, [sp, #56]	; 0x38
    c562:	900c      	str	r0, [sp, #48]	; 0x30
    c564:	e7ff      	b.n	c566 <_ZN3app5chip812render_block17hf14dcded684223a2E+0x54>
    c566:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    c56a:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
    c56e:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
    c572:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
    c576:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    c57a:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
    c57e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    c582:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
    druid::set_display_pixels(left as u16, top as u16, right as u16, bottom as u16,
    c586:	46ec      	mov	ip, sp
    c588:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
    c58c:	f8cc e000 	str.w	lr, [ip]
    c590:	f000 fc2e 	bl	cdf0 <_ZN22piet_embedded_graphics7display18set_display_pixels17hd0f20e3b4184e9a6E>
    c594:	9002      	str	r0, [sp, #8]
    c596:	e7ff      	b.n	c598 <_ZN3app5chip812render_block17hf14dcded684223a2E+0x86>
    c598:	9802      	ldr	r0, [sp, #8]
    c59a:	f000 0001 	and.w	r0, r0, #1
    c59e:	f24f 51e4 	movw	r1, #62948	; 0xf5e4
    c5a2:	f2c0 0101 	movt	r1, #1
    c5a6:	f24f 53f8 	movw	r3, #62968	; 0xf5f8
    c5aa:	f2c0 0301 	movt	r3, #1
    c5ae:	2211      	movs	r2, #17
    c5b0:	f008 fe35 	bl	1521e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
    c5b4:	e7ff      	b.n	c5b6 <_ZN3app5chip812render_block17hf14dcded684223a2E+0xa4>
        &mut block
    ).expect("set pixels failed");    
}
    c5b6:	b010      	add	sp, #64	; 0x40
    c5b8:	bd70      	pop	{r4, r5, r6, pc}

0000c5ba <_ZN3app5chip813PixelIterator3new17h822e2c1da3bbcd7bE>:
    block_bottom:    u8,
}

impl PixelIterator {
    /// Return a new PixelInterator for the block dimensions
    pub fn new(
    c5ba:	b570      	push	{r4, r5, r6, lr}
    c5bc:	b081      	sub	sp, #4
    c5be:	f8dd c014 	ldr.w	ip, [sp, #20]
    c5c2:	469e      	mov	lr, r3
    c5c4:	4614      	mov	r4, r2
    c5c6:	460d      	mov	r5, r1
    c5c8:	f88d 1000 	strb.w	r1, [sp]
    c5cc:	f88d 2001 	strb.w	r2, [sp, #1]
    c5d0:	f88d 3002 	strb.w	r3, [sp, #2]
    c5d4:	f88d c003 	strb.w	ip, [sp, #3]
        //  End column number for block
        block_right:     u8,
        //  End row number for block
        block_bottom:    u8,        
    ) -> PixelIterator {
        PixelIterator {
    c5d8:	7001      	strb	r1, [r0, #0]
    c5da:	7042      	strb	r2, [r0, #1]
    c5dc:	2600      	movs	r6, #0
    c5de:	7086      	strb	r6, [r0, #2]
    c5e0:	70c6      	strb	r6, [r0, #3]
    c5e2:	7101      	strb	r1, [r0, #4]
    c5e4:	7143      	strb	r3, [r0, #5]
    c5e6:	7182      	strb	r2, [r0, #6]
    c5e8:	f880 c007 	strb.w	ip, [r0, #7]
            x_offset: 0, 
            y_offset: 0,
            block_left, block_right,
            block_top, block_bottom,
        }
    }
    c5ec:	b001      	add	sp, #4
    c5ee:	bd70      	pop	{r4, r5, r6, pc}

0000c5f0 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE>:
    pub fn contains(&self, x: u8, y: u8) -> bool {
        x >= self.block_left && x <= self.block_right &&
            y >= self.block_top && y <= self.block_bottom
    }
    /// Return window of Physical Pixels: (left, top, right, bottom)
    pub fn get_window(&self) -> (u8, u8, u8, u8) {
    c5f0:	b580      	push	{r7, lr}
    c5f2:	b092      	sub	sp, #72	; 0x48
    c5f4:	9010      	str	r0, [sp, #64]	; 0x40
        let left: u8 = self.block_left as u8 * PIXEL_WIDTH as u8;
    c5f6:	7901      	ldrb	r1, [r0, #4]
    c5f8:	2203      	movs	r2, #3
    c5fa:	fba1 1202 	umull	r1, r2, r1, r2
    c5fe:	0a0b      	lsrs	r3, r1, #8
    c600:	f04f 0c00 	mov.w	ip, #0
    c604:	ebbc 2f11 	cmp.w	ip, r1, lsr #8
    c608:	bf18      	it	ne
    c60a:	2301      	movne	r3, #1
    c60c:	2a00      	cmp	r2, #0
    c60e:	bf18      	it	ne
    c610:	2201      	movne	r2, #1
    c612:	ea42 0203 	orr.w	r2, r2, r3
    c616:	2a00      	cmp	r2, #0
    c618:	900d      	str	r0, [sp, #52]	; 0x34
    c61a:	910c      	str	r1, [sp, #48]	; 0x30
    c61c:	f040 810a 	bne.w	c834 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x244>
    c620:	e7ff      	b.n	c622 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x32>
    c622:	980c      	ldr	r0, [sp, #48]	; 0x30
    c624:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
        let top: u8 = self.block_top as u8 * PIXEL_HEIGHT as u8; 
    c628:	990d      	ldr	r1, [sp, #52]	; 0x34
    c62a:	798a      	ldrb	r2, [r1, #6]
    c62c:	2305      	movs	r3, #5
    c62e:	fba2 2303 	umull	r2, r3, r2, r3
    c632:	ea4f 2c12 	mov.w	ip, r2, lsr #8
    c636:	f04f 0e00 	mov.w	lr, #0
    c63a:	ebbe 2f12 	cmp.w	lr, r2, lsr #8
    c63e:	bf18      	it	ne
    c640:	f04f 0c01 	movne.w	ip, #1
    c644:	2b00      	cmp	r3, #0
    c646:	bf18      	it	ne
    c648:	2301      	movne	r3, #1
    c64a:	ea43 030c 	orr.w	r3, r3, ip
    c64e:	2b00      	cmp	r3, #0
    c650:	920b      	str	r2, [sp, #44]	; 0x2c
    c652:	f040 80fb 	bne.w	c84c <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x25c>
    c656:	e7ff      	b.n	c658 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x68>
    c658:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c65a:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
        let right: u8 = left + (self.block_right - self.block_left + 1) * PIXEL_WIDTH as u8 - 1;
    c65e:	990d      	ldr	r1, [sp, #52]	; 0x34
    c660:	790a      	ldrb	r2, [r1, #4]
    c662:	794b      	ldrb	r3, [r1, #5]
    c664:	1a9a      	subs	r2, r3, r2
    c666:	b2d3      	uxtb	r3, r2
    c668:	4694      	mov	ip, r2
    c66a:	4293      	cmp	r3, r2
    c66c:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    c670:	f040 80f8 	bne.w	c864 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x274>
    c674:	e7ff      	b.n	c676 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x86>
    c676:	2001      	movs	r0, #1
    c678:	990a      	ldr	r1, [sp, #40]	; 0x28
    c67a:	fa50 f081 	uxtab	r0, r0, r1
    c67e:	b2c2      	uxtb	r2, r0
    c680:	4603      	mov	r3, r0
    c682:	4282      	cmp	r2, r0
    c684:	9309      	str	r3, [sp, #36]	; 0x24
    c686:	f040 80f9 	bne.w	c87c <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x28c>
    c68a:	e7ff      	b.n	c68c <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x9c>
    c68c:	9809      	ldr	r0, [sp, #36]	; 0x24
    c68e:	b2c1      	uxtb	r1, r0
    c690:	2203      	movs	r2, #3
    c692:	fba1 1202 	umull	r1, r2, r1, r2
    c696:	0a0b      	lsrs	r3, r1, #8
    c698:	f04f 0c00 	mov.w	ip, #0
    c69c:	ebbc 2f11 	cmp.w	ip, r1, lsr #8
    c6a0:	bf18      	it	ne
    c6a2:	2301      	movne	r3, #1
    c6a4:	2a00      	cmp	r2, #0
    c6a6:	bf18      	it	ne
    c6a8:	2201      	movne	r2, #1
    c6aa:	ea42 0203 	orr.w	r2, r2, r3
    c6ae:	2a00      	cmp	r2, #0
    c6b0:	9108      	str	r1, [sp, #32]
    c6b2:	f040 80ef 	bne.w	c894 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x2a4>
    c6b6:	e7ff      	b.n	c6b8 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0xc8>
    c6b8:	980c      	ldr	r0, [sp, #48]	; 0x30
    c6ba:	b2c1      	uxtb	r1, r0
    c6bc:	9a08      	ldr	r2, [sp, #32]
    c6be:	fa51 f182 	uxtab	r1, r1, r2
    c6c2:	b2cb      	uxtb	r3, r1
    c6c4:	468c      	mov	ip, r1
    c6c6:	428b      	cmp	r3, r1
    c6c8:	f8cd c01c 	str.w	ip, [sp, #28]
    c6cc:	f040 80ee 	bne.w	c8ac <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x2bc>
    c6d0:	e7ff      	b.n	c6d2 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0xe2>
    c6d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c6d6:	9907      	ldr	r1, [sp, #28]
    c6d8:	fa50 f081 	uxtab	r0, r0, r1
    c6dc:	b2c2      	uxtb	r2, r0
    c6de:	4603      	mov	r3, r0
    c6e0:	4282      	cmp	r2, r0
    c6e2:	9306      	str	r3, [sp, #24]
    c6e4:	f040 80ee 	bne.w	c8c4 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x2d4>
    c6e8:	e7ff      	b.n	c6ea <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0xfa>
    c6ea:	9806      	ldr	r0, [sp, #24]
    c6ec:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
        let bottom: u8 = top + (self.block_bottom - self.block_top + 1) * PIXEL_HEIGHT as u8 - 1;
    c6f0:	990d      	ldr	r1, [sp, #52]	; 0x34
    c6f2:	798a      	ldrb	r2, [r1, #6]
    c6f4:	79cb      	ldrb	r3, [r1, #7]
    c6f6:	1a9a      	subs	r2, r3, r2
    c6f8:	b2d3      	uxtb	r3, r2
    c6fa:	4694      	mov	ip, r2
    c6fc:	4293      	cmp	r3, r2
    c6fe:	f8cd c014 	str.w	ip, [sp, #20]
    c702:	f040 80eb 	bne.w	c8dc <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x2ec>
    c706:	e7ff      	b.n	c708 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x118>
    c708:	2001      	movs	r0, #1
    c70a:	9905      	ldr	r1, [sp, #20]
    c70c:	fa50 f081 	uxtab	r0, r0, r1
    c710:	b2c2      	uxtb	r2, r0
    c712:	4603      	mov	r3, r0
    c714:	4282      	cmp	r2, r0
    c716:	9304      	str	r3, [sp, #16]
    c718:	f040 80ec 	bne.w	c8f4 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x304>
    c71c:	e7ff      	b.n	c71e <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x12e>
    c71e:	9804      	ldr	r0, [sp, #16]
    c720:	b2c1      	uxtb	r1, r0
    c722:	2205      	movs	r2, #5
    c724:	fba1 1202 	umull	r1, r2, r1, r2
    c728:	0a0b      	lsrs	r3, r1, #8
    c72a:	f04f 0c00 	mov.w	ip, #0
    c72e:	ebbc 2f11 	cmp.w	ip, r1, lsr #8
    c732:	bf18      	it	ne
    c734:	2301      	movne	r3, #1
    c736:	2a00      	cmp	r2, #0
    c738:	bf18      	it	ne
    c73a:	2201      	movne	r2, #1
    c73c:	ea42 0203 	orr.w	r2, r2, r3
    c740:	2a00      	cmp	r2, #0
    c742:	9103      	str	r1, [sp, #12]
    c744:	f040 80e2 	bne.w	c90c <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x31c>
    c748:	e7ff      	b.n	c74a <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x15a>
    c74a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c74c:	b2c1      	uxtb	r1, r0
    c74e:	9a03      	ldr	r2, [sp, #12]
    c750:	fa51 f182 	uxtab	r1, r1, r2
    c754:	b2cb      	uxtb	r3, r1
    c756:	468c      	mov	ip, r1
    c758:	428b      	cmp	r3, r1
    c75a:	f8cd c008 	str.w	ip, [sp, #8]
    c75e:	f040 80e1 	bne.w	c924 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x334>
    c762:	e7ff      	b.n	c764 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x174>
    c764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c768:	9902      	ldr	r1, [sp, #8]
    c76a:	fa50 f081 	uxtab	r0, r0, r1
    c76e:	b2c2      	uxtb	r2, r0
    c770:	4603      	mov	r3, r0
    c772:	4282      	cmp	r2, r0
    c774:	9301      	str	r3, [sp, #4]
    c776:	f040 80e1 	bne.w	c93c <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x34c>
    c77a:	e7ff      	b.n	c77c <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x18c>
    c77c:	9801      	ldr	r0, [sp, #4]
    c77e:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
        assert!(left < 240 && top < 240 && right < 240 && bottom < 240, "overflow");
    c782:	990c      	ldr	r1, [sp, #48]	; 0x30
    c784:	b2ca      	uxtb	r2, r1
    c786:	2af0      	cmp	r2, #240	; 0xf0
    c788:	d32e      	bcc.n	c7e8 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1f8>
    c78a:	e029      	b.n	c7e0 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1f0>
    c78c:	2001      	movs	r0, #1
    c78e:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
    c792:	e008      	b.n	c7a6 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1b6>
    c794:	2000      	movs	r0, #0
    c796:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
    c79a:	e004      	b.n	c7a6 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1b6>
    c79c:	9801      	ldr	r0, [sp, #4]
    c79e:	b2c1      	uxtb	r1, r0
    c7a0:	29f0      	cmp	r1, #240	; 0xf0
    c7a2:	d3f3      	bcc.n	c78c <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x19c>
    c7a4:	e7f6      	b.n	c794 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1a4>
    c7a6:	f89d 003d 	ldrb.w	r0, [sp, #61]	; 0x3d
    c7aa:	07c0      	lsls	r0, r0, #31
    c7ac:	2800      	cmp	r0, #0
    c7ae:	d035      	beq.n	c81c <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x22c>
    c7b0:	e025      	b.n	c7fe <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x20e>
    c7b2:	2001      	movs	r0, #1
    c7b4:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
    c7b8:	e008      	b.n	c7cc <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1dc>
    c7ba:	2000      	movs	r0, #0
    c7bc:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
    c7c0:	e004      	b.n	c7cc <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1dc>
    c7c2:	9806      	ldr	r0, [sp, #24]
    c7c4:	b2c1      	uxtb	r1, r0
    c7c6:	29f0      	cmp	r1, #240	; 0xf0
    c7c8:	d3f3      	bcc.n	c7b2 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1c2>
    c7ca:	e7f6      	b.n	c7ba <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1ca>
    c7cc:	f89d 003e 	ldrb.w	r0, [sp, #62]	; 0x3e
    c7d0:	07c0      	lsls	r0, r0, #31
    c7d2:	2800      	cmp	r0, #0
    c7d4:	d1e2      	bne.n	c79c <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1ac>
    c7d6:	e7dd      	b.n	c794 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1a4>
    c7d8:	2001      	movs	r0, #1
    c7da:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
    c7de:	e008      	b.n	c7f2 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x202>
    c7e0:	2000      	movs	r0, #0
    c7e2:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
    c7e6:	e004      	b.n	c7f2 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x202>
    c7e8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c7ea:	b2c1      	uxtb	r1, r0
    c7ec:	29f0      	cmp	r1, #240	; 0xf0
    c7ee:	d3f3      	bcc.n	c7d8 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1e8>
    c7f0:	e7f6      	b.n	c7e0 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1f0>
    c7f2:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
    c7f6:	07c0      	lsls	r0, r0, #31
    c7f8:	2800      	cmp	r0, #0
    c7fa:	d1e2      	bne.n	c7c2 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1d2>
    c7fc:	e7dd      	b.n	c7ba <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1ca>
        ( left, top, right, bottom )
    c7fe:	980c      	ldr	r0, [sp, #48]	; 0x30
    c800:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    c804:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c806:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
    c80a:	9a06      	ldr	r2, [sp, #24]
    c80c:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
    c810:	9b01      	ldr	r3, [sp, #4]
    c812:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
    }
    c816:	980e      	ldr	r0, [sp, #56]	; 0x38
    c818:	b012      	add	sp, #72	; 0x48
    c81a:	bd80      	pop	{r7, pc}
        assert!(left < 240 && top < 240 && right < 240 && bottom < 240, "overflow");
    c81c:	f24f 500c 	movw	r0, #62732	; 0xf50c
    c820:	f2c0 0001 	movt	r0, #1
    c824:	f24f 6288 	movw	r2, #63112	; 0xf688
    c828:	f2c0 0201 	movt	r2, #1
    c82c:	2108      	movs	r1, #8
    c82e:	f00b f89b 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c832:	defe      	udf	#254	; 0xfe
        let left: u8 = self.block_left as u8 * PIXEL_WIDTH as u8;
    c834:	f24f 4040 	movw	r0, #62528	; 0xf440
    c838:	f2c0 0001 	movt	r0, #1
    c83c:	f24f 6208 	movw	r2, #62984	; 0xf608
    c840:	f2c0 0201 	movt	r2, #1
    c844:	2121      	movs	r1, #33	; 0x21
    c846:	f00b f88f 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c84a:	defe      	udf	#254	; 0xfe
        let top: u8 = self.block_top as u8 * PIXEL_HEIGHT as u8; 
    c84c:	f24f 4040 	movw	r0, #62528	; 0xf440
    c850:	f2c0 0001 	movt	r0, #1
    c854:	f24f 6218 	movw	r2, #63000	; 0xf618
    c858:	f2c0 0201 	movt	r2, #1
    c85c:	2121      	movs	r1, #33	; 0x21
    c85e:	f00b f883 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c862:	defe      	udf	#254	; 0xfe
        let right: u8 = left + (self.block_right - self.block_left + 1) * PIXEL_WIDTH as u8 - 1;
    c864:	f24f 5060 	movw	r0, #62816	; 0xf560
    c868:	f2c0 0001 	movt	r0, #1
    c86c:	f24f 6228 	movw	r2, #63016	; 0xf628
    c870:	f2c0 0201 	movt	r2, #1
    c874:	2121      	movs	r1, #33	; 0x21
    c876:	f00b f877 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c87a:	defe      	udf	#254	; 0xfe
    c87c:	f24f 4080 	movw	r0, #62592	; 0xf480
    c880:	f2c0 0001 	movt	r0, #1
    c884:	f24f 6238 	movw	r2, #63032	; 0xf638
    c888:	f2c0 0201 	movt	r2, #1
    c88c:	211c      	movs	r1, #28
    c88e:	f00b f86b 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c892:	defe      	udf	#254	; 0xfe
    c894:	f24f 4040 	movw	r0, #62528	; 0xf440
    c898:	f2c0 0001 	movt	r0, #1
    c89c:	f24f 6238 	movw	r2, #63032	; 0xf638
    c8a0:	f2c0 0201 	movt	r2, #1
    c8a4:	2121      	movs	r1, #33	; 0x21
    c8a6:	f00b f85f 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c8aa:	defe      	udf	#254	; 0xfe
    c8ac:	f24f 4080 	movw	r0, #62592	; 0xf480
    c8b0:	f2c0 0001 	movt	r0, #1
    c8b4:	f24f 6248 	movw	r2, #63048	; 0xf648
    c8b8:	f2c0 0201 	movt	r2, #1
    c8bc:	211c      	movs	r1, #28
    c8be:	f00b f853 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c8c2:	defe      	udf	#254	; 0xfe
    c8c4:	f24f 5060 	movw	r0, #62816	; 0xf560
    c8c8:	f2c0 0001 	movt	r0, #1
    c8cc:	f24f 6248 	movw	r2, #63048	; 0xf648
    c8d0:	f2c0 0201 	movt	r2, #1
    c8d4:	2121      	movs	r1, #33	; 0x21
    c8d6:	f00b f847 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c8da:	defe      	udf	#254	; 0xfe
        let bottom: u8 = top + (self.block_bottom - self.block_top + 1) * PIXEL_HEIGHT as u8 - 1;
    c8dc:	f24f 5060 	movw	r0, #62816	; 0xf560
    c8e0:	f2c0 0001 	movt	r0, #1
    c8e4:	f24f 6258 	movw	r2, #63064	; 0xf658
    c8e8:	f2c0 0201 	movt	r2, #1
    c8ec:	2121      	movs	r1, #33	; 0x21
    c8ee:	f00b f83b 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c8f2:	defe      	udf	#254	; 0xfe
    c8f4:	f24f 4080 	movw	r0, #62592	; 0xf480
    c8f8:	f2c0 0001 	movt	r0, #1
    c8fc:	f24f 6268 	movw	r2, #63080	; 0xf668
    c900:	f2c0 0201 	movt	r2, #1
    c904:	211c      	movs	r1, #28
    c906:	f00b f82f 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c90a:	defe      	udf	#254	; 0xfe
    c90c:	f24f 4040 	movw	r0, #62528	; 0xf440
    c910:	f2c0 0001 	movt	r0, #1
    c914:	f24f 6268 	movw	r2, #63080	; 0xf668
    c918:	f2c0 0201 	movt	r2, #1
    c91c:	2121      	movs	r1, #33	; 0x21
    c91e:	f00b f823 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c922:	defe      	udf	#254	; 0xfe
    c924:	f24f 4080 	movw	r0, #62592	; 0xf480
    c928:	f2c0 0001 	movt	r0, #1
    c92c:	f24f 6278 	movw	r2, #63096	; 0xf678
    c930:	f2c0 0201 	movt	r2, #1
    c934:	211c      	movs	r1, #28
    c936:	f00b f817 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c93a:	defe      	udf	#254	; 0xfe
    c93c:	f24f 5060 	movw	r0, #62816	; 0xf560
    c940:	f2c0 0001 	movt	r0, #1
    c944:	f24f 6278 	movw	r2, #63096	; 0xf678
    c948:	f2c0 0201 	movt	r2, #1
    c94c:	2121      	movs	r1, #33	; 0x21
    c94e:	f00b f80b 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c952:	defe      	udf	#254	; 0xfe

0000c954 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE>:
impl Iterator for PixelIterator {
    /// This Iterator returns Physical Pixel colour words (16-bit)
    type Item = u16;

    /// Return the next Physical Pixel colour
    fn next(&mut self) -> Option<Self::Item> {
    c954:	b08c      	sub	sp, #48	; 0x30
    c956:	900a      	str	r0, [sp, #40]	; 0x28
        if self.y > self.block_bottom { return None; }  //  No more Physical Pixels
    c958:	7841      	ldrb	r1, [r0, #1]
    c95a:	79c2      	ldrb	r2, [r0, #7]
    c95c:	4291      	cmp	r1, r2
    c95e:	9007      	str	r0, [sp, #28]
    c960:	d805      	bhi.n	c96e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x1a>
    c962:	e7ff      	b.n	c964 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x10>

        if self.x >= SCREEN_WIDTH as u8 ||
    c964:	9807      	ldr	r0, [sp, #28]
    c966:	7801      	ldrb	r1, [r0, #0]
    c968:	293f      	cmp	r1, #63	; 0x3f
    c96a:	d80a      	bhi.n	c982 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x2e>
    c96c:	e011      	b.n	c992 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x3e>
    c96e:	2000      	movs	r0, #0
        if self.y > self.block_bottom { return None; }  //  No more Physical Pixels
    c970:	f8ad 0020 	strh.w	r0, [sp, #32]
    c974:	e7ff      	b.n	c976 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x22>
                }
            }
        }
        //  Return the Physical Pixel color
        return Some(color);
    }
    c976:	f8bd 0020 	ldrh.w	r0, [sp, #32]
    c97a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
    c97e:	b00c      	add	sp, #48	; 0x30
    c980:	4770      	bx	lr
    c982:	2001      	movs	r0, #1
        if self.x >= SCREEN_WIDTH as u8 ||
    c984:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
    c988:	e008      	b.n	c99c <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x48>
    c98a:	2000      	movs	r0, #0
    c98c:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
    c990:	e004      	b.n	c99c <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x48>
            self.y >= SCREEN_HEIGHT as u8 { cortex_m::asm::bkpt(); }
    c992:	9807      	ldr	r0, [sp, #28]
    c994:	7841      	ldrb	r1, [r0, #1]
        if self.x >= SCREEN_WIDTH as u8 ||
    c996:	291f      	cmp	r1, #31
    c998:	d8f3      	bhi.n	c982 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x2e>
    c99a:	e7f6      	b.n	c98a <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x36>
    c99c:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
    c9a0:	07c0      	lsls	r0, r0, #31
    c9a2:	2800      	cmp	r0, #0
    c9a4:	d003      	beq.n	c9ae <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x5a>
    c9a6:	e7ff      	b.n	c9a8 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x54>
    c9a8:	be00      	bkpt	0x0000
            self.y >= SCREEN_HEIGHT as u8 { cortex_m::asm::bkpt(); }
    c9aa:	e7ff      	b.n	c9ac <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x58>
        if self.x >= SCREEN_WIDTH as u8 ||
    c9ac:	e7ff      	b.n	c9ae <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x5a>
        assert!(self.x < SCREEN_WIDTH as u8, "x overflow");
    c9ae:	9807      	ldr	r0, [sp, #28]
    c9b0:	7801      	ldrb	r1, [r0, #0]
    c9b2:	293f      	cmp	r1, #63	; 0x3f
    c9b4:	d805      	bhi.n	c9c2 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x6e>
    c9b6:	e7ff      	b.n	c9b8 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x64>
        assert!(self.y < SCREEN_HEIGHT as u8, "y overflow");
    c9b8:	9807      	ldr	r0, [sp, #28]
    c9ba:	7841      	ldrb	r1, [r0, #1]
    c9bc:	291f      	cmp	r1, #31
    c9be:	d816      	bhi.n	c9ee <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x9a>
    c9c0:	e00b      	b.n	c9da <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x86>
        assert!(self.x < SCREEN_WIDTH as u8, "x overflow");
    c9c2:	f24f 30ec 	movw	r0, #62444	; 0xf3ec
    c9c6:	f2c0 0001 	movt	r0, #1
    c9ca:	f24f 6298 	movw	r2, #63128	; 0xf698
    c9ce:	f2c0 0201 	movt	r2, #1
    c9d2:	210a      	movs	r1, #10
    c9d4:	f00a ffc8 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c9d8:	defe      	udf	#254	; 0xfe
        let i = self.x as usize + self.y as usize * SCREEN_WIDTH;
    c9da:	9807      	ldr	r0, [sp, #28]
    c9dc:	7801      	ldrb	r1, [r0, #0]
    c9de:	7842      	ldrb	r2, [r0, #1]
    c9e0:	0192      	lsls	r2, r2, #6
    c9e2:	2300      	movs	r3, #0
    c9e4:	2b00      	cmp	r3, #0
    c9e6:	9106      	str	r1, [sp, #24]
    c9e8:	9205      	str	r2, [sp, #20]
    c9ea:	d17b      	bne.n	cae4 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x190>
    c9ec:	e00b      	b.n	ca06 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0xb2>
        assert!(self.y < SCREEN_HEIGHT as u8, "y overflow");
    c9ee:	f24f 4008 	movw	r0, #62472	; 0xf408
    c9f2:	f2c0 0001 	movt	r0, #1
    c9f6:	f24f 62a8 	movw	r2, #63144	; 0xf6a8
    c9fa:	f2c0 0201 	movt	r2, #1
    c9fe:	210a      	movs	r1, #10
    ca00:	f00a ffb2 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ca04:	defe      	udf	#254	; 0xfe
        let i = self.x as usize + self.y as usize * SCREEN_WIDTH;
    ca06:	9806      	ldr	r0, [sp, #24]
    ca08:	9905      	ldr	r1, [sp, #20]
    ca0a:	1842      	adds	r2, r0, r1
    ca0c:	4613      	mov	r3, r2
    ca0e:	4282      	cmp	r2, r0
    ca10:	9304      	str	r3, [sp, #16]
    ca12:	d373      	bcc.n	cafc <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x1a8>
    ca14:	e7ff      	b.n	ca16 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0xc2>
    ca16:	9804      	ldr	r0, [sp, #16]
    ca18:	900b      	str	r0, [sp, #44]	; 0x2c
    ca1a:	2100      	movs	r1, #0
            if SCREEN_BUFFER[i] >= 128 { 0xffff } else { 0x0 }
    ca1c:	ebb1 2fd0 	cmp.w	r1, r0, lsr #11
    ca20:	d178      	bne.n	cb14 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x1c0>
    ca22:	e7ff      	b.n	ca24 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0xd0>
    ca24:	f244 2068 	movw	r0, #17000	; 0x4268
    ca28:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ca2c:	9904      	ldr	r1, [sp, #16]
    ca2e:	5640      	ldrsb	r0, [r0, r1]
    ca30:	2800      	cmp	r0, #0
    ca32:	d404      	bmi.n	ca3e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0xea>
    ca34:	e7ff      	b.n	ca36 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0xe2>
    ca36:	2000      	movs	r0, #0
    ca38:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
    ca3c:	e004      	b.n	ca48 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0xf4>
    ca3e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    ca42:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
    ca46:	e7ff      	b.n	ca48 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0xf4>
        self.x_offset += 1;
    ca48:	9807      	ldr	r0, [sp, #28]
    ca4a:	7881      	ldrb	r1, [r0, #2]
    ca4c:	3101      	adds	r1, #1
    ca4e:	b2ca      	uxtb	r2, r1
    ca50:	460b      	mov	r3, r1
    ca52:	428a      	cmp	r2, r1
    ca54:	9303      	str	r3, [sp, #12]
    ca56:	d167      	bne.n	cb28 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x1d4>
    ca58:	e7ff      	b.n	ca5a <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x106>
    ca5a:	9803      	ldr	r0, [sp, #12]
    ca5c:	9907      	ldr	r1, [sp, #28]
    ca5e:	7088      	strb	r0, [r1, #2]
        if self.x_offset >= PIXEL_WIDTH as u8 {
    ca60:	788a      	ldrb	r2, [r1, #2]
    ca62:	2a03      	cmp	r2, #3
    ca64:	d336      	bcc.n	cad4 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x180>
    ca66:	e7ff      	b.n	ca68 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x114>
    ca68:	2000      	movs	r0, #0
            self.x_offset = 0;
    ca6a:	9907      	ldr	r1, [sp, #28]
    ca6c:	7088      	strb	r0, [r1, #2]
            self.x += 1;
    ca6e:	7808      	ldrb	r0, [r1, #0]
    ca70:	3001      	adds	r0, #1
    ca72:	b2c2      	uxtb	r2, r0
    ca74:	4603      	mov	r3, r0
    ca76:	4282      	cmp	r2, r0
    ca78:	9302      	str	r3, [sp, #8]
    ca7a:	d161      	bne.n	cb40 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x1ec>
    ca7c:	e7ff      	b.n	ca7e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x12a>
    ca7e:	9802      	ldr	r0, [sp, #8]
    ca80:	9907      	ldr	r1, [sp, #28]
    ca82:	7008      	strb	r0, [r1, #0]
            if self.x > self.block_right {
    ca84:	780a      	ldrb	r2, [r1, #0]
    ca86:	794b      	ldrb	r3, [r1, #5]
    ca88:	429a      	cmp	r2, r3
    ca8a:	d922      	bls.n	cad2 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x17e>
    ca8c:	e7ff      	b.n	ca8e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x13a>
                self.x = self.block_left;
    ca8e:	9807      	ldr	r0, [sp, #28]
    ca90:	7901      	ldrb	r1, [r0, #4]
    ca92:	7001      	strb	r1, [r0, #0]
                self.y_offset += 1;
    ca94:	78c1      	ldrb	r1, [r0, #3]
    ca96:	3101      	adds	r1, #1
    ca98:	b2ca      	uxtb	r2, r1
    ca9a:	460b      	mov	r3, r1
    ca9c:	428a      	cmp	r2, r1
    ca9e:	9301      	str	r3, [sp, #4]
    caa0:	d15a      	bne.n	cb58 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x204>
    caa2:	e7ff      	b.n	caa4 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x150>
    caa4:	9801      	ldr	r0, [sp, #4]
    caa6:	9907      	ldr	r1, [sp, #28]
    caa8:	70c8      	strb	r0, [r1, #3]
                if self.y_offset >= PIXEL_HEIGHT as u8 {
    caaa:	78ca      	ldrb	r2, [r1, #3]
    caac:	2a05      	cmp	r2, #5
    caae:	d30f      	bcc.n	cad0 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x17c>
    cab0:	e7ff      	b.n	cab2 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x15e>
    cab2:	2000      	movs	r0, #0
                    self.y_offset = 0;
    cab4:	9907      	ldr	r1, [sp, #28]
    cab6:	70c8      	strb	r0, [r1, #3]
                    self.y += 1;
    cab8:	7848      	ldrb	r0, [r1, #1]
    caba:	3001      	adds	r0, #1
    cabc:	b2c2      	uxtb	r2, r0
    cabe:	4603      	mov	r3, r0
    cac0:	4282      	cmp	r2, r0
    cac2:	9300      	str	r3, [sp, #0]
    cac4:	d154      	bne.n	cb70 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x21c>
    cac6:	e7ff      	b.n	cac8 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x174>
    cac8:	9800      	ldr	r0, [sp, #0]
    caca:	9907      	ldr	r1, [sp, #28]
    cacc:	7048      	strb	r0, [r1, #1]
                if self.y_offset >= PIXEL_HEIGHT as u8 {
    cace:	e7ff      	b.n	cad0 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x17c>
            if self.x > self.block_right {
    cad0:	e7ff      	b.n	cad2 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x17e>
        if self.x_offset >= PIXEL_WIDTH as u8 {
    cad2:	e7ff      	b.n	cad4 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x180>
        return Some(color);
    cad4:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
    cad8:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
    cadc:	2001      	movs	r0, #1
    cade:	f8ad 0020 	strh.w	r0, [sp, #32]
    cae2:	e748      	b.n	c976 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x22>
        let i = self.x as usize + self.y as usize * SCREEN_WIDTH;
    cae4:	f24f 4040 	movw	r0, #62528	; 0xf440
    cae8:	f2c0 0001 	movt	r0, #1
    caec:	f24f 62b8 	movw	r2, #63160	; 0xf6b8
    caf0:	f2c0 0201 	movt	r2, #1
    caf4:	2121      	movs	r1, #33	; 0x21
    caf6:	f00a ff37 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    cafa:	defe      	udf	#254	; 0xfe
    cafc:	f24f 4080 	movw	r0, #62592	; 0xf480
    cb00:	f2c0 0001 	movt	r0, #1
    cb04:	f24f 62c8 	movw	r2, #63176	; 0xf6c8
    cb08:	f2c0 0201 	movt	r2, #1
    cb0c:	211c      	movs	r1, #28
    cb0e:	f00a ff2b 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    cb12:	defe      	udf	#254	; 0xfe
            if SCREEN_BUFFER[i] >= 128 { 0xffff } else { 0x0 }
    cb14:	f24f 60d8 	movw	r0, #63192	; 0xf6d8
    cb18:	f2c0 0001 	movt	r0, #1
    cb1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    cb20:	9904      	ldr	r1, [sp, #16]
    cb22:	f00a ff37 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    cb26:	defe      	udf	#254	; 0xfe
        self.x_offset += 1;
    cb28:	f24f 4080 	movw	r0, #62592	; 0xf480
    cb2c:	f2c0 0001 	movt	r0, #1
    cb30:	f24f 62e8 	movw	r2, #63208	; 0xf6e8
    cb34:	f2c0 0201 	movt	r2, #1
    cb38:	211c      	movs	r1, #28
    cb3a:	f00a ff15 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    cb3e:	defe      	udf	#254	; 0xfe
            self.x += 1;
    cb40:	f24f 4080 	movw	r0, #62592	; 0xf480
    cb44:	f2c0 0001 	movt	r0, #1
    cb48:	f24f 62f8 	movw	r2, #63224	; 0xf6f8
    cb4c:	f2c0 0201 	movt	r2, #1
    cb50:	211c      	movs	r1, #28
    cb52:	f00a ff09 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    cb56:	defe      	udf	#254	; 0xfe
                self.y_offset += 1;
    cb58:	f24f 4080 	movw	r0, #62592	; 0xf480
    cb5c:	f2c0 0001 	movt	r0, #1
    cb60:	f24f 7208 	movw	r2, #63240	; 0xf708
    cb64:	f2c0 0201 	movt	r2, #1
    cb68:	211c      	movs	r1, #28
    cb6a:	f00a fefd 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    cb6e:	defe      	udf	#254	; 0xfe
                    self.y += 1;
    cb70:	f24f 4080 	movw	r0, #62592	; 0xf480
    cb74:	f2c0 0001 	movt	r0, #1
    cb78:	f24f 7218 	movw	r2, #63256	; 0xf718
    cb7c:	f2c0 0201 	movt	r2, #1
    cb80:	211c      	movs	r1, #28
    cb82:	f00a fef1 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    cb86:	defe      	udf	#254	; 0xfe

0000cb88 <_ZN3app5chip812handle_touch17habca32c74e5cefadE>:
}

pub fn handle_touch(_x: u16, _y: u16) { 
    cb88:	b580      	push	{r7, lr}
    cb8a:	b084      	sub	sp, #16
    cb8c:	460a      	mov	r2, r1
    cb8e:	4603      	mov	r3, r0
    cb90:	f8ad 000c 	strh.w	r0, [sp, #12]
    cb94:	f8ad 100e 	strh.w	r1, [sp, #14]
    console::print("CHIP8 touch not handled\n"); console::flush(); 
    cb98:	f24f 7028 	movw	r0, #63272	; 0xf728
    cb9c:	f2c0 0001 	movt	r0, #1
    cba0:	2118      	movs	r1, #24
    cba2:	9202      	str	r2, [sp, #8]
    cba4:	9301      	str	r3, [sp, #4]
    cba6:	f7fc fa23 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    cbaa:	e7ff      	b.n	cbac <_ZN3app5chip812handle_touch17habca32c74e5cefadE+0x24>
    cbac:	f7fc fa66 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    cbb0:	e7ff      	b.n	cbb2 <_ZN3app5chip812handle_touch17habca32c74e5cefadE+0x2a>
}
    cbb2:	b004      	add	sp, #16
    cbb4:	bd80      	pop	{r7, pc}

0000cbb6 <_ZN4core6option15Option$LT$T$GT$3map17h652d7b279505b210E>:
    cbb6:	b580      	push	{r7, lr}
    cbb8:	b08a      	sub	sp, #40	; 0x28
    cbba:	9104      	str	r1, [sp, #16]
    cbbc:	9205      	str	r2, [sp, #20]
    cbbe:	9308      	str	r3, [sp, #32]
    cbc0:	2100      	movs	r1, #0
    cbc2:	f88d 101e 	strb.w	r1, [sp, #30]
    cbc6:	f88d 101f 	strb.w	r1, [sp, #31]
    cbca:	2101      	movs	r1, #1
    cbcc:	f88d 101f 	strb.w	r1, [sp, #31]
    cbd0:	f88d 101e 	strb.w	r1, [sp, #30]
    cbd4:	9904      	ldr	r1, [sp, #16]
    cbd6:	2900      	cmp	r1, #0
    cbd8:	9303      	str	r3, [sp, #12]
    cbda:	9002      	str	r0, [sp, #8]
    cbdc:	d001      	beq.n	cbe2 <_ZN4core6option15Option$LT$T$GT$3map17h652d7b279505b210E+0x2c>
    cbde:	e7ff      	b.n	cbe0 <_ZN4core6option15Option$LT$T$GT$3map17h652d7b279505b210E+0x2a>
    cbe0:	e004      	b.n	cbec <_ZN4core6option15Option$LT$T$GT$3map17h652d7b279505b210E+0x36>
    cbe2:	2000      	movs	r0, #0
    cbe4:	9902      	ldr	r1, [sp, #8]
    cbe6:	6008      	str	r0, [r1, #0]
    cbe8:	e01f      	b.n	cc2a <_ZN4core6option15Option$LT$T$GT$3map17h652d7b279505b210E+0x74>
    cbea:	defe      	udf	#254	; 0xfe
    cbec:	2000      	movs	r0, #0
    cbee:	f88d 001f 	strb.w	r0, [sp, #31]
    cbf2:	9905      	ldr	r1, [sp, #20]
    cbf4:	9109      	str	r1, [sp, #36]	; 0x24
    cbf6:	f88d 001e 	strb.w	r0, [sp, #30]
    cbfa:	9106      	str	r1, [sp, #24]
    cbfc:	9906      	ldr	r1, [sp, #24]
    cbfe:	9803      	ldr	r0, [sp, #12]
    cc00:	f000 fa62 	bl	d0c8 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hd98ff8af8e86e565E>
    cc04:	9001      	str	r0, [sp, #4]
    cc06:	9100      	str	r1, [sp, #0]
    cc08:	e7ff      	b.n	cc0a <_ZN4core6option15Option$LT$T$GT$3map17h652d7b279505b210E+0x54>
    cc0a:	9801      	ldr	r0, [sp, #4]
    cc0c:	9902      	ldr	r1, [sp, #8]
    cc0e:	6048      	str	r0, [r1, #4]
    cc10:	9a00      	ldr	r2, [sp, #0]
    cc12:	608a      	str	r2, [r1, #8]
    cc14:	2301      	movs	r3, #1
    cc16:	600b      	str	r3, [r1, #0]
    cc18:	e007      	b.n	cc2a <_ZN4core6option15Option$LT$T$GT$3map17h652d7b279505b210E+0x74>
    cc1a:	9804      	ldr	r0, [sp, #16]
    cc1c:	2801      	cmp	r0, #1
    cc1e:	d00c      	beq.n	cc3a <_ZN4core6option15Option$LT$T$GT$3map17h652d7b279505b210E+0x84>
    cc20:	e015      	b.n	cc4e <_ZN4core6option15Option$LT$T$GT$3map17h652d7b279505b210E+0x98>
    cc22:	2000      	movs	r0, #0
    cc24:	f88d 001e 	strb.w	r0, [sp, #30]
    cc28:	e7f7      	b.n	cc1a <_ZN4core6option15Option$LT$T$GT$3map17h652d7b279505b210E+0x64>
    cc2a:	f89d 001e 	ldrb.w	r0, [sp, #30]
    cc2e:	07c0      	lsls	r0, r0, #31
    cc30:	2800      	cmp	r0, #0
    cc32:	d1f6      	bne.n	cc22 <_ZN4core6option15Option$LT$T$GT$3map17h652d7b279505b210E+0x6c>
    cc34:	e7f1      	b.n	cc1a <_ZN4core6option15Option$LT$T$GT$3map17h652d7b279505b210E+0x64>
    cc36:	b00a      	add	sp, #40	; 0x28
    cc38:	bd80      	pop	{r7, pc}
    cc3a:	f89d 001f 	ldrb.w	r0, [sp, #31]
    cc3e:	07c0      	lsls	r0, r0, #31
    cc40:	2800      	cmp	r0, #0
    cc42:	d0f8      	beq.n	cc36 <_ZN4core6option15Option$LT$T$GT$3map17h652d7b279505b210E+0x80>
    cc44:	e7ff      	b.n	cc46 <_ZN4core6option15Option$LT$T$GT$3map17h652d7b279505b210E+0x90>
    cc46:	2000      	movs	r0, #0
    cc48:	f88d 001f 	strb.w	r0, [sp, #31]
    cc4c:	e7f3      	b.n	cc36 <_ZN4core6option15Option$LT$T$GT$3map17h652d7b279505b210E+0x80>
    cc4e:	e7f2      	b.n	cc36 <_ZN4core6option15Option$LT$T$GT$3map17h652d7b279505b210E+0x80>

0000cc50 <_ZN4core6option15Option$LT$T$GT$3map17hc87f57a0a2ce024aE>:
    cc50:	b580      	push	{r7, lr}
    cc52:	b08c      	sub	sp, #48	; 0x30
    cc54:	9103      	str	r1, [sp, #12]
    cc56:	9204      	str	r2, [sp, #16]
    cc58:	930a      	str	r3, [sp, #40]	; 0x28
    cc5a:	2100      	movs	r1, #0
    cc5c:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    cc60:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    cc64:	2101      	movs	r1, #1
    cc66:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    cc6a:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    cc6e:	9903      	ldr	r1, [sp, #12]
    cc70:	2900      	cmp	r1, #0
    cc72:	9302      	str	r3, [sp, #8]
    cc74:	9001      	str	r0, [sp, #4]
    cc76:	d001      	beq.n	cc7c <_ZN4core6option15Option$LT$T$GT$3map17hc87f57a0a2ce024aE+0x2c>
    cc78:	e7ff      	b.n	cc7a <_ZN4core6option15Option$LT$T$GT$3map17hc87f57a0a2ce024aE+0x2a>
    cc7a:	e004      	b.n	cc86 <_ZN4core6option15Option$LT$T$GT$3map17hc87f57a0a2ce024aE+0x36>
    cc7c:	2000      	movs	r0, #0
    cc7e:	9901      	ldr	r1, [sp, #4]
    cc80:	6008      	str	r0, [r1, #0]
    cc82:	e020      	b.n	ccc6 <_ZN4core6option15Option$LT$T$GT$3map17hc87f57a0a2ce024aE+0x76>
    cc84:	defe      	udf	#254	; 0xfe
    cc86:	2000      	movs	r0, #0
    cc88:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    cc8c:	9904      	ldr	r1, [sp, #16]
    cc8e:	910b      	str	r1, [sp, #44]	; 0x2c
    cc90:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    cc94:	9108      	str	r1, [sp, #32]
    cc96:	9a08      	ldr	r2, [sp, #32]
    cc98:	a805      	add	r0, sp, #20
    cc9a:	9902      	ldr	r1, [sp, #8]
    cc9c:	f000 fa0a 	bl	d0b4 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h958b1d5c274bc415E>
    cca0:	e7ff      	b.n	cca2 <_ZN4core6option15Option$LT$T$GT$3map17hc87f57a0a2ce024aE+0x52>
    cca2:	9805      	ldr	r0, [sp, #20]
    cca4:	9906      	ldr	r1, [sp, #24]
    cca6:	9a07      	ldr	r2, [sp, #28]
    cca8:	9b01      	ldr	r3, [sp, #4]
    ccaa:	60da      	str	r2, [r3, #12]
    ccac:	6099      	str	r1, [r3, #8]
    ccae:	6058      	str	r0, [r3, #4]
    ccb0:	2001      	movs	r0, #1
    ccb2:	6018      	str	r0, [r3, #0]
    ccb4:	e007      	b.n	ccc6 <_ZN4core6option15Option$LT$T$GT$3map17hc87f57a0a2ce024aE+0x76>
    ccb6:	9803      	ldr	r0, [sp, #12]
    ccb8:	2801      	cmp	r0, #1
    ccba:	d00c      	beq.n	ccd6 <_ZN4core6option15Option$LT$T$GT$3map17hc87f57a0a2ce024aE+0x86>
    ccbc:	e015      	b.n	ccea <_ZN4core6option15Option$LT$T$GT$3map17hc87f57a0a2ce024aE+0x9a>
    ccbe:	2000      	movs	r0, #0
    ccc0:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    ccc4:	e7f7      	b.n	ccb6 <_ZN4core6option15Option$LT$T$GT$3map17hc87f57a0a2ce024aE+0x66>
    ccc6:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
    ccca:	07c0      	lsls	r0, r0, #31
    cccc:	2800      	cmp	r0, #0
    ccce:	d1f6      	bne.n	ccbe <_ZN4core6option15Option$LT$T$GT$3map17hc87f57a0a2ce024aE+0x6e>
    ccd0:	e7f1      	b.n	ccb6 <_ZN4core6option15Option$LT$T$GT$3map17hc87f57a0a2ce024aE+0x66>
    ccd2:	b00c      	add	sp, #48	; 0x30
    ccd4:	bd80      	pop	{r7, pc}
    ccd6:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    ccda:	07c0      	lsls	r0, r0, #31
    ccdc:	2800      	cmp	r0, #0
    ccde:	d0f8      	beq.n	ccd2 <_ZN4core6option15Option$LT$T$GT$3map17hc87f57a0a2ce024aE+0x82>
    cce0:	e7ff      	b.n	cce2 <_ZN4core6option15Option$LT$T$GT$3map17hc87f57a0a2ce024aE+0x92>
    cce2:	2000      	movs	r0, #0
    cce4:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    cce8:	e7f3      	b.n	ccd2 <_ZN4core6option15Option$LT$T$GT$3map17hc87f57a0a2ce024aE+0x82>
    ccea:	e7f2      	b.n	ccd2 <_ZN4core6option15Option$LT$T$GT$3map17hc87f57a0a2ce024aE+0x82>

0000ccec <_ZN4core6option15Option$LT$T$GT$5ok_or17h6eca3184bca64f06E>:
    ccec:	b085      	sub	sp, #20
    ccee:	9000      	str	r0, [sp, #0]
    ccf0:	2000      	movs	r0, #0
    ccf2:	f88d 000b 	strb.w	r0, [sp, #11]
    ccf6:	f88d 000a 	strb.w	r0, [sp, #10]
    ccfa:	2001      	movs	r0, #1
    ccfc:	f88d 000b 	strb.w	r0, [sp, #11]
    cd00:	f88d 000a 	strb.w	r0, [sp, #10]
    cd04:	9800      	ldr	r0, [sp, #0]
    cd06:	2800      	cmp	r0, #0
    cd08:	4601      	mov	r1, r0
    cd0a:	bf18      	it	ne
    cd0c:	2101      	movne	r1, #1
    cd0e:	2800      	cmp	r0, #0
    cd10:	d001      	beq.n	cd16 <_ZN4core6option15Option$LT$T$GT$5ok_or17h6eca3184bca64f06E+0x2a>
    cd12:	e7ff      	b.n	cd14 <_ZN4core6option15Option$LT$T$GT$5ok_or17h6eca3184bca64f06E+0x28>
    cd14:	e005      	b.n	cd22 <_ZN4core6option15Option$LT$T$GT$5ok_or17h6eca3184bca64f06E+0x36>
    cd16:	2000      	movs	r0, #0
    cd18:	f88d 000a 	strb.w	r0, [sp, #10]
    cd1c:	9001      	str	r0, [sp, #4]
    cd1e:	e007      	b.n	cd30 <_ZN4core6option15Option$LT$T$GT$5ok_or17h6eca3184bca64f06E+0x44>
    cd20:	defe      	udf	#254	; 0xfe
    cd22:	2000      	movs	r0, #0
    cd24:	f88d 000b 	strb.w	r0, [sp, #11]
    cd28:	9800      	ldr	r0, [sp, #0]
    cd2a:	9004      	str	r0, [sp, #16]
    cd2c:	9001      	str	r0, [sp, #4]
    cd2e:	e7ff      	b.n	cd30 <_ZN4core6option15Option$LT$T$GT$5ok_or17h6eca3184bca64f06E+0x44>
    cd30:	f89d 000a 	ldrb.w	r0, [sp, #10]
    cd34:	07c0      	lsls	r0, r0, #31
    cd36:	2800      	cmp	r0, #0
    cd38:	d104      	bne.n	cd44 <_ZN4core6option15Option$LT$T$GT$5ok_or17h6eca3184bca64f06E+0x58>
    cd3a:	e7ff      	b.n	cd3c <_ZN4core6option15Option$LT$T$GT$5ok_or17h6eca3184bca64f06E+0x50>
    cd3c:	9800      	ldr	r0, [sp, #0]
    cd3e:	2800      	cmp	r0, #0
    cd40:	d107      	bne.n	cd52 <_ZN4core6option15Option$LT$T$GT$5ok_or17h6eca3184bca64f06E+0x66>
    cd42:	e010      	b.n	cd66 <_ZN4core6option15Option$LT$T$GT$5ok_or17h6eca3184bca64f06E+0x7a>
    cd44:	2000      	movs	r0, #0
    cd46:	f88d 000a 	strb.w	r0, [sp, #10]
    cd4a:	e7f7      	b.n	cd3c <_ZN4core6option15Option$LT$T$GT$5ok_or17h6eca3184bca64f06E+0x50>
    cd4c:	9801      	ldr	r0, [sp, #4]
    cd4e:	b005      	add	sp, #20
    cd50:	4770      	bx	lr
    cd52:	f89d 000b 	ldrb.w	r0, [sp, #11]
    cd56:	07c0      	lsls	r0, r0, #31
    cd58:	2800      	cmp	r0, #0
    cd5a:	d0f7      	beq.n	cd4c <_ZN4core6option15Option$LT$T$GT$5ok_or17h6eca3184bca64f06E+0x60>
    cd5c:	e7ff      	b.n	cd5e <_ZN4core6option15Option$LT$T$GT$5ok_or17h6eca3184bca64f06E+0x72>
    cd5e:	2000      	movs	r0, #0
    cd60:	f88d 000b 	strb.w	r0, [sp, #11]
    cd64:	e7f2      	b.n	cd4c <_ZN4core6option15Option$LT$T$GT$5ok_or17h6eca3184bca64f06E+0x60>
    cd66:	e7f1      	b.n	cd4c <_ZN4core6option15Option$LT$T$GT$5ok_or17h6eca3184bca64f06E+0x60>

0000cd68 <_ZN4core6option15Option$LT$T$GT$6as_mut17h8929fdf00293b903E>:
    cd68:	b084      	sub	sp, #16
    cd6a:	9002      	str	r0, [sp, #8]
    cd6c:	6801      	ldr	r1, [r0, #0]
    cd6e:	2900      	cmp	r1, #0
    cd70:	9000      	str	r0, [sp, #0]
    cd72:	d001      	beq.n	cd78 <_ZN4core6option15Option$LT$T$GT$6as_mut17h8929fdf00293b903E+0x10>
    cd74:	e7ff      	b.n	cd76 <_ZN4core6option15Option$LT$T$GT$6as_mut17h8929fdf00293b903E+0xe>
    cd76:	e003      	b.n	cd80 <_ZN4core6option15Option$LT$T$GT$6as_mut17h8929fdf00293b903E+0x18>
    cd78:	2000      	movs	r0, #0
    cd7a:	9001      	str	r0, [sp, #4]
    cd7c:	e005      	b.n	cd8a <_ZN4core6option15Option$LT$T$GT$6as_mut17h8929fdf00293b903E+0x22>
    cd7e:	defe      	udf	#254	; 0xfe
    cd80:	9800      	ldr	r0, [sp, #0]
    cd82:	1d01      	adds	r1, r0, #4
    cd84:	9103      	str	r1, [sp, #12]
    cd86:	9101      	str	r1, [sp, #4]
    cd88:	e7ff      	b.n	cd8a <_ZN4core6option15Option$LT$T$GT$6as_mut17h8929fdf00293b903E+0x22>
    cd8a:	9801      	ldr	r0, [sp, #4]
    cd8c:	b004      	add	sp, #16
    cd8e:	4770      	bx	lr

0000cd90 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E>:
    cd90:	b084      	sub	sp, #16
    cd92:	9002      	str	r0, [sp, #8]
    cd94:	9802      	ldr	r0, [sp, #8]
    cd96:	2800      	cmp	r0, #0
    cd98:	4602      	mov	r2, r0
    cd9a:	bf18      	it	ne
    cd9c:	2201      	movne	r2, #1
    cd9e:	2800      	cmp	r0, #0
    cda0:	9101      	str	r1, [sp, #4]
    cda2:	d001      	beq.n	cda8 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x18>
    cda4:	e7ff      	b.n	cda6 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x16>
    cda6:	e009      	b.n	cdbc <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x2c>
    cda8:	f24f 7040 	movw	r0, #63296	; 0xf740
    cdac:	f2c0 0001 	movt	r0, #1
    cdb0:	212b      	movs	r1, #43	; 0x2b
    cdb2:	9a01      	ldr	r2, [sp, #4]
    cdb4:	f00a fdd8 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    cdb8:	defe      	udf	#254	; 0xfe
    cdba:	defe      	udf	#254	; 0xfe
    cdbc:	9802      	ldr	r0, [sp, #8]
    cdbe:	9003      	str	r0, [sp, #12]
    cdc0:	9902      	ldr	r1, [sp, #8]
    cdc2:	2900      	cmp	r1, #0
    cdc4:	9000      	str	r0, [sp, #0]
    cdc6:	d003      	beq.n	cdd0 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x40>
    cdc8:	e7ff      	b.n	cdca <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x3a>
    cdca:	9800      	ldr	r0, [sp, #0]
    cdcc:	b004      	add	sp, #16
    cdce:	4770      	bx	lr
    cdd0:	e7fb      	b.n	cdca <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x3a>

0000cdd2 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h430caac74862e039E>:
    cdd2:	b081      	sub	sp, #4
    cdd4:	2100      	movs	r1, #0
    cdd6:	6001      	str	r1, [r0, #0]
    cdd8:	b001      	add	sp, #4
    cdda:	4770      	bx	lr

0000cddc <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5e3b0b54b76961bcE>:
    cddc:	b580      	push	{r7, lr}
    cdde:	b082      	sub	sp, #8
    cde0:	9001      	str	r0, [sp, #4]
    cde2:	f7ff ff83 	bl	ccec <_ZN4core6option15Option$LT$T$GT$5ok_or17h6eca3184bca64f06E>
    cde6:	9000      	str	r0, [sp, #0]
    cde8:	e7ff      	b.n	cdea <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5e3b0b54b76961bcE+0xe>
    cdea:	9800      	ldr	r0, [sp, #0]
    cdec:	b002      	add	sp, #8
    cdee:	bd80      	pop	{r7, pc}

0000cdf0 <_ZN22piet_embedded_graphics7display18set_display_pixels17hd0f20e3b4184e9a6E>:
        item
    ).expect("draw blocks fail");
}

/// Draw the pixel colours to the display at the window from (sx,sy) to (ex,ey)
pub fn set_display_pixels<P: IntoIterator<Item = u16>>(sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
    cdf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cdf2:	b08d      	sub	sp, #52	; 0x34
    cdf4:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
    cdf8:	469e      	mov	lr, r3
    cdfa:	4614      	mov	r4, r2
    cdfc:	460d      	mov	r5, r1
    cdfe:	4606      	mov	r6, r0
    ce00:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
    ce04:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
    ce08:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    ce0c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    unsafe { DISPLAY.set_pixels(sx, sy, ex, ey, colors) }
    ce10:	466f      	mov	r7, sp
    ce12:	f8c7 c004 	str.w	ip, [r7, #4]
    ce16:	603b      	str	r3, [r7, #0]
    ce18:	f240 1348 	movw	r3, #328	; 0x148
    ce1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce20:	900a      	str	r0, [sp, #40]	; 0x28
    ce22:	4618      	mov	r0, r3
    ce24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ce26:	9109      	str	r1, [sp, #36]	; 0x24
    ce28:	4619      	mov	r1, r3
    ce2a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    ce2e:	9208      	str	r2, [sp, #32]
    ce30:	4662      	mov	r2, ip
    ce32:	9b08      	ldr	r3, [sp, #32]
    ce34:	f8cd e01c 	str.w	lr, [sp, #28]
    ce38:	9406      	str	r4, [sp, #24]
    ce3a:	9505      	str	r5, [sp, #20]
    ce3c:	9604      	str	r6, [sp, #16]
    ce3e:	f000 f807 	bl	ce50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E>
    ce42:	9003      	str	r0, [sp, #12]
    ce44:	e7ff      	b.n	ce46 <_ZN22piet_embedded_graphics7display18set_display_pixels17hd0f20e3b4184e9a6E+0x56>
}
    ce46:	9803      	ldr	r0, [sp, #12]
    ce48:	f000 0001 	and.w	r0, r0, #1
    ce4c:	b00d      	add	sp, #52	; 0x34
    ce4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ce50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E>:
    pub fn set_pixels<P: IntoIterator<Item = u16>>(&mut self, sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
    ce50:	b5f0      	push	{r4, r5, r6, r7, lr}
    ce52:	b091      	sub	sp, #68	; 0x44
    ce54:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
    ce58:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
    ce5c:	461c      	mov	r4, r3
    ce5e:	4615      	mov	r5, r2
    ce60:	460e      	mov	r6, r1
    ce62:	900a      	str	r0, [sp, #40]	; 0x28
    ce64:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
    ce68:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
    ce6c:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    ce70:	f8ad e032 	strh.w	lr, [sp, #50]	; 0x32
    ce74:	2700      	movs	r7, #0
        self.set_address_window(sx, sy, ex, ey)?;
    ce76:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
    ce7a:	2701      	movs	r7, #1
    ce7c:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
    ce80:	466f      	mov	r7, sp
    ce82:	f8c7 e000 	str.w	lr, [r7]
    ce86:	9008      	str	r0, [sp, #32]
    ce88:	f8cd c01c 	str.w	ip, [sp, #28]
    ce8c:	9406      	str	r4, [sp, #24]
    ce8e:	9505      	str	r5, [sp, #20]
    ce90:	9604      	str	r6, [sp, #16]
    ce92:	f7fc ff17 	bl	9cc4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>
    ce96:	9003      	str	r0, [sp, #12]
    ce98:	e7ff      	b.n	ce9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x4a>
    ce9a:	9803      	ldr	r0, [sp, #12]
    ce9c:	f000 0001 	and.w	r0, r0, #1
    cea0:	f7fb fe64 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    cea4:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
    cea8:	e7ff      	b.n	ceaa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x5a>
    ceaa:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
    ceae:	07c1      	lsls	r1, r0, #31
    ceb0:	2900      	cmp	r1, #0
    ceb2:	d001      	beq.n	ceb8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x68>
    ceb4:	e7ff      	b.n	ceb6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x66>
    ceb6:	e009      	b.n	cecc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x7c>
    ceb8:	2000      	movs	r0, #0
        self.write_pixels(colors) ? ;
    ceba:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    cebe:	9808      	ldr	r0, [sp, #32]
    cec0:	9907      	ldr	r1, [sp, #28]
    cec2:	f000 f848 	bl	cf56 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E>
    cec6:	9002      	str	r0, [sp, #8]
    cec8:	e00d      	b.n	cee6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x96>
        self.set_address_window(sx, sy, ex, ey)?;
    ceca:	defe      	udf	#254	; 0xfe
    cecc:	f005 f94b 	bl	12166 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
    ced0:	e003      	b.n	ceda <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x8a>
    }
    ced2:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    ced6:	b011      	add	sp, #68	; 0x44
    ced8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        self.set_address_window(sx, sy, ex, ey)?;
    ceda:	f008 faed 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    cede:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    cee2:	e7ff      	b.n	cee4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x94>
    cee4:	e031      	b.n	cf4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xfa>
        self.write_pixels(colors) ? ;
    cee6:	9802      	ldr	r0, [sp, #8]
    cee8:	f000 0001 	and.w	r0, r0, #1
    ceec:	f7fb fe3e 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    cef0:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    cef4:	e7ff      	b.n	cef6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xa6>
    cef6:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
    cefa:	07c1      	lsls	r1, r0, #31
    cefc:	2900      	cmp	r1, #0
    cefe:	d001      	beq.n	cf04 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xb4>
    cf00:	e7ff      	b.n	cf02 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xb2>
    cf02:	e004      	b.n	cf0e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xbe>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    cf04:	f006 fb6a 	bl	135dc <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    cf08:	9001      	str	r0, [sp, #4]
    cf0a:	e009      	b.n	cf20 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xd0>
        self.write_pixels(colors) ? ;
    cf0c:	defe      	udf	#254	; 0xfe
    cf0e:	f005 f92a 	bl	12166 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
    cf12:	e7ff      	b.n	cf14 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xc4>
    cf14:	f008 fad0 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    cf18:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    cf1c:	e7ff      	b.n	cf1e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xce>
    cf1e:	e014      	b.n	cf4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xfa>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    cf20:	f24f 716b 	movw	r1, #63339	; 0xf76b
    cf24:	f2c0 0101 	movt	r1, #1
    cf28:	f24f 73c8 	movw	r3, #63432	; 0xf7c8
    cf2c:	f2c0 0301 	movt	r3, #1
    cf30:	220e      	movs	r2, #14
    cf32:	9801      	ldr	r0, [sp, #4]
    cf34:	f7fb fde1 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    cf38:	e7ff      	b.n	cf3a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xea>
    cf3a:	2000      	movs	r0, #0
        Ok(())
    cf3c:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    }
    cf40:	e7c7      	b.n	ced2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x82>
    cf42:	2000      	movs	r0, #0
    cf44:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    cf48:	e7c3      	b.n	ced2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x82>
    cf4a:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    cf4e:	07c0      	lsls	r0, r0, #31
    cf50:	2800      	cmp	r0, #0
    cf52:	d1f6      	bne.n	cf42 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xf2>
    cf54:	e7bd      	b.n	ced2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x82>

0000cf56 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E>:
    pub fn write_pixels<P: IntoIterator<Item = u16>>(&mut self, colors: P) -> Result <(), ()> {
    cf56:	b580      	push	{r7, lr}
    cf58:	b094      	sub	sp, #80	; 0x50
    cf5a:	900d      	str	r0, [sp, #52]	; 0x34
    cf5c:	910e      	str	r1, [sp, #56]	; 0x38
    cf5e:	2200      	movs	r2, #0
        self.write_command(Instruction::RAMWR, None)?;
    cf60:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
    cf64:	2301      	movs	r3, #1
    cf66:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    cf6a:	232c      	movs	r3, #44	; 0x2c
    cf6c:	f88d 301f 	strb.w	r3, [sp, #31]
    cf70:	9209      	str	r2, [sp, #36]	; 0x24
    cf72:	9208      	str	r2, [sp, #32]
    cf74:	9208      	str	r2, [sp, #32]
    cf76:	9a08      	ldr	r2, [sp, #32]
    cf78:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cf7a:	f89d c01f 	ldrb.w	ip, [sp, #31]
    cf7e:	9006      	str	r0, [sp, #24]
    cf80:	9105      	str	r1, [sp, #20]
    cf82:	4661      	mov	r1, ip
    cf84:	f7fc fdad 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    cf88:	9004      	str	r0, [sp, #16]
    cf8a:	e7ff      	b.n	cf8c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x36>
    cf8c:	9804      	ldr	r0, [sp, #16]
    cf8e:	f000 0001 	and.w	r0, r0, #1
    cf92:	f7fb fdeb 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    cf96:	f88d 001e 	strb.w	r0, [sp, #30]
    cf9a:	e7ff      	b.n	cf9c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x46>
    cf9c:	f89d 001e 	ldrb.w	r0, [sp, #30]
    cfa0:	07c1      	lsls	r1, r0, #31
    cfa2:	2900      	cmp	r1, #0
    cfa4:	d001      	beq.n	cfaa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x54>
    cfa6:	e7ff      	b.n	cfa8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x52>
    cfa8:	e008      	b.n	cfbc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x66>
    cfaa:	2000      	movs	r0, #0
        for color in colors {
    cfac:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    cfb0:	9805      	ldr	r0, [sp, #20]
    cfb2:	f000 f86e 	bl	d092 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcdf096192109e52aE>
    cfb6:	9003      	str	r0, [sp, #12]
    cfb8:	e00d      	b.n	cfd6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x80>
        self.write_command(Instruction::RAMWR, None)?;
    cfba:	defe      	udf	#254	; 0xfe
    cfbc:	f005 f8d3 	bl	12166 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
    cfc0:	e003      	b.n	cfca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x74>
    }
    cfc2:	f89d 001d 	ldrb.w	r0, [sp, #29]
    cfc6:	b014      	add	sp, #80	; 0x50
    cfc8:	bd80      	pop	{r7, pc}
        self.write_command(Instruction::RAMWR, None)?;
    cfca:	f008 fa75 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    cfce:	f88d 001d 	strb.w	r0, [sp, #29]
    cfd2:	e7ff      	b.n	cfd4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x7e>
    cfd4:	e057      	b.n	d086 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x130>
        for color in colors {
    cfd6:	9803      	ldr	r0, [sp, #12]
    cfd8:	900a      	str	r0, [sp, #40]	; 0x28
    cfda:	e7ff      	b.n	cfdc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x86>
    cfdc:	a80a      	add	r0, sp, #40	; 0x28
    cfde:	f000 f85c 	bl	d09a <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4e486716e9c6f20bE>
    cfe2:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
    cfe6:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
    cfea:	e7ff      	b.n	cfec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x96>
    cfec:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    cff0:	4601      	mov	r1, r0
    cff2:	2800      	cmp	r0, #0
    cff4:	d001      	beq.n	cffa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xa4>
    cff6:	e7ff      	b.n	cff8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xa2>
    cff8:	e001      	b.n	cffe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xa8>
        }
    cffa:	e02b      	b.n	d054 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xfe>
        for color in colors {
    cffc:	defe      	udf	#254	; 0xfe
    cffe:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
    d002:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
    d006:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    d00a:	f8ad 004e 	strh.w	r0, [sp, #78]	; 0x4e
            self.write_word(color)?;
    d00e:	9906      	ldr	r1, [sp, #24]
    d010:	9002      	str	r0, [sp, #8]
    d012:	4608      	mov	r0, r1
    d014:	9902      	ldr	r1, [sp, #8]
    d016:	f7fc fc95 	bl	9944 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    d01a:	9001      	str	r0, [sp, #4]
    d01c:	e7ff      	b.n	d01e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xc8>
    d01e:	9801      	ldr	r0, [sp, #4]
    d020:	f000 0001 	and.w	r0, r0, #1
    d024:	f7fb fda2 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    d028:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    d02c:	e7ff      	b.n	d02e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xd8>
    d02e:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    d032:	07c1      	lsls	r1, r0, #31
    d034:	2900      	cmp	r1, #0
    d036:	d001      	beq.n	d03c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xe6>
    d038:	e7ff      	b.n	d03a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xe4>
    d03a:	e001      	b.n	d040 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xea>
        for color in colors {
    d03c:	e7ce      	b.n	cfdc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x86>
            self.write_word(color)?;
    d03e:	defe      	udf	#254	; 0xfe
    d040:	f005 f891 	bl	12166 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
    d044:	e7ff      	b.n	d046 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xf0>
    d046:	f008 fa37 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    d04a:	f88d 001d 	strb.w	r0, [sp, #29]
    d04e:	e7ff      	b.n	d050 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xfa>
        }
    d050:	e7ff      	b.n	d052 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xfc>
    }
    d052:	e018      	b.n	d086 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x130>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    d054:	f006 fac2 	bl	135dc <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    d058:	9000      	str	r0, [sp, #0]
    d05a:	e7ff      	b.n	d05c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x106>
    d05c:	f24f 716b 	movw	r1, #63339	; 0xf76b
    d060:	f2c0 0101 	movt	r1, #1
    d064:	f24f 73d8 	movw	r3, #63448	; 0xf7d8
    d068:	f2c0 0301 	movt	r3, #1
    d06c:	220e      	movs	r2, #14
    d06e:	9800      	ldr	r0, [sp, #0]
    d070:	f7fb fd43 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    d074:	e7ff      	b.n	d076 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x120>
    d076:	2000      	movs	r0, #0
        Ok(())
    d078:	f88d 001d 	strb.w	r0, [sp, #29]
    }
    d07c:	e7a1      	b.n	cfc2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x6c>
    d07e:	2000      	movs	r0, #0
    d080:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    d084:	e79d      	b.n	cfc2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x6c>
    d086:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    d08a:	07c0      	lsls	r0, r0, #31
    d08c:	2800      	cmp	r0, #0
    d08e:	d1f6      	bne.n	d07e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x128>
    d090:	e797      	b.n	cfc2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x6c>

0000d092 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcdf096192109e52aE>:
    d092:	b081      	sub	sp, #4
    d094:	9000      	str	r0, [sp, #0]
    d096:	b001      	add	sp, #4
    d098:	4770      	bx	lr

0000d09a <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4e486716e9c6f20bE>:
    d09a:	b580      	push	{r7, lr}
    d09c:	b084      	sub	sp, #16
    d09e:	9003      	str	r0, [sp, #12]
    d0a0:	6800      	ldr	r0, [r0, #0]
    d0a2:	f7ff fc57 	bl	c954 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE>
    d0a6:	9002      	str	r0, [sp, #8]
    d0a8:	9101      	str	r1, [sp, #4]
    d0aa:	e7ff      	b.n	d0ac <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4e486716e9c6f20bE+0x12>
    d0ac:	9802      	ldr	r0, [sp, #8]
    d0ae:	9901      	ldr	r1, [sp, #4]
    d0b0:	b004      	add	sp, #16
    d0b2:	bd80      	pop	{r7, pc}

0000d0b4 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h958b1d5c274bc415E>:
    d0b4:	b580      	push	{r7, lr}
    d0b6:	b082      	sub	sp, #8
    d0b8:	9200      	str	r2, [sp, #0]
    d0ba:	9101      	str	r1, [sp, #4]
    d0bc:	9a00      	ldr	r2, [sp, #0]
    d0be:	f003 fe7b 	bl	10db8 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h8dd34ea84f1c7a05E>
    d0c2:	e7ff      	b.n	d0c4 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h958b1d5c274bc415E+0x10>
    d0c4:	b002      	add	sp, #8
    d0c6:	bd80      	pop	{r7, pc}

0000d0c8 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hd98ff8af8e86e565E>:
    d0c8:	b580      	push	{r7, lr}
    d0ca:	b084      	sub	sp, #16
    d0cc:	9102      	str	r1, [sp, #8]
    d0ce:	9003      	str	r0, [sp, #12]
    d0d0:	9902      	ldr	r1, [sp, #8]
    d0d2:	f003 fe83 	bl	10ddc <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hd6b4984bbe637b42E>
    d0d6:	9001      	str	r0, [sp, #4]
    d0d8:	9100      	str	r1, [sp, #0]
    d0da:	e7ff      	b.n	d0dc <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hd98ff8af8e86e565E+0x14>
    d0dc:	9801      	ldr	r0, [sp, #4]
    d0de:	9900      	ldr	r1, [sp, #0]
    d0e0:	b004      	add	sp, #16
    d0e2:	bd80      	pop	{r7, pc}

0000d0e4 <_ZN8libchip814Chip8$LT$T$GT$3new17h746d7acd3c3a5f1eE>:
    0xf0, 0x80, 0xf0, 0x80, 0x80, // f
];

impl<T: Hardware> Chip8<T> {
    /// Create an interpreter instance.
    pub fn new(hw: T) -> Self {
    d0e4:	b570      	push	{r4, r5, r6, lr}
    d0e6:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
    d0ea:	b082      	sub	sp, #8
    d0ec:	f10d 0e0c 	add.w	lr, sp, #12
    d0f0:	f50e 5282 	add.w	r2, lr, #4160	; 0x1040
    d0f4:	9107      	str	r1, [sp, #28]
    d0f6:	9907      	ldr	r1, [sp, #28]
    d0f8:	9106      	str	r1, [sp, #24]
    d0fa:	2100      	movs	r1, #0
        Self {
            v: [0; REGS],
    d0fc:	910b      	str	r1, [sp, #44]	; 0x2c
    d0fe:	910a      	str	r1, [sp, #40]	; 0x28
    d100:	9109      	str	r1, [sp, #36]	; 0x24
    d102:	9108      	str	r1, [sp, #32]
    d104:	ab0c      	add	r3, sp, #48	; 0x30
    d106:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
            i: 0,
            dt: 0,
            st: 0,
            pc: 0,
            sp: 0,
            mem: [0; MEMS],
    d10a:	9005      	str	r0, [sp, #20]
    d10c:	4618      	mov	r0, r3
    d10e:	9104      	str	r1, [sp, #16]
    d110:	4661      	mov	r1, ip
    d112:	9203      	str	r2, [sp, #12]
    d114:	9302      	str	r3, [sp, #8]
    d116:	f8cd c004 	str.w	ip, [sp, #4]
    d11a:	f010 fff5 	bl	1e108 <__aeabi_memclr>
            stack: [0; STACKS],
    d11e:	9804      	ldr	r0, [sp, #16]
    d120:	9903      	ldr	r1, [sp, #12]
    d122:	6008      	str	r0, [r1, #0]
    d124:	f841 0c04 	str.w	r0, [r1, #-4]
    d128:	f841 0c08 	str.w	r0, [r1, #-8]
    d12c:	f841 0c0c 	str.w	r0, [r1, #-12]
    d130:	f841 0c10 	str.w	r0, [r1, #-16]
    d134:	f841 0c14 	str.w	r0, [r1, #-20]
    d138:	f841 0c18 	str.w	r0, [r1, #-24]
    d13c:	f841 0c1c 	str.w	r0, [r1, #-28]
            time: None,
    d140:	6088      	str	r0, [r1, #8]
    d142:	6048      	str	r0, [r1, #4]
            running: false,
            hw,
    d144:	9a06      	ldr	r2, [sp, #24]
    d146:	618a      	str	r2, [r1, #24]
        Self {
    d148:	9a08      	ldr	r2, [sp, #32]
    d14a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d14c:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    d150:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
    d154:	9c05      	ldr	r4, [sp, #20]
    d156:	f8c4 e040 	str.w	lr, [r4, #64]	; 0x40
    d15a:	f8c4 c03c 	str.w	ip, [r4, #60]	; 0x3c
    d15e:	63a3      	str	r3, [r4, #56]	; 0x38
    d160:	6362      	str	r2, [r4, #52]	; 0x34
    d162:	8220      	strh	r0, [r4, #16]
    d164:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
    d168:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
    d16c:	8260      	strh	r0, [r4, #18]
    d16e:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
    d172:	f104 0047 	add.w	r0, r4, #71	; 0x47
    d176:	9902      	ldr	r1, [sp, #8]
    d178:	9a01      	ldr	r2, [sp, #4]
    d17a:	f010 ffc9 	bl	1e110 <__aeabi_memcpy>
    d17e:	9905      	ldr	r1, [sp, #20]
    d180:	f101 0214 	add.w	r2, r1, #20
    d184:	f10d 0e10 	add.w	lr, sp, #16
    d188:	f50e 5181 	add.w	r1, lr, #4128	; 0x1020
    d18c:	2320      	movs	r3, #32
    d18e:	9000      	str	r0, [sp, #0]
    d190:	4610      	mov	r0, r2
    d192:	461a      	mov	r2, r3
    d194:	f010 ffbc 	bl	1e110 <__aeabi_memcpy>
    d198:	9903      	ldr	r1, [sp, #12]
    d19a:	684a      	ldr	r2, [r1, #4]
    d19c:	688b      	ldr	r3, [r1, #8]
    d19e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    d1a2:	f8d1 e010 	ldr.w	lr, [r1, #16]
    d1a6:	9c05      	ldr	r4, [sp, #20]
    d1a8:	6063      	str	r3, [r4, #4]
    d1aa:	6022      	str	r2, [r4, #0]
    d1ac:	f8c4 e00c 	str.w	lr, [r4, #12]
    d1b0:	f8c4 c008 	str.w	ip, [r4, #8]
    d1b4:	f241 0247 	movw	r2, #4167	; 0x1047
    d1b8:	9b04      	ldr	r3, [sp, #16]
    d1ba:	54a3      	strb	r3, [r4, r2]
    d1bc:	698a      	ldr	r2, [r1, #24]
    d1be:	f241 0c48 	movw	ip, #4168	; 0x1048
    d1c2:	f844 200c 	str.w	r2, [r4, ip]
        }
    }
    d1c6:	f50d 5d83 	add.w	sp, sp, #4192	; 0x1060
    d1ca:	b002      	add	sp, #8
    d1cc:	bd70      	pop	{r4, r5, r6, pc}

0000d1ce <_ZN8libchip814Chip8$LT$T$GT$3pop17h503862bdc0785684E>:
    fn push(&mut self, item: u16) {
        self.stack[self.sp as usize] = item;
        self.sp = self.sp.wrapping_add(1);
    }

    fn pop(&mut self) -> u16 {
    d1ce:	b580      	push	{r7, lr}
    d1d0:	b086      	sub	sp, #24
    d1d2:	9004      	str	r0, [sp, #16]
        self.sp = self.sp.wrapping_sub(1);
    d1d4:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
    d1d8:	2201      	movs	r2, #1
    d1da:	9003      	str	r0, [sp, #12]
    d1dc:	4608      	mov	r0, r1
    d1de:	4611      	mov	r1, r2
    d1e0:	f009 fc9e 	bl	16b20 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h84bf0bac3f755209E>
    d1e4:	9002      	str	r0, [sp, #8]
    d1e6:	e7ff      	b.n	d1e8 <_ZN8libchip814Chip8$LT$T$GT$3pop17h503862bdc0785684E+0x1a>
    d1e8:	9802      	ldr	r0, [sp, #8]
    d1ea:	9903      	ldr	r1, [sp, #12]
    d1ec:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
        let item = self.stack[self.sp as usize];
    d1f0:	f891 2046 	ldrb.w	r2, [r1, #70]	; 0x46
    d1f4:	4613      	mov	r3, r2
    d1f6:	2a0f      	cmp	r2, #15
    d1f8:	9301      	str	r3, [sp, #4]
    d1fa:	d80a      	bhi.n	d212 <_ZN8libchip814Chip8$LT$T$GT$3pop17h503862bdc0785684E+0x44>
    d1fc:	e7ff      	b.n	d1fe <_ZN8libchip814Chip8$LT$T$GT$3pop17h503862bdc0785684E+0x30>
    d1fe:	9803      	ldr	r0, [sp, #12]
    d200:	9901      	ldr	r1, [sp, #4]
    d202:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    d206:	8a92      	ldrh	r2, [r2, #20]
    d208:	f8ad 2016 	strh.w	r2, [sp, #22]
        item
    }
    d20c:	4610      	mov	r0, r2
    d20e:	b006      	add	sp, #24
    d210:	bd80      	pop	{r7, pc}
        let item = self.stack[self.sp as usize];
    d212:	f64f 0040 	movw	r0, #63552	; 0xf840
    d216:	f2c0 0001 	movt	r0, #1
    d21a:	2210      	movs	r2, #16
    d21c:	9901      	ldr	r1, [sp, #4]
    d21e:	f00a fbb9 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d222:	defe      	udf	#254	; 0xfe

0000d224 <_ZN8libchip814Chip8$LT$T$GT$3run17he09519a5fb5b03e9E>:
    pub fn run(mut self, rom: &[u8]) {
    d224:	b580      	push	{r7, lr}
    d226:	b086      	sub	sp, #24
    d228:	9104      	str	r1, [sp, #16]
    d22a:	9205      	str	r2, [sp, #20]
        self.setup();
    d22c:	9003      	str	r0, [sp, #12]
    d22e:	9202      	str	r2, [sp, #8]
    d230:	9101      	str	r1, [sp, #4]
    d232:	f003 ff35 	bl	110a0 <_ZN8libchip814Chip8$LT$T$GT$5setup17h6dafcb9be3b52c51E>
    d236:	e7ff      	b.n	d238 <_ZN8libchip814Chip8$LT$T$GT$3run17he09519a5fb5b03e9E+0x14>
        self.load(rom);
    d238:	9803      	ldr	r0, [sp, #12]
    d23a:	9901      	ldr	r1, [sp, #4]
    d23c:	9a02      	ldr	r2, [sp, #8]
    d23e:	f003 fddf 	bl	10e00 <_ZN8libchip814Chip8$LT$T$GT$4load17h2a4cfd313d02c69aE>
    d242:	e7ff      	b.n	d244 <_ZN8libchip814Chip8$LT$T$GT$3run17he09519a5fb5b03e9E+0x20>
        while self.running {
    d244:	e7ff      	b.n	d246 <_ZN8libchip814Chip8$LT$T$GT$3run17he09519a5fb5b03e9E+0x22>
    d246:	f241 0047 	movw	r0, #4167	; 0x1047
    d24a:	9903      	ldr	r1, [sp, #12]
    d24c:	5c08      	ldrb	r0, [r1, r0]
    d24e:	07c0      	lsls	r0, r0, #31
    d250:	2800      	cmp	r0, #0
    d252:	d101      	bne.n	d258 <_ZN8libchip814Chip8$LT$T$GT$3run17he09519a5fb5b03e9E+0x34>
    d254:	e7ff      	b.n	d256 <_ZN8libchip814Chip8$LT$T$GT$3run17he09519a5fb5b03e9E+0x32>
    }
    d256:	e00c      	b.n	d272 <_ZN8libchip814Chip8$LT$T$GT$3run17he09519a5fb5b03e9E+0x4e>
            self.sched();
    d258:	9803      	ldr	r0, [sp, #12]
    d25a:	f003 fe9e 	bl	10f9a <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE>
    d25e:	e7ff      	b.n	d260 <_ZN8libchip814Chip8$LT$T$GT$3run17he09519a5fb5b03e9E+0x3c>
            self.eval();
    d260:	9803      	ldr	r0, [sp, #12]
    d262:	f000 f809 	bl	d278 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E>
    d266:	e7ff      	b.n	d268 <_ZN8libchip814Chip8$LT$T$GT$3run17he09519a5fb5b03e9E+0x44>
            self.next();
    d268:	9803      	ldr	r0, [sp, #12]
    d26a:	f003 fe04 	bl	10e76 <_ZN8libchip814Chip8$LT$T$GT$4next17h59db21f4d7eca91dE>
    d26e:	e7ff      	b.n	d270 <_ZN8libchip814Chip8$LT$T$GT$3run17he09519a5fb5b03e9E+0x4c>
        while self.running {
    d270:	e7e9      	b.n	d246 <_ZN8libchip814Chip8$LT$T$GT$3run17he09519a5fb5b03e9E+0x22>
    }
    d272:	b006      	add	sp, #24
    d274:	bd80      	pop	{r7, pc}
	...

0000d278 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E>:
        }

        return b' ';
    }

    fn eval(&mut self) {
    d278:	b570      	push	{r4, r5, r6, lr}
    d27a:	f5ad 6d6c 	sub.w	sp, sp, #3776	; 0xec0
    d27e:	f8cd 0c70 	str.w	r0, [sp, #3184]	; 0xc70
        let h = self.mem[self.pc as usize] as u16;
    d282:	8a41      	ldrh	r1, [r0, #18]
    d284:	460a      	mov	r2, r1
    d286:	2300      	movs	r3, #0
    d288:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    d28c:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
    d290:	f8cd 248c 	str.w	r2, [sp, #1164]	; 0x48c
    d294:	f043 82c0 	bne.w	10818 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x35a0>
    d298:	e7ff      	b.n	d29a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22>
    d29a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d29e:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
    d2a2:	1842      	adds	r2, r0, r1
    d2a4:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    d2a8:	4613      	mov	r3, r2
    d2aa:	f8ad 2c76 	strh.w	r2, [sp, #3190]	; 0xc76
        let l = self.mem[(self.pc + 1) as usize] as u16;
    d2ae:	8a42      	ldrh	r2, [r0, #18]
    d2b0:	3201      	adds	r2, #1
    d2b2:	fa1f fc82 	uxth.w	ip, r2
    d2b6:	4696      	mov	lr, r2
    d2b8:	4594      	cmp	ip, r2
    d2ba:	f8cd 3488 	str.w	r3, [sp, #1160]	; 0x488
    d2be:	f8cd e484 	str.w	lr, [sp, #1156]	; 0x484
    d2c2:	f043 82b4 	bne.w	1082e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x35b6>
    d2c6:	e7ff      	b.n	d2c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x50>
    d2c8:	f8dd 0484 	ldr.w	r0, [sp, #1156]	; 0x484
    d2cc:	b281      	uxth	r1, r0
    d2ce:	460a      	mov	r2, r1
    d2d0:	2300      	movs	r3, #0
    d2d2:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    d2d6:	f8cd 2480 	str.w	r2, [sp, #1152]	; 0x480
    d2da:	f043 82b4 	bne.w	10846 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x35ce>
    d2de:	e7ff      	b.n	d2e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x68>
    d2e0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d2e4:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
    d2e8:	1842      	adds	r2, r0, r1
    d2ea:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    d2ee:	4613      	mov	r3, r2
    d2f0:	f8ad 2c78 	strh.w	r2, [sp, #3192]	; 0xc78
        let inst = h << 8 | l;
    d2f4:	f8dd 2488 	ldr.w	r2, [sp, #1160]	; 0x488
    d2f8:	ea4f 2c02 	mov.w	ip, r2, lsl #8
    d2fc:	f8cd 347c 	str.w	r3, [sp, #1148]	; 0x47c
    d300:	f8cd c478 	str.w	ip, [sp, #1144]	; 0x478
    d304:	e7ff      	b.n	d306 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x8e>
    d306:	f8dd 0478 	ldr.w	r0, [sp, #1144]	; 0x478
    d30a:	f8dd 147c 	ldr.w	r1, [sp, #1148]	; 0x47c
    d30e:	ea40 0201 	orr.w	r2, r0, r1
    d312:	f8ad 2496 	strh.w	r2, [sp, #1174]	; 0x496

        let nnn = inst & 0xfff;
    d316:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    d31a:	f36f 321f 	bfc	r2, #12, #20
    d31e:	4613      	mov	r3, r2
    d320:	f8ad 2c7a 	strh.w	r2, [sp, #3194]	; 0xc7a
        let n = (inst & 0xf) as usize;
    d324:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    d328:	f002 020f 	and.w	r2, r2, #15
    d32c:	4694      	mov	ip, r2
    d32e:	f8cd 2c7c 	str.w	r2, [sp, #3196]	; 0xc7c
        let x = ((inst >> 8) & 0xf) as usize;
    d332:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    d336:	f8cd 3474 	str.w	r3, [sp, #1140]	; 0x474
    d33a:	f8cd c470 	str.w	ip, [sp, #1136]	; 0x470
    d33e:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
    d342:	e7ff      	b.n	d344 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xcc>
    d344:	f8dd 046c 	ldr.w	r0, [sp, #1132]	; 0x46c
    d348:	f000 010f 	and.w	r1, r0, #15
    d34c:	460a      	mov	r2, r1
    d34e:	f8cd 1c80 	str.w	r1, [sp, #3200]	; 0xc80
        let y = ((inst >> 4) & 0xf) as usize;
    d352:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    d356:	0909      	lsrs	r1, r1, #4
    d358:	f8cd 2468 	str.w	r2, [sp, #1128]	; 0x468
    d35c:	f8cd 1464 	str.w	r1, [sp, #1124]	; 0x464
    d360:	e7ff      	b.n	d362 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xea>
    d362:	f8dd 0464 	ldr.w	r0, [sp, #1124]	; 0x464
    d366:	f000 010f 	and.w	r1, r0, #15
    d36a:	460a      	mov	r2, r1
    d36c:	f8cd 1c84 	str.w	r1, [sp, #3204]	; 0xc84
        let kk = (inst & 0xff) as u8;
    d370:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    d374:	b2cb      	uxtb	r3, r1
    d376:	f88d 1c8b 	strb.w	r1, [sp, #3211]	; 0xc8b

        match (
            (inst >> 12) & 0xf,
    d37a:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    d37e:	0b09      	lsrs	r1, r1, #12
    d380:	f8cd 2460 	str.w	r2, [sp, #1120]	; 0x460
    d384:	f8cd 345c 	str.w	r3, [sp, #1116]	; 0x45c
    d388:	f8cd 1458 	str.w	r1, [sp, #1112]	; 0x458
    d38c:	e7ff      	b.n	d38e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x116>
    d38e:	f8dd 0458 	ldr.w	r0, [sp, #1112]	; 0x458
    d392:	f000 010f 	and.w	r1, r0, #15
            (inst >> 8) & 0xf,
    d396:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    d39a:	f8cd 1454 	str.w	r1, [sp, #1108]	; 0x454
    d39e:	f8cd 2450 	str.w	r2, [sp, #1104]	; 0x450
    d3a2:	e7ff      	b.n	d3a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x12c>
    d3a4:	f8dd 0450 	ldr.w	r0, [sp, #1104]	; 0x450
    d3a8:	f000 010f 	and.w	r1, r0, #15
            (inst >> 4) & 0xf,
    d3ac:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    d3b0:	0912      	lsrs	r2, r2, #4
    d3b2:	f8cd 144c 	str.w	r1, [sp, #1100]	; 0x44c
    d3b6:	f8cd 2448 	str.w	r2, [sp, #1096]	; 0x448
    d3ba:	e7ff      	b.n	d3bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x144>
    d3bc:	f8dd 0448 	ldr.w	r0, [sp, #1096]	; 0x448
    d3c0:	f000 010f 	and.w	r1, r0, #15
            (inst >> 0) & 0xf,
    d3c4:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    d3c8:	f8cd 1444 	str.w	r1, [sp, #1092]	; 0x444
    d3cc:	f8cd 2440 	str.w	r2, [sp, #1088]	; 0x440
    d3d0:	e7ff      	b.n	d3d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x15a>
    d3d2:	f8dd 0440 	ldr.w	r0, [sp, #1088]	; 0x440
    d3d6:	f000 010f 	and.w	r1, r0, #15
        match (
    d3da:	f8dd 2454 	ldr.w	r2, [sp, #1108]	; 0x454
    d3de:	f8ad 2498 	strh.w	r2, [sp, #1176]	; 0x498
    d3e2:	f8dd 344c 	ldr.w	r3, [sp, #1100]	; 0x44c
    d3e6:	f8ad 349a 	strh.w	r3, [sp, #1178]	; 0x49a
    d3ea:	f8dd c444 	ldr.w	ip, [sp, #1092]	; 0x444
    d3ee:	f8ad c49c 	strh.w	ip, [sp, #1180]	; 0x49c
    d3f2:	f8ad 149e 	strh.w	r1, [sp, #1182]	; 0x49e
        ) {
            (0, 0, 0xe, 0) => {
    d3f6:	f8bd 1498 	ldrh.w	r1, [sp, #1176]	; 0x498
    d3fa:	468e      	mov	lr, r1
    d3fc:	290f      	cmp	r1, #15
    d3fe:	f8cd e43c 	str.w	lr, [sp, #1084]	; 0x43c
    d402:	d84f      	bhi.n	d4a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22c>
    d404:	f8dd 143c 	ldr.w	r1, [sp, #1084]	; 0x43c
    d408:	e8df f011 	tbh	[pc, r1, lsl #1]
    d40c:	03060010 	.word	0x03060010
    d410:	04320399 	.word	0x04320399
    d414:	002c04d2 	.word	0x002c04d2
    d418:	06b4061f 	.word	0x06b4061f
    d41c:	00750032 	.word	0x00750032
    d420:	0ee40e59 	.word	0x0ee40e59
    d424:	10260f85 	.word	0x10260f85
    d428:	0095007b 	.word	0x0095007b
    d42c:	f8bd 049a 	ldrh.w	r0, [sp, #1178]	; 0x49a
    d430:	2800      	cmp	r0, #0
    d432:	f040 8261 	bne.w	d8f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x680>
    d436:	e7ff      	b.n	d438 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1c0>
    d438:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    d43c:	280e      	cmp	r0, #14
    d43e:	f040 825b 	bne.w	d8f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x680>
    d442:	e7ff      	b.n	d444 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1cc>
    d444:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d448:	4601      	mov	r1, r0
    d44a:	2800      	cmp	r0, #0
    d44c:	f8cd 1438 	str.w	r1, [sp, #1080]	; 0x438
    d450:	f000 80c0 	beq.w	d5d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x35c>
    d454:	e7ff      	b.n	d456 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1de>
    d456:	f8dd 0438 	ldr.w	r0, [sp, #1080]	; 0x438
    d45a:	b281      	uxth	r1, r0
    d45c:	290e      	cmp	r1, #14
    d45e:	f000 81b6 	beq.w	d7ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x556>
    d462:	e249      	b.n	d8f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x680>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
                if self.v[x] != kk {
                    self.next();
                }
            }
            (5, _, _, 0) => {
    d464:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d468:	2800      	cmp	r0, #0
    d46a:	f000 8541 	beq.w	def0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xc78>
    d46e:	e019      	b.n	d4a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22c>
            }
            (7, _, _, _) => {
                trace!("[{:04x}] ADD Vx, kk", self.pc);
                self.v[x] = self.v[x].wrapping_add(kk);
            }
            (8, _, _, 0) => {
    d470:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d474:	4601      	mov	r1, r0
    d476:	280e      	cmp	r0, #14
    d478:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
    d47c:	d812      	bhi.n	d4a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22c>
    d47e:	f8dd 1424 	ldr.w	r1, [sp, #1060]	; 0x424
    d482:	e8df f011 	tbh	[pc, r1, lsl #1]
    d486:	071e      	.short	0x071e
    d488:	086707c0 	.word	0x086707c0
    d48c:	09b5090e 	.word	0x09b5090e
    d490:	0b3b0a77 	.word	0x0b3b0a77
    d494:	000f0bf0 	.word	0x000f0bf0
    d498:	000f000f 	.word	0x000f000f
    d49c:	000f000f 	.word	0x000f000f
    d4a0:	0cb4000f 	.word	0x0cb4000f
                let x = x as usize;
                for i in 0..(x + 1) {
                    self.v[i] = self.mem[self.i as usize + i];
                }
            }
            _ => panic!("[{:04x}] Invalid op: {:04x}", self.pc, inst), // Bad ops
    d4a4:	f240 4048 	movw	r0, #1096	; 0x448
    d4a8:	f2c0 0002 	movt	r0, #2
    d4ac:	6801      	ldr	r1, [r0, #0]
    d4ae:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d4b2:	f100 0212 	add.w	r2, r0, #18
    d4b6:	f8cd 2c68 	str.w	r2, [sp, #3176]	; 0xc68
    d4ba:	f20d 4296 	addw	r2, sp, #1174	; 0x496
    d4be:	f8cd 2c6c 	str.w	r2, [sp, #3180]	; 0xc6c
    d4c2:	f8dd 2c68 	ldr.w	r2, [sp, #3176]	; 0xc68
    d4c6:	f8cd 2d60 	str.w	r2, [sp, #3424]	; 0xd60
    d4ca:	f8dd 3c6c 	ldr.w	r3, [sp, #3180]	; 0xc6c
    d4ce:	f8cd 3d64 	str.w	r3, [sp, #3428]	; 0xd64
    d4d2:	f249 1c83 	movw	ip, #37251	; 0x9183
    d4d6:	f2c0 0c01 	movt	ip, #1
    d4da:	4610      	mov	r0, r2
    d4dc:	f8cd 1434 	str.w	r1, [sp, #1076]	; 0x434
    d4e0:	4661      	mov	r1, ip
    d4e2:	f8cd 3430 	str.w	r3, [sp, #1072]	; 0x430
    d4e6:	f7fd f977 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d4ea:	f8cd 042c 	str.w	r0, [sp, #1068]	; 0x42c
    d4ee:	f8cd 1428 	str.w	r1, [sp, #1064]	; 0x428
    d4f2:	f003 b94f 	b.w	10794 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x351c>
            (9, _, _, 0) => {
    d4f6:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d4fa:	2800      	cmp	r0, #0
    d4fc:	f001 8532 	beq.w	ef64 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1cec>
    d500:	e7d0      	b.n	d4a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22c>
            (0xe, _, 9, 0xe) => {
    d502:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    d506:	4601      	mov	r1, r0
    d508:	2809      	cmp	r0, #9
    d50a:	f8cd 1420 	str.w	r1, [sp, #1056]	; 0x420
    d50e:	d006      	beq.n	d51e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2a6>
    d510:	e7ff      	b.n	d512 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x29a>
    d512:	f8dd 0420 	ldr.w	r0, [sp, #1056]	; 0x420
    d516:	b281      	uxth	r1, r0
    d518:	290a      	cmp	r1, #10
    d51a:	d006      	beq.n	d52a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2b2>
    d51c:	e7c2      	b.n	d4a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22c>
    d51e:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d522:	280e      	cmp	r0, #14
    d524:	f002 815b 	beq.w	f7de <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2566>
    d528:	e7bc      	b.n	d4a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22c>
            (0xe, _, 0xa, 0x1) => {
    d52a:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d52e:	2801      	cmp	r0, #1
    d530:	f002 81fe 	beq.w	f930 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x26b8>
    d534:	e7b6      	b.n	d4a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22c>
            (0xf, _, 0, 7) => {
    d536:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    d53a:	4601      	mov	r1, r0
    d53c:	2806      	cmp	r0, #6
    d53e:	f8cd 141c 	str.w	r1, [sp, #1052]	; 0x41c
    d542:	d8af      	bhi.n	d4a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22c>
    d544:	f8dd 141c 	ldr.w	r1, [sp, #1052]	; 0x41c
    d548:	e8df f001 	tbb	[pc, r1]
    d54c:	322c1505 	.word	0x322c1505
    d550:	003e3804 	.word	0x003e3804
    d554:	e7a6      	b.n	d4a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22c>
    d556:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d55a:	4601      	mov	r1, r0
    d55c:	2807      	cmp	r0, #7
    d55e:	f8cd 1418 	str.w	r1, [sp, #1048]	; 0x418
    d562:	f002 828e 	beq.w	fa82 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x280a>
    d566:	e7ff      	b.n	d568 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2f0>
    d568:	f8dd 0418 	ldr.w	r0, [sp, #1048]	; 0x418
    d56c:	b281      	uxth	r1, r0
    d56e:	290a      	cmp	r1, #10
    d570:	f002 8320 	beq.w	fbb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x293c>
    d574:	e796      	b.n	d4a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22c>
            (0xf, _, 1, 5) => {
    d576:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d57a:	4601      	mov	r1, r0
    d57c:	2805      	cmp	r0, #5
    d57e:	f8cd 1414 	str.w	r1, [sp, #1044]	; 0x414
    d582:	f002 83b1 	beq.w	fce8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2a70>
    d586:	e7ff      	b.n	d588 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x310>
    d588:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    d58c:	b281      	uxth	r1, r0
    d58e:	2908      	cmp	r1, #8
    d590:	f002 843f 	beq.w	fe12 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2b9a>
    d594:	e7ff      	b.n	d596 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x31e>
    d596:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    d59a:	b281      	uxth	r1, r0
    d59c:	290e      	cmp	r1, #14
    d59e:	f002 84cd 	beq.w	ff3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2cc4>
    d5a2:	e77f      	b.n	d4a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22c>
            (0xf, _, 2, 9) => {
    d5a4:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d5a8:	2809      	cmp	r0, #9
    d5aa:	f002 856b 	beq.w	10084 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2e0c>
    d5ae:	e779      	b.n	d4a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22c>
            (0xf, _, 3, 3) => {
    d5b0:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d5b4:	2803      	cmp	r0, #3
    d5b6:	f002 8616 	beq.w	101e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2f6e>
    d5ba:	e773      	b.n	d4a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22c>
            (0xf, _, 5, 5) => {
    d5bc:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d5c0:	2805      	cmp	r0, #5
    d5c2:	f002 871f 	beq.w	10404 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x318c>
    d5c6:	e76d      	b.n	d4a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22c>
            (0xf, _, 6, 5) => {
    d5c8:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d5cc:	2805      	cmp	r0, #5
    d5ce:	f002 87fc 	beq.w	105ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3352>
    d5d2:	e767      	b.n	d4a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22c>
    d5d4:	2005      	movs	r0, #5
    d5d6:	f8cd 04a0 	str.w	r0, [sp, #1184]	; 0x4a0
    d5da:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
    d5de:	f2c0 0001 	movt	r0, #1
    d5e2:	6801      	ldr	r1, [r0, #0]
    d5e4:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    d5e8:	f009 fb3c 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d5ec:	f8cd 0410 	str.w	r0, [sp, #1040]	; 0x410
    d5f0:	e01f      	b.n	d632 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3ba>
    d5f2:	2001      	movs	r0, #1
    d5f4:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    d5f8:	e015      	b.n	d626 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3ae>
    d5fa:	2000      	movs	r0, #0
    d5fc:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    d600:	e011      	b.n	d626 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3ae>
    d602:	2000      	movs	r0, #0
/// [`debug!`]: macro.debug.html
/// [`trace!`]: macro.trace.html
/// [`set_max_level`]: fn.set_max_level.html
#[inline(always)]
pub fn max_level() -> LevelFilter {
    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
    d604:	f88d 0dab 	strb.w	r0, [sp, #3499]	; 0xdab
    d608:	f89d 1dab 	ldrb.w	r1, [sp, #3499]	; 0xdab
    d60c:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d610:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d614:	f003 fed5 	bl	113c2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d618:	f8cd 0dac 	str.w	r0, [sp, #3500]	; 0xdac
    d61c:	f8dd 0dac 	ldr.w	r0, [sp, #3500]	; 0xdac
    d620:	f8cd 04a8 	str.w	r0, [sp, #1192]	; 0x4a8
    d624:	e00b      	b.n	d63e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3c6>
    d626:	f89d 04a7 	ldrb.w	r0, [sp, #1191]	; 0x4a7
    d62a:	07c0      	lsls	r0, r0, #31
    d62c:	2800      	cmp	r0, #0
    d62e:	d115      	bne.n	d65c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3e4>
    d630:	e05e      	b.n	d6f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x478>
    d632:	f8dd 0410 	ldr.w	r0, [sp, #1040]	; 0x410
    d636:	07c1      	lsls	r1, r0, #31
    d638:	2900      	cmp	r1, #0
    d63a:	d1e2      	bne.n	d602 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x38a>
    d63c:	e7dd      	b.n	d5fa <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x382>
    d63e:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    d642:	f50d 6195 	add.w	r1, sp, #1192	; 0x4a8
    d646:	f009 fb0d 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d64a:	f8cd 040c 	str.w	r0, [sp, #1036]	; 0x40c
    d64e:	e7ff      	b.n	d650 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3d8>
    d650:	f8dd 040c 	ldr.w	r0, [sp, #1036]	; 0x40c
    d654:	07c1      	lsls	r1, r0, #31
    d656:	2900      	cmp	r1, #0
    d658:	d1cb      	bne.n	d5f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x37a>
    d65a:	e7ce      	b.n	d5fa <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x382>
                trace!("[{:04x}] CLS", self.pc);
    d65c:	f240 60e8 	movw	r0, #1768	; 0x6e8
    d660:	f2c0 0002 	movt	r0, #2
    d664:	6801      	ldr	r1, [r0, #0]
    d666:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d66a:	f100 0212 	add.w	r2, r0, #18
    d66e:	f8cd 24cc 	str.w	r2, [sp, #1228]	; 0x4cc
    d672:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
    d676:	f8cd 2d88 	str.w	r2, [sp, #3464]	; 0xd88
    d67a:	f249 1383 	movw	r3, #37251	; 0x9183
    d67e:	f2c0 0301 	movt	r3, #1
    d682:	4610      	mov	r0, r2
    d684:	f8cd 1408 	str.w	r1, [sp, #1032]	; 0x408
    d688:	4619      	mov	r1, r3
    d68a:	f7fd f8a5 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d68e:	f8cd 0404 	str.w	r0, [sp, #1028]	; 0x404
    d692:	f8cd 1400 	str.w	r1, [sp, #1024]	; 0x400
    d696:	e7ff      	b.n	d698 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x420>
    d698:	f8dd 0404 	ldr.w	r0, [sp, #1028]	; 0x404
    d69c:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
    d6a0:	f8dd 1400 	ldr.w	r1, [sp, #1024]	; 0x400
    d6a4:	f8cd 14c8 	str.w	r1, [sp, #1224]	; 0x4c8
    d6a8:	f64f 02e8 	movw	r2, #63720	; 0xf8e8
    d6ac:	f2c0 0201 	movt	r2, #1
    d6b0:	6812      	ldr	r2, [r2, #0]
    d6b2:	466b      	mov	r3, sp
    d6b4:	f04f 0c01 	mov.w	ip, #1
    d6b8:	f8c3 c008 	str.w	ip, [r3, #8]
    d6bc:	605a      	str	r2, [r3, #4]
    d6be:	f8c3 c000 	str.w	ip, [r3]
    d6c2:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    d6c6:	2202      	movs	r2, #2
    d6c8:	f20d 43c4 	addw	r3, sp, #1220	; 0x4c4
    d6cc:	f8dd 1408 	ldr.w	r1, [sp, #1032]	; 0x408
    d6d0:	f009 f98d 	bl	169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d6d4:	e7ff      	b.n	d6d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x45e>
    d6d6:	f8dd 14a0 	ldr.w	r1, [sp, #1184]	; 0x4a0
    d6da:	f240 7008 	movw	r0, #1800	; 0x708
    d6de:	f2c0 0002 	movt	r0, #2
    d6e2:	6802      	ldr	r2, [r0, #0]
    d6e4:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    d6e8:	f004 fe9a 	bl	12420 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d6ec:	e7ff      	b.n	d6ee <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x476>
    d6ee:	e7ff      	b.n	d6f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x478>
    d6f0:	f241 0048 	movw	r0, #4168	; 0x1048
                let (w, h) = self.hw.vram_size();
    d6f4:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    d6f8:	4408      	add	r0, r1
    d6fa:	f7fe fcb4 	bl	c066 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hb385dfaf23157db8E>
    d6fe:	90ff      	str	r0, [sp, #1020]	; 0x3fc
    d700:	91fe      	str	r1, [sp, #1016]	; 0x3f8
    d702:	e7ff      	b.n	d704 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x48c>
    d704:	98ff      	ldr	r0, [sp, #1020]	; 0x3fc
    d706:	f8cd 0d8c 	str.w	r0, [sp, #3468]	; 0xd8c
    d70a:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
    d70c:	f8cd 14d0 	str.w	r1, [sp, #1232]	; 0x4d0
    d710:	2200      	movs	r2, #0
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    d712:	f8cd 2538 	str.w	r2, [sp, #1336]	; 0x538
    d716:	f8cd 053c 	str.w	r0, [sp, #1340]	; 0x53c
    d71a:	f50d 629a 	add.w	r2, sp, #1232	; 0x4d0
    d71e:	f8cd 2540 	str.w	r2, [sp, #1344]	; 0x540
    d722:	f8dd 1538 	ldr.w	r1, [sp, #1336]	; 0x538
    d726:	f8dd 253c 	ldr.w	r2, [sp, #1340]	; 0x53c
    d72a:	f8dd 3540 	ldr.w	r3, [sp, #1344]	; 0x540
    d72e:	f20d 502c 	addw	r0, sp, #1324	; 0x52c
    d732:	f003 ff14 	bl	1155e <_ZN4core4iter6traits8iterator8Iterator3map17hbdce026690b075d6E>
    d736:	e7ff      	b.n	d738 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x4c0>
    d738:	f50d 60a0 	add.w	r0, sp, #1280	; 0x500
    d73c:	f20d 512c 	addw	r1, sp, #1324	; 0x52c
    d740:	f003 fe53 	bl	113ea <_ZN4core4iter6traits8iterator8Iterator7flatten17hdd08c3a3cf16397aE>
    d744:	e7ff      	b.n	d746 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x4ce>
    d746:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    d74a:	f50d 61a0 	add.w	r1, sp, #1280	; 0x500
    d74e:	f003 fe21 	bl	11394 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h3b61728407886f85E>
    d752:	e7ff      	b.n	d754 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x4dc>
    d754:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    d758:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    d75c:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
    d760:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
    d764:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
    d768:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
    d76c:	e7ff      	b.n	d76e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x4f6>
    d76e:	f50d 60ae 	add.w	r0, sp, #1392	; 0x570
    d772:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    d776:	f003 fd3a 	bl	111ee <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h8b365b2b37e7ae5bE>
    d77a:	e7ff      	b.n	d77c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x504>
    d77c:	f8dd 0570 	ldr.w	r0, [sp, #1392]	; 0x570
    d780:	2800      	cmp	r0, #0
    d782:	d001      	beq.n	d788 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x510>
    d784:	e7ff      	b.n	d786 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x50e>
    d786:	e002      	b.n	d78e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x516>
        match (
    d788:	f003 b843 	b.w	10812 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    d78c:	defe      	udf	#254	; 0xfe
    d78e:	f8dd 0574 	ldr.w	r0, [sp, #1396]	; 0x574
    d792:	f8dd 1578 	ldr.w	r1, [sp, #1400]	; 0x578
    d796:	f8cd 0d90 	str.w	r0, [sp, #3472]	; 0xd90
    d79a:	f8cd 1d94 	str.w	r1, [sp, #3476]	; 0xd94
    d79e:	f8cd 0d98 	str.w	r0, [sp, #3480]	; 0xd98
    d7a2:	f8cd 1d9c 	str.w	r1, [sp, #3484]	; 0xd9c
    d7a6:	f8cd 0da0 	str.w	r0, [sp, #3488]	; 0xda0
    d7aa:	f8cd 1da4 	str.w	r1, [sp, #3492]	; 0xda4
    d7ae:	f241 0248 	movw	r2, #4168	; 0x1048
                    self.hw.vram_set(x, y, false);
    d7b2:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    d7b6:	441a      	add	r2, r3
    d7b8:	2300      	movs	r3, #0
    d7ba:	90fd      	str	r0, [sp, #1012]	; 0x3f4
    d7bc:	4610      	mov	r0, r2
    d7be:	9afd      	ldr	r2, [sp, #1012]	; 0x3f4
    d7c0:	91fc      	str	r1, [sp, #1008]	; 0x3f0
    d7c2:	4611      	mov	r1, r2
    d7c4:	9afc      	ldr	r2, [sp, #1008]	; 0x3f0
    d7c6:	f7fe faa7 	bl	bd18 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E>
    d7ca:	e7ff      	b.n	d7cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x554>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    d7cc:	e7cf      	b.n	d76e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x4f6>
    d7ce:	2005      	movs	r0, #5
    d7d0:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
    d7d4:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
    d7d8:	f2c0 0001 	movt	r0, #1
    d7dc:	6801      	ldr	r1, [r0, #0]
    d7de:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    d7e2:	f009 fa3f 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d7e6:	90fb      	str	r0, [sp, #1004]	; 0x3ec
    d7e8:	e01f      	b.n	d82a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x5b2>
    d7ea:	2001      	movs	r0, #1
    d7ec:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    d7f0:	e015      	b.n	d81e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x5a6>
    d7f2:	2000      	movs	r0, #0
    d7f4:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    d7f8:	e011      	b.n	d81e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x5a6>
    d7fa:	2000      	movs	r0, #0
    d7fc:	f88d 0db3 	strb.w	r0, [sp, #3507]	; 0xdb3
    d800:	f89d 1db3 	ldrb.w	r1, [sp, #3507]	; 0xdb3
    d804:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d808:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d80c:	f003 fdd9 	bl	113c2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d810:	f8cd 0db4 	str.w	r0, [sp, #3508]	; 0xdb4
    d814:	f8dd 0db4 	ldr.w	r0, [sp, #3508]	; 0xdb4
    d818:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
    d81c:	e00a      	b.n	d834 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x5bc>
    d81e:	f89d 0583 	ldrb.w	r0, [sp, #1411]	; 0x583
    d822:	07c0      	lsls	r0, r0, #31
    d824:	2800      	cmp	r0, #0
    d826:	d112      	bne.n	d84e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x5d6>
    d828:	e055      	b.n	d8d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x65e>
    d82a:	98fb      	ldr	r0, [sp, #1004]	; 0x3ec
    d82c:	07c1      	lsls	r1, r0, #31
    d82e:	2900      	cmp	r1, #0
    d830:	d1e3      	bne.n	d7fa <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x582>
    d832:	e7de      	b.n	d7f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x57a>
    d834:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    d838:	f20d 5184 	addw	r1, sp, #1412	; 0x584
    d83c:	f009 fa12 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d840:	90fa      	str	r0, [sp, #1000]	; 0x3e8
    d842:	e7ff      	b.n	d844 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x5cc>
    d844:	98fa      	ldr	r0, [sp, #1000]	; 0x3e8
    d846:	07c1      	lsls	r1, r0, #31
    d848:	2900      	cmp	r1, #0
    d84a:	d1ce      	bne.n	d7ea <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x572>
    d84c:	e7d1      	b.n	d7f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x57a>
                trace!("[{:04x}] RET", self.pc);
    d84e:	f240 60ac 	movw	r0, #1708	; 0x6ac
    d852:	f2c0 0002 	movt	r0, #2
    d856:	6801      	ldr	r1, [r0, #0]
    d858:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d85c:	f100 0212 	add.w	r2, r0, #18
    d860:	f8cd 25a8 	str.w	r2, [sp, #1448]	; 0x5a8
    d864:	f8dd 25a8 	ldr.w	r2, [sp, #1448]	; 0x5a8
    d868:	f8cd 2d80 	str.w	r2, [sp, #3456]	; 0xd80
    d86c:	f249 1383 	movw	r3, #37251	; 0x9183
    d870:	f2c0 0301 	movt	r3, #1
    d874:	4610      	mov	r0, r2
    d876:	91f9      	str	r1, [sp, #996]	; 0x3e4
    d878:	4619      	mov	r1, r3
    d87a:	f7fc ffad 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d87e:	90f8      	str	r0, [sp, #992]	; 0x3e0
    d880:	91f7      	str	r1, [sp, #988]	; 0x3dc
    d882:	e7ff      	b.n	d884 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x60c>
    d884:	98f8      	ldr	r0, [sp, #992]	; 0x3e0
    d886:	f8cd 05a0 	str.w	r0, [sp, #1440]	; 0x5a0
    d88a:	99f7      	ldr	r1, [sp, #988]	; 0x3dc
    d88c:	f8cd 15a4 	str.w	r1, [sp, #1444]	; 0x5a4
    d890:	f64f 02e8 	movw	r2, #63720	; 0xf8e8
    d894:	f2c0 0201 	movt	r2, #1
    d898:	6812      	ldr	r2, [r2, #0]
    d89a:	466b      	mov	r3, sp
    d89c:	f04f 0c01 	mov.w	ip, #1
    d8a0:	f8c3 c008 	str.w	ip, [r3, #8]
    d8a4:	605a      	str	r2, [r3, #4]
    d8a6:	f8c3 c000 	str.w	ip, [r3]
    d8aa:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    d8ae:	2202      	movs	r2, #2
    d8b0:	f50d 63b4 	add.w	r3, sp, #1440	; 0x5a0
    d8b4:	99f9      	ldr	r1, [sp, #996]	; 0x3e4
    d8b6:	f009 f89a 	bl	169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d8ba:	e7ff      	b.n	d8bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x644>
    d8bc:	f8dd 157c 	ldr.w	r1, [sp, #1404]	; 0x57c
    d8c0:	f240 60cc 	movw	r0, #1740	; 0x6cc
    d8c4:	f2c0 0002 	movt	r0, #2
    d8c8:	6802      	ldr	r2, [r0, #0]
    d8ca:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    d8ce:	f004 fda7 	bl	12420 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d8d2:	e7ff      	b.n	d8d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x65c>
    d8d4:	e7ff      	b.n	d8d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x65e>
                let addr = self.pop();
    d8d6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d8da:	f7ff fc78 	bl	d1ce <_ZN8libchip814Chip8$LT$T$GT$3pop17h503862bdc0785684E>
    d8de:	4601      	mov	r1, r0
    d8e0:	f8ad 0d86 	strh.w	r0, [sp, #3462]	; 0xd86
    d8e4:	91f6      	str	r1, [sp, #984]	; 0x3d8
    d8e6:	e7ff      	b.n	d8e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x670>
                self.jump(addr);
    d8e8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d8ec:	99f6      	ldr	r1, [sp, #984]	; 0x3d8
    d8ee:	f003 fa7f 	bl	10df0 <_ZN8libchip814Chip8$LT$T$GT$4jump17h930b3c38e90d0056E>
    d8f2:	e7ff      	b.n	d8f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x67c>
        match (
    d8f4:	f002 bf8d 	b.w	10812 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    d8f8:	2005      	movs	r0, #5
    d8fa:	f8cd 05ac 	str.w	r0, [sp, #1452]	; 0x5ac
    d8fe:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
    d902:	f2c0 0001 	movt	r0, #1
    d906:	6801      	ldr	r1, [r0, #0]
    d908:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    d90c:	f009 f9aa 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d910:	90f5      	str	r0, [sp, #980]	; 0x3d4
    d912:	e01f      	b.n	d954 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x6dc>
    d914:	2001      	movs	r0, #1
    d916:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    d91a:	e015      	b.n	d948 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x6d0>
    d91c:	2000      	movs	r0, #0
    d91e:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    d922:	e011      	b.n	d948 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x6d0>
    d924:	2000      	movs	r0, #0
    d926:	f88d 0dbb 	strb.w	r0, [sp, #3515]	; 0xdbb
    d92a:	f89d 1dbb 	ldrb.w	r1, [sp, #3515]	; 0xdbb
    d92e:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d932:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d936:	f003 fd44 	bl	113c2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d93a:	f8cd 0dbc 	str.w	r0, [sp, #3516]	; 0xdbc
    d93e:	f8dd 0dbc 	ldr.w	r0, [sp, #3516]	; 0xdbc
    d942:	f8cd 05b4 	str.w	r0, [sp, #1460]	; 0x5b4
    d946:	e00a      	b.n	d95e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x6e6>
    d948:	f89d 05b3 	ldrb.w	r0, [sp, #1459]	; 0x5b3
    d94c:	07c0      	lsls	r0, r0, #31
    d94e:	2800      	cmp	r0, #0
    d950:	d112      	bne.n	d978 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x700>
    d952:	e055      	b.n	da00 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x788>
    d954:	98f5      	ldr	r0, [sp, #980]	; 0x3d4
    d956:	07c1      	lsls	r1, r0, #31
    d958:	2900      	cmp	r1, #0
    d95a:	d1e3      	bne.n	d924 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x6ac>
    d95c:	e7de      	b.n	d91c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x6a4>
    d95e:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    d962:	f20d 51b4 	addw	r1, sp, #1460	; 0x5b4
    d966:	f009 f97d 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d96a:	90f4      	str	r0, [sp, #976]	; 0x3d0
    d96c:	e7ff      	b.n	d96e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x6f6>
    d96e:	98f4      	ldr	r0, [sp, #976]	; 0x3d0
    d970:	07c1      	lsls	r1, r0, #31
    d972:	2900      	cmp	r1, #0
    d974:	d1ce      	bne.n	d914 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x69c>
    d976:	e7d1      	b.n	d91c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x6a4>
                trace!("[{:04x}] SYS nnn", self.pc);
    d978:	f240 6050 	movw	r0, #1616	; 0x650
    d97c:	f2c0 0002 	movt	r0, #2
    d980:	6801      	ldr	r1, [r0, #0]
    d982:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d986:	f100 0212 	add.w	r2, r0, #18
    d98a:	f8cd 25d8 	str.w	r2, [sp, #1496]	; 0x5d8
    d98e:	f8dd 25d8 	ldr.w	r2, [sp, #1496]	; 0x5d8
    d992:	f8cd 2d7c 	str.w	r2, [sp, #3452]	; 0xd7c
    d996:	f249 1383 	movw	r3, #37251	; 0x9183
    d99a:	f2c0 0301 	movt	r3, #1
    d99e:	4610      	mov	r0, r2
    d9a0:	91f3      	str	r1, [sp, #972]	; 0x3cc
    d9a2:	4619      	mov	r1, r3
    d9a4:	f7fc ff18 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d9a8:	90f2      	str	r0, [sp, #968]	; 0x3c8
    d9aa:	91f1      	str	r1, [sp, #964]	; 0x3c4
    d9ac:	e7ff      	b.n	d9ae <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x736>
    d9ae:	98f2      	ldr	r0, [sp, #968]	; 0x3c8
    d9b0:	f8cd 05d0 	str.w	r0, [sp, #1488]	; 0x5d0
    d9b4:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
    d9b6:	f8cd 15d4 	str.w	r1, [sp, #1492]	; 0x5d4
    d9ba:	f64f 02e8 	movw	r2, #63720	; 0xf8e8
    d9be:	f2c0 0201 	movt	r2, #1
    d9c2:	6812      	ldr	r2, [r2, #0]
    d9c4:	466b      	mov	r3, sp
    d9c6:	f04f 0c01 	mov.w	ip, #1
    d9ca:	f8c3 c008 	str.w	ip, [r3, #8]
    d9ce:	605a      	str	r2, [r3, #4]
    d9d0:	f8c3 c000 	str.w	ip, [r3]
    d9d4:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    d9d8:	2202      	movs	r2, #2
    d9da:	f50d 63ba 	add.w	r3, sp, #1488	; 0x5d0
    d9de:	99f3      	ldr	r1, [sp, #972]	; 0x3cc
    d9e0:	f009 f805 	bl	169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d9e4:	e7ff      	b.n	d9e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x76e>
    d9e6:	f8dd 15ac 	ldr.w	r1, [sp, #1452]	; 0x5ac
    d9ea:	f240 6070 	movw	r0, #1648	; 0x670
    d9ee:	f2c0 0002 	movt	r0, #2
    d9f2:	6802      	ldr	r2, [r0, #0]
    d9f4:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    d9f8:	f004 fd12 	bl	12420 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d9fc:	e7ff      	b.n	d9fe <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x786>
    d9fe:	e7ff      	b.n	da00 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x788>
    da00:	f240 6074 	movw	r0, #1652	; 0x674
    da04:	f2c0 0002 	movt	r0, #2
    da08:	f240 6284 	movw	r2, #1668	; 0x684
    da0c:	f2c0 0202 	movt	r2, #2
    da10:	210f      	movs	r1, #15
    da12:	f009 ffa9 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    da16:	defe      	udf	#254	; 0xfe
    da18:	2005      	movs	r0, #5
    da1a:	f8cd 05dc 	str.w	r0, [sp, #1500]	; 0x5dc
    da1e:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
    da22:	f2c0 0001 	movt	r0, #1
    da26:	6801      	ldr	r1, [r0, #0]
    da28:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    da2c:	f009 f91a 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    da30:	90f0      	str	r0, [sp, #960]	; 0x3c0
    da32:	e01f      	b.n	da74 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x7fc>
    da34:	2001      	movs	r0, #1
    da36:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    da3a:	e015      	b.n	da68 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x7f0>
    da3c:	2000      	movs	r0, #0
    da3e:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    da42:	e011      	b.n	da68 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x7f0>
    da44:	2000      	movs	r0, #0
    da46:	f88d 0dc3 	strb.w	r0, [sp, #3523]	; 0xdc3
    da4a:	f89d 1dc3 	ldrb.w	r1, [sp, #3523]	; 0xdc3
    da4e:	f644 206c 	movw	r0, #19052	; 0x4a6c
    da52:	f2c2 0000 	movt	r0, #8192	; 0x2000
    da56:	f003 fcb4 	bl	113c2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    da5a:	f8cd 0dc4 	str.w	r0, [sp, #3524]	; 0xdc4
    da5e:	f8dd 0dc4 	ldr.w	r0, [sp, #3524]	; 0xdc4
    da62:	f8cd 05e4 	str.w	r0, [sp, #1508]	; 0x5e4
    da66:	e00a      	b.n	da7e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x806>
    da68:	f89d 05e3 	ldrb.w	r0, [sp, #1507]	; 0x5e3
    da6c:	07c0      	lsls	r0, r0, #31
    da6e:	2800      	cmp	r0, #0
    da70:	d112      	bne.n	da98 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x820>
    da72:	e055      	b.n	db20 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x8a8>
    da74:	98f0      	ldr	r0, [sp, #960]	; 0x3c0
    da76:	07c1      	lsls	r1, r0, #31
    da78:	2900      	cmp	r1, #0
    da7a:	d1e3      	bne.n	da44 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x7cc>
    da7c:	e7de      	b.n	da3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x7c4>
    da7e:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    da82:	f20d 51e4 	addw	r1, sp, #1508	; 0x5e4
    da86:	f009 f8ed 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    da8a:	90ef      	str	r0, [sp, #956]	; 0x3bc
    da8c:	e7ff      	b.n	da8e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x816>
    da8e:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
    da90:	07c1      	lsls	r1, r0, #31
    da92:	2900      	cmp	r1, #0
    da94:	d1ce      	bne.n	da34 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x7bc>
    da96:	e7d1      	b.n	da3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x7c4>
                trace!("[{:04x}] JP nnn", self.pc);
    da98:	f240 6010 	movw	r0, #1552	; 0x610
    da9c:	f2c0 0002 	movt	r0, #2
    daa0:	6801      	ldr	r1, [r0, #0]
    daa2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    daa6:	f100 0212 	add.w	r2, r0, #18
    daaa:	f8cd 2608 	str.w	r2, [sp, #1544]	; 0x608
    daae:	f8dd 2608 	ldr.w	r2, [sp, #1544]	; 0x608
    dab2:	f8cd 2d78 	str.w	r2, [sp, #3448]	; 0xd78
    dab6:	f249 1383 	movw	r3, #37251	; 0x9183
    daba:	f2c0 0301 	movt	r3, #1
    dabe:	4610      	mov	r0, r2
    dac0:	91ee      	str	r1, [sp, #952]	; 0x3b8
    dac2:	4619      	mov	r1, r3
    dac4:	f7fc fe88 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    dac8:	90ed      	str	r0, [sp, #948]	; 0x3b4
    daca:	91ec      	str	r1, [sp, #944]	; 0x3b0
    dacc:	e7ff      	b.n	dace <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x856>
    dace:	98ed      	ldr	r0, [sp, #948]	; 0x3b4
    dad0:	f8cd 0600 	str.w	r0, [sp, #1536]	; 0x600
    dad4:	99ec      	ldr	r1, [sp, #944]	; 0x3b0
    dad6:	f8cd 1604 	str.w	r1, [sp, #1540]	; 0x604
    dada:	f64f 02e8 	movw	r2, #63720	; 0xf8e8
    dade:	f2c0 0201 	movt	r2, #1
    dae2:	6812      	ldr	r2, [r2, #0]
    dae4:	466b      	mov	r3, sp
    dae6:	f04f 0c01 	mov.w	ip, #1
    daea:	f8c3 c008 	str.w	ip, [r3, #8]
    daee:	605a      	str	r2, [r3, #4]
    daf0:	f8c3 c000 	str.w	ip, [r3]
    daf4:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    daf8:	2202      	movs	r2, #2
    dafa:	f50d 63c0 	add.w	r3, sp, #1536	; 0x600
    dafe:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
    db00:	f008 ff75 	bl	169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    db04:	e7ff      	b.n	db06 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x88e>
    db06:	f8dd 15dc 	ldr.w	r1, [sp, #1500]	; 0x5dc
    db0a:	f240 6030 	movw	r0, #1584	; 0x630
    db0e:	f2c0 0002 	movt	r0, #2
    db12:	6802      	ldr	r2, [r0, #0]
    db14:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    db18:	f004 fc82 	bl	12420 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    db1c:	e7ff      	b.n	db1e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x8a6>
    db1e:	e7ff      	b.n	db20 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x8a8>
    db20:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    db22:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    db26:	f009 f874 	bl	16c12 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E>
    db2a:	90eb      	str	r0, [sp, #940]	; 0x3ac
    db2c:	e7ff      	b.n	db2e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x8b6>
    db2e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    db32:	99eb      	ldr	r1, [sp, #940]	; 0x3ac
    db34:	f003 f95c 	bl	10df0 <_ZN8libchip814Chip8$LT$T$GT$4jump17h930b3c38e90d0056E>
    db38:	e7ff      	b.n	db3a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x8c2>
        match (
    db3a:	f002 be6a 	b.w	10812 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    db3e:	2005      	movs	r0, #5
    db40:	f8cd 060c 	str.w	r0, [sp, #1548]	; 0x60c
    db44:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
    db48:	f2c0 0001 	movt	r0, #1
    db4c:	6801      	ldr	r1, [r0, #0]
    db4e:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    db52:	f009 f887 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    db56:	90ea      	str	r0, [sp, #936]	; 0x3a8
    db58:	e01f      	b.n	db9a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x922>
    db5a:	2001      	movs	r0, #1
    db5c:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    db60:	e015      	b.n	db8e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x916>
    db62:	2000      	movs	r0, #0
    db64:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    db68:	e011      	b.n	db8e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x916>
    db6a:	2000      	movs	r0, #0
    db6c:	f88d 0dcb 	strb.w	r0, [sp, #3531]	; 0xdcb
    db70:	f89d 1dcb 	ldrb.w	r1, [sp, #3531]	; 0xdcb
    db74:	f644 206c 	movw	r0, #19052	; 0x4a6c
    db78:	f2c2 0000 	movt	r0, #8192	; 0x2000
    db7c:	f003 fc21 	bl	113c2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    db80:	f8cd 0dcc 	str.w	r0, [sp, #3532]	; 0xdcc
    db84:	f8dd 0dcc 	ldr.w	r0, [sp, #3532]	; 0xdcc
    db88:	f8cd 0614 	str.w	r0, [sp, #1556]	; 0x614
    db8c:	e00a      	b.n	dba4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x92c>
    db8e:	f89d 0613 	ldrb.w	r0, [sp, #1555]	; 0x613
    db92:	07c0      	lsls	r0, r0, #31
    db94:	2800      	cmp	r0, #0
    db96:	d112      	bne.n	dbbe <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x946>
    db98:	e055      	b.n	dc46 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x9ce>
    db9a:	98ea      	ldr	r0, [sp, #936]	; 0x3a8
    db9c:	07c1      	lsls	r1, r0, #31
    db9e:	2900      	cmp	r1, #0
    dba0:	d1e3      	bne.n	db6a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x8f2>
    dba2:	e7de      	b.n	db62 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x8ea>
    dba4:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    dba8:	f20d 6114 	addw	r1, sp, #1556	; 0x614
    dbac:	f009 f85a 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dbb0:	90e9      	str	r0, [sp, #932]	; 0x3a4
    dbb2:	e7ff      	b.n	dbb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x93c>
    dbb4:	98e9      	ldr	r0, [sp, #932]	; 0x3a4
    dbb6:	07c1      	lsls	r1, r0, #31
    dbb8:	2900      	cmp	r1, #0
    dbba:	d1ce      	bne.n	db5a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x8e2>
    dbbc:	e7d1      	b.n	db62 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x8ea>
                trace!("[{:04x}] CALL nnn", self.pc);
    dbbe:	f240 50dc 	movw	r0, #1500	; 0x5dc
    dbc2:	f2c0 0002 	movt	r0, #2
    dbc6:	6801      	ldr	r1, [r0, #0]
    dbc8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dbcc:	f100 0212 	add.w	r2, r0, #18
    dbd0:	f8cd 2638 	str.w	r2, [sp, #1592]	; 0x638
    dbd4:	f8dd 2638 	ldr.w	r2, [sp, #1592]	; 0x638
    dbd8:	f8cd 2d74 	str.w	r2, [sp, #3444]	; 0xd74
    dbdc:	f249 1383 	movw	r3, #37251	; 0x9183
    dbe0:	f2c0 0301 	movt	r3, #1
    dbe4:	4610      	mov	r0, r2
    dbe6:	91e8      	str	r1, [sp, #928]	; 0x3a0
    dbe8:	4619      	mov	r1, r3
    dbea:	f7fc fdf5 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    dbee:	90e7      	str	r0, [sp, #924]	; 0x39c
    dbf0:	91e6      	str	r1, [sp, #920]	; 0x398
    dbf2:	e7ff      	b.n	dbf4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x97c>
    dbf4:	98e7      	ldr	r0, [sp, #924]	; 0x39c
    dbf6:	f8cd 0630 	str.w	r0, [sp, #1584]	; 0x630
    dbfa:	99e6      	ldr	r1, [sp, #920]	; 0x398
    dbfc:	f8cd 1634 	str.w	r1, [sp, #1588]	; 0x634
    dc00:	f64f 02e8 	movw	r2, #63720	; 0xf8e8
    dc04:	f2c0 0201 	movt	r2, #1
    dc08:	6812      	ldr	r2, [r2, #0]
    dc0a:	466b      	mov	r3, sp
    dc0c:	f04f 0c01 	mov.w	ip, #1
    dc10:	f8c3 c008 	str.w	ip, [r3, #8]
    dc14:	605a      	str	r2, [r3, #4]
    dc16:	f8c3 c000 	str.w	ip, [r3]
    dc1a:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    dc1e:	2202      	movs	r2, #2
    dc20:	f50d 63c6 	add.w	r3, sp, #1584	; 0x630
    dc24:	99e8      	ldr	r1, [sp, #928]	; 0x3a0
    dc26:	f008 fee2 	bl	169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    dc2a:	e7ff      	b.n	dc2c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x9b4>
    dc2c:	f8dd 160c 	ldr.w	r1, [sp, #1548]	; 0x60c
    dc30:	f240 50fc 	movw	r0, #1532	; 0x5fc
    dc34:	f2c0 0002 	movt	r0, #2
    dc38:	6802      	ldr	r2, [r0, #0]
    dc3a:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    dc3e:	f004 fbef 	bl	12420 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    dc42:	e7ff      	b.n	dc44 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x9cc>
    dc44:	e7ff      	b.n	dc46 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x9ce>
                self.push(self.pc);
    dc46:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dc4a:	8a41      	ldrh	r1, [r0, #18]
    dc4c:	f003 f926 	bl	10e9c <_ZN8libchip814Chip8$LT$T$GT$4push17h7098654a82bc65c4E>
    dc50:	e7ff      	b.n	dc52 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x9da>
    dc52:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    dc54:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    dc58:	f008 ffdb 	bl	16c12 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E>
    dc5c:	90e5      	str	r0, [sp, #916]	; 0x394
    dc5e:	e7ff      	b.n	dc60 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x9e8>
    dc60:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dc64:	99e5      	ldr	r1, [sp, #916]	; 0x394
    dc66:	f003 f8c3 	bl	10df0 <_ZN8libchip814Chip8$LT$T$GT$4jump17h930b3c38e90d0056E>
    dc6a:	e7ff      	b.n	dc6c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x9f4>
        match (
    dc6c:	f002 bdd1 	b.w	10812 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    dc70:	2005      	movs	r0, #5
    dc72:	f8cd 063c 	str.w	r0, [sp, #1596]	; 0x63c
    dc76:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
    dc7a:	f2c0 0001 	movt	r0, #1
    dc7e:	6801      	ldr	r1, [r0, #0]
    dc80:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    dc84:	f008 ffee 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dc88:	90e4      	str	r0, [sp, #912]	; 0x390
    dc8a:	e01f      	b.n	dccc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xa54>
    dc8c:	2001      	movs	r0, #1
    dc8e:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    dc92:	e015      	b.n	dcc0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xa48>
    dc94:	2000      	movs	r0, #0
    dc96:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    dc9a:	e011      	b.n	dcc0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xa48>
    dc9c:	2000      	movs	r0, #0
    dc9e:	f88d 0dd3 	strb.w	r0, [sp, #3539]	; 0xdd3
    dca2:	f89d 1dd3 	ldrb.w	r1, [sp, #3539]	; 0xdd3
    dca6:	f644 206c 	movw	r0, #19052	; 0x4a6c
    dcaa:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dcae:	f003 fb88 	bl	113c2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    dcb2:	f8cd 0dd4 	str.w	r0, [sp, #3540]	; 0xdd4
    dcb6:	f8dd 0dd4 	ldr.w	r0, [sp, #3540]	; 0xdd4
    dcba:	f8cd 0644 	str.w	r0, [sp, #1604]	; 0x644
    dcbe:	e00a      	b.n	dcd6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xa5e>
    dcc0:	f89d 0643 	ldrb.w	r0, [sp, #1603]	; 0x643
    dcc4:	07c0      	lsls	r0, r0, #31
    dcc6:	2800      	cmp	r0, #0
    dcc8:	d112      	bne.n	dcf0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xa78>
    dcca:	e055      	b.n	dd78 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xb00>
    dccc:	98e4      	ldr	r0, [sp, #912]	; 0x390
    dcce:	07c1      	lsls	r1, r0, #31
    dcd0:	2900      	cmp	r1, #0
    dcd2:	d1e3      	bne.n	dc9c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xa24>
    dcd4:	e7de      	b.n	dc94 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xa1c>
    dcd6:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    dcda:	f20d 6144 	addw	r1, sp, #1604	; 0x644
    dcde:	f008 ffc1 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dce2:	90e3      	str	r0, [sp, #908]	; 0x38c
    dce4:	e7ff      	b.n	dce6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xa6e>
    dce6:	98e3      	ldr	r0, [sp, #908]	; 0x38c
    dce8:	07c1      	lsls	r1, r0, #31
    dcea:	2900      	cmp	r1, #0
    dcec:	d1ce      	bne.n	dc8c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xa14>
    dcee:	e7d1      	b.n	dc94 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xa1c>
                trace!("[{:04x}] SE Vx kk", self.pc);
    dcf0:	f240 508c 	movw	r0, #1420	; 0x58c
    dcf4:	f2c0 0002 	movt	r0, #2
    dcf8:	6801      	ldr	r1, [r0, #0]
    dcfa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dcfe:	f100 0212 	add.w	r2, r0, #18
    dd02:	f8cd 2668 	str.w	r2, [sp, #1640]	; 0x668
    dd06:	f8dd 2668 	ldr.w	r2, [sp, #1640]	; 0x668
    dd0a:	f8cd 2d70 	str.w	r2, [sp, #3440]	; 0xd70
    dd0e:	f249 1383 	movw	r3, #37251	; 0x9183
    dd12:	f2c0 0301 	movt	r3, #1
    dd16:	4610      	mov	r0, r2
    dd18:	91e2      	str	r1, [sp, #904]	; 0x388
    dd1a:	4619      	mov	r1, r3
    dd1c:	f7fc fd5c 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    dd20:	90e1      	str	r0, [sp, #900]	; 0x384
    dd22:	91e0      	str	r1, [sp, #896]	; 0x380
    dd24:	e7ff      	b.n	dd26 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xaae>
    dd26:	98e1      	ldr	r0, [sp, #900]	; 0x384
    dd28:	f8cd 0660 	str.w	r0, [sp, #1632]	; 0x660
    dd2c:	99e0      	ldr	r1, [sp, #896]	; 0x380
    dd2e:	f8cd 1664 	str.w	r1, [sp, #1636]	; 0x664
    dd32:	f64f 02e8 	movw	r2, #63720	; 0xf8e8
    dd36:	f2c0 0201 	movt	r2, #1
    dd3a:	6812      	ldr	r2, [r2, #0]
    dd3c:	466b      	mov	r3, sp
    dd3e:	f04f 0c01 	mov.w	ip, #1
    dd42:	f8c3 c008 	str.w	ip, [r3, #8]
    dd46:	605a      	str	r2, [r3, #4]
    dd48:	f8c3 c000 	str.w	ip, [r3]
    dd4c:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    dd50:	2202      	movs	r2, #2
    dd52:	f50d 63cc 	add.w	r3, sp, #1632	; 0x660
    dd56:	99e2      	ldr	r1, [sp, #904]	; 0x388
    dd58:	f008 fe49 	bl	169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    dd5c:	e7ff      	b.n	dd5e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xae6>
    dd5e:	f8dd 163c 	ldr.w	r1, [sp, #1596]	; 0x63c
    dd62:	f240 50ac 	movw	r0, #1452	; 0x5ac
    dd66:	f2c0 0002 	movt	r0, #2
    dd6a:	6802      	ldr	r2, [r0, #0]
    dd6c:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    dd70:	f004 fb56 	bl	12420 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    dd74:	e7ff      	b.n	dd76 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xafe>
    dd76:	e7ff      	b.n	dd78 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xb00>
                if self.v[x] == kk {
    dd78:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    dd7c:	280f      	cmp	r0, #15
    dd7e:	f203 8011 	bhi.w	10da4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3b2c>
    dd82:	e7ff      	b.n	dd84 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xb0c>
    dd84:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dd88:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    dd8c:	1842      	adds	r2, r0, r1
    dd8e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    dd92:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    dd96:	fa5f fc83 	uxtb.w	ip, r3
    dd9a:	4562      	cmp	r2, ip
    dd9c:	d106      	bne.n	ddac <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xb34>
    dd9e:	e7ff      	b.n	dda0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xb28>
                    self.next();
    dda0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dda4:	f003 f867 	bl	10e76 <_ZN8libchip814Chip8$LT$T$GT$4next17h59db21f4d7eca91dE>
    dda8:	e7ff      	b.n	ddaa <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xb32>
                if self.v[x] == kk {
    ddaa:	e7ff      	b.n	ddac <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xb34>
        match (
    ddac:	f002 bd31 	b.w	10812 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    ddb0:	2005      	movs	r0, #5
    ddb2:	f8cd 066c 	str.w	r0, [sp, #1644]	; 0x66c
    ddb6:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
    ddba:	f2c0 0001 	movt	r0, #1
    ddbe:	6801      	ldr	r1, [r0, #0]
    ddc0:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    ddc4:	f008 ff4e 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ddc8:	90df      	str	r0, [sp, #892]	; 0x37c
    ddca:	e01f      	b.n	de0c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xb94>
    ddcc:	2001      	movs	r0, #1
    ddce:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    ddd2:	e015      	b.n	de00 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xb88>
    ddd4:	2000      	movs	r0, #0
    ddd6:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    ddda:	e011      	b.n	de00 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xb88>
    dddc:	2000      	movs	r0, #0
    ddde:	f88d 0ddb 	strb.w	r0, [sp, #3547]	; 0xddb
    dde2:	f89d 1ddb 	ldrb.w	r1, [sp, #3547]	; 0xddb
    dde6:	f644 206c 	movw	r0, #19052	; 0x4a6c
    ddea:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ddee:	f003 fae8 	bl	113c2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    ddf2:	f8cd 0ddc 	str.w	r0, [sp, #3548]	; 0xddc
    ddf6:	f8dd 0ddc 	ldr.w	r0, [sp, #3548]	; 0xddc
    ddfa:	f8cd 0674 	str.w	r0, [sp, #1652]	; 0x674
    ddfe:	e00a      	b.n	de16 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xb9e>
    de00:	f89d 0673 	ldrb.w	r0, [sp, #1651]	; 0x673
    de04:	07c0      	lsls	r0, r0, #31
    de06:	2800      	cmp	r0, #0
    de08:	d112      	bne.n	de30 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xbb8>
    de0a:	e055      	b.n	deb8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xc40>
    de0c:	98df      	ldr	r0, [sp, #892]	; 0x37c
    de0e:	07c1      	lsls	r1, r0, #31
    de10:	2900      	cmp	r1, #0
    de12:	d1e3      	bne.n	dddc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xb64>
    de14:	e7de      	b.n	ddd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xb5c>
    de16:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    de1a:	f20d 6174 	addw	r1, sp, #1652	; 0x674
    de1e:	f008 ff21 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    de22:	90de      	str	r0, [sp, #888]	; 0x378
    de24:	e7ff      	b.n	de26 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xbae>
    de26:	98de      	ldr	r0, [sp, #888]	; 0x378
    de28:	07c1      	lsls	r1, r0, #31
    de2a:	2900      	cmp	r1, #0
    de2c:	d1ce      	bne.n	ddcc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xb54>
    de2e:	e7d1      	b.n	ddd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xb5c>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
    de30:	f240 503c 	movw	r0, #1340	; 0x53c
    de34:	f2c0 0002 	movt	r0, #2
    de38:	6801      	ldr	r1, [r0, #0]
    de3a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    de3e:	f100 0212 	add.w	r2, r0, #18
    de42:	f8cd 2698 	str.w	r2, [sp, #1688]	; 0x698
    de46:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
    de4a:	f8cd 2d6c 	str.w	r2, [sp, #3436]	; 0xd6c
    de4e:	f249 1383 	movw	r3, #37251	; 0x9183
    de52:	f2c0 0301 	movt	r3, #1
    de56:	4610      	mov	r0, r2
    de58:	91dd      	str	r1, [sp, #884]	; 0x374
    de5a:	4619      	mov	r1, r3
    de5c:	f7fc fcbc 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    de60:	90dc      	str	r0, [sp, #880]	; 0x370
    de62:	91db      	str	r1, [sp, #876]	; 0x36c
    de64:	e7ff      	b.n	de66 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xbee>
    de66:	98dc      	ldr	r0, [sp, #880]	; 0x370
    de68:	f8cd 0690 	str.w	r0, [sp, #1680]	; 0x690
    de6c:	99db      	ldr	r1, [sp, #876]	; 0x36c
    de6e:	f8cd 1694 	str.w	r1, [sp, #1684]	; 0x694
    de72:	f64f 02e8 	movw	r2, #63720	; 0xf8e8
    de76:	f2c0 0201 	movt	r2, #1
    de7a:	6812      	ldr	r2, [r2, #0]
    de7c:	466b      	mov	r3, sp
    de7e:	f04f 0c01 	mov.w	ip, #1
    de82:	f8c3 c008 	str.w	ip, [r3, #8]
    de86:	605a      	str	r2, [r3, #4]
    de88:	f8c3 c000 	str.w	ip, [r3]
    de8c:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    de90:	2202      	movs	r2, #2
    de92:	f50d 63d2 	add.w	r3, sp, #1680	; 0x690
    de96:	99dd      	ldr	r1, [sp, #884]	; 0x374
    de98:	f008 fda9 	bl	169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    de9c:	e7ff      	b.n	de9e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xc26>
    de9e:	f8dd 166c 	ldr.w	r1, [sp, #1644]	; 0x66c
    dea2:	f240 505c 	movw	r0, #1372	; 0x55c
    dea6:	f2c0 0002 	movt	r0, #2
    deaa:	6802      	ldr	r2, [r0, #0]
    deac:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    deb0:	f004 fab6 	bl	12420 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    deb4:	e7ff      	b.n	deb6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xc3e>
    deb6:	e7ff      	b.n	deb8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xc40>
                if self.v[x] != kk {
    deb8:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    debc:	280f      	cmp	r0, #15
    debe:	f202 8767 	bhi.w	10d90 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3b18>
    dec2:	e7ff      	b.n	dec4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xc4c>
    dec4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dec8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    decc:	1842      	adds	r2, r0, r1
    dece:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ded2:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    ded6:	fa5f fc83 	uxtb.w	ip, r3
    deda:	4562      	cmp	r2, ip
    dedc:	d006      	beq.n	deec <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xc74>
    dede:	e7ff      	b.n	dee0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xc68>
                    self.next();
    dee0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dee4:	f002 ffc7 	bl	10e76 <_ZN8libchip814Chip8$LT$T$GT$4next17h59db21f4d7eca91dE>
    dee8:	e7ff      	b.n	deea <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xc72>
                if self.v[x] != kk {
    deea:	e7ff      	b.n	deec <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xc74>
        match (
    deec:	f002 bc91 	b.w	10812 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    def0:	2005      	movs	r0, #5
    def2:	f8cd 069c 	str.w	r0, [sp, #1692]	; 0x69c
    def6:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
    defa:	f2c0 0001 	movt	r0, #1
    defe:	6801      	ldr	r1, [r0, #0]
    df00:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    df04:	f008 feae 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    df08:	90da      	str	r0, [sp, #872]	; 0x368
    df0a:	e01f      	b.n	df4c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xcd4>
    df0c:	2001      	movs	r0, #1
    df0e:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    df12:	e015      	b.n	df40 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xcc8>
    df14:	2000      	movs	r0, #0
    df16:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    df1a:	e011      	b.n	df40 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xcc8>
    df1c:	2000      	movs	r0, #0
    df1e:	f88d 0de3 	strb.w	r0, [sp, #3555]	; 0xde3
    df22:	f89d 1de3 	ldrb.w	r1, [sp, #3555]	; 0xde3
    df26:	f644 206c 	movw	r0, #19052	; 0x4a6c
    df2a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    df2e:	f003 fa48 	bl	113c2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    df32:	f8cd 0de4 	str.w	r0, [sp, #3556]	; 0xde4
    df36:	f8dd 0de4 	ldr.w	r0, [sp, #3556]	; 0xde4
    df3a:	f8cd 06a4 	str.w	r0, [sp, #1700]	; 0x6a4
    df3e:	e00a      	b.n	df56 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xcde>
    df40:	f89d 06a3 	ldrb.w	r0, [sp, #1699]	; 0x6a3
    df44:	07c0      	lsls	r0, r0, #31
    df46:	2800      	cmp	r0, #0
    df48:	d112      	bne.n	df70 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xcf8>
    df4a:	e055      	b.n	dff8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xd80>
    df4c:	98da      	ldr	r0, [sp, #872]	; 0x368
    df4e:	07c1      	lsls	r1, r0, #31
    df50:	2900      	cmp	r1, #0
    df52:	d1e3      	bne.n	df1c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xca4>
    df54:	e7de      	b.n	df14 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xc9c>
    df56:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    df5a:	f20d 61a4 	addw	r1, sp, #1700	; 0x6a4
    df5e:	f008 fe81 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    df62:	90d9      	str	r0, [sp, #868]	; 0x364
    df64:	e7ff      	b.n	df66 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xcee>
    df66:	98d9      	ldr	r0, [sp, #868]	; 0x364
    df68:	07c1      	lsls	r1, r0, #31
    df6a:	2900      	cmp	r1, #0
    df6c:	d1ce      	bne.n	df0c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xc94>
    df6e:	e7d1      	b.n	df14 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xc9c>
                trace!("[{:04x}] SE Vx, Vy", self.pc);
    df70:	f240 40dc 	movw	r0, #1244	; 0x4dc
    df74:	f2c0 0002 	movt	r0, #2
    df78:	6801      	ldr	r1, [r0, #0]
    df7a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    df7e:	f100 0212 	add.w	r2, r0, #18
    df82:	f8cd 26c8 	str.w	r2, [sp, #1736]	; 0x6c8
    df86:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
    df8a:	f8cd 2d68 	str.w	r2, [sp, #3432]	; 0xd68
    df8e:	f249 1383 	movw	r3, #37251	; 0x9183
    df92:	f2c0 0301 	movt	r3, #1
    df96:	4610      	mov	r0, r2
    df98:	91d8      	str	r1, [sp, #864]	; 0x360
    df9a:	4619      	mov	r1, r3
    df9c:	f7fc fc1c 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    dfa0:	90d7      	str	r0, [sp, #860]	; 0x35c
    dfa2:	91d6      	str	r1, [sp, #856]	; 0x358
    dfa4:	e7ff      	b.n	dfa6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xd2e>
    dfa6:	98d7      	ldr	r0, [sp, #860]	; 0x35c
    dfa8:	f8cd 06c0 	str.w	r0, [sp, #1728]	; 0x6c0
    dfac:	99d6      	ldr	r1, [sp, #856]	; 0x358
    dfae:	f8cd 16c4 	str.w	r1, [sp, #1732]	; 0x6c4
    dfb2:	f64f 02e8 	movw	r2, #63720	; 0xf8e8
    dfb6:	f2c0 0201 	movt	r2, #1
    dfba:	6812      	ldr	r2, [r2, #0]
    dfbc:	466b      	mov	r3, sp
    dfbe:	f04f 0c01 	mov.w	ip, #1
    dfc2:	f8c3 c008 	str.w	ip, [r3, #8]
    dfc6:	605a      	str	r2, [r3, #4]
    dfc8:	f8c3 c000 	str.w	ip, [r3]
    dfcc:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    dfd0:	2202      	movs	r2, #2
    dfd2:	f50d 63d8 	add.w	r3, sp, #1728	; 0x6c0
    dfd6:	99d8      	ldr	r1, [sp, #864]	; 0x360
    dfd8:	f008 fd09 	bl	169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    dfdc:	e7ff      	b.n	dfde <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xd66>
    dfde:	f8dd 169c 	ldr.w	r1, [sp, #1692]	; 0x69c
    dfe2:	f240 40fc 	movw	r0, #1276	; 0x4fc
    dfe6:	f2c0 0002 	movt	r0, #2
    dfea:	6802      	ldr	r2, [r0, #0]
    dfec:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    dff0:	f004 fa16 	bl	12420 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    dff4:	e7ff      	b.n	dff6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xd7e>
    dff6:	e7ff      	b.n	dff8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xd80>
                if self.v[x] == self.v[y] {
    dff8:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    dffc:	280f      	cmp	r0, #15
    dffe:	f202 86b3 	bhi.w	10d68 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3af0>
    e002:	e7ff      	b.n	e004 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xd8c>
    e004:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e008:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e00c:	1842      	adds	r2, r0, r1
    e00e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e012:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    e016:	2b0f      	cmp	r3, #15
    e018:	92d5      	str	r2, [sp, #852]	; 0x354
    e01a:	f202 86af 	bhi.w	10d7c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3b04>
    e01e:	e7ff      	b.n	e020 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xda8>
    e020:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e024:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e028:	1842      	adds	r2, r0, r1
    e02a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e02e:	9bd5      	ldr	r3, [sp, #852]	; 0x354
    e030:	fa5f fc83 	uxtb.w	ip, r3
    e034:	4594      	cmp	ip, r2
    e036:	d106      	bne.n	e046 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xdce>
    e038:	e7ff      	b.n	e03a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xdc2>
                    self.next();
    e03a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e03e:	f002 ff1a 	bl	10e76 <_ZN8libchip814Chip8$LT$T$GT$4next17h59db21f4d7eca91dE>
    e042:	e7ff      	b.n	e044 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xdcc>
                if self.v[x] == self.v[y] {
    e044:	e7ff      	b.n	e046 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xdce>
        match (
    e046:	f002 bbe4 	b.w	10812 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    e04a:	2005      	movs	r0, #5
    e04c:	f8cd 06cc 	str.w	r0, [sp, #1740]	; 0x6cc
    e050:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
    e054:	f2c0 0001 	movt	r0, #1
    e058:	6801      	ldr	r1, [r0, #0]
    e05a:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    e05e:	f008 fe01 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e062:	90d4      	str	r0, [sp, #848]	; 0x350
    e064:	e01f      	b.n	e0a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xe2e>
    e066:	2001      	movs	r0, #1
    e068:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    e06c:	e015      	b.n	e09a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xe22>
    e06e:	2000      	movs	r0, #0
    e070:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    e074:	e011      	b.n	e09a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xe22>
    e076:	2000      	movs	r0, #0
    e078:	f88d 0deb 	strb.w	r0, [sp, #3563]	; 0xdeb
    e07c:	f89d 1deb 	ldrb.w	r1, [sp, #3563]	; 0xdeb
    e080:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e084:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e088:	f003 f99b 	bl	113c2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e08c:	f8cd 0dec 	str.w	r0, [sp, #3564]	; 0xdec
    e090:	f8dd 0dec 	ldr.w	r0, [sp, #3564]	; 0xdec
    e094:	f8cd 06d4 	str.w	r0, [sp, #1748]	; 0x6d4
    e098:	e00a      	b.n	e0b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xe38>
    e09a:	f89d 06d3 	ldrb.w	r0, [sp, #1747]	; 0x6d3
    e09e:	07c0      	lsls	r0, r0, #31
    e0a0:	2800      	cmp	r0, #0
    e0a2:	d112      	bne.n	e0ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xe52>
    e0a4:	e055      	b.n	e152 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xeda>
    e0a6:	98d4      	ldr	r0, [sp, #848]	; 0x350
    e0a8:	07c1      	lsls	r1, r0, #31
    e0aa:	2900      	cmp	r1, #0
    e0ac:	d1e3      	bne.n	e076 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xdfe>
    e0ae:	e7de      	b.n	e06e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xdf6>
    e0b0:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    e0b4:	f20d 61d4 	addw	r1, sp, #1748	; 0x6d4
    e0b8:	f008 fdd4 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e0bc:	90d3      	str	r0, [sp, #844]	; 0x34c
    e0be:	e7ff      	b.n	e0c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xe48>
    e0c0:	98d3      	ldr	r0, [sp, #844]	; 0x34c
    e0c2:	07c1      	lsls	r1, r0, #31
    e0c4:	2900      	cmp	r1, #0
    e0c6:	d1ce      	bne.n	e066 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xdee>
    e0c8:	e7d1      	b.n	e06e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xdf6>
                trace!("[{:04x}] LD Vx, kk", self.pc);
    e0ca:	f240 30f4 	movw	r0, #1012	; 0x3f4
    e0ce:	f2c0 0002 	movt	r0, #2
    e0d2:	6801      	ldr	r1, [r0, #0]
    e0d4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e0d8:	f100 0212 	add.w	r2, r0, #18
    e0dc:	f8cd 26f8 	str.w	r2, [sp, #1784]	; 0x6f8
    e0e0:	f8dd 26f8 	ldr.w	r2, [sp, #1784]	; 0x6f8
    e0e4:	f8cd 2d5c 	str.w	r2, [sp, #3420]	; 0xd5c
    e0e8:	f249 1383 	movw	r3, #37251	; 0x9183
    e0ec:	f2c0 0301 	movt	r3, #1
    e0f0:	4610      	mov	r0, r2
    e0f2:	91d2      	str	r1, [sp, #840]	; 0x348
    e0f4:	4619      	mov	r1, r3
    e0f6:	f7fc fb6f 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e0fa:	90d1      	str	r0, [sp, #836]	; 0x344
    e0fc:	91d0      	str	r1, [sp, #832]	; 0x340
    e0fe:	e7ff      	b.n	e100 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xe88>
    e100:	98d1      	ldr	r0, [sp, #836]	; 0x344
    e102:	f8cd 06f0 	str.w	r0, [sp, #1776]	; 0x6f0
    e106:	99d0      	ldr	r1, [sp, #832]	; 0x340
    e108:	f8cd 16f4 	str.w	r1, [sp, #1780]	; 0x6f4
    e10c:	f64f 02e8 	movw	r2, #63720	; 0xf8e8
    e110:	f2c0 0201 	movt	r2, #1
    e114:	6812      	ldr	r2, [r2, #0]
    e116:	466b      	mov	r3, sp
    e118:	f04f 0c01 	mov.w	ip, #1
    e11c:	f8c3 c008 	str.w	ip, [r3, #8]
    e120:	605a      	str	r2, [r3, #4]
    e122:	f8c3 c000 	str.w	ip, [r3]
    e126:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    e12a:	2202      	movs	r2, #2
    e12c:	f50d 63de 	add.w	r3, sp, #1776	; 0x6f0
    e130:	99d2      	ldr	r1, [sp, #840]	; 0x348
    e132:	f008 fc5c 	bl	169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e136:	e7ff      	b.n	e138 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xec0>
    e138:	f8dd 16cc 	ldr.w	r1, [sp, #1740]	; 0x6cc
    e13c:	f240 4014 	movw	r0, #1044	; 0x414
    e140:	f2c0 0002 	movt	r0, #2
    e144:	6802      	ldr	r2, [r0, #0]
    e146:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    e14a:	f004 f969 	bl	12420 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e14e:	e7ff      	b.n	e150 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xed8>
    e150:	e7ff      	b.n	e152 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xeda>
                self.v[x] = kk;
    e152:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e156:	280f      	cmp	r0, #15
    e158:	f202 85fc 	bhi.w	10d54 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3adc>
    e15c:	e7ff      	b.n	e15e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xee6>
    e15e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e162:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e166:	1842      	adds	r2, r0, r1
    e168:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    e16c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e170:	f002 bb4f 	b.w	10812 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    e174:	2005      	movs	r0, #5
    e176:	f8cd 06fc 	str.w	r0, [sp, #1788]	; 0x6fc
    e17a:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
    e17e:	f2c0 0001 	movt	r0, #1
    e182:	6801      	ldr	r1, [r0, #0]
    e184:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    e188:	f008 fd6c 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e18c:	90cf      	str	r0, [sp, #828]	; 0x33c
    e18e:	e01f      	b.n	e1d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xf58>
    e190:	2001      	movs	r0, #1
    e192:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    e196:	e015      	b.n	e1c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xf4c>
    e198:	2000      	movs	r0, #0
    e19a:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    e19e:	e011      	b.n	e1c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xf4c>
    e1a0:	2000      	movs	r0, #0
    e1a2:	f88d 0df3 	strb.w	r0, [sp, #3571]	; 0xdf3
    e1a6:	f89d 1df3 	ldrb.w	r1, [sp, #3571]	; 0xdf3
    e1aa:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e1ae:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e1b2:	f003 f906 	bl	113c2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e1b6:	f8cd 0df4 	str.w	r0, [sp, #3572]	; 0xdf4
    e1ba:	f8dd 0df4 	ldr.w	r0, [sp, #3572]	; 0xdf4
    e1be:	f8cd 0704 	str.w	r0, [sp, #1796]	; 0x704
    e1c2:	e00a      	b.n	e1da <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xf62>
    e1c4:	f89d 0703 	ldrb.w	r0, [sp, #1795]	; 0x703
    e1c8:	07c0      	lsls	r0, r0, #31
    e1ca:	2800      	cmp	r0, #0
    e1cc:	d112      	bne.n	e1f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xf7c>
    e1ce:	e055      	b.n	e27c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1004>
    e1d0:	98cf      	ldr	r0, [sp, #828]	; 0x33c
    e1d2:	07c1      	lsls	r1, r0, #31
    e1d4:	2900      	cmp	r1, #0
    e1d6:	d1e3      	bne.n	e1a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xf28>
    e1d8:	e7de      	b.n	e198 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xf20>
    e1da:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    e1de:	f20d 7104 	addw	r1, sp, #1796	; 0x704
    e1e2:	f008 fd3f 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e1e6:	90ce      	str	r0, [sp, #824]	; 0x338
    e1e8:	e7ff      	b.n	e1ea <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xf72>
    e1ea:	98ce      	ldr	r0, [sp, #824]	; 0x338
    e1ec:	07c1      	lsls	r1, r0, #31
    e1ee:	2900      	cmp	r1, #0
    e1f0:	d1ce      	bne.n	e190 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xf18>
    e1f2:	e7d1      	b.n	e198 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xf20>
                trace!("[{:04x}] ADD Vx, kk", self.pc);
    e1f4:	f240 3094 	movw	r0, #916	; 0x394
    e1f8:	f2c0 0002 	movt	r0, #2
    e1fc:	6801      	ldr	r1, [r0, #0]
    e1fe:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e202:	f100 0212 	add.w	r2, r0, #18
    e206:	f8cd 2728 	str.w	r2, [sp, #1832]	; 0x728
    e20a:	f8dd 2728 	ldr.w	r2, [sp, #1832]	; 0x728
    e20e:	f8cd 2d58 	str.w	r2, [sp, #3416]	; 0xd58
    e212:	f249 1383 	movw	r3, #37251	; 0x9183
    e216:	f2c0 0301 	movt	r3, #1
    e21a:	4610      	mov	r0, r2
    e21c:	91cd      	str	r1, [sp, #820]	; 0x334
    e21e:	4619      	mov	r1, r3
    e220:	f7fc fada 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e224:	90cc      	str	r0, [sp, #816]	; 0x330
    e226:	91cb      	str	r1, [sp, #812]	; 0x32c
    e228:	e7ff      	b.n	e22a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xfb2>
    e22a:	98cc      	ldr	r0, [sp, #816]	; 0x330
    e22c:	f8cd 0720 	str.w	r0, [sp, #1824]	; 0x720
    e230:	99cb      	ldr	r1, [sp, #812]	; 0x32c
    e232:	f8cd 1724 	str.w	r1, [sp, #1828]	; 0x724
    e236:	f64f 02e8 	movw	r2, #63720	; 0xf8e8
    e23a:	f2c0 0201 	movt	r2, #1
    e23e:	6812      	ldr	r2, [r2, #0]
    e240:	466b      	mov	r3, sp
    e242:	f04f 0c01 	mov.w	ip, #1
    e246:	f8c3 c008 	str.w	ip, [r3, #8]
    e24a:	605a      	str	r2, [r3, #4]
    e24c:	f8c3 c000 	str.w	ip, [r3]
    e250:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    e254:	2202      	movs	r2, #2
    e256:	f50d 63e4 	add.w	r3, sp, #1824	; 0x720
    e25a:	99cd      	ldr	r1, [sp, #820]	; 0x334
    e25c:	f008 fbc7 	bl	169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e260:	e7ff      	b.n	e262 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0xfea>
    e262:	f8dd 16fc 	ldr.w	r1, [sp, #1788]	; 0x6fc
    e266:	f240 30b4 	movw	r0, #948	; 0x3b4
    e26a:	f2c0 0002 	movt	r0, #2
    e26e:	6802      	ldr	r2, [r0, #0]
    e270:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    e274:	f004 f8d4 	bl	12420 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e278:	e7ff      	b.n	e27a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1002>
    e27a:	e7ff      	b.n	e27c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1004>
                self.v[x] = self.v[x].wrapping_add(kk);
    e27c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e280:	280f      	cmp	r0, #15
    e282:	f202 8553 	bhi.w	10d2c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3ab4>
    e286:	e7ff      	b.n	e288 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1010>
    e288:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e28c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e290:	1842      	adds	r2, r0, r1
    e292:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    e296:	f8dd 145c 	ldr.w	r1, [sp, #1116]	; 0x45c
    e29a:	f008 fc0c 	bl	16ab6 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE>
    e29e:	90ca      	str	r0, [sp, #808]	; 0x328
    e2a0:	e7ff      	b.n	e2a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x102a>
    e2a2:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e2a6:	280f      	cmp	r0, #15
    e2a8:	f202 854a 	bhi.w	10d40 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3ac8>
    e2ac:	e7ff      	b.n	e2ae <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1036>
    e2ae:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e2b2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e2b6:	1842      	adds	r2, r0, r1
    e2b8:	9bca      	ldr	r3, [sp, #808]	; 0x328
    e2ba:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e2be:	f002 baa8 	b.w	10812 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    e2c2:	2005      	movs	r0, #5
    e2c4:	f8cd 072c 	str.w	r0, [sp, #1836]	; 0x72c
    e2c8:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
    e2cc:	f2c0 0001 	movt	r0, #1
    e2d0:	6801      	ldr	r1, [r0, #0]
    e2d2:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    e2d6:	f008 fcc5 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e2da:	90c9      	str	r0, [sp, #804]	; 0x324
    e2dc:	e01f      	b.n	e31e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x10a6>
    e2de:	2001      	movs	r0, #1
    e2e0:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    e2e4:	e015      	b.n	e312 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x109a>
    e2e6:	2000      	movs	r0, #0
    e2e8:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    e2ec:	e011      	b.n	e312 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x109a>
    e2ee:	2000      	movs	r0, #0
    e2f0:	f88d 0dfb 	strb.w	r0, [sp, #3579]	; 0xdfb
    e2f4:	f89d 1dfb 	ldrb.w	r1, [sp, #3579]	; 0xdfb
    e2f8:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e2fc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e300:	f003 f85f 	bl	113c2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e304:	f8cd 0dfc 	str.w	r0, [sp, #3580]	; 0xdfc
    e308:	f8dd 0dfc 	ldr.w	r0, [sp, #3580]	; 0xdfc
    e30c:	f8cd 0734 	str.w	r0, [sp, #1844]	; 0x734
    e310:	e00a      	b.n	e328 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x10b0>
    e312:	f89d 0733 	ldrb.w	r0, [sp, #1843]	; 0x733
    e316:	07c0      	lsls	r0, r0, #31
    e318:	2800      	cmp	r0, #0
    e31a:	d112      	bne.n	e342 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x10ca>
    e31c:	e055      	b.n	e3ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1152>
    e31e:	98c9      	ldr	r0, [sp, #804]	; 0x324
    e320:	07c1      	lsls	r1, r0, #31
    e322:	2900      	cmp	r1, #0
    e324:	d1e3      	bne.n	e2ee <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1076>
    e326:	e7de      	b.n	e2e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x106e>
    e328:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    e32c:	f20d 7134 	addw	r1, sp, #1844	; 0x734
    e330:	f008 fc98 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e334:	90c8      	str	r0, [sp, #800]	; 0x320
    e336:	e7ff      	b.n	e338 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x10c0>
    e338:	98c8      	ldr	r0, [sp, #800]	; 0x320
    e33a:	07c1      	lsls	r1, r0, #31
    e33c:	2900      	cmp	r1, #0
    e33e:	d1ce      	bne.n	e2de <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1066>
    e340:	e7d1      	b.n	e2e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x106e>
                trace!("[{:04x}] LD Vx, Vy", self.pc);
    e342:	f240 3034 	movw	r0, #820	; 0x334
    e346:	f2c0 0002 	movt	r0, #2
    e34a:	6801      	ldr	r1, [r0, #0]
    e34c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e350:	f100 0212 	add.w	r2, r0, #18
    e354:	f8cd 2758 	str.w	r2, [sp, #1880]	; 0x758
    e358:	f8dd 2758 	ldr.w	r2, [sp, #1880]	; 0x758
    e35c:	f8cd 2d54 	str.w	r2, [sp, #3412]	; 0xd54
    e360:	f249 1383 	movw	r3, #37251	; 0x9183
    e364:	f2c0 0301 	movt	r3, #1
    e368:	4610      	mov	r0, r2
    e36a:	91c7      	str	r1, [sp, #796]	; 0x31c
    e36c:	4619      	mov	r1, r3
    e36e:	f7fc fa33 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e372:	90c6      	str	r0, [sp, #792]	; 0x318
    e374:	91c5      	str	r1, [sp, #788]	; 0x314
    e376:	e7ff      	b.n	e378 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1100>
    e378:	98c6      	ldr	r0, [sp, #792]	; 0x318
    e37a:	f8cd 0750 	str.w	r0, [sp, #1872]	; 0x750
    e37e:	99c5      	ldr	r1, [sp, #788]	; 0x314
    e380:	f8cd 1754 	str.w	r1, [sp, #1876]	; 0x754
    e384:	f64f 02e8 	movw	r2, #63720	; 0xf8e8
    e388:	f2c0 0201 	movt	r2, #1
    e38c:	6812      	ldr	r2, [r2, #0]
    e38e:	466b      	mov	r3, sp
    e390:	f04f 0c01 	mov.w	ip, #1
    e394:	f8c3 c008 	str.w	ip, [r3, #8]
    e398:	605a      	str	r2, [r3, #4]
    e39a:	f8c3 c000 	str.w	ip, [r3]
    e39e:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    e3a2:	2202      	movs	r2, #2
    e3a4:	f50d 63ea 	add.w	r3, sp, #1872	; 0x750
    e3a8:	99c7      	ldr	r1, [sp, #796]	; 0x31c
    e3aa:	f008 fb20 	bl	169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e3ae:	e7ff      	b.n	e3b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1138>
    e3b0:	f8dd 172c 	ldr.w	r1, [sp, #1836]	; 0x72c
    e3b4:	f240 3054 	movw	r0, #852	; 0x354
    e3b8:	f2c0 0002 	movt	r0, #2
    e3bc:	6802      	ldr	r2, [r0, #0]
    e3be:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    e3c2:	f004 f82d 	bl	12420 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e3c6:	e7ff      	b.n	e3c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1150>
    e3c8:	e7ff      	b.n	e3ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1152>
                self.v[x] = self.v[y];
    e3ca:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    e3ce:	280f      	cmp	r0, #15
    e3d0:	f202 8498 	bhi.w	10d04 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3a8c>
    e3d4:	e7ff      	b.n	e3d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x115e>
    e3d6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e3da:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e3de:	1842      	adds	r2, r0, r1
    e3e0:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e3e4:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    e3e8:	2b0f      	cmp	r3, #15
    e3ea:	92c4      	str	r2, [sp, #784]	; 0x310
    e3ec:	f202 8494 	bhi.w	10d18 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3aa0>
    e3f0:	e7ff      	b.n	e3f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x117a>
    e3f2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e3f6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e3fa:	1842      	adds	r2, r0, r1
    e3fc:	9bc4      	ldr	r3, [sp, #784]	; 0x310
    e3fe:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e402:	f002 ba06 	b.w	10812 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    e406:	2005      	movs	r0, #5
    e408:	f8cd 075c 	str.w	r0, [sp, #1884]	; 0x75c
    e40c:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
    e410:	f2c0 0001 	movt	r0, #1
    e414:	6801      	ldr	r1, [r0, #0]
    e416:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    e41a:	f008 fc23 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e41e:	90c3      	str	r0, [sp, #780]	; 0x30c
    e420:	e01f      	b.n	e462 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x11ea>
    e422:	2001      	movs	r0, #1
    e424:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    e428:	e015      	b.n	e456 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x11de>
    e42a:	2000      	movs	r0, #0
    e42c:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    e430:	e011      	b.n	e456 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x11de>
    e432:	2000      	movs	r0, #0
    e434:	f88d 0e03 	strb.w	r0, [sp, #3587]	; 0xe03
    e438:	f89d 1e03 	ldrb.w	r1, [sp, #3587]	; 0xe03
    e43c:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e440:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e444:	f002 ffbd 	bl	113c2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e448:	f8cd 0e04 	str.w	r0, [sp, #3588]	; 0xe04
    e44c:	f8dd 0e04 	ldr.w	r0, [sp, #3588]	; 0xe04
    e450:	f8cd 0764 	str.w	r0, [sp, #1892]	; 0x764
    e454:	e00a      	b.n	e46c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x11f4>
    e456:	f89d 0763 	ldrb.w	r0, [sp, #1891]	; 0x763
    e45a:	07c0      	lsls	r0, r0, #31
    e45c:	2800      	cmp	r0, #0
    e45e:	d112      	bne.n	e486 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x120e>
    e460:	e055      	b.n	e50e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1296>
    e462:	98c3      	ldr	r0, [sp, #780]	; 0x30c
    e464:	07c1      	lsls	r1, r0, #31
    e466:	2900      	cmp	r1, #0
    e468:	d1e3      	bne.n	e432 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x11ba>
    e46a:	e7de      	b.n	e42a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x11b2>
    e46c:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    e470:	f20d 7164 	addw	r1, sp, #1892	; 0x764
    e474:	f008 fbf6 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e478:	90c2      	str	r0, [sp, #776]	; 0x308
    e47a:	e7ff      	b.n	e47c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1204>
    e47c:	98c2      	ldr	r0, [sp, #776]	; 0x308
    e47e:	07c1      	lsls	r1, r0, #31
    e480:	2900      	cmp	r1, #0
    e482:	d1ce      	bne.n	e422 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x11aa>
    e484:	e7d1      	b.n	e42a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x11b2>
                trace!("[{:04x}] OR Vx, Vy", self.pc);
    e486:	f240 20d4 	movw	r0, #724	; 0x2d4
    e48a:	f2c0 0002 	movt	r0, #2
    e48e:	6801      	ldr	r1, [r0, #0]
    e490:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e494:	f100 0212 	add.w	r2, r0, #18
    e498:	f8cd 2788 	str.w	r2, [sp, #1928]	; 0x788
    e49c:	f8dd 2788 	ldr.w	r2, [sp, #1928]	; 0x788
    e4a0:	f8cd 2d50 	str.w	r2, [sp, #3408]	; 0xd50
    e4a4:	f249 1383 	movw	r3, #37251	; 0x9183
    e4a8:	f2c0 0301 	movt	r3, #1
    e4ac:	4610      	mov	r0, r2
    e4ae:	91c1      	str	r1, [sp, #772]	; 0x304
    e4b0:	4619      	mov	r1, r3
    e4b2:	f7fc f991 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e4b6:	90c0      	str	r0, [sp, #768]	; 0x300
    e4b8:	91bf      	str	r1, [sp, #764]	; 0x2fc
    e4ba:	e7ff      	b.n	e4bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1244>
    e4bc:	98c0      	ldr	r0, [sp, #768]	; 0x300
    e4be:	f8cd 0780 	str.w	r0, [sp, #1920]	; 0x780
    e4c2:	99bf      	ldr	r1, [sp, #764]	; 0x2fc
    e4c4:	f8cd 1784 	str.w	r1, [sp, #1924]	; 0x784
    e4c8:	f64f 02e8 	movw	r2, #63720	; 0xf8e8
    e4cc:	f2c0 0201 	movt	r2, #1
    e4d0:	6812      	ldr	r2, [r2, #0]
    e4d2:	466b      	mov	r3, sp
    e4d4:	f04f 0c01 	mov.w	ip, #1
    e4d8:	f8c3 c008 	str.w	ip, [r3, #8]
    e4dc:	605a      	str	r2, [r3, #4]
    e4de:	f8c3 c000 	str.w	ip, [r3]
    e4e2:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    e4e6:	2202      	movs	r2, #2
    e4e8:	f50d 63f0 	add.w	r3, sp, #1920	; 0x780
    e4ec:	99c1      	ldr	r1, [sp, #772]	; 0x304
    e4ee:	f008 fa7e 	bl	169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e4f2:	e7ff      	b.n	e4f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x127c>
    e4f4:	f8dd 175c 	ldr.w	r1, [sp, #1884]	; 0x75c
    e4f8:	f240 20f4 	movw	r0, #756	; 0x2f4
    e4fc:	f2c0 0002 	movt	r0, #2
    e500:	6802      	ldr	r2, [r0, #0]
    e502:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    e506:	f003 ff8b 	bl	12420 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e50a:	e7ff      	b.n	e50c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1294>
    e50c:	e7ff      	b.n	e50e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1296>
                self.v[x] |= self.v[y];
    e50e:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    e512:	280f      	cmp	r0, #15
    e514:	f202 83e2 	bhi.w	10cdc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3a64>
    e518:	e7ff      	b.n	e51a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x12a2>
    e51a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e51e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e522:	1842      	adds	r2, r0, r1
    e524:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e528:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    e52c:	2b0f      	cmp	r3, #15
    e52e:	92be      	str	r2, [sp, #760]	; 0x2f8
    e530:	f202 83de 	bhi.w	10cf0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3a78>
    e534:	e7ff      	b.n	e536 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x12be>
    e536:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e53a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e53e:	1842      	adds	r2, r0, r1
    e540:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    e544:	f8dd c2f8 	ldr.w	ip, [sp, #760]	; 0x2f8
    e548:	ea43 030c 	orr.w	r3, r3, ip
    e54c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e550:	f002 b95f 	b.w	10812 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    e554:	2005      	movs	r0, #5
    e556:	f8cd 078c 	str.w	r0, [sp, #1932]	; 0x78c
    e55a:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
    e55e:	f2c0 0001 	movt	r0, #1
    e562:	6801      	ldr	r1, [r0, #0]
    e564:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    e568:	f008 fb7c 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e56c:	90bd      	str	r0, [sp, #756]	; 0x2f4
    e56e:	e01f      	b.n	e5b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1338>
    e570:	2001      	movs	r0, #1
    e572:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    e576:	e015      	b.n	e5a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x132c>
    e578:	2000      	movs	r0, #0
    e57a:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    e57e:	e011      	b.n	e5a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x132c>
    e580:	2000      	movs	r0, #0
    e582:	f88d 0e0b 	strb.w	r0, [sp, #3595]	; 0xe0b
    e586:	f89d 1e0b 	ldrb.w	r1, [sp, #3595]	; 0xe0b
    e58a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e58e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e592:	f002 ff16 	bl	113c2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e596:	f8cd 0e0c 	str.w	r0, [sp, #3596]	; 0xe0c
    e59a:	f8dd 0e0c 	ldr.w	r0, [sp, #3596]	; 0xe0c
    e59e:	f8cd 0794 	str.w	r0, [sp, #1940]	; 0x794
    e5a2:	e00a      	b.n	e5ba <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1342>
    e5a4:	f89d 0793 	ldrb.w	r0, [sp, #1939]	; 0x793
    e5a8:	07c0      	lsls	r0, r0, #31
    e5aa:	2800      	cmp	r0, #0
    e5ac:	d112      	bne.n	e5d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x135c>
    e5ae:	e055      	b.n	e65c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x13e4>
    e5b0:	98bd      	ldr	r0, [sp, #756]	; 0x2f4
    e5b2:	07c1      	lsls	r1, r0, #31
    e5b4:	2900      	cmp	r1, #0
    e5b6:	d1e3      	bne.n	e580 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1308>
    e5b8:	e7de      	b.n	e578 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1300>
    e5ba:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    e5be:	f20d 7194 	addw	r1, sp, #1940	; 0x794
    e5c2:	f008 fb4f 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e5c6:	90bc      	str	r0, [sp, #752]	; 0x2f0
    e5c8:	e7ff      	b.n	e5ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1352>
    e5ca:	98bc      	ldr	r0, [sp, #752]	; 0x2f0
    e5cc:	07c1      	lsls	r1, r0, #31
    e5ce:	2900      	cmp	r1, #0
    e5d0:	d1ce      	bne.n	e570 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x12f8>
    e5d2:	e7d1      	b.n	e578 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1300>
                trace!("[{:04x}] AND Vx, Vy", self.pc);
    e5d4:	f240 2074 	movw	r0, #628	; 0x274
    e5d8:	f2c0 0002 	movt	r0, #2
    e5dc:	6801      	ldr	r1, [r0, #0]
    e5de:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e5e2:	f100 0212 	add.w	r2, r0, #18
    e5e6:	f8cd 27b8 	str.w	r2, [sp, #1976]	; 0x7b8
    e5ea:	f8dd 27b8 	ldr.w	r2, [sp, #1976]	; 0x7b8
    e5ee:	f8cd 2d4c 	str.w	r2, [sp, #3404]	; 0xd4c
    e5f2:	f249 1383 	movw	r3, #37251	; 0x9183
    e5f6:	f2c0 0301 	movt	r3, #1
    e5fa:	4610      	mov	r0, r2
    e5fc:	91bb      	str	r1, [sp, #748]	; 0x2ec
    e5fe:	4619      	mov	r1, r3
    e600:	f7fc f8ea 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e604:	90ba      	str	r0, [sp, #744]	; 0x2e8
    e606:	91b9      	str	r1, [sp, #740]	; 0x2e4
    e608:	e7ff      	b.n	e60a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1392>
    e60a:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
    e60c:	f8cd 07b0 	str.w	r0, [sp, #1968]	; 0x7b0
    e610:	99b9      	ldr	r1, [sp, #740]	; 0x2e4
    e612:	f8cd 17b4 	str.w	r1, [sp, #1972]	; 0x7b4
    e616:	f64f 02e8 	movw	r2, #63720	; 0xf8e8
    e61a:	f2c0 0201 	movt	r2, #1
    e61e:	6812      	ldr	r2, [r2, #0]
    e620:	466b      	mov	r3, sp
    e622:	f04f 0c01 	mov.w	ip, #1
    e626:	f8c3 c008 	str.w	ip, [r3, #8]
    e62a:	605a      	str	r2, [r3, #4]
    e62c:	f8c3 c000 	str.w	ip, [r3]
    e630:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    e634:	2202      	movs	r2, #2
    e636:	f50d 63f6 	add.w	r3, sp, #1968	; 0x7b0
    e63a:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
    e63c:	f008 f9d7 	bl	169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e640:	e7ff      	b.n	e642 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x13ca>
    e642:	f8dd 178c 	ldr.w	r1, [sp, #1932]	; 0x78c
    e646:	f240 2094 	movw	r0, #660	; 0x294
    e64a:	f2c0 0002 	movt	r0, #2
    e64e:	6802      	ldr	r2, [r0, #0]
    e650:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    e654:	f003 fee4 	bl	12420 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e658:	e7ff      	b.n	e65a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x13e2>
    e65a:	e7ff      	b.n	e65c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x13e4>
                self.v[x] &= self.v[y];
    e65c:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    e660:	280f      	cmp	r0, #15
    e662:	f202 8327 	bhi.w	10cb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3a3c>
    e666:	e7ff      	b.n	e668 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x13f0>
    e668:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e66c:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e670:	1842      	adds	r2, r0, r1
    e672:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e676:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    e67a:	2b0f      	cmp	r3, #15
    e67c:	92b8      	str	r2, [sp, #736]	; 0x2e0
    e67e:	f202 8323 	bhi.w	10cc8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3a50>
    e682:	e7ff      	b.n	e684 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x140c>
    e684:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e688:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e68c:	1842      	adds	r2, r0, r1
    e68e:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    e692:	f8dd c2e0 	ldr.w	ip, [sp, #736]	; 0x2e0
    e696:	ea03 030c 	and.w	r3, r3, ip
    e69a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e69e:	f002 b8b8 	b.w	10812 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    e6a2:	2005      	movs	r0, #5
    e6a4:	f8cd 07bc 	str.w	r0, [sp, #1980]	; 0x7bc
    e6a8:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
    e6ac:	f2c0 0001 	movt	r0, #1
    e6b0:	6801      	ldr	r1, [r0, #0]
    e6b2:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    e6b6:	f008 fad5 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e6ba:	90b7      	str	r0, [sp, #732]	; 0x2dc
    e6bc:	e01f      	b.n	e6fe <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1486>
    e6be:	2001      	movs	r0, #1
    e6c0:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    e6c4:	e015      	b.n	e6f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x147a>
    e6c6:	2000      	movs	r0, #0
    e6c8:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    e6cc:	e011      	b.n	e6f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x147a>
    e6ce:	2000      	movs	r0, #0
    e6d0:	f88d 0e13 	strb.w	r0, [sp, #3603]	; 0xe13
    e6d4:	f89d 1e13 	ldrb.w	r1, [sp, #3603]	; 0xe13
    e6d8:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e6dc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e6e0:	f002 fe6f 	bl	113c2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e6e4:	f8cd 0e14 	str.w	r0, [sp, #3604]	; 0xe14
    e6e8:	f8dd 0e14 	ldr.w	r0, [sp, #3604]	; 0xe14
    e6ec:	f8cd 07c4 	str.w	r0, [sp, #1988]	; 0x7c4
    e6f0:	e00a      	b.n	e708 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1490>
    e6f2:	f89d 07c3 	ldrb.w	r0, [sp, #1987]	; 0x7c3
    e6f6:	07c0      	lsls	r0, r0, #31
    e6f8:	2800      	cmp	r0, #0
    e6fa:	d112      	bne.n	e722 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x14aa>
    e6fc:	e055      	b.n	e7aa <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1532>
    e6fe:	98b7      	ldr	r0, [sp, #732]	; 0x2dc
    e700:	07c1      	lsls	r1, r0, #31
    e702:	2900      	cmp	r1, #0
    e704:	d1e3      	bne.n	e6ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1456>
    e706:	e7de      	b.n	e6c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x144e>
    e708:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    e70c:	f20d 71c4 	addw	r1, sp, #1988	; 0x7c4
    e710:	f008 faa8 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e714:	90b6      	str	r0, [sp, #728]	; 0x2d8
    e716:	e7ff      	b.n	e718 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x14a0>
    e718:	98b6      	ldr	r0, [sp, #728]	; 0x2d8
    e71a:	07c1      	lsls	r1, r0, #31
    e71c:	2900      	cmp	r1, #0
    e71e:	d1ce      	bne.n	e6be <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1446>
    e720:	e7d1      	b.n	e6c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x144e>
                trace!("[{:04x}] XOR Vx, Vy", self.pc);
    e722:	f240 2014 	movw	r0, #532	; 0x214
    e726:	f2c0 0002 	movt	r0, #2
    e72a:	6801      	ldr	r1, [r0, #0]
    e72c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e730:	f100 0212 	add.w	r2, r0, #18
    e734:	f8cd 27e8 	str.w	r2, [sp, #2024]	; 0x7e8
    e738:	f8dd 27e8 	ldr.w	r2, [sp, #2024]	; 0x7e8
    e73c:	f8cd 2d48 	str.w	r2, [sp, #3400]	; 0xd48
    e740:	f249 1383 	movw	r3, #37251	; 0x9183
    e744:	f2c0 0301 	movt	r3, #1
    e748:	4610      	mov	r0, r2
    e74a:	91b5      	str	r1, [sp, #724]	; 0x2d4
    e74c:	4619      	mov	r1, r3
    e74e:	f7fc f843 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e752:	90b4      	str	r0, [sp, #720]	; 0x2d0
    e754:	91b3      	str	r1, [sp, #716]	; 0x2cc
    e756:	e7ff      	b.n	e758 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x14e0>
    e758:	98b4      	ldr	r0, [sp, #720]	; 0x2d0
    e75a:	f8cd 07e0 	str.w	r0, [sp, #2016]	; 0x7e0
    e75e:	99b3      	ldr	r1, [sp, #716]	; 0x2cc
    e760:	f8cd 17e4 	str.w	r1, [sp, #2020]	; 0x7e4
    e764:	f64f 02e8 	movw	r2, #63720	; 0xf8e8
    e768:	f2c0 0201 	movt	r2, #1
    e76c:	6812      	ldr	r2, [r2, #0]
    e76e:	466b      	mov	r3, sp
    e770:	f04f 0c01 	mov.w	ip, #1
    e774:	f8c3 c008 	str.w	ip, [r3, #8]
    e778:	605a      	str	r2, [r3, #4]
    e77a:	f8c3 c000 	str.w	ip, [r3]
    e77e:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    e782:	2202      	movs	r2, #2
    e784:	f50d 63fc 	add.w	r3, sp, #2016	; 0x7e0
    e788:	99b5      	ldr	r1, [sp, #724]	; 0x2d4
    e78a:	f008 f930 	bl	169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e78e:	e7ff      	b.n	e790 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1518>
    e790:	f8dd 17bc 	ldr.w	r1, [sp, #1980]	; 0x7bc
    e794:	f240 2034 	movw	r0, #564	; 0x234
    e798:	f2c0 0002 	movt	r0, #2
    e79c:	6802      	ldr	r2, [r0, #0]
    e79e:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    e7a2:	f003 fe3d 	bl	12420 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e7a6:	e7ff      	b.n	e7a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1530>
    e7a8:	e7ff      	b.n	e7aa <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1532>
                self.v[x] ^= self.v[y];
    e7aa:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    e7ae:	280f      	cmp	r0, #15
    e7b0:	f202 826c 	bhi.w	10c8c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3a14>
    e7b4:	e7ff      	b.n	e7b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x153e>
    e7b6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e7ba:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e7be:	1842      	adds	r2, r0, r1
    e7c0:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e7c4:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    e7c8:	2b0f      	cmp	r3, #15
    e7ca:	92b2      	str	r2, [sp, #712]	; 0x2c8
    e7cc:	f202 8268 	bhi.w	10ca0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3a28>
    e7d0:	e7ff      	b.n	e7d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x155a>
    e7d2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e7d6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e7da:	1842      	adds	r2, r0, r1
    e7dc:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    e7e0:	f8dd c2c8 	ldr.w	ip, [sp, #712]	; 0x2c8
    e7e4:	ea83 030c 	eor.w	r3, r3, ip
    e7e8:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e7ec:	f002 b811 	b.w	10812 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    e7f0:	2005      	movs	r0, #5
    e7f2:	f8cd 07ec 	str.w	r0, [sp, #2028]	; 0x7ec
    e7f6:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
    e7fa:	f2c0 0001 	movt	r0, #1
    e7fe:	6801      	ldr	r1, [r0, #0]
    e800:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    e804:	f008 fa2e 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e808:	90b1      	str	r0, [sp, #708]	; 0x2c4
    e80a:	e01f      	b.n	e84c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x15d4>
    e80c:	2001      	movs	r0, #1
    e80e:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    e812:	e015      	b.n	e840 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x15c8>
    e814:	2000      	movs	r0, #0
    e816:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    e81a:	e011      	b.n	e840 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x15c8>
    e81c:	2000      	movs	r0, #0
    e81e:	f88d 0e1b 	strb.w	r0, [sp, #3611]	; 0xe1b
    e822:	f89d 1e1b 	ldrb.w	r1, [sp, #3611]	; 0xe1b
    e826:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e82a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e82e:	f002 fdc8 	bl	113c2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e832:	f8cd 0e1c 	str.w	r0, [sp, #3612]	; 0xe1c
    e836:	f8dd 0e1c 	ldr.w	r0, [sp, #3612]	; 0xe1c
    e83a:	f8cd 07f4 	str.w	r0, [sp, #2036]	; 0x7f4
    e83e:	e00a      	b.n	e856 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x15de>
    e840:	f89d 07f3 	ldrb.w	r0, [sp, #2035]	; 0x7f3
    e844:	07c0      	lsls	r0, r0, #31
    e846:	2800      	cmp	r0, #0
    e848:	d112      	bne.n	e870 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x15f8>
    e84a:	e055      	b.n	e8f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1680>
    e84c:	98b1      	ldr	r0, [sp, #708]	; 0x2c4
    e84e:	07c1      	lsls	r1, r0, #31
    e850:	2900      	cmp	r1, #0
    e852:	d1e3      	bne.n	e81c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x15a4>
    e854:	e7de      	b.n	e814 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x159c>
    e856:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    e85a:	f20d 71f4 	addw	r1, sp, #2036	; 0x7f4
    e85e:	f008 fa01 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e862:	90b0      	str	r0, [sp, #704]	; 0x2c0
    e864:	e7ff      	b.n	e866 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x15ee>
    e866:	98b0      	ldr	r0, [sp, #704]	; 0x2c0
    e868:	07c1      	lsls	r1, r0, #31
    e86a:	2900      	cmp	r1, #0
    e86c:	d1ce      	bne.n	e80c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1594>
    e86e:	e7d1      	b.n	e814 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x159c>
                trace!("[{:04x}] ADD Vx, Vy", self.pc);
    e870:	f240 10a4 	movw	r0, #420	; 0x1a4
    e874:	f2c0 0002 	movt	r0, #2
    e878:	6801      	ldr	r1, [r0, #0]
    e87a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e87e:	f100 0212 	add.w	r2, r0, #18
    e882:	f8cd 2818 	str.w	r2, [sp, #2072]	; 0x818
    e886:	f8dd 2818 	ldr.w	r2, [sp, #2072]	; 0x818
    e88a:	f8cd 2d40 	str.w	r2, [sp, #3392]	; 0xd40
    e88e:	f249 1383 	movw	r3, #37251	; 0x9183
    e892:	f2c0 0301 	movt	r3, #1
    e896:	4610      	mov	r0, r2
    e898:	91af      	str	r1, [sp, #700]	; 0x2bc
    e89a:	4619      	mov	r1, r3
    e89c:	f7fb ff9c 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e8a0:	90ae      	str	r0, [sp, #696]	; 0x2b8
    e8a2:	91ad      	str	r1, [sp, #692]	; 0x2b4
    e8a4:	e7ff      	b.n	e8a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x162e>
    e8a6:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
    e8a8:	f8cd 0810 	str.w	r0, [sp, #2064]	; 0x810
    e8ac:	99ad      	ldr	r1, [sp, #692]	; 0x2b4
    e8ae:	f8cd 1814 	str.w	r1, [sp, #2068]	; 0x814
    e8b2:	f64f 02e8 	movw	r2, #63720	; 0xf8e8
    e8b6:	f2c0 0201 	movt	r2, #1
    e8ba:	6812      	ldr	r2, [r2, #0]
    e8bc:	466b      	mov	r3, sp
    e8be:	f04f 0c01 	mov.w	ip, #1
    e8c2:	f8c3 c008 	str.w	ip, [r3, #8]
    e8c6:	605a      	str	r2, [r3, #4]
    e8c8:	f8c3 c000 	str.w	ip, [r3]
    e8cc:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    e8d0:	2202      	movs	r2, #2
    e8d2:	f50d 6301 	add.w	r3, sp, #2064	; 0x810
    e8d6:	99af      	ldr	r1, [sp, #700]	; 0x2bc
    e8d8:	f008 f889 	bl	169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e8dc:	e7ff      	b.n	e8de <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1666>
    e8de:	f8dd 17ec 	ldr.w	r1, [sp, #2028]	; 0x7ec
    e8e2:	f240 10c4 	movw	r0, #452	; 0x1c4
    e8e6:	f2c0 0002 	movt	r0, #2
    e8ea:	6802      	ldr	r2, [r0, #0]
    e8ec:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    e8f0:	f003 fd96 	bl	12420 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e8f4:	e7ff      	b.n	e8f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x167e>
    e8f6:	e7ff      	b.n	e8f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1680>
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
    e8f8:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e8fc:	280f      	cmp	r0, #15
    e8fe:	f202 81a7 	bhi.w	10c50 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x39d8>
    e902:	e7ff      	b.n	e904 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x168c>
    e904:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e908:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e90c:	1842      	adds	r2, r0, r1
    e90e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e912:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    e916:	2b0f      	cmp	r3, #15
    e918:	92ac      	str	r2, [sp, #688]	; 0x2b0
    e91a:	f202 81a3 	bhi.w	10c64 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x39ec>
    e91e:	e7ff      	b.n	e920 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x16a8>
    e920:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e924:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e928:	1842      	adds	r2, r0, r1
    e92a:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    e92e:	98ac      	ldr	r0, [sp, #688]	; 0x2b0
    e930:	f008 f907 	bl	16b42 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E>
    e934:	90ab      	str	r0, [sp, #684]	; 0x2ac
    e936:	91aa      	str	r1, [sp, #680]	; 0x2a8
    e938:	e7ff      	b.n	e93a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x16c2>
    e93a:	98ab      	ldr	r0, [sp, #684]	; 0x2ac
    e93c:	f88d 0d46 	strb.w	r0, [sp, #3398]	; 0xd46
    e940:	99aa      	ldr	r1, [sp, #680]	; 0x2a8
    e942:	f001 0201 	and.w	r2, r1, #1
    e946:	f88d 2d47 	strb.w	r2, [sp, #3399]	; 0xd47
                self.v[x] = v;
    e94a:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    e94e:	2a0f      	cmp	r2, #15
    e950:	f202 8192 	bhi.w	10c78 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3a00>
    e954:	e7ff      	b.n	e956 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x16de>
    e956:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e95a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e95e:	1842      	adds	r2, r0, r1
    e960:	9bab      	ldr	r3, [sp, #684]	; 0x2ac
    e962:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                self.v[0xf] = c as u8;
    e966:	9aaa      	ldr	r2, [sp, #680]	; 0x2a8
    e968:	f002 0c01 	and.w	ip, r2, #1
    e96c:	f880 c043 	strb.w	ip, [r0, #67]	; 0x43
        match (
    e970:	f001 bf4f 	b.w	10812 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    e974:	2005      	movs	r0, #5
    e976:	f8cd 081c 	str.w	r0, [sp, #2076]	; 0x81c
    e97a:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
    e97e:	f2c0 0001 	movt	r0, #1
    e982:	6801      	ldr	r1, [r0, #0]
    e984:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    e988:	f008 f96c 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e98c:	90a9      	str	r0, [sp, #676]	; 0x2a4
    e98e:	e01f      	b.n	e9d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1758>
    e990:	2001      	movs	r0, #1
    e992:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    e996:	e015      	b.n	e9c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x174c>
    e998:	2000      	movs	r0, #0
    e99a:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    e99e:	e011      	b.n	e9c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x174c>
    e9a0:	2000      	movs	r0, #0
    e9a2:	f88d 0e23 	strb.w	r0, [sp, #3619]	; 0xe23
    e9a6:	f89d 1e23 	ldrb.w	r1, [sp, #3619]	; 0xe23
    e9aa:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e9ae:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e9b2:	f002 fd06 	bl	113c2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e9b6:	f8cd 0e24 	str.w	r0, [sp, #3620]	; 0xe24
    e9ba:	f8dd 0e24 	ldr.w	r0, [sp, #3620]	; 0xe24
    e9be:	f8cd 0824 	str.w	r0, [sp, #2084]	; 0x824
    e9c2:	e00a      	b.n	e9da <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1762>
    e9c4:	f89d 0823 	ldrb.w	r0, [sp, #2083]	; 0x823
    e9c8:	07c0      	lsls	r0, r0, #31
    e9ca:	2800      	cmp	r0, #0
    e9cc:	d112      	bne.n	e9f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x177c>
    e9ce:	e055      	b.n	ea7c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1804>
    e9d0:	98a9      	ldr	r0, [sp, #676]	; 0x2a4
    e9d2:	07c1      	lsls	r1, r0, #31
    e9d4:	2900      	cmp	r1, #0
    e9d6:	d1e3      	bne.n	e9a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1728>
    e9d8:	e7de      	b.n	e998 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1720>
    e9da:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    e9de:	f60d 0124 	addw	r1, sp, #2084	; 0x824
    e9e2:	f008 f93f 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e9e6:	90a8      	str	r0, [sp, #672]	; 0x2a0
    e9e8:	e7ff      	b.n	e9ea <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1772>
    e9ea:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
    e9ec:	07c1      	lsls	r1, r0, #31
    e9ee:	2900      	cmp	r1, #0
    e9f0:	d1ce      	bne.n	e990 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1718>
    e9f2:	e7d1      	b.n	e998 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1720>
                trace!("[{:04x}] SUB Vx, Vy", self.pc);
    e9f4:	f240 1034 	movw	r0, #308	; 0x134
    e9f8:	f2c0 0002 	movt	r0, #2
    e9fc:	6801      	ldr	r1, [r0, #0]
    e9fe:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ea02:	f100 0212 	add.w	r2, r0, #18
    ea06:	f8cd 2848 	str.w	r2, [sp, #2120]	; 0x848
    ea0a:	f8dd 2848 	ldr.w	r2, [sp, #2120]	; 0x848
    ea0e:	f8cd 2d38 	str.w	r2, [sp, #3384]	; 0xd38
    ea12:	f249 1383 	movw	r3, #37251	; 0x9183
    ea16:	f2c0 0301 	movt	r3, #1
    ea1a:	4610      	mov	r0, r2
    ea1c:	91a7      	str	r1, [sp, #668]	; 0x29c
    ea1e:	4619      	mov	r1, r3
    ea20:	f7fb feda 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ea24:	90a6      	str	r0, [sp, #664]	; 0x298
    ea26:	91a5      	str	r1, [sp, #660]	; 0x294
    ea28:	e7ff      	b.n	ea2a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x17b2>
    ea2a:	98a6      	ldr	r0, [sp, #664]	; 0x298
    ea2c:	f8cd 0840 	str.w	r0, [sp, #2112]	; 0x840
    ea30:	99a5      	ldr	r1, [sp, #660]	; 0x294
    ea32:	f8cd 1844 	str.w	r1, [sp, #2116]	; 0x844
    ea36:	f64f 02e8 	movw	r2, #63720	; 0xf8e8
    ea3a:	f2c0 0201 	movt	r2, #1
    ea3e:	6812      	ldr	r2, [r2, #0]
    ea40:	466b      	mov	r3, sp
    ea42:	f04f 0c01 	mov.w	ip, #1
    ea46:	f8c3 c008 	str.w	ip, [r3, #8]
    ea4a:	605a      	str	r2, [r3, #4]
    ea4c:	f8c3 c000 	str.w	ip, [r3]
    ea50:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    ea54:	2202      	movs	r2, #2
    ea56:	f50d 6304 	add.w	r3, sp, #2112	; 0x840
    ea5a:	99a7      	ldr	r1, [sp, #668]	; 0x29c
    ea5c:	f007 ffc7 	bl	169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ea60:	e7ff      	b.n	ea62 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x17ea>
    ea62:	f8dd 181c 	ldr.w	r1, [sp, #2076]	; 0x81c
    ea66:	f240 1054 	movw	r0, #340	; 0x154
    ea6a:	f2c0 0002 	movt	r0, #2
    ea6e:	6802      	ldr	r2, [r0, #0]
    ea70:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    ea74:	f003 fcd4 	bl	12420 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ea78:	e7ff      	b.n	ea7a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1802>
    ea7a:	e7ff      	b.n	ea7c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1804>
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
    ea7c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ea80:	280f      	cmp	r0, #15
    ea82:	f202 80c7 	bhi.w	10c14 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x399c>
    ea86:	e7ff      	b.n	ea88 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1810>
    ea88:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ea8c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ea90:	1842      	adds	r2, r0, r1
    ea92:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ea96:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    ea9a:	2b0f      	cmp	r3, #15
    ea9c:	92a4      	str	r2, [sp, #656]	; 0x290
    ea9e:	f202 80c3 	bhi.w	10c28 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x39b0>
    eaa2:	e7ff      	b.n	eaa4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x182c>
    eaa4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    eaa8:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    eaac:	1842      	adds	r2, r0, r1
    eaae:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    eab2:	98a4      	ldr	r0, [sp, #656]	; 0x290
    eab4:	f008 f870 	bl	16b98 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E>
    eab8:	90a3      	str	r0, [sp, #652]	; 0x28c
    eaba:	91a2      	str	r1, [sp, #648]	; 0x288
    eabc:	e7ff      	b.n	eabe <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1846>
    eabe:	98a3      	ldr	r0, [sp, #652]	; 0x28c
    eac0:	f88d 0d3e 	strb.w	r0, [sp, #3390]	; 0xd3e
    eac4:	99a2      	ldr	r1, [sp, #648]	; 0x288
    eac6:	f001 0201 	and.w	r2, r1, #1
    eaca:	f88d 2d3f 	strb.w	r2, [sp, #3391]	; 0xd3f
                self.v[x] = v;
    eace:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    ead2:	2a0f      	cmp	r2, #15
    ead4:	f202 80b2 	bhi.w	10c3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x39c4>
    ead8:	e7ff      	b.n	eada <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1862>
    eada:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    eade:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    eae2:	1842      	adds	r2, r0, r1
    eae4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    eae6:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    eaea:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    eaec:	f8dd c288 	ldr.w	ip, [sp, #648]	; 0x288
    eaf0:	ea22 020c 	bic.w	r2, r2, ip
    eaf4:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    eaf8:	f001 be8b 	b.w	10812 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    eafc:	2005      	movs	r0, #5
    eafe:	f8cd 084c 	str.w	r0, [sp, #2124]	; 0x84c
    eb02:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
    eb06:	f2c0 0001 	movt	r0, #1
    eb0a:	6801      	ldr	r1, [r0, #0]
    eb0c:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    eb10:	f008 f8a8 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    eb14:	90a1      	str	r0, [sp, #644]	; 0x284
    eb16:	e01f      	b.n	eb58 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x18e0>
    eb18:	2001      	movs	r0, #1
    eb1a:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    eb1e:	e015      	b.n	eb4c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x18d4>
    eb20:	2000      	movs	r0, #0
    eb22:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    eb26:	e011      	b.n	eb4c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x18d4>
    eb28:	2000      	movs	r0, #0
    eb2a:	f88d 0e2b 	strb.w	r0, [sp, #3627]	; 0xe2b
    eb2e:	f89d 1e2b 	ldrb.w	r1, [sp, #3627]	; 0xe2b
    eb32:	f644 206c 	movw	r0, #19052	; 0x4a6c
    eb36:	f2c2 0000 	movt	r0, #8192	; 0x2000
    eb3a:	f002 fc42 	bl	113c2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    eb3e:	f8cd 0e2c 	str.w	r0, [sp, #3628]	; 0xe2c
    eb42:	f8dd 0e2c 	ldr.w	r0, [sp, #3628]	; 0xe2c
    eb46:	f8cd 0854 	str.w	r0, [sp, #2132]	; 0x854
    eb4a:	e00a      	b.n	eb62 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x18ea>
    eb4c:	f89d 0853 	ldrb.w	r0, [sp, #2131]	; 0x853
    eb50:	07c0      	lsls	r0, r0, #31
    eb52:	2800      	cmp	r0, #0
    eb54:	d112      	bne.n	eb7c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1904>
    eb56:	e055      	b.n	ec04 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x198c>
    eb58:	98a1      	ldr	r0, [sp, #644]	; 0x284
    eb5a:	07c1      	lsls	r1, r0, #31
    eb5c:	2900      	cmp	r1, #0
    eb5e:	d1e3      	bne.n	eb28 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x18b0>
    eb60:	e7de      	b.n	eb20 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x18a8>
    eb62:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    eb66:	f60d 0154 	addw	r1, sp, #2132	; 0x854
    eb6a:	f008 f87b 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    eb6e:	90a0      	str	r0, [sp, #640]	; 0x280
    eb70:	e7ff      	b.n	eb72 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x18fa>
    eb72:	98a0      	ldr	r0, [sp, #640]	; 0x280
    eb74:	07c1      	lsls	r1, r0, #31
    eb76:	2900      	cmp	r1, #0
    eb78:	d1ce      	bne.n	eb18 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x18a0>
    eb7a:	e7d1      	b.n	eb20 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x18a8>
                trace!("[{:04x}] SHR Vx, Vy", self.pc);
    eb7c:	f240 00c4 	movw	r0, #196	; 0xc4
    eb80:	f2c0 0002 	movt	r0, #2
    eb84:	6801      	ldr	r1, [r0, #0]
    eb86:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    eb8a:	f100 0212 	add.w	r2, r0, #18
    eb8e:	f8cd 2878 	str.w	r2, [sp, #2168]	; 0x878
    eb92:	f8dd 2878 	ldr.w	r2, [sp, #2168]	; 0x878
    eb96:	f8cd 2d34 	str.w	r2, [sp, #3380]	; 0xd34
    eb9a:	f249 1383 	movw	r3, #37251	; 0x9183
    eb9e:	f2c0 0301 	movt	r3, #1
    eba2:	4610      	mov	r0, r2
    eba4:	919f      	str	r1, [sp, #636]	; 0x27c
    eba6:	4619      	mov	r1, r3
    eba8:	f7fb fe16 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ebac:	909e      	str	r0, [sp, #632]	; 0x278
    ebae:	919d      	str	r1, [sp, #628]	; 0x274
    ebb0:	e7ff      	b.n	ebb2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x193a>
    ebb2:	989e      	ldr	r0, [sp, #632]	; 0x278
    ebb4:	f8cd 0870 	str.w	r0, [sp, #2160]	; 0x870
    ebb8:	999d      	ldr	r1, [sp, #628]	; 0x274
    ebba:	f8cd 1874 	str.w	r1, [sp, #2164]	; 0x874
    ebbe:	f64f 02e8 	movw	r2, #63720	; 0xf8e8
    ebc2:	f2c0 0201 	movt	r2, #1
    ebc6:	6812      	ldr	r2, [r2, #0]
    ebc8:	466b      	mov	r3, sp
    ebca:	f04f 0c01 	mov.w	ip, #1
    ebce:	f8c3 c008 	str.w	ip, [r3, #8]
    ebd2:	605a      	str	r2, [r3, #4]
    ebd4:	f8c3 c000 	str.w	ip, [r3]
    ebd8:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    ebdc:	2202      	movs	r2, #2
    ebde:	f50d 6307 	add.w	r3, sp, #2160	; 0x870
    ebe2:	999f      	ldr	r1, [sp, #636]	; 0x27c
    ebe4:	f007 ff03 	bl	169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ebe8:	e7ff      	b.n	ebea <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1972>
    ebea:	f8dd 184c 	ldr.w	r1, [sp, #2124]	; 0x84c
    ebee:	f240 00e4 	movw	r0, #228	; 0xe4
    ebf2:	f2c0 0002 	movt	r0, #2
    ebf6:	6802      	ldr	r2, [r0, #0]
    ebf8:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    ebfc:	f003 fc10 	bl	12420 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ec00:	e7ff      	b.n	ec02 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x198a>
    ec02:	e7ff      	b.n	ec04 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x198c>
                self.v[0xf] = self.v[x] & 1;
    ec04:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ec08:	280f      	cmp	r0, #15
    ec0a:	f201 87e5 	bhi.w	10bd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3960>
    ec0e:	e7ff      	b.n	ec10 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1998>
    ec10:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ec14:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ec18:	1842      	adds	r2, r0, r1
    ec1a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ec1e:	f002 0201 	and.w	r2, r2, #1
    ec22:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shr(1);
    ec26:	290f      	cmp	r1, #15
    ec28:	f201 87e0 	bhi.w	10bec <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3974>
    ec2c:	e7ff      	b.n	ec2e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x19b6>
    ec2e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ec32:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ec36:	1842      	adds	r2, r0, r1
    ec38:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    ec3c:	2101      	movs	r1, #1
    ec3e:	f007 ff5c 	bl	16afa <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17h0b64f2ebc21519c0E>
    ec42:	909c      	str	r0, [sp, #624]	; 0x270
    ec44:	e7ff      	b.n	ec46 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x19ce>
    ec46:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ec4a:	280f      	cmp	r0, #15
    ec4c:	f201 87d8 	bhi.w	10c00 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3988>
    ec50:	e7ff      	b.n	ec52 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x19da>
    ec52:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ec56:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ec5a:	1842      	adds	r2, r0, r1
    ec5c:	9b9c      	ldr	r3, [sp, #624]	; 0x270
    ec5e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    ec62:	f001 bdd6 	b.w	10812 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    ec66:	2005      	movs	r0, #5
    ec68:	f8cd 087c 	str.w	r0, [sp, #2172]	; 0x87c
    ec6c:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
    ec70:	f2c0 0001 	movt	r0, #1
    ec74:	6801      	ldr	r1, [r0, #0]
    ec76:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    ec7a:	f007 fff3 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ec7e:	909b      	str	r0, [sp, #620]	; 0x26c
    ec80:	e01f      	b.n	ecc2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1a4a>
    ec82:	2001      	movs	r0, #1
    ec84:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    ec88:	e015      	b.n	ecb6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1a3e>
    ec8a:	2000      	movs	r0, #0
    ec8c:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    ec90:	e011      	b.n	ecb6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1a3e>
    ec92:	2000      	movs	r0, #0
    ec94:	f88d 0e33 	strb.w	r0, [sp, #3635]	; 0xe33
    ec98:	f89d 1e33 	ldrb.w	r1, [sp, #3635]	; 0xe33
    ec9c:	f644 206c 	movw	r0, #19052	; 0x4a6c
    eca0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    eca4:	f002 fb8d 	bl	113c2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    eca8:	f8cd 0e34 	str.w	r0, [sp, #3636]	; 0xe34
    ecac:	f8dd 0e34 	ldr.w	r0, [sp, #3636]	; 0xe34
    ecb0:	f8cd 0884 	str.w	r0, [sp, #2180]	; 0x884
    ecb4:	e00a      	b.n	eccc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1a54>
    ecb6:	f89d 0883 	ldrb.w	r0, [sp, #2179]	; 0x883
    ecba:	07c0      	lsls	r0, r0, #31
    ecbc:	2800      	cmp	r0, #0
    ecbe:	d112      	bne.n	ece6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1a6e>
    ecc0:	e055      	b.n	ed6e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1af6>
    ecc2:	989b      	ldr	r0, [sp, #620]	; 0x26c
    ecc4:	07c1      	lsls	r1, r0, #31
    ecc6:	2900      	cmp	r1, #0
    ecc8:	d1e3      	bne.n	ec92 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1a1a>
    ecca:	e7de      	b.n	ec8a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1a12>
    eccc:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    ecd0:	f60d 0184 	addw	r1, sp, #2180	; 0x884
    ecd4:	f007 ffc6 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ecd8:	909a      	str	r0, [sp, #616]	; 0x268
    ecda:	e7ff      	b.n	ecdc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1a64>
    ecdc:	989a      	ldr	r0, [sp, #616]	; 0x268
    ecde:	07c1      	lsls	r1, r0, #31
    ece0:	2900      	cmp	r1, #0
    ece2:	d1ce      	bne.n	ec82 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1a0a>
    ece4:	e7d1      	b.n	ec8a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1a12>
                trace!("[{:04x}] SUBN Vx, Vy", self.pc);
    ece6:	f240 0054 	movw	r0, #84	; 0x54
    ecea:	f2c0 0002 	movt	r0, #2
    ecee:	6801      	ldr	r1, [r0, #0]
    ecf0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ecf4:	f100 0212 	add.w	r2, r0, #18
    ecf8:	f8cd 28a8 	str.w	r2, [sp, #2216]	; 0x8a8
    ecfc:	f8dd 28a8 	ldr.w	r2, [sp, #2216]	; 0x8a8
    ed00:	f8cd 2d2c 	str.w	r2, [sp, #3372]	; 0xd2c
    ed04:	f249 1383 	movw	r3, #37251	; 0x9183
    ed08:	f2c0 0301 	movt	r3, #1
    ed0c:	4610      	mov	r0, r2
    ed0e:	9199      	str	r1, [sp, #612]	; 0x264
    ed10:	4619      	mov	r1, r3
    ed12:	f7fb fd61 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ed16:	9098      	str	r0, [sp, #608]	; 0x260
    ed18:	9197      	str	r1, [sp, #604]	; 0x25c
    ed1a:	e7ff      	b.n	ed1c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1aa4>
    ed1c:	9898      	ldr	r0, [sp, #608]	; 0x260
    ed1e:	f8cd 08a0 	str.w	r0, [sp, #2208]	; 0x8a0
    ed22:	9997      	ldr	r1, [sp, #604]	; 0x25c
    ed24:	f8cd 18a4 	str.w	r1, [sp, #2212]	; 0x8a4
    ed28:	f64f 02e8 	movw	r2, #63720	; 0xf8e8
    ed2c:	f2c0 0201 	movt	r2, #1
    ed30:	6812      	ldr	r2, [r2, #0]
    ed32:	466b      	mov	r3, sp
    ed34:	f04f 0c01 	mov.w	ip, #1
    ed38:	f8c3 c008 	str.w	ip, [r3, #8]
    ed3c:	605a      	str	r2, [r3, #4]
    ed3e:	f8c3 c000 	str.w	ip, [r3]
    ed42:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    ed46:	2202      	movs	r2, #2
    ed48:	f50d 630a 	add.w	r3, sp, #2208	; 0x8a0
    ed4c:	9999      	ldr	r1, [sp, #612]	; 0x264
    ed4e:	f007 fe4e 	bl	169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ed52:	e7ff      	b.n	ed54 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1adc>
    ed54:	f8dd 187c 	ldr.w	r1, [sp, #2172]	; 0x87c
    ed58:	f240 0074 	movw	r0, #116	; 0x74
    ed5c:	f2c0 0002 	movt	r0, #2
    ed60:	6802      	ldr	r2, [r0, #0]
    ed62:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    ed66:	f003 fb5b 	bl	12420 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ed6a:	e7ff      	b.n	ed6c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1af4>
    ed6c:	e7ff      	b.n	ed6e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1af6>
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
    ed6e:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    ed72:	280f      	cmp	r0, #15
    ed74:	f201 8712 	bhi.w	10b9c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3924>
    ed78:	e7ff      	b.n	ed7a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1b02>
    ed7a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ed7e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    ed82:	1842      	adds	r2, r0, r1
    ed84:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ed88:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    ed8c:	2b0f      	cmp	r3, #15
    ed8e:	9296      	str	r2, [sp, #600]	; 0x258
    ed90:	f201 870e 	bhi.w	10bb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3938>
    ed94:	e7ff      	b.n	ed96 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1b1e>
    ed96:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ed9a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ed9e:	1842      	adds	r2, r0, r1
    eda0:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    eda4:	9896      	ldr	r0, [sp, #600]	; 0x258
    eda6:	f007 fef7 	bl	16b98 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E>
    edaa:	9095      	str	r0, [sp, #596]	; 0x254
    edac:	9194      	str	r1, [sp, #592]	; 0x250
    edae:	e7ff      	b.n	edb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1b38>
    edb0:	9895      	ldr	r0, [sp, #596]	; 0x254
    edb2:	f88d 0d32 	strb.w	r0, [sp, #3378]	; 0xd32
    edb6:	9994      	ldr	r1, [sp, #592]	; 0x250
    edb8:	f001 0201 	and.w	r2, r1, #1
    edbc:	f88d 2d33 	strb.w	r2, [sp, #3379]	; 0xd33
                self.v[x] = v;
    edc0:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    edc4:	2a0f      	cmp	r2, #15
    edc6:	f201 86fd 	bhi.w	10bc4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x394c>
    edca:	e7ff      	b.n	edcc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1b54>
    edcc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    edd0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    edd4:	1842      	adds	r2, r0, r1
    edd6:	9b95      	ldr	r3, [sp, #596]	; 0x254
    edd8:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    eddc:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    edde:	f8dd c250 	ldr.w	ip, [sp, #592]	; 0x250
    ede2:	ea22 020c 	bic.w	r2, r2, ip
    ede6:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    edea:	f001 bd12 	b.w	10812 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    edee:	2005      	movs	r0, #5
    edf0:	f8cd 08ac 	str.w	r0, [sp, #2220]	; 0x8ac
    edf4:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
    edf8:	f2c0 0001 	movt	r0, #1
    edfc:	6801      	ldr	r1, [r0, #0]
    edfe:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    ee02:	f007 ff2f 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ee06:	9093      	str	r0, [sp, #588]	; 0x24c
    ee08:	e01f      	b.n	ee4a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1bd2>
    ee0a:	2001      	movs	r0, #1
    ee0c:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    ee10:	e015      	b.n	ee3e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1bc6>
    ee12:	2000      	movs	r0, #0
    ee14:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    ee18:	e011      	b.n	ee3e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1bc6>
    ee1a:	2000      	movs	r0, #0
    ee1c:	f88d 0e3b 	strb.w	r0, [sp, #3643]	; 0xe3b
    ee20:	f89d 1e3b 	ldrb.w	r1, [sp, #3643]	; 0xe3b
    ee24:	f644 206c 	movw	r0, #19052	; 0x4a6c
    ee28:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ee2c:	f002 fac9 	bl	113c2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    ee30:	f8cd 0e3c 	str.w	r0, [sp, #3644]	; 0xe3c
    ee34:	f8dd 0e3c 	ldr.w	r0, [sp, #3644]	; 0xe3c
    ee38:	f8cd 08b4 	str.w	r0, [sp, #2228]	; 0x8b4
    ee3c:	e00a      	b.n	ee54 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1bdc>
    ee3e:	f89d 08b3 	ldrb.w	r0, [sp, #2227]	; 0x8b3
    ee42:	07c0      	lsls	r0, r0, #31
    ee44:	2800      	cmp	r0, #0
    ee46:	d112      	bne.n	ee6e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1bf6>
    ee48:	e055      	b.n	eef6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1c7e>
    ee4a:	9893      	ldr	r0, [sp, #588]	; 0x24c
    ee4c:	07c1      	lsls	r1, r0, #31
    ee4e:	2900      	cmp	r1, #0
    ee50:	d1e3      	bne.n	ee1a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1ba2>
    ee52:	e7de      	b.n	ee12 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1b9a>
    ee54:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    ee58:	f60d 01b4 	addw	r1, sp, #2228	; 0x8b4
    ee5c:	f007 ff02 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ee60:	9092      	str	r0, [sp, #584]	; 0x248
    ee62:	e7ff      	b.n	ee64 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1bec>
    ee64:	9892      	ldr	r0, [sp, #584]	; 0x248
    ee66:	07c1      	lsls	r1, r0, #31
    ee68:	2900      	cmp	r1, #0
    ee6a:	d1ce      	bne.n	ee0a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1b92>
    ee6c:	e7d1      	b.n	ee12 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1b9a>
                trace!("[{:04x}] SHL Vx, Vy", self.pc);
    ee6e:	f64f 70e0 	movw	r0, #65504	; 0xffe0
    ee72:	f2c0 0001 	movt	r0, #1
    ee76:	6801      	ldr	r1, [r0, #0]
    ee78:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ee7c:	f100 0212 	add.w	r2, r0, #18
    ee80:	f8cd 28d8 	str.w	r2, [sp, #2264]	; 0x8d8
    ee84:	f8dd 28d8 	ldr.w	r2, [sp, #2264]	; 0x8d8
    ee88:	f8cd 2d28 	str.w	r2, [sp, #3368]	; 0xd28
    ee8c:	f249 1383 	movw	r3, #37251	; 0x9183
    ee90:	f2c0 0301 	movt	r3, #1
    ee94:	4610      	mov	r0, r2
    ee96:	9191      	str	r1, [sp, #580]	; 0x244
    ee98:	4619      	mov	r1, r3
    ee9a:	f7fb fc9d 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ee9e:	9090      	str	r0, [sp, #576]	; 0x240
    eea0:	918f      	str	r1, [sp, #572]	; 0x23c
    eea2:	e7ff      	b.n	eea4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1c2c>
    eea4:	9890      	ldr	r0, [sp, #576]	; 0x240
    eea6:	f8cd 08d0 	str.w	r0, [sp, #2256]	; 0x8d0
    eeaa:	998f      	ldr	r1, [sp, #572]	; 0x23c
    eeac:	f8cd 18d4 	str.w	r1, [sp, #2260]	; 0x8d4
    eeb0:	f64f 02e8 	movw	r2, #63720	; 0xf8e8
    eeb4:	f2c0 0201 	movt	r2, #1
    eeb8:	6812      	ldr	r2, [r2, #0]
    eeba:	466b      	mov	r3, sp
    eebc:	f04f 0c01 	mov.w	ip, #1
    eec0:	f8c3 c008 	str.w	ip, [r3, #8]
    eec4:	605a      	str	r2, [r3, #4]
    eec6:	f8c3 c000 	str.w	ip, [r3]
    eeca:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    eece:	2202      	movs	r2, #2
    eed0:	f50d 630d 	add.w	r3, sp, #2256	; 0x8d0
    eed4:	9991      	ldr	r1, [sp, #580]	; 0x244
    eed6:	f007 fd8a 	bl	169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    eeda:	e7ff      	b.n	eedc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1c64>
    eedc:	f8dd 18ac 	ldr.w	r1, [sp, #2220]	; 0x8ac
    eee0:	f240 0000 	movw	r0, #0
    eee4:	f2c0 0002 	movt	r0, #2
    eee8:	6802      	ldr	r2, [r0, #0]
    eeea:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    eeee:	f003 fa97 	bl	12420 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    eef2:	e7ff      	b.n	eef4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1c7c>
    eef4:	e7ff      	b.n	eef6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1c7e>
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
    eef6:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    eefa:	280f      	cmp	r0, #15
    eefc:	f201 8630 	bhi.w	10b60 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x38e8>
    ef00:	e7ff      	b.n	ef02 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1c8a>
    ef02:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ef06:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ef0a:	1842      	adds	r2, r0, r1
    ef0c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ef10:	09d2      	lsrs	r2, r2, #7
    ef12:	928e      	str	r2, [sp, #568]	; 0x238
    ef14:	e7ff      	b.n	ef16 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1c9e>
    ef16:	988e      	ldr	r0, [sp, #568]	; 0x238
    ef18:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    ef1c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shl(1);
    ef20:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    ef24:	2a0f      	cmp	r2, #15
    ef26:	f201 8625 	bhi.w	10b74 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x38fc>
    ef2a:	e7ff      	b.n	ef2c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1cb4>
    ef2c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ef30:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ef34:	1842      	adds	r2, r0, r1
    ef36:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    ef3a:	2101      	movs	r1, #1
    ef3c:	f007 fdcc 	bl	16ad8 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17hd4e34d1323470418E>
    ef40:	908d      	str	r0, [sp, #564]	; 0x234
    ef42:	e7ff      	b.n	ef44 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1ccc>
    ef44:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ef48:	280f      	cmp	r0, #15
    ef4a:	f201 861d 	bhi.w	10b88 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3910>
    ef4e:	e7ff      	b.n	ef50 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1cd8>
    ef50:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ef54:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ef58:	1842      	adds	r2, r0, r1
    ef5a:	9b8d      	ldr	r3, [sp, #564]	; 0x234
    ef5c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    ef60:	f001 bc57 	b.w	10812 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    ef64:	2005      	movs	r0, #5
    ef66:	f8cd 08dc 	str.w	r0, [sp, #2268]	; 0x8dc
    ef6a:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
    ef6e:	f2c0 0001 	movt	r0, #1
    ef72:	6801      	ldr	r1, [r0, #0]
    ef74:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    ef78:	f007 fe74 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ef7c:	908c      	str	r0, [sp, #560]	; 0x230
    ef7e:	e01f      	b.n	efc0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1d48>
    ef80:	2001      	movs	r0, #1
    ef82:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    ef86:	e015      	b.n	efb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1d3c>
    ef88:	2000      	movs	r0, #0
    ef8a:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    ef8e:	e011      	b.n	efb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1d3c>
    ef90:	2000      	movs	r0, #0
    ef92:	f88d 0e43 	strb.w	r0, [sp, #3651]	; 0xe43
    ef96:	f89d 1e43 	ldrb.w	r1, [sp, #3651]	; 0xe43
    ef9a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    ef9e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    efa2:	f002 fa0e 	bl	113c2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    efa6:	f8cd 0e44 	str.w	r0, [sp, #3652]	; 0xe44
    efaa:	f8dd 0e44 	ldr.w	r0, [sp, #3652]	; 0xe44
    efae:	f8cd 08e4 	str.w	r0, [sp, #2276]	; 0x8e4
    efb2:	e00a      	b.n	efca <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1d52>
    efb4:	f89d 08e3 	ldrb.w	r0, [sp, #2275]	; 0x8e3
    efb8:	07c0      	lsls	r0, r0, #31
    efba:	2800      	cmp	r0, #0
    efbc:	d112      	bne.n	efe4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1d6c>
    efbe:	e055      	b.n	f06c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1df4>
    efc0:	988c      	ldr	r0, [sp, #560]	; 0x230
    efc2:	07c1      	lsls	r1, r0, #31
    efc4:	2900      	cmp	r1, #0
    efc6:	d1e3      	bne.n	ef90 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1d18>
    efc8:	e7de      	b.n	ef88 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1d10>
    efca:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    efce:	f60d 01e4 	addw	r1, sp, #2276	; 0x8e4
    efd2:	f007 fe47 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    efd6:	908b      	str	r0, [sp, #556]	; 0x22c
    efd8:	e7ff      	b.n	efda <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1d62>
    efda:	988b      	ldr	r0, [sp, #556]	; 0x22c
    efdc:	07c1      	lsls	r1, r0, #31
    efde:	2900      	cmp	r1, #0
    efe0:	d1ce      	bne.n	ef80 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1d08>
    efe2:	e7d1      	b.n	ef88 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1d10>
                trace!("[{:04x}] SNE Vx, Vy", self.pc);
    efe4:	f64f 7080 	movw	r0, #65408	; 0xff80
    efe8:	f2c0 0001 	movt	r0, #1
    efec:	6801      	ldr	r1, [r0, #0]
    efee:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    eff2:	f100 0212 	add.w	r2, r0, #18
    eff6:	f8cd 2908 	str.w	r2, [sp, #2312]	; 0x908
    effa:	f8dd 2908 	ldr.w	r2, [sp, #2312]	; 0x908
    effe:	f8cd 2d24 	str.w	r2, [sp, #3364]	; 0xd24
    f002:	f249 1383 	movw	r3, #37251	; 0x9183
    f006:	f2c0 0301 	movt	r3, #1
    f00a:	4610      	mov	r0, r2
    f00c:	918a      	str	r1, [sp, #552]	; 0x228
    f00e:	4619      	mov	r1, r3
    f010:	f7fb fbe2 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f014:	9089      	str	r0, [sp, #548]	; 0x224
    f016:	9188      	str	r1, [sp, #544]	; 0x220
    f018:	e7ff      	b.n	f01a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1da2>
    f01a:	9889      	ldr	r0, [sp, #548]	; 0x224
    f01c:	f8cd 0900 	str.w	r0, [sp, #2304]	; 0x900
    f020:	9988      	ldr	r1, [sp, #544]	; 0x220
    f022:	f8cd 1904 	str.w	r1, [sp, #2308]	; 0x904
    f026:	f64f 02e8 	movw	r2, #63720	; 0xf8e8
    f02a:	f2c0 0201 	movt	r2, #1
    f02e:	6812      	ldr	r2, [r2, #0]
    f030:	466b      	mov	r3, sp
    f032:	f04f 0c01 	mov.w	ip, #1
    f036:	f8c3 c008 	str.w	ip, [r3, #8]
    f03a:	605a      	str	r2, [r3, #4]
    f03c:	f8c3 c000 	str.w	ip, [r3]
    f040:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    f044:	2202      	movs	r2, #2
    f046:	f50d 6310 	add.w	r3, sp, #2304	; 0x900
    f04a:	998a      	ldr	r1, [sp, #552]	; 0x228
    f04c:	f007 fccf 	bl	169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f050:	e7ff      	b.n	f052 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1dda>
    f052:	f8dd 18dc 	ldr.w	r1, [sp, #2268]	; 0x8dc
    f056:	f64f 70a0 	movw	r0, #65440	; 0xffa0
    f05a:	f2c0 0001 	movt	r0, #1
    f05e:	6802      	ldr	r2, [r0, #0]
    f060:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    f064:	f003 f9dc 	bl	12420 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f068:	e7ff      	b.n	f06a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1df2>
    f06a:	e7ff      	b.n	f06c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1df4>
                if self.v[x] != self.v[y] {
    f06c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    f070:	280f      	cmp	r0, #15
    f072:	f201 8561 	bhi.w	10b38 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x38c0>
    f076:	e7ff      	b.n	f078 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1e00>
    f078:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f07c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f080:	1842      	adds	r2, r0, r1
    f082:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    f086:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    f08a:	2b0f      	cmp	r3, #15
    f08c:	9287      	str	r2, [sp, #540]	; 0x21c
    f08e:	f201 855d 	bhi.w	10b4c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x38d4>
    f092:	e7ff      	b.n	f094 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1e1c>
    f094:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f098:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    f09c:	1842      	adds	r2, r0, r1
    f09e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    f0a2:	9b87      	ldr	r3, [sp, #540]	; 0x21c
    f0a4:	fa5f fc83 	uxtb.w	ip, r3
    f0a8:	4594      	cmp	ip, r2
    f0aa:	d006      	beq.n	f0ba <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1e42>
    f0ac:	e7ff      	b.n	f0ae <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1e36>
                    self.next();
    f0ae:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f0b2:	f001 fee0 	bl	10e76 <_ZN8libchip814Chip8$LT$T$GT$4next17h59db21f4d7eca91dE>
    f0b6:	e7ff      	b.n	f0b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1e40>
                if self.v[x] != self.v[y] {
    f0b8:	e7ff      	b.n	f0ba <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1e42>
        match (
    f0ba:	f001 bbaa 	b.w	10812 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    f0be:	2005      	movs	r0, #5
    f0c0:	f8cd 090c 	str.w	r0, [sp, #2316]	; 0x90c
    f0c4:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
    f0c8:	f2c0 0001 	movt	r0, #1
    f0cc:	6801      	ldr	r1, [r0, #0]
    f0ce:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    f0d2:	f007 fdc7 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f0d6:	9086      	str	r0, [sp, #536]	; 0x218
    f0d8:	e01f      	b.n	f11a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1ea2>
    f0da:	2001      	movs	r0, #1
    f0dc:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    f0e0:	e015      	b.n	f10e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1e96>
    f0e2:	2000      	movs	r0, #0
    f0e4:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    f0e8:	e011      	b.n	f10e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1e96>
    f0ea:	2000      	movs	r0, #0
    f0ec:	f88d 0e4b 	strb.w	r0, [sp, #3659]	; 0xe4b
    f0f0:	f89d 1e4b 	ldrb.w	r1, [sp, #3659]	; 0xe4b
    f0f4:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f0f8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f0fc:	f002 f961 	bl	113c2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f100:	f8cd 0e4c 	str.w	r0, [sp, #3660]	; 0xe4c
    f104:	f8dd 0e4c 	ldr.w	r0, [sp, #3660]	; 0xe4c
    f108:	f8cd 0914 	str.w	r0, [sp, #2324]	; 0x914
    f10c:	e00a      	b.n	f124 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1eac>
    f10e:	f89d 0913 	ldrb.w	r0, [sp, #2323]	; 0x913
    f112:	07c0      	lsls	r0, r0, #31
    f114:	2800      	cmp	r0, #0
    f116:	d112      	bne.n	f13e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1ec6>
    f118:	e055      	b.n	f1c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1f4e>
    f11a:	9886      	ldr	r0, [sp, #536]	; 0x218
    f11c:	07c1      	lsls	r1, r0, #31
    f11e:	2900      	cmp	r1, #0
    f120:	d1e3      	bne.n	f0ea <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1e72>
    f122:	e7de      	b.n	f0e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1e6a>
    f124:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    f128:	f60d 1114 	addw	r1, sp, #2324	; 0x914
    f12c:	f007 fd9a 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f130:	9085      	str	r0, [sp, #532]	; 0x214
    f132:	e7ff      	b.n	f134 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1ebc>
    f134:	9885      	ldr	r0, [sp, #532]	; 0x214
    f136:	07c1      	lsls	r1, r0, #31
    f138:	2900      	cmp	r1, #0
    f13a:	d1ce      	bne.n	f0da <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1e62>
    f13c:	e7d1      	b.n	f0e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1e6a>
                trace!("[{:04x}] LD I, nnn", self.pc);
    f13e:	f64f 7040 	movw	r0, #65344	; 0xff40
    f142:	f2c0 0001 	movt	r0, #1
    f146:	6801      	ldr	r1, [r0, #0]
    f148:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f14c:	f100 0212 	add.w	r2, r0, #18
    f150:	f8cd 2938 	str.w	r2, [sp, #2360]	; 0x938
    f154:	f8dd 2938 	ldr.w	r2, [sp, #2360]	; 0x938
    f158:	f8cd 2d20 	str.w	r2, [sp, #3360]	; 0xd20
    f15c:	f249 1383 	movw	r3, #37251	; 0x9183
    f160:	f2c0 0301 	movt	r3, #1
    f164:	4610      	mov	r0, r2
    f166:	9184      	str	r1, [sp, #528]	; 0x210
    f168:	4619      	mov	r1, r3
    f16a:	f7fb fb35 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f16e:	9083      	str	r0, [sp, #524]	; 0x20c
    f170:	9182      	str	r1, [sp, #520]	; 0x208
    f172:	e7ff      	b.n	f174 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1efc>
    f174:	9883      	ldr	r0, [sp, #524]	; 0x20c
    f176:	f8cd 0930 	str.w	r0, [sp, #2352]	; 0x930
    f17a:	9982      	ldr	r1, [sp, #520]	; 0x208
    f17c:	f8cd 1934 	str.w	r1, [sp, #2356]	; 0x934
    f180:	f64f 02e8 	movw	r2, #63720	; 0xf8e8
    f184:	f2c0 0201 	movt	r2, #1
    f188:	6812      	ldr	r2, [r2, #0]
    f18a:	466b      	mov	r3, sp
    f18c:	f04f 0c01 	mov.w	ip, #1
    f190:	f8c3 c008 	str.w	ip, [r3, #8]
    f194:	605a      	str	r2, [r3, #4]
    f196:	f8c3 c000 	str.w	ip, [r3]
    f19a:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    f19e:	2202      	movs	r2, #2
    f1a0:	f50d 6313 	add.w	r3, sp, #2352	; 0x930
    f1a4:	9984      	ldr	r1, [sp, #528]	; 0x210
    f1a6:	f007 fc22 	bl	169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f1aa:	e7ff      	b.n	f1ac <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1f34>
    f1ac:	f8dd 190c 	ldr.w	r1, [sp, #2316]	; 0x90c
    f1b0:	f64f 7060 	movw	r0, #65376	; 0xff60
    f1b4:	f2c0 0001 	movt	r0, #1
    f1b8:	6802      	ldr	r2, [r0, #0]
    f1ba:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    f1be:	f003 f92f 	bl	12420 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f1c2:	e7ff      	b.n	f1c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1f4c>
    f1c4:	e7ff      	b.n	f1c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1f4e>
                self.i = nnn;
    f1c6:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    f1ca:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f1ce:	8208      	strh	r0, [r1, #16]
        match (
    f1d0:	f001 bb1f 	b.w	10812 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    f1d4:	2005      	movs	r0, #5
    f1d6:	f8cd 093c 	str.w	r0, [sp, #2364]	; 0x93c
    f1da:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
    f1de:	f2c0 0001 	movt	r0, #1
    f1e2:	6801      	ldr	r1, [r0, #0]
    f1e4:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    f1e8:	f007 fd3c 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f1ec:	9081      	str	r0, [sp, #516]	; 0x204
    f1ee:	e01f      	b.n	f230 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1fb8>
    f1f0:	2001      	movs	r0, #1
    f1f2:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    f1f6:	e015      	b.n	f224 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1fac>
    f1f8:	2000      	movs	r0, #0
    f1fa:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    f1fe:	e011      	b.n	f224 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1fac>
    f200:	2000      	movs	r0, #0
    f202:	f88d 0e53 	strb.w	r0, [sp, #3667]	; 0xe53
    f206:	f89d 1e53 	ldrb.w	r1, [sp, #3667]	; 0xe53
    f20a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f20e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f212:	f002 f8d6 	bl	113c2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f216:	f8cd 0e54 	str.w	r0, [sp, #3668]	; 0xe54
    f21a:	f8dd 0e54 	ldr.w	r0, [sp, #3668]	; 0xe54
    f21e:	f8cd 0944 	str.w	r0, [sp, #2372]	; 0x944
    f222:	e00a      	b.n	f23a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1fc2>
    f224:	f89d 0943 	ldrb.w	r0, [sp, #2371]	; 0x943
    f228:	07c0      	lsls	r0, r0, #31
    f22a:	2800      	cmp	r0, #0
    f22c:	d112      	bne.n	f254 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1fdc>
    f22e:	e055      	b.n	f2dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2064>
    f230:	9881      	ldr	r0, [sp, #516]	; 0x204
    f232:	07c1      	lsls	r1, r0, #31
    f234:	2900      	cmp	r1, #0
    f236:	d1e3      	bne.n	f200 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1f88>
    f238:	e7de      	b.n	f1f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1f80>
    f23a:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    f23e:	f60d 1144 	addw	r1, sp, #2372	; 0x944
    f242:	f007 fd0f 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f246:	9080      	str	r0, [sp, #512]	; 0x200
    f248:	e7ff      	b.n	f24a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1fd2>
    f24a:	9880      	ldr	r0, [sp, #512]	; 0x200
    f24c:	07c1      	lsls	r1, r0, #31
    f24e:	2900      	cmp	r1, #0
    f250:	d1ce      	bne.n	f1f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1f78>
    f252:	e7d1      	b.n	f1f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x1f80>
                trace!("[{:04x}] JP V0, nnn", self.pc);
    f254:	f64f 7000 	movw	r0, #65280	; 0xff00
    f258:	f2c0 0001 	movt	r0, #1
    f25c:	6801      	ldr	r1, [r0, #0]
    f25e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f262:	f100 0212 	add.w	r2, r0, #18
    f266:	f8cd 2968 	str.w	r2, [sp, #2408]	; 0x968
    f26a:	f8dd 2968 	ldr.w	r2, [sp, #2408]	; 0x968
    f26e:	f8cd 2d1c 	str.w	r2, [sp, #3356]	; 0xd1c
    f272:	f249 1383 	movw	r3, #37251	; 0x9183
    f276:	f2c0 0301 	movt	r3, #1
    f27a:	4610      	mov	r0, r2
    f27c:	917f      	str	r1, [sp, #508]	; 0x1fc
    f27e:	4619      	mov	r1, r3
    f280:	f7fb faaa 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f284:	907e      	str	r0, [sp, #504]	; 0x1f8
    f286:	917d      	str	r1, [sp, #500]	; 0x1f4
    f288:	e7ff      	b.n	f28a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2012>
    f28a:	987e      	ldr	r0, [sp, #504]	; 0x1f8
    f28c:	f8cd 0960 	str.w	r0, [sp, #2400]	; 0x960
    f290:	997d      	ldr	r1, [sp, #500]	; 0x1f4
    f292:	f8cd 1964 	str.w	r1, [sp, #2404]	; 0x964
    f296:	f64f 02e8 	movw	r2, #63720	; 0xf8e8
    f29a:	f2c0 0201 	movt	r2, #1
    f29e:	6812      	ldr	r2, [r2, #0]
    f2a0:	466b      	mov	r3, sp
    f2a2:	f04f 0c01 	mov.w	ip, #1
    f2a6:	f8c3 c008 	str.w	ip, [r3, #8]
    f2aa:	605a      	str	r2, [r3, #4]
    f2ac:	f8c3 c000 	str.w	ip, [r3]
    f2b0:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    f2b4:	2202      	movs	r2, #2
    f2b6:	f50d 6316 	add.w	r3, sp, #2400	; 0x960
    f2ba:	997f      	ldr	r1, [sp, #508]	; 0x1fc
    f2bc:	f007 fb97 	bl	169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f2c0:	e7ff      	b.n	f2c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x204a>
    f2c2:	f8dd 193c 	ldr.w	r1, [sp, #2364]	; 0x93c
    f2c6:	f64f 7020 	movw	r0, #65312	; 0xff20
    f2ca:	f2c0 0001 	movt	r0, #1
    f2ce:	6802      	ldr	r2, [r0, #0]
    f2d0:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    f2d4:	f003 f8a4 	bl	12420 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f2d8:	e7ff      	b.n	f2da <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2062>
    f2da:	e7ff      	b.n	f2dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2064>
                self.jump(nnn.wrapping_add(self.v[0].into()).wrapping_sub(2));
    f2dc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f2e0:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    f2e4:	f002 f860 	bl	113a8 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E>
    f2e8:	907c      	str	r0, [sp, #496]	; 0x1f0
    f2ea:	e7ff      	b.n	f2ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2074>
    f2ec:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    f2f0:	997c      	ldr	r1, [sp, #496]	; 0x1f0
    f2f2:	f007 fc7d 	bl	16bf0 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E>
    f2f6:	907b      	str	r0, [sp, #492]	; 0x1ec
    f2f8:	e7ff      	b.n	f2fa <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2082>
    f2fa:	2102      	movs	r1, #2
    f2fc:	987b      	ldr	r0, [sp, #492]	; 0x1ec
    f2fe:	f007 fc88 	bl	16c12 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E>
    f302:	907a      	str	r0, [sp, #488]	; 0x1e8
    f304:	e7ff      	b.n	f306 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x208e>
    f306:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f30a:	997a      	ldr	r1, [sp, #488]	; 0x1e8
    f30c:	f001 fd70 	bl	10df0 <_ZN8libchip814Chip8$LT$T$GT$4jump17h930b3c38e90d0056E>
    f310:	e7ff      	b.n	f312 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x209a>
        match (
    f312:	f001 ba7e 	b.w	10812 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    f316:	2005      	movs	r0, #5
    f318:	f8cd 096c 	str.w	r0, [sp, #2412]	; 0x96c
    f31c:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
    f320:	f2c0 0001 	movt	r0, #1
    f324:	6801      	ldr	r1, [r0, #0]
    f326:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    f32a:	f007 fc9b 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f32e:	9079      	str	r0, [sp, #484]	; 0x1e4
    f330:	e01f      	b.n	f372 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x20fa>
    f332:	2001      	movs	r0, #1
    f334:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    f338:	e015      	b.n	f366 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x20ee>
    f33a:	2000      	movs	r0, #0
    f33c:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    f340:	e011      	b.n	f366 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x20ee>
    f342:	2000      	movs	r0, #0
    f344:	f88d 0e5b 	strb.w	r0, [sp, #3675]	; 0xe5b
    f348:	f89d 1e5b 	ldrb.w	r1, [sp, #3675]	; 0xe5b
    f34c:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f350:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f354:	f002 f835 	bl	113c2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f358:	f8cd 0e5c 	str.w	r0, [sp, #3676]	; 0xe5c
    f35c:	f8dd 0e5c 	ldr.w	r0, [sp, #3676]	; 0xe5c
    f360:	f8cd 0974 	str.w	r0, [sp, #2420]	; 0x974
    f364:	e00a      	b.n	f37c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2104>
    f366:	f89d 0973 	ldrb.w	r0, [sp, #2419]	; 0x973
    f36a:	07c0      	lsls	r0, r0, #31
    f36c:	2800      	cmp	r0, #0
    f36e:	d112      	bne.n	f396 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x211e>
    f370:	e055      	b.n	f41e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x21a6>
    f372:	9879      	ldr	r0, [sp, #484]	; 0x1e4
    f374:	07c1      	lsls	r1, r0, #31
    f376:	2900      	cmp	r1, #0
    f378:	d1e3      	bne.n	f342 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x20ca>
    f37a:	e7de      	b.n	f33a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x20c2>
    f37c:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    f380:	f60d 1174 	addw	r1, sp, #2420	; 0x974
    f384:	f007 fc6e 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f388:	9078      	str	r0, [sp, #480]	; 0x1e0
    f38a:	e7ff      	b.n	f38c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2114>
    f38c:	9878      	ldr	r0, [sp, #480]	; 0x1e0
    f38e:	07c1      	lsls	r1, r0, #31
    f390:	2900      	cmp	r1, #0
    f392:	d1ce      	bne.n	f332 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x20ba>
    f394:	e7d1      	b.n	f33a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x20c2>
                trace!("[{:04x}] RND Vx, kk", self.pc);
    f396:	f64f 60b0 	movw	r0, #65200	; 0xfeb0
    f39a:	f2c0 0001 	movt	r0, #1
    f39e:	6801      	ldr	r1, [r0, #0]
    f3a0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f3a4:	f100 0212 	add.w	r2, r0, #18
    f3a8:	f8cd 2998 	str.w	r2, [sp, #2456]	; 0x998
    f3ac:	f8dd 2998 	ldr.w	r2, [sp, #2456]	; 0x998
    f3b0:	f8cd 2d18 	str.w	r2, [sp, #3352]	; 0xd18
    f3b4:	f249 1383 	movw	r3, #37251	; 0x9183
    f3b8:	f2c0 0301 	movt	r3, #1
    f3bc:	4610      	mov	r0, r2
    f3be:	9177      	str	r1, [sp, #476]	; 0x1dc
    f3c0:	4619      	mov	r1, r3
    f3c2:	f7fb fa09 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f3c6:	9076      	str	r0, [sp, #472]	; 0x1d8
    f3c8:	9175      	str	r1, [sp, #468]	; 0x1d4
    f3ca:	e7ff      	b.n	f3cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2154>
    f3cc:	9876      	ldr	r0, [sp, #472]	; 0x1d8
    f3ce:	f8cd 0990 	str.w	r0, [sp, #2448]	; 0x990
    f3d2:	9975      	ldr	r1, [sp, #468]	; 0x1d4
    f3d4:	f8cd 1994 	str.w	r1, [sp, #2452]	; 0x994
    f3d8:	f64f 02e8 	movw	r2, #63720	; 0xf8e8
    f3dc:	f2c0 0201 	movt	r2, #1
    f3e0:	6812      	ldr	r2, [r2, #0]
    f3e2:	466b      	mov	r3, sp
    f3e4:	f04f 0c01 	mov.w	ip, #1
    f3e8:	f8c3 c008 	str.w	ip, [r3, #8]
    f3ec:	605a      	str	r2, [r3, #4]
    f3ee:	f8c3 c000 	str.w	ip, [r3]
    f3f2:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    f3f6:	2202      	movs	r2, #2
    f3f8:	f50d 6319 	add.w	r3, sp, #2448	; 0x990
    f3fc:	9977      	ldr	r1, [sp, #476]	; 0x1dc
    f3fe:	f007 faf6 	bl	169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f402:	e7ff      	b.n	f404 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x218c>
    f404:	f8dd 196c 	ldr.w	r1, [sp, #2412]	; 0x96c
    f408:	f64f 60d0 	movw	r0, #65232	; 0xfed0
    f40c:	f2c0 0001 	movt	r0, #1
    f410:	6802      	ldr	r2, [r0, #0]
    f412:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    f416:	f003 f803 	bl	12420 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f41a:	e7ff      	b.n	f41c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x21a4>
    f41c:	e7ff      	b.n	f41e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x21a6>
    f41e:	f241 0048 	movw	r0, #4168	; 0x1048
                self.v[x] = self.hw.rand() & kk;
    f422:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f426:	4408      	add	r0, r1
    f428:	f7fc fc5c 	bl	bce4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17h21c3e4c6bd12cf0aE>
    f42c:	9074      	str	r0, [sp, #464]	; 0x1d0
    f42e:	e7ff      	b.n	f430 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x21b8>
    f430:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    f434:	280f      	cmp	r0, #15
    f436:	f201 8375 	bhi.w	10b24 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x38ac>
    f43a:	e7ff      	b.n	f43c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x21c4>
    f43c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f440:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f444:	1842      	adds	r2, r0, r1
    f446:	9b74      	ldr	r3, [sp, #464]	; 0x1d0
    f448:	f8dd c45c 	ldr.w	ip, [sp, #1116]	; 0x45c
    f44c:	ea03 0e0c 	and.w	lr, r3, ip
    f450:	f882 e034 	strb.w	lr, [r2, #52]	; 0x34
        match (
    f454:	f001 b9dd 	b.w	10812 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    f458:	2005      	movs	r0, #5
    f45a:	f8cd 099c 	str.w	r0, [sp, #2460]	; 0x99c
    f45e:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
    f462:	f2c0 0001 	movt	r0, #1
    f466:	6801      	ldr	r1, [r0, #0]
    f468:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    f46c:	f007 fbfa 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f470:	9073      	str	r0, [sp, #460]	; 0x1cc
    f472:	e01f      	b.n	f4b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x223c>
    f474:	2001      	movs	r0, #1
    f476:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    f47a:	e015      	b.n	f4a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2230>
    f47c:	2000      	movs	r0, #0
    f47e:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    f482:	e011      	b.n	f4a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2230>
    f484:	2000      	movs	r0, #0
    f486:	f88d 0e63 	strb.w	r0, [sp, #3683]	; 0xe63
    f48a:	f89d 1e63 	ldrb.w	r1, [sp, #3683]	; 0xe63
    f48e:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f492:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f496:	f001 ff94 	bl	113c2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f49a:	f8cd 0e64 	str.w	r0, [sp, #3684]	; 0xe64
    f49e:	f8dd 0e64 	ldr.w	r0, [sp, #3684]	; 0xe64
    f4a2:	f8cd 09a4 	str.w	r0, [sp, #2468]	; 0x9a4
    f4a6:	e00a      	b.n	f4be <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2246>
    f4a8:	f89d 09a3 	ldrb.w	r0, [sp, #2467]	; 0x9a3
    f4ac:	07c0      	lsls	r0, r0, #31
    f4ae:	2800      	cmp	r0, #0
    f4b0:	d112      	bne.n	f4d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2260>
    f4b2:	e055      	b.n	f560 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22e8>
    f4b4:	9873      	ldr	r0, [sp, #460]	; 0x1cc
    f4b6:	07c1      	lsls	r1, r0, #31
    f4b8:	2900      	cmp	r1, #0
    f4ba:	d1e3      	bne.n	f484 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x220c>
    f4bc:	e7de      	b.n	f47c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2204>
    f4be:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    f4c2:	f60d 11a4 	addw	r1, sp, #2468	; 0x9a4
    f4c6:	f007 fbcd 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f4ca:	9072      	str	r0, [sp, #456]	; 0x1c8
    f4cc:	e7ff      	b.n	f4ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2256>
    f4ce:	9872      	ldr	r0, [sp, #456]	; 0x1c8
    f4d0:	07c1      	lsls	r1, r0, #31
    f4d2:	2900      	cmp	r1, #0
    f4d4:	d1ce      	bne.n	f474 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x21fc>
    f4d6:	e7d1      	b.n	f47c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2204>
                trace!("[{:04x}] DRW Vx, Vy, n", self.pc);
    f4d8:	f64f 5054 	movw	r0, #64852	; 0xfd54
    f4dc:	f2c0 0001 	movt	r0, #1
    f4e0:	6801      	ldr	r1, [r0, #0]
    f4e2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f4e6:	f100 0212 	add.w	r2, r0, #18
    f4ea:	f8cd 29c8 	str.w	r2, [sp, #2504]	; 0x9c8
    f4ee:	f8dd 29c8 	ldr.w	r2, [sp, #2504]	; 0x9c8
    f4f2:	f8cd 2cdc 	str.w	r2, [sp, #3292]	; 0xcdc
    f4f6:	f249 1383 	movw	r3, #37251	; 0x9183
    f4fa:	f2c0 0301 	movt	r3, #1
    f4fe:	4610      	mov	r0, r2
    f500:	9171      	str	r1, [sp, #452]	; 0x1c4
    f502:	4619      	mov	r1, r3
    f504:	f7fb f968 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f508:	9070      	str	r0, [sp, #448]	; 0x1c0
    f50a:	916f      	str	r1, [sp, #444]	; 0x1bc
    f50c:	e7ff      	b.n	f50e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2296>
    f50e:	9870      	ldr	r0, [sp, #448]	; 0x1c0
    f510:	f8cd 09c0 	str.w	r0, [sp, #2496]	; 0x9c0
    f514:	996f      	ldr	r1, [sp, #444]	; 0x1bc
    f516:	f8cd 19c4 	str.w	r1, [sp, #2500]	; 0x9c4
    f51a:	f64f 02e8 	movw	r2, #63720	; 0xf8e8
    f51e:	f2c0 0201 	movt	r2, #1
    f522:	6812      	ldr	r2, [r2, #0]
    f524:	466b      	mov	r3, sp
    f526:	f04f 0c01 	mov.w	ip, #1
    f52a:	f8c3 c008 	str.w	ip, [r3, #8]
    f52e:	605a      	str	r2, [r3, #4]
    f530:	f8c3 c000 	str.w	ip, [r3]
    f534:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    f538:	2202      	movs	r2, #2
    f53a:	f50d 631c 	add.w	r3, sp, #2496	; 0x9c0
    f53e:	9971      	ldr	r1, [sp, #452]	; 0x1c4
    f540:	f007 fa55 	bl	169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f544:	e7ff      	b.n	f546 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22ce>
    f546:	f8dd 199c 	ldr.w	r1, [sp, #2460]	; 0x99c
    f54a:	f64f 5074 	movw	r0, #64884	; 0xfd74
    f54e:	f2c0 0001 	movt	r0, #1
    f552:	6802      	ldr	r2, [r0, #0]
    f554:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    f558:	f002 ff62 	bl	12420 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f55c:	e7ff      	b.n	f55e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22e6>
    f55e:	e7ff      	b.n	f560 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22e8>
                let basex = self.v[x] as usize;
    f560:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    f564:	280f      	cmp	r0, #15
    f566:	f201 826b 	bhi.w	10a40 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x37c8>
    f56a:	e7ff      	b.n	f56c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x22f4>
    f56c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f570:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f574:	1842      	adds	r2, r0, r1
    f576:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    f57a:	4613      	mov	r3, r2
    f57c:	f8cd 2ce0 	str.w	r2, [sp, #3296]	; 0xce0
                let basey = self.v[y] as usize;
    f580:	f8dd 2460 	ldr.w	r2, [sp, #1120]	; 0x460
    f584:	2a0f      	cmp	r2, #15
    f586:	936e      	str	r3, [sp, #440]	; 0x1b8
    f588:	f201 8264 	bhi.w	10a54 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x37dc>
    f58c:	e7ff      	b.n	f58e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2316>
    f58e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f592:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    f596:	1842      	adds	r2, r0, r1
    f598:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    f59c:	4613      	mov	r3, r2
    f59e:	f8cd 2ce4 	str.w	r2, [sp, #3300]	; 0xce4
    f5a2:	f241 0248 	movw	r2, #4168	; 0x1048
                let (w, h) = self.hw.vram_size();
    f5a6:	4410      	add	r0, r2
    f5a8:	936d      	str	r3, [sp, #436]	; 0x1b4
    f5aa:	f7fc fd5c 	bl	c066 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hb385dfaf23157db8E>
    f5ae:	906c      	str	r0, [sp, #432]	; 0x1b0
    f5b0:	916b      	str	r1, [sp, #428]	; 0x1ac
    f5b2:	e7ff      	b.n	f5b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x233c>
    f5b4:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    f5b6:	f8cd 0ce8 	str.w	r0, [sp, #3304]	; 0xce8
    f5ba:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    f5bc:	f8cd 1cec 	str.w	r1, [sp, #3308]	; 0xcec
    f5c0:	2200      	movs	r2, #0
                self.v[0xf] = 0;
    f5c2:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    f5c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                for y in 0..n {
    f5ca:	f8cd 29cc 	str.w	r2, [sp, #2508]	; 0x9cc
    f5ce:	f8dd 2470 	ldr.w	r2, [sp, #1136]	; 0x470
    f5d2:	f8cd 29d0 	str.w	r2, [sp, #2512]	; 0x9d0
    f5d6:	f8dd 09cc 	ldr.w	r0, [sp, #2508]	; 0x9cc
    f5da:	f8dd 19d0 	ldr.w	r1, [sp, #2512]	; 0x9d0
    f5de:	f002 fcab 	bl	11f38 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    f5e2:	906a      	str	r0, [sp, #424]	; 0x1a8
    f5e4:	9169      	str	r1, [sp, #420]	; 0x1a4
    f5e6:	e7ff      	b.n	f5e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2370>
    f5e8:	986a      	ldr	r0, [sp, #424]	; 0x1a8
    f5ea:	f8cd 09d4 	str.w	r0, [sp, #2516]	; 0x9d4
    f5ee:	9969      	ldr	r1, [sp, #420]	; 0x1a4
    f5f0:	f8cd 19d8 	str.w	r1, [sp, #2520]	; 0x9d8
    f5f4:	e7ff      	b.n	f5f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x237e>
    f5f6:	f60d 10d4 	addw	r0, sp, #2516	; 0x9d4
    f5fa:	f002 fc12 	bl	11e22 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    f5fe:	f8cd 19e0 	str.w	r1, [sp, #2528]	; 0x9e0
    f602:	f8cd 09dc 	str.w	r0, [sp, #2524]	; 0x9dc
    f606:	e7ff      	b.n	f608 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2390>
    f608:	f8dd 09dc 	ldr.w	r0, [sp, #2524]	; 0x9dc
    f60c:	2800      	cmp	r0, #0
    f60e:	d001      	beq.n	f614 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x239c>
    f610:	e7ff      	b.n	f612 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x239a>
    f612:	e002      	b.n	f61a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x23a2>
        match (
    f614:	f001 b8fd 	b.w	10812 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
                for y in 0..n {
    f618:	defe      	udf	#254	; 0xfe
    f61a:	f8dd 09e0 	ldr.w	r0, [sp, #2528]	; 0x9e0
    f61e:	f8cd 0cf0 	str.w	r0, [sp, #3312]	; 0xcf0
    f622:	f8cd 0cf4 	str.w	r0, [sp, #3316]	; 0xcf4
    f626:	f8cd 0cf8 	str.w	r0, [sp, #3320]	; 0xcf8
                    let b = self.mem[self.i as usize + y];
    f62a:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f62e:	8a0a      	ldrh	r2, [r1, #16]
    f630:	1813      	adds	r3, r2, r0
    f632:	469c      	mov	ip, r3
    f634:	4293      	cmp	r3, r2
    f636:	9068      	str	r0, [sp, #416]	; 0x1a0
    f638:	f8cd c19c 	str.w	ip, [sp, #412]	; 0x19c
    f63c:	f0c1 8214 	bcc.w	10a68 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x37f0>
    f640:	e7ff      	b.n	f642 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x23ca>
    f642:	2000      	movs	r0, #0
    f644:	9967      	ldr	r1, [sp, #412]	; 0x19c
    f646:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    f64a:	f041 8219 	bne.w	10a80 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3808>
    f64e:	e7ff      	b.n	f650 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x23d8>
    f650:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f654:	9967      	ldr	r1, [sp, #412]	; 0x19c
    f656:	1842      	adds	r2, r0, r1
    f658:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    f65c:	4613      	mov	r3, r2
    f65e:	f88d 2cff 	strb.w	r2, [sp, #3327]	; 0xcff
                    let vramy = (y + basey) % h;
    f662:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
    f664:	f8dd c1b4 	ldr.w	ip, [sp, #436]	; 0x1b4
    f668:	eb02 0e0c 	add.w	lr, r2, ip
    f66c:	4674      	mov	r4, lr
    f66e:	4596      	cmp	lr, r2
    f670:	9366      	str	r3, [sp, #408]	; 0x198
    f672:	9465      	str	r4, [sp, #404]	; 0x194
    f674:	f0c1 820e 	bcc.w	10a94 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x381c>
    f678:	e7ff      	b.n	f67a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2402>
    f67a:	986b      	ldr	r0, [sp, #428]	; 0x1ac
    f67c:	2800      	cmp	r0, #0
    f67e:	f001 8215 	beq.w	10aac <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3834>
    f682:	e7ff      	b.n	f684 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x240c>
    f684:	9865      	ldr	r0, [sp, #404]	; 0x194
    f686:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    f688:	fbb0 f2f1 	udiv	r2, r0, r1
    f68c:	fb02 0211 	mls	r2, r2, r1, r0
    f690:	4613      	mov	r3, r2
    f692:	f8cd 2d00 	str.w	r2, [sp, #3328]	; 0xd00
    f696:	2200      	movs	r2, #0
                    for x in 0..8 {
    f698:	f8cd 29e4 	str.w	r2, [sp, #2532]	; 0x9e4
    f69c:	2208      	movs	r2, #8
    f69e:	f8cd 29e8 	str.w	r2, [sp, #2536]	; 0x9e8
    f6a2:	f8dd 09e4 	ldr.w	r0, [sp, #2532]	; 0x9e4
    f6a6:	f8dd 19e8 	ldr.w	r1, [sp, #2536]	; 0x9e8
    f6aa:	9364      	str	r3, [sp, #400]	; 0x190
    f6ac:	f002 fc44 	bl	11f38 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    f6b0:	9063      	str	r0, [sp, #396]	; 0x18c
    f6b2:	9162      	str	r1, [sp, #392]	; 0x188
    f6b4:	e7ff      	b.n	f6b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x243e>
    f6b6:	9863      	ldr	r0, [sp, #396]	; 0x18c
    f6b8:	f8cd 09ec 	str.w	r0, [sp, #2540]	; 0x9ec
    f6bc:	9962      	ldr	r1, [sp, #392]	; 0x188
    f6be:	f8cd 19f0 	str.w	r1, [sp, #2544]	; 0x9f0
    f6c2:	e7ff      	b.n	f6c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x244c>
    f6c4:	f60d 10ec 	addw	r0, sp, #2540	; 0x9ec
    f6c8:	f002 fbab 	bl	11e22 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    f6cc:	f8cd 19f8 	str.w	r1, [sp, #2552]	; 0x9f8
    f6d0:	f8cd 09f4 	str.w	r0, [sp, #2548]	; 0x9f4
    f6d4:	e7ff      	b.n	f6d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x245e>
    f6d6:	f8dd 09f4 	ldr.w	r0, [sp, #2548]	; 0x9f4
    f6da:	2800      	cmp	r0, #0
    f6dc:	d001      	beq.n	f6e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x246a>
    f6de:	e7ff      	b.n	f6e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2468>
    f6e0:	e001      	b.n	f6e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x246e>
                for y in 0..n {
    f6e2:	e788      	b.n	f5f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x237e>
                    for x in 0..8 {
    f6e4:	defe      	udf	#254	; 0xfe
    f6e6:	f8dd 09f8 	ldr.w	r0, [sp, #2552]	; 0x9f8
    f6ea:	f8cd 0d04 	str.w	r0, [sp, #3332]	; 0xd04
    f6ee:	f8cd 0d08 	str.w	r0, [sp, #3336]	; 0xd08
    f6f2:	f8cd 0d0c 	str.w	r0, [sp, #3340]	; 0xd0c
                        let vramx = (x + basex) % w;
    f6f6:	996e      	ldr	r1, [sp, #440]	; 0x1b8
    f6f8:	1842      	adds	r2, r0, r1
    f6fa:	4613      	mov	r3, r2
    f6fc:	4282      	cmp	r2, r0
    f6fe:	9061      	str	r0, [sp, #388]	; 0x184
    f700:	9360      	str	r3, [sp, #384]	; 0x180
    f702:	f0c1 81df 	bcc.w	10ac4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x384c>
    f706:	e7ff      	b.n	f708 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2490>
    f708:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    f70a:	2800      	cmp	r0, #0
    f70c:	f001 81e6 	beq.w	10adc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3864>
    f710:	e7ff      	b.n	f712 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x249a>
    f712:	9860      	ldr	r0, [sp, #384]	; 0x180
    f714:	996c      	ldr	r1, [sp, #432]	; 0x1b0
    f716:	fbb0 f2f1 	udiv	r2, r0, r1
    f71a:	fb02 0211 	mls	r2, r2, r1, r0
    f71e:	4613      	mov	r3, r2
    f720:	f8cd 2d10 	str.w	r2, [sp, #3344]	; 0xd10
                        let src = (b & 1 << (7 - x)) > 0;
    f724:	9a61      	ldr	r2, [sp, #388]	; 0x184
    f726:	f1c2 0c07 	rsb	ip, r2, #7
    f72a:	f04f 0e07 	mov.w	lr, #7
    f72e:	4596      	cmp	lr, r2
    f730:	935f      	str	r3, [sp, #380]	; 0x17c
    f732:	f8cd c178 	str.w	ip, [sp, #376]	; 0x178
    f736:	f0c1 81dd 	bcc.w	10af4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x387c>
    f73a:	e7ff      	b.n	f73c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x24c4>
    f73c:	985e      	ldr	r0, [sp, #376]	; 0x178
    f73e:	f000 0107 	and.w	r1, r0, #7
    f742:	2201      	movs	r2, #1
    f744:	fa02 f101 	lsl.w	r1, r2, r1
    f748:	08c2      	lsrs	r2, r0, #3
    f74a:	2a00      	cmp	r2, #0
    f74c:	915d      	str	r1, [sp, #372]	; 0x174
    f74e:	f041 81dd 	bne.w	10b0c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3894>
    f752:	e7ff      	b.n	f754 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x24dc>
    f754:	9866      	ldr	r0, [sp, #408]	; 0x198
    f756:	995d      	ldr	r1, [sp, #372]	; 0x174
    f758:	ea00 0201 	and.w	r2, r0, r1
    f75c:	b2d2      	uxtb	r2, r2
    f75e:	2a00      	cmp	r2, #0
    f760:	bf18      	it	ne
    f762:	2201      	movne	r2, #1
    f764:	4613      	mov	r3, r2
    f766:	f88d 2d16 	strb.w	r2, [sp, #3350]	; 0xd16
    f76a:	f241 0248 	movw	r2, #4168	; 0x1048
                        let dst = self.hw.vram_get(vramx, vramy);
    f76e:	f8dd c490 	ldr.w	ip, [sp, #1168]	; 0x490
    f772:	eb0c 0002 	add.w	r0, ip, r2
    f776:	995f      	ldr	r1, [sp, #380]	; 0x17c
    f778:	9a64      	ldr	r2, [sp, #400]	; 0x190
    f77a:	935c      	str	r3, [sp, #368]	; 0x170
    f77c:	f7fc fbbc 	bl	bef8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h33ad85da805ec1e8E>
    f780:	4601      	mov	r1, r0
    f782:	f88d 0d17 	strb.w	r0, [sp, #3351]	; 0xd17
    f786:	915b      	str	r1, [sp, #364]	; 0x16c
    f788:	e7ff      	b.n	f78a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2512>
                        self.v[0xf] |= (src && dst) as u8;
    f78a:	985c      	ldr	r0, [sp, #368]	; 0x170
    f78c:	07c1      	lsls	r1, r0, #31
    f78e:	2900      	cmp	r1, #0
    f790:	d108      	bne.n	f7a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x252c>
    f792:	e003      	b.n	f79c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2524>
    f794:	2001      	movs	r0, #1
    f796:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    f79a:	e008      	b.n	f7ae <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2536>
    f79c:	2000      	movs	r0, #0
    f79e:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    f7a2:	e004      	b.n	f7ae <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2536>
    f7a4:	985b      	ldr	r0, [sp, #364]	; 0x16c
    f7a6:	07c1      	lsls	r1, r0, #31
    f7a8:	2900      	cmp	r1, #0
    f7aa:	d1f3      	bne.n	f794 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x251c>
    f7ac:	e7f6      	b.n	f79c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2524>
    f7ae:	f89d 09ff 	ldrb.w	r0, [sp, #2559]	; 0x9ff
    f7b2:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f7b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    f7ba:	4310      	orrs	r0, r2
    f7bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    f7c0:	f241 0048 	movw	r0, #4168	; 0x1048
                        self.hw.vram_set(vramx, vramy, src ^ dst);
    f7c4:	4408      	add	r0, r1
    f7c6:	9a5c      	ldr	r2, [sp, #368]	; 0x170
    f7c8:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
    f7ca:	ea82 0c03 	eor.w	ip, r2, r3
    f7ce:	f00c 0301 	and.w	r3, ip, #1
    f7d2:	995f      	ldr	r1, [sp, #380]	; 0x17c
    f7d4:	9a64      	ldr	r2, [sp, #400]	; 0x190
    f7d6:	f7fc fa9f 	bl	bd18 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h3f06723bba6c06b0E>
    f7da:	e7ff      	b.n	f7dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2564>
                    for x in 0..8 {
    f7dc:	e772      	b.n	f6c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x244c>
    f7de:	2005      	movs	r0, #5
    f7e0:	f8cd 0a00 	str.w	r0, [sp, #2560]	; 0xa00
    f7e4:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
    f7e8:	f2c0 0001 	movt	r0, #1
    f7ec:	6801      	ldr	r1, [r0, #0]
    f7ee:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    f7f2:	f007 fa37 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f7f6:	905a      	str	r0, [sp, #360]	; 0x168
    f7f8:	e01f      	b.n	f83a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x25c2>
    f7fa:	2001      	movs	r0, #1
    f7fc:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    f800:	e015      	b.n	f82e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x25b6>
    f802:	2000      	movs	r0, #0
    f804:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    f808:	e011      	b.n	f82e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x25b6>
    f80a:	2000      	movs	r0, #0
    f80c:	f88d 0e6b 	strb.w	r0, [sp, #3691]	; 0xe6b
    f810:	f89d 1e6b 	ldrb.w	r1, [sp, #3691]	; 0xe6b
    f814:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f818:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f81c:	f001 fdd1 	bl	113c2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f820:	f8cd 0e6c 	str.w	r0, [sp, #3692]	; 0xe6c
    f824:	f8dd 0e6c 	ldr.w	r0, [sp, #3692]	; 0xe6c
    f828:	f8cd 0a08 	str.w	r0, [sp, #2568]	; 0xa08
    f82c:	e00a      	b.n	f844 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x25cc>
    f82e:	f89d 0a07 	ldrb.w	r0, [sp, #2567]	; 0xa07
    f832:	07c0      	lsls	r0, r0, #31
    f834:	2800      	cmp	r0, #0
    f836:	d112      	bne.n	f85e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x25e6>
    f838:	e055      	b.n	f8e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x266e>
    f83a:	985a      	ldr	r0, [sp, #360]	; 0x168
    f83c:	07c1      	lsls	r1, r0, #31
    f83e:	2900      	cmp	r1, #0
    f840:	d1e3      	bne.n	f80a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2592>
    f842:	e7de      	b.n	f802 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x258a>
    f844:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    f848:	f60d 2108 	addw	r1, sp, #2568	; 0xa08
    f84c:	f007 fa0a 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f850:	9059      	str	r0, [sp, #356]	; 0x164
    f852:	e7ff      	b.n	f854 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x25dc>
    f854:	9859      	ldr	r0, [sp, #356]	; 0x164
    f856:	07c1      	lsls	r1, r0, #31
    f858:	2900      	cmp	r1, #0
    f85a:	d1ce      	bne.n	f7fa <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2582>
    f85c:	e7d1      	b.n	f802 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x258a>
                trace!("[{:04x}] SKP Vx", self.pc);
    f85e:	f64f 5000 	movw	r0, #64768	; 0xfd00
    f862:	f2c0 0001 	movt	r0, #1
    f866:	6801      	ldr	r1, [r0, #0]
    f868:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f86c:	f100 0212 	add.w	r2, r0, #18
    f870:	f8cd 2a2c 	str.w	r2, [sp, #2604]	; 0xa2c
    f874:	f8dd 2a2c 	ldr.w	r2, [sp, #2604]	; 0xa2c
    f878:	f8cd 2cd8 	str.w	r2, [sp, #3288]	; 0xcd8
    f87c:	f249 1383 	movw	r3, #37251	; 0x9183
    f880:	f2c0 0301 	movt	r3, #1
    f884:	4610      	mov	r0, r2
    f886:	9158      	str	r1, [sp, #352]	; 0x160
    f888:	4619      	mov	r1, r3
    f88a:	f7fa ffa5 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f88e:	9057      	str	r0, [sp, #348]	; 0x15c
    f890:	9156      	str	r1, [sp, #344]	; 0x158
    f892:	e7ff      	b.n	f894 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x261c>
    f894:	9857      	ldr	r0, [sp, #348]	; 0x15c
    f896:	f8cd 0a24 	str.w	r0, [sp, #2596]	; 0xa24
    f89a:	9956      	ldr	r1, [sp, #344]	; 0x158
    f89c:	f8cd 1a28 	str.w	r1, [sp, #2600]	; 0xa28
    f8a0:	f64f 02e8 	movw	r2, #63720	; 0xf8e8
    f8a4:	f2c0 0201 	movt	r2, #1
    f8a8:	6812      	ldr	r2, [r2, #0]
    f8aa:	466b      	mov	r3, sp
    f8ac:	f04f 0c01 	mov.w	ip, #1
    f8b0:	f8c3 c008 	str.w	ip, [r3, #8]
    f8b4:	605a      	str	r2, [r3, #4]
    f8b6:	f8c3 c000 	str.w	ip, [r3]
    f8ba:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    f8be:	2202      	movs	r2, #2
    f8c0:	f60d 2324 	addw	r3, sp, #2596	; 0xa24
    f8c4:	9958      	ldr	r1, [sp, #352]	; 0x160
    f8c6:	f007 f892 	bl	169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f8ca:	e7ff      	b.n	f8cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2654>
    f8cc:	f8dd 1a00 	ldr.w	r1, [sp, #2560]	; 0xa00
    f8d0:	f64f 5020 	movw	r0, #64800	; 0xfd20
    f8d4:	f2c0 0001 	movt	r0, #1
    f8d8:	6802      	ldr	r2, [r0, #0]
    f8da:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    f8de:	f002 fd9f 	bl	12420 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f8e2:	e7ff      	b.n	f8e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x266c>
    f8e4:	e7ff      	b.n	f8e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x266e>
    f8e6:	f241 0048 	movw	r0, #4168	; 0x1048
                if self.hw.key(self.v[x]) {
    f8ea:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f8ee:	4408      	add	r0, r1
    f8f0:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    f8f4:	2a0f      	cmp	r2, #15
    f8f6:	9055      	str	r0, [sp, #340]	; 0x154
    f8f8:	f201 8098 	bhi.w	10a2c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x37b4>
    f8fc:	e7ff      	b.n	f8fe <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2686>
    f8fe:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f902:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f906:	1842      	adds	r2, r0, r1
    f908:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    f90c:	9855      	ldr	r0, [sp, #340]	; 0x154
    f90e:	f7fc f9ee 	bl	bcee <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17h2b52e92623e4ee1eE>
    f912:	9054      	str	r0, [sp, #336]	; 0x150
    f914:	e7ff      	b.n	f916 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x269e>
    f916:	9854      	ldr	r0, [sp, #336]	; 0x150
    f918:	07c1      	lsls	r1, r0, #31
    f91a:	2900      	cmp	r1, #0
    f91c:	d006      	beq.n	f92c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x26b4>
    f91e:	e7ff      	b.n	f920 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x26a8>
                    self.next();
    f920:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f924:	f001 faa7 	bl	10e76 <_ZN8libchip814Chip8$LT$T$GT$4next17h59db21f4d7eca91dE>
    f928:	e7ff      	b.n	f92a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x26b2>
                if self.hw.key(self.v[x]) {
    f92a:	e7ff      	b.n	f92c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x26b4>
        match (
    f92c:	f000 bf71 	b.w	10812 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    f930:	2005      	movs	r0, #5
    f932:	f8cd 0a30 	str.w	r0, [sp, #2608]	; 0xa30
    f936:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
    f93a:	f2c0 0001 	movt	r0, #1
    f93e:	6801      	ldr	r1, [r0, #0]
    f940:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    f944:	f007 f98e 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f948:	9053      	str	r0, [sp, #332]	; 0x14c
    f94a:	e01f      	b.n	f98c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2714>
    f94c:	2001      	movs	r0, #1
    f94e:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    f952:	e015      	b.n	f980 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2708>
    f954:	2000      	movs	r0, #0
    f956:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    f95a:	e011      	b.n	f980 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2708>
    f95c:	2000      	movs	r0, #0
    f95e:	f88d 0e73 	strb.w	r0, [sp, #3699]	; 0xe73
    f962:	f89d 1e73 	ldrb.w	r1, [sp, #3699]	; 0xe73
    f966:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f96a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f96e:	f001 fd28 	bl	113c2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f972:	f8cd 0e74 	str.w	r0, [sp, #3700]	; 0xe74
    f976:	f8dd 0e74 	ldr.w	r0, [sp, #3700]	; 0xe74
    f97a:	f8cd 0a38 	str.w	r0, [sp, #2616]	; 0xa38
    f97e:	e00a      	b.n	f996 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x271e>
    f980:	f89d 0a37 	ldrb.w	r0, [sp, #2615]	; 0xa37
    f984:	07c0      	lsls	r0, r0, #31
    f986:	2800      	cmp	r0, #0
    f988:	d112      	bne.n	f9b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2738>
    f98a:	e055      	b.n	fa38 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x27c0>
    f98c:	9853      	ldr	r0, [sp, #332]	; 0x14c
    f98e:	07c1      	lsls	r1, r0, #31
    f990:	2900      	cmp	r1, #0
    f992:	d1e3      	bne.n	f95c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x26e4>
    f994:	e7de      	b.n	f954 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x26dc>
    f996:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    f99a:	f60d 2138 	addw	r1, sp, #2616	; 0xa38
    f99e:	f007 f961 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f9a2:	9052      	str	r0, [sp, #328]	; 0x148
    f9a4:	e7ff      	b.n	f9a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x272e>
    f9a6:	9852      	ldr	r0, [sp, #328]	; 0x148
    f9a8:	07c1      	lsls	r1, r0, #31
    f9aa:	2900      	cmp	r1, #0
    f9ac:	d1ce      	bne.n	f94c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x26d4>
    f9ae:	e7d1      	b.n	f954 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x26dc>
                trace!("[{:04x}] SKNP Vx", self.pc);
    f9b0:	f64f 40bc 	movw	r0, #64700	; 0xfcbc
    f9b4:	f2c0 0001 	movt	r0, #1
    f9b8:	6801      	ldr	r1, [r0, #0]
    f9ba:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f9be:	f100 0212 	add.w	r2, r0, #18
    f9c2:	f8cd 2a5c 	str.w	r2, [sp, #2652]	; 0xa5c
    f9c6:	f8dd 2a5c 	ldr.w	r2, [sp, #2652]	; 0xa5c
    f9ca:	f8cd 2cd4 	str.w	r2, [sp, #3284]	; 0xcd4
    f9ce:	f249 1383 	movw	r3, #37251	; 0x9183
    f9d2:	f2c0 0301 	movt	r3, #1
    f9d6:	4610      	mov	r0, r2
    f9d8:	9151      	str	r1, [sp, #324]	; 0x144
    f9da:	4619      	mov	r1, r3
    f9dc:	f7fa fefc 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f9e0:	9050      	str	r0, [sp, #320]	; 0x140
    f9e2:	914f      	str	r1, [sp, #316]	; 0x13c
    f9e4:	e7ff      	b.n	f9e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x276e>
    f9e6:	9850      	ldr	r0, [sp, #320]	; 0x140
    f9e8:	f8cd 0a54 	str.w	r0, [sp, #2644]	; 0xa54
    f9ec:	994f      	ldr	r1, [sp, #316]	; 0x13c
    f9ee:	f8cd 1a58 	str.w	r1, [sp, #2648]	; 0xa58
    f9f2:	f64f 02e8 	movw	r2, #63720	; 0xf8e8
    f9f6:	f2c0 0201 	movt	r2, #1
    f9fa:	6812      	ldr	r2, [r2, #0]
    f9fc:	466b      	mov	r3, sp
    f9fe:	f04f 0c01 	mov.w	ip, #1
    fa02:	f8c3 c008 	str.w	ip, [r3, #8]
    fa06:	605a      	str	r2, [r3, #4]
    fa08:	f8c3 c000 	str.w	ip, [r3]
    fa0c:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    fa10:	2202      	movs	r2, #2
    fa12:	f60d 2354 	addw	r3, sp, #2644	; 0xa54
    fa16:	9951      	ldr	r1, [sp, #324]	; 0x144
    fa18:	f006 ffe9 	bl	169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    fa1c:	e7ff      	b.n	fa1e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x27a6>
    fa1e:	f8dd 1a30 	ldr.w	r1, [sp, #2608]	; 0xa30
    fa22:	f64f 40dc 	movw	r0, #64732	; 0xfcdc
    fa26:	f2c0 0001 	movt	r0, #1
    fa2a:	6802      	ldr	r2, [r0, #0]
    fa2c:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    fa30:	f002 fcf6 	bl	12420 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    fa34:	e7ff      	b.n	fa36 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x27be>
    fa36:	e7ff      	b.n	fa38 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x27c0>
    fa38:	f241 0048 	movw	r0, #4168	; 0x1048
                if !self.hw.key(self.v[x]) {
    fa3c:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    fa40:	4408      	add	r0, r1
    fa42:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    fa46:	2a0f      	cmp	r2, #15
    fa48:	904e      	str	r0, [sp, #312]	; 0x138
    fa4a:	f200 87e5 	bhi.w	10a18 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x37a0>
    fa4e:	e7ff      	b.n	fa50 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x27d8>
    fa50:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fa54:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    fa58:	1842      	adds	r2, r0, r1
    fa5a:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    fa5e:	984e      	ldr	r0, [sp, #312]	; 0x138
    fa60:	f7fc f945 	bl	bcee <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17h2b52e92623e4ee1eE>
    fa64:	904d      	str	r0, [sp, #308]	; 0x134
    fa66:	e7ff      	b.n	fa68 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x27f0>
    fa68:	984d      	ldr	r0, [sp, #308]	; 0x134
    fa6a:	07c1      	lsls	r1, r0, #31
    fa6c:	2900      	cmp	r1, #0
    fa6e:	d106      	bne.n	fa7e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2806>
    fa70:	e7ff      	b.n	fa72 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x27fa>
                    self.next();
    fa72:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fa76:	f001 f9fe 	bl	10e76 <_ZN8libchip814Chip8$LT$T$GT$4next17h59db21f4d7eca91dE>
    fa7a:	e7ff      	b.n	fa7c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2804>
                if !self.hw.key(self.v[x]) {
    fa7c:	e7ff      	b.n	fa7e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2806>
        match (
    fa7e:	f000 bec8 	b.w	10812 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    fa82:	2005      	movs	r0, #5
    fa84:	f8cd 0a60 	str.w	r0, [sp, #2656]	; 0xa60
    fa88:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
    fa8c:	f2c0 0001 	movt	r0, #1
    fa90:	6801      	ldr	r1, [r0, #0]
    fa92:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    fa96:	f007 f8e5 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fa9a:	904c      	str	r0, [sp, #304]	; 0x130
    fa9c:	e01f      	b.n	fade <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2866>
    fa9e:	2001      	movs	r0, #1
    faa0:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    faa4:	e015      	b.n	fad2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x285a>
    faa6:	2000      	movs	r0, #0
    faa8:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    faac:	e011      	b.n	fad2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x285a>
    faae:	2000      	movs	r0, #0
    fab0:	f88d 0e7b 	strb.w	r0, [sp, #3707]	; 0xe7b
    fab4:	f89d 1e7b 	ldrb.w	r1, [sp, #3707]	; 0xe7b
    fab8:	f644 206c 	movw	r0, #19052	; 0x4a6c
    fabc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    fac0:	f001 fc7f 	bl	113c2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    fac4:	f8cd 0e7c 	str.w	r0, [sp, #3708]	; 0xe7c
    fac8:	f8dd 0e7c 	ldr.w	r0, [sp, #3708]	; 0xe7c
    facc:	f8cd 0a68 	str.w	r0, [sp, #2664]	; 0xa68
    fad0:	e00a      	b.n	fae8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2870>
    fad2:	f89d 0a67 	ldrb.w	r0, [sp, #2663]	; 0xa67
    fad6:	07c0      	lsls	r0, r0, #31
    fad8:	2800      	cmp	r0, #0
    fada:	d112      	bne.n	fb02 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x288a>
    fadc:	e055      	b.n	fb8a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2912>
    fade:	984c      	ldr	r0, [sp, #304]	; 0x130
    fae0:	07c1      	lsls	r1, r0, #31
    fae2:	2900      	cmp	r1, #0
    fae4:	d1e3      	bne.n	faae <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2836>
    fae6:	e7de      	b.n	faa6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x282e>
    fae8:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    faec:	f60d 2168 	addw	r1, sp, #2664	; 0xa68
    faf0:	f007 f8b8 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    faf4:	904b      	str	r0, [sp, #300]	; 0x12c
    faf6:	e7ff      	b.n	faf8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2880>
    faf8:	984b      	ldr	r0, [sp, #300]	; 0x12c
    fafa:	07c1      	lsls	r1, r0, #31
    fafc:	2900      	cmp	r1, #0
    fafe:	d1ce      	bne.n	fa9e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2826>
    fb00:	e7d1      	b.n	faa6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x282e>
                trace!("[{:04x}] LD Vx, DT", self.pc);
    fb02:	f64f 406c 	movw	r0, #64620	; 0xfc6c
    fb06:	f2c0 0001 	movt	r0, #1
    fb0a:	6801      	ldr	r1, [r0, #0]
    fb0c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fb10:	f100 0212 	add.w	r2, r0, #18
    fb14:	f8cd 2a8c 	str.w	r2, [sp, #2700]	; 0xa8c
    fb18:	f8dd 2a8c 	ldr.w	r2, [sp, #2700]	; 0xa8c
    fb1c:	f8cd 2cd0 	str.w	r2, [sp, #3280]	; 0xcd0
    fb20:	f249 1383 	movw	r3, #37251	; 0x9183
    fb24:	f2c0 0301 	movt	r3, #1
    fb28:	4610      	mov	r0, r2
    fb2a:	914a      	str	r1, [sp, #296]	; 0x128
    fb2c:	4619      	mov	r1, r3
    fb2e:	f7fa fe53 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    fb32:	9049      	str	r0, [sp, #292]	; 0x124
    fb34:	9148      	str	r1, [sp, #288]	; 0x120
    fb36:	e7ff      	b.n	fb38 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x28c0>
    fb38:	9849      	ldr	r0, [sp, #292]	; 0x124
    fb3a:	f8cd 0a84 	str.w	r0, [sp, #2692]	; 0xa84
    fb3e:	9948      	ldr	r1, [sp, #288]	; 0x120
    fb40:	f8cd 1a88 	str.w	r1, [sp, #2696]	; 0xa88
    fb44:	f64f 02e8 	movw	r2, #63720	; 0xf8e8
    fb48:	f2c0 0201 	movt	r2, #1
    fb4c:	6812      	ldr	r2, [r2, #0]
    fb4e:	466b      	mov	r3, sp
    fb50:	f04f 0c01 	mov.w	ip, #1
    fb54:	f8c3 c008 	str.w	ip, [r3, #8]
    fb58:	605a      	str	r2, [r3, #4]
    fb5a:	f8c3 c000 	str.w	ip, [r3]
    fb5e:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    fb62:	2202      	movs	r2, #2
    fb64:	f60d 2384 	addw	r3, sp, #2692	; 0xa84
    fb68:	994a      	ldr	r1, [sp, #296]	; 0x128
    fb6a:	f006 ff40 	bl	169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    fb6e:	e7ff      	b.n	fb70 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x28f8>
    fb70:	f8dd 1a60 	ldr.w	r1, [sp, #2656]	; 0xa60
    fb74:	f64f 408c 	movw	r0, #64652	; 0xfc8c
    fb78:	f2c0 0001 	movt	r0, #1
    fb7c:	6802      	ldr	r2, [r0, #0]
    fb7e:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    fb82:	f002 fc4d 	bl	12420 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    fb86:	e7ff      	b.n	fb88 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2910>
    fb88:	e7ff      	b.n	fb8a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2912>
                self.v[x] = self.dt;
    fb8a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fb8e:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    fb92:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    fb96:	2a0f      	cmp	r2, #15
    fb98:	9147      	str	r1, [sp, #284]	; 0x11c
    fb9a:	f200 8733 	bhi.w	10a04 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x378c>
    fb9e:	e7ff      	b.n	fba0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2928>
    fba0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fba4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    fba8:	1842      	adds	r2, r0, r1
    fbaa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    fbac:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    fbb0:	f000 be2f 	b.w	10812 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    fbb4:	2005      	movs	r0, #5
    fbb6:	f8cd 0a90 	str.w	r0, [sp, #2704]	; 0xa90
    fbba:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
    fbbe:	f2c0 0001 	movt	r0, #1
    fbc2:	6801      	ldr	r1, [r0, #0]
    fbc4:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    fbc8:	f007 f84c 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fbcc:	9046      	str	r0, [sp, #280]	; 0x118
    fbce:	e01f      	b.n	fc10 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2998>
    fbd0:	2001      	movs	r0, #1
    fbd2:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    fbd6:	e015      	b.n	fc04 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x298c>
    fbd8:	2000      	movs	r0, #0
    fbda:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    fbde:	e011      	b.n	fc04 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x298c>
    fbe0:	2000      	movs	r0, #0
    fbe2:	f88d 0e83 	strb.w	r0, [sp, #3715]	; 0xe83
    fbe6:	f89d 1e83 	ldrb.w	r1, [sp, #3715]	; 0xe83
    fbea:	f644 206c 	movw	r0, #19052	; 0x4a6c
    fbee:	f2c2 0000 	movt	r0, #8192	; 0x2000
    fbf2:	f001 fbe6 	bl	113c2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    fbf6:	f8cd 0e84 	str.w	r0, [sp, #3716]	; 0xe84
    fbfa:	f8dd 0e84 	ldr.w	r0, [sp, #3716]	; 0xe84
    fbfe:	f8cd 0a98 	str.w	r0, [sp, #2712]	; 0xa98
    fc02:	e00a      	b.n	fc1a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x29a2>
    fc04:	f89d 0a97 	ldrb.w	r0, [sp, #2711]	; 0xa97
    fc08:	07c0      	lsls	r0, r0, #31
    fc0a:	2800      	cmp	r0, #0
    fc0c:	d112      	bne.n	fc34 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x29bc>
    fc0e:	e055      	b.n	fcbc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2a44>
    fc10:	9846      	ldr	r0, [sp, #280]	; 0x118
    fc12:	07c1      	lsls	r1, r0, #31
    fc14:	2900      	cmp	r1, #0
    fc16:	d1e3      	bne.n	fbe0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2968>
    fc18:	e7de      	b.n	fbd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2960>
    fc1a:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    fc1e:	f60d 2198 	addw	r1, sp, #2712	; 0xa98
    fc22:	f007 f81f 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fc26:	9045      	str	r0, [sp, #276]	; 0x114
    fc28:	e7ff      	b.n	fc2a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x29b2>
    fc2a:	9845      	ldr	r0, [sp, #276]	; 0x114
    fc2c:	07c1      	lsls	r1, r0, #31
    fc2e:	2900      	cmp	r1, #0
    fc30:	d1ce      	bne.n	fbd0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2958>
    fc32:	e7d1      	b.n	fbd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2960>
                trace!("[{:04x}] LD Vx, K", self.pc);
    fc34:	f64f 401c 	movw	r0, #64540	; 0xfc1c
    fc38:	f2c0 0001 	movt	r0, #1
    fc3c:	6801      	ldr	r1, [r0, #0]
    fc3e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fc42:	f100 0212 	add.w	r2, r0, #18
    fc46:	f8cd 2abc 	str.w	r2, [sp, #2748]	; 0xabc
    fc4a:	f8dd 2abc 	ldr.w	r2, [sp, #2748]	; 0xabc
    fc4e:	f8cd 2ccc 	str.w	r2, [sp, #3276]	; 0xccc
    fc52:	f249 1383 	movw	r3, #37251	; 0x9183
    fc56:	f2c0 0301 	movt	r3, #1
    fc5a:	4610      	mov	r0, r2
    fc5c:	9144      	str	r1, [sp, #272]	; 0x110
    fc5e:	4619      	mov	r1, r3
    fc60:	f7fa fdba 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    fc64:	9043      	str	r0, [sp, #268]	; 0x10c
    fc66:	9142      	str	r1, [sp, #264]	; 0x108
    fc68:	e7ff      	b.n	fc6a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x29f2>
    fc6a:	9843      	ldr	r0, [sp, #268]	; 0x10c
    fc6c:	f8cd 0ab4 	str.w	r0, [sp, #2740]	; 0xab4
    fc70:	9942      	ldr	r1, [sp, #264]	; 0x108
    fc72:	f8cd 1ab8 	str.w	r1, [sp, #2744]	; 0xab8
    fc76:	f64f 02e8 	movw	r2, #63720	; 0xf8e8
    fc7a:	f2c0 0201 	movt	r2, #1
    fc7e:	6812      	ldr	r2, [r2, #0]
    fc80:	466b      	mov	r3, sp
    fc82:	f04f 0c01 	mov.w	ip, #1
    fc86:	f8c3 c008 	str.w	ip, [r3, #8]
    fc8a:	605a      	str	r2, [r3, #4]
    fc8c:	f8c3 c000 	str.w	ip, [r3]
    fc90:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    fc94:	2202      	movs	r2, #2
    fc96:	f60d 23b4 	addw	r3, sp, #2740	; 0xab4
    fc9a:	9944      	ldr	r1, [sp, #272]	; 0x110
    fc9c:	f006 fea7 	bl	169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    fca0:	e7ff      	b.n	fca2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2a2a>
    fca2:	f8dd 1a90 	ldr.w	r1, [sp, #2704]	; 0xa90
    fca6:	f64f 403c 	movw	r0, #64572	; 0xfc3c
    fcaa:	f2c0 0001 	movt	r0, #1
    fcae:	6802      	ldr	r2, [r0, #0]
    fcb0:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    fcb4:	f002 fbb4 	bl	12420 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    fcb8:	e7ff      	b.n	fcba <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2a42>
    fcba:	e7ff      	b.n	fcbc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2a44>
                self.v[x] = self.waitkey();
    fcbc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fcc0:	f001 fa2d 	bl	1111e <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E>
    fcc4:	9041      	str	r0, [sp, #260]	; 0x104
    fcc6:	e7ff      	b.n	fcc8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2a50>
    fcc8:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    fccc:	280f      	cmp	r0, #15
    fcce:	f200 868f 	bhi.w	109f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3778>
    fcd2:	e7ff      	b.n	fcd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2a5c>
    fcd4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fcd8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    fcdc:	1842      	adds	r2, r0, r1
    fcde:	9b41      	ldr	r3, [sp, #260]	; 0x104
    fce0:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    fce4:	f000 bd95 	b.w	10812 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    fce8:	2005      	movs	r0, #5
    fcea:	f8cd 0ac0 	str.w	r0, [sp, #2752]	; 0xac0
    fcee:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
    fcf2:	f2c0 0001 	movt	r0, #1
    fcf6:	6801      	ldr	r1, [r0, #0]
    fcf8:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    fcfc:	f006 ffb2 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fd00:	9040      	str	r0, [sp, #256]	; 0x100
    fd02:	e01f      	b.n	fd44 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2acc>
    fd04:	2001      	movs	r0, #1
    fd06:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    fd0a:	e015      	b.n	fd38 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2ac0>
    fd0c:	2000      	movs	r0, #0
    fd0e:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    fd12:	e011      	b.n	fd38 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2ac0>
    fd14:	2000      	movs	r0, #0
    fd16:	f88d 0e8b 	strb.w	r0, [sp, #3723]	; 0xe8b
    fd1a:	f89d 1e8b 	ldrb.w	r1, [sp, #3723]	; 0xe8b
    fd1e:	f644 206c 	movw	r0, #19052	; 0x4a6c
    fd22:	f2c2 0000 	movt	r0, #8192	; 0x2000
    fd26:	f001 fb4c 	bl	113c2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    fd2a:	f8cd 0e8c 	str.w	r0, [sp, #3724]	; 0xe8c
    fd2e:	f8dd 0e8c 	ldr.w	r0, [sp, #3724]	; 0xe8c
    fd32:	f8cd 0ac8 	str.w	r0, [sp, #2760]	; 0xac8
    fd36:	e00a      	b.n	fd4e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2ad6>
    fd38:	f89d 0ac7 	ldrb.w	r0, [sp, #2759]	; 0xac7
    fd3c:	07c0      	lsls	r0, r0, #31
    fd3e:	2800      	cmp	r0, #0
    fd40:	d112      	bne.n	fd68 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2af0>
    fd42:	e055      	b.n	fdf0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2b78>
    fd44:	9840      	ldr	r0, [sp, #256]	; 0x100
    fd46:	07c1      	lsls	r1, r0, #31
    fd48:	2900      	cmp	r1, #0
    fd4a:	d1e3      	bne.n	fd14 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2a9c>
    fd4c:	e7de      	b.n	fd0c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2a94>
    fd4e:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    fd52:	f60d 21c8 	addw	r1, sp, #2760	; 0xac8
    fd56:	f006 ff85 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fd5a:	903f      	str	r0, [sp, #252]	; 0xfc
    fd5c:	e7ff      	b.n	fd5e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2ae6>
    fd5e:	983f      	ldr	r0, [sp, #252]	; 0xfc
    fd60:	07c1      	lsls	r1, r0, #31
    fd62:	2900      	cmp	r1, #0
    fd64:	d1ce      	bne.n	fd04 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2a8c>
    fd66:	e7d1      	b.n	fd0c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2a94>
                trace!("[{:04x}] LD DT, Vx", self.pc);
    fd68:	f64f 30cc 	movw	r0, #64460	; 0xfbcc
    fd6c:	f2c0 0001 	movt	r0, #1
    fd70:	6801      	ldr	r1, [r0, #0]
    fd72:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fd76:	f100 0212 	add.w	r2, r0, #18
    fd7a:	f8cd 2aec 	str.w	r2, [sp, #2796]	; 0xaec
    fd7e:	f8dd 2aec 	ldr.w	r2, [sp, #2796]	; 0xaec
    fd82:	f8cd 2cc8 	str.w	r2, [sp, #3272]	; 0xcc8
    fd86:	f249 1383 	movw	r3, #37251	; 0x9183
    fd8a:	f2c0 0301 	movt	r3, #1
    fd8e:	4610      	mov	r0, r2
    fd90:	913e      	str	r1, [sp, #248]	; 0xf8
    fd92:	4619      	mov	r1, r3
    fd94:	f7fa fd20 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    fd98:	903d      	str	r0, [sp, #244]	; 0xf4
    fd9a:	913c      	str	r1, [sp, #240]	; 0xf0
    fd9c:	e7ff      	b.n	fd9e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2b26>
    fd9e:	983d      	ldr	r0, [sp, #244]	; 0xf4
    fda0:	f8cd 0ae4 	str.w	r0, [sp, #2788]	; 0xae4
    fda4:	993c      	ldr	r1, [sp, #240]	; 0xf0
    fda6:	f8cd 1ae8 	str.w	r1, [sp, #2792]	; 0xae8
    fdaa:	f64f 02e8 	movw	r2, #63720	; 0xf8e8
    fdae:	f2c0 0201 	movt	r2, #1
    fdb2:	6812      	ldr	r2, [r2, #0]
    fdb4:	466b      	mov	r3, sp
    fdb6:	f04f 0c01 	mov.w	ip, #1
    fdba:	f8c3 c008 	str.w	ip, [r3, #8]
    fdbe:	605a      	str	r2, [r3, #4]
    fdc0:	f8c3 c000 	str.w	ip, [r3]
    fdc4:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    fdc8:	2202      	movs	r2, #2
    fdca:	f60d 23e4 	addw	r3, sp, #2788	; 0xae4
    fdce:	993e      	ldr	r1, [sp, #248]	; 0xf8
    fdd0:	f006 fe0d 	bl	169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    fdd4:	e7ff      	b.n	fdd6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2b5e>
    fdd6:	f8dd 1ac0 	ldr.w	r1, [sp, #2752]	; 0xac0
    fdda:	f64f 30ec 	movw	r0, #64492	; 0xfbec
    fdde:	f2c0 0001 	movt	r0, #1
    fde2:	6802      	ldr	r2, [r0, #0]
    fde4:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    fde8:	f002 fb1a 	bl	12420 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    fdec:	e7ff      	b.n	fdee <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2b76>
    fdee:	e7ff      	b.n	fdf0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2b78>
                self.dt = self.v[x];
    fdf0:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    fdf4:	280f      	cmp	r0, #15
    fdf6:	f200 85f1 	bhi.w	109dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3764>
    fdfa:	e7ff      	b.n	fdfc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2b84>
    fdfc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fe00:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    fe04:	1842      	adds	r2, r0, r1
    fe06:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    fe0a:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
        match (
    fe0e:	f000 bd00 	b.w	10812 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    fe12:	2005      	movs	r0, #5
    fe14:	f8cd 0af0 	str.w	r0, [sp, #2800]	; 0xaf0
    fe18:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
    fe1c:	f2c0 0001 	movt	r0, #1
    fe20:	6801      	ldr	r1, [r0, #0]
    fe22:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    fe26:	f006 ff1d 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fe2a:	903b      	str	r0, [sp, #236]	; 0xec
    fe2c:	e01f      	b.n	fe6e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2bf6>
    fe2e:	2001      	movs	r0, #1
    fe30:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    fe34:	e015      	b.n	fe62 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2bea>
    fe36:	2000      	movs	r0, #0
    fe38:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    fe3c:	e011      	b.n	fe62 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2bea>
    fe3e:	2000      	movs	r0, #0
    fe40:	f88d 0e93 	strb.w	r0, [sp, #3731]	; 0xe93
    fe44:	f89d 1e93 	ldrb.w	r1, [sp, #3731]	; 0xe93
    fe48:	f644 206c 	movw	r0, #19052	; 0x4a6c
    fe4c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    fe50:	f001 fab7 	bl	113c2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    fe54:	f8cd 0e94 	str.w	r0, [sp, #3732]	; 0xe94
    fe58:	f8dd 0e94 	ldr.w	r0, [sp, #3732]	; 0xe94
    fe5c:	f8cd 0af8 	str.w	r0, [sp, #2808]	; 0xaf8
    fe60:	e00a      	b.n	fe78 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2c00>
    fe62:	f89d 0af7 	ldrb.w	r0, [sp, #2807]	; 0xaf7
    fe66:	07c0      	lsls	r0, r0, #31
    fe68:	2800      	cmp	r0, #0
    fe6a:	d112      	bne.n	fe92 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2c1a>
    fe6c:	e055      	b.n	ff1a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2ca2>
    fe6e:	983b      	ldr	r0, [sp, #236]	; 0xec
    fe70:	07c1      	lsls	r1, r0, #31
    fe72:	2900      	cmp	r1, #0
    fe74:	d1e3      	bne.n	fe3e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2bc6>
    fe76:	e7de      	b.n	fe36 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2bbe>
    fe78:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    fe7c:	f60d 21f8 	addw	r1, sp, #2808	; 0xaf8
    fe80:	f006 fef0 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fe84:	903a      	str	r0, [sp, #232]	; 0xe8
    fe86:	e7ff      	b.n	fe88 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2c10>
    fe88:	983a      	ldr	r0, [sp, #232]	; 0xe8
    fe8a:	07c1      	lsls	r1, r0, #31
    fe8c:	2900      	cmp	r1, #0
    fe8e:	d1ce      	bne.n	fe2e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2bb6>
    fe90:	e7d1      	b.n	fe36 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2bbe>
                trace!("[{:04x}] LD ST, Vx", self.pc);
    fe92:	f64f 307c 	movw	r0, #64380	; 0xfb7c
    fe96:	f2c0 0001 	movt	r0, #1
    fe9a:	6801      	ldr	r1, [r0, #0]
    fe9c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fea0:	f100 0212 	add.w	r2, r0, #18
    fea4:	f8cd 2b1c 	str.w	r2, [sp, #2844]	; 0xb1c
    fea8:	f8dd 2b1c 	ldr.w	r2, [sp, #2844]	; 0xb1c
    feac:	f8cd 2cc4 	str.w	r2, [sp, #3268]	; 0xcc4
    feb0:	f249 1383 	movw	r3, #37251	; 0x9183
    feb4:	f2c0 0301 	movt	r3, #1
    feb8:	4610      	mov	r0, r2
    feba:	9139      	str	r1, [sp, #228]	; 0xe4
    febc:	4619      	mov	r1, r3
    febe:	f7fa fc8b 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    fec2:	9038      	str	r0, [sp, #224]	; 0xe0
    fec4:	9137      	str	r1, [sp, #220]	; 0xdc
    fec6:	e7ff      	b.n	fec8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2c50>
    fec8:	9838      	ldr	r0, [sp, #224]	; 0xe0
    feca:	f8cd 0b14 	str.w	r0, [sp, #2836]	; 0xb14
    fece:	9937      	ldr	r1, [sp, #220]	; 0xdc
    fed0:	f8cd 1b18 	str.w	r1, [sp, #2840]	; 0xb18
    fed4:	f64f 02e8 	movw	r2, #63720	; 0xf8e8
    fed8:	f2c0 0201 	movt	r2, #1
    fedc:	6812      	ldr	r2, [r2, #0]
    fede:	466b      	mov	r3, sp
    fee0:	f04f 0c01 	mov.w	ip, #1
    fee4:	f8c3 c008 	str.w	ip, [r3, #8]
    fee8:	605a      	str	r2, [r3, #4]
    feea:	f8c3 c000 	str.w	ip, [r3]
    feee:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    fef2:	2202      	movs	r2, #2
    fef4:	f60d 3314 	addw	r3, sp, #2836	; 0xb14
    fef8:	9939      	ldr	r1, [sp, #228]	; 0xe4
    fefa:	f006 fd78 	bl	169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    fefe:	e7ff      	b.n	ff00 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2c88>
    ff00:	f8dd 1af0 	ldr.w	r1, [sp, #2800]	; 0xaf0
    ff04:	f64f 309c 	movw	r0, #64412	; 0xfb9c
    ff08:	f2c0 0001 	movt	r0, #1
    ff0c:	6802      	ldr	r2, [r0, #0]
    ff0e:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    ff12:	f002 fa85 	bl	12420 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ff16:	e7ff      	b.n	ff18 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2ca0>
    ff18:	e7ff      	b.n	ff1a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2ca2>
                self.st = self.v[x];
    ff1a:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ff1e:	280f      	cmp	r0, #15
    ff20:	f200 8552 	bhi.w	109c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3750>
    ff24:	e7ff      	b.n	ff26 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2cae>
    ff26:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ff2a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ff2e:	1842      	adds	r2, r0, r1
    ff30:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ff34:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
        match (
    ff38:	f000 bc6b 	b.w	10812 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
    ff3c:	2005      	movs	r0, #5
    ff3e:	f8cd 0b20 	str.w	r0, [sp, #2848]	; 0xb20
    ff42:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
    ff46:	f2c0 0001 	movt	r0, #1
    ff4a:	6801      	ldr	r1, [r0, #0]
    ff4c:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    ff50:	f006 fe88 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ff54:	9036      	str	r0, [sp, #216]	; 0xd8
    ff56:	e01f      	b.n	ff98 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2d20>
    ff58:	2001      	movs	r0, #1
    ff5a:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    ff5e:	e015      	b.n	ff8c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2d14>
    ff60:	2000      	movs	r0, #0
    ff62:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    ff66:	e011      	b.n	ff8c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2d14>
    ff68:	2000      	movs	r0, #0
    ff6a:	f88d 0e9b 	strb.w	r0, [sp, #3739]	; 0xe9b
    ff6e:	f89d 1e9b 	ldrb.w	r1, [sp, #3739]	; 0xe9b
    ff72:	f644 206c 	movw	r0, #19052	; 0x4a6c
    ff76:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ff7a:	f001 fa22 	bl	113c2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    ff7e:	f8cd 0e9c 	str.w	r0, [sp, #3740]	; 0xe9c
    ff82:	f8dd 0e9c 	ldr.w	r0, [sp, #3740]	; 0xe9c
    ff86:	f8cd 0b28 	str.w	r0, [sp, #2856]	; 0xb28
    ff8a:	e00a      	b.n	ffa2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2d2a>
    ff8c:	f89d 0b27 	ldrb.w	r0, [sp, #2855]	; 0xb27
    ff90:	07c0      	lsls	r0, r0, #31
    ff92:	2800      	cmp	r0, #0
    ff94:	d112      	bne.n	ffbc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2d44>
    ff96:	e055      	b.n	10044 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2dcc>
    ff98:	9836      	ldr	r0, [sp, #216]	; 0xd8
    ff9a:	07c1      	lsls	r1, r0, #31
    ff9c:	2900      	cmp	r1, #0
    ff9e:	d1e3      	bne.n	ff68 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2cf0>
    ffa0:	e7de      	b.n	ff60 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2ce8>
    ffa2:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    ffa6:	f60d 3128 	addw	r1, sp, #2856	; 0xb28
    ffaa:	f006 fe5b 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ffae:	9035      	str	r0, [sp, #212]	; 0xd4
    ffb0:	e7ff      	b.n	ffb2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2d3a>
    ffb2:	9835      	ldr	r0, [sp, #212]	; 0xd4
    ffb4:	07c1      	lsls	r1, r0, #31
    ffb6:	2900      	cmp	r1, #0
    ffb8:	d1ce      	bne.n	ff58 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2ce0>
    ffba:	e7d1      	b.n	ff60 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2ce8>
                trace!("[{:04x}] ADD I, Vx", self.pc);
    ffbc:	f64f 302c 	movw	r0, #64300	; 0xfb2c
    ffc0:	f2c0 0001 	movt	r0, #1
    ffc4:	6801      	ldr	r1, [r0, #0]
    ffc6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ffca:	f100 0212 	add.w	r2, r0, #18
    ffce:	f8cd 2b4c 	str.w	r2, [sp, #2892]	; 0xb4c
    ffd2:	f8dd 2b4c 	ldr.w	r2, [sp, #2892]	; 0xb4c
    ffd6:	f8cd 2cc0 	str.w	r2, [sp, #3264]	; 0xcc0
    ffda:	f249 1383 	movw	r3, #37251	; 0x9183
    ffde:	f2c0 0301 	movt	r3, #1
    ffe2:	4610      	mov	r0, r2
    ffe4:	9134      	str	r1, [sp, #208]	; 0xd0
    ffe6:	4619      	mov	r1, r3
    ffe8:	f7fa fbf6 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ffec:	9033      	str	r0, [sp, #204]	; 0xcc
    ffee:	9132      	str	r1, [sp, #200]	; 0xc8
    fff0:	e7ff      	b.n	fff2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2d7a>
    fff2:	9833      	ldr	r0, [sp, #204]	; 0xcc
    fff4:	f8cd 0b44 	str.w	r0, [sp, #2884]	; 0xb44
    fff8:	9932      	ldr	r1, [sp, #200]	; 0xc8
    fffa:	f8cd 1b48 	str.w	r1, [sp, #2888]	; 0xb48
    fffe:	f64f 02e8 	movw	r2, #63720	; 0xf8e8
   10002:	f2c0 0201 	movt	r2, #1
   10006:	6812      	ldr	r2, [r2, #0]
   10008:	466b      	mov	r3, sp
   1000a:	f04f 0c01 	mov.w	ip, #1
   1000e:	f8c3 c008 	str.w	ip, [r3, #8]
   10012:	605a      	str	r2, [r3, #4]
   10014:	f8c3 c000 	str.w	ip, [r3]
   10018:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
   1001c:	2202      	movs	r2, #2
   1001e:	f60d 3344 	addw	r3, sp, #2884	; 0xb44
   10022:	9934      	ldr	r1, [sp, #208]	; 0xd0
   10024:	f006 fce3 	bl	169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   10028:	e7ff      	b.n	1002a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2db2>
   1002a:	f8dd 1b20 	ldr.w	r1, [sp, #2848]	; 0xb20
   1002e:	f64f 304c 	movw	r0, #64332	; 0xfb4c
   10032:	f2c0 0001 	movt	r0, #1
   10036:	6802      	ldr	r2, [r0, #0]
   10038:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
   1003c:	f002 f9f0 	bl	12420 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
   10040:	e7ff      	b.n	10042 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2dca>
   10042:	e7ff      	b.n	10044 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2dcc>
                self.i = self.i.wrapping_add(self.v[x].into());
   10044:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   10048:	8a01      	ldrh	r1, [r0, #16]
   1004a:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
   1004e:	2a0f      	cmp	r2, #15
   10050:	9131      	str	r1, [sp, #196]	; 0xc4
   10052:	f200 84af 	bhi.w	109b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x373c>
   10056:	e7ff      	b.n	10058 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2de0>
   10058:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   1005c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10060:	1842      	adds	r2, r0, r1
   10062:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
   10066:	f001 f99f 	bl	113a8 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E>
   1006a:	9030      	str	r0, [sp, #192]	; 0xc0
   1006c:	e7ff      	b.n	1006e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2df6>
   1006e:	9831      	ldr	r0, [sp, #196]	; 0xc4
   10070:	9930      	ldr	r1, [sp, #192]	; 0xc0
   10072:	f006 fdbd 	bl	16bf0 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E>
   10076:	902f      	str	r0, [sp, #188]	; 0xbc
   10078:	e7ff      	b.n	1007a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2e02>
   1007a:	982f      	ldr	r0, [sp, #188]	; 0xbc
   1007c:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   10080:	8208      	strh	r0, [r1, #16]
        match (
   10082:	e3c6      	b.n	10812 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
   10084:	2005      	movs	r0, #5
   10086:	f8cd 0b50 	str.w	r0, [sp, #2896]	; 0xb50
   1008a:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
   1008e:	f2c0 0001 	movt	r0, #1
   10092:	6801      	ldr	r1, [r0, #0]
   10094:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
   10098:	f006 fde4 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   1009c:	902e      	str	r0, [sp, #184]	; 0xb8
   1009e:	e01f      	b.n	100e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2e68>
   100a0:	2001      	movs	r0, #1
   100a2:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
   100a6:	e015      	b.n	100d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2e5c>
   100a8:	2000      	movs	r0, #0
   100aa:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
   100ae:	e011      	b.n	100d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2e5c>
   100b0:	2000      	movs	r0, #0
   100b2:	f88d 0ea3 	strb.w	r0, [sp, #3747]	; 0xea3
   100b6:	f89d 1ea3 	ldrb.w	r1, [sp, #3747]	; 0xea3
   100ba:	f644 206c 	movw	r0, #19052	; 0x4a6c
   100be:	f2c2 0000 	movt	r0, #8192	; 0x2000
   100c2:	f001 f97e 	bl	113c2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
   100c6:	f8cd 0ea4 	str.w	r0, [sp, #3748]	; 0xea4
   100ca:	f8dd 0ea4 	ldr.w	r0, [sp, #3748]	; 0xea4
   100ce:	f8cd 0b58 	str.w	r0, [sp, #2904]	; 0xb58
   100d2:	e00a      	b.n	100ea <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2e72>
   100d4:	f89d 0b57 	ldrb.w	r0, [sp, #2903]	; 0xb57
   100d8:	07c0      	lsls	r0, r0, #31
   100da:	2800      	cmp	r0, #0
   100dc:	d112      	bne.n	10104 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2e8c>
   100de:	e055      	b.n	1018c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2f14>
   100e0:	982e      	ldr	r0, [sp, #184]	; 0xb8
   100e2:	07c1      	lsls	r1, r0, #31
   100e4:	2900      	cmp	r1, #0
   100e6:	d1e3      	bne.n	100b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2e38>
   100e8:	e7de      	b.n	100a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2e30>
   100ea:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
   100ee:	f60d 3158 	addw	r1, sp, #2904	; 0xb58
   100f2:	f006 fdb7 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   100f6:	902d      	str	r0, [sp, #180]	; 0xb4
   100f8:	e7ff      	b.n	100fa <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2e82>
   100fa:	982d      	ldr	r0, [sp, #180]	; 0xb4
   100fc:	07c1      	lsls	r1, r0, #31
   100fe:	2900      	cmp	r1, #0
   10100:	d1ce      	bne.n	100a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2e28>
   10102:	e7d1      	b.n	100a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2e30>
                trace!("[{:04x}] LD F, Vx", self.pc);
   10104:	f64f 20a8 	movw	r0, #64168	; 0xfaa8
   10108:	f2c0 0001 	movt	r0, #1
   1010c:	6801      	ldr	r1, [r0, #0]
   1010e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   10112:	f100 0212 	add.w	r2, r0, #18
   10116:	f8cd 2b7c 	str.w	r2, [sp, #2940]	; 0xb7c
   1011a:	f8dd 2b7c 	ldr.w	r2, [sp, #2940]	; 0xb7c
   1011e:	f8cd 2cbc 	str.w	r2, [sp, #3260]	; 0xcbc
   10122:	f249 1383 	movw	r3, #37251	; 0x9183
   10126:	f2c0 0301 	movt	r3, #1
   1012a:	4610      	mov	r0, r2
   1012c:	912c      	str	r1, [sp, #176]	; 0xb0
   1012e:	4619      	mov	r1, r3
   10130:	f7fa fb52 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
   10134:	902b      	str	r0, [sp, #172]	; 0xac
   10136:	912a      	str	r1, [sp, #168]	; 0xa8
   10138:	e7ff      	b.n	1013a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2ec2>
   1013a:	982b      	ldr	r0, [sp, #172]	; 0xac
   1013c:	f8cd 0b74 	str.w	r0, [sp, #2932]	; 0xb74
   10140:	992a      	ldr	r1, [sp, #168]	; 0xa8
   10142:	f8cd 1b78 	str.w	r1, [sp, #2936]	; 0xb78
   10146:	f64f 02e8 	movw	r2, #63720	; 0xf8e8
   1014a:	f2c0 0201 	movt	r2, #1
   1014e:	6812      	ldr	r2, [r2, #0]
   10150:	466b      	mov	r3, sp
   10152:	f04f 0c01 	mov.w	ip, #1
   10156:	f8c3 c008 	str.w	ip, [r3, #8]
   1015a:	605a      	str	r2, [r3, #4]
   1015c:	f8c3 c000 	str.w	ip, [r3]
   10160:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
   10164:	2202      	movs	r2, #2
   10166:	f60d 3374 	addw	r3, sp, #2932	; 0xb74
   1016a:	992c      	ldr	r1, [sp, #176]	; 0xb0
   1016c:	f006 fc3f 	bl	169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   10170:	e7ff      	b.n	10172 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2efa>
   10172:	f8dd 1b50 	ldr.w	r1, [sp, #2896]	; 0xb50
   10176:	f64f 20c8 	movw	r0, #64200	; 0xfac8
   1017a:	f2c0 0001 	movt	r0, #1
   1017e:	6802      	ldr	r2, [r0, #0]
   10180:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
   10184:	f002 f94c 	bl	12420 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
   10188:	e7ff      	b.n	1018a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2f12>
   1018a:	e7ff      	b.n	1018c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2f14>
                self.i = (self.v[x] * 5).into();
   1018c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
   10190:	280f      	cmp	r0, #15
   10192:	f200 83f9 	bhi.w	10988 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3710>
   10196:	e7ff      	b.n	10198 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2f20>
   10198:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   1019c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   101a0:	1842      	adds	r2, r0, r1
   101a2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
   101a6:	2305      	movs	r3, #5
   101a8:	fba2 2303 	umull	r2, r3, r2, r3
   101ac:	ea4f 2c12 	mov.w	ip, r2, lsr #8
   101b0:	f04f 0e00 	mov.w	lr, #0
   101b4:	ebbe 2f12 	cmp.w	lr, r2, lsr #8
   101b8:	bf18      	it	ne
   101ba:	f04f 0c01 	movne.w	ip, #1
   101be:	2b00      	cmp	r3, #0
   101c0:	bf18      	it	ne
   101c2:	2301      	movne	r3, #1
   101c4:	ea43 030c 	orr.w	r3, r3, ip
   101c8:	2b00      	cmp	r3, #0
   101ca:	9229      	str	r2, [sp, #164]	; 0xa4
   101cc:	f040 83e6 	bne.w	1099c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3724>
   101d0:	e7ff      	b.n	101d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2f5a>
   101d2:	9829      	ldr	r0, [sp, #164]	; 0xa4
   101d4:	f001 f8e8 	bl	113a8 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E>
   101d8:	9028      	str	r0, [sp, #160]	; 0xa0
   101da:	e7ff      	b.n	101dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2f64>
   101dc:	9828      	ldr	r0, [sp, #160]	; 0xa0
   101de:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   101e2:	8208      	strh	r0, [r1, #16]
        match (
   101e4:	e315      	b.n	10812 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
   101e6:	2005      	movs	r0, #5
   101e8:	f8cd 0b80 	str.w	r0, [sp, #2944]	; 0xb80
   101ec:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
   101f0:	f2c0 0001 	movt	r0, #1
   101f4:	6801      	ldr	r1, [r0, #0]
   101f6:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
   101fa:	f006 fd33 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   101fe:	9027      	str	r0, [sp, #156]	; 0x9c
   10200:	e01f      	b.n	10242 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2fca>
   10202:	2001      	movs	r0, #1
   10204:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
   10208:	e015      	b.n	10236 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2fbe>
   1020a:	2000      	movs	r0, #0
   1020c:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
   10210:	e011      	b.n	10236 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2fbe>
   10212:	2000      	movs	r0, #0
   10214:	f88d 0eab 	strb.w	r0, [sp, #3755]	; 0xeab
   10218:	f89d 1eab 	ldrb.w	r1, [sp, #3755]	; 0xeab
   1021c:	f644 206c 	movw	r0, #19052	; 0x4a6c
   10220:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10224:	f001 f8cd 	bl	113c2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
   10228:	f8cd 0eac 	str.w	r0, [sp, #3756]	; 0xeac
   1022c:	f8dd 0eac 	ldr.w	r0, [sp, #3756]	; 0xeac
   10230:	f8cd 0b88 	str.w	r0, [sp, #2952]	; 0xb88
   10234:	e00a      	b.n	1024c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2fd4>
   10236:	f89d 0b87 	ldrb.w	r0, [sp, #2951]	; 0xb87
   1023a:	07c0      	lsls	r0, r0, #31
   1023c:	2800      	cmp	r0, #0
   1023e:	d112      	bne.n	10266 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2fee>
   10240:	e055      	b.n	102ee <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3076>
   10242:	9827      	ldr	r0, [sp, #156]	; 0x9c
   10244:	07c1      	lsls	r1, r0, #31
   10246:	2900      	cmp	r1, #0
   10248:	d1e3      	bne.n	10212 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2f9a>
   1024a:	e7de      	b.n	1020a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2f92>
   1024c:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
   10250:	f60d 3188 	addw	r1, sp, #2952	; 0xb88
   10254:	f006 fd06 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   10258:	9026      	str	r0, [sp, #152]	; 0x98
   1025a:	e7ff      	b.n	1025c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2fe4>
   1025c:	9826      	ldr	r0, [sp, #152]	; 0x98
   1025e:	07c1      	lsls	r1, r0, #31
   10260:	2900      	cmp	r1, #0
   10262:	d1ce      	bne.n	10202 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2f8a>
   10264:	e7d1      	b.n	1020a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x2f92>
                trace!("[{:04x}] LD B, Vx", self.pc);
   10266:	f64f 2008 	movw	r0, #64008	; 0xfa08
   1026a:	f2c0 0001 	movt	r0, #1
   1026e:	6801      	ldr	r1, [r0, #0]
   10270:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   10274:	f100 0212 	add.w	r2, r0, #18
   10278:	f8cd 2bac 	str.w	r2, [sp, #2988]	; 0xbac
   1027c:	f8dd 2bac 	ldr.w	r2, [sp, #2988]	; 0xbac
   10280:	f8cd 2cb4 	str.w	r2, [sp, #3252]	; 0xcb4
   10284:	f249 1383 	movw	r3, #37251	; 0x9183
   10288:	f2c0 0301 	movt	r3, #1
   1028c:	4610      	mov	r0, r2
   1028e:	9125      	str	r1, [sp, #148]	; 0x94
   10290:	4619      	mov	r1, r3
   10292:	f7fa faa1 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
   10296:	9024      	str	r0, [sp, #144]	; 0x90
   10298:	9123      	str	r1, [sp, #140]	; 0x8c
   1029a:	e7ff      	b.n	1029c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3024>
   1029c:	9824      	ldr	r0, [sp, #144]	; 0x90
   1029e:	f8cd 0ba4 	str.w	r0, [sp, #2980]	; 0xba4
   102a2:	9923      	ldr	r1, [sp, #140]	; 0x8c
   102a4:	f8cd 1ba8 	str.w	r1, [sp, #2984]	; 0xba8
   102a8:	f64f 02e8 	movw	r2, #63720	; 0xf8e8
   102ac:	f2c0 0201 	movt	r2, #1
   102b0:	6812      	ldr	r2, [r2, #0]
   102b2:	466b      	mov	r3, sp
   102b4:	f04f 0c01 	mov.w	ip, #1
   102b8:	f8c3 c008 	str.w	ip, [r3, #8]
   102bc:	605a      	str	r2, [r3, #4]
   102be:	f8c3 c000 	str.w	ip, [r3]
   102c2:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
   102c6:	2202      	movs	r2, #2
   102c8:	f60d 33a4 	addw	r3, sp, #2980	; 0xba4
   102cc:	9925      	ldr	r1, [sp, #148]	; 0x94
   102ce:	f006 fb8e 	bl	169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   102d2:	e7ff      	b.n	102d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x305c>
   102d4:	f8dd 1b80 	ldr.w	r1, [sp, #2944]	; 0xb80
   102d8:	f64f 2028 	movw	r0, #64040	; 0xfa28
   102dc:	f2c0 0001 	movt	r0, #1
   102e0:	6802      	ldr	r2, [r0, #0]
   102e2:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
   102e6:	f002 f89b 	bl	12420 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
   102ea:	e7ff      	b.n	102ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3074>
   102ec:	e7ff      	b.n	102ee <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3076>
                let bcd = self.v[x];
   102ee:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
   102f2:	280f      	cmp	r0, #15
   102f4:	f200 8308 	bhi.w	10908 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3690>
   102f8:	e7ff      	b.n	102fa <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3082>
   102fa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   102fe:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10302:	1842      	adds	r2, r0, r1
   10304:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
   10308:	4613      	mov	r3, r2
   1030a:	f88d 2cbb 	strb.w	r2, [sp, #3259]	; 0xcbb
   1030e:	f248 5c1f 	movw	ip, #34079	; 0x851f
   10312:	f2c5 1ceb 	movt	ip, #20971	; 0x51eb
                self.mem[self.i as usize] = (bcd / 100) % 10;
   10316:	fba2 2c0c 	umull	r2, ip, r2, ip
   1031a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
   1031e:	f8b0 e010 	ldrh.w	lr, [r0, #16]
   10322:	4674      	mov	r4, lr
   10324:	2500      	movs	r5, #0
   10326:	ebb5 3f1e 	cmp.w	r5, lr, lsr #12
   1032a:	9322      	str	r3, [sp, #136]	; 0x88
   1032c:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
   10330:	9420      	str	r4, [sp, #128]	; 0x80
   10332:	f040 82f3 	bne.w	1091c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x36a4>
   10336:	e7ff      	b.n	10338 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x30c0>
   10338:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   1033c:	9920      	ldr	r1, [sp, #128]	; 0x80
   1033e:	1842      	adds	r2, r0, r1
   10340:	9b21      	ldr	r3, [sp, #132]	; 0x84
   10342:	fa5f fc83 	uxtb.w	ip, r3
   10346:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
   1034a:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
   1034e:	fbac 450e 	umull	r4, r5, ip, lr
   10352:	08ed      	lsrs	r5, r5, #3
   10354:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   10358:	ebac 0c45 	sub.w	ip, ip, r5, lsl #1
   1035c:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
   10360:	9a22      	ldr	r2, [sp, #136]	; 0x88
   10362:	fa5f fc82 	uxtb.w	ip, r2
   10366:	fbac ce0e 	umull	ip, lr, ip, lr
   1036a:	ea4f 0ede 	mov.w	lr, lr, lsr #3
   1036e:	8a05      	ldrh	r5, [r0, #16]
   10370:	3501      	adds	r5, #1
   10372:	2600      	movs	r6, #0
   10374:	2e00      	cmp	r6, #0
   10376:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
   1037a:	951e      	str	r5, [sp, #120]	; 0x78
   1037c:	f040 82d8 	bne.w	10930 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x36b8>
   10380:	e7ff      	b.n	10382 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x310a>
   10382:	2000      	movs	r0, #0
   10384:	991e      	ldr	r1, [sp, #120]	; 0x78
   10386:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
   1038a:	f040 82dd 	bne.w	10948 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x36d0>
   1038e:	e7ff      	b.n	10390 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3118>
   10390:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   10394:	991e      	ldr	r1, [sp, #120]	; 0x78
   10396:	1842      	adds	r2, r0, r1
   10398:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1039a:	fa5f fc83 	uxtb.w	ip, r3
   1039e:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
   103a2:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
   103a6:	fbac e40e 	umull	lr, r4, ip, lr
   103aa:	08e4      	lsrs	r4, r4, #3
   103ac:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   103b0:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
   103b4:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 2] = bcd % 10;
   103b8:	8a02      	ldrh	r2, [r0, #16]
   103ba:	3202      	adds	r2, #2
   103bc:	f04f 0c00 	mov.w	ip, #0
   103c0:	f1bc 0f00 	cmp.w	ip, #0
   103c4:	921d      	str	r2, [sp, #116]	; 0x74
   103c6:	f040 82c9 	bne.w	1095c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x36e4>
   103ca:	e7ff      	b.n	103cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3154>
   103cc:	2000      	movs	r0, #0
   103ce:	991d      	ldr	r1, [sp, #116]	; 0x74
   103d0:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
   103d4:	f040 82ce 	bne.w	10974 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x36fc>
   103d8:	e7ff      	b.n	103da <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3162>
   103da:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   103de:	991d      	ldr	r1, [sp, #116]	; 0x74
   103e0:	1842      	adds	r2, r0, r1
   103e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   103e4:	fa5f fc83 	uxtb.w	ip, r3
   103e8:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
   103ec:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
   103f0:	fbac e40e 	umull	lr, r4, ip, lr
   103f4:	08e4      	lsrs	r4, r4, #3
   103f6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   103fa:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
   103fe:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
        match (
   10402:	e206      	b.n	10812 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
   10404:	2005      	movs	r0, #5
   10406:	f8cd 0bb0 	str.w	r0, [sp, #2992]	; 0xbb0
   1040a:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
   1040e:	f2c0 0001 	movt	r0, #1
   10412:	6801      	ldr	r1, [r0, #0]
   10414:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
   10418:	f006 fc24 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   1041c:	901c      	str	r0, [sp, #112]	; 0x70
   1041e:	e01f      	b.n	10460 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x31e8>
   10420:	2001      	movs	r0, #1
   10422:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
   10426:	e015      	b.n	10454 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x31dc>
   10428:	2000      	movs	r0, #0
   1042a:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
   1042e:	e011      	b.n	10454 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x31dc>
   10430:	2000      	movs	r0, #0
   10432:	f88d 0eb3 	strb.w	r0, [sp, #3763]	; 0xeb3
   10436:	f89d 1eb3 	ldrb.w	r1, [sp, #3763]	; 0xeb3
   1043a:	f644 206c 	movw	r0, #19052	; 0x4a6c
   1043e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10442:	f000 ffbe 	bl	113c2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
   10446:	f8cd 0eb4 	str.w	r0, [sp, #3764]	; 0xeb4
   1044a:	f8dd 0eb4 	ldr.w	r0, [sp, #3764]	; 0xeb4
   1044e:	f8cd 0bb8 	str.w	r0, [sp, #3000]	; 0xbb8
   10452:	e00a      	b.n	1046a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x31f2>
   10454:	f89d 0bb7 	ldrb.w	r0, [sp, #2999]	; 0xbb7
   10458:	07c0      	lsls	r0, r0, #31
   1045a:	2800      	cmp	r0, #0
   1045c:	d112      	bne.n	10484 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x320c>
   1045e:	e055      	b.n	1050c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3294>
   10460:	981c      	ldr	r0, [sp, #112]	; 0x70
   10462:	07c1      	lsls	r1, r0, #31
   10464:	2900      	cmp	r1, #0
   10466:	d1e3      	bne.n	10430 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x31b8>
   10468:	e7de      	b.n	10428 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x31b0>
   1046a:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
   1046e:	f60d 31b8 	addw	r1, sp, #3000	; 0xbb8
   10472:	f006 fbf7 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   10476:	901b      	str	r0, [sp, #108]	; 0x6c
   10478:	e7ff      	b.n	1047a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3202>
   1047a:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1047c:	07c1      	lsls	r1, r0, #31
   1047e:	2900      	cmp	r1, #0
   10480:	d1ce      	bne.n	10420 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x31a8>
   10482:	e7d1      	b.n	10428 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x31b0>
                trace!("[{:04x}] LD [I], Vx", self.pc);
   10484:	f64f 1088 	movw	r0, #63880	; 0xf988
   10488:	f2c0 0001 	movt	r0, #1
   1048c:	6801      	ldr	r1, [r0, #0]
   1048e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   10492:	f100 0212 	add.w	r2, r0, #18
   10496:	f8cd 2bdc 	str.w	r2, [sp, #3036]	; 0xbdc
   1049a:	f8dd 2bdc 	ldr.w	r2, [sp, #3036]	; 0xbdc
   1049e:	f8cd 2ca0 	str.w	r2, [sp, #3232]	; 0xca0
   104a2:	f249 1383 	movw	r3, #37251	; 0x9183
   104a6:	f2c0 0301 	movt	r3, #1
   104aa:	4610      	mov	r0, r2
   104ac:	911a      	str	r1, [sp, #104]	; 0x68
   104ae:	4619      	mov	r1, r3
   104b0:	f7fa f992 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
   104b4:	9019      	str	r0, [sp, #100]	; 0x64
   104b6:	9118      	str	r1, [sp, #96]	; 0x60
   104b8:	e7ff      	b.n	104ba <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3242>
   104ba:	9819      	ldr	r0, [sp, #100]	; 0x64
   104bc:	f8cd 0bd4 	str.w	r0, [sp, #3028]	; 0xbd4
   104c0:	9918      	ldr	r1, [sp, #96]	; 0x60
   104c2:	f8cd 1bd8 	str.w	r1, [sp, #3032]	; 0xbd8
   104c6:	f64f 02e8 	movw	r2, #63720	; 0xf8e8
   104ca:	f2c0 0201 	movt	r2, #1
   104ce:	6812      	ldr	r2, [r2, #0]
   104d0:	466b      	mov	r3, sp
   104d2:	f04f 0c01 	mov.w	ip, #1
   104d6:	f8c3 c008 	str.w	ip, [r3, #8]
   104da:	605a      	str	r2, [r3, #4]
   104dc:	f8c3 c000 	str.w	ip, [r3]
   104e0:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
   104e4:	2202      	movs	r2, #2
   104e6:	f60d 33d4 	addw	r3, sp, #3028	; 0xbd4
   104ea:	991a      	ldr	r1, [sp, #104]	; 0x68
   104ec:	f006 fa7f 	bl	169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   104f0:	e7ff      	b.n	104f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x327a>
   104f2:	f8dd 1bb0 	ldr.w	r1, [sp, #2992]	; 0xbb0
   104f6:	f64f 10a8 	movw	r0, #63912	; 0xf9a8
   104fa:	f2c0 0001 	movt	r0, #1
   104fe:	6802      	ldr	r2, [r0, #0]
   10500:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
   10504:	f001 ff8c 	bl	12420 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
   10508:	e7ff      	b.n	1050a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3292>
   1050a:	e7ff      	b.n	1050c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3294>
                let x = x as usize;
   1050c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
   10510:	f8cd 0ca4 	str.w	r0, [sp, #3236]	; 0xca4
                for i in 0..(x + 1) {
   10514:	1c41      	adds	r1, r0, #1
   10516:	460a      	mov	r2, r1
   10518:	4281      	cmp	r1, r0
   1051a:	9217      	str	r2, [sp, #92]	; 0x5c
   1051c:	f0c0 81c9 	bcc.w	108b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x363a>
   10520:	e7ff      	b.n	10522 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x32aa>
   10522:	2000      	movs	r0, #0
   10524:	f8cd 0be0 	str.w	r0, [sp, #3040]	; 0xbe0
   10528:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1052a:	f8cd 0be4 	str.w	r0, [sp, #3044]	; 0xbe4
   1052e:	f8dd 0be0 	ldr.w	r0, [sp, #3040]	; 0xbe0
   10532:	f8dd 1be4 	ldr.w	r1, [sp, #3044]	; 0xbe4
   10536:	f001 fcff 	bl	11f38 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
   1053a:	9016      	str	r0, [sp, #88]	; 0x58
   1053c:	9115      	str	r1, [sp, #84]	; 0x54
   1053e:	e7ff      	b.n	10540 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x32c8>
   10540:	9816      	ldr	r0, [sp, #88]	; 0x58
   10542:	f8cd 0be8 	str.w	r0, [sp, #3048]	; 0xbe8
   10546:	9915      	ldr	r1, [sp, #84]	; 0x54
   10548:	f8cd 1bec 	str.w	r1, [sp, #3052]	; 0xbec
   1054c:	e7ff      	b.n	1054e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x32d6>
   1054e:	f60d 30e8 	addw	r0, sp, #3048	; 0xbe8
   10552:	f001 fc66 	bl	11e22 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   10556:	f8cd 1bf4 	str.w	r1, [sp, #3060]	; 0xbf4
   1055a:	f8cd 0bf0 	str.w	r0, [sp, #3056]	; 0xbf0
   1055e:	e7ff      	b.n	10560 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x32e8>
   10560:	f8dd 0bf0 	ldr.w	r0, [sp, #3056]	; 0xbf0
   10564:	2800      	cmp	r0, #0
   10566:	d001      	beq.n	1056c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x32f4>
   10568:	e7ff      	b.n	1056a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x32f2>
   1056a:	e001      	b.n	10570 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x32f8>
        match (
   1056c:	e151      	b.n	10812 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
                for i in 0..(x + 1) {
   1056e:	defe      	udf	#254	; 0xfe
   10570:	f8dd 0bf4 	ldr.w	r0, [sp, #3060]	; 0xbf4
   10574:	f8cd 0ca8 	str.w	r0, [sp, #3240]	; 0xca8
   10578:	f8cd 0cac 	str.w	r0, [sp, #3244]	; 0xcac
   1057c:	f8cd 0cb0 	str.w	r0, [sp, #3248]	; 0xcb0
                    self.mem[self.i as usize + i] = self.v[i];
   10580:	280f      	cmp	r0, #15
   10582:	9014      	str	r0, [sp, #80]	; 0x50
   10584:	f200 81a1 	bhi.w	108ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3652>
   10588:	e7ff      	b.n	1058a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3312>
   1058a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   1058e:	9914      	ldr	r1, [sp, #80]	; 0x50
   10590:	1842      	adds	r2, r0, r1
   10592:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
   10596:	8a03      	ldrh	r3, [r0, #16]
   10598:	eb03 0c01 	add.w	ip, r3, r1
   1059c:	46e6      	mov	lr, ip
   1059e:	459c      	cmp	ip, r3
   105a0:	9213      	str	r2, [sp, #76]	; 0x4c
   105a2:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
   105a6:	f0c0 8199 	bcc.w	108dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3664>
   105aa:	e7ff      	b.n	105ac <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3334>
   105ac:	2000      	movs	r0, #0
   105ae:	9912      	ldr	r1, [sp, #72]	; 0x48
   105b0:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
   105b4:	f040 819e 	bne.w	108f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x367c>
   105b8:	e7ff      	b.n	105ba <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3342>
   105ba:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   105be:	9912      	ldr	r1, [sp, #72]	; 0x48
   105c0:	1842      	adds	r2, r0, r1
   105c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   105c4:	f882 3047 	strb.w	r3, [r2, #71]	; 0x47
                for i in 0..(x + 1) {
   105c8:	e7c1      	b.n	1054e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x32d6>
   105ca:	2005      	movs	r0, #5
   105cc:	f8cd 0bf8 	str.w	r0, [sp, #3064]	; 0xbf8
   105d0:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
   105d4:	f2c0 0001 	movt	r0, #1
   105d8:	6801      	ldr	r1, [r0, #0]
   105da:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
   105de:	f006 fb41 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   105e2:	9011      	str	r0, [sp, #68]	; 0x44
   105e4:	e01f      	b.n	10626 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x33ae>
   105e6:	2001      	movs	r0, #1
   105e8:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
   105ec:	e015      	b.n	1061a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x33a2>
   105ee:	2000      	movs	r0, #0
   105f0:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
   105f4:	e011      	b.n	1061a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x33a2>
   105f6:	2000      	movs	r0, #0
   105f8:	f88d 0ebb 	strb.w	r0, [sp, #3771]	; 0xebb
   105fc:	f89d 1ebb 	ldrb.w	r1, [sp, #3771]	; 0xebb
   10600:	f644 206c 	movw	r0, #19052	; 0x4a6c
   10604:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10608:	f000 fedb 	bl	113c2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
   1060c:	f8cd 0ebc 	str.w	r0, [sp, #3772]	; 0xebc
   10610:	f8dd 0ebc 	ldr.w	r0, [sp, #3772]	; 0xebc
   10614:	f8cd 0c00 	str.w	r0, [sp, #3072]	; 0xc00
   10618:	e00a      	b.n	10630 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x33b8>
   1061a:	f89d 0bff 	ldrb.w	r0, [sp, #3071]	; 0xbff
   1061e:	07c0      	lsls	r0, r0, #31
   10620:	2800      	cmp	r0, #0
   10622:	d112      	bne.n	1064a <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x33d2>
   10624:	e055      	b.n	106d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x345a>
   10626:	9811      	ldr	r0, [sp, #68]	; 0x44
   10628:	07c1      	lsls	r1, r0, #31
   1062a:	2900      	cmp	r1, #0
   1062c:	d1e3      	bne.n	105f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x337e>
   1062e:	e7de      	b.n	105ee <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3376>
   10630:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
   10634:	f50d 6140 	add.w	r1, sp, #3072	; 0xc00
   10638:	f006 fb14 	bl	16c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   1063c:	9010      	str	r0, [sp, #64]	; 0x40
   1063e:	e7ff      	b.n	10640 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x33c8>
   10640:	9810      	ldr	r0, [sp, #64]	; 0x40
   10642:	07c1      	lsls	r1, r0, #31
   10644:	2900      	cmp	r1, #0
   10646:	d1ce      	bne.n	105e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x336e>
   10648:	e7d1      	b.n	105ee <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3376>
                trace!("[{:04x}] LD Vx, [I]", self.pc);
   1064a:	f64f 00c4 	movw	r0, #63684	; 0xf8c4
   1064e:	f2c0 0001 	movt	r0, #1
   10652:	6801      	ldr	r1, [r0, #0]
   10654:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   10658:	f100 0212 	add.w	r2, r0, #18
   1065c:	f8cd 2c24 	str.w	r2, [sp, #3108]	; 0xc24
   10660:	f8dd 2c24 	ldr.w	r2, [sp, #3108]	; 0xc24
   10664:	f8cd 2c8c 	str.w	r2, [sp, #3212]	; 0xc8c
   10668:	f249 1383 	movw	r3, #37251	; 0x9183
   1066c:	f2c0 0301 	movt	r3, #1
   10670:	4610      	mov	r0, r2
   10672:	910f      	str	r1, [sp, #60]	; 0x3c
   10674:	4619      	mov	r1, r3
   10676:	f7fa f8af 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
   1067a:	900e      	str	r0, [sp, #56]	; 0x38
   1067c:	910d      	str	r1, [sp, #52]	; 0x34
   1067e:	e7ff      	b.n	10680 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3408>
   10680:	980e      	ldr	r0, [sp, #56]	; 0x38
   10682:	f8cd 0c1c 	str.w	r0, [sp, #3100]	; 0xc1c
   10686:	990d      	ldr	r1, [sp, #52]	; 0x34
   10688:	f8cd 1c20 	str.w	r1, [sp, #3104]	; 0xc20
   1068c:	f64f 02e8 	movw	r2, #63720	; 0xf8e8
   10690:	f2c0 0201 	movt	r2, #1
   10694:	6812      	ldr	r2, [r2, #0]
   10696:	466b      	mov	r3, sp
   10698:	f04f 0c01 	mov.w	ip, #1
   1069c:	f8c3 c008 	str.w	ip, [r3, #8]
   106a0:	605a      	str	r2, [r3, #4]
   106a2:	f8c3 c000 	str.w	ip, [r3]
   106a6:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
   106aa:	2202      	movs	r2, #2
   106ac:	f60d 431c 	addw	r3, sp, #3100	; 0xc1c
   106b0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   106b2:	f006 f99c 	bl	169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   106b6:	e7ff      	b.n	106b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3440>
   106b8:	f8dd 1bf8 	ldr.w	r1, [sp, #3064]	; 0xbf8
   106bc:	f64f 1028 	movw	r0, #63784	; 0xf928
   106c0:	f2c0 0001 	movt	r0, #1
   106c4:	6802      	ldr	r2, [r0, #0]
   106c6:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
   106ca:	f001 fea9 	bl	12420 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
   106ce:	e7ff      	b.n	106d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3458>
   106d0:	e7ff      	b.n	106d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x345a>
                let x = x as usize;
   106d2:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
   106d6:	f8cd 0c90 	str.w	r0, [sp, #3216]	; 0xc90
                for i in 0..(x + 1) {
   106da:	1c41      	adds	r1, r0, #1
   106dc:	460a      	mov	r2, r1
   106de:	4281      	cmp	r1, r0
   106e0:	920c      	str	r2, [sp, #48]	; 0x30
   106e2:	f0c0 80bb 	bcc.w	1085c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x35e4>
   106e6:	e7ff      	b.n	106e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3470>
   106e8:	2000      	movs	r0, #0
   106ea:	f8cd 0c28 	str.w	r0, [sp, #3112]	; 0xc28
   106ee:	980c      	ldr	r0, [sp, #48]	; 0x30
   106f0:	f8cd 0c2c 	str.w	r0, [sp, #3116]	; 0xc2c
   106f4:	f8dd 0c28 	ldr.w	r0, [sp, #3112]	; 0xc28
   106f8:	f8dd 1c2c 	ldr.w	r1, [sp, #3116]	; 0xc2c
   106fc:	f001 fc1c 	bl	11f38 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
   10700:	900b      	str	r0, [sp, #44]	; 0x2c
   10702:	910a      	str	r1, [sp, #40]	; 0x28
   10704:	e7ff      	b.n	10706 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x348e>
   10706:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10708:	f8cd 0c30 	str.w	r0, [sp, #3120]	; 0xc30
   1070c:	990a      	ldr	r1, [sp, #40]	; 0x28
   1070e:	f8cd 1c34 	str.w	r1, [sp, #3124]	; 0xc34
   10712:	e7ff      	b.n	10714 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x349c>
   10714:	f50d 6043 	add.w	r0, sp, #3120	; 0xc30
   10718:	f001 fb83 	bl	11e22 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   1071c:	f8cd 1c3c 	str.w	r1, [sp, #3132]	; 0xc3c
   10720:	f8cd 0c38 	str.w	r0, [sp, #3128]	; 0xc38
   10724:	e7ff      	b.n	10726 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x34ae>
   10726:	f8dd 0c38 	ldr.w	r0, [sp, #3128]	; 0xc38
   1072a:	2800      	cmp	r0, #0
   1072c:	d001      	beq.n	10732 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x34ba>
   1072e:	e7ff      	b.n	10730 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x34b8>
   10730:	e001      	b.n	10736 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x34be>
        match (
   10732:	e06e      	b.n	10812 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x359a>
                for i in 0..(x + 1) {
   10734:	defe      	udf	#254	; 0xfe
   10736:	f8dd 0c3c 	ldr.w	r0, [sp, #3132]	; 0xc3c
   1073a:	f8cd 0c94 	str.w	r0, [sp, #3220]	; 0xc94
   1073e:	f8cd 0c98 	str.w	r0, [sp, #3224]	; 0xc98
   10742:	f8cd 0c9c 	str.w	r0, [sp, #3228]	; 0xc9c
                    self.v[i] = self.mem[self.i as usize + i];
   10746:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   1074a:	8a0a      	ldrh	r2, [r1, #16]
   1074c:	1813      	adds	r3, r2, r0
   1074e:	469c      	mov	ip, r3
   10750:	4293      	cmp	r3, r2
   10752:	9009      	str	r0, [sp, #36]	; 0x24
   10754:	f8cd c020 	str.w	ip, [sp, #32]
   10758:	f0c0 808c 	bcc.w	10874 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x35fc>
   1075c:	e7ff      	b.n	1075e <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x34e6>
   1075e:	2000      	movs	r0, #0
   10760:	9908      	ldr	r1, [sp, #32]
   10762:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
   10766:	f040 8091 	bne.w	1088c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3614>
   1076a:	e7ff      	b.n	1076c <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x34f4>
   1076c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   10770:	9908      	ldr	r1, [sp, #32]
   10772:	1842      	adds	r2, r0, r1
   10774:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
   10778:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1077a:	2b0f      	cmp	r3, #15
   1077c:	9207      	str	r2, [sp, #28]
   1077e:	f200 808f 	bhi.w	108a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3628>
   10782:	e7ff      	b.n	10784 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x350c>
   10784:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   10788:	9909      	ldr	r1, [sp, #36]	; 0x24
   1078a:	1842      	adds	r2, r0, r1
   1078c:	9b07      	ldr	r3, [sp, #28]
   1078e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                for i in 0..(x + 1) {
   10792:	e7bf      	b.n	10714 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x349c>
   10794:	f249 1183 	movw	r1, #37251	; 0x9183
   10798:	f2c0 0101 	movt	r1, #1
   1079c:	f8dd 0430 	ldr.w	r0, [sp, #1072]	; 0x430
   107a0:	f7fa f81a 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
   107a4:	9006      	str	r0, [sp, #24]
   107a6:	9105      	str	r1, [sp, #20]
   107a8:	e7ff      	b.n	107aa <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x3532>
   107aa:	f8dd 042c 	ldr.w	r0, [sp, #1068]	; 0x42c
   107ae:	f8cd 0c58 	str.w	r0, [sp, #3160]	; 0xc58
   107b2:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
   107b6:	f8cd 1c5c 	str.w	r1, [sp, #3164]	; 0xc5c
   107ba:	9a06      	ldr	r2, [sp, #24]
   107bc:	f8cd 2c60 	str.w	r2, [sp, #3168]	; 0xc60
   107c0:	9b05      	ldr	r3, [sp, #20]
   107c2:	f8cd 3c64 	str.w	r3, [sp, #3172]	; 0xc64
   107c6:	f240 4c8c 	movw	ip, #1164	; 0x48c
   107ca:	f2c0 0c02 	movt	ip, #2
   107ce:	f8dc c000 	ldr.w	ip, [ip]
   107d2:	46ee      	mov	lr, sp
   107d4:	2402      	movs	r4, #2
   107d6:	f8ce 4008 	str.w	r4, [lr, #8]
   107da:	f8ce c004 	str.w	ip, [lr, #4]
   107de:	f8ce 4000 	str.w	r4, [lr]
   107e2:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
   107e6:	f60d 4358 	addw	r3, sp, #3160	; 0xc58
   107ea:	f8dd 1434 	ldr.w	r1, [sp, #1076]	; 0x434
   107ee:	4622      	mov	r2, r4
   107f0:	f006 f8fd 	bl	169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   107f4:	e7ff      	b.n	107f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x357e>
   107f6:	f240 40b0 	movw	r0, #1200	; 0x4b0
   107fa:	f2c0 0002 	movt	r0, #2
   107fe:	f007 f8ac 	bl	1795a <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   10802:	9004      	str	r0, [sp, #16]
   10804:	e7ff      	b.n	10806 <_ZN8libchip814Chip8$LT$T$GT$4eval17h5ee0c4ba54781756E+0x358e>
   10806:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
   1080a:	9904      	ldr	r1, [sp, #16]
   1080c:	f007 f8e2 	bl	179d4 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   10810:	defe      	udf	#254	; 0xfe
        }
    }
   10812:	f50d 6d6c 	add.w	sp, sp, #3776	; 0xec0
   10816:	bd70      	pop	{r4, r5, r6, pc}
        let h = self.mem[self.pc as usize] as u16;
   10818:	f64f 0050 	movw	r0, #63568	; 0xf850
   1081c:	f2c0 0001 	movt	r0, #1
   10820:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10824:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
   10828:	f007 f8b4 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1082c:	defe      	udf	#254	; 0xfe
        let l = self.mem[(self.pc + 1) as usize] as u16;
   1082e:	f64f 0070 	movw	r0, #63600	; 0xf870
   10832:	f2c0 0001 	movt	r0, #1
   10836:	f64f 0260 	movw	r2, #63584	; 0xf860
   1083a:	f2c0 0201 	movt	r2, #1
   1083e:	211c      	movs	r1, #28
   10840:	f007 f892 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10844:	defe      	udf	#254	; 0xfe
   10846:	f64f 008c 	movw	r0, #63628	; 0xf88c
   1084a:	f2c0 0001 	movt	r0, #1
   1084e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10852:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
   10856:	f007 f89d 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1085a:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
   1085c:	f64f 0070 	movw	r0, #63600	; 0xf870
   10860:	f2c0 0001 	movt	r0, #1
   10864:	f64f 122c 	movw	r2, #63788	; 0xf92c
   10868:	f2c0 0201 	movt	r2, #1
   1086c:	211c      	movs	r1, #28
   1086e:	f007 f87b 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10872:	defe      	udf	#254	; 0xfe
                    self.v[i] = self.mem[self.i as usize + i];
   10874:	f64f 0070 	movw	r0, #63600	; 0xf870
   10878:	f2c0 0001 	movt	r0, #1
   1087c:	f64f 123c 	movw	r2, #63804	; 0xf93c
   10880:	f2c0 0201 	movt	r2, #1
   10884:	211c      	movs	r1, #28
   10886:	f007 f86f 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1088a:	defe      	udf	#254	; 0xfe
   1088c:	f64f 104c 	movw	r0, #63820	; 0xf94c
   10890:	f2c0 0001 	movt	r0, #1
   10894:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10898:	9908      	ldr	r1, [sp, #32]
   1089a:	f007 f87b 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1089e:	defe      	udf	#254	; 0xfe
   108a0:	f64f 105c 	movw	r0, #63836	; 0xf95c
   108a4:	f2c0 0001 	movt	r0, #1
   108a8:	2210      	movs	r2, #16
   108aa:	9909      	ldr	r1, [sp, #36]	; 0x24
   108ac:	f007 f872 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   108b0:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
   108b2:	f64f 0070 	movw	r0, #63600	; 0xf870
   108b6:	f2c0 0001 	movt	r0, #1
   108ba:	f64f 12ac 	movw	r2, #63916	; 0xf9ac
   108be:	f2c0 0201 	movt	r2, #1
   108c2:	211c      	movs	r1, #28
   108c4:	f007 f850 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   108c8:	defe      	udf	#254	; 0xfe
                    self.mem[self.i as usize + i] = self.v[i];
   108ca:	f64f 10bc 	movw	r0, #63932	; 0xf9bc
   108ce:	f2c0 0001 	movt	r0, #1
   108d2:	2210      	movs	r2, #16
   108d4:	9914      	ldr	r1, [sp, #80]	; 0x50
   108d6:	f007 f85d 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   108da:	defe      	udf	#254	; 0xfe
   108dc:	f64f 0070 	movw	r0, #63600	; 0xf870
   108e0:	f2c0 0001 	movt	r0, #1
   108e4:	f64f 12cc 	movw	r2, #63948	; 0xf9cc
   108e8:	f2c0 0201 	movt	r2, #1
   108ec:	211c      	movs	r1, #28
   108ee:	f007 f83b 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   108f2:	defe      	udf	#254	; 0xfe
   108f4:	f64f 10dc 	movw	r0, #63964	; 0xf9dc
   108f8:	f2c0 0001 	movt	r0, #1
   108fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10900:	9912      	ldr	r1, [sp, #72]	; 0x48
   10902:	f007 f847 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10906:	defe      	udf	#254	; 0xfe
                let bcd = self.v[x];
   10908:	f64f 202c 	movw	r0, #64044	; 0xfa2c
   1090c:	f2c0 0001 	movt	r0, #1
   10910:	2210      	movs	r2, #16
   10912:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10916:	f007 f83d 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1091a:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize] = (bcd / 100) % 10;
   1091c:	f64f 203c 	movw	r0, #64060	; 0xfa3c
   10920:	f2c0 0001 	movt	r0, #1
   10924:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10928:	9920      	ldr	r1, [sp, #128]	; 0x80
   1092a:	f007 f833 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1092e:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
   10930:	f64f 0070 	movw	r0, #63600	; 0xf870
   10934:	f2c0 0001 	movt	r0, #1
   10938:	f64f 224c 	movw	r2, #64076	; 0xfa4c
   1093c:	f2c0 0201 	movt	r2, #1
   10940:	211c      	movs	r1, #28
   10942:	f007 f811 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10946:	defe      	udf	#254	; 0xfe
   10948:	f64f 205c 	movw	r0, #64092	; 0xfa5c
   1094c:	f2c0 0001 	movt	r0, #1
   10950:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10954:	991e      	ldr	r1, [sp, #120]	; 0x78
   10956:	f007 f81d 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1095a:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 2] = bcd % 10;
   1095c:	f64f 0070 	movw	r0, #63600	; 0xf870
   10960:	f2c0 0001 	movt	r0, #1
   10964:	f64f 226c 	movw	r2, #64108	; 0xfa6c
   10968:	f2c0 0201 	movt	r2, #1
   1096c:	211c      	movs	r1, #28
   1096e:	f006 fffb 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10972:	defe      	udf	#254	; 0xfe
   10974:	f64f 207c 	movw	r0, #64124	; 0xfa7c
   10978:	f2c0 0001 	movt	r0, #1
   1097c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10980:	991d      	ldr	r1, [sp, #116]	; 0x74
   10982:	f007 f807 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10986:	defe      	udf	#254	; 0xfe
                self.i = (self.v[x] * 5).into();
   10988:	f64f 20cc 	movw	r0, #64204	; 0xfacc
   1098c:	f2c0 0001 	movt	r0, #1
   10990:	2210      	movs	r2, #16
   10992:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10996:	f006 fffd 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1099a:	defe      	udf	#254	; 0xfe
   1099c:	f64f 20f0 	movw	r0, #64240	; 0xfaf0
   109a0:	f2c0 0001 	movt	r0, #1
   109a4:	f64f 22dc 	movw	r2, #64220	; 0xfadc
   109a8:	f2c0 0201 	movt	r2, #1
   109ac:	2121      	movs	r1, #33	; 0x21
   109ae:	f006 ffdb 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   109b2:	defe      	udf	#254	; 0xfe
                self.i = self.i.wrapping_add(self.v[x].into());
   109b4:	f64f 3050 	movw	r0, #64336	; 0xfb50
   109b8:	f2c0 0001 	movt	r0, #1
   109bc:	2210      	movs	r2, #16
   109be:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   109c2:	f006 ffe7 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   109c6:	defe      	udf	#254	; 0xfe
                self.st = self.v[x];
   109c8:	f64f 30a0 	movw	r0, #64416	; 0xfba0
   109cc:	f2c0 0001 	movt	r0, #1
   109d0:	2210      	movs	r2, #16
   109d2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   109d6:	f006 ffdd 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   109da:	defe      	udf	#254	; 0xfe
                self.dt = self.v[x];
   109dc:	f64f 30f0 	movw	r0, #64496	; 0xfbf0
   109e0:	f2c0 0001 	movt	r0, #1
   109e4:	2210      	movs	r2, #16
   109e6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   109ea:	f006 ffd3 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   109ee:	defe      	udf	#254	; 0xfe
                self.v[x] = self.waitkey();
   109f0:	f64f 4040 	movw	r0, #64576	; 0xfc40
   109f4:	f2c0 0001 	movt	r0, #1
   109f8:	2210      	movs	r2, #16
   109fa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   109fe:	f006 ffc9 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10a02:	defe      	udf	#254	; 0xfe
                self.v[x] = self.dt;
   10a04:	f64f 4090 	movw	r0, #64656	; 0xfc90
   10a08:	f2c0 0001 	movt	r0, #1
   10a0c:	2210      	movs	r2, #16
   10a0e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10a12:	f006 ffbf 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10a16:	defe      	udf	#254	; 0xfe
                if !self.hw.key(self.v[x]) {
   10a18:	f64f 40e0 	movw	r0, #64736	; 0xfce0
   10a1c:	f2c0 0001 	movt	r0, #1
   10a20:	2210      	movs	r2, #16
   10a22:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10a26:	f006 ffb5 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10a2a:	defe      	udf	#254	; 0xfe
                if self.hw.key(self.v[x]) {
   10a2c:	f64f 5024 	movw	r0, #64804	; 0xfd24
   10a30:	f2c0 0001 	movt	r0, #1
   10a34:	2210      	movs	r2, #16
   10a36:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10a3a:	f006 ffab 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10a3e:	defe      	udf	#254	; 0xfe
                let basex = self.v[x] as usize;
   10a40:	f64f 5078 	movw	r0, #64888	; 0xfd78
   10a44:	f2c0 0001 	movt	r0, #1
   10a48:	2210      	movs	r2, #16
   10a4a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10a4e:	f006 ffa1 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10a52:	defe      	udf	#254	; 0xfe
                let basey = self.v[y] as usize;
   10a54:	f64f 5088 	movw	r0, #64904	; 0xfd88
   10a58:	f2c0 0001 	movt	r0, #1
   10a5c:	2210      	movs	r2, #16
   10a5e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10a62:	f006 ff97 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10a66:	defe      	udf	#254	; 0xfe
                    let b = self.mem[self.i as usize + y];
   10a68:	f64f 0070 	movw	r0, #63600	; 0xf870
   10a6c:	f2c0 0001 	movt	r0, #1
   10a70:	f64f 5298 	movw	r2, #64920	; 0xfd98
   10a74:	f2c0 0201 	movt	r2, #1
   10a78:	211c      	movs	r1, #28
   10a7a:	f006 ff75 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10a7e:	defe      	udf	#254	; 0xfe
   10a80:	f64f 50a8 	movw	r0, #64936	; 0xfda8
   10a84:	f2c0 0001 	movt	r0, #1
   10a88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10a8c:	9967      	ldr	r1, [sp, #412]	; 0x19c
   10a8e:	f006 ff81 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10a92:	defe      	udf	#254	; 0xfe
                    let vramy = (y + basey) % h;
   10a94:	f64f 0070 	movw	r0, #63600	; 0xf870
   10a98:	f2c0 0001 	movt	r0, #1
   10a9c:	f64f 52b8 	movw	r2, #64952	; 0xfdb8
   10aa0:	f2c0 0201 	movt	r2, #1
   10aa4:	211c      	movs	r1, #28
   10aa6:	f006 ff5f 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10aaa:	defe      	udf	#254	; 0xfe
   10aac:	f64f 50d0 	movw	r0, #64976	; 0xfdd0
   10ab0:	f2c0 0001 	movt	r0, #1
   10ab4:	f64f 52b8 	movw	r2, #64952	; 0xfdb8
   10ab8:	f2c0 0201 	movt	r2, #1
   10abc:	2139      	movs	r1, #57	; 0x39
   10abe:	f006 ff53 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10ac2:	defe      	udf	#254	; 0xfe
                        let vramx = (x + basex) % w;
   10ac4:	f64f 0070 	movw	r0, #63600	; 0xf870
   10ac8:	f2c0 0001 	movt	r0, #1
   10acc:	f64f 620c 	movw	r2, #65036	; 0xfe0c
   10ad0:	f2c0 0201 	movt	r2, #1
   10ad4:	211c      	movs	r1, #28
   10ad6:	f006 ff47 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10ada:	defe      	udf	#254	; 0xfe
   10adc:	f64f 50d0 	movw	r0, #64976	; 0xfdd0
   10ae0:	f2c0 0001 	movt	r0, #1
   10ae4:	f64f 620c 	movw	r2, #65036	; 0xfe0c
   10ae8:	f2c0 0201 	movt	r2, #1
   10aec:	2139      	movs	r1, #57	; 0x39
   10aee:	f006 ff3b 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10af2:	defe      	udf	#254	; 0xfe
                        let src = (b & 1 << (7 - x)) > 0;
   10af4:	f64f 6030 	movw	r0, #65072	; 0xfe30
   10af8:	f2c0 0001 	movt	r0, #1
   10afc:	f64f 621c 	movw	r2, #65052	; 0xfe1c
   10b00:	f2c0 0201 	movt	r2, #1
   10b04:	2121      	movs	r1, #33	; 0x21
   10b06:	f006 ff2f 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10b0a:	defe      	udf	#254	; 0xfe
   10b0c:	f64f 6070 	movw	r0, #65136	; 0xfe70
   10b10:	f2c0 0001 	movt	r0, #1
   10b14:	f64f 6254 	movw	r2, #65108	; 0xfe54
   10b18:	f2c0 0201 	movt	r2, #1
   10b1c:	2123      	movs	r1, #35	; 0x23
   10b1e:	f006 ff23 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10b22:	defe      	udf	#254	; 0xfe
                self.v[x] = self.hw.rand() & kk;
   10b24:	f64f 60d4 	movw	r0, #65236	; 0xfed4
   10b28:	f2c0 0001 	movt	r0, #1
   10b2c:	2210      	movs	r2, #16
   10b2e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10b32:	f006 ff2f 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10b36:	defe      	udf	#254	; 0xfe
                if self.v[x] != self.v[y] {
   10b38:	f64f 70a4 	movw	r0, #65444	; 0xffa4
   10b3c:	f2c0 0001 	movt	r0, #1
   10b40:	2210      	movs	r2, #16
   10b42:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10b46:	f006 ff25 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10b4a:	defe      	udf	#254	; 0xfe
   10b4c:	f64f 70b4 	movw	r0, #65460	; 0xffb4
   10b50:	f2c0 0001 	movt	r0, #1
   10b54:	2210      	movs	r2, #16
   10b56:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10b5a:	f006 ff1b 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10b5e:	defe      	udf	#254	; 0xfe
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
   10b60:	f240 0004 	movw	r0, #4
   10b64:	f2c0 0002 	movt	r0, #2
   10b68:	2210      	movs	r2, #16
   10b6a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10b6e:	f006 ff11 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10b72:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shl(1);
   10b74:	f240 0014 	movw	r0, #20
   10b78:	f2c0 0002 	movt	r0, #2
   10b7c:	2210      	movs	r2, #16
   10b7e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10b82:	f006 ff07 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10b86:	defe      	udf	#254	; 0xfe
   10b88:	f240 0024 	movw	r0, #36	; 0x24
   10b8c:	f2c0 0002 	movt	r0, #2
   10b90:	2210      	movs	r2, #16
   10b92:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10b96:	f006 fefd 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10b9a:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
   10b9c:	f240 0078 	movw	r0, #120	; 0x78
   10ba0:	f2c0 0002 	movt	r0, #2
   10ba4:	2210      	movs	r2, #16
   10ba6:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10baa:	f006 fef3 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10bae:	defe      	udf	#254	; 0xfe
   10bb0:	f240 0088 	movw	r0, #136	; 0x88
   10bb4:	f2c0 0002 	movt	r0, #2
   10bb8:	2210      	movs	r2, #16
   10bba:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10bbe:	f006 fee9 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10bc2:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
   10bc4:	f240 0098 	movw	r0, #152	; 0x98
   10bc8:	f2c0 0002 	movt	r0, #2
   10bcc:	2210      	movs	r2, #16
   10bce:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10bd2:	f006 fedf 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10bd6:	defe      	udf	#254	; 0xfe
                self.v[0xf] = self.v[x] & 1;
   10bd8:	f240 00e8 	movw	r0, #232	; 0xe8
   10bdc:	f2c0 0002 	movt	r0, #2
   10be0:	2210      	movs	r2, #16
   10be2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10be6:	f006 fed5 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10bea:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shr(1);
   10bec:	f240 00f8 	movw	r0, #248	; 0xf8
   10bf0:	f2c0 0002 	movt	r0, #2
   10bf4:	2210      	movs	r2, #16
   10bf6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10bfa:	f006 fecb 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10bfe:	defe      	udf	#254	; 0xfe
   10c00:	f240 1008 	movw	r0, #264	; 0x108
   10c04:	f2c0 0002 	movt	r0, #2
   10c08:	2210      	movs	r2, #16
   10c0a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10c0e:	f006 fec1 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c12:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
   10c14:	f240 1058 	movw	r0, #344	; 0x158
   10c18:	f2c0 0002 	movt	r0, #2
   10c1c:	2210      	movs	r2, #16
   10c1e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10c22:	f006 feb7 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c26:	defe      	udf	#254	; 0xfe
   10c28:	f240 1068 	movw	r0, #360	; 0x168
   10c2c:	f2c0 0002 	movt	r0, #2
   10c30:	2210      	movs	r2, #16
   10c32:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10c36:	f006 fead 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c3a:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
   10c3c:	f240 1078 	movw	r0, #376	; 0x178
   10c40:	f2c0 0002 	movt	r0, #2
   10c44:	2210      	movs	r2, #16
   10c46:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10c4a:	f006 fea3 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c4e:	defe      	udf	#254	; 0xfe
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
   10c50:	f240 10c8 	movw	r0, #456	; 0x1c8
   10c54:	f2c0 0002 	movt	r0, #2
   10c58:	2210      	movs	r2, #16
   10c5a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10c5e:	f006 fe99 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c62:	defe      	udf	#254	; 0xfe
   10c64:	f240 10d8 	movw	r0, #472	; 0x1d8
   10c68:	f2c0 0002 	movt	r0, #2
   10c6c:	2210      	movs	r2, #16
   10c6e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10c72:	f006 fe8f 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c76:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
   10c78:	f240 10e8 	movw	r0, #488	; 0x1e8
   10c7c:	f2c0 0002 	movt	r0, #2
   10c80:	2210      	movs	r2, #16
   10c82:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10c86:	f006 fe85 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c8a:	defe      	udf	#254	; 0xfe
                self.v[x] ^= self.v[y];
   10c8c:	f240 2038 	movw	r0, #568	; 0x238
   10c90:	f2c0 0002 	movt	r0, #2
   10c94:	2210      	movs	r2, #16
   10c96:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10c9a:	f006 fe7b 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c9e:	defe      	udf	#254	; 0xfe
   10ca0:	f240 2048 	movw	r0, #584	; 0x248
   10ca4:	f2c0 0002 	movt	r0, #2
   10ca8:	2210      	movs	r2, #16
   10caa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10cae:	f006 fe71 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10cb2:	defe      	udf	#254	; 0xfe
                self.v[x] &= self.v[y];
   10cb4:	f240 2098 	movw	r0, #664	; 0x298
   10cb8:	f2c0 0002 	movt	r0, #2
   10cbc:	2210      	movs	r2, #16
   10cbe:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10cc2:	f006 fe67 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10cc6:	defe      	udf	#254	; 0xfe
   10cc8:	f240 20a8 	movw	r0, #680	; 0x2a8
   10ccc:	f2c0 0002 	movt	r0, #2
   10cd0:	2210      	movs	r2, #16
   10cd2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10cd6:	f006 fe5d 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10cda:	defe      	udf	#254	; 0xfe
                self.v[x] |= self.v[y];
   10cdc:	f240 20f8 	movw	r0, #760	; 0x2f8
   10ce0:	f2c0 0002 	movt	r0, #2
   10ce4:	2210      	movs	r2, #16
   10ce6:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10cea:	f006 fe53 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10cee:	defe      	udf	#254	; 0xfe
   10cf0:	f240 3008 	movw	r0, #776	; 0x308
   10cf4:	f2c0 0002 	movt	r0, #2
   10cf8:	2210      	movs	r2, #16
   10cfa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10cfe:	f006 fe49 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10d02:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[y];
   10d04:	f240 3058 	movw	r0, #856	; 0x358
   10d08:	f2c0 0002 	movt	r0, #2
   10d0c:	2210      	movs	r2, #16
   10d0e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10d12:	f006 fe3f 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10d16:	defe      	udf	#254	; 0xfe
   10d18:	f240 3068 	movw	r0, #872	; 0x368
   10d1c:	f2c0 0002 	movt	r0, #2
   10d20:	2210      	movs	r2, #16
   10d22:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10d26:	f006 fe35 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10d2a:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_add(kk);
   10d2c:	f240 30b8 	movw	r0, #952	; 0x3b8
   10d30:	f2c0 0002 	movt	r0, #2
   10d34:	2210      	movs	r2, #16
   10d36:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10d3a:	f006 fe2b 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10d3e:	defe      	udf	#254	; 0xfe
   10d40:	f240 30c8 	movw	r0, #968	; 0x3c8
   10d44:	f2c0 0002 	movt	r0, #2
   10d48:	2210      	movs	r2, #16
   10d4a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10d4e:	f006 fe21 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10d52:	defe      	udf	#254	; 0xfe
                self.v[x] = kk;
   10d54:	f240 4018 	movw	r0, #1048	; 0x418
   10d58:	f2c0 0002 	movt	r0, #2
   10d5c:	2210      	movs	r2, #16
   10d5e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10d62:	f006 fe17 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10d66:	defe      	udf	#254	; 0xfe
                if self.v[x] == self.v[y] {
   10d68:	f240 5000 	movw	r0, #1280	; 0x500
   10d6c:	f2c0 0002 	movt	r0, #2
   10d70:	2210      	movs	r2, #16
   10d72:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10d76:	f006 fe0d 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10d7a:	defe      	udf	#254	; 0xfe
   10d7c:	f240 5010 	movw	r0, #1296	; 0x510
   10d80:	f2c0 0002 	movt	r0, #2
   10d84:	2210      	movs	r2, #16
   10d86:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10d8a:	f006 fe03 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10d8e:	defe      	udf	#254	; 0xfe
                if self.v[x] != kk {
   10d90:	f240 5060 	movw	r0, #1376	; 0x560
   10d94:	f2c0 0002 	movt	r0, #2
   10d98:	2210      	movs	r2, #16
   10d9a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10d9e:	f006 fdf9 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10da2:	defe      	udf	#254	; 0xfe
                if self.v[x] == kk {
   10da4:	f240 50b0 	movw	r0, #1456	; 0x5b0
   10da8:	f2c0 0002 	movt	r0, #2
   10dac:	2210      	movs	r2, #16
   10dae:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10db2:	f006 fdef 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10db6:	defe      	udf	#254	; 0xfe

00010db8 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h8dd34ea84f1c7a05E>:
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
   10db8:	b580      	push	{r7, lr}
   10dba:	b086      	sub	sp, #24
   10dbc:	9104      	str	r1, [sp, #16]
   10dbe:	9205      	str	r2, [sp, #20]
   10dc0:	6809      	ldr	r1, [r1, #0]
   10dc2:	6809      	ldr	r1, [r1, #0]
   10dc4:	2300      	movs	r3, #0
   10dc6:	9301      	str	r3, [sp, #4]
   10dc8:	9102      	str	r1, [sp, #8]
   10dca:	9203      	str	r2, [sp, #12]
   10dcc:	9901      	ldr	r1, [sp, #4]
   10dce:	9a02      	ldr	r2, [sp, #8]
   10dd0:	9b03      	ldr	r3, [sp, #12]
   10dd2:	f000 fbba 	bl	1154a <_ZN4core4iter6traits8iterator8Iterator3map17h89e3c6c0231011ceE>
   10dd6:	e7ff      	b.n	10dd8 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h8dd34ea84f1c7a05E+0x20>
   10dd8:	b006      	add	sp, #24
   10dda:	bd80      	pop	{r7, pc}

00010ddc <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hd6b4984bbe637b42E>:
   10ddc:	b084      	sub	sp, #16
   10dde:	9002      	str	r0, [sp, #8]
   10de0:	9103      	str	r1, [sp, #12]
   10de2:	6800      	ldr	r0, [r0, #0]
   10de4:	9000      	str	r0, [sp, #0]
   10de6:	9101      	str	r1, [sp, #4]
   10de8:	9800      	ldr	r0, [sp, #0]
   10dea:	9901      	ldr	r1, [sp, #4]
   10dec:	b004      	add	sp, #16
   10dee:	4770      	bx	lr

00010df0 <_ZN8libchip814Chip8$LT$T$GT$4jump17h930b3c38e90d0056E>:
    fn jump(&mut self, pc: u16) {
   10df0:	b082      	sub	sp, #8
   10df2:	460a      	mov	r2, r1
   10df4:	9000      	str	r0, [sp, #0]
   10df6:	f8ad 1006 	strh.w	r1, [sp, #6]
        self.pc = pc;
   10dfa:	8241      	strh	r1, [r0, #18]
    }
   10dfc:	b002      	add	sp, #8
   10dfe:	4770      	bx	lr

00010e00 <_ZN8libchip814Chip8$LT$T$GT$4load17h2a4cfd313d02c69aE>:
    fn load(&mut self, rom: &[u8]) {
   10e00:	b580      	push	{r7, lr}
   10e02:	b08a      	sub	sp, #40	; 0x28
   10e04:	9105      	str	r1, [sp, #20]
   10e06:	9206      	str	r2, [sp, #24]
   10e08:	9009      	str	r0, [sp, #36]	; 0x24
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
   10e0a:	3047      	adds	r0, #71	; 0x47
   10e0c:	9905      	ldr	r1, [sp, #20]
   10e0e:	9a06      	ldr	r2, [sp, #24]
   10e10:	9004      	str	r0, [sp, #16]
   10e12:	4608      	mov	r0, r1
   10e14:	4611      	mov	r1, r2
   10e16:	f001 f868 	bl	11eea <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   10e1a:	9003      	str	r0, [sp, #12]
   10e1c:	e7ff      	b.n	10e1e <_ZN8libchip814Chip8$LT$T$GT$4load17h2a4cfd313d02c69aE+0x1e>
   10e1e:	9803      	ldr	r0, [sp, #12]
   10e20:	f500 7100 	add.w	r1, r0, #512	; 0x200
   10e24:	460a      	mov	r2, r1
   10e26:	4281      	cmp	r1, r0
   10e28:	9202      	str	r2, [sp, #8]
   10e2a:	d318      	bcc.n	10e5e <_ZN8libchip814Chip8$LT$T$GT$4load17h2a4cfd313d02c69aE+0x5e>
   10e2c:	e7ff      	b.n	10e2e <_ZN8libchip814Chip8$LT$T$GT$4load17h2a4cfd313d02c69aE+0x2e>
   10e2e:	f44f 7000 	mov.w	r0, #512	; 0x200
   10e32:	9007      	str	r0, [sp, #28]
   10e34:	9802      	ldr	r0, [sp, #8]
   10e36:	9008      	str	r0, [sp, #32]
   10e38:	9a07      	ldr	r2, [sp, #28]
   10e3a:	9b08      	ldr	r3, [sp, #32]
   10e3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   10e40:	9804      	ldr	r0, [sp, #16]
   10e42:	f005 ff2b 	bl	16c9c <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h7f385561cf81b0ffE>
   10e46:	9001      	str	r0, [sp, #4]
   10e48:	9100      	str	r1, [sp, #0]
   10e4a:	e7ff      	b.n	10e4c <_ZN8libchip814Chip8$LT$T$GT$4load17h2a4cfd313d02c69aE+0x4c>
   10e4c:	9a05      	ldr	r2, [sp, #20]
   10e4e:	9b06      	ldr	r3, [sp, #24]
   10e50:	9801      	ldr	r0, [sp, #4]
   10e52:	9900      	ldr	r1, [sp, #0]
   10e54:	f7f7 ff8b 	bl	8d6e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
   10e58:	e7ff      	b.n	10e5a <_ZN8libchip814Chip8$LT$T$GT$4load17h2a4cfd313d02c69aE+0x5a>
    }
   10e5a:	b00a      	add	sp, #40	; 0x28
   10e5c:	bd80      	pop	{r7, pc}
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
   10e5e:	f64f 0070 	movw	r0, #63600	; 0xf870
   10e62:	f2c0 0001 	movt	r0, #1
   10e66:	f240 720c 	movw	r2, #1804	; 0x70c
   10e6a:	f2c0 0202 	movt	r2, #2
   10e6e:	211c      	movs	r1, #28
   10e70:	f006 fd7a 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10e74:	defe      	udf	#254	; 0xfe

00010e76 <_ZN8libchip814Chip8$LT$T$GT$4next17h59db21f4d7eca91dE>:
    fn next(&mut self) {
   10e76:	b580      	push	{r7, lr}
   10e78:	b084      	sub	sp, #16
   10e7a:	9003      	str	r0, [sp, #12]
        self.jump(self.pc.wrapping_add(2));
   10e7c:	8a41      	ldrh	r1, [r0, #18]
   10e7e:	2202      	movs	r2, #2
   10e80:	9002      	str	r0, [sp, #8]
   10e82:	4608      	mov	r0, r1
   10e84:	4611      	mov	r1, r2
   10e86:	f005 feb3 	bl	16bf0 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E>
   10e8a:	9001      	str	r0, [sp, #4]
   10e8c:	e7ff      	b.n	10e8e <_ZN8libchip814Chip8$LT$T$GT$4next17h59db21f4d7eca91dE+0x18>
   10e8e:	9802      	ldr	r0, [sp, #8]
   10e90:	9901      	ldr	r1, [sp, #4]
   10e92:	f7ff ffad 	bl	10df0 <_ZN8libchip814Chip8$LT$T$GT$4jump17h930b3c38e90d0056E>
   10e96:	e7ff      	b.n	10e98 <_ZN8libchip814Chip8$LT$T$GT$4next17h59db21f4d7eca91dE+0x22>
    }
   10e98:	b004      	add	sp, #16
   10e9a:	bd80      	pop	{r7, pc}

00010e9c <_ZN8libchip814Chip8$LT$T$GT$4push17h7098654a82bc65c4E>:
    fn push(&mut self, item: u16) {
   10e9c:	b580      	push	{r7, lr}
   10e9e:	b086      	sub	sp, #24
   10ea0:	460a      	mov	r2, r1
   10ea2:	9004      	str	r0, [sp, #16]
   10ea4:	f8ad 1016 	strh.w	r1, [sp, #22]
        self.stack[self.sp as usize] = item;
   10ea8:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
   10eac:	460b      	mov	r3, r1
   10eae:	290f      	cmp	r1, #15
   10eb0:	9003      	str	r0, [sp, #12]
   10eb2:	9202      	str	r2, [sp, #8]
   10eb4:	9301      	str	r3, [sp, #4]
   10eb6:	d813      	bhi.n	10ee0 <_ZN8libchip814Chip8$LT$T$GT$4push17h7098654a82bc65c4E+0x44>
   10eb8:	e7ff      	b.n	10eba <_ZN8libchip814Chip8$LT$T$GT$4push17h7098654a82bc65c4E+0x1e>
   10eba:	9803      	ldr	r0, [sp, #12]
   10ebc:	9901      	ldr	r1, [sp, #4]
   10ebe:	eb00 0241 	add.w	r2, r0, r1, lsl #1
   10ec2:	9b02      	ldr	r3, [sp, #8]
   10ec4:	8293      	strh	r3, [r2, #20]
        self.sp = self.sp.wrapping_add(1);
   10ec6:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
   10eca:	2101      	movs	r1, #1
   10ecc:	f005 fdf3 	bl	16ab6 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE>
   10ed0:	9000      	str	r0, [sp, #0]
   10ed2:	e7ff      	b.n	10ed4 <_ZN8libchip814Chip8$LT$T$GT$4push17h7098654a82bc65c4E+0x38>
   10ed4:	9800      	ldr	r0, [sp, #0]
   10ed6:	9903      	ldr	r1, [sp, #12]
   10ed8:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
    }
   10edc:	b006      	add	sp, #24
   10ede:	bd80      	pop	{r7, pc}
        self.stack[self.sp as usize] = item;
   10ee0:	f240 701c 	movw	r0, #1820	; 0x71c
   10ee4:	f2c0 0002 	movt	r0, #2
   10ee8:	2210      	movs	r2, #16
   10eea:	9901      	ldr	r1, [sp, #4]
   10eec:	f006 fd52 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10ef0:	defe      	udf	#254	; 0xfe

00010ef2 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6aca973c4370155bE>:
    fn tick(&mut self) {
   10ef2:	b580      	push	{r7, lr}
   10ef4:	b084      	sub	sp, #16
   10ef6:	9003      	str	r0, [sp, #12]
        if self.dt > 0 {
   10ef8:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
   10efc:	2900      	cmp	r1, #0
   10efe:	9002      	str	r0, [sp, #8]
   10f00:	d00f      	beq.n	10f22 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6aca973c4370155bE+0x30>
   10f02:	e7ff      	b.n	10f04 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6aca973c4370155bE+0x12>
            self.dt -= 1;
   10f04:	9802      	ldr	r0, [sp, #8]
   10f06:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
   10f0a:	3901      	subs	r1, #1
   10f0c:	b2ca      	uxtb	r2, r1
   10f0e:	460b      	mov	r3, r1
   10f10:	428a      	cmp	r2, r1
   10f12:	9301      	str	r3, [sp, #4]
   10f14:	d129      	bne.n	10f6a <_ZN8libchip814Chip8$LT$T$GT$4tick17h6aca973c4370155bE+0x78>
   10f16:	e7ff      	b.n	10f18 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6aca973c4370155bE+0x26>
   10f18:	9801      	ldr	r0, [sp, #4]
   10f1a:	9902      	ldr	r1, [sp, #8]
   10f1c:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
        if self.dt > 0 {
   10f20:	e7ff      	b.n	10f22 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6aca973c4370155bE+0x30>
        if self.st > 0 {
   10f22:	9802      	ldr	r0, [sp, #8]
   10f24:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
   10f28:	2900      	cmp	r1, #0
   10f2a:	d01c      	beq.n	10f66 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6aca973c4370155bE+0x74>
   10f2c:	e7ff      	b.n	10f2e <_ZN8libchip814Chip8$LT$T$GT$4tick17h6aca973c4370155bE+0x3c>
            self.st -= 1;
   10f2e:	9802      	ldr	r0, [sp, #8]
   10f30:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
   10f34:	3901      	subs	r1, #1
   10f36:	b2ca      	uxtb	r2, r1
   10f38:	460b      	mov	r3, r1
   10f3a:	428a      	cmp	r2, r1
   10f3c:	9300      	str	r3, [sp, #0]
   10f3e:	d120      	bne.n	10f82 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6aca973c4370155bE+0x90>
   10f40:	e7ff      	b.n	10f42 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6aca973c4370155bE+0x50>
   10f42:	9800      	ldr	r0, [sp, #0]
   10f44:	9902      	ldr	r1, [sp, #8]
   10f46:	f881 0045 	strb.w	r0, [r1, #69]	; 0x45
            if self.st == 0 {
   10f4a:	f891 2045 	ldrb.w	r2, [r1, #69]	; 0x45
   10f4e:	2a00      	cmp	r2, #0
   10f50:	d108      	bne.n	10f64 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6aca973c4370155bE+0x72>
   10f52:	e7ff      	b.n	10f54 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6aca973c4370155bE+0x62>
   10f54:	f241 0048 	movw	r0, #4168	; 0x1048
                self.hw.beep();
   10f58:	9902      	ldr	r1, [sp, #8]
   10f5a:	4408      	add	r0, r1
   10f5c:	f7fb f8ef 	bl	c13e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17h886985941255a300E>
   10f60:	e7ff      	b.n	10f62 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6aca973c4370155bE+0x70>
            if self.st == 0 {
   10f62:	e7ff      	b.n	10f64 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6aca973c4370155bE+0x72>
        if self.st > 0 {
   10f64:	e7ff      	b.n	10f66 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6aca973c4370155bE+0x74>
    }
   10f66:	b004      	add	sp, #16
   10f68:	bd80      	pop	{r7, pc}
            self.dt -= 1;
   10f6a:	f64f 6030 	movw	r0, #65072	; 0xfe30
   10f6e:	f2c0 0001 	movt	r0, #1
   10f72:	f240 722c 	movw	r2, #1836	; 0x72c
   10f76:	f2c0 0202 	movt	r2, #2
   10f7a:	2121      	movs	r1, #33	; 0x21
   10f7c:	f006 fcf4 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10f80:	defe      	udf	#254	; 0xfe
            self.st -= 1;
   10f82:	f64f 6030 	movw	r0, #65072	; 0xfe30
   10f86:	f2c0 0001 	movt	r0, #1
   10f8a:	f240 723c 	movw	r2, #1852	; 0x73c
   10f8e:	f2c0 0202 	movt	r2, #2
   10f92:	2121      	movs	r1, #33	; 0x21
   10f94:	f006 fce8 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10f98:	defe      	udf	#254	; 0xfe

00010f9a <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE>:
    fn sched(&mut self) {
   10f9a:	b510      	push	{r4, lr}
   10f9c:	b098      	sub	sp, #96	; 0x60
   10f9e:	9015      	str	r0, [sp, #84]	; 0x54
   10fa0:	f241 0148 	movw	r1, #4168	; 0x1048
        if self.hw.sched() {
   10fa4:	4401      	add	r1, r0
   10fa6:	900b      	str	r0, [sp, #44]	; 0x2c
   10fa8:	4608      	mov	r0, r1
   10faa:	f7fb f8cc 	bl	c146 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h78119e4c51f6e604E>
   10fae:	900a      	str	r0, [sp, #40]	; 0x28
   10fb0:	e7ff      	b.n	10fb2 <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE+0x18>
   10fb2:	980a      	ldr	r0, [sp, #40]	; 0x28
   10fb4:	07c1      	lsls	r1, r0, #31
   10fb6:	2900      	cmp	r1, #0
   10fb8:	d005      	beq.n	10fc6 <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE+0x2c>
   10fba:	e7ff      	b.n	10fbc <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE+0x22>
            self.shutdown();
   10fbc:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10fbe:	f000 f90e 	bl	111de <_ZN8libchip814Chip8$LT$T$GT$8shutdown17h09e18e9d3e93ad4fE>
   10fc2:	e7ff      	b.n	10fc4 <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE+0x2a>
        if self.hw.sched() {
   10fc4:	e7ff      	b.n	10fc6 <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE+0x2c>
        if let Some(t) = self.time {
   10fc6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10fc8:	6801      	ldr	r1, [r0, #0]
   10fca:	2901      	cmp	r1, #1
   10fcc:	d009      	beq.n	10fe2 <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE+0x48>
   10fce:	e7ff      	b.n	10fd0 <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE+0x36>
   10fd0:	f241 0048 	movw	r0, #4168	; 0x1048
            self.time = Some(self.hw.clock());
   10fd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10fd6:	4408      	add	r0, r1
   10fd8:	f7fb f84f 	bl	c07a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hdb648e920abc572eE>
   10fdc:	9109      	str	r1, [sp, #36]	; 0x24
   10fde:	9008      	str	r0, [sp, #32]
   10fe0:	e046      	b.n	11070 <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE+0xd6>
        if let Some(t) = self.time {
   10fe2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10fe4:	6881      	ldr	r1, [r0, #8]
   10fe6:	68c2      	ldr	r2, [r0, #12]
   10fe8:	9217      	str	r2, [sp, #92]	; 0x5c
   10fea:	9116      	str	r1, [sp, #88]	; 0x58
   10fec:	f241 0348 	movw	r3, #4168	; 0x1048
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
   10ff0:	4418      	add	r0, r3
   10ff2:	9107      	str	r1, [sp, #28]
   10ff4:	9206      	str	r2, [sp, #24]
   10ff6:	f7fb f840 	bl	c07a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hdb648e920abc572eE>
   10ffa:	9105      	str	r1, [sp, #20]
   10ffc:	9004      	str	r0, [sp, #16]
   10ffe:	e7ff      	b.n	11000 <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE+0x66>
   11000:	9804      	ldr	r0, [sp, #16]
   11002:	9905      	ldr	r1, [sp, #20]
   11004:	9a07      	ldr	r2, [sp, #28]
   11006:	9b06      	ldr	r3, [sp, #24]
   11008:	f005 fe14 	bl	16c34 <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h91461b58eecc5a2aE>
   1100c:	9103      	str	r1, [sp, #12]
   1100e:	9002      	str	r0, [sp, #8]
   11010:	e7ff      	b.n	11012 <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE+0x78>
   11012:	f245 002b 	movw	r0, #20523	; 0x502b
   11016:	f2c0 00fe 	movt	r0, #254	; 0xfe
   1101a:	9902      	ldr	r1, [sp, #8]
   1101c:	1a08      	subs	r0, r1, r0
   1101e:	9a03      	ldr	r2, [sp, #12]
   11020:	f172 0300 	sbcs.w	r3, r2, #0
   11024:	d323      	bcc.n	1106e <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE+0xd4>
   11026:	e7ff      	b.n	11028 <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE+0x8e>
                self.tick();
   11028:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1102a:	f7ff ff62 	bl	10ef2 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6aca973c4370155bE>
   1102e:	e7ff      	b.n	11030 <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE+0x96>
   11030:	f241 0048 	movw	r0, #4168	; 0x1048
                self.time = Some(self.hw.clock());
   11034:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11036:	4408      	add	r0, r1
   11038:	f7fb f81f 	bl	c07a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hdb648e920abc572eE>
   1103c:	9101      	str	r1, [sp, #4]
   1103e:	9000      	str	r0, [sp, #0]
   11040:	e7ff      	b.n	11042 <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE+0xa8>
   11042:	9800      	ldr	r0, [sp, #0]
   11044:	900e      	str	r0, [sp, #56]	; 0x38
   11046:	9901      	ldr	r1, [sp, #4]
   11048:	910f      	str	r1, [sp, #60]	; 0x3c
   1104a:	2200      	movs	r2, #0
   1104c:	920d      	str	r2, [sp, #52]	; 0x34
   1104e:	2201      	movs	r2, #1
   11050:	920c      	str	r2, [sp, #48]	; 0x30
   11052:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11054:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11056:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   1105a:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
   1105e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   11060:	6063      	str	r3, [r4, #4]
   11062:	6022      	str	r2, [r4, #0]
   11064:	f8c4 e00c 	str.w	lr, [r4, #12]
   11068:	f8c4 c008 	str.w	ip, [r4, #8]
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
   1106c:	e7ff      	b.n	1106e <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE+0xd4>
        if let Some(t) = self.time {
   1106e:	e015      	b.n	1109c <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE+0x102>
            self.time = Some(self.hw.clock());
   11070:	9808      	ldr	r0, [sp, #32]
   11072:	9012      	str	r0, [sp, #72]	; 0x48
   11074:	9909      	ldr	r1, [sp, #36]	; 0x24
   11076:	9113      	str	r1, [sp, #76]	; 0x4c
   11078:	2200      	movs	r2, #0
   1107a:	9211      	str	r2, [sp, #68]	; 0x44
   1107c:	2201      	movs	r2, #1
   1107e:	9210      	str	r2, [sp, #64]	; 0x40
   11080:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11082:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11084:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   11088:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
   1108c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1108e:	6063      	str	r3, [r4, #4]
   11090:	6022      	str	r2, [r4, #0]
   11092:	f8c4 e00c 	str.w	lr, [r4, #12]
   11096:	f8c4 c008 	str.w	ip, [r4, #8]
        if let Some(t) = self.time {
   1109a:	e7ff      	b.n	1109c <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE+0x102>
    }
   1109c:	b018      	add	sp, #96	; 0x60
   1109e:	bd10      	pop	{r4, pc}

000110a0 <_ZN8libchip814Chip8$LT$T$GT$5setup17h6dafcb9be3b52c51E>:
    fn setup(&mut self) {
   110a0:	b580      	push	{r7, lr}
   110a2:	b088      	sub	sp, #32
   110a4:	9007      	str	r0, [sp, #28]
   110a6:	f44f 7100 	mov.w	r1, #512	; 0x200
        self.pc = ENTRY;
   110aa:	8241      	strh	r1, [r0, #18]
   110ac:	f241 0148 	movw	r1, #4168	; 0x1048
        self.hw.vram_setsize(DISPS);
   110b0:	4401      	add	r1, r0
   110b2:	f64f 1204 	movw	r2, #63748	; 0xf904
   110b6:	f2c0 0201 	movt	r2, #1
   110ba:	6813      	ldr	r3, [r2, #0]
   110bc:	6852      	ldr	r2, [r2, #4]
   110be:	9005      	str	r0, [sp, #20]
   110c0:	4608      	mov	r0, r1
   110c2:	4619      	mov	r1, r3
   110c4:	f7fa ff82 	bl	bfcc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h1c8b4e1e237b1d09E>
   110c8:	e7ff      	b.n	110ca <_ZN8libchip814Chip8$LT$T$GT$5setup17h6dafcb9be3b52c51E+0x2a>
        self.mem[..CHARBUF.len()].copy_from_slice(&CHARBUF);
   110ca:	9805      	ldr	r0, [sp, #20]
   110cc:	f100 0147 	add.w	r1, r0, #71	; 0x47
   110d0:	f240 70dc 	movw	r0, #2012	; 0x7dc
   110d4:	f2c0 0002 	movt	r0, #2
   110d8:	2250      	movs	r2, #80	; 0x50
   110da:	9104      	str	r1, [sp, #16]
   110dc:	4611      	mov	r1, r2
   110de:	f000 ff04 	bl	11eea <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   110e2:	9003      	str	r0, [sp, #12]
   110e4:	e7ff      	b.n	110e6 <_ZN8libchip814Chip8$LT$T$GT$5setup17h6dafcb9be3b52c51E+0x46>
   110e6:	9803      	ldr	r0, [sp, #12]
   110e8:	9006      	str	r0, [sp, #24]
   110ea:	9a06      	ldr	r2, [sp, #24]
   110ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   110f0:	9804      	ldr	r0, [sp, #16]
   110f2:	f7f7 ff39 	bl	8f68 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E>
   110f6:	9002      	str	r0, [sp, #8]
   110f8:	9101      	str	r1, [sp, #4]
   110fa:	e7ff      	b.n	110fc <_ZN8libchip814Chip8$LT$T$GT$5setup17h6dafcb9be3b52c51E+0x5c>
   110fc:	f240 72dc 	movw	r2, #2012	; 0x7dc
   11100:	f2c0 0202 	movt	r2, #2
   11104:	2350      	movs	r3, #80	; 0x50
   11106:	9802      	ldr	r0, [sp, #8]
   11108:	9901      	ldr	r1, [sp, #4]
   1110a:	f7f7 fe30 	bl	8d6e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
   1110e:	e7ff      	b.n	11110 <_ZN8libchip814Chip8$LT$T$GT$5setup17h6dafcb9be3b52c51E+0x70>
   11110:	f241 0047 	movw	r0, #4167	; 0x1047
   11114:	2101      	movs	r1, #1
        self.running = true;
   11116:	9a05      	ldr	r2, [sp, #20]
   11118:	5411      	strb	r1, [r2, r0]
    }
   1111a:	b008      	add	sp, #32
   1111c:	bd80      	pop	{r7, pc}

0001111e <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E>:
    fn waitkey(&mut self) -> u8 {
   1111e:	b580      	push	{r7, lr}
   11120:	b08c      	sub	sp, #48	; 0x30
   11122:	900a      	str	r0, [sp, #40]	; 0x28
        while self.running {
   11124:	9005      	str	r0, [sp, #20]
   11126:	e7ff      	b.n	11128 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E+0xa>
   11128:	f241 0047 	movw	r0, #4167	; 0x1047
   1112c:	9905      	ldr	r1, [sp, #20]
   1112e:	5c08      	ldrb	r0, [r1, r0]
   11130:	07c0      	lsls	r0, r0, #31
   11132:	2800      	cmp	r0, #0
   11134:	d104      	bne.n	11140 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E+0x22>
   11136:	e7ff      	b.n	11138 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E+0x1a>
   11138:	2020      	movs	r0, #32
        return b' ';
   1113a:	f88d 001b 	strb.w	r0, [sp, #27]
   1113e:	e04a      	b.n	111d6 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E+0xb8>
            self.sched();
   11140:	9805      	ldr	r0, [sp, #20]
   11142:	f7ff ff2a 	bl	10f9a <_ZN8libchip814Chip8$LT$T$GT$5sched17h538574997f48fcccE>
   11146:	e7ff      	b.n	11148 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E+0x2a>
   11148:	2000      	movs	r0, #0
            for i in 0..0xf {
   1114a:	f88d 001c 	strb.w	r0, [sp, #28]
   1114e:	200f      	movs	r0, #15
   11150:	f88d 001d 	strb.w	r0, [sp, #29]
   11154:	f89d 001c 	ldrb.w	r0, [sp, #28]
   11158:	f89d 101d 	ldrb.w	r1, [sp, #29]
   1115c:	f000 fa09 	bl	11572 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h179b2f35245cc0dcE>
   11160:	9004      	str	r0, [sp, #16]
   11162:	9103      	str	r1, [sp, #12]
   11164:	e7ff      	b.n	11166 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E+0x48>
   11166:	9804      	ldr	r0, [sp, #16]
   11168:	f88d 0020 	strb.w	r0, [sp, #32]
   1116c:	9903      	ldr	r1, [sp, #12]
   1116e:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
   11172:	e7ff      	b.n	11174 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E+0x56>
   11174:	a808      	add	r0, sp, #32
   11176:	f000 f98b 	bl	11490 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E>
   1117a:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
   1117e:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   11182:	e7ff      	b.n	11184 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E+0x66>
   11184:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
   11188:	07c1      	lsls	r1, r0, #31
   1118a:	2900      	cmp	r1, #0
   1118c:	d001      	beq.n	11192 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E+0x74>
   1118e:	e7ff      	b.n	11190 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E+0x72>
   11190:	e001      	b.n	11196 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E+0x78>
        while self.running {
   11192:	e7c9      	b.n	11128 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E+0xa>
            for i in 0..0xf {
   11194:	defe      	udf	#254	; 0xfe
   11196:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
   1119a:	4601      	mov	r1, r0
   1119c:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
   111a0:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
   111a4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   111a8:	f241 0248 	movw	r2, #4168	; 0x1048
                if self.hw.key(i) {
   111ac:	9b05      	ldr	r3, [sp, #20]
   111ae:	441a      	add	r2, r3
   111b0:	9002      	str	r0, [sp, #8]
   111b2:	4610      	mov	r0, r2
   111b4:	9a02      	ldr	r2, [sp, #8]
   111b6:	9101      	str	r1, [sp, #4]
   111b8:	4611      	mov	r1, r2
   111ba:	f7fa fd98 	bl	bcee <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17h2b52e92623e4ee1eE>
   111be:	9000      	str	r0, [sp, #0]
   111c0:	e7ff      	b.n	111c2 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E+0xa4>
   111c2:	9800      	ldr	r0, [sp, #0]
   111c4:	07c1      	lsls	r1, r0, #31
   111c6:	2900      	cmp	r1, #0
   111c8:	d101      	bne.n	111ce <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E+0xb0>
   111ca:	e7ff      	b.n	111cc <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E+0xae>
            for i in 0..0xf {
   111cc:	e7d2      	b.n	11174 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E+0x56>
                    return i;
   111ce:	9801      	ldr	r0, [sp, #4]
   111d0:	f88d 001b 	strb.w	r0, [sp, #27]
   111d4:	e7ff      	b.n	111d6 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h3bd01c53ffedf652E+0xb8>
    }
   111d6:	f89d 001b 	ldrb.w	r0, [sp, #27]
   111da:	b00c      	add	sp, #48	; 0x30
   111dc:	bd80      	pop	{r7, pc}

000111de <_ZN8libchip814Chip8$LT$T$GT$8shutdown17h09e18e9d3e93ad4fE>:
    fn shutdown(&mut self) {
   111de:	b081      	sub	sp, #4
   111e0:	9000      	str	r0, [sp, #0]
   111e2:	f241 0147 	movw	r1, #4167	; 0x1047
   111e6:	2200      	movs	r2, #0
        self.running = false;
   111e8:	5442      	strb	r2, [r0, r1]
    }
   111ea:	b001      	add	sp, #4
   111ec:	4770      	bx	lr

000111ee <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h8b365b2b37e7ae5bE>:
   111ee:	b580      	push	{r7, lr}
   111f0:	b082      	sub	sp, #8
   111f2:	9101      	str	r1, [sp, #4]
   111f4:	f000 f803 	bl	111fe <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E>
   111f8:	e7ff      	b.n	111fa <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h8b365b2b37e7ae5bE+0xc>
   111fa:	b002      	add	sp, #8
   111fc:	bd80      	pop	{r7, pc}

000111fe <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E>:
   111fe:	b580      	push	{r7, lr}
   11200:	b0a0      	sub	sp, #128	; 0x80
   11202:	911c      	str	r1, [sp, #112]	; 0x70
   11204:	9103      	str	r1, [sp, #12]
   11206:	9002      	str	r0, [sp, #8]
   11208:	e7ff      	b.n	1120a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0xc>
   1120a:	9803      	ldr	r0, [sp, #12]
   1120c:	68c1      	ldr	r1, [r0, #12]
   1120e:	2901      	cmp	r1, #1
   11210:	d11e      	bne.n	11250 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0x52>
   11212:	e7ff      	b.n	11214 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0x16>
   11214:	9803      	ldr	r0, [sp, #12]
   11216:	f100 0110 	add.w	r1, r0, #16
   1121a:	911e      	str	r1, [sp, #120]	; 0x78
   1121c:	a804      	add	r0, sp, #16
   1121e:	f000 f90b 	bl	11438 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h84f26bbc979819d7E>
   11222:	e7ff      	b.n	11224 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0x26>
   11224:	9804      	ldr	r0, [sp, #16]
   11226:	2801      	cmp	r0, #1
   11228:	d001      	beq.n	1122e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0x30>
   1122a:	e7ff      	b.n	1122c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0x2e>
   1122c:	e00f      	b.n	1124e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0x50>
   1122e:	9804      	ldr	r0, [sp, #16]
   11230:	9905      	ldr	r1, [sp, #20]
   11232:	9a06      	ldr	r2, [sp, #24]
   11234:	9209      	str	r2, [sp, #36]	; 0x24
   11236:	9108      	str	r1, [sp, #32]
   11238:	9007      	str	r0, [sp, #28]
   1123a:	9807      	ldr	r0, [sp, #28]
   1123c:	9908      	ldr	r1, [sp, #32]
   1123e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11240:	9b02      	ldr	r3, [sp, #8]
   11242:	609a      	str	r2, [r3, #8]
   11244:	6059      	str	r1, [r3, #4]
   11246:	6018      	str	r0, [r3, #0]
   11248:	e7ff      	b.n	1124a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0x4c>
   1124a:	b020      	add	sp, #128	; 0x80
   1124c:	bd80      	pop	{r7, pc}
   1124e:	e7ff      	b.n	11250 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0x52>
   11250:	a80a      	add	r0, sp, #40	; 0x28
   11252:	9903      	ldr	r1, [sp, #12]
   11254:	f000 f906 	bl	11464 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha72d6fa0f65ae98fE>
   11258:	e7ff      	b.n	1125a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0x5c>
   1125a:	980a      	ldr	r0, [sp, #40]	; 0x28
   1125c:	2800      	cmp	r0, #0
   1125e:	d012      	beq.n	11286 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0x88>
   11260:	e7ff      	b.n	11262 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0x64>
   11262:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11264:	990c      	ldr	r1, [sp, #48]	; 0x30
   11266:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11268:	9211      	str	r2, [sp, #68]	; 0x44
   1126a:	9110      	str	r1, [sp, #64]	; 0x40
   1126c:	900f      	str	r0, [sp, #60]	; 0x3c
   1126e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11270:	9910      	ldr	r1, [sp, #64]	; 0x40
   11272:	9a11      	ldr	r2, [sp, #68]	; 0x44
   11274:	921b      	str	r2, [sp, #108]	; 0x6c
   11276:	911a      	str	r1, [sp, #104]	; 0x68
   11278:	9019      	str	r0, [sp, #100]	; 0x64
   1127a:	a816      	add	r0, sp, #88	; 0x58
   1127c:	a919      	add	r1, sp, #100	; 0x64
   1127e:	f000 f8d4 	bl	1142a <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha7bddc00a7b74e11E>
   11282:	e028      	b.n	112d6 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0xd8>
   11284:	defe      	udf	#254	; 0xfe
   11286:	9803      	ldr	r0, [sp, #12]
   11288:	301c      	adds	r0, #28
   1128a:	f7fb fd6d 	bl	cd68 <_ZN4core6option15Option$LT$T$GT$6as_mut17h8929fdf00293b903E>
   1128e:	9001      	str	r0, [sp, #4]
   11290:	e7ff      	b.n	11292 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0x94>
   11292:	9801      	ldr	r0, [sp, #4]
   11294:	f7fb fda2 	bl	cddc <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5e3b0b54b76961bcE>
   11298:	900e      	str	r0, [sp, #56]	; 0x38
   1129a:	e7ff      	b.n	1129c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0x9e>
   1129c:	980e      	ldr	r0, [sp, #56]	; 0x38
   1129e:	fab0 f180 	clz	r1, r0
   112a2:	0949      	lsrs	r1, r1, #5
   112a4:	2800      	cmp	r0, #0
   112a6:	d101      	bne.n	112ac <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0xae>
   112a8:	e7ff      	b.n	112aa <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0xac>
   112aa:	e009      	b.n	112c0 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0xc2>
   112ac:	980e      	ldr	r0, [sp, #56]	; 0x38
   112ae:	901f      	str	r0, [sp, #124]	; 0x7c
   112b0:	9902      	ldr	r1, [sp, #8]
   112b2:	9000      	str	r0, [sp, #0]
   112b4:	4608      	mov	r0, r1
   112b6:	9900      	ldr	r1, [sp, #0]
   112b8:	f000 f8be 	bl	11438 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h84f26bbc979819d7E>
   112bc:	e00a      	b.n	112d4 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0xd6>
   112be:	defe      	udf	#254	; 0xfe
   112c0:	f003 f99c 	bl	145fc <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>
   112c4:	e7ff      	b.n	112c6 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0xc8>
   112c6:	9802      	ldr	r0, [sp, #8]
   112c8:	f7fb fd83 	bl	cdd2 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h430caac74862e039E>
   112cc:	e7ff      	b.n	112ce <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0xd0>
   112ce:	e7ff      	b.n	112d0 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0xd2>
   112d0:	e7ff      	b.n	112d2 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0xd4>
   112d2:	e7ba      	b.n	1124a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0x4c>
   112d4:	e7fc      	b.n	112d0 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0xd2>
   112d6:	9816      	ldr	r0, [sp, #88]	; 0x58
   112d8:	9917      	ldr	r1, [sp, #92]	; 0x5c
   112da:	9a18      	ldr	r2, [sp, #96]	; 0x60
   112dc:	9215      	str	r2, [sp, #84]	; 0x54
   112de:	9114      	str	r1, [sp, #80]	; 0x50
   112e0:	9013      	str	r0, [sp, #76]	; 0x4c
   112e2:	2001      	movs	r0, #1
   112e4:	9012      	str	r0, [sp, #72]	; 0x48
   112e6:	e7ff      	b.n	112e8 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0xea>
   112e8:	9812      	ldr	r0, [sp, #72]	; 0x48
   112ea:	9913      	ldr	r1, [sp, #76]	; 0x4c
   112ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
   112ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
   112f0:	f8dd c00c 	ldr.w	ip, [sp, #12]
   112f4:	f8cc 3018 	str.w	r3, [ip, #24]
   112f8:	f8cc 2014 	str.w	r2, [ip, #20]
   112fc:	f8cc 1010 	str.w	r1, [ip, #16]
   11300:	f8cc 000c 	str.w	r0, [ip, #12]
   11304:	980a      	ldr	r0, [sp, #40]	; 0x28
   11306:	2801      	cmp	r0, #1
   11308:	d101      	bne.n	1130e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0x110>
   1130a:	e7ff      	b.n	1130c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0x10e>
   1130c:	e77d      	b.n	1120a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0xc>
   1130e:	e7fd      	b.n	1130c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h970152277dab0d53E+0x10e>

00011310 <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h2c4566debb9a5deaE>:
   11310:	b5b0      	push	{r4, r5, r7, lr}
   11312:	b090      	sub	sp, #64	; 0x40
   11314:	680a      	ldr	r2, [r1, #0]
   11316:	684b      	ldr	r3, [r1, #4]
   11318:	6889      	ldr	r1, [r1, #8]
   1131a:	910f      	str	r1, [sp, #60]	; 0x3c
   1131c:	930e      	str	r3, [sp, #56]	; 0x38
   1131e:	920d      	str	r2, [sp, #52]	; 0x34
   11320:	a902      	add	r1, sp, #8
   11322:	aa0d      	add	r2, sp, #52	; 0x34
   11324:	9001      	str	r0, [sp, #4]
   11326:	4608      	mov	r0, r1
   11328:	4611      	mov	r1, r2
   1132a:	f000 f80d 	bl	11348 <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h3e3a45a546031266E>
   1132e:	e7ff      	b.n	11330 <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h2c4566debb9a5deaE+0x20>
   11330:	a802      	add	r0, sp, #8
   11332:	9901      	ldr	r1, [sp, #4]
   11334:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
   11338:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
   1133c:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
   11340:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
   11344:	b010      	add	sp, #64	; 0x40
   11346:	bdb0      	pop	{r4, r5, r7, pc}

00011348 <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h3e3a45a546031266E>:
   11348:	b08b      	sub	sp, #44	; 0x2c
   1134a:	680a      	ldr	r2, [r1, #0]
   1134c:	684b      	ldr	r3, [r1, #4]
   1134e:	6889      	ldr	r1, [r1, #8]
   11350:	9102      	str	r1, [sp, #8]
   11352:	9301      	str	r3, [sp, #4]
   11354:	9200      	str	r2, [sp, #0]
   11356:	2100      	movs	r1, #0
   11358:	9103      	str	r1, [sp, #12]
   1135a:	9107      	str	r1, [sp, #28]
   1135c:	9900      	ldr	r1, [sp, #0]
   1135e:	9a01      	ldr	r2, [sp, #4]
   11360:	9b02      	ldr	r3, [sp, #8]
   11362:	6083      	str	r3, [r0, #8]
   11364:	6042      	str	r2, [r0, #4]
   11366:	6001      	str	r1, [r0, #0]
   11368:	9903      	ldr	r1, [sp, #12]
   1136a:	9a04      	ldr	r2, [sp, #16]
   1136c:	9b05      	ldr	r3, [sp, #20]
   1136e:	f8dd c018 	ldr.w	ip, [sp, #24]
   11372:	f8c0 c018 	str.w	ip, [r0, #24]
   11376:	6143      	str	r3, [r0, #20]
   11378:	6102      	str	r2, [r0, #16]
   1137a:	60c1      	str	r1, [r0, #12]
   1137c:	9907      	ldr	r1, [sp, #28]
   1137e:	9a08      	ldr	r2, [sp, #32]
   11380:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11382:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   11386:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
   1138a:	6243      	str	r3, [r0, #36]	; 0x24
   1138c:	6202      	str	r2, [r0, #32]
   1138e:	61c1      	str	r1, [r0, #28]
   11390:	b00b      	add	sp, #44	; 0x2c
   11392:	4770      	bx	lr

00011394 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h3b61728407886f85E>:
   11394:	b5b0      	push	{r4, r5, r7, lr}
   11396:	e8b1 501c 	ldmia.w	r1!, {r2, r3, r4, ip, lr}
   1139a:	e8a0 501c 	stmia.w	r0!, {r2, r3, r4, ip, lr}
   1139e:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   113a2:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
   113a6:	bdb0      	pop	{r4, r5, r7, pc}

000113a8 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E>:
   113a8:	b580      	push	{r7, lr}
   113aa:	b084      	sub	sp, #16
   113ac:	4601      	mov	r1, r0
   113ae:	f88d 000f 	strb.w	r0, [sp, #15]
   113b2:	9102      	str	r1, [sp, #8]
   113b4:	f005 fc62 	bl	16c7c <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h32b550ec8df70192E>
   113b8:	9001      	str	r0, [sp, #4]
   113ba:	e7ff      	b.n	113bc <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E+0x14>
   113bc:	9801      	ldr	r0, [sp, #4]
   113be:	b004      	add	sp, #16
   113c0:	bd80      	pop	{r7, pc}

000113c2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>:
   113c2:	b580      	push	{r7, lr}
   113c4:	b086      	sub	sp, #24
   113c6:	460a      	mov	r2, r1
   113c8:	9004      	str	r0, [sp, #16]
   113ca:	f88d 1017 	strb.w	r1, [sp, #23]
   113ce:	9203      	str	r2, [sp, #12]
   113d0:	f000 fe0f 	bl	11ff2 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
   113d4:	9002      	str	r0, [sp, #8]
   113d6:	e7ff      	b.n	113d8 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E+0x16>
   113d8:	9802      	ldr	r0, [sp, #8]
   113da:	9903      	ldr	r1, [sp, #12]
   113dc:	f000 fe22 	bl	12024 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
   113e0:	9001      	str	r0, [sp, #4]
   113e2:	e7ff      	b.n	113e4 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E+0x22>
   113e4:	9801      	ldr	r0, [sp, #4]
   113e6:	b006      	add	sp, #24
   113e8:	bd80      	pop	{r7, pc}

000113ea <_ZN4core4iter6traits8iterator8Iterator7flatten17hdd08c3a3cf16397aE>:
   113ea:	b580      	push	{r7, lr}
   113ec:	b084      	sub	sp, #16
   113ee:	680a      	ldr	r2, [r1, #0]
   113f0:	684b      	ldr	r3, [r1, #4]
   113f2:	6889      	ldr	r1, [r1, #8]
   113f4:	9103      	str	r1, [sp, #12]
   113f6:	9302      	str	r3, [sp, #8]
   113f8:	9201      	str	r2, [sp, #4]
   113fa:	a901      	add	r1, sp, #4
   113fc:	f7ff ff88 	bl	11310 <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h2c4566debb9a5deaE>
   11400:	e7ff      	b.n	11402 <_ZN4core4iter6traits8iterator8Iterator7flatten17hdd08c3a3cf16397aE+0x18>
   11402:	b004      	add	sp, #16
   11404:	bd80      	pop	{r7, pc}

00011406 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h1794408f6a80b915E>:
   11406:	b083      	sub	sp, #12
   11408:	9100      	str	r1, [sp, #0]
   1140a:	9201      	str	r2, [sp, #4]
   1140c:	9302      	str	r3, [sp, #8]
   1140e:	6001      	str	r1, [r0, #0]
   11410:	6042      	str	r2, [r0, #4]
   11412:	6083      	str	r3, [r0, #8]
   11414:	b003      	add	sp, #12
   11416:	4770      	bx	lr

00011418 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h6a385a1eb638dc34E>:
   11418:	b083      	sub	sp, #12
   1141a:	9100      	str	r1, [sp, #0]
   1141c:	9201      	str	r2, [sp, #4]
   1141e:	9302      	str	r3, [sp, #8]
   11420:	6001      	str	r1, [r0, #0]
   11422:	6042      	str	r2, [r0, #4]
   11424:	6083      	str	r3, [r0, #8]
   11426:	b003      	add	sp, #12
   11428:	4770      	bx	lr

0001142a <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha7bddc00a7b74e11E>:
   1142a:	680a      	ldr	r2, [r1, #0]
   1142c:	684b      	ldr	r3, [r1, #4]
   1142e:	6889      	ldr	r1, [r1, #8]
   11430:	6081      	str	r1, [r0, #8]
   11432:	6043      	str	r3, [r0, #4]
   11434:	6002      	str	r2, [r0, #0]
   11436:	4770      	bx	lr

00011438 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h84f26bbc979819d7E>:
   11438:	b580      	push	{r7, lr}
   1143a:	b086      	sub	sp, #24
   1143c:	9105      	str	r1, [sp, #20]
   1143e:	9004      	str	r0, [sp, #16]
   11440:	4608      	mov	r0, r1
   11442:	9103      	str	r1, [sp, #12]
   11444:	f000 fced 	bl	11e22 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   11448:	9002      	str	r0, [sp, #8]
   1144a:	9101      	str	r1, [sp, #4]
   1144c:	e7ff      	b.n	1144e <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h84f26bbc979819d7E+0x16>
   1144e:	9803      	ldr	r0, [sp, #12]
   11450:	f100 0308 	add.w	r3, r0, #8
   11454:	9804      	ldr	r0, [sp, #16]
   11456:	9902      	ldr	r1, [sp, #8]
   11458:	9a01      	ldr	r2, [sp, #4]
   1145a:	f7fb fbac 	bl	cbb6 <_ZN4core6option15Option$LT$T$GT$3map17h652d7b279505b210E>
   1145e:	e7ff      	b.n	11460 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h84f26bbc979819d7E+0x28>
   11460:	b006      	add	sp, #24
   11462:	bd80      	pop	{r7, pc}

00011464 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha72d6fa0f65ae98fE>:
   11464:	b580      	push	{r7, lr}
   11466:	b086      	sub	sp, #24
   11468:	9105      	str	r1, [sp, #20]
   1146a:	9004      	str	r0, [sp, #16]
   1146c:	4608      	mov	r0, r1
   1146e:	9103      	str	r1, [sp, #12]
   11470:	f000 fcd7 	bl	11e22 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   11474:	9002      	str	r0, [sp, #8]
   11476:	9101      	str	r1, [sp, #4]
   11478:	e7ff      	b.n	1147a <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha72d6fa0f65ae98fE+0x16>
   1147a:	9803      	ldr	r0, [sp, #12]
   1147c:	f100 0308 	add.w	r3, r0, #8
   11480:	9804      	ldr	r0, [sp, #16]
   11482:	9902      	ldr	r1, [sp, #8]
   11484:	9a01      	ldr	r2, [sp, #4]
   11486:	f7fb fbe3 	bl	cc50 <_ZN4core6option15Option$LT$T$GT$3map17hc87f57a0a2ce024aE>
   1148a:	e7ff      	b.n	1148c <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha72d6fa0f65ae98fE+0x28>
   1148c:	b006      	add	sp, #24
   1148e:	bd80      	pop	{r7, pc}

00011490 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E>:
   11490:	b580      	push	{r7, lr}
   11492:	b086      	sub	sp, #24
   11494:	9005      	str	r0, [sp, #20]
   11496:	2100      	movs	r1, #0
   11498:	f88d 1013 	strb.w	r1, [sp, #19]
   1149c:	1c41      	adds	r1, r0, #1
   1149e:	9002      	str	r0, [sp, #8]
   114a0:	f005 fc11 	bl	16cc6 <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17hc283e26c72ff63bbE>
   114a4:	9001      	str	r0, [sp, #4]
   114a6:	e7ff      	b.n	114a8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x18>
   114a8:	9801      	ldr	r0, [sp, #4]
   114aa:	07c1      	lsls	r1, r0, #31
   114ac:	2900      	cmp	r1, #0
   114ae:	d104      	bne.n	114ba <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x2a>
   114b0:	e7ff      	b.n	114b2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x22>
   114b2:	2000      	movs	r0, #0
   114b4:	f88d 000c 	strb.w	r0, [sp, #12]
   114b8:	e02c      	b.n	11514 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x84>
   114ba:	2001      	movs	r0, #1
   114bc:	f88d 0013 	strb.w	r0, [sp, #19]
   114c0:	9902      	ldr	r1, [sp, #8]
   114c2:	9000      	str	r0, [sp, #0]
   114c4:	4608      	mov	r0, r1
   114c6:	9900      	ldr	r1, [sp, #0]
   114c8:	f005 fc09 	bl	16cde <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE>
   114cc:	f88d 1011 	strb.w	r1, [sp, #17]
   114d0:	f88d 0010 	strb.w	r0, [sp, #16]
   114d4:	e7ff      	b.n	114d6 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x46>
   114d6:	f89d 0010 	ldrb.w	r0, [sp, #16]
   114da:	07c0      	lsls	r0, r0, #31
   114dc:	2800      	cmp	r0, #0
   114de:	d104      	bne.n	114ea <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x5a>
   114e0:	e7ff      	b.n	114e2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x52>
   114e2:	2000      	movs	r0, #0
   114e4:	f88d 000c 	strb.w	r0, [sp, #12]
   114e8:	e029      	b.n	1153e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0xae>
   114ea:	2000      	movs	r0, #0
   114ec:	f88d 0013 	strb.w	r0, [sp, #19]
   114f0:	f89d 0011 	ldrb.w	r0, [sp, #17]
   114f4:	f88d 0012 	strb.w	r0, [sp, #18]
   114f8:	f10d 0012 	add.w	r0, sp, #18
   114fc:	9902      	ldr	r1, [sp, #8]
   114fe:	f005 fbc4 	bl	16c8a <_ZN4core3mem4swap17h206518364108b51fE>
   11502:	e7ff      	b.n	11504 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x74>
   11504:	f89d 0012 	ldrb.w	r0, [sp, #18]
   11508:	f88d 000d 	strb.w	r0, [sp, #13]
   1150c:	2001      	movs	r0, #1
   1150e:	f88d 000c 	strb.w	r0, [sp, #12]
   11512:	e014      	b.n	1153e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0xae>
   11514:	f89d 000c 	ldrb.w	r0, [sp, #12]
   11518:	f89d 100d 	ldrb.w	r1, [sp, #13]
   1151c:	b006      	add	sp, #24
   1151e:	bd80      	pop	{r7, pc}
   11520:	2000      	movs	r0, #0
   11522:	f88d 0013 	strb.w	r0, [sp, #19]
   11526:	e7f5      	b.n	11514 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x84>
   11528:	f89d 0013 	ldrb.w	r0, [sp, #19]
   1152c:	07c0      	lsls	r0, r0, #31
   1152e:	2800      	cmp	r0, #0
   11530:	d0f6      	beq.n	11520 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x90>
   11532:	e7ff      	b.n	11534 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0xa4>
   11534:	2000      	movs	r0, #0
   11536:	f88d 0013 	strb.w	r0, [sp, #19]
   1153a:	e7f1      	b.n	11520 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x90>
   1153c:	e7f0      	b.n	11520 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x90>
   1153e:	f89d 0010 	ldrb.w	r0, [sp, #16]
   11542:	07c0      	lsls	r0, r0, #31
   11544:	2800      	cmp	r0, #0
   11546:	d1ef      	bne.n	11528 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x98>
   11548:	e7f8      	b.n	1153c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0xac>

0001154a <_ZN4core4iter6traits8iterator8Iterator3map17h89e3c6c0231011ceE>:
   1154a:	b580      	push	{r7, lr}
   1154c:	b084      	sub	sp, #16
   1154e:	9101      	str	r1, [sp, #4]
   11550:	9202      	str	r2, [sp, #8]
   11552:	9303      	str	r3, [sp, #12]
   11554:	f7ff ff57 	bl	11406 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h1794408f6a80b915E>
   11558:	e7ff      	b.n	1155a <_ZN4core4iter6traits8iterator8Iterator3map17h89e3c6c0231011ceE+0x10>
   1155a:	b004      	add	sp, #16
   1155c:	bd80      	pop	{r7, pc}

0001155e <_ZN4core4iter6traits8iterator8Iterator3map17hbdce026690b075d6E>:
   1155e:	b580      	push	{r7, lr}
   11560:	b084      	sub	sp, #16
   11562:	9101      	str	r1, [sp, #4]
   11564:	9202      	str	r2, [sp, #8]
   11566:	9303      	str	r3, [sp, #12]
   11568:	f7ff ff56 	bl	11418 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h6a385a1eb638dc34E>
   1156c:	e7ff      	b.n	1156e <_ZN4core4iter6traits8iterator8Iterator3map17hbdce026690b075d6E+0x10>
   1156e:	b004      	add	sp, #16
   11570:	bd80      	pop	{r7, pc}

00011572 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h179b2f35245cc0dcE>:
   11572:	b081      	sub	sp, #4
   11574:	460a      	mov	r2, r1
   11576:	4603      	mov	r3, r0
   11578:	f88d 0000 	strb.w	r0, [sp]
   1157c:	f88d 1001 	strb.w	r1, [sp, #1]
   11580:	b001      	add	sp, #4
   11582:	4770      	bx	lr

00011584 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>:
   11584:	b084      	sub	sp, #16
   11586:	9001      	str	r0, [sp, #4]
   11588:	9102      	str	r1, [sp, #8]
   1158a:	4408      	add	r0, r1
   1158c:	9003      	str	r0, [sp, #12]
   1158e:	9803      	ldr	r0, [sp, #12]
   11590:	9000      	str	r0, [sp, #0]
   11592:	e7ff      	b.n	11594 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E+0x10>
   11594:	9800      	ldr	r0, [sp, #0]
   11596:	b004      	add	sp, #16
   11598:	4770      	bx	lr

0001159a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>:
   1159a:	b082      	sub	sp, #8
   1159c:	9001      	str	r0, [sp, #4]
   1159e:	9000      	str	r0, [sp, #0]
   115a0:	e7ff      	b.n	115a2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE+0x8>
   115a2:	9800      	ldr	r0, [sp, #0]
   115a4:	fab0 f180 	clz	r1, r0
   115a8:	0948      	lsrs	r0, r1, #5
   115aa:	b002      	add	sp, #8
   115ac:	4770      	bx	lr

000115ae <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>:
   115ae:	b082      	sub	sp, #8
   115b0:	9001      	str	r0, [sp, #4]
   115b2:	9000      	str	r0, [sp, #0]
   115b4:	9800      	ldr	r0, [sp, #0]
   115b6:	b002      	add	sp, #8
   115b8:	4770      	bx	lr

000115ba <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>:
   115ba:	b081      	sub	sp, #4
   115bc:	9000      	str	r0, [sp, #0]
   115be:	b001      	add	sp, #4
   115c0:	4770      	bx	lr

000115c2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>:
   115c2:	b580      	push	{r7, lr}
   115c4:	b084      	sub	sp, #16
   115c6:	9002      	str	r0, [sp, #8]
   115c8:	9103      	str	r1, [sp, #12]
   115ca:	f000 f805 	bl	115d8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   115ce:	9001      	str	r0, [sp, #4]
   115d0:	e7ff      	b.n	115d2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E+0x10>
   115d2:	9801      	ldr	r0, [sp, #4]
   115d4:	b004      	add	sp, #16
   115d6:	bd80      	pop	{r7, pc}

000115d8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>:
   115d8:	b084      	sub	sp, #16
   115da:	9001      	str	r0, [sp, #4]
   115dc:	9102      	str	r1, [sp, #8]
   115de:	4408      	add	r0, r1
   115e0:	9003      	str	r0, [sp, #12]
   115e2:	9803      	ldr	r0, [sp, #12]
   115e4:	9000      	str	r0, [sp, #0]
   115e6:	e7ff      	b.n	115e8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E+0x10>
   115e8:	9800      	ldr	r0, [sp, #0]
   115ea:	b004      	add	sp, #16
   115ec:	4770      	bx	lr

000115ee <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>:
   115ee:	b082      	sub	sp, #8
   115f0:	9001      	str	r0, [sp, #4]
   115f2:	9000      	str	r0, [sp, #0]
   115f4:	e7ff      	b.n	115f6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE+0x8>
   115f6:	9800      	ldr	r0, [sp, #0]
   115f8:	fab0 f180 	clz	r1, r0
   115fc:	0948      	lsrs	r0, r1, #5
   115fe:	b002      	add	sp, #8
   11600:	4770      	bx	lr

00011602 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>:
   11602:	b580      	push	{r7, lr}
   11604:	b090      	sub	sp, #64	; 0x40
   11606:	900c      	str	r0, [sp, #48]	; 0x30
   11608:	910d      	str	r1, [sp, #52]	; 0x34
   1160a:	9007      	str	r0, [sp, #28]
   1160c:	9106      	str	r1, [sp, #24]
   1160e:	f001 f895 	bl	1273c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>
   11612:	4601      	mov	r1, r0
   11614:	900e      	str	r0, [sp, #56]	; 0x38
   11616:	9105      	str	r1, [sp, #20]
   11618:	e7ff      	b.n	1161a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x18>
   1161a:	9805      	ldr	r0, [sp, #20]
   1161c:	f7ff ffe7 	bl	115ee <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   11620:	e7ff      	b.n	11622 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x20>
   11622:	e7ff      	b.n	11624 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x22>
   11624:	2001      	movs	r0, #1
   11626:	900f      	str	r0, [sp, #60]	; 0x3c
   11628:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1162a:	9004      	str	r0, [sp, #16]
   1162c:	e7ff      	b.n	1162e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x2c>
   1162e:	9804      	ldr	r0, [sp, #16]
   11630:	2800      	cmp	r0, #0
   11632:	d006      	beq.n	11642 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x40>
   11634:	e7ff      	b.n	11636 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x34>
   11636:	9807      	ldr	r0, [sp, #28]
   11638:	9906      	ldr	r1, [sp, #24]
   1163a:	f001 f877 	bl	1272c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   1163e:	9003      	str	r0, [sp, #12]
   11640:	e00e      	b.n	11660 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x5e>
   11642:	9807      	ldr	r0, [sp, #28]
   11644:	9906      	ldr	r1, [sp, #24]
   11646:	f001 f871 	bl	1272c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   1164a:	9002      	str	r0, [sp, #8]
   1164c:	e7ff      	b.n	1164e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x4c>
   1164e:	9805      	ldr	r0, [sp, #20]
   11650:	9902      	ldr	r1, [sp, #8]
   11652:	f7ff ffb6 	bl	115c2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>
   11656:	9001      	str	r0, [sp, #4]
   11658:	e7ff      	b.n	1165a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x58>
   1165a:	9801      	ldr	r0, [sp, #4]
   1165c:	900a      	str	r0, [sp, #40]	; 0x28
   1165e:	e006      	b.n	1166e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   11660:	9805      	ldr	r0, [sp, #20]
   11662:	9903      	ldr	r1, [sp, #12]
   11664:	f001 f83f 	bl	126e6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>
   11668:	900a      	str	r0, [sp, #40]	; 0x28
   1166a:	e7ff      	b.n	1166c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6a>
   1166c:	e7ff      	b.n	1166e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   1166e:	9805      	ldr	r0, [sp, #20]
   11670:	f7ff ff9d 	bl	115ae <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   11674:	9000      	str	r0, [sp, #0]
   11676:	e7ff      	b.n	11678 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x76>
   11678:	980a      	ldr	r0, [sp, #40]	; 0x28
   1167a:	9900      	ldr	r1, [sp, #0]
   1167c:	9108      	str	r1, [sp, #32]
   1167e:	9009      	str	r0, [sp, #36]	; 0x24
   11680:	9808      	ldr	r0, [sp, #32]
   11682:	9909      	ldr	r1, [sp, #36]	; 0x24
   11684:	b010      	add	sp, #64	; 0x40
   11686:	bd80      	pop	{r7, pc}

00011688 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>:
   11688:	b081      	sub	sp, #4
   1168a:	b001      	add	sp, #4
   1168c:	4770      	bx	lr

0001168e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>:
   1168e:	b580      	push	{r7, lr}
   11690:	b08e      	sub	sp, #56	; 0x38
   11692:	9007      	str	r0, [sp, #28]
   11694:	6801      	ldr	r1, [r0, #0]
   11696:	9005      	str	r0, [sp, #20]
   11698:	4608      	mov	r0, r1
   1169a:	f7ff ff8e 	bl	115ba <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   1169e:	9004      	str	r0, [sp, #16]
   116a0:	e7ff      	b.n	116a2 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x14>
   116a2:	9804      	ldr	r0, [sp, #16]
   116a4:	f7ff ff79 	bl	1159a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>
   116a8:	e7ff      	b.n	116aa <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1c>
   116aa:	e7ff      	b.n	116ac <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1e>
   116ac:	2001      	movs	r0, #1
   116ae:	9008      	str	r0, [sp, #32]
   116b0:	9808      	ldr	r0, [sp, #32]
   116b2:	9003      	str	r0, [sp, #12]
   116b4:	e7ff      	b.n	116b6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x28>
   116b6:	9803      	ldr	r0, [sp, #12]
   116b8:	2800      	cmp	r0, #0
   116ba:	d007      	beq.n	116cc <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   116bc:	e7ff      	b.n	116be <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x30>
   116be:	9805      	ldr	r0, [sp, #20]
   116c0:	6840      	ldr	r0, [r0, #4]
   116c2:	f7ff ff94 	bl	115ee <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   116c6:	e7ff      	b.n	116c8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3a>
   116c8:	e7ff      	b.n	116ca <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3c>
   116ca:	e7ff      	b.n	116cc <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   116cc:	9805      	ldr	r0, [sp, #20]
   116ce:	6800      	ldr	r0, [r0, #0]
   116d0:	f7ff ff73 	bl	115ba <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   116d4:	9002      	str	r0, [sp, #8]
   116d6:	e7ff      	b.n	116d8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x4a>
   116d8:	9805      	ldr	r0, [sp, #20]
   116da:	6841      	ldr	r1, [r0, #4]
   116dc:	9a02      	ldr	r2, [sp, #8]
   116de:	428a      	cmp	r2, r1
   116e0:	d02e      	beq.n	11740 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb2>
   116e2:	e7ff      	b.n	116e4 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x56>
   116e4:	9805      	ldr	r0, [sp, #20]
   116e6:	900a      	str	r0, [sp, #40]	; 0x28
   116e8:	2101      	movs	r1, #1
   116ea:	910b      	str	r1, [sp, #44]	; 0x2c
   116ec:	910d      	str	r1, [sp, #52]	; 0x34
   116ee:	990d      	ldr	r1, [sp, #52]	; 0x34
   116f0:	2900      	cmp	r1, #0
   116f2:	d015      	beq.n	11720 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x92>
   116f4:	e7ff      	b.n	116f6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x68>
   116f6:	9805      	ldr	r0, [sp, #20]
   116f8:	6800      	ldr	r0, [r0, #0]
   116fa:	f7ff ff5e 	bl	115ba <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   116fe:	900c      	str	r0, [sp, #48]	; 0x30
   11700:	9905      	ldr	r1, [sp, #20]
   11702:	680a      	ldr	r2, [r1, #0]
   11704:	9001      	str	r0, [sp, #4]
   11706:	4610      	mov	r0, r2
   11708:	f7ff ff57 	bl	115ba <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   1170c:	2101      	movs	r1, #1
   1170e:	f7ff ff39 	bl	11584 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>
   11712:	f7ff ff4c 	bl	115ae <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   11716:	9905      	ldr	r1, [sp, #20]
   11718:	6008      	str	r0, [r1, #0]
   1171a:	9801      	ldr	r0, [sp, #4]
   1171c:	9009      	str	r0, [sp, #36]	; 0x24
   1171e:	e00c      	b.n	1173a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   11720:	9805      	ldr	r0, [sp, #20]
   11722:	6840      	ldr	r0, [r0, #4]
   11724:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11728:	f7ff ff56 	bl	115d8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   1172c:	9905      	ldr	r1, [sp, #20]
   1172e:	6048      	str	r0, [r1, #4]
   11730:	6808      	ldr	r0, [r1, #0]
   11732:	f7ff ff42 	bl	115ba <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   11736:	9009      	str	r0, [sp, #36]	; 0x24
   11738:	e7ff      	b.n	1173a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   1173a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1173c:	9000      	str	r0, [sp, #0]
   1173e:	e002      	b.n	11746 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb8>
   11740:	2000      	movs	r0, #0
   11742:	9006      	str	r0, [sp, #24]
   11744:	e002      	b.n	1174c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   11746:	9800      	ldr	r0, [sp, #0]
   11748:	9006      	str	r0, [sp, #24]
   1174a:	e7ff      	b.n	1174c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   1174c:	9806      	ldr	r0, [sp, #24]
   1174e:	b00e      	add	sp, #56	; 0x38
   11750:	bd80      	pop	{r7, pc}

00011752 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE>:
   11752:	b580      	push	{r7, lr}
   11754:	b084      	sub	sp, #16
   11756:	9002      	str	r0, [sp, #8]
   11758:	9103      	str	r1, [sp, #12]
   1175a:	6800      	ldr	r0, [r0, #0]
   1175c:	f000 f88c 	bl	11878 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>
   11760:	9001      	str	r0, [sp, #4]
   11762:	e7ff      	b.n	11764 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE+0x12>
   11764:	9801      	ldr	r0, [sp, #4]
   11766:	f000 0001 	and.w	r0, r0, #1
   1176a:	b004      	add	sp, #16
   1176c:	bd80      	pop	{r7, pc}

0001176e <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>:
   1176e:	b580      	push	{r7, lr}
   11770:	b084      	sub	sp, #16
   11772:	9002      	str	r0, [sp, #8]
   11774:	9103      	str	r1, [sp, #12]
   11776:	f000 f827 	bl	117c8 <_ZN4core3cmp6max_by17h3c9686db40e0f078E>
   1177a:	9001      	str	r0, [sp, #4]
   1177c:	e7ff      	b.n	1177e <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE+0x10>
   1177e:	9801      	ldr	r0, [sp, #4]
   11780:	b004      	add	sp, #16
   11782:	bd80      	pop	{r7, pc}

00011784 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE>:
   11784:	b085      	sub	sp, #20
   11786:	9003      	str	r0, [sp, #12]
   11788:	9104      	str	r1, [sp, #16]
   1178a:	6802      	ldr	r2, [r0, #0]
   1178c:	680b      	ldr	r3, [r1, #0]
   1178e:	429a      	cmp	r2, r3
   11790:	9101      	str	r1, [sp, #4]
   11792:	9000      	str	r0, [sp, #0]
   11794:	db07      	blt.n	117a6 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x22>
   11796:	e7ff      	b.n	11798 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x14>
   11798:	9800      	ldr	r0, [sp, #0]
   1179a:	6801      	ldr	r1, [r0, #0]
   1179c:	9a01      	ldr	r2, [sp, #4]
   1179e:	6813      	ldr	r3, [r2, #0]
   117a0:	4299      	cmp	r1, r3
   117a2:	d008      	beq.n	117b6 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x32>
   117a4:	e003      	b.n	117ae <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x2a>
   117a6:	20ff      	movs	r0, #255	; 0xff
   117a8:	f88d 000b 	strb.w	r0, [sp, #11]
   117ac:	e008      	b.n	117c0 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3c>
   117ae:	2001      	movs	r0, #1
   117b0:	f88d 000b 	strb.w	r0, [sp, #11]
   117b4:	e003      	b.n	117be <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3a>
   117b6:	2000      	movs	r0, #0
   117b8:	f88d 000b 	strb.w	r0, [sp, #11]
   117bc:	e7ff      	b.n	117be <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3a>
   117be:	e7ff      	b.n	117c0 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3c>
   117c0:	f89d 000b 	ldrb.w	r0, [sp, #11]
   117c4:	b005      	add	sp, #20
   117c6:	4770      	bx	lr

000117c8 <_ZN4core3cmp6max_by17h3c9686db40e0f078E>:
   117c8:	b580      	push	{r7, lr}
   117ca:	b088      	sub	sp, #32
   117cc:	9000      	str	r0, [sp, #0]
   117ce:	9101      	str	r1, [sp, #4]
   117d0:	2000      	movs	r0, #0
   117d2:	f88d 001b 	strb.w	r0, [sp, #27]
   117d6:	f88d 001a 	strb.w	r0, [sp, #26]
   117da:	2001      	movs	r0, #1
   117dc:	f88d 001b 	strb.w	r0, [sp, #27]
   117e0:	f88d 001a 	strb.w	r0, [sp, #26]
   117e4:	4668      	mov	r0, sp
   117e6:	9004      	str	r0, [sp, #16]
   117e8:	a801      	add	r0, sp, #4
   117ea:	9005      	str	r0, [sp, #20]
   117ec:	9804      	ldr	r0, [sp, #16]
   117ee:	9905      	ldr	r1, [sp, #20]
   117f0:	f000 f895 	bl	1191e <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E>
   117f4:	f88d 000f 	strb.w	r0, [sp, #15]
   117f8:	e7ff      	b.n	117fa <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x32>
   117fa:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   117fe:	1c41      	adds	r1, r0, #1
   11800:	2902      	cmp	r1, #2
   11802:	d307      	bcc.n	11814 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x4c>
   11804:	e7ff      	b.n	11806 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x3e>
   11806:	2000      	movs	r0, #0
   11808:	f88d 001b 	strb.w	r0, [sp, #27]
   1180c:	9800      	ldr	r0, [sp, #0]
   1180e:	9002      	str	r0, [sp, #8]
   11810:	e006      	b.n	11820 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x58>
   11812:	defe      	udf	#254	; 0xfe
   11814:	2000      	movs	r0, #0
   11816:	f88d 001a 	strb.w	r0, [sp, #26]
   1181a:	9801      	ldr	r0, [sp, #4]
   1181c:	9002      	str	r0, [sp, #8]
   1181e:	e7ff      	b.n	11820 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x58>
   11820:	f89d 001a 	ldrb.w	r0, [sp, #26]
   11824:	07c0      	lsls	r0, r0, #31
   11826:	2800      	cmp	r0, #0
   11828:	d109      	bne.n	1183e <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x76>
   1182a:	e7ff      	b.n	1182c <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x64>
   1182c:	f89d 001b 	ldrb.w	r0, [sp, #27]
   11830:	07c0      	lsls	r0, r0, #31
   11832:	2800      	cmp	r0, #0
   11834:	d107      	bne.n	11846 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x7e>
   11836:	e7ff      	b.n	11838 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x70>
   11838:	9802      	ldr	r0, [sp, #8]
   1183a:	b008      	add	sp, #32
   1183c:	bd80      	pop	{r7, pc}
   1183e:	2000      	movs	r0, #0
   11840:	f88d 001a 	strb.w	r0, [sp, #26]
   11844:	e7f2      	b.n	1182c <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x64>
   11846:	2000      	movs	r0, #0
   11848:	f88d 001b 	strb.w	r0, [sp, #27]
   1184c:	e7f4      	b.n	11838 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x70>

0001184e <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E>:
   1184e:	b089      	sub	sp, #36	; 0x24
   11850:	9005      	str	r0, [sp, #20]
   11852:	9106      	str	r1, [sp, #24]
   11854:	9107      	str	r1, [sp, #28]
   11856:	9907      	ldr	r1, [sp, #28]
   11858:	9002      	str	r0, [sp, #8]
   1185a:	9101      	str	r1, [sp, #4]
   1185c:	e7ff      	b.n	1185e <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E+0x10>
   1185e:	9802      	ldr	r0, [sp, #8]
   11860:	9008      	str	r0, [sp, #32]
   11862:	9908      	ldr	r1, [sp, #32]
   11864:	9100      	str	r1, [sp, #0]
   11866:	e7ff      	b.n	11868 <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E+0x1a>
   11868:	9800      	ldr	r0, [sp, #0]
   1186a:	9003      	str	r0, [sp, #12]
   1186c:	9901      	ldr	r1, [sp, #4]
   1186e:	9104      	str	r1, [sp, #16]
   11870:	9803      	ldr	r0, [sp, #12]
   11872:	9904      	ldr	r1, [sp, #16]
   11874:	b009      	add	sp, #36	; 0x24
   11876:	4770      	bx	lr

00011878 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>:
   11878:	b580      	push	{r7, lr}
   1187a:	b088      	sub	sp, #32
   1187c:	9006      	str	r0, [sp, #24]
   1187e:	9107      	str	r1, [sp, #28]
   11880:	9004      	str	r0, [sp, #16]
   11882:	4608      	mov	r0, r1
   11884:	9103      	str	r1, [sp, #12]
   11886:	f006 ff10 	bl	186aa <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   1188a:	9002      	str	r0, [sp, #8]
   1188c:	e7ff      	b.n	1188e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x16>
   1188e:	9802      	ldr	r0, [sp, #8]
   11890:	07c1      	lsls	r1, r0, #31
   11892:	2900      	cmp	r1, #0
   11894:	d105      	bne.n	118a2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x2a>
   11896:	e7ff      	b.n	11898 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x20>
   11898:	9803      	ldr	r0, [sp, #12]
   1189a:	f006 ff0a 	bl	186b2 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   1189e:	9001      	str	r0, [sp, #4]
   118a0:	e007      	b.n	118b2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x3a>
   118a2:	9804      	ldr	r0, [sp, #16]
   118a4:	9903      	ldr	r1, [sp, #12]
   118a6:	f007 fd2a 	bl	192fe <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   118aa:	f88d 0017 	strb.w	r0, [sp, #23]
   118ae:	e7ff      	b.n	118b0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x38>
   118b0:	e015      	b.n	118de <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
   118b2:	9801      	ldr	r0, [sp, #4]
   118b4:	07c1      	lsls	r1, r0, #31
   118b6:	2900      	cmp	r1, #0
   118b8:	d107      	bne.n	118ca <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x52>
   118ba:	e7ff      	b.n	118bc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x44>
   118bc:	9804      	ldr	r0, [sp, #16]
   118be:	9903      	ldr	r1, [sp, #12]
   118c0:	f007 fe98 	bl	195f4 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
   118c4:	f88d 0017 	strb.w	r0, [sp, #23]
   118c8:	e007      	b.n	118da <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x62>
   118ca:	9804      	ldr	r0, [sp, #16]
   118cc:	9903      	ldr	r1, [sp, #12]
   118ce:	f007 fd81 	bl	193d4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   118d2:	f88d 0017 	strb.w	r0, [sp, #23]
   118d6:	e7ff      	b.n	118d8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x60>
   118d8:	e000      	b.n	118dc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
   118da:	e7ff      	b.n	118dc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
   118dc:	e7ff      	b.n	118de <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
   118de:	f89d 0017 	ldrb.w	r0, [sp, #23]
   118e2:	b008      	add	sp, #32
   118e4:	bd80      	pop	{r7, pc}

000118e6 <_ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE>:
   118e6:	b580      	push	{r7, lr}
   118e8:	b086      	sub	sp, #24
   118ea:	f8dd c020 	ldr.w	ip, [sp, #32]
   118ee:	9102      	str	r1, [sp, #8]
   118f0:	9203      	str	r2, [sp, #12]
   118f2:	9304      	str	r3, [sp, #16]
   118f4:	f8cd c014 	str.w	ip, [sp, #20]
   118f8:	f04f 0e00 	mov.w	lr, #0
   118fc:	f8cd e004 	str.w	lr, [sp, #4]
   11900:	f8cd e000 	str.w	lr, [sp]
   11904:	f8cd e000 	str.w	lr, [sp]
   11908:	6001      	str	r1, [r0, #0]
   1190a:	6042      	str	r2, [r0, #4]
   1190c:	9900      	ldr	r1, [sp, #0]
   1190e:	9a01      	ldr	r2, [sp, #4]
   11910:	6081      	str	r1, [r0, #8]
   11912:	60c2      	str	r2, [r0, #12]
   11914:	6103      	str	r3, [r0, #16]
   11916:	f8c0 c014 	str.w	ip, [r0, #20]
   1191a:	b006      	add	sp, #24
   1191c:	bd80      	pop	{r7, pc}

0001191e <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E>:
   1191e:	b580      	push	{r7, lr}
   11920:	b084      	sub	sp, #16
   11922:	9001      	str	r0, [sp, #4]
   11924:	9102      	str	r1, [sp, #8]
   11926:	9801      	ldr	r0, [sp, #4]
   11928:	9902      	ldr	r1, [sp, #8]
   1192a:	f7ff ff2b 	bl	11784 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE>
   1192e:	9000      	str	r0, [sp, #0]
   11930:	e7ff      	b.n	11932 <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E+0x14>
   11932:	9800      	ldr	r0, [sp, #0]
   11934:	b004      	add	sp, #16
   11936:	bd80      	pop	{r7, pc}

00011938 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>:
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct Coord(pub CoordPart, pub CoordPart);

    impl Coord {
        /// Create a new coordinate with X and Y values
        pub fn new(x: CoordPart, y: CoordPart) -> Self {
   11938:	b084      	sub	sp, #16
   1193a:	9002      	str	r0, [sp, #8]
   1193c:	9103      	str	r1, [sp, #12]
            Coord(x, y)
   1193e:	9000      	str	r0, [sp, #0]
   11940:	9101      	str	r1, [sp, #4]
        }
   11942:	9800      	ldr	r0, [sp, #0]
   11944:	9901      	ldr	r1, [sp, #4]
   11946:	b004      	add	sp, #16
   11948:	4770      	bx	lr

0001194a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>:
    }

    impl Index<usize> for Coord {
        type Output = CoordPart;

        fn index(&self, idx: usize) -> &CoordPart {
   1194a:	b580      	push	{r7, lr}
   1194c:	b096      	sub	sp, #88	; 0x58
   1194e:	9109      	str	r1, [sp, #36]	; 0x24
   11950:	9014      	str	r0, [sp, #80]	; 0x50
            match idx {
                0 => &self.0,
   11952:	9909      	ldr	r1, [sp, #36]	; 0x24
   11954:	2900      	cmp	r1, #0
   11956:	9008      	str	r0, [sp, #32]
   11958:	9107      	str	r1, [sp, #28]
   1195a:	d018      	beq.n	1198e <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x44>
   1195c:	e7ff      	b.n	1195e <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x14>
   1195e:	9807      	ldr	r0, [sp, #28]
   11960:	2801      	cmp	r0, #1
   11962:	d017      	beq.n	11994 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x4a>
   11964:	e7ff      	b.n	11966 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x1c>
                1 => &self.1,
                _ => panic!("Unreachable index {}", idx),
   11966:	f240 70c8 	movw	r0, #1992	; 0x7c8
   1196a:	f2c0 0002 	movt	r0, #2
   1196e:	6801      	ldr	r1, [r0, #0]
   11970:	a809      	add	r0, sp, #36	; 0x24
   11972:	9013      	str	r0, [sp, #76]	; 0x4c
   11974:	9813      	ldr	r0, [sp, #76]	; 0x4c
   11976:	9015      	str	r0, [sp, #84]	; 0x54
   11978:	f249 62e9 	movw	r2, #38633	; 0x96e9
   1197c:	f2c0 0201 	movt	r2, #1
   11980:	9106      	str	r1, [sp, #24]
   11982:	4611      	mov	r1, r2
   11984:	f7ff ff63 	bl	1184e <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E>
   11988:	9005      	str	r0, [sp, #20]
   1198a:	9104      	str	r1, [sp, #16]
   1198c:	e006      	b.n	1199c <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x52>
                0 => &self.0,
   1198e:	9808      	ldr	r0, [sp, #32]
   11990:	900a      	str	r0, [sp, #40]	; 0x28
            match idx {
   11992:	e020      	b.n	119d6 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x8c>
                1 => &self.1,
   11994:	9808      	ldr	r0, [sp, #32]
   11996:	1d01      	adds	r1, r0, #4
   11998:	910a      	str	r1, [sp, #40]	; 0x28
            match idx {
   1199a:	e01c      	b.n	119d6 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x8c>
                _ => panic!("Unreachable index {}", idx),
   1199c:	9805      	ldr	r0, [sp, #20]
   1199e:	9011      	str	r0, [sp, #68]	; 0x44
   119a0:	9904      	ldr	r1, [sp, #16]
   119a2:	9112      	str	r1, [sp, #72]	; 0x48
   119a4:	466a      	mov	r2, sp
   119a6:	2301      	movs	r3, #1
   119a8:	6013      	str	r3, [r2, #0]
   119aa:	a80b      	add	r0, sp, #44	; 0x2c
   119ac:	aa11      	add	r2, sp, #68	; 0x44
   119ae:	9906      	ldr	r1, [sp, #24]
   119b0:	9203      	str	r2, [sp, #12]
   119b2:	461a      	mov	r2, r3
   119b4:	9b03      	ldr	r3, [sp, #12]
   119b6:	f7ff ff96 	bl	118e6 <_ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE>
   119ba:	e7ff      	b.n	119bc <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x72>
   119bc:	f240 70cc 	movw	r0, #1996	; 0x7cc
   119c0:	f2c0 0002 	movt	r0, #2
   119c4:	f005 ffc9 	bl	1795a <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   119c8:	9002      	str	r0, [sp, #8]
   119ca:	e7ff      	b.n	119cc <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x82>
   119cc:	a80b      	add	r0, sp, #44	; 0x2c
   119ce:	9902      	ldr	r1, [sp, #8]
   119d0:	f006 f800 	bl	179d4 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   119d4:	defe      	udf	#254	; 0xfe
            match idx {
   119d6:	980a      	ldr	r0, [sp, #40]	; 0x28
            }
        }
   119d8:	b016      	add	sp, #88	; 0x58
   119da:	bd80      	pop	{r7, pc}

000119dc <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE>:
    /// #
    /// let coord = Coord::new(-5, 10);
    ///
    /// assert_eq!(coord.to_unsigned(), UnsignedCoord::new(0, 10));
    /// ```
    fn to_unsigned(self) -> UnsignedCoord {
   119dc:	b580      	push	{r7, lr}
   119de:	b088      	sub	sp, #32
   119e0:	9006      	str	r0, [sp, #24]
   119e2:	9107      	str	r1, [sp, #28]
   119e4:	a806      	add	r0, sp, #24
   119e6:	2100      	movs	r1, #0
        UnsignedCoord::new(self[0].max(0) as u32, self[1].max(0) as u32)
   119e8:	f7ff ffaf 	bl	1194a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   119ec:	9005      	str	r0, [sp, #20]
   119ee:	e7ff      	b.n	119f0 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x14>
   119f0:	9805      	ldr	r0, [sp, #20]
   119f2:	6800      	ldr	r0, [r0, #0]
   119f4:	2100      	movs	r1, #0
   119f6:	f7ff feba 	bl	1176e <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>
   119fa:	9004      	str	r0, [sp, #16]
   119fc:	e7ff      	b.n	119fe <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x22>
   119fe:	a806      	add	r0, sp, #24
   11a00:	2101      	movs	r1, #1
   11a02:	f7ff ffa2 	bl	1194a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11a06:	9003      	str	r0, [sp, #12]
   11a08:	e7ff      	b.n	11a0a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x2e>
   11a0a:	9803      	ldr	r0, [sp, #12]
   11a0c:	6800      	ldr	r0, [r0, #0]
   11a0e:	2100      	movs	r1, #0
   11a10:	f7ff fead 	bl	1176e <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>
   11a14:	9002      	str	r0, [sp, #8]
   11a16:	e7ff      	b.n	11a18 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x3c>
   11a18:	9804      	ldr	r0, [sp, #16]
   11a1a:	9902      	ldr	r1, [sp, #8]
   11a1c:	f000 f84e 	bl	11abc <_ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E>
   11a20:	9001      	str	r0, [sp, #4]
   11a22:	9100      	str	r1, [sp, #0]
   11a24:	e7ff      	b.n	11a26 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x4a>
    }
   11a26:	9801      	ldr	r0, [sp, #4]
   11a28:	9900      	ldr	r1, [sp, #0]
   11a2a:	b008      	add	sp, #32
   11a2c:	bd80      	pop	{r7, pc}

00011a2e <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>:
/// Take a tuple of 8 bit `(red, green, blue)` color values and convert them to a single 16 bit
/// color
///
/// The 2 or 3 (for the green channel) least significant bits are discarded
impl From<(u8, u8, u8)> for Rgb565 {
    fn from((r, g, b): (u8, u8, u8)) -> Self {
   11a2e:	b08b      	sub	sp, #44	; 0x2c
   11a30:	4601      	mov	r1, r0
   11a32:	f8ad 0020 	strh.w	r0, [sp, #32]
   11a36:	0c00      	lsrs	r0, r0, #16
   11a38:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   11a3c:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   11a40:	f88d 001e 	strb.w	r0, [sp, #30]
   11a44:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   11a48:	f8ad 001c 	strh.w	r0, [sp, #28]
   11a4c:	f89d 001c 	ldrb.w	r0, [sp, #28]
   11a50:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   11a54:	f89d 201d 	ldrb.w	r2, [sp, #29]
   11a58:	4613      	mov	r3, r2
   11a5a:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   11a5e:	f89d 201e 	ldrb.w	r2, [sp, #30]
   11a62:	4694      	mov	ip, r2
   11a64:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
        let value =
        // Red
        (((r as u16) << 8) & RED_MASK)
   11a68:	0200      	lsls	r0, r0, #8
   11a6a:	9306      	str	r3, [sp, #24]
   11a6c:	f8cd c014 	str.w	ip, [sp, #20]
   11a70:	9004      	str	r0, [sp, #16]
   11a72:	e7ff      	b.n	11a74 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x46>
   11a74:	9804      	ldr	r0, [sp, #16]
   11a76:	f400 4178 	and.w	r1, r0, #63488	; 0xf800
        // Green
        | (((g as u16) << 3) & GREEN_MASK)
   11a7a:	9a06      	ldr	r2, [sp, #24]
   11a7c:	b2d3      	uxtb	r3, r2
   11a7e:	00db      	lsls	r3, r3, #3
   11a80:	9103      	str	r1, [sp, #12]
   11a82:	9302      	str	r3, [sp, #8]
   11a84:	e7ff      	b.n	11a86 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x58>
   11a86:	9802      	ldr	r0, [sp, #8]
   11a88:	f400 61fc 	and.w	r1, r0, #2016	; 0x7e0
        (((r as u16) << 8) & RED_MASK)
   11a8c:	9a03      	ldr	r2, [sp, #12]
   11a8e:	4311      	orrs	r1, r2
        // Blue
        | ((b as u16) >> 3 & BLUE_MASK);
   11a90:	9b05      	ldr	r3, [sp, #20]
   11a92:	fa5f fc83 	uxtb.w	ip, r3
   11a96:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
   11a9a:	9101      	str	r1, [sp, #4]
   11a9c:	f8cd c000 	str.w	ip, [sp]
   11aa0:	e7ff      	b.n	11aa2 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x74>
   11aa2:	9800      	ldr	r0, [sp, #0]
   11aa4:	f000 011f 	and.w	r1, r0, #31
        (((r as u16) << 8) & RED_MASK)
   11aa8:	9a01      	ldr	r2, [sp, #4]
   11aaa:	4311      	orrs	r1, r2
   11aac:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a

        Self(value)
   11ab0:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
    }
   11ab4:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   11ab8:	b00b      	add	sp, #44	; 0x2c
   11aba:	4770      	bx	lr

00011abc <_ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E>:
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct UnsignedCoord(pub UnsignedCoordPart, pub UnsignedCoordPart);

    impl UnsignedCoord {
        /// Create a new coordinate with X and Y values
        pub fn new(x: UnsignedCoordPart, y: UnsignedCoordPart) -> Self {
   11abc:	b084      	sub	sp, #16
   11abe:	9002      	str	r0, [sp, #8]
   11ac0:	9103      	str	r1, [sp, #12]
            UnsignedCoord(x, y)
   11ac2:	9000      	str	r0, [sp, #0]
   11ac4:	9101      	str	r1, [sp, #4]
        }
   11ac6:	9800      	ldr	r0, [sp, #0]
   11ac8:	9901      	ldr	r1, [sp, #4]
   11aca:	b004      	add	sp, #16
   11acc:	4770      	bx	lr

00011ace <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>:
   11ace:	b580      	push	{r7, lr}
   11ad0:	b088      	sub	sp, #32
   11ad2:	9005      	str	r0, [sp, #20]
   11ad4:	9106      	str	r1, [sp, #24]
   11ad6:	9003      	str	r0, [sp, #12]
   11ad8:	4608      	mov	r0, r1
   11ada:	f000 fa21 	bl	11f20 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>
   11ade:	9004      	str	r0, [sp, #16]
   11ae0:	e7ff      	b.n	11ae2 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x14>
   11ae2:	9804      	ldr	r0, [sp, #16]
   11ae4:	9007      	str	r0, [sp, #28]
   11ae6:	9903      	ldr	r1, [sp, #12]
   11ae8:	680a      	ldr	r2, [r1, #0]
   11aea:	9002      	str	r0, [sp, #8]
   11aec:	4610      	mov	r0, r2
   11aee:	9902      	ldr	r1, [sp, #8]
   11af0:	f000 f837 	bl	11b62 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>
   11af4:	9001      	str	r0, [sp, #4]
   11af6:	9100      	str	r1, [sp, #0]
   11af8:	e7ff      	b.n	11afa <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x2c>
   11afa:	9801      	ldr	r0, [sp, #4]
   11afc:	9900      	ldr	r1, [sp, #0]
   11afe:	b008      	add	sp, #32
   11b00:	bd80      	pop	{r7, pc}

00011b02 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>:
   11b02:	b580      	push	{r7, lr}
   11b04:	b084      	sub	sp, #16
   11b06:	9001      	str	r0, [sp, #4]
   11b08:	9102      	str	r1, [sp, #8]
   11b0a:	9203      	str	r2, [sp, #12]
   11b0c:	9000      	str	r0, [sp, #0]
   11b0e:	4608      	mov	r0, r1
   11b10:	9900      	ldr	r1, [sp, #0]
   11b12:	f00c fafd 	bl	1e110 <__aeabi_memcpy>
   11b16:	e7ff      	b.n	11b18 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE+0x16>
   11b18:	b004      	add	sp, #16
   11b1a:	bd80      	pop	{r7, pc}

00011b1c <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>:
   11b1c:	b580      	push	{r7, lr}
   11b1e:	b084      	sub	sp, #16
   11b20:	9001      	str	r0, [sp, #4]
   11b22:	9102      	str	r1, [sp, #8]
   11b24:	9203      	str	r2, [sp, #12]
   11b26:	0092      	lsls	r2, r2, #2
   11b28:	9000      	str	r0, [sp, #0]
   11b2a:	4608      	mov	r0, r1
   11b2c:	9900      	ldr	r1, [sp, #0]
   11b2e:	f00c faef 	bl	1e110 <__aeabi_memcpy>
   11b32:	e7ff      	b.n	11b34 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E+0x18>
   11b34:	b004      	add	sp, #16
   11b36:	bd80      	pop	{r7, pc}

00011b38 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>:
   11b38:	b082      	sub	sp, #8
   11b3a:	9000      	str	r0, [sp, #0]
   11b3c:	9101      	str	r1, [sp, #4]
   11b3e:	6800      	ldr	r0, [r0, #0]
   11b40:	6809      	ldr	r1, [r1, #0]
   11b42:	2200      	movs	r2, #0
   11b44:	4288      	cmp	r0, r1
   11b46:	bf38      	it	cc
   11b48:	2201      	movcc	r2, #1
   11b4a:	4610      	mov	r0, r2
   11b4c:	b002      	add	sp, #8
   11b4e:	4770      	bx	lr

00011b50 <_ZN4core3mem4swap17hc4afbec7b5ffb125E>:
   11b50:	b580      	push	{r7, lr}
   11b52:	b082      	sub	sp, #8
   11b54:	9000      	str	r0, [sp, #0]
   11b56:	9101      	str	r1, [sp, #4]
   11b58:	f000 f85f 	bl	11c1a <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>
   11b5c:	e7ff      	b.n	11b5e <_ZN4core3mem4swap17hc4afbec7b5ffb125E+0xe>
   11b5e:	b002      	add	sp, #8
   11b60:	bd80      	pop	{r7, pc}

00011b62 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>:
   11b62:	b580      	push	{r7, lr}
   11b64:	b088      	sub	sp, #32
   11b66:	9004      	str	r0, [sp, #16]
   11b68:	9105      	str	r1, [sp, #20]
   11b6a:	f000 f819 	bl	11ba0 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>
   11b6e:	9001      	str	r0, [sp, #4]
   11b70:	9100      	str	r1, [sp, #0]
   11b72:	e7ff      	b.n	11b74 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x12>
   11b74:	9801      	ldr	r0, [sp, #4]
   11b76:	9006      	str	r0, [sp, #24]
   11b78:	9900      	ldr	r1, [sp, #0]
   11b7a:	f001 0201 	and.w	r2, r1, #1
   11b7e:	f88d 201f 	strb.w	r2, [sp, #31]
   11b82:	2a00      	cmp	r2, #0
   11b84:	d105      	bne.n	11b92 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x30>
   11b86:	e7ff      	b.n	11b88 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x26>
   11b88:	9801      	ldr	r0, [sp, #4]
   11b8a:	9003      	str	r0, [sp, #12]
   11b8c:	2101      	movs	r1, #1
   11b8e:	9102      	str	r1, [sp, #8]
   11b90:	e002      	b.n	11b98 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
   11b92:	2000      	movs	r0, #0
   11b94:	9002      	str	r0, [sp, #8]
   11b96:	e7ff      	b.n	11b98 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
   11b98:	9802      	ldr	r0, [sp, #8]
   11b9a:	9903      	ldr	r1, [sp, #12]
   11b9c:	b008      	add	sp, #32
   11b9e:	bd80      	pop	{r7, pc}

00011ba0 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>:
   11ba0:	b08a      	sub	sp, #40	; 0x28
   11ba2:	9004      	str	r0, [sp, #16]
   11ba4:	9105      	str	r1, [sp, #20]
   11ba6:	1840      	adds	r0, r0, r1
   11ba8:	f04f 0100 	mov.w	r1, #0
   11bac:	f141 0100 	adc.w	r1, r1, #0
   11bb0:	9006      	str	r0, [sp, #24]
   11bb2:	f88d 101c 	strb.w	r1, [sp, #28]
   11bb6:	9806      	ldr	r0, [sp, #24]
   11bb8:	f89d 101c 	ldrb.w	r1, [sp, #28]
   11bbc:	9001      	str	r0, [sp, #4]
   11bbe:	9100      	str	r1, [sp, #0]
   11bc0:	e7ff      	b.n	11bc2 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE+0x22>
   11bc2:	9801      	ldr	r0, [sp, #4]
   11bc4:	9008      	str	r0, [sp, #32]
   11bc6:	9900      	ldr	r1, [sp, #0]
   11bc8:	f001 0201 	and.w	r2, r1, #1
   11bcc:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   11bd0:	9002      	str	r0, [sp, #8]
   11bd2:	f88d 200c 	strb.w	r2, [sp, #12]
   11bd6:	9802      	ldr	r0, [sp, #8]
   11bd8:	f89d 100c 	ldrb.w	r1, [sp, #12]
   11bdc:	b00a      	add	sp, #40	; 0x28
   11bde:	4770      	bx	lr

00011be0 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>:
   11be0:	b580      	push	{r7, lr}
   11be2:	b08c      	sub	sp, #48	; 0x30
   11be4:	9005      	str	r0, [sp, #20]
   11be6:	9106      	str	r1, [sp, #24]
   11be8:	9207      	str	r2, [sp, #28]
   11bea:	4603      	mov	r3, r0
   11bec:	9008      	str	r0, [sp, #32]
   11bee:	4608      	mov	r0, r1
   11bf0:	9109      	str	r1, [sp, #36]	; 0x24
   11bf2:	2104      	movs	r1, #4
   11bf4:	910b      	str	r1, [sp, #44]	; 0x2c
   11bf6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11bf8:	9204      	str	r2, [sp, #16]
   11bfa:	9303      	str	r3, [sp, #12]
   11bfc:	9002      	str	r0, [sp, #8]
   11bfe:	9101      	str	r1, [sp, #4]
   11c00:	e7ff      	b.n	11c02 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x22>
   11c02:	9801      	ldr	r0, [sp, #4]
   11c04:	9904      	ldr	r1, [sp, #16]
   11c06:	fb00 f201 	mul.w	r2, r0, r1
   11c0a:	920a      	str	r2, [sp, #40]	; 0x28
   11c0c:	9803      	ldr	r0, [sp, #12]
   11c0e:	9902      	ldr	r1, [sp, #8]
   11c10:	f000 f82e 	bl	11c70 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>
   11c14:	e7ff      	b.n	11c16 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x36>
   11c16:	b00c      	add	sp, #48	; 0x30
   11c18:	bd80      	pop	{r7, pc}

00011c1a <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>:
   11c1a:	b580      	push	{r7, lr}
   11c1c:	b088      	sub	sp, #32
   11c1e:	9004      	str	r0, [sp, #16]
   11c20:	9105      	str	r1, [sp, #20]
   11c22:	2204      	movs	r2, #4
   11c24:	9207      	str	r2, [sp, #28]
   11c26:	9a07      	ldr	r2, [sp, #28]
   11c28:	9103      	str	r1, [sp, #12]
   11c2a:	9002      	str	r0, [sp, #8]
   11c2c:	9201      	str	r2, [sp, #4]
   11c2e:	e7ff      	b.n	11c30 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x16>
   11c30:	9801      	ldr	r0, [sp, #4]
   11c32:	2820      	cmp	r0, #32
   11c34:	d306      	bcc.n	11c44 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x2a>
   11c36:	e7ff      	b.n	11c38 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x1e>
   11c38:	2201      	movs	r2, #1
   11c3a:	9802      	ldr	r0, [sp, #8]
   11c3c:	9903      	ldr	r1, [sp, #12]
   11c3e:	f7ff ffcf 	bl	11be0 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>
   11c42:	e012      	b.n	11c6a <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x50>
   11c44:	9802      	ldr	r0, [sp, #8]
   11c46:	f000 f8a1 	bl	11d8c <_ZN4core3ptr4read17h2038b0ecb0975c4fE>
   11c4a:	4601      	mov	r1, r0
   11c4c:	9006      	str	r0, [sp, #24]
   11c4e:	9100      	str	r1, [sp, #0]
   11c50:	e7ff      	b.n	11c52 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x38>
   11c52:	2201      	movs	r2, #1
   11c54:	9803      	ldr	r0, [sp, #12]
   11c56:	9902      	ldr	r1, [sp, #8]
   11c58:	f7ff ff60 	bl	11b1c <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
   11c5c:	e7ff      	b.n	11c5e <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x44>
   11c5e:	9803      	ldr	r0, [sp, #12]
   11c60:	9900      	ldr	r1, [sp, #0]
   11c62:	f000 f8ac 	bl	11dbe <_ZN4core3ptr5write17h4a80332de2cee3d3E>
   11c66:	e7ff      	b.n	11c68 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x4e>
   11c68:	e000      	b.n	11c6c <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
   11c6a:	e7ff      	b.n	11c6c <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
   11c6c:	b008      	add	sp, #32
   11c6e:	bd80      	pop	{r7, pc}

00011c70 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>:
   11c70:	b5d0      	push	{r4, r6, r7, lr}
   11c72:	af02      	add	r7, sp, #8
   11c74:	b0b4      	sub	sp, #208	; 0xd0
   11c76:	466c      	mov	r4, sp
   11c78:	f36f 0404 	bfc	r4, #0, #5
   11c7c:	46a5      	mov	sp, r4
   11c7e:	9024      	str	r0, [sp, #144]	; 0x90
   11c80:	9125      	str	r1, [sp, #148]	; 0x94
   11c82:	9226      	str	r2, [sp, #152]	; 0x98
   11c84:	2320      	movs	r3, #32
   11c86:	932f      	str	r3, [sp, #188]	; 0xbc
   11c88:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   11c8a:	9327      	str	r3, [sp, #156]	; 0x9c
   11c8c:	920e      	str	r2, [sp, #56]	; 0x38
   11c8e:	910d      	str	r1, [sp, #52]	; 0x34
   11c90:	900c      	str	r0, [sp, #48]	; 0x30
   11c92:	930b      	str	r3, [sp, #44]	; 0x2c
   11c94:	e7ff      	b.n	11c96 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x26>
   11c96:	2000      	movs	r0, #0
   11c98:	900f      	str	r0, [sp, #60]	; 0x3c
   11c9a:	e7ff      	b.n	11c9c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
   11c9c:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11c9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11ca0:	4408      	add	r0, r1
   11ca2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11ca4:	4290      	cmp	r0, r2
   11ca6:	d905      	bls.n	11cb4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x44>
   11ca8:	e7ff      	b.n	11caa <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x3a>
   11caa:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11cac:	990e      	ldr	r1, [sp, #56]	; 0x38
   11cae:	4288      	cmp	r0, r1
   11cb0:	d334      	bcc.n	11d1c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xac>
   11cb2:	e067      	b.n	11d84 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
   11cb4:	e7ff      	b.n	11cb6 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x46>
   11cb6:	a810      	add	r0, sp, #64	; 0x40
   11cb8:	9030      	str	r0, [sp, #192]	; 0xc0
   11cba:	9031      	str	r0, [sp, #196]	; 0xc4
   11cbc:	e7ff      	b.n	11cbe <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x4e>
   11cbe:	a810      	add	r0, sp, #64	; 0x40
   11cc0:	4601      	mov	r1, r0
   11cc2:	9028      	str	r0, [sp, #160]	; 0xa0
   11cc4:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11cc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11cc8:	900a      	str	r0, [sp, #40]	; 0x28
   11cca:	4610      	mov	r0, r2
   11ccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11cce:	9109      	str	r1, [sp, #36]	; 0x24
   11cd0:	4619      	mov	r1, r3
   11cd2:	f000 f87a 	bl	11dca <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11cd6:	4601      	mov	r1, r0
   11cd8:	9029      	str	r0, [sp, #164]	; 0xa4
   11cda:	9108      	str	r1, [sp, #32]
   11cdc:	e7ff      	b.n	11cde <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x6e>
   11cde:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11ce0:	980d      	ldr	r0, [sp, #52]	; 0x34
   11ce2:	f000 f872 	bl	11dca <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11ce6:	4601      	mov	r1, r0
   11ce8:	902a      	str	r0, [sp, #168]	; 0xa8
   11cea:	9107      	str	r1, [sp, #28]
   11cec:	e7ff      	b.n	11cee <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x7e>
   11cee:	9808      	ldr	r0, [sp, #32]
   11cf0:	9909      	ldr	r1, [sp, #36]	; 0x24
   11cf2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11cf4:	f7ff ff05 	bl	11b02 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11cf8:	e7ff      	b.n	11cfa <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x8a>
   11cfa:	9807      	ldr	r0, [sp, #28]
   11cfc:	9908      	ldr	r1, [sp, #32]
   11cfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11d00:	f7ff feff 	bl	11b02 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11d04:	e7ff      	b.n	11d06 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x96>
   11d06:	9809      	ldr	r0, [sp, #36]	; 0x24
   11d08:	9907      	ldr	r1, [sp, #28]
   11d0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11d0c:	f7ff fef9 	bl	11b02 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11d10:	e7ff      	b.n	11d12 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xa2>
   11d12:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11d14:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11d16:	4408      	add	r0, r1
   11d18:	900f      	str	r0, [sp, #60]	; 0x3c
   11d1a:	e7bf      	b.n	11c9c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
   11d1c:	e7ff      	b.n	11d1e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xae>
   11d1e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11d20:	990e      	ldr	r1, [sp, #56]	; 0x38
   11d22:	1a08      	subs	r0, r1, r0
   11d24:	4602      	mov	r2, r0
   11d26:	902b      	str	r0, [sp, #172]	; 0xac
   11d28:	a81c      	add	r0, sp, #112	; 0x70
   11d2a:	9032      	str	r0, [sp, #200]	; 0xc8
   11d2c:	9033      	str	r0, [sp, #204]	; 0xcc
   11d2e:	9206      	str	r2, [sp, #24]
   11d30:	9005      	str	r0, [sp, #20]
   11d32:	e7ff      	b.n	11d34 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xc4>
   11d34:	9805      	ldr	r0, [sp, #20]
   11d36:	9905      	ldr	r1, [sp, #20]
   11d38:	912c      	str	r1, [sp, #176]	; 0xb0
   11d3a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11d3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11d3e:	9004      	str	r0, [sp, #16]
   11d40:	4610      	mov	r0, r2
   11d42:	f000 f842 	bl	11dca <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11d46:	4601      	mov	r1, r0
   11d48:	902d      	str	r0, [sp, #180]	; 0xb4
   11d4a:	9103      	str	r1, [sp, #12]
   11d4c:	e7ff      	b.n	11d4e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xde>
   11d4e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11d50:	980d      	ldr	r0, [sp, #52]	; 0x34
   11d52:	f000 f83a 	bl	11dca <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11d56:	4601      	mov	r1, r0
   11d58:	902e      	str	r0, [sp, #184]	; 0xb8
   11d5a:	9102      	str	r1, [sp, #8]
   11d5c:	e7ff      	b.n	11d5e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xee>
   11d5e:	9803      	ldr	r0, [sp, #12]
   11d60:	9904      	ldr	r1, [sp, #16]
   11d62:	9a06      	ldr	r2, [sp, #24]
   11d64:	f7ff fecd 	bl	11b02 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11d68:	e7ff      	b.n	11d6a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xfa>
   11d6a:	9802      	ldr	r0, [sp, #8]
   11d6c:	9903      	ldr	r1, [sp, #12]
   11d6e:	9a06      	ldr	r2, [sp, #24]
   11d70:	f7ff fec7 	bl	11b02 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11d74:	e7ff      	b.n	11d76 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x106>
   11d76:	9804      	ldr	r0, [sp, #16]
   11d78:	9902      	ldr	r1, [sp, #8]
   11d7a:	9a06      	ldr	r2, [sp, #24]
   11d7c:	f7ff fec1 	bl	11b02 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11d80:	e7ff      	b.n	11d82 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x112>
   11d82:	e7ff      	b.n	11d84 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
   11d84:	f1a7 0408 	sub.w	r4, r7, #8
   11d88:	46a5      	mov	sp, r4
   11d8a:	bdd0      	pop	{r4, r6, r7, pc}

00011d8c <_ZN4core3ptr4read17h2038b0ecb0975c4fE>:
   11d8c:	b580      	push	{r7, lr}
   11d8e:	b08a      	sub	sp, #40	; 0x28
   11d90:	9004      	str	r0, [sp, #16]
   11d92:	9905      	ldr	r1, [sp, #20]
   11d94:	9103      	str	r1, [sp, #12]
   11d96:	9002      	str	r0, [sp, #8]
   11d98:	e7ff      	b.n	11d9a <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0xe>
   11d9a:	a803      	add	r0, sp, #12
   11d9c:	9008      	str	r0, [sp, #32]
   11d9e:	9009      	str	r0, [sp, #36]	; 0x24
   11da0:	e7ff      	b.n	11da2 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x16>
   11da2:	a903      	add	r1, sp, #12
   11da4:	2201      	movs	r2, #1
   11da6:	9802      	ldr	r0, [sp, #8]
   11da8:	f7ff feb8 	bl	11b1c <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
   11dac:	e7ff      	b.n	11dae <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x22>
   11dae:	9803      	ldr	r0, [sp, #12]
   11db0:	9006      	str	r0, [sp, #24]
   11db2:	9007      	str	r0, [sp, #28]
   11db4:	9001      	str	r0, [sp, #4]
   11db6:	e7ff      	b.n	11db8 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x2c>
   11db8:	9801      	ldr	r0, [sp, #4]
   11dba:	b00a      	add	sp, #40	; 0x28
   11dbc:	bd80      	pop	{r7, pc}

00011dbe <_ZN4core3ptr5write17h4a80332de2cee3d3E>:
   11dbe:	b082      	sub	sp, #8
   11dc0:	9000      	str	r0, [sp, #0]
   11dc2:	9101      	str	r1, [sp, #4]
   11dc4:	6001      	str	r1, [r0, #0]
   11dc6:	b002      	add	sp, #8
   11dc8:	4770      	bx	lr

00011dca <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>:
   11dca:	b580      	push	{r7, lr}
   11dcc:	b084      	sub	sp, #16
   11dce:	9002      	str	r0, [sp, #8]
   11dd0:	9103      	str	r1, [sp, #12]
   11dd2:	f000 f805 	bl	11de0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>
   11dd6:	9001      	str	r0, [sp, #4]
   11dd8:	e7ff      	b.n	11dda <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E+0x10>
   11dda:	9801      	ldr	r0, [sp, #4]
   11ddc:	b004      	add	sp, #16
   11dde:	bd80      	pop	{r7, pc}

00011de0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>:
   11de0:	b084      	sub	sp, #16
   11de2:	9001      	str	r0, [sp, #4]
   11de4:	9102      	str	r1, [sp, #8]
   11de6:	4408      	add	r0, r1
   11de8:	9003      	str	r0, [sp, #12]
   11dea:	9803      	ldr	r0, [sp, #12]
   11dec:	9000      	str	r0, [sp, #0]
   11dee:	e7ff      	b.n	11df0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE+0x10>
   11df0:	9800      	ldr	r0, [sp, #0]
   11df2:	b004      	add	sp, #16
   11df4:	4770      	bx	lr

00011df6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>:
   11df6:	b580      	push	{r7, lr}
   11df8:	b084      	sub	sp, #16
   11dfa:	9002      	str	r0, [sp, #8]
   11dfc:	9103      	str	r1, [sp, #12]
   11dfe:	f000 f805 	bl	11e0c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>
   11e02:	9001      	str	r0, [sp, #4]
   11e04:	e7ff      	b.n	11e06 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE+0x10>
   11e06:	9801      	ldr	r0, [sp, #4]
   11e08:	b004      	add	sp, #16
   11e0a:	bd80      	pop	{r7, pc}

00011e0c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>:
   11e0c:	b084      	sub	sp, #16
   11e0e:	9001      	str	r0, [sp, #4]
   11e10:	9102      	str	r1, [sp, #8]
   11e12:	4408      	add	r0, r1
   11e14:	9003      	str	r0, [sp, #12]
   11e16:	9803      	ldr	r0, [sp, #12]
   11e18:	9000      	str	r0, [sp, #0]
   11e1a:	e7ff      	b.n	11e1c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE+0x10>
   11e1c:	9800      	ldr	r0, [sp, #0]
   11e1e:	b004      	add	sp, #16
   11e20:	4770      	bx	lr

00011e22 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>:
   11e22:	b580      	push	{r7, lr}
   11e24:	b08a      	sub	sp, #40	; 0x28
   11e26:	9009      	str	r0, [sp, #36]	; 0x24
   11e28:	2100      	movs	r1, #0
   11e2a:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   11e2e:	1d01      	adds	r1, r0, #4
   11e30:	9002      	str	r0, [sp, #8]
   11e32:	f7ff fe81 	bl	11b38 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>
   11e36:	9001      	str	r0, [sp, #4]
   11e38:	e7ff      	b.n	11e3a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x18>
   11e3a:	9801      	ldr	r0, [sp, #4]
   11e3c:	07c1      	lsls	r1, r0, #31
   11e3e:	2900      	cmp	r1, #0
   11e40:	d103      	bne.n	11e4a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x28>
   11e42:	e7ff      	b.n	11e44 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x22>
   11e44:	2000      	movs	r0, #0
   11e46:	9003      	str	r0, [sp, #12]
   11e48:	e021      	b.n	11e8e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
   11e4a:	2001      	movs	r0, #1
   11e4c:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11e50:	9902      	ldr	r1, [sp, #8]
   11e52:	9000      	str	r0, [sp, #0]
   11e54:	4608      	mov	r0, r1
   11e56:	9900      	ldr	r1, [sp, #0]
   11e58:	f7ff fe39 	bl	11ace <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>
   11e5c:	9106      	str	r1, [sp, #24]
   11e5e:	9005      	str	r0, [sp, #20]
   11e60:	e7ff      	b.n	11e62 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x40>
   11e62:	9805      	ldr	r0, [sp, #20]
   11e64:	2801      	cmp	r0, #1
   11e66:	d003      	beq.n	11e70 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x4e>
   11e68:	e7ff      	b.n	11e6a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x48>
   11e6a:	2000      	movs	r0, #0
   11e6c:	9003      	str	r0, [sp, #12]
   11e6e:	e021      	b.n	11eb4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
   11e70:	2000      	movs	r0, #0
   11e72:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11e76:	9806      	ldr	r0, [sp, #24]
   11e78:	9007      	str	r0, [sp, #28]
   11e7a:	a807      	add	r0, sp, #28
   11e7c:	9902      	ldr	r1, [sp, #8]
   11e7e:	f7ff fe67 	bl	11b50 <_ZN4core3mem4swap17hc4afbec7b5ffb125E>
   11e82:	e7ff      	b.n	11e84 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x62>
   11e84:	9807      	ldr	r0, [sp, #28]
   11e86:	9004      	str	r0, [sp, #16]
   11e88:	2001      	movs	r0, #1
   11e8a:	9003      	str	r0, [sp, #12]
   11e8c:	e012      	b.n	11eb4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
   11e8e:	9803      	ldr	r0, [sp, #12]
   11e90:	9904      	ldr	r1, [sp, #16]
   11e92:	b00a      	add	sp, #40	; 0x28
   11e94:	bd80      	pop	{r7, pc}
   11e96:	2000      	movs	r0, #0
   11e98:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11e9c:	e7f7      	b.n	11e8e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
   11e9e:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   11ea2:	07c0      	lsls	r0, r0, #31
   11ea4:	2800      	cmp	r0, #0
   11ea6:	d0f6      	beq.n	11e96 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   11ea8:	e7ff      	b.n	11eaa <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x88>
   11eaa:	2000      	movs	r0, #0
   11eac:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11eb0:	e7f1      	b.n	11e96 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   11eb2:	e7f0      	b.n	11e96 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   11eb4:	9805      	ldr	r0, [sp, #20]
   11eb6:	2801      	cmp	r0, #1
   11eb8:	d0f1      	beq.n	11e9e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x7c>
   11eba:	e7fa      	b.n	11eb2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x90>

00011ebc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>:
   11ebc:	b082      	sub	sp, #8
   11ebe:	9000      	str	r0, [sp, #0]
   11ec0:	9101      	str	r1, [sp, #4]
   11ec2:	b002      	add	sp, #8
   11ec4:	4770      	bx	lr

00011ec6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>:
   11ec6:	b580      	push	{r7, lr}
   11ec8:	b086      	sub	sp, #24
   11eca:	9003      	str	r0, [sp, #12]
   11ecc:	9104      	str	r1, [sp, #16]
   11ece:	9205      	str	r2, [sp, #20]
   11ed0:	9002      	str	r0, [sp, #8]
   11ed2:	4610      	mov	r0, r2
   11ed4:	9a02      	ldr	r2, [sp, #8]
   11ed6:	9101      	str	r1, [sp, #4]
   11ed8:	4611      	mov	r1, r2
   11eda:	9a01      	ldr	r2, [sp, #4]
   11edc:	f000 f846 	bl	11f6c <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>
   11ee0:	9000      	str	r0, [sp, #0]
   11ee2:	e7ff      	b.n	11ee4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E+0x1e>
   11ee4:	9800      	ldr	r0, [sp, #0]
   11ee6:	b006      	add	sp, #24
   11ee8:	bd80      	pop	{r7, pc}

00011eea <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>:
   11eea:	b084      	sub	sp, #16
   11eec:	9002      	str	r0, [sp, #8]
   11eee:	9103      	str	r1, [sp, #12]
   11ef0:	9000      	str	r0, [sp, #0]
   11ef2:	9101      	str	r1, [sp, #4]
   11ef4:	9801      	ldr	r0, [sp, #4]
   11ef6:	b004      	add	sp, #16
   11ef8:	4770      	bx	lr

00011efa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>:
   11efa:	b082      	sub	sp, #8
   11efc:	9000      	str	r0, [sp, #0]
   11efe:	9101      	str	r1, [sp, #4]
   11f00:	b002      	add	sp, #8
   11f02:	4770      	bx	lr

00011f04 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>:
   11f04:	b081      	sub	sp, #4
   11f06:	9000      	str	r0, [sp, #0]
   11f08:	b001      	add	sp, #4
   11f0a:	4770      	bx	lr

00011f0c <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>:
   11f0c:	b580      	push	{r7, lr}
   11f0e:	b082      	sub	sp, #8
   11f10:	9001      	str	r0, [sp, #4]
   11f12:	f7ff fff7 	bl	11f04 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>
   11f16:	9000      	str	r0, [sp, #0]
   11f18:	e7ff      	b.n	11f1a <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE+0xe>
   11f1a:	9800      	ldr	r0, [sp, #0]
   11f1c:	b002      	add	sp, #8
   11f1e:	bd80      	pop	{r7, pc}

00011f20 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>:
   11f20:	b580      	push	{r7, lr}
   11f22:	b084      	sub	sp, #16
   11f24:	9003      	str	r0, [sp, #12]
   11f26:	f7ff fff1 	bl	11f0c <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>
   11f2a:	9001      	str	r0, [sp, #4]
   11f2c:	e7ff      	b.n	11f2e <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E+0xe>
   11f2e:	9801      	ldr	r0, [sp, #4]
   11f30:	9002      	str	r0, [sp, #8]
   11f32:	9802      	ldr	r0, [sp, #8]
   11f34:	b004      	add	sp, #16
   11f36:	bd80      	pop	{r7, pc}

00011f38 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>:
   11f38:	b082      	sub	sp, #8
   11f3a:	9000      	str	r0, [sp, #0]
   11f3c:	9101      	str	r1, [sp, #4]
   11f3e:	b002      	add	sp, #8
   11f40:	4770      	bx	lr

00011f42 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>:
   11f42:	b580      	push	{r7, lr}
   11f44:	b086      	sub	sp, #24
   11f46:	9003      	str	r0, [sp, #12]
   11f48:	9104      	str	r1, [sp, #16]
   11f4a:	9205      	str	r2, [sp, #20]
   11f4c:	9002      	str	r0, [sp, #8]
   11f4e:	4608      	mov	r0, r1
   11f50:	4611      	mov	r1, r2
   11f52:	f7ff ffd2 	bl	11efa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
   11f56:	9001      	str	r0, [sp, #4]
   11f58:	e7ff      	b.n	11f5a <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x18>
   11f5a:	9801      	ldr	r0, [sp, #4]
   11f5c:	9902      	ldr	r1, [sp, #8]
   11f5e:	f7ff ff4a 	bl	11df6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>
   11f62:	9000      	str	r0, [sp, #0]
   11f64:	e7ff      	b.n	11f66 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x24>
   11f66:	9800      	ldr	r0, [sp, #0]
   11f68:	b006      	add	sp, #24
   11f6a:	bd80      	pop	{r7, pc}

00011f6c <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>:
   11f6c:	b580      	push	{r7, lr}
   11f6e:	b086      	sub	sp, #24
   11f70:	9003      	str	r0, [sp, #12]
   11f72:	9104      	str	r1, [sp, #16]
   11f74:	9205      	str	r2, [sp, #20]
   11f76:	9002      	str	r0, [sp, #8]
   11f78:	4608      	mov	r0, r1
   11f7a:	4611      	mov	r1, r2
   11f7c:	f7ff ff9e 	bl	11ebc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
   11f80:	9001      	str	r0, [sp, #4]
   11f82:	e7ff      	b.n	11f84 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x18>
   11f84:	9801      	ldr	r0, [sp, #4]
   11f86:	9902      	ldr	r1, [sp, #8]
   11f88:	f7ff ff1f 	bl	11dca <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11f8c:	9000      	str	r0, [sp, #0]
   11f8e:	e7ff      	b.n	11f90 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x24>
   11f90:	9800      	ldr	r0, [sp, #0]
   11f92:	b006      	add	sp, #24
   11f94:	bd80      	pop	{r7, pc}

00011f96 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>:
   11f96:	b081      	sub	sp, #4
   11f98:	b001      	add	sp, #4
   11f9a:	4770      	bx	lr

00011f9c <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>:
   11f9c:	b580      	push	{r7, lr}
   11f9e:	b086      	sub	sp, #24
   11fa0:	f8dd c020 	ldr.w	ip, [sp, #32]
   11fa4:	9102      	str	r1, [sp, #8]
   11fa6:	9203      	str	r2, [sp, #12]
   11fa8:	9304      	str	r3, [sp, #16]
   11faa:	f8cd c014 	str.w	ip, [sp, #20]
   11fae:	f04f 0e00 	mov.w	lr, #0
   11fb2:	f8cd e004 	str.w	lr, [sp, #4]
   11fb6:	f8cd e000 	str.w	lr, [sp]
   11fba:	f8cd e000 	str.w	lr, [sp]
   11fbe:	6001      	str	r1, [r0, #0]
   11fc0:	6042      	str	r2, [r0, #4]
   11fc2:	9900      	ldr	r1, [sp, #0]
   11fc4:	9a01      	ldr	r2, [sp, #4]
   11fc6:	6081      	str	r1, [r0, #8]
   11fc8:	60c2      	str	r2, [r0, #12]
   11fca:	6103      	str	r3, [r0, #16]
   11fcc:	f8c0 c014 	str.w	ip, [r0, #20]
   11fd0:	b006      	add	sp, #24
   11fd2:	bd80      	pop	{r7, pc}

00011fd4 <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>:
   11fd4:	b580      	push	{r7, lr}
   11fd6:	b084      	sub	sp, #16
   11fd8:	9101      	str	r1, [sp, #4]
   11fda:	9202      	str	r2, [sp, #8]
   11fdc:	9901      	ldr	r1, [sp, #4]
   11fde:	9a02      	ldr	r2, [sp, #8]
   11fe0:	f000 fa95 	bl	1250e <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>
   11fe4:	e7ff      	b.n	11fe6 <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE+0x12>
   11fe6:	b004      	add	sp, #16
   11fe8:	bd80      	pop	{r7, pc}

00011fea <_ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE>:
   11fea:	b081      	sub	sp, #4
   11fec:	9000      	str	r0, [sp, #0]
   11fee:	b001      	add	sp, #4
   11ff0:	4770      	bx	lr

00011ff2 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>:
   11ff2:	b081      	sub	sp, #4
   11ff4:	9000      	str	r0, [sp, #0]
   11ff6:	b001      	add	sp, #4
   11ff8:	4770      	bx	lr

00011ffa <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>:
   11ffa:	b580      	push	{r7, lr}
   11ffc:	b086      	sub	sp, #24
   11ffe:	460a      	mov	r2, r1
   12000:	9004      	str	r0, [sp, #16]
   12002:	f88d 1017 	strb.w	r1, [sp, #23]
   12006:	9203      	str	r2, [sp, #12]
   12008:	f7ff fff3 	bl	11ff2 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
   1200c:	9002      	str	r0, [sp, #8]
   1200e:	e7ff      	b.n	12010 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x16>
   12010:	9802      	ldr	r0, [sp, #8]
   12012:	9903      	ldr	r1, [sp, #12]
   12014:	f000 f806 	bl	12024 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
   12018:	9001      	str	r0, [sp, #4]
   1201a:	e7ff      	b.n	1201c <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x22>
   1201c:	9801      	ldr	r0, [sp, #4]
   1201e:	b006      	add	sp, #24
   12020:	bd80      	pop	{r7, pc}
	...

00012024 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>:
   12024:	b086      	sub	sp, #24
   12026:	460a      	mov	r2, r1
   12028:	f88d 100f 	strb.w	r1, [sp, #15]
   1202c:	9005      	str	r0, [sp, #20]
   1202e:	f89d 100f 	ldrb.w	r1, [sp, #15]
   12032:	9002      	str	r0, [sp, #8]
   12034:	9101      	str	r1, [sp, #4]
   12036:	9901      	ldr	r1, [sp, #4]
   12038:	e8df f001 	tbb	[pc, r1]
   1203c:	03102317 	.word	0x03102317
   12040:	001c      	.short	0x001c
   12042:	f640 002c 	movw	r0, #2092	; 0x82c
   12046:	f2c0 0002 	movt	r0, #2
   1204a:	f640 02a8 	movw	r2, #2216	; 0x8a8
   1204e:	f2c0 0202 	movt	r2, #2
   12052:	2131      	movs	r1, #49	; 0x31
   12054:	f005 fc88 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12058:	defe      	udf	#254	; 0xfe
   1205a:	defe      	udf	#254	; 0xfe
   1205c:	9802      	ldr	r0, [sp, #8]
   1205e:	6801      	ldr	r1, [r0, #0]
   12060:	f3bf 8f5f 	dmb	sy
   12064:	9104      	str	r1, [sp, #16]
   12066:	e7ff      	b.n	12068 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x44>
   12068:	e017      	b.n	1209a <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   1206a:	9802      	ldr	r0, [sp, #8]
   1206c:	6801      	ldr	r1, [r0, #0]
   1206e:	9104      	str	r1, [sp, #16]
   12070:	e7ff      	b.n	12072 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x4e>
   12072:	e012      	b.n	1209a <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   12074:	9802      	ldr	r0, [sp, #8]
   12076:	6801      	ldr	r1, [r0, #0]
   12078:	f3bf 8f5f 	dmb	sy
   1207c:	9104      	str	r1, [sp, #16]
   1207e:	e7ff      	b.n	12080 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x5c>
   12080:	e00b      	b.n	1209a <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   12082:	f640 00b8 	movw	r0, #2232	; 0x8b8
   12086:	f2c0 0002 	movt	r0, #2
   1208a:	f640 02a8 	movw	r2, #2216	; 0x8a8
   1208e:	f2c0 0202 	movt	r2, #2
   12092:	2128      	movs	r1, #40	; 0x28
   12094:	f005 fc68 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12098:	defe      	udf	#254	; 0xfe
   1209a:	9804      	ldr	r0, [sp, #16]
   1209c:	b006      	add	sp, #24
   1209e:	4770      	bx	lr

000120a0 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>:
   120a0:	b081      	sub	sp, #4
   120a2:	9000      	str	r0, [sp, #0]
   120a4:	6800      	ldr	r0, [r0, #0]
   120a6:	b001      	add	sp, #4
   120a8:	4770      	bx	lr

000120aa <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>:
   120aa:	b082      	sub	sp, #8
   120ac:	9001      	str	r0, [sp, #4]
   120ae:	6801      	ldr	r1, [r0, #0]
   120b0:	6840      	ldr	r0, [r0, #4]
   120b2:	9000      	str	r0, [sp, #0]
   120b4:	4608      	mov	r0, r1
   120b6:	9900      	ldr	r1, [sp, #0]
   120b8:	b002      	add	sp, #8
   120ba:	4770      	bx	lr

000120bc <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>:
   120bc:	b580      	push	{r7, lr}
   120be:	b08c      	sub	sp, #48	; 0x30
   120c0:	9101      	str	r1, [sp, #4]
   120c2:	9202      	str	r2, [sp, #8]
   120c4:	2100      	movs	r1, #0
   120c6:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   120ca:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   120ce:	2101      	movs	r1, #1
   120d0:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   120d4:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   120d8:	9901      	ldr	r1, [sp, #4]
   120da:	2900      	cmp	r1, #0
   120dc:	460a      	mov	r2, r1
   120de:	bf18      	it	ne
   120e0:	2201      	movne	r2, #1
   120e2:	2900      	cmp	r1, #0
   120e4:	9000      	str	r0, [sp, #0]
   120e6:	d001      	beq.n	120ec <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x30>
   120e8:	e7ff      	b.n	120ea <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x2e>
   120ea:	e008      	b.n	120fe <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x42>
   120ec:	2000      	movs	r0, #0
   120ee:	9900      	ldr	r1, [sp, #0]
   120f0:	6088      	str	r0, [r1, #8]
   120f2:	6048      	str	r0, [r1, #4]
   120f4:	6008      	str	r0, [r1, #0]
   120f6:	2002      	movs	r0, #2
   120f8:	6008      	str	r0, [r1, #0]
   120fa:	e021      	b.n	12140 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
   120fc:	defe      	udf	#254	; 0xfe
   120fe:	2000      	movs	r0, #0
   12100:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   12104:	9901      	ldr	r1, [sp, #4]
   12106:	9a02      	ldr	r2, [sp, #8]
   12108:	910a      	str	r1, [sp, #40]	; 0x28
   1210a:	920b      	str	r2, [sp, #44]	; 0x2c
   1210c:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   12110:	9106      	str	r1, [sp, #24]
   12112:	9207      	str	r2, [sp, #28]
   12114:	9906      	ldr	r1, [sp, #24]
   12116:	9a07      	ldr	r2, [sp, #28]
   12118:	a803      	add	r0, sp, #12
   1211a:	f7ff ff5b 	bl	11fd4 <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>
   1211e:	e7ff      	b.n	12120 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x64>
   12120:	9803      	ldr	r0, [sp, #12]
   12122:	9904      	ldr	r1, [sp, #16]
   12124:	9a05      	ldr	r2, [sp, #20]
   12126:	9b00      	ldr	r3, [sp, #0]
   12128:	609a      	str	r2, [r3, #8]
   1212a:	6059      	str	r1, [r3, #4]
   1212c:	6018      	str	r0, [r3, #0]
   1212e:	e007      	b.n	12140 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
   12130:	9801      	ldr	r0, [sp, #4]
   12132:	2800      	cmp	r0, #0
   12134:	d10c      	bne.n	12150 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x94>
   12136:	e015      	b.n	12164 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa8>
   12138:	2000      	movs	r0, #0
   1213a:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   1213e:	e7f7      	b.n	12130 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
   12140:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   12144:	07c0      	lsls	r0, r0, #31
   12146:	2800      	cmp	r0, #0
   12148:	d1f6      	bne.n	12138 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x7c>
   1214a:	e7f1      	b.n	12130 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
   1214c:	b00c      	add	sp, #48	; 0x30
   1214e:	bd80      	pop	{r7, pc}
   12150:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   12154:	07c0      	lsls	r0, r0, #31
   12156:	2800      	cmp	r0, #0
   12158:	d0f8      	beq.n	1214c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
   1215a:	e7ff      	b.n	1215c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa0>
   1215c:	2000      	movs	r0, #0
   1215e:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   12162:	e7f3      	b.n	1214c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
   12164:	e7f2      	b.n	1214c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>

00012166 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>:
   12166:	b081      	sub	sp, #4
   12168:	b001      	add	sp, #4
   1216a:	4770      	bx	lr

0001216c <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>:
   1216c:	b5b0      	push	{r4, r5, r7, lr}
   1216e:	b081      	sub	sp, #4
   12170:	9100      	str	r1, [sp, #0]
   12172:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   12176:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
   1217a:	b001      	add	sp, #4
   1217c:	bdb0      	pop	{r4, r5, r7, pc}

0001217e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>:
   1217e:	b580      	push	{r7, lr}
   12180:	b088      	sub	sp, #32
   12182:	9106      	str	r1, [sp, #24]
   12184:	680a      	ldr	r2, [r1, #0]
   12186:	1e93      	subs	r3, r2, #2
   12188:	bf18      	it	ne
   1218a:	2301      	movne	r3, #1
   1218c:	2a02      	cmp	r2, #2
   1218e:	9102      	str	r1, [sp, #8]
   12190:	9001      	str	r0, [sp, #4]
   12192:	d001      	beq.n	12198 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x1a>
   12194:	e7ff      	b.n	12196 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x18>
   12196:	e008      	b.n	121aa <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x2c>
   12198:	2000      	movs	r0, #0
   1219a:	9901      	ldr	r1, [sp, #4]
   1219c:	6088      	str	r0, [r1, #8]
   1219e:	6048      	str	r0, [r1, #4]
   121a0:	6008      	str	r0, [r1, #0]
   121a2:	2002      	movs	r0, #2
   121a4:	6008      	str	r0, [r1, #0]
   121a6:	e00f      	b.n	121c8 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
   121a8:	defe      	udf	#254	; 0xfe
   121aa:	9802      	ldr	r0, [sp, #8]
   121ac:	9007      	str	r0, [sp, #28]
   121ae:	a803      	add	r0, sp, #12
   121b0:	9902      	ldr	r1, [sp, #8]
   121b2:	f000 f9b5 	bl	12520 <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>
   121b6:	e7ff      	b.n	121b8 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x3a>
   121b8:	9803      	ldr	r0, [sp, #12]
   121ba:	9904      	ldr	r1, [sp, #16]
   121bc:	9a05      	ldr	r2, [sp, #20]
   121be:	9b01      	ldr	r3, [sp, #4]
   121c0:	609a      	str	r2, [r3, #8]
   121c2:	6059      	str	r1, [r3, #4]
   121c4:	6018      	str	r0, [r3, #0]
   121c6:	e7ff      	b.n	121c8 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
   121c8:	b008      	add	sp, #32
   121ca:	bd80      	pop	{r7, pc}

000121cc <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>:
   121cc:	b580      	push	{r7, lr}
   121ce:	b086      	sub	sp, #24
   121d0:	9004      	str	r0, [sp, #16]
   121d2:	6801      	ldr	r1, [r0, #0]
   121d4:	2900      	cmp	r1, #0
   121d6:	9001      	str	r0, [sp, #4]
   121d8:	d001      	beq.n	121de <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x12>
   121da:	e7ff      	b.n	121dc <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x10>
   121dc:	e003      	b.n	121e6 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x1a>
   121de:	2000      	movs	r0, #0
   121e0:	9002      	str	r0, [sp, #8]
   121e2:	e00d      	b.n	12200 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
   121e4:	defe      	udf	#254	; 0xfe
   121e6:	9801      	ldr	r0, [sp, #4]
   121e8:	1d01      	adds	r1, r0, #4
   121ea:	9105      	str	r1, [sp, #20]
   121ec:	4608      	mov	r0, r1
   121ee:	f7ff ff57 	bl	120a0 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>
   121f2:	9000      	str	r0, [sp, #0]
   121f4:	e7ff      	b.n	121f6 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x2a>
   121f6:	9800      	ldr	r0, [sp, #0]
   121f8:	9003      	str	r0, [sp, #12]
   121fa:	2101      	movs	r1, #1
   121fc:	9102      	str	r1, [sp, #8]
   121fe:	e7ff      	b.n	12200 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
   12200:	9802      	ldr	r0, [sp, #8]
   12202:	9903      	ldr	r1, [sp, #12]
   12204:	b006      	add	sp, #24
   12206:	bd80      	pop	{r7, pc}

00012208 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>:
    fn clone(&self) -> Level {
   12208:	b081      	sub	sp, #4
   1220a:	9000      	str	r0, [sp, #0]
        *self
   1220c:	6800      	ldr	r0, [r0, #0]
    }
   1220e:	b001      	add	sp, #4
   12210:	4770      	bx	lr

00012212 <_ZN3log6Record7builder17hde62ab0132265febE>:
    pub fn builder() -> RecordBuilder<'a> {
   12212:	b580      	push	{r7, lr}
        RecordBuilder::new()
   12214:	f000 f802 	bl	1221c <_ZN3log13RecordBuilder3new17haca8312579858419E>
   12218:	e7ff      	b.n	1221a <_ZN3log6Record7builder17hde62ab0132265febE+0x8>
    }
   1221a:	bd80      	pop	{r7, pc}

0001221c <_ZN3log13RecordBuilder3new17haca8312579858419E>:
    pub fn new() -> RecordBuilder<'a> {
   1221c:	b570      	push	{r4, r5, r6, lr}
   1221e:	b0aa      	sub	sp, #168	; 0xa8
                args: format_args!(""),
   12220:	f640 01f8 	movw	r1, #2296	; 0x8f8
   12224:	f2c0 0102 	movt	r1, #2
   12228:	6809      	ldr	r1, [r1, #0]
   1222a:	466a      	mov	r2, sp
   1222c:	2300      	movs	r3, #0
   1222e:	6013      	str	r3, [r2, #0]
   12230:	aa16      	add	r2, sp, #88	; 0x58
   12232:	9004      	str	r0, [sp, #16]
   12234:	4610      	mov	r0, r2
   12236:	9103      	str	r1, [sp, #12]
   12238:	461a      	mov	r2, r3
   1223a:	9b03      	ldr	r3, [sp, #12]
   1223c:	f7ff feae 	bl	11f9c <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>
   12240:	e7ff      	b.n	12242 <_ZN3log13RecordBuilder3new17haca8312579858419E+0x26>
   12242:	a81f      	add	r0, sp, #124	; 0x7c
                metadata: Metadata::builder().build(),
   12244:	f000 f891 	bl	1236a <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>
   12248:	e7ff      	b.n	1224a <_ZN3log13RecordBuilder3new17haca8312579858419E+0x2e>
   1224a:	a81c      	add	r0, sp, #112	; 0x70
   1224c:	a91f      	add	r1, sp, #124	; 0x7c
   1224e:	f000 f8a5 	bl	1239c <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>
   12252:	e7ff      	b.n	12254 <_ZN3log13RecordBuilder3new17haca8312579858419E+0x38>
   12254:	2000      	movs	r0, #0
                module_path: None,
   12256:	9024      	str	r0, [sp, #144]	; 0x90
   12258:	9023      	str	r0, [sp, #140]	; 0x8c
   1225a:	9022      	str	r0, [sp, #136]	; 0x88
   1225c:	2102      	movs	r1, #2
   1225e:	9122      	str	r1, [sp, #136]	; 0x88
                file: None,
   12260:	9027      	str	r0, [sp, #156]	; 0x9c
   12262:	9026      	str	r0, [sp, #152]	; 0x98
   12264:	9025      	str	r0, [sp, #148]	; 0x94
   12266:	9125      	str	r1, [sp, #148]	; 0x94
                line: None,
   12268:	9028      	str	r0, [sp, #160]	; 0xa0
            record: Record {
   1226a:	981c      	ldr	r0, [sp, #112]	; 0x70
   1226c:	991d      	ldr	r1, [sp, #116]	; 0x74
   1226e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   12270:	9207      	str	r2, [sp, #28]
   12272:	9106      	str	r1, [sp, #24]
   12274:	9005      	str	r0, [sp, #20]
   12276:	a805      	add	r0, sp, #20
   12278:	f100 010c 	add.w	r1, r0, #12
   1227c:	aa16      	add	r2, sp, #88	; 0x58
   1227e:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   12282:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
   12286:	9922      	ldr	r1, [sp, #136]	; 0x88
   12288:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   1228a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1228c:	9310      	str	r3, [sp, #64]	; 0x40
   1228e:	920f      	str	r2, [sp, #60]	; 0x3c
   12290:	910e      	str	r1, [sp, #56]	; 0x38
   12292:	9925      	ldr	r1, [sp, #148]	; 0x94
   12294:	9a26      	ldr	r2, [sp, #152]	; 0x98
   12296:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   12298:	9313      	str	r3, [sp, #76]	; 0x4c
   1229a:	9212      	str	r2, [sp, #72]	; 0x48
   1229c:	9111      	str	r1, [sp, #68]	; 0x44
   1229e:	9928      	ldr	r1, [sp, #160]	; 0xa0
   122a0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   122a2:	9114      	str	r1, [sp, #80]	; 0x50
   122a4:	9215      	str	r2, [sp, #84]	; 0x54
   122a6:	2244      	movs	r2, #68	; 0x44
        return RecordBuilder {
   122a8:	9904      	ldr	r1, [sp, #16]
   122aa:	9002      	str	r0, [sp, #8]
   122ac:	4608      	mov	r0, r1
   122ae:	9902      	ldr	r1, [sp, #8]
   122b0:	f00b ff2e 	bl	1e110 <__aeabi_memcpy>
    }
   122b4:	b02a      	add	sp, #168	; 0xa8
   122b6:	bd70      	pop	{r4, r5, r6, pc}

000122b8 <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>:
    pub fn args(&mut self, args: fmt::Arguments<'a>) -> &mut RecordBuilder<'a> {
   122b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   122ba:	b087      	sub	sp, #28
   122bc:	9006      	str	r0, [sp, #24]
   122be:	466a      	mov	r2, sp
        self.record.args = args;
   122c0:	4613      	mov	r3, r2
   122c2:	e891 50f0 	ldmia.w	r1, {r4, r5, r6, r7, ip, lr}
   122c6:	e883 50f0 	stmia.w	r3, {r4, r5, r6, r7, ip, lr}
   122ca:	f100 010c 	add.w	r1, r0, #12
   122ce:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   122d2:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
    }
   122d6:	b007      	add	sp, #28
   122d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000122da <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>:
    pub fn level(&mut self, level: Level) -> &mut RecordBuilder<'a> {
   122da:	b082      	sub	sp, #8
   122dc:	9000      	str	r0, [sp, #0]
   122de:	9101      	str	r1, [sp, #4]
        self.record.metadata.level = level;
   122e0:	6001      	str	r1, [r0, #0]
    }
   122e2:	b002      	add	sp, #8
   122e4:	4770      	bx	lr

000122e6 <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>:
    pub fn target(&mut self, target: &'a str) -> &mut RecordBuilder<'a> {
   122e6:	b083      	sub	sp, #12
   122e8:	9000      	str	r0, [sp, #0]
   122ea:	9101      	str	r1, [sp, #4]
   122ec:	9202      	str	r2, [sp, #8]
        self.record.metadata.target = target;
   122ee:	6041      	str	r1, [r0, #4]
   122f0:	6082      	str	r2, [r0, #8]
    }
   122f2:	b003      	add	sp, #12
   122f4:	4770      	bx	lr

000122f6 <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>:
    pub fn module_path_static(&mut self, path: Option<&'static str>) -> &mut RecordBuilder<'a> {
   122f6:	b580      	push	{r7, lr}
   122f8:	b088      	sub	sp, #32
   122fa:	9005      	str	r0, [sp, #20]
   122fc:	9106      	str	r1, [sp, #24]
   122fe:	9207      	str	r2, [sp, #28]
   12300:	ab02      	add	r3, sp, #8
        self.record.module_path = path.map(MaybeStaticStr::Static);
   12302:	9001      	str	r0, [sp, #4]
   12304:	4618      	mov	r0, r3
   12306:	f7ff fed9 	bl	120bc <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
   1230a:	e7ff      	b.n	1230c <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE+0x16>
   1230c:	9802      	ldr	r0, [sp, #8]
   1230e:	9903      	ldr	r1, [sp, #12]
   12310:	9a04      	ldr	r2, [sp, #16]
   12312:	9b01      	ldr	r3, [sp, #4]
   12314:	62da      	str	r2, [r3, #44]	; 0x2c
   12316:	6299      	str	r1, [r3, #40]	; 0x28
   12318:	6258      	str	r0, [r3, #36]	; 0x24
    }
   1231a:	4618      	mov	r0, r3
   1231c:	b008      	add	sp, #32
   1231e:	bd80      	pop	{r7, pc}

00012320 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>:
    pub fn file_static(&mut self, file: Option<&'static str>) -> &mut RecordBuilder<'a> {
   12320:	b580      	push	{r7, lr}
   12322:	b088      	sub	sp, #32
   12324:	9005      	str	r0, [sp, #20]
   12326:	9106      	str	r1, [sp, #24]
   12328:	9207      	str	r2, [sp, #28]
   1232a:	ab02      	add	r3, sp, #8
        self.record.file = file.map(MaybeStaticStr::Static);
   1232c:	9001      	str	r0, [sp, #4]
   1232e:	4618      	mov	r0, r3
   12330:	f7ff fec4 	bl	120bc <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
   12334:	e7ff      	b.n	12336 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E+0x16>
   12336:	9802      	ldr	r0, [sp, #8]
   12338:	9903      	ldr	r1, [sp, #12]
   1233a:	9a04      	ldr	r2, [sp, #16]
   1233c:	9b01      	ldr	r3, [sp, #4]
   1233e:	639a      	str	r2, [r3, #56]	; 0x38
   12340:	6359      	str	r1, [r3, #52]	; 0x34
   12342:	6318      	str	r0, [r3, #48]	; 0x30
    }
   12344:	4618      	mov	r0, r3
   12346:	b008      	add	sp, #32
   12348:	bd80      	pop	{r7, pc}

0001234a <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>:
    pub fn line(&mut self, line: Option<u32>) -> &mut RecordBuilder<'a> {
   1234a:	b083      	sub	sp, #12
   1234c:	9000      	str	r0, [sp, #0]
   1234e:	9101      	str	r1, [sp, #4]
   12350:	9202      	str	r2, [sp, #8]
        self.record.line = line;
   12352:	63c1      	str	r1, [r0, #60]	; 0x3c
   12354:	6402      	str	r2, [r0, #64]	; 0x40
    }
   12356:	b003      	add	sp, #12
   12358:	4770      	bx	lr

0001235a <_ZN3log13RecordBuilder5build17h83529556a009112eE>:
    pub fn build(&self) -> Record<'a> {
   1235a:	b580      	push	{r7, lr}
   1235c:	b082      	sub	sp, #8
   1235e:	9101      	str	r1, [sp, #4]
        self.record.clone()
   12360:	f000 f8e8 	bl	12534 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>
   12364:	e7ff      	b.n	12366 <_ZN3log13RecordBuilder5build17h83529556a009112eE+0xc>
    }
   12366:	b002      	add	sp, #8
   12368:	bd80      	pop	{r7, pc}

0001236a <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>:
    pub fn builder() -> MetadataBuilder<'a> {
   1236a:	b580      	push	{r7, lr}
        MetadataBuilder::new()
   1236c:	f000 f802 	bl	12374 <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>
   12370:	e7ff      	b.n	12372 <_ZN3log8Metadata7builder17ha56bd59835d60a3cE+0x8>
    }
   12372:	bd80      	pop	{r7, pc}

00012374 <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>:
    pub fn new() -> MetadataBuilder<'a> {
   12374:	b084      	sub	sp, #16
   12376:	2103      	movs	r1, #3
                level: Level::Info,
   12378:	9103      	str	r1, [sp, #12]
            metadata: Metadata {
   1237a:	9903      	ldr	r1, [sp, #12]
   1237c:	9100      	str	r1, [sp, #0]
   1237e:	f640 01e0 	movw	r1, #2272	; 0x8e0
   12382:	f2c0 0102 	movt	r1, #2
   12386:	9101      	str	r1, [sp, #4]
   12388:	2100      	movs	r1, #0
   1238a:	9102      	str	r1, [sp, #8]
        MetadataBuilder {
   1238c:	9900      	ldr	r1, [sp, #0]
   1238e:	9a01      	ldr	r2, [sp, #4]
   12390:	9b02      	ldr	r3, [sp, #8]
   12392:	6083      	str	r3, [r0, #8]
   12394:	6042      	str	r2, [r0, #4]
   12396:	6001      	str	r1, [r0, #0]
    }
   12398:	b004      	add	sp, #16
   1239a:	4770      	bx	lr

0001239c <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>:
    pub fn build(&self) -> Metadata<'a> {
   1239c:	b580      	push	{r7, lr}
   1239e:	b082      	sub	sp, #8
   123a0:	9101      	str	r1, [sp, #4]
        self.metadata.clone()
   123a2:	f000 f91c 	bl	125de <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
   123a6:	e7ff      	b.n	123a8 <_ZN3log15MetadataBuilder5build17h2478972692162fc0E+0xc>
    }
   123a8:	b002      	add	sp, #8
   123aa:	bd80      	pop	{r7, pc}

000123ac <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE>:
    fn enabled(&self, _: &Metadata) -> bool {
   123ac:	b082      	sub	sp, #8
   123ae:	9000      	str	r0, [sp, #0]
   123b0:	9101      	str	r1, [sp, #4]
   123b2:	2000      	movs	r0, #0
    }
   123b4:	b002      	add	sp, #8
   123b6:	4770      	bx	lr

000123b8 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE>:
    fn log(&self, _: &Record) {}
   123b8:	b082      	sub	sp, #8
   123ba:	9000      	str	r0, [sp, #0]
   123bc:	9101      	str	r1, [sp, #4]
   123be:	b002      	add	sp, #8
   123c0:	4770      	bx	lr

000123c2 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE>:
    fn flush(&self) {}
   123c2:	b081      	sub	sp, #4
   123c4:	9000      	str	r0, [sp, #0]
   123c6:	b001      	add	sp, #4
   123c8:	4770      	bx	lr

000123ca <_ZN3log6logger17hf609e7cc1c031552E>:
}

/// Returns a reference to the logger.
///
/// If a logger has not been set, a no-op implementation is returned.
pub fn logger() -> &'static Log {
   123ca:	b580      	push	{r7, lr}
   123cc:	b084      	sub	sp, #16
   123ce:	2004      	movs	r0, #4
    unsafe {
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   123d0:	f88d 000f 	strb.w	r0, [sp, #15]
   123d4:	f89d 100f 	ldrb.w	r1, [sp, #15]
   123d8:	f644 2068 	movw	r0, #19048	; 0x4a68
   123dc:	f2c2 0000 	movt	r0, #8192	; 0x2000
   123e0:	f7ff fe0b 	bl	11ffa <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>
   123e4:	9000      	str	r0, [sp, #0]
   123e6:	e7ff      	b.n	123e8 <_ZN3log6logger17hf609e7cc1c031552E+0x1e>
   123e8:	9800      	ldr	r0, [sp, #0]
   123ea:	2802      	cmp	r0, #2
   123ec:	d109      	bne.n	12402 <_ZN3log6logger17hf609e7cc1c031552E+0x38>
   123ee:	e7ff      	b.n	123f0 <_ZN3log6logger17hf609e7cc1c031552E+0x26>
            static NOP: NopLogger = NopLogger;
            &NOP
        } else {
            LOGGER
   123f0:	f240 00f0 	movw	r0, #240	; 0xf0
   123f4:	f2c2 0000 	movt	r0, #8192	; 0x2000
   123f8:	6801      	ldr	r1, [r0, #0]
   123fa:	6840      	ldr	r0, [r0, #4]
   123fc:	9101      	str	r1, [sp, #4]
   123fe:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   12400:	e00a      	b.n	12418 <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
            &NOP
   12402:	f640 1014 	movw	r0, #2324	; 0x914
   12406:	f2c0 0002 	movt	r0, #2
   1240a:	9001      	str	r0, [sp, #4]
   1240c:	f640 00fc 	movw	r0, #2300	; 0x8fc
   12410:	f2c0 0002 	movt	r0, #2
   12414:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   12416:	e7ff      	b.n	12418 <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
   12418:	9801      	ldr	r0, [sp, #4]
   1241a:	9902      	ldr	r1, [sp, #8]
        }
    }
}
   1241c:	b004      	add	sp, #16
   1241e:	bd80      	pop	{r7, pc}

00012420 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>:

// WARNING: this is not part of the crate's public API and is subject to change at any time
#[doc(hidden)]
pub fn __private_api_log(
   12420:	b570      	push	{r4, r5, r6, lr}
   12422:	b0ca      	sub	sp, #296	; 0x128
   12424:	9141      	str	r1, [sp, #260]	; 0x104
   12426:	9242      	str	r2, [sp, #264]	; 0x108
    args: fmt::Arguments,
    level: Level,
    &(target, module_path, file, line): &(&str, &'static str, &'static str, u32),
   12428:	6813      	ldr	r3, [r2, #0]
   1242a:	f8d2 c004 	ldr.w	ip, [r2, #4]
   1242e:	9343      	str	r3, [sp, #268]	; 0x10c
   12430:	f8cd c110 	str.w	ip, [sp, #272]	; 0x110
   12434:	f8d2 e008 	ldr.w	lr, [r2, #8]
   12438:	68d4      	ldr	r4, [r2, #12]
   1243a:	f8cd e114 	str.w	lr, [sp, #276]	; 0x114
   1243e:	9446      	str	r4, [sp, #280]	; 0x118
   12440:	6915      	ldr	r5, [r2, #16]
   12442:	6956      	ldr	r6, [r2, #20]
   12444:	9547      	str	r5, [sp, #284]	; 0x11c
   12446:	9648      	str	r6, [sp, #288]	; 0x120
   12448:	6992      	ldr	r2, [r2, #24]
   1244a:	9249      	str	r2, [sp, #292]	; 0x124
) {
    logger().log(
   1244c:	9112      	str	r1, [sp, #72]	; 0x48
   1244e:	9011      	str	r0, [sp, #68]	; 0x44
   12450:	9310      	str	r3, [sp, #64]	; 0x40
   12452:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   12456:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   1245a:	940d      	str	r4, [sp, #52]	; 0x34
   1245c:	950c      	str	r5, [sp, #48]	; 0x30
   1245e:	960b      	str	r6, [sp, #44]	; 0x2c
   12460:	920a      	str	r2, [sp, #40]	; 0x28
   12462:	f7ff ffb2 	bl	123ca <_ZN3log6logger17hf609e7cc1c031552E>
   12466:	9009      	str	r0, [sp, #36]	; 0x24
   12468:	9108      	str	r1, [sp, #32]
   1246a:	e7ff      	b.n	1246c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x4c>
   1246c:	a824      	add	r0, sp, #144	; 0x90
        &Record::builder()
   1246e:	f7ff fed0 	bl	12212 <_ZN3log6Record7builder17hde62ab0132265febE>
   12472:	e7ff      	b.n	12474 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x54>
   12474:	a835      	add	r0, sp, #212	; 0xd4
            .args(args)
   12476:	4601      	mov	r1, r0
   12478:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1247a:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   1247e:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
   12482:	a924      	add	r1, sp, #144	; 0x90
        &Record::builder()
   12484:	9007      	str	r0, [sp, #28]
   12486:	4608      	mov	r0, r1
   12488:	9907      	ldr	r1, [sp, #28]
   1248a:	f7ff ff15 	bl	122b8 <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>
   1248e:	9006      	str	r0, [sp, #24]
   12490:	e7ff      	b.n	12492 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x72>
   12492:	9806      	ldr	r0, [sp, #24]
   12494:	9912      	ldr	r1, [sp, #72]	; 0x48
   12496:	f7ff ff20 	bl	122da <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>
   1249a:	9005      	str	r0, [sp, #20]
   1249c:	e7ff      	b.n	1249e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x7e>
   1249e:	9805      	ldr	r0, [sp, #20]
   124a0:	9910      	ldr	r1, [sp, #64]	; 0x40
   124a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   124a4:	f7ff ff1f 	bl	122e6 <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>
   124a8:	9004      	str	r0, [sp, #16]
   124aa:	e7ff      	b.n	124ac <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x8c>
            .level(level)
            .target(target)
            .module_path_static(Some(module_path))
   124ac:	980e      	ldr	r0, [sp, #56]	; 0x38
   124ae:	903b      	str	r0, [sp, #236]	; 0xec
   124b0:	990d      	ldr	r1, [sp, #52]	; 0x34
   124b2:	913c      	str	r1, [sp, #240]	; 0xf0
        &Record::builder()
   124b4:	993b      	ldr	r1, [sp, #236]	; 0xec
   124b6:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
   124b8:	9804      	ldr	r0, [sp, #16]
   124ba:	f7ff ff1c 	bl	122f6 <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>
   124be:	9003      	str	r0, [sp, #12]
   124c0:	e7ff      	b.n	124c2 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xa2>
            .file_static(Some(file))
   124c2:	980c      	ldr	r0, [sp, #48]	; 0x30
   124c4:	903d      	str	r0, [sp, #244]	; 0xf4
   124c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   124c8:	913e      	str	r1, [sp, #248]	; 0xf8
        &Record::builder()
   124ca:	993d      	ldr	r1, [sp, #244]	; 0xf4
   124cc:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
   124ce:	9803      	ldr	r0, [sp, #12]
   124d0:	f7ff ff26 	bl	12320 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>
   124d4:	9002      	str	r0, [sp, #8]
   124d6:	e7ff      	b.n	124d8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xb8>
            .line(Some(line))
   124d8:	980a      	ldr	r0, [sp, #40]	; 0x28
   124da:	9040      	str	r0, [sp, #256]	; 0x100
   124dc:	2101      	movs	r1, #1
   124de:	913f      	str	r1, [sp, #252]	; 0xfc
        &Record::builder()
   124e0:	993f      	ldr	r1, [sp, #252]	; 0xfc
   124e2:	9a40      	ldr	r2, [sp, #256]	; 0x100
   124e4:	9802      	ldr	r0, [sp, #8]
   124e6:	f7ff ff30 	bl	1234a <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>
   124ea:	9001      	str	r0, [sp, #4]
   124ec:	e7ff      	b.n	124ee <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xce>
   124ee:	a813      	add	r0, sp, #76	; 0x4c
   124f0:	9901      	ldr	r1, [sp, #4]
   124f2:	f7ff ff32 	bl	1235a <_ZN3log13RecordBuilder5build17h83529556a009112eE>
   124f6:	e7ff      	b.n	124f8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xd8>
    logger().log(
   124f8:	9808      	ldr	r0, [sp, #32]
   124fa:	6901      	ldr	r1, [r0, #16]
   124fc:	aa13      	add	r2, sp, #76	; 0x4c
   124fe:	9809      	ldr	r0, [sp, #36]	; 0x24
   12500:	9100      	str	r1, [sp, #0]
   12502:	4611      	mov	r1, r2
   12504:	9a00      	ldr	r2, [sp, #0]
   12506:	4790      	blx	r2
   12508:	e7ff      	b.n	1250a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xea>
            .build(),
    );
}
   1250a:	b04a      	add	sp, #296	; 0x128
   1250c:	bd70      	pop	{r4, r5, r6, pc}

0001250e <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>:
    Static(&'static str),
   1250e:	b082      	sub	sp, #8
   12510:	9100      	str	r1, [sp, #0]
   12512:	9201      	str	r2, [sp, #4]
   12514:	6041      	str	r1, [r0, #4]
   12516:	6082      	str	r2, [r0, #8]
   12518:	2100      	movs	r1, #0
   1251a:	6001      	str	r1, [r0, #0]
   1251c:	b002      	add	sp, #8
   1251e:	4770      	bx	lr

00012520 <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>:
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   12520:	b081      	sub	sp, #4
   12522:	9100      	str	r1, [sp, #0]
   12524:	680a      	ldr	r2, [r1, #0]
   12526:	684b      	ldr	r3, [r1, #4]
   12528:	6889      	ldr	r1, [r1, #8]
   1252a:	6081      	str	r1, [r0, #8]
   1252c:	6043      	str	r3, [r0, #4]
   1252e:	6002      	str	r2, [r0, #0]
   12530:	b001      	add	sp, #4
   12532:	4770      	bx	lr

00012534 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>:
#[derive(Clone, Debug)]
   12534:	b570      	push	{r4, r5, r6, lr}
   12536:	b09c      	sub	sp, #112	; 0x70
   12538:	9116      	str	r1, [sp, #88]	; 0x58
    metadata: Metadata<'a>,
   1253a:	9117      	str	r1, [sp, #92]	; 0x5c
    args: fmt::Arguments<'a>,
   1253c:	f101 020c 	add.w	r2, r1, #12
   12540:	4613      	mov	r3, r2
   12542:	9218      	str	r2, [sp, #96]	; 0x60
    module_path: Option<MaybeStaticStr<'a>>,
   12544:	f101 0224 	add.w	r2, r1, #36	; 0x24
   12548:	4694      	mov	ip, r2
   1254a:	9219      	str	r2, [sp, #100]	; 0x64
    file: Option<MaybeStaticStr<'a>>,
   1254c:	f101 0230 	add.w	r2, r1, #48	; 0x30
   12550:	4696      	mov	lr, r2
   12552:	921a      	str	r2, [sp, #104]	; 0x68
    line: Option<u32>,
   12554:	f101 023c 	add.w	r2, r1, #60	; 0x3c
   12558:	4614      	mov	r4, r2
   1255a:	921b      	str	r2, [sp, #108]	; 0x6c
   1255c:	aa07      	add	r2, sp, #28
    metadata: Metadata<'a>,
   1255e:	9006      	str	r0, [sp, #24]
   12560:	4610      	mov	r0, r2
   12562:	9305      	str	r3, [sp, #20]
   12564:	f8cd c010 	str.w	ip, [sp, #16]
   12568:	f8cd e00c 	str.w	lr, [sp, #12]
   1256c:	9402      	str	r4, [sp, #8]
   1256e:	f000 f836 	bl	125de <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
   12572:	e7ff      	b.n	12574 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x40>
   12574:	a80a      	add	r0, sp, #40	; 0x28
    args: fmt::Arguments<'a>,
   12576:	9905      	ldr	r1, [sp, #20]
   12578:	f7ff fdf8 	bl	1216c <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>
   1257c:	e7ff      	b.n	1257e <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x4a>
   1257e:	a810      	add	r0, sp, #64	; 0x40
    module_path: Option<MaybeStaticStr<'a>>,
   12580:	9904      	ldr	r1, [sp, #16]
   12582:	f7ff fdfc 	bl	1217e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
   12586:	e7ff      	b.n	12588 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x54>
   12588:	a813      	add	r0, sp, #76	; 0x4c
    file: Option<MaybeStaticStr<'a>>,
   1258a:	9903      	ldr	r1, [sp, #12]
   1258c:	f7ff fdf7 	bl	1217e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
   12590:	e7ff      	b.n	12592 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x5e>
    line: Option<u32>,
   12592:	9802      	ldr	r0, [sp, #8]
   12594:	f7ff fe1a 	bl	121cc <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>
   12598:	9001      	str	r0, [sp, #4]
   1259a:	9100      	str	r1, [sp, #0]
   1259c:	e7ff      	b.n	1259e <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x6a>
#[derive(Clone, Debug)]
   1259e:	9807      	ldr	r0, [sp, #28]
   125a0:	9908      	ldr	r1, [sp, #32]
   125a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   125a4:	9b06      	ldr	r3, [sp, #24]
   125a6:	609a      	str	r2, [r3, #8]
   125a8:	6059      	str	r1, [r3, #4]
   125aa:	6018      	str	r0, [r3, #0]
   125ac:	f103 000c 	add.w	r0, r3, #12
   125b0:	a90a      	add	r1, sp, #40	; 0x28
   125b2:	e891 5074 	ldmia.w	r1, {r2, r4, r5, r6, ip, lr}
   125b6:	e880 5074 	stmia.w	r0, {r2, r4, r5, r6, ip, lr}
   125ba:	9810      	ldr	r0, [sp, #64]	; 0x40
   125bc:	9911      	ldr	r1, [sp, #68]	; 0x44
   125be:	9a12      	ldr	r2, [sp, #72]	; 0x48
   125c0:	62da      	str	r2, [r3, #44]	; 0x2c
   125c2:	6299      	str	r1, [r3, #40]	; 0x28
   125c4:	6258      	str	r0, [r3, #36]	; 0x24
   125c6:	9813      	ldr	r0, [sp, #76]	; 0x4c
   125c8:	9914      	ldr	r1, [sp, #80]	; 0x50
   125ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
   125cc:	639a      	str	r2, [r3, #56]	; 0x38
   125ce:	6359      	str	r1, [r3, #52]	; 0x34
   125d0:	6318      	str	r0, [r3, #48]	; 0x30
   125d2:	9801      	ldr	r0, [sp, #4]
   125d4:	63d8      	str	r0, [r3, #60]	; 0x3c
   125d6:	9900      	ldr	r1, [sp, #0]
   125d8:	6419      	str	r1, [r3, #64]	; 0x40
   125da:	b01c      	add	sp, #112	; 0x70
   125dc:	bd70      	pop	{r4, r5, r6, pc}

000125de <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>:
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   125de:	b580      	push	{r7, lr}
   125e0:	b088      	sub	sp, #32
   125e2:	9105      	str	r1, [sp, #20]
    level: Level,
   125e4:	9106      	str	r1, [sp, #24]
    target: &'a str,
   125e6:	1d0a      	adds	r2, r1, #4
   125e8:	4613      	mov	r3, r2
   125ea:	9207      	str	r2, [sp, #28]
    level: Level,
   125ec:	9004      	str	r0, [sp, #16]
   125ee:	4608      	mov	r0, r1
   125f0:	9303      	str	r3, [sp, #12]
   125f2:	f7ff fe09 	bl	12208 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>
   125f6:	9002      	str	r0, [sp, #8]
   125f8:	e7ff      	b.n	125fa <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x1c>
    target: &'a str,
   125fa:	9803      	ldr	r0, [sp, #12]
   125fc:	f7ff fd55 	bl	120aa <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>
   12600:	9001      	str	r0, [sp, #4]
   12602:	9100      	str	r1, [sp, #0]
   12604:	e7ff      	b.n	12606 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x28>
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   12606:	9802      	ldr	r0, [sp, #8]
   12608:	9904      	ldr	r1, [sp, #16]
   1260a:	6008      	str	r0, [r1, #0]
   1260c:	9a01      	ldr	r2, [sp, #4]
   1260e:	604a      	str	r2, [r1, #4]
   12610:	9b00      	ldr	r3, [sp, #0]
   12612:	608b      	str	r3, [r1, #8]
   12614:	b008      	add	sp, #32
   12616:	bd80      	pop	{r7, pc}

00012618 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E>:
   12618:	b580      	push	{r7, lr}
   1261a:	b084      	sub	sp, #16
   1261c:	9002      	str	r0, [sp, #8]
   1261e:	9103      	str	r1, [sp, #12]
   12620:	6800      	ldr	r0, [r0, #0]
   12622:	f000 f81c 	bl	1265e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>
   12626:	9001      	str	r0, [sp, #4]
   12628:	e7ff      	b.n	1262a <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E+0x12>
   1262a:	9801      	ldr	r0, [sp, #4]
   1262c:	f000 0001 	and.w	r0, r0, #1
   12630:	b004      	add	sp, #16
   12632:	bd80      	pop	{r7, pc}

00012634 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>:
   12634:	b089      	sub	sp, #36	; 0x24
   12636:	9005      	str	r0, [sp, #20]
   12638:	9106      	str	r1, [sp, #24]
   1263a:	9107      	str	r1, [sp, #28]
   1263c:	9907      	ldr	r1, [sp, #28]
   1263e:	9002      	str	r0, [sp, #8]
   12640:	9101      	str	r1, [sp, #4]
   12642:	e7ff      	b.n	12644 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x10>
   12644:	9802      	ldr	r0, [sp, #8]
   12646:	9008      	str	r0, [sp, #32]
   12648:	9908      	ldr	r1, [sp, #32]
   1264a:	9100      	str	r1, [sp, #0]
   1264c:	e7ff      	b.n	1264e <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x1a>
   1264e:	9800      	ldr	r0, [sp, #0]
   12650:	9003      	str	r0, [sp, #12]
   12652:	9901      	ldr	r1, [sp, #4]
   12654:	9104      	str	r1, [sp, #16]
   12656:	9803      	ldr	r0, [sp, #12]
   12658:	9904      	ldr	r1, [sp, #16]
   1265a:	b009      	add	sp, #36	; 0x24
   1265c:	4770      	bx	lr

0001265e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>:
   1265e:	b580      	push	{r7, lr}
   12660:	b088      	sub	sp, #32
   12662:	9006      	str	r0, [sp, #24]
   12664:	9107      	str	r1, [sp, #28]
   12666:	9004      	str	r0, [sp, #16]
   12668:	4608      	mov	r0, r1
   1266a:	9103      	str	r1, [sp, #12]
   1266c:	f006 f81d 	bl	186aa <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   12670:	9002      	str	r0, [sp, #8]
   12672:	e7ff      	b.n	12674 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x16>
   12674:	9802      	ldr	r0, [sp, #8]
   12676:	07c1      	lsls	r1, r0, #31
   12678:	2900      	cmp	r1, #0
   1267a:	d105      	bne.n	12688 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x2a>
   1267c:	e7ff      	b.n	1267e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x20>
   1267e:	9803      	ldr	r0, [sp, #12]
   12680:	f006 f817 	bl	186b2 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   12684:	9001      	str	r0, [sp, #4]
   12686:	e007      	b.n	12698 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x3a>
   12688:	9804      	ldr	r0, [sp, #16]
   1268a:	9903      	ldr	r1, [sp, #12]
   1268c:	f006 fe37 	bl	192fe <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   12690:	f88d 0017 	strb.w	r0, [sp, #23]
   12694:	e7ff      	b.n	12696 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x38>
   12696:	e015      	b.n	126c4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   12698:	9801      	ldr	r0, [sp, #4]
   1269a:	07c1      	lsls	r1, r0, #31
   1269c:	2900      	cmp	r1, #0
   1269e:	d107      	bne.n	126b0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x52>
   126a0:	e7ff      	b.n	126a2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x44>
   126a2:	9804      	ldr	r0, [sp, #16]
   126a4:	9903      	ldr	r1, [sp, #12]
   126a6:	f007 f81f 	bl	196e8 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   126aa:	f88d 0017 	strb.w	r0, [sp, #23]
   126ae:	e007      	b.n	126c0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x62>
   126b0:	9804      	ldr	r0, [sp, #16]
   126b2:	9903      	ldr	r1, [sp, #12]
   126b4:	f006 fe8e 	bl	193d4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   126b8:	f88d 0017 	strb.w	r0, [sp, #23]
   126bc:	e7ff      	b.n	126be <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x60>
   126be:	e000      	b.n	126c2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   126c0:	e7ff      	b.n	126c2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   126c2:	e7ff      	b.n	126c4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   126c4:	f89d 0017 	ldrb.w	r0, [sp, #23]
   126c8:	b008      	add	sp, #32
   126ca:	bd80      	pop	{r7, pc}

000126cc <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>:
   126cc:	b086      	sub	sp, #24
   126ce:	9004      	str	r0, [sp, #16]
   126d0:	9105      	str	r1, [sp, #20]
   126d2:	9002      	str	r0, [sp, #8]
   126d4:	9103      	str	r1, [sp, #12]
   126d6:	9802      	ldr	r0, [sp, #8]
   126d8:	9903      	ldr	r1, [sp, #12]
   126da:	9000      	str	r0, [sp, #0]
   126dc:	9101      	str	r1, [sp, #4]
   126de:	9800      	ldr	r0, [sp, #0]
   126e0:	9901      	ldr	r1, [sp, #4]
   126e2:	b006      	add	sp, #24
   126e4:	4770      	bx	lr

000126e6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>:
   126e6:	b580      	push	{r7, lr}
   126e8:	b084      	sub	sp, #16
   126ea:	9002      	str	r0, [sp, #8]
   126ec:	9103      	str	r1, [sp, #12]
   126ee:	f000 f805 	bl	126fc <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>
   126f2:	9001      	str	r0, [sp, #4]
   126f4:	e7ff      	b.n	126f6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE+0x10>
   126f6:	9801      	ldr	r0, [sp, #4]
   126f8:	b004      	add	sp, #16
   126fa:	bd80      	pop	{r7, pc}

000126fc <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>:
   126fc:	b084      	sub	sp, #16
   126fe:	9001      	str	r0, [sp, #4]
   12700:	9102      	str	r1, [sp, #8]
   12702:	4408      	add	r0, r1
   12704:	9003      	str	r0, [sp, #12]
   12706:	9803      	ldr	r0, [sp, #12]
   12708:	9000      	str	r0, [sp, #0]
   1270a:	e7ff      	b.n	1270c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E+0x10>
   1270c:	9800      	ldr	r0, [sp, #0]
   1270e:	b004      	add	sp, #16
   12710:	4770      	bx	lr

00012712 <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>:
   12712:	b580      	push	{r7, lr}
   12714:	b084      	sub	sp, #16
   12716:	9002      	str	r0, [sp, #8]
   12718:	9103      	str	r1, [sp, #12]
   1271a:	f7ff ffd7 	bl	126cc <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>
   1271e:	9001      	str	r0, [sp, #4]
   12720:	9100      	str	r1, [sp, #0]
   12722:	e7ff      	b.n	12724 <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E+0x12>
   12724:	9801      	ldr	r0, [sp, #4]
   12726:	9900      	ldr	r1, [sp, #0]
   12728:	b004      	add	sp, #16
   1272a:	bd80      	pop	{r7, pc}

0001272c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>:
   1272c:	b084      	sub	sp, #16
   1272e:	9002      	str	r0, [sp, #8]
   12730:	9103      	str	r1, [sp, #12]
   12732:	9000      	str	r0, [sp, #0]
   12734:	9101      	str	r1, [sp, #4]
   12736:	9801      	ldr	r0, [sp, #4]
   12738:	b004      	add	sp, #16
   1273a:	4770      	bx	lr

0001273c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>:
   1273c:	b082      	sub	sp, #8
   1273e:	9000      	str	r0, [sp, #0]
   12740:	9101      	str	r1, [sp, #4]
   12742:	b002      	add	sp, #8
   12744:	4770      	bx	lr

00012746 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>:
   12746:	b082      	sub	sp, #8
   12748:	9000      	str	r0, [sp, #0]
   1274a:	9101      	str	r1, [sp, #4]
   1274c:	7800      	ldrb	r0, [r0, #0]
   1274e:	7809      	ldrb	r1, [r1, #0]
   12750:	1a40      	subs	r0, r0, r1
   12752:	fab0 f080 	clz	r0, r0
   12756:	0940      	lsrs	r0, r0, #5
   12758:	b002      	add	sp, #8
   1275a:	4770      	bx	lr

0001275c <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>:
where
    N: ArrayLength<T>,
{
    type Target = [T];

    fn deref(&self) -> &[T] {
   1275c:	b580      	push	{r7, lr}
   1275e:	b084      	sub	sp, #16
   12760:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   12762:	f004 fc17 	bl	16f94 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E>
   12766:	9002      	str	r0, [sp, #8]
   12768:	9101      	str	r1, [sp, #4]
   1276a:	e7ff      	b.n	1276c <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E+0x10>
    }
   1276c:	9802      	ldr	r0, [sp, #8]
   1276e:	9901      	ldr	r1, [sp, #4]
   12770:	b004      	add	sp, #16
   12772:	bd80      	pop	{r7, pc}

00012774 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>:
    fn deref(&self) -> &[T] {
   12774:	b580      	push	{r7, lr}
   12776:	b084      	sub	sp, #16
   12778:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   1277a:	f004 fc20 	bl	16fbe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>
   1277e:	9002      	str	r0, [sp, #8]
   12780:	9101      	str	r1, [sp, #4]
   12782:	e7ff      	b.n	12784 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE+0x10>
    }
   12784:	9802      	ldr	r0, [sp, #8]
   12786:	9901      	ldr	r1, [sp, #4]
   12788:	b004      	add	sp, #16
   1278a:	bd80      	pop	{r7, pc}

0001278c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E>:
    pub fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   1278c:	b580      	push	{r7, lr}
   1278e:	b084      	sub	sp, #16
   12790:	9001      	str	r0, [sp, #4]
   12792:	9102      	str	r1, [sp, #8]
   12794:	9203      	str	r2, [sp, #12]
        self.0.extend_from_slice(other)
   12796:	f004 fb5f 	bl	16e58 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E>
   1279a:	9000      	str	r0, [sp, #0]
   1279c:	e7ff      	b.n	1279e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E+0x12>
    }
   1279e:	9800      	ldr	r0, [sp, #0]
   127a0:	f000 0001 	and.w	r0, r0, #1
   127a4:	b004      	add	sp, #16
   127a6:	bd80      	pop	{r7, pc}

000127a8 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>:
    pub fn push(&mut self, item: T) -> Result<(), T> {
   127a8:	b580      	push	{r7, lr}
   127aa:	b086      	sub	sp, #24
   127ac:	460a      	mov	r2, r1
   127ae:	9004      	str	r0, [sp, #16]
   127b0:	f88d 1017 	strb.w	r1, [sp, #23]
        self.0.push(item)
   127b4:	9203      	str	r2, [sp, #12]
   127b6:	f004 fbb2 	bl	16f1e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>
   127ba:	9002      	str	r0, [sp, #8]
   127bc:	9101      	str	r1, [sp, #4]
   127be:	e7ff      	b.n	127c0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E+0x18>
    }
   127c0:	9802      	ldr	r0, [sp, #8]
   127c2:	f000 0001 	and.w	r0, r0, #1
   127c6:	9901      	ldr	r1, [sp, #4]
   127c8:	b006      	add	sp, #24
   127ca:	bd80      	pop	{r7, pc}

000127cc <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>:
    pub fn clear(&mut self) {
   127cc:	b580      	push	{r7, lr}
   127ce:	b082      	sub	sp, #8
   127d0:	9001      	str	r0, [sp, #4]
        self.0.clear()
   127d2:	f004 fbcd 	bl	16f70 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>
   127d6:	e7ff      	b.n	127d8 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E+0xc>
    }
   127d8:	b002      	add	sp, #8
   127da:	bd80      	pop	{r7, pc}

000127dc <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E>:
    pub fn clear(&mut self) {
   127dc:	b580      	push	{r7, lr}
   127de:	b082      	sub	sp, #8
   127e0:	9001      	str	r0, [sp, #4]
        self.0.clear()
   127e2:	f004 fbce 	bl	16f82 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E>
   127e6:	e7ff      	b.n	127e8 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E+0xc>
    }
   127e8:	b002      	add	sp, #8
   127ea:	bd80      	pop	{r7, pc}

000127ec <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E>:
    pub fn capacity(&self) -> usize {
   127ec:	b580      	push	{r7, lr}
   127ee:	b082      	sub	sp, #8
   127f0:	9001      	str	r0, [sp, #4]
        self.0.capacity()
   127f2:	f004 fc03 	bl	16ffc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE>
   127f6:	9000      	str	r0, [sp, #0]
   127f8:	e7ff      	b.n	127fa <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E+0xe>
    }
   127fa:	9800      	ldr	r0, [sp, #0]
   127fc:	b002      	add	sp, #8
   127fe:	bd80      	pop	{r7, pc}

00012800 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>:
   12800:	b081      	sub	sp, #4
   12802:	9000      	str	r0, [sp, #0]
   12804:	b001      	add	sp, #4
   12806:	4770      	bx	lr

00012808 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>:
   12808:	b580      	push	{r7, lr}
   1280a:	b088      	sub	sp, #32
   1280c:	9006      	str	r0, [sp, #24]
   1280e:	9107      	str	r1, [sp, #28]
   12810:	9004      	str	r0, [sp, #16]
   12812:	4608      	mov	r0, r1
   12814:	9103      	str	r1, [sp, #12]
   12816:	f005 ff48 	bl	186aa <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   1281a:	9002      	str	r0, [sp, #8]
   1281c:	e7ff      	b.n	1281e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x16>
   1281e:	9802      	ldr	r0, [sp, #8]
   12820:	07c1      	lsls	r1, r0, #31
   12822:	2900      	cmp	r1, #0
   12824:	d105      	bne.n	12832 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x2a>
   12826:	e7ff      	b.n	12828 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x20>
   12828:	9803      	ldr	r0, [sp, #12]
   1282a:	f005 ff42 	bl	186b2 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   1282e:	9001      	str	r0, [sp, #4]
   12830:	e007      	b.n	12842 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x3a>
   12832:	9804      	ldr	r0, [sp, #16]
   12834:	9903      	ldr	r1, [sp, #12]
   12836:	f006 fc46 	bl	190c6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>
   1283a:	f88d 0017 	strb.w	r0, [sp, #23]
   1283e:	e7ff      	b.n	12840 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x38>
   12840:	e015      	b.n	1286e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
   12842:	9801      	ldr	r0, [sp, #4]
   12844:	07c1      	lsls	r1, r0, #31
   12846:	2900      	cmp	r1, #0
   12848:	d107      	bne.n	1285a <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x52>
   1284a:	e7ff      	b.n	1284c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x44>
   1284c:	9804      	ldr	r0, [sp, #16]
   1284e:	9903      	ldr	r1, [sp, #12]
   12850:	f006 fe2b 	bl	194aa <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>
   12854:	f88d 0017 	strb.w	r0, [sp, #23]
   12858:	e007      	b.n	1286a <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x62>
   1285a:	9804      	ldr	r0, [sp, #16]
   1285c:	9903      	ldr	r1, [sp, #12]
   1285e:	f006 fc61 	bl	19124 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>
   12862:	f88d 0017 	strb.w	r0, [sp, #23]
   12866:	e7ff      	b.n	12868 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x60>
   12868:	e000      	b.n	1286c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
   1286a:	e7ff      	b.n	1286c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
   1286c:	e7ff      	b.n	1286e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
   1286e:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12872:	b008      	add	sp, #32
   12874:	bd80      	pop	{r7, pc}

00012876 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>:
   12876:	b580      	push	{r7, lr}
   12878:	b088      	sub	sp, #32
   1287a:	9006      	str	r0, [sp, #24]
   1287c:	9107      	str	r1, [sp, #28]
   1287e:	9004      	str	r0, [sp, #16]
   12880:	4608      	mov	r0, r1
   12882:	9103      	str	r1, [sp, #12]
   12884:	f005 ff11 	bl	186aa <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   12888:	9002      	str	r0, [sp, #8]
   1288a:	e7ff      	b.n	1288c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x16>
   1288c:	9802      	ldr	r0, [sp, #8]
   1288e:	07c1      	lsls	r1, r0, #31
   12890:	2900      	cmp	r1, #0
   12892:	d105      	bne.n	128a0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x2a>
   12894:	e7ff      	b.n	12896 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x20>
   12896:	9803      	ldr	r0, [sp, #12]
   12898:	f005 ff0b 	bl	186b2 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   1289c:	9001      	str	r0, [sp, #4]
   1289e:	e007      	b.n	128b0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x3a>
   128a0:	9804      	ldr	r0, [sp, #16]
   128a2:	9903      	ldr	r1, [sp, #12]
   128a4:	f006 fd2b 	bl	192fe <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   128a8:	f88d 0017 	strb.w	r0, [sp, #23]
   128ac:	e7ff      	b.n	128ae <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x38>
   128ae:	e015      	b.n	128dc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   128b0:	9801      	ldr	r0, [sp, #4]
   128b2:	07c1      	lsls	r1, r0, #31
   128b4:	2900      	cmp	r1, #0
   128b6:	d107      	bne.n	128c8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x52>
   128b8:	e7ff      	b.n	128ba <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x44>
   128ba:	9804      	ldr	r0, [sp, #16]
   128bc:	9903      	ldr	r1, [sp, #12]
   128be:	f006 fe99 	bl	195f4 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
   128c2:	f88d 0017 	strb.w	r0, [sp, #23]
   128c6:	e007      	b.n	128d8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x62>
   128c8:	9804      	ldr	r0, [sp, #16]
   128ca:	9903      	ldr	r1, [sp, #12]
   128cc:	f006 fd82 	bl	193d4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   128d0:	f88d 0017 	strb.w	r0, [sp, #23]
   128d4:	e7ff      	b.n	128d6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x60>
   128d6:	e000      	b.n	128da <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   128d8:	e7ff      	b.n	128da <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   128da:	e7ff      	b.n	128dc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   128dc:	f89d 0017 	ldrb.w	r0, [sp, #23]
   128e0:	b008      	add	sp, #32
   128e2:	bd80      	pop	{r7, pc}

000128e4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>:
   128e4:	b580      	push	{r7, lr}
   128e6:	b088      	sub	sp, #32
   128e8:	9006      	str	r0, [sp, #24]
   128ea:	9107      	str	r1, [sp, #28]
   128ec:	9004      	str	r0, [sp, #16]
   128ee:	4608      	mov	r0, r1
   128f0:	9103      	str	r1, [sp, #12]
   128f2:	f005 feda 	bl	186aa <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   128f6:	9002      	str	r0, [sp, #8]
   128f8:	e7ff      	b.n	128fa <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x16>
   128fa:	9802      	ldr	r0, [sp, #8]
   128fc:	07c1      	lsls	r1, r0, #31
   128fe:	2900      	cmp	r1, #0
   12900:	d105      	bne.n	1290e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x2a>
   12902:	e7ff      	b.n	12904 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x20>
   12904:	9803      	ldr	r0, [sp, #12]
   12906:	f005 fed4 	bl	186b2 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   1290a:	9001      	str	r0, [sp, #4]
   1290c:	e007      	b.n	1291e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x3a>
   1290e:	9804      	ldr	r0, [sp, #16]
   12910:	9903      	ldr	r1, [sp, #12]
   12912:	f006 fcf4 	bl	192fe <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   12916:	f88d 0017 	strb.w	r0, [sp, #23]
   1291a:	e7ff      	b.n	1291c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x38>
   1291c:	e015      	b.n	1294a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
   1291e:	9801      	ldr	r0, [sp, #4]
   12920:	07c1      	lsls	r1, r0, #31
   12922:	2900      	cmp	r1, #0
   12924:	d107      	bne.n	12936 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x52>
   12926:	e7ff      	b.n	12928 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x44>
   12928:	9804      	ldr	r0, [sp, #16]
   1292a:	9903      	ldr	r1, [sp, #12]
   1292c:	f006 fedc 	bl	196e8 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   12930:	f88d 0017 	strb.w	r0, [sp, #23]
   12934:	e007      	b.n	12946 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x62>
   12936:	9804      	ldr	r0, [sp, #16]
   12938:	9903      	ldr	r1, [sp, #12]
   1293a:	f006 fd4b 	bl	193d4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   1293e:	f88d 0017 	strb.w	r0, [sp, #23]
   12942:	e7ff      	b.n	12944 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x60>
   12944:	e000      	b.n	12948 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
   12946:	e7ff      	b.n	12948 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
   12948:	e7ff      	b.n	1294a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
   1294a:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1294e:	b008      	add	sp, #32
   12950:	bd80      	pop	{r7, pc}

00012952 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>:
   12952:	b580      	push	{r7, lr}
   12954:	b084      	sub	sp, #16
   12956:	9002      	str	r0, [sp, #8]
   12958:	9103      	str	r1, [sp, #12]
   1295a:	6800      	ldr	r0, [r0, #0]
   1295c:	6809      	ldr	r1, [r1, #0]
   1295e:	f7ff fef2 	bl	12746 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>
   12962:	9001      	str	r0, [sp, #4]
   12964:	e7ff      	b.n	12966 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E+0x14>
   12966:	9801      	ldr	r0, [sp, #4]
   12968:	f000 0001 	and.w	r0, r0, #1
   1296c:	b004      	add	sp, #16
   1296e:	bd80      	pop	{r7, pc}

00012970 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>:

/// Non-blocking SPI transfer callback values (not used)
static mut SPI_CALLBACK: SpiCallback = SpiCallback {};

/// Init non-blocking SPI transfer
pub fn spi_noblock_init() -> MynewtResult<()> {
   12970:	b5b0      	push	{r4, r5, r7, lr}
   12972:	f5ad 6db5 	sub.w	sp, sp, #1448	; 0x5a8
   12976:	2000      	movs	r0, #0
    //  Disable SPI port
    unsafe { hal::hal_spi_disable(SPI_NUM) };
   12978:	f007 fd98 	bl	1a4ac <hal_spi_disable>
   1297c:	e7ff      	b.n	1297e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xe>

    //  Configure SPI port for non-blocking SPI
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   1297e:	f240 01f8 	movw	r1, #248	; 0xf8
   12982:	f2c2 0100 	movt	r1, #8192	; 0x2000
   12986:	2000      	movs	r0, #0
   12988:	f007 fd4e 	bl	1a428 <hal_spi_config>
   1298c:	906a      	str	r0, [sp, #424]	; 0x1a8
   1298e:	e7ff      	b.n	12990 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x20>
   12990:	f640 1018 	movw	r0, #2328	; 0x918
   12994:	f2c0 0002 	movt	r0, #2
   12998:	6800      	ldr	r0, [r0, #0]
   1299a:	a96a      	add	r1, sp, #424	; 0x1a8
   1299c:	916b      	str	r1, [sp, #428]	; 0x1ac
   1299e:	906c      	str	r0, [sp, #432]	; 0x1b0
   129a0:	986b      	ldr	r0, [sp, #428]	; 0x1ac
   129a2:	f8cd 04fc 	str.w	r0, [sp, #1276]	; 0x4fc
   129a6:	996c      	ldr	r1, [sp, #432]	; 0x1b0
   129a8:	f8cd 1500 	str.w	r1, [sp, #1280]	; 0x500
   129ac:	6802      	ldr	r2, [r0, #0]
   129ae:	680b      	ldr	r3, [r1, #0]
   129b0:	429a      	cmp	r2, r3
   129b2:	9068      	str	r0, [sp, #416]	; 0x1a0
   129b4:	9167      	str	r1, [sp, #412]	; 0x19c
   129b6:	d10c      	bne.n	129d2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x62>
   129b8:	e7ff      	b.n	129ba <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4a>
    let arg = unsafe { core::mem::transmute(&mut SPI_CALLBACK) };
   129ba:	f646 7004 	movw	r0, #28420	; 0x6f04
   129be:	f2c2 0000 	movt	r0, #8192	; 0x2000
   129c2:	f8cd 0510 	str.w	r0, [sp, #1296]	; 0x510
   129c6:	f8dd 0510 	ldr.w	r0, [sp, #1296]	; 0x510
   129ca:	f8cd 0514 	str.w	r0, [sp, #1300]	; 0x514
   129ce:	9066      	str	r0, [sp, #408]	; 0x198
   129d0:	e075      	b.n	12abe <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x14e>
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   129d2:	f640 1070 	movw	r0, #2416	; 0x970
   129d6:	f2c0 0002 	movt	r0, #2
   129da:	6801      	ldr	r1, [r0, #0]
   129dc:	9868      	ldr	r0, [sp, #416]	; 0x1a0
   129de:	907c      	str	r0, [sp, #496]	; 0x1f0
   129e0:	9a67      	ldr	r2, [sp, #412]	; 0x19c
   129e2:	927d      	str	r2, [sp, #500]	; 0x1f4
   129e4:	f640 138c 	movw	r3, #2444	; 0x98c
   129e8:	f2c0 0302 	movt	r3, #2
   129ec:	681b      	ldr	r3, [r3, #0]
   129ee:	f640 1c90 	movw	ip, #2448	; 0x990
   129f2:	f2c0 0c02 	movt	ip, #2
   129f6:	f8dc c000 	ldr.w	ip, [ip]
   129fa:	46ee      	mov	lr, sp
   129fc:	2400      	movs	r4, #0
   129fe:	f8ce 4000 	str.w	r4, [lr]
   12a02:	a87e      	add	r0, sp, #504	; 0x1f8
   12a04:	2201      	movs	r2, #1
   12a06:	9165      	str	r1, [sp, #404]	; 0x194
   12a08:	4619      	mov	r1, r3
   12a0a:	4663      	mov	r3, ip
   12a0c:	f7f6 f846 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12a10:	e7ff      	b.n	12a12 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2>
   12a12:	a87c      	add	r0, sp, #496	; 0x1f0
   12a14:	9079      	str	r0, [sp, #484]	; 0x1e4
   12a16:	a87d      	add	r0, sp, #500	; 0x1f4
   12a18:	907a      	str	r0, [sp, #488]	; 0x1e8
   12a1a:	a87e      	add	r0, sp, #504	; 0x1f8
   12a1c:	907b      	str	r0, [sp, #492]	; 0x1ec
   12a1e:	9879      	ldr	r0, [sp, #484]	; 0x1e4
   12a20:	f8cd 0504 	str.w	r0, [sp, #1284]	; 0x504
   12a24:	997a      	ldr	r1, [sp, #488]	; 0x1e8
   12a26:	f8cd 1508 	str.w	r1, [sp, #1288]	; 0x508
   12a2a:	9a7b      	ldr	r2, [sp, #492]	; 0x1ec
   12a2c:	f8cd 250c 	str.w	r2, [sp, #1292]	; 0x50c
   12a30:	f249 23eb 	movw	r3, #37611	; 0x92eb
   12a34:	f2c0 0300 	movt	r3, #0
   12a38:	9164      	str	r1, [sp, #400]	; 0x190
   12a3a:	4619      	mov	r1, r3
   12a3c:	9263      	str	r2, [sp, #396]	; 0x18c
   12a3e:	f7f6 fc8c 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12a42:	9062      	str	r0, [sp, #392]	; 0x188
   12a44:	9161      	str	r1, [sp, #388]	; 0x184
   12a46:	e7ff      	b.n	12a48 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xd8>
   12a48:	f249 21eb 	movw	r1, #37611	; 0x92eb
   12a4c:	f2c0 0100 	movt	r1, #0
   12a50:	9864      	ldr	r0, [sp, #400]	; 0x190
   12a52:	f7f6 fc82 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12a56:	9060      	str	r0, [sp, #384]	; 0x180
   12a58:	915f      	str	r1, [sp, #380]	; 0x17c
   12a5a:	e7ff      	b.n	12a5c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xec>
   12a5c:	f647 7137 	movw	r1, #32567	; 0x7f37
   12a60:	f2c0 0101 	movt	r1, #1
   12a64:	9863      	ldr	r0, [sp, #396]	; 0x18c
   12a66:	f7f6 fcb7 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12a6a:	905e      	str	r0, [sp, #376]	; 0x178
   12a6c:	915d      	str	r1, [sp, #372]	; 0x174
   12a6e:	e7ff      	b.n	12a70 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x100>
   12a70:	9862      	ldr	r0, [sp, #392]	; 0x188
   12a72:	9073      	str	r0, [sp, #460]	; 0x1cc
   12a74:	9961      	ldr	r1, [sp, #388]	; 0x184
   12a76:	9174      	str	r1, [sp, #464]	; 0x1d0
   12a78:	9a60      	ldr	r2, [sp, #384]	; 0x180
   12a7a:	9275      	str	r2, [sp, #468]	; 0x1d4
   12a7c:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
   12a7e:	9376      	str	r3, [sp, #472]	; 0x1d8
   12a80:	f8dd c178 	ldr.w	ip, [sp, #376]	; 0x178
   12a84:	f8cd c1dc 	str.w	ip, [sp, #476]	; 0x1dc
   12a88:	f8dd e174 	ldr.w	lr, [sp, #372]	; 0x174
   12a8c:	f8cd e1e0 	str.w	lr, [sp, #480]	; 0x1e0
   12a90:	466c      	mov	r4, sp
   12a92:	2503      	movs	r5, #3
   12a94:	6025      	str	r5, [r4, #0]
   12a96:	a86d      	add	r0, sp, #436	; 0x1b4
   12a98:	ab73      	add	r3, sp, #460	; 0x1cc
   12a9a:	9965      	ldr	r1, [sp, #404]	; 0x194
   12a9c:	462a      	mov	r2, r5
   12a9e:	f7f5 fffd 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12aa2:	e7ff      	b.n	12aa4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x134>
   12aa4:	f640 10ac 	movw	r0, #2476	; 0x9ac
   12aa8:	f2c0 0002 	movt	r0, #2
   12aac:	f004 ff55 	bl	1795a <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12ab0:	905c      	str	r0, [sp, #368]	; 0x170
   12ab2:	e7ff      	b.n	12ab4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x144>
   12ab4:	a86d      	add	r0, sp, #436	; 0x1b4
   12ab6:	995c      	ldr	r1, [sp, #368]	; 0x170
   12ab8:	f004 ff8c 	bl	179d4 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12abc:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
        SPI_NUM, 
        Some(spi_noblock_handler), 
   12abe:	f643 700b 	movw	r0, #16139	; 0x3f0b
   12ac2:	f2c0 0001 	movt	r0, #1
   12ac6:	9085      	str	r0, [sp, #532]	; 0x214
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
   12ac8:	9985      	ldr	r1, [sp, #532]	; 0x214
   12aca:	2000      	movs	r0, #0
   12acc:	9a66      	ldr	r2, [sp, #408]	; 0x198
   12ace:	f007 fd51 	bl	1a574 <hal_spi_set_txrx_cb>
   12ad2:	9084      	str	r0, [sp, #528]	; 0x210
   12ad4:	e7ff      	b.n	12ad6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x166>
        arg
    ) };
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   12ad6:	f640 1018 	movw	r0, #2328	; 0x918
   12ada:	f2c0 0002 	movt	r0, #2
   12ade:	6800      	ldr	r0, [r0, #0]
   12ae0:	a984      	add	r1, sp, #528	; 0x210
   12ae2:	9186      	str	r1, [sp, #536]	; 0x218
   12ae4:	9087      	str	r0, [sp, #540]	; 0x21c
   12ae6:	9886      	ldr	r0, [sp, #536]	; 0x218
   12ae8:	f8cd 0518 	str.w	r0, [sp, #1304]	; 0x518
   12aec:	9987      	ldr	r1, [sp, #540]	; 0x21c
   12aee:	f8cd 151c 	str.w	r1, [sp, #1308]	; 0x51c
   12af2:	6802      	ldr	r2, [r0, #0]
   12af4:	680b      	ldr	r3, [r1, #0]
   12af6:	429a      	cmp	r2, r3
   12af8:	905b      	str	r0, [sp, #364]	; 0x16c
   12afa:	915a      	str	r1, [sp, #360]	; 0x168
   12afc:	d105      	bne.n	12b0a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x19a>
   12afe:	e7ff      	b.n	12b00 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x190>
   12b00:	2000      	movs	r0, #0

    //  Enable SPI port and set SS to high to disable SPI device
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   12b02:	f007 fcad 	bl	1a460 <hal_spi_enable>
   12b06:	909f      	str	r0, [sp, #636]	; 0x27c
   12b08:	e075      	b.n	12bf6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x286>
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   12b0a:	f640 1070 	movw	r0, #2416	; 0x970
   12b0e:	f2c0 0002 	movt	r0, #2
   12b12:	6801      	ldr	r1, [r0, #0]
   12b14:	985b      	ldr	r0, [sp, #364]	; 0x16c
   12b16:	9097      	str	r0, [sp, #604]	; 0x25c
   12b18:	9a5a      	ldr	r2, [sp, #360]	; 0x168
   12b1a:	9298      	str	r2, [sp, #608]	; 0x260
   12b1c:	f640 13d0 	movw	r3, #2512	; 0x9d0
   12b20:	f2c0 0302 	movt	r3, #2
   12b24:	681b      	ldr	r3, [r3, #0]
   12b26:	f640 1c90 	movw	ip, #2448	; 0x990
   12b2a:	f2c0 0c02 	movt	ip, #2
   12b2e:	f8dc c000 	ldr.w	ip, [ip]
   12b32:	46ee      	mov	lr, sp
   12b34:	2400      	movs	r4, #0
   12b36:	f8ce 4000 	str.w	r4, [lr]
   12b3a:	a899      	add	r0, sp, #612	; 0x264
   12b3c:	2201      	movs	r2, #1
   12b3e:	9159      	str	r1, [sp, #356]	; 0x164
   12b40:	4619      	mov	r1, r3
   12b42:	4663      	mov	r3, ip
   12b44:	f7f5 ffaa 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12b48:	e7ff      	b.n	12b4a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x1da>
   12b4a:	a897      	add	r0, sp, #604	; 0x25c
   12b4c:	9094      	str	r0, [sp, #592]	; 0x250
   12b4e:	a898      	add	r0, sp, #608	; 0x260
   12b50:	9095      	str	r0, [sp, #596]	; 0x254
   12b52:	a899      	add	r0, sp, #612	; 0x264
   12b54:	9096      	str	r0, [sp, #600]	; 0x258
   12b56:	9894      	ldr	r0, [sp, #592]	; 0x250
   12b58:	f8cd 0520 	str.w	r0, [sp, #1312]	; 0x520
   12b5c:	9995      	ldr	r1, [sp, #596]	; 0x254
   12b5e:	f8cd 1524 	str.w	r1, [sp, #1316]	; 0x524
   12b62:	9a96      	ldr	r2, [sp, #600]	; 0x258
   12b64:	f8cd 2528 	str.w	r2, [sp, #1320]	; 0x528
   12b68:	f249 23eb 	movw	r3, #37611	; 0x92eb
   12b6c:	f2c0 0300 	movt	r3, #0
   12b70:	9158      	str	r1, [sp, #352]	; 0x160
   12b72:	4619      	mov	r1, r3
   12b74:	9257      	str	r2, [sp, #348]	; 0x15c
   12b76:	f7f6 fbf0 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12b7a:	9056      	str	r0, [sp, #344]	; 0x158
   12b7c:	9155      	str	r1, [sp, #340]	; 0x154
   12b7e:	e7ff      	b.n	12b80 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x210>
   12b80:	f249 21eb 	movw	r1, #37611	; 0x92eb
   12b84:	f2c0 0100 	movt	r1, #0
   12b88:	9858      	ldr	r0, [sp, #352]	; 0x160
   12b8a:	f7f6 fbe6 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12b8e:	9054      	str	r0, [sp, #336]	; 0x150
   12b90:	9153      	str	r1, [sp, #332]	; 0x14c
   12b92:	e7ff      	b.n	12b94 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x224>
   12b94:	f647 7137 	movw	r1, #32567	; 0x7f37
   12b98:	f2c0 0101 	movt	r1, #1
   12b9c:	9857      	ldr	r0, [sp, #348]	; 0x15c
   12b9e:	f7f6 fc1b 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12ba2:	9052      	str	r0, [sp, #328]	; 0x148
   12ba4:	9151      	str	r1, [sp, #324]	; 0x144
   12ba6:	e7ff      	b.n	12ba8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x238>
   12ba8:	9856      	ldr	r0, [sp, #344]	; 0x158
   12baa:	908e      	str	r0, [sp, #568]	; 0x238
   12bac:	9955      	ldr	r1, [sp, #340]	; 0x154
   12bae:	918f      	str	r1, [sp, #572]	; 0x23c
   12bb0:	9a54      	ldr	r2, [sp, #336]	; 0x150
   12bb2:	9290      	str	r2, [sp, #576]	; 0x240
   12bb4:	9b53      	ldr	r3, [sp, #332]	; 0x14c
   12bb6:	9391      	str	r3, [sp, #580]	; 0x244
   12bb8:	f8dd c148 	ldr.w	ip, [sp, #328]	; 0x148
   12bbc:	f8cd c248 	str.w	ip, [sp, #584]	; 0x248
   12bc0:	f8dd e144 	ldr.w	lr, [sp, #324]	; 0x144
   12bc4:	f8cd e24c 	str.w	lr, [sp, #588]	; 0x24c
   12bc8:	466c      	mov	r4, sp
   12bca:	2503      	movs	r5, #3
   12bcc:	6025      	str	r5, [r4, #0]
   12bce:	a888      	add	r0, sp, #544	; 0x220
   12bd0:	ab8e      	add	r3, sp, #568	; 0x238
   12bd2:	9959      	ldr	r1, [sp, #356]	; 0x164
   12bd4:	462a      	mov	r2, r5
   12bd6:	f7f5 ff61 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12bda:	e7ff      	b.n	12bdc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x26c>
   12bdc:	f640 10d4 	movw	r0, #2516	; 0x9d4
   12be0:	f2c0 0002 	movt	r0, #2
   12be4:	f004 feb9 	bl	1795a <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12be8:	9050      	str	r0, [sp, #320]	; 0x140
   12bea:	e7ff      	b.n	12bec <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x27c>
   12bec:	a888      	add	r0, sp, #544	; 0x220
   12bee:	9950      	ldr	r1, [sp, #320]	; 0x140
   12bf0:	f004 fef0 	bl	179d4 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12bf4:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   12bf6:	f640 1018 	movw	r0, #2328	; 0x918
   12bfa:	f2c0 0002 	movt	r0, #2
   12bfe:	6800      	ldr	r0, [r0, #0]
   12c00:	a99f      	add	r1, sp, #636	; 0x27c
   12c02:	91a0      	str	r1, [sp, #640]	; 0x280
   12c04:	90a1      	str	r0, [sp, #644]	; 0x284
   12c06:	98a0      	ldr	r0, [sp, #640]	; 0x280
   12c08:	f8cd 052c 	str.w	r0, [sp, #1324]	; 0x52c
   12c0c:	99a1      	ldr	r1, [sp, #644]	; 0x284
   12c0e:	f8cd 1530 	str.w	r1, [sp, #1328]	; 0x530
   12c12:	6802      	ldr	r2, [r0, #0]
   12c14:	680b      	ldr	r3, [r1, #0]
   12c16:	429a      	cmp	r2, r3
   12c18:	904f      	str	r0, [sp, #316]	; 0x13c
   12c1a:	914e      	str	r1, [sp, #312]	; 0x138
   12c1c:	d106      	bne.n	12c2c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2bc>
   12c1e:	e7ff      	b.n	12c20 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2b0>
   12c20:	2019      	movs	r0, #25
   12c22:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12c24:	f006 fff2 	bl	19c0c <hal_gpio_init_out>
   12c28:	90b9      	str	r0, [sp, #740]	; 0x2e4
   12c2a:	e075      	b.n	12d18 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3a8>
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   12c2c:	f640 1070 	movw	r0, #2416	; 0x970
   12c30:	f2c0 0002 	movt	r0, #2
   12c34:	6801      	ldr	r1, [r0, #0]
   12c36:	984f      	ldr	r0, [sp, #316]	; 0x13c
   12c38:	90b1      	str	r0, [sp, #708]	; 0x2c4
   12c3a:	9a4e      	ldr	r2, [sp, #312]	; 0x138
   12c3c:	92b2      	str	r2, [sp, #712]	; 0x2c8
   12c3e:	f640 13fc 	movw	r3, #2556	; 0x9fc
   12c42:	f2c0 0302 	movt	r3, #2
   12c46:	681b      	ldr	r3, [r3, #0]
   12c48:	f640 1c90 	movw	ip, #2448	; 0x990
   12c4c:	f2c0 0c02 	movt	ip, #2
   12c50:	f8dc c000 	ldr.w	ip, [ip]
   12c54:	46ee      	mov	lr, sp
   12c56:	2400      	movs	r4, #0
   12c58:	f8ce 4000 	str.w	r4, [lr]
   12c5c:	a8b3      	add	r0, sp, #716	; 0x2cc
   12c5e:	2201      	movs	r2, #1
   12c60:	914d      	str	r1, [sp, #308]	; 0x134
   12c62:	4619      	mov	r1, r3
   12c64:	4663      	mov	r3, ip
   12c66:	f7f5 ff19 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12c6a:	e7ff      	b.n	12c6c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2fc>
   12c6c:	a8b1      	add	r0, sp, #708	; 0x2c4
   12c6e:	90ae      	str	r0, [sp, #696]	; 0x2b8
   12c70:	a8b2      	add	r0, sp, #712	; 0x2c8
   12c72:	90af      	str	r0, [sp, #700]	; 0x2bc
   12c74:	a8b3      	add	r0, sp, #716	; 0x2cc
   12c76:	90b0      	str	r0, [sp, #704]	; 0x2c0
   12c78:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
   12c7a:	f8cd 0534 	str.w	r0, [sp, #1332]	; 0x534
   12c7e:	99af      	ldr	r1, [sp, #700]	; 0x2bc
   12c80:	f8cd 1538 	str.w	r1, [sp, #1336]	; 0x538
   12c84:	9ab0      	ldr	r2, [sp, #704]	; 0x2c0
   12c86:	f8cd 253c 	str.w	r2, [sp, #1340]	; 0x53c
   12c8a:	f249 23eb 	movw	r3, #37611	; 0x92eb
   12c8e:	f2c0 0300 	movt	r3, #0
   12c92:	914c      	str	r1, [sp, #304]	; 0x130
   12c94:	4619      	mov	r1, r3
   12c96:	924b      	str	r2, [sp, #300]	; 0x12c
   12c98:	f7f6 fb5f 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12c9c:	904a      	str	r0, [sp, #296]	; 0x128
   12c9e:	9149      	str	r1, [sp, #292]	; 0x124
   12ca0:	e7ff      	b.n	12ca2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x332>
   12ca2:	f249 21eb 	movw	r1, #37611	; 0x92eb
   12ca6:	f2c0 0100 	movt	r1, #0
   12caa:	984c      	ldr	r0, [sp, #304]	; 0x130
   12cac:	f7f6 fb55 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12cb0:	9048      	str	r0, [sp, #288]	; 0x120
   12cb2:	9147      	str	r1, [sp, #284]	; 0x11c
   12cb4:	e7ff      	b.n	12cb6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x346>
   12cb6:	f647 7137 	movw	r1, #32567	; 0x7f37
   12cba:	f2c0 0101 	movt	r1, #1
   12cbe:	984b      	ldr	r0, [sp, #300]	; 0x12c
   12cc0:	f7f6 fb8a 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12cc4:	9046      	str	r0, [sp, #280]	; 0x118
   12cc6:	9145      	str	r1, [sp, #276]	; 0x114
   12cc8:	e7ff      	b.n	12cca <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x35a>
   12cca:	984a      	ldr	r0, [sp, #296]	; 0x128
   12ccc:	90a8      	str	r0, [sp, #672]	; 0x2a0
   12cce:	9949      	ldr	r1, [sp, #292]	; 0x124
   12cd0:	91a9      	str	r1, [sp, #676]	; 0x2a4
   12cd2:	9a48      	ldr	r2, [sp, #288]	; 0x120
   12cd4:	92aa      	str	r2, [sp, #680]	; 0x2a8
   12cd6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   12cd8:	93ab      	str	r3, [sp, #684]	; 0x2ac
   12cda:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
   12cde:	f8cd c2b0 	str.w	ip, [sp, #688]	; 0x2b0
   12ce2:	f8dd e114 	ldr.w	lr, [sp, #276]	; 0x114
   12ce6:	f8cd e2b4 	str.w	lr, [sp, #692]	; 0x2b4
   12cea:	466c      	mov	r4, sp
   12cec:	2503      	movs	r5, #3
   12cee:	6025      	str	r5, [r4, #0]
   12cf0:	a8a2      	add	r0, sp, #648	; 0x288
   12cf2:	aba8      	add	r3, sp, #672	; 0x2a0
   12cf4:	994d      	ldr	r1, [sp, #308]	; 0x134
   12cf6:	462a      	mov	r2, r5
   12cf8:	f7f5 fed0 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12cfc:	e7ff      	b.n	12cfe <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x38e>
   12cfe:	f640 2000 	movw	r0, #2560	; 0xa00
   12d02:	f2c0 0002 	movt	r0, #2
   12d06:	f004 fe28 	bl	1795a <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12d0a:	9044      	str	r0, [sp, #272]	; 0x110
   12d0c:	e7ff      	b.n	12d0e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x39e>
   12d0e:	a8a2      	add	r0, sp, #648	; 0x288
   12d10:	9944      	ldr	r1, [sp, #272]	; 0x110
   12d12:	f004 fe5f 	bl	179d4 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12d16:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12d18:	f640 1018 	movw	r0, #2328	; 0x918
   12d1c:	f2c0 0002 	movt	r0, #2
   12d20:	6800      	ldr	r0, [r0, #0]
   12d22:	a9b9      	add	r1, sp, #740	; 0x2e4
   12d24:	91ba      	str	r1, [sp, #744]	; 0x2e8
   12d26:	90bb      	str	r0, [sp, #748]	; 0x2ec
   12d28:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
   12d2a:	f8cd 0540 	str.w	r0, [sp, #1344]	; 0x540
   12d2e:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
   12d30:	f8cd 1544 	str.w	r1, [sp, #1348]	; 0x544
   12d34:	6802      	ldr	r2, [r0, #0]
   12d36:	680b      	ldr	r3, [r1, #0]
   12d38:	429a      	cmp	r2, r3
   12d3a:	9043      	str	r0, [sp, #268]	; 0x10c
   12d3c:	9142      	str	r1, [sp, #264]	; 0x108
   12d3e:	d106      	bne.n	12d4e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3de>
   12d40:	e7ff      	b.n	12d42 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3d2>
   12d42:	2012      	movs	r0, #18
   12d44:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12d46:	f006 ff61 	bl	19c0c <hal_gpio_init_out>
   12d4a:	90d3      	str	r0, [sp, #844]	; 0x34c
   12d4c:	e075      	b.n	12e3a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4ca>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12d4e:	f640 1070 	movw	r0, #2416	; 0x970
   12d52:	f2c0 0002 	movt	r0, #2
   12d56:	6801      	ldr	r1, [r0, #0]
   12d58:	9843      	ldr	r0, [sp, #268]	; 0x10c
   12d5a:	90cb      	str	r0, [sp, #812]	; 0x32c
   12d5c:	9a42      	ldr	r2, [sp, #264]	; 0x108
   12d5e:	92cc      	str	r2, [sp, #816]	; 0x330
   12d60:	f640 2324 	movw	r3, #2596	; 0xa24
   12d64:	f2c0 0302 	movt	r3, #2
   12d68:	681b      	ldr	r3, [r3, #0]
   12d6a:	f640 1c90 	movw	ip, #2448	; 0x990
   12d6e:	f2c0 0c02 	movt	ip, #2
   12d72:	f8dc c000 	ldr.w	ip, [ip]
   12d76:	46ee      	mov	lr, sp
   12d78:	2400      	movs	r4, #0
   12d7a:	f8ce 4000 	str.w	r4, [lr]
   12d7e:	a8cd      	add	r0, sp, #820	; 0x334
   12d80:	2201      	movs	r2, #1
   12d82:	9141      	str	r1, [sp, #260]	; 0x104
   12d84:	4619      	mov	r1, r3
   12d86:	4663      	mov	r3, ip
   12d88:	f7f5 fe88 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12d8c:	e7ff      	b.n	12d8e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x41e>
   12d8e:	a8cb      	add	r0, sp, #812	; 0x32c
   12d90:	90c8      	str	r0, [sp, #800]	; 0x320
   12d92:	a8cc      	add	r0, sp, #816	; 0x330
   12d94:	90c9      	str	r0, [sp, #804]	; 0x324
   12d96:	a8cd      	add	r0, sp, #820	; 0x334
   12d98:	90ca      	str	r0, [sp, #808]	; 0x328
   12d9a:	98c8      	ldr	r0, [sp, #800]	; 0x320
   12d9c:	f8cd 0548 	str.w	r0, [sp, #1352]	; 0x548
   12da0:	99c9      	ldr	r1, [sp, #804]	; 0x324
   12da2:	f8cd 154c 	str.w	r1, [sp, #1356]	; 0x54c
   12da6:	9aca      	ldr	r2, [sp, #808]	; 0x328
   12da8:	f8cd 2550 	str.w	r2, [sp, #1360]	; 0x550
   12dac:	f249 23eb 	movw	r3, #37611	; 0x92eb
   12db0:	f2c0 0300 	movt	r3, #0
   12db4:	9140      	str	r1, [sp, #256]	; 0x100
   12db6:	4619      	mov	r1, r3
   12db8:	923f      	str	r2, [sp, #252]	; 0xfc
   12dba:	f7f6 face 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12dbe:	903e      	str	r0, [sp, #248]	; 0xf8
   12dc0:	913d      	str	r1, [sp, #244]	; 0xf4
   12dc2:	e7ff      	b.n	12dc4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x454>
   12dc4:	f249 21eb 	movw	r1, #37611	; 0x92eb
   12dc8:	f2c0 0100 	movt	r1, #0
   12dcc:	9840      	ldr	r0, [sp, #256]	; 0x100
   12dce:	f7f6 fac4 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12dd2:	903c      	str	r0, [sp, #240]	; 0xf0
   12dd4:	913b      	str	r1, [sp, #236]	; 0xec
   12dd6:	e7ff      	b.n	12dd8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x468>
   12dd8:	f647 7137 	movw	r1, #32567	; 0x7f37
   12ddc:	f2c0 0101 	movt	r1, #1
   12de0:	983f      	ldr	r0, [sp, #252]	; 0xfc
   12de2:	f7f6 faf9 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12de6:	903a      	str	r0, [sp, #232]	; 0xe8
   12de8:	9139      	str	r1, [sp, #228]	; 0xe4
   12dea:	e7ff      	b.n	12dec <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x47c>
   12dec:	983e      	ldr	r0, [sp, #248]	; 0xf8
   12dee:	90c2      	str	r0, [sp, #776]	; 0x308
   12df0:	993d      	ldr	r1, [sp, #244]	; 0xf4
   12df2:	91c3      	str	r1, [sp, #780]	; 0x30c
   12df4:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
   12df6:	92c4      	str	r2, [sp, #784]	; 0x310
   12df8:	9b3b      	ldr	r3, [sp, #236]	; 0xec
   12dfa:	93c5      	str	r3, [sp, #788]	; 0x314
   12dfc:	f8dd c0e8 	ldr.w	ip, [sp, #232]	; 0xe8
   12e00:	f8cd c318 	str.w	ip, [sp, #792]	; 0x318
   12e04:	f8dd e0e4 	ldr.w	lr, [sp, #228]	; 0xe4
   12e08:	f8cd e31c 	str.w	lr, [sp, #796]	; 0x31c
   12e0c:	466c      	mov	r4, sp
   12e0e:	2503      	movs	r5, #3
   12e10:	6025      	str	r5, [r4, #0]
   12e12:	a8bc      	add	r0, sp, #752	; 0x2f0
   12e14:	abc2      	add	r3, sp, #776	; 0x308
   12e16:	9941      	ldr	r1, [sp, #260]	; 0x104
   12e18:	462a      	mov	r2, r5
   12e1a:	f7f5 fe3f 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12e1e:	e7ff      	b.n	12e20 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4b0>
   12e20:	f640 2028 	movw	r0, #2600	; 0xa28
   12e24:	f2c0 0002 	movt	r0, #2
   12e28:	f004 fd97 	bl	1795a <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12e2c:	9038      	str	r0, [sp, #224]	; 0xe0
   12e2e:	e7ff      	b.n	12e30 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4c0>
   12e30:	a8bc      	add	r0, sp, #752	; 0x2f0
   12e32:	9938      	ldr	r1, [sp, #224]	; 0xe0
   12e34:	f004 fdce 	bl	179d4 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12e38:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12e3a:	f640 1018 	movw	r0, #2328	; 0x918
   12e3e:	f2c0 0002 	movt	r0, #2
   12e42:	6800      	ldr	r0, [r0, #0]
   12e44:	a9d3      	add	r1, sp, #844	; 0x34c
   12e46:	91d4      	str	r1, [sp, #848]	; 0x350
   12e48:	90d5      	str	r0, [sp, #852]	; 0x354
   12e4a:	98d4      	ldr	r0, [sp, #848]	; 0x350
   12e4c:	f8cd 0554 	str.w	r0, [sp, #1364]	; 0x554
   12e50:	99d5      	ldr	r1, [sp, #852]	; 0x354
   12e52:	f8cd 1558 	str.w	r1, [sp, #1368]	; 0x558
   12e56:	6802      	ldr	r2, [r0, #0]
   12e58:	680b      	ldr	r3, [r1, #0]
   12e5a:	429a      	cmp	r2, r3
   12e5c:	9037      	str	r0, [sp, #220]	; 0xdc
   12e5e:	9136      	str	r1, [sp, #216]	; 0xd8
   12e60:	d107      	bne.n	12e72 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x502>
   12e62:	e7ff      	b.n	12e64 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4f4>

    //  Create Event Queue and Mbuf (Data) Queue that will store the SPI requests
    unsafe { os::os_eventq_init(&mut SPI_EVENT_QUEUE) };
   12e64:	f646 20a4 	movw	r0, #27300	; 0x6aa4
   12e68:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12e6c:	f007 ffd8 	bl	1ae20 <os_eventq_init>
   12e70:	e075      	b.n	12f5e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5ee>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12e72:	f640 1070 	movw	r0, #2416	; 0x970
   12e76:	f2c0 0002 	movt	r0, #2
   12e7a:	6801      	ldr	r1, [r0, #0]
   12e7c:	9837      	ldr	r0, [sp, #220]	; 0xdc
   12e7e:	90e5      	str	r0, [sp, #916]	; 0x394
   12e80:	9a36      	ldr	r2, [sp, #216]	; 0xd8
   12e82:	92e6      	str	r2, [sp, #920]	; 0x398
   12e84:	f640 2324 	movw	r3, #2596	; 0xa24
   12e88:	f2c0 0302 	movt	r3, #2
   12e8c:	681b      	ldr	r3, [r3, #0]
   12e8e:	f640 1c90 	movw	ip, #2448	; 0x990
   12e92:	f2c0 0c02 	movt	ip, #2
   12e96:	f8dc c000 	ldr.w	ip, [ip]
   12e9a:	46ee      	mov	lr, sp
   12e9c:	2400      	movs	r4, #0
   12e9e:	f8ce 4000 	str.w	r4, [lr]
   12ea2:	a8e7      	add	r0, sp, #924	; 0x39c
   12ea4:	2201      	movs	r2, #1
   12ea6:	9135      	str	r1, [sp, #212]	; 0xd4
   12ea8:	4619      	mov	r1, r3
   12eaa:	4663      	mov	r3, ip
   12eac:	f7f5 fdf6 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12eb0:	e7ff      	b.n	12eb2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x542>
   12eb2:	a8e5      	add	r0, sp, #916	; 0x394
   12eb4:	90e2      	str	r0, [sp, #904]	; 0x388
   12eb6:	a8e6      	add	r0, sp, #920	; 0x398
   12eb8:	90e3      	str	r0, [sp, #908]	; 0x38c
   12eba:	a8e7      	add	r0, sp, #924	; 0x39c
   12ebc:	90e4      	str	r0, [sp, #912]	; 0x390
   12ebe:	98e2      	ldr	r0, [sp, #904]	; 0x388
   12ec0:	f8cd 055c 	str.w	r0, [sp, #1372]	; 0x55c
   12ec4:	99e3      	ldr	r1, [sp, #908]	; 0x38c
   12ec6:	f8cd 1560 	str.w	r1, [sp, #1376]	; 0x560
   12eca:	9ae4      	ldr	r2, [sp, #912]	; 0x390
   12ecc:	f8cd 2564 	str.w	r2, [sp, #1380]	; 0x564
   12ed0:	f249 23eb 	movw	r3, #37611	; 0x92eb
   12ed4:	f2c0 0300 	movt	r3, #0
   12ed8:	9134      	str	r1, [sp, #208]	; 0xd0
   12eda:	4619      	mov	r1, r3
   12edc:	9233      	str	r2, [sp, #204]	; 0xcc
   12ede:	f7f6 fa3c 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12ee2:	9032      	str	r0, [sp, #200]	; 0xc8
   12ee4:	9131      	str	r1, [sp, #196]	; 0xc4
   12ee6:	e7ff      	b.n	12ee8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x578>
   12ee8:	f249 21eb 	movw	r1, #37611	; 0x92eb
   12eec:	f2c0 0100 	movt	r1, #0
   12ef0:	9834      	ldr	r0, [sp, #208]	; 0xd0
   12ef2:	f7f6 fa32 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12ef6:	9030      	str	r0, [sp, #192]	; 0xc0
   12ef8:	912f      	str	r1, [sp, #188]	; 0xbc
   12efa:	e7ff      	b.n	12efc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x58c>
   12efc:	f647 7137 	movw	r1, #32567	; 0x7f37
   12f00:	f2c0 0101 	movt	r1, #1
   12f04:	9833      	ldr	r0, [sp, #204]	; 0xcc
   12f06:	f7f6 fa67 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12f0a:	902e      	str	r0, [sp, #184]	; 0xb8
   12f0c:	912d      	str	r1, [sp, #180]	; 0xb4
   12f0e:	e7ff      	b.n	12f10 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5a0>
   12f10:	9832      	ldr	r0, [sp, #200]	; 0xc8
   12f12:	90dc      	str	r0, [sp, #880]	; 0x370
   12f14:	9931      	ldr	r1, [sp, #196]	; 0xc4
   12f16:	91dd      	str	r1, [sp, #884]	; 0x374
   12f18:	9a30      	ldr	r2, [sp, #192]	; 0xc0
   12f1a:	92de      	str	r2, [sp, #888]	; 0x378
   12f1c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   12f1e:	93df      	str	r3, [sp, #892]	; 0x37c
   12f20:	f8dd c0b8 	ldr.w	ip, [sp, #184]	; 0xb8
   12f24:	f8cd c380 	str.w	ip, [sp, #896]	; 0x380
   12f28:	f8dd e0b4 	ldr.w	lr, [sp, #180]	; 0xb4
   12f2c:	f8cd e384 	str.w	lr, [sp, #900]	; 0x384
   12f30:	466c      	mov	r4, sp
   12f32:	2503      	movs	r5, #3
   12f34:	6025      	str	r5, [r4, #0]
   12f36:	a8d6      	add	r0, sp, #856	; 0x358
   12f38:	abdc      	add	r3, sp, #880	; 0x370
   12f3a:	9935      	ldr	r1, [sp, #212]	; 0xd4
   12f3c:	462a      	mov	r2, r5
   12f3e:	f7f5 fdad 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12f42:	e7ff      	b.n	12f44 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5d4>
   12f44:	f640 2038 	movw	r0, #2616	; 0xa38
   12f48:	f2c0 0002 	movt	r0, #2
   12f4c:	f004 fd05 	bl	1795a <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12f50:	902c      	str	r0, [sp, #176]	; 0xb0
   12f52:	e7ff      	b.n	12f54 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5e4>
   12f54:	a8d6      	add	r0, sp, #856	; 0x358
   12f56:	992c      	ldr	r1, [sp, #176]	; 0xb0
   12f58:	f004 fd3c 	bl	179d4 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12f5c:	defe      	udf	#254	; 0xfe
    let rc = unsafe { os::os_mqueue_init(
        &mut SPI_DATA_QUEUE, 
        Some(spi_event_callback), 
   12f5e:	f643 00ed 	movw	r0, #14573	; 0x38ed
   12f62:	f2c0 0001 	movt	r0, #1
   12f66:	90ee      	str	r0, [sp, #952]	; 0x3b8
    let rc = unsafe { os::os_mqueue_init(
   12f68:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
   12f6a:	f646 208c 	movw	r0, #27276	; 0x6a8c
   12f6e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12f72:	2200      	movs	r2, #0
   12f74:	f008 f802 	bl	1af7c <os_mqueue_init>
   12f78:	90ed      	str	r0, [sp, #948]	; 0x3b4
   12f7a:	e7ff      	b.n	12f7c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x60c>
        NULL
    ) };
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   12f7c:	f640 1018 	movw	r0, #2328	; 0x918
   12f80:	f2c0 0002 	movt	r0, #2
   12f84:	6800      	ldr	r0, [r0, #0]
   12f86:	a9ed      	add	r1, sp, #948	; 0x3b4
   12f88:	91ef      	str	r1, [sp, #956]	; 0x3bc
   12f8a:	90f0      	str	r0, [sp, #960]	; 0x3c0
   12f8c:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
   12f8e:	f8cd 0568 	str.w	r0, [sp, #1384]	; 0x568
   12f92:	99f0      	ldr	r1, [sp, #960]	; 0x3c0
   12f94:	f8cd 156c 	str.w	r1, [sp, #1388]	; 0x56c
   12f98:	6802      	ldr	r2, [r0, #0]
   12f9a:	680b      	ldr	r3, [r1, #0]
   12f9c:	429a      	cmp	r2, r3
   12f9e:	902b      	str	r0, [sp, #172]	; 0xac
   12fa0:	912a      	str	r1, [sp, #168]	; 0xa8
   12fa2:	d10a      	bne.n	12fba <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x64a>
   12fa4:	e7ff      	b.n	12fa6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x636>

    //  Create the Semaphore that will signal whether the SPI request has completed
    let rc = unsafe { os::os_sem_init(&mut SPI_SEM, 0) };  //  Init to 0 tokens, so caller will block until SPI request is completed.
   12fa6:	f646 207c 	movw	r0, #27260	; 0x6a7c
   12faa:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12fae:	2100      	movs	r1, #0
   12fb0:	f008 fcde 	bl	1b970 <os_sem_init>
   12fb4:	f8cd 0420 	str.w	r0, [sp, #1056]	; 0x420
   12fb8:	e07b      	b.n	130b2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x742>
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   12fba:	f640 1070 	movw	r0, #2416	; 0x970
   12fbe:	f2c0 0002 	movt	r0, #2
   12fc2:	6801      	ldr	r1, [r0, #0]
   12fc4:	982b      	ldr	r0, [sp, #172]	; 0xac
   12fc6:	f8cd 0400 	str.w	r0, [sp, #1024]	; 0x400
   12fca:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   12fcc:	f8cd 2404 	str.w	r2, [sp, #1028]	; 0x404
   12fd0:	f640 235c 	movw	r3, #2652	; 0xa5c
   12fd4:	f2c0 0302 	movt	r3, #2
   12fd8:	681b      	ldr	r3, [r3, #0]
   12fda:	f640 1c90 	movw	ip, #2448	; 0x990
   12fde:	f2c0 0c02 	movt	ip, #2
   12fe2:	f8dc c000 	ldr.w	ip, [ip]
   12fe6:	46ee      	mov	lr, sp
   12fe8:	2400      	movs	r4, #0
   12fea:	f8ce 4000 	str.w	r4, [lr]
   12fee:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   12ff2:	2201      	movs	r2, #1
   12ff4:	9129      	str	r1, [sp, #164]	; 0xa4
   12ff6:	4619      	mov	r1, r3
   12ff8:	4663      	mov	r3, ip
   12ffa:	f7f5 fd4f 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12ffe:	e7ff      	b.n	13000 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x690>
   13000:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
   13004:	90fd      	str	r0, [sp, #1012]	; 0x3f4
   13006:	f20d 4004 	addw	r0, sp, #1028	; 0x404
   1300a:	90fe      	str	r0, [sp, #1016]	; 0x3f8
   1300c:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   13010:	90ff      	str	r0, [sp, #1020]	; 0x3fc
   13012:	98fd      	ldr	r0, [sp, #1012]	; 0x3f4
   13014:	f8cd 0570 	str.w	r0, [sp, #1392]	; 0x570
   13018:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
   1301a:	f8cd 1574 	str.w	r1, [sp, #1396]	; 0x574
   1301e:	9aff      	ldr	r2, [sp, #1020]	; 0x3fc
   13020:	f8cd 2578 	str.w	r2, [sp, #1400]	; 0x578
   13024:	f249 23eb 	movw	r3, #37611	; 0x92eb
   13028:	f2c0 0300 	movt	r3, #0
   1302c:	9128      	str	r1, [sp, #160]	; 0xa0
   1302e:	4619      	mov	r1, r3
   13030:	9227      	str	r2, [sp, #156]	; 0x9c
   13032:	f7f6 f992 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13036:	9026      	str	r0, [sp, #152]	; 0x98
   13038:	9125      	str	r1, [sp, #148]	; 0x94
   1303a:	e7ff      	b.n	1303c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6cc>
   1303c:	f249 21eb 	movw	r1, #37611	; 0x92eb
   13040:	f2c0 0100 	movt	r1, #0
   13044:	9828      	ldr	r0, [sp, #160]	; 0xa0
   13046:	f7f6 f988 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1304a:	9024      	str	r0, [sp, #144]	; 0x90
   1304c:	9123      	str	r1, [sp, #140]	; 0x8c
   1304e:	e7ff      	b.n	13050 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6e0>
   13050:	f647 7137 	movw	r1, #32567	; 0x7f37
   13054:	f2c0 0101 	movt	r1, #1
   13058:	9827      	ldr	r0, [sp, #156]	; 0x9c
   1305a:	f7f6 f9bd 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1305e:	9022      	str	r0, [sp, #136]	; 0x88
   13060:	9121      	str	r1, [sp, #132]	; 0x84
   13062:	e7ff      	b.n	13064 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6f4>
   13064:	9826      	ldr	r0, [sp, #152]	; 0x98
   13066:	90f7      	str	r0, [sp, #988]	; 0x3dc
   13068:	9925      	ldr	r1, [sp, #148]	; 0x94
   1306a:	91f8      	str	r1, [sp, #992]	; 0x3e0
   1306c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1306e:	92f9      	str	r2, [sp, #996]	; 0x3e4
   13070:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   13072:	93fa      	str	r3, [sp, #1000]	; 0x3e8
   13074:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
   13078:	f8cd c3ec 	str.w	ip, [sp, #1004]	; 0x3ec
   1307c:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
   13080:	f8cd e3f0 	str.w	lr, [sp, #1008]	; 0x3f0
   13084:	466c      	mov	r4, sp
   13086:	2503      	movs	r5, #3
   13088:	6025      	str	r5, [r4, #0]
   1308a:	a8f1      	add	r0, sp, #964	; 0x3c4
   1308c:	abf7      	add	r3, sp, #988	; 0x3dc
   1308e:	9929      	ldr	r1, [sp, #164]	; 0xa4
   13090:	462a      	mov	r2, r5
   13092:	f7f5 fd03 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13096:	e7ff      	b.n	13098 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x728>
   13098:	f640 2060 	movw	r0, #2656	; 0xa60
   1309c:	f2c0 0002 	movt	r0, #2
   130a0:	f004 fc5b 	bl	1795a <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   130a4:	9020      	str	r0, [sp, #128]	; 0x80
   130a6:	e7ff      	b.n	130a8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x738>
   130a8:	a8f1      	add	r0, sp, #964	; 0x3c4
   130aa:	9920      	ldr	r1, [sp, #128]	; 0x80
   130ac:	f004 fc92 	bl	179d4 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   130b0:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   130b2:	f640 1018 	movw	r0, #2328	; 0x918
   130b6:	f2c0 0002 	movt	r0, #2
   130ba:	6800      	ldr	r0, [r0, #0]
   130bc:	f50d 6184 	add.w	r1, sp, #1056	; 0x420
   130c0:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
   130c4:	f8cd 0428 	str.w	r0, [sp, #1064]	; 0x428
   130c8:	f8dd 0424 	ldr.w	r0, [sp, #1060]	; 0x424
   130cc:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
   130d0:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
   130d4:	f8cd 1580 	str.w	r1, [sp, #1408]	; 0x580
   130d8:	6802      	ldr	r2, [r0, #0]
   130da:	680b      	ldr	r3, [r1, #0]
   130dc:	429a      	cmp	r2, r3
   130de:	901f      	str	r0, [sp, #124]	; 0x7c
   130e0:	911e      	str	r1, [sp, #120]	; 0x78
   130e2:	d10a      	bne.n	130fa <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x78a>
   130e4:	e7ff      	b.n	130e6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x776>

    //  Create the Semaphore that will throttle the number of queued SPI requests
    let rc = unsafe { os::os_sem_init(&mut SPI_THROTTLE_SEM, 2) };  //  Only max 2 requests queued, the next request will block
   130e6:	f646 2084 	movw	r0, #27268	; 0x6a84
   130ea:	f2c2 0000 	movt	r0, #8192	; 0x2000
   130ee:	2102      	movs	r1, #2
   130f0:	f008 fc3e 	bl	1b970 <os_sem_init>
   130f4:	f8cd 0488 	str.w	r0, [sp, #1160]	; 0x488
   130f8:	e088      	b.n	1320c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x89c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   130fa:	f640 1070 	movw	r0, #2416	; 0x970
   130fe:	f2c0 0002 	movt	r0, #2
   13102:	6801      	ldr	r1, [r0, #0]
   13104:	981f      	ldr	r0, [sp, #124]	; 0x7c
   13106:	f8cd 0468 	str.w	r0, [sp, #1128]	; 0x468
   1310a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1310c:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
   13110:	f640 2388 	movw	r3, #2696	; 0xa88
   13114:	f2c0 0302 	movt	r3, #2
   13118:	681b      	ldr	r3, [r3, #0]
   1311a:	f640 1c90 	movw	ip, #2448	; 0x990
   1311e:	f2c0 0c02 	movt	ip, #2
   13122:	f8dc c000 	ldr.w	ip, [ip]
   13126:	46ee      	mov	lr, sp
   13128:	2400      	movs	r4, #0
   1312a:	f8ce 4000 	str.w	r4, [lr]
   1312e:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   13132:	2201      	movs	r2, #1
   13134:	911d      	str	r1, [sp, #116]	; 0x74
   13136:	4619      	mov	r1, r3
   13138:	4663      	mov	r3, ip
   1313a:	f7f5 fcaf 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1313e:	e7ff      	b.n	13140 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x7d0>
   13140:	f50d 608d 	add.w	r0, sp, #1128	; 0x468
   13144:	f8cd 045c 	str.w	r0, [sp, #1116]	; 0x45c
   13148:	f20d 406c 	addw	r0, sp, #1132	; 0x46c
   1314c:	f8cd 0460 	str.w	r0, [sp, #1120]	; 0x460
   13150:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   13154:	f8cd 0464 	str.w	r0, [sp, #1124]	; 0x464
   13158:	f8dd 045c 	ldr.w	r0, [sp, #1116]	; 0x45c
   1315c:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
   13160:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   13164:	f8cd 1588 	str.w	r1, [sp, #1416]	; 0x588
   13168:	f8dd 2464 	ldr.w	r2, [sp, #1124]	; 0x464
   1316c:	f8cd 258c 	str.w	r2, [sp, #1420]	; 0x58c
   13170:	f249 333f 	movw	r3, #37695	; 0x933f
   13174:	f2c0 0300 	movt	r3, #0
   13178:	911c      	str	r1, [sp, #112]	; 0x70
   1317a:	4619      	mov	r1, r3
   1317c:	921b      	str	r2, [sp, #108]	; 0x6c
   1317e:	f7f6 f916 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13182:	901a      	str	r0, [sp, #104]	; 0x68
   13184:	9119      	str	r1, [sp, #100]	; 0x64
   13186:	e7ff      	b.n	13188 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x818>
   13188:	f249 313f 	movw	r1, #37695	; 0x933f
   1318c:	f2c0 0100 	movt	r1, #0
   13190:	981c      	ldr	r0, [sp, #112]	; 0x70
   13192:	f7f6 f90c 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13196:	9018      	str	r0, [sp, #96]	; 0x60
   13198:	9117      	str	r1, [sp, #92]	; 0x5c
   1319a:	e7ff      	b.n	1319c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x82c>
   1319c:	f647 7137 	movw	r1, #32567	; 0x7f37
   131a0:	f2c0 0101 	movt	r1, #1
   131a4:	981b      	ldr	r0, [sp, #108]	; 0x6c
   131a6:	f7f6 f917 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   131aa:	9016      	str	r0, [sp, #88]	; 0x58
   131ac:	9115      	str	r1, [sp, #84]	; 0x54
   131ae:	e7ff      	b.n	131b0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x840>
   131b0:	981a      	ldr	r0, [sp, #104]	; 0x68
   131b2:	f8cd 0444 	str.w	r0, [sp, #1092]	; 0x444
   131b6:	9919      	ldr	r1, [sp, #100]	; 0x64
   131b8:	f8cd 1448 	str.w	r1, [sp, #1096]	; 0x448
   131bc:	9a18      	ldr	r2, [sp, #96]	; 0x60
   131be:	f8cd 244c 	str.w	r2, [sp, #1100]	; 0x44c
   131c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   131c4:	f8cd 3450 	str.w	r3, [sp, #1104]	; 0x450
   131c8:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
   131cc:	f8cd c454 	str.w	ip, [sp, #1108]	; 0x454
   131d0:	f8dd e054 	ldr.w	lr, [sp, #84]	; 0x54
   131d4:	f8cd e458 	str.w	lr, [sp, #1112]	; 0x458
   131d8:	466c      	mov	r4, sp
   131da:	2503      	movs	r5, #3
   131dc:	6025      	str	r5, [r4, #0]
   131de:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   131e2:	f20d 4344 	addw	r3, sp, #1092	; 0x444
   131e6:	991d      	ldr	r1, [sp, #116]	; 0x74
   131e8:	462a      	mov	r2, r5
   131ea:	f7f5 fc57 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   131ee:	e7ff      	b.n	131f0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x880>
   131f0:	f640 208c 	movw	r0, #2700	; 0xa8c
   131f4:	f2c0 0002 	movt	r0, #2
   131f8:	f004 fbaf 	bl	1795a <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   131fc:	9014      	str	r0, [sp, #80]	; 0x50
   131fe:	e7ff      	b.n	13200 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x890>
   13200:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   13204:	9914      	ldr	r1, [sp, #80]	; 0x50
   13206:	f004 fbe5 	bl	179d4 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1320a:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   1320c:	f640 1018 	movw	r0, #2328	; 0x918
   13210:	f2c0 0002 	movt	r0, #2
   13214:	6800      	ldr	r0, [r0, #0]
   13216:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
   1321a:	f8cd 148c 	str.w	r1, [sp, #1164]	; 0x48c
   1321e:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
   13222:	f8dd 048c 	ldr.w	r0, [sp, #1164]	; 0x48c
   13226:	f8cd 0590 	str.w	r0, [sp, #1424]	; 0x590
   1322a:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   1322e:	f8cd 1594 	str.w	r1, [sp, #1428]	; 0x594
   13232:	6802      	ldr	r2, [r0, #0]
   13234:	680b      	ldr	r3, [r1, #0]
   13236:	429a      	cmp	r2, r3
   13238:	9013      	str	r0, [sp, #76]	; 0x4c
   1323a:	9112      	str	r1, [sp, #72]	; 0x48
   1323c:	d125      	bne.n	1328a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x91a>
   1323e:	e7ff      	b.n	13240 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x8d0>
    
    //  Create a task to send SPI requests sequentially from the SPI Event Queue and Mbuf Queue
    os::task_init(                //  Create a new task and start it...
        unsafe { &mut SPI_TASK }, //  Task object will be saved here
        &init_strn!( "spi" ),     //  Name of task
   13240:	f640 20b8 	movw	r0, #2744	; 0xab8
   13244:	f2c0 0002 	movt	r0, #2
   13248:	6801      	ldr	r1, [r0, #0]
        Some( spi_task_func ),    //  Function to execute when task starts
   1324a:	f243 30eb 	movw	r0, #13291	; 0x33eb
   1324e:	f2c0 0001 	movt	r0, #1
   13252:	f8cd 04f4 	str.w	r0, [sp, #1268]	; 0x4f4
    os::task_init(                //  Create a new task and start it...
   13256:	f8dd 24f4 	ldr.w	r2, [sp, #1268]	; 0x4f4
   1325a:	4668      	mov	r0, sp
   1325c:	f44f 7380 	mov.w	r3, #256	; 0x100
   13260:	6103      	str	r3, [r0, #16]
   13262:	60c3      	str	r3, [r0, #12]
   13264:	f646 3304 	movw	r3, #27396	; 0x6b04
   13268:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1326c:	6083      	str	r3, [r0, #8]
   1326e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13272:	6043      	str	r3, [r0, #4]
   13274:	230a      	movs	r3, #10
   13276:	6003      	str	r3, [r0, #0]
   13278:	f646 20b4 	movw	r0, #27316	; 0x6ab4
   1327c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13280:	2300      	movs	r3, #0
   13282:	f7f5 fd05 	bl	8c90 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>
   13286:	9011      	str	r0, [sp, #68]	; 0x44
   13288:	e088      	b.n	1339c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   1328a:	f640 1070 	movw	r0, #2416	; 0x970
   1328e:	f2c0 0002 	movt	r0, #2
   13292:	6801      	ldr	r1, [r0, #0]
   13294:	9813      	ldr	r0, [sp, #76]	; 0x4c
   13296:	f8cd 04d0 	str.w	r0, [sp, #1232]	; 0x4d0
   1329a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1329c:	f8cd 24d4 	str.w	r2, [sp, #1236]	; 0x4d4
   132a0:	f640 2388 	movw	r3, #2696	; 0xa88
   132a4:	f2c0 0302 	movt	r3, #2
   132a8:	681b      	ldr	r3, [r3, #0]
   132aa:	f640 1c90 	movw	ip, #2448	; 0x990
   132ae:	f2c0 0c02 	movt	ip, #2
   132b2:	f8dc c000 	ldr.w	ip, [ip]
   132b6:	46ee      	mov	lr, sp
   132b8:	2400      	movs	r4, #0
   132ba:	f8ce 4000 	str.w	r4, [lr]
   132be:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   132c2:	2201      	movs	r2, #1
   132c4:	9110      	str	r1, [sp, #64]	; 0x40
   132c6:	4619      	mov	r1, r3
   132c8:	4663      	mov	r3, ip
   132ca:	f7f5 fbe7 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   132ce:	e7ff      	b.n	132d0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x960>
   132d0:	f50d 609a 	add.w	r0, sp, #1232	; 0x4d0
   132d4:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
   132d8:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
   132dc:	f8cd 04c8 	str.w	r0, [sp, #1224]	; 0x4c8
   132e0:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   132e4:	f8cd 04cc 	str.w	r0, [sp, #1228]	; 0x4cc
   132e8:	f8dd 04c4 	ldr.w	r0, [sp, #1220]	; 0x4c4
   132ec:	f8cd 0598 	str.w	r0, [sp, #1432]	; 0x598
   132f0:	f8dd 14c8 	ldr.w	r1, [sp, #1224]	; 0x4c8
   132f4:	f8cd 159c 	str.w	r1, [sp, #1436]	; 0x59c
   132f8:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
   132fc:	f8cd 25a0 	str.w	r2, [sp, #1440]	; 0x5a0
   13300:	f249 333f 	movw	r3, #37695	; 0x933f
   13304:	f2c0 0300 	movt	r3, #0
   13308:	910f      	str	r1, [sp, #60]	; 0x3c
   1330a:	4619      	mov	r1, r3
   1330c:	920e      	str	r2, [sp, #56]	; 0x38
   1330e:	f7f6 f84e 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13312:	900d      	str	r0, [sp, #52]	; 0x34
   13314:	910c      	str	r1, [sp, #48]	; 0x30
   13316:	e7ff      	b.n	13318 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9a8>
   13318:	f249 313f 	movw	r1, #37695	; 0x933f
   1331c:	f2c0 0100 	movt	r1, #0
   13320:	980f      	ldr	r0, [sp, #60]	; 0x3c
   13322:	f7f6 f844 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13326:	900b      	str	r0, [sp, #44]	; 0x2c
   13328:	910a      	str	r1, [sp, #40]	; 0x28
   1332a:	e7ff      	b.n	1332c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9bc>
   1332c:	f647 7137 	movw	r1, #32567	; 0x7f37
   13330:	f2c0 0101 	movt	r1, #1
   13334:	980e      	ldr	r0, [sp, #56]	; 0x38
   13336:	f7f6 f84f 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1333a:	9009      	str	r0, [sp, #36]	; 0x24
   1333c:	9108      	str	r1, [sp, #32]
   1333e:	e7ff      	b.n	13340 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9d0>
   13340:	980d      	ldr	r0, [sp, #52]	; 0x34
   13342:	f8cd 04ac 	str.w	r0, [sp, #1196]	; 0x4ac
   13346:	990c      	ldr	r1, [sp, #48]	; 0x30
   13348:	f8cd 14b0 	str.w	r1, [sp, #1200]	; 0x4b0
   1334c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1334e:	f8cd 24b4 	str.w	r2, [sp, #1204]	; 0x4b4
   13352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13354:	f8cd 34b8 	str.w	r3, [sp, #1208]	; 0x4b8
   13358:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   1335c:	f8cd c4bc 	str.w	ip, [sp, #1212]	; 0x4bc
   13360:	f8dd e020 	ldr.w	lr, [sp, #32]
   13364:	f8cd e4c0 	str.w	lr, [sp, #1216]	; 0x4c0
   13368:	466c      	mov	r4, sp
   1336a:	2503      	movs	r5, #3
   1336c:	6025      	str	r5, [r4, #0]
   1336e:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   13372:	f20d 43ac 	addw	r3, sp, #1196	; 0x4ac
   13376:	9910      	ldr	r1, [sp, #64]	; 0x40
   13378:	462a      	mov	r2, r5
   1337a:	f7f5 fb8f 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1337e:	e7ff      	b.n	13380 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa10>
   13380:	f640 209c 	movw	r0, #2716	; 0xa9c
   13384:	f2c0 0002 	movt	r0, #2
   13388:	f004 fae7 	bl	1795a <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1338c:	9007      	str	r0, [sp, #28]
   1338e:	e7ff      	b.n	13390 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa20>
   13390:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   13394:	9907      	ldr	r1, [sp, #28]
   13396:	f004 fb1d 	bl	179d4 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1339a:	defe      	udf	#254	; 0xfe
    os::task_init(                //  Create a new task and start it...
   1339c:	9811      	ldr	r0, [sp, #68]	; 0x44
   1339e:	f7f5 fbeb 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   133a2:	f8cd 04f0 	str.w	r0, [sp, #1264]	; 0x4f0
   133a6:	e7ff      	b.n	133a8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa38>
        NULL,  //  Argument to be passed to above function
        10,    //  Task priority: highest is 0, lowest is 255 (main task is 127)
        os::OS_WAIT_FOREVER as u32,     //  Don't do sanity / watchdog checking
        unsafe { &mut SPI_TASK_STACK }, //  Stack space for the task
        SPI_TASK_STACK_SIZE as u16      //  Size of the stack (in 4-byte units)
    ) ? ;                               //  `?` means check for error
   133a8:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   133ac:	1e41      	subs	r1, r0, #1
   133ae:	bf18      	it	ne
   133b0:	2101      	movne	r1, #1
   133b2:	2801      	cmp	r0, #1
   133b4:	d001      	beq.n	133ba <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa4a>
   133b6:	e7ff      	b.n	133b8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa48>
   133b8:	e005      	b.n	133c6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa56>
   133ba:	2000      	movs	r0, #0
    Ok(())
   133bc:	9069      	str	r0, [sp, #420]	; 0x1a4
   133be:	2001      	movs	r0, #1
   133c0:	9069      	str	r0, [sp, #420]	; 0x1a4
}
   133c2:	e008      	b.n	133d6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>
    os::task_init(                //  Create a new task and start it...
   133c4:	defe      	udf	#254	; 0xfe
    ) ? ;                               //  `?` means check for error
   133c6:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   133ca:	f8cd 05a4 	str.w	r0, [sp, #1444]	; 0x5a4
   133ce:	f7ff fa17 	bl	12800 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   133d2:	9006      	str	r0, [sp, #24]
   133d4:	e003      	b.n	133de <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa6e>
}
   133d6:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   133d8:	f50d 6db5 	add.w	sp, sp, #1448	; 0x5a8
   133dc:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;                               //  `?` means check for error
   133de:	9806      	ldr	r0, [sp, #24]
   133e0:	f7f5 fbbe 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   133e4:	9069      	str	r0, [sp, #420]	; 0x1a4
   133e6:	e7ff      	b.n	133e8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa78>
   133e8:	e7f5      	b.n	133d6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>

000133ea <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E>:

/// SPI Task Function.  Execute sequentially each SPI request posted to our Event Queue.  When there are no requests to process, block until one arrives.
extern "C" fn spi_task_func(_arg: Ptr) {
   133ea:	b580      	push	{r7, lr}
   133ec:	b082      	sub	sp, #8
   133ee:	9001      	str	r0, [sp, #4]
    loop {
   133f0:	e7ff      	b.n	133f2 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>
        //  Forever read SPI requests and execute them. Will call spi_event_callback().
        os::eventq_run(
   133f2:	f646 20a4 	movw	r0, #27300	; 0x6aa4
   133f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
   133fa:	f7f5 fc30 	bl	8c5e <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
   133fe:	9000      	str	r0, [sp, #0]
   13400:	e7ff      	b.n	13402 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x18>
   13402:	f640 21bc 	movw	r1, #2748	; 0xabc
   13406:	f2c0 0102 	movt	r1, #2
   1340a:	f640 23c8 	movw	r3, #2760	; 0xac8
   1340e:	f2c0 0302 	movt	r3, #2
   13412:	220b      	movs	r2, #11
   13414:	9800      	ldr	r0, [sp, #0]
   13416:	f7f5 fb70 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   1341a:	e7ff      	b.n	1341c <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x32>
            unsafe { &mut SPI_EVENT_QUEUE }
        ).expect("eventq fail");

        //  Tickle the watchdog so that the Watchdog Timer doesn't expire. Mynewt assumes the process is hung if we don't tickle the watchdog.
        unsafe { hal_watchdog_tickle() };
   1341c:	f007 f9e2 	bl	1a7e4 <hal_watchdog_tickle>
   13420:	e7ff      	b.n	13422 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x38>
    loop {
   13422:	e7e6      	b.n	133f2 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>

00013424 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>:
    }
}

/// Set pending request for non-blocking SPI write for Command Byte. Returns without waiting for write to complete.
pub fn spi_noblock_write_command(cmd: u8) -> MynewtResult<()> {
   13424:	b580      	push	{r7, lr}
   13426:	b08c      	sub	sp, #48	; 0x30
   13428:	4601      	mov	r1, r0
   1342a:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    //  If there is a pending Command Byte, enqueue it.
    spi_noblock_write_flush() ? ;
   1342e:	9104      	str	r1, [sp, #16]
   13430:	f000 f8d4 	bl	135dc <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   13434:	9003      	str	r0, [sp, #12]
   13436:	e7ff      	b.n	13438 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x14>
   13438:	9803      	ldr	r0, [sp, #12]
   1343a:	f7f5 fb9d 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   1343e:	9006      	str	r0, [sp, #24]
   13440:	e7ff      	b.n	13442 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x1e>
   13442:	9806      	ldr	r0, [sp, #24]
   13444:	1e41      	subs	r1, r0, #1
   13446:	bf18      	it	ne
   13448:	2101      	movne	r1, #1
   1344a:	2801      	cmp	r0, #1
   1344c:	d001      	beq.n	13452 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2e>
   1344e:	e7ff      	b.n	13450 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2c>
   13450:	e00c      	b.n	1346c <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x48>
    //  Set the pending Command Byte.
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   13452:	f644 2070 	movw	r0, #19056	; 0x4a70
   13456:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1345a:	9904      	ldr	r1, [sp, #16]
   1345c:	f7ff f9a4 	bl	127a8 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>
   13460:	f88d 101d 	strb.w	r1, [sp, #29]
   13464:	f88d 001c 	strb.w	r0, [sp, #28]
   13468:	e00f      	b.n	1348a <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x66>
    spi_noblock_write_flush() ? ;
   1346a:	defe      	udf	#254	; 0xfe
   1346c:	9806      	ldr	r0, [sp, #24]
   1346e:	900b      	str	r0, [sp, #44]	; 0x2c
   13470:	f7ff f9c6 	bl	12800 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   13474:	9002      	str	r0, [sp, #8]
   13476:	e002      	b.n	1347e <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x5a>
        return Err(MynewtError::SYS_EINVAL);
    }
    Ok(())
}
   13478:	9805      	ldr	r0, [sp, #20]
   1347a:	b00c      	add	sp, #48	; 0x30
   1347c:	bd80      	pop	{r7, pc}
    spi_noblock_write_flush() ? ;
   1347e:	9802      	ldr	r0, [sp, #8]
   13480:	f7f5 fb6e 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   13484:	9005      	str	r0, [sp, #20]
   13486:	e7ff      	b.n	13488 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x64>
   13488:	e7f6      	b.n	13478 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   1348a:	a807      	add	r0, sp, #28
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   1348c:	f7f5 fb5c 	bl	8b48 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>
   13490:	9001      	str	r0, [sp, #4]
   13492:	e7ff      	b.n	13494 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x70>
   13494:	9801      	ldr	r0, [sp, #4]
   13496:	07c1      	lsls	r1, r0, #31
   13498:	2900      	cmp	r1, #0
   1349a:	d105      	bne.n	134a8 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x84>
   1349c:	e7ff      	b.n	1349e <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x7a>
   1349e:	2000      	movs	r0, #0
    Ok(())
   134a0:	9005      	str	r0, [sp, #20]
   134a2:	2001      	movs	r0, #1
   134a4:	9005      	str	r0, [sp, #20]
}
   134a6:	e7e7      	b.n	13478 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   134a8:	f06f 0001 	mvn.w	r0, #1
        return Err(MynewtError::SYS_EINVAL);
   134ac:	9008      	str	r0, [sp, #32]
   134ae:	9808      	ldr	r0, [sp, #32]
   134b0:	9005      	str	r0, [sp, #20]
   134b2:	e7e1      	b.n	13478 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>

000134b4 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>:

/// Set pending request for non-blocking SPI write for Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_data(data: &[u8]) -> MynewtResult<()> {
   134b4:	b580      	push	{r7, lr}
   134b6:	b094      	sub	sp, #80	; 0x50
   134b8:	9010      	str	r0, [sp, #64]	; 0x40
   134ba:	9111      	str	r1, [sp, #68]	; 0x44
    assert!(unsafe { PENDING_CMD.len() } > 0, "no cmd byte");  //  Must have Command Byte before Data Bytes
   134bc:	f644 2270 	movw	r2, #19056	; 0x4a70
   134c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   134c4:	900d      	str	r0, [sp, #52]	; 0x34
   134c6:	4610      	mov	r0, r2
   134c8:	910c      	str	r1, [sp, #48]	; 0x30
   134ca:	f7ff f953 	bl	12774 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   134ce:	900b      	str	r0, [sp, #44]	; 0x2c
   134d0:	910a      	str	r1, [sp, #40]	; 0x28
   134d2:	e7ff      	b.n	134d4 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x20>
   134d4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   134d6:	990a      	ldr	r1, [sp, #40]	; 0x28
   134d8:	f7fe fd07 	bl	11eea <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   134dc:	9009      	str	r0, [sp, #36]	; 0x24
   134de:	e7ff      	b.n	134e0 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x2c>
   134e0:	9809      	ldr	r0, [sp, #36]	; 0x24
   134e2:	2800      	cmp	r0, #0
   134e4:	d009      	beq.n	134fa <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x46>
   134e6:	e7ff      	b.n	134e8 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x34>
    //  if unsafe { PENDING_DATA.len() + data.len() > PENDING_DATA.capacity() } { cortex_m::asm::bkpt(); } ////
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   134e8:	f644 2078 	movw	r0, #19064	; 0x4a78
   134ec:	f2c2 0000 	movt	r0, #8192	; 0x2000
   134f0:	f7ff f934 	bl	1275c <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>
   134f4:	9008      	str	r0, [sp, #32]
   134f6:	9107      	str	r1, [sp, #28]
   134f8:	e00b      	b.n	13512 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x5e>
    assert!(unsafe { PENDING_CMD.len() } > 0, "no cmd byte");  //  Must have Command Byte before Data Bytes
   134fa:	f640 20d8 	movw	r0, #2776	; 0xad8
   134fe:	f2c0 0002 	movt	r0, #2
   13502:	f640 22e4 	movw	r2, #2788	; 0xae4
   13506:	f2c0 0202 	movt	r2, #2
   1350a:	210b      	movs	r1, #11
   1350c:	f004 fa2c 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13510:	defe      	udf	#254	; 0xfe
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   13512:	9808      	ldr	r0, [sp, #32]
   13514:	9907      	ldr	r1, [sp, #28]
   13516:	f7fe fce8 	bl	11eea <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   1351a:	9006      	str	r0, [sp, #24]
   1351c:	e7ff      	b.n	1351e <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x6a>
   1351e:	980d      	ldr	r0, [sp, #52]	; 0x34
   13520:	990c      	ldr	r1, [sp, #48]	; 0x30
   13522:	f7fe fce2 	bl	11eea <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   13526:	9005      	str	r0, [sp, #20]
   13528:	e7ff      	b.n	1352a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x76>
   1352a:	9806      	ldr	r0, [sp, #24]
   1352c:	9905      	ldr	r1, [sp, #20]
   1352e:	1842      	adds	r2, r0, r1
   13530:	4613      	mov	r3, r2
   13532:	4282      	cmp	r2, r0
   13534:	9304      	str	r3, [sp, #16]
   13536:	d345      	bcc.n	135c4 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x110>
   13538:	e7ff      	b.n	1353a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x86>
   1353a:	f644 2078 	movw	r0, #19064	; 0x4a78
   1353e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13542:	f7ff f953 	bl	127ec <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E>
   13546:	9003      	str	r0, [sp, #12]
   13548:	e7ff      	b.n	1354a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x96>
   1354a:	9804      	ldr	r0, [sp, #16]
   1354c:	9903      	ldr	r1, [sp, #12]
   1354e:	4288      	cmp	r0, r1
   13550:	d80a      	bhi.n	13568 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xb4>
   13552:	e7ff      	b.n	13554 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xa0>
    //  Append Data Bytes to Pending Data Bytes.
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   13554:	f644 2078 	movw	r0, #19064	; 0x4a78
   13558:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1355c:	990d      	ldr	r1, [sp, #52]	; 0x34
   1355e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13560:	f7ff f914 	bl	1278c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E>
   13564:	9002      	str	r0, [sp, #8]
   13566:	e00b      	b.n	13580 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xcc>
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   13568:	f640 302c 	movw	r0, #2860	; 0xb2c
   1356c:	f2c0 0002 	movt	r0, #2
   13570:	f640 3238 	movw	r2, #2872	; 0xb38
   13574:	f2c0 0202 	movt	r2, #2
   13578:	210c      	movs	r1, #12
   1357a:	f004 f9f5 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1357e:	defe      	udf	#254	; 0xfe
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   13580:	9802      	ldr	r0, [sp, #8]
   13582:	f000 0001 	and.w	r0, r0, #1
   13586:	f7f5 faf1 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1358a:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
   1358e:	e7ff      	b.n	13590 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xdc>
   13590:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
   13594:	07c1      	lsls	r1, r0, #31
   13596:	2900      	cmp	r1, #0
   13598:	d001      	beq.n	1359e <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xea>
   1359a:	e7ff      	b.n	1359c <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xe8>
   1359c:	e005      	b.n	135aa <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xf6>
   1359e:	2000      	movs	r0, #0
    Ok(())
   135a0:	900e      	str	r0, [sp, #56]	; 0x38
   135a2:	2001      	movs	r0, #1
   135a4:	900e      	str	r0, [sp, #56]	; 0x38
}
   135a6:	e004      	b.n	135b2 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xfe>
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   135a8:	defe      	udf	#254	; 0xfe
   135aa:	f7f5 fa6c 	bl	8a86 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
   135ae:	9001      	str	r0, [sp, #4]
   135b0:	e002      	b.n	135b8 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x104>
}
   135b2:	980e      	ldr	r0, [sp, #56]	; 0x38
   135b4:	b014      	add	sp, #80	; 0x50
   135b6:	bd80      	pop	{r7, pc}
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   135b8:	9801      	ldr	r0, [sp, #4]
   135ba:	f7f5 fad1 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   135be:	900e      	str	r0, [sp, #56]	; 0x38
   135c0:	e7ff      	b.n	135c2 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x10e>
   135c2:	e7f6      	b.n	135b2 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xfe>
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   135c4:	f640 3010 	movw	r0, #2832	; 0xb10
   135c8:	f2c0 0002 	movt	r0, #2
   135cc:	f640 22f4 	movw	r2, #2804	; 0xaf4
   135d0:	f2c0 0202 	movt	r2, #2
   135d4:	211c      	movs	r1, #28
   135d6:	f004 f9c7 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   135da:	defe      	udf	#254	; 0xfe

000135dc <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>:

/// Enqueue any pending request for non-blocking SPI write for Command Byte and Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_flush() -> MynewtResult<()> {
   135dc:	b580      	push	{r7, lr}
   135de:	b090      	sub	sp, #64	; 0x40
    //  If no pending request, quit.
    if unsafe { PENDING_CMD.len() } == 0 &&
   135e0:	f644 2070 	movw	r0, #19056	; 0x4a70
   135e4:	f2c2 0000 	movt	r0, #8192	; 0x2000
   135e8:	f7ff f8c4 	bl	12774 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   135ec:	900b      	str	r0, [sp, #44]	; 0x2c
   135ee:	910a      	str	r1, [sp, #40]	; 0x28
   135f0:	e016      	b.n	13620 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x44>
   135f2:	2001      	movs	r0, #1
   135f4:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   135f8:	e00c      	b.n	13614 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
   135fa:	2000      	movs	r0, #0
   135fc:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   13600:	e008      	b.n	13614 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
        unsafe { PENDING_DATA.len() } == 0 {
   13602:	f644 2078 	movw	r0, #19064	; 0x4a78
   13606:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1360a:	f7ff f8a7 	bl	1275c <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>
   1360e:	9009      	str	r0, [sp, #36]	; 0x24
   13610:	9108      	str	r1, [sp, #32]
   13612:	e00f      	b.n	13634 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x58>
    if unsafe { PENDING_CMD.len() } == 0 &&
   13614:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   13618:	07c0      	lsls	r0, r0, #31
   1361a:	2800      	cmp	r0, #0
   1361c:	d11d      	bne.n	1365a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x7e>
   1361e:	e013      	b.n	13648 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x6c>
   13620:	980b      	ldr	r0, [sp, #44]	; 0x2c
   13622:	990a      	ldr	r1, [sp, #40]	; 0x28
   13624:	f7fe fc61 	bl	11eea <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   13628:	9007      	str	r0, [sp, #28]
   1362a:	e7ff      	b.n	1362c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x50>
   1362c:	9807      	ldr	r0, [sp, #28]
   1362e:	2800      	cmp	r0, #0
   13630:	d0e7      	beq.n	13602 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x26>
   13632:	e7e2      	b.n	135fa <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        unsafe { PENDING_DATA.len() } == 0 {
   13634:	9809      	ldr	r0, [sp, #36]	; 0x24
   13636:	9908      	ldr	r1, [sp, #32]
   13638:	f7fe fc57 	bl	11eea <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   1363c:	9006      	str	r0, [sp, #24]
   1363e:	e7ff      	b.n	13640 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x64>
    if unsafe { PENDING_CMD.len() } == 0 &&
   13640:	9806      	ldr	r0, [sp, #24]
   13642:	2800      	cmp	r0, #0
   13644:	d0d5      	beq.n	135f2 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x16>
   13646:	e7d8      	b.n	135fa <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        return Ok(());
    }
    //  Enqueue the pending SPI request into the Mbuf Queue
    if let Err(e) = spi_noblock_write(
        unsafe { PENDING_CMD[0] },  //  Command Byte
   13648:	f644 2070 	movw	r0, #19056	; 0x4a70
   1364c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13650:	f7ff f890 	bl	12774 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   13654:	9005      	str	r0, [sp, #20]
   13656:	9104      	str	r1, [sp, #16]
   13658:	e007      	b.n	1366a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x8e>
   1365a:	2000      	movs	r0, #0
        return Ok(());
   1365c:	900c      	str	r0, [sp, #48]	; 0x30
   1365e:	2001      	movs	r0, #1
   13660:	900c      	str	r0, [sp, #48]	; 0x30
   13662:	e7ff      	b.n	13664 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    }
    //  Else clear the pending request and return Ok.
    unsafe { PENDING_CMD.clear() };
    unsafe { PENDING_DATA.clear() };
    Ok(())
}
   13664:	980c      	ldr	r0, [sp, #48]	; 0x30
   13666:	b010      	add	sp, #64	; 0x40
   13668:	bd80      	pop	{r7, pc}
        unsafe { PENDING_CMD[0] },  //  Command Byte
   1366a:	9804      	ldr	r0, [sp, #16]
   1366c:	2800      	cmp	r0, #0
   1366e:	d03f      	beq.n	136f0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x114>
   13670:	e7ff      	b.n	13672 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x96>
   13672:	9805      	ldr	r0, [sp, #20]
   13674:	7801      	ldrb	r1, [r0, #0]
        unsafe { &PENDING_DATA }    //  Data Bytes
   13676:	f644 2078 	movw	r0, #19064	; 0x4a78
   1367a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1367e:	9103      	str	r1, [sp, #12]
   13680:	f7ff f86c 	bl	1275c <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>
   13684:	9002      	str	r0, [sp, #8]
   13686:	9101      	str	r1, [sp, #4]
   13688:	e7ff      	b.n	1368a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xae>
    if let Err(e) = spi_noblock_write(
   1368a:	9803      	ldr	r0, [sp, #12]
   1368c:	9902      	ldr	r1, [sp, #8]
   1368e:	9a01      	ldr	r2, [sp, #4]
   13690:	f000 f837 	bl	13702 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>
   13694:	900e      	str	r0, [sp, #56]	; 0x38
   13696:	e7ff      	b.n	13698 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xbc>
   13698:	980e      	ldr	r0, [sp, #56]	; 0x38
   1369a:	2801      	cmp	r0, #1
   1369c:	d107      	bne.n	136ae <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xd2>
   1369e:	e7ff      	b.n	136a0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xc4>
    unsafe { PENDING_CMD.clear() };
   136a0:	f644 2070 	movw	r0, #19056	; 0x4a70
   136a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
   136a8:	f7ff f890 	bl	127cc <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   136ac:	e014      	b.n	136d8 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xfc>
    if let Err(e) = spi_noblock_write(
   136ae:	980e      	ldr	r0, [sp, #56]	; 0x38
   136b0:	900f      	str	r0, [sp, #60]	; 0x3c
        unsafe { PENDING_CMD.clear() };
   136b2:	f644 2170 	movw	r1, #19056	; 0x4a70
   136b6:	f2c2 0100 	movt	r1, #8192	; 0x2000
   136ba:	9000      	str	r0, [sp, #0]
   136bc:	4608      	mov	r0, r1
   136be:	f7ff f885 	bl	127cc <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   136c2:	e7ff      	b.n	136c4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xe8>
        unsafe { PENDING_DATA.clear() };    
   136c4:	f644 2078 	movw	r0, #19064	; 0x4a78
   136c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
   136cc:	f7ff f886 	bl	127dc <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E>
   136d0:	e7ff      	b.n	136d2 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xf6>
        return Err(e);
   136d2:	9800      	ldr	r0, [sp, #0]
   136d4:	900c      	str	r0, [sp, #48]	; 0x30
   136d6:	e7c5      	b.n	13664 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    unsafe { PENDING_DATA.clear() };
   136d8:	f644 2078 	movw	r0, #19064	; 0x4a78
   136dc:	f2c2 0000 	movt	r0, #8192	; 0x2000
   136e0:	f7ff f87c 	bl	127dc <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E>
   136e4:	e7ff      	b.n	136e6 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x10a>
   136e6:	2000      	movs	r0, #0
    Ok(())
   136e8:	900c      	str	r0, [sp, #48]	; 0x30
   136ea:	2001      	movs	r0, #1
   136ec:	900c      	str	r0, [sp, #48]	; 0x30
}
   136ee:	e7b9      	b.n	13664 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
        unsafe { PENDING_CMD[0] },  //  Command Byte
   136f0:	f640 3048 	movw	r0, #2888	; 0xb48
   136f4:	f2c0 0002 	movt	r0, #2
   136f8:	2100      	movs	r1, #0
   136fa:	9a04      	ldr	r2, [sp, #16]
   136fc:	f004 f94a 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   13700:	defe      	udf	#254	; 0xfe

00013702 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>:

/// Enqueue request for non-blocking SPI write. Returns without waiting for write to complete.
/// Request must have a Command Byte, followed by optional Data Bytes.
fn spi_noblock_write(cmd: u8, data: &[u8]) -> MynewtResult<()> {
   13702:	b580      	push	{r7, lr}
   13704:	b0a0      	sub	sp, #128	; 0x80
   13706:	4603      	mov	r3, r0
   13708:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   1370c:	9116      	str	r1, [sp, #88]	; 0x58
   1370e:	9217      	str	r2, [sp, #92]	; 0x5c
   13710:	f247 5030 	movw	r0, #30000	; 0x7530
    console::print("spi data "); ////
    console::dump(data.as_ptr(), data.len() as u32); console::print("\n"); ////
    console::flush(); */

    //  Throttle the number of queued SPI requests.
    let timeout = 30_000;
   13714:	9018      	str	r0, [sp, #96]	; 0x60
   13716:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   1371a:	fba0 0c0c 	umull	r0, ip, r0, ip
   1371e:	f1bc 0f00 	cmp.w	ip, #0
   13722:	920f      	str	r2, [sp, #60]	; 0x3c
   13724:	910e      	str	r1, [sp, #56]	; 0x38
   13726:	900d      	str	r0, [sp, #52]	; 0x34
   13728:	f040 80c8 	bne.w	138bc <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ba>
   1372c:	e7ff      	b.n	1372e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x2c>
   1372e:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   13732:	f2c1 0062 	movt	r0, #4194	; 0x1062
   13736:	990d      	ldr	r1, [sp, #52]	; 0x34
   13738:	fba1 0200 	umull	r0, r2, r1, r0
   1373c:	0991      	lsrs	r1, r2, #6
   1373e:	f646 2284 	movw	r2, #27268	; 0x6a84
   13742:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13746:	900c      	str	r0, [sp, #48]	; 0x30
   13748:	4610      	mov	r0, r2
   1374a:	f008 f94b 	bl	1b9e4 <os_sem_pend>
   1374e:	e7ff      	b.n	13750 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x4e>

    //  Allocate a new mbuf chain to copy the data to be sent.
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   13750:	980e      	ldr	r0, [sp, #56]	; 0x38
   13752:	990f      	ldr	r1, [sp, #60]	; 0x3c
   13754:	f7fe fbc9 	bl	11eea <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   13758:	900b      	str	r0, [sp, #44]	; 0x2c
   1375a:	e7ff      	b.n	1375c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x5a>
   1375c:	2001      	movs	r0, #1
   1375e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13760:	fa10 f081 	uxtah	r0, r0, r1
   13764:	b282      	uxth	r2, r0
   13766:	4603      	mov	r3, r0
   13768:	4282      	cmp	r2, r0
   1376a:	930a      	str	r3, [sp, #40]	; 0x28
   1376c:	f040 80b2 	bne.w	138d4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1d2>
   13770:	e7ff      	b.n	13772 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x70>
   13772:	980a      	ldr	r0, [sp, #40]	; 0x28
   13774:	f8ad 0066 	strh.w	r0, [sp, #102]	; 0x66
    let mbuf = unsafe { os::os_msys_get_pkthdr(len, 0) };
   13778:	b280      	uxth	r0, r0
   1377a:	2100      	movs	r1, #0
   1377c:	f007 fe40 	bl	1b400 <os_msys_get_pkthdr>
   13780:	4601      	mov	r1, r0
   13782:	901a      	str	r0, [sp, #104]	; 0x68
   13784:	9109      	str	r1, [sp, #36]	; 0x24
   13786:	e7ff      	b.n	13788 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x86>
    if mbuf.is_null() {  //  If out of memory, quit.
   13788:	9809      	ldr	r0, [sp, #36]	; 0x24
   1378a:	f000 ff17 	bl	145bc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   1378e:	9008      	str	r0, [sp, #32]
   13790:	e7ff      	b.n	13792 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x90>
   13792:	9808      	ldr	r0, [sp, #32]
   13794:	07c1      	lsls	r1, r0, #31
   13796:	2900      	cmp	r1, #0
   13798:	d106      	bne.n	137a8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xa6>
   1379a:	e7ff      	b.n	1379c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x9a>
   1379c:	f10d 0043 	add.w	r0, sp, #67	; 0x43
    }

    //  Append the Command Byte to the mbuf chain.
    let rc = unsafe { os::os_mbuf_append(
        mbuf, 
        core::mem::transmute(&cmd), 
   137a0:	901b      	str	r0, [sp, #108]	; 0x6c
   137a2:	991b      	ldr	r1, [sp, #108]	; 0x6c
   137a4:	9107      	str	r1, [sp, #28]
   137a6:	e010      	b.n	137ca <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc8>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   137a8:	f646 2084 	movw	r0, #27268	; 0x6a84
   137ac:	f2c2 0000 	movt	r0, #8192	; 0x2000
   137b0:	f008 f8e6 	bl	1b980 <os_sem_release>
   137b4:	e7ff      	b.n	137b6 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xb4>
   137b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   137ba:	9012      	str	r0, [sp, #72]	; 0x48
   137bc:	9812      	ldr	r0, [sp, #72]	; 0x48
   137be:	9011      	str	r0, [sp, #68]	; 0x44
   137c0:	e002      	b.n	137c8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
        return Err(MynewtError::SYS_EUNKNOWN); 
    }
    Ok(())
}
   137c2:	9811      	ldr	r0, [sp, #68]	; 0x44
   137c4:	b020      	add	sp, #128	; 0x80
   137c6:	bd80      	pop	{r7, pc}
        return Err(MynewtError::SYS_ENOMEM); 
   137c8:	e7fb      	b.n	137c2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
   137ca:	2201      	movs	r2, #1
    let rc = unsafe { os::os_mbuf_append(
   137cc:	9809      	ldr	r0, [sp, #36]	; 0x24
   137ce:	9907      	ldr	r1, [sp, #28]
   137d0:	f007 fc6e 	bl	1b0b0 <os_mbuf_append>
   137d4:	4601      	mov	r1, r0
   137d6:	901c      	str	r0, [sp, #112]	; 0x70
   137d8:	9106      	str	r1, [sp, #24]
   137da:	e7ff      	b.n	137dc <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xda>
    if rc != 0 {  //  If out of memory, quit.
   137dc:	9806      	ldr	r0, [sp, #24]
   137de:	2800      	cmp	r0, #0
   137e0:	d106      	bne.n	137f0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xee>
   137e2:	e7ff      	b.n	137e4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xe2>
        core::mem::transmute(data.as_ptr()), 
   137e4:	980e      	ldr	r0, [sp, #56]	; 0x38
   137e6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   137e8:	f7fe fb87 	bl	11efa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
   137ec:	9005      	str	r0, [sp, #20]
   137ee:	e011      	b.n	13814 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x112>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   137f0:	9809      	ldr	r0, [sp, #36]	; 0x24
   137f2:	f007 fc41 	bl	1b078 <os_mbuf_free_chain>
   137f6:	e7ff      	b.n	137f8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xf6>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   137f8:	f646 2084 	movw	r0, #27268	; 0x6a84
   137fc:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13800:	f008 f8be 	bl	1b980 <os_sem_release>
   13804:	e7ff      	b.n	13806 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x104>
   13806:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   1380a:	9013      	str	r0, [sp, #76]	; 0x4c
   1380c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1380e:	9011      	str	r0, [sp, #68]	; 0x44
   13810:	e7ff      	b.n	13812 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
   13812:	e7d9      	b.n	137c8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        core::mem::transmute(data.as_ptr()), 
   13814:	9805      	ldr	r0, [sp, #20]
   13816:	901d      	str	r0, [sp, #116]	; 0x74
   13818:	991d      	ldr	r1, [sp, #116]	; 0x74
   1381a:	9104      	str	r1, [sp, #16]
   1381c:	e7ff      	b.n	1381e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x11c>
        data.len() as u16
   1381e:	980e      	ldr	r0, [sp, #56]	; 0x38
   13820:	990f      	ldr	r1, [sp, #60]	; 0x3c
   13822:	f7fe fb62 	bl	11eea <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   13826:	9003      	str	r0, [sp, #12]
   13828:	e7ff      	b.n	1382a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x128>
    let rc = unsafe { os::os_mbuf_append(
   1382a:	9803      	ldr	r0, [sp, #12]
   1382c:	b282      	uxth	r2, r0
   1382e:	9809      	ldr	r0, [sp, #36]	; 0x24
   13830:	9904      	ldr	r1, [sp, #16]
   13832:	f007 fc3d 	bl	1b0b0 <os_mbuf_append>
   13836:	4601      	mov	r1, r0
   13838:	901e      	str	r0, [sp, #120]	; 0x78
   1383a:	9102      	str	r1, [sp, #8]
   1383c:	e7ff      	b.n	1383e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x13c>
    if rc != 0 {  //  If out of memory, quit.
   1383e:	9802      	ldr	r0, [sp, #8]
   13840:	2800      	cmp	r0, #0
   13842:	d10f      	bne.n	13864 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x162>
   13844:	e7ff      	b.n	13846 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x144>
    let rc = unsafe { os::os_mqueue_put(
   13846:	f646 208c 	movw	r0, #27276	; 0x6a8c
   1384a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1384e:	f646 21a4 	movw	r1, #27300	; 0x6aa4
   13852:	f2c2 0100 	movt	r1, #8192	; 0x2000
   13856:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13858:	f007 fbac 	bl	1afb4 <os_mqueue_put>
   1385c:	4601      	mov	r1, r0
   1385e:	901f      	str	r0, [sp, #124]	; 0x7c
   13860:	9101      	str	r1, [sp, #4]
   13862:	e011      	b.n	13888 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x186>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   13864:	9809      	ldr	r0, [sp, #36]	; 0x24
   13866:	f007 fc07 	bl	1b078 <os_mbuf_free_chain>
   1386a:	e7ff      	b.n	1386c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x16a>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   1386c:	f646 2084 	movw	r0, #27268	; 0x6a84
   13870:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13874:	f008 f884 	bl	1b980 <os_sem_release>
   13878:	e7ff      	b.n	1387a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x178>
   1387a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   1387e:	9014      	str	r0, [sp, #80]	; 0x50
   13880:	9814      	ldr	r0, [sp, #80]	; 0x50
   13882:	9011      	str	r0, [sp, #68]	; 0x44
   13884:	e7ff      	b.n	13886 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
   13886:	e7c4      	b.n	13812 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
    if rc != 0 {  //  If out of memory, quit.
   13888:	9801      	ldr	r0, [sp, #4]
   1388a:	2800      	cmp	r0, #0
   1388c:	d105      	bne.n	1389a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x198>
   1388e:	e7ff      	b.n	13890 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x18e>
   13890:	2000      	movs	r0, #0
    Ok(())
   13892:	9011      	str	r0, [sp, #68]	; 0x44
   13894:	2001      	movs	r0, #1
   13896:	9011      	str	r0, [sp, #68]	; 0x44
}
   13898:	e793      	b.n	137c2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   1389a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1389c:	f007 fbec 	bl	1b078 <os_mbuf_free_chain>
   138a0:	e7ff      	b.n	138a2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1a0>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   138a2:	f646 2084 	movw	r0, #27268	; 0x6a84
   138a6:	f2c2 0000 	movt	r0, #8192	; 0x2000
   138aa:	f008 f869 	bl	1b980 <os_sem_release>
   138ae:	e7ff      	b.n	138b0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ae>
   138b0:	f06f 000c 	mvn.w	r0, #12
        return Err(MynewtError::SYS_EUNKNOWN); 
   138b4:	9015      	str	r0, [sp, #84]	; 0x54
   138b6:	9815      	ldr	r0, [sp, #84]	; 0x54
   138b8:	9011      	str	r0, [sp, #68]	; 0x44
   138ba:	e7e4      	b.n	13886 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   138bc:	f640 3070 	movw	r0, #2928	; 0xb70
   138c0:	f2c0 0002 	movt	r0, #2
   138c4:	f640 3258 	movw	r2, #2904	; 0xb58
   138c8:	f2c0 0202 	movt	r2, #2
   138cc:	2121      	movs	r1, #33	; 0x21
   138ce:	f004 f84b 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   138d2:	defe      	udf	#254	; 0xfe
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   138d4:	f640 3010 	movw	r0, #2832	; 0xb10
   138d8:	f2c0 0002 	movt	r0, #2
   138dc:	f640 3294 	movw	r2, #2964	; 0xb94
   138e0:	f2c0 0202 	movt	r2, #2
   138e4:	211c      	movs	r1, #28
   138e6:	f004 f83f 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   138ea:	defe      	udf	#254	; 0xfe

000138ec <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E>:

/// Callback for the event that is triggered when an SPI request is added to the queue.
extern "C" fn spi_event_callback(_event: *mut os::os_event) {    
   138ec:	b5b0      	push	{r4, r5, r7, lr}
   138ee:	b0c4      	sub	sp, #272	; 0x110
   138f0:	9038      	str	r0, [sp, #224]	; 0xe0
   138f2:	e7ff      	b.n	138f4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
    loop {  //  For each mbuf chain found...
        //  Get the next SPI request, stored as an mbuf chain.
        let om = unsafe { os::os_mqueue_get(&mut SPI_DATA_QUEUE) };
   138f4:	f646 208c 	movw	r0, #27276	; 0x6a8c
   138f8:	f2c2 0000 	movt	r0, #8192	; 0x2000
   138fc:	f007 fb47 	bl	1af8e <os_mqueue_get>
   13900:	4601      	mov	r1, r0
   13902:	9039      	str	r0, [sp, #228]	; 0xe4
   13904:	911b      	str	r1, [sp, #108]	; 0x6c
   13906:	e7ff      	b.n	13908 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c>
        if om.is_null() { break; }
   13908:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1390a:	f000 fe57 	bl	145bc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   1390e:	901a      	str	r0, [sp, #104]	; 0x68
   13910:	e7ff      	b.n	13912 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26>
   13912:	981a      	ldr	r0, [sp, #104]	; 0x68
   13914:	07c1      	lsls	r1, r0, #31
   13916:	2900      	cmp	r1, #0
   13918:	d106      	bne.n	13928 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x3c>
   1391a:	e7ff      	b.n	1391c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x30>

        //  Send the mbuf chain.
        let mut m = om;
   1391c:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1391e:	901c      	str	r0, [sp, #112]	; 0x70
   13920:	2101      	movs	r1, #1
        let mut first_byte = true;
   13922:	f88d 1075 	strb.w	r1, [sp, #117]	; 0x75
        while !m.is_null() {  //  For each mbuf in the chain...
   13926:	e001      	b.n	1392c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>

        //  Release the throttle semaphore to allow next request to be queued.
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
        assert_eq!(rc, 0, "sem fail");    
    }
}
   13928:	b044      	add	sp, #272	; 0x110
   1392a:	bdb0      	pop	{r4, r5, r7, pc}
        while !m.is_null() {  //  For each mbuf in the chain...
   1392c:	981c      	ldr	r0, [sp, #112]	; 0x70
   1392e:	f000 fe45 	bl	145bc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   13932:	9019      	str	r0, [sp, #100]	; 0x64
   13934:	e7ff      	b.n	13936 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x4a>
   13936:	9819      	ldr	r0, [sp, #100]	; 0x64
   13938:	07c1      	lsls	r1, r0, #31
   1393a:	2900      	cmp	r1, #0
   1393c:	d004      	beq.n	13948 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x5c>
   1393e:	e7ff      	b.n	13940 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x54>
        unsafe { os::os_mbuf_free_chain(om) };
   13940:	981b      	ldr	r0, [sp, #108]	; 0x6c
   13942:	f007 fb99 	bl	1b078 <os_mbuf_free_chain>
   13946:	e0aa      	b.n	13a9e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1b2>
            let data = unsafe { (*m).om_data };  //  Fetch the data
   13948:	981c      	ldr	r0, [sp, #112]	; 0x70
   1394a:	6800      	ldr	r0, [r0, #0]
   1394c:	903a      	str	r0, [sp, #232]	; 0xe8
            let len = unsafe { (*m).om_len };    //  Fetch the length
   1394e:	991c      	ldr	r1, [sp, #112]	; 0x70
   13950:	88c9      	ldrh	r1, [r1, #6]
   13952:	460a      	mov	r2, r1
   13954:	f8ad 10ee 	strh.w	r1, [sp, #238]	; 0xee
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   13958:	f89d 1075 	ldrb.w	r1, [sp, #117]	; 0x75
   1395c:	07c9      	lsls	r1, r1, #31
   1395e:	2900      	cmp	r1, #0
   13960:	9018      	str	r0, [sp, #96]	; 0x60
   13962:	9217      	str	r2, [sp, #92]	; 0x5c
   13964:	d105      	bne.n	13972 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x86>
   13966:	e7ff      	b.n	13968 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x7c>
                    unsafe { core::mem::transmute(data) }, 
   13968:	9818      	ldr	r0, [sp, #96]	; 0x60
   1396a:	903e      	str	r0, [sp, #248]	; 0xf8
   1396c:	983e      	ldr	r0, [sp, #248]	; 0xf8
   1396e:	9016      	str	r0, [sp, #88]	; 0x58
   13970:	e07b      	b.n	13a6a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17e>
   13972:	2000      	movs	r0, #0
                first_byte = false;
   13974:	f88d 0075 	strb.w	r0, [sp, #117]	; 0x75
                    unsafe { core::mem::transmute(data) }, 
   13978:	9818      	ldr	r0, [sp, #96]	; 0x60
   1397a:	903c      	str	r0, [sp, #240]	; 0xf0
   1397c:	983c      	ldr	r0, [sp, #240]	; 0xf0
   1397e:	9015      	str	r0, [sp, #84]	; 0x54
   13980:	e7ff      	b.n	13982 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x96>
   13982:	2001      	movs	r0, #1
                internal_spi_noblock_write(
   13984:	9915      	ldr	r1, [sp, #84]	; 0x54
   13986:	9014      	str	r0, [sp, #80]	; 0x50
   13988:	4608      	mov	r0, r1
   1398a:	9914      	ldr	r1, [sp, #80]	; 0x50
   1398c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1398e:	f000 f921 	bl	13bd4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   13992:	9013      	str	r0, [sp, #76]	; 0x4c
   13994:	e7ff      	b.n	13996 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xaa>
   13996:	f640 31a4 	movw	r1, #2980	; 0xba4
   1399a:	f2c0 0102 	movt	r1, #2
   1399e:	f640 33b0 	movw	r3, #2992	; 0xbb0
   139a2:	f2c0 0302 	movt	r3, #2
   139a6:	220c      	movs	r2, #12
   139a8:	9813      	ldr	r0, [sp, #76]	; 0x4c
   139aa:	f7f5 f8a6 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   139ae:	e7ff      	b.n	139b0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xc4>
                if  unsafe { *data } == 0x01 || //  SWRESET
   139b0:	9818      	ldr	r0, [sp, #96]	; 0x60
   139b2:	7801      	ldrb	r1, [r0, #0]
   139b4:	2901      	cmp	r1, #1
   139b6:	d013      	beq.n	139e0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   139b8:	e01a      	b.n	139f0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x104>
   139ba:	2001      	movs	r0, #1
   139bc:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   139c0:	e008      	b.n	139d4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
   139c2:	2000      	movs	r0, #0
   139c4:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   139c8:	e004      	b.n	139d4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
                    unsafe { *data } == 0x29 {  //  DISPON
   139ca:	9818      	ldr	r0, [sp, #96]	; 0x60
   139cc:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   139ce:	2929      	cmp	r1, #41	; 0x29
   139d0:	d0f3      	beq.n	139ba <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   139d2:	e7f6      	b.n	139c2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xd6>
   139d4:	f89d 0076 	ldrb.w	r0, [sp, #118]	; 0x76
   139d8:	07c0      	lsls	r0, r0, #31
   139da:	2800      	cmp	r0, #0
   139dc:	d113      	bne.n	13a06 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x11a>
   139de:	e017      	b.n	13a10 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   139e0:	2001      	movs	r0, #1
   139e2:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   139e6:	e008      	b.n	139fa <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
   139e8:	2000      	movs	r0, #0
   139ea:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   139ee:	e004      	b.n	139fa <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
                    unsafe { *data } == 0x11 || //  SLPOUT
   139f0:	9818      	ldr	r0, [sp, #96]	; 0x60
   139f2:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   139f4:	2911      	cmp	r1, #17
   139f6:	d0f3      	beq.n	139e0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   139f8:	e7f6      	b.n	139e8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xfc>
   139fa:	f89d 0077 	ldrb.w	r0, [sp, #119]	; 0x77
   139fe:	07c0      	lsls	r0, r0, #31
   13a00:	2800      	cmp	r0, #0
   13a02:	d1da      	bne.n	139ba <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   13a04:	e7e1      	b.n	139ca <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xde>
   13a06:	20c8      	movs	r0, #200	; 0xc8
                    delay_ms(200);
   13a08:	f000 fb13 	bl	14032 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>
   13a0c:	e7ff      	b.n	13a0e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x122>
                if  unsafe { *data } == 0x01 || //  SWRESET
   13a0e:	e7ff      	b.n	13a10 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   13a10:	2101      	movs	r1, #1
                    unsafe { core::mem::transmute(data.add(1)) }, 
   13a12:	9818      	ldr	r0, [sp, #96]	; 0x60
   13a14:	f7fe f9d9 	bl	11dca <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   13a18:	9012      	str	r0, [sp, #72]	; 0x48
   13a1a:	e7ff      	b.n	13a1c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x130>
   13a1c:	9812      	ldr	r0, [sp, #72]	; 0x48
   13a1e:	903d      	str	r0, [sp, #244]	; 0xf4
   13a20:	983d      	ldr	r0, [sp, #244]	; 0xf4
   13a22:	9011      	str	r0, [sp, #68]	; 0x44
   13a24:	e7ff      	b.n	13a26 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x13a>
   13a26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   13a2a:	9917      	ldr	r1, [sp, #92]	; 0x5c
   13a2c:	fa10 f081 	uxtah	r0, r0, r1
   13a30:	b282      	uxth	r2, r0
   13a32:	4603      	mov	r3, r0
   13a34:	4282      	cmp	r2, r0
   13a36:	9310      	str	r3, [sp, #64]	; 0x40
   13a38:	f040 80c0 	bne.w	13bbc <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2d0>
   13a3c:	e7ff      	b.n	13a3e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x152>
   13a3e:	9810      	ldr	r0, [sp, #64]	; 0x40
   13a40:	b281      	uxth	r1, r0
   13a42:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   13a44:	9811      	ldr	r0, [sp, #68]	; 0x44
   13a46:	f000 f8c5 	bl	13bd4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   13a4a:	900f      	str	r0, [sp, #60]	; 0x3c
   13a4c:	e7ff      	b.n	13a4e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x162>
   13a4e:	f640 31a4 	movw	r1, #2980	; 0xba4
   13a52:	f2c0 0102 	movt	r1, #2
   13a56:	f640 33f4 	movw	r3, #3060	; 0xbf4
   13a5a:	f2c0 0302 	movt	r3, #2
   13a5e:	220c      	movs	r2, #12
   13a60:	980f      	ldr	r0, [sp, #60]	; 0x3c
   13a62:	f7f5 f84a 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   13a66:	e7ff      	b.n	13a68 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17c>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   13a68:	e015      	b.n	13a96 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
                    len as i32,  //  Write all Data Bytes
   13a6a:	9817      	ldr	r0, [sp, #92]	; 0x5c
   13a6c:	b281      	uxth	r1, r0
   13a6e:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   13a70:	9816      	ldr	r0, [sp, #88]	; 0x58
   13a72:	f000 f8af 	bl	13bd4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   13a76:	900e      	str	r0, [sp, #56]	; 0x38
   13a78:	e7ff      	b.n	13a7a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x18e>
   13a7a:	f640 31a4 	movw	r1, #2980	; 0xba4
   13a7e:	f2c0 0102 	movt	r1, #2
   13a82:	f640 4304 	movw	r3, #3076	; 0xc04
   13a86:	f2c0 0302 	movt	r3, #2
   13a8a:	220c      	movs	r2, #12
   13a8c:	980e      	ldr	r0, [sp, #56]	; 0x38
   13a8e:	f7f5 f834 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   13a92:	e7ff      	b.n	13a94 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1a8>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   13a94:	e7ff      	b.n	13a96 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
            m = unsafe { (*m).om_next.sle_next };  //  Fetch next mbuf in the chain.
   13a96:	981c      	ldr	r0, [sp, #112]	; 0x70
   13a98:	68c0      	ldr	r0, [r0, #12]
   13a9a:	901c      	str	r0, [sp, #112]	; 0x70
        while !m.is_null() {  //  For each mbuf in the chain...
   13a9c:	e746      	b.n	1392c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
   13a9e:	f646 2084 	movw	r0, #27268	; 0x6a84
   13aa2:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13aa6:	f007 ff6b 	bl	1b980 <os_sem_release>
   13aaa:	901e      	str	r0, [sp, #120]	; 0x78
   13aac:	e7ff      	b.n	13aae <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c2>
        assert_eq!(rc, 0, "sem fail");    
   13aae:	f640 1018 	movw	r0, #2328	; 0x918
   13ab2:	f2c0 0002 	movt	r0, #2
   13ab6:	6800      	ldr	r0, [r0, #0]
   13ab8:	a91e      	add	r1, sp, #120	; 0x78
   13aba:	911f      	str	r1, [sp, #124]	; 0x7c
   13abc:	9020      	str	r0, [sp, #128]	; 0x80
   13abe:	981f      	ldr	r0, [sp, #124]	; 0x7c
   13ac0:	903f      	str	r0, [sp, #252]	; 0xfc
   13ac2:	9920      	ldr	r1, [sp, #128]	; 0x80
   13ac4:	9140      	str	r1, [sp, #256]	; 0x100
   13ac6:	6802      	ldr	r2, [r0, #0]
   13ac8:	680b      	ldr	r3, [r1, #0]
   13aca:	429a      	cmp	r2, r3
   13acc:	900d      	str	r0, [sp, #52]	; 0x34
   13ace:	910c      	str	r1, [sp, #48]	; 0x30
   13ad0:	d101      	bne.n	13ad6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1ea>
   13ad2:	e7ff      	b.n	13ad4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1e8>
    loop {  //  For each mbuf chain found...
   13ad4:	e70e      	b.n	138f4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
        assert_eq!(rc, 0, "sem fail");    
   13ad6:	f640 1070 	movw	r0, #2416	; 0x970
   13ada:	f2c0 0002 	movt	r0, #2
   13ade:	6801      	ldr	r1, [r0, #0]
   13ae0:	980d      	ldr	r0, [sp, #52]	; 0x34
   13ae2:	9030      	str	r0, [sp, #192]	; 0xc0
   13ae4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13ae6:	9231      	str	r2, [sp, #196]	; 0xc4
   13ae8:	f640 2388 	movw	r3, #2696	; 0xa88
   13aec:	f2c0 0302 	movt	r3, #2
   13af0:	681b      	ldr	r3, [r3, #0]
   13af2:	f640 1c90 	movw	ip, #2448	; 0x990
   13af6:	f2c0 0c02 	movt	ip, #2
   13afa:	f8dc c000 	ldr.w	ip, [ip]
   13afe:	46ee      	mov	lr, sp
   13b00:	2400      	movs	r4, #0
   13b02:	f8ce 4000 	str.w	r4, [lr]
   13b06:	a832      	add	r0, sp, #200	; 0xc8
   13b08:	2201      	movs	r2, #1
   13b0a:	910b      	str	r1, [sp, #44]	; 0x2c
   13b0c:	4619      	mov	r1, r3
   13b0e:	4663      	mov	r3, ip
   13b10:	f7f4 ffc4 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13b14:	e7ff      	b.n	13b16 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x22a>
   13b16:	a830      	add	r0, sp, #192	; 0xc0
   13b18:	902d      	str	r0, [sp, #180]	; 0xb4
   13b1a:	a831      	add	r0, sp, #196	; 0xc4
   13b1c:	902e      	str	r0, [sp, #184]	; 0xb8
   13b1e:	a832      	add	r0, sp, #200	; 0xc8
   13b20:	902f      	str	r0, [sp, #188]	; 0xbc
   13b22:	982d      	ldr	r0, [sp, #180]	; 0xb4
   13b24:	9041      	str	r0, [sp, #260]	; 0x104
   13b26:	992e      	ldr	r1, [sp, #184]	; 0xb8
   13b28:	9142      	str	r1, [sp, #264]	; 0x108
   13b2a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
   13b2c:	9243      	str	r2, [sp, #268]	; 0x10c
   13b2e:	f249 333f 	movw	r3, #37695	; 0x933f
   13b32:	f2c0 0300 	movt	r3, #0
   13b36:	910a      	str	r1, [sp, #40]	; 0x28
   13b38:	4619      	mov	r1, r3
   13b3a:	9209      	str	r2, [sp, #36]	; 0x24
   13b3c:	f7f5 fc37 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13b40:	9008      	str	r0, [sp, #32]
   13b42:	9107      	str	r1, [sp, #28]
   13b44:	e7ff      	b.n	13b46 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x25a>
   13b46:	f249 313f 	movw	r1, #37695	; 0x933f
   13b4a:	f2c0 0100 	movt	r1, #0
   13b4e:	980a      	ldr	r0, [sp, #40]	; 0x28
   13b50:	f7f5 fc2d 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13b54:	9006      	str	r0, [sp, #24]
   13b56:	9105      	str	r1, [sp, #20]
   13b58:	e7ff      	b.n	13b5a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26e>
   13b5a:	f647 7137 	movw	r1, #32567	; 0x7f37
   13b5e:	f2c0 0101 	movt	r1, #1
   13b62:	9809      	ldr	r0, [sp, #36]	; 0x24
   13b64:	f7f5 fc38 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13b68:	9004      	str	r0, [sp, #16]
   13b6a:	9103      	str	r1, [sp, #12]
   13b6c:	e7ff      	b.n	13b6e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x282>
   13b6e:	9808      	ldr	r0, [sp, #32]
   13b70:	9027      	str	r0, [sp, #156]	; 0x9c
   13b72:	9907      	ldr	r1, [sp, #28]
   13b74:	9128      	str	r1, [sp, #160]	; 0xa0
   13b76:	9a06      	ldr	r2, [sp, #24]
   13b78:	9229      	str	r2, [sp, #164]	; 0xa4
   13b7a:	9b05      	ldr	r3, [sp, #20]
   13b7c:	932a      	str	r3, [sp, #168]	; 0xa8
   13b7e:	f8dd c010 	ldr.w	ip, [sp, #16]
   13b82:	f8cd c0ac 	str.w	ip, [sp, #172]	; 0xac
   13b86:	f8dd e00c 	ldr.w	lr, [sp, #12]
   13b8a:	f8cd e0b0 	str.w	lr, [sp, #176]	; 0xb0
   13b8e:	466c      	mov	r4, sp
   13b90:	2503      	movs	r5, #3
   13b92:	6025      	str	r5, [r4, #0]
   13b94:	a821      	add	r0, sp, #132	; 0x84
   13b96:	ab27      	add	r3, sp, #156	; 0x9c
   13b98:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13b9a:	462a      	mov	r2, r5
   13b9c:	f7f4 ff7e 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13ba0:	e7ff      	b.n	13ba2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2b6>
   13ba2:	f640 4014 	movw	r0, #3092	; 0xc14
   13ba6:	f2c0 0002 	movt	r0, #2
   13baa:	f003 fed6 	bl	1795a <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13bae:	9002      	str	r0, [sp, #8]
   13bb0:	e7ff      	b.n	13bb2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2c6>
   13bb2:	a821      	add	r0, sp, #132	; 0x84
   13bb4:	9902      	ldr	r1, [sp, #8]
   13bb6:	f003 ff0d 	bl	179d4 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13bba:	defe      	udf	#254	; 0xfe
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   13bbc:	f640 30d0 	movw	r0, #3024	; 0xbd0
   13bc0:	f2c0 0002 	movt	r0, #2
   13bc4:	f640 32c0 	movw	r2, #3008	; 0xbc0
   13bc8:	f2c0 0202 	movt	r2, #2
   13bcc:	2121      	movs	r1, #33	; 0x21
   13bce:	f003 fecb 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13bd2:	defe      	udf	#254	; 0xfe

00013bd4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>:

/// Perform non-blocking SPI write in Mynewt OS.  Blocks until SPI write completes.
fn internal_spi_noblock_write(buf: &'static u8, len: i32, is_command: bool) -> MynewtResult<()> {
   13bd4:	b5b0      	push	{r4, r5, r7, lr}
   13bd6:	b0e8      	sub	sp, #416	; 0x1a0
   13bd8:	4613      	mov	r3, r2
   13bda:	9058      	str	r0, [sp, #352]	; 0x160
   13bdc:	9159      	str	r1, [sp, #356]	; 0x164
   13bde:	f88d 216b 	strb.w	r2, [sp, #363]	; 0x16b
    if len == 0 { return Ok(()); }
   13be2:	2900      	cmp	r1, #0
   13be4:	9121      	str	r1, [sp, #132]	; 0x84
   13be6:	9020      	str	r0, [sp, #128]	; 0x80
   13be8:	931f      	str	r3, [sp, #124]	; 0x7c
   13bea:	d004      	beq.n	13bf6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x22>
   13bec:	e7ff      	b.n	13bee <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a>
    assert!(len > 0, "bad spi len");
   13bee:	9821      	ldr	r0, [sp, #132]	; 0x84
   13bf0:	2801      	cmp	r0, #1
   13bf2:	db0d      	blt.n	13c10 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x3c>
   13bf4:	e007      	b.n	13c06 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x32>
   13bf6:	2000      	movs	r0, #0
    if len == 0 { return Ok(()); }
   13bf8:	9022      	str	r0, [sp, #136]	; 0x88
   13bfa:	2001      	movs	r0, #1
   13bfc:	9022      	str	r0, [sp, #136]	; 0x88
   13bfe:	e7ff      	b.n	13c00 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
    }

    //  Set SS Pin to high to stop the transfer.
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
    Ok(())
}
   13c00:	9822      	ldr	r0, [sp, #136]	; 0x88
   13c02:	b068      	add	sp, #416	; 0x1a0
   13c04:	bdb0      	pop	{r4, r5, r7, pc}
        if is_command { 0 }
   13c06:	981f      	ldr	r0, [sp, #124]	; 0x7c
   13c08:	07c1      	lsls	r1, r0, #31
   13c0a:	2900      	cmp	r1, #0
   13c0c:	d10f      	bne.n	13c2e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x5a>
   13c0e:	e00b      	b.n	13c28 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x54>
    assert!(len > 0, "bad spi len");
   13c10:	f640 4024 	movw	r0, #3108	; 0xc24
   13c14:	f2c0 0002 	movt	r0, #2
   13c18:	f640 4230 	movw	r2, #3120	; 0xc30
   13c1c:	f2c0 0202 	movt	r2, #2
   13c20:	210b      	movs	r1, #11
   13c22:	f003 fea1 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13c26:	defe      	udf	#254	; 0xfe
   13c28:	2001      	movs	r0, #1
        else { 1 }
   13c2a:	9023      	str	r0, [sp, #140]	; 0x8c
        if is_command { 0 }
   13c2c:	e002      	b.n	13c34 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
   13c2e:	2000      	movs	r0, #0
   13c30:	9023      	str	r0, [sp, #140]	; 0x8c
   13c32:	e7ff      	b.n	13c34 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
    unsafe { hal::hal_gpio_write(
   13c34:	9923      	ldr	r1, [sp, #140]	; 0x8c
   13c36:	2012      	movs	r0, #18
   13c38:	f006 f804 	bl	19c44 <hal_gpio_write>
   13c3c:	e7ff      	b.n	13c3e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x6a>
   13c3e:	2019      	movs	r0, #25
   13c40:	2100      	movs	r1, #0
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 0) };
   13c42:	f005 ffff 	bl	19c44 <hal_gpio_write>
   13c46:	e7ff      	b.n	13c48 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x74>
    if len == 1 {  //  If writing only 1 byte...
   13c48:	9821      	ldr	r0, [sp, #132]	; 0x84
   13c4a:	2801      	cmp	r0, #1
   13c4c:	d005      	beq.n	13c5a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x86>
   13c4e:	e7ff      	b.n	13c50 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x7c>
            core::mem::transmute(buf), //  TX Buffer
   13c50:	9820      	ldr	r0, [sp, #128]	; 0x80
   13c52:	9061      	str	r0, [sp, #388]	; 0x184
   13c54:	9961      	ldr	r1, [sp, #388]	; 0x184
   13c56:	911e      	str	r1, [sp, #120]	; 0x78
   13c58:	e094      	b.n	13d84 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1b0>
            core::mem::transmute(buf), //  TX Buffer
   13c5a:	9820      	ldr	r0, [sp, #128]	; 0x80
   13c5c:	905b      	str	r0, [sp, #364]	; 0x16c
   13c5e:	995b      	ldr	r1, [sp, #364]	; 0x16c
   13c60:	911d      	str	r1, [sp, #116]	; 0x74
   13c62:	e7ff      	b.n	13c64 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x90>
   13c64:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx(
   13c66:	901c      	str	r0, [sp, #112]	; 0x70
   13c68:	991d      	ldr	r1, [sp, #116]	; 0x74
   13c6a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   13c6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
   13c6e:	f006 fc97 	bl	1a5a0 <hal_spi_txrx>
   13c72:	9024      	str	r0, [sp, #144]	; 0x90
   13c74:	e7ff      	b.n	13c76 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xa2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   13c76:	f640 1018 	movw	r0, #2328	; 0x918
   13c7a:	f2c0 0002 	movt	r0, #2
   13c7e:	6800      	ldr	r0, [r0, #0]
   13c80:	a924      	add	r1, sp, #144	; 0x90
   13c82:	9125      	str	r1, [sp, #148]	; 0x94
   13c84:	9026      	str	r0, [sp, #152]	; 0x98
   13c86:	9825      	ldr	r0, [sp, #148]	; 0x94
   13c88:	905c      	str	r0, [sp, #368]	; 0x170
   13c8a:	9926      	ldr	r1, [sp, #152]	; 0x98
   13c8c:	915d      	str	r1, [sp, #372]	; 0x174
   13c8e:	6802      	ldr	r2, [r0, #0]
   13c90:	680b      	ldr	r3, [r1, #0]
   13c92:	429a      	cmp	r2, r3
   13c94:	901b      	str	r0, [sp, #108]	; 0x6c
   13c96:	911a      	str	r1, [sp, #104]	; 0x68
   13c98:	d101      	bne.n	13c9e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xca>
   13c9a:	e7ff      	b.n	13c9c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xc8>
    if len == 1 {  //  If writing only 1 byte...
   13c9c:	e11f      	b.n	13ede <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   13c9e:	f640 1070 	movw	r0, #2416	; 0x970
   13ca2:	f2c0 0002 	movt	r0, #2
   13ca6:	6801      	ldr	r1, [r0, #0]
   13ca8:	981b      	ldr	r0, [sp, #108]	; 0x6c
   13caa:	9036      	str	r0, [sp, #216]	; 0xd8
   13cac:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   13cae:	9237      	str	r2, [sp, #220]	; 0xdc
   13cb0:	f640 4348 	movw	r3, #3144	; 0xc48
   13cb4:	f2c0 0302 	movt	r3, #2
   13cb8:	681b      	ldr	r3, [r3, #0]
   13cba:	f640 1c90 	movw	ip, #2448	; 0x990
   13cbe:	f2c0 0c02 	movt	ip, #2
   13cc2:	f8dc c000 	ldr.w	ip, [ip]
   13cc6:	46ee      	mov	lr, sp
   13cc8:	2400      	movs	r4, #0
   13cca:	f8ce 4000 	str.w	r4, [lr]
   13cce:	a838      	add	r0, sp, #224	; 0xe0
   13cd0:	2201      	movs	r2, #1
   13cd2:	9119      	str	r1, [sp, #100]	; 0x64
   13cd4:	4619      	mov	r1, r3
   13cd6:	4663      	mov	r3, ip
   13cd8:	f7f4 fee0 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13cdc:	e7ff      	b.n	13cde <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x10a>
   13cde:	a836      	add	r0, sp, #216	; 0xd8
   13ce0:	9033      	str	r0, [sp, #204]	; 0xcc
   13ce2:	a837      	add	r0, sp, #220	; 0xdc
   13ce4:	9034      	str	r0, [sp, #208]	; 0xd0
   13ce6:	a838      	add	r0, sp, #224	; 0xe0
   13ce8:	9035      	str	r0, [sp, #212]	; 0xd4
   13cea:	9833      	ldr	r0, [sp, #204]	; 0xcc
   13cec:	905e      	str	r0, [sp, #376]	; 0x178
   13cee:	9934      	ldr	r1, [sp, #208]	; 0xd0
   13cf0:	915f      	str	r1, [sp, #380]	; 0x17c
   13cf2:	9a35      	ldr	r2, [sp, #212]	; 0xd4
   13cf4:	9260      	str	r2, [sp, #384]	; 0x180
   13cf6:	f249 23eb 	movw	r3, #37611	; 0x92eb
   13cfa:	f2c0 0300 	movt	r3, #0
   13cfe:	9118      	str	r1, [sp, #96]	; 0x60
   13d00:	4619      	mov	r1, r3
   13d02:	9217      	str	r2, [sp, #92]	; 0x5c
   13d04:	f7f5 fb29 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13d08:	9016      	str	r0, [sp, #88]	; 0x58
   13d0a:	9115      	str	r1, [sp, #84]	; 0x54
   13d0c:	e7ff      	b.n	13d0e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x13a>
   13d0e:	f249 21eb 	movw	r1, #37611	; 0x92eb
   13d12:	f2c0 0100 	movt	r1, #0
   13d16:	9818      	ldr	r0, [sp, #96]	; 0x60
   13d18:	f7f5 fb1f 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13d1c:	9014      	str	r0, [sp, #80]	; 0x50
   13d1e:	9113      	str	r1, [sp, #76]	; 0x4c
   13d20:	e7ff      	b.n	13d22 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x14e>
   13d22:	f647 7137 	movw	r1, #32567	; 0x7f37
   13d26:	f2c0 0101 	movt	r1, #1
   13d2a:	9817      	ldr	r0, [sp, #92]	; 0x5c
   13d2c:	f7f5 fb54 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13d30:	9012      	str	r0, [sp, #72]	; 0x48
   13d32:	9111      	str	r1, [sp, #68]	; 0x44
   13d34:	e7ff      	b.n	13d36 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x162>
   13d36:	9816      	ldr	r0, [sp, #88]	; 0x58
   13d38:	902d      	str	r0, [sp, #180]	; 0xb4
   13d3a:	9915      	ldr	r1, [sp, #84]	; 0x54
   13d3c:	912e      	str	r1, [sp, #184]	; 0xb8
   13d3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   13d40:	922f      	str	r2, [sp, #188]	; 0xbc
   13d42:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   13d44:	9330      	str	r3, [sp, #192]	; 0xc0
   13d46:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   13d4a:	f8cd c0c4 	str.w	ip, [sp, #196]	; 0xc4
   13d4e:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
   13d52:	f8cd e0c8 	str.w	lr, [sp, #200]	; 0xc8
   13d56:	466c      	mov	r4, sp
   13d58:	2503      	movs	r5, #3
   13d5a:	6025      	str	r5, [r4, #0]
   13d5c:	a827      	add	r0, sp, #156	; 0x9c
   13d5e:	ab2d      	add	r3, sp, #180	; 0xb4
   13d60:	9919      	ldr	r1, [sp, #100]	; 0x64
   13d62:	462a      	mov	r2, r5
   13d64:	f7f4 fe9a 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13d68:	e7ff      	b.n	13d6a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x196>
   13d6a:	f640 404c 	movw	r0, #3148	; 0xc4c
   13d6e:	f2c0 0002 	movt	r0, #2
   13d72:	f003 fdf2 	bl	1795a <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13d76:	9010      	str	r0, [sp, #64]	; 0x40
   13d78:	e7ff      	b.n	13d7a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a6>
   13d7a:	a827      	add	r0, sp, #156	; 0x9c
   13d7c:	9910      	ldr	r1, [sp, #64]	; 0x40
   13d7e:	f003 fe29 	bl	179d4 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13d82:	defe      	udf	#254	; 0xfe
   13d84:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx_noblock(
   13d86:	900f      	str	r0, [sp, #60]	; 0x3c
   13d88:	991e      	ldr	r1, [sp, #120]	; 0x78
   13d8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   13d8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
   13d8e:	f006 fc5d 	bl	1a64c <hal_spi_txrx_noblock>
   13d92:	903e      	str	r0, [sp, #248]	; 0xf8
   13d94:	e7ff      	b.n	13d96 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1c2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   13d96:	f640 1018 	movw	r0, #2328	; 0x918
   13d9a:	f2c0 0002 	movt	r0, #2
   13d9e:	6800      	ldr	r0, [r0, #0]
   13da0:	a93e      	add	r1, sp, #248	; 0xf8
   13da2:	913f      	str	r1, [sp, #252]	; 0xfc
   13da4:	9040      	str	r0, [sp, #256]	; 0x100
   13da6:	983f      	ldr	r0, [sp, #252]	; 0xfc
   13da8:	9062      	str	r0, [sp, #392]	; 0x188
   13daa:	9940      	ldr	r1, [sp, #256]	; 0x100
   13dac:	9163      	str	r1, [sp, #396]	; 0x18c
   13dae:	6802      	ldr	r2, [r0, #0]
   13db0:	680b      	ldr	r3, [r1, #0]
   13db2:	429a      	cmp	r2, r3
   13db4:	900e      	str	r0, [sp, #56]	; 0x38
   13db6:	910d      	str	r1, [sp, #52]	; 0x34
   13db8:	d10c      	bne.n	13dd4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x200>
   13dba:	e7ff      	b.n	13dbc <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1e8>
   13dbc:	f247 5030 	movw	r0, #30000	; 0x7530
        let timeout = 30_000;
   13dc0:	9067      	str	r0, [sp, #412]	; 0x19c
   13dc2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   13dc6:	fba0 0101 	umull	r0, r1, r0, r1
   13dca:	2900      	cmp	r1, #0
   13dcc:	900c      	str	r0, [sp, #48]	; 0x30
   13dce:	f040 8090 	bne.w	13ef2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x31e>
   13dd2:	e072      	b.n	13eba <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2e6>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   13dd4:	f640 1070 	movw	r0, #2416	; 0x970
   13dd8:	f2c0 0002 	movt	r0, #2
   13ddc:	6801      	ldr	r1, [r0, #0]
   13dde:	980e      	ldr	r0, [sp, #56]	; 0x38
   13de0:	9050      	str	r0, [sp, #320]	; 0x140
   13de2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   13de4:	9251      	str	r2, [sp, #324]	; 0x144
   13de6:	f640 4348 	movw	r3, #3144	; 0xc48
   13dea:	f2c0 0302 	movt	r3, #2
   13dee:	681b      	ldr	r3, [r3, #0]
   13df0:	f640 1c90 	movw	ip, #2448	; 0x990
   13df4:	f2c0 0c02 	movt	ip, #2
   13df8:	f8dc c000 	ldr.w	ip, [ip]
   13dfc:	46ee      	mov	lr, sp
   13dfe:	2400      	movs	r4, #0
   13e00:	f8ce 4000 	str.w	r4, [lr]
   13e04:	a852      	add	r0, sp, #328	; 0x148
   13e06:	2201      	movs	r2, #1
   13e08:	910b      	str	r1, [sp, #44]	; 0x2c
   13e0a:	4619      	mov	r1, r3
   13e0c:	4663      	mov	r3, ip
   13e0e:	f7f4 fe45 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13e12:	e7ff      	b.n	13e14 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x240>
   13e14:	a850      	add	r0, sp, #320	; 0x140
   13e16:	904d      	str	r0, [sp, #308]	; 0x134
   13e18:	a851      	add	r0, sp, #324	; 0x144
   13e1a:	904e      	str	r0, [sp, #312]	; 0x138
   13e1c:	a852      	add	r0, sp, #328	; 0x148
   13e1e:	904f      	str	r0, [sp, #316]	; 0x13c
   13e20:	984d      	ldr	r0, [sp, #308]	; 0x134
   13e22:	9064      	str	r0, [sp, #400]	; 0x190
   13e24:	994e      	ldr	r1, [sp, #312]	; 0x138
   13e26:	9165      	str	r1, [sp, #404]	; 0x194
   13e28:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
   13e2a:	9266      	str	r2, [sp, #408]	; 0x198
   13e2c:	f249 23eb 	movw	r3, #37611	; 0x92eb
   13e30:	f2c0 0300 	movt	r3, #0
   13e34:	910a      	str	r1, [sp, #40]	; 0x28
   13e36:	4619      	mov	r1, r3
   13e38:	9209      	str	r2, [sp, #36]	; 0x24
   13e3a:	f7f5 fa8e 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13e3e:	9008      	str	r0, [sp, #32]
   13e40:	9107      	str	r1, [sp, #28]
   13e42:	e7ff      	b.n	13e44 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x270>
   13e44:	f249 21eb 	movw	r1, #37611	; 0x92eb
   13e48:	f2c0 0100 	movt	r1, #0
   13e4c:	980a      	ldr	r0, [sp, #40]	; 0x28
   13e4e:	f7f5 fa84 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13e52:	9006      	str	r0, [sp, #24]
   13e54:	9105      	str	r1, [sp, #20]
   13e56:	e7ff      	b.n	13e58 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x284>
   13e58:	f647 7137 	movw	r1, #32567	; 0x7f37
   13e5c:	f2c0 0101 	movt	r1, #1
   13e60:	9809      	ldr	r0, [sp, #36]	; 0x24
   13e62:	f7f5 fab9 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13e66:	9004      	str	r0, [sp, #16]
   13e68:	9103      	str	r1, [sp, #12]
   13e6a:	e7ff      	b.n	13e6c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x298>
   13e6c:	9808      	ldr	r0, [sp, #32]
   13e6e:	9047      	str	r0, [sp, #284]	; 0x11c
   13e70:	9907      	ldr	r1, [sp, #28]
   13e72:	9148      	str	r1, [sp, #288]	; 0x120
   13e74:	9a06      	ldr	r2, [sp, #24]
   13e76:	9249      	str	r2, [sp, #292]	; 0x124
   13e78:	9b05      	ldr	r3, [sp, #20]
   13e7a:	934a      	str	r3, [sp, #296]	; 0x128
   13e7c:	f8dd c010 	ldr.w	ip, [sp, #16]
   13e80:	f8cd c12c 	str.w	ip, [sp, #300]	; 0x12c
   13e84:	f8dd e00c 	ldr.w	lr, [sp, #12]
   13e88:	f8cd e130 	str.w	lr, [sp, #304]	; 0x130
   13e8c:	466c      	mov	r4, sp
   13e8e:	2503      	movs	r5, #3
   13e90:	6025      	str	r5, [r4, #0]
   13e92:	a841      	add	r0, sp, #260	; 0x104
   13e94:	ab47      	add	r3, sp, #284	; 0x11c
   13e96:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13e98:	462a      	mov	r2, r5
   13e9a:	f7f4 fdff 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13e9e:	e7ff      	b.n	13ea0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2cc>
   13ea0:	f640 405c 	movw	r0, #3164	; 0xc5c
   13ea4:	f2c0 0002 	movt	r0, #2
   13ea8:	f003 fd57 	bl	1795a <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13eac:	9002      	str	r0, [sp, #8]
   13eae:	e7ff      	b.n	13eb0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2dc>
   13eb0:	a841      	add	r0, sp, #260	; 0x104
   13eb2:	9902      	ldr	r1, [sp, #8]
   13eb4:	f003 fd8e 	bl	179d4 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13eb8:	defe      	udf	#254	; 0xfe
   13eba:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   13ebe:	f2c1 0062 	movt	r0, #4194	; 0x1062
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   13ec2:	990c      	ldr	r1, [sp, #48]	; 0x30
   13ec4:	fba1 0200 	umull	r0, r2, r1, r0
   13ec8:	0991      	lsrs	r1, r2, #6
   13eca:	f646 227c 	movw	r2, #27260	; 0x6a7c
   13ece:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13ed2:	9001      	str	r0, [sp, #4]
   13ed4:	4610      	mov	r0, r2
   13ed6:	f007 fd85 	bl	1b9e4 <os_sem_pend>
   13eda:	e7ff      	b.n	13edc <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x308>
    if len == 1 {  //  If writing only 1 byte...
   13edc:	e7ff      	b.n	13ede <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
   13ede:	2019      	movs	r0, #25
   13ee0:	2101      	movs	r1, #1
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
   13ee2:	f005 feaf 	bl	19c44 <hal_gpio_write>
   13ee6:	e7ff      	b.n	13ee8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x314>
   13ee8:	2000      	movs	r0, #0
    Ok(())
   13eea:	9022      	str	r0, [sp, #136]	; 0x88
   13eec:	2001      	movs	r0, #1
   13eee:	9022      	str	r0, [sp, #136]	; 0x88
}
   13ef0:	e686      	b.n	13c00 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   13ef2:	f640 3070 	movw	r0, #2928	; 0xb70
   13ef6:	f2c0 0002 	movt	r0, #2
   13efa:	f640 426c 	movw	r2, #3180	; 0xc6c
   13efe:	f2c0 0202 	movt	r2, #2
   13f02:	2121      	movs	r1, #33	; 0x21
   13f04:	f003 fd30 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13f08:	defe      	udf	#254	; 0xfe

00013f0a <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E>:

/// Called by interrupt handler after Non-blocking SPI transfer has completed
extern "C" fn spi_noblock_handler(_arg: Ptr, _len: i32) {
   13f0a:	b5b0      	push	{r4, r5, r7, lr}
   13f0c:	b0ae      	sub	sp, #184	; 0xb8
   13f0e:	9027      	str	r0, [sp, #156]	; 0x9c
   13f10:	9128      	str	r1, [sp, #160]	; 0xa0
    //  Signal to internal_spi_noblock_write() that SPI request has been completed.
    let rc = unsafe { os::os_sem_release(&mut SPI_SEM) };
   13f12:	f646 207c 	movw	r0, #27260	; 0x6a7c
   13f16:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13f1a:	f007 fd31 	bl	1b980 <os_sem_release>
   13f1e:	900d      	str	r0, [sp, #52]	; 0x34
   13f20:	e7ff      	b.n	13f22 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x18>
    assert_eq!(rc, 0, "sem fail");
   13f22:	f640 1018 	movw	r0, #2328	; 0x918
   13f26:	f2c0 0002 	movt	r0, #2
   13f2a:	6800      	ldr	r0, [r0, #0]
   13f2c:	a90d      	add	r1, sp, #52	; 0x34
   13f2e:	910e      	str	r1, [sp, #56]	; 0x38
   13f30:	900f      	str	r0, [sp, #60]	; 0x3c
   13f32:	980e      	ldr	r0, [sp, #56]	; 0x38
   13f34:	9029      	str	r0, [sp, #164]	; 0xa4
   13f36:	990f      	ldr	r1, [sp, #60]	; 0x3c
   13f38:	912a      	str	r1, [sp, #168]	; 0xa8
   13f3a:	6802      	ldr	r2, [r0, #0]
   13f3c:	680b      	ldr	r3, [r1, #0]
   13f3e:	429a      	cmp	r2, r3
   13f40:	900c      	str	r0, [sp, #48]	; 0x30
   13f42:	910b      	str	r1, [sp, #44]	; 0x2c
   13f44:	d102      	bne.n	13f4c <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x42>
   13f46:	e7ff      	b.n	13f48 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x3e>
}
   13f48:	b02e      	add	sp, #184	; 0xb8
   13f4a:	bdb0      	pop	{r4, r5, r7, pc}
    assert_eq!(rc, 0, "sem fail");
   13f4c:	f640 1070 	movw	r0, #2416	; 0x970
   13f50:	f2c0 0002 	movt	r0, #2
   13f54:	6801      	ldr	r1, [r0, #0]
   13f56:	980c      	ldr	r0, [sp, #48]	; 0x30
   13f58:	901f      	str	r0, [sp, #124]	; 0x7c
   13f5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13f5c:	9220      	str	r2, [sp, #128]	; 0x80
   13f5e:	f640 2388 	movw	r3, #2696	; 0xa88
   13f62:	f2c0 0302 	movt	r3, #2
   13f66:	681b      	ldr	r3, [r3, #0]
   13f68:	f640 1c90 	movw	ip, #2448	; 0x990
   13f6c:	f2c0 0c02 	movt	ip, #2
   13f70:	f8dc c000 	ldr.w	ip, [ip]
   13f74:	46ee      	mov	lr, sp
   13f76:	2400      	movs	r4, #0
   13f78:	f8ce 4000 	str.w	r4, [lr]
   13f7c:	a821      	add	r0, sp, #132	; 0x84
   13f7e:	2201      	movs	r2, #1
   13f80:	910a      	str	r1, [sp, #40]	; 0x28
   13f82:	4619      	mov	r1, r3
   13f84:	4663      	mov	r3, ip
   13f86:	f7f4 fd89 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13f8a:	e7ff      	b.n	13f8c <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x82>
   13f8c:	a81f      	add	r0, sp, #124	; 0x7c
   13f8e:	901c      	str	r0, [sp, #112]	; 0x70
   13f90:	a820      	add	r0, sp, #128	; 0x80
   13f92:	901d      	str	r0, [sp, #116]	; 0x74
   13f94:	a821      	add	r0, sp, #132	; 0x84
   13f96:	901e      	str	r0, [sp, #120]	; 0x78
   13f98:	981c      	ldr	r0, [sp, #112]	; 0x70
   13f9a:	902b      	str	r0, [sp, #172]	; 0xac
   13f9c:	991d      	ldr	r1, [sp, #116]	; 0x74
   13f9e:	912c      	str	r1, [sp, #176]	; 0xb0
   13fa0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13fa2:	922d      	str	r2, [sp, #180]	; 0xb4
   13fa4:	f249 333f 	movw	r3, #37695	; 0x933f
   13fa8:	f2c0 0300 	movt	r3, #0
   13fac:	9109      	str	r1, [sp, #36]	; 0x24
   13fae:	4619      	mov	r1, r3
   13fb0:	9208      	str	r2, [sp, #32]
   13fb2:	f7f5 f9fc 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13fb6:	9007      	str	r0, [sp, #28]
   13fb8:	9106      	str	r1, [sp, #24]
   13fba:	e7ff      	b.n	13fbc <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xb2>
   13fbc:	f249 313f 	movw	r1, #37695	; 0x933f
   13fc0:	f2c0 0100 	movt	r1, #0
   13fc4:	9809      	ldr	r0, [sp, #36]	; 0x24
   13fc6:	f7f5 f9f2 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13fca:	9005      	str	r0, [sp, #20]
   13fcc:	9104      	str	r1, [sp, #16]
   13fce:	e7ff      	b.n	13fd0 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xc6>
   13fd0:	f647 7137 	movw	r1, #32567	; 0x7f37
   13fd4:	f2c0 0101 	movt	r1, #1
   13fd8:	9808      	ldr	r0, [sp, #32]
   13fda:	f7f5 f9fd 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13fde:	9003      	str	r0, [sp, #12]
   13fe0:	9102      	str	r1, [sp, #8]
   13fe2:	e7ff      	b.n	13fe4 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xda>
   13fe4:	9807      	ldr	r0, [sp, #28]
   13fe6:	9016      	str	r0, [sp, #88]	; 0x58
   13fe8:	9906      	ldr	r1, [sp, #24]
   13fea:	9117      	str	r1, [sp, #92]	; 0x5c
   13fec:	9a05      	ldr	r2, [sp, #20]
   13fee:	9218      	str	r2, [sp, #96]	; 0x60
   13ff0:	9b04      	ldr	r3, [sp, #16]
   13ff2:	9319      	str	r3, [sp, #100]	; 0x64
   13ff4:	f8dd c00c 	ldr.w	ip, [sp, #12]
   13ff8:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
   13ffc:	f8dd e008 	ldr.w	lr, [sp, #8]
   14000:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
   14004:	466c      	mov	r4, sp
   14006:	2503      	movs	r5, #3
   14008:	6025      	str	r5, [r4, #0]
   1400a:	a810      	add	r0, sp, #64	; 0x40
   1400c:	ab16      	add	r3, sp, #88	; 0x58
   1400e:	990a      	ldr	r1, [sp, #40]	; 0x28
   14010:	462a      	mov	r2, r5
   14012:	f7f4 fd43 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14016:	e7ff      	b.n	14018 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x10e>
   14018:	f640 407c 	movw	r0, #3196	; 0xc7c
   1401c:	f2c0 0002 	movt	r0, #2
   14020:	f003 fc9b 	bl	1795a <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14024:	9001      	str	r0, [sp, #4]
   14026:	e7ff      	b.n	14028 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x11e>
   14028:	a810      	add	r0, sp, #64	; 0x40
   1402a:	9901      	ldr	r1, [sp, #4]
   1402c:	f003 fcd2 	bl	179d4 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14030:	defe      	udf	#254	; 0xfe

00014032 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>:

/// Sleep for the specified number of milliseconds
fn delay_ms(ms: u8) {
   14032:	b580      	push	{r7, lr}
   14034:	b084      	sub	sp, #16
   14036:	4601      	mov	r1, r0
   14038:	f88d 000b 	strb.w	r0, [sp, #11]
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   1403c:	b2c0      	uxtb	r0, r0
   1403e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14042:	fba0 0202 	umull	r0, r2, r0, r2
   14046:	2a00      	cmp	r2, #0
   14048:	9001      	str	r0, [sp, #4]
   1404a:	d110      	bne.n	1406e <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x3c>
   1404c:	e7ff      	b.n	1404e <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x1c>
   1404e:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   14052:	f2c1 0062 	movt	r0, #4194	; 0x1062
   14056:	9901      	ldr	r1, [sp, #4]
   14058:	fba1 0200 	umull	r0, r2, r1, r0
   1405c:	0992      	lsrs	r2, r2, #6
   1405e:	9203      	str	r2, [sp, #12]
    unsafe { os::os_time_delay(delay_ticks) };
   14060:	9000      	str	r0, [sp, #0]
   14062:	4610      	mov	r0, r2
   14064:	f007 fe0c 	bl	1bc80 <os_time_delay>
   14068:	e7ff      	b.n	1406a <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x38>
}
   1406a:	b004      	add	sp, #16
   1406c:	bd80      	pop	{r7, pc}
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   1406e:	f640 3070 	movw	r0, #2928	; 0xb70
   14072:	f2c0 0002 	movt	r0, #2
   14076:	f640 428c 	movw	r2, #3212	; 0xc8c
   1407a:	f2c0 0202 	movt	r2, #2
   1407e:	2121      	movs	r1, #33	; 0x21
   14080:	f003 fc72 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14084:	defe      	udf	#254	; 0xfe

00014086 <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>:
};

/// Rust Embedded HAL interface for Mynewt SPI
impl SPI {
    /// Create a new SPI port
    pub fn new() -> Self {
   14086:	b082      	sub	sp, #8
   14088:	2000      	movs	r0, #0
        SPI {
   1408a:	9000      	str	r0, [sp, #0]
   1408c:	9001      	str	r0, [sp, #4]
            spi_num: 0,
            cs_pin:  0,
        }
    }
   1408e:	9800      	ldr	r0, [sp, #0]
   14090:	9901      	ldr	r1, [sp, #4]
   14092:	b002      	add	sp, #8
   14094:	4770      	bx	lr

00014096 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>:

    /// Initiaise the SPI port
    pub fn init(&mut self, spi_num: i32, cs_pin: i32, spi_settings: *mut hal::hal_spi_settings) 
   14096:	b5b0      	push	{r4, r5, r7, lr}
   14098:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
   1409c:	9077      	str	r0, [sp, #476]	; 0x1dc
   1409e:	9178      	str	r1, [sp, #480]	; 0x1e0
   140a0:	9279      	str	r2, [sp, #484]	; 0x1e4
   140a2:	937a      	str	r3, [sp, #488]	; 0x1e8
        -> MynewtResult<()> {
        let rc = unsafe { hal::hal_spi_config(spi_num, spi_settings) };
   140a4:	9028      	str	r0, [sp, #160]	; 0xa0
   140a6:	4608      	mov	r0, r1
   140a8:	9127      	str	r1, [sp, #156]	; 0x9c
   140aa:	4619      	mov	r1, r3
   140ac:	9226      	str	r2, [sp, #152]	; 0x98
   140ae:	f006 f9bb 	bl	1a428 <hal_spi_config>
   140b2:	9029      	str	r0, [sp, #164]	; 0xa4
   140b4:	e7ff      	b.n	140b6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x20>
        assert_eq!(rc, 0, "spi config fail");
   140b6:	f640 409c 	movw	r0, #3228	; 0xc9c
   140ba:	f2c0 0002 	movt	r0, #2
   140be:	6800      	ldr	r0, [r0, #0]
   140c0:	a929      	add	r1, sp, #164	; 0xa4
   140c2:	912a      	str	r1, [sp, #168]	; 0xa8
   140c4:	902b      	str	r0, [sp, #172]	; 0xac
   140c6:	982a      	ldr	r0, [sp, #168]	; 0xa8
   140c8:	907b      	str	r0, [sp, #492]	; 0x1ec
   140ca:	992b      	ldr	r1, [sp, #172]	; 0xac
   140cc:	917c      	str	r1, [sp, #496]	; 0x1f0
   140ce:	6802      	ldr	r2, [r0, #0]
   140d0:	680b      	ldr	r3, [r1, #0]
   140d2:	429a      	cmp	r2, r3
   140d4:	9025      	str	r0, [sp, #148]	; 0x94
   140d6:	9124      	str	r1, [sp, #144]	; 0x90
   140d8:	d105      	bne.n	140e6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x50>
   140da:	e7ff      	b.n	140dc <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x46>

        let rc = unsafe { hal::hal_spi_enable(spi_num) };
   140dc:	9827      	ldr	r0, [sp, #156]	; 0x9c
   140de:	f006 f9bf 	bl	1a460 <hal_spi_enable>
   140e2:	9043      	str	r0, [sp, #268]	; 0x10c
   140e4:	e072      	b.n	141cc <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x136>
        assert_eq!(rc, 0, "spi config fail");
   140e6:	f640 40f4 	movw	r0, #3316	; 0xcf4
   140ea:	f2c0 0002 	movt	r0, #2
   140ee:	6801      	ldr	r1, [r0, #0]
   140f0:	9825      	ldr	r0, [sp, #148]	; 0x94
   140f2:	903b      	str	r0, [sp, #236]	; 0xec
   140f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
   140f6:	923c      	str	r2, [sp, #240]	; 0xf0
   140f8:	f640 5310 	movw	r3, #3344	; 0xd10
   140fc:	f2c0 0302 	movt	r3, #2
   14100:	681b      	ldr	r3, [r3, #0]
   14102:	f640 5c14 	movw	ip, #3348	; 0xd14
   14106:	f2c0 0c02 	movt	ip, #2
   1410a:	f8dc c000 	ldr.w	ip, [ip]
   1410e:	46ee      	mov	lr, sp
   14110:	2400      	movs	r4, #0
   14112:	f8ce 4000 	str.w	r4, [lr]
   14116:	a83d      	add	r0, sp, #244	; 0xf4
   14118:	2201      	movs	r2, #1
   1411a:	9123      	str	r1, [sp, #140]	; 0x8c
   1411c:	4619      	mov	r1, r3
   1411e:	4663      	mov	r3, ip
   14120:	f7f4 fcbc 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14124:	e7ff      	b.n	14126 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x90>
   14126:	a83b      	add	r0, sp, #236	; 0xec
   14128:	9038      	str	r0, [sp, #224]	; 0xe0
   1412a:	a83c      	add	r0, sp, #240	; 0xf0
   1412c:	9039      	str	r0, [sp, #228]	; 0xe4
   1412e:	a83d      	add	r0, sp, #244	; 0xf4
   14130:	903a      	str	r0, [sp, #232]	; 0xe8
   14132:	9838      	ldr	r0, [sp, #224]	; 0xe0
   14134:	907d      	str	r0, [sp, #500]	; 0x1f4
   14136:	9939      	ldr	r1, [sp, #228]	; 0xe4
   14138:	917e      	str	r1, [sp, #504]	; 0x1f8
   1413a:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
   1413c:	927f      	str	r2, [sp, #508]	; 0x1fc
   1413e:	f249 23eb 	movw	r3, #37611	; 0x92eb
   14142:	f2c0 0300 	movt	r3, #0
   14146:	9122      	str	r1, [sp, #136]	; 0x88
   14148:	4619      	mov	r1, r3
   1414a:	9221      	str	r2, [sp, #132]	; 0x84
   1414c:	f7f5 f905 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14150:	9020      	str	r0, [sp, #128]	; 0x80
   14152:	911f      	str	r1, [sp, #124]	; 0x7c
   14154:	e7ff      	b.n	14156 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xc0>
   14156:	f249 21eb 	movw	r1, #37611	; 0x92eb
   1415a:	f2c0 0100 	movt	r1, #0
   1415e:	9822      	ldr	r0, [sp, #136]	; 0x88
   14160:	f7f5 f8fb 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14164:	901e      	str	r0, [sp, #120]	; 0x78
   14166:	911d      	str	r1, [sp, #116]	; 0x74
   14168:	e7ff      	b.n	1416a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xd4>
   1416a:	f647 7137 	movw	r1, #32567	; 0x7f37
   1416e:	f2c0 0101 	movt	r1, #1
   14172:	9821      	ldr	r0, [sp, #132]	; 0x84
   14174:	f7f5 f930 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   14178:	901c      	str	r0, [sp, #112]	; 0x70
   1417a:	911b      	str	r1, [sp, #108]	; 0x6c
   1417c:	e7ff      	b.n	1417e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xe8>
   1417e:	9820      	ldr	r0, [sp, #128]	; 0x80
   14180:	9032      	str	r0, [sp, #200]	; 0xc8
   14182:	991f      	ldr	r1, [sp, #124]	; 0x7c
   14184:	9133      	str	r1, [sp, #204]	; 0xcc
   14186:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   14188:	9234      	str	r2, [sp, #208]	; 0xd0
   1418a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1418c:	9335      	str	r3, [sp, #212]	; 0xd4
   1418e:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
   14192:	f8cd c0d8 	str.w	ip, [sp, #216]	; 0xd8
   14196:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
   1419a:	f8cd e0dc 	str.w	lr, [sp, #220]	; 0xdc
   1419e:	466c      	mov	r4, sp
   141a0:	2503      	movs	r5, #3
   141a2:	6025      	str	r5, [r4, #0]
   141a4:	a82c      	add	r0, sp, #176	; 0xb0
   141a6:	ab32      	add	r3, sp, #200	; 0xc8
   141a8:	9923      	ldr	r1, [sp, #140]	; 0x8c
   141aa:	462a      	mov	r2, r5
   141ac:	f7f4 fc76 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   141b0:	e7ff      	b.n	141b2 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x11c>
   141b2:	f640 5030 	movw	r0, #3376	; 0xd30
   141b6:	f2c0 0002 	movt	r0, #2
   141ba:	f003 fbce 	bl	1795a <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   141be:	901a      	str	r0, [sp, #104]	; 0x68
   141c0:	e7ff      	b.n	141c2 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x12c>
   141c2:	a82c      	add	r0, sp, #176	; 0xb0
   141c4:	991a      	ldr	r1, [sp, #104]	; 0x68
   141c6:	f003 fc05 	bl	179d4 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   141ca:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi enable fail");
   141cc:	f640 409c 	movw	r0, #3228	; 0xc9c
   141d0:	f2c0 0002 	movt	r0, #2
   141d4:	6800      	ldr	r0, [r0, #0]
   141d6:	a943      	add	r1, sp, #268	; 0x10c
   141d8:	9144      	str	r1, [sp, #272]	; 0x110
   141da:	9045      	str	r0, [sp, #276]	; 0x114
   141dc:	9844      	ldr	r0, [sp, #272]	; 0x110
   141de:	9080      	str	r0, [sp, #512]	; 0x200
   141e0:	9945      	ldr	r1, [sp, #276]	; 0x114
   141e2:	9181      	str	r1, [sp, #516]	; 0x204
   141e4:	6802      	ldr	r2, [r0, #0]
   141e6:	680b      	ldr	r3, [r1, #0]
   141e8:	429a      	cmp	r2, r3
   141ea:	9019      	str	r0, [sp, #100]	; 0x64
   141ec:	9118      	str	r1, [sp, #96]	; 0x60
   141ee:	d106      	bne.n	141fe <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x168>
   141f0:	e7ff      	b.n	141f2 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x15c>
   141f2:	2101      	movs	r1, #1

        let rc = unsafe { hal::hal_gpio_init_out(cs_pin, 1) };
   141f4:	9826      	ldr	r0, [sp, #152]	; 0x98
   141f6:	f005 fd09 	bl	19c0c <hal_gpio_init_out>
   141fa:	905d      	str	r0, [sp, #372]	; 0x174
   141fc:	e072      	b.n	142e4 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x24e>
        assert_eq!(rc, 0, "spi enable fail");
   141fe:	f640 40f4 	movw	r0, #3316	; 0xcf4
   14202:	f2c0 0002 	movt	r0, #2
   14206:	6801      	ldr	r1, [r0, #0]
   14208:	9819      	ldr	r0, [sp, #100]	; 0x64
   1420a:	9055      	str	r0, [sp, #340]	; 0x154
   1420c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1420e:	9256      	str	r2, [sp, #344]	; 0x158
   14210:	f640 5358 	movw	r3, #3416	; 0xd58
   14214:	f2c0 0302 	movt	r3, #2
   14218:	681b      	ldr	r3, [r3, #0]
   1421a:	f640 5c14 	movw	ip, #3348	; 0xd14
   1421e:	f2c0 0c02 	movt	ip, #2
   14222:	f8dc c000 	ldr.w	ip, [ip]
   14226:	46ee      	mov	lr, sp
   14228:	2400      	movs	r4, #0
   1422a:	f8ce 4000 	str.w	r4, [lr]
   1422e:	a857      	add	r0, sp, #348	; 0x15c
   14230:	2201      	movs	r2, #1
   14232:	9117      	str	r1, [sp, #92]	; 0x5c
   14234:	4619      	mov	r1, r3
   14236:	4663      	mov	r3, ip
   14238:	f7f4 fc30 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1423c:	e7ff      	b.n	1423e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1a8>
   1423e:	a855      	add	r0, sp, #340	; 0x154
   14240:	9052      	str	r0, [sp, #328]	; 0x148
   14242:	a856      	add	r0, sp, #344	; 0x158
   14244:	9053      	str	r0, [sp, #332]	; 0x14c
   14246:	a857      	add	r0, sp, #348	; 0x15c
   14248:	9054      	str	r0, [sp, #336]	; 0x150
   1424a:	9852      	ldr	r0, [sp, #328]	; 0x148
   1424c:	9082      	str	r0, [sp, #520]	; 0x208
   1424e:	9953      	ldr	r1, [sp, #332]	; 0x14c
   14250:	9183      	str	r1, [sp, #524]	; 0x20c
   14252:	9a54      	ldr	r2, [sp, #336]	; 0x150
   14254:	9284      	str	r2, [sp, #528]	; 0x210
   14256:	f249 23eb 	movw	r3, #37611	; 0x92eb
   1425a:	f2c0 0300 	movt	r3, #0
   1425e:	9116      	str	r1, [sp, #88]	; 0x58
   14260:	4619      	mov	r1, r3
   14262:	9215      	str	r2, [sp, #84]	; 0x54
   14264:	f7f5 f879 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14268:	9014      	str	r0, [sp, #80]	; 0x50
   1426a:	9113      	str	r1, [sp, #76]	; 0x4c
   1426c:	e7ff      	b.n	1426e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1d8>
   1426e:	f249 21eb 	movw	r1, #37611	; 0x92eb
   14272:	f2c0 0100 	movt	r1, #0
   14276:	9816      	ldr	r0, [sp, #88]	; 0x58
   14278:	f7f5 f86f 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1427c:	9012      	str	r0, [sp, #72]	; 0x48
   1427e:	9111      	str	r1, [sp, #68]	; 0x44
   14280:	e7ff      	b.n	14282 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1ec>
   14282:	f647 7137 	movw	r1, #32567	; 0x7f37
   14286:	f2c0 0101 	movt	r1, #1
   1428a:	9815      	ldr	r0, [sp, #84]	; 0x54
   1428c:	f7f5 f8a4 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   14290:	9010      	str	r0, [sp, #64]	; 0x40
   14292:	910f      	str	r1, [sp, #60]	; 0x3c
   14294:	e7ff      	b.n	14296 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x200>
   14296:	9814      	ldr	r0, [sp, #80]	; 0x50
   14298:	904c      	str	r0, [sp, #304]	; 0x130
   1429a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1429c:	914d      	str	r1, [sp, #308]	; 0x134
   1429e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   142a0:	924e      	str	r2, [sp, #312]	; 0x138
   142a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   142a4:	934f      	str	r3, [sp, #316]	; 0x13c
   142a6:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   142aa:	f8cd c140 	str.w	ip, [sp, #320]	; 0x140
   142ae:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
   142b2:	f8cd e144 	str.w	lr, [sp, #324]	; 0x144
   142b6:	466c      	mov	r4, sp
   142b8:	2503      	movs	r5, #3
   142ba:	6025      	str	r5, [r4, #0]
   142bc:	a846      	add	r0, sp, #280	; 0x118
   142be:	ab4c      	add	r3, sp, #304	; 0x130
   142c0:	9917      	ldr	r1, [sp, #92]	; 0x5c
   142c2:	462a      	mov	r2, r5
   142c4:	f7f4 fbea 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   142c8:	e7ff      	b.n	142ca <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x234>
   142ca:	f640 505c 	movw	r0, #3420	; 0xd5c
   142ce:	f2c0 0002 	movt	r0, #2
   142d2:	f003 fb42 	bl	1795a <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   142d6:	900e      	str	r0, [sp, #56]	; 0x38
   142d8:	e7ff      	b.n	142da <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x244>
   142da:	a846      	add	r0, sp, #280	; 0x118
   142dc:	990e      	ldr	r1, [sp, #56]	; 0x38
   142de:	f003 fb79 	bl	179d4 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   142e2:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi init fail");
   142e4:	f640 409c 	movw	r0, #3228	; 0xc9c
   142e8:	f2c0 0002 	movt	r0, #2
   142ec:	6800      	ldr	r0, [r0, #0]
   142ee:	a95d      	add	r1, sp, #372	; 0x174
   142f0:	915e      	str	r1, [sp, #376]	; 0x178
   142f2:	905f      	str	r0, [sp, #380]	; 0x17c
   142f4:	985e      	ldr	r0, [sp, #376]	; 0x178
   142f6:	9085      	str	r0, [sp, #532]	; 0x214
   142f8:	995f      	ldr	r1, [sp, #380]	; 0x17c
   142fa:	9186      	str	r1, [sp, #536]	; 0x218
   142fc:	6802      	ldr	r2, [r0, #0]
   142fe:	680b      	ldr	r3, [r1, #0]
   14300:	429a      	cmp	r2, r3
   14302:	900d      	str	r0, [sp, #52]	; 0x34
   14304:	910c      	str	r1, [sp, #48]	; 0x30
   14306:	d109      	bne.n	1431c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x286>
   14308:	e7ff      	b.n	1430a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x274>
        self.spi_num = spi_num;
   1430a:	9827      	ldr	r0, [sp, #156]	; 0x9c
   1430c:	9928      	ldr	r1, [sp, #160]	; 0xa0
   1430e:	6008      	str	r0, [r1, #0]
        self.cs_pin  = cs_pin;
   14310:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14312:	604a      	str	r2, [r1, #4]
   14314:	2001      	movs	r0, #1
        Ok(())
    }
   14316:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228
   1431a:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "spi init fail");
   1431c:	f640 40f4 	movw	r0, #3316	; 0xcf4
   14320:	f2c0 0002 	movt	r0, #2
   14324:	6801      	ldr	r1, [r0, #0]
   14326:	980d      	ldr	r0, [sp, #52]	; 0x34
   14328:	906f      	str	r0, [sp, #444]	; 0x1bc
   1432a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1432c:	9270      	str	r2, [sp, #448]	; 0x1c0
   1432e:	f640 5384 	movw	r3, #3460	; 0xd84
   14332:	f2c0 0302 	movt	r3, #2
   14336:	681b      	ldr	r3, [r3, #0]
   14338:	f640 5c14 	movw	ip, #3348	; 0xd14
   1433c:	f2c0 0c02 	movt	ip, #2
   14340:	f8dc c000 	ldr.w	ip, [ip]
   14344:	46ee      	mov	lr, sp
   14346:	2400      	movs	r4, #0
   14348:	f8ce 4000 	str.w	r4, [lr]
   1434c:	a871      	add	r0, sp, #452	; 0x1c4
   1434e:	2201      	movs	r2, #1
   14350:	910b      	str	r1, [sp, #44]	; 0x2c
   14352:	4619      	mov	r1, r3
   14354:	4663      	mov	r3, ip
   14356:	f7f4 fba1 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1435a:	e7ff      	b.n	1435c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2c6>
   1435c:	a86f      	add	r0, sp, #444	; 0x1bc
   1435e:	906c      	str	r0, [sp, #432]	; 0x1b0
   14360:	a870      	add	r0, sp, #448	; 0x1c0
   14362:	906d      	str	r0, [sp, #436]	; 0x1b4
   14364:	a871      	add	r0, sp, #452	; 0x1c4
   14366:	906e      	str	r0, [sp, #440]	; 0x1b8
   14368:	986c      	ldr	r0, [sp, #432]	; 0x1b0
   1436a:	9087      	str	r0, [sp, #540]	; 0x21c
   1436c:	996d      	ldr	r1, [sp, #436]	; 0x1b4
   1436e:	9188      	str	r1, [sp, #544]	; 0x220
   14370:	9a6e      	ldr	r2, [sp, #440]	; 0x1b8
   14372:	9289      	str	r2, [sp, #548]	; 0x224
   14374:	f249 23eb 	movw	r3, #37611	; 0x92eb
   14378:	f2c0 0300 	movt	r3, #0
   1437c:	910a      	str	r1, [sp, #40]	; 0x28
   1437e:	4619      	mov	r1, r3
   14380:	9209      	str	r2, [sp, #36]	; 0x24
   14382:	f7f4 ffea 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14386:	9008      	str	r0, [sp, #32]
   14388:	9107      	str	r1, [sp, #28]
   1438a:	e7ff      	b.n	1438c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2f6>
   1438c:	f249 21eb 	movw	r1, #37611	; 0x92eb
   14390:	f2c0 0100 	movt	r1, #0
   14394:	980a      	ldr	r0, [sp, #40]	; 0x28
   14396:	f7f4 ffe0 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1439a:	9006      	str	r0, [sp, #24]
   1439c:	9105      	str	r1, [sp, #20]
   1439e:	e7ff      	b.n	143a0 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x30a>
   143a0:	f647 7137 	movw	r1, #32567	; 0x7f37
   143a4:	f2c0 0101 	movt	r1, #1
   143a8:	9809      	ldr	r0, [sp, #36]	; 0x24
   143aa:	f7f5 f815 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   143ae:	9004      	str	r0, [sp, #16]
   143b0:	9103      	str	r1, [sp, #12]
   143b2:	e7ff      	b.n	143b4 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x31e>
   143b4:	9808      	ldr	r0, [sp, #32]
   143b6:	9066      	str	r0, [sp, #408]	; 0x198
   143b8:	9907      	ldr	r1, [sp, #28]
   143ba:	9167      	str	r1, [sp, #412]	; 0x19c
   143bc:	9a06      	ldr	r2, [sp, #24]
   143be:	9268      	str	r2, [sp, #416]	; 0x1a0
   143c0:	9b05      	ldr	r3, [sp, #20]
   143c2:	9369      	str	r3, [sp, #420]	; 0x1a4
   143c4:	f8dd c010 	ldr.w	ip, [sp, #16]
   143c8:	f8cd c1a8 	str.w	ip, [sp, #424]	; 0x1a8
   143cc:	f8dd e00c 	ldr.w	lr, [sp, #12]
   143d0:	f8cd e1ac 	str.w	lr, [sp, #428]	; 0x1ac
   143d4:	466c      	mov	r4, sp
   143d6:	2503      	movs	r5, #3
   143d8:	6025      	str	r5, [r4, #0]
   143da:	a860      	add	r0, sp, #384	; 0x180
   143dc:	ab66      	add	r3, sp, #408	; 0x198
   143de:	990b      	ldr	r1, [sp, #44]	; 0x2c
   143e0:	462a      	mov	r2, r5
   143e2:	f7f4 fb5b 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   143e6:	e7ff      	b.n	143e8 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x352>
   143e8:	f640 5088 	movw	r0, #3464	; 0xd88
   143ec:	f2c0 0002 	movt	r0, #2
   143f0:	f003 fab3 	bl	1795a <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   143f4:	9002      	str	r0, [sp, #8]
   143f6:	e7ff      	b.n	143f8 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x362>
   143f8:	a860      	add	r0, sp, #384	; 0x180
   143fa:	9902      	ldr	r1, [sp, #8]
   143fc:	f003 faea 	bl	179d4 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14400:	defe      	udf	#254	; 0xfe

00014402 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl GPIO {
    /// Create a new output GPIO pin
    pub fn new() -> Self {
   14402:	2000      	movs	r0, #0
        GPIO {
            pin: 0,
        }
    }
   14404:	4770      	bx	lr

00014406 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>:

    /// Initialise the output GPIO pin
    pub fn init(&mut self, pin: i32) -> MynewtResult<()> {
   14406:	b5b0      	push	{r4, r5, r7, lr}
   14408:	b0b0      	sub	sp, #192	; 0xc0
   1440a:	9029      	str	r0, [sp, #164]	; 0xa4
   1440c:	912a      	str	r1, [sp, #168]	; 0xa8
   1440e:	2200      	movs	r2, #0
        //  TODO: let dc = pins.d0.into_push_pull_output(&mut pins.port);
        //  TODO: let rst = pins.d1.into_push_pull_output(&mut pins.port);
        let rc = unsafe { hal::hal_gpio_init_out(pin, 0) };
   14410:	900e      	str	r0, [sp, #56]	; 0x38
   14412:	4608      	mov	r0, r1
   14414:	910d      	str	r1, [sp, #52]	; 0x34
   14416:	4611      	mov	r1, r2
   14418:	f005 fbf8 	bl	19c0c <hal_gpio_init_out>
   1441c:	900f      	str	r0, [sp, #60]	; 0x3c
   1441e:	e7ff      	b.n	14420 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x1a>
        assert_eq!(rc, 0, "gpio fail");
   14420:	f640 409c 	movw	r0, #3228	; 0xc9c
   14424:	f2c0 0002 	movt	r0, #2
   14428:	6800      	ldr	r0, [r0, #0]
   1442a:	a90f      	add	r1, sp, #60	; 0x3c
   1442c:	9110      	str	r1, [sp, #64]	; 0x40
   1442e:	9011      	str	r0, [sp, #68]	; 0x44
   14430:	9810      	ldr	r0, [sp, #64]	; 0x40
   14432:	902b      	str	r0, [sp, #172]	; 0xac
   14434:	9911      	ldr	r1, [sp, #68]	; 0x44
   14436:	912c      	str	r1, [sp, #176]	; 0xb0
   14438:	6802      	ldr	r2, [r0, #0]
   1443a:	680b      	ldr	r3, [r1, #0]
   1443c:	429a      	cmp	r2, r3
   1443e:	900c      	str	r0, [sp, #48]	; 0x30
   14440:	910b      	str	r1, [sp, #44]	; 0x2c
   14442:	d106      	bne.n	14452 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x4c>
   14444:	e7ff      	b.n	14446 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x40>
        self.pin = pin;
   14446:	980d      	ldr	r0, [sp, #52]	; 0x34
   14448:	990e      	ldr	r1, [sp, #56]	; 0x38
   1444a:	6008      	str	r0, [r1, #0]
   1444c:	2001      	movs	r0, #1
        Ok(())
    }
   1444e:	b030      	add	sp, #192	; 0xc0
   14450:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "gpio fail");
   14452:	f640 40f4 	movw	r0, #3316	; 0xcf4
   14456:	f2c0 0002 	movt	r0, #2
   1445a:	6801      	ldr	r1, [r0, #0]
   1445c:	980c      	ldr	r0, [sp, #48]	; 0x30
   1445e:	9021      	str	r0, [sp, #132]	; 0x84
   14460:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14462:	9222      	str	r2, [sp, #136]	; 0x88
   14464:	f640 53ac 	movw	r3, #3500	; 0xdac
   14468:	f2c0 0302 	movt	r3, #2
   1446c:	681b      	ldr	r3, [r3, #0]
   1446e:	f640 5c14 	movw	ip, #3348	; 0xd14
   14472:	f2c0 0c02 	movt	ip, #2
   14476:	f8dc c000 	ldr.w	ip, [ip]
   1447a:	46ee      	mov	lr, sp
   1447c:	2400      	movs	r4, #0
   1447e:	f8ce 4000 	str.w	r4, [lr]
   14482:	a823      	add	r0, sp, #140	; 0x8c
   14484:	2201      	movs	r2, #1
   14486:	910a      	str	r1, [sp, #40]	; 0x28
   14488:	4619      	mov	r1, r3
   1448a:	4663      	mov	r3, ip
   1448c:	f7f4 fb06 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14490:	e7ff      	b.n	14492 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x8c>
   14492:	a821      	add	r0, sp, #132	; 0x84
   14494:	901e      	str	r0, [sp, #120]	; 0x78
   14496:	a822      	add	r0, sp, #136	; 0x88
   14498:	901f      	str	r0, [sp, #124]	; 0x7c
   1449a:	a823      	add	r0, sp, #140	; 0x8c
   1449c:	9020      	str	r0, [sp, #128]	; 0x80
   1449e:	981e      	ldr	r0, [sp, #120]	; 0x78
   144a0:	902d      	str	r0, [sp, #180]	; 0xb4
   144a2:	991f      	ldr	r1, [sp, #124]	; 0x7c
   144a4:	912e      	str	r1, [sp, #184]	; 0xb8
   144a6:	9a20      	ldr	r2, [sp, #128]	; 0x80
   144a8:	922f      	str	r2, [sp, #188]	; 0xbc
   144aa:	f249 23eb 	movw	r3, #37611	; 0x92eb
   144ae:	f2c0 0300 	movt	r3, #0
   144b2:	9109      	str	r1, [sp, #36]	; 0x24
   144b4:	4619      	mov	r1, r3
   144b6:	9208      	str	r2, [sp, #32]
   144b8:	f7f4 ff4f 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   144bc:	9007      	str	r0, [sp, #28]
   144be:	9106      	str	r1, [sp, #24]
   144c0:	e7ff      	b.n	144c2 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xbc>
   144c2:	f249 21eb 	movw	r1, #37611	; 0x92eb
   144c6:	f2c0 0100 	movt	r1, #0
   144ca:	9809      	ldr	r0, [sp, #36]	; 0x24
   144cc:	f7f4 ff45 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   144d0:	9005      	str	r0, [sp, #20]
   144d2:	9104      	str	r1, [sp, #16]
   144d4:	e7ff      	b.n	144d6 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xd0>
   144d6:	f647 7137 	movw	r1, #32567	; 0x7f37
   144da:	f2c0 0101 	movt	r1, #1
   144de:	9808      	ldr	r0, [sp, #32]
   144e0:	f7f4 ff7a 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   144e4:	9003      	str	r0, [sp, #12]
   144e6:	9102      	str	r1, [sp, #8]
   144e8:	e7ff      	b.n	144ea <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xe4>
   144ea:	9807      	ldr	r0, [sp, #28]
   144ec:	9018      	str	r0, [sp, #96]	; 0x60
   144ee:	9906      	ldr	r1, [sp, #24]
   144f0:	9119      	str	r1, [sp, #100]	; 0x64
   144f2:	9a05      	ldr	r2, [sp, #20]
   144f4:	921a      	str	r2, [sp, #104]	; 0x68
   144f6:	9b04      	ldr	r3, [sp, #16]
   144f8:	931b      	str	r3, [sp, #108]	; 0x6c
   144fa:	f8dd c00c 	ldr.w	ip, [sp, #12]
   144fe:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
   14502:	f8dd e008 	ldr.w	lr, [sp, #8]
   14506:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
   1450a:	466c      	mov	r4, sp
   1450c:	2503      	movs	r5, #3
   1450e:	6025      	str	r5, [r4, #0]
   14510:	a812      	add	r0, sp, #72	; 0x48
   14512:	ab18      	add	r3, sp, #96	; 0x60
   14514:	990a      	ldr	r1, [sp, #40]	; 0x28
   14516:	462a      	mov	r2, r5
   14518:	f7f4 fac0 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1451c:	e7ff      	b.n	1451e <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x118>
   1451e:	f640 50b0 	movw	r0, #3504	; 0xdb0
   14522:	f2c0 0002 	movt	r0, #2
   14526:	f003 fa18 	bl	1795a <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1452a:	9001      	str	r0, [sp, #4]
   1452c:	e7ff      	b.n	1452e <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x128>
   1452e:	a812      	add	r0, sp, #72	; 0x48
   14530:	9901      	ldr	r1, [sp, #4]
   14532:	f003 fa4f 	bl	179d4 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14536:	defe      	udf	#254	; 0xfe

00014538 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl embedded_hal::digital::v2::OutputPin for GPIO {
    /// Set the GPIO pin to low
    fn set_low(&mut self) -> Result<(), Self::Error> {
   14538:	b580      	push	{r7, lr}
   1453a:	b082      	sub	sp, #8
   1453c:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 0) };
   1453e:	6800      	ldr	r0, [r0, #0]
   14540:	2100      	movs	r1, #0
   14542:	f005 fb7f 	bl	19c44 <hal_gpio_write>
   14546:	e7ff      	b.n	14548 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E+0x10>
   14548:	2001      	movs	r0, #1
        Ok(())
    }
   1454a:	b002      	add	sp, #8
   1454c:	bd80      	pop	{r7, pc}

0001454e <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>:

    /// Set the GPIO pin to high
    fn set_high(&mut self) -> Result<(), Self::Error> {
   1454e:	b580      	push	{r7, lr}
   14550:	b082      	sub	sp, #8
   14552:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 1) };
   14554:	6800      	ldr	r0, [r0, #0]
   14556:	2101      	movs	r1, #1
   14558:	f005 fb74 	bl	19c44 <hal_gpio_write>
   1455c:	e7ff      	b.n	1455e <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE+0x10>
   1455e:	2001      	movs	r0, #1
        Ok(())
    }
   14560:	b002      	add	sp, #8
   14562:	bd80      	pop	{r7, pc}

00014564 <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>:
impl Delay {
    /// Create a new delay
    pub fn new() -> Self {
        Delay {
        }
    }
   14564:	4770      	bx	lr

00014566 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>:
}

/// Rust Embedded HAL interface for Mynewt Delay
impl embedded_hal::blocking::delay::DelayMs<u8> for Delay {
    /// Sleep for the specified number of milliseconds
    fn delay_ms(&mut self, ms: u8) {
   14566:	b580      	push	{r7, lr}
   14568:	b086      	sub	sp, #24
   1456a:	460a      	mov	r2, r1
   1456c:	9003      	str	r0, [sp, #12]
   1456e:	f88d 1013 	strb.w	r1, [sp, #19]
        //  TODO: Get this constant from Mynewt
        const OS_TICKS_PER_SEC: u32 = 1000;
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   14572:	b2c8      	uxtb	r0, r1
   14574:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   14578:	fba0 0101 	umull	r0, r1, r0, r1
   1457c:	2900      	cmp	r1, #0
   1457e:	9002      	str	r0, [sp, #8]
   14580:	d110      	bne.n	145a4 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3e>
   14582:	e7ff      	b.n	14584 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x1e>
   14584:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   14588:	f2c1 0062 	movt	r0, #4194	; 0x1062
   1458c:	9902      	ldr	r1, [sp, #8]
   1458e:	fba1 0200 	umull	r0, r2, r1, r0
   14592:	0992      	lsrs	r2, r2, #6
   14594:	9205      	str	r2, [sp, #20]
        unsafe { os::os_time_delay(delay_ticks) };
   14596:	9001      	str	r0, [sp, #4]
   14598:	4610      	mov	r0, r2
   1459a:	f007 fb71 	bl	1bc80 <os_time_delay>
   1459e:	e7ff      	b.n	145a0 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3a>
    }
   145a0:	b006      	add	sp, #24
   145a2:	bd80      	pop	{r7, pc}
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   145a4:	f640 50d0 	movw	r0, #3536	; 0xdd0
   145a8:	f2c0 0002 	movt	r0, #2
   145ac:	f640 52c0 	movw	r2, #3520	; 0xdc0
   145b0:	f2c0 0202 	movt	r2, #2
   145b4:	2121      	movs	r1, #33	; 0x21
   145b6:	f003 f9d7 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   145ba:	defe      	udf	#254	; 0xfe

000145bc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>:
   145bc:	b082      	sub	sp, #8
   145be:	9001      	str	r0, [sp, #4]
   145c0:	9000      	str	r0, [sp, #0]
   145c2:	e7ff      	b.n	145c4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E+0x8>
   145c4:	9800      	ldr	r0, [sp, #0]
   145c6:	fab0 f180 	clz	r1, r0
   145ca:	0948      	lsrs	r0, r1, #5
   145cc:	b002      	add	sp, #8
   145ce:	4770      	bx	lr

000145d0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE>:
   145d0:	b580      	push	{r7, lr}
   145d2:	b084      	sub	sp, #16
   145d4:	9002      	str	r0, [sp, #8]
   145d6:	9103      	str	r1, [sp, #12]
   145d8:	f000 f805 	bl	145e6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>
   145dc:	9001      	str	r0, [sp, #4]
   145de:	e7ff      	b.n	145e0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE+0x10>
   145e0:	9801      	ldr	r0, [sp, #4]
   145e2:	b004      	add	sp, #16
   145e4:	bd80      	pop	{r7, pc}

000145e6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>:
   145e6:	b084      	sub	sp, #16
   145e8:	9001      	str	r0, [sp, #4]
   145ea:	9102      	str	r1, [sp, #8]
   145ec:	4408      	add	r0, r1
   145ee:	9003      	str	r0, [sp, #12]
   145f0:	9803      	ldr	r0, [sp, #12]
   145f2:	9000      	str	r0, [sp, #0]
   145f4:	e7ff      	b.n	145f6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE+0x10>
   145f6:	9800      	ldr	r0, [sp, #0]
   145f8:	b004      	add	sp, #16
   145fa:	4770      	bx	lr

000145fc <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>:
   145fc:	b081      	sub	sp, #4
   145fe:	b001      	add	sp, #4
   14600:	4770      	bx	lr

00014602 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>:

macro_rules! impl_to_primitive_uint_to_uint {
    ($SrcT:ident : $( $(#[$cfg:meta])* fn $method:ident -> $DstT:ident ; )*) => {$(
        #[inline]
        $(#[$cfg])*
        fn $method(&self) -> Option<$DstT> {
   14602:	b08a      	sub	sp, #40	; 0x28
   14604:	9005      	str	r0, [sp, #20]
   14606:	2100      	movs	r1, #0
            let max = $DstT::MAX as $SrcT;
   14608:	9107      	str	r1, [sp, #28]
   1460a:	21ff      	movs	r1, #255	; 0xff
   1460c:	9106      	str	r1, [sp, #24]
   1460e:	2108      	movs	r1, #8
   14610:	9108      	str	r1, [sp, #32]
   14612:	9908      	ldr	r1, [sp, #32]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   14614:	9003      	str	r0, [sp, #12]
   14616:	9102      	str	r1, [sp, #8]
   14618:	e016      	b.n	14648 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x46>
   1461a:	2001      	movs	r0, #1
   1461c:	f88d 0013 	strb.w	r0, [sp, #19]
   14620:	e00c      	b.n	1463c <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   14622:	2000      	movs	r0, #0
   14624:	f88d 0013 	strb.w	r0, [sp, #19]
   14628:	e008      	b.n	1463c <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   1462a:	9803      	ldr	r0, [sp, #12]
   1462c:	6801      	ldr	r1, [r0, #0]
   1462e:	6842      	ldr	r2, [r0, #4]
   14630:	f5b1 7180 	subs.w	r1, r1, #256	; 0x100
   14634:	f172 0200 	sbcs.w	r2, r2, #0
   14638:	d3ef      	bcc.n	1461a <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   1463a:	e7f2      	b.n	14622 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x20>
   1463c:	f89d 0013 	ldrb.w	r0, [sp, #19]
   14640:	07c0      	lsls	r0, r0, #31
   14642:	2800      	cmp	r0, #0
   14644:	d10e      	bne.n	14664 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x62>
   14646:	e009      	b.n	1465c <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x5a>
   14648:	2001      	movs	r0, #1
   1464a:	9009      	str	r0, [sp, #36]	; 0x24
   1464c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1464e:	9001      	str	r0, [sp, #4]
   14650:	e7ff      	b.n	14652 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x50>
   14652:	9802      	ldr	r0, [sp, #8]
   14654:	9901      	ldr	r1, [sp, #4]
   14656:	4288      	cmp	r0, r1
   14658:	d9df      	bls.n	1461a <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   1465a:	e7e6      	b.n	1462a <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x28>
   1465c:	2000      	movs	r0, #0
                Some(*self as $DstT)
            } else {
                None
   1465e:	f88d 0010 	strb.w	r0, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   14662:	e007      	b.n	14674 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
                Some(*self as $DstT)
   14664:	9803      	ldr	r0, [sp, #12]
   14666:	7801      	ldrb	r1, [r0, #0]
   14668:	f88d 1011 	strb.w	r1, [sp, #17]
   1466c:	2101      	movs	r1, #1
   1466e:	f88d 1010 	strb.w	r1, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   14672:	e7ff      	b.n	14674 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
            }
        }
   14674:	f89d 0010 	ldrb.w	r0, [sp, #16]
   14678:	f89d 1011 	ldrb.w	r1, [sp, #17]
   1467c:	b00a      	add	sp, #40	; 0x28
   1467e:	4770      	bx	lr

00014680 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE>:
   14680:	b580      	push	{r7, lr}
   14682:	b090      	sub	sp, #64	; 0x40
   14684:	2200      	movs	r2, #0
   14686:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
   1468a:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   1468e:	2201      	movs	r2, #1
   14690:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   14694:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
   14698:	680a      	ldr	r2, [r1, #0]
   1469a:	2a00      	cmp	r2, #0
   1469c:	9101      	str	r1, [sp, #4]
   1469e:	9000      	str	r0, [sp, #0]
   146a0:	d001      	beq.n	146a6 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x26>
   146a2:	e7ff      	b.n	146a4 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x24>
   146a4:	e004      	b.n	146b0 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x30>
   146a6:	2000      	movs	r0, #0
   146a8:	9900      	ldr	r1, [sp, #0]
   146aa:	6008      	str	r0, [r1, #0]
   146ac:	e032      	b.n	14714 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x94>
   146ae:	defe      	udf	#254	; 0xfe
   146b0:	2000      	movs	r0, #0
   146b2:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
   146b6:	9901      	ldr	r1, [sp, #4]
   146b8:	684a      	ldr	r2, [r1, #4]
   146ba:	688b      	ldr	r3, [r1, #8]
   146bc:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   146c0:	f8cd c010 	str.w	ip, [sp, #16]
   146c4:	9303      	str	r3, [sp, #12]
   146c6:	9202      	str	r2, [sp, #8]
   146c8:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
   146cc:	9802      	ldr	r0, [sp, #8]
   146ce:	9a03      	ldr	r2, [sp, #12]
   146d0:	9b04      	ldr	r3, [sp, #16]
   146d2:	930d      	str	r3, [sp, #52]	; 0x34
   146d4:	920c      	str	r2, [sp, #48]	; 0x30
   146d6:	900b      	str	r0, [sp, #44]	; 0x2c
   146d8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   146da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   146dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   146de:	930a      	str	r3, [sp, #40]	; 0x28
   146e0:	9209      	str	r2, [sp, #36]	; 0x24
   146e2:	9008      	str	r0, [sp, #32]
   146e4:	a805      	add	r0, sp, #20
   146e6:	a908      	add	r1, sp, #32
   146e8:	f002 f90a 	bl	16900 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E>
   146ec:	e7ff      	b.n	146ee <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x6e>
   146ee:	9805      	ldr	r0, [sp, #20]
   146f0:	9906      	ldr	r1, [sp, #24]
   146f2:	9a07      	ldr	r2, [sp, #28]
   146f4:	9b00      	ldr	r3, [sp, #0]
   146f6:	60da      	str	r2, [r3, #12]
   146f8:	6099      	str	r1, [r3, #8]
   146fa:	6058      	str	r0, [r3, #4]
   146fc:	2001      	movs	r0, #1
   146fe:	6018      	str	r0, [r3, #0]
   14700:	e008      	b.n	14714 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x94>
   14702:	9801      	ldr	r0, [sp, #4]
   14704:	6801      	ldr	r1, [r0, #0]
   14706:	2901      	cmp	r1, #1
   14708:	d00c      	beq.n	14724 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa4>
   1470a:	e015      	b.n	14738 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xb8>
   1470c:	2000      	movs	r0, #0
   1470e:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
   14712:	e7f6      	b.n	14702 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x82>
   14714:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
   14718:	07c0      	lsls	r0, r0, #31
   1471a:	2800      	cmp	r0, #0
   1471c:	d1f6      	bne.n	1470c <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x8c>
   1471e:	e7f0      	b.n	14702 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x82>
   14720:	b010      	add	sp, #64	; 0x40
   14722:	bd80      	pop	{r7, pc}
   14724:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   14728:	07c0      	lsls	r0, r0, #31
   1472a:	2800      	cmp	r0, #0
   1472c:	d0f8      	beq.n	14720 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>
   1472e:	e7ff      	b.n	14730 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xb0>
   14730:	2000      	movs	r0, #0
   14732:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
   14736:	e7f3      	b.n	14720 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>
   14738:	e7f2      	b.n	14720 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>

0001473a <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>:
   1473a:	b084      	sub	sp, #16
   1473c:	9002      	str	r0, [sp, #8]
   1473e:	6801      	ldr	r1, [r0, #0]
   14740:	2900      	cmp	r1, #0
   14742:	9000      	str	r0, [sp, #0]
   14744:	d001      	beq.n	1474a <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x10>
   14746:	e7ff      	b.n	14748 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0xe>
   14748:	e003      	b.n	14752 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x18>
   1474a:	2000      	movs	r0, #0
   1474c:	9001      	str	r0, [sp, #4]
   1474e:	e006      	b.n	1475e <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   14750:	defe      	udf	#254	; 0xfe
   14752:	9800      	ldr	r0, [sp, #0]
   14754:	f100 0108 	add.w	r1, r0, #8
   14758:	9103      	str	r1, [sp, #12]
   1475a:	9101      	str	r1, [sp, #4]
   1475c:	e7ff      	b.n	1475e <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   1475e:	9801      	ldr	r0, [sp, #4]
   14760:	b004      	add	sp, #16
   14762:	4770      	bx	lr

00014764 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE>:
   14764:	b510      	push	{r4, lr}
   14766:	b088      	sub	sp, #32
   14768:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   1476c:	468e      	mov	lr, r1
   1476e:	4604      	mov	r4, r0
   14770:	f8ad 0010 	strh.w	r0, [sp, #16]
   14774:	f8ad 1012 	strh.w	r1, [sp, #18]
   14778:	9205      	str	r2, [sp, #20]
   1477a:	9306      	str	r3, [sp, #24]
   1477c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   14780:	4601      	mov	r1, r0
   14782:	2800      	cmp	r0, #0
   14784:	9303      	str	r3, [sp, #12]
   14786:	9202      	str	r2, [sp, #8]
   14788:	f8cd c004 	str.w	ip, [sp, #4]
   1478c:	d001      	beq.n	14792 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x2e>
   1478e:	e7ff      	b.n	14790 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x2c>
   14790:	e006      	b.n	147a0 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x3c>
   14792:	9802      	ldr	r0, [sp, #8]
   14794:	9903      	ldr	r1, [sp, #12]
   14796:	9a01      	ldr	r2, [sp, #4]
   14798:	f003 f89c 	bl	178d4 <_ZN4core6option13expect_failed17had6579abaad447b4E>
   1479c:	defe      	udf	#254	; 0xfe
   1479e:	defe      	udf	#254	; 0xfe
   147a0:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   147a4:	4601      	mov	r1, r0
   147a6:	f8ad 001e 	strh.w	r0, [sp, #30]
   147aa:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   147ae:	2801      	cmp	r0, #1
   147b0:	9100      	str	r1, [sp, #0]
   147b2:	d103      	bne.n	147bc <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x58>
   147b4:	e7ff      	b.n	147b6 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x52>
   147b6:	9800      	ldr	r0, [sp, #0]
   147b8:	b008      	add	sp, #32
   147ba:	bd10      	pop	{r4, pc}
   147bc:	e7fb      	b.n	147b6 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x52>

000147be <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>:
   147be:	b084      	sub	sp, #16
   147c0:	460b      	mov	r3, r1
   147c2:	4684      	mov	ip, r0
   147c4:	f88d 000c 	strb.w	r0, [sp, #12]
   147c8:	f88d 100d 	strb.w	r1, [sp, #13]
   147cc:	f89d 000c 	ldrb.w	r0, [sp, #12]
   147d0:	07c1      	lsls	r1, r0, #31
   147d2:	2900      	cmp	r1, #0
   147d4:	9202      	str	r2, [sp, #8]
   147d6:	d001      	beq.n	147dc <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1e>
   147d8:	e7ff      	b.n	147da <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1c>
   147da:	e009      	b.n	147f0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x32>
   147dc:	f640 50f1 	movw	r0, #3569	; 0xdf1
   147e0:	f2c0 0002 	movt	r0, #2
   147e4:	212b      	movs	r1, #43	; 0x2b
   147e6:	9a02      	ldr	r2, [sp, #8]
   147e8:	f003 f8be 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   147ec:	defe      	udf	#254	; 0xfe
   147ee:	defe      	udf	#254	; 0xfe
   147f0:	f89d 000d 	ldrb.w	r0, [sp, #13]
   147f4:	4601      	mov	r1, r0
   147f6:	f88d 000f 	strb.w	r0, [sp, #15]
   147fa:	f89d 000c 	ldrb.w	r0, [sp, #12]
   147fe:	07c0      	lsls	r0, r0, #31
   14800:	2800      	cmp	r0, #0
   14802:	9101      	str	r1, [sp, #4]
   14804:	d003      	beq.n	1480e <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x50>
   14806:	e7ff      	b.n	14808 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>
   14808:	9801      	ldr	r0, [sp, #4]
   1480a:	b004      	add	sp, #16
   1480c:	4770      	bx	lr
   1480e:	e7fb      	b.n	14808 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>

00014810 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>:
   14810:	b088      	sub	sp, #32
   14812:	9004      	str	r0, [sp, #16]
   14814:	9105      	str	r1, [sp, #20]
   14816:	9804      	ldr	r0, [sp, #16]
   14818:	2800      	cmp	r0, #0
   1481a:	4601      	mov	r1, r0
   1481c:	bf18      	it	ne
   1481e:	2101      	movne	r1, #1
   14820:	2800      	cmp	r0, #0
   14822:	9203      	str	r2, [sp, #12]
   14824:	d001      	beq.n	1482a <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x1a>
   14826:	e7ff      	b.n	14828 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x18>
   14828:	e009      	b.n	1483e <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x2e>
   1482a:	f640 50f1 	movw	r0, #3569	; 0xdf1
   1482e:	f2c0 0002 	movt	r0, #2
   14832:	212b      	movs	r1, #43	; 0x2b
   14834:	9a03      	ldr	r2, [sp, #12]
   14836:	f003 f897 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1483a:	defe      	udf	#254	; 0xfe
   1483c:	defe      	udf	#254	; 0xfe
   1483e:	9804      	ldr	r0, [sp, #16]
   14840:	9905      	ldr	r1, [sp, #20]
   14842:	9006      	str	r0, [sp, #24]
   14844:	9107      	str	r1, [sp, #28]
   14846:	9a04      	ldr	r2, [sp, #16]
   14848:	2a00      	cmp	r2, #0
   1484a:	9002      	str	r0, [sp, #8]
   1484c:	9101      	str	r1, [sp, #4]
   1484e:	d004      	beq.n	1485a <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x4a>
   14850:	e7ff      	b.n	14852 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>
   14852:	9802      	ldr	r0, [sp, #8]
   14854:	9901      	ldr	r1, [sp, #4]
   14856:	b008      	add	sp, #32
   14858:	4770      	bx	lr
   1485a:	e7fa      	b.n	14852 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>

0001485c <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>:
   1485c:	b580      	push	{r7, lr}
   1485e:	b082      	sub	sp, #8
   14860:	9001      	str	r0, [sp, #4]
   14862:	f000 f82b 	bl	148bc <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>
   14866:	9000      	str	r0, [sp, #0]
   14868:	e7ff      	b.n	1486a <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E+0xe>
   1486a:	2001      	movs	r0, #1
   1486c:	9900      	ldr	r1, [sp, #0]
   1486e:	4388      	bics	r0, r1
   14870:	b002      	add	sp, #8
   14872:	bd80      	pop	{r7, pc}

00014874 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>:
   14874:	b082      	sub	sp, #8
   14876:	9001      	str	r0, [sp, #4]
   14878:	6800      	ldr	r0, [r0, #0]
   1487a:	2800      	cmp	r0, #0
   1487c:	d104      	bne.n	14888 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x14>
   1487e:	e7ff      	b.n	14880 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0xc>
   14880:	2000      	movs	r0, #0
   14882:	f88d 0003 	strb.w	r0, [sp, #3]
   14886:	e003      	b.n	14890 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   14888:	2001      	movs	r0, #1
   1488a:	f88d 0003 	strb.w	r0, [sp, #3]
   1488e:	e7ff      	b.n	14890 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   14890:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14894:	b002      	add	sp, #8
   14896:	4770      	bx	lr

00014898 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E>:
   14898:	b082      	sub	sp, #8
   1489a:	9001      	str	r0, [sp, #4]
   1489c:	6800      	ldr	r0, [r0, #0]
   1489e:	2801      	cmp	r0, #1
   148a0:	d004      	beq.n	148ac <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x14>
   148a2:	e7ff      	b.n	148a4 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0xc>
   148a4:	2000      	movs	r0, #0
   148a6:	f88d 0003 	strb.w	r0, [sp, #3]
   148aa:	e003      	b.n	148b4 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x1c>
   148ac:	2001      	movs	r0, #1
   148ae:	f88d 0003 	strb.w	r0, [sp, #3]
   148b2:	e7ff      	b.n	148b4 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x1c>
   148b4:	f89d 0003 	ldrb.w	r0, [sp, #3]
   148b8:	b002      	add	sp, #8
   148ba:	4770      	bx	lr

000148bc <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>:
   148bc:	b082      	sub	sp, #8
   148be:	9001      	str	r0, [sp, #4]
   148c0:	8800      	ldrh	r0, [r0, #0]
   148c2:	2801      	cmp	r0, #1
   148c4:	d004      	beq.n	148d0 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x14>
   148c6:	e7ff      	b.n	148c8 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0xc>
   148c8:	2000      	movs	r0, #0
   148ca:	f88d 0003 	strb.w	r0, [sp, #3]
   148ce:	e003      	b.n	148d8 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x1c>
   148d0:	2001      	movs	r0, #1
   148d2:	f88d 0003 	strb.w	r0, [sp, #3]
   148d6:	e7ff      	b.n	148d8 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x1c>
   148d8:	f89d 0003 	ldrb.w	r0, [sp, #3]
   148dc:	b002      	add	sp, #8
   148de:	4770      	bx	lr

000148e0 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>:
   148e0:	b580      	push	{r7, lr}
   148e2:	b086      	sub	sp, #24
   148e4:	9000      	str	r0, [sp, #0]
   148e6:	2000      	movs	r0, #0
   148e8:	f88d 000f 	strb.w	r0, [sp, #15]
   148ec:	f88d 000e 	strb.w	r0, [sp, #14]
   148f0:	2001      	movs	r0, #1
   148f2:	f88d 000f 	strb.w	r0, [sp, #15]
   148f6:	f88d 000e 	strb.w	r0, [sp, #14]
   148fa:	9800      	ldr	r0, [sp, #0]
   148fc:	2800      	cmp	r0, #0
   148fe:	4601      	mov	r1, r0
   14900:	bf18      	it	ne
   14902:	2101      	movne	r1, #1
   14904:	2800      	cmp	r0, #0
   14906:	d001      	beq.n	1490c <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2c>
   14908:	e7ff      	b.n	1490a <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2a>
   1490a:	e004      	b.n	14916 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x36>
   1490c:	2000      	movs	r0, #0
   1490e:	f88d 0004 	strb.w	r0, [sp, #4]
   14912:	e019      	b.n	14948 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   14914:	defe      	udf	#254	; 0xfe
   14916:	2000      	movs	r0, #0
   14918:	f88d 000f 	strb.w	r0, [sp, #15]
   1491c:	9900      	ldr	r1, [sp, #0]
   1491e:	9105      	str	r1, [sp, #20]
   14920:	f88d 000e 	strb.w	r0, [sp, #14]
   14924:	9102      	str	r1, [sp, #8]
   14926:	9802      	ldr	r0, [sp, #8]
   14928:	f7f5 fedd 	bl	a6e6 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>
   1492c:	f88d 1005 	strb.w	r1, [sp, #5]
   14930:	f88d 0004 	strb.w	r0, [sp, #4]
   14934:	e7ff      	b.n	14936 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x56>
   14936:	e007      	b.n	14948 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   14938:	9800      	ldr	r0, [sp, #0]
   1493a:	2800      	cmp	r0, #0
   1493c:	d110      	bne.n	14960 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x80>
   1493e:	e019      	b.n	14974 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x94>
   14940:	2000      	movs	r0, #0
   14942:	f88d 000e 	strb.w	r0, [sp, #14]
   14946:	e7f7      	b.n	14938 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   14948:	f89d 000e 	ldrb.w	r0, [sp, #14]
   1494c:	07c0      	lsls	r0, r0, #31
   1494e:	2800      	cmp	r0, #0
   14950:	d1f6      	bne.n	14940 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x60>
   14952:	e7f1      	b.n	14938 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   14954:	f89d 0004 	ldrb.w	r0, [sp, #4]
   14958:	f89d 1005 	ldrb.w	r1, [sp, #5]
   1495c:	b006      	add	sp, #24
   1495e:	bd80      	pop	{r7, pc}
   14960:	f89d 000f 	ldrb.w	r0, [sp, #15]
   14964:	07c0      	lsls	r0, r0, #31
   14966:	2800      	cmp	r0, #0
   14968:	d0f4      	beq.n	14954 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   1496a:	e7ff      	b.n	1496c <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x8c>
   1496c:	2000      	movs	r0, #0
   1496e:	f88d 000f 	strb.w	r0, [sp, #15]
   14972:	e7ef      	b.n	14954 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   14974:	e7ee      	b.n	14954 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>

00014976 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>:
    fn clone(&self) -> Self {
   14976:	b580      	push	{r7, lr}
   14978:	b09c      	sub	sp, #112	; 0x70
   1497a:	911b      	str	r1, [sp, #108]	; 0x6c
   1497c:	aa01      	add	r2, sp, #4
        Vec(self.0.clone())
   1497e:	9000      	str	r0, [sp, #0]
   14980:	4610      	mov	r0, r2
   14982:	f000 fafc 	bl	14f7e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE>
   14986:	e7ff      	b.n	14988 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE+0x12>
   14988:	a901      	add	r1, sp, #4
   1498a:	2268      	movs	r2, #104	; 0x68
   1498c:	9800      	ldr	r0, [sp, #0]
   1498e:	f009 fbbf 	bl	1e110 <__aeabi_memcpy>
    }
   14992:	b01c      	add	sp, #112	; 0x70
   14994:	bd80      	pop	{r7, pc}

00014996 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>:
    fn clone(&self) -> Self {
   14996:	b580      	push	{r7, lr}
   14998:	b0b6      	sub	sp, #216	; 0xd8
   1499a:	9135      	str	r1, [sp, #212]	; 0xd4
   1499c:	aa02      	add	r2, sp, #8
        Vec(self.0.clone())
   1499e:	9001      	str	r0, [sp, #4]
   149a0:	4610      	mov	r0, r2
   149a2:	f000 fb14 	bl	14fce <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E>
   149a6:	e7ff      	b.n	149a8 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E+0x12>
   149a8:	a902      	add	r1, sp, #8
   149aa:	22cc      	movs	r2, #204	; 0xcc
   149ac:	9801      	ldr	r0, [sp, #4]
   149ae:	f009 fbaf 	bl	1e110 <__aeabi_memcpy>
    }
   149b2:	b036      	add	sp, #216	; 0xd8
   149b4:	bd80      	pop	{r7, pc}

000149b6 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E>:
    fn drop(&mut self) {
   149b6:	b580      	push	{r7, lr}
   149b8:	b084      	sub	sp, #16
   149ba:	9003      	str	r0, [sp, #12]
        unsafe { ptr::drop_in_place(&mut self[..]) }
   149bc:	f000 f84c 	bl	14a58 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E>
   149c0:	9002      	str	r0, [sp, #8]
   149c2:	9101      	str	r1, [sp, #4]
   149c4:	e7ff      	b.n	149c6 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x10>
   149c6:	9802      	ldr	r0, [sp, #8]
   149c8:	9901      	ldr	r1, [sp, #4]
   149ca:	f001 fb7b 	bl	160c4 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>
   149ce:	e7ff      	b.n	149d0 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x1a>
   149d0:	e7ff      	b.n	149d2 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x1c>
    }
   149d2:	b004      	add	sp, #16
   149d4:	bd80      	pop	{r7, pc}

000149d6 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E>:
    fn drop(&mut self) {
   149d6:	b580      	push	{r7, lr}
   149d8:	b084      	sub	sp, #16
   149da:	9003      	str	r0, [sp, #12]
        unsafe { ptr::drop_in_place(&mut self[..]) }
   149dc:	f000 f848 	bl	14a70 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>
   149e0:	9002      	str	r0, [sp, #8]
   149e2:	9101      	str	r1, [sp, #4]
   149e4:	e7ff      	b.n	149e6 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x10>
   149e6:	9802      	ldr	r0, [sp, #8]
   149e8:	9901      	ldr	r1, [sp, #4]
   149ea:	f001 fb6b 	bl	160c4 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>
   149ee:	e7ff      	b.n	149f0 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x1a>
   149f0:	e7ff      	b.n	149f2 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x1c>
    }
   149f2:	b004      	add	sp, #16
   149f4:	bd80      	pop	{r7, pc}

000149f6 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>:
    fn deref(&self) -> &[T] {
   149f6:	b580      	push	{r7, lr}
   149f8:	b084      	sub	sp, #16
   149fa:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   149fc:	f000 fb0f 	bl	1501e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>
   14a00:	9002      	str	r0, [sp, #8]
   14a02:	9101      	str	r1, [sp, #4]
   14a04:	e7ff      	b.n	14a06 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E+0x10>
    }
   14a06:	9802      	ldr	r0, [sp, #8]
   14a08:	9901      	ldr	r1, [sp, #4]
   14a0a:	b004      	add	sp, #16
   14a0c:	bd80      	pop	{r7, pc}

00014a0e <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E>:
    fn deref(&self) -> &[T] {
   14a0e:	b580      	push	{r7, lr}
   14a10:	b084      	sub	sp, #16
   14a12:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   14a14:	f000 fb18 	bl	15048 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>
   14a18:	9002      	str	r0, [sp, #8]
   14a1a:	9101      	str	r1, [sp, #4]
   14a1c:	e7ff      	b.n	14a1e <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E+0x10>
    }
   14a1e:	9802      	ldr	r0, [sp, #8]
   14a20:	9901      	ldr	r1, [sp, #4]
   14a22:	b004      	add	sp, #16
   14a24:	bd80      	pop	{r7, pc}

00014a26 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E>:
    fn drop(&mut self) {
   14a26:	b580      	push	{r7, lr}
   14a28:	b086      	sub	sp, #24
   14a2a:	9005      	str	r0, [sp, #20]
            ptr::drop_in_place(&mut self.vec[self.next..]);
   14a2c:	9003      	str	r0, [sp, #12]
   14a2e:	f000 f81f 	bl	14a70 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>
   14a32:	9002      	str	r0, [sp, #8]
   14a34:	9101      	str	r1, [sp, #4]
   14a36:	e7ff      	b.n	14a38 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x12>
   14a38:	9803      	ldr	r0, [sp, #12]
   14a3a:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   14a3e:	9104      	str	r1, [sp, #16]
   14a40:	9a04      	ldr	r2, [sp, #16]
   14a42:	9802      	ldr	r0, [sp, #8]
   14a44:	9901      	ldr	r1, [sp, #4]
   14a46:	f001 fb4a 	bl	160de <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E>
   14a4a:	e7ff      	b.n	14a4c <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x26>
   14a4c:	e7ff      	b.n	14a4e <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x28>
   14a4e:	2000      	movs	r0, #0
            self.vec.0.len = 0;
   14a50:	9903      	ldr	r1, [sp, #12]
   14a52:	6008      	str	r0, [r1, #0]
    }
   14a54:	b006      	add	sp, #24
   14a56:	bd80      	pop	{r7, pc}

00014a58 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E>:

impl<T, N> ops::DerefMut for Vec<T, N>
where
    N: ArrayLength<T>,
{
    fn deref_mut(&mut self) -> &mut [T] {
   14a58:	b580      	push	{r7, lr}
   14a5a:	b084      	sub	sp, #16
   14a5c:	9003      	str	r0, [sp, #12]
        self.0.as_mut_slice()
   14a5e:	f000 f8ff 	bl	14c60 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>
   14a62:	9002      	str	r0, [sp, #8]
   14a64:	9101      	str	r1, [sp, #4]
   14a66:	e7ff      	b.n	14a68 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E+0x10>
    }
   14a68:	9802      	ldr	r0, [sp, #8]
   14a6a:	9901      	ldr	r1, [sp, #4]
   14a6c:	b004      	add	sp, #16
   14a6e:	bd80      	pop	{r7, pc}

00014a70 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>:
    fn deref_mut(&mut self) -> &mut [T] {
   14a70:	b580      	push	{r7, lr}
   14a72:	b084      	sub	sp, #16
   14a74:	9003      	str	r0, [sp, #12]
        self.0.as_mut_slice()
   14a76:	f000 f908 	bl	14c8a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>
   14a7a:	9002      	str	r0, [sp, #8]
   14a7c:	9101      	str	r1, [sp, #4]
   14a7e:	e7ff      	b.n	14a80 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E+0x10>
    }
   14a80:	9802      	ldr	r0, [sp, #8]
   14a82:	9901      	ldr	r1, [sp, #4]
   14a84:	b004      	add	sp, #16
   14a86:	bd80      	pop	{r7, pc}

00014a88 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>:
    pub fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   14a88:	b580      	push	{r7, lr}
   14a8a:	b084      	sub	sp, #16
   14a8c:	9001      	str	r0, [sp, #4]
   14a8e:	9102      	str	r1, [sp, #8]
   14a90:	9203      	str	r2, [sp, #12]
        self.0.extend_from_slice(other)
   14a92:	f000 f973 	bl	14d7c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>
   14a96:	9000      	str	r0, [sp, #0]
   14a98:	e7ff      	b.n	14a9a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE+0x12>
    }
   14a9a:	9800      	ldr	r0, [sp, #0]
   14a9c:	f000 0001 	and.w	r0, r0, #1
   14aa0:	b004      	add	sp, #16
   14aa2:	bd80      	pop	{r7, pc}

00014aa4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E>:
    pub fn new() -> Self {
   14aa4:	b580      	push	{r7, lr}
   14aa6:	b09c      	sub	sp, #112	; 0x70
   14aa8:	a902      	add	r1, sp, #8
        Vec(crate::i::Vec::new())
   14aaa:	9001      	str	r0, [sp, #4]
   14aac:	4608      	mov	r0, r1
   14aae:	f000 f8c8 	bl	14c42 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>
   14ab2:	e7ff      	b.n	14ab4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E+0x10>
   14ab4:	a902      	add	r1, sp, #8
   14ab6:	2268      	movs	r2, #104	; 0x68
   14ab8:	9801      	ldr	r0, [sp, #4]
   14aba:	f009 fb29 	bl	1e110 <__aeabi_memcpy>
    }
   14abe:	b01c      	add	sp, #112	; 0x70
   14ac0:	bd80      	pop	{r7, pc}

00014ac2 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE>:
    pub fn new() -> Self {
   14ac2:	b580      	push	{r7, lr}
   14ac4:	b0b4      	sub	sp, #208	; 0xd0
   14ac6:	a901      	add	r1, sp, #4
        Vec(crate::i::Vec::new())
   14ac8:	9000      	str	r0, [sp, #0]
   14aca:	4608      	mov	r0, r1
   14acc:	f000 f8aa 	bl	14c24 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>
   14ad0:	e7ff      	b.n	14ad2 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE+0x10>
   14ad2:	a901      	add	r1, sp, #4
   14ad4:	22cc      	movs	r2, #204	; 0xcc
   14ad6:	9800      	ldr	r0, [sp, #0]
   14ad8:	f009 fb1a 	bl	1e110 <__aeabi_memcpy>
    }
   14adc:	b034      	add	sp, #208	; 0xd0
   14ade:	bd80      	pop	{r7, pc}

00014ae0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>:
    pub fn push(&mut self, item: T) -> Result<(), T> {
   14ae0:	b580      	push	{r7, lr}
   14ae2:	b086      	sub	sp, #24
   14ae4:	460a      	mov	r2, r1
   14ae6:	9004      	str	r0, [sp, #16]
   14ae8:	f8ad 1016 	strh.w	r1, [sp, #22]
        self.0.push(item)
   14aec:	9203      	str	r2, [sp, #12]
   14aee:	f000 fa0b 	bl	14f08 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E>
   14af2:	9002      	str	r0, [sp, #8]
   14af4:	9101      	str	r1, [sp, #4]
   14af6:	e7ff      	b.n	14af8 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE+0x18>
    }
   14af8:	9802      	ldr	r0, [sp, #8]
   14afa:	9901      	ldr	r1, [sp, #4]
   14afc:	b006      	add	sp, #24
   14afe:	bd80      	pop	{r7, pc}

00014b00 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>:
    pub fn clear(&mut self) {
   14b00:	b580      	push	{r7, lr}
   14b02:	b082      	sub	sp, #8
   14b04:	9001      	str	r0, [sp, #4]
        self.0.clear()
   14b06:	f000 fa28 	bl	14f5a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE>
   14b0a:	e7ff      	b.n	14b0c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E+0xc>
    }
   14b0c:	b002      	add	sp, #8
   14b0e:	bd80      	pop	{r7, pc}

00014b10 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>:
    pub fn clear(&mut self) {
   14b10:	b580      	push	{r7, lr}
   14b12:	b082      	sub	sp, #8
   14b14:	9001      	str	r0, [sp, #4]
        self.0.clear()
   14b16:	f000 fa29 	bl	14f6c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E>
   14b1a:	e7ff      	b.n	14b1c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E+0xc>
    }
   14b1c:	b002      	add	sp, #8
   14b1e:	bd80      	pop	{r7, pc}

00014b20 <_ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE>:
    fn into_iter(self) -> Self::IntoIter {
   14b20:	b580      	push	{r7, lr}
   14b22:	b0b6      	sub	sp, #216	; 0xd8
   14b24:	aa03      	add	r2, sp, #12
   14b26:	23cc      	movs	r3, #204	; 0xcc
        IntoIter { vec: self, next: 0 }
   14b28:	9002      	str	r0, [sp, #8]
   14b2a:	4610      	mov	r0, r2
   14b2c:	9201      	str	r2, [sp, #4]
   14b2e:	461a      	mov	r2, r3
   14b30:	9300      	str	r3, [sp, #0]
   14b32:	f009 faed 	bl	1e110 <__aeabi_memcpy>
   14b36:	9802      	ldr	r0, [sp, #8]
   14b38:	9901      	ldr	r1, [sp, #4]
   14b3a:	9a00      	ldr	r2, [sp, #0]
   14b3c:	f009 fae8 	bl	1e110 <__aeabi_memcpy>
   14b40:	2000      	movs	r0, #0
   14b42:	9902      	ldr	r1, [sp, #8]
   14b44:	f8c1 00cc 	str.w	r0, [r1, #204]	; 0xcc
    }
   14b48:	b036      	add	sp, #216	; 0xd8
   14b4a:	bd80      	pop	{r7, pc}

00014b4c <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E>:
    fn next(&mut self) -> Option<Self::Item> {
   14b4c:	b580      	push	{r7, lr}
   14b4e:	b08e      	sub	sp, #56	; 0x38
   14b50:	900a      	str	r0, [sp, #40]	; 0x28
        if self.next < self.vec.len() {
   14b52:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   14b56:	9008      	str	r0, [sp, #32]
   14b58:	9107      	str	r1, [sp, #28]
   14b5a:	f7ff ff58 	bl	14a0e <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E>
   14b5e:	9006      	str	r0, [sp, #24]
   14b60:	9105      	str	r1, [sp, #20]
   14b62:	e7ff      	b.n	14b64 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x18>
   14b64:	9806      	ldr	r0, [sp, #24]
   14b66:	9905      	ldr	r1, [sp, #20]
   14b68:	f001 fa59 	bl	1601e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   14b6c:	9004      	str	r0, [sp, #16]
   14b6e:	e7ff      	b.n	14b70 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x24>
   14b70:	9807      	ldr	r0, [sp, #28]
   14b72:	9904      	ldr	r1, [sp, #16]
   14b74:	4288      	cmp	r0, r1
   14b76:	d304      	bcc.n	14b82 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x36>
   14b78:	e7ff      	b.n	14b7a <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x2e>
   14b7a:	2000      	movs	r0, #0
            None
   14b7c:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
        if self.next < self.vec.len() {
   14b80:	e029      	b.n	14bd6 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x8a>
                (self.vec.0.buffer.as_ptr() as *const T)
   14b82:	9808      	ldr	r0, [sp, #32]
   14b84:	1d01      	adds	r1, r0, #4
   14b86:	910c      	str	r1, [sp, #48]	; 0x30
   14b88:	910d      	str	r1, [sp, #52]	; 0x34
   14b8a:	9103      	str	r1, [sp, #12]
   14b8c:	e7ff      	b.n	14b8e <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x42>
                    .add(self.next)
   14b8e:	9808      	ldr	r0, [sp, #32]
   14b90:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
                (self.vec.0.buffer.as_ptr() as *const T)
   14b94:	9803      	ldr	r0, [sp, #12]
   14b96:	f002 fc0c 	bl	173b2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>
   14b9a:	9002      	str	r0, [sp, #8]
   14b9c:	e7ff      	b.n	14b9e <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x52>
   14b9e:	9802      	ldr	r0, [sp, #8]
   14ba0:	f002 fc12 	bl	173c8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E>
   14ba4:	4601      	mov	r1, r0
   14ba6:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
   14baa:	9101      	str	r1, [sp, #4]
   14bac:	e7ff      	b.n	14bae <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x62>
            self.next += 1;
   14bae:	9808      	ldr	r0, [sp, #32]
   14bb0:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   14bb4:	1c4a      	adds	r2, r1, #1
   14bb6:	4613      	mov	r3, r2
   14bb8:	428a      	cmp	r2, r1
   14bba:	9300      	str	r3, [sp, #0]
   14bbc:	d311      	bcc.n	14be2 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x96>
   14bbe:	e7ff      	b.n	14bc0 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x74>
   14bc0:	9800      	ldr	r0, [sp, #0]
   14bc2:	9908      	ldr	r1, [sp, #32]
   14bc4:	f8c1 00cc 	str.w	r0, [r1, #204]	; 0xcc
            Some(item)
   14bc8:	9a01      	ldr	r2, [sp, #4]
   14bca:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
   14bce:	2301      	movs	r3, #1
   14bd0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        if self.next < self.vec.len() {
   14bd4:	e7ff      	b.n	14bd6 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x8a>
    }
   14bd6:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   14bda:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
   14bde:	b00e      	add	sp, #56	; 0x38
   14be0:	bd80      	pop	{r7, pc}
            self.next += 1;
   14be2:	f640 6090 	movw	r0, #3728	; 0xe90
   14be6:	f2c0 0002 	movt	r0, #2
   14bea:	f640 6274 	movw	r2, #3700	; 0xe74
   14bee:	f2c0 0202 	movt	r2, #2
   14bf2:	211c      	movs	r1, #28
   14bf4:	f002 feb8 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14bf8:	defe      	udf	#254	; 0xfe

00014bfa <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE>:
   14bfa:	b580      	push	{r7, lr}
   14bfc:	b084      	sub	sp, #16
   14bfe:	9002      	str	r0, [sp, #8]
   14c00:	9103      	str	r1, [sp, #12]
   14c02:	f640 60ac 	movw	r0, #3756	; 0xeac
   14c06:	f2c0 0002 	movt	r0, #2
   14c0a:	2202      	movs	r2, #2
   14c0c:	9001      	str	r0, [sp, #4]
   14c0e:	4608      	mov	r0, r1
   14c10:	9901      	ldr	r1, [sp, #4]
   14c12:	f003 fbc9 	bl	183a8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>
   14c16:	9000      	str	r0, [sp, #0]
   14c18:	e7ff      	b.n	14c1a <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE+0x20>
   14c1a:	9800      	ldr	r0, [sp, #0]
   14c1c:	f000 0001 	and.w	r0, r0, #1
   14c20:	b004      	add	sp, #16
   14c22:	bd80      	pop	{r7, pc}

00014c24 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>:
    pub const fn new() -> Self {
   14c24:	b580      	push	{r7, lr}
   14c26:	b0b4      	sub	sp, #208	; 0xd0
            buffer: MaybeUninit::uninit(),
   14c28:	9001      	str	r0, [sp, #4]
   14c2a:	e7ff      	b.n	14c2c <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE+0x8>
        Self {
   14c2c:	9801      	ldr	r0, [sp, #4]
   14c2e:	3004      	adds	r0, #4
   14c30:	a902      	add	r1, sp, #8
   14c32:	22c8      	movs	r2, #200	; 0xc8
   14c34:	f009 fa6c 	bl	1e110 <__aeabi_memcpy>
   14c38:	2100      	movs	r1, #0
   14c3a:	9a01      	ldr	r2, [sp, #4]
   14c3c:	6011      	str	r1, [r2, #0]
    }
   14c3e:	b034      	add	sp, #208	; 0xd0
   14c40:	bd80      	pop	{r7, pc}

00014c42 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>:
    pub const fn new() -> Self {
   14c42:	b580      	push	{r7, lr}
   14c44:	b09a      	sub	sp, #104	; 0x68
            buffer: MaybeUninit::uninit(),
   14c46:	9000      	str	r0, [sp, #0]
   14c48:	e7ff      	b.n	14c4a <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE+0x8>
        Self {
   14c4a:	9800      	ldr	r0, [sp, #0]
   14c4c:	3004      	adds	r0, #4
   14c4e:	a901      	add	r1, sp, #4
   14c50:	2264      	movs	r2, #100	; 0x64
   14c52:	f009 fa5d 	bl	1e110 <__aeabi_memcpy>
   14c56:	2100      	movs	r1, #0
   14c58:	9a00      	ldr	r2, [sp, #0]
   14c5a:	6011      	str	r1, [r2, #0]
    }
   14c5c:	b01a      	add	sp, #104	; 0x68
   14c5e:	bd80      	pop	{r7, pc}

00014c60 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   14c60:	b580      	push	{r7, lr}
   14c62:	b088      	sub	sp, #32
   14c64:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   14c66:	1d01      	adds	r1, r0, #4
   14c68:	9106      	str	r1, [sp, #24]
   14c6a:	9107      	str	r1, [sp, #28]
   14c6c:	9004      	str	r0, [sp, #16]
   14c6e:	9103      	str	r1, [sp, #12]
   14c70:	e7ff      	b.n	14c72 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E+0x12>
   14c72:	9804      	ldr	r0, [sp, #16]
   14c74:	6801      	ldr	r1, [r0, #0]
   14c76:	9803      	ldr	r0, [sp, #12]
   14c78:	f001 f9ad 	bl	15fd6 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   14c7c:	9002      	str	r0, [sp, #8]
   14c7e:	9101      	str	r1, [sp, #4]
   14c80:	e7ff      	b.n	14c82 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E+0x22>
    }
   14c82:	9802      	ldr	r0, [sp, #8]
   14c84:	9901      	ldr	r1, [sp, #4]
   14c86:	b008      	add	sp, #32
   14c88:	bd80      	pop	{r7, pc}

00014c8a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   14c8a:	b580      	push	{r7, lr}
   14c8c:	b088      	sub	sp, #32
   14c8e:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   14c90:	1d01      	adds	r1, r0, #4
   14c92:	9106      	str	r1, [sp, #24]
   14c94:	9107      	str	r1, [sp, #28]
   14c96:	9004      	str	r0, [sp, #16]
   14c98:	9103      	str	r1, [sp, #12]
   14c9a:	e7ff      	b.n	14c9c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE+0x12>
   14c9c:	9804      	ldr	r0, [sp, #16]
   14c9e:	6801      	ldr	r1, [r0, #0]
   14ca0:	9803      	ldr	r0, [sp, #12]
   14ca2:	f001 f998 	bl	15fd6 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   14ca6:	9002      	str	r0, [sp, #8]
   14ca8:	9101      	str	r1, [sp, #4]
   14caa:	e7ff      	b.n	14cac <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE+0x22>
    }
   14cac:	9802      	ldr	r0, [sp, #8]
   14cae:	9901      	ldr	r1, [sp, #4]
   14cb0:	b008      	add	sp, #32
   14cb2:	bd80      	pop	{r7, pc}

00014cb4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   14cb4:	b580      	push	{r7, lr}
   14cb6:	b08a      	sub	sp, #40	; 0x28
   14cb8:	460a      	mov	r2, r1
   14cba:	9006      	str	r0, [sp, #24]
   14cbc:	f8ad 101e 	strh.w	r1, [sp, #30]
        (self.buffer.as_mut_ptr() as *mut T)
   14cc0:	1d01      	adds	r1, r0, #4
   14cc2:	9108      	str	r1, [sp, #32]
   14cc4:	9109      	str	r1, [sp, #36]	; 0x24
   14cc6:	9005      	str	r0, [sp, #20]
   14cc8:	9204      	str	r2, [sp, #16]
   14cca:	9103      	str	r1, [sp, #12]
   14ccc:	e7ff      	b.n	14cce <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x1a>
            .add(self.len)
   14cce:	9805      	ldr	r0, [sp, #20]
   14cd0:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   14cd2:	9803      	ldr	r0, [sp, #12]
   14cd4:	f001 fa9c 	bl	16210 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   14cd8:	9002      	str	r0, [sp, #8]
   14cda:	e7ff      	b.n	14cdc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x28>
   14cdc:	9802      	ldr	r0, [sp, #8]
   14cde:	9904      	ldr	r1, [sp, #16]
   14ce0:	f001 faa1 	bl	16226 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>
   14ce4:	e7ff      	b.n	14ce6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x32>
        self.len += 1;
   14ce6:	9805      	ldr	r0, [sp, #20]
   14ce8:	6801      	ldr	r1, [r0, #0]
   14cea:	1c4a      	adds	r2, r1, #1
   14cec:	4613      	mov	r3, r2
   14cee:	428a      	cmp	r2, r1
   14cf0:	9301      	str	r3, [sp, #4]
   14cf2:	d305      	bcc.n	14d00 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x4c>
   14cf4:	e7ff      	b.n	14cf6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x42>
   14cf6:	9801      	ldr	r0, [sp, #4]
   14cf8:	9905      	ldr	r1, [sp, #20]
   14cfa:	6008      	str	r0, [r1, #0]
    }
   14cfc:	b00a      	add	sp, #40	; 0x28
   14cfe:	bd80      	pop	{r7, pc}
        self.len += 1;
   14d00:	f640 7050 	movw	r0, #3920	; 0xf50
   14d04:	f2c0 0002 	movt	r0, #2
   14d08:	f640 7234 	movw	r2, #3892	; 0xf34
   14d0c:	f2c0 0202 	movt	r2, #2
   14d10:	211c      	movs	r1, #28
   14d12:	f002 fe29 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14d16:	defe      	udf	#254	; 0xfe

00014d18 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   14d18:	b580      	push	{r7, lr}
   14d1a:	b08a      	sub	sp, #40	; 0x28
   14d1c:	460a      	mov	r2, r1
   14d1e:	9006      	str	r0, [sp, #24]
   14d20:	f8ad 101e 	strh.w	r1, [sp, #30]
        (self.buffer.as_mut_ptr() as *mut T)
   14d24:	1d01      	adds	r1, r0, #4
   14d26:	9108      	str	r1, [sp, #32]
   14d28:	9109      	str	r1, [sp, #36]	; 0x24
   14d2a:	9005      	str	r0, [sp, #20]
   14d2c:	9204      	str	r2, [sp, #16]
   14d2e:	9103      	str	r1, [sp, #12]
   14d30:	e7ff      	b.n	14d32 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x1a>
            .add(self.len)
   14d32:	9805      	ldr	r0, [sp, #20]
   14d34:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   14d36:	9803      	ldr	r0, [sp, #12]
   14d38:	f001 fa6a 	bl	16210 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   14d3c:	9002      	str	r0, [sp, #8]
   14d3e:	e7ff      	b.n	14d40 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x28>
   14d40:	9802      	ldr	r0, [sp, #8]
   14d42:	9904      	ldr	r1, [sp, #16]
   14d44:	f001 fa6f 	bl	16226 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>
   14d48:	e7ff      	b.n	14d4a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x32>
        self.len += 1;
   14d4a:	9805      	ldr	r0, [sp, #20]
   14d4c:	6801      	ldr	r1, [r0, #0]
   14d4e:	1c4a      	adds	r2, r1, #1
   14d50:	4613      	mov	r3, r2
   14d52:	428a      	cmp	r2, r1
   14d54:	9301      	str	r3, [sp, #4]
   14d56:	d305      	bcc.n	14d64 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x4c>
   14d58:	e7ff      	b.n	14d5a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x42>
   14d5a:	9801      	ldr	r0, [sp, #4]
   14d5c:	9905      	ldr	r1, [sp, #20]
   14d5e:	6008      	str	r0, [r1, #0]
    }
   14d60:	b00a      	add	sp, #40	; 0x28
   14d62:	bd80      	pop	{r7, pc}
        self.len += 1;
   14d64:	f640 7050 	movw	r0, #3920	; 0xf50
   14d68:	f2c0 0002 	movt	r0, #2
   14d6c:	f640 7234 	movw	r2, #3892	; 0xf34
   14d70:	f2c0 0202 	movt	r2, #2
   14d74:	211c      	movs	r1, #28
   14d76:	f002 fdf7 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14d7a:	defe      	udf	#254	; 0xfe

00014d7c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   14d7c:	b580      	push	{r7, lr}
   14d7e:	b094      	sub	sp, #80	; 0x50
   14d80:	900e      	str	r0, [sp, #56]	; 0x38
   14d82:	910f      	str	r1, [sp, #60]	; 0x3c
   14d84:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   14d86:	6803      	ldr	r3, [r0, #0]
   14d88:	9009      	str	r0, [sp, #36]	; 0x24
   14d8a:	4608      	mov	r0, r1
   14d8c:	9108      	str	r1, [sp, #32]
   14d8e:	4611      	mov	r1, r2
   14d90:	9207      	str	r2, [sp, #28]
   14d92:	9306      	str	r3, [sp, #24]
   14d94:	f001 f943 	bl	1601e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   14d98:	9005      	str	r0, [sp, #20]
   14d9a:	e7ff      	b.n	14d9c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x20>
   14d9c:	9806      	ldr	r0, [sp, #24]
   14d9e:	9905      	ldr	r1, [sp, #20]
   14da0:	1842      	adds	r2, r0, r1
   14da2:	4613      	mov	r3, r2
   14da4:	4282      	cmp	r2, r0
   14da6:	9304      	str	r3, [sp, #16]
   14da8:	d33f      	bcc.n	14e2a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xae>
   14daa:	e7ff      	b.n	14dac <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x30>
   14dac:	9809      	ldr	r0, [sp, #36]	; 0x24
   14dae:	f000 f96a 	bl	15086 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E>
   14db2:	9003      	str	r0, [sp, #12]
   14db4:	e7ff      	b.n	14db6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x3a>
   14db6:	9804      	ldr	r0, [sp, #16]
   14db8:	9903      	ldr	r1, [sp, #12]
   14dba:	4288      	cmp	r0, r1
   14dbc:	d807      	bhi.n	14dce <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x52>
   14dbe:	e7ff      	b.n	14dc0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x44>
            for elem in other {
   14dc0:	9808      	ldr	r0, [sp, #32]
   14dc2:	9907      	ldr	r1, [sp, #28]
   14dc4:	f001 f99f 	bl	16106 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>
   14dc8:	9002      	str	r0, [sp, #8]
   14dca:	9101      	str	r1, [sp, #4]
   14dcc:	e003      	b.n	14dd6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x5a>
   14dce:	2001      	movs	r0, #1
            Err(())
   14dd0:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   14dd4:	e025      	b.n	14e22 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa6>
            for elem in other {
   14dd6:	9802      	ldr	r0, [sp, #8]
   14dd8:	900b      	str	r0, [sp, #44]	; 0x2c
   14dda:	9901      	ldr	r1, [sp, #4]
   14ddc:	910c      	str	r1, [sp, #48]	; 0x30
   14dde:	e7ff      	b.n	14de0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x64>
   14de0:	a80b      	add	r0, sp, #44	; 0x2c
   14de2:	f001 f9b2 	bl	1614a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>
   14de6:	900d      	str	r0, [sp, #52]	; 0x34
   14de8:	e7ff      	b.n	14dea <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x6e>
   14dea:	980d      	ldr	r0, [sp, #52]	; 0x34
   14dec:	2800      	cmp	r0, #0
   14dee:	4601      	mov	r1, r0
   14df0:	bf18      	it	ne
   14df2:	2101      	movne	r1, #1
   14df4:	2800      	cmp	r0, #0
   14df6:	d001      	beq.n	14dfc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x80>
   14df8:	e7ff      	b.n	14dfa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x7e>
   14dfa:	e004      	b.n	14e06 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x8a>
   14dfc:	2000      	movs	r0, #0
            Ok(())
   14dfe:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   14e02:	e00e      	b.n	14e22 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa6>
            for elem in other {
   14e04:	defe      	udf	#254	; 0xfe
   14e06:	980d      	ldr	r0, [sp, #52]	; 0x34
   14e08:	9011      	str	r0, [sp, #68]	; 0x44
   14e0a:	9012      	str	r0, [sp, #72]	; 0x48
   14e0c:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   14e0e:	f001 f856 	bl	15ebe <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>
   14e12:	9000      	str	r0, [sp, #0]
   14e14:	e7ff      	b.n	14e16 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x9a>
   14e16:	9809      	ldr	r0, [sp, #36]	; 0x24
   14e18:	9900      	ldr	r1, [sp, #0]
   14e1a:	f7ff ff4b 	bl	14cb4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE>
   14e1e:	e7ff      	b.n	14e20 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa4>
            for elem in other {
   14e20:	e7de      	b.n	14de0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x64>
    }
   14e22:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   14e26:	b014      	add	sp, #80	; 0x50
   14e28:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   14e2a:	f640 7050 	movw	r0, #3920	; 0xf50
   14e2e:	f2c0 0002 	movt	r0, #2
   14e32:	f640 726c 	movw	r2, #3948	; 0xf6c
   14e36:	f2c0 0202 	movt	r2, #2
   14e3a:	211c      	movs	r1, #28
   14e3c:	f002 fd94 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14e40:	defe      	udf	#254	; 0xfe

00014e42 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   14e42:	b580      	push	{r7, lr}
   14e44:	b094      	sub	sp, #80	; 0x50
   14e46:	900e      	str	r0, [sp, #56]	; 0x38
   14e48:	910f      	str	r1, [sp, #60]	; 0x3c
   14e4a:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   14e4c:	6803      	ldr	r3, [r0, #0]
   14e4e:	9009      	str	r0, [sp, #36]	; 0x24
   14e50:	4608      	mov	r0, r1
   14e52:	9108      	str	r1, [sp, #32]
   14e54:	4611      	mov	r1, r2
   14e56:	9207      	str	r2, [sp, #28]
   14e58:	9306      	str	r3, [sp, #24]
   14e5a:	f001 f8e0 	bl	1601e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   14e5e:	9005      	str	r0, [sp, #20]
   14e60:	e7ff      	b.n	14e62 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x20>
   14e62:	9806      	ldr	r0, [sp, #24]
   14e64:	9905      	ldr	r1, [sp, #20]
   14e66:	1842      	adds	r2, r0, r1
   14e68:	4613      	mov	r3, r2
   14e6a:	4282      	cmp	r2, r0
   14e6c:	9304      	str	r3, [sp, #16]
   14e6e:	d33f      	bcc.n	14ef0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xae>
   14e70:	e7ff      	b.n	14e72 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x30>
   14e72:	9809      	ldr	r0, [sp, #36]	; 0x24
   14e74:	f000 f8fd 	bl	15072 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>
   14e78:	9003      	str	r0, [sp, #12]
   14e7a:	e7ff      	b.n	14e7c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x3a>
   14e7c:	9804      	ldr	r0, [sp, #16]
   14e7e:	9903      	ldr	r1, [sp, #12]
   14e80:	4288      	cmp	r0, r1
   14e82:	d807      	bhi.n	14e94 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x52>
   14e84:	e7ff      	b.n	14e86 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x44>
            for elem in other {
   14e86:	9808      	ldr	r0, [sp, #32]
   14e88:	9907      	ldr	r1, [sp, #28]
   14e8a:	f001 f93c 	bl	16106 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>
   14e8e:	9002      	str	r0, [sp, #8]
   14e90:	9101      	str	r1, [sp, #4]
   14e92:	e003      	b.n	14e9c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x5a>
   14e94:	2001      	movs	r0, #1
            Err(())
   14e96:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   14e9a:	e025      	b.n	14ee8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa6>
            for elem in other {
   14e9c:	9802      	ldr	r0, [sp, #8]
   14e9e:	900b      	str	r0, [sp, #44]	; 0x2c
   14ea0:	9901      	ldr	r1, [sp, #4]
   14ea2:	910c      	str	r1, [sp, #48]	; 0x30
   14ea4:	e7ff      	b.n	14ea6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x64>
   14ea6:	a80b      	add	r0, sp, #44	; 0x2c
   14ea8:	f001 f94f 	bl	1614a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>
   14eac:	900d      	str	r0, [sp, #52]	; 0x34
   14eae:	e7ff      	b.n	14eb0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x6e>
   14eb0:	980d      	ldr	r0, [sp, #52]	; 0x34
   14eb2:	2800      	cmp	r0, #0
   14eb4:	4601      	mov	r1, r0
   14eb6:	bf18      	it	ne
   14eb8:	2101      	movne	r1, #1
   14eba:	2800      	cmp	r0, #0
   14ebc:	d001      	beq.n	14ec2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x80>
   14ebe:	e7ff      	b.n	14ec0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x7e>
   14ec0:	e004      	b.n	14ecc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x8a>
   14ec2:	2000      	movs	r0, #0
            Ok(())
   14ec4:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   14ec8:	e00e      	b.n	14ee8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa6>
            for elem in other {
   14eca:	defe      	udf	#254	; 0xfe
   14ecc:	980d      	ldr	r0, [sp, #52]	; 0x34
   14ece:	9011      	str	r0, [sp, #68]	; 0x44
   14ed0:	9012      	str	r0, [sp, #72]	; 0x48
   14ed2:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   14ed4:	f000 fff3 	bl	15ebe <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>
   14ed8:	9000      	str	r0, [sp, #0]
   14eda:	e7ff      	b.n	14edc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x9a>
   14edc:	9809      	ldr	r0, [sp, #36]	; 0x24
   14ede:	9900      	ldr	r1, [sp, #0]
   14ee0:	f7ff ff1a 	bl	14d18 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>
   14ee4:	e7ff      	b.n	14ee6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa4>
            for elem in other {
   14ee6:	e7de      	b.n	14ea6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x64>
    }
   14ee8:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   14eec:	b014      	add	sp, #80	; 0x50
   14eee:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   14ef0:	f640 7050 	movw	r0, #3920	; 0xf50
   14ef4:	f2c0 0002 	movt	r0, #2
   14ef8:	f640 726c 	movw	r2, #3948	; 0xf6c
   14efc:	f2c0 0202 	movt	r2, #2
   14f00:	211c      	movs	r1, #28
   14f02:	f002 fd31 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14f06:	defe      	udf	#254	; 0xfe

00014f08 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E>:
    pub(crate) fn push(&mut self, item: T) -> Result<(), T> {
   14f08:	b580      	push	{r7, lr}
   14f0a:	b088      	sub	sp, #32
   14f0c:	460a      	mov	r2, r1
   14f0e:	9006      	str	r0, [sp, #24]
   14f10:	f8ad 101e 	strh.w	r1, [sp, #30]
        if self.len < self.capacity() {
   14f14:	6801      	ldr	r1, [r0, #0]
   14f16:	9004      	str	r0, [sp, #16]
   14f18:	9203      	str	r2, [sp, #12]
   14f1a:	9102      	str	r1, [sp, #8]
   14f1c:	f000 f8a9 	bl	15072 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>
   14f20:	9001      	str	r0, [sp, #4]
   14f22:	e7ff      	b.n	14f24 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x1c>
   14f24:	9802      	ldr	r0, [sp, #8]
   14f26:	9901      	ldr	r1, [sp, #4]
   14f28:	4288      	cmp	r0, r1
   14f2a:	d307      	bcc.n	14f3c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x34>
   14f2c:	e7ff      	b.n	14f2e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x26>
            Err(item)
   14f2e:	9803      	ldr	r0, [sp, #12]
   14f30:	f8ad 0016 	strh.w	r0, [sp, #22]
   14f34:	2101      	movs	r1, #1
   14f36:	f8ad 1014 	strh.w	r1, [sp, #20]
        if self.len < self.capacity() {
   14f3a:	e008      	b.n	14f4e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x46>
            unsafe { self.push_unchecked(item) }
   14f3c:	9804      	ldr	r0, [sp, #16]
   14f3e:	9903      	ldr	r1, [sp, #12]
   14f40:	f7ff feea 	bl	14d18 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>
   14f44:	e7ff      	b.n	14f46 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x3e>
   14f46:	2000      	movs	r0, #0
            Ok(())
   14f48:	f8ad 0014 	strh.w	r0, [sp, #20]
        if self.len < self.capacity() {
   14f4c:	e7ff      	b.n	14f4e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x46>
    }
   14f4e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   14f52:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   14f56:	b008      	add	sp, #32
   14f58:	bd80      	pop	{r7, pc}

00014f5a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE>:
    pub(crate) fn clear(&mut self) {
   14f5a:	b580      	push	{r7, lr}
   14f5c:	b082      	sub	sp, #8
   14f5e:	9001      	str	r0, [sp, #4]
   14f60:	2100      	movs	r1, #0
        self.truncate(0);
   14f62:	f000 f8d0 	bl	15106 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E>
   14f66:	e7ff      	b.n	14f68 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE+0xe>
    }
   14f68:	b002      	add	sp, #8
   14f6a:	bd80      	pop	{r7, pc}

00014f6c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E>:
    pub(crate) fn clear(&mut self) {
   14f6c:	b580      	push	{r7, lr}
   14f6e:	b082      	sub	sp, #8
   14f70:	9001      	str	r0, [sp, #4]
   14f72:	2100      	movs	r1, #0
        self.truncate(0);
   14f74:	f000 f891 	bl	1509a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE>
   14f78:	e7ff      	b.n	14f7a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E+0xe>
    }
   14f7a:	b002      	add	sp, #8
   14f7c:	bd80      	pop	{r7, pc}

00014f7e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE>:
    pub(crate) fn clone(&self) -> Self
   14f7e:	b580      	push	{r7, lr}
   14f80:	b0a0      	sub	sp, #128	; 0x80
   14f82:	911f      	str	r1, [sp, #124]	; 0x7c
   14f84:	aa05      	add	r2, sp, #20
        let mut new = Self::new();
   14f86:	9004      	str	r0, [sp, #16]
   14f88:	4610      	mov	r0, r2
   14f8a:	9103      	str	r1, [sp, #12]
   14f8c:	f7ff fe59 	bl	14c42 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>
   14f90:	e7ff      	b.n	14f92 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x14>
        new.extend_from_slice(self.as_slice()).unwrap();
   14f92:	9803      	ldr	r0, [sp, #12]
   14f94:	f000 f843 	bl	1501e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>
   14f98:	9002      	str	r0, [sp, #8]
   14f9a:	9101      	str	r1, [sp, #4]
   14f9c:	e7ff      	b.n	14f9e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x20>
   14f9e:	a805      	add	r0, sp, #20
   14fa0:	9902      	ldr	r1, [sp, #8]
   14fa2:	9a01      	ldr	r2, [sp, #4]
   14fa4:	f7ff ff4d 	bl	14e42 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE>
   14fa8:	9000      	str	r0, [sp, #0]
   14faa:	e7ff      	b.n	14fac <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x2e>
   14fac:	9800      	ldr	r0, [sp, #0]
   14fae:	f000 0001 	and.w	r0, r0, #1
   14fb2:	f640 717c 	movw	r1, #3964	; 0xf7c
   14fb6:	f2c0 0102 	movt	r1, #2
   14fba:	f000 f959 	bl	15270 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>
   14fbe:	e7ff      	b.n	14fc0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x42>
   14fc0:	a905      	add	r1, sp, #20
   14fc2:	2268      	movs	r2, #104	; 0x68
        new
   14fc4:	9804      	ldr	r0, [sp, #16]
   14fc6:	f009 f8a3 	bl	1e110 <__aeabi_memcpy>
    }
   14fca:	b020      	add	sp, #128	; 0x80
   14fcc:	bd80      	pop	{r7, pc}

00014fce <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E>:
    pub(crate) fn clone(&self) -> Self
   14fce:	b580      	push	{r7, lr}
   14fd0:	b0ba      	sub	sp, #232	; 0xe8
   14fd2:	9139      	str	r1, [sp, #228]	; 0xe4
   14fd4:	aa06      	add	r2, sp, #24
        let mut new = Self::new();
   14fd6:	9005      	str	r0, [sp, #20]
   14fd8:	4610      	mov	r0, r2
   14fda:	9104      	str	r1, [sp, #16]
   14fdc:	f7ff fe22 	bl	14c24 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>
   14fe0:	e7ff      	b.n	14fe2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x14>
        new.extend_from_slice(self.as_slice()).unwrap();
   14fe2:	9804      	ldr	r0, [sp, #16]
   14fe4:	f000 f830 	bl	15048 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>
   14fe8:	9003      	str	r0, [sp, #12]
   14fea:	9102      	str	r1, [sp, #8]
   14fec:	e7ff      	b.n	14fee <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x20>
   14fee:	a806      	add	r0, sp, #24
   14ff0:	9903      	ldr	r1, [sp, #12]
   14ff2:	9a02      	ldr	r2, [sp, #8]
   14ff4:	f7ff fec2 	bl	14d7c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>
   14ff8:	9001      	str	r0, [sp, #4]
   14ffa:	e7ff      	b.n	14ffc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x2e>
   14ffc:	9801      	ldr	r0, [sp, #4]
   14ffe:	f000 0001 	and.w	r0, r0, #1
   15002:	f640 717c 	movw	r1, #3964	; 0xf7c
   15006:	f2c0 0102 	movt	r1, #2
   1500a:	f000 f931 	bl	15270 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>
   1500e:	e7ff      	b.n	15010 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x42>
   15010:	a906      	add	r1, sp, #24
   15012:	22cc      	movs	r2, #204	; 0xcc
        new
   15014:	9805      	ldr	r0, [sp, #20]
   15016:	f009 f87b 	bl	1e110 <__aeabi_memcpy>
    }
   1501a:	b03a      	add	sp, #232	; 0xe8
   1501c:	bd80      	pop	{r7, pc}

0001501e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   1501e:	b580      	push	{r7, lr}
   15020:	b088      	sub	sp, #32
   15022:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   15024:	1d01      	adds	r1, r0, #4
   15026:	9106      	str	r1, [sp, #24]
   15028:	9107      	str	r1, [sp, #28]
   1502a:	9004      	str	r0, [sp, #16]
   1502c:	9103      	str	r1, [sp, #12]
   1502e:	e7ff      	b.n	15030 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE+0x12>
   15030:	9804      	ldr	r0, [sp, #16]
   15032:	6801      	ldr	r1, [r0, #0]
   15034:	9803      	ldr	r0, [sp, #12]
   15036:	f000 ffc1 	bl	15fbc <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>
   1503a:	9002      	str	r0, [sp, #8]
   1503c:	9101      	str	r1, [sp, #4]
   1503e:	e7ff      	b.n	15040 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE+0x22>
    }
   15040:	9802      	ldr	r0, [sp, #8]
   15042:	9901      	ldr	r1, [sp, #4]
   15044:	b008      	add	sp, #32
   15046:	bd80      	pop	{r7, pc}

00015048 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>:
    pub(crate) fn as_slice(&self) -> &[T] {
   15048:	b580      	push	{r7, lr}
   1504a:	b088      	sub	sp, #32
   1504c:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   1504e:	1d01      	adds	r1, r0, #4
   15050:	9106      	str	r1, [sp, #24]
   15052:	9107      	str	r1, [sp, #28]
   15054:	9004      	str	r0, [sp, #16]
   15056:	9103      	str	r1, [sp, #12]
   15058:	e7ff      	b.n	1505a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E+0x12>
   1505a:	9804      	ldr	r0, [sp, #16]
   1505c:	6801      	ldr	r1, [r0, #0]
   1505e:	9803      	ldr	r0, [sp, #12]
   15060:	f000 ffac 	bl	15fbc <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>
   15064:	9002      	str	r0, [sp, #8]
   15066:	9101      	str	r1, [sp, #4]
   15068:	e7ff      	b.n	1506a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E+0x22>
    }
   1506a:	9802      	ldr	r0, [sp, #8]
   1506c:	9901      	ldr	r1, [sp, #4]
   1506e:	b008      	add	sp, #32
   15070:	bd80      	pop	{r7, pc}

00015072 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>:
    pub(crate) fn capacity(&self) -> usize {
   15072:	b580      	push	{r7, lr}
   15074:	b082      	sub	sp, #8
   15076:	9001      	str	r0, [sp, #4]
        N::to_usize()
   15078:	f000 fa26 	bl	154c8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>
   1507c:	9000      	str	r0, [sp, #0]
   1507e:	e7ff      	b.n	15080 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E+0xe>
    }
   15080:	9800      	ldr	r0, [sp, #0]
   15082:	b002      	add	sp, #8
   15084:	bd80      	pop	{r7, pc}

00015086 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E>:
    pub(crate) fn capacity(&self) -> usize {
   15086:	b580      	push	{r7, lr}
   15088:	b082      	sub	sp, #8
   1508a:	9001      	str	r0, [sp, #4]
        N::to_usize()
   1508c:	f000 fa34 	bl	154f8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE>
   15090:	9000      	str	r0, [sp, #0]
   15092:	e7ff      	b.n	15094 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E+0xe>
    }
   15094:	9800      	ldr	r0, [sp, #0]
   15096:	b002      	add	sp, #8
   15098:	bd80      	pop	{r7, pc}

0001509a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE>:
    pub(crate) fn truncate(&mut self, len: usize) {
   1509a:	b580      	push	{r7, lr}
   1509c:	b08a      	sub	sp, #40	; 0x28
   1509e:	9007      	str	r0, [sp, #28]
   150a0:	9108      	str	r1, [sp, #32]
   150a2:	9106      	str	r1, [sp, #24]
   150a4:	9005      	str	r0, [sp, #20]
   150a6:	e7ff      	b.n	150a8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0xe>
            while len < self.len {
   150a8:	9805      	ldr	r0, [sp, #20]
   150aa:	6801      	ldr	r1, [r0, #0]
   150ac:	9a06      	ldr	r2, [sp, #24]
   150ae:	428a      	cmp	r2, r1
   150b0:	d302      	bcc.n	150b8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x1e>
   150b2:	e7ff      	b.n	150b4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x1a>
    }
   150b4:	b00a      	add	sp, #40	; 0x28
   150b6:	bd80      	pop	{r7, pc}
                self.len -= 1;
   150b8:	9805      	ldr	r0, [sp, #20]
   150ba:	6801      	ldr	r1, [r0, #0]
   150bc:	1e4a      	subs	r2, r1, #1
   150be:	2901      	cmp	r1, #1
   150c0:	9204      	str	r2, [sp, #16]
   150c2:	d314      	bcc.n	150ee <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x54>
   150c4:	e7ff      	b.n	150c6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x2c>
   150c6:	9804      	ldr	r0, [sp, #16]
   150c8:	9905      	ldr	r1, [sp, #20]
   150ca:	6008      	str	r0, [r1, #0]
                let len = self.len;
   150cc:	680a      	ldr	r2, [r1, #0]
   150ce:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   150d0:	4608      	mov	r0, r1
   150d2:	9203      	str	r2, [sp, #12]
   150d4:	f7ff fdd9 	bl	14c8a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>
   150d8:	9002      	str	r0, [sp, #8]
   150da:	9101      	str	r1, [sp, #4]
   150dc:	e7ff      	b.n	150de <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x44>
   150de:	9802      	ldr	r0, [sp, #8]
   150e0:	9901      	ldr	r1, [sp, #4]
   150e2:	9a03      	ldr	r2, [sp, #12]
   150e4:	f000 ff89 	bl	15ffa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>
   150e8:	e7ff      	b.n	150ea <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x50>
   150ea:	e7ff      	b.n	150ec <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x52>
            while len < self.len {
   150ec:	e7dc      	b.n	150a8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0xe>
                self.len -= 1;
   150ee:	f640 7010 	movw	r0, #3856	; 0xf10
   150f2:	f2c0 0002 	movt	r0, #2
   150f6:	f640 728c 	movw	r2, #3980	; 0xf8c
   150fa:	f2c0 0202 	movt	r2, #2
   150fe:	2121      	movs	r1, #33	; 0x21
   15100:	f002 fc32 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15104:	defe      	udf	#254	; 0xfe

00015106 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   15106:	b580      	push	{r7, lr}
   15108:	b08a      	sub	sp, #40	; 0x28
   1510a:	9007      	str	r0, [sp, #28]
   1510c:	9108      	str	r1, [sp, #32]
   1510e:	9106      	str	r1, [sp, #24]
   15110:	9005      	str	r0, [sp, #20]
   15112:	e7ff      	b.n	15114 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0xe>
            while len < self.len {
   15114:	9805      	ldr	r0, [sp, #20]
   15116:	6801      	ldr	r1, [r0, #0]
   15118:	9a06      	ldr	r2, [sp, #24]
   1511a:	428a      	cmp	r2, r1
   1511c:	d302      	bcc.n	15124 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x1e>
   1511e:	e7ff      	b.n	15120 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x1a>
    }
   15120:	b00a      	add	sp, #40	; 0x28
   15122:	bd80      	pop	{r7, pc}
                self.len -= 1;
   15124:	9805      	ldr	r0, [sp, #20]
   15126:	6801      	ldr	r1, [r0, #0]
   15128:	1e4a      	subs	r2, r1, #1
   1512a:	2901      	cmp	r1, #1
   1512c:	9204      	str	r2, [sp, #16]
   1512e:	d314      	bcc.n	1515a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x54>
   15130:	e7ff      	b.n	15132 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x2c>
   15132:	9804      	ldr	r0, [sp, #16]
   15134:	9905      	ldr	r1, [sp, #20]
   15136:	6008      	str	r0, [r1, #0]
                let len = self.len;
   15138:	680a      	ldr	r2, [r1, #0]
   1513a:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   1513c:	4608      	mov	r0, r1
   1513e:	9203      	str	r2, [sp, #12]
   15140:	f7ff fd8e 	bl	14c60 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>
   15144:	9002      	str	r0, [sp, #8]
   15146:	9101      	str	r1, [sp, #4]
   15148:	e7ff      	b.n	1514a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x44>
   1514a:	9802      	ldr	r0, [sp, #8]
   1514c:	9901      	ldr	r1, [sp, #4]
   1514e:	9a03      	ldr	r2, [sp, #12]
   15150:	f000 ff53 	bl	15ffa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>
   15154:	e7ff      	b.n	15156 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x50>
   15156:	e7ff      	b.n	15158 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x52>
            while len < self.len {
   15158:	e7dc      	b.n	15114 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0xe>
                self.len -= 1;
   1515a:	f640 7010 	movw	r0, #3856	; 0xf10
   1515e:	f2c0 0002 	movt	r0, #2
   15162:	f640 728c 	movw	r2, #3980	; 0xf8c
   15166:	f2c0 0202 	movt	r2, #2
   1516a:	2121      	movs	r1, #33	; 0x21
   1516c:	f002 fbfc 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15170:	defe      	udf	#254	; 0xfe

00015172 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE>:
   15172:	b082      	sub	sp, #8
   15174:	9001      	str	r0, [sp, #4]
   15176:	8800      	ldrh	r0, [r0, #0]
   15178:	2800      	cmp	r0, #0
   1517a:	d004      	beq.n	15186 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x14>
   1517c:	e7ff      	b.n	1517e <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0xc>
   1517e:	2000      	movs	r0, #0
   15180:	f88d 0003 	strb.w	r0, [sp, #3]
   15184:	e003      	b.n	1518e <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x1c>
   15186:	2001      	movs	r0, #1
   15188:	f88d 0003 	strb.w	r0, [sp, #3]
   1518c:	e7ff      	b.n	1518e <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x1c>
   1518e:	f89d 0003 	ldrb.w	r0, [sp, #3]
   15192:	b002      	add	sp, #8
   15194:	4770      	bx	lr

00015196 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E>:
   15196:	b082      	sub	sp, #8
   15198:	9001      	str	r0, [sp, #4]
   1519a:	7800      	ldrb	r0, [r0, #0]
   1519c:	07c0      	lsls	r0, r0, #31
   1519e:	2800      	cmp	r0, #0
   151a0:	d004      	beq.n	151ac <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x16>
   151a2:	e7ff      	b.n	151a4 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0xe>
   151a4:	2000      	movs	r0, #0
   151a6:	f88d 0003 	strb.w	r0, [sp, #3]
   151aa:	e003      	b.n	151b4 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x1e>
   151ac:	2001      	movs	r0, #1
   151ae:	f88d 0003 	strb.w	r0, [sp, #3]
   151b2:	e7ff      	b.n	151b4 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x1e>
   151b4:	f89d 0003 	ldrb.w	r0, [sp, #3]
   151b8:	b002      	add	sp, #8
   151ba:	4770      	bx	lr

000151bc <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>:
   151bc:	b510      	push	{r4, lr}
   151be:	b08a      	sub	sp, #40	; 0x28
   151c0:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   151c4:	468e      	mov	lr, r1
   151c6:	4604      	mov	r4, r0
   151c8:	f8ad 0014 	strh.w	r0, [sp, #20]
   151cc:	f8ad 1016 	strh.w	r1, [sp, #22]
   151d0:	9207      	str	r2, [sp, #28]
   151d2:	9308      	str	r3, [sp, #32]
   151d4:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   151d8:	4601      	mov	r1, r0
   151da:	2800      	cmp	r0, #0
   151dc:	9304      	str	r3, [sp, #16]
   151de:	9203      	str	r2, [sp, #12]
   151e0:	f8cd c008 	str.w	ip, [sp, #8]
   151e4:	d013      	beq.n	1520e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x52>
   151e6:	e7ff      	b.n	151e8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x2c>
   151e8:	f8bd 0016 	ldrh.w	r0, [sp, #22]
   151ec:	f8ad 001a 	strh.w	r0, [sp, #26]
   151f0:	4668      	mov	r0, sp
   151f2:	9902      	ldr	r1, [sp, #8]
   151f4:	6001      	str	r1, [r0, #0]
   151f6:	f640 73ac 	movw	r3, #4012	; 0xfac
   151fa:	f2c0 0302 	movt	r3, #2
   151fe:	f10d 021a 	add.w	r2, sp, #26
   15202:	9803      	ldr	r0, [sp, #12]
   15204:	9904      	ldr	r1, [sp, #16]
   15206:	f002 fb81 	bl	1790c <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   1520a:	defe      	udf	#254	; 0xfe
   1520c:	defe      	udf	#254	; 0xfe
   1520e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   15212:	2800      	cmp	r0, #0
   15214:	d102      	bne.n	1521c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x60>
   15216:	e7ff      	b.n	15218 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x5c>
   15218:	b00a      	add	sp, #40	; 0x28
   1521a:	bd10      	pop	{r4, pc}
   1521c:	e7fc      	b.n	15218 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x5c>

0001521e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>:
   1521e:	b580      	push	{r7, lr}
   15220:	b08a      	sub	sp, #40	; 0x28
   15222:	4684      	mov	ip, r0
   15224:	f88d 0017 	strb.w	r0, [sp, #23]
   15228:	9107      	str	r1, [sp, #28]
   1522a:	9208      	str	r2, [sp, #32]
   1522c:	f89d 0017 	ldrb.w	r0, [sp, #23]
   15230:	ea4f 7ec0 	mov.w	lr, r0, lsl #31
   15234:	f1be 0f00 	cmp.w	lr, #0
   15238:	9304      	str	r3, [sp, #16]
   1523a:	9203      	str	r2, [sp, #12]
   1523c:	9102      	str	r1, [sp, #8]
   1523e:	d00e      	beq.n	1525e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x40>
   15240:	e7ff      	b.n	15242 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x24>
   15242:	4668      	mov	r0, sp
   15244:	9904      	ldr	r1, [sp, #16]
   15246:	6001      	str	r1, [r0, #0]
   15248:	f640 739c 	movw	r3, #3996	; 0xf9c
   1524c:	f2c0 0302 	movt	r3, #2
   15250:	aa06      	add	r2, sp, #24
   15252:	9802      	ldr	r0, [sp, #8]
   15254:	9903      	ldr	r1, [sp, #12]
   15256:	f002 fb59 	bl	1790c <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   1525a:	defe      	udf	#254	; 0xfe
   1525c:	defe      	udf	#254	; 0xfe
   1525e:	f89d 0017 	ldrb.w	r0, [sp, #23]
   15262:	07c0      	lsls	r0, r0, #31
   15264:	2800      	cmp	r0, #0
   15266:	d102      	bne.n	1526e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x50>
   15268:	e7ff      	b.n	1526a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>
   1526a:	b00a      	add	sp, #40	; 0x28
   1526c:	bd80      	pop	{r7, pc}
   1526e:	e7fc      	b.n	1526a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>

00015270 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>:
   15270:	b086      	sub	sp, #24
   15272:	4602      	mov	r2, r0
   15274:	f88d 000f 	strb.w	r0, [sp, #15]
   15278:	f89d 000f 	ldrb.w	r0, [sp, #15]
   1527c:	07c3      	lsls	r3, r0, #31
   1527e:	2b00      	cmp	r3, #0
   15280:	9102      	str	r1, [sp, #8]
   15282:	d011      	beq.n	152a8 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x38>
   15284:	e7ff      	b.n	15286 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x16>
   15286:	4668      	mov	r0, sp
   15288:	9902      	ldr	r1, [sp, #8]
   1528a:	6001      	str	r1, [r0, #0]
   1528c:	f640 70bc 	movw	r0, #4028	; 0xfbc
   15290:	f2c0 0002 	movt	r0, #2
   15294:	f640 739c 	movw	r3, #3996	; 0xf9c
   15298:	f2c0 0302 	movt	r3, #2
   1529c:	212b      	movs	r1, #43	; 0x2b
   1529e:	aa04      	add	r2, sp, #16
   152a0:	f002 fb34 	bl	1790c <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   152a4:	defe      	udf	#254	; 0xfe
   152a6:	defe      	udf	#254	; 0xfe
   152a8:	f89d 000f 	ldrb.w	r0, [sp, #15]
   152ac:	07c0      	lsls	r0, r0, #31
   152ae:	2800      	cmp	r0, #0
   152b0:	d102      	bne.n	152b8 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x48>
   152b2:	e7ff      	b.n	152b4 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x44>
   152b4:	b006      	add	sp, #24
   152b6:	4770      	bx	lr
   152b8:	e7fc      	b.n	152b4 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x44>

000152ba <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>:
   152ba:	b580      	push	{r7, lr}
   152bc:	b088      	sub	sp, #32
   152be:	9001      	str	r0, [sp, #4]
   152c0:	2000      	movs	r0, #0
   152c2:	f88d 0013 	strb.w	r0, [sp, #19]
   152c6:	f88d 0011 	strb.w	r0, [sp, #17]
   152ca:	f88d 0012 	strb.w	r0, [sp, #18]
   152ce:	2001      	movs	r0, #1
   152d0:	f88d 0012 	strb.w	r0, [sp, #18]
   152d4:	f88d 0013 	strb.w	r0, [sp, #19]
   152d8:	f88d 0011 	strb.w	r0, [sp, #17]
   152dc:	9801      	ldr	r0, [sp, #4]
   152de:	1e41      	subs	r1, r0, #1
   152e0:	bf18      	it	ne
   152e2:	2101      	movne	r1, #1
   152e4:	2801      	cmp	r0, #1
   152e6:	d00d      	beq.n	15304 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x4a>
   152e8:	e7ff      	b.n	152ea <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x30>
   152ea:	2000      	movs	r0, #0
   152ec:	f88d 0013 	strb.w	r0, [sp, #19]
   152f0:	9901      	ldr	r1, [sp, #4]
   152f2:	9107      	str	r1, [sp, #28]
   152f4:	f88d 0011 	strb.w	r0, [sp, #17]
   152f8:	9103      	str	r1, [sp, #12]
   152fa:	9803      	ldr	r0, [sp, #12]
   152fc:	f7f4 fa76 	bl	97ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>
   15300:	e006      	b.n	15310 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x56>
   15302:	defe      	udf	#254	; 0xfe
   15304:	2000      	movs	r0, #0
   15306:	f88d 0012 	strb.w	r0, [sp, #18]
   1530a:	f88d 000b 	strb.w	r0, [sp, #11]
   1530e:	e003      	b.n	15318 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   15310:	2001      	movs	r0, #1
   15312:	f88d 000b 	strb.w	r0, [sp, #11]
   15316:	e7ff      	b.n	15318 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   15318:	f89d 0011 	ldrb.w	r0, [sp, #17]
   1531c:	07c0      	lsls	r0, r0, #31
   1531e:	2800      	cmp	r0, #0
   15320:	d104      	bne.n	1532c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x72>
   15322:	e7ff      	b.n	15324 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   15324:	9801      	ldr	r0, [sp, #4]
   15326:	2801      	cmp	r0, #1
   15328:	d008      	beq.n	1533c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x82>
   1532a:	e011      	b.n	15350 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x96>
   1532c:	2000      	movs	r0, #0
   1532e:	f88d 0011 	strb.w	r0, [sp, #17]
   15332:	e7f7      	b.n	15324 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   15334:	f89d 000b 	ldrb.w	r0, [sp, #11]
   15338:	b008      	add	sp, #32
   1533a:	bd80      	pop	{r7, pc}
   1533c:	f89d 0012 	ldrb.w	r0, [sp, #18]
   15340:	07c0      	lsls	r0, r0, #31
   15342:	2800      	cmp	r0, #0
   15344:	d0f6      	beq.n	15334 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   15346:	e7ff      	b.n	15348 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x8e>
   15348:	2000      	movs	r0, #0
   1534a:	f88d 0012 	strb.w	r0, [sp, #18]
   1534e:	e7f1      	b.n	15334 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   15350:	f89d 0013 	ldrb.w	r0, [sp, #19]
   15354:	07c0      	lsls	r0, r0, #31
   15356:	2800      	cmp	r0, #0
   15358:	d0ec      	beq.n	15334 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   1535a:	e7ff      	b.n	1535c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0xa2>
   1535c:	2000      	movs	r0, #0
   1535e:	f88d 0013 	strb.w	r0, [sp, #19]
   15362:	e7e7      	b.n	15334 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>

00015364 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>:
   15364:	b580      	push	{r7, lr}
   15366:	b088      	sub	sp, #32
   15368:	9001      	str	r0, [sp, #4]
   1536a:	2000      	movs	r0, #0
   1536c:	f88d 0013 	strb.w	r0, [sp, #19]
   15370:	f88d 0011 	strb.w	r0, [sp, #17]
   15374:	f88d 0012 	strb.w	r0, [sp, #18]
   15378:	2001      	movs	r0, #1
   1537a:	f88d 0012 	strb.w	r0, [sp, #18]
   1537e:	f88d 0013 	strb.w	r0, [sp, #19]
   15382:	f88d 0011 	strb.w	r0, [sp, #17]
   15386:	9801      	ldr	r0, [sp, #4]
   15388:	1e41      	subs	r1, r0, #1
   1538a:	bf18      	it	ne
   1538c:	2101      	movne	r1, #1
   1538e:	2801      	cmp	r0, #1
   15390:	d00d      	beq.n	153ae <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x4a>
   15392:	e7ff      	b.n	15394 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x30>
   15394:	2000      	movs	r0, #0
   15396:	f88d 0013 	strb.w	r0, [sp, #19]
   1539a:	9901      	ldr	r1, [sp, #4]
   1539c:	9107      	str	r1, [sp, #28]
   1539e:	f88d 0011 	strb.w	r0, [sp, #17]
   153a2:	9103      	str	r1, [sp, #12]
   153a4:	9803      	ldr	r0, [sp, #12]
   153a6:	f7f4 fa17 	bl	97d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>
   153aa:	e006      	b.n	153ba <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x56>
   153ac:	defe      	udf	#254	; 0xfe
   153ae:	2000      	movs	r0, #0
   153b0:	f88d 0012 	strb.w	r0, [sp, #18]
   153b4:	f88d 000b 	strb.w	r0, [sp, #11]
   153b8:	e003      	b.n	153c2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   153ba:	2001      	movs	r0, #1
   153bc:	f88d 000b 	strb.w	r0, [sp, #11]
   153c0:	e7ff      	b.n	153c2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   153c2:	f89d 0011 	ldrb.w	r0, [sp, #17]
   153c6:	07c0      	lsls	r0, r0, #31
   153c8:	2800      	cmp	r0, #0
   153ca:	d104      	bne.n	153d6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x72>
   153cc:	e7ff      	b.n	153ce <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   153ce:	9801      	ldr	r0, [sp, #4]
   153d0:	2801      	cmp	r0, #1
   153d2:	d008      	beq.n	153e6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x82>
   153d4:	e011      	b.n	153fa <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x96>
   153d6:	2000      	movs	r0, #0
   153d8:	f88d 0011 	strb.w	r0, [sp, #17]
   153dc:	e7f7      	b.n	153ce <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   153de:	f89d 000b 	ldrb.w	r0, [sp, #11]
   153e2:	b008      	add	sp, #32
   153e4:	bd80      	pop	{r7, pc}
   153e6:	f89d 0012 	ldrb.w	r0, [sp, #18]
   153ea:	07c0      	lsls	r0, r0, #31
   153ec:	2800      	cmp	r0, #0
   153ee:	d0f6      	beq.n	153de <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   153f0:	e7ff      	b.n	153f2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x8e>
   153f2:	2000      	movs	r0, #0
   153f4:	f88d 0012 	strb.w	r0, [sp, #18]
   153f8:	e7f1      	b.n	153de <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   153fa:	f89d 0013 	ldrb.w	r0, [sp, #19]
   153fe:	07c0      	lsls	r0, r0, #31
   15400:	2800      	cmp	r0, #0
   15402:	d0ec      	beq.n	153de <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   15404:	e7ff      	b.n	15406 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0xa2>
   15406:	2000      	movs	r0, #0
   15408:	f88d 0013 	strb.w	r0, [sp, #19]
   1540c:	e7e7      	b.n	153de <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>

0001540e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>:
   1540e:	b580      	push	{r7, lr}
   15410:	b088      	sub	sp, #32
   15412:	9001      	str	r0, [sp, #4]
   15414:	2000      	movs	r0, #0
   15416:	f88d 0013 	strb.w	r0, [sp, #19]
   1541a:	f88d 0011 	strb.w	r0, [sp, #17]
   1541e:	f88d 0012 	strb.w	r0, [sp, #18]
   15422:	2001      	movs	r0, #1
   15424:	f88d 0012 	strb.w	r0, [sp, #18]
   15428:	f88d 0013 	strb.w	r0, [sp, #19]
   1542c:	f88d 0011 	strb.w	r0, [sp, #17]
   15430:	9801      	ldr	r0, [sp, #4]
   15432:	1e41      	subs	r1, r0, #1
   15434:	bf18      	it	ne
   15436:	2101      	movne	r1, #1
   15438:	2801      	cmp	r0, #1
   1543a:	d00d      	beq.n	15458 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x4a>
   1543c:	e7ff      	b.n	1543e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x30>
   1543e:	2000      	movs	r0, #0
   15440:	f88d 0013 	strb.w	r0, [sp, #19]
   15444:	9901      	ldr	r1, [sp, #4]
   15446:	9107      	str	r1, [sp, #28]
   15448:	f88d 0011 	strb.w	r0, [sp, #17]
   1544c:	9103      	str	r1, [sp, #12]
   1544e:	9803      	ldr	r0, [sp, #12]
   15450:	f7f4 f9c7 	bl	97e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>
   15454:	e006      	b.n	15464 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x56>
   15456:	defe      	udf	#254	; 0xfe
   15458:	2000      	movs	r0, #0
   1545a:	f88d 0012 	strb.w	r0, [sp, #18]
   1545e:	f88d 000b 	strb.w	r0, [sp, #11]
   15462:	e003      	b.n	1546c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   15464:	2001      	movs	r0, #1
   15466:	f88d 000b 	strb.w	r0, [sp, #11]
   1546a:	e7ff      	b.n	1546c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   1546c:	f89d 0011 	ldrb.w	r0, [sp, #17]
   15470:	07c0      	lsls	r0, r0, #31
   15472:	2800      	cmp	r0, #0
   15474:	d104      	bne.n	15480 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x72>
   15476:	e7ff      	b.n	15478 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   15478:	9801      	ldr	r0, [sp, #4]
   1547a:	2801      	cmp	r0, #1
   1547c:	d008      	beq.n	15490 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x82>
   1547e:	e011      	b.n	154a4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x96>
   15480:	2000      	movs	r0, #0
   15482:	f88d 0011 	strb.w	r0, [sp, #17]
   15486:	e7f7      	b.n	15478 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   15488:	f89d 000b 	ldrb.w	r0, [sp, #11]
   1548c:	b008      	add	sp, #32
   1548e:	bd80      	pop	{r7, pc}
   15490:	f89d 0012 	ldrb.w	r0, [sp, #18]
   15494:	07c0      	lsls	r0, r0, #31
   15496:	2800      	cmp	r0, #0
   15498:	d0f6      	beq.n	15488 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   1549a:	e7ff      	b.n	1549c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x8e>
   1549c:	2000      	movs	r0, #0
   1549e:	f88d 0012 	strb.w	r0, [sp, #18]
   154a2:	e7f1      	b.n	15488 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   154a4:	f89d 0013 	ldrb.w	r0, [sp, #19]
   154a8:	07c0      	lsls	r0, r0, #31
   154aa:	2800      	cmp	r0, #0
   154ac:	d0ec      	beq.n	15488 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   154ae:	e7ff      	b.n	154b0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0xa2>
   154b0:	2000      	movs	r0, #0
   154b2:	f88d 0013 	strb.w	r0, [sp, #19]
   154b6:	e7e7      	b.n	15488 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>

000154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>:
   154b8:	b082      	sub	sp, #8
   154ba:	2001      	movs	r0, #1
   154bc:	f88d 0003 	strb.w	r0, [sp, #3]
   154c0:	f89d 0003 	ldrb.w	r0, [sp, #3]
   154c4:	b002      	add	sp, #8
   154c6:	4770      	bx	lr

000154c8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>:
    #[inline]
    fn to_u128() -> u128 {
        u128::from(B::to_u8()) | U::to_u128() << 1
    }
    #[inline]
    fn to_usize() -> usize {
   154c8:	b580      	push	{r7, lr}
   154ca:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   154cc:	f001 ff6d 	bl	173aa <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   154d0:	9003      	str	r0, [sp, #12]
   154d2:	e7ff      	b.n	154d4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0xc>
   154d4:	9803      	ldr	r0, [sp, #12]
   154d6:	f001 ffce 	bl	17476 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   154da:	9002      	str	r0, [sp, #8]
   154dc:	e7ff      	b.n	154de <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x16>
   154de:	f000 f823 	bl	15528 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E>
   154e2:	9001      	str	r0, [sp, #4]
   154e4:	e7ff      	b.n	154e6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x1e>
   154e6:	9801      	ldr	r0, [sp, #4]
   154e8:	0041      	lsls	r1, r0, #1
   154ea:	9100      	str	r1, [sp, #0]
   154ec:	e7ff      	b.n	154ee <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x26>
   154ee:	9802      	ldr	r0, [sp, #8]
   154f0:	9900      	ldr	r1, [sp, #0]
   154f2:	4308      	orrs	r0, r1
    }
   154f4:	b004      	add	sp, #16
   154f6:	bd80      	pop	{r7, pc}

000154f8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE>:
    fn to_usize() -> usize {
   154f8:	b580      	push	{r7, lr}
   154fa:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   154fc:	f001 ff55 	bl	173aa <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   15500:	9003      	str	r0, [sp, #12]
   15502:	e7ff      	b.n	15504 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0xc>
   15504:	9803      	ldr	r0, [sp, #12]
   15506:	f001 ffb6 	bl	17476 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   1550a:	9002      	str	r0, [sp, #8]
   1550c:	e7ff      	b.n	1550e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x16>
   1550e:	f7ff ffdb 	bl	154c8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>
   15512:	9001      	str	r0, [sp, #4]
   15514:	e7ff      	b.n	15516 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x1e>
   15516:	9801      	ldr	r0, [sp, #4]
   15518:	0041      	lsls	r1, r0, #1
   1551a:	9100      	str	r1, [sp, #0]
   1551c:	e7ff      	b.n	1551e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x26>
   1551e:	9802      	ldr	r0, [sp, #8]
   15520:	9900      	ldr	r1, [sp, #0]
   15522:	4308      	orrs	r0, r1
    }
   15524:	b004      	add	sp, #16
   15526:	bd80      	pop	{r7, pc}

00015528 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E>:
    fn to_usize() -> usize {
   15528:	b580      	push	{r7, lr}
   1552a:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1552c:	f001 ff3f 	bl	173ae <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>
   15530:	9003      	str	r0, [sp, #12]
   15532:	e7ff      	b.n	15534 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0xc>
   15534:	9803      	ldr	r0, [sp, #12]
   15536:	f001 ff9e 	bl	17476 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   1553a:	9002      	str	r0, [sp, #8]
   1553c:	e7ff      	b.n	1553e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x16>
   1553e:	f000 f83b 	bl	155b8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E>
   15542:	9001      	str	r0, [sp, #4]
   15544:	e7ff      	b.n	15546 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x1e>
   15546:	9801      	ldr	r0, [sp, #4]
   15548:	0041      	lsls	r1, r0, #1
   1554a:	9100      	str	r1, [sp, #0]
   1554c:	e7ff      	b.n	1554e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x26>
   1554e:	9802      	ldr	r0, [sp, #8]
   15550:	9900      	ldr	r1, [sp, #0]
   15552:	4308      	orrs	r0, r1
    }
   15554:	b004      	add	sp, #16
   15556:	bd80      	pop	{r7, pc}

00015558 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E>:
    fn to_usize() -> usize {
   15558:	b580      	push	{r7, lr}
   1555a:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1555c:	f001 ff25 	bl	173aa <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   15560:	9003      	str	r0, [sp, #12]
   15562:	e7ff      	b.n	15564 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0xc>
   15564:	9803      	ldr	r0, [sp, #12]
   15566:	f001 ff86 	bl	17476 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   1556a:	9002      	str	r0, [sp, #8]
   1556c:	e7ff      	b.n	1556e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x16>
   1556e:	f000 f80b 	bl	15588 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE>
   15572:	9001      	str	r0, [sp, #4]
   15574:	e7ff      	b.n	15576 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x1e>
   15576:	9801      	ldr	r0, [sp, #4]
   15578:	0041      	lsls	r1, r0, #1
   1557a:	9100      	str	r1, [sp, #0]
   1557c:	e7ff      	b.n	1557e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x26>
   1557e:	9802      	ldr	r0, [sp, #8]
   15580:	9900      	ldr	r1, [sp, #0]
   15582:	4308      	orrs	r0, r1
    }
   15584:	b004      	add	sp, #16
   15586:	bd80      	pop	{r7, pc}

00015588 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE>:
    fn to_usize() -> usize {
   15588:	b580      	push	{r7, lr}
   1558a:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1558c:	f001 ff0f 	bl	173ae <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>
   15590:	9003      	str	r0, [sp, #12]
   15592:	e7ff      	b.n	15594 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0xc>
   15594:	9803      	ldr	r0, [sp, #12]
   15596:	f001 ff6e 	bl	17476 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   1559a:	9002      	str	r0, [sp, #8]
   1559c:	e7ff      	b.n	1559e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x16>
   1559e:	f001 fe8c 	bl	172ba <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   155a2:	9001      	str	r0, [sp, #4]
   155a4:	e7ff      	b.n	155a6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x1e>
   155a6:	9801      	ldr	r0, [sp, #4]
   155a8:	0041      	lsls	r1, r0, #1
   155aa:	9100      	str	r1, [sp, #0]
   155ac:	e7ff      	b.n	155ae <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x26>
   155ae:	9802      	ldr	r0, [sp, #8]
   155b0:	9900      	ldr	r1, [sp, #0]
   155b2:	4308      	orrs	r0, r1
    }
   155b4:	b004      	add	sp, #16
   155b6:	bd80      	pop	{r7, pc}

000155b8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E>:
    fn to_usize() -> usize {
   155b8:	b580      	push	{r7, lr}
   155ba:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   155bc:	f001 fef5 	bl	173aa <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   155c0:	9003      	str	r0, [sp, #12]
   155c2:	e7ff      	b.n	155c4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0xc>
   155c4:	9803      	ldr	r0, [sp, #12]
   155c6:	f001 ff56 	bl	17476 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   155ca:	9002      	str	r0, [sp, #8]
   155cc:	e7ff      	b.n	155ce <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x16>
   155ce:	f7ff ffc3 	bl	15558 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E>
   155d2:	9001      	str	r0, [sp, #4]
   155d4:	e7ff      	b.n	155d6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x1e>
   155d6:	9801      	ldr	r0, [sp, #4]
   155d8:	0041      	lsls	r1, r0, #1
   155da:	9100      	str	r1, [sp, #0]
   155dc:	e7ff      	b.n	155de <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x26>
   155de:	9802      	ldr	r0, [sp, #8]
   155e0:	9900      	ldr	r1, [sp, #0]
   155e2:	4308      	orrs	r0, r1
    }
   155e4:	b004      	add	sp, #16
   155e6:	bd80      	pop	{r7, pc}

000155e8 <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E>:
pub fn draw_to_display<T>(item: T)
   155e8:	b510      	push	{r4, lr}
   155ea:	b088      	sub	sp, #32
   155ec:	a901      	add	r1, sp, #4
        item
   155ee:	460a      	mov	r2, r1
   155f0:	e8b0 5008 	ldmia.w	r0!, {r3, ip, lr}
   155f4:	e8a2 5008 	stmia.w	r2!, {r3, ip, lr}
   155f8:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
   155fc:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
    super::batch::draw_blocks(            //  Draw text or graphics the new faster way, as pixel blocks
   15600:	f240 1048 	movw	r0, #328	; 0x148
   15604:	f2c2 0000 	movt	r0, #8192	; 0x2000
   15608:	f000 f819 	bl	1563e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE>
   1560c:	9000      	str	r0, [sp, #0]
   1560e:	e7ff      	b.n	15610 <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E+0x28>
   15610:	9800      	ldr	r0, [sp, #0]
   15612:	f000 0001 	and.w	r0, r0, #1
   15616:	f640 71e7 	movw	r1, #4071	; 0xfe7
   1561a:	f2c0 0102 	movt	r1, #2
   1561e:	f241 0330 	movw	r3, #4144	; 0x1030
   15622:	f2c0 0302 	movt	r3, #2
   15626:	2210      	movs	r2, #16
   15628:	f7ff fdf9 	bl	1521e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   1562c:	e7ff      	b.n	1562e <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E+0x46>
}
   1562e:	b008      	add	sp, #32
   15630:	bd10      	pop	{r4, pc}

00015632 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E>:
   15632:	b580      	push	{r7, lr}
   15634:	f44f 72b6 	mov.w	r2, #364	; 0x16c
   15638:	f008 fd6a 	bl	1e110 <__aeabi_memcpy>
   1563c:	bd80      	pop	{r7, pc}

0001563e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE>:
    pub colors:   BlockColors,
}

/// Draw the pixels in the item as Pixel Blocks of contiguous Pixel Rows. The pixels are grouped by row then by block.
#[allow(dead_code)]
pub fn draw_blocks<SPI, DC, RST, T>(display: &mut ST7735<SPI, DC, RST>, item_pixels: T) -> Result<(),()>
   1563e:	b5b0      	push	{r4, r5, r7, lr}
   15640:	f5ad 6d48 	sub.w	sp, sp, #3200	; 0xc80
   15644:	f8cd 0c6c 	str.w	r0, [sp, #3180]	; 0xc6c
   15648:	aa19      	add	r2, sp, #100	; 0x64
    SPI: spi::Write<u8>,
    DC: OutputPin,
    RST: OutputPin,
    T: IntoIterator<Item = Pixel<Rgb565>>, {
    //  Get the pixels for the item to be rendered.
    let pixels = item_pixels.into_iter();
   1564a:	4613      	mov	r3, r2
   1564c:	e8b1 5010 	ldmia.w	r1!, {r4, ip, lr}
   15650:	e8a3 5010 	stmia.w	r3!, {r4, ip, lr}
   15654:	e891 5030 	ldmia.w	r1, {r4, r5, ip, lr}
   15658:	e883 5030 	stmia.w	r3, {r4, r5, ip, lr}
   1565c:	a910      	add	r1, sp, #64	; 0x40
   1565e:	900e      	str	r0, [sp, #56]	; 0x38
   15660:	4608      	mov	r0, r1
   15662:	4611      	mov	r1, r2
   15664:	f000 fe01 	bl	1626a <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E>
   15668:	e7ff      	b.n	1566a <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x2c>
   1566a:	a810      	add	r0, sp, #64	; 0x40
   1566c:	a945      	add	r1, sp, #276	; 0x114
    //  Batch the pixels into Pixel Rows.
    let rows = to_rows(pixels);
   1566e:	460a      	mov	r2, r1
   15670:	e8b0 5018 	ldmia.w	r0!, {r3, r4, ip, lr}
   15674:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
   15678:	e890 5038 	ldmia.w	r0, {r3, r4, r5, ip, lr}
   1567c:	e882 5038 	stmia.w	r2, {r3, r4, r5, ip, lr}
   15680:	a820      	add	r0, sp, #128	; 0x80
   15682:	f000 f8b7 	bl	157f4 <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E>
   15686:	e7ff      	b.n	15688 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x4a>
   15688:	a8a9      	add	r0, sp, #676	; 0x2a4
   1568a:	a920      	add	r1, sp, #128	; 0x80
   1568c:	2294      	movs	r2, #148	; 0x94
    //  Batch the Pixel Rows into Pixel Blocks.
    let blocks = to_blocks(rows);
   1568e:	900d      	str	r0, [sp, #52]	; 0x34
   15690:	f008 fd3e 	bl	1e110 <__aeabi_memcpy>
   15694:	a84e      	add	r0, sp, #312	; 0x138
   15696:	990d      	ldr	r1, [sp, #52]	; 0x34
   15698:	f000 f8db 	bl	15852 <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E>
   1569c:	e7ff      	b.n	1569e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x60>
   1569e:	f20d 40a4 	addw	r0, sp, #1188	; 0x4a4
   156a2:	a94e      	add	r1, sp, #312	; 0x138
   156a4:	f44f 72b6 	mov.w	r2, #364	; 0x16c
    //  For each Pixel Block...
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   156a8:	900c      	str	r0, [sp, #48]	; 0x30
   156aa:	f008 fd31 	bl	1e110 <__aeabi_memcpy>
   156ae:	a8ce      	add	r0, sp, #824	; 0x338
   156b0:	990c      	ldr	r1, [sp, #48]	; 0x30
   156b2:	f7ff ffbe 	bl	15632 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E>
   156b6:	e7ff      	b.n	156b8 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x7a>
   156b8:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
   156bc:	a9ce      	add	r1, sp, #824	; 0x338
   156be:	f44f 72b6 	mov.w	r2, #364	; 0x16c
   156c2:	f008 fd25 	bl	1e110 <__aeabi_memcpy>
   156c6:	e7ff      	b.n	156c8 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x8a>
   156c8:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
   156cc:	f50d 61c2 	add.w	r1, sp, #1552	; 0x610
   156d0:	f000 fa2c 	bl	15b2c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E>
   156d4:	e7ff      	b.n	156d6 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x98>
   156d6:	f8dd 0850 	ldr.w	r0, [sp, #2128]	; 0x850
   156da:	2800      	cmp	r0, #0
   156dc:	d001      	beq.n	156e2 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xa4>
   156de:	e7ff      	b.n	156e0 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xa2>
   156e0:	e005      	b.n	156ee <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xb0>
   156e2:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
   156e6:	f7f5 f85c 	bl	a7a2 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>
   156ea:	e01c      	b.n	15726 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xe8>
   156ec:	defe      	udf	#254	; 0xfe
   156ee:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
   156f2:	1d01      	adds	r1, r0, #4
   156f4:	f60d 1028 	addw	r0, sp, #2344	; 0x928
   156f8:	22d4      	movs	r2, #212	; 0xd4
   156fa:	900b      	str	r0, [sp, #44]	; 0x2c
   156fc:	920a      	str	r2, [sp, #40]	; 0x28
   156fe:	f008 fd07 	bl	1e110 <__aeabi_memcpy>
   15702:	f60d 10fc 	addw	r0, sp, #2556	; 0x9fc
   15706:	9009      	str	r0, [sp, #36]	; 0x24
   15708:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1570a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1570c:	f008 fd00 	bl	1e110 <__aeabi_memcpy>
   15710:	f20d 707c 	addw	r0, sp, #1916	; 0x77c
   15714:	9909      	ldr	r1, [sp, #36]	; 0x24
   15716:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   15718:	f008 fcfa 	bl	1e110 <__aeabi_memcpy>
   1571c:	f8dd 0850 	ldr.w	r0, [sp, #2128]	; 0x850
   15720:	2801      	cmp	r0, #1
   15722:	d02c      	beq.n	1577e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x140>
   15724:	e061      	b.n	157ea <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x1ac>
   15726:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
        //  Dump out the Pixel Blocks for the square in test_display()
        /* if x_left >= 60 && x_left <= 150 && x_right >= 60 && x_right <= 150 && y_top >= 60 && y_top <= 150 && y_bottom >= 60 && y_bottom <= 150 {
            console::print("pixel block ("); console::printint(x_left as i32); console::print(", "); console::printint(y_top as i32); ////
            console::print("), ("); console::printint(x_right as i32); console::print(", "); console::printint(y_bottom as i32); console::print(")\n"); ////    
        } */
    }
   1572a:	f7f5 f817 	bl	a75c <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>
   1572e:	e022      	b.n	15776 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x138>
        display.set_pixels(
   15730:	f89d 0b9f 	ldrb.w	r0, [sp, #2975]	; 0xb9f
   15734:	f7f3 fa1a 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   15738:	f88d 0b9e 	strb.w	r0, [sp, #2974]	; 0xb9e
   1573c:	e7ff      	b.n	1573e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x100>
            colors) ? ;
   1573e:	f89d 0b9e 	ldrb.w	r0, [sp, #2974]	; 0xb9e
   15742:	07c1      	lsls	r1, r0, #31
   15744:	2900      	cmp	r1, #0
   15746:	d001      	beq.n	1574c <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x10e>
   15748:	e7ff      	b.n	1574a <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x10c>
   1574a:	e001      	b.n	15750 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x112>
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   1574c:	e7bc      	b.n	156c8 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x8a>
        display.set_pixels(
   1574e:	defe      	udf	#254	; 0xfe
            colors) ? ;
   15750:	f7fc fc21 	bl	11f96 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   15754:	e004      	b.n	15760 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x122>
    Ok(())
}
   15756:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
   1575a:	f50d 6d48 	add.w	sp, sp, #3200	; 0xc80
   1575e:	bdb0      	pop	{r4, r5, r7, pc}
            colors) ? ;
   15760:	f7ff feaa 	bl	154b8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   15764:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
   15768:	e7ff      	b.n	1576a <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x12c>
   1576a:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
    }
   1576e:	f7f4 fff5 	bl	a75c <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>
   15772:	e7ff      	b.n	15774 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x136>
}
   15774:	e7ef      	b.n	15756 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x118>
   15776:	2000      	movs	r0, #0
    Ok(())
   15778:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
}
   1577c:	e7eb      	b.n	15756 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x118>
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   1577e:	f8bd 0848 	ldrh.w	r0, [sp, #2120]	; 0x848
   15782:	f8ad 0c78 	strh.w	r0, [sp, #3192]	; 0xc78
   15786:	f8bd 184a 	ldrh.w	r1, [sp, #2122]	; 0x84a
   1578a:	f8ad 1c7a 	strh.w	r1, [sp, #3194]	; 0xc7a
   1578e:	f8bd 284c 	ldrh.w	r2, [sp, #2124]	; 0x84c
   15792:	f8ad 2c7c 	strh.w	r2, [sp, #3196]	; 0xc7c
   15796:	f8bd 384e 	ldrh.w	r3, [sp, #2126]	; 0x84e
   1579a:	f8ad 3c7e 	strh.w	r3, [sp, #3198]	; 0xc7e
   1579e:	f50d 6c2d 	add.w	ip, sp, #2768	; 0xad0
   157a2:	f20d 7e7c 	addw	lr, sp, #1916	; 0x77c
   157a6:	24cc      	movs	r4, #204	; 0xcc
   157a8:	9008      	str	r0, [sp, #32]
   157aa:	4660      	mov	r0, ip
   157ac:	9107      	str	r1, [sp, #28]
   157ae:	4671      	mov	r1, lr
   157b0:	9206      	str	r2, [sp, #24]
   157b2:	4622      	mov	r2, r4
   157b4:	9305      	str	r3, [sp, #20]
   157b6:	f8cd c010 	str.w	ip, [sp, #16]
   157ba:	9403      	str	r4, [sp, #12]
   157bc:	f008 fca8 	bl	1e110 <__aeabi_memcpy>
   157c0:	f50d 603a 	add.w	r0, sp, #2976	; 0xba0
            colors) ? ;
   157c4:	9002      	str	r0, [sp, #8]
   157c6:	9904      	ldr	r1, [sp, #16]
   157c8:	9a03      	ldr	r2, [sp, #12]
   157ca:	f008 fca1 	bl	1e110 <__aeabi_memcpy>
        display.set_pixels(
   157ce:	4668      	mov	r0, sp
   157d0:	9902      	ldr	r1, [sp, #8]
   157d2:	6041      	str	r1, [r0, #4]
   157d4:	9a05      	ldr	r2, [sp, #20]
   157d6:	6002      	str	r2, [r0, #0]
   157d8:	980e      	ldr	r0, [sp, #56]	; 0x38
   157da:	9908      	ldr	r1, [sp, #32]
   157dc:	9a06      	ldr	r2, [sp, #24]
   157de:	9b07      	ldr	r3, [sp, #28]
   157e0:	f7f4 f809 	bl	97f6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E>
   157e4:	f88d 0b9f 	strb.w	r0, [sp, #2975]	; 0xb9f
   157e8:	e7a2      	b.n	15730 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xf2>
   157ea:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   157ee:	f7f4 ffd8 	bl	a7a2 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>
   157f2:	e7c4      	b.n	1577e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x140>

000157f4 <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E>:

/// Batch the pixels into Pixel Rows, which are contiguous pixels on the same row.
/// P can be any Pixel Iterator (e.g. a rectangle).
fn to_rows<P>(pixels: P) -> RowIterator<P>
   157f4:	b5b0      	push	{r4, r5, r7, lr}
   157f6:	b0a4      	sub	sp, #144	; 0x90
   157f8:	aa01      	add	r2, sp, #4
where
    P: Iterator<Item = Pixel<Rgb565>>, {
    RowIterator::<P> {
        pixels,
   157fa:	e8b1 5018 	ldmia.w	r1!, {r3, r4, ip, lr}
   157fe:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
   15802:	e891 5038 	ldmia.w	r1, {r3, r4, r5, ip, lr}
   15806:	e882 5038 	stmia.w	r2, {r3, r4, r5, ip, lr}
   1580a:	a90a      	add	r1, sp, #40	; 0x28
        x_left: 0,
        x_right: 0,
        y: 0,
        colors: RowColors::new(),
   1580c:	9000      	str	r0, [sp, #0]
   1580e:	4608      	mov	r0, r1
   15810:	f7ff f948 	bl	14aa4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E>
   15814:	e7ff      	b.n	15816 <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E+0x22>
   15816:	a801      	add	r0, sp, #4
    RowIterator::<P> {
   15818:	9900      	ldr	r1, [sp, #0]
   1581a:	e8b0 500c 	ldmia.w	r0!, {r2, r3, ip, lr}
   1581e:	e8a1 500c 	stmia.w	r1!, {r2, r3, ip, lr}
   15822:	e890 501c 	ldmia.w	r0, {r2, r3, r4, ip, lr}
   15826:	e881 501c 	stmia.w	r1, {r2, r3, r4, ip, lr}
   1582a:	2000      	movs	r0, #0
   1582c:	9900      	ldr	r1, [sp, #0]
   1582e:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
   15832:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
   15836:	f8a1 0090 	strh.w	r0, [r1, #144]	; 0x90
   1583a:	f101 0024 	add.w	r0, r1, #36	; 0x24
   1583e:	a90a      	add	r1, sp, #40	; 0x28
   15840:	2268      	movs	r2, #104	; 0x68
   15842:	f008 fc65 	bl	1e110 <__aeabi_memcpy>
   15846:	2001      	movs	r0, #1
   15848:	9900      	ldr	r1, [sp, #0]
   1584a:	f881 0092 	strb.w	r0, [r1, #146]	; 0x92
        first_pixel: true,
    }
}
   1584e:	b024      	add	sp, #144	; 0x90
   15850:	bdb0      	pop	{r4, r5, r7, pc}

00015852 <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E>:

/// Batch the Pixel Rows into Pixel Blocks, which are contiguous Pixel Rows with the same start and end column number
/// R can be any Pixel Row Iterator.
fn to_blocks<R>(rows: R) -> BlockIterator<R>
   15852:	b580      	push	{r7, lr}
   15854:	b0da      	sub	sp, #360	; 0x168
   15856:	aa02      	add	r2, sp, #8
   15858:	2394      	movs	r3, #148	; 0x94
where
    R: Iterator<Item = PixelRow>, {
    BlockIterator::<R> {
        rows,
   1585a:	9001      	str	r0, [sp, #4]
   1585c:	4610      	mov	r0, r2
   1585e:	461a      	mov	r2, r3
   15860:	f008 fc56 	bl	1e110 <__aeabi_memcpy>
   15864:	a827      	add	r0, sp, #156	; 0x9c
        x_left: 0,
        x_right: 0,
        y_top: 0,
        y_bottom: 0,
        colors: BlockColors::new(),
   15866:	f7ff f92c 	bl	14ac2 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE>
   1586a:	e7ff      	b.n	1586c <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E+0x1a>
   1586c:	a902      	add	r1, sp, #8
   1586e:	2294      	movs	r2, #148	; 0x94
    BlockIterator::<R> {
   15870:	9801      	ldr	r0, [sp, #4]
   15872:	f008 fc4d 	bl	1e110 <__aeabi_memcpy>
   15876:	2000      	movs	r0, #0
   15878:	9901      	ldr	r1, [sp, #4]
   1587a:	f8a1 0160 	strh.w	r0, [r1, #352]	; 0x160
   1587e:	f8a1 0162 	strh.w	r0, [r1, #354]	; 0x162
   15882:	f8a1 0164 	strh.w	r0, [r1, #356]	; 0x164
   15886:	f8a1 0166 	strh.w	r0, [r1, #358]	; 0x166
   1588a:	f101 0094 	add.w	r0, r1, #148	; 0x94
   1588e:	a927      	add	r1, sp, #156	; 0x9c
   15890:	22cc      	movs	r2, #204	; 0xcc
   15892:	f008 fc3d 	bl	1e110 <__aeabi_memcpy>
   15896:	2001      	movs	r0, #1
   15898:	9901      	ldr	r1, [sp, #4]
   1589a:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
        first_row: true,
    }
}    
   1589e:	b05a      	add	sp, #360	; 0x168
   158a0:	bd80      	pop	{r7, pc}

000158a2 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E>:
impl<P: Iterator<Item = Pixel<Rgb565>>> Iterator for RowIterator<P> {
    /// This Iterator returns Pixel Rows
    type Item = PixelRow;

    /// Return the next Pixel Row of contiguous pixels on the same row
    fn next(&mut self) -> Option<Self::Item> {
   158a2:	b580      	push	{r7, lr}
   158a4:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
   158a8:	91c1      	str	r1, [sp, #772]	; 0x304
        //  Loop over all pixels until we have composed a Pixel Row, or we have run out of pixels.
        loop {
   158aa:	9116      	str	r1, [sp, #88]	; 0x58
   158ac:	9015      	str	r0, [sp, #84]	; 0x54
   158ae:	e7ff      	b.n	158b0 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xe>
   158b0:	a817      	add	r0, sp, #92	; 0x5c
            //  Get the next pixel.
            let next_pixel = self.pixels.next();
   158b2:	9916      	ldr	r1, [sp, #88]	; 0x58
   158b4:	f000 fd34 	bl	16320 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE>
   158b8:	e7ff      	b.n	158ba <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x18>
            match next_pixel {
                None => {  //  If no more pixels...
   158ba:	9817      	ldr	r0, [sp, #92]	; 0x5c
   158bc:	2800      	cmp	r0, #0
   158be:	d01c      	beq.n	158fa <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x58>
   158c0:	e7ff      	b.n	158c2 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x20>
                    };
                    self.colors.clear();
                    self.first_pixel = true;
                    return Some(row);
                }
                Some(Pixel(coord, color)) => {  //  If there is a pixel...
   158c2:	9818      	ldr	r0, [sp, #96]	; 0x60
   158c4:	9919      	ldr	r1, [sp, #100]	; 0x64
   158c6:	90c2      	str	r0, [sp, #776]	; 0x308
   158c8:	91c3      	str	r1, [sp, #780]	; 0x30c
   158ca:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   158ce:	4613      	mov	r3, r2
   158d0:	f8ad 2310 	strh.w	r2, [sp, #784]	; 0x310
                    let x = coord.0 as u16;
   158d4:	f8ad 0312 	strh.w	r0, [sp, #786]	; 0x312
                    let y = coord.1 as u16;
   158d8:	f8ad 1314 	strh.w	r1, [sp, #788]	; 0x314
                    let color = color.0;
   158dc:	f8ad 2316 	strh.w	r2, [sp, #790]	; 0x316
                    //  Save the first pixel as the row start and handle next pixel.
                    if self.first_pixel {
   158e0:	9a16      	ldr	r2, [sp, #88]	; 0x58
   158e2:	f892 c092 	ldrb.w	ip, [r2, #146]	; 0x92
   158e6:	ea4f 7ccc 	mov.w	ip, ip, lsl #31
   158ea:	f1bc 0f00 	cmp.w	ip, #0
   158ee:	9014      	str	r0, [sp, #80]	; 0x50
   158f0:	9113      	str	r1, [sp, #76]	; 0x4c
   158f2:	9312      	str	r3, [sp, #72]	; 0x48
   158f4:	d156      	bne.n	159a4 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x102>
   158f6:	e04a      	b.n	1598e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xec>
            match next_pixel {
   158f8:	defe      	udf	#254	; 0xfe
                    if self.first_pixel {
   158fa:	9816      	ldr	r0, [sp, #88]	; 0x58
   158fc:	f890 1092 	ldrb.w	r1, [r0, #146]	; 0x92
   15900:	07c9      	lsls	r1, r1, #31
   15902:	2900      	cmp	r1, #0
   15904:	d111      	bne.n	1592a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x88>
   15906:	e7ff      	b.n	15908 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x66>
                        x_left: self.x_left,
   15908:	9816      	ldr	r0, [sp, #88]	; 0x58
   1590a:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
                        x_right: self.x_right,
   1590e:	f8b0 208e 	ldrh.w	r2, [r0, #142]	; 0x8e
                        y: self.y,
   15912:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
                        colors: self.colors.clone(),
   15916:	f100 0c24 	add.w	ip, r0, #36	; 0x24
   1591a:	a837      	add	r0, sp, #220	; 0xdc
   1591c:	9111      	str	r1, [sp, #68]	; 0x44
   1591e:	4661      	mov	r1, ip
   15920:	9210      	str	r2, [sp, #64]	; 0x40
   15922:	930f      	str	r3, [sp, #60]	; 0x3c
   15924:	f7ff f827 	bl	14976 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>
   15928:	e006      	b.n	15938 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x96>
   1592a:	2000      	movs	r0, #0
                        return None;  //  No pixels to group
   1592c:	9915      	ldr	r1, [sp, #84]	; 0x54
   1592e:	6008      	str	r0, [r1, #0]
   15930:	e7ff      	b.n	15932 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                        .expect("never");
                    return Some(row);
                }
            }
        }
    }
   15932:	f50d 7d46 	add.w	sp, sp, #792	; 0x318
   15936:	bd80      	pop	{r7, pc}
                    let row = PixelRow {
   15938:	9811      	ldr	r0, [sp, #68]	; 0x44
   1593a:	f8ad 00d4 	strh.w	r0, [sp, #212]	; 0xd4
   1593e:	9910      	ldr	r1, [sp, #64]	; 0x40
   15940:	f8ad 10d6 	strh.w	r1, [sp, #214]	; 0xd6
   15944:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15946:	f8ad 20d8 	strh.w	r2, [sp, #216]	; 0xd8
   1594a:	a81b      	add	r0, sp, #108	; 0x6c
   1594c:	a937      	add	r1, sp, #220	; 0xdc
   1594e:	2268      	movs	r2, #104	; 0x68
   15950:	f008 fbde 	bl	1e110 <__aeabi_memcpy>
                    self.colors.clear();
   15954:	9816      	ldr	r0, [sp, #88]	; 0x58
   15956:	3024      	adds	r0, #36	; 0x24
   15958:	f7ff f8d2 	bl	14b00 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   1595c:	e7ff      	b.n	1595e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xbc>
   1595e:	2001      	movs	r0, #1
                    self.first_pixel = true;
   15960:	9916      	ldr	r1, [sp, #88]	; 0x58
   15962:	f881 0092 	strb.w	r0, [r1, #146]	; 0x92
   15966:	aa51      	add	r2, sp, #324	; 0x144
   15968:	a91b      	add	r1, sp, #108	; 0x6c
   1596a:	2370      	movs	r3, #112	; 0x70
                    return Some(row);
   1596c:	900e      	str	r0, [sp, #56]	; 0x38
   1596e:	4610      	mov	r0, r2
   15970:	920d      	str	r2, [sp, #52]	; 0x34
   15972:	461a      	mov	r2, r3
   15974:	930c      	str	r3, [sp, #48]	; 0x30
   15976:	f008 fbcb 	bl	1e110 <__aeabi_memcpy>
   1597a:	9815      	ldr	r0, [sp, #84]	; 0x54
   1597c:	3004      	adds	r0, #4
   1597e:	990d      	ldr	r1, [sp, #52]	; 0x34
   15980:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15982:	f008 fbc5 	bl	1e110 <__aeabi_memcpy>
   15986:	980e      	ldr	r0, [sp, #56]	; 0x38
   15988:	9915      	ldr	r1, [sp, #84]	; 0x54
   1598a:	6008      	str	r0, [r1, #0]
   1598c:	e7d1      	b.n	15932 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                    if x == self.x_right + 1 && y == self.y {
   1598e:	9816      	ldr	r0, [sp, #88]	; 0x58
   15990:	f8b0 108e 	ldrh.w	r1, [r0, #142]	; 0x8e
   15994:	3101      	adds	r1, #1
   15996:	b28a      	uxth	r2, r1
   15998:	460b      	mov	r3, r1
   1599a:	428a      	cmp	r2, r1
   1599c:	930b      	str	r3, [sp, #44]	; 0x2c
   1599e:	f040 80b9 	bne.w	15b14 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x272>
   159a2:	e040      	b.n	15a26 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x184>
   159a4:	2000      	movs	r0, #0
                        self.first_pixel = false;
   159a6:	9916      	ldr	r1, [sp, #88]	; 0x58
   159a8:	f881 0092 	strb.w	r0, [r1, #146]	; 0x92
                        self.x_left = x;
   159ac:	9814      	ldr	r0, [sp, #80]	; 0x50
   159ae:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
                        self.x_right = x;
   159b2:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
                        self.y = y;
   159b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   159b8:	f8a1 2090 	strh.w	r2, [r1, #144]	; 0x90
                        self.colors.clear();
   159bc:	f101 0024 	add.w	r0, r1, #36	; 0x24
   159c0:	f7ff f89e 	bl	14b00 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   159c4:	e7ff      	b.n	159c6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x124>
                        self.colors.push(color)
   159c6:	9816      	ldr	r0, [sp, #88]	; 0x58
   159c8:	3024      	adds	r0, #36	; 0x24
   159ca:	9912      	ldr	r1, [sp, #72]	; 0x48
   159cc:	f7ff f888 	bl	14ae0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   159d0:	900a      	str	r0, [sp, #40]	; 0x28
   159d2:	9109      	str	r1, [sp, #36]	; 0x24
   159d4:	e7ff      	b.n	159d6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x134>
   159d6:	f241 007c 	movw	r0, #4220	; 0x107c
   159da:	f2c0 0002 	movt	r0, #2
   159de:	4669      	mov	r1, sp
   159e0:	6008      	str	r0, [r1, #0]
   159e2:	f241 0240 	movw	r2, #4160	; 0x1040
   159e6:	f2c0 0202 	movt	r2, #2
   159ea:	2305      	movs	r3, #5
   159ec:	980a      	ldr	r0, [sp, #40]	; 0x28
   159ee:	9909      	ldr	r1, [sp, #36]	; 0x24
   159f0:	f7ff fbe4 	bl	151bc <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>
   159f4:	e7ff      	b.n	159f6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x154>
                        continue;
   159f6:	e7ff      	b.n	159f8 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x156>
   159f8:	e75a      	b.n	158b0 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xe>
   159fa:	2001      	movs	r0, #1
                    if x == self.x_right + 1 && y == self.y {
   159fc:	f88d 01b7 	strb.w	r0, [sp, #439]	; 0x1b7
   15a00:	e00b      	b.n	15a1a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x178>
   15a02:	2000      	movs	r0, #0
   15a04:	f88d 01b7 	strb.w	r0, [sp, #439]	; 0x1b7
   15a08:	e007      	b.n	15a1a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x178>
   15a0a:	9816      	ldr	r0, [sp, #88]	; 0x58
   15a0c:	f8b0 1090 	ldrh.w	r1, [r0, #144]	; 0x90
   15a10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   15a12:	b293      	uxth	r3, r2
   15a14:	428b      	cmp	r3, r1
   15a16:	d0f0      	beq.n	159fa <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x158>
   15a18:	e7f3      	b.n	15a02 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x160>
   15a1a:	f89d 01b7 	ldrb.w	r0, [sp, #439]	; 0x1b7
   15a1e:	07c0      	lsls	r0, r0, #31
   15a20:	2800      	cmp	r0, #0
   15a22:	d107      	bne.n	15a34 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x192>
   15a24:	e020      	b.n	15a68 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1c6>
   15a26:	980b      	ldr	r0, [sp, #44]	; 0x2c
   15a28:	b281      	uxth	r1, r0
   15a2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   15a2c:	b293      	uxth	r3, r2
   15a2e:	428b      	cmp	r3, r1
   15a30:	d0eb      	beq.n	15a0a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x168>
   15a32:	e7e6      	b.n	15a02 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x160>
                        if self.colors.push(color).is_ok() {
   15a34:	9816      	ldr	r0, [sp, #88]	; 0x58
   15a36:	3024      	adds	r0, #36	; 0x24
   15a38:	9912      	ldr	r1, [sp, #72]	; 0x48
   15a3a:	f7ff f851 	bl	14ae0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   15a3e:	f8ad 11ba 	strh.w	r1, [sp, #442]	; 0x1ba
   15a42:	f8ad 01b8 	strh.w	r0, [sp, #440]	; 0x1b8
   15a46:	e7ff      	b.n	15a48 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1a6>
   15a48:	a86e      	add	r0, sp, #440	; 0x1b8
   15a4a:	f7ff fb92 	bl	15172 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE>
   15a4e:	9008      	str	r0, [sp, #32]
   15a50:	e7ff      	b.n	15a52 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1b0>
   15a52:	9808      	ldr	r0, [sp, #32]
   15a54:	07c1      	lsls	r1, r0, #31
   15a56:	2900      	cmp	r1, #0
   15a58:	d101      	bne.n	15a5e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1bc>
   15a5a:	e7ff      	b.n	15a5c <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1ba>
                    if x == self.x_right + 1 && y == self.y {
   15a5c:	e004      	b.n	15a68 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1c6>
                            self.x_right = x;
   15a5e:	9814      	ldr	r0, [sp, #80]	; 0x50
   15a60:	9916      	ldr	r1, [sp, #88]	; 0x58
   15a62:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
                            continue;
   15a66:	e7c7      	b.n	159f8 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x156>
                        x_left: self.x_left,
   15a68:	9816      	ldr	r0, [sp, #88]	; 0x58
   15a6a:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
                        x_right: self.x_right,
   15a6e:	f8b0 208e 	ldrh.w	r2, [r0, #142]	; 0x8e
                        y: self.y,
   15a72:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
                        colors: self.colors.clone(),
   15a76:	f100 0c24 	add.w	ip, r0, #36	; 0x24
   15a7a:	a88b      	add	r0, sp, #556	; 0x22c
   15a7c:	9107      	str	r1, [sp, #28]
   15a7e:	4661      	mov	r1, ip
   15a80:	9206      	str	r2, [sp, #24]
   15a82:	9305      	str	r3, [sp, #20]
   15a84:	f7fe ff77 	bl	14976 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>
   15a88:	e7ff      	b.n	15a8a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1e8>
                    let row = PixelRow {
   15a8a:	9807      	ldr	r0, [sp, #28]
   15a8c:	f8ad 0224 	strh.w	r0, [sp, #548]	; 0x224
   15a90:	9906      	ldr	r1, [sp, #24]
   15a92:	f8ad 1226 	strh.w	r1, [sp, #550]	; 0x226
   15a96:	9a05      	ldr	r2, [sp, #20]
   15a98:	f8ad 2228 	strh.w	r2, [sp, #552]	; 0x228
   15a9c:	a86f      	add	r0, sp, #444	; 0x1bc
   15a9e:	a98b      	add	r1, sp, #556	; 0x22c
   15aa0:	2268      	movs	r2, #104	; 0x68
   15aa2:	f008 fb35 	bl	1e110 <__aeabi_memcpy>
                    self.x_left = x;
   15aa6:	9814      	ldr	r0, [sp, #80]	; 0x50
   15aa8:	9916      	ldr	r1, [sp, #88]	; 0x58
   15aaa:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
                    self.x_right = x;
   15aae:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
                    self.y = y;
   15ab2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   15ab4:	f8a1 2090 	strh.w	r2, [r1, #144]	; 0x90
                    self.colors.clear();
   15ab8:	f101 0024 	add.w	r0, r1, #36	; 0x24
   15abc:	f7ff f820 	bl	14b00 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   15ac0:	e7ff      	b.n	15ac2 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x220>
                    self.colors.push(color)
   15ac2:	9816      	ldr	r0, [sp, #88]	; 0x58
   15ac4:	3024      	adds	r0, #36	; 0x24
   15ac6:	9912      	ldr	r1, [sp, #72]	; 0x48
   15ac8:	f7ff f80a 	bl	14ae0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   15acc:	9004      	str	r0, [sp, #16]
   15ace:	9103      	str	r1, [sp, #12]
   15ad0:	e7ff      	b.n	15ad2 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x230>
   15ad2:	f241 00bc 	movw	r0, #4284	; 0x10bc
   15ad6:	f2c0 0002 	movt	r0, #2
   15ada:	4669      	mov	r1, sp
   15adc:	6008      	str	r0, [r1, #0]
   15ade:	f241 0240 	movw	r2, #4160	; 0x1040
   15ae2:	f2c0 0202 	movt	r2, #2
   15ae6:	2305      	movs	r3, #5
   15ae8:	9804      	ldr	r0, [sp, #16]
   15aea:	9903      	ldr	r1, [sp, #12]
   15aec:	f7ff fb66 	bl	151bc <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>
   15af0:	e7ff      	b.n	15af2 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x250>
   15af2:	a8a5      	add	r0, sp, #660	; 0x294
   15af4:	a96f      	add	r1, sp, #444	; 0x1bc
   15af6:	2270      	movs	r2, #112	; 0x70
                    return Some(row);
   15af8:	9002      	str	r0, [sp, #8]
   15afa:	9201      	str	r2, [sp, #4]
   15afc:	f008 fb08 	bl	1e110 <__aeabi_memcpy>
   15b00:	9815      	ldr	r0, [sp, #84]	; 0x54
   15b02:	3004      	adds	r0, #4
   15b04:	9902      	ldr	r1, [sp, #8]
   15b06:	9a01      	ldr	r2, [sp, #4]
   15b08:	f008 fb02 	bl	1e110 <__aeabi_memcpy>
   15b0c:	2001      	movs	r0, #1
   15b0e:	9915      	ldr	r1, [sp, #84]	; 0x54
   15b10:	6008      	str	r0, [r1, #0]
   15b12:	e70e      	b.n	15932 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                    if x == self.x_right + 1 && y == self.y {
   15b14:	f241 00a0 	movw	r0, #4256	; 0x10a0
   15b18:	f2c0 0002 	movt	r0, #2
   15b1c:	f241 028c 	movw	r2, #4236	; 0x108c
   15b20:	f2c0 0202 	movt	r2, #2
   15b24:	211c      	movs	r1, #28
   15b26:	f001 ff1f 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15b2a:	defe      	udf	#254	; 0xfe

00015b2c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E>:
impl<R: Iterator<Item = PixelRow>> Iterator for BlockIterator<R> {
    /// This Iterator returns Pixel Blocks
    type Item = PixelBlock;

    /// Return the next Pixel Block of contiguous Pixel Rows with the same start and end column number
    fn next(&mut self) -> Option<Self::Item> {
   15b2c:	b580      	push	{r7, lr}
   15b2e:	f5ad 6dcb 	sub.w	sp, sp, #1624	; 0x658
   15b32:	f8cd 164c 	str.w	r1, [sp, #1612]	; 0x64c
   15b36:	2200      	movs	r2, #0
        //  Loop over all Pixel Rows until we have composed a Pixel Block, or we have run out of Pixel Rows.
        loop {
   15b38:	f88d 264b 	strb.w	r2, [sp, #1611]	; 0x64b
   15b3c:	911f      	str	r1, [sp, #124]	; 0x7c
   15b3e:	901e      	str	r0, [sp, #120]	; 0x78
   15b40:	e7ff      	b.n	15b42 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x16>
   15b42:	2001      	movs	r0, #1
            //  Get the next Pixel Row.
            let next_row = self.rows.next();
   15b44:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
   15b48:	a820      	add	r0, sp, #128	; 0x80
   15b4a:	991f      	ldr	r1, [sp, #124]	; 0x7c
   15b4c:	f7ff fea9 	bl	158a2 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E>
   15b50:	e7ff      	b.n	15b52 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x26>
            match next_row {
                None => {  //  If no more Pixel Rows...
   15b52:	9820      	ldr	r0, [sp, #128]	; 0x80
   15b54:	2800      	cmp	r0, #0
   15b56:	d026      	beq.n	15ba6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x7a>
   15b58:	e7ff      	b.n	15b5a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2e>
   15b5a:	a820      	add	r0, sp, #128	; 0x80
                    };
                    self.colors.clear();
                    self.first_row = true;
                    return Some(row);
                }
                Some(PixelRow { x_left, x_right, y, colors, .. }) => {  //  If there is a Pixel Row...
   15b5c:	1d01      	adds	r1, r0, #4
   15b5e:	f8bd 00ec 	ldrh.w	r0, [sp, #236]	; 0xec
   15b62:	4602      	mov	r2, r0
   15b64:	f8ad 0652 	strh.w	r0, [sp, #1618]	; 0x652
   15b68:	f8bd 00ee 	ldrh.w	r0, [sp, #238]	; 0xee
   15b6c:	4603      	mov	r3, r0
   15b6e:	f8ad 0654 	strh.w	r0, [sp, #1620]	; 0x654
   15b72:	f8bd 00f0 	ldrh.w	r0, [sp, #240]	; 0xf0
   15b76:	4684      	mov	ip, r0
   15b78:	f8ad 0656 	strh.w	r0, [sp, #1622]	; 0x656
   15b7c:	2000      	movs	r0, #0
   15b7e:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
   15b82:	a8da      	add	r0, sp, #872	; 0x368
   15b84:	f04f 0e68 	mov.w	lr, #104	; 0x68
   15b88:	921d      	str	r2, [sp, #116]	; 0x74
   15b8a:	4672      	mov	r2, lr
   15b8c:	931c      	str	r3, [sp, #112]	; 0x70
   15b8e:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
   15b92:	f008 fabd 	bl	1e110 <__aeabi_memcpy>
                    //  Save the first row as the block start and handle next block.
                    if self.first_row {
   15b96:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15b98:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
   15b9c:	07c9      	lsls	r1, r1, #31
   15b9e:	2900      	cmp	r1, #0
   15ba0:	d15a      	bne.n	15c58 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x12c>
   15ba2:	e04e      	b.n	15c42 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x116>
            match next_row {
   15ba4:	defe      	udf	#254	; 0xfe
                    if self.first_row {
   15ba6:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15ba8:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
   15bac:	07c9      	lsls	r1, r1, #31
   15bae:	2900      	cmp	r1, #0
   15bb0:	d115      	bne.n	15bde <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xb2>
   15bb2:	e7ff      	b.n	15bb4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x88>
                        x_left: self.x_left,
   15bb4:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15bb6:	f8b0 1160 	ldrh.w	r1, [r0, #352]	; 0x160
                        x_right: self.x_right,
   15bba:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
                        y_top: self.y_top,
   15bbe:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
                        y_bottom: self.y_bottom,
   15bc2:	f8b0 c166 	ldrh.w	ip, [r0, #358]	; 0x166
                        colors: self.colors.clone(),
   15bc6:	f100 0e94 	add.w	lr, r0, #148	; 0x94
   15bca:	a872      	add	r0, sp, #456	; 0x1c8
   15bcc:	911a      	str	r1, [sp, #104]	; 0x68
   15bce:	4671      	mov	r1, lr
   15bd0:	9219      	str	r2, [sp, #100]	; 0x64
   15bd2:	9318      	str	r3, [sp, #96]	; 0x60
   15bd4:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
   15bd8:	f7fe fedd 	bl	14996 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>
   15bdc:	e003      	b.n	15be6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xba>
   15bde:	2000      	movs	r0, #0
                        return None;  //  No rows to group
   15be0:	991e      	ldr	r1, [sp, #120]	; 0x78
   15be2:	6008      	str	r0, [r1, #0]
   15be4:	e153      	b.n	15e8e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
                    let row = PixelBlock {
   15be6:	981a      	ldr	r0, [sp, #104]	; 0x68
   15be8:	f8ad 01c0 	strh.w	r0, [sp, #448]	; 0x1c0
   15bec:	9919      	ldr	r1, [sp, #100]	; 0x64
   15bee:	f8ad 11c2 	strh.w	r1, [sp, #450]	; 0x1c2
   15bf2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   15bf4:	f8ad 21c4 	strh.w	r2, [sp, #452]	; 0x1c4
   15bf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15bfa:	f8ad 31c6 	strh.w	r3, [sp, #454]	; 0x1c6
   15bfe:	a83d      	add	r0, sp, #244	; 0xf4
   15c00:	a972      	add	r1, sp, #456	; 0x1c8
   15c02:	22cc      	movs	r2, #204	; 0xcc
   15c04:	f008 fa84 	bl	1e110 <__aeabi_memcpy>
                    self.colors.clear();
   15c08:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15c0a:	3094      	adds	r0, #148	; 0x94
   15c0c:	f7fe ff80 	bl	14b10 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   15c10:	e7ff      	b.n	15c12 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xe6>
   15c12:	2001      	movs	r0, #1
                    self.first_row = true;
   15c14:	991f      	ldr	r1, [sp, #124]	; 0x7c
   15c16:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
   15c1a:	aaa5      	add	r2, sp, #660	; 0x294
   15c1c:	a93d      	add	r1, sp, #244	; 0xf4
   15c1e:	23d4      	movs	r3, #212	; 0xd4
                    return Some(row);
   15c20:	9016      	str	r0, [sp, #88]	; 0x58
   15c22:	4610      	mov	r0, r2
   15c24:	9215      	str	r2, [sp, #84]	; 0x54
   15c26:	461a      	mov	r2, r3
   15c28:	9314      	str	r3, [sp, #80]	; 0x50
   15c2a:	f008 fa71 	bl	1e110 <__aeabi_memcpy>
   15c2e:	981e      	ldr	r0, [sp, #120]	; 0x78
   15c30:	3004      	adds	r0, #4
   15c32:	9915      	ldr	r1, [sp, #84]	; 0x54
   15c34:	9a14      	ldr	r2, [sp, #80]	; 0x50
   15c36:	f008 fa6b 	bl	1e110 <__aeabi_memcpy>
   15c3a:	9816      	ldr	r0, [sp, #88]	; 0x58
   15c3c:	991e      	ldr	r1, [sp, #120]	; 0x78
   15c3e:	6008      	str	r0, [r1, #0]
   15c40:	e125      	b.n	15e8e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
                        self.colors.extend_from_slice(&colors)
                            .expect("never");
                        continue;
                    }
                    //  If this row is adjacent to the previous row and same size, add to the block.
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   15c42:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15c44:	f8b0 1166 	ldrh.w	r1, [r0, #358]	; 0x166
   15c48:	3101      	adds	r1, #1
   15c4a:	b28a      	uxth	r2, r1
   15c4c:	460b      	mov	r3, r1
   15c4e:	428a      	cmp	r2, r1
   15c50:	9313      	str	r3, [sp, #76]	; 0x4c
   15c52:	f040 8128 	bne.w	15ea6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x37a>
   15c56:	e069      	b.n	15d2c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x200>
   15c58:	2000      	movs	r0, #0
                        self.first_row = false;
   15c5a:	991f      	ldr	r1, [sp, #124]	; 0x7c
   15c5c:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
                        self.x_left = x_left;
   15c60:	981d      	ldr	r0, [sp, #116]	; 0x74
   15c62:	f8a1 0160 	strh.w	r0, [r1, #352]	; 0x160
                        self.x_right = x_right;
   15c66:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   15c68:	f8a1 2162 	strh.w	r2, [r1, #354]	; 0x162
                        self.y_top = y;
   15c6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   15c6e:	f8a1 3164 	strh.w	r3, [r1, #356]	; 0x164
                        self.y_bottom = y;
   15c72:	f8a1 3166 	strh.w	r3, [r1, #358]	; 0x166
                        self.colors.clear();
   15c76:	f101 0094 	add.w	r0, r1, #148	; 0x94
   15c7a:	f7fe ff49 	bl	14b10 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   15c7e:	e7ff      	b.n	15c80 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x154>
                        self.colors.extend_from_slice(&colors)
   15c80:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15c82:	f100 0194 	add.w	r1, r0, #148	; 0x94
   15c86:	a8da      	add	r0, sp, #872	; 0x368
   15c88:	9112      	str	r1, [sp, #72]	; 0x48
   15c8a:	f7fe feb4 	bl	149f6 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   15c8e:	9011      	str	r0, [sp, #68]	; 0x44
   15c90:	9110      	str	r1, [sp, #64]	; 0x40
   15c92:	e7ff      	b.n	15c94 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x168>
   15c94:	9812      	ldr	r0, [sp, #72]	; 0x48
   15c96:	9911      	ldr	r1, [sp, #68]	; 0x44
   15c98:	9a10      	ldr	r2, [sp, #64]	; 0x40
   15c9a:	f7fe fef5 	bl	14a88 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   15c9e:	900f      	str	r0, [sp, #60]	; 0x3c
   15ca0:	e7ff      	b.n	15ca2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x176>
   15ca2:	980f      	ldr	r0, [sp, #60]	; 0x3c
   15ca4:	f000 0001 	and.w	r0, r0, #1
   15ca8:	f241 0140 	movw	r1, #4160	; 0x1040
   15cac:	f2c0 0102 	movt	r1, #2
   15cb0:	f241 03cc 	movw	r3, #4300	; 0x10cc
   15cb4:	f2c0 0302 	movt	r3, #2
   15cb8:	2205      	movs	r2, #5
   15cba:	f7ff fab0 	bl	1521e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   15cbe:	e7ff      	b.n	15cc0 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x194>
                        continue;
   15cc0:	e7ff      	b.n	15cc2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x196>
   15cc2:	a8da      	add	r0, sp, #872	; 0x368
                    self.colors.clear();
                    self.colors.extend_from_slice(&colors)
                        .expect("never");
                    return Some(row);
                }
            }
   15cc4:	f7f4 fd65 	bl	a792 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   15cc8:	e7ff      	b.n	15cca <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x19e>
        }
   15cca:	9820      	ldr	r0, [sp, #128]	; 0x80
   15ccc:	2801      	cmp	r0, #1
   15cce:	f000 80e2 	beq.w	15e96 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x36a>
   15cd2:	e0e4      	b.n	15e9e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x372>
   15cd4:	2001      	movs	r0, #1
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   15cd6:	f88d 03d1 	strb.w	r0, [sp, #977]	; 0x3d1
   15cda:	e00b      	b.n	15cf4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1c8>
   15cdc:	2000      	movs	r0, #0
   15cde:	f88d 03d1 	strb.w	r0, [sp, #977]	; 0x3d1
   15ce2:	e007      	b.n	15cf4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1c8>
   15ce4:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15ce6:	f8b0 1162 	ldrh.w	r1, [r0, #354]	; 0x162
   15cea:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   15cec:	b293      	uxth	r3, r2
   15cee:	428b      	cmp	r3, r1
   15cf0:	d0f0      	beq.n	15cd4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1a8>
   15cf2:	e7f3      	b.n	15cdc <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b0>
   15cf4:	f89d 03d1 	ldrb.w	r0, [sp, #977]	; 0x3d1
   15cf8:	07c0      	lsls	r0, r0, #31
   15cfa:	2800      	cmp	r0, #0
   15cfc:	d11d      	bne.n	15d3a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x20e>
   15cfe:	e03f      	b.n	15d80 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x254>
   15d00:	2001      	movs	r0, #1
   15d02:	f88d 03d2 	strb.w	r0, [sp, #978]	; 0x3d2
   15d06:	e00b      	b.n	15d20 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1f4>
   15d08:	2000      	movs	r0, #0
   15d0a:	f88d 03d2 	strb.w	r0, [sp, #978]	; 0x3d2
   15d0e:	e007      	b.n	15d20 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1f4>
   15d10:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15d12:	f8b0 1160 	ldrh.w	r1, [r0, #352]	; 0x160
   15d16:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   15d18:	b293      	uxth	r3, r2
   15d1a:	428b      	cmp	r3, r1
   15d1c:	d0f0      	beq.n	15d00 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1d4>
   15d1e:	e7f3      	b.n	15d08 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1dc>
   15d20:	f89d 03d2 	ldrb.w	r0, [sp, #978]	; 0x3d2
   15d24:	07c0      	lsls	r0, r0, #31
   15d26:	2800      	cmp	r0, #0
   15d28:	d1dc      	bne.n	15ce4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b8>
   15d2a:	e7d7      	b.n	15cdc <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b0>
   15d2c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   15d2e:	b281      	uxth	r1, r0
   15d30:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   15d32:	b293      	uxth	r3, r2
   15d34:	428b      	cmp	r3, r1
   15d36:	d0eb      	beq.n	15d10 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1e4>
   15d38:	e7e6      	b.n	15d08 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1dc>
                        if self.colors.extend_from_slice(&colors).is_ok() {
   15d3a:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15d3c:	f100 0194 	add.w	r1, r0, #148	; 0x94
   15d40:	a8da      	add	r0, sp, #872	; 0x368
   15d42:	910e      	str	r1, [sp, #56]	; 0x38
   15d44:	f7fe fe57 	bl	149f6 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   15d48:	900d      	str	r0, [sp, #52]	; 0x34
   15d4a:	910c      	str	r1, [sp, #48]	; 0x30
   15d4c:	e7ff      	b.n	15d4e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x222>
   15d4e:	980e      	ldr	r0, [sp, #56]	; 0x38
   15d50:	990d      	ldr	r1, [sp, #52]	; 0x34
   15d52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15d54:	f7fe fe98 	bl	14a88 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   15d58:	f88d 03d3 	strb.w	r0, [sp, #979]	; 0x3d3
   15d5c:	e7ff      	b.n	15d5e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x232>
   15d5e:	f20d 30d3 	addw	r0, sp, #979	; 0x3d3
   15d62:	f7ff fa18 	bl	15196 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E>
   15d66:	900b      	str	r0, [sp, #44]	; 0x2c
   15d68:	e7ff      	b.n	15d6a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x23e>
   15d6a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   15d6c:	07c1      	lsls	r1, r0, #31
   15d6e:	2900      	cmp	r1, #0
   15d70:	d101      	bne.n	15d76 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x24a>
   15d72:	e7ff      	b.n	15d74 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x248>
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   15d74:	e004      	b.n	15d80 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x254>
                            self.y_bottom = y;
   15d76:	981b      	ldr	r0, [sp, #108]	; 0x6c
   15d78:	991f      	ldr	r1, [sp, #124]	; 0x7c
   15d7a:	f8a1 0166 	strh.w	r0, [r1, #358]	; 0x166
                            continue;    
   15d7e:	e7a0      	b.n	15cc2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x196>
                        x_left: self.x_left,
   15d80:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15d82:	f8b0 1160 	ldrh.w	r1, [r0, #352]	; 0x160
                        x_right: self.x_right,
   15d86:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
                        y_top: self.y_top,
   15d8a:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
                        y_bottom: self.y_bottom,
   15d8e:	f8b0 c166 	ldrh.w	ip, [r0, #358]	; 0x166
                        colors: self.colors.clone(),
   15d92:	f100 0e94 	add.w	lr, r0, #148	; 0x94
   15d96:	f50d 6095 	add.w	r0, sp, #1192	; 0x4a8
   15d9a:	910a      	str	r1, [sp, #40]	; 0x28
   15d9c:	4671      	mov	r1, lr
   15d9e:	9209      	str	r2, [sp, #36]	; 0x24
   15da0:	9308      	str	r3, [sp, #32]
   15da2:	f8cd c01c 	str.w	ip, [sp, #28]
   15da6:	f7fe fdf6 	bl	14996 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>
   15daa:	e7ff      	b.n	15dac <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x280>
                    let row = PixelBlock {
   15dac:	980a      	ldr	r0, [sp, #40]	; 0x28
   15dae:	f8ad 04a0 	strh.w	r0, [sp, #1184]	; 0x4a0
   15db2:	9909      	ldr	r1, [sp, #36]	; 0x24
   15db4:	f8ad 14a2 	strh.w	r1, [sp, #1186]	; 0x4a2
   15db8:	9a08      	ldr	r2, [sp, #32]
   15dba:	f8ad 24a4 	strh.w	r2, [sp, #1188]	; 0x4a4
   15dbe:	9b07      	ldr	r3, [sp, #28]
   15dc0:	f8ad 34a6 	strh.w	r3, [sp, #1190]	; 0x4a6
   15dc4:	a8f5      	add	r0, sp, #980	; 0x3d4
   15dc6:	f50d 6195 	add.w	r1, sp, #1192	; 0x4a8
   15dca:	22cc      	movs	r2, #204	; 0xcc
   15dcc:	f008 f9a0 	bl	1e110 <__aeabi_memcpy>
                    self.x_left = x_left;
   15dd0:	981d      	ldr	r0, [sp, #116]	; 0x74
   15dd2:	991f      	ldr	r1, [sp, #124]	; 0x7c
   15dd4:	f8a1 0160 	strh.w	r0, [r1, #352]	; 0x160
                    self.x_right = x_right;
   15dd8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   15dda:	f8a1 2162 	strh.w	r2, [r1, #354]	; 0x162
                    self.y_top = y;
   15dde:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   15de0:	f8a1 3164 	strh.w	r3, [r1, #356]	; 0x164
                    self.y_bottom = y;
   15de4:	f8a1 3166 	strh.w	r3, [r1, #358]	; 0x166
                    self.colors.clear();
   15de8:	f101 0094 	add.w	r0, r1, #148	; 0x94
   15dec:	f7fe fe90 	bl	14b10 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   15df0:	e7ff      	b.n	15df2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2c6>
                    self.colors.extend_from_slice(&colors)
   15df2:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15df4:	f100 0194 	add.w	r1, r0, #148	; 0x94
   15df8:	a8da      	add	r0, sp, #872	; 0x368
   15dfa:	9106      	str	r1, [sp, #24]
   15dfc:	f7fe fdfb 	bl	149f6 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   15e00:	9005      	str	r0, [sp, #20]
   15e02:	9104      	str	r1, [sp, #16]
   15e04:	e7ff      	b.n	15e06 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2da>
   15e06:	9806      	ldr	r0, [sp, #24]
   15e08:	9905      	ldr	r1, [sp, #20]
   15e0a:	9a04      	ldr	r2, [sp, #16]
   15e0c:	f7fe fe3c 	bl	14a88 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   15e10:	9003      	str	r0, [sp, #12]
   15e12:	e7ff      	b.n	15e14 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2e8>
   15e14:	9803      	ldr	r0, [sp, #12]
   15e16:	f000 0001 	and.w	r0, r0, #1
   15e1a:	f241 0140 	movw	r1, #4160	; 0x1040
   15e1e:	f2c0 0102 	movt	r1, #2
   15e22:	f241 03ec 	movw	r3, #4332	; 0x10ec
   15e26:	f2c0 0302 	movt	r3, #2
   15e2a:	2205      	movs	r2, #5
   15e2c:	f7ff f9f7 	bl	1521e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   15e30:	e7ff      	b.n	15e32 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x306>
   15e32:	f20d 5074 	addw	r0, sp, #1396	; 0x574
   15e36:	a9f5      	add	r1, sp, #980	; 0x3d4
   15e38:	22d4      	movs	r2, #212	; 0xd4
                    return Some(row);
   15e3a:	9002      	str	r0, [sp, #8]
   15e3c:	9201      	str	r2, [sp, #4]
   15e3e:	f008 f967 	bl	1e110 <__aeabi_memcpy>
   15e42:	981e      	ldr	r0, [sp, #120]	; 0x78
   15e44:	3004      	adds	r0, #4
   15e46:	9902      	ldr	r1, [sp, #8]
   15e48:	9a01      	ldr	r2, [sp, #4]
   15e4a:	f008 f961 	bl	1e110 <__aeabi_memcpy>
   15e4e:	2001      	movs	r0, #1
   15e50:	991e      	ldr	r1, [sp, #120]	; 0x78
   15e52:	6008      	str	r0, [r1, #0]
   15e54:	a8da      	add	r0, sp, #872	; 0x368
            }
   15e56:	f7f4 fc9c 	bl	a792 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   15e5a:	e7ff      	b.n	15e5c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x330>
                    return Some(row);
   15e5c:	e017      	b.n	15e8e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
   15e5e:	2000      	movs	r0, #0
        }
   15e60:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
    }
   15e64:	f50d 6dcb 	add.w	sp, sp, #1624	; 0x658
   15e68:	bd80      	pop	{r7, pc}
        }
   15e6a:	f89d 064b 	ldrb.w	r0, [sp, #1611]	; 0x64b
   15e6e:	07c0      	lsls	r0, r0, #31
   15e70:	2800      	cmp	r0, #0
   15e72:	d0f4      	beq.n	15e5e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   15e74:	e7ff      	b.n	15e76 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x34a>
   15e76:	2000      	movs	r0, #0
   15e78:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
   15e7c:	a820      	add	r0, sp, #128	; 0x80
   15e7e:	3004      	adds	r0, #4
   15e80:	f7f4 fc87 	bl	a792 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   15e84:	e7eb      	b.n	15e5e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   15e86:	a820      	add	r0, sp, #128	; 0x80
   15e88:	f7f4 fc48 	bl	a71c <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>
   15e8c:	e7e7      	b.n	15e5e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   15e8e:	9820      	ldr	r0, [sp, #128]	; 0x80
   15e90:	2801      	cmp	r0, #1
   15e92:	d0ea      	beq.n	15e6a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x33e>
   15e94:	e7f7      	b.n	15e86 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x35a>
   15e96:	2000      	movs	r0, #0
   15e98:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
                        continue;
   15e9c:	e651      	b.n	15b42 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x16>
   15e9e:	a820      	add	r0, sp, #128	; 0x80
        }
   15ea0:	f7f4 fc3c 	bl	a71c <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>
   15ea4:	e7f7      	b.n	15e96 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x36a>
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   15ea6:	f241 00a0 	movw	r0, #4256	; 0x10a0
   15eaa:	f2c0 0002 	movt	r0, #2
   15eae:	f241 02dc 	movw	r2, #4316	; 0x10dc
   15eb2:	f2c0 0202 	movt	r2, #2
   15eb6:	211c      	movs	r1, #28
   15eb8:	f001 fd56 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15ebc:	defe      	udf	#254	; 0xfe

00015ebe <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>:
   15ebe:	b081      	sub	sp, #4
   15ec0:	9000      	str	r0, [sp, #0]
   15ec2:	8800      	ldrh	r0, [r0, #0]
   15ec4:	b001      	add	sp, #4
   15ec6:	4770      	bx	lr

00015ec8 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE>:
   15ec8:	b580      	push	{r7, lr}
   15eca:	b08c      	sub	sp, #48	; 0x30
   15ecc:	9009      	str	r0, [sp, #36]	; 0x24
   15ece:	910a      	str	r1, [sp, #40]	; 0x28
   15ed0:	920b      	str	r2, [sp, #44]	; 0x2c
   15ed2:	9006      	str	r0, [sp, #24]
   15ed4:	4608      	mov	r0, r1
   15ed6:	9105      	str	r1, [sp, #20]
   15ed8:	4611      	mov	r1, r2
   15eda:	9204      	str	r2, [sp, #16]
   15edc:	f000 f89f 	bl	1601e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15ee0:	9003      	str	r0, [sp, #12]
   15ee2:	e7ff      	b.n	15ee4 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE+0x1c>
   15ee4:	9806      	ldr	r0, [sp, #24]
   15ee6:	9007      	str	r0, [sp, #28]
   15ee8:	9903      	ldr	r1, [sp, #12]
   15eea:	9108      	str	r1, [sp, #32]
   15eec:	9807      	ldr	r0, [sp, #28]
   15eee:	9908      	ldr	r1, [sp, #32]
   15ef0:	9a05      	ldr	r2, [sp, #20]
   15ef2:	9b04      	ldr	r3, [sp, #16]
   15ef4:	f000 f82d 	bl	15f52 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE>
   15ef8:	9002      	str	r0, [sp, #8]
   15efa:	9101      	str	r1, [sp, #4]
   15efc:	e7ff      	b.n	15efe <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE+0x36>
   15efe:	9802      	ldr	r0, [sp, #8]
   15f00:	9901      	ldr	r1, [sp, #4]
   15f02:	b00c      	add	sp, #48	; 0x30
   15f04:	bd80      	pop	{r7, pc}

00015f06 <_ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E>:
   15f06:	b083      	sub	sp, #12
   15f08:	9001      	str	r0, [sp, #4]
   15f0a:	9102      	str	r1, [sp, #8]
   15f0c:	b003      	add	sp, #12
   15f0e:	4770      	bx	lr

00015f10 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E>:
   15f10:	b580      	push	{r7, lr}
   15f12:	b08a      	sub	sp, #40	; 0x28
   15f14:	9006      	str	r0, [sp, #24]
   15f16:	9107      	str	r1, [sp, #28]
   15f18:	9208      	str	r2, [sp, #32]
   15f1a:	9309      	str	r3, [sp, #36]	; 0x24
   15f1c:	9005      	str	r0, [sp, #20]
   15f1e:	4610      	mov	r0, r2
   15f20:	9104      	str	r1, [sp, #16]
   15f22:	4619      	mov	r1, r3
   15f24:	f000 f864 	bl	15ff0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>
   15f28:	9003      	str	r0, [sp, #12]
   15f2a:	e7ff      	b.n	15f2c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x1c>
   15f2c:	9803      	ldr	r0, [sp, #12]
   15f2e:	9905      	ldr	r1, [sp, #20]
   15f30:	f000 f96e 	bl	16210 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   15f34:	9002      	str	r0, [sp, #8]
   15f36:	e7ff      	b.n	15f38 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x28>
   15f38:	9804      	ldr	r0, [sp, #16]
   15f3a:	9905      	ldr	r1, [sp, #20]
   15f3c:	1a41      	subs	r1, r0, r1
   15f3e:	9802      	ldr	r0, [sp, #8]
   15f40:	f000 f849 	bl	15fd6 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   15f44:	9001      	str	r0, [sp, #4]
   15f46:	9100      	str	r1, [sp, #0]
   15f48:	e7ff      	b.n	15f4a <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x3a>
   15f4a:	9801      	ldr	r0, [sp, #4]
   15f4c:	9900      	ldr	r1, [sp, #0]
   15f4e:	b00a      	add	sp, #40	; 0x28
   15f50:	bd80      	pop	{r7, pc}

00015f52 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE>:
   15f52:	b580      	push	{r7, lr}
   15f54:	b08c      	sub	sp, #48	; 0x30
   15f56:	9008      	str	r0, [sp, #32]
   15f58:	9109      	str	r1, [sp, #36]	; 0x24
   15f5a:	920a      	str	r2, [sp, #40]	; 0x28
   15f5c:	930b      	str	r3, [sp, #44]	; 0x2c
   15f5e:	4288      	cmp	r0, r1
   15f60:	9307      	str	r3, [sp, #28]
   15f62:	9206      	str	r2, [sp, #24]
   15f64:	9105      	str	r1, [sp, #20]
   15f66:	9004      	str	r0, [sp, #16]
   15f68:	d806      	bhi.n	15f78 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x26>
   15f6a:	e7ff      	b.n	15f6c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x1a>
   15f6c:	9806      	ldr	r0, [sp, #24]
   15f6e:	9907      	ldr	r1, [sp, #28]
   15f70:	f000 f855 	bl	1601e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15f74:	9003      	str	r0, [sp, #12]
   15f76:	e004      	b.n	15f82 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x30>
   15f78:	9804      	ldr	r0, [sp, #16]
   15f7a:	9905      	ldr	r1, [sp, #20]
   15f7c:	f002 fc69 	bl	18852 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   15f80:	defe      	udf	#254	; 0xfe
   15f82:	9805      	ldr	r0, [sp, #20]
   15f84:	9903      	ldr	r1, [sp, #12]
   15f86:	4288      	cmp	r0, r1
   15f88:	d809      	bhi.n	15f9e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x4c>
   15f8a:	e7ff      	b.n	15f8c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x3a>
   15f8c:	9804      	ldr	r0, [sp, #16]
   15f8e:	9905      	ldr	r1, [sp, #20]
   15f90:	9a06      	ldr	r2, [sp, #24]
   15f92:	9b07      	ldr	r3, [sp, #28]
   15f94:	f7ff ffbc 	bl	15f10 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E>
   15f98:	9002      	str	r0, [sp, #8]
   15f9a:	9101      	str	r1, [sp, #4]
   15f9c:	e00a      	b.n	15fb4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x62>
   15f9e:	9806      	ldr	r0, [sp, #24]
   15fa0:	9907      	ldr	r1, [sp, #28]
   15fa2:	f000 f83c 	bl	1601e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15fa6:	9000      	str	r0, [sp, #0]
   15fa8:	e7ff      	b.n	15faa <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x58>
   15faa:	9805      	ldr	r0, [sp, #20]
   15fac:	9900      	ldr	r1, [sp, #0]
   15fae:	f002 fc2e 	bl	1880e <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   15fb2:	defe      	udf	#254	; 0xfe
   15fb4:	9802      	ldr	r0, [sp, #8]
   15fb6:	9901      	ldr	r1, [sp, #4]
   15fb8:	b00c      	add	sp, #48	; 0x30
   15fba:	bd80      	pop	{r7, pc}

00015fbc <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>:
   15fbc:	b580      	push	{r7, lr}
   15fbe:	b084      	sub	sp, #16
   15fc0:	9002      	str	r0, [sp, #8]
   15fc2:	9103      	str	r1, [sp, #12]
   15fc4:	f001 fa5e 	bl	17484 <_ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E>
   15fc8:	9001      	str	r0, [sp, #4]
   15fca:	9100      	str	r1, [sp, #0]
   15fcc:	e7ff      	b.n	15fce <_ZN4core5slice14from_raw_parts17h1425df913744b73aE+0x12>
   15fce:	9801      	ldr	r0, [sp, #4]
   15fd0:	9900      	ldr	r1, [sp, #0]
   15fd2:	b004      	add	sp, #16
   15fd4:	bd80      	pop	{r7, pc}

00015fd6 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>:
   15fd6:	b580      	push	{r7, lr}
   15fd8:	b084      	sub	sp, #16
   15fda:	9002      	str	r0, [sp, #8]
   15fdc:	9103      	str	r1, [sp, #12]
   15fde:	f001 fa5e 	bl	1749e <_ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE>
   15fe2:	9001      	str	r0, [sp, #4]
   15fe4:	9100      	str	r1, [sp, #0]
   15fe6:	e7ff      	b.n	15fe8 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E+0x12>
   15fe8:	9801      	ldr	r0, [sp, #4]
   15fea:	9900      	ldr	r1, [sp, #0]
   15fec:	b004      	add	sp, #16
   15fee:	bd80      	pop	{r7, pc}

00015ff0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>:
   15ff0:	b082      	sub	sp, #8
   15ff2:	9000      	str	r0, [sp, #0]
   15ff4:	9101      	str	r1, [sp, #4]
   15ff6:	b002      	add	sp, #8
   15ff8:	4770      	bx	lr

00015ffa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>:
   15ffa:	b580      	push	{r7, lr}
   15ffc:	b086      	sub	sp, #24
   15ffe:	9003      	str	r0, [sp, #12]
   16000:	9104      	str	r1, [sp, #16]
   16002:	9205      	str	r2, [sp, #20]
   16004:	9002      	str	r0, [sp, #8]
   16006:	4610      	mov	r0, r2
   16008:	9a02      	ldr	r2, [sp, #8]
   1600a:	9101      	str	r1, [sp, #4]
   1600c:	4611      	mov	r1, r2
   1600e:	9a01      	ldr	r2, [sp, #4]
   16010:	f000 f886 	bl	16120 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E>
   16014:	9000      	str	r0, [sp, #0]
   16016:	e7ff      	b.n	16018 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE+0x1e>
   16018:	9800      	ldr	r0, [sp, #0]
   1601a:	b006      	add	sp, #24
   1601c:	bd80      	pop	{r7, pc}

0001601e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>:
   1601e:	b084      	sub	sp, #16
   16020:	9002      	str	r0, [sp, #8]
   16022:	9103      	str	r1, [sp, #12]
   16024:	9000      	str	r0, [sp, #0]
   16026:	9101      	str	r1, [sp, #4]
   16028:	9801      	ldr	r0, [sp, #4]
   1602a:	b004      	add	sp, #16
   1602c:	4770      	bx	lr

0001602e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE>:
   1602e:	b580      	push	{r7, lr}
   16030:	b092      	sub	sp, #72	; 0x48
   16032:	900e      	str	r0, [sp, #56]	; 0x38
   16034:	910f      	str	r1, [sp, #60]	; 0x3c
   16036:	9009      	str	r0, [sp, #36]	; 0x24
   16038:	9108      	str	r1, [sp, #32]
   1603a:	f000 f83e 	bl	160ba <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E>
   1603e:	4601      	mov	r1, r0
   16040:	9010      	str	r0, [sp, #64]	; 0x40
   16042:	9107      	str	r1, [sp, #28]
   16044:	e7ff      	b.n	16046 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x18>
   16046:	9807      	ldr	r0, [sp, #28]
   16048:	f001 f9d4 	bl	173f4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>
   1604c:	e7ff      	b.n	1604e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x20>
   1604e:	e7ff      	b.n	16050 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x22>
   16050:	2002      	movs	r0, #2
   16052:	9011      	str	r0, [sp, #68]	; 0x44
   16054:	9811      	ldr	r0, [sp, #68]	; 0x44
   16056:	9006      	str	r0, [sp, #24]
   16058:	e7ff      	b.n	1605a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x2c>
   1605a:	9806      	ldr	r0, [sp, #24]
   1605c:	2800      	cmp	r0, #0
   1605e:	d006      	beq.n	1606e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x40>
   16060:	e7ff      	b.n	16062 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x34>
   16062:	9809      	ldr	r0, [sp, #36]	; 0x24
   16064:	9908      	ldr	r1, [sp, #32]
   16066:	f7ff ffda 	bl	1601e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   1606a:	9005      	str	r0, [sp, #20]
   1606c:	e011      	b.n	16092 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x64>
   1606e:	9807      	ldr	r0, [sp, #28]
   16070:	9909      	ldr	r1, [sp, #36]	; 0x24
   16072:	9004      	str	r0, [sp, #16]
   16074:	4608      	mov	r0, r1
   16076:	9908      	ldr	r1, [sp, #32]
   16078:	f7ff ffd1 	bl	1601e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   1607c:	9003      	str	r0, [sp, #12]
   1607e:	e7ff      	b.n	16080 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x52>
   16080:	9804      	ldr	r0, [sp, #16]
   16082:	9903      	ldr	r1, [sp, #12]
   16084:	f7fe faa4 	bl	145d0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE>
   16088:	9002      	str	r0, [sp, #8]
   1608a:	e7ff      	b.n	1608c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x5e>
   1608c:	9802      	ldr	r0, [sp, #8]
   1608e:	900c      	str	r0, [sp, #48]	; 0x30
   16090:	e006      	b.n	160a0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x72>
   16092:	9807      	ldr	r0, [sp, #28]
   16094:	9905      	ldr	r1, [sp, #20]
   16096:	f001 f98c 	bl	173b2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>
   1609a:	900c      	str	r0, [sp, #48]	; 0x30
   1609c:	e7ff      	b.n	1609e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x70>
   1609e:	e7ff      	b.n	160a0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x72>
   160a0:	9807      	ldr	r0, [sp, #28]
   160a2:	f000 fc93 	bl	169cc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>
   160a6:	9001      	str	r0, [sp, #4]
   160a8:	e7ff      	b.n	160aa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x7c>
   160aa:	980c      	ldr	r0, [sp, #48]	; 0x30
   160ac:	9901      	ldr	r1, [sp, #4]
   160ae:	910a      	str	r1, [sp, #40]	; 0x28
   160b0:	900b      	str	r0, [sp, #44]	; 0x2c
   160b2:	980a      	ldr	r0, [sp, #40]	; 0x28
   160b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   160b6:	b012      	add	sp, #72	; 0x48
   160b8:	bd80      	pop	{r7, pc}

000160ba <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E>:
   160ba:	b082      	sub	sp, #8
   160bc:	9000      	str	r0, [sp, #0]
   160be:	9101      	str	r1, [sp, #4]
   160c0:	b002      	add	sp, #8
   160c2:	4770      	bx	lr

000160c4 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>:
   160c4:	b580      	push	{r7, lr}
   160c6:	b086      	sub	sp, #24
   160c8:	9003      	str	r0, [sp, #12]
   160ca:	9104      	str	r1, [sp, #16]
   160cc:	f7ff ff1b 	bl	15f06 <_ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E>
   160d0:	9002      	str	r0, [sp, #8]
   160d2:	9101      	str	r1, [sp, #4]
   160d4:	e7ff      	b.n	160d6 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E+0x12>
   160d6:	9802      	ldr	r0, [sp, #8]
   160d8:	9901      	ldr	r1, [sp, #4]
   160da:	b006      	add	sp, #24
   160dc:	bd80      	pop	{r7, pc}

000160de <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E>:
   160de:	b580      	push	{r7, lr}
   160e0:	b088      	sub	sp, #32
   160e2:	9005      	str	r0, [sp, #20]
   160e4:	9106      	str	r1, [sp, #24]
   160e6:	9207      	str	r2, [sp, #28]
   160e8:	9004      	str	r0, [sp, #16]
   160ea:	4610      	mov	r0, r2
   160ec:	9a04      	ldr	r2, [sp, #16]
   160ee:	9103      	str	r1, [sp, #12]
   160f0:	4611      	mov	r1, r2
   160f2:	9a03      	ldr	r2, [sp, #12]
   160f4:	f7ff fee8 	bl	15ec8 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE>
   160f8:	9002      	str	r0, [sp, #8]
   160fa:	9101      	str	r1, [sp, #4]
   160fc:	e7ff      	b.n	160fe <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E+0x20>
   160fe:	9802      	ldr	r0, [sp, #8]
   16100:	9901      	ldr	r1, [sp, #4]
   16102:	b008      	add	sp, #32
   16104:	bd80      	pop	{r7, pc}

00016106 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>:
   16106:	b580      	push	{r7, lr}
   16108:	b084      	sub	sp, #16
   1610a:	9002      	str	r0, [sp, #8]
   1610c:	9103      	str	r1, [sp, #12]
   1610e:	f7ff ff8e 	bl	1602e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE>
   16112:	9001      	str	r0, [sp, #4]
   16114:	9100      	str	r1, [sp, #0]
   16116:	e7ff      	b.n	16118 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE+0x12>
   16118:	9801      	ldr	r0, [sp, #4]
   1611a:	9900      	ldr	r1, [sp, #0]
   1611c:	b004      	add	sp, #16
   1611e:	bd80      	pop	{r7, pc}

00016120 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E>:
   16120:	b580      	push	{r7, lr}
   16122:	b086      	sub	sp, #24
   16124:	9003      	str	r0, [sp, #12]
   16126:	9104      	str	r1, [sp, #16]
   16128:	9205      	str	r2, [sp, #20]
   1612a:	9002      	str	r0, [sp, #8]
   1612c:	4608      	mov	r0, r1
   1612e:	4611      	mov	r1, r2
   16130:	f7ff ff5e 	bl	15ff0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>
   16134:	9001      	str	r0, [sp, #4]
   16136:	e7ff      	b.n	16138 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E+0x18>
   16138:	9801      	ldr	r0, [sp, #4]
   1613a:	9902      	ldr	r1, [sp, #8]
   1613c:	f000 f868 	bl	16210 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   16140:	9000      	str	r0, [sp, #0]
   16142:	e7ff      	b.n	16144 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E+0x24>
   16144:	9800      	ldr	r0, [sp, #0]
   16146:	b006      	add	sp, #24
   16148:	bd80      	pop	{r7, pc}

0001614a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>:
   1614a:	b580      	push	{r7, lr}
   1614c:	b08e      	sub	sp, #56	; 0x38
   1614e:	9007      	str	r0, [sp, #28]
   16150:	6801      	ldr	r1, [r0, #0]
   16152:	9005      	str	r0, [sp, #20]
   16154:	4608      	mov	r0, r1
   16156:	f000 fc3f 	bl	169d8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   1615a:	9004      	str	r0, [sp, #16]
   1615c:	e7ff      	b.n	1615e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x14>
   1615e:	9804      	ldr	r0, [sp, #16]
   16160:	f000 f879 	bl	16256 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE>
   16164:	e7ff      	b.n	16166 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x1c>
   16166:	e7ff      	b.n	16168 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x1e>
   16168:	2002      	movs	r0, #2
   1616a:	9008      	str	r0, [sp, #32]
   1616c:	9808      	ldr	r0, [sp, #32]
   1616e:	9003      	str	r0, [sp, #12]
   16170:	e7ff      	b.n	16172 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x28>
   16172:	9803      	ldr	r0, [sp, #12]
   16174:	2800      	cmp	r0, #0
   16176:	d007      	beq.n	16188 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3e>
   16178:	e7ff      	b.n	1617a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x30>
   1617a:	9805      	ldr	r0, [sp, #20]
   1617c:	6840      	ldr	r0, [r0, #4]
   1617e:	f001 f939 	bl	173f4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>
   16182:	e7ff      	b.n	16184 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3a>
   16184:	e7ff      	b.n	16186 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3c>
   16186:	e7ff      	b.n	16188 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3e>
   16188:	9805      	ldr	r0, [sp, #20]
   1618a:	6800      	ldr	r0, [r0, #0]
   1618c:	f000 fc24 	bl	169d8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   16190:	9002      	str	r0, [sp, #8]
   16192:	e7ff      	b.n	16194 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x4a>
   16194:	9805      	ldr	r0, [sp, #20]
   16196:	6841      	ldr	r1, [r0, #4]
   16198:	9a02      	ldr	r2, [sp, #8]
   1619a:	428a      	cmp	r2, r1
   1619c:	d02f      	beq.n	161fe <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xb4>
   1619e:	e7ff      	b.n	161a0 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x56>
   161a0:	9805      	ldr	r0, [sp, #20]
   161a2:	900a      	str	r0, [sp, #40]	; 0x28
   161a4:	2101      	movs	r1, #1
   161a6:	910b      	str	r1, [sp, #44]	; 0x2c
   161a8:	2102      	movs	r1, #2
   161aa:	910d      	str	r1, [sp, #52]	; 0x34
   161ac:	990d      	ldr	r1, [sp, #52]	; 0x34
   161ae:	2900      	cmp	r1, #0
   161b0:	d015      	beq.n	161de <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x94>
   161b2:	e7ff      	b.n	161b4 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x6a>
   161b4:	9805      	ldr	r0, [sp, #20]
   161b6:	6800      	ldr	r0, [r0, #0]
   161b8:	f000 fc0e 	bl	169d8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   161bc:	900c      	str	r0, [sp, #48]	; 0x30
   161be:	9905      	ldr	r1, [sp, #20]
   161c0:	680a      	ldr	r2, [r1, #0]
   161c2:	9001      	str	r0, [sp, #4]
   161c4:	4610      	mov	r0, r2
   161c6:	f000 fc07 	bl	169d8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   161ca:	2101      	movs	r1, #1
   161cc:	f000 f837 	bl	1623e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>
   161d0:	f000 fbfc 	bl	169cc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>
   161d4:	9905      	ldr	r1, [sp, #20]
   161d6:	6008      	str	r0, [r1, #0]
   161d8:	9801      	ldr	r0, [sp, #4]
   161da:	9009      	str	r0, [sp, #36]	; 0x24
   161dc:	e00c      	b.n	161f8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xae>
   161de:	9805      	ldr	r0, [sp, #20]
   161e0:	6840      	ldr	r0, [r0, #4]
   161e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   161e6:	f7fe f9fe 	bl	145e6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>
   161ea:	9905      	ldr	r1, [sp, #20]
   161ec:	6048      	str	r0, [r1, #4]
   161ee:	6808      	ldr	r0, [r1, #0]
   161f0:	f000 fbf2 	bl	169d8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   161f4:	9009      	str	r0, [sp, #36]	; 0x24
   161f6:	e7ff      	b.n	161f8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xae>
   161f8:	9809      	ldr	r0, [sp, #36]	; 0x24
   161fa:	9000      	str	r0, [sp, #0]
   161fc:	e002      	b.n	16204 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xba>
   161fe:	2000      	movs	r0, #0
   16200:	9006      	str	r0, [sp, #24]
   16202:	e002      	b.n	1620a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xc0>
   16204:	9800      	ldr	r0, [sp, #0]
   16206:	9006      	str	r0, [sp, #24]
   16208:	e7ff      	b.n	1620a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xc0>
   1620a:	9806      	ldr	r0, [sp, #24]
   1620c:	b00e      	add	sp, #56	; 0x38
   1620e:	bd80      	pop	{r7, pc}

00016210 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>:
   16210:	b580      	push	{r7, lr}
   16212:	b084      	sub	sp, #16
   16214:	9002      	str	r0, [sp, #8]
   16216:	9103      	str	r1, [sp, #12]
   16218:	f000 f811 	bl	1623e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>
   1621c:	9001      	str	r0, [sp, #4]
   1621e:	e7ff      	b.n	16220 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E+0x10>
   16220:	9801      	ldr	r0, [sp, #4]
   16222:	b004      	add	sp, #16
   16224:	bd80      	pop	{r7, pc}

00016226 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>:
   16226:	b580      	push	{r7, lr}
   16228:	b084      	sub	sp, #16
   1622a:	460a      	mov	r2, r1
   1622c:	9002      	str	r0, [sp, #8]
   1622e:	f8ad 100e 	strh.w	r1, [sp, #14]
   16232:	9201      	str	r2, [sp, #4]
   16234:	f001 f961 	bl	174fa <_ZN4core3ptr5write17h147d4643d861e927E>
   16238:	e7ff      	b.n	1623a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E+0x14>
   1623a:	b004      	add	sp, #16
   1623c:	bd80      	pop	{r7, pc}

0001623e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>:
   1623e:	b084      	sub	sp, #16
   16240:	9001      	str	r0, [sp, #4]
   16242:	9102      	str	r1, [sp, #8]
   16244:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   16248:	9003      	str	r0, [sp, #12]
   1624a:	9803      	ldr	r0, [sp, #12]
   1624c:	9000      	str	r0, [sp, #0]
   1624e:	e7ff      	b.n	16250 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE+0x12>
   16250:	9800      	ldr	r0, [sp, #0]
   16252:	b004      	add	sp, #16
   16254:	4770      	bx	lr

00016256 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE>:
   16256:	b082      	sub	sp, #8
   16258:	9001      	str	r0, [sp, #4]
   1625a:	9000      	str	r0, [sp, #0]
   1625c:	e7ff      	b.n	1625e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE+0x8>
   1625e:	9800      	ldr	r0, [sp, #0]
   16260:	fab0 f180 	clz	r1, r0
   16264:	0948      	lsrs	r0, r1, #5
   16266:	b002      	add	sp, #8
   16268:	4770      	bx	lr

0001626a <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E>:
    C: PixelColor,
{
    type Item = Pixel<C>;
    type IntoIter = RectangleIterator<C>;

    fn into_iter(self) -> Self::IntoIter {
   1626a:	b580      	push	{r7, lr}
        (&self).into_iter()
   1626c:	f000 f814 	bl	16298 <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE>
   16270:	e7ff      	b.n	16272 <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E+0x8>
    }
   16272:	bd80      	pop	{r7, pc}

00016274 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>:
    fn fill(mut self, color: Option<C>) -> Self {
   16274:	b5b0      	push	{r4, r5, r7, lr}
   16276:	b081      	sub	sp, #4
   16278:	469c      	mov	ip, r3
   1627a:	4696      	mov	lr, r2
   1627c:	f8ad 2000 	strh.w	r2, [sp]
   16280:	f8ad 3002 	strh.w	r3, [sp, #2]
        self.style.fill_color = color;
   16284:	820a      	strh	r2, [r1, #16]
   16286:	824b      	strh	r3, [r1, #18]
        self
   16288:	c91c      	ldmia	r1!, {r2, r3, r4}
   1628a:	c01c      	stmia	r0!, {r2, r3, r4}
   1628c:	e891 003c 	ldmia.w	r1, {r2, r3, r4, r5}
   16290:	e880 003c 	stmia.w	r0, {r2, r3, r4, r5}
    }
   16294:	b001      	add	sp, #4
   16296:	bdb0      	pop	{r4, r5, r7, pc}

00016298 <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE>:
    C: PixelColor,
{
    type Item = Pixel<C>;
    type IntoIter = RectangleIterator<C>;

    fn into_iter(self) -> Self::IntoIter {
   16298:	b570      	push	{r4, r5, r6, lr}
   1629a:	b08e      	sub	sp, #56	; 0x38
   1629c:	910d      	str	r1, [sp, #52]	; 0x34
        RectangleIterator {
            top_left: self.top_left,
   1629e:	680a      	ldr	r2, [r1, #0]
   162a0:	684b      	ldr	r3, [r1, #4]
            bottom_right: self.bottom_right,
   162a2:	f8d1 c008 	ldr.w	ip, [r1, #8]
   162a6:	f8d1 e00c 	ldr.w	lr, [r1, #12]
            style: self.style,
   162aa:	8b0c      	ldrh	r4, [r1, #24]
   162ac:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
   162b0:	690c      	ldr	r4, [r1, #16]
   162b2:	694d      	ldr	r5, [r1, #20]
   162b4:	950b      	str	r5, [sp, #44]	; 0x2c
   162b6:	940a      	str	r4, [sp, #40]	; 0x28
   162b8:	2400      	movs	r4, #0
            x: self.top_left[0],
   162ba:	9009      	str	r0, [sp, #36]	; 0x24
   162bc:	4608      	mov	r0, r1
   162be:	9108      	str	r1, [sp, #32]
   162c0:	4621      	mov	r1, r4
   162c2:	9207      	str	r2, [sp, #28]
   162c4:	9306      	str	r3, [sp, #24]
   162c6:	f8cd c014 	str.w	ip, [sp, #20]
   162ca:	f8cd e010 	str.w	lr, [sp, #16]
   162ce:	f7fb fb3c 	bl	1194a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   162d2:	9003      	str	r0, [sp, #12]
   162d4:	e7ff      	b.n	162d6 <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE+0x3e>
   162d6:	9803      	ldr	r0, [sp, #12]
   162d8:	6801      	ldr	r1, [r0, #0]
   162da:	2201      	movs	r2, #1
            y: self.top_left[1],
   162dc:	9808      	ldr	r0, [sp, #32]
   162de:	9102      	str	r1, [sp, #8]
   162e0:	4611      	mov	r1, r2
   162e2:	f7fb fb32 	bl	1194a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   162e6:	9001      	str	r0, [sp, #4]
   162e8:	e7ff      	b.n	162ea <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE+0x52>
   162ea:	9801      	ldr	r0, [sp, #4]
   162ec:	6801      	ldr	r1, [r0, #0]
        RectangleIterator {
   162ee:	9a07      	ldr	r2, [sp, #28]
   162f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   162f2:	601a      	str	r2, [r3, #0]
   162f4:	f8dd c018 	ldr.w	ip, [sp, #24]
   162f8:	f8c3 c004 	str.w	ip, [r3, #4]
   162fc:	f8dd e014 	ldr.w	lr, [sp, #20]
   16300:	f8c3 e008 	str.w	lr, [r3, #8]
   16304:	9c04      	ldr	r4, [sp, #16]
   16306:	60dc      	str	r4, [r3, #12]
   16308:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   1630c:	841d      	strh	r5, [r3, #32]
   1630e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   16310:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   16312:	61de      	str	r6, [r3, #28]
   16314:	619d      	str	r5, [r3, #24]
   16316:	9d02      	ldr	r5, [sp, #8]
   16318:	611d      	str	r5, [r3, #16]
   1631a:	6159      	str	r1, [r3, #20]
        }
    }
   1631c:	b00e      	add	sp, #56	; 0x38
   1631e:	bd70      	pop	{r4, r5, r6, pc}

00016320 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE>:
where
    C: PixelColor,
{
    type Item = Pixel<C>;

    fn next(&mut self) -> Option<Self::Item> {
   16320:	b510      	push	{r4, lr}
   16322:	b0d2      	sub	sp, #328	; 0x148
   16324:	914f      	str	r1, [sp, #316]	; 0x13c
   16326:	2200      	movs	r2, #0
        // If entire object is off the top left of the screen or has no border or fill colour,
        // don't render anything
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   16328:	902a      	str	r0, [sp, #168]	; 0xa8
   1632a:	4608      	mov	r0, r1
   1632c:	9129      	str	r1, [sp, #164]	; 0xa4
   1632e:	4611      	mov	r1, r2
   16330:	f7fb fb0b 	bl	1194a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16334:	9028      	str	r0, [sp, #160]	; 0xa0
   16336:	e03c      	b.n	163b2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x92>
   16338:	2001      	movs	r0, #1
   1633a:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
   1633e:	e009      	b.n	16354 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34>
   16340:	2000      	movs	r0, #0
   16342:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
   16346:	e005      	b.n	16354 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   16348:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1634a:	301c      	adds	r0, #28
   1634c:	f7fe fa86 	bl	1485c <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>
   16350:	9027      	str	r0, [sp, #156]	; 0x9c
   16352:	e06c      	b.n	1642e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x10e>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   16354:	f89d 00af 	ldrb.w	r0, [sp, #175]	; 0xaf
   16358:	07c0      	lsls	r0, r0, #31
   1635a:	2800      	cmp	r0, #0
   1635c:	d172      	bne.n	16444 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x124>
   1635e:	e070      	b.n	16442 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x122>
   16360:	2001      	movs	r0, #1
   16362:	f88d 00b0 	strb.w	r0, [sp, #176]	; 0xb0
   16366:	e00a      	b.n	1637e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5e>
   16368:	2000      	movs	r0, #0
   1636a:	f88d 00b0 	strb.w	r0, [sp, #176]	; 0xb0
   1636e:	e006      	b.n	1637e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5e>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   16370:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16372:	3008      	adds	r0, #8
   16374:	2100      	movs	r1, #0
   16376:	f7fb fae8 	bl	1194a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   1637a:	9026      	str	r0, [sp, #152]	; 0x98
   1637c:	e038      	b.n	163f0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xd0>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   1637e:	f89d 00b0 	ldrb.w	r0, [sp, #176]	; 0xb0
   16382:	07c0      	lsls	r0, r0, #31
   16384:	2800      	cmp	r0, #0
   16386:	d1d7      	bne.n	16338 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x18>
   16388:	e7de      	b.n	16348 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x28>
   1638a:	2001      	movs	r0, #1
   1638c:	f88d 00b1 	strb.w	r0, [sp, #177]	; 0xb1
   16390:	e009      	b.n	163a6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x86>
   16392:	2000      	movs	r0, #0
   16394:	f88d 00b1 	strb.w	r0, [sp, #177]	; 0xb1
   16398:	e005      	b.n	163a6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x86>
   1639a:	2101      	movs	r1, #1
   1639c:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1639e:	f7fb fad4 	bl	1194a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   163a2:	9025      	str	r0, [sp, #148]	; 0x94
   163a4:	e00a      	b.n	163bc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x9c>
   163a6:	f89d 00b1 	ldrb.w	r0, [sp, #177]	; 0xb1
   163aa:	07c0      	lsls	r0, r0, #31
   163ac:	2800      	cmp	r0, #0
   163ae:	d1df      	bne.n	16370 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x50>
   163b0:	e7da      	b.n	16368 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48>
   163b2:	9828      	ldr	r0, [sp, #160]	; 0xa0
   163b4:	6801      	ldr	r1, [r0, #0]
   163b6:	2900      	cmp	r1, #0
   163b8:	d4e7      	bmi.n	1638a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x6a>
   163ba:	e7ee      	b.n	1639a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x7a>
   163bc:	9825      	ldr	r0, [sp, #148]	; 0x94
   163be:	6801      	ldr	r1, [r0, #0]
   163c0:	2900      	cmp	r1, #0
   163c2:	d4e2      	bmi.n	1638a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x6a>
   163c4:	e7e5      	b.n	16392 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x72>
   163c6:	2001      	movs	r0, #1
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   163c8:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
   163cc:	e00a      	b.n	163e4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xc4>
   163ce:	2000      	movs	r0, #0
   163d0:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
   163d4:	e006      	b.n	163e4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xc4>
   163d6:	9829      	ldr	r0, [sp, #164]	; 0xa4
   163d8:	3008      	adds	r0, #8
   163da:	2101      	movs	r1, #1
   163dc:	f7fb fab5 	bl	1194a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   163e0:	9024      	str	r0, [sp, #144]	; 0x90
   163e2:	e00a      	b.n	163fa <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xda>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   163e4:	f89d 00b2 	ldrb.w	r0, [sp, #178]	; 0xb2
   163e8:	07c0      	lsls	r0, r0, #31
   163ea:	2800      	cmp	r0, #0
   163ec:	d1b8      	bne.n	16360 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x40>
   163ee:	e7bb      	b.n	16368 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   163f0:	9826      	ldr	r0, [sp, #152]	; 0x98
   163f2:	6801      	ldr	r1, [r0, #0]
   163f4:	2900      	cmp	r1, #0
   163f6:	d4e6      	bmi.n	163c6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xa6>
   163f8:	e7ed      	b.n	163d6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xb6>
   163fa:	9824      	ldr	r0, [sp, #144]	; 0x90
   163fc:	6801      	ldr	r1, [r0, #0]
   163fe:	2900      	cmp	r1, #0
   16400:	d4e1      	bmi.n	163c6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xa6>
   16402:	e7e4      	b.n	163ce <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xae>
   16404:	2001      	movs	r0, #1
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   16406:	f88d 00b3 	strb.w	r0, [sp, #179]	; 0xb3
   1640a:	e009      	b.n	16420 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x100>
   1640c:	2000      	movs	r0, #0
   1640e:	f88d 00b3 	strb.w	r0, [sp, #179]	; 0xb3
   16412:	e005      	b.n	16420 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x100>
   16414:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16416:	3018      	adds	r0, #24
   16418:	f7fe fa20 	bl	1485c <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>
   1641c:	9023      	str	r0, [sp, #140]	; 0x8c
   1641e:	e00b      	b.n	16438 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x118>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   16420:	f89d 00b3 	ldrb.w	r0, [sp, #179]	; 0xb3
   16424:	07c0      	lsls	r0, r0, #31
   16426:	2800      	cmp	r0, #0
   16428:	f47f af86 	bne.w	16338 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x18>
   1642c:	e788      	b.n	16340 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x20>
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   1642e:	9827      	ldr	r0, [sp, #156]	; 0x9c
   16430:	07c1      	lsls	r1, r0, #31
   16432:	2900      	cmp	r1, #0
   16434:	d1ee      	bne.n	16414 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xf4>
   16436:	e7e9      	b.n	1640c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xec>
   16438:	9823      	ldr	r0, [sp, #140]	; 0x8c
   1643a:	07c1      	lsls	r1, r0, #31
   1643c:	2900      	cmp	r1, #0
   1643e:	d1e1      	bne.n	16404 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xe4>
   16440:	e7e4      	b.n	1640c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xec>
        {
            return None;
        }

        let pixel = loop {
   16442:	e012      	b.n	1646a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x14a>
   16444:	2000      	movs	r0, #0
            return None;
   16446:	992a      	ldr	r1, [sp, #168]	; 0xa8
   16448:	6008      	str	r0, [r1, #0]
   1644a:	e7ff      	b.n	1644c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x12c>
                break out;
            }
        };

        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
    }
   1644c:	b052      	add	sp, #328	; 0x148
   1644e:	bd10      	pop	{r4, pc}
        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
   16450:	982d      	ldr	r0, [sp, #180]	; 0xb4
   16452:	992e      	ldr	r1, [sp, #184]	; 0xb8
   16454:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
   16456:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   16458:	934d      	str	r3, [sp, #308]	; 0x134
   1645a:	924c      	str	r2, [sp, #304]	; 0x130
   1645c:	914b      	str	r1, [sp, #300]	; 0x12c
   1645e:	904a      	str	r0, [sp, #296]	; 0x128
   16460:	a94a      	add	r1, sp, #296	; 0x128
   16462:	982a      	ldr	r0, [sp, #168]	; 0xa8
   16464:	f7fe f90c 	bl	14680 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE>
   16468:	e201      	b.n	1686e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x54e>
   1646a:	2000      	movs	r0, #0
            let mut out = None;
   1646c:	9031      	str	r0, [sp, #196]	; 0xc4
            if self.y > self.bottom_right[1] {
   1646e:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16470:	6941      	ldr	r1, [r0, #20]
   16472:	3008      	adds	r0, #8
   16474:	2201      	movs	r2, #1
   16476:	9122      	str	r1, [sp, #136]	; 0x88
   16478:	4611      	mov	r1, r2
   1647a:	f7fb fa66 	bl	1194a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   1647e:	9021      	str	r0, [sp, #132]	; 0x84
   16480:	e7ff      	b.n	16482 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x162>
   16482:	9821      	ldr	r0, [sp, #132]	; 0x84
   16484:	6801      	ldr	r1, [r0, #0]
   16486:	9a22      	ldr	r2, [sp, #136]	; 0x88
   16488:	428a      	cmp	r2, r1
   1648a:	dc13      	bgt.n	164b4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x194>
   1648c:	e7ff      	b.n	1648e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x16e>
            let border_width = self.style.stroke_width as i32;
   1648e:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16490:	f890 1020 	ldrb.w	r1, [r0, #32]
   16494:	460a      	mov	r2, r1
   16496:	9150      	str	r1, [sp, #320]	; 0x140
            let tl = self.top_left;
   16498:	6801      	ldr	r1, [r0, #0]
   1649a:	6843      	ldr	r3, [r0, #4]
   1649c:	9135      	str	r1, [sp, #212]	; 0xd4
   1649e:	9336      	str	r3, [sp, #216]	; 0xd8
            let br = self.bottom_right;
   164a0:	6881      	ldr	r1, [r0, #8]
   164a2:	68c3      	ldr	r3, [r0, #12]
   164a4:	9137      	str	r1, [sp, #220]	; 0xdc
   164a6:	9338      	str	r3, [sp, #224]	; 0xe0
            if self.x >= 0 && self.y >= 0 {
   164a8:	6901      	ldr	r1, [r0, #16]
   164aa:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   164ae:	9220      	str	r2, [sp, #128]	; 0x80
   164b0:	dc0b      	bgt.n	164ca <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1aa>
   164b2:	e006      	b.n	164c2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1a2>
   164b4:	2000      	movs	r0, #0
                break None;
   164b6:	902d      	str	r0, [sp, #180]	; 0xb4
   164b8:	e7ca      	b.n	16450 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x130>
   164ba:	2001      	movs	r0, #1
            if self.x >= 0 && self.y >= 0 {
   164bc:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
   164c0:	e009      	b.n	164d6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1b6>
   164c2:	2000      	movs	r0, #0
   164c4:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
   164c8:	e005      	b.n	164d6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1b6>
   164ca:	9829      	ldr	r0, [sp, #164]	; 0xa4
   164cc:	6941      	ldr	r1, [r0, #20]
   164ce:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   164d2:	dcf2      	bgt.n	164ba <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x19a>
   164d4:	e7f5      	b.n	164c2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1a2>
   164d6:	f89d 00e7 	ldrb.w	r0, [sp, #231]	; 0xe7
   164da:	07c0      	lsls	r0, r0, #31
   164dc:	2800      	cmp	r0, #0
   164de:	f000 8182 	beq.w	167e6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c6>
   164e2:	e7ff      	b.n	164e4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1c4>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   164e4:	9829      	ldr	r0, [sp, #164]	; 0xa4
   164e6:	6941      	ldr	r1, [r0, #20]
   164e8:	a835      	add	r0, sp, #212	; 0xd4
   164ea:	2201      	movs	r2, #1
   164ec:	911f      	str	r1, [sp, #124]	; 0x7c
   164ee:	4611      	mov	r1, r2
   164f0:	f7fb fa2b 	bl	1194a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   164f4:	901e      	str	r0, [sp, #120]	; 0x78
   164f6:	e074      	b.n	165e2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2c2>
   164f8:	2001      	movs	r0, #1
                if (
   164fa:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
   164fe:	e009      	b.n	16514 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1f4>
   16500:	2000      	movs	r0, #0
   16502:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
   16506:	e005      	b.n	16514 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1f4>
                ) && self.style.stroke_color.is_some()
   16508:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1650a:	301c      	adds	r0, #28
   1650c:	f7fe f9d6 	bl	148bc <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>
   16510:	901d      	str	r0, [sp, #116]	; 0x74
   16512:	e104      	b.n	1671e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3fe>
                if (
   16514:	f89d 00e8 	ldrb.w	r0, [sp, #232]	; 0xe8
   16518:	07c0      	lsls	r0, r0, #31
   1651a:	2800      	cmp	r0, #0
   1651c:	f040 810a 	bne.w	16734 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x414>
   16520:	e103      	b.n	1672a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x40a>
   16522:	2001      	movs	r0, #1
   16524:	f88d 00e9 	strb.w	r0, [sp, #233]	; 0xe9
   16528:	e00d      	b.n	16546 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x226>
   1652a:	2000      	movs	r0, #0
   1652c:	f88d 00e9 	strb.w	r0, [sp, #233]	; 0xe9
   16530:	e009      	b.n	16546 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x226>
                || (self.x <= br[0] && self.x > br[0] - border_width)
   16532:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16534:	6901      	ldr	r1, [r0, #16]
   16536:	a837      	add	r0, sp, #220	; 0xdc
   16538:	2200      	movs	r2, #0
   1653a:	911c      	str	r1, [sp, #112]	; 0x70
   1653c:	4611      	mov	r1, r2
   1653e:	f7fb fa04 	bl	1194a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16542:	901b      	str	r0, [sp, #108]	; 0x6c
   16544:	e0d7      	b.n	166f6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3d6>
                if (
   16546:	f89d 00e9 	ldrb.w	r0, [sp, #233]	; 0xe9
   1654a:	07c0      	lsls	r0, r0, #31
   1654c:	2800      	cmp	r0, #0
   1654e:	d1db      	bne.n	16508 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e8>
   16550:	e7d6      	b.n	16500 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e0>
   16552:	2001      	movs	r0, #1
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   16554:	f88d 00ea 	strb.w	r0, [sp, #234]	; 0xea
   16558:	e00d      	b.n	16576 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x256>
   1655a:	2000      	movs	r0, #0
   1655c:	f88d 00ea 	strb.w	r0, [sp, #234]	; 0xea
   16560:	e009      	b.n	16576 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x256>
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   16562:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16564:	6901      	ldr	r1, [r0, #16]
   16566:	a835      	add	r0, sp, #212	; 0xd4
   16568:	2200      	movs	r2, #0
   1656a:	911a      	str	r1, [sp, #104]	; 0x68
   1656c:	4611      	mov	r1, r2
   1656e:	f7fb f9ec 	bl	1194a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16572:	9019      	str	r0, [sp, #100]	; 0x64
   16574:	e090      	b.n	16698 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x378>
                if (
   16576:	f89d 00ea 	ldrb.w	r0, [sp, #234]	; 0xea
   1657a:	07c0      	lsls	r0, r0, #31
   1657c:	2800      	cmp	r0, #0
   1657e:	d1d0      	bne.n	16522 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x202>
   16580:	e7d7      	b.n	16532 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x212>
   16582:	2001      	movs	r0, #1
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   16584:	f88d 00eb 	strb.w	r0, [sp, #235]	; 0xeb
   16588:	e00d      	b.n	165a6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x286>
   1658a:	2000      	movs	r0, #0
   1658c:	f88d 00eb 	strb.w	r0, [sp, #235]	; 0xeb
   16590:	e009      	b.n	165a6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x286>
                || (self.y <= br[1] && self.y > br[1] - border_width)
   16592:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16594:	6941      	ldr	r1, [r0, #20]
   16596:	a837      	add	r0, sp, #220	; 0xdc
   16598:	2201      	movs	r2, #1
   1659a:	9118      	str	r1, [sp, #96]	; 0x60
   1659c:	4611      	mov	r1, r2
   1659e:	f7fb f9d4 	bl	1194a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   165a2:	9017      	str	r0, [sp, #92]	; 0x5c
   165a4:	e04b      	b.n	1663e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x31e>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   165a6:	f89d 00eb 	ldrb.w	r0, [sp, #235]	; 0xeb
   165aa:	07c0      	lsls	r0, r0, #31
   165ac:	2800      	cmp	r0, #0
   165ae:	d1d0      	bne.n	16552 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x232>
   165b0:	e7d7      	b.n	16562 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x242>
   165b2:	2001      	movs	r0, #1
   165b4:	f88d 00ec 	strb.w	r0, [sp, #236]	; 0xec
   165b8:	e00d      	b.n	165d6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2b6>
   165ba:	2000      	movs	r0, #0
   165bc:	f88d 00ec 	strb.w	r0, [sp, #236]	; 0xec
   165c0:	e009      	b.n	165d6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2b6>
   165c2:	9829      	ldr	r0, [sp, #164]	; 0xa4
   165c4:	6941      	ldr	r1, [r0, #20]
   165c6:	a835      	add	r0, sp, #212	; 0xd4
   165c8:	2201      	movs	r2, #1
   165ca:	9116      	str	r1, [sp, #88]	; 0x58
   165cc:	4611      	mov	r1, r2
   165ce:	f7fb f9bc 	bl	1194a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   165d2:	9015      	str	r0, [sp, #84]	; 0x54
   165d4:	e00b      	b.n	165ee <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2ce>
   165d6:	f89d 00ec 	ldrb.w	r0, [sp, #236]	; 0xec
   165da:	07c0      	lsls	r0, r0, #31
   165dc:	2800      	cmp	r0, #0
   165de:	d1d0      	bne.n	16582 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x262>
   165e0:	e7d7      	b.n	16592 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x272>
   165e2:	981e      	ldr	r0, [sp, #120]	; 0x78
   165e4:	6801      	ldr	r1, [r0, #0]
   165e6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   165e8:	428a      	cmp	r2, r1
   165ea:	daea      	bge.n	165c2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2a2>
   165ec:	e7e5      	b.n	165ba <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x29a>
   165ee:	9815      	ldr	r0, [sp, #84]	; 0x54
   165f0:	6801      	ldr	r1, [r0, #0]
   165f2:	9a20      	ldr	r2, [sp, #128]	; 0x80
   165f4:	188b      	adds	r3, r1, r2
   165f6:	469c      	mov	ip, r3
   165f8:	428b      	cmp	r3, r1
   165fa:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
   165fe:	f180 8137 	bvs.w	16870 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x550>
   16602:	e7ff      	b.n	16604 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2e4>
   16604:	9816      	ldr	r0, [sp, #88]	; 0x58
   16606:	9914      	ldr	r1, [sp, #80]	; 0x50
   16608:	4288      	cmp	r0, r1
   1660a:	dbd2      	blt.n	165b2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x292>
   1660c:	e7d5      	b.n	165ba <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x29a>
   1660e:	2001      	movs	r0, #1
                || (self.y <= br[1] && self.y > br[1] - border_width)
   16610:	f88d 00ed 	strb.w	r0, [sp, #237]	; 0xed
   16614:	e00d      	b.n	16632 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x312>
   16616:	2000      	movs	r0, #0
   16618:	f88d 00ed 	strb.w	r0, [sp, #237]	; 0xed
   1661c:	e009      	b.n	16632 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x312>
   1661e:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16620:	6941      	ldr	r1, [r0, #20]
   16622:	a837      	add	r0, sp, #220	; 0xdc
   16624:	2201      	movs	r2, #1
   16626:	9113      	str	r1, [sp, #76]	; 0x4c
   16628:	4611      	mov	r1, r2
   1662a:	f7fb f98e 	bl	1194a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   1662e:	9012      	str	r0, [sp, #72]	; 0x48
   16630:	e00b      	b.n	1664a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x32a>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   16632:	f89d 00ed 	ldrb.w	r0, [sp, #237]	; 0xed
   16636:	07c0      	lsls	r0, r0, #31
   16638:	2800      	cmp	r0, #0
   1663a:	d1a2      	bne.n	16582 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x262>
   1663c:	e7a5      	b.n	1658a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x26a>
                || (self.y <= br[1] && self.y > br[1] - border_width)
   1663e:	9817      	ldr	r0, [sp, #92]	; 0x5c
   16640:	6801      	ldr	r1, [r0, #0]
   16642:	9a18      	ldr	r2, [sp, #96]	; 0x60
   16644:	428a      	cmp	r2, r1
   16646:	ddea      	ble.n	1661e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2fe>
   16648:	e7e5      	b.n	16616 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2f6>
   1664a:	9812      	ldr	r0, [sp, #72]	; 0x48
   1664c:	6801      	ldr	r1, [r0, #0]
   1664e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   16650:	1a8b      	subs	r3, r1, r2
   16652:	4291      	cmp	r1, r2
   16654:	9311      	str	r3, [sp, #68]	; 0x44
   16656:	f180 8117 	bvs.w	16888 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x568>
   1665a:	e7ff      	b.n	1665c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x33c>
   1665c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1665e:	9911      	ldr	r1, [sp, #68]	; 0x44
   16660:	4288      	cmp	r0, r1
   16662:	dcd4      	bgt.n	1660e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2ee>
   16664:	e7d7      	b.n	16616 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2f6>
   16666:	2001      	movs	r0, #1
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   16668:	f88d 00ee 	strb.w	r0, [sp, #238]	; 0xee
   1666c:	e00d      	b.n	1668a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x36a>
   1666e:	2000      	movs	r0, #0
   16670:	f88d 00ee 	strb.w	r0, [sp, #238]	; 0xee
   16674:	e009      	b.n	1668a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x36a>
   16676:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16678:	6901      	ldr	r1, [r0, #16]
   1667a:	a835      	add	r0, sp, #212	; 0xd4
   1667c:	2200      	movs	r2, #0
   1667e:	9110      	str	r1, [sp, #64]	; 0x40
   16680:	4611      	mov	r1, r2
   16682:	f7fb f962 	bl	1194a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16686:	900f      	str	r0, [sp, #60]	; 0x3c
   16688:	e00c      	b.n	166a4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x384>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   1668a:	f89d 00ee 	ldrb.w	r0, [sp, #238]	; 0xee
   1668e:	07c0      	lsls	r0, r0, #31
   16690:	2800      	cmp	r0, #0
   16692:	f47f af5e 	bne.w	16552 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x232>
   16696:	e760      	b.n	1655a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x23a>
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   16698:	9819      	ldr	r0, [sp, #100]	; 0x64
   1669a:	6801      	ldr	r1, [r0, #0]
   1669c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1669e:	428a      	cmp	r2, r1
   166a0:	dae9      	bge.n	16676 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x356>
   166a2:	e7e4      	b.n	1666e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34e>
   166a4:	980f      	ldr	r0, [sp, #60]	; 0x3c
   166a6:	6801      	ldr	r1, [r0, #0]
   166a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
   166aa:	188b      	adds	r3, r1, r2
   166ac:	469c      	mov	ip, r3
   166ae:	428b      	cmp	r3, r1
   166b0:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   166b4:	f180 80f4 	bvs.w	168a0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x580>
   166b8:	e7ff      	b.n	166ba <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x39a>
   166ba:	9810      	ldr	r0, [sp, #64]	; 0x40
   166bc:	990e      	ldr	r1, [sp, #56]	; 0x38
   166be:	4288      	cmp	r0, r1
   166c0:	dbd1      	blt.n	16666 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x346>
   166c2:	e7d4      	b.n	1666e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34e>
   166c4:	2001      	movs	r0, #1
                || (self.x <= br[0] && self.x > br[0] - border_width)
   166c6:	f88d 00ef 	strb.w	r0, [sp, #239]	; 0xef
   166ca:	e00d      	b.n	166e8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3c8>
   166cc:	2000      	movs	r0, #0
   166ce:	f88d 00ef 	strb.w	r0, [sp, #239]	; 0xef
   166d2:	e009      	b.n	166e8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3c8>
   166d4:	9829      	ldr	r0, [sp, #164]	; 0xa4
   166d6:	6901      	ldr	r1, [r0, #16]
   166d8:	a837      	add	r0, sp, #220	; 0xdc
   166da:	2200      	movs	r2, #0
   166dc:	910d      	str	r1, [sp, #52]	; 0x34
   166de:	4611      	mov	r1, r2
   166e0:	f7fb f933 	bl	1194a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   166e4:	900c      	str	r0, [sp, #48]	; 0x30
   166e6:	e00c      	b.n	16702 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3e2>
                if (
   166e8:	f89d 00ef 	ldrb.w	r0, [sp, #239]	; 0xef
   166ec:	07c0      	lsls	r0, r0, #31
   166ee:	2800      	cmp	r0, #0
   166f0:	f47f af17 	bne.w	16522 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x202>
   166f4:	e719      	b.n	1652a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x20a>
                || (self.x <= br[0] && self.x > br[0] - border_width)
   166f6:	981b      	ldr	r0, [sp, #108]	; 0x6c
   166f8:	6801      	ldr	r1, [r0, #0]
   166fa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   166fc:	428a      	cmp	r2, r1
   166fe:	dde9      	ble.n	166d4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3b4>
   16700:	e7e4      	b.n	166cc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3ac>
   16702:	980c      	ldr	r0, [sp, #48]	; 0x30
   16704:	6801      	ldr	r1, [r0, #0]
   16706:	9a20      	ldr	r2, [sp, #128]	; 0x80
   16708:	1a8b      	subs	r3, r1, r2
   1670a:	4291      	cmp	r1, r2
   1670c:	930b      	str	r3, [sp, #44]	; 0x2c
   1670e:	f180 80d3 	bvs.w	168b8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x598>
   16712:	e7ff      	b.n	16714 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3f4>
   16714:	980d      	ldr	r0, [sp, #52]	; 0x34
   16716:	990b      	ldr	r1, [sp, #44]	; 0x2c
   16718:	4288      	cmp	r0, r1
   1671a:	dcd3      	bgt.n	166c4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3a4>
   1671c:	e7d6      	b.n	166cc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3ac>
                if (
   1671e:	981d      	ldr	r0, [sp, #116]	; 0x74
   16720:	07c1      	lsls	r1, r0, #31
   16722:	2900      	cmp	r1, #0
   16724:	f47f aee8 	bne.w	164f8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1d8>
   16728:	e6ea      	b.n	16500 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e0>
                else if let Some(fill) = self.style.fill_color {
   1672a:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1672c:	8b01      	ldrh	r1, [r0, #24]
   1672e:	2901      	cmp	r1, #1
   16730:	d03b      	beq.n	167aa <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48a>
   16732:	e057      	b.n	167e4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
                        self.x,
   16734:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16736:	6901      	ldr	r1, [r0, #16]
                        self.y,
   16738:	6942      	ldr	r2, [r0, #20]
                        self.style.stroke_color.expect("Expected stroke"),
   1673a:	8bc3      	ldrh	r3, [r0, #30]
   1673c:	8b80      	ldrh	r0, [r0, #28]
   1673e:	f241 2c04 	movw	ip, #4612	; 0x1204
   16742:	f2c0 0c02 	movt	ip, #2
   16746:	46ee      	mov	lr, sp
   16748:	f8ce c000 	str.w	ip, [lr]
   1674c:	f241 1cf4 	movw	ip, #4596	; 0x11f4
   16750:	f2c0 0c02 	movt	ip, #2
   16754:	f04f 0e0f 	mov.w	lr, #15
   16758:	910a      	str	r1, [sp, #40]	; 0x28
   1675a:	4619      	mov	r1, r3
   1675c:	9209      	str	r2, [sp, #36]	; 0x24
   1675e:	4662      	mov	r2, ip
   16760:	4673      	mov	r3, lr
   16762:	f7fd ffff 	bl	14764 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE>
   16766:	9008      	str	r0, [sp, #32]
   16768:	e7ff      	b.n	1676a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x44a>
                    out = Some((
   1676a:	980a      	ldr	r0, [sp, #40]	; 0x28
   1676c:	9040      	str	r0, [sp, #256]	; 0x100
   1676e:	9909      	ldr	r1, [sp, #36]	; 0x24
   16770:	9141      	str	r1, [sp, #260]	; 0x104
   16772:	9a08      	ldr	r2, [sp, #32]
   16774:	f8ad 2108 	strh.w	r2, [sp, #264]	; 0x108
   16778:	9b40      	ldr	r3, [sp, #256]	; 0x100
   1677a:	f8dd c104 	ldr.w	ip, [sp, #260]	; 0x104
   1677e:	f8dd e108 	ldr.w	lr, [sp, #264]	; 0x108
   16782:	f8cd e0fc 	str.w	lr, [sp, #252]	; 0xfc
   16786:	f8cd c0f8 	str.w	ip, [sp, #248]	; 0xf8
   1678a:	933d      	str	r3, [sp, #244]	; 0xf4
   1678c:	2301      	movs	r3, #1
   1678e:	933c      	str	r3, [sp, #240]	; 0xf0
   16790:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
   16792:	f8dd c0f4 	ldr.w	ip, [sp, #244]	; 0xf4
   16796:	f8dd e0f8 	ldr.w	lr, [sp, #248]	; 0xf8
   1679a:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
   1679c:	9434      	str	r4, [sp, #208]	; 0xd0
   1679e:	f8cd e0cc 	str.w	lr, [sp, #204]	; 0xcc
   167a2:	f8cd c0c8 	str.w	ip, [sp, #200]	; 0xc8
   167a6:	9331      	str	r3, [sp, #196]	; 0xc4
                if (
   167a8:	e01c      	b.n	167e4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
                else if let Some(fill) = self.style.fill_color {
   167aa:	9829      	ldr	r0, [sp, #164]	; 0xa4
   167ac:	8b41      	ldrh	r1, [r0, #26]
   167ae:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
                    out = Some((self.x, self.y, fill));
   167b2:	6902      	ldr	r2, [r0, #16]
   167b4:	6943      	ldr	r3, [r0, #20]
   167b6:	9247      	str	r2, [sp, #284]	; 0x11c
   167b8:	9348      	str	r3, [sp, #288]	; 0x120
   167ba:	f8ad 1124 	strh.w	r1, [sp, #292]	; 0x124
   167be:	9947      	ldr	r1, [sp, #284]	; 0x11c
   167c0:	9a48      	ldr	r2, [sp, #288]	; 0x120
   167c2:	9b49      	ldr	r3, [sp, #292]	; 0x124
   167c4:	9346      	str	r3, [sp, #280]	; 0x118
   167c6:	9245      	str	r2, [sp, #276]	; 0x114
   167c8:	9144      	str	r1, [sp, #272]	; 0x110
   167ca:	2101      	movs	r1, #1
   167cc:	9143      	str	r1, [sp, #268]	; 0x10c
   167ce:	9943      	ldr	r1, [sp, #268]	; 0x10c
   167d0:	9a44      	ldr	r2, [sp, #272]	; 0x110
   167d2:	9b45      	ldr	r3, [sp, #276]	; 0x114
   167d4:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
   167d8:	f8cd c0d0 	str.w	ip, [sp, #208]	; 0xd0
   167dc:	9333      	str	r3, [sp, #204]	; 0xcc
   167de:	9232      	str	r2, [sp, #200]	; 0xc8
   167e0:	9131      	str	r1, [sp, #196]	; 0xc4
                else if let Some(fill) = self.style.fill_color {
   167e2:	e7ff      	b.n	167e4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
            if self.x >= 0 && self.y >= 0 {
   167e4:	e7ff      	b.n	167e6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c6>
            self.x += 1;
   167e6:	9829      	ldr	r0, [sp, #164]	; 0xa4
   167e8:	6901      	ldr	r1, [r0, #16]
   167ea:	1c4a      	adds	r2, r1, #1
   167ec:	4613      	mov	r3, r2
   167ee:	428a      	cmp	r2, r1
   167f0:	9307      	str	r3, [sp, #28]
   167f2:	d66d      	bvs.n	168d0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5b0>
   167f4:	e7ff      	b.n	167f6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4d6>
   167f6:	9807      	ldr	r0, [sp, #28]
   167f8:	9929      	ldr	r1, [sp, #164]	; 0xa4
   167fa:	6108      	str	r0, [r1, #16]
            if self.x > self.bottom_right[0] {
   167fc:	690a      	ldr	r2, [r1, #16]
   167fe:	f101 0008 	add.w	r0, r1, #8
   16802:	2100      	movs	r1, #0
   16804:	9206      	str	r2, [sp, #24]
   16806:	f7fb f8a0 	bl	1194a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   1680a:	9005      	str	r0, [sp, #20]
   1680c:	e7ff      	b.n	1680e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4ee>
   1680e:	9805      	ldr	r0, [sp, #20]
   16810:	6801      	ldr	r1, [r0, #0]
   16812:	9a06      	ldr	r2, [sp, #24]
   16814:	428a      	cmp	r2, r1
   16816:	dd16      	ble.n	16846 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x526>
   16818:	e7ff      	b.n	1681a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4fa>
   1681a:	2100      	movs	r1, #0
                self.x = self.top_left[0];
   1681c:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1681e:	f7fb f894 	bl	1194a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16822:	9004      	str	r0, [sp, #16]
   16824:	e7ff      	b.n	16826 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x506>
   16826:	9804      	ldr	r0, [sp, #16]
   16828:	6801      	ldr	r1, [r0, #0]
   1682a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1682c:	6111      	str	r1, [r2, #16]
                self.y += 1;
   1682e:	6951      	ldr	r1, [r2, #20]
   16830:	1c4b      	adds	r3, r1, #1
   16832:	469c      	mov	ip, r3
   16834:	428b      	cmp	r3, r1
   16836:	f8cd c00c 	str.w	ip, [sp, #12]
   1683a:	d655      	bvs.n	168e8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5c8>
   1683c:	e7ff      	b.n	1683e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x51e>
   1683e:	9803      	ldr	r0, [sp, #12]
   16840:	9929      	ldr	r1, [sp, #164]	; 0xa4
   16842:	6148      	str	r0, [r1, #20]
            if self.x > self.bottom_right[0] {
   16844:	e7ff      	b.n	16846 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x526>
   16846:	a831      	add	r0, sp, #196	; 0xc4
            if out.is_some() {
   16848:	f7fe f826 	bl	14898 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E>
   1684c:	9002      	str	r0, [sp, #8]
   1684e:	e7ff      	b.n	16850 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x530>
   16850:	9802      	ldr	r0, [sp, #8]
   16852:	07c1      	lsls	r1, r0, #31
   16854:	2900      	cmp	r1, #0
   16856:	d101      	bne.n	1685c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x53c>
   16858:	e7ff      	b.n	1685a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x53a>
        let pixel = loop {
   1685a:	e606      	b.n	1646a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x14a>
                break out;
   1685c:	9831      	ldr	r0, [sp, #196]	; 0xc4
   1685e:	9932      	ldr	r1, [sp, #200]	; 0xc8
   16860:	9a33      	ldr	r2, [sp, #204]	; 0xcc
   16862:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   16864:	9330      	str	r3, [sp, #192]	; 0xc0
   16866:	922f      	str	r2, [sp, #188]	; 0xbc
   16868:	912e      	str	r1, [sp, #184]	; 0xb8
   1686a:	902d      	str	r0, [sp, #180]	; 0xb4
   1686c:	e5f0      	b.n	16450 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x130>
    }
   1686e:	e5ed      	b.n	1644c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x12c>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   16870:	f241 1080 	movw	r0, #4480	; 0x1180
   16874:	f2c0 0002 	movt	r0, #2
   16878:	f241 126c 	movw	r2, #4460	; 0x116c
   1687c:	f2c0 0202 	movt	r2, #2
   16880:	211c      	movs	r1, #28
   16882:	f001 f871 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16886:	defe      	udf	#254	; 0xfe
                || (self.y <= br[1] && self.y > br[1] - border_width)
   16888:	f241 10b0 	movw	r0, #4528	; 0x11b0
   1688c:	f2c0 0002 	movt	r0, #2
   16890:	f241 129c 	movw	r2, #4508	; 0x119c
   16894:	f2c0 0202 	movt	r2, #2
   16898:	2121      	movs	r1, #33	; 0x21
   1689a:	f001 f865 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1689e:	defe      	udf	#254	; 0xfe
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   168a0:	f241 1080 	movw	r0, #4480	; 0x1180
   168a4:	f2c0 0002 	movt	r0, #2
   168a8:	f241 12d4 	movw	r2, #4564	; 0x11d4
   168ac:	f2c0 0202 	movt	r2, #2
   168b0:	211c      	movs	r1, #28
   168b2:	f001 f859 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   168b6:	defe      	udf	#254	; 0xfe
                || (self.x <= br[0] && self.x > br[0] - border_width)
   168b8:	f241 10b0 	movw	r0, #4528	; 0x11b0
   168bc:	f2c0 0002 	movt	r0, #2
   168c0:	f241 12e4 	movw	r2, #4580	; 0x11e4
   168c4:	f2c0 0202 	movt	r2, #2
   168c8:	2121      	movs	r1, #33	; 0x21
   168ca:	f001 f84d 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   168ce:	defe      	udf	#254	; 0xfe
            self.x += 1;
   168d0:	f241 1080 	movw	r0, #4480	; 0x1180
   168d4:	f2c0 0002 	movt	r0, #2
   168d8:	f241 2214 	movw	r2, #4628	; 0x1214
   168dc:	f2c0 0202 	movt	r2, #2
   168e0:	211c      	movs	r1, #28
   168e2:	f001 f841 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   168e6:	defe      	udf	#254	; 0xfe
                self.y += 1;
   168e8:	f241 1080 	movw	r0, #4480	; 0x1180
   168ec:	f2c0 0002 	movt	r0, #2
   168f0:	f241 2224 	movw	r2, #4644	; 0x1224
   168f4:	f2c0 0202 	movt	r2, #2
   168f8:	211c      	movs	r1, #28
   168fa:	f001 f835 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   168fe:	defe      	udf	#254	; 0xfe

00016900 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E>:
        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
   16900:	b580      	push	{r7, lr}
   16902:	b08a      	sub	sp, #40	; 0x28
   16904:	680a      	ldr	r2, [r1, #0]
   16906:	9207      	str	r2, [sp, #28]
   16908:	684b      	ldr	r3, [r1, #4]
   1690a:	9308      	str	r3, [sp, #32]
   1690c:	8909      	ldrh	r1, [r1, #8]
   1690e:	468c      	mov	ip, r1
   16910:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
   16914:	9005      	str	r0, [sp, #20]
   16916:	4610      	mov	r0, r2
   16918:	4619      	mov	r1, r3
   1691a:	f8cd c010 	str.w	ip, [sp, #16]
   1691e:	f7fb f80b 	bl	11938 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
   16922:	9003      	str	r0, [sp, #12]
   16924:	9102      	str	r1, [sp, #8]
   16926:	e7ff      	b.n	16928 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E+0x28>
   16928:	9803      	ldr	r0, [sp, #12]
   1692a:	9902      	ldr	r1, [sp, #8]
   1692c:	f7fb f856 	bl	119dc <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE>
   16930:	9001      	str	r0, [sp, #4]
   16932:	9100      	str	r1, [sp, #0]
   16934:	e7ff      	b.n	16936 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E+0x36>
   16936:	9801      	ldr	r0, [sp, #4]
   16938:	9905      	ldr	r1, [sp, #20]
   1693a:	6008      	str	r0, [r1, #0]
   1693c:	9a00      	ldr	r2, [sp, #0]
   1693e:	604a      	str	r2, [r1, #4]
   16940:	9b04      	ldr	r3, [sp, #16]
   16942:	810b      	strh	r3, [r1, #8]
   16944:	b00a      	add	sp, #40	; 0x28
   16946:	bd80      	pop	{r7, pc}

00016948 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>:
    pub fn new(top_left: Coord, bottom_right: Coord) -> Self {
   16948:	b510      	push	{r4, lr}
   1694a:	b08c      	sub	sp, #48	; 0x30
   1694c:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   16950:	9108      	str	r1, [sp, #32]
   16952:	9209      	str	r2, [sp, #36]	; 0x24
   16954:	930a      	str	r3, [sp, #40]	; 0x28
   16956:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   1695a:	f10d 0e14 	add.w	lr, sp, #20
            style: Style::default(),
   1695e:	9004      	str	r0, [sp, #16]
   16960:	4670      	mov	r0, lr
   16962:	9303      	str	r3, [sp, #12]
   16964:	9202      	str	r2, [sp, #8]
   16966:	9101      	str	r1, [sp, #4]
   16968:	f8cd c000 	str.w	ip, [sp]
   1696c:	f000 f818 	bl	169a0 <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>
   16970:	e7ff      	b.n	16972 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E+0x2a>
        Rectangle {
   16972:	9801      	ldr	r0, [sp, #4]
   16974:	9904      	ldr	r1, [sp, #16]
   16976:	6008      	str	r0, [r1, #0]
   16978:	9a02      	ldr	r2, [sp, #8]
   1697a:	604a      	str	r2, [r1, #4]
   1697c:	9b03      	ldr	r3, [sp, #12]
   1697e:	608b      	str	r3, [r1, #8]
   16980:	f8dd c000 	ldr.w	ip, [sp]
   16984:	f8c1 c00c 	str.w	ip, [r1, #12]
   16988:	f8bd e01c 	ldrh.w	lr, [sp, #28]
   1698c:	f8a1 e018 	strh.w	lr, [r1, #24]
   16990:	f8dd e014 	ldr.w	lr, [sp, #20]
   16994:	9c06      	ldr	r4, [sp, #24]
   16996:	614c      	str	r4, [r1, #20]
   16998:	f8c1 e010 	str.w	lr, [r1, #16]
    }
   1699c:	b00c      	add	sp, #48	; 0x30
   1699e:	bd10      	pop	{r4, pc}

000169a0 <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>:

impl<P> Default for Style<P>
where
    P: PixelColor,
{
    fn default() -> Self {
   169a0:	b082      	sub	sp, #8
   169a2:	2100      	movs	r1, #0
        Self {
            fill_color: None,
   169a4:	f8ad 1000 	strh.w	r1, [sp]
            stroke_color: None,
   169a8:	f8ad 1004 	strh.w	r1, [sp, #4]
        Self {
   169ac:	f8bd 1000 	ldrh.w	r1, [sp]
   169b0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   169b4:	8001      	strh	r1, [r0, #0]
   169b6:	8042      	strh	r2, [r0, #2]
   169b8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   169bc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   169c0:	8081      	strh	r1, [r0, #4]
   169c2:	80c2      	strh	r2, [r0, #6]
   169c4:	2101      	movs	r1, #1
   169c6:	7201      	strb	r1, [r0, #8]
            stroke_width: 1,
        }
    }
   169c8:	b002      	add	sp, #8
   169ca:	4770      	bx	lr

000169cc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>:
   169cc:	b082      	sub	sp, #8
   169ce:	9001      	str	r0, [sp, #4]
   169d0:	9000      	str	r0, [sp, #0]
   169d2:	9800      	ldr	r0, [sp, #0]
   169d4:	b002      	add	sp, #8
   169d6:	4770      	bx	lr

000169d8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>:
   169d8:	b081      	sub	sp, #4
   169da:	9000      	str	r0, [sp, #0]
   169dc:	b001      	add	sp, #4
   169de:	4770      	bx	lr

000169e0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>:
#[derive(ToPrimitive)]
   169e0:	b084      	sub	sp, #16
   169e2:	460a      	mov	r2, r1
   169e4:	4603      	mov	r3, r0
   169e6:	9103      	str	r1, [sp, #12]
   169e8:	9002      	str	r0, [sp, #8]
   169ea:	b004      	add	sp, #16
   169ec:	4770      	bx	lr

000169ee <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>:
   169ee:	b510      	push	{r4, lr}
   169f0:	b088      	sub	sp, #32
   169f2:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   169f6:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
   169fa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   169fc:	9102      	str	r1, [sp, #8]
   169fe:	9203      	str	r2, [sp, #12]
   16a00:	9304      	str	r3, [sp, #16]
   16a02:	9405      	str	r4, [sp, #20]
   16a04:	f8cd e018 	str.w	lr, [sp, #24]
   16a08:	f8cd c01c 	str.w	ip, [sp, #28]
   16a0c:	f8cd e000 	str.w	lr, [sp]
   16a10:	f8cd c004 	str.w	ip, [sp, #4]
   16a14:	6001      	str	r1, [r0, #0]
   16a16:	6042      	str	r2, [r0, #4]
   16a18:	9900      	ldr	r1, [sp, #0]
   16a1a:	9a01      	ldr	r2, [sp, #4]
   16a1c:	6081      	str	r1, [r0, #8]
   16a1e:	60c2      	str	r2, [r0, #12]
   16a20:	6103      	str	r3, [r0, #16]
   16a22:	6144      	str	r4, [r0, #20]
   16a24:	b008      	add	sp, #32
   16a26:	bd10      	pop	{r4, pc}

00016a28 <_ZN4core3fmt9Arguments6new_v117hdc09c81c55dd3f27E>:
   16a28:	b580      	push	{r7, lr}
   16a2a:	b086      	sub	sp, #24
   16a2c:	f8dd c020 	ldr.w	ip, [sp, #32]
   16a30:	9102      	str	r1, [sp, #8]
   16a32:	9203      	str	r2, [sp, #12]
   16a34:	9304      	str	r3, [sp, #16]
   16a36:	f8cd c014 	str.w	ip, [sp, #20]
   16a3a:	f04f 0e00 	mov.w	lr, #0
   16a3e:	f8cd e004 	str.w	lr, [sp, #4]
   16a42:	f8cd e000 	str.w	lr, [sp]
   16a46:	f8cd e000 	str.w	lr, [sp]
   16a4a:	6001      	str	r1, [r0, #0]
   16a4c:	6042      	str	r2, [r0, #4]
   16a4e:	9900      	ldr	r1, [sp, #0]
   16a50:	9a01      	ldr	r2, [sp, #4]
   16a52:	6081      	str	r1, [r0, #8]
   16a54:	60c2      	str	r2, [r0, #12]
   16a56:	6103      	str	r3, [r0, #16]
   16a58:	f8c0 c014 	str.w	ip, [r0, #20]
   16a5c:	b006      	add	sp, #24
   16a5e:	bd80      	pop	{r7, pc}

00016a60 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E>:
   16a60:	b580      	push	{r7, lr}
   16a62:	b086      	sub	sp, #24
   16a64:	460a      	mov	r2, r1
   16a66:	4603      	mov	r3, r0
   16a68:	f88d 0014 	strb.w	r0, [sp, #20]
   16a6c:	f88d 1015 	strb.w	r1, [sp, #21]
   16a70:	9203      	str	r2, [sp, #12]
   16a72:	9302      	str	r3, [sp, #8]
   16a74:	f000 f865 	bl	16b42 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E>
   16a78:	9001      	str	r0, [sp, #4]
   16a7a:	9100      	str	r1, [sp, #0]
   16a7c:	e7ff      	b.n	16a7e <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x1e>
   16a7e:	9801      	ldr	r0, [sp, #4]
   16a80:	f88d 0016 	strb.w	r0, [sp, #22]
   16a84:	9900      	ldr	r1, [sp, #0]
   16a86:	f001 0201 	and.w	r2, r1, #1
   16a8a:	f88d 2017 	strb.w	r2, [sp, #23]
   16a8e:	2a00      	cmp	r2, #0
   16a90:	d107      	bne.n	16aa2 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x42>
   16a92:	e7ff      	b.n	16a94 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x34>
   16a94:	9801      	ldr	r0, [sp, #4]
   16a96:	f88d 0011 	strb.w	r0, [sp, #17]
   16a9a:	2101      	movs	r1, #1
   16a9c:	f88d 1010 	strb.w	r1, [sp, #16]
   16aa0:	e003      	b.n	16aaa <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x4a>
   16aa2:	2000      	movs	r0, #0
   16aa4:	f88d 0010 	strb.w	r0, [sp, #16]
   16aa8:	e7ff      	b.n	16aaa <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x4a>
   16aaa:	f89d 0010 	ldrb.w	r0, [sp, #16]
   16aae:	f89d 1011 	ldrb.w	r1, [sp, #17]
   16ab2:	b006      	add	sp, #24
   16ab4:	bd80      	pop	{r7, pc}

00016ab6 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE>:
   16ab6:	b082      	sub	sp, #8
   16ab8:	460a      	mov	r2, r1
   16aba:	4603      	mov	r3, r0
   16abc:	f88d 0005 	strb.w	r0, [sp, #5]
   16ac0:	f88d 1006 	strb.w	r1, [sp, #6]
   16ac4:	4408      	add	r0, r1
   16ac6:	f88d 0007 	strb.w	r0, [sp, #7]
   16aca:	f89d 0007 	ldrb.w	r0, [sp, #7]
   16ace:	9000      	str	r0, [sp, #0]
   16ad0:	e7ff      	b.n	16ad2 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE+0x1c>
   16ad2:	9800      	ldr	r0, [sp, #0]
   16ad4:	b002      	add	sp, #8
   16ad6:	4770      	bx	lr

00016ad8 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17hd4e34d1323470418E>:
   16ad8:	b084      	sub	sp, #16
   16ada:	4602      	mov	r2, r0
   16adc:	f88d 0007 	strb.w	r0, [sp, #7]
   16ae0:	9102      	str	r1, [sp, #8]
   16ae2:	f001 0107 	and.w	r1, r1, #7
   16ae6:	4088      	lsls	r0, r1
   16ae8:	f88d 000f 	strb.w	r0, [sp, #15]
   16aec:	f89d 000f 	ldrb.w	r0, [sp, #15]
   16af0:	9000      	str	r0, [sp, #0]
   16af2:	e7ff      	b.n	16af4 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17hd4e34d1323470418E+0x1c>
   16af4:	9800      	ldr	r0, [sp, #0]
   16af6:	b004      	add	sp, #16
   16af8:	4770      	bx	lr

00016afa <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17h0b64f2ebc21519c0E>:
   16afa:	b084      	sub	sp, #16
   16afc:	b2c2      	uxtb	r2, r0
   16afe:	4603      	mov	r3, r0
   16b00:	f88d 0007 	strb.w	r0, [sp, #7]
   16b04:	9102      	str	r1, [sp, #8]
   16b06:	f001 0007 	and.w	r0, r1, #7
   16b0a:	fa22 f000 	lsr.w	r0, r2, r0
   16b0e:	f88d 000f 	strb.w	r0, [sp, #15]
   16b12:	f89d 000f 	ldrb.w	r0, [sp, #15]
   16b16:	9000      	str	r0, [sp, #0]
   16b18:	e7ff      	b.n	16b1a <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17h0b64f2ebc21519c0E+0x20>
   16b1a:	9800      	ldr	r0, [sp, #0]
   16b1c:	b004      	add	sp, #16
   16b1e:	4770      	bx	lr

00016b20 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h84bf0bac3f755209E>:
   16b20:	b082      	sub	sp, #8
   16b22:	460a      	mov	r2, r1
   16b24:	4603      	mov	r3, r0
   16b26:	f88d 0005 	strb.w	r0, [sp, #5]
   16b2a:	f88d 1006 	strb.w	r1, [sp, #6]
   16b2e:	1a40      	subs	r0, r0, r1
   16b30:	f88d 0007 	strb.w	r0, [sp, #7]
   16b34:	f89d 0007 	ldrb.w	r0, [sp, #7]
   16b38:	9000      	str	r0, [sp, #0]
   16b3a:	e7ff      	b.n	16b3c <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h84bf0bac3f755209E+0x1c>
   16b3c:	9800      	ldr	r0, [sp, #0]
   16b3e:	b002      	add	sp, #8
   16b40:	4770      	bx	lr

00016b42 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E>:
   16b42:	b084      	sub	sp, #16
   16b44:	b2c2      	uxtb	r2, r0
   16b46:	460b      	mov	r3, r1
   16b48:	4684      	mov	ip, r0
   16b4a:	f88d 000a 	strb.w	r0, [sp, #10]
   16b4e:	f88d 100b 	strb.w	r1, [sp, #11]
   16b52:	fa52 f081 	uxtab	r0, r2, r1
   16b56:	b2c1      	uxtb	r1, r0
   16b58:	1a09      	subs	r1, r1, r0
   16b5a:	bf18      	it	ne
   16b5c:	2101      	movne	r1, #1
   16b5e:	f88d 000c 	strb.w	r0, [sp, #12]
   16b62:	f88d 100d 	strb.w	r1, [sp, #13]
   16b66:	f89d 000c 	ldrb.w	r0, [sp, #12]
   16b6a:	f89d 100d 	ldrb.w	r1, [sp, #13]
   16b6e:	9001      	str	r0, [sp, #4]
   16b70:	9100      	str	r1, [sp, #0]
   16b72:	e7ff      	b.n	16b74 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E+0x32>
   16b74:	9801      	ldr	r0, [sp, #4]
   16b76:	f88d 000e 	strb.w	r0, [sp, #14]
   16b7a:	9900      	ldr	r1, [sp, #0]
   16b7c:	f001 0201 	and.w	r2, r1, #1
   16b80:	f88d 200f 	strb.w	r2, [sp, #15]
   16b84:	f88d 0008 	strb.w	r0, [sp, #8]
   16b88:	f88d 2009 	strb.w	r2, [sp, #9]
   16b8c:	f89d 0008 	ldrb.w	r0, [sp, #8]
   16b90:	f89d 1009 	ldrb.w	r1, [sp, #9]
   16b94:	b004      	add	sp, #16
   16b96:	4770      	bx	lr

00016b98 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E>:
   16b98:	b580      	push	{r7, lr}
   16b9a:	b084      	sub	sp, #16
   16b9c:	b2ca      	uxtb	r2, r1
   16b9e:	b2c3      	uxtb	r3, r0
   16ba0:	468c      	mov	ip, r1
   16ba2:	4686      	mov	lr, r0
   16ba4:	f88d 000a 	strb.w	r0, [sp, #10]
   16ba8:	f88d 100b 	strb.w	r1, [sp, #11]
   16bac:	1a98      	subs	r0, r3, r2
   16bae:	b2c1      	uxtb	r1, r0
   16bb0:	1a09      	subs	r1, r1, r0
   16bb2:	bf18      	it	ne
   16bb4:	2101      	movne	r1, #1
   16bb6:	f88d 000c 	strb.w	r0, [sp, #12]
   16bba:	f88d 100d 	strb.w	r1, [sp, #13]
   16bbe:	f89d 000c 	ldrb.w	r0, [sp, #12]
   16bc2:	f89d 100d 	ldrb.w	r1, [sp, #13]
   16bc6:	9001      	str	r0, [sp, #4]
   16bc8:	9100      	str	r1, [sp, #0]
   16bca:	e7ff      	b.n	16bcc <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E+0x34>
   16bcc:	9801      	ldr	r0, [sp, #4]
   16bce:	f88d 000e 	strb.w	r0, [sp, #14]
   16bd2:	9900      	ldr	r1, [sp, #0]
   16bd4:	f001 0201 	and.w	r2, r1, #1
   16bd8:	f88d 200f 	strb.w	r2, [sp, #15]
   16bdc:	f88d 0008 	strb.w	r0, [sp, #8]
   16be0:	f88d 2009 	strb.w	r2, [sp, #9]
   16be4:	f89d 0008 	ldrb.w	r0, [sp, #8]
   16be8:	f89d 1009 	ldrb.w	r1, [sp, #9]
   16bec:	b004      	add	sp, #16
   16bee:	bd80      	pop	{r7, pc}

00016bf0 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E>:
   16bf0:	b083      	sub	sp, #12
   16bf2:	460a      	mov	r2, r1
   16bf4:	4603      	mov	r3, r0
   16bf6:	f8ad 0006 	strh.w	r0, [sp, #6]
   16bfa:	f8ad 1008 	strh.w	r1, [sp, #8]
   16bfe:	4408      	add	r0, r1
   16c00:	f8ad 000a 	strh.w	r0, [sp, #10]
   16c04:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   16c08:	9000      	str	r0, [sp, #0]
   16c0a:	e7ff      	b.n	16c0c <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E+0x1c>
   16c0c:	9800      	ldr	r0, [sp, #0]
   16c0e:	b003      	add	sp, #12
   16c10:	4770      	bx	lr

00016c12 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E>:
   16c12:	b083      	sub	sp, #12
   16c14:	460a      	mov	r2, r1
   16c16:	4603      	mov	r3, r0
   16c18:	f8ad 0006 	strh.w	r0, [sp, #6]
   16c1c:	f8ad 1008 	strh.w	r1, [sp, #8]
   16c20:	1a40      	subs	r0, r0, r1
   16c22:	f8ad 000a 	strh.w	r0, [sp, #10]
   16c26:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   16c2a:	9000      	str	r0, [sp, #0]
   16c2c:	e7ff      	b.n	16c2e <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E+0x1c>
   16c2e:	9800      	ldr	r0, [sp, #0]
   16c30:	b003      	add	sp, #12
   16c32:	4770      	bx	lr

00016c34 <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h91461b58eecc5a2aE>:
   16c34:	b5b0      	push	{r4, r5, r7, lr}
   16c36:	b088      	sub	sp, #32
   16c38:	469c      	mov	ip, r3
   16c3a:	4696      	mov	lr, r2
   16c3c:	460c      	mov	r4, r1
   16c3e:	4605      	mov	r5, r0
   16c40:	9103      	str	r1, [sp, #12]
   16c42:	9002      	str	r0, [sp, #8]
   16c44:	9305      	str	r3, [sp, #20]
   16c46:	9204      	str	r2, [sp, #16]
   16c48:	1a80      	subs	r0, r0, r2
   16c4a:	eb61 0103 	sbc.w	r1, r1, r3
   16c4e:	9107      	str	r1, [sp, #28]
   16c50:	9006      	str	r0, [sp, #24]
   16c52:	9806      	ldr	r0, [sp, #24]
   16c54:	9907      	ldr	r1, [sp, #28]
   16c56:	9001      	str	r0, [sp, #4]
   16c58:	9100      	str	r1, [sp, #0]
   16c5a:	e7ff      	b.n	16c5c <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h91461b58eecc5a2aE+0x28>
   16c5c:	9801      	ldr	r0, [sp, #4]
   16c5e:	9900      	ldr	r1, [sp, #0]
   16c60:	b008      	add	sp, #32
   16c62:	bdb0      	pop	{r4, r5, r7, pc}

00016c64 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>:
    fn le(&self, other: &LevelFilter) -> bool {
   16c64:	b082      	sub	sp, #8
   16c66:	9000      	str	r0, [sp, #0]
   16c68:	9101      	str	r1, [sp, #4]
        *self as usize <= *other as usize
   16c6a:	6800      	ldr	r0, [r0, #0]
   16c6c:	6809      	ldr	r1, [r1, #0]
   16c6e:	2200      	movs	r2, #0
   16c70:	4288      	cmp	r0, r1
   16c72:	bf98      	it	ls
   16c74:	2201      	movls	r2, #1
    }
   16c76:	4610      	mov	r0, r2
   16c78:	b002      	add	sp, #8
   16c7a:	4770      	bx	lr

00016c7c <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h32b550ec8df70192E>:
   16c7c:	b081      	sub	sp, #4
   16c7e:	4601      	mov	r1, r0
   16c80:	f88d 0003 	strb.w	r0, [sp, #3]
   16c84:	b2c0      	uxtb	r0, r0
   16c86:	b001      	add	sp, #4
   16c88:	4770      	bx	lr

00016c8a <_ZN4core3mem4swap17h206518364108b51fE>:
   16c8a:	b580      	push	{r7, lr}
   16c8c:	b082      	sub	sp, #8
   16c8e:	9000      	str	r0, [sp, #0]
   16c90:	9101      	str	r1, [sp, #4]
   16c92:	f000 fc55 	bl	17540 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE>
   16c96:	e7ff      	b.n	16c98 <_ZN4core3mem4swap17h206518364108b51fE+0xe>
   16c98:	b002      	add	sp, #8
   16c9a:	bd80      	pop	{r7, pc}

00016c9c <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h7f385561cf81b0ffE>:
   16c9c:	b580      	push	{r7, lr}
   16c9e:	b088      	sub	sp, #32
   16ca0:	9004      	str	r0, [sp, #16]
   16ca2:	9105      	str	r1, [sp, #20]
   16ca4:	9206      	str	r2, [sp, #24]
   16ca6:	9307      	str	r3, [sp, #28]
   16ca8:	9003      	str	r0, [sp, #12]
   16caa:	4610      	mov	r0, r2
   16cac:	9102      	str	r1, [sp, #8]
   16cae:	4619      	mov	r1, r3
   16cb0:	9a03      	ldr	r2, [sp, #12]
   16cb2:	9b02      	ldr	r3, [sp, #8]
   16cb4:	f7f1 ff9e 	bl	8bf4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>
   16cb8:	9001      	str	r0, [sp, #4]
   16cba:	9100      	str	r1, [sp, #0]
   16cbc:	e7ff      	b.n	16cbe <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h7f385561cf81b0ffE+0x22>
   16cbe:	9801      	ldr	r0, [sp, #4]
   16cc0:	9900      	ldr	r1, [sp, #0]
   16cc2:	b008      	add	sp, #32
   16cc4:	bd80      	pop	{r7, pc}

00016cc6 <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17hc283e26c72ff63bbE>:
   16cc6:	b082      	sub	sp, #8
   16cc8:	9000      	str	r0, [sp, #0]
   16cca:	9101      	str	r1, [sp, #4]
   16ccc:	7800      	ldrb	r0, [r0, #0]
   16cce:	7809      	ldrb	r1, [r1, #0]
   16cd0:	2200      	movs	r2, #0
   16cd2:	4288      	cmp	r0, r1
   16cd4:	bf38      	it	cc
   16cd6:	2201      	movcc	r2, #1
   16cd8:	4610      	mov	r0, r2
   16cda:	b002      	add	sp, #8
   16cdc:	4770      	bx	lr

00016cde <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE>:
   16cde:	b580      	push	{r7, lr}
   16ce0:	b088      	sub	sp, #32
   16ce2:	9005      	str	r0, [sp, #20]
   16ce4:	9106      	str	r1, [sp, #24]
   16ce6:	9002      	str	r0, [sp, #8]
   16ce8:	4608      	mov	r0, r1
   16cea:	f000 fd04 	bl	176f6 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE>
   16cee:	f88d 1011 	strb.w	r1, [sp, #17]
   16cf2:	f88d 0010 	strb.w	r0, [sp, #16]
   16cf6:	e7ff      	b.n	16cf8 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x1a>
   16cf8:	f89d 0010 	ldrb.w	r0, [sp, #16]
   16cfc:	07c1      	lsls	r1, r0, #31
   16cfe:	2900      	cmp	r1, #0
   16d00:	d005      	beq.n	16d0e <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x30>
   16d02:	e7ff      	b.n	16d04 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x26>
   16d04:	2000      	movs	r0, #0
   16d06:	f88d 000c 	strb.w	r0, [sp, #12]
   16d0a:	e011      	b.n	16d30 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x52>
   16d0c:	defe      	udf	#254	; 0xfe
   16d0e:	f89d 0011 	ldrb.w	r0, [sp, #17]
   16d12:	f88d 001f 	strb.w	r0, [sp, #31]
   16d16:	9902      	ldr	r1, [sp, #8]
   16d18:	780a      	ldrb	r2, [r1, #0]
   16d1a:	9001      	str	r0, [sp, #4]
   16d1c:	4610      	mov	r0, r2
   16d1e:	9901      	ldr	r1, [sp, #4]
   16d20:	f7ff fe9e 	bl	16a60 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E>
   16d24:	f88d 100d 	strb.w	r1, [sp, #13]
   16d28:	f88d 000c 	strb.w	r0, [sp, #12]
   16d2c:	e7ff      	b.n	16d2e <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x50>
   16d2e:	e7ff      	b.n	16d30 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x52>
   16d30:	f89d 000c 	ldrb.w	r0, [sp, #12]
   16d34:	f89d 100d 	ldrb.w	r1, [sp, #13]
   16d38:	b008      	add	sp, #32
   16d3a:	bd80      	pop	{r7, pc}

00016d3c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   16d3c:	b580      	push	{r7, lr}
   16d3e:	b088      	sub	sp, #32
   16d40:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   16d42:	1d01      	adds	r1, r0, #4
   16d44:	9106      	str	r1, [sp, #24]
   16d46:	9107      	str	r1, [sp, #28]
   16d48:	9004      	str	r0, [sp, #16]
   16d4a:	9103      	str	r1, [sp, #12]
   16d4c:	e7ff      	b.n	16d4e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x12>
   16d4e:	9804      	ldr	r0, [sp, #16]
   16d50:	6801      	ldr	r1, [r0, #0]
   16d52:	9803      	ldr	r0, [sp, #12]
   16d54:	f7f1 fffe 	bl	8d54 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   16d58:	9002      	str	r0, [sp, #8]
   16d5a:	9101      	str	r1, [sp, #4]
   16d5c:	e7ff      	b.n	16d5e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x22>
    }
   16d5e:	9802      	ldr	r0, [sp, #8]
   16d60:	9901      	ldr	r1, [sp, #4]
   16d62:	b008      	add	sp, #32
   16d64:	bd80      	pop	{r7, pc}

00016d66 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   16d66:	b580      	push	{r7, lr}
   16d68:	b088      	sub	sp, #32
   16d6a:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   16d6c:	1d01      	adds	r1, r0, #4
   16d6e:	9106      	str	r1, [sp, #24]
   16d70:	9107      	str	r1, [sp, #28]
   16d72:	9004      	str	r0, [sp, #16]
   16d74:	9103      	str	r1, [sp, #12]
   16d76:	e7ff      	b.n	16d78 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE+0x12>
   16d78:	9804      	ldr	r0, [sp, #16]
   16d7a:	6801      	ldr	r1, [r0, #0]
   16d7c:	9803      	ldr	r0, [sp, #12]
   16d7e:	f7f1 ffe9 	bl	8d54 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   16d82:	9002      	str	r0, [sp, #8]
   16d84:	9101      	str	r1, [sp, #4]
   16d86:	e7ff      	b.n	16d88 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE+0x22>
    }
   16d88:	9802      	ldr	r0, [sp, #8]
   16d8a:	9901      	ldr	r1, [sp, #4]
   16d8c:	b008      	add	sp, #32
   16d8e:	bd80      	pop	{r7, pc}

00016d90 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   16d90:	b580      	push	{r7, lr}
   16d92:	b08a      	sub	sp, #40	; 0x28
   16d94:	460a      	mov	r2, r1
   16d96:	9006      	str	r0, [sp, #24]
   16d98:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   16d9c:	1d01      	adds	r1, r0, #4
   16d9e:	9108      	str	r1, [sp, #32]
   16da0:	9109      	str	r1, [sp, #36]	; 0x24
   16da2:	9005      	str	r0, [sp, #20]
   16da4:	9204      	str	r2, [sp, #16]
   16da6:	9103      	str	r1, [sp, #12]
   16da8:	e7ff      	b.n	16daa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x1a>
            .add(self.len)
   16daa:	9805      	ldr	r0, [sp, #20]
   16dac:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   16dae:	9803      	ldr	r0, [sp, #12]
   16db0:	f7fb f80b 	bl	11dca <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   16db4:	9002      	str	r0, [sp, #8]
   16db6:	e7ff      	b.n	16db8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x28>
   16db8:	9802      	ldr	r0, [sp, #8]
   16dba:	9904      	ldr	r1, [sp, #16]
   16dbc:	f000 f994 	bl	170e8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   16dc0:	e7ff      	b.n	16dc2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x32>
        self.len += 1;
   16dc2:	9805      	ldr	r0, [sp, #20]
   16dc4:	6801      	ldr	r1, [r0, #0]
   16dc6:	1c4a      	adds	r2, r1, #1
   16dc8:	4613      	mov	r3, r2
   16dca:	428a      	cmp	r2, r1
   16dcc:	9301      	str	r3, [sp, #4]
   16dce:	d305      	bcc.n	16ddc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x4c>
   16dd0:	e7ff      	b.n	16dd2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x42>
   16dd2:	9801      	ldr	r0, [sp, #4]
   16dd4:	9905      	ldr	r1, [sp, #20]
   16dd6:	6008      	str	r0, [r1, #0]
    }
   16dd8:	b00a      	add	sp, #40	; 0x28
   16dda:	bd80      	pop	{r7, pc}
        self.len += 1;
   16ddc:	f241 20a0 	movw	r0, #4768	; 0x12a0
   16de0:	f2c0 0002 	movt	r0, #2
   16de4:	f241 228c 	movw	r2, #4748	; 0x128c
   16de8:	f2c0 0202 	movt	r2, #2
   16dec:	211c      	movs	r1, #28
   16dee:	f000 fdbb 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16df2:	defe      	udf	#254	; 0xfe

00016df4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   16df4:	b580      	push	{r7, lr}
   16df6:	b08a      	sub	sp, #40	; 0x28
   16df8:	460a      	mov	r2, r1
   16dfa:	9006      	str	r0, [sp, #24]
   16dfc:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   16e00:	1d01      	adds	r1, r0, #4
   16e02:	9108      	str	r1, [sp, #32]
   16e04:	9109      	str	r1, [sp, #36]	; 0x24
   16e06:	9005      	str	r0, [sp, #20]
   16e08:	9204      	str	r2, [sp, #16]
   16e0a:	9103      	str	r1, [sp, #12]
   16e0c:	e7ff      	b.n	16e0e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x1a>
            .add(self.len)
   16e0e:	9805      	ldr	r0, [sp, #20]
   16e10:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   16e12:	9803      	ldr	r0, [sp, #12]
   16e14:	f7fa ffd9 	bl	11dca <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   16e18:	9002      	str	r0, [sp, #8]
   16e1a:	e7ff      	b.n	16e1c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x28>
   16e1c:	9802      	ldr	r0, [sp, #8]
   16e1e:	9904      	ldr	r1, [sp, #16]
   16e20:	f000 f962 	bl	170e8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   16e24:	e7ff      	b.n	16e26 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x32>
        self.len += 1;
   16e26:	9805      	ldr	r0, [sp, #20]
   16e28:	6801      	ldr	r1, [r0, #0]
   16e2a:	1c4a      	adds	r2, r1, #1
   16e2c:	4613      	mov	r3, r2
   16e2e:	428a      	cmp	r2, r1
   16e30:	9301      	str	r3, [sp, #4]
   16e32:	d305      	bcc.n	16e40 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x4c>
   16e34:	e7ff      	b.n	16e36 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x42>
   16e36:	9801      	ldr	r0, [sp, #4]
   16e38:	9905      	ldr	r1, [sp, #20]
   16e3a:	6008      	str	r0, [r1, #0]
    }
   16e3c:	b00a      	add	sp, #40	; 0x28
   16e3e:	bd80      	pop	{r7, pc}
        self.len += 1;
   16e40:	f241 20a0 	movw	r0, #4768	; 0x12a0
   16e44:	f2c0 0002 	movt	r0, #2
   16e48:	f241 228c 	movw	r2, #4748	; 0x128c
   16e4c:	f2c0 0202 	movt	r2, #2
   16e50:	211c      	movs	r1, #28
   16e52:	f000 fd89 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16e56:	defe      	udf	#254	; 0xfe

00016e58 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   16e58:	b580      	push	{r7, lr}
   16e5a:	b094      	sub	sp, #80	; 0x50
   16e5c:	900e      	str	r0, [sp, #56]	; 0x38
   16e5e:	910f      	str	r1, [sp, #60]	; 0x3c
   16e60:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   16e62:	6803      	ldr	r3, [r0, #0]
   16e64:	9009      	str	r0, [sp, #36]	; 0x24
   16e66:	4608      	mov	r0, r1
   16e68:	9108      	str	r1, [sp, #32]
   16e6a:	4611      	mov	r1, r2
   16e6c:	9207      	str	r2, [sp, #28]
   16e6e:	9306      	str	r3, [sp, #24]
   16e70:	f7fb f83b 	bl	11eea <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   16e74:	9005      	str	r0, [sp, #20]
   16e76:	e7ff      	b.n	16e78 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x20>
   16e78:	9806      	ldr	r0, [sp, #24]
   16e7a:	9905      	ldr	r1, [sp, #20]
   16e7c:	1842      	adds	r2, r0, r1
   16e7e:	4613      	mov	r3, r2
   16e80:	4282      	cmp	r2, r0
   16e82:	9304      	str	r3, [sp, #16]
   16e84:	d33f      	bcc.n	16f06 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xae>
   16e86:	e7ff      	b.n	16e88 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x30>
   16e88:	9809      	ldr	r0, [sp, #36]	; 0x24
   16e8a:	f000 f8b7 	bl	16ffc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE>
   16e8e:	9003      	str	r0, [sp, #12]
   16e90:	e7ff      	b.n	16e92 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x3a>
   16e92:	9804      	ldr	r0, [sp, #16]
   16e94:	9903      	ldr	r1, [sp, #12]
   16e96:	4288      	cmp	r0, r1
   16e98:	d807      	bhi.n	16eaa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x52>
   16e9a:	e7ff      	b.n	16e9c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x44>
            for elem in other {
   16e9c:	9808      	ldr	r0, [sp, #32]
   16e9e:	9907      	ldr	r1, [sp, #28]
   16ea0:	f7f2 f876 	bl	8f90 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>
   16ea4:	9002      	str	r0, [sp, #8]
   16ea6:	9101      	str	r1, [sp, #4]
   16ea8:	e003      	b.n	16eb2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x5a>
   16eaa:	2001      	movs	r0, #1
            Err(())
   16eac:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   16eb0:	e025      	b.n	16efe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xa6>
            for elem in other {
   16eb2:	9802      	ldr	r0, [sp, #8]
   16eb4:	900b      	str	r0, [sp, #44]	; 0x2c
   16eb6:	9901      	ldr	r1, [sp, #4]
   16eb8:	910c      	str	r1, [sp, #48]	; 0x30
   16eba:	e7ff      	b.n	16ebc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x64>
   16ebc:	a80b      	add	r0, sp, #44	; 0x2c
   16ebe:	f7fa fbe6 	bl	1168e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>
   16ec2:	900d      	str	r0, [sp, #52]	; 0x34
   16ec4:	e7ff      	b.n	16ec6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x6e>
   16ec6:	980d      	ldr	r0, [sp, #52]	; 0x34
   16ec8:	2800      	cmp	r0, #0
   16eca:	4601      	mov	r1, r0
   16ecc:	bf18      	it	ne
   16ece:	2101      	movne	r1, #1
   16ed0:	2800      	cmp	r0, #0
   16ed2:	d001      	beq.n	16ed8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x80>
   16ed4:	e7ff      	b.n	16ed6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x7e>
   16ed6:	e004      	b.n	16ee2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x8a>
   16ed8:	2000      	movs	r0, #0
            Ok(())
   16eda:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   16ede:	e00e      	b.n	16efe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xa6>
            for elem in other {
   16ee0:	defe      	udf	#254	; 0xfe
   16ee2:	980d      	ldr	r0, [sp, #52]	; 0x34
   16ee4:	9011      	str	r0, [sp, #68]	; 0x44
   16ee6:	9012      	str	r0, [sp, #72]	; 0x48
   16ee8:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   16eea:	f000 f909 	bl	17100 <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>
   16eee:	9000      	str	r0, [sp, #0]
   16ef0:	e7ff      	b.n	16ef2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x9a>
   16ef2:	9809      	ldr	r0, [sp, #36]	; 0x24
   16ef4:	9900      	ldr	r1, [sp, #0]
   16ef6:	f7ff ff7d 	bl	16df4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE>
   16efa:	e7ff      	b.n	16efc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xa4>
            for elem in other {
   16efc:	e7de      	b.n	16ebc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x64>
    }
   16efe:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   16f02:	b014      	add	sp, #80	; 0x50
   16f04:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   16f06:	f241 20a0 	movw	r0, #4768	; 0x12a0
   16f0a:	f2c0 0002 	movt	r0, #2
   16f0e:	f241 22bc 	movw	r2, #4796	; 0x12bc
   16f12:	f2c0 0202 	movt	r2, #2
   16f16:	211c      	movs	r1, #28
   16f18:	f000 fd26 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16f1c:	defe      	udf	#254	; 0xfe

00016f1e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>:
    pub(crate) fn push(&mut self, item: T) -> Result<(), T> {
   16f1e:	b580      	push	{r7, lr}
   16f20:	b088      	sub	sp, #32
   16f22:	460a      	mov	r2, r1
   16f24:	9006      	str	r0, [sp, #24]
   16f26:	f88d 101f 	strb.w	r1, [sp, #31]
        if self.len < self.capacity() {
   16f2a:	6801      	ldr	r1, [r0, #0]
   16f2c:	9004      	str	r0, [sp, #16]
   16f2e:	9203      	str	r2, [sp, #12]
   16f30:	9102      	str	r1, [sp, #8]
   16f32:	f000 f859 	bl	16fe8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>
   16f36:	9001      	str	r0, [sp, #4]
   16f38:	e7ff      	b.n	16f3a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x1c>
   16f3a:	9802      	ldr	r0, [sp, #8]
   16f3c:	9901      	ldr	r1, [sp, #4]
   16f3e:	4288      	cmp	r0, r1
   16f40:	d307      	bcc.n	16f52 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x34>
   16f42:	e7ff      	b.n	16f44 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x26>
            Err(item)
   16f44:	9803      	ldr	r0, [sp, #12]
   16f46:	f88d 0015 	strb.w	r0, [sp, #21]
   16f4a:	2101      	movs	r1, #1
   16f4c:	f88d 1014 	strb.w	r1, [sp, #20]
        if self.len < self.capacity() {
   16f50:	e008      	b.n	16f64 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
            unsafe { self.push_unchecked(item) }
   16f52:	9804      	ldr	r0, [sp, #16]
   16f54:	9903      	ldr	r1, [sp, #12]
   16f56:	f7ff ff1b 	bl	16d90 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>
   16f5a:	e7ff      	b.n	16f5c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x3e>
   16f5c:	2000      	movs	r0, #0
            Ok(())
   16f5e:	f88d 0014 	strb.w	r0, [sp, #20]
        if self.len < self.capacity() {
   16f62:	e7ff      	b.n	16f64 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
    }
   16f64:	f89d 0014 	ldrb.w	r0, [sp, #20]
   16f68:	f89d 1015 	ldrb.w	r1, [sp, #21]
   16f6c:	b008      	add	sp, #32
   16f6e:	bd80      	pop	{r7, pc}

00016f70 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>:
    pub(crate) fn clear(&mut self) {
   16f70:	b580      	push	{r7, lr}
   16f72:	b082      	sub	sp, #8
   16f74:	9001      	str	r0, [sp, #4]
   16f76:	2100      	movs	r1, #0
        self.truncate(0);
   16f78:	f000 f880 	bl	1707c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>
   16f7c:	e7ff      	b.n	16f7e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E+0xe>
    }
   16f7e:	b002      	add	sp, #8
   16f80:	bd80      	pop	{r7, pc}

00016f82 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E>:
    pub(crate) fn clear(&mut self) {
   16f82:	b580      	push	{r7, lr}
   16f84:	b082      	sub	sp, #8
   16f86:	9001      	str	r0, [sp, #4]
   16f88:	2100      	movs	r1, #0
        self.truncate(0);
   16f8a:	f000 f841 	bl	17010 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E>
   16f8e:	e7ff      	b.n	16f90 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E+0xe>
    }
   16f90:	b002      	add	sp, #8
   16f92:	bd80      	pop	{r7, pc}

00016f94 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E>:
    pub(crate) fn as_slice(&self) -> &[T] {
   16f94:	b580      	push	{r7, lr}
   16f96:	b088      	sub	sp, #32
   16f98:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   16f9a:	1d01      	adds	r1, r0, #4
   16f9c:	9106      	str	r1, [sp, #24]
   16f9e:	9107      	str	r1, [sp, #28]
   16fa0:	9004      	str	r0, [sp, #16]
   16fa2:	9103      	str	r1, [sp, #12]
   16fa4:	e7ff      	b.n	16fa6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E+0x12>
   16fa6:	9804      	ldr	r0, [sp, #16]
   16fa8:	6801      	ldr	r1, [r0, #0]
   16faa:	9803      	ldr	r0, [sp, #12]
   16fac:	f7fb fbb1 	bl	12712 <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   16fb0:	9002      	str	r0, [sp, #8]
   16fb2:	9101      	str	r1, [sp, #4]
   16fb4:	e7ff      	b.n	16fb6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E+0x22>
    }
   16fb6:	9802      	ldr	r0, [sp, #8]
   16fb8:	9901      	ldr	r1, [sp, #4]
   16fba:	b008      	add	sp, #32
   16fbc:	bd80      	pop	{r7, pc}

00016fbe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   16fbe:	b580      	push	{r7, lr}
   16fc0:	b088      	sub	sp, #32
   16fc2:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   16fc4:	1d01      	adds	r1, r0, #4
   16fc6:	9106      	str	r1, [sp, #24]
   16fc8:	9107      	str	r1, [sp, #28]
   16fca:	9004      	str	r0, [sp, #16]
   16fcc:	9103      	str	r1, [sp, #12]
   16fce:	e7ff      	b.n	16fd0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x12>
   16fd0:	9804      	ldr	r0, [sp, #16]
   16fd2:	6801      	ldr	r1, [r0, #0]
   16fd4:	9803      	ldr	r0, [sp, #12]
   16fd6:	f7fb fb9c 	bl	12712 <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   16fda:	9002      	str	r0, [sp, #8]
   16fdc:	9101      	str	r1, [sp, #4]
   16fde:	e7ff      	b.n	16fe0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x22>
    }
   16fe0:	9802      	ldr	r0, [sp, #8]
   16fe2:	9901      	ldr	r1, [sp, #4]
   16fe4:	b008      	add	sp, #32
   16fe6:	bd80      	pop	{r7, pc}

00016fe8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>:
    pub(crate) fn capacity(&self) -> usize {
   16fe8:	b580      	push	{r7, lr}
   16fea:	b082      	sub	sp, #8
   16fec:	9001      	str	r0, [sp, #4]
        N::to_usize()
   16fee:	f000 f964 	bl	172ba <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   16ff2:	9000      	str	r0, [sp, #0]
   16ff4:	e7ff      	b.n	16ff6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E+0xe>
    }
   16ff6:	9800      	ldr	r0, [sp, #0]
   16ff8:	b002      	add	sp, #8
   16ffa:	bd80      	pop	{r7, pc}

00016ffc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE>:
    pub(crate) fn capacity(&self) -> usize {
   16ffc:	b580      	push	{r7, lr}
   16ffe:	b082      	sub	sp, #8
   17000:	9001      	str	r0, [sp, #4]
        N::to_usize()
   17002:	f000 f8b2 	bl	1716a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E>
   17006:	9000      	str	r0, [sp, #0]
   17008:	e7ff      	b.n	1700a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE+0xe>
    }
   1700a:	9800      	ldr	r0, [sp, #0]
   1700c:	b002      	add	sp, #8
   1700e:	bd80      	pop	{r7, pc}

00017010 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   17010:	b580      	push	{r7, lr}
   17012:	b08a      	sub	sp, #40	; 0x28
   17014:	9007      	str	r0, [sp, #28]
   17016:	9108      	str	r1, [sp, #32]
   17018:	9106      	str	r1, [sp, #24]
   1701a:	9005      	str	r0, [sp, #20]
   1701c:	e7ff      	b.n	1701e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0xe>
            while len < self.len {
   1701e:	9805      	ldr	r0, [sp, #20]
   17020:	6801      	ldr	r1, [r0, #0]
   17022:	9a06      	ldr	r2, [sp, #24]
   17024:	428a      	cmp	r2, r1
   17026:	d302      	bcc.n	1702e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x1e>
   17028:	e7ff      	b.n	1702a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x1a>
    }
   1702a:	b00a      	add	sp, #40	; 0x28
   1702c:	bd80      	pop	{r7, pc}
                self.len -= 1;
   1702e:	9805      	ldr	r0, [sp, #20]
   17030:	6801      	ldr	r1, [r0, #0]
   17032:	1e4a      	subs	r2, r1, #1
   17034:	2901      	cmp	r1, #1
   17036:	9204      	str	r2, [sp, #16]
   17038:	d314      	bcc.n	17064 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x54>
   1703a:	e7ff      	b.n	1703c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x2c>
   1703c:	9804      	ldr	r0, [sp, #16]
   1703e:	9905      	ldr	r1, [sp, #20]
   17040:	6008      	str	r0, [r1, #0]
                let len = self.len;
   17042:	680a      	ldr	r2, [r1, #0]
   17044:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   17046:	4608      	mov	r0, r1
   17048:	9203      	str	r2, [sp, #12]
   1704a:	f7ff fe8c 	bl	16d66 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE>
   1704e:	9002      	str	r0, [sp, #8]
   17050:	9101      	str	r1, [sp, #4]
   17052:	e7ff      	b.n	17054 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x44>
   17054:	9802      	ldr	r0, [sp, #8]
   17056:	9901      	ldr	r1, [sp, #4]
   17058:	9a03      	ldr	r2, [sp, #12]
   1705a:	f7fa ff34 	bl	11ec6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   1705e:	e7ff      	b.n	17060 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x50>
   17060:	e7ff      	b.n	17062 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x52>
            while len < self.len {
   17062:	e7dc      	b.n	1701e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0xe>
                self.len -= 1;
   17064:	f241 20e0 	movw	r0, #4832	; 0x12e0
   17068:	f2c0 0002 	movt	r0, #2
   1706c:	f241 22cc 	movw	r2, #4812	; 0x12cc
   17070:	f2c0 0202 	movt	r2, #2
   17074:	2121      	movs	r1, #33	; 0x21
   17076:	f000 fc77 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1707a:	defe      	udf	#254	; 0xfe

0001707c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   1707c:	b580      	push	{r7, lr}
   1707e:	b08a      	sub	sp, #40	; 0x28
   17080:	9007      	str	r0, [sp, #28]
   17082:	9108      	str	r1, [sp, #32]
   17084:	9106      	str	r1, [sp, #24]
   17086:	9005      	str	r0, [sp, #20]
   17088:	e7ff      	b.n	1708a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
            while len < self.len {
   1708a:	9805      	ldr	r0, [sp, #20]
   1708c:	6801      	ldr	r1, [r0, #0]
   1708e:	9a06      	ldr	r2, [sp, #24]
   17090:	428a      	cmp	r2, r1
   17092:	d302      	bcc.n	1709a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1e>
   17094:	e7ff      	b.n	17096 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1a>
    }
   17096:	b00a      	add	sp, #40	; 0x28
   17098:	bd80      	pop	{r7, pc}
                self.len -= 1;
   1709a:	9805      	ldr	r0, [sp, #20]
   1709c:	6801      	ldr	r1, [r0, #0]
   1709e:	1e4a      	subs	r2, r1, #1
   170a0:	2901      	cmp	r1, #1
   170a2:	9204      	str	r2, [sp, #16]
   170a4:	d314      	bcc.n	170d0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x54>
   170a6:	e7ff      	b.n	170a8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x2c>
   170a8:	9804      	ldr	r0, [sp, #16]
   170aa:	9905      	ldr	r1, [sp, #20]
   170ac:	6008      	str	r0, [r1, #0]
                let len = self.len;
   170ae:	680a      	ldr	r2, [r1, #0]
   170b0:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   170b2:	4608      	mov	r0, r1
   170b4:	9203      	str	r2, [sp, #12]
   170b6:	f7ff fe41 	bl	16d3c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>
   170ba:	9002      	str	r0, [sp, #8]
   170bc:	9101      	str	r1, [sp, #4]
   170be:	e7ff      	b.n	170c0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x44>
   170c0:	9802      	ldr	r0, [sp, #8]
   170c2:	9901      	ldr	r1, [sp, #4]
   170c4:	9a03      	ldr	r2, [sp, #12]
   170c6:	f7fa fefe 	bl	11ec6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   170ca:	e7ff      	b.n	170cc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x50>
   170cc:	e7ff      	b.n	170ce <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x52>
            while len < self.len {
   170ce:	e7dc      	b.n	1708a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
                self.len -= 1;
   170d0:	f241 20e0 	movw	r0, #4832	; 0x12e0
   170d4:	f2c0 0002 	movt	r0, #2
   170d8:	f241 22cc 	movw	r2, #4812	; 0x12cc
   170dc:	f2c0 0202 	movt	r2, #2
   170e0:	2121      	movs	r1, #33	; 0x21
   170e2:	f000 fc41 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   170e6:	defe      	udf	#254	; 0xfe

000170e8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>:
   170e8:	b580      	push	{r7, lr}
   170ea:	b084      	sub	sp, #16
   170ec:	460a      	mov	r2, r1
   170ee:	9002      	str	r0, [sp, #8]
   170f0:	f88d 100f 	strb.w	r1, [sp, #15]
   170f4:	9201      	str	r2, [sp, #4]
   170f6:	f7f1 ffd3 	bl	90a0 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   170fa:	e7ff      	b.n	170fc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE+0x14>
   170fc:	b004      	add	sp, #16
   170fe:	bd80      	pop	{r7, pc}

00017100 <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>:
   17100:	b081      	sub	sp, #4
   17102:	9000      	str	r0, [sp, #0]
   17104:	7800      	ldrb	r0, [r0, #0]
   17106:	b001      	add	sp, #4
   17108:	4770      	bx	lr

0001710a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>:
    fn to_usize() -> usize {
   1710a:	b580      	push	{r7, lr}
   1710c:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1710e:	f000 fb0b 	bl	17728 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17112:	9003      	str	r0, [sp, #12]
   17114:	e7ff      	b.n	17116 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0xc>
   17116:	9803      	ldr	r0, [sp, #12]
   17118:	f000 fb0c 	bl	17734 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1711c:	9002      	str	r0, [sp, #8]
   1711e:	e7ff      	b.n	17120 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x16>
   17120:	f000 f8cb 	bl	172ba <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   17124:	9001      	str	r0, [sp, #4]
   17126:	e7ff      	b.n	17128 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x1e>
   17128:	9801      	ldr	r0, [sp, #4]
   1712a:	0041      	lsls	r1, r0, #1
   1712c:	9100      	str	r1, [sp, #0]
   1712e:	e7ff      	b.n	17130 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x26>
   17130:	9802      	ldr	r0, [sp, #8]
   17132:	9900      	ldr	r1, [sp, #0]
   17134:	4308      	orrs	r0, r1
    }
   17136:	b004      	add	sp, #16
   17138:	bd80      	pop	{r7, pc}

0001713a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>:
    fn to_usize() -> usize {
   1713a:	b580      	push	{r7, lr}
   1713c:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1713e:	f000 faf3 	bl	17728 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17142:	9003      	str	r0, [sp, #12]
   17144:	e7ff      	b.n	17146 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0xc>
   17146:	9803      	ldr	r0, [sp, #12]
   17148:	f000 faf4 	bl	17734 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1714c:	9002      	str	r0, [sp, #8]
   1714e:	e7ff      	b.n	17150 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x16>
   17150:	f000 f86b 	bl	1722a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>
   17154:	9001      	str	r0, [sp, #4]
   17156:	e7ff      	b.n	17158 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x1e>
   17158:	9801      	ldr	r0, [sp, #4]
   1715a:	0041      	lsls	r1, r0, #1
   1715c:	9100      	str	r1, [sp, #0]
   1715e:	e7ff      	b.n	17160 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x26>
   17160:	9802      	ldr	r0, [sp, #8]
   17162:	9900      	ldr	r1, [sp, #0]
   17164:	4308      	orrs	r0, r1
    }
   17166:	b004      	add	sp, #16
   17168:	bd80      	pop	{r7, pc}

0001716a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E>:
    fn to_usize() -> usize {
   1716a:	b580      	push	{r7, lr}
   1716c:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1716e:	f000 fadb 	bl	17728 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17172:	9003      	str	r0, [sp, #12]
   17174:	e7ff      	b.n	17176 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0xc>
   17176:	9803      	ldr	r0, [sp, #12]
   17178:	f000 fadc 	bl	17734 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1717c:	9002      	str	r0, [sp, #8]
   1717e:	e7ff      	b.n	17180 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0x16>
   17180:	f000 f8fb 	bl	1737a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE>
   17184:	9001      	str	r0, [sp, #4]
   17186:	e7ff      	b.n	17188 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0x1e>
   17188:	9801      	ldr	r0, [sp, #4]
   1718a:	0041      	lsls	r1, r0, #1
   1718c:	9100      	str	r1, [sp, #0]
   1718e:	e7ff      	b.n	17190 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0x26>
   17190:	9802      	ldr	r0, [sp, #8]
   17192:	9900      	ldr	r1, [sp, #0]
   17194:	4308      	orrs	r0, r1
    }
   17196:	b004      	add	sp, #16
   17198:	bd80      	pop	{r7, pc}

0001719a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>:
    fn to_usize() -> usize {
   1719a:	b580      	push	{r7, lr}
   1719c:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1719e:	f000 fac3 	bl	17728 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   171a2:	9003      	str	r0, [sp, #12]
   171a4:	e7ff      	b.n	171a6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0xc>
   171a6:	9803      	ldr	r0, [sp, #12]
   171a8:	f000 fac4 	bl	17734 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   171ac:	9002      	str	r0, [sp, #8]
   171ae:	e7ff      	b.n	171b0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x16>
   171b0:	f000 f80b 	bl	171ca <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>
   171b4:	9001      	str	r0, [sp, #4]
   171b6:	e7ff      	b.n	171b8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x1e>
   171b8:	9801      	ldr	r0, [sp, #4]
   171ba:	0041      	lsls	r1, r0, #1
   171bc:	9100      	str	r1, [sp, #0]
   171be:	e7ff      	b.n	171c0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x26>
   171c0:	9802      	ldr	r0, [sp, #8]
   171c2:	9900      	ldr	r1, [sp, #0]
   171c4:	4308      	orrs	r0, r1
    }
   171c6:	b004      	add	sp, #16
   171c8:	bd80      	pop	{r7, pc}

000171ca <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>:
    fn to_usize() -> usize {
   171ca:	b580      	push	{r7, lr}
   171cc:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   171ce:	f000 faab 	bl	17728 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   171d2:	9003      	str	r0, [sp, #12]
   171d4:	e7ff      	b.n	171d6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0xc>
   171d6:	9803      	ldr	r0, [sp, #12]
   171d8:	f000 faac 	bl	17734 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   171dc:	9002      	str	r0, [sp, #8]
   171de:	e7ff      	b.n	171e0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x16>
   171e0:	f000 f89b 	bl	1731a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>
   171e4:	9001      	str	r0, [sp, #4]
   171e6:	e7ff      	b.n	171e8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x1e>
   171e8:	9801      	ldr	r0, [sp, #4]
   171ea:	0041      	lsls	r1, r0, #1
   171ec:	9100      	str	r1, [sp, #0]
   171ee:	e7ff      	b.n	171f0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x26>
   171f0:	9802      	ldr	r0, [sp, #8]
   171f2:	9900      	ldr	r1, [sp, #0]
   171f4:	4308      	orrs	r0, r1
    }
   171f6:	b004      	add	sp, #16
   171f8:	bd80      	pop	{r7, pc}

000171fa <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>:
    fn to_usize() -> usize {
   171fa:	b580      	push	{r7, lr}
   171fc:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   171fe:	f000 fa93 	bl	17728 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17202:	9003      	str	r0, [sp, #12]
   17204:	e7ff      	b.n	17206 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0xc>
   17206:	9803      	ldr	r0, [sp, #12]
   17208:	f000 fa94 	bl	17734 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1720c:	9002      	str	r0, [sp, #8]
   1720e:	e7ff      	b.n	17210 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x16>
   17210:	f7ff ff7b 	bl	1710a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>
   17214:	9001      	str	r0, [sp, #4]
   17216:	e7ff      	b.n	17218 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x1e>
   17218:	9801      	ldr	r0, [sp, #4]
   1721a:	0041      	lsls	r1, r0, #1
   1721c:	9100      	str	r1, [sp, #0]
   1721e:	e7ff      	b.n	17220 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x26>
   17220:	9802      	ldr	r0, [sp, #8]
   17222:	9900      	ldr	r1, [sp, #0]
   17224:	4308      	orrs	r0, r1
    }
   17226:	b004      	add	sp, #16
   17228:	bd80      	pop	{r7, pc}

0001722a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>:
    fn to_usize() -> usize {
   1722a:	b580      	push	{r7, lr}
   1722c:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1722e:	f000 fa7b 	bl	17728 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17232:	9003      	str	r0, [sp, #12]
   17234:	e7ff      	b.n	17236 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0xc>
   17236:	9803      	ldr	r0, [sp, #12]
   17238:	f000 fa7c 	bl	17734 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1723c:	9002      	str	r0, [sp, #8]
   1723e:	e7ff      	b.n	17240 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x16>
   17240:	f000 f823 	bl	1728a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>
   17244:	9001      	str	r0, [sp, #4]
   17246:	e7ff      	b.n	17248 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x1e>
   17248:	9801      	ldr	r0, [sp, #4]
   1724a:	0041      	lsls	r1, r0, #1
   1724c:	9100      	str	r1, [sp, #0]
   1724e:	e7ff      	b.n	17250 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x26>
   17250:	9802      	ldr	r0, [sp, #8]
   17252:	9900      	ldr	r1, [sp, #0]
   17254:	4308      	orrs	r0, r1
    }
   17256:	b004      	add	sp, #16
   17258:	bd80      	pop	{r7, pc}

0001725a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>:
    fn to_usize() -> usize {
   1725a:	b580      	push	{r7, lr}
   1725c:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1725e:	f000 fa63 	bl	17728 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17262:	9003      	str	r0, [sp, #12]
   17264:	e7ff      	b.n	17266 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0xc>
   17266:	9803      	ldr	r0, [sp, #12]
   17268:	f000 fa64 	bl	17734 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1726c:	9002      	str	r0, [sp, #8]
   1726e:	e7ff      	b.n	17270 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x16>
   17270:	f000 f86b 	bl	1734a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>
   17274:	9001      	str	r0, [sp, #4]
   17276:	e7ff      	b.n	17278 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x1e>
   17278:	9801      	ldr	r0, [sp, #4]
   1727a:	0041      	lsls	r1, r0, #1
   1727c:	9100      	str	r1, [sp, #0]
   1727e:	e7ff      	b.n	17280 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x26>
   17280:	9802      	ldr	r0, [sp, #8]
   17282:	9900      	ldr	r1, [sp, #0]
   17284:	4308      	orrs	r0, r1
    }
   17286:	b004      	add	sp, #16
   17288:	bd80      	pop	{r7, pc}

0001728a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>:
    fn to_usize() -> usize {
   1728a:	b580      	push	{r7, lr}
   1728c:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1728e:	f000 fa4b 	bl	17728 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17292:	9003      	str	r0, [sp, #12]
   17294:	e7ff      	b.n	17296 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0xc>
   17296:	9803      	ldr	r0, [sp, #12]
   17298:	f000 fa4c 	bl	17734 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1729c:	9002      	str	r0, [sp, #8]
   1729e:	e7ff      	b.n	172a0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x16>
   172a0:	f000 f823 	bl	172ea <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>
   172a4:	9001      	str	r0, [sp, #4]
   172a6:	e7ff      	b.n	172a8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x1e>
   172a8:	9801      	ldr	r0, [sp, #4]
   172aa:	0041      	lsls	r1, r0, #1
   172ac:	9100      	str	r1, [sp, #0]
   172ae:	e7ff      	b.n	172b0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x26>
   172b0:	9802      	ldr	r0, [sp, #8]
   172b2:	9900      	ldr	r1, [sp, #0]
   172b4:	4308      	orrs	r0, r1
    }
   172b6:	b004      	add	sp, #16
   172b8:	bd80      	pop	{r7, pc}

000172ba <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>:
    fn to_usize() -> usize {
   172ba:	b580      	push	{r7, lr}
   172bc:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   172be:	f000 fa35 	bl	1772c <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>
   172c2:	9003      	str	r0, [sp, #12]
   172c4:	e7ff      	b.n	172c6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0xc>
   172c6:	9803      	ldr	r0, [sp, #12]
   172c8:	f000 fa34 	bl	17734 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   172cc:	9002      	str	r0, [sp, #8]
   172ce:	e7ff      	b.n	172d0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x16>
   172d0:	f000 fa2e 	bl	17730 <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>
   172d4:	9001      	str	r0, [sp, #4]
   172d6:	e7ff      	b.n	172d8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x1e>
   172d8:	9801      	ldr	r0, [sp, #4]
   172da:	0041      	lsls	r1, r0, #1
   172dc:	9100      	str	r1, [sp, #0]
   172de:	e7ff      	b.n	172e0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x26>
   172e0:	9802      	ldr	r0, [sp, #8]
   172e2:	9900      	ldr	r1, [sp, #0]
   172e4:	4308      	orrs	r0, r1
    }
   172e6:	b004      	add	sp, #16
   172e8:	bd80      	pop	{r7, pc}

000172ea <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>:
    fn to_usize() -> usize {
   172ea:	b580      	push	{r7, lr}
   172ec:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   172ee:	f000 fa1b 	bl	17728 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   172f2:	9003      	str	r0, [sp, #12]
   172f4:	e7ff      	b.n	172f6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0xc>
   172f6:	9803      	ldr	r0, [sp, #12]
   172f8:	f000 fa1c 	bl	17734 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   172fc:	9002      	str	r0, [sp, #8]
   172fe:	e7ff      	b.n	17300 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x16>
   17300:	f7ff ff7b 	bl	171fa <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>
   17304:	9001      	str	r0, [sp, #4]
   17306:	e7ff      	b.n	17308 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x1e>
   17308:	9801      	ldr	r0, [sp, #4]
   1730a:	0041      	lsls	r1, r0, #1
   1730c:	9100      	str	r1, [sp, #0]
   1730e:	e7ff      	b.n	17310 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x26>
   17310:	9802      	ldr	r0, [sp, #8]
   17312:	9900      	ldr	r1, [sp, #0]
   17314:	4308      	orrs	r0, r1
    }
   17316:	b004      	add	sp, #16
   17318:	bd80      	pop	{r7, pc}

0001731a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>:
    fn to_usize() -> usize {
   1731a:	b580      	push	{r7, lr}
   1731c:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1731e:	f000 fa03 	bl	17728 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17322:	9003      	str	r0, [sp, #12]
   17324:	e7ff      	b.n	17326 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0xc>
   17326:	9803      	ldr	r0, [sp, #12]
   17328:	f000 fa04 	bl	17734 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1732c:	9002      	str	r0, [sp, #8]
   1732e:	e7ff      	b.n	17330 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x16>
   17330:	f7ff ff03 	bl	1713a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>
   17334:	9001      	str	r0, [sp, #4]
   17336:	e7ff      	b.n	17338 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x1e>
   17338:	9801      	ldr	r0, [sp, #4]
   1733a:	0041      	lsls	r1, r0, #1
   1733c:	9100      	str	r1, [sp, #0]
   1733e:	e7ff      	b.n	17340 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x26>
   17340:	9802      	ldr	r0, [sp, #8]
   17342:	9900      	ldr	r1, [sp, #0]
   17344:	4308      	orrs	r0, r1
    }
   17346:	b004      	add	sp, #16
   17348:	bd80      	pop	{r7, pc}

0001734a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>:
    fn to_usize() -> usize {
   1734a:	b580      	push	{r7, lr}
   1734c:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1734e:	f000 f9eb 	bl	17728 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17352:	9003      	str	r0, [sp, #12]
   17354:	e7ff      	b.n	17356 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0xc>
   17356:	9803      	ldr	r0, [sp, #12]
   17358:	f000 f9ec 	bl	17734 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1735c:	9002      	str	r0, [sp, #8]
   1735e:	e7ff      	b.n	17360 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x16>
   17360:	f7ff ff1b 	bl	1719a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>
   17364:	9001      	str	r0, [sp, #4]
   17366:	e7ff      	b.n	17368 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x1e>
   17368:	9801      	ldr	r0, [sp, #4]
   1736a:	0041      	lsls	r1, r0, #1
   1736c:	9100      	str	r1, [sp, #0]
   1736e:	e7ff      	b.n	17370 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x26>
   17370:	9802      	ldr	r0, [sp, #8]
   17372:	9900      	ldr	r1, [sp, #0]
   17374:	4308      	orrs	r0, r1
    }
   17376:	b004      	add	sp, #16
   17378:	bd80      	pop	{r7, pc}

0001737a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE>:
    fn to_usize() -> usize {
   1737a:	b580      	push	{r7, lr}
   1737c:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1737e:	f000 f9d3 	bl	17728 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17382:	9003      	str	r0, [sp, #12]
   17384:	e7ff      	b.n	17386 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0xc>
   17386:	9803      	ldr	r0, [sp, #12]
   17388:	f000 f9d4 	bl	17734 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1738c:	9002      	str	r0, [sp, #8]
   1738e:	e7ff      	b.n	17390 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x16>
   17390:	f7ff ff63 	bl	1725a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>
   17394:	9001      	str	r0, [sp, #4]
   17396:	e7ff      	b.n	17398 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x1e>
   17398:	9801      	ldr	r0, [sp, #4]
   1739a:	0041      	lsls	r1, r0, #1
   1739c:	9100      	str	r1, [sp, #0]
   1739e:	e7ff      	b.n	173a0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x26>
   173a0:	9802      	ldr	r0, [sp, #8]
   173a2:	9900      	ldr	r1, [sp, #0]
   173a4:	4308      	orrs	r0, r1
    }
   173a6:	b004      	add	sp, #16
   173a8:	bd80      	pop	{r7, pc}

000173aa <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>:
impl Bit for B0 {
    const U8: u8 = 0;
    const BOOL: bool = false;

    #[inline]
    fn to_u8() -> u8 {
   173aa:	2000      	movs	r0, #0
        0
    }
   173ac:	4770      	bx	lr

000173ae <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>:
impl Bit for B1 {
    const U8: u8 = 1;
    const BOOL: bool = true;

    #[inline]
    fn to_u8() -> u8 {
   173ae:	2001      	movs	r0, #1
        1
    }
   173b0:	4770      	bx	lr

000173b2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>:
   173b2:	b580      	push	{r7, lr}
   173b4:	b084      	sub	sp, #16
   173b6:	9002      	str	r0, [sp, #8]
   173b8:	9103      	str	r1, [sp, #12]
   173ba:	f000 f80f 	bl	173dc <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE>
   173be:	9001      	str	r0, [sp, #4]
   173c0:	e7ff      	b.n	173c2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E+0x10>
   173c2:	9801      	ldr	r0, [sp, #4]
   173c4:	b004      	add	sp, #16
   173c6:	bd80      	pop	{r7, pc}

000173c8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E>:
   173c8:	b580      	push	{r7, lr}
   173ca:	b082      	sub	sp, #8
   173cc:	9001      	str	r0, [sp, #4]
   173ce:	f000 f873 	bl	174b8 <_ZN4core3ptr4read17h27a035d1812d8297E>
   173d2:	9000      	str	r0, [sp, #0]
   173d4:	e7ff      	b.n	173d6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E+0xe>
   173d6:	9800      	ldr	r0, [sp, #0]
   173d8:	b002      	add	sp, #8
   173da:	bd80      	pop	{r7, pc}

000173dc <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE>:
   173dc:	b084      	sub	sp, #16
   173de:	9001      	str	r0, [sp, #4]
   173e0:	9102      	str	r1, [sp, #8]
   173e2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   173e6:	9003      	str	r0, [sp, #12]
   173e8:	9803      	ldr	r0, [sp, #12]
   173ea:	9000      	str	r0, [sp, #0]
   173ec:	e7ff      	b.n	173ee <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE+0x12>
   173ee:	9800      	ldr	r0, [sp, #0]
   173f0:	b004      	add	sp, #16
   173f2:	4770      	bx	lr

000173f4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>:
   173f4:	b082      	sub	sp, #8
   173f6:	9001      	str	r0, [sp, #4]
   173f8:	9000      	str	r0, [sp, #0]
   173fa:	e7ff      	b.n	173fc <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E+0x8>
   173fc:	9800      	ldr	r0, [sp, #0]
   173fe:	fab0 f180 	clz	r1, r0
   17402:	0948      	lsrs	r0, r1, #5
   17404:	b002      	add	sp, #8
   17406:	4770      	bx	lr

00017408 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE>:
   17408:	b580      	push	{r7, lr}
   1740a:	b088      	sub	sp, #32
   1740c:	9006      	str	r0, [sp, #24]
   1740e:	9107      	str	r1, [sp, #28]
   17410:	9004      	str	r0, [sp, #16]
   17412:	4608      	mov	r0, r1
   17414:	9103      	str	r1, [sp, #12]
   17416:	f001 f948 	bl	186aa <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   1741a:	9002      	str	r0, [sp, #8]
   1741c:	e7ff      	b.n	1741e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x16>
   1741e:	9802      	ldr	r0, [sp, #8]
   17420:	07c1      	lsls	r1, r0, #31
   17422:	2900      	cmp	r1, #0
   17424:	d105      	bne.n	17432 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x2a>
   17426:	e7ff      	b.n	17428 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x20>
   17428:	9803      	ldr	r0, [sp, #12]
   1742a:	f001 f942 	bl	186b2 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   1742e:	9001      	str	r0, [sp, #4]
   17430:	e007      	b.n	17442 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x3a>
   17432:	9804      	ldr	r0, [sp, #16]
   17434:	9903      	ldr	r1, [sp, #12]
   17436:	f001 fea4 	bl	19182 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E>
   1743a:	f88d 0017 	strb.w	r0, [sp, #23]
   1743e:	e7ff      	b.n	17440 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x38>
   17440:	e015      	b.n	1746e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x66>
   17442:	9801      	ldr	r0, [sp, #4]
   17444:	07c1      	lsls	r1, r0, #31
   17446:	2900      	cmp	r1, #0
   17448:	d107      	bne.n	1745a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x52>
   1744a:	e7ff      	b.n	1744c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x44>
   1744c:	9804      	ldr	r0, [sp, #16]
   1744e:	9903      	ldr	r1, [sp, #12]
   17450:	f002 f868 	bl	19524 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E>
   17454:	f88d 0017 	strb.w	r0, [sp, #23]
   17458:	e007      	b.n	1746a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x62>
   1745a:	9804      	ldr	r0, [sp, #16]
   1745c:	9903      	ldr	r1, [sp, #12]
   1745e:	f001 feef 	bl	19240 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE>
   17462:	f88d 0017 	strb.w	r0, [sp, #23]
   17466:	e7ff      	b.n	17468 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x60>
   17468:	e000      	b.n	1746c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x64>
   1746a:	e7ff      	b.n	1746c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x64>
   1746c:	e7ff      	b.n	1746e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x66>
   1746e:	f89d 0017 	ldrb.w	r0, [sp, #23]
   17472:	b008      	add	sp, #32
   17474:	bd80      	pop	{r7, pc}

00017476 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>:
   17476:	b081      	sub	sp, #4
   17478:	4601      	mov	r1, r0
   1747a:	f88d 0003 	strb.w	r0, [sp, #3]
   1747e:	b2c0      	uxtb	r0, r0
   17480:	b001      	add	sp, #4
   17482:	4770      	bx	lr

00017484 <_ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E>:
   17484:	b086      	sub	sp, #24
   17486:	9004      	str	r0, [sp, #16]
   17488:	9105      	str	r1, [sp, #20]
   1748a:	9002      	str	r0, [sp, #8]
   1748c:	9103      	str	r1, [sp, #12]
   1748e:	9802      	ldr	r0, [sp, #8]
   17490:	9903      	ldr	r1, [sp, #12]
   17492:	9000      	str	r0, [sp, #0]
   17494:	9101      	str	r1, [sp, #4]
   17496:	9800      	ldr	r0, [sp, #0]
   17498:	9901      	ldr	r1, [sp, #4]
   1749a:	b006      	add	sp, #24
   1749c:	4770      	bx	lr

0001749e <_ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE>:
   1749e:	b086      	sub	sp, #24
   174a0:	9004      	str	r0, [sp, #16]
   174a2:	9105      	str	r1, [sp, #20]
   174a4:	9002      	str	r0, [sp, #8]
   174a6:	9103      	str	r1, [sp, #12]
   174a8:	9802      	ldr	r0, [sp, #8]
   174aa:	9903      	ldr	r1, [sp, #12]
   174ac:	9000      	str	r0, [sp, #0]
   174ae:	9101      	str	r1, [sp, #4]
   174b0:	9800      	ldr	r0, [sp, #0]
   174b2:	9901      	ldr	r1, [sp, #4]
   174b4:	b006      	add	sp, #24
   174b6:	4770      	bx	lr

000174b8 <_ZN4core3ptr4read17h27a035d1812d8297E>:
   174b8:	b580      	push	{r7, lr}
   174ba:	b088      	sub	sp, #32
   174bc:	9003      	str	r0, [sp, #12]
   174be:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   174c2:	f8ad 100a 	strh.w	r1, [sp, #10]
   174c6:	9001      	str	r0, [sp, #4]
   174c8:	e7ff      	b.n	174ca <_ZN4core3ptr4read17h27a035d1812d8297E+0x12>
   174ca:	f10d 000a 	add.w	r0, sp, #10
   174ce:	9006      	str	r0, [sp, #24]
   174d0:	9007      	str	r0, [sp, #28]
   174d2:	e7ff      	b.n	174d4 <_ZN4core3ptr4read17h27a035d1812d8297E+0x1c>
   174d4:	f10d 010a 	add.w	r1, sp, #10
   174d8:	2201      	movs	r2, #1
   174da:	9801      	ldr	r0, [sp, #4]
   174dc:	f000 f931 	bl	17742 <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E>
   174e0:	e7ff      	b.n	174e2 <_ZN4core3ptr4read17h27a035d1812d8297E+0x2a>
   174e2:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   174e6:	4601      	mov	r1, r0
   174e8:	f8ad 0014 	strh.w	r0, [sp, #20]
   174ec:	f8ad 0016 	strh.w	r0, [sp, #22]
   174f0:	9100      	str	r1, [sp, #0]
   174f2:	e7ff      	b.n	174f4 <_ZN4core3ptr4read17h27a035d1812d8297E+0x3c>
   174f4:	9800      	ldr	r0, [sp, #0]
   174f6:	b008      	add	sp, #32
   174f8:	bd80      	pop	{r7, pc}

000174fa <_ZN4core3ptr5write17h147d4643d861e927E>:
   174fa:	b082      	sub	sp, #8
   174fc:	460a      	mov	r2, r1
   174fe:	9000      	str	r0, [sp, #0]
   17500:	f8ad 1006 	strh.w	r1, [sp, #6]
   17504:	8001      	strh	r1, [r0, #0]
   17506:	b002      	add	sp, #8
   17508:	4770      	bx	lr

0001750a <_ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE>:
   1750a:	b580      	push	{r7, lr}
   1750c:	b08c      	sub	sp, #48	; 0x30
   1750e:	9005      	str	r0, [sp, #20]
   17510:	9106      	str	r1, [sp, #24]
   17512:	9207      	str	r2, [sp, #28]
   17514:	9008      	str	r0, [sp, #32]
   17516:	9109      	str	r1, [sp, #36]	; 0x24
   17518:	2301      	movs	r3, #1
   1751a:	930b      	str	r3, [sp, #44]	; 0x2c
   1751c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1751e:	9204      	str	r2, [sp, #16]
   17520:	9103      	str	r1, [sp, #12]
   17522:	9002      	str	r0, [sp, #8]
   17524:	9301      	str	r3, [sp, #4]
   17526:	e7ff      	b.n	17528 <_ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE+0x1e>
   17528:	9801      	ldr	r0, [sp, #4]
   1752a:	9904      	ldr	r1, [sp, #16]
   1752c:	fb00 f201 	mul.w	r2, r0, r1
   17530:	920a      	str	r2, [sp, #40]	; 0x28
   17532:	9802      	ldr	r0, [sp, #8]
   17534:	9903      	ldr	r1, [sp, #12]
   17536:	f000 f850 	bl	175da <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE>
   1753a:	e7ff      	b.n	1753c <_ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE+0x32>
   1753c:	b00c      	add	sp, #48	; 0x30
   1753e:	bd80      	pop	{r7, pc}

00017540 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE>:
   17540:	b580      	push	{r7, lr}
   17542:	b088      	sub	sp, #32
   17544:	9004      	str	r0, [sp, #16]
   17546:	9105      	str	r1, [sp, #20]
   17548:	2201      	movs	r2, #1
   1754a:	9207      	str	r2, [sp, #28]
   1754c:	9a07      	ldr	r2, [sp, #28]
   1754e:	9103      	str	r1, [sp, #12]
   17550:	9002      	str	r0, [sp, #8]
   17552:	9201      	str	r2, [sp, #4]
   17554:	e7ff      	b.n	17556 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x16>
   17556:	9801      	ldr	r0, [sp, #4]
   17558:	2820      	cmp	r0, #32
   1755a:	d306      	bcc.n	1756a <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x2a>
   1755c:	e7ff      	b.n	1755e <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x1e>
   1755e:	2201      	movs	r2, #1
   17560:	9802      	ldr	r0, [sp, #8]
   17562:	9903      	ldr	r1, [sp, #12]
   17564:	f7ff ffd1 	bl	1750a <_ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE>
   17568:	e013      	b.n	17592 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x52>
   1756a:	9802      	ldr	r0, [sp, #8]
   1756c:	f000 f814 	bl	17598 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE>
   17570:	4601      	mov	r1, r0
   17572:	f88d 001b 	strb.w	r0, [sp, #27]
   17576:	9100      	str	r1, [sp, #0]
   17578:	e7ff      	b.n	1757a <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x3a>
   1757a:	2201      	movs	r2, #1
   1757c:	9803      	ldr	r0, [sp, #12]
   1757e:	9902      	ldr	r1, [sp, #8]
   17580:	f7fa fabf 	bl	11b02 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   17584:	e7ff      	b.n	17586 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x46>
   17586:	9803      	ldr	r0, [sp, #12]
   17588:	9900      	ldr	r1, [sp, #0]
   1758a:	f7f1 fd89 	bl	90a0 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   1758e:	e7ff      	b.n	17590 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x50>
   17590:	e000      	b.n	17594 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x54>
   17592:	e7ff      	b.n	17594 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x54>
   17594:	b008      	add	sp, #32
   17596:	bd80      	pop	{r7, pc}

00017598 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE>:
   17598:	b580      	push	{r7, lr}
   1759a:	b088      	sub	sp, #32
   1759c:	9004      	str	r0, [sp, #16]
   1759e:	f89d 1015 	ldrb.w	r1, [sp, #21]
   175a2:	f88d 100f 	strb.w	r1, [sp, #15]
   175a6:	9002      	str	r0, [sp, #8]
   175a8:	e7ff      	b.n	175aa <_ZN4core3ptr4read17h38cf3848f1a0f2ccE+0x12>
   175aa:	f10d 000f 	add.w	r0, sp, #15
   175ae:	9006      	str	r0, [sp, #24]
   175b0:	9007      	str	r0, [sp, #28]
   175b2:	e7ff      	b.n	175b4 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE+0x1c>
   175b4:	f10d 010f 	add.w	r1, sp, #15
   175b8:	2201      	movs	r2, #1
   175ba:	9802      	ldr	r0, [sp, #8]
   175bc:	f7fa faa1 	bl	11b02 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   175c0:	e7ff      	b.n	175c2 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE+0x2a>
   175c2:	f89d 000f 	ldrb.w	r0, [sp, #15]
   175c6:	4601      	mov	r1, r0
   175c8:	f88d 0016 	strb.w	r0, [sp, #22]
   175cc:	f88d 0017 	strb.w	r0, [sp, #23]
   175d0:	9101      	str	r1, [sp, #4]
   175d2:	e7ff      	b.n	175d4 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE+0x3c>
   175d4:	9801      	ldr	r0, [sp, #4]
   175d6:	b008      	add	sp, #32
   175d8:	bd80      	pop	{r7, pc}

000175da <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE>:
   175da:	b5d0      	push	{r4, r6, r7, lr}
   175dc:	af02      	add	r7, sp, #8
   175de:	b0b4      	sub	sp, #208	; 0xd0
   175e0:	466c      	mov	r4, sp
   175e2:	f36f 0404 	bfc	r4, #0, #5
   175e6:	46a5      	mov	sp, r4
   175e8:	9024      	str	r0, [sp, #144]	; 0x90
   175ea:	9125      	str	r1, [sp, #148]	; 0x94
   175ec:	9226      	str	r2, [sp, #152]	; 0x98
   175ee:	2320      	movs	r3, #32
   175f0:	932f      	str	r3, [sp, #188]	; 0xbc
   175f2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   175f4:	9327      	str	r3, [sp, #156]	; 0x9c
   175f6:	920e      	str	r2, [sp, #56]	; 0x38
   175f8:	910d      	str	r1, [sp, #52]	; 0x34
   175fa:	900c      	str	r0, [sp, #48]	; 0x30
   175fc:	930b      	str	r3, [sp, #44]	; 0x2c
   175fe:	e7ff      	b.n	17600 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x26>
   17600:	2000      	movs	r0, #0
   17602:	900f      	str	r0, [sp, #60]	; 0x3c
   17604:	e7ff      	b.n	17606 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x2c>
   17606:	980f      	ldr	r0, [sp, #60]	; 0x3c
   17608:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1760a:	4408      	add	r0, r1
   1760c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1760e:	4290      	cmp	r0, r2
   17610:	d905      	bls.n	1761e <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x44>
   17612:	e7ff      	b.n	17614 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x3a>
   17614:	980f      	ldr	r0, [sp, #60]	; 0x3c
   17616:	990e      	ldr	r1, [sp, #56]	; 0x38
   17618:	4288      	cmp	r0, r1
   1761a:	d334      	bcc.n	17686 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xac>
   1761c:	e067      	b.n	176ee <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x114>
   1761e:	e7ff      	b.n	17620 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x46>
   17620:	a810      	add	r0, sp, #64	; 0x40
   17622:	9032      	str	r0, [sp, #200]	; 0xc8
   17624:	9033      	str	r0, [sp, #204]	; 0xcc
   17626:	e7ff      	b.n	17628 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x4e>
   17628:	a810      	add	r0, sp, #64	; 0x40
   1762a:	4601      	mov	r1, r0
   1762c:	9028      	str	r0, [sp, #160]	; 0xa0
   1762e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   17630:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   17632:	900a      	str	r0, [sp, #40]	; 0x28
   17634:	4610      	mov	r0, r2
   17636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17638:	9109      	str	r1, [sp, #36]	; 0x24
   1763a:	4619      	mov	r1, r3
   1763c:	f7fa fbc5 	bl	11dca <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   17640:	4601      	mov	r1, r0
   17642:	9029      	str	r0, [sp, #164]	; 0xa4
   17644:	9108      	str	r1, [sp, #32]
   17646:	e7ff      	b.n	17648 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x6e>
   17648:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1764a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1764c:	f7fa fbbd 	bl	11dca <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   17650:	4601      	mov	r1, r0
   17652:	902a      	str	r0, [sp, #168]	; 0xa8
   17654:	9107      	str	r1, [sp, #28]
   17656:	e7ff      	b.n	17658 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x7e>
   17658:	9808      	ldr	r0, [sp, #32]
   1765a:	9909      	ldr	r1, [sp, #36]	; 0x24
   1765c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1765e:	f7fa fa50 	bl	11b02 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   17662:	e7ff      	b.n	17664 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x8a>
   17664:	9807      	ldr	r0, [sp, #28]
   17666:	9908      	ldr	r1, [sp, #32]
   17668:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1766a:	f7fa fa4a 	bl	11b02 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1766e:	e7ff      	b.n	17670 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x96>
   17670:	9809      	ldr	r0, [sp, #36]	; 0x24
   17672:	9907      	ldr	r1, [sp, #28]
   17674:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   17676:	f7fa fa44 	bl	11b02 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1767a:	e7ff      	b.n	1767c <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xa2>
   1767c:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1767e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   17680:	4408      	add	r0, r1
   17682:	900f      	str	r0, [sp, #60]	; 0x3c
   17684:	e7bf      	b.n	17606 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x2c>
   17686:	e7ff      	b.n	17688 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xae>
   17688:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1768a:	990e      	ldr	r1, [sp, #56]	; 0x38
   1768c:	1a08      	subs	r0, r1, r0
   1768e:	4602      	mov	r2, r0
   17690:	902b      	str	r0, [sp, #172]	; 0xac
   17692:	a81c      	add	r0, sp, #112	; 0x70
   17694:	9030      	str	r0, [sp, #192]	; 0xc0
   17696:	9031      	str	r0, [sp, #196]	; 0xc4
   17698:	9206      	str	r2, [sp, #24]
   1769a:	9005      	str	r0, [sp, #20]
   1769c:	e7ff      	b.n	1769e <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xc4>
   1769e:	9805      	ldr	r0, [sp, #20]
   176a0:	9905      	ldr	r1, [sp, #20]
   176a2:	912c      	str	r1, [sp, #176]	; 0xb0
   176a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
   176a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   176a8:	9004      	str	r0, [sp, #16]
   176aa:	4610      	mov	r0, r2
   176ac:	f7fa fb8d 	bl	11dca <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   176b0:	4601      	mov	r1, r0
   176b2:	902d      	str	r0, [sp, #180]	; 0xb4
   176b4:	9103      	str	r1, [sp, #12]
   176b6:	e7ff      	b.n	176b8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xde>
   176b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   176ba:	980d      	ldr	r0, [sp, #52]	; 0x34
   176bc:	f7fa fb85 	bl	11dca <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   176c0:	4601      	mov	r1, r0
   176c2:	902e      	str	r0, [sp, #184]	; 0xb8
   176c4:	9102      	str	r1, [sp, #8]
   176c6:	e7ff      	b.n	176c8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xee>
   176c8:	9803      	ldr	r0, [sp, #12]
   176ca:	9904      	ldr	r1, [sp, #16]
   176cc:	9a06      	ldr	r2, [sp, #24]
   176ce:	f7fa fa18 	bl	11b02 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   176d2:	e7ff      	b.n	176d4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xfa>
   176d4:	9802      	ldr	r0, [sp, #8]
   176d6:	9903      	ldr	r1, [sp, #12]
   176d8:	9a06      	ldr	r2, [sp, #24]
   176da:	f7fa fa12 	bl	11b02 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   176de:	e7ff      	b.n	176e0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x106>
   176e0:	9804      	ldr	r0, [sp, #16]
   176e2:	9902      	ldr	r1, [sp, #8]
   176e4:	9a06      	ldr	r2, [sp, #24]
   176e6:	f7fa fa0c 	bl	11b02 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   176ea:	e7ff      	b.n	176ec <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x112>
   176ec:	e7ff      	b.n	176ee <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x114>
   176ee:	f1a7 0408 	sub.w	r4, r7, #8
   176f2:	46a5      	mov	sp, r4
   176f4:	bdd0      	pop	{r4, r6, r7, pc}

000176f6 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE>:
   176f6:	b083      	sub	sp, #12
   176f8:	9002      	str	r0, [sp, #8]
   176fa:	9000      	str	r0, [sp, #0]
   176fc:	e7ff      	b.n	176fe <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x8>
   176fe:	9800      	ldr	r0, [sp, #0]
   17700:	28ff      	cmp	r0, #255	; 0xff
   17702:	d807      	bhi.n	17714 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x1e>
   17704:	e7ff      	b.n	17706 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x10>
   17706:	9800      	ldr	r0, [sp, #0]
   17708:	f88d 0005 	strb.w	r0, [sp, #5]
   1770c:	2100      	movs	r1, #0
   1770e:	f88d 1004 	strb.w	r1, [sp, #4]
   17712:	e003      	b.n	1771c <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x26>
   17714:	2001      	movs	r0, #1
   17716:	f88d 0004 	strb.w	r0, [sp, #4]
   1771a:	e7ff      	b.n	1771c <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x26>
   1771c:	f89d 0004 	ldrb.w	r0, [sp, #4]
   17720:	f89d 1005 	ldrb.w	r1, [sp, #5]
   17724:	b003      	add	sp, #12
   17726:	4770      	bx	lr

00017728 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>:
    fn to_u8() -> u8 {
   17728:	2000      	movs	r0, #0
    }
   1772a:	4770      	bx	lr

0001772c <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>:
    fn to_u8() -> u8 {
   1772c:	2001      	movs	r0, #1
    }
   1772e:	4770      	bx	lr

00017730 <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>:
    fn to_usize() -> usize {
   17730:	2000      	movs	r0, #0
    }
   17732:	4770      	bx	lr

00017734 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>:
   17734:	b081      	sub	sp, #4
   17736:	4601      	mov	r1, r0
   17738:	f88d 0003 	strb.w	r0, [sp, #3]
   1773c:	b2c0      	uxtb	r0, r0
   1773e:	b001      	add	sp, #4
   17740:	4770      	bx	lr

00017742 <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E>:
   17742:	b580      	push	{r7, lr}
   17744:	b084      	sub	sp, #16
   17746:	9001      	str	r0, [sp, #4]
   17748:	9102      	str	r1, [sp, #8]
   1774a:	9203      	str	r2, [sp, #12]
   1774c:	0052      	lsls	r2, r2, #1
   1774e:	9000      	str	r0, [sp, #0]
   17750:	4608      	mov	r0, r1
   17752:	9900      	ldr	r1, [sp, #0]
   17754:	f006 fcdc 	bl	1e110 <__aeabi_memcpy>
   17758:	e7ff      	b.n	1775a <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E+0x18>
   1775a:	b004      	add	sp, #16
   1775c:	bd80      	pop	{r7, pc}

0001775e <_ZN4core3ptr13drop_in_place17h000c7c147ade2111E>:
   1775e:	4770      	bx	lr

00017760 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE>:
   17760:	b5b0      	push	{r4, r5, r7, lr}
   17762:	b086      	sub	sp, #24
   17764:	460c      	mov	r4, r1
   17766:	4605      	mov	r5, r0
   17768:	f001 fb87 	bl	18e7a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>
   1776c:	b9a8      	cbnz	r0, 1779a <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x3a>
   1776e:	f241 3304 	movw	r3, #4868	; 0x1304
   17772:	2200      	movs	r2, #0
   17774:	f2c0 0302 	movt	r3, #2
   17778:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   1777c:	9205      	str	r2, [sp, #20]
   1777e:	9304      	str	r3, [sp, #16]
   17780:	e9cd 2202 	strd	r2, r2, [sp, #8]
   17784:	2201      	movs	r2, #1
   17786:	9201      	str	r2, [sp, #4]
   17788:	f241 32c8 	movw	r2, #5064	; 0x13c8
   1778c:	f2c0 0202 	movt	r2, #2
   17790:	9200      	str	r2, [sp, #0]
   17792:	466a      	mov	r2, sp
   17794:	f000 fbe0 	bl	17f58 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   17798:	b110      	cbz	r0, 177a0 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x40>
   1779a:	2001      	movs	r0, #1
   1779c:	b006      	add	sp, #24
   1779e:	bdb0      	pop	{r4, r5, r7, pc}
   177a0:	1d28      	adds	r0, r5, #4
   177a2:	4621      	mov	r1, r4
   177a4:	b006      	add	sp, #24
   177a6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
   177aa:	f001 bb66 	b.w	18e7a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>

000177ae <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE>:
   177ae:	f642 20e1 	movw	r0, #10977	; 0x2ae1
   177b2:	f243 6134 	movw	r1, #13876	; 0x3634
   177b6:	f6c9 405d 	movt	r0, #40029	; 0x9c5d
   177ba:	f6cd 0131 	movt	r1, #55345	; 0xd831
   177be:	4770      	bx	lr

000177c0 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>:
   177c0:	b570      	push	{r4, r5, r6, lr}
   177c2:	460e      	mov	r6, r1
   177c4:	3909      	subs	r1, #9
   177c6:	4604      	mov	r4, r0
   177c8:	291e      	cmp	r1, #30
   177ca:	d818      	bhi.n	177fe <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x3e>
   177cc:	2002      	movs	r0, #2
   177ce:	2574      	movs	r5, #116	; 0x74
   177d0:	e8df f001 	tbb	[pc, r1]
   177d4:	1c1c1019 	.word	0x1c1c1019
   177d8:	1c1c1c29 	.word	0x1c1c1c29
   177dc:	1c1c1c1c 	.word	0x1c1c1c1c
   177e0:	1c1c1c1c 	.word	0x1c1c1c1c
   177e4:	1c1c1c1c 	.word	0x1c1c1c1c
   177e8:	1c1c1c1c 	.word	0x1c1c1c1c
   177ec:	1c1c171c 	.word	0x1c1c171c
   177f0:	00171c1c 	.word	0x00171c1c
   177f4:	2002      	movs	r0, #2
   177f6:	256e      	movs	r5, #110	; 0x6e
   177f8:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   177fc:	bd70      	pop	{r4, r5, r6, pc}
   177fe:	2e5c      	cmp	r6, #92	; 0x5c
   17800:	d104      	bne.n	1780c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x4c>
   17802:	2002      	movs	r0, #2
   17804:	4635      	mov	r5, r6
   17806:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   1780a:	bd70      	pop	{r4, r5, r6, pc}
   1780c:	2a00      	cmp	r2, #0
   1780e:	d040      	beq.n	17892 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   17810:	f3c6 1083 	ubfx	r0, r6, #6, #4
   17814:	0ab1      	lsrs	r1, r6, #10
   17816:	f5b6 3ff6 	cmp.w	r6, #125952	; 0x1ec00
   1781a:	d309      	bcc.n	17830 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x70>
   1781c:	f5b1 7f60 	cmp.w	r1, #896	; 0x380
   17820:	d137      	bne.n	17892 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   17822:	211e      	movs	r1, #30
   17824:	e00b      	b.n	1783e <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x7e>
   17826:	2002      	movs	r0, #2
   17828:	2572      	movs	r5, #114	; 0x72
   1782a:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   1782e:	bd70      	pop	{r4, r5, r6, pc}
   17830:	f641 623c 	movw	r2, #7740	; 0x1e3c
   17834:	f2c0 0202 	movt	r2, #2
   17838:	5c51      	ldrb	r1, [r2, r1]
   1783a:	291e      	cmp	r1, #30
   1783c:	d842      	bhi.n	178c4 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x104>
   1783e:	f641 62b7 	movw	r2, #7863	; 0x1eb7
   17842:	f2c0 0202 	movt	r2, #2
   17846:	eb02 1101 	add.w	r1, r2, r1, lsl #4
   1784a:	5c09      	ldrb	r1, [r1, r0]
   1784c:	298b      	cmp	r1, #139	; 0x8b
   1784e:	d231      	bcs.n	178b4 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xf4>
   17850:	f242 00a8 	movw	r0, #8360	; 0x20a8
   17854:	2301      	movs	r3, #1
   17856:	f2c0 0002 	movt	r0, #2
   1785a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   1785e:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
   17862:	f006 013f 	and.w	r1, r6, #63	; 0x3f
   17866:	f8d2 c004 	ldr.w	ip, [r2, #4]
   1786a:	fa03 f501 	lsl.w	r5, r3, r1
   1786e:	f1b1 0220 	subs.w	r2, r1, #32
   17872:	f1c1 0120 	rsb	r1, r1, #32
   17876:	bf58      	it	pl
   17878:	2500      	movpl	r5, #0
   1787a:	2a00      	cmp	r2, #0
   1787c:	ea00 0005 	and.w	r0, r0, r5
   17880:	fa23 f101 	lsr.w	r1, r3, r1
   17884:	bf58      	it	pl
   17886:	fa03 f102 	lslpl.w	r1, r3, r2
   1788a:	ea01 010c 	and.w	r1, r1, ip
   1788e:	4308      	orrs	r0, r1
   17890:	d105      	bne.n	1789e <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   17892:	4630      	mov	r0, r6
   17894:	f001 f9a5 	bl	18be2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>
   17898:	b108      	cbz	r0, 1789e <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   1789a:	2001      	movs	r0, #1
   1789c:	e7b2      	b.n	17804 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   1789e:	f046 0001 	orr.w	r0, r6, #1
   178a2:	2107      	movs	r1, #7
   178a4:	fab0 f080 	clz	r0, r0
   178a8:	f04f 0e05 	mov.w	lr, #5
   178ac:	ea81 0c90 	eor.w	ip, r1, r0, lsr #2
   178b0:	2003      	movs	r0, #3
   178b2:	e7a7      	b.n	17804 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   178b4:	f641 602c 	movw	r0, #7724	; 0x1e2c
   178b8:	228b      	movs	r2, #139	; 0x8b
   178ba:	f2c0 0002 	movt	r0, #2
   178be:	f000 f869 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   178c2:	defe      	udf	#254	; 0xfe
   178c4:	f641 601c 	movw	r0, #7708	; 0x1e1c
   178c8:	221f      	movs	r2, #31
   178ca:	f2c0 0002 	movt	r0, #2
   178ce:	f000 f861 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   178d2:	defe      	udf	#254	; 0xfe

000178d4 <_ZN4core6option13expect_failed17had6579abaad447b4E>:
   178d4:	b08a      	sub	sp, #40	; 0x28
   178d6:	e9cd 0100 	strd	r0, r1, [sp]
   178da:	2001      	movs	r0, #1
   178dc:	a908      	add	r1, sp, #32
   178de:	9007      	str	r0, [sp, #28]
   178e0:	9106      	str	r1, [sp, #24]
   178e2:	2100      	movs	r1, #0
   178e4:	9105      	str	r1, [sp, #20]
   178e6:	e9cd 0103 	strd	r0, r1, [sp, #12]
   178ea:	f241 40cc 	movw	r0, #5324	; 0x14cc
   178ee:	f2c0 0002 	movt	r0, #2
   178f2:	4611      	mov	r1, r2
   178f4:	9002      	str	r0, [sp, #8]
   178f6:	f249 70d7 	movw	r0, #38871	; 0x97d7
   178fa:	f2c0 0001 	movt	r0, #1
   178fe:	9009      	str	r0, [sp, #36]	; 0x24
   17900:	4668      	mov	r0, sp
   17902:	9008      	str	r0, [sp, #32]
   17904:	a802      	add	r0, sp, #8
   17906:	f000 f865 	bl	179d4 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1790a:	defe      	udf	#254	; 0xfe

0001790c <_ZN4core6option18expect_none_failed17h54d938081af97677E>:
   1790c:	b08e      	sub	sp, #56	; 0x38
   1790e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   17912:	2002      	movs	r0, #2
   17914:	a90a      	add	r1, sp, #40	; 0x28
   17916:	9009      	str	r0, [sp, #36]	; 0x24
   17918:	9108      	str	r1, [sp, #32]
   1791a:	2100      	movs	r1, #0
   1791c:	9107      	str	r1, [sp, #28]
   1791e:	e9cd 0105 	strd	r0, r1, [sp, #20]
   17922:	f241 40d8 	movw	r0, #5336	; 0x14d8
   17926:	f2c0 0002 	movt	r0, #2
   1792a:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   1792e:	9004      	str	r0, [sp, #16]
   17930:	f249 70cd 	movw	r0, #38861	; 0x97cd
   17934:	f2c0 0001 	movt	r0, #1
   17938:	900d      	str	r0, [sp, #52]	; 0x34
   1793a:	a802      	add	r0, sp, #8
   1793c:	900c      	str	r0, [sp, #48]	; 0x30
   1793e:	f249 70d7 	movw	r0, #38871	; 0x97d7
   17942:	f2c0 0001 	movt	r0, #1
   17946:	4661      	mov	r1, ip
   17948:	900b      	str	r0, [sp, #44]	; 0x2c
   1794a:	4668      	mov	r0, sp
   1794c:	900a      	str	r0, [sp, #40]	; 0x28
   1794e:	a804      	add	r0, sp, #16
   17950:	f000 f840 	bl	179d4 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   17954:	defe      	udf	#254	; 0xfe

00017956 <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>:
   17956:	68c0      	ldr	r0, [r0, #12]
   17958:	4770      	bx	lr

0001795a <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>:
   1795a:	4770      	bx	lr

0001795c <_ZN4core5panic8Location4file17h61e77cb122865fdbE>:
   1795c:	e9d0 2100 	ldrd	r2, r1, [r0]
   17960:	4610      	mov	r0, r2
   17962:	4770      	bx	lr

00017964 <_ZN4core5panic8Location4line17h650a566d9637c91dE>:
   17964:	6880      	ldr	r0, [r0, #8]
   17966:	4770      	bx	lr

00017968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>:
   17968:	b088      	sub	sp, #32
   1796a:	4694      	mov	ip, r2
   1796c:	f241 3204 	movw	r2, #4868	; 0x1304
   17970:	2300      	movs	r3, #0
   17972:	f2c0 0202 	movt	r2, #2
   17976:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1797a:	4668      	mov	r0, sp
   1797c:	9305      	str	r3, [sp, #20]
   1797e:	4661      	mov	r1, ip
   17980:	9204      	str	r2, [sp, #16]
   17982:	2201      	movs	r2, #1
   17984:	e9cd 3302 	strd	r3, r3, [sp, #8]
   17988:	9201      	str	r2, [sp, #4]
   1798a:	aa06      	add	r2, sp, #24
   1798c:	9200      	str	r2, [sp, #0]
   1798e:	f000 f821 	bl	179d4 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   17992:	defe      	udf	#254	; 0xfe

00017994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>:
   17994:	b08c      	sub	sp, #48	; 0x30
   17996:	4603      	mov	r3, r0
   17998:	e9cd 1200 	strd	r1, r2, [sp]
   1799c:	2002      	movs	r0, #2
   1799e:	a908      	add	r1, sp, #32
   179a0:	9007      	str	r0, [sp, #28]
   179a2:	9106      	str	r1, [sp, #24]
   179a4:	2100      	movs	r1, #0
   179a6:	9105      	str	r1, [sp, #20]
   179a8:	e9cd 0103 	strd	r0, r1, [sp, #12]
   179ac:	f241 500c 	movw	r0, #5388	; 0x150c
   179b0:	f2c0 0002 	movt	r0, #2
   179b4:	4669      	mov	r1, sp
   179b6:	9002      	str	r0, [sp, #8]
   179b8:	f249 60e9 	movw	r0, #38633	; 0x96e9
   179bc:	f2c0 0001 	movt	r0, #1
   179c0:	900b      	str	r0, [sp, #44]	; 0x2c
   179c2:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   179c6:	a801      	add	r0, sp, #4
   179c8:	9008      	str	r0, [sp, #32]
   179ca:	a802      	add	r0, sp, #8
   179cc:	4619      	mov	r1, r3
   179ce:	f000 f801 	bl	179d4 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   179d2:	defe      	udf	#254	; 0xfe

000179d4 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>:
   179d4:	b084      	sub	sp, #16
   179d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   179da:	f241 40e8 	movw	r0, #5352	; 0x14e8
   179de:	f2c0 0002 	movt	r0, #2
   179e2:	9001      	str	r0, [sp, #4]
   179e4:	f241 3004 	movw	r0, #4868	; 0x1304
   179e8:	f2c0 0002 	movt	r0, #2
   179ec:	9000      	str	r0, [sp, #0]
   179ee:	4668      	mov	r0, sp
   179f0:	f7f0 fe6e 	bl	86d0 <rust_begin_unwind>
   179f4:	defe      	udf	#254	; 0xfe

000179f6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>:
   179f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179fa:	b081      	sub	sp, #4
   179fc:	2a00      	cmp	r2, #0
   179fe:	f000 80fe 	beq.w	17bfe <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   17a02:	4690      	mov	r8, r2
   17a04:	468a      	mov	sl, r1
   17a06:	4681      	mov	r9, r0
   17a08:	f8d9 0008 	ldr.w	r0, [r9, #8]
   17a0c:	7800      	ldrb	r0, [r0, #0]
   17a0e:	b948      	cbnz	r0, 17a24 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x2e>
   17a10:	e014      	b.n	17a3c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   17a12:	44da      	add	sl, fp
   17a14:	2c00      	cmp	r4, #0
   17a16:	46a0      	mov	r8, r4
   17a18:	f000 80f1 	beq.w	17bfe <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   17a1c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   17a20:	7800      	ldrb	r0, [r0, #0]
   17a22:	b158      	cbz	r0, 17a3c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   17a24:	e9d9 0100 	ldrd	r0, r1, [r9]
   17a28:	2204      	movs	r2, #4
   17a2a:	68cb      	ldr	r3, [r1, #12]
   17a2c:	f241 4124 	movw	r1, #5156	; 0x1424
   17a30:	f2c0 0102 	movt	r1, #2
   17a34:	4798      	blx	r3
   17a36:	2800      	cmp	r0, #0
   17a38:	f040 80e5 	bne.w	17c06 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   17a3c:	f04f 0b00 	mov.w	fp, #0
   17a40:	4641      	mov	r1, r8
   17a42:	e008      	b.n	17a56 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x60>
   17a44:	ebb8 010b 	subs.w	r1, r8, fp
   17a48:	f04f 0000 	mov.w	r0, #0
   17a4c:	bf38      	it	cc
   17a4e:	4601      	movcc	r1, r0
   17a50:	45c3      	cmp	fp, r8
   17a52:	f200 80a5 	bhi.w	17ba0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1aa>
   17a56:	eb0a 0e0b 	add.w	lr, sl, fp
   17a5a:	2000      	movs	r0, #0
   17a5c:	f01e 0203 	ands.w	r2, lr, #3
   17a60:	bf18      	it	ne
   17a62:	f1d2 0c04 	rsbsne	ip, r2, #4
   17a66:	d120      	bne.n	17aaa <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xb4>
   17a68:	2908      	cmp	r1, #8
   17a6a:	d357      	bcc.n	17b1c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   17a6c:	f1a1 0208 	sub.w	r2, r1, #8
   17a70:	4290      	cmp	r0, r2
   17a72:	d853      	bhi.n	17b1c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   17a74:	f85e 3000 	ldr.w	r3, [lr, r0]
   17a78:	eb0e 0700 	add.w	r7, lr, r0
   17a7c:	687f      	ldr	r7, [r7, #4]
   17a7e:	f083 360a 	eor.w	r6, r3, #168430090	; 0xa0a0a0a
   17a82:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   17a86:	ea26 0303 	bic.w	r3, r6, r3
   17a8a:	f087 360a 	eor.w	r6, r7, #168430090	; 0xa0a0a0a
   17a8e:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   17a92:	ea26 0707 	bic.w	r7, r6, r7
   17a96:	433b      	orrs	r3, r7
   17a98:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   17a9c:	d102      	bne.n	17aa4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xae>
   17a9e:	3008      	adds	r0, #8
   17aa0:	4290      	cmp	r0, r2
   17aa2:	d9e7      	bls.n	17a74 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x7e>
   17aa4:	4288      	cmp	r0, r1
   17aa6:	d939      	bls.n	17b1c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   17aa8:	e0b1      	b.n	17c0e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x218>
   17aaa:	458c      	cmp	ip, r1
   17aac:	bf88      	it	hi
   17aae:	468c      	movhi	ip, r1
   17ab0:	eb0e 060c 	add.w	r6, lr, ip
   17ab4:	2000      	movs	r0, #0
   17ab6:	4663      	mov	r3, ip
   17ab8:	4677      	mov	r7, lr
   17aba:	b363      	cbz	r3, 17b16 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   17abc:	463a      	mov	r2, r7
   17abe:	f812 4b01 	ldrb.w	r4, [r2], #1
   17ac2:	f1b4 050a 	subs.w	r5, r4, #10
   17ac6:	bf18      	it	ne
   17ac8:	2501      	movne	r5, #1
   17aca:	4428      	add	r0, r5
   17acc:	2c0a      	cmp	r4, #10
   17ace:	d059      	beq.n	17b84 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   17ad0:	42b2      	cmp	r2, r6
   17ad2:	d020      	beq.n	17b16 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   17ad4:	787a      	ldrb	r2, [r7, #1]
   17ad6:	f1b2 040a 	subs.w	r4, r2, #10
   17ada:	bf18      	it	ne
   17adc:	2401      	movne	r4, #1
   17ade:	4420      	add	r0, r4
   17ae0:	2a0a      	cmp	r2, #10
   17ae2:	d04f      	beq.n	17b84 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   17ae4:	1cba      	adds	r2, r7, #2
   17ae6:	42b2      	cmp	r2, r6
   17ae8:	d015      	beq.n	17b16 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   17aea:	78ba      	ldrb	r2, [r7, #2]
   17aec:	f1b2 040a 	subs.w	r4, r2, #10
   17af0:	bf18      	it	ne
   17af2:	2401      	movne	r4, #1
   17af4:	4420      	add	r0, r4
   17af6:	2a0a      	cmp	r2, #10
   17af8:	d044      	beq.n	17b84 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   17afa:	1cfa      	adds	r2, r7, #3
   17afc:	42b2      	cmp	r2, r6
   17afe:	d00a      	beq.n	17b16 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   17b00:	78fa      	ldrb	r2, [r7, #3]
   17b02:	3b04      	subs	r3, #4
   17b04:	3704      	adds	r7, #4
   17b06:	f1b2 040a 	subs.w	r4, r2, #10
   17b0a:	bf18      	it	ne
   17b0c:	2401      	movne	r4, #1
   17b0e:	4420      	add	r0, r4
   17b10:	2a0a      	cmp	r2, #10
   17b12:	d1d2      	bne.n	17aba <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xc4>
   17b14:	e036      	b.n	17b84 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   17b16:	4660      	mov	r0, ip
   17b18:	2908      	cmp	r1, #8
   17b1a:	d2a7      	bcs.n	17a6c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x76>
   17b1c:	eb0e 0700 	add.w	r7, lr, r0
   17b20:	eb0e 0201 	add.w	r2, lr, r1
   17b24:	1a0e      	subs	r6, r1, r0
   17b26:	2100      	movs	r1, #0
   17b28:	b3ce      	cbz	r6, 17b9e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   17b2a:	463b      	mov	r3, r7
   17b2c:	f813 5b01 	ldrb.w	r5, [r3], #1
   17b30:	f1b5 040a 	subs.w	r4, r5, #10
   17b34:	bf18      	it	ne
   17b36:	2401      	movne	r4, #1
   17b38:	4421      	add	r1, r4
   17b3a:	2d0a      	cmp	r5, #10
   17b3c:	d021      	beq.n	17b82 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   17b3e:	4293      	cmp	r3, r2
   17b40:	d02d      	beq.n	17b9e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   17b42:	787b      	ldrb	r3, [r7, #1]
   17b44:	f1b3 050a 	subs.w	r5, r3, #10
   17b48:	bf18      	it	ne
   17b4a:	2501      	movne	r5, #1
   17b4c:	4429      	add	r1, r5
   17b4e:	2b0a      	cmp	r3, #10
   17b50:	d017      	beq.n	17b82 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   17b52:	1cbb      	adds	r3, r7, #2
   17b54:	4293      	cmp	r3, r2
   17b56:	d022      	beq.n	17b9e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   17b58:	78bb      	ldrb	r3, [r7, #2]
   17b5a:	f1b3 050a 	subs.w	r5, r3, #10
   17b5e:	bf18      	it	ne
   17b60:	2501      	movne	r5, #1
   17b62:	4429      	add	r1, r5
   17b64:	2b0a      	cmp	r3, #10
   17b66:	d00c      	beq.n	17b82 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   17b68:	1cfb      	adds	r3, r7, #3
   17b6a:	4293      	cmp	r3, r2
   17b6c:	d017      	beq.n	17b9e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   17b6e:	78fb      	ldrb	r3, [r7, #3]
   17b70:	3e04      	subs	r6, #4
   17b72:	3704      	adds	r7, #4
   17b74:	f1b3 050a 	subs.w	r5, r3, #10
   17b78:	bf18      	it	ne
   17b7a:	2501      	movne	r5, #1
   17b7c:	4429      	add	r1, r5
   17b7e:	2b0a      	cmp	r3, #10
   17b80:	d1d2      	bne.n	17b28 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x132>
   17b82:	4408      	add	r0, r1
   17b84:	4458      	add	r0, fp
   17b86:	f100 0b01 	add.w	fp, r0, #1
   17b8a:	4540      	cmp	r0, r8
   17b8c:	f4bf af5a 	bcs.w	17a44 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   17b90:	f81a 0000 	ldrb.w	r0, [sl, r0]
   17b94:	280a      	cmp	r0, #10
   17b96:	f47f af55 	bne.w	17a44 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   17b9a:	2001      	movs	r0, #1
   17b9c:	e001      	b.n	17ba2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1ac>
   17b9e:	2000      	movs	r0, #0
   17ba0:	46c3      	mov	fp, r8
   17ba2:	f8d9 1008 	ldr.w	r1, [r9, #8]
   17ba6:	eba8 040b 	sub.w	r4, r8, fp
   17baa:	7008      	strb	r0, [r1, #0]
   17bac:	fab4 f084 	clz	r0, r4
   17bb0:	0942      	lsrs	r2, r0, #5
   17bb2:	fabb f08b 	clz	r0, fp
   17bb6:	0943      	lsrs	r3, r0, #5
   17bb8:	e9d9 0100 	ldrd	r0, r1, [r9]
   17bbc:	ea53 0602 	orrs.w	r6, r3, r2
   17bc0:	d106      	bne.n	17bd0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1da>
   17bc2:	45d8      	cmp	r8, fp
   17bc4:	d926      	bls.n	17c14 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   17bc6:	f91a 200b 	ldrsb.w	r2, [sl, fp]
   17bca:	f112 0f41 	cmn.w	r2, #65	; 0x41
   17bce:	dd21      	ble.n	17c14 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   17bd0:	68cb      	ldr	r3, [r1, #12]
   17bd2:	4651      	mov	r1, sl
   17bd4:	465a      	mov	r2, fp
   17bd6:	4798      	blx	r3
   17bd8:	b9a8      	cbnz	r0, 17c06 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   17bda:	2e00      	cmp	r6, #0
   17bdc:	f47f af19 	bne.w	17a12 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   17be0:	45d8      	cmp	r8, fp
   17be2:	d905      	bls.n	17bf0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1fa>
   17be4:	f91a 000b 	ldrsb.w	r0, [sl, fp]
   17be8:	f110 0f41 	cmn.w	r0, #65	; 0x41
   17bec:	f73f af11 	bgt.w	17a12 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   17bf0:	4650      	mov	r0, sl
   17bf2:	4641      	mov	r1, r8
   17bf4:	465a      	mov	r2, fp
   17bf6:	4643      	mov	r3, r8
   17bf8:	f000 fe4d 	bl	18896 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   17bfc:	defe      	udf	#254	; 0xfe
   17bfe:	2000      	movs	r0, #0
   17c00:	b001      	add	sp, #4
   17c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c06:	2001      	movs	r0, #1
   17c08:	b001      	add	sp, #4
   17c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c0e:	f000 fe20 	bl	18852 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   17c12:	defe      	udf	#254	; 0xfe
   17c14:	4650      	mov	r0, sl
   17c16:	4641      	mov	r1, r8
   17c18:	2200      	movs	r2, #0
   17c1a:	465b      	mov	r3, fp
   17c1c:	f000 fe3b 	bl	18896 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   17c20:	defe      	udf	#254	; 0xfe

00017c22 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>:
   17c22:	b5f0      	push	{r4, r5, r6, r7, lr}
   17c24:	b08d      	sub	sp, #52	; 0x34
   17c26:	4604      	mov	r4, r0
   17c28:	7a00      	ldrb	r0, [r0, #8]
   17c2a:	b138      	cbz	r0, 17c3c <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x1a>
   17c2c:	2001      	movs	r0, #1
   17c2e:	6861      	ldr	r1, [r4, #4]
   17c30:	7220      	strb	r0, [r4, #8]
   17c32:	1c48      	adds	r0, r1, #1
   17c34:	6060      	str	r0, [r4, #4]
   17c36:	4620      	mov	r0, r4
   17c38:	b00d      	add	sp, #52	; 0x34
   17c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17c3c:	4616      	mov	r6, r2
   17c3e:	460d      	mov	r5, r1
   17c40:	e9d4 1200 	ldrd	r1, r2, [r4]
   17c44:	7808      	ldrb	r0, [r1, #0]
   17c46:	0740      	lsls	r0, r0, #29
   17c48:	d419      	bmi.n	17c7e <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x5c>
   17c4a:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
   17c4e:	f241 5136 	movw	r1, #5430	; 0x1536
   17c52:	f241 5c3a 	movw	ip, #5434	; 0x153a
   17c56:	f2c0 0102 	movt	r1, #2
   17c5a:	2a00      	cmp	r2, #0
   17c5c:	f2c0 0c02 	movt	ip, #2
   17c60:	bf08      	it	eq
   17c62:	4661      	moveq	r1, ip
   17c64:	68db      	ldr	r3, [r3, #12]
   17c66:	f04f 0202 	mov.w	r2, #2
   17c6a:	bf08      	it	eq
   17c6c:	2201      	moveq	r2, #1
   17c6e:	4798      	blx	r3
   17c70:	2800      	cmp	r0, #0
   17c72:	d1db      	bne.n	17c2c <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   17c74:	68f2      	ldr	r2, [r6, #12]
   17c76:	4628      	mov	r0, r5
   17c78:	6821      	ldr	r1, [r4, #0]
   17c7a:	4790      	blx	r2
   17c7c:	e7d7      	b.n	17c2e <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>
   17c7e:	b95a      	cbnz	r2, 17c98 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x76>
   17c80:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   17c84:	2202      	movs	r2, #2
   17c86:	68cb      	ldr	r3, [r1, #12]
   17c88:	f241 5138 	movw	r1, #5432	; 0x1538
   17c8c:	f2c0 0102 	movt	r1, #2
   17c90:	4798      	blx	r3
   17c92:	2800      	cmp	r0, #0
   17c94:	d1ca      	bne.n	17c2c <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   17c96:	6821      	ldr	r1, [r4, #0]
   17c98:	2001      	movs	r0, #1
   17c9a:	f10d 030f 	add.w	r3, sp, #15
   17c9e:	f88d 000f 	strb.w	r0, [sp, #15]
   17ca2:	e9d1 0206 	ldrd	r0, r2, [r1, #24]
   17ca6:	e88d 000d 	stmia.w	sp, {r0, r2, r3}
   17caa:	e891 5005 	ldmia.w	r1, {r0, r2, ip, lr}
   17cae:	e9d1 3704 	ldrd	r3, r7, [r1, #16]
   17cb2:	f891 1020 	ldrb.w	r1, [r1, #32]
   17cb6:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   17cba:	a904      	add	r1, sp, #16
   17cbc:	e9cd 0204 	strd	r0, r2, [sp, #16]
   17cc0:	f241 501c 	movw	r0, #5404	; 0x151c
   17cc4:	f2c0 0002 	movt	r0, #2
   17cc8:	68f2      	ldr	r2, [r6, #12]
   17cca:	900b      	str	r0, [sp, #44]	; 0x2c
   17ccc:	4668      	mov	r0, sp
   17cce:	900a      	str	r0, [sp, #40]	; 0x28
   17cd0:	4628      	mov	r0, r5
   17cd2:	e9cd 3708 	strd	r3, r7, [sp, #32]
   17cd6:	e9cd ce06 	strd	ip, lr, [sp, #24]
   17cda:	4790      	blx	r2
   17cdc:	2800      	cmp	r0, #0
   17cde:	d1a5      	bne.n	17c2c <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   17ce0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   17ce4:	2202      	movs	r2, #2
   17ce6:	68cb      	ldr	r3, [r1, #12]
   17ce8:	f241 5134 	movw	r1, #5428	; 0x1534
   17cec:	f2c0 0102 	movt	r1, #2
   17cf0:	4798      	blx	r3
   17cf2:	e79c      	b.n	17c2e <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>

00017cf4 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>:
   17cf4:	b5b0      	push	{r4, r5, r7, lr}
   17cf6:	4604      	mov	r4, r0
   17cf8:	7a05      	ldrb	r5, [r0, #8]
   17cfa:	6840      	ldr	r0, [r0, #4]
   17cfc:	b308      	cbz	r0, 17d42 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4e>
   17cfe:	b10d      	cbz	r5, 17d04 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x10>
   17d00:	2501      	movs	r5, #1
   17d02:	e01d      	b.n	17d40 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   17d04:	2801      	cmp	r0, #1
   17d06:	d110      	bne.n	17d2a <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   17d08:	7a60      	ldrb	r0, [r4, #9]
   17d0a:	b170      	cbz	r0, 17d2a <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   17d0c:	6821      	ldr	r1, [r4, #0]
   17d0e:	7808      	ldrb	r0, [r1, #0]
   17d10:	0740      	lsls	r0, r0, #29
   17d12:	d40a      	bmi.n	17d2a <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   17d14:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   17d18:	2201      	movs	r2, #1
   17d1a:	68cb      	ldr	r3, [r1, #12]
   17d1c:	f241 513b 	movw	r1, #5435	; 0x153b
   17d20:	f2c0 0102 	movt	r1, #2
   17d24:	2501      	movs	r5, #1
   17d26:	4798      	blx	r3
   17d28:	b950      	cbnz	r0, 17d40 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   17d2a:	6821      	ldr	r1, [r4, #0]
   17d2c:	2201      	movs	r2, #1
   17d2e:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   17d32:	68cb      	ldr	r3, [r1, #12]
   17d34:	f241 513c 	movw	r1, #5436	; 0x153c
   17d38:	f2c0 0102 	movt	r1, #2
   17d3c:	4798      	blx	r3
   17d3e:	4605      	mov	r5, r0
   17d40:	7225      	strb	r5, [r4, #8]
   17d42:	2d00      	cmp	r5, #0
   17d44:	bf18      	it	ne
   17d46:	2501      	movne	r5, #1
   17d48:	4628      	mov	r0, r5
   17d4a:	bdb0      	pop	{r4, r5, r7, pc}

00017d4c <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>:
   17d4c:	b580      	push	{r7, lr}
   17d4e:	b082      	sub	sp, #8
   17d50:	468c      	mov	ip, r1
   17d52:	2100      	movs	r1, #0
   17d54:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
   17d58:	9101      	str	r1, [sp, #4]
   17d5a:	d207      	bcs.n	17d6c <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x20>
   17d5c:	f88d c004 	strb.w	ip, [sp, #4]
   17d60:	a901      	add	r1, sp, #4
   17d62:	2201      	movs	r2, #1
   17d64:	f7ff fe47 	bl	179f6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   17d68:	b002      	add	sp, #8
   17d6a:	bd80      	pop	{r7, pc}
   17d6c:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
   17d70:	d210      	bcs.n	17d94 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x48>
   17d72:	ea4f 119c 	mov.w	r1, ip, lsr #6
   17d76:	2306      	movs	r3, #6
   17d78:	2202      	movs	r2, #2
   17d7a:	f363 115f 	bfi	r1, r3, #5, #27
   17d7e:	f362 1c9f 	bfi	ip, r2, #6, #26
   17d82:	f88d c005 	strb.w	ip, [sp, #5]
   17d86:	f88d 1004 	strb.w	r1, [sp, #4]
   17d8a:	a901      	add	r1, sp, #4
   17d8c:	f7ff fe33 	bl	179f6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   17d90:	b002      	add	sp, #8
   17d92:	bd80      	pop	{r7, pc}
   17d94:	2202      	movs	r2, #2
   17d96:	4663      	mov	r3, ip
   17d98:	a901      	add	r1, sp, #4
   17d9a:	f362 139f 	bfi	r3, r2, #6, #26
   17d9e:	f5bc 3f80 	cmp.w	ip, #65536	; 0x10000
   17da2:	d213      	bcs.n	17dcc <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x80>
   17da4:	f88d 3006 	strb.w	r3, [sp, #6]
   17da8:	ea4f 139c 	mov.w	r3, ip, lsr #6
   17dac:	f362 139f 	bfi	r3, r2, #6, #26
   17db0:	f88d 3005 	strb.w	r3, [sp, #5]
   17db4:	ea4f 321c 	mov.w	r2, ip, lsr #12
   17db8:	230e      	movs	r3, #14
   17dba:	f363 121f 	bfi	r2, r3, #4, #28
   17dbe:	f88d 2004 	strb.w	r2, [sp, #4]
   17dc2:	2203      	movs	r2, #3
   17dc4:	f7ff fe17 	bl	179f6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   17dc8:	b002      	add	sp, #8
   17dca:	bd80      	pop	{r7, pc}
   17dcc:	f88d 3007 	strb.w	r3, [sp, #7]
   17dd0:	ea4f 139c 	mov.w	r3, ip, lsr #6
   17dd4:	f362 139f 	bfi	r3, r2, #6, #26
   17dd8:	f88d 3006 	strb.w	r3, [sp, #6]
   17ddc:	ea4f 331c 	mov.w	r3, ip, lsr #12
   17de0:	f362 139f 	bfi	r3, r2, #6, #26
   17de4:	22f0      	movs	r2, #240	; 0xf0
   17de6:	ea42 429c 	orr.w	r2, r2, ip, lsr #18
   17dea:	f88d 3005 	strb.w	r3, [sp, #5]
   17dee:	f88d 2004 	strb.w	r2, [sp, #4]
   17df2:	2204      	movs	r2, #4
   17df4:	f7ff fdff 	bl	179f6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   17df8:	b002      	add	sp, #8
   17dfa:	bd80      	pop	{r7, pc}

00017dfc <_ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE>:
   17dfc:	b570      	push	{r4, r5, r6, lr}
   17dfe:	b088      	sub	sp, #32
   17e00:	9001      	str	r0, [sp, #4]
   17e02:	aa02      	add	r2, sp, #8
   17e04:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   17e08:	f241 6108 	movw	r1, #5640	; 0x1608
   17e0c:	4610      	mov	r0, r2
   17e0e:	f2c0 0102 	movt	r1, #2
   17e12:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   17e16:	a801      	add	r0, sp, #4
   17e18:	f000 f89e 	bl	17f58 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   17e1c:	b008      	add	sp, #32
   17e1e:	bd70      	pop	{r4, r5, r6, pc}

00017e20 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E>:
   17e20:	6800      	ldr	r0, [r0, #0]
   17e22:	f7ff bde8 	b.w	179f6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>

00017e26 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE>:
   17e26:	6800      	ldr	r0, [r0, #0]
   17e28:	f7ff bf90 	b.w	17d4c <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>

00017e2c <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE>:
   17e2c:	b570      	push	{r4, r5, r6, lr}
   17e2e:	b088      	sub	sp, #32
   17e30:	6800      	ldr	r0, [r0, #0]
   17e32:	aa02      	add	r2, sp, #8
   17e34:	9001      	str	r0, [sp, #4]
   17e36:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   17e3a:	4610      	mov	r0, r2
   17e3c:	f241 6108 	movw	r1, #5640	; 0x1608
   17e40:	f2c0 0102 	movt	r1, #2
   17e44:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   17e48:	a801      	add	r0, sp, #4
   17e4a:	f000 f885 	bl	17f58 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   17e4e:	b008      	add	sp, #32
   17e50:	bd70      	pop	{r4, r5, r6, pc}

00017e52 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE>:
   17e52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e56:	b08d      	sub	sp, #52	; 0x34
   17e58:	468c      	mov	ip, r1
   17e5a:	6801      	ldr	r1, [r0, #0]
   17e5c:	f248 5e1f 	movw	lr, #34079	; 0x851f
   17e60:	f241 503f 	movw	r0, #5439	; 0x153f
   17e64:	f242 7810 	movw	r8, #10000	; 0x2710
   17e68:	4541      	cmp	r1, r8
   17e6a:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   17e6e:	f2c0 0002 	movt	r0, #2
   17e72:	d337      	bcc.n	17ee4 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x92>
   17e74:	f241 7959 	movw	r9, #5977	; 0x1759
   17e78:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   17e7c:	f10d 0b0c 	add.w	fp, sp, #12
   17e80:	2300      	movs	r3, #0
   17e82:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   17e86:	f04f 0a64 	mov.w	sl, #100	; 0x64
   17e8a:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   17e8e:	fba1 2409 	umull	r2, r4, r1, r9
   17e92:	42b9      	cmp	r1, r7
   17e94:	ea4f 3254 	mov.w	r2, r4, lsr #13
   17e98:	fb02 1418 	mls	r4, r2, r8, r1
   17e9c:	4611      	mov	r1, r2
   17e9e:	b2a5      	uxth	r5, r4
   17ea0:	fba5 560e 	umull	r5, r6, r5, lr
   17ea4:	ea4f 1556 	mov.w	r5, r6, lsr #5
   17ea8:	eb0b 0603 	add.w	r6, fp, r3
   17eac:	fb05 441a 	mls	r4, r5, sl, r4
   17eb0:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   17eb4:	f1a3 0304 	sub.w	r3, r3, #4
   17eb8:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   17ebc:	b2a4      	uxth	r4, r4
   17ebe:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   17ec2:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   17ec6:	d8e2      	bhi.n	17e8e <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x3c>
   17ec8:	f103 0427 	add.w	r4, r3, #39	; 0x27
   17ecc:	4611      	mov	r1, r2
   17ece:	2963      	cmp	r1, #99	; 0x63
   17ed0:	dc0b      	bgt.n	17eea <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x98>
   17ed2:	460b      	mov	r3, r1
   17ed4:	2b0a      	cmp	r3, #10
   17ed6:	db17      	blt.n	17f08 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xb6>
   17ed8:	1ea1      	subs	r1, r4, #2
   17eda:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   17ede:	aa03      	add	r2, sp, #12
   17ee0:	5250      	strh	r0, [r2, r1]
   17ee2:	e016      	b.n	17f12 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xc0>
   17ee4:	2427      	movs	r4, #39	; 0x27
   17ee6:	2963      	cmp	r1, #99	; 0x63
   17ee8:	ddf3      	ble.n	17ed2 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x80>
   17eea:	b28a      	uxth	r2, r1
   17eec:	3c02      	subs	r4, #2
   17eee:	fba2 230e 	umull	r2, r3, r2, lr
   17ef2:	2264      	movs	r2, #100	; 0x64
   17ef4:	095b      	lsrs	r3, r3, #5
   17ef6:	fb03 1112 	mls	r1, r3, r2, r1
   17efa:	aa03      	add	r2, sp, #12
   17efc:	b289      	uxth	r1, r1
   17efe:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   17f02:	5311      	strh	r1, [r2, r4]
   17f04:	2b0a      	cmp	r3, #10
   17f06:	dae7      	bge.n	17ed8 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x86>
   17f08:	1e61      	subs	r1, r4, #1
   17f0a:	aa03      	add	r2, sp, #12
   17f0c:	f103 0030 	add.w	r0, r3, #48	; 0x30
   17f10:	5450      	strb	r0, [r2, r1]
   17f12:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   17f16:	aa03      	add	r2, sp, #12
   17f18:	4411      	add	r1, r2
   17f1a:	f241 3204 	movw	r2, #4868	; 0x1304
   17f1e:	e9cd 1000 	strd	r1, r0, [sp]
   17f22:	f2c0 0202 	movt	r2, #2
   17f26:	4660      	mov	r0, ip
   17f28:	2101      	movs	r1, #1
   17f2a:	2300      	movs	r3, #0
   17f2c:	f000 f8f4 	bl	18118 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   17f30:	b00d      	add	sp, #52	; 0x34
   17f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017f36 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E>:
   17f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17f3a:	b086      	sub	sp, #24
   17f3c:	e9d1 c106 	ldrd	ip, r1, [r1, #24]
   17f40:	466a      	mov	r2, sp
   17f42:	e890 41f0 	ldmia.w	r0, {r4, r5, r6, r7, r8, lr}
   17f46:	4613      	mov	r3, r2
   17f48:	4660      	mov	r0, ip
   17f4a:	e883 41f0 	stmia.w	r3, {r4, r5, r6, r7, r8, lr}
   17f4e:	f000 f803 	bl	17f58 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   17f52:	b006      	add	sp, #24
   17f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017f58 <_ZN4core3fmt5write17hd95ac78ed22a2252E>:
   17f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f5c:	b08b      	sub	sp, #44	; 0x2c
   17f5e:	2303      	movs	r3, #3
   17f60:	6897      	ldr	r7, [r2, #8]
   17f62:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   17f66:	2320      	movs	r3, #32
   17f68:	9303      	str	r3, [sp, #12]
   17f6a:	2300      	movs	r3, #0
   17f6c:	2f00      	cmp	r7, #0
   17f6e:	9302      	str	r3, [sp, #8]
   17f70:	e9cd 0108 	strd	r0, r1, [sp, #32]
   17f74:	9306      	str	r3, [sp, #24]
   17f76:	9304      	str	r3, [sp, #16]
   17f78:	d07c      	beq.n	18074 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x11c>
   17f7a:	f8d2 b00c 	ldr.w	fp, [r2, #12]
   17f7e:	e9d2 9400 	ldrd	r9, r4, [r2]
   17f82:	45a3      	cmp	fp, r4
   17f84:	bf88      	it	hi
   17f86:	46a3      	movhi	fp, r4
   17f88:	f1bb 0f00 	cmp.w	fp, #0
   17f8c:	f000 809b 	beq.w	180c6 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   17f90:	e9d2 6204 	ldrd	r6, r2, [r2, #16]
   17f94:	68cd      	ldr	r5, [r1, #12]
   17f96:	9201      	str	r2, [sp, #4]
   17f98:	e9d9 3200 	ldrd	r3, r2, [r9]
   17f9c:	4619      	mov	r1, r3
   17f9e:	47a8      	blx	r5
   17fa0:	2800      	cmp	r0, #0
   17fa2:	f040 809e 	bne.w	180e2 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   17fa6:	464d      	mov	r5, r9
   17fa8:	f04f 0a01 	mov.w	sl, #1
   17fac:	f04f 0800 	mov.w	r8, #0
   17fb0:	f04f 0910 	mov.w	r9, #16
   17fb4:	eb07 0088 	add.w	r0, r7, r8, lsl #2
   17fb8:	6841      	ldr	r1, [r0, #4]
   17fba:	9103      	str	r1, [sp, #12]
   17fbc:	7f01      	ldrb	r1, [r0, #28]
   17fbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   17fc2:	6881      	ldr	r1, [r0, #8]
   17fc4:	9102      	str	r1, [sp, #8]
   17fc6:	e9d0 2105 	ldrd	r2, r1, [r0, #20]
   17fca:	b18a      	cbz	r2, 17ff0 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x98>
   17fcc:	2a02      	cmp	r2, #2
   17fce:	d011      	beq.n	17ff4 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   17fd0:	9a01      	ldr	r2, [sp, #4]
   17fd2:	4291      	cmp	r1, r2
   17fd4:	f080 8098 	bcs.w	18108 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   17fd8:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
   17fdc:	f647 6353 	movw	r3, #32339	; 0x7e53
   17fe0:	f2c0 0301 	movt	r3, #1
   17fe4:	6852      	ldr	r2, [r2, #4]
   17fe6:	429a      	cmp	r2, r3
   17fe8:	d104      	bne.n	17ff4 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   17fea:	f856 1031 	ldr.w	r1, [r6, r1, lsl #3]
   17fee:	6809      	ldr	r1, [r1, #0]
   17ff0:	2201      	movs	r2, #1
   17ff2:	e000      	b.n	17ff6 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9e>
   17ff4:	2200      	movs	r2, #0
   17ff6:	e9cd 2104 	strd	r2, r1, [sp, #16]
   17ffa:	f857 1009 	ldr.w	r1, [r7, r9]
   17ffe:	68c0      	ldr	r0, [r0, #12]
   18000:	b180      	cbz	r0, 18024 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xcc>
   18002:	2802      	cmp	r0, #2
   18004:	d010      	beq.n	18028 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   18006:	9801      	ldr	r0, [sp, #4]
   18008:	4281      	cmp	r1, r0
   1800a:	d27d      	bcs.n	18108 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   1800c:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
   18010:	f647 6253 	movw	r2, #32339	; 0x7e53
   18014:	f2c0 0201 	movt	r2, #1
   18018:	6840      	ldr	r0, [r0, #4]
   1801a:	4290      	cmp	r0, r2
   1801c:	d104      	bne.n	18028 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   1801e:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   18022:	6801      	ldr	r1, [r0, #0]
   18024:	2001      	movs	r0, #1
   18026:	e000      	b.n	1802a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd2>
   18028:	2000      	movs	r0, #0
   1802a:	eb07 0209 	add.w	r2, r7, r9
   1802e:	e9cd 0106 	strd	r0, r1, [sp, #24]
   18032:	9801      	ldr	r0, [sp, #4]
   18034:	f852 1c10 	ldr.w	r1, [r2, #-16]
   18038:	4281      	cmp	r1, r0
   1803a:	d25d      	bcs.n	180f8 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1a0>
   1803c:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   18040:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
   18044:	684a      	ldr	r2, [r1, #4]
   18046:	a902      	add	r1, sp, #8
   18048:	4790      	blx	r2
   1804a:	2800      	cmp	r0, #0
   1804c:	d149      	bne.n	180e2 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   1804e:	45da      	cmp	sl, fp
   18050:	d24b      	bcs.n	180ea <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x192>
   18052:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   18056:	eb05 0208 	add.w	r2, r5, r8
   1805a:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   1805e:	68db      	ldr	r3, [r3, #12]
   18060:	4798      	blx	r3
   18062:	f109 0920 	add.w	r9, r9, #32
   18066:	f108 0808 	add.w	r8, r8, #8
   1806a:	f10a 0a01 	add.w	sl, sl, #1
   1806e:	2800      	cmp	r0, #0
   18070:	d0a0      	beq.n	17fb4 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x5c>
   18072:	e036      	b.n	180e2 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   18074:	6956      	ldr	r6, [r2, #20]
   18076:	e9d2 9400 	ldrd	r9, r4, [r2]
   1807a:	42a6      	cmp	r6, r4
   1807c:	bf88      	it	hi
   1807e:	4626      	movhi	r6, r4
   18080:	b30e      	cbz	r6, 180c6 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   18082:	6917      	ldr	r7, [r2, #16]
   18084:	e9d9 3200 	ldrd	r3, r2, [r9]
   18088:	68cd      	ldr	r5, [r1, #12]
   1808a:	4619      	mov	r1, r3
   1808c:	47a8      	blx	r5
   1808e:	bb40      	cbnz	r0, 180e2 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   18090:	f10d 0808 	add.w	r8, sp, #8
   18094:	2500      	movs	r5, #0
   18096:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
   1809a:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   1809e:	684a      	ldr	r2, [r1, #4]
   180a0:	4641      	mov	r1, r8
   180a2:	4790      	blx	r2
   180a4:	b9e8      	cbnz	r0, 180e2 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   180a6:	f105 0a01 	add.w	sl, r5, #1
   180aa:	45b2      	cmp	sl, r6
   180ac:	d20d      	bcs.n	180ca <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x172>
   180ae:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   180b2:	eb09 02c5 	add.w	r2, r9, r5, lsl #3
   180b6:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   180ba:	68db      	ldr	r3, [r3, #12]
   180bc:	4798      	blx	r3
   180be:	2800      	cmp	r0, #0
   180c0:	4655      	mov	r5, sl
   180c2:	d0e8      	beq.n	18096 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x13e>
   180c4:	e00d      	b.n	180e2 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   180c6:	f04f 0a00 	mov.w	sl, #0
   180ca:	4554      	cmp	r4, sl
   180cc:	d910      	bls.n	180f0 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   180ce:	eb09 02ca 	add.w	r2, r9, sl, lsl #3
   180d2:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   180d6:	f859 103a 	ldr.w	r1, [r9, sl, lsl #3]
   180da:	6852      	ldr	r2, [r2, #4]
   180dc:	68db      	ldr	r3, [r3, #12]
   180de:	4798      	blx	r3
   180e0:	b130      	cbz	r0, 180f0 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   180e2:	2001      	movs	r0, #1
   180e4:	b00b      	add	sp, #44	; 0x2c
   180e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180ea:	46a9      	mov	r9, r5
   180ec:	4554      	cmp	r4, sl
   180ee:	d8ee      	bhi.n	180ce <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x176>
   180f0:	2000      	movs	r0, #0
   180f2:	b00b      	add	sp, #44	; 0x2c
   180f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180f8:	f241 6038 	movw	r0, #5688	; 0x1638
   180fc:	f2c0 0002 	movt	r0, #2
   18100:	9a01      	ldr	r2, [sp, #4]
   18102:	f7ff fc47 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   18106:	defe      	udf	#254	; 0xfe
   18108:	f241 6048 	movw	r0, #5704	; 0x1648
   1810c:	f2c0 0002 	movt	r0, #2
   18110:	9a01      	ldr	r2, [sp, #4]
   18112:	f7ff fc3f 	bl	17994 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   18116:	defe      	udf	#254	; 0xfe

00018118 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>:
   18118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1811c:	b083      	sub	sp, #12
   1811e:	e9dd 570c 	ldrd	r5, r7, [sp, #48]	; 0x30
   18122:	469a      	mov	sl, r3
   18124:	4604      	mov	r4, r0
   18126:	b1e1      	cbz	r1, 18162 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x4a>
   18128:	f8d4 e000 	ldr.w	lr, [r4]
   1812c:	f04f 082b 	mov.w	r8, #43	; 0x2b
   18130:	f01e 0101 	ands.w	r1, lr, #1
   18134:	bf08      	it	eq
   18136:	f44f 1888 	moveq.w	r8, #1114112	; 0x110000
   1813a:	eb01 0907 	add.w	r9, r1, r7
   1813e:	ea5f 714e 	movs.w	r1, lr, lsl #29
   18142:	d517      	bpl.n	18174 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x5c>
   18144:	f1ba 0f00 	cmp.w	sl, #0
   18148:	d033      	beq.n	181b2 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9a>
   1814a:	f1aa 0101 	sub.w	r1, sl, #1
   1814e:	f00a 0c03 	and.w	ip, sl, #3
   18152:	2903      	cmp	r1, #3
   18154:	d22f      	bcs.n	181b6 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9e>
   18156:	2100      	movs	r1, #0
   18158:	4613      	mov	r3, r2
   1815a:	f1bc 0f00 	cmp.w	ip, #0
   1815e:	d152      	bne.n	18206 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xee>
   18160:	e069      	b.n	18236 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   18162:	f8d4 e000 	ldr.w	lr, [r4]
   18166:	f107 0901 	add.w	r9, r7, #1
   1816a:	f04f 082d 	mov.w	r8, #45	; 0x2d
   1816e:	ea5f 714e 	movs.w	r1, lr, lsl #29
   18172:	d4e7      	bmi.n	18144 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x2c>
   18174:	f04f 0a00 	mov.w	sl, #0
   18178:	2200      	movs	r2, #0
   1817a:	68a0      	ldr	r0, [r4, #8]
   1817c:	2801      	cmp	r0, #1
   1817e:	d161      	bne.n	18244 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   18180:	f8d4 b00c 	ldr.w	fp, [r4, #12]
   18184:	45cb      	cmp	fp, r9
   18186:	d95d      	bls.n	18244 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   18188:	ea5f 700e 	movs.w	r0, lr, lsl #28
   1818c:	d46e      	bmi.n	1826c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x154>
   1818e:	9202      	str	r2, [sp, #8]
   18190:	ebab 0109 	sub.w	r1, fp, r9
   18194:	f894 2020 	ldrb.w	r2, [r4, #32]
   18198:	2000      	movs	r0, #0
   1819a:	46a9      	mov	r9, r5
   1819c:	460e      	mov	r6, r1
   1819e:	2a03      	cmp	r2, #3
   181a0:	bf08      	it	eq
   181a2:	2201      	moveq	r2, #1
   181a4:	e8df f002 	tbb	[pc, r2]
   181a8:	02840287 	.word	0x02840287
   181ac:	2600      	movs	r6, #0
   181ae:	4608      	mov	r0, r1
   181b0:	e081      	b.n	182b6 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x19e>
   181b2:	2100      	movs	r1, #0
   181b4:	e03f      	b.n	18236 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   181b6:	ebac 060a 	sub.w	r6, ip, sl
   181ba:	2100      	movs	r1, #0
   181bc:	4693      	mov	fp, r2
   181be:	4613      	mov	r3, r2
   181c0:	e9cd 7501 	strd	r7, r5, [sp, #4]
   181c4:	781a      	ldrb	r2, [r3, #0]
   181c6:	785d      	ldrb	r5, [r3, #1]
   181c8:	7898      	ldrb	r0, [r3, #2]
   181ca:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   181ce:	78df      	ldrb	r7, [r3, #3]
   181d0:	2a80      	cmp	r2, #128	; 0x80
   181d2:	f005 02c0 	and.w	r2, r5, #192	; 0xc0
   181d6:	bf08      	it	eq
   181d8:	3101      	addeq	r1, #1
   181da:	2a80      	cmp	r2, #128	; 0x80
   181dc:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   181e0:	bf08      	it	eq
   181e2:	3101      	addeq	r1, #1
   181e4:	2880      	cmp	r0, #128	; 0x80
   181e6:	f007 00c0 	and.w	r0, r7, #192	; 0xc0
   181ea:	bf08      	it	eq
   181ec:	3101      	addeq	r1, #1
   181ee:	2880      	cmp	r0, #128	; 0x80
   181f0:	bf08      	it	eq
   181f2:	3101      	addeq	r1, #1
   181f4:	3304      	adds	r3, #4
   181f6:	3604      	adds	r6, #4
   181f8:	d1e4      	bne.n	181c4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xac>
   181fa:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   181fe:	465a      	mov	r2, fp
   18200:	f1bc 0f00 	cmp.w	ip, #0
   18204:	d017      	beq.n	18236 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   18206:	7818      	ldrb	r0, [r3, #0]
   18208:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   1820c:	2880      	cmp	r0, #128	; 0x80
   1820e:	bf08      	it	eq
   18210:	3101      	addeq	r1, #1
   18212:	f1bc 0f01 	cmp.w	ip, #1
   18216:	d00e      	beq.n	18236 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   18218:	7858      	ldrb	r0, [r3, #1]
   1821a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   1821e:	2880      	cmp	r0, #128	; 0x80
   18220:	bf08      	it	eq
   18222:	3101      	addeq	r1, #1
   18224:	f1bc 0f02 	cmp.w	ip, #2
   18228:	d005      	beq.n	18236 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   1822a:	7898      	ldrb	r0, [r3, #2]
   1822c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   18230:	2880      	cmp	r0, #128	; 0x80
   18232:	bf08      	it	eq
   18234:	3101      	addeq	r1, #1
   18236:	eb09 000a 	add.w	r0, r9, sl
   1823a:	eba0 0901 	sub.w	r9, r0, r1
   1823e:	68a0      	ldr	r0, [r4, #8]
   18240:	2801      	cmp	r0, #1
   18242:	d09d      	beq.n	18180 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x68>
   18244:	4620      	mov	r0, r4
   18246:	4641      	mov	r1, r8
   18248:	4653      	mov	r3, sl
   1824a:	f000 f893 	bl	18374 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   1824e:	b120      	cbz	r0, 1825a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x142>
   18250:	2601      	movs	r6, #1
   18252:	4630      	mov	r0, r6
   18254:	b003      	add	sp, #12
   18256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1825a:	69e1      	ldr	r1, [r4, #28]
   1825c:	463a      	mov	r2, r7
   1825e:	69a0      	ldr	r0, [r4, #24]
   18260:	68cb      	ldr	r3, [r1, #12]
   18262:	4629      	mov	r1, r5
   18264:	b003      	add	sp, #12
   18266:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1826a:	4718      	bx	r3
   1826c:	6860      	ldr	r0, [r4, #4]
   1826e:	2601      	movs	r6, #1
   18270:	9002      	str	r0, [sp, #8]
   18272:	2030      	movs	r0, #48	; 0x30
   18274:	f894 1020 	ldrb.w	r1, [r4, #32]
   18278:	4653      	mov	r3, sl
   1827a:	6060      	str	r0, [r4, #4]
   1827c:	4620      	mov	r0, r4
   1827e:	9101      	str	r1, [sp, #4]
   18280:	4641      	mov	r1, r8
   18282:	f884 6020 	strb.w	r6, [r4, #32]
   18286:	f000 f875 	bl	18374 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   1828a:	2800      	cmp	r0, #0
   1828c:	d1e1      	bne.n	18252 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   1828e:	f894 2020 	ldrb.w	r2, [r4, #32]
   18292:	ebab 0109 	sub.w	r1, fp, r9
   18296:	2000      	movs	r0, #0
   18298:	46a9      	mov	r9, r5
   1829a:	2a03      	cmp	r2, #3
   1829c:	bf08      	it	eq
   1829e:	2201      	moveq	r2, #1
   182a0:	460e      	mov	r6, r1
   182a2:	e8df f002 	tbb	[pc, r2]
   182a6:	0235      	.short	0x0235
   182a8:	0232      	.short	0x0232
   182aa:	2600      	movs	r6, #0
   182ac:	4608      	mov	r0, r1
   182ae:	e02f      	b.n	18310 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1f8>
   182b0:	0848      	lsrs	r0, r1, #1
   182b2:	3101      	adds	r1, #1
   182b4:	084e      	lsrs	r6, r1, #1
   182b6:	1c45      	adds	r5, r0, #1
   182b8:	3d01      	subs	r5, #1
   182ba:	d007      	beq.n	182cc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1b4>
   182bc:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   182c0:	6861      	ldr	r1, [r4, #4]
   182c2:	6912      	ldr	r2, [r2, #16]
   182c4:	4790      	blx	r2
   182c6:	2800      	cmp	r0, #0
   182c8:	d0f6      	beq.n	182b8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1a0>
   182ca:	e7c1      	b.n	18250 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   182cc:	9a02      	ldr	r2, [sp, #8]
   182ce:	4620      	mov	r0, r4
   182d0:	4641      	mov	r1, r8
   182d2:	4653      	mov	r3, sl
   182d4:	f8d4 b004 	ldr.w	fp, [r4, #4]
   182d8:	f000 f84c 	bl	18374 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   182dc:	2800      	cmp	r0, #0
   182de:	d1b7      	bne.n	18250 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   182e0:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   182e4:	463a      	mov	r2, r7
   182e6:	68cb      	ldr	r3, [r1, #12]
   182e8:	4649      	mov	r1, r9
   182ea:	4798      	blx	r3
   182ec:	2800      	cmp	r0, #0
   182ee:	d1af      	bne.n	18250 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   182f0:	e9d4 5406 	ldrd	r5, r4, [r4, #24]
   182f4:	1c77      	adds	r7, r6, #1
   182f6:	2601      	movs	r6, #1
   182f8:	3f01      	subs	r7, #1
   182fa:	d02c      	beq.n	18356 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x23e>
   182fc:	6922      	ldr	r2, [r4, #16]
   182fe:	4628      	mov	r0, r5
   18300:	4659      	mov	r1, fp
   18302:	4790      	blx	r2
   18304:	2800      	cmp	r0, #0
   18306:	d0f7      	beq.n	182f8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1e0>
   18308:	e7a3      	b.n	18252 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   1830a:	0848      	lsrs	r0, r1, #1
   1830c:	3101      	adds	r1, #1
   1830e:	084e      	lsrs	r6, r1, #1
   18310:	1c45      	adds	r5, r0, #1
   18312:	3d01      	subs	r5, #1
   18314:	d007      	beq.n	18326 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x20e>
   18316:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   1831a:	6861      	ldr	r1, [r4, #4]
   1831c:	6912      	ldr	r2, [r2, #16]
   1831e:	4790      	blx	r2
   18320:	2800      	cmp	r0, #0
   18322:	d0f6      	beq.n	18312 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1fa>
   18324:	e794      	b.n	18250 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   18326:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   1832a:	463a      	mov	r2, r7
   1832c:	68cb      	ldr	r3, [r1, #12]
   1832e:	4649      	mov	r1, r9
   18330:	f8d4 8004 	ldr.w	r8, [r4, #4]
   18334:	4798      	blx	r3
   18336:	2800      	cmp	r0, #0
   18338:	f47f af8a 	bne.w	18250 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   1833c:	e9d4 9506 	ldrd	r9, r5, [r4, #24]
   18340:	1c77      	adds	r7, r6, #1
   18342:	2601      	movs	r6, #1
   18344:	3f01      	subs	r7, #1
   18346:	d00b      	beq.n	18360 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x248>
   18348:	692a      	ldr	r2, [r5, #16]
   1834a:	4648      	mov	r0, r9
   1834c:	4641      	mov	r1, r8
   1834e:	4790      	blx	r2
   18350:	2800      	cmp	r0, #0
   18352:	d0f7      	beq.n	18344 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x22c>
   18354:	e77d      	b.n	18252 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   18356:	2600      	movs	r6, #0
   18358:	4630      	mov	r0, r6
   1835a:	b003      	add	sp, #12
   1835c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18360:	9801      	ldr	r0, [sp, #4]
   18362:	2600      	movs	r6, #0
   18364:	f884 0020 	strb.w	r0, [r4, #32]
   18368:	9802      	ldr	r0, [sp, #8]
   1836a:	6060      	str	r0, [r4, #4]
   1836c:	4630      	mov	r0, r6
   1836e:	b003      	add	sp, #12
   18370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018374 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>:
   18374:	b570      	push	{r4, r5, r6, lr}
   18376:	461c      	mov	r4, r3
   18378:	4615      	mov	r5, r2
   1837a:	4606      	mov	r6, r0
   1837c:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
   18380:	d006      	beq.n	18390 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   18382:	e9d6 0206 	ldrd	r0, r2, [r6, #24]
   18386:	6912      	ldr	r2, [r2, #16]
   18388:	4790      	blx	r2
   1838a:	b108      	cbz	r0, 18390 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   1838c:	2001      	movs	r0, #1
   1838e:	bd70      	pop	{r4, r5, r6, pc}
   18390:	b13d      	cbz	r5, 183a2 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x2e>
   18392:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
   18396:	4622      	mov	r2, r4
   18398:	68cb      	ldr	r3, [r1, #12]
   1839a:	4629      	mov	r1, r5
   1839c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   183a0:	4718      	bx	r3
   183a2:	2000      	movs	r0, #0
   183a4:	bd70      	pop	{r4, r5, r6, pc}
	...

000183a8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>:
   183a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   183ac:	b081      	sub	sp, #4
   183ae:	f8d0 e008 	ldr.w	lr, [r0, #8]
   183b2:	4682      	mov	sl, r0
   183b4:	6900      	ldr	r0, [r0, #16]
   183b6:	4691      	mov	r9, r2
   183b8:	4688      	mov	r8, r1
   183ba:	f1be 0f01 	cmp.w	lr, #1
   183be:	d111      	bne.n	183e4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x3c>
   183c0:	2801      	cmp	r0, #1
   183c2:	d012      	beq.n	183ea <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x42>
   183c4:	f1b9 0f00 	cmp.w	r9, #0
   183c8:	f000 80c5 	beq.w	18556 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1ae>
   183cc:	f1a9 0101 	sub.w	r1, r9, #1
   183d0:	f009 0003 	and.w	r0, r9, #3
   183d4:	2903      	cmp	r1, #3
   183d6:	d267      	bcs.n	184a8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x100>
   183d8:	2100      	movs	r1, #0
   183da:	4642      	mov	r2, r8
   183dc:	2800      	cmp	r0, #0
   183de:	f040 8083 	bne.w	184e8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x140>
   183e2:	e097      	b.n	18514 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   183e4:	2801      	cmp	r0, #1
   183e6:	f040 80bd 	bne.w	18564 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   183ea:	f1b9 0f00 	cmp.w	r9, #0
   183ee:	d054      	beq.n	1849a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xf2>
   183f0:	f8da 0014 	ldr.w	r0, [sl, #20]
   183f4:	eb08 0109 	add.w	r1, r8, r9
   183f8:	2200      	movs	r2, #0
   183fa:	4647      	mov	r7, r8
   183fc:	1c43      	adds	r3, r0, #1
   183fe:	4646      	mov	r6, r8
   18400:	463c      	mov	r4, r7
   18402:	f914 5b01 	ldrsb.w	r5, [r4], #1
   18406:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1840a:	b2e8      	uxtb	r0, r5
   1840c:	dc2e      	bgt.n	1846c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   1840e:	428c      	cmp	r4, r1
   18410:	d01a      	beq.n	18448 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xa0>
   18412:	787d      	ldrb	r5, [r7, #1]
   18414:	1cbc      	adds	r4, r7, #2
   18416:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   1841a:	4627      	mov	r7, r4
   1841c:	f000 0b1f 	and.w	fp, r0, #31
   18420:	28df      	cmp	r0, #223	; 0xdf
   18422:	d917      	bls.n	18454 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xac>
   18424:	428f      	cmp	r7, r1
   18426:	d018      	beq.n	1845a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xb2>
   18428:	f817 4b01 	ldrb.w	r4, [r7], #1
   1842c:	f004 0c3f 	and.w	ip, r4, #63	; 0x3f
   18430:	463c      	mov	r4, r7
   18432:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   18436:	28f0      	cmp	r0, #240	; 0xf0
   18438:	d316      	bcc.n	18468 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc0>
   1843a:	428f      	cmp	r7, r1
   1843c:	d020      	beq.n	18480 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xd8>
   1843e:	f817 0b01 	ldrb.w	r0, [r7], #1
   18442:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   18446:	e01d      	b.n	18484 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xdc>
   18448:	2500      	movs	r5, #0
   1844a:	460f      	mov	r7, r1
   1844c:	f000 0b1f 	and.w	fp, r0, #31
   18450:	28df      	cmp	r0, #223	; 0xdf
   18452:	d8e7      	bhi.n	18424 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x7c>
   18454:	ea45 108b 	orr.w	r0, r5, fp, lsl #6
   18458:	e008      	b.n	1846c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   1845a:	f04f 0c00 	mov.w	ip, #0
   1845e:	460f      	mov	r7, r1
   18460:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   18464:	28f0      	cmp	r0, #240	; 0xf0
   18466:	d2e8      	bcs.n	1843a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x92>
   18468:	ea45 300b 	orr.w	r0, r5, fp, lsl #12
   1846c:	4627      	mov	r7, r4
   1846e:	3b01      	subs	r3, #1
   18470:	d065      	beq.n	1853e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x196>
   18472:	1b90      	subs	r0, r2, r6
   18474:	42b9      	cmp	r1, r7
   18476:	eb00 0207 	add.w	r2, r0, r7
   1847a:	463e      	mov	r6, r7
   1847c:	d1c0      	bne.n	18400 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x58>
   1847e:	e061      	b.n	18544 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   18480:	2000      	movs	r0, #0
   18482:	4627      	mov	r7, r4
   18484:	f44f 14e0 	mov.w	r4, #1835008	; 0x1c0000
   18488:	ea04 448b 	and.w	r4, r4, fp, lsl #18
   1848c:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   18490:	4428      	add	r0, r5
   18492:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   18496:	d1ea      	bne.n	1846e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc6>
   18498:	e054      	b.n	18544 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   1849a:	2200      	movs	r2, #0
   1849c:	f1be 0f01 	cmp.w	lr, #1
   184a0:	d054      	beq.n	1854c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   184a2:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   184a6:	e062      	b.n	1856e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1c6>
   184a8:	eba0 0309 	sub.w	r3, r0, r9
   184ac:	2100      	movs	r1, #0
   184ae:	4642      	mov	r2, r8
   184b0:	7817      	ldrb	r7, [r2, #0]
   184b2:	7856      	ldrb	r6, [r2, #1]
   184b4:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
   184b8:	7895      	ldrb	r5, [r2, #2]
   184ba:	78d4      	ldrb	r4, [r2, #3]
   184bc:	2f80      	cmp	r7, #128	; 0x80
   184be:	f006 07c0 	and.w	r7, r6, #192	; 0xc0
   184c2:	bf08      	it	eq
   184c4:	3101      	addeq	r1, #1
   184c6:	2f80      	cmp	r7, #128	; 0x80
   184c8:	f005 07c0 	and.w	r7, r5, #192	; 0xc0
   184cc:	bf08      	it	eq
   184ce:	3101      	addeq	r1, #1
   184d0:	2f80      	cmp	r7, #128	; 0x80
   184d2:	f004 07c0 	and.w	r7, r4, #192	; 0xc0
   184d6:	bf08      	it	eq
   184d8:	3101      	addeq	r1, #1
   184da:	2f80      	cmp	r7, #128	; 0x80
   184dc:	bf08      	it	eq
   184de:	3101      	addeq	r1, #1
   184e0:	3204      	adds	r2, #4
   184e2:	3304      	adds	r3, #4
   184e4:	d1e4      	bne.n	184b0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x108>
   184e6:	b1a8      	cbz	r0, 18514 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   184e8:	7813      	ldrb	r3, [r2, #0]
   184ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   184ee:	2b80      	cmp	r3, #128	; 0x80
   184f0:	bf08      	it	eq
   184f2:	3101      	addeq	r1, #1
   184f4:	2801      	cmp	r0, #1
   184f6:	d00d      	beq.n	18514 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   184f8:	7853      	ldrb	r3, [r2, #1]
   184fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   184fe:	2b80      	cmp	r3, #128	; 0x80
   18500:	bf08      	it	eq
   18502:	3101      	addeq	r1, #1
   18504:	2802      	cmp	r0, #2
   18506:	d005      	beq.n	18514 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   18508:	7890      	ldrb	r0, [r2, #2]
   1850a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   1850e:	2880      	cmp	r0, #128	; 0x80
   18510:	bf08      	it	eq
   18512:	3101      	addeq	r1, #1
   18514:	f8da 000c 	ldr.w	r0, [sl, #12]
   18518:	eba9 0101 	sub.w	r1, r9, r1
   1851c:	4281      	cmp	r1, r0
   1851e:	d221      	bcs.n	18564 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   18520:	f1b9 0f00 	cmp.w	r9, #0
   18524:	d029      	beq.n	1857a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d2>
   18526:	f1a9 0101 	sub.w	r1, r9, #1
   1852a:	f009 0c03 	and.w	ip, r9, #3
   1852e:	2903      	cmp	r1, #3
   18530:	d225      	bcs.n	1857e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d6>
   18532:	2100      	movs	r1, #0
   18534:	4643      	mov	r3, r8
   18536:	f1bc 0f00 	cmp.w	ip, #0
   1853a:	d142      	bne.n	185c2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x21a>
   1853c:	e059      	b.n	185f2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   1853e:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   18542:	d167      	bne.n	18614 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x26c>
   18544:	464a      	mov	r2, r9
   18546:	f1be 0f01 	cmp.w	lr, #1
   1854a:	d1aa      	bne.n	184a2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   1854c:	4691      	mov	r9, r2
   1854e:	f1b9 0f00 	cmp.w	r9, #0
   18552:	f47f af3b 	bne.w	183cc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24>
   18556:	2100      	movs	r1, #0
   18558:	f8da 000c 	ldr.w	r0, [sl, #12]
   1855c:	eba9 0101 	sub.w	r1, r9, r1
   18560:	4281      	cmp	r1, r0
   18562:	d3dd      	bcc.n	18520 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x178>
   18564:	f8da 101c 	ldr.w	r1, [sl, #28]
   18568:	464a      	mov	r2, r9
   1856a:	f8da 0018 	ldr.w	r0, [sl, #24]
   1856e:	68cb      	ldr	r3, [r1, #12]
   18570:	4641      	mov	r1, r8
   18572:	b001      	add	sp, #4
   18574:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18578:	4718      	bx	r3
   1857a:	2100      	movs	r1, #0
   1857c:	e039      	b.n	185f2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   1857e:	ebac 0709 	sub.w	r7, ip, r9
   18582:	2100      	movs	r1, #0
   18584:	4643      	mov	r3, r8
   18586:	781e      	ldrb	r6, [r3, #0]
   18588:	785d      	ldrb	r5, [r3, #1]
   1858a:	f006 06c0 	and.w	r6, r6, #192	; 0xc0
   1858e:	789c      	ldrb	r4, [r3, #2]
   18590:	78da      	ldrb	r2, [r3, #3]
   18592:	2e80      	cmp	r6, #128	; 0x80
   18594:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
   18598:	bf08      	it	eq
   1859a:	3101      	addeq	r1, #1
   1859c:	2e80      	cmp	r6, #128	; 0x80
   1859e:	f004 06c0 	and.w	r6, r4, #192	; 0xc0
   185a2:	bf08      	it	eq
   185a4:	3101      	addeq	r1, #1
   185a6:	2e80      	cmp	r6, #128	; 0x80
   185a8:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   185ac:	bf08      	it	eq
   185ae:	3101      	addeq	r1, #1
   185b0:	2a80      	cmp	r2, #128	; 0x80
   185b2:	bf08      	it	eq
   185b4:	3101      	addeq	r1, #1
   185b6:	3304      	adds	r3, #4
   185b8:	3704      	adds	r7, #4
   185ba:	d1e4      	bne.n	18586 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1de>
   185bc:	f1bc 0f00 	cmp.w	ip, #0
   185c0:	d017      	beq.n	185f2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   185c2:	781a      	ldrb	r2, [r3, #0]
   185c4:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   185c8:	2a80      	cmp	r2, #128	; 0x80
   185ca:	bf08      	it	eq
   185cc:	3101      	addeq	r1, #1
   185ce:	f1bc 0f01 	cmp.w	ip, #1
   185d2:	d00e      	beq.n	185f2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   185d4:	785a      	ldrb	r2, [r3, #1]
   185d6:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   185da:	2a80      	cmp	r2, #128	; 0x80
   185dc:	bf08      	it	eq
   185de:	3101      	addeq	r1, #1
   185e0:	f1bc 0f02 	cmp.w	ip, #2
   185e4:	d005      	beq.n	185f2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   185e6:	789a      	ldrb	r2, [r3, #2]
   185e8:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   185ec:	2a80      	cmp	r2, #128	; 0x80
   185ee:	bf08      	it	eq
   185f0:	3101      	addeq	r1, #1
   185f2:	f89a 3020 	ldrb.w	r3, [sl, #32]
   185f6:	eba1 0109 	sub.w	r1, r1, r9
   185fa:	4401      	add	r1, r0
   185fc:	2000      	movs	r0, #0
   185fe:	1eda      	subs	r2, r3, #3
   18600:	bf18      	it	ne
   18602:	461a      	movne	r2, r3
   18604:	460e      	mov	r6, r1
   18606:	e8df f002 	tbb	[pc, r2]
   1860a:	0216      	.short	0x0216
   1860c:	0213      	.short	0x0213
   1860e:	2600      	movs	r6, #0
   18610:	4608      	mov	r0, r1
   18612:	e010      	b.n	18636 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x28e>
   18614:	2a00      	cmp	r2, #0
   18616:	bf18      	it	ne
   18618:	454a      	cmpne	r2, r9
   1861a:	d134      	bne.n	18686 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2de>
   1861c:	4640      	mov	r0, r8
   1861e:	2800      	cmp	r0, #0
   18620:	bf0c      	ite	eq
   18622:	464a      	moveq	r2, r9
   18624:	4680      	movne	r8, r0
   18626:	f1be 0f01 	cmp.w	lr, #1
   1862a:	f43f af8f 	beq.w	1854c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   1862e:	e738      	b.n	184a2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   18630:	0848      	lsrs	r0, r1, #1
   18632:	3101      	adds	r1, #1
   18634:	084e      	lsrs	r6, r1, #1
   18636:	1c44      	adds	r4, r0, #1
   18638:	3c01      	subs	r4, #1
   1863a:	d008      	beq.n	1864e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2a6>
   1863c:	e9da 0206 	ldrd	r0, r2, [sl, #24]
   18640:	f8da 1004 	ldr.w	r1, [sl, #4]
   18644:	6912      	ldr	r2, [r2, #16]
   18646:	4790      	blx	r2
   18648:	2800      	cmp	r0, #0
   1864a:	d0f5      	beq.n	18638 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x290>
   1864c:	e013      	b.n	18676 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   1864e:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   18652:	464a      	mov	r2, r9
   18654:	68cb      	ldr	r3, [r1, #12]
   18656:	4641      	mov	r1, r8
   18658:	f8da 7004 	ldr.w	r7, [sl, #4]
   1865c:	4798      	blx	r3
   1865e:	b950      	cbnz	r0, 18676 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   18660:	e9da 4506 	ldrd	r4, r5, [sl, #24]
   18664:	3601      	adds	r6, #1
   18666:	3e01      	subs	r6, #1
   18668:	d009      	beq.n	1867e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2d6>
   1866a:	692a      	ldr	r2, [r5, #16]
   1866c:	4620      	mov	r0, r4
   1866e:	4639      	mov	r1, r7
   18670:	4790      	blx	r2
   18672:	2800      	cmp	r0, #0
   18674:	d0f7      	beq.n	18666 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2be>
   18676:	2001      	movs	r0, #1
   18678:	b001      	add	sp, #4
   1867a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1867e:	2000      	movs	r0, #0
   18680:	b001      	add	sp, #4
   18682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18686:	454a      	cmp	r2, r9
   18688:	d204      	bcs.n	18694 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ec>
   1868a:	f918 0002 	ldrsb.w	r0, [r8, r2]
   1868e:	f110 0f40 	cmn.w	r0, #64	; 0x40
   18692:	dac3      	bge.n	1861c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x274>
   18694:	2000      	movs	r0, #0
   18696:	2200      	movs	r2, #0
   18698:	2800      	cmp	r0, #0
   1869a:	bf0c      	ite	eq
   1869c:	464a      	moveq	r2, r9
   1869e:	4680      	movne	r8, r0
   186a0:	f1be 0f01 	cmp.w	lr, #1
   186a4:	f43f af52 	beq.w	1854c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   186a8:	e6fb      	b.n	184a2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>

000186aa <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>:
   186aa:	7800      	ldrb	r0, [r0, #0]
   186ac:	f3c0 1000 	ubfx	r0, r0, #4, #1
   186b0:	4770      	bx	lr

000186b2 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>:
   186b2:	7800      	ldrb	r0, [r0, #0]
   186b4:	f3c0 1040 	ubfx	r0, r0, #5, #1
   186b8:	4770      	bx	lr

000186ba <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>:
   186ba:	b570      	push	{r4, r5, r6, lr}
   186bc:	460d      	mov	r5, r1
   186be:	4606      	mov	r6, r0
   186c0:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   186c4:	461c      	mov	r4, r3
   186c6:	68cb      	ldr	r3, [r1, #12]
   186c8:	4611      	mov	r1, r2
   186ca:	4622      	mov	r2, r4
   186cc:	4798      	blx	r3
   186ce:	7230      	strb	r0, [r6, #8]
   186d0:	fab4 f084 	clz	r0, r4
   186d4:	0940      	lsrs	r0, r0, #5
   186d6:	7270      	strb	r0, [r6, #9]
   186d8:	2000      	movs	r0, #0
   186da:	e9c6 5000 	strd	r5, r0, [r6]
   186de:	bd70      	pop	{r4, r5, r6, pc}

000186e0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E>:
   186e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   186e4:	b085      	sub	sp, #20
   186e6:	460c      	mov	r4, r1
   186e8:	4605      	mov	r5, r0
   186ea:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   186ee:	690a      	ldr	r2, [r1, #16]
   186f0:	2127      	movs	r1, #39	; 0x27
   186f2:	4790      	blx	r2
   186f4:	b118      	cbz	r0, 186fe <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x1e>
   186f6:	2001      	movs	r0, #1
   186f8:	b005      	add	sp, #20
   186fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   186fe:	6829      	ldr	r1, [r5, #0]
   18700:	a801      	add	r0, sp, #4
   18702:	2201      	movs	r2, #1
   18704:	f7ff f85c 	bl	177c0 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>
   18708:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   1870c:	f04f 091c 	mov.w	r9, #28
   18710:	f8dd 800c 	ldr.w	r8, [sp, #12]
   18714:	f5b5 1f88 	cmp.w	r5, #1114112	; 0x110000
   18718:	f89d 6010 	ldrb.w	r6, [sp, #16]
   1871c:	d139      	bne.n	18792 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xb2>
   1871e:	f44f 1588 	mov.w	r5, #1114112	; 0x110000
   18722:	2f02      	cmp	r7, #2
   18724:	f0c0 806b 	bcc.w	187fe <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x11e>
   18728:	d00c      	beq.n	18744 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x64>
   1872a:	b2f0      	uxtb	r0, r6
   1872c:	2604      	movs	r6, #4
   1872e:	2703      	movs	r7, #3
   18730:	215c      	movs	r1, #92	; 0x5c
   18732:	e8df f000 	tbb	[pc, r0]
   18736:	0364      	.short	0x0364
   18738:	09242010 	.word	0x09242010
   1873c:	2600      	movs	r6, #0
   1873e:	2703      	movs	r7, #3
   18740:	217d      	movs	r1, #125	; 0x7d
   18742:	e001      	b.n	18748 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   18744:	2701      	movs	r7, #1
   18746:	215c      	movs	r1, #92	; 0x5c
   18748:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   1874c:	6912      	ldr	r2, [r2, #16]
   1874e:	4790      	blx	r2
   18750:	2800      	cmp	r0, #0
   18752:	d0e6      	beq.n	18722 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x42>
   18754:	e7cf      	b.n	186f6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   18756:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   1875a:	2602      	movs	r6, #2
   1875c:	2703      	movs	r7, #3
   1875e:	f1b8 0f00 	cmp.w	r8, #0
   18762:	fa25 f100 	lsr.w	r1, r5, r0
   18766:	bf08      	it	eq
   18768:	2601      	moveq	r6, #1
   1876a:	bf18      	it	ne
   1876c:	f1a8 0801 	subne.w	r8, r8, #1
   18770:	f367 111f 	bfi	r1, r7, #4, #28
   18774:	e7e8      	b.n	18748 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   18776:	2602      	movs	r6, #2
   18778:	2703      	movs	r7, #3
   1877a:	217b      	movs	r1, #123	; 0x7b
   1877c:	e7e4      	b.n	18748 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   1877e:	2703      	movs	r7, #3
   18780:	2175      	movs	r1, #117	; 0x75
   18782:	2603      	movs	r6, #3
   18784:	e7e0      	b.n	18748 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   18786:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   1878a:	6912      	ldr	r2, [r2, #16]
   1878c:	4790      	blx	r2
   1878e:	2800      	cmp	r0, #0
   18790:	d1b1      	bne.n	186f6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   18792:	4638      	mov	r0, r7
   18794:	2701      	movs	r7, #1
   18796:	215c      	movs	r1, #92	; 0x5c
   18798:	e8df f000 	tbb	[pc, r0]
   1879c:	06020331 	.word	0x06020331
   187a0:	e7f1      	b.n	18786 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   187a2:	2700      	movs	r7, #0
   187a4:	4629      	mov	r1, r5
   187a6:	e7ee      	b.n	18786 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   187a8:	b2f0      	uxtb	r0, r6
   187aa:	2604      	movs	r6, #4
   187ac:	2703      	movs	r7, #3
   187ae:	215c      	movs	r1, #92	; 0x5c
   187b0:	e8df f000 	tbb	[pc, r0]
   187b4:	1d080425 	.word	0x1d080425
   187b8:	0321      	.short	0x0321
   187ba:	e7e4      	b.n	18786 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   187bc:	2600      	movs	r6, #0
   187be:	2703      	movs	r7, #3
   187c0:	217d      	movs	r1, #125	; 0x7d
   187c2:	e7e0      	b.n	18786 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   187c4:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   187c8:	2602      	movs	r6, #2
   187ca:	2703      	movs	r7, #3
   187cc:	fa25 f000 	lsr.w	r0, r5, r0
   187d0:	f000 000f 	and.w	r0, r0, #15
   187d4:	f100 0157 	add.w	r1, r0, #87	; 0x57
   187d8:	280a      	cmp	r0, #10
   187da:	bf38      	it	cc
   187dc:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   187e0:	f1b8 0f00 	cmp.w	r8, #0
   187e4:	bf0c      	ite	eq
   187e6:	2601      	moveq	r6, #1
   187e8:	f1a8 0801 	subne.w	r8, r8, #1
   187ec:	e7cb      	b.n	18786 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   187ee:	2602      	movs	r6, #2
   187f0:	2703      	movs	r7, #3
   187f2:	217b      	movs	r1, #123	; 0x7b
   187f4:	e7c7      	b.n	18786 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   187f6:	2703      	movs	r7, #3
   187f8:	2175      	movs	r1, #117	; 0x75
   187fa:	2603      	movs	r6, #3
   187fc:	e7c3      	b.n	18786 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   187fe:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   18802:	690a      	ldr	r2, [r1, #16]
   18804:	2127      	movs	r1, #39	; 0x27
   18806:	b005      	add	sp, #20
   18808:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1880c:	4710      	bx	r2

0001880e <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>:
   1880e:	b08c      	sub	sp, #48	; 0x30
   18810:	e9cd 0100 	strd	r0, r1, [sp]
   18814:	2002      	movs	r0, #2
   18816:	a908      	add	r1, sp, #32
   18818:	9007      	str	r0, [sp, #28]
   1881a:	9106      	str	r1, [sp, #24]
   1881c:	2100      	movs	r1, #0
   1881e:	9105      	str	r1, [sp, #20]
   18820:	e9cd 0103 	strd	r0, r1, [sp, #12]
   18824:	f241 6098 	movw	r0, #5784	; 0x1698
   18828:	f2c0 0002 	movt	r0, #2
   1882c:	a901      	add	r1, sp, #4
   1882e:	9002      	str	r0, [sp, #8]
   18830:	f249 60e9 	movw	r0, #38633	; 0x96e9
   18834:	f2c0 0001 	movt	r0, #1
   18838:	900b      	str	r0, [sp, #44]	; 0x2c
   1883a:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   1883e:	4668      	mov	r0, sp
   18840:	f241 61a8 	movw	r1, #5800	; 0x16a8
   18844:	9008      	str	r0, [sp, #32]
   18846:	a802      	add	r0, sp, #8
   18848:	f2c0 0102 	movt	r1, #2
   1884c:	f7ff f8c2 	bl	179d4 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   18850:	defe      	udf	#254	; 0xfe

00018852 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>:
   18852:	b08c      	sub	sp, #48	; 0x30
   18854:	e9cd 0100 	strd	r0, r1, [sp]
   18858:	2002      	movs	r0, #2
   1885a:	a908      	add	r1, sp, #32
   1885c:	9007      	str	r0, [sp, #28]
   1885e:	9106      	str	r1, [sp, #24]
   18860:	2100      	movs	r1, #0
   18862:	9105      	str	r1, [sp, #20]
   18864:	e9cd 0103 	strd	r0, r1, [sp, #12]
   18868:	f241 60dc 	movw	r0, #5852	; 0x16dc
   1886c:	f2c0 0002 	movt	r0, #2
   18870:	a901      	add	r1, sp, #4
   18872:	9002      	str	r0, [sp, #8]
   18874:	f249 60e9 	movw	r0, #38633	; 0x96e9
   18878:	f2c0 0001 	movt	r0, #1
   1887c:	900b      	str	r0, [sp, #44]	; 0x2c
   1887e:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   18882:	4668      	mov	r0, sp
   18884:	f241 61ec 	movw	r1, #5868	; 0x16ec
   18888:	9008      	str	r0, [sp, #32]
   1888a:	a802      	add	r0, sp, #8
   1888c:	f2c0 0102 	movt	r1, #2
   18890:	f7ff f8a0 	bl	179d4 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   18894:	defe      	udf	#254	; 0xfe

00018896 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>:
   18896:	b09a      	sub	sp, #104	; 0x68
   18898:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   1889c:	e9cd 2300 	strd	r2, r3, [sp]
   188a0:	d802      	bhi.n	188a8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12>
   188a2:	2501      	movs	r5, #1
   188a4:	468c      	mov	ip, r1
   188a6:	e03e      	b.n	18926 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   188a8:	f1c1 0e00 	rsb	lr, r1, #0
   188ac:	f44f 7c80 	mov.w	ip, #256	; 0x100
   188b0:	458c      	cmp	ip, r1
   188b2:	d205      	bcs.n	188c0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2a>
   188b4:	f910 400c 	ldrsb.w	r4, [r0, ip]
   188b8:	f114 0f41 	cmn.w	r4, #65	; 0x41
   188bc:	f300 8108 	bgt.w	18ad0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23a>
   188c0:	eb0e 040c 	add.w	r4, lr, ip
   188c4:	f1ac 0601 	sub.w	r6, ip, #1
   188c8:	2c01      	cmp	r4, #1
   188ca:	d02a      	beq.n	18922 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   188cc:	428e      	cmp	r6, r1
   188ce:	d206      	bcs.n	188de <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x48>
   188d0:	eb00 050c 	add.w	r5, r0, ip
   188d4:	f915 5c01 	ldrsb.w	r5, [r5, #-1]
   188d8:	f115 0f41 	cmn.w	r5, #65	; 0x41
   188dc:	dc21      	bgt.n	18922 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   188de:	f1ac 0602 	sub.w	r6, ip, #2
   188e2:	2c02      	cmp	r4, #2
   188e4:	d01d      	beq.n	18922 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   188e6:	428e      	cmp	r6, r1
   188e8:	d206      	bcs.n	188f8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x62>
   188ea:	eb00 050c 	add.w	r5, r0, ip
   188ee:	f915 5c02 	ldrsb.w	r5, [r5, #-2]
   188f2:	f115 0f41 	cmn.w	r5, #65	; 0x41
   188f6:	dc14      	bgt.n	18922 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   188f8:	f1ac 0603 	sub.w	r6, ip, #3
   188fc:	2c03      	cmp	r4, #3
   188fe:	d010      	beq.n	18922 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   18900:	428e      	cmp	r6, r1
   18902:	d206      	bcs.n	18912 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x7c>
   18904:	eb00 050c 	add.w	r5, r0, ip
   18908:	f915 5c03 	ldrsb.w	r5, [r5, #-3]
   1890c:	f115 0f41 	cmn.w	r5, #65	; 0x41
   18910:	dc07      	bgt.n	18922 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   18912:	f1bc 0c04 	subs.w	ip, ip, #4
   18916:	f04f 0500 	mov.w	r5, #0
   1891a:	d004      	beq.n	18926 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   1891c:	2c04      	cmp	r4, #4
   1891e:	d1c7      	bne.n	188b0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1a>
   18920:	e001      	b.n	18926 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   18922:	2500      	movs	r5, #0
   18924:	46b4      	mov	ip, r6
   18926:	2605      	movs	r6, #5
   18928:	2d00      	cmp	r5, #0
   1892a:	f241 75ba 	movw	r5, #6074	; 0x17ba
   1892e:	e9cd 0c02 	strd	r0, ip, [sp, #8]
   18932:	bf18      	it	ne
   18934:	2600      	movne	r6, #0
   18936:	9605      	str	r6, [sp, #20]
   18938:	f241 3604 	movw	r6, #4868	; 0x1304
   1893c:	f2c0 0502 	movt	r5, #2
   18940:	f2c0 0602 	movt	r6, #2
   18944:	bf18      	it	ne
   18946:	4635      	movne	r5, r6
   18948:	428a      	cmp	r2, r1
   1894a:	9504      	str	r5, [sp, #16]
   1894c:	bf98      	it	ls
   1894e:	428b      	cmpls	r3, r1
   18950:	d92a      	bls.n	189a8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x112>
   18952:	428a      	cmp	r2, r1
   18954:	f04f 0003 	mov.w	r0, #3
   18958:	a910      	add	r1, sp, #64	; 0x40
   1895a:	bf88      	it	hi
   1895c:	4613      	movhi	r3, r2
   1895e:	900f      	str	r0, [sp, #60]	; 0x3c
   18960:	910e      	str	r1, [sp, #56]	; 0x38
   18962:	2100      	movs	r1, #0
   18964:	910d      	str	r1, [sp, #52]	; 0x34
   18966:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   1896a:	f241 70e0 	movw	r0, #6112	; 0x17e0
   1896e:	f2c0 0002 	movt	r0, #2
   18972:	a904      	add	r1, sp, #16
   18974:	900a      	str	r0, [sp, #40]	; 0x28
   18976:	f249 70d7 	movw	r0, #38871	; 0x97d7
   1897a:	f2c0 0001 	movt	r0, #1
   1897e:	9308      	str	r3, [sp, #32]
   18980:	9015      	str	r0, [sp, #84]	; 0x54
   18982:	e9cd 0113 	strd	r0, r1, [sp, #76]	; 0x4c
   18986:	a802      	add	r0, sp, #8
   18988:	f241 71f8 	movw	r1, #6136	; 0x17f8
   1898c:	9012      	str	r0, [sp, #72]	; 0x48
   1898e:	f249 60e9 	movw	r0, #38633	; 0x96e9
   18992:	f2c0 0102 	movt	r1, #2
   18996:	f2c0 0001 	movt	r0, #1
   1899a:	9011      	str	r0, [sp, #68]	; 0x44
   1899c:	a808      	add	r0, sp, #32
   1899e:	9010      	str	r0, [sp, #64]	; 0x40
   189a0:	a80a      	add	r0, sp, #40	; 0x28
   189a2:	f7ff f817 	bl	179d4 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   189a6:	defe      	udf	#254	; 0xfe
   189a8:	429a      	cmp	r2, r3
   189aa:	f200 80f1 	bhi.w	18b90 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2fa>
   189ae:	2a00      	cmp	r2, #0
   189b0:	bf18      	it	ne
   189b2:	4291      	cmpne	r1, r2
   189b4:	d109      	bne.n	189ca <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x134>
   189b6:	461a      	mov	r2, r3
   189b8:	2a00      	cmp	r2, #0
   189ba:	9206      	str	r2, [sp, #24]
   189bc:	bf18      	it	ne
   189be:	428a      	cmpne	r2, r1
   189c0:	d10e      	bne.n	189e0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x14a>
   189c2:	4613      	mov	r3, r2
   189c4:	428b      	cmp	r3, r1
   189c6:	d047      	beq.n	18a58 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   189c8:	e052      	b.n	18a70 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   189ca:	d9f5      	bls.n	189b8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x122>
   189cc:	5686      	ldrsb	r6, [r0, r2]
   189ce:	f116 0f40 	cmn.w	r6, #64	; 0x40
   189d2:	bfa8      	it	ge
   189d4:	461a      	movge	r2, r3
   189d6:	2a00      	cmp	r2, #0
   189d8:	9206      	str	r2, [sp, #24]
   189da:	bf18      	it	ne
   189dc:	428a      	cmpne	r2, r1
   189de:	d0f0      	beq.n	189c2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   189e0:	f1a0 0c01 	sub.w	ip, r0, #1
   189e4:	f101 0e02 	add.w	lr, r1, #2
   189e8:	1ccc      	adds	r4, r1, #3
   189ea:	1c4d      	adds	r5, r1, #1
   189ec:	1d0e      	adds	r6, r1, #4
   189ee:	428a      	cmp	r2, r1
   189f0:	d206      	bcs.n	18a00 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x16a>
   189f2:	eb0c 0302 	add.w	r3, ip, r2
   189f6:	f993 3001 	ldrsb.w	r3, [r3, #1]
   189fa:	f113 0f41 	cmn.w	r3, #65	; 0x41
   189fe:	dce0      	bgt.n	189c2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   18a00:	1e53      	subs	r3, r2, #1
   18a02:	bf18      	it	ne
   18a04:	4295      	cmpne	r5, r2
   18a06:	d025      	beq.n	18a54 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   18a08:	428b      	cmp	r3, r1
   18a0a:	d204      	bcs.n	18a16 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x180>
   18a0c:	f91c 7002 	ldrsb.w	r7, [ip, r2]
   18a10:	f117 0f41 	cmn.w	r7, #65	; 0x41
   18a14:	dc1e      	bgt.n	18a54 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   18a16:	1e93      	subs	r3, r2, #2
   18a18:	bf18      	it	ne
   18a1a:	4596      	cmpne	lr, r2
   18a1c:	d01a      	beq.n	18a54 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   18a1e:	428b      	cmp	r3, r1
   18a20:	d206      	bcs.n	18a30 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x19a>
   18a22:	eb0c 0702 	add.w	r7, ip, r2
   18a26:	f917 7c01 	ldrsb.w	r7, [r7, #-1]
   18a2a:	f117 0f41 	cmn.w	r7, #65	; 0x41
   18a2e:	dc11      	bgt.n	18a54 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   18a30:	1ed3      	subs	r3, r2, #3
   18a32:	bf18      	it	ne
   18a34:	4294      	cmpne	r4, r2
   18a36:	d00d      	beq.n	18a54 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   18a38:	428b      	cmp	r3, r1
   18a3a:	d206      	bcs.n	18a4a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1b4>
   18a3c:	eb0c 0702 	add.w	r7, ip, r2
   18a40:	f917 7c02 	ldrsb.w	r7, [r7, #-2]
   18a44:	f117 0f41 	cmn.w	r7, #65	; 0x41
   18a48:	dc04      	bgt.n	18a54 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   18a4a:	1f13      	subs	r3, r2, #4
   18a4c:	d002      	beq.n	18a54 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   18a4e:	4296      	cmp	r6, r2
   18a50:	461a      	mov	r2, r3
   18a52:	d1cc      	bne.n	189ee <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x158>
   18a54:	428b      	cmp	r3, r1
   18a56:	d10b      	bne.n	18a70 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   18a58:	f241 40a0 	movw	r0, #5280	; 0x14a0
   18a5c:	f641 0248 	movw	r2, #6216	; 0x1848
   18a60:	f2c0 0002 	movt	r0, #2
   18a64:	f2c0 0202 	movt	r2, #2
   18a68:	212b      	movs	r1, #43	; 0x2b
   18a6a:	f7fe ff7d 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   18a6e:	defe      	udf	#254	; 0xfe
   18a70:	18c5      	adds	r5, r0, r3
   18a72:	462e      	mov	r6, r5
   18a74:	f916 4b01 	ldrsb.w	r4, [r6], #1
   18a78:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   18a7c:	b2e2      	uxtb	r2, r4
   18a7e:	dd02      	ble.n	18a86 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1f0>
   18a80:	9207      	str	r2, [sp, #28]
   18a82:	2101      	movs	r1, #1
   18a84:	e04d      	b.n	18b22 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   18a86:	4408      	add	r0, r1
   18a88:	4286      	cmp	r6, r0
   18a8a:	d10b      	bne.n	18aa4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x20e>
   18a8c:	2500      	movs	r5, #0
   18a8e:	4606      	mov	r6, r0
   18a90:	f002 011f 	and.w	r1, r2, #31
   18a94:	2adf      	cmp	r2, #223	; 0xdf
   18a96:	d80d      	bhi.n	18ab4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x21e>
   18a98:	ea45 1081 	orr.w	r0, r5, r1, lsl #6
   18a9c:	2880      	cmp	r0, #128	; 0x80
   18a9e:	9007      	str	r0, [sp, #28]
   18aa0:	d333      	bcc.n	18b0a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   18aa2:	e034      	b.n	18b0e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   18aa4:	7869      	ldrb	r1, [r5, #1]
   18aa6:	1cae      	adds	r6, r5, #2
   18aa8:	f001 053f 	and.w	r5, r1, #63	; 0x3f
   18aac:	f002 011f 	and.w	r1, r2, #31
   18ab0:	2adf      	cmp	r2, #223	; 0xdf
   18ab2:	d9f1      	bls.n	18a98 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x202>
   18ab4:	4286      	cmp	r6, r0
   18ab6:	d10d      	bne.n	18ad4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23e>
   18ab8:	2400      	movs	r4, #0
   18aba:	4606      	mov	r6, r0
   18abc:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   18ac0:	2af0      	cmp	r2, #240	; 0xf0
   18ac2:	d20f      	bcs.n	18ae4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x24e>
   18ac4:	ea45 3001 	orr.w	r0, r5, r1, lsl #12
   18ac8:	2880      	cmp	r0, #128	; 0x80
   18aca:	9007      	str	r0, [sp, #28]
   18acc:	d31d      	bcc.n	18b0a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   18ace:	e01e      	b.n	18b0e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   18ad0:	2500      	movs	r5, #0
   18ad2:	e728      	b.n	18926 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   18ad4:	f816 4b01 	ldrb.w	r4, [r6], #1
   18ad8:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   18adc:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   18ae0:	2af0      	cmp	r2, #240	; 0xf0
   18ae2:	d3ef      	bcc.n	18ac4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x22e>
   18ae4:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
   18ae8:	ea02 4181 	and.w	r1, r2, r1, lsl #18
   18aec:	4286      	cmp	r6, r0
   18aee:	bf1a      	itte	ne
   18af0:	7830      	ldrbne	r0, [r6, #0]
   18af2:	f000 003f 	andne.w	r0, r0, #63	; 0x3f
   18af6:	2000      	moveq	r0, #0
   18af8:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
   18afc:	4408      	add	r0, r1
   18afe:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   18b02:	d0a9      	beq.n	18a58 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   18b04:	2880      	cmp	r0, #128	; 0x80
   18b06:	9007      	str	r0, [sp, #28]
   18b08:	d201      	bcs.n	18b0e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   18b0a:	2101      	movs	r1, #1
   18b0c:	e009      	b.n	18b22 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   18b0e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   18b12:	d201      	bcs.n	18b18 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x282>
   18b14:	2102      	movs	r1, #2
   18b16:	e004      	b.n	18b22 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   18b18:	2104      	movs	r1, #4
   18b1a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   18b1e:	bf38      	it	cc
   18b20:	2103      	movcc	r1, #3
   18b22:	4419      	add	r1, r3
   18b24:	aa10      	add	r2, sp, #64	; 0x40
   18b26:	a808      	add	r0, sp, #32
   18b28:	e9cd 3108 	strd	r3, r1, [sp, #32]
   18b2c:	2105      	movs	r1, #5
   18b2e:	910f      	str	r1, [sp, #60]	; 0x3c
   18b30:	920e      	str	r2, [sp, #56]	; 0x38
   18b32:	2200      	movs	r2, #0
   18b34:	920d      	str	r2, [sp, #52]	; 0x34
   18b36:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
   18b3a:	f641 0184 	movw	r1, #6276	; 0x1884
   18b3e:	f2c0 0102 	movt	r1, #2
   18b42:	aa04      	add	r2, sp, #16
   18b44:	910a      	str	r1, [sp, #40]	; 0x28
   18b46:	f249 71d7 	movw	r1, #38871	; 0x97d7
   18b4a:	f2c0 0101 	movt	r1, #1
   18b4e:	9119      	str	r1, [sp, #100]	; 0x64
   18b50:	e9cd 1217 	strd	r1, r2, [sp, #92]	; 0x5c
   18b54:	a902      	add	r1, sp, #8
   18b56:	9116      	str	r1, [sp, #88]	; 0x58
   18b58:	f247 7161 	movw	r1, #30561	; 0x7761
   18b5c:	f2c0 0101 	movt	r1, #1
   18b60:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   18b64:	f248 60e1 	movw	r0, #34529	; 0x86e1
   18b68:	f2c0 0001 	movt	r0, #1
   18b6c:	f641 01ac 	movw	r1, #6316	; 0x18ac
   18b70:	9013      	str	r0, [sp, #76]	; 0x4c
   18b72:	a807      	add	r0, sp, #28
   18b74:	9012      	str	r0, [sp, #72]	; 0x48
   18b76:	f249 60e9 	movw	r0, #38633	; 0x96e9
   18b7a:	f2c0 0001 	movt	r0, #1
   18b7e:	f2c0 0102 	movt	r1, #2
   18b82:	9011      	str	r0, [sp, #68]	; 0x44
   18b84:	a806      	add	r0, sp, #24
   18b86:	9010      	str	r0, [sp, #64]	; 0x40
   18b88:	a80a      	add	r0, sp, #40	; 0x28
   18b8a:	f7fe ff23 	bl	179d4 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   18b8e:	defe      	udf	#254	; 0xfe
   18b90:	2004      	movs	r0, #4
   18b92:	a910      	add	r1, sp, #64	; 0x40
   18b94:	900f      	str	r0, [sp, #60]	; 0x3c
   18b96:	910e      	str	r1, [sp, #56]	; 0x38
   18b98:	2100      	movs	r1, #0
   18b9a:	910d      	str	r1, [sp, #52]	; 0x34
   18b9c:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   18ba0:	f641 0018 	movw	r0, #6168	; 0x1818
   18ba4:	f2c0 0002 	movt	r0, #2
   18ba8:	a904      	add	r1, sp, #16
   18baa:	900a      	str	r0, [sp, #40]	; 0x28
   18bac:	f249 70d7 	movw	r0, #38871	; 0x97d7
   18bb0:	f2c0 0001 	movt	r0, #1
   18bb4:	9017      	str	r0, [sp, #92]	; 0x5c
   18bb6:	e9cd 0115 	strd	r0, r1, [sp, #84]	; 0x54
   18bba:	a802      	add	r0, sp, #8
   18bbc:	9014      	str	r0, [sp, #80]	; 0x50
   18bbe:	f249 60e9 	movw	r0, #38633	; 0x96e9
   18bc2:	a901      	add	r1, sp, #4
   18bc4:	f2c0 0001 	movt	r0, #1
   18bc8:	9013      	str	r0, [sp, #76]	; 0x4c
   18bca:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
   18bce:	f641 0138 	movw	r1, #6200	; 0x1838
   18bd2:	4668      	mov	r0, sp
   18bd4:	f2c0 0102 	movt	r1, #2
   18bd8:	9010      	str	r0, [sp, #64]	; 0x40
   18bda:	a80a      	add	r0, sp, #40	; 0x28
   18bdc:	f7fe fefa 	bl	179d4 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   18be0:	defe      	udf	#254	; 0xfe

00018be2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>:
   18be2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18be6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   18bea:	d270      	bcs.n	18cce <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xec>
   18bec:	f641 0ecc 	movw	lr, #6348	; 0x18cc
   18bf0:	f641 181e 	movw	r8, #6430	; 0x191e
   18bf4:	fa1f f980 	uxth.w	r9, r0
   18bf8:	f2c0 0e02 	movt	lr, #2
   18bfc:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   18c00:	f04f 0a00 	mov.w	sl, #0
   18c04:	f2c0 0802 	movt	r8, #2
   18c08:	4675      	mov	r5, lr
   18c0a:	786e      	ldrb	r6, [r5, #1]
   18c0c:	4652      	mov	r2, sl
   18c0e:	782b      	ldrb	r3, [r5, #0]
   18c10:	3502      	adds	r5, #2
   18c12:	44b2      	add	sl, r6
   18c14:	4563      	cmp	r3, ip
   18c16:	d129      	bne.n	18c6c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x8a>
   18c18:	4592      	cmp	sl, r2
   18c1a:	f0c0 8112 	bcc.w	18e42 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   18c1e:	ea4f 035a 	mov.w	r3, sl, lsr #1
   18c22:	2b92      	cmp	r3, #146	; 0x92
   18c24:	f200 8112 	bhi.w	18e4c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x26a>
   18c28:	eb08 0302 	add.w	r3, r8, r2
   18c2c:	199a      	adds	r2, r3, r6
   18c2e:	b31e      	cbz	r6, 18c78 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   18c30:	461f      	mov	r7, r3
   18c32:	b2c4      	uxtb	r4, r0
   18c34:	f817 1b01 	ldrb.w	r1, [r7], #1
   18c38:	42a1      	cmp	r1, r4
   18c3a:	f000 80b6 	beq.w	18daa <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   18c3e:	4297      	cmp	r7, r2
   18c40:	d01a      	beq.n	18c78 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   18c42:	7859      	ldrb	r1, [r3, #1]
   18c44:	42a1      	cmp	r1, r4
   18c46:	f000 80b0 	beq.w	18daa <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   18c4a:	1c99      	adds	r1, r3, #2
   18c4c:	4291      	cmp	r1, r2
   18c4e:	d013      	beq.n	18c78 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   18c50:	7899      	ldrb	r1, [r3, #2]
   18c52:	42a1      	cmp	r1, r4
   18c54:	f000 80a9 	beq.w	18daa <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   18c58:	1cd9      	adds	r1, r3, #3
   18c5a:	4291      	cmp	r1, r2
   18c5c:	d00c      	beq.n	18c78 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   18c5e:	1d19      	adds	r1, r3, #4
   18c60:	78db      	ldrb	r3, [r3, #3]
   18c62:	3e04      	subs	r6, #4
   18c64:	42a3      	cmp	r3, r4
   18c66:	460b      	mov	r3, r1
   18c68:	d1e1      	bne.n	18c2e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x4c>
   18c6a:	e09e      	b.n	18daa <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   18c6c:	d808      	bhi.n	18c80 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   18c6e:	f10e 0252 	add.w	r2, lr, #82	; 0x52
   18c72:	4295      	cmp	r5, r2
   18c74:	d1c9      	bne.n	18c0a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   18c76:	e003      	b.n	18c80 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   18c78:	f10e 0152 	add.w	r1, lr, #82	; 0x52
   18c7c:	428d      	cmp	r5, r1
   18c7e:	d1c4      	bne.n	18c0a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   18c80:	f641 2543 	movw	r5, #6723	; 0x1a43
   18c84:	2101      	movs	r1, #1
   18c86:	f2c0 0502 	movt	r5, #2
   18c8a:	4628      	mov	r0, r5
   18c8c:	4602      	mov	r2, r0
   18c8e:	f812 7b01 	ldrb.w	r7, [r2], #1
   18c92:	b27e      	sxtb	r6, r7
   18c94:	2e00      	cmp	r6, #0
   18c96:	d404      	bmi.n	18ca2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xc0>
   18c98:	4610      	mov	r0, r2
   18c9a:	ebb9 0907 	subs.w	r9, r9, r7
   18c9e:	d50f      	bpl.n	18cc0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xde>
   18ca0:	e0bd      	b.n	18e1e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18ca2:	f505 739d 	add.w	r3, r5, #314	; 0x13a
   18ca6:	429a      	cmp	r2, r3
   18ca8:	f000 80db 	beq.w	18e62 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   18cac:	7842      	ldrb	r2, [r0, #1]
   18cae:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   18cb2:	3002      	adds	r0, #2
   18cb4:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   18cb8:	ebb9 0907 	subs.w	r9, r9, r7
   18cbc:	f100 80af 	bmi.w	18e1e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18cc0:	f505 729d 	add.w	r2, r5, #314	; 0x13a
   18cc4:	f081 0101 	eor.w	r1, r1, #1
   18cc8:	4290      	cmp	r0, r2
   18cca:	d1df      	bne.n	18c8c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xaa>
   18ccc:	e0a7      	b.n	18e1e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18cce:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
   18cd2:	d26f      	bcs.n	18db4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1d2>
   18cd4:	f641 3e7d 	movw	lr, #7037	; 0x1b7d
   18cd8:	f641 38c3 	movw	r8, #7107	; 0x1bc3
   18cdc:	fa1f f980 	uxth.w	r9, r0
   18ce0:	f2c0 0e02 	movt	lr, #2
   18ce4:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   18ce8:	f04f 0a00 	mov.w	sl, #0
   18cec:	f2c0 0802 	movt	r8, #2
   18cf0:	4675      	mov	r5, lr
   18cf2:	786e      	ldrb	r6, [r5, #1]
   18cf4:	4652      	mov	r2, sl
   18cf6:	782b      	ldrb	r3, [r5, #0]
   18cf8:	3502      	adds	r5, #2
   18cfa:	44b2      	add	sl, r6
   18cfc:	4563      	cmp	r3, ip
   18cfe:	d125      	bne.n	18d4c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x16a>
   18d00:	4592      	cmp	sl, r2
   18d02:	f0c0 809e 	bcc.w	18e42 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   18d06:	f1ba 0fa6 	cmp.w	sl, #166	; 0xa6
   18d0a:	f200 80a5 	bhi.w	18e58 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x276>
   18d0e:	eb08 0302 	add.w	r3, r8, r2
   18d12:	199a      	adds	r2, r3, r6
   18d14:	b306      	cbz	r6, 18d58 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   18d16:	461f      	mov	r7, r3
   18d18:	b2c4      	uxtb	r4, r0
   18d1a:	f817 1b01 	ldrb.w	r1, [r7], #1
   18d1e:	42a1      	cmp	r1, r4
   18d20:	d043      	beq.n	18daa <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   18d22:	4297      	cmp	r7, r2
   18d24:	d018      	beq.n	18d58 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   18d26:	7859      	ldrb	r1, [r3, #1]
   18d28:	42a1      	cmp	r1, r4
   18d2a:	d03e      	beq.n	18daa <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   18d2c:	1c99      	adds	r1, r3, #2
   18d2e:	4291      	cmp	r1, r2
   18d30:	d012      	beq.n	18d58 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   18d32:	7899      	ldrb	r1, [r3, #2]
   18d34:	42a1      	cmp	r1, r4
   18d36:	d038      	beq.n	18daa <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   18d38:	1cd9      	adds	r1, r3, #3
   18d3a:	4291      	cmp	r1, r2
   18d3c:	d00c      	beq.n	18d58 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   18d3e:	1d19      	adds	r1, r3, #4
   18d40:	78db      	ldrb	r3, [r3, #3]
   18d42:	3e04      	subs	r6, #4
   18d44:	42a3      	cmp	r3, r4
   18d46:	460b      	mov	r3, r1
   18d48:	d1e4      	bne.n	18d14 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x132>
   18d4a:	e02e      	b.n	18daa <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   18d4c:	d808      	bhi.n	18d60 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   18d4e:	f10e 0246 	add.w	r2, lr, #70	; 0x46
   18d52:	4295      	cmp	r5, r2
   18d54:	d1cd      	bne.n	18cf2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   18d56:	e003      	b.n	18d60 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   18d58:	f10e 0146 	add.w	r1, lr, #70	; 0x46
   18d5c:	428d      	cmp	r5, r1
   18d5e:	d1c8      	bne.n	18cf2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   18d60:	f641 4569 	movw	r5, #7273	; 0x1c69
   18d64:	2101      	movs	r1, #1
   18d66:	f2c0 0502 	movt	r5, #2
   18d6a:	4628      	mov	r0, r5
   18d6c:	4602      	mov	r2, r0
   18d6e:	f812 7b01 	ldrb.w	r7, [r2], #1
   18d72:	b27e      	sxtb	r6, r7
   18d74:	2e00      	cmp	r6, #0
   18d76:	d40a      	bmi.n	18d8e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1ac>
   18d78:	4610      	mov	r0, r2
   18d7a:	ebb9 0907 	subs.w	r9, r9, r7
   18d7e:	d44e      	bmi.n	18e1e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18d80:	f505 72cc 	add.w	r2, r5, #408	; 0x198
   18d84:	f081 0101 	eor.w	r1, r1, #1
   18d88:	4290      	cmp	r0, r2
   18d8a:	d1ef      	bne.n	18d6c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x18a>
   18d8c:	e047      	b.n	18e1e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18d8e:	f505 73cc 	add.w	r3, r5, #408	; 0x198
   18d92:	429a      	cmp	r2, r3
   18d94:	d065      	beq.n	18e62 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   18d96:	7842      	ldrb	r2, [r0, #1]
   18d98:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   18d9c:	3002      	adds	r0, #2
   18d9e:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   18da2:	ebb9 0907 	subs.w	r9, r9, r7
   18da6:	d5eb      	bpl.n	18d80 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x19e>
   18da8:	e039      	b.n	18e1e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18daa:	2100      	movs	r1, #0
   18dac:	f001 0001 	and.w	r0, r1, #1
   18db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18db4:	f240 51e2 	movw	r1, #1506	; 0x5e2
   18db8:	f240 63e2 	movw	r3, #1762	; 0x6e2
   18dbc:	f6cf 71fd 	movt	r1, #65533	; 0xfffd
   18dc0:	1842      	adds	r2, r0, r1
   18dc2:	f2c0 030b 	movt	r3, #11
   18dc6:	2100      	movs	r1, #0
   18dc8:	429a      	cmp	r2, r3
   18dca:	d328      	bcc.n	18e1e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18dcc:	f241 421f 	movw	r2, #5151	; 0x141f
   18dd0:	f640 431f 	movw	r3, #3103	; 0xc1f
   18dd4:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   18dd8:	4402      	add	r2, r0
   18dda:	429a      	cmp	r2, r3
   18ddc:	bf21      	itttt	cs
   18dde:	f243 125e 	movwcs	r2, #12638	; 0x315e
   18de2:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   18de6:	4402      	addcs	r2, r0
   18de8:	2a0e      	cmpcs	r2, #14
   18dea:	d318      	bcc.n	18e1e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18dec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   18df0:	f64b 031e 	movw	r3, #47134	; 0xb81e
   18df4:	f2c0 021f 	movt	r2, #31
   18df8:	f2c0 0302 	movt	r3, #2
   18dfc:	4002      	ands	r2, r0
   18dfe:	429a      	cmp	r2, r3
   18e00:	d00d      	beq.n	18e1e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18e02:	f645 1229 	movw	r2, #22825	; 0x5929
   18e06:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   18e0a:	4402      	add	r2, r0
   18e0c:	2a29      	cmp	r2, #41	; 0x29
   18e0e:	bf21      	itttt	cs
   18e10:	f644 02cb 	movwcs	r2, #18635	; 0x48cb
   18e14:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   18e18:	4402      	addcs	r2, r0
   18e1a:	2a0b      	cmpcs	r2, #11
   18e1c:	d203      	bcs.n	18e26 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x244>
   18e1e:	f001 0001 	and.w	r0, r1, #1
   18e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18e26:	f5a0 2060 	sub.w	r0, r0, #917504	; 0xe0000
   18e2a:	f64f 620f 	movw	r2, #65039	; 0xfe0f
   18e2e:	f5a0 71f8 	sub.w	r1, r0, #496	; 0x1f0
   18e32:	2000      	movs	r0, #0
   18e34:	f2c0 0202 	movt	r2, #2
   18e38:	4291      	cmp	r1, r2
   18e3a:	bf88      	it	hi
   18e3c:	2001      	movhi	r0, #1
   18e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18e42:	4610      	mov	r0, r2
   18e44:	4651      	mov	r1, sl
   18e46:	f7ff fd04 	bl	18852 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   18e4a:	defe      	udf	#254	; 0xfe
   18e4c:	4650      	mov	r0, sl
   18e4e:	f240 1125 	movw	r1, #293	; 0x125
   18e52:	f7ff fcdc 	bl	1880e <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   18e56:	defe      	udf	#254	; 0xfe
   18e58:	4650      	mov	r0, sl
   18e5a:	21a6      	movs	r1, #166	; 0xa6
   18e5c:	f7ff fcd7 	bl	1880e <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   18e60:	defe      	udf	#254	; 0xfe
   18e62:	f241 40a0 	movw	r0, #5280	; 0x14a0
   18e66:	f641 02bc 	movw	r2, #6332	; 0x18bc
   18e6a:	f2c0 0002 	movt	r0, #2
   18e6e:	f2c0 0202 	movt	r2, #2
   18e72:	212b      	movs	r1, #43	; 0x2b
   18e74:	f7fe fd78 	bl	17968 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   18e78:	defe      	udf	#254	; 0xfe

00018e7a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>:
   18e7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e7e:	b0a3      	sub	sp, #140	; 0x8c
   18e80:	468c      	mov	ip, r1
   18e82:	6809      	ldr	r1, [r1, #0]
   18e84:	06ca      	lsls	r2, r1, #27
   18e86:	d44a      	bmi.n	18f1e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xa4>
   18e88:	6804      	ldr	r4, [r0, #0]
   18e8a:	0688      	lsls	r0, r1, #26
   18e8c:	f100 8089 	bmi.w	18fa2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x128>
   18e90:	f248 5e1f 	movw	lr, #34079	; 0x851f
   18e94:	f241 523f 	movw	r2, #5439	; 0x153f
   18e98:	f242 7810 	movw	r8, #10000	; 0x2710
   18e9c:	4544      	cmp	r4, r8
   18e9e:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   18ea2:	f2c0 0202 	movt	r2, #2
   18ea6:	f0c0 80e3 	bcc.w	19070 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1f6>
   18eaa:	f241 7959 	movw	r9, #5977	; 0x1759
   18eae:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   18eb2:	f10d 0b0c 	add.w	fp, sp, #12
   18eb6:	2300      	movs	r3, #0
   18eb8:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   18ebc:	f04f 0a64 	mov.w	sl, #100	; 0x64
   18ec0:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   18ec4:	fba4 0109 	umull	r0, r1, r4, r9
   18ec8:	42bc      	cmp	r4, r7
   18eca:	ea4f 3051 	mov.w	r0, r1, lsr #13
   18ece:	fb00 4118 	mls	r1, r0, r8, r4
   18ed2:	4604      	mov	r4, r0
   18ed4:	b28d      	uxth	r5, r1
   18ed6:	fba5 560e 	umull	r5, r6, r5, lr
   18eda:	ea4f 1556 	mov.w	r5, r6, lsr #5
   18ede:	eb0b 0603 	add.w	r6, fp, r3
   18ee2:	fb05 111a 	mls	r1, r5, sl, r1
   18ee6:	f832 5015 	ldrh.w	r5, [r2, r5, lsl #1]
   18eea:	f1a3 0304 	sub.w	r3, r3, #4
   18eee:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   18ef2:	b289      	uxth	r1, r1
   18ef4:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   18ef8:	f8a6 1025 	strh.w	r1, [r6, #37]	; 0x25
   18efc:	d8e2      	bhi.n	18ec4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x4a>
   18efe:	f103 0127 	add.w	r1, r3, #39	; 0x27
   18f02:	4604      	mov	r4, r0
   18f04:	2c63      	cmp	r4, #99	; 0x63
   18f06:	f300 80b7 	bgt.w	19078 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1fe>
   18f0a:	4623      	mov	r3, r4
   18f0c:	2b0a      	cmp	r3, #10
   18f0e:	f2c0 80c3 	blt.w	19098 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x21e>
   18f12:	1e88      	subs	r0, r1, #2
   18f14:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   18f18:	aa03      	add	r2, sp, #12
   18f1a:	5211      	strh	r1, [r2, r0]
   18f1c:	e0c1      	b.n	190a2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x228>
   18f1e:	6800      	ldr	r0, [r0, #0]
   18f20:	f10d 0e0c 	add.w	lr, sp, #12
   18f24:	2381      	movs	r3, #129	; 0x81
   18f26:	2100      	movs	r1, #0
   18f28:	f000 020f 	and.w	r2, r0, #15
   18f2c:	f102 0457 	add.w	r4, r2, #87	; 0x57
   18f30:	2a0a      	cmp	r2, #10
   18f32:	bf38      	it	cc
   18f34:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   18f38:	eb0e 0203 	add.w	r2, lr, r3
   18f3c:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   18f40:	f802 4c02 	strb.w	r4, [r2, #-2]
   18f44:	d071      	beq.n	1902a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   18f46:	0904      	lsrs	r4, r0, #4
   18f48:	f004 040f 	and.w	r4, r4, #15
   18f4c:	f104 0557 	add.w	r5, r4, #87	; 0x57
   18f50:	2c0a      	cmp	r4, #10
   18f52:	bf38      	it	cc
   18f54:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   18f58:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   18f5c:	f802 5c03 	strb.w	r5, [r2, #-3]
   18f60:	d079      	beq.n	19056 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   18f62:	0a04      	lsrs	r4, r0, #8
   18f64:	f004 040f 	and.w	r4, r4, #15
   18f68:	f104 0557 	add.w	r5, r4, #87	; 0x57
   18f6c:	2c0a      	cmp	r4, #10
   18f6e:	bf38      	it	cc
   18f70:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   18f74:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   18f78:	f802 5c04 	strb.w	r5, [r2, #-4]
   18f7c:	d073      	beq.n	19066 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   18f7e:	0b04      	lsrs	r4, r0, #12
   18f80:	3b04      	subs	r3, #4
   18f82:	f004 040f 	and.w	r4, r4, #15
   18f86:	f104 0557 	add.w	r5, r4, #87	; 0x57
   18f8a:	2c0a      	cmp	r4, #10
   18f8c:	bf38      	it	cc
   18f8e:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   18f92:	f802 5c05 	strb.w	r5, [r2, #-5]
   18f96:	0c02      	lsrs	r2, r0, #16
   18f98:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   18f9c:	4610      	mov	r0, r2
   18f9e:	d1c3      	bne.n	18f28 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xae>
   18fa0:	e03f      	b.n	19022 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1a8>
   18fa2:	f10d 0e0c 	add.w	lr, sp, #12
   18fa6:	2381      	movs	r3, #129	; 0x81
   18fa8:	2100      	movs	r1, #0
   18faa:	f004 000f 	and.w	r0, r4, #15
   18fae:	eb0e 0203 	add.w	r2, lr, r3
   18fb2:	f100 0537 	add.w	r5, r0, #55	; 0x37
   18fb6:	280a      	cmp	r0, #10
   18fb8:	bf38      	it	cc
   18fba:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   18fbe:	ebb1 1f14 	cmp.w	r1, r4, lsr #4
   18fc2:	f802 5c02 	strb.w	r5, [r2, #-2]
   18fc6:	d030      	beq.n	1902a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   18fc8:	0920      	lsrs	r0, r4, #4
   18fca:	f000 000f 	and.w	r0, r0, #15
   18fce:	f100 0537 	add.w	r5, r0, #55	; 0x37
   18fd2:	280a      	cmp	r0, #10
   18fd4:	bf38      	it	cc
   18fd6:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   18fda:	ebb1 2f14 	cmp.w	r1, r4, lsr #8
   18fde:	f802 5c03 	strb.w	r5, [r2, #-3]
   18fe2:	d038      	beq.n	19056 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   18fe4:	0a20      	lsrs	r0, r4, #8
   18fe6:	f000 000f 	and.w	r0, r0, #15
   18fea:	f100 0537 	add.w	r5, r0, #55	; 0x37
   18fee:	280a      	cmp	r0, #10
   18ff0:	bf38      	it	cc
   18ff2:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   18ff6:	ebb1 3f14 	cmp.w	r1, r4, lsr #12
   18ffa:	f802 5c04 	strb.w	r5, [r2, #-4]
   18ffe:	d032      	beq.n	19066 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   19000:	0b20      	lsrs	r0, r4, #12
   19002:	3b04      	subs	r3, #4
   19004:	f000 000f 	and.w	r0, r0, #15
   19008:	f100 0537 	add.w	r5, r0, #55	; 0x37
   1900c:	280a      	cmp	r0, #10
   1900e:	bf38      	it	cc
   19010:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   19014:	0c20      	lsrs	r0, r4, #16
   19016:	ebb1 4f14 	cmp.w	r1, r4, lsr #16
   1901a:	4604      	mov	r4, r0
   1901c:	f802 5c05 	strb.w	r5, [r2, #-5]
   19020:	d1c3      	bne.n	18faa <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x130>
   19022:	1e58      	subs	r0, r3, #1
   19024:	2881      	cmp	r0, #129	; 0x81
   19026:	d305      	bcc.n	19034 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   19028:	e019      	b.n	1905e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   1902a:	1e59      	subs	r1, r3, #1
   1902c:	1e98      	subs	r0, r3, #2
   1902e:	460b      	mov	r3, r1
   19030:	2881      	cmp	r0, #129	; 0x81
   19032:	d214      	bcs.n	1905e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   19034:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   19038:	f241 523d 	movw	r2, #5437	; 0x153d
   1903c:	4470      	add	r0, lr
   1903e:	f2c0 0202 	movt	r2, #2
   19042:	e9cd 0100 	strd	r0, r1, [sp]
   19046:	4660      	mov	r0, ip
   19048:	2101      	movs	r1, #1
   1904a:	2302      	movs	r3, #2
   1904c:	f7ff f864 	bl	18118 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   19050:	b023      	add	sp, #140	; 0x8c
   19052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19056:	1ed8      	subs	r0, r3, #3
   19058:	3b02      	subs	r3, #2
   1905a:	2881      	cmp	r0, #129	; 0x81
   1905c:	d3ea      	bcc.n	19034 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   1905e:	2180      	movs	r1, #128	; 0x80
   19060:	f7ff fbf7 	bl	18852 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   19064:	defe      	udf	#254	; 0xfe
   19066:	1f18      	subs	r0, r3, #4
   19068:	3b03      	subs	r3, #3
   1906a:	2881      	cmp	r0, #129	; 0x81
   1906c:	d3e2      	bcc.n	19034 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   1906e:	e7f6      	b.n	1905e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   19070:	2127      	movs	r1, #39	; 0x27
   19072:	2c63      	cmp	r4, #99	; 0x63
   19074:	f77f af49 	ble.w	18f0a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x90>
   19078:	b2a0      	uxth	r0, r4
   1907a:	3902      	subs	r1, #2
   1907c:	fba0 030e 	umull	r0, r3, r0, lr
   19080:	af03      	add	r7, sp, #12
   19082:	2064      	movs	r0, #100	; 0x64
   19084:	095b      	lsrs	r3, r3, #5
   19086:	fb03 4010 	mls	r0, r3, r0, r4
   1908a:	b280      	uxth	r0, r0
   1908c:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   19090:	5278      	strh	r0, [r7, r1]
   19092:	2b0a      	cmp	r3, #10
   19094:	f6bf af3d 	bge.w	18f12 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x98>
   19098:	1e48      	subs	r0, r1, #1
   1909a:	aa03      	add	r2, sp, #12
   1909c:	f103 0130 	add.w	r1, r3, #48	; 0x30
   190a0:	5411      	strb	r1, [r2, r0]
   190a2:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   190a6:	aa03      	add	r2, sp, #12
   190a8:	4410      	add	r0, r2
   190aa:	f241 3204 	movw	r2, #4868	; 0x1304
   190ae:	e9cd 0100 	strd	r0, r1, [sp]
   190b2:	f2c0 0202 	movt	r2, #2
   190b6:	4660      	mov	r0, ip
   190b8:	2101      	movs	r1, #1
   190ba:	2300      	movs	r3, #0
   190bc:	f7ff f82c 	bl	18118 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   190c0:	b023      	add	sp, #140	; 0x8c
   190c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000190c6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>:
   190c6:	b580      	push	{r7, lr}
   190c8:	b0a2      	sub	sp, #136	; 0x88
   190ca:	7802      	ldrb	r2, [r0, #0]
   190cc:	468c      	mov	ip, r1
   190ce:	f002 030f 	and.w	r3, r2, #15
   190d2:	f103 0057 	add.w	r0, r3, #87	; 0x57
   190d6:	2b0a      	cmp	r3, #10
   190d8:	bf38      	it	cc
   190da:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   190de:	2300      	movs	r3, #0
   190e0:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   190e4:	d00b      	beq.n	190fe <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x38>
   190e6:	0913      	lsrs	r3, r2, #4
   190e8:	f103 0157 	add.w	r1, r3, #87	; 0x57
   190ec:	2aa0      	cmp	r2, #160	; 0xa0
   190ee:	bf38      	it	cc
   190f0:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   190f4:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   190f8:	227e      	movs	r2, #126	; 0x7e
   190fa:	2302      	movs	r3, #2
   190fc:	e001      	b.n	19102 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x3c>
   190fe:	227f      	movs	r2, #127	; 0x7f
   19100:	2301      	movs	r3, #1
   19102:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   19106:	a802      	add	r0, sp, #8
   19108:	4410      	add	r0, r2
   1910a:	f241 523d 	movw	r2, #5437	; 0x153d
   1910e:	e9cd 0300 	strd	r0, r3, [sp]
   19112:	f2c0 0202 	movt	r2, #2
   19116:	4660      	mov	r0, ip
   19118:	2101      	movs	r1, #1
   1911a:	2302      	movs	r3, #2
   1911c:	f7fe fffc 	bl	18118 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   19120:	b022      	add	sp, #136	; 0x88
   19122:	bd80      	pop	{r7, pc}

00019124 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>:
   19124:	b580      	push	{r7, lr}
   19126:	b0a2      	sub	sp, #136	; 0x88
   19128:	7802      	ldrb	r2, [r0, #0]
   1912a:	468c      	mov	ip, r1
   1912c:	f002 030f 	and.w	r3, r2, #15
   19130:	f103 0037 	add.w	r0, r3, #55	; 0x37
   19134:	2b0a      	cmp	r3, #10
   19136:	bf38      	it	cc
   19138:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   1913c:	2300      	movs	r3, #0
   1913e:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   19142:	d00b      	beq.n	1915c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x38>
   19144:	0913      	lsrs	r3, r2, #4
   19146:	f103 0137 	add.w	r1, r3, #55	; 0x37
   1914a:	2aa0      	cmp	r2, #160	; 0xa0
   1914c:	bf38      	it	cc
   1914e:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   19152:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   19156:	227e      	movs	r2, #126	; 0x7e
   19158:	2302      	movs	r3, #2
   1915a:	e001      	b.n	19160 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x3c>
   1915c:	227f      	movs	r2, #127	; 0x7f
   1915e:	2301      	movs	r3, #1
   19160:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   19164:	a802      	add	r0, sp, #8
   19166:	4410      	add	r0, r2
   19168:	f241 523d 	movw	r2, #5437	; 0x153d
   1916c:	e9cd 0300 	strd	r0, r3, [sp]
   19170:	f2c0 0202 	movt	r2, #2
   19174:	4660      	mov	r0, ip
   19176:	2101      	movs	r1, #1
   19178:	2302      	movs	r3, #2
   1917a:	f7fe ffcd 	bl	18118 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1917e:	b022      	add	sp, #136	; 0x88
   19180:	bd80      	pop	{r7, pc}

00019182 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E>:
   19182:	b580      	push	{r7, lr}
   19184:	b0a2      	sub	sp, #136	; 0x88
   19186:	8800      	ldrh	r0, [r0, #0]
   19188:	468c      	mov	ip, r1
   1918a:	f000 020f 	and.w	r2, r0, #15
   1918e:	f102 0357 	add.w	r3, r2, #87	; 0x57
   19192:	2a0a      	cmp	r2, #10
   19194:	bf38      	it	cc
   19196:	f102 0330 	addcc.w	r3, r2, #48	; 0x30
   1919a:	2200      	movs	r2, #0
   1919c:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
   191a0:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   191a4:	d02a      	beq.n	191fc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x7a>
   191a6:	0903      	lsrs	r3, r0, #4
   191a8:	f003 030f 	and.w	r3, r3, #15
   191ac:	f103 0157 	add.w	r1, r3, #87	; 0x57
   191b0:	2b0a      	cmp	r3, #10
   191b2:	bf38      	it	cc
   191b4:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   191b8:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   191bc:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   191c0:	d031      	beq.n	19226 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xa4>
   191c2:	0a01      	lsrs	r1, r0, #8
   191c4:	f001 010f 	and.w	r1, r1, #15
   191c8:	f101 0257 	add.w	r2, r1, #87	; 0x57
   191cc:	290a      	cmp	r1, #10
   191ce:	bf38      	it	cc
   191d0:	f101 0230 	addcc.w	r2, r1, #48	; 0x30
   191d4:	2100      	movs	r1, #0
   191d6:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   191da:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   191de:	d027      	beq.n	19230 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xae>
   191e0:	0b00      	lsrs	r0, r0, #12
   191e2:	f100 0157 	add.w	r1, r0, #87	; 0x57
   191e6:	280a      	cmp	r0, #10
   191e8:	bf38      	it	cc
   191ea:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   191ee:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
   191f2:	227d      	movs	r2, #125	; 0x7d
   191f4:	207c      	movs	r0, #124	; 0x7c
   191f6:	2881      	cmp	r0, #129	; 0x81
   191f8:	d304      	bcc.n	19204 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   191fa:	e01d      	b.n	19238 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   191fc:	2280      	movs	r2, #128	; 0x80
   191fe:	207f      	movs	r0, #127	; 0x7f
   19200:	2881      	cmp	r0, #129	; 0x81
   19202:	d219      	bcs.n	19238 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   19204:	f1c2 0281 	rsb	r2, r2, #129	; 0x81
   19208:	ab02      	add	r3, sp, #8
   1920a:	4418      	add	r0, r3
   1920c:	2101      	movs	r1, #1
   1920e:	e9cd 0200 	strd	r0, r2, [sp]
   19212:	f241 523d 	movw	r2, #5437	; 0x153d
   19216:	f2c0 0202 	movt	r2, #2
   1921a:	4660      	mov	r0, ip
   1921c:	2302      	movs	r3, #2
   1921e:	f7fe ff7b 	bl	18118 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   19222:	b022      	add	sp, #136	; 0x88
   19224:	bd80      	pop	{r7, pc}
   19226:	207e      	movs	r0, #126	; 0x7e
   19228:	227f      	movs	r2, #127	; 0x7f
   1922a:	2881      	cmp	r0, #129	; 0x81
   1922c:	d3ea      	bcc.n	19204 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   1922e:	e003      	b.n	19238 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   19230:	207d      	movs	r0, #125	; 0x7d
   19232:	227e      	movs	r2, #126	; 0x7e
   19234:	2881      	cmp	r0, #129	; 0x81
   19236:	d3e5      	bcc.n	19204 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   19238:	2180      	movs	r1, #128	; 0x80
   1923a:	f7ff fb0a 	bl	18852 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   1923e:	defe      	udf	#254	; 0xfe

00019240 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE>:
   19240:	b580      	push	{r7, lr}
   19242:	b0a2      	sub	sp, #136	; 0x88
   19244:	8800      	ldrh	r0, [r0, #0]
   19246:	468c      	mov	ip, r1
   19248:	f000 020f 	and.w	r2, r0, #15
   1924c:	f102 0337 	add.w	r3, r2, #55	; 0x37
   19250:	2a0a      	cmp	r2, #10
   19252:	bf38      	it	cc
   19254:	f102 0330 	addcc.w	r3, r2, #48	; 0x30
   19258:	2200      	movs	r2, #0
   1925a:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
   1925e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   19262:	d02a      	beq.n	192ba <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x7a>
   19264:	0903      	lsrs	r3, r0, #4
   19266:	f003 030f 	and.w	r3, r3, #15
   1926a:	f103 0137 	add.w	r1, r3, #55	; 0x37
   1926e:	2b0a      	cmp	r3, #10
   19270:	bf38      	it	cc
   19272:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   19276:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   1927a:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   1927e:	d031      	beq.n	192e4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xa4>
   19280:	0a01      	lsrs	r1, r0, #8
   19282:	f001 010f 	and.w	r1, r1, #15
   19286:	f101 0237 	add.w	r2, r1, #55	; 0x37
   1928a:	290a      	cmp	r1, #10
   1928c:	bf38      	it	cc
   1928e:	f101 0230 	addcc.w	r2, r1, #48	; 0x30
   19292:	2100      	movs	r1, #0
   19294:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   19298:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   1929c:	d027      	beq.n	192ee <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xae>
   1929e:	0b00      	lsrs	r0, r0, #12
   192a0:	f100 0137 	add.w	r1, r0, #55	; 0x37
   192a4:	280a      	cmp	r0, #10
   192a6:	bf38      	it	cc
   192a8:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   192ac:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
   192b0:	227d      	movs	r2, #125	; 0x7d
   192b2:	207c      	movs	r0, #124	; 0x7c
   192b4:	2881      	cmp	r0, #129	; 0x81
   192b6:	d304      	bcc.n	192c2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   192b8:	e01d      	b.n	192f6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   192ba:	2280      	movs	r2, #128	; 0x80
   192bc:	207f      	movs	r0, #127	; 0x7f
   192be:	2881      	cmp	r0, #129	; 0x81
   192c0:	d219      	bcs.n	192f6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   192c2:	f1c2 0281 	rsb	r2, r2, #129	; 0x81
   192c6:	ab02      	add	r3, sp, #8
   192c8:	4418      	add	r0, r3
   192ca:	2101      	movs	r1, #1
   192cc:	e9cd 0200 	strd	r0, r2, [sp]
   192d0:	f241 523d 	movw	r2, #5437	; 0x153d
   192d4:	f2c0 0202 	movt	r2, #2
   192d8:	4660      	mov	r0, ip
   192da:	2302      	movs	r3, #2
   192dc:	f7fe ff1c 	bl	18118 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   192e0:	b022      	add	sp, #136	; 0x88
   192e2:	bd80      	pop	{r7, pc}
   192e4:	207e      	movs	r0, #126	; 0x7e
   192e6:	227f      	movs	r2, #127	; 0x7f
   192e8:	2881      	cmp	r0, #129	; 0x81
   192ea:	d3ea      	bcc.n	192c2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   192ec:	e003      	b.n	192f6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   192ee:	207d      	movs	r0, #125	; 0x7d
   192f0:	227e      	movs	r2, #126	; 0x7e
   192f2:	2881      	cmp	r0, #129	; 0x81
   192f4:	d3e5      	bcc.n	192c2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   192f6:	2180      	movs	r1, #128	; 0x80
   192f8:	f7ff faab 	bl	18852 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   192fc:	defe      	udf	#254	; 0xfe

000192fe <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>:
   192fe:	b5b0      	push	{r4, r5, r7, lr}
   19300:	b0a2      	sub	sp, #136	; 0x88
   19302:	6800      	ldr	r0, [r0, #0]
   19304:	f10d 0e08 	add.w	lr, sp, #8
   19308:	468c      	mov	ip, r1
   1930a:	2381      	movs	r3, #129	; 0x81
   1930c:	2100      	movs	r1, #0
   1930e:	f000 020f 	and.w	r2, r0, #15
   19312:	f102 0457 	add.w	r4, r2, #87	; 0x57
   19316:	2a0a      	cmp	r2, #10
   19318:	bf38      	it	cc
   1931a:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   1931e:	eb0e 0203 	add.w	r2, lr, r3
   19322:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   19326:	f802 4c02 	strb.w	r4, [r2, #-2]
   1932a:	d030      	beq.n	1938e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x90>
   1932c:	0904      	lsrs	r4, r0, #4
   1932e:	f004 040f 	and.w	r4, r4, #15
   19332:	f104 0557 	add.w	r5, r4, #87	; 0x57
   19336:	2c0a      	cmp	r4, #10
   19338:	bf38      	it	cc
   1933a:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   1933e:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   19342:	f802 5c03 	strb.w	r5, [r2, #-3]
   19346:	d028      	beq.n	1939a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x9c>
   19348:	0a04      	lsrs	r4, r0, #8
   1934a:	f004 040f 	and.w	r4, r4, #15
   1934e:	f104 0557 	add.w	r5, r4, #87	; 0x57
   19352:	2c0a      	cmp	r4, #10
   19354:	bf38      	it	cc
   19356:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   1935a:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   1935e:	f802 5c04 	strb.w	r5, [r2, #-4]
   19362:	d01f      	beq.n	193a4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xa6>
   19364:	0b04      	lsrs	r4, r0, #12
   19366:	3b04      	subs	r3, #4
   19368:	f004 040f 	and.w	r4, r4, #15
   1936c:	f104 0557 	add.w	r5, r4, #87	; 0x57
   19370:	2c0a      	cmp	r4, #10
   19372:	bf38      	it	cc
   19374:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   19378:	f802 5c05 	strb.w	r5, [r2, #-5]
   1937c:	0c02      	lsrs	r2, r0, #16
   1937e:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   19382:	4610      	mov	r0, r2
   19384:	d1c3      	bne.n	1930e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x10>
   19386:	1e58      	subs	r0, r3, #1
   19388:	2881      	cmp	r0, #129	; 0x81
   1938a:	d30f      	bcc.n	193ac <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   1938c:	e01e      	b.n	193cc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   1938e:	1e59      	subs	r1, r3, #1
   19390:	1e98      	subs	r0, r3, #2
   19392:	460b      	mov	r3, r1
   19394:	2881      	cmp	r0, #129	; 0x81
   19396:	d309      	bcc.n	193ac <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   19398:	e018      	b.n	193cc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   1939a:	1ed8      	subs	r0, r3, #3
   1939c:	3b02      	subs	r3, #2
   1939e:	2881      	cmp	r0, #129	; 0x81
   193a0:	d304      	bcc.n	193ac <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   193a2:	e013      	b.n	193cc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   193a4:	1f18      	subs	r0, r3, #4
   193a6:	3b03      	subs	r3, #3
   193a8:	2881      	cmp	r0, #129	; 0x81
   193aa:	d20f      	bcs.n	193cc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   193ac:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   193b0:	f241 523d 	movw	r2, #5437	; 0x153d
   193b4:	4470      	add	r0, lr
   193b6:	f2c0 0202 	movt	r2, #2
   193ba:	e9cd 0100 	strd	r0, r1, [sp]
   193be:	4660      	mov	r0, ip
   193c0:	2101      	movs	r1, #1
   193c2:	2302      	movs	r3, #2
   193c4:	f7fe fea8 	bl	18118 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   193c8:	b022      	add	sp, #136	; 0x88
   193ca:	bdb0      	pop	{r4, r5, r7, pc}
   193cc:	2180      	movs	r1, #128	; 0x80
   193ce:	f7ff fa40 	bl	18852 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   193d2:	defe      	udf	#254	; 0xfe

000193d4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>:
   193d4:	b5b0      	push	{r4, r5, r7, lr}
   193d6:	b0a2      	sub	sp, #136	; 0x88
   193d8:	6800      	ldr	r0, [r0, #0]
   193da:	f10d 0e08 	add.w	lr, sp, #8
   193de:	468c      	mov	ip, r1
   193e0:	2381      	movs	r3, #129	; 0x81
   193e2:	2100      	movs	r1, #0
   193e4:	f000 020f 	and.w	r2, r0, #15
   193e8:	f102 0437 	add.w	r4, r2, #55	; 0x37
   193ec:	2a0a      	cmp	r2, #10
   193ee:	bf38      	it	cc
   193f0:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   193f4:	eb0e 0203 	add.w	r2, lr, r3
   193f8:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   193fc:	f802 4c02 	strb.w	r4, [r2, #-2]
   19400:	d030      	beq.n	19464 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x90>
   19402:	0904      	lsrs	r4, r0, #4
   19404:	f004 040f 	and.w	r4, r4, #15
   19408:	f104 0537 	add.w	r5, r4, #55	; 0x37
   1940c:	2c0a      	cmp	r4, #10
   1940e:	bf38      	it	cc
   19410:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   19414:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   19418:	f802 5c03 	strb.w	r5, [r2, #-3]
   1941c:	d028      	beq.n	19470 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x9c>
   1941e:	0a04      	lsrs	r4, r0, #8
   19420:	f004 040f 	and.w	r4, r4, #15
   19424:	f104 0537 	add.w	r5, r4, #55	; 0x37
   19428:	2c0a      	cmp	r4, #10
   1942a:	bf38      	it	cc
   1942c:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   19430:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   19434:	f802 5c04 	strb.w	r5, [r2, #-4]
   19438:	d01f      	beq.n	1947a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xa6>
   1943a:	0b04      	lsrs	r4, r0, #12
   1943c:	3b04      	subs	r3, #4
   1943e:	f004 040f 	and.w	r4, r4, #15
   19442:	f104 0537 	add.w	r5, r4, #55	; 0x37
   19446:	2c0a      	cmp	r4, #10
   19448:	bf38      	it	cc
   1944a:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   1944e:	f802 5c05 	strb.w	r5, [r2, #-5]
   19452:	0c02      	lsrs	r2, r0, #16
   19454:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   19458:	4610      	mov	r0, r2
   1945a:	d1c3      	bne.n	193e4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x10>
   1945c:	1e58      	subs	r0, r3, #1
   1945e:	2881      	cmp	r0, #129	; 0x81
   19460:	d30f      	bcc.n	19482 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   19462:	e01e      	b.n	194a2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   19464:	1e59      	subs	r1, r3, #1
   19466:	1e98      	subs	r0, r3, #2
   19468:	460b      	mov	r3, r1
   1946a:	2881      	cmp	r0, #129	; 0x81
   1946c:	d309      	bcc.n	19482 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   1946e:	e018      	b.n	194a2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   19470:	1ed8      	subs	r0, r3, #3
   19472:	3b02      	subs	r3, #2
   19474:	2881      	cmp	r0, #129	; 0x81
   19476:	d304      	bcc.n	19482 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   19478:	e013      	b.n	194a2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   1947a:	1f18      	subs	r0, r3, #4
   1947c:	3b03      	subs	r3, #3
   1947e:	2881      	cmp	r0, #129	; 0x81
   19480:	d20f      	bcs.n	194a2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   19482:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   19486:	f241 523d 	movw	r2, #5437	; 0x153d
   1948a:	4470      	add	r0, lr
   1948c:	f2c0 0202 	movt	r2, #2
   19490:	e9cd 0100 	strd	r0, r1, [sp]
   19494:	4660      	mov	r0, ip
   19496:	2101      	movs	r1, #1
   19498:	2302      	movs	r3, #2
   1949a:	f7fe fe3d 	bl	18118 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1949e:	b022      	add	sp, #136	; 0x88
   194a0:	bdb0      	pop	{r4, r5, r7, pc}
   194a2:	2180      	movs	r1, #128	; 0x80
   194a4:	f7ff f9d5 	bl	18852 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   194a8:	defe      	udf	#254	; 0xfe

000194aa <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>:
   194aa:	b580      	push	{r7, lr}
   194ac:	b08c      	sub	sp, #48	; 0x30
   194ae:	7802      	ldrb	r2, [r0, #0]
   194b0:	2a64      	cmp	r2, #100	; 0x64
   194b2:	d314      	bcc.n	194de <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x34>
   194b4:	f248 501f 	movw	r0, #34079	; 0x851f
   194b8:	f2c5 10eb 	movt	r0, #20971	; 0x51eb
   194bc:	fba2 0300 	umull	r0, r3, r2, r0
   194c0:	2064      	movs	r0, #100	; 0x64
   194c2:	095b      	lsrs	r3, r3, #5
   194c4:	fb03 2010 	mls	r0, r3, r0, r2
   194c8:	f241 523f 	movw	r2, #5439	; 0x153f
   194cc:	f2c0 0202 	movt	r2, #2
   194d0:	b2c0      	uxtb	r0, r0
   194d2:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   194d6:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   194da:	2024      	movs	r0, #36	; 0x24
   194dc:	e003      	b.n	194e6 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x3c>
   194de:	2a0a      	cmp	r2, #10
   194e0:	d206      	bcs.n	194f0 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x46>
   194e2:	2026      	movs	r0, #38	; 0x26
   194e4:	4613      	mov	r3, r2
   194e6:	f103 0230 	add.w	r2, r3, #48	; 0x30
   194ea:	ab02      	add	r3, sp, #8
   194ec:	541a      	strb	r2, [r3, r0]
   194ee:	e008      	b.n	19502 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x58>
   194f0:	f241 503f 	movw	r0, #5439	; 0x153f
   194f4:	f2c0 0002 	movt	r0, #2
   194f8:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
   194fc:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   19500:	2025      	movs	r0, #37	; 0x25
   19502:	f1c0 0227 	rsb	r2, r0, #39	; 0x27
   19506:	ab02      	add	r3, sp, #8
   19508:	4418      	add	r0, r3
   1950a:	2300      	movs	r3, #0
   1950c:	e9cd 0200 	strd	r0, r2, [sp]
   19510:	f241 3204 	movw	r2, #4868	; 0x1304
   19514:	4608      	mov	r0, r1
   19516:	f2c0 0202 	movt	r2, #2
   1951a:	2101      	movs	r1, #1
   1951c:	f7fe fdfc 	bl	18118 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   19520:	b00c      	add	sp, #48	; 0x30
   19522:	bd80      	pop	{r7, pc}

00019524 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E>:
   19524:	b580      	push	{r7, lr}
   19526:	b08c      	sub	sp, #48	; 0x30
   19528:	8800      	ldrh	r0, [r0, #0]
   1952a:	f242 720f 	movw	r2, #9999	; 0x270f
   1952e:	468e      	mov	lr, r1
   19530:	4290      	cmp	r0, r2
   19532:	d924      	bls.n	1957e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x5a>
   19534:	f241 7259 	movw	r2, #5977	; 0x1759
   19538:	f248 511f 	movw	r1, #34079	; 0x851f
   1953c:	f2cd 12b7 	movt	r2, #53687	; 0xd1b7
   19540:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
   19544:	fba0 2302 	umull	r2, r3, r0, r2
   19548:	0b5a      	lsrs	r2, r3, #13
   1954a:	f242 7310 	movw	r3, #10000	; 0x2710
   1954e:	fb02 0013 	mls	r0, r2, r3, r0
   19552:	b283      	uxth	r3, r0
   19554:	fba3 1301 	umull	r1, r3, r3, r1
   19558:	0959      	lsrs	r1, r3, #5
   1955a:	2364      	movs	r3, #100	; 0x64
   1955c:	fb01 0013 	mls	r0, r1, r3, r0
   19560:	f241 533f 	movw	r3, #5439	; 0x153f
   19564:	f2c0 0302 	movt	r3, #2
   19568:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   1956c:	f8ad 102b 	strh.w	r1, [sp, #43]	; 0x2b
   19570:	b280      	uxth	r0, r0
   19572:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   19576:	2323      	movs	r3, #35	; 0x23
   19578:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   1957c:	e024      	b.n	195c8 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xa4>
   1957e:	f241 5c3f 	movw	ip, #5439	; 0x153f
   19582:	2863      	cmp	r0, #99	; 0x63
   19584:	f2c0 0c02 	movt	ip, #2
   19588:	d919      	bls.n	195be <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x9a>
   1958a:	f248 511f 	movw	r1, #34079	; 0x851f
   1958e:	2325      	movs	r3, #37	; 0x25
   19590:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
   19594:	fba0 1201 	umull	r1, r2, r0, r1
   19598:	0951      	lsrs	r1, r2, #5
   1959a:	2264      	movs	r2, #100	; 0x64
   1959c:	fb01 0012 	mls	r0, r1, r2, r0
   195a0:	b280      	uxth	r0, r0
   195a2:	f83c 0010 	ldrh.w	r0, [ip, r0, lsl #1]
   195a6:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   195aa:	4608      	mov	r0, r1
   195ac:	b282      	uxth	r2, r0
   195ae:	2a0a      	cmp	r2, #10
   195b0:	d309      	bcc.n	195c6 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xa2>
   195b2:	f83c 1012 	ldrh.w	r1, [ip, r2, lsl #1]
   195b6:	1e98      	subs	r0, r3, #2
   195b8:	aa02      	add	r2, sp, #8
   195ba:	5211      	strh	r1, [r2, r0]
   195bc:	e009      	b.n	195d2 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xae>
   195be:	2327      	movs	r3, #39	; 0x27
   195c0:	b282      	uxth	r2, r0
   195c2:	2a0a      	cmp	r2, #10
   195c4:	d2f5      	bcs.n	195b2 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x8e>
   195c6:	4602      	mov	r2, r0
   195c8:	1e58      	subs	r0, r3, #1
   195ca:	f102 0130 	add.w	r1, r2, #48	; 0x30
   195ce:	aa02      	add	r2, sp, #8
   195d0:	5411      	strb	r1, [r2, r0]
   195d2:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   195d6:	aa02      	add	r2, sp, #8
   195d8:	4410      	add	r0, r2
   195da:	f241 3204 	movw	r2, #4868	; 0x1304
   195de:	e9cd 0100 	strd	r0, r1, [sp]
   195e2:	f2c0 0202 	movt	r2, #2
   195e6:	4670      	mov	r0, lr
   195e8:	2101      	movs	r1, #1
   195ea:	2300      	movs	r3, #0
   195ec:	f7fe fd94 	bl	18118 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   195f0:	b00c      	add	sp, #48	; 0x30
   195f2:	bd80      	pop	{r7, pc}

000195f4 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>:
   195f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   195f8:	b08f      	sub	sp, #60	; 0x3c
   195fa:	6805      	ldr	r5, [r0, #0]
   195fc:	f248 581f 	movw	r8, #34079	; 0x851f
   19600:	460e      	mov	r6, r1
   19602:	f241 513f 	movw	r1, #5439	; 0x153f
   19606:	2d00      	cmp	r5, #0
   19608:	f242 7910 	movw	r9, #10000	; 0x2710
   1960c:	462b      	mov	r3, r5
   1960e:	f2c5 18eb 	movt	r8, #20971	; 0x51eb
   19612:	bf48      	it	mi
   19614:	426b      	negmi	r3, r5
   19616:	454b      	cmp	r3, r9
   19618:	f2c0 0102 	movt	r1, #2
   1961c:	d33a      	bcc.n	19694 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa0>
   1961e:	f241 7a59 	movw	sl, #5977	; 0x1759
   19622:	f24e 00ff 	movw	r0, #57599	; 0xe0ff
   19626:	f10d 0e14 	add.w	lr, sp, #20
   1962a:	2400      	movs	r4, #0
   1962c:	f2cd 1ab7 	movt	sl, #53687	; 0xd1b7
   19630:	f04f 0b64 	mov.w	fp, #100	; 0x64
   19634:	f2c0 50f5 	movt	r0, #1525	; 0x5f5
   19638:	e9cd 5603 	strd	r5, r6, [sp, #12]
   1963c:	fba3 250a 	umull	r2, r5, r3, sl
   19640:	eb0e 0704 	add.w	r7, lr, r4
   19644:	3c04      	subs	r4, #4
   19646:	4283      	cmp	r3, r0
   19648:	ea4f 3255 	mov.w	r2, r5, lsr #13
   1964c:	fb02 3519 	mls	r5, r2, r9, r3
   19650:	4613      	mov	r3, r2
   19652:	b2ae      	uxth	r6, r5
   19654:	fba6 6c08 	umull	r6, ip, r6, r8
   19658:	ea4f 165c 	mov.w	r6, ip, lsr #5
   1965c:	fb06 551b 	mls	r5, r6, fp, r5
   19660:	f831 6016 	ldrh.w	r6, [r1, r6, lsl #1]
   19664:	f8a7 6023 	strh.w	r6, [r7, #35]	; 0x23
   19668:	b2ad      	uxth	r5, r5
   1966a:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
   1966e:	f8a7 5025 	strh.w	r5, [r7, #37]	; 0x25
   19672:	d8e3      	bhi.n	1963c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x48>
   19674:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
   19678:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1967c:	4613      	mov	r3, r2
   1967e:	2b63      	cmp	r3, #99	; 0x63
   19680:	dc0b      	bgt.n	1969a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa6>
   19682:	461a      	mov	r2, r3
   19684:	2a0a      	cmp	r2, #10
   19686:	db17      	blt.n	196b8 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xc4>
   19688:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
   1968c:	3802      	subs	r0, #2
   1968e:	aa05      	add	r2, sp, #20
   19690:	5211      	strh	r1, [r2, r0]
   19692:	e016      	b.n	196c2 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xce>
   19694:	2027      	movs	r0, #39	; 0x27
   19696:	2b63      	cmp	r3, #99	; 0x63
   19698:	ddf3      	ble.n	19682 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x8e>
   1969a:	b29a      	uxth	r2, r3
   1969c:	3802      	subs	r0, #2
   1969e:	fba2 2708 	umull	r2, r7, r2, r8
   196a2:	097a      	lsrs	r2, r7, #5
   196a4:	2764      	movs	r7, #100	; 0x64
   196a6:	fb02 3317 	mls	r3, r2, r7, r3
   196aa:	af05      	add	r7, sp, #20
   196ac:	b29b      	uxth	r3, r3
   196ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   196b2:	523b      	strh	r3, [r7, r0]
   196b4:	2a0a      	cmp	r2, #10
   196b6:	dae7      	bge.n	19688 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x94>
   196b8:	3801      	subs	r0, #1
   196ba:	f102 0130 	add.w	r1, r2, #48	; 0x30
   196be:	aa05      	add	r2, sp, #20
   196c0:	5411      	strb	r1, [r2, r0]
   196c2:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   196c6:	aa05      	add	r2, sp, #20
   196c8:	4410      	add	r0, r2
   196ca:	f241 3204 	movw	r2, #4868	; 0x1304
   196ce:	e9cd 0100 	strd	r0, r1, [sp]
   196d2:	43e8      	mvns	r0, r5
   196d4:	0fc1      	lsrs	r1, r0, #31
   196d6:	f2c0 0202 	movt	r2, #2
   196da:	4630      	mov	r0, r6
   196dc:	2300      	movs	r3, #0
   196de:	f7fe fd1b 	bl	18118 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   196e2:	b00f      	add	sp, #60	; 0x3c
   196e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000196e8 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>:
   196e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   196ec:	b08d      	sub	sp, #52	; 0x34
   196ee:	468c      	mov	ip, r1
   196f0:	6801      	ldr	r1, [r0, #0]
   196f2:	f248 5e1f 	movw	lr, #34079	; 0x851f
   196f6:	f241 503f 	movw	r0, #5439	; 0x153f
   196fa:	f242 7810 	movw	r8, #10000	; 0x2710
   196fe:	4541      	cmp	r1, r8
   19700:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   19704:	f2c0 0002 	movt	r0, #2
   19708:	d337      	bcc.n	1977a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x92>
   1970a:	f241 7959 	movw	r9, #5977	; 0x1759
   1970e:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   19712:	f10d 0b0c 	add.w	fp, sp, #12
   19716:	2300      	movs	r3, #0
   19718:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   1971c:	f04f 0a64 	mov.w	sl, #100	; 0x64
   19720:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   19724:	fba1 2409 	umull	r2, r4, r1, r9
   19728:	42b9      	cmp	r1, r7
   1972a:	ea4f 3254 	mov.w	r2, r4, lsr #13
   1972e:	fb02 1418 	mls	r4, r2, r8, r1
   19732:	4611      	mov	r1, r2
   19734:	b2a5      	uxth	r5, r4
   19736:	fba5 560e 	umull	r5, r6, r5, lr
   1973a:	ea4f 1556 	mov.w	r5, r6, lsr #5
   1973e:	eb0b 0603 	add.w	r6, fp, r3
   19742:	fb05 441a 	mls	r4, r5, sl, r4
   19746:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   1974a:	f1a3 0304 	sub.w	r3, r3, #4
   1974e:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   19752:	b2a4      	uxth	r4, r4
   19754:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   19758:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   1975c:	d8e2      	bhi.n	19724 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x3c>
   1975e:	f103 0427 	add.w	r4, r3, #39	; 0x27
   19762:	4611      	mov	r1, r2
   19764:	2963      	cmp	r1, #99	; 0x63
   19766:	dc0b      	bgt.n	19780 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x98>
   19768:	460b      	mov	r3, r1
   1976a:	2b0a      	cmp	r3, #10
   1976c:	db17      	blt.n	1979e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xb6>
   1976e:	1ea1      	subs	r1, r4, #2
   19770:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   19774:	aa03      	add	r2, sp, #12
   19776:	5250      	strh	r0, [r2, r1]
   19778:	e016      	b.n	197a8 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xc0>
   1977a:	2427      	movs	r4, #39	; 0x27
   1977c:	2963      	cmp	r1, #99	; 0x63
   1977e:	ddf3      	ble.n	19768 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x80>
   19780:	b28a      	uxth	r2, r1
   19782:	3c02      	subs	r4, #2
   19784:	fba2 230e 	umull	r2, r3, r2, lr
   19788:	2264      	movs	r2, #100	; 0x64
   1978a:	095b      	lsrs	r3, r3, #5
   1978c:	fb03 1112 	mls	r1, r3, r2, r1
   19790:	aa03      	add	r2, sp, #12
   19792:	b289      	uxth	r1, r1
   19794:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   19798:	5311      	strh	r1, [r2, r4]
   1979a:	2b0a      	cmp	r3, #10
   1979c:	dae7      	bge.n	1976e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x86>
   1979e:	1e61      	subs	r1, r4, #1
   197a0:	aa03      	add	r2, sp, #12
   197a2:	f103 0030 	add.w	r0, r3, #48	; 0x30
   197a6:	5450      	strb	r0, [r2, r1]
   197a8:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   197ac:	aa03      	add	r2, sp, #12
   197ae:	4411      	add	r1, r2
   197b0:	f241 3204 	movw	r2, #4868	; 0x1304
   197b4:	e9cd 1000 	strd	r1, r0, [sp]
   197b8:	f2c0 0202 	movt	r2, #2
   197bc:	4660      	mov	r0, ip
   197be:	2101      	movs	r1, #1
   197c0:	2300      	movs	r3, #0
   197c2:	f7fe fca9 	bl	18118 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   197c6:	b00d      	add	sp, #52	; 0x34
   197c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000197cc <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E>:
   197cc:	e9d0 2000 	ldrd	r2, r0, [r0]
   197d0:	68c3      	ldr	r3, [r0, #12]
   197d2:	4610      	mov	r0, r2
   197d4:	4718      	bx	r3

000197d6 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E>:
   197d6:	460b      	mov	r3, r1
   197d8:	e9d0 1200 	ldrd	r1, r2, [r0]
   197dc:	4618      	mov	r0, r3
   197de:	f7fe bde3 	b.w	183a8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>
	...

000197e4 <__semihost>:
	//    openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -f scripts/debug.ocd

	//  Warning: This code will trigger a breakpoint and hang unless a debugger is connected.
	//  That's how ARM Semihosting sends a command to the debugger to print a message.
	//  This code MUST be disabled on production devices.
    if (!log_enabled) return -1;
   197e4:	4b07      	ldr	r3, [pc, #28]	; (19804 <__semihost+0x20>)
   197e6:	781b      	ldrb	r3, [r3, #0]
   197e8:	b14b      	cbz	r3, 197fe <__semihost+0x1a>
static int __semihost(int command, void* message) {
   197ea:	b410      	push	{r4}
   197ec:	4602      	mov	r2, r0
   197ee:	460c      	mov	r4, r1
    __asm( 
   197f0:	4610      	mov	r0, r2
   197f2:	4621      	mov	r1, r4
   197f4:	beab      	bkpt	0x00ab
		[cmd] "r" (command), 
		[msg] "r" (message)
	:  //  Clobbered register list:
		"r0", "r1", "memory"
	);
	return 0;  //  TODO
   197f6:	2000      	movs	r0, #0
}
   197f8:	f85d 4b04 	ldr.w	r4, [sp], #4
   197fc:	4770      	bx	lr
    if (!log_enabled) return -1;
   197fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   19802:	4770      	bx	lr
   19804:	20000100 	.word	0x20000100

00019808 <debugger_connected>:
// #define SYS_RENAME (0xf)
// #define SYS_EXIT   (0x18)

static int debugger_connected(void) {
    //  Return non-zero if debugger is connected. From repos/apache-mynewt-core/hw/mcu/ambiq/apollo2/src/hal_system.c
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
   19808:	4b02      	ldr	r3, [pc, #8]	; (19814 <debugger_connected+0xc>)
   1980a:	6818      	ldr	r0, [r3, #0]
}
   1980c:	f000 0001 	and.w	r0, r0, #1
   19810:	4770      	bx	lr
   19812:	bf00      	nop
   19814:	e000edf0 	.word	0xe000edf0

00019818 <semihost_write>:
#endif  //  !DISABLE_SEMIHOSTING

// We normally set the file handle to 2 to write to the debugger's stderr output.
#define SEMIHOST_HANDLE 2

static int semihost_write(uint32_t fh, const unsigned char *buffer, unsigned int length) {
   19818:	b570      	push	{r4, r5, r6, lr}
   1981a:	b084      	sub	sp, #16
   1981c:	4606      	mov	r6, r0
   1981e:	460d      	mov	r5, r1
   19820:	4614      	mov	r4, r2
    //  Write "length" number of bytes from "buffer" to the debugger's file handle fh.
    //  We normally set fh=2 to write to the debugger's stderr output.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return 0;               //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    if (!debugger_connected()) { return 0; }  //  If debugger is not connected, quit.
   19822:	f7ff fff1 	bl	19808 <debugger_connected>
   19826:	4603      	mov	r3, r0
   19828:	b108      	cbz	r0, 1982e <semihost_write+0x16>
    if (length == 0) { return 0; }
   1982a:	b91c      	cbnz	r4, 19834 <semihost_write+0x1c>
   1982c:	2300      	movs	r3, #0
    args[0] = (uint32_t)fh;
    args[1] = (uint32_t)buffer;
    args[2] = (uint32_t)length;
    return __semihost(SYS_WRITE, args);
#endif  //  DISABLE_SEMIHOSTING
}
   1982e:	4618      	mov	r0, r3
   19830:	b004      	add	sp, #16
   19832:	bd70      	pop	{r4, r5, r6, pc}
    args[0] = (uint32_t)fh;
   19834:	9601      	str	r6, [sp, #4]
    args[1] = (uint32_t)buffer;
   19836:	9502      	str	r5, [sp, #8]
    args[2] = (uint32_t)length;
   19838:	9403      	str	r4, [sp, #12]
    return __semihost(SYS_WRITE, args);
   1983a:	a901      	add	r1, sp, #4
   1983c:	2005      	movs	r0, #5
   1983e:	f7ff ffd1 	bl	197e4 <__semihost>
   19842:	4603      	mov	r3, r0
   19844:	e7f3      	b.n	1982e <semihost_write+0x16>
	...

00019848 <console_flush>:

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
   19848:	b538      	push	{r3, r4, r5, lr}
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }       //  Skip if log not enabled.
   1984a:	4b0e      	ldr	r3, [pc, #56]	; (19884 <console_flush+0x3c>)
   1984c:	781b      	ldrb	r3, [r3, #0]
   1984e:	b1bb      	cbz	r3, 19880 <console_flush+0x38>
    if (!semihost_mbuf) { return; }     //  Buffer is empty, nothing to write.
   19850:	4b0d      	ldr	r3, [pc, #52]	; (19888 <console_flush+0x40>)
   19852:	681d      	ldr	r5, [r3, #0]
   19854:	b1a5      	cbz	r5, 19880 <console_flush+0x38>
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   19856:	4b0d      	ldr	r3, [pc, #52]	; (1988c <console_flush+0x44>)
   19858:	685b      	ldr	r3, [r3, #4]
   1985a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) { return; }   //  Don't flush if we are called during an interrupt.
   1985e:	b97b      	cbnz	r3, 19880 <console_flush+0x38>

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
   19860:	4b09      	ldr	r3, [pc, #36]	; (19888 <console_flush+0x40>)
   19862:	2200      	movs	r2, #0
   19864:	601a      	str	r2, [r3, #0]

    struct os_mbuf *m = old;
   19866:	462c      	mov	r4, r5
    while (m) {  //  For each mbuf in the chain...
   19868:	e005      	b.n	19876 <console_flush+0x2e>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
   1986a:	88e2      	ldrh	r2, [r4, #6]
   1986c:	6821      	ldr	r1, [r4, #0]
   1986e:	2002      	movs	r0, #2
   19870:	f7ff ffd2 	bl	19818 <semihost_write>
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
   19874:	68e4      	ldr	r4, [r4, #12]
    while (m) {  //  For each mbuf in the chain...
   19876:	2c00      	cmp	r4, #0
   19878:	d1f7      	bne.n	1986a <console_flush+0x22>
    }
    if (old) { os_mbuf_free_chain(old); }  //  Deallocate the old chain.
   1987a:	4628      	mov	r0, r5
   1987c:	f001 fbfc 	bl	1b078 <os_mbuf_free_chain>
}
   19880:	bd38      	pop	{r3, r4, r5, pc}
   19882:	bf00      	nop
   19884:	20000100 	.word	0x20000100
   19888:	20006f04 	.word	0x20006f04
   1988c:	e000ed00 	.word	0xe000ed00

00019890 <disable_buffer>:
void disable_buffer(void) { buffer_enabled = false; console_flush(); }  //  Disable buffering.
   19890:	b508      	push	{r3, lr}
   19892:	f7ff ffd9 	bl	19848 <console_flush>
   19896:	bd08      	pop	{r3, pc}

00019898 <console_buffer>:

void console_buffer(const char *buffer, unsigned int length) {
   19898:	b538      	push	{r3, r4, r5, lr}
    //  Append "length" number of bytes from "buffer" to the output buffer.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return;                 //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    int rc;
    if (!log_enabled) { return; }           //  Skip if log not enabled.
   1989a:	4b12      	ldr	r3, [pc, #72]	; (198e4 <console_buffer+0x4c>)
   1989c:	781b      	ldrb	r3, [r3, #0]
   1989e:	b903      	cbnz	r3, 198a2 <console_buffer+0xa>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
    //  Append the data to the mbuf chain.  This may increase the numbere of mbufs in the chain.
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    if (rc) { return; }  //  If out of memory, quit.
#endif  //  DISABLE_SEMIHOSTING
}
   198a0:	bd38      	pop	{r3, r4, r5, pc}
   198a2:	460d      	mov	r5, r1
   198a4:	4604      	mov	r4, r0
    if (!debugger_connected()) { return; }  //  If debugger is not connected, quit.
   198a6:	f7ff ffaf 	bl	19808 <debugger_connected>
   198aa:	2800      	cmp	r0, #0
   198ac:	d0f8      	beq.n	198a0 <console_buffer+0x8>
    if (!semihost_mbuf) {                   //  Allocate mbuf if not already allocated.
   198ae:	4b0e      	ldr	r3, [pc, #56]	; (198e8 <console_buffer+0x50>)
   198b0:	681b      	ldr	r3, [r3, #0]
   198b2:	b173      	cbz	r3, 198d2 <console_buffer+0x3a>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
   198b4:	4b0c      	ldr	r3, [pc, #48]	; (198e8 <console_buffer+0x50>)
   198b6:	6818      	ldr	r0, [r3, #0]
   198b8:	f001 fbf0 	bl	1b09c <os_mbuf_len>
   198bc:	4428      	add	r0, r5
   198be:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   198c2:	d2ed      	bcs.n	198a0 <console_buffer+0x8>
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
   198c4:	b2aa      	uxth	r2, r5
   198c6:	4621      	mov	r1, r4
   198c8:	4b07      	ldr	r3, [pc, #28]	; (198e8 <console_buffer+0x50>)
   198ca:	6818      	ldr	r0, [r3, #0]
   198cc:	f001 fbf0 	bl	1b0b0 <os_mbuf_append>
   198d0:	e7e6      	b.n	198a0 <console_buffer+0x8>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
   198d2:	2100      	movs	r1, #0
   198d4:	b2a8      	uxth	r0, r5
   198d6:	f001 fd93 	bl	1b400 <os_msys_get_pkthdr>
   198da:	4b03      	ldr	r3, [pc, #12]	; (198e8 <console_buffer+0x50>)
   198dc:	6018      	str	r0, [r3, #0]
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
   198de:	2800      	cmp	r0, #0
   198e0:	d1e8      	bne.n	198b4 <console_buffer+0x1c>
   198e2:	e7dd      	b.n	198a0 <console_buffer+0x8>
   198e4:	20000100 	.word	0x20000100
   198e8:	20006f04 	.word	0x20006f04

000198ec <semihosting_console_write_ch>:
    float f_abs = *neg ? -f : f;          //  Absolute value of f
    *i = (int) f_abs;                     //  Integer part
    *d = ((int) (1000000.0f * f_abs)) % 1000000;  //  6 decimal places
}

static void semihosting_console_write_ch(char c) {
   198ec:	b500      	push	{lr}
   198ee:	b083      	sub	sp, #12
   198f0:	f88d 0007 	strb.w	r0, [sp, #7]
    if (c == '\r') { return; }  //  Don't display \r.
   198f4:	280d      	cmp	r0, #13
   198f6:	d004      	beq.n	19902 <semihosting_console_write_ch+0x16>
    console_buffer(&c, 1);  //  Append the char to the output buffer.
   198f8:	2101      	movs	r1, #1
   198fa:	f10d 0007 	add.w	r0, sp, #7
   198fe:	f7ff ffcb 	bl	19898 <console_buffer>
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}
   19902:	b003      	add	sp, #12
   19904:	f85d fb04 	ldr.w	pc, [sp], #4

00019908 <console_printhex>:
void console_printhex(uint8_t v) {
   19908:	b510      	push	{r4, lr}
   1990a:	b082      	sub	sp, #8
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   1990c:	2310      	movs	r3, #16
    int length = 0;
   1990e:	2200      	movs	r2, #0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   19910:	e005      	b.n	1991e <console_printhex+0x16>
        v = v % divisor;
   19912:	fbb0 f1f3 	udiv	r1, r0, r3
   19916:	fb03 0011 	mls	r0, r3, r1, r0
   1991a:	b2c0      	uxtb	r0, r0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   1991c:	091b      	lsrs	r3, r3, #4
   1991e:	b18b      	cbz	r3, 19944 <console_printhex+0x3c>
        char digit = '0' + (char)(v / divisor);
   19920:	fbb0 f4f3 	udiv	r4, r0, r3
   19924:	f104 0130 	add.w	r1, r4, #48	; 0x30
   19928:	b2c9      	uxtb	r1, r1
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
   1992a:	2939      	cmp	r1, #57	; 0x39
   1992c:	d902      	bls.n	19934 <console_printhex+0x2c>
   1992e:	f104 0157 	add.w	r1, r4, #87	; 0x57
   19932:	b2c9      	uxtb	r1, r1
            if (length < size) {
   19934:	2a02      	cmp	r2, #2
   19936:	dcec      	bgt.n	19912 <console_printhex+0xa>
                buffer[length++] = digit;
   19938:	ac02      	add	r4, sp, #8
   1993a:	4414      	add	r4, r2
   1993c:	f804 1c04 	strb.w	r1, [r4, #-4]
   19940:	3201      	adds	r2, #1
   19942:	e7e6      	b.n	19912 <console_printhex+0xa>
    if (length == 0) { buffer[length++] = '0'; };
   19944:	b92a      	cbnz	r2, 19952 <console_printhex+0x4a>
   19946:	ab02      	add	r3, sp, #8
   19948:	4413      	add	r3, r2
   1994a:	2130      	movs	r1, #48	; 0x30
   1994c:	f803 1c04 	strb.w	r1, [r3, #-4]
   19950:	3201      	adds	r2, #1
    if (length < size) buffer[length] = 0;
   19952:	2a02      	cmp	r2, #2
   19954:	dc04      	bgt.n	19960 <console_printhex+0x58>
   19956:	ab02      	add	r3, sp, #8
   19958:	441a      	add	r2, r3
   1995a:	2300      	movs	r3, #0
   1995c:	f802 3c04 	strb.w	r3, [r2, #-4]
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
   19960:	2300      	movs	r3, #0
   19962:	f88d 3006 	strb.w	r3, [sp, #6]
    console_buffer(buffer, strlen(buffer));
   19966:	a801      	add	r0, sp, #4
   19968:	f002 fb73 	bl	1c052 <strlen>
   1996c:	4601      	mov	r1, r0
   1996e:	a801      	add	r0, sp, #4
   19970:	f7ff ff92 	bl	19898 <console_buffer>
}
   19974:	b002      	add	sp, #8
   19976:	bd10      	pop	{r4, pc}

00019978 <console_printint>:
void console_printint(int i) {
   19978:	b508      	push	{r3, lr}
    console_printf("%d", i);
   1997a:	4601      	mov	r1, r0
   1997c:	4801      	ldr	r0, [pc, #4]	; (19984 <console_printint+0xc>)
   1997e:	f000 f873 	bl	19a68 <console_printf>
}
   19982:	bd08      	pop	{r3, pc}
   19984:	00022504 	.word	0x00022504

00019988 <console_dump>:
    if (buffer == NULL || len == 0) { return; }
   19988:	b180      	cbz	r0, 199ac <console_dump+0x24>
void console_dump(const uint8_t *buffer, unsigned int len) {
   1998a:	b570      	push	{r4, r5, r6, lr}
   1998c:	4606      	mov	r6, r0
    if (buffer == NULL || len == 0) { return; }
   1998e:	b161      	cbz	r1, 199aa <console_dump+0x22>
   19990:	460d      	mov	r5, r1
	for (int i = 0; i < len; i++) { console_printhex(buffer[i]); console_buffer(" ", 1); } 
   19992:	2400      	movs	r4, #0
   19994:	e007      	b.n	199a6 <console_dump+0x1e>
   19996:	5d30      	ldrb	r0, [r6, r4]
   19998:	f7ff ffb6 	bl	19908 <console_printhex>
   1999c:	2101      	movs	r1, #1
   1999e:	4804      	ldr	r0, [pc, #16]	; (199b0 <console_dump+0x28>)
   199a0:	f7ff ff7a 	bl	19898 <console_buffer>
   199a4:	3401      	adds	r4, #1
   199a6:	42ac      	cmp	r4, r5
   199a8:	d3f5      	bcc.n	19996 <console_dump+0xe>
}
   199aa:	bd70      	pop	{r4, r5, r6, pc}
   199ac:	4770      	bx	lr
   199ae:	bf00      	nop
   199b0:	00022500 	.word	0x00022500

000199b4 <console_out_nolock>:

int console_out_nolock(int character) {
   199b4:	b538      	push	{r3, r4, r5, lr}
    char c = (char)character;
   199b6:	b2c5      	uxtb	r5, r0
    if (g_silence_console) { return c; }
   199b8:	4b0b      	ldr	r3, [pc, #44]	; (199e8 <console_out_nolock+0x34>)
   199ba:	781b      	ldrb	r3, [r3, #0]
   199bc:	b953      	cbnz	r3, 199d4 <console_out_nolock+0x20>
   199be:	4604      	mov	r4, r0
    if ('\n' == c) {
   199c0:	2d0a      	cmp	r5, #10
   199c2:	d009      	beq.n	199d8 <console_out_nolock+0x24>
        semihosting_console_write_ch('\r');
        console_is_midline = 0;
    } else {
        console_is_midline = 1;
   199c4:	4b09      	ldr	r3, [pc, #36]	; (199ec <console_out_nolock+0x38>)
   199c6:	2201      	movs	r2, #1
   199c8:	601a      	str	r2, [r3, #0]
    }
    semihosting_console_write_ch(c);
   199ca:	4628      	mov	r0, r5
   199cc:	f7ff ff8e 	bl	198ec <semihosting_console_write_ch>
    return character;
   199d0:	4620      	mov	r0, r4
}
   199d2:	bd38      	pop	{r3, r4, r5, pc}
   199d4:	4628      	mov	r0, r5
    if (g_silence_console) { return c; }
   199d6:	e7fc      	b.n	199d2 <console_out_nolock+0x1e>
        semihosting_console_write_ch('\r');
   199d8:	200d      	movs	r0, #13
   199da:	f7ff ff87 	bl	198ec <semihosting_console_write_ch>
        console_is_midline = 0;
   199de:	4b03      	ldr	r3, [pc, #12]	; (199ec <console_out_nolock+0x38>)
   199e0:	2200      	movs	r2, #0
   199e2:	601a      	str	r2, [r3, #0]
   199e4:	e7f1      	b.n	199ca <console_out_nolock+0x16>
   199e6:	bf00      	nop
   199e8:	2000ddb4 	.word	0x2000ddb4
   199ec:	2000ddb8 	.word	0x2000ddb8

000199f0 <semihosting_console_init>:

void console_rx_restart(void) {}

int semihosting_console_is_init(void) { return 1; }

int semihosting_console_init(void) { return 0; }
   199f0:	2000      	movs	r0, #0
   199f2:	4770      	bx	lr

000199f4 <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
   199f4:	b570      	push	{r4, r5, r6, lr}
   199f6:	4606      	mov	r6, r0
   199f8:	460d      	mov	r5, r1
    int i;
    for (i = 0; i < cnt; i++) {
   199fa:	2400      	movs	r4, #0
   199fc:	42ac      	cmp	r4, r5
   199fe:	da07      	bge.n	19a10 <console_write+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
   19a00:	5d30      	ldrb	r0, [r6, r4]
   19a02:	f7ff ffd7 	bl	199b4 <console_out_nolock>
   19a06:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   19a0a:	d001      	beq.n	19a10 <console_write+0x1c>
    for (i = 0; i < cnt; i++) {
   19a0c:	3401      	adds	r4, #1
   19a0e:	e7f5      	b.n	199fc <console_write+0x8>
    }
}
   19a10:	bd70      	pop	{r4, r5, r6, pc}

00019a12 <console_blocking_mode>:

void console_blocking_mode(void) {
   19a12:	b508      	push	{r3, lr}
    disable_buffer();
   19a14:	f7ff ff3c 	bl	19890 <disable_buffer>
}
   19a18:	bd08      	pop	{r3, pc}
	...

00019a1c <console_pkg_init>:

void console_deinit(void) {}

void console_reinit(void) {}

void console_pkg_init(void) {
   19a1c:	b510      	push	{r4, lr}
   19a1e:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   19a20:	4b0d      	ldr	r3, [pc, #52]	; (19a58 <console_pkg_init+0x3c>)
   19a22:	781b      	ldrb	r3, [r3, #0]
   19a24:	b193      	cbz	r3, 19a4c <console_pkg_init+0x30>

    os_eventq_init(&avail_queue);
   19a26:	480d      	ldr	r0, [pc, #52]	; (19a5c <console_pkg_init+0x40>)
   19a28:	f001 f9fa 	bl	1ae20 <os_eventq_init>
    os_mutex_init(&console_write_lock);
   19a2c:	480c      	ldr	r0, [pc, #48]	; (19a60 <console_pkg_init+0x44>)
   19a2e:	f001 fd15 	bl	1b45c <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_SEMIHOSTING)
    rc = semihosting_console_init();
   19a32:	f7ff ffdd 	bl	199f0 <semihosting_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
   19a36:	b138      	cbz	r0, 19a48 <console_pkg_init+0x2c>
   19a38:	2000      	movs	r0, #0
   19a3a:	9000      	str	r0, [sp, #0]
   19a3c:	4b09      	ldr	r3, [pc, #36]	; (19a64 <console_pkg_init+0x48>)
   19a3e:	681c      	ldr	r4, [r3, #0]
   19a40:	4603      	mov	r3, r0
   19a42:	4602      	mov	r2, r0
   19a44:	4601      	mov	r1, r0
   19a46:	47a0      	blx	r4
}
   19a48:	b002      	add	sp, #8
   19a4a:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   19a4c:	461a      	mov	r2, r3
   19a4e:	4619      	mov	r1, r3
   19a50:	4618      	mov	r0, r3
   19a52:	f000 fed1 	bl	1a7f8 <__assert_func>
   19a56:	bf00      	nop
   19a58:	2000ddbc 	.word	0x2000ddbc
   19a5c:	20006f08 	.word	0x20006f08
   19a60:	20006f18 	.word	0x20006f18
   19a64:	20000104 	.word	0x20000104

00019a68 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
   19a68:	b40f      	push	{r0, r1, r2, r3}
   19a6a:	b510      	push	{r4, lr}
   19a6c:	b082      	sub	sp, #8
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
   19a6e:	f000 f81f 	bl	19ab0 <console_get_ticks>
   19a72:	b160      	cbz	r0, 19a8e <console_printf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
   19a74:	4b0c      	ldr	r3, [pc, #48]	; (19aa8 <console_printf+0x40>)
   19a76:	681b      	ldr	r3, [r3, #0]
   19a78:	b10b      	cbz	r3, 19a7e <console_printf+0x16>
    num_chars = 0;
   19a7a:	2400      	movs	r4, #0
   19a7c:	e008      	b.n	19a90 <console_printf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
   19a7e:	f002 f8d9 	bl	1bc34 <os_time_get>
   19a82:	4601      	mov	r1, r0
   19a84:	4809      	ldr	r0, [pc, #36]	; (19aac <console_printf+0x44>)
   19a86:	f002 fd97 	bl	1c5b8 <printf>
   19a8a:	4604      	mov	r4, r0
   19a8c:	e000      	b.n	19a90 <console_printf+0x28>
    num_chars = 0;
   19a8e:	2400      	movs	r4, #0
        }
    }

    va_start(args, fmt);
   19a90:	a905      	add	r1, sp, #20
   19a92:	9101      	str	r1, [sp, #4]
    num_chars += vprintf(fmt, args);
   19a94:	9804      	ldr	r0, [sp, #16]
   19a96:	f002 fdbf 	bl	1c618 <vprintf>
    va_end(args);

    return num_chars;
}
   19a9a:	4420      	add	r0, r4
   19a9c:	b002      	add	sp, #8
   19a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19aa2:	b004      	add	sp, #16
   19aa4:	4770      	bx	lr
   19aa6:	bf00      	nop
   19aa8:	2000ddb8 	.word	0x2000ddb8
   19aac:	00022508 	.word	0x00022508

00019ab0 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
   19ab0:	4b01      	ldr	r3, [pc, #4]	; (19ab8 <console_get_ticks+0x8>)
   19ab2:	7818      	ldrb	r0, [r3, #0]
   19ab4:	4770      	bx	lr
   19ab6:	bf00      	nop
   19ab8:	20006f24 	.word	0x20006f24

00019abc <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   19abc:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   19abe:	f000 fe9b 	bl	1a7f8 <__assert_func>
	...

00019ac4 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   19ac4:	4b01      	ldr	r3, [pc, #4]	; (19acc <sysinit_start+0x8>)
   19ac6:	2201      	movs	r2, #1
   19ac8:	701a      	strb	r2, [r3, #0]
}
   19aca:	4770      	bx	lr
   19acc:	2000ddbc 	.word	0x2000ddbc

00019ad0 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   19ad0:	4b01      	ldr	r3, [pc, #4]	; (19ad8 <sysinit_end+0x8>)
   19ad2:	2200      	movs	r2, #0
   19ad4:	701a      	strb	r2, [r3, #0]
}
   19ad6:	4770      	bx	lr
   19ad8:	2000ddbc 	.word	0x2000ddbc

00019adc <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
   19adc:	4a09      	ldr	r2, [pc, #36]	; (19b04 <NVIC_Relocate+0x28>)
   19ade:	4b0a      	ldr	r3, [pc, #40]	; (19b08 <NVIC_Relocate+0x2c>)
   19ae0:	429a      	cmp	r2, r3
   19ae2:	d00a      	beq.n	19afa <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   19ae4:	2300      	movs	r3, #0
   19ae6:	e006      	b.n	19af6 <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
   19ae8:	4a07      	ldr	r2, [pc, #28]	; (19b08 <NVIC_Relocate+0x2c>)
   19aea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   19aee:	4a05      	ldr	r2, [pc, #20]	; (19b04 <NVIC_Relocate+0x28>)
   19af0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   19af4:	3301      	adds	r3, #1
   19af6:	2b35      	cmp	r3, #53	; 0x35
   19af8:	ddf6      	ble.n	19ae8 <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
   19afa:	4a02      	ldr	r2, [pc, #8]	; (19b04 <NVIC_Relocate+0x28>)
   19afc:	4b03      	ldr	r3, [pc, #12]	; (19b0c <NVIC_Relocate+0x30>)
   19afe:	609a      	str	r2, [r3, #8]
#endif
}
   19b00:	4770      	bx	lr
   19b02:	bf00      	nop
   19b04:	20000000 	.word	0x20000000
   19b08:	00008020 	.word	0x00008020
   19b0c:	e000ed00 	.word	0xe000ed00

00019b10 <hal_gpio_irq_handler>:
 *
 * @param index
 */
static void
hal_gpio_irq_handler(void)
{
   19b10:	b510      	push	{r4, lr}
#if NRF52840_XXAA
    gpio_state |= (uint64_t)NRF_P1->IN << 32;
#endif
#endif

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   19b12:	2400      	movs	r4, #0
   19b14:	e000      	b.n	19b18 <hal_gpio_irq_handler+0x8>
   19b16:	3401      	adds	r4, #1
   19b18:	2c07      	cmp	r4, #7
   19b1a:	dc1c      	bgt.n	19b56 <hal_gpio_irq_handler+0x46>
        if ((hal_gpio_irqs[i].sense_trig == HAL_GPIO_SENSE_TRIG_BOTH) ||
            (hal_gpio_irqs[i].sense_trig == sense_trig)) {
            hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
        }
#else
        if (NRF_GPIOTE->EVENTS_IN[i] && (NRF_GPIOTE->INTENSET & (1 << i))) {
   19b1c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   19b20:	4a0d      	ldr	r2, [pc, #52]	; (19b58 <hal_gpio_irq_handler+0x48>)
   19b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   19b26:	2b00      	cmp	r3, #0
   19b28:	d0f5      	beq.n	19b16 <hal_gpio_irq_handler+0x6>
   19b2a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   19b2e:	2301      	movs	r3, #1
   19b30:	40a3      	lsls	r3, r4
   19b32:	421a      	tst	r2, r3
   19b34:	d0ef      	beq.n	19b16 <hal_gpio_irq_handler+0x6>
            NRF_GPIOTE->EVENTS_IN[i] = 0;
   19b36:	f104 0340 	add.w	r3, r4, #64	; 0x40
   19b3a:	4a07      	ldr	r2, [pc, #28]	; (19b58 <hal_gpio_irq_handler+0x48>)
   19b3c:	2100      	movs	r1, #0
   19b3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            if (hal_gpio_irqs[i].func) {
   19b42:	4b06      	ldr	r3, [pc, #24]	; (19b5c <hal_gpio_irq_handler+0x4c>)
   19b44:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   19b48:	2a00      	cmp	r2, #0
   19b4a:	d0e4      	beq.n	19b16 <hal_gpio_irq_handler+0x6>
                hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
   19b4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   19b50:	6858      	ldr	r0, [r3, #4]
   19b52:	4790      	blx	r2
   19b54:	e7df      	b.n	19b16 <hal_gpio_irq_handler+0x6>
        }
#endif
    }

    os_trace_isr_exit();
}
   19b56:	bd10      	pop	{r4, pc}
   19b58:	40006000 	.word	0x40006000
   19b5c:	20006f28 	.word	0x20006f28

00019b60 <hal_gpio_irq_setup>:
static void
hal_gpio_irq_setup(void)
{
    static uint8_t irq_setup = 0;

    if (!irq_setup) {
   19b60:	4b06      	ldr	r3, [pc, #24]	; (19b7c <hal_gpio_irq_setup+0x1c>)
   19b62:	781b      	ldrb	r3, [r3, #0]
   19b64:	b94b      	cbnz	r3, 19b7a <hal_gpio_irq_setup+0x1a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   19b66:	4b06      	ldr	r3, [pc, #24]	; (19b80 <hal_gpio_irq_setup+0x20>)
   19b68:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   19b6a:	4a06      	ldr	r2, [pc, #24]	; (19b84 <hal_gpio_irq_setup+0x24>)
   19b6c:	659a      	str	r2, [r3, #88]	; 0x58
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19b6e:	4b06      	ldr	r3, [pc, #24]	; (19b88 <hal_gpio_irq_setup+0x28>)
   19b70:	2240      	movs	r2, #64	; 0x40
   19b72:	601a      	str	r2, [r3, #0]
        NVIC_SetVector(GPIOTE_IRQn, (uint32_t)hal_gpio_irq_handler);
        NVIC_EnableIRQ(GPIOTE_IRQn);
        irq_setup = 1;
   19b74:	4b01      	ldr	r3, [pc, #4]	; (19b7c <hal_gpio_irq_setup+0x1c>)
   19b76:	2201      	movs	r2, #1
   19b78:	701a      	strb	r2, [r3, #0]
#if MYNEWT_VAL(MCU_GPIO_USE_PORT_EVENT)
        NRF_GPIOTE->INTENCLR = GPIOTE_INTENCLR_PORT_Msk;
        NRF_GPIOTE->EVENTS_PORT = 0;
#endif
    }
}
   19b7a:	4770      	bx	lr
   19b7c:	20006f68 	.word	0x20006f68
   19b80:	e000ed00 	.word	0xe000ed00
   19b84:	00019b11 	.word	0x00019b11
   19b88:	e000e100 	.word	0xe000e100

00019b8c <hal_gpio_find_empty_slot>:
static int
hal_gpio_find_empty_slot(void)
{
    int i;

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   19b8c:	2000      	movs	r0, #0
   19b8e:	2807      	cmp	r0, #7
   19b90:	dc05      	bgt.n	19b9e <hal_gpio_find_empty_slot+0x12>
        if (hal_gpio_irqs[i].func == NULL) {
   19b92:	4b04      	ldr	r3, [pc, #16]	; (19ba4 <hal_gpio_find_empty_slot+0x18>)
   19b94:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   19b98:	b11b      	cbz	r3, 19ba2 <hal_gpio_find_empty_slot+0x16>
    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   19b9a:	3001      	adds	r0, #1
   19b9c:	e7f7      	b.n	19b8e <hal_gpio_find_empty_slot+0x2>
            return i;
        }
    }
    return -1;
   19b9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   19ba2:	4770      	bx	lr
   19ba4:	20006f28 	.word	0x20006f28

00019ba8 <hal_gpio_find_pin>:
        if (hal_gpio_irqs[i].func && hal_gpio_irqs[i].pin == pin) {
            return i;
        }
    }
#else
    pin = pin << GPIOTE_CONFIG_PSEL_Pos;
   19ba8:	0201      	lsls	r1, r0, #8

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   19baa:	2000      	movs	r0, #0
   19bac:	e000      	b.n	19bb0 <hal_gpio_find_pin+0x8>
   19bae:	3001      	adds	r0, #1
   19bb0:	2807      	cmp	r0, #7
   19bb2:	dc0e      	bgt.n	19bd2 <hal_gpio_find_pin+0x2a>
        if (hal_gpio_irqs[i].func &&
   19bb4:	4b08      	ldr	r3, [pc, #32]	; (19bd8 <hal_gpio_find_pin+0x30>)
   19bb6:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   19bba:	2b00      	cmp	r3, #0
   19bbc:	d0f7      	beq.n	19bae <hal_gpio_find_pin+0x6>
           (NRF_GPIOTE->CONFIG[i] & HAL_GPIOTE_PIN_MASK) == pin) {
   19bbe:	f500 73a2 	add.w	r3, r0, #324	; 0x144
   19bc2:	4a06      	ldr	r2, [pc, #24]	; (19bdc <hal_gpio_find_pin+0x34>)
   19bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   19bc8:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
        if (hal_gpio_irqs[i].func &&
   19bcc:	428b      	cmp	r3, r1
   19bce:	d1ee      	bne.n	19bae <hal_gpio_find_pin+0x6>
   19bd0:	e001      	b.n	19bd6 <hal_gpio_find_pin+0x2e>
            return i;
        }
    }
#endif

    return -1;
   19bd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   19bd6:	4770      	bx	lr
   19bd8:	20006f28 	.word	0x20006f28
   19bdc:	40006000 	.word	0x40006000

00019be0 <hal_gpio_init_in>:
    switch (pull) {
   19be0:	2901      	cmp	r1, #1
   19be2:	d003      	beq.n	19bec <hal_gpio_init_in+0xc>
   19be4:	2902      	cmp	r1, #2
   19be6:	d00f      	beq.n	19c08 <hal_gpio_init_in+0x28>
        conf = 0;
   19be8:	2100      	movs	r1, #0
        break;
   19bea:	e000      	b.n	19bee <hal_gpio_init_in+0xe>
        conf = GPIO_PIN_CNF_PULL_Pullup << GPIO_PIN_CNF_PULL_Pos;
   19bec:	210c      	movs	r1, #12
    port->PIN_CNF[pin_index] = conf;
   19bee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   19bf2:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   19bf6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRCLR = HAL_GPIO_MASK(pin);
   19bfa:	2301      	movs	r3, #1
   19bfc:	fa03 f000 	lsl.w	r0, r3, r0
   19c00:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
}
   19c04:	2000      	movs	r0, #0
   19c06:	4770      	bx	lr
        conf = GPIO_PIN_CNF_PULL_Pulldown << GPIO_PIN_CNF_PULL_Pos;
   19c08:	2104      	movs	r1, #4
   19c0a:	e7f0      	b.n	19bee <hal_gpio_init_in+0xe>

00019c0c <hal_gpio_init_out>:
    if (val) {
   19c0c:	b999      	cbnz	r1, 19c36 <hal_gpio_init_out+0x2a>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   19c0e:	2301      	movs	r3, #1
   19c10:	4083      	lsls	r3, r0
   19c12:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   19c16:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
   19c1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   19c1e:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   19c22:	2103      	movs	r1, #3
   19c24:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRSET = HAL_GPIO_MASK(pin);
   19c28:	2301      	movs	r3, #1
   19c2a:	fa03 f000 	lsl.w	r0, r3, r0
   19c2e:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
}
   19c32:	2000      	movs	r0, #0
   19c34:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   19c36:	2301      	movs	r3, #1
   19c38:	4083      	lsls	r3, r0
   19c3a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   19c3e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   19c42:	e7ea      	b.n	19c1a <hal_gpio_init_out+0xe>

00019c44 <hal_gpio_write>:
    if (val) {
   19c44:	b939      	cbnz	r1, 19c56 <hal_gpio_write+0x12>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   19c46:	2301      	movs	r3, #1
   19c48:	fa03 f000 	lsl.w	r0, r3, r0
   19c4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19c50:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   19c54:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   19c56:	2301      	movs	r3, #1
   19c58:	fa03 f000 	lsl.w	r0, r3, r0
   19c5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19c60:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   19c64:	4770      	bx	lr

00019c66 <hal_gpio_read>:
    return (port->DIR & HAL_GPIO_MASK(pin)) ?
   19c66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19c6a:	f8d3 2514 	ldr.w	r2, [r3, #1300]	; 0x514
   19c6e:	2301      	movs	r3, #1
   19c70:	4083      	lsls	r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   19c72:	421a      	tst	r2, r3
   19c74:	d108      	bne.n	19c88 <hal_gpio_read+0x22>
        (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   19c76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19c7a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   19c7e:	fa23 f000 	lsr.w	r0, r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   19c82:	f000 0001 	and.w	r0, r0, #1
}
   19c86:	4770      	bx	lr
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   19c88:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19c8c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
   19c90:	fa23 f000 	lsr.w	r0, r3, r0
   19c94:	f000 0001 	and.w	r0, r0, #1
   19c98:	4770      	bx	lr
	...

00019c9c <hal_gpio_irq_init>:
 * @return int
 */
int
hal_gpio_irq_init(int pin, hal_gpio_irq_handler_t handler, void *arg,
                  hal_gpio_irq_trig_t trig, hal_gpio_pull_t pull)
{
   19c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19ca0:	4680      	mov	r8, r0
   19ca2:	460f      	mov	r7, r1
   19ca4:	4616      	mov	r6, r2
   19ca6:	461c      	mov	r4, r3
    uint32_t conf;
    int i;

    hal_gpio_irq_setup();
   19ca8:	f7ff ff5a 	bl	19b60 <hal_gpio_irq_setup>
    i = hal_gpio_find_empty_slot();
   19cac:	f7ff ff6e 	bl	19b8c <hal_gpio_find_empty_slot>
    if (i < 0) {
   19cb0:	1e05      	subs	r5, r0, #0
   19cb2:	db27      	blt.n	19d04 <hal_gpio_irq_init+0x68>
        return -1;
    }
    hal_gpio_init_in(pin, pull);
   19cb4:	f89d 1018 	ldrb.w	r1, [sp, #24]
   19cb8:	4640      	mov	r0, r8
   19cba:	f7ff ff91 	bl	19be0 <hal_gpio_init_in>
    default:
        hal_gpio_irqs[i].sense_trig = HAL_GPIO_SENSE_TRIG_NONE;
        return -1;
    }
#else
    switch (trig) {
   19cbe:	2c02      	cmp	r4, #2
   19cc0:	d01d      	beq.n	19cfe <hal_gpio_irq_init+0x62>
   19cc2:	2c03      	cmp	r4, #3
   19cc4:	d018      	beq.n	19cf8 <hal_gpio_irq_init+0x5c>
   19cc6:	2c01      	cmp	r4, #1
   19cc8:	d002      	beq.n	19cd0 <hal_gpio_irq_init+0x34>
        break;
    case HAL_GPIO_TRIG_BOTH:
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
        break;
    default:
        return -1;
   19cca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19cce:	e011      	b.n	19cf4 <hal_gpio_irq_init+0x58>
        conf = GPIOTE_CONFIG_POLARITY_LoToHi << GPIOTE_CONFIG_POLARITY_Pos;
   19cd0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    }

    conf |= pin << GPIOTE_CONFIG_PSEL_Pos;
   19cd4:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
    conf |= GPIOTE_CONFIG_MODE_Event << GPIOTE_CONFIG_MODE_Pos;
   19cd8:	f040 0001 	orr.w	r0, r0, #1

    NRF_GPIOTE->CONFIG[i] = conf;
   19cdc:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   19ce0:	4b0a      	ldr	r3, [pc, #40]	; (19d0c <hal_gpio_irq_init+0x70>)
   19ce2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
#endif

    hal_gpio_irqs[i].func = handler;
   19ce6:	4b0a      	ldr	r3, [pc, #40]	; (19d10 <hal_gpio_irq_init+0x74>)
   19ce8:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
    hal_gpio_irqs[i].arg = arg;
   19cec:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   19cf0:	605e      	str	r6, [r3, #4]

    return 0;
   19cf2:	2000      	movs	r0, #0
}
   19cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
   19cf8:	f44f 3040 	mov.w	r0, #196608	; 0x30000
        break;
   19cfc:	e7ea      	b.n	19cd4 <hal_gpio_irq_init+0x38>
        conf = GPIOTE_CONFIG_POLARITY_HiToLo << GPIOTE_CONFIG_POLARITY_Pos;
   19cfe:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   19d02:	e7e7      	b.n	19cd4 <hal_gpio_irq_init+0x38>
        return -1;
   19d04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19d08:	e7f4      	b.n	19cf4 <hal_gpio_irq_init+0x58>
   19d0a:	bf00      	nop
   19d0c:	40006000 	.word	0x40006000
   19d10:	20006f28 	.word	0x20006f28

00019d14 <hal_gpio_irq_enable>:
 *
 * @param pin
 */
void
hal_gpio_irq_enable(int pin)
{
   19d14:	b508      	push	{r3, lr}
    NRF_GPIO_Type *nrf_gpio;
    int pin_index;
#endif
    int i;

    i = hal_gpio_find_pin(pin);
   19d16:	f7ff ff47 	bl	19ba8 <hal_gpio_find_pin>
    if (i < 0) {
   19d1a:	2800      	cmp	r0, #0
   19d1c:	db0a      	blt.n	19d34 <hal_gpio_irq_enable+0x20>
        nrf_gpio->PIN_CNF[pin_index] |= GPIO_PIN_CNF_SENSE_High << GPIO_PIN_CNF_SENSE_Pos;
    }

    NRF_GPIOTE->INTENSET = GPIOTE_INTENSET_PORT_Msk;
#else
    NRF_GPIOTE->EVENTS_IN[i] = 0;
   19d1e:	4a06      	ldr	r2, [pc, #24]	; (19d38 <hal_gpio_irq_enable+0x24>)
   19d20:	f100 0340 	add.w	r3, r0, #64	; 0x40
   19d24:	2100      	movs	r1, #0
   19d26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NRF_GPIOTE->INTENSET = 1 << i;
   19d2a:	2301      	movs	r3, #1
   19d2c:	fa03 f000 	lsl.w	r0, r3, r0
   19d30:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
#endif
}
   19d34:	bd08      	pop	{r3, pc}
   19d36:	bf00      	nop
   19d38:	40006000 	.word	0x40006000

00019d3c <hal_i2c_delay_us>:

static void
hal_i2c_delay_us(uint32_t number_of_us)
{
register uint32_t delay __ASM ("r0") = number_of_us;
__ASM volatile (
   19d3c:	3801      	subs	r0, #1
   19d3e:	bf00      	nop
   19d40:	bf00      	nop
   19d42:	bf00      	nop
   19d44:	bf00      	nop
   19d46:	bf00      	nop
   19d48:	bf00      	nop
   19d4a:	bf00      	nop
   19d4c:	bf00      	nop
   19d4e:	bf00      	nop
   19d50:	bf00      	nop
   19d52:	bf00      	nop
   19d54:	bf00      	nop
   19d56:	bf00      	nop
   19d58:	bf00      	nop
   19d5a:	bf00      	nop
   19d5c:	bf00      	nop
   19d5e:	bf00      	nop
   19d60:	bf00      	nop
   19d62:	bf00      	nop
   19d64:	bf00      	nop
   19d66:	bf00      	nop
   19d68:	bf00      	nop
   19d6a:	bf00      	nop
   19d6c:	bf00      	nop
   19d6e:	bf00      	nop
   19d70:	bf00      	nop
   19d72:	bf00      	nop
   19d74:	bf00      	nop
   19d76:	bf00      	nop
   19d78:	bf00      	nop
   19d7a:	bf00      	nop
   19d7c:	bf00      	nop
   19d7e:	bf00      	nop
   19d80:	bf00      	nop
   19d82:	bf00      	nop
   19d84:	bf00      	nop
   19d86:	bf00      	nop
   19d88:	bf00      	nop
   19d8a:	bf00      	nop
   19d8c:	bf00      	nop
   19d8e:	bf00      	nop
   19d90:	bf00      	nop
   19d92:	bf00      	nop
   19d94:	bf00      	nop
   19d96:	bf00      	nop
   19d98:	bf00      	nop
   19d9a:	bf00      	nop
   19d9c:	bf00      	nop
   19d9e:	bf00      	nop
   19da0:	bf00      	nop
   19da2:	bf00      	nop
   19da4:	bf00      	nop
   19da6:	bf00      	nop
   19da8:	bf00      	nop
   19daa:	bf00      	nop
   19dac:	bf00      	nop
   19dae:	bf00      	nop
   19db0:	bf00      	nop
   19db2:	d1c3      	bne.n	19d3c <hal_i2c_delay_us>
    " BNE 1b\n"
#ifdef NRF51
    ".syntax divided\n"
#endif
    : "+r" (delay));
}
   19db4:	4770      	bx	lr
	...

00019db8 <hal_i2c_resolve>:

static int
hal_i2c_resolve(uint8_t i2c_num, struct nrf52_hal_i2c **out_i2c)
{
    if (i2c_num >= NRF52_HAL_I2C_MAX) {
   19db8:	2801      	cmp	r0, #1
   19dba:	d806      	bhi.n	19dca <hal_i2c_resolve+0x12>
        *out_i2c = NULL;
        return HAL_I2C_ERR_INVAL;
    }

    *out_i2c = nrf52_hal_i2cs[i2c_num];
   19dbc:	4b06      	ldr	r3, [pc, #24]	; (19dd8 <hal_i2c_resolve+0x20>)
   19dbe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   19dc2:	600b      	str	r3, [r1, #0]
    if (*out_i2c == NULL) {
   19dc4:	b12b      	cbz	r3, 19dd2 <hal_i2c_resolve+0x1a>
        return HAL_I2C_ERR_INVAL;
    }

    return 0;
   19dc6:	2000      	movs	r0, #0
}
   19dc8:	4770      	bx	lr
        *out_i2c = NULL;
   19dca:	2300      	movs	r3, #0
   19dcc:	600b      	str	r3, [r1, #0]
        return HAL_I2C_ERR_INVAL;
   19dce:	2002      	movs	r0, #2
   19dd0:	4770      	bx	lr
        return HAL_I2C_ERR_INVAL;
   19dd2:	2002      	movs	r0, #2
   19dd4:	4770      	bx	lr
   19dd6:	bf00      	nop
   19dd8:	00022510 	.word	0x00022510

00019ddc <hal_i2c_convert_status>:
 * Converts an nRF SDK I2C status to a HAL I2C error code.
 */
static int
hal_i2c_convert_status(int nrf_status)
{
    if (nrf_status == 0) {
   19ddc:	b148      	cbz	r0, 19df2 <hal_i2c_convert_status+0x16>
        return 0;
    } else if (nrf_status & NRF_TWIM_ERROR_DATA_NACK) {
   19dde:	f010 0f04 	tst.w	r0, #4
   19de2:	d107      	bne.n	19df4 <hal_i2c_convert_status+0x18>
        return HAL_I2C_ERR_DATA_NACK;
    } else if (nrf_status & NRF_TWIM_ERROR_ADDRESS_NACK) {
   19de4:	f010 0f02 	tst.w	r0, #2
   19de8:	d101      	bne.n	19dee <hal_i2c_convert_status+0x12>
        return HAL_I2C_ERR_ADDR_NACK;
    } else {
        return HAL_I2C_ERR_UNKNOWN;
   19dea:	2001      	movs	r0, #1
    }
}
   19dec:	4770      	bx	lr
        return HAL_I2C_ERR_ADDR_NACK;
   19dee:	2004      	movs	r0, #4
   19df0:	4770      	bx	lr
   19df2:	4770      	bx	lr
        return HAL_I2C_ERR_DATA_NACK;
   19df4:	2005      	movs	r0, #5
   19df6:	4770      	bx	lr

00019df8 <read_gpio_inbuffer>:
read_gpio_inbuffer(int pin)
{
    NRF_GPIO_Type *port;
    port = HAL_GPIO_PORT(pin);

    return (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   19df8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19dfc:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   19e00:	fa23 f000 	lsr.w	r0, r3, r0
}
   19e04:	f000 0001 	and.w	r0, r0, #1
   19e08:	4770      	bx	lr

00019e0a <hal_i2c_clear_bus>:
 * Clear the bus after reset by clocking 9 bits manually.
 * This should reset state from (most of) the devices on the other end.
 */
static void
hal_i2c_clear_bus(int scl_pin, int sda_pin)
{
   19e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19e0e:	4605      	mov	r5, r0
   19e10:	460e      	mov	r6, r1
    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(scl_pin);
    sda_port = HAL_GPIO_PORT(sda_pin);

    /* Input connected, standard-low disconnected-high, pull-ups */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   19e12:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   19e16:	f500 78e0 	add.w	r8, r0, #448	; 0x1c0
   19e1a:	f240 630c 	movw	r3, #1548	; 0x60c
   19e1e:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   19e22:	f501 77e0 	add.w	r7, r1, #448	; 0x1c0
   19e26:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_gpio_write(scl_pin, 1);
   19e2a:	2101      	movs	r1, #1
   19e2c:	f7ff ff0a 	bl	19c44 <hal_gpio_write>
    hal_gpio_write(sda_pin, 1);
   19e30:	2101      	movs	r1, #1
   19e32:	4630      	mov	r0, r6
   19e34:	f7ff ff06 	bl	19c44 <hal_gpio_write>

    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF_CLR;
   19e38:	f240 630d 	movw	r3, #1549	; 0x60d
   19e3c:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF_CLR;
   19e40:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_i2c_delay_us(4);
   19e44:	2004      	movs	r0, #4
   19e46:	f7ff ff79 	bl	19d3c <hal_i2c_delay_us>

    for (i = 0; i < 9; i++) {
   19e4a:	2400      	movs	r4, #0
   19e4c:	2c08      	cmp	r4, #8
   19e4e:	dc14      	bgt.n	19e7a <hal_i2c_clear_bus+0x70>
        if (read_gpio_inbuffer(sda_pin)) {
   19e50:	4630      	mov	r0, r6
   19e52:	f7ff ffd1 	bl	19df8 <read_gpio_inbuffer>
   19e56:	b978      	cbnz	r0, 19e78 <hal_i2c_clear_bus+0x6e>
                goto ret;
            } else {
                break;
            }
        }
        hal_gpio_write(scl_pin, 0);
   19e58:	2100      	movs	r1, #0
   19e5a:	4628      	mov	r0, r5
   19e5c:	f7ff fef2 	bl	19c44 <hal_gpio_write>
        hal_i2c_delay_us(4);
   19e60:	2004      	movs	r0, #4
   19e62:	f7ff ff6b 	bl	19d3c <hal_i2c_delay_us>
        hal_gpio_write(scl_pin, 1);
   19e66:	2101      	movs	r1, #1
   19e68:	4628      	mov	r0, r5
   19e6a:	f7ff feeb 	bl	19c44 <hal_gpio_write>
        hal_i2c_delay_us(4);
   19e6e:	2004      	movs	r0, #4
   19e70:	f7ff ff64 	bl	19d3c <hal_i2c_delay_us>
    for (i = 0; i < 9; i++) {
   19e74:	3401      	adds	r4, #1
   19e76:	e7e9      	b.n	19e4c <hal_i2c_clear_bus+0x42>
            if (i == 0) {
   19e78:	b154      	cbz	r4, 19e90 <hal_i2c_clear_bus+0x86>
    }

    /*
     * Send STOP.
     */
    hal_gpio_write(sda_pin, 0);
   19e7a:	2100      	movs	r1, #0
   19e7c:	4630      	mov	r0, r6
   19e7e:	f7ff fee1 	bl	19c44 <hal_gpio_write>
    hal_i2c_delay_us(4);
   19e82:	2004      	movs	r0, #4
   19e84:	f7ff ff5a 	bl	19d3c <hal_i2c_delay_us>
    hal_gpio_write(sda_pin, 1);
   19e88:	2101      	movs	r1, #1
   19e8a:	4630      	mov	r0, r6
   19e8c:	f7ff feda 	bl	19c44 <hal_gpio_write>

ret:
    /* Restore GPIO config */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   19e90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19e94:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   19e98:	f240 620c 	movw	r2, #1548	; 0x60c
   19e9c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   19ea0:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   19ea4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   19ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019eac <hal_i2c_init>:

int
hal_i2c_init(uint8_t i2c_num, void *usercfg)
{
   19eac:	b5f0      	push	{r4, r5, r6, r7, lr}
   19eae:	b083      	sub	sp, #12
    struct nrf52_hal_i2c_cfg *cfg;
    uint32_t freq;
    int rc;
    NRF_GPIO_Type *scl_port, *sda_port;

    assert(usercfg != NULL);
   19eb0:	b1a1      	cbz	r1, 19edc <hal_i2c_init+0x30>
   19eb2:	460c      	mov	r4, r1

    rc = hal_i2c_resolve(i2c_num, &i2c);
   19eb4:	a901      	add	r1, sp, #4
   19eb6:	f7ff ff7f 	bl	19db8 <hal_i2c_resolve>
    if (rc != 0) {
   19eba:	4606      	mov	r6, r0
   19ebc:	bba8      	cbnz	r0, 19f2a <hal_i2c_init+0x7e>
        goto err;
    }

    cfg = (struct nrf52_hal_i2c_cfg *) usercfg;
    regs = i2c->nhi_regs;
   19ebe:	9b01      	ldr	r3, [sp, #4]
   19ec0:	681d      	ldr	r5, [r3, #0]

    switch (cfg->i2c_frequency) {
   19ec2:	68a3      	ldr	r3, [r4, #8]
   19ec4:	2bfa      	cmp	r3, #250	; 0xfa
   19ec6:	d035      	beq.n	19f34 <hal_i2c_init+0x88>
   19ec8:	d90e      	bls.n	19ee8 <hal_i2c_init+0x3c>
   19eca:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
   19ece:	d02f      	beq.n	19f30 <hal_i2c_init+0x84>
   19ed0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   19ed4:	d131      	bne.n	19f3a <hal_i2c_init+0x8e>
        break;
    case 380:
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
        break;
    case 400:
        freq = TWI_FREQUENCY_FREQUENCY_K400;
   19ed6:	f04f 67cd 	mov.w	r7, #107479040	; 0x6680000
        break;
   19eda:	e009      	b.n	19ef0 <hal_i2c_init+0x44>
    assert(usercfg != NULL);
   19edc:	2300      	movs	r3, #0
   19ede:	461a      	mov	r2, r3
   19ee0:	4619      	mov	r1, r3
   19ee2:	4618      	mov	r0, r3
   19ee4:	f000 fc88 	bl	1a7f8 <__assert_func>
    switch (cfg->i2c_frequency) {
   19ee8:	2b64      	cmp	r3, #100	; 0x64
   19eea:	d126      	bne.n	19f3a <hal_i2c_init+0x8e>
        freq = TWI_FREQUENCY_FREQUENCY_K100;
   19eec:	f04f 77cc 	mov.w	r7, #26738688	; 0x1980000
    default:
        rc = HAL_I2C_ERR_INVAL;
        goto err;
    }

    hal_i2c_clear_bus(cfg->scl_pin, cfg->sda_pin);
   19ef0:	6861      	ldr	r1, [r4, #4]
   19ef2:	6820      	ldr	r0, [r4, #0]
   19ef4:	f7ff ff89 	bl	19e0a <hal_i2c_clear_bus>

    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(cfg->scl_pin);
    sda_port = HAL_GPIO_PORT(cfg->sda_pin);

    scl_port->PIN_CNF[HAL_GPIO_INDEX(cfg->scl_pin)] = NRF52_SCL_PIN_CONF;
   19ef8:	6823      	ldr	r3, [r4, #0]
   19efa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   19efe:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   19f02:	f240 610c 	movw	r1, #1548	; 0x60c
   19f06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    sda_port->PIN_CNF[HAL_GPIO_INDEX(cfg->sda_pin)] = NRF52_SDA_PIN_CONF;
   19f0a:	6863      	ldr	r3, [r4, #4]
   19f0c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   19f10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    regs->PSELSCL = cfg->scl_pin;
   19f14:	6823      	ldr	r3, [r4, #0]
   19f16:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    regs->PSELSDA = cfg->sda_pin;
   19f1a:	6863      	ldr	r3, [r4, #4]
   19f1c:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    regs->FREQUENCY = freq;
   19f20:	f8c5 7524 	str.w	r7, [r5, #1316]	; 0x524
    regs->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   19f24:	2305      	movs	r3, #5
   19f26:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    return (0);
err:
    return (rc);
}
   19f2a:	4630      	mov	r0, r6
   19f2c:	b003      	add	sp, #12
   19f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
   19f30:	4f03      	ldr	r7, [pc, #12]	; (19f40 <hal_i2c_init+0x94>)
        break;
   19f32:	e7dd      	b.n	19ef0 <hal_i2c_init+0x44>
        freq = TWI_FREQUENCY_FREQUENCY_K250;
   19f34:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
   19f38:	e7da      	b.n	19ef0 <hal_i2c_init+0x44>
        rc = HAL_I2C_ERR_INVAL;
   19f3a:	2602      	movs	r6, #2
   19f3c:	e7f5      	b.n	19f2a <hal_i2c_init+0x7e>
   19f3e:	bf00      	nop
   19f40:	06147ae9 	.word	0x06147ae9

00019f44 <hal_i2c_master_write>:
}

int
hal_i2c_master_write(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                     uint32_t timo, uint8_t last_op)
{
   19f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f48:	b083      	sub	sp, #12
   19f4a:	4688      	mov	r8, r1
   19f4c:	4615      	mov	r5, r2
   19f4e:	469a      	mov	sl, r3
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   19f50:	a901      	add	r1, sp, #4
   19f52:	f7ff ff31 	bl	19db8 <hal_i2c_resolve>
    if (rc != 0) {
   19f56:	4681      	mov	r9, r0
   19f58:	b118      	cbz	r0, 19f62 <hal_i2c_master_write+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   19f5a:	4648      	mov	r0, r9
   19f5c:	b003      	add	sp, #12
   19f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   19f62:	9b01      	ldr	r3, [sp, #4]
   19f64:	681c      	ldr	r4, [r3, #0]
    regs->ADDRESS = pdata->address;
   19f66:	f898 3000 	ldrb.w	r3, [r8]
   19f6a:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    regs->EVENTS_ERROR = 0;
   19f6e:	2300      	movs	r3, #0
   19f70:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   19f74:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   19f78:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->SHORTS = 0;
   19f7c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTTX);
   19f80:	f104 0708 	add.w	r7, r4, #8
    int retry = 2;
   19f84:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   19f88:	2300      	movs	r3, #0
   19f8a:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   19f8e:	2301      	movs	r3, #1
   19f90:	603b      	str	r3, [r7, #0]
        end_ticks = os_cputime_get32() +
   19f92:	f000 fe61 	bl	1ac58 <os_cputime_get32>
   19f96:	f100 0664 	add.w	r6, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   19f9a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   19f9e:	f7ff fe62 	bl	19c66 <hal_gpio_read>
   19fa2:	b1b0      	cbz	r0, 19fd2 <hal_i2c_master_write+0x8e>
   19fa4:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   19fa8:	b99b      	cbnz	r3, 19fd2 <hal_i2c_master_write+0x8e>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   19faa:	f000 fe55 	bl	1ac58 <os_cputime_get32>
   19fae:	1b80      	subs	r0, r0, r6
   19fb0:	2800      	cmp	r0, #0
   19fb2:	dbf2      	blt.n	19f9a <hal_i2c_master_write+0x56>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   19fb4:	2300      	movs	r3, #0
   19fb6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   19fba:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   19fbe:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   19fc2:	f7ff ff22 	bl	19e0a <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   19fc6:	2305      	movs	r3, #5
   19fc8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   19fcc:	f1bb 0b01 	subs.w	fp, fp, #1
   19fd0:	d1da      	bne.n	19f88 <hal_i2c_master_write+0x44>
    start = os_time_get();
   19fd2:	f001 fe2f 	bl	1bc34 <os_time_get>
   19fd6:	4606      	mov	r6, r0
    for (i = 0; i < pdata->len; i++) {
   19fd8:	464f      	mov	r7, r9
   19fda:	e003      	b.n	19fe4 <hal_i2c_master_write+0xa0>
        if (regs->EVENTS_ERROR) {
   19fdc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19fe0:	b9db      	cbnz	r3, 1a01a <hal_i2c_master_write+0xd6>
    for (i = 0; i < pdata->len; i++) {
   19fe2:	3701      	adds	r7, #1
   19fe4:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   19fe8:	42bb      	cmp	r3, r7
   19fea:	dd24      	ble.n	1a036 <hal_i2c_master_write+0xf2>
        regs->EVENTS_TXDSENT = 0;
   19fec:	2300      	movs	r3, #0
   19fee:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
        regs->TXD = pdata->buffer[i];
   19ff2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   19ff6:	5ddb      	ldrb	r3, [r3, r7]
   19ff8:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
        while (!regs->EVENTS_TXDSENT && !regs->EVENTS_ERROR) {
   19ffc:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   1a000:	2b00      	cmp	r3, #0
   1a002:	d1eb      	bne.n	19fdc <hal_i2c_master_write+0x98>
   1a004:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a008:	2b00      	cmp	r3, #0
   1a00a:	d1e7      	bne.n	19fdc <hal_i2c_master_write+0x98>
            if (os_time_get() - start > timo) {
   1a00c:	f001 fe12 	bl	1bc34 <os_time_get>
   1a010:	1b80      	subs	r0, r0, r6
   1a012:	42a8      	cmp	r0, r5
   1a014:	d9f2      	bls.n	19ffc <hal_i2c_master_write+0xb8>
                rc = HAL_I2C_ERR_TIMEOUT;
   1a016:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   1a01a:	2301      	movs	r3, #1
   1a01c:	6163      	str	r3, [r4, #20]
    if (regs->EVENTS_ERROR) {
   1a01e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a022:	2b00      	cmp	r3, #0
   1a024:	d099      	beq.n	19f5a <hal_i2c_master_write+0x16>
        nrf_status = regs->ERRORSRC;
   1a026:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   1a02a:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   1a02e:	f7ff fed5 	bl	19ddc <hal_i2c_convert_status>
   1a032:	4681      	mov	r9, r0
   1a034:	e791      	b.n	19f5a <hal_i2c_master_write+0x16>
    if (last_op) {
   1a036:	f1ba 0f00 	cmp.w	sl, #0
   1a03a:	d08e      	beq.n	19f5a <hal_i2c_master_write+0x16>
        regs->EVENTS_STOPPED = 0;
   1a03c:	2300      	movs	r3, #0
   1a03e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        regs->TASKS_STOP = 1;
   1a042:	2301      	movs	r3, #1
   1a044:	6163      	str	r3, [r4, #20]
        while (!regs->EVENTS_STOPPED && !regs->EVENTS_ERROR) {
   1a046:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1a04a:	b953      	cbnz	r3, 1a062 <hal_i2c_master_write+0x11e>
   1a04c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a050:	b93b      	cbnz	r3, 1a062 <hal_i2c_master_write+0x11e>
            if (os_time_get() - start > timo) {
   1a052:	f001 fdef 	bl	1bc34 <os_time_get>
   1a056:	1b80      	subs	r0, r0, r6
   1a058:	42a8      	cmp	r0, r5
   1a05a:	d9f4      	bls.n	1a046 <hal_i2c_master_write+0x102>
                rc = HAL_I2C_ERR_TIMEOUT;
   1a05c:	f04f 0903 	mov.w	r9, #3
   1a060:	e7db      	b.n	1a01a <hal_i2c_master_write+0xd6>
        if (regs->EVENTS_ERROR) {
   1a062:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a066:	2b00      	cmp	r3, #0
   1a068:	d1d7      	bne.n	1a01a <hal_i2c_master_write+0xd6>
   1a06a:	e776      	b.n	19f5a <hal_i2c_master_write+0x16>

0001a06c <hal_i2c_master_read>:

int
hal_i2c_master_read(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                    uint32_t timo, uint8_t last_op)
{
   1a06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a070:	b085      	sub	sp, #20
   1a072:	460f      	mov	r7, r1
   1a074:	4615      	mov	r5, r2
   1a076:	9301      	str	r3, [sp, #4]
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   1a078:	a903      	add	r1, sp, #12
   1a07a:	f7ff fe9d 	bl	19db8 <hal_i2c_resolve>
    if (rc != 0) {
   1a07e:	4681      	mov	r9, r0
   1a080:	b118      	cbz	r0, 1a08a <hal_i2c_master_read+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   1a082:	4648      	mov	r0, r9
   1a084:	b005      	add	sp, #20
   1a086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   1a08a:	9b03      	ldr	r3, [sp, #12]
   1a08c:	681c      	ldr	r4, [r3, #0]
    start = os_time_get();
   1a08e:	f001 fdd1 	bl	1bc34 <os_time_get>
   1a092:	4606      	mov	r6, r0
    if (regs->EVENTS_RXDREADY) {
   1a094:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a098:	b11b      	cbz	r3, 1a0a2 <hal_i2c_master_read+0x36>
        (void)regs->RXD;
   1a09a:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
        (void)regs->RXD;
   1a09e:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
    regs->EVENTS_ERROR = 0;
   1a0a2:	2300      	movs	r3, #0
   1a0a4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   1a0a8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   1a0ac:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->EVENTS_RXDREADY = 0;
   1a0b0:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    regs->ADDRESS = pdata->address;
   1a0b4:	783b      	ldrb	r3, [r7, #0]
   1a0b6:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    if (pdata->len == 1 && last_op) {
   1a0ba:	887b      	ldrh	r3, [r7, #2]
   1a0bc:	2b01      	cmp	r3, #1
   1a0be:	d02e      	beq.n	1a11e <hal_i2c_master_read+0xb2>
        regs->SHORTS = TWI_SHORTS_BB_SUSPEND_Msk;
   1a0c0:	2301      	movs	r3, #1
   1a0c2:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTRX);
   1a0c6:	46a2      	mov	sl, r4
    int retry = 2;
   1a0c8:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   1a0cc:	2300      	movs	r3, #0
   1a0ce:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   1a0d2:	2301      	movs	r3, #1
   1a0d4:	f8ca 3000 	str.w	r3, [sl]
        end_ticks = os_cputime_get32() +
   1a0d8:	f000 fdbe 	bl	1ac58 <os_cputime_get32>
   1a0dc:	f100 0864 	add.w	r8, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   1a0e0:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1a0e4:	f7ff fdbf 	bl	19c66 <hal_gpio_read>
   1a0e8:	b1b8      	cbz	r0, 1a11a <hal_i2c_master_read+0xae>
   1a0ea:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   1a0ee:	b9a3      	cbnz	r3, 1a11a <hal_i2c_master_read+0xae>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   1a0f0:	f000 fdb2 	bl	1ac58 <os_cputime_get32>
   1a0f4:	eba0 0008 	sub.w	r0, r0, r8
   1a0f8:	2800      	cmp	r0, #0
   1a0fa:	dbf1      	blt.n	1a0e0 <hal_i2c_master_read+0x74>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   1a0fc:	2300      	movs	r3, #0
   1a0fe:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   1a102:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1a106:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   1a10a:	f7ff fe7e 	bl	19e0a <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   1a10e:	2305      	movs	r3, #5
   1a110:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   1a114:	f1bb 0b01 	subs.w	fp, fp, #1
   1a118:	d1d8      	bne.n	1a0cc <hal_i2c_master_read+0x60>
    int retry = 2;
   1a11a:	46c8      	mov	r8, r9
   1a11c:	e017      	b.n	1a14e <hal_i2c_master_read+0xe2>
    if (pdata->len == 1 && last_op) {
   1a11e:	9b01      	ldr	r3, [sp, #4]
   1a120:	2b00      	cmp	r3, #0
   1a122:	d0cd      	beq.n	1a0c0 <hal_i2c_master_read+0x54>
        regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   1a124:	2302      	movs	r3, #2
   1a126:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   1a12a:	e7cc      	b.n	1a0c6 <hal_i2c_master_read+0x5a>
        if (regs->EVENTS_ERROR) {
   1a12c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a130:	bb0b      	cbnz	r3, 1a176 <hal_i2c_master_read+0x10a>
        pdata->buffer[i] = regs->RXD;
   1a132:	f8d4 2518 	ldr.w	r2, [r4, #1304]	; 0x518
   1a136:	687b      	ldr	r3, [r7, #4]
   1a138:	f803 2008 	strb.w	r2, [r3, r8]
        if (i == pdata->len - 2) {
   1a13c:	887b      	ldrh	r3, [r7, #2]
   1a13e:	3b02      	subs	r3, #2
   1a140:	4543      	cmp	r3, r8
   1a142:	d02a      	beq.n	1a19a <hal_i2c_master_read+0x12e>
        regs->EVENTS_RXDREADY = 0;
   1a144:	2300      	movs	r3, #0
   1a146:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    for (i = 0; i < pdata->len; i++) {
   1a14a:	f108 0801 	add.w	r8, r8, #1
   1a14e:	887b      	ldrh	r3, [r7, #2]
   1a150:	4543      	cmp	r3, r8
   1a152:	dd96      	ble.n	1a082 <hal_i2c_master_read+0x16>
        regs->TASKS_RESUME = 1;
   1a154:	2301      	movs	r3, #1
   1a156:	6223      	str	r3, [r4, #32]
        while (!regs->EVENTS_RXDREADY && !regs->EVENTS_ERROR) {
   1a158:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a15c:	2b00      	cmp	r3, #0
   1a15e:	d1e5      	bne.n	1a12c <hal_i2c_master_read+0xc0>
   1a160:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a164:	2b00      	cmp	r3, #0
   1a166:	d1e1      	bne.n	1a12c <hal_i2c_master_read+0xc0>
            if (os_time_get() - start > timo) {
   1a168:	f001 fd64 	bl	1bc34 <os_time_get>
   1a16c:	1b80      	subs	r0, r0, r6
   1a16e:	42a8      	cmp	r0, r5
   1a170:	d9f2      	bls.n	1a158 <hal_i2c_master_read+0xec>
                rc = HAL_I2C_ERR_TIMEOUT;
   1a172:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   1a176:	2301      	movs	r3, #1
   1a178:	6163      	str	r3, [r4, #20]
    regs->SHORTS = 0;
   1a17a:	2300      	movs	r3, #0
   1a17c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    if (regs->EVENTS_ERROR) {
   1a180:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a184:	2b00      	cmp	r3, #0
   1a186:	f43f af7c 	beq.w	1a082 <hal_i2c_master_read+0x16>
        nrf_status = regs->ERRORSRC;
   1a18a:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   1a18e:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   1a192:	f7ff fe23 	bl	19ddc <hal_i2c_convert_status>
   1a196:	4681      	mov	r9, r0
   1a198:	e773      	b.n	1a082 <hal_i2c_master_read+0x16>
            if (last_op) {
   1a19a:	9b01      	ldr	r3, [sp, #4]
   1a19c:	2b00      	cmp	r3, #0
   1a19e:	d0d1      	beq.n	1a144 <hal_i2c_master_read+0xd8>
                regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   1a1a0:	2302      	movs	r3, #2
   1a1a2:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   1a1a6:	e7cd      	b.n	1a144 <hal_i2c_master_read+0xd8>

0001a1a8 <nrf52_irqm_handler>:
    }

#if (MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_1_MASTER) || MYNEWT_VAL(SPI_2_MASTER))
static void
nrf52_irqm_handler(struct nrf52_hal_spi *spi)
{
   1a1a8:	b538      	push	{r3, r4, r5, lr}
    NRF_SPIM_Type *spim;
    uint16_t xfr_bytes;
    uint16_t len;

    spim = spi->nhs_spi.spim;
   1a1aa:	6905      	ldr	r5, [r0, #16]
    if (spim->EVENTS_END) {
   1a1ac:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   1a1b0:	b32b      	cbz	r3, 1a1fe <nrf52_irqm_handler+0x56>
        spim->EVENTS_END = 0;
   1a1b2:	2300      	movs	r3, #0
   1a1b4:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118

        /* Should not occur but if no transfer just leave  */
        if (spi->spi_xfr_flag == 0) {
   1a1b8:	7843      	ldrb	r3, [r0, #1]
   1a1ba:	b303      	cbz	r3, 1a1fe <nrf52_irqm_handler+0x56>
            return;
        }

        /* Are there more bytes to send? */
        xfr_bytes = spim->TXD.AMOUNT;
   1a1bc:	f8d5 254c 	ldr.w	r2, [r5, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
   1a1c0:	88c3      	ldrh	r3, [r0, #6]
   1a1c2:	fa13 f382 	uxtah	r3, r3, r2
   1a1c6:	b29b      	uxth	r3, r3
   1a1c8:	80c3      	strh	r3, [r0, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
   1a1ca:	8881      	ldrh	r1, [r0, #4]
   1a1cc:	428b      	cmp	r3, r1
   1a1ce:	d217      	bcs.n	1a200 <nrf52_irqm_handler+0x58>
   1a1d0:	b292      	uxth	r2, r2
            spi->nhs_txbuf += xfr_bytes;
   1a1d2:	6984      	ldr	r4, [r0, #24]
   1a1d4:	4414      	add	r4, r2
   1a1d6:	6184      	str	r4, [r0, #24]
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
   1a1d8:	1acb      	subs	r3, r1, r3
   1a1da:	b29b      	uxth	r3, r3
            len = min(SPIM_TXD_MAXCNT_MAX, len);
   1a1dc:	2bff      	cmp	r3, #255	; 0xff
   1a1de:	bf28      	it	cs
   1a1e0:	23ff      	movcs	r3, #255	; 0xff
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
   1a1e2:	f8c5 4544 	str.w	r4, [r5, #1348]	; 0x544
            spim->TXD.MAXCNT = len;
   1a1e6:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548

            /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
            if (spi->nhs_rxbuf) {
   1a1ea:	69c1      	ldr	r1, [r0, #28]
   1a1ec:	b129      	cbz	r1, 1a1fa <nrf52_irqm_handler+0x52>
                spi->nhs_rxbuf += xfr_bytes;
   1a1ee:	440a      	add	r2, r1
   1a1f0:	61c2      	str	r2, [r0, #28]
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
   1a1f2:	f8c5 2534 	str.w	r2, [r5, #1332]	; 0x534
                spim->RXD.MAXCNT = len;
   1a1f6:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
            }
            spim->TASKS_START = 1;
   1a1fa:	2301      	movs	r3, #1
   1a1fc:	612b      	str	r3, [r5, #16]
            }
            spi->spi_xfr_flag = 0;
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
        }
    }
}
   1a1fe:	bd38      	pop	{r3, r4, r5, pc}
   1a200:	4604      	mov	r4, r0
            if (spi->txrx_cb_func) {
   1a202:	6a03      	ldr	r3, [r0, #32]
   1a204:	b10b      	cbz	r3, 1a20a <nrf52_irqm_handler+0x62>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
   1a206:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1a208:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
   1a20a:	2300      	movs	r3, #0
   1a20c:	7063      	strb	r3, [r4, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
   1a20e:	2340      	movs	r3, #64	; 0x40
   1a210:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   1a214:	e7f3      	b.n	1a1fe <nrf52_irqm_handler+0x56>
	...

0001a218 <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
   1a218:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
   1a21a:	4b04      	ldr	r3, [pc, #16]	; (1a22c <nrf52_spi0_irq_handler+0x14>)
   1a21c:	781b      	ldrb	r3, [r3, #0]
   1a21e:	b103      	cbz	r3, 1a222 <nrf52_spi0_irq_handler+0xa>
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
   1a220:	bd08      	pop	{r3, pc}
        nrf52_irqm_handler(&nrf52_hal_spi0);
   1a222:	4802      	ldr	r0, [pc, #8]	; (1a22c <nrf52_spi0_irq_handler+0x14>)
   1a224:	f7ff ffc0 	bl	1a1a8 <nrf52_irqm_handler>
}
   1a228:	e7fa      	b.n	1a220 <nrf52_spi0_irq_handler+0x8>
   1a22a:	bf00      	nop
   1a22c:	2000ddc0 	.word	0x2000ddc0

0001a230 <hal_spi_stop_transfer>:
#endif

static void
hal_spi_stop_transfer(NRF_SPIM_Type *spim)
{
    spim->TASKS_STOP = 1;
   1a230:	2301      	movs	r3, #1
   1a232:	6143      	str	r3, [r0, #20]
    while (!spim->EVENTS_STOPPED) {}
   1a234:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
   1a238:	2b00      	cmp	r3, #0
   1a23a:	d0fb      	beq.n	1a234 <hal_spi_stop_transfer+0x4>
    spim->EVENTS_STOPPED = 0;
   1a23c:	2300      	movs	r3, #0
   1a23e:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
}
   1a242:	4770      	bx	lr

0001a244 <hal_spi_config_slave>:
}

static int
hal_spi_config_slave(struct nrf52_hal_spi *spi,
                     struct hal_spi_settings *settings)
{
   1a244:	b410      	push	{r4}
    int rc;
    uint32_t nrf_config;
    NRF_SPIS_Type *spis;

    spis = spi->nhs_spi.spis;
   1a246:	6902      	ldr	r2, [r0, #16]

    rc = 0;
    switch (settings->data_mode) {
   1a248:	780b      	ldrb	r3, [r1, #0]
   1a24a:	2b03      	cmp	r3, #3
   1a24c:	d80c      	bhi.n	1a268 <hal_spi_config_slave+0x24>
   1a24e:	e8df f003 	tbb	[pc, r3]
   1a252:	0e02      	.short	0x0e02
   1a254:	0805      	.short	0x0805
        case HAL_SPI_MODE0:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   1a256:	2300      	movs	r3, #0
    rc = 0;
   1a258:	4618      	mov	r0, r3
   1a25a:	e00a      	b.n	1a272 <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE1:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
        case HAL_SPI_MODE2:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   1a25c:	2304      	movs	r3, #4
    rc = 0;
   1a25e:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Leading << SPIS_CONFIG_CPHA_Pos);
            break;
   1a260:	e007      	b.n	1a272 <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE3:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   1a262:	2306      	movs	r3, #6
    rc = 0;
   1a264:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
   1a266:	e004      	b.n	1a272 <hal_spi_config_slave+0x2e>
        default:
            nrf_config = 0;
   1a268:	2300      	movs	r3, #0
            rc = EINVAL;
   1a26a:	2016      	movs	r0, #22
            break;
   1a26c:	e001      	b.n	1a272 <hal_spi_config_slave+0x2e>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   1a26e:	2302      	movs	r3, #2
    rc = 0;
   1a270:	2000      	movs	r0, #0
    }

    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   1a272:	784c      	ldrb	r4, [r1, #1]
   1a274:	2c01      	cmp	r4, #1
   1a276:	d006      	beq.n	1a286 <hal_spi_config_slave+0x42>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
    }
    spis->CONFIG = nrf_config;
   1a278:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554

    /* Only 8-bit word sizes supported. */
    switch (settings->word_size) {
   1a27c:	788b      	ldrb	r3, [r1, #2]
   1a27e:	b92b      	cbnz	r3, 1a28c <hal_spi_config_slave+0x48>
            rc = EINVAL;
            break;
    }

    return rc;
}
   1a280:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a284:	4770      	bx	lr
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
   1a286:	f043 0301 	orr.w	r3, r3, #1
   1a28a:	e7f5      	b.n	1a278 <hal_spi_config_slave+0x34>
            rc = EINVAL;
   1a28c:	2016      	movs	r0, #22
    return rc;
   1a28e:	e7f7      	b.n	1a280 <hal_spi_config_slave+0x3c>

0001a290 <hal_spi_init_master>:

static int
hal_spi_init_master(struct nrf52_hal_spi *spi,
                    struct nrf52_hal_spi_cfg *cfg,
                    nrf52_spi_irq_handler_t handler)
{
   1a290:	b430      	push	{r4, r5}
    NRF_GPIO_Type *port;
    uint32_t pin;

    /*  Configure MOSI */
    port = HAL_GPIO_PORT(cfg->mosi_pin);
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
   1a292:	784b      	ldrb	r3, [r1, #1]
    port->OUTCLR = (1UL << pin);
   1a294:	2501      	movs	r5, #1
   1a296:	409d      	lsls	r5, r3
   1a298:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1a29c:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    port->PIN_CNF[pin] =
   1a2a0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1a2a4:	2503      	movs	r5, #3
   1a2a6:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);

    /* Configure MISO */
    port = HAL_GPIO_PORT(cfg->miso_pin);
    pin = HAL_GPIO_INDEX(cfg->miso_pin);
   1a2aa:	788b      	ldrb	r3, [r1, #2]
    port->PIN_CNF[pin] =
   1a2ac:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1a2b0:	2500      	movs	r5, #0
   1a2b2:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos);

    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
   1a2b6:	6903      	ldr	r3, [r0, #16]
    spim->PSEL.SCK = cfg->sck_pin;
   1a2b8:	780c      	ldrb	r4, [r1, #0]
   1a2ba:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
   1a2be:	784c      	ldrb	r4, [r1, #1]
   1a2c0:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
    spim->PSEL.MISO = cfg->miso_pin;
   1a2c4:	7889      	ldrb	r1, [r1, #2]
   1a2c6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1a2ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a2ce:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
   1a2d2:	f990 3014 	ldrsb.w	r3, [r0, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a2d6:	4919      	ldr	r1, [pc, #100]	; (1a33c <hal_spi_init_master+0xac>)
   1a2d8:	6889      	ldr	r1, [r1, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a2da:	3310      	adds	r3, #16
   1a2dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_SetPriority(spi->irq_num, (1 << __NVIC_PRIO_BITS) - 1);
   1a2e0:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1a2e4:	42ab      	cmp	r3, r5
   1a2e6:	db22      	blt.n	1a32e <hal_spi_init_master+0x9e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a2e8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   1a2ec:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   1a2f0:	22e0      	movs	r2, #224	; 0xe0
   1a2f2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NVIC_ClearPendingIRQ(spi->irq_num);
   1a2f6:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1a2fa:	2b00      	cmp	r3, #0
   1a2fc:	db08      	blt.n	1a310 <hal_spi_init_master+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a2fe:	f003 011f 	and.w	r1, r3, #31
   1a302:	095b      	lsrs	r3, r3, #5
   1a304:	2201      	movs	r2, #1
   1a306:	408a      	lsls	r2, r1
   1a308:	3360      	adds	r3, #96	; 0x60
   1a30a:	490d      	ldr	r1, [pc, #52]	; (1a340 <hal_spi_init_master+0xb0>)
   1a30c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_EnableIRQ(spi->irq_num);
   1a310:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1a314:	2b00      	cmp	r3, #0
   1a316:	db07      	blt.n	1a328 <hal_spi_init_master+0x98>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a318:	f003 011f 	and.w	r1, r3, #31
   1a31c:	095b      	lsrs	r3, r3, #5
   1a31e:	2201      	movs	r2, #1
   1a320:	408a      	lsls	r2, r1
   1a322:	4907      	ldr	r1, [pc, #28]	; (1a340 <hal_spi_init_master+0xb0>)
   1a324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return 0;
}
   1a328:	2000      	movs	r0, #0
   1a32a:	bc30      	pop	{r4, r5}
   1a32c:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a32e:	f003 030f 	and.w	r3, r3, #15
   1a332:	4a04      	ldr	r2, [pc, #16]	; (1a344 <hal_spi_init_master+0xb4>)
   1a334:	441a      	add	r2, r3
   1a336:	23e0      	movs	r3, #224	; 0xe0
   1a338:	7613      	strb	r3, [r2, #24]
   1a33a:	e7dc      	b.n	1a2f6 <hal_spi_init_master+0x66>
   1a33c:	e000ed00 	.word	0xe000ed00
   1a340:	e000e100 	.word	0xe000e100
   1a344:	e000ecfc 	.word	0xe000ecfc

0001a348 <hal_spi_config_master>:
{
   1a348:	b410      	push	{r4}
    spim = spi->nhs_spi.spim;
   1a34a:	6902      	ldr	r2, [r0, #16]
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
   1a34c:	680c      	ldr	r4, [r1, #0]
   1a34e:	684b      	ldr	r3, [r1, #4]
   1a350:	6084      	str	r4, [r0, #8]
   1a352:	60c3      	str	r3, [r0, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
   1a354:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
   1a358:	f003 031f 	and.w	r3, r3, #31
    if (settings->data_mode <= HAL_SPI_MODE1) {
   1a35c:	7808      	ldrb	r0, [r1, #0]
   1a35e:	2801      	cmp	r0, #1
   1a360:	d916      	bls.n	1a390 <hal_spi_config_master+0x48>
        port->OUTSET = (1UL << pin);
   1a362:	2001      	movs	r0, #1
   1a364:	4098      	lsls	r0, r3
   1a366:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1a36a:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    port->PIN_CNF[pin] =
   1a36e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1a372:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1a376:	2403      	movs	r4, #3
   1a378:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    switch (settings->word_size) {
   1a37c:	788b      	ldrb	r3, [r1, #2]
   1a37e:	b973      	cbnz	r3, 1a39e <hal_spi_config_master+0x56>
    rc = 0;
   1a380:	2000      	movs	r0, #0
    switch (settings->data_mode) {
   1a382:	780b      	ldrb	r3, [r1, #0]
   1a384:	2b03      	cmp	r3, #3
   1a386:	d812      	bhi.n	1a3ae <hal_spi_config_master+0x66>
   1a388:	e8df f003 	tbb	[pc, r3]
   1a38c:	0f0d140b 	.word	0x0f0d140b
        port->OUTCLR = (1UL << pin);
   1a390:	2001      	movs	r0, #1
   1a392:	4098      	lsls	r0, r3
   1a394:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1a398:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
   1a39c:	e7e7      	b.n	1a36e <hal_spi_config_master+0x26>
            rc = EINVAL;
   1a39e:	2016      	movs	r0, #22
   1a3a0:	e7ef      	b.n	1a382 <hal_spi_config_master+0x3a>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1a3a2:	2300      	movs	r3, #0
   1a3a4:	e007      	b.n	1a3b6 <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   1a3a6:	2304      	movs	r3, #4
            break;
   1a3a8:	e005      	b.n	1a3b6 <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   1a3aa:	2306      	movs	r3, #6
            break;
   1a3ac:	e003      	b.n	1a3b6 <hal_spi_config_master+0x6e>
            nrf_config = 0;
   1a3ae:	2300      	movs	r3, #0
            rc = EINVAL;
   1a3b0:	2016      	movs	r0, #22
            break;
   1a3b2:	e000      	b.n	1a3b6 <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1a3b4:	2302      	movs	r3, #2
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   1a3b6:	784c      	ldrb	r4, [r1, #1]
   1a3b8:	2c01      	cmp	r4, #1
   1a3ba:	d010      	beq.n	1a3de <hal_spi_config_master+0x96>
    spim->CONFIG = nrf_config;
   1a3bc:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
    switch (settings->baudrate) {
   1a3c0:	684b      	ldr	r3, [r1, #4]
   1a3c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1a3c6:	d023      	beq.n	1a410 <hal_spi_config_master+0xc8>
   1a3c8:	d80c      	bhi.n	1a3e4 <hal_spi_config_master+0x9c>
   1a3ca:	2bfa      	cmp	r3, #250	; 0xfa
   1a3cc:	d029      	beq.n	1a422 <hal_spi_config_master+0xda>
   1a3ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1a3d2:	d01a      	beq.n	1a40a <hal_spi_config_master+0xc2>
   1a3d4:	2b7d      	cmp	r3, #125	; 0x7d
   1a3d6:	d011      	beq.n	1a3fc <hal_spi_config_master+0xb4>
            frequency = 0;
   1a3d8:	2300      	movs	r3, #0
            rc = EINVAL;
   1a3da:	2016      	movs	r0, #22
            break;
   1a3dc:	e010      	b.n	1a400 <hal_spi_config_master+0xb8>
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
   1a3de:	f043 0301 	orr.w	r3, r3, #1
   1a3e2:	e7eb      	b.n	1a3bc <hal_spi_config_master+0x74>
    switch (settings->baudrate) {
   1a3e4:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
   1a3e8:	d015      	beq.n	1a416 <hal_spi_config_master+0xce>
   1a3ea:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
   1a3ee:	d015      	beq.n	1a41c <hal_spi_config_master+0xd4>
   1a3f0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   1a3f4:	d1f0      	bne.n	1a3d8 <hal_spi_config_master+0x90>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
   1a3f6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
            break;
   1a3fa:	e001      	b.n	1a400 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K125;
   1a3fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    spim->FREQUENCY = frequency;
   1a400:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
}
   1a404:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a408:	4770      	bx	lr
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
   1a40a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
            break;
   1a40e:	e7f7      	b.n	1a400 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
   1a410:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            break;
   1a414:	e7f4      	b.n	1a400 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
   1a416:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
            break;
   1a41a:	e7f1      	b.n	1a400 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
   1a41c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
            break;
   1a420:	e7ee      	b.n	1a400 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K250;
   1a422:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1a426:	e7eb      	b.n	1a400 <hal_spi_config_master+0xb8>

0001a428 <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a428:	2802      	cmp	r0, #2
   1a42a:	dc10      	bgt.n	1a44e <hal_spi_config+0x26>
{
   1a42c:	b508      	push	{r3, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a42e:	4b0b      	ldr	r3, [pc, #44]	; (1a45c <hal_spi_config+0x34>)
   1a430:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1a434:	b168      	cbz	r0, 1a452 <hal_spi_config+0x2a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   1a436:	6903      	ldr	r3, [r0, #16]
    if (spim->ENABLE != 0) {
   1a438:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   1a43c:	b95b      	cbnz	r3, 1a456 <hal_spi_config+0x2e>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1a43e:	7803      	ldrb	r3, [r0, #0]
   1a440:	b113      	cbz	r3, 1a448 <hal_spi_config+0x20>
        rc = hal_spi_config_master(spi, settings);
    } else {
        rc = hal_spi_config_slave(spi, settings);
   1a442:	f7ff feff 	bl	1a244 <hal_spi_config_slave>
    }

err:
    return (rc);
}
   1a446:	bd08      	pop	{r3, pc}
        rc = hal_spi_config_master(spi, settings);
   1a448:	f7ff ff7e 	bl	1a348 <hal_spi_config_master>
   1a44c:	e7fb      	b.n	1a446 <hal_spi_config+0x1e>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a44e:	2016      	movs	r0, #22
}
   1a450:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a452:	2016      	movs	r0, #22
   1a454:	e7f7      	b.n	1a446 <hal_spi_config+0x1e>
        return -1;
   1a456:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a45a:	e7f4      	b.n	1a446 <hal_spi_config+0x1e>
   1a45c:	00022518 	.word	0x00022518

0001a460 <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a460:	2802      	cmp	r0, #2
   1a462:	dc1b      	bgt.n	1a49c <hal_spi_enable+0x3c>
   1a464:	4b10      	ldr	r3, [pc, #64]	; (1a4a8 <hal_spi_enable+0x48>)
   1a466:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1a46a:	b1cb      	cbz	r3, 1a4a0 <hal_spi_enable+0x40>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1a46c:	781a      	ldrb	r2, [r3, #0]
   1a46e:	b17a      	cbz	r2, 1a490 <hal_spi_enable+0x30>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    } else {
        if (spi->txrx_cb_func == NULL) {
   1a470:	6a1a      	ldr	r2, [r3, #32]
   1a472:	b1ba      	cbz	r2, 1a4a4 <hal_spi_enable+0x44>
            rc = EINVAL;
            goto err;
        }

        spis = spi->nhs_spi.spis;
   1a474:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
   1a476:	2000      	movs	r0, #0
   1a478:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   1a47c:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
   1a480:	f240 4202 	movw	r2, #1026	; 0x402
   1a484:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
   1a488:	2202      	movs	r2, #2
   1a48a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1a48e:	4770      	bx	lr
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
   1a490:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1a492:	2201      	movs	r2, #1
   1a494:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    }
    rc = 0;
   1a498:	2000      	movs	r0, #0
   1a49a:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a49c:	2016      	movs	r0, #22
   1a49e:	4770      	bx	lr
   1a4a0:	2016      	movs	r0, #22
   1a4a2:	4770      	bx	lr
            rc = EINVAL;
   1a4a4:	2016      	movs	r0, #22

err:
    return rc;
}
   1a4a6:	4770      	bx	lr
   1a4a8:	00022518 	.word	0x00022518

0001a4ac <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a4ac:	2802      	cmp	r0, #2
   1a4ae:	dc2a      	bgt.n	1a506 <hal_spi_disable+0x5a>
{
   1a4b0:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a4b2:	4b17      	ldr	r3, [pc, #92]	; (1a510 <hal_spi_disable+0x64>)
   1a4b4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1a4b8:	b33c      	cbz	r4, 1a50a <hal_spi_disable+0x5e>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1a4ba:	7823      	ldrb	r3, [r4, #0]
   1a4bc:	b9ab      	cbnz	r3, 1a4ea <hal_spi_disable+0x3e>
        spim = spi->nhs_spi.spim;
   1a4be:	6925      	ldr	r5, [r4, #16]
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1a4c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a4c4:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308

        if (spi->spi_xfr_flag) {
   1a4c8:	7863      	ldrb	r3, [r4, #1]
   1a4ca:	b943      	cbnz	r3, 1a4de <hal_spi_disable+0x32>
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
        }
        spim->ENABLE = 0;
   1a4cc:	2300      	movs	r3, #0
   1a4ce:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
   1a4d2:	2000      	movs	r0, #0
   1a4d4:	61a0      	str	r0, [r4, #24]
    spi->nhs_rxbuf = NULL;
   1a4d6:	61e0      	str	r0, [r4, #28]
    spi->nhs_buflen = 0;
   1a4d8:	80a0      	strh	r0, [r4, #4]
    spi->nhs_bytes_txd = 0;
   1a4da:	80e0      	strh	r0, [r4, #6]

    rc = 0;

err:
    return rc;
}
   1a4dc:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_stop_transfer(spim);
   1a4de:	4628      	mov	r0, r5
   1a4e0:	f7ff fea6 	bl	1a230 <hal_spi_stop_transfer>
            spi->spi_xfr_flag = 0;
   1a4e4:	2300      	movs	r3, #0
   1a4e6:	7063      	strb	r3, [r4, #1]
   1a4e8:	e7f0      	b.n	1a4cc <hal_spi_disable+0x20>
        spis = spi->nhs_spi.spis;
   1a4ea:	6922      	ldr	r2, [r4, #16]
        spis->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1a4ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a4f0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        spis->EVENTS_END = 0;
   1a4f4:	2300      	movs	r3, #0
   1a4f6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   1a4fa:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
        spis->ENABLE = 0;
   1a4fe:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
   1a502:	70e3      	strb	r3, [r4, #3]
   1a504:	e7e5      	b.n	1a4d2 <hal_spi_disable+0x26>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a506:	2016      	movs	r0, #22
}
   1a508:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a50a:	2016      	movs	r0, #22
    return rc;
   1a50c:	e7e6      	b.n	1a4dc <hal_spi_disable+0x30>
   1a50e:	bf00      	nop
   1a510:	00022518 	.word	0x00022518

0001a514 <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a514:	2802      	cmp	r0, #2
   1a516:	dc1d      	bgt.n	1a554 <hal_spi_init+0x40>
{
   1a518:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a51a:	4b13      	ldr	r3, [pc, #76]	; (1a568 <hal_spi_init+0x54>)
   1a51c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1a520:	b1d4      	cbz	r4, 1a558 <hal_spi_init+0x44>
    if (cfg == NULL) {
   1a522:	b1d9      	cbz	r1, 1a55c <hal_spi_init+0x48>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
   1a524:	2a01      	cmp	r2, #1
   1a526:	d81b      	bhi.n	1a560 <hal_spi_init+0x4c>
    spi->spi_type  = spi_type;
   1a528:	7022      	strb	r2, [r4, #0]
    if (spi_num == 0) {
   1a52a:	b9d8      	cbnz	r0, 1a564 <hal_spi_init+0x50>
   1a52c:	460d      	mov	r5, r1
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
   1a52e:	2303      	movs	r3, #3
   1a530:	7523      	strb	r3, [r4, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
   1a532:	b94a      	cbnz	r2, 1a548 <hal_spi_init+0x34>
            spi->nhs_spi.spim = NRF_SPIM0;
   1a534:	4b0d      	ldr	r3, [pc, #52]	; (1a56c <hal_spi_init+0x58>)
   1a536:	6123      	str	r3, [r4, #16]
    hal_spi_disable(spi_num);
   1a538:	f7ff ffb8 	bl	1a4ac <hal_spi_disable>
        rc = hal_spi_init_master(spi, (struct nrf52_hal_spi_cfg *)cfg,
   1a53c:	4a0c      	ldr	r2, [pc, #48]	; (1a570 <hal_spi_init+0x5c>)
   1a53e:	4629      	mov	r1, r5
   1a540:	4620      	mov	r0, r4
   1a542:	f7ff fea5 	bl	1a290 <hal_spi_init_master>
   1a546:	e00c      	b.n	1a562 <hal_spi_init+0x4e>
            assert(0);
   1a548:	2300      	movs	r3, #0
   1a54a:	461a      	mov	r2, r3
   1a54c:	4619      	mov	r1, r3
   1a54e:	4618      	mov	r0, r3
   1a550:	f000 f952 	bl	1a7f8 <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a554:	2016      	movs	r0, #22
}
   1a556:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a558:	2016      	movs	r0, #22
   1a55a:	e002      	b.n	1a562 <hal_spi_init+0x4e>
    rc = EINVAL;
   1a55c:	2016      	movs	r0, #22
   1a55e:	e000      	b.n	1a562 <hal_spi_init+0x4e>
   1a560:	2016      	movs	r0, #22
}
   1a562:	bd38      	pop	{r3, r4, r5, pc}
    rc = EINVAL;
   1a564:	2016      	movs	r0, #22
    return (rc);
   1a566:	e7fc      	b.n	1a562 <hal_spi_init+0x4e>
   1a568:	00022518 	.word	0x00022518
   1a56c:	40003000 	.word	0x40003000
   1a570:	0001a219 	.word	0x0001a219

0001a574 <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a574:	2802      	cmp	r0, #2
   1a576:	dc0a      	bgt.n	1a58e <hal_spi_set_txrx_cb+0x1a>
   1a578:	4b08      	ldr	r3, [pc, #32]	; (1a59c <hal_spi_set_txrx_cb+0x28>)
   1a57a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1a57e:	b143      	cbz	r3, 1a592 <hal_spi_set_txrx_cb+0x1e>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   1a580:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
   1a582:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
   1a586:	b930      	cbnz	r0, 1a596 <hal_spi_set_txrx_cb+0x22>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
   1a588:	6219      	str	r1, [r3, #32]
        spi->txrx_cb_arg = arg;
   1a58a:	625a      	str	r2, [r3, #36]	; 0x24
   1a58c:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a58e:	2016      	movs	r0, #22
   1a590:	4770      	bx	lr
   1a592:	2016      	movs	r0, #22
   1a594:	4770      	bx	lr
        rc = -1;
   1a596:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        rc = 0;
    }

err:
    return rc;
}
   1a59a:	4770      	bx	lr
   1a59c:	00022518 	.word	0x00022518

0001a5a0 <hal_spi_txrx>:
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
   1a5a0:	2b00      	cmp	r3, #0
   1a5a2:	d046      	beq.n	1a632 <hal_spi_txrx+0x92>
{
   1a5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a5a6:	460d      	mov	r5, r1
   1a5a8:	4617      	mov	r7, r2
   1a5aa:	461e      	mov	r6, r3
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
   1a5ac:	2802      	cmp	r0, #2
   1a5ae:	dc42      	bgt.n	1a636 <hal_spi_txrx+0x96>
   1a5b0:	4b25      	ldr	r3, [pc, #148]	; (1a648 <hal_spi_txrx+0xa8>)
   1a5b2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1a5b6:	2b00      	cmp	r3, #0
   1a5b8:	d03f      	beq.n	1a63a <hal_spi_txrx+0x9a>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1a5ba:	781a      	ldrb	r2, [r3, #0]
   1a5bc:	2a00      	cmp	r2, #0
   1a5be:	d13e      	bne.n	1a63e <hal_spi_txrx+0x9e>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   1a5c0:	2900      	cmp	r1, #0
   1a5c2:	d03e      	beq.n	1a642 <hal_spi_txrx+0xa2>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
   1a5c4:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
   1a5c6:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
   1a5ca:	2b07      	cmp	r3, #7
   1a5cc:	d004      	beq.n	1a5d8 <hal_spi_txrx+0x38>
            hal_spi_disable(spi_num);
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
   1a5ce:	b95b      	cbnz	r3, 1a5e8 <hal_spi_txrx+0x48>
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1a5d0:	2301      	movs	r3, #1
   1a5d2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   1a5d6:	e007      	b.n	1a5e8 <hal_spi_txrx+0x48>
            hal_spi_disable(spi_num);
   1a5d8:	f7ff ff68 	bl	1a4ac <hal_spi_disable>
   1a5dc:	e7f8      	b.n	1a5d0 <hal_spi_txrx+0x30>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
   1a5de:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
   1a5e2:	2300      	movs	r3, #0
   1a5e4:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        while (spi->EVENTS_READY) {
   1a5e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a5ec:	2b00      	cmp	r3, #0
   1a5ee:	d1f6      	bne.n	1a5de <hal_spi_txrx+0x3e>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
   1a5f0:	782b      	ldrb	r3, [r5, #0]
   1a5f2:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
   1a5f6:	1e71      	subs	r1, r6, #1
        rxd = (uint8_t *)rxbuf;
   1a5f8:	4638      	mov	r0, r7
        for (i = 0; i < len; ++i) {
   1a5fa:	2200      	movs	r2, #0
   1a5fc:	e00d      	b.n	1a61a <hal_spi_txrx+0x7a>
            if (txcnt) {
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
   1a5fe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a602:	2b00      	cmp	r3, #0
   1a604:	d0fb      	beq.n	1a5fe <hal_spi_txrx+0x5e>
            spi->EVENTS_READY = 0;
   1a606:	2300      	movs	r3, #0
   1a608:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
   1a60c:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
   1a610:	b2db      	uxtb	r3, r3
            if (rxbuf) {
   1a612:	b10f      	cbz	r7, 1a618 <hal_spi_txrx+0x78>
                *rxd = rxval;
   1a614:	f800 3b01 	strb.w	r3, [r0], #1
        for (i = 0; i < len; ++i) {
   1a618:	3201      	adds	r2, #1
   1a61a:	42b2      	cmp	r2, r6
   1a61c:	da07      	bge.n	1a62e <hal_spi_txrx+0x8e>
            if (txcnt) {
   1a61e:	2900      	cmp	r1, #0
   1a620:	d0ed      	beq.n	1a5fe <hal_spi_txrx+0x5e>
                spi->TXD = *txd;
   1a622:	786b      	ldrb	r3, [r5, #1]
   1a624:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
                --txcnt;
   1a628:	3901      	subs	r1, #1
                ++txd;
   1a62a:	3501      	adds	r5, #1
   1a62c:	e7e7      	b.n	1a5fe <hal_spi_txrx+0x5e>
                ++rxd;
            }
        }
        return 0;
   1a62e:	2000      	movs	r0, #0
    }

err:
    return rc;
}
   1a630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return rc;
   1a632:	2016      	movs	r0, #22
}
   1a634:	4770      	bx	lr
    return rc;
   1a636:	2016      	movs	r0, #22
   1a638:	e7fa      	b.n	1a630 <hal_spi_txrx+0x90>
   1a63a:	2016      	movs	r0, #22
   1a63c:	e7f8      	b.n	1a630 <hal_spi_txrx+0x90>
   1a63e:	2016      	movs	r0, #22
   1a640:	e7f6      	b.n	1a630 <hal_spi_txrx+0x90>
   1a642:	2016      	movs	r0, #22
   1a644:	e7f4      	b.n	1a630 <hal_spi_txrx+0x90>
   1a646:	bf00      	nop
   1a648:	00022518 	.word	0x00022518

0001a64c <hal_spi_txrx_noblock>:
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    rc = EINVAL;
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a64c:	2802      	cmp	r0, #2
   1a64e:	dc57      	bgt.n	1a700 <hal_spi_txrx_noblock+0xb4>
{
   1a650:	b430      	push	{r4, r5}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a652:	4c35      	ldr	r4, [pc, #212]	; (1a728 <hal_spi_txrx_noblock+0xdc>)
   1a654:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   1a658:	2800      	cmp	r0, #0
   1a65a:	d053      	beq.n	1a704 <hal_spi_txrx_noblock+0xb8>

    if ((spi->txrx_cb_func == NULL) || (len == 0)) {
   1a65c:	6a04      	ldr	r4, [r0, #32]
   1a65e:	2c00      	cmp	r4, #0
   1a660:	d052      	beq.n	1a708 <hal_spi_txrx_noblock+0xbc>
   1a662:	2b00      	cmp	r3, #0
   1a664:	d052      	beq.n	1a70c <hal_spi_txrx_noblock+0xc0>
        }
        return rc;
    }
#endif

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1a666:	7804      	ldrb	r4, [r0, #0]
   1a668:	2c00      	cmp	r4, #0
   1a66a:	d137      	bne.n	1a6dc <hal_spi_txrx_noblock+0x90>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   1a66c:	2900      	cmp	r1, #0
   1a66e:	d050      	beq.n	1a712 <hal_spi_txrx_noblock+0xc6>
            goto err;
        }

        /* Not allowed if transfer in progress */
        if (spi->spi_xfr_flag) {
   1a670:	7844      	ldrb	r4, [r0, #1]
   1a672:	2c00      	cmp	r4, #0
   1a674:	d14f      	bne.n	1a716 <hal_spi_txrx_noblock+0xca>
            rc = -1;
            goto err;
        }
        spim = spi->nhs_spi.spim;
   1a676:	6904      	ldr	r4, [r0, #16]
        spim->INTENCLR = SPIM_INTENCLR_END_Msk;
   1a678:	2540      	movs	r5, #64	; 0x40
   1a67a:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
        spi->spi_xfr_flag = 1;
   1a67e:	2501      	movs	r5, #1
   1a680:	7045      	strb	r5, [r0, #1]

        /* Must be enabled for SPIM as opposed to SPI */
        if (spim->ENABLE != SPIM_ENABLE_ENABLE_Enabled) {
   1a682:	f8d4 5500 	ldr.w	r5, [r4, #1280]	; 0x500
   1a686:	2d07      	cmp	r5, #7
   1a688:	d005      	beq.n	1a696 <hal_spi_txrx_noblock+0x4a>
            spim->ENABLE = 0;
   1a68a:	2500      	movs	r5, #0
   1a68c:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
            spim->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   1a690:	2507      	movs	r5, #7
   1a692:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
        }

        /* Set internal data structure information */
        spi->nhs_bytes_txd = 0;
   1a696:	2500      	movs	r5, #0
   1a698:	80c5      	strh	r5, [r0, #6]
        spi->nhs_buflen = len;
   1a69a:	8083      	strh	r3, [r0, #4]
        spi->nhs_txbuf = txbuf;
   1a69c:	6181      	str	r1, [r0, #24]

        len = min(SPIM_TXD_MAXCNT_MAX, len);
   1a69e:	2bff      	cmp	r3, #255	; 0xff
   1a6a0:	bfa8      	it	ge
   1a6a2:	23ff      	movge	r3, #255	; 0xff

        /* Set chip registers */
        spim->TXD.PTR = (uint32_t)txbuf;
   1a6a4:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        spim->TXD.MAXCNT = len;
   1a6a8:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548

        /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
        spi->nhs_rxbuf = rxbuf;
   1a6ac:	61c2      	str	r2, [r0, #28]
        if (rxbuf == NULL) {
   1a6ae:	b172      	cbz	r2, 1a6ce <hal_spi_txrx_noblock+0x82>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
            spim->RXD.MAXCNT = 1;
        } else {
            spim->RXD.PTR = (uint32_t)rxbuf;
   1a6b0:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = len;
   1a6b4:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
        }

        spim->EVENTS_END = 0;
   1a6b8:	2000      	movs	r0, #0
   1a6ba:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
        spim->EVENTS_STOPPED = 0;
   1a6be:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
        spim->TASKS_START = 1;
   1a6c2:	2301      	movs	r3, #1
   1a6c4:	6123      	str	r3, [r4, #16]
        spim->INTENSET = SPIM_INTENSET_END_Msk;
   1a6c6:	2340      	movs	r3, #64	; 0x40
   1a6c8:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   1a6cc:	e01f      	b.n	1a70e <hal_spi_txrx_noblock+0xc2>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
   1a6ce:	3002      	adds	r0, #2
   1a6d0:	f8c4 0534 	str.w	r0, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = 1;
   1a6d4:	2301      	movs	r3, #1
   1a6d6:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
   1a6da:	e7ed      	b.n	1a6b8 <hal_spi_txrx_noblock+0x6c>
    } else {
        /* Must have txbuf or rxbuf */
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   1a6dc:	b161      	cbz	r1, 1a6f8 <hal_spi_txrx_noblock+0xac>
            goto err;
        }

        /* XXX: what to do here? */
        if (len > 255) {
   1a6de:	2bff      	cmp	r3, #255	; 0xff
   1a6e0:	dc1c      	bgt.n	1a71c <hal_spi_txrx_noblock+0xd0>
        /*
         * Ready the slave for a transfer. Do not allow this to be called
         * if the slave has already been readied or is requesting the
         * semaphore
         */
        if (spi->slave_state != HAL_SPI_SLAVE_STATE_IDLE) {
   1a6e2:	78c4      	ldrb	r4, [r0, #3]
   1a6e4:	b9e4      	cbnz	r4, 1a720 <hal_spi_txrx_noblock+0xd4>
            rc = -1;
            goto err;
        }

        spi->nhs_rxbuf = rxbuf;
   1a6e6:	61c2      	str	r2, [r0, #28]
        spi->nhs_txbuf = txbuf;
   1a6e8:	6181      	str	r1, [r0, #24]
        spi->nhs_buflen = len;
   1a6ea:	8083      	strh	r3, [r0, #4]
        spi->slave_state = HAL_SPI_SLAVE_STATE_ACQ_SEM;
   1a6ec:	2301      	movs	r3, #1
   1a6ee:	70c3      	strb	r3, [r0, #3]
        spi->nhs_spi.spis->TASKS_ACQUIRE = 1;
   1a6f0:	6902      	ldr	r2, [r0, #16]
   1a6f2:	6253      	str	r3, [r2, #36]	; 0x24
    }
    return 0;
   1a6f4:	2000      	movs	r0, #0
   1a6f6:	e00a      	b.n	1a70e <hal_spi_txrx_noblock+0xc2>
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   1a6f8:	2a00      	cmp	r2, #0
   1a6fa:	d1f0      	bne.n	1a6de <hal_spi_txrx_noblock+0x92>
    rc = EINVAL;
   1a6fc:	2016      	movs	r0, #22
   1a6fe:	e006      	b.n	1a70e <hal_spi_txrx_noblock+0xc2>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a700:	2016      	movs	r0, #22

err:
    return rc;
}
   1a702:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a704:	2016      	movs	r0, #22
   1a706:	e002      	b.n	1a70e <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   1a708:	2016      	movs	r0, #22
   1a70a:	e000      	b.n	1a70e <hal_spi_txrx_noblock+0xc2>
   1a70c:	2016      	movs	r0, #22
}
   1a70e:	bc30      	pop	{r4, r5}
   1a710:	4770      	bx	lr
    rc = EINVAL;
   1a712:	2016      	movs	r0, #22
   1a714:	e7fb      	b.n	1a70e <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   1a716:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a71a:	e7f8      	b.n	1a70e <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   1a71c:	2016      	movs	r0, #22
   1a71e:	e7f6      	b.n	1a70e <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   1a720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a724:	e7f3      	b.n	1a70e <hal_spi_txrx_noblock+0xc2>
   1a726:	bf00      	nop
   1a728:	00022518 	.word	0x00022518

0001a72c <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
   1a72c:	b508      	push	{r3, lr}
    assert(0);
   1a72e:	2300      	movs	r3, #0
   1a730:	461a      	mov	r2, r3
   1a732:	4619      	mov	r1, r3
   1a734:	4618      	mov	r0, r3
   1a736:	f000 f85f 	bl	1a7f8 <__assert_func>
	...

0001a73c <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
   1a73c:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
   1a73e:	4b06      	ldr	r3, [pc, #24]	; (1a758 <nrf52_wdt_irq_handler+0x1c>)
   1a740:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   1a744:	f013 0f01 	tst.w	r3, #1
   1a748:	d100      	bne.n	1a74c <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
   1a74a:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
   1a74c:	4b02      	ldr	r3, [pc, #8]	; (1a758 <nrf52_wdt_irq_handler+0x1c>)
   1a74e:	2200      	movs	r2, #0
   1a750:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
   1a754:	f7ff ffea 	bl	1a72c <nrf52_hal_wdt_default_handler>
   1a758:	40010000 	.word	0x40010000

0001a75c <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
   1a75c:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
   1a75e:	4b17      	ldr	r3, [pc, #92]	; (1a7bc <hal_watchdog_init+0x60>)
   1a760:	2201      	movs	r2, #1
   1a762:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
   1a766:	4b16      	ldr	r3, [pc, #88]	; (1a7c0 <hal_watchdog_init+0x64>)
   1a768:	4298      	cmp	r0, r3
   1a76a:	d821      	bhi.n	1a7b0 <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
   1a76c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   1a770:	0153      	lsls	r3, r2, #5
   1a772:	4a14      	ldr	r2, [pc, #80]	; (1a7c4 <hal_watchdog_init+0x68>)
   1a774:	fba2 2303 	umull	r2, r3, r2, r3
   1a778:	08db      	lsrs	r3, r3, #3
   1a77a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1a77e:	4b0f      	ldr	r3, [pc, #60]	; (1a7bc <hal_watchdog_init+0x60>)
   1a780:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a784:	4a10      	ldr	r2, [pc, #64]	; (1a7c8 <hal_watchdog_init+0x6c>)
   1a786:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a788:	4910      	ldr	r1, [pc, #64]	; (1a7cc <hal_watchdog_init+0x70>)
   1a78a:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a78e:	4a10      	ldr	r2, [pc, #64]	; (1a7d0 <hal_watchdog_init+0x74>)
   1a790:	21e0      	movs	r1, #224	; 0xe0
   1a792:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a796:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1a79a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a79e:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
   1a7a0:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
   1a7a4:	f042 0201 	orr.w	r2, r2, #1
   1a7a8:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
   1a7ac:	2000      	movs	r0, #0
   1a7ae:	bd08      	pop	{r3, pc}
        assert(0);
   1a7b0:	2300      	movs	r3, #0
   1a7b2:	461a      	mov	r2, r3
   1a7b4:	4619      	mov	r1, r3
   1a7b6:	4618      	mov	r0, r3
   1a7b8:	f000 f81e 	bl	1a7f8 <__assert_func>
   1a7bc:	40010000 	.word	0x40010000
   1a7c0:	02aaaaaa 	.word	0x02aaaaaa
   1a7c4:	10624dd3 	.word	0x10624dd3
   1a7c8:	e000ed00 	.word	0xe000ed00
   1a7cc:	0001a73d 	.word	0x0001a73d
   1a7d0:	e000e100 	.word	0xe000e100

0001a7d4 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    NRF_WDT->INTENSET = WDT_INTENSET_TIMEOUT_Msk;
   1a7d4:	4b02      	ldr	r3, [pc, #8]	; (1a7e0 <hal_watchdog_enable+0xc>)
   1a7d6:	2201      	movs	r2, #1
   1a7d8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NRF_WDT->TASKS_START = 1;
   1a7dc:	601a      	str	r2, [r3, #0]
}
   1a7de:	4770      	bx	lr
   1a7e0:	40010000 	.word	0x40010000

0001a7e4 <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    NRF_WDT->RR[0] = WDT_RR_RR_Reload;
   1a7e4:	4b02      	ldr	r3, [pc, #8]	; (1a7f0 <hal_watchdog_tickle+0xc>)
   1a7e6:	4a03      	ldr	r2, [pc, #12]	; (1a7f4 <hal_watchdog_tickle+0x10>)
   1a7e8:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
   1a7ec:	4770      	bx	lr
   1a7ee:	bf00      	nop
   1a7f0:	40010000 	.word	0x40010000
   1a7f4:	6e524635 	.word	0x6e524635

0001a7f8 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
   1a7f8:	b508      	push	{r3, lr}
   1a7fa:	4675      	mov	r5, lr
   1a7fc:	4604      	mov	r4, r0
   1a7fe:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
   1a800:	f001 fa90 	bl	1bd24 <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
   1a804:	f7ff f905 	bl	19a12 <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
   1a808:	b18c      	cbz	r4, 1a82e <__assert_func+0x36>
   1a80a:	4633      	mov	r3, r6
   1a80c:	4622      	mov	r2, r4
   1a80e:	4629      	mov	r1, r5
   1a810:	4809      	ldr	r0, [pc, #36]	; (1a838 <__assert_func+0x40>)
   1a812:	f7ff f929 	bl	19a68 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
   1a816:	f7ed fcb5 	bl	8184 <hal_debugger_connected>
   1a81a:	b100      	cbz	r0, 1a81e <__assert_func+0x26>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
   1a81c:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
   1a81e:	4b07      	ldr	r3, [pc, #28]	; (1a83c <__assert_func+0x44>)
   1a820:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1a824:	605a      	str	r2, [r3, #4]
    asm("isb");
   1a826:	f3bf 8f6f 	isb	sy
    hal_system_reset();
   1a82a:	f7ed fcb3 	bl	8194 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
   1a82e:	4629      	mov	r1, r5
   1a830:	4803      	ldr	r0, [pc, #12]	; (1a840 <__assert_func+0x48>)
   1a832:	f7ff f919 	bl	19a68 <console_printf>
   1a836:	e7ee      	b.n	1a816 <__assert_func+0x1e>
   1a838:	00022534 	.word	0x00022534
   1a83c:	e000ed00 	.word	0xe000ed00
   1a840:	00022524 	.word	0x00022524

0001a844 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
   1a844:	b500      	push	{lr}
   1a846:	b083      	sub	sp, #12
   1a848:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
   1a84a:	f7ff f8e2 	bl	19a12 <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
   1a84e:	4d1b      	ldr	r5, [pc, #108]	; (1a8bc <os_default_irq+0x78>)
   1a850:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
   1a852:	6822      	ldr	r2, [r4, #0]
   1a854:	f3c1 0108 	ubfx	r1, r1, #0, #9
   1a858:	4819      	ldr	r0, [pc, #100]	; (1a8c0 <os_default_irq+0x7c>)
   1a85a:	f7ff f905 	bl	19a68 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
   1a85e:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
   1a860:	6883      	ldr	r3, [r0, #8]
   1a862:	6842      	ldr	r2, [r0, #4]
   1a864:	6801      	ldr	r1, [r0, #0]
   1a866:	68c0      	ldr	r0, [r0, #12]
   1a868:	9000      	str	r0, [sp, #0]
   1a86a:	4816      	ldr	r0, [pc, #88]	; (1a8c4 <os_default_irq+0x80>)
   1a86c:	f7ff f8fc 	bl	19a68 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
   1a870:	6923      	ldr	r3, [r4, #16]
   1a872:	9300      	str	r3, [sp, #0]
   1a874:	68e3      	ldr	r3, [r4, #12]
   1a876:	68a2      	ldr	r2, [r4, #8]
   1a878:	6861      	ldr	r1, [r4, #4]
   1a87a:	4813      	ldr	r0, [pc, #76]	; (1a8c8 <os_default_irq+0x84>)
   1a87c:	f7ff f8f4 	bl	19a68 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
   1a880:	6a23      	ldr	r3, [r4, #32]
   1a882:	9300      	str	r3, [sp, #0]
   1a884:	69e3      	ldr	r3, [r4, #28]
   1a886:	69a2      	ldr	r2, [r4, #24]
   1a888:	6961      	ldr	r1, [r4, #20]
   1a88a:	4810      	ldr	r0, [pc, #64]	; (1a8cc <os_default_irq+0x88>)
   1a88c:	f7ff f8ec 	bl	19a68 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
   1a890:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
   1a892:	6983      	ldr	r3, [r0, #24]
   1a894:	6942      	ldr	r2, [r0, #20]
   1a896:	6901      	ldr	r1, [r0, #16]
   1a898:	69c0      	ldr	r0, [r0, #28]
   1a89a:	9000      	str	r0, [sp, #0]
   1a89c:	480c      	ldr	r0, [pc, #48]	; (1a8d0 <os_default_irq+0x8c>)
   1a89e:	f7ff f8e3 	bl	19a68 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
   1a8a2:	6869      	ldr	r1, [r5, #4]
   1a8a4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   1a8a6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1a8a8:	480a      	ldr	r0, [pc, #40]	; (1a8d4 <os_default_irq+0x90>)
   1a8aa:	f7ff f8dd 	bl	19a68 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
   1a8ae:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   1a8b0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   1a8b2:	4809      	ldr	r0, [pc, #36]	; (1a8d8 <os_default_irq+0x94>)
   1a8b4:	f7ff f8d8 	bl	19a68 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
   1a8b8:	f7ed fc6c 	bl	8194 <hal_system_reset>
   1a8bc:	e000ed00 	.word	0xe000ed00
   1a8c0:	0002254c 	.word	0x0002254c
   1a8c4:	00022580 	.word	0x00022580
   1a8c8:	000225b4 	.word	0x000225b4
   1a8cc:	000225e8 	.word	0x000225e8
   1a8d0:	0002261c 	.word	0x0002261c
   1a8d4:	00022650 	.word	0x00022650
   1a8d8:	00022678 	.word	0x00022678

0001a8dc <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
   1a8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_time_t sanity_itvl_ticks;

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

    hal_watchdog_tickle();
   1a8de:	f7ff ff81 	bl	1a7e4 <hal_watchdog_tickle>
    sanity_last = 0;
   1a8e2:	2500      	movs	r5, #0
   1a8e4:	e00b      	b.n	1a8fe <os_idle_task+0x22>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
   1a8e6:	f000 fec7 	bl	1b678 <os_sanity_run>
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
   1a8ea:	f7ff ff7b 	bl	1a7e4 <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
            sanity_last = now;
   1a8ee:	4625      	mov	r5, r4
   1a8f0:	e011      	b.n	1a916 <os_idle_task+0x3a>
         * as the idle task does not schedule itself.
         */
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
   1a8f2:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
   1a8f4:	f002 f842 	bl	1c97c <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
   1a8f8:	4638      	mov	r0, r7
   1a8fa:	f001 fa19 	bl	1bd30 <os_arch_restore_sr>
        ++g_os_idle_ctr;
   1a8fe:	4a14      	ldr	r2, [pc, #80]	; (1a950 <os_idle_task+0x74>)
   1a900:	6813      	ldr	r3, [r2, #0]
   1a902:	3301      	adds	r3, #1
   1a904:	6013      	str	r3, [r2, #0]
        now = os_time_get();
   1a906:	f001 f995 	bl	1bc34 <os_time_get>
   1a90a:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
   1a90c:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   1a910:	1ac3      	subs	r3, r0, r3
   1a912:	2b00      	cmp	r3, #0
   1a914:	dce7      	bgt.n	1a8e6 <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
   1a916:	f001 fa05 	bl	1bd24 <os_arch_save_sr>
   1a91a:	4607      	mov	r7, r0
        now = os_time_get();
   1a91c:	f001 f98a 	bl	1bc34 <os_time_get>
   1a920:	4606      	mov	r6, r0
        sticks = os_sched_wakeup_ticks(now);
   1a922:	f000 ffd7 	bl	1b8d4 <os_sched_wakeup_ticks>
   1a926:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
   1a928:	4630      	mov	r0, r6
   1a92a:	f000 f975 	bl	1ac18 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
   1a92e:	42a0      	cmp	r0, r4
   1a930:	bf28      	it	cs
   1a932:	4620      	movcs	r0, r4
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
   1a934:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   1a938:	1b9b      	subs	r3, r3, r6
   1a93a:	4298      	cmp	r0, r3
   1a93c:	bf28      	it	cs
   1a93e:	4618      	movcs	r0, r3
        if (iticks < MIN_IDLE_TICKS) {
   1a940:	280b      	cmp	r0, #11
   1a942:	d9d6      	bls.n	1a8f2 <os_idle_task+0x16>
        } else if (iticks > MAX_IDLE_TICKS) {
   1a944:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   1a948:	d9d4      	bls.n	1a8f4 <os_idle_task+0x18>
            iticks = MAX_IDLE_TICKS;
   1a94a:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
   1a94e:	e7d1      	b.n	1a8f4 <os_idle_task+0x18>
   1a950:	2000de8c 	.word	0x2000de8c

0001a954 <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
   1a954:	b508      	push	{r3, lr}
   1a956:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
   1a958:	2100      	movs	r1, #0
   1a95a:	4608      	mov	r0, r1
   1a95c:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
   1a95e:	2300      	movs	r3, #0
   1a960:	461a      	mov	r2, r3
   1a962:	4619      	mov	r1, r3
   1a964:	4618      	mov	r0, r3
   1a966:	f7ff ff47 	bl	1a7f8 <__assert_func>
	...

0001a96c <os_started>:
}
   1a96c:	4b01      	ldr	r3, [pc, #4]	; (1a974 <os_started+0x8>)
   1a96e:	6818      	ldr	r0, [r3, #0]
   1a970:	4770      	bx	lr
   1a972:	bf00      	nop
   1a974:	2000de88 	.word	0x2000de88

0001a978 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
   1a978:	b500      	push	{lr}
   1a97a:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
   1a97c:	2340      	movs	r3, #64	; 0x40
   1a97e:	9303      	str	r3, [sp, #12]
   1a980:	4b15      	ldr	r3, [pc, #84]	; (1a9d8 <os_init_idle_task+0x60>)
   1a982:	9302      	str	r3, [sp, #8]
   1a984:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a988:	9301      	str	r3, [sp, #4]
   1a98a:	23ff      	movs	r3, #255	; 0xff
   1a98c:	9300      	str	r3, [sp, #0]
   1a98e:	2300      	movs	r3, #0
   1a990:	4a12      	ldr	r2, [pc, #72]	; (1a9dc <os_init_idle_task+0x64>)
   1a992:	4913      	ldr	r1, [pc, #76]	; (1a9e0 <os_init_idle_task+0x68>)
   1a994:	4813      	ldr	r0, [pc, #76]	; (1a9e4 <os_init_idle_task+0x6c>)
   1a996:	f001 f88d 	bl	1bab4 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
   1a99a:	b950      	cbnz	r0, 1a9b2 <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
   1a99c:	f000 fea2 	bl	1b6e4 <os_sanity_init>
    assert(rc == 0);
   1a9a0:	b968      	cbnz	r0, 1a9be <os_init_idle_task+0x46>

    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
   1a9a2:	f247 5030 	movw	r0, #30000	; 0x7530
   1a9a6:	f7ff fed9 	bl	1a75c <hal_watchdog_init>
    assert(rc == 0);
   1a9aa:	b970      	cbnz	r0, 1a9ca <os_init_idle_task+0x52>

#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
}
   1a9ac:	b005      	add	sp, #20
   1a9ae:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   1a9b2:	2300      	movs	r3, #0
   1a9b4:	461a      	mov	r2, r3
   1a9b6:	4619      	mov	r1, r3
   1a9b8:	4618      	mov	r0, r3
   1a9ba:	f7ff ff1d 	bl	1a7f8 <__assert_func>
    assert(rc == 0);
   1a9be:	2300      	movs	r3, #0
   1a9c0:	461a      	mov	r2, r3
   1a9c2:	4619      	mov	r1, r3
   1a9c4:	4618      	mov	r0, r3
   1a9c6:	f7ff ff17 	bl	1a7f8 <__assert_func>
    assert(rc == 0);
   1a9ca:	2300      	movs	r3, #0
   1a9cc:	461a      	mov	r2, r3
   1a9ce:	4619      	mov	r1, r3
   1a9d0:	4618      	mov	r0, r3
   1a9d2:	f7ff ff11 	bl	1a7f8 <__assert_func>
   1a9d6:	bf00      	nop
   1a9d8:	20006f70 	.word	0x20006f70
   1a9dc:	0001a8dd 	.word	0x0001a8dd
   1a9e0:	0002269c 	.word	0x0002269c
   1a9e4:	2000dde8 	.word	0x2000dde8

0001a9e8 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
   1a9e8:	b510      	push	{r4, lr}
   1a9ea:	b084      	sub	sp, #16
   1a9ec:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
   1a9ee:	4b24      	ldr	r3, [pc, #144]	; (1aa80 <os_init+0x98>)
   1a9f0:	2200      	movs	r2, #0
   1a9f2:	601a      	str	r2, [r3, #0]
   1a9f4:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
   1a9f6:	4b23      	ldr	r3, [pc, #140]	; (1aa84 <os_init+0x9c>)
   1a9f8:	601a      	str	r2, [r3, #0]
   1a9fa:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
   1a9fc:	f000 faba 	bl	1af74 <os_eventq_dflt_get>
   1aa00:	f000 fa0e 	bl	1ae20 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
   1aa04:	f000 fa04 	bl	1ae10 <os_dev_reset>

    err = os_arch_os_init();
   1aa08:	f001 f9c6 	bl	1bd98 <os_arch_os_init>
    assert(err == OS_OK);
   1aa0c:	bb00      	cbnz	r0, 1aa50 <os_init+0x68>

    if (main_fn) {
   1aa0e:	b18c      	cbz	r4, 1aa34 <os_init+0x4c>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
   1aa10:	f44f 6300 	mov.w	r3, #2048	; 0x800
   1aa14:	9303      	str	r3, [sp, #12]
   1aa16:	4b1c      	ldr	r3, [pc, #112]	; (1aa88 <os_init+0xa0>)
   1aa18:	9302      	str	r3, [sp, #8]
   1aa1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1aa1e:	9301      	str	r3, [sp, #4]
   1aa20:	237f      	movs	r3, #127	; 0x7f
   1aa22:	9300      	str	r3, [sp, #0]
   1aa24:	4623      	mov	r3, r4
   1aa26:	4a19      	ldr	r2, [pc, #100]	; (1aa8c <os_init+0xa4>)
   1aa28:	4919      	ldr	r1, [pc, #100]	; (1aa90 <os_init+0xa8>)
   1aa2a:	481a      	ldr	r0, [pc, #104]	; (1aa94 <os_init+0xac>)
   1aa2c:	f001 f842 	bl	1bab4 <os_task_init>
   1aa30:	b2c0      	uxtb	r0, r0
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
   1aa32:	b998      	cbnz	r0, 1aa5c <os_init+0x74>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
   1aa34:	f001 fe72 	bl	1c71c <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
   1aa38:	2001      	movs	r0, #1
   1aa3a:	f000 f985 	bl	1ad48 <os_dev_initialize_all>
   1aa3e:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   1aa40:	b990      	cbnz	r0, 1aa68 <os_init+0x80>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
   1aa42:	2002      	movs	r0, #2
   1aa44:	f000 f980 	bl	1ad48 <os_dev_initialize_all>
   1aa48:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   1aa4a:	b998      	cbnz	r0, 1aa74 <os_init+0x8c>
}
   1aa4c:	b004      	add	sp, #16
   1aa4e:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
   1aa50:	2300      	movs	r3, #0
   1aa52:	461a      	mov	r2, r3
   1aa54:	4619      	mov	r1, r3
   1aa56:	4618      	mov	r0, r3
   1aa58:	f7ff fece 	bl	1a7f8 <__assert_func>
        assert(err == 0);
   1aa5c:	2300      	movs	r3, #0
   1aa5e:	461a      	mov	r2, r3
   1aa60:	4619      	mov	r1, r3
   1aa62:	4618      	mov	r0, r3
   1aa64:	f7ff fec8 	bl	1a7f8 <__assert_func>
    assert(err == OS_OK);
   1aa68:	2300      	movs	r3, #0
   1aa6a:	461a      	mov	r2, r3
   1aa6c:	4619      	mov	r1, r3
   1aa6e:	4618      	mov	r0, r3
   1aa70:	f7ff fec2 	bl	1a7f8 <__assert_func>
    assert(err == OS_OK);
   1aa74:	2300      	movs	r3, #0
   1aa76:	461a      	mov	r2, r3
   1aa78:	4619      	mov	r1, r3
   1aa7a:	4618      	mov	r0, r3
   1aa7c:	f7ff febc 	bl	1a7f8 <__assert_func>
   1aa80:	2000de90 	.word	0x2000de90
   1aa84:	2000deb8 	.word	0x2000deb8
   1aa88:	20007070 	.word	0x20007070
   1aa8c:	0001a955 	.word	0x0001a955
   1aa90:	00022694 	.word	0x00022694
   1aa94:	2000de38 	.word	0x2000de38

0001aa98 <os_start>:

void
os_start(void)
{
   1aa98:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
   1aa9a:	f7ff fe9b 	bl	1a7d4 <hal_watchdog_enable>

    err = os_arch_os_start();
   1aa9e:	f001 f9db 	bl	1be58 <os_arch_os_start>
    assert(err == OS_OK);
   1aaa2:	b900      	cbnz	r0, 1aaa6 <os_start+0xe>
#else
    assert(0);
#endif
}
   1aaa4:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
   1aaa6:	2300      	movs	r3, #0
   1aaa8:	461a      	mov	r2, r3
   1aaaa:	4619      	mov	r1, r3
   1aaac:	4618      	mov	r0, r3
   1aaae:	f7ff fea3 	bl	1a7f8 <__assert_func>
	...

0001aab4 <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
   1aab4:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1aab6:	4b0c      	ldr	r3, [pc, #48]	; (1aae8 <os_pkg_init+0x34>)
   1aab8:	781b      	ldrb	r3, [r3, #0]
   1aaba:	b14b      	cbz	r3, 1aad0 <os_pkg_init+0x1c>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
   1aabc:	2003      	movs	r0, #3
   1aabe:	f000 f943 	bl	1ad48 <os_dev_initialize_all>
   1aac2:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   1aac4:	b948      	cbnz	r0, 1aada <os_pkg_init+0x26>

    os_mempool_module_init();
   1aac6:	f000 fc25 	bl	1b314 <os_mempool_module_init>
    os_msys_init();
   1aaca:	f000 fcad 	bl	1b428 <os_msys_init>
}
   1aace:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1aad0:	461a      	mov	r2, r3
   1aad2:	4619      	mov	r1, r3
   1aad4:	4618      	mov	r0, r3
   1aad6:	f7ff fe8f 	bl	1a7f8 <__assert_func>
    assert(err == OS_OK);
   1aada:	2300      	movs	r3, #0
   1aadc:	461a      	mov	r2, r3
   1aade:	4619      	mov	r1, r3
   1aae0:	4618      	mov	r0, r3
   1aae2:	f7ff fe89 	bl	1a7f8 <__assert_func>
   1aae6:	bf00      	nop
   1aae8:	2000ddbc 	.word	0x2000ddbc

0001aaec <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
   1aaec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aaee:	4604      	mov	r4, r0
   1aaf0:	460d      	mov	r5, r1
   1aaf2:	4617      	mov	r7, r2
   1aaf4:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
   1aaf6:	2220      	movs	r2, #32
   1aaf8:	2100      	movs	r1, #0
   1aafa:	f001 fa80 	bl	1bffe <memset>
    c->c_ev.ev_cb = ev_cb;
   1aafe:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
   1ab00:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
   1ab02:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
   1ab04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0001ab08 <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
   1ab08:	b538      	push	{r3, r4, r5, lr}
   1ab0a:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
   1ab0c:	f001 f90a 	bl	1bd24 <os_arch_save_sr>
   1ab10:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
   1ab12:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
   1ab14:	b13b      	cbz	r3, 1ab26 <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   1ab16:	69a2      	ldr	r2, [r4, #24]
   1ab18:	b172      	cbz	r2, 1ab38 <os_callout_stop+0x30>
   1ab1a:	61d3      	str	r3, [r2, #28]
   1ab1c:	69e3      	ldr	r3, [r4, #28]
   1ab1e:	69a2      	ldr	r2, [r4, #24]
   1ab20:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
   1ab22:	2300      	movs	r3, #0
   1ab24:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
   1ab26:	6920      	ldr	r0, [r4, #16]
   1ab28:	b110      	cbz	r0, 1ab30 <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
   1ab2a:	4621      	mov	r1, r4
   1ab2c:	f000 fa02 	bl	1af34 <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
   1ab30:	4628      	mov	r0, r5
   1ab32:	f001 f8fd 	bl	1bd30 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
   1ab36:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   1ab38:	4a01      	ldr	r2, [pc, #4]	; (1ab40 <os_callout_stop+0x38>)
   1ab3a:	6053      	str	r3, [r2, #4]
   1ab3c:	e7ee      	b.n	1ab1c <os_callout_stop+0x14>
   1ab3e:	bf00      	nop
   1ab40:	2000de90 	.word	0x2000de90

0001ab44 <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
   1ab44:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
   1ab46:	6903      	ldr	r3, [r0, #16]
   1ab48:	b1c3      	cbz	r3, 1ab7c <os_callout_reset+0x38>
   1ab4a:	4605      	mov	r5, r0
   1ab4c:	460c      	mov	r4, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
   1ab4e:	2900      	cmp	r1, #0
   1ab50:	db2f      	blt.n	1abb2 <os_callout_reset+0x6e>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
   1ab52:	f001 f8e7 	bl	1bd24 <os_arch_save_sr>
   1ab56:	4606      	mov	r6, r0

    os_callout_stop(c);
   1ab58:	4628      	mov	r0, r5
   1ab5a:	f7ff ffd5 	bl	1ab08 <os_callout_stop>

    if (ticks == 0) {
   1ab5e:	b904      	cbnz	r4, 1ab62 <os_callout_reset+0x1e>
        ticks = 1;
   1ab60:	2401      	movs	r4, #1
    }

    c->c_ticks = os_time_get() + ticks;
   1ab62:	f001 f867 	bl	1bc34 <os_time_get>
   1ab66:	4420      	add	r0, r4
   1ab68:	6168      	str	r0, [r5, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   1ab6a:	4b13      	ldr	r3, [pc, #76]	; (1abb8 <os_callout_reset+0x74>)
   1ab6c:	681b      	ldr	r3, [r3, #0]
   1ab6e:	b153      	cbz	r3, 1ab86 <os_callout_reset+0x42>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
   1ab70:	695a      	ldr	r2, [r3, #20]
   1ab72:	1a82      	subs	r2, r0, r2
   1ab74:	2a00      	cmp	r2, #0
   1ab76:	db06      	blt.n	1ab86 <os_callout_reset+0x42>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   1ab78:	699b      	ldr	r3, [r3, #24]
   1ab7a:	e7f8      	b.n	1ab6e <os_callout_reset+0x2a>
    assert(c->c_evq != NULL);
   1ab7c:	461a      	mov	r2, r3
   1ab7e:	4619      	mov	r1, r3
   1ab80:	4618      	mov	r0, r3
   1ab82:	f7ff fe39 	bl	1a7f8 <__assert_func>
            break;
        }
    }

    if (entry) {
   1ab86:	b15b      	cbz	r3, 1aba0 <os_callout_reset+0x5c>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
   1ab88:	69da      	ldr	r2, [r3, #28]
   1ab8a:	61ea      	str	r2, [r5, #28]
   1ab8c:	61ab      	str	r3, [r5, #24]
   1ab8e:	69da      	ldr	r2, [r3, #28]
   1ab90:	6015      	str	r5, [r2, #0]
   1ab92:	3518      	adds	r5, #24
   1ab94:	61dd      	str	r5, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
   1ab96:	4630      	mov	r0, r6
   1ab98:	f001 f8ca 	bl	1bd30 <os_arch_restore_sr>

    ret = OS_OK;
   1ab9c:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
   1ab9e:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
   1aba0:	2300      	movs	r3, #0
   1aba2:	61ab      	str	r3, [r5, #24]
   1aba4:	4b04      	ldr	r3, [pc, #16]	; (1abb8 <os_callout_reset+0x74>)
   1aba6:	685a      	ldr	r2, [r3, #4]
   1aba8:	61ea      	str	r2, [r5, #28]
   1abaa:	6015      	str	r5, [r2, #0]
   1abac:	3518      	adds	r5, #24
   1abae:	605d      	str	r5, [r3, #4]
   1abb0:	e7f1      	b.n	1ab96 <os_callout_reset+0x52>
        ret = OS_EINVAL;
   1abb2:	2002      	movs	r0, #2
    return ret;
   1abb4:	e7f3      	b.n	1ab9e <os_callout_reset+0x5a>
   1abb6:	bf00      	nop
   1abb8:	2000de90 	.word	0x2000de90

0001abbc <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
   1abbc:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
   1abbe:	f001 f839 	bl	1bc34 <os_time_get>
   1abc2:	4605      	mov	r5, r0
   1abc4:	e00f      	b.n	1abe6 <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   1abc6:	69e2      	ldr	r2, [r4, #28]
   1abc8:	4b12      	ldr	r3, [pc, #72]	; (1ac14 <os_callout_tick+0x58>)
   1abca:	605a      	str	r2, [r3, #4]
   1abcc:	69e3      	ldr	r3, [r4, #28]
   1abce:	69a2      	ldr	r2, [r4, #24]
   1abd0:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
   1abd2:	2300      	movs	r3, #0
   1abd4:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
   1abd6:	f001 f8ab 	bl	1bd30 <os_arch_restore_sr>

        if (c) {
   1abda:	b1d4      	cbz	r4, 1ac12 <os_callout_tick+0x56>
            if (c->c_evq) {
   1abdc:	6920      	ldr	r0, [r4, #16]
   1abde:	b9a0      	cbnz	r0, 1ac0a <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
            } else {
                c->c_ev.ev_cb(&c->c_ev);
   1abe0:	6863      	ldr	r3, [r4, #4]
   1abe2:	4620      	mov	r0, r4
   1abe4:	4798      	blx	r3
        OS_ENTER_CRITICAL(sr);
   1abe6:	f001 f89d 	bl	1bd24 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
   1abea:	4b0a      	ldr	r3, [pc, #40]	; (1ac14 <os_callout_tick+0x58>)
   1abec:	681c      	ldr	r4, [r3, #0]
        if (c) {
   1abee:	2c00      	cmp	r4, #0
   1abf0:	d0f1      	beq.n	1abd6 <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
   1abf2:	6963      	ldr	r3, [r4, #20]
   1abf4:	1aeb      	subs	r3, r5, r3
   1abf6:	2b00      	cmp	r3, #0
   1abf8:	db05      	blt.n	1ac06 <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   1abfa:	69a3      	ldr	r3, [r4, #24]
   1abfc:	2b00      	cmp	r3, #0
   1abfe:	d0e2      	beq.n	1abc6 <os_callout_tick+0xa>
   1ac00:	69e2      	ldr	r2, [r4, #28]
   1ac02:	61da      	str	r2, [r3, #28]
   1ac04:	e7e2      	b.n	1abcc <os_callout_tick+0x10>
                c = NULL;
   1ac06:	2400      	movs	r4, #0
   1ac08:	e7e5      	b.n	1abd6 <os_callout_tick+0x1a>
                os_eventq_put(c->c_evq, &c->c_ev);
   1ac0a:	4621      	mov	r1, r4
   1ac0c:	f000 f915 	bl	1ae3a <os_eventq_put>
   1ac10:	e7e9      	b.n	1abe6 <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
   1ac12:	bd38      	pop	{r3, r4, r5, pc}
   1ac14:	2000de90 	.word	0x2000de90

0001ac18 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
   1ac18:	b510      	push	{r4, lr}
   1ac1a:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
   1ac1c:	f001 f88b 	bl	1bd36 <os_arch_in_critical>
   1ac20:	b130      	cbz	r0, 1ac30 <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
   1ac22:	4b09      	ldr	r3, [pc, #36]	; (1ac48 <os_callout_wakeup_ticks+0x30>)
   1ac24:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
   1ac26:	b15b      	cbz	r3, 1ac40 <os_callout_wakeup_ticks+0x28>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
   1ac28:	6958      	ldr	r0, [r3, #20]
   1ac2a:	1b00      	subs	r0, r0, r4
   1ac2c:	d406      	bmi.n	1ac3c <os_callout_wakeup_ticks+0x24>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
   1ac2e:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   1ac30:	2300      	movs	r3, #0
   1ac32:	461a      	mov	r2, r3
   1ac34:	4619      	mov	r1, r3
   1ac36:	4618      	mov	r0, r3
   1ac38:	f7ff fdde 	bl	1a7f8 <__assert_func>
            rt = 0;     /* callout time is in the past */
   1ac3c:	2000      	movs	r0, #0
   1ac3e:	e7f6      	b.n	1ac2e <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
   1ac40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   1ac44:	e7f3      	b.n	1ac2e <os_callout_wakeup_ticks+0x16>
   1ac46:	bf00      	nop
   1ac48:	2000de90 	.word	0x2000de90

0001ac4c <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   1ac4c:	b508      	push	{r3, lr}

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   1ac4e:	4601      	mov	r1, r0
   1ac50:	2000      	movs	r0, #0
   1ac52:	f002 f84d 	bl	1ccf0 <hal_timer_config>
    return rc;
}
   1ac56:	bd08      	pop	{r3, pc}

0001ac58 <os_cputime_get32>:
    hal_timer_stop(timer);
}

uint32_t
os_cputime_get32(void)
{
   1ac58:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
   1ac5a:	2000      	movs	r0, #0
   1ac5c:	f002 f8c4 	bl	1cde8 <hal_timer_read>
    return cpu_time;
}
   1ac60:	bd08      	pop	{r3, pc}
	...

0001ac64 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
   1ac64:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
   1ac66:	4b15      	ldr	r3, [pc, #84]	; (1acbc <os_dev_add+0x58>)
   1ac68:	681d      	ldr	r5, [r3, #0]
   1ac6a:	b115      	cbz	r5, 1ac72 <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   1ac6c:	462b      	mov	r3, r5
    prev_dev = NULL;
   1ac6e:	2400      	movs	r4, #0
   1ac70:	e008      	b.n	1ac84 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   1ac72:	4603      	mov	r3, r0
   1ac74:	f843 5f20 	str.w	r5, [r3, #32]!
   1ac78:	4a10      	ldr	r2, [pc, #64]	; (1acbc <os_dev_add+0x58>)
   1ac7a:	6053      	str	r3, [r2, #4]
   1ac7c:	6010      	str	r0, [r2, #0]
        return (0);
   1ac7e:	e010      	b.n	1aca2 <os_dev_add+0x3e>
        if (dev->od_stage < cur_dev->od_stage ||
            ((dev->od_stage == cur_dev->od_stage) &&
             (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
   1ac80:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   1ac82:	6a1b      	ldr	r3, [r3, #32]
   1ac84:	b143      	cbz	r3, 1ac98 <os_dev_add+0x34>
        if (dev->od_stage < cur_dev->od_stage ||
   1ac86:	7e01      	ldrb	r1, [r0, #24]
   1ac88:	7e1a      	ldrb	r2, [r3, #24]
   1ac8a:	4291      	cmp	r1, r2
   1ac8c:	d304      	bcc.n	1ac98 <os_dev_add+0x34>
   1ac8e:	d1f7      	bne.n	1ac80 <os_dev_add+0x1c>
             (dev->od_priority < cur_dev->od_priority))) {
   1ac90:	7e41      	ldrb	r1, [r0, #25]
   1ac92:	7e5a      	ldrb	r2, [r3, #25]
            ((dev->od_stage == cur_dev->od_stage) &&
   1ac94:	4291      	cmp	r1, r2
   1ac96:	d2f3      	bcs.n	1ac80 <os_dev_add+0x1c>
    }

    if (prev_dev) {
   1ac98:	b15c      	cbz	r4, 1acb2 <os_dev_add+0x4e>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   1ac9a:	6a23      	ldr	r3, [r4, #32]
   1ac9c:	6203      	str	r3, [r0, #32]
   1ac9e:	b11b      	cbz	r3, 1aca8 <os_dev_add+0x44>
   1aca0:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
   1aca2:	2000      	movs	r0, #0
   1aca4:	bc30      	pop	{r4, r5}
   1aca6:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   1aca8:	f100 0320 	add.w	r3, r0, #32
   1acac:	4a03      	ldr	r2, [pc, #12]	; (1acbc <os_dev_add+0x58>)
   1acae:	6053      	str	r3, [r2, #4]
   1acb0:	e7f6      	b.n	1aca0 <os_dev_add+0x3c>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   1acb2:	6205      	str	r5, [r0, #32]
   1acb4:	4b01      	ldr	r3, [pc, #4]	; (1acbc <os_dev_add+0x58>)
   1acb6:	6018      	str	r0, [r3, #0]
   1acb8:	e7f3      	b.n	1aca2 <os_dev_add+0x3e>
   1acba:	bf00      	nop
   1acbc:	20009070 	.word	0x20009070

0001acc0 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
   1acc0:	b510      	push	{r4, lr}
   1acc2:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
   1acc4:	6903      	ldr	r3, [r0, #16]
   1acc6:	6941      	ldr	r1, [r0, #20]
   1acc8:	4798      	blx	r3
    if (rc != 0) {
   1acca:	4603      	mov	r3, r0
   1accc:	b128      	cbz	r0, 1acda <os_dev_initialize+0x1a>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
   1acce:	7ee2      	ldrb	r2, [r4, #27]
   1acd0:	f012 0f08 	tst.w	r2, #8
   1acd4:	d105      	bne.n	1ace2 <os_dev_initialize+0x22>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
   1acd6:	2300      	movs	r3, #0
   1acd8:	e003      	b.n	1ace2 <os_dev_initialize+0x22>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
   1acda:	7ee2      	ldrb	r2, [r4, #27]
   1acdc:	f042 0201 	orr.w	r2, r2, #1
   1ace0:	76e2      	strb	r2, [r4, #27]
err:
    return rc;
}
   1ace2:	4618      	mov	r0, r3
   1ace4:	bd10      	pop	{r4, pc}

0001ace6 <os_dev_init>:
    dev->od_name = name;
   1ace6:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
   1ace8:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
   1acea:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
   1acec:	2300      	movs	r3, #0
   1acee:	76c3      	strb	r3, [r0, #27]
    dev->od_open_ref = 0;
   1acf0:	7683      	strb	r3, [r0, #26]
    dev->od_init = od_init;
   1acf2:	9a00      	ldr	r2, [sp, #0]
   1acf4:	6102      	str	r2, [r0, #16]
    dev->od_init_arg = arg;
   1acf6:	9a01      	ldr	r2, [sp, #4]
   1acf8:	6142      	str	r2, [r0, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
   1acfa:	6003      	str	r3, [r0, #0]
   1acfc:	6043      	str	r3, [r0, #4]
   1acfe:	6083      	str	r3, [r0, #8]
   1ad00:	60c3      	str	r3, [r0, #12]
}
   1ad02:	4618      	mov	r0, r3
   1ad04:	4770      	bx	lr
	...

0001ad08 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
   1ad08:	b530      	push	{r4, r5, lr}
   1ad0a:	b083      	sub	sp, #12
   1ad0c:	4605      	mov	r5, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
   1ad0e:	9c07      	ldr	r4, [sp, #28]
   1ad10:	9401      	str	r4, [sp, #4]
   1ad12:	9c06      	ldr	r4, [sp, #24]
   1ad14:	9400      	str	r4, [sp, #0]
   1ad16:	f7ff ffe6 	bl	1ace6 <os_dev_init>
    if (rc != 0) {
   1ad1a:	4603      	mov	r3, r0
   1ad1c:	b110      	cbz	r0, 1ad24 <os_dev_create+0x1c>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
   1ad1e:	4618      	mov	r0, r3
   1ad20:	b003      	add	sp, #12
   1ad22:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
   1ad24:	4628      	mov	r0, r5
   1ad26:	f7ff ff9d 	bl	1ac64 <os_dev_add>
    if (rc != 0) {
   1ad2a:	4603      	mov	r3, r0
   1ad2c:	2800      	cmp	r0, #0
   1ad2e:	d1f6      	bne.n	1ad1e <os_dev_create+0x16>
    if (g_os_started) {
   1ad30:	4a04      	ldr	r2, [pc, #16]	; (1ad44 <os_dev_create+0x3c>)
   1ad32:	6812      	ldr	r2, [r2, #0]
   1ad34:	2a00      	cmp	r2, #0
   1ad36:	d0f2      	beq.n	1ad1e <os_dev_create+0x16>
        rc = os_dev_initialize(dev);
   1ad38:	4628      	mov	r0, r5
   1ad3a:	f7ff ffc1 	bl	1acc0 <os_dev_initialize>
   1ad3e:	4603      	mov	r3, r0
    return (rc);
   1ad40:	e7ed      	b.n	1ad1e <os_dev_create+0x16>
   1ad42:	bf00      	nop
   1ad44:	2000de88 	.word	0x2000de88

0001ad48 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
   1ad48:	b538      	push	{r3, r4, r5, lr}
   1ad4a:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1ad4c:	4b08      	ldr	r3, [pc, #32]	; (1ad70 <os_dev_initialize_all+0x28>)
   1ad4e:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
   1ad50:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1ad52:	e000      	b.n	1ad56 <os_dev_initialize_all+0xe>
   1ad54:	6a24      	ldr	r4, [r4, #32]
   1ad56:	b144      	cbz	r4, 1ad6a <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
   1ad58:	7e23      	ldrb	r3, [r4, #24]
   1ad5a:	42ab      	cmp	r3, r5
   1ad5c:	d1fa      	bne.n	1ad54 <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
   1ad5e:	4620      	mov	r0, r4
   1ad60:	f7ff ffae 	bl	1acc0 <os_dev_initialize>
            if (rc) {
   1ad64:	4602      	mov	r2, r0
   1ad66:	2800      	cmp	r0, #0
   1ad68:	d0f4      	beq.n	1ad54 <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
   1ad6a:	4610      	mov	r0, r2
   1ad6c:	bd38      	pop	{r3, r4, r5, pc}
   1ad6e:	bf00      	nop
   1ad70:	20009070 	.word	0x20009070

0001ad74 <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
   1ad74:	b538      	push	{r3, r4, r5, lr}
   1ad76:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1ad78:	4b05      	ldr	r3, [pc, #20]	; (1ad90 <os_dev_lookup+0x1c>)
   1ad7a:	681c      	ldr	r4, [r3, #0]
   1ad7c:	b134      	cbz	r4, 1ad8c <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
   1ad7e:	4629      	mov	r1, r5
   1ad80:	69e0      	ldr	r0, [r4, #28]
   1ad82:	f001 f958 	bl	1c036 <strcmp>
   1ad86:	b108      	cbz	r0, 1ad8c <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1ad88:	6a24      	ldr	r4, [r4, #32]
   1ad8a:	e7f7      	b.n	1ad7c <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
   1ad8c:	4620      	mov	r0, r4
   1ad8e:	bd38      	pop	{r3, r4, r5, pc}
   1ad90:	20009070 	.word	0x20009070

0001ad94 <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
   1ad94:	b570      	push	{r4, r5, r6, lr}
   1ad96:	460d      	mov	r5, r1
   1ad98:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
   1ad9a:	f7ff ffeb 	bl	1ad74 <os_dev_lookup>
    if (dev == NULL) {
   1ad9e:	4604      	mov	r4, r0
   1ada0:	b1a0      	cbz	r0, 1adcc <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
   1ada2:	7ec3      	ldrb	r3, [r0, #27]
   1ada4:	f013 0f01 	tst.w	r3, #1
   1ada8:	d012      	beq.n	1add0 <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
   1adaa:	6803      	ldr	r3, [r0, #0]
   1adac:	b11b      	cbz	r3, 1adb6 <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
   1adae:	4632      	mov	r2, r6
   1adb0:	4629      	mov	r1, r5
   1adb2:	4798      	blx	r3
        if (rc != 0) {
   1adb4:	b970      	cbnz	r0, 1add4 <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   1adb6:	f000 ffb5 	bl	1bd24 <os_arch_save_sr>
    ++dev->od_open_ref;
   1adba:	7ea3      	ldrb	r3, [r4, #26]
   1adbc:	3301      	adds	r3, #1
   1adbe:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
   1adc0:	7ee3      	ldrb	r3, [r4, #27]
   1adc2:	f043 0302 	orr.w	r3, r3, #2
   1adc6:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
   1adc8:	f000 ffb2 	bl	1bd30 <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
   1adcc:	4620      	mov	r0, r4
   1adce:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
   1add0:	2400      	movs	r4, #0
   1add2:	e7fb      	b.n	1adcc <os_dev_open+0x38>
    return (NULL);
   1add4:	2400      	movs	r4, #0
   1add6:	e7f9      	b.n	1adcc <os_dev_open+0x38>

0001add8 <os_dev_close>:
os_dev_close(struct os_dev *dev)
{
    int rc;
    os_sr_t sr;

    if (dev == NULL) {
   1add8:	b1b0      	cbz	r0, 1ae08 <os_dev_close+0x30>
{
   1adda:	b510      	push	{r4, lr}
   1addc:	4604      	mov	r4, r0
        rc = OS_EINVAL;
        goto err;
    }

    if (dev->od_handlers.od_close) {
   1adde:	68c3      	ldr	r3, [r0, #12]
   1ade0:	b113      	cbz	r3, 1ade8 <os_dev_close+0x10>
        rc = dev->od_handlers.od_close(dev);
   1ade2:	4798      	blx	r3
        if (rc != 0) {
   1ade4:	4603      	mov	r3, r0
   1ade6:	b968      	cbnz	r0, 1ae04 <os_dev_close+0x2c>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   1ade8:	f000 ff9c 	bl	1bd24 <os_arch_save_sr>
    if (--dev->od_open_ref == 0) {
   1adec:	7ea3      	ldrb	r3, [r4, #26]
   1adee:	3b01      	subs	r3, #1
   1adf0:	b2db      	uxtb	r3, r3
   1adf2:	76a3      	strb	r3, [r4, #26]
   1adf4:	b91b      	cbnz	r3, 1adfe <os_dev_close+0x26>
        dev->od_flags &= ~(OS_DEV_F_STATUS_OPEN | OS_DEV_F_STATUS_SUSPENDED);
   1adf6:	7ee3      	ldrb	r3, [r4, #27]
   1adf8:	f023 0306 	bic.w	r3, r3, #6
   1adfc:	76e3      	strb	r3, [r4, #27]
    }
    OS_EXIT_CRITICAL(sr);
   1adfe:	f000 ff97 	bl	1bd30 <os_arch_restore_sr>

    return (0);
   1ae02:	2300      	movs	r3, #0
err:
    return (rc);
}
   1ae04:	4618      	mov	r0, r3
   1ae06:	bd10      	pop	{r4, pc}
        rc = OS_EINVAL;
   1ae08:	2302      	movs	r3, #2
}
   1ae0a:	4618      	mov	r0, r3
   1ae0c:	4770      	bx	lr
	...

0001ae10 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
   1ae10:	4b02      	ldr	r3, [pc, #8]	; (1ae1c <os_dev_reset+0xc>)
   1ae12:	2200      	movs	r2, #0
   1ae14:	601a      	str	r2, [r3, #0]
   1ae16:	605b      	str	r3, [r3, #4]
}
   1ae18:	4770      	bx	lr
   1ae1a:	bf00      	nop
   1ae1c:	20009070 	.word	0x20009070

0001ae20 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
   1ae20:	2200      	movs	r2, #0
   1ae22:	6002      	str	r2, [r0, #0]
   1ae24:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
   1ae26:	4603      	mov	r3, r0
   1ae28:	f843 2f08 	str.w	r2, [r3, #8]!
   1ae2c:	60c3      	str	r3, [r0, #12]
}
   1ae2e:	4770      	bx	lr

0001ae30 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
   1ae30:	68c0      	ldr	r0, [r0, #12]
}
   1ae32:	3000      	adds	r0, #0
   1ae34:	bf18      	it	ne
   1ae36:	2001      	movne	r0, #1
   1ae38:	4770      	bx	lr

0001ae3a <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
   1ae3a:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
   1ae3c:	b1f0      	cbz	r0, 1ae7c <os_eventq_put+0x42>
   1ae3e:	460c      	mov	r4, r1
   1ae40:	4605      	mov	r5, r0
   1ae42:	f7ff fff5 	bl	1ae30 <os_eventq_inited>
   1ae46:	b1c8      	cbz	r0, 1ae7c <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   1ae48:	f000 ff6c 	bl	1bd24 <os_arch_save_sr>
   1ae4c:	4606      	mov	r6, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
   1ae4e:	7823      	ldrb	r3, [r4, #0]
   1ae50:	b9d3      	cbnz	r3, 1ae88 <os_eventq_put+0x4e>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
   1ae52:	2301      	movs	r3, #1
   1ae54:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
   1ae56:	2300      	movs	r3, #0
   1ae58:	60e3      	str	r3, [r4, #12]
   1ae5a:	68eb      	ldr	r3, [r5, #12]
   1ae5c:	601c      	str	r4, [r3, #0]
   1ae5e:	340c      	adds	r4, #12
   1ae60:	60ec      	str	r4, [r5, #12]

    resched = 0;
    if (evq->evq_task) {
   1ae62:	6868      	ldr	r0, [r5, #4]
   1ae64:	b1b8      	cbz	r0, 1ae96 <os_eventq_put+0x5c>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
   1ae66:	7b03      	ldrb	r3, [r0, #12]
   1ae68:	2b02      	cmp	r3, #2
   1ae6a:	d010      	beq.n	1ae8e <os_eventq_put+0x54>
    resched = 0;
   1ae6c:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
   1ae6e:	2300      	movs	r3, #0
   1ae70:	606b      	str	r3, [r5, #4]
    }

    OS_EXIT_CRITICAL(sr);
   1ae72:	4630      	mov	r0, r6
   1ae74:	f000 ff5c 	bl	1bd30 <os_arch_restore_sr>

    if (resched) {
   1ae78:	b97c      	cbnz	r4, 1ae9a <os_eventq_put+0x60>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
   1ae7a:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
   1ae7c:	2300      	movs	r3, #0
   1ae7e:	461a      	mov	r2, r3
   1ae80:	4619      	mov	r1, r3
   1ae82:	4618      	mov	r0, r3
   1ae84:	f7ff fcb8 	bl	1a7f8 <__assert_func>
        OS_EXIT_CRITICAL(sr);
   1ae88:	f000 ff52 	bl	1bd30 <os_arch_restore_sr>
   1ae8c:	e7f5      	b.n	1ae7a <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
   1ae8e:	f000 fcc7 	bl	1b820 <os_sched_wakeup>
            resched = 1;
   1ae92:	2401      	movs	r4, #1
   1ae94:	e7eb      	b.n	1ae6e <os_eventq_put+0x34>
    resched = 0;
   1ae96:	2400      	movs	r4, #0
   1ae98:	e7eb      	b.n	1ae72 <os_eventq_put+0x38>
        os_sched(NULL);
   1ae9a:	2000      	movs	r0, #0
   1ae9c:	f000 fd40 	bl	1b920 <os_sched>
   1aea0:	e7eb      	b.n	1ae7a <os_eventq_put+0x40>

0001aea2 <os_eventq_get>:
    return ev;
}

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
   1aea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aea4:	4605      	mov	r5, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
   1aea6:	f000 fc67 	bl	1b778 <os_sched_get_current_task>
   1aeaa:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
   1aeac:	682b      	ldr	r3, [r5, #0]
   1aeae:	4283      	cmp	r3, r0
   1aeb0:	d001      	beq.n	1aeb6 <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
   1aeb2:	b9db      	cbnz	r3, 1aeec <os_eventq_get+0x4a>
            evq->evq_owner = t;
   1aeb4:	6028      	str	r0, [r5, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
   1aeb6:	f000 ff35 	bl	1bd24 <os_arch_save_sr>
   1aeba:	4607      	mov	r7, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
   1aebc:	68ae      	ldr	r6, [r5, #8]
    if (ev) {
   1aebe:	b9de      	cbnz	r6, 1aef8 <os_eventq_get+0x56>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
   1aec0:	606c      	str	r4, [r5, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
   1aec2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1aec6:	4620      	mov	r0, r4
   1aec8:	f000 fc62 	bl	1b790 <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
   1aecc:	7b63      	ldrb	r3, [r4, #13]
   1aece:	f043 0308 	orr.w	r3, r3, #8
   1aed2:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
   1aed4:	4638      	mov	r0, r7
   1aed6:	f000 ff2b 	bl	1bd30 <os_arch_restore_sr>

        os_sched(NULL);
   1aeda:	2000      	movs	r0, #0
   1aedc:	f000 fd20 	bl	1b920 <os_sched>

        OS_ENTER_CRITICAL(sr);
   1aee0:	f000 ff20 	bl	1bd24 <os_arch_save_sr>
   1aee4:	4607      	mov	r7, r0
        evq->evq_task = NULL;
   1aee6:	2300      	movs	r3, #0
   1aee8:	606b      	str	r3, [r5, #4]
        goto pull_one;
   1aeea:	e7e7      	b.n	1aebc <os_eventq_get+0x1a>
            assert(0);
   1aeec:	2300      	movs	r3, #0
   1aeee:	461a      	mov	r2, r3
   1aef0:	4619      	mov	r1, r3
   1aef2:	4618      	mov	r0, r3
   1aef4:	f7ff fc80 	bl	1a7f8 <__assert_func>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1aef8:	68f3      	ldr	r3, [r6, #12]
   1aefa:	60ab      	str	r3, [r5, #8]
   1aefc:	b153      	cbz	r3, 1af14 <os_eventq_get+0x72>
        ev->ev_queued = 0;
   1aefe:	2300      	movs	r3, #0
   1af00:	7033      	strb	r3, [r6, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
   1af02:	7b63      	ldrb	r3, [r4, #13]
   1af04:	f023 0308 	bic.w	r3, r3, #8
   1af08:	7363      	strb	r3, [r4, #13]
    }
    OS_EXIT_CRITICAL(sr);
   1af0a:	4638      	mov	r0, r7
   1af0c:	f000 ff10 	bl	1bd30 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
   1af10:	4630      	mov	r0, r6
   1af12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1af14:	f105 0308 	add.w	r3, r5, #8
   1af18:	60eb      	str	r3, [r5, #12]
   1af1a:	e7f0      	b.n	1aefe <os_eventq_get+0x5c>

0001af1c <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
   1af1c:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
   1af1e:	f7ff ffc0 	bl	1aea2 <os_eventq_get>
    assert(ev->ev_cb != NULL);
   1af22:	6843      	ldr	r3, [r0, #4]
   1af24:	b10b      	cbz	r3, 1af2a <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
   1af26:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
   1af28:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
   1af2a:	461a      	mov	r2, r3
   1af2c:	4619      	mov	r1, r3
   1af2e:	4618      	mov	r0, r3
   1af30:	f7ff fc62 	bl	1a7f8 <__assert_func>

0001af34 <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
   1af34:	b538      	push	{r3, r4, r5, lr}
   1af36:	4605      	mov	r5, r0
   1af38:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   1af3a:	f000 fef3 	bl	1bd24 <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
   1af3e:	7823      	ldrb	r3, [r4, #0]
   1af40:	b183      	cbz	r3, 1af64 <os_eventq_remove+0x30>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1af42:	68aa      	ldr	r2, [r5, #8]
   1af44:	42a2      	cmp	r2, r4
   1af46:	d107      	bne.n	1af58 <os_eventq_remove+0x24>
   1af48:	68d3      	ldr	r3, [r2, #12]
   1af4a:	60ab      	str	r3, [r5, #8]
   1af4c:	b953      	cbnz	r3, 1af64 <os_eventq_remove+0x30>
   1af4e:	f105 0308 	add.w	r3, r5, #8
   1af52:	60eb      	str	r3, [r5, #12]
   1af54:	e006      	b.n	1af64 <os_eventq_remove+0x30>
   1af56:	461a      	mov	r2, r3
   1af58:	68d3      	ldr	r3, [r2, #12]
   1af5a:	42a3      	cmp	r3, r4
   1af5c:	d1fb      	bne.n	1af56 <os_eventq_remove+0x22>
   1af5e:	68db      	ldr	r3, [r3, #12]
   1af60:	60d3      	str	r3, [r2, #12]
   1af62:	b123      	cbz	r3, 1af6e <os_eventq_remove+0x3a>
    }
    ev->ev_queued = 0;
   1af64:	2300      	movs	r3, #0
   1af66:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
   1af68:	f000 fee2 	bl	1bd30 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
   1af6c:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1af6e:	320c      	adds	r2, #12
   1af70:	60ea      	str	r2, [r5, #12]
   1af72:	e7f7      	b.n	1af64 <os_eventq_remove+0x30>

0001af74 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
   1af74:	4800      	ldr	r0, [pc, #0]	; (1af78 <os_eventq_dflt_get+0x4>)
   1af76:	4770      	bx	lr
   1af78:	20009078 	.word	0x20009078

0001af7c <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
   1af7c:	4603      	mov	r3, r0
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
   1af7e:	2000      	movs	r0, #0
   1af80:	6018      	str	r0, [r3, #0]
   1af82:	605b      	str	r3, [r3, #4]

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
   1af84:	6098      	str	r0, [r3, #8]
   1af86:	6158      	str	r0, [r3, #20]
    ev->ev_cb = ev_cb;
   1af88:	60d9      	str	r1, [r3, #12]
    ev->ev_arg = arg;
   1af8a:	611a      	str	r2, [r3, #16]

    return (0);
}
   1af8c:	4770      	bx	lr

0001af8e <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
   1af8e:	b538      	push	{r3, r4, r5, lr}
   1af90:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   1af92:	f000 fec7 	bl	1bd24 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
   1af96:	682c      	ldr	r4, [r5, #0]
    if (mp) {
   1af98:	b114      	cbz	r4, 1afa0 <os_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   1af9a:	6863      	ldr	r3, [r4, #4]
   1af9c:	602b      	str	r3, [r5, #0]
   1af9e:	b12b      	cbz	r3, 1afac <os_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
   1afa0:	f000 fec6 	bl	1bd30 <os_arch_restore_sr>

    if (mp) {
   1afa4:	b124      	cbz	r4, 1afb0 <os_mqueue_get+0x22>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
   1afa6:	f1a4 0010 	sub.w	r0, r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
   1afaa:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   1afac:	606d      	str	r5, [r5, #4]
   1afae:	e7f7      	b.n	1afa0 <os_mqueue_get+0x12>
        m = NULL;
   1afb0:	2000      	movs	r0, #0
    return (m);
   1afb2:	e7fa      	b.n	1afaa <os_mqueue_get+0x1c>

0001afb4 <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
   1afb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
   1afb6:	7953      	ldrb	r3, [r2, #5]
   1afb8:	2b07      	cmp	r3, #7
   1afba:	d916      	bls.n	1afea <os_mqueue_put+0x36>
   1afbc:	4614      	mov	r4, r2
   1afbe:	460e      	mov	r6, r1
   1afc0:	4605      	mov	r5, r0
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);
   1afc2:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
   1afc6:	f000 fead 	bl	1bd24 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
   1afca:	2300      	movs	r3, #0
   1afcc:	f844 3f14 	str.w	r3, [r4, #20]!
   1afd0:	686b      	ldr	r3, [r5, #4]
   1afd2:	601f      	str	r7, [r3, #0]
   1afd4:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
   1afd6:	f000 feab 	bl	1bd30 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
   1afda:	b146      	cbz	r6, 1afee <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
   1afdc:	f105 0108 	add.w	r1, r5, #8
   1afe0:	4630      	mov	r0, r6
   1afe2:	f7ff ff2a 	bl	1ae3a <os_eventq_put>
    }

    return (0);
   1afe6:	2000      	movs	r0, #0
   1afe8:	e000      	b.n	1afec <os_mqueue_put+0x38>
err:
    return (rc);
   1afea:	2002      	movs	r0, #2
}
   1afec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
   1afee:	2000      	movs	r0, #0
   1aff0:	e7fc      	b.n	1afec <os_mqueue_put+0x38>

0001aff2 <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
   1aff2:	3a10      	subs	r2, #16
   1aff4:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   1aff6:	6041      	str	r1, [r0, #4]

    return (0);
}
   1aff8:	2000      	movs	r0, #0
   1affa:	4770      	bx	lr

0001affc <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
   1affc:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
   1affe:	8803      	ldrh	r3, [r0, #0]
   1b000:	428b      	cmp	r3, r1
   1b002:	d312      	bcc.n	1b02a <os_mbuf_get+0x2e>
   1b004:	460d      	mov	r5, r1
   1b006:	4604      	mov	r4, r0
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
   1b008:	6840      	ldr	r0, [r0, #4]
   1b00a:	f000 f947 	bl	1b29c <os_memblock_get>
    if (!om) {
   1b00e:	4603      	mov	r3, r0
   1b010:	b148      	cbz	r0, 1b026 <os_mbuf_get+0x2a>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
   1b012:	2200      	movs	r2, #0
   1b014:	60c2      	str	r2, [r0, #12]
    om->om_flags = 0;
   1b016:	7102      	strb	r2, [r0, #4]
    om->om_pkthdr_len = 0;
   1b018:	7142      	strb	r2, [r0, #5]
    om->om_len = 0;
   1b01a:	80c2      	strh	r2, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
   1b01c:	f100 0110 	add.w	r1, r0, #16
   1b020:	4429      	add	r1, r5
   1b022:	6001      	str	r1, [r0, #0]
    om->om_omp = omp;
   1b024:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
   1b026:	4618      	mov	r0, r3
   1b028:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   1b02a:	2300      	movs	r3, #0
    return om;
   1b02c:	e7fb      	b.n	1b026 <os_mbuf_get+0x2a>

0001b02e <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
   1b02e:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
   1b030:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
   1b034:	8803      	ldrh	r3, [r0, #0]
   1b036:	42ab      	cmp	r3, r5
   1b038:	d310      	bcc.n	1b05c <os_mbuf_get_pkthdr+0x2e>
   1b03a:	2dff      	cmp	r5, #255	; 0xff
   1b03c:	d810      	bhi.n	1b060 <os_mbuf_get_pkthdr+0x32>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
   1b03e:	2100      	movs	r1, #0
   1b040:	f7ff ffdc 	bl	1affc <os_mbuf_get>
    if (om) {
   1b044:	4603      	mov	r3, r0
   1b046:	b138      	cbz	r0, 1b058 <os_mbuf_get_pkthdr+0x2a>
        om->om_pkthdr_len = pkthdr_len;
   1b048:	715d      	strb	r5, [r3, #5]
        om->om_data += pkthdr_len;
   1b04a:	6802      	ldr	r2, [r0, #0]
   1b04c:	4415      	add	r5, r2
   1b04e:	6005      	str	r5, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
   1b050:	2200      	movs	r2, #0
   1b052:	8202      	strh	r2, [r0, #16]
        pkthdr->omp_flags = 0;
   1b054:	8242      	strh	r2, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
   1b056:	6142      	str	r2, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
   1b058:	4618      	mov	r0, r3
   1b05a:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   1b05c:	2300      	movs	r3, #0
   1b05e:	e7fb      	b.n	1b058 <os_mbuf_get_pkthdr+0x2a>
   1b060:	2300      	movs	r3, #0
    return om;
   1b062:	e7f9      	b.n	1b058 <os_mbuf_get_pkthdr+0x2a>

0001b064 <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
   1b064:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
   1b066:	6883      	ldr	r3, [r0, #8]
   1b068:	b123      	cbz	r3, 1b074 <os_mbuf_free+0x10>
   1b06a:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
   1b06c:	6858      	ldr	r0, [r3, #4]
   1b06e:	f000 f93d 	bl	1b2ec <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
   1b072:	bd08      	pop	{r3, pc}
    rc = 0;
   1b074:	2000      	movs	r0, #0
    return (rc);
   1b076:	e7fc      	b.n	1b072 <os_mbuf_free+0xe>

0001b078 <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
   1b078:	4603      	mov	r3, r0
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
   1b07a:	b160      	cbz	r0, 1b096 <os_mbuf_free_chain+0x1e>
{
   1b07c:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
   1b07e:	68dc      	ldr	r4, [r3, #12]

        rc = os_mbuf_free(om);
   1b080:	4618      	mov	r0, r3
   1b082:	f7ff ffef 	bl	1b064 <os_mbuf_free>
        if (rc != 0) {
            goto done;
        }

        om = next;
   1b086:	4623      	mov	r3, r4
        if (rc != 0) {
   1b088:	4602      	mov	r2, r0
   1b08a:	b910      	cbnz	r0, 1b092 <os_mbuf_free_chain+0x1a>
    while (om != NULL) {
   1b08c:	2c00      	cmp	r4, #0
   1b08e:	d1f6      	bne.n	1b07e <os_mbuf_free_chain+0x6>
    }

    rc = 0;
   1b090:	2200      	movs	r2, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
   1b092:	4610      	mov	r0, r2
   1b094:	bd10      	pop	{r4, pc}
    rc = 0;
   1b096:	2200      	movs	r2, #0
}
   1b098:	4610      	mov	r0, r2
   1b09a:	4770      	bx	lr

0001b09c <os_mbuf_len>:
uint16_t
os_mbuf_len(const struct os_mbuf *om)
{
    uint16_t len;

    len = 0;
   1b09c:	2300      	movs	r3, #0
    while (om != NULL) {
   1b09e:	e003      	b.n	1b0a8 <os_mbuf_len+0xc>
        len += om->om_len;
   1b0a0:	88c2      	ldrh	r2, [r0, #6]
   1b0a2:	4413      	add	r3, r2
   1b0a4:	b29b      	uxth	r3, r3
        om = SLIST_NEXT(om, om_next);
   1b0a6:	68c0      	ldr	r0, [r0, #12]
    while (om != NULL) {
   1b0a8:	2800      	cmp	r0, #0
   1b0aa:	d1f9      	bne.n	1b0a0 <os_mbuf_len+0x4>
    }

    return len;
}
   1b0ac:	4618      	mov	r0, r3
   1b0ae:	4770      	bx	lr

0001b0b0 <os_mbuf_append>:

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
   1b0b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
   1b0b4:	2800      	cmp	r0, #0
   1b0b6:	d04d      	beq.n	1b154 <os_mbuf_append+0xa4>
   1b0b8:	460f      	mov	r7, r1
   1b0ba:	4691      	mov	r9, r2
   1b0bc:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
   1b0be:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
   1b0c2:	4605      	mov	r5, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
   1b0c4:	e000      	b.n	1b0c8 <os_mbuf_append+0x18>
        last = SLIST_NEXT(last, om_next);
   1b0c6:	461d      	mov	r5, r3
    while (SLIST_NEXT(last, om_next) != NULL) {
   1b0c8:	68eb      	ldr	r3, [r5, #12]
   1b0ca:	2b00      	cmp	r3, #0
   1b0cc:	d1fb      	bne.n	1b0c6 <os_mbuf_append+0x16>
    }

    remainder = len;
   1b0ce:	464e      	mov	r6, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
   1b0d0:	68ab      	ldr	r3, [r5, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   1b0d2:	f105 0410 	add.w	r4, r5, #16
   1b0d6:	881b      	ldrh	r3, [r3, #0]
   1b0d8:	441c      	add	r4, r3
      (om->om_data + om->om_len);
   1b0da:	6828      	ldr	r0, [r5, #0]
   1b0dc:	88eb      	ldrh	r3, [r5, #6]
   1b0de:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   1b0e0:	1a24      	subs	r4, r4, r0
   1b0e2:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
   1b0e4:	b164      	cbz	r4, 1b100 <os_mbuf_append+0x50>
        if (space > remainder) {
   1b0e6:	454c      	cmp	r4, r9
   1b0e8:	dd00      	ble.n	1b0ec <os_mbuf_append+0x3c>
            space = remainder;
   1b0ea:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
   1b0ec:	4622      	mov	r2, r4
   1b0ee:	4639      	mov	r1, r7
   1b0f0:	f000 ff78 	bl	1bfe4 <memcpy>

        last->om_len += space;
   1b0f4:	88eb      	ldrh	r3, [r5, #6]
   1b0f6:	4423      	add	r3, r4
   1b0f8:	80eb      	strh	r3, [r5, #6]
        data += space;
   1b0fa:	4427      	add	r7, r4
        remainder -= space;
   1b0fc:	eba9 0604 	sub.w	r6, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
   1b100:	2e00      	cmp	r6, #0
   1b102:	dd16      	ble.n	1b132 <os_mbuf_append+0x82>
        new = os_mbuf_get(omp, 0);
   1b104:	2100      	movs	r1, #0
   1b106:	4640      	mov	r0, r8
   1b108:	f7ff ff78 	bl	1affc <os_mbuf_get>
        if (!new) {
   1b10c:	4604      	mov	r4, r0
   1b10e:	b180      	cbz	r0, 1b132 <os_mbuf_append+0x82>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
   1b110:	f8b8 2000 	ldrh.w	r2, [r8]
   1b114:	42b2      	cmp	r2, r6
   1b116:	bfa8      	it	ge
   1b118:	4632      	movge	r2, r6
   1b11a:	b292      	uxth	r2, r2
   1b11c:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
   1b11e:	4639      	mov	r1, r7
   1b120:	6800      	ldr	r0, [r0, #0]
   1b122:	f000 ff5f 	bl	1bfe4 <memcpy>
        data += new->om_len;
   1b126:	88e3      	ldrh	r3, [r4, #6]
   1b128:	441f      	add	r7, r3
        remainder -= new->om_len;
   1b12a:	1af6      	subs	r6, r6, r3
        SLIST_NEXT(last, om_next) = new;
   1b12c:	60ec      	str	r4, [r5, #12]
        last = new;
   1b12e:	4625      	mov	r5, r4
   1b130:	e7e6      	b.n	1b100 <os_mbuf_append+0x50>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
   1b132:	f89a 3005 	ldrb.w	r3, [sl, #5]
   1b136:	2b07      	cmp	r3, #7
   1b138:	d907      	bls.n	1b14a <os_mbuf_append+0x9a>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
   1b13a:	eba9 0906 	sub.w	r9, r9, r6
   1b13e:	f8ba 3010 	ldrh.w	r3, [sl, #16]
   1b142:	fa13 f989 	uxtah	r9, r3, r9
   1b146:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
   1b14a:	b106      	cbz	r6, 1b14e <os_mbuf_append+0x9e>
        rc = OS_ENOMEM;
   1b14c:	2601      	movs	r6, #1


    return (0);
err:
    return (rc);
}
   1b14e:	4630      	mov	r0, r6
   1b150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
   1b154:	2602      	movs	r6, #2
   1b156:	e7fa      	b.n	1b14e <os_mbuf_append+0x9e>

0001b158 <os_mbuf_dup>:
    return 0;
}

struct os_mbuf *
os_mbuf_dup(struct os_mbuf *om)
{
   1b158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b15c:	4604      	mov	r4, r0
    struct os_mbuf_pool *omp;
    struct os_mbuf *head;
    struct os_mbuf *copy;

    omp = om->om_omp;
   1b15e:	f8d0 8008 	ldr.w	r8, [r0, #8]

    head = NULL;
    copy = NULL;
   1b162:	2700      	movs	r7, #0
    head = NULL;
   1b164:	463e      	mov	r6, r7

    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   1b166:	e017      	b.n	1b198 <os_mbuf_dup+0x40>
    startoff = 0;
   1b168:	2100      	movs	r1, #0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1b16a:	4623      	mov	r3, r4
   1b16c:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1b170:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1b172:	1ad3      	subs	r3, r2, r3
        if (head) {
            SLIST_NEXT(copy, om_next) = os_mbuf_get(omp,
   1b174:	b299      	uxth	r1, r3
   1b176:	4640      	mov	r0, r8
   1b178:	f7ff ff40 	bl	1affc <os_mbuf_get>
   1b17c:	4605      	mov	r5, r0
   1b17e:	60f8      	str	r0, [r7, #12]
                    OS_MBUF_LEADINGSPACE(om));
            if (!SLIST_NEXT(copy, om_next)) {
   1b180:	b188      	cbz	r0, 1b1a6 <os_mbuf_dup+0x4e>
            if (OS_MBUF_IS_PKTHDR(om)) {
                _os_mbuf_copypkthdr(head, om);
            }
            copy = head;
        }
        copy->om_flags = om->om_flags;
   1b182:	7923      	ldrb	r3, [r4, #4]
   1b184:	712b      	strb	r3, [r5, #4]
        copy->om_len = om->om_len;
   1b186:	88e3      	ldrh	r3, [r4, #6]
   1b188:	80eb      	strh	r3, [r5, #6]
        memcpy(OS_MBUF_DATA(copy, uint8_t *), OS_MBUF_DATA(om, uint8_t *),
   1b18a:	88e2      	ldrh	r2, [r4, #6]
   1b18c:	6821      	ldr	r1, [r4, #0]
   1b18e:	6828      	ldr	r0, [r5, #0]
   1b190:	f000 ff28 	bl	1bfe4 <memcpy>
    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   1b194:	68e4      	ldr	r4, [r4, #12]
   1b196:	462f      	mov	r7, r5
   1b198:	b14c      	cbz	r4, 1b1ae <os_mbuf_dup+0x56>
        if (head) {
   1b19a:	b15e      	cbz	r6, 1b1b4 <os_mbuf_dup+0x5c>
    if (OS_MBUF_IS_PKTHDR(om)) {
   1b19c:	7963      	ldrb	r3, [r4, #5]
   1b19e:	2b07      	cmp	r3, #7
   1b1a0:	d9e2      	bls.n	1b168 <os_mbuf_dup+0x10>
        startoff = om->om_pkthdr_len;
   1b1a2:	b299      	uxth	r1, r3
   1b1a4:	e7e1      	b.n	1b16a <os_mbuf_dup+0x12>
                os_mbuf_free_chain(head);
   1b1a6:	4630      	mov	r0, r6
   1b1a8:	f7ff ff66 	bl	1b078 <os_mbuf_free_chain>
                om->om_len);
    }

    return (head);
err:
    return (NULL);
   1b1ac:	462e      	mov	r6, r5
}
   1b1ae:	4630      	mov	r0, r6
   1b1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (OS_MBUF_IS_PKTHDR(om)) {
   1b1b4:	7963      	ldrb	r3, [r4, #5]
   1b1b6:	2b07      	cmp	r3, #7
   1b1b8:	d911      	bls.n	1b1de <os_mbuf_dup+0x86>
        startoff = om->om_pkthdr_len;
   1b1ba:	b299      	uxth	r1, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1b1bc:	4623      	mov	r3, r4
   1b1be:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1b1c2:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1b1c4:	1ad3      	subs	r3, r2, r3
            head = os_mbuf_get(omp, OS_MBUF_LEADINGSPACE(om));
   1b1c6:	b299      	uxth	r1, r3
   1b1c8:	4640      	mov	r0, r8
   1b1ca:	f7ff ff17 	bl	1affc <os_mbuf_get>
            if (!head) {
   1b1ce:	4606      	mov	r6, r0
   1b1d0:	2800      	cmp	r0, #0
   1b1d2:	d0ec      	beq.n	1b1ae <os_mbuf_dup+0x56>
            if (OS_MBUF_IS_PKTHDR(om)) {
   1b1d4:	7963      	ldrb	r3, [r4, #5]
   1b1d6:	2b07      	cmp	r3, #7
   1b1d8:	d803      	bhi.n	1b1e2 <os_mbuf_dup+0x8a>
            copy = head;
   1b1da:	4605      	mov	r5, r0
   1b1dc:	e7d1      	b.n	1b182 <os_mbuf_dup+0x2a>
    startoff = 0;
   1b1de:	2100      	movs	r1, #0
   1b1e0:	e7ec      	b.n	1b1bc <os_mbuf_dup+0x64>
    assert(new_buf->om_len == 0);
   1b1e2:	88c3      	ldrh	r3, [r0, #6]
   1b1e4:	b973      	cbnz	r3, 1b204 <os_mbuf_dup+0xac>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
   1b1e6:	f100 0510 	add.w	r5, r0, #16
   1b1ea:	7962      	ldrb	r2, [r4, #5]
   1b1ec:	f104 0110 	add.w	r1, r4, #16
   1b1f0:	4628      	mov	r0, r5
   1b1f2:	f000 fef7 	bl	1bfe4 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
   1b1f6:	7963      	ldrb	r3, [r4, #5]
   1b1f8:	7173      	strb	r3, [r6, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
   1b1fa:	7963      	ldrb	r3, [r4, #5]
   1b1fc:	441d      	add	r5, r3
   1b1fe:	6035      	str	r5, [r6, #0]
            copy = head;
   1b200:	4635      	mov	r5, r6
   1b202:	e7be      	b.n	1b182 <os_mbuf_dup+0x2a>
    assert(new_buf->om_len == 0);
   1b204:	2300      	movs	r3, #0
   1b206:	461a      	mov	r2, r3
   1b208:	4619      	mov	r1, r3
   1b20a:	4618      	mov	r0, r3
   1b20c:	f7ff faf4 	bl	1a7f8 <__assert_func>

0001b210 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   1b210:	2800      	cmp	r0, #0
   1b212:	d031      	beq.n	1b278 <os_mempool_init_internal+0x68>
{
   1b214:	b430      	push	{r4, r5}
   1b216:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
   1b218:	2a00      	cmp	r2, #0
   1b21a:	d02f      	beq.n	1b27c <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
   1b21c:	b1bb      	cbz	r3, 1b24e <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
   1b21e:	b113      	cbz	r3, 1b226 <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
   1b220:	f013 0f03 	tst.w	r3, #3
   1b224:	d12c      	bne.n	1b280 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
   1b226:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
   1b228:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
   1b22a:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
   1b22c:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1b230:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
   1b232:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
   1b234:	60e3      	str	r3, [r4, #12]
    mp->name = name;
   1b236:	9802      	ldr	r0, [sp, #8]
   1b238:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
   1b23a:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
   1b23c:	b199      	cbz	r1, 1b266 <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   1b23e:	f012 0f03 	tst.w	r2, #3
   1b242:	d002      	beq.n	1b24a <os_mempool_init_internal+0x3a>
   1b244:	f022 0203 	bic.w	r2, r2, #3
   1b248:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
   1b24a:	2001      	movs	r0, #1
   1b24c:	e007      	b.n	1b25e <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
   1b24e:	2900      	cmp	r1, #0
   1b250:	d0e5      	beq.n	1b21e <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
   1b252:	2003      	movs	r0, #3
   1b254:	e00e      	b.n	1b274 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
   1b256:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
   1b258:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
   1b25a:	3001      	adds	r0, #1
            block_addr += true_block_size;
   1b25c:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
   1b25e:	4281      	cmp	r1, r0
   1b260:	dcf9      	bgt.n	1b256 <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
   1b262:	2200      	movs	r2, #0
   1b264:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
   1b266:	2000      	movs	r0, #0
   1b268:	6120      	str	r0, [r4, #16]
   1b26a:	4b06      	ldr	r3, [pc, #24]	; (1b284 <os_mempool_init_internal+0x74>)
   1b26c:	685a      	ldr	r2, [r3, #4]
   1b26e:	6014      	str	r4, [r2, #0]
   1b270:	3410      	adds	r4, #16
   1b272:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
   1b274:	bc30      	pop	{r4, r5}
   1b276:	4770      	bx	lr
        return OS_INVALID_PARM;
   1b278:	2003      	movs	r0, #3
}
   1b27a:	4770      	bx	lr
        return OS_INVALID_PARM;
   1b27c:	2003      	movs	r0, #3
   1b27e:	e7f9      	b.n	1b274 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
   1b280:	2004      	movs	r0, #4
   1b282:	e7f7      	b.n	1b274 <os_mempool_init_internal+0x64>
   1b284:	2000de98 	.word	0x2000de98

0001b288 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
   1b288:	b510      	push	{r4, lr}
   1b28a:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
   1b28c:	2400      	movs	r4, #0
   1b28e:	9401      	str	r4, [sp, #4]
   1b290:	9c04      	ldr	r4, [sp, #16]
   1b292:	9400      	str	r4, [sp, #0]
   1b294:	f7ff ffbc 	bl	1b210 <os_mempool_init_internal>
}
   1b298:	b002      	add	sp, #8
   1b29a:	bd10      	pop	{r4, pc}

0001b29c <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
   1b29c:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
   1b29e:	b1a0      	cbz	r0, 1b2ca <os_memblock_get+0x2e>
   1b2a0:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   1b2a2:	f000 fd3f 	bl	1bd24 <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
   1b2a6:	88e3      	ldrh	r3, [r4, #6]
   1b2a8:	b153      	cbz	r3, 1b2c0 <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
   1b2aa:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
   1b2ac:	682a      	ldr	r2, [r5, #0]
   1b2ae:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
   1b2b0:	3b01      	subs	r3, #1
   1b2b2:	b29b      	uxth	r3, r3
   1b2b4:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
   1b2b6:	8922      	ldrh	r2, [r4, #8]
   1b2b8:	4293      	cmp	r3, r2
   1b2ba:	d202      	bcs.n	1b2c2 <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
   1b2bc:	8123      	strh	r3, [r4, #8]
   1b2be:	e000      	b.n	1b2c2 <os_memblock_get+0x26>
    block = NULL;
   1b2c0:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
   1b2c2:	f000 fd35 	bl	1bd30 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
   1b2c6:	4628      	mov	r0, r5
   1b2c8:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
   1b2ca:	2500      	movs	r5, #0
    return (void *)block;
   1b2cc:	e7fb      	b.n	1b2c6 <os_memblock_get+0x2a>

0001b2ce <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
   1b2ce:	b538      	push	{r3, r4, r5, lr}
   1b2d0:	4604      	mov	r4, r0
   1b2d2:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
   1b2d4:	f000 fd26 	bl	1bd24 <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
   1b2d8:	6963      	ldr	r3, [r4, #20]
   1b2da:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
   1b2dc:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
   1b2de:	88e3      	ldrh	r3, [r4, #6]
   1b2e0:	3301      	adds	r3, #1
   1b2e2:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
   1b2e4:	f000 fd24 	bl	1bd30 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
   1b2e8:	2000      	movs	r0, #0
   1b2ea:	bd38      	pop	{r3, r4, r5, pc}

0001b2ec <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
   1b2ec:	b168      	cbz	r0, 1b30a <os_memblock_put+0x1e>
{
   1b2ee:	b508      	push	{r3, lr}
    if ((mp == NULL) || (block_addr == NULL)) {
   1b2f0:	b169      	cbz	r1, 1b30e <os_memblock_put+0x22>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
   1b2f2:	7a83      	ldrb	r3, [r0, #10]
   1b2f4:	f013 0f01 	tst.w	r3, #1
   1b2f8:	d004      	beq.n	1b304 <os_memblock_put+0x18>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
   1b2fa:	69c3      	ldr	r3, [r0, #28]
   1b2fc:	b113      	cbz	r3, 1b304 <os_memblock_put+0x18>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
   1b2fe:	6a02      	ldr	r2, [r0, #32]
   1b300:	4798      	blx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
   1b302:	bd08      	pop	{r3, pc}
    ret = os_memblock_put_from_cb(mp, block_addr);
   1b304:	f7ff ffe3 	bl	1b2ce <os_memblock_put_from_cb>
   1b308:	e7fb      	b.n	1b302 <os_memblock_put+0x16>
        ret = OS_INVALID_PARM;
   1b30a:	2003      	movs	r0, #3
}
   1b30c:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1b30e:	2003      	movs	r0, #3
   1b310:	e7f7      	b.n	1b302 <os_memblock_put+0x16>
	...

0001b314 <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
   1b314:	4b02      	ldr	r3, [pc, #8]	; (1b320 <os_mempool_module_init+0xc>)
   1b316:	2200      	movs	r2, #0
   1b318:	601a      	str	r2, [r3, #0]
   1b31a:	605b      	str	r3, [r3, #4]
}
   1b31c:	4770      	bx	lr
   1b31e:	bf00      	nop
   1b320:	2000de98 	.word	0x2000de98

0001b324 <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   1b324:	4b02      	ldr	r3, [pc, #8]	; (1b330 <os_msys_find_biggest_pool+0xc>)
   1b326:	6818      	ldr	r0, [r3, #0]
   1b328:	b108      	cbz	r0, 1b32e <os_msys_find_biggest_pool+0xa>
   1b32a:	6858      	ldr	r0, [r3, #4]
   1b32c:	3808      	subs	r0, #8
}
   1b32e:	4770      	bx	lr
   1b330:	2000010c 	.word	0x2000010c

0001b334 <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1b334:	4b09      	ldr	r3, [pc, #36]	; (1b35c <os_msys_find_pool+0x28>)
   1b336:	6819      	ldr	r1, [r3, #0]
   1b338:	460b      	mov	r3, r1
   1b33a:	b123      	cbz	r3, 1b346 <os_msys_find_pool+0x12>
        if (dsize <= pool->omp_databuf_len) {
   1b33c:	881a      	ldrh	r2, [r3, #0]
   1b33e:	4282      	cmp	r2, r0
   1b340:	d201      	bcs.n	1b346 <os_msys_find_pool+0x12>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1b342:	689b      	ldr	r3, [r3, #8]
   1b344:	e7f9      	b.n	1b33a <os_msys_find_pool+0x6>
            break;
        }
    }

    if (!pool) {
   1b346:	b10b      	cbz	r3, 1b34c <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
   1b348:	4618      	mov	r0, r3
   1b34a:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   1b34c:	b119      	cbz	r1, 1b356 <os_msys_find_pool+0x22>
   1b34e:	4b03      	ldr	r3, [pc, #12]	; (1b35c <os_msys_find_pool+0x28>)
   1b350:	685b      	ldr	r3, [r3, #4]
   1b352:	3b08      	subs	r3, #8
   1b354:	e7f8      	b.n	1b348 <os_msys_find_pool+0x14>
   1b356:	460b      	mov	r3, r1
    return (pool);
   1b358:	e7f6      	b.n	1b348 <os_msys_find_pool+0x14>
   1b35a:	bf00      	nop
   1b35c:	2000010c 	.word	0x2000010c

0001b360 <os_msys_register>:
{
   1b360:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1b362:	4b11      	ldr	r3, [pc, #68]	; (1b3a8 <os_msys_register+0x48>)
   1b364:	681d      	ldr	r5, [r3, #0]
   1b366:	462b      	mov	r3, r5
    prev = NULL;
   1b368:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1b36a:	b133      	cbz	r3, 1b37a <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
   1b36c:	8801      	ldrh	r1, [r0, #0]
   1b36e:	881a      	ldrh	r2, [r3, #0]
   1b370:	4291      	cmp	r1, r2
   1b372:	d302      	bcc.n	1b37a <os_msys_register+0x1a>
        prev = pool;
   1b374:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1b376:	689b      	ldr	r3, [r3, #8]
   1b378:	e7f7      	b.n	1b36a <os_msys_register+0xa>
    if (prev) {
   1b37a:	b15c      	cbz	r4, 1b394 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   1b37c:	68a3      	ldr	r3, [r4, #8]
   1b37e:	6083      	str	r3, [r0, #8]
   1b380:	b11b      	cbz	r3, 1b38a <os_msys_register+0x2a>
   1b382:	60a0      	str	r0, [r4, #8]
}
   1b384:	2000      	movs	r0, #0
   1b386:	bc30      	pop	{r4, r5}
   1b388:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   1b38a:	f100 0308 	add.w	r3, r0, #8
   1b38e:	4a06      	ldr	r2, [pc, #24]	; (1b3a8 <os_msys_register+0x48>)
   1b390:	6053      	str	r3, [r2, #4]
   1b392:	e7f6      	b.n	1b382 <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
   1b394:	6085      	str	r5, [r0, #8]
   1b396:	b115      	cbz	r5, 1b39e <os_msys_register+0x3e>
   1b398:	4b03      	ldr	r3, [pc, #12]	; (1b3a8 <os_msys_register+0x48>)
   1b39a:	6018      	str	r0, [r3, #0]
   1b39c:	e7f2      	b.n	1b384 <os_msys_register+0x24>
   1b39e:	f100 0308 	add.w	r3, r0, #8
   1b3a2:	4a01      	ldr	r2, [pc, #4]	; (1b3a8 <os_msys_register+0x48>)
   1b3a4:	6053      	str	r3, [r2, #4]
   1b3a6:	e7f7      	b.n	1b398 <os_msys_register+0x38>
   1b3a8:	2000010c 	.word	0x2000010c

0001b3ac <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
   1b3ac:	b530      	push	{r4, r5, lr}
   1b3ae:	b083      	sub	sp, #12
   1b3b0:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
   1b3b2:	9d07      	ldr	r5, [sp, #28]
   1b3b4:	9501      	str	r5, [sp, #4]
   1b3b6:	9d06      	ldr	r5, [sp, #24]
   1b3b8:	9500      	str	r5, [sp, #0]
   1b3ba:	f001 f96d 	bl	1c698 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
   1b3be:	b138      	cbz	r0, 1b3d0 <os_msys_init_once+0x24>
   1b3c0:	2000      	movs	r0, #0
   1b3c2:	9000      	str	r0, [sp, #0]
   1b3c4:	4b09      	ldr	r3, [pc, #36]	; (1b3ec <os_msys_init_once+0x40>)
   1b3c6:	681d      	ldr	r5, [r3, #0]
   1b3c8:	4603      	mov	r3, r0
   1b3ca:	4602      	mov	r2, r0
   1b3cc:	4601      	mov	r1, r0
   1b3ce:	47a8      	blx	r5

    rc = os_msys_register(mbuf_pool);
   1b3d0:	4620      	mov	r0, r4
   1b3d2:	f7ff ffc5 	bl	1b360 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1b3d6:	b138      	cbz	r0, 1b3e8 <os_msys_init_once+0x3c>
   1b3d8:	2000      	movs	r0, #0
   1b3da:	9000      	str	r0, [sp, #0]
   1b3dc:	4b03      	ldr	r3, [pc, #12]	; (1b3ec <os_msys_init_once+0x40>)
   1b3de:	681c      	ldr	r4, [r3, #0]
   1b3e0:	4603      	mov	r3, r0
   1b3e2:	4602      	mov	r2, r0
   1b3e4:	4601      	mov	r1, r0
   1b3e6:	47a0      	blx	r4
}
   1b3e8:	b003      	add	sp, #12
   1b3ea:	bd30      	pop	{r4, r5, pc}
   1b3ec:	20000104 	.word	0x20000104

0001b3f0 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
   1b3f0:	4b02      	ldr	r3, [pc, #8]	; (1b3fc <os_msys_reset+0xc>)
   1b3f2:	2200      	movs	r2, #0
   1b3f4:	601a      	str	r2, [r3, #0]
   1b3f6:	605b      	str	r3, [r3, #4]
}
   1b3f8:	4770      	bx	lr
   1b3fa:	bf00      	nop
   1b3fc:	2000010c 	.word	0x2000010c

0001b400 <os_msys_get_pkthdr>:
{
   1b400:	b510      	push	{r4, lr}
   1b402:	460c      	mov	r4, r1
    if (dsize == 0) {
   1b404:	b930      	cbnz	r0, 1b414 <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
   1b406:	f7ff ff8d 	bl	1b324 <os_msys_find_biggest_pool>
    if (!pool) {
   1b40a:	b158      	cbz	r0, 1b424 <os_msys_get_pkthdr+0x24>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
   1b40c:	b2e1      	uxtb	r1, r4
   1b40e:	f7ff fe0e 	bl	1b02e <os_mbuf_get_pkthdr>
}
   1b412:	bd10      	pop	{r4, pc}
   1b414:	f101 0308 	add.w	r3, r1, #8
   1b418:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
   1b41a:	4403      	add	r3, r0
   1b41c:	b298      	uxth	r0, r3
   1b41e:	f7ff ff89 	bl	1b334 <os_msys_find_pool>
   1b422:	e7f2      	b.n	1b40a <os_msys_get_pkthdr+0xa>
    return (NULL);
   1b424:	2000      	movs	r0, #0
   1b426:	e7f4      	b.n	1b412 <os_msys_get_pkthdr+0x12>

0001b428 <os_msys_init>:

void
os_msys_init(void)
{
   1b428:	b500      	push	{lr}
   1b42a:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
   1b42c:	f7ff ffe0 	bl	1b3f0 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
   1b430:	4b06      	ldr	r3, [pc, #24]	; (1b44c <os_msys_init+0x24>)
   1b432:	9301      	str	r3, [sp, #4]
   1b434:	f44f 7392 	mov.w	r3, #292	; 0x124
   1b438:	9300      	str	r3, [sp, #0]
   1b43a:	2340      	movs	r3, #64	; 0x40
   1b43c:	4a04      	ldr	r2, [pc, #16]	; (1b450 <os_msys_init+0x28>)
   1b43e:	4905      	ldr	r1, [pc, #20]	; (1b454 <os_msys_init+0x2c>)
   1b440:	4805      	ldr	r0, [pc, #20]	; (1b458 <os_msys_init+0x30>)
   1b442:	f7ff ffb3 	bl	1b3ac <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
   1b446:	b003      	add	sp, #12
   1b448:	f85d fb04 	ldr.w	pc, [sp], #4
   1b44c:	000226a4 	.word	0x000226a4
   1b450:	2000d988 	.word	0x2000d988
   1b454:	2000d994 	.word	0x2000d994
   1b458:	20009088 	.word	0x20009088

0001b45c <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
   1b45c:	4603      	mov	r3, r0
   1b45e:	b128      	cbz	r0, 1b46c <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
   1b460:	2000      	movs	r0, #0
   1b462:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
   1b464:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
   1b466:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
   1b468:	6018      	str	r0, [r3, #0]
   1b46a:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1b46c:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
   1b46e:	4770      	bx	lr

0001b470 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
   1b470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
   1b472:	4b2c      	ldr	r3, [pc, #176]	; (1b524 <os_mutex_release+0xb4>)
   1b474:	681b      	ldr	r3, [r3, #0]
   1b476:	2b00      	cmp	r3, #0
   1b478:	d04d      	beq.n	1b516 <os_mutex_release+0xa6>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   1b47a:	2800      	cmp	r0, #0
   1b47c:	d04d      	beq.n	1b51a <os_mutex_release+0xaa>
   1b47e:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
   1b480:	f000 f97a 	bl	1b778 <os_sched_get_current_task>
   1b484:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
   1b486:	88e3      	ldrh	r3, [r4, #6]
   1b488:	2b00      	cmp	r3, #0
   1b48a:	d048      	beq.n	1b51e <os_mutex_release+0xae>
   1b48c:	68a2      	ldr	r2, [r4, #8]
   1b48e:	4282      	cmp	r2, r0
   1b490:	d001      	beq.n	1b496 <os_mutex_release+0x26>
        ret = OS_BAD_MUTEX;
   1b492:	2005      	movs	r0, #5
   1b494:	e040      	b.n	1b518 <os_mutex_release+0xa8>
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
   1b496:	2b01      	cmp	r3, #1
   1b498:	d003      	beq.n	1b4a2 <os_mutex_release+0x32>
        --mu->mu_level;
   1b49a:	3b01      	subs	r3, #1
   1b49c:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   1b49e:	2000      	movs	r0, #0
        goto done;
   1b4a0:	e03a      	b.n	1b518 <os_mutex_release+0xa8>
    }

    OS_ENTER_CRITICAL(sr);
   1b4a2:	f000 fc3f 	bl	1bd24 <os_arch_save_sr>
   1b4a6:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
   1b4a8:	88e3      	ldrh	r3, [r4, #6]
   1b4aa:	3b01      	subs	r3, #1
   1b4ac:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
   1b4ae:	7aea      	ldrb	r2, [r5, #11]
   1b4b0:	7963      	ldrb	r3, [r4, #5]
   1b4b2:	429a      	cmp	r2, r3
   1b4b4:	d11e      	bne.n	1b4f4 <os_mutex_release+0x84>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
   1b4b6:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
   1b4b8:	b146      	cbz	r6, 1b4cc <os_mutex_release+0x5c>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
   1b4ba:	69f3      	ldr	r3, [r6, #28]
   1b4bc:	b1fb      	cbz	r3, 1b4fe <os_mutex_release+0x8e>
        os_sched_wakeup(rdy);
   1b4be:	4630      	mov	r0, r6
   1b4c0:	f000 f9ae 	bl	1b820 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
   1b4c4:	2301      	movs	r3, #1
   1b4c6:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
   1b4c8:	7af3      	ldrb	r3, [r6, #11]
   1b4ca:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
   1b4cc:	60a6      	str	r6, [r4, #8]
    if (rdy) {
   1b4ce:	b116      	cbz	r6, 1b4d6 <os_mutex_release+0x66>
        rdy->t_lockcnt++;
   1b4d0:	7bb3      	ldrb	r3, [r6, #14]
   1b4d2:	3301      	adds	r3, #1
   1b4d4:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
   1b4d6:	7bab      	ldrb	r3, [r5, #14]
   1b4d8:	3b01      	subs	r3, #1
   1b4da:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
   1b4dc:	f000 fa1a 	bl	1b914 <os_sched_next_task>
   1b4e0:	4604      	mov	r4, r0
    if (rdy != current) {
   1b4e2:	4285      	cmp	r5, r0
   1b4e4:	d010      	beq.n	1b508 <os_mutex_release+0x98>
        resched = 1;
   1b4e6:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
   1b4e8:	4638      	mov	r0, r7
   1b4ea:	f000 fc21 	bl	1bd30 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   1b4ee:	b96d      	cbnz	r5, 1b50c <os_mutex_release+0x9c>
        os_sched(rdy);
    }

    ret = OS_OK;
   1b4f0:	2000      	movs	r0, #0
   1b4f2:	e011      	b.n	1b518 <os_mutex_release+0xa8>
        current->t_prio = mu->mu_prio;
   1b4f4:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
   1b4f6:	4628      	mov	r0, r5
   1b4f8:	f000 fa24 	bl	1b944 <os_sched_resort>
   1b4fc:	e7db      	b.n	1b4b6 <os_mutex_release+0x46>
        assert(rdy->t_obj);
   1b4fe:	461a      	mov	r2, r3
   1b500:	4619      	mov	r1, r3
   1b502:	4618      	mov	r0, r3
   1b504:	f7ff f978 	bl	1a7f8 <__assert_func>
    resched = 0;
   1b508:	2500      	movs	r5, #0
   1b50a:	e7ed      	b.n	1b4e8 <os_mutex_release+0x78>
        os_sched(rdy);
   1b50c:	4620      	mov	r0, r4
   1b50e:	f000 fa07 	bl	1b920 <os_sched>
    ret = OS_OK;
   1b512:	2000      	movs	r0, #0
   1b514:	e000      	b.n	1b518 <os_mutex_release+0xa8>
        ret = OS_NOT_STARTED;
   1b516:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
   1b518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
   1b51a:	2003      	movs	r0, #3
   1b51c:	e7fc      	b.n	1b518 <os_mutex_release+0xa8>
        ret = OS_BAD_MUTEX;
   1b51e:	2005      	movs	r0, #5
   1b520:	e7fa      	b.n	1b518 <os_mutex_release+0xa8>
   1b522:	bf00      	nop
   1b524:	2000de88 	.word	0x2000de88

0001b528 <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
   1b528:	4b36      	ldr	r3, [pc, #216]	; (1b604 <os_mutex_pend+0xdc>)
   1b52a:	681b      	ldr	r3, [r3, #0]
   1b52c:	2b00      	cmp	r3, #0
   1b52e:	d065      	beq.n	1b5fc <os_mutex_pend+0xd4>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   1b530:	2800      	cmp	r0, #0
   1b532:	d065      	beq.n	1b600 <os_mutex_pend+0xd8>
{
   1b534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b538:	460f      	mov	r7, r1
   1b53a:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
   1b53c:	f000 fbf2 	bl	1bd24 <os_arch_save_sr>
   1b540:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
   1b542:	f000 f919 	bl	1b778 <os_sched_get_current_task>
   1b546:	4605      	mov	r5, r0
    if (mu->mu_level == 0) {
   1b548:	88e3      	ldrh	r3, [r4, #6]
   1b54a:	b19b      	cbz	r3, 1b574 <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
   1b54c:	68a2      	ldr	r2, [r4, #8]
   1b54e:	4282      	cmp	r2, r0
   1b550:	d01e      	beq.n	1b590 <os_mutex_pend+0x68>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
   1b552:	b327      	cbz	r7, 1b59e <os_mutex_pend+0x76>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
   1b554:	7ad1      	ldrb	r1, [r2, #11]
   1b556:	7ac3      	ldrb	r3, [r0, #11]
   1b558:	4299      	cmp	r1, r3
   1b55a:	d825      	bhi.n	1b5a8 <os_mutex_pend+0x80>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
   1b55c:	6821      	ldr	r1, [r4, #0]
   1b55e:	b369      	cbz	r1, 1b5bc <os_mutex_pend+0x94>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1b560:	460b      	mov	r3, r1
    last = NULL;
   1b562:	2600      	movs	r6, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1b564:	b32b      	cbz	r3, 1b5b2 <os_mutex_pend+0x8a>
            if (current->t_prio < entry->t_prio) {
   1b566:	7ae8      	ldrb	r0, [r5, #11]
   1b568:	7ada      	ldrb	r2, [r3, #11]
   1b56a:	4290      	cmp	r0, r2
   1b56c:	d321      	bcc.n	1b5b2 <os_mutex_pend+0x8a>
                break;
            }
            last = entry;
   1b56e:	461e      	mov	r6, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1b570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1b572:	e7f7      	b.n	1b564 <os_mutex_pend+0x3c>
        mu->mu_owner = current;
   1b574:	60a0      	str	r0, [r4, #8]
        mu->mu_prio  = current->t_prio;
   1b576:	7ac3      	ldrb	r3, [r0, #11]
   1b578:	7163      	strb	r3, [r4, #5]
        current->t_lockcnt++;
   1b57a:	7b83      	ldrb	r3, [r0, #14]
   1b57c:	3301      	adds	r3, #1
   1b57e:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
   1b580:	2301      	movs	r3, #1
   1b582:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   1b584:	4640      	mov	r0, r8
   1b586:	f000 fbd3 	bl	1bd30 <os_arch_restore_sr>
        ret = OS_OK;
   1b58a:	2000      	movs	r0, #0
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
   1b58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ++mu->mu_level;
   1b590:	3301      	adds	r3, #1
   1b592:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   1b594:	4640      	mov	r0, r8
   1b596:	f000 fbcb 	bl	1bd30 <os_arch_restore_sr>
        ret = OS_OK;
   1b59a:	2000      	movs	r0, #0
        goto done;
   1b59c:	e7f6      	b.n	1b58c <os_mutex_pend+0x64>
        OS_EXIT_CRITICAL(sr);
   1b59e:	4640      	mov	r0, r8
   1b5a0:	f000 fbc6 	bl	1bd30 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
   1b5a4:	2006      	movs	r0, #6
        goto done;
   1b5a6:	e7f1      	b.n	1b58c <os_mutex_pend+0x64>
        mu->mu_owner->t_prio = current->t_prio;
   1b5a8:	72d3      	strb	r3, [r2, #11]
        os_sched_resort(mu->mu_owner);
   1b5aa:	68a0      	ldr	r0, [r4, #8]
   1b5ac:	f000 f9ca 	bl	1b944 <os_sched_resort>
   1b5b0:	e7d4      	b.n	1b55c <os_mutex_pend+0x34>
    if (last) {
   1b5b2:	b11e      	cbz	r6, 1b5bc <os_mutex_pend+0x94>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
   1b5b4:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
   1b5b6:	64eb      	str	r3, [r5, #76]	; 0x4c
   1b5b8:	64f5      	str	r5, [r6, #76]	; 0x4c
   1b5ba:	e001      	b.n	1b5c0 <os_mutex_pend+0x98>
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
   1b5bc:	64e9      	str	r1, [r5, #76]	; 0x4c
   1b5be:	6025      	str	r5, [r4, #0]
    current->t_obj = mu;
   1b5c0:	61ec      	str	r4, [r5, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
   1b5c2:	7b6b      	ldrb	r3, [r5, #13]
   1b5c4:	f043 0304 	orr.w	r3, r3, #4
   1b5c8:	736b      	strb	r3, [r5, #13]
    os_sched_sleep(current, timeout);
   1b5ca:	4639      	mov	r1, r7
   1b5cc:	4628      	mov	r0, r5
   1b5ce:	f000 f8df 	bl	1b790 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
   1b5d2:	4640      	mov	r0, r8
   1b5d4:	f000 fbac 	bl	1bd30 <os_arch_restore_sr>
    os_sched(NULL);
   1b5d8:	2000      	movs	r0, #0
   1b5da:	f000 f9a1 	bl	1b920 <os_sched>
    OS_ENTER_CRITICAL(sr);
   1b5de:	f000 fba1 	bl	1bd24 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
   1b5e2:	7b6b      	ldrb	r3, [r5, #13]
   1b5e4:	f023 0304 	bic.w	r3, r3, #4
   1b5e8:	736b      	strb	r3, [r5, #13]
    OS_EXIT_CRITICAL(sr);
   1b5ea:	f000 fba1 	bl	1bd30 <os_arch_restore_sr>
    if (mu->mu_owner == current) {
   1b5ee:	68a3      	ldr	r3, [r4, #8]
   1b5f0:	42ab      	cmp	r3, r5
   1b5f2:	d001      	beq.n	1b5f8 <os_mutex_pend+0xd0>
        ret = OS_TIMEOUT;
   1b5f4:	2006      	movs	r0, #6
   1b5f6:	e7c9      	b.n	1b58c <os_mutex_pend+0x64>
        ret = OS_OK;
   1b5f8:	2000      	movs	r0, #0
   1b5fa:	e7c7      	b.n	1b58c <os_mutex_pend+0x64>
        ret = OS_NOT_STARTED;
   1b5fc:	2009      	movs	r0, #9
   1b5fe:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1b600:	2003      	movs	r0, #3
}
   1b602:	4770      	bx	lr
   1b604:	2000de88 	.word	0x2000de88

0001b608 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
   1b608:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   1b60a:	4b05      	ldr	r3, [pc, #20]	; (1b620 <os_sanity_check_list_lock+0x18>)
   1b60c:	6818      	ldr	r0, [r3, #0]
   1b60e:	b900      	cbnz	r0, 1b612 <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1b610:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
   1b612:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b616:	4803      	ldr	r0, [pc, #12]	; (1b624 <os_sanity_check_list_lock+0x1c>)
   1b618:	f7ff ff86 	bl	1b528 <os_mutex_pend>
err:
   1b61c:	e7f8      	b.n	1b610 <os_sanity_check_list_lock+0x8>
   1b61e:	bf00      	nop
   1b620:	2000de88 	.word	0x2000de88
   1b624:	2000dea0 	.word	0x2000dea0

0001b628 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
   1b628:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   1b62a:	4b04      	ldr	r3, [pc, #16]	; (1b63c <os_sanity_check_list_unlock+0x14>)
   1b62c:	6818      	ldr	r0, [r3, #0]
   1b62e:	b900      	cbnz	r0, 1b632 <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1b630:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
   1b632:	4803      	ldr	r0, [pc, #12]	; (1b640 <os_sanity_check_list_unlock+0x18>)
   1b634:	f7ff ff1c 	bl	1b470 <os_mutex_release>
err:
   1b638:	e7fa      	b.n	1b630 <os_sanity_check_list_unlock+0x8>
   1b63a:	bf00      	nop
   1b63c:	2000de88 	.word	0x2000de88
   1b640:	2000dea0 	.word	0x2000dea0

0001b644 <os_sanity_check_init>:
    memset(sc, 0, sizeof(*sc));
   1b644:	2300      	movs	r3, #0
   1b646:	6003      	str	r3, [r0, #0]
   1b648:	6043      	str	r3, [r0, #4]
   1b64a:	6083      	str	r3, [r0, #8]
   1b64c:	60c3      	str	r3, [r0, #12]
   1b64e:	6103      	str	r3, [r0, #16]
}
   1b650:	4618      	mov	r0, r3
   1b652:	4770      	bx	lr

0001b654 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
   1b654:	b510      	push	{r4, lr}
   1b656:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
   1b658:	f7ff ffd6 	bl	1b608 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
   1b65c:	4603      	mov	r3, r0
   1b65e:	b108      	cbz	r0, 1b664 <os_sanity_check_register+0x10>
    }

    return (0);
err:
    return (rc);
}
   1b660:	4618      	mov	r0, r3
   1b662:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
   1b664:	4b03      	ldr	r3, [pc, #12]	; (1b674 <os_sanity_check_register+0x20>)
   1b666:	681a      	ldr	r2, [r3, #0]
   1b668:	6122      	str	r2, [r4, #16]
   1b66a:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
   1b66c:	f7ff ffdc 	bl	1b628 <os_sanity_check_list_unlock>
   1b670:	4603      	mov	r3, r0
err:
   1b672:	e7f5      	b.n	1b660 <os_sanity_check_register+0xc>
   1b674:	2000d9b0 	.word	0x2000d9b0

0001b678 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
   1b678:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
   1b67a:	f7ff ffc5 	bl	1b608 <os_sanity_check_list_lock>
    if (rc != 0) {
   1b67e:	b910      	cbnz	r0, 1b686 <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1b680:	4b17      	ldr	r3, [pc, #92]	; (1b6e0 <os_sanity_run+0x68>)
   1b682:	681c      	ldr	r4, [r3, #0]
   1b684:	e00e      	b.n	1b6a4 <os_sanity_run+0x2c>
        assert(0);
   1b686:	2300      	movs	r3, #0
   1b688:	461a      	mov	r2, r3
   1b68a:	4619      	mov	r1, r3
   1b68c:	4618      	mov	r0, r3
   1b68e:	f7ff f8b3 	bl	1a7f8 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
   1b692:	f000 facf 	bl	1bc34 <os_time_get>
   1b696:	6823      	ldr	r3, [r4, #0]
   1b698:	6862      	ldr	r2, [r4, #4]
   1b69a:	4413      	add	r3, r2
   1b69c:	1ac3      	subs	r3, r0, r3
   1b69e:	2b00      	cmp	r3, #0
   1b6a0:	dc0d      	bgt.n	1b6be <os_sanity_run+0x46>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1b6a2:	6924      	ldr	r4, [r4, #16]
   1b6a4:	b18c      	cbz	r4, 1b6ca <os_sanity_run+0x52>
        if (sc->sc_func) {
   1b6a6:	68a3      	ldr	r3, [r4, #8]
   1b6a8:	2b00      	cmp	r3, #0
   1b6aa:	d0f2      	beq.n	1b692 <os_sanity_run+0x1a>
            rc = sc->sc_func(sc, sc->sc_arg);
   1b6ac:	68e1      	ldr	r1, [r4, #12]
   1b6ae:	4620      	mov	r0, r4
   1b6b0:	4798      	blx	r3
            if (rc == OS_OK) {
   1b6b2:	2800      	cmp	r0, #0
   1b6b4:	d1ed      	bne.n	1b692 <os_sanity_run+0x1a>
                sc->sc_checkin_last = os_time_get();
   1b6b6:	f000 fabd 	bl	1bc34 <os_time_get>
   1b6ba:	6020      	str	r0, [r4, #0]
                continue;
   1b6bc:	e7f1      	b.n	1b6a2 <os_sanity_run+0x2a>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
   1b6be:	2300      	movs	r3, #0
   1b6c0:	461a      	mov	r2, r3
   1b6c2:	4619      	mov	r1, r3
   1b6c4:	4618      	mov	r0, r3
   1b6c6:	f7ff f897 	bl	1a7f8 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
   1b6ca:	f7ff ffad 	bl	1b628 <os_sanity_check_list_unlock>
    if (rc != 0) {
   1b6ce:	b900      	cbnz	r0, 1b6d2 <os_sanity_run+0x5a>
        assert(0);
    }
}
   1b6d0:	bd10      	pop	{r4, pc}
        assert(0);
   1b6d2:	2300      	movs	r3, #0
   1b6d4:	461a      	mov	r2, r3
   1b6d6:	4619      	mov	r1, r3
   1b6d8:	4618      	mov	r0, r3
   1b6da:	f7ff f88d 	bl	1a7f8 <__assert_func>
   1b6de:	bf00      	nop
   1b6e0:	2000d9b0 	.word	0x2000d9b0

0001b6e4 <os_sanity_init>:

int
os_sanity_init(void)
{
   1b6e4:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
   1b6e6:	4802      	ldr	r0, [pc, #8]	; (1b6f0 <os_sanity_init+0xc>)
   1b6e8:	f7ff feb8 	bl	1b45c <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
   1b6ec:	bd08      	pop	{r3, pc}
   1b6ee:	bf00      	nop
   1b6f0:	2000dea0 	.word	0x2000dea0

0001b6f4 <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
   1b6f4:	7b03      	ldrb	r3, [r0, #12]
   1b6f6:	2b01      	cmp	r3, #1
   1b6f8:	d001      	beq.n	1b6fe <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
   1b6fa:	2002      	movs	r0, #2
}
   1b6fc:	4770      	bx	lr
{
   1b6fe:	b510      	push	{r4, lr}
   1b700:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1b702:	f000 fb0f 	bl	1bd24 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   1b706:	4b0f      	ldr	r3, [pc, #60]	; (1b744 <os_sched_insert+0x50>)
   1b708:	681b      	ldr	r3, [r3, #0]
   1b70a:	b12b      	cbz	r3, 1b718 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
   1b70c:	7ae1      	ldrb	r1, [r4, #11]
   1b70e:	7ada      	ldrb	r2, [r3, #11]
   1b710:	4291      	cmp	r1, r2
   1b712:	d301      	bcc.n	1b718 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   1b714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1b716:	e7f8      	b.n	1b70a <os_sched_insert+0x16>
    if (entry) {
   1b718:	b153      	cbz	r3, 1b730 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
   1b71a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1b71c:	64a2      	str	r2, [r4, #72]	; 0x48
   1b71e:	6463      	str	r3, [r4, #68]	; 0x44
   1b720:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1b722:	6014      	str	r4, [r2, #0]
   1b724:	3444      	adds	r4, #68	; 0x44
   1b726:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
   1b728:	f000 fb02 	bl	1bd30 <os_arch_restore_sr>
    return (0);
   1b72c:	2000      	movs	r0, #0
}
   1b72e:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
   1b730:	2300      	movs	r3, #0
   1b732:	6463      	str	r3, [r4, #68]	; 0x44
   1b734:	4b03      	ldr	r3, [pc, #12]	; (1b744 <os_sched_insert+0x50>)
   1b736:	685a      	ldr	r2, [r3, #4]
   1b738:	64a2      	str	r2, [r4, #72]	; 0x48
   1b73a:	6014      	str	r4, [r2, #0]
   1b73c:	3444      	adds	r4, #68	; 0x44
   1b73e:	605c      	str	r4, [r3, #4]
   1b740:	e7f2      	b.n	1b728 <os_sched_insert+0x34>
   1b742:	bf00      	nop
   1b744:	20000114 	.word	0x20000114

0001b748 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
   1b748:	b410      	push	{r4}
    top = g_current_task->t_stacktop - g_current_task->t_stacksize;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(top[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
   1b74a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1b74c:	3301      	adds	r3, #1
   1b74e:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
   1b750:	4b06      	ldr	r3, [pc, #24]	; (1b76c <os_sched_ctx_sw_hook+0x24>)
   1b752:	681c      	ldr	r4, [r3, #0]
   1b754:	4b06      	ldr	r3, [pc, #24]	; (1b770 <os_sched_ctx_sw_hook+0x28>)
   1b756:	6818      	ldr	r0, [r3, #0]
   1b758:	4906      	ldr	r1, [pc, #24]	; (1b774 <os_sched_ctx_sw_hook+0x2c>)
   1b75a:	680b      	ldr	r3, [r1, #0]
   1b75c:	1ac2      	subs	r2, r0, r3
   1b75e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1b760:	4413      	add	r3, r2
   1b762:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = g_os_time;
   1b764:	6008      	str	r0, [r1, #0]
}
   1b766:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b76a:	4770      	bx	lr
   1b76c:	2000deb0 	.word	0x2000deb0
   1b770:	2000dec0 	.word	0x2000dec0
   1b774:	2000deac 	.word	0x2000deac

0001b778 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
   1b778:	4b01      	ldr	r3, [pc, #4]	; (1b780 <os_sched_get_current_task+0x8>)
   1b77a:	6818      	ldr	r0, [r3, #0]
   1b77c:	4770      	bx	lr
   1b77e:	bf00      	nop
   1b780:	2000deb0 	.word	0x2000deb0

0001b784 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
   1b784:	4b01      	ldr	r3, [pc, #4]	; (1b78c <os_sched_set_current_task+0x8>)
   1b786:	6018      	str	r0, [r3, #0]
}
   1b788:	4770      	bx	lr
   1b78a:	bf00      	nop
   1b78c:	2000deb0 	.word	0x2000deb0

0001b790 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
   1b790:	b538      	push	{r3, r4, r5, lr}
   1b792:	4604      	mov	r4, r0
   1b794:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1b796:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1b798:	b1d3      	cbz	r3, 1b7d0 <os_sched_sleep+0x40>
   1b79a:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1b79c:	649a      	str	r2, [r3, #72]	; 0x48
   1b79e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1b7a0:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1b7a2:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
   1b7a4:	2302      	movs	r3, #2
   1b7a6:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
   1b7a8:	f000 fa44 	bl	1bc34 <os_time_get>
   1b7ac:	4428      	add	r0, r5
   1b7ae:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
   1b7b0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1b7b4:	d010      	beq.n	1b7d8 <os_sched_sleep+0x48>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   1b7b6:	4b18      	ldr	r3, [pc, #96]	; (1b818 <os_sched_sleep+0x88>)
   1b7b8:	681b      	ldr	r3, [r3, #0]
   1b7ba:	b1d3      	cbz	r3, 1b7f2 <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   1b7bc:	7b5a      	ldrb	r2, [r3, #13]
   1b7be:	f012 0f01 	tst.w	r2, #1
   1b7c2:	d116      	bne.n	1b7f2 <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
   1b7c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1b7c6:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   1b7c8:	2a00      	cmp	r2, #0
   1b7ca:	dc12      	bgt.n	1b7f2 <os_sched_sleep+0x62>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   1b7cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1b7ce:	e7f4      	b.n	1b7ba <os_sched_sleep+0x2a>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1b7d0:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1b7d2:	4b12      	ldr	r3, [pc, #72]	; (1b81c <os_sched_sleep+0x8c>)
   1b7d4:	605a      	str	r2, [r3, #4]
   1b7d6:	e7e2      	b.n	1b79e <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
   1b7d8:	7b63      	ldrb	r3, [r4, #13]
   1b7da:	f043 0301 	orr.w	r3, r3, #1
   1b7de:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   1b7e0:	2300      	movs	r3, #0
   1b7e2:	6463      	str	r3, [r4, #68]	; 0x44
   1b7e4:	4b0c      	ldr	r3, [pc, #48]	; (1b818 <os_sched_sleep+0x88>)
   1b7e6:	685a      	ldr	r2, [r3, #4]
   1b7e8:	64a2      	str	r2, [r4, #72]	; 0x48
   1b7ea:	6014      	str	r4, [r2, #0]
   1b7ec:	3444      	adds	r4, #68	; 0x44
   1b7ee:	605c      	str	r4, [r3, #4]
   1b7f0:	e007      	b.n	1b802 <os_sched_sleep+0x72>
                break;
            }
        }
        if (entry) {
   1b7f2:	b143      	cbz	r3, 1b806 <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
   1b7f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1b7f6:	64a2      	str	r2, [r4, #72]	; 0x48
   1b7f8:	6463      	str	r3, [r4, #68]	; 0x44
   1b7fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1b7fc:	6014      	str	r4, [r2, #0]
   1b7fe:	3444      	adds	r4, #68	; 0x44
   1b800:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
   1b802:	2000      	movs	r0, #0
   1b804:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   1b806:	2300      	movs	r3, #0
   1b808:	6463      	str	r3, [r4, #68]	; 0x44
   1b80a:	4b03      	ldr	r3, [pc, #12]	; (1b818 <os_sched_sleep+0x88>)
   1b80c:	685a      	ldr	r2, [r3, #4]
   1b80e:	64a2      	str	r2, [r4, #72]	; 0x48
   1b810:	6014      	str	r4, [r2, #0]
   1b812:	3444      	adds	r4, #68	; 0x44
   1b814:	605c      	str	r4, [r3, #4]
   1b816:	e7f4      	b.n	1b802 <os_sched_sleep+0x72>
   1b818:	2000011c 	.word	0x2000011c
   1b81c:	20000114 	.word	0x20000114

0001b820 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
   1b820:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
   1b822:	7b03      	ldrb	r3, [r0, #12]
   1b824:	2b02      	cmp	r3, #2
   1b826:	d108      	bne.n	1b83a <os_sched_wakeup+0x1a>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
   1b828:	69c3      	ldr	r3, [r0, #28]
   1b82a:	b1db      	cbz	r3, 1b864 <os_sched_wakeup+0x44>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   1b82c:	681a      	ldr	r2, [r3, #0]
   1b82e:	b152      	cbz	r2, 1b846 <os_sched_wakeup+0x26>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   1b830:	4282      	cmp	r2, r0
   1b832:	d10f      	bne.n	1b854 <os_sched_wakeup+0x34>
   1b834:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   1b836:	601a      	str	r2, [r3, #0]
   1b838:	e011      	b.n	1b85e <os_sched_wakeup+0x3e>
    assert(t->t_state == OS_TASK_SLEEP);
   1b83a:	2300      	movs	r3, #0
   1b83c:	461a      	mov	r2, r3
   1b83e:	4619      	mov	r1, r3
   1b840:	4618      	mov	r0, r3
   1b842:	f7fe ffd9 	bl	1a7f8 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   1b846:	2300      	movs	r3, #0
   1b848:	461a      	mov	r2, r3
   1b84a:	4619      	mov	r1, r3
   1b84c:	4618      	mov	r0, r3
   1b84e:	f7fe ffd3 	bl	1a7f8 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   1b852:	461a      	mov	r2, r3
   1b854:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1b856:	4283      	cmp	r3, r0
   1b858:	d1fb      	bne.n	1b852 <os_sched_wakeup+0x32>
   1b85a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1b85c:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
   1b85e:	2300      	movs	r3, #0
   1b860:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
   1b862:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
   1b864:	2301      	movs	r3, #1
   1b866:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
   1b868:	2300      	movs	r3, #0
   1b86a:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
   1b86c:	7b43      	ldrb	r3, [r0, #13]
   1b86e:	f023 0301 	bic.w	r3, r3, #1
   1b872:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1b874:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1b876:	b143      	cbz	r3, 1b88a <os_sched_wakeup+0x6a>
   1b878:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1b87a:	649a      	str	r2, [r3, #72]	; 0x48
   1b87c:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1b87e:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1b880:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
   1b882:	f7ff ff37 	bl	1b6f4 <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
   1b886:	2000      	movs	r0, #0
   1b888:	bd08      	pop	{r3, pc}
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1b88a:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1b88c:	4b01      	ldr	r3, [pc, #4]	; (1b894 <os_sched_wakeup+0x74>)
   1b88e:	605a      	str	r2, [r3, #4]
   1b890:	e7f4      	b.n	1b87c <os_sched_wakeup+0x5c>
   1b892:	bf00      	nop
   1b894:	2000011c 	.word	0x2000011c

0001b898 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
   1b898:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
   1b89a:	f000 f9cb 	bl	1bc34 <os_time_get>
   1b89e:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   1b8a0:	f000 fa40 	bl	1bd24 <os_arch_save_sr>
   1b8a4:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
   1b8a6:	4b0a      	ldr	r3, [pc, #40]	; (1b8d0 <os_sched_os_timer_exp+0x38>)
   1b8a8:	6818      	ldr	r0, [r3, #0]
    while (t) {
   1b8aa:	b160      	cbz	r0, 1b8c6 <os_sched_os_timer_exp+0x2e>
        /* If task waiting forever, do not check next wakeup time */
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
   1b8ac:	7b43      	ldrb	r3, [r0, #13]
   1b8ae:	f013 0f01 	tst.w	r3, #1
   1b8b2:	d108      	bne.n	1b8c6 <os_sched_os_timer_exp+0x2e>
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
   1b8b4:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
   1b8b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1b8b8:	1aeb      	subs	r3, r5, r3
   1b8ba:	2b00      	cmp	r3, #0
   1b8bc:	db03      	blt.n	1b8c6 <os_sched_os_timer_exp+0x2e>
            os_sched_wakeup(t);
   1b8be:	f7ff ffaf 	bl	1b820 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
   1b8c2:	4620      	mov	r0, r4
   1b8c4:	e7f1      	b.n	1b8aa <os_sched_os_timer_exp+0x12>
    }

    OS_EXIT_CRITICAL(sr);
   1b8c6:	4630      	mov	r0, r6
   1b8c8:	f000 fa32 	bl	1bd30 <os_arch_restore_sr>
}
   1b8cc:	bd70      	pop	{r4, r5, r6, pc}
   1b8ce:	bf00      	nop
   1b8d0:	2000011c 	.word	0x2000011c

0001b8d4 <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
   1b8d4:	b510      	push	{r4, lr}
   1b8d6:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
   1b8d8:	f000 fa2d 	bl	1bd36 <os_arch_in_critical>
   1b8dc:	b150      	cbz	r0, 1b8f4 <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
   1b8de:	4b0c      	ldr	r3, [pc, #48]	; (1b910 <os_sched_wakeup_ticks+0x3c>)
   1b8e0:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
   1b8e2:	b17b      	cbz	r3, 1b904 <os_sched_wakeup_ticks+0x30>
   1b8e4:	7b5a      	ldrb	r2, [r3, #13]
   1b8e6:	f012 0f01 	tst.w	r2, #1
   1b8ea:	d10e      	bne.n	1b90a <os_sched_wakeup_ticks+0x36>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
   1b8ec:	6b58      	ldr	r0, [r3, #52]	; 0x34
   1b8ee:	1b00      	subs	r0, r0, r4
   1b8f0:	d406      	bmi.n	1b900 <os_sched_wakeup_ticks+0x2c>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
   1b8f2:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   1b8f4:	2300      	movs	r3, #0
   1b8f6:	461a      	mov	r2, r3
   1b8f8:	4619      	mov	r1, r3
   1b8fa:	4618      	mov	r0, r3
   1b8fc:	f7fe ff7c 	bl	1a7f8 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
   1b900:	2000      	movs	r0, #0
   1b902:	e7f6      	b.n	1b8f2 <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
   1b904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b908:	e7f3      	b.n	1b8f2 <os_sched_wakeup_ticks+0x1e>
   1b90a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   1b90e:	e7f0      	b.n	1b8f2 <os_sched_wakeup_ticks+0x1e>
   1b910:	2000011c 	.word	0x2000011c

0001b914 <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
   1b914:	4b01      	ldr	r3, [pc, #4]	; (1b91c <os_sched_next_task+0x8>)
   1b916:	6818      	ldr	r0, [r3, #0]
   1b918:	4770      	bx	lr
   1b91a:	bf00      	nop
   1b91c:	20000114 	.word	0x20000114

0001b920 <os_sched>:
{
   1b920:	b538      	push	{r3, r4, r5, lr}
   1b922:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1b924:	f000 f9fe 	bl	1bd24 <os_arch_save_sr>
   1b928:	4605      	mov	r5, r0
    if (!next_t) {
   1b92a:	b134      	cbz	r4, 1b93a <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
   1b92c:	4620      	mov	r0, r4
   1b92e:	f000 f9ef 	bl	1bd10 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
   1b932:	4628      	mov	r0, r5
   1b934:	f000 f9fc 	bl	1bd30 <os_arch_restore_sr>
}
   1b938:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
   1b93a:	f7ff ffeb 	bl	1b914 <os_sched_next_task>
   1b93e:	4604      	mov	r4, r0
   1b940:	e7f4      	b.n	1b92c <os_sched+0xc>
	...

0001b944 <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
   1b944:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
   1b946:	7b03      	ldrb	r3, [r0, #12]
   1b948:	2b01      	cmp	r3, #1
   1b94a:	d000      	beq.n	1b94e <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
   1b94c:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1b94e:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1b950:	b13b      	cbz	r3, 1b962 <os_sched_resort+0x1e>
   1b952:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1b954:	649a      	str	r2, [r3, #72]	; 0x48
   1b956:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1b958:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1b95a:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
   1b95c:	f7ff feca 	bl	1b6f4 <os_sched_insert>
}
   1b960:	e7f4      	b.n	1b94c <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1b962:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1b964:	4b01      	ldr	r3, [pc, #4]	; (1b96c <os_sched_resort+0x28>)
   1b966:	605a      	str	r2, [r3, #4]
   1b968:	e7f5      	b.n	1b956 <os_sched_resort+0x12>
   1b96a:	bf00      	nop
   1b96c:	20000114 	.word	0x20000114

0001b970 <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
   1b970:	4603      	mov	r3, r0
   1b972:	b118      	cbz	r0, 1b97c <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
   1b974:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
   1b976:	2000      	movs	r0, #0
   1b978:	6018      	str	r0, [r3, #0]
   1b97a:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1b97c:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
   1b97e:	4770      	bx	lr

0001b980 <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
   1b980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
   1b982:	4b17      	ldr	r3, [pc, #92]	; (1b9e0 <os_sem_release+0x60>)
   1b984:	681b      	ldr	r3, [r3, #0]
   1b986:	b33b      	cbz	r3, 1b9d8 <os_sem_release+0x58>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   1b988:	b340      	cbz	r0, 1b9dc <os_sem_release+0x5c>
   1b98a:	4604      	mov	r4, r0
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
   1b98c:	f7ff fef4 	bl	1b778 <os_sched_get_current_task>
   1b990:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
   1b992:	f000 f9c7 	bl	1bd24 <os_arch_save_sr>
   1b996:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
   1b998:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
   1b99a:	b165      	cbz	r5, 1b9b6 <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   1b99c:	7b6b      	ldrb	r3, [r5, #13]
   1b99e:	f023 0302 	bic.w	r3, r3, #2
   1b9a2:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
   1b9a4:	4628      	mov	r0, r5
   1b9a6:	f7ff ff3b 	bl	1b820 <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
   1b9aa:	7afa      	ldrb	r2, [r7, #11]
   1b9ac:	7aeb      	ldrb	r3, [r5, #11]
   1b9ae:	429a      	cmp	r2, r3
   1b9b0:	d80b      	bhi.n	1b9ca <os_sem_release+0x4a>
    resched = 0;
   1b9b2:	2400      	movs	r4, #0
   1b9b4:	e003      	b.n	1b9be <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
   1b9b6:	88e3      	ldrh	r3, [r4, #6]
   1b9b8:	3301      	adds	r3, #1
   1b9ba:	80e3      	strh	r3, [r4, #6]
    resched = 0;
   1b9bc:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
   1b9be:	4630      	mov	r0, r6
   1b9c0:	f000 f9b6 	bl	1bd30 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   1b9c4:	b91c      	cbnz	r4, 1b9ce <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
   1b9c6:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
   1b9c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
   1b9ca:	2401      	movs	r4, #1
   1b9cc:	e7f7      	b.n	1b9be <os_sem_release+0x3e>
        os_sched(rdy);
   1b9ce:	4628      	mov	r0, r5
   1b9d0:	f7ff ffa6 	bl	1b920 <os_sched>
    ret = OS_OK;
   1b9d4:	2000      	movs	r0, #0
   1b9d6:	e7f7      	b.n	1b9c8 <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
   1b9d8:	2009      	movs	r0, #9
   1b9da:	e7f5      	b.n	1b9c8 <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
   1b9dc:	2003      	movs	r0, #3
   1b9de:	e7f3      	b.n	1b9c8 <os_sem_release+0x48>
   1b9e0:	2000de88 	.word	0x2000de88

0001b9e4 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
   1b9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
   1b9e6:	4b2c      	ldr	r3, [pc, #176]	; (1ba98 <os_sem_pend+0xb4>)
   1b9e8:	681b      	ldr	r3, [r3, #0]
   1b9ea:	2b00      	cmp	r3, #0
   1b9ec:	d04f      	beq.n	1ba8e <os_sem_pend+0xaa>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   1b9ee:	2800      	cmp	r0, #0
   1b9f0:	d04f      	beq.n	1ba92 <os_sem_pend+0xae>
   1b9f2:	460d      	mov	r5, r1
   1b9f4:	4604      	mov	r4, r0
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
   1b9f6:	f7ff febf 	bl	1b778 <os_sched_get_current_task>
   1b9fa:	4606      	mov	r6, r0

    OS_ENTER_CRITICAL(sr);
   1b9fc:	f000 f992 	bl	1bd24 <os_arch_save_sr>
   1ba00:	4607      	mov	r7, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
   1ba02:	88e3      	ldrh	r3, [r4, #6]
   1ba04:	b14b      	cbz	r3, 1ba1a <os_sem_pend+0x36>
        sem->sem_tokens--;
   1ba06:	3b01      	subs	r3, #1
   1ba08:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   1ba0a:	2400      	movs	r4, #0
    sched = 0;
   1ba0c:	4625      	mov	r5, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
   1ba0e:	4638      	mov	r0, r7
   1ba10:	f000 f98e 	bl	1bd30 <os_arch_restore_sr>

    if (sched) {
   1ba14:	bb45      	cbnz	r5, 1ba68 <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
   1ba16:	4620      	mov	r0, r4
   1ba18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
   1ba1a:	b315      	cbz	r5, 1ba62 <os_sem_pend+0x7e>
        current->t_obj = sem;
   1ba1c:	61f4      	str	r4, [r6, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
   1ba1e:	7b73      	ldrb	r3, [r6, #13]
   1ba20:	f043 0302 	orr.w	r3, r3, #2
   1ba24:	7373      	strb	r3, [r6, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
   1ba26:	f8d4 c000 	ldr.w	ip, [r4]
   1ba2a:	f1bc 0f00 	cmp.w	ip, #0
   1ba2e:	d00e      	beq.n	1ba4e <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1ba30:	4663      	mov	r3, ip
        last = NULL;
   1ba32:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1ba34:	b133      	cbz	r3, 1ba44 <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
   1ba36:	7af1      	ldrb	r1, [r6, #11]
   1ba38:	7ada      	ldrb	r2, [r3, #11]
   1ba3a:	4291      	cmp	r1, r2
   1ba3c:	d302      	bcc.n	1ba44 <os_sem_pend+0x60>
                last = entry;
   1ba3e:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1ba40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1ba42:	e7f7      	b.n	1ba34 <os_sem_pend+0x50>
        if (last) {
   1ba44:	b118      	cbz	r0, 1ba4e <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
   1ba46:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1ba48:	64f3      	str	r3, [r6, #76]	; 0x4c
   1ba4a:	64c6      	str	r6, [r0, #76]	; 0x4c
   1ba4c:	e002      	b.n	1ba54 <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
   1ba4e:	f8c6 c04c 	str.w	ip, [r6, #76]	; 0x4c
   1ba52:	6026      	str	r6, [r4, #0]
        os_sched_sleep(current, timeout);
   1ba54:	4629      	mov	r1, r5
   1ba56:	4630      	mov	r0, r6
   1ba58:	f7ff fe9a 	bl	1b790 <os_sched_sleep>
        ret = OS_OK;
   1ba5c:	2400      	movs	r4, #0
        sched = 1;
   1ba5e:	2501      	movs	r5, #1
   1ba60:	e7d5      	b.n	1ba0e <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
   1ba62:	2406      	movs	r4, #6
    sched = 0;
   1ba64:	2500      	movs	r5, #0
   1ba66:	e7d2      	b.n	1ba0e <os_sem_pend+0x2a>
        os_sched(NULL);
   1ba68:	2000      	movs	r0, #0
   1ba6a:	f7ff ff59 	bl	1b920 <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
   1ba6e:	7b73      	ldrb	r3, [r6, #13]
   1ba70:	f013 0f02 	tst.w	r3, #2
   1ba74:	d101      	bne.n	1ba7a <os_sem_pend+0x96>
            ret = OS_OK;
   1ba76:	2400      	movs	r4, #0
   1ba78:	e7cd      	b.n	1ba16 <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
   1ba7a:	f000 f953 	bl	1bd24 <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   1ba7e:	7b73      	ldrb	r3, [r6, #13]
   1ba80:	f023 0302 	bic.w	r3, r3, #2
   1ba84:	7373      	strb	r3, [r6, #13]
            OS_EXIT_CRITICAL(sr);
   1ba86:	f000 f953 	bl	1bd30 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
   1ba8a:	2406      	movs	r4, #6
   1ba8c:	e7c3      	b.n	1ba16 <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
   1ba8e:	2409      	movs	r4, #9
   1ba90:	e7c1      	b.n	1ba16 <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
   1ba92:	2403      	movs	r4, #3
   1ba94:	e7bf      	b.n	1ba16 <os_sem_pend+0x32>
   1ba96:	bf00      	nop
   1ba98:	2000de88 	.word	0x2000de88

0001ba9c <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
   1ba9c:	2300      	movs	r3, #0
   1ba9e:	e003      	b.n	1baa8 <_clear_stack+0xc>
        stack_bottom[i] = OS_STACK_PATTERN;
   1baa0:	4a03      	ldr	r2, [pc, #12]	; (1bab0 <_clear_stack+0x14>)
   1baa2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
   1baa6:	3301      	adds	r3, #1
   1baa8:	428b      	cmp	r3, r1
   1baaa:	dbf9      	blt.n	1baa0 <_clear_stack+0x4>
    }
}
   1baac:	4770      	bx	lr
   1baae:	bf00      	nop
   1bab0:	deadbeef 	.word	0xdeadbeef

0001bab4 <os_task_init>:

int
os_task_init(struct os_task *t, const char *name, os_task_func_t func,
        void *arg, uint8_t prio, os_time_t sanity_itvl,
        os_stack_t *stack_bottom, uint16_t stack_size)
{
   1bab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bab8:	4604      	mov	r4, r0
   1baba:	460f      	mov	r7, r1
   1babc:	4690      	mov	r8, r2
   1babe:	461d      	mov	r5, r3
   1bac0:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    struct os_sanity_check *sc;
    int rc;
    struct os_task *task;

    memset(t, 0, sizeof(*t));
   1bac4:	2250      	movs	r2, #80	; 0x50
   1bac6:	2100      	movs	r1, #0
   1bac8:	f000 fa99 	bl	1bffe <memset>

    t->t_func = func;
   1bacc:	f8c4 8014 	str.w	r8, [r4, #20]
    t->t_arg = arg;
   1bad0:	61a5      	str	r5, [r4, #24]
    OS_ENTER_CRITICAL(sr);
   1bad2:	f000 f927 	bl	1bd24 <os_arch_save_sr>
    rc = g_task_id;
   1bad6:	4b2b      	ldr	r3, [pc, #172]	; (1bb84 <os_task_init+0xd0>)
   1bad8:	781d      	ldrb	r5, [r3, #0]
    g_task_id++;
   1bada:	1c6a      	adds	r2, r5, #1
   1badc:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   1bade:	f000 f927 	bl	1bd30 <os_arch_restore_sr>

    t->t_taskid = os_task_next_id();
   1bae2:	72a5      	strb	r5, [r4, #10]
    t->t_prio = prio;
   1bae4:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1bae8:	72e3      	strb	r3, [r4, #11]

    t->t_state = OS_TASK_READY;
   1baea:	2301      	movs	r3, #1
   1baec:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
   1baee:	6127      	str	r7, [r4, #16]
    t->t_next_wakeup = 0;
   1baf0:	2300      	movs	r3, #0
   1baf2:	6363      	str	r3, [r4, #52]	; 0x34

    rc = os_sanity_check_init(&t->t_sanity_check);
   1baf4:	f104 0720 	add.w	r7, r4, #32
   1baf8:	4638      	mov	r0, r7
   1bafa:	f7ff fda3 	bl	1b644 <os_sanity_check_init>
    if (rc != OS_OK) {
   1bafe:	4605      	mov	r5, r0
   1bb00:	2800      	cmp	r0, #0
   1bb02:	d132      	bne.n	1bb6a <os_task_init+0xb6>
        goto err;
    }

    if (sanity_itvl != OS_WAIT_FOREVER) {
   1bb04:	9b07      	ldr	r3, [sp, #28]
   1bb06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1bb0a:	d005      	beq.n	1bb18 <os_task_init+0x64>
        sc = (struct os_sanity_check *) &t->t_sanity_check;
        sc->sc_checkin_itvl = sanity_itvl;
   1bb0c:	6263      	str	r3, [r4, #36]	; 0x24

        rc = os_sanity_check_register(sc);
   1bb0e:	4638      	mov	r0, r7
   1bb10:	f7ff fda0 	bl	1b654 <os_sanity_check_register>
        if (rc != OS_OK) {
   1bb14:	4605      	mov	r5, r0
   1bb16:	bb40      	cbnz	r0, 1bb6a <os_task_init+0xb6>
            goto err;
        }
    }

    _clear_stack(stack_bottom, stack_size);
   1bb18:	4631      	mov	r1, r6
   1bb1a:	9808      	ldr	r0, [sp, #32]
   1bb1c:	f7ff ffbe 	bl	1ba9c <_clear_stack>
    t->t_stacktop = &stack_bottom[stack_size];
   1bb20:	9b08      	ldr	r3, [sp, #32]
   1bb22:	eb03 0186 	add.w	r1, r3, r6, lsl #2
   1bb26:	6061      	str	r1, [r4, #4]
    t->t_stacksize = stack_size;
   1bb28:	8126      	strh	r6, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
   1bb2a:	4632      	mov	r2, r6
   1bb2c:	4620      	mov	r0, r4
   1bb2e:	f000 f907 	bl	1bd40 <os_arch_task_stack_init>
   1bb32:	6020      	str	r0, [r4, #0]
            t->t_stacksize);

    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1bb34:	4b14      	ldr	r3, [pc, #80]	; (1bb88 <os_task_init+0xd4>)
   1bb36:	681b      	ldr	r3, [r3, #0]
   1bb38:	b15b      	cbz	r3, 1bb52 <os_task_init+0x9e>
        assert(t->t_prio != task->t_prio);
   1bb3a:	7ae1      	ldrb	r1, [r4, #11]
   1bb3c:	7ada      	ldrb	r2, [r3, #11]
   1bb3e:	4291      	cmp	r1, r2
   1bb40:	d001      	beq.n	1bb46 <os_task_init+0x92>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1bb42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bb44:	e7f8      	b.n	1bb38 <os_task_init+0x84>
        assert(t->t_prio != task->t_prio);
   1bb46:	2300      	movs	r3, #0
   1bb48:	461a      	mov	r2, r3
   1bb4a:	4619      	mov	r1, r3
   1bb4c:	4618      	mov	r0, r3
   1bb4e:	f7fe fe53 	bl	1a7f8 <__assert_func>
    }

    /* insert this task into the task list */
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
   1bb52:	6423      	str	r3, [r4, #64]	; 0x40
   1bb54:	4b0c      	ldr	r3, [pc, #48]	; (1bb88 <os_task_init+0xd4>)
   1bb56:	685a      	ldr	r2, [r3, #4]
   1bb58:	6014      	str	r4, [r2, #0]
   1bb5a:	f104 0240 	add.w	r2, r4, #64	; 0x40
   1bb5e:	605a      	str	r2, [r3, #4]

    /* insert this task into the scheduler list */
    rc = os_sched_insert(t);
   1bb60:	4620      	mov	r0, r4
   1bb62:	f7ff fdc7 	bl	1b6f4 <os_sched_insert>
   1bb66:	4605      	mov	r5, r0
    if (rc != OS_OK) {
   1bb68:	b110      	cbz	r0, 1bb70 <os_task_init+0xbc>
    }

    return (0);
err:
    return (rc);
}
   1bb6a:	4628      	mov	r0, r5
   1bb6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (os_started()) {
   1bb70:	f7fe fefc 	bl	1a96c <os_started>
   1bb74:	b908      	cbnz	r0, 1bb7a <os_task_init+0xc6>
    return (0);
   1bb76:	4605      	mov	r5, r0
   1bb78:	e7f7      	b.n	1bb6a <os_task_init+0xb6>
        os_sched(NULL);
   1bb7a:	2000      	movs	r0, #0
   1bb7c:	f7ff fed0 	bl	1b920 <os_sched>
   1bb80:	e7f3      	b.n	1bb6a <os_task_init+0xb6>
   1bb82:	bf00      	nop
   1bb84:	2000deb4 	.word	0x2000deb4
   1bb88:	2000deb8 	.word	0x2000deb8

0001bb8c <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
   1bb8c:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
   1bb90:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
   1bb92:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
   1bb96:	e9d1 4500 	ldrd	r4, r5, [r1]
   1bb9a:	eb14 0b03 	adds.w	fp, r4, r3
   1bb9e:	f145 0c00 	adc.w	ip, r5, #0
   1bba2:	e9c2 bc00 	strd	fp, ip, [r2]
   1bba6:	688b      	ldr	r3, [r1, #8]
   1bba8:	f641 6184 	movw	r1, #7812	; 0x1e84
   1bbac:	fb01 3000 	mla	r0, r1, r0, r3
   1bbb0:	6090      	str	r0, [r2, #8]
   1bbb2:	4b08      	ldr	r3, [pc, #32]	; (1bbd4 <os_deltatime+0x48>)
   1bbb4:	4298      	cmp	r0, r3
   1bbb6:	dd0a      	ble.n	1bbce <os_deltatime+0x42>
   1bbb8:	f11b 0401 	adds.w	r4, fp, #1
   1bbbc:	f14c 0500 	adc.w	r5, ip, #0
   1bbc0:	e9c2 4500 	strd	r4, r5, [r2]
   1bbc4:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
   1bbc8:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
   1bbcc:	6090      	str	r0, [r2, #8]
}
   1bbce:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1bbd2:	4770      	bx	lr
   1bbd4:	000f423f 	.word	0x000f423f

0001bbd8 <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
   1bbd8:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
   1bbda:	1e04      	subs	r4, r0, #0
   1bbdc:	db0d      	blt.n	1bbfa <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
   1bbde:	f000 f8a1 	bl	1bd24 <os_arch_save_sr>
   1bbe2:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
   1bbe4:	4a11      	ldr	r2, [pc, #68]	; (1bc2c <os_time_tick+0x54>)
   1bbe6:	6813      	ldr	r3, [r2, #0]
    g_os_time += ticks;
   1bbe8:	18e0      	adds	r0, r4, r3
   1bbea:	6010      	str	r0, [r2, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
   1bbec:	ea90 0f03 	teq	r0, r3
   1bbf0:	d409      	bmi.n	1bc06 <os_time_tick+0x2e>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
   1bbf2:	4628      	mov	r0, r5
   1bbf4:	f000 f89c 	bl	1bd30 <os_arch_restore_sr>
}
   1bbf8:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
   1bbfa:	2300      	movs	r3, #0
   1bbfc:	461a      	mov	r2, r3
   1bbfe:	4619      	mov	r1, r3
   1bc00:	4618      	mov	r0, r3
   1bc02:	f7fe fdf9 	bl	1a7f8 <__assert_func>
        delta = g_os_time - basetod.ostime;
   1bc06:	4e0a      	ldr	r6, [pc, #40]	; (1bc30 <os_time_tick+0x58>)
   1bc08:	4631      	mov	r1, r6
   1bc0a:	f851 4b08 	ldr.w	r4, [r1], #8
   1bc0e:	1b04      	subs	r4, r0, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
   1bc10:	460a      	mov	r2, r1
   1bc12:	4620      	mov	r0, r4
   1bc14:	f7ff ffba 	bl	1bb8c <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
   1bc18:	f106 0118 	add.w	r1, r6, #24
   1bc1c:	460a      	mov	r2, r1
   1bc1e:	4620      	mov	r0, r4
   1bc20:	f7ff ffb4 	bl	1bb8c <os_deltatime>
        basetod.ostime = g_os_time;
   1bc24:	4b01      	ldr	r3, [pc, #4]	; (1bc2c <os_time_tick+0x54>)
   1bc26:	681b      	ldr	r3, [r3, #0]
   1bc28:	6033      	str	r3, [r6, #0]
   1bc2a:	e7e2      	b.n	1bbf2 <os_time_tick+0x1a>
   1bc2c:	2000dec0 	.word	0x2000dec0
   1bc30:	2000d9b8 	.word	0x2000d9b8

0001bc34 <os_time_get>:
}
   1bc34:	4b01      	ldr	r3, [pc, #4]	; (1bc3c <os_time_get+0x8>)
   1bc36:	6818      	ldr	r0, [r3, #0]
   1bc38:	4770      	bx	lr
   1bc3a:	bf00      	nop
   1bc3c:	2000dec0 	.word	0x2000dec0

0001bc40 <os_time_advance>:

void
os_time_advance(int ticks)
{
   1bc40:	b510      	push	{r4, lr}
    assert(ticks >= 0);
   1bc42:	1e04      	subs	r4, r0, #0
   1bc44:	db09      	blt.n	1bc5a <os_time_advance+0x1a>

    if (ticks > 0) {
   1bc46:	2c00      	cmp	r4, #0
   1bc48:	dd06      	ble.n	1bc58 <os_time_advance+0x18>
        if (!os_started()) {
   1bc4a:	f7fe fe8f 	bl	1a96c <os_started>
   1bc4e:	b950      	cbnz	r0, 1bc66 <os_time_advance+0x26>
            g_os_time += ticks;
   1bc50:	4a0a      	ldr	r2, [pc, #40]	; (1bc7c <os_time_advance+0x3c>)
   1bc52:	6813      	ldr	r3, [r2, #0]
   1bc54:	441c      	add	r4, r3
   1bc56:	6014      	str	r4, [r2, #0]
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
   1bc58:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
   1bc5a:	2300      	movs	r3, #0
   1bc5c:	461a      	mov	r2, r3
   1bc5e:	4619      	mov	r1, r3
   1bc60:	4618      	mov	r0, r3
   1bc62:	f7fe fdc9 	bl	1a7f8 <__assert_func>
            os_time_tick(ticks);
   1bc66:	4620      	mov	r0, r4
   1bc68:	f7ff ffb6 	bl	1bbd8 <os_time_tick>
            os_callout_tick();
   1bc6c:	f7fe ffa6 	bl	1abbc <os_callout_tick>
            os_sched_os_timer_exp();
   1bc70:	f7ff fe12 	bl	1b898 <os_sched_os_timer_exp>
            os_sched(NULL);
   1bc74:	2000      	movs	r0, #0
   1bc76:	f7ff fe53 	bl	1b920 <os_sched>
}
   1bc7a:	e7ed      	b.n	1bc58 <os_time_advance+0x18>
   1bc7c:	2000dec0 	.word	0x2000dec0

0001bc80 <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
   1bc80:	b900      	cbnz	r0, 1bc84 <os_time_delay+0x4>
   1bc82:	4770      	bx	lr
{
   1bc84:	b538      	push	{r3, r4, r5, lr}
   1bc86:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   1bc88:	f000 f84c 	bl	1bd24 <os_arch_save_sr>
   1bc8c:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
   1bc8e:	f7ff fd73 	bl	1b778 <os_sched_get_current_task>
   1bc92:	4621      	mov	r1, r4
   1bc94:	f7ff fd7c 	bl	1b790 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
   1bc98:	4628      	mov	r0, r5
   1bc9a:	f000 f849 	bl	1bd30 <os_arch_restore_sr>
        os_sched(NULL);
   1bc9e:	2000      	movs	r0, #0
   1bca0:	f7ff fe3e 	bl	1b920 <os_sched>
    }
}
   1bca4:	bd38      	pop	{r3, r4, r5, pc}
	...

0001bca8 <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
   1bca8:	b570      	push	{r4, r5, r6, lr}
   1bcaa:	4605      	mov	r5, r0
   1bcac:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
   1bcae:	f000 f839 	bl	1bd24 <os_arch_save_sr>
   1bcb2:	4606      	mov	r6, r0
    if (tv != NULL) {
   1bcb4:	b145      	cbz	r5, 1bcc8 <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
   1bcb6:	f7ff ffbd 	bl	1bc34 <os_time_get>
   1bcba:	4908      	ldr	r1, [pc, #32]	; (1bcdc <os_gettimeofday+0x34>)
   1bcbc:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
   1bcc0:	462a      	mov	r2, r5
   1bcc2:	1ac0      	subs	r0, r0, r3
   1bcc4:	f7ff ff62 	bl	1bb8c <os_deltatime>
    }

    if (tz != NULL) {
   1bcc8:	b114      	cbz	r4, 1bcd0 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
   1bcca:	4b04      	ldr	r3, [pc, #16]	; (1bcdc <os_gettimeofday+0x34>)
   1bccc:	6a98      	ldr	r0, [r3, #40]	; 0x28
   1bcce:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
   1bcd0:	4630      	mov	r0, r6
   1bcd2:	f000 f82d 	bl	1bd30 <os_arch_restore_sr>

    return (0);
}
   1bcd6:	2000      	movs	r0, #0
   1bcd8:	bd70      	pop	{r4, r5, r6, pc}
   1bcda:	bf00      	nop
   1bcdc:	2000d9b8 	.word	0x2000d9b8

0001bce0 <os_time_ms_to_ticks>:
  return (tv.tv_sec * 1000000 + tv.tv_usec);
}

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
   1bce0:	b538      	push	{r3, r4, r5, lr}
   1bce2:	4604      	mov	r4, r0
   1bce4:	460d      	mov	r5, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
   1bce6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bcea:	2300      	movs	r3, #0
   1bcec:	01c0      	lsls	r0, r0, #7
   1bcee:	0e61      	lsrs	r1, r4, #25
   1bcf0:	f002 f88a 	bl	1de08 <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
   1bcf4:	2901      	cmp	r1, #1
   1bcf6:	bf08      	it	eq
   1bcf8:	2800      	cmpeq	r0, #0
   1bcfa:	d202      	bcs.n	1bd02 <os_time_ms_to_ticks+0x22>
        return OS_EINVAL;
    }

    *out_ticks = ticks;
   1bcfc:	6028      	str	r0, [r5, #0]
    return 0;
   1bcfe:	2000      	movs	r0, #0
}
   1bd00:	bd38      	pop	{r3, r4, r5, pc}
        return OS_EINVAL;
   1bd02:	2002      	movs	r0, #2
   1bd04:	e7fc      	b.n	1bd00 <os_time_ms_to_ticks+0x20>

0001bd06 <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
   1bd06:	b508      	push	{r3, lr}
    os_time_advance(1);
   1bd08:	2001      	movs	r0, #1
   1bd0a:	f7ff ff99 	bl	1bc40 <os_time_advance>
}
   1bd0e:	bd08      	pop	{r3, pc}

0001bd10 <os_arch_ctx_sw>:

void
os_arch_ctx_sw(struct os_task *t)
{
   1bd10:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
   1bd12:	f7ff fd19 	bl	1b748 <os_sched_ctx_sw_hook>

    /* Set PendSV interrupt pending bit to force context switch */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
   1bd16:	4b02      	ldr	r3, [pc, #8]	; (1bd20 <os_arch_ctx_sw+0x10>)
   1bd18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1bd1c:	605a      	str	r2, [r3, #4]
}
   1bd1e:	bd08      	pop	{r3, pc}
   1bd20:	e000ed00 	.word	0xe000ed00

0001bd24 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1bd24:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1bd28:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
   1bd2a:	f000 0001 	and.w	r0, r0, #1
   1bd2e:	4770      	bx	lr

0001bd30 <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
   1bd30:	b900      	cbnz	r0, 1bd34 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
   1bd32:	b662      	cpsie	i
        __enable_irq();
    }
}
   1bd34:	4770      	bx	lr

0001bd36 <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1bd36:	f3ef 8010 	mrs	r0, PRIMASK
{
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    return (isr_ctx & 1);
}
   1bd3a:	f000 0001 	and.w	r0, r0, #1
   1bd3e:	4770      	bx	lr

0001bd40 <os_arch_task_stack_init>:

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
   1bd40:	b570      	push	{r4, r5, r6, lr}
   1bd42:	4606      	mov	r6, r0
   1bd44:	460d      	mov	r5, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
   1bd46:	f1a1 0444 	sub.w	r4, r1, #68	; 0x44

    /* Zero out R1-R3, R12, LR */
    for (i = 9; i < 14; ++i) {
   1bd4a:	2309      	movs	r3, #9
   1bd4c:	e003      	b.n	1bd56 <os_arch_task_stack_init+0x16>
        s[i] = 0;
   1bd4e:	2200      	movs	r2, #0
   1bd50:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (i = 9; i < 14; ++i) {
   1bd54:	3301      	adds	r3, #1
   1bd56:	2b0d      	cmp	r3, #13
   1bd58:	ddf9      	ble.n	1bd4e <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
   1bd5a:	4620      	mov	r0, r4
   1bd5c:	f000 f8b6 	bl	1becc <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
   1bd60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1bd64:	f845 3c04 	str.w	r3, [r5, #-4]
    sf->pc = (uint32_t)t->t_func;
   1bd68:	6973      	ldr	r3, [r6, #20]
   1bd6a:	f845 3c08 	str.w	r3, [r5, #-8]
    sf->r0 = (uint32_t)t->t_arg;
   1bd6e:	69b3      	ldr	r3, [r6, #24]
   1bd70:	f845 3c20 	str.w	r3, [r5, #-32]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
   1bd74:	f06f 0302 	mvn.w	r3, #2
   1bd78:	f845 3c24 	str.w	r3, [r5, #-36]
#endif

    return (s);
}
   1bd7c:	4620      	mov	r0, r4
   1bd7e:	bd70      	pop	{r4, r5, r6, pc}

0001bd80 <os_arch_init>:

void
os_arch_init(void)
{
   1bd80:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1bd82:	4a04      	ldr	r2, [pc, #16]	; (1bd94 <os_arch_init+0x14>)
   1bd84:	6953      	ldr	r3, [r2, #20]
   1bd86:	f043 0310 	orr.w	r3, r3, #16
   1bd8a:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
   1bd8c:	f7fe fdf4 	bl	1a978 <os_init_idle_task>
}
   1bd90:	bd08      	pop	{r3, pc}
   1bd92:	bf00      	nop
   1bd94:	e000ed00 	.word	0xe000ed00

0001bd98 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
   1bd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1bd9a:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1bd9e:	b90c      	cbnz	r4, 1bda4 <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1bda0:	2400      	movs	r4, #0
   1bda2:	e009      	b.n	1bdb8 <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
   1bda4:	2007      	movs	r0, #7
   1bda6:	e02e      	b.n	1be06 <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
   1bda8:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
   1bdac:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
   1bdb0:	26ff      	movs	r6, #255	; 0xff
   1bdb2:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1bdb6:	3401      	adds	r4, #1
   1bdb8:	2cef      	cmp	r4, #239	; 0xef
   1bdba:	d9f5      	bls.n	1bda8 <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   1bdbc:	f06f 040d 	mvn.w	r4, #13
   1bdc0:	e007      	b.n	1bdd2 <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
   1bdc2:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1bdc4:	4e12      	ldr	r6, [pc, #72]	; (1be10 <os_arch_os_init+0x78>)
   1bdc6:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1bdc8:	3510      	adds	r5, #16
   1bdca:	4f12      	ldr	r7, [pc, #72]	; (1be14 <os_arch_os_init+0x7c>)
   1bdcc:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
   1bdd0:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   1bdd2:	2c25      	cmp	r4, #37	; 0x25
   1bdd4:	ddf5      	ble.n	1bdc2 <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1bdd6:	4c0e      	ldr	r4, [pc, #56]	; (1be10 <os_arch_os_init+0x78>)
   1bdd8:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1bdda:	4e0f      	ldr	r6, [pc, #60]	; (1be18 <os_arch_os_init+0x80>)
   1bddc:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1bdde:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1bde0:	4e0e      	ldr	r6, [pc, #56]	; (1be1c <os_arch_os_init+0x84>)
   1bde2:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1bde4:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1bde6:	4e0e      	ldr	r6, [pc, #56]	; (1be20 <os_arch_os_init+0x88>)
   1bde8:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1bdea:	25e0      	movs	r5, #224	; 0xe0
   1bdec:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
   1bdf0:	2520      	movs	r5, #32
   1bdf2:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1bdf4:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
   1bdf8:	f014 0f01 	tst.w	r4, #1
   1bdfc:	d004      	beq.n	1be08 <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
   1bdfe:	f8df c024 	ldr.w	ip, [pc, #36]	; 1be24 <os_arch_os_init+0x8c>
   1be02:	df00      	svc	0
        err = OS_OK;
   1be04:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
   1be06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
   1be08:	f7ff ffba 	bl	1bd80 <os_arch_init>
        err = OS_OK;
   1be0c:	2000      	movs	r0, #0
   1be0e:	e7fa      	b.n	1be06 <os_arch_os_init+0x6e>
   1be10:	e000ed00 	.word	0xe000ed00
   1be14:	0001bf6b 	.word	0x0001bf6b
   1be18:	0001bed3 	.word	0x0001bed3
   1be1c:	0001bf19 	.word	0x0001bf19
   1be20:	0001bf5f 	.word	0x0001bf5f
   1be24:	0001bd81 	.word	0x0001bd81

0001be28 <os_arch_start>:

uint32_t
os_arch_start(void)
{
   1be28:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
   1be2a:	f7ff fd73 	bl	1b914 <os_sched_next_task>
   1be2e:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
   1be30:	f7ff fca8 	bl	1b784 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
   1be34:	6823      	ldr	r3, [r4, #0]
   1be36:	3324      	adds	r3, #36	; 0x24
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1be38:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
   1be3c:	2106      	movs	r1, #6
   1be3e:	2080      	movs	r0, #128	; 0x80
   1be40:	f000 fde8 	bl	1ca14 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
   1be44:	4b03      	ldr	r3, [pc, #12]	; (1be54 <os_arch_start+0x2c>)
   1be46:	2201      	movs	r2, #1
   1be48:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
   1be4a:	4620      	mov	r0, r4
   1be4c:	f7ff ff60 	bl	1bd10 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
   1be50:	69a0      	ldr	r0, [r4, #24]
   1be52:	bd10      	pop	{r4, pc}
   1be54:	2000de88 	.word	0x2000de88

0001be58 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
   1be58:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
   1be5a:	4814      	ldr	r0, [pc, #80]	; (1beac <os_arch_os_start+0x54>)
   1be5c:	6800      	ldr	r0, [r0, #0]
   1be5e:	3804      	subs	r0, #4
   1be60:	f000 f82a 	bl	1beb8 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1be64:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1be68:	b9d4      	cbnz	r4, 1bea0 <os_arch_os_start+0x48>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1be6a:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
   1be6e:	f004 0403 	and.w	r4, r4, #3
   1be72:	2c03      	cmp	r4, #3
   1be74:	d808      	bhi.n	1be88 <os_arch_os_start+0x30>
   1be76:	e8df f004 	tbb	[pc, r4]
   1be7a:	1515      	.short	0x1515
   1be7c:	0c02      	.short	0x0c02
        case 0x02:
            /*
             * We are running in Privileged Thread mode w/SP = PSP but we
             * are supposed to be un-privileged.
             */
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
   1be7e:	4c0c      	ldr	r4, [pc, #48]	; (1beb0 <os_arch_os_start+0x58>)
   1be80:	6824      	ldr	r4, [r4, #0]
   1be82:	f014 0f01 	tst.w	r4, #1
   1be86:	d10f      	bne.n	1bea8 <os_arch_os_start+0x50>
    SVC_Call(os_arch_start);
   1be88:	f8df c028 	ldr.w	ip, [pc, #40]	; 1beb4 <os_arch_os_start+0x5c>
   1be8c:	df00      	svc	0
   1be8e:	2000      	movs	r0, #0
            svc_os_arch_start();
        }
    }

    return err;
}
   1be90:	bd10      	pop	{r4, pc}
            if  ((os_flags & 1) == OS_RUN_PRIV) {
   1be92:	4c07      	ldr	r4, [pc, #28]	; (1beb0 <os_arch_os_start+0x58>)
   1be94:	6824      	ldr	r4, [r4, #0]
   1be96:	f014 0f01 	tst.w	r4, #1
   1be9a:	d1f5      	bne.n	1be88 <os_arch_os_start+0x30>
                err = OS_ERR_PRIV;
   1be9c:	2008      	movs	r0, #8
   1be9e:	e7f7      	b.n	1be90 <os_arch_os_start+0x38>
    err = OS_ERR_IN_ISR;
   1bea0:	2007      	movs	r0, #7
   1bea2:	e7f5      	b.n	1be90 <os_arch_os_start+0x38>
            err = OS_ERR_PRIV;
   1bea4:	2008      	movs	r0, #8
   1bea6:	e7f3      	b.n	1be90 <os_arch_os_start+0x38>
                err = OS_ERR_PRIV;
   1bea8:	2008      	movs	r0, #8
   1beaa:	e7f1      	b.n	1be90 <os_arch_os_start+0x38>
   1beac:	2000dde8 	.word	0x2000dde8
   1beb0:	2000d9e8 	.word	0x2000d9e8
   1beb4:	0001be29 	.word	0x0001be29

0001beb8 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
   1beb8:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
   1bebc:	4832      	ldr	r0, [pc, #200]	; (1bf88 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
   1bebe:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
   1bec0:	3002      	adds	r0, #2
        MSR     CONTROL,R0
   1bec2:	f380 8814 	msr	CONTROL, r0
        ISB
   1bec6:	f3bf 8f6f 	isb	sy
        BX      LR
   1beca:	4770      	bx	lr

0001becc <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
   1becc:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
   1bed0:	4770      	bx	lr

0001bed2 <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
   1bed2:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
   1bed6:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
   1bed8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
   1bedc:	b951      	cbnz	r1, 1bef4 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   1bede:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1bee2:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
   1bee4:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1bee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
   1beea:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
   1beee:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
   1bef2:	4770      	bx	lr

0001bef4 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1bef4:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
   1bef6:	4a25      	ldr	r2, [pc, #148]	; (1bf8c <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
   1bef8:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
   1befa:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
   1befc:	d809      	bhi.n	1bf12 <SVC_Done>

        LDR     R4,=SVC_Table-4
   1befe:	4c24      	ldr	r4, [pc, #144]	; (1bf90 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
   1bf00:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   1bf04:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
   1bf08:	47a0      	blx	r4

        MRS     R12,PSP
   1bf0a:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
   1bf0e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

0001bf12 <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1bf12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
   1bf16:	4770      	bx	lr

0001bf18 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   1bf18:	4b1e      	ldr	r3, [pc, #120]	; (1bf94 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
   1bf1a:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
   1bf1c:	4b1e      	ldr	r3, [pc, #120]	; (1bf98 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
   1bf1e:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
   1bf20:	4291      	cmp	r1, r2
        IT      EQ
   1bf22:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
   1bf24:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
   1bf26:	f3ef 8c09 	mrs	ip, PSP
#if MYNEWT_VAL(HARDFLOAT)
        TST     LR,#0x10                /* is it extended frame? */
   1bf2a:	f01e 0f10 	tst.w	lr, #16
        IT      EQ
   1bf2e:	bf08      	it	eq
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
   1bf30:	ed2c 8a10 	vstmdbeq	ip!, {s16-s31}
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
   1bf34:	e92c 4ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
   1bf38:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
   1bf3c:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
   1bf3e:	f8d2 c000 	ldr.w	ip, [r2]
#if MYNEWT_VAL(HARDFLOAT)
        LDMIA   R12!,{R4-R11,LR}        /* Restore New Context */
   1bf42:	e8bc 4ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        TST     LR,#0x10                /* is it extended frame? */
   1bf46:	f01e 0f10 	tst.w	lr, #16
        ITTE    EQ
   1bf4a:	bf06      	itte	eq
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
   1bf4c:	ecbc 8a10 	vldmiaeq	ip!, {s16-s31}
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
   1bf50:	f06f 0e12 	mvneq.w	lr, #18
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
   1bf54:	f06f 0e02 	mvnne.w	lr, #2
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
#endif
        MSR     PSP,R12                 /* Write PSP */
   1bf58:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
   1bf5c:	4770      	bx	lr

0001bf5e <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1bf5e:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
   1bf60:	f7ff fed1 	bl	1bd06 <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1bf64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
   1bf68:	4770      	bx	lr

0001bf6a <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
   1bf6a:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
   1bf6e:	bf0c      	ite	eq
        MRSEQ   R3,MSP
   1bf70:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
   1bf74:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
   1bf78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
   1bf7c:	4668      	mov	r0, sp
        BL      os_default_irq
   1bf7e:	f7fe fc61 	bl	1a844 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
   1bf82:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
   1bf86:	4770      	bx	lr
        LDR     R0,=os_flags
   1bf88:	2000d9e8 	.word	0x2000d9e8
        LDR     R2,=SVC_Count
   1bf8c:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
   1bf90:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   1bf94:	20000114 	.word	0x20000114
        LDR     R3,=g_current_task      /* Get current task */
   1bf98:	2000deb0 	.word	0x2000deb0

0001bf9c <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
   1bf9c:	b470      	push	{r4, r5, r6}
   1bf9e:	f04f 0500 	mov.w	r5, #0
   1bfa2:	f022 0603 	bic.w	r6, r2, #3
   1bfa6:	e005      	b.n	1bfb4 <test1>

0001bfa8 <loop1>:
   1bfa8:	5943      	ldr	r3, [r0, r5]
   1bfaa:	594c      	ldr	r4, [r1, r5]
   1bfac:	42a3      	cmp	r3, r4
   1bfae:	d104      	bne.n	1bfba <res1>
   1bfb0:	f105 0504 	add.w	r5, r5, #4

0001bfb4 <test1>:
   1bfb4:	42b5      	cmp	r5, r6
   1bfb6:	d1f7      	bne.n	1bfa8 <loop1>
   1bfb8:	e00d      	b.n	1bfd6 <test2>

0001bfba <res1>:
   1bfba:	ba1b      	rev	r3, r3
   1bfbc:	ba24      	rev	r4, r4
   1bfbe:	1b1b      	subs	r3, r3, r4
   1bfc0:	bf8c      	ite	hi
   1bfc2:	2301      	movhi	r3, #1
   1bfc4:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
   1bfc8:	e009      	b.n	1bfde <done>

0001bfca <loop2>:
   1bfca:	5d43      	ldrb	r3, [r0, r5]
   1bfcc:	5d4c      	ldrb	r4, [r1, r5]
   1bfce:	1b1b      	subs	r3, r3, r4
   1bfd0:	d105      	bne.n	1bfde <done>
   1bfd2:	f105 0501 	add.w	r5, r5, #1

0001bfd6 <test2>:
   1bfd6:	4295      	cmp	r5, r2
   1bfd8:	d1f7      	bne.n	1bfca <loop2>
   1bfda:	f04f 0300 	mov.w	r3, #0

0001bfde <done>:
   1bfde:	4618      	mov	r0, r3
   1bfe0:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
   1bfe2:	4770      	bx	lr

0001bfe4 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   1bfe4:	e001      	b.n	1bfea <test1>

0001bfe6 <loop1>:
   1bfe6:	588b      	ldr	r3, [r1, r2]
   1bfe8:	5083      	str	r3, [r0, r2]

0001bfea <test1>:
   1bfea:	3a04      	subs	r2, #4
   1bfec:	d5fb      	bpl.n	1bfe6 <loop1>
   1bfee:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   1bff2:	e001      	b.n	1bff8 <test2>

0001bff4 <loop2>:
   1bff4:	5c8b      	ldrb	r3, [r1, r2]
   1bff6:	5483      	strb	r3, [r0, r2]

0001bff8 <test2>:
   1bff8:	3a01      	subs	r2, #1
   1bffa:	d5fb      	bpl.n	1bff4 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   1bffc:	4770      	bx	lr

0001bffe <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   1bffe:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   1c000:	4605      	mov	r5, r0
   1c002:	b2c9      	uxtb	r1, r1
   1c004:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1c008:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1c00c:	18ab      	adds	r3, r5, r2
   1c00e:	2403      	movs	r4, #3
   1c010:	4023      	ands	r3, r4
   1c012:	1ad3      	subs	r3, r2, r3
   1c014:	d40b      	bmi.n	1c02e <memset+0x30>
   1c016:	e001      	b.n	1c01c <memset+0x1e>
   1c018:	3a01      	subs	r2, #1
   1c01a:	54a9      	strb	r1, [r5, r2]
   1c01c:	429a      	cmp	r2, r3
   1c01e:	d1fb      	bne.n	1c018 <memset+0x1a>
   1c020:	e000      	b.n	1c024 <memset+0x26>
   1c022:	50a9      	str	r1, [r5, r2]
   1c024:	3a04      	subs	r2, #4
   1c026:	d5fc      	bpl.n	1c022 <memset+0x24>
   1c028:	3204      	adds	r2, #4
   1c02a:	e000      	b.n	1c02e <memset+0x30>
   1c02c:	54a9      	strb	r1, [r5, r2]
   1c02e:	3a01      	subs	r2, #1
   1c030:	d5fc      	bpl.n	1c02c <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
   1c032:	bc30      	pop	{r4, r5}
   1c034:	4770      	bx	lr

0001c036 <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
   1c036:	b430      	push	{r4, r5}
   1c038:	4602      	mov	r2, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
   1c03a:	1c55      	adds	r5, r2, #1
   1c03c:	7813      	ldrb	r3, [r2, #0]
   1c03e:	1c4c      	adds	r4, r1, #1
   1c040:	7808      	ldrb	r0, [r1, #0]
		if (d || !ch)
   1c042:	1a18      	subs	r0, r3, r0
   1c044:	d103      	bne.n	1c04e <strcmp+0x18>
		d = (int)(ch = *c1++) - (int)*c2++;
   1c046:	462a      	mov	r2, r5
   1c048:	4621      	mov	r1, r4
		if (d || !ch)
   1c04a:	2b00      	cmp	r3, #0
   1c04c:	d1f5      	bne.n	1c03a <strcmp+0x4>
			break;
	}

	return d;
}
   1c04e:	bc30      	pop	{r4, r5}
   1c050:	4770      	bx	lr

0001c052 <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
   1c052:	4603      	mov	r3, r0
	while (*ss)
   1c054:	e000      	b.n	1c058 <strlen+0x6>
		ss++;
   1c056:	3301      	adds	r3, #1
	while (*ss)
   1c058:	781a      	ldrb	r2, [r3, #0]
   1c05a:	2a00      	cmp	r2, #0
   1c05c:	d1fb      	bne.n	1c056 <strlen+0x4>
	return ss - s;
}
   1c05e:	1a18      	subs	r0, r3, r0
   1c060:	4770      	bx	lr

0001c062 <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
   1c062:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c066:	b082      	sub	sp, #8
   1c068:	e9cd 0100 	strd	r0, r1, [sp]
   1c06c:	4691      	mov	r9, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
   1c06e:	f8d2 8004 	ldr.w	r8, [r2, #4]
    unsigned long long int d = 1;
   1c072:	2401      	movs	r4, #1
   1c074:	2500      	movs	r5, #0
    while (num / d >= p->base)
   1c076:	e004      	b.n	1c082 <ui2a+0x20>
        d *= p->base;
   1c078:	fb06 f305 	mul.w	r3, r6, r5
   1c07c:	fba4 4506 	umull	r4, r5, r4, r6
   1c080:	441d      	add	r5, r3
    while (num / d >= p->base)
   1c082:	4622      	mov	r2, r4
   1c084:	462b      	mov	r3, r5
   1c086:	e9dd 0100 	ldrd	r0, r1, [sp]
   1c08a:	f001 febd 	bl	1de08 <__aeabi_uldivmod>
   1c08e:	f899 6003 	ldrb.w	r6, [r9, #3]
   1c092:	2700      	movs	r7, #0
   1c094:	42b9      	cmp	r1, r7
   1c096:	bf08      	it	eq
   1c098:	42b0      	cmpeq	r0, r6
   1c09a:	d2ed      	bcs.n	1c078 <ui2a+0x16>
    int n = 0;
   1c09c:	f04f 0a00 	mov.w	sl, #0
   1c0a0:	e007      	b.n	1c0b2 <ui2a+0x50>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1c0a2:	2330      	movs	r3, #48	; 0x30
   1c0a4:	441e      	add	r6, r3
   1c0a6:	f888 6000 	strb.w	r6, [r8]
            ++n;
   1c0aa:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1c0ae:	f108 0801 	add.w	r8, r8, #1
    while (d != 0) {
   1c0b2:	ea54 0305 	orrs.w	r3, r4, r5
   1c0b6:	d02e      	beq.n	1c116 <ui2a+0xb4>
        unsigned long long  dgt = num / d;
   1c0b8:	4622      	mov	r2, r4
   1c0ba:	462b      	mov	r3, r5
   1c0bc:	e9dd 0100 	ldrd	r0, r1, [sp]
   1c0c0:	f001 fea2 	bl	1de08 <__aeabi_uldivmod>
   1c0c4:	4606      	mov	r6, r0
   1c0c6:	460f      	mov	r7, r1
        num %= d;
   1c0c8:	4622      	mov	r2, r4
   1c0ca:	462b      	mov	r3, r5
   1c0cc:	e9dd 0100 	ldrd	r0, r1, [sp]
   1c0d0:	f001 fe9a 	bl	1de08 <__aeabi_uldivmod>
   1c0d4:	e9cd 2300 	strd	r2, r3, [sp]
        d /= p->base;
   1c0d8:	f899 2003 	ldrb.w	r2, [r9, #3]
   1c0dc:	2300      	movs	r3, #0
   1c0de:	4620      	mov	r0, r4
   1c0e0:	4629      	mov	r1, r5
   1c0e2:	f001 fe91 	bl	1de08 <__aeabi_uldivmod>
   1c0e6:	4604      	mov	r4, r0
   1c0e8:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
   1c0ea:	f1ba 0f00 	cmp.w	sl, #0
   1c0ee:	d105      	bne.n	1c0fc <ui2a+0x9a>
   1c0f0:	ea56 0307 	orrs.w	r3, r6, r7
   1c0f4:	d102      	bne.n	1c0fc <ui2a+0x9a>
   1c0f6:	ea54 0305 	orrs.w	r3, r4, r5
   1c0fa:	d1da      	bne.n	1c0b2 <ui2a+0x50>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1c0fc:	2f00      	cmp	r7, #0
   1c0fe:	bf08      	it	eq
   1c100:	2e0a      	cmpeq	r6, #10
   1c102:	d3ce      	bcc.n	1c0a2 <ui2a+0x40>
   1c104:	f899 3002 	ldrb.w	r3, [r9, #2]
   1c108:	f013 0f04 	tst.w	r3, #4
   1c10c:	d001      	beq.n	1c112 <ui2a+0xb0>
   1c10e:	2337      	movs	r3, #55	; 0x37
   1c110:	e7c8      	b.n	1c0a4 <ui2a+0x42>
   1c112:	2357      	movs	r3, #87	; 0x57
   1c114:	e7c6      	b.n	1c0a4 <ui2a+0x42>
        }
    }
    *bf = 0;
   1c116:	2300      	movs	r3, #0
   1c118:	f888 3000 	strb.w	r3, [r8]
}
   1c11c:	b002      	add	sp, #8
   1c11e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001c122 <i2a>:

static void i2a(long long int num, struct param *p)
{
   1c122:	b508      	push	{r3, lr}
    if (num < 0) {
   1c124:	2800      	cmp	r0, #0
   1c126:	f171 0300 	sbcs.w	r3, r1, #0
   1c12a:	db02      	blt.n	1c132 <i2a+0x10>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
   1c12c:	f7ff ff99 	bl	1c062 <ui2a>
}
   1c130:	bd08      	pop	{r3, pc}
        num = -num;
   1c132:	4240      	negs	r0, r0
   1c134:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
   1c138:	7893      	ldrb	r3, [r2, #2]
   1c13a:	f043 0301 	orr.w	r3, r3, #1
   1c13e:	7093      	strb	r3, [r2, #2]
   1c140:	e7f4      	b.n	1c12c <i2a+0xa>

0001c142 <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
   1c142:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1c146:	b2db      	uxtb	r3, r3
   1c148:	2b09      	cmp	r3, #9
   1c14a:	d90b      	bls.n	1c164 <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
   1c14c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1c150:	b2db      	uxtb	r3, r3
   1c152:	2b05      	cmp	r3, #5
   1c154:	d908      	bls.n	1c168 <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
   1c156:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1c15a:	b2db      	uxtb	r3, r3
   1c15c:	2b05      	cmp	r3, #5
   1c15e:	d805      	bhi.n	1c16c <a2d+0x2a>
        return ch - 'A' + 10;
   1c160:	3837      	subs	r0, #55	; 0x37
   1c162:	4770      	bx	lr
        return ch - '0';
   1c164:	3830      	subs	r0, #48	; 0x30
   1c166:	4770      	bx	lr
        return ch - 'a' + 10;
   1c168:	3857      	subs	r0, #87	; 0x57
   1c16a:	4770      	bx	lr
    else
        return -1;
   1c16c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1c170:	4770      	bx	lr

0001c172 <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
   1c172:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c176:	4605      	mov	r5, r0
   1c178:	4688      	mov	r8, r1
   1c17a:	4617      	mov	r7, r2
   1c17c:	4699      	mov	r9, r3
    const char *p = *src;
   1c17e:	680c      	ldr	r4, [r1, #0]
    int num = 0;
   1c180:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
   1c182:	4628      	mov	r0, r5
   1c184:	f7ff ffdd 	bl	1c142 <a2d>
   1c188:	2800      	cmp	r0, #0
   1c18a:	db06      	blt.n	1c19a <a2i+0x28>
        if (digit > base)
   1c18c:	42b8      	cmp	r0, r7
   1c18e:	dc04      	bgt.n	1c19a <a2i+0x28>
            break;
        num = num * base + digit;
   1c190:	fb07 0606 	mla	r6, r7, r6, r0
        ch = *p++;
   1c194:	7825      	ldrb	r5, [r4, #0]
   1c196:	3401      	adds	r4, #1
   1c198:	e7f3      	b.n	1c182 <a2i+0x10>
    }
    *src = p;
   1c19a:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
   1c19e:	f889 6000 	strb.w	r6, [r9]
    return ch;
}
   1c1a2:	4628      	mov	r0, r5
   1c1a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001c1a8 <putf>:

static int putf(FILE *putp, char c)
{
   1c1a8:	b500      	push	{lr}
   1c1aa:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
   1c1ac:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
   1c1b0:	6803      	ldr	r3, [r0, #0]
   1c1b2:	681b      	ldr	r3, [r3, #0]
   1c1b4:	b14b      	cbz	r3, 1c1ca <putf+0x22>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   1c1b6:	2201      	movs	r2, #1
   1c1b8:	f10d 0107 	add.w	r1, sp, #7
   1c1bc:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
   1c1be:	2801      	cmp	r0, #1
   1c1c0:	d005      	beq.n	1c1ce <putf+0x26>
    if (fputc(c, putp) == EOF)
        return 0;
   1c1c2:	2000      	movs	r0, #0
    else
        return 1;
}
   1c1c4:	b003      	add	sp, #12
   1c1c6:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
   1c1ca:	2000      	movs	r0, #0
   1c1cc:	e7fa      	b.n	1c1c4 <putf+0x1c>
        return 1;
   1c1ce:	2001      	movs	r0, #1
   1c1d0:	e7f8      	b.n	1c1c4 <putf+0x1c>
	...

0001c1d4 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
   1c1d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c1d8:	4606      	mov	r6, r0
   1c1da:	460f      	mov	r7, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
   1c1dc:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
   1c1de:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
   1c1e0:	e001      	b.n	1c1e6 <putchw+0x12>
        n--;
   1c1e2:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
   1c1e4:	4613      	mov	r3, r2
   1c1e6:	1c5a      	adds	r2, r3, #1
   1c1e8:	781b      	ldrb	r3, [r3, #0]
   1c1ea:	b10b      	cbz	r3, 1c1f0 <putchw+0x1c>
   1c1ec:	2c00      	cmp	r4, #0
   1c1ee:	dcf8      	bgt.n	1c1e2 <putchw+0xe>
    if (p->sign)
   1c1f0:	78bb      	ldrb	r3, [r7, #2]
   1c1f2:	f013 0f01 	tst.w	r3, #1
   1c1f6:	d000      	beq.n	1c1fa <putchw+0x26>
        n--;
   1c1f8:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
   1c1fa:	887b      	ldrh	r3, [r7, #2]
   1c1fc:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1c200:	b29b      	uxth	r3, r3
   1c202:	f241 0202 	movw	r2, #4098	; 0x1002
   1c206:	4293      	cmp	r3, r2
   1c208:	d01c      	beq.n	1c244 <putchw+0x70>
        n -= 2;
    else if (p->alt && p->base == 8)
   1c20a:	f640 0202 	movw	r2, #2050	; 0x802
   1c20e:	4293      	cmp	r3, r2
   1c210:	d01a      	beq.n	1c248 <putchw+0x74>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
   1c212:	683b      	ldr	r3, [r7, #0]
   1c214:	4d35      	ldr	r5, [pc, #212]	; (1c2ec <putchw+0x118>)
   1c216:	401d      	ands	r5, r3
   1c218:	b1f5      	cbz	r5, 1c258 <putchw+0x84>
    unsigned written = 0;
   1c21a:	2500      	movs	r5, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
   1c21c:	78bb      	ldrb	r3, [r7, #2]
   1c21e:	f013 0f01 	tst.w	r3, #1
   1c222:	d11f      	bne.n	1c264 <putchw+0x90>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
   1c224:	887b      	ldrh	r3, [r7, #2]
   1c226:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1c22a:	b29b      	uxth	r3, r3
   1c22c:	f241 0202 	movw	r2, #4098	; 0x1002
   1c230:	4293      	cmp	r3, r2
   1c232:	d01d      	beq.n	1c270 <putchw+0x9c>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
   1c234:	f640 0202 	movw	r2, #2050	; 0x802
   1c238:	4293      	cmp	r3, r2
   1c23a:	d02a      	beq.n	1c292 <putchw+0xbe>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
   1c23c:	787b      	ldrb	r3, [r7, #1]
   1c23e:	bba3      	cbnz	r3, 1c2aa <putchw+0xd6>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
   1c240:	687b      	ldr	r3, [r7, #4]
    while ((ch = *bf++))
   1c242:	e03d      	b.n	1c2c0 <putchw+0xec>
        n -= 2;
   1c244:	3c02      	subs	r4, #2
   1c246:	e7e4      	b.n	1c212 <putchw+0x3e>
        n--;
   1c248:	3c01      	subs	r4, #1
   1c24a:	e7e2      	b.n	1c212 <putchw+0x3e>
            written += putf(putp, ' ');
   1c24c:	2120      	movs	r1, #32
   1c24e:	4630      	mov	r0, r6
   1c250:	f7ff ffaa 	bl	1c1a8 <putf>
   1c254:	4405      	add	r5, r0
        while (n-- > 0)
   1c256:	4644      	mov	r4, r8
   1c258:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   1c25c:	2c00      	cmp	r4, #0
   1c25e:	dcf5      	bgt.n	1c24c <putchw+0x78>
   1c260:	4644      	mov	r4, r8
   1c262:	e7db      	b.n	1c21c <putchw+0x48>
        written += putf(putp, '-');
   1c264:	212d      	movs	r1, #45	; 0x2d
   1c266:	4630      	mov	r0, r6
   1c268:	f7ff ff9e 	bl	1c1a8 <putf>
   1c26c:	4405      	add	r5, r0
   1c26e:	e7d9      	b.n	1c224 <putchw+0x50>
        written += putf(putp, '0');
   1c270:	2130      	movs	r1, #48	; 0x30
   1c272:	4630      	mov	r0, r6
   1c274:	f7ff ff98 	bl	1c1a8 <putf>
   1c278:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
   1c27a:	78bb      	ldrb	r3, [r7, #2]
   1c27c:	f013 0f04 	tst.w	r3, #4
   1c280:	d005      	beq.n	1c28e <putchw+0xba>
   1c282:	2158      	movs	r1, #88	; 0x58
   1c284:	4630      	mov	r0, r6
   1c286:	f7ff ff8f 	bl	1c1a8 <putf>
   1c28a:	4405      	add	r5, r0
   1c28c:	e7d6      	b.n	1c23c <putchw+0x68>
   1c28e:	2178      	movs	r1, #120	; 0x78
   1c290:	e7f8      	b.n	1c284 <putchw+0xb0>
        written += putf(putp, '0');
   1c292:	2130      	movs	r1, #48	; 0x30
   1c294:	4630      	mov	r0, r6
   1c296:	f7ff ff87 	bl	1c1a8 <putf>
   1c29a:	4405      	add	r5, r0
   1c29c:	e7ce      	b.n	1c23c <putchw+0x68>
            written += putf(putp, '0');
   1c29e:	2130      	movs	r1, #48	; 0x30
   1c2a0:	4630      	mov	r0, r6
   1c2a2:	f7ff ff81 	bl	1c1a8 <putf>
   1c2a6:	4405      	add	r5, r0
        while (n-- > 0)
   1c2a8:	4644      	mov	r4, r8
   1c2aa:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   1c2ae:	2c00      	cmp	r4, #0
   1c2b0:	dcf5      	bgt.n	1c29e <putchw+0xca>
   1c2b2:	4644      	mov	r4, r8
   1c2b4:	e7c4      	b.n	1c240 <putchw+0x6c>
        written += putf(putp, ch);
   1c2b6:	4630      	mov	r0, r6
   1c2b8:	f7ff ff76 	bl	1c1a8 <putf>
   1c2bc:	4405      	add	r5, r0
    while ((ch = *bf++))
   1c2be:	4643      	mov	r3, r8
   1c2c0:	f103 0801 	add.w	r8, r3, #1
   1c2c4:	7819      	ldrb	r1, [r3, #0]
   1c2c6:	2900      	cmp	r1, #0
   1c2c8:	d1f5      	bne.n	1c2b6 <putchw+0xe2>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
   1c2ca:	78bb      	ldrb	r3, [r7, #2]
   1c2cc:	f013 0f08 	tst.w	r3, #8
   1c2d0:	d106      	bne.n	1c2e0 <putchw+0x10c>
   1c2d2:	e008      	b.n	1c2e6 <putchw+0x112>
        while (n-- > 0)
            written += putf(putp, ' ');
   1c2d4:	2120      	movs	r1, #32
   1c2d6:	4630      	mov	r0, r6
   1c2d8:	f7ff ff66 	bl	1c1a8 <putf>
   1c2dc:	4405      	add	r5, r0
        while (n-- > 0)
   1c2de:	463c      	mov	r4, r7
   1c2e0:	1e67      	subs	r7, r4, #1
   1c2e2:	2c00      	cmp	r4, #0
   1c2e4:	dcf6      	bgt.n	1c2d4 <putchw+0x100>
    }
    
    return written;
}
   1c2e6:	4628      	mov	r0, r5
   1c2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c2ec:	0008ff00 	.word	0x0008ff00

0001c2f0 <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
   1c2f0:	b160      	cbz	r0, 1c30c <intarg+0x1c>
   1c2f2:	2801      	cmp	r0, #1
   1c2f4:	d017      	beq.n	1c326 <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
   1c2f6:	bb19      	cbnz	r1, 1c340 <intarg+0x50>
            val = va_arg(*va, long long);
        } else {
            val = va_arg(*va, unsigned long long);
   1c2f8:	6813      	ldr	r3, [r2, #0]
   1c2fa:	3307      	adds	r3, #7
   1c2fc:	f023 0307 	bic.w	r3, r3, #7
   1c300:	f103 0108 	add.w	r1, r3, #8
   1c304:	6011      	str	r1, [r2, #0]
   1c306:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
   1c30a:	4770      	bx	lr
        if (sign) {
   1c30c:	b129      	cbz	r1, 1c31a <intarg+0x2a>
            val = va_arg(*va, int);
   1c30e:	6813      	ldr	r3, [r2, #0]
   1c310:	1d19      	adds	r1, r3, #4
   1c312:	6011      	str	r1, [r2, #0]
   1c314:	6818      	ldr	r0, [r3, #0]
   1c316:	17c1      	asrs	r1, r0, #31
   1c318:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
   1c31a:	6813      	ldr	r3, [r2, #0]
   1c31c:	1d19      	adds	r1, r3, #4
   1c31e:	6011      	str	r1, [r2, #0]
   1c320:	6818      	ldr	r0, [r3, #0]
   1c322:	2100      	movs	r1, #0
   1c324:	4770      	bx	lr
        if (sign) {
   1c326:	b129      	cbz	r1, 1c334 <intarg+0x44>
            val = va_arg(*va, long);
   1c328:	6813      	ldr	r3, [r2, #0]
   1c32a:	1d19      	adds	r1, r3, #4
   1c32c:	6011      	str	r1, [r2, #0]
   1c32e:	6818      	ldr	r0, [r3, #0]
   1c330:	17c1      	asrs	r1, r0, #31
   1c332:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
   1c334:	6813      	ldr	r3, [r2, #0]
   1c336:	1d19      	adds	r1, r3, #4
   1c338:	6011      	str	r1, [r2, #0]
   1c33a:	6818      	ldr	r0, [r3, #0]
   1c33c:	2100      	movs	r1, #0
   1c33e:	4770      	bx	lr
            val = va_arg(*va, long long);
   1c340:	6813      	ldr	r3, [r2, #0]
   1c342:	3307      	adds	r3, #7
   1c344:	f023 0307 	bic.w	r3, r3, #7
   1c348:	f103 0108 	add.w	r1, r3, #8
   1c34c:	6011      	str	r1, [r2, #0]
   1c34e:	e9d3 0100 	ldrd	r0, r1, [r3]
   1c352:	4770      	bx	lr

0001c354 <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
   1c354:	b570      	push	{r4, r5, r6, lr}
   1c356:	b08a      	sub	sp, #40	; 0x28
   1c358:	4605      	mov	r5, r0
   1c35a:	9101      	str	r1, [sp, #4]
   1c35c:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
   1c35e:	ab02      	add	r3, sp, #8
   1c360:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
   1c362:	2400      	movs	r4, #0

    while ((ch = *(fmt++))) {
   1c364:	9b01      	ldr	r3, [sp, #4]
   1c366:	1c5a      	adds	r2, r3, #1
   1c368:	9201      	str	r2, [sp, #4]
   1c36a:	7819      	ldrb	r1, [r3, #0]
   1c36c:	2900      	cmp	r1, #0
   1c36e:	f000 811c 	beq.w	1c5aa <tfp_format+0x256>
        if (ch != '%') {
   1c372:	2925      	cmp	r1, #37	; 0x25
   1c374:	d004      	beq.n	1c380 <tfp_format+0x2c>
            written += putf(putp, ch);
   1c376:	4628      	mov	r0, r5
   1c378:	f7ff ff16 	bl	1c1a8 <putf>
   1c37c:	4404      	add	r4, r0
   1c37e:	e7f1      	b.n	1c364 <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
   1c380:	2200      	movs	r2, #0
   1c382:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
   1c386:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
   1c38a:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
   1c38e:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
   1c392:	f362 0382 	bfi	r3, r2, #2, #1
   1c396:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
   1c39a:	9b01      	ldr	r3, [sp, #4]
   1c39c:	1c5a      	adds	r2, r3, #1
   1c39e:	9201      	str	r2, [sp, #4]
   1c3a0:	7818      	ldrb	r0, [r3, #0]
   1c3a2:	b128      	cbz	r0, 1c3b0 <tfp_format+0x5c>
                switch (ch) {
   1c3a4:	282d      	cmp	r0, #45	; 0x2d
   1c3a6:	d04e      	beq.n	1c446 <tfp_format+0xf2>
   1c3a8:	2830      	cmp	r0, #48	; 0x30
   1c3aa:	d03c      	beq.n	1c426 <tfp_format+0xd2>
   1c3ac:	2823      	cmp	r0, #35	; 0x23
   1c3ae:	d043      	beq.n	1c438 <tfp_format+0xe4>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
   1c3b0:	282a      	cmp	r0, #42	; 0x2a
   1c3b2:	d052      	beq.n	1c45a <tfp_format+0x106>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
   1c3b4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1c3b8:	b2db      	uxtb	r3, r3
   1c3ba:	2b09      	cmp	r3, #9
   1c3bc:	d961      	bls.n	1c482 <tfp_format+0x12e>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
   1c3be:	286c      	cmp	r0, #108	; 0x6c
   1c3c0:	d065      	beq.n	1c48e <tfp_format+0x13a>
            lng = 0;
   1c3c2:	2600      	movs	r6, #0
                    ch = *(fmt++);
                    lng = 2;
                }
            }

            if (ch == 'z') {
   1c3c4:	287a      	cmp	r0, #122	; 0x7a
   1c3c6:	d06f      	beq.n	1c4a8 <tfp_format+0x154>
                ch = *(fmt++);
            }

            switch (ch) {
   1c3c8:	2869      	cmp	r0, #105	; 0x69
   1c3ca:	f000 808e 	beq.w	1c4ea <tfp_format+0x196>
   1c3ce:	d970      	bls.n	1c4b2 <tfp_format+0x15e>
   1c3d0:	2873      	cmp	r0, #115	; 0x73
   1c3d2:	f000 80dd 	beq.w	1c590 <tfp_format+0x23c>
   1c3d6:	f200 8099 	bhi.w	1c50c <tfp_format+0x1b8>
   1c3da:	286f      	cmp	r0, #111	; 0x6f
   1c3dc:	f000 80c7 	beq.w	1c56e <tfp_format+0x21a>
   1c3e0:	2870      	cmp	r0, #112	; 0x70
   1c3e2:	d1bf      	bne.n	1c364 <tfp_format+0x10>
                p.base = 8;
                ui2a(intarg(lng, 0, &va), &p);
                written += putchw(putp, &p);
                break;
            case 'p':
                v = va_arg(va, void *);
   1c3e4:	9b00      	ldr	r3, [sp, #0]
   1c3e6:	1d1a      	adds	r2, r3, #4
   1c3e8:	9200      	str	r2, [sp, #0]
   1c3ea:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
   1c3ec:	2310      	movs	r3, #16
   1c3ee:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
   1c3f2:	aa08      	add	r2, sp, #32
   1c3f4:	2100      	movs	r1, #0
   1c3f6:	f7ff fe34 	bl	1c062 <ui2a>
                p.width = 2 * sizeof(void*);
   1c3fa:	2308      	movs	r3, #8
   1c3fc:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
   1c400:	2301      	movs	r3, #1
   1c402:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
   1c406:	2130      	movs	r1, #48	; 0x30
   1c408:	4628      	mov	r0, r5
   1c40a:	f7ff fecd 	bl	1c1a8 <putf>
   1c40e:	4404      	add	r4, r0
                written += putf(putp, 'x');
   1c410:	2178      	movs	r1, #120	; 0x78
   1c412:	4628      	mov	r0, r5
   1c414:	f7ff fec8 	bl	1c1a8 <putf>
   1c418:	4404      	add	r4, r0
                written += putchw(putp, &p);
   1c41a:	a908      	add	r1, sp, #32
   1c41c:	4628      	mov	r0, r5
   1c41e:	f7ff fed9 	bl	1c1d4 <putchw>
   1c422:	4404      	add	r4, r0
                break;
   1c424:	e79e      	b.n	1c364 <tfp_format+0x10>
                    if (!p.left) {
   1c426:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1c42a:	f013 0f08 	tst.w	r3, #8
   1c42e:	d1b4      	bne.n	1c39a <tfp_format+0x46>
                        p.lz = 1;
   1c430:	2301      	movs	r3, #1
   1c432:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1c436:	e7b0      	b.n	1c39a <tfp_format+0x46>
                    p.alt = 1;
   1c438:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1c43c:	f043 0302 	orr.w	r3, r3, #2
   1c440:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
   1c444:	e7a9      	b.n	1c39a <tfp_format+0x46>
                    p.left = 1;
   1c446:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1c44a:	f043 0308 	orr.w	r3, r3, #8
   1c44e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
   1c452:	2300      	movs	r3, #0
   1c454:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1c458:	e79f      	b.n	1c39a <tfp_format+0x46>
                i = intarg(0, 1, &va);
   1c45a:	466a      	mov	r2, sp
   1c45c:	2101      	movs	r1, #1
   1c45e:	2000      	movs	r0, #0
   1c460:	f7ff ff46 	bl	1c2f0 <intarg>
                if (i > UCHAR_MAX) {
   1c464:	28ff      	cmp	r0, #255	; 0xff
   1c466:	dd07      	ble.n	1c478 <tfp_format+0x124>
                    p.width = UCHAR_MAX;
   1c468:	23ff      	movs	r3, #255	; 0xff
   1c46a:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
   1c46e:	9b01      	ldr	r3, [sp, #4]
   1c470:	1c5a      	adds	r2, r3, #1
   1c472:	9201      	str	r2, [sp, #4]
   1c474:	7818      	ldrb	r0, [r3, #0]
   1c476:	e7a2      	b.n	1c3be <tfp_format+0x6a>
                } else if (i > 0) {
   1c478:	2800      	cmp	r0, #0
   1c47a:	ddf8      	ble.n	1c46e <tfp_format+0x11a>
                    p.width = i;
   1c47c:	f88d 0020 	strb.w	r0, [sp, #32]
   1c480:	e7f5      	b.n	1c46e <tfp_format+0x11a>
                ch = a2i(ch, &fmt, 10, &(p.width));
   1c482:	ab08      	add	r3, sp, #32
   1c484:	220a      	movs	r2, #10
   1c486:	a901      	add	r1, sp, #4
   1c488:	f7ff fe73 	bl	1c172 <a2i>
   1c48c:	e797      	b.n	1c3be <tfp_format+0x6a>
                ch = *(fmt++);
   1c48e:	9b01      	ldr	r3, [sp, #4]
   1c490:	1c5a      	adds	r2, r3, #1
   1c492:	9201      	str	r2, [sp, #4]
   1c494:	7818      	ldrb	r0, [r3, #0]
                if (ch == 'l') {
   1c496:	286c      	cmp	r0, #108	; 0x6c
   1c498:	d001      	beq.n	1c49e <tfp_format+0x14a>
                lng = 1;
   1c49a:	2601      	movs	r6, #1
   1c49c:	e792      	b.n	1c3c4 <tfp_format+0x70>
                    ch = *(fmt++);
   1c49e:	1c9a      	adds	r2, r3, #2
   1c4a0:	9201      	str	r2, [sp, #4]
   1c4a2:	7858      	ldrb	r0, [r3, #1]
                    lng = 2;
   1c4a4:	2602      	movs	r6, #2
   1c4a6:	e78d      	b.n	1c3c4 <tfp_format+0x70>
                ch = *(fmt++);
   1c4a8:	9b01      	ldr	r3, [sp, #4]
   1c4aa:	1c5a      	adds	r2, r3, #1
   1c4ac:	9201      	str	r2, [sp, #4]
   1c4ae:	7818      	ldrb	r0, [r3, #0]
   1c4b0:	e78a      	b.n	1c3c8 <tfp_format+0x74>
            switch (ch) {
   1c4b2:	2858      	cmp	r0, #88	; 0x58
   1c4b4:	d040      	beq.n	1c538 <tfp_format+0x1e4>
   1c4b6:	d80a      	bhi.n	1c4ce <tfp_format+0x17a>
   1c4b8:	2800      	cmp	r0, #0
   1c4ba:	d076      	beq.n	1c5aa <tfp_format+0x256>
   1c4bc:	2825      	cmp	r0, #37	; 0x25
   1c4be:	f47f af51 	bne.w	1c364 <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
   1c4c2:	4601      	mov	r1, r0
   1c4c4:	4628      	mov	r0, r5
   1c4c6:	f7ff fe6f 	bl	1c1a8 <putf>
   1c4ca:	4404      	add	r4, r0
                break;
   1c4cc:	e74a      	b.n	1c364 <tfp_format+0x10>
            switch (ch) {
   1c4ce:	2863      	cmp	r0, #99	; 0x63
   1c4d0:	d108      	bne.n	1c4e4 <tfp_format+0x190>
                written += putf(putp, (char)(va_arg(va, int)));
   1c4d2:	9b00      	ldr	r3, [sp, #0]
   1c4d4:	1d1a      	adds	r2, r3, #4
   1c4d6:	9200      	str	r2, [sp, #0]
   1c4d8:	7819      	ldrb	r1, [r3, #0]
   1c4da:	4628      	mov	r0, r5
   1c4dc:	f7ff fe64 	bl	1c1a8 <putf>
   1c4e0:	4404      	add	r4, r0
                break;
   1c4e2:	e73f      	b.n	1c364 <tfp_format+0x10>
            switch (ch) {
   1c4e4:	2864      	cmp	r0, #100	; 0x64
   1c4e6:	f47f af3d 	bne.w	1c364 <tfp_format+0x10>
                p.base = 10;
   1c4ea:	230a      	movs	r3, #10
   1c4ec:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
   1c4f0:	466a      	mov	r2, sp
   1c4f2:	2101      	movs	r1, #1
   1c4f4:	4630      	mov	r0, r6
   1c4f6:	f7ff fefb 	bl	1c2f0 <intarg>
   1c4fa:	aa08      	add	r2, sp, #32
   1c4fc:	f7ff fe11 	bl	1c122 <i2a>
                written += putchw(putp, &p);
   1c500:	a908      	add	r1, sp, #32
   1c502:	4628      	mov	r0, r5
   1c504:	f7ff fe66 	bl	1c1d4 <putchw>
   1c508:	4404      	add	r4, r0
                break;
   1c50a:	e72b      	b.n	1c364 <tfp_format+0x10>
            switch (ch) {
   1c50c:	2875      	cmp	r0, #117	; 0x75
   1c50e:	d110      	bne.n	1c532 <tfp_format+0x1de>
                p.base = 10;
   1c510:	230a      	movs	r3, #10
   1c512:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1c516:	466a      	mov	r2, sp
   1c518:	2100      	movs	r1, #0
   1c51a:	4630      	mov	r0, r6
   1c51c:	f7ff fee8 	bl	1c2f0 <intarg>
   1c520:	aa08      	add	r2, sp, #32
   1c522:	f7ff fd9e 	bl	1c062 <ui2a>
                written += putchw(putp, &p);
   1c526:	a908      	add	r1, sp, #32
   1c528:	4628      	mov	r0, r5
   1c52a:	f7ff fe53 	bl	1c1d4 <putchw>
   1c52e:	4404      	add	r4, r0
                break;
   1c530:	e718      	b.n	1c364 <tfp_format+0x10>
            switch (ch) {
   1c532:	2878      	cmp	r0, #120	; 0x78
   1c534:	f47f af16 	bne.w	1c364 <tfp_format+0x10>
                p.base = 16;
   1c538:	2310      	movs	r3, #16
   1c53a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
   1c53e:	2858      	cmp	r0, #88	; 0x58
   1c540:	bf14      	ite	ne
   1c542:	2300      	movne	r3, #0
   1c544:	2301      	moveq	r3, #1
   1c546:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   1c54a:	f363 0282 	bfi	r2, r3, #2, #1
   1c54e:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
   1c552:	466a      	mov	r2, sp
   1c554:	2100      	movs	r1, #0
   1c556:	4630      	mov	r0, r6
   1c558:	f7ff feca 	bl	1c2f0 <intarg>
   1c55c:	aa08      	add	r2, sp, #32
   1c55e:	f7ff fd80 	bl	1c062 <ui2a>
                written += putchw(putp, &p);
   1c562:	a908      	add	r1, sp, #32
   1c564:	4628      	mov	r0, r5
   1c566:	f7ff fe35 	bl	1c1d4 <putchw>
   1c56a:	4404      	add	r4, r0
                break;
   1c56c:	e6fa      	b.n	1c364 <tfp_format+0x10>
                p.base = 8;
   1c56e:	2308      	movs	r3, #8
   1c570:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1c574:	466a      	mov	r2, sp
   1c576:	2100      	movs	r1, #0
   1c578:	4630      	mov	r0, r6
   1c57a:	f7ff feb9 	bl	1c2f0 <intarg>
   1c57e:	aa08      	add	r2, sp, #32
   1c580:	f7ff fd6f 	bl	1c062 <ui2a>
                written += putchw(putp, &p);
   1c584:	a908      	add	r1, sp, #32
   1c586:	4628      	mov	r0, r5
   1c588:	f7ff fe24 	bl	1c1d4 <putchw>
   1c58c:	4404      	add	r4, r0
                break;
   1c58e:	e6e9      	b.n	1c364 <tfp_format+0x10>
                p.bf = va_arg(va, char *);
   1c590:	9b00      	ldr	r3, [sp, #0]
   1c592:	1d1a      	adds	r2, r3, #4
   1c594:	9200      	str	r2, [sp, #0]
   1c596:	681b      	ldr	r3, [r3, #0]
   1c598:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
   1c59a:	a908      	add	r1, sp, #32
   1c59c:	4628      	mov	r0, r5
   1c59e:	f7ff fe19 	bl	1c1d4 <putchw>
   1c5a2:	4404      	add	r4, r0
                p.bf = bf;
   1c5a4:	ab02      	add	r3, sp, #8
   1c5a6:	9309      	str	r3, [sp, #36]	; 0x24
                break;
   1c5a8:	e6dc      	b.n	1c364 <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
   1c5aa:	4620      	mov	r0, r4
   1c5ac:	b00a      	add	sp, #40	; 0x28
   1c5ae:	bd70      	pop	{r4, r5, r6, pc}

0001c5b0 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
   1c5b0:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
   1c5b2:	f7ff fecf 	bl	1c354 <tfp_format>
}
   1c5b6:	bd08      	pop	{r3, pc}

0001c5b8 <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
   1c5b8:	b40f      	push	{r0, r1, r2, r3}
   1c5ba:	b500      	push	{lr}
   1c5bc:	b083      	sub	sp, #12
   1c5be:	aa04      	add	r2, sp, #16
   1c5c0:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   1c5c4:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
   1c5c6:	4b04      	ldr	r3, [pc, #16]	; (1c5d8 <printf+0x20>)
   1c5c8:	6818      	ldr	r0, [r3, #0]
   1c5ca:	f7ff fff1 	bl	1c5b0 <vfprintf>
    va_end(va);
    return rv;
}
   1c5ce:	b003      	add	sp, #12
   1c5d0:	f85d eb04 	ldr.w	lr, [sp], #4
   1c5d4:	b004      	add	sp, #16
   1c5d6:	4770      	bx	lr
   1c5d8:	000226b4 	.word	0x000226b4

0001c5dc <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
   1c5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c5de:	b085      	sub	sp, #20
   1c5e0:	4605      	mov	r5, r0
   1c5e2:	460c      	mov	r4, r1
   1c5e4:	4616      	mov	r6, r2
   1c5e6:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
   1c5e8:	460a      	mov	r2, r1
   1c5ea:	4601      	mov	r1, r0
   1c5ec:	4668      	mov	r0, sp
   1c5ee:	f000 f835 	bl	1c65c <fmemopen_w>
    tfp_format(f, fmt, va);
   1c5f2:	463a      	mov	r2, r7
   1c5f4:	4631      	mov	r1, r6
   1c5f6:	f7ff fead 	bl	1c354 <tfp_format>
    if (size > 0) {
   1c5fa:	b12c      	cbz	r4, 1c608 <vsnprintf+0x2c>
        if (state.bytes_written < size) {
   1c5fc:	9b02      	ldr	r3, [sp, #8]
   1c5fe:	42a3      	cmp	r3, r4
   1c600:	d305      	bcc.n	1c60e <vsnprintf+0x32>
            *(state.buffer) = '\0';
        } else {
            str[size - 1] = '\0';
   1c602:	3c01      	subs	r4, #1
   1c604:	2300      	movs	r3, #0
   1c606:	552b      	strb	r3, [r5, r4]
        }
    }
    return state.bytes_written;
}
   1c608:	9802      	ldr	r0, [sp, #8]
   1c60a:	b005      	add	sp, #20
   1c60c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(state.buffer) = '\0';
   1c60e:	9b01      	ldr	r3, [sp, #4]
   1c610:	2200      	movs	r2, #0
   1c612:	701a      	strb	r2, [r3, #0]
   1c614:	e7f8      	b.n	1c608 <vsnprintf+0x2c>
	...

0001c618 <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   1c618:	b508      	push	{r3, lr}
	return vfprintf(stdout, format, ap);
   1c61a:	460a      	mov	r2, r1
   1c61c:	4601      	mov	r1, r0
   1c61e:	4b02      	ldr	r3, [pc, #8]	; (1c628 <vprintf+0x10>)
   1c620:	6818      	ldr	r0, [r3, #0]
   1c622:	f7ff ffc5 	bl	1c5b0 <vfprintf>
}
   1c626:	bd08      	pop	{r3, pc}
   1c628:	000226b4 	.word	0x000226b4

0001c62c <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
   1c62c:	b430      	push	{r4, r5}
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
   1c62e:	2500      	movs	r5, #0
    
    while (n--)
   1c630:	e000      	b.n	1c634 <memfile_write+0x8>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
   1c632:	4622      	mov	r2, r4
    while (n--)
   1c634:	1e54      	subs	r4, r2, #1
   1c636:	b16a      	cbz	r2, 1c654 <memfile_write+0x28>
        f->bytes_written++;
   1c638:	6883      	ldr	r3, [r0, #8]
   1c63a:	3301      	adds	r3, #1
   1c63c:	6083      	str	r3, [r0, #8]
        if (f->bytes_written <= f->size)
   1c63e:	68c2      	ldr	r2, [r0, #12]
   1c640:	4293      	cmp	r3, r2
   1c642:	d8f6      	bhi.n	1c632 <memfile_write+0x6>
            *f->buffer++ = *bp++;
   1c644:	6843      	ldr	r3, [r0, #4]
   1c646:	1c5a      	adds	r2, r3, #1
   1c648:	6042      	str	r2, [r0, #4]
   1c64a:	780a      	ldrb	r2, [r1, #0]
   1c64c:	701a      	strb	r2, [r3, #0]
            i++;
   1c64e:	3501      	adds	r5, #1
            *f->buffer++ = *bp++;
   1c650:	3101      	adds	r1, #1
   1c652:	e7ee      	b.n	1c632 <memfile_write+0x6>
        }
    }
    
    return i;
}
   1c654:	4628      	mov	r0, r5
   1c656:	bc30      	pop	{r4, r5}
   1c658:	4770      	bx	lr
	...

0001c65c <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
   1c65c:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
   1c65e:	4c04      	ldr	r4, [pc, #16]	; (1c670 <fmemopen_w+0x14>)
   1c660:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
   1c662:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
   1c664:	2100      	movs	r1, #0
   1c666:	6081      	str	r1, [r0, #8]
    storage->size = size;
   1c668:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
   1c66a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1c66e:	4770      	bx	lr
   1c670:	000226ac 	.word	0x000226ac

0001c674 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
   1c674:	2000      	movs	r0, #0
   1c676:	4770      	bx	lr

0001c678 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
   1c678:	b510      	push	{r4, lr}
   1c67a:	4608      	mov	r0, r1
   1c67c:	4614      	mov	r4, r2
    console_write(bp, n);
   1c67e:	4611      	mov	r1, r2
   1c680:	f7fd f9b8 	bl	199f4 <console_write>
    return n;
}
   1c684:	4620      	mov	r0, r4
   1c686:	bd10      	pop	{r4, pc}

0001c688 <rust_sysinit>:
#include <mynewt_rust/mynewt_rust.h>
#include <mynewt_rust/sensor_helper.h>
#include <mynewt_rust/json_helper.h>

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
void rust_sysinit() {
   1c688:	b508      	push	{r3, lr}
    sysinit();
   1c68a:	f7fd fa1b 	bl	19ac4 <sysinit_start>
   1c68e:	f000 f81b 	bl	1c6c8 <sysinit_app>
   1c692:	f7fd fa1d 	bl	19ad0 <sysinit_end>
}
   1c696:	bd08      	pop	{r3, pc}

0001c698 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   1c698:	b570      	push	{r4, r5, r6, lr}
   1c69a:	b082      	sub	sp, #8
   1c69c:	460c      	mov	r4, r1
   1c69e:	4616      	mov	r6, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   1c6a0:	b29d      	uxth	r5, r3
   1c6a2:	9b07      	ldr	r3, [sp, #28]
   1c6a4:	9300      	str	r3, [sp, #0]
   1c6a6:	4603      	mov	r3, r0
   1c6a8:	9a06      	ldr	r2, [sp, #24]
   1c6aa:	4629      	mov	r1, r5
   1c6ac:	4620      	mov	r0, r4
   1c6ae:	f7fe fdeb 	bl	1b288 <os_mempool_init>
    if (rc != 0) {
   1c6b2:	b108      	cbz	r0, 1c6b8 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1c6b4:	b002      	add	sp, #8
   1c6b6:	bd70      	pop	{r4, r5, r6, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   1c6b8:	462b      	mov	r3, r5
   1c6ba:	9a06      	ldr	r2, [sp, #24]
   1c6bc:	b292      	uxth	r2, r2
   1c6be:	4621      	mov	r1, r4
   1c6c0:	4630      	mov	r0, r6
   1c6c2:	f7fe fc96 	bl	1aff2 <os_mbuf_pool_init>
   1c6c6:	e7f5      	b.n	1c6b4 <mem_init_mbuf_pool+0x1c>

0001c6c8 <sysinit_app>:
void sensor_network_init(void);
void init_sensor_coap(void);

void
sysinit_app(void)
{
   1c6c8:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   1c6ca:	f7fe f9f3 	bl	1aab4 <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   1c6ce:	f001 f985 	bl	1d9dc <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (libs/semihosting_console) */
    console_pkg_init();
   1c6d2:	f7fd f9a3 	bl	19a1c <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: mfg_init (sys/mfg) */
    mfg_init();
   1c6d6:	f001 fac7 	bl	1dc68 <mfg_init>
    /* 100.1: modlog_init (sys/log/modlog) */
    modlog_init();
   1c6da:	f001 f9b7 	bl	1da4c <modlog_init>

    /*** Stage 300 */
    /* 300.0: oc_init (net/oic) */
    oc_init();
   1c6de:	f001 f8e1 	bl	1d8a4 <oc_init>

    /*** Stage 301 */
    /* 301.0: oc_register_gatt (net/oic) */
    oc_register_gatt();
   1c6e2:	f001 f8f1 	bl	1d8c8 <oc_register_gatt>
    /* 301.1: oc_register_ip4 (net/oic) */
    oc_register_ip4();
   1c6e6:	f001 f8f0 	bl	1d8ca <oc_register_ip4>
    /* 301.2: oc_register_ip6 (net/oic) */
    oc_register_ip6();
   1c6ea:	f001 f8ef 	bl	1d8cc <oc_register_ip6>
    /* 301.3: oc_register_lora (net/oic) */
    oc_register_lora();
   1c6ee:	f001 f8ee 	bl	1d8ce <oc_register_lora>
    /* 301.4: oc_register_serial (net/oic) */
    oc_register_serial();
   1c6f2:	f001 f8ed 	bl	1d8d0 <oc_register_serial>

    /*** Stage 500 */
    /* 500.0: sensor_dev_create (hw/sensor/creator) */
    sensor_dev_create();
   1c6f6:	f000 fbd1 	bl	1ce9c <sensor_dev_create>

    /*** Stage 501 */
    /* 501.0: sensor_pkg_init (hw/sensor) */
    sensor_pkg_init();
   1c6fa:	f000 fd1f 	bl	1d13c <sensor_pkg_init>

    /*** Stage 620 */
    /* 620.0: temp_stub_create (libs/temp_stub) */
    temp_stub_create();
   1c6fe:	f000 ff3d 	bl	1d57c <temp_stub_create>

    /*** Stage 640 */
    /* 640.0: sensor_network_init (libs/sensor_network) */
    sensor_network_init();
   1c702:	f000 feb3 	bl	1d46c <sensor_network_init>

    /*** Stage 660 */
    /* 660.0: init_sensor_coap (libs/sensor_coap) */
    init_sensor_coap();
   1c706:	f000 fe3d 	bl	1d384 <init_sensor_coap>
}
   1c70a:	bd08      	pop	{r3, pc}

0001c70c <hal_bsp_flash_dev>:
hal_bsp_flash_dev(uint8_t id)
{
    /*
     * Internal flash mapped to id 0.
     */
    if (id == 0) {
   1c70c:	b908      	cbnz	r0, 1c712 <hal_bsp_flash_dev+0x6>
        return &nrf52k_flash_dev;
   1c70e:	4802      	ldr	r0, [pc, #8]	; (1c718 <hal_bsp_flash_dev+0xc>)
   1c710:	4770      	bx	lr
    }

    return NULL;
   1c712:	2000      	movs	r0, #0
}
   1c714:	4770      	bx	lr
   1c716:	bf00      	nop
   1c718:	000226b8 	.word	0x000226b8

0001c71c <hal_bsp_init>:
    return cfg_pri;
}

void
hal_bsp_init(void)
{
   1c71c:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
   1c71e:	f7eb fd4f 	bl	81c0 <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
   1c722:	f000 fbb3 	bl	1ce8c <nrf52_periph_create>
}
   1c726:	bd08      	pop	{r3, pc}

0001c728 <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
   1c728:	2300      	movs	r3, #0
   1c72a:	4a07      	ldr	r2, [pc, #28]	; (1c748 <nrf52k_flash_wait_ready+0x20>)
   1c72c:	4293      	cmp	r3, r2
   1c72e:	dc06      	bgt.n	1c73e <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
   1c730:	4a06      	ldr	r2, [pc, #24]	; (1c74c <nrf52k_flash_wait_ready+0x24>)
   1c732:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   1c736:	2a01      	cmp	r2, #1
   1c738:	d004      	beq.n	1c744 <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
   1c73a:	3301      	adds	r3, #1
   1c73c:	e7f5      	b.n	1c72a <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
   1c73e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c742:	4770      	bx	lr
            return 0;
   1c744:	2000      	movs	r0, #0
}
   1c746:	4770      	bx	lr
   1c748:	0001869f 	.word	0x0001869f
   1c74c:	4001e000 	.word	0x4001e000

0001c750 <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
   1c750:	b538      	push	{r3, r4, r5, lr}
   1c752:	460d      	mov	r5, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
   1c754:	f7ff ffe8 	bl	1c728 <nrf52k_flash_wait_ready>
   1c758:	b9f0      	cbnz	r0, 1c798 <nrf52k_flash_erase_sector+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1c75a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1c75e:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
   1c760:	4b0f      	ldr	r3, [pc, #60]	; (1c7a0 <nrf52k_flash_erase_sector+0x50>)
   1c762:	2202      	movs	r2, #2
   1c764:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
   1c768:	f7ff ffde 	bl	1c728 <nrf52k_flash_wait_ready>
   1c76c:	b148      	cbz	r0, 1c782 <nrf52k_flash_erase_sector+0x32>
    int rc = -1;
   1c76e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
   1c772:	4a0b      	ldr	r2, [pc, #44]	; (1c7a0 <nrf52k_flash_erase_sector+0x50>)
   1c774:	2100      	movs	r1, #0
   1c776:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1c77a:	b904      	cbnz	r4, 1c77e <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
   1c77c:	b662      	cpsie	i
    return rc;
}
   1c77e:	4618      	mov	r0, r3
   1c780:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
   1c782:	4b07      	ldr	r3, [pc, #28]	; (1c7a0 <nrf52k_flash_erase_sector+0x50>)
   1c784:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
   1c788:	f7ff ffce 	bl	1c728 <nrf52k_flash_wait_ready>
   1c78c:	4603      	mov	r3, r0
   1c78e:	2800      	cmp	r0, #0
   1c790:	d0ef      	beq.n	1c772 <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
   1c792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c796:	e7ec      	b.n	1c772 <nrf52k_flash_erase_sector+0x22>
        return -1;
   1c798:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c79c:	e7ef      	b.n	1c77e <nrf52k_flash_erase_sector+0x2e>
   1c79e:	bf00      	nop
   1c7a0:	4001e000 	.word	0x4001e000

0001c7a4 <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
   1c7a4:	2000      	movs	r0, #0
   1c7a6:	4770      	bx	lr

0001c7a8 <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1c7a8:	297f      	cmp	r1, #127	; 0x7f
   1c7aa:	dc06      	bgt.n	1c7ba <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
   1c7ac:	0309      	lsls	r1, r1, #12
   1c7ae:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
   1c7b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1c7b4:	601a      	str	r2, [r3, #0]
}
   1c7b6:	2000      	movs	r0, #0
   1c7b8:	4770      	bx	lr
{
   1c7ba:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1c7bc:	2300      	movs	r3, #0
   1c7be:	461a      	mov	r2, r3
   1c7c0:	4619      	mov	r1, r3
   1c7c2:	4618      	mov	r0, r3
   1c7c4:	f7fe f818 	bl	1a7f8 <__assert_func>

0001c7c8 <nrf52k_flash_write>:
{
   1c7c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c7cc:	b082      	sub	sp, #8
   1c7ce:	460d      	mov	r5, r1
   1c7d0:	4616      	mov	r6, r2
   1c7d2:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
   1c7d4:	f7ff ffa8 	bl	1c728 <nrf52k_flash_wait_ready>
   1c7d8:	2800      	cmp	r0, #0
   1c7da:	d158      	bne.n	1c88e <nrf52k_flash_write+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1c7dc:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1c7e0:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
   1c7e2:	4b2c      	ldr	r3, [pc, #176]	; (1c894 <nrf52k_flash_write+0xcc>)
   1c7e4:	2201      	movs	r2, #1
   1c7e6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
   1c7ea:	f015 0803 	ands.w	r8, r5, #3
   1c7ee:	d10b      	bne.n	1c808 <nrf52k_flash_write+0x40>
    while (num_bytes >= sizeof(uint32_t)) {
   1c7f0:	2c03      	cmp	r4, #3
   1c7f2:	d925      	bls.n	1c840 <nrf52k_flash_write+0x78>
        if (nrf52k_flash_wait_ready()) {
   1c7f4:	f7ff ff98 	bl	1c728 <nrf52k_flash_wait_ready>
   1c7f8:	2800      	cmp	r0, #0
   1c7fa:	d139      	bne.n	1c870 <nrf52k_flash_write+0xa8>
        *(uint32_t *)address = *(uint32_t *)src;
   1c7fc:	f856 3b04 	ldr.w	r3, [r6], #4
   1c800:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
   1c804:	3c04      	subs	r4, #4
   1c806:	e7f3      	b.n	1c7f0 <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
   1c808:	f7ff ff8e 	bl	1c728 <nrf52k_flash_wait_ready>
   1c80c:	bb68      	cbnz	r0, 1c86a <nrf52k_flash_write+0xa2>
        val = *(uint32_t *)(address & ~0x3);
   1c80e:	f025 0a03 	bic.w	sl, r5, #3
   1c812:	f8da 3000 	ldr.w	r3, [sl]
   1c816:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
   1c818:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
   1c81c:	45a1      	cmp	r9, r4
   1c81e:	d900      	bls.n	1c822 <nrf52k_flash_write+0x5a>
            cnt = num_bytes;
   1c820:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
   1c822:	464a      	mov	r2, r9
   1c824:	4631      	mov	r1, r6
   1c826:	ab01      	add	r3, sp, #4
   1c828:	eb03 0008 	add.w	r0, r3, r8
   1c82c:	f7ff fbda 	bl	1bfe4 <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
   1c830:	9b01      	ldr	r3, [sp, #4]
   1c832:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
   1c836:	444d      	add	r5, r9
        num_bytes -= cnt;
   1c838:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
   1c83c:	444e      	add	r6, r9
   1c83e:	e7d7      	b.n	1c7f0 <nrf52k_flash_write+0x28>
    if (num_bytes) {
   1c840:	b164      	cbz	r4, 1c85c <nrf52k_flash_write+0x94>
        val = *(uint32_t *)address;
   1c842:	682b      	ldr	r3, [r5, #0]
   1c844:	a802      	add	r0, sp, #8
   1c846:	f840 3d04 	str.w	r3, [r0, #-4]!
        memcpy(&val, src, num_bytes);
   1c84a:	4622      	mov	r2, r4
   1c84c:	4631      	mov	r1, r6
   1c84e:	f7ff fbc9 	bl	1bfe4 <memcpy>
        if (nrf52k_flash_wait_ready()) {
   1c852:	f7ff ff69 	bl	1c728 <nrf52k_flash_wait_ready>
   1c856:	b9b8      	cbnz	r0, 1c888 <nrf52k_flash_write+0xc0>
        *(uint32_t *)address = val;
   1c858:	9b01      	ldr	r3, [sp, #4]
   1c85a:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
   1c85c:	f7ff ff64 	bl	1c728 <nrf52k_flash_wait_ready>
   1c860:	4603      	mov	r3, r0
   1c862:	b138      	cbz	r0, 1c874 <nrf52k_flash_write+0xac>
        rc = -1;
   1c864:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c868:	e004      	b.n	1c874 <nrf52k_flash_write+0xac>
    int rc = -1;
   1c86a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c86e:	e001      	b.n	1c874 <nrf52k_flash_write+0xac>
   1c870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
   1c874:	4a07      	ldr	r2, [pc, #28]	; (1c894 <nrf52k_flash_write+0xcc>)
   1c876:	2100      	movs	r1, #0
   1c878:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1c87c:	b907      	cbnz	r7, 1c880 <nrf52k_flash_write+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
   1c87e:	b662      	cpsie	i
}
   1c880:	4618      	mov	r0, r3
   1c882:	b002      	add	sp, #8
   1c884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
   1c888:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c88c:	e7f2      	b.n	1c874 <nrf52k_flash_write+0xac>
        return -1;
   1c88e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c892:	e7f5      	b.n	1c880 <nrf52k_flash_write+0xb8>
   1c894:	4001e000 	.word	0x4001e000

0001c898 <nrf52k_flash_read>:
{
   1c898:	b508      	push	{r3, lr}
   1c89a:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
   1c89c:	461a      	mov	r2, r3
   1c89e:	f7ff fba1 	bl	1bfe4 <memcpy>
}
   1c8a2:	2000      	movs	r0, #0
   1c8a4:	bd08      	pop	{r3, pc}
	...

0001c8a8 <nrf52_timer_handler>:
    }
}

static void
nrf52_timer_handler(void)
{
   1c8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ticks;
    os_sr_t sr;
    uint32_t counter;

    os_trace_isr_enter();
    OS_ENTER_CRITICAL(sr);
   1c8aa:	f7ff fa3b 	bl	1bd24 <os_arch_save_sr>
    return OS_TICK_TIMER->COUNTER;
   1c8ae:	4b31      	ldr	r3, [pc, #196]	; (1c974 <nrf52_timer_handler+0xcc>)
   1c8b0:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504

    /* Calculate elapsed ticks and advance OS time. */

    counter = nrf52_os_tick_counter();
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   1c8b4:	4b30      	ldr	r3, [pc, #192]	; (1c978 <nrf52_timer_handler+0xd0>)
   1c8b6:	689b      	ldr	r3, [r3, #8]
    assert(x <= 0xffffff);
   1c8b8:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
   1c8bc:	d225      	bcs.n	1c90a <nrf52_timer_handler+0x62>
   1c8be:	4606      	mov	r6, r0
    assert(y <= 0xffffff);
   1c8c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1c8c4:	d227      	bcs.n	1c916 <nrf52_timer_handler+0x6e>
    result = x - y;
   1c8c6:	1aed      	subs	r5, r5, r3
    if (result & 0x800000) {
   1c8c8:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
   1c8cc:	d129      	bne.n	1c922 <nrf52_timer_handler+0x7a>
        return (result & 0x007fffff);
   1c8ce:	f3c5 0516 	ubfx	r5, r5, #0, #23
    ticks = delta / g_hal_os_tick.ticks_per_ostick;
   1c8d2:	4f29      	ldr	r7, [pc, #164]	; (1c978 <nrf52_timer_handler+0xd0>)
   1c8d4:	683c      	ldr	r4, [r7, #0]
   1c8d6:	fb95 f5f4 	sdiv	r5, r5, r4
    os_time_advance(ticks);
   1c8da:	4628      	mov	r0, r5
   1c8dc:	f7ff f9b0 	bl	1bc40 <os_time_advance>

    /* Clear timer interrupt */
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1c8e0:	4b24      	ldr	r3, [pc, #144]	; (1c974 <nrf52_timer_handler+0xcc>)
   1c8e2:	2200      	movs	r2, #0
   1c8e4:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Update the time associated with the most recent tick */
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1c8e8:	68bb      	ldr	r3, [r7, #8]
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1c8ea:	683c      	ldr	r4, [r7, #0]
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1c8ec:	fb05 3304 	mla	r3, r5, r4, r3
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1c8f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1c8f4:	60bb      	str	r3, [r7, #8]

    /* Update the output compare to interrupt at the next tick */
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
   1c8f6:	441c      	add	r4, r3
    OS_ASSERT_CRITICAL();
   1c8f8:	f7ff fa1d 	bl	1bd36 <os_arch_in_critical>
   1c8fc:	bb28      	cbnz	r0, 1c94a <nrf52_timer_handler+0xa2>
   1c8fe:	2300      	movs	r3, #0
   1c900:	461a      	mov	r2, r3
   1c902:	4619      	mov	r1, r3
   1c904:	4618      	mov	r0, r3
   1c906:	f7fd ff77 	bl	1a7f8 <__assert_func>
    assert(x <= 0xffffff);
   1c90a:	2300      	movs	r3, #0
   1c90c:	461a      	mov	r2, r3
   1c90e:	4619      	mov	r1, r3
   1c910:	4618      	mov	r0, r3
   1c912:	f7fd ff71 	bl	1a7f8 <__assert_func>
    assert(y <= 0xffffff);
   1c916:	2300      	movs	r3, #0
   1c918:	461a      	mov	r2, r3
   1c91a:	4619      	mov	r1, r3
   1c91c:	4618      	mov	r0, r3
   1c91e:	f7fd ff6b 	bl	1a7f8 <__assert_func>
        return (result | 0xff800000);
   1c922:	ea6f 2545 	mvn.w	r5, r5, lsl #9
   1c926:	ea6f 2555 	mvn.w	r5, r5, lsr #9
   1c92a:	e7d2      	b.n	1c8d2 <nrf52_timer_handler+0x2a>
    assert(y <= 0xffffff);
   1c92c:	2300      	movs	r3, #0
   1c92e:	461a      	mov	r2, r3
   1c930:	4619      	mov	r1, r3
   1c932:	4618      	mov	r0, r3
   1c934:	f7fd ff60 	bl	1a7f8 <__assert_func>
        return (result | 0xff800000);
   1c938:	ea6f 2242 	mvn.w	r2, r2, lsl #9
   1c93c:	ea6f 2252 	mvn.w	r2, r2, lsr #9
        if (delta > 2) {
   1c940:	2a02      	cmp	r2, #2
   1c942:	dc13      	bgt.n	1c96c <nrf52_timer_handler+0xc4>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1c944:	4a0c      	ldr	r2, [pc, #48]	; (1c978 <nrf52_timer_handler+0xd0>)
   1c946:	6814      	ldr	r4, [r2, #0]
   1c948:	441c      	add	r4, r3
        ocmp &= 0xffffff;
   1c94a:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1c94e:	4a09      	ldr	r2, [pc, #36]	; (1c974 <nrf52_timer_handler+0xcc>)
   1c950:	f8c2 354c 	str.w	r3, [r2, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1c954:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
    assert(y <= 0xffffff);
   1c958:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   1c95c:	d2e6      	bcs.n	1c92c <nrf52_timer_handler+0x84>
    result = x - y;
   1c95e:	1a9a      	subs	r2, r3, r2
    if (result & 0x800000) {
   1c960:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   1c964:	d1e8      	bne.n	1c938 <nrf52_timer_handler+0x90>
        return (result & 0x007fffff);
   1c966:	f3c2 0216 	ubfx	r2, r2, #0, #23
   1c96a:	e7e9      	b.n	1c940 <nrf52_timer_handler+0x98>

    OS_EXIT_CRITICAL(sr);
   1c96c:	4630      	mov	r0, r6
   1c96e:	f7ff f9df 	bl	1bd30 <os_arch_restore_sr>
    os_trace_isr_exit();
}
   1c972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c974:	40011000 	.word	0x40011000
   1c978:	2000dec4 	.word	0x2000dec4

0001c97c <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   1c97c:	b538      	push	{r3, r4, r5, lr}
   1c97e:	4605      	mov	r5, r0
    uint32_t ocmp;

    OS_ASSERT_CRITICAL();
   1c980:	f7ff f9d9 	bl	1bd36 <os_arch_in_critical>
   1c984:	b1a0      	cbz	r0, 1c9b0 <os_tick_idle+0x34>

    if (ticks > 0) {
   1c986:	2d00      	cmp	r5, #0
   1c988:	d038      	beq.n	1c9fc <os_tick_idle+0x80>
        /*
         * Enter tickless regime during long idle durations.
         */
        if (ticks > g_hal_os_tick.max_idle_ticks) {
   1c98a:	4b20      	ldr	r3, [pc, #128]	; (1ca0c <os_tick_idle+0x90>)
   1c98c:	685b      	ldr	r3, [r3, #4]
   1c98e:	42ab      	cmp	r3, r5
   1c990:	d200      	bcs.n	1c994 <os_tick_idle+0x18>
            ticks = g_hal_os_tick.max_idle_ticks;
   1c992:	461d      	mov	r5, r3
        }
        ocmp = g_hal_os_tick.lastocmp + (ticks*g_hal_os_tick.ticks_per_ostick);
   1c994:	4b1d      	ldr	r3, [pc, #116]	; (1ca0c <os_tick_idle+0x90>)
   1c996:	689c      	ldr	r4, [r3, #8]
   1c998:	681a      	ldr	r2, [r3, #0]
   1c99a:	fb05 4402 	mla	r4, r5, r2, r4
    OS_ASSERT_CRITICAL();
   1c99e:	f7ff f9ca 	bl	1bd36 <os_arch_in_critical>
   1c9a2:	b9d0      	cbnz	r0, 1c9da <os_tick_idle+0x5e>
   1c9a4:	2300      	movs	r3, #0
   1c9a6:	461a      	mov	r2, r3
   1c9a8:	4619      	mov	r1, r3
   1c9aa:	4618      	mov	r0, r3
   1c9ac:	f7fd ff24 	bl	1a7f8 <__assert_func>
    OS_ASSERT_CRITICAL();
   1c9b0:	2300      	movs	r3, #0
   1c9b2:	461a      	mov	r2, r3
   1c9b4:	4619      	mov	r1, r3
   1c9b6:	4618      	mov	r0, r3
   1c9b8:	f7fd ff1e 	bl	1a7f8 <__assert_func>
    assert(y <= 0xffffff);
   1c9bc:	2300      	movs	r3, #0
   1c9be:	461a      	mov	r2, r3
   1c9c0:	4619      	mov	r1, r3
   1c9c2:	4618      	mov	r0, r3
   1c9c4:	f7fd ff18 	bl	1a7f8 <__assert_func>
        return (result | 0xff800000);
   1c9c8:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1c9cc:	ea6f 2353 	mvn.w	r3, r3, lsr #9
        if (delta > 2) {
   1c9d0:	2b02      	cmp	r3, #2
   1c9d2:	dc13      	bgt.n	1c9fc <os_tick_idle+0x80>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1c9d4:	4b0d      	ldr	r3, [pc, #52]	; (1ca0c <os_tick_idle+0x90>)
   1c9d6:	681c      	ldr	r4, [r3, #0]
   1c9d8:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   1c9da:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1c9de:	4b0c      	ldr	r3, [pc, #48]	; (1ca10 <os_tick_idle+0x94>)
   1c9e0:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1c9e4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   1c9e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1c9ec:	d2e6      	bcs.n	1c9bc <os_tick_idle+0x40>
    result = x - y;
   1c9ee:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   1c9f0:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   1c9f4:	d1e8      	bne.n	1c9c8 <os_tick_idle+0x4c>
        return (result & 0x007fffff);
   1c9f6:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1c9fa:	e7e9      	b.n	1c9d0 <os_tick_idle+0x54>
  __ASM volatile ("dsb 0xF":::"memory");
   1c9fc:	f3bf 8f4f 	dsb	sy
        nrf52_os_tick_set_ocmp(ocmp);
    }

    __DSB();
    __WFI();
   1ca00:	bf30      	wfi

    if (ticks > 0) {
   1ca02:	b905      	cbnz	r5, 1ca06 <os_tick_idle+0x8a>
         * Update OS time before anything else when coming out of
         * the tickless regime.
         */
        nrf52_timer_handler();
    }
}
   1ca04:	bd38      	pop	{r3, r4, r5, pc}
        nrf52_timer_handler();
   1ca06:	f7ff ff4f 	bl	1c8a8 <nrf52_timer_handler>
}
   1ca0a:	e7fb      	b.n	1ca04 <os_tick_idle+0x88>
   1ca0c:	2000dec4 	.word	0x2000dec4
   1ca10:	40011000 	.word	0x40011000

0001ca14 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   1ca14:	b570      	push	{r4, r5, r6, lr}
    uint32_t sr;

    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1ca16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1ca1a:	fbb3 f3f0 	udiv	r3, r3, r0
   1ca1e:	fb00 f303 	mul.w	r3, r0, r3
   1ca22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1ca26:	d136      	bne.n	1ca96 <os_tick_init+0x82>
   1ca28:	460c      	mov	r4, r1

    g_hal_os_tick.lastocmp = 0;
   1ca2a:	4d1e      	ldr	r5, [pc, #120]	; (1caa4 <os_tick_init+0x90>)
   1ca2c:	2600      	movs	r6, #0
   1ca2e:	60ae      	str	r6, [r5, #8]
    g_hal_os_tick.ticks_per_ostick = RTC_FREQ / os_ticks_per_sec;
   1ca30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1ca34:	fbb3 f0f0 	udiv	r0, r3, r0
   1ca38:	6028      	str	r0, [r5, #0]
    /*
     * The maximum number of OS ticks allowed to elapse during idle is
     * limited to 1/4th the number of timer ticks before the 24-bit counter
     * rolls over.
     */
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
   1ca3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1ca3e:	fbb3 f0f0 	udiv	r0, r3, r0
   1ca42:	6068      	str	r0, [r5, #4]

    /* disable interrupts */
    OS_ENTER_CRITICAL(sr);
   1ca44:	f7ff f96e 	bl	1bd24 <os_arch_save_sr>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1ca48:	0164      	lsls	r4, r4, #5
   1ca4a:	b2e4      	uxtb	r4, r4
   1ca4c:	4b16      	ldr	r3, [pc, #88]	; (1caa8 <os_tick_init+0x94>)
   1ca4e:	f883 4311 	strb.w	r4, [r3, #785]	; 0x311
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1ca52:	4a16      	ldr	r2, [pc, #88]	; (1caac <os_tick_init+0x98>)
   1ca54:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1ca56:	4916      	ldr	r1, [pc, #88]	; (1cab0 <os_tick_init+0x9c>)
   1ca58:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ca5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1ca60:	601a      	str	r2, [r3, #0]

    /*
     * Program the OS_TICK_TIMER to operate at 32KHz and trigger an output
     * compare interrupt at a rate of 'os_ticks_per_sec'.
     */
    OS_TICK_TIMER->TASKS_STOP = 1;
   1ca62:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   1ca66:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
   1ca6a:	2201      	movs	r2, #1
   1ca6c:	605a      	str	r2, [r3, #4]
    OS_TICK_TIMER->TASKS_CLEAR = 1;
   1ca6e:	609a      	str	r2, [r3, #8]

    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
   1ca70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ca74:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
    OS_TICK_TIMER->INTENCLR = 0xffffffff;
   1ca78:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    OS_TICK_TIMER->INTENSET = RTC_COMPARE_INT_MASK(OS_TICK_CMPREG);
   1ca7c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   1ca80:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1ca84:	f8c3 614c 	str.w	r6, [r3, #332]	; 0x14c
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
   1ca88:	6829      	ldr	r1, [r5, #0]
   1ca8a:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c

    OS_TICK_TIMER->TASKS_START = 1;
   1ca8e:	601a      	str	r2, [r3, #0]

    OS_EXIT_CRITICAL(sr);
   1ca90:	f7ff f94e 	bl	1bd30 <os_arch_restore_sr>
}
   1ca94:	bd70      	pop	{r4, r5, r6, pc}
    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1ca96:	2300      	movs	r3, #0
   1ca98:	461a      	mov	r2, r3
   1ca9a:	4619      	mov	r1, r3
   1ca9c:	4618      	mov	r0, r3
   1ca9e:	f7fd feab 	bl	1a7f8 <__assert_func>
   1caa2:	bf00      	nop
   1caa4:	2000dec4 	.word	0x2000dec4
   1caa8:	e000e100 	.word	0xe000e100
   1caac:	e000ed00 	.word	0xe000ed00
   1cab0:	0001c8a9 	.word	0x0001c8a9

0001cab4 <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   1cab4:	2301      	movs	r3, #1
   1cab6:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   1cab8:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
   1cabc:	4770      	bx	lr
	...

0001cac0 <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
   1cac0:	b538      	push	{r3, r4, r5, lr}
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
   1cac2:	7883      	ldrb	r3, [r0, #2]
   1cac4:	b393      	cbz	r3, 1cb2c <nrf_timer_set_ocmp+0x6c>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1cac6:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1cac8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1cacc:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
   1cad0:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
   1cad2:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
   1cad6:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1cada:	b11d      	cbz	r5, 1cae4 <nrf_timer_set_ocmp+0x24>
            temp += (1UL << 24);
   1cadc:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
   1cae0:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        }
        temp |= cntr;
   1cae4:	4323      	orrs	r3, r4
        delta_t = (int32_t)(expiry - temp);
   1cae6:	1acb      	subs	r3, r1, r3
         * The nrf documentation states that you must set the output
         * compare to 2 greater than the counter to guarantee an interrupt.
         * Since the counter can tick once while we check, we make sure
         * it is greater than 2.
         */
        if (delta_t < 3) {
   1cae8:	2b02      	cmp	r3, #2
   1caea:	dc0e      	bgt.n	1cb0a <nrf_timer_set_ocmp+0x4a>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1caec:	7842      	ldrb	r2, [r0, #1]
   1caee:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1caf0:	2b00      	cmp	r3, #0
   1caf2:	db15      	blt.n	1cb20 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1caf4:	f002 021f 	and.w	r2, r2, #31
   1caf8:	095b      	lsrs	r3, r3, #5
   1cafa:	2101      	movs	r1, #1
   1cafc:	fa01 f202 	lsl.w	r2, r1, r2
   1cb00:	3340      	adds	r3, #64	; 0x40
   1cb02:	491b      	ldr	r1, [pc, #108]	; (1cb70 <nrf_timer_set_ocmp+0xb0>)
   1cb04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   1cb08:	e00a      	b.n	1cb20 <nrf_timer_set_ocmp+0x60>
        } else  {
            if (delta_t < (1UL << 24)) {
   1cb0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1cb0e:	d208      	bcs.n	1cb22 <nrf_timer_set_ocmp+0x62>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
   1cb10:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1cb14:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1cb18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1cb1c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
   1cb20:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
   1cb22:	f504 0400 	add.w	r4, r4, #8388608	; 0x800000
   1cb26:	f8c2 4548 	str.w	r4, [r2, #1352]	; 0x548
   1cb2a:	e7f5      	b.n	1cb18 <nrf_timer_set_ocmp+0x58>
   1cb2c:	460d      	mov	r5, r1
   1cb2e:	4604      	mov	r4, r0
        hwtimer = bsptimer->tmr_reg;
   1cb30:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1cb32:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1cb36:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
   1cb3a:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1cb3e:	2200      	movs	r2, #0
   1cb40:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1cb44:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
   1cb48:	f7ff ffb4 	bl	1cab4 <nrf_read_timer_cntr>
   1cb4c:	1b40      	subs	r0, r0, r5
   1cb4e:	2800      	cmp	r0, #0
   1cb50:	dbe6      	blt.n	1cb20 <nrf_timer_set_ocmp+0x60>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1cb52:	7862      	ldrb	r2, [r4, #1]
   1cb54:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1cb56:	2b00      	cmp	r3, #0
   1cb58:	dbe2      	blt.n	1cb20 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1cb5a:	f002 021f 	and.w	r2, r2, #31
   1cb5e:	095b      	lsrs	r3, r3, #5
   1cb60:	2101      	movs	r1, #1
   1cb62:	fa01 f202 	lsl.w	r2, r1, r2
   1cb66:	3340      	adds	r3, #64	; 0x40
   1cb68:	4901      	ldr	r1, [pc, #4]	; (1cb70 <nrf_timer_set_ocmp+0xb0>)
   1cb6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1cb6e:	e7d7      	b.n	1cb20 <nrf_timer_set_ocmp+0x60>
   1cb70:	e000e100 	.word	0xe000e100

0001cb74 <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1cb74:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1cb78:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1cb7c:	4770      	bx	lr

0001cb7e <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1cb7e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1cb82:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1cb86:	4770      	bx	lr

0001cb88 <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
   1cb88:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1cb8a:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1cb8c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1cb90:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
   1cb92:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
   1cb94:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
   1cb98:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1cb9c:	b1ad      	cbz	r5, 1cbca <hal_timer_read_bsptimer+0x42>
        tcntr += (1UL << 24);
   1cb9e:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
   1cba2:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
   1cba4:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
   1cba8:	2500      	movs	r5, #0
   1cbaa:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1cbae:	7840      	ldrb	r0, [r0, #1]
   1cbb0:	b242      	sxtb	r2, r0
  if ((int32_t)(IRQn) >= 0)
   1cbb2:	42aa      	cmp	r2, r5
   1cbb4:	db09      	blt.n	1cbca <hal_timer_read_bsptimer+0x42>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1cbb6:	f000 001f 	and.w	r0, r0, #31
   1cbba:	0952      	lsrs	r2, r2, #5
   1cbbc:	2501      	movs	r5, #1
   1cbbe:	fa05 f000 	lsl.w	r0, r5, r0
   1cbc2:	3240      	adds	r2, #64	; 0x40
   1cbc4:	4d04      	ldr	r5, [pc, #16]	; (1cbd8 <hal_timer_read_bsptimer+0x50>)
   1cbc6:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    }
    tcntr |= low32;
   1cbca:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
   1cbce:	b904      	cbnz	r4, 1cbd2 <hal_timer_read_bsptimer+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
   1cbd0:	b662      	cpsie	i

    return tcntr;
}
   1cbd2:	bc30      	pop	{r4, r5}
   1cbd4:	4770      	bx	lr
   1cbd6:	bf00      	nop
   1cbd8:	e000e100 	.word	0xe000e100

0001cbdc <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
   1cbdc:	b570      	push	{r4, r5, r6, lr}
   1cbde:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1cbe0:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1cbe4:	b672      	cpsid	i
   1cbe6:	e013      	b.n	1cc10 <hal_timer_chk_queue+0x34>
             * If we are within 3 ticks of RTC, we wont be able to set compare.
             * Thus, we have to service this timer early.
             */
            delta = -3;
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1cbe8:	6928      	ldr	r0, [r5, #16]
   1cbea:	f7ff ff63 	bl	1cab4 <nrf_read_timer_cntr>
            delta = 0;
   1cbee:	2200      	movs	r2, #0
        }
        if ((int32_t)(tcntr - timer->expiry) >= delta) {
   1cbf0:	68e3      	ldr	r3, [r4, #12]
   1cbf2:	1ac0      	subs	r0, r0, r3
   1cbf4:	4290      	cmp	r0, r2
   1cbf6:	db19      	blt.n	1cc2c <hal_timer_chk_queue+0x50>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1cbf8:	6923      	ldr	r3, [r4, #16]
   1cbfa:	b1a3      	cbz	r3, 1cc26 <hal_timer_chk_queue+0x4a>
   1cbfc:	6962      	ldr	r2, [r4, #20]
   1cbfe:	615a      	str	r2, [r3, #20]
   1cc00:	6963      	ldr	r3, [r4, #20]
   1cc02:	6922      	ldr	r2, [r4, #16]
   1cc04:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   1cc06:	2300      	movs	r3, #0
   1cc08:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   1cc0a:	6863      	ldr	r3, [r4, #4]
   1cc0c:	68a0      	ldr	r0, [r4, #8]
   1cc0e:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
   1cc10:	696c      	ldr	r4, [r5, #20]
   1cc12:	b15c      	cbz	r4, 1cc2c <hal_timer_chk_queue+0x50>
        if (bsptimer->tmr_rtc) {
   1cc14:	78ab      	ldrb	r3, [r5, #2]
   1cc16:	2b00      	cmp	r3, #0
   1cc18:	d0e6      	beq.n	1cbe8 <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
   1cc1a:	4628      	mov	r0, r5
   1cc1c:	f7ff ffb4 	bl	1cb88 <hal_timer_read_bsptimer>
            delta = -3;
   1cc20:	f06f 0202 	mvn.w	r2, #2
   1cc24:	e7e4      	b.n	1cbf0 <hal_timer_chk_queue+0x14>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1cc26:	6963      	ldr	r3, [r4, #20]
   1cc28:	61ab      	str	r3, [r5, #24]
   1cc2a:	e7e9      	b.n	1cc00 <hal_timer_chk_queue+0x24>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
   1cc2c:	696b      	ldr	r3, [r5, #20]
    if (timer) {
   1cc2e:	b133      	cbz	r3, 1cc3e <hal_timer_chk_queue+0x62>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   1cc30:	68d9      	ldr	r1, [r3, #12]
   1cc32:	4628      	mov	r0, r5
   1cc34:	f7ff ff44 	bl	1cac0 <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   1cc38:	b906      	cbnz	r6, 1cc3c <hal_timer_chk_queue+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   1cc3a:	b662      	cpsie	i
}
   1cc3c:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
   1cc3e:	78ab      	ldrb	r3, [r5, #2]
   1cc40:	b11b      	cbz	r3, 1cc4a <hal_timer_chk_queue+0x6e>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   1cc42:	6928      	ldr	r0, [r5, #16]
   1cc44:	f7ff ff9b 	bl	1cb7e <nrf_rtc_disable_ocmp>
   1cc48:	e7f6      	b.n	1cc38 <hal_timer_chk_queue+0x5c>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   1cc4a:	6928      	ldr	r0, [r5, #16]
   1cc4c:	f7ff ff92 	bl	1cb74 <nrf_timer_disable_ocmp>
   1cc50:	e7f2      	b.n	1cc38 <hal_timer_chk_queue+0x5c>

0001cc52 <hal_timer_irq_handler>:
#if (MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2) || \
     MYNEWT_VAL(TIMER_3) || MYNEWT_VAL(TIMER_4))

static void
hal_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
   1cc52:	b510      	push	{r4, lr}
    NRF_TIMER_Type *hwtimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    hwtimer = bsptimer->tmr_reg;
   1cc54:	6904      	ldr	r4, [r0, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1cc56:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    if (compare) {
   1cc5a:	b113      	cbz	r3, 1cc62 <hal_timer_irq_handler+0x10>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1cc5c:	2300      	movs	r3, #0
   1cc5e:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    }

    /* XXX: make these stats? */
    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
   1cc62:	6883      	ldr	r3, [r0, #8]
   1cc64:	3301      	adds	r3, #1
   1cc66:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
   1cc68:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
   1cc6c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   1cc70:	d100      	bne.n	1cc74 <hal_timer_irq_handler+0x22>
        /* XXX: Recommended by nordic to make sure interrupts are cleared */
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    }

    os_trace_isr_exit();
}
   1cc72:	bd10      	pop	{r4, pc}
        hal_timer_chk_queue(bsptimer);
   1cc74:	f7ff ffb2 	bl	1cbdc <hal_timer_chk_queue>
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1cc78:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
}
   1cc7c:	e7f9      	b.n	1cc72 <hal_timer_irq_handler+0x20>
	...

0001cc80 <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
   1cc80:	b508      	push	{r3, lr}
    hal_timer_irq_handler(&nrf52_hal_timer0);
   1cc82:	4802      	ldr	r0, [pc, #8]	; (1cc8c <nrf52_timer0_irq_handler+0xc>)
   1cc84:	f7ff ffe5 	bl	1cc52 <hal_timer_irq_handler>
}
   1cc88:	bd08      	pop	{r3, pc}
   1cc8a:	bf00      	nop
   1cc8c:	2000ded0 	.word	0x2000ded0

0001cc90 <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1cc90:	2805      	cmp	r0, #5
   1cc92:	dc1c      	bgt.n	1ccce <hal_timer_init+0x3e>
   1cc94:	4b12      	ldr	r3, [pc, #72]	; (1cce0 <hal_timer_init+0x50>)
   1cc96:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1cc9a:	b1d3      	cbz	r3, 1ccd2 <hal_timer_init+0x42>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
   1cc9c:	781a      	ldrb	r2, [r3, #0]
   1cc9e:	b9d2      	cbnz	r2, 1ccd6 <hal_timer_init+0x46>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
   1cca0:	b9d8      	cbnz	r0, 1ccda <hal_timer_init+0x4a>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
   1cca2:	4a10      	ldr	r2, [pc, #64]	; (1cce4 <hal_timer_init+0x54>)
   1cca4:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
   1cca6:	2208      	movs	r2, #8
   1cca8:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ccaa:	4b0f      	ldr	r3, [pc, #60]	; (1cce8 <hal_timer_init+0x58>)
   1ccac:	f44f 7280 	mov.w	r2, #256	; 0x100
   1ccb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   1ccb4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1ccb8:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1ccbc:	22e0      	movs	r2, #224	; 0xe0
   1ccbe:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1ccc2:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   1ccc6:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1ccc8:	4a08      	ldr	r2, [pc, #32]	; (1ccec <hal_timer_init+0x5c>)
   1ccca:	661a      	str	r2, [r3, #96]	; 0x60
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
   1cccc:	4770      	bx	lr

err:
    return rc;
   1ccce:	2016      	movs	r0, #22
   1ccd0:	4770      	bx	lr
   1ccd2:	2016      	movs	r0, #22
   1ccd4:	4770      	bx	lr
   1ccd6:	2016      	movs	r0, #22
   1ccd8:	4770      	bx	lr
   1ccda:	2016      	movs	r0, #22
}
   1ccdc:	4770      	bx	lr
   1ccde:	bf00      	nop
   1cce0:	000226ec 	.word	0x000226ec
   1cce4:	40008000 	.word	0x40008000
   1cce8:	e000e100 	.word	0xe000e100
   1ccec:	0001cc81 	.word	0x0001cc81

0001ccf0 <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1ccf0:	2805      	cmp	r0, #5
   1ccf2:	dc65      	bgt.n	1cdc0 <hal_timer_config+0xd0>
   1ccf4:	4b39      	ldr	r3, [pc, #228]	; (1cddc <hal_timer_config+0xec>)
   1ccf6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1ccfa:	2800      	cmp	r0, #0
   1ccfc:	d062      	beq.n	1cdc4 <hal_timer_config+0xd4>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
   1ccfe:	4b38      	ldr	r3, [pc, #224]	; (1cde0 <hal_timer_config+0xf0>)
   1cd00:	fbb3 f1f1 	udiv	r1, r3, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1cd04:	7803      	ldrb	r3, [r0, #0]
   1cd06:	2b00      	cmp	r3, #0
   1cd08:	d15e      	bne.n	1cdc8 <hal_timer_config+0xd8>
   1cd0a:	2900      	cmp	r1, #0
   1cd0c:	d05e      	beq.n	1cdcc <hal_timer_config+0xdc>
   1cd0e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1cd12:	d85d      	bhi.n	1cdd0 <hal_timer_config+0xe0>
        (bsptimer->tmr_reg == NULL)) {
   1cd14:	6902      	ldr	r2, [r0, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1cd16:	2a00      	cmp	r2, #0
   1cd18:	d05c      	beq.n	1cdd4 <hal_timer_config+0xe4>
{
   1cd1a:	b430      	push	{r4, r5}
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
   1cd1c:	2901      	cmp	r1, #1
   1cd1e:	d013      	beq.n	1cd48 <hal_timer_config+0x58>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1cd20:	2301      	movs	r3, #1
   1cd22:	2b09      	cmp	r3, #9
   1cd24:	d810      	bhi.n	1cd48 <hal_timer_config+0x58>
            if (div <= (1 << prescaler)) {
   1cd26:	2201      	movs	r2, #1
   1cd28:	409a      	lsls	r2, r3
   1cd2a:	428a      	cmp	r2, r1
   1cd2c:	d202      	bcs.n	1cd34 <hal_timer_config+0x44>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1cd2e:	3301      	adds	r3, #1
   1cd30:	b2db      	uxtb	r3, r3
   1cd32:	e7f6      	b.n	1cd22 <hal_timer_config+0x32>
                min_delta = div - (1 << (prescaler - 1));
   1cd34:	1e5c      	subs	r4, r3, #1
   1cd36:	2501      	movs	r5, #1
   1cd38:	fa05 f404 	lsl.w	r4, r5, r4
   1cd3c:	1b0c      	subs	r4, r1, r4
                max_delta = (1 << prescaler) - div;
   1cd3e:	1a51      	subs	r1, r2, r1
                if (min_delta < max_delta) {
   1cd40:	428c      	cmp	r4, r1
   1cd42:	d201      	bcs.n	1cd48 <hal_timer_config+0x58>
                    prescaler -= 1;
   1cd44:	3b01      	subs	r3, #1
   1cd46:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
   1cd48:	4a25      	ldr	r2, [pc, #148]	; (1cde0 <hal_timer_config+0xf0>)
   1cd4a:	411a      	asrs	r2, r3
   1cd4c:	60c2      	str	r2, [r0, #12]
    bsptimer->tmr_enabled = 1;
   1cd4e:	2201      	movs	r2, #1
   1cd50:	7002      	strb	r2, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1cd52:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1cd56:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
   1cd58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1cd5c:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
   1cd60:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
   1cd64:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
   1cd68:	d00c      	beq.n	1cd84 <hal_timer_config+0x94>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   1cd6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1cd6e:	2100      	movs	r1, #0
   1cd70:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   1cd74:	2101      	movs	r1, #1
   1cd76:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
   1cd78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1cd7c:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   1cd80:	2a00      	cmp	r2, #0
   1cd82:	d0f9      	beq.n	1cd78 <hal_timer_config+0x88>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
   1cd84:	6902      	ldr	r2, [r0, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
   1cd86:	2101      	movs	r1, #1
   1cd88:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
   1cd8a:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
   1cd8c:	2500      	movs	r5, #0
   1cd8e:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
   1cd92:	2503      	movs	r5, #3
   1cd94:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
   1cd98:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
   1cd9c:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   1cd9e:	7842      	ldrb	r2, [r0, #1]
   1cda0:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1cda2:	2b00      	cmp	r3, #0
   1cda4:	db07      	blt.n	1cdb6 <hal_timer_config+0xc6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1cda6:	f002 021f 	and.w	r2, r2, #31
   1cdaa:	095b      	lsrs	r3, r3, #5
   1cdac:	fa01 f202 	lsl.w	r2, r1, r2
   1cdb0:	490c      	ldr	r1, [pc, #48]	; (1cde4 <hal_timer_config+0xf4>)
   1cdb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
   1cdb6:	b97c      	cbnz	r4, 1cdd8 <hal_timer_config+0xe8>
  __ASM volatile ("cpsie i" : : : "memory");
   1cdb8:	b662      	cpsie	i

    return 0;
   1cdba:	2000      	movs	r0, #0

err:
    return rc;
}
   1cdbc:	bc30      	pop	{r4, r5}
   1cdbe:	4770      	bx	lr
    return rc;
   1cdc0:	2016      	movs	r0, #22
   1cdc2:	4770      	bx	lr
   1cdc4:	2016      	movs	r0, #22
   1cdc6:	4770      	bx	lr
   1cdc8:	2016      	movs	r0, #22
   1cdca:	4770      	bx	lr
   1cdcc:	2016      	movs	r0, #22
   1cdce:	4770      	bx	lr
   1cdd0:	2016      	movs	r0, #22
   1cdd2:	4770      	bx	lr
   1cdd4:	2016      	movs	r0, #22
}
   1cdd6:	4770      	bx	lr
    return 0;
   1cdd8:	2000      	movs	r0, #0
   1cdda:	e7ef      	b.n	1cdbc <hal_timer_config+0xcc>
   1cddc:	000226ec 	.word	0x000226ec
   1cde0:	00f42400 	.word	0x00f42400
   1cde4:	e000e100 	.word	0xe000e100

0001cde8 <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
   1cde8:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1cdea:	2805      	cmp	r0, #5
   1cdec:	dc0c      	bgt.n	1ce08 <hal_timer_read+0x20>
   1cdee:	4b09      	ldr	r3, [pc, #36]	; (1ce14 <hal_timer_read+0x2c>)
   1cdf0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1cdf4:	b140      	cbz	r0, 1ce08 <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
   1cdf6:	7883      	ldrb	r3, [r0, #2]
   1cdf8:	b91b      	cbnz	r3, 1ce02 <hal_timer_read+0x1a>
        tcntr = hal_timer_read_bsptimer(bsptimer);
    } else {
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1cdfa:	6900      	ldr	r0, [r0, #16]
   1cdfc:	f7ff fe5a 	bl	1cab4 <nrf_read_timer_cntr>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
   1ce00:	bd08      	pop	{r3, pc}
        tcntr = hal_timer_read_bsptimer(bsptimer);
   1ce02:	f7ff fec1 	bl	1cb88 <hal_timer_read_bsptimer>
   1ce06:	e7fb      	b.n	1ce00 <hal_timer_read+0x18>
    assert(0);
   1ce08:	2300      	movs	r3, #0
   1ce0a:	461a      	mov	r2, r3
   1ce0c:	4619      	mov	r1, r3
   1ce0e:	4618      	mov	r0, r3
   1ce10:	f7fd fcf2 	bl	1a7f8 <__assert_func>
   1ce14:	000226ec 	.word	0x000226ec

0001ce18 <nrf52_periph_create_timers>:
};
#endif

static void
nrf52_periph_create_timers(void)
{
   1ce18:	b508      	push	{r3, lr}
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
   1ce1a:	2100      	movs	r1, #0
   1ce1c:	4608      	mov	r0, r1
   1ce1e:	f7ff ff37 	bl	1cc90 <hal_timer_init>
    assert(rc == 0);
   1ce22:	b920      	cbnz	r0, 1ce2e <nrf52_periph_create_timers+0x16>
    rc = hal_timer_init(5, NULL);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   1ce24:	4808      	ldr	r0, [pc, #32]	; (1ce48 <nrf52_periph_create_timers+0x30>)
   1ce26:	f7fd ff11 	bl	1ac4c <os_cputime_init>
    assert(rc == 0);
   1ce2a:	b930      	cbnz	r0, 1ce3a <nrf52_periph_create_timers+0x22>
#endif
}
   1ce2c:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1ce2e:	2300      	movs	r3, #0
   1ce30:	461a      	mov	r2, r3
   1ce32:	4619      	mov	r1, r3
   1ce34:	4618      	mov	r0, r3
   1ce36:	f7fd fcdf 	bl	1a7f8 <__assert_func>
    assert(rc == 0);
   1ce3a:	2300      	movs	r3, #0
   1ce3c:	461a      	mov	r2, r3
   1ce3e:	4619      	mov	r1, r3
   1ce40:	4618      	mov	r0, r3
   1ce42:	f7fd fcd9 	bl	1a7f8 <__assert_func>
   1ce46:	bf00      	nop
   1ce48:	000f4240 	.word	0x000f4240

0001ce4c <nrf52_periph_create_i2c>:
#endif
}

static void
nrf52_periph_create_i2c(void)
{
   1ce4c:	b508      	push	{r3, lr}
    rc = bus_i2c_hal_dev_create("i2c1", &i2c1_bus,
                                (struct bus_i2c_dev_cfg *)&i2c1_cfg);
    assert(rc == 0);
#endif
#else
    rc = hal_i2c_init(1, (void *)&hal_i2c1_cfg);
   1ce4e:	4906      	ldr	r1, [pc, #24]	; (1ce68 <nrf52_periph_create_i2c+0x1c>)
   1ce50:	2001      	movs	r0, #1
   1ce52:	f7fd f82b 	bl	19eac <hal_i2c_init>
    assert(rc == 0);
   1ce56:	b900      	cbnz	r0, 1ce5a <nrf52_periph_create_i2c+0xe>
#endif
#endif
}
   1ce58:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1ce5a:	2300      	movs	r3, #0
   1ce5c:	461a      	mov	r2, r3
   1ce5e:	4619      	mov	r1, r3
   1ce60:	4618      	mov	r0, r3
   1ce62:	f7fd fcc9 	bl	1a7f8 <__assert_func>
   1ce66:	bf00      	nop
   1ce68:	00022704 	.word	0x00022704

0001ce6c <nrf52_periph_create_spi>:

static void
nrf52_periph_create_spi(void)
{
   1ce6c:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BUS_DRIVER_PRESENT)
    rc = bus_spi_hal_dev_create("spi0",
                                &spi0_bus, (struct bus_spi_dev_cfg *)&spi0_cfg);
    assert(rc == 0);
#else
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
   1ce6e:	2200      	movs	r2, #0
   1ce70:	4905      	ldr	r1, [pc, #20]	; (1ce88 <nrf52_periph_create_spi+0x1c>)
   1ce72:	4610      	mov	r0, r2
   1ce74:	f7fd fb4e 	bl	1a514 <hal_spi_init>
    assert(rc == 0);
   1ce78:	b900      	cbnz	r0, 1ce7c <nrf52_periph_create_spi+0x10>
#endif
#if MYNEWT_VAL(SPI_2_SLAVE)
    rc = hal_spi_init(2, (void *)&os_bsp_spi2s_cfg, HAL_SPI_TYPE_SLAVE);
    assert(rc == 0);
#endif
}
   1ce7a:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1ce7c:	2300      	movs	r3, #0
   1ce7e:	461a      	mov	r2, r3
   1ce80:	4619      	mov	r1, r3
   1ce82:	4618      	mov	r0, r3
   1ce84:	f7fd fcb8 	bl	1a7f8 <__assert_func>
   1ce88:	00022710 	.word	0x00022710

0001ce8c <nrf52_periph_create>:

void
nrf52_periph_create(void)
{
   1ce8c:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
   1ce8e:	f7ff ffc3 	bl	1ce18 <nrf52_periph_create_timers>
    nrf52_periph_create_adc();
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
   1ce92:	f7ff ffdb 	bl	1ce4c <nrf52_periph_create_i2c>
    nrf52_periph_create_spi();
   1ce96:	f7ff ffe9 	bl	1ce6c <nrf52_periph_create_spi>
}
   1ce9a:	bd08      	pop	{r3, pc}

0001ce9c <sensor_dev_create>:
    assert(rc == 0);

    rc = config_icp10114_sensor();
    assert(rc == 0);
#endif
}
   1ce9c:	4770      	bx	lr
	...

0001cea0 <sensor_mgr_remove>:
}

static void
sensor_mgr_remove(struct sensor *sensor)
{
    SLIST_REMOVE(&sensor_mgr.mgr_sensor_list, sensor, sensor, s_next);
   1cea0:	4b08      	ldr	r3, [pc, #32]	; (1cec4 <sensor_mgr_remove+0x24>)
   1cea2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1cea4:	4282      	cmp	r2, r0
   1cea6:	d104      	bne.n	1ceb2 <sensor_mgr_remove+0x12>
   1cea8:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
   1ceac:	631a      	str	r2, [r3, #48]	; 0x30
   1ceae:	4770      	bx	lr
   1ceb0:	461a      	mov	r2, r3
   1ceb2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1ceb6:	4283      	cmp	r3, r0
   1ceb8:	d1fa      	bne.n	1ceb0 <sensor_mgr_remove+0x10>
   1ceba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1cebe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
   1cec2:	4770      	bx	lr
   1cec4:	2000def0 	.word	0x2000def0

0001cec8 <sensor_mgr_insert>:

static void
sensor_mgr_insert(struct sensor *sensor)
{
   1cec8:	b410      	push	{r4}
    struct sensor *cursor, *prev;

    prev = cursor = NULL;
    if (!sensor->s_poll_rate) {
   1ceca:	6a03      	ldr	r3, [r0, #32]
   1cecc:	b993      	cbnz	r3, 1cef4 <sensor_mgr_insert+0x2c>
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1cece:	4b15      	ldr	r3, [pc, #84]	; (1cf24 <sensor_mgr_insert+0x5c>)
   1ced0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1ced2:	2100      	movs	r1, #0
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1ced4:	e002      	b.n	1cedc <sensor_mgr_insert+0x14>
            prev = cursor;
   1ced6:	4619      	mov	r1, r3
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1ced8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1cedc:	2b00      	cmp	r3, #0
   1cede:	d1fa      	bne.n	1ced6 <sensor_mgr_insert+0xe>

        prev = cursor;
    }

insert:
    if (prev == NULL) {
   1cee0:	b1c9      	cbz	r1, 1cf16 <sensor_mgr_insert+0x4e>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
    } else {
        SLIST_INSERT_AFTER(prev, sensor, s_next);
   1cee2:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
   1cee6:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
   1ceea:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
    }
}
   1ceee:	f85d 4b04 	ldr.w	r4, [sp], #4
   1cef2:	4770      	bx	lr
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1cef4:	4b0b      	ldr	r3, [pc, #44]	; (1cf24 <sensor_mgr_insert+0x5c>)
   1cef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1cef8:	2100      	movs	r1, #0
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1cefa:	2b00      	cmp	r3, #0
   1cefc:	d0f0      	beq.n	1cee0 <sensor_mgr_insert+0x18>
        if (!cursor->s_poll_rate) {
   1cefe:	6a1a      	ldr	r2, [r3, #32]
   1cf00:	2a00      	cmp	r2, #0
   1cf02:	d0ed      	beq.n	1cee0 <sensor_mgr_insert+0x18>
        if (OS_TIME_TICK_LT(sensor->s_next_run, cursor->s_next_run)) {
   1cf04:	6a42      	ldr	r2, [r0, #36]	; 0x24
   1cf06:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   1cf08:	1b12      	subs	r2, r2, r4
   1cf0a:	2a00      	cmp	r2, #0
   1cf0c:	dbe8      	blt.n	1cee0 <sensor_mgr_insert+0x18>
        prev = cursor;
   1cf0e:	4619      	mov	r1, r3
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1cf10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1cf14:	e7f1      	b.n	1cefa <sensor_mgr_insert+0x32>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
   1cf16:	4b03      	ldr	r3, [pc, #12]	; (1cf24 <sensor_mgr_insert+0x5c>)
   1cf18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1cf1a:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   1cf1e:	6318      	str	r0, [r3, #48]	; 0x30
   1cf20:	e7e5      	b.n	1ceee <sensor_mgr_insert+0x26>
   1cf22:	bf00      	nop
   1cf24:	2000def0 	.word	0x2000def0

0001cf28 <sensor_type_traits_empty>:
}

static uint8_t
sensor_type_traits_empty(struct sensor *sensor)
{
    return SLIST_EMPTY(&sensor->s_type_traits_list);
   1cf28:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
}
   1cf2a:	fab0 f080 	clz	r0, r0
   1cf2e:	0940      	lsrs	r0, r0, #5
   1cf30:	4770      	bx	lr
	...

0001cf34 <sensor_mgr_evq_set>:
}

static void
sensor_mgr_evq_set(struct os_eventq *evq)
{
    sensor_mgr.mgr_eventq = evq;
   1cf34:	4b01      	ldr	r3, [pc, #4]	; (1cf3c <sensor_mgr_evq_set+0x8>)
   1cf36:	62d8      	str	r0, [r3, #44]	; 0x2c
}
   1cf38:	4770      	bx	lr
   1cf3a:	bf00      	nop
   1cf3c:	2000def0 	.word	0x2000def0

0001cf40 <sensor_mgr_match_bytype>:
 *
 * @return 1 if matches, 0 if it doesn't match.
 */
int
sensor_mgr_match_bytype(struct sensor *sensor, void *arg)
{
   1cf40:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
     * sensor, and type is the bitmask we're searching for. We also look at
     * the mask as the driver might be configured to work in a mode where only
     * some of the sensors are supported but not all. Compare the three,
     * and if there is a match, return 1. If it is not supported, return 0.
     */
    return (*type & sensor->s_types & sensor->s_mask) ? 1 : 0;
   1cf44:	e9d1 2300 	ldrd	r2, r3, [r1]
   1cf48:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1cf4c:	ea02 0b04 	and.w	fp, r2, r4
   1cf50:	ea03 0c05 	and.w	ip, r3, r5
   1cf54:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
   1cf58:	ea0b 0200 	and.w	r2, fp, r0
   1cf5c:	ea0c 0301 	and.w	r3, ip, r1
   1cf60:	4313      	orrs	r3, r2
}
   1cf62:	bf14      	ite	ne
   1cf64:	2001      	movne	r0, #1
   1cf66:	2000      	moveq	r0, #0
   1cf68:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1cf6c:	4770      	bx	lr

0001cf6e <sensor_read_data_func>:
}

static int
sensor_read_data_func(struct sensor *sensor, void *arg, void *data,
                      sensor_type_t type)
{
   1cf6e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cf72:	b083      	sub	sp, #12
   1cf74:	4605      	mov	r5, r0
   1cf76:	4689      	mov	r9, r1
   1cf78:	4690      	mov	r8, r2
   1cf7a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    struct sensor_listener *listener;
    struct sensor_read_ctx *ctx;

    ctx = (struct sensor_read_ctx *) arg;

    if ((uint8_t)(uintptr_t)(ctx->user_arg) != SENSOR_IGN_LISTENER) {
   1cf7e:	790b      	ldrb	r3, [r1, #4]
   1cf80:	2b01      	cmp	r3, #1
   1cf82:	d013      	beq.n	1cfac <sensor_read_data_func+0x3e>
        /* Notify all listeners first */
        SLIST_FOREACH(listener, &sensor->s_listener_list, sl_next) {
   1cf84:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
   1cf86:	e000      	b.n	1cf8a <sensor_read_data_func+0x1c>
   1cf88:	6924      	ldr	r4, [r4, #16]
   1cf8a:	b17c      	cbz	r4, 1cfac <sensor_read_data_func+0x3e>
            if (listener->sl_sensor_type & type) {
   1cf8c:	e9d4 0100 	ldrd	r0, r1, [r4]
   1cf90:	ea00 0206 	and.w	r2, r0, r6
   1cf94:	ea01 0307 	and.w	r3, r1, r7
   1cf98:	4313      	orrs	r3, r2
   1cf9a:	d0f5      	beq.n	1cf88 <sensor_read_data_func+0x1a>
                listener->sl_func(sensor, listener->sl_arg, data, type);
   1cf9c:	68a3      	ldr	r3, [r4, #8]
   1cf9e:	68e1      	ldr	r1, [r4, #12]
   1cfa0:	e9cd 6700 	strd	r6, r7, [sp]
   1cfa4:	4642      	mov	r2, r8
   1cfa6:	4628      	mov	r0, r5
   1cfa8:	4798      	blx	r3
   1cfaa:	e7ed      	b.n	1cf88 <sensor_read_data_func+0x1a>
            }
        }
    }

    /* Call data function */
    if (ctx->user_func != NULL) {
   1cfac:	f8d9 3000 	ldr.w	r3, [r9]
   1cfb0:	b14b      	cbz	r3, 1cfc6 <sensor_read_data_func+0x58>
        return (ctx->user_func(sensor, ctx->user_arg, data, type));
   1cfb2:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1cfb6:	e9cd 6700 	strd	r6, r7, [sp]
   1cfba:	4642      	mov	r2, r8
   1cfbc:	4628      	mov	r0, r5
   1cfbe:	4798      	blx	r3
    }

    return (0);
}
   1cfc0:	b003      	add	sp, #12
   1cfc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (0);
   1cfc6:	2000      	movs	r0, #0
   1cfc8:	e7fa      	b.n	1cfc0 <sensor_read_data_func+0x52>
	...

0001cfcc <sensor_base_ts_update_event>:
{
   1cfcc:	b530      	push	{r4, r5, lr}
   1cfce:	b087      	sub	sp, #28
    ticks = os_time_get();
   1cfd0:	f7fe fe30 	bl	1bc34 <os_time_get>
   1cfd4:	4604      	mov	r4, r0
    rc = os_gettimeofday(&ostv, &ostz);
   1cfd6:	a901      	add	r1, sp, #4
   1cfd8:	a802      	add	r0, sp, #8
   1cfda:	f7fe fe65 	bl	1bca8 <os_gettimeofday>
    if (rc) {
   1cfde:	b138      	cbz	r0, 1cff0 <sensor_base_ts_update_event+0x24>
        ticks += OS_TICKS_PER_SEC * 600;
   1cfe0:	f504 3496 	add.w	r4, r4, #76800	; 0x12c00
    os_callout_reset(&st_up_osco, ticks);
   1cfe4:	4621      	mov	r1, r4
   1cfe6:	4809      	ldr	r0, [pc, #36]	; (1d00c <sensor_base_ts_update_event+0x40>)
   1cfe8:	f7fd fdac 	bl	1ab44 <os_callout_reset>
}
   1cfec:	b007      	add	sp, #28
   1cfee:	bd30      	pop	{r4, r5, pc}
    ticks += OS_TICKS_PER_SEC * 2000;
   1cff0:	f504 347a 	add.w	r4, r4, #256000	; 0x3e800
    sensor_base_ts.st_ostv = ostv;
   1cff4:	4d06      	ldr	r5, [pc, #24]	; (1d010 <sensor_base_ts_update_event+0x44>)
   1cff6:	ab06      	add	r3, sp, #24
   1cff8:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1cffc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1d000:	9b01      	ldr	r3, [sp, #4]
   1d002:	612b      	str	r3, [r5, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1d004:	f7fd fe28 	bl	1ac58 <os_cputime_get32>
   1d008:	6168      	str	r0, [r5, #20]
   1d00a:	e7eb      	b.n	1cfe4 <sensor_base_ts_update_event+0x18>
   1d00c:	2000df24 	.word	0x2000df24
   1d010:	2000df48 	.word	0x2000df48

0001d014 <sensor_up_timestamp>:
    assert(rc == 0);
}

static void
sensor_up_timestamp(struct sensor *sensor)
{
   1d014:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   1d018:	4604      	mov	r4, r0
    uint32_t curr_ts_ticks;
    uint32_t ts;

    curr_ts_ticks = os_cputime_get32();
   1d01a:	f7fd fe1d 	bl	1ac58 <os_cputime_get32>

    ts = os_cputime_ticks_to_usecs(curr_ts_ticks -
   1d01e:	4a0e      	ldr	r2, [pc, #56]	; (1d058 <sensor_up_timestamp+0x44>)
   1d020:	6955      	ldr	r5, [r2, #20]
   1d022:	1b43      	subs	r3, r0, r5
             sensor_base_ts.st_cputime);

    /* Updating cputime */
    sensor_base_ts.st_cputime = sensor->s_sts.st_cputime = curr_ts_ticks;
   1d024:	6460      	str	r0, [r4, #68]	; 0x44
   1d026:	6150      	str	r0, [r2, #20]

    /* Updating seconds */
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1d028:	e9d2 0100 	ldrd	r0, r1, [r2]
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1d02c:	6895      	ldr	r5, [r2, #8]
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1d02e:	441d      	add	r5, r3
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1d030:	4b0a      	ldr	r3, [pc, #40]	; (1d05c <sensor_up_timestamp+0x48>)
   1d032:	fba3 c305 	umull	ip, r3, r3, r5
   1d036:	0c9b      	lsrs	r3, r3, #18
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1d038:	eb10 0b03 	adds.w	fp, r0, r3
   1d03c:	f141 0c00 	adc.w	ip, r1, #0
   1d040:	e9c2 bc00 	strd	fp, ip, [r2]
    sensor->s_sts.st_ostv.tv_sec = sensor_base_ts.st_ostv.tv_sec;
   1d044:	e9c4 bc0c 	strd	fp, ip, [r4, #48]	; 0x30

    /* Updating Micro seconds */
    sensor_base_ts.st_ostv.tv_usec  =
        (sensor_base_ts.st_ostv.tv_usec + ts)%1000000;
   1d048:	4905      	ldr	r1, [pc, #20]	; (1d060 <sensor_up_timestamp+0x4c>)
   1d04a:	fb01 5113 	mls	r1, r1, r3, r5
    sensor_base_ts.st_ostv.tv_usec  =
   1d04e:	6091      	str	r1, [r2, #8]
    sensor->s_sts.st_ostv.tv_usec = sensor_base_ts.st_ostv.tv_usec;
   1d050:	63a1      	str	r1, [r4, #56]	; 0x38

}
   1d052:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   1d056:	bf00      	nop
   1d058:	2000df48 	.word	0x2000df48
   1d05c:	431bde83 	.word	0x431bde83
   1d060:	000f4240 	.word	0x000f4240

0001d064 <sensor_mgr_lock>:
{
   1d064:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor_mgr.mgr_lock, OS_TIMEOUT_NEVER);
   1d066:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d06a:	4804      	ldr	r0, [pc, #16]	; (1d07c <sensor_mgr_lock+0x18>)
   1d06c:	f7fe fa5c 	bl	1b528 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1d070:	b108      	cbz	r0, 1d076 <sensor_mgr_lock+0x12>
   1d072:	2809      	cmp	r0, #9
   1d074:	d000      	beq.n	1d078 <sensor_mgr_lock+0x14>
}
   1d076:	bd08      	pop	{r3, pc}
        return (0);
   1d078:	2000      	movs	r0, #0
   1d07a:	e7fc      	b.n	1d076 <sensor_mgr_lock+0x12>
   1d07c:	2000def0 	.word	0x2000def0

0001d080 <sensor_mgr_unlock>:
{
   1d080:	b508      	push	{r3, lr}
    (void) os_mutex_release(&sensor_mgr.mgr_lock);
   1d082:	4802      	ldr	r0, [pc, #8]	; (1d08c <sensor_mgr_unlock+0xc>)
   1d084:	f7fe f9f4 	bl	1b470 <os_mutex_release>
}
   1d088:	bd08      	pop	{r3, pc}
   1d08a:	bf00      	nop
   1d08c:	2000def0 	.word	0x2000def0

0001d090 <sensor_mgr_evq_get>:
}
   1d090:	4b01      	ldr	r3, [pc, #4]	; (1d098 <sensor_mgr_evq_get+0x8>)
   1d092:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   1d094:	4770      	bx	lr
   1d096:	bf00      	nop
   1d098:	2000def0 	.word	0x2000def0

0001d09c <sensor_mgr_init>:
{
   1d09c:	b570      	push	{r4, r5, r6, lr}
   1d09e:	b088      	sub	sp, #32
    sensor_mgr_evq_set(os_eventq_dflt_get());
   1d0a0:	f7fd ff68 	bl	1af74 <os_eventq_dflt_get>
   1d0a4:	f7ff ff46 	bl	1cf34 <sensor_mgr_evq_set>
    rc = os_mempool_init(&sensor_notify_evt_pool,
   1d0a8:	4b1c      	ldr	r3, [pc, #112]	; (1d11c <sensor_mgr_init+0x80>)
   1d0aa:	9300      	str	r3, [sp, #0]
   1d0ac:	4b1c      	ldr	r3, [pc, #112]	; (1d120 <sensor_mgr_init+0x84>)
   1d0ae:	2218      	movs	r2, #24
   1d0b0:	2105      	movs	r1, #5
   1d0b2:	481c      	ldr	r0, [pc, #112]	; (1d124 <sensor_mgr_init+0x88>)
   1d0b4:	f7fe f8e8 	bl	1b288 <os_mempool_init>
    assert(rc == OS_OK);
   1d0b8:	bb50      	cbnz	r0, 1d110 <sensor_mgr_init+0x74>
    os_callout_init(&sensor_mgr.mgr_wakeup_callout, sensor_mgr_evq_get(),
   1d0ba:	f7ff ffe9 	bl	1d090 <sensor_mgr_evq_get>
   1d0be:	4e1a      	ldr	r6, [pc, #104]	; (1d128 <sensor_mgr_init+0x8c>)
   1d0c0:	2300      	movs	r3, #0
   1d0c2:	4a1a      	ldr	r2, [pc, #104]	; (1d12c <sensor_mgr_init+0x90>)
   1d0c4:	4601      	mov	r1, r0
   1d0c6:	4630      	mov	r0, r6
   1d0c8:	f7fd fd10 	bl	1aaec <os_callout_init>
    os_gettimeofday(&ostv, &ostz);
   1d0cc:	ad04      	add	r5, sp, #16
   1d0ce:	a903      	add	r1, sp, #12
   1d0d0:	4628      	mov	r0, r5
   1d0d2:	f7fe fde9 	bl	1bca8 <os_gettimeofday>
    sensor_base_ts.st_ostv = ostv;
   1d0d6:	4c16      	ldr	r4, [pc, #88]	; (1d130 <sensor_mgr_init+0x94>)
   1d0d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1d0dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1d0e0:	9b03      	ldr	r3, [sp, #12]
   1d0e2:	6123      	str	r3, [r4, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1d0e4:	f7fd fdb8 	bl	1ac58 <os_cputime_get32>
   1d0e8:	6160      	str	r0, [r4, #20]
    os_callout_init(&st_up_osco, sensor_mgr_evq_get(),
   1d0ea:	f7ff ffd1 	bl	1d090 <sensor_mgr_evq_get>
   1d0ee:	4c11      	ldr	r4, [pc, #68]	; (1d134 <sensor_mgr_init+0x98>)
   1d0f0:	2300      	movs	r3, #0
   1d0f2:	4a11      	ldr	r2, [pc, #68]	; (1d138 <sensor_mgr_init+0x9c>)
   1d0f4:	4601      	mov	r1, r0
   1d0f6:	4620      	mov	r0, r4
   1d0f8:	f7fd fcf8 	bl	1aaec <os_callout_init>
    os_callout_reset(&st_up_osco, OS_TICKS_PER_SEC);
   1d0fc:	2180      	movs	r1, #128	; 0x80
   1d0fe:	4620      	mov	r0, r4
   1d100:	f7fd fd20 	bl	1ab44 <os_callout_reset>
    os_mutex_init(&sensor_mgr.mgr_lock);
   1d104:	f1a6 000c 	sub.w	r0, r6, #12
   1d108:	f7fe f9a8 	bl	1b45c <os_mutex_init>
}
   1d10c:	b008      	add	sp, #32
   1d10e:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == OS_OK);
   1d110:	2300      	movs	r3, #0
   1d112:	461a      	mov	r2, r3
   1d114:	4619      	mov	r1, r3
   1d116:	4618      	mov	r0, r3
   1d118:	f7fd fb6e 	bl	1a7f8 <__assert_func>
   1d11c:	00022714 	.word	0x00022714
   1d120:	2000d9ec 	.word	0x2000d9ec
   1d124:	2000da64 	.word	0x2000da64
   1d128:	2000defc 	.word	0x2000defc
   1d12c:	0001d309 	.word	0x0001d309
   1d130:	2000df48 	.word	0x2000df48
   1d134:	2000df24 	.word	0x2000df24
   1d138:	0001cfcd 	.word	0x0001cfcd

0001d13c <sensor_pkg_init>:
{
   1d13c:	b508      	push	{r3, lr}
    sensor_mgr_init();
   1d13e:	f7ff ffad 	bl	1d09c <sensor_mgr_init>
}
   1d142:	bd08      	pop	{r3, pc}

0001d144 <sensor_lock>:
{
   1d144:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor->s_lock, OS_TIMEOUT_NEVER);
   1d146:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d14a:	3004      	adds	r0, #4
   1d14c:	f7fe f9ec 	bl	1b528 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1d150:	b108      	cbz	r0, 1d156 <sensor_lock+0x12>
   1d152:	2809      	cmp	r0, #9
   1d154:	d000      	beq.n	1d158 <sensor_lock+0x14>
}
   1d156:	bd08      	pop	{r3, pc}
        return (0);
   1d158:	2000      	movs	r0, #0
   1d15a:	e7fc      	b.n	1d156 <sensor_lock+0x12>

0001d15c <sensor_unlock>:
{
   1d15c:	b508      	push	{r3, lr}
    os_mutex_release(&sensor->s_lock);
   1d15e:	3004      	adds	r0, #4
   1d160:	f7fe f986 	bl	1b470 <os_mutex_release>
}
   1d164:	bd08      	pop	{r3, pc}

0001d166 <sensor_update_nextrun>:
{
   1d166:	b530      	push	{r4, r5, lr}
   1d168:	b083      	sub	sp, #12
   1d16a:	4604      	mov	r4, r0
   1d16c:	460d      	mov	r5, r1
    os_time_ms_to_ticks(sensor->s_poll_rate, &sensor_ticks);
   1d16e:	a901      	add	r1, sp, #4
   1d170:	6a00      	ldr	r0, [r0, #32]
   1d172:	f7fe fdb5 	bl	1bce0 <os_time_ms_to_ticks>
    sensor_lock(sensor);
   1d176:	4620      	mov	r0, r4
   1d178:	f7ff ffe4 	bl	1d144 <sensor_lock>
    sensor_mgr_remove(sensor);
   1d17c:	4620      	mov	r0, r4
   1d17e:	f7ff fe8f 	bl	1cea0 <sensor_mgr_remove>
    sensor->s_next_run = sensor_ticks + now;
   1d182:	9b01      	ldr	r3, [sp, #4]
   1d184:	441d      	add	r5, r3
   1d186:	6265      	str	r5, [r4, #36]	; 0x24
    sensor_mgr_insert(sensor);
   1d188:	4620      	mov	r0, r4
   1d18a:	f7ff fe9d 	bl	1cec8 <sensor_mgr_insert>
    sensor_unlock(sensor);
   1d18e:	4620      	mov	r0, r4
   1d190:	f7ff ffe4 	bl	1d15c <sensor_unlock>
}
   1d194:	b003      	add	sp, #12
   1d196:	bd30      	pop	{r4, r5, pc}

0001d198 <sensor_calc_nextrun_delta>:
{
   1d198:	b538      	push	{r3, r4, r5, lr}
   1d19a:	4605      	mov	r5, r0
   1d19c:	460c      	mov	r4, r1
    sensor_lock(sensor);
   1d19e:	f7ff ffd1 	bl	1d144 <sensor_lock>
    delta = (int32_t)(sensor->s_next_run - now);
   1d1a2:	6a69      	ldr	r1, [r5, #36]	; 0x24
    if (delta < 0) {
   1d1a4:	1b0c      	subs	r4, r1, r4
   1d1a6:	d404      	bmi.n	1d1b2 <sensor_calc_nextrun_delta+0x1a>
    sensor_unlock(sensor);
   1d1a8:	4628      	mov	r0, r5
   1d1aa:	f7ff ffd7 	bl	1d15c <sensor_unlock>
}
   1d1ae:	4620      	mov	r0, r4
   1d1b0:	bd38      	pop	{r3, r4, r5, pc}
        sensor_ticks = 0;
   1d1b2:	2400      	movs	r4, #0
   1d1b4:	e7f8      	b.n	1d1a8 <sensor_calc_nextrun_delta+0x10>
	...

0001d1b8 <sensor_find_min_nextrun_sensor>:
{
   1d1b8:	b570      	push	{r4, r5, r6, lr}
   1d1ba:	4606      	mov	r6, r0
   1d1bc:	460d      	mov	r5, r1
    sensor_mgr_lock();
   1d1be:	f7ff ff51 	bl	1d064 <sensor_mgr_lock>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
   1d1c2:	4b05      	ldr	r3, [pc, #20]	; (1d1d8 <sensor_find_min_nextrun_sensor+0x20>)
   1d1c4:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    *min_nextrun = sensor_calc_nextrun_delta(head, now);
   1d1c6:	4631      	mov	r1, r6
   1d1c8:	4620      	mov	r0, r4
   1d1ca:	f7ff ffe5 	bl	1d198 <sensor_calc_nextrun_delta>
   1d1ce:	6028      	str	r0, [r5, #0]
    sensor_mgr_unlock();
   1d1d0:	f7ff ff56 	bl	1d080 <sensor_mgr_unlock>
}
   1d1d4:	4620      	mov	r0, r4
   1d1d6:	bd70      	pop	{r4, r5, r6, pc}
   1d1d8:	2000def0 	.word	0x2000def0

0001d1dc <sensor_mgr_register>:
{
   1d1dc:	b538      	push	{r3, r4, r5, lr}
   1d1de:	4605      	mov	r5, r0
    rc = sensor_mgr_lock();
   1d1e0:	f7ff ff40 	bl	1d064 <sensor_mgr_lock>
    if (rc != 0) {
   1d1e4:	4604      	mov	r4, r0
   1d1e6:	b108      	cbz	r0, 1d1ec <sensor_mgr_register+0x10>
}
   1d1e8:	4620      	mov	r0, r4
   1d1ea:	bd38      	pop	{r3, r4, r5, pc}
    rc = sensor_lock(sensor);
   1d1ec:	4628      	mov	r0, r5
   1d1ee:	f7ff ffa9 	bl	1d144 <sensor_lock>
    if (rc != 0) {
   1d1f2:	4604      	mov	r4, r0
   1d1f4:	2800      	cmp	r0, #0
   1d1f6:	d1f7      	bne.n	1d1e8 <sensor_mgr_register+0xc>
    sensor_mgr_insert(sensor);
   1d1f8:	4628      	mov	r0, r5
   1d1fa:	f7ff fe65 	bl	1cec8 <sensor_mgr_insert>
    sensor_unlock(sensor);
   1d1fe:	4628      	mov	r0, r5
   1d200:	f7ff ffac 	bl	1d15c <sensor_unlock>
    sensor_mgr_unlock();
   1d204:	f7ff ff3c 	bl	1d080 <sensor_mgr_unlock>
    return (0);
   1d208:	e7ee      	b.n	1d1e8 <sensor_mgr_register+0xc>

0001d20a <sensor_init>:
{
   1d20a:	b538      	push	{r3, r4, r5, lr}
   1d20c:	4604      	mov	r4, r0
   1d20e:	460d      	mov	r5, r1
    memset(sensor, 0, sizeof(*sensor));
   1d210:	2288      	movs	r2, #136	; 0x88
   1d212:	2100      	movs	r1, #0
   1d214:	f7fe fef3 	bl	1bffe <memset>
    rc = os_mutex_init(&sensor->s_lock);
   1d218:	1d20      	adds	r0, r4, #4
   1d21a:	f7fe f91f 	bl	1b45c <os_mutex_init>
    if (rc != 0) {
   1d21e:	4603      	mov	r3, r0
   1d220:	b900      	cbnz	r0, 1d224 <sensor_init+0x1a>
    sensor->s_dev = dev;
   1d222:	6025      	str	r5, [r4, #0]
}
   1d224:	4618      	mov	r0, r3
   1d226:	bd38      	pop	{r3, r4, r5, pc}

0001d228 <sensor_read>:
 * @return 0 on success, non-zero on failure.
 */
int
sensor_read(struct sensor *sensor, sensor_type_t type,
        sensor_data_func_t data_func, void *arg, uint32_t timeout)
{
   1d228:	b530      	push	{r4, r5, lr}
   1d22a:	b089      	sub	sp, #36	; 0x24
   1d22c:	4604      	mov	r4, r0
   1d22e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    struct sensor_read_ctx src;
    int rc;

    rc = sensor_lock(sensor);
   1d232:	f7ff ff87 	bl	1d144 <sensor_lock>
    if (rc) {
   1d236:	4605      	mov	r5, r0
   1d238:	b9f8      	cbnz	r0, 1d27a <sensor_read+0x52>
        goto err;
    }

    src.user_func = data_func;
   1d23a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d23c:	9306      	str	r3, [sp, #24]
    src.user_arg = arg;
   1d23e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1d240:	9307      	str	r3, [sp, #28]

    if (!sensor_mgr_match_bytype(sensor, (void *)&type)) {
   1d242:	a904      	add	r1, sp, #16
   1d244:	4620      	mov	r0, r4
   1d246:	f7ff fe7b 	bl	1cf40 <sensor_mgr_match_bytype>
   1d24a:	b1e0      	cbz	r0, 1d286 <sensor_read+0x5e>
        rc = SYS_ENOENT;
        goto err;
    }

    sensor_up_timestamp(sensor);
   1d24c:	4620      	mov	r0, r4
   1d24e:	f7ff fee1 	bl	1d014 <sensor_up_timestamp>

    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
   1d252:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1d254:	6819      	ldr	r1, [r3, #0]
   1d256:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d258:	9302      	str	r3, [sp, #8]
   1d25a:	ab06      	add	r3, sp, #24
   1d25c:	9301      	str	r3, [sp, #4]
   1d25e:	4b0b      	ldr	r3, [pc, #44]	; (1d28c <sensor_read+0x64>)
   1d260:	9300      	str	r3, [sp, #0]
   1d262:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1d266:	4620      	mov	r0, r4
   1d268:	4788      	blx	r1
                                  timeout);
    if (rc) {
   1d26a:	4605      	mov	r5, r0
   1d26c:	b128      	cbz	r0, 1d27a <sensor_read+0x52>
        if (sensor->s_err_fn != NULL) {
   1d26e:	6f23      	ldr	r3, [r4, #112]	; 0x70
   1d270:	b11b      	cbz	r3, 1d27a <sensor_read+0x52>
            sensor->s_err_fn(sensor, sensor->s_err_arg, rc);
   1d272:	4602      	mov	r2, r0
   1d274:	6f61      	ldr	r1, [r4, #116]	; 0x74
   1d276:	4620      	mov	r0, r4
   1d278:	4798      	blx	r3
        }
        goto err;
    }

err:
    sensor_unlock(sensor);
   1d27a:	4620      	mov	r0, r4
   1d27c:	f7ff ff6e 	bl	1d15c <sensor_unlock>
    return (rc);
}
   1d280:	4628      	mov	r0, r5
   1d282:	b009      	add	sp, #36	; 0x24
   1d284:	bd30      	pop	{r4, r5, pc}
        rc = SYS_ENOENT;
   1d286:	f06f 0503 	mvn.w	r5, #3
   1d28a:	e7f6      	b.n	1d27a <sensor_read+0x52>
   1d28c:	0001cf6f 	.word	0x0001cf6f

0001d290 <sensor_mgr_poll_bytype>:
{
   1d290:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d292:	b085      	sub	sp, #20
   1d294:	4616      	mov	r6, r2
   1d296:	461f      	mov	r7, r3
   1d298:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (!stt || !stt->stt_polls_left) {
   1d29a:	b10c      	cbz	r4, 1d2a0 <sensor_mgr_poll_bytype+0x10>
   1d29c:	8aa3      	ldrh	r3, [r4, #20]
   1d29e:	b9cb      	cbnz	r3, 1d2d4 <sensor_mgr_poll_bytype+0x44>
   1d2a0:	4632      	mov	r2, r6
   1d2a2:	463b      	mov	r3, r7
   1d2a4:	4605      	mov	r5, r0
        sensor_read(sensor, type, NULL, NULL, OS_TIMEOUT_NEVER);
   1d2a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d2aa:	9102      	str	r1, [sp, #8]
   1d2ac:	2100      	movs	r1, #0
   1d2ae:	9101      	str	r1, [sp, #4]
   1d2b0:	9100      	str	r1, [sp, #0]
   1d2b2:	f7ff ffb9 	bl	1d228 <sensor_read>
        sensor_lock(sensor);
   1d2b6:	4628      	mov	r0, r5
   1d2b8:	f7ff ff44 	bl	1d144 <sensor_lock>
        if (stt) {
   1d2bc:	b12c      	cbz	r4, 1d2ca <sensor_mgr_poll_bytype+0x3a>
            if (!stt->stt_polls_left && stt->stt_poll_n) {
   1d2be:	8aa3      	ldrh	r3, [r4, #20]
   1d2c0:	b91b      	cbnz	r3, 1d2ca <sensor_mgr_poll_bytype+0x3a>
   1d2c2:	8a63      	ldrh	r3, [r4, #18]
   1d2c4:	b10b      	cbz	r3, 1d2ca <sensor_mgr_poll_bytype+0x3a>
                stt->stt_polls_left--;
   1d2c6:	3b01      	subs	r3, #1
   1d2c8:	82a3      	strh	r3, [r4, #20]
        sensor_unlock(sensor);
   1d2ca:	4628      	mov	r0, r5
   1d2cc:	f7ff ff46 	bl	1d15c <sensor_unlock>
}
   1d2d0:	b005      	add	sp, #20
   1d2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        stt->stt_polls_left--;
   1d2d4:	3b01      	subs	r3, #1
   1d2d6:	82a3      	strh	r3, [r4, #20]
}
   1d2d8:	e7fa      	b.n	1d2d0 <sensor_mgr_poll_bytype+0x40>

0001d2da <sensor_poll_per_type_trait>:
{
   1d2da:	b570      	push	{r4, r5, r6, lr}
   1d2dc:	b082      	sub	sp, #8
   1d2de:	4605      	mov	r5, r0
   1d2e0:	460e      	mov	r6, r1
    sensor_lock(sensor);
   1d2e2:	f7ff ff2f 	bl	1d144 <sensor_lock>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1d2e6:	6fec      	ldr	r4, [r5, #124]	; 0x7c
   1d2e8:	e007      	b.n	1d2fa <sensor_poll_per_type_trait+0x20>
        sensor_mgr_poll_bytype(sensor, stt->stt_sensor_type, stt,
   1d2ea:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d2ee:	9601      	str	r6, [sp, #4]
   1d2f0:	9400      	str	r4, [sp, #0]
   1d2f2:	4628      	mov	r0, r5
   1d2f4:	f7ff ffcc 	bl	1d290 <sensor_mgr_poll_bytype>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1d2f8:	6a24      	ldr	r4, [r4, #32]
   1d2fa:	2c00      	cmp	r4, #0
   1d2fc:	d1f5      	bne.n	1d2ea <sensor_poll_per_type_trait+0x10>
    sensor_unlock(sensor);
   1d2fe:	4628      	mov	r0, r5
   1d300:	f7ff ff2c 	bl	1d15c <sensor_unlock>
}
   1d304:	b002      	add	sp, #8
   1d306:	bd70      	pop	{r4, r5, r6, pc}

0001d308 <sensor_mgr_wakeup_event>:
{
   1d308:	b570      	push	{r4, r5, r6, lr}
   1d30a:	b084      	sub	sp, #16
    now = os_time_get();
   1d30c:	f7fe fc92 	bl	1bc34 <os_time_get>
   1d310:	4605      	mov	r5, r0
    sensor_mgr_lock();
   1d312:	f7ff fea7 	bl	1d064 <sensor_mgr_lock>
   1d316:	e012      	b.n	1d33e <sensor_mgr_wakeup_event+0x36>
            sensor_unlock(cursor);
   1d318:	4620      	mov	r0, r4
   1d31a:	f7ff ff1f 	bl	1d15c <sensor_unlock>
            sensor_mgr_unlock();
   1d31e:	f7ff feaf 	bl	1d080 <sensor_mgr_unlock>
}
   1d322:	b004      	add	sp, #16
   1d324:	bd70      	pop	{r4, r5, r6, pc}
            sensor_poll_per_type_trait(cursor, now, next_wakeup);
   1d326:	4632      	mov	r2, r6
   1d328:	4629      	mov	r1, r5
   1d32a:	4620      	mov	r0, r4
   1d32c:	f7ff ffd5 	bl	1d2da <sensor_poll_per_type_trait>
        sensor_update_nextrun(cursor, now);
   1d330:	4629      	mov	r1, r5
   1d332:	4620      	mov	r0, r4
   1d334:	f7ff ff17 	bl	1d166 <sensor_update_nextrun>
        sensor_unlock(cursor);
   1d338:	4620      	mov	r0, r4
   1d33a:	f7ff ff0f 	bl	1d15c <sensor_unlock>
        cursor = sensor_find_min_nextrun_sensor(now, &next_wakeup);
   1d33e:	a903      	add	r1, sp, #12
   1d340:	4628      	mov	r0, r5
   1d342:	f7ff ff39 	bl	1d1b8 <sensor_find_min_nextrun_sensor>
   1d346:	4604      	mov	r4, r0
        sensor_lock(cursor);
   1d348:	f7ff fefc 	bl	1d144 <sensor_lock>
        if (!cursor->s_poll_rate) {
   1d34c:	6a23      	ldr	r3, [r4, #32]
   1d34e:	2b00      	cmp	r3, #0
   1d350:	d0e2      	beq.n	1d318 <sensor_mgr_wakeup_event+0x10>
        if (next_wakeup > 0) {
   1d352:	9e03      	ldr	r6, [sp, #12]
   1d354:	b96e      	cbnz	r6, 1d372 <sensor_mgr_wakeup_event+0x6a>
        if (sensor_type_traits_empty(cursor)) {
   1d356:	4620      	mov	r0, r4
   1d358:	f7ff fde6 	bl	1cf28 <sensor_type_traits_empty>
   1d35c:	2800      	cmp	r0, #0
   1d35e:	d0e2      	beq.n	1d326 <sensor_mgr_wakeup_event+0x1e>
            sensor_mgr_poll_bytype(cursor, cursor->s_mask, NULL, now);
   1d360:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   1d364:	9501      	str	r5, [sp, #4]
   1d366:	2100      	movs	r1, #0
   1d368:	9100      	str	r1, [sp, #0]
   1d36a:	4620      	mov	r0, r4
   1d36c:	f7ff ff90 	bl	1d290 <sensor_mgr_poll_bytype>
   1d370:	e7de      	b.n	1d330 <sensor_mgr_wakeup_event+0x28>
    sensor_mgr_unlock();
   1d372:	f7ff fe85 	bl	1d080 <sensor_mgr_unlock>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
   1d376:	9903      	ldr	r1, [sp, #12]
   1d378:	4801      	ldr	r0, [pc, #4]	; (1d380 <sensor_mgr_wakeup_event+0x78>)
   1d37a:	f7fd fbe3 	bl	1ab44 <os_callout_reset>
   1d37e:	e7d0      	b.n	1d322 <sensor_mgr_wakeup_event+0x1a>
   1d380:	2000defc 	.word	0x2000defc

0001d384 <init_sensor_coap>:

///////////////////////////////////////////////////////////////////////////////
//  CoAP Functions

///  Init the Sensor CoAP module. Called by sysinit() during startup, defined in pkg.yml.
void init_sensor_coap(void) {
   1d384:	b508      	push	{r3, lr}
    os_error_t rc = os_sem_init(&oc_sem, 1);  //  Init to 1 token, so only 1 caller will be allowed.
   1d386:	2101      	movs	r1, #1
   1d388:	4806      	ldr	r0, [pc, #24]	; (1d3a4 <init_sensor_coap+0x20>)
   1d38a:	f7fe faf1 	bl	1b970 <os_sem_init>
    assert(rc == OS_OK);
   1d38e:	b918      	cbnz	r0, 1d398 <init_sensor_coap+0x14>
    oc_sensor_coap_ready = true;
   1d390:	4b05      	ldr	r3, [pc, #20]	; (1d3a8 <init_sensor_coap+0x24>)
   1d392:	2201      	movs	r2, #1
   1d394:	701a      	strb	r2, [r3, #0]
}
   1d396:	bd08      	pop	{r3, pc}
    assert(rc == OS_OK);
   1d398:	2300      	movs	r3, #0
   1d39a:	461a      	mov	r2, r3
   1d39c:	4619      	mov	r1, r3
   1d39e:	4618      	mov	r0, r3
   1d3a0:	f7fd fa2a 	bl	1a7f8 <__assert_func>
   1d3a4:	2000da80 	.word	0x2000da80
   1d3a8:	2000da88 	.word	0x2000da88

0001d3ac <is_sensor_node>:
}

bool is_sensor_node(void) {
    //  Return true if this is a Sensor Node.
    //  This is a Sensor Node if the Hardware ID matches one of the Sensor Node Hardware IDs.
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1d3ac:	4b04      	ldr	r3, [pc, #16]	; (1d3c0 <is_sensor_node+0x14>)
   1d3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d3b2:	4313      	orrs	r3, r2
   1d3b4:	d101      	bne.n	1d3ba <is_sensor_node+0xe>
    return false;
   1d3b6:	2000      	movs	r0, #0
}
   1d3b8:	4770      	bx	lr
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1d3ba:	2001      	movs	r0, #1
   1d3bc:	4770      	bx	lr
   1d3be:	bf00      	nop
   1d3c0:	2000daa0 	.word	0x2000daa0

0001d3c4 <get_hardware_id>:
}

/////////////////////////////////////////////////////////
//  Sensor Network Addresses

const uint8_t *get_hardware_id(void) {
   1d3c4:	b508      	push	{r3, lr}
    //  Return the Hardware ID, which is unique across all microcontrollers.
    if (hw_id_len == 0) {
   1d3c6:	4b16      	ldr	r3, [pc, #88]	; (1d420 <get_hardware_id+0x5c>)
   1d3c8:	681b      	ldr	r3, [r3, #0]
   1d3ca:	b10b      	cbz	r3, 1d3d0 <get_hardware_id+0xc>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
    }
    return hw_id;
}
   1d3cc:	4815      	ldr	r0, [pc, #84]	; (1d424 <get_hardware_id+0x60>)
   1d3ce:	bd08      	pop	{r3, pc}
        hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
   1d3d0:	f000 fcee 	bl	1ddb0 <hal_bsp_hw_id_len>
   1d3d4:	4b12      	ldr	r3, [pc, #72]	; (1d420 <get_hardware_id+0x5c>)
   1d3d6:	6018      	str	r0, [r3, #0]
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1d3d8:	280b      	cmp	r0, #11
   1d3da:	d914      	bls.n	1d406 <get_hardware_id+0x42>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1d3dc:	210c      	movs	r1, #12
   1d3de:	4811      	ldr	r0, [pc, #68]	; (1d424 <get_hardware_id+0x60>)
   1d3e0:	f000 fce8 	bl	1ddb4 <hal_bsp_hw_id>
   1d3e4:	4b0e      	ldr	r3, [pc, #56]	; (1d420 <get_hardware_id+0x5c>)
   1d3e6:	6018      	str	r0, [r3, #0]
   1d3e8:	2800      	cmp	r0, #0
   1d3ea:	dd12      	ble.n	1d412 <get_hardware_id+0x4e>
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
   1d3ec:	490e      	ldr	r1, [pc, #56]	; (1d428 <get_hardware_id+0x64>)
   1d3ee:	480f      	ldr	r0, [pc, #60]	; (1d42c <get_hardware_id+0x68>)
   1d3f0:	f7fc fb3a 	bl	19a68 <console_printf>
   1d3f4:	4b0a      	ldr	r3, [pc, #40]	; (1d420 <get_hardware_id+0x5c>)
   1d3f6:	6819      	ldr	r1, [r3, #0]
   1d3f8:	480a      	ldr	r0, [pc, #40]	; (1d424 <get_hardware_id+0x60>)
   1d3fa:	f7fc fac5 	bl	19988 <console_dump>
   1d3fe:	480c      	ldr	r0, [pc, #48]	; (1d430 <get_hardware_id+0x6c>)
   1d400:	f7fc fb32 	bl	19a68 <console_printf>
   1d404:	e7e2      	b.n	1d3cc <get_hardware_id+0x8>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1d406:	2300      	movs	r3, #0
   1d408:	461a      	mov	r2, r3
   1d40a:	4619      	mov	r1, r3
   1d40c:	4618      	mov	r0, r3
   1d40e:	f7fd f9f3 	bl	1a7f8 <__assert_func>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1d412:	2300      	movs	r3, #0
   1d414:	461a      	mov	r2, r3
   1d416:	4619      	mov	r1, r3
   1d418:	4618      	mov	r0, r3
   1d41a:	f7fd f9ed 	bl	1a7f8 <__assert_func>
   1d41e:	bf00      	nop
   1d420:	2000da98 	.word	0x2000da98
   1d424:	2000da8c 	.word	0x2000da8c
   1d428:	000227b8 	.word	0x000227b8
   1d42c:	00022770 	.word	0x00022770
   1d430:	000228d0 	.word	0x000228d0

0001d434 <is_collector_node>:
bool is_collector_node(void) {
   1d434:	b508      	push	{r3, lr}
    const uint8_t *hardware_id = get_hardware_id();
   1d436:	f7ff ffc5 	bl	1d3c4 <get_hardware_id>
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1d43a:	220c      	movs	r2, #12
   1d43c:	4903      	ldr	r1, [pc, #12]	; (1d44c <is_collector_node+0x18>)
   1d43e:	f7fe fdad 	bl	1bf9c <memcmp>
   1d442:	b108      	cbz	r0, 1d448 <is_collector_node+0x14>
    return false; 
   1d444:	2000      	movs	r0, #0
}
   1d446:	bd08      	pop	{r3, pc}
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1d448:	2001      	movs	r0, #1
   1d44a:	e7fc      	b.n	1d446 <is_collector_node+0x12>
   1d44c:	00022728 	.word	0x00022728

0001d450 <is_standalone_node>:
bool is_standalone_node(void) {
   1d450:	b510      	push	{r4, lr}
    if (!is_collector_node() && !is_sensor_node()) { return true; }
   1d452:	f7ff ffef 	bl	1d434 <is_collector_node>
   1d456:	b928      	cbnz	r0, 1d464 <is_standalone_node+0x14>
   1d458:	4604      	mov	r4, r0
   1d45a:	f7ff ffa7 	bl	1d3ac <is_sensor_node>
   1d45e:	b910      	cbnz	r0, 1d466 <is_standalone_node+0x16>
   1d460:	2401      	movs	r4, #1
   1d462:	e000      	b.n	1d466 <is_standalone_node+0x16>
    return false;
   1d464:	2400      	movs	r4, #0
}
   1d466:	4620      	mov	r0, r4
   1d468:	bd10      	pop	{r4, pc}
	...

0001d46c <sensor_network_init>:
const char **get_sensor_node_names(void) { return sensor_node_names; }

/////////////////////////////////////////////////////////
//  Sensor Network Configuration

void sensor_network_init(void) {
   1d46c:	b538      	push	{r3, r4, r5, lr}
    //  Allocate Sensor Node address for this node.

    //  Set the Sensor Node names for remote_sensor_create().
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1d46e:	2400      	movs	r4, #0
   1d470:	2c04      	cmp	r4, #4
   1d472:	dc15      	bgt.n	1d4a0 <sensor_network_init+0x34>
        int len = sprintf((char *) sensor_node_names[i], "%010llx", sensor_node_addresses[i]);
   1d474:	4b23      	ldr	r3, [pc, #140]	; (1d504 <sensor_network_init+0x98>)
   1d476:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1d47a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d47e:	4922      	ldr	r1, [pc, #136]	; (1d508 <sensor_network_init+0x9c>)
   1d480:	4822      	ldr	r0, [pc, #136]	; (1d50c <sensor_network_init+0xa0>)
   1d482:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   1d486:	f000 fcaf 	bl	1dde8 <sprintf>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1d48a:	3001      	adds	r0, #1
   1d48c:	280b      	cmp	r0, #11
   1d48e:	dc01      	bgt.n	1d494 <sensor_network_init+0x28>
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1d490:	3401      	adds	r4, #1
   1d492:	e7ed      	b.n	1d470 <sensor_network_init+0x4>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1d494:	2300      	movs	r3, #0
   1d496:	461a      	mov	r2, r3
   1d498:	4619      	mov	r1, r3
   1d49a:	4618      	mov	r0, r3
   1d49c:	f7fd f9ac 	bl	1a7f8 <__assert_func>
    }
    //  Get Sensor Node address if applicable.
    const uint8_t *hardware_id = get_hardware_id();
   1d4a0:	f7ff ff90 	bl	1d3c4 <get_hardware_id>
   1d4a4:	4605      	mov	r5, r0
    int i;
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1d4a6:	2400      	movs	r4, #0
   1d4a8:	2c04      	cmp	r4, #4
   1d4aa:	dc19      	bgt.n	1d4e0 <sensor_network_init+0x74>
        if (memcmp(hardware_id, SENSOR_NODE_HW_IDS[i], HARDWARE_ID_LENGTH) == 0) {
   1d4ac:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1d4b0:	0093      	lsls	r3, r2, #2
   1d4b2:	220c      	movs	r2, #12
   1d4b4:	4916      	ldr	r1, [pc, #88]	; (1d510 <sensor_network_init+0xa4>)
   1d4b6:	4419      	add	r1, r3
   1d4b8:	4628      	mov	r0, r5
   1d4ba:	f7fe fd6f 	bl	1bf9c <memcmp>
   1d4be:	b108      	cbz	r0, 1d4c4 <sensor_network_init+0x58>
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1d4c0:	3401      	adds	r4, #1
   1d4c2:	e7f1      	b.n	1d4a8 <sensor_network_init+0x3c>
            sensor_node_address = sensor_node_addresses[i];
   1d4c4:	4b0f      	ldr	r3, [pc, #60]	; (1d504 <sensor_network_init+0x98>)
   1d4c6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1d4ca:	e9d3 0100 	ldrd	r0, r1, [r3]
   1d4ce:	4b11      	ldr	r3, [pc, #68]	; (1d514 <sensor_network_init+0xa8>)
   1d4d0:	e9c3 0100 	strd	r0, r1, [r3]
            console_printf("%ssensor%s#%d\n", _net, _node, i + 1);
   1d4d4:	1c63      	adds	r3, r4, #1
   1d4d6:	4a10      	ldr	r2, [pc, #64]	; (1d518 <sensor_network_init+0xac>)
   1d4d8:	4910      	ldr	r1, [pc, #64]	; (1d51c <sensor_network_init+0xb0>)
   1d4da:	4811      	ldr	r0, [pc, #68]	; (1d520 <sensor_network_init+0xb4>)
   1d4dc:	f7fc fac4 	bl	19a68 <console_printf>
            break;
        }
    }
    //  Display the type of node.
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1d4e0:	f7ff ffa8 	bl	1d434 <is_collector_node>
   1d4e4:	b940      	cbnz	r0, 1d4f8 <sensor_network_init+0x8c>
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
   1d4e6:	f7ff ffb3 	bl	1d450 <is_standalone_node>
   1d4ea:	b150      	cbz	r0, 1d502 <sensor_network_init+0x96>
   1d4ec:	4a0a      	ldr	r2, [pc, #40]	; (1d518 <sensor_network_init+0xac>)
   1d4ee:	490b      	ldr	r1, [pc, #44]	; (1d51c <sensor_network_init+0xb0>)
   1d4f0:	480c      	ldr	r0, [pc, #48]	; (1d524 <sensor_network_init+0xb8>)
   1d4f2:	f7fc fab9 	bl	19a68 <console_printf>
}
   1d4f6:	e004      	b.n	1d502 <sensor_network_init+0x96>
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1d4f8:	4a07      	ldr	r2, [pc, #28]	; (1d518 <sensor_network_init+0xac>)
   1d4fa:	4908      	ldr	r1, [pc, #32]	; (1d51c <sensor_network_init+0xb0>)
   1d4fc:	480a      	ldr	r0, [pc, #40]	; (1d528 <sensor_network_init+0xbc>)
   1d4fe:	f7fc fab3 	bl	19a68 <console_printf>
}
   1d502:	bd38      	pop	{r3, r4, r5, pc}
   1d504:	000227d0 	.word	0x000227d0
   1d508:	00022778 	.word	0x00022778
   1d50c:	20000130 	.word	0x20000130
   1d510:	00022734 	.word	0x00022734
   1d514:	2000daa0 	.word	0x2000daa0
   1d518:	00022780 	.word	0x00022780
   1d51c:	000227b8 	.word	0x000227b8
   1d520:	00022788 	.word	0x00022788
   1d524:	000227a8 	.word	0x000227a8
   1d528:	00022798 	.word	0x00022798

0001d52c <config_device>:

///////////////////////////////////////////////////////////////////////////////
//  Generic Device Creator Code based on repos\apache-mynewt-core\hw\sensor\creator\src\sensor_creator.c

//  Device configuration
static int config_device(void) {
   1d52c:	b530      	push	{r4, r5, lr}
   1d52e:	b083      	sub	sp, #12
    int rc;
    struct os_dev *dev;
    struct DEVICE_CFG cfg;

    //  Fetch the device.
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
   1d530:	2200      	movs	r2, #0
   1d532:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d536:	4810      	ldr	r0, [pc, #64]	; (1d578 <config_device+0x4c>)
   1d538:	f7fd fc2c 	bl	1ad94 <os_dev_open>
    assert(dev != NULL);
   1d53c:	b178      	cbz	r0, 1d55e <config_device+0x32>
   1d53e:	4604      	mov	r4, r0

    //  Get the default config for the device.
    rc = DEVICE_CFG_DEFAULT(&cfg);
   1d540:	4668      	mov	r0, sp
   1d542:	f000 f86c 	bl	1d61e <temp_stub_default_cfg>
    assert(rc == 0);
   1d546:	b980      	cbnz	r0, 1d56a <config_device+0x3e>

    //  Apply the device config.
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
   1d548:	4669      	mov	r1, sp
   1d54a:	4620      	mov	r0, r4
   1d54c:	f000 f900 	bl	1d750 <temp_stub_config>
   1d550:	4605      	mov	r5, r0
    os_dev_close(dev);
   1d552:	4620      	mov	r0, r4
   1d554:	f7fd fc40 	bl	1add8 <os_dev_close>
    return rc;
}
   1d558:	4628      	mov	r0, r5
   1d55a:	b003      	add	sp, #12
   1d55c:	bd30      	pop	{r4, r5, pc}
    assert(dev != NULL);
   1d55e:	2300      	movs	r3, #0
   1d560:	461a      	mov	r2, r3
   1d562:	4619      	mov	r1, r3
   1d564:	4618      	mov	r0, r3
   1d566:	f7fd f947 	bl	1a7f8 <__assert_func>
    assert(rc == 0);
   1d56a:	2300      	movs	r3, #0
   1d56c:	461a      	mov	r2, r3
   1d56e:	4619      	mov	r1, r3
   1d570:	4618      	mov	r0, r3
   1d572:	f7fd f941 	bl	1a7f8 <__assert_func>
   1d576:	bf00      	nop
   1d578:	000227f8 	.word	0x000227f8

0001d57c <temp_stub_create>:

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
   1d57c:	b510      	push	{r4, lr}
   1d57e:	b082      	sub	sp, #8
    console_printf("TMP create %s\n", DEVICE_NAME);
   1d580:	4c10      	ldr	r4, [pc, #64]	; (1d5c4 <temp_stub_create+0x48>)
   1d582:	4621      	mov	r1, r4
   1d584:	4810      	ldr	r0, [pc, #64]	; (1d5c8 <temp_stub_create+0x4c>)
   1d586:	f7fc fa6f 	bl	19a68 <console_printf>

    //  Create the device.
    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
   1d58a:	4b10      	ldr	r3, [pc, #64]	; (1d5cc <temp_stub_create+0x50>)
   1d58c:	9301      	str	r3, [sp, #4]
   1d58e:	4b10      	ldr	r3, [pc, #64]	; (1d5d0 <temp_stub_create+0x54>)
   1d590:	9300      	str	r3, [sp, #0]
   1d592:	2300      	movs	r3, #0
   1d594:	2201      	movs	r2, #1
   1d596:	4621      	mov	r1, r4
   1d598:	480e      	ldr	r0, [pc, #56]	; (1d5d4 <temp_stub_create+0x58>)
   1d59a:	f7fd fbb5 	bl	1ad08 <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0, 
        DEVICE_INIT, (void *) &DEVICE_ITF);
    assert(rc == 0);
   1d59e:	b920      	cbnz	r0, 1d5aa <temp_stub_create+0x2e>

    //  Configure the device.
    rc = config_device();
   1d5a0:	f7ff ffc4 	bl	1d52c <config_device>
    assert(rc == 0);
   1d5a4:	b938      	cbnz	r0, 1d5b6 <temp_stub_create+0x3a>
}
   1d5a6:	b002      	add	sp, #8
   1d5a8:	bd10      	pop	{r4, pc}
    assert(rc == 0);
   1d5aa:	2300      	movs	r3, #0
   1d5ac:	461a      	mov	r2, r3
   1d5ae:	4619      	mov	r1, r3
   1d5b0:	4618      	mov	r0, r3
   1d5b2:	f7fd f921 	bl	1a7f8 <__assert_func>
    assert(rc == 0);
   1d5b6:	2300      	movs	r3, #0
   1d5b8:	461a      	mov	r2, r3
   1d5ba:	4619      	mov	r1, r3
   1d5bc:	4618      	mov	r0, r3
   1d5be:	f7fd f91b 	bl	1a7f8 <__assert_func>
   1d5c2:	bf00      	nop
   1d5c4:	000227f8 	.word	0x000227f8
   1d5c8:	00022804 	.word	0x00022804
   1d5cc:	2000dae0 	.word	0x2000dae0
   1d5d0:	0001d62d 	.word	0x0001d62d
   1d5d4:	2000daf8 	.word	0x2000daf8

0001d5d8 <temp_stub_close>:
}

static int temp_stub_close(struct os_dev *dev0) {
    //  Close the sensor.  Return 0 if successful.
    return 0;
}
   1d5d8:	2000      	movs	r0, #0
   1d5da:	4770      	bx	lr

0001d5dc <temp_stub_sensor_get_config>:

static int temp_stub_sensor_get_config(struct sensor *sensor, sensor_type_t type,
    struct sensor_cfg *cfg) {
    //  Return the type of the sensor value returned by the sensor.
    int rc;
    if (!(type & TEMP_SENSOR_TYPE)) {
   1d5dc:	f002 6080 	and.w	r0, r2, #67108864	; 0x4000000
   1d5e0:	2100      	movs	r1, #0
   1d5e2:	ea50 0301 	orrs.w	r3, r0, r1
   1d5e6:	d004      	beq.n	1d5f2 <temp_stub_sensor_get_config+0x16>
        rc = SYS_EINVAL;
        goto err;
    }
    cfg->sc_valtype = TEMP_SENSOR_VALUE_TYPE;  //  We return float (computed values) or int (raw values).
   1d5e8:	9b00      	ldr	r3, [sp, #0]
   1d5ea:	2201      	movs	r2, #1
   1d5ec:	701a      	strb	r2, [r3, #0]
    return (0);
   1d5ee:	2000      	movs	r0, #0
   1d5f0:	4770      	bx	lr
err:
    return (rc);
   1d5f2:	f06f 0001 	mvn.w	r0, #1
}
   1d5f6:	4770      	bx	lr

0001d5f8 <temp_stub_open>:
static int temp_stub_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
   1d5f8:	b508      	push	{r3, lr}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1d5fa:	b120      	cbz	r0, 1d606 <temp_stub_open+0xe>
    cfg = &dev->cfg; assert(cfg);
   1d5fc:	f110 0fb0 	cmn.w	r0, #176	; 0xb0
   1d600:	d007      	beq.n	1d612 <temp_stub_open+0x1a>
}
   1d602:	2000      	movs	r0, #0
   1d604:	bd08      	pop	{r3, pc}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1d606:	2300      	movs	r3, #0
   1d608:	461a      	mov	r2, r3
   1d60a:	4619      	mov	r1, r3
   1d60c:	4618      	mov	r0, r3
   1d60e:	f7fd f8f3 	bl	1a7f8 <__assert_func>
    cfg = &dev->cfg; assert(cfg);
   1d612:	2300      	movs	r3, #0
   1d614:	461a      	mov	r2, r3
   1d616:	4619      	mov	r1, r3
   1d618:	4618      	mov	r0, r3
   1d61a:	f7fd f8ed 	bl	1a7f8 <__assert_func>

0001d61e <temp_stub_default_cfg>:
    cfg->bc_s_mask       = SENSOR_TYPE_ALL;         //  Return all sensor values, i.e. temperature.
   1d61e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d622:	2300      	movs	r3, #0
   1d624:	e9c0 2300 	strd	r2, r3, [r0]
}
   1d628:	2000      	movs	r0, #0
   1d62a:	4770      	bx	lr

0001d62c <temp_stub_init>:
int temp_stub_init(struct os_dev *dev0, void *arg) {
   1d62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1d62e:	b379      	cbz	r1, 1d690 <temp_stub_init+0x64>
   1d630:	460d      	mov	r5, r1
   1d632:	b380      	cbz	r0, 1d696 <temp_stub_init+0x6a>
   1d634:	4604      	mov	r4, r0
    rc = temp_stub_default_cfg(&dev->cfg);
   1d636:	30b0      	adds	r0, #176	; 0xb0
   1d638:	f7ff fff1 	bl	1d61e <temp_stub_default_cfg>
    if (rc) { goto err; }
   1d63c:	4603      	mov	r3, r0
   1d63e:	b108      	cbz	r0, 1d644 <temp_stub_init+0x18>
}
   1d640:	4618      	mov	r0, r3
   1d642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sensor = &dev->sensor;
   1d644:	f104 0628 	add.w	r6, r4, #40	; 0x28
    rc = sensor_init(sensor, dev0);
   1d648:	4621      	mov	r1, r4
   1d64a:	4630      	mov	r0, r6
   1d64c:	f7ff fddd 	bl	1d20a <sensor_init>
    if (rc != 0) { goto err; }
   1d650:	4603      	mov	r3, r0
   1d652:	2800      	cmp	r0, #0
   1d654:	d1f4      	bne.n	1d640 <temp_stub_init+0x14>
 */
static inline int
sensor_set_driver(struct sensor *sensor, sensor_type_t type,
        struct sensor_driver *driver)
{
    sensor->s_funcs = driver;
   1d656:	4b11      	ldr	r3, [pc, #68]	; (1d69c <temp_stub_init+0x70>)
   1d658:	6523      	str	r3, [r4, #80]	; 0x50
    sensor->s_types = type;
   1d65a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1d65e:	2300      	movs	r3, #0
   1d660:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 * @param s_itf The interface type to set
 */
static inline int
sensor_set_interface(struct sensor *sensor, struct sensor_itf *s_itf)
{
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
   1d664:	682a      	ldr	r2, [r5, #0]
   1d666:	686f      	ldr	r7, [r5, #4]
   1d668:	68a8      	ldr	r0, [r5, #8]
   1d66a:	68e9      	ldr	r1, [r5, #12]
   1d66c:	6722      	str	r2, [r4, #112]	; 0x70
   1d66e:	6767      	str	r7, [r4, #116]	; 0x74
   1d670:	67a0      	str	r0, [r4, #120]	; 0x78
   1d672:	67e1      	str	r1, [r4, #124]	; 0x7c
   1d674:	692a      	ldr	r2, [r5, #16]
   1d676:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    rc = sensor_mgr_register(sensor);
   1d67a:	4630      	mov	r0, r6
   1d67c:	f7ff fdae 	bl	1d1dc <sensor_mgr_register>
    if (rc != 0) { goto err; }
   1d680:	4603      	mov	r3, r0
   1d682:	2800      	cmp	r0, #0
   1d684:	d1dc      	bne.n	1d640 <temp_stub_init+0x14>
    OS_DEV_SETHANDLERS(dev0, temp_stub_open, temp_stub_close);
   1d686:	4a06      	ldr	r2, [pc, #24]	; (1d6a0 <temp_stub_init+0x74>)
   1d688:	6022      	str	r2, [r4, #0]
   1d68a:	4a06      	ldr	r2, [pc, #24]	; (1d6a4 <temp_stub_init+0x78>)
   1d68c:	60e2      	str	r2, [r4, #12]
    return (0);
   1d68e:	e7d7      	b.n	1d640 <temp_stub_init+0x14>
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1d690:	f06f 0308 	mvn.w	r3, #8
   1d694:	e7d4      	b.n	1d640 <temp_stub_init+0x14>
   1d696:	f06f 0308 	mvn.w	r3, #8
   1d69a:	e7d1      	b.n	1d640 <temp_stub_init+0x14>
   1d69c:	00022814 	.word	0x00022814
   1d6a0:	0001d5f9 	.word	0x0001d5f9
   1d6a4:	0001d5d9 	.word	0x0001d5d9

0001d6a8 <temp_stub_get_raw_temperature>:
int temp_stub_get_raw_temperature(struct temp_stub *dev, int num_readings, int *temp_sum, uint8_t *temp_diff) {
   1d6a8:	b538      	push	{r3, r4, r5, lr}
   1d6aa:	460d      	mov	r5, r1
   1d6ac:	4614      	mov	r4, r2
    console_printf("STB read temp sensor\n");  ////
   1d6ae:	4808      	ldr	r0, [pc, #32]	; (1d6d0 <temp_stub_get_raw_temperature+0x28>)
   1d6b0:	f7fc f9da 	bl	19a68 <console_printf>
    assert(temp_sum);
   1d6b4:	b134      	cbz	r4, 1d6c4 <temp_stub_get_raw_temperature+0x1c>
    *temp_sum = 1757 * num_readings;
   1d6b6:	f240 61dd 	movw	r1, #1757	; 0x6dd
   1d6ba:	fb01 f105 	mul.w	r1, r1, r5
   1d6be:	6021      	str	r1, [r4, #0]
}
   1d6c0:	2000      	movs	r0, #0
   1d6c2:	bd38      	pop	{r3, r4, r5, pc}
    assert(temp_sum);
   1d6c4:	2300      	movs	r3, #0
   1d6c6:	461a      	mov	r2, r3
   1d6c8:	4619      	mov	r1, r3
   1d6ca:	4618      	mov	r0, r3
   1d6cc:	f7fd f894 	bl	1a7f8 <__assert_func>
   1d6d0:	0002283c 	.word	0x0002283c

0001d6d4 <temp_stub_sensor_read>:
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
   1d6d4:	b530      	push	{r4, r5, lr}
   1d6d6:	b087      	sub	sp, #28
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1d6d8:	f002 6480 	and.w	r4, r2, #67108864	; 0x4000000
   1d6dc:	2500      	movs	r5, #0
   1d6de:	ea54 0305 	orrs.w	r3, r4, r5
   1d6e2:	d032      	beq.n	1d74a <temp_stub_sensor_read+0x76>
   1d6e4:	4604      	mov	r4, r0
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1d6e6:	6805      	ldr	r5, [r0, #0]
   1d6e8:	b165      	cbz	r5, 1d704 <temp_stub_sensor_read+0x30>
    rawtemp = -1;
   1d6ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d6ee:	9303      	str	r3, [sp, #12]
        rc = temp_stub_open((struct os_dev *) dev, 0, NULL);
   1d6f0:	2200      	movs	r2, #0
   1d6f2:	4611      	mov	r1, r2
   1d6f4:	4628      	mov	r0, r5
   1d6f6:	f7ff ff7f 	bl	1d5f8 <temp_stub_open>
        if (rc) { goto err; }
   1d6fa:	4603      	mov	r3, r0
   1d6fc:	b140      	cbz	r0, 1d710 <temp_stub_sensor_read+0x3c>
}
   1d6fe:	4618      	mov	r0, r3
   1d700:	b007      	add	sp, #28
   1d702:	bd30      	pop	{r4, r5, pc}
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1d704:	2300      	movs	r3, #0
   1d706:	461a      	mov	r2, r3
   1d708:	4619      	mov	r1, r3
   1d70a:	4618      	mov	r0, r3
   1d70c:	f7fd f874 	bl	1a7f8 <__assert_func>
        rc = temp_stub_get_raw_temperature(dev, 1, &rawtemp, NULL);
   1d710:	2300      	movs	r3, #0
   1d712:	aa03      	add	r2, sp, #12
   1d714:	2101      	movs	r1, #1
   1d716:	4628      	mov	r0, r5
   1d718:	f7ff ffc6 	bl	1d6a8 <temp_stub_get_raw_temperature>
    if (rc) { goto err; }  //  console_printf("rawtemp: %d\n", rawtemp);  ////
   1d71c:	4603      	mov	r3, r0
   1d71e:	2800      	cmp	r0, #0
   1d720:	d1ed      	bne.n	1d6fe <temp_stub_sensor_read+0x2a>
    temp_data->strd_temp_raw = rawtemp;  //  rawtemp must be between 0 and 4,095 (based on 12-bit ADC)
   1d722:	9a03      	ldr	r2, [sp, #12]
   1d724:	9204      	str	r2, [sp, #16]
    temp_data->strd_temp_raw_is_valid = 1;
   1d726:	2201      	movs	r2, #1
   1d728:	f88d 2014 	strb.w	r2, [sp, #20]
    if (data_func) {  //  Call the Listener Function to process the sensor data.
   1d72c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1d72e:	2a00      	cmp	r2, #0
   1d730:	d0e5      	beq.n	1d6fe <temp_stub_sensor_read+0x2a>
        rc = data_func(sensor, data_arg, temp_data, TEMP_SENSOR_TYPE);
   1d732:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1d736:	2300      	movs	r3, #0
   1d738:	e9cd 2300 	strd	r2, r3, [sp]
   1d73c:	aa04      	add	r2, sp, #16
   1d73e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1d740:	4620      	mov	r0, r4
   1d742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d744:	4798      	blx	r3
   1d746:	4603      	mov	r3, r0
   1d748:	e7d9      	b.n	1d6fe <temp_stub_sensor_read+0x2a>
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1d74a:	f06f 0301 	mvn.w	r3, #1
   1d74e:	e7d6      	b.n	1d6fe <temp_stub_sensor_read+0x2a>

0001d750 <temp_stub_config>:
 * @param Sensor device temp_stub structure
 * @param Sensor device temp_stub_cfg config
 *
 * @return 0 on success, and non-zero error code on failure
 */
int temp_stub_config(struct temp_stub *dev, struct temp_stub_cfg *cfg) {
   1d750:	b508      	push	{r3, lr}
    struct sensor_itf *itf;
    int rc;
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1d752:	f110 0f70 	cmn.w	r0, #112	; 0x70
   1d756:	d009      	beq.n	1d76c <temp_stub_config+0x1c>
    rc = sensor_set_type_mask(&(dev->sensor),  cfg->bc_s_mask);
   1d758:	e9d1 2300 	ldrd	r2, r3, [r1]
    sensor->s_mask = mask;
   1d75c:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    if (rc) { goto err; }

    dev->cfg.bc_s_mask = cfg->bc_s_mask;
   1d760:	e9d1 2300 	ldrd	r2, r3, [r1]
   1d764:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
    return 0;
err:
    return (rc);
}
   1d768:	2000      	movs	r0, #0
   1d76a:	bd08      	pop	{r3, pc}
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1d76c:	2300      	movs	r3, #0
   1d76e:	461a      	mov	r2, r3
   1d770:	4619      	mov	r1, r3
   1d772:	4618      	mov	r0, r3
   1d774:	f7fd f840 	bl	1a7f8 <__assert_func>

0001d778 <oc_buffer_tx>:
    assert(rc == 0);
}

static void
oc_buffer_tx(struct os_event *ev)
{
   1d778:	b508      	push	{r3, lr}
    struct os_mbuf *m;

    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1d77a:	e002      	b.n	1d782 <oc_buffer_tx+0xa>
                                    oc_events[RI_TO_DTLS_EVENT], m);
                }
            } else
#endif
            {
                oc_send_buffer(m);
   1d77c:	4618      	mov	r0, r3
   1d77e:	f000 f85b 	bl	1d838 <oc_send_buffer>
    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1d782:	4808      	ldr	r0, [pc, #32]	; (1d7a4 <oc_buffer_tx+0x2c>)
   1d784:	f7fd fc03 	bl	1af8e <os_mqueue_get>
   1d788:	4603      	mov	r3, r0
   1d78a:	b148      	cbz	r0, 1d7a0 <oc_buffer_tx+0x28>
        STAILQ_NEXT(OS_MBUF_PKTHDR(m), omp_next) = NULL;
   1d78c:	2200      	movs	r2, #0
   1d78e:	615a      	str	r2, [r3, #20]
        if (OC_MBUF_ENDPOINT(m)->ep.oe_flags & OC_ENDPOINT_MULTICAST) {
   1d790:	7e1a      	ldrb	r2, [r3, #24]
   1d792:	f012 0f08 	tst.w	r2, #8
   1d796:	d0f1      	beq.n	1d77c <oc_buffer_tx+0x4>
            oc_send_multicast_message(m);
   1d798:	4618      	mov	r0, r3
   1d79a:	f000 f85d 	bl	1d858 <oc_send_multicast_message>
   1d79e:	e7f0      	b.n	1d782 <oc_buffer_tx+0xa>
            }
#ifdef OC_CLIENT
        }
#endif
    }
}
   1d7a0:	bd08      	pop	{r3, pc}
   1d7a2:	bf00      	nop
   1d7a4:	2000dbd0 	.word	0x2000dbd0

0001d7a8 <oc_buffer_rx>:

static void
oc_buffer_rx(struct os_event *ev)
{
   1d7a8:	b500      	push	{lr}
   1d7aa:	b083      	sub	sp, #12
    struct os_mbuf *m;
#if defined(OC_SECURITY)
    uint8_t b;
#endif

    while ((m = os_mqueue_get(&oc_inq)) != NULL) {
   1d7ac:	4808      	ldr	r0, [pc, #32]	; (1d7d0 <oc_buffer_rx+0x28>)
   1d7ae:	f7fd fbee 	bl	1af8e <os_mqueue_get>
   1d7b2:	9001      	str	r0, [sp, #4]
   1d7b4:	b140      	cbz	r0, 1d7c8 <oc_buffer_rx+0x20>
            oc_process_post(&oc_dtls_handler, oc_events[UDP_TO_DTLS_EVENT], m);
        } else {
            coap_receive(m);
        }
#else
        coap_receive(&m);
   1d7b6:	a801      	add	r0, sp, #4
   1d7b8:	f000 faa2 	bl	1dd00 <__wrap_coap_receive>
#endif
        if (m) {
   1d7bc:	9801      	ldr	r0, [sp, #4]
   1d7be:	2800      	cmp	r0, #0
   1d7c0:	d0f4      	beq.n	1d7ac <oc_buffer_rx+0x4>
            os_mbuf_free_chain(m);
   1d7c2:	f7fd fc59 	bl	1b078 <os_mbuf_free_chain>
   1d7c6:	e7f1      	b.n	1d7ac <oc_buffer_rx+0x4>
        }
    }
}
   1d7c8:	b003      	add	sp, #12
   1d7ca:	f85d fb04 	ldr.w	pc, [sp], #4
   1d7ce:	bf00      	nop
   1d7d0:	2000dbb8 	.word	0x2000dbb8

0001d7d4 <oc_buffer_init>:

void
oc_buffer_init(void)
{
   1d7d4:	b508      	push	{r3, lr}
    os_mqueue_init(&oc_inq, oc_buffer_rx, NULL);
   1d7d6:	2200      	movs	r2, #0
   1d7d8:	4904      	ldr	r1, [pc, #16]	; (1d7ec <oc_buffer_init+0x18>)
   1d7da:	4805      	ldr	r0, [pc, #20]	; (1d7f0 <oc_buffer_init+0x1c>)
   1d7dc:	f7fd fbce 	bl	1af7c <os_mqueue_init>
    os_mqueue_init(&oc_outq, oc_buffer_tx, NULL);
   1d7e0:	2200      	movs	r2, #0
   1d7e2:	4904      	ldr	r1, [pc, #16]	; (1d7f4 <oc_buffer_init+0x20>)
   1d7e4:	4804      	ldr	r0, [pc, #16]	; (1d7f8 <oc_buffer_init+0x24>)
   1d7e6:	f7fd fbc9 	bl	1af7c <os_mqueue_init>
}
   1d7ea:	bd08      	pop	{r3, pc}
   1d7ec:	0001d7a9 	.word	0x0001d7a9
   1d7f0:	2000dbb8 	.word	0x2000dbb8
   1d7f4:	0001d779 	.word	0x0001d779
   1d7f8:	2000dbd0 	.word	0x2000dbd0

0001d7fc <oc_ri_mem_init>:
}
#endif

void
oc_ri_mem_init(void)
{
   1d7fc:	b500      	push	{lr}
   1d7fe:	b083      	sub	sp, #12
#ifdef OC_SERVER
  os_mempool_init(&oc_resource_pool, MAX_APP_RESOURCES, sizeof(oc_resource_t),
                  oc_resource_area, "oc_res");
#endif
#ifdef OC_CLIENT
    os_mempool_init(&oc_client_cb_pool, MAX_NUM_CONCURRENT_REQUESTS,
   1d800:	4b07      	ldr	r3, [pc, #28]	; (1d820 <oc_ri_mem_init+0x24>)
   1d802:	9300      	str	r3, [sp, #0]
   1d804:	4b07      	ldr	r3, [pc, #28]	; (1d824 <oc_ri_mem_init+0x28>)
   1d806:	2264      	movs	r2, #100	; 0x64
   1d808:	2102      	movs	r1, #2
   1d80a:	4807      	ldr	r0, [pc, #28]	; (1d828 <oc_ri_mem_init+0x2c>)
   1d80c:	f7fd fd3c 	bl	1b288 <os_mempool_init>
      sizeof(oc_client_cb_t), oc_client_cb_area, "oc_cl_cbs");
    oc_rep_init();
   1d810:	f000 f860 	bl	1d8d4 <oc_rep_init>
#endif
    oc_buffer_init();
   1d814:	f7ff ffde 	bl	1d7d4 <oc_buffer_init>
}
   1d818:	b003      	add	sp, #12
   1d81a:	f85d fb04 	ldr.w	pc, [sp], #4
   1d81e:	bf00      	nop
   1d820:	00022854 	.word	0x00022854
   1d824:	2000dbe8 	.word	0x2000dbe8
   1d828:	2000dcb0 	.word	0x2000dcb0

0001d82c <oc_evq_set>:
}

void
oc_evq_set(struct os_eventq *evq)
{
    oc_evq = evq;
   1d82c:	4b01      	ldr	r3, [pc, #4]	; (1d834 <oc_evq_set+0x8>)
   1d82e:	6018      	str	r0, [r3, #0]
}
   1d830:	4770      	bx	lr
   1d832:	bf00      	nop
   1d834:	2000dccc 	.word	0x2000dccc

0001d838 <oc_send_buffer>:
    }
}

void
oc_send_buffer(struct os_mbuf *m)
{
   1d838:	b508      	push	{r3, lr}
    struct oc_endpoint *oe;
    const struct oc_transport *ot;

    oe = OC_MBUF_ENDPOINT(m);

    ot = oc_transports[oe->ep.oe_type];
   1d83a:	7e03      	ldrb	r3, [r0, #24]
   1d83c:	f003 0307 	and.w	r3, r3, #7
   1d840:	4a04      	ldr	r2, [pc, #16]	; (1d854 <oc_send_buffer+0x1c>)
   1d842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (ot) {
   1d846:	b113      	cbz	r3, 1d84e <oc_send_buffer+0x16>
        ot->ot_tx_ucast(m);
   1d848:	68db      	ldr	r3, [r3, #12]
   1d84a:	4798      	blx	r3
    } else {
        OC_LOG(ERROR, "Unknown transport option %u\n", oe->ep.oe_type);
        os_mbuf_free_chain(m);
    }
}
   1d84c:	bd08      	pop	{r3, pc}
        os_mbuf_free_chain(m);
   1d84e:	f7fd fc13 	bl	1b078 <os_mbuf_free_chain>
}
   1d852:	e7fb      	b.n	1d84c <oc_send_buffer+0x14>
   1d854:	2000df60 	.word	0x2000df60

0001d858 <oc_send_multicast_message>:
/*
 * Send on all the transports.
 */
void
oc_send_multicast_message(struct os_mbuf *m)
{
   1d858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d85c:	4607      	mov	r7, r0
    const struct oc_transport *ot;
    const struct oc_transport *prev = NULL;
    struct os_mbuf *n;
    int i;

    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1d85e:	2400      	movs	r4, #0
    const struct oc_transport *prev = NULL;
   1d860:	4626      	mov	r6, r4
    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1d862:	e002      	b.n	1d86a <oc_send_multicast_message+0x12>
   1d864:	4635      	mov	r5, r6
   1d866:	3401      	adds	r4, #1
   1d868:	462e      	mov	r6, r5
   1d86a:	2c07      	cmp	r4, #7
   1d86c:	dc12      	bgt.n	1d894 <oc_send_multicast_message+0x3c>
        if (!oc_transports[i]) {
   1d86e:	4b0c      	ldr	r3, [pc, #48]	; (1d8a0 <oc_send_multicast_message+0x48>)
   1d870:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   1d874:	2d00      	cmp	r5, #0
   1d876:	d0f5      	beq.n	1d864 <oc_send_multicast_message+0xc>
            continue;
        }

        ot = oc_transports[i];
        if (prev) {
   1d878:	2e00      	cmp	r6, #0
   1d87a:	d0f4      	beq.n	1d866 <oc_send_multicast_message+0xe>
            n = os_mbuf_dup(m);
   1d87c:	4638      	mov	r0, r7
   1d87e:	f7fd fc6b 	bl	1b158 <os_mbuf_dup>
   1d882:	4680      	mov	r8, r0
            prev->ot_tx_mcast(m);
   1d884:	6933      	ldr	r3, [r6, #16]
   1d886:	4638      	mov	r0, r7
   1d888:	4798      	blx	r3
            if (!n) {
   1d88a:	f1b8 0f00 	cmp.w	r8, #0
   1d88e:	d005      	beq.n	1d89c <oc_send_multicast_message+0x44>
                return;
            }
            m = n;
   1d890:	4647      	mov	r7, r8
   1d892:	e7e8      	b.n	1d866 <oc_send_multicast_message+0xe>
        }
        prev = ot;
    }
    if (prev) {
   1d894:	b116      	cbz	r6, 1d89c <oc_send_multicast_message+0x44>
        prev->ot_tx_mcast(m);
   1d896:	6933      	ldr	r3, [r6, #16]
   1d898:	4638      	mov	r0, r7
   1d89a:	4798      	blx	r3
    }
}
   1d89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d8a0:	2000df60 	.word	0x2000df60

0001d8a4 <oc_init>:
    return rc;
}

void
oc_init(void)
{
   1d8a4:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
   1d8a6:	4b07      	ldr	r3, [pc, #28]	; (1d8c4 <oc_init+0x20>)
   1d8a8:	781b      	ldrb	r3, [r3, #0]
   1d8aa:	b133      	cbz	r3, 1d8ba <oc_init+0x16>
    oc_ri_mem_init();
   1d8ac:	f7ff ffa6 	bl	1d7fc <oc_ri_mem_init>
    oc_evq_set(os_eventq_dflt_get());
   1d8b0:	f7fd fb60 	bl	1af74 <os_eventq_dflt_get>
   1d8b4:	f7ff ffba 	bl	1d82c <oc_evq_set>
}
   1d8b8:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1d8ba:	461a      	mov	r2, r3
   1d8bc:	4619      	mov	r1, r3
   1d8be:	4618      	mov	r0, r3
   1d8c0:	f7fc ff9a 	bl	1a7f8 <__assert_func>
   1d8c4:	2000ddbc 	.word	0x2000ddbc

0001d8c8 <oc_register_gatt>:
oc_register_gatt(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_GATT) == 1)
    oc_gatt_transport_id = oc_transport_register(&oc_gatt_transport);
#endif
}
   1d8c8:	4770      	bx	lr

0001d8ca <oc_register_ip4>:
oc_register_ip4(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV4) == 1)
    oc_ip4_transport_id = oc_transport_register(&oc_ip4_transport);
#endif
}
   1d8ca:	4770      	bx	lr

0001d8cc <oc_register_ip6>:
oc_register_ip6(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV6) == 1)
    oc_ip6_transport_id = oc_transport_register(&oc_ip6_transport);
#endif
}
   1d8cc:	4770      	bx	lr

0001d8ce <oc_register_lora>:
oc_register_lora(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_LORA) == 1)
    oc_lora_transport_id = oc_transport_register(&oc_lora_transport);
#endif
}
   1d8ce:	4770      	bx	lr

0001d8d0 <oc_register_serial>:
oc_register_serial(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_SERIAL) == 1)
    oc_serial_transport_id = oc_transport_register(&oc_serial_transport);
#endif
}
   1d8d0:	4770      	bx	lr
	...

0001d8d4 <oc_rep_init>:
  return (uint16_t)err;
}

void
oc_rep_init(void)
{
   1d8d4:	b500      	push	{lr}
   1d8d6:	b083      	sub	sp, #12
    os_mempool_init(&oc_rep_objects, EST_NUM_REP_OBJECTS,
   1d8d8:	4b05      	ldr	r3, [pc, #20]	; (1d8f0 <oc_rep_init+0x1c>)
   1d8da:	9300      	str	r3, [sp, #0]
   1d8dc:	4b05      	ldr	r3, [pc, #20]	; (1d8f4 <oc_rep_init+0x20>)
   1d8de:	2218      	movs	r2, #24
   1d8e0:	2102      	movs	r1, #2
   1d8e2:	4805      	ldr	r0, [pc, #20]	; (1d8f8 <oc_rep_init+0x24>)
   1d8e4:	f7fd fcd0 	bl	1b288 <os_mempool_init>
                    sizeof(oc_rep_t), oc_rep_objects_area, "oc_rep_o");
}
   1d8e8:	b003      	add	sp, #12
   1d8ea:	f85d fb04 	ldr.w	pc, [sp], #4
   1d8ee:	bf00      	nop
   1d8f0:	00022860 	.word	0x00022860
   1d8f4:	2000dcec 	.word	0x2000dcec
   1d8f8:	2000dcd0 	.word	0x2000dcd0

0001d8fc <flash_map_read_mfg>:
 * @return                      0 on success; nonzero on failure.
 */
static int
flash_map_read_mfg(int max_areas,
                   struct flash_area *out_areas, int *out_num_areas)
{
   1d8fc:	b570      	push	{r4, r5, r6, lr}
   1d8fe:	b086      	sub	sp, #24
   1d900:	4605      	mov	r5, r0
   1d902:	460e      	mov	r6, r1
   1d904:	4614      	mov	r4, r2
    struct mfg_meta_flash_area meta_flash_area;
    struct mfg_reader reader;
    struct flash_area *fap;
    int rc;

    *out_num_areas = 0;
   1d906:	2300      	movs	r3, #0
   1d908:	6013      	str	r3, [r2, #0]

    /* Ensure manufacturing meta region has been located in flash. */
    mfg_init();
   1d90a:	f000 f9ad 	bl	1dc68 <mfg_init>

    mfg_open(&reader);
   1d90e:	a801      	add	r0, sp, #4
   1d910:	f000 f9c6 	bl	1dca0 <mfg_open>

    while (1) {
        if (*out_num_areas >= max_areas) {
   1d914:	6823      	ldr	r3, [r4, #0]
   1d916:	42ab      	cmp	r3, r5
   1d918:	da29      	bge.n	1d96e <flash_map_read_mfg+0x72>
            return -1;
        }

        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
   1d91a:	2102      	movs	r1, #2
   1d91c:	a801      	add	r0, sp, #4
   1d91e:	f000 f98c 	bl	1dc3a <mfg_seek_next_with_type>
   1d922:	4603      	mov	r3, r0
        switch (rc) {
   1d924:	f110 0f0f 	cmn.w	r0, #15
   1d928:	d003      	beq.n	1d932 <flash_map_read_mfg+0x36>
   1d92a:	b120      	cbz	r0, 1d936 <flash_map_read_mfg+0x3a>
        fap->fa_off = meta_flash_area.offset;
        fap->fa_size = meta_flash_area.size;

        (*out_num_areas)++;
    }
}
   1d92c:	4618      	mov	r0, r3
   1d92e:	b006      	add	sp, #24
   1d930:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
   1d932:	2300      	movs	r3, #0
   1d934:	e7fa      	b.n	1d92c <flash_map_read_mfg+0x30>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
   1d936:	a903      	add	r1, sp, #12
   1d938:	a801      	add	r0, sp, #4
   1d93a:	f000 f98b 	bl	1dc54 <mfg_read_tlv_flash_area>
        if (rc != 0) {
   1d93e:	4603      	mov	r3, r0
   1d940:	2800      	cmp	r0, #0
   1d942:	d1f3      	bne.n	1d92c <flash_map_read_mfg+0x30>
        fap = out_areas + *out_num_areas;
   1d944:	6823      	ldr	r3, [r4, #0]
   1d946:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1d94a:	009a      	lsls	r2, r3, #2
   1d94c:	18b3      	adds	r3, r6, r2
        fap->fa_id = meta_flash_area.area_id;
   1d94e:	f89d 100c 	ldrb.w	r1, [sp, #12]
   1d952:	54b1      	strb	r1, [r6, r2]
        fap->fa_device_id = meta_flash_area.device_id;
   1d954:	f89d 200d 	ldrb.w	r2, [sp, #13]
   1d958:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
   1d95a:	f8dd 200e 	ldr.w	r2, [sp, #14]
   1d95e:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
   1d960:	f8dd 2012 	ldr.w	r2, [sp, #18]
   1d964:	609a      	str	r2, [r3, #8]
        (*out_num_areas)++;
   1d966:	6823      	ldr	r3, [r4, #0]
   1d968:	3301      	adds	r3, #1
   1d96a:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
   1d96c:	e7d2      	b.n	1d914 <flash_map_read_mfg+0x18>
            return -1;
   1d96e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d972:	e7db      	b.n	1d92c <flash_map_read_mfg+0x30>

0001d974 <flash_area_open>:
{
   1d974:	b430      	push	{r4, r5}
    if (flash_map == NULL) {
   1d976:	4b0d      	ldr	r3, [pc, #52]	; (1d9ac <flash_area_open+0x38>)
   1d978:	681d      	ldr	r5, [r3, #0]
   1d97a:	b1a5      	cbz	r5, 1d9a6 <flash_area_open+0x32>
    for (i = 0; i < flash_map_entries; i++) {
   1d97c:	2300      	movs	r3, #0
   1d97e:	4a0c      	ldr	r2, [pc, #48]	; (1d9b0 <flash_area_open+0x3c>)
   1d980:	6812      	ldr	r2, [r2, #0]
   1d982:	429a      	cmp	r2, r3
   1d984:	dd0b      	ble.n	1d99e <flash_area_open+0x2a>
        area = flash_map + i;
   1d986:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   1d98a:	00a2      	lsls	r2, r4, #2
   1d98c:	18ac      	adds	r4, r5, r2
        if (area->fa_id == id) {
   1d98e:	5caa      	ldrb	r2, [r5, r2]
   1d990:	4282      	cmp	r2, r0
   1d992:	d001      	beq.n	1d998 <flash_area_open+0x24>
    for (i = 0; i < flash_map_entries; i++) {
   1d994:	3301      	adds	r3, #1
   1d996:	e7f2      	b.n	1d97e <flash_area_open+0xa>
            *fap = area;
   1d998:	600c      	str	r4, [r1, #0]
            return 0;
   1d99a:	2000      	movs	r0, #0
   1d99c:	e001      	b.n	1d9a2 <flash_area_open+0x2e>
    return SYS_ENOENT;
   1d99e:	f06f 0003 	mvn.w	r0, #3
}
   1d9a2:	bc30      	pop	{r4, r5}
   1d9a4:	4770      	bx	lr
        return SYS_EACCES;
   1d9a6:	f06f 0006 	mvn.w	r0, #6
   1d9aa:	e7fa      	b.n	1d9a2 <flash_area_open+0x2e>
   1d9ac:	2000df84 	.word	0x2000df84
   1d9b0:	2000df80 	.word	0x2000df80

0001d9b4 <flash_area_read>:
{
   1d9b4:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1d9b6:	6884      	ldr	r4, [r0, #8]
   1d9b8:	428c      	cmp	r4, r1
   1d9ba:	d308      	bcc.n	1d9ce <flash_area_read+0x1a>
   1d9bc:	18cd      	adds	r5, r1, r3
   1d9be:	42ac      	cmp	r4, r5
   1d9c0:	d308      	bcc.n	1d9d4 <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   1d9c2:	6844      	ldr	r4, [r0, #4]
   1d9c4:	4421      	add	r1, r4
   1d9c6:	7840      	ldrb	r0, [r0, #1]
   1d9c8:	f000 f9c8 	bl	1dd5c <hal_flash_read>
}
   1d9cc:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   1d9ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d9d2:	e7fb      	b.n	1d9cc <flash_area_read+0x18>
   1d9d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d9d8:	e7f8      	b.n	1d9cc <flash_area_read+0x18>
	...

0001d9dc <flash_map_init>:

void
flash_map_init(void)
{
   1d9dc:	b510      	push	{r4, lr}
   1d9de:	b084      	sub	sp, #16

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1d9e0:	4b14      	ldr	r3, [pc, #80]	; (1da34 <flash_map_init+0x58>)
   1d9e2:	781b      	ldrb	r3, [r3, #0]
   1d9e4:	b303      	cbz	r3, 1da28 <flash_map_init+0x4c>

    rc = hal_flash_init();
   1d9e6:	f000 f9a5 	bl	1dd34 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1d9ea:	b138      	cbz	r0, 1d9fc <flash_map_init+0x20>
   1d9ec:	2000      	movs	r0, #0
   1d9ee:	9000      	str	r0, [sp, #0]
   1d9f0:	4b11      	ldr	r3, [pc, #68]	; (1da38 <flash_map_init+0x5c>)
   1d9f2:	681c      	ldr	r4, [r3, #0]
   1d9f4:	4603      	mov	r3, r0
   1d9f6:	4602      	mov	r2, r0
   1d9f8:	4601      	mov	r1, r0
   1d9fa:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   1d9fc:	4b0f      	ldr	r3, [pc, #60]	; (1da3c <flash_map_init+0x60>)
   1d9fe:	4a10      	ldr	r2, [pc, #64]	; (1da40 <flash_map_init+0x64>)
   1da00:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   1da02:	4b10      	ldr	r3, [pc, #64]	; (1da44 <flash_map_init+0x68>)
   1da04:	2206      	movs	r2, #6
   1da06:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
   1da08:	aa03      	add	r2, sp, #12
   1da0a:	490f      	ldr	r1, [pc, #60]	; (1da48 <flash_map_init+0x6c>)
   1da0c:	200a      	movs	r0, #10
   1da0e:	f7ff ff75 	bl	1d8fc <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
   1da12:	b938      	cbnz	r0, 1da24 <flash_map_init+0x48>
   1da14:	9b03      	ldr	r3, [sp, #12]
   1da16:	2b00      	cmp	r3, #0
   1da18:	dd04      	ble.n	1da24 <flash_map_init+0x48>
        flash_map = mfg_areas;
   1da1a:	4a08      	ldr	r2, [pc, #32]	; (1da3c <flash_map_init+0x60>)
   1da1c:	490a      	ldr	r1, [pc, #40]	; (1da48 <flash_map_init+0x6c>)
   1da1e:	6011      	str	r1, [r2, #0]
        flash_map_entries = num_areas;
   1da20:	4a08      	ldr	r2, [pc, #32]	; (1da44 <flash_map_init+0x68>)
   1da22:	6013      	str	r3, [r2, #0]
    }
}
   1da24:	b004      	add	sp, #16
   1da26:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1da28:	461a      	mov	r2, r3
   1da2a:	4619      	mov	r1, r3
   1da2c:	4618      	mov	r0, r3
   1da2e:	f7fc fee3 	bl	1a7f8 <__assert_func>
   1da32:	bf00      	nop
   1da34:	2000ddbc 	.word	0x2000ddbc
   1da38:	20000104 	.word	0x20000104
   1da3c:	2000df84 	.word	0x2000df84
   1da40:	0002286c 	.word	0x0002286c
   1da44:	2000df80 	.word	0x2000df80
   1da48:	2000dd1c 	.word	0x2000dd1c

0001da4c <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
   1da4c:	4770      	bx	lr
	...

0001da50 <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
   1da50:	b530      	push	{r4, r5, lr}
   1da52:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
   1da54:	7885      	ldrb	r5, [r0, #2]
   1da56:	4b21      	ldr	r3, [pc, #132]	; (1dadc <mfg_seek_next_aux+0x8c>)
   1da58:	681b      	ldr	r3, [r3, #0]
   1da5a:	429d      	cmp	r5, r3
   1da5c:	da32      	bge.n	1dac4 <mfg_seek_next_aux+0x74>
   1da5e:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
   1da60:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   1da64:	0093      	lsls	r3, r2, #2
   1da66:	a901      	add	r1, sp, #4
   1da68:	4a1d      	ldr	r2, [pc, #116]	; (1dae0 <mfg_seek_next_aux+0x90>)
   1da6a:	5cd0      	ldrb	r0, [r2, r3]
   1da6c:	f7ff ff82 	bl	1d974 <flash_area_open>
    if (rc != 0) {
   1da70:	bb58      	cbnz	r0, 1daca <mfg_seek_next_aux+0x7a>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
   1da72:	6862      	ldr	r2, [r4, #4]
   1da74:	b9c2      	cbnz	r2, 1daa8 <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
   1da76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1da7a:	00aa      	lsls	r2, r5, #2
   1da7c:	4b18      	ldr	r3, [pc, #96]	; (1dae0 <mfg_seek_next_aux+0x90>)
   1da7e:	4413      	add	r3, r2
   1da80:	685b      	ldr	r3, [r3, #4]
   1da82:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
   1da84:	6861      	ldr	r1, [r4, #4]
   1da86:	9801      	ldr	r0, [sp, #4]
   1da88:	6883      	ldr	r3, [r0, #8]
   1da8a:	3b08      	subs	r3, #8
   1da8c:	4299      	cmp	r1, r3
   1da8e:	d310      	bcc.n	1dab2 <mfg_seek_next_aux+0x62>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
   1da90:	78a3      	ldrb	r3, [r4, #2]
   1da92:	1c59      	adds	r1, r3, #1
   1da94:	4a11      	ldr	r2, [pc, #68]	; (1dadc <mfg_seek_next_aux+0x8c>)
   1da96:	6812      	ldr	r2, [r2, #0]
   1da98:	4291      	cmp	r1, r2
   1da9a:	da19      	bge.n	1dad0 <mfg_seek_next_aux+0x80>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
   1da9c:	2200      	movs	r2, #0
   1da9e:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
   1daa0:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
   1daa2:	f06f 0305 	mvn.w	r3, #5
   1daa6:	e015      	b.n	1dad4 <mfg_seek_next_aux+0x84>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
   1daa8:	7863      	ldrb	r3, [r4, #1]
   1daaa:	4413      	add	r3, r2
   1daac:	3302      	adds	r3, #2
   1daae:	6063      	str	r3, [r4, #4]
   1dab0:	e7e8      	b.n	1da84 <mfg_seek_next_aux+0x34>
        }
        goto done;
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
   1dab2:	2302      	movs	r3, #2
   1dab4:	4622      	mov	r2, r4
   1dab6:	f7ff ff7d 	bl	1d9b4 <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
   1daba:	4603      	mov	r3, r0
   1dabc:	b150      	cbz	r0, 1dad4 <mfg_seek_next_aux+0x84>
        rc = SYS_EIO;
   1dabe:	f06f 0304 	mvn.w	r3, #4
   1dac2:	e007      	b.n	1dad4 <mfg_seek_next_aux+0x84>
        return SYS_EINVAL;
   1dac4:	f06f 0301 	mvn.w	r3, #1
   1dac8:	e004      	b.n	1dad4 <mfg_seek_next_aux+0x84>
        return SYS_EIO;
   1daca:	f06f 0304 	mvn.w	r3, #4
   1dace:	e001      	b.n	1dad4 <mfg_seek_next_aux+0x84>
            rc = SYS_EDONE;
   1dad0:	f06f 030e 	mvn.w	r3, #14
    }

done:
    flash_area_close(fap);
    return rc;
}
   1dad4:	4618      	mov	r0, r3
   1dad6:	b003      	add	sp, #12
   1dad8:	bd30      	pop	{r4, r5, pc}
   1dada:	bf00      	nop
   1dadc:	2000ddb0 	.word	0x2000ddb0
   1dae0:	2000dd98 	.word	0x2000dd98

0001dae4 <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
   1dae4:	b530      	push	{r4, r5, lr}
   1dae6:	b085      	sub	sp, #20
   1dae8:	4605      	mov	r5, r0
   1daea:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
   1daec:	a903      	add	r1, sp, #12
   1daee:	f7ff ff41 	bl	1d974 <flash_area_open>
    if (rc != 0) {
   1daf2:	b9e8      	cbnz	r0, 1db30 <mfg_read_mmr+0x4c>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
   1daf4:	9803      	ldr	r0, [sp, #12]
   1daf6:	6881      	ldr	r1, [r0, #8]
   1daf8:	2308      	movs	r3, #8
   1dafa:	aa01      	add	r2, sp, #4
   1dafc:	3908      	subs	r1, #8
   1dafe:	f7ff ff59 	bl	1d9b4 <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
   1db02:	4601      	mov	r1, r0
   1db04:	b9b8      	cbnz	r0, 1db36 <mfg_read_mmr+0x52>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
   1db06:	9a02      	ldr	r2, [sp, #8]
   1db08:	4b11      	ldr	r3, [pc, #68]	; (1db50 <mfg_read_mmr+0x6c>)
   1db0a:	429a      	cmp	r2, r3
   1db0c:	d116      	bne.n	1db3c <mfg_read_mmr+0x58>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
   1db0e:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1db12:	2b02      	cmp	r3, #2
   1db14:	d115      	bne.n	1db42 <mfg_read_mmr+0x5e>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
   1db16:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1db1a:	9b03      	ldr	r3, [sp, #12]
   1db1c:	689b      	ldr	r3, [r3, #8]
   1db1e:	429a      	cmp	r2, r3
   1db20:	d812      	bhi.n	1db48 <mfg_read_mmr+0x64>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
   1db22:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
   1db24:	7025      	strb	r5, [r4, #0]
   1db26:	6063      	str	r3, [r4, #4]
   1db28:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
   1db2a:	4608      	mov	r0, r1
   1db2c:	b005      	add	sp, #20
   1db2e:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
   1db30:	f06f 0104 	mvn.w	r1, #4
   1db34:	e7f9      	b.n	1db2a <mfg_read_mmr+0x46>
        return SYS_EIO;
   1db36:	f06f 0104 	mvn.w	r1, #4
   1db3a:	e7f6      	b.n	1db2a <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1db3c:	f06f 0108 	mvn.w	r1, #8
   1db40:	e7f3      	b.n	1db2a <mfg_read_mmr+0x46>
        return SYS_ENOTSUP;
   1db42:	f06f 010b 	mvn.w	r1, #11
   1db46:	e7f0      	b.n	1db2a <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1db48:	f06f 0108 	mvn.w	r1, #8
   1db4c:	e7ed      	b.n	1db2a <mfg_read_mmr+0x46>
   1db4e:	bf00      	nop
   1db50:	3bb2a269 	.word	0x3bb2a269

0001db54 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
   1db54:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
   1db56:	2300      	movs	r3, #0
   1db58:	4a11      	ldr	r2, [pc, #68]	; (1dba0 <mfg_read_next_mmr+0x4c>)
   1db5a:	6812      	ldr	r2, [r2, #0]
   1db5c:	429a      	cmp	r2, r3
   1db5e:	dd08      	ble.n	1db72 <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
   1db60:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   1db64:	008a      	lsls	r2, r1, #2
   1db66:	490f      	ldr	r1, [pc, #60]	; (1dba4 <mfg_read_next_mmr+0x50>)
   1db68:	5c8a      	ldrb	r2, [r1, r2]
   1db6a:	4282      	cmp	r2, r0
   1db6c:	d011      	beq.n	1db92 <mfg_read_next_mmr+0x3e>
    for (i = 0; i < mfg_num_mmrs; i++) {
   1db6e:	3301      	adds	r3, #1
   1db70:	e7f2      	b.n	1db58 <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
   1db72:	2a01      	cmp	r2, #1
   1db74:	dc11      	bgt.n	1db9a <mfg_read_next_mmr+0x46>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
   1db76:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1db7a:	0093      	lsls	r3, r2, #2
   1db7c:	4909      	ldr	r1, [pc, #36]	; (1dba4 <mfg_read_next_mmr+0x50>)
   1db7e:	4419      	add	r1, r3
   1db80:	f7ff ffb0 	bl	1dae4 <mfg_read_mmr>
    if (rc != 0) {
   1db84:	4603      	mov	r3, r0
   1db86:	b930      	cbnz	r0, 1db96 <mfg_read_next_mmr+0x42>
        return rc;
    }

    mfg_num_mmrs++;
   1db88:	4905      	ldr	r1, [pc, #20]	; (1dba0 <mfg_read_next_mmr+0x4c>)
   1db8a:	680a      	ldr	r2, [r1, #0]
   1db8c:	3201      	adds	r2, #1
   1db8e:	600a      	str	r2, [r1, #0]
    return 0;
   1db90:	e001      	b.n	1db96 <mfg_read_next_mmr+0x42>
            return SYS_EALREADY;
   1db92:	f06f 030a 	mvn.w	r3, #10
}
   1db96:	4618      	mov	r0, r3
   1db98:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
   1db9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1db9e:	e7fa      	b.n	1db96 <mfg_read_next_mmr+0x42>
   1dba0:	2000ddb0 	.word	0x2000ddb0
   1dba4:	2000dd98 	.word	0x2000dd98

0001dba8 <mfg_open_flash_area>:
{
   1dba8:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1dbaa:	7883      	ldrb	r3, [r0, #2]
   1dbac:	4a0b      	ldr	r2, [pc, #44]	; (1dbdc <mfg_open_flash_area+0x34>)
   1dbae:	6812      	ldr	r2, [r2, #0]
   1dbb0:	4293      	cmp	r3, r2
   1dbb2:	da0a      	bge.n	1dbca <mfg_open_flash_area+0x22>
    rc = flash_area_open(mmr->area_id, fap);
   1dbb4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1dbb8:	009a      	lsls	r2, r3, #2
   1dbba:	4b09      	ldr	r3, [pc, #36]	; (1dbe0 <mfg_open_flash_area+0x38>)
   1dbbc:	5c98      	ldrb	r0, [r3, r2]
   1dbbe:	f7ff fed9 	bl	1d974 <flash_area_open>
    if (rc != 0) {
   1dbc2:	4603      	mov	r3, r0
   1dbc4:	b938      	cbnz	r0, 1dbd6 <mfg_open_flash_area+0x2e>
}
   1dbc6:	4618      	mov	r0, r3
   1dbc8:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1dbca:	2300      	movs	r3, #0
   1dbcc:	461a      	mov	r2, r3
   1dbce:	4619      	mov	r1, r3
   1dbd0:	4618      	mov	r0, r3
   1dbd2:	f7fc fe11 	bl	1a7f8 <__assert_func>
        return SYS_EIO;
   1dbd6:	f06f 0304 	mvn.w	r3, #4
   1dbda:	e7f4      	b.n	1dbc6 <mfg_open_flash_area+0x1e>
   1dbdc:	2000ddb0 	.word	0x2000ddb0
   1dbe0:	2000dd98 	.word	0x2000dd98

0001dbe4 <mfg_read_tlv_body>:
{
   1dbe4:	b570      	push	{r4, r5, r6, lr}
   1dbe6:	b082      	sub	sp, #8
   1dbe8:	4606      	mov	r6, r0
   1dbea:	460c      	mov	r4, r1
   1dbec:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
   1dbee:	a901      	add	r1, sp, #4
   1dbf0:	f7ff ffda 	bl	1dba8 <mfg_open_flash_area>
    if (rc != 0) {
   1dbf4:	4603      	mov	r3, r0
   1dbf6:	b110      	cbz	r0, 1dbfe <mfg_read_tlv_body+0x1a>
}
   1dbf8:	4618      	mov	r0, r3
   1dbfa:	b002      	add	sp, #8
   1dbfc:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
   1dbfe:	462a      	mov	r2, r5
   1dc00:	2100      	movs	r1, #0
   1dc02:	4620      	mov	r0, r4
   1dc04:	f7fe f9fb 	bl	1bffe <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
   1dc08:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
   1dc0a:	6871      	ldr	r1, [r6, #4]
   1dc0c:	42ab      	cmp	r3, r5
   1dc0e:	bfa8      	it	ge
   1dc10:	462b      	movge	r3, r5
   1dc12:	4622      	mov	r2, r4
   1dc14:	3102      	adds	r1, #2
   1dc16:	9801      	ldr	r0, [sp, #4]
   1dc18:	f7ff fecc 	bl	1d9b4 <flash_area_read>
    if (rc != 0) {
   1dc1c:	4603      	mov	r3, r0
   1dc1e:	2800      	cmp	r0, #0
   1dc20:	d0ea      	beq.n	1dbf8 <mfg_read_tlv_body+0x14>
        return SYS_EIO;
   1dc22:	f06f 0304 	mvn.w	r3, #4
   1dc26:	e7e7      	b.n	1dbf8 <mfg_read_tlv_body+0x14>

0001dc28 <mfg_seek_next>:
{
   1dc28:	b510      	push	{r4, lr}
   1dc2a:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
   1dc2c:	4620      	mov	r0, r4
   1dc2e:	f7ff ff0f 	bl	1da50 <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
   1dc32:	f110 0f06 	cmn.w	r0, #6
   1dc36:	d0f9      	beq.n	1dc2c <mfg_seek_next+0x4>
}
   1dc38:	bd10      	pop	{r4, pc}

0001dc3a <mfg_seek_next_with_type>:
{
   1dc3a:	b538      	push	{r3, r4, r5, lr}
   1dc3c:	4604      	mov	r4, r0
   1dc3e:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
   1dc40:	4620      	mov	r0, r4
   1dc42:	f7ff fff1 	bl	1dc28 <mfg_seek_next>
        if (rc != 0) {
   1dc46:	4602      	mov	r2, r0
   1dc48:	b910      	cbnz	r0, 1dc50 <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
   1dc4a:	7823      	ldrb	r3, [r4, #0]
   1dc4c:	42ab      	cmp	r3, r5
   1dc4e:	d1f7      	bne.n	1dc40 <mfg_seek_next_with_type+0x6>
}
   1dc50:	4610      	mov	r0, r2
   1dc52:	bd38      	pop	{r3, r4, r5, pc}

0001dc54 <mfg_read_tlv_flash_area>:
{
   1dc54:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
   1dc56:	220a      	movs	r2, #10
   1dc58:	f7ff ffc4 	bl	1dbe4 <mfg_read_tlv_body>
}
   1dc5c:	bd08      	pop	{r3, pc}

0001dc5e <mfg_read_tlv_mmr_ref>:
{
   1dc5e:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
   1dc60:	2201      	movs	r2, #1
   1dc62:	f7ff ffbf 	bl	1dbe4 <mfg_read_tlv_body>
}
   1dc66:	bd08      	pop	{r3, pc}

0001dc68 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
   1dc68:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
   1dc6a:	4b0b      	ldr	r3, [pc, #44]	; (1dc98 <mfg_init+0x30>)
   1dc6c:	781b      	ldrb	r3, [r3, #0]
   1dc6e:	b94b      	cbnz	r3, 1dc84 <mfg_init+0x1c>
        return;
    }
    mfg_initialized = true;
   1dc70:	4b09      	ldr	r3, [pc, #36]	; (1dc98 <mfg_init+0x30>)
   1dc72:	2201      	movs	r2, #1
   1dc74:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1dc76:	4b09      	ldr	r3, [pc, #36]	; (1dc9c <mfg_init+0x34>)
   1dc78:	781b      	ldrb	r3, [r3, #0]
   1dc7a:	b123      	cbz	r3, 1dc86 <mfg_init+0x1e>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
   1dc7c:	2000      	movs	r0, #0
   1dc7e:	f7ff ff69 	bl	1db54 <mfg_read_next_mmr>
    if (rc != 0) {
   1dc82:	b128      	cbz	r0, 1dc90 <mfg_init+0x28>

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
}
   1dc84:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1dc86:	461a      	mov	r2, r3
   1dc88:	4619      	mov	r1, r3
   1dc8a:	4618      	mov	r0, r3
   1dc8c:	f7fc fdb4 	bl	1a7f8 <__assert_func>
    rc = mfg_read_mmr_refs();
   1dc90:	f000 f80e 	bl	1dcb0 <mfg_read_mmr_refs>
err:
   1dc94:	e7f6      	b.n	1dc84 <mfg_init+0x1c>
   1dc96:	bf00      	nop
   1dc98:	2000dd94 	.word	0x2000dd94
   1dc9c:	2000ddbc 	.word	0x2000ddbc

0001dca0 <mfg_open>:
{
   1dca0:	b510      	push	{r4, lr}
   1dca2:	4604      	mov	r4, r0
    mfg_init();
   1dca4:	f7ff ffe0 	bl	1dc68 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
   1dca8:	2300      	movs	r3, #0
   1dcaa:	6023      	str	r3, [r4, #0]
   1dcac:	6063      	str	r3, [r4, #4]
}
   1dcae:	bd10      	pop	{r4, pc}

0001dcb0 <mfg_read_mmr_refs>:
{
   1dcb0:	b500      	push	{lr}
   1dcb2:	b085      	sub	sp, #20
    mfg_open(&reader);
   1dcb4:	a801      	add	r0, sp, #4
   1dcb6:	f7ff fff3 	bl	1dca0 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
   1dcba:	2104      	movs	r1, #4
   1dcbc:	eb0d 0001 	add.w	r0, sp, r1
   1dcc0:	f7ff ffbb 	bl	1dc3a <mfg_seek_next_with_type>
   1dcc4:	4603      	mov	r3, r0
        switch (rc) {
   1dcc6:	f110 0f0f 	cmn.w	r0, #15
   1dcca:	d004      	beq.n	1dcd6 <mfg_read_mmr_refs+0x26>
   1dccc:	b128      	cbz	r0, 1dcda <mfg_read_mmr_refs+0x2a>
}
   1dcce:	4618      	mov	r0, r3
   1dcd0:	b005      	add	sp, #20
   1dcd2:	f85d fb04 	ldr.w	pc, [sp], #4
            return 0;
   1dcd6:	2300      	movs	r3, #0
   1dcd8:	e7f9      	b.n	1dcce <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
   1dcda:	a903      	add	r1, sp, #12
   1dcdc:	a801      	add	r0, sp, #4
   1dcde:	f7ff ffbe 	bl	1dc5e <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
   1dce2:	4603      	mov	r3, r0
   1dce4:	2800      	cmp	r0, #0
   1dce6:	d1f2      	bne.n	1dcce <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
   1dce8:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1dcec:	f7ff ff32 	bl	1db54 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
   1dcf0:	4603      	mov	r3, r0
   1dcf2:	2800      	cmp	r0, #0
   1dcf4:	d0e1      	beq.n	1dcba <mfg_read_mmr_refs+0xa>
   1dcf6:	f110 0f0b 	cmn.w	r0, #11
   1dcfa:	d0de      	beq.n	1dcba <mfg_read_mmr_refs+0xa>
   1dcfc:	e7e7      	b.n	1dcce <mfg_read_mmr_refs+0x1e>
	...

0001dd00 <__wrap_coap_receive>:
}

///////////////////////////////////////////////////////////////////////////////
//  Other Functions

int __wrap_coap_receive(/* struct os_mbuf **mp */) {
   1dd00:	b508      	push	{r3, lr}
    //  We override the default coap_receive() with an empty function so that we will 
    //  NOT link in any modules for receiving and parsing CoAP requests, to save ROM space.
    //  We only need to transmit CoAP requests.  The overriding is done via the Linker Flag
    //  "-Wl,-wrap,coap_receive" in apps/my_sensor_app/pkg.yml
    console_printf("coap_receive NOT IMPLEMENTED\n");
   1dd02:	4803      	ldr	r0, [pc, #12]	; (1dd10 <__wrap_coap_receive+0x10>)
   1dd04:	f7fb feb0 	bl	19a68 <console_printf>
    return -1;
}
   1dd08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dd0c:	bd08      	pop	{r3, pc}
   1dd0e:	bf00      	nop
   1dd10:	000228b4 	.word	0x000228b4

0001dd14 <_fini>:
//  From https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/static.html.
void* __dso_handle = NULL;
int __aeabi_atexit(void *object, void (*destructor)(void *), void *dso_handle) { return 0; }

#ifndef ARCH_rv32imac  //  If not RISC-V...
void _fini(void) { }   //  Define the function to be called when main() exits
   1dd14:	4770      	bx	lr

0001dd16 <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
   1dd16:	6843      	ldr	r3, [r0, #4]
   1dd18:	428b      	cmp	r3, r1
   1dd1a:	d808      	bhi.n	1dd2e <hal_flash_check_addr+0x18>
   1dd1c:	6882      	ldr	r2, [r0, #8]
   1dd1e:	4413      	add	r3, r2
   1dd20:	428b      	cmp	r3, r1
   1dd22:	d301      	bcc.n	1dd28 <hal_flash_check_addr+0x12>
        return SYS_EINVAL;
    }
    return 0;
   1dd24:	2000      	movs	r0, #0
}
   1dd26:	4770      	bx	lr
        return SYS_EINVAL;
   1dd28:	f06f 0001 	mvn.w	r0, #1
   1dd2c:	4770      	bx	lr
   1dd2e:	f06f 0001 	mvn.w	r0, #1
   1dd32:	4770      	bx	lr

0001dd34 <hal_flash_init>:
{
   1dd34:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
   1dd36:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
   1dd38:	462c      	mov	r4, r5
   1dd3a:	e001      	b.n	1dd40 <hal_flash_init+0xc>
   1dd3c:	3401      	adds	r4, #1
   1dd3e:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
   1dd40:	4620      	mov	r0, r4
   1dd42:	f7fe fce3 	bl	1c70c <hal_bsp_flash_dev>
        if (!hf) {
   1dd46:	b138      	cbz	r0, 1dd58 <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
   1dd48:	6802      	ldr	r2, [r0, #0]
   1dd4a:	6952      	ldr	r2, [r2, #20]
   1dd4c:	4790      	blx	r2
   1dd4e:	2800      	cmp	r0, #0
   1dd50:	d0f4      	beq.n	1dd3c <hal_flash_init+0x8>
            rc = SYS_EIO;
   1dd52:	f06f 0504 	mvn.w	r5, #4
   1dd56:	e7f1      	b.n	1dd3c <hal_flash_init+0x8>
}
   1dd58:	4628      	mov	r0, r5
   1dd5a:	bd38      	pop	{r3, r4, r5, pc}

0001dd5c <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   1dd5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dd60:	460d      	mov	r5, r1
   1dd62:	4690      	mov	r8, r2
   1dd64:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1dd66:	f7fe fcd1 	bl	1c70c <hal_bsp_flash_dev>
    if (!hf) {
   1dd6a:	b1c0      	cbz	r0, 1dd9e <hal_flash_read+0x42>
   1dd6c:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1dd6e:	4629      	mov	r1, r5
   1dd70:	f7ff ffd1 	bl	1dd16 <hal_flash_check_addr>
   1dd74:	b9b0      	cbnz	r0, 1dda4 <hal_flash_read+0x48>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1dd76:	19a9      	adds	r1, r5, r6
   1dd78:	4620      	mov	r0, r4
   1dd7a:	f7ff ffcc 	bl	1dd16 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1dd7e:	b9a0      	cbnz	r0, 1ddaa <hal_flash_read+0x4e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   1dd80:	6823      	ldr	r3, [r4, #0]
   1dd82:	681f      	ldr	r7, [r3, #0]
   1dd84:	4633      	mov	r3, r6
   1dd86:	4642      	mov	r2, r8
   1dd88:	4629      	mov	r1, r5
   1dd8a:	4620      	mov	r0, r4
   1dd8c:	47b8      	blx	r7
    if (rc != 0) {
   1dd8e:	4603      	mov	r3, r0
   1dd90:	b910      	cbnz	r0, 1dd98 <hal_flash_read+0x3c>
        return SYS_EIO;
    }

    return 0;
}
   1dd92:	4618      	mov	r0, r3
   1dd94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
   1dd98:	f06f 0304 	mvn.w	r3, #4
   1dd9c:	e7f9      	b.n	1dd92 <hal_flash_read+0x36>
        return SYS_EINVAL;
   1dd9e:	f06f 0301 	mvn.w	r3, #1
   1dda2:	e7f6      	b.n	1dd92 <hal_flash_read+0x36>
        return SYS_EINVAL;
   1dda4:	f06f 0301 	mvn.w	r3, #1
   1dda8:	e7f3      	b.n	1dd92 <hal_flash_read+0x36>
   1ddaa:	f06f 0301 	mvn.w	r3, #1
   1ddae:	e7f0      	b.n	1dd92 <hal_flash_read+0x36>

0001ddb0 <hal_bsp_hw_id_len>:

int
hal_bsp_hw_id_len(void)
{
    return sizeof(NRF_FICR->DEVICEID) + sizeof(NRF_FICR->DEVICEADDR);
}
   1ddb0:	2010      	movs	r0, #16
   1ddb2:	4770      	bx	lr

0001ddb4 <hal_bsp_hw_id>:
 * These values are generated at random.
 * DEVICEID[0-1] and DEVICEADDR[0-1].
 */
int
hal_bsp_hw_id(uint8_t *id, int max_len)
{
   1ddb4:	b570      	push	{r4, r5, r6, lr}
   1ddb6:	4606      	mov	r6, r0
   1ddb8:	460c      	mov	r4, r1
    int len, cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEID), max_len);
   1ddba:	460d      	mov	r5, r1
   1ddbc:	2908      	cmp	r1, #8
   1ddbe:	bf28      	it	cs
   1ddc0:	2508      	movcs	r5, #8
    memcpy(id, (void *)NRF_FICR->DEVICEID, cnt);
   1ddc2:	462a      	mov	r2, r5
   1ddc4:	4906      	ldr	r1, [pc, #24]	; (1dde0 <hal_bsp_hw_id+0x2c>)
   1ddc6:	f7fe f90d 	bl	1bfe4 <memcpy>
    len = cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEADDR), max_len - len);
   1ddca:	1b64      	subs	r4, r4, r5
   1ddcc:	2c08      	cmp	r4, #8
   1ddce:	bf28      	it	cs
   1ddd0:	2408      	movcs	r4, #8
    memcpy(id + len, (void *)NRF_FICR->DEVICEADDR, cnt);
   1ddd2:	4622      	mov	r2, r4
   1ddd4:	4903      	ldr	r1, [pc, #12]	; (1dde4 <hal_bsp_hw_id+0x30>)
   1ddd6:	1970      	adds	r0, r6, r5
   1ddd8:	f7fe f904 	bl	1bfe4 <memcpy>

    return len + cnt;
}
   1dddc:	1928      	adds	r0, r5, r4
   1ddde:	bd70      	pop	{r4, r5, r6, pc}
   1dde0:	10000060 	.word	0x10000060
   1dde4:	100000a4 	.word	0x100000a4

0001dde8 <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   1dde8:	b40e      	push	{r1, r2, r3}
   1ddea:	b500      	push	{lr}
   1ddec:	b082      	sub	sp, #8
   1ddee:	ab03      	add	r3, sp, #12
   1ddf0:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
   1ddf4:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   1ddf6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1ddfa:	f7fe fbef 	bl	1c5dc <vsnprintf>
	va_end(ap);

	return rv;
}
   1ddfe:	b002      	add	sp, #8
   1de00:	f85d eb04 	ldr.w	lr, [sp], #4
   1de04:	b003      	add	sp, #12
   1de06:	4770      	bx	lr

0001de08 <__aeabi_uldivmod>:
   1de08:	b953      	cbnz	r3, 1de20 <__aeabi_uldivmod+0x18>
   1de0a:	b94a      	cbnz	r2, 1de20 <__aeabi_uldivmod+0x18>
   1de0c:	2900      	cmp	r1, #0
   1de0e:	bf08      	it	eq
   1de10:	2800      	cmpeq	r0, #0
   1de12:	bf1c      	itt	ne
   1de14:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1de18:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1de1c:	f000 b972 	b.w	1e104 <__aeabi_idiv0>
   1de20:	f1ad 0c08 	sub.w	ip, sp, #8
   1de24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1de28:	f000 f806 	bl	1de38 <__udivmoddi4>
   1de2c:	f8dd e004 	ldr.w	lr, [sp, #4]
   1de30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1de34:	b004      	add	sp, #16
   1de36:	4770      	bx	lr

0001de38 <__udivmoddi4>:
   1de38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1de3c:	9e08      	ldr	r6, [sp, #32]
   1de3e:	4604      	mov	r4, r0
   1de40:	4688      	mov	r8, r1
   1de42:	2b00      	cmp	r3, #0
   1de44:	d14b      	bne.n	1dede <__udivmoddi4+0xa6>
   1de46:	428a      	cmp	r2, r1
   1de48:	4615      	mov	r5, r2
   1de4a:	d967      	bls.n	1df1c <__udivmoddi4+0xe4>
   1de4c:	fab2 f282 	clz	r2, r2
   1de50:	b14a      	cbz	r2, 1de66 <__udivmoddi4+0x2e>
   1de52:	f1c2 0720 	rsb	r7, r2, #32
   1de56:	fa01 f302 	lsl.w	r3, r1, r2
   1de5a:	fa20 f707 	lsr.w	r7, r0, r7
   1de5e:	4095      	lsls	r5, r2
   1de60:	ea47 0803 	orr.w	r8, r7, r3
   1de64:	4094      	lsls	r4, r2
   1de66:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1de6a:	0c23      	lsrs	r3, r4, #16
   1de6c:	fbb8 f7fe 	udiv	r7, r8, lr
   1de70:	fa1f fc85 	uxth.w	ip, r5
   1de74:	fb0e 8817 	mls	r8, lr, r7, r8
   1de78:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   1de7c:	fb07 f10c 	mul.w	r1, r7, ip
   1de80:	4299      	cmp	r1, r3
   1de82:	d909      	bls.n	1de98 <__udivmoddi4+0x60>
   1de84:	18eb      	adds	r3, r5, r3
   1de86:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   1de8a:	f080 811b 	bcs.w	1e0c4 <__udivmoddi4+0x28c>
   1de8e:	4299      	cmp	r1, r3
   1de90:	f240 8118 	bls.w	1e0c4 <__udivmoddi4+0x28c>
   1de94:	3f02      	subs	r7, #2
   1de96:	442b      	add	r3, r5
   1de98:	1a5b      	subs	r3, r3, r1
   1de9a:	b2a4      	uxth	r4, r4
   1de9c:	fbb3 f0fe 	udiv	r0, r3, lr
   1dea0:	fb0e 3310 	mls	r3, lr, r0, r3
   1dea4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1dea8:	fb00 fc0c 	mul.w	ip, r0, ip
   1deac:	45a4      	cmp	ip, r4
   1deae:	d909      	bls.n	1dec4 <__udivmoddi4+0x8c>
   1deb0:	192c      	adds	r4, r5, r4
   1deb2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1deb6:	f080 8107 	bcs.w	1e0c8 <__udivmoddi4+0x290>
   1deba:	45a4      	cmp	ip, r4
   1debc:	f240 8104 	bls.w	1e0c8 <__udivmoddi4+0x290>
   1dec0:	3802      	subs	r0, #2
   1dec2:	442c      	add	r4, r5
   1dec4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   1dec8:	eba4 040c 	sub.w	r4, r4, ip
   1decc:	2700      	movs	r7, #0
   1dece:	b11e      	cbz	r6, 1ded8 <__udivmoddi4+0xa0>
   1ded0:	40d4      	lsrs	r4, r2
   1ded2:	2300      	movs	r3, #0
   1ded4:	e9c6 4300 	strd	r4, r3, [r6]
   1ded8:	4639      	mov	r1, r7
   1deda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1dede:	428b      	cmp	r3, r1
   1dee0:	d909      	bls.n	1def6 <__udivmoddi4+0xbe>
   1dee2:	2e00      	cmp	r6, #0
   1dee4:	f000 80eb 	beq.w	1e0be <__udivmoddi4+0x286>
   1dee8:	2700      	movs	r7, #0
   1deea:	e9c6 0100 	strd	r0, r1, [r6]
   1deee:	4638      	mov	r0, r7
   1def0:	4639      	mov	r1, r7
   1def2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1def6:	fab3 f783 	clz	r7, r3
   1defa:	2f00      	cmp	r7, #0
   1defc:	d147      	bne.n	1df8e <__udivmoddi4+0x156>
   1defe:	428b      	cmp	r3, r1
   1df00:	d302      	bcc.n	1df08 <__udivmoddi4+0xd0>
   1df02:	4282      	cmp	r2, r0
   1df04:	f200 80fa 	bhi.w	1e0fc <__udivmoddi4+0x2c4>
   1df08:	1a84      	subs	r4, r0, r2
   1df0a:	eb61 0303 	sbc.w	r3, r1, r3
   1df0e:	2001      	movs	r0, #1
   1df10:	4698      	mov	r8, r3
   1df12:	2e00      	cmp	r6, #0
   1df14:	d0e0      	beq.n	1ded8 <__udivmoddi4+0xa0>
   1df16:	e9c6 4800 	strd	r4, r8, [r6]
   1df1a:	e7dd      	b.n	1ded8 <__udivmoddi4+0xa0>
   1df1c:	b902      	cbnz	r2, 1df20 <__udivmoddi4+0xe8>
   1df1e:	deff      	udf	#255	; 0xff
   1df20:	fab2 f282 	clz	r2, r2
   1df24:	2a00      	cmp	r2, #0
   1df26:	f040 808f 	bne.w	1e048 <__udivmoddi4+0x210>
   1df2a:	1b49      	subs	r1, r1, r5
   1df2c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1df30:	fa1f f885 	uxth.w	r8, r5
   1df34:	2701      	movs	r7, #1
   1df36:	fbb1 fcfe 	udiv	ip, r1, lr
   1df3a:	0c23      	lsrs	r3, r4, #16
   1df3c:	fb0e 111c 	mls	r1, lr, ip, r1
   1df40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1df44:	fb08 f10c 	mul.w	r1, r8, ip
   1df48:	4299      	cmp	r1, r3
   1df4a:	d907      	bls.n	1df5c <__udivmoddi4+0x124>
   1df4c:	18eb      	adds	r3, r5, r3
   1df4e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   1df52:	d202      	bcs.n	1df5a <__udivmoddi4+0x122>
   1df54:	4299      	cmp	r1, r3
   1df56:	f200 80cd 	bhi.w	1e0f4 <__udivmoddi4+0x2bc>
   1df5a:	4684      	mov	ip, r0
   1df5c:	1a59      	subs	r1, r3, r1
   1df5e:	b2a3      	uxth	r3, r4
   1df60:	fbb1 f0fe 	udiv	r0, r1, lr
   1df64:	fb0e 1410 	mls	r4, lr, r0, r1
   1df68:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   1df6c:	fb08 f800 	mul.w	r8, r8, r0
   1df70:	45a0      	cmp	r8, r4
   1df72:	d907      	bls.n	1df84 <__udivmoddi4+0x14c>
   1df74:	192c      	adds	r4, r5, r4
   1df76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1df7a:	d202      	bcs.n	1df82 <__udivmoddi4+0x14a>
   1df7c:	45a0      	cmp	r8, r4
   1df7e:	f200 80b6 	bhi.w	1e0ee <__udivmoddi4+0x2b6>
   1df82:	4618      	mov	r0, r3
   1df84:	eba4 0408 	sub.w	r4, r4, r8
   1df88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1df8c:	e79f      	b.n	1dece <__udivmoddi4+0x96>
   1df8e:	f1c7 0c20 	rsb	ip, r7, #32
   1df92:	40bb      	lsls	r3, r7
   1df94:	fa22 fe0c 	lsr.w	lr, r2, ip
   1df98:	ea4e 0e03 	orr.w	lr, lr, r3
   1df9c:	fa01 f407 	lsl.w	r4, r1, r7
   1dfa0:	fa20 f50c 	lsr.w	r5, r0, ip
   1dfa4:	fa21 f30c 	lsr.w	r3, r1, ip
   1dfa8:	ea4f 481e 	mov.w	r8, lr, lsr #16
   1dfac:	4325      	orrs	r5, r4
   1dfae:	fbb3 f9f8 	udiv	r9, r3, r8
   1dfb2:	0c2c      	lsrs	r4, r5, #16
   1dfb4:	fb08 3319 	mls	r3, r8, r9, r3
   1dfb8:	fa1f fa8e 	uxth.w	sl, lr
   1dfbc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   1dfc0:	fb09 f40a 	mul.w	r4, r9, sl
   1dfc4:	429c      	cmp	r4, r3
   1dfc6:	fa02 f207 	lsl.w	r2, r2, r7
   1dfca:	fa00 f107 	lsl.w	r1, r0, r7
   1dfce:	d90b      	bls.n	1dfe8 <__udivmoddi4+0x1b0>
   1dfd0:	eb1e 0303 	adds.w	r3, lr, r3
   1dfd4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   1dfd8:	f080 8087 	bcs.w	1e0ea <__udivmoddi4+0x2b2>
   1dfdc:	429c      	cmp	r4, r3
   1dfde:	f240 8084 	bls.w	1e0ea <__udivmoddi4+0x2b2>
   1dfe2:	f1a9 0902 	sub.w	r9, r9, #2
   1dfe6:	4473      	add	r3, lr
   1dfe8:	1b1b      	subs	r3, r3, r4
   1dfea:	b2ad      	uxth	r5, r5
   1dfec:	fbb3 f0f8 	udiv	r0, r3, r8
   1dff0:	fb08 3310 	mls	r3, r8, r0, r3
   1dff4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   1dff8:	fb00 fa0a 	mul.w	sl, r0, sl
   1dffc:	45a2      	cmp	sl, r4
   1dffe:	d908      	bls.n	1e012 <__udivmoddi4+0x1da>
   1e000:	eb1e 0404 	adds.w	r4, lr, r4
   1e004:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1e008:	d26b      	bcs.n	1e0e2 <__udivmoddi4+0x2aa>
   1e00a:	45a2      	cmp	sl, r4
   1e00c:	d969      	bls.n	1e0e2 <__udivmoddi4+0x2aa>
   1e00e:	3802      	subs	r0, #2
   1e010:	4474      	add	r4, lr
   1e012:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1e016:	fba0 8902 	umull	r8, r9, r0, r2
   1e01a:	eba4 040a 	sub.w	r4, r4, sl
   1e01e:	454c      	cmp	r4, r9
   1e020:	46c2      	mov	sl, r8
   1e022:	464b      	mov	r3, r9
   1e024:	d354      	bcc.n	1e0d0 <__udivmoddi4+0x298>
   1e026:	d051      	beq.n	1e0cc <__udivmoddi4+0x294>
   1e028:	2e00      	cmp	r6, #0
   1e02a:	d069      	beq.n	1e100 <__udivmoddi4+0x2c8>
   1e02c:	ebb1 050a 	subs.w	r5, r1, sl
   1e030:	eb64 0403 	sbc.w	r4, r4, r3
   1e034:	fa04 fc0c 	lsl.w	ip, r4, ip
   1e038:	40fd      	lsrs	r5, r7
   1e03a:	40fc      	lsrs	r4, r7
   1e03c:	ea4c 0505 	orr.w	r5, ip, r5
   1e040:	e9c6 5400 	strd	r5, r4, [r6]
   1e044:	2700      	movs	r7, #0
   1e046:	e747      	b.n	1ded8 <__udivmoddi4+0xa0>
   1e048:	f1c2 0320 	rsb	r3, r2, #32
   1e04c:	fa20 f703 	lsr.w	r7, r0, r3
   1e050:	4095      	lsls	r5, r2
   1e052:	fa01 f002 	lsl.w	r0, r1, r2
   1e056:	fa21 f303 	lsr.w	r3, r1, r3
   1e05a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1e05e:	4338      	orrs	r0, r7
   1e060:	0c01      	lsrs	r1, r0, #16
   1e062:	fbb3 f7fe 	udiv	r7, r3, lr
   1e066:	fa1f f885 	uxth.w	r8, r5
   1e06a:	fb0e 3317 	mls	r3, lr, r7, r3
   1e06e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1e072:	fb07 f308 	mul.w	r3, r7, r8
   1e076:	428b      	cmp	r3, r1
   1e078:	fa04 f402 	lsl.w	r4, r4, r2
   1e07c:	d907      	bls.n	1e08e <__udivmoddi4+0x256>
   1e07e:	1869      	adds	r1, r5, r1
   1e080:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   1e084:	d22f      	bcs.n	1e0e6 <__udivmoddi4+0x2ae>
   1e086:	428b      	cmp	r3, r1
   1e088:	d92d      	bls.n	1e0e6 <__udivmoddi4+0x2ae>
   1e08a:	3f02      	subs	r7, #2
   1e08c:	4429      	add	r1, r5
   1e08e:	1acb      	subs	r3, r1, r3
   1e090:	b281      	uxth	r1, r0
   1e092:	fbb3 f0fe 	udiv	r0, r3, lr
   1e096:	fb0e 3310 	mls	r3, lr, r0, r3
   1e09a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1e09e:	fb00 f308 	mul.w	r3, r0, r8
   1e0a2:	428b      	cmp	r3, r1
   1e0a4:	d907      	bls.n	1e0b6 <__udivmoddi4+0x27e>
   1e0a6:	1869      	adds	r1, r5, r1
   1e0a8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   1e0ac:	d217      	bcs.n	1e0de <__udivmoddi4+0x2a6>
   1e0ae:	428b      	cmp	r3, r1
   1e0b0:	d915      	bls.n	1e0de <__udivmoddi4+0x2a6>
   1e0b2:	3802      	subs	r0, #2
   1e0b4:	4429      	add	r1, r5
   1e0b6:	1ac9      	subs	r1, r1, r3
   1e0b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   1e0bc:	e73b      	b.n	1df36 <__udivmoddi4+0xfe>
   1e0be:	4637      	mov	r7, r6
   1e0c0:	4630      	mov	r0, r6
   1e0c2:	e709      	b.n	1ded8 <__udivmoddi4+0xa0>
   1e0c4:	4607      	mov	r7, r0
   1e0c6:	e6e7      	b.n	1de98 <__udivmoddi4+0x60>
   1e0c8:	4618      	mov	r0, r3
   1e0ca:	e6fb      	b.n	1dec4 <__udivmoddi4+0x8c>
   1e0cc:	4541      	cmp	r1, r8
   1e0ce:	d2ab      	bcs.n	1e028 <__udivmoddi4+0x1f0>
   1e0d0:	ebb8 0a02 	subs.w	sl, r8, r2
   1e0d4:	eb69 020e 	sbc.w	r2, r9, lr
   1e0d8:	3801      	subs	r0, #1
   1e0da:	4613      	mov	r3, r2
   1e0dc:	e7a4      	b.n	1e028 <__udivmoddi4+0x1f0>
   1e0de:	4660      	mov	r0, ip
   1e0e0:	e7e9      	b.n	1e0b6 <__udivmoddi4+0x27e>
   1e0e2:	4618      	mov	r0, r3
   1e0e4:	e795      	b.n	1e012 <__udivmoddi4+0x1da>
   1e0e6:	4667      	mov	r7, ip
   1e0e8:	e7d1      	b.n	1e08e <__udivmoddi4+0x256>
   1e0ea:	4681      	mov	r9, r0
   1e0ec:	e77c      	b.n	1dfe8 <__udivmoddi4+0x1b0>
   1e0ee:	3802      	subs	r0, #2
   1e0f0:	442c      	add	r4, r5
   1e0f2:	e747      	b.n	1df84 <__udivmoddi4+0x14c>
   1e0f4:	f1ac 0c02 	sub.w	ip, ip, #2
   1e0f8:	442b      	add	r3, r5
   1e0fa:	e72f      	b.n	1df5c <__udivmoddi4+0x124>
   1e0fc:	4638      	mov	r0, r7
   1e0fe:	e708      	b.n	1df12 <__udivmoddi4+0xda>
   1e100:	4637      	mov	r7, r6
   1e102:	e6e9      	b.n	1ded8 <__udivmoddi4+0xa0>

0001e104 <__aeabi_idiv0>:
   1e104:	4770      	bx	lr
   1e106:	bf00      	nop

0001e108 <__aeabi_memclr>:
   1e108:	2200      	movs	r2, #0
   1e10a:	f000 b803 	b.w	1e114 <__aeabi_memset>
   1e10e:	bf00      	nop

0001e110 <__aeabi_memcpy>:
   1e110:	f7fd bf68 	b.w	1bfe4 <memcpy>

0001e114 <__aeabi_memset>:
   1e114:	b470      	push	{r4, r5, r6}
   1e116:	0784      	lsls	r4, r0, #30
   1e118:	d046      	beq.n	1e1a8 <__aeabi_memset+0x94>
   1e11a:	1e4c      	subs	r4, r1, #1
   1e11c:	2900      	cmp	r1, #0
   1e11e:	d041      	beq.n	1e1a4 <__aeabi_memset+0x90>
   1e120:	b2d5      	uxtb	r5, r2
   1e122:	4603      	mov	r3, r0
   1e124:	e002      	b.n	1e12c <__aeabi_memset+0x18>
   1e126:	1e61      	subs	r1, r4, #1
   1e128:	b3e4      	cbz	r4, 1e1a4 <__aeabi_memset+0x90>
   1e12a:	460c      	mov	r4, r1
   1e12c:	f803 5b01 	strb.w	r5, [r3], #1
   1e130:	0799      	lsls	r1, r3, #30
   1e132:	d1f8      	bne.n	1e126 <__aeabi_memset+0x12>
   1e134:	2c03      	cmp	r4, #3
   1e136:	d92e      	bls.n	1e196 <__aeabi_memset+0x82>
   1e138:	b2d5      	uxtb	r5, r2
   1e13a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1e13e:	2c0f      	cmp	r4, #15
   1e140:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1e144:	d919      	bls.n	1e17a <__aeabi_memset+0x66>
   1e146:	4626      	mov	r6, r4
   1e148:	f103 0110 	add.w	r1, r3, #16
   1e14c:	3e10      	subs	r6, #16
   1e14e:	2e0f      	cmp	r6, #15
   1e150:	f841 5c10 	str.w	r5, [r1, #-16]
   1e154:	f841 5c0c 	str.w	r5, [r1, #-12]
   1e158:	f841 5c08 	str.w	r5, [r1, #-8]
   1e15c:	f841 5c04 	str.w	r5, [r1, #-4]
   1e160:	f101 0110 	add.w	r1, r1, #16
   1e164:	d8f2      	bhi.n	1e14c <__aeabi_memset+0x38>
   1e166:	f1a4 0110 	sub.w	r1, r4, #16
   1e16a:	f021 010f 	bic.w	r1, r1, #15
   1e16e:	f004 040f 	and.w	r4, r4, #15
   1e172:	3110      	adds	r1, #16
   1e174:	2c03      	cmp	r4, #3
   1e176:	440b      	add	r3, r1
   1e178:	d90d      	bls.n	1e196 <__aeabi_memset+0x82>
   1e17a:	461e      	mov	r6, r3
   1e17c:	4621      	mov	r1, r4
   1e17e:	3904      	subs	r1, #4
   1e180:	2903      	cmp	r1, #3
   1e182:	f846 5b04 	str.w	r5, [r6], #4
   1e186:	d8fa      	bhi.n	1e17e <__aeabi_memset+0x6a>
   1e188:	1f21      	subs	r1, r4, #4
   1e18a:	f021 0103 	bic.w	r1, r1, #3
   1e18e:	3104      	adds	r1, #4
   1e190:	440b      	add	r3, r1
   1e192:	f004 0403 	and.w	r4, r4, #3
   1e196:	b12c      	cbz	r4, 1e1a4 <__aeabi_memset+0x90>
   1e198:	b2d2      	uxtb	r2, r2
   1e19a:	441c      	add	r4, r3
   1e19c:	f803 2b01 	strb.w	r2, [r3], #1
   1e1a0:	42a3      	cmp	r3, r4
   1e1a2:	d1fb      	bne.n	1e19c <__aeabi_memset+0x88>
   1e1a4:	bc70      	pop	{r4, r5, r6}
   1e1a6:	4770      	bx	lr
   1e1a8:	460c      	mov	r4, r1
   1e1aa:	4603      	mov	r3, r0
   1e1ac:	e7c2      	b.n	1e134 <__aeabi_memset+0x20>
   1e1ae:	5344      	.short	0x5344
   1e1b0:	61662050 	.word	0x61662050
   1e1b4:	43546c69 	.word	0x43546c69
   1e1b8:	61662048 	.word	0x61662048
   1e1bc:	45476c69 	.word	0x45476c69
   1e1c0:	61662054 	.word	0x61662054
   1e1c4:	55526c69 	.word	0x55526c69
   1e1c8:	6166204e 	.word	0x6166204e
   1e1cc:	6c69      	.short	0x6c69
   1e1ce:	7572      	.short	0x7572
   1e1d0:	612f7473 	.word	0x612f7473
   1e1d4:	732f7070 	.word	0x732f7070
   1e1d8:	6c2f6372 	.word	0x6c2f6372
   1e1dc:	722e6269 	.word	0x722e6269
   1e1e0:	00000073 	.word	0x00000073
   1e1e4:	0001e1ce 	.word	0x0001e1ce
   1e1e8:	00000013 	.word	0x00000013
   1e1ec:	0000005b 	.word	0x0000005b
   1e1f0:	00000005 	.word	0x00000005
   1e1f4:	0001e1ce 	.word	0x0001e1ce
   1e1f8:	00000013 	.word	0x00000013
   1e1fc:	00000064 	.word	0x00000064
   1e200:	00000005 	.word	0x00000005
   1e204:	50494843 	.word	0x50494843
   1e208:	61662038 	.word	0x61662038
   1e20c:	00006c69 	.word	0x00006c69
   1e210:	0001e1ce 	.word	0x0001e1ce
   1e214:	00000013 	.word	0x00000013
   1e218:	00000076 	.word	0x00000076
   1e21c:	00000005 	.word	0x00000005
   1e220:	0001e1ce 	.word	0x0001e1ce
   1e224:	00000013 	.word	0x00000013
   1e228:	0000007c 	.word	0x0000007c
   1e22c:	0000000d 	.word	0x0000000d
   1e230:	0001e1ce 	.word	0x0001e1ce
   1e234:	00000013 	.word	0x00000013
   1e238:	0000007b 	.word	0x0000007b
   1e23c:	00000009 	.word	0x00000009
   1e240:	696e6170 	.word	0x696e6170
   1e244:	2063      	.short	0x2063
   1e246:	6f6e      	.short	0x6f6e
   1e248:	636f6c20 	.word	0x636f6c20
   1e24c:	0a          	.byte	0x0a
   1e24d:	61          	.byte	0x61
   1e24e:	2074      	.short	0x2074
   1e250:	6e696c20 	.word	0x6e696c20
   1e254:	2065      	.short	0x2065
   1e256:	000a      	.short	0x000a
   1e258:	0001e1ce 	.word	0x0001e1ce
   1e25c:	00000013 	.word	0x00000013
   1e260:	00000094 	.word	0x00000094
   1e264:	00000014 	.word	0x00000014
   1e268:	00008827 	.word	0x00008827
   1e26c:	00000004 	.word	0x00000004
   1e270:	00000004 	.word	0x00000004
   1e274:	00008a91 	.word	0x00008a91
   1e278:	00000000 	.word	0x00000000
   1e27c:	0001e278 	.word	0x0001e278
   1e280:	0001e27c 	.word	0x0001e27c
   1e284:	65737361 	.word	0x65737361
   1e288:	6f697472 	.word	0x6f697472
   1e28c:	6166206e 	.word	0x6166206e
   1e290:	64656c69 	.word	0x64656c69
   1e294:	2860203a 	.word	0x2860203a
   1e298:	7466656c 	.word	0x7466656c
   1e29c:	203d3d20 	.word	0x203d3d20
   1e2a0:	68676972 	.word	0x68676972
   1e2a4:	0a602974 	.word	0x0a602974
   1e2a8:	656c2020 	.word	0x656c2020
   1e2ac:	203a7466 	.word	0x203a7466
   1e2b0:	60          	.byte	0x60
   1e2b1:	60          	.byte	0x60
   1e2b2:	0a2c      	.short	0x0a2c
   1e2b4:	67697220 	.word	0x67697220
   1e2b8:	203a7468 	.word	0x203a7468
   1e2bc:	60          	.byte	0x60
   1e2bd:	60          	.byte	0x60
   1e2be:	203a      	.short	0x203a
   1e2c0:	0001e284 	.word	0x0001e284
   1e2c4:	0000002d 	.word	0x0000002d
   1e2c8:	0001e2b1 	.word	0x0001e2b1
   1e2cc:	0000000c 	.word	0x0000000c
   1e2d0:	0001e2bd 	.word	0x0001e2bd
   1e2d4:	00000003 	.word	0x00000003
   1e2d8:	0001e2c0 	.word	0x0001e2c0
   1e2dc:	6e206f6e 	.word	0x6e206f6e
   1e2e0:	006c6c75 	.word	0x006c6c75
   1e2e4:	0001e2dc 	.word	0x0001e2dc
   1e2e8:	00000007 	.word	0x00000007
   1e2ec:	0001e2e4 	.word	0x0001e2e4
   1e2f0:	0001e2f0 	.word	0x0001e2f0
   1e2f4:	74737572 	.word	0x74737572
   1e2f8:	6e796d2f 	.word	0x6e796d2f
   1e2fc:	2f747765 	.word	0x2f747765
   1e300:	2f637273 	.word	0x2f637273
   1e304:	2e62696c 	.word	0x2e62696c
   1e308:	00007372 	.word	0x00007372
   1e30c:	0001e2f4 	.word	0x0001e2f4
   1e310:	00000016 	.word	0x00000016
   1e314:	000000db 	.word	0x000000db
   1e318:	00000011 	.word	0x00000011
   1e31c:	00008d4d 	.word	0x00008d4d
   1e320:	00000004 	.word	0x00000004
   1e324:	00000004 	.word	0x00000004
   1e328:	00008a91 	.word	0x00008a91
   1e32c:	65737361 	.word	0x65737361
   1e330:	6f697472 	.word	0x6f697472
   1e334:	6166206e 	.word	0x6166206e
   1e338:	64656c69 	.word	0x64656c69
   1e33c:	2860203a 	.word	0x2860203a
   1e340:	7466656c 	.word	0x7466656c
   1e344:	203d3d20 	.word	0x203d3d20
   1e348:	68676972 	.word	0x68676972
   1e34c:	0a602974 	.word	0x0a602974
   1e350:	656c2020 	.word	0x656c2020
   1e354:	203a7466 	.word	0x203a7466
   1e358:	60          	.byte	0x60
   1e359:	60          	.byte	0x60
   1e35a:	0a2c      	.short	0x0a2c
   1e35c:	67697220 	.word	0x67697220
   1e360:	203a7468 	.word	0x203a7468
   1e364:	60          	.byte	0x60
   1e365:	60          	.byte	0x60
   1e366:	203a      	.short	0x203a
   1e368:	0001e32c 	.word	0x0001e32c
   1e36c:	0000002d 	.word	0x0000002d
   1e370:	0001e359 	.word	0x0001e359
   1e374:	0000000c 	.word	0x0000000c
   1e378:	0001e365 	.word	0x0001e365
   1e37c:	00000003 	.word	0x00000003
   1e380:	0001e368 	.word	0x0001e368
   1e384:	74736564 	.word	0x74736564
   1e388:	74616e69 	.word	0x74616e69
   1e38c:	206e6f69 	.word	0x206e6f69
   1e390:	20646e61 	.word	0x20646e61
   1e394:	72756f73 	.word	0x72756f73
   1e398:	73206563 	.word	0x73206563
   1e39c:	6563696c 	.word	0x6563696c
   1e3a0:	61682073 	.word	0x61682073
   1e3a4:	64206576 	.word	0x64206576
   1e3a8:	65666669 	.word	0x65666669
   1e3ac:	746e6572 	.word	0x746e6572
   1e3b0:	6e656c20 	.word	0x6e656c20
   1e3b4:	73687467 	.word	0x73687467
   1e3b8:	0001e384 	.word	0x0001e384
   1e3bc:	00000034 	.word	0x00000034
   1e3c0:	0001e3b8 	.word	0x0001e3b8
   1e3c4:	0001e3c4 	.word	0x0001e3c4
   1e3c8:	7375722f 	.word	0x7375722f
   1e3cc:	352f6374 	.word	0x352f6374
   1e3d0:	66613765 	.word	0x66613765
   1e3d4:	39363634 	.word	0x39363634
   1e3d8:	65303866 	.word	0x65303866
   1e3dc:	38366635 	.word	0x38366635
   1e3e0:	31343132 	.word	0x31343132
   1e3e4:	30353066 	.word	0x30353066
   1e3e8:	61333931 	.word	0x61333931
   1e3ec:	39373662 	.word	0x39373662
   1e3f0:	62646661 	.word	0x62646661
   1e3f4:	2f316234 	.word	0x2f316234
   1e3f8:	2f637273 	.word	0x2f637273
   1e3fc:	6362696c 	.word	0x6362696c
   1e400:	2f65726f 	.word	0x2f65726f
   1e404:	7263616d 	.word	0x7263616d
   1e408:	6d2f736f 	.word	0x6d2f736f
   1e40c:	722e646f 	.word	0x722e646f
   1e410:	00000073 	.word	0x00000073
   1e414:	0001e3c8 	.word	0x0001e3c8
   1e418:	00000049 	.word	0x00000049
   1e41c:	00000012 	.word	0x00000012
   1e420:	0000000d 	.word	0x0000000d
   1e424:	656d6f53 	.word	0x656d6f53
   1e428:	656e6f4e 	.word	0x656e6f4e
   1e42c:	00008d45 	.word	0x00008d45
   1e430:	00000004 	.word	0x00000004
   1e434:	00000004 	.word	0x00000004
   1e438:	00009323 	.word	0x00009323
   1e43c:	00000060 	.word	0x00000060
   1e440:	0001e43c 	.word	0x0001e43c
   1e444:	20697073 	.word	0x20697073
   1e448:	73756c66 	.word	0x73756c66
   1e44c:	61662068 	.word	0x61662068
   1e450:	6c69      	.short	0x6c69
   1e452:	552f      	.short	0x552f
   1e454:	73726573 	.word	0x73726573
   1e458:	70754c2f 	.word	0x70754c2f
   1e45c:	502f7970 	.word	0x502f7970
   1e460:	54656e69 	.word	0x54656e69
   1e464:	2f656d69 	.word	0x2f656d69
   1e468:	656e6970 	.word	0x656e6970
   1e46c:	656d6974 	.word	0x656d6974
   1e470:	7375722d 	.word	0x7375722d
   1e474:	796d2d74 	.word	0x796d2d74
   1e478:	7477656e 	.word	0x7477656e
   1e47c:	7375722f 	.word	0x7375722f
   1e480:	74732f74 	.word	0x74732f74
   1e484:	35333737 	.word	0x35333737
   1e488:	64636c2d 	.word	0x64636c2d
   1e48c:	7461622d 	.word	0x7461622d
   1e490:	722d6863 	.word	0x722d6863
   1e494:	72732f73 	.word	0x72732f73
   1e498:	696c2f63 	.word	0x696c2f63
   1e49c:	73722e62 	.word	0x73722e62
   1e4a0:	0001e452 	.word	0x0001e452
   1e4a4:	0000004e 	.word	0x0000004e
   1e4a8:	000000fe 	.word	0x000000fe
   1e4ac:	00000009 	.word	0x00000009
   1e4b0:	20697073 	.word	0x20697073
   1e4b4:	61746164 	.word	0x61746164
   1e4b8:	69616620 	.word	0x69616620
   1e4bc:	0000006c 	.word	0x0000006c
   1e4c0:	0001e452 	.word	0x0001e452
   1e4c4:	0000004e 	.word	0x0000004e
   1e4c8:	000000b0 	.word	0x000000b0
   1e4cc:	00000009 	.word	0x00000009
   1e4d0:	0001e452 	.word	0x0001e452
   1e4d4:	0000004e 	.word	0x0000004e
   1e4d8:	000000f3 	.word	0x000000f3
   1e4dc:	00000009 	.word	0x00000009
   1e4e0:	0001e452 	.word	0x0001e452
   1e4e4:	0000004e 	.word	0x0000004e
   1e4e8:	00000098 	.word	0x00000098
   1e4ec:	0000000d 	.word	0x0000000d
   1e4f0:	20697073 	.word	0x20697073
   1e4f4:	20646d63 	.word	0x20646d63
   1e4f8:	6c696166 	.word	0x6c696166
   1e4fc:	0001e452 	.word	0x0001e452
   1e500:	0000004e 	.word	0x0000004e
   1e504:	00000097 	.word	0x00000097
   1e508:	00000009 	.word	0x00000009
   1e50c:	0001e452 	.word	0x0001e452
   1e510:	0000004e 	.word	0x0000004e
   1e514:	0000009d 	.word	0x0000009d
   1e518:	00000011 	.word	0x00000011
   1e51c:	0001e452 	.word	0x0001e452
   1e520:	0000004e 	.word	0x0000004e
   1e524:	0000009c 	.word	0x0000009c
   1e528:	0000000d 	.word	0x0000000d
   1e52c:	0001e452 	.word	0x0001e452
   1e530:	0000004e 	.word	0x0000004e
   1e534:	000000c5 	.word	0x000000c5
   1e538:	0000002d 	.word	0x0000002d
   1e53c:	0001e452 	.word	0x0001e452
   1e540:	0000004e 	.word	0x0000004e
   1e544:	000000c9 	.word	0x000000c9
   1e548:	0000002d 	.word	0x0000002d
   1e54c:	0001e452 	.word	0x0001e452
   1e550:	0000004e 	.word	0x0000004e
   1e554:	000000d8 	.word	0x000000d8
   1e558:	00000019 	.word	0x00000019
   1e55c:	00000000 	.word	0x00000000

0001e560 <str.0>:
   1e560:	65747461 2074706d 61206f74 77206464     attempt to add w
   1e570:	20687469 7265766f 776f6c66 0001e452     ith overflowR...
   1e580:	0000004e 000000d9 00000019 0001e452     N...........R...
   1e590:	0000004e 000000db 00000019 0001e452     N...........R...
   1e5a0:	0000004e 000000dc 00000019 20697073     N...........spi 
   1e5b0:	74696e69 69616620 0000006c 0001e452     init fail...R...
   1e5c0:	0000004e 00000066 00000009 002d2c01     N...f........,-.
   1e5d0:	0001e5cc 012d2c01 00002d2c 0001e5d4     .....,-.,-......
   1e5e0:	00000007 0001e5e0 008402a2 0001e5e8     ................
   1e5f0:	000000c5 0001e5f0 0000000a 0001e5f8     ................
   1e600:	00002a8a 0001e600 0000ee8a 0001e608     .*..............
   1e610:	0000000e 0001e610 00000000 0001e618     ................
   1e620:	00000008 0001e620 00000005 0001e628     .... .......(...
   1e630:	0001e452 0000004e 00000088 00000009     R...N...........
   1e640:	74737552 756f7420 73206863 6f736e65     Rust touch senso
   1e650:	00000a72 00000000 0001e654 65737361     r.......T...asse
   1e660:	6f697472 6166206e 64656c69 2860203a     rtion failed: `(
   1e670:	7466656c 203d3d20 68676972 0a602974     left == right)`.
   1e680:	656c2020 203a7466 0a2c6060 67697220       left: ``,. rig
   1e690:	203a7468 203a6060 0001e65c 0000002d     ht: ``: \...-...
   1e6a0:	0001e689 0000000c 0001e695 00000003     ................
   1e6b0:	0001e698 20515249 74696e69 69616620     ....IRQ init fai
   1e6c0:	0000006c 0001e6b4 0000000d 0001e6c4     l...............
   1e6d0:	0001e6d0 74737572 7070612f 6372732f     ....rust/app/src
   1e6e0:	756f742f 735f6863 6f736e65 73722e72     /touch_sensor.rs
   1e6f0:	0001e6d4 0000001c 0000003f 00000005     ........?.......
   1e700:	20633269 72646461 0001e6d4 0000001c     i2c addr........
   1e710:	0000004b 00000011 63756f74 74616468     K.......touchdat
   1e720:	61662061 00006c69 0001e6d4 0000001c     a fail..........
   1e730:	00000056 00000009 0001e6d4 0000001c     V...............
   1e740:	0000005a 00000031 64616572 756f7420     Z...1...read tou
   1e750:	61646863 66206174 006c6961 0001e6d4     chdata fail.....
   1e760:	0000001c 00000089 00000005 0001e6d4     ................
   1e770:	0000001c 00000095 00000037 00000000     ........7.......

0001e780 <str.0>:
   1e780:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1e790:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1e7a0:	00000077 0001e6d4 0000001c 00000095     w...............
   1e7b0:	00000024 00000000 00000000 00000000     $...............

0001e7c0 <str.1>:
   1e7c0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1e7d0:	20687469 7265766f 776f6c66 0001e6d4     ith overflow....
   1e7e0:	0000001c 00000095 00000020 0001e6d4     ........ .......
   1e7f0:	0000001c 00000099 00000009 0001e6d4     ................
   1e800:	0000001c 0000009a 00000037 0001e6d4     ........7.......
   1e810:	0000001c 0000009a 00000023 0001e6d4     ........#.......
   1e820:	0000001c 0000009a 0000001f 0001e6d4     ................
   1e830:	0000001c 0000009b 00000037 0001e6d4     ........7.......
   1e840:	0000001c 0000009b 00000023 0001e6d4     ........#.......
   1e850:	0000001c 0000009b 0000001f 0001e6d4     ................
   1e860:	0000001c 0000009c 00000009 0001e6d4     ................
   1e870:	0000001c 0000009e 00000037 0001e6d4     ........7.......
   1e880:	0000001c 0000009e 00000023 0001e6d4     ........#.......
   1e890:	0000001c 0000009e 0000001f 0001e6d4     ................
   1e8a0:	0000001c 0000009f 00000037 0001e6d4     ........7.......
   1e8b0:	0000001c 0000009f 00000023 0001e6d4     ........#.......
   1e8c0:	0000001c 0000009f 0000001f 0001e6d4     ................
   1e8d0:	0000001c 000000a0 00000009 0001e6d4     ................
   1e8e0:	0000001c 000000a4 00000030 0001e6d4     ........0.......
   1e8f0:	0000001c 000000a4 0000001a 0001e6d4     ................
   1e900:	0000001c 000000a4 00000016 0001e6d4     ................
   1e910:	0000001c 000000a3 00000009 0001e6d4     ................
   1e920:	0000001c 000000a6 00000030 0001e6d4     ........0.......
   1e930:	0000001c 000000a6 0000001a 0001e6d4     ................
   1e940:	0000001c 000000a6 00000016 0001e6d4     ................
   1e950:	0000001c 000000a5 00000009 0001e6d4     ................
   1e960:	0000001c 000000aa 0000002d 0001e6d4     ........-.......
   1e970:	0000001c 000000aa 0000001a 0001e6d4     ................
   1e980:	0000001c 000000aa 00000016 0001e6d4     ................
   1e990:	0000001c 000000a9 00000009 0001e6d4     ................
   1e9a0:	0000001c 000000ac 0000002d 0001e6d4     ........-.......
   1e9b0:	0000001c 000000ac 0000001a 0001e6d4     ................
   1e9c0:	0000001c 000000ac 00000016 0001e6d4     ................
   1e9d0:	0000001c 000000ab 00000009 0001e6d4     ................
   1e9e0:	0000001c 000000af 0000000d 0001e6d4     ................
   1e9f0:	0000001c 000000af 0000002c 20633269     ........,...i2c 
   1ea00:	00667562 0001e6d4 0000001c 000000f1     buf.............
   1ea10:	00000005 0001e6d4 0000001c 000000f2     ................
   1ea20:	0000000d 0001e6d4 0000001c 000000f2     ................
   1ea30:	00000005 20633269 6c696166 7375520a     ....i2c fail.Rus
   1ea40:	48432074 0a385049 70696863 00000038     t CHIP8.chip8...
   1ea50:	00000000 0001ea48 00000006 0001ea50     ....H.......P...
   1ea60:	50494843 74732038 65747261 1a120a64     CHIP8 started...
   1ea70:	30302e32 202e4320 62656745 20677265     2.00 C. Egeberg 
   1ea80:	382f3831 3139272d 13810380 55f1c8a8     18/8-'91.......U
   1ea90:	cca80560 738755f0 72276386 9427e000     `....U.s.c'r..'.
   1eaa0:	e287406e e187276e 0c691a68 006b386a     n@..n'..h.i.j8k.
   1eab0:	1a6d026c eda85027 d4dcb4da 003ed023     l.m.'P......#.>.
   1eac0:	cca87c12 008565f0 5284ffc4 ffc4f624     .|...e.....R$...
   1ead0:	1e265284 a1e00160 f736d627 608e4e12     .R&.`...'.6..N.`
   1eae0:	646e7a28 d6277a28 07f02a12 10130040     (znd(z'..*..@...
   1eaf0:	06808080 0681a081 00401580 01409a12     ..........@...@.
   1eb00:	ff409a12 c8129a12 06809080 0681b081     ..@.............
   1eb10:	00401580 0140b212 ff40b212 c812b212     ..@...@...@.....
   1eb20:	b4daeda8 006b386a f36eb4da 046ee287     ....j8k...n...n.
   1eb30:	326ee187 80807a28 c0810680 15800681     ..n2(z..........
   1eb40:	e0120040 e0120140 e012ff40 90805412     @...@...@....T..
   1eb50:	d0810680 15800681 f8120040 f8120140     ........@...@...
   1eb60:	f812ff40 eda85412 026cd4dc d4dc1a6d     @....T....l.m...
   1eb70:	e287cf6e e187206e 7a28196e 3f605412     n...n ..n.(z.T`?
   1eb80:	5027a828 b4daeda8 406ed4dc 7080e387     (.'P......n@...p
   1eb90:	0030e280 608e3212 8a287a28 1166e000     ..0..2.`(z(...f.
   1eba0:	caa80a67 1166e627 c8a81067 0064e627     g...'.f.g...'.d.
   1ebb0:	00660865 19ab0f67 22ab69d4 036069d5     e.f.g....i.".i`.
   1ebc0:	003ea828 19abc613 22ab69d4 027469d5     (.>......i.".it.
   1ebd0:	30340275 19ab4813 22ab69d4 036069d5     u.40.H...i.".i`.
   1ebe0:	003ea828 19abc613 22ab69d4 027669d5     (.>......i.".iv.
   1ebf0:	68131636 69d419ab 69d522ab a8280360     6..h...i.".i`.(.
   1ec00:	c613003e 69d419ab 69d522ab fe75fe74     >......i.".it.u.
   1ec10:	86130034 69d419ab 69d522ab a8280360     4......i.".i`.(.
   1ec20:	c613003e 69d419ab 69d522ab 0036fe76     >......i.".iv.6.
   1ec30:	4813a613 69d522ab 69d52bab 70831a12     ...H.".i.+.i...p
   1ec40:	e283036e 90858084 a1ee066e 036e3214     n.......n....2n.
   1ec50:	4a14a1ee a1ee086e 076e6214 7a14a1ee     ...Jn....bn....z
   1ec60:	02750343 fe750043 02740243 fe740143     C.u.C.u.C.t.C.t.
   1ec70:	50814080 0082ba27 e280086e 92140030     .@.P'...n...0...
   1ec80:	2080076e 0542e282 06429a14 0742b214     n.. ..B...B...B.
   1ec90:	5027ec14 e287fc6e 40883187 50175089     ..'Pn....1.@.P.P
   1eca0:	50814080 ba270271 086e0082 0030e280     .@.Pq.'...n...0.
   1ecb0:	0363f213 0e140275 50814080 ba27fe71     ..c.u....@.Pq.'.
   1ecc0:	086e0082 0030e280 0063f213 0e14fe75     ..n...0...c.u...
   1ecd0:	50814080 ba270270 086e0082 0030e280     .@.Pp.'...n...0.
   1ece0:	0263f213 0e140274 50814080 ba27fe70     ..c.t....@.Pp.'.
   1ecf0:	086e0082 0030e280 0163f213 0e14fe74     ..n...0...c.t...
   1ed00:	94d85027 ee00f08e e280f06e 55f03180     'P......n....1.U
   1ed10:	54d4f1a8 05610176 004007f0 241418f1     ...Tv.a...@....$
   1ed20:	e280f06e 55f03180 54d4f5a8 a0800476     n....1.U...Tv...
   1ed30:	ba27b081 e280f06e d2140030 e3870c6e     ..'.n...0...n...
   1ed40:	d081c080 f06eba27 0030e280 306ee414     ....'.n...0...n0
   1ed50:	ff60e387 15f018f0 01432414 02433a64     ..`......$C.d:C.
   1ed60:	24140064 70837082 e2820c6e b081a080     d..$.p.pn.......
   1ed70:	eda8ba27 e280f06e 24150030 0c42b4da     '...n...0..$..B.
   1ed80:	0042027b 0842fe7b 0442027a b4dafe7a     {.B.{.B.z.B.z...
   1ed90:	806eee00 003107f1 0034d415 0081d415     ..n...1...4.....
   1eda0:	003f0e83 90835615 004fb583 00338c15     ..?..V....O...3.
   1edb0:	e3877415 a5838083 bc15004f a4150033     .t......O...3...
   1edc0:	d415e387 a5838083 bc15004f a4150033     ........O...3...
   1edd0:	9083e387 004fb583 00338c15 e3877415     ......O...3..t..
   1ede0:	4063d415 00413281 b4dad415 b4da027b     ..c@.2A.....{...
   1edf0:	e287f36e 21870c62 1063ee00 00413281     n...b..!..c..2A.
   1ee00:	b4dad415 b4dafe7b e287f36e 21870062     ....{...n...b..!
   1ee10:	2063ee00 00413281 b4dad415 b4da027a     ..c .2A.....z...
   1ee20:	e287f36e 21870862 8063ee00 00413281     n...b..!..c..2A.
   1ee30:	b4dad415 b4dafe7a e287f36e 21870462     ....z...n...b..!
   1ee40:	f0c1ee00 00301280 0c6ee415 e382e387     ......0...n.....
   1ee50:	b4da0e15 004f0e80 0462f215 1416fe7a     ......O...b.z...
   1ee60:	004f0e80 0c62fe15 1416027b 004f0e80     ..O...b.{.....O.
   1ee70:	08620a16 1416027a 004f0e80 0062dc15     ..b.z.....O...b.
   1ee80:	b4dafe7b e287f36e ee002187 70837082     {...n....!...p.p
   1ee90:	e282306e d081c080 eda8ba27 e280f06e     n0......'...n...
   1eea0:	4c160030 3042d4dc 0042027d 2042fe7d     0..L..B0}.B.}.B 
   1eeb0:	1042027c d4dcfe7c 806eee00 003107f1     |.B.|.....n...1.
   1eec0:	00340417 00810417 004f0e83 90837e16     ..4.......O..~..
   1eed0:	004fd583 0033b616 e3879c16 c5838083     ..O...3.........
   1eee0:	ea16004f d0160033 0417e387 c5838083     O...3...........
   1eef0:	ea16004f d0160033 9083e387 004fd583     O...3.........O.
   1ef00:	0033b616 e3879c16 40630417 00413281     ..3.......c@.2A.
   1ef10:	d4dc0417 d4dc027d cf6ee387 3062e287     ....}.....n...b0
   1ef20:	ee002187 32811063 04170041 fe7dd4dc     .!..c..2A.....}.
   1ef30:	e387d4dc e287cf6e 21870062 2063ee00     ....n...b..!..c 
   1ef40:	00413281 d4dc0417 d4dc027c cf6ee387     .2A.....|.....n.
   1ef50:	2062e287 ee002187 32818063 04170041     ..b .!..c..2A...
   1ef60:	fe7cd4dc e387d4dc e287cf6e 21871062     ..|.....n...b..!
   1ef70:	f0c1ee00 00301280 e3871617 e387306e     ......0.....n0..
   1ef80:	3616e382 0e80d4dc 2417004f fe7c9062     ...6....O..$b.|.
   1ef90:	0e804617 3017004f 027d3062 0e804617     .F..O..0b0}..F..
   1efa0:	3c17004f 027ca062 0e804617 0c17004f     O..<b.|..F..O...
   1efb0:	fe7d0062 4f6ed4dc 2187e287 7080ee00     b.}...nO...!...p
   1efc0:	e280036e 80810e80 026e9481 0041e281     n.........n...A.
   1efd0:	0e800170 cda80e80 94d81ef0 ee00f08e     p...............
   1efe0:	19a9006e 1efe1efe 1efe1efe 34ab65f3     n............e.4
   1eff0:	1efe1efe 1efe1efe 017e55f3 7417803e     .........U~.>..t
   1f000:	2382ee00 0f6e3383 30812080 e280be27     ...#.3n.. .0'...
   1f010:	f9a80e80 32d21ef0 40320272 23829a17     .......2r.2@...#
   1f020:	20430273 9a17ee00 02710270 06810680     s.C ....p.q.....
   1f030:	0e810e81 0e810e81 1ef134ab 1ef01ef1     .........4......
   1f040:	ee0065f0 65f0cca8 55f00680 a1e00160     .e.....e...U`...
   1f050:	ee00e017 016e65f1 00824384 10651083     .....en..C....e.
   1f060:	004f5583 004fe582 27650c18 004f5582     .UO...O...e'.UO.
   1f070:	20800c18 e4843081 29f4f017 067675d6     ... .0.....).uv.
   1f080:	00824384 e8651083 004f5583 004fe582     .C....e..UO...O.
   1f090:	03653418 004f5582 20803418 e4843081     .4e..UO..4. .0..
   1f0a0:	29f41818 067675d6 00824384 64651083     ...).uv..C....ed
   1f0b0:	004f5583 004fe582 20805418 e4843081     .UO...O..T. .0..
   1f0c0:	29f44018 067675d6 00824384 0a651083     .@.).uv..C....e.
   1f0d0:	004f5583 30816e18 6018e484 75d629f4     .UO..n.0...`.).u
   1f0e0:	29f10676 ee0075d6 65f1c8a8 003fe481     v..).u.....e..?.
   1f0f0:	c8a80170 ee0055f1 65f3c8a8 258e008e     p....U.....e...%
   1f100:	ee00004f a218003e 358e108e ee00004f     O...>......5O...
   1f110:	55f1caa8 e38eee00 ff630f62 a1e21061     ...U....b.c.a...
   1f120:	3481c418 b0180031 34801061 b0180030     ...41...a..40...
   1f130:	016eee00 0000ee00 00050000 00207050     ..n.........Pp .
   1f140:	00207050 00603060 00603060 00306030     Pp .`0`.`0`.0`0.
   1f150:	00306030 00507020 00507020 00707020     0`0. pP. pP. pp.
   1f160:	00002000 00000000 00000000 00000000     . ..............
   1f170:	00008000 c0000000 80000000 c0000080     ................
   1f180:	c0808080 0c008000 08080808 08080808     ................
   1f190:	08080808 0c0d0808 08080808 08080808     ................
   1f1a0:	08080808 0a0d0808 05050565 0505e505     ........e.......
   1f1b0:	050505e5 0a0ac505 05050565 0505e505     ........e.......
   1f1c0:	050505e5 0a0ac505 08080c05 0d0c050f     ................
   1f1d0:	08080805 0f0e050d 08080c05 0d0c050f     ................
   1f1e0:	08080805 0a0a050d 06650a05 0a0a9505     ..........e.....
   1f1f0:	c5050535 0505350a 05650a95 0a0a9505     5....5....e.....
   1f200:	c5060535 0a0a050a 08050f05 08080808     5...............
   1f210:	050f080c 08080808 08050f08 08080c08     ................
   1f220:	050f0808 0a0a050f 05b50575 c5050505     ........u.......
   1f230:	b505650a 0505e505 05b505e5 05650ac5     .e............e.
   1f240:	b5050505 0a0ad505 08080c05 050d0808     ................
   1f250:	080c050f 0f08050f 0d080805 0c050f05     ................
   1f260:	08080808 0f0a050d 05650f05 350ac505     ..........e....5
   1f270:	650a95e5 0505b005 0ac505b5 0a95e535     ...e........5...
   1f280:	c5050565 070f050f 08d50574 0f0e050f     e.......t.......
   1f290:	050f0805 0808080c 08050d08 0f08050f     ................
   1f2a0:	750f0805 0a07d405 05350a05 0505f505     ...u......5.....
   1f2b0:	d50505b5 0c0d0808 05750f08 0505b505     ..........u.....
   1f2c0:	950505f5 0a0a050a 08080805 080c050d     ................
   1f2d0:	350d0808 0a0ac505 0c950565 0d080808     ...5....e.......
   1f2e0:	08080c05 0a0a050f c5060575 0808050a     ........u.......
   1f2f0:	08080808 0f08050f 08080805 0f080808     ................
   1f300:	06650a05 0a0ad505 050d0c05 0505350a     ..e..........5..
   1f310:	05e50505 0505f505 e50505f5 05050505     ................
   1f320:	0c050a95 0a0a050d 050f0805 08080808     ................
   1f330:	0c050f08 0f08050d 050d0c05 08080808     ................
   1f340:	08050f08 0a0a050f b5050535 05050505     ........5.......
   1f350:	0a950505 0505350a 350a0a95 05050505     .....5.....5....
   1f360:	05b50505 080a9505 08080808 08080808     ................
   1f370:	0f080808 08080808 08080f08 08080808     ................
   1f380:	08080808 3c0f0808 42999942 0f10013c     .......<B..B<...
   1f390:	32328478 10007884 fefc78e0 007884fe     x.22.x...x....x.
   1f3a0:	4843e010 20385049 656e6f64 4948430a     ..CHIP8 done.CHI
   1f3b0:	73203850 6c756f68 6f6e2064 6e652074     P8 should not en
   1f3c0:	73757264 70612f74 72732f70 68632f63     drust/app/src/ch
   1f3d0:	2e387069 00007372 0001f3c1 00000015     ip8.rs..........
   1f3e0:	00000058 00000005 0a79656b 766f2078     X.......key.x ov
   1f3f0:	6c667265 0000776f 0001f3c1 00000015     erflow..........
   1f400:	00000099 00000009 766f2079 6c667265     ........y overfl
   1f410:	0000776f 0001f3c1 00000015 0000009a     ow..............
   1f420:	00000009 0001f3c1 00000015 0000009b     ................
   1f430:	00000015 00000000 00000000 00000000     ................

0001f440 <str.0>:
   1f440:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1f450:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1f460:	00000077 0001f3c1 00000015 0000009b     w...............
   1f470:	00000011 00000000 00000000 00000000     ................

0001f480 <str.1>:
   1f480:	65747461 2074706d 61206f74 77206464     attempt to add w
   1f490:	20687469 7265766f 776f6c66 0001f3c1     ith overflow....
   1f4a0:	00000015 0000009c 00000012 0001f3c1     ................
   1f4b0:	00000015 000000af 00000009 0001f3c1     ................
   1f4c0:	00000015 000000b0 00000009 0001f3c1     ................
   1f4d0:	00000015 000000b1 00000015 0001f3c1     ................
   1f4e0:	00000015 000000b1 00000011 0001f3c1     ................
   1f4f0:	00000015 000000b2 00000012 20646162     ............bad 
   1f500:	657a6973 73746573 20657a69 7265766f     sizesetsize over
   1f510:	776f6c66 666f5f78 74657366 666f5f79     flowx_offsety_of
   1f520:	74657366 0001f3c1 00000015 000000b8     fset............
   1f530:	00000009 000a202c 0001f3c1 00000015     ...., ..........
   1f540:	000000c3 00000012 0001f3c1 00000015     ................
   1f550:	000000ee 00000011 00000000 00000000     ................

0001f560 <str.2>:
   1f560:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1f570:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1f580:	00000077 0001f3c1 00000015 000000ef     w...............
   1f590:	00000012 0001f3c1 00000015 000000f1     ................
   1f5a0:	00000008 0001f3c1 00000015 000000f8     ................
   1f5b0:	0000001f 0001f3c1 00000015 000000f9     ................
   1f5c0:	00000020 0001f3c1 00000015 000000fe      ...............
   1f5d0:	0000000d 0001f3c1 00000015 00000101     ................
   1f5e0:	00000011 20746573 65786970 6620736c     ....set pixels f
   1f5f0:	656c6961 00000064 0001f3c1 00000015     ailed...........
   1f600:	00000112 00000005 0001f3c1 00000015     ................
   1f610:	0000014c 00000018 0001f3c1 00000015     L...............
   1f620:	0000014d 00000017 0001f3c1 00000015     M...............
   1f630:	0000014e 00000021 0001f3c1 00000015     N...!...........
   1f640:	0000014e 00000020 0001f3c1 00000015     N... ...........
   1f650:	0000014e 00000019 0001f3c1 00000015     N...............
   1f660:	0000014f 00000021 0001f3c1 00000015     O...!...........
   1f670:	0000014f 00000020 0001f3c1 00000015     O... ...........
   1f680:	0000014f 0000001a 0001f3c1 00000015     O...............
   1f690:	00000150 00000009 0001f3c1 00000015     P...............
   1f6a0:	00000160 00000009 0001f3c1 00000015     `...............
   1f6b0:	00000161 00000009 0001f3c1 00000015     a...............
   1f6c0:	00000162 00000023 0001f3c1 00000015     b...#...........
   1f6d0:	00000162 00000011 0001f3c1 00000015     b...............
   1f6e0:	00000164 00000010 0001f3c1 00000015     d...............
   1f6f0:	00000167 00000009 0001f3c1 00000015     g...............
   1f700:	0000016c 0000000d 0001f3c1 00000015     l...............
   1f710:	00000171 00000011 0001f3c1 00000015     q...............
   1f720:	00000176 00000015 50494843 6f742038     v.......CHIP8 to
   1f730:	20686375 20746f6e 646e6168 0a64656c     uch not handled.
   1f740:	6c6c6163 60206465 6974704f 3a3a6e6f     called `Option::
   1f750:	72776e75 29287061 6e6f2060 60206120     unwrap()` on a `
   1f760:	656e6f4e 61762060 7365756c 66206970     None` valuespi f
   1f770:	6873756c 69616620 73552f6c 2f737265     lush fail/Users/
   1f780:	7070754c 69502f79 6954656e 702f656d     Luppy/PineTime/p
   1f790:	74656e69 2d656d69 74737572 6e796d2d     inetime-rust-myn
   1f7a0:	2f747765 74737572 3774732f 2d353337     ewt/rust/st7735-
   1f7b0:	2d64636c 63746162 73722d68 6372732f     lcd-batch-rs/src
   1f7c0:	62696c2f 0073722e 0001f779 0000004e     /lib.rs.y...N...
   1f7d0:	000000fe 00000009 0001f779 0000004e     ........y...N...
   1f7e0:	000000f3 00000009 6573552f 4c2f7372     ......../Users/L
   1f7f0:	79707075 61632e2f 2f6f6772 69676572     uppy/.cargo/regi
   1f800:	79727473 6372732f 7469672f 2e627568     stry/src/github.
   1f810:	2d6d6f63 63636531 39393236 65396264     com-1ecc6299db9e
   1f820:	33323863 62696c2f 70696863 2e302d38     c823/libchip8-0.
   1f830:	2f322e31 2f637273 2e62696c 00007372     1.2/src/lib.rs..
   1f840:	0001f7e8 00000056 0000009d 00000014     ....V...........
   1f850:	0001f7e8 00000056 000000d4 00000011     ....V...........
   1f860:	0001f7e8 00000056 000000d5 0000001a     ....V...........

0001f870 <str.0>:
   1f870:	65747461 2074706d 61206f74 77206464     attempt to add w
   1f880:	20687469 7265766f 776f6c66 0001f7e8     ith overflow....
   1f890:	00000056 000000d5 00000011 00000005     V...............
   1f8a0:	0001f89c 4c205d5b 78562044 495b202c     ....[] LD Vx, [I
   1f8b0:	0000005d 0001f8a4 00000001 0001f8a5     ]...............
   1f8c0:	0000000c 0001f8b4 00000000 00000020     ............ ...
   1f8d0:	00000008 00000002 00000000 00000000     ................
   1f8e0:	00000004 00000003 0001f8c8 6362696c     ............libc
   1f8f0:	38706968 4b53205d 78562050 504a205d     hip8] SKP Vx] JP
   1f900:	6e6e6e20 00000040 00000020 0001f8ec      nnn@... .......
   1f910:	00000008 0001f8ec 00000008 0001f7e8     ................
   1f920:	00000056 000001a1 0001f90c 0001f7e8     V...............
   1f930:	00000056 000001a3 0000001d 0001f7e8     V...............
   1f940:	00000056 000001a4 0000002a 0001f7e8     V.......*.......
   1f950:	00000056 000001a4 00000021 0001f7e8     V.......!.......
   1f960:	00000056 000001a4 00000015 444c205d     V...........] LD
   1f970:	5d495b20 7856202c 0001f8a4 00000001      [I], Vx........
   1f980:	0001f96c 0000000c 0001f978 0001f8ec     l.......x.......
   1f990:	00000008 0001f8ec 00000008 0001f7e8     ................
   1f9a0:	00000056 0000019a 0001f98c 0001f7e8     V...............
   1f9b0:	00000056 0000019c 0000001d 0001f7e8     V...............
   1f9c0:	00000056 0000019d 00000035 0001f7e8     V.......5.......
   1f9d0:	00000056 0000019d 0000001e 0001f7e8     V...............
   1f9e0:	00000056 0000019d 00000015 444c205d     V...........] LD
   1f9f0:	202c4220 00007856 0001f8a4 00000001      B, Vx..........
   1fa00:	0001f9ec 0000000a 0001f9f8 0001f8ec     ................
   1fa10:	00000008 0001f8ec 00000008 0001f7e8     ................
   1fa20:	00000056 00000193 0001fa0c 0001f7e8     V...............
   1fa30:	00000056 00000194 0000001b 0001f7e8     V...............
   1fa40:	00000056 00000195 00000011 0001f7e8     V...............
   1fa50:	00000056 00000196 0000001a 0001f7e8     V...............
   1fa60:	00000056 00000196 00000011 0001f7e8     V...............
   1fa70:	00000056 00000197 0000001a 0001f7e8     V...............
   1fa80:	00000056 00000197 00000011 444c205d     V...........] LD
   1fa90:	202c4620 00007856 0001f8a4 00000001      F, Vx..........
   1faa0:	0001fa8c 0000000a 0001fa98 0001f8ec     ................
   1fab0:	00000008 0001f8ec 00000008 0001f7e8     ................
   1fac0:	00000056 0000018f 0001faac 0001f7e8     V...............
   1fad0:	00000056 00000190 0000001b 0001f7e8     V...............
   1fae0:	00000056 00000190 0000001a 00000000     V...............

0001faf0 <str.1>:
   1faf0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1fb00:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1fb10:	41205d77 49204444 7856202c 0001f8a4     w] ADD I, Vx....
   1fb20:	00000001 0001fb11 0000000b 0001fb1c     ................
   1fb30:	0001f8ec 00000008 0001f8ec 00000008     ................
   1fb40:	0001f7e8 00000056 0000018b 0001fb30     ....V.......0...
   1fb50:	0001f7e8 00000056 0000018c 0000002e     ....V...........
   1fb60:	444c205d 2c545320 00785620 0001f8a4     ] LD ST, Vx.....
   1fb70:	00000001 0001fb60 0000000b 0001fb6c     ....`.......l...
   1fb80:	0001f8ec 00000008 0001f8ec 00000008     ................
   1fb90:	0001f7e8 00000056 00000187 0001fb80     ....V...........
   1fba0:	0001f7e8 00000056 00000188 0000001b     ....V...........
   1fbb0:	444c205d 2c544420 00785620 0001f8a4     ] LD DT, Vx.....
   1fbc0:	00000001 0001fbb0 0000000b 0001fbbc     ................
   1fbd0:	0001f8ec 00000008 0001f8ec 00000008     ................
   1fbe0:	0001f7e8 00000056 00000183 0001fbd0     ....V...........
   1fbf0:	0001f7e8 00000056 00000184 0000001b     ....V...........
   1fc00:	444c205d 2c785620 00004b20 0001f8a4     ] LD Vx, K......
   1fc10:	00000001 0001fc00 0000000a 0001fc0c     ................
   1fc20:	0001f8ec 00000008 0001f8ec 00000008     ................
   1fc30:	0001f7e8 00000056 0000017f 0001fc20     ....V....... ...
   1fc40:	0001f7e8 00000056 00000180 00000011     ....V...........
   1fc50:	444c205d 2c785620 00544420 0001f8a4     ] LD Vx, DT.....
   1fc60:	00000001 0001fc50 0000000b 0001fc5c     ....P.......\...
   1fc70:	0001f8ec 00000008 0001f8ec 00000008     ................
   1fc80:	0001f7e8 00000056 0000017b 0001fc70     ....V...{...p...
   1fc90:	0001f7e8 00000056 0000017c 00000011     ....V...|.......
   1fca0:	4b53205d 5620504e 00000078 0001f8a4     ] SKNP Vx.......
   1fcb0:	00000001 0001fca0 00000009 0001fcac     ................
   1fcc0:	0001f8ec 00000008 0001f8ec 00000008     ................
   1fcd0:	0001f7e8 00000056 00000175 0001fcc0     ....V...u.......
   1fce0:	0001f7e8 00000056 00000176 00000021     ....V...v...!...
   1fcf0:	0001f8a4 00000001 0001f8f4 00000008     ................
   1fd00:	0001fcf0 0001f8ec 00000008 0001f8ec     ................
   1fd10:	00000008 0001f7e8 00000056 0000016f     ........V...o...
   1fd20:	0001fd04 0001f7e8 00000056 00000170     ........V...p...
   1fd30:	00000020 5244205d 78562057 7956202c      ...] DRW Vx, Vy
   1fd40:	006e202c 0001f8a4 00000001 0001fd34     , n.........4...
   1fd50:	0000000f 0001fd44 0001f8ec 00000008     ....D...........
   1fd60:	0001f8ec 00000008 0001f7e8 00000056     ............V...
   1fd70:	00000156 0001fd58 0001f7e8 00000056     V...X.......V...
   1fd80:	00000157 0000001d 0001f7e8 00000056     W...........V...
   1fd90:	00000158 0000001d 0001f7e8 00000056     X...........V...
   1fda0:	0000015e 00000026 0001f7e8 00000056     ^...&.......V...
   1fdb0:	0000015e 0000001d 0001f7e8 00000056     ^...........V...
   1fdc0:	00000160 00000021 00000000 00000000     `...!...........

0001fdd0 <str.2>:
   1fdd0:	65747461 2074706d 63206f74 75636c61     attempt to calcu
   1fde0:	6574616c 65687420 6d657220 646e6961     late the remaind
   1fdf0:	77207265 20687469 69642061 6f736976     er with a diviso
   1fe00:	666f2072 72657a20 0000006f 0001f7e8     r of zero.......
   1fe10:	00000056 00000163 00000025 0001f7e8     V...c...%.......
   1fe20:	00000056 00000165 0000002d 00000000     V...e...-.......

0001fe30 <str.3>:
   1fe30:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1fe40:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1fe50:	00000077 0001f7e8 00000056 00000165     w.......V...e...
   1fe60:	00000028 00000000 00000000 00000000     (...............

0001fe70 <str.4>:
   1fe70:	65747461 2074706d 73206f74 74666968     attempt to shift
   1fe80:	66656c20 69772074 6f206874 66726576      left with overf
   1fe90:	5d776f6c 444e5220 2c785620 006b6b20     low] RND Vx, kk.
   1fea0:	0001f8a4 00000001 0001fe93 0000000c     ................
   1feb0:	0001fea0 0001f8ec 00000008 0001f8ec     ................
   1fec0:	00000008 0001f7e8 00000056 00000152     ........V...R...
   1fed0:	0001feb4 0001f7e8 00000056 00000153     ........V...S...
   1fee0:	00000011 504a205d 2c305620 6e6e6e20     ....] JP V0, nnn
   1fef0:	0001f8a4 00000001 0001fee4 0000000c     ................
   1ff00:	0001fef0 0001f8ec 00000008 0001f8ec     ................
   1ff10:	00000008 0001f7e8 00000056 0000014e     ........V...N...
   1ff20:	0001ff04 444c205d 202c4920 006e6e6e     ....] LD I, nnn.
   1ff30:	0001f8a4 00000001 0001ff24 0000000b     ........$.......
   1ff40:	0001ff30 0001f8ec 00000008 0001f8ec     0...............
   1ff50:	00000008 0001f7e8 00000056 0000014a     ........V...J...
   1ff60:	0001ff44 4e53205d 78562045 7956202c     D...] SNE Vx, Vy
   1ff70:	0001f8a4 00000001 0001ff64 0000000c     ........d.......
   1ff80:	0001ff70 0001f8ec 00000008 0001f8ec     p...............
   1ff90:	00000008 0001f7e8 00000056 00000144     ........V...D...
   1ffa0:	0001ff84 0001f7e8 00000056 00000145     ........V...E...
   1ffb0:	00000014 0001f7e8 00000056 00000145     ........V...E...
   1ffc0:	00000021 4853205d 7856204c 7956202c     !...] SHL Vx, Vy
   1ffd0:	0001f8a4 00000001 0001ffc4 0000000c     ................
   1ffe0:	0001ffd0 0001f8ec 00000008 0001f8ec     ................
   1fff0:	00000008 0001f7e8 00000056 0000013f     ........V...?...
   20000:	0001ffe4 0001f7e8 00000056 00000140     ........V...@...
   20010:	00000020 0001f7e8 00000056 00000141      .......V...A...
   20020:	0000001d 0001f7e8 00000056 00000141     ........V...A...
   20030:	00000011 5553205d 56204e42 56202c78     ....] SUBN Vx, V
   20040:	00000079 0001f8a4 00000001 00020034     y...........4...
   20050:	0000000d 00020044 0001f8ec 00000008     ....D...........
   20060:	0001f8ec 00000008 0001f7e8 00000056     ............V...
   20070:	00000139 00020058 0001f7e8 00000056     9...X.......V...
   20080:	0000013a 0000001e 0001f7e8 00000056     :...........V...
   20090:	0000013a 00000038 0001f7e8 00000056     :...8.......V...
   200a0:	0000013b 00000011 4853205d 78562052     ;.......] SHR Vx
   200b0:	7956202c 0001f8a4 00000001 000200a8     , Vy............
   200c0:	0000000c 000200b4 0001f8ec 00000008     ................
   200d0:	0001f8ec 00000008 0001f7e8 00000056     ............V...
   200e0:	00000134 000200c8 0001f7e8 00000056     4...........V...
   200f0:	00000135 0000001f 0001f7e8 00000056     5...........V...
   20100:	00000136 0000001d 0001f7e8 00000056     6...........V...
   20110:	00000136 00000011 5553205d 78562042     6.......] SUB Vx
   20120:	7956202c 0001f8a4 00000001 00020118     , Vy............
   20130:	0000000c 00020124 0001f8ec 00000008     ....$...........
   20140:	0001f8ec 00000008 0001f7e8 00000056     ............V...
   20150:	0000012e 00020138 0001f7e8 00000056     ....8.......V...
   20160:	0000012f 0000001e 0001f7e8 00000056     /...........V...
   20170:	0000012f 00000038 0001f7e8 00000056     /...8.......V...
   20180:	00000130 00000011 4441205d 78562044     0.......] ADD Vx
   20190:	7956202c 0001f8a4 00000001 00020188     , Vy............
   201a0:	0000000c 00020194 0001f8ec 00000008     ................
   201b0:	0001f8ec 00000008 0001f7e8 00000056     ............V...
   201c0:	00000128 000201a8 0001f7e8 00000056     (...........V...
   201d0:	00000129 0000001e 0001f7e8 00000056     )...........V...
   201e0:	00000129 00000038 0001f7e8 00000056     )...8.......V...
   201f0:	0000012a 00000011 4f58205d 78562052     *.......] XOR Vx
   20200:	7956202c 0001f8a4 00000001 000201f8     , Vy............
   20210:	0000000c 00020204 0001f8ec 00000008     ................
   20220:	0001f8ec 00000008 0001f7e8 00000056     ............V...
   20230:	00000124 00020218 0001f7e8 00000056     $...........V...
   20240:	00000125 0000001e 0001f7e8 00000056     %...........V...
   20250:	00000125 00000011 4e41205d 78562044     %.......] AND Vx
   20260:	7956202c 0001f8a4 00000001 00020258     , Vy........X...
   20270:	0000000c 00020264 0001f8ec 00000008     ....d...........
   20280:	0001f8ec 00000008 0001f7e8 00000056     ............V...
   20290:	00000120 00020278 0001f7e8 00000056      ...x.......V...
   202a0:	00000121 0000001e 0001f7e8 00000056     !...........V...
   202b0:	00000121 00000011 524f205d 2c785620     !.......] OR Vx,
   202c0:	00795620 0001f8a4 00000001 000202b8      Vy.............
   202d0:	0000000b 000202c4 0001f8ec 00000008     ................
   202e0:	0001f8ec 00000008 0001f7e8 00000056     ............V...
   202f0:	0000011c 000202d8 0001f7e8 00000056     ............V...
   20300:	0000011d 0000001e 0001f7e8 00000056     ............V...
   20310:	0000011d 00000011 444c205d 2c785620     ........] LD Vx,
   20320:	00795620 0001f8a4 00000001 00020318      Vy.............
   20330:	0000000b 00020324 0001f8ec 00000008     ....$...........
   20340:	0001f8ec 00000008 0001f7e8 00000056     ............V...
   20350:	00000118 00020338 0001f7e8 00000056     ....8.......V...
   20360:	00000119 0000001d 0001f7e8 00000056     ............V...
   20370:	00000119 00000011 4441205d 78562044     ........] ADD Vx
   20380:	6b6b202c 0001f8a4 00000001 00020378     , kk........x...
   20390:	0000000c 00020384 0001f8ec 00000008     ................
   203a0:	0001f8ec 00000008 0001f7e8 00000056     ............V...
   203b0:	00000114 00020398 0001f7e8 00000056     ............V...
   203c0:	00000115 0000001d 0001f7e8 00000056     ............V...
   203d0:	00000115 00000011 444c205d 2c785620     ........] LD Vx,
   203e0:	006b6b20 0001f8a4 00000001 000203d8      kk.............
   203f0:	0000000b 000203e4 0001f8ec 00000008     ................
   20400:	0001f8ec 00000008 0001f7e8 00000056     ............V...
   20410:	00000110 000203f8 0001f7e8 00000056     ............V...
   20420:	00000111 00000011 6e49205d 696c6176     ........] Invali
   20430:	706f2064 0000203a 0001f8a4 00000001     d op: ..........
   20440:	00020428 0000000e 00020438 00000000     (.......8.......
   20450:	00000020 00000008 00000002 00000000      ...............
   20460:	00000000 00000004 00000003 00000001     ................
   20470:	00000020 00000008 00000002 00000000      ...............
   20480:	00000000 00000004 00000003 0002044c     ............L...
   20490:	633a3a3c 3a65726f 63616d3a 3a736f72     <::core::macros:
   204a0:	6e61703a 6d206369 6f726361 00003e73     :panic macros>..
   204b0:	00020490 0000001e 00000005 00000032     ............2...
   204c0:	4553205d 2c785620 00795620 0001f8a4     ] SE Vx, Vy.....
   204d0:	00000001 000204c0 0000000b 000204cc     ................
   204e0:	0001f8ec 00000008 0001f8ec 00000008     ................
   204f0:	0001f7e8 00000056 0000010a 000204e0     ....V...........
   20500:	0001f7e8 00000056 0000010b 00000014     ....V...........
   20510:	0001f7e8 00000056 0000010b 00000021     ....V.......!...
   20520:	4e53205d 78562045 6b6b202c 0001f8a4     ] SNE Vx, kk....
   20530:	00000001 00020520 0000000c 0002052c     .... .......,...
   20540:	0001f8ec 00000008 0001f8ec 00000008     ................
   20550:	0001f7e8 00000056 00000104 00020540     ....V.......@...
   20560:	0001f7e8 00000056 00000105 00000014     ....V...........
   20570:	4553205d 20785620 00006b6b 0001f8a4     ] SE Vx kk......
   20580:	00000001 00020570 0000000a 0002057c     ....p.......|...
   20590:	0001f8ec 00000008 0001f8ec 00000008     ................
   205a0:	0001f7e8 00000056 000000fe 00020590     ....V...........
   205b0:	0001f7e8 00000056 000000ff 00000014     ....V...........
   205c0:	4143205d 6e204c4c 00006e6e 0001f8a4     ] CALL nnn......
   205d0:	00000001 000205c0 0000000a 000205cc     ................
   205e0:	0001f8ec 00000008 0001f8ec 00000008     ................
   205f0:	0001f7e8 00000056 000000f9 000205e0     ....V...........
   20600:	0001f8a4 00000001 0001f8fc 00000008     ................
   20610:	00020600 0001f8ec 00000008 0001f8ec     ................
   20620:	00000008 0001f7e8 00000056 000000f5     ........V.......
   20630:	00020614 5953205d 6e6e2053 0000006e     ....] SYS nnn...
   20640:	0001f8a4 00000001 00020634 00000009     ........4.......
   20650:	00020640 0001f8ec 00000008 0001f8ec     @...............
   20660:	00000008 0001f7e8 00000056 000000f1     ........V.......
   20670:	00020654 20746f6e 6c706d69 6e656d65     T...not implemen
   20680:	00646574 00020490 0000001e 00000002     ted.............
   20690:	00000002 4552205d 00000054 0001f8a4     ....] RET.......
   206a0:	00000001 00020694 00000005 0002069c     ................
   206b0:	0001f8ec 00000008 0001f8ec 00000008     ................
   206c0:	0001f7e8 00000056 000000ec 000206b0     ....V...........
   206d0:	4c43205d 00000053 0001f8a4 00000001     ] CLS...........
   206e0:	000206d0 00000005 000206d8 0001f8ec     ................
   206f0:	00000008 0001f8ec 00000008 0001f7e8     ................
   20700:	00000056 000000e5 000206ec 0001f7e8     V...............
   20710:	00000056 00000093 0000001b 0001f7e8     V...............
   20720:	00000056 00000097 00000009 0001f7e8     V...............
   20730:	00000056 000000bb 0000000d 0001f7e8     V...............
   20740:	00000056 000000be 0000000d 6573552f     V.........../Use
   20750:	4c2f7372 79707075 61632e2f 2f6f6772     rs/Luppy/.cargo/
   20760:	69676572 79727473 6372732f 7469672f     registry/src/git
   20770:	2e627568 2d6d6f63 63636531 39393236     hub.com-1ecc6299
   20780:	65396264 33323863 626d652f 65646465     db9ec823/embedde
   20790:	72672d64 69687061 302d7363 322e352e     d-graphics-0.5.2
   207a0:	6372732f 6f6f632f 722e6472 726e5573     /src/coord.rsUnr
   207b0:	68636165 656c6261 646e6920 00207865     eachable index .
   207c0:	000207ad 00000012 000207c0 0002074c     ............L...
   207d0:	00000061 00000070 00000016              a...p.......

000207dc <_ZN8libchip87CHARBUF17h227c6d0d7e24574cE>:
   207dc:	909090f0 206020f0 10f07020 f0f080f0     ..... `  p......
   207ec:	f010f010 10f09090 f080f010 80f0f010     ................
   207fc:	f0f090f0 40402010 90f090f0 f090f0f0     ..... @@........
   2080c:	90f0f010 e09090f0 e090e090 808080f0     ................
   2081c:	9090e0f0 80f0e090 f0f080f0 8080f080     ................
   2082c:	72656874 73692065 206f6e20 68637573     there is no such
   2083c:	69687420 6120676e 6e612073 71636120      thing as an acq
   2084c:	65726975 6c65722f 65736165 616f6c20     uire/release loa
   2085c:	75722f64 2f637473 61376535 36363466     d/rustc/5e7af466
   2086c:	30386639 36663565 34313238 35306631     9f80e5f682141f05
   2087c:	33393130 37366261 64666139 31623462     0193ab679afdb4b1
   2088c:	6372732f 62696c2f 65726f63 63616d2f     /src/libcore/mac
   2089c:	2f736f72 2e646f6d 00007372 0002085d     ros/mod.rs..]...
   208ac:	00000049 0000000a 00000009 72656874     I...........ther
   208bc:	73692065 206f6e20 68637573 69687420     e is no such thi
   208cc:	6120676e 20612073 656c6572 20657361     ng as a release 
   208dc:	64616f6c 00011feb 00000000 00000001     load............
   208ec:	000123ad 000123b9 000123c3 000208e0     .#...#...#......
   208fc:	00011feb 00000000 00000001 000123ad     .............#..
   2090c:	000123b9 000123c3                       .#...#..

00020914 <_ZN3log6logger3NOP17h5a3de47970f20990E>:
   20914:	00697073 0001e654 65737361 6f697472     spi.T...assertio
   20924:	6166206e 64656c69 2860203a 7466656c     n failed: `(left
   20934:	203d3d20 68676972 0a602974 656c2020      == right)`.  le
   20944:	203a7466 0a2c6060 67697220 203a7468     ft: ``,. right: 
   20954:	203a6060 0002091c 0000002d 00020949     ``: ....-...I...
   20964:	0000000c 00020955 00000003 00020958     ....U.......X...
   20974:	20697073 666e6f63 66206769 006c6961     spi config fail.
   20984:	00020974 0000000f 00020984 00020990     t...............
   20994:	74737572 6e796d2f 2f747765 2f637273     rust/mynewt/src/
   209a4:	2e697073 00007372 00020994 00000016     spi.rs..........
   209b4:	00000050 0000004a 20697073 66206263     P...J...spi cb f
   209c4:	006c6961 000209bc 0000000b 000209c8     ail.............
   209d4:	00020994 00000016 00000057 00000005     ........W.......
   209e4:	20697073 62616e65 6620656c 006c6961     spi enable fail.
   209f4:	000209e4 0000000f 000209f4 00020994     ................
   20a04:	00000016 0000005a 00000037 6f697067     ....Z...7...gpio
   20a14:	69616620 0000006c 00020a10 00000009      fail...........
   20a24:	00020a1c 00020994 00000016 0000005b     ............[...
   20a34:	00000040 00020994 00000016 0000005c     @...........\...
   20a44:	00000040 6575716d 66206575 006c6961     @...mqueue fail.
   20a54:	00020a48 0000000b 00020a54 00020994     H.......T.......
   20a64:	00000016 00000065 00000005 206d6573     ....e.......sem 
   20a74:	6c696166 20697073 6c696166 00020a70     failspi failp...
   20a84:	00000008 00020a80 00020994 00000016     ................
   20a94:	00000069 00000005 00020994 00000016     i...............
   20aa4:	0000006d 00000005 00000000 00020914     m...............
   20ab4:	00000004 00020aac 6e657665 66207174     ........eventq f
   20ac4:	006c6961 00020994 00000016 00000081     ail.............
   20ad4:	00000009 63206f6e 6220646d 00657479     ....no cmd byte.
   20ae4:	00020994 00000016 00000097 00000005     ................
   20af4:	00020994 00000016 00000099 00000016     ................
	...

00020b10 <str.0>:
   20b10:	65747461 2074706d 61206f74 77206464     attempt to add w
   20b20:	20687469 7265766f 776f6c66 20697073     ith overflowspi 
   20b30:	7265766f 776f6c66 00020994 00000016     overflow........
   20b40:	00000099 00000005 00020994 00000016     ................
   20b50:	000000a8 00000012 00020994 00000016     ................
   20b60:	000000c1 00000035 00000000 00000000     ....5...........

00020b70 <str.1>:
   20b70:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   20b80:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   20b90:	00000077 00020994 00000016 000000c4     w...............
   20ba0:	0000000f 20746e69 20697073 6c696166     ....int spi fail
   20bb0:	00020994 00000016 00000101 00000011     ................
   20bc0:	00020994 00000016 00000111 00000015     ................

00020bd0 <str.2>:
   20bd0:	65747461 2074706d 73206f74 72746275     attempt to subtr
   20be0:	20746361 68746977 65766f20 6f6c6672     act with overflo
   20bf0:	00000077 00020994 00000016 0000010f     w...............
   20c00:	00000011 00020994 00000016 00000117     ................
   20c10:	00000011 00020994 00000016 00000124     ............$...
   20c20:	00000009 20646162 20697073 006e656c     ....bad spi len.
   20c30:	00020994 00000016 0000012b 00000005     ........+.......
   20c40:	00020a78 00000008 00020c40 00020994     x.......@.......
   20c50:	00000016 00000141 00000009 00020994     ....A...........
   20c60:	00000016 0000014a 00000009 00020994     ....J...........
   20c70:	00000016 0000014e 00000030 00020994     ....N...0.......
   20c80:	00000016 0000015a 00000005 00020994     ....Z...........
   20c90:	00000016 0000015f 00000017 0001e654     ...._.......T...
   20ca0:	65737361 6f697472 6166206e 64656c69     assertion failed
   20cb0:	2860203a 7466656c 203d3d20 68676972     : `(left == righ
   20cc0:	0a602974 656c2020 203a7466 0a2c6060     t)`.  left: ``,.
   20cd0:	67697220 203a7468 203a6060 00020ca0      right: ``: ....
   20ce0:	0000002d 00020ccd 0000000c 00020cd9     -...............
   20cf0:	00000003 00020cdc 20697073 666e6f63     ........spi conf
   20d00:	66206769 006c6961 00020cf8 0000000f     ig fail.........
   20d10:	00020d08 00020d14 74737572 6e796d2f     ........rust/myn
   20d20:	2f747765 2f637273 2e6c6168 00007372     ewt/src/hal.rs..
   20d30:	00020d18 00000016 00000016 00000009     ................
   20d40:	20697073 62616e65 6620656c 006c6961     spi enable fail.
   20d50:	00020d40 0000000f 00020d50 00020d18     @.......P.......
   20d60:	00000016 00000019 00000009 20697073     ............spi 
   20d70:	74696e69 69616620 0000006c 00020d6c     init fail...l...
   20d80:	0000000d 00020d7c 00020d18 00000016     ....|...........
   20d90:	0000001c 00000009 6f697067 69616620     ........gpio fai
   20da0:	0000006c 00020d98 00000009 00020da4     l...............
   20db0:	00020d18 00000016 00000045 00000009     ........E.......
   20dc0:	00020d18 00000016 0000006c 0000001b     ........l.......

00020dd0 <str.0>:
   20dd0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   20de0:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   20df0:	6c616377 2064656c 74704f60 3a6e6f69     wcalled `Option:
   20e00:	776e753a 28706172 6f206029 2061206e     :unwrap()` on a 
   20e10:	6e6f4e60 76206065 65756c61 6573552f     `None` value/Use
   20e20:	4c2f7372 79707075 61632e2f 2f6f6772     rs/Luppy/.cargo/
   20e30:	69676572 79727473 6372732f 7469672f     registry/src/git
   20e40:	2e627568 2d6d6f63 63636531 39393236     hub.com-1ecc6299
   20e50:	65396264 33323863 6165682f 73656c70     db9ec823/heaples
   20e60:	2e302d73 2f312e35 2f637273 2e636576     s-0.5.1/src/vec.
   20e70:	00007372 00020e1c 00000056 000001e8     rs......V.......
   20e80:	0000000d 00000000 00000000 00000000     ................

00020e90 <str.0>:
   20e90:	65747461 2074706d 61206f74 77206464     attempt to add w
   20ea0:	20687469 7265766f 776f6c66 552f2928     ith overflow()/U
   20eb0:	73726573 70754c2f 2e2f7970 67726163     sers/Luppy/.carg
   20ec0:	65722f6f 74736967 732f7972 672f6372     o/registry/src/g
   20ed0:	75687469 6f632e62 65312d6d 32366363     ithub.com-1ecc62
   20ee0:	62643939 38636539 682f3332 6c706165     99db9ec823/heapl
   20ef0:	2d737365 2e352e30 72732f31 65762f63     ess-0.5.1/src/ve
   20f00:	73722e63 00000000 00000000 00000000     c.rs............

00020f10 <str.0>:
   20f10:	65747461 2074706d 73206f74 72746275     attempt to subtr
   20f20:	20746361 68746977 65766f20 6f6c6672     act with overflo
   20f30:	00000077 00020eae 00000056 00000066     w.......V...f...
   20f40:	00000009 00000000 00000000 00000000     ................

00020f50 <str.1>:
   20f50:	65747461 2074706d 61206f74 77206464     attempt to add w
   20f60:	20687469 7265766f 776f6c66 00020eae     ith overflow....
   20f70:	00000056 0000003e 0000000c 00020eae     V...>...........
   20f80:	00000056 0000002d 00000009 00020eae     V...-...........
   20f90:	00000056 0000007e 00000011 0000a7c1     V...~...........
   20fa0:	00000000 00000001 00014bfb 0000a705     .........K......
   20fb0:	00000002 00000002 00017409 6c6c6163     .........t..call
   20fc0:	60206465 75736552 3a3a746c 72776e75     ed `Result::unwr
   20fd0:	29287061 6e6f2060 206e6120 72724560     ap()` on an `Err
   20fe0:	61762060 6465756c 20776172 636f6c62     ` valuedraw bloc
   20ff0:	6620736b 726c6961 2f747375 74656970     ks failrust/piet
   21000:	626d652d 65646465 69702f64 652d7465     -embedded/piet-e
   21010:	6465626d 2d646564 70617267 73636968     mbedded-graphics
   21020:	6372732f 7369642f 79616c70 0073722e     /src/display.rs.
   21030:	00020ff7 00000038 00000080 00000005     ....8...........
   21040:	6576656e 73757272 69702f74 652d7465     neverrust/piet-e
   21050:	6465626d 2f646564 74656970 626d652d     mbedded/piet-emb
   21060:	65646465 72672d64 69687061 732f7363     edded-graphics/s
   21070:	622f6372 68637461 0073722e 00021045     rc/batch.rs.E...
   21080:	00000036 000000be 00000019 00021045     6...........E...
   21090:	00000036 000000c3 0000001d 00000000     6...............

000210a0 <str.0>:
   210a0:	65747461 2074706d 61206f74 77206464     attempt to add w
   210b0:	20687469 7265766f 776f6c66 00021045     ith overflowE...
   210c0:	00000036 000000d5 00000015 00021045     6...........E...
   210d0:	00000036 00000104 00000019 00021045     6...........E...
   210e0:	00000036 00000109 0000001d 00021045     6...........E...
   210f0:	00000036 0000011d 00000015 6573552f     6.........../Use
   21100:	4c2f7372 79707075 61632e2f 2f6f6772     rs/Luppy/.cargo/
   21110:	69676572 79727473 6372732f 7469672f     registry/src/git
   21120:	2e627568 2d6d6f63 63636531 39393236     hub.com-1ecc6299
   21130:	65396264 33323863 626d652f 65646465     db9ec823/embedde
   21140:	72672d64 69687061 302d7363 322e352e     d-graphics-0.5.2
   21150:	6372732f 6972702f 6974696d 2f736576     /src/primitives/
   21160:	74636572 6c676e61 73722e65 000210fc     rectangle.rs....
   21170:	00000070 000000c0 00000032 00000000     p.......2.......

00021180 <str.0>:
   21180:	65747461 2074706d 61206f74 77206464     attempt to add w
   21190:	20687469 7265766f 776f6c66 000210fc     ith overflow....
   211a0:	00000070 000000c2 00000031 00000000     p.......1.......

000211b0 <str.1>:
   211b0:	65747461 2074706d 73206f74 72746275     attempt to subtr
   211c0:	20746361 68746977 65766f20 6f6c6672     act with overflo
   211d0:	00000077 000210fc 00000070 000000c4     w.......p.......
   211e0:	00000031 000210fc 00000070 000000c6     1.......p.......
   211f0:	00000031 65707845 64657463 72747320     1...Expected str
   21200:	00656b6f 000210fc 00000070 000000cc     oke.....p.......
   21210:	00000019 000210fc 00000070 000000d5     ........p.......
   21220:	0000000d 000210fc 00000070 000000da     ........p.......
   21230:	00000011 6573552f 4c2f7372 79707075     ..../Users/Luppy
   21240:	61632e2f 2f6f6772 69676572 79727473     /.cargo/registry
   21250:	6372732f 7469672f 2e627568 2d6d6f63     /src/github.com-
   21260:	63636531 39393236 65396264 33323863     1ecc6299db9ec823
   21270:	6165682f 73656c70 2e302d73 2f312e35     /heapless-0.5.1/
   21280:	2f637273 2e636576 00007372 00021234     src/vec.rs..4...
   21290:	00000056 00000066 00000009 00000000     V...f...........

000212a0 <str.0>:
   212a0:	65747461 2074706d 61206f74 77206464     attempt to add w
   212b0:	20687469 7265766f 776f6c66 00021234     ith overflow4...
   212c0:	00000056 0000003e 0000000c 00021234     V...>.......4...
   212d0:	00000056 0000007e 00000011 00000000     V...~...........

000212e0 <str.1>:
   212e0:	65747461 2074706d 73206f74 72746275     attempt to subtr
   212f0:	20746361 68746977 65766f20 6f6c6672     act with overflo
   21300:	00000077 2f637273 6362696c 2f65726f     w...src/libcore/
   21310:	2f6d756e 32636564 2f746c66 66776172     num/dec2flt/rawf
   21320:	73722e70 65646e69 756f2078 666f2074     p.rsindex out of
   21330:	756f6220 3a73646e 65687420 6e656c20      bounds: the len
   21340:	20736920 00000000 00000020 00000008      is .... .......
   21350:	00000002 00000000 00000000 00000002     ................
   21360:	00000003 2f637273 6362696c 2f65726f     ....src/libcore/
   21370:	63696e75 2f65646f 6e697270 6c626174     unicode/printabl
   21380:	73722e65 00000000 00000020 00000004     e.rs.... .......
   21390:	00000002 00000000 00000002 00000000     ................
   213a0:	00000003 00000000 00000020 00000008     ........ .......
   213b0:	00000002 00000000 00000001 00000001     ................
   213c0:	00000003 002e2e60 000213c5 00000002     ....`...........
   213d0:	65726c61 20796461 72726f62 6465776f     already borrowed
   213e0:	68772029 73206e65 6963696c 6020676e     ) when slicing `
   213f0:	72616843 46797254 456d6f72 726f7272     CharTryFromError
   21400:	6f636544 74556564 45363166 726f7272     DecodeUtf16Error

00021410 <_ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE>:
   21410:	00010201 00000000 00000000 00000000     ................
   21420:	72657469 20202020 2e2e202c 65757274     iter    , ..true
   21430:	72657449 203d3c20 61746164 646e696b     Iter <= datakind
   21440:	746e616d 73756c70 6f72655a 79706f43     mantplusZeroCopy
   21450:	7373654c 65646f63 65707954 656e6f44     LesscodeTypeDone
   21460:	72616843 6b636142 68746f42 6d657449     CharBackBothItem
   21470:	656c6966 656e696c 7466654c 6c696174     filelineLefttail
   21480:	656b6177 706f7264 32783875 32783869     wakedropu8x2i8x2
   21490:	34783875 34783869 38783875 38783869     u8x4i8x4u8x8i8x8
   214a0:	6c6c6163 60206465 6974704f 3a3a6e6f     called `Option::
   214b0:	72776e75 29287061 6e6f2060 60206120     unwrap()` on a `
   214c0:	656e6f4e 61762060 0065756c 00021304     None` value.....
   214d0:	00000000 0000203a 00021304 00000000     ....: ..........
   214e0:	000214d4 00000002 0001775f 00000000     ........_w......
   214f0:	00000001 000177af 74756220 65687420     .....w.. but the
   21500:	646e6920 69207865 00002073 00021324      index is ..$...
   21510:	00000020 000214f8 00000012 0001775f      ..........._w..
   21520:	0000000c 00000004 000179f7 00017d4d     .........y..M}..
   21530:	00017dfd 202c0a2c 2c280a28 30783029     .}..,., (.(,)0x0
   21540:	30313030 30333032 30353034 30373036     0010203040506070
   21550:	31393038 31313130 31333132 31353134     8091011121314151
   21560:	31373136 32393138 32313230 32333232     6171819202122232
   21570:	32353234 32373236 33393238 33313330     4252627282930313
   21580:	33333332 33353334 33373336 34393338     2333435363738394
   21590:	34313430 34333432 34353434 34373436     0414243444546474
   215a0:	35393438 35313530 35333532 35353534     8495051525354555
   215b0:	35373536 36393538 36313630 36333632     6575859606162636
   215c0:	36353634 36373636 37393638 37313730     4656667686970717
   215d0:	37333732 37353734 37373736 38393738     2737475767778798
   215e0:	38313830 38333832 38353834 38373836     0818283848586878
   215f0:	39393838 39313930 39333932 39353934     8899091929394959
   21600:	39373936 00393938 0001775f 00000004     6979899._w......
   21610:	00000004 00017e21 00017e27 00017e2d     ....!~..'~..-~..
   21620:	2f637273 6362696c 2f65726f 2f746d66     src/libcore/fmt/
   21630:	2e646f6d 00007372 00021620 00000016     mod.rs.. .......
   21640:	0000043b 00000011 00021620 00000016     ;....... .......
   21650:	00000445 00000024 2f637273 6362696c     E...$...src/libc
   21660:	2f65726f 63696c73 6f6d2f65 73722e64     ore/slice/mod.rs
   21670:	65646e69 6f202078 6f207475 61722066     index  out of ra
   21680:	2065676e 20726f66 63696c73 666f2065     nge for slice of
   21690:	6e656c20 20687467 00021670 00000006      length p.......
   216a0:	00021676 00000022 00021658 00000018     v..."...X.......
   216b0:	00000a72 00000005 63696c73 6e692065     r.......slice in
   216c0:	20786564 72617473 61207374 62202074     dex starts at  b
   216d0:	65207475 2073646e 00207461 000216b8     ut ends at .....
   216e0:	00000016 000216ce 0000000d 00021658     ............X...
   216f0:	00000018 00000a78 00000005 696e6966     ....x.......fini
   21700:	64656873 73796168 6b636174 79622820     shedhaystack (by
   21710:	20736574 6167654e 65766974 69736f50     tes NegativePosi
   21720:	65766974 65746e69 6c617267 61706e55     tiveintegralUnpa
   21730:	64656b63 69666e49 6574696e 756e694d     ckedInfiniteMinu
   21740:	77615273 7265764f 776f6c66 6b636162     sRawOverflowback
   21750:	72657469 6f746e49 72657449 61636f6c     iterIntoIterloca
   21760:	6e6f6974 61636f4c 6e6f6974 72616573     tionLocationsear
   21770:	72656863 69736f70 6e6f6974 74697263     cherpositioncrit
   21780:	736f705f 656e694c 796e4173 57776152     _posLinesAnyRawW
   21790:	72656b61 6f6c6c41 72724563 38746e69     akerAllocErrint8
   217a0:	745f3478 2f637273 6362696c 2f65726f     x4_tsrc/libcore/
   217b0:	2f727473 2e646f6d 2e5b7372 625d2e2e     str/mod.rs[...]b
   217c0:	20657479 65646e69 69202078 756f2073     yte index  is ou
   217d0:	666f2074 756f6220 2073646e 6020666f     t of bounds of `
   217e0:	000217bf 0000000b 000217ca 00000016     ................
   217f0:	000213c4 00000001 000217a4 00000016     ................
   21800:	00000853 00000009 69676562 3d3c206e     S.......begin <=
   21810:	646e6520 00002820 00021808 0000000e      end (..........
   21820:	00021434 00000004 000213e0 00000010     4...............
   21830:	000213c4 00000001 000217a4 00000016     ................
   21840:	00000857 00000005 000217a4 00000016     W...............
   21850:	00000868 0000000e 20736920 20746f6e     h....... is not 
   21860:	68632061 62207261 646e756f 3b797261     a char boundary;
   21870:	20746920 69207369 6469736e 20292065      it is inside ) 
   21880:	6020666f 000217bf 0000000b 00021858     of `........X...
   21890:	00000026 0002170c 00000008 0002187e     &...........~...
   218a0:	00000006 000213c4 00000001 000217a4     ................
   218b0:	00000016 0000086a 00000005 00021364     ....j.......d...
   218c0:	00000020 0000001a 00000028 05030100      .......(.......
   218d0:	03060605 08080607 1c0a1109 140c190b     ................
   218e0:	0d0e120d 0310040f 09131212 05170116     ................
   218f0:	03190218 021c071a 161f011d 042b0320     ............ .+.
   21900:	0b2d022c 0330012e 01320231 02a902a7     ,.-...0.1.2.....
   21910:	08ab04aa 05fb02fa 03fe04fd 78ad09ff     ...............x
   21920:	a28d8b79 8b585730 1d1c908c 4b0f0edd     y...0WX........K
   21930:	2efcfb4c 5d5c3f2f 84e2b55f 92918e8d     L.../?\]_.......
   21940:	bbbab1a9 cac9c6c5 ffe5e4de 12110400     ................
   21950:	37343129 493d3b3a 8e845d4a b4b1a992     )147:;=IJ]......
   21960:	cac6bbba e5e4cfce 0e0d0400 31291211     ..............)1
   21970:	453b3a34 5e4a4946 91846564 cec99d9b     4:;EFIJ^de......
   21980:	29110dcf 64574945 a9918d65 c5bbbab4     ...)EIWde.......
   21990:	e5e4dfc9 110d04f0 65644945 b2848180     ........EIde....
   219a0:	d5bfbebc 83f1f0d7 a6a48b85 c7c5bfbe     ................
   219b0:	dbdacfce cdbd9848 49cfcec6 59574f4e     ....H......INOWY
   219c0:	8e895f5e b7b6b18f c7c6c1bf 171611d7     ^_..............
   219d0:	f7f65c5b 0d80fffe dfde716d 6e1f0f0e     [\......mq.....n
   219e0:	5f1d1c6f afae7e7d 16fabcbb 461f1e17     o.._}~.........F
   219f0:	584f4e47 7e5e5c5a d4c5b57f f1f0dcd5     GNOXZ\^~........
   21a00:	8f7372f5 97967574 2e265f2f b7afa72f     .rs.tu../_&./...
   21a10:	d7cfc7bf 97409adf 1f8f3098 ffcec1c0     ......@..0......
   21a20:	5b5a4f4e 100f0807 efee2f27 3d376f6e     NOZ[....'/..no7=
   21a30:	9045423f 53fffe91 c9c87567 d9d8d1d0     ?BE....Sgu......
   21a40:	00fffee7 82225f20 448204df 06041b08     .... _"....D....
   21a50:	0eac8111 1e35ab80 03e08015 04010819     ......5.........
   21a60:	0434042f 07010307 0a110706 07120f50     /.4.........P...
   21a70:	04020855 03090a1c 03070308 03030302     U...............
   21a80:	0305040c 0e01060b 033a0515 05060711     ..........:.....
   21a90:	07570710 0d150702 03430450 0401032d     ..W.....P.C.-...
   21aa0:	0c0f0611 251d043a 046d205f c880256a     ....:..%_ m.j%..
   21ab0:	03b08205 fd82061a 15075903 1409170b     .........Y......
   21ac0:	6a0c140c 1a060a06 2b075906 2c0a4605     ...j.....Y.+.F.,
   21ad0:	01040c04 2c0b3103 0b061a04 06ac8003     .....1.,........
   21ae0:	411f060a 032d044c 033c0874 073c030f     ...AL.-.t.<...<.
   21af0:	052b0838 1811ff82 2d112f08 21102003     8.+....../.-. .!
   21b00:	048c800f 0b199782 05948815 073b052f     ............/.;.
   21b10:	09180e02 7430b080 1ad6800c ff80050c     ......0t........
   21b20:	05b68005 c69b0c24 1030d20a 37038d84     ....$.....0....7
   21b30:	145c8109 8008b880 043530c7 0838060a     ..\......05...8.
   21b40:	060c0846 031e0b74 0959045a 1c188380     F...t...Z.Y.....
   21b50:	4809160a 068a8008 170ca4ab 04a13104     ...H.........1..
   21b60:	0726da81 8005050c 6d8111a5 2a287810     ..&........m.x(*
   21b70:	80044c06 be80048d 0f031b03 0106000d     .L..............
   21b80:	04010301 09080802 0b050a02 11011002     ................
   21b90:	13051204 15021411 19021702 1d051c04     ................
   21ba0:	6a012408 bc026b03 d402d102 d609d50c     .$.j.k..........
   21bb0:	da02d702 e105e001 ee02e802 f904f020     ............ ...
   21bc0:	0c02fa06 4e3e3b27 9e9e8f4f 0907069f     ....';>NO.......
   21bd0:	563e3d36 04d1d0f3 37361814 35bd5756     6=>V......67VW.5
   21be0:	12e0cfce 9e8e8987 110e0d04 34312912     .............)14
   21bf0:	4946453a 644f4e4a b65c5a65 a81c1bb7     :EFIJNOdeZ\.....
   21c00:	09d9d8a9 a8919037 3e3b0a07 928f6966     ....7.....;>fi..
   21c10:	efee5f6f 9b9a625a 9d552827 a4a3a1a0     o_..Zb..'(U.....
   21c20:	baada8a7 0b06c4bc 3a1d150c a651453f     ...........:?EQ.
   21c30:	a0cdcca7 221a1907 c53f3e25 232004c6     ......."%>?... #
   21c40:	33282625 4a483a38 5553504c 5c5a5856     %&(38:HJLPSUVXZ\
   21c50:	6563605e 78736b66 a48a7f7d c0b0afaa     ^`cefksx}.......
   21c60:	a3720cd0 6ecccba4 7b225e6f 2d040305     ..r....no^"{...-
   21c70:	01046503 82802e2f 0f31031d 0924041c     .e../.....1...$.
   21c80:	052b051e 2a0e0444 2406aa80 28042404     ..+.D..*...$.$.(
   21c90:	010b3408 37819080 080a1609 03399880     .4.....7......9.
   21ca0:	30090863 03210516 4001051b 054b0438     c..0..!....@8.K.
   21cb0:	070a042f 20400709 090c0427 053a0336     /.....@ '...6.:.
   21cc0:	0c04071a 37495007 07330d33 810a082e     .....PI73.3.....
   21cd0:	81801f26 802a0828 4e091786 430f1e04     &...(.*....N...C
   21ce0:	0a07190e 27094706 3f0b7509 3b062a41     .....G.'.u.?A*.;
   21cf0:	51060a05 10050106 8b800503 08482060     ...Q........` H.
   21d00:	5ea6800a 0a0b4522 39130d06 2c360a07     ...^"E.....9..6,
   21d10:	c0801004 0c53643c 45a08001 5308481b     ....<dS....E.H.S
   21d20:	0781391d 031d0a46 03374947 060a080e     .9..F...GI7.....
   21d30:	810a0739 c7801936 9b830d32 800b7566     9...6...2...fu..
   21d40:	84bc8ac4 82d18f2f 82b9a147 042a0739     ..../...G...9.*.
   21d50:	0a266002 05280a46 5bb08213 39044b65     .`&.F.(....[eK.9
   21d60:	04401107 08f8971c 0da5f382 03311f81     ..@...........1.
   21d70:	81080411 6b04898c 09030d05 60931007     .......k.......`
   21d80:	730af680 46176e08 0c149a80 80190957     ...s.n.F....W...
   21d90:	03478187 150f4285 802b5085 1a032dd5     ..G..B...P+..-..
   21da0:	70810204 8501053a 29d78000 040a044c     ...p:......)L...
   21db0:	44118302 c2803d4c 0401063c 341b0555     ...DL=..<...U..4
   21dc0:	2c0e8102 560c6404 5d030d0a 1d393d03     ...,.d.V...].=9.
   21dd0:	09042c0d 060e0207 d6839a80 0b030d0a     .,..............
   21de0:	590c7405 0c140c07 0a083804 1e082806     .t.Y.....8...(..
   21df0:	31037752 0ca68003 05030414 85060d03     Rw.1............
   21e00:	6372736a 62696c2f 65726f63 696e752f     jsrc/libcore/uni
   21e10:	65646f63 646f6d2f 0073722e 00021e01     code/mod.rs.....
   21e20:	0000001a 00000038 0000000f 00021e01     ....8...........
   21e30:	0000001a 00000039 00000010              ....9.......

00021e3c <_ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E>:
   21e3c:	1b150f04 17120319 0e000011 00000016     ................
	...
   21e64:	00130600 00000000 00000000 00000000     ................
   21e74:	00000000 07020000 0c08000a 1a181c1d     ................
	...
   21e94:	01050000 00000000 00000000 00000000     ................
   21ea4:	00000000 10000000 00000000 0009000b     ................
   21eb4:	                                         ...

00021eb7 <_ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E>:
	...
   21ed3:	00120f00 00000000 00000000 00000000     ................
   21ee3:	0000001f 00000000 00000000 00000000     ................
   21ef3:	1d664649 00000000 00000000 00000000     IFf.............
   21f03:	00003e8a 00000000 00000000 4b000000     .>.............K
   21f13:	00000053 00000000 00000000 42236700     S............g#B
	...
   21f2f:	0000003d 00230000 00000000 00000000     =.....#.........
   21f3f:	2d000075 00000000 00000000 00000000     u..-............
   21f4f:	003c4e82 00000000 00000000 63000000     .N<............c
   21f5f:	25000000 00005a00 00000000 00368100     ...%.Z........6.
   21f6f:	00000300 00000000 00000000 0000002f     ............/...
   21f7f:	00000000 00001000 13000000 00000800     ................
	...
   21f97:	43000000 89007200 00000000 00000000     ...C.r..........
   21fa7:	00070000 057d0000 37003f18 64400987     ......}..?.7..@d
   21fb7:	00210000 00000000 00000000 00000000     ..!.............
   21fc7:	4100000a 00000000 00000000 00000000     ...A............
   21fd7:	0030000c 0000005c 00717719 44354760     ..0.\....wq.`G5D
   21fe7:	7400002e 2c651139 507f5e51 34000000     ...t9.e,Q^.P...4
   21ff7:	00000031 00000053 3a000000 00000000     1...S......:....
   22007:	88001a38 696b2b5f 845d4f5d 14682a80     8..._+ki]O]..*h.
   22017:	0017003b 00000000 00000000 00000000     ;...............
   22027:	57000055 83000000 00000000 00000000     U..W............
   22037:	00000059 26000000 00161b6e 00000000     Y......&n.......
   22047:	001c4a6d 00000000 00000000 00002400     mJ...........$..
   22057:	0052007c 0015067b 48000000 00000000     |.R.{......H....
   22067:	2776287e 2200296c 0d610e5b 04627056     ~(v'l)."[.a.Vpb.
   22077:	02782085 1e7a0000 00540179 00000033     . x...z.y.T.3...
   22087:	00587386 0b6f454d 3200006a 00004c6c     .sX.MEo.j..2lL..
   22097:	00008a89 3e8a8a8a 00000000 00000000     .......>........
	...

000220a8 <_ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E>:
	...
   220b0:	00000001 00000000 0000000d 00000000     ................
   220c0:	0000001c 00000000 00000040 00000000     ........@.......
   220d0:	000000b6 00000000 000000bf 00000000     ................
   220e0:	000003f8 00000000 000007f0 00000000     ................
   220f0:	000007ff 00000000 00001000 00000000     ................
   22100:	00001e00 00000000 00003800 00000000     .........8......
   22110:	00003f00 00000000 00007f80 00000000     .?..............
   22120:	00008000 00000000 0001ffc0 00000000     ................
   22130:	0003ff80 00000000 00078000 00000000     ................
   22140:	007f0000 00000000 00802001 00000000     ......... ......
   22150:	00a30000 00000000 037ffc00 00000000     ................
   22160:	06000000 00000000 07ff0000 00000000     ................
   22170:	09800000 00000000 0e000000 00000000     ................
   22180:	0e7e0080 00000000 20002064 00000000     ..~.....d . ....
   22190:	200ffe40 00000000 30000001 00000000     @.. .......0....
   221a0:	40000000 00000000 4000005c 00000000     ...@....\..@....
   221b0:	60000000 00000000 805c8400 00000000     ...`......\.....
   221c0:	c0000000 00000000 e0000000 00000000     ................
   221d0:	00000000 00000001 0cf00000 00000001     ................
   221e0:	00603044 0000000c 00603dc1 0000000c     D0`......=`.....
   221f0:	0080201e 0000000c 00c0201e 0000000c     . ....... ......
   22200:	00fe21fe 0000000c 00000000 00000020     .!.......... ...
   22210:	00000000 00000060 00000844 00000060     ....`...D...`...
   22220:	00000000 000000f0 00000060 00000200     ........`.......
   22230:	f9ffff7f 000007db 80000000 000007f8     ................
   22240:	e0000000 00000fbc 00000000 00002120     ............ !..
   22250:	00000003 00003b3c 00000fe7 00003c00     ....<;.......<..
   22260:	9fc00000 00003d9f fbc00000 00003eef     .....=.......>..
   22270:	00000000 00003fc0 00000000 0000f000     .....?..........
   22280:	00000000 0000fc00 f8000010 0000fffe     ................
   22290:	0000ffff 0000ffff ffffffff 0000ffff     ................
   222a0:	fffff800 00010000 00000000 0001ffc0     ................
   222b0:	ffff0000 0001ffff 00000000 00030000     ................
   222c0:	00000000 00038000 00000000 0003a340     ............@...
   222d0:	00000000 00080000 000c0000 000c0000     ................
   222e0:	00000004 000ff800 00000000 00180000     ................
   222f0:	001c0000 001c0000 c3000000 001e0001     ................
   22300:	00000000 001f0000 00800001 001f1fc0     ................
   22310:	00000007 001fef80 ffffffff 00201fff     .............. .
   22320:	00023986 00230000 00000002 00403000     .9....#......0@.
   22330:	00000000 00667e00 fffc0000 006dfcff     .....~f.......m.
   22340:	00000000 007f0000 00000000 00bf2800     .............(..
   22350:	00000000 00cff000 03000000 02a00000     ................
   22360:	fff70000 031021fd 00000003 06780000     .....!........x.
   22370:	00000000 06ff8000 00000000 07c00000     ................
   22380:	00000000 07f20000 00000000 0e040187     ................
   22390:	00000006 10000000 00001008 10000000     ................
   223a0:	00000007 14000000 0000000f 17f00000     ................
   223b0:	00000000 1ff20000 feffe0df 1fffffff     ................
   223c0:	00000000 20000000 00000000 200ff800     ....... ....... 
   223d0:	00000007 33c80000 00000000 3fb00000     .......3.......?
   223e0:	00000000 3ff78000 00000004 40000000     .......?.......@
   223f0:	0080201e 4000000c 00000000 40d38000     . .....@.......@
   22400:	00000002 50000000 00000003 58000000     .......P.......X
   22410:	00000000 66fde000 000007fe 79f80000     .......f.......y
   22420:	00000003 7fc00000 00000000 7ffe0000     ................
   22430:	00000000 7fff0000 00000000 80000000     ................
   22440:	0000007f 80000000 00000030 8003ffff     ........0.......
   22450:	0000f06e 87000000 00000002 90000000     n...............
   22460:	7f400000 9ff81fe5 00000000 a5f90000     ..@.............
   22470:	00000000 a7f80000 00000000 b03c8000     ..............<.
   22480:	00000000 b47e0000 00000000 bf7f0000     ......~.........
   22490:	fffe0000 bfffffff 00000011 c0000000     ................
   224a0:	00000000 c19d0000 00000002 d0000000     ................
   224b0:	00000000 f807c3a0 ffffffff f87fffff     ................
   224c0:	ffffffff fbffffff 000021be fc00000c     .........!......
   224d0:	00000000 ff000000 00000002 ff000000     ................
   224e0:	00020000 ffff0000 fff80000 fffffffb     ................
   224f0:	00000000 ffffffff ffffffff ffffffff     ................
   22500:	00000020 00006425 6c363025 00002075      ...%d..%06lu ..

00022510 <nrf52_hal_i2cs>:
   22510:	00000000 20000108                       ....... 

00022518 <nrf52_hal_spis>:
   22518:	2000ddc0 00000000 00000000 65737341     ... ........Asse
   22528:	40207472 25783020 00000a78 65737341     rt @ 0x%x...Asse
   22538:	40207472 25783020 202d2078 253a7325     rt @ 0x%x - %s:%
   22548:	00000a64 61686e55 656c646e 6e692064     d...Unhandled in
   22558:	72726574 20747075 646c2528 65202c29     terrupt (%ld), e
   22568:	70656378 6e6f6974 20707320 30257830     xception sp 0x%0
   22578:	0a786c38 00000000 3a307220 30257830     8lx..... r0:0x%0
   22588:	20786c38 3a317220 30257830 20786c38     8lx  r1:0x%08lx 
   22598:	3a327220 30257830 20786c38 3a337220      r2:0x%08lx  r3:
   225a8:	30257830 0a786c38 00000000 3a347220     0x%08lx..... r4:
   225b8:	30257830 20786c38 3a357220 30257830     0x%08lx  r5:0x%0
   225c8:	20786c38 3a367220 30257830 20786c38     8lx  r6:0x%08lx 
   225d8:	3a377220 30257830 0a786c38 00000000      r7:0x%08lx.....
   225e8:	3a387220 30257830 20786c38 3a397220      r8:0x%08lx  r9:
   225f8:	30257830 20786c38 3a303172 30257830     0x%08lx r10:0x%0
   22608:	20786c38 3a313172 30257830 0a786c38     8lx r11:0x%08lx.
   22618:	00000000 3a323172 30257830 20786c38     ....r12:0x%08lx 
   22628:	3a726c20 30257830 20786c38 3a637020      lr:0x%08lx  pc:
   22638:	30257830 20786c38 3a727370 30257830     0x%08lx psr:0x%0
   22648:	0a786c38 00000000 52534349 2578303a     8lx.....ICSR:0x%
   22658:	786c3830 53464820 78303a52 6c383025     08lx HFSR:0x%08l
   22668:	46432078 303a5253 38302578 000a786c     x CFSR:0x%08lx..
   22678:	52414642 2578303a 786c3830 464d4d20     BFAR:0x%08lx MMF
   22688:	303a5241 38302578 000a786c 6e69616d     AR:0x%08lx..main
   22698:	00000000 656c6469 00000000 7379736d     ....idle....msys
   226a8:	0000315f                                _1..

000226ac <MemFile_methods>:
   226ac:	0001c62d 00000000                       -.......

000226b4 <stdout>:
   226b4:	20000124                                $.. 

000226b8 <nrf52k_flash_dev>:
   226b8:	000226d0 00000000 00080000 00000080     .&..............
   226c8:	00000001 000000ff                       ........

000226d0 <nrf52k_flash_funcs>:
   226d0:	0001c899 0001c7c9 0001c751 0001c7a9     ........Q.......
   226e0:	00000000 0001c7a5 00000000              ............

000226ec <nrf52_hal_timers>:
   226ec:	2000ded0 00000000 00000000 00000000     ... ............
	...

00022704 <hal_i2c1_cfg>:
   22704:	00000007 00000006 00000064              ........d...

00022710 <os_bsp_spi0m_cfg>:
   22710:	001d0302 736e6573 6e5f726f 6669746f     ....sensor_notif
   22720:	7476655f 00000073                       _evts...

00022728 <COLLECTOR_NODE_HW_ID>:
   22728:	066aff57 50547878 67242949              W.j.xxTPI)$g

00022734 <SENSOR_NODE_HW_IDS>:
   22734:	066dff38 3634574e 43085825 04030201     8.m.NW46%X.C....
   22744:	08070605 020b0a09 04030201 08070605     ................
   22754:	030b0a09 04030201 08070605 040b0a09     ................
   22764:	04030201 08070605 050b0a09 77687325     ............%shw
   22774:	00206469 30313025 00786c6c 646f6e20     id .%010llx. nod
   22784:	00002065 65737325 726f736e 25237325     e ..%ssensor%s#%
   22794:	00000a64 6f637325 63656c6c 25726f74     d...%scollector%
   227a4:	00000a73 74737325 61646e61 656e6f6c     s...%sstandalone
   227b4:	000a7325 2054454e 00000000 73257325     %s..NET ....%s%s
   227c4:	0a732520 00000000 00000000               %s.........

000227d0 <sensor_node_addresses>:
   227d0:	b4b5b6f1 000000b3 b4b5b6cd 000000b3     ................
   227e0:	b4b5b6a3 000000b3 b4b5b60f 000000b3     ................
   227f0:	b4b5b605 000000b3 706d6574 7574735f     ........temp_stu
   22800:	00305f62 20504d54 61657263 25206574     b_0.TMP create %
   22810:	00000a73                                s...

00022814 <g_temp_stub_sensor_driver>:
   22814:	0001d6d5 0001d5dd 00000000 00000000     ................
	...
   2283c:	20425453 64616572 6d657420 65732070     STB read temp se
   2284c:	726f736e 0000000a 635f636f 62635f6c     nsor....oc_cl_cb
   2285c:	00000073 725f636f 6f5f7065 00000000     s...oc_rep_o....

0002286c <sysflash_map_dflt>:
	...
   22874:	00004000 00000001 00008000 00073c00     .@...........<..
   22884:	00000002 0007bc00 00000400 00000003     ................
   22894:	0007c000 00001000 00000010 00004000     .............@..
   228a4:	00004000 00000011 0007d000 00003000     .@...........0..
   228b4:	70616f63 6365725f 65766965 544f4e20     coap_receive NOT
   228c4:	504d4920 454d454c 4445544e 0000000a      IMPLEMENTED....

/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
 108748	    108	  57144	 166000	  28870	/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
